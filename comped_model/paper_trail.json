{" PaperTrail set_whodunnit":{"type":"method","name":"set_whodunnit","children":[],"call":[" send "," lambda ","Thread  current []= ","Thread  current "]}," PaperTrail whodunnit=":{"type":"method","name":"whodunnit=","children":[],"call":[" paper_trail_store []= "," paper_trail_store "," request whodunnit= "," request "," ActiveSupport Deprecation  warn "," caller "]}," PaperTrail whodunnit":{"type":"method","name":"whodunnit","children":[],"call":[" paper_trail_store [] "," paper_trail_store "," paper_trail_store []= "," raise "," block_given? "," paper_trail_store [] call "," paper_trail_store [] respond_to? "," request "," ActiveSupport Deprecation  warn "," caller "," request whodunnit ","value nil? "]}," PaperTrail enabled?":{"type":"method","name":"enabled?","children":[],"call":["PaperTrail  config enabled ! ! ","PaperTrail  config enabled ! ","PaperTrail  config enabled ","PaperTrail  config "]}," PaperTrail enabled=":{"type":"method","name":"enabled=","children":[],"call":["PaperTrail  config enabled= ","PaperTrail  config "]}," PaperTrail included":{"type":"method","name":"included","children":[],"call":[]}," PaperTrail config":{"type":"method","name":"config","children":[],"call":[" block_given? ","PaperTrail Config  instance "]}," Version set_user_id":{"type":"method","name":"set_user_id","children":[],"call":[" user_id= "," whodunnit id "," whodunnit "," whodunnit is_a? "]}," Version index":{"type":"method","name":"index","children":[],"call":["Version  all index ","Version  all "," item_id "," item_type "," sibling_versions all map index "," id "," sibling_versions all map "," sibling_versions all "," sibling_versions "," sibling_versions select order map index "," sibling_versions select order map "," sibling_versions select order "," sibling_versions select "," send "," class primary_key to_sym "," class primary_key "," class "]}," Version previous":{"type":"method","name":"previous","children":[],"call":["Version  first "," item_id "," item_type "," id "," sibling_versions preceding first "," sibling_versions preceding "," sibling_versions "]}," Version next":{"type":"method","name":"next","children":[],"call":["Version  first "," item_id "," item_type "," id "," sibling_versions subsequent first "," sibling_versions subsequent "," sibling_versions "]}," Version reify":{"type":"method","name":"reify","children":[],"call":["RAILS_DEFAULT_LOGGER  warn "," id "," item_type ","model send ","attrs each ","klass new ","class_name constantize ","attrs [] ","attrs [] blank? "," item ","YAML  load "," object "," object nil? "," logger warn "," logger ","model version= "," reify_has_ones ","options [] ","options [] == ","options reverse_merge! ","k to_sym "," item_type constantize inheritance_column "," item_type constantize "," without_identity_map ","options []= ","model class version_name ","model class ","model class version_association_name ","model respond_to? ","model class unserialize_attributes ","PaperTrail  serializer load ","PaperTrail  serializer ","model []= ","model class unserialize_attributes_for_paper_trail ","attrs []= ","(send\n  (send\n    (lvar :model) :attribute_names) :-\n  (send\n    (lvar :attrs) :keys)) each ","model attribute_names - ","attrs keys ","model attribute_names ","klass new  send "," item  send ","YAML  load  each ","PaperTrail  serializer load  each ","class_name constantize  new ","attrs []  constantize "," item_type  constantize ","YAML  load  [] ","PaperTrail  serializer load  [] ","YAML  load  [] blank? ","PaperTrail  serializer load  [] blank? ","klass new  version= "," item  version= ","klass new  class version_name "," item  class version_name ","klass new  class "," item  class ","klass new  class version_association_name "," item  class version_association_name ","klass new  respond_to? "," item  respond_to? ","klass new  class unserialize_attributes "," item  class unserialize_attributes ","klass new  []= "," item  []= ","klass new  class unserialize_attributes_for_paper_trail "," item  class unserialize_attributes_for_paper_trail ","YAML  load  []= ","PaperTrail  serializer load  []= ","(send\n  (send\n    (lvar :klass new ) :attribute_names) :-\n  (send\n    (lvar :attrs) :keys)) each ","(send\n  (send\n    (lvar : item ) :attribute_names) :-\n  (send\n    (lvar :attrs) :keys)) each ","(send\n  (send\n    (lvar :model) :attribute_names) :-\n  (send\n    (lvar :YAML  load ) :keys)) each ","(send\n  (send\n    (lvar :model) :attribute_names) :-\n  (send\n    (lvar :PaperTrail  serializer load ) :keys)) each ","klass new  attribute_names - "," item  attribute_names - ","YAML  load  keys ","PaperTrail  serializer load  keys ","klass new  attribute_names "," item  attribute_names "]}," PaperTrail InstanceMethods versions_including_current_in_descending_order":{"type":"method","name":"versions_including_current_in_descending_order","children":[],"call":["v reverse ","v << ","Version  new "," updated_at "," object_to_string "," versions dup "," versions ","Version  all "," class name "," class "," id "," new_record? "," versions dup  re versions dup erse ","Version  all  reVersion  all erse "," versions dup  << ","Version  all  << ","  versions dup ersions dup "," Version  all ersions dup ","  versions dup ersions "," Version  all ersions "]}," PaperTrail InstanceMethods differences":{"type":"method","name":"differences","children":[],"call":["diffs << ","after [] ","before [] ","before diff keys sort inject ","before diff keys sort ","before diff keys ","before diff "]}," PaperTrail InstanceMethods yaml_to_hash":{"type":"method","name":"yaml_to_hash","children":[],"call":["YAML  load to_hash ","YAML  load ","yaml nil? "]}," PaperTrail InstanceMethods object_to_string":{"type":"method","name":"object_to_string","children":[],"call":["object attributes to_yaml ","object attributes "]}," PaperTrail InstanceMethods previous_version":{"type":"method","name":"previous_version","children":[],"call":["previous send ","ary first "," changes each "," changes ","previous id= "," id "," clone "," clone  send "," clone  id= "]}," PaperTrail InstanceMethods transform_whodunnit":{"type":"method","name":"transform_whodunnit","children":[],"call":[]}," PaperTrail InstanceMethods audit_trail":{"type":"method","name":"audit_trail","children":[],"call":["audit_trail << "," differences ","previous_version created_at "," transform_whodunnit ","previous_version whodunnit ","previous_version event ","k in? "," Array ","options [] ","hash reject! ","(lvar :attributes_before) each "," yaml_to_hash ","previous_version object ","version object ","previous_version nil? ","versions_desc [] ","index + ","versions_desc each_with_index "," versions_including_current_in_descending_order ","versions_desc []  created_at ","versions_desc []  whodunnit ","versions_desc []  event ","(lvar : yaml_to_hash ) each ","versions_desc []  object ","versions_desc []  nil? "," versions_including_current_in_descending_order  [] "," versions_including_current_in_descending_order  each_with_index "]}," PaperTrail InstanceMethods version_at":{"type":"method","name":"version_at","children":[],"call":["version reify "," versions first "," versions "," updated_at < "," updated_at "," updated_at <= "," versions first  reify ","  versions first s first ","  versions first s "]}," PaperTrail InstanceMethods record_destroy":{"type":"method","name":"record_destroy","children":[],"call":[" versions create ","PaperTrail  whodunnit "," object_to_string "," previous_version "," versions ","PaperTrail  enabled? "," class paper_trail_active "," class "," merge_metadata "," switched_on? "]}," PaperTrail InstanceMethods record_update":{"type":"method","name":"record_update","children":[],"call":[" versions build ","PaperTrail  whodunnit "," object_to_string "," previous_version "," versions ","PaperTrail  enabled? "," class paper_trail_active "," class "," changed? "," changed_and_we_care? "," merge_metadata "," switched_on? "]}," PaperTrail InstanceMethods record_create":{"type":"method","name":"record_create","children":[],"call":[" versions create ","PaperTrail  whodunnit "," versions ","PaperTrail  enabled? "," class paper_trail_active "," class "," merge_metadata "," switched_on? "]}," PaperTrail ClassMethods paper_trail_on":{"type":"method","name":"paper_trail_on","children":[],"call":[" paper_trail_active= "]}," PaperTrail ClassMethods paper_trail_off":{"type":"method","name":"paper_trail_off","children":[],"call":[" paper_trail_active= "]}," PaperTrail ClassMethods has_paper_trail":{"type":"method","name":"has_paper_trail","children":[],"call":[" after_destroy "," before_update "," after_create "," has_many "," paper_trail_active= "," cattr_accessor "," send "," ignore= ","(or\n  (send\n    (lvar :options) :[]\n    (sym :ignore))\n  (array)) map ","options [] "," meta= "]}," PaperTrail Config initialize":{"type":"method","name":"initialize","children":[],"call":["Mutex  new "," ActiveRecord VERSION STRING  < "]}," PaperTrail InstanceMethods changed_and_we_care?":{"type":"method","name":"changed_and_we_care?","children":[],"call":["(send\n  (send nil :changed) :-\n  (send\n    (send\n      (self) :class) :ignore)) empty? ! ","(send\n  (send nil :changed) :-\n  (send\n    (send\n      (self) :class) :ignore)) empty? "," changed - "," class ignore "," class "," changed "," changed? "]}," PaperTrail InstanceMethods merge_metadata":{"type":"method","name":"merge_metadata","children":[],"call":["data []= ","v call ","v respond_to? "," meta each "," meta "]}," PaperTrail InstanceMethods switched_on?":{"type":"method","name":"switched_on?","children":[],"call":[" class paper_trail_active "," class ","PaperTrail  enabled? "]}," PaperTrail Model InstanceMethods switched_on?":{"type":"method","name":"switched_on?","children":[],"call":[" class paper_trail_active "," class ","PaperTrail  enabled? "," class paper_trail_enabled_for_model ","PaperTrail  enabled_for_controller? "]}," PaperTrail Model InstanceMethods changed_and_we_care?":{"type":"method","name":"changed_and_we_care?","children":[],"call":["(send\n  (send nil :changed) :-\n  (send\n    (send\n      (self) :class) :ignore)) empty? ! ","(send\n  (send nil :changed) :-\n  (send\n    (send\n      (self) :class) :ignore)) empty? "," changed - "," class ignore "," class "," changed "," changed? "]}," PaperTrail Model InstanceMethods object_to_string":{"type":"method","name":"object_to_string","children":[],"call":["object attributes to_yaml ","object attributes ","object attributes except to_yaml ","object attributes except "," class skip "," class "," class paper_trail_options [] "," class paper_trail_options ","PaperTrail  serializer dump ","PaperTrail  serializer "," class serialize_attributes ","object attributes except tap "," class serialize_attributes_for_paper_trail "]}," PaperTrail Model InstanceMethods previous_version":{"type":"method","name":"previous_version","children":[],"call":["previous send ","ary first "," changes each "," changes ","previous id= "," id "," clone ","last_version reify "," versions last "," versions "," version previous "," version ","last_version try ","preceding_version try "," send last "," send "," class versions_association_name "," class "," source_version previous "," source_version ","preceding_version reify ","previous try "," paper_trail previous_version "," paper_trail "," class paper_trail_deprecate "," clone  send "," send last  send "," source_version previous  send "," clone  id= "," send last  id= "," source_version previous  id= "," versions last  reify "," version previous  reify "," version  clone  "," version  send last  "," version  source_version previous  "," versions last  try "," version previous  try "," send last  try "," source_version previous  try "," source_version  clone  "," source_version  send last  "," source_version  source_version previous  "," send last  reify "," source_version previous  reify "," clone  try "," paper_trail  clone _version "," paper_trail  send last _version "," paper_trail  source_version previous _version "]}," PaperTrail Model InstanceMethods merge_metadata":{"type":"method","name":"merge_metadata","children":[],"call":["data []= ","v call ","v respond_to? "," meta each "," meta ","data merge ","PaperTrail  controller_info "," send "," respond_to? ","v is_a? ","(begin\n  (lvar :v)) to_sym "," has_attribute? "," paper_trail_options [] each "," paper_trail_options [] "," paper_trail_options ","data [] != ","data [] "," paper_trail merge_metadata "," paper_trail "," class paper_trail_deprecate "," class "]}," PaperTrail Model InstanceMethods version_at":{"type":"method","name":"version_at","children":[],"call":["version reify "," versions first "," versions "," updated_at <= "," updated_at ","version try "," versions after first "," versions after "," send after first "," send after "," send "," class versions_association_name "," class ","v reify "," send following first "," send following "," send subsequent first "," send subsequent "," destroyed? "," paper_trail version_at "," paper_trail "," class paper_trail_deprecate "," versions first  reify "," versions after first  reify "," send after first  reify "," send after first ersion reify "," send following first ersion reify "," send subsequent first ersion reify ","  versions first s first ","  versions after first s first ","  send after first s first ","  send after first ersions first ","  send following first ersions first ","  send subsequent first ersions first ","  versions first s ","  versions after first s ","  send after first s ","  send after first ersions ","  send following first ersions ","  send subsequent first ersions "," versions first  try "," versions after first  try "," send after first  try "," send after first ersion try "," send following first ersion try "," send subsequent first ersion try ","  versions first s after first ","  versions after first s after first ","  send after first s after first ","  send after first ersions after first ","  send following first ersions after first ","  send subsequent first ersions after first ","  versions first s after ","  versions after first s after ","  send after first s after ","  send after first ersions after ","  send following first ersions after ","  send subsequent first ersions after "," class  versions first s_association_name "," class  versions after first s_association_name "," class  send after first s_association_name "," class  send after first ersions_association_name "," class  send following first ersions_association_name "," class  send subsequent first ersions_association_name "," send following first  reify "," send subsequent first  reify "," paper_trail  versions first _at "," paper_trail  versions after first _at "," paper_trail  send after first _at "," paper_trail  send after first ersion_at "," paper_trail  send following first ersion_at "," paper_trail  send subsequent first ersion_at "]}," PaperTrail Model InstanceMethods record_destroy":{"type":"method","name":"record_destroy","children":[],"call":[" versions create "," merge_metadata ","PaperTrail  whodunnit "," object_to_string "," previous_version "," versions "," switched_on? "," item_before_change "," new_record? ! "," new_record? ","Version  create "," versions send "," class name "," class "," id "," version_class_name constantize create "," version_class_name constantize "," version_class_name "," version_class create "," version_class "," class base_class name "," class base_class "," send send "," send "," class versions_association_name "," paper_trail_event "," class paper_trail_version_class create "," class paper_trail_version_class ","PaperTrail  serializer dump ","PaperTrail  serializer "," class paper_trail_version_class object_col_is_json? "," object_attrs_for_paper_trail "," paper_trail_switched_on? "," class version_association_name "," save_associations "," set_transaction_id ","data []= ","PaperTrail  transaction_id "," class paper_trail_version_class column_names include? "," class paper_trail_version_class column_names "," attributes_before_change "," pt_recordable_object "," update_transaction_id "," send reset "," log_version_errors ","version errors any? ","version errors "," add_transaction_id_to "," paper_trail record_destroy "," paper_trail ","  class paper_trail_version_class create s create "," previous_ class paper_trail_version_class create  ","  class paper_trail_version_class create s ","  class paper_trail_version_class create s send ","  class paper_trail_version_class create _class_name constantize create ","  class paper_trail_version_class create _class_name constantize ","  class paper_trail_version_class create _class_name ","  class paper_trail_version_class create _class create ","  class paper_trail_version_class create _class "," class  class paper_trail_version_class create s_association_name "," class paper_trail_ class paper_trail_version_class create _class create "," class paper_trail_ class paper_trail_version_class create _class "," class paper_trail_ class paper_trail_version_class create _class object_col_is_json? ","  object_attrs_for_paper_trail _for_paper_trail "," class  class paper_trail_version_class create _association_name "," class paper_trail_ class paper_trail_version_class create _class column_names include? "," class paper_trail_ class paper_trail_version_class create _class column_names "," log_ class paper_trail_version_class create _errors "," class paper_trail_version_class create  errors any? "," class paper_trail_version_class create  errors "]}," PaperTrail Model InstanceMethods record_update":{"type":"method","name":"record_update","children":[],"call":[" versions build "," merge_metadata ","PaperTrail  whodunnit "," object_to_string "," previous_version "," versions "," changed_and_we_care? "," switched_on? "," item_before_change "," changed_notably? ","data []= "," changes to_yaml "," changes ","Version  method_defined? ","(send\n  (send\n    (self) :changes) :reject) to_yaml "," notably_changed include? ! "," notably_changed include? "," notably_changed "," changes reject "," send build "," send "," class versions_association_name "," class "," version_class column_names include? "," version_class column_names "," version_class ","PaperTrail  serializer dump "," changes_for_paper_trail ","PaperTrail  serializer "," paper_trail_event "," class paper_trail_version_class object_changes_col_is_json? "," class paper_trail_version_class "," class paper_trail_version_class column_names include? "," class paper_trail_version_class column_names "," class paper_trail_version_class object_col_is_json? "," object_attrs_for_paper_trail "," paper_trail_switched_on? "," save_associations "," set_transaction_id "," send create ","PaperTrail  transaction_id "," paper_trail_options [] "," paper_trail_options "," updated_at ","PaperTrail  timestamp_field "," respond_to? "," attributes_before_change "," pt_recordable_object_changes "," pt_record_object_changes? "," pt_recordable_object "," update_transaction_id "," log_version_errors ","version errors any? ","version errors "," add_transaction_id_to "," paper_trail record_update "," paper_trail ","  send create s build "," previous_ send create  ","  send create s "," class  send create s_association_name ","  send create _class column_names include? ","  send create _class column_names ","  send create _class "," class paper_trail_ send create _class object_changes_col_is_json? "," class paper_trail_ send create _class "," class paper_trail_ send create _class column_names include? "," class paper_trail_ send create _class column_names "," class paper_trail_ send create _class object_col_is_json? ","  object_attrs_for_paper_trail _for_paper_trail "," log_ send create _errors "," send create  errors any? "," send create  errors "]}," PaperTrail Model InstanceMethods record_create":{"type":"method","name":"record_create","children":[],"call":[" versions create "," merge_metadata ","PaperTrail  whodunnit "," versions "," switched_on? "," send create "," send "," class versions_association_name "," class ","data []= ","(send\n  (send\n    (self) :changes) :reject) to_yaml "," notably_changed include? ! "," notably_changed include? "," notably_changed "," changes reject "," changes "," version_class column_names include? "," version_class column_names "," version_class "," changed_notably? "," changes_for_paper_trail to_yaml "," changes_for_paper_trail ","PaperTrail  serializer dump ","PaperTrail  serializer "," paper_trail_event "," send create! "," class paper_trail_version_class object_changes_col_is_json? "," class paper_trail_version_class "," class paper_trail_version_class column_names include? "," class paper_trail_version_class column_names "," paper_trail_switched_on? "," save_associations "," set_transaction_id ","PaperTrail  transaction_id "," paper_trail_options [] "," paper_trail_options "," created_at ","PaperTrail  timestamp_field "," respond_to? "," updated_at "," pt_recordable_object_changes "," pt_record_object_changes? "," update_transaction_id "," add_transaction_id_to "," paper_trail record_create "," paper_trail ","  send create! s create ","  send create! s "," class  send create! s_association_name ","  send create! _class column_names include? ","  send create! _class column_names ","  send create! _class "," class paper_trail_ send create! _class object_changes_col_is_json? "," class paper_trail_ send create! _class "," class paper_trail_ send create! _class column_names include? "," class paper_trail_ send create! _class column_names "]}," PaperTrail Model ClassMethods paper_trail_on":{"type":"method","name":"paper_trail_on","children":[],"call":[" paper_trail_active= "," paper_trail_enabled_for_model= "," paper_trail_on! "," warn "]}," PaperTrail Model ClassMethods paper_trail_off":{"type":"method","name":"paper_trail_off","children":[],"call":[" paper_trail_active= "," paper_trail_enabled_for_model= "," paper_trail_off! "," warn "]}," PaperTrail Model ClassMethods has_paper_trail":{"type":"method","name":"has_paper_trail","children":[],"call":[" after_destroy "," before_update "," after_create "," has_many "," paper_trail_active= "," cattr_accessor "," meta= ","options [] "," ignore= ","(or\n  (send\n    (lvar :options) :[]\n    (sym :ignore))\n  (array)) map "," send "," attr_accessor "," paper_trail setup "," paper_trail ","defaults merge ","PaperTrail  config has_paper_trail_defaults ","PaperTrail  config "," only= ","(or\n  (send\n    (send\n      (array\n        (send\n          (lvar :options) :[]\n          (sym :only))) :flatten) :compact)\n  (array)) map ","(send\n  (lvar :options) :[]\n  (sym :only)) flatten compact ","(send\n  (lvar :options) :[]\n  (sym :only)) flatten ","(or\n  (send\n    (send\n      (array\n        (send\n          (lvar :options) :[]\n          (sym :ignore))) :flatten) :compact)\n  (array)) map ","(send\n  (lvar :options) :[]\n  (sym :ignore)) flatten compact ","(send\n  (lvar :options) :[]\n  (sym :ignore)) flatten "," version_class_name "," version_class_name= "," paper_trail_enabled_for_model= "," primary_key "," versions_association_name "," versions_association_name= ","options [] include? ","options [] ! "," version_class_name constantize primary_key "," version_class_name constantize "," class_attribute "," version_name "," version_name= "," skip= ","(or\n  (send\n    (send\n      (array\n        (send\n          (lvar :options) :[]\n          (sym :skip))) :flatten) :compact)\n  (array)) map ","(send\n  (lvar :options) :[]\n  (sym :skip)) flatten compact ","(send\n  (lvar :options) :[]\n  (sym :skip)) flatten "," version_association_name "," version_association_name= "," unless_condition= "," if_condition= ","PaperTrail  timestamp_field "," version_key "," paper_trail_options [] "," paper_trail_options "," paper_trail_options []= ","(or\n  (send\n    (send\n      (array\n        (send\n          (send nil :paper_trail_options) :[]\n          (lvar :k))) :flatten) :compact)\n  (array)) map ","(send\n  (send nil :paper_trail_options) :[]\n  (lvar :k)) flatten compact ","(send\n  (send nil :paper_trail_options) :[]\n  (lvar :k)) flatten ","(sym :ignore) each "," paper_trail_options= ","options dup ","options_on include? ","options_on empty? "," Array "," order "," lambda "," ActiveRecord VERSION STRING  to_f >= "," ActiveRecord VERSION STRING  to_f ","attr to_s ","attr stringify_keys ","attr is_a? ","(send\n  (send nil :paper_trail_options) :[]\n  (lvar :k)) flatten compact map ","ActiveRecord VERSION STRING  to_f >= ","ActiveRecord VERSION STRING  to_f "," ActiveRecord VERSION MAJOR  >= "," after_update "," before_save "," paper_trail_version_class timestamp_sort_order "," paper_trail_version_class ","model version_class_name constantize timestamp_sort_order ","model version_class_name constantize ","model version_class_name "," model timestamp_sort_order "," model "," after_rollback "," after_commit "," paper_trail_options [] nil? "," setup_callbacks_from_options "," setup_model_for_paper_trail ","options []= "," setup_callbacks_for_habtm ","PaperTrail  config has_paper_trail_defaults  merge ","PaperTrail  config has_paper_trail_PaperTrail  config has_paper_trail_defaults  "," Array  include? "," Array  empty? "]}," PaperTrail Model included":{"type":"method","name":"included","children":[],"call":[]}," PaperTrail Controller set_whodunnit":{"type":"method","name":"set_whodunnit","children":[],"call":[" PaperTrail  whodunnit= "," send "," set_paper_trail_whodunnit "," logger warn "," logger "]}," PaperTrail Controller included":{"type":"method","name":"included","children":[],"call":[]}," PaperTrail paper_trail_store":{"type":"method","name":"paper_trail_store","children":[],"call":["RequestStore  store [] ","RequestStore  store "]}," PaperTrail controller_info=":{"type":"method","name":"controller_info=","children":[],"call":[" paper_trail_store []= "," paper_trail_store "," request controller_info= "," request "," ActiveSupport Deprecation  warn "," caller "]}," PaperTrail controller_info":{"type":"method","name":"controller_info","children":[],"call":[" paper_trail_store [] "," paper_trail_store "," request controller_info "," request "," ActiveSupport Deprecation  warn "," caller "]}," PaperTrail Controller set_paper_trail_controller_info":{"type":"method","name":"set_paper_trail_controller_info","children":[],"call":[" PaperTrail  controller_info= "," info_for_paper_trail "," paper_trail_enabled_for_controller "]}," PaperTrail Controller set_paper_trail_whodunnit":{"type":"method","name":"set_paper_trail_whodunnit","children":[],"call":[" PaperTrail  whodunnit= "," user_for_paper_trail "," paper_trail_enabled_for_controller "]}," PaperTrail Controller info_for_paper_trail":{"type":"method","name":"info_for_paper_trail","children":[],"call":[]}," PaperTrail Controller user_for_paper_trail":{"type":"method","name":"user_for_paper_trail","children":[],"call":[" current_user "]}," PaperTrail Model InstanceMethods item_before_change":{"type":"method","name":"item_before_change","children":[],"call":["previous send ","ary first "," changes each "," changes ","previous id= "," id "," clone ","attr to_sym ","previous []= "," changed_attributes each "," changed_attributes "," clone tap "," dup tap "," dup ","prev []= ","prev id= ","previous tap "," send "," send nil? ! "," send nil? "," respond_to? "," all_timestamp_attributes each "," all_timestamp_attributes ","(send\n  (send nil :changed_attributes) :select) each "," class column_names include? "," class column_names "," class "," changed_attributes select ","column to_s ","enums [] [] ","enums [] ","previous defined_enums ","previous respond_to? "," defined_enums "," attributes tap "," attributes "," clone  send "," dup  send "," clone  id= "," dup  id= "," clone  []= "," dup  []= "," clone  tap "," dup  tap ","previous defined_enums  [] [] "," defined_enums  [] [] ","previous defined_enums  [] "," defined_enums  [] "," clone  defined_enums "," dup  defined_enums ","previous defined_previous defined_enums  ","previous defined_ defined_enums  "," clone  respond_to? "," dup  respond_to? "," defined_previous defined_enums  "," defined_ defined_enums  "]}," PaperTrail Model InstanceMethods next_version":{"type":"method","name":"next_version","children":[],"call":["subsequent_version reify "," version next "," version "," source_version next "," source_version "," class find "," id "," class "," paper_trail next_version "," paper_trail "," class paper_trail_deprecate "," version next  reify "," source_version next  reify "]}," Version terminator":{"type":"method","name":"terminator","children":[],"call":[" whodunnit "]}," Version originator":{"type":"method","name":"originator","children":[],"call":[" previous try "," previous "]}," PaperTrail Model InstanceMethods originator":{"type":"method","name":"originator","children":[],"call":[" versions last try "," versions last "," versions ","Version  with_item_keys last try ","Version  with_item_keys last ","Version  with_item_keys "," id "," class name "," class "," version_class_name constantize with_item_keys last try "," version_class_name constantize with_item_keys last "," version_class_name constantize with_item_keys "," version_class_name constantize "," version_class_name "," version_class with_item_keys last try "," version_class with_item_keys last "," version_class with_item_keys "," version_class "," class base_class name "," class base_class "," class paper_trail_version_class with_item_keys last try "," class paper_trail_version_class with_item_keys last "," class paper_trail_version_class with_item_keys "," class paper_trail_version_class ","(or\n  (send nil :source_version)\n  (send\n    (send nil :send\n      (send\n        (send\n          (self) :class) :versions_association_name)) :last)) try "," send last "," send "," class versions_association_name "," source_version "," paper_trail_originator "," warn "," ActiveSupport Deprecation  warn "," paper_trail originator "," paper_trail "," class paper_trail_deprecate "]}," CreateVersions down":{"type":"method","name":"down","children":[],"call":[]}," CreateVersions up":{"type":"method","name":"up","children":[],"call":[]}," PaperTrailGenerator create_migration_file":{"type":"method","name":"create_migration_file","children":[],"call":[" migration_template "]}," PaperTrailGenerator next_migration_number":{"type":"method","name":"next_migration_number","children":[],"call":[]}," Version reify_has_ones":{"type":"method","name":"reify_has_ones","children":[],"call":["model send ","assoc name ","model send send ","version_until attributes each ","version_until attributes ","child version_until "," id ","child respond_to? ","model class reflect_on_all_associations each ","model class reflect_on_all_associations ","model class ","child_as_it_was attributes each ","child_as_it_was attributes ","child version_at "," created_at - ","lookback seconds "," created_at ","k to_sym "," send - "," send ","PaperTrail  timestamp_field ","child version_until  attributes each ","child version_until  attributes ","child child version_until  ","model send  version_until ","model send  respond_to? ","model send _as_it_was attributes each ","child version_at  attributes each ","model send _as_it_was attributes ","child version_at  attributes ","model send  version_at "]}," PaperTrail Model InstanceMethods version_until":{"type":"method","name":"version_until","children":[],"call":["version reify "," versions first "," versions "," versions first  reify ","  versions first s first ","  versions first s "]}," PaperTrail Model InstanceMethods live?":{"type":"method","name":"live?","children":[],"call":[" version nil? "," version "," source_version nil? "," source_version "," paper_trail live? "," paper_trail "," class paper_trail_deprecate "," class "]}," Version sibling_versions":{"type":"method","name":"sibling_versions","children":[],"call":["Version  with_item_keys "," item_id "," item_type "," class with_item_keys "," class "]}," PaperTrail Model InstanceMethods notably_changed":{"type":"method","name":"notably_changed","children":[],"call":[" changed - "," class ignore "," class "," changed "," changed_and_not_ignored & "," class only "," changed_and_not_ignored "," class only empty? ","only empty? "," class paper_trail_options [] "," class paper_trail_options ","only << ","condition call ","condition respond_to? ","obj each ","obj is_a? ","only delete_if "," paper_trail_options [] dup "," paper_trail_options [] "," paper_trail_options "," paper_trail notably_changed "," paper_trail "," class paper_trail_deprecate "," class  class paper_trail_options []  "," class  paper_trail_options [] dup  "," class  class paper_trail_options []  empty? "," class  paper_trail_options [] dup  empty? "," class paper_trail_options []  empty? "," paper_trail_options [] dup  empty? "," class paper_trail_options []  << "," paper_trail_options [] dup  << "," class paper_trail_options []  delete_if "," paper_trail_options [] dup  delete_if "]}," PaperTrail Model InstanceMethods changed_notably?":{"type":"method","name":"changed_notably?","children":[],"call":[" notably_changed any? "," notably_changed ","(send\n  (send nil :notably_changed) :-\n  (send\n    (send nil :timestamp_attributes_for_update_in_model) :map\n    (block-pass\n      (sym :to_s)))) any? "," notably_changed - "," timestamp_attributes_for_update_in_model map "," timestamp_attributes_for_update_in_model ","(send\n  (send nil :changed) :&\n  (send\n    (send\n      (self) :paper_trail_options) :[]\n    (sym :ignore))) any? "," changed & "," paper_trail_options [] "," paper_trail_options "," changed "," paper_trail_options [] any? ","(send\n  (send nil :notably_changed) :-\n  (lvar :timestamps)) any? "," ignored_attr_has_changed? "," paper_trail changed_notably? "," paper_trail "," class paper_trail_deprecate "," class ","(send\n  (send nil :notably_changed) :-\n  (lvar : timestamp_attributes_for_update_in_model map )) any? "]}," PaperTrail version":{"type":"method","name":"version","children":[],"call":[]}," PaperTrail serializer":{"type":"method","name":"serializer","children":[],"call":["PaperTrail  config serializer ","PaperTrail  config "]}," PaperTrail serializer=":{"type":"method","name":"serializer=","children":[],"call":["PaperTrail  config serializer= ","PaperTrail  config "]}," PaperTrail timestamp_field=":{"type":"method","name":"timestamp_field=","children":[],"call":[" raise ","PaperTrail  config timestamp_field= ","PaperTrail  config "," ActiveSupport Deprecation  warn "," caller "]}," PaperTrail request":{"type":"method","name":"request","children":[],"call":["Request  with "," block_given? ! "," block_given? ","options nil? ","block ! "]}," PaperTrail gem_version":{"type":"method","name":"gem_version","children":[],"call":[" Gem Version  new "]}," PaperTrail VERSION to_s":{"type":"method","name":"to_s","children":[],"call":[]}," PaperTrail VersionConcern enforce_version_limit!":{"type":"method","name":"enforce_version_limit!","children":[],"call":["excess_versions map ","previous_versions - ","previous_versions last ","previous_versions size > ","previous_versions size "," sibling_versions not_creates order "," class timestamp_sort_order "," class "," sibling_versions not_creates "," sibling_versions ","limit is_a? ","PaperTrail  config version_limit ","PaperTrail  config "," version_limit ","excess_previous_versions map ","PaperTrail  config version_limit is_a? ","previous_versions -  map "," sibling_versions not_creates order  - "," sibling_versions not_creates  - "," sibling_versions not_creates order  last "," sibling_versions not_creates  last "," sibling_versions not_creates order  size > "," sibling_versions not_creates  size > "," sibling_versions not_creates order  size "," sibling_versions not_creates  size ","PaperTrail  config version_limit  is_a? "," version_limit  is_a? ","PaperTrail  config version_PaperTrail  config version_limit  ","PaperTrail  config version_ version_limit  "," version_PaperTrail  config version_limit  "," version_ version_limit  ","excess_ sibling_versions not_creates order  map ","excess_ sibling_versions not_creates  map ","PaperTrail  config version_PaperTrail  config version_limit  is_a? ","PaperTrail  config version_ version_limit  is_a? "]}," PaperTrail VersionConcern object_changes_deserialized":{"type":"method","name":"object_changes_deserialized","children":[],"call":["PaperTrail  serializer load "," object_changes ","PaperTrail  serializer "," class object_changes_col_is_json? "," class "," Kernel  warn "," format ","e instance_of? "]}," PaperTrail VersionConcern load_changeset":{"type":"method","name":"load_changeset","children":[],"call":["AttributeSerializers ObjectChangesAttribute  new deserialize ","AttributeSerializers ObjectChangesAttribute  new "," item class "," item "," item nil? ","HashWithIndifferentAccess  new "," object_changes_deserialized ","PaperTrail  config object_changes_adapter load_changeset ","PaperTrail  config object_changes_adapter ","PaperTrail  config ","PaperTrail  config object_changes_adapter respond_to? "," item_type constantize unserialize_attribute_changes_for_paper_trail! "," item_type constantize "," item_type "," item class unserialize_attribute_changes_for_paper_trail! "," object_HashWithIndifferentAccess  new _deserialized ","PaperTrail  config object_HashWithIndifferentAccess  new _adapter load_HashWithIndifferentAccess  new et ","PaperTrail  config object_HashWithIndifferentAccess  new _adapter ","PaperTrail  config object_HashWithIndifferentAccess  new _adapter respond_to? "," item_type constantize unserialize_attribute_HashWithIndifferentAccess  new _for_paper_trail! "," item class unserialize_attribute_HashWithIndifferentAccess  new _for_paper_trail! "]}," PaperTrail VersionConcern index":{"type":"method","name":"index","children":[],"call":["RecordHistory  new index ","RecordHistory  new "," class "," sibling_versions "," sibling_versions select order index "," sibling_versions select order ","PaperTrail  timestamp_field "," sibling_versions select "," class primary_key "," class table_name "," class primary_key to_sym "," class timestamp_sort_order ","table [] ","table [] asc "," class primary_key_is_int? "," class arel_table "," class  class table_name  "," class  class arel_table _name "," class arel_table  [] "," class arel_table  [] asc "," class arel_ class arel_table  "]}," PaperTrail VersionConcern previous":{"type":"method","name":"previous","children":[],"call":[" sibling_versions preceding first "," sibling_versions preceding "," sibling_versions "]}," PaperTrail VersionConcern next":{"type":"method","name":"next","children":[],"call":[" sibling_versions subsequent first "," sibling_versions subsequent "," sibling_versions "]}," PaperTrail VersionConcern sibling_versions":{"type":"method","name":"sibling_versions","children":[],"call":[" class with_item_keys "," item_id "," item_type "," class ","@sibling_versions nil? ","(ivar :@sibling_versions) ! ","reload == "," class with_item_keys  nil? ","(ivar : class with_item_keys ) ! "]}," PaperTrail VersionConcern terminator":{"type":"method","name":"terminator","children":[],"call":[" whodunnit "]}," PaperTrail VersionConcern paper_trail_originator":{"type":"method","name":"paper_trail_originator","children":[],"call":[" previous try "," previous "," previous whodunnit "]}," PaperTrail VersionConcern changeset":{"type":"method","name":"changeset","children":[],"call":[" load_changeset "," class column_names include? "," class column_names "," class "," item_type constantize unserialize_attribute_changes "," item_type constantize "," item_type ","HashWithIndifferentAccess  new tap ","HashWithIndifferentAccess  new ","PaperTrail  serializer load "," object_changes ","PaperTrail  serializer "," class object_changes_col_is_json? "," item_type constantize unserialize_attribute_changes_for_paper_trail! ","PaperTrail  serialized_attributes? "," loadPaperTrail  serializer load et "," load object_changes et "," item_type constantize unserialize_attributePaperTrail  serializer load  "," item_type constantize unserialize_attribute object_changes  "," objectPaperTrail  serializer load  "," object object_changes  "," class objectPaperTrail  serializer load _col_is_json? "," class object object_changes _col_is_json? "," item_type constantize unserialize_attributePaperTrail  serializer load _for_paper_trail! "," item_type constantize unserialize_attribute object_changes _for_paper_trail! "]}," PaperTrail VersionConcern reify":{"type":"method","name":"reify","children":[],"call":[" PaperTrail Reifier  reify "," object nil? "," object "," raise "," class column_names include? "," class column_names "," class "," reify_has_ones ","options [] ","options [] == ","model send ","model class version_association_name ","model class "," logger warn "," id "," item_type "," logger ","model []= ","k to_sym ","model respond_to? ","attrs each ","model class unserialize_attributes_for_paper_trail ","klass new ","class_name constantize ","attrs [] ","attrs [] blank? "," item_type constantize inheritance_column "," item_type constantize ","attrs []= ","(send\n  (send\n    (lvar :model) :attribute_names) :-\n  (send\n    (lvar :attrs) :keys)) each ","model attribute_names - ","attrs keys ","model attribute_names "," item ","PaperTrail  serializer load ","PaperTrail  serializer "," class object_col_is_json? ","options reverse_merge! ","options []= "," without_identity_map ","model has_attribute? "," reify_has_manys ","model class unserialize_attributes_for_paper_trail! ","PaperTrail  serialized_attributes? ","(lvasgn :_item\n  (send\n    (send\n      (lvar :klass) :unscoped) :find_by_id\n    (send nil :item_id))) nil? ","klass unscoped find_by_id "," item_id ","klass unscoped ","options [] != "," created_at ","klass new  send "," item  send ","klass new  class version_association_name "," item  class version_association_name ","klass new  class "," item  class ","klass new  []= "," item  []= ","klass new  respond_to? "," item  respond_to? ","PaperTrail  serializer load  each "," object  each ","klass new  class unserialize_attributes_for_paper_trail "," item  class unserialize_attributes_for_paper_trail ","class_name constantize  new ","attrs []  constantize "," item_type  constantize ","PaperTrail  serializer load  [] "," object  [] ","PaperTrail  serializer load  [] blank? "," object  [] blank? ","PaperTrail  serializer load  []= "," object  []= ","(send\n  (send\n    (lvar :klass new ) :attribute_names) :-\n  (send\n    (lvar :attrs) :keys)) each ","(send\n  (send\n    (lvar : item ) :attribute_names) :-\n  (send\n    (lvar :attrs) :keys)) each ","(send\n  (send\n    (lvar :model) :attribute_names) :-\n  (send\n    (lvar :PaperTrail  serializer load ) :keys)) each ","(send\n  (send\n    (lvar :model) :attribute_names) :-\n  (send\n    (lvar : object ) :keys)) each ","klass new  attribute_names - "," item  attribute_names - ","PaperTrail  serializer load  keys "," object  keys ","klass new  attribute_names "," item  attribute_names ","klass new  has_attribute? "," item  has_attribute? ","klass new  class unserialize_attributes_for_paper_trail! "," item  class unserialize_attributes_for_paper_trail! ","(lvasgn :_item\n  (send\n    (send\n      (lvar :class_name constantize ) :unscoped) :find_by_id\n    (send nil :item_id))) nil? ","(lvasgn :klass unscoped find_by_id \n  (send\n    (send\n      (lvar :klass) :unscoped) :find_by_id\n    (send nil :item_id))) nil? ","class_name constantize  unscoped find_by_id ","class_name constantize  unscoped "]}," PaperTrail VersionConcern object_deserialized":{"type":"method","name":"object_deserialized","children":[],"call":["PaperTrail  serializer load "," object ","PaperTrail  serializer "," class object_col_is_json? "," class "]}," PaperTrail VersionConcern ClassMethods subsequent_by_timestamp":{"type":"method","name":"subsequent_by_timestamp","children":[],"call":[" where order "," timestamp_sort_order "," where "," arel_table [] gt "," arel_table [] "," arel_table ","obj send ","obj is_a? ","obj send  send ","obj send  is_a? "]}," PaperTrail VersionConcern ClassMethods subsequent_by_id":{"type":"method","name":"subsequent_by_id","children":[],"call":[" where order "," arel_table [] asc "," arel_table [] "," primary_key "," arel_table "," where "," arel_table [] gt ","version id "]}," PaperTrail VersionConcern ClassMethods preceding_by_timestamp":{"type":"method","name":"preceding_by_timestamp","children":[],"call":[" where order "," timestamp_sort_order "," where "," arel_table [] lt "," arel_table [] "," arel_table ","obj send ","obj is_a? ","obj send  send ","obj send  is_a? "]}," PaperTrail VersionConcern ClassMethods preceding_by_id":{"type":"method","name":"preceding_by_id","children":[],"call":[" where order "," arel_table [] desc "," arel_table [] "," primary_key "," arel_table "," where "," arel_table [] lt ","obj id "]}," PaperTrail VersionConcern ClassMethods subsequent":{"type":"method","name":"subsequent","children":[],"call":[" subsequent_by_timestamp "," subsequent_by_id "," primary_key_is_int? ","timestamp_arg != "," where order ","PaperTrail  timestamp_field "," table_name "," where ","obj send ","obj is_a? "," timestamp_sort_order "," primary_key "," arel_table [] gt "," arel_table [] "," arel_table "," arel_table [] asc ","obj id ","obj send  send ","obj send  is_a? ","obj send  id "]}," PaperTrail VersionConcern ClassMethods preceding":{"type":"method","name":"preceding","children":[],"call":[" preceding_by_timestamp "," preceding_by_id "," primary_key_is_int? ","timestamp_arg != "," where order ","PaperTrail  timestamp_field "," table_name "," where ","obj send ","obj is_a? "," timestamp_sort_order "," primary_key "," arel_table [] lt "," arel_table [] "," arel_table "," arel_table [] desc ","obj id ","obj send  send ","obj send  is_a? ","obj send  id "]}," PaperTrail VersionConcern ClassMethods object_changes_col_is_json?":{"type":"method","name":"object_changes_col_is_json?","children":[],"call":["(sym :json) include? "," columns_hash [] try "," columns_hash [] "," columns_hash "," columns_hash [] type == "," columns_hash [] type "," columns_hash [] try == "]}," PaperTrail VersionConcern ClassMethods object_col_is_json?":{"type":"method","name":"object_col_is_json?","children":[],"call":["(sym :json) include? "," columns_hash [] type "," columns_hash [] "," columns_hash "," columns_hash [] type == "]}," PaperTrail VersionConcern ClassMethods primary_key_is_int?":{"type":"method","name":"primary_key_is_int?","children":[],"call":[" columns_hash [] type == "," columns_hash [] type "," columns_hash [] "," primary_key "," columns_hash "]}," PaperTrail VersionConcern ClassMethods where_object_changes":{"type":"method","name":"where_object_changes","children":[],"call":["Queries Versions WhereObjectChanges  new execute ","Queries Versions WhereObjectChanges  new "," raise ","args is_a? "," where ","condition1 and ","(send\n  (lvar :args) :map) reduce ","PaperTrail  serializer where_object_changes_condition ","PaperTrail  serializer ","args map "," arel_table [] "," arel_table ","where_conditions join ","value to_json "," columns_hash [] type == "," columns_hash [] type "," columns_hash [] "," columns_hash ","args to_json ","args []= ","args each ","a and ","predicates join ","values concat ","predicates push ","where_conditions reduce ","where_conditions join  join ","where_conditions join  reduce "]}," PaperTrail VersionConcern ClassMethods where_object":{"type":"method","name":"where_object","children":[],"call":["Queries Versions WhereObject  new execute ","Queries Versions WhereObject  new "," raise ","args is_a? "," where ","condition1 and ","(send\n  (lvar :args) :map) reduce ","PaperTrail  serializer where_object_condition ","PaperTrail  serializer ","args map "," arel_table [] "," arel_table ","where_conditions join "," columns_hash [] type == "," columns_hash [] type "," columns_hash [] "," columns_hash ","args to_json ","a and ","predicates join ","values concat ","value to_s ","predicates push ","args each ","where_conditions reduce ","where_conditions join  join ","where_conditions join  reduce "]}," PaperTrail VersionConcern ClassMethods timestamp_sort_order":{"type":"method","name":"timestamp_sort_order","children":[],"call":["array << "," arel_table [] send ","direction downcase "," arel_table [] "," primary_key "," arel_table "," primary_key_is_int? ","(send\n  (send\n    (send nil :arel_table) :[]\n    (sym :created_at)) :send\n  (send\n    (lvar :direction) :downcase)) tap ","PaperTrail  timestamp_field "," table_name ","(send\n  (send\n    (send nil :arel_table) :[]\n    (send\n      (const nil :PaperTrail) :timestamp_field)) :send\n  (send\n    (lvar :direction) :downcase)) tap "]}," PaperTrail VersionConcern ClassMethods between":{"type":"method","name":"between","children":[],"call":[" where order "," timestamp_sort_order "," where "," arel_table [] gt and "," arel_table [] lt "," arel_table [] "," arel_table "," arel_table [] gt ","PaperTrail  timestamp_field "," table_name "]}," PaperTrail VersionConcern ClassMethods not_creates":{"type":"method","name":"not_creates","children":[],"call":[" where "," where not "]}," PaperTrail VersionConcern ClassMethods destroys":{"type":"method","name":"destroys","children":[],"call":[" where "]}," PaperTrail VersionConcern ClassMethods updates":{"type":"method","name":"updates","children":[],"call":[" where "]}," PaperTrail VersionConcern ClassMethods creates":{"type":"method","name":"creates","children":[],"call":[" where "]}," PaperTrail VersionConcern ClassMethods with_item_keys":{"type":"method","name":"with_item_keys","children":[],"call":[" where "]}," PaperTrail TypeSerializers PostgresArraySerializer deserialize_with_ar":{"type":"method","name":"deserialize_with_ar","children":[],"call":["ActiveRecord ConnectionAdapters PostgreSQL OID Array  new deserialize ","ActiveRecord ConnectionAdapters PostgreSQL OID Array  new "]}," PaperTrail TypeSerializers PostgresArraySerializer serialize_with_ar":{"type":"method","name":"serialize_with_ar","children":[],"call":["ActiveRecord ConnectionAdapters PostgreSQL OID Array  new serialize ","ActiveRecord ConnectionAdapters PostgreSQL OID Array  new "]}," PaperTrail TypeSerializers PostgresArraySerializer active_record_pre_502?":{"type":"method","name":"active_record_pre_502?","children":[],"call":[" ActiveRecord VERSION TINY  < "," ActiveRecord VERSION MINOR  zero? "," ActiveRecord VERSION MAJOR  < "," ActiveRecord  gem_version < ","Gem Version  new "," ActiveRecord  gem_version "]}," PaperTrail TypeSerializers PostgresArraySerializer deserialize":{"type":"method","name":"deserialize","children":[],"call":[" deserialize_with_ar "," active_record_pre_502? "]}," PaperTrail TypeSerializers PostgresArraySerializer serialize":{"type":"method","name":"serialize","children":[],"call":[" serialize_with_ar "," active_record_pre_502? "]}," PaperTrail TypeSerializers PostgresArraySerializer initialize":{"type":"method","name":"initialize","children":[],"call":[]}," PaperTrail Serializers YAML where_object_changes_condition":{"type":"method","name":"where_object_changes_condition","children":[],"call":[" raise ","(str \"          where_object_changes no longer supports reading YAML from a text\\n\") squish freeze ","(str \"          where_object_changes no longer supports reading YAML from a text\\n\") squish ","arel_field matches or ","arel_field matches "," YAML  == "," YAML ENGINE  yamler == "," YAML ENGINE  yamler "," yaml_engine_id "," ActiveSupport Deprecation  warn "]}," PaperTrail Serializers YAML where_object_condition":{"type":"method","name":"where_object_condition","children":[],"call":["arel_field matches "]}," PaperTrail Serializers YAML dump":{"type":"method","name":"dump","children":[],"call":[" YAML  dump ","object to_hash ","object is_a? ","object to_hash  to_hash ","object to_hash  is_a? "]}," PaperTrail Serializers YAML load":{"type":"method","name":"load","children":[],"call":[" YAML  load "," YAML  unsafe_load "," YAML  respond_to? "," YAML  safe_load "," ActiveRecord  yaml_column_permitted_classes "," use_safe_load? "," yaml_column_permitted_classes "]}," PaperTrail Serializers JSON where_object_changes_condition":{"type":"method","name":"where_object_changes_condition","children":[],"call":[" raise ","(str \"          where_object_changes no longer supports reading JSON from a text\\n\") squish freeze ","(str \"          where_object_changes no longer supports reading JSON from a text\\n\") squish ","arel_field matches or ","arel_field matches ","value to_json "," ActiveSupport Deprecation  warn ","(str \"          where_object_changes no longer supports reading json from a text\\n\") squish freeze ","(str \"          where_object_changes no longer supports reading json from a text\\n\") squish "]}," PaperTrail Serializers JSON where_object_condition":{"type":"method","name":"where_object_condition","children":[],"call":["arel_field matches ","arel_field matches or ","value is_a? ","value to_json "]}," PaperTrail Serializers JSON dump":{"type":"method","name":"dump","children":[],"call":["ActiveSupport JSON  encode "]}," PaperTrail Serializers JSON load":{"type":"method","name":"load","children":[],"call":["ActiveSupport JSON  decode "]}," PaperTrail Request validate_public_options":{"type":"method","name":"validate_public_options","children":[],"call":[" raise ","options each "]}," PaperTrail Request store":{"type":"method","name":"store","children":[],"call":["RequestStore  store [] ","RequestStore  store "]}," PaperTrail Request whodunnit":{"type":"method","name":"whodunnit","children":[],"call":["who call ","who respond_to? "," store [] "," store "," store []  call "," store []  respond_to? "]}," PaperTrail Request whodunnit=":{"type":"method","name":"whodunnit=","children":[],"call":[" store []= "," store "]}," PaperTrail Request with":{"type":"method","name":"with","children":[],"call":[" set "," merge "," to_h "," validate_public_options "," block_given? "]}," PaperTrail Request to_h":{"type":"method","name":"to_h","children":[],"call":[" store deep_dup "," store "]}," PaperTrail Request set":{"type":"method","name":"set","children":[],"call":[" merge "," store clear "," store "]}," PaperTrail Request merge":{"type":"method","name":"merge","children":[],"call":[" store []= "," store ","options to_h each ","options to_h "]}," PaperTrail Request enabled_for_model?":{"type":"method","name":"enabled_for_model?","children":[],"call":[" store fetch ! ! "," store fetch ! "," store fetch "," store ","model include? "]}," PaperTrail Request enabled_for_model":{"type":"method","name":"enabled_for_model","children":[],"call":[" store []= "," store "]}," PaperTrail Request enabled?":{"type":"method","name":"enabled?","children":[],"call":[" store [] ! ! "," store [] ! "," store [] "," store "]}," PaperTrail Request enabled=":{"type":"method","name":"enabled=","children":[],"call":[" store []= "," store "]}," PaperTrail Request enable_model":{"type":"method","name":"enable_model","children":[],"call":[" enabled_for_model "]}," PaperTrail Request disable_model":{"type":"method","name":"disable_model","children":[],"call":[" enabled_for_model "]}," PaperTrail Request controller_info":{"type":"method","name":"controller_info","children":[],"call":[" store [] "," store "]}," PaperTrail Request controller_info=":{"type":"method","name":"controller_info=","children":[],"call":[" store []= "," store "]}," PaperTrail Reifier version_reification_class":{"type":"method","name":"version_reification_class","children":[],"call":["class_name constantize ","version item_type ","inher_col_value blank? ","attrs [] ","version item_type constantize inheritance_column ","version item_type constantize ","clazz send ","clazz sti_class_for ","clazz public_methods include? ","clazz public_methods ","clazz inheritance_column ","version item_type  constantize ","attrs []  blank? ","version item_type constantize  send ","version item_type constantize  sti_class_for ","version item_type constantize  public_methods include? ","version item_type constantize  public_methods ","version item_type constantize  inheritance_column "]}," PaperTrail Reifier reify_attributes":{"type":"method","name":"reify_attributes","children":[],"call":[" reify_attribute ","attrs each ","AttributeSerializers ObjectAttribute  new deserialize ","AttributeSerializers ObjectAttribute  new ","model class ","version logger warn ","version id ","version item_type ","version logger ","model send ","model respond_to? ","model []= ","k to_sym ","is_enum_without_type_caster ! ","model has_attribute? ","enums key? "," ActiveRecord VERSION MAJOR  < ","model class unserialize_attributes_for_paper_trail! ","model class defined_enums ","model class respond_to? ","model class defined_enums  key? ","model class defined_model class defined_enums  "]}," PaperTrail Reifier reify_attribute":{"type":"method","name":"reify_attribute","children":[],"call":["version logger warn ","version id ","version item_type ","version logger ","model send ","model respond_to? ","model []= ","k to_sym ","is_enum_without_type_caster ! ","model has_attribute? ","enums key? "," ActiveRecord VERSION MAJOR  < ","model class defined_enums ","model class ","model class respond_to? ","model class defined_enums  key? ","model class defined_model class defined_enums  "]}," PaperTrail Reifier init_unversioned_attrs":{"type":"method","name":"init_unversioned_attrs","children":[],"call":["attrs []= ","(send\n  (send\n    (lvar :model) :attribute_names) :-\n  (send\n    (lvar :attrs) :keys)) each ","model attribute_names - ","attrs keys ","model attribute_names "]}," PaperTrail Reifier init_model":{"type":"method","name":"init_model","children":[],"call":[" init_unversioned_attrs ","options [] == ","options [] ","klass new ","(lvasgn :item_found\n  (send\n    (send\n      (send\n        (lvar :klass) :unscoped) :where\n      (lvar :find_cond)) :first)) nil? ","klass unscoped where first ","klass unscoped where ","klass unscoped ","version item_id ","klass primary_key "," version_reification_class ","version item ","options [] != ","model new_record? ! ","model new_record? ","version event == ","version event "," init_model_by_finding_item_id "," version_reification_class  new ","(lvasgn :klass unscoped where first \n  (send\n    (send\n      (send\n        (lvar :klass) :unscoped) :where\n      (lvar :find_cond)) :first)) nil? ","(lvasgn :item_found\n  (send\n    (send\n      (send\n        (lvar : version_reification_class ) :unscoped) :where\n      (lvar :find_cond)) :first)) nil? "," version_reification_class  unscoped where first "," version_reification_class  unscoped where "," version_reification_class  unscoped "," version_reification_class  primary_key ","klass new  new_record? ! ","version item  new_record? ! ","klass new  new_record? ","version item  new_record? "," init_klass new _by_finding_item_id "," init_version item _by_finding_item_id "]}," PaperTrail Reifier apply_defaults_to":{"type":"method","name":"apply_defaults_to","children":[],"call":["(pair\n  (sym :version_at)\n  (send\n    (lvar :version) :created_at)) merge ","version created_at "]}," PaperTrail Reifier reify":{"type":"method","name":"reify","children":[],"call":["model send ","model class version_association_name ","model class "," reify_attributes "," init_model ","version object_deserialized "," apply_defaults_to "," reify_has_manys ","version transaction_id ","options [] == ","options [] "," reify_has_ones ","version logger warn ","version id ","version item_type ","version logger ","model respond_to? ","model []= ","k to_sym ","model has_attribute? ","attrs each ","model class unserialize_attributes_for_paper_trail! ","attrs []= ","(send\n  (send\n    (lvar :model) :attribute_names) :-\n  (send\n    (lvar :attrs) :keys)) each ","model attribute_names - ","attrs keys ","model attribute_names ","klass new ","(lvasgn :_item\n  (send\n    (send\n      (lvar :klass) :unscoped) :find_by_id\n    (send\n      (lvar :version) :item_id))) nil? ","klass unscoped find_by_id ","version item_id ","klass unscoped ","class_name constantize ","attrs [] ","attrs [] blank? ","version item_type constantize inheritance_column ","version item_type constantize ","version item ","options [] != ","PaperTrail  serializer load ","version object ","PaperTrail  serializer ","version class object_col_is_json? ","version class ","options reverse_merge! ","version created_at ","options dup "," reify_associations "," init_unversioned_attrs ","(lvasgn :item_found\n  (send\n    (send\n      (lvar :klass) :unscoped) :find_by_id\n    (send\n      (lvar :version) :item_id))) nil? "," version_reification_class ","(lvasgn :item_found\n  (send\n    (send\n      (send\n        (lvar :klass) :unscoped) :where\n      (lvar :find_cond)) :first)) nil? ","klass unscoped where first ","klass unscoped where ","klass primary_key "," init_model  send ","klass new  send ","version item  send "," init_model  class version_association_name ","klass new  class version_association_name ","version item  class version_association_name "," init_model  class ","klass new  class ","version item  class "," init_ init_model  "," init_klass new  "," init_version item  "," apply_defaults_to  [] == ","options dup  [] == "," apply_defaults_to  [] ","options dup  [] "," init_model  respond_to? ","klass new  respond_to? ","version item  respond_to? "," init_model  []= ","klass new  []= ","version item  []= "," init_model  has_attribute? ","klass new  has_attribute? ","version item  has_attribute? ","version object_deserialized  each ","PaperTrail  serializer load  each ","version object  each "," init_model  class unserialize_attributes_for_paper_trail! ","klass new  class unserialize_attributes_for_paper_trail! ","version item  class unserialize_attributes_for_paper_trail! ","version object_deserialized  []= ","PaperTrail  serializer load  []= ","version object  []= ","(send\n  (send\n    (lvar : init_model ) :attribute_names) :-\n  (send\n    (lvar :attrs) :keys)) each ","(send\n  (send\n    (lvar :klass new ) :attribute_names) :-\n  (send\n    (lvar :attrs) :keys)) each ","(send\n  (send\n    (lvar :version item ) :attribute_names) :-\n  (send\n    (lvar :attrs) :keys)) each ","(send\n  (send\n    (lvar :model) :attribute_names) :-\n  (send\n    (lvar :version object_deserialized ) :keys)) each ","(send\n  (send\n    (lvar :model) :attribute_names) :-\n  (send\n    (lvar :PaperTrail  serializer load ) :keys)) each ","(send\n  (send\n    (lvar :model) :attribute_names) :-\n  (send\n    (lvar :version object ) :keys)) each "," init_model  attribute_names - ","klass new  attribute_names - ","version item  attribute_names - ","version object_deserialized  keys ","PaperTrail  serializer load  keys ","version object  keys "," init_model  attribute_names ","klass new  attribute_names ","version item  attribute_names ","class_name constantize  new "," version_reification_class  new ","(lvasgn :klass unscoped find_by_id \n  (send\n    (send\n      (lvar :klass) :unscoped) :find_by_id\n    (send\n      (lvar :version) :item_id))) nil? ","(lvasgn :_item\n  (send\n    (send\n      (lvar :class_name constantize ) :unscoped) :find_by_id\n    (send\n      (lvar :version) :item_id))) nil? ","(lvasgn :_item\n  (send\n    (send\n      (lvar : version_reification_class ) :unscoped) :find_by_id\n    (send\n      (lvar :version) :item_id))) nil? ","class_name constantize  unscoped find_by_id "," version_reification_class  unscoped find_by_id ","class_name constantize  unscoped "," version_reification_class  unscoped ","attrs []  constantize ","version item_type  constantize ","version object_deserialized  [] ","PaperTrail  serializer load  [] ","version object  [] ","version object_deserialized  [] blank? ","PaperTrail  serializer load  [] blank? ","version object  [] blank? "," apply_defaults_to  [] != ","options dup  [] != "," apply_defaults_to  reverse_merge! ","options dup  reverse_merge! "," apply_defaults_to  dup ","options dup  dup "," init_unversioned_version object_deserialized  "," init_unversioned_PaperTrail  serializer load  "," init_unversioned_version object  ","(lvasgn :item_found\n  (send\n    (send\n      (lvar :class_name constantize ) :unscoped) :find_by_id\n    (send\n      (lvar :version) :item_id))) nil? ","(lvasgn :item_found\n  (send\n    (send\n      (lvar : version_reification_class ) :unscoped) :find_by_id\n    (send\n      (lvar :version) :item_id))) nil? ","(lvasgn :klass unscoped where first \n  (send\n    (send\n      (lvar :klass) :unscoped) :find_by_id\n    (send\n      (lvar :version) :item_id))) nil? ","(lvasgn :item_found\n  (send\n    (send\n      (send\n        (lvar :class_name constantize ) :unscoped) :where\n      (lvar :find_cond)) :first)) nil? ","(lvasgn :item_found\n  (send\n    (send\n      (send\n        (lvar : version_reification_class ) :unscoped) :where\n      (lvar :find_cond)) :first)) nil? ","(lvasgn :klass unscoped find_by_id \n  (send\n    (send\n      (send\n        (lvar :klass) :unscoped) :where\n      (lvar :find_cond)) :first)) nil? ","(lvasgn :klass unscoped where first \n  (send\n    (send\n      (send\n        (lvar :klass) :unscoped) :where\n      (lvar :find_cond)) :first)) nil? ","class_name constantize  unscoped where first "," version_reification_class  unscoped where first ","class_name constantize  unscoped where "," version_reification_class  unscoped where ","class_name constantize  primary_key "," version_reification_class  primary_key "]}," PaperTrail RecordTrail versions":{"type":"method","name":"versions","children":[],"call":["@record public_send ","@record class versions_association_name ","@record class "]}," PaperTrail RecordTrail version":{"type":"method","name":"version","children":[],"call":["@record public_send ","@record class version_association_name ","@record class "]}," PaperTrail RecordTrail log_version_errors":{"type":"method","name":"log_version_errors","children":[],"call":["(dstr\n  (str \"Unable to create version for \")\n  (begin\n    (lvar :action))\n  (str \" of \")\n  (begin\n    (send\n      (send\n        (ivar :@record) :class) :name))) + ","version errors full_messages join ","version errors full_messages ","version errors ","@record id ","@record class name ","@record class ","version logger ","version logger warn ","(str \"Unable to create version for \") + "," id ","(str \"Unable to create version for \") + + "]}," PaperTrail RecordTrail assign_and_reset_version_association":{"type":"method","name":"assign_and_reset_version_association","children":[],"call":["@record send reset ","@record send ","@record class versions_association_name ","@record class ","@record class version_association_name "]}," PaperTrail RecordTrail versions_between":{"type":"method","name":"versions_between","children":[],"call":[" version_at ","version created_at ","versions collect "," send between "," send ","@record class versions_association_name ","@record class ","version send ","PaperTrail  timestamp_field "," send between  collect ","@record class  send between _association_name "]}," PaperTrail RecordTrail version_at":{"type":"method","name":"version_at","children":[],"call":["@record destroyed? ","v reify "," versions subsequent first "," versions subsequent "," versions "," versions subsequent first  reify ","  versions subsequent first ersions subsequent first ","  versions subsequent first ersions subsequent ","  versions subsequent first ersions "]}," PaperTrail RecordTrail update_columns":{"type":"method","name":"update_columns","children":[],"call":[" record_update_columns ","@record update_columns ","changes []= ","@record [] ","attributes each "]}," PaperTrail RecordTrail update_column":{"type":"method","name":"update_column","children":[],"call":[" update_columns "]}," PaperTrail RecordTrail save_with_version":{"type":"method","name":"save_with_version","children":[],"call":[" record_update ","@record save "," PaperTrail  request "]}," PaperTrail RecordTrail source_version":{"type":"method","name":"source_version","children":[],"call":[" version "]}," PaperTrail RecordTrail save_version?":{"type":"method","name":"save_version?","children":[],"call":["unless_condition try ! ","unless_condition try ","if_condition call ","if_condition blank? ","@record paper_trail_options [] ","@record paper_trail_options ","@record paper_trail_options []  try ! ","@record paper_trail_options []  try ","@record paper_trail_options []  call ","@record paper_trail_options []  blank? "]}," PaperTrail RecordTrail reset_timestamp_attrs_for_update_if_needed":{"type":"method","name":"reset_timestamp_attrs_for_update_if_needed","children":[],"call":["@record send ","@record send each "," live? ","@record respond_to? "]}," PaperTrail RecordTrail data_for_update_columns":{"type":"method","name":"data_for_update_columns","children":[],"call":[" merge_metadata_into "," add_transaction_id_to ","data []= "," recordable_object_changes "," record_object_changes? ","PaperTrail  request whodunnit ","PaperTrail  request "," recordable_object ","@record paper_trail_event "]}," PaperTrail RecordTrail record_update_columns":{"type":"method","name":"record_update_columns","children":[],"call":[" log_version_errors ","version errors any? ","version errors ","versions_assoc create ","@record send ","@record class versions_association_name ","@record class ","event data merge "," data_for_update_columns ","event data ","Events Update  new "," enabled? ","data merge! ","Events Update  new data "," save_associations "," update_transaction_id "," log_versions_assoc create _errors ","versions_assoc create  errors any? ","versions_assoc create  errors ","versions_assoc create s_assoc create ","@record send  create ","@record class versions_assoc create s_association_name ","@record class @record send iation_name ","event event data merge  merge ","event Events Update  new data  merge ","Events Update  new  data merge "," event data merge _for_update_columns "," Events Update  new data _for_update_columns ","event event data merge  ","event Events Update  new data  ","Events Update  new  data ","event data merge  merge! ","Events Update  new data  merge! ","Events Update  new event data merge  ","Events Update  new Events Update  new data  "]}," PaperTrail RecordTrail data_for_update":{"type":"method","name":"data_for_update","children":[],"call":[" merge_metadata "," add_transaction_id_to ","data []= "," recordable_object_changes "," record_object_changes? ","@record updated_at ","@record respond_to? ","PaperTrail  whodunnit "," recordable_object ","@record paper_trail_event "," merge_metadata_into "," changes ","PaperTrail  request whodunnit ","PaperTrail  request "]}," PaperTrail RecordTrail record_update":{"type":"method","name":"record_update","children":[],"call":[" log_version_errors ","version errors any? ","version errors ","versions_assoc create ","@record send ","@record class versions_association_name ","@record class ","event data merge "," data_for_update ","event data ","event changed_notably? ","Events Update  new "," enabled? "," versions reset "," versions ","version save "," build_version_on_update "," save_associations "," update_transaction_id "," merge_metadata "," add_transaction_id_to ","data []= "," recordable_object_changes "," record_object_changes? ","@record updated_at ","PaperTrail  timestamp_field ","@record respond_to? ","PaperTrail  whodunnit "," recordable_object ","@record paper_trail_event "," changed_notably? "," log_versions_assoc create _errors "," log_ build_version_on_update _errors ","versions_assoc create  errors any? "," build_version_on_update  errors any? ","versions_assoc create  errors "," build_version_on_update  errors ","versions_assoc create s_assoc create "," build_version_on_update s_assoc create ","@record send  create ","@record class versions_assoc create s_association_name ","@record class  build_version_on_update s_association_name ","@record class @record send iation_name ","event event data merge  merge ","Events Update  new  data merge "," event data merge _for_update ","event event data merge  ","Events Update  new  data ","Events Update  new  changed_notably? "," versions_assoc create s reset ","  build_version_on_update s reset "," versions_assoc create s ","  build_version_on_update s ","versions_assoc create  save "," build_version_on_update  save "," build_versions_assoc create _on_update "," build_ build_version_on_update _on_update "," merge_metaevent data merge  ","event data merge  []= ","@record paper_trail_Events Update  new  "]}," PaperTrail RecordTrail data_for_destroy":{"type":"method","name":"data_for_destroy","children":[],"call":[" merge_metadata "," add_transaction_id_to ","PaperTrail  whodunnit "," recordable_object ","@record paper_trail_event ","@record class base_class name ","@record class base_class ","@record class ","@record id "," merge_metadata_into ","PaperTrail  request whodunnit ","PaperTrail  request "]}," PaperTrail RecordTrail record_destroy":{"type":"method","name":"record_destroy","children":[],"call":[" assign_and_reset_version_association "," log_version_errors ","version errors any? ","version errors ","@record class paper_trail version_class create ","@record class paper_trail version_class ","@record class paper_trail ","@record class ","event data merge "," data_for_destroy ","event data ","Events Destroy  new ","recording_order == ","@record new_record? ! ","@record new_record? "," enabled? "," save_associations "," update_transaction_id ","@record send reset ","@record send ","@record class versions_association_name ","@record class version_association_name "," merge_metadata "," add_transaction_id_to ","PaperTrail  whodunnit "," recordable_object ","@record paper_trail_event ","@record class base_class name ","@record class base_class ","@record id "," assign_and_reset_@record class paper_trail version_class create _association "," log_@record class paper_trail version_class create _errors ","@record class paper_trail version_class create  errors any? ","@record class paper_trail version_class create  errors ","@record class paper_trail @record class paper_trail version_class create _class create ","@record class paper_trail @record class paper_trail version_class create _class ","event event data merge  merge ","Events Destroy  new  data merge "," event data merge _for_destroy ","event event data merge  ","Events Destroy  new  data ","@record class @record class paper_trail version_class create s_association_name ","@record class @record class paper_trail version_class create _association_name "," merge_metaevent data merge  ","@record paper_trail_Events Destroy  new  "]}," PaperTrail RecordTrail data_for_create":{"type":"method","name":"data_for_create","children":[],"call":[" merge_metadata "," add_transaction_id_to ","data []= "," recordable_object_changes "," changed_notably? "," record_object_changes? ","@record updated_at ","@record respond_to? ","PaperTrail  whodunnit ","@record paper_trail_event "," merge_metadata_into "," changes ","PaperTrail  request whodunnit ","PaperTrail  request "]}," PaperTrail RecordTrail record_create":{"type":"method","name":"record_create","children":[],"call":["versions_assoc create! ","@record send ","@record class versions_association_name ","@record class ","event data merge "," data_for_create ","event data ","Events Create  new "," enabled? "," versions reset "," versions ","version save! "," build_version_on_create tap "," build_version_on_create "," save_associations "," update_transaction_id "," merge_metadata "," add_transaction_id_to ","data []= "," recordable_object_changes "," changed_notably? "," record_object_changes? ","@record updated_at ","PaperTrail  timestamp_field ","@record respond_to? ","PaperTrail  whodunnit ","@record paper_trail_event ","@record send  create! ","versions_assoc create! s_assoc create! ","@record class @record send iation_name ","@record class versions_assoc create! s_association_name ","event event data merge  merge ","Events Create  new  data merge "," event data merge _for_create ","event event data merge  ","Events Create  new  data "," versions_assoc create! s reset "," versions_assoc create! s ","versions_assoc create!  save! "," build_versions_assoc create! _on_create tap "," build_versions_assoc create! _on_create "," merge_metaevent data merge  ","event data merge  []= ","@record paper_trail_Events Create  new  "]}," PaperTrail RecordTrail previous_version":{"type":"method","name":"previous_version","children":[],"call":["(if\n  (send nil :source_version)\n  (send\n    (send nil :source_version) :previous)\n  (send\n    (send nil :versions) :last)) try "," versions last "," versions "," source_version previous "," source_version "]}," PaperTrail RecordTrail originator":{"type":"method","name":"originator","children":[],"call":["(or\n  (send nil :source_version)\n  (send\n    (send nil :versions) :last)) try "," versions last "," versions "," source_version "]}," PaperTrail RecordTrail next_version":{"type":"method","name":"next_version","children":[],"call":["@record class find ","@record id ","@record class ","subsequent_version reify "," source_version next "," source_version "," source_version next  reify "]}," PaperTrail RecordTrail live?":{"type":"method","name":"live?","children":[],"call":[" source_version nil? "," source_version "]}," PaperTrail RecordTrail enabled?":{"type":"method","name":"enabled?","children":[],"call":["PaperTrail  request enabled_for_model? ","@record class ","PaperTrail  request ","PaperTrail  request enabled? ","PaperTrail  enabled? "," enabled_for_model? ","PaperTrail  enabled_for_controller? "]}," PaperTrail RecordTrail clear_version_instance":{"type":"method","name":"clear_version_instance","children":[],"call":["@record send ","@record class version_association_name ","@record class "]}," PaperTrail RecordTrail clear_rolled_back_versions":{"type":"method","name":"clear_rolled_back_versions","children":[],"call":[" versions reset "," versions "]}," PaperTrail RecordTrail initialize":{"type":"method","name":"initialize","children":[],"call":[]}," PaperTrail RecordHistory table":{"type":"method","name":"table","children":[],"call":["@version_class arel_table "]}," PaperTrail RecordHistory primary_key":{"type":"method","name":"primary_key","children":[],"call":[" table [] ","@version_class primary_key "," table "]}," PaperTrail RecordHistory sequence":{"type":"method","name":"sequence","children":[],"call":["@versions select order ","@version_class timestamp_sort_order ","@versions select "," primary_key "," table [] "," table "," primary_key asc ","@version_class primary_key_is_int? "," timestamp "]}," PaperTrail RecordHistory index":{"type":"method","name":"index","children":[],"call":[" sequence to_a index "," sequence to_a "," sequence "," sequence index "]}," PaperTrail RecordHistory initialize":{"type":"method","name":"initialize","children":[],"call":[]}," PaperTrail Queries Versions WhereObjectChanges text":{"type":"method","name":"text","children":[],"call":["@version_model_class where ","a and ","where_conditions reduce "," PaperTrail  serializer where_object_changes_condition "," PaperTrail  serializer ","@attributes map ","@version_model_class arel_table [] ","@version_model_class arel_table "]}," PaperTrail Queries Versions WhereObjectChanges jsonb":{"type":"method","name":"jsonb","children":[],"call":["@version_model_class where ","@attributes to_json ","@attributes []= ","@attributes each "]}," PaperTrail Queries Versions WhereObjectChanges json":{"type":"method","name":"json","children":[],"call":["@version_model_class where ","predicates join ","values concat ","value to_json ","predicates push ","@attributes each "]}," PaperTrail Queries Versions WhereObjectChanges execute":{"type":"method","name":"execute","children":[],"call":[" text "," json "," jsonb ","@version_model_class columns_hash [] type ","@version_model_class columns_hash [] ","@version_model_class columns_hash ","PaperTrail  config object_changes_adapter where_object_changes ","PaperTrail  config object_changes_adapter ","PaperTrail  config ","PaperTrail  config object_changes_adapter respond_to? "," raise ","UnsupportedColumnType  new "]}," PaperTrail Queries Versions WhereObjectChanges initialize":{"type":"method","name":"initialize","children":[],"call":["attributes deep_dup "]}," PaperTrail Queries Versions WhereObject text":{"type":"method","name":"text","children":[],"call":["@version_model_class where ","a and ","where_conditions reduce "," PaperTrail  serializer where_object_condition "," PaperTrail  serializer ","@attributes map ","@version_model_class arel_table [] ","@version_model_class arel_table "]}," PaperTrail Queries Versions WhereObject jsonb":{"type":"method","name":"jsonb","children":[],"call":["@version_model_class where ","@attributes to_json "]}," PaperTrail Queries Versions WhereObject json":{"type":"method","name":"json","children":[],"call":["@version_model_class where ","predicates join ","values concat ","value to_s ","predicates push ","@attributes each "]}," PaperTrail Queries Versions WhereObject execute":{"type":"method","name":"execute","children":[],"call":[" text "," json "," jsonb ","column type "," raise ","@version_model_class columns_hash [] ","@version_model_class columns_hash ","@version_model_class columns_hash [] type ","@version_model_class columns_hash []  type ","@version_model_class @version_model_class columns_hash [] s_hash [] ","@version_model_class @version_model_class columns_hash [] s_hash ","@version_model_class @version_model_class columns_hash [] s_hash [] type "]}," PaperTrail Queries Versions WhereObject initialize":{"type":"method","name":"initialize","children":[],"call":[]}," PaperTrail ModelConfig setup_options":{"type":"method","name":"setup_options","children":[],"call":["@model_class paper_trail_options [] ","@model_class paper_trail_options ","@model_class paper_trail_options []= ","attr to_s ","attr stringify_keys ","attr is_a? ","(send\n  (send\n    (ivar :@model_class) :paper_trail_options) :[]\n  (lvar :k)) flatten compact map ","(send\n  (send\n    (ivar :@model_class) :paper_trail_options) :[]\n  (lvar :k)) flatten compact ","(send\n  (send\n    (ivar :@model_class) :paper_trail_options) :[]\n  (lvar :k)) flatten ","(sym :ignore) each ","@model_class paper_trail_options= ","options dup ","@model_class class_attribute "," event_attribute_option ","@model_class paper_trail_options [] nil? "]}," PaperTrail ModelConfig setup_callbacks_from_options":{"type":"method","name":"setup_callbacks_from_options","children":[],"call":[" public_send ","options_on each "]}," PaperTrail ModelConfig setup_associations":{"type":"method","name":"setup_associations","children":[],"call":["@model_class has_many ","@model_class version_class_name "," order "," model timestamp_sort_order "," model "," lambda ","@model_class versions_association_name "," assert_concrete_activerecord_class ","@model_class send ","@model_class versions_association_name= ","options [] ","@model_class class_attribute ","@model_class version_class_name= ","@model_class version_association_name ","@model_class version_association_name= "," define_has_many_versions ","@model_class paper_trail_version_class timestamp_sort_order ","@model_class paper_trail_version_class "," ActiveRecord VERSION MAJOR  >= ","@model_class paper_trail version_class timestamp_sort_order ","@model_class paper_trail version_class ","@model_class paper_trail "]}," PaperTrail ModelConfig cannot_record_after_destroy?":{"type":"method","name":"cannot_record_after_destroy?","children":[],"call":[" ActiveRecord Base  belongs_to_required_by_default ","Gem Version  new release >= ","Gem Version  new ","Gem Version  new release "]}," PaperTrail ModelConfig assert_concrete_activerecord_class":{"type":"method","name":"assert_concrete_activerecord_class","children":[],"call":[" raise "," format ","class_name constantize abstract_class? ","class_name constantize "]}," PaperTrail ModelConfig active_record_gem_version":{"type":"method","name":"active_record_gem_version","children":[],"call":["Gem Version  new "]}," PaperTrail ModelConfig version_class":{"type":"method","name":"version_class","children":[],"call":["@model_class version_class_name constantize ","@model_class version_class_name "]}," PaperTrail ModelConfig setup":{"type":"method","name":"setup","children":[],"call":[" setup_callbacks_from_options ","options [] "," paper_trail clear_rolled_back_versions "," paper_trail ","@model_class after_rollback "," setup_associations "," setup_options ","@model_class send ","options []= "," Array "," check_presence_of_item_subtype_column "," setup_callbacks_for_habtm "," setup_transaction_callbacks "," ActiveRecord VERSION STRING  < "," ActiveSupport Deprecation  warn "]}," PaperTrail ModelConfig on_touch":{"type":"method","name":"on_touch","children":[],"call":["r paper_trail record_update ","r paper_trail ","@model_class after_touch ","r paper_trail save_version? "]}," PaperTrail ModelConfig on_update":{"type":"method","name":"on_update","children":[],"call":["@model_class paper_trail_options [] << ","@model_class paper_trail_options [] ","@model_class paper_trail_options ","@model_class paper_trail_options [] include? ","r paper_trail clear_version_instance ","r paper_trail ","@model_class after_update ","r paper_trail record_update ","r paper_trail save_version? ","r paper_trail reset_timestamp_attrs_for_update_if_needed ","@model_class before_save "," append_option_uniquely ","m paper_trail save_version? ","m paper_trail "," lambda "]}," PaperTrail ModelConfig on_destroy":{"type":"method","name":"on_destroy","children":[],"call":["@model_class paper_trail_options [] << ","@model_class paper_trail_options [] ","@model_class paper_trail_options ","@model_class paper_trail_options [] include? ","@model_class send ","r paper_trail record_destroy ","r paper_trail ","r paper_trail save_version? "," lambda "," raise "," cannot_record_after_destroy? ","recording_order to_s == ","recording_order to_s ","(str \"after\") include? "," assert_valid_recording_order_for_on_destroy "," append_option_uniquely ","m paper_trail save_version? ","m paper_trail "," ActiveSupport Deprecation  warn "]}," PaperTrail ModelConfig on_create":{"type":"method","name":"on_create","children":[],"call":["@model_class paper_trail_options [] << ","@model_class paper_trail_options [] ","@model_class paper_trail_options ","@model_class paper_trail_options [] include? ","r paper_trail record_create ","r paper_trail ","r paper_trail save_version? ","@model_class after_create "," append_option_uniquely ","m paper_trail save_version? ","m paper_trail "," lambda "]}," PaperTrail ModelConfig initialize":{"type":"method","name":"initialize","children":[],"call":[]}," PaperTrail Model InstanceMethods paper_trail":{"type":"method","name":"paper_trail","children":[],"call":[" PaperTrail RecordTrail  new "]}," PaperTrail Model ClassMethods paper_trail":{"type":"method","name":"paper_trail","children":[],"call":[" PaperTrail ModelConfig  new "]}," PaperTrail RSpec Helpers ClassMethods with_versioning":{"type":"method","name":"with_versioning","children":[],"call":[" class_exec "," context "]}," PaperTrail RSpec Helpers InstanceMethods with_versioning":{"type":"method","name":"with_versioning","children":[],"call":[" PaperTrail  enabled= "," PaperTrail  enabled? "]}," PaperTrail Rails Controller set_paper_trail_controller_info":{"type":"method","name":"set_paper_trail_controller_info","children":[],"call":[" PaperTrail  request controller_info= "," info_for_paper_trail "," PaperTrail  request "," PaperTrail  request enabled? "," PaperTrail  controller_info= "," PaperTrail  enabled_for_controller? "," paper_trail_enabled_for_controller "]}," PaperTrail Rails Controller set_paper_trail_whodunnit":{"type":"method","name":"set_paper_trail_whodunnit","children":[],"call":[" PaperTrail  request whodunnit= "," user_for_paper_trail "," PaperTrail  request "," PaperTrail  request enabled? "," PaperTrail  whodunnit= "," PaperTrail  enabled_for_controller? "," paper_trail_enabled_for_controller "]}," PaperTrail Rails Controller set_paper_trail_enabled_for_controller":{"type":"method","name":"set_paper_trail_enabled_for_controller","children":[],"call":[" PaperTrail  request enabled= "," paper_trail_enabled_for_controller "," PaperTrail  request "," PaperTrail  enabled_for_controller= "]}," PaperTrail Rails Controller paper_trail_enabled_for_controller":{"type":"method","name":"paper_trail_enabled_for_controller","children":[],"call":[" PaperTrail  enabled? "]}," PaperTrail Rails Controller info_for_paper_trail":{"type":"method","name":"info_for_paper_trail","children":[],"call":[]}," PaperTrail Rails Controller user_for_paper_trail":{"type":"method","name":"user_for_paper_trail","children":[],"call":[" current_user "," current_user try "," current_user try! ","ActiveSupport VERSION MAJOR  >= "]}," PaperTrail Rails Controller included":{"type":"method","name":"included","children":[],"call":[]}," PaperTrail Cucumber Extensions with_versioning":{"type":"method","name":"with_versioning","children":[],"call":[" PaperTrail  enabled= "," PaperTrail  enabled? "]}," PaperTrail Events Update record_object_changes?":{"type":"method","name":"record_object_changes?","children":[],"call":["@is_touch ! "]}," PaperTrail Events Update data":{"type":"method","name":"data","children":[],"call":[" merge_metadata_into "," merge_item_subtype_into ","data []= "," prepare_object_changes "," notable_changes ","@force_changes nil? "," record_object_changes? "," recordable_object "," record_object? ","@record updated_at ","@record respond_to? ","PaperTrail  request whodunnit ","PaperTrail  request ","@record paper_trail_event "," merge_object_changes_into "," prepare_object_ notable_changes  "," notable_ notable_changes  ","@force_ notable_changes  nil? "," record_object_ notable_changes ? "," merge_object_ notable_changes _into "]}," PaperTrail Events Update initialize":{"type":"method","name":"initialize","children":[],"call":[]}," PaperTrail Events Destroy data":{"type":"method","name":"data","children":[],"call":[" merge_metadata_into "," merge_item_subtype_into ","data []= "," prepare_object_changes ","(send\n  (send\n    (ivar :@record) :attributes) :map) to_h ","@record attributes map ","@record attributes "," record_object_changes? "," recordable_object "," record_object? ","PaperTrail  request whodunnit ","PaperTrail  request ","@record paper_trail_event ","@record class base_class name ","@record class base_class ","@record class ","@record id "," notable_changes "," prepare_object_(send\n  (send\n    (ivar :@record) :attributes) :map) to_h  "," record_object_(send\n  (send\n    (ivar :@record) :attributes) :map) to_h ? "," notable_(send\n  (send\n    (ivar :@record) :attributes) :map) to_h  "]}," PaperTrail Events Create data":{"type":"method","name":"data","children":[],"call":[" merge_metadata_into "," merge_item_subtype_into ","data []= "," prepare_object_changes "," notable_changes "," changed_notably? "," record_object_changes? ","@record updated_at ","@record respond_to? ","PaperTrail  request whodunnit ","PaperTrail  request ","@record paper_trail_event "," prepare_object_ notable_changes  "," notable_ notable_changes  "," record_object_ notable_changes ? "]}," PaperTrail Events Base recordable_object":{"type":"method","name":"recordable_object","children":[],"call":["PaperTrail  serializer dump "," object_attrs_for_paper_trail ","PaperTrail  serializer ","@record class paper_trail version_class object_col_is_json? ","@record class paper_trail version_class ","@record class paper_trail ","@record class "]}," PaperTrail Events Base record_object?":{"type":"method","name":"record_object?","children":[],"call":["@record class paper_trail version_class column_names include? ","@record class paper_trail version_class column_names ","@record class paper_trail version_class ","@record class paper_trail ","@record class "]}," PaperTrail Events Base record_object_changes?":{"type":"method","name":"record_object_changes?","children":[],"call":["@record class paper_trail version_class column_names include? ","@record class paper_trail version_class column_names ","@record class paper_trail version_class ","@record class paper_trail ","@record class "]}," PaperTrail Events Base recordable_object_changes":{"type":"method","name":"recordable_object_changes","children":[],"call":["PaperTrail  serializer dump ","PaperTrail  serializer ","@record class paper_trail version_class object_changes_col_is_json? ","@record class paper_trail version_class ","@record class paper_trail ","@record class ","PaperTrail  config object_changes_adapter diff ","PaperTrail  config object_changes_adapter ","PaperTrail  config ","changes to_hash ","PaperTrail  config object_changes_adapter respond_to? ","@record class paper_trail version_class object_PaperTrail  config object_changes_adapter diff _col_is_json? ","PaperTrail  config object_PaperTrail  config object_changes_adapter diff _adapter diff ","PaperTrail  config object_PaperTrail  config object_changes_adapter diff _adapter ","PaperTrail  config object_changes_adapter diff  to_hash ","PaperTrail  config object_PaperTrail  config object_changes_adapter diff _adapter respond_to? "]}," PaperTrail Events Base object_attrs_for_paper_trail":{"type":"method","name":"object_attrs_for_paper_trail","children":[],"call":["AttributeSerializers ObjectAttribute  new serialize ","AttributeSerializers ObjectAttribute  new ","@record class "," attributes_before_change except ","@record paper_trail_options [] ","@record paper_trail_options "," attributes_before_change "," nonskipped_attributes_before_change "]}," PaperTrail Events Base notably_changed":{"type":"method","name":"notably_changed","children":[],"call":[" changed_and_not_ignored & "," changed_and_not_ignored ","only empty? ","only << ","condition call ","condition respond_to? ","obj each ","obj is_a? ","only delete_if ","@record paper_trail_options [] dup ","@record paper_trail_options [] ","@record paper_trail_options ","cani & "," evaluate_only ","@record paper_trail_options [] dup  empty? "," evaluate_only  empty? ","@record paper_trail_options [] dup  << "," evaluate_only  << ","@record paper_trail_options [] dup  delete_if "," evaluate_only  delete_if "," changed_and_not_ignored  & "," evaluate_@record paper_trail_options [] dup  "," evaluate_ evaluate_only  "]}," PaperTrail Events Base model_metadatum":{"type":"method","name":"model_metadatum","children":[],"call":["@record send "," attribute_in_previous_version "," attribute_changed_in_latest_version? ","@record has_attribute? ","event != ","@record respond_to? ","value is_a? ","value call ","value respond_to? "," metadatum_from_model_method "]}," PaperTrail Events Base merge_metadata_from_model_into":{"type":"method","name":"merge_metadata_from_model_into","children":[],"call":["data []= "," model_metadatum ","data [] ","@record paper_trail_options [] each ","@record paper_trail_options [] ","@record paper_trail_options "," assert_metadatum_key_is_permitted "]}," PaperTrail Events Base merge_metadata_from_controller_into":{"type":"method","name":"merge_metadata_from_controller_into","children":[],"call":["data merge ","PaperTrail  request controller_info ","PaperTrail  request "," assert_metadatum_key_is_permitted ","metadata keys each ","metadata keys "]}," PaperTrail Events Base merge_metadata_into":{"type":"method","name":"merge_metadata_into","children":[],"call":[" merge_metadata_from_controller_into "," merge_metadata_from_model_into "]}," PaperTrail Events Base merge_item_subtype_into":{"type":"method","name":"merge_item_subtype_into","children":[],"call":["data merge! ","@record class name ","@record class ","@record class paper_trail version_class columns_hash key? ","@record class paper_trail version_class columns_hash ","@record class paper_trail version_class ","@record class paper_trail "]}," PaperTrail Events Base ignored_attr_has_changed?":{"type":"method","name":"ignored_attr_has_changed?","children":[],"call":["(send\n  (send nil :changed_in_latest_version) :&\n  (lvar :ignored)) any? "," changed_in_latest_version & "," changed_in_latest_version ","ignored any? ","@record paper_trail_options [] + ","@record paper_trail_options [] ","@record paper_trail_options "," calculated_ignored_array + "," calculated_ignored_array ","(send\n  (send nil :changed_in_latest_version) :&\n  (lvar :@record paper_trail_options [] + )) any? ","(send\n  (send nil :changed_in_latest_version) :&\n  (lvar : calculated_ignored_array + )) any? ","@record paper_trail_options [] +  any? "," calculated_ignored_array +  any? "," calculated_@record paper_trail_options [] + _array + "," calculated_ calculated_ignored_array + _array + "," calculated_@record paper_trail_options [] + _array "," calculated_ calculated_ignored_array + _array "]}," PaperTrail Events Base changes_in_latest_version":{"type":"method","name":"changes_in_latest_version","children":[],"call":["@record changes ","@record saved_changes "," load_changes_in_latest_version "]}," PaperTrail Events Base notable_changes":{"type":"method","name":"notable_changes","children":[],"call":[" notably_changed include? ! "," notably_changed include? "," notably_changed "," changes_in_latest_version delete_if "," changes_in_latest_version "," notably_changed exclude? "]}," PaperTrail Events Base serialize_object_changes":{"type":"method","name":"serialize_object_changes","children":[],"call":["changes to_hash ","AttributeSerializers ObjectChangesAttribute  new serialize ","AttributeSerializers ObjectChangesAttribute  new ","@record class "]}," PaperTrail Events Base prepare_object_changes":{"type":"method","name":"prepare_object_changes","children":[],"call":[" recordable_object_changes "," serialize_object_changes "," recordable_object_ recordable_object_changes  "," recordable_object_ serialize_object_changes  "," serialize_object_ recordable_object_changes  "," serialize_object_ serialize_object_changes  "]}," PaperTrail Events Base changed_in_latest_version":{"type":"method","name":"changed_in_latest_version","children":[],"call":["@record changed ","@record saved_changes keys ","@record saved_changes "," changes_in_latest_version keys "," changes_in_latest_version "]}," PaperTrail Events Base changed_and_not_ignored":{"type":"method","name":"changed_and_not_ignored","children":[],"call":["(send\n  (send nil :changed_in_latest_version) :-\n  (lvar :ignore)) - "," changed_in_latest_version - "," changed_in_latest_version ","@record paper_trail_options [] ","@record paper_trail_options ","ignore << ","condition call ","condition respond_to? ","obj each ","obj is_a? ","ignore delete_if ","@record paper_trail_options [] dup ","(send\n  (send nil :changed_in_latest_version) :-\n  (send nil :calculated_ignored_array)) - "," calculated_ignored_array ","(send\n  (send nil :changed_in_latest_version) :-\n  (lvar :@record paper_trail_options [] dup )) - ","@record paper_trail_options [] dup  << ","@record paper_trail_options [] dup  delete_if ","(send\n  (send nil :changed_in_latest_version) :-\n  (send nil :calculated_@record paper_trail_options [] dup d_array)) - "," calculated_@record paper_trail_options [] dup d_array "]}," PaperTrail Events Base attribute_in_previous_version":{"type":"method","name":"attribute_in_previous_version","children":[],"call":["@record attribute_was ","attr_name to_s ","@record attribute_in_database ","@record attribute_before_last_save ","is_touch ! "]}," PaperTrail Events Base attributes_before_change":{"type":"method","name":"attributes_before_change","children":[],"call":["Hash  [] "," attribute_in_previous_version ","@record class column_names include? ","@record class column_names ","@record class ","@record attributes map ","@record attributes "]}," PaperTrail Events Base attribute_changed_in_latest_version?":{"type":"method","name":"attribute_changed_in_latest_version?","children":[],"call":["@record attribute_changed? ","attr_name to_s ","@record saved_change_to_attribute? "]}," PaperTrail Events Base changed_notably?":{"type":"method","name":"changed_notably?","children":[],"call":[" notably_changed any? "," notably_changed ","(send\n  (send nil :notably_changed) :-\n  (lvar :timestamps)) any? "," notably_changed - ","@record send map ","@record send "," ignored_attr_has_changed? ","(send\n  (send nil :notably_changed) :-\n  (lvar :@record send map )) any? "]}," PaperTrail Events Base initialize":{"type":"method","name":"initialize","children":[],"call":[]}," PaperTrail Config track_associations?":{"type":"method","name":"track_associations?","children":[],"call":[" raise ","ActiveSupport Deprecation  warn ","(str \"          PaperTrail.track_associations has not been set. As of PaperTrail 5, it\\n\") strip_heredoc gsub ","(str \"          PaperTrail.track_associations has not been set. As of PaperTrail 5, it\\n\") strip_heredoc ","@track_associations nil? ","(str \"          PaperTrail.config.track_associations has not been set. As of PaperTrail 5, it\\n\") strip_heredoc gsub ","(str \"          PaperTrail.config.track_associations has not been set. As of PaperTrail 5, it\\n\") strip_heredoc "]}," PaperTrail Config track_associations=":{"type":"method","name":"track_associations=","children":[],"call":[" raise "," Kernel  warn "," ActiveSupport Deprecation  warn "," caller ","value ! ! ","value ! "]}," PaperTrail Config enabled=":{"type":"method","name":"enabled=","children":[],"call":["@mutex synchronize ","PaperTrail  paper_trail_store []= ","PaperTrail  paper_trail_store "]}," PaperTrail Config enabled":{"type":"method","name":"enabled","children":[],"call":["@enabled ! ! ","@enabled ! ","@mutex synchronize ","PaperTrail  paper_trail_store [] ","PaperTrail  paper_trail_store ","PaperTrail  paper_trail_store [] nil? ","value nil? ","PaperTrail  paper_trail_store fetch ","PaperTrail  paper_trail_store fetch  nil? "]}," PaperTrail Cleaner group_versions_by_date":{"type":"method","name":"group_versions_by_date","children":[],"call":["v created_at to_date ","v created_at ","versions group_by ","v send to_date ","v send ","PaperTrail  timestamp_field "]}," PaperTrail Cleaner gather_versions":{"type":"method","name":"gather_versions","children":[],"call":["versions group_by ","PaperTrail Version  all ","versions == ","versions between ","date to_date + ","1 day ","date to_date ","date == ","versions order ","PaperTrail Version  timestamp_sort_order ","PaperTrail Version  where "," raise ","date respond_to? ","ArgumentError  new ","PaperTrail Version  all  group_by ","versions between  group_by ","versions order  group_by ","PaperTrail Version  where  group_by ","PaperTrail Version  all  == ","versions between  == ","versions order  == ","PaperTrail Version  where  == ","PaperTrail Version  all  between ","versions between  between ","versions order  between ","PaperTrail Version  where  between ","PaperTrail Version  all  order ","versions between  order ","versions order  order ","PaperTrail Version  where  order "]}," PaperTrail Cleaner clean_versions!":{"type":"method","name":"clean_versions!","children":[],"call":["date_versions map ","date_versions pop ","options [] "," group_versions_by_date each "," group_versions_by_date "," gather_versions each "," gather_versions ","(pair\n  (sym :keeping)\n  (int 1)) merge ","versions map ","versions pop ","(send\n  (lvar :versions) :group_by) each ","v created_at to_date ","v created_at ","versions group_by ","v send to_date ","v send ","PaperTrail  timestamp_field ","_versions map ","_versions pop ","(pair\n  (sym :keeping)\n  (int 1)) merge  [] "]}," PaperTrail AttributeSerializers ObjectChangesAttribute object_changes_col_is_json?":{"type":"method","name":"object_changes_col_is_json?","children":[],"call":["@item_class paper_trail version_class object_changes_col_is_json? ","@item_class paper_trail version_class ","@item_class paper_trail ","@item_class paper_trail_version_class object_changes_col_is_json? ","@item_class paper_trail_version_class "]}," PaperTrail AttributeSerializers ObjectChangesAttribute alter":{"type":"method","name":"alter","children":[],"call":["changes []= ","serializer send "," Array map "," Array ","changes clone each ","changes clone ","CastAttributeSerializer  new "," object_changes_col_is_json? ","changes_to_serialize each ","changes_to_serialize blank? ","changes slice ","CastAttributeSerializer  new  send ","changes clone  each ","changes slice  each ","changes clone  blank? ","changes slice  blank? "]}," PaperTrail AttributeSerializers ObjectChangesAttribute deserialize":{"type":"method","name":"deserialize","children":[],"call":[" alter "]}," PaperTrail AttributeSerializers ObjectChangesAttribute serialize":{"type":"method","name":"serialize","children":[],"call":[" alter "]}," PaperTrail AttributeSerializers ObjectChangesAttribute initialize":{"type":"method","name":"initialize","children":[],"call":["@item_class encrypted_attributes ","PaperTrail  active_record_gte_7_0? "]}," PaperTrail AttributeSerializers ObjectAttribute object_col_is_json?":{"type":"method","name":"object_col_is_json?","children":[],"call":["@model_class paper_trail version_class object_col_is_json? ","@model_class paper_trail version_class ","@model_class paper_trail ","@model_class paper_trail_version_class object_col_is_json? ","@model_class paper_trail_version_class "]}," PaperTrail AttributeSerializers ObjectAttribute alter":{"type":"method","name":"alter","children":[],"call":["attributes []= ","serializer send ","attributes each ","CastAttributeSerializer  new "," object_col_is_json? ","attributes_to_serialize each ","attributes_to_serialize blank? ","attributes slice ","CastAttributeSerializer  new  send ","attributes slice  each ","attributes slice  blank? "]}," PaperTrail AttributeSerializers ObjectAttribute deserialize":{"type":"method","name":"deserialize","children":[],"call":[" alter "]}," PaperTrail AttributeSerializers ObjectAttribute serialize":{"type":"method","name":"serialize","children":[],"call":[" alter "]}," PaperTrail AttributeSerializers ObjectAttribute initialize":{"type":"method","name":"initialize","children":[],"call":["@model_class encrypted_attributes ","PaperTrail  active_record_gte_7_0? "]}," PaperTrail AttributeSerializers CastAttributeSerializer deserialize":{"type":"method","name":"deserialize","children":[],"call":[" defined_enums [] key "," defined_enums [] "," defined_enums ","@klass type_for_attribute type_cast_from_database ","@klass type_for_attribute ","val is_a? ","AttributeSerializerFactory  for deserialize ","AttributeSerializerFactory  for ","val instance_variable_get "," rails_gte_7_0? ","PaperTrail  active_record_gte_7_0? ","@klass type_for_attribute deserialize ","@klass type_for_attribute type_cast_from_database  is_a? ","@klass type_for_attribute type_cast_from_database  instance_variable_get "]}," PaperTrail AttributeSerializers CastAttributeSerializer serialize":{"type":"method","name":"serialize","children":[],"call":["@klass type_for_attribute type_cast_for_database ","@klass type_for_attribute "," defined_enums [] [] "," defined_enums [] "," defined_enums ","AttributeSerializerFactory  for serialize ","AttributeSerializerFactory  for ","@klass type_for_attribute serialize "]}," PaperTrail AttributeSerializers CastAttributeSerializer defined_enums":{"type":"method","name":"defined_enums","children":[],"call":["@klass defined_enums ","@klass respond_to? "]}," PaperTrail AttributeSerializers CastAttributeSerializer initialize":{"type":"method","name":"initialize","children":[],"call":[]}," PaperTrail AttributeSerializers AttributeSerializerFactory for":{"type":"method","name":"for","children":[],"call":["TypeSerializers PostgresArraySerializer  new ","active_record_serializer delimiter ","active_record_serializer subtype "," ar_pg_array? ","klass type_for_attribute ","klass type_for_attribute  delimiter ","klass type_for_attribute  subtype "]}," PaperTrail UpdateItemSubtypeGenerator create_migration_file":{"type":"method","name":"create_migration_file","children":[],"call":[" add_paper_trail_migration "," options "]}," PaperTrail MigrationGenerator migration_version":{"type":"method","name":"migration_version","children":[],"call":["major >= "," format "]}," PaperTrail MigrationGenerator add_paper_trail_migration":{"type":"method","name":"add_paper_trail_migration","children":[],"call":[" migration_template ","(pair\n  (sym :migration_version)\n  (send nil :migration_version)) merge "," migration_version "," Kernel  warn "," class migration_exists? "," class ","File  expand_path "]}," PaperTrail MigrationGenerator next_migration_number":{"type":"method","name":"next_migration_number","children":[],"call":[]}," PaperTrail InstallGenerator versions_table_options":{"type":"method","name":"versions_table_options","children":[],"call":[" mysql? "]}," PaperTrail InstallGenerator mysql?":{"type":"method","name":"mysql?","children":[],"call":["MYSQL_ADAPTERS  include? ","ActiveRecord Base  connection class name ","ActiveRecord Base  connection class ","ActiveRecord Base  connection "]}," PaperTrail InstallGenerator migration_version":{"type":"method","name":"migration_version","children":[],"call":["major >= "]}," PaperTrail InstallGenerator item_type_options":{"type":"method","name":"item_type_options","children":[],"call":["opt []= "," mysql? "]}," PaperTrail InstallGenerator add_paper_trail_migration":{"type":"method","name":"add_paper_trail_migration","children":[],"call":[" migration_template "," versions_table_options "," migration_version "," item_type_options "," Kernel  warn "," class migration_exists? "," class ","File  expand_path "," warn ","(str \"ALERT: Migration already exists named '\") + "," class migration_exists? ! "]}," PaperTrail InstallGenerator next_migration_number":{"type":"method","name":"next_migration_number","children":[],"call":[]}," PaperTrail InstallGenerator create_migration_file":{"type":"method","name":"create_migration_file","children":[],"call":[" add_paper_trail_migration "," options with_changes? "," options "," versions_table_options "," item_type_options "," item_id_type_options "," version_table_primary_key_type "," migration_template "," options with_associations? "]}," PaperTrail ModelConfig get_versions_scope":{"type":"method","name":"get_versions_scope","children":[],"call":[" order "," model timestamp_sort_order "," model "," lambda ","options [] [] ","options [] "]}," PaperTrail ModelConfig ensure_versions_option_is_hash":{"type":"method","name":"ensure_versions_option_is_hash","children":[],"call":["options []= ","options [] "," ActiveSupport Deprecation  warn "," caller "," format ","options [] inspect ","options [] is_a? "]}," PaperTrail ModelConfig define_has_many_versions":{"type":"method","name":"define_has_many_versions","children":[],"call":["@model_class has_many ","options [] except ","options [] ","@model_class version_class_name ","@model_class versions_association_name "," get_versions_scope "," check_versions_association_name "," check_version_class_name "," ensure_versions_option_is_hash "," ensure_versions_option_is_hash  [] except "," ensure_versions_option_is_hash  [] "," get_versions_ get_versions_scope  "]}," PaperTrail ModelConfig check_versions_association_name":{"type":"method","name":"check_versions_association_name","children":[],"call":["@model_class versions_association_name= ","options [] [] ","options [] ","@model_class class_attribute "]}," PaperTrail ModelConfig check_version_class_name":{"type":"method","name":"check_version_class_name","children":[],"call":[" assert_concrete_activerecord_class ","@model_class version_class_name ","@model_class version_class_name= ","options [] [] ","options [] ","options [] []= "," ActiveSupport Deprecation  warn "," caller "," format ","options [] inspect ","@model_class class_attribute "]}," PaperTrail Events Destroy changes_in_latest_version":{"type":"method","name":"changes_in_latest_version","children":[],"call":["(send\n  (send\n    (ivar :@record) :attributes) :map) to_h ","@record attributes map ","@record attributes ","@record attributes transform_values "]}," PaperTrail RecordTrail build_version_on_update":{"type":"method","name":"build_version_on_update","children":[],"call":["@record class paper_trail version_class new ","@record class paper_trail version_class ","@record class paper_trail ","@record class ","event data merge! "," data_for_update ","event data ","event changed_notably? ","Events Update  new ","data merge! ","data []= ","@record updated_at ","@record respond_to? ","@record paper_trail_options [] != ","@record paper_trail_options [] ","@record paper_trail_options ","event event data merge!  merge! ","event event data  merge! ","Events Update  new  data merge! "," event data merge! _for_update "," event data _for_update ","event event data merge!  ","event event data  ","Events Update  new  data ","Events Update  new  changed_notably? ","event data merge!  merge! ","event data  merge! ","event data merge!  []= ","event data  []= "]}," PaperTrail RecordTrail build_version_on_create":{"type":"method","name":"build_version_on_create","children":[],"call":["@record class paper_trail version_class new ","@record class paper_trail version_class ","@record class paper_trail ","@record class ","event data merge! "," data_for_create ","event data ","Events Create  new ","event event data merge!  merge! ","Events Create  new  data merge! "," event data merge! _for_create ","event event data merge!  ","Events Create  new  data "]}," PaperTrail Events Base cache_changed_attributes":{"type":"method","name":"cache_changed_attributes","children":[],"call":["@record send "]}," PaperTrail Events Base nonskipped_attributes_before_change":{"type":"method","name":"nonskipped_attributes_before_change","children":[],"call":["record_attributes []= "," attribute_in_previous_version ","@record class column_names include? ","@record class column_names ","@record class ","record_attributes each_key ","@record attributes except ","@record paper_trail_options [] ","@record paper_trail_options ","@record attributes "," cache_changed_attributes ","@record attributes except  []= ","@record attributes except  each_key "]}," PaperTrail VersionConcern version_limit":{"type":"method","name":"version_limit","children":[],"call":["PaperTrail  config version_limit ","PaperTrail  config ","klass paper_trail_options [] ","klass paper_trail_options ","(or\n  (send nil :item_subtype)\n  (send nil :item_type)) constantize "," item_type "," item_subtype "," class item_subtype_column_present? "," class "," item class base_class paper_trail_options [] "," item class base_class paper_trail_options "," item class base_class "," item class "," item "," base_class_limit_option? "," item class paper_trail_options [] "," item class paper_trail_options "," limit_option? ","klass base_class paper_trail_options [] ","klass base_class paper_trail_options ","klass base_class ","(or\n  (send nil :item_subtype)\n  (send nil :item_type)) constantize  paper_trail_options [] "," item class  paper_trail_options [] ","(or\n  (send nil :item_subtype)\n  (send nil :item_type)) constantize  paper_trail_options "," item class  paper_trail_options ","(or\n  (send nil :item_subtype)\n  (send nil :item_type)) constantize  base_class paper_trail_options [] "," item class  base_class paper_trail_options [] ","(or\n  (send nil :item_subtype)\n  (send nil :item_type)) constantize  base_class paper_trail_options "," item class  base_class paper_trail_options ","(or\n  (send nil :item_subtype)\n  (send nil :item_type)) constantize  base_class "," item class  base_class "]}," PaperTrail VersionConcern ClassMethods item_subtype_column_present?":{"type":"method","name":"item_subtype_column_present?","children":[],"call":[" column_names include? "," column_names "]}," PaperTrail ModelConfig check_presence_of_item_subtype_column":{"type":"method","name":"check_presence_of_item_subtype_column","children":[],"call":[" raise "," format ","@model_class name "," version_class item_subtype_column_present? "," version_class ","options key? "]}," PaperTrail Compatibility check_activerecord":{"type":"method","name":"check_activerecord","children":[],"call":[]}," PaperTrail Events Base calculated_ignored_array":{"type":"method","name":"calculated_ignored_array","children":[],"call":["ignore << ","condition call ","condition respond_to? ","obj each ","obj is_a? ","ignore delete_if ","@record paper_trail_options [] dup ","@record paper_trail_options [] ","@record paper_trail_options ","@record paper_trail_options [] dup  << ","@record paper_trail_options [] dup  delete_if "]}," PaperTrail VersionConcern ClassMethods where_object_changes_from":{"type":"method","name":"where_object_changes_from","children":[],"call":["Queries Versions WhereObjectChangesFrom  new execute ","Queries Versions WhereObjectChangesFrom  new "," raise ","args is_a? "]}," PaperTrail Serializers YAML where_object_changes_from_condition":{"type":"method","name":"where_object_changes_from_condition","children":[],"call":[" raise ","(str \"          where_object_changes_from does not support reading YAML from a text\\n\") squish freeze ","(str \"          where_object_changes_from does not support reading YAML from a text\\n\") squish "]}," PaperTrail Serializers JSON where_object_changes_from_condition":{"type":"method","name":"where_object_changes_from_condition","children":[],"call":[" raise ","(str \"          where_object_changes_from does not support reading JSON from a text\\n\") squish freeze ","(str \"          where_object_changes_from does not support reading JSON from a text\\n\") squish "]}," PaperTrail Queries Versions WhereObjectChangesFrom text":{"type":"method","name":"text","children":[],"call":["@version_model_class where ","a and ","where_conditions reduce "," PaperTrail  serializer where_object_changes_from_condition "," PaperTrail  serializer ","@attributes map ","@version_model_class arel_table [] ","@version_model_class arel_table "]}," PaperTrail Queries Versions WhereObjectChangesFrom json":{"type":"method","name":"json","children":[],"call":["@version_model_class where ","predicates join ","values concat ","value to_json ","predicates push ","@attributes each "]}," PaperTrail Queries Versions WhereObjectChangesFrom execute":{"type":"method","name":"execute","children":[],"call":[" text "," json ","@version_model_class columns_hash [] type ","@version_model_class columns_hash [] ","@version_model_class columns_hash ","PaperTrail  config object_changes_adapter where_object_changes_from ","PaperTrail  config object_changes_adapter ","PaperTrail  config ","PaperTrail  config object_changes_adapter respond_to? "," raise ","UnsupportedColumnType  new "]}," PaperTrail Queries Versions WhereObjectChangesFrom initialize":{"type":"method","name":"initialize","children":[],"call":[]}," PaperTrail AttributeSerializers AttributeSerializerFactory ar_pg_array?":{"type":"method","name":"ar_pg_array?","children":[],"call":["obj instance_of? "]}," PaperTrail VersionConcern base_class_limit_option?":{"type":"method","name":"base_class_limit_option?","children":[],"call":[" limit_option? ","klass base_class ","klass respond_to? "]}," PaperTrail VersionConcern limit_option?":{"type":"method","name":"limit_option?","children":[],"call":["klass paper_trail_options key? ","klass paper_trail_options ","klass respond_to? "]}," PaperTrail VersionConcern ClassMethods where_object_changes_to":{"type":"method","name":"where_object_changes_to","children":[],"call":["Queries Versions WhereObjectChangesTo  new execute ","Queries Versions WhereObjectChangesTo  new "," raise ","args is_a? "]}," PaperTrail VersionConcern ClassMethods where_attribute_changes":{"type":"method","name":"where_attribute_changes","children":[],"call":["Queries Versions WhereAttributeChanges  new execute ","Queries Versions WhereAttributeChanges  new "," raise ","attribute is_a? "]}," PaperTrail Reifier init_model_by_finding_item_id":{"type":"method","name":"init_model_by_finding_item_id","children":[],"call":["klass unscoped where first ","klass unscoped where ","version item_id ","klass primary_key ","klass unscoped "]}," PaperTrail Queries Versions WhereObjectChangesTo json":{"type":"method","name":"json","children":[],"call":["@version_model_class where ","predicates join ","values concat ","value to_json ","predicates push ","@attributes each "]}," PaperTrail Queries Versions WhereObjectChangesTo execute":{"type":"method","name":"execute","children":[],"call":[" raise ","UnsupportedColumnType  new "," json ","@version_model_class columns_hash [] type ","@version_model_class columns_hash [] ","@version_model_class columns_hash ","PaperTrail  config object_changes_adapter where_object_changes_to ","PaperTrail  config object_changes_adapter ","PaperTrail  config ","PaperTrail  config object_changes_adapter respond_to? "]}," PaperTrail Queries Versions WhereObjectChangesTo initialize":{"type":"method","name":"initialize","children":[],"call":[]}," PaperTrail Queries Versions WhereAttributeChanges json":{"type":"method","name":"json","children":[],"call":["@version_model_class where "]}," PaperTrail Queries Versions WhereAttributeChanges execute":{"type":"method","name":"execute","children":[],"call":[" raise ","UnsupportedColumnType  new "," json ","@version_model_class columns_hash [] type ","@version_model_class columns_hash [] ","@version_model_class columns_hash ","PaperTrail  config object_changes_adapter where_attribute_changes ","PaperTrail  config object_changes_adapter ","PaperTrail  config ","PaperTrail  config object_changes_adapter respond_to? "]}," PaperTrail Queries Versions WhereAttributeChanges initialize":{"type":"method","name":"initialize","children":[],"call":[]}," PaperTrail ModelConfig assert_valid_recording_order_for_on_destroy":{"type":"method","name":"assert_valid_recording_order_for_on_destroy","children":[],"call":[" raise "," cannot_record_after_destroy? ","recording_order to_s == ","recording_order to_s ","(str \"after\") include? "]}," PaperTrail Events Base load_changes_in_latest_version":{"type":"method","name":"load_changes_in_latest_version","children":[],"call":["@record changes ","@record saved_changes "]}," PaperTrail UnsupportedColumnType initialize":{"type":"method","name":"initialize","children":[],"call":[" format "]}," PaperTrail ModelConfig event_attribute_option":{"type":"method","name":"event_attribute_option","children":[],"call":["attr to_s ","attr stringify_keys ","attr is_a? ","(send\n  (send\n    (ivar :@model_class) :paper_trail_options) :[]\n  (lvar :option_name)) flatten compact map ","(send\n  (send\n    (ivar :@model_class) :paper_trail_options) :[]\n  (lvar :option_name)) flatten compact ","(send\n  (send\n    (ivar :@model_class) :paper_trail_options) :[]\n  (lvar :option_name)) flatten ","@model_class paper_trail_options [] ","@model_class paper_trail_options "]}," PaperTrail ModelConfig append_option_uniquely":{"type":"method","name":"append_option_uniquely","children":[],"call":["collection << ","collection include? ","@model_class paper_trail_options fetch ","@model_class paper_trail_options ","@model_class paper_trail_options fetch  << ","@model_class paper_trail_options fetch  include? "]}," PaperTrail Events Update merge_object_changes_into":{"type":"method","name":"merge_object_changes_into","children":[],"call":["data []= "," prepare_object_changes "," notable_changes ","@force_changes nil? "," record_object_changes? "," prepare_object_ notable_changes  "," notable_ notable_changes  ","@force_ notable_changes  nil? "," record_object_ notable_changes ? "]}," PaperTrail Events Base metadatum_from_model_method":{"type":"method","name":"metadatum_from_model_method","children":[],"call":["@record send "," attribute_in_previous_version "," attribute_changed_in_latest_version? ","@record has_attribute? ","event != "]}," PaperTrail Events Base evaluate_only":{"type":"method","name":"evaluate_only","children":[],"call":["only << ","condition call ","condition respond_to? ","obj each ","obj is_a? ","only delete_if ","@record paper_trail_options [] dup ","@record paper_trail_options [] ","@record paper_trail_options ","@record paper_trail_options [] dup  << ","@record paper_trail_options [] dup  delete_if "]}," PaperTrail Events Update changed_notably?":{"type":"method","name":"changed_notably?","children":[],"call":[" changes_in_latest_version empty? "," changes_in_latest_version "]}," PaperTrail InstallGenerator item_id_type_options":{"type":"method","name":"item_id_type_options","children":[],"call":[" options uuid? "," options "]}," PaperTrail Serializers YAML use_safe_load?":{"type":"method","name":"use_safe_load?","children":[],"call":["ActiveRecord  use_yaml_unsafe_load ! ","ActiveRecord  use_yaml_unsafe_load ","ActiveRecord Base  use_yaml_unsafe_load ! ","ActiveRecord Base  use_yaml_unsafe_load ","(send\n  (const nil :ActiveRecord) :use_yaml_unsafe_load) ! "," ActiveRecord  gem_version >= ","Gem Version  new "," ActiveRecord  gem_version "]}," PaperTrail Serializers YAML yaml_column_permitted_classes":{"type":"method","name":"yaml_column_permitted_classes","children":[],"call":["ActiveRecord Base  yaml_column_permitted_classes ","ActiveRecord  yaml_column_permitted_classes "]}," PaperTrail Events Base assert_metadatum_key_is_permitted":{"type":"method","name":"assert_metadatum_key_is_permitted","children":[],"call":[" raise "," format ","FORBIDDEN_METADATA_KEYS  include? ","key to_sym "]}," PaperTrail AttributeSerializers CastAttributeSerializer rails_gte_7_0?":{"type":"method","name":"rails_gte_7_0?","children":[],"call":[" ActiveRecord  gem_version >= "," Gem Version  new "," ActiveRecord  gem_version "]}," PaperTrail active_record_gte_7_0?":{"type":"method","name":"active_record_gte_7_0?","children":[],"call":[" ActiveRecord  gem_version >= "," Gem Version  new "," ActiveRecord  gem_version "]}," PaperTrail InstallGenerator version_table_primary_key_type":{"type":"method","name":"version_table_primary_key_type","children":[],"call":[" options uuid? "," options "]}," PaperTrail Model InstanceMethods changed_and_not_ignored":{"type":"method","name":"changed_and_not_ignored","children":[],"call":[" changed - "," class ignore "," class "," changed "," changed - - "," class skip "," class paper_trail_options [] "," class paper_trail_options "," paper_trail_options [] "," paper_trail_options ","ignore << ","condition call ","condition respond_to? ","obj each ","obj is_a? ","ignore delete_if "," paper_trail_options [] dup "," paper_trail changed_and_not_ignored "," paper_trail "," class paper_trail_deprecate "," class  class paper_trail_options []  "," class  paper_trail_options [] dup  "," class  paper_trail_options []  "," class paper_trail_options []  << "," paper_trail_options [] dup  << "," class paper_trail_options []  delete_if "," paper_trail_options [] dup  delete_if "," paper_trail changed_and_not_ class paper_trail_options [] d "," paper_trail changed_and_not_ paper_trail_options [] dup d "]}," Version with_item_keys":{"type":"method","name":"with_item_keys","children":[],"call":[]}," PaperTrail Model InstanceMethods version_class":{"type":"method","name":"version_class","children":[],"call":[" version_class_name constantize "," version_class_name "]}," PaperTrail enabled_for_controller=":{"type":"method","name":"enabled_for_controller=","children":[],"call":[" paper_trail_store []= "," paper_trail_store "," request enabled= "," request "," ActiveSupport Deprecation  warn "," caller "]}," PaperTrail enabled_for_controller?":{"type":"method","name":"enabled_for_controller?","children":[],"call":[" paper_trail_store [] ! ! "," paper_trail_store [] ! "," paper_trail_store [] "," paper_trail_store "," request enabled? "," request "," ActiveSupport Deprecation  warn "," caller "]}," PaperTrail Controller set_paper_trail_enabled_for_controller":{"type":"method","name":"set_paper_trail_enabled_for_controller","children":[],"call":[" PaperTrail  enabled_for_controller= "," paper_trail_enabled_for_controller "," respond_to? "]}," PaperTrail Controller paper_trail_enabled_for_controller":{"type":"method","name":"paper_trail_enabled_for_controller","children":[],"call":[]}," Version without_identity_map":{"type":"method","name":"without_identity_map","children":[],"call":["block call ","ActiveRecord IdentityMap  without ","ActiveRecord IdentityMap  respond_to? "]}," Version changeset":{"type":"method","name":"changeset","children":[],"call":["YAML  load "," object_changes ","Version  method_defined? "," class column_names include? "," class column_names "," class ","HashWithIndifferentAccess  [] "," item_type constantize unserialize_attribute_changes "," item_type constantize "," item_type ","HashWithIndifferentAccess  [] tap ","PaperTrail  serializer load ","PaperTrail  serializer ","HashWithIndifferentAccess  new tap ","HashWithIndifferentAccess  new "," object_ object_changes  "," item_type constantize unserialize_attribute_ object_changes  "]}," AddObjectChangesColumnToVersions down":{"type":"method","name":"down","children":[],"call":[]}," AddObjectChangesColumnToVersions up":{"type":"method","name":"up","children":[],"call":[]}," PaperTrail Model InstanceMethods without_versioning":{"type":"method","name":"without_versioning","children":[],"call":[" class paper_trail_on "," class ","method to_proc call ","method to_proc "," class paper_trail_off "," paper_trail_enabled_for_model "," class paper_trail_on! "," class paper_trail_off! "," paper_trail_enabled_for_model? "," paper_trail without_versioning "," paper_trail "," class paper_trail_deprecate "]}," PaperTrail Model InstanceMethods source_version":{"type":"method","name":"source_version","children":[],"call":[" send "," class version_name "," class "," class version_association_name "," paper_trail source_version "," paper_trail "," class paper_trail_deprecate "]}," PaperTrail Model InstanceMethods save_version?":{"type":"method","name":"save_version?","children":[],"call":[" unless_condition try ! "," unless_condition try "," unless_condition "," if_condition call "," if_condition "," if_condition blank? ","unless_condition try ! ","unless_condition try ","if_condition call ","if_condition blank? "," class paper_trail_options [] "," class paper_trail_options "," class "," paper_trail_options [] "," paper_trail_options "," paper_trail save_version? "," paper_trail "," class paper_trail_deprecate ","  class paper_trail_options []  try ! ","  paper_trail_options []  try ! ","  class paper_trail_options []  try ","  paper_trail_options []  try ","  class paper_trail_options []  ","  paper_trail_options []  ","  class paper_trail_options []  call ","  paper_trail_options []  call ","  class paper_trail_options []  blank? ","  paper_trail_options []  blank? "," class paper_trail_options []  try ! "," paper_trail_options []  try ! "," class paper_trail_options []  try "," paper_trail_options []  try "," class paper_trail_options []  call "," paper_trail_options []  call "," class paper_trail_options []  blank? "," paper_trail_options []  blank? "]}," PaperTrail timestamp_field":{"type":"method","name":"timestamp_field","children":[],"call":["PaperTrail  config timestamp_field ","PaperTrail  config "]}," PaperTrail Model InstanceMethods versions_between":{"type":"method","name":"versions_between","children":[],"call":[" version_at ","version send ","PaperTrail  timestamp_field ","versions collect "," send between "," send "," class versions_association_name "," class "," paper_trail versions_between "," paper_trail "," class paper_trail_deprecate "," send between  collect "," class  send between _association_name "," paper_trail  send between _between "]}," Version destroys":{"type":"method","name":"destroys","children":[],"call":[]}," Version updates":{"type":"method","name":"updates","children":[],"call":[]}," Version creates":{"type":"method","name":"creates","children":[],"call":[]}," PaperTrail Model ClassMethods version_key":{"type":"method","name":"version_key","children":[],"call":[" version_class_name constantize primary_key "," version_class_name constantize "," version_class_name "]}," PaperTrail Serializers Yaml dump":{"type":"method","name":"dump","children":[],"call":["YAML  dump "]}," PaperTrail Serializers Yaml load":{"type":"method","name":"load","children":[],"call":["YAML  load "]}," PaperTrail Model InstanceMethods changes_for_paper_trail":{"type":"method","name":"changes_for_paper_trail","children":[],"call":[" class serialize_attribute_changes "," class ","(send\n  (send\n    (self) :changes) :keep_if) tap "," notably_changed include? "," notably_changed "," changes keep_if "," changes ","(send\n  (send\n    (self) :changes) :delete_if) tap "," notably_changed include? ! "," changes delete_if ","_changes to_hash "," class serialize_attribute_changes_for_paper_trail! ","PaperTrail  serialized_attributes? ","notable_changes to_hash ","AttributeSerializers ObjectChangesAttribute  new serialize ","AttributeSerializers ObjectChangesAttribute  new "," paper_trail changes "," paper_trail "," class paper_trail_deprecate "]}," PaperTrail Model ClassMethods unserialize_attribute_changes":{"type":"method","name":"unserialize_attribute_changes","children":[],"call":["changes []= ","coder load ","changes [] ","changes key? "," serialized_attributes each "," serialized_attributes ","coder respond_to? "," paper_trail_version_class object_changes_col_is_json? "," paper_trail_version_class ","PaperTrail  serializer ","PaperTrail  serializer  load ","PaperTrail  serializer  respond_to? "]}," PaperTrail Model ClassMethods serialize_attribute_changes":{"type":"method","name":"serialize_attribute_changes","children":[],"call":["changes []= ","coder dump ","changes [] ","changes key? "," serialized_attributes each "," serialized_attributes ","coder respond_to? "," paper_trail_version_class object_changes_col_is_json? "," paper_trail_version_class ","PaperTrail  serializer ","PaperTrail  serializer  dump ","PaperTrail  serializer  respond_to? "]}," PaperTrail Model ClassMethods unserialize_attributes":{"type":"method","name":"unserialize_attributes","children":[],"call":["attributes []= ","coder load ","attributes [] ","attributes key? "," serialized_attributes each "," serialized_attributes "]}," PaperTrail Model ClassMethods serialize_attributes":{"type":"method","name":"serialize_attributes","children":[],"call":["attributes []= ","coder dump ","attributes [] ","attributes key? "," serialized_attributes each "," serialized_attributes "]}," PaperTrail configure":{"type":"method","name":"configure","children":[],"call":[]}," PaperTrail Serializers Json dump":{"type":"method","name":"dump","children":[],"call":["ActiveSupport JSON  encode "]}," PaperTrail Serializers Json load":{"type":"method","name":"load","children":[],"call":["ActiveSupport JSON  decode "]}," PaperTrail Model ClassMethods unserialize_attributes_for_paper_trail":{"type":"method","name":"unserialize_attributes_for_paper_trail","children":[],"call":["attributes []= ","coder load ","attributes [] ","coder respond_to? ","attributes key? "," serialized_attributes each "," serialized_attributes "," paper_trail_version_class object_col_is_json? "," paper_trail_version_class ","PaperTrail  serializer ","PaperTrail  serializer  load ","PaperTrail  serializer  respond_to? "]}," PaperTrail Model ClassMethods serialize_attributes_for_paper_trail":{"type":"method","name":"serialize_attributes_for_paper_trail","children":[],"call":["attributes []= ","coder dump ","attributes [] ","coder respond_to? ","attributes key? "," serialized_attributes each "," serialized_attributes "," paper_trail_version_class object_col_is_json? "," paper_trail_version_class ","PaperTrail  serializer ","PaperTrail  serializer  dump ","PaperTrail  serializer  respond_to? "]}," Version enforce_version_limit!":{"type":"method","name":"enforce_version_limit!","children":[],"call":["excess_previous_versions map ","previous_versions - ","previous_versions last ","PaperTrail  config version_limit ","PaperTrail  config ","previous_versions size > ","previous_versions size "," sibling_versions not_creates "," sibling_versions ","PaperTrail  config version_limit is_a? ","previous_versions -  map ","excess_ sibling_versions not_creates  map "," sibling_versions not_creates  - "," sibling_versions not_creates  last "," sibling_versions not_creates  size > "," sibling_versions not_creates  size "]}," Version not_creates":{"type":"method","name":"not_creates","children":[],"call":[]}," PaperTrail active_record_protected_attributes?":{"type":"method","name":"active_record_protected_attributes?","children":[],"call":["(const nil :ProtectedAttributes) ! ! ","(const nil :ProtectedAttributes) ! "," ActiveRecord VERSION MAJOR  < "]}," PaperTrail VersionConcern reify_has_ones":{"type":"method","name":"reify_has_ones","children":[],"call":["model send ","assoc name ","model send send ","k to_sym ","child_as_it_was attributes each ","child_as_it_was attributes ","child version_at "," send - ","lookback seconds "," send ","PaperTrail  timestamp_field ","child respond_to? ","model class reflect_on_all_associations each ","model class reflect_on_all_associations ","model class ","model appear_as_new_record ","version reify ","options merge ","model send mark_for_destruction ","options [] ","version event == ","version event ","model class paper_trail_version_class joins where where where where order first ","model class paper_trail_version_class joins where where where where order ","model class paper_trail_version_class joins where where where where "," transaction_id ","model class paper_trail_version_class joins where where where ","assoc class_name ","model class paper_trail_version_class joins where where ","model id ","model class paper_trail_version_class joins where ","assoc foreign_key ","model class paper_trail_version_class joins ","model class paper_trail_version_class ","assoc klass paper_trail_enabled_for_model? ","assoc klass ","model class paper_trail_version_class table_name ","child version_at  attributes each ","model send _as_it_was attributes each ","version reify _as_it_was attributes each ","child version_at  attributes ","model send _as_it_was attributes ","version reify _as_it_was attributes ","model send  version_at ","version reify  version_at ","child model class paper_trail_version_class joins where where where where order first _at ","model send  respond_to? ","version reify  respond_to? ","model class paper_trail_version_class joins where where where where order first  reify ","model class paper_trail_version_class joins where where where where order first  event == ","model class paper_trail_version_class joins where where where where order first  event ","model class paper_trail_model class paper_trail_version_class joins where where where where order first _class joins where where where where order first ","model class paper_trail_model class paper_trail_version_class joins where where where where order first _class joins where where where where order ","model class paper_trail_model class paper_trail_version_class joins where where where where order first _class joins where where where where ","model class paper_trail_model class paper_trail_version_class joins where where where where order first _class joins where where where ","model class paper_trail_model class paper_trail_version_class joins where where where where order first _class joins where where ","model class paper_trail_model class paper_trail_version_class joins where where where where order first _class joins where ","model class paper_trail_model class paper_trail_version_class joins where where where where order first _class joins ","model class paper_trail_model class paper_trail_version_class joins where where where where order first _class ","model class paper_trail_model class paper_trail_version_class joins where where where where order first _class table_name "]}," PaperTrail VersionConcern without_identity_map":{"type":"method","name":"without_identity_map","children":[],"call":["block call "," ActiveRecord IdentityMap  without "," ActiveRecord IdentityMap  respond_to? "]}," PaperTrail VersionConcern originator":{"type":"method","name":"originator","children":[],"call":[" previous whodunnit "," previous "," paper_trail_originator "," warn "," ActiveSupport Deprecation  warn "]}," PaperTrail Model InstanceMethods paper_trail_switched_on?":{"type":"method","name":"paper_trail_switched_on?","children":[],"call":[" paper_trail_enabled_for_model ","PaperTrail  enabled_for_controller? ","PaperTrail  enabled? "," class paper_trail_enabled_for_model "," class "," paper_trail_enabled_for_model? "," paper_trail enabled? "," paper_trail "," class paper_trail_deprecate "]}," PaperTrail Model InstanceMethods object_attrs_for_paper_trail":{"type":"method","name":"object_attrs_for_paper_trail","children":[],"call":[" class serialize_attributes_for_paper_trail "," class ","object attributes except tap ","object attributes except "," paper_trail_options [] "," paper_trail_options ","object attributes ","attributes_hash except tap ","attributes_hash except "," class serialize_attributes_for_paper_trail! ","PaperTrail  serialized_attributes? "," attributes_before_change except "," attributes_before_change ","AttributeSerializers ObjectAttribute  new serialize ","AttributeSerializers ObjectAttribute  new "," paper_trail object_attrs_for_paper_trail "," paper_trail "," class paper_trail_deprecate "," paper_trail object_attributes_hash except _for_paper_trail "," paper_trail object_object attributes except _for_paper_trail "," paper_trail object_ attributes_before_change except _for_paper_trail "]}," PaperTrail Model ClassMethods paper_trail_version_class":{"type":"method","name":"paper_trail_version_class","children":[],"call":[" version_class_name constantize "," version_class_name "," paper_trail version_class "," paper_trail "," paper_trail_deprecate "]}," PaperTrail Sinatra set_paper_trail_whodunnit":{"type":"method","name":"set_paper_trail_whodunnit","children":[],"call":[" PaperTrail  whodunnit= "," user_for_paper_trail "," PaperTrail  enabled? "]}," PaperTrail Sinatra user_for_paper_trail":{"type":"method","name":"user_for_paper_trail","children":[],"call":[" current_user "," current_user try "," current_user try! ","ActiveSupport VERSION MAJOR  >= "]}," PaperTrail Sinatra registered":{"type":"method","name":"registered","children":[],"call":[]}," PaperTrail RSpec Extensions with_versioning":{"type":"method","name":"with_versioning","children":[],"call":[" PaperTrail  enabled= "," PaperTrail  enabled? "]}," Version last":{"type":"method","name":"last","children":[],"call":[" warn "]}," Version first":{"type":"method","name":"first","children":[],"call":[" warn "]}," Version find":{"type":"method","name":"find","children":[],"call":[" warn "]}," Version initialize":{"type":"method","name":"initialize","children":[],"call":[" warn "]}," PaperTrail Version enforce_version_limit!":{"type":"method","name":"enforce_version_limit!","children":[],"call":["excess_previous_versions map ","previous_versions - ","previous_versions last ","PaperTrail  config version_limit ","PaperTrail  config ","previous_versions size > ","previous_versions size "," sibling_versions not_creates "," sibling_versions ","PaperTrail  config version_limit is_a? ","previous_versions -  map ","excess_ sibling_versions not_creates  map "," sibling_versions not_creates  - "," sibling_versions not_creates  last "," sibling_versions not_creates  size > "," sibling_versions not_creates  size "]}," PaperTrail Version reify_has_ones":{"type":"method","name":"reify_has_ones","children":[],"call":["model send ","assoc name ","model send send ","k to_sym ","child_as_it_was attributes each ","child_as_it_was attributes ","child version_at "," send - ","lookback seconds "," send ","PaperTrail  timestamp_field ","child respond_to? ","model class reflect_on_all_associations each ","model class reflect_on_all_associations ","model class ","child version_at  attributes each ","model send _as_it_was attributes each ","child version_at  attributes ","model send _as_it_was attributes ","model send  version_at ","model send  respond_to? "]}," PaperTrail Version without_identity_map":{"type":"method","name":"without_identity_map","children":[],"call":["block call ","ActiveRecord IdentityMap  without ","ActiveRecord IdentityMap  respond_to? "]}," PaperTrail Version index":{"type":"method","name":"index","children":[],"call":[" sibling_versions select order map index "," send "," sibling_versions select order map "," sibling_versions select order "," sibling_versions select "," sibling_versions "," class primary_key to_sym "," class primary_key "," class "]}," PaperTrail Version previous":{"type":"method","name":"previous","children":[],"call":[" sibling_versions preceding first "," sibling_versions preceding "," sibling_versions "]}," PaperTrail Version next":{"type":"method","name":"next","children":[],"call":[" sibling_versions subsequent first "," sibling_versions subsequent "," sibling_versions "]}," PaperTrail Version sibling_versions":{"type":"method","name":"sibling_versions","children":[],"call":[" class with_item_keys "," item_id "," item_type "," class "]}," PaperTrail Version terminator":{"type":"method","name":"terminator","children":[],"call":[" whodunnit "]}," PaperTrail Version originator":{"type":"method","name":"originator","children":[],"call":[" previous try "," previous "]}," PaperTrail Version changeset":{"type":"method","name":"changeset","children":[],"call":[" item_type constantize unserialize_attribute_changes "," item_type constantize "," item_type ","HashWithIndifferentAccess  new tap ","HashWithIndifferentAccess  new ","PaperTrail  serializer load "," object_changes ","PaperTrail  serializer "," class column_names include? "," class column_names "," class "]}," PaperTrail Version reify":{"type":"method","name":"reify","children":[],"call":[" reify_has_ones ","options [] ","options [] == ","model send ","model class version_association_name ","model class "," logger warn "," id "," item_type "," logger ","model []= ","k to_sym ","model respond_to? ","attrs each ","model class unserialize_attributes_for_paper_trail ","klass new ","class_name constantize ","attrs [] ","attrs [] blank? "," item_type constantize inheritance_column "," item_type constantize ","attrs []= ","(send\n  (send\n    (lvar :model) :attribute_names) :-\n  (send\n    (lvar :attrs) :keys)) each ","model attribute_names - ","attrs keys ","model attribute_names "," item ","PaperTrail  serializer load "," object ","PaperTrail  serializer "," object nil? ","options reverse_merge! ","options []= "," without_identity_map ","klass new  send "," item  send ","klass new  class version_association_name "," item  class version_association_name ","klass new  class "," item  class ","klass new  []= "," item  []= ","klass new  respond_to? "," item  respond_to? ","PaperTrail  serializer load  each ","klass new  class unserialize_attributes_for_paper_trail "," item  class unserialize_attributes_for_paper_trail ","class_name constantize  new ","attrs []  constantize "," item_type  constantize ","PaperTrail  serializer load  [] ","PaperTrail  serializer load  [] blank? ","PaperTrail  serializer load  []= ","(send\n  (send\n    (lvar :klass new ) :attribute_names) :-\n  (send\n    (lvar :attrs) :keys)) each ","(send\n  (send\n    (lvar : item ) :attribute_names) :-\n  (send\n    (lvar :attrs) :keys)) each ","(send\n  (send\n    (lvar :model) :attribute_names) :-\n  (send\n    (lvar :PaperTrail  serializer load ) :keys)) each ","klass new  attribute_names - "," item  attribute_names - ","PaperTrail  serializer load  keys ","klass new  attribute_names "," item  attribute_names "]}," PaperTrail Version not_creates":{"type":"method","name":"not_creates","children":[],"call":[]}," PaperTrail Version destroys":{"type":"method","name":"destroys","children":[],"call":[]}," PaperTrail Version updates":{"type":"method","name":"updates","children":[],"call":[]}," PaperTrail Version creates":{"type":"method","name":"creates","children":[],"call":[]}," PaperTrail Version with_item_keys":{"type":"method","name":"with_item_keys","children":[],"call":[]}," Sinatra PaperTrail set_paper_trail_whodunnit":{"type":"method","name":"set_paper_trail_whodunnit","children":[],"call":[" PaperTrail  whodunnit= "," user_for_paper_trail "," PaperTrail  enabled? "]}," Sinatra PaperTrail user_for_paper_trail":{"type":"method","name":"user_for_paper_trail","children":[],"call":[" current_user "]}," Sinatra PaperTrail registered":{"type":"method","name":"registered","children":[],"call":[]}," PaperTrail Rails Controller set_whodunnit":{"type":"method","name":"set_whodunnit","children":[],"call":[" set_paper_trail_whodunnit "," logger warn "," logger "]}," PaperTrail enabled_for_model?":{"type":"method","name":"enabled_for_model?","children":[],"call":[" paper_trail_store fetch ! ! "," paper_trail_store fetch ! "," paper_trail_store fetch "," paper_trail_store "," request enabled_for_model? "," request "," ActiveSupport Deprecation  warn "," caller "]}," PaperTrail enabled_for_model":{"type":"method","name":"enabled_for_model","children":[],"call":[" paper_trail_store []= "," paper_trail_store "," request enabled_for_model "," request "," ActiveSupport Deprecation  warn "," caller "]}," PaperTrail Model InstanceMethods touch_with_version":{"type":"method","name":"touch_with_version","children":[],"call":[" save! "," write_attribute ","attributes each "," current_time_from_proper_timezone ","attributes << "," timestamp_attributes_for_update_in_model "," raise "," persisted? "," record_update "," will_record_after_update? "," paper_trail_options [] == "," paper_trail_options [] "," paper_trail_options "," paper_trail touch_with_version "," paper_trail "," class paper_trail_deprecate "," class "," timestamp_attributes_for_update_in_model  each ","  current_time_from_proper_timezone _from_proper_timezone "," timestamp_attributes_for_update_in_model  << "," timestamp_ timestamp_attributes_for_update_in_model _for_update_in_model "]}," PaperTrail Model InstanceMethods whodunnit":{"type":"method","name":"whodunnit","children":[],"call":["PaperTrail  whodunnit= ","PaperTrail  whodunnit "," raise "," block_given? "," paper_trail whodunnit "," paper_trail "," class paper_trail_deprecate "," class "]}," PaperTrail Model InstanceMethods paper_trail_enabled_for_model?":{"type":"method","name":"paper_trail_enabled_for_model?","children":[],"call":[" class paper_trail_enabled_for_model? "," class "," paper_trail enabled_for_model? "," paper_trail "," class paper_trail_deprecate "]}," PaperTrail Model ClassMethods paper_trail_enabled_for_model?":{"type":"method","name":"paper_trail_enabled_for_model?","children":[],"call":["PaperTrail  enabled_for_model? "," include? "," paper_trail enabled? "," paper_trail "," paper_trail_deprecate "]}," PaperTrail Model ClassMethods paper_trail_on!":{"type":"method","name":"paper_trail_on!","children":[],"call":["PaperTrail  enabled_for_model "," paper_trail enable "," paper_trail "," paper_trail_deprecate "]}," PaperTrail Model ClassMethods paper_trail_off!":{"type":"method","name":"paper_trail_off!","children":[],"call":["PaperTrail  enabled_for_model "," paper_trail disable "," paper_trail "," paper_trail_deprecate "]}," CreateVersions change":{"type":"method","name":"change","children":[],"call":[" add_index ","t datetime ","t text ","t string ","t integer "," create_table "," versions_table_options "," item_type_options "]}," AddObjectChangesToVersions change":{"type":"method","name":"change","children":[],"call":[" add_column "]}," PaperTrail Model InstanceMethods reset_timestamp_attrs_for_update_if_needed!":{"type":"method","name":"reset_timestamp_attrs_for_update_if_needed!","children":[],"call":[" send "," timestamp_attributes_for_update_in_model each "," timestamp_attributes_for_update_in_model "," live? "," respond_to? "," paper_trail reset_timestamp_attrs_for_update_if_needed "," paper_trail "]}," PaperTrail Model InstanceMethods clear_version_instance!":{"type":"method","name":"clear_version_instance!","children":[],"call":[" send "," class version_association_name "," class "," paper_trail clear_version_instance "," paper_trail "]}," PaperTrail Model InstanceMethods paper_trail_originator":{"type":"method","name":"paper_trail_originator","children":[],"call":["(or\n  (send nil :source_version)\n  (send\n    (send nil :send\n      (send\n        (send\n          (self) :class) :versions_association_name)) :last)) try "," send last "," send "," class versions_association_name "," class "," source_version "," paper_trail originator "," paper_trail "," class paper_trail_deprecate "]}," PaperTrail transaction_id=":{"type":"method","name":"transaction_id=","children":[],"call":[" paper_trail_store []= "," paper_trail_store "," request transaction_id= "," request "," ActiveSupport Deprecation  warn "," caller "]}," PaperTrail transaction_id":{"type":"method","name":"transaction_id","children":[],"call":[" paper_trail_store [] "," paper_trail_store "," request transaction_id "," request "," ActiveSupport Deprecation  warn "," caller "]}," PaperTrail transaction?":{"type":"method","name":"transaction?","children":[],"call":[" ActiveRecord Base  connection open_transactions > "," ActiveRecord Base  connection open_transactions "," ActiveRecord Base  connection "," ActiveRecord Base  connection open_transactions positive? "]}," PaperTrail serialized_attributes?":{"type":"method","name":"serialized_attributes?","children":[],"call":["ActiveSupport Deprecation  warn ","PaperTrail.serialized_attributes? is deprecated without replacement  + "]}," PaperTrail VersionConcern reify_has_many_through":{"type":"method","name":"reify_has_many_through","children":[],"call":["model send proxy_association target= ","collection compact ","model send proxy_association ","model send ","assoc name ","version reify ","options merge ","versions values map ","versions values ","r mark_for_destruction ","c tap ","options [] ","version event == ","version event ","(lvasgn :version\n  (send\n    (lvar :versions) :delete\n    (send\n      (lvar :c) :id))) nil? ","versions delete ","c id ","collection map! ","Array  new ","assoc klass where ","assoc klass primary_key ","assoc klass ","acc merge! ","v item_id ","assoc klass paper_trail_version_class where inject ","assoc klass paper_trail_version_class where ","assoc klass paper_trail_version_class ","assoc klass paper_trail_version_class select where where where group to_sql ","assoc klass paper_trail_version_class select where where where group ","assoc klass paper_trail_version_class select where where where "," transaction_id ","assoc klass paper_trail_version_class select where where ","assoc klass paper_trail_version_class select where ","assoc class_name ","assoc klass paper_trail_version_class select ","through_model send ","assoc foreign_key ","through_collection map ","assoc options [] ","assoc options ","assoc klass paper_trail_enabled_for_model? ","associations each ","Array  new  compact ","versions delete  reify ","versions delete s values map ","versions delete s values ","versions delete  event == ","versions delete  event ","(lvasgn :versions delete \n  (send\n    (lvar :versions delete s) :delete\n    (send\n      (lvar :c) :id))) nil? ","versions delete s delete ","Array  new  map! ","assoc klass paper_trail_versions delete _class where inject ","assoc klass paper_trail_versions delete _class where ","assoc klass paper_trail_versions delete _class ","assoc klass paper_trail_versions delete _class select where where where group to_sql ","assoc klass paper_trail_versions delete _class select where where where group ","assoc klass paper_trail_versions delete _class select where where where ","assoc klass paper_trail_versions delete _class select where where ","assoc klass paper_trail_versions delete _class select where ","assoc klass paper_trail_versions delete _class select ","through_Array  new  map ","model send  map "]}," PaperTrail VersionConcern reify_has_many_directly":{"type":"method","name":"reify_has_many_directly","children":[],"call":["model send proxy_association target= ","collection compact ","model send proxy_association ","model send ","assoc name ","version reify ","options merge ","versions values map ","versions values ","r mark_for_destruction ","c tap ","options [] ","version event == ","version event ","(lvasgn :version\n  (send\n    (lvar :versions) :delete\n    (send\n      (lvar :c) :id))) nil? ","versions delete ","c id ","collection map! ","Array  new ","acc merge! ","v item_id ","model class paper_trail_version_class where inject ","model class paper_trail_version_class where ","model class paper_trail_version_class ","model class ","PaperTrail VersionAssociation  joins select where where where where group to_sql ","PaperTrail VersionAssociation  joins select where where where where group ","PaperTrail VersionAssociation  joins select where where where where "," transaction_id ","PaperTrail VersionAssociation  joins select where where where ","assoc class_name ","PaperTrail VersionAssociation  joins select where where ","model id ","PaperTrail VersionAssociation  joins select where ","assoc foreign_key ","PaperTrail VersionAssociation  joins select ","PaperTrail VersionAssociation  joins ","model class version_association_name ","assoc klass paper_trail_enabled_for_model? ","assoc klass ","associations each ","model class paper_trail_version_class table_name ","Array  new  compact ","versions delete  reify ","versions delete s values map ","versions delete s values ","versions delete  event == ","versions delete  event ","(lvasgn :versions delete \n  (send\n    (lvar :versions delete s) :delete\n    (send\n      (lvar :c) :id))) nil? ","versions delete s delete ","Array  new  map! ","model class paper_trail_versions delete _class where inject ","model class paper_trail_versions delete _class where ","model class paper_trail_versions delete _class ","model class versions delete _association_name ","model class paper_trail_versions delete _class table_name "]}," PaperTrail VersionConcern reify_has_manys":{"type":"method","name":"reify_has_manys","children":[],"call":[" reify_has_many_through "," reify_has_many_directly ","assoc options [] ","assoc options ","model class reflect_on_all_associations partition ","model class reflect_on_all_associations ","model class "]}," PaperTrail Model InstanceMethods ignored_attr_has_changed?":{"type":"method","name":"ignored_attr_has_changed?","children":[],"call":["(send\n  (send nil :changed) :&\n  (lvar :ignored)) any? "," changed & "," changed ","ignored any? "," paper_trail_options [] + "," paper_trail_options [] "," paper_trail_options "," paper_trail ignored_attr_has_changed? "," paper_trail "," class paper_trail_deprecate "," class ","(send\n  (send nil :changed) :&\n  (lvar : paper_trail_options [] + )) any? "," paper_trail_options [] +  any? "," paper_trail  paper_trail_options [] + _attr_has_changed? "]}," PaperTrail Model InstanceMethods attributes_before_change":{"type":"method","name":"attributes_before_change","children":[],"call":["prev []= ","enums [] [] ","enums [] ","(send\n  (send nil :changed_attributes) :select) each "," class column_names include? "," class column_names "," class "," changed_attributes select "," changed_attributes "," defined_enums "," respond_to? "," attributes tap "," attributes "," attributes merge "," paper_trail attributes_before_change "," paper_trail "," class paper_trail_deprecate "," defined_enums  [] [] "," defined_enums  [] "," defined_ defined_enums  "," paper_trail attributes_enums [] [] _change "]}," PaperTrail Model InstanceMethods reset_transaction_id":{"type":"method","name":"reset_transaction_id","children":[],"call":["PaperTrail  transaction_id= ","PaperTrail  clear_transaction_id "," ActiveSupport Deprecation  warn "]}," PaperTrail Model InstanceMethods set_transaction_id":{"type":"method","name":"set_transaction_id","children":[],"call":["version save ","version transaction_id= ","version id ","PaperTrail  transaction_id= ","PaperTrail  transaction_id nil? ","PaperTrail  transaction_id ","PaperTrail  transaction? "," class paper_trail_version_class column_names include? "," class paper_trail_version_class column_names "," class paper_trail_version_class "," class "]}," PaperTrail Model InstanceMethods save_associations":{"type":"method","name":"save_associations","children":[],"call":["PaperTrail VersionAssociation  create ","assoc_version_args has_key? ","assoc_version_args merge! "," send ","assoc foreign_key ","assoc klass paper_trail_enabled_for_model? ","assoc klass ","associated_record id ","associated_record class paper_trail_enabled_for_model? ","associated_record class ","assoc name ","assoc foreign_type ","assoc options [] ","assoc options ","version id "," class reflect_on_all_associations each "," class reflect_on_all_associations "," class ","PaperTrail  config track_associations? ","PaperTrail  config ","PaperTrail VersionAssociation  table_exists? "," save_associations_has_and_belongs_to_many "," save_associations_belongs_to "," paper_trail save_associations "," paper_trail "," class paper_trail_deprecate "," send  id "," send  class paper_trail_enabled_for_model? "," send  class "]}," PaperTrail Model InstanceMethods will_record_after_update?":{"type":"method","name":"will_record_after_update?","children":[],"call":["on include? ","on nil? "," paper_trail_options [] "," paper_trail_options "," paper_trail_options []  include? "," paper_trail_options []  nil? "," paper_trail_opti paper_trail_options [] s [] "," paper_trail_opti paper_trail_options [] s "]}," PaperTrail Model InstanceMethods appear_as_new_record":{"type":"method","name":"appear_as_new_record","children":[],"call":[" instance_eval "," paper_trail appear_as_new_record "," paper_trail "," class paper_trail_deprecate "," class "]}," PaperTrail Model InstanceMethods clear_rolled_back_versions":{"type":"method","name":"clear_rolled_back_versions","children":[],"call":[" send reload "," send "," class versions_association_name "," class "," send reset "," paper_trail clear_rolled_back_versions "," paper_trail "," class paper_trail_deprecate "]}," PaperTrail Model ClassMethods unserialize_attribute_changes_for_paper_trail!":{"type":"method","name":"unserialize_attribute_changes_for_paper_trail!","children":[],"call":["changes []= ","coder load ","changes [] ","PaperTrail  serializer ","coder respond_to? ","changes key? "," serialized_attributes each "," serialized_attributes "," paper_trail_version_class object_changes_col_is_json? "," paper_trail_version_class ","PaperTrail  serializer  load ","PaperTrail  serializer  respond_to? "]}," PaperTrail Model ClassMethods serialize_attribute_changes_for_paper_trail!":{"type":"method","name":"serialize_attribute_changes_for_paper_trail!","children":[],"call":["changes []= ","coder dump ","changes [] ","PaperTrail  serializer ","coder respond_to? ","changes key? "," serialized_attributes each "," serialized_attributes "," paper_trail_version_class object_changes_col_is_json? "," paper_trail_version_class ","PaperTrail  serializer  dump ","PaperTrail  serializer  respond_to? "]}," PaperTrail Model ClassMethods unserialize_attributes_for_paper_trail!":{"type":"method","name":"unserialize_attributes_for_paper_trail!","children":[],"call":["attributes []= ","coder load ","attributes [] ","PaperTrail  serializer ","coder respond_to? ","attributes key? "," serialized_attributes each "," serialized_attributes "," paper_trail_version_class object_col_is_json? "," paper_trail_version_class ","PaperTrail  serializer  load ","PaperTrail  serializer  respond_to? "]}," PaperTrail Model ClassMethods serialize_attributes_for_paper_trail!":{"type":"method","name":"serialize_attributes_for_paper_trail!","children":[],"call":["attributes []= ","coder dump ","attributes [] ","PaperTrail  serializer ","coder respond_to? ","attributes key? "," serialized_attributes each "," serialized_attributes "," paper_trail_version_class object_col_is_json? "," paper_trail_version_class ","PaperTrail  serializer  dump ","PaperTrail  serializer  respond_to? "]}," PaperTrail Config track_associations":{"type":"method","name":"track_associations","children":[],"call":["PaperTrail VersionAssociation  table_exists? ","@track_associations nil? "]}," PaperTrail Config serialized_attributes=":{"type":"method","name":"serialized_attributes=","children":[],"call":[" ActiveSupport Deprecation  warn ","ActiveRecord 5.0 deprecated `serialized_attributes`  + + ","ActiveRecord 5.0 deprecated `serialized_attributes`  + "," ActiveRecord VERSION MAJOR  >= "," warn ","DEPRECATED: ActiveRecord 5.0 deprecated `serialized_attributes`  + + ","DEPRECATED: ActiveRecord 5.0 deprecated `serialized_attributes`  + ","ActiveSupport Deprecation  warn ","PaperTrail.config.serialized_attributes= is deprecated without  + "]}," CreateVersionAssociations down":{"type":"method","name":"down","children":[],"call":[]}," CreateVersionAssociations up":{"type":"method","name":"up","children":[],"call":[]}," AddTransactionIdColumnToVersions down":{"type":"method","name":"down","children":[],"call":[]}," AddTransactionIdColumnToVersions up":{"type":"method","name":"up","children":[],"call":[]}," PaperTrail Reifier versions_by_id":{"type":"method","name":"versions_by_id","children":[],"call":["acc merge! ","v item_id ","klass paper_trail_version_class where inject ","klass paper_trail_version_class where ","klass paper_trail_version_class ","a merge! ","e item_id ","klass paper_trail version_class where inject ","klass paper_trail version_class where ","klass paper_trail version_class ","klass paper_trail "]}," PaperTrail Reifier reify_has_many_through":{"type":"method","name":"reify_has_many_through","children":[],"call":["model send proxy_association target= ","model send proxy_association ","model send ","assoc name "," prepare_array_for_has_many ","Array  new ","assoc klass where ","assoc klass primary_key ","assoc klass "," versions_by_id ","assoc klass paper_trail_version_class select where where where group to_sql ","assoc klass paper_trail_version_class select where where where group ","assoc klass paper_trail_version_class select where where where ","options [] ","assoc klass paper_trail_version_class select where where ","assoc klass paper_trail_version_class select where ","assoc class_name ","assoc klass paper_trail_version_class select ","assoc klass paper_trail_version_class ","through_model send ","assoc association_foreign_key ","through_collection map ","(send\n  (lvar :through_collection) :map) flatten ","through_model send to_a ","assoc name to_sym "," reify_has_manys ","through_collection each ","through_collection present? ","assoc source_reflection belongs_to? ! ","assoc source_reflection belongs_to? ","assoc source_reflection ","assoc options [] ","assoc options ","assoc klass paper_trail_enabled_for_model? ","associations each "," hmt_collection "," each_enabled_association ","  versions_by_id _by_id ","through_Array  new  map ","through_(send\n  (lvar :through_collection) :map) flatten  map ","through_ hmt_collection  map ","model send  map ","(send\n  (lvar :through_Array  new ) :map) flatten ","(send\n  (lvar :through_(send\n  (lvar :through_collection) :map) flatten ) :map) flatten ","(send\n  (lvar :through_ hmt_collection ) :map) flatten ","(send\n  (lvar :model send ) :map) flatten ","through_Array  new  each ","through_(send\n  (lvar :through_collection) :map) flatten  each ","through_ hmt_collection  each ","model send  each ","through_Array  new  present? ","through_(send\n  (lvar :through_collection) :map) flatten  present? ","through_ hmt_collection  present? ","model send  present? "," hmt_Array  new  "," hmt_(send\n  (lvar :through_collection) :map) flatten  "," hmt_ hmt_collection  "]}," PaperTrail Reifier reify_has_many_directly":{"type":"method","name":"reify_has_many_directly","children":[],"call":["model send proxy_association target= ","model send proxy_association ","model send ","assoc name "," prepare_array_for_has_many ","Array  new "," versions_by_id ","model class ","PaperTrail VersionAssociation  joins select where where where where group to_sql ","PaperTrail VersionAssociation  joins select where where where where group ","PaperTrail VersionAssociation  joins select where where where where ","options [] ","PaperTrail VersionAssociation  joins select where where where ","assoc class_name ","PaperTrail VersionAssociation  joins select where where ","model id ","PaperTrail VersionAssociation  joins select where ","assoc foreign_key ","PaperTrail VersionAssociation  joins select ","PaperTrail VersionAssociation  joins ","model class version_association_name ","assoc klass paper_trail_enabled_for_model? ","assoc klass ","associations each ","model class paper_trail_version_class table_name ","model class paper_trail_version_class ","model send reload "," each_enabled_association ","model class paper_trail version_class table_name ","model class paper_trail version_class ","model class paper_trail ","  versions_by_id _by_id "]}," PaperTrail Reifier reify_has_manys":{"type":"method","name":"reify_has_manys","children":[],"call":[" reify_has_many_through "," reify_has_many_directly ","assoc options [] ","assoc options ","model class reflect_on_all_associations partition ","model class reflect_on_all_associations ","model class "," reify_has_many_through_associations "," reify_has_many_associations "]}," PaperTrail Reifier reify_has_ones":{"type":"method","name":"reify_has_ones","children":[],"call":["model send ","assoc name ","model appear_as_new_record ","version reify ","options merge ","model send mark_for_destruction ","options [] ","version event == ","version event ","model class paper_trail_version_class joins where where where where order first ","model class paper_trail_version_class joins where where where where order ","model class paper_trail_version_class joins where where where where ","model class paper_trail_version_class joins where where where ","assoc class_name ","model class paper_trail_version_class joins where where ","model id ","model class paper_trail_version_class joins where ","assoc foreign_key ","model class paper_trail_version_class joins ","model class paper_trail_version_class ","model class ","assoc klass paper_trail_enabled_for_model? ","assoc klass ","model class reflect_on_all_associations each ","model class reflect_on_all_associations ","model class paper_trail_version_class table_name "," without_persisting "," load_version_for_has_one "," each_enabled_association ","model paper_trail appear_as_new_record ","model paper_trail ","model class paper_trail_version_class joins where where where where order first  reify "," load_version_for_has_one  reify ","model class paper_trail_version_class joins where where where where order first  event == "," load_version_for_has_one  event == ","model class paper_trail_version_class joins where where where where order first  event "," load_version_for_has_one  event ","model class paper_trail_model class paper_trail_version_class joins where where where where order first _class joins where where where where order first ","model class paper_trail_ load_version_for_has_one _class joins where where where where order first ","model class paper_trail_model class paper_trail_version_class joins where where where where order first _class joins where where where where order ","model class paper_trail_ load_version_for_has_one _class joins where where where where order ","model class paper_trail_model class paper_trail_version_class joins where where where where order first _class joins where where where where ","model class paper_trail_ load_version_for_has_one _class joins where where where where ","model class paper_trail_model class paper_trail_version_class joins where where where where order first _class joins where where where ","model class paper_trail_ load_version_for_has_one _class joins where where where ","model class paper_trail_model class paper_trail_version_class joins where where where where order first _class joins where where ","model class paper_trail_ load_version_for_has_one _class joins where where ","model class paper_trail_model class paper_trail_version_class joins where where where where order first _class joins where ","model class paper_trail_ load_version_for_has_one _class joins where ","model class paper_trail_model class paper_trail_version_class joins where where where where order first _class joins ","model class paper_trail_ load_version_for_has_one _class joins ","model class paper_trail_model class paper_trail_version_class joins where where where where order first _class ","model class paper_trail_ load_version_for_has_one _class ","model class reflect_on_all_model class reflect_on_all_associations  each ","model class reflect_on_all_model class reflect_on_all_associations  ","model class paper_trail_model class paper_trail_version_class joins where where where where order first _class table_name ","model class paper_trail_ load_version_for_has_one _class table_name "," load_model class paper_trail_version_class joins where where where where order first _for_has_one "," load_ load_version_for_has_one _for_has_one "]}," PaperTrail Reifier prepare_array_for_has_many":{"type":"method","name":"prepare_array_for_has_many","children":[],"call":["array compact! ","array concat ","v reify ","options merge ","versions values map ","versions values ","version reify ","r mark_for_destruction ","record tap ","options [] ","version event == ","version event ","(lvasgn :version\n  (send\n    (lvar :versions) :delete\n    (send\n      (lvar :record) :id))) nil? ","versions delete ","record id ","array map! ","versions delete s values map ","versions delete s values ","versions delete  reify ","versions delete  event == ","versions delete  event ","(lvasgn :versions delete \n  (send\n    (lvar :versions delete s) :delete\n    (send\n      (lvar :record) :id))) nil? ","versions delete s delete "]}," PaperTrail RecordHistory timestamp":{"type":"method","name":"timestamp","children":[],"call":[" table [] ","PaperTrail  timestamp_field "," table "]}," PaperTrail Model InstanceMethods pt_recordable_object_changes":{"type":"method","name":"pt_recordable_object_changes","children":[],"call":["PaperTrail  serializer dump "," changes_for_paper_trail ","PaperTrail  serializer "," class paper_trail_version_class object_changes_col_is_json? "," class paper_trail_version_class "," class "," paper_trail recordable_object_changes "," paper_trail "," class paper_trail_deprecate "]}," PaperTrail Model InstanceMethods pt_recordable_object":{"type":"method","name":"pt_recordable_object","children":[],"call":["PaperTrail  serializer dump ","PaperTrail  serializer "," class paper_trail_version_class object_col_is_json? "," class paper_trail_version_class "," class "," object_attrs_for_paper_trail "," attributes_before_change "," paper_trail recordable_object "," paper_trail "," class paper_trail_deprecate ","  object_attrs_for_paper_trail _for_paper_trail "]}," PaperTrail Model InstanceMethods pt_record_object_changes?":{"type":"method","name":"pt_record_object_changes?","children":[],"call":[" class paper_trail_version_class column_names include? "," class paper_trail_version_class column_names "," class paper_trail_version_class "," class "," paper_trail_options [] "," paper_trail_options "," paper_trail record_object_changes? "," paper_trail "," class paper_trail_deprecate "]}," PaperTrail Model ClassMethods paper_trail_on_create":{"type":"method","name":"paper_trail_on_create","children":[],"call":[" paper_trail_options [] << "," paper_trail_options [] "," paper_trail_options "," paper_trail_options [] include? "," after_create "," paper_trail on_create "," paper_trail "," paper_trail_deprecate "]}," PaperTrail Model ClassMethods paper_trail_on_update":{"type":"method","name":"paper_trail_on_update","children":[],"call":[" paper_trail_options [] << "," paper_trail_options [] "," paper_trail_options "," paper_trail_options [] include? "," after_update "," before_save "," paper_trail on_update "," paper_trail "," paper_trail_deprecate "]}," PaperTrail Model ClassMethods paper_trail_on_destroy":{"type":"method","name":"paper_trail_on_destroy","children":[],"call":[" paper_trail_options [] << "," paper_trail_options [] "," paper_trail_options "," paper_trail_options [] include? "," send "," fail ","(str \"after\") include? ","recording_order to_s "," ActiveSupport Deprecation  warn ","paper_trail_on_destroy(:after) is incompatible with ActiveRecord  + + ","paper_trail_on_destroy(:after) is incompatible with ActiveRecord  + "," ActiveRecord Base  belongs_to_required_by_default ","Gem Version  new release >= ","Gem Version  new ","Gem Version  new release ","recording_order to_s == ","Gem Version  new >= ","recording_order == "," raise "," paper_trail on_destroy "," paper_trail "," paper_trail_deprecate "]}," PaperTrail Model ClassMethods setup_callbacks_from_options":{"type":"method","name":"setup_callbacks_from_options","children":[],"call":[" send ","options_on each "]}," PaperTrail Model ClassMethods setup_model_for_paper_trail":{"type":"method","name":"setup_model_for_paper_trail","children":[],"call":[" after_rollback "," after_commit "," has_many "," paper_trail_version_class timestamp_sort_order "," paper_trail_version_class "," version_class_name "," versions_association_name "," order "," model timestamp_sort_order "," model "," lambda "," ActiveRecord VERSION MAJOR  >= "," attr_accessor "," versions_association_name= ","options [] "," class_attribute "," paper_trail_options []= "," paper_trail_options "," paper_trail_options [] nil? "," paper_trail_options [] ","attr to_s ","attr stringify_keys ","attr is_a? ","(send\n  (send nil :paper_trail_options) :[]\n  (lvar :k)) flatten compact map ","(send\n  (send nil :paper_trail_options) :[]\n  (lvar :k)) flatten compact ","(send\n  (send nil :paper_trail_options) :[]\n  (lvar :k)) flatten ","(sym :ignore) each "," paper_trail_options= ","options dup "," version_class_name= "," version_association_name "," version_association_name= "," send "," setup_paper_trail_options "," ActiveRecord VERSION STRING  < "]}," PaperTrail Config serialized_attributes":{"type":"method","name":"serialized_attributes","children":[],"call":["ActiveSupport Deprecation  warn ","PaperTrail.config.serialized_attributes is deprecated without  + "]}," PaperTrail AttributesSerialization alter_attribute_changes_for_paper_trail!":{"type":"method","name":"alter_attribute_changes_for_paper_trail!","children":[],"call":["changes []= ","type send "," Array map "," Array "," type_for_attribute ","changes clone each ","changes clone "," paper_trail_version_class object_changes_col_is_json? "," paper_trail_version_class ","serializer send ","CastedAttributeSerializer  new "," type_for_attribute  send ","  type_for_attribute _for_attribute ","CastedAttributeSerializer  new  send "]}," PaperTrail AttributesSerialization unserialize_attribute_changes_for_paper_trail!":{"type":"method","name":"unserialize_attribute_changes_for_paper_trail!","children":[],"call":[" alter_attribute_changes_for_paper_trail! "]}," PaperTrail AttributesSerialization serialize_attribute_changes_for_paper_trail!":{"type":"method","name":"serialize_attribute_changes_for_paper_trail!","children":[],"call":[" alter_attribute_changes_for_paper_trail! "]}," PaperTrail AttributesSerialization alter_attributes_for_paper_trail!":{"type":"method","name":"alter_attributes_for_paper_trail!","children":[],"call":["attributes []= "," type_for_attribute send "," type_for_attribute ","attributes each "," paper_trail_version_class object_col_is_json? "," paper_trail_version_class ","serializer send ","CastedAttributeSerializer  new ","CastedAttributeSerializer  new  send "]}," PaperTrail AttributesSerialization unserialize_attributes_for_paper_trail!":{"type":"method","name":"unserialize_attributes_for_paper_trail!","children":[],"call":[" alter_attributes_for_paper_trail! "]}," PaperTrail AttributesSerialization serialize_attributes_for_paper_trail!":{"type":"method","name":"serialize_attributes_for_paper_trail!","children":[],"call":[" alter_attributes_for_paper_trail! "]}," PaperTrail AttributesSerialization serialized_attribute_types":{"type":"method","name":"serialized_attribute_types","children":[],"call":["Hash  [] ","SerializedAttribute  new "," serialized_attributes map "," serialized_attributes "]}," PaperTrail AttributesSerialization type_for_attribute":{"type":"method","name":"type_for_attribute","children":[],"call":[" serialized_attribute_types [] ","attr_name to_s "," serialized_attribute_types "]}," PaperTrail AttributesSerialization SerializedAttribute type_cast_from_database":{"type":"method","name":"type_cast_from_database","children":[],"call":["@coder load "]}," PaperTrail AttributesSerialization SerializedAttribute type_cast_for_database":{"type":"method","name":"type_cast_for_database","children":[],"call":["@coder dump "]}," PaperTrail AttributesSerialization SerializedAttribute initialize":{"type":"method","name":"initialize","children":[],"call":["PaperTrail  serializer ","coder respond_to? "]}," PaperTrail AttributesSerialization NoOpAttribute type_cast_from_database":{"type":"method","name":"type_cast_from_database","children":[],"call":[]}," PaperTrail AttributesSerialization NoOpAttribute type_cast_for_database":{"type":"method","name":"type_cast_for_database","children":[],"call":[]}," PaperTrail Serializers YAML yaml_engine_id":{"type":"method","name":"yaml_engine_id","children":[],"call":[" YAML  == "," YAML ENGINE  yamler == "," YAML ENGINE  yamler "]}," PaperTrail Reifier without_persisting":{"type":"method","name":"without_persisting","children":[],"call":["record class suppress ","record class ","record class respond_to? "]}," PaperTrail Reifier reify_has_and_belongs_to_many":{"type":"method","name":"reify_has_and_belongs_to_many","children":[],"call":["model send proxy_association target= ","assoc klass where first ","assoc klass where ","assoc klass primary_key ","assoc klass ","version reify ","options merge "," load_version_for_habtm ","options [] ","version_ids map ","model send proxy_association ","model send ","assoc name ","PaperTrail VersionAssociation  where where pluck ","PaperTrail VersionAssociation  where where ","PaperTrail VersionAssociation  where ","model class paper_trail_save_join_tables include? ","model class paper_trail_save_join_tables ","model class ","assoc klass paper_trail_enabled_for_model? ","model class reflect_on_all_associations each ","model class reflect_on_all_associations ","assoc klass paper_trail enabled? ","assoc klass paper_trail "," load_version_for_habtm  reify "," load_ load_version_for_habtm _for_habtm "," load_version_for_habtm _ids map ","PaperTrail VersionAssociation  where where pluck  map "]}," PaperTrail Reifier reify_belongs_tos":{"type":"method","name":"reify_belongs_tos","children":[],"call":["model send ","(begin\n  (send\n    (lvar :assoc) :name)) to_sym ","assoc name ","version reify ","options merge ","assoc klass where first ","assoc klass where ","assoc klass primary_key ","assoc klass ","version nil? ","assoc klass paper_trail_version_class where where where order limit first ","assoc klass paper_trail_version_class where where where order limit ","assoc klass paper_trail_version_class where where where order ","assoc klass paper_trail_version_class where where where ","options [] ","assoc klass paper_trail_version_class where where ","assoc klass paper_trail_version_class where ","assoc class_name ","assoc klass paper_trail_version_class ","assoc association_foreign_key "," each_enabled_association ","model class reflect_on_all_associations ","model class ","assoc klass paper_trail version_class where where where order limit first ","assoc klass paper_trail version_class where where where order limit ","assoc klass paper_trail version_class where where where order ","assoc klass paper_trail version_class where where where ","assoc klass paper_trail version_class where where ","assoc klass paper_trail version_class where ","assoc klass paper_trail version_class ","assoc klass paper_trail ","assoc klass paper_trail_version_class where where where order limit first  reify ","assoc klass paper_trail version_class where where where order limit first  reify ","assoc klass paper_trail_version_class where where where order limit first  nil? ","assoc klass paper_trail version_class where where where order limit first  nil? ","assoc klass paper_trail_assoc klass paper_trail_version_class where where where order limit first _class where where where order limit first ","assoc klass paper_trail_assoc klass paper_trail version_class where where where order limit first _class where where where order limit first ","assoc klass paper_trail_assoc klass paper_trail_version_class where where where order limit first _class where where where order limit ","assoc klass paper_trail_assoc klass paper_trail version_class where where where order limit first _class where where where order limit ","assoc klass paper_trail_assoc klass paper_trail_version_class where where where order limit first _class where where where order ","assoc klass paper_trail_assoc klass paper_trail version_class where where where order limit first _class where where where order ","assoc klass paper_trail_assoc klass paper_trail_version_class where where where order limit first _class where where where ","assoc klass paper_trail_assoc klass paper_trail version_class where where where order limit first _class where where where ","assoc klass paper_trail_assoc klass paper_trail_version_class where where where order limit first _class where where ","assoc klass paper_trail_assoc klass paper_trail version_class where where where order limit first _class where where ","assoc klass paper_trail_assoc klass paper_trail_version_class where where where order limit first _class where ","assoc klass paper_trail_assoc klass paper_trail version_class where where where order limit first _class where ","assoc klass paper_trail_assoc klass paper_trail_version_class where where where order limit first _class ","assoc klass paper_trail_assoc klass paper_trail version_class where where where order limit first _class ","model class reflect_on_all_model class reflect_on_all_associations  ","assoc klass paper_trail assoc klass paper_trail_version_class where where where order limit first _class where where where order limit first ","assoc klass paper_trail assoc klass paper_trail version_class where where where order limit first _class where where where order limit first ","assoc klass paper_trail assoc klass paper_trail_version_class where where where order limit first _class where where where order limit ","assoc klass paper_trail assoc klass paper_trail version_class where where where order limit first _class where where where order limit ","assoc klass paper_trail assoc klass paper_trail_version_class where where where order limit first _class where where where order ","assoc klass paper_trail assoc klass paper_trail version_class where where where order limit first _class where where where order ","assoc klass paper_trail assoc klass paper_trail_version_class where where where order limit first _class where where where ","assoc klass paper_trail assoc klass paper_trail version_class where where where order limit first _class where where where ","assoc klass paper_trail assoc klass paper_trail_version_class where where where order limit first _class where where ","assoc klass paper_trail assoc klass paper_trail version_class where where where order limit first _class where where ","assoc klass paper_trail assoc klass paper_trail_version_class where where where order limit first _class where ","assoc klass paper_trail assoc klass paper_trail version_class where where where order limit first _class where ","assoc klass paper_trail assoc klass paper_trail_version_class where where where order limit first _class ","assoc klass paper_trail assoc klass paper_trail version_class where where where order limit first _class "]}," PaperTrail Reifier reify_associations":{"type":"method","name":"reify_associations","children":[],"call":[" reify_has_and_belongs_to_many ","version transaction_id ","options [] "," reify_has_manys "," reify_belongs_tos "," reify_has_ones "," reify_habtm_associations "," reify_belongs_to_associations "," reify_has_one_associations "]}," PaperTrail Reifier load_version_for_has_one":{"type":"method","name":"load_version_for_has_one","children":[],"call":["model class paper_trail_version_class joins where where where where order first ","model class paper_trail_version_class joins where where where where order ","model class paper_trail_version_class joins where where where where ","model class paper_trail_version_class joins where where where ","assoc class_name ","model class paper_trail_version_class joins where where ","model id ","model class paper_trail_version_class joins where ","assoc foreign_key ","model class paper_trail_version_class joins ","model class paper_trail_version_class ","model class ","model class paper_trail_version_class table_name ","model class paper_trail version_class joins where where where where order first ","model class paper_trail version_class joins where where where where order ","model class paper_trail version_class joins where where where where ","model class paper_trail version_class joins where where where ","model class paper_trail version_class joins where where ","model class paper_trail version_class joins where ","model class paper_trail version_class joins ","model class paper_trail version_class ","model class paper_trail ","model class paper_trail version_class table_name "]}," PaperTrail Reifier load_version_for_habtm":{"type":"method","name":"load_version_for_habtm","children":[],"call":["assoc klass paper_trail_version_class where where where order limit first ","assoc klass paper_trail_version_class where where where order limit ","assoc klass paper_trail_version_class where where where order ","assoc klass paper_trail_version_class where where where ","assoc klass paper_trail_version_class where where ","assoc klass paper_trail_version_class where ","assoc klass name ","assoc klass ","assoc klass paper_trail_version_class ","assoc klass paper_trail version_class where where where order limit first ","assoc klass paper_trail version_class where where where order limit ","assoc klass paper_trail version_class where where where order ","assoc klass paper_trail version_class where where where ","assoc klass paper_trail version_class where where ","assoc klass paper_trail version_class where ","assoc klass paper_trail version_class ","assoc klass paper_trail "]}," PaperTrail Reifier hmt_collection_through_belongs_to":{"type":"method","name":"hmt_collection_through_belongs_to","children":[],"call":[" prepare_array_for_has_many ","Array  new ","assoc klass where ","assoc klass primary_key ","assoc klass "," versions_by_id ","assoc klass paper_trail_version_class select where where where group to_sql ","assoc klass paper_trail_version_class select where where where group ","assoc klass paper_trail_version_class select where where where ","options [] ","assoc klass paper_trail_version_class select where where ","assoc klass paper_trail_version_class select where ","assoc class_name ","assoc klass paper_trail_version_class select ","assoc klass paper_trail_version_class ","through_model send ","assoc source_reflection foreign_key ","assoc source_reflection ","through_collection map ","assoc klass paper_trail version_class select where where where group to_sql ","assoc klass paper_trail version_class select where where where group ","assoc klass paper_trail version_class select where where where ","assoc klass paper_trail version_class select where where ","assoc klass paper_trail version_class select where ","assoc klass paper_trail version_class select ","assoc klass paper_trail version_class ","assoc klass paper_trail "," load_versions_for_hmt_association ","  versions_by_id _by_id ","  load_versions_for_hmt_association _by_id ","through_Array  new  map "," load_ versions_by_id _for_hmt_association "," load_ load_versions_for_hmt_association _for_hmt_association "]}," PaperTrail Reifier hmt_collection_through_has_many":{"type":"method","name":"hmt_collection_through_has_many","children":[],"call":["through_model public_send to_a ","through_model public_send ","assoc name to_sym ","assoc name ","through_collection flat_map "," reify_has_manys ","through_collection each "]}," PaperTrail Reifier hmt_collection":{"type":"method","name":"hmt_collection","children":[],"call":[" hmt_collection_through_belongs_to "," hmt_collection_through_has_many ","through_collection present? ","assoc source_reflection belongs_to? ! ","assoc source_reflection belongs_to? ","assoc source_reflection "]}," PaperTrail Reifier each_enabled_association":{"type":"method","name":"each_enabled_association","children":[],"call":["assoc klass paper_trail_enabled_for_model? ","assoc klass ","associations each ","assoc klass paper_trail enabled? ","assoc klass paper_trail "," PaperTrail  request enabled_for_model? "," PaperTrail  request "]}," PaperTrail Model InstanceMethods update_transaction_id":{"type":"method","name":"update_transaction_id","children":[],"call":["version save ","version transaction_id= ","version id ","PaperTrail  transaction_id= ","PaperTrail  transaction_id nil? ","PaperTrail  transaction_id ","PaperTrail  transaction? "," class paper_trail_version_class column_names include? "," class paper_trail_version_class column_names "," class paper_trail_version_class "," class "]}," PaperTrail Model InstanceMethods save_associations_has_and_belongs_to_many":{"type":"method","name":"save_associations_has_and_belongs_to_many","children":[],"call":["PaperTrail VersionAssociation  create ","assoc_version_args merge ","assoc_ids each "," send to_a map + - ","@paper_trail_habtm try try ","@paper_trail_habtm try ","a name "," send to_a map + "," send to_a map "," send to_a "," send ","version id ","a klass paper_trail_enabled_for_model? ","a klass "," class paper_trail_save_join_tables include? "," class paper_trail_save_join_tables "," class "," class reflect_on_all_associations each "," class reflect_on_all_associations ","version transaction_id "," paper_trail save_associations_habtm "," paper_trail "," class paper_trail_deprecate "," send to_a map + -  each "]}," PaperTrail Model InstanceMethods save_associations_belongs_to":{"type":"method","name":"save_associations_belongs_to","children":[],"call":["PaperTrail VersionAssociation  create ","assoc_version_args key? ","assoc_version_args []= "," send ","assoc foreign_key ","assoc klass paper_trail_enabled_for_model? ","assoc klass ","associated_record id ","associated_record class paper_trail_enabled_for_model? ","associated_record class ","assoc name ","assoc foreign_type ","assoc options [] ","assoc options ","version id "," class reflect_on_all_associations each "," class reflect_on_all_associations "," class "," paper_trail save_associations_belongs_to "," paper_trail "," class paper_trail_deprecate "," send  id "," send  class paper_trail_enabled_for_model? "," send  class "]}," PaperTrail Model ClassMethods setup_paper_trail_options":{"type":"method","name":"setup_paper_trail_options","children":[],"call":[" paper_trail_options []= "," paper_trail_options "," paper_trail_options [] nil? "," paper_trail_options [] ","attr to_s ","attr stringify_keys ","attr is_a? ","(send\n  (send nil :paper_trail_options) :[]\n  (lvar :k)) flatten compact map ","(send\n  (send nil :paper_trail_options) :[]\n  (lvar :k)) flatten compact ","(send\n  (send nil :paper_trail_options) :[]\n  (lvar :k)) flatten ","(sym :ignore) each "," paper_trail_options= ","options dup "," class_attribute "]}," PaperTrail Model ClassMethods setup_callbacks_for_habtm":{"type":"method","name":"setup_callbacks_for_habtm","children":[],"call":[" send send "," send ","a name "," update_for_callback ","args last ","args [] "," lambda ","(send\n  (send nil :reflect_on_all_associations\n    (sym :has_and_belongs_to_many)) :reject) each "," paper_trail_options [] include? ","a name to_s "," paper_trail_options [] "," paper_trail_options "," reflect_on_all_associations reject "," reflect_on_all_associations ","Array  wrap "]}," PaperTrail Model ClassMethods update_for_callback":{"type":"method","name":"update_for_callback","children":[],"call":["assoc id ","model paper_trail_habtm [] [] ","model paper_trail_habtm [] ","model paper_trail_habtm ","model paper_trail_habtm reverse_merge! "]}," PaperTrail Rails Controller warn_about_not_setting_whodunnit":{"type":"method","name":"warn_about_not_setting_whodunnit","children":[],"call":[" warn ","(str \"            user_for_paper_trail is present, but whodunnit has not been set.\\n\") strip_heredoc ","@set_paper_trail_whodunnit_called ! "," PaperTrail  whodunnit blank? "," PaperTrail  whodunnit "," user_for_paper_trail present? "," user_for_paper_trail "," PaperTrail  enabled_for_controller? "," Kernel  warn ","(str \"            \") strip_heredoc ","(send\n  (send\n    (send\n      (self) :class) :instance_methods\n    (false)) :map) uniq first ","(send\n  (send\n    (send\n      (self) :class) :instance_methods\n    (false)) :map) uniq "," class instance_method source_location first "," class instance_method source_location "," class instance_method "," class "," class instance_methods map "," class instance_methods "," ActiveSupport Deprecation  warn "," PaperTrail   PaperTrail  enabled_for_controller? _for_controller? "]}," PaperTrail AttributesSerialization CastedAttributeSerializer defined_enums":{"type":"method","name":"defined_enums","children":[],"call":["@klass defined_enums ","@klass respond_to? "]}," PaperTrail AttributesSerialization CastedAttributeSerializer deserialize":{"type":"method","name":"deserialize","children":[],"call":[" defined_enums [] key "," defined_enums [] "," defined_enums "," apply_serialization "]}," PaperTrail AttributesSerialization CastedAttributeSerializer serialize":{"type":"method","name":"serialize","children":[],"call":[" apply_serialization "," defined_enums [] [] "," defined_enums [] "," defined_enums "]}," PaperTrail AttributesSerialization AbstractSerializer apply_serialization":{"type":"method","name":"apply_serialization","children":[],"call":["@klass type_for_attribute send ","@klass type_for_attribute "]}," PaperTrail AttributesSerialization AbstractSerializer initialize":{"type":"method","name":"initialize","children":[],"call":[]}," CreateVersions versions_table_options":{"type":"method","name":"versions_table_options","children":[],"call":["MYSQL_ADAPTERS  include? "," connection class name "," connection class "," connection "," mysql? "]}," PaperTrail Model InstanceMethods log_version_errors":{"type":"method","name":"log_version_errors","children":[],"call":["version logger warn ","(str \"Unable to create version for \") + ","version errors full_messages join ","version errors full_messages ","version errors "," id "," class name "," class ","version logger "]}," PaperTrail Model InstanceMethods add_transaction_id_to":{"type":"method","name":"add_transaction_id_to","children":[],"call":["data []= ","PaperTrail  transaction_id "," class paper_trail_version_class column_names include? "," class paper_trail_version_class column_names "," class paper_trail_version_class "," class "]}," PaperTrail AttributeSerializers LegacyActiveRecordShim serialized_attribute_types":{"type":"method","name":"serialized_attribute_types","children":[],"call":["Hash  [] ","SerializedAttribute  new "," serialized_attributes map "," serialized_attributes "]}," PaperTrail AttributeSerializers LegacyActiveRecordShim type_for_attribute":{"type":"method","name":"type_for_attribute","children":[],"call":[" serialized_attribute_types [] ","attr_name to_s "," serialized_attribute_types "]}," PaperTrail AttributeSerializers LegacyActiveRecordShim SerializedAttribute type_cast_from_database":{"type":"method","name":"type_cast_from_database","children":[],"call":["@coder load "]}," PaperTrail AttributeSerializers LegacyActiveRecordShim SerializedAttribute type_cast_for_database":{"type":"method","name":"type_cast_for_database","children":[],"call":["@coder dump "]}," PaperTrail AttributeSerializers LegacyActiveRecordShim SerializedAttribute initialize":{"type":"method","name":"initialize","children":[],"call":["PaperTrail  serializer ","coder respond_to? "]}," PaperTrail AttributeSerializers LegacyActiveRecordShim NoOpAttribute type_cast_from_database":{"type":"method","name":"type_cast_from_database","children":[],"call":[]}," PaperTrail AttributeSerializers LegacyActiveRecordShim NoOpAttribute type_cast_for_database":{"type":"method","name":"type_cast_for_database","children":[],"call":[]}," CreateVersions mysql?":{"type":"method","name":"mysql?","children":[],"call":["MYSQL_ADAPTERS  include? "," connection class name "," connection class "," connection "]}," CreateVersions item_type_options":{"type":"method","name":"item_type_options","children":[],"call":["opt []= "," mysql? "]}," PaperTrail clear_transaction_id":{"type":"method","name":"clear_transaction_id","children":[],"call":[" transaction_id= "," request clear_transaction_id "," request "," ActiveSupport Deprecation  warn "," caller "]}," PaperTrail RecordTrail update_transaction_id":{"type":"method","name":"update_transaction_id","children":[],"call":["version save ","version transaction_id= ","version id ","PaperTrail  transaction_id= ","PaperTrail  transaction_id nil? ","PaperTrail  transaction_id ","PaperTrail  transaction? ","@record class paper_trail version_class column_names include? ","@record class paper_trail version_class column_names ","@record class paper_trail version_class ","@record class paper_trail ","@record class ","PaperTrail  request transaction_id= ","PaperTrail  request ","PaperTrail  request transaction_id nil? ","PaperTrail  request transaction_id "]}," PaperTrail RecordTrail will_record_after_update?":{"type":"method","name":"will_record_after_update?","children":[],"call":["on include? ","on nil? ","@record paper_trail_options [] ","@record paper_trail_options ","@record paper_trail_options []  include? ","@record paper_trail_options []  nil? ","@record paper_trail_opti@record paper_trail_options [] s [] ","@record paper_trail_opti@record paper_trail_options [] s "]}," PaperTrail RecordTrail add_transaction_id_to":{"type":"method","name":"add_transaction_id_to","children":[],"call":["data []= ","PaperTrail  transaction_id ","@record class paper_trail version_class column_names include? ","@record class paper_trail version_class column_names ","@record class paper_trail version_class ","@record class paper_trail ","@record class ","PaperTrail  request transaction_id ","PaperTrail  request "]}," PaperTrail RecordTrail whodunnit":{"type":"method","name":"whodunnit","children":[],"call":["PaperTrail  whodunnit= ","PaperTrail  whodunnit "," raise "," block_given? "," PaperTrail  request "," ActiveSupport Deprecation  warn "," caller "]}," PaperTrail RecordTrail without_versioning":{"type":"method","name":"without_versioning","children":[],"call":["@record class paper_trail enable ","@record class paper_trail ","@record class ","@record send "," public_send "," respond_to? ","@record class paper_trail disable "," enabled_for_model? ","PaperTrail  request enable_model ","PaperTrail  request ","PaperTrail  request disable_model ","PaperTrail  request enabled_for_model? "," ActiveSupport Deprecation  warn "," caller "]}," PaperTrail RecordTrail touch_with_version":{"type":"method","name":"touch_with_version","children":[],"call":["@record save! ","@record record_update "," will_record_after_update? ","@record send ","attributes each ","attributes << "," raise ","@record persisted? "," record_update "," PaperTrail  request "," ActiveSupport Deprecation  warn "," caller ","@record send  each ","@record send  << "]}," PaperTrail RecordTrail save_associations_habtm":{"type":"method","name":"save_associations_habtm","children":[],"call":["PaperTrail VersionAssociation  create ","assoc_version_args merge ","assoc_ids each ","@record send to_a map + - ","@record paper_trail_habtm try try ","@record paper_trail_habtm try ","a name ","@record paper_trail_habtm ","@record send to_a map + ","@record send to_a map ","@record send to_a ","@record send ","version transaction_id ","a klass paper_trail enabled? ","a klass paper_trail ","a klass ","@record class paper_trail_save_join_tables include? ","@record class paper_trail_save_join_tables ","@record class ","@record class reflect_on_all_associations each ","@record class reflect_on_all_associations "," habtm_assoc_ids each "," habtm_assoc_ids "," save_habtm_association? ","@record send to_a map + -  each "," habtm_@record send to_a map + -  each "," habtm_@record send to_a map + -  "]}," PaperTrail RecordTrail save_associations_belongs_to":{"type":"method","name":"save_associations_belongs_to","children":[],"call":["PaperTrail VersionAssociation  create ","assoc_version_args key? ","assoc_version_args []= ","@record send ","assoc foreign_key ","assoc klass paper_trail enabled? ","assoc klass paper_trail ","assoc klass ","associated_record id ","associated_record class paper_trail enabled? ","associated_record class paper_trail ","associated_record class ","assoc name ","assoc foreign_type ","assoc options [] ","assoc options ","version id ","@record class reflect_on_all_associations each ","@record class reflect_on_all_associations ","@record class ","@record send  id ","@record send  class paper_trail enabled? ","@record send  class paper_trail ","@record send  class "]}," PaperTrail RecordTrail save_associations":{"type":"method","name":"save_associations","children":[],"call":[" save_associations_habtm "," save_associations_belongs_to ","PaperTrail  config track_associations? ","PaperTrail  config "," save_habtm_associations "," save_bt_associations "]}," PaperTrail RecordTrail recordable_object_changes":{"type":"method","name":"recordable_object_changes","children":[],"call":["PaperTrail  serializer dump "," changes ","PaperTrail  serializer ","@record class paper_trail version_class object_changes_col_is_json? ","@record class paper_trail version_class ","@record class paper_trail ","@record class ","PaperTrail  config object_changes_adapter diff ","PaperTrail  config object_changes_adapter ","PaperTrail  config "," PaperTrail  config object_changes_adapter diff  ","@record class paper_trail version_class object_PaperTrail  config object_changes_adapter diff _col_is_json? ","PaperTrail  config object_PaperTrail  config object_changes_adapter diff _adapter diff ","PaperTrail  config object_PaperTrail  config object_changes_adapter diff _adapter "]}," PaperTrail RecordTrail recordable_object":{"type":"method","name":"recordable_object","children":[],"call":["PaperTrail  serializer dump "," object_attrs_for_paper_trail ","PaperTrail  serializer ","@record class paper_trail version_class object_col_is_json? ","@record class paper_trail version_class ","@record class paper_trail ","@record class "]}," PaperTrail RecordTrail record_object_changes?":{"type":"method","name":"record_object_changes?","children":[],"call":["@record class paper_trail version_class column_names include? ","@record class paper_trail version_class column_names ","@record class paper_trail version_class ","@record class paper_trail ","@record class ","@record paper_trail_options [] ","@record paper_trail_options "]}," PaperTrail RecordTrail object_attrs_for_paper_trail":{"type":"method","name":"object_attrs_for_paper_trail","children":[],"call":["AttributeSerializers ObjectAttribute  new serialize ","AttributeSerializers ObjectAttribute  new ","@record class "," attributes_before_change except ","@record paper_trail_options [] ","@record paper_trail_options "," attributes_before_change "]}," PaperTrail RecordTrail notably_changed":{"type":"method","name":"notably_changed","children":[],"call":[" changed_and_not_ignored & "," changed_and_not_ignored ","only empty? ","only << ","condition call ","condition respond_to? ","obj each ","obj is_a? ","only delete_if ","@record paper_trail_options [] dup ","@record paper_trail_options [] ","@record paper_trail_options ","@record paper_trail_options [] dup  empty? ","@record paper_trail_options [] dup  << ","@record paper_trail_options [] dup  delete_if "]}," PaperTrail RecordTrail merge_metadata":{"type":"method","name":"merge_metadata","children":[],"call":["data merge ","PaperTrail  controller_info ","data []= ","@record send ","(begin\n  (lvar :v)) to_sym ","data [] != ","data [] ","@record has_attribute? ","@record respond_to? ","v is_a? ","v call ","v respond_to? ","@record paper_trail_options [] each ","@record paper_trail_options [] ","@record paper_trail_options "," attribute_in_previous_version "," attribute_changed_in_latest_version? "]}," PaperTrail RecordTrail ignored_attr_has_changed?":{"type":"method","name":"ignored_attr_has_changed?","children":[],"call":["(send\n  (send\n    (ivar :@record) :changed) :&\n  (lvar :ignored)) any? ","@record changed & ","@record changed ","ignored any? ","@record paper_trail_options [] + ","@record paper_trail_options [] ","@record paper_trail_options ","(send\n  (send nil :changed_in_latest_version) :&\n  (lvar :ignored)) any? "," changed_in_latest_version & "," changed_in_latest_version ","(send\n  (send\n    (ivar :@record) :changed) :&\n  (lvar :@record paper_trail_options [] + )) any? ","@record paper_trail_options [] +  any? ","(send\n  (send nil :changed_in_latest_version) :&\n  (lvar :@record paper_trail_options [] + )) any? "]}," PaperTrail RecordTrail enabled_for_model?":{"type":"method","name":"enabled_for_model?","children":[],"call":["@record class paper_trail enabled? ","@record class paper_trail ","@record class ","PaperTrail  request enabled_for_model? ","PaperTrail  request "," ActiveSupport Deprecation  warn "," caller "]}," PaperTrail RecordTrail changes":{"type":"method","name":"changes","children":[],"call":["notable_changes to_hash ","AttributeSerializers ObjectChangesAttribute  new serialize ","AttributeSerializers ObjectChangesAttribute  new ","@record class "," notably_changed include? ! "," notably_changed include? "," notably_changed ","@record changes delete_if ","@record changes "," changes_in_latest_version delete_if "," changes_in_latest_version "]}," PaperTrail RecordTrail changed_notably?":{"type":"method","name":"changed_notably?","children":[],"call":[" notably_changed any? "," notably_changed ","(send\n  (send nil :notably_changed) :-\n  (lvar :timestamps)) any? "," notably_changed - ","@record send map ","@record send "," ignored_attr_has_changed? ","(send\n  (send nil :notably_changed) :-\n  (lvar :@record send map )) any? "]}," PaperTrail RecordTrail changed_and_not_ignored":{"type":"method","name":"changed_and_not_ignored","children":[],"call":["@record changed - - ","@record changed - ","@record changed ","@record paper_trail_options [] ","@record paper_trail_options ","ignore << ","condition call ","condition respond_to? ","obj each ","obj is_a? ","ignore delete_if ","@record paper_trail_options [] dup "," changed_in_latest_version - - "," changed_in_latest_version - "," changed_in_latest_version ","@record paper_trail_options [] dup  << ","@record paper_trail_options [] dup  delete_if "]}," PaperTrail RecordTrail attributes_before_change":{"type":"method","name":"attributes_before_change","children":[],"call":["@record attributes merge ","@record attributes ","@record class column_names include? ","@record class column_names ","@record class ","@record changed_attributes select ","@record changed_attributes ","Hash  [] "," attribute_in_previous_version ","@record attributes map "]}," PaperTrail RecordTrail appear_as_new_record":{"type":"method","name":"appear_as_new_record","children":[],"call":["@record instance_eval "]}," PaperTrail ModelConfig update_habtm_state":{"type":"method","name":"update_habtm_state","children":[],"call":[" raise ","assoc id ","model paper_trail_habtm [] [] ","model paper_trail_habtm [] ","model paper_trail_habtm ","model paper_trail_habtm reverse_merge! ","state [] ","model paper_trail_habtm []  [] "]}," PaperTrail ModelConfig setup_transaction_callbacks":{"type":"method","name":"setup_transaction_callbacks","children":[],"call":[" paper_trail clear_rolled_back_versions "," paper_trail ","@model_class after_rollback ","PaperTrail  clear_transaction_id ","@model_class after_commit ","PaperTrail  request clear_transaction_id ","PaperTrail  request "]}," PaperTrail ModelConfig setup_callbacks_for_habtm":{"type":"method","name":"setup_callbacks_for_habtm","children":[],"call":["@model_class send send ","@model_class send ","a name "," update_habtm_state ","args last ","args [] "," lambda ","(send\n  (send\n    (ivar :@model_class) :reflect_on_all_associations\n    (sym :has_and_belongs_to_many)) :reject) each ","@model_class paper_trail_options [] include? ","a name to_s ","@model_class paper_trail_options [] ","@model_class paper_trail_options ","@model_class reflect_on_all_associations reject ","@model_class reflect_on_all_associations ","@model_class paper_trail_save_join_tables= ","Array  wrap ","@model_class class_attribute "," habtm_assocs_not_skipped each "," method "," habtm_assocs_not_skipped "]}," PaperTrail ModelConfig enabled?":{"type":"method","name":"enabled?","children":[],"call":[" PaperTrail  enabled_for_model? ","@model_class include? "," PaperTrail  request enabled_for_model? "," PaperTrail  request "," ActiveSupport Deprecation  warn "," caller "]}," PaperTrail ModelConfig enable":{"type":"method","name":"enable","children":[],"call":[" PaperTrail  enabled_for_model "," PaperTrail  request enable_model "," PaperTrail  request "," ActiveSupport Deprecation  warn "," caller "]}," PaperTrail ModelConfig disable":{"type":"method","name":"disable","children":[],"call":[" PaperTrail  enabled_for_model "," PaperTrail  request disable_model "," PaperTrail  request "," ActiveSupport Deprecation  warn "," caller "]}," PaperTrail Model ClassMethods paper_trail_deprecate":{"type":"method","name":"paper_trail_deprecate","children":[],"call":[" ActiveSupport Deprecation  warn "," caller "," format ","old_method nil? "]}," PaperTrail ModelConfig setup_habtm_change_callbacks":{"type":"method","name":"setup_habtm_change_callbacks","children":[],"call":["@model_class send send "," update_habtm_state ","args last ","args [] "," lambda ","@model_class send ","(str \"add\") each ","assoc name "]}," PaperTrail ModelConfig habtm_assocs_not_skipped":{"type":"method","name":"habtm_assocs_not_skipped","children":[],"call":["@model_class paper_trail_options [] include? ","a name to_s ","a name ","@model_class paper_trail_options [] ","@model_class paper_trail_options ","@model_class reflect_on_all_associations reject ","@model_class reflect_on_all_associations "]}," PaperTrail InstallGenerator create_initializer":{"type":"method","name":"create_initializer","children":[],"call":[" create_file "," options with_associations? ! ! "," options with_associations? ! "," options with_associations? "," options "]}," PaperTrail Config timestamp_field=":{"type":"method","name":"timestamp_field=","children":[],"call":[" ActiveSupport Deprecation  warn "," caller "]}," PaperTrail RecordTrail save_habtm_association?":{"type":"method","name":"save_habtm_association?","children":[],"call":["assoc klass paper_trail enabled? ","assoc klass paper_trail ","assoc klass ","@record class paper_trail_save_join_tables include? ","assoc name ","@record class paper_trail_save_join_tables ","@record class ","PaperTrail  request enabled_for_model? ","PaperTrail  request "]}," PaperTrail RecordTrail habtm_assoc_ids":{"type":"method","name":"habtm_assoc_ids","children":[],"call":["current + - ","current + ","@record paper_trail_habtm try try ","@record paper_trail_habtm try ","habtm_assoc name ","@record paper_trail_habtm ","@record send to_a map ","@record send to_a ","@record send ","@record send to_a map  + - ","@record send to_a map  + "]}," PaperTrail RecordTrail changes_in_latest_version":{"type":"method","name":"changes_in_latest_version","children":[],"call":["@record changes ","@record saved_changes "]}," PaperTrail RecordTrail changed_in_latest_version":{"type":"method","name":"changed_in_latest_version","children":[],"call":["@record changed ","@record saved_changes keys ","@record saved_changes "]}," PaperTrail RecordTrail attribute_in_previous_version":{"type":"method","name":"attribute_in_previous_version","children":[],"call":["@record attribute_was ","attr_name to_s ","@record attribute_before_last_save ","@record send ","@record attribute_in_database ","is_touch ! "]}," PaperTrail RecordTrail attribute_changed_in_latest_version?":{"type":"method","name":"attribute_changed_in_latest_version?","children":[],"call":["@record attribute_changed? ","attr_name to_s ","@record saved_change_to_attribute? "]}," PaperTrail Reifier reify_habtm_associations":{"type":"method","name":"reify_habtm_associations","children":[],"call":[" reify_habtm_association ","model class paper_trail_save_join_tables include? ","assoc name ","model class paper_trail_save_join_tables ","model class ","assoc klass paper_trail enabled? ","assoc klass paper_trail ","assoc klass ","model class reflect_on_all_associations each ","model class reflect_on_all_associations ","Reifiers HasAndBelongsToMany  reify "," PaperTrail  request enabled_for_model? "," PaperTrail  request "]}," PaperTrail Reifier reify_habtm_association":{"type":"method","name":"reify_habtm_association","children":[],"call":["model send proxy_association target= ","assoc klass where first ","assoc klass where ","assoc klass primary_key ","assoc klass ","version reify ","options merge "," load_version_for_habtm ","options [] ","version_ids map ","model send proxy_association ","model send ","assoc name ","PaperTrail VersionAssociation  where where pluck ","PaperTrail VersionAssociation  where where ","PaperTrail VersionAssociation  where "," load_version_for_habtm  reify "," load_ load_version_for_habtm _for_habtm "," load_version_for_habtm _ids map ","PaperTrail VersionAssociation  where where pluck  map "]}," PaperTrail Reifier reify_has_many_through_associations":{"type":"method","name":"reify_has_many_through_associations","children":[],"call":[" reify_has_many_through_association "," each_enabled_association ","Reifiers HasManyThrough  reify "]}," PaperTrail Reifier reify_has_many_through_association":{"type":"method","name":"reify_has_many_through_association","children":[],"call":["model send proxy_association target= ","model send proxy_association ","model send ","assoc name "," hmt_collection ","assoc options [] ","assoc options "," hmt_ hmt_collection  "]}," PaperTrail Reifier reify_has_many_associations":{"type":"method","name":"reify_has_many_associations","children":[],"call":[" reify_has_many_association "," each_enabled_association ","model class paper_trail version_class table_name ","model class paper_trail version_class ","model class paper_trail ","model class ","Reifiers HasMany  reify "]}," PaperTrail Reifier reify_has_many_association":{"type":"method","name":"reify_has_many_association","children":[],"call":["model send proxy_association target= ","model send proxy_association ","model send ","assoc name "," prepare_array_for_has_many ","Array  new ","model send reload "," load_versions_for_hm_association ","options [] "," load_ load_versions_for_hm_association _for_hm_association "]}," PaperTrail Reifier reify_belongs_to_associations":{"type":"method","name":"reify_belongs_to_associations","children":[],"call":[" reify_belongs_to_association "," each_enabled_association ","model class reflect_on_all_associations ","model class ","Reifiers BelongsTo  reify ","model class reflect_on_all_model class reflect_on_all_associations  "]}," PaperTrail Reifier reify_belongs_to_association":{"type":"method","name":"reify_belongs_to_association","children":[],"call":["model send ","(begin\n  (send\n    (lvar :assoc) :name)) to_sym ","assoc name "," load_record_for_bt_association "," load_version_for_bt_association ","options [] ","assoc association_foreign_key "," load_ load_record_for_bt_association _for_bt_association "," load_ load_version_for_bt_association _for_bt_association "]}," PaperTrail Reifier reify_has_one_associations":{"type":"method","name":"reify_has_one_associations","children":[],"call":[" reify_has_one_association "," each_enabled_association ","model class reflect_on_all_associations ","model class ","Reifiers HasOne  reify ","model class reflect_on_all_model class reflect_on_all_associations  "]}," PaperTrail Reifier reify_has_one_association":{"type":"method","name":"reify_has_one_association","children":[],"call":["model send ","assoc name "," without_persisting ","model paper_trail appear_as_new_record ","model paper_trail ","version reify ","options merge ","model send mark_for_destruction ","options [] ","version event == ","version event "," load_version_for_has_one "," load_version_for_has_one  reify "," load_version_for_has_one  event == "," load_version_for_has_one  event "," load_ load_version_for_has_one _for_has_one "]}," PaperTrail Reifier load_versions_for_hmt_association":{"type":"method","name":"load_versions_for_hmt_association","children":[],"call":[" versions_by_id ","assoc klass ","assoc klass paper_trail version_class select where where where group to_sql ","assoc klass paper_trail version_class select where where where group ","assoc klass paper_trail version_class select where where where ","assoc klass paper_trail version_class select where where ","assoc klass paper_trail version_class select where ","assoc class_name ","assoc klass paper_trail version_class select ","assoc klass paper_trail version_class ","assoc klass paper_trail "]}," PaperTrail Reifier load_versions_for_hm_association":{"type":"method","name":"load_versions_for_hm_association","children":[],"call":[" versions_by_id ","model class "," PaperTrail VersionAssociation  joins select where where where where group to_sql "," PaperTrail VersionAssociation  joins select where where where where group "," PaperTrail VersionAssociation  joins select where where where where "," PaperTrail VersionAssociation  joins select where where where ","assoc class_name "," PaperTrail VersionAssociation  joins select where where ","model id "," PaperTrail VersionAssociation  joins select where ","assoc foreign_key "," PaperTrail VersionAssociation  joins select "," PaperTrail VersionAssociation  joins ","model class version_association_name "]}," PaperTrail Reifier load_version_for_bt_association":{"type":"method","name":"load_version_for_bt_association","children":[],"call":["assoc klass paper_trail version_class where where where order limit first ","assoc klass paper_trail version_class where where where order limit ","assoc klass paper_trail version_class where where where order ","assoc klass paper_trail version_class where where where ","assoc klass paper_trail version_class where where ","assoc klass paper_trail version_class where ","assoc class_name ","assoc klass paper_trail version_class ","assoc klass paper_trail ","assoc klass "]}," PaperTrail Reifier load_record_for_bt_association":{"type":"method","name":"load_record_for_bt_association","children":[],"call":["version reify ","options merge ","assoc klass where first ","assoc klass where ","assoc klass primary_key ","assoc klass ","version nil? "]}," PaperTrail RecordTrail save_bt_association":{"type":"method","name":"save_bt_association","children":[],"call":["PaperTrail VersionAssociation  create ","assoc_version_args key? ","assoc_version_args []= ","@record send ","assoc foreign_key ","assoc klass paper_trail enabled? ","assoc klass paper_trail ","assoc klass ","associated_record id ","associated_record class paper_trail enabled? ","associated_record class paper_trail ","associated_record class ","assoc name ","assoc foreign_type ","assoc options [] ","assoc options ","version id ","PaperTrail  request enabled_for_model? ","PaperTrail  request ","@record send  id ","@record send  class paper_trail enabled? ","@record send  class paper_trail ","@record send  class "]}," PaperTrail RecordTrail save_habtm_associations":{"type":"method","name":"save_habtm_associations","children":[],"call":["PaperTrail VersionAssociation  create ","a name ","version transaction_id "," habtm_assoc_ids each "," habtm_assoc_ids "," save_habtm_association? ","@record class reflect_on_all_associations each ","@record class reflect_on_all_associations ","@record class "]}," PaperTrail RecordTrail save_bt_associations":{"type":"method","name":"save_bt_associations","children":[],"call":[" save_bt_association ","@record class reflect_on_all_associations each ","@record class reflect_on_all_associations ","@record class "]}," PaperTrail RecordTrail model_metadatum":{"type":"method","name":"model_metadatum","children":[],"call":["@record send "," attribute_in_previous_version "," attribute_changed_in_latest_version? ","@record has_attribute? ","event != ","@record respond_to? ","value is_a? ","value call ","value respond_to? "]}," PaperTrail RecordTrail merge_metadata_from_model_into":{"type":"method","name":"merge_metadata_from_model_into","children":[],"call":["data []= "," model_metadatum ","data [] ","@record paper_trail_options [] each ","@record paper_trail_options [] ","@record paper_trail_options "]}," PaperTrail RecordTrail merge_metadata_from_controller_into":{"type":"method","name":"merge_metadata_from_controller_into","children":[],"call":["data merge ","PaperTrail  controller_info ","PaperTrail  request controller_info ","PaperTrail  request "]}," PaperTrail RecordTrail merge_metadata_into":{"type":"method","name":"merge_metadata_into","children":[],"call":[" merge_metadata_from_controller_into "," merge_metadata_from_model_into "]}," PaperTrail Reifiers HasOne without_persisting":{"type":"method","name":"without_persisting","children":[],"call":["record class suppress ","record class ","record class respond_to? "]}," PaperTrail Reifiers HasOne noncreate_event":{"type":"method","name":"noncreate_event","children":[],"call":["model send ","assoc name "," without_persisting ","model paper_trail appear_as_new_record ","model paper_trail ","version reify ","options merge "]}," PaperTrail Reifiers HasOne load_version_for_has_one":{"type":"method","name":"load_version_for_has_one","children":[],"call":["model class paper_trail version_class joins where where where where order first ","model class paper_trail version_class joins where where where where order ","model class paper_trail version_class joins where where where where ","model class paper_trail version_class joins where where where ","assoc class_name ","model class paper_trail version_class joins where where ","model id ","model class paper_trail version_class joins where ","assoc foreign_key ","model class paper_trail version_class joins ","model class paper_trail version_class ","model class paper_trail ","model class ","model class paper_trail version_class table_name ","assoc klass name ","assoc klass ","assoc klass base_class name ","assoc klass base_class "]}," PaperTrail Reifiers HasOne create_event":{"type":"method","name":"create_event","children":[],"call":["model send ","assoc name ","model paper_trail appear_as_new_record ","model paper_trail ","model send mark_for_destruction ","options [] "]}," PaperTrail Reifiers HasOne reify":{"type":"method","name":"reify","children":[],"call":[" noncreate_event "," create_event ","version event == ","version event "," load_version_for_has_one ","options [] "," load_version "," load_version_for_has_one  event == "," load_version  event == "," load_version_for_has_one  event "," load_version  event "," load_ load_version_for_has_one _for_has_one "," load_ load_version _for_has_one "," load_ load_version_for_has_one  "," load_ load_version  "]}," PaperTrail Reifiers HasManyThrough load_versions_for_hmt_association":{"type":"method","name":"load_versions_for_hmt_association","children":[],"call":["Reifiers HasMany  versions_by_id ","assoc klass ","assoc klass paper_trail version_class select where where where group to_sql ","assoc klass paper_trail version_class select where where where group ","assoc klass paper_trail version_class select where where where ","assoc klass paper_trail version_class select where where ","assoc klass paper_trail version_class select where ","assoc class_name ","assoc klass paper_trail version_class select ","assoc klass paper_trail version_class ","assoc klass paper_trail ","assoc klass name ","assoc klass base_class name ","assoc klass base_class "]}," PaperTrail Reifiers HasManyThrough collection_through_belongs_to":{"type":"method","name":"collection_through_belongs_to","children":[],"call":["Reifiers HasMany  prepare_array ","Array  new ","assoc klass where ","assoc klass primary_key ","assoc klass "," load_versions_for_hmt_association ","options [] ","through_model send ","assoc source_reflection foreign_key ","assoc source_reflection ","through_collection map "," load_ load_versions_for_hmt_association _for_hmt_association ","through_Array  new  map "]}," PaperTrail Reifiers HasManyThrough collection_through_has_many":{"type":"method","name":"collection_through_has_many","children":[],"call":["through_model public_send to_a ","through_model public_send ","assoc name to_sym ","assoc name ","through_collection flat_map "," PaperTrail Reifier  reify_has_manys ","through_collection each "]}," PaperTrail Reifiers HasManyThrough collection":{"type":"method","name":"collection","children":[],"call":[" collection_through_belongs_to "," collection_through_has_many ","through_collection present? ","assoc source_reflection belongs_to? ! ","assoc source_reflection belongs_to? ","assoc source_reflection "]}," PaperTrail Reifiers HasManyThrough reify":{"type":"method","name":"reify","children":[],"call":["model send proxy_association target= ","model send proxy_association ","model send ","assoc name "," collection ","assoc options [] ","assoc options ","  collection  "]}," PaperTrail Reifiers HasMany load_versions_for_hm_association":{"type":"method","name":"load_versions_for_hm_association","children":[],"call":[" versions_by_id ","model class "," PaperTrail VersionAssociation  joins select where where where where group to_sql "," PaperTrail VersionAssociation  joins select where where where where group "," PaperTrail VersionAssociation  joins select where where where where "," PaperTrail VersionAssociation  joins select where where where ","assoc class_name "," PaperTrail VersionAssociation  joins select where where ","model id "," PaperTrail VersionAssociation  joins select where ","assoc foreign_key "," PaperTrail VersionAssociation  joins select "," PaperTrail VersionAssociation  joins ","model class version_association_name ","assoc klass name ","assoc klass ","assoc klass base_class name ","assoc klass base_class "]}," PaperTrail Reifiers HasMany versions_by_id":{"type":"method","name":"versions_by_id","children":[],"call":["a merge! ","e item_id ","klass paper_trail version_class where inject ","klass paper_trail version_class where ","klass paper_trail version_class ","klass paper_trail "]}," PaperTrail Reifiers HasMany prepare_array":{"type":"method","name":"prepare_array","children":[],"call":["array compact! ","array concat ","v reify ","options merge ","versions values map ","versions values ","version reify ","record tap ","options [] ","version event == ","version event ","(lvasgn :version\n  (send\n    (lvar :versions) :delete\n    (send\n      (lvar :record) :id))) nil? ","versions delete ","record id ","array map! ","versions delete s values map ","versions delete s values ","versions delete  reify ","versions delete  event == ","versions delete  event ","(lvasgn :versions delete \n  (send\n    (lvar :versions delete s) :delete\n    (send\n      (lvar :record) :id))) nil? ","versions delete s delete "]}," PaperTrail Reifiers HasMany reify":{"type":"method","name":"reify","children":[],"call":["model send proxy_association target= ","model send proxy_association ","model send ","assoc name "," prepare_array ","Array  new ","model send reload "," load_versions_for_hm_association ","options [] "," load_ load_versions_for_hm_association _for_hm_association "]}," PaperTrail Reifiers HasAndBelongsToMany load_version":{"type":"method","name":"load_version","children":[],"call":["assoc klass paper_trail version_class where where where order limit first ","assoc klass paper_trail version_class where where where order limit ","assoc klass paper_trail version_class where where where order ","assoc klass paper_trail version_class where where where ","assoc klass paper_trail version_class where where ","assoc klass paper_trail version_class where ","assoc klass name ","assoc klass ","assoc klass paper_trail version_class ","assoc klass paper_trail ","assoc klass base_class name ","assoc klass base_class "]}," PaperTrail Reifiers HasAndBelongsToMany reify":{"type":"method","name":"reify","children":[],"call":["model send proxy_association target= ","assoc klass where first ","assoc klass where ","assoc klass primary_key ","assoc klass ","version reify ","options merge "," load_version ","options [] ","version_ids map ","model send proxy_association ","model send ","assoc name "," PaperTrail VersionAssociation  where where pluck "," PaperTrail VersionAssociation  where where "," PaperTrail VersionAssociation  where "," load_version  reify "," load_ load_version  "," load_version _ids map "," PaperTrail VersionAssociation  where where pluck  map "]}," PaperTrail Reifiers BelongsTo load_version":{"type":"method","name":"load_version","children":[],"call":["assoc klass paper_trail version_class where where where order limit first ","assoc klass paper_trail version_class where where where order limit ","assoc klass paper_trail version_class where where where order ","assoc klass paper_trail version_class where where where ","assoc klass paper_trail version_class where where ","assoc klass paper_trail version_class where ","assoc class_name ","assoc klass paper_trail version_class ","assoc klass paper_trail ","assoc klass ","assoc klass name ","assoc klass base_class name ","assoc klass base_class "]}," PaperTrail Reifiers BelongsTo load_record":{"type":"method","name":"load_record","children":[],"call":["version reify ","options merge ","assoc klass where first ","assoc klass where ","assoc klass primary_key ","assoc klass ","version nil? "]}," PaperTrail Reifiers BelongsTo reify":{"type":"method","name":"reify","children":[],"call":["model send ","(begin\n  (send\n    (lvar :assoc) :name)) to_sym ","assoc name "," load_record "," load_version ","options [] ","assoc foreign_key "," load_ load_record  "," load_ load_version  "]}," PaperTrail Request transaction_id=":{"type":"method","name":"transaction_id=","children":[],"call":[" store []= "," store "]}," PaperTrail Request transaction_id":{"type":"method","name":"transaction_id","children":[],"call":[" store [] "," store "]}," PaperTrail Request clear_transaction_id":{"type":"method","name":"clear_transaction_id","children":[],"call":[" transaction_id= "]}," PaperTrail Reifiers HasOne load_versions":{"type":"method","name":"load_versions","children":[],"call":["model class paper_trail version_class joins where where where where order load ","model class paper_trail version_class joins where where where where order ","model class paper_trail version_class joins where where where where ","model class paper_trail version_class joins where where where ","model class paper_trail version_class joins where where ","model id ","model class paper_trail version_class joins where ","assoc foreign_key ","model class paper_trail version_class joins ","model class paper_trail version_class ","model class paper_trail ","model class ","model class paper_trail version_class table_name "]}," PaperTrail Reifiers HasOne load_version":{"type":"method","name":"load_version","children":[],"call":[" raise ","FoundMoreThanOne  new ","versions length ","versions first "," load_versions ","assoc klass base_class name ","assoc klass base_class ","assoc klass ","FoundMoreThanOne  new message ","version logger ","PaperTrail  config association_reify_error_behaviour to_s ","PaperTrail  config association_reify_error_behaviour ","PaperTrail  config "," load_versions  length ","versions first s length "," load_versions  first ","versions first s first "," load_ load_versions  "," load_versions first s ","versions first  logger "]}," PaperTrail Reifiers HasOne FoundMoreThanOne message":{"type":"method","name":"message","children":[],"call":[" format "]}," PaperTrail Reifiers HasOne FoundMoreThanOne initialize":{"type":"method","name":"initialize","children":[],"call":["num_records_found to_i ","base_class_name to_s "]}}