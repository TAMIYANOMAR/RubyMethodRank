{" JsRoutes default_file":{"type":"method","name":"default_file","children":[],"call":["Rails  root ","Rails  version >= ","Rails  version "]}," JsRoutes build_path":{"type":"method","name":"build_path","children":[],"call":["cap name to_s gsub ","cap name to_s ","cap name ","s gsub! ","route conditions [] required_params include? ","route conditions [] required_params ","route conditions [] ","route conditions ","cap name to_s == ","route conditions [] captures each ","route conditions [] captures ","route path gsub ","route path ","cap name to_route path gsub  groute path gsub ub ","cap name to_route path gsub  ","route path gsub  groute path gsub ub! ","route conditionroute path gsub  [] required_paramroute path gsub  include? ","route conditionroute path gsub  [] required_paramroute path gsub  ","route conditionroute path gsub  [] ","route conditionroute path gsub  ","cap name to_route path gsub  == ","route conditionroute path gsub  [] captureroute path gsub  each ","route conditionroute path gsub  [] captureroute path gsub  ","route path groute path gsub ub "]}," JsRoutes build_default_params":{"type":"method","name":"build_default_params","children":[],"call":["(send\n  (send\n    (send\n      (send\n        (lvar :route) :conditions) :[]\n      (sym :path_info)) :captures) :map) join ","cap name to_s gsub ","cap name to_s ","cap name ","cap is_a? ","route conditions [] captures map ","route conditions [] captures ","route conditions [] ","route conditions "]}," JsRoutes build_params":{"type":"method","name":"build_params","children":[],"call":["(send\n  (send\n    (send\n      (send\n        (lvar :route) :conditions) :[]\n      (sym :path_info)) :captures) :map) compact << join ","(send\n  (send\n    (send\n      (send\n        (lvar :route) :conditions) :[]\n      (sym :path_info)) :captures) :map) compact << ","(send\n  (send\n    (send\n      (send\n        (lvar :route) :conditions) :[]\n      (sym :path_info)) :captures) :map) compact ","cap name to_s gsub ","cap name to_s ","cap name ","cap name to_s == ","cap is_a? ","route conditions [] captures map ","route conditions [] captures ","route conditions [] ","route conditions ","(send\n  (send\n    (send\n      (lvar :cap) :name) :to_s) :==\n  (str \"format\")) ! ","(send\n  (send\n    (send\n      (send\n        (lvar :route) :conditions) :[]\n      (sym :path_info)) :named_captures) :map) compact << join ","(send\n  (send\n    (send\n      (send\n        (lvar :route) :conditions) :[]\n      (sym :path_info)) :named_captures) :map) compact << ","(send\n  (send\n    (send\n      (send\n        (lvar :route) :conditions) :[]\n      (sym :path_info)) :named_captures) :map) compact ","_ + ","name to_s gsub ","name to_s ","(send\n  (send\n    (lvar :name) :to_s) :==\n  (str \"format\")) ! ","name to_s == ","cap first ","route conditions [] named_captures map ","route conditions [] named_captures ","(send\n  (block\n    (send\n      (send\n        (send\n          (send\n            (send\n              (lvar :route) :conditions) :[]\n            (sym :path_info)) :named_captures) :to_a) :sort)\n    (args\n      (arg :cap1)\n      (arg :cap2))\n    (send\n      (send\n        (send\n          (lvar :cap1) :last) :first) :<=>\n      (send\n        (send\n          (lvar :cap2) :last) :first))) :map) compact ","(send\n  (send\n    (send\n      (send\n        (send\n          (lvar :route) :conditions) :[]\n        (sym :path_info)) :named_captures) :to_a) :sort) map ","cap1 last first <=> ","cap2 last first ","cap2 last ","cap1 last first ","cap1 last ","route conditions [] named_captures to_a sort ","route conditions [] named_captures to_a ","(send\n  (lvar :optional_named_captures) :include?\n  (send\n    (lvar :name) :to_s)) ! ","optional_named_captures include? "," optional_params "," required_params map "," required_params ","params join ","(send\n  (send\n    (lvar :route) :required_parts) :map) << ","route required_parts map ","route required_parts ","(send\n  (lvar :required_parts) :map) << ","required_parts map ","required_parts + ","(send\n  (lvar :required_parts) :map) join "," apply_case ","cap cap first  to_s gsub ","cap cap first  to_s ","cap cap first  ","cap cap first  to_s == ","(send\n  (send\n    (send\n      (lvar :cap) :cap first ) :to_s) :==\n  (str \"format\")) ! ","(send\n  (send\n    (send\n      (send\n        (lvar :route) :conditions) :[]\n      (sym :path_info)) :cap first d_captures) :map) compact << join ","(send\n  (send\n    (send\n      (send\n        (lvar :route) :conditions) :[]\n      (sym :path_info)) :cap first d_captures) :map) compact << ","(send\n  (send\n    (send\n      (send\n        (lvar :route) :conditions) :[]\n      (sym :path_info)) :cap first d_captures) :map) compact ","cap first  to_s gsub ","cap first  to_s ","(send\n  (send\n    (lvar :cap first ) :to_s) :==\n  (str \"format\")) ! ","cap first  to_s == ","route conditions [] cap first d_captures map ","route conditions [] cap first d_captures ","(send\n  (block\n    (send\n      (send\n        (send\n          (send\n            (send\n              (lvar :route) :conditions) :[]\n            (sym :path_info)) :cap first d_captures) :to_a) :sort)\n    (args\n      (arg :cap1)\n      (arg :cap2))\n    (send\n      (send\n        (send\n          (lvar :cap1) :last) :first) :<=>\n      (send\n        (send\n          (lvar :cap2) :last) :first))) :map) compact ","(send\n  (send\n    (send\n      (send\n        (send\n          (lvar :route) :conditions) :[]\n        (sym :path_info)) :cap first d_captures) :to_a) :sort) map ","route conditions [] cap first d_captures to_a sort ","route conditions [] cap first d_captures to_a ","(send\n  (lvar :optional_cap first d_captures) :include?\n  (send\n    (lvar :cap first ) :to_s)) ! ","(send\n  (lvar : optional_params ) :include?\n  (send\n    (lvar :name) :to_s)) ! ","optional_cap first d_captures include? "," optional_params  include? "," optional_(send\n  (send\n    (lvar :route) :required_parts) :map) <<  "," optional_(send\n  (lvar :required_parts) :map) <<  "," optional_required_parts +  "," required_(send\n  (send\n    (lvar :route) :required_parts) :map) <<  map "," required_(send\n  (lvar :required_parts) :map) <<  map "," required_required_parts +  map "," required_(send\n  (send\n    (lvar :route) :required_parts) :map) <<  "," required_(send\n  (lvar :required_parts) :map) <<  "," required_required_parts +  ","(send\n  (send\n    (lvar :route) :required_parts) :map) <<  join ","(send\n  (lvar :required_parts) :map) <<  join ","required_parts +  join "]}," JsRoutes js_routes":{"type":"method","name":"js_routes","children":[],"call":["(send\n  (send\n    (send\n      (send\n        (send\n          (const nil :Rails) :application) :routes) :named_routes) :routes) :map) join "," build_path "," build_default_params ","options [] "," build_params ","name to_s ","route path ","route name ","Rails  application routes named_routes routes map ","Rails  application routes named_routes routes ","Rails  application routes named_routes ","Rails  application routes ","Rails  application ","Rails  application reload_routes! "," build_js ","name to_s =~ ","exclude find "," Array ","(send\n  (send\n    (send\n      (send\n        (send\n          (const nil :Rails) :application) :routes) :named_routes) :routes) :map) compact join ","(send\n  (send\n    (send\n      (send\n        (send\n          (const nil :Rails) :application) :routes) :named_routes) :routes) :map) compact ","route name =~ ","{\n + + ","{\n + ","js_routes join "," any_match? ! "," any_match? ","@options [] ","(send\n  (send\n    (send\n      (send\n        (send\n          (const nil :Rails) :application) :routes) :named_routes) :routes) :map) flatten compact ","(send\n  (send\n    (send\n      (send\n        (send\n          (const nil :Rails) :application) :routes) :named_routes) :routes) :map) flatten "," build_route_if_match ","route app routes named_routes map ","route app routes named_routes ","route app routes ","route app ","route app superclass == ","route app superclass ","route app respond_to? ","(send\n  (send\n    (send\n      (send\n        (send\n          (send\n            (const nil :Rails) :application) :routes) :named_routes) :routes) :sort_by\n    (block-pass\n      (sym :to_s))) :map) flatten compact ","(send\n  (send\n    (send\n      (send\n        (send\n          (send\n            (const nil :Rails) :application) :routes) :named_routes) :routes) :sort_by\n    (block-pass\n      (sym :to_s))) :map) flatten ","Rails  application routes named_routes routes sort_by map ","Rails  application routes named_routes routes sort_by ","route path anchored ! ","route path anchored ","rails_engine_app routes named_routes map ","rails_engine_app routes named_routes ","rails_engine_app routes ","rails_engine_app superclass == ","rails_engine_app superclass ","rails_engine_app respond_to? "," get_app_from_route ","(send\n  (send\n    (send\n      (send\n        (send\n          (send\n            (const nil :Rails) :application) :routes) :named_routes) :routes) :sort_by\n    (block-pass\n      (sym :to_s))) :flat_map) compact ","Rails  application routes named_routes routes sort_by flat_map ","(send\n  (send\n    (send\n      (send\n        (send\n          (send\n            (const nil :Rails) :application) :routes) :named_routes) :to_a) :sort_by\n    (block-pass\n      (sym :to_s))) :flat_map) compact ","Rails  application routes named_routes to_a sort_by flat_map ","Rails  application routes named_routes to_a sort_by ","Rails  application routes named_routes to_a ","(send\n  (send\n    (send\n      (send\n        (send\n          (send\n            (const nil :Rails) :application) :routes) :named_routes) :to_a) :sort_by\n    (block-pass\n      (sym :first))) :flat_map) compact ","(send nil :build_route_if_match\n  (lvar :route)) + "," mounted_app_routes ","(send\n  (send\n    (send nil :named_routes) :sort_by\n    (block-pass\n      (sym :first))) :flat_map) compact "," named_routes sort_by flat_map "," named_routes sort_by "," named_routes "," Array  find ","(send\n  (send\n    (send\n      (send\n        (send\n          (const nil :Rails) :application) :routes) :named_routes) :routes) :map) compact  join ","(send\n  (send\n    (send\n      (send\n        (send\n          (const nil :Rails) :application) :routes) :named_routes) :routes) :map) flatten compact  join ","(send\n  (send\n    (send\n      (send\n        (send\n          (send\n            (const nil :Rails) :application) :routes) :named_routes) :routes) :sort_by\n    (block-pass\n      (sym :to_s))) :map) flatten compact  join ","(send\n  (send\n    (send\n      (send\n        (send\n          (send\n            (const nil :Rails) :application) :routes) :named_routes) :routes) :sort_by\n    (block-pass\n      (sym :to_s))) :flat_map) compact  join ","(send\n  (send\n    (send\n      (send\n        (send\n          (send\n            (const nil :Rails) :application) :routes) :named_routes) :to_a) :sort_by\n    (block-pass\n      (sym :to_s))) :flat_map) compact  join ","(send\n  (send\n    (send\n      (send\n        (send\n          (send\n            (const nil :Rails) :application) :routes) :named_routes) :to_a) :sort_by\n    (block-pass\n      (sym :first))) :flat_map) compact  join ","(send\n  (send\n    (send nil :named_routes) :sort_by\n    (block-pass\n      (sym :first))) :flat_map) compact  join "," get_app_from_route  routes named_routes map "," get_app_from_route  routes named_routes "," get_app_from_route  routes "," get_app_from_route  superclass == "," get_app_from_route  superclass "," get_app_from_route  respond_to? "]}," JsRoutes generate!":{"type":"method","name":"generate!","children":[],"call":["f write "," generate ","File  open "," default_file ","options [] ","@options [] ","Rails  configuration after_initialize ","Rails  configuration ","Rails  root join ","Rails  root "," new generate! "," new ","opts [] ","file_name is_a? "," class options [] "," class options "," class "," class configuration [] "," class configuration ","File  read == ","File  read ","File  exist? ","@configuration output_file ","Instance  new generate! ","Instance  new ","opts []  is_a? "]}," JsRoutes generate":{"type":"method","name":"generate","children":[],"call":["js gsub! "," js_routes ","File  read ","File  dirname + ","File  dirname ","options [] ","options [] to_s ","@options [] ","@options [] to_s "," new generate "," new "," json ","@options [] merge "," deprecated_default_format ","Rails  application class to_s ","Rails  application class ","Rails  application ","Rails  application reload_routes! ","Rails  application routes named_routes routes keys empty? ","Rails  application routes named_routes routes keys ","Rails  application routes named_routes routes ","Rails  application routes named_routes ","Rails  application routes ","(pair\n  (str \"GEM_VERSION\")\n  (const\n    (const nil :JsRoutes) :VERSION)) inject ","Rails  application routes named_routes to_a empty? ","Rails  application routes named_routes to_a "," deprecate_url_options ","Rails  application config relative_url_root ","Rails  application config "," application class to_s "," application class "," application "," application reload_routes! "," application respond_to? "," named_routes to_a empty? "," named_routes to_a "," named_routes ","value to_s ","Rails  version < ","Rails  version ","@configuration serializer ","@configuration special_options_key ","@configuration prefix ","@configuration default_url_options ","@configuration namespace ","ActionPack VERSION MINOR  == ","ActionPack VERSION MAJOR  == ","ActionPack  version ","(send\n  (hash\n    (pair\n      (str \"GEM_VERSION\")\n      (const\n        (const nil :JsRoutes) :VERSION))\n    (pair\n      (str \"ROUTES_OBJECT\")\n      (send nil :routes_object))\n    (pair\n      (str \"RAILS_VERSION\")\n      (send\n        (const nil :ActionPack) :version))\n    (pair\n      (str \"DEPRECATED_GLOBBING_BEHAVIOR\")\n      (and\n        (send\n          (const\n            (const\n              (const nil :ActionPack) :VERSION) :MAJOR) :==\n          (int 4))\n        (send\n          (const\n            (const\n              (const nil :ActionPack) :VERSION) :MINOR) :==\n          (int 0))))\n    (pair\n      (str \"APP_CLASS\")\n      (send\n        (send\n          (send nil :application) :class) :to_s))\n    (pair\n      (str \"NAMESPACE\")\n      (send nil :json\n        (send\n          (ivar :@configuration) :namespace)))\n    (pair\n      (str \"DEFAULT_URL_OPTIONS\")\n      (send nil :json\n        (send\n          (ivar :@configuration) :default_url_options)))\n    (pair\n      (str \"PREFIX\")\n      (send nil :json\n        (send\n          (ivar :@configuration) :prefix)))\n    (pair\n      (str \"SPECIAL_OPTIONS_KEY\")\n      (send nil :json\n        (send\n          (ivar :@configuration) :special_options_key)))\n    (pair\n      (str \"SERIALIZER\")\n      (or\n        (send\n          (ivar :@configuration) :serializer)\n        (send nil :json\n          (nil))))\n    (pair\n      (str \"MODULE_TYPE\")\n      (send nil :json\n        (send\n          (ivar :@configuration) :module_type)))\n    (pair\n      (str \"WRAPPER\")\n      (if\n        (send\n          (ivar :@configuration) :esm?)\n        (str \"const __jsr = \")\n        (str \"\")))) :inject\n  (send\n    (const nil :File) :read\n    (send\n      (send\n        (const nil :File) :dirname\n        (str \"(string)\")) :+\n      (str \"/routes.js\")))) + "," routes_export "," raise ","@configuration esm? ","@configuration module_type "," routes_object ","content + + "," prevent_types_export ","content + "," js_variables inject "," js_variables ","@configuration dts? ! ","@configuration dts? ","@configuration source_file "," named_routes empty? ","Instance  new generate ","Instance  new ","File  read  gsub! "," File  read _routes "," File  read on ","(send\n  (hash\n    (pair\n      (str \"GEM_VERSION\")\n      (const\n        (const nil :JsRoutes) :VERSION))\n    (pair\n      (str \"ROUTES_OBJECT\")\n      (send nil :routes_object))\n    (pair\n      (str \"RAILS_VERSION\")\n      (send\n        (const nil :ActionPack) :version))\n    (pair\n      (str \"DEPRECATED_GLOBBING_BEHAVIOR\")\n      (and\n        (send\n          (const\n            (const\n              (const nil :ActionPack) :VERSION) :MAJOR) :==\n          (int 4))\n        (send\n          (const\n            (const\n              (const nil :ActionPack) :VERSION) :MINOR) :==\n          (int 0))))\n    (pair\n      (str \"APP_CLASS\")\n      (send\n        (send\n          (send nil :application) :class) :to_s))\n    (pair\n      (str \"NAMESPACE\")\n      (send nil :File  read on\n        (send\n          (ivar :@configuration) :namespace)))\n    (pair\n      (str \"DEFAULT_URL_OPTIONS\")\n      (send nil :File  read on\n        (send\n          (ivar :@configuration) :default_url_options)))\n    (pair\n      (str \"PREFIX\")\n      (send nil :File  read on\n        (send\n          (ivar :@configuration) :prefix)))\n    (pair\n      (str \"SPECIAL_OPTIONS_KEY\")\n      (send nil :File  read on\n        (send\n          (ivar :@configuration) :special_options_key)))\n    (pair\n      (str \"SERIALIZER\")\n      (or\n        (send\n          (ivar :@configuration) :serializer)\n        (send nil :File  read on\n          (nil))))\n    (pair\n      (str \"MODULE_TYPE\")\n      (send nil :File  read on\n        (send\n          (ivar :@configuration) :module_type)))\n    (pair\n      (str \"WRAPPER\")\n      (if\n        (send\n          (ivar :@configuration) :esm?)\n        (str \"const __File  read r = \")\n        (str \"\")))) :inject\n  (send\n    (const nil :File) :read\n    (send\n      (send\n        (const nil :File) :dirname\n        (str \"(string)\")) :+\n      (str \"/routes.File  read \")))) + ","File  read  + + ","File  read  + "," File  read _variables inject "," File  read _variables "]}," JsRoutes build_js":{"type":"method","name":"build_js","children":[],"call":[" build_path "," build_default_params ","options [] "," build_params ","name to_s ","route path ","route name ","(str \"  // \") strip! "," path_parts inspect "," path_parts ","params size ","params << join ","params << "," optional_params inspect "," optional_params ","(send\n  (lvar :params) :+\n  (array\n    (str \"options\"))) join ","params + "," route_spec "," json "," serialize ","route path spec ","route required_parts ","name join ","parent_route try try ","parent_route try ","(send\n  (lvar :parent_route) :try\n  (sym :name)) compact ","optional_parts push ","required_parts delete ","required_parts include? ","route optional_parts clone ","route optional_parts ","route required_parts clone ","route_name camelize "," == ","@options [] ",",\n + ","url_link length > ","url_link length "," generate_url_link "," generate_route_name ","(lvar :required_parts) flatten join ","(lvar :required_parts) flatten ","route parts - ","route parts "," route_js_arguments ","@configuration [] "," build(str \"  // \") strip! path "," build(str \"  // \") strip! default(str \"  // \") strip! params "," build_default_ build_params  "," build(str \"  // \") strip! params "," build_ build_params  ","name to(str \"  // \") strip! s ","(send\n  (lvar :parent_route) :try\n  (sym :name)) compact  to_s ","route (send\n  (lvar :parent_route) :try\n  (sym :name)) compact  "," path(str \"  // \") strip! parts inspect "," path(str \"  // \") strip! parts "," build_params  size "," build_params  << join "," build_params  << "," optional(str \"  // \") strip! params inspect "," optional_ build_params  inspect "," optional(str \"  // \") strip! params "," optional_ build_params  ","(send\n  (lvar : build_params ) :+\n  (array\n    (str \"options\"))) join "," build_params  + "," route(str \"  // \") strip! spec ","route required(str \"  // \") strip! parts ","route route required_parts clone  ","(send\n  (lvar :parent_route) :try\n  (sym :name)) compact  join ","parent(str \"  // \") strip! route try try ","parent(str \"  // \") strip! route try ","(send\n  (lvar :parent(str \"  // \") strip! route) :try\n  (sym :name)) compact ","(send\n  (lvar :parent_route) :try\n  (sym :(send\n  (lvar :parent_route) :try\n  (sym :name)) compact )) compact ","optional(str \"  // \") strip! parts push ","route optional_parts clone  push ","required(str \"  // \") strip! parts delete ","route required_parts clone  delete ","required(str \"  // \") strip! parts include? ","route required_parts clone  include? ","route optional(str \"  // \") strip! parts clone ","route route optional_parts clone  clone ","route optional(str \"  // \") strip! parts ","route route optional_parts clone  ","route required(str \"  // \") strip! parts clone ","route route required_parts clone  clone ","route(str \"  // \") strip! name camelize ","route_(send\n  (lvar :parent_route) :try\n  (sym :name)) compact  camelize ","route_name camelize  camelize "," generate_route_name  camelize ","url(str \"  // \") strip! link length > "," generate_url_link  length > ","url(str \"  // \") strip! link length "," generate_url_link  length "," generate(str \"  // \") strip! url(str \"  // \") strip! link "," generate_ generate_url_link  "," generate(str \"  // \") strip! route(str \"  // \") strip! name "," generate_route_(send\n  (lvar :parent_route) :try\n  (sym :name)) compact  "," generate_route_name camelize  "," generate_ generate_route_name  ","(lvar :required(str \"  // \") strip! parts) flatten join ","(lvar :route required_parts clone ) flatten join ","(lvar :required(str \"  // \") strip! parts) flatten ","(lvar :route required_parts clone ) flatten "," route(str \"  // \") strip! js(str \"  // \") strip! arguments "]}," JsRoutes path_parts":{"type":"method","name":"path_parts","children":[],"call":["route path gsub split ","route path gsub ","route path "," route_spec gsub split "," route_spec gsub "," route_spec "]}," JsRoutes any_match?":{"type":"method","name":"any_match?","children":[],"call":["route name =~ ","route name ","matchers any? "," Array ","(send\n  (lvar :parent_route) :try\n  (sym :name)) compact join =~ ","(send\n  (lvar :parent_route) :try\n  (sym :name)) compact join ","(send\n  (lvar :parent_route) :try\n  (sym :name)) compact ","parent_route try ","full_route =~ "," Array  any? ","(send\n  (lvar :parent_route) :try\n  (sym :name)) compact join  =~ "]}," JsRoutes default_options":{"type":"method","name":"default_options","children":[],"call":[" default_file "]}," JsRoutes initialize":{"type":"method","name":"initialize","children":[],"call":[" default_options merge "," default_options "," class options to_hash merge "," class options to_hash "," class options "," class "," class configuration merge "," class configuration "]}," JsRoutes optional_params":{"type":"method","name":"optional_params","children":[],"call":["(send\n  (send\n    (lvar :captures) :zip\n    (lvar :named_captures)) :map) compact ","type == ","captures zip map ","captures zip ","a last first <=> ","b last first ","b last ","a last first ","a last ","path_info named_captures to_a sort ","path_info named_captures to_a ","path_info named_captures ","path_info source scan flatten ","path_info source scan ","path_info source ","route conditions [] ","route conditions ","Regexp  escape ","RUBY_VERSION  >= ","cap last first ","cap last ","path_info named_captures to_a sort_by ","path_info_source scan flatten ","path_info_source scan ","route optional_parts map ","route optional_parts ","Rails  version >= ","Rails  version ","(send\n  (send\n    (lvar :path_info source scan flatten ) :zip\n    (lvar :named_path_info source scan flatten )) :map) compact ","(send\n  (send\n    (lvar :path_info_source scan flatten ) :zip\n    (lvar :named_path_info_source scan flatten )) :map) compact ","(send\n  (send\n    (lvar :captuRegexp  escape s) :zip\n    (lvar :named_captuRegexp  escape s)) :map) compact ","path_info source scan flatten  zip map ","path_info_source scan flatten  zip map ","captuRegexp  escape s zip map ","path_info source scan flatten  zip ","path_info_source scan flatten  zip ","captuRegexp  escape s zip ","path_info named_path_info source scan flatten  to_a sort ","path_info named_path_info_source scan flatten  to_a sort ","route conditions []  named_captures to_a sort ","path_info named_captuRegexp  escape s to_a sort ","path_info named_path_info source scan flatten  to_a ","path_info named_path_info_source scan flatten  to_a ","route conditions []  named_captures to_a ","path_info named_captuRegexp  escape s to_a ","path_info named_path_info source scan flatten  ","path_info named_path_info_source scan flatten  ","route conditions []  named_captures ","path_info named_captuRegexp  escape s ","route conditions []  source scan flatten ","route conditions []  source scan ","route conditions []  source ","path_info named_path_info source scan flatten  to_a sort_by ","path_info named_path_info_source scan flatten  to_a sort_by ","route conditions []  named_captures to_a sort_by ","path_info named_captuRegexp  escape s to_a sort_by ","route conditions [] _source scan flatten ","path_info source  scan flatten ","route conditions [] _source scan ","path_info source  scan "]}," JsRoutes options":{"type":"method","name":"options","children":[],"call":["opts []= ","DEFAULTS  each_pair ","Options  new tap ","Options  new "," configuration ","ActiveSupport Deprecation  warn "]}," JsRoutes setup":{"type":"method","name":"setup","children":[],"call":[" options tap "," options "," configuration tap "," configuration "," configuration normalize_and_verify "," configuration assign "]}," JsRoutes Options to_hash":{"type":"method","name":"to_hash","children":[],"call":["Hash  [] symbolize_keys ","Hash  [] "," members zip flatten "," members zip "," values "," members "]}," JsRoutes assert_usable_configuration!":{"type":"method","name":"assert_usable_configuration!","children":[],"call":[" raise ","Rails  application config assets initialize_on_precompile ! ","Rails  application config assets initialize_on_precompile ","Rails  application config assets ","Rails  application config ","Rails  application ","Rails  version > ","Rails  version ","3 == "]}," JsRoutes required_params":{"type":"method","name":"required_params","children":[],"call":["optional_named_captures include? ","name to_s ","(send\n  (send\n    (send\n      (send\n        (send\n          (lvar :route) :conditions) :[]\n        (sym :path_info)) :named_captures) :to_a) :sort_by) map reject ","(send\n  (send\n    (send\n      (send\n        (send\n          (lvar :route) :conditions) :[]\n        (sym :path_info)) :named_captures) :to_a) :sort_by) map ","cap1 last first ","cap1 last ","route conditions [] named_captures to_a sort_by ","route conditions [] named_captures to_a ","route conditions [] named_captures ","route conditions [] ","route conditions "," optional_params ","route required_parts map ","route required_parts ","Rails  version >= ","Rails  version "," optional_params  include? "]}," JsRoutes route_spec":{"type":"method","name":"route_spec","children":[],"call":["(send\n  (send\n    (const nil :Rails) :version) :>=\n  (str \"3.2.0\")) to_s ","route path ","route path spec ","Rails  version >= ","Rails  version "]}," JsRoutes serialize":{"type":"method","name":"serialize","children":[],"call":[" serialize ","spec right ","spec respond_to? ","spec left ","NODE_TYPES  [] ","spec type ","spec tr ","spec is_a? "," serialize_spec ","result [] is_a? ","result [] "," serialize_spec  [] is_a? "," serialize_spec  [] "]}," JsRoutes json":{"type":"method","name":"json","children":[],"call":[" class json "," class ","ActiveSupport JSON  encode "]}," JsRoutes serialize_spec":{"type":"method","name":"serialize_spec","children":[],"call":[" serialize ","spec right ","spec respond_to? ","spec left ","NODE_TYPES  [] ","spec type ","(send\n  (const nil :NODE_TYPES) :[]\n  (send\n    (lvar :spec) :type)) compact "]}," JsRoutes build_route_if_match":{"type":"method","name":"build_route_if_match","children":[],"call":[" build_js "," any_match? ! "," any_match? ","@options [] ","@configuration [] "]}," JsRoutes deprecated_default_format":{"type":"method","name":"deprecated_default_format","children":[],"call":["@options [] "," warn ","@options key? "]}," JsRoutes generate_route_name":{"type":"method","name":"generate_route_name","children":[],"call":["route_name camelize ","@options [] ","name join ","route_name << ","@configuration [] ","parts compact join ","parts compact "," apply_case ","name join  camelize ","parts compact join  camelize ","name join  << ","parts compact join  << "]}," JsRoutes generate_url_link":{"type":"method","name":"generate_url_link","children":[],"call":["(str \"    \") strip! "," build_params ","@options [] inspect ","@options [] "," generate_route_name "," raise ","@options [] match nil? ","@options [] match ","URI  regexp "," generate_base_url_js "," json "," deprecated_base_url ","route defaults slice ","route defaults ","@options [] == ","@configuration [] "," build(str \"    \") strip! params "," generate(str \"    \") strip! route(str \"    \") strip! name "," generate(str \"    \") strip! base(str \"    \") strip! url(str \"    \") strip! js "," deprecated(str \"    \") strip! base(str \"    \") strip! url ","route  deprecated_base_url  slice ","route route defaults slice  slice ","route  deprecated_base_url  ","route route defaults slice  "]}," JsRoutes generate_base_url_js":{"type":"method","name":"generate_base_url_js","children":[],"call":["@options [] inspect ","@options [] "," raise ","@options [] match nil? ","@options [] match ","URI Parser  new make_regexp ","URI Parser  new ","ActiveSupport Deprecation  warn ","@options [] [] ","route defaults [] ","route defaults ","@options [] == "]}," JsRoutes get_app_from_route":{"type":"method","name":"get_app_from_route","children":[],"call":["route app ","route app app ","route app respond_to? "]}," JsRoutes deprecated_base_url":{"type":"method","name":"deprecated_base_url","children":[],"call":["uri scheme ","uri host ","uri port ","uri port == ","uri scheme == ","URI  parse ","@options [] "," raise ","@options [] match nil? ","@options [] match ","URI Parser  new make_regexp ","URI Parser  new ","ActiveSupport Deprecation  warn ","URI  parse  scheme ","URI  parse  host ","uri uri port  ","URI  parse  port ","uri uri port  == ","URI  parse  port == ","URI  parse  scheme == ","ActiveSupuri port  Deprecation  warn "]}," JsRoutes route_js_arguments":{"type":"method","name":"route_js_arguments","children":[],"call":["(send nil :json\n  (lvar :required_parts)) join "," json "," serialize ","route path spec ","route path ","optional_parts push ","required_parts delete ","required_parts include? ","route parts - ","route required_parts ","route parts ","route required_parts clone ","(send\n  (array\n    (lvar :required_parts)\n    (lvar :optional_parts)\n    (send nil :serialize\n      (send\n        (send\n          (lvar :route) :path) :spec)\n      (lvar :parent_spec))) :map) join ","(lvar :required_parts) map ","(send\n  (array\n    (lvar :required_parts)\n    (lvar :optional_parts)\n    (send nil :serialize\n      (send\n        (send\n          (lvar :route) :path) :spec)\n      (lvar :parent_spec))\n    (lvar :default_parts)) :map) join ","FILTERED_DEFAULT_PARTS  include? ","route defaults reject ","route defaults ","URL_OPTIONS  include? ","FILTERED_DEFAULT_PARTS  exclude? ","route defaults select ","(send\n  (array\n    (send\n      (lvar :parts_table) :to_a)\n    (lvar :default_options)\n    (send nil :serialize\n      (send\n        (send\n          (lvar :route) :path) :spec)\n      (lvar :parent_spec))) :map) join ","(send\n  (lvar :parts_table) :to_a) map ","parts_table to_a ","parts_table [] ","hash []= ","route parts each_with_object ","(lvar :parts_table) map ","parts_table [] []= ","route defaults each ","route parts each ","(send nil :json\n  (lvar :route required_parts clone )) join ","(send nil :json\n  (lvar :route required_parts )) join ","route parts -  push ","route required_parts clone  delete ","route required_parts  delete ","route required_parts clone  include? ","route required_parts  include? ","route route required_parts clone  ","route route required_parts  ","route route required_parts clone  clone ","route route required_parts  clone ","(send\n  (array\n    (lvar :required_parts)\n    (lvar :route parts - )\n    (send nil :serialize\n      (send\n        (send\n          (lvar :route) :path) :spec)\n      (lvar :parent_spec))) :map) join ","(send\n  (array\n    (lvar :route required_parts clone )\n    (lvar :optional_parts)\n    (send nil :serialize\n      (send\n        (send\n          (lvar :route) :path) :spec)\n      (lvar :parent_spec))) :map) join ","(send\n  (array\n    (lvar :route required_parts )\n    (lvar :optional_parts)\n    (send nil :serialize\n      (send\n        (send\n          (lvar :route) :path) :spec)\n      (lvar :parent_spec))) :map) join ","(lvar :route required_parts clone ) map ","(lvar :route required_parts ) map ","(send\n  (array\n    (lvar :required_parts)\n    (lvar :route parts - )\n    (send nil :serialize\n      (send\n        (send\n          (lvar :route) :path) :spec)\n      (lvar :parent_spec))\n    (lvar :default_parts)) :map) join ","(send\n  (array\n    (lvar :route required_parts clone )\n    (lvar :optional_parts)\n    (send nil :serialize\n      (send\n        (send\n          (lvar :route) :path) :spec)\n      (lvar :parent_spec))\n    (lvar :default_parts)) :map) join ","(send\n  (array\n    (lvar :route required_parts )\n    (lvar :optional_parts)\n    (send nil :serialize\n      (send\n        (send\n          (lvar :route) :path) :spec)\n      (lvar :parent_spec))\n    (lvar :default_parts)) :map) join "]}," JsRoutes deprecate_url_options":{"type":"method","name":"deprecate_url_options","children":[],"call":["result merge! ","uri scheme ","uri host ","uri port ","uri port == ","uri scheme == ","URI  parse ","@options [] "," raise ","@options [] match nil? ","@options [] match ","URI Parser  new make_regexp ","URI Parser  new ","ActiveSupport Deprecation  warn ","@options [] is_a? "," warn ","@options key? ","URI  parse  scheme ","URI  parse  host ","uri uri port  ","URI  parse  port ","uri uri port  == ","URI  parse  port == ","URI  parse  scheme == ","ActiveSupuri port  Deprecation  warn "]}," JsRoutes mounted_app_routes":{"type":"method","name":"mounted_app_routes","children":[],"call":[" build_route_if_match ","rails_engine_app routes named_routes map ","rails_engine_app routes named_routes ","rails_engine_app routes ","route path anchored ! ","route path anchored ","route path ","rails_engine_app superclass == ","rails_engine_app superclass ","rails_engine_app respond_to? "," get_app_from_route "," build_routes_if_match ","rails_engine_app routes named_routes flat_map "," route_helpers_if_match "," app_from_route "," get_app_from_route  routes named_routes map "," app_from_route  routes named_routes map "," get_app_from_route  routes named_routes "," app_from_route  routes named_routes "," get_app_from_route  routes "," app_from_route  routes "," get_app_from_route  superclass == "," app_from_route  superclass == "," get_app_from_route  superclass "," app_from_route  superclass "," get_app_from_route  respond_to? "," app_from_route  respond_to? "," get_app_from_route  routes named_routes flat_map "," app_from_route  routes named_routes flat_map "]}," JsRoutesSprocketsExtension call":{"type":"method","name":"call","children":[],"call":[]}," JsRoutesSprocketsExtension run":{"type":"method","name":"run","children":[],"call":[]}," JsRoutesSprocketsExtension render":{"type":"method","name":"render","children":[],"call":[" class run "," class "]}," JsRoutesSprocketsExtension initialize":{"type":"method","name":"initialize","children":[],"call":["block call "]}," JsRoutes named_routes":{"type":"method","name":"named_routes","children":[],"call":[" application routes named_routes to_a "," application routes named_routes "," application routes "," application "]}," JsRoutes application":{"type":"method","name":"application","children":[],"call":["Rails  application ","@options [] ","@configuration application "]}," JsRoutes configuration":{"type":"method","name":"configuration","children":[],"call":["Configuration  new "]}," JsRoutes Configuration to_hash":{"type":"method","name":"to_hash","children":[],"call":["Hash  [] symbolize_keys ","Hash  [] "," members zip flatten "," members zip "," values "," members "]}," JsRoutes Configuration merge":{"type":"method","name":"merge","children":[],"call":[" clone assign "," clone "]}," JsRoutes Configuration []":{"type":"method","name":"[]","children":[],"call":[" send "]}," JsRoutes Configuration assign":{"type":"method","name":"assign","children":[],"call":[" send ","value call ","value is_a? ","attributes each "," normalize_and_verify "," tap "," raise ","block ! ","attributes ! ","value call  call ","value call  is_a? "]}," JsRoutes Configuration initialize":{"type":"method","name":"initialize","children":[],"call":[" assign "]}," JsRoutes SprocketsExtension call":{"type":"method","name":"call","children":[],"call":[]}," JsRoutes SprocketsExtension run":{"type":"method","name":"run","children":[],"call":[]}," JsRoutes SprocketsExtension render":{"type":"method","name":"render","children":[],"call":[" class run "," class "]}," JsRoutes SprocketsExtension initialize":{"type":"method","name":"initialize","children":[],"call":["block call "]}," JsRoutes apply_case":{"type":"method","name":"apply_case","children":[],"call":["value to_s camelize ","value to_s ","@configuration [] "]}," JsRoutes documentation":{"type":"method","name":"documentation","children":[],"call":[" build_params ","route required_parts ","route path spec ","route path ","@configuration [] "]}," JsRoutes route_js":{"type":"method","name":"route_js","children":[],"call":[" documentation ","route_arguments join "," generate_route_name ","@configuration [] ","route_arguments + "," json ","route_arguments +  join "," generate_route_ generate_route_name  ","route_arguments +  + "]}," JsRoutes build_routes_if_match":{"type":"method","name":"build_routes_if_match","children":[],"call":[" route_js ","(false) map "," route_js_arguments ","parent_route try try ","parent_route try ","(send\n  (lvar :parent_route) :try\n  (sym :name)) compact ","route name "," any_match? ! "," any_match? ","@configuration [] ","(send\n  (lvar :parent_route) :try\n  (sym :(send\n  (lvar :parent_route) :try\n  (sym :name)) compact )) compact ","route (send\n  (lvar :parent_route) :try\n  (sym :name)) compact  "]}," JsRoutes routes_list":{"type":"method","name":"routes_list","children":[],"call":["(send\n  (send\n    (send nil :named_routes) :sort_by\n    (block-pass\n      (sym :first))) :flat_map) compact "," build_routes_if_match + "," mounted_app_routes "," build_routes_if_match "," named_routes sort_by flat_map "," named_routes sort_by "," named_routes "," route_helpers_if_match + "," route_helpers_if_match "]}," JsRoutes routes_export":{"type":"method","name":"routes_export","children":[],"call":["(send\n  (array\n    (splat\n      (const nil :STATIC_EXPORTS))\n    (splat\n      (send nil :routes_list))) :map) join ","(splat\n  (const nil :STATIC_EXPORTS)) map "," routes_list ","@configuration esm? ","(send\n  (array\n    (splat\n      (send nil :static_exports))\n    (splat\n      (send nil :routes_list))) :map) join "," export_separator ","(splat\n  (send nil :static_exports)) map "," static_exports ","@configuration modern? "]}," JsRoutes routes_object":{"type":"method","name":"routes_object","children":[],"call":["{\n + + ","{\n + ","properties join ","(begin\n  (lvar :comment)) indent "," routes_list map "," routes_list "," json ","@configuration esm? ","@configuration modern? "]}," JsRoutes Configuration esm?":{"type":"method","name":"esm?","children":[],"call":[" module_type === "," module_type "]}," JsRoutes JsRoute serialize_spec":{"type":"method","name":"serialize_spec","children":[],"call":["(send\n  (const nil :NODE_TYPES) :[]\n  (send\n    (lvar :spec) :type)) compact "," serialize ","spec right ","spec respond_to? ","spec left ","NODE_TYPES  [] ","spec type "]}," JsRoutes JsRoute serialize":{"type":"method","name":"serialize","children":[],"call":[" serialize_spec ","NODE_TYPES  [] ","result [] is_a? ","result [] ","spec tr ","spec is_a? ","parent_spec type != ","parent_spec type "," serialize_spec  [] is_a? "," serialize_spec  [] "]}," JsRoutes JsRoute apply_case":{"type":"method","name":"apply_case","children":[],"call":["value camelize ","@configuration [] ","values compact map join ","values compact map ","values compact ","values compact map join  camelize ","values compact map join s compact map join ","values compact map join s compact map ","values compact map join s compact "]}," JsRoutes JsRoute match?":{"type":"method","name":"match?","children":[],"call":[" base_name =~ "," base_name "," Array any? "," Array "]}," JsRoutes JsRoute documentation_params":{"type":"method","name":"documentation_params","children":[],"call":["(send\n  (send nil :required_parts) :map) join "," apply_case "," required_parts map "," required_parts "]}," JsRoutes JsRoute base_arguments":{"type":"method","name":"base_arguments","children":[],"call":[" json ","(lvar :parts_table) map "," serialize "," parent_spec "," spec ","parts_table [] []= ","parts_table [] ","URL_OPTIONS  include? ","FILTERED_DEFAULT_PARTS  exclude? "," route defaults each "," route defaults "," route "," required_parts include? "," required_parts "," route parts each "," route parts "," parts_table "]}," JsRoutes JsRoute required_parts":{"type":"method","name":"required_parts","children":[],"call":[" route required_parts "," route "]}," JsRoutes JsRoute documentation":{"type":"method","name":"documentation","children":[],"call":[" documentation_params "," spec "," parent_spec ","@configuration [] "]}," JsRoutes JsRoute helper_name":{"type":"method","name":"helper_name","children":[],"call":[" base_name "," apply_case ","@configuration [] "]}," JsRoutes JsRoute json":{"type":"method","name":"json","children":[],"call":["JsRoutes  json "]}," JsRoutes JsRoute spec":{"type":"method","name":"spec","children":[],"call":[" route path spec "," route path "," route "]}," JsRoutes JsRoute parent_spec":{"type":"method","name":"parent_spec","children":[],"call":[" parent_route "]}," JsRoutes JsRoute base_name":{"type":"method","name":"base_name","children":[],"call":[" apply_case "," route name "," route "," parent_route ","(send\n  (send nil :parent_route) :name) join "," parent_route name "]}," JsRoutes JsRoute match_configuration?":{"type":"method","name":"match_configuration?","children":[],"call":[" match? ","@configuration [] "," match? ! "]}," JsRoutes JsRoute arguments":{"type":"method","name":"arguments","children":[],"call":[" base_arguments "," base_arguments + "," json "]}," JsRoutes JsRoute body":{"type":"method","name":"body","children":[],"call":[" arguments join "," arguments ","(send\n  (send nil :arguments\n    (lvar :absolute)) :map) join "," json "," arguments map "," definition_body ","@configuration dts? "]}," JsRoutes JsRoute helpers":{"type":"method","name":"helpers","children":[],"call":[" body "," helper_name "," documentation ","@configuration [] ! ","@configuration [] ","(false) map "," match_configuration? "," helper_types map "," helper_types "]}," JsRoutes JsRoute initialize":{"type":"method","name":"initialize","children":[],"call":[]}," JsRoutes route_helpers_if_match":{"type":"method","name":"route_helpers_if_match","children":[],"call":["JsRoute  new helpers ","JsRoute  new ","Route  new helpers ","Route  new "]}," JsRoutes JsRoute parts_table":{"type":"method","name":"parts_table","children":[],"call":["parts_table [] []= ","parts_table [] ","URL_OPTIONS  include? ","FILTERED_DEFAULT_PARTS  exclude? "," route defaults each "," route defaults "," route "," required_parts include? "," required_parts "," route parts each "," route parts "]}," JsRoutes Configuration verify":{"type":"method","name":"verify","children":[],"call":[" raise "," namespace "," module_type != "," module_type "]}," JsRoutes Configuration normalize":{"type":"method","name":"normalize","children":[],"call":[" module_type= "," module_type "]}," JsRoutes Configuration normalize_and_verify":{"type":"method","name":"normalize_and_verify","children":[],"call":[" verify "," normalize "]}," JsRoutes JsRoute optional_parts":{"type":"method","name":"optional_parts","children":[],"call":[" route path optional_names "," route path "," route "]}," JsRoutes JsRoute optional_parts_type":{"type":"method","name":"optional_parts_type","children":[],"call":["{ + + ","{ + ","(send\n  (send nil :optional_parts) :map) join "," optional_parts map "," optional_parts "]}," JsRoutes JsRoute definition_body":{"type":"method","name":"definition_body","children":[],"call":["args join indent ","args join ","args << "," optional_parts_type "," apply_case "," required_parts map "," required_parts "]}," JsRoutes JsRoute helper_types":{"type":"method","name":"helper_types","children":[],"call":["@configuration [] "," match_configuration? "]}," JsRoutes app_from_route":{"type":"method","name":"app_from_route","children":[],"call":["route app ","route app app ","route app respond_to? ","app app ","app respond_to? ","route route app  ","route route app  route app  ","route route app  respond_to? ","route app  route app  ","route app  respond_to? "]}," JsRoutes export_separator":{"type":"method","name":"export_separator","children":[],"call":["@configuration dts? "]}," JsRoutes prevent_types_export":{"type":"method","name":"prevent_types_export","children":[],"call":["@configuration dts? "]}," JsRoutes static_exports":{"type":"method","name":"static_exports","children":[],"call":["@configuration dts? ","(sym :configure) map "]}," JsRoutes js_variables":{"type":"method","name":"js_variables","children":[],"call":["@configuration esm? "," json ","@configuration module_type ","@configuration serializer ","@configuration special_options_key ","@configuration prefix ","@configuration default_url_options ","@configuration namespace "," application class to_s "," application class "," application ","ActionPack VERSION MINOR  == ","ActionPack VERSION MAJOR  == ","ActionPack  version "," routes_object "]}," JsRoutes definitions!":{"type":"method","name":"definitions!","children":[],"call":[" new generate! "," new "," configuration file "," configuration "," generate! "]}," JsRoutes Configuration default_file_name":{"type":"method","name":"default_file_name","children":[],"call":[" dts? "]}," JsRoutes Configuration output_file":{"type":"method","name":"output_file","children":[],"call":["Dir  exist? ! ","Dir  exist? ","webpacker_dir join ","sprockets_dir join "," default_file_name "," file ","Rails  root join ","Rails  root "," pathname ","Webpacker  config source_path ","Webpacker  config ","Rails  root join  join "," pathname  join ","Webpacker  config source_path  join "]}," JsRoutes Configuration source_file":{"type":"method","name":"source_file","children":[],"call":["File  dirname + + "," default_file_name ","File  dirname + ","File  dirname "]}," JsRoutes Configuration modern?":{"type":"method","name":"modern?","children":[],"call":[" dts? "," esm? "]}," JsRoutes Configuration dts?":{"type":"method","name":"dts?","children":[],"call":[" module_type === "," module_type "]}," JsRoutes definitions":{"type":"method","name":"definitions","children":[],"call":[" generate "]}," JsRoutes Configuration require_esm":{"type":"method","name":"require_esm","children":[],"call":[" raise "," modern? "]}," Webpacker loader_content":{"type":"method","name":"loader_content","children":[],"call":[]}," Webpacker pack_content":{"type":"method","name":"pack_content","children":[],"call":[]}," Webpacker create_webpack":{"type":"method","name":"create_webpack","children":[],"call":[" run ","Rails  root join ","Rails  root "," inject_into_file "," pack_content "," loader_content "," copy_file "," application_js_path ","Webpacker  config source_path ","Webpacker  config "," application_js_ application_js_path  ","Webpacker  config source_ application_js_path  "]}," JsRoutes Middleware routes_mtime":{"type":"method","name":"routes_mtime","children":[],"call":["File  mtime "]}," JsRoutes Middleware update_js_routes":{"type":"method","name":"update_js_routes","children":[],"call":["JsRoutes  definitions! ","JsRoutes  generate! ","new_mtime == "," routes_mtime "," regenerate "," routes_mtime  == "]}," JsRoutes Middleware call":{"type":"method","name":"call","children":[],"call":["@app call "," update_js_routes "]}," JsRoutes Middleware initialize":{"type":"method","name":"initialize","children":[],"call":["Rails  root join ","Rails  root "]}," Middleware middleware_content":{"type":"method","name":"middleware_content","children":[],"call":[]}," Middleware pack_content":{"type":"method","name":"pack_content","children":[],"call":[]}," Middleware create_middleware":{"type":"method","name":"create_middleware","children":[],"call":[" inject_into_file "," middleware_content "," pack_content "," copy_file ","JsRoutes  definitions! ","JsRoutes  generate! "," gitignore_content "," rakefile_content "," application_js_path "," application_js_ application_js_path  "]}," JsRoutes Configuration pathname":{"type":"method","name":"pathname","children":[],"call":["Pathname  new ","File  join "]}," JsRoutes Route serialize_spec":{"type":"method","name":"serialize_spec","children":[],"call":["(send\n  (const nil :NODE_TYPES) :[]\n  (send\n    (lvar :spec) :type)) compact "," serialize ","spec right ","spec respond_to? ","spec left ","NODE_TYPES  [] ","spec type "]}," JsRoutes Route serialize":{"type":"method","name":"serialize","children":[],"call":[" serialize_spec ","NODE_TYPES  [] ","parent_spec type != ","parent_spec type ","result [] is_a? ","result [] ","spec tr ","spec is_a? "," serialize_spec  [] is_a? "," serialize_spec  [] "]}," JsRoutes Route apply_case":{"type":"method","name":"apply_case","children":[],"call":["value camelize ","@configuration [] ","values compact map join ","values compact map ","values compact ","values compact map join  camelize ","values compact map join s compact map join ","values compact map join s compact map ","values compact map join s compact "]}," JsRoutes Route match?":{"type":"method","name":"match?","children":[],"call":[" base_name =~ "," base_name "," Array any? "," Array "]}," JsRoutes Route documentation_params":{"type":"method","name":"documentation_params","children":[],"call":["(send\n  (send nil :required_parts) :map) join "," apply_case "," required_parts map "," required_parts "]}," JsRoutes Route parts_table":{"type":"method","name":"parts_table","children":[],"call":["parts_table [] []= ","parts_table [] ","URL_OPTIONS  include? ","FILTERED_DEFAULT_PARTS  exclude? "," route defaults each "," route defaults "," route "," required_parts include? "," required_parts "," route parts each "," route parts "]}," JsRoutes Route base_arguments":{"type":"method","name":"base_arguments","children":[],"call":[" serialize "," parent_spec "," spec "," parts_table "]}," JsRoutes Route optional_parts":{"type":"method","name":"optional_parts","children":[],"call":[" route path optional_names "," route path "," route "]}," JsRoutes Route required_parts":{"type":"method","name":"required_parts","children":[],"call":[" route required_parts "," route "]}," JsRoutes Route documentation":{"type":"method","name":"documentation","children":[],"call":[" documentation_params "," spec "," parent_spec ","@configuration [] "]}," JsRoutes Route helper_name":{"type":"method","name":"helper_name","children":[],"call":[" apply_case "," base_name ","@configuration [] "]}," JsRoutes Route json":{"type":"method","name":"json","children":[],"call":["JsRoutes  json "]}," JsRoutes Route spec":{"type":"method","name":"spec","children":[],"call":[" route path spec "," route path "," route "]}," JsRoutes Route parent_spec":{"type":"method","name":"parent_spec","children":[],"call":[" parent_route "]}," JsRoutes Route base_name":{"type":"method","name":"base_name","children":[],"call":[" route name "," route ","(send\n  (send nil :parent_route) :name) join "," parent_route name "," parent_route "]}," JsRoutes Route match_configuration?":{"type":"method","name":"match_configuration?","children":[],"call":[" match? ","@configuration [] "," match? ! "]}," JsRoutes Route arguments":{"type":"method","name":"arguments","children":[],"call":[" base_arguments "]}," JsRoutes Route optional_parts_type":{"type":"method","name":"optional_parts_type","children":[],"call":["{ + + ","{ + ","(send\n  (send nil :optional_parts) :map) join "," optional_parts map "," optional_parts "]}," JsRoutes Route definition_body":{"type":"method","name":"definition_body","children":[],"call":["args join indent ","args join ","args << "," optional_parts_type "," apply_case "," required_parts map "," required_parts "]}," JsRoutes Route body":{"type":"method","name":"body","children":[],"call":["(send\n  (send nil :arguments\n    (lvar :absolute)) :map) join "," json "," arguments map "," arguments "," definition_body ","@configuration dts? ","@configuration esm? "]}," JsRoutes Route helper_types":{"type":"method","name":"helper_types","children":[],"call":["@configuration [] "," match_configuration? "]}," JsRoutes Route helpers":{"type":"method","name":"helpers","children":[],"call":[" body "," helper_name "," documentation "," helper_types map "," helper_types "]}," JsRoutes Route initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Middleware gitignore_content":{"type":"method","name":"gitignore_content","children":[],"call":["banner + ","(send\n  (array\n    (hash)\n    (hash\n      (pair\n        (sym :module_type)\n        (str \"DTS\")))) :map) join ","File  join + ","File  join ","JsRoutes  new configuration output_file ","JsRoutes  new configuration ","JsRoutes  new ","(hash) map ","JsRoutes Configuration  new output_file ","JsRoutes Configuration  new "]}," Middleware rakefile_content":{"type":"method","name":"rakefile_content","children":[],"call":["g name= ","Bundler  load gems find ","Bundler  load gems ","Bundler  load "]}," JsRoutes Instance route_helpers_if_match":{"type":"method","name":"route_helpers_if_match","children":[],"call":["Route  new helpers ","Route  new "]}," JsRoutes Instance app_from_route":{"type":"method","name":"app_from_route","children":[],"call":["app app ","app respond_to? ","route app ","route app  route app  ","route app  respond_to? ","route route app  "]}," JsRoutes Instance mounted_app_routes":{"type":"method","name":"mounted_app_routes","children":[],"call":[" route_helpers_if_match ","rails_engine_app routes named_routes flat_map ","rails_engine_app routes named_routes ","rails_engine_app routes ","route path anchored ! ","route path anchored ","route path ","rails_engine_app superclass == ","rails_engine_app superclass ","rails_engine_app respond_to? "," app_from_route "," app_from_route  routes named_routes flat_map "," app_from_route  routes named_routes "," app_from_route  routes "," app_from_route  superclass == "," app_from_route  superclass "," app_from_route  respond_to? "]}," JsRoutes Instance routes_list":{"type":"method","name":"routes_list","children":[],"call":[" route_helpers_if_match + "," mounted_app_routes "," route_helpers_if_match "," named_routes sort_by flat_map "," named_routes sort_by "," named_routes "]}," JsRoutes Instance export_separator":{"type":"method","name":"export_separator","children":[],"call":["@configuration dts? "]}," JsRoutes Instance prevent_types_export":{"type":"method","name":"prevent_types_export","children":[],"call":["@configuration dts? "]}," JsRoutes Instance routes_export":{"type":"method","name":"routes_export","children":[],"call":["(send\n  (array\n    (splat\n      (send nil :static_exports))\n    (splat\n      (send nil :routes_list))) :map) join "," export_separator ","(splat\n  (send nil :static_exports)) map "," routes_list "," static_exports ","@configuration modern? "]}," JsRoutes Instance static_exports":{"type":"method","name":"static_exports","children":[],"call":["@configuration dts? ","(sym :configure) map "]}," JsRoutes Instance routes_object":{"type":"method","name":"routes_object","children":[],"call":["{\n + + ","{\n + ","properties join ","(begin\n  (lvar :comment)) indent "," routes_list map "," routes_list "," json ","@configuration modern? "]}," JsRoutes Instance named_routes":{"type":"method","name":"named_routes","children":[],"call":[" application routes named_routes to_a "," application routes named_routes "," application routes "," application "]}," JsRoutes Instance json":{"type":"method","name":"json","children":[],"call":["JsRoutes  json "]}," JsRoutes Instance application":{"type":"method","name":"application","children":[],"call":["@configuration application "]}," JsRoutes Instance js_variables":{"type":"method","name":"js_variables","children":[],"call":["@configuration esm? "," json ","@configuration module_type ","@configuration serializer ","@configuration special_options_key ","@configuration prefix ","@configuration default_url_options ","@configuration namespace "," application class to_s "," application class "," application ","ActionPack VERSION MINOR  == ","ActionPack VERSION MAJOR  == ","ActionPack  version "," routes_object "," wrapper_variable ","ActionPack VERSION MAJOR  < "]}," JsRoutes Instance generate!":{"type":"method","name":"generate!","children":[],"call":["f write ","File  open ","File  read == ","File  read ","File  exist? "," generate ","Rails  root join ","@configuration output_file ","Rails  root ","Rails  configuration after_initialize ","Rails  configuration "]}," JsRoutes Instance generate":{"type":"method","name":"generate","children":[],"call":["content + + "," prevent_types_export ","content + "," routes_export "," raise ","js gsub! ","value to_s "," js_variables inject "," js_variables ","@configuration dts? ! ","@configuration dts? ","File  read ","@configuration source_file "," application reload_routes! "," application "," application respond_to? "," named_routes empty? "," named_routes ","File  read  + + ","File  read  + "]}," JsRoutes Instance initialize":{"type":"method","name":"initialize","children":[],"call":["JsRoutes  configuration merge ","JsRoutes  configuration "]}," JsRoutes Instance wrapper_variable":{"type":"method","name":"wrapper_variable","children":[],"call":["namespace include? ","@configuration namespace ","@configuration module_type ","@configuration namespace  include? ","@configuration @configuration namespace  "]}," JsRoutes Middleware regenerate":{"type":"method","name":"regenerate","children":[],"call":["JsRoutes  definitions! ","JsRoutes  generate! "]}," JsRoutes Engine install_sprockets!":{"type":"method","name":"install_sprockets!","children":[],"call":[]}," Base application_js_path":{"type":"method","name":"application_js_path","children":[],"call":["File  exists? ","Rails  root join ","Rails  root ","(str \"app/javascript/packs/application.js\") find ","File  exist? "]}}