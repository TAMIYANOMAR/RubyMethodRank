{" Pusher Signature Request identical?":{"type":"method","name":"identical?","children":[],"call":["(send\n  (send\n    (send\n      (lvar :a) :bytes) :zip\n    (send\n      (lvar :b) :bytes)) :reduce\n  (int 0)) == ","a ^ ","a bytes zip reduce ","a bytes zip ","b bytes ","a bytes ","a bytesize == ","b bytesize ","a bytesize ","b nil? ","a nil? "]}," Pusher Signature Request validate_signature!":{"type":"method","name":"validate_signature!","children":[],"call":[" raise ","@auth_hash [] inspect ","@auth_hash [] "," string_to_sign inspect "," string_to_sign "," identical? "," signature "]}," Pusher Signature Request validate_timestamp!":{"type":"method","name":"validate_timestamp!","children":[],"call":[" raise ","Time  now utc strftime ","Time  now utc ","Time  now ","Time  at utc strftime ","Time  at utc ","Time  at ","timestamp to_i ","error >= ","(send\n  (send\n    (lvar :timestamp) :to_i) :-\n  (send\n    (send\n      (const nil :Time) :now) :to_i)) abs ","timestamp to_i - ","Time  now to_i ","@auth_hash [] ","grace nil? ","@auth_hash []  to_i ","(send\n  (send\n    (lvar :timestamp) :to_i) :-\n  (send\n    (send\n      (const nil :Time) :now) :to_i)) abs  >= ","(send\n  (send\n    (lvar :@auth_hash [] ) :to_i) :-\n  (send\n    (send\n      (const nil :Time) :now) :to_i)) abs ","@auth_hash []  to_i - "]}," Pusher Signature Request validate_version!":{"type":"method","name":"validate_version!","children":[],"call":[" raise ","version == ","@auth_hash [] ","@auth_hash []  == "]}," Pusher Signature Request parameter_string":{"type":"method","name":"parameter_string","children":[],"call":["(send\n  (send\n    (lvar :hash) :sort) :map) join ","QueryEncoder  encode_param_without_escaping ","hash sort map ","hash sort ","hash delete ","hash []= ","k to_s downcase ","k to_s ","param_hash each ","@query_hash merge ","@query_hash merge  each "]}," Pusher Signature Request string_to_sign":{"type":"method","name":"string_to_sign","children":[],"call":["(ivar :@method) join "," parameter_string "]}," Pusher Signature Request signature":{"type":"method","name":"signature","children":[],"call":["OpenSSL HMAC  hexdigest "," string_to_sign ","token secret ","OpenSSL Digest SHA256  new ","OpenSSL HMAC  hexOpenSSL Digest SHA256  new  "]}," Pusher Signature Request signed_params":{"type":"method","name":"signed_params","children":[],"call":["@query_hash merge "," auth_hash "]}," Pusher Signature Request auth_hash":{"type":"method","name":"auth_hash","children":[],"call":[" raise "]}," Pusher Signature Request authenticate_async":{"type":"method","name":"authenticate_async","children":[],"call":["df fail ","AuthenticationError  new ","token_df errback ","df succeed "," authenticate_by_token! ","token_df callback ","@auth_hash [] ","EM DefaultDeferrable  new "," raise "," block_given? ","EM DefaultDeferrable  new  fail ","token_EM DefaultDeferrable  new  errback ","EM DefaultDeferrable  new  succeed ","token_EM DefaultDeferrable  new  callback "]}," Pusher Signature Request authenticate":{"type":"method","name":"authenticate","children":[],"call":[" authenticate_by_token! "," raise ","@auth_hash [] "," block_given? "]}," Pusher Signature Request authenticate_by_token":{"type":"method","name":"authenticate_by_token","children":[],"call":[" authenticate_by_token! "]}," Pusher Signature Request authenticate_by_token!":{"type":"method","name":"authenticate_by_token!","children":[],"call":[" validate_signature! "," validate_timestamp! "," validate_version! "," raise ","token secret empty? ","token secret ","token secret nil? "]}," Pusher Signature Request sign":{"type":"method","name":"sign","children":[],"call":["@auth_hash []= "," signature ","Time  now to_i to_s ","Time  now to_i ","Time  now ","token key "]}," Pusher Signature Request initialize":{"type":"method","name":"initialize","children":[],"call":["method upcase ","query_hash []= ","auth_hash []= ","k [] == ","k [] ","key to_s downcase ","key to_s ","query each "," raise ","query kind_of? ","path kind_of? ","key to_s downcase  [] == ","key to_s downcase  [] ","key to_s downcase ey to_s downcase ","key to_s downcase ey to_s ","query key to_s downcase ind_of? ","path key to_s downcase ind_of? "]}," Pusher Signature Token sign":{"type":"method","name":"sign","children":[],"call":["request sign "]}," Pusher Signature Token initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Pusher Signature QueryEncoder bytesize":{"type":"method","name":"bytesize","children":[],"call":["string size ","string bytesize "]}," Pusher Signature QueryEncoder escape":{"type":"method","name":"escape","children":[],"call":["% + ","1 unpack join upcase ","1 unpack join ","1 unpack ","H2 * "," bytesize ","s to_s gsub ","s to_s ","EscapeUtils  escape_url "]}," Pusher Signature QueryEncoder encode_param_without_escaping":{"type":"method","name":"encode_param_without_escaping","children":[],"call":["(send\n  (lvar :v) :map) join ","k + + ","k + ","v map ","v is_a? "]}," Pusher Signature QueryEncoder encode_param":{"type":"method","name":"encode_param","children":[],"call":[" escape + + "," escape "," escape + ","(send\n  (lvar :v) :map) join ","v map ","v is_a? "]}}