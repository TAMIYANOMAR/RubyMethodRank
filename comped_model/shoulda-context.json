{" Proc bind":{"type":"method","name":"bind","children":[],"call":["(send\n  (begin\n    (sclass\n      (lvar :object)\n      (self))) :class_eval) bind "," remove_method "," instance_method "," define_method ","time usec ","time to_i ","(sclass\n  (lvar :object)\n  (self)) class_eval ","Time  now "," remove_ instance_method  "," instance_ instance_method  "," define_ instance_method  "]}," Shoulda Context Context method_missing":{"type":"method","name":"method_missing","children":[],"call":[" test_unit_class send "," test_unit_class "]}," Shoulda Context Context build":{"type":"method","name":"build","children":[],"call":[" print_should_eventuallys ","context build "," subcontexts each "," subcontexts "," create_test_from_should_hash "," shoulds each "," shoulds "]}," Shoulda Context Context print_should_eventuallys":{"type":"method","name":"print_should_eventuallys","children":[],"call":[" puts ","  * DEFERRED:  + ","(send nil :full_name) flatten join ","(send nil :full_name) flatten ","should [] "," full_name "," should_eventuallys each "," should_eventuallys "]}," Shoulda Context Context run_all_teardown_blocks":{"type":"method","name":"run_all_teardown_blocks","children":[],"call":[" parent run_all_teardown_blocks "," parent "," am_subcontext? ","teardown_block bind call ","teardown_block bind "," teardown_blocks reverse each "," teardown_blocks reverse "," teardown_blocks ","binding instance_exec ","binding respond_to? "]}," Shoulda Context Context run_current_setup_blocks":{"type":"method","name":"run_current_setup_blocks","children":[],"call":["setup_block bind call ","setup_block bind "," setup_blocks each "," setup_blocks ","binding instance_exec ","binding respond_to? "]}," Shoulda Context Context run_parent_setup_blocks":{"type":"method","name":"run_parent_setup_blocks","children":[],"call":[" parent run_all_setup_blocks "," parent "," am_subcontext? "]}," Shoulda Context Context run_all_setup_blocks":{"type":"method","name":"run_all_setup_blocks","children":[],"call":[" run_current_setup_blocks "," run_parent_setup_blocks "]}," Shoulda Context Context create_test_from_should_hash":{"type":"method","name":"create_test_from_should_hash","children":[],"call":["context run_all_teardown_blocks ","should [] bind call ","should [] bind ","should [] ","context run_current_setup_blocks ","context run_parent_setup_blocks "," test_unit_class send "," test_unit_class "," test_methods [] []= ","test_name to_s "," test_methods [] "," test_methods "," warn "," test_methods [] [] ","(str \"test:\") flatten join to_sym ","(str \"test:\") flatten join ","(str \"test:\") flatten "," full_name "," raise "," instance_exec "," respond_to? ","(send nil :test_name_prefix) flatten join to_sym ","(send nil :test_name_prefix) flatten join ","(send nil :test_name_prefix) flatten "," test_name_prefix "," test_unit_class class_eval ","should [] source_location ","Shoulda Context DuplicateTestError  new "," build_test_name_from "," test_unit_class __send__ ","(str \"test:\") flatten join to_sym  to_s ","(send nil :test_name_prefix) flatten join to_sym  to_s "," build_test_name_from  to_s ","(send nil :(str \"test:\") flatten join to_sym _prefix) flatten join to_sym ","(send nil :(send nil :test_name_prefix) flatten join to_sym _prefix) flatten join to_sym ","(send nil : build_test_name_from _prefix) flatten join to_sym ","(send nil :(str \"test:\") flatten join to_sym _prefix) flatten join ","(send nil :(send nil :test_name_prefix) flatten join to_sym _prefix) flatten join ","(send nil : build_test_name_from _prefix) flatten join ","(send nil :(str \"test:\") flatten join to_sym _prefix) flatten ","(send nil :(send nil :test_name_prefix) flatten join to_sym _prefix) flatten ","(send nil : build_test_name_from _prefix) flatten "," (str \"test:\") flatten join to_sym _prefix "," (send nil :test_name_prefix) flatten join to_sym _prefix ","  build_test_name_from _prefix "," build_(str \"test:\") flatten join to_sym _from "," build_(send nil :test_name_prefix) flatten join to_sym _from "," build_ build_test_name_from _from "]}," Shoulda Context Context test_methods":{"type":"method","name":"test_methods","children":[],"call":["h []= ","Hash  [] ","k instance_methods map ","k instance_methods ","Hash  new "]}," Shoulda Context Context test_unit_class":{"type":"method","name":"test_unit_class","children":[],"call":[" parent "," parent test_unit_class "," am_subcontext? "]}," Shoulda Context Context am_subcontext?":{"type":"method","name":"am_subcontext?","children":[],"call":[" parent is_a? "," class "," parent "]}," Shoulda Context Context full_name":{"type":"method","name":"full_name","children":[],"call":["(lvar :parent_name) join strip ","(lvar :parent_name) join "," name "," parent full_name "," parent "," am_subcontext? ","(lvar : parent full_name ) join strip ","(lvar : parent full_name ) join "]}," Shoulda Context Context subject_block":{"type":"method","name":"subject_block","children":[],"call":[" parent subject_block "," parent "]}," Shoulda Context Context subject":{"type":"method","name":"subject","children":[],"call":[" subject_block= "]}," Shoulda Context Context should_eventually":{"type":"method","name":"should_eventually","children":[],"call":[" should_eventuallys << "," should_eventuallys "]}," Shoulda Context Context should_not":{"type":"method","name":"should_not","children":[],"call":[" shoulds << "," shoulds "," assert_rejects "," subject "," lambda ","matcher description "]}," Shoulda Context Context should":{"type":"method","name":"should","children":[],"call":[" should_eventuallys << "," should_eventuallys "," shoulds << ","options [] "," shoulds "," assert_accepts "," subject "," lambda ","name_or_matcher description ","name_or_matcher respond_to? ","name_or_matcher description _or_matcher description ","name_or_matcher description _or_matcher respond_to? "]}," Shoulda Context Context teardown":{"type":"method","name":"teardown","children":[],"call":[" teardown_blocks << "," teardown_blocks "]}," Shoulda Context Context setup":{"type":"method","name":"setup","children":[],"call":[" setup_blocks << "," setup_blocks "]}," Shoulda Context Context context":{"type":"method","name":"context","children":[],"call":[" subcontexts << ","Context  new "," subcontexts "]}," Shoulda Context Context merge_block":{"type":"method","name":"merge_block","children":[],"call":["blk bind call ","blk bind "," instance_exec "," respond_to? "]}," Shoulda Context Context initialize":{"type":"method","name":"initialize","children":[],"call":["Shoulda Context  remove_context "," warn "," full_name "," merge_block "," block_given? "," subcontexts= "," should_eventuallys= "," shoulds= "," teardown_blocks= "," setup_blocks= "," parent= "," name= ","Shoulda Context  add_context "," subject_block= "]}," Shoulda Context InstanceMethods construct_subject":{"type":"method","name":"construct_subject","children":[],"call":[" get_instance_of "," class described_type "," class "," instance_eval "," subject_block "]}," Shoulda Context InstanceMethods instance_variable_name_for":{"type":"method","name":"instance_variable_name_for","children":[],"call":["klass to_s split last underscore ","klass to_s split last ","klass to_s split ","klass to_s "]}," Shoulda Context InstanceMethods get_instance_of":{"type":"method","name":"get_instance_of","children":[],"call":["object_or_klass new ","object_or_klass is_a? "]}," Shoulda Context InstanceMethods subject_block":{"type":"method","name":"subject_block","children":[],"call":[" class subject_block "," class ","@shoulda_context subject_block "]}," Shoulda Context InstanceMethods subject":{"type":"method","name":"subject","children":[],"call":[" construct_subject "]}," Shoulda Context ClassMethods subject_block":{"type":"method","name":"subject_block","children":[],"call":[]}," Shoulda Context ClassMethods subject":{"type":"method","name":"subject","children":[],"call":[]}," Shoulda Context ClassMethods described_type":{"type":"method","name":"described_type","children":[],"call":["parent const_get "," name gsub split inject "," name gsub split "," name gsub "," name "]}," Shoulda Context ClassMethods context":{"type":"method","name":"context","children":[],"call":["context build ","Shoulda Context Context  new ","Shoulda Context  current_context context ","Shoulda Context  current_context ","Shoulda Context Context  new  build ","Shoulda Context  current_Shoulda Context Context  new  Shoulda Context Context  new  ","Shoulda Context  current_Shoulda Context Context  new  "]}," Shoulda Context ClassMethods should_eventually":{"type":"method","name":"should_eventually","children":[],"call":["context build "," should_eventually ","Shoulda Context Context  new "," name gsub "," name "]}," Shoulda Context ClassMethods before_should":{"type":"method","name":"before_should","children":[],"call":[" assert "," should "]}," Shoulda Context ClassMethods should_not":{"type":"method","name":"should_not","children":[],"call":["context build "," should_not ","Shoulda Context Context  new "," name gsub "," name ","Shoulda Context  current_context should_not ","Shoulda Context  current_context "]}," Shoulda Context ClassMethods should":{"type":"method","name":"should","children":[],"call":["context build "," should ","Shoulda Context Context  new "," name gsub "," name ","Shoulda Context  current_context should ","Shoulda Context  current_context "]}," Shoulda Context remove_context":{"type":"method","name":"remove_context","children":[],"call":[" contexts pop "," contexts "]}," Shoulda Context add_context":{"type":"method","name":"add_context","children":[],"call":[" contexts push "," contexts "]}," Shoulda Context current_context":{"type":"method","name":"current_context","children":[],"call":[" contexts last "," contexts "]}," Shoulda Context contexts":{"type":"method","name":"contexts","children":[],"call":[]}," Shoulda autoload_macros":{"type":"method","name":"autoload_macros","children":[],"call":[]}," Shoulda Context Assertions assert_rejects":{"type":"method","name":"assert_rejects","children":[],"call":[" assert_block ","matcher negative_failure_message "," assert_match ","matcher failure_message ","options [] ","matcher matches? ! ","matcher matches? ","matcher does_not_match? ","matcher respond_to? ","matcher in_context ","matcher failure_message_for_should_not ","matcher failure_message_for_should "," safe_assert_block ","matcher failure_message_when_negated ","matcher negative_failure_matcher negative_failure_message  ","matcher negative_failure_matcher failure_message_for_should_not  ","matcher negative_failure_matcher failure_message  ","matcher negative_failure_matcher failure_message_for_should  ","matcher failure_matcher negative_failure_message  ","matcher failure_matcher failure_message_for_should_not  ","matcher failure_matcher failure_message  ","matcher failure_matcher failure_message_for_should  ","matcher does_matcher matches? ! ? ","matcher does_matcher does_not_match? ? ","matcher failure_matcher negative_failure_message _for_should_not ","matcher failure_matcher failure_message_for_should_not _for_should_not ","matcher failure_matcher failure_message _for_should_not ","matcher failure_matcher failure_message_for_should _for_should_not ","matcher failure_matcher negative_failure_message _for_should ","matcher failure_matcher failure_message_for_should_not _for_should ","matcher failure_matcher failure_message _for_should ","matcher failure_matcher failure_message_for_should _for_should ","matcher failure_matcher negative_failure_message _when_negated ","matcher failure_matcher failure_message_for_should_not _when_negated ","matcher failure_matcher failure_message _when_negated ","matcher failure_matcher failure_message_for_should _when_negated "]}," Shoulda Context Assertions assert_accepts":{"type":"method","name":"assert_accepts","children":[],"call":[" assert_block ","matcher failure_message "," assert_match ","matcher negative_failure_message ","options [] ","matcher matches? ","matcher in_context ","matcher respond_to? ","matcher failure_message_for_should ","matcher failure_message_for_should_not "," safe_assert_block ","matcher failure_message_when_negated ","matcher failure_matcher failure_message  ","matcher failure_matcher failure_message_for_should  ","matcher failure_matcher negative_failure_message  ","matcher failure_matcher failure_message_for_should_not  ","matcher negative_failure_matcher failure_message  ","matcher negative_failure_matcher failure_message_for_should  ","matcher negative_failure_matcher negative_failure_message  ","matcher negative_failure_matcher failure_message_for_should_not  ","matcher failure_matcher failure_message _for_should ","matcher failure_matcher failure_message_for_should _for_should ","matcher failure_matcher negative_failure_message _for_should ","matcher failure_matcher failure_message_for_should_not _for_should ","matcher failure_matcher failure_message _for_should_not ","matcher failure_matcher failure_message_for_should _for_should_not ","matcher failure_matcher negative_failure_message _for_should_not ","matcher failure_matcher failure_message_for_should_not _for_should_not ","matcher failure_matcher failure_message _when_negated ","matcher failure_matcher failure_message_for_should _when_negated ","matcher failure_matcher negative_failure_message _when_negated ","matcher failure_matcher failure_message_for_should_not _when_negated "]}," Shoulda Context Assertions assert_does_not_contain":{"type":"method","name":"assert_does_not_contain","children":[],"call":[" assert ","collection include? ! ","collection include? ","(send\n  (lvar :collection) :detect) ! ","e =~ ","collection detect ","(begin\n  (send\n    (lvar :x) :inspect)) + ","collection to_a inspect ","collection to_a ","x inspect "," Array ","collection is_a? "," Array  include? ! "," Array  include? ","(send\n  (lvar : Array ) :detect) ! "," Array  detect "," Array  to_a inspect "," Array  to_a "," Array  is_a? "]}," Shoulda Context Assertions assert_contains":{"type":"method","name":"assert_contains","children":[],"call":[" assert ","collection include? ","e =~ ","collection detect ","collection to_a inspect ","collection to_a ","x inspect "," Array ","collection is_a? "," Array  include? "," Array  detect "," Array  to_a inspect "," Array  to_a "," Array  is_a? "]}," Shoulda Context Assertions assert_same_elements":{"type":"method","name":"assert_same_elements","children":[],"call":[" assert_equal "," assert ","(send\n  (lvar :a2) :select) size ","i == ","a2 select ","h [] ","a2 inject ","(send\n  (lvar :a1) :select) size ","a1 select ","a1 inject "," assert_respond_to ","a inspect ","(lvar :a1) each ","(sym :select) each ","h []= "]}," ShouldaContextLoadable included":{"type":"method","name":"included","children":[],"call":[]}," Shoulda Context Assertions safe_assert_block":{"type":"method","name":"safe_assert_block","children":[],"call":[" assert "," assert_block "," respond_to? "]}," Shoulda Context test_framework_test_cases":{"type":"method","name":"test_framework_test_cases","children":[],"call":[]}," Shoulda Context TestFrameworkDetection test_framework_test_cases":{"type":"method","name":"test_framework_test_cases","children":[],"call":[]}," Shoulda Context TestFrameworkDetection detected_test_framework_test_cases":{"type":"method","name":"detected_test_framework_test_cases","children":[],"call":[]}," Shoulda Context TestFrameworkDetection resolve_framework":{"type":"method","name":"resolve_framework","children":[],"call":[]}," Shoulda Context TestFrameworkDetection possible_test_frameworks":{"type":"method","name":"possible_test_frameworks","children":[],"call":[]}," Shoulda Context Context test_name_prefix":{"type":"method","name":"test_name_prefix","children":[],"call":[]}," format_rerun_snippet":{"type":"method","name":"format_rerun_snippet","children":[],"call":[" relative_path_for "," executable ","result method source_location ","result method ","result name ","result source_location ","result respond_to? "]}," Shoulda Context DSL InstanceMethods construct_subject":{"type":"method","name":"construct_subject","children":[],"call":[" get_instance_of "," class described_type "," class "," instance_eval "," subject_block "]}," Shoulda Context DSL InstanceMethods instance_variable_name_for":{"type":"method","name":"instance_variable_name_for","children":[],"call":["klass to_s split last underscore ","klass to_s split last ","klass to_s split ","klass to_s "]}," Shoulda Context DSL InstanceMethods get_instance_of":{"type":"method","name":"get_instance_of","children":[],"call":["object_or_klass new ","object_or_klass is_a? "]}," Shoulda Context DSL InstanceMethods subject_block":{"type":"method","name":"subject_block","children":[],"call":[" class subject_block "," class ","@shoulda_context subject_block "]}," Shoulda Context DSL InstanceMethods subject":{"type":"method","name":"subject","children":[],"call":[" construct_subject "]}," Shoulda Context DSL ClassMethods subject_block":{"type":"method","name":"subject_block","children":[],"call":[]}," Shoulda Context DSL ClassMethods subject":{"type":"method","name":"subject","children":[],"call":[]}," Shoulda Context DSL ClassMethods described_type":{"type":"method","name":"described_type","children":[],"call":["parent const_get "," name gsub split inject "," name gsub split "," name gsub "," name "]}," Shoulda Context DSL ClassMethods context":{"type":"method","name":"context","children":[],"call":["context build ","Shoulda Context Context  new ","Shoulda Context  current_context context ","Shoulda Context  current_context ","Shoulda Context Context  new  build ","Shoulda Context  current_Shoulda Context Context  new  Shoulda Context Context  new  ","Shoulda Context  current_Shoulda Context Context  new  "]}," Shoulda Context DSL ClassMethods should_eventually":{"type":"method","name":"should_eventually","children":[],"call":["context build "," should_eventually ","Shoulda Context Context  new "," name gsub "," name "]}," Shoulda Context DSL ClassMethods before_should":{"type":"method","name":"before_should","children":[],"call":[" assert "," should "]}," Shoulda Context DSL ClassMethods should_not":{"type":"method","name":"should_not","children":[],"call":["context build "," should_not ","Shoulda Context Context  new "," name gsub "," name ","Shoulda Context  current_context should_not ","Shoulda Context  current_context "]}," Shoulda Context DSL ClassMethods should":{"type":"method","name":"should","children":[],"call":["context build "," should ","Shoulda Context Context  new "," name gsub "," name ","Shoulda Context  current_context should ","Shoulda Context  current_context "]}," Shoulda Context DSL included":{"type":"method","name":"included","children":[],"call":[]}," Shoulda Context Context build_test_name_from":{"type":"method","name":"build_test_name_from","children":[],"call":["(send nil :test_name_prefix) flatten join to_sym ","(send nil :test_name_prefix) flatten join ","(send nil :test_name_prefix) flatten ","should [] "," full_name "," test_name_prefix "]}," Shoulda Context extend":{"type":"method","name":"extend","children":[],"call":[]}," Shoulda Context include":{"type":"method","name":"include","children":[],"call":[]}," Shoulda Context configure":{"type":"method","name":"configure","children":[],"call":[]}}