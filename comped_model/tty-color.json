{" TTY Color tty?":{"type":"method","name":"tty?","children":[],"call":[" output tty? "," output "," output respond_to "," output respond_to? "]}," TTY Color mode":{"type":"method","name":"mode","children":[],"call":["Mode  new mode ","Mode  new "]}," TTY Color supports?":{"type":"method","name":"supports?","children":[],"call":["Support  new supports? ","Support  new "," verbose "]}," TTY Color Support from_env":{"type":"method","name":"from_env","children":[],"call":["@env include? ","@env key? ","(str \"COLORTERM\") any? ","ENV_VARS  any? "]}," TTY Color Support from_term":{"type":"method","name":"from_term","children":[],"call":["@env [] "]}," TTY Color Support from_tput":{"type":"method","name":"from_tput","children":[],"call":["(str \"tput colors 2>/dev/null\") to_i > ","(str \"tput colors 2>/dev/null\") to_i ","(begin\n  (lvar :cmd)) to_i > ","(begin\n  (lvar :cmd)) to_i ","TTY Color  command? ! ","TTY Color  command? "]}," TTY Color Support from_curses":{"type":"method","name":"from_curses","children":[],"call":[" warn ","curses_class close_screen ","curses_class has_colors? ","curses_class init_screen "," require ","TTY Color  windows? ","curses_class curses_class has_colors? s? "]}," TTY Color Support supports?":{"type":"method","name":"supports?","children":[],"call":["value == ","(lvasgn :value\n  (send nil :public_send\n    (lvar :from_check))) != "," public_send ","(str \"from_curses\") each ","TTY Color  tty? ","SOURCES  each "," public_send  == ","(lvasgn : public_send \n  (send nil :public_send\n    (lvar :from_check))) != "]}," TTY Color Support initialize":{"type":"method","name":"initialize","children":[],"call":["options fetch "]}," TTY Color Mode from_tput":{"type":"method","name":"from_tput","children":[],"call":["colors >= ","(str \"tput colors 2>/dev/null\") to_i ","TTY Color  command? ! ","TTY Color  command? ","(str \"tput colors 2>/dev/null\") to_i  >= ","(str \"tput (str \"tput colors 2>/dev/null\") to_i  2>/dev/null\") to_i "]}," TTY Color Mode from_term":{"type":"method","name":"from_term","children":[],"call":["2 ** ","1 to_i ","@env [] "]}," TTY Color Mode mode":{"type":"method","name":"mode","children":[],"call":["value == ","(lvasgn :value\n  (send nil :public_send\n    (lvar :from_check))) != "," public_send ","(str \"from_tput\") each ","TTY Color  tty? ","(str \"from_term\") each ","METHODS  each "," public_send  == ","(lvasgn : public_send \n  (send nil :public_send\n    (lvar :from_check))) != "]}," TTY Color Mode initialize":{"type":"method","name":"initialize","children":[],"call":[]}," TTY Color windows?":{"type":"method","name":"windows?","children":[],"call":["File ALT_SEPARATOR  == "," File ALT_SEPARATOR  == "]}," TTY Color command?":{"type":"method","name":"command?","children":[],"call":[" system ! ! "," system ! "," system "]}," TTY Color support?":{"type":"method","name":"support?","children":[],"call":["Support  new support? ","Support  new "," verbose "]}," TTY Color Support support?":{"type":"method","name":"support?","children":[],"call":["value == ","(lvasgn :value\n  (send nil :public_send\n    (lvar :from_check))) != "," public_send ","SOURCES  each ","TTY Color  tty? "," disabled? "," public_send  == ","(lvasgn : public_send \n  (send nil :public_send\n    (lvar :from_check))) != "]}," TTY Color disabled?":{"type":"method","name":"disabled?","children":[],"call":["Support  new disabled? ","Support  new "," verbose "]}," TTY Color Support disabled?":{"type":"method","name":"disabled?","children":[],"call":["(or\n  (send\n    (lvar :no_color) :nil?)\n  (send\n    (lvar :no_color) :empty?)) ! ","no_color empty? ","no_color nil? ","@env [] ","(or\n  (send\n    (lvar :@env [] ) :nil?)\n  (send\n    (lvar :@env [] ) :empty?)) ! ","@env []  empty? ","@env []  nil? "]}}