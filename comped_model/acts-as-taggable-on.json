{" ActsAsTaggableOnMigration down":{"type":"method","name":"down","children":[],"call":[]}," ActsAsTaggableOnMigration up":{"type":"method","name":"up","children":[],"call":[]}," ActsAsTaggableOn MigrationGenerator create_migration_file":{"type":"method","name":"create_migration_file","children":[],"call":[" migration_template "," class orm_has_migration? "," class "]}," ActsAsTaggableOn MigrationGenerator next_migration_number":{"type":"method","name":"next_migration_number","children":[],"call":[]}," ActsAsTaggableOn MigrationGenerator orm_has_migration?":{"type":"method","name":"orm_has_migration?","children":[],"call":[]}," ActsAsTaggableOn MigrationGenerator source_root":{"type":"method","name":"source_root","children":[],"call":[]}," ActsAsTaggableOn MigrationGenerator orm":{"type":"method","name":"orm","children":[],"call":[]}," TagsHelper tag_cloud":{"type":"method","name":"tag_cloud","children":[],"call":["classes [] ","(send\n  (begin\n    (send\n      (send\n        (lvar :tag) :count) :/\n      (lvar :max_count))) :*\n  (begin\n    (send\n      (send\n        (lvar :classes) :size) :-\n      (int 1)))) round ","(send\n  (send\n    (lvar :tag) :count) :/\n  (lvar :max_count)) * ","classes size - ","classes size ","tag count / ","tag count ","tags each ","tags sort_by last count to_f ","tags sort_by last count ","tags sort_by last ","tags sort_by ","tags empty? ","tags all ","tags respond_to? ","tags is_a? ","(send\n  (begin\n    (send\n      (send\n        (lvar :tag) :count) :/\n      (lvar :tags sort_by last count to_f ))) :*\n  (begin\n    (send\n      (send\n        (lvar :classes) :size) :-\n      (int 1)))) round ","(send\n  (send\n    (lvar :tag) :count) :/\n  (lvar :tags sort_by last count to_f )) * ","tags all  each ","tags all  sort_by last count to_f ","tags all  sort_by last count ","tags all  sort_by last ","tags all  sort_by ","tags all  empty? ","tags all  all ","tags all  respond_to? ","tags all  is_a? "]}," TagList from":{"type":"method","name":"from","children":[],"call":["tag_list add ","string split "," delimiter ","tag_list << ","string gsub! ","string to_s dup ","string to_s "," new tap "," new ","string join ","string respond_to? "," returning ","string to_s dup  split ","string join  split ","string to_s dup  gsub! ","string join  gsub! ","string to_s dup  to_s dup ","string join  to_s dup ","string to_s dup  to_s ","string join  to_s ","string to_s dup  join ","string join  join ","string to_s dup  respond_to? ","string join  respond_to? "]}," TagList extract_and_apply_options!":{"type":"method","name":"extract_and_apply_options!","children":[],"call":["args flatten! "," class from "," class ","args map! ","options [] ","options assert_valid_keys ","args pop ","args last is_a? ","args last ","args pop  [] ","args pop  assert_valid_keys "]}," TagList clean!":{"type":"method","name":"clean!","children":[],"call":[" uniq! "," map! "," reject! "]}," TagList to_s":{"type":"method","name":"to_s","children":[],"call":["(send\n  (lvar :tags) :map) join "," delimiter "," delimiter ends_with? ","name include? ","tags map ","tags send "," dup "," frozen? ","(send nil :map) join "," map "," clean! ","(send\n  (lvar : dup ) :map) join "," dup  map "," dup  send "]}," TagList remove":{"type":"method","name":"remove","children":[],"call":["names include? "," delete_if "," extract_and_apply_options! "]}," TagList add":{"type":"method","name":"add","children":[],"call":[" clean! "," concat "," extract_and_apply_options! "]}," TagList initialize":{"type":"method","name":"initialize","children":[],"call":[" add "]}," Tag count":{"type":"method","name":"count","children":[],"call":[" read_attribute to_i "," read_attribute "]}," Tag to_s":{"type":"method","name":"to_s","children":[],"call":[" name "]}," Tag ==":{"type":"method","name":"==","children":[],"call":[" name == ","object name "," name ","object is_a? "]}," Tag find_or_create_all_with_like_by_name":{"type":"method","name":"find_or_create_all_with_like_by_name","children":[],"call":[]}," Tag find_or_create_with_like_by_name":{"type":"method","name":"find_or_create_with_like_by_name","children":[],"call":[]}," Tag named_like_any":{"type":"method","name":"named_like_any","children":[],"call":[]}," Tag named_like":{"type":"method","name":"named_like","children":[],"call":[]}," Tag named_any":{"type":"method","name":"named_any","children":[],"call":[]}," Tag named":{"type":"method","name":"named","children":[],"call":[]}," ActsAsTaggableOn ActiveRecord Backports included":{"type":"method","name":"included","children":[],"call":[]}," ActsAsTaggableOn Tagger SingletonMethods is_tagger?":{"type":"method","name":"is_tagger?","children":[],"call":[" tagger? "]}," ActsAsTaggableOn Tagger InstanceMethods is_tagger?":{"type":"method","name":"is_tagger?","children":[],"call":[" class is_tagger? "," class "," tagger? "]}," ActsAsTaggableOn Tagger InstanceMethods tag":{"type":"method","name":"tag","children":[],"call":["taggable save ","taggable set_owner_tag_list_on ","opts [] ","opts [] to_s "," raise ","taggable class to_s ","taggable class ","taggable tag_types include? ","taggable tag_types ","opts has_key? ","taggable is_taggable? ","taggable respond_to? ","opts reverse_merge! ","opts key? ","opts delete "," fail "]}," ActsAsTaggableOn Tagger ClassMethods is_tagger?":{"type":"method","name":"is_tagger?","children":[],"call":[" tagger? "]}," ActsAsTaggableOn Tagger ClassMethods acts_as_tagger":{"type":"method","name":"acts_as_tagger","children":[],"call":[" extend "," include "," has_many ","opts merge "," distinct "," lambda ","opts delete "," class_eval "," has_many_with_compatibility "," has_many_with_taggable_compatibility "]}," ActsAsTaggableOn Tagger included":{"type":"method","name":"included","children":[],"call":[]}," ActsAsTaggableOn Taggable acts_as_taggable_on":{"type":"method","name":"acts_as_taggable_on","children":[{"type":"method","name":"taggable?","children":[],"asgn":[],"call":[]}],"call":[" include "," has_many "," class_eval "," class_inheritable_reader "," write_inheritable_attribute "," ActiveRecord VERSION MAJOR  < ","(send\n  (send\n    (self) :tag_types) :+\n  (lvar :tag_types)) uniq "," tag_types + "," tag_types "," taggable? ","tag_types to_a flatten compact map ","tag_types to_a flatten compact ","tag_types to_a flatten ","tag_types to_a "," taggable_on "," tag_types= "," class_attribute ","(send\n  (send\n    (self) :tag_types to_a flatten compact map ) :+\n  (lvar :tag_types to_a flatten compact map )) uniq "," tag_types to_a flatten compact map  + "," tag_types to_a flatten compact map  ","tag_types to_a flatten compact map  to_a flatten compact map ","tag_types to_a flatten compact map  to_a flatten compact ","tag_types to_a flatten compact map  to_a flatten ","tag_types to_a flatten compact map  to_a "," tag_types to_a flatten compact map = "]}," ActsAsTaggableOn Taggable acts_as_taggable":{"type":"method","name":"acts_as_taggable","children":[],"call":[" acts_as_taggable_on "]}," ActsAsTaggableOn Taggable taggable?":{"type":"method","name":"taggable?","children":[],"call":[]}," Taggable Related InstanceMethods related_tags_for":{"type":"method","name":"related_tags_for","children":[],"call":["klass scoped ","(pair\n  (sym :select)\n  (dstr\n    (begin\n      (send\n        (lvar :klass) :table_name))\n    (str \".*, COUNT(\")\n    (begin\n      (send\n        (const nil :Tag) :table_name))\n    (str \".id) AS count\"))) update "," grouped_column_names_for ","Tag  table_name ","Tagging  table_name ","klass to_s ","klass table_name "," id "," class == "," class ","t name "," tags_on collect "," tags_on "," related_search_options ","(pair\n  (sym :select)\n  (dstr\n    (begin\n      (send\n        (lvar :klass) :table_name))\n    (str \".*, COUNT(\")\n    (begin\n      (send\n        (const\n          (const nil :ActsAsTaggableOn) :Tag) :table_name))\n    (str \".id) AS count\"))) update ","ActsAsTaggableOn Tag  table_name ","ActsAsTaggableOn Tagging  table_name ","klass primary_key ","ActsAsTaggableOn Tag  using_postgresql? ","(pair\n  (sym :select)\n  (dstr\n    (begin\n      (send\n        (lvar :klass) :table_name))\n    (str \".*, COUNT(\")\n    (begin\n      (send\n        (const\n          (const nil :ActsAsTaggableOn) :Tag) :table_name))\n    (str \".\")\n    (begin\n      (send\n        (const\n          (const nil :ActsAsTaggableOn) :Tag) :primary_key))\n    (str \") AS count\"))) update ","ActsAsTaggableOn Tag  primary_key ","klass base_class to_s ","klass base_class ","(send\n  (send\n    (self) :class) :base_class) include? "," class base_class ","tags_to_ignore include? ","(send\n  (send nil :tags_on\n    (lvar :context)) :collect) reject ","t to_s ","tags_to_ignore map! ","Array  wrap ","options delete ","klass select from where group order ","klass select from where group "," group_columns ","klass select from where "," exclude_self ","klass select from ","klass select ","Array  wrap map ","  grouped_column_names_for  "]}," Taggable Related InstanceMethods matching_contexts_for":{"type":"method","name":"matching_contexts_for","children":[],"call":["klass scoped ","(pair\n  (sym :select)\n  (dstr\n    (begin\n      (send\n        (lvar :klass) :table_name))\n    (str \".*, COUNT(\")\n    (begin\n      (send\n        (const nil :Tag) :table_name))\n    (str \".id) AS count\"))) update "," grouped_column_names_for ","Tagging  table_name ","Tag  table_name ","klass to_s ","klass table_name "," id "," class == "," class ","t name "," tags_on collect "," tags_on "," matching_context_search_options ","(pair\n  (sym :select)\n  (dstr\n    (begin\n      (send\n        (lvar :klass) :table_name))\n    (str \".*, COUNT(\")\n    (begin\n      (send\n        (const\n          (const nil :ActsAsTaggableOn) :Tag) :table_name))\n    (str \".id) AS count\"))) update ","ActsAsTaggableOn Tagging  table_name ","ActsAsTaggableOn Tag  table_name ","klass primary_key ","ActsAsTaggableOn Tag  using_postgresql? ","(pair\n  (sym :select)\n  (dstr\n    (begin\n      (send\n        (lvar :klass) :table_name))\n    (str \".*, COUNT(\")\n    (begin\n      (send\n        (const\n          (const nil :ActsAsTaggableOn) :Tag) :table_name))\n    (str \".\")\n    (begin\n      (send\n        (const\n          (const nil :ActsAsTaggableOn) :Tag) :primary_key))\n    (str \") AS count\"))) update ","ActsAsTaggableOn Tag  primary_key ","klass base_class to_s ","klass base_class ","(send\n  (send\n    (self) :class) :base_class) include? "," class base_class ","klass select from where group order ","klass select from where group "," group_columns ","klass select from where "," exclude_self ","klass select from ","klass select ","  grouped_column_names_for  "]}," Taggable Related ClassMethods acts_as_taggable_on":{"type":"method","name":"acts_as_taggable_on","children":[],"call":[" initialize_acts_as_taggable_on_related "]}," Taggable Related ClassMethods initialize_acts_as_taggable_on_related":{"type":"method","name":"initialize_acts_as_taggable_on_related","children":[],"call":[" class_eval "," tag_types map each "," tag_types map "," tag_types "," tag_types empty? ","25 + ","12 + ","11 + "]}," Taggable Related included":{"type":"method","name":"included","children":[],"call":[]}," Taggable Ownership InstanceMethods save_owned_tags":{"type":"method","name":"save_owned_tags","children":[],"call":["Tagging  create! ","context to_s ","tag id ","new_tags each ","Tagging  destroy_all ","old_taggings map ","old_taggings present? ","Tagging  where all ","Tagging  where ","owner id ","owner class to_s ","owner class "," class base_class to_s "," class base_class "," class "," id ","tag_list - ","owned_tags - "," owner_tags_on ","Tag  find_or_create_all_with_like_by_name ","tag_list uniq "," cached_owned_tag_list_on each "," cached_owned_tag_list_on "," tagging_contexts each "," tagging_contexts "," transaction "," taggings create! "," taggings ","ActsAsTaggableOn Tagging  destroy_all ","ActsAsTaggableOn Tagging  where all ","ActsAsTaggableOn Tagging  where ","ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name ","old_tags present? ","tags - ","tags == ","t name downcase == ","s downcase ","t name downcase ","t name ","tags detect ","tag_list uniq map "," class preserve_tag_order? ","owner class base_class to_s ","owner class base_class ","(send\n  (lvar :tags) :map) compact ","n name downcase == ","n name downcase ","n name ","new_tags find ","tags map ","owned_tags from & ","owned_tags from ","shared_tags [] == ","tags [] ","shared_tags [] ","shared_tags each_with_index ","tags [] != ","shared_tags size ","shared_tags any? ","owned_tags & ","tag_list -  each ","tags -  each ","(send\n  (lvar :tags) :map) compact  each ","new_ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  each ","Tagging  where all  map ","Tagging  where  map ","ActsAsTaggableOn Tagging  where all  map ","ActsAsTaggableOn Tagging  where  map ","Tagging  where all  present? ","Tagging  where  present? ","ActsAsTaggableOn Tagging  where all  present? ","ActsAsTaggableOn Tagging  where  present? ","Tag  find_or_create_all_with_like_by_name  - ","ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  - "," owner_tags_on  - ","owned_ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  - "," owner_ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name _on ","Tag  find_or_create_all_with_like_by_name  uniq ","ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  uniq "," cached_owned_Tag  find_or_create_all_with_like_by_name _on each "," cached_owned_ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name _on each "," cached_owned_Tag  find_or_create_all_with_like_by_name _on "," cached_owned_ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name _on ","owned_tags -  present? ","old_ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  present? ","ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  == ","ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  detect ","Tag  find_or_create_all_with_like_by_name  uniq map ","ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  uniq map ","(send\n  (lvar :ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name ) :map) compact ","tag_list -  find ","tags -  find ","(send\n  (lvar :tags) :map) compact  find ","new_ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  find ","ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  map "," owner_tags_on  from & ","owned_ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  from & "," owner_tags_on  from ","owned_ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  from ","shared_ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  [] == ","owned_tags &  [] == ","ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  [] ","shared_ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  [] ","owned_tags &  [] ","shared_ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  each_with_index ","owned_tags &  each_with_index ","ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  [] != ","shared_ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  size ","owned_tags &  size ","shared_ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  any? ","owned_tags &  any? "," owner_tags_on  & ","owned_ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  & "]}," Taggable Ownership InstanceMethods reload":{"type":"method","name":"reload","children":[],"call":[" instance_variable_set "," class tag_types each "," class tag_types "," class "]}," Taggable Ownership InstanceMethods set_owner_tag_list_on":{"type":"method","name":"set_owner_tag_list_on","children":[],"call":["cache []= ","TagList  from ","key class == ","owner class ","key class ","key id == ","owner id ","key id ","cache delete_if "," cached_owned_tag_list_on "," add_custom_context ","ActsAsTaggableOn TagList  from "," cached_owned_tag_list_on  []= "," cached_owned_tag_list_on  delete_if ","  cached_owned_tag_list_on d_owned_tag_list_on "]}," Taggable Ownership InstanceMethods owner_tag_list_on":{"type":"method","name":"owner_tag_list_on","children":[],"call":["TagList  new "," owner_tags_on map "," owner_tags_on ","cache [] ","key class == ","owner class ","key class ","key id == ","owner id ","key id ","cache delete_if "," cached_owned_tag_list_on "," add_custom_context ","ActsAsTaggableOn TagList  new "," cached_owned_tag_list_on  [] "," cached_owned_tag_list_on  delete_if ","  cached_owned_tag_list_on d_owned_tag_list_on "]}," Taggable Ownership InstanceMethods cached_owned_tag_list_on":{"type":"method","name":"cached_owned_tag_list_on","children":[],"call":[" instance_variable_set "," instance_variable_get "," instance_variable_defined? "]}," Taggable Ownership InstanceMethods owner_tags_on":{"type":"method","name":"owner_tags_on","children":[],"call":[" base_tags where all "," base_tags where ","owner class to_s ","owner class ","owner id ","context to_s ","Tagging  table_name "," base_tags ","ActsAsTaggableOn Tagging  table_name ","owner nil? ","scope all ","scope order "," class preserve_tag_order? "," class ","owner class base_class to_s ","owner class base_class ","scope order  all "," base_tags where  all ","scope order  order "," base_tags where  order "]}," Taggable Ownership ClassMethods initialize_acts_as_taggable_on_ownership":{"type":"method","name":"initialize_acts_as_taggable_on_ownership","children":[],"call":[" class_eval "," tag_types map each "," tag_types map "," tag_types ","22 + ","21 + "]}," Taggable Ownership ClassMethods acts_as_taggable_on":{"type":"method","name":"acts_as_taggable_on","children":[],"call":[" initialize_acts_as_taggable_on_ownership "]}," Taggable Ownership included":{"type":"method","name":"included","children":[],"call":[]}," Taggable Dirty InstanceMethods change_tag_list_on":{"type":"method","name":"change_tag_list_on","children":[],"call":[]}," Taggable Dirty InstanceMethods tag_list_changed_on?":{"type":"method","name":"tag_list_changed_on?","children":[],"call":[]}," Taggable Dirty included":{"type":"method","name":"included","children":[],"call":[]}," Taggable Core InstanceMethods save_tags":{"type":"method","name":"save_tags","children":[],"call":["Tagging  create! ","context to_s ","tag id ","new_tags each ","Tagging  destroy_all ","old_taggings map ","old_taggings present? "," taggings where all "," taggings where "," taggings ","tag_list - ","current_tags - "," tags_on ","Tag  find_or_create_all_with_like_by_name "," tag_list_cache_on uniq "," tag_list_cache_on "," tagging_contexts each "," tagging_contexts "," transaction "," taggings create! "," tag_list_cache_set_on ","Tagging  where "," class base_class to_s "," class base_class "," class "," id ","ActsAsTaggableOn Tagging  destroy_all ","ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name ","(begin\n  (send\n    (const\n      (const nil :ActsAsTaggableOn) :Tagging) :primary_key)) to_sym ","ActsAsTaggableOn Tagging  primary_key ","old_tags present? ","tags - ","tags == ","t name downcase == ","l downcase ","t name downcase ","t name ","tags detect ","tag_list map "," class preserve_tag_order? ","(send\n  (lvar :tags) :map) compact ","n name downcase == ","n name downcase ","n name ","new_tags find ","tags map ","current_tags [] & ","current_tags [] ","current_tags size ","shared_tags [] == ","tags [] ","shared_tags [] ","shared_tags each_with_index ","tags [] != ","shared_tags size ","shared_tags any? ","current_tags & "," load_tags ","tag_list -  each ","tags -  each ","(send\n  (lvar :tags) :map) compact  each ","new_ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  each ","new_ load_tags  each "," taggings where all  map ","Tagging  where  map "," taggings where  map "," taggings where all  present? ","Tagging  where  present? "," taggings where  present? ","Tag  find_or_create_all_with_like_by_name  - "," tag_list_cache_on uniq  - ","ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  - "," tags_on  - ","current_ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  - ","current_ load_tags  - "," ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name _on ","  load_tags _on "," Tag  find_or_create_all_with_like_by_name _cache_on uniq ","  tag_list_cache_on uniq _cache_on uniq "," ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name _cache_on uniq "," Tag  find_or_create_all_with_like_by_name _cache_on ","  tag_list_cache_on uniq _cache_on "," ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name _cache_on "," Tag  find_or_create_all_with_like_by_name _cache_set_on ","  tag_list_cache_on uniq _cache_set_on "," ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name _cache_set_on ","current_tags -  present? ","old_ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  present? ","old_ load_tags  present? "," load_tags  - ","ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  == "," load_tags  == ","ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  detect "," load_tags  detect ","Tag  find_or_create_all_with_like_by_name  map "," tag_list_cache_on uniq  map ","ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  map ","(send\n  (lvar :ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name ) :map) compact ","(send\n  (lvar : load_tags ) :map) compact ","tag_list -  find ","tags -  find ","(send\n  (lvar :tags) :map) compact  find ","new_ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  find ","new_ load_tags  find "," load_tags  map "," tags_on  [] & ","current_ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  [] & ","current_ load_tags  [] & "," tags_on  [] ","current_ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  [] ","current_ load_tags  [] "," tags_on  size ","current_ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  size ","current_ load_tags  size ","shared_ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  [] == ","shared_ load_tags  [] == ","current_tags &  [] == ","ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  [] "," load_tags  [] ","shared_ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  [] ","shared_ load_tags  [] ","current_tags &  [] ","shared_ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  each_with_index ","shared_ load_tags  each_with_index ","current_tags &  each_with_index ","ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  [] != "," load_tags  [] != ","shared_ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  size ","shared_ load_tags  size ","current_tags &  size ","shared_ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  any? ","shared_ load_tags  any? ","current_tags &  any? "," tags_on  & ","current_ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  & ","current_ load_tags  & "," load_ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  "," load_ load_tags  "]}," Taggable Core InstanceMethods reload":{"type":"method","name":"reload","children":[],"call":[" instance_variable_set ","context to_s singularize ","context to_s "," class tag_types each "," class tag_types "," class "]}," Taggable Core InstanceMethods tagging_contexts":{"type":"method","name":"tagging_contexts","children":[],"call":[" custom_contexts + "," class tag_types map "," class tag_types "," class "," custom_contexts "]}," Taggable Core InstanceMethods set_tag_list_on":{"type":"method","name":"set_tag_list_on","children":[],"call":[" instance_variable_set ","TagList  from ","context to_s singularize ","context to_s "," add_custom_context ","ActsAsTaggableOn TagList  from "," process_dirty_object "," custom_contexts include? "," custom_contexts "]}," Taggable Core InstanceMethods tags_on":{"type":"method","name":"tags_on","children":[],"call":[" base_tags where all "," base_tags where ","context to_s ","Tagging  table_name "," base_tags "," send all "," send "," respond_to? ","ActsAsTaggableOn Tagging  table_name ","scope all ","scope order "," class preserve_tag_order? "," class ","scope order  all "," base_tags where  all ","scope order  order "," base_tags where  order "]}," Taggable Core InstanceMethods all_tags_on":{"type":"method","name":"all_tags_on","children":[],"call":[" base_tags where order group all "," base_tags where order group ","Tagging  table_name "," base_tags where order "," base_tags where "," base_tags ","context to_s ","ActsAsTaggableOn Tagging  table_name ","ActsAsTaggableOn Tag  table_name ","scope all ","scope group ","ActsAsTaggableOn Tag  primary_key ","scope order group ","scope order "," grouped_column_names_for ","ActsAsTaggableOn Tag  using_postgresql? ","(send\n  (const\n    (const nil :ActsAsTaggableOn) :Tag) :using_postgresql?) to_a ","scope group  all ","scope order group  all "," base_tags where  all ","scope group  group ","scope order group  group "," base_tags where  group ","scope group  order group ","scope order group  order group "," base_tags where  order group ","scope group  order ","scope order group  order "," base_tags where  order "]}," Taggable Core InstanceMethods all_tags_list_on":{"type":"method","name":"all_tags_list_on","children":[],"call":[" instance_variable_set ","TagList  new freeze ","TagList  new "," all_tags_on map "," all_tags_on "," instance_variable_get ","context to_s singularize ","context to_s ","ActsAsTaggableOn TagList  new freeze ","ActsAsTaggableOn TagList  new "," instance_variable_defined? "]}," Taggable Core InstanceMethods tag_list_on":{"type":"method","name":"tag_list_on","children":[],"call":[" tag_list_cache_on "," add_custom_context "]}," Taggable Core InstanceMethods tag_list_cache_on":{"type":"method","name":"tag_list_cache_on","children":[],"call":[" instance_variable_set ","TagList  new "," tags_on map "," tags_on "," instance_variable_get ","context to_s singularize ","context to_s ","ActsAsTaggableOn TagList  new "," instance_variable_defined? ","ActsAsTaggableOn TagList  from "," cached_tag_list_on "," class caching_tag_list_on? "," class "]}," Taggable Core InstanceMethods cached_tag_list_on":{"type":"method","name":"cached_tag_list_on","children":[],"call":[" [] ","context to_s singularize ","context to_s "]}," Taggable Core InstanceMethods add_custom_context":{"type":"method","name":"add_custom_context","children":[],"call":[" custom_contexts << ","value to_s "," custom_contexts "," class tag_types map include? "," class tag_types map "," class tag_types "," class "," custom_contexts include? "]}," Taggable Core InstanceMethods is_taggable?":{"type":"method","name":"is_taggable?","children":[],"call":[" class is_taggable? "," class "]}," Taggable Core InstanceMethods custom_contexts":{"type":"method","name":"custom_contexts","children":[],"call":[]}," Taggable Core InstanceMethods grouped_column_names_for":{"type":"method","name":"grouped_column_names_for","children":[],"call":[" class grouped_column_names_for "," class ","(send\n  (send\n    (lvar :object) :column_names) :map) join ","object table_name ","object column_names map ","object column_names "]}," Taggable Core ClassMethods is_taggable?":{"type":"method","name":"is_taggable?","children":[],"call":[]}," Taggable Core ClassMethods tagged_with":{"type":"method","name":"tagged_with","children":[],"call":[" joins group where readonly "," joins group where ","conditions join "," joins group "," joins ","joins join ","tags size "," grouped_column_names_for ","joins << ","(str \"LEFT OUTER JOIN \") + + "," quote_value "," base_class name "," base_class ","(str \"LEFT OUTER JOIN \") + "," primary_key "," table_name ","Tagging  table_name ","options delete ","tagging_join << "," AND  + "," sanitize_sql ","context to_s ","(str \"JOIN \") + + + ","tag id ","(str \"JOIN \") + + ","(str \"JOIN \") + "," rand ","tag name gsub ","tag name ","tags each "," where ","tags length == ","tag_list length ","tags length ","Tag  named_any ","conditions << ","Tag  table_name ","(send\n  (lvar :tag_list) :map) join ","tag_list map ","tag_list empty? ","TagList  from "," scoped ","ActsAsTaggableOn Tagging  table_name ","ActsAsTaggableOn Tag  named_any ","ActsAsTaggableOn Tag  table_name ","ActsAsTaggableOn TagList  from ","options [] ","ActsAsTaggableOn Tag  using_postgresql? ","tag safe_name "," tag_types one? "," tag_types ","(send\n  (lvar :tags) :map) join ","t id ","tags map ","tags map join ","tags length > "," like_operator "," undecorated_table_name gsub "," undecorated_table_name ","owned_by class to_s ","owned_by class ","owned_by id ","ActsAsTaggableOn Tag  primary_key "," sha_prefix ","alias_base_name [] ","taggings_context [] ","ActsAsTaggableOn Tag  named_like_any "," escape_like "," adjust_taggings_alias ","owned_by class base_class to_s ","owned_by class base_class "," select joins where group having order readonly "," select joins where group having order "," select joins where group having "," select joins where group "," select joins where "," select joins "," select ","(str \"JOIN \") + + + + ","request uniq ","order_by join ","order_by << ","options [] present? ","ActsAsTaggableOn Utils  using_postgresql? ","(dstr\n  (str \"JOIN \")\n  (begin\n    (send\n      (const\n        (const nil :ActsAsTaggableOn) :Tagging) :table_name))\n  (str \" \")\n  (begin\n    (lvar :taggings_alias))) + + ","(dstr\n  (str \"JOIN \")\n  (begin\n    (send\n      (const\n        (const nil :ActsAsTaggableOn) :Tagging) :table_name))\n  (str \" \")\n  (begin\n    (lvar :taggings_alias))) + ","ActsAsTaggableOn Utils  like_operator ","ActsAsTaggableOn Utils  escape_like ","ActsAsTaggableOn Utils  sha_prefix ","options dup ","query joins where group having order readonly ","query joins where group having order ","query joins where group having ","query joins where group ","query joins where ","query joins ","select_clause join ","select_clause empty? ","select_clause << ","any == ","ActsAsTaggableOn TagListParser  parse ","ActsAsTaggableOn  default_parser new parse ","ActsAsTaggableOn  default_parser new ","ActsAsTaggableOn  default_parser ","tagging_cond << ","(begin\n  (send\n    (const\n      (const nil :ActsAsTaggableOn) :Tagging) :table_name)) + + ","(begin\n  (send\n    (const\n      (const nil :ActsAsTaggableOn) :Tagging) :table_name)) + "," ActsAsTaggableOn Taggable TaggedWithQuery  build "," none ","Tag  named_any  size ","ActsAsTaggableOn Tag  named_any  size ","ActsAsTaggableOn Tag  named_like_any  size ","options dup  delete ","(str \"JOIN \") + + +  << ","(str \"JOIN \") + +  << ","(dstr\n  (str \"JOIN \")\n  (begin\n    (send\n      (const\n        (const nil :ActsAsTaggableOn) :Tagging) :table_name))\n  (str \" \")\n  (begin\n    (lvar :taggings_alias))) + +  << ","options delete  to_s ","Tag  named_any  each ","ActsAsTaggableOn Tag  named_any  each ","ActsAsTaggableOn Tag  named_like_any  each ","Tag  named_any  length == ","ActsAsTaggableOn Tag  named_any  length == ","ActsAsTaggableOn Tag  named_like_any  length == ","TagList  from  length ","ActsAsTaggableOn TagList  from  length ","ActsAsTaggableOn TagListParser  parse  length ","ActsAsTaggableOn  default_parser new parse  length ","Tag  named_any  length ","ActsAsTaggableOn Tag  named_any  length ","ActsAsTaggableOn Tag  named_like_any  length ","Tag  named_options delete  ","(send\n  (lvar :TagList  from ) :map) join ","(send\n  (lvar :ActsAsTaggableOn TagList  from ) :map) join ","(send\n  (lvar :ActsAsTaggableOn TagListParser  parse ) :map) join ","(send\n  (lvar :ActsAsTaggableOn  default_parser new parse ) :map) join ","TagList  from  map ","ActsAsTaggableOn TagList  from  map ","ActsAsTaggableOn TagListParser  parse  map ","ActsAsTaggableOn  default_parser new parse  map ","TagList  from  empty? ","ActsAsTaggableOn TagList  from  empty? ","ActsAsTaggableOn TagListParser  parse  empty? ","ActsAsTaggableOn  default_parser new parse  empty? ","ActsAsTaggableOn Tag  named_options delete  ","options dup  [] ","(send\n  (lvar :Tag  named_any ) :map) join ","(send\n  (lvar :ActsAsTaggableOn Tag  named_any ) :map) join ","(send\n  (lvar :ActsAsTaggableOn Tag  named_like_any ) :map) join ","Tag  named_any  map ","ActsAsTaggableOn Tag  named_any  map ","ActsAsTaggableOn Tag  named_like_any  map ","Tag  named_any  map join ","ActsAsTaggableOn Tag  named_any  map join ","ActsAsTaggableOn Tag  named_like_any  map join ","Tag  named_any  length > ","ActsAsTaggableOn Tag  named_any  length > ","ActsAsTaggableOn Tag  named_like_any  length > ","options delete  class to_s ","options delete  class ","options delete  id "," undecorated_table_name gsub  [] ","taggings_options delete  [] ","ActsAsTaggableOn Tag  named_like_options delete  "," adjust_ adjust_taggings_alias  ","options delete  class base_class to_s ","options delete  class base_class "," select joins where group having order readonly  uniq ","options dup  [] present? ","(dstr\n  (str \"JOIN \")\n  (begin\n    (send\n      (const\n        (const nil :ActsAsTaggableOn) :Tagging) :table_name))\n  (str \" \")\n  (begin\n    (lvar : adjust_taggings_alias ))) + + ","(dstr\n  (str \"JOIN \")\n  (begin\n    (send\n      (const\n        (const nil :ActsAsTaggableOn) :Tagging) :table_name))\n  (str \" \")\n  (begin\n    (lvar : adjust_taggings_alias ))) + ","options dup  dup "," select  joins where group having order readonly "," select  joins where group having order "," select  joins where group having "," select  joins where group "," select  joins where "," select  joins ","options delete  == ","(begin\n  (send\n    (const\n      (const nil :ActsAsTaggableOn) :Tagging) :table_name)) + +  << "]}," Taggable Core ClassMethods grouped_column_names_for":{"type":"method","name":"grouped_column_names_for","children":[],"call":["(send\n  (send\n    (lvar :object) :column_names) :map) join ","object table_name ","object column_names map ","object column_names "]}," Taggable Core ClassMethods acts_as_taggable_on":{"type":"method","name":"acts_as_taggable_on","children":[],"call":[" initialize_acts_as_taggable_on_core "]}," Taggable Core ClassMethods initialize_acts_as_taggable_on_core":{"type":"method","name":"initialize_acts_as_taggable_on_core","children":[],"call":[" class_eval ","tag_type singularize "," has_many ","tag_type to_sym ","(begin\n  (send\n    (lvar :tag_type) :singularize)) to_sym "," tag_types map each "," tag_types map "," tag_types ","tags_type to_sym ","(begin\n  (lvar :tag_type)) to_sym ","tags_type to_s singularize ","tags_type to_s ","ActsAsTaggableOn Tagging  table_name ","ActsAsTaggableOn Tag  table_name "," preserve_tag_order? "," taggable_mixin class_eval ","40 + "," taggable_mixin "," include ","42 + "," has_many_with_compatibility ","41 + "," has_many_with_taggable_compatibility ","37 + "," order "," lambda "," includes order where "," includes order "," includes ","39 + ","44 + "," attribute ","ActiveModel Type Value  new ","(begin\n  (send\n    (lvar :tags_type) :singularize)) to_sym ","tags_type singularize ","45 + ","ActsAsTaggableOn Taggable TagListType  new ","tags_type to_s singularize  singularize ","tags_type to_s singularize  to_sym ","(begin\n  (send\n    (lvar :tags_type to_s singularize ) :singularize)) to_sym "," tags_type to_s singularize s map each "," tags_type to_s singularize s map "," tags_type to_s singularize s ","(begin\n  (lvar :tags_type to_s singularize )) to_sym "]}," Taggable Core included":{"type":"method","name":"included","children":[],"call":[]}," Taggable Collection InstanceMethods tag_counts_on":{"type":"method","name":"tag_counts_on","children":[],"call":[" class tag_counts_on ","options merge "," id "," class "]}," Taggable Collection ClassMethods all_tag_counts":{"type":"method","name":"all_tag_counts","children":[],"call":["Tag  select joins where group limit order ","options [] ","Tag  select joins where group limit ","Tag  select joins where group ","Tag  select joins where ","Tag  select joins ","joins join ","Tag  select ","Tag  table_name ","group_by << ","having blank? "," grouped_column_names_for ","(lvar :at_least) compact join ","(lvar :at_least) compact "," sanitize_sql ","options delete ","joins << "," name "," inheritance_column "," table_name "," descends_from_active_record? ","Tagging  table_name "," primary_key ","options delete to_s ","options [] nil? ","conditions compact join ","conditions compact ","options []= "," base_class name "," base_class ","options assert_valid_keys ","scope group ","scope group having ","scope where "," select to_sql "," select ","ActiveRecord VERSION MAJOR  >= ","conditions each ","scope joins ","joins each ","Tag  scoped order limit ","Tag  scoped order ","Tag  scoped ","(lvar :tagging_join) compact ","scope [] ","taggable_join << ","tagging_join << ","(lvar :taggable_conditions) compact ","taggable_conditions << "," scope ","(lvar :tagging_join) compact reverse ","(lvar :taggable_conditions) compact reverse ","ActsAsTaggableOn Tagging  table_name ","ActsAsTaggableOn Tag  scoped order limit ","ActsAsTaggableOn Tag  scoped order ","ActsAsTaggableOn Tag  scoped ","ActsAsTaggableOn Tag  table_name ","joins reverse ","ActiveRecord VERSION MAJOR  < ","tag_scope joins ","tagging_scope to_sql ","tagging_scope group ","tagging_scope where group having ","tagging_scope where group ","tagging_scope where ","(dstr\n  (str \"COUNT(\")\n  (begin\n    (send\n      (const\n        (const nil :ActsAsTaggableOn) :Tagging) :table_name))\n  (str \".tag_id) > 0\")) compact join ","(dstr\n  (str \"COUNT(\")\n  (begin\n    (send\n      (const\n        (const nil :ActsAsTaggableOn) :Tagging) :table_name))\n  (str \".tag_id) > 0\")) compact ","tag_scope where ","tag_conditions each ","tag_joins each ","tagging_conditions each ","tagging_scope joins ","tagging_joins each ","ActsAsTaggableOn Tag  select order limit ","ActsAsTaggableOn Tag  select order ","ActsAsTaggableOn Tag  select ","ActsAsTaggableOn Tagging  select ","(lvar :tagging_joins) each "," compact ","(lvar :taggable_join) compact ","(send\n  (lvar :options) :[]\n  (sym :conditions)) compact reverse ","(send\n  (lvar :options) :[]\n  (sym :conditions)) compact ","tagging_scope group having ","res blank? ","(send\n  (send\n    (send\n      (const\n        (const nil :ActiveRecord) :Base) :connection) :select_all\n    (lvar :select_query)) :map) flatten join ","(send\n  (send\n    (send\n      (const\n        (const nil :ActiveRecord) :Base) :connection) :select_all\n    (lvar :select_query)) :map) flatten ","item values ","ActiveRecord Base  connection select_all map ","ActiveRecord Base  connection select_all ","ActiveRecord Base  connection ","(send\n  (send\n    (send\n      (const\n        (const nil :ActiveRecord) :Base) :connection) :select_all\n    (lvar :select_query)) :map) flatten compact join ","(send\n  (send\n    (send\n      (const\n        (const nil :ActiveRecord) :Base) :connection) :select_all\n    (lvar :select_query)) :map) flatten compact ","tag_scope extending "," safe_to_sql "," tag_scope_joins ","having compact join ","having compact ","having push "," tagging_conditions each "," tagging_conditions "," generate_tagging_scope_in_clause ","options dup ","Tag  select (lvar :tagging_join) compact  where group limit order ","Tag  select (lvar :tagging_join) compact reverse  where group limit order ","Tag  select joins reverse  where group limit order ","options dup  [] ","Tag  select (lvar :tagging_join) compact  where group limit ","Tag  select (lvar :tagging_join) compact reverse  where group limit ","Tag  select joins reverse  where group limit ","Tag  select (lvar :tagging_join) compact  where group ","Tag  select (lvar :tagging_join) compact reverse  where group ","Tag  select joins reverse  where group ","Tag  select (lvar :tagging_join) compact  where ","Tag  select (lvar :tagging_join) compact reverse  where ","Tag  select joins reverse  where ","Tag  select (lvar :tagging_join) compact  ","Tag  select (lvar :tagging_join) compact reverse  ","Tag  select joins reverse  ","(lvar :tagging_join) compact  join ","(lvar :tagging_join) compact reverse  join ","joins reverse  join ","(lvar :at_least) compact join  blank? ","(dstr\n  (str \"COUNT(\")\n  (begin\n    (send\n      (const\n        (const nil :ActsAsTaggableOn) :Tagging) :table_name))\n  (str \".tag_id) > 0\")) compact join  blank? ","having compact join  blank? ","(lvar : sanitize_sql ) compact join ","(lvar : sanitize_sql ) compact ","options dup  delete ","(lvar :tagging_join) compact  << ","(lvar :tagging_join) compact reverse  << ","joins reverse  << ","options dup  delete to_s ","options dup  [] nil? ","conditions compact join  compact join ","(lvar :taggable_conditions) compact  compact join ","(lvar :taggable_conditions) compact reverse  compact join ","conditions compact join  compact ","(lvar :taggable_conditions) compact  compact ","(lvar :taggable_conditions) compact reverse  compact ","options dup  []= ","options dup  assert_valid_keys ","scope group  group ","scope group having  group ","scope where  group ","scope joins  group ","Tag  scoped order limit  group ","ActsAsTaggableOn Tag  scoped order limit  group ","scope group (lvar :at_least) compact join  ","scope group (dstr\n  (str \"COUNT(\")\n  (begin\n    (send\n      (const\n        (const nil :ActsAsTaggableOn) :Tagging) :table_name))\n  (str \".tag_id) > 0\")) compact join  ","scope group having compact join  ","scope group  group having ","scope group having  group having ","scope where  group having ","scope joins  group having ","Tag  scoped order limit  group having ","ActsAsTaggableOn Tag  scoped order limit  group having ","scope group  where ","scope group having  where ","scope where  where ","scope joins  where ","Tag  scoped order limit  where ","ActsAsTaggableOn Tag  scoped order limit  where ","conditions compact join  each ","(lvar :taggable_conditions) compact  each ","(lvar :taggable_conditions) compact reverse  each ","scope group  joins ","scope group having  joins ","scope where  joins ","scope joins  joins ","Tag  scoped order limit  joins ","ActsAsTaggableOn Tag  scoped order limit  joins ","scope (lvar :tagging_join) compact  ","scope (lvar :tagging_join) compact reverse  ","scope joins reverse  ","(lvar :tagging_join) compact  each ","(lvar :tagging_join) compact reverse  each ","joins reverse  each ","Tag  scope group d order limit ","Tag  scope group having d order limit ","Tag  scope where d order limit ","Tag  scope joins d order limit ","Tag  Tag  scoped order limit d order limit ","Tag  ActsAsTaggableOn Tag  scoped order limit d order limit ","Tag  scope group d order ","Tag  scope group having d order ","Tag  scope where d order ","Tag  scope joins d order ","Tag  Tag  scoped order limit d order ","Tag  ActsAsTaggableOn Tag  scoped order limit d order ","Tag  scope group d ","Tag  scope group having d ","Tag  scope where d ","Tag  scope joins d ","Tag  Tag  scoped order limit d ","Tag  ActsAsTaggableOn Tag  scoped order limit d ","scope group  [] ","scope group having  [] ","scope where  [] ","scope joins  [] ","Tag  scoped order limit  [] ","ActsAsTaggableOn Tag  scoped order limit  [] ","(lvar :taggable_conditions compact join ) compact ","(lvar :taggable_(lvar :taggable_conditions) compact ) compact ","(lvar :taggable_(lvar :taggable_conditions) compact reverse ) compact ","taggable_conditions compact join  << ","taggable_(lvar :taggable_conditions) compact  << ","taggable_(lvar :taggable_conditions) compact reverse  << "," sanitize_sql  << "," scope group  "," scope group having  "," scope where  "," scope joins  "," Tag  scoped order limit  "," ActsAsTaggableOn Tag  scoped order limit  ","(lvar :taggable_conditions compact join ) compact reverse ","(lvar :taggable_(lvar :taggable_conditions) compact ) compact reverse ","(lvar :taggable_(lvar :taggable_conditions) compact reverse ) compact reverse ","(lvar : sanitize_sql ) compact reverse ","ActsAsTaggableOn Tag  scope group d order limit ","ActsAsTaggableOn Tag  scope group having d order limit ","ActsAsTaggableOn Tag  scope where d order limit ","ActsAsTaggableOn Tag  scope joins d order limit ","ActsAsTaggableOn Tag  Tag  scoped order limit d order limit ","ActsAsTaggableOn Tag  ActsAsTaggableOn Tag  scoped order limit d order limit ","ActsAsTaggableOn Tag  scope group d order ","ActsAsTaggableOn Tag  scope group having d order ","ActsAsTaggableOn Tag  scope where d order ","ActsAsTaggableOn Tag  scope joins d order ","ActsAsTaggableOn Tag  Tag  scoped order limit d order ","ActsAsTaggableOn Tag  ActsAsTaggableOn Tag  scoped order limit d order ","ActsAsTaggableOn Tag  scope group d ","ActsAsTaggableOn Tag  scope group having d ","ActsAsTaggableOn Tag  scope where d ","ActsAsTaggableOn Tag  scope joins d ","ActsAsTaggableOn Tag  Tag  scoped order limit d ","ActsAsTaggableOn Tag  ActsAsTaggableOn Tag  scoped order limit d ","(lvar :tagging_join) compact  reverse ","(lvar :tagging_join) compact reverse  reverse ","joins reverse  reverse ","tag_scope group  joins ","tag_scope group having  joins ","tag_scope where  joins ","tag_scope joins  joins ","tag_Tag  scoped order limit  joins ","tag_ActsAsTaggableOn Tag  scoped order limit  joins ","tag_scope (lvar :tagging_join) compact  ","tag_scope (lvar :tagging_join) compact reverse  ","tag_scope joins reverse  ","ActsAsTaggableOn Tag  select order limit  joins ","tagging_scope group  to_sql ","tagging_scope group having  to_sql ","tagging_scope where  to_sql ","tagging_scope joins  to_sql ","tagging_Tag  scoped order limit  to_sql ","tagging_ActsAsTaggableOn Tag  scoped order limit  to_sql ","tagging_scope where group having  to_sql ","ActsAsTaggableOn Tagging  select  to_sql "," generate_tagging_scope_in_clause  to_sql ","tagging_scope group  group ","tagging_scope group having  group ","tagging_scope where  group ","tagging_scope joins  group ","tagging_Tag  scoped order limit  group ","tagging_ActsAsTaggableOn Tag  scoped order limit  group ","tagging_scope where group having  group ","ActsAsTaggableOn Tagging  select  group "," generate_tagging_scope_in_clause  group ","tagging_scope where group (lvar :at_least) compact join  ","tagging_scope where group (dstr\n  (str \"COUNT(\")\n  (begin\n    (send\n      (const\n        (const nil :ActsAsTaggableOn) :Tagging) :table_name))\n  (str \".tag_id) > 0\")) compact join  ","tagging_scope where group having compact join  ","tagging_scope group  where group having ","tagging_scope group having  where group having ","tagging_scope where  where group having ","tagging_scope joins  where group having ","tagging_Tag  scoped order limit  where group having ","tagging_ActsAsTaggableOn Tag  scoped order limit  where group having ","tagging_scope where group having  where group having ","ActsAsTaggableOn Tagging  select  where group having "," generate_tagging_scope_in_clause  where group having ","tagging_scope group  where group ","tagging_scope group having  where group ","tagging_scope where  where group ","tagging_scope joins  where group ","tagging_Tag  scoped order limit  where group ","tagging_ActsAsTaggableOn Tag  scoped order limit  where group ","tagging_scope where group having  where group ","ActsAsTaggableOn Tagging  select  where group "," generate_tagging_scope_in_clause  where group ","tagging_scope group  where ","tagging_scope group having  where ","tagging_scope where  where ","tagging_scope joins  where ","tagging_Tag  scoped order limit  where ","tagging_ActsAsTaggableOn Tag  scoped order limit  where ","tagging_scope where group having  where ","ActsAsTaggableOn Tagging  select  where "," generate_tagging_scope_in_clause  where ","tag_scope group  where ","tag_scope group having  where ","tag_scope where  where ","tag_scope joins  where ","tag_Tag  scoped order limit  where ","tag_ActsAsTaggableOn Tag  scoped order limit  where ","ActsAsTaggableOn Tag  select order limit  where ","tag_conditions compact join  each ","tag_(lvar :taggable_conditions) compact  each ","tag_(lvar :taggable_conditions) compact reverse  each ","(send\n  (lvar :options) :[]\n  (sym :conditions)) compact reverse  each ","tag_(lvar :tagging_join) compact  each ","tag_(lvar :tagging_join) compact reverse  each ","tag_joins reverse  each "," compact  each ","tagging_conditions compact join  each ","tagging_(lvar :taggable_conditions) compact  each ","tagging_(lvar :taggable_conditions) compact reverse  each ","tagging_scope group  joins ","tagging_scope group having  joins ","tagging_scope where  joins ","tagging_scope joins  joins ","tagging_Tag  scoped order limit  joins ","tagging_ActsAsTaggableOn Tag  scoped order limit  joins ","tagging_scope (lvar :tagging_join) compact  ","tagging_scope (lvar :tagging_join) compact reverse  ","tagging_scope joins reverse  ","tagging_scope where group having  joins ","ActsAsTaggableOn Tagging  select  joins "," generate_tagging_scope_in_clause  joins ","tagging_(lvar :tagging_join) compact  each ","tagging_(lvar :tagging_join) compact reverse  each ","tagging_joins reverse  each ","(lvar :taggable_join) compact  each ","(lvar :tagging_(lvar :tagging_join) compact ) each ","(lvar :tagging_(lvar :tagging_join) compact reverse ) each ","(lvar :tagging_joins reverse ) each ","(lvar :(lvar :taggable_join) compact ) each ","(send\n  (lvar :options) :[]\n  (sym :conditions compact join )) compact reverse ","(send\n  (lvar :options) :[]\n  (sym :(lvar :taggable_conditions) compact )) compact reverse ","(send\n  (lvar :options) :[]\n  (sym :(lvar :taggable_conditions) compact reverse )) compact reverse ","(send\n  (lvar :options dup ) :[]\n  (sym :conditions)) compact reverse ","(send\n  (lvar :options) :[]\n  (sym :conditions compact join )) compact ","(send\n  (lvar :options) :[]\n  (sym :(lvar :taggable_conditions) compact )) compact ","(send\n  (lvar :options) :[]\n  (sym :(lvar :taggable_conditions) compact reverse )) compact ","(send\n  (lvar :options dup ) :[]\n  (sym :conditions)) compact ","tagging_scope group (lvar :at_least) compact join  ","tagging_scope group (dstr\n  (str \"COUNT(\")\n  (begin\n    (send\n      (const\n        (const nil :ActsAsTaggableOn) :Tagging) :table_name))\n  (str \".tag_id) > 0\")) compact join  ","tagging_scope group having compact join  ","tagging_scope group  group having ","tagging_scope group having  group having ","tagging_scope where  group having ","tagging_scope joins  group having ","tagging_Tag  scoped order limit  group having ","tagging_ActsAsTaggableOn Tag  scoped order limit  group having ","tagging_scope where group having  group having ","ActsAsTaggableOn Tagging  select  group having "," generate_tagging_scope_in_clause  group having ","(send\n  (send\n    (send\n      (const\n        (const nil :ActiveRecord) :Base) :connection) :select_all\n    (lvar :select_query)) :map) flatten join  blank? ","(send\n  (send\n    (send\n      (const\n        (const nil :ActiveRecord) :Base) :connection) :select_all\n    (lvar :select_query)) :map) flatten compact join  blank? ","tag_scope group  extending ","tag_scope group having  extending ","tag_scope where  extending ","tag_scope joins  extending ","tag_Tag  scoped order limit  extending ","tag_ActsAsTaggableOn Tag  scoped order limit  extending ","ActsAsTaggableOn Tag  select order limit  extending "," tag_scope group _joins "," tag_scope group having _joins "," tag_scope where _joins "," tag_scope joins _joins "," tag_Tag  scoped order limit _joins "," tag_ActsAsTaggableOn Tag  scoped order limit _joins "," tag_scope_(lvar :tagging_join) compact  "," tag_scope_(lvar :tagging_join) compact reverse  "," tag_scope_joins reverse  "," ActsAsTaggableOn Tag  select order limit _joins ","(lvar :at_least) compact join  compact join ","(dstr\n  (str \"COUNT(\")\n  (begin\n    (send\n      (const\n        (const nil :ActsAsTaggableOn) :Tagging) :table_name))\n  (str \".tag_id) > 0\")) compact join  compact join ","having compact join  compact join ","(lvar :at_least) compact join  compact ","(dstr\n  (str \"COUNT(\")\n  (begin\n    (send\n      (const\n        (const nil :ActsAsTaggableOn) :Tagging) :table_name))\n  (str \".tag_id) > 0\")) compact join  compact ","having compact join  compact ","(lvar :at_least) compact join  push ","(dstr\n  (str \"COUNT(\")\n  (begin\n    (send\n      (const\n        (const nil :ActsAsTaggableOn) :Tagging) :table_name))\n  (str \".tag_id) > 0\")) compact join  push ","having compact join  push "," tagging_conditions compact join  each "," tagging_(lvar :taggable_conditions) compact  each "," tagging_(lvar :taggable_conditions) compact reverse  each "," (lvar :taggable_conditions) compact reverse  each "," tagging_conditions compact join  "," tagging_(lvar :taggable_conditions) compact  "," tagging_(lvar :taggable_conditions) compact reverse  "," (lvar :taggable_conditions) compact reverse  "," generate_tagging_scope group _in_clause "," generate_tagging_scope group having _in_clause "," generate_tagging_scope where _in_clause "," generate_tagging_scope joins _in_clause "," generate_tagging_Tag  scoped order limit _in_clause "," generate_tagging_ActsAsTaggableOn Tag  scoped order limit _in_clause "," generate_tagging_scope where group having _in_clause "," generate_ActsAsTaggableOn Tagging  select _in_clause "," generate_ generate_tagging_scope_in_clause _in_clause ","options dup  dup "]}," Taggable Collection ClassMethods tag_counts_on":{"type":"method","name":"tag_counts_on","children":[],"call":[" all_tag_counts ","options merge ","context to_s "]}," Taggable Collection ClassMethods acts_as_taggable_on":{"type":"method","name":"acts_as_taggable_on","children":[],"call":[" initialize_acts_as_taggable_on_collection "]}," Taggable Collection ClassMethods initialize_acts_as_taggable_on_collection":{"type":"method","name":"initialize_acts_as_taggable_on_collection","children":[],"call":[" class_eval ","tag_type singularize "," tag_types map each "," tag_types map "," tag_types ","12 + ","11 + "]}," Taggable Collection included":{"type":"method","name":"included","children":[],"call":[]}," Taggable Cache InstanceMethods save_cached_tag_list":{"type":"method","name":"save_cached_tag_list","children":[],"call":[" []= ","tag_type singularize "," tag_list_cache_on to_a flatten compact join "," tag_list_cache_on to_a flatten compact "," tag_list_cache_on to_a flatten "," tag_list_cache_on to_a "," tag_list_cache_on "," tag_list_cache_set_on "," class send "," class "," tag_types map each "," tag_types map "," tag_types ","ActsAsTaggableOn  delimiter "," tag_ tag_list_cache_on to_a flatten compact join _cache_on to_a flatten compact join "," tag_ tag_list_cache_on to_a flatten compact join _cache_on to_a flatten compact "," tag_ tag_list_cache_on to_a flatten compact join _cache_on to_a flatten "," tag_ tag_list_cache_on to_a flatten compact join _cache_on to_a "," tag_ tag_list_cache_on to_a flatten compact join _cache_on "," tag_ tag_list_cache_on to_a flatten compact join _cache_set_on "]}," Taggable Cache InstanceMethods tag_list_cache_set_on":{"type":"method","name":"tag_list_cache_set_on","children":[],"call":[" instance_variable_get nil? ! "," instance_variable_get nil? "," instance_variable_get ","context to_s singularize ","context to_s "]}," Taggable Cache ClassMethods caching_tag_list_on?":{"type":"method","name":"caching_tag_list_on?","children":[],"call":[" column_names include? ","context to_s singularize ","context to_s "," column_names "]}," Taggable Cache ClassMethods acts_as_taggable_on":{"type":"method","name":"acts_as_taggable_on","children":[],"call":[" intialize_acts_as_taggable_on_cache "," initialize_acts_as_taggable_on_cache "," initialize_tags_cache "]}," Taggable Cache ClassMethods intialize_acts_as_taggable_on_cache":{"type":"method","name":"intialize_acts_as_taggable_on_cache","children":[],"call":[" class_eval ","tag_type singularize "," tag_types map each "," tag_types map "," tag_types "]}," Taggable Cache included":{"type":"method","name":"included","children":[],"call":[]}," TagList from_owner":{"type":"method","name":"from_owner","children":[],"call":["taglist owner= "," returning "," from "]}," ActiveRecord Acts Tagger SingletonMethods is_tagger?":{"type":"method","name":"is_tagger?","children":[],"call":[]}," ActiveRecord Acts Tagger InstanceMethods is_tagger?":{"type":"method","name":"is_tagger?","children":[],"call":[" class is_tagger? "," class "]}," ActiveRecord Acts Tagger InstanceMethods tag":{"type":"method","name":"tag","children":[],"call":["taggable save ","taggable set_tag_list_on ","opts [] ","opts [] to_s "," raise ","taggable class to_s ","taggable class ","taggable tag_types include? ","taggable tag_types ","opts has_key? ","taggable is_taggable? ","taggable respond_to? ","opts reverse_merge! "]}," ActiveRecord Acts Tagger InstanceMethods included":{"type":"method","name":"included","children":[],"call":[]}," ActiveRecord Acts Tagger ClassMethods is_tagger?":{"type":"method","name":"is_tagger?","children":[],"call":[]}," ActiveRecord Acts Tagger ClassMethods acts_as_tagger":{"type":"method","name":"acts_as_tagger","children":[],"call":[" extend "," include "," has_many ","opts merge "]}," ActiveRecord Acts Tagger included":{"type":"method","name":"included","children":[],"call":[]}," ActiveRecord Acts TaggableOn InstanceMethods reload_with_tag_list":{"type":"method","name":"reload_with_tag_list","children":[],"call":[" reload_without_tag_list "," instance_variable_set ","tag_type to_s singularize ","tag_type to_s "," class tag_types each "," class tag_types "," class "]}," ActiveRecord Acts TaggableOn InstanceMethods save_tags":{"type":"method","name":"save_tags","children":[],"call":["Tagging  create ","new_tag id ","Tag  find_or_create_with_like_by_name ","new_tag_names each "," base_tags delete "," base_tags ","old_tags any? "," class transaction "," class "," instance_variable_get include? ","tag name "," instance_variable_get ","tag_type singularize "," tags_on reject "," tags_on "," instance_variable_get - "," tags_on map "," instance_variable_get owner ","(send\n  (send nil :custom_contexts) :+\n  (send\n    (send\n      (send\n        (self) :class) :tag_types) :map\n    (block-pass\n      (sym :to_s)))) each "," custom_contexts + "," class tag_types map "," class tag_types "," custom_contexts "," transaction ","tag_list include? ","tag_list - "," tag_list_cache_on "," taggings create! ","tag id "," taggings ","new_tags each ","tagging context == ","tagging context ","tagging tagger == ","tagging tagger ","tagging tag == ","tagging tag "," taggings any? ","new_tags reject! "," tags_on - ","old_taggings each "," taggings find ","owner class to_s ","owner class ","Tag  find_or_create_all_with_like_by_name ","list uniq ","cache each ","contexts each ","Tagging  create! ","taggings any? ","Tagging  find "," class to_s "," id ","tagging tagger_type == ","tagging tagger_type ","tagging tagger_id == ","owner id ","tagging tagger_id ","tagging tag_id == ","tagging tag_id ","Tagging  destroy_all ","old_taggings map "," class base_class to_s "," class base_class ","old_taggings present? ","Tagging  where ","Tag  find_or_create_with_like_by_name  id ","Tag  find_or_create_with_like_by_name _names each "," instance_variable_get -  each ","tag_list -  each "," tags_on -  any? "," instance_variable_get  instance_variable_get owner  ","(send\n  (send nil :custom_ custom_contexts + ) :+\n  (send\n    (send\n      (send\n        (self) :class) :tag_types) :map\n    (block-pass\n      (sym :to_s)))) each "," custom_ custom_contexts +  + "," custom_ custom_contexts +  ","  tag_list_cache_on _on "," tag_list_ tag_list_cache_on _on "," Tagging  find  create! "," Tagging  where  create! "," Tagging  find  "," Tagging  where  ","Tag  find_or_create_with_like_by_name s each ","Tag  find_or_create_all_with_like_by_name  each "," Tagging  find  any? "," Tagging  where  any? ","Tag  find_or_create_with_like_by_name s reject! ","Tag  find_or_create_all_with_like_by_name  reject! "," taggings find  each ","Tagging  find  each ","Tagging  where  each ","old_Tagging  find  each ","old_Tagging  where  each "," Tagging  find  find "," Tagging  where  find "," instance_variable_get owner  class to_s "," instance_variable_get owner  class "," tag_list_cache_on  each "," custom_contexts +  each ","Tagging  find  any? ","Tagging  where  any? "," instance_variable_get owner  id "," taggings find  map ","Tagging  find  map ","Tagging  where  map ","old_Tagging  find  map ","old_Tagging  where  map "," taggings find  present? ","Tagging  find  present? ","Tagging  where  present? ","old_Tagging  find  present? ","old_Tagging  where  present? "]}," ActiveRecord Acts TaggableOn InstanceMethods save_cached_tag_list":{"type":"method","name":"save_cached_tag_list","children":[],"call":[" []= "," send to_s "," send ","tag_type singularize "," class send "," class "," class tag_types map each "," class tag_types map "," class tag_types "," tag_list_cache_on tags join "," tag_list_cache_on tags "," tag_list_cache_on "," tag_list_cache_on to_a flatten compact join "," tag_list_cache_on to_a flatten compact "," tag_list_cache_on to_a flatten "," tag_list_cache_on to_a "]}," ActiveRecord Acts TaggableOn InstanceMethods related_search_options":{"type":"method","name":"related_search_options","children":[],"call":["(pair\n  (sym :select)\n  (dstr\n    (begin\n      (send\n        (lvar :klass) :table_name))\n    (str \".*, COUNT(\")\n    (begin\n      (send\n        (const nil :Tag) :table_name))\n    (str \".id) AS count\"))) update ","klass table_name ","Tag  table_name ","Tagging  table_name ","klass to_s "," id "," class == "," class ","t name "," tags_on collect "," tags_on "," grouped_column_names_for "]}," ActiveRecord Acts TaggableOn InstanceMethods related_tags_for":{"type":"method","name":"related_tags_for","children":[],"call":["klass find "," related_search_options ","klass select from where group order ","search_conditions [] ","klass select from where group ","klass select from where ","klass select from ","klass select "," related_search_options  [] "]}," ActiveRecord Acts TaggableOn InstanceMethods tag_counts_on":{"type":"method","name":"tag_counts_on","children":[],"call":[" class tag_counts_on ","options merge "," id "," class "]}," ActiveRecord Acts TaggableOn InstanceMethods set_tag_list_on":{"type":"method","name":"set_tag_list_on","children":[],"call":[" add_custom_context "," instance_variable_set ","TagList  from_owner ","context to_s singularize ","context to_s "," tag_list_cache_on []= ","TagList  from "," tag_list_cache_on "]}," ActiveRecord Acts TaggableOn InstanceMethods cached_tag_list_on":{"type":"method","name":"cached_tag_list_on","children":[],"call":[" [] ","context to_s singularize ","context to_s "]}," ActiveRecord Acts TaggableOn InstanceMethods tags_on":{"type":"method","name":"tags_on","children":[],"call":[" base_tags find "," base_tags ","context to_s ","Tagging  table_name ","owner class to_s ","owner class ","owner id "," base_tags where "]}," ActiveRecord Acts TaggableOn InstanceMethods tag_list_on":{"type":"method","name":"tag_list_on","children":[],"call":[" instance_variable_set ","TagList  new "," tags_on map "," tags_on ","TagList  from "," [] ","(lvasgn :cached_value\n  (send nil :cached_tag_list_on\n    (lvar :context))) nil? ! ","(lvasgn :cached_value\n  (send nil :cached_tag_list_on\n    (lvar :context))) nil? "," cached_tag_list_on "," class caching_tag_list_on? "," class ","owner ! "," instance_variable_get "," instance_variable_get nil? "," add_custom_context ","context to_s singularize + ","context to_s singularize ","context to_s ","cache []= ","cache [] "," tag_list_cache_on ","(lvasgn : cached_tag_list_on \n  (send nil :cached_tag_list_on\n    (lvar :context))) nil? ! ","(lvasgn : tag_list_cache_on d_value\n  (send nil : tag_list_cache_on d_tag_list_on\n    (lvar :context))) nil? ! ","(lvasgn : cached_tag_list_on \n  (send nil :cached_tag_list_on\n    (lvar :context))) nil? ","(lvasgn : tag_list_cache_on d_value\n  (send nil : tag_list_cache_on d_tag_list_on\n    (lvar :context))) nil? ","  tag_list_cache_on d_tag_list_on "," tag_list_cache_on  []= "," tag_list_cache_on  [] "," tag_list_ tag_list_cache_on _on "]}," ActiveRecord Acts TaggableOn InstanceMethods add_custom_context":{"type":"method","name":"add_custom_context","children":[],"call":[" custom_contexts << ","value to_s "," custom_contexts "," class tag_types map include? "," class tag_types map "," class tag_types "," class "," custom_contexts include? "]}," ActiveRecord Acts TaggableOn InstanceMethods is_taggable?":{"type":"method","name":"is_taggable?","children":[],"call":[" class is_taggable? "," class "]}," ActiveRecord Acts TaggableOn InstanceMethods custom_contexts":{"type":"method","name":"custom_contexts","children":[],"call":[]}," ActiveRecord Acts TaggableOn InstanceMethods tag_types":{"type":"method","name":"tag_types","children":[],"call":[" class tag_types "," class "]}," ActiveRecord Acts TaggableOn SingletonMethods is_taggable?":{"type":"method","name":"is_taggable?","children":[],"call":[]}," ActiveRecord Acts TaggableOn SingletonMethods find_options_for_tag_counts":{"type":"method","name":"find_options_for_tag_counts","children":[],"call":["options [] ","joins join ","Tag  table_name ","group_by << ","having blank? ","(lvar :at_least) compact join ","(lvar :at_least) compact "," sanitize_sql ","options delete ","joins << ","scope [] "," name "," inheritance_column "," table_name "," descends_from_active_record? ","Tagging  table_name "," primary_key ","options delete to_s ","options [] nil? "," merge_conditions ","conditions compact join ","conditions compact ","options []= "," base_class name "," base_class "," scope ","options assert_valid_keys "," column_names_for_tag_group "," grouped_column_names_for ","(send\n  (send\n    (lvar :join_dependency) :join_associations) :collect) join ","assoc association_join ","join_dependency join_associations collect ","join_dependency join_associations ","ActiveRecord Associations ClassMethods InnerJoinDependency  new ","joins flatten! ","scope_joins - ","strings join + ","strings join ","j is_a? ","scope_joins select ","scope [] flatten ","(lvar :at_least) compact join  blank? ","(lvar : sanitize_sql ) compact join ","(lvar : sanitize_sql ) compact "," scope  [] "," merge_ merge_conditions  "," merge_conditions compact join  "," merge_conditions  compact join ","conditions compact join  compact join "," merge_conditions  compact ","conditions compact join  compact ","  scope  ","(send\n  (send\n    (lvar :ActiveRecord Associations ClassMethods InnerJoinDependency  new ) :join_associations) :collect) join ","ActiveRecord Associations ClassMethods InnerJoinDependency  new  join_associations collect ","ActiveRecord Associations ClassMethods InnerJoinDependency  new  join_associations "," scope _joins - ","scope [] flatten  - "," scope _joins select ","scope [] flatten  select "," scope  [] flatten "]}," ActiveRecord Acts TaggableOn SingletonMethods find_options_for_find_tagged_with":{"type":"method","name":"find_options_for_find_tagged_with","children":[],"call":["(pair\n  (sym :joins)\n  (send\n    (lvar :joins) :join\n    (str \" \"))) update ","conditions join ","joins join ","tags size "," primary_key "," table_name ","joins << ","(str \"LEFT OUTER JOIN \") + + "," quote_value "," base_class name "," base_class ","(str \"LEFT OUTER JOIN \") + ","Tagging  table_name ","options delete ","(str \"JOIN \") + + + "," sanitize_sql ","(str \"JOIN \") + + ","(str \"JOIN \") + ","Tag  table_name ","tagging_join << "," AND  + ","context to_s "," rand ","tag gsub ","tags each ","conditions << ","(send\n  (lvar :tags) :map) join ","tags map ","tags empty? ","TagList  from "," column_names_for_tagging_group "," grouped_column_names_for ","tag id ","tag name gsub ","tag name ","Tag  named_like_any ","tags length == ","tag_list length ","tags length ","(send\n  (lvar :tag_list) :map) join ","tag_list map ","tag_list empty? ","(pair\n  (sym :select)\n  (dstr\n    (str \"DISTINCT \")\n    (begin\n      (send nil :table_name))\n    (str \".*\"))) update ","on to_s ","(lvasgn :on\n  (send\n    (lvar :options) :delete\n    (sym :on))) nil? ","options [] ","TagList  new ","tags is_a? ","( + + ","( + ","Tag  named_any ","Tag  joins group where readonly ","Tag  joins group where ","Tag  joins group ","Tag  joins ","coptions delete ditioptions delete s join ","TagList  from  size ","Tag  named_like_any  size ","TagList  new  size ","Tag  named_any  size ","optioptions delete s delete ","(str \"JOIN \") + +  << ","(str \"JOIN \") + + +  << ","options delete  to_s ","coptions delete text to_s ","TagList  from  each ","Tag  named_like_any  each ","TagList  new  each ","Tag  named_any  each ","coptions delete ditioptions delete s << ","(send\n  (lvar :TagList  from ) :map) join ","(send\n  (lvar :Tag  named_like_any ) :map) join ","(send\n  (lvar :TagList  new ) :map) join ","(send\n  (lvar :Tag  named_any ) :map) join ","TagList  from  map ","Tag  named_like_any  map ","TagList  new  map ","Tag  named_any  map ","TagList  from  empty? ","Tag  named_like_any  empty? ","TagList  new  empty? ","Tag  named_any  empty? ","TagList  from  length == ","Tag  named_like_any  length == ","TagList  new  length == ","Tag  named_any  length == ","TagList  from  length ","Tag  named_like_any  length ","TagList  new  length ","Tag  named_any  length ","(lvasgn :options delete \n  (send\n    (lvar :optioptions delete s) :delete\n    (sym :options delete ))) nil? ","optioptions delete s [] ","TagList  from  is_a? ","Tag  named_like_any  is_a? ","TagList  new  is_a? ","Tag  named_any  is_a? ","Tag  joins group where readoptions delete ly "]}," ActiveRecord Acts TaggableOn SingletonMethods all_tag_counts":{"type":"method","name":"all_tag_counts","children":[],"call":["Tag  find "," find_options_for_tag_counts "," find_for_tag_counts "]}," ActiveRecord Acts TaggableOn SingletonMethods tag_counts_on":{"type":"method","name":"tag_counts_on","children":[],"call":["Tag  find "," find_options_for_tag_counts ","options merge ","context to_s "," find_for_tag_counts "]}," ActiveRecord Acts TaggableOn SingletonMethods caching_tag_list_on?":{"type":"method","name":"caching_tag_list_on?","children":[],"call":[" column_names include? ","context to_s singularize ","context to_s "," column_names "]}," ActiveRecord Acts TaggableOn SingletonMethods find_tagged_with":{"type":"method","name":"find_tagged_with","children":[],"call":[" find ","options blank? "," find_options_for_find_tagged_with "," find_options_for_find_tagged_with  blank? "," find_ find_options_for_find_tagged_with _for_find_tagged_with "]}," ActiveRecord Acts TaggableOn ClassMethods is_taggable?":{"type":"method","name":"is_taggable?","children":[],"call":[]}," ActiveRecord Acts TaggableOn ClassMethods acts_as_taggable_on":{"type":"method","name":"acts_as_taggable_on","children":[],"call":[" alias_method_chain "," extend "," include "," named_scope "," find_options_for_find_tagged_with "," lambda "," respond_to? "," after_save "," before_save "," attr_writer "," has_many "," class_inheritable_reader "," write_inheritable_attribute ","args uniq "," class_eval ","(send\n  (send nil :tag_types) :+\n  (lvar :args)) uniq "," tag_types + "," tag_types ","tag_type singularize ","(begin\n  (send\n    (lvar :tag_type) :singularize)) to_sym ","(begin\n  (lvar :tag_type)) to_sym ","tag_type to_s ","args compact! ","args flatten! "," scope ","(send\n  (send nil :tag_type to_s s) :+\n  (lvar :args)) uniq "," tag_type to_s s + "," tag_type to_s s ","tag_type to_s  singularize ","(begin\n  (send\n    (lvar :tag_type to_s ) :singularize)) to_sym ","(begin\n  (lvar :tag_type to_s )) to_sym ","tag_type to_s  to_s "]}," ActiveRecord Acts TaggableOn ClassMethods acts_as_taggable":{"type":"method","name":"acts_as_taggable","children":[],"call":[" acts_as_taggable_on "]}," ActiveRecord Acts TaggableOn ClassMethods taggable?":{"type":"method","name":"taggable?","children":[],"call":[]}," ActiveRecord Acts TaggableOn included":{"type":"method","name":"included","children":[],"call":[]}," ActiveRecord Acts TaggableOn SingletonMethods column_names_for_tagging_group":{"type":"method","name":"column_names_for_tagging_group","children":[],"call":["(send\n  (send nil :column_names) :map) join "," table_name "," column_names map "," column_names "]}," ActiveRecord Acts TaggableOn SingletonMethods column_names_for_tag_group":{"type":"method","name":"column_names_for_tag_group","children":[],"call":["(send\n  (send\n    (const nil :Tag) :column_names) :map) join ","Tag  table_name ","Tag  column_names map ","Tag  column_names "]}," ActiveRecord Acts TaggableOn GroupHelper grouped_column_names_for":{"type":"method","name":"grouped_column_names_for","children":[],"call":["(send\n  (send\n    (lvar :object) :column_names) :map) join ","object table_name ","object column_names map ","object column_names "]}," ActiveRecord Acts TaggableOn InstanceMethods matching_context_search_options":{"type":"method","name":"matching_context_search_options","children":[],"call":["(pair\n  (sym :select)\n  (dstr\n    (begin\n      (send\n        (lvar :klass) :table_name))\n    (str \".*, COUNT(\")\n    (begin\n      (send\n        (const nil :Tag) :table_name))\n    (str \".id) AS count\"))) update "," grouped_column_names_for ","Tagging  table_name ","Tag  table_name ","klass to_s ","klass table_name "," id "," class == "," class ","t name "," tags_on collect "," tags_on "]}," ActiveRecord Acts TaggableOn InstanceMethods matching_contexts_for":{"type":"method","name":"matching_contexts_for","children":[],"call":["klass find "," matching_context_search_options ","klass select from where group order ","search_conditions [] ","klass select from where group ","klass select from where ","klass select from ","klass select "," matching_context_search_options  [] "]}," ActiveRecord Acts TaggableOn InstanceMethods tag_list_cache_on":{"type":"method","name":"tag_list_cache_on","children":[],"call":[" instance_variable_set "," instance_variable_get ","context to_s singularize ","context to_s "]}," ActiveRecord Acts TaggableOn InstanceMethods all_tags_on":{"type":"method","name":"all_tags_on","children":[],"call":[" base_tags find ","opts merge ","Tagging  table_name "," base_tags ","context to_s "," base_tags where order "," base_tags where "]}," ActiveRecord Acts TaggableOn InstanceMethods all_tags_list_on":{"type":"method","name":"all_tags_list_on","children":[],"call":[" instance_variable_set ","TagList  new freeze ","TagList  new "," all_tags_on map "," all_tags_on "," instance_variable_get ","context to_s singularize ","context to_s "]}," ActsAsTaggableOn Utils escape_like":{"type":"method","name":"escape_like","children":[],"call":["str gsub ","! + "]}," ActsAsTaggableOn Utils like_operator":{"type":"method","name":"like_operator","children":[],"call":[" using_postgresql? "]}," ActsAsTaggableOn Utils sha_prefix":{"type":"method","name":"sha_prefix","children":[],"call":["Digest SHA1  hexdigest [] ","Digest SHA1  hexdigest "," rand "]}," ActsAsTaggableOn Utils using_mysql?":{"type":"method","name":"using_mysql?","children":[],"call":[" connection adapter_name == "," connection adapter_name "," connection "]}," ActsAsTaggableOn Utils using_postgresql?":{"type":"method","name":"using_postgresql?","children":[],"call":["(str \"PostgreSQL\") include? "," connection adapter_name "," connection "," connection adapter_name == "," ActiveRecord Base  connection adapter_name == "," ActiveRecord Base  connection adapter_name "," ActiveRecord Base  connection "]}," ActsAsTaggableOn Utils connection":{"type":"method","name":"connection","children":[],"call":["ActsAsTaggableOn Tag  connection "," ActiveRecord Base  connection "]}," ActsAsTaggableOn TagsHelper tag_cloud":{"type":"method","name":"tag_cloud","children":[],"call":["classes [] ","index round ","index nan? ","(send\n  (send\n    (lvar :tag) :taggings_count) :/\n  (lvar :max_count)) * ","classes size - ","classes size ","tag taggings_count / ","tag taggings_count ","tags each ","tags max_by taggings_count to_f ","tags max_by taggings_count ","tags max_by ","tags empty? ","(send\n  (begin\n    (send\n      (send\n        (lvar :tag) :count) :/\n      (lvar :max_count))) :*\n  (begin\n    (send\n      (send\n        (lvar :classes) :size) :-\n      (int 1)))) round ","(send\n  (send\n    (lvar :tag) :count) :/\n  (lvar :max_count)) * ","tag count / ","tag count ","tags sort_by last count to_f ","tags sort_by last count ","tags sort_by last ","tags sort_by ","tags all ","tags respond_to? ","tags sort_by last taggings_count to_f ","tags sort_by last taggings_count ","(send\n  (begin\n    (send\n      (send\n        (lvar :tag) :count) :/\n      (lvar :max_count))) :*\n  (begin\n    (send\n      (send\n        (lvar :classes) :size) :-\n      (int 1)))) round  round ","(send\n  (begin\n    (send\n      (send\n        (lvar :tag) :count) :/\n      (lvar :max_count))) :*\n  (begin\n    (send\n      (send\n        (lvar :classes) :size) :-\n      (int 1)))) round  nan? ","(send\n  (send\n    (lvar :tag) :taggings_count) :/\n  (lvar :tags max_by taggings_count to_f )) * ","(send\n  (send\n    (lvar :tag) :taggings_count) :/\n  (lvar :tags sort_by last count to_f )) * ","(send\n  (send\n    (lvar :tag) :taggings_count) :/\n  (lvar :tags sort_by last taggings_count to_f )) * ","tags all  each ","tags all  max_by taggings_count to_f ","tags all  max_by taggings_count ","tags all  max_by ","tags all  empty? ","(send\n  (begin\n    (send\n      (send\n        (lvar :tag) :count) :/\n      (lvar :tags max_by taggings_count to_f ))) :*\n  (begin\n    (send\n      (send\n        (lvar :classes) :size) :-\n      (int 1)))) round ","(send\n  (begin\n    (send\n      (send\n        (lvar :tag) :count) :/\n      (lvar :tags sort_by last count to_f ))) :*\n  (begin\n    (send\n      (send\n        (lvar :classes) :size) :-\n      (int 1)))) round ","(send\n  (begin\n    (send\n      (send\n        (lvar :tag) :count) :/\n      (lvar :tags sort_by last taggings_count to_f ))) :*\n  (begin\n    (send\n      (send\n        (lvar :classes) :size) :-\n      (int 1)))) round ","(send\n  (send\n    (lvar :tag) :count) :/\n  (lvar :tags max_by taggings_count to_f )) * ","(send\n  (send\n    (lvar :tag) :count) :/\n  (lvar :tags sort_by last count to_f )) * ","(send\n  (send\n    (lvar :tag) :count) :/\n  (lvar :tags sort_by last taggings_count to_f )) * ","tags all  sort_by last count to_f ","tags all  sort_by last count ","tags all  sort_by last ","tags all  sort_by ","tags all  all ","tags all  respond_to? ","tags all  sort_by last taggings_count to_f ","tags all  sort_by last taggings_count "]}," ActsAsTaggableOn Tagging remove_unused_tags":{"type":"method","name":"remove_unused_tags","children":[],"call":[" tag destroy "," tag "," tag reload taggings none? "," tag reload taggings "," tag reload "," tag reload taggings_count zero? "," tag reload taggings_count ","ActsAsTaggableOn  tags_counter ","ActsAsTaggableOn  remove_unused_tags "," tag taggings count zero? "," tag taggings count "," tag taggings ","Tag  remove_unused "," tag taggings_count zero? "," tag taggings_count "," tag reload taggings count zero? "," tag reload taggings count "]}," ActsAsTaggableOn Tagger SingletonMethods tagger?":{"type":"method","name":"tagger?","children":[],"call":[]}," ActsAsTaggableOn Tagger InstanceMethods tagger?":{"type":"method","name":"tagger?","children":[],"call":[" class is_tagger? "," class "]}," ActsAsTaggableOn Tagger ClassMethods tagger?":{"type":"method","name":"tagger?","children":[],"call":[]}," ActsAsTaggableOn Taggable taggable_on":{"type":"method","name":"taggable_on","children":[{"type":"method","name":"taggable?","children":[],"asgn":[],"call":[]}],"call":[" include "," has_many "," class_eval "," class_attribute "," preserve_tag_order= "," tag_types= ","(send\n  (send\n    (self) :tag_types) :+\n  (lvar :tag_types)) uniq "," tag_types + "," tag_types "," taggable? ","tag_types to_a flatten compact map ","tag_types to_a flatten compact ","tag_types to_a flatten ","tag_types to_a "," extend "," tag_types to_a flatten compact map = ","(send\n  (send\n    (self) :tag_types to_a flatten compact map ) :+\n  (lvar :tag_types to_a flatten compact map )) uniq "," tag_types to_a flatten compact map  + "," tag_types to_a flatten compact map  ","tag_types to_a flatten compact map  to_a flatten compact map ","tag_types to_a flatten compact map  to_a flatten compact ","tag_types to_a flatten compact map  to_a flatten ","tag_types to_a flatten compact map  to_a "]}," ActsAsTaggableOn Taggable acts_as_taggable_tenant":{"type":"method","name":"acts_as_taggable_tenant","children":[],"call":[" include "," tenant_column= "," class_attribute "," taggable? "]}," ActsAsTaggableOn Taggable acts_as_ordered_taggable_on":{"type":"method","name":"acts_as_ordered_taggable_on","children":[],"call":[" taggable_on "]}," ActsAsTaggableOn Taggable acts_as_ordered_taggable":{"type":"method","name":"acts_as_ordered_taggable","children":[],"call":[" acts_as_ordered_taggable_on "]}," ActsAsTaggableOn Taggable TaggedWithQuery build":{"type":"method","name":"build","children":[],"call":[]}," ActsAsTaggableOn Taggable TaggedWithQuery QueryBase adjust_taggings_alias":{"type":"method","name":"adjust_taggings_alias","children":[],"call":["Digest SHA1  hexdigest ","taggings_alias size > ","taggings_alias size "]}," ActsAsTaggableOn Taggable TaggedWithQuery QueryBase wildcard_escaped_tag":{"type":"method","name":"wildcard_escaped_tag","children":[],"call":[" escaped_tag "," options [] "," options "]}," ActsAsTaggableOn Taggable TaggedWithQuery QueryBase escaped_tag":{"type":"method","name":"escaped_tag","children":[],"call":["ActsAsTaggableOn Utils  escape_like ","tag downcase ","ActsAsTaggableOn  strict_case_match ","tag downcase  downcase "]}," ActsAsTaggableOn Taggable TaggedWithQuery QueryBase tags_match_type":{"type":"method","name":"tags_match_type","children":[],"call":["matches_attribute matches_any ","ActsAsTaggableOn  strict_case_match "," escaped_tag to_s "," escaped_tag "," tag_list map "," tag_list "," wildcard_escaped_tag "," options [] present? "," options [] "," options ","matches_attribute lower "," tag_arel_table [] "," tag_arel_table ","matches_attribute lower  matches_any "," tag_arel_table []  matches_any ","matches_attribute lower  lower "," tag_arel_table []  lower "]}," ActsAsTaggableOn Taggable TaggedWithQuery QueryBase tag_match_type":{"type":"method","name":"tag_match_type","children":[],"call":["matches_attribute matches ","ActsAsTaggableOn  strict_case_match "," escaped_tag "," wildcard_escaped_tag "," options [] present? "," options [] "," options ","matches_attribute lower "," tag_arel_table [] "," tag_arel_table ","matches_attribute lower  matches "," tag_arel_table []  matches ","matches_attribute lower  lower "," tag_arel_table []  lower "]}," ActsAsTaggableOn Taggable TaggedWithQuery QueryBase tagging_arel_table":{"type":"method","name":"tagging_arel_table","children":[],"call":[" tagging_model arel_table "," tagging_model "]}," ActsAsTaggableOn Taggable TaggedWithQuery QueryBase tag_arel_table":{"type":"method","name":"tag_arel_table","children":[],"call":[" tag_model arel_table "," tag_model "]}," ActsAsTaggableOn Taggable TaggedWithQuery QueryBase taggable_arel_table":{"type":"method","name":"taggable_arel_table","children":[],"call":[" taggable_model arel_table "," taggable_model "]}," ActsAsTaggableOn Taggable TaggedWithQuery QueryBase initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActsAsTaggableOn Taggable TaggedWithQuery ExcludeTagsQuery tags_that_matches_count":{"type":"method","name":"tags_that_matches_count","children":[],"call":[" tagging_arel_table [] count eq "," tag_arel_table project where "," tags_match_type "," tag_arel_table project ","Arel  star count ","Arel  star "," tag_arel_table "," tagging_arel_table [] count "," tagging_arel_table [] "," tagging_arel_table "," taggable_model find_by_sql "," tag_arel_table project where to_sql "," taggable_model "," options [] blank? "," options [] "," options "]}," ActsAsTaggableOn Taggable TaggedWithQuery ExcludeTagsQuery match_all_on_conditions":{"type":"method","name":"match_all_on_conditions","children":[],"call":["on_condition and "," tagging_arel_table [] eq "," options [] "," options "," tagging_arel_table [] "," tagging_arel_table "," options [] present? "," tagging_arel_table [] lteq "," tagging_arel_table [] gteq "," tagging_arel_table [] eq and "," taggable_model base_class name "," taggable_model base_class "," taggable_model "," taggable_arel_table [] "," taggable_model primary_key "," taggable_arel_table ","on_condition and  and "," tagging_arel_table [] eq and  and "]}," ActsAsTaggableOn Taggable TaggedWithQuery ExcludeTagsQuery owning_to_tagger":{"type":"method","name":"owning_to_tagger","children":[],"call":["arel_join join_sources ","arel_join join on "," match_all_on_conditions ","arel_join join "," tagging_arel_table "," options [] present? "," options [] "," options "," taggable_arel_table join on "," tagging_arel_table [] eq and and and "," tagging_arel_table [] eq "," taggable_model base_class name "," taggable_model base_class "," taggable_model "," tagging_arel_table [] "," tagging_arel_table [] eq and and "," taggable_arel_table [] "," taggable_model primary_key "," taggable_arel_table "," tagging_arel_table [] eq and ","owner class base_class to_s ","owner class base_class ","owner class ","owner id "," taggable_arel_table join "," options [] blank? ","arel_join join on  join_sources "," taggable_arel_table join on  join_sources ","arel_join join on  join on "," taggable_arel_table join on  join on ","arel_join join on  join "," taggable_arel_table join on  join "," options []  class base_class to_s "," options []  class base_class "," options []  class "," options []  id "]}," ActsAsTaggableOn Taggable TaggedWithQuery ExcludeTagsQuery tags_not_in_list":{"type":"method","name":"tags_not_in_list","children":[],"call":[" taggable_arel_table [] not_in "," tagging_arel_table project join on "," tagging_arel_table [] eq and and "," tags_match_type "," tagging_arel_table [] eq and "," tagging_arel_table [] eq "," taggable_model base_class name "," taggable_model base_class "," taggable_model "," tagging_arel_table [] "," tagging_arel_table "," tag_arel_table [] "," tag_arel_table "," tagging_arel_table project join "," tagging_arel_table project "," taggable_arel_table [] "," taggable_arel_table "]}," ActsAsTaggableOn Taggable TaggedWithQuery ExcludeTagsQuery build":{"type":"method","name":"build","children":[],"call":[" taggable_model joins where having readonly "," taggable_model joins where having "," tags_that_matches_count "," taggable_model joins where "," tags_not_in_list "," taggable_model joins "," owning_to_tagger "," taggable_model "]}," ActsAsTaggableOn Taggable TaggedWithQuery AnyTagsQuery alias_name":{"type":"method","name":"alias_name","children":[],"call":[" adjust_taggings_alias ","ActsAsTaggableOn Utils  sha_prefix ","tag_list join ","taggings_context [] ","alias_base_name [] "," options [] "," options "," taggable_model base_class name downcase "," taggable_model base_class name "," taggable_model base_class "," taggable_model "," taggable_model base_class name downcase  [] "]}," ActsAsTaggableOn Taggable TaggedWithQuery AnyTagsQuery order_conditions":{"type":"method","name":"order_conditions","children":[],"call":["order_by join ","order_by << "," options [] "," options "," options [] present? "," at_least_one_tag to_sql "," at_least_one_tag "," tagging_model table_name "," tagging_model "]}," ActsAsTaggableOn Taggable TaggedWithQuery AnyTagsQuery at_least_one_tag":{"type":"method","name":"at_least_one_tag","children":[],"call":["exists_contition and and "," tagging_arel_table [] eq ","owner class base_class to_s ","owner class base_class ","owner class "," tagging_arel_table [] "," tagging_arel_table ","exists_contition and ","owner id ","(lvasgn :owner\n  (send\n    (send nil :options) :[]\n    (sym :owned_by))) present? "," options [] "," options "," options [] present? "," tagging_arel_table [] lteq "," tagging_arel_table [] gteq "," tagging_arel_table [] eq and and "," tagging_arel_table [] in "," tag_arel_table project where "," tags_match_type "," tag_arel_table project "," tag_arel_table [] "," tag_arel_table "," tagging_arel_table [] eq and "," taggable_model base_class name "," taggable_model base_class "," taggable_model "," taggable_arel_table [] "," taggable_model primary_key "," taggable_arel_table ","exists_contition and and  and and ","exists_contition and  and and "," tagging_arel_table [] eq and and  and and "," options []  class base_class to_s "," options []  class base_class "," options []  class ","exists_contition and and  and ","exists_contition and  and "," tagging_arel_table [] eq and and  and "," options []  id ","(lvasgn : options [] \n  (send\n    (send nil :options) :[]\n    (sym :owned_by))) present? "]}," ActsAsTaggableOn Taggable TaggedWithQuery AnyTagsQuery model_has_at_least_one_tag":{"type":"method","name":"model_has_at_least_one_tag","children":[],"call":[" tagging_arel_table project where exists "," tagging_arel_table project where "," at_least_one_tag "," tagging_arel_table project ","Arel  star "," tagging_arel_table "]}," ActsAsTaggableOn Taggable TaggedWithQuery AnyTagsQuery all_fields":{"type":"method","name":"all_fields","children":[],"call":[" taggable_arel_table [] ","Arel  star "," taggable_arel_table "]}," ActsAsTaggableOn Taggable TaggedWithQuery AnyTagsQuery build":{"type":"method","name":"build","children":[],"call":[" taggable_model select where order readonly "," taggable_model select where order ","Arel  sql "," order_conditions "," taggable_model select where "," model_has_at_least_one_tag "," taggable_model select "," all_fields "," taggable_model "]}," ActsAsTaggableOn Taggable TaggedWithQuery AllTagsQuery tagging_alias":{"type":"method","name":"tagging_alias","children":[],"call":[" adjust_taggings_alias ","ActsAsTaggableOn Utils  sha_prefix ","alias_base_name [] "," taggable_model base_class name downcase "," taggable_model base_class name "," taggable_model base_class "," taggable_model "," taggable_model base_class name downcase  [] "]}," ActsAsTaggableOn Taggable TaggedWithQuery AllTagsQuery order_conditions":{"type":"method","name":"order_conditions","children":[],"call":["order_by join ","order_by << "," options [] "," options "," options [] present? "," tagging_arel_table project order to_sql "," tagging_arel_table project order "," tagging_arel_table project "," tagging_arel_table [] count as "," tagging_arel_table [] count "," tagging_arel_table [] ","Arel  star "," tagging_arel_table "," options [] blank? "]}," ActsAsTaggableOn Taggable TaggedWithQuery AllTagsQuery tags_that_matches_count":{"type":"method","name":"tags_that_matches_count","children":[],"call":[" tagging_arel_table [] count eq "," tag_arel_table project where "," tags_match_type "," tag_arel_table project ","Arel  star count ","Arel  star "," tag_arel_table "," tagging_arel_table [] count "," tagging_arel_table [] "," tagging_arel_table "," taggable_model find_by_sql "," tag_arel_table project where to_sql "," taggable_model "," options [] blank? "," options [] "," options "]}," ActsAsTaggableOn Taggable TaggedWithQuery AllTagsQuery by_taggable":{"type":"method","name":"by_taggable","children":[],"call":[" taggable_arel_table [] "," taggable_model primary_key "," taggable_model "," taggable_arel_table "," options [] blank? "," options [] "," options "]}," ActsAsTaggableOn Taggable TaggedWithQuery AllTagsQuery match_all_on_conditions":{"type":"method","name":"match_all_on_conditions","children":[],"call":["on_condition and "," tagging_arel_table [] eq "," options [] "," options "," tagging_arel_table [] "," tagging_arel_table "," options [] present? "," tagging_arel_table [] lteq "," tagging_arel_table [] gteq "," tagging_arel_table [] eq and "," taggable_model base_class name "," taggable_model base_class "," taggable_model "," taggable_arel_table [] "," taggable_model primary_key "," taggable_arel_table ","on_condition and  and "," tagging_arel_table [] eq and  and "]}," ActsAsTaggableOn Taggable TaggedWithQuery AllTagsQuery on_conditions":{"type":"method","name":"on_conditions","children":[],"call":["on_condition and and ","tagging_alias [] eq ","owner class base_class to_s ","owner class base_class ","owner class ","tagging_alias [] ","on_condition and ","owner id ","(lvasgn :owner\n  (send\n    (send nil :options) :[]\n    (sym :owned_by))) present? "," options [] "," options "," options [] present? ","tagging_alias [] lteq ","tagging_alias [] gteq ","tagging_alias [] eq and and ","tagging_alias [] in "," tag_arel_table project where "," tag_match_type "," tag_arel_table project "," tag_arel_table [] "," tag_arel_table ","tagging_alias [] eq and "," taggable_model base_class name "," taggable_model base_class "," taggable_model "," taggable_arel_table [] "," taggable_model primary_key "," taggable_arel_table ","on_condition and and  and and ","on_condition and  and and ","tagging_alias [] eq and and  and and "," options []  class base_class to_s "," options []  class base_class "," options []  class ","on_condition and and  and ","on_condition and  and ","tagging_alias [] eq and and  and "," options []  id ","(lvasgn : options [] \n  (send\n    (send nil :options) :[]\n    (sym :owned_by))) present? "]}," ActsAsTaggableOn Taggable TaggedWithQuery AllTagsQuery each_tag_in_list":{"type":"method","name":"each_tag_in_list","children":[],"call":["arel_join join_sources ","arel_join join on "," match_all_on_conditions ","arel_join join "," tagging_arel_table "," options [] present? "," options [] "," options "," on_conditions "," tagging_arel_table alias "," tagging_alias "," tag_list each "," tag_list "," taggable_arel_table ","arel_join join on  join_sources "," taggable_arel_table  join_sources ","arel_join join on  join on "," taggable_arel_table  join on ","arel_join join on  join "," taggable_arel_table  join ","  tagging_arel_table alias  "]}," ActsAsTaggableOn Taggable TaggedWithQuery AllTagsQuery build":{"type":"method","name":"build","children":[],"call":[" taggable_model joins group having order readonly "," taggable_model joins group having order "," order_conditions "," taggable_model joins group having "," tags_that_matches_count "," taggable_model joins group "," by_taggable "," taggable_model joins "," each_tag_in_list "," taggable_model "]}," ActsAsTaggableOn Taggable Related related_where":{"type":"method","name":"related_where","children":[],"call":["klass select from group order where ","klass select from group order ","klass select from group "," group_columns ","klass select from ","ActsAsTaggableOn Tagging  table_name ","ActsAsTaggableOn Tag  table_name ","klass table_name ","klass select ","ActsAsTaggableOn Tag  primary_key "]}," ActsAsTaggableOn Taggable Related group_columns":{"type":"method","name":"group_columns","children":[],"call":["klass primary_key ","klass table_name "," grouped_column_names_for ","ActsAsTaggableOn Utils  using_postgresql? "]}," ActsAsTaggableOn Taggable Related exclude_self":{"type":"method","name":"exclude_self","children":[],"call":["klass arel_table [] not_eq to_sql ","klass arel_table [] not_eq ","klass arel_table [] ","klass primary_key ","klass arel_table ","(send\n  (send\n    (self) :class) :base_class) include? "," class "," class base_class "]}," ActsAsTaggableOn Taggable Related related_tags_for":{"type":"method","name":"related_tags_for","children":[],"call":[" related_where ","ActsAsTaggableOn Tagging  table_name ","ActsAsTaggableOn Tag  table_name ","ActsAsTaggableOn Tag  primary_key ","klass base_class ","klass primary_key ","klass table_name "," exclude_self "," id ","tags_to_ignore include? "," tags_on map reject "," tags_on map "," tags_on ","Array  wrap map ","Array  wrap ","options [] "]}," ActsAsTaggableOn Taggable Related matching_contexts_for":{"type":"method","name":"matching_contexts_for","children":[],"call":[" related_where ","ActsAsTaggableOn Tagging  table_name ","ActsAsTaggableOn Tag  table_name ","ActsAsTaggableOn Tag  primary_key ","klass base_class ","klass primary_key ","klass table_name "," exclude_self "," id "," tags_on map "," tags_on "]}," ActsAsTaggableOn Taggable Related find_matching_contexts_for":{"type":"method","name":"find_matching_contexts_for","children":[],"call":[" matching_contexts_for ","result_context to_s ","search_context to_s "]}," ActsAsTaggableOn Taggable Related find_matching_contexts":{"type":"method","name":"find_matching_contexts","children":[],"call":[" matching_contexts_for "," class ","result_context to_s ","search_context to_s "]}," ActsAsTaggableOn Taggable Related ClassMethods acts_as_taggable_on":{"type":"method","name":"acts_as_taggable_on","children":[],"call":[" initialize_acts_as_taggable_on_related "]}," ActsAsTaggableOn Taggable Related ClassMethods initialize_acts_as_taggable_on_related":{"type":"method","name":"initialize_acts_as_taggable_on_related","children":[],"call":[" class_eval ","14 + "," tag_types map each "," tag_types map "," tag_types "]}," ActsAsTaggableOn Taggable Related included":{"type":"method","name":"included","children":[],"call":[]}," ActsAsTaggableOn Taggable Ownership save_owned_tags":{"type":"method","name":"save_owned_tags","children":[],"call":[" taggings create! ","context to_s ","tag id "," taggings ","new_tags each ","ActsAsTaggableOn Tagging  where destroy_all ","ActsAsTaggableOn Tagging  where ","owner id ","owner class base_class to_s ","owner class base_class ","owner class "," class base_class to_s "," class base_class "," class "," id ","old_tags present? ","(send\n  (lvar :tags) :map) compact ","n name downcase == ","t name downcase ","t name ","n name downcase ","n name ","new_tags find ","tags map ","owned_tags from & ","owned_tags from ","shared_tags [] == ","tags [] ","shared_tags [] ","shared_tags each_with_index ","tags [] != ","shared_tags size ","shared_tags any? ","owned_tags & "," class preserve_tag_order? ","tags - ","owned_tags - "," owner_tags_on to_a "," owner_tags_on "," find_or_create_tags_from_list_with_context ","tag_list uniq "," cached_owned_tag_list_on each "," cached_owned_tag_list_on "," tagging_contexts each "," tagging_contexts ","(send\n  (lvar :tags) :map) compact  each ","tags -  each ","new_ find_or_create_tags_from_list_with_context  each ","owned_tags -  present? ","old_ find_or_create_tags_from_list_with_context  present? ","(send\n  (lvar : find_or_create_tags_from_list_with_context ) :map) compact ","(send\n  (lvar :tags) :map) compact  find ","tags -  find ","new_ find_or_create_tags_from_list_with_context  find "," find_or_create_tags_from_list_with_context  map "," owner_tags_on to_a  from & ","owned_ find_or_create_tags_from_list_with_context  from & "," owner_tags_on to_a  from ","owned_ find_or_create_tags_from_list_with_context  from ","owned_tags &  [] == ","shared_ find_or_create_tags_from_list_with_context  [] == "," find_or_create_tags_from_list_with_context  [] ","owned_tags &  [] ","shared_ find_or_create_tags_from_list_with_context  [] ","owned_tags &  each_with_index ","shared_ find_or_create_tags_from_list_with_context  each_with_index "," find_or_create_tags_from_list_with_context  [] != ","owned_tags &  size ","shared_ find_or_create_tags_from_list_with_context  size ","owned_tags &  any? ","shared_ find_or_create_tags_from_list_with_context  any? "," owner_tags_on to_a  & ","owned_ find_or_create_tags_from_list_with_context  & "," find_or_create_tags_from_list_with_context  - "," owner_tags_on to_a  - ","owned_ find_or_create_tags_from_list_with_context  - "," owner_ find_or_create_tags_from_list_with_context _on to_a "," owner_ find_or_create_tags_from_list_with_context _on "," find_or_create_ find_or_create_tags_from_list_with_context _from_list_with_context "]}," ActsAsTaggableOn Taggable Ownership reload":{"type":"method","name":"reload","children":[],"call":[" instance_variable_set "," class tag_types each "," class tag_types "," class "]}," ActsAsTaggableOn Taggable Ownership set_owner_tag_list_on":{"type":"method","name":"set_owner_tag_list_on","children":[],"call":["cache []= ","ActsAsTaggableOn  default_parser new parse ","ActsAsTaggableOn  default_parser new ","ActsAsTaggableOn  default_parser "," cached_owned_tag_list_on "," add_custom_context "," cached_owned_tag_list_on  []= ","  cached_owned_tag_list_on d_owned_tag_list_on "]}," ActsAsTaggableOn Taggable Ownership owner_tag_list_on":{"type":"method","name":"owner_tag_list_on","children":[],"call":["ActsAsTaggableOn TagList  new "," owner_tags_on map "," owner_tags_on ","cache [] "," cached_owned_tag_list_on "," add_custom_context "," cached_owned_tag_list_on  [] ","  cached_owned_tag_list_on d_owned_tag_list_on "]}," ActsAsTaggableOn Taggable Ownership cached_owned_tag_list_on":{"type":"method","name":"cached_owned_tag_list_on","children":[],"call":[" instance_variable_set "," instance_variable_get "," instance_variable_defined? "]}," ActsAsTaggableOn Taggable Ownership owner_tags_on":{"type":"method","name":"owner_tags_on","children":[],"call":[" owner_tags where ","ActsAsTaggableOn Tagging  table_name to_s ","ActsAsTaggableOn Tagging  table_name "," owner_tags "]}," ActsAsTaggableOn Taggable Ownership owner_tags":{"type":"method","name":"owner_tags","children":[],"call":["scope order ","ActsAsTaggableOn Tagging  table_name "," class preserve_tag_order? "," class "," base_tags where ","owner class base_class to_s ","owner class base_class ","owner class ","owner id ","ActsAsTaggableOn Tagging  table_name to_s "," base_tags ","owner nil? "," base_tags where  order "," base_tags  order "]}," ActsAsTaggableOn Taggable Ownership ClassMethods initialize_acts_as_taggable_on_ownership":{"type":"method","name":"initialize_acts_as_taggable_on_ownership","children":[],"call":[" class_eval ","24 + "," tag_types map each "," tag_types map "," tag_types "]}," ActsAsTaggableOn Taggable Ownership ClassMethods acts_as_taggable_on":{"type":"method","name":"acts_as_taggable_on","children":[],"call":[" initialize_acts_as_taggable_on_ownership "]}," ActsAsTaggableOn Taggable Ownership included":{"type":"method","name":"included","children":[],"call":[]}," ActsAsTaggableOn Taggable Core find_or_create_tags_from_list_with_context":{"type":"method","name":"find_or_create_tags_from_list_with_context","children":[],"call":[" load_tags "]}," ActsAsTaggableOn Taggable Core attributes_for_create":{"type":"method","name":"attributes_for_create","children":[],"call":["tag_lists include? "," delete_if ","tags_type to_s singularize ","tags_type to_s "," tag_types map "," tag_types "]}," ActsAsTaggableOn Taggable Core attributes_for_update":{"type":"method","name":"attributes_for_update","children":[],"call":["tag_lists include? "," delete_if ","tags_type to_s singularize ","tags_type to_s "," tag_types map "," tag_types "]}," ActsAsTaggableOn Taggable Core ensure_included_cache_methods!":{"type":"method","name":"ensure_included_cache_methods!","children":[],"call":[" class columns "," class "]}," ActsAsTaggableOn Taggable Core save_tags":{"type":"method","name":"save_tags","children":[],"call":[" taggings create! ","context to_s ","tag id "," taggings "," taggable_tenant ","new_tags each "," taggings not_owned by_context where destroy_all "," taggings not_owned by_context where "," taggings not_owned by_context "," taggings not_owned ","old_tags present? ","(send\n  (lvar :tags) :map) compact ","n name downcase == ","t name downcase ","t name ","n name downcase ","n name ","new_tags find ","tags map ","current_tags [] & ","current_tags [] ","current_tags size ","shared_tags [] == ","tags [] ","shared_tags [] ","shared_tags each_with_index ","tags [] != ","shared_tags size ","shared_tags any? ","current_tags & "," class preserve_tag_order? "," class ","tags - ","current_tags - "," tags_on "," find_or_create_tags_from_list_with_context "," tag_list_cache_on uniq "," tag_list_cache_on "," tag_list_cache_set_on "," tagging_contexts each "," tagging_contexts ","(send\n  (lvar :tags) :map) compact  each ","tags -  each ","new_ find_or_create_tags_from_list_with_context  each ","current_tags -  present? ","old_ find_or_create_tags_from_list_with_context  present? ","(send\n  (lvar : find_or_create_tags_from_list_with_context ) :map) compact ","(send\n  (lvar :tags) :map) compact  find ","tags -  find ","new_ find_or_create_tags_from_list_with_context  find "," find_or_create_tags_from_list_with_context  map "," tags_on  [] & ","current_ find_or_create_tags_from_list_with_context  [] & "," tags_on  [] ","current_ find_or_create_tags_from_list_with_context  [] "," tags_on  size ","current_ find_or_create_tags_from_list_with_context  size ","current_tags &  [] == ","shared_ find_or_create_tags_from_list_with_context  [] == "," find_or_create_tags_from_list_with_context  [] ","current_tags &  [] ","shared_ find_or_create_tags_from_list_with_context  [] ","current_tags &  each_with_index ","shared_ find_or_create_tags_from_list_with_context  each_with_index "," find_or_create_tags_from_list_with_context  [] != ","current_tags &  size ","shared_ find_or_create_tags_from_list_with_context  size ","current_tags &  any? ","shared_ find_or_create_tags_from_list_with_context  any? "," tags_on  & ","current_ find_or_create_tags_from_list_with_context  & "," find_or_create_tags_from_list_with_context  - "," tags_on  - ","current_ find_or_create_tags_from_list_with_context  - ","  find_or_create_tags_from_list_with_context _on "," find_or_create_ find_or_create_tags_from_list_with_context _from_list_with_context ","  tag_list_cache_on uniq _cache_on uniq ","  tag_list_cache_on uniq _cache_on ","  tag_list_cache_on uniq _cache_set_on "]}," ActsAsTaggableOn Taggable Core load_tags":{"type":"method","name":"load_tags","children":[],"call":["ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name "]}," ActsAsTaggableOn Taggable Core reload":{"type":"method","name":"reload","children":[],"call":[" instance_variable_set ","context to_s singularize ","context to_s "," class tag_types each "," class tag_types "," class "]}," ActsAsTaggableOn Taggable Core taggable_tenant":{"type":"method","name":"taggable_tenant","children":[],"call":[" public_send "," class tenant_column "," class "]}," ActsAsTaggableOn Taggable Core tagging_contexts":{"type":"method","name":"tagging_contexts","children":[],"call":[" class tag_types map + "," custom_contexts "," class tag_types map "," class tag_types "," class "]}," ActsAsTaggableOn Taggable Core set_tag_list_on":{"type":"method","name":"set_tag_list_on","children":[],"call":[" instance_variable_set ","ActsAsTaggableOn  default_parser new parse ","ActsAsTaggableOn  default_parser new ","ActsAsTaggableOn  default_parser ","context to_s singularize ","context to_s "," add_custom_context "]}," ActsAsTaggableOn Taggable Core tags_on":{"type":"method","name":"tags_on","children":[],"call":["scope order ","ActsAsTaggableOn Tagging  table_name "," class preserve_tag_order? "," class "," base_tags where ","context to_s "," base_tags ","scope order  order "," base_tags where  order "]}," ActsAsTaggableOn Taggable Core all_tags_on":{"type":"method","name":"all_tags_on","children":[],"call":["(send\n  (const\n    (const nil :ActsAsTaggableOn) :Utils) :using_postgresql?) to_a ","scope group ","ActsAsTaggableOn Tag  primary_key ","ActsAsTaggableOn Tag  table_name ","scope order group ","scope order ","Arel  sql "," grouped_column_names_for ","ActsAsTaggableOn Utils  using_postgresql? "," base_tags where "," base_tags ","context to_s ","ActsAsTaggableOn Tagging  table_name "," base_tags where  group "," base_tags where  order group "," base_tags where  order "]}," ActsAsTaggableOn Taggable Core all_tags_list_on":{"type":"method","name":"all_tags_list_on","children":[],"call":[" instance_variable_set ","ActsAsTaggableOn TagList  new freeze ","ActsAsTaggableOn TagList  new "," all_tags_on map "," all_tags_on "," instance_variable_get "," instance_variable_defined? ","context to_s singularize ","context to_s "]}," ActsAsTaggableOn Taggable Core tag_list_on":{"type":"method","name":"tag_list_on","children":[],"call":[" tag_list_cache_on "," add_custom_context "]}," ActsAsTaggableOn Taggable Core tag_list_cache_on":{"type":"method","name":"tag_list_cache_on","children":[],"call":[" instance_variable_set ","ActsAsTaggableOn TagList  new "," tags_on map "," tags_on ","ActsAsTaggableOn  default_parser new parse ","ActsAsTaggableOn  default_parser new "," cached_tag_list_on ","ActsAsTaggableOn  default_parser "," class caching_tag_list_on? "," class "," ensure_included_cache_methods! "," instance_variable_get ","context to_s singularize ","context to_s "]}," ActsAsTaggableOn Taggable Core tag_list_cache_set_on":{"type":"method","name":"tag_list_cache_set_on","children":[],"call":[" instance_variable_get "," instance_variable_defined? ","context to_s singularize ","context to_s "]}," ActsAsTaggableOn Taggable Core cached_tag_list_on":{"type":"method","name":"cached_tag_list_on","children":[],"call":[" [] ","context to_s singularize ","context to_s "]}," ActsAsTaggableOn Taggable Core add_custom_context":{"type":"method","name":"add_custom_context","children":[],"call":[" custom_contexts << ","value to_s "," custom_contexts "," class tag_types map include? "," class tag_types map "," class tag_types "," class "," custom_contexts include? "]}," ActsAsTaggableOn Taggable Core is_taggable?":{"type":"method","name":"is_taggable?","children":[],"call":[" class is_taggable? "," class "]}," ActsAsTaggableOn Taggable Core custom_contexts":{"type":"method","name":"custom_contexts","children":[],"call":[" taggings map uniq "," taggings map "," taggings "]}," ActsAsTaggableOn Taggable Core grouped_column_names_for":{"type":"method","name":"grouped_column_names_for","children":[],"call":[" class grouped_column_names_for "," class "]}," ActsAsTaggableOn Taggable Core ClassMethods taggable_mixin":{"type":"method","name":"taggable_mixin","children":[],"call":["Module  new "]}," ActsAsTaggableOn Taggable Core ClassMethods is_taggable?":{"type":"method","name":"is_taggable?","children":[],"call":[]}," ActsAsTaggableOn Taggable Core ClassMethods tagged_with":{"type":"method","name":"tagged_with","children":[],"call":[" ActsAsTaggableOn Taggable TaggedWithQuery  build "," none ","tag_list empty? ","options dup ","ActsAsTaggableOn  default_parser new parse ","ActsAsTaggableOn  default_parser new ","ActsAsTaggableOn  default_parser ","ActsAsTaggableOn  default_parser new parse  empty? ","options dup  dup "]}," ActsAsTaggableOn Taggable Core ClassMethods grouped_column_names_for":{"type":"method","name":"grouped_column_names_for","children":[],"call":["(send\n  (send\n    (lvar :object) :column_names) :map) join ","object table_name ","object column_names map ","object column_names "]}," ActsAsTaggableOn Taggable Core ClassMethods taggable_on":{"type":"method","name":"taggable_on","children":[],"call":[" initialize_acts_as_taggable_on_core "]}," ActsAsTaggableOn Taggable Core ClassMethods initialize_acts_as_taggable_on_core":{"type":"method","name":"initialize_acts_as_taggable_on_core","children":[],"call":[" taggable_mixin class_eval ","48 + "," taggable_mixin "," attribute ","ActsAsTaggableOn Taggable TagListType  new ","(begin\n  (send\n    (lvar :tags_type) :singularize)) to_sym ","tags_type singularize "," has_many "," order "," lambda "," includes order where "," includes order "," includes "," class_eval ","ActsAsTaggableOn Tagging  table_name "," preserve_tag_order? ","tags_type to_sym ","(begin\n  (lvar :tag_type)) to_sym ","tags_type to_s singularize ","tags_type to_s "," tag_types map each "," tag_types map "," tag_types "," include ","(begin\n  (lvar :tags_type to_s singularize )) to_sym "," tags_type to_s singularize s map each "," tags_type to_s singularize s map "," tags_type to_s singularize s "]}," ActsAsTaggableOn Taggable Core included":{"type":"method","name":"included","children":[],"call":[]}," ActsAsTaggableOn Taggable Collection CalculationMethods count":{"type":"method","name":"count","children":[],"call":[]}," ActsAsTaggableOn Taggable Collection tag_counts_on":{"type":"method","name":"tag_counts_on","children":[],"call":[" class tag_counts_on ","options merge "," id "," class "]}," ActsAsTaggableOn Taggable Collection ClassMethods tag_scope_joins":{"type":"method","name":"tag_scope_joins","children":[],"call":["tag_scope extending ","tag_scope joins ","ActsAsTaggableOn Tag  table_name ","ActsAsTaggableOn Tagging  table_name "," safe_to_sql ","tag_scope joins  extending ","tag_scope joins  joins "]}," ActsAsTaggableOn Taggable Collection ClassMethods tagging_conditions":{"type":"method","name":"tagging_conditions","children":[],"call":["tagging_conditions push ","taggable_conditions << "," sanitize_sql ","options [] ","ActsAsTaggableOn Tagging  table_name ","options [] is_a? ","options delete to_s ","options delete "," base_class name "," base_class "," sanitize_sql  << "]}," ActsAsTaggableOn Taggable Collection ClassMethods generate_tagging_scope_in_clause":{"type":"method","name":"generate_tagging_scope_in_clause","children":[],"call":["tagging_scope where "," safe_to_sql "," except select "," except ","ActsAsTaggableOn Tagging  table_name "," pluck ","ActsAsTaggableOn Utils  using_mysql? ","tagging_scope where  where "]}," ActsAsTaggableOn Taggable Collection ClassMethods safe_to_sql":{"type":"method","name":"safe_to_sql","children":[],"call":["relation to_sql "," connection unprepared_statement "," connection "," connection respond_to? "]}," ActsAsTaggableOn Taggable Collection ClassMethods all_tag_counts":{"type":"method","name":"all_tag_counts","children":[],"call":[" tag_scope_joins ","tagging_scope group having ","tagging_scope group "," generate_tagging_scope_in_clause "," primary_key "," table_name ","options [] ","ActsAsTaggableOn Tagging  table_name ","having compact join ","having compact ","having push "," sanitize_sql ","options delete ","tag_scope where ","tagging_scope where "," tagging_conditions each "," tagging_conditions ","tagging_scope joins ","taggable_join + "," name "," inheritance_column "," descends_from_active_record? ","ActsAsTaggableOn Tag  select order limit ","ActsAsTaggableOn Tag  select order ","ActsAsTaggableOn Tag  select ","ActsAsTaggableOn Tag  table_name ","ActsAsTaggableOn Tagging  select ","options []= ","options assert_valid_keys ","options dup "," tag_scope where _joins "," ActsAsTaggableOn Tag  select order limit _joins ","tagging_scope group having  group having "," generate_tagging_scope_in_clause  group having ","tagging_scope where  group having ","tagging_scope joins  group having ","ActsAsTaggableOn Tagging  select  group having ","tagging_scope group having compact join  ","tagging_scope group having  group "," generate_tagging_scope_in_clause  group ","tagging_scope where  group ","tagging_scope joins  group ","ActsAsTaggableOn Tagging  select  group "," generate_tagging_scope group having _in_clause "," generate_ generate_tagging_scope_in_clause _in_clause "," generate_tagging_scope where _in_clause "," generate_tagging_scope joins _in_clause "," generate_ActsAsTaggableOn Tagging  select _in_clause ","options dup  [] ","having compact join  compact join ","having compact join  compact ","having compact join  push ","options dup  delete ","tag_scope where  where ","ActsAsTaggableOn Tag  select order limit  where ","tagging_scope group having  where "," generate_tagging_scope_in_clause  where ","tagging_scope where  where ","tagging_scope joins  where ","ActsAsTaggableOn Tagging  select  where ","tagging_scope group having  joins "," generate_tagging_scope_in_clause  joins ","tagging_scope where  joins ","tagging_scope joins  joins ","ActsAsTaggableOn Tagging  select  joins ","taggable_join +  + ","options dup  []= ","options dup  assert_valid_keys ","options dup  dup "]}," ActsAsTaggableOn Taggable Collection ClassMethods all_tags":{"type":"method","name":"all_tags","children":[],"call":[" tag_scope_joins "," generate_tagging_scope_in_clause group "," generate_tagging_scope_in_clause "," primary_key "," table_name ","ActsAsTaggableOn Tagging  table_name ","tag_scope where ","options [] ","tagging_scope where "," tagging_conditions each "," tagging_conditions ","ActsAsTaggableOn Tag  select order limit ","ActsAsTaggableOn Tag  select order ","ActsAsTaggableOn Tag  select ","ActsAsTaggableOn Tag  table_name ","ActsAsTaggableOn Tagging  select ","options []= "," sanitize_sql ","options assert_valid_keys ","options dup "," tag_scope where _joins "," ActsAsTaggableOn Tag  select order limit _joins "," generate_ generate_tagging_scope_in_clause group _in_clause group "," generate_tagging_scope where _in_clause group "," generate_ActsAsTaggableOn Tagging  select _in_clause group "," generate_ generate_tagging_scope_in_clause group _in_clause "," generate_tagging_scope where _in_clause "," generate_ActsAsTaggableOn Tagging  select _in_clause ","tag_scope where  where ","ActsAsTaggableOn Tag  select order limit  where ","options dup  [] "," generate_tagging_scope_in_clause group  where ","tagging_scope where  where ","ActsAsTaggableOn Tagging  select  where ","options dup  []= ","options dup  assert_valid_keys ","options dup  dup "]}," ActsAsTaggableOn Taggable Collection ClassMethods tags_on":{"type":"method","name":"tags_on","children":[],"call":[" all_tags ","options merge ","context to_s "]}," ActsAsTaggableOn Taggable Collection ClassMethods tag_counts_on":{"type":"method","name":"tag_counts_on","children":[],"call":[" all_tag_counts ","options merge ","context to_s "]}," ActsAsTaggableOn Taggable Collection ClassMethods acts_as_taggable_on":{"type":"method","name":"acts_as_taggable_on","children":[],"call":[" initialize_acts_as_taggable_on_collection "]}," ActsAsTaggableOn Taggable Collection ClassMethods initialize_acts_as_taggable_on_collection":{"type":"method","name":"initialize_acts_as_taggable_on_collection","children":[],"call":[" class_eval ","14 + ","tag_type singularize "," tag_types map each "," tag_types map "," tag_types "]}," ActsAsTaggableOn Taggable Collection included":{"type":"method","name":"included","children":[],"call":[]}," ActsAsTaggableOn Taggable Cache InstanceMethods save_cached_tag_list":{"type":"method","name":"save_cached_tag_list","children":[],"call":[" []= ","tag_type singularize "," tag_list_cache_on to_a flatten compact join ","ActsAsTaggableOn  delimiter "," tag_list_cache_on to_a flatten compact "," tag_list_cache_on to_a flatten "," tag_list_cache_on to_a "," tag_list_cache_on "," tag_list_cache_set_on "," class send "," class "," tag_types map each "," tag_types map "," tag_types "," tag_ tag_list_cache_on to_a flatten compact join _cache_on to_a flatten compact join "," tag_ tag_list_cache_on to_a flatten compact join _cache_on to_a flatten compact "," tag_ tag_list_cache_on to_a flatten compact join _cache_on to_a flatten "," tag_ tag_list_cache_on to_a flatten compact join _cache_on to_a "," tag_ tag_list_cache_on to_a flatten compact join _cache_on "," tag_ tag_list_cache_on to_a flatten compact join _cache_set_on "]}," ActsAsTaggableOn Taggable Cache ClassMethods caching_tag_list_on?":{"type":"method","name":"caching_tag_list_on?","children":[],"call":[" column_names include? ","context to_s singularize ","context to_s "," column_names "]}," ActsAsTaggableOn Taggable Cache ClassMethods acts_as_taggable_on":{"type":"method","name":"acts_as_taggable_on","children":[],"call":[" initialize_tags_cache "]}," ActsAsTaggableOn Taggable Cache ClassMethods initialize_tags_cache":{"type":"method","name":"initialize_tags_cache","children":[],"call":[" class_eval ","60 + ","tag_type singularize "," tag_types map each "," tag_types map "," tag_types "]}," ActsAsTaggableOn Taggable Cache Columns _add_tags_caching_methods":{"type":"method","name":"_add_tags_caching_methods","children":[],"call":[" initialize_tags_cache "," before_save "," extend "," send "]}," ActsAsTaggableOn Taggable Cache Columns _has_tags_cache_columns?":{"type":"method","name":"_has_tags_cache_columns?","children":[],"call":["db_column_names include? ","context to_s singularize ","context to_s "," tag_types any? "," tag_types ","db_columns map ","db_columns map  include? "]}," ActsAsTaggableOn Taggable Cache Columns reset_column_information":{"type":"method","name":"reset_column_information","children":[],"call":[]}," ActsAsTaggableOn Taggable Cache Columns columns":{"type":"method","name":"columns","children":[],"call":[" _add_tags_caching_methods "," _has_tags_cache_columns? "]}," ActsAsTaggableOn Taggable Cache included":{"type":"method","name":"included","children":[],"call":[]}," ActsAsTaggableOn TagList extract_and_apply_options!":{"type":"method","name":"extract_and_apply_options!","children":[],"call":["args flatten! ","parser new parse ","parser new ","args map! ","options [] ","options assert_valid_keys ","args pop ","args last is_a? ","args last "," class from "," class ","TagListParser  parse ","options []  new parse ","options []  new ","args pop  [] ","args pop  assert_valid_keys "]}," ActsAsTaggableOn TagList clean!":{"type":"method","name":"clean!","children":[],"call":[" uniq! ","ActsAsTaggableOn  strict_case_match "," map! ","ActsAsTaggableOn  force_parameterize ","tag mb_chars downcase to_s ","tag mb_chars downcase ","tag mb_chars ","ActsAsTaggableOn  force_lowercase "," reject! ","tag downcase "]}," ActsAsTaggableOn TagList to_s":{"type":"method","name":"to_s","children":[],"call":["(send\n  (lvar :tags) :map) join ","ActsAsTaggableOn  glue ","name index ","Regexp  new ","d join ","d is_a? ","ActsAsTaggableOn  delimiter ","tags map ","tags send "," dup "," frozen? "," delimiter "," delimiter ends_with? ","name include? ","d kind_of? ","(senRegexp  new \n  (lvar :tags) :map) join ","(senActsAsTaggableOn  delimiter \n  (lvar :tags) :map) join ","(send\n  (lvar : dup ) :map) join ","name inRegexp  new ex ","name inActsAsTaggableOn  delimiter ex ","Regexp  new  join ","ActsAsTaggableOn  delimiter  join ","Regexp  new  is_a? ","ActsAsTaggableOn  delimiter  is_a? ","ActsAsTaggableOn  Regexp  new elimiter ","ActsAsTaggableOn  ActsAsTaggableOn  delimiter elimiter "," dup  map ","tags senRegexp  new  ","tags senActsAsTaggableOn  delimiter  "," dup  send "," Regexp  new up "," ActsAsTaggableOn  delimiter up "," Regexp  new elimiter "," ActsAsTaggableOn  delimiter elimiter "," Regexp  new elimiter enRegexp  new s_with? "," ActsAsTaggableOn  delimiter elimiter enActsAsTaggableOn  delimiter s_with? ","name incluRegexp  new e? ","name incluActsAsTaggableOn  delimiter e? ","Regexp  new  kinRegexp  new _of? ","ActsAsTaggableOn  delimiter  kinActsAsTaggableOn  delimiter _of? "]}," ActsAsTaggableOn TagList remove":{"type":"method","name":"remove","children":[],"call":["names include? "," delete_if "," extract_and_apply_options! "]}," ActsAsTaggableOn TagList concat":{"type":"method","name":"concat","children":[],"call":["(lvar :other_tag_list) send "]}," ActsAsTaggableOn TagList +":{"type":"method","name":"+","children":[],"call":["TagList  new add add ","TagList  new add ","TagList  new "]}," ActsAsTaggableOn TagList <<":{"type":"method","name":"<<","children":[],"call":[" add "]}," ActsAsTaggableOn TagList add":{"type":"method","name":"add","children":[],"call":[" clean! "," concat "," extract_and_apply_options! "]}," ActsAsTaggableOn TagList initialize":{"type":"method","name":"initialize","children":[],"call":[" add ","ActsAsTaggableOn  default_parser "]}," ActsAsTaggableOn Tag sanitize_sql_for_named_any":{"type":"method","name":"sanitize_sql_for_named_any","children":[],"call":[" sanitize_sql "," as_8bit_ascii "," unicode_downcase "," binary ","ActsAsTaggableOn  strict_case_match "]}," ActsAsTaggableOn Tag unicode_downcase":{"type":"method","name":"unicode_downcase","children":[],"call":[" as_8bit_ascii downcase "," as_8bit_ascii ","ActiveSupport Multibyte Chars  new downcase to_s ","ActiveSupport Multibyte Chars  new downcase ","ActiveSupport Multibyte Chars  new ","ActiveSupport Multibyte Unicode  downcase ","ActiveSupport Multibyte Unicode  respond_to? "]}," ActsAsTaggableOn Tag as_8bit_ascii":{"type":"method","name":"as_8bit_ascii","children":[],"call":["string to_s mb_chars ","string to_s ","string to_s force_encoding ","string to_s dup force_encoding ","string to_s dup "]}," ActsAsTaggableOn Tag binary":{"type":"method","name":"binary","children":[],"call":["ActsAsTaggableOn Utils  using_mysql? ","(str \"mysql\") === ","ActiveRecord Base  connection_config [] ","ActiveRecord Base  connection_config "," using_mysql? "]}," ActsAsTaggableOn Tag comparable_name":{"type":"method","name":"comparable_name","children":[],"call":[" unicode_downcase ","str to_s ","ActsAsTaggableOn  strict_case_match ","str mb_chars downcase ","str mb_chars ","str downcase ","RUBY_VERSION  >= ","str mb_chars downcase to_s "," as_8bit_ascii downcase "," as_8bit_ascii "]}," ActsAsTaggableOn Tag count":{"type":"method","name":"count","children":[],"call":[" read_attribute to_i "," read_attribute "]}," ActsAsTaggableOn Tag to_s":{"type":"method","name":"to_s","children":[],"call":[" name "]}," ActsAsTaggableOn Tag ==":{"type":"method","name":"==","children":[],"call":[" name == ","other name "," name ","other is_a? ","object name ","object is_a? "]}," ActsAsTaggableOn Tag find_or_create_all_with_like_by_name":{"type":"method","name":"find_or_create_all_with_like_by_name","children":[],"call":[]}," ActsAsTaggableOn Tag find_or_create_with_like_by_name":{"type":"method","name":"find_or_create_with_like_by_name","children":[],"call":[]}," ActsAsTaggableOn Tag for_tenant":{"type":"method","name":"for_tenant","children":[],"call":[]}," ActsAsTaggableOn Tag for_context":{"type":"method","name":"for_context","children":[],"call":[]}," ActsAsTaggableOn Tag named_like_any":{"type":"method","name":"named_like_any","children":[],"call":[]}," ActsAsTaggableOn Tag named_like":{"type":"method","name":"named_like","children":[],"call":[]}," ActsAsTaggableOn Tag named_any":{"type":"method","name":"named_any","children":[],"call":[]}," ActsAsTaggableOn Tag named":{"type":"method","name":"named","children":[],"call":[]}," ActsAsTaggableOn Tag validates_name_uniqueness?":{"type":"method","name":"validates_name_uniqueness?","children":[],"call":[]}," ActsAsTaggableOn GenericParser parse":{"type":"method","name":"parse","children":[],"call":["tag_list add ","@tag_list split map reject ","@tag_list split map ","@tag_list split ","TagList  new tap ","TagList  new "]}," ActsAsTaggableOn GenericParser initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActsAsTaggableOn DefaultParser single_quote_pattern":{"type":"method","name":"single_quote_pattern","children":[],"call":[" delimiter "]}," ActsAsTaggableOn DefaultParser double_quote_pattern":{"type":"method","name":"double_quote_pattern","children":[],"call":[" delimiter "]}," ActsAsTaggableOn DefaultParser delimiter":{"type":"method","name":"delimiter","children":[],"call":["d join ","d is_a? ","ActsAsTaggableOn  delimiter ","d kind_of? ","d join  join ","ActsAsTaggableOn  delimiter  join ","d join  is_a? ","ActsAsTaggableOn  delimiter  is_a? ","ActsAsTaggableOn  d join elimiter ","ActsAsTaggableOn  ActsAsTaggableOn  delimiter elimiter ","d join  kind join _of? ","ActsAsTaggableOn  delimiter  kinActsAsTaggableOn  delimiter _of? "]}," ActsAsTaggableOn DefaultParser parse":{"type":"method","name":"parse","children":[],"call":["tag_list add ","string split ","Regexp  new "," delimiter ","tag_list << ","Regexp  last_match [] ","Regexp  last_match ","string gsub! "," single_quote_pattern "," double_quote_pattern ","string to_s dup ","string to_s ","TagList  new tap ","TagList  new ","string join ","ActsAsTaggableOn  glue ","string respond_to? ","string to_s dup  split ","string join  split ","string to_s dup  gsub! ","string join  gsub! ","string to_s dup  to_s dup ","string join  to_s dup ","string to_s dup  to_s ","string join  to_s ","string to_s dup  join ","string join  join ","string to_s dup  respond_to? ","string join  respond_to? "]}," ActsAsTaggableOn Configuration base_class=":{"type":"method","name":"base_class=","children":[],"call":[" raise ","base_class is_a? "]}," ActsAsTaggableOn Configuration apply_binary_collation":{"type":"method","name":"apply_binary_collation","children":[],"call":[]}," ActsAsTaggableOn Configuration force_binary_collation=":{"type":"method","name":"force_binary_collation=","children":[],"call":["Configuration  apply_binary_collation ","Utils  using_mysql? ","force_bin == "]}," ActsAsTaggableOn Configuration delimiter=":{"type":"method","name":"delimiter=","children":[],"call":["ActiveRecord Base  logger warn ","ActiveRecord Base  logger "]}," ActsAsTaggableOn Configuration strict_case_match=":{"type":"method","name":"strict_case_match=","children":[],"call":["@force_binary_collation == "]}," ActsAsTaggableOn Configuration initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActsAsTaggableOn glue":{"type":"method","name":"glue","children":[],"call":[]}," ActsAsTaggableOn respond_to?":{"type":"method","name":"respond_to?","children":[],"call":[]}," ActsAsTaggableOn method_missing":{"type":"method","name":"method_missing","children":[],"call":[]}," ActsAsTaggableOn setup":{"type":"method","name":"setup","children":[],"call":[]}," Taggable Core InstanceMethods tag_list_cache_set_on":{"type":"method","name":"tag_list_cache_set_on","children":[],"call":[" instance_variable_get nil? ! "," instance_variable_get nil? "," instance_variable_get ","context to_s singularize ","context to_s "," instance_variable_defined? "]}," ActiveRecord Acts TaggableOn SingletonMethods find_for_tag_counts":{"type":"method","name":"find_for_tag_counts","children":[],"call":["Tag  select joins where group limit order ","options [] ","Tag  select joins where group limit ","Tag  select joins where group ","Tag  select joins where ","Tag  select joins ","joins join ","Tag  select ","Tag  table_name ","group_by << ","having blank? "," grouped_column_names_for ","(lvar :at_least) compact join ","(lvar :at_least) compact "," sanitize_sql ","options delete ","joins << "," name "," inheritance_column "," table_name "," descends_from_active_record? ","Tagging  table_name "," primary_key ","options delete to_s ","options [] nil? ","conditions compact join ","conditions compact ","options []= "," base_class name "," base_class ","options assert_valid_keys ","(lvar :at_least) compact join  blank? ","(lvar : sanitize_sql ) compact join ","(lvar : sanitize_sql ) compact ","conditions compact join  compact join ","conditions compact join  compact "]}," ActsAsTaggableOn Tagger InstanceMethods included":{"type":"method","name":"included","children":[],"call":[]}," Taggable Related InstanceMethods related_search_options":{"type":"method","name":"related_search_options","children":[],"call":["(pair\n  (sym :select)\n  (dstr\n    (begin\n      (send\n        (lvar :klass) :table_name))\n    (str \".*, COUNT(\")\n    (begin\n      (send\n        (const nil :Tag) :table_name))\n    (str \".id) AS count\"))) update "," grouped_column_names_for ","Tag  table_name ","Tagging  table_name ","klass to_s ","klass table_name "," id "," class == "," class ","t name "," tags_on collect "," tags_on "]}," Taggable Related InstanceMethods matching_context_search_options":{"type":"method","name":"matching_context_search_options","children":[],"call":["(pair\n  (sym :select)\n  (dstr\n    (begin\n      (send\n        (lvar :klass) :table_name))\n    (str \".*, COUNT(\")\n    (begin\n      (send\n        (const nil :Tag) :table_name))\n    (str \".id) AS count\"))) update "," grouped_column_names_for ","Tagging  table_name ","Tag  table_name ","klass to_s ","klass table_name "," id "," class == "," class ","t name "," tags_on collect "," tags_on "]}," Taggable Ownership InstanceMethods save_tags":{"type":"method","name":"save_tags","children":[],"call":["Tagging  create! ","tag id ","new_tags each ","Tagging  destroy_all ","old_taggings map ","Tagging  where ","owner id ","owner class to_s ","owner class "," class base_class to_s "," class base_class "," class "," id ","tag_list - ","owned_tags - "," owner_tags_on ","Tag  find_or_create_all_with_like_by_name ","tag_list uniq "," cached_owned_tag_list_on each "," cached_owned_tag_list_on "," tagging_contexts each "," tagging_contexts "," transaction ","tag_list -  each ","Tagging  where  map ","Tag  find_or_create_all_with_like_by_name  - "," owner_tags_on  - ","Tag  find_or_create_all_with_like_by_name  uniq "," cached_owned_Tag  find_or_create_all_with_like_by_name _on each "," cached_owned_Tag  find_or_create_all_with_like_by_name _on "]}," Taggable Core ClassMethods find_options_for_find_tagged_with":{"type":"method","name":"find_options_for_find_tagged_with","children":[],"call":[" joins group where readonly "," joins group where ","conditions join "," joins group "," joins ","joins join ","tags size "," grouped_column_names_for ","joins << ","(str \"LEFT OUTER JOIN \") + + "," quote_value "," base_class name "," base_class ","(str \"LEFT OUTER JOIN \") + "," primary_key "," table_name ","Tagging  table_name ","options delete ","tagging_join << "," AND  + "," sanitize_sql ","context to_s ","(str \"JOIN \") + + + ","tag id ","(str \"JOIN \") + + ","(str \"JOIN \") + "," rand ","tag name gsub ","tag name ","tags each "," where ","tags length == ","tag_list length ","tags length ","Tag  named_any ","conditions << ","Tag  table_name ","(send\n  (lvar :tag_list) :map) join ","tag_list map ","tag_list empty? ","TagList  from ","Tag  named_any  size ","(str \"JOIN \") + + +  << ","options delete  to_s ","Tag  named_any  each ","Tag  named_any  length == ","TagList  from  length ","Tag  named_any  length ","(send\n  (lvar :TagList  from ) :map) join ","TagList  from  map ","TagList  from  empty? "]}," Taggable Aggregate InstanceMethods tag_counts_on":{"type":"method","name":"tag_counts_on","children":[],"call":[" class tag_counts_on ","options merge "," id "," class "]}," Taggable Aggregate ClassMethods find_for_tag_counts":{"type":"method","name":"find_for_tag_counts","children":[],"call":["Tag  select joins where group limit order ","options [] ","Tag  select joins where group limit ","Tag  select joins where group ","Tag  select joins where ","Tag  select joins ","joins join ","Tag  select ","Tag  table_name ","group_by << ","having blank? "," grouped_column_names_for ","(lvar :at_least) compact join ","(lvar :at_least) compact "," sanitize_sql ","options delete ","joins << "," name "," inheritance_column "," table_name "," descends_from_active_record? ","Tagging  table_name "," primary_key ","options delete to_s ","options [] nil? ","conditions compact join ","conditions compact ","options []= "," base_class name "," base_class ","options assert_valid_keys ","(lvar :at_least) compact join  blank? ","(lvar : sanitize_sql ) compact join ","(lvar : sanitize_sql ) compact ","conditions compact join  compact join ","conditions compact join  compact "]}," Taggable Aggregate ClassMethods all_tag_counts":{"type":"method","name":"all_tag_counts","children":[],"call":[" find_for_tag_counts "]}," Taggable Aggregate ClassMethods tag_counts_on":{"type":"method","name":"tag_counts_on","children":[],"call":[" find_for_tag_counts ","options merge ","context to_s "]}," Taggable Aggregate included":{"type":"method","name":"included","children":[],"call":[]}," ActsAsTaggableOn TagList from":{"type":"method","name":"from","children":[],"call":["tag_list add ","string split ","Regexp  new "," delimiter ","tag_list << ","Regexp  last_match [] ","Regexp  last_match ","string gsub! "," single_quote_pattern "," double_quote_pattern ","string to_s dup ","string to_s "," new tap "," new ","string join ","ActsAsTaggableOn  glue ","string respond_to? ","string to_s dup  split ","string join  split ","string to_s dup  gsub! ","string join  gsub! ","string to_s dup  to_s dup ","string join  to_s dup ","string to_s dup  to_s ","string join  to_s ","string to_s dup  join ","string join  join ","string to_s dup  respond_to? ","string join  respond_to? "]}," ActsAsTaggableOn Tag like_operator":{"type":"method","name":"like_operator","children":[],"call":[" connection adapter_name == "," connection adapter_name "," connection "]}," ActsAsTaggableOn Taggable PostgreSQL ClassMethods grouped_column_names_for":{"type":"method","name":"grouped_column_names_for","children":[],"call":["columns flatten join ","columns flatten ","columns << ","(send\n  (lvar :objects) :map) flatten ","object table_name ","objects map ","object column_names map ","object column_names ","objects shift ","(send\n  (lvar :objects shift s) :map) flatten ","objects shift  table_name ","objects shift s map ","objects shift  column_names map ","objects shift  column_names ","objects shift s shift "]}," ActsAsTaggableOn Taggable PostgreSQL included":{"type":"method","name":"included","children":[{"type":"method","name":"named","children":[],"asgn":[],"call":[]},{"type":"method","name":"named_any","children":[],"asgn":[],"call":[]},{"type":"method","name":"named_like","children":[],"asgn":[],"call":[]},{"type":"method","name":"named_like_any","children":[],"asgn":[],"call":[]}],"call":[]}," ActsAsTaggableOn Utils OverallMethods escape_like":{"type":"method","name":"escape_like","children":[],"call":["str to_s gsub gsub ","str to_s gsub ","str to_s "," using_sqlite? ","! + ","str gsub "]}," ActsAsTaggableOn Utils OverallMethods like_operator":{"type":"method","name":"like_operator","children":[],"call":[" using_postgresql? "]}," ActsAsTaggableOn Utils OverallMethods using_sqlite?":{"type":"method","name":"using_sqlite?","children":[],"call":[" ActiveRecord Base  connection adapter_name == "," ActiveRecord Base  connection adapter_name "," ActiveRecord Base  connection "]}," ActsAsTaggableOn Utils OverallMethods using_postgresql?":{"type":"method","name":"using_postgresql?","children":[],"call":[" ActiveRecord Base  connection adapter_name == "," ActiveRecord Base  connection adapter_name "," ActiveRecord Base  connection "]}," ActsAsTaggableOn Utils included":{"type":"method","name":"included","children":[],"call":[]}," ActsAsTaggableOn Tag safe_name":{"type":"method","name":"safe_name","children":[],"call":[" name gsub "," name "]}," Taggable Cache ClassMethods initialize_acts_as_taggable_on_cache":{"type":"method","name":"initialize_acts_as_taggable_on_cache","children":[],"call":[" class_eval ","tag_type singularize "," tag_types map each "," tag_types map "," tag_types ","20 + "]}," ActsAsTaggableOn Utils OverallMethods sha_prefix":{"type":"method","name":"sha_prefix","children":[],"call":["Digest SHA1  hexdigest [] ","Digest SHA1  hexdigest ","string + ","Time  now to_s ","Time  now "," rand "]}," Taggable Dirty ClassMethods initialize_acts_as_taggable_on_dirty":{"type":"method","name":"initialize_acts_as_taggable_on_dirty","children":[],"call":[" class_eval ","tags_type to_sym ","tags_type to_s singularize ","tags_type to_s "," tag_types map each "," tag_types map "," tag_types ","15 + ","14 + "," tags_type to_s singularize s map each "," tags_type to_s singularize s map "," tags_type to_s singularize s "]}," Taggable Core InstanceMethods process_dirty_object":{"type":"method","name":"process_dirty_object","children":[],"call":[" changed_attributes []= "," changed_attributes ","old to_s != ","value to_s ","old to_s "," tag_list_on to_s "," tag_list_on "," changed_attributes delete ","old to_s == "," changed_attributes [] "," changed_attributes include? ","context to_s singularize ","context to_s ","new_list join ","new_list is_a? ","ActsAsTaggableOn TagList  new "," tag_list_on to_s  to_s != "," changed_attributes []  to_s != ","new_list join  to_s ","ActsAsTaggableOn TagList  new  to_s "," tag_list_on to_s  to_s "," changed_attributes []  to_s "," tag_list_on to_s  to_s == "," changed_attributes []  to_s == "]}," Taggable Core ClassMethods adjust_taggings_alias":{"type":"method","name":"adjust_taggings_alias","children":[],"call":["taggings_alias_ + ","Digest SHA1  hexdigest ","taggings_alias size > ","taggings_alias size ","taggings_alias_ + _ + ","taggings_alias_ +  size > ","taggings_alias_ +  size "]}," Taggable Core ClassMethods taggable_on":{"type":"method","name":"taggable_on","children":[],"call":[" initialize_acts_as_taggable_on_core "]}," Taggable Core ClassMethods taggable_mixin":{"type":"method","name":"taggable_mixin","children":[],"call":["Module  new "]}," Taggable Collection ClassMethods all_tags":{"type":"method","name":"all_tags","children":[],"call":["tag_scope joins ","ActsAsTaggableOn Tag  table_name ","ActsAsTaggableOn Tagging  table_name ","tagging_scope to_sql ","tagging_scope where group ","tagging_scope where "," select to_sql "," select "," primary_key "," table_name ","tag_scope where ","tag_conditions each ","tagging_conditions each ","ActsAsTaggableOn Tag  select order limit ","options [] ","ActsAsTaggableOn Tag  select order ","ActsAsTaggableOn Tag  select ","ActsAsTaggableOn Tagging  select ","(send\n  (lvar :options) :[]\n  (sym :conditions)) compact reverse ","(send\n  (lvar :options) :[]\n  (sym :conditions)) compact ","(lvar :taggable_conditions) compact reverse ","(lvar :taggable_conditions) compact ","taggable_conditions << "," sanitize_sql ","options delete to_s ","options delete "," base_class name "," base_class ","options []= ","options assert_valid_keys "," select map ","tag_scope extending "," safe_to_sql "," tag_scope_joins "," tagging_conditions each "," tagging_conditions "," generate_tagging_scope_in_clause group "," generate_tagging_scope_in_clause ","options dup ","tag_scope joins  joins ","tag_scope where  joins ","ActsAsTaggableOn Tag  select order limit  joins ","tagging_scope where group  to_sql ","tagging_scope where  to_sql ","ActsAsTaggableOn Tagging  select  to_sql "," generate_tagging_scope_in_clause group  to_sql ","tagging_scope where group  where group ","tagging_scope where  where group ","ActsAsTaggableOn Tagging  select  where group "," generate_tagging_scope_in_clause group  where group ","tagging_scope where group  where ","tagging_scope where  where ","ActsAsTaggableOn Tagging  select  where "," generate_tagging_scope_in_clause group  where ","tag_scope joins  where ","tag_scope where  where ","ActsAsTaggableOn Tag  select order limit  where ","(send\n  (lvar :options) :[]\n  (sym :conditions)) compact reverse  each ","(lvar :taggable_conditions) compact reverse  each ","options dup  [] ","(send\n  (lvar :options dup ) :[]\n  (sym :conditions)) compact reverse ","(send\n  (lvar :options dup ) :[]\n  (sym :conditions)) compact ","(lvar : sanitize_sql ) compact reverse ","(lvar : sanitize_sql ) compact "," sanitize_sql  << ","options dup  delete to_s ","options dup  delete ","options dup  []= ","options dup  assert_valid_keys ","tag_scope joins  extending ","tag_scope where  extending ","ActsAsTaggableOn Tag  select order limit  extending "," tag_scope joins _joins "," tag_scope where _joins "," ActsAsTaggableOn Tag  select order limit _joins "," (lvar :taggable_conditions) compact reverse  each "," (lvar :taggable_conditions) compact reverse  "," generate_tagging_scope where group _in_clause group "," generate_tagging_scope where _in_clause group "," generate_ActsAsTaggableOn Tagging  select _in_clause group "," generate_ generate_tagging_scope_in_clause group _in_clause group "," generate_tagging_scope where group _in_clause "," generate_tagging_scope where _in_clause "," generate_ActsAsTaggableOn Tagging  select _in_clause "," generate_ generate_tagging_scope_in_clause group _in_clause ","options dup  dup "]}," Taggable Collection ClassMethods tags_on":{"type":"method","name":"tags_on","children":[],"call":[" all_tags ","options merge ","context to_s "]}," Taggable Related InstanceMethods group_columns":{"type":"method","name":"group_columns","children":[],"call":["klass primary_key ","klass table_name "," grouped_column_names_for ","ActsAsTaggableOn Tag  using_postgresql? "]}," Taggable Related InstanceMethods exclude_self":{"type":"method","name":"exclude_self","children":[],"call":["klass primary_key ","klass table_name ","(send\n  (send\n    (self) :class) :base_class) include? "," class "," class base_class "]}," Compatibility parse_options":{"type":"method","name":"parse_options","children":[],"call":["scope_opts []= ","opts delete ","opts [] ","(sym :order) each "]}," Compatibility build_scope_and_options":{"type":"method","name":"build_scope_and_options","children":[],"call":["result send ","scope_opts inject "," lambda ","scope_opts empty? "," parse_options "]}," Compatibility has_many_with_compatibility":{"type":"method","name":"has_many_with_compatibility","children":[],"call":[" has_many "," build_scope_and_options ","ActiveRecord VERSION MAJOR  >= "]}," Taggable Core InstanceMethods load_tags":{"type":"method","name":"load_tags","children":[],"call":["ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name "]}," Taggable Collection CalculationMethods count":{"type":"method","name":"count","children":[],"call":["ActsAsTaggableOn Utils  active_record5? "]}," Taggable Collection ClassMethods safe_to_sql":{"type":"method","name":"safe_to_sql","children":[],"call":["relation to_sql "," connection unprepared_statement "," connection "," connection respond_to? "]}," Taggable Cache ClassMethods initialize_tags_cache":{"type":"method","name":"initialize_tags_cache","children":[],"call":[" class_eval ","48 + ","tag_type singularize "," tag_types map each "," tag_types map "," tag_types ","50 + ","49 + ","53 + ","57 + "]}," ActsAsTaggableOn Utils using_case_insensitive_collation?":{"type":"method","name":"using_case_insensitive_collation?","children":[],"call":[" ActiveRecord Base  connection collation =~ "," ActiveRecord Base  connection collation "," ActiveRecord Base  connection "," using_mysql? "," connection collation =~ "," connection collation "," connection "]}," ActsAsTaggableOn Utils using_sqlite?":{"type":"method","name":"using_sqlite?","children":[],"call":[" connection adapter_name == "," connection adapter_name "," connection "," ActiveRecord Base  connection adapter_name == "," ActiveRecord Base  connection adapter_name "," ActiveRecord Base  connection "]}," ActsAsTaggableOn Tagging columns":{"type":"method","name":"columns","children":[],"call":[]}," Taggable Related related_where":{"type":"method","name":"related_where","children":[],"call":["klass select from group order where ","klass select from group order ","klass select from group "," group_columns ","klass select from ","ActsAsTaggableOn Tagging  table_name ","ActsAsTaggableOn Tag  table_name ","klass table_name ","klass select ","ActsAsTaggableOn Tag  primary_key "]}," Taggable Related group_columns":{"type":"method","name":"group_columns","children":[],"call":["klass primary_key ","klass table_name "," grouped_column_names_for ","ActsAsTaggableOn Tag  using_postgresql? ","ActsAsTaggableOn Utils  using_postgresql? "]}," Taggable Related exclude_self":{"type":"method","name":"exclude_self","children":[],"call":["klass primary_key ","klass table_name ","(send\n  (send\n    (self) :class) :base_class) include? "," class "," class base_class ","klass arel_table [] not_eq to_sql ","klass arel_table [] not_eq ","klass arel_table [] ","klass arel_table "]}," Taggable Related related_tags_for":{"type":"method","name":"related_tags_for","children":[],"call":[" related_where ","ActsAsTaggableOn Tag  table_name ","ActsAsTaggableOn Tag  primary_key ","ActsAsTaggableOn Tagging  table_name ","klass base_class to_s ","klass base_class ","klass primary_key ","klass table_name "," exclude_self "," id ","tags_to_ignore include? ","(send\n  (send nil :tags_on\n    (lvar :context)) :collect) reject ","t name "," tags_on collect "," tags_on ","Array  wrap map ","Array  wrap ","options delete ","klass select from where group order ","klass select from where group "," group_columns ","klass select from where ","klass select from ","klass select ","(send\n  (send nil :tags_on\n    (lvar :context)) :map) reject "," tags_on map ","options [] "]}," Taggable Related matching_contexts_for":{"type":"method","name":"matching_contexts_for","children":[],"call":[" related_where ","ActsAsTaggableOn Tagging  table_name ","ActsAsTaggableOn Tag  table_name ","ActsAsTaggableOn Tag  primary_key ","klass base_class to_s ","klass base_class ","klass primary_key ","klass table_name "," exclude_self "," id ","t name "," tags_on collect "," tags_on ","klass select from where group order ","klass select from where group "," group_columns ","klass select from where ","klass select from ","klass select "," tags_on map "]}," Taggable Related find_matching_contexts_for":{"type":"method","name":"find_matching_contexts_for","children":[],"call":[" matching_contexts_for ","result_context to_s ","search_context to_s "]}," Taggable Related find_matching_contexts":{"type":"method","name":"find_matching_contexts","children":[],"call":[" matching_contexts_for "," class ","result_context to_s ","search_context to_s "]}," Taggable Ownership save_owned_tags":{"type":"method","name":"save_owned_tags","children":[],"call":[" taggings create! ","context to_s ","tag id "," taggings ","new_tags each ","ActsAsTaggableOn Tagging  destroy_all ","old_taggings map ","old_taggings present? ","ActsAsTaggableOn Tagging  where ","owner id ","owner class base_class to_s ","owner class base_class ","owner class "," class base_class to_s "," class base_class "," class "," id ","old_tags present? ","tags - ","owned_tags - ","(send\n  (lvar :tags) :map) compact ","n name downcase == ","t name downcase ","t name ","n name downcase ","n name ","new_tags find ","tags map ","owned_tags from & ","owned_tags from ","shared_tags [] == ","tags [] ","shared_tags [] ","shared_tags each_with_index ","tags [] != ","shared_tags size ","shared_tags any? ","owned_tags & "," class preserve_tag_order? "," owner_tags_on ","ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name ","tag_list uniq "," cached_owned_tag_list_on each "," cached_owned_tag_list_on "," tagging_contexts each "," tagging_contexts "," find_or_create_tags_from_list_with_context "," owner_tags_on to_a ","ActsAsTaggableOn Tagging  where destroy_all ","tags -  each ","(send\n  (lvar :tags) :map) compact  each ","new_ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  each ","new_ find_or_create_tags_from_list_with_context  each ","ActsAsTaggableOn Tagging  where  map ","ActsAsTaggableOn Tagging  where  present? ","owned_tags -  present? ","old_ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  present? ","old_ find_or_create_tags_from_list_with_context  present? ","ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  - "," find_or_create_tags_from_list_with_context  - "," owner_tags_on  - "," owner_tags_on to_a  - ","owned_ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  - ","owned_ find_or_create_tags_from_list_with_context  - ","(send\n  (lvar :ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name ) :map) compact ","(send\n  (lvar : find_or_create_tags_from_list_with_context ) :map) compact ","tags -  find ","(send\n  (lvar :tags) :map) compact  find ","new_ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  find ","new_ find_or_create_tags_from_list_with_context  find ","ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  map "," find_or_create_tags_from_list_with_context  map "," owner_tags_on  from & "," owner_tags_on to_a  from & ","owned_ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  from & ","owned_ find_or_create_tags_from_list_with_context  from & "," owner_tags_on  from "," owner_tags_on to_a  from ","owned_ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  from ","owned_ find_or_create_tags_from_list_with_context  from ","owned_tags &  [] == ","shared_ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  [] == ","shared_ find_or_create_tags_from_list_with_context  [] == ","ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  [] "," find_or_create_tags_from_list_with_context  [] ","owned_tags &  [] ","shared_ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  [] ","shared_ find_or_create_tags_from_list_with_context  [] ","owned_tags &  each_with_index ","shared_ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  each_with_index ","shared_ find_or_create_tags_from_list_with_context  each_with_index ","ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  [] != "," find_or_create_tags_from_list_with_context  [] != ","owned_tags &  size ","shared_ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  size ","shared_ find_or_create_tags_from_list_with_context  size ","owned_tags &  any? ","shared_ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  any? ","shared_ find_or_create_tags_from_list_with_context  any? "," owner_tags_on  & "," owner_tags_on to_a  & ","owned_ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name  & ","owned_ find_or_create_tags_from_list_with_context  & "," owner_ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name _on "," owner_ find_or_create_tags_from_list_with_context _on "," find_or_create_ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name _from_list_with_context "," find_or_create_ find_or_create_tags_from_list_with_context _from_list_with_context "," owner_ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name _on to_a "," owner_ find_or_create_tags_from_list_with_context _on to_a "]}," Taggable Ownership reload":{"type":"method","name":"reload","children":[],"call":[" instance_variable_set "," class tag_types each "," class tag_types "," class "]}," Taggable Ownership set_owner_tag_list_on":{"type":"method","name":"set_owner_tag_list_on","children":[],"call":["cache []= ","ActsAsTaggableOn TagList  from "," cached_owned_tag_list_on "," add_custom_context ","ActsAsTaggableOn TagListParser  parse ","ActsAsTaggableOn  default_parser new parse ","ActsAsTaggableOn  default_parser new ","ActsAsTaggableOn  default_parser "," cached_owned_tag_list_on  []= ","  cached_owned_tag_list_on d_owned_tag_list_on "]}," Taggable Ownership owner_tag_list_on":{"type":"method","name":"owner_tag_list_on","children":[],"call":["ActsAsTaggableOn TagList  new "," owner_tags_on map "," owner_tags_on ","cache [] "," cached_owned_tag_list_on "," add_custom_context "," cached_owned_tag_list_on  [] ","  cached_owned_tag_list_on d_owned_tag_list_on "]}," Taggable Ownership cached_owned_tag_list_on":{"type":"method","name":"cached_owned_tag_list_on","children":[],"call":[" instance_variable_set "," instance_variable_get "," instance_variable_defined? "]}," Taggable Ownership owner_tags_on":{"type":"method","name":"owner_tags_on","children":[],"call":["scope order ","ActsAsTaggableOn Tagging  table_name "," class preserve_tag_order? "," class "," base_tags where ","owner class base_class to_s ","owner class base_class ","owner class ","owner id ","context to_s "," base_tags ","owner nil? "," owner_tags where "," owner_tags "," base_tags where  order "," owner_tags where  order "]}," Taggable Core save_tags":{"type":"method","name":"save_tags","children":[],"call":[" taggings create! ","context to_s ","tag id "," taggings ","new_tags each ","ActsAsTaggableOn Tagging  destroy_all ","old_taggings map ","(begin\n  (send\n    (const\n      (const nil :ActsAsTaggableOn) :Tagging) :primary_key)) to_sym ","ActsAsTaggableOn Tagging  primary_key ","old_taggings present? "," taggings where ","old_tags present? ","tags - ","current_tags - ","(send\n  (lvar :tags) :map) compact ","n name downcase == ","t name downcase ","t name ","n name downcase ","n name ","new_tags find ","tags map ","current_tags [] & ","current_tags [] ","current_tags size ","shared_tags [] == ","tags [] ","shared_tags [] ","shared_tags each_with_index ","tags [] != ","shared_tags size ","shared_tags any? ","current_tags & "," class preserve_tag_order? "," class "," tags_on "," load_tags "," tag_list_cache_on uniq "," tag_list_cache_on "," tag_list_cache_set_on "," tagging_contexts each "," tagging_contexts "," find_or_create_tags_from_list_with_context "," taggings not_owned by_context destroy_all "," taggings not_owned by_context "," taggings not_owned "," taggings not_owned by_context where destroy_all "," taggings not_owned by_context where "," tenant "," taggable_tenant ","tags -  each ","(send\n  (lvar :tags) :map) compact  each ","new_ load_tags  each ","new_ find_or_create_tags_from_list_with_context  each "," taggings where  map "," taggings where  present? ","current_tags -  present? ","old_ load_tags  present? ","old_ find_or_create_tags_from_list_with_context  present? "," load_tags  - "," find_or_create_tags_from_list_with_context  - "," tags_on  - ","current_ load_tags  - ","current_ find_or_create_tags_from_list_with_context  - ","(send\n  (lvar : load_tags ) :map) compact ","(send\n  (lvar : find_or_create_tags_from_list_with_context ) :map) compact ","tags -  find ","(send\n  (lvar :tags) :map) compact  find ","new_ load_tags  find ","new_ find_or_create_tags_from_list_with_context  find "," load_tags  map "," find_or_create_tags_from_list_with_context  map "," tags_on  [] & ","current_ load_tags  [] & ","current_ find_or_create_tags_from_list_with_context  [] & "," tags_on  [] ","current_ load_tags  [] ","current_ find_or_create_tags_from_list_with_context  [] "," tags_on  size ","current_ load_tags  size ","current_ find_or_create_tags_from_list_with_context  size ","current_tags &  [] == ","shared_ load_tags  [] == ","shared_ find_or_create_tags_from_list_with_context  [] == "," load_tags  [] "," find_or_create_tags_from_list_with_context  [] ","current_tags &  [] ","shared_ load_tags  [] ","shared_ find_or_create_tags_from_list_with_context  [] ","current_tags &  each_with_index ","shared_ load_tags  each_with_index ","shared_ find_or_create_tags_from_list_with_context  each_with_index "," load_tags  [] != "," find_or_create_tags_from_list_with_context  [] != ","current_tags &  size ","shared_ load_tags  size ","shared_ find_or_create_tags_from_list_with_context  size ","current_tags &  any? ","shared_ load_tags  any? ","shared_ find_or_create_tags_from_list_with_context  any? "," tags_on  & ","current_ load_tags  & ","current_ find_or_create_tags_from_list_with_context  & ","  load_tags _on ","  find_or_create_tags_from_list_with_context _on "," load_ load_tags  "," load_ find_or_create_tags_from_list_with_context  ","  tag_list_cache_on uniq _cache_on uniq ","  tag_list_cache_on uniq _cache_on ","  tag_list_cache_on uniq _cache_set_on "," find_or_create_ load_tags _from_list_with_context "," find_or_create_ find_or_create_tags_from_list_with_context _from_list_with_context "]}," Taggable Core load_tags":{"type":"method","name":"load_tags","children":[],"call":["ActsAsTaggableOn Tag  find_or_create_all_with_like_by_name "]}," Taggable Core reload":{"type":"method","name":"reload","children":[],"call":[" instance_variable_set ","context to_s singularize ","context to_s "," class tag_types each "," class tag_types "," class "]}," Taggable Core process_dirty_object":{"type":"method","name":"process_dirty_object","children":[],"call":[" changed_attributes []= "," changed_attributes ","old to_s != ","value to_s ","old to_s "," tag_list_on to_s "," tag_list_on "," changed_attributes delete ","old to_s == "," changed_attributes [] "," changed_attributes include? ","context to_s singularize ","context to_s ","ActsAsTaggableOn TagList  new ","new_list is_a? ","old sort != ","ActsAsTaggableOn TagListParser  parse sort ","ActsAsTaggableOn TagListParser  parse ","old sort "," class preserve_tag_order "," class ","@changed_attributes []= ","ActsAsTaggableOn  default_parser new parse sort ","ActsAsTaggableOn  default_parser new parse ","ActsAsTaggableOn  default_parser new ","ActsAsTaggableOn  default_parser ","@changed_attributes delete "," tag_list_on to_s  to_s != "," changed_attributes []  to_s != "," tag_list_on  to_s != ","ActsAsTaggableOn TagList  new  to_s "," tag_list_on to_s  to_s "," changed_attributes []  to_s "," tag_list_on  to_s "," tag_list_on to_s  to_s == "," changed_attributes []  to_s == "," tag_list_on  to_s == "," tag_list_on to_s  sort != "," changed_attributes []  sort != "," tag_list_on  sort != "," tag_list_on to_s  sort "," changed_attributes []  sort "," tag_list_on  sort "]}," Taggable Core tagging_contexts":{"type":"method","name":"tagging_contexts","children":[],"call":[" custom_contexts + "," class tag_types map "," class tag_types "," class "," custom_contexts "," class tag_types map + "]}," Taggable Core set_tag_list_on":{"type":"method","name":"set_tag_list_on","children":[],"call":[" instance_variable_set ","ActsAsTaggableOn TagList  from "," process_dirty_object "," custom_contexts include? ","context to_s "," custom_contexts ","context to_s singularize "," add_custom_context ","ActsAsTaggableOn TagListParser  parse ","ActsAsTaggableOn  default_parser new parse ","ActsAsTaggableOn  default_parser new ","ActsAsTaggableOn  default_parser "]}," Taggable Core tags_on":{"type":"method","name":"tags_on","children":[],"call":["scope order ","ActsAsTaggableOn Tagging  table_name "," class preserve_tag_order? "," class "," base_tags where ","context to_s "," base_tags ","scope order  order "," base_tags where  order "]}," Taggable Core all_tags_on":{"type":"method","name":"all_tags_on","children":[],"call":["(send\n  (const\n    (const nil :ActsAsTaggableOn) :Tag) :using_postgresql?) to_a ","scope group ","ActsAsTaggableOn Tag  primary_key ","ActsAsTaggableOn Tag  table_name ","scope order group ","scope order "," grouped_column_names_for ","ActsAsTaggableOn Tag  using_postgresql? "," base_tags where "," base_tags ","context to_s ","ActsAsTaggableOn Tagging  table_name ","(send\n  (const\n    (const nil :ActsAsTaggableOn) :Utils) :using_postgresql?) to_a ","ActsAsTaggableOn Utils  using_postgresql? ","Arel  sql "," base_tags where  group "," base_tags where  order group "," base_tags where  order "]}," Taggable Core all_tags_list_on":{"type":"method","name":"all_tags_list_on","children":[],"call":[" instance_variable_set ","ActsAsTaggableOn TagList  new freeze ","ActsAsTaggableOn TagList  new "," all_tags_on map "," all_tags_on "," instance_variable_get "," instance_variable_defined? ","context to_s singularize ","context to_s "]}," Taggable Core tag_list_on":{"type":"method","name":"tag_list_on","children":[],"call":[" tag_list_cache_on "," add_custom_context "]}," Taggable Core tag_list_cache_on":{"type":"method","name":"tag_list_cache_on","children":[],"call":[" instance_variable_set ","ActsAsTaggableOn TagList  new "," tags_on map "," tags_on ","ActsAsTaggableOn TagList  from "," cached_tag_list_on "," class caching_tag_list_on? "," class "," instance_variable_get ","context to_s singularize ","context to_s ","ActsAsTaggableOn TagListParser  parse ","ActsAsTaggableOn  default_parser new parse ","ActsAsTaggableOn  default_parser new ","ActsAsTaggableOn  default_parser "," ensure_included_cache_methods! "]}," Taggable Core tag_list_cache_set_on":{"type":"method","name":"tag_list_cache_set_on","children":[],"call":[" instance_variable_get nil? ! "," instance_variable_get nil? "," instance_variable_get "," instance_variable_defined? ","context to_s singularize ","context to_s "]}," Taggable Core cached_tag_list_on":{"type":"method","name":"cached_tag_list_on","children":[],"call":[" [] ","context to_s singularize ","context to_s "]}," Taggable Core add_custom_context":{"type":"method","name":"add_custom_context","children":[],"call":[" custom_contexts << ","value to_s "," custom_contexts "," class tag_types map include? "," class tag_types map "," class tag_types "," class "," custom_contexts include? "]}," Taggable Core is_taggable?":{"type":"method","name":"is_taggable?","children":[],"call":[" class is_taggable? "," class "]}," Taggable Core custom_contexts":{"type":"method","name":"custom_contexts","children":[],"call":[" taggings map uniq "," taggings map "," taggings "]}," Taggable Core grouped_column_names_for":{"type":"method","name":"grouped_column_names_for","children":[],"call":[" class grouped_column_names_for "," class "]}," Taggable Collection tag_counts_on":{"type":"method","name":"tag_counts_on","children":[],"call":[" class tag_counts_on ","options merge "," id "," class "]}," Taggable Collection ClassMethods tag_scope_joins":{"type":"method","name":"tag_scope_joins","children":[],"call":["tag_scope extending ","tag_scope joins ","ActsAsTaggableOn Tag  table_name ","ActsAsTaggableOn Tagging  table_name "," safe_to_sql ","tag_scope joins  extending ","tag_scope joins  joins "]}," Taggable Collection ClassMethods tagging_conditions":{"type":"method","name":"tagging_conditions","children":[],"call":["tagging_conditions push ","taggable_conditions << "," sanitize_sql ","options [] ","ActsAsTaggableOn Tagging  table_name ","options delete to_s ","options delete "," base_class name "," base_class "," sanitize_sql  << "]}," ActsAsTaggableOn Utils active_record42?":{"type":"method","name":"active_record42?","children":[],"call":[" ActiveRecord VERSION MINOR  >= "," active_record4? "]}," ActsAsTaggableOn Utils active_record4?":{"type":"method","name":"active_record4?","children":[],"call":[" ActiveRecord VERSION MAJOR  == "]}," ActsAsTaggableOn Utils supports_concurrency?":{"type":"method","name":"supports_concurrency?","children":[],"call":[" using_sqlite? ! "," using_sqlite? "]}," ActsAsTaggableOn Utils postgresql_support_json?":{"type":"method","name":"postgresql_support_json?","children":[],"call":[" postgresql_version >= "," postgresql_version "]}," ActsAsTaggableOn Utils postgresql_version":{"type":"method","name":"postgresql_version","children":[],"call":[" connection execute first [] to_f "," connection execute first [] "," connection execute first "," connection execute "," connection "," using_postgresql? "]}," ActsAsTaggableOn TagList double_quote_pattern":{"type":"method","name":"double_quote_pattern","children":[],"call":[" delimiter "]}," ActsAsTaggableOn TagList single_quote_pattern":{"type":"method","name":"single_quote_pattern","children":[],"call":[" delimiter "]}," ActsAsTaggableOn TagList delimiter":{"type":"method","name":"delimiter","children":[],"call":["d join ","d kind_of? ","ActsAsTaggableOn  delimiter ","d join  join ","ActsAsTaggableOn  delimiter  join ","d join  kind join _of? ","ActsAsTaggableOn  delimiter  kinActsAsTaggableOn  delimiter _of? ","ActsAsTaggableOn  d join elimiter ","ActsAsTaggableOn  ActsAsTaggableOn  delimiter elimiter "]}," Taggable Core find_or_create_tags_from_list_with_context":{"type":"method","name":"find_or_create_tags_from_list_with_context","children":[],"call":[" load_tags "]}," Compatibility parse_taggable_options":{"type":"method","name":"parse_taggable_options","children":[],"call":["scope_opts []= ","opts delete ","opts [] ","(sym :order) each "]}," Compatibility build_taggable_scope_and_options":{"type":"method","name":"build_taggable_scope_and_options","children":[],"call":["result send ","scope_opts inject "," lambda ","scope_opts empty? "," parse_taggable_options "]}," Compatibility has_many_with_taggable_compatibility":{"type":"method","name":"has_many_with_taggable_compatibility","children":[],"call":[" has_many "," build_taggable_scope_and_options ","ActsAsTaggableOn Utils  active_record4? "]}," Taggable Collection ClassMethods generate_tagging_scope_in_clause":{"type":"method","name":"generate_tagging_scope_in_clause","children":[],"call":["tagging_scope where "," safe_to_sql "," select ","ActsAsTaggableOn Tagging  table_name "," select map ","ActsAsTaggableOn Utils  using_mysql? "," pluck "," except select "," except ","tagging_scope where  where "]}," ActsAsTaggableOn TagListParser single_quote_pattern":{"type":"method","name":"single_quote_pattern","children":[],"call":[" delimiter "]}," ActsAsTaggableOn TagListParser double_quote_pattern":{"type":"method","name":"double_quote_pattern","children":[],"call":[" delimiter "]}," ActsAsTaggableOn TagListParser delimiter":{"type":"method","name":"delimiter","children":[],"call":["d join ","d kind_of? ","ActsAsTaggableOn  delimiter ","d join  join ","ActsAsTaggableOn  delimiter  join ","d join  kind join _of? ","ActsAsTaggableOn  delimiter  kinActsAsTaggableOn  delimiter _of? ","ActsAsTaggableOn  d join elimiter ","ActsAsTaggableOn  ActsAsTaggableOn  delimiter elimiter "]}," ActsAsTaggableOn TagListParser parse":{"type":"method","name":"parse","children":[],"call":["tag_list add ","string split ","Regexp  new "," delimiter ","tag_list << ","Regexp  last_match [] ","Regexp  last_match ","string gsub! "," single_quote_pattern "," double_quote_pattern ","string to_s dup ","string to_s ","TagList  new tap ","TagList  new ","string join ","ActsAsTaggableOn  glue ","string respond_to? ","DefaultParser  new parse ","DefaultParser  new ","ActiveRecord Base  logger warn ","ActiveRecord Base  logger ","string to_s dup  split ","string join  split ","string to_s dup  gsub! ","string join  gsub! ","string to_s dup  to_s dup ","string join  to_s dup ","string to_s dup  to_s ","string join  to_s ","string to_s dup  join ","string join  join ","string to_s dup  respond_to? ","string join  respond_to? "]}," Taggable Core attributes_for_create":{"type":"method","name":"attributes_for_create","children":[],"call":["tag_lists include? "," delete_if ","tags_type to_s singularize ","tags_type to_s "," tag_types map "," tag_types "]}," Taggable Core attributes_for_update":{"type":"method","name":"attributes_for_update","children":[],"call":["tag_lists include? "," delete_if ","tags_type to_s singularize ","tags_type to_s "," tag_types map "," tag_types "]}," ActsAsTaggableOn Utils active_record5?":{"type":"method","name":"active_record5?","children":[],"call":[" ActiveRecord VERSION MAJOR  == "]}," Taggable Core ClassMethods quote_value":{"type":"method","name":"quote_value","children":[],"call":["ActsAsTaggableOn Utils  active_record5? "]}," TaggedWithQuery build":{"type":"method","name":"build","children":[],"call":[]}," TaggedWithQuery QueryBase adjust_taggings_alias":{"type":"method","name":"adjust_taggings_alias","children":[],"call":["taggings_alias_ + ","Digest SHA1  hexdigest ","taggings_alias size > ","taggings_alias size ","taggings_alias_ + _ + ","taggings_alias_ +  size > ","taggings_alias_ +  size "]}," TaggedWithQuery QueryBase escaped_tag":{"type":"method","name":"escaped_tag","children":[],"call":["! + ","tag gsub ","tag downcase ","ActsAsTaggableOn  strict_case_match ","ActsAsTaggableOn Utils  escape_like ","tag downcase  gsub ","tag downcase  downcase "]}," TaggedWithQuery QueryBase tags_match_type":{"type":"method","name":"tags_match_type","children":[],"call":["matches_attribute matches_any "," escaped_tag "," tag_list map "," tag_list "," options [] present? "," options [] "," options ","matches_attribute lower ","ActsAsTaggableOn  strict_case_match "," tag_arel_table [] "," tag_arel_table ","matches_attribute lower  matches_any "," tag_arel_table []  matches_any ","matches_attribute lower  lower "," tag_arel_table []  lower "]}," TaggedWithQuery QueryBase tag_match_type":{"type":"method","name":"tag_match_type","children":[],"call":[" tag_arel_table [] matches "," escaped_tag "," tag_arel_table [] "," tag_arel_table "," options [] present? "," options [] "," options ","matches_attribute lower ","ActsAsTaggableOn  strict_case_match ","matches_attribute matches ","matches_attribute lower  lower "," tag_arel_table []  lower ","matches_attribute lower  matches "," tag_arel_table []  matches "]}," TaggedWithQuery QueryBase tagging_arel_table":{"type":"method","name":"tagging_arel_table","children":[],"call":[" tagging_model arel_table "," tagging_model "]}," TaggedWithQuery QueryBase tag_arel_table":{"type":"method","name":"tag_arel_table","children":[],"call":[" tag_model arel_table "," tag_model "]}," TaggedWithQuery QueryBase taggable_arel_table":{"type":"method","name":"taggable_arel_table","children":[],"call":[" taggable_model arel_table "," taggable_model "]}," TaggedWithQuery QueryBase initialize":{"type":"method","name":"initialize","children":[],"call":[]}," TaggedWithQuery ExcludeTagsQuery tags_that_matches_count":{"type":"method","name":"tags_that_matches_count","children":[],"call":[" tagging_arel_table [] count eq "," tag_arel_table project where "," tags_match_type "," tag_arel_table project ","Arel  star count ","Arel  star "," tag_arel_table "," tagging_arel_table [] count "," tagging_arel_table [] "," tagging_arel_table "," taggable_model find_by_sql "," tag_arel_table project where to_sql "," taggable_model "," options [] present? "," options [] "," options "]}," TaggedWithQuery ExcludeTagsQuery match_all_on_conditions":{"type":"method","name":"match_all_on_conditions","children":[],"call":["on_condition and "," tagging_arel_table [] lteq "," options [] "," options "," tagging_arel_table [] "," tagging_arel_table "," options [] present? "," tagging_arel_table [] gteq "," tagging_arel_table [] eq and "," tagging_arel_table [] eq "," taggable_model base_class name "," taggable_model base_class "," taggable_model "," taggable_arel_table [] "," taggable_model primary_key "," taggable_arel_table ","on_condition and  and "," tagging_arel_table [] eq and  and "]}," TaggedWithQuery ExcludeTagsQuery owning_to_tagger":{"type":"method","name":"owning_to_tagger","children":[],"call":["arel_join join_sources ","arel_join join on "," match_all_on_conditions ","arel_join join "," tagging_arel_table "," options [] present? "," options [] "," options "," taggable_arel_table join on "," tagging_arel_table [] eq and and and "," tagging_arel_table [] eq "," taggable_model base_class name "," taggable_model base_class "," taggable_model "," tagging_arel_table [] "," tagging_arel_table [] eq and and "," taggable_arel_table [] "," taggable_model primary_key "," taggable_arel_table "," tagging_arel_table [] eq and ","owner class base_class to_s ","owner class base_class ","owner class ","owner id "," taggable_arel_table join ","arel_join join on  join_sources "," taggable_arel_table join on  join_sources ","arel_join join on  join on "," taggable_arel_table join on  join on ","arel_join join on  join "," taggable_arel_table join on  join "," options []  class base_class to_s "," options []  class base_class "," options []  class "," options []  id "]}," TaggedWithQuery ExcludeTagsQuery tags_not_in_list":{"type":"method","name":"tags_not_in_list","children":[],"call":[" taggable_arel_table [] not_in "," tagging_arel_table project join on "," tagging_arel_table [] eq and and "," tags_match_type "," tagging_arel_table [] eq and "," tagging_arel_table [] eq "," taggable_model base_class name "," taggable_model base_class "," taggable_model "," tagging_arel_table [] "," tagging_arel_table "," tag_arel_table [] "," tag_arel_table "," tagging_arel_table project join "," tagging_arel_table project "," taggable_arel_table [] "," taggable_arel_table "]}," TaggedWithQuery ExcludeTagsQuery build":{"type":"method","name":"build","children":[],"call":[" taggable_model joins where having readonly "," taggable_model joins where having "," tags_that_matches_count "," taggable_model joins where "," tags_not_in_list "," taggable_model joins "," owning_to_tagger "," taggable_model "]}," TaggedWithQuery AnyTagsQuery alias_name":{"type":"method","name":"alias_name","children":[],"call":[" adjust_taggings_alias ","ActsAsTaggableOn Utils  sha_prefix ","tag_list join ","taggings_context [] ","alias_base_name [] "," options [] "," options "," taggable_model base_class name downcase "," taggable_model base_class name "," taggable_model base_class "," taggable_model "," adjust_ adjust_taggings_alias  "," taggable_model base_class name downcase  [] "]}," TaggedWithQuery AnyTagsQuery order_conditions":{"type":"method","name":"order_conditions","children":[],"call":["order_by join ","order_by << "," options [] "," options "," options [] present? "," at_least_one_tag to_sql "," at_least_one_tag "," tagging_model table_name "," tagging_model "]}," TaggedWithQuery AnyTagsQuery at_least_one_tag":{"type":"method","name":"at_least_one_tag","children":[],"call":["exists_contition and and "," tagging_arel_table [] eq ","owner class base_class to_s ","owner class base_class ","owner class "," tagging_arel_table [] "," tagging_arel_table ","exists_contition and ","owner id ","owner class base_class arel_table ","(lvasgn :owner\n  (send\n    (send nil :options) :[]\n    (sym :owned_by))) present? "," options [] "," options "," tagging_arel_table [] lteq "," options [] present? "," tagging_arel_table [] gteq "," tagging_arel_table [] eq and and "," tagging_arel_table [] in "," tag_arel_table project where "," tags_match_type "," tag_arel_table project "," tag_arel_table [] "," tag_arel_table "," tagging_arel_table [] eq and "," taggable_model base_class name "," taggable_model base_class "," taggable_model "," taggable_arel_table [] "," taggable_model primary_key "," taggable_arel_table ","exists_contition and and  and and ","exists_contition and  and and "," tagging_arel_table [] eq and and  and and "," options []  class base_class to_s "," options []  class base_class "," options []  class ","exists_contition and and  and ","exists_contition and  and "," tagging_arel_table [] eq and and  and "," options []  id "," options []  class base_class arel_table ","(lvasgn : options [] \n  (send\n    (send nil :options) :[]\n    (sym :owned_by))) present? "]}," TaggedWithQuery AnyTagsQuery model_has_at_least_one_tag":{"type":"method","name":"model_has_at_least_one_tag","children":[],"call":[" tagging_arel_table project where exists "," tagging_arel_table project where "," at_least_one_tag "," tagging_arel_table project ","Arel  star "," tagging_arel_table "," tagging_arel_table alias "," alias_name "," tag_list "]}," TaggedWithQuery AnyTagsQuery all_fields":{"type":"method","name":"all_fields","children":[],"call":[" taggable_arel_table [] ","Arel  star "," taggable_arel_table "]}," TaggedWithQuery AnyTagsQuery build":{"type":"method","name":"build","children":[],"call":[" taggable_model select where order readonly "," taggable_model select where order "," order_conditions "," taggable_model select where "," model_has_at_least_one_tag "," taggable_model select "," all_fields "," taggable_model ","Arel  sql "]}," TaggedWithQuery AllTagsQuery tagging_alias":{"type":"method","name":"tagging_alias","children":[],"call":[" adjust_taggings_alias ","ActsAsTaggableOn Utils  sha_prefix ","alias_base_name [] "," taggable_model base_class name downcase "," taggable_model base_class name "," taggable_model base_class "," taggable_model "," taggable_model base_class name downcase  [] "]}," TaggedWithQuery AllTagsQuery order_conditions":{"type":"method","name":"order_conditions","children":[],"call":["order_by join ","order_by << "," options [] "," options "," options [] present? "," tagging_arel_table project order to_sql "," tagging_arel_table project order "," tagging_arel_table project "," tagging_arel_table [] count as "," tagging_arel_table [] count "," tagging_arel_table [] ","Arel  star "," tagging_arel_table "," options [] blank? "]}," TaggedWithQuery AllTagsQuery tags_that_matches_count":{"type":"method","name":"tags_that_matches_count","children":[],"call":[" tagging_arel_table [] count eq "," tag_arel_table project where "," tags_match_type "," tag_arel_table project ","Arel  star count ","Arel  star "," tag_arel_table "," tagging_arel_table [] count "," tagging_arel_table [] "," tagging_arel_table "," taggable_model find_by_sql "," tag_arel_table project where to_sql "," taggable_model "," options [] present? "," options [] "," options "]}," TaggedWithQuery AllTagsQuery by_taggable":{"type":"method","name":"by_taggable","children":[],"call":[" taggable_arel_table [] "," taggable_model primary_key "," taggable_model "," taggable_arel_table "," options [] present? "," options [] "," options "]}," TaggedWithQuery AllTagsQuery match_all_on_conditions":{"type":"method","name":"match_all_on_conditions","children":[],"call":["on_condition and "," tagging_arel_table [] lteq "," options [] "," options "," tagging_arel_table [] "," tagging_arel_table "," options [] present? "," tagging_arel_table [] gteq "," tagging_arel_table [] eq and "," tagging_arel_table [] eq "," taggable_model base_class name "," taggable_model base_class "," taggable_model "," taggable_arel_table [] "," taggable_model primary_key "," taggable_arel_table ","on_condition and  and "," tagging_arel_table [] eq and  and "]}," TaggedWithQuery AllTagsQuery on_conditions":{"type":"method","name":"on_conditions","children":[],"call":["on_condition and and ","tagging_alias [] eq ","owner class base_class to_s ","owner class base_class ","owner class ","tagging_alias [] ","on_condition and ","owner id ","owner class base_class arel_table ","(lvasgn :owner\n  (send\n    (send nil :options) :[]\n    (sym :owned_by))) present? "," options [] "," options ","tagging_alias [] lteq "," options [] present? ","tagging_alias [] gteq ","tagging_alias [] eq and and ","tagging_alias [] in "," tag_arel_table project where "," tag_match_type "," tag_arel_table project "," tag_arel_table [] "," tag_arel_table ","tagging_alias [] eq and "," taggable_model base_class name "," taggable_model base_class "," taggable_model "," taggable_arel_table [] "," taggable_model primary_key "," taggable_arel_table ","on_condition and and  and and ","on_condition and  and and ","tagging_alias [] eq and and  and and "," options []  class base_class to_s "," options []  class base_class "," options []  class ","on_condition and and  and ","on_condition and  and ","tagging_alias [] eq and and  and "," options []  id "," options []  class base_class arel_table ","(lvasgn : options [] \n  (send\n    (send nil :options) :[]\n    (sym :owned_by))) present? "]}," TaggedWithQuery AllTagsQuery each_tag_in_list":{"type":"method","name":"each_tag_in_list","children":[],"call":["arel_join join_sources ","arel_join join on "," match_all_on_conditions ","arel_join join "," tagging_arel_table "," options [] present? "," options [] "," options "," on_conditions "," tagging_arel_table alias "," tagging_alias "," tag_list each "," tag_list "," taggable_arel_table ","arel_join join on  join_sources "," taggable_arel_table  join_sources ","arel_join join on  join on "," taggable_arel_table  join on ","arel_join join on  join "," taggable_arel_table  join ","  tagging_arel_table alias  "]}," TaggedWithQuery AllTagsQuery build":{"type":"method","name":"build","children":[],"call":[" taggable_model joins group having order readonly "," taggable_model joins group having order "," order_conditions "," taggable_model joins group having "," tags_that_matches_count "," taggable_model joins group "," by_taggable "," taggable_model joins "," each_tag_in_list "," taggable_model "]}," Taggable Ownership owner_tags":{"type":"method","name":"owner_tags","children":[],"call":["scope order ","ActsAsTaggableOn Tagging  table_name "," class preserve_tag_order? "," class "," base_tags where ","owner class base_class to_s ","owner class base_class ","owner class ","owner id "," base_tags ","owner nil? "," base_tags where  order "," base_tags  order "]}," Taggable Core ensure_included_cache_methods!":{"type":"method","name":"ensure_included_cache_methods!","children":[],"call":[" class columns "," class "]}," ActsAsTaggableOn Utils legacy_activerecord?":{"type":"method","name":"legacy_activerecord?","children":[],"call":["ActiveRecord  version <= ","Gem Version  new ","ActiveRecord  version "]}," Taggable Cache Columns _add_tags_caching_methods":{"type":"method","name":"_add_tags_caching_methods","children":[],"call":[" initialize_tags_cache "," before_save "," extend "," send "]}," Taggable Cache Columns _has_tags_cache_columns?":{"type":"method","name":"_has_tags_cache_columns?","children":[],"call":["db_column_names include? ","context to_s singularize ","context to_s "," tag_types any? "," tag_types ","db_columns map ","db_columns map  include? "]}," Taggable Cache Columns reset_column_information":{"type":"method","name":"reset_column_information","children":[],"call":[]}," Taggable Cache Columns columns":{"type":"method","name":"columns","children":[],"call":[" _add_tags_caching_methods "," _has_tags_cache_columns? "]}," Taggable Core tenant":{"type":"method","name":"tenant","children":[],"call":[" read_attribute "," class tenant_column "," class "]}," Taggable Core taggable_tenant":{"type":"method","name":"taggable_tenant","children":[],"call":[" public_send "," class tenant_column "," class "]}}