{" TTY ProgressBar register_callbacks":{"type":"method","name":"register_callbacks","children":[],"call":["Signal  trap "," send "," max_columns "," proc "," finish "," width "," width < "," fail ","EXIT_SIGS  each "]}," TTY ProgressBar default_pipeline":{"type":"method","name":"default_pipeline","children":[],"call":["@pipeline use "]}," TTY ProgressBar terminate":{"type":"method","name":"terminate","children":[],"call":[]}," TTY ProgressBar finish":{"type":"method","name":"finish","children":[],"call":[" write "," render ","ECMA_CSI  + + ","ECMA_CSI  + ","@meter clear "," clear_line "," clear "," total "," no_width ","@last_render_width != "," hide_cursor "," emit "," done? ","TTY Cursor  show ","@timer stop "," indeterminate? "," width "]}," TTY ProgressBar resize":{"type":"method","name":"resize","children":[],"call":[" advance "," fail "," width= "," clear_line "," synchronize "," done? ","@configuration width= ","@configuration no_width= "]}," TTY ProgressBar write":{"type":"method","name":"write","children":[],"call":["@output flush ","@output print ","ECMA_CSI  + + ","ECMA_CSI  + "," output flush "," output "," output print ","@multibar line_inset ","TTY Cursor  column "," move_to_row "," tty? "]}," TTY ProgressBar render":{"type":"method","name":"render","children":[],"call":["formatted length ","Time  now "," write ","@pipeline decorate ","elapsed * "," total / - "," total / "," total ","percent == ","(send\n  (lvar :now) :-\n  (ivar :@start_at)) * ","now - ","(send\n  (send nil :ratio) :*\n  (int 100)) to_i "," ratio * "," ratio "," width == "," width ","ECMA_CSI  + + ","ECMA_CSI  + ","@last_render_time == ","formatted gsub ","@tokens each ","@formatter decorate ","(send\n  (ivar :@current) :>=\n  (send nil :total)) ! ","@current >= ","@last_render_width == "," hide_cursor "," done? ","TTY Cursor  hide "," class display_columns "," class "," padout "," update ","@multibar line_inset ","@formatters decorate ","@current < "," indeterminate? ","@pipeline decorate  length ","formatted gsub  length ","@formatter decorate  length ","@formatters decorate  length ","Time  Time  now  ","(send\n  (lvar :now) :-\n  (ivar :@start_at)) *  * ","(send\n  (send nil :ratio) :*\n  (int 100)) to_i  == ","(send\n  (lvar :Time  now ) :-\n  (ivar :@start_at)) * ","Time  now  - ","Time  now  == ","@pipeline decorate  gsub ","formatted gsub  gsub ","@formatter decorate  gsub ","@formatters decorate  gsub ","formatted length  == "," class display_columns  == "]}," TTY ProgressBar max_columns":{"type":"method","name":"max_columns","children":[],"call":["IO  console winsize last ","IO  console winsize ","IO  console ","TTY Screen  width ","TTY Screen  new width ","TTY Screen  new "]}," TTY ProgressBar ratio":{"type":"method","name":"ratio","children":[],"call":["(send\n  (array\n    (lvar :proportion)\n    (int 0)) :max) min ","(lvar :proportion) max ","@current to_f / ","@current to_f "," total "," total > "," synchronize ","(if\n  (send\n    (ivar :@unknown) :>\n    (int 100))\n  (send\n    (int 200) :-\n    (ivar :@unknown))\n  (ivar :@unknown)) to_f / ","(if\n  (send\n    (ivar :@unknown) :>\n    (int 100))\n  (send\n    (int 200) :-\n    (ivar :@unknown))\n  (ivar :@unknown)) to_f ","200 - ","@unknown > ","(send\n  (array\n    (lvar :(if\n  (send\n    (ivar :@unknown) :>\n    (int 100))\n  (send\n    (int 200) :-\n    (ivar :@unknown))\n  (ivar :@unknown)) to_f / )\n    (int 0)) :max) min ","(lvar :(if\n  (send\n    (ivar :@unknown) :>\n    (int 100))\n  (send\n    (int 200) :-\n    (ivar :@unknown))\n  (ivar :@unknown)) to_f / ) max "]}," TTY ProgressBar advance":{"type":"method","name":"advance","children":[],"call":[" render ","(send\n  (lvar :now) :-\n  (ivar :@last_render_time)) < ","now - ","Time  now "," finish ","@current >= "," total "," no_width ! "," no_width ","@current zero? ","@meter sample ","@started ! ","progress respond_to? "," emit "," synchronize "," done? ","(send\n  (send\n    (const nil :Time) :now) :-\n  (ivar :@last_render_time)) < ","Time  now - "," indeterminate? ! "," indeterminate? ","@unknown > ","@timer start ","(send\n  (lvar :Time  now ) :-\n  (ivar :@last_render_time)) < ","Time  now  - ","Time  Time  now  ","(send\n  (send\n    (const nil :Time) :Time  now ) :-\n  (ivar :@last_render_time)) < ","Time  Time  now  - ","@unkTime  now n > "]}," TTY ProgressBar initialize":{"type":"method","name":"initialize","children":[],"call":[" register_callbacks "," default_pipeline ","TTY ProgressBar Pipeline  new ","Time  now ","1.0 / ","@frequency == ","options fetch "," fail ","@formatter load ","Meter  new ","TTY ProgressBar Formatter  new "," frequency "," frequency == "," no_width "," block_given? ","Configuration  new ","TTY ProgressBar Meter  new ","TTY ProgressBar Configuration  new "," reset ","h []= ","Hash  new "," interval "," raise ","format is_a? ","@formatters load ","TTY ProgressBar Timer  new ","TTY ProgressBar Formatters  new "," register_signals ","TTY ProgressBar Formatter  new  load ","TTY ProgressBar Formatter  new s load ","TTY ProgressBar Formatters  new  load "]}," TTY ProgressBar TotalFormatter format":{"type":"method","name":"format","children":[],"call":["value gsub ","@progress total to_s ","@progress total "]}," TTY ProgressBar TotalFormatter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," TTY ProgressBar Pipeline each":{"type":"method","name":"each","children":[],"call":[" formatters each "," formatters "]}," TTY ProgressBar Pipeline decorate":{"type":"method","name":"decorate","children":[],"call":["formatter call format ","formatter call "," formatters inject "," formatters ","tokenized dup ","instance format ","instance matches? ","instance respond_to? ","formatter matches? ","formatter respond_to? ","formatter call  format ","formatter call  matches? ","formatter call  respond_to? "]}," TTY ProgressBar Pipeline use":{"type":"method","name":"use","children":[],"call":[" formatters << ","formatter new "," proc "," formatters "]}," TTY ProgressBar Pipeline initialize":{"type":"method","name":"initialize","children":[],"call":[" freeze "]}," TTY ProgressBar PercentFormatter format":{"type":"method","name":"format","children":[],"call":["value gsub ","percent to_s + ","percent to_s ","(send\n  (send\n    (ivar :@progress) :ratio) :*\n  (int 100)) to_i ","@progress ratio * ","@progress ratio ","@progress width == ","@progress width ","(send\n  (send\n    (ivar :@progress) :ratio) :*\n  (int 100)) to_i  to_s + ","(send\n  (send\n    (ivar :@progress) :ratio) :*\n  (int 100)) to_i  to_s "]}," TTY ProgressBar PercentFormatter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," TTY ProgressBar ElapsedFormatter format":{"type":"method","name":"format","children":[],"call":["value gsub ","@converter to_time ","Time  now - ","@progress start_at ","Time  now ","Converter  to_time "]}," TTY ProgressBar ElapsedFormatter initialize":{"type":"method","name":"initialize","children":[],"call":["TTY ProgressBar Converter  new ","Converter  new "]}," TTY ProgressBar CurrentFormatter format":{"type":"method","name":"format","children":[],"call":["value gsub ","@progress current to_s ","@progress current "]}," TTY ProgressBar CurrentFormatter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," TTY ProgressBar Converter to_time":{"type":"method","name":"to_time","children":[],"call":[" sprintf ","minutes > ","hours > ","minutes * ","(send\n  (lvar :seconds) :/\n  (int 60)) floor ","seconds / ","hours * ","(send\n  (lvar :seconds) :/\n  (send\n    (int 3600) :to_f)) floor ","3600 to_f ","(send\n  (lvar :seconds) :/\n  (send\n    (const nil :HOURSECONDS) :to_f)) floor ","HOURSECONDS  to_f "," format ","days > ","days * * ","days * ","(send\n  (lvar :seconds) :/\n  (send\n    (begin\n      (send\n        (int 24) :*\n        (const nil :HOURSECONDS))) :to_f)) floor ","(send\n  (int 24) :*\n  (const nil :HOURSECONDS)) to_f ","24 * ","(send\n  (lvar :seconds) :/\n  (int 60)) floor  > ","(send\n  (lvar :seconds) :/\n  (send\n    (int 3600) :to_f)) floor  > ","(send\n  (lvar :seconds) :/\n  (send\n    (const nil :HOURSECONDS) :to_f)) floor  > ","(send\n  (lvar :seconds) :/\n  (int 60)) floor  * ","(send\n  (lvar :seconds) :/\n  (send\n    (int 3600) :to_f)) floor  * ","(send\n  (lvar :seconds) :/\n  (send\n    (const nil :HOURSECONDS) :to_f)) floor  * ","(send\n  (lvar :seconds) :/\n  (send\n    (begin\n      (send\n        (int 24) :*\n        (const nil :HOURSECONDS))) :to_f)) floor  > ","(send\n  (lvar :seconds) :/\n  (send\n    (begin\n      (send\n        (int 24) :*\n        (const nil :HOURSECONDS))) :to_f)) floor  * * ","(send\n  (lvar :seconds) :/\n  (send\n    (begin\n      (send\n        (int 24) :*\n        (const nil :HOURSECONDS))) :to_f)) floor  * "]}," TTY ProgressBar BarFormatter format":{"type":"method","name":"format","children":[],"call":["value gsub ","incomplete join ","complete join ","Array  new ","@progress incomplete ","width - ","@progress complete ","(send\n  (lvar :width) :*\n  (send\n    (ivar :@progress) :ratio)) round ","width * ","@progress ratio ","(send\n  (ivar :@progress) :width) min ","@progress width ","(int 0) max ","@progress max_columns - ","value gsub length ","@progress max_columns ","complete []= ","@progress head ","complete_length > ","complete_bar_length > ","(send\n  (lvar :width) :-\n  (send\n    (lvar :complete_items) :*\n    (lvar :complete_char_length))) / ","complete_items * ","(send\n  (lvar :complete_bar_length) :/\n  (send\n    (lvar :complete_char_length) :to_f)) round ","complete_bar_length / ","complete_char_length to_f ","ProgressBar  display_columns ","ProgressBar  max_columns - - ","@progress inset ","ProgressBar  max_columns - ","ProgressBar  max_columns ","Array  new  join ","inArray  new  join ","@progress Array  new  ","@progress inArray  new  ","(send\n  (ivar :@progress) :width) min  - ","(send\n  (lvar :(send\n  (ivar :@progress) :width) min ) :*\n  (send\n    (ivar :@progress) :ratio)) round ","(send\n  (ivar :@progress) :width) min  * ","(send\n  (ivar :@progress) :(send\n  (ivar :@progress) :width) min ) min ","@progress (send\n  (ivar :@progress) :width) min  ","Array  new  []= ","Array  new _length > ","(send\n  (lvar :width) :*\n  (send\n    (ivar :@progress) :ratio)) round  > ","Array  new _bar_length > ","(send\n  (lvar :width) :-\n  (send\n    (lvar :Array  new _items) :*\n    (lvar :Array  new _char_length))) / ","(send\n  (lvar :(send\n  (ivar :@progress) :width) min ) :-\n  (send\n    (lvar :complete_items) :*\n    (lvar :complete_char_length))) / ","(send\n  (lvar :width) :-\n  (send\n    (lvar :(send\n  (lvar :complete_bar_length) :/\n  (send\n    (lvar :complete_char_length) :to_f)) round ) :*\n    (lvar :complete_char_length))) / ","(send\n  (lvar :width) :-\n  (send\n    (lvar :complete_items) :*\n    (lvar :ProgressBar  display_columns ))) / ","Array  new _items * ","(send\n  (lvar :complete_bar_length) :/\n  (send\n    (lvar :complete_char_length) :to_f)) round  * ","(send\n  (lvar :Array  new _bar_length) :/\n  (send\n    (lvar :Array  new _char_length) :to_f)) round ","(send\n  (lvar :complete_bar_length) :/\n  (send\n    (lvar :ProgressBar  display_columns ) :to_f)) round ","(send\n  (lvar :(send\n  (lvar :width) :*\n  (send\n    (ivar :@progress) :ratio)) round ) :/\n  (send\n    (lvar :complete_char_length) :to_f)) round ","Array  new _bar_length / ","(send\n  (lvar :width) :*\n  (send\n    (ivar :@progress) :ratio)) round  / ","Array  new _char_length to_f ","ProgressBar  display_columns  to_f "]}," TTY ProgressBar BarFormatter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," TTY ProgressBar padout":{"type":"method","name":"padout","children":[],"call":["  * ","@last_render_width - ","message length ","@last_render_width > "," class display_columns "," class "]}," TTY ProgressBar inspect":{"type":"method","name":"inspect","children":[],"call":["output << "," interval "," incomplete "," complete "," width "," total "," format "," class name "," class "," head "," unknown "]}," TTY ProgressBar to_s":{"type":"method","name":"to_s","children":[],"call":["@format to_s "]}," TTY ProgressBar log":{"type":"method","name":"log","children":[],"call":[" render "," write ","sanitized_message + "," padout ","message gsub "," done? "," padout  + ","message gsub  + "]}," TTY ProgressBar complete?":{"type":"method","name":"complete?","children":[],"call":[]}," TTY ProgressBar reset":{"type":"method","name":"reset","children":[],"call":[" advance ","@meter clear ","Time  now ","1.0 / "," frequency "," frequency == "," no_width ","@timer reset "," indeterminate? "]}," TTY ProgressBar clear_line":{"type":"method","name":"clear_line","children":[],"call":[" output print ","ECMA_CSI  + + + + + ","ECMA_CSI  + + + + ","ECMA_CSI  + + + ","ECMA_CSI  + + ","ECMA_CSI  + "," output ","TTY Cursor  clear_line "]}," TTY ProgressBar ratio=":{"type":"method","name":"ratio=","children":[],"call":[" advance ","target - ","(send\n  (lvar :value) :*\n  (send nil :total)) floor ","value * "," total ","(send\n  (lvar :value) :*\n  (send nil :total)) floor  - "]}," TTY ProgressBar current=":{"type":"method","name":"current=","children":[],"call":[" advance ","value - ","(int 0) max ","(lvar :value) min "," total ","(int 0) max  - ","(lvar :(int 0) max ) min "]}," TTY ProgressBar start":{"type":"method","name":"start","children":[],"call":[" advance ","@meter start ","Time  now "," synchronize ","@timer start "]}," TTY ProgressBar Meter clear":{"type":"method","name":"clear","children":[],"call":[" start ","@samples clear "]}," TTY ProgressBar Meter mean_rate":{"type":"method","name":"mean_rate","children":[],"call":["last_value / ","last_at - ","last_at == ","@samples last "," rates reduce to_f / "," rates size "," rates "," rates reduce to_f "," rates reduce "," rate "," rates size == "]}," TTY ProgressBar Meter rates":{"type":"method","name":"rates","children":[],"call":["@rates + "," rate ","acc << ","@samples [] reduce ","@samples [] ","@samples reduce "]}," TTY ProgressBar Meter rate":{"type":"method","name":"rate","children":[],"call":["(send\n  (lvar :last_value) :-\n  (lvar :first_value)) / ","last_at - ","last_value - ","first_at == ","@samples last ","@samples first ","result nan? ","samples inject to_f / ","samples size ","samples inject to_f ","samples inject ","@samples [] ","@@samples []  last ","@@samples []  first ","samples inject to_f /  nan? ","@samples []  inject to_f / ","@samples []  size ","@samples []  inject to_f ","@samples []  inject ","@@samples []  [] "]}," TTY ProgressBar Meter save_rate":{"type":"method","name":"save_rate","children":[],"call":["@rates << "," rate ","period_index > ","@rates size ","(send\n  (begin\n    (send\n      (lvar :at) :-\n      (ivar :@start_time))) :/\n  (ivar :@interval)) floor ","(send\n  (lvar :at) :-\n  (ivar :@start_time)) / ","at - ","(send\n  (begin\n    (send\n      (lvar :at) :-\n      (ivar :@start_time))) :/\n  (ivar :@interval)) floor  > "]}," TTY ProgressBar Meter prune_samples":{"type":"method","name":"prune_samples","children":[],"call":["@samples shift ","@samples first first < ","@samples first first ","@samples first ","@samples size > ","@samples size ","at - "]}," TTY ProgressBar Meter sample":{"type":"method","name":"sample","children":[],"call":[" save_rate ","@samples << "," prune_samples ","at to_f ","@samples [] << ","@samples [] ","@interval < ","at to_f - "]}," TTY ProgressBar Meter start":{"type":"method","name":"start","children":[],"call":["Time  now ","Time  now to_f "]}," TTY ProgressBar Meter initialize":{"type":"method","name":"initialize","children":[],"call":[" start ","Time  now to_f ","Time  now ","h []= ","Hash  new "]}," TTY ProgressBar Formatter load":{"type":"method","name":"load","children":[],"call":["@pipeline use "]}," TTY ProgressBar Formatter initialize":{"type":"method","name":"initialize","children":[],"call":["TTY ProgressBar Pipeline  new ","(send\n  (send\n    (lvar :value) :to_s) :=~\n  (lvar :pattern)) ! ! ","(send\n  (send\n    (lvar :value) :to_s) :=~\n  (lvar :pattern)) ! ","value to_s =~ ","value to_s "," define_method "," module_eval "]}," TTY ProgressBar TotalByteFormatter format":{"type":"method","name":"format","children":[],"call":["value gsub ","@converter to_bytes ","@progress total ","Converter  to_bytes ","@converter to_@converter to_bytes  ","@converter to_Converter  to_bytes  ","Converter  to_@converter to_bytes  ","Converter  to_Converter  to_bytes  "]}," TTY ProgressBar TotalByteFormatter matches?":{"type":"method","name":"matches?","children":[],"call":["(send\n  (send\n    (lvar :value) :to_s) :=~\n  (const nil :MATCHER)) ! ! ","(send\n  (send\n    (lvar :value) :to_s) :=~\n  (const nil :MATCHER)) ! ","value to_s =~ ","value to_s "]}," TTY ProgressBar TotalByteFormatter initialize":{"type":"method","name":"initialize","children":[],"call":["Converter  new "]}," TTY ProgressBar TotalFormatter matches?":{"type":"method","name":"matches?","children":[],"call":["(send\n  (send\n    (lvar :value) :to_s) :=~\n  (const nil :MATCHER)) ! ! ","(send\n  (send\n    (lvar :value) :to_s) :=~\n  (const nil :MATCHER)) ! ","value to_s =~ ","value to_s "]}," TTY ProgressBar RateFormatter format":{"type":"method","name":"format","children":[],"call":["value gsub ","@converter to_seconds ","@progress rate ","Converter  to_seconds "]}," TTY ProgressBar RateFormatter matches?":{"type":"method","name":"matches?","children":[],"call":["(send\n  (send\n    (lvar :value) :to_s) :=~\n  (const nil :MATCHER)) ! ! ","(send\n  (send\n    (lvar :value) :to_s) :=~\n  (const nil :MATCHER)) ! ","value to_s =~ ","value to_s "]}," TTY ProgressBar RateFormatter initialize":{"type":"method","name":"initialize","children":[],"call":["Converter  new "]}," TTY ProgressBar PercentFormatter matches?":{"type":"method","name":"matches?","children":[],"call":["(send\n  (send\n    (lvar :value) :to_s) :=~\n  (const nil :MATCHER)) ! ! ","(send\n  (send\n    (lvar :value) :to_s) :=~\n  (const nil :MATCHER)) ! ","value to_s =~ ","value to_s "]}," TTY ProgressBar MeanRateFormatter format":{"type":"method","name":"format","children":[],"call":["value gsub ","@converter to_seconds ","@progress mean_rate ","Converter  to_seconds "]}," TTY ProgressBar MeanRateFormatter matches?":{"type":"method","name":"matches?","children":[],"call":["(send\n  (send\n    (lvar :value) :to_s) :=~\n  (const nil :MATCHER)) ! ! ","(send\n  (send\n    (lvar :value) :to_s) :=~\n  (const nil :MATCHER)) ! ","value to_s =~ ","value to_s "]}," TTY ProgressBar MeanRateFormatter initialize":{"type":"method","name":"initialize","children":[],"call":["Converter  new "]}," TTY ProgressBar MeanByteFormatter format":{"type":"method","name":"format","children":[],"call":["value gsub ","@converter to_bytes ","@progress mean_rate ","Converter  to_bytes "]}," TTY ProgressBar MeanByteFormatter matches?":{"type":"method","name":"matches?","children":[],"call":["(send\n  (send\n    (lvar :value) :to_s) :=~\n  (const nil :MATCHER)) ! ! ","(send\n  (send\n    (lvar :value) :to_s) :=~\n  (const nil :MATCHER)) ! ","value to_s =~ ","value to_s "]}," TTY ProgressBar MeanByteFormatter initialize":{"type":"method","name":"initialize","children":[],"call":["Converter  new "]}," TTY ProgressBar EstimatedFormatter format":{"type":"method","name":"format","children":[],"call":["value gsub ","@converter to_time ","estimated < ","estimated infinite? ","(send\n  (lvar :elapsed) :/\n  (send\n    (ivar :@progress) :ratio)) to_f - ","(send\n  (lvar :elapsed) :/\n  (send\n    (ivar :@progress) :ratio)) to_f ","elapsed / ","@progress ratio ","Time  now - ","@progress start_at ","Time  now ","Converter  to_time ","(send\n  (lvar :elapsed) :/\n  (send\n    (ivar :@progress) :ratio)) to_f -  < ","(send\n  (lvar :elapsed) :/\n  (send\n    (ivar :@progress) :ratio)) to_f -  infinite? ","(send\n  (lvar :Time  now - ) :/\n  (send\n    (ivar :@progress) :ratio)) to_f - ","(send\n  (lvar :Time  now - ) :/\n  (send\n    (ivar :@progress) :ratio)) to_f ","Time  now -  / "]}," TTY ProgressBar EstimatedFormatter matches?":{"type":"method","name":"matches?","children":[],"call":["(send\n  (send\n    (lvar :value) :to_s) :=~\n  (const nil :MATCHER)) ! ! ","(send\n  (send\n    (lvar :value) :to_s) :=~\n  (const nil :MATCHER)) ! ","value to_s =~ ","value to_s "]}," TTY ProgressBar EstimatedFormatter initialize":{"type":"method","name":"initialize","children":[],"call":["Converter  new ","TTY ProgressBar Converter  new "]}," TTY ProgressBar ElapsedFormatter matches?":{"type":"method","name":"matches?","children":[],"call":["(send\n  (send\n    (lvar :value) :to_s) :=~\n  (const nil :MATCHER)) ! ! ","(send\n  (send\n    (lvar :value) :to_s) :=~\n  (const nil :MATCHER)) ! ","value to_s =~ ","value to_s "]}," TTY ProgressBar ByteFormatter format":{"type":"method","name":"format","children":[],"call":["value gsub ","@converter to_bytes ","@progress current ","Converter  to_bytes ","@converter to_@converter to_bytes  ","@converter to_Converter  to_bytes  ","Converter  to_@converter to_bytes  ","Converter  to_Converter  to_bytes  "]}," TTY ProgressBar ByteFormatter matches?":{"type":"method","name":"matches?","children":[],"call":["(send\n  (send\n    (lvar :value) :to_s) :=~\n  (const nil :MATCHER)) ! ! ","(send\n  (send\n    (lvar :value) :to_s) :=~\n  (const nil :MATCHER)) ! ","value to_s =~ ","value to_s "]}," TTY ProgressBar ByteFormatter initialize":{"type":"method","name":"initialize","children":[],"call":["Converter  new "]}," TTY ProgressBar CurrentFormatter matches?":{"type":"method","name":"matches?","children":[],"call":["(send\n  (send\n    (lvar :value) :to_s) :=~\n  (const nil :MATCHER)) ! ! ","(send\n  (send\n    (lvar :value) :to_s) :=~\n  (const nil :MATCHER)) ! ","value to_s =~ ","value to_s "]}," TTY ProgressBar ByteRateFormatter format":{"type":"method","name":"format","children":[],"call":["value gsub ","@converter to_bytes ","@progress rate ","Converter  to_bytes "]}," TTY ProgressBar ByteRateFormatter matches?":{"type":"method","name":"matches?","children":[],"call":["(send\n  (send\n    (lvar :value) :to_s) :=~\n  (const nil :MATCHER)) ! ! ","(send\n  (send\n    (lvar :value) :to_s) :=~\n  (const nil :MATCHER)) ! ","value to_s =~ ","value to_s "]}," TTY ProgressBar ByteRateFormatter initialize":{"type":"method","name":"initialize","children":[],"call":["Converter  new "]}," TTY ProgressBar BarFormatter matches?":{"type":"method","name":"matches?","children":[],"call":["(send\n  (send\n    (lvar :value) :to_s) :=~\n  (const nil :MATCHER)) ! ! ","(send\n  (send\n    (lvar :value) :to_s) :=~\n  (const nil :MATCHER)) ! ","value to_s =~ ","value to_s "]}," TTY ProgressBar Converter to_bytes":{"type":"method","name":"to_bytes","children":[],"call":["value to_s + ","value to_s "," sprintf + "," sprintf ","value / ","KILOBYTE  to_f ","value >= ","MEGABYTE  to_f ","GIGABYTE  to_f ","formatted_value gsub + + ","unit to_s upcase ","unit to_s ","formatted_value gsub + ","formatted_value gsub "," format ","(send\n  (lvar :base) :**\n  (send\n    (const nil :BYTE_UNITS) :index\n    (lvar :unit))) to_f ","base ** ","BYTE_UNITS  index ","value to_i to_s ","value to_i ","value < ","i + ","BYTE_UNITS  find with_index ","BYTE_UNITS  find ","options fetch "," format  gsub + + ","value to_i to_s  gsub + + "," format  gsub + ","value to_i to_s  gsub + "," format  gsub ","value to_i to_s  gsub "]}," TTY ProgressBar Converter to_seconds":{"type":"method","name":"to_seconds","children":[],"call":[" sprintf ","seconds zero? ! ","seconds zero? ","seconds < "," format "]}," TTY ProgressBar Configuration total=":{"type":"method","name":"total=","children":[],"call":[" width "," fail "," width= "," width nil? "]}," TTY ProgressBar Configuration initialize":{"type":"method","name":"initialize","children":[],"call":["options fetch "," total "," total= ","options [] "," unknown= "," fetch_char "," complete= "," incomplete= "]}," TTY ProgressBar emit":{"type":"method","name":"emit","children":[],"call":["callback call ","@callbacks [] each ","@callbacks [] "]}," TTY ProgressBar on":{"type":"method","name":"on","children":[],"call":["@callbacks [] << ","@callbacks [] "," synchronize "]}," TTY ProgressBar done?":{"type":"method","name":"done?","children":[],"call":[]}," TTY ProgressBar stopped?":{"type":"method","name":"stopped?","children":[],"call":[]}," TTY ProgressBar stop":{"type":"method","name":"stop","children":[],"call":[" emit ","@meter clear "," write "," clear_line "," clear "," render "," done? ","ECMA_CSI  + + ","ECMA_CSI  + ","@last_render_width != "," hide_cursor ","TTY Cursor  show ","@timer stop "]}," TTY ProgressBar move_to_row":{"type":"method","name":"move_to_row","children":[],"call":[" block_given? "," output print ","TTY Cursor  restore "," output ","TTY Cursor  up ","TTY Cursor  save ","(send\n  (send\n    (ivar :@multibar) :rows) :+\n  (int 1)) - ","@multibar rows + ","@multibar rows ","@multibar next_row ","CURSOR_LOCK  synchronize "]}," TTY ProgressBar update":{"type":"method","name":"update","children":[],"call":["@configuration public_send ","options each "," synchronize ","@configuration respond_to? "]}," TTY ProgressBar iterate":{"type":"method","name":"iterate","children":[],"call":["prog each "," block_given? ","iter yield "," advance ","collection each ","Enumerator  new "," update ","collection count ","progress_enum each ","collection count * "," total "]}," TTY ProgressBar attach_to":{"type":"method","name":"attach_to","children":[],"call":[]}," TTY ProgressBar Multi emit":{"type":"method","name":"emit","children":[],"call":["callback call ","@callbacks [] each ","@callbacks [] "]}," TTY ProgressBar Multi on":{"type":"method","name":"on","children":[],"call":["@callbacks [] << ","@callbacks [] "," raise ","@callbacks key? "]}," TTY ProgressBar Multi line_inset":{"type":"method","name":"line_inset","children":[],"call":["@inset_opts [] "," rows ","@top_bar row ","bar row ","@top_bar nil? "]}," TTY ProgressBar Multi finish":{"type":"method","name":"finish","children":[],"call":["@bars dup each ","@bars dup ","@top_bar finish ","@bars each "]}," TTY ProgressBar Multi stop":{"type":"method","name":"stop","children":[],"call":["@bars dup each ","@bars dup ","@bars each "]}," TTY ProgressBar Multi stopped?":{"type":"method","name":"stopped?","children":[],"call":["(send\n  (ivar :@bars) :-\n  (array\n    (ivar :@top_bar))) dup any? ","(send\n  (ivar :@bars) :-\n  (array\n    (ivar :@top_bar))) dup ","@bars - "," synchronize ","(send\n  (ivar :@bars) :-\n  (array\n    (ivar :@top_bar))) all? "]}," TTY ProgressBar Multi complete?":{"type":"method","name":"complete?","children":[],"call":["(send\n  (ivar :@bars) :-\n  (array\n    (ivar :@top_bar))) dup all? ","(send\n  (ivar :@bars) :-\n  (array\n    (ivar :@top_bar))) dup ","@bars - "," synchronize ","(send\n  (ivar :@bars) :-\n  (array\n    (ivar :@top_bar))) all? "]}," TTY ProgressBar Multi current":{"type":"method","name":"current","children":[],"call":["(send\n  (ivar :@bars) :-\n  (array\n    (ivar :@top_bar))) dup map reduce ","(send\n  (ivar :@bars) :-\n  (array\n    (ivar :@top_bar))) dup map ","(send\n  (ivar :@bars) :-\n  (array\n    (ivar :@top_bar))) dup ","@bars - "," synchronize ","(send\n  (ivar :@bars) :-\n  (array\n    (ivar :@top_bar))) map reduce ","(send\n  (ivar :@bars) :-\n  (array\n    (ivar :@top_bar))) map "]}," TTY ProgressBar Multi total":{"type":"method","name":"total","children":[],"call":["(send\n  (ivar :@bars) :-\n  (array\n    (ivar :@top_bar))) dup map reduce ","(send\n  (ivar :@bars) :-\n  (array\n    (ivar :@top_bar))) dup map ","(send\n  (ivar :@bars) :-\n  (array\n    (ivar :@top_bar))) dup ","@bars - "," synchronize ","(send\n  (ivar :@bars) :-\n  (array\n    (ivar :@top_bar))) map reduce ","(send\n  (ivar :@bars) :-\n  (array\n    (ivar :@top_bar))) map ","(send\n  (ivar :@bars) :-\n  (array\n    (ivar :@top_bar))) map compact reduce ","(send\n  (ivar :@bars) :-\n  (array\n    (ivar :@top_bar))) map compact "]}," TTY ProgressBar Multi start":{"type":"method","name":"start","children":[],"call":["@top_bar start "," raise "]}," TTY ProgressBar Multi top_bar":{"type":"method","name":"top_bar","children":[],"call":[" raise "]}," TTY ProgressBar Multi observe":{"type":"method","name":"observe","children":[],"call":[" emit "," stopped? "," top_bar stop "," top_bar ","(send\n  (block\n    (send\n      (lvar :bar) :on\n      (sym :progress))\n    (args)\n    (begin\n      (send\n        (send nil :top_bar) :current=\n        (send nil :current))\n      (send nil :emit\n        (sym :progress)))) :on\n  (sym :done)) on "," complete? "," top_bar finish ","(send\n  (lvar :bar) :on\n  (sym :progress)) on "," top_bar current= "," current ","bar on ","(send\n  (send\n    (lvar :bar) :on\n    (sym :progress)\n    (block-pass\n      (send nil :progress_handler))) :on\n  (sym :done)) on ","bar on on "," progress_handler "," paused? ","(send\n  (block\n    (send\n      (send\n        (lvar :bar) :on\n        (sym :progress)\n        (block-pass\n          (send nil :progress_handler))) :on\n      (sym :done))\n    (args)\n    (if\n      (send nil :complete?)\n      (send nil :emit\n        (sym :done)) nil)) :on\n  (sym :stopped)) on "]}," TTY ProgressBar Multi next_row":{"type":"method","name":"next_row","children":[],"call":[" synchronize "]}," TTY ProgressBar Multi register":{"type":"method","name":"register","children":[],"call":[" observe ","@top_bar update "," total ","@bars << ","bar attach_to "," synchronize ","TTY ProgressBar  new ","@options merge ","options delete ","@top_bar resume ","@top_bar done? ","@top_TTY ProgressBar  new  update ","@TTY ProgressBar  new s << ","TTY ProgressBar  new  attach_to ","@top_TTY ProgressBar  new  resume ","@top_TTY ProgressBar  new  done? "]}," TTY ProgressBar Multi initialize":{"type":"method","name":"initialize","children":[],"call":[" register ","@options delete ","args pop ","args empty? ","args last is_a? ","args last ","@top_bar update ","@options [] ","args pop  delete "," register  update ","args pop  [] "]}," TTY ProgressBar Multi progress_handler":{"type":"method","name":"progress_handler","children":[],"call":[" emit ","@top_bar current= "," current "," proc ","@top_bar advance "," lambda "]}," TTY ProgressBar tty?":{"type":"method","name":"tty?","children":[],"call":[" output tty? "," output "," output respond_to? "]}," TTY ProgressBar display_columns":{"type":"method","name":"display_columns","children":[],"call":[]}," TTY ProgressBar paused?":{"type":"method","name":"paused?","children":[],"call":[]}," TTY ProgressBar pause":{"type":"method","name":"pause","children":[],"call":[" emit ","@timer stop "," synchronize "]}," TTY ProgressBar resume":{"type":"method","name":"resume","children":[],"call":[" synchronize "]}," TTY ProgressBar use":{"type":"method","name":"use","children":[],"call":["@formatters use ","formatter_class new "," raise ","formatter_class is_a? "]}," TTY ProgressBar indeterminate?":{"type":"method","name":"indeterminate?","children":[],"call":[" total nil? "," total "]}," TTY ProgressBar configure":{"type":"method","name":"configure","children":[],"call":[]}," TTY ProgressBar Timer stop":{"type":"method","name":"stop","children":[],"call":[" elapsed_until_now "," running? "]}," TTY ProgressBar Timer start":{"type":"method","name":"start","children":[],"call":["Time  now "," running? "]}," TTY ProgressBar Timer elapsed_until_now":{"type":"method","name":"elapsed_until_now","children":[],"call":["time_so_far > ","Time  now - ","Time  now ","Time  now -  > "]}," TTY ProgressBar Timer elapsed_time":{"type":"method","name":"elapsed_time","children":[],"call":[" elapsed_until_now + "," elapsed_until_now "," running? "]}," TTY ProgressBar Timer running?":{"type":"method","name":"running?","children":[],"call":[]}," TTY ProgressBar Timer reset":{"type":"method","name":"reset","children":[],"call":[]}," TTY ProgressBar Timer initialize":{"type":"method","name":"initialize","children":[],"call":[" reset "]}," TTY ProgressBar Multi resume":{"type":"method","name":"resume","children":[],"call":["@bars each "]}," TTY ProgressBar Multi pause":{"type":"method","name":"pause","children":[],"call":["@bars each "]}," TTY ProgressBar Multi paused?":{"type":"method","name":"paused?","children":[],"call":["(send\n  (ivar :@bars) :-\n  (array\n    (ivar :@top_bar))) all? ","@bars - "," synchronize "]}," TTY ProgressBar Multi done?":{"type":"method","name":"done?","children":[],"call":["(send\n  (ivar :@bars) :-\n  (array\n    (ivar :@top_bar))) all? ","@bars - "," synchronize "]}," TTY ProgressBar Formatters load":{"type":"method","name":"load","children":[],"call":["@pipeline use ","TTY ProgressBar BarFormatter  new ","TTY ProgressBar MeanByteFormatter  new ","TTY ProgressBar MeanRateFormatter  new ","TTY ProgressBar RateFormatter  new ","TTY ProgressBar ByteRateFormatter  new ","TTY ProgressBar ByteFormatter  new ","TTY ProgressBar PercentFormatter  new ","TTY ProgressBar EstimatedFormatter  new ","TTY ProgressBar EstimatedTimeFormatter  new ","TTY ProgressBar ElapsedFormatter  new ","TTY ProgressBar TotalByteFormatter  new ","TTY ProgressBar TotalFormatter  new ","TTY ProgressBar CurrentFormatter  new "]}," TTY ProgressBar Formatters initialize":{"type":"method","name":"initialize","children":[],"call":["TTY ProgressBar Pipeline  new "]}," TTY ProgressBar Formatter []":{"type":"method","name":"[]","children":[],"call":[]}," TTY ProgressBar TotalByteFormatter call":{"type":"method","name":"call","children":[],"call":["value gsub "," matcher ","Converter  to_bytes ","@progress total ","@progress indeterminate? ","Converter  to_Converter  to_bytes  "]}," TTY ProgressBar TotalFormatter call":{"type":"method","name":"call","children":[],"call":["value gsub "," matcher ","@progress total to_s ","@progress total ","@progress indeterminate? "]}," TTY ProgressBar RateFormatter call":{"type":"method","name":"call","children":[],"call":["value gsub "," matcher ","Converter  to_seconds ","@progress rate "]}," TTY ProgressBar PercentFormatter call":{"type":"method","name":"call","children":[],"call":["value gsub "," matcher ","percent to_s ","@progress indeterminate? ","(send\n  (send\n    (ivar :@progress) :ratio) :*\n  (int 100)) to_i ","@progress ratio * ","@progress ratio ","@progress width == ","@progress width ","(send\n  (send\n    (ivar :@progress) :ratio) :*\n  (int 100)) to_i  to_s "]}," TTY ProgressBar MeanRateFormatter call":{"type":"method","name":"call","children":[],"call":["value gsub "," matcher ","Converter  to_seconds ","@progress mean_rate "]}," TTY ProgressBar MeanByteFormatter call":{"type":"method","name":"call","children":[],"call":["value gsub "," matcher ","Converter  to_bytes ","@progress mean_rate "]}," TTY ProgressBar EstimatedTimeFormatter call":{"type":"method","name":"call","children":[],"call":["value gsub "," matcher ","completion_time strftime ","Time  now + ","Time  now ","estimated >= ","estimated < ","estimated infinite? ","(send\n  (lvar :elapsed) :/\n  (send\n    (ivar :@progress) :ratio)) to_f - ","(send\n  (lvar :elapsed) :/\n  (send\n    (ivar :@progress) :ratio)) to_f ","elapsed / ","@progress ratio ","@progress elapsed_time ","@progress indeterminate? ","@progress ratio zero? ","@progress elapsed_time zero? ","Time  now +  strftime ","(send\n  (lvar :elapsed) :/\n  (send\n    (ivar :@progress) :ratio)) to_f -  >= ","(send\n  (lvar :elapsed) :/\n  (send\n    (ivar :@progress) :ratio)) to_f  >= ","(send\n  (lvar :elapsed) :/\n  (send\n    (ivar :@progress) :ratio)) to_f -  < ","(send\n  (lvar :elapsed) :/\n  (send\n    (ivar :@progress) :ratio)) to_f  < ","(send\n  (lvar :elapsed) :/\n  (send\n    (ivar :@progress) :ratio)) to_f -  infinite? ","(send\n  (lvar :elapsed) :/\n  (send\n    (ivar :@progress) :ratio)) to_f  infinite? ","(send\n  (lvar :@progress elapsed_time ) :/\n  (send\n    (ivar :@progress) :ratio)) to_f - ","(send\n  (lvar :@progress elapsed_time ) :/\n  (send\n    (ivar :@progress) :ratio)) to_f ","@progress elapsed_time  / ","@progress @progress elapsed_time _time ","@progress @progress elapsed_time _time zero? "]}," TTY ProgressBar EstimatedFormatter call":{"type":"method","name":"call","children":[],"call":["value gsub ","Converter  to_time "," matcher ","estimated < ","estimated infinite? ","(send\n  (lvar :elapsed) :/\n  (send\n    (ivar :@progress) :ratio)) to_f - ","(send\n  (lvar :elapsed) :/\n  (send\n    (ivar :@progress) :ratio)) to_f ","elapsed / ","@progress ratio ","@progress elapsed_time ","@progress indeterminate? ","@progress ratio zero? ","@progress elapsed_time zero? ","(send\n  (lvar :elapsed) :/\n  (send\n    (ivar :@progress) :ratio)) to_f -  < ","(send\n  (lvar :elapsed) :/\n  (send\n    (ivar :@progress) :ratio)) to_f  < ","(send\n  (lvar :elapsed) :/\n  (send\n    (ivar :@progress) :ratio)) to_f -  infinite? ","(send\n  (lvar :elapsed) :/\n  (send\n    (ivar :@progress) :ratio)) to_f  infinite? ","(send\n  (lvar :@progress elapsed_time ) :/\n  (send\n    (ivar :@progress) :ratio)) to_f - ","(send\n  (lvar :@progress elapsed_time ) :/\n  (send\n    (ivar :@progress) :ratio)) to_f ","@progress elapsed_time  / ","@progress @progress elapsed_time _time ","@progress @progress elapsed_time _time zero? "]}," TTY ProgressBar ElapsedFormatter call":{"type":"method","name":"call","children":[],"call":["value gsub ","Converter  to_time ","@progress elapsed_time "," matcher "]}," TTY ProgressBar ByteFormatter call":{"type":"method","name":"call","children":[],"call":["value gsub "," matcher ","Converter  to_bytes ","@progress current ","Converter  to_Converter  to_bytes  "]}," TTY ProgressBar CurrentFormatter call":{"type":"method","name":"call","children":[],"call":["value gsub ","@progress current to_s ","@progress current "," matcher "]}," TTY ProgressBar ByteRateFormatter call":{"type":"method","name":"call","children":[],"call":["value gsub "," matcher ","Converter  to_bytes ","@progress rate "]}," TTY ProgressBar BarFormatter format_determinate":{"type":"method","name":"format_determinate","children":[],"call":["value gsub ","incomplete join ","complete join "," matcher ","complete << ","@progress head ","  * ","times * - ","times * ","complete pop ","incomplete pop ","times - ","complete_items < ","(send\n  (lvar :head_char_length) :/\n  (send\n    (lvar :complete_char_length) :to_f)) round ","head_char_length / ","complete_char_length to_f ","@progress clear_head ! ","@progress clear_head ","incomplete_items zero? ","incomplete_items > ","head_char_length > ","complete_items > ","Array  new ","@progress incomplete ","@progress complete ","(send\n  (lvar :incomplete_width) :/\n  (lvar :incomplete_char_length)) min ","(send\n  (lvar :incomplete_width) :/\n  (lvar :complete_char_length)) * ","incomplete_width / ","width - ","complete_items * ","(send\n  (lvar :complete_bar_length) :/\n  (lvar :complete_char_length)) min ","(send\n  (lvar :complete_bar_length) :/\n  (lvar :incomplete_char_length)) * ","complete_bar_length / ","ProgressBar  display_columns ","(send\n  (lvar :width) :*\n  (send\n    (ivar :@progress) :ratio)) round ","width * ","@progress ratio ","Array  new  join ","inArray  new  join ","Array  new  << ","(send\n  (lvar :head_char_length) :/\n  (send\n    (lvar :complete_char_length) :to_f)) round  * - ","(send\n  (lvar :head_char_length) :/\n  (send\n    (lvar :complete_char_length) :to_f)) round  * ","Array  new  pop ","inArray  new  pop ","(send\n  (lvar :head_char_length) :/\n  (send\n    (lvar :complete_char_length) :to_f)) round  - ","Array  new _items < ","(send\n  (lvar :complete_bar_length) :/\n  (lvar :complete_char_length)) min  < ","(send\n  (lvar :head_char_length) :/\n  (send\n    (lvar :Array  new _char_length) :to_f)) round ","(send\n  (lvar :ProgressBar  display_columns ) :/\n  (send\n    (lvar :complete_char_length) :to_f)) round ","(send\n  (lvar :head_char_length) :/\n  (send\n    (lvar :ProgressBar  display_columns ) :to_f)) round ","ProgressBar  display_columns  / ","Array  new _char_length to_f ","ProgressBar  display_columns  to_f ","Array  new _items zero? ","inArray  new _items zero? ","(send\n  (lvar :incomplete_width) :/\n  (lvar :incomplete_char_length)) min  zero? ","in(send\n  (lvar :complete_bar_length) :/\n  (lvar :complete_char_length)) min  zero? ","Array  new _items > ","inArray  new _items > ","(send\n  (lvar :incomplete_width) :/\n  (lvar :incomplete_char_length)) min  > ","in(send\n  (lvar :complete_bar_length) :/\n  (lvar :complete_char_length)) min  > ","ProgressBar  display_columns  > ","(send\n  (lvar :complete_bar_length) :/\n  (lvar :complete_char_length)) min  > ","@progress Array  new  ","@progress inArray  new  ","(send\n  (lvar :Array  new _width) :/\n  (lvar :Array  new _char_length)) min ","(send\n  (lvar :inArray  new _width) :/\n  (lvar :inArray  new _char_length)) min ","(send\n  (lvar :width - ) :/\n  (lvar :incomplete_char_length)) min ","(send\n  (lvar :incomplete_items * ) :/\n  (lvar :incomplete_char_length)) min ","(send\n  (lvar :incomplete_width) :/\n  (lvar :ProgressBar  display_columns )) min ","(send\n  (lvar :incomplete_width) :/\n  (lvar :inProgressBar  display_columns )) min ","(send\n  (lvar :Array  new _width) :/\n  (lvar :complete_char_length)) * ","(send\n  (lvar :inArray  new _width) :/\n  (lvar :Array  new _char_length)) * ","(send\n  (lvar :width - ) :/\n  (lvar :complete_char_length)) * ","(send\n  (lvar :incomplete_items * ) :/\n  (lvar :complete_char_length)) * ","(send\n  (lvar :incomplete_width) :/\n  (lvar :ProgressBar  display_columns )) * ","Array  new _width / ","inArray  new _width / ","width -  / ","incomplete_items *  / ","Array  new _items * ","(send\n  (lvar :complete_bar_length) :/\n  (lvar :complete_char_length)) min  * ","(send\n  (lvar :Array  new _bar_length) :/\n  (lvar :Array  new _char_length)) min ","(send\n  (lvar :complete_bar_length) :/\n  (lvar :ProgressBar  display_columns )) min ","(send\n  (lvar :(send\n  (lvar :width) :*\n  (send\n    (ivar :@progress) :ratio)) round ) :/\n  (lvar :complete_char_length)) min ","(send\n  (lvar :complete_bar_length) :/\n  (lvar :Array  new _char_length)) * ","(send\n  (lvar :Array  new _bar_length) :/\n  (lvar :inArray  new _char_length)) * ","(send\n  (lvar :complete_bar_length) :/\n  (lvar :ProgressBar  display_columns )) * ","(send\n  (lvar :complete_bar_length) :/\n  (lvar :inProgressBar  display_columns )) * ","(send\n  (lvar :(send\n  (lvar :width) :*\n  (send\n    (ivar :@progress) :ratio)) round ) :/\n  (lvar :incomplete_char_length)) * ","Array  new _bar_length / ","(send\n  (lvar :width) :*\n  (send\n    (ivar :@progress) :ratio)) round  / "]}," TTY ProgressBar BarFormatter format_indeterminate":{"type":"method","name":"format_indeterminate","children":[],"call":["value gsub ","buffer join "," matcher ","buffer << ","  * ","@progress unknown ","possible_width - ","(send\n  (lvar :possible_width) :*\n  (send\n    (ivar :@progress) :ratio)) round ","possible_width * ","@progress ratio ","(send\n  (lvar :possible_width) :/\n  (lvar :max_char_length)) * ","possible_width / ","(lvar :complete_char_length) max ","ProgressBar  display_columns ","@progress head ","@progress incomplete ","@progress complete ","(send\n  (lvar :possible_width) :/\n  (lvar :max_char_length)) *  - ","(send\n  (lvar :(send\n  (lvar :possible_width) :/\n  (lvar :max_char_length)) * ) :*\n  (send\n    (ivar :@progress) :ratio)) round ","(send\n  (lvar :possible_width) :/\n  (lvar :max_char_length)) *  * ","(send\n  (lvar :(send\n  (lvar :possible_width) :/\n  (lvar :max_char_length)) * ) :/\n  (lvar :max_char_length)) * ","(send\n  (lvar :possible_width) :/\n  (lvar :(lvar :complete_char_length) max )) * ","(send\n  (lvar :possible_width) :/\n  (lvar :max_char_length)) *  / ","(lvar :(send\n  (lvar :possible_width) :*\n  (send\n    (ivar :@progress) :ratio)) round _char_length) max ","(lvar :ProgressBar  display_columns ) max ","@progress possible_width -  ","@progress in(send\n  (lvar :possible_width) :*\n  (send\n    (ivar :@progress) :ratio)) round  ","@progress (send\n  (lvar :possible_width) :*\n  (send\n    (ivar :@progress) :ratio)) round  "]}," TTY ProgressBar BarFormatter call":{"type":"method","name":"call","children":[],"call":[" format_determinate "," format_indeterminate ","width zero? ","@progress indeterminate? ","(send\n  (send\n    (ivar :@progress) :width) :to_i) min ","@progress width to_i ","@progress width ","(int 0) max ","ProgressBar  max_columns - - ","@progress inset ","ProgressBar  max_columns - ","ProgressBar  display_columns ","ProgressBar  max_columns ","value gsub ","(send\n  (send\n    (ivar :@progress) :width) :to_i) min  zero? ","(send\n  (send\n    (ivar :@progress) :(send\n  (send\n    (ivar :@progress) :width) :to_i) min ) :to_i) min ","@progress (send\n  (send\n    (ivar :@progress) :width) :to_i) min  to_i ","@progress (send\n  (send\n    (ivar :@progress) :width) :to_i) min  "]}," TTY ProgressBar Configuration raise_if_empty":{"type":"method","name":"raise_if_empty","children":[],"call":[" raise ","name inspect ","value to_s empty? ","value to_s "]}," TTY ProgressBar Configuration fetch_char":{"type":"method","name":"fetch_char","children":[],"call":[" raise ","FORMATS  keys sort map join ","FORMATS  keys sort map ","FORMATS  keys sort ","FORMATS  keys ","name inspect ","FORMATS  [] [] ","FORMATS  [] ","FORMATS  key? "]}," TTY ProgressBar Configuration unknown=":{"type":"method","name":"unknown=","children":[],"call":[" raise_if_empty "]}," TTY ProgressBar Configuration incomplete=":{"type":"method","name":"incomplete=","children":[],"call":[" raise_if_empty "]}," TTY ProgressBar Configuration complete=":{"type":"method","name":"complete=","children":[],"call":[" raise_if_empty "]}," TTY ProgressBar register_signals":{"type":"method","name":"register_signals","children":[],"call":[" exit! "," trap "," resize "]}}