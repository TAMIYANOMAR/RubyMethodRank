{" Zeitwerk Registry on_unload":{"type":"method","name":"on_unload","children":[],"call":["object == "," inceptions delete_if "," inceptions "," autoloads delete_if "," autoloads "]}," Zeitwerk Registry loader_for":{"type":"method","name":"loader_for","children":[],"call":[" autoloads [] "," autoloads "]}," Zeitwerk Registry inception?":{"type":"method","name":"inception?","children":[],"call":["pair first "," inceptions [] "," inceptions "," inceptions []  first "]}," Zeitwerk Registry register_inception":{"type":"method","name":"register_inception","children":[],"call":[" inceptions []= "," inceptions "]}," Zeitwerk Registry unregister_autoload":{"type":"method","name":"unregister_autoload","children":[],"call":[" autoloads delete "," autoloads "]}," Zeitwerk Registry register_autoload":{"type":"method","name":"register_autoload","children":[],"call":[" autoloads []= "," autoloads "]}," Zeitwerk Registry loader_for_gem":{"type":"method","name":"loader_for_gem","children":[],"call":["loader push_dir ","File  dirname ","loader inflector= ","GemInflector  new ","Loader  new tap ","Loader  new "," loaders_managing_gems [] "," loaders_managing_gems ","Zeitwerk GemInflector  new ","loader tag= ","File  basename ","GemLoader  _new "," gem_loaders_by_root_file [] "," gem_loaders_by_root_file ","GemLoader  __new "]}," Zeitwerk Registry register_loader":{"type":"method","name":"register_loader","children":[],"call":[" loaders << "," loaders "]}," Zeitwerk Loader cdef?":{"type":"method","name":"cdef?","children":[],"call":["parent const_defined? "]}," Zeitwerk Loader disable_tracer":{"type":"method","name":"disable_tracer","children":[],"call":[" tracer disable "," tracer "," tracer enabled? "]}," Zeitwerk Loader enable_tracer":{"type":"method","name":"enable_tracer","children":[],"call":[" tracer enable "," tracer "," tracer enabled? ! "," tracer enabled? "]}," Zeitwerk Loader log":{"type":"method","name":"log","children":[],"call":[" logger call "," logger "," tag "," logger send "," logger respond_to? "]}," Zeitwerk Loader expand_paths":{"type":"method","name":"expand_paths","children":[],"call":["File  expand_path "," Array flatten map "," Array flatten "," Array "," Array flatten map! ","paths flatten map! ","paths flatten "]}," Zeitwerk Loader dir?":{"type":"method","name":"dir?","children":[],"call":["File  directory? "]}," Zeitwerk Loader ruby?":{"type":"method","name":"ruby?","children":[],"call":["path end_with? "]}," Zeitwerk Loader each_abspath":{"type":"method","name":"each_abspath","children":[],"call":[" ignored_paths member? "," ignored_paths ","File  join ","entry start_with? ","Dir  foreach "," ignored member? "," ignored "]}," Zeitwerk Loader cpath":{"type":"method","name":"cpath","children":[],"call":["parent name ","parent equal? "," real_mod_name ","cname to_s "]}," Zeitwerk Loader do_preload_file":{"type":"method","name":"do_preload_file","children":[],"call":[" require "," log "," logger "," logger call "]}," Zeitwerk Loader do_preload_dir":{"type":"method","name":"do_preload_dir","children":[],"call":[" do_preload_dir "," dir? "," do_preload_file "," ruby? "," each_abspath "," do_preload_abspath "," ls "]}," Zeitwerk Loader do_preload":{"type":"method","name":"do_preload","children":[],"call":[" do_preload_dir "," dir? "," do_preload_file "," ruby? "," preloads each "," preloads "," do_preload_abspath "]}," Zeitwerk Loader eager_load_dir":{"type":"method","name":"eager_load_dir","children":[],"call":["queue << "," dir? "," require "," ruby? "," each_abspath ","queue shift "," eager_load_dir "," eager_load_exclusions member? "," eager_load_exclusions "," queue shift ? "," eager_load_queue shift  "]}," Zeitwerk Loader autoload_for?":{"type":"method","name":"autoload_for?","children":[],"call":["Registry  inception? "," cpath ","parent autoload? "," strict_autoload_path "]}," Zeitwerk Loader set_autoload":{"type":"method","name":"set_autoload","children":[],"call":["Registry  register_inception "," cpath ","parent autoload? ","Registry  register_autoload "," autoloads []= "," autoloads "," log "," ruby? "," logger ","parent autoload ","File  realpath "," logger call ","File  realpath freeze "," autoloads define ","File  File  realpath  ","File  File  realpath freeze  ","File  File  realpath  freeze ","File  File  realpath freeze  freeze "]}," Zeitwerk Loader autoload_file":{"type":"method","name":"autoload_file","children":[],"call":[" set_autoload "," cdef? ! "," cdef? "," enable_tracer ","Registry  unregister_autoload "," autoloads delete "," autoloads "," ruby? "," autoload_for? ","parent const_defined? ! ","parent const_defined? "," register_explicit_namespace "," cpath "," shadowed []= "," shadowed "," shadowed_files []= "," shadowed_files "," shadowed_files add "," log "," logger "," promote_namespace_from_implicit_to_explicit ","Registry  inception? "," strict_autoload_path "," shadowed_files << "," strict_ autoload_for?  "]}," Zeitwerk Loader autoload_subdir":{"type":"method","name":"autoload_subdir","children":[],"call":[" set_autoloads_in_dir ","parent const_get "," set_autoload ","(or-asgn\n  (send\n    (send nil :lazy_subdirs) :[]\n    (send nil :cpath\n      (lvar :parent)\n      (lvar :cname)))\n  (array)) << "," lazy_subdirs [] "," cpath "," lazy_subdirs "," cdef? ! "," cdef? "," enable_tracer "," ruby? "," autoload_for? ","parent const_defined? ! ","parent const_defined? ","(or-asgn\n  (send\n    (send nil :lazy_subdirs) :[]\n    (lvar :cpath))\n  (array)) << "," register_explicit_namespace "," cget "," log "," logger "," lazy_subdirs [] << "," autoloads abspath_for "," autoloads "," autoload_path_set_by_me_for? "," namespace_dirs [] << "," namespace_dirs [] "," namespace_dirs "," set_ autoload_for? s_in_dir "," set_ autoload_for?  ","(or-asgn\n  (send\n    (send nil :lazy_subdirs) :[]\n    (send nil : cpath \n      (lvar :parent)\n      (lvar :cname)))\n  (array)) << ","  cpath  ","  autoload_for? _for? ","(or-asgn\n  (send\n    (send nil :lazy_subdirs) :[]\n    (lvar : cpath ))\n  (array)) << ","  autoload_for? s abspath_for ","  autoload_for? s ","  autoload_for? _set_by_me_for? ","  autoloads abspath_for _set_by_me_for? ","  autoload_path_set_by_me_for? _set_by_me_for? ","  autoload_for? _path_set_by_me_for? "]}," Zeitwerk Loader set_autoloads_in_dir":{"type":"method","name":"set_autoloads_in_dir","children":[],"call":[" autoload_subdir "," root_dirs key? "," root_dirs "," dir? "," autoload_file "," ruby? "," inflector camelize ","File  basename "," inflector "," each_abspath "," dirs key? "," dirs "," raise "," inflector class ","error message "," inflector camelize to_sym ","basename slice! "," ls ","NameError  new ","error name "," set_autoloads_in_dir "," collapse_dirs member? "," collapse_dirs ","basename []= "," collapse? "," root_dir? ","basename delete_suffix! "," cname_for ","  inflector camelize _for ","  inflector camelize to_sym _for "]}," Zeitwerk Loader non_ignored_root_dirs":{"type":"method","name":"non_ignored_root_dirs","children":[],"call":[" ignored_paths member? "," ignored_paths "," root_dirs keys delete_if "," root_dirs keys "," root_dirs "]}," Zeitwerk Loader on_dir_loaded":{"type":"method","name":"on_dir_loaded","children":[],"call":[" set_autoloads_in_dir ","subdirs each "," lazy_subdirs [] "," cpath "," lazy_subdirs "," log "," logger ","parent const_set ","Module  new "," loaded add "," loaded "," autoloads [] "," autoloads "," logger call ","autovivified_module name "," lazy_subdirs []  each "," lazy_ lazy_subdirs []  [] "," lazy_ lazy_subdirs []  ","parent const_set _module name ","parent const_set  name "]}," Zeitwerk Loader on_file_loaded":{"type":"method","name":"on_file_loaded","children":[],"call":[" log "," cpath "," logger "," loaded add "," loaded "," autoloads [] "," autoloads "," logger call "]}," Zeitwerk Loader all_dirs":{"type":"method","name":"all_dirs","children":[],"call":["Registry  loaders flat_map freeze ","Registry  loaders flat_map ","Registry  loaders "]}," Zeitwerk Loader eager_load_all":{"type":"method","name":"eager_load_all","children":[],"call":["Registry  loaders each ","Registry  loaders ","loader eager_load "]}," Zeitwerk Loader for_gem":{"type":"method","name":"for_gem","children":[],"call":["Registry  loader_for_gem "," caller [] split [] "," caller [] split "," caller [] "," caller "," caller_locations first path "," caller_locations first "," caller_locations "]}," Zeitwerk Loader loaded?":{"type":"method","name":"loaded?","children":[],"call":[" loaded member? "," loaded "," loaded_cpaths member? "," loaded_cpaths "]}," Zeitwerk Loader eager_load":{"type":"method","name":"eager_load","children":[],"call":[" disable_tracer "," eager_load_dir "," non_ignored_root_dirs each "," non_ignored_root_dirs "," mutex synchronize "," mutex "," tracer disable "," tracer "," eager_load_exclusions empty? "," eager_load_exclusions "," eager_load_exclusions member? "," actual_dirs each "," actual_dirs ","queue << "," dir? "," require "," ruby? "," each_abspath ","queue shift "," shadowed key? "," shadowed "," shadowed_files key? "," shadowed_files "," non_ignored_root_dirs reject "," autoloaded_dirs clear "," autoloaded_dirs ","Registry  unregister_autoload "," autoloaded_dirs each "," shadowed_files clear "," shadowed_files member? ","namespace const_get "," inflector camelize "," inflector "," root_dirs key? ! "," root_dirs key? "," root_dirs ","cref [] const_get ","cref [] "," autoloads [] ","File  realpath "," autoloads "," ls ","queue map! "," actual_root_dirs reject "," actual_root_dirs "," const_get_if_autoload "," collapse_dirs member? "," collapse_dirs "," actual_root_dirs each "," log "," logger "," cget "," collapse? "," autoloads cref_for "," excluded_from_eager_load? ","force ! "," eager_load_queue shift  "," non_ignored_root_queue shift s each "," non_ignored_root_queue shift s "," actual_queue shift s each "," actual_queue shift s "," non_ignored_root_dirs  << "," queue shift ? "," non_ignored_root_dirs  shift "," non_ignored_root_queue shift s reject "," autoloaded_queue shift s clear "," autoloaded_queue shift s "," autoloaded_queue shift s each "," root_queue shift s key? ! "," root_queue shift s key? "," root_queue shift s "," autoloads []  [] const_get "," autoloads cref_for  [] const_get "," autoloads []  [] "," autoloads cref_for  [] "," non_ignored_root_dirs  map! "," actual_root_queue shift s reject "," actual_root_queue shift s "," collapse_queue shift s member? "," collapse_queue shift s "," actual_root_queue shift s each "," autoloads  autoloads [] _for "," autoloads  autoloads cref_for _for "]}," Zeitwerk Loader reload":{"type":"method","name":"reload","children":[],"call":[" setup "," unload "," raise "," reloading_enabled? "," recompute_ignored_paths "," recompute_collapse_dirs "]}," Zeitwerk Loader unload":{"type":"method","name":"unload","children":[],"call":[" disable_tracer ","Registry  on_unload "," lazy_subdirs clear "," lazy_subdirs "," loaded clear "," loaded "," autoloads clear "," autoloads ","$LOADED_FEATURES delete "," ruby? "," log "," cpath "," logger ","parent send "," cdef? ","parent autoload? "," autoloads each "," mutex synchronize "," mutex "," tracer disable "," tracer ","parent const_defined? ","ExplicitNamespace  unregister "," shadowed clear "," shadowed "," shadowed_files clear "," shadowed_files "," loaded_cpaths clear "," loaded_cpaths ","unloaded_files member? ","$LOADED_FEATURES reject! ","unloaded_files empty? ","unloaded_files add ","Set  new "," autoloaded_dirs clear "," autoloaded_dirs "," to_unload clear "," to_unload "," unload_cref "," to_unload each_value "," unload_autoload ","ExplicitNamespace  unregister_loader "," run_on_unload_callbacks ","parent const_get "," on_unload_callbacks empty? "," on_unload_callbacks "," to_unload each ","abspaths_of_unloaded_crefs member? ","abspaths_of_unloaded_crefs empty? ","abspaths_of_unloaded_crefs add "," on_unload_callbacks empty? ! "," cget ","ExplicitNamespace  __unregister_loader "," namespace_dirs clear "," namespace_dirs "," raise ","Set  new  member? ","Set  new  empty? ","Set  new  add "," to_unload each_parent const_get  "," to_unload each_ cget  "]}," Zeitwerk Loader setup":{"type":"method","name":"setup","children":[],"call":[" do_preload "," set_autoloads_in_dir "," non_ignored_root_dirs each "," non_ignored_root_dirs "," expand_ignored_glob_patterns "," mutex synchronize "," mutex "," tracer enable "," tracer "," actual_dirs each "," actual_dirs "," actual_root_dirs each "," actual_root_dirs "," on_setup_callbacks each "," on_setup_callbacks "," actual_roots each "," actual_roots "]}," Zeitwerk Loader expand_ignored_glob_patterns":{"type":"method","name":"expand_ignored_glob_patterns","children":[],"call":[" ignored_paths replace ","Dir  glob "," ignored flat_map "," ignored "," ignored_paths "]}," Zeitwerk Loader ignore":{"type":"method","name":"ignore","children":[],"call":[" ignored merge "," expand_paths "," ignored "," mutex synchronize "," mutex "," ignored_paths merge "," expand_glob_patterns "," ignored_paths "," ignored_glob_patterns merge "," ignored_glob_patterns "," expand_ expand_paths  "," ignored_ expand_paths  merge "," ignored_ expand_paths  "]}," Zeitwerk Loader preload":{"type":"method","name":"preload","children":[],"call":[" do_preload_dir "," dir? "," do_preload_file "," ruby? "," preloads << "," preloads "," expand_paths each "," expand_paths "," mutex synchronize "," mutex "," do_preload_abspath "]}," Zeitwerk Loader push_dir":{"type":"method","name":"push_dir","children":[],"call":[" raise "," root_dirs []= "," root_dirs "," dir? "," mutex synchronize "," mutex ","File  expand_path "," dirs []= "," dirs "," raise_if_conflicting_directory "," class mutex synchronize "," class mutex "," class ","namespace inspect ","namespace is_a? "]}," Zeitwerk Loader dirs":{"type":"method","name":"dirs","children":[],"call":[" root_dirs keys freeze "," root_dirs keys "," root_dirs "]}," Zeitwerk Loader initialize":{"type":"method","name":"initialize","children":[],"call":["Registry  register_loader "," set_autoloads_in_dir ","tp self ","subdirs each "," lazy_subdirs delete ","tp self name "," lazy_subdirs "," lazy_subdirs empty? ","TracePoint  new ","Mutex  new ","Set  new "," inflector= ","Inflector  new ","TracePoint  trace "," class default_logger "," class ","SecureRandom  hex ","Time  now "," on_namespace_loaded ","h []= ","Hash  new ","Autoloads  new ","Monitor  new "," lazy_subdirs delete  each "," lazy_ lazy_subdirs delete  delete "," lazy_ lazy_subdirs delete  "," lazy_ lazy_subdirs delete  empty? "]}," Kernel require":{"type":"method","name":"require","children":[],"call":["loader on_file_loaded ","Zeitwerk Registry  loader_for ","$LOADED_FEATURES last "," zeitwerk_original_require tap "," zeitwerk_original_require ","loader on_dir_loaded ","path end_with? ","loader on_file_autoloaded ","loader on_dir_autoloaded ","$LOADED_FEATURES << ","Zeitwerk Registry  loader_for  on_file_loaded ","Zeitwerk Registry  Zeitwerk Registry  loader_for _for ","Zeitwerk Registry  loader_for  on_dir_loaded ","Zeitwerk Registry  loader_for  on_file_autoloaded ","Zeitwerk Registry  loader_for  on_dir_autoloaded "]}," Zeitwerk Inflector camelize":{"type":"method","name":"camelize","children":[],"call":["basename split map! join ","basename split map! ","basename split ","1 capitalize ","basename gsub ","basename split map join ","basename split map "," overrides [] "," overrides ","basename split each join ","basename split each "]}," Zeitwerk GemInflector camelize":{"type":"method","name":"camelize","children":[],"call":["abspath == ","basename == ","abspath end_with? "]}," Zeitwerk GemInflector initialize":{"type":"method","name":"initialize","children":[],"call":["File  join ","File  dirname ","File  basename "]}," Zeitwerk Loader actual_dirs":{"type":"method","name":"actual_dirs","children":[],"call":[" ignored member? "," ignored "," dirs each_key reject "," dirs each_key "," dirs "," dirs keys delete_if "," dirs keys "]}," Zeitwerk Loader do_not_eager_load":{"type":"method","name":"do_not_eager_load","children":[],"call":[" eager_load_exclusions merge "," expand_paths "," eager_load_exclusions "," mutex synchronize "," mutex "]}," Zeitwerk Loader do_preload_abspath":{"type":"method","name":"do_preload_abspath","children":[],"call":[" do_preload_dir "," dir? "," do_preload_file "," ruby? "]}," Zeitwerk Loader tag=":{"type":"method","name":"tag=","children":[],"call":["tag to_s "]}," Zeitwerk Loader raise_if_conflicting_directory":{"type":"method","name":"raise_if_conflicting_directory","children":[],"call":[" raise ","loader pretty_inspect "," pretty_inspect "," require ","already_managed_dir start_with? ","dir start_with? ","loader dirs each ","loader dirs ","loader == ","Registry  loaders each ","Registry  loaders ","loader inspect "," inspect "," class mutex synchronize "," class mutex "," class ","loader manages? ","loader != ","dir chop ","root_dir start_with? ","root_dir + "," ignores? ","loader root_dirs each ","loader root_dirs ","dir + ","loader ignores? ","MUTEX  synchronize ","root_dir_slash start_with? ","dir_slash start_with? ","loader __roots each_key ","loader __roots ","loader __ignores? ","suffixed_dir start_with? ","already_managed_dir +  start_with? ","dir +  start_with? ","loader dir + s each ","loader dir + s ","dir +  chop ","root_dir +  start_with? ","root_dir +  + ","loader root_dir + s each ","loader root_dir + s ","dir +  + ","root_dir + _slash start_with? ","dir + _slash start_with? ","suffixed_dir +  start_with? "]}," Callbacks on_namespace_loaded":{"type":"method","name":"on_namespace_loaded","children":[],"call":[" set_autoloads_in_dir ","subdirs each "," lazy_subdirs delete ","namespace name "," lazy_subdirs "," real_mod_name ","dirs each "," namespace_dirs delete "," namespace_dirs "," lazy_subdirs delete  each ","sub namespace_dirs delete  each "," lazy_ lazy_subdirs delete  delete "," lazy_sub namespace_dirs delete  delete "," lazy_ lazy_subdirs delete  "," lazy_sub namespace_dirs delete  "," namespace_dirs delete  each "," namespace_ namespace_dirs delete  delete "," namespace_ namespace_dirs delete  "]}," Callbacks on_dir_autoloaded":{"type":"method","name":"on_dir_autoloaded","children":[],"call":[" on_namespace_loaded "," loaded add ","autovivified_module name "," loaded "," log "," logger ","parent const_set ","Module  new "," autoloads [] "," autoloads "," loaded_cpaths add "," loaded_cpaths "," loaded_cpaths include? "," cpath "," mutex2 synchronize "," mutex2 "," autoloaded_dirs << "," autoloaded_dirs ","parent nil? "," cref_autoloaded_from "," to_unload []= "," to_unload "," reloading_enabled? ","cref [] const_set ","cref [] "," autoloads delete "," run_on_load_callbacks "," on_load_callbacks empty? "," on_load_callbacks "," dirs_autoload_monitor synchronize "," dirs_autoload_monitor ","parent const_set  name ","cref [] const_set  name "," loaded_autovivified_module name s add "," loaded_autovivified_module name s "," loaded_autovivified_module name s include? "," autovivified_module name  ","  autoloads delete _autoloaded_from "," autoloads delete  [] const_set "," autoloads delete  [] "]}," Callbacks on_file_autoloaded":{"type":"method","name":"on_file_autoloaded","children":[],"call":[" log "," cpath "," logger "," loaded add "," loaded "," autoloads [] "," autoloads "," loaded_cpaths add "," loaded_cpaths ","Zeitwerk Registry  unregister_autoload "," cref_autoloaded_from "," to_unload []= "," to_unload "," reloading_enabled? "," autoloads delete "," raise "," cdef? ! "," cdef? ","Zeitwerk NameError  new ","cref last "," run_on_load_callbacks "," cget "," on_load_callbacks empty? "," on_load_callbacks "," crem ","  cpath  "," loaded_ cpath s add "," loaded_ cpath s ","  autoloads delete _autoloaded_from "," autoloads delete  last "]}," Zeitwerk Registry teardown":{"type":"method","name":"teardown","children":[],"call":[" loaders_managing_gems clear "," loaders_managing_gems "," loaders clear "," loaders "," loaders each "]}," Zeitwerk OrderedSet each":{"type":"method","name":"each","children":[],"call":["@set each_key "]}," Zeitwerk OrderedSet del":{"type":"method","name":"del","children":[],"call":["@set delete "]}," Zeitwerk OrderedSet add":{"type":"method","name":"add","children":[],"call":["@set []= "]}," Zeitwerk OrderedSet initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Zeitwerk Loader register_explicit_namespace":{"type":"method","name":"register_explicit_namespace","children":[],"call":["ExplicitNamespace  register ","ExplicitNamespace  __register "]}," Zeitwerk ExplicitNamespace disable_tracer_if_unneeded":{"type":"method","name":"disable_tracer_if_unneeded","children":[],"call":[" tracer disable "," tracer "," cpaths empty? "," cpaths "," mutex synchronize "," mutex "]}," Zeitwerk ExplicitNamespace teardown":{"type":"method","name":"teardown","children":[],"call":[" tracer disable "," tracer "," cpaths clear "," cpaths "]}," Zeitwerk ExplicitNamespace unregister":{"type":"method","name":"unregister","children":[],"call":[" disable_tracer_if_unneeded ","l == "," cpaths delete_if "," cpaths "]}," Zeitwerk ExplicitNamespace register":{"type":"method","name":"register","children":[],"call":[" tracer enable "," tracer "," tracer enabled? "," cpaths []= "," cpaths "," mutex synchronize "," mutex "]}," Zeitwerk Loader strict_autoload_path":{"type":"method","name":"strict_autoload_path","children":[],"call":["parent superclass autoload? == ","parent superclass autoload? ","parent superclass ","parent is_a? ","parent autoload? "," cdef? "]}," Zeitwerk Loader reloading_enabled?":{"type":"method","name":"reloading_enabled?","children":[],"call":[]}," Zeitwerk Loader enable_reloading":{"type":"method","name":"enable_reloading","children":[],"call":[" raise "," mutex synchronize "," mutex "]}," Callbacks cref_autoloaded_from":{"type":"method","name":"cref_autoloaded_from","children":[],"call":[" autoloads delete "," autoloads "," autoloads [] "," reloading_enabled? "]}," Zeitwerk Loader unload_cref":{"type":"method","name":"unload_cref","children":[],"call":[" log "," cpath "," logger ","parent send ","parent __send__ "," crem "]}," Zeitwerk Loader unload_autoload":{"type":"method","name":"unload_autoload","children":[],"call":[" log "," cpath "," logger ","parent send ","parent __send__ "," crem "]}," Zeitwerk Loader to_unload?":{"type":"method","name":"to_unload?","children":[],"call":[" to_unload key? "," to_unload "]}," Zeitwerk Loader promote_namespace_from_implicit_to_explicit":{"type":"method","name":"promote_namespace_from_implicit_to_explicit","children":[],"call":[" register_explicit_namespace "," cpath "," set_autoload ","Registry  unregister_autoload "," autoloads delete "," autoloads "," log "," logger "]}," RealModName real_mod_name":{"type":"method","name":"real_mod_name","children":[],"call":["UNBOUND_METHOD_MODULE_NAME  bind call ","UNBOUND_METHOD_MODULE_NAME  bind ","UNBOUND_METHOD_MODULE_NAME  bind_call "]}," Zeitwerk Loader recompute_ignored_paths":{"type":"method","name":"recompute_ignored_paths","children":[],"call":[" ignored_paths replace "," expand_glob_patterns "," ignored_glob_patterns "," ignored_paths "]}," Zeitwerk Loader expand_glob_patterns":{"type":"method","name":"expand_glob_patterns","children":[],"call":["Dir  glob ","glob_patterns flat_map "]}," Zeitwerk Loader ls":{"type":"method","name":"ls","children":[],"call":[" ignored_paths member? "," ignored_paths ","File  join ","basename start_with? ","Dir  foreach ","abspath freeze ","File  join  freeze "]}," Zeitwerk Loader actual_root_dirs":{"type":"method","name":"actual_root_dirs","children":[],"call":[" ignored_paths member? "," ignored_paths "," dir? ! "," dir? "," root_dirs keys delete_if "," root_dirs keys "," root_dirs "," root_dirs reject "]}," Zeitwerk Loader manages?":{"type":"method","name":"manages?","children":[],"call":["dir start_with? ","root_dir + ","root_dir start_with? "," root_dirs each_key "," root_dirs ","ignored_path + "," ignored_paths each "," ignored_paths ","dir + ","dir +  start_with? ","root_dir +  + ","root_dir +  start_with? "," root_dir + s each_key "," root_dir + s ","dir +  + "]}," Zeitwerk Loader log!":{"type":"method","name":"log!","children":[],"call":[" puts "," lambda "]}," Zeitwerk Loader unloadable_cpaths":{"type":"method","name":"unloadable_cpaths","children":[],"call":[" to_unload keys freeze "," to_unload keys "," to_unload "]}," Zeitwerk Loader unloadable_cpath?":{"type":"method","name":"unloadable_cpath?","children":[],"call":[" to_unload key? "," to_unload "]}," Zeitwerk ExplicitNamespace tracepoint_class_callback":{"type":"method","name":"tracepoint_class_callback","children":[],"call":[" disable_tracer_if_unneeded ","loader on_namespace_loaded ","event self "," cpaths delete "," real_mod_name "," cpaths ","event self singleton_class? "," cpaths delete  on_namespace_loaded "]}," Zeitwerk Loader const_get_if_autoload":{"type":"method","name":"const_get_if_autoload","children":[],"call":["cref [] const_get ","cref [] "," autoloads [] ","File  realpath "," autoloads "," autoloads []  [] const_get "," autoloads []  [] "]}," Zeitwerk Inflector overrides":{"type":"method","name":"overrides","children":[],"call":[]}," Zeitwerk Inflector inflect":{"type":"method","name":"inflect","children":[],"call":[" overrides merge! "," overrides "]}," Zeitwerk Loader recompute_collapse_dirs":{"type":"method","name":"recompute_collapse_dirs","children":[],"call":[" collapse_dirs replace "," expand_glob_patterns "," collapse_glob_patterns "," collapse_dirs "]}," Zeitwerk Loader collapse":{"type":"method","name":"collapse","children":[],"call":[" collapse_dirs merge "," expand_glob_patterns "," collapse_dirs "," collapse_glob_patterns merge "," collapse_glob_patterns "," mutex synchronize "," mutex "," expand_paths "," expand_ expand_paths  "," collapse_ expand_paths  merge "," collapse_ expand_paths  "]}," Zeitwerk Loader on_load":{"type":"method","name":"on_load","children":[],"call":["(or-asgn\n  (send\n    (send nil :on_load_callbacks) :[]\n    (lvar :cpath))\n  (array)) << "," on_load_callbacks [] "," on_load_callbacks "," mutex synchronize "," mutex "," raise ","cpath is_a? "]}," Callbacks run_on_load_callbacks":{"type":"method","name":"run_on_load_callbacks","children":[],"call":["callbacks each "," on_load_callbacks delete "," on_load_callbacks "," on_load_callbacks [] "," reloading_enabled? "," on_load_callbacks empty? ","c call "," on_load_callbacks delete  each "," on_load_callbacks []  each "," on_load_ on_load_callbacks delete  delete "," on_load_ on_load_callbacks []  delete "," on_load_ on_load_callbacks delete  "," on_load_ on_load_callbacks []  "," on_load_ on_load_callbacks delete  [] "," on_load_ on_load_callbacks []  [] "," on_load_ on_load_callbacks delete  empty? "," on_load_ on_load_callbacks []  empty? "]}," Zeitwerk with_loader":{"type":"method","name":"with_loader","children":[],"call":[]}," Zeitwerk Registry unregister_loader":{"type":"method","name":"unregister_loader","children":[],"call":["l == "," inceptions delete_if "," inceptions "," autoloads delete_if "," autoloads "," loaders_managing_gems delete_if "," loaders_managing_gems "," loaders delete "," loaders "," gem_loaders_by_root_file delete_if "," gem_loaders_by_root_file "]}," Zeitwerk Loader run_on_unload_callbacks":{"type":"method","name":"run_on_unload_callbacks","children":[],"call":["c call "," on_unload_callbacks [] "," on_unload_callbacks "]}," Zeitwerk Loader unregister":{"type":"method","name":"unregister","children":[],"call":["ExplicitNamespace  unregister_loader ","Registry  unregister_loader ","ExplicitNamespace  __unregister_loader "]}," Helpers cget":{"type":"method","name":"cget","children":[],"call":["parent const_get "]}," Helpers cdef?":{"type":"method","name":"cdef?","children":[],"call":["parent const_defined? "]}," Helpers cpath":{"type":"method","name":"cpath","children":[],"call":[" real_mod_name ","cname to_s ","Object  == ","cname name "]}," Helpers strict_autoload_path":{"type":"method","name":"strict_autoload_path","children":[],"call":["parent autoload? "," cdef? "]}," Helpers hidden?":{"type":"method","name":"hidden?","children":[],"call":["basename start_with? "]}," Helpers dir?":{"type":"method","name":"dir?","children":[],"call":["File  directory? "]}," Helpers ruby?":{"type":"method","name":"ruby?","children":[],"call":["path end_with? "]}," Helpers ls":{"type":"method","name":"ls","children":[],"call":["abspath freeze "," ignored_paths member? "," ignored_paths ","File  join "," hidden? ","Dir  each_child "," ruby? "," has_at_least_one_ruby_file? "," dir? ","children each ","children sort! ","Dir  children "," has_at_least_one_ruby_file? ! "," roots key? "," roots "," ignored_path? "," root_dirs key? "," root_dirs ","File  join  freeze ","Dir  children  each ","Dir  children  sort! ","Dir  Dir  children  "]}," Helpers log":{"type":"method","name":"log","children":[],"call":[" logger send "," tag "," logger "," logger respond_to? "]}," Config recompute_collapse_dirs":{"type":"method","name":"recompute_collapse_dirs","children":[],"call":[" collapse_dirs replace "," expand_glob_patterns "," collapse_glob_patterns "," collapse_dirs "]}," Config recompute_ignored_paths":{"type":"method","name":"recompute_ignored_paths","children":[],"call":[" ignored_paths replace "," expand_glob_patterns "," ignored_glob_patterns "," ignored_paths "]}," Config expand_glob_patterns":{"type":"method","name":"expand_glob_patterns","children":[],"call":["Dir  glob ","glob_patterns flat_map "]}," Config expand_paths":{"type":"method","name":"expand_paths","children":[],"call":["File  expand_path ","paths flatten map! ","paths flatten "]}," Config collapse?":{"type":"method","name":"collapse?","children":[],"call":[" collapse_dirs member? "," collapse_dirs "]}," Config excluded_from_eager_load?":{"type":"method","name":"excluded_from_eager_load?","children":[],"call":[" eager_load_exclusions member? "," eager_load_exclusions "," roots key? "," roots "," walk_up "," eager_load_exclusions empty? "," root_dirs key? "," root_dirs "]}," Config root_dir?":{"type":"method","name":"root_dir?","children":[],"call":[" root_dirs key? "," root_dirs "," roots key? "," roots "]}," Config actual_root_dirs":{"type":"method","name":"actual_root_dirs","children":[],"call":[" ignored_paths member? "," ignored_paths "," dir? ! "," dir? "," root_dirs reject "," root_dirs "]}," Config ignores?":{"type":"method","name":"ignores?","children":[],"call":["abspath start_with? ","ignored_path + "," dir? ","ignored_path == "," ignored_paths any? "," ignored_paths "," roots key? "," roots "," ignored_path? "," walk_up "," ignored_paths empty? "," root_dirs key? "," root_dirs "," ignored_paths member? "]}," Config log!":{"type":"method","name":"log!","children":[],"call":[" puts "," lambda "]}," Config on_unload":{"type":"method","name":"on_unload","children":[],"call":["(or-asgn\n  (send\n    (send nil :on_unload_callbacks) :[]\n    (lvar :cpath))\n  (array)) << "," on_unload_callbacks [] "," on_unload_callbacks "," mutex synchronize "," mutex "," raise ","cpath == ","cpath is_a? "]}," Config on_load":{"type":"method","name":"on_load","children":[],"call":["(or-asgn\n  (send\n    (send nil :on_load_callbacks) :[]\n    (lvar :cpath))\n  (array)) << "," on_load_callbacks [] "," on_load_callbacks "," mutex synchronize "," mutex "," raise ","cpath == ","cpath is_a? "]}," Config on_setup":{"type":"method","name":"on_setup","children":[],"call":["block call "," on_setup_callbacks << "," on_setup_callbacks "," mutex synchronize "," mutex "]}," Config collapse":{"type":"method","name":"collapse","children":[],"call":[" collapse_dirs merge "," expand_glob_patterns "," collapse_dirs "," collapse_glob_patterns merge "," collapse_glob_patterns "," mutex synchronize "," mutex "," expand_paths "," expand_ expand_paths  "," collapse_ expand_paths  merge "," collapse_ expand_paths  "]}," Config ignore":{"type":"method","name":"ignore","children":[],"call":[" ignored_paths merge "," expand_glob_patterns "," ignored_paths "," ignored_glob_patterns merge "," ignored_glob_patterns "," mutex synchronize "," mutex "," expand_paths "," expand_ expand_paths  "," ignored_ expand_paths  merge "," ignored_ expand_paths  "]}," Config do_not_eager_load":{"type":"method","name":"do_not_eager_load","children":[],"call":[" eager_load_exclusions merge "," expand_paths "," eager_load_exclusions "," mutex synchronize "," mutex "]}," Config reloading_enabled?":{"type":"method","name":"reloading_enabled?","children":[],"call":[]}," Config enable_reloading":{"type":"method","name":"enable_reloading","children":[],"call":[" raise "," mutex synchronize "," mutex "]}," Config dirs":{"type":"method","name":"dirs","children":[],"call":[" root_dirs keys freeze "," root_dirs keys "," root_dirs ","(lvar :namespaces) freeze "," root_dirs clone "," ignored_path? "," roots keys reject "," roots keys "," roots "," ignored_paths empty? "," ignored_paths "," roots reject "," roots clone "]}," Config tag=":{"type":"method","name":"tag=","children":[],"call":["tag to_s "]}," Config tag":{"type":"method","name":"tag","children":[],"call":[]}," Config push_dir":{"type":"method","name":"push_dir","children":[],"call":[" raise "," root_dirs []= "," root_dirs "," raise_if_conflicting_directory "," dir? ","File  expand_path ","namespace inspect ","namespace is_a? "," roots []= "," roots "," real_mod_name "]}," Config initialize":{"type":"method","name":"initialize","children":[],"call":["SecureRandom  hex "," class default_logger "," class ","Set  new ","Zeitwerk Inflector  new ","Time  now "]}," Zeitwerk ExplicitNamespace unregister_loader":{"type":"method","name":"unregister_loader","children":[],"call":[" disable_tracer_if_unneeded ","l == "," cpaths delete_if "," cpaths "]}," Zeitwerk Autoloads empty?":{"type":"method","name":"empty?","children":[],"call":[" a2c empty? "," a2c "," c2a empty? "," c2a "]}," Zeitwerk Autoloads clear":{"type":"method","name":"clear","children":[],"call":[" a2c clear "," a2c "," c2a clear "," c2a "]}," Zeitwerk Autoloads delete":{"type":"method","name":"delete","children":[],"call":[" c2a delete "," c2a "," a2c delete "," a2c "]}," Zeitwerk Autoloads cref_for":{"type":"method","name":"cref_for","children":[],"call":[" a2c [] "," a2c "]}," Zeitwerk Autoloads abspath_for":{"type":"method","name":"abspath_for","children":[],"call":[" c2a [] "," c2a "]}," Zeitwerk Autoloads each":{"type":"method","name":"each","children":[],"call":[" c2a each "," c2a "]}," Zeitwerk Autoloads define":{"type":"method","name":"define","children":[],"call":[" a2c []= "," a2c "," c2a []= "," c2a ","parent autoload "]}," Zeitwerk Autoloads initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Config manages?":{"type":"method","name":"manages?","children":[],"call":["dir start_with? ","root_dir + ","root_dir start_with? "," root_dirs each_key "," root_dirs ","ignored_path + "," ignored_paths each "," ignored_paths ","dir + ","dir +  start_with? ","root_dir +  + ","root_dir +  start_with? "," root_dir + s each_key "," root_dir + s ","dir +  + "]}," Zeitwerk Loader autoload_path_set_by_me_for?":{"type":"method","name":"autoload_path_set_by_me_for?","children":[],"call":["Registry  inception? "," cpath "," autoloads key? "," autoloads "," strict_autoload_path "," strict_ strict_autoload_path  "]}," Helpers has_at_least_one_ruby_file?":{"type":"method","name":"has_at_least_one_ruby_file?","children":[],"call":["to_visit << "," dir? "," ls ","to_visit shift "," to_visit shift ? "]}," Zeitwerk GemLoader warn_on_extra_files":{"type":"method","name":"warn_on_extra_files","children":[],"call":[" warn "," dir? "," inflector camelize "," inflector ","basename delete_suffix ","abspath == "," ls ","@root_file delete_suffix "," inflector camelize to_sym "]}," Zeitwerk GemLoader setup":{"type":"method","name":"setup","children":[],"call":[" warn_on_extra_files "]}," Zeitwerk GemLoader initialize":{"type":"method","name":"initialize","children":[],"call":[" push_dir ","File  dirname ","File  expand_path ","GemInflector  new ","File  basename "," real_mod_name + + "," real_mod_name + "," real_mod_name ","namespace equal? "]}," Zeitwerk GemLoader _new":{"type":"method","name":"_new","children":[],"call":[]}," Zeitwerk ReloadingDisabledError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Zeitwerk Loader eager_load_namespace":{"type":"method","name":"eager_load_namespace","children":[],"call":["loader eager_load_namespace ","Registry  loaders each ","Registry  loaders "]}," Zeitwerk Loader for_gem_extension":{"type":"method","name":"for_gem_extension","children":[],"call":["Registry  loader_for_gem "," caller_locations first path "," caller_locations first "," caller_locations "," raise "," real_mod_name ","namespace inspect ","namespace is_a? "]}," Zeitwerk Loader shadowed_file?":{"type":"method","name":"shadowed_file?","children":[],"call":[" shadowed_files member? "," shadowed_files "]}," Zeitwerk Loader cpath_expected_at":{"type":"method","name":"cpath_expected_at","children":[],"call":["cnames join "," real_mod_name ","root_namespace == "," cname_for ","paths reverse_each map ","paths reverse_each ","paths empty? ","paths << "," collapse? "," hidden? ","File  basename "," ignored_path? "," roots [] "," roots "," walk_up ","File  dirname "," ruby? "," dir? "," raise ","Zeitwerk Error  new ","File  exist? ","File  expand_path ","Zeitwerk NameError  new ","abspaths [] ","(send\n  (lvar :i) :+\n  (int 1)) -@ ","i + ","cname_validator const_defined? ","cnames each_with_index ","Module  new ","cnames reverse! ","cnames empty? ","abspaths << ","cnames << "," inflector camelize to_sym "," inflector camelize "," inflector ","cnames (send\n  (lvar :i) :+\n  (int 1)) -@ oin "," roots []  == ","File  File  basename  ","File  expand_path s [] ","Module  new  const_defined? ","File  expand_path s << "]}," Helpers cname_for":{"type":"method","name":"cname_for","children":[],"call":["cname to_sym "," raise ","Zeitwerk NameError  new ","error name "," inflector class "," inflector ","error message "," ruby? ","CNAME_VALIDATOR  const_defined? ","cname include? ","cname inspect ","cname is_a? "," inflector camelize "," inflector camelize  to_sym "," inflector camelize  include? "," inflector camelize  inspect "," inflector camelize  is_a? "]}," Helpers crem":{"type":"method","name":"crem","children":[],"call":["parent __send__ "]}," Helpers walk_up":{"type":"method","name":"walk_up","children":[],"call":["basename == ","File  split "," loop "]}," EagerLoad eager_load_child_namespace":{"type":"method","name":"eager_load_child_namespace","children":[],"call":[" actual_eager_load_dir ","dirs each ","next_dirs clear ","dirs replace ","next_dirs empty? ","next_dirs << ","segment == "," inflector camelize "," inflector ","dirs << "," collapse? "," dir? "," ls ","dirs shift ","suffix split each ","suffix split ","suffix delete_prefix "," real_mod_name + "," real_mod_name ","root_namespace equal? "," current_dirs << "," current_dirs "," actual_eager_load_dirs shift  ","dirs shift s each ","next_dirs shift s clear ","dirs shift s replace ","next_dirs shift s empty? ","next_dirs shift s << ","dirs shift s << "," dirs shift ? ","dirs shift s shift ","suffix delete_prefix  split each "," real_mod_name  split each ","suffix delete_prefix  split "," real_mod_name  split ","suffix delete_prefix  delete_prefix "," real_mod_name  delete_prefix "," current_dirs shift s << "," current_dirs shift s "]}," EagerLoad actual_eager_load_dir":{"type":"method","name":"actual_eager_load_dir","children":[],"call":[" log "," logger ","queue << "," cget "," inflector camelize to_sym "," inflector camelize "," inflector "," collapse? "," shadowed_file? ! "," shadowed_file? "," autoloads [] "," autoloads "," ruby? "," eager_load_exclusions member? "," eager_load_exclusions "," ls ","queue shift "," excluded_from_eager_load? ","force ! "]}," EagerLoad load_file":{"type":"method","name":"load_file","children":[],"call":[" cget "," raise ","Zeitwerk Error  new "," shadowed_file? ","cnames reverse_each ","cnames << "," inflector camelize to_sym "," inflector camelize "," inflector "," collapse? "," hidden? ","File  basename "," roots [] "," roots "," ignored_path? "," walk_up ","File  dirname "," ruby? ! "," ruby? "," dir? ","File  exist? ","File  expand_path "," root_dirs [] "," root_dirs "," ignored_paths member? "," ignored_paths ","File  File  basename  "]}," EagerLoad eager_load_namespace":{"type":"method","name":"eager_load_namespace","children":[],"call":[" eager_load_child_namespace ","mod_name start_with? ","root_namespace_name + "," actual_eager_load_dir ","mod_name == ","root_namespace_name start_with? ","mod_name + "," real_mod_name ","root_namespace equal? ","mod equal? "," actual_roots each "," actual_roots "," raise ","mod inspect ","mod is_a? "," actual_root_dirs each "," actual_root_dirs "," real_mod_name  start_with? "," real_mod_name  + "," real_mod_name  == "," real_ real_mod_name  "]}," EagerLoad eager_load_dir":{"type":"method","name":"eager_load_dir","children":[],"call":[" actual_eager_load_dir "," cget "," cdef? ","cnames reverse_each "," raise ","Zeitwerk Error  new ","cnames << "," inflector camelize to_sym "," inflector camelize "," inflector "," collapse? "," hidden? ","File  basename "," roots [] "," roots "," eager_load_exclusions member? "," eager_load_exclusions "," ignored_path? "," walk_up "," dir? ","File  expand_path "," root_dirs [] "," root_dirs "," ignored_paths member? "," ignored_paths ","File  File  basename  "]}," EagerLoad eager_load":{"type":"method","name":"eager_load","children":[],"call":[" log "," logger "," autoloaded_dirs clear "," autoloaded_dirs ","Zeitwerk Registry  unregister_autoload "," autoloaded_dirs each "," actual_eager_load_dir "," actual_roots each "," actual_roots "," raise "," mutex synchronize "," mutex "," actual_root_dirs each "," actual_root_dirs "]}," Config actual_roots":{"type":"method","name":"actual_roots","children":[],"call":[" ignored_path? "," dir? ! "," dir? "," roots reject "," roots "," ignored_paths member? "," ignored_paths "]}," Config ignored_path?":{"type":"method","name":"ignored_path?","children":[],"call":[" ignored_paths member? "," ignored_paths "]}," Internal internal":{"type":"method","name":"internal","children":[],"call":[" public "," alias_method "," private "]}," Zeitwerk GemLoader __new":{"type":"method","name":"__new","children":[],"call":[]}," Zeitwerk ExplicitNamespace registered?":{"type":"method","name":"registered?","children":[],"call":[" cpaths key? "," cpaths "]}," Zeitwerk SetupRequired initialize":{"type":"method","name":"initialize","children":[],"call":[]}}