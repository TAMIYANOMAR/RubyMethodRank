{" Sidekiq Status get":{"type":"method","name":"get","children":[],"call":[]}," Worker store":{"type":"method","name":"store","children":[],"call":[" store_for_id "]}," Worker id=":{"type":"method","name":"id=","children":[],"call":[" raise "," RuntimeError "]}," Worker ClassMethods perform_async_with_uuid":{"type":"method","name":"perform_async_with_uuid","children":[],"call":[" perform_async_without_uuid ","args unshift ","SecureRandom  uuid "," perform_async_without_uuSecureRandom  uuid  ","SecureRandom  uuSecureRandom  uuid  "]}," Worker ClassMethods extended":{"type":"method","name":"extended","children":[],"call":[]}," Storage read_field_for_id":{"type":"method","name":"read_field_for_id","children":[],"call":["conn hmget [] ","conn hmget ","Sidekiq  redis "," key ","conn hget ","Sidekiq Status  redis_adapter "]}," Storage store_for_id":{"type":"method","name":"store_for_id","children":[],"call":["answers [] ","conn publish ","conn expire ","conn hmset ","status_updates to_a flatten ","status_updates to_a ","Time  now to_i ","Time  now ","conn multi ","Sidekiq  redis ","(send\n  (lvar :conn) :multi) [] "," redis_connection "," key ","pipeline publish ","pipeline expire ","pipeline hmset ","status_updates transform_values! ","pipeline hset "]}," Status ServerMiddleware call":{"type":"method","name":"call","children":[],"call":["conn expire ","worker id ","Sidekiq  redis ","worker is_a? "," raise ","msg [] unshift ","msg [] ","worker store ","worker class name ","worker class ","UUID_REGEXP  match ","worker id is_a? ","worker id= ","msg [] shift "," store_status ","worker jid ","worker expiration= ","worker respond_to? ","worker expiration ","worker expiration ! ","retry_count < "," retry_attempts_from ","job_class new expiration ","job_class new ","job_class ancestors include? ","job_class ancestors ","Module  const_get ","klass is_a? ","msg [] [] [] ","msg [] [] "," retry_attempt_number < "," retry_attempt_number ","Module  const_get  new expiration ","Module  const_get  new ","Module  const_get  ancestors include? ","Module  const_get  ancestors "]}," Status ServerMiddleware initialize":{"type":"method","name":"initialize","children":[],"call":["opts [] "]}," Status ClientMiddleware call":{"type":"method","name":"call","children":[],"call":[" store_for_id ","msg [] [] ","msg [] ","worker_class include? "," store_status ","msg [] to_json ","msg [] to_a empty? ","msg [] to_a "," display_args ","Sidekiq Job  new display_class ","Sidekiq Job  new ","job_class new expiration ","job_class new ","job_class ancestors include? ","job_class ancestors ","Module  const_get ","klass is_a? ","msg [] [] [] ","Module  const_defined? ","JOB_CLASS  new display_class ","JOB_CLASS  new ","Module  const_get  new expiration ","Module  const_get  new ","Module  const_get  ancestors include? ","Module  const_get  ancestors "]}," Sidekiq Status get_all":{"type":"method","name":"get_all","children":[],"call":[]}," Storage read_hash_for_id":{"type":"method","name":"read_hash_for_id","children":[],"call":["conn hgetall ","Sidekiq  redis "," key ","Sidekiq Status  redis_adapter "]}," Status message":{"type":"method","name":"message","children":[],"call":[" get "]}," Status pct_complete":{"type":"method","name":"pct_complete","children":[],"call":["(send\n  (send\n    (send nil :num\n      (lvar :job_id)) :to_f) :/\n  (send nil :total\n    (lvar :job_id))) * "," num to_f / "," total "," num to_f "," num ","(send\n  (send\n    (send nil :at\n      (lvar :job_id)) :to_f) :/\n  (send nil :total\n    (lvar :job_id))) * "," at to_f / "," at to_f "," at ","(send\n  (begin\n    (send\n      (send nil :at\n        (lvar :job_id)) :/\n      (send\n        (send nil :total\n          (lvar :job_id)) :to_f))) :*\n  (int 100)) to_i ","(send\n  (send nil :at\n    (lvar :job_id)) :/\n  (send\n    (send nil :total\n      (lvar :job_id)) :to_f)) * "," at / "," total to_f "," total to_f > "," get to_i "," get "]}," Status total":{"type":"method","name":"total","children":[],"call":[" get to_i "," get "]}," Status num":{"type":"method","name":"num","children":[],"call":[" get to_i "," get "]}," Status status":{"type":"method","name":"status","children":[],"call":["status to_sym ","status nil? "," get "," get  to_sym "," get  nil? "]}," Status get_all":{"type":"method","name":"get_all","children":[],"call":[" read_hash_for_id "]}," Status get":{"type":"method","name":"get","children":[],"call":[" read_field_for_id "]}," Worker at":{"type":"method","name":"at","children":[],"call":[" store "," total "," retrieve nil? "," retrieve ","(send\n  (begin\n    (send\n      (lvar :num) :/\n      (send\n        (ivar :@_status_total) :to_f))) :*\n  (int 100)) to_i ","(send\n  (lvar :num) :/\n  (send\n    (ivar :@_status_total) :to_f)) * ","num / ","@_status_total to_f ","@_status_total nil? "," working_at "]}," Worker retrieve":{"type":"method","name":"retrieve","children":[],"call":[" read_field_for_id "]}," Storage store_status":{"type":"method","name":"store_status","children":[],"call":[" store_for_id "]}," Status cancel":{"type":"method","name":"cancel","children":[],"call":[" delete_and_unschedule "]}," Storage scan_scheduled_jobs_for_jid":{"type":"method","name":"scan_scheduled_jobs_for_jid","children":[],"call":["job_listing include? ","scheduled_jobs each ","(send\n  (lvar :scheduled_jobs) :select) [] ","job_listing match ","scheduled_jobs select "]}," Storage schedule_batch":{"type":"method","name":"schedule_batch","children":[],"call":["options [] zrangebyscore ","options [] ","Sidekiq Status  wrap_redis_connection schedule_batch ","options merge ","Sidekiq Status  wrap_redis_connection "]}," Storage delete_and_unschedule":{"type":"method","name":"delete_and_unschedule","children":[],"call":["scan_options [] ","conn del ","conn zrem ","match nil? "," scan_scheduled_jobs_for_jid ","(lvasgn :jobs\n  (send nil :schedule_batch\n    (lvar :scan_options))) empty? ! ","(lvasgn :jobs\n  (send nil :schedule_batch\n    (lvar :scan_options))) empty? "," schedule_batch ","Sidekiq  redis "," key ","Sidekiq Status  redis_adapter "," scan_scheduled_jobs_for_jid  nil? "," scan_scheduled_ schedule_batch _for_jid ","(lvasgn : schedule_batch \n  (send nil :schedule_batch\n    (lvar :scan_options))) empty? ! ","(lvasgn : schedule_batch \n  (send nil :schedule_batch\n    (lvar :scan_options))) empty? "]}," Sidekiq Status status":{"type":"method","name":"status","children":[],"call":[]}," Status Web registered":{"type":"method","name":"registered","children":[{"type":"method","name":"sidekiq_status_template","children":[],"asgn":[{"type":"local","name":"path","value":"File  join + "},["File  join + "]],"call":["File  open read ","File  open ","File  join + ","File  join ","name to_s "]}],"call":[]}," Status at":{"type":"method","name":"at","children":[],"call":[" get to_i "," get "]}," Worker total":{"type":"method","name":"total","children":[],"call":[" store "," working_at "]}," Storage redis_connection":{"type":"method","name":"redis_connection","children":[],"call":["Sidekiq  redis ","redis_pool with "]}," Storage key":{"type":"method","name":"key","children":[],"call":[]}," Status ClientMiddleware initialize":{"type":"method","name":"initialize","children":[],"call":["opts [] "]}," Status delete":{"type":"method","name":"delete","children":[],"call":[" delete_status "]}," Sidekiq Storage store_status":{"type":"method","name":"store_status","children":[],"call":[]}," Storage delete_status":{"type":"method","name":"delete_status","children":[],"call":["conn del "," key "," redis_connection "]}," Status ClientMiddleware display_args":{"type":"method","name":"display_args","children":[],"call":["msg [] to_json ","msg [] ","msg [] to_a empty? ","msg [] to_a ","job display_args to_json ","job display_args ","job display_args to_a empty? ","job display_args to_a ","Sidekiq Job  new ","JOB_CLASS  new ","Sidekiq Job  new  display_args to_json ","JOB_CLASS  new  display_args to_json ","Sidekiq Job  new  display_args ","JOB_CLASS  new  display_args ","Sidekiq Job  new  display_args to_a empty? ","JOB_CLASS  new  display_args to_a empty? ","Sidekiq Job  new  display_args to_a ","JOB_CLASS  new  display_args to_a "]}," Status Web default_per_page":{"type":"method","name":"default_per_page","children":[],"call":[]}," Status Web default_per_page=":{"type":"method","name":"default_per_page=","children":[],"call":[]}," Status Web per_page_opts":{"type":"method","name":"per_page_opts","children":[],"call":[]}," Status Web per_page_opts=":{"type":"method","name":"per_page_opts=","children":[],"call":[]}," Sidekiq Storage store_for_id":{"type":"method","name":"store_for_id","children":[],"call":[]}," Sidekiq major_version":{"type":"method","name":"major_version","children":[],"call":[]}," Status configure_server_middleware":{"type":"method","name":"configure_server_middleware","children":[],"call":[]}," Status ServerMiddleware retry_attempts_from":{"type":"method","name":"retry_attempts_from","children":[],"call":["msg_retry is_a? "]}," Status configure_client_middleware":{"type":"method","name":"configure_client_middleware","children":[],"call":[]}," Sidekiq Status Storage store_for_id":{"type":"method","name":"store_for_id","children":[],"call":[]}," Sidekiq Status Storage store_status":{"type":"method","name":"store_status","children":[],"call":[]}," Status ServerMiddleware sidekiq_version_dependent_retry_offset":{"type":"method","name":"sidekiq_version_dependent_retry_offset","children":[],"call":["Sidekiq  major_version >= ","Sidekiq  major_version "]}," Status ServerMiddleware retry_attempt_number":{"type":"method","name":"retry_attempt_number","children":[],"call":["msg [] + "," sidekiq_version_dependent_retry_offset ","msg [] "]}," Status redis_adapter":{"type":"method","name":"redis_adapter","children":[],"call":[" wrap_redis_connection ","Sidekiq  redis "]}," Status wrap_redis_connection":{"type":"method","name":"wrap_redis_connection","children":[],"call":["RedisAdapter  new ","conn is_a? ","RedisClientAdapter  new ","Sidekiq  major_version >= ","Sidekiq  major_version "]}," RedisClientAdapter method_missing":{"type":"method","name":"method_missing","children":[],"call":["@client send "]}," RedisClientAdapter schedule_batch":{"type":"method","name":"schedule_batch","children":[],"call":["@client zrange ","options [] "]}," RedisClientAdapter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RedisAdapter method_missing":{"type":"method","name":"method_missing","children":[],"call":["@client send "]}," RedisAdapter schedule_batch":{"type":"method","name":"schedule_batch","children":[],"call":["@client zrangebyscore ","options [] "]}," RedisAdapter scan":{"type":"method","name":"scan","children":[],"call":["@client scan_each "]}," RedisAdapter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Status eta":{"type":"method","name":"eta","children":[],"call":["(send\n  (send\n    (send\n      (const nil :Time) :now) :to_i) :-\n  (send nil :working_at\n    (lvar :job_id))) to_f / * "," total - "," total ","(send\n  (send\n    (send\n      (const nil :Time) :now) :to_i) :-\n  (send nil :working_at\n    (lvar :job_id))) to_f / ","(send\n  (send\n    (send\n      (const nil :Time) :now) :to_i) :-\n  (send nil :working_at\n    (lvar :job_id))) to_f ","Time  now to_i - "," working_at ","Time  now to_i ","Time  now ","at zero? "," at ","(send\n  (send\n    (send\n      (const nil :Time) :now) :to_i) :-\n  (send nil :working_ at \n    (lvar :job_id))) to_f / * ","(send\n  (send\n    (send\n      (const nil :Time) :now) :to_i) :-\n  (send nil :working_ at \n    (lvar :job_id))) to_f / ","(send\n  (send\n    (send\n      (const nil :Time) :now) :to_i) :-\n  (send nil :working_ at \n    (lvar :job_id))) to_f "," working_ at  "," at  zero? ","  at  "]}," Status update_time":{"type":"method","name":"update_time","children":[],"call":["(or\n  (send nil :get\n    (lvar :job_id)\n    (sym :update_time))\n  (send\n    (const nil :Time) :now)) to_i ","Time  now "," get "]}," Status working_at":{"type":"method","name":"working_at","children":[],"call":["(or\n  (send nil :get\n    (lvar :job_id)\n    (sym :working_at))\n  (send\n    (const nil :Time) :now)) to_i ","Time  now "," get "]}," Worker working_at":{"type":"method","name":"working_at","children":[],"call":["Time  now to_i ","Time  now "]}}