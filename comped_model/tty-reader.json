{" TTY Reader windows?":{"type":"method","name":"windows?","children":[],"call":[" File ALT_SEPARATOR  == "]}," TTY Reader handle_interrupt":{"type":"method","name":"handle_interrupt","children":[],"call":[" raise ","@interrupt call "," exit ","Process  kill ","Process  pid "]}," TTY Reader trigger_key_event":{"type":"method","name":"trigger_key_event","children":[],"call":[" trigger ","event key name ","event key ","event trigger? ","KeyEvent  from "," console keys "," console ","KeyEvent  from  key name ","KeyEvent  from  key ","KeyEvent  from  trigger? "]}," TTY Reader inspect":{"type":"method","name":"inspect","children":[],"call":[" output "," input "," class "]}," TTY Reader history_previous":{"type":"method","name":"history_previous","children":[],"call":["@history previous ","@history get "]}," TTY Reader history_previous?":{"type":"method","name":"history_previous?","children":[],"call":["@history previous? "]}," TTY Reader history_next":{"type":"method","name":"history_next","children":[],"call":["@history get ","@history next "]}," TTY Reader history_next?":{"type":"method","name":"history_next?","children":[],"call":["@history next? "]}," TTY Reader add_to_history":{"type":"method","name":"add_to_history","children":[],"call":["@history push "]}," TTY Reader keyctrl_d":{"type":"method","name":"keyctrl_d","children":[],"call":[]}," TTY Reader trigger":{"type":"method","name":"trigger","children":[],"call":[" publish "]}," TTY Reader read_multiline":{"type":"method","name":"read_multiline","children":[],"call":["lines << ","line to_s empty? ","line to_s "," block_given? ","@stop ! ","line !~ ","line == ","line ! "," read_line "," loop ","value empty? "," read_line s << "," read_line  to_s empty? "," read_line  to_s "," read_line  !~ "," read_line  == "," read_line  ! "," read_ read_line  "]}," TTY Reader read_line":{"type":"method","name":"read_line","children":[],"call":["line to_s "," add_to_history ","line to_s rstrip "," track_history? "," output print ","  + ","line start? "," output ","opts [] ","BACKSPACE  == "," console keys [] == "," console keys [] "," console keys "," console ","code == ","line size - ","line cursor ","line size ","line end? ! ","line end? ","line move_to_start ","char == ","prompt + ","line insert ","line move_to_end ","line right ","line left ","line replace "," history_next "," history_next? "," history_previous "," history_previous? ","ctrls include? "," console keys key ","(send\n  (send\n    (send nil :console) :keys) :[]\n  (sym :ctrl_d)) include? ","line delete ","DELETE  == "," trigger_key_event ","codes pack ","codes [] "," get_codes "," unbufferred "," console keys keys grep "," console keys keys ","Line  new ","(pair\n  (sym :echo)\n  (true)) merge ","args pop ","args empty? ","args last respond_to? ","args last ","line text ","line text rstrip "," output puts ","(const nil :CARRIAGE_RETURN) include? "," cursor backward ","line text_size - ","line text_size "," cursor "," console keys [] to_s =~ "," console keys [] to_s ","line start? ! "," clear_display ","(sym :ctrl_d) include? ","line prompt ","TTY Screen  width ","options fetch ","EXIT_KEYS  include? ","Line  new  to_s ","Line  new  to_s rstrip ","Line  new  start? ","(pair\n  (sym :echo)\n  (true)) merge  [] ","codes []  == ","Line  new  size - ","Line  new  cursor ","Line  new  size ","Line  new  end? ! ","Line  new  end? ","Line  new  move_to_start ","codes pack  == ","args pop  + ","Line  new  insert ","Line  new  move_to_end ","Line  new  right ","Line  new  left ","Line  new  replace "," console keys keys grep  include? ","Line  new  delete ","codes [] s pack "," get_codes  pack ","codes [] s [] "," get_codes  [] "," get_codes [] s "," get_ get_codes  "," unline text red ","Line  new  text ","Line  new  text rstrip ","Line  new  text_size - ","Line  new  text_size ","Line  new  start? ! ","Line  new  prompt ","line args pop  ","args pop  fetch "]}," TTY Reader get_codes":{"type":"method","name":"get_codes","children":[],"call":[" get_codes "," console escape_codes any? "," console escape_codes "," console ","(irange\n  (int 64)\n  (int 126)) include? ! ","(irange\n  (int 64)\n  (int 126)) include? ","codes last ","(send\n  (lvar :escape) :-\n  (lvar :codes)) empty? ","escape - ","(send\n  (lvar :codes) :-\n  (lvar :escape)) empty? ","codes - "," proc ","codes << ","char ord ","char nil? "," handle_interrupt ","char == "," console keys [] "," console keys "," console get_char ","(pair\n  (sym :echo)\n  (true)) merge ","(irange\n  (int 64)\n  (int 126)) cover? ! ","(irange\n  (int 64)\n  (int 126)) cover? "," console keys [] == ","char_codes nil? ","options merge "," console get_char  ord "," console get_char  nil? "," console get_char  == "," console get_ console get_char  "," console get_char _codes nil? "," get_codes  nil? "]}," TTY Reader read_keypress":{"type":"method","name":"read_keypress","children":[],"call":[" trigger_key_event ","codes pack "," get_codes "," unbufferred ","(pair\n  (sym :echo)\n  (false)) merge "]}," TTY Reader unbufferred":{"type":"method","name":"unbufferred","children":[],"call":[" output sync= "," output ","block [] "," block_given? "," output sync "]}," TTY Reader select_console":{"type":"method","name":"select_console","children":[],"call":["Console  new ","WinConsole  new "," env [] ! "," env [] "," env "," windows? "," class windows? "," class "]}," TTY Reader initialize":{"type":"method","name":"initialize","children":[],"call":[" subscribe ","h exclude= ","line strip == ","line strip "," proc ","h duplicates= ","History  new "," select_console ","options fetch ","h cycle= "," input "," lambda "]}," TTY Reader WinAPI kbhit":{"type":"method","name":"kbhit","children":[],"call":["@@kbhit call ","Fiddle Function  new ","CRT_HANDLE  [] "]}," TTY Reader WinAPI getche":{"type":"method","name":"getche","children":[],"call":["@@getche call ","Fiddle Function  new ","CRT_HANDLE  [] "]}," TTY Reader WinAPI getch":{"type":"method","name":"getch","children":[],"call":["@@getch call ","Fiddle Function  new ","CRT_HANDLE  [] "]}," TTY Reader Mode raw":{"type":"method","name":"raw","children":[],"call":["@input raw ","@input tty? "]}," TTY Reader Mode echo":{"type":"method","name":"echo","children":[],"call":["@input noecho ","@input tty? ! ","@input tty? "]}," TTY Reader Mode initialize":{"type":"method","name":"initialize","children":[],"call":[]}," TTY Reader Line remove":{"type":"method","name":"remove","children":[],"call":["@text slice! "," left "]}," TTY Reader Line delete":{"type":"method","name":"delete","children":[],"call":["@text slice! "]}," TTY Reader Line <<":{"type":"method","name":"<<","children":[],"call":["@text << "]}," TTY Reader Line insert":{"type":"method","name":"insert","children":[],"call":[" []= "]}," TTY Reader Line replace":{"type":"method","name":"replace","children":[],"call":["@text length "," replace_mode "]}," TTY Reader Line []":{"type":"method","name":"[]","children":[],"call":["@text [] "]}," TTY Reader Line []=":{"type":"method","name":"[]=","children":[],"call":["i + ","chars length ","before_text + + ","before_text + ","i > ","@text length - ","@text length ","@text [] dup ","@text [] ","i - ","after_text length ","  * ","@text dup ","i == ","i <= ","@text []= ","i is_a? "," edit_mode ","@text [] dup  + + ","@text dup  + + ","@text [] dup  + ","@text dup  + ","before_text + +  length - ","before_text + +  length ","before_text + +  [] dup ","before_text + +  [] ","@text [] dup  length ","  *  length ","@text dup  length ","before_text + +  dup ","before_text + +  []= "]}," TTY Reader Line move_to_end":{"type":"method","name":"move_to_end","children":[],"call":["@text length "]}," TTY Reader Line move_to_start":{"type":"method","name":"move_to_start","children":[],"call":[]}," TTY Reader Line right":{"type":"method","name":"right","children":[],"call":["(send\n  (ivar :@text) :length) min ","@cursor + ","@text length ","(send\n  (ivar :@text) :length) min  + "]}," TTY Reader Line left":{"type":"method","name":"left","children":[],"call":["(int 0) max ","@cursor - ","(int 0) max  - "]}," TTY Reader Line end?":{"type":"method","name":"end?","children":[],"call":["@cursor == ","@text length "]}," TTY Reader Line start?":{"type":"method","name":"start?","children":[],"call":["@cursor == ","@cursor zero? "]}," TTY Reader Line initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? ","(int 0) max ","@text length ","text dup ","prompt dup ","text dup  length "]}," TTY Reader KeyEvent trigger?":{"type":"method","name":"trigger?","children":[],"call":[" key name nil? ! "," key name nil? "," key name "," key "," key nil? ! "," key nil? "]}," TTY Reader KeyEvent from":{"type":"method","name":"from","children":[],"call":[]}," TTY Reader Key initialize":{"type":"method","name":"initialize","children":[],"call":[]}," TTY Reader History clear":{"type":"method","name":"clear","children":[],"call":["@history clear "]}," TTY Reader History get":{"type":"method","name":"get","children":[],"call":[" [] "," size zero? "," size "]}," TTY Reader History []":{"type":"method","name":"[]","children":[],"call":["line dup "," raise ","line nil? ","@history [] ","@history size ","index < ","@history []  dup ","@history []  nil? "]}," TTY Reader History previous?":{"type":"method","name":"previous?","children":[],"call":["(and\n  (send\n    (ivar :@index) :<\n    (int 0))\n  (send\n    (ivar :@cycle) :!)) ! ","@cycle ! ","@index < "," size > "," size "]}," TTY Reader History previous":{"type":"method","name":"previous","children":[],"call":[" size - "," size ","@index zero? "," size zero? "," size -  zero? "]}," TTY Reader History next?":{"type":"method","name":"next?","children":[],"call":["(and\n  (send\n    (ivar :@index) :==\n    (send\n      (send nil :size) :-\n      (int 1)))\n  (send\n    (ivar :@cycle) :!)) ! ","@cycle ! ","@index == "," size - "," size "," size > "]}," TTY Reader History next":{"type":"method","name":"next","children":[],"call":["@index == "," size - "," size "," size zero? "]}," TTY Reader History push":{"type":"method","name":"push","children":[],"call":["@history size - ","@history size ","@history << ","@history shift "," size >= "," max_size "," size ","@exclude [] ","line to_s empty? ","line to_s ","@history delete "]}," TTY Reader History each":{"type":"method","name":"each","children":[],"call":["@history to_enum ","@history each "," block_given? "]}," TTY Reader History initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? ","options fetch "," proc "]}," TTY Reader Console get_char":{"type":"method","name":"get_char","children":[],"call":[" input getc "," input "," mode echo ","options [] "," mode "," mode raw "," input read_nonblock "," input wait_readable "]}," TTY Reader Console initialize":{"type":"method","name":"initialize","children":[],"call":["CSI  bytes to_a ","CSI  bytes ","ESC  ord ","Codes  keys ","Mode  new ","Keys  ctrl_keys merge ","Keys  keys ","Keys  ctrl_keys "]}," TTY Reader count_screen_lines":{"type":"method","name":"count_screen_lines","children":[],"call":["1 + ","(int 0) max ","(send\n  (lvar :line_size) :-\n  (lvar :new_chars)) / ","line_size - "," class windows? "," class ","Line  sanitize size ","Line  sanitize ","line_or_size is_a? ","(send\n  (lvar :Line  sanitize size ) :-\n  (lvar :new_chars)) / ","Line  sanitize size  - "]}," TTY Reader clear_display":{"type":"method","name":"clear_display","children":[],"call":[" output print "," cursor clear_lines "," cursor "," output "," cursor down ","lines_down zero? ","total_lines - "," count_screen_lines ","line prompt_size + ","line cursor ","line prompt_size ","line size ","total_lines -  zero? "," count_screen_lines  - "]}," TTY Reader Line size":{"type":"method","name":"size","children":[],"call":[" prompt_size + "," text_size "," prompt_size "]}," TTY Reader Line text_size":{"type":"method","name":"text_size","children":[],"call":[" class sanitize size "," class sanitize "," class "]}," TTY Reader Line prompt_size":{"type":"method","name":"prompt_size","children":[],"call":[" class sanitize size "," class sanitize "," class ","p join length + ","(send\n  (send\n    (lvar :p) :length) :-\n  (int 1)) * ","TTY Screen  width ","p length - ","p length ","p join length ","p join "," class sanitize split "," class sanitize split  join length + ","(send\n  (send\n    (lvar : class sanitize split ) :length) :-\n  (int 1)) * "," class sanitize split  length - "," class sanitize split  length "," class sanitize split  join length "," class sanitize split  join "," class sanitize s class sanitize split lit "]}," TTY Reader Line to_s":{"type":"method","name":"to_s","children":[],"call":[]}," TTY Reader Line replace_mode":{"type":"method","name":"replace_mode","children":[],"call":[]}," TTY Reader Line replacing?":{"type":"method","name":"replacing?","children":[],"call":["@mode == "]}," TTY Reader Line edit_mode":{"type":"method","name":"edit_mode","children":[],"call":[]}," TTY Reader Line editing?":{"type":"method","name":"editing?","children":[],"call":["@mode == "]}," TTY Reader Line sanitize":{"type":"method","name":"sanitize","children":[],"call":[]}," TTY Reader unsubscribe":{"type":"method","name":"unsubscribe","children":[],"call":["registry delete ","object listener equal? ","object listener ","registry each "," send "," send  delete "," send  each "]}," TTY Reader subscribe":{"type":"method","name":"subscribe","children":[],"call":[" unsubscribe "," block_given? "," old_subcribe "]}}