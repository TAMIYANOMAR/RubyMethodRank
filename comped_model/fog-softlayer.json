{" Fog Compute Softlayer Real create_vms":{"type":"method","name":"create_vms","children":[],"call":[" request "," raise ","opts kind_of? "]}," Fog Compute Softlayer Mock create_vms":{"type":"method","name":"create_vms","children":[],"call":["response body= ","required join ","response status= ","result []= ","vm [] ","fields reduce ","opts each_with_index map ","opts each_with_index ","Fog Softlayer  mock_global_identifier ","Fog Softlayer  mock_vm_id ","Time  now iso8601 ","Time  now ","Fog Softlayer  mock_account_id "," raise ","Fog Softlayer  valid_request? ","opts each ","Excon Response  new ","opts kind_of? ","@virtual_guests push flatten! ","@virtual_guests push ","response body ","fields deep_merge ","Fog Softlayer  stringify_keys ","opts first ","opts map ","Fog Mock  random_ip ","Excon Response  new  body= ","Excon Response  new  status= ","Excon Response  new  body "]}," Fog Compute Softlayer Real create_vm":{"type":"method","name":"create_vm","children":[],"call":[" create_vms "," raise ","opts kind_of? "]}," Fog Compute Softlayer Mock create_vm":{"type":"method","name":"create_vm","children":[],"call":[" create_vms "," raise ","opts kind_of? "]}," Fog Compute Softlayer Real create_bare_metal_server":{"type":"method","name":"create_bare_metal_server","children":[],"call":[" request "," raise ","opts kind_of? "]}," Fog Compute Softlayer Mock create_bare_metal_server":{"type":"method","name":"create_bare_metal_server","children":[],"call":["response body= ","required join ","response status= ","Fog Softlayer  mock_global_identifier ","Fog Softlayer  mock_vm_id ","Time  now iso8601 ","Time  now ","Fog Softlayer  mock_account_id "," raise ","Fog Softlayer  valid_request? ","Excon Response  new ","opts kind_of? ","@bare_metal_servers push flatten! ","@bare_metal_servers push ","response body ","Fog Mock  random_ip ","Excon Response  new  body= ","Excon Response  new  status= ","Excon Response  new  body "]}," Fog Softlayer valid_request?":{"type":"method","name":"valid_request?","children":[],"call":[]}," Fog Softlayer mock_global_identifier":{"type":"method","name":"mock_global_identifier","children":[],"call":[]}," Fog Softlayer mock_vm_id":{"type":"method","name":"mock_vm_id","children":[],"call":[]}," Fog Softlayer mock_account_id":{"type":"method","name":"mock_account_id","children":[],"call":[]}," Fog Softlayer load_requests":{"type":"method","name":"load_requests","children":[],"call":[]}," String underscore":{"type":"method","name":"underscore","children":[],"call":[" gsub gsub gsub tr downcase "," gsub gsub gsub tr "," gsub gsub gsub "," gsub gsub "," gsub "]}," String camelize":{"type":"method","name":"camelize","children":[],"call":["(send\n  (send\n    (self) :split\n    (str \"_\")) :inject\n  (array)) join ","buffer push ","e capitalize ","buffer empty? "," split inject "," split "]}," Fog Compute Softlayer Real user_agent_header":{"type":"method","name":"user_agent_header","children":[],"call":[]}," Fog Compute Softlayer Real set_sl_path":{"type":"method","name":"set_sl_path","children":[],"call":["path to_s underscore camelize ","path to_s underscore ","path to_s ","path to_s underscore camelize  to_s underscore camelize ","path to_s underscore camelize  to_s underscore ","path to_s underscore camelize  to_s "]}," Fog Compute Softlayer Real set_sl_service":{"type":"method","name":"set_sl_service","children":[],"call":["SoftLayer_ << ","(send\n  (send\n    (send\n      (send\n        (lvar :service) :to_s) :gsub\n      (regexp\n        (str \"^softlayer_\")\n        (regopt :i))\n      (str \"\")) :split\n    (str \"_\")) :map) join ","i capitalize ","service to_s gsub split map ","service to_s gsub split ","service to_s gsub ","service to_s ","(send\n  (send\n    (send\n      (send\n        (lvar :SoftLayer_ << ) :to_s) :gsub\n      (regexp\n        (str \"^softlayer_\")\n        (regopt :i))\n      (str \"\")) :split\n    (str \"_\")) :map) join ","SoftLayer_ <<  to_s gsub split map ","SoftLayer_ <<  to_s gsub split ","SoftLayer_ <<  to_s gsub ","SoftLayer_ <<  to_s "]}," Fog Compute Softlayer Real credentialize_url":{"type":"method","name":"credentialize_url","children":[],"call":[]}," Fog Compute Softlayer Real request":{"type":"method","name":"request","children":[],"call":["response body= ","Fog JSON  decode ","response body ","@connection request ","Fog Core Connection  new ","params []= ","Fog JSON  encode ","options [] ","options [] nil? ","params [] []= ","params [] "," user_agent_header "," set_sl_path "," set_sl_service "," credentialize_url ","@credentials [] ","Fog Softlayer Slapi  slapi_request ","(pair\n  (sym :username)\n  (ivar :@softlayer_username)) merge ","@connection request  body= ","@connection request  body ","Fog Core Connection  new  request ","(pair\n  (sym :username)\n  (ivar :@softlayer_username)) merge  [] ","(pair\n  (sym :username)\n  (ivar :@softlayer_username)) merge  [] nil? "]}," Fog Compute Softlayer Mock _request":{"type":"method","name":"_request","children":[],"call":[" raise "]}," Fog Compute Softlayer Mock request_access_token":{"type":"method","name":"request_access_token","children":[],"call":[" _request "]}," Fog Compute Softlayer Mock request":{"type":"method","name":"request","children":[],"call":[" _request "]}," Fog Softlayer Compute Shared valid_request?":{"type":"method","name":"valid_request?","children":[],"call":[]}," Fog Softlayer Compute Shared initialize":{"type":"method","name":"initialize","children":[],"call":["options [] "]}," Fog Compute Softlayer Real get_vms":{"type":"method","name":"get_vms","children":[],"call":[" request "]}," Fog Compute Softlayer Mock get_vms":{"type":"method","name":"get_vms","children":[],"call":["response status= ","response body= ","Excon Response  new ","Excon Response  new  status= ","Excon Response  new  body= "]}," Fog Compute Softlayer Real get_vm":{"type":"method","name":"get_vm","children":[],"call":[" request "]}," Fog Compute Softlayer Mock get_vm":{"type":"method","name":"get_vm","children":[],"call":["response status= ","response body= ","(send\n  (ivar :@virtual_guests) :map) compact reduce ","(send\n  (ivar :@virtual_guests) :map) compact ","vm [] == ","vm [] ","@virtual_guests map ","Excon Response  new ","response status == ","response status ","response body empty? ","response body ","(send\n  (ivar :@virtual_guests) :map) compact first ","identifier to_s ","Excon Response  new  status= ","Excon Response  new  body= ","Excon Response  new  status == ","Excon Response  new  status ","Excon Response  new  body empty? ","Excon Response  new  body "]}," Fog Compute Softlayer Real get_bare_metal_servers":{"type":"method","name":"get_bare_metal_servers","children":[],"call":[" request "]}," Fog Compute Softlayer Mock get_bare_metal_servers":{"type":"method","name":"get_bare_metal_servers","children":[],"call":["response status= ","response body= ","Excon Response  new ","Excon Response  new  status= ","Excon Response  new  body= "]}," Fog Compute Softlayer Real get_bare_metal_server":{"type":"method","name":"get_bare_metal_server","children":[],"call":[" request "]}," Fog Compute Softlayer Mock get_bare_metal_server":{"type":"method","name":"get_bare_metal_server","children":[],"call":["response status= ","response body= ","(send\n  (ivar :@bare_metal_servers) :map) compact reduce ","(send\n  (ivar :@bare_metal_servers) :map) compact ","vm [] == ","vm [] ","@bare_metal_servers map ","Excon Response  new ","response status == ","response status ","response body empty? ","response body ","(send\n  (ivar :@bare_metal_servers) :map) compact first ","identifier to_s ","Excon Response  new  status= ","Excon Response  new  body= ","Excon Response  new  status == ","Excon Response  new  status ","Excon Response  new  body empty? ","Excon Response  new  body "]}," Fog Compute Softlayer Real delete_vm":{"type":"method","name":"delete_vm","children":[],"call":[" request ","id to_s "]}," Fog Compute Softlayer Mock delete_vm":{"type":"method","name":"delete_vm","children":[],"call":["response status= ","response body= ","Fog JSON  encode ","response body ","(send\n  (send\n    (send\n      (self) :get_vms) :body) :map) include? ","server [] "," get_vms body map "," get_vms body "," get_vms ","Excon Response  new ","Excon Response  new  status= ","Excon Response  new  body= ","Excon Response  new  body "]}," Fog Compute Softlayer Real delete_bare_metal_server":{"type":"method","name":"delete_bare_metal_server","children":[],"call":[" request ","id to_s "]}," Fog Compute Softlayer Mock delete_bare_metal_server":{"type":"method","name":"delete_bare_metal_server","children":[],"call":["response status= ","response body= ","Fog JSON  encode ","response body ","(send\n  (send\n    (send\n      (self) :get_bare_metal_servers) :body) :map) include? ","server [] "," get_bare_metal_servers body map "," get_bare_metal_servers body "," get_bare_metal_servers ","Excon Response  new ","Excon Response  new  status= ","Excon Response  new  body= ","Excon Response  new  body "]}," Fog Compute Softlayer Servers bootstrap":{"type":"method","name":"bootstrap","children":[],"call":[" ready? ","server wait_for "," service create "," service "," service create  wait_for "]}," Fog Compute Softlayer Servers get":{"type":"method","name":"get","children":[],"call":[" new merge_attributes "," new ","response body "," service get_bare_metal_server "," service ","response status == ","response status "," service get_vm ","identifier == ","identifier nil? ","response body []= ","id == ","id nil? ","data []= "," service get_bare_metal_server  body "," service get_vm  body "," service get_bare_metal_server  status == "," service get_vm  status == "," service get_bare_metal_server  status "," service get_vm  status "," service get_bare_metal_server  body []= "," service get_vm  body []= ","response body  []= "]}," Fog Compute Softlayer Servers all":{"type":"method","name":"all","children":[],"call":[" load "," service list_servers "," service "]}," Fog Compute Softlayer Server set_defaults":{"type":"method","name":"set_defaults","children":[],"call":[" attributes []= "," service default_domain "," service "," attributes "," attributes [] nil? "," attributes [] "," datacenter= "," service softlayer_default_datacenter "," service softlayer_default_domain "]}," Fog Compute Softlayer Server validate_attributes":{"type":"method","name":"validate_attributes","children":[],"call":[" raise "," image_id "," bare_metal? "," requires_one "," requires "," attributes [] nil? "," attributes [] "," attributes "]}," Fog Compute Softlayer Server extract_flavor":{"type":"method","name":"extract_flavor","children":[],"call":[" attributes []= "," attributes [] / "," attributes [] "," attributes "," attributes [] > ","flavor disk first [] [] < ","flavor disk first [] [] ","flavor disk first [] ","flavor disk first ","flavor disk "," bare_metal? ","flavor ram ","flavor cpu ","Fog Errors Error  new "," __method__ "," class ","flavor nil? ","@service flavors get ","@service flavors ","@service flavors get  disk first [] [] < ","@service flavors get  disk first [] [] ","@service flavors get  disk first [] ","@service flavors get  disk first ","@service flavors get  disk ","@service flavors get  ram ","@service flavors get  cpu ","@service flavors get  nil? ","@service @service flavors get s get ","@service @service flavors get s "]}," Fog Compute Softlayer Server clean_attributes":{"type":"method","name":"clean_attributes","children":[],"call":[" attributes delete "," attributes "," bare_metal? "]}," Fog Compute Softlayer Server attributes_mapping":{"type":"method","name":"attributes_mapping","children":[],"call":["common merge "," bare_metal? "]}," Fog Compute Softlayer Server pre_save":{"type":"method","name":"pre_save","children":[],"call":[" clean_attributes "," remap_attributes "," attributes_mapping "," attributes "," validate_attributes "," extract_flavor "," attributes []= "," private_vlan id "," private_vlan "," vlan id "," vlan ","key id "," attributes [] map! "," attributes [] "," key_pairs "," network_components= ","component []= ","component delete ","component [] "," network_components map "," network_components "," attributes delete "," attributes [] is_a? "," bare_metal= "," bare_metal? ! "," bare_metal? ","key respond_to? "]}," Fog Compute Softlayer Server save":{"type":"method","name":"save","children":[],"call":[" merge_attributes ","data first "," service create_vm body "," service create_vm "," attributes "," service "," pre_save "," service create_bare_metal_server body "," service create_bare_metal_server "," bare_metal? "," raise ","Fog Errors Error  new "," persisted? "," service create_vm body first ","copy attributes ","copy pre_save "," dup ","data delete ","copy bare_metal? "," service create_vm body first  first "," service create_bare_metal_server body  first "," dup  attributes "," dup  pre_save "," service create_vm body first  delete "," service create_bare_metal_server body  delete "," dup  bare_metal? "]}," Fog Compute Softlayer Server ready?":{"type":"method","name":"ready?","children":[],"call":[" state == "," state "," bare_metal? "," active_transaction "]}," Fog Compute Softlayer Server state":{"type":"method","name":"state","children":[],"call":[" service request body [] "," service request body "," service request "," id "," service "," bare_metal? "]}," Fog Compute Softlayer Server dns_name":{"type":"method","name":"dns_name","children":[],"call":[" fqdn "]}," Fog Compute Softlayer Server destroy":{"type":"method","name":"destroy","children":[],"call":["response body "," service send "," id "," service "," bare_metal? "," requires "," service send  body "]}," Fog Compute Softlayer Server shutdown":{"type":"method","name":"shutdown","children":[],"call":[" service power_off_vm "," id "," service "," raise ","Fog Errors Error  new "," bare_metal? "," requires "]}," Fog Compute Softlayer Server stop":{"type":"method","name":"stop","children":[],"call":[" service power_off_vm "," id "," service "," service power_off_bare_metal_server "," bare_metal? "," requires "]}," Fog Compute Softlayer Server start":{"type":"method","name":"start","children":[],"call":[" service power_on_vm "," id "," service "," service power_on_bare_metal_server "," bare_metal? "," requires "]}," Fog Compute Softlayer Server reboot":{"type":"method","name":"reboot","children":[],"call":[" service reboot_vm "," id "," service "," service reboot_bare_metal_server "," bare_metal? "," requires "]}," Fog Compute Softlayer Server snapshot":{"type":"method","name":"snapshot","children":[],"call":[]}," Fog Compute Softlayer Server name":{"type":"method","name":"name","children":[],"call":[" attributes [] "," attributes "]}," Fog Compute Softlayer Server name=":{"type":"method","name":"name=","children":[],"call":[" attributes []= "," attributes "]}," Fog Compute Softlayer Server ram=":{"type":"method","name":"ram=","children":[],"call":[" attributes []= "," attributes ","1024 * ","set first [] [] to_i ","set first [] [] ","set first [] ","set first ","set is_a? ","1024 *  first [] [] to_i ","1024 *  first [] [] ","1024 *  first [] ","1024 *  first ","1024 *  is_a? "]}," Fog Compute Softlayer Server image_id":{"type":"method","name":"image_id","children":[],"call":[" attributes [] [] "," attributes [] "," attributes "," attributes [] nil? "]}," Fog Compute Softlayer Server image_id=":{"type":"method","name":"image_id=","children":[],"call":[" attributes []= "," attributes "]}," Fog Compute Softlayer Server bare_metal":{"type":"method","name":"bare_metal","children":[],"call":[" attributes [] === "," attributes [] "," attributes "]}," Fog Compute Softlayer Server bare_metal=":{"type":"method","name":"bare_metal=","children":[],"call":[" attributes []= "," raise ","set class "," attributes ","@bare_metal nil? ","set == "]}," Fog Compute Softlayer Server bare_metal?":{"type":"method","name":"bare_metal?","children":[],"call":[" bare_metal "]}," Fog Compute Softlayer Server initialize":{"type":"method","name":"initialize","children":[],"call":[" set_defaults "," raise ","attributes [] nil? ","attributes [] "]}," Fog Compute Softlayer Images get":{"type":"method","name":"get","children":[],"call":["image id == ","image id "," class new all detect "," class new all "," class new "," service "," class "]}," Fog Compute Softlayer Images all":{"type":"method","name":"all","children":[],"call":[" load "," service request body "," service request "," service "]}," Fog Compute Softlayer Flavors get":{"type":"method","name":"get","children":[],"call":["flavor id == ","flavor id "," class new all detect "," class new all "," class new "," service "," class "]}," Fog Compute Softlayer Flavors all":{"type":"method","name":"all","children":[],"call":[" load "]}," Fog Softlayer loader":{"type":"method","name":"loader","children":[],"call":[]}," Fog Compute Softlayer Real list_servers":{"type":"method","name":"list_servers","children":[],"call":["(send\n  (send\n    (send\n      (self) :get_vms) :body) :<<\n  (send\n    (send\n      (self) :get_bare_metal_servers) :body)) flatten "," get_vms body << "," get_bare_metal_servers body "," get_bare_metal_servers "," get_vms body "," get_vms ","(send\n  (send\n    (send\n      (self) :get_vms) :body) :<<\n  (block\n    (send\n      (send\n        (send\n          (self) :get_bare_metal_servers) :body) :map)\n    (args\n      (arg :s))\n    (begin\n      (send\n        (lvar :s) :[]=\n        (str \"bare_metal\")\n        (true))\n      (lvar :s)))) flatten ","s []= "," get_bare_metal_servers body map ","(send\n  (block\n    (send\n      (send\n        (send\n          (self) :get_vms) :body) :map)\n    (args\n      (arg :s))\n    (begin\n      (send\n        (lvar :s) :[]=\n        (str \"bare_metal\")\n        (false))\n      (lvar :s))) :<<\n  (block\n    (send\n      (send\n        (send\n          (self) :get_bare_metal_servers) :body) :map)\n    (args\n      (arg :s))\n    (begin\n      (send\n        (lvar :s) :[]=\n        (str \"bare_metal\")\n        (true))\n      (lvar :s)))) flatten ","(send\n  (send\n    (send\n      (self) :get_vms) :body) :map) << "," get_vms body map "]}," Fog Compute Softlayer Mock list_servers":{"type":"method","name":"list_servers","children":[],"call":["(send\n  (send\n    (send\n      (self) :get_vms) :body) :<<\n  (send\n    (send\n      (self) :get_bare_metal_servers) :body)) flatten "," get_vms body << "," get_bare_metal_servers body "," get_bare_metal_servers "," get_vms body "," get_vms ","(send\n  (lvar :vms) :<<\n  (lvar :bare_metals)) flatten ","vms << ","server []= ","bare_metals map! ","vms map! ","(send\n  (send\n    (send\n      (self) :get_ get_vms body ) :body) :<<\n  (send\n    (send\n      (self) :get_bare_metal_servers) :body)) flatten "," get_ get_vms body  body << "," get_ get_vms body  body "," get_ get_vms body  ","(send\n  (lvar :vms) :<<\n  (lvar : get_bare_metal_servers body )) flatten ","(send\n  (lvar : get_vms body ) :<<\n  (lvar :bare_metals)) flatten "," get_vms body  << "," get_bare_metal_servers body  map! "," get_vms body  map! "]}," Fog Compute Softlayer Mock initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Fog Storage Softlayer Memory Analyzer visit":{"type":"method","name":"visit","children":[],"call":[" block_given? ","@result objects ","@result bytes ","@objs []= ","@result loops ","@objs has_key? ","obj object_id ","obj object_obj object_id  "]}," Fog Storage Softlayer Memory Analyzer analyze":{"type":"method","name":"analyze","children":[],"call":["queue push ","obj instance_variable_get ","@result bytes ","obj instance_variables each ","obj instance_variables "," visit ","obj each ","queue push push ","obj size * * ","obj size * ","obj size ","queue concat ","queue shift ","queue empty? "," roots dup "," roots ","MemoryInfo  new "," roots dup  push ","queue shift  instance_variable_get ","MemoryInfo  new  bytes ","queue shift  instance_variables each ","queue shift  instance_variables ","queue shift  each "," roots dup  push push ","queue shift  size * * ","queue shift  size * ","queue shift  size "," roots dup  concat "," roots dup  shift "," roots dup  empty? "]}," Fog Storage Softlayer Memory analyze":{"type":"method","name":"analyze","children":[],"call":[]}," Fog Storage Softlayer Real requires_auth?":{"type":"method","name":"requires_auth?","children":[],"call":["(send\n  (send\n    (ivar :@auth_expires) :to_i) :-\n  (send\n    (send\n      (const nil :Time) :now) :to_i)) < ","@auth_expires to_i - ","Time  now to_i ","Time  now ","@auth_expires to_i ","@auth_expires ! ","@auth_token ! "]}," Fog Storage Softlayer Real get_temp_url_key_for_account":{"type":"method","name":"get_temp_url_key_for_account","children":[],"call":[" request headers [] "," request headers "," request "]}," Fog Storage Softlayer Real default_storage_account":{"type":"method","name":"default_storage_account","children":[],"call":["(send\n  (send\n    (lvar :slapi) :body) :map) first ","store [] ","slapi body map ","slapi body ","slapi body instance_of? ","Fog Compute  [] request ","Fog Compute  [] ","Fog Compute  new request ","Fog Compute  new ","(send\n  (send\n    (lvar :Fog Compute  [] request ) :body) :map) first ","(send\n  (send\n    (lvar :Fog Compute  new request ) :body) :map) first ","Fog Compute  [] request  body map ","Fog Compute  new request  body map ","Fog Compute  [] request  body ","Fog Compute  new request  body ","Fog Compute  [] request  body instance_of? ","Fog Compute  new request  body instance_of? "]}," Fog Storage Softlayer Real authenticate":{"type":"method","name":"authenticate","children":[],"call":["uri scheme ","uri port ","@path sub! ","uri path ","uri host ","URI  parse ","response headers [] ","response headers ","Time  now + ","response headers [] to_i ","Time  now "," raise ","Fog Errors Error  new ","response status between? ","response status ","connection request ","Fog Core Connection  new "," _auth_headers "," auth_url "," requires_auth? ","URI  parse  scheme ","URI  parse  port ","uri path  sub! ","URI  parse  path ","URI  parse  host ","connection request  headers [] ","connection request  headers ","connection request  headers [] to_i ","connection request  status between? ","connection request  status ","Fog Core Connection  new  request "]}," Fog Storage Softlayer Real _headers":{"type":"method","name":"_headers","children":[],"call":[]}," Fog Storage Softlayer Real _build_params":{"type":"method","name":"_build_params","children":[],"call":["output deep_merge "," _headers ","output []= ","(begin\n  (ivar :@path)) sub ","params delete ","params [] ","output deep_merge  deep_merge ","output deep_merge  []= "]}," Fog Storage Softlayer Real _auth_headers":{"type":"method","name":"_auth_headers","children":[],"call":["Basic  + ","Base64  strict_encode64 ","(begin\n  (ivar :@username)) + + ","(begin\n  (ivar :@username)) + "," puts ","@bluemix_objstor_auth_url nil? "]}," Fog Storage Softlayer Real request":{"type":"method","name":"request","children":[],"call":[" raise ","Fog Storage Softlayer NotFound  slurp ","response body= ","Fog JSON  decode ","response body ","response get_header =~ ","response get_header ","response body empty? ! ","response body empty? ","@connection request "," authenticate ","@auth_token ! ! ","@auth_token ! ","response status == ","response status "," _build_params "," class ","params is_a? ","@connection request  body= ","@connection request  body ","@connection request  get_header =~ ","@connection request  get_header ","@connection request  body empty? ! ","@connection request  body empty? ","@connection request  status == ","@connection request  status "," _build_ _build_params  "," _build_params  is_a? "]}," Fog Storage Softlayer Real reload":{"type":"method","name":"reload","children":[],"call":["@connection reset "]}," Fog Storage Softlayer Real auth_url":{"type":"method","name":"auth_url","children":[],"call":["@bluemix_objstor_auth_url nil? "]}," Fog Storage Softlayer Real initialize":{"type":"method","name":"initialize","children":[],"call":[" get_temp_url_key_for_account ","options [] ","Fog Core Connection  new "," authenticate "," default_storage_account "," validate_username! "]}," Fog Storage Softlayer Mock reset_account_name":{"type":"method","name":"reset_account_name","children":[],"call":[]}," Fog Storage Softlayer Mock change_account":{"type":"method","name":"change_account","children":[],"call":["@original_path split [] ","@original_path split "]}," Fog Storage Softlayer Mock reset_data":{"type":"method","name":"reset_data","children":[],"call":[" class data delete "," class data "," class "]}," Fog Storage Softlayer Mock data":{"type":"method","name":"data","children":[],"call":[" class data [] "," class data "," class "]}," Fog Storage Softlayer Mock initialize":{"type":"method","name":"initialize","children":[],"call":["options [] "," validate_username! "]}," Fog Storage Softlayer Mock reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Storage Softlayer Real put_static_obj_manifest":{"type":"method","name":"put_static_obj_manifest","children":[],"call":[" request ","Fog Softlayer  escape ","Fog JSON  encode "]}," Fog Storage Softlayer Real put_object_manifest":{"type":"method","name":"put_object_manifest","children":[],"call":[" put_dynamic_obj_manifest "]}," Fog Storage Softlayer Real put_object":{"type":"method","name":"put_object","children":[],"call":[" request ","params merge! ","Fog Softlayer  escape ","params [] ! ","params [] ","data [] ","data [] merge! ","Fog Storage  parse_data "," block_given? ","Fog Storage  parse_data  [] ","Fog Storage  parse_data  [] merge! ","Fog Storage  parse_Fog Storage  parse_data  "]}," Fog Storage Softlayer Mock put_object":{"type":"method","name":"put_object","children":[],"call":["response headers= ","Time  now ","response status= ","response body= ","Excon Response  new ","@containers [] []= ","@containers [] ","Excon Response  new  headers= ","Excon Response  new  status= ","Excon Response  new  body= "]}," Fog Storage Softlayer Real put_dynamic_obj_manifest":{"type":"method","name":"put_dynamic_obj_manifest","children":[],"call":[" request ","(pair\n  (str \"X-Object-Manifest\")\n  (lvar :path)) merge ","Fog Softlayer  escape "]}," Fog Storage Softlayer Real put_container":{"type":"method","name":"put_container","children":[],"call":[" request ","Fog Softlayer  escape ","opts []= "]}," Fog Storage Softlayer Mock put_container":{"type":"method","name":"put_container","children":[],"call":["response status= ","response body= ","Excon Response  new ","@containers []= ","@containers [] ","Excon Response  new  status= ","Excon Response  new  body= "]}," Fog Storage Softlayer Real post_set_meta_temp_url_key":{"type":"method","name":"post_set_meta_temp_url_key","children":[],"call":[" request "," get_temp_url_key_for_account "]}," Fog Storage Softlayer Real head_object":{"type":"method","name":"head_object","children":[],"call":[" request ","Fog Softlayer  escape "]}," Fog Storage Softlayer Real head_containers":{"type":"method","name":"head_containers","children":[],"call":[" request "]}," Fog Storage Softlayer Real head_container":{"type":"method","name":"head_container","children":[],"call":[" request ","Fog Softlayer  escape "]}," Fog Storage Softlayer Real sig_to_hex":{"type":"method","name":"sig_to_hex","children":[],"call":["(send\n  (block\n    (send\n      (send\n        (lvar :str) :unpack\n        (str \"C*\")) :map)\n    (args\n      (arg :c))\n    (send\n      (lvar :c) :to_s\n      (int 16))) :map) join ","h size == ","h size ","(send\n  (send\n    (lvar :str) :unpack\n    (str \"C*\")) :map) map ","c to_s ","str unpack map ","str unpack "]}," Fog Storage Softlayer Real create_temp_url":{"type":"method","name":"create_temp_url","children":[],"call":["URI Generic  build to_s ","URI Generic  build ","URI  encode_www_form "," sig_to_hex ","hmac sign ","Fog HMAC  new ","Fog Softlayer  escape ","expires to_i "," raise ","ArgumentError  new ","allowed_methods join ","allowed_methods include? ","options [] ","@temp_url_key nil? ","  sig_to_hex _to_hex ","hmac  sig_to_hex n ","Fog HMAC  new  sign ","expires to_i  to_i "]}," Fog Storage Softlayer Real get_object_https_url":{"type":"method","name":"get_object_https_url","children":[],"call":[" create_temp_url ","options merge "]}," Fog Storage Softlayer Mock get_object_https_url":{"type":"method","name":"get_object_https_url","children":[],"call":[]}," Fog Storage Softlayer Real get_object":{"type":"method","name":"get_object","children":[],"call":[" request ","params []= "," block_given? ","Fog Softlayer  escape "]}," Fog Storage Softlayer Mock get_object":{"type":"method","name":"get_object","children":[],"call":["response headers= ","Time  now ","response status= ","response body= ","Excon Response  new ","@containers [] [] ","@containers [] ","Excon Response  new  headers= ","Excon Response  new  status= ","Excon Response  new  body= "]}," Fog Storage Softlayer Real get_containers":{"type":"method","name":"get_containers","children":[],"call":[" request ","(pair\n  (str \"format\")\n  (str \"json\")) merge! ","value nil? ","options reject "]}," Fog Storage Softlayer Mock _format_containers":{"type":"method","name":"_format_containers","children":[],"call":["meta bytes ","container length ","Memory  analyze ","containers map ","Memory  analyze  bytes "]}," Fog Storage Softlayer Mock get_containers":{"type":"method","name":"get_containers","children":[],"call":["response status= ","response body= "," _format_containers ","Excon Response  new ","Excon Response  new  status= ","Excon Response  new  body= "]}," Fog Storage Softlayer Real get_container":{"type":"method","name":"get_container","children":[],"call":[" request ","(pair\n  (str \"format\")\n  (str \"json\")) merge! ","Fog Softlayer  escape ","value nil? ","options reject "]}," Fog Storage Softlayer Mock get_container":{"type":"method","name":"get_container","children":[],"call":["response headers= ","Time  now ","response status= ","response body= ","Excon Response  new ","Memory  analyze bytes ","Memory  analyze ","Digest MD5  hexdigest ","object to_s ","object respond_to? ","@containers [] map ","@containers [] ","Excon Response  new  headers= ","Excon Response  new  status= ","Excon Response  new  body= "]}," Fog Storage Softlayer Real delete_static_large_object":{"type":"method","name":"delete_static_large_object","children":[],"call":["response body= ","Fog JSON  decode ","response body "," request ","Fog Softlayer  escape ","options merge "," request  body= "," request  body "]}," Fog Storage Softlayer Real delete_object":{"type":"method","name":"delete_object","children":[],"call":[" request ","Fog Softlayer  escape "]}," Fog Storage Softlayer Mock delete_object":{"type":"method","name":"delete_object","children":[],"call":["response status= ","response body= ","@containers [] [] nil? ","@containers [] [] ","@containers [] ","@containers [] nil? ","Excon Response  new ","Excon Response  new  status= ","Excon Response  new  body= "]}," Fog Storage Softlayer Real delete_multiple_objects":{"type":"method","name":"delete_multiple_objects","children":[],"call":["response body= ","Fog JSON  decode ","response body "," request ","options merge ","(send\n  (lvar :object_names) :map) join ","URI  encode ","object_names map "," request  body= ","response (send\n  (lvar :object_names) :map) join = "," request  body ","response (send\n  (lvar :object_names) :map) join  "]}," Fog Storage Softlayer Real delete_container":{"type":"method","name":"delete_container","children":[],"call":[" request ","Fog Softlayer  escape "]}," Fog Storage Softlayer Mock delete_container":{"type":"method","name":"delete_container","children":[],"call":["response status= ","response body= ","@containers [] length > ","@containers [] length ","@containers [] ","@containers [] nil? ","Excon Response  new ","Excon Response  new  status= ","Excon Response  new  body= "]}," Fog Storage Softlayer Real copy_object":{"type":"method","name":"copy_object","children":[],"call":[" request ","Fog Softlayer  escape ","(pair\n  (str \"X-Copy-From\")\n  (dstr\n    (str \"/\")\n    (begin\n      (lvar :source_container))\n    (str \"/\")\n    (begin\n      (lvar :source_object)))) merge "]}," Fog Storage Softlayer Mock copy_object":{"type":"method","name":"copy_object","children":[],"call":["response status= ","response body= ","@containers [] []= ","@containers [] [] ","@containers [] ","@containers [] nil? ","@containers [] [] nil? ","Excon Response  new ","Excon Response  new  status= ","Excon Response  new  body= "]}," Fog Storage Softlayer Files new":{"type":"method","name":"new","children":[],"call":["(pair\n  (sym :directory)\n  (send nil :directory)) merge! "," directory "," requires "]}," Fog Storage Softlayer Files head":{"type":"method","name":"head","children":[],"call":[" new ","data headers merge ","data headers "," service head_object "," directory key "," directory "," service "," requires "," service head_object  headers merge "," service head_object  headers "]}," Fog Storage Softlayer Files get_https_url":{"type":"method","name":"get_https_url","children":[],"call":[" service get_object_https_url "," directory key "," directory "," service "," requires "]}," Fog Storage Softlayer Files get_url":{"type":"method","name":"get_url","children":[],"call":["Fog Softlayer  escape "," directory public_url "," directory "," requires "]}," Fog Storage Softlayer Files get":{"type":"method","name":"get","children":[],"call":[" new ","data headers merge ","data body ","data headers "," service get_object "," directory key "," directory "," service "," requires "," service get_object  headers merge "," service get_object  body "," service get_object  headers "]}," Fog Storage Softlayer Files each":{"type":"method","name":"each","children":[],"call":["subset each_file_this_page ","subset all ","subset last key ","subset last ","subset length == ","subset limit ","subset length "," dup all "," dup "," block_given? ! "," block_given? ","subset all  each_file_this_page "," dup all  each_file_this_page ","subset all  all "," dup all  all ","subset all  last key "," dup all  last key ","subset all  last "," dup all  last ","subset all  length == "," dup all  length == ","subset all  limit "," dup all  limit ","subset all  length "," dup all  length "]}," Fog Storage Softlayer Files all":{"type":"method","name":"all","children":[],"call":[" load ","file attributes ","parent files map ","parent files "," directory collection get "," directory key "," directory "," directory collection "," merge_attributes ","(pair\n  (str \"limit\")\n  (send nil :limit)) merge! "," prefix "," path "," marker "," limit "," requires "," directory collection get  files map "," directory collection get  files "]}," Fog Storage Softlayer File update_attributes_from":{"type":"method","name":"update_attributes_from","children":[],"call":[" merge_attributes ","(str \"Content-Length\") include? ","data headers reject ","data headers "]}," Fog Storage Softlayer File metadata_prefix":{"type":"method","name":"metadata_prefix","children":[],"call":[]}," Fog Storage Softlayer File metadata_attribute?":{"type":"method","name":"metadata_attribute?","children":[],"call":["key to_s =~ "," metadata_prefix ","key to_s "]}," Fog Storage Softlayer File metadata_attributes":{"type":"method","name":"metadata_attributes","children":[],"call":[" metadata_attribute? ! "," metadata_attribute? ","headers reject! "," service head_object headers "," service head_object "," key "," directory key "," directory "," service "," last_modified "," service head_object headers  reject! "," service head_object  service head_object headers  "]}," Fog Storage Softlayer File key_to_header":{"type":"method","name":"key_to_header","children":[],"call":[" metadata_prefix + ","key to_s split map join ","key to_s split map ","key to_s split ","key to_s "," metadata_prefix "]}," Fog Storage Softlayer File header_mapping":{"type":"method","name":"header_mapping","children":[],"call":["header_map []= "," key_to_header ","header_map each_pair "," metadata dup "," metadata "," metadata dup  []= "," metadata dup  each_pair "]}," Fog Storage Softlayer File metadata_to_headers":{"type":"method","name":"metadata_to_headers","children":[],"call":["Hash  [] ","header_map [] "," metadata map "," metadata "," header_mapping "," header_mapping  [] ","  header_mapping ping "]}," Fog Storage Softlayer File header_to_key":{"type":"method","name":"header_to_key","children":[],"call":["(send\n  (send\n    (send\n      (lvar :opt) :gsub\n      (send nil :metadata_prefix)\n      (str \"\")) :split\n    (str \"-\")) :map) join to_sym ","(send\n  (send\n    (send\n      (lvar :opt) :gsub\n      (send nil :metadata_prefix)\n      (str \"\")) :split\n    (str \"-\")) :map) join ","k [] downcase + ","k [] ","k [] downcase ","opt gsub split map ","opt gsub split ","opt gsub "," metadata_prefix "]}," Fog Storage Softlayer File key_mapping":{"type":"method","name":"key_mapping","children":[],"call":["key_map []= "," header_to_key ","key_map each_pair "," metadata_attributes "," metadata_attributes  []= "," metadata_attributes  each_pair "]}," Fog Storage Softlayer File headers_to_metadata":{"type":"method","name":"headers_to_metadata","children":[],"call":["Hash  [] ","key_map [] "," metadata_attributes map "," metadata_attributes "," key_mapping "," key_mapping  [] ","  key_mapping ping "]}," Fog Storage Softlayer File refresh_metadata":{"type":"method","name":"refresh_metadata","children":[],"call":["v nil? "," metadata reject! "," metadata "]}," Fog Storage Softlayer File directory=":{"type":"method","name":"directory=","children":[],"call":[]}," Fog Storage Softlayer File save":{"type":"method","name":"save","children":[],"call":["Fog Storage  get_content_type "," body "," content_type "," content_length= ","Fog Storage  get_body_size "," refresh_metadata "," update_attributes_from "," service put_object "," key "," directory key "," directory "," service ","options merge! "," metadata_to_headers ","options []= "," origin "," access_control_allow_origin "," content_disposition "," requires "," refresh_meta service put_object  "," meta service put_object _to_headers "]}," Fog Storage Softlayer File public_url":{"type":"method","name":"public_url","children":[],"call":[" collection get_url "," key "," collection "," requires "]}," Fog Storage Softlayer File url":{"type":"method","name":"url","children":[],"call":[" service create_temp_url "," key "," directory key "," directory "," service "," requires "]}," Fog Storage Softlayer File public=":{"type":"method","name":"public=","children":[],"call":[]}," Fog Storage Softlayer File owner=":{"type":"method","name":"owner=","children":[],"call":[" attributes []= ","new_owner [] "," attributes "]}," Fog Storage Softlayer File metadata":{"type":"method","name":"metadata","children":[],"call":[" headers_to_metadata "]}," Fog Storage Softlayer File destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_object "," key "," directory key "," directory "," service "," requires "]}," Fog Storage Softlayer File copy":{"type":"method","name":"copy","children":[],"call":["target_directory files get ","target_directory files "," service directories new "," service directories "," service "," service copy_object "," key "," directory key "," directory "," origin ","options [] "," access_control_allow_origin "," content_type "," requires "," service directories new  files get "," service directories new  files "]}," Fog Storage Softlayer File directory":{"type":"method","name":"directory","children":[],"call":[]}," Fog Storage Softlayer File body=":{"type":"method","name":"body=","children":[],"call":[" attributes []= "," attributes "]}," Fog Storage Softlayer File body":{"type":"method","name":"body","children":[],"call":[" collection get body "," collection get "," identity "," collection "," last_modified "," attributes [] "," attributes "]}," Fog Storage Softlayer Directory save":{"type":"method","name":"save","children":[],"call":[" service put_container "," key "," service "," requires "," public "]}," Fog Storage Softlayer Directory public_url":{"type":"method","name":"public_url","children":[],"call":[" raise ","Fog Softlayer  escape "," key "," service cluster downcase "," service cluster "," service "," requires "," Fog Softlayer  escape  "," service  service cluster downcase  downcase "," service  service cluster downcase  "]}," Fog Storage Softlayer Directory public=":{"type":"method","name":"public=","children":[],"call":[" attributes []= "," attributes "]}," Fog Storage Softlayer Directory files":{"type":"method","name":"files","children":[],"call":["Fog Storage Softlayer Files  new "," service "]}," Fog Storage Softlayer Directory destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_container "," key "," service "," requires "]}," Fog Storage Softlayer Directories get":{"type":"method","name":"get","children":[],"call":["directory files << ","directory files new ","directory files ","data body each ","data body ","directory files instance_variable_set ","directory files merge_attributes ","directory merge_attributes ","(str \"X-Container-Bytes-Used\") include? ","data headers "," new "," service get_container "," service ","data headers select "," new  files << "," new  files new "," new  files "," service get_container  body each "," service get_container  body "," new  files instance_variable_set "," new  files merge_attributes "," new  merge_attributes "," service get_container  headers "," service get_container  headers select "]}," Fog Storage Softlayer Directories all":{"type":"method","name":"all","children":[],"call":[" load "," service get_containers body "," service get_containers "," service "]}," Hash deep_merge":{"type":"method","name":"deep_merge","children":[],"call":[" merge ","v1 merge ","Hash  === "," proc "]}," Fog Softlayer escape":{"type":"method","name":"escape","children":[],"call":[]}," Fog DNS Softlayer Real update_record":{"type":"method","name":"update_record","children":[],"call":[" request "]}," Fog DNS Softlayer Mock update_record":{"type":"method","name":"update_record","children":[],"call":["response status= ","response body= ","Excon Response  new ","@record []= ","opts [] ","@domain first []= ","@domain first [] + ","@domain first [] ","@domain first ","record [] to_i == ","record_id to_i ","record [] to_i ","record [] ","@domain first [] each ","domain [] to_i == ","domain [] to_i ","domain [] ","@softlayer_domains each ","Excon Response  new  status= ","Excon Response  new  body= "]}," Fog DNS Softlayer Real get_records":{"type":"method","name":"get_records","children":[],"call":[" request ","domain_id to_s + ","domain_id to_s "]}," Fog DNS Softlayer Mock get_records":{"type":"method","name":"get_records","children":[],"call":[" raise ","response status= ","response body= ","domain [] ","Excon Response  new ","domain [] to_i == ","domain [] to_i ","@softlayer_domains each ","Excon Response  new  status= ","Excon Response  new  body= "]}," Fog DNS Softlayer Real get_domains":{"type":"method","name":"get_domains","children":[],"call":[" request "]}," Fog DNS Softlayer Mock get_domains":{"type":"method","name":"get_domains","children":[],"call":["response status= ","response body= ","Excon Response  new ","Excon Response  new  status= ","Excon Response  new  body= "]}," Fog DNS Softlayer Real get_domain_by_name":{"type":"method","name":"get_domain_by_name","children":[],"call":[" request ","getByDomainName/ + ","URI  encode ","name to_s "]}," Fog DNS Softlayer Mock get_domain_by_name":{"type":"method","name":"get_domain_by_name","children":[],"call":["response status= ","response body= ","Excon Response  new ","domain [] == ","domain [] ","@softlayer_domains each ","Excon Response  new  status= ","Excon Response  new  body= "]}," Fog DNS Softlayer Real get_domain":{"type":"method","name":"get_domain","children":[],"call":[" request "]}," Fog DNS Softlayer Mock get_domain":{"type":"method","name":"get_domain","children":[],"call":[" raise ","response status= ","response body= ","Excon Response  new ","domain [] to_i == ","domain [] to_i ","domain [] ","@softlayer_domains each ","Excon Response  new  status= ","Excon Response  new  body= "]}," Fog DNS Softlayer Real delete_record":{"type":"method","name":"delete_record","children":[],"call":[" request ","id to_s "]}," Fog DNS Softlayer Mock delete_record":{"type":"method","name":"delete_record","children":[],"call":["response status= ","response body= ","Excon Response  new ","domain [] delete ","domain [] ","domain []= ","domain [] + ","record [] == ","record [] ","domain [] each ","@softlayer_domains each ","Excon Response  new  status= ","Excon Response  new  body= "]}," Fog DNS Softlayer Real delete_domain":{"type":"method","name":"delete_domain","children":[],"call":[" request ","id to_s "]}," Fog DNS Softlayer Mock delete_domain":{"type":"method","name":"delete_domain","children":[],"call":[" raise ","response status= ","response body= ","Excon Response  new ","@softlayer_domains delete ","domain [] to_i == ","domain [] to_i ","domain [] ","@softlayer_domains each ","Excon Response  new  status= ","Excon Response  new  body= "]}," Fog DNS Softlayer Real create_record":{"type":"method","name":"create_record","children":[],"call":[" request "]}," Fog DNS Softlayer Mock create_record":{"type":"method","name":"create_record","children":[],"call":[" raise ","response status= ","response body= ","Excon Response  new ","domain [] << ","domain [] ","domain []= ","domain [] to_i + ","domain [] to_i ","domain [] to_i == ","opts [] ","@softlayer_domains each ","Fog Mock  random_numbers ","Excon Response  new  status= ","Excon Response  new  body= "]}," Fog DNS Softlayer Real create_domain":{"type":"method","name":"create_domain","children":[],"call":[" request "]}," Fog DNS Softlayer Mock create_domain":{"type":"method","name":"create_domain","children":[],"call":["response status= ","@softlayer_domains << ","response body= ","Fog Mock  random_numbers ","admin. + + ","admin. + ","opts [] ","ns1. + + ","ns1. + ","updated_at strftime + ","updated_at strftime ","Time  now ","Excon Response  new ","Excon Response  new  status= ","Excon Response  new  body= ","Time  now  strftime + ","Time  now  strftime "]}," Fog DNS Softlayer Records new":{"type":"method","name":"new","children":[],"call":["(pair\n  (sym :domain)\n  (send nil :domain)) merge! "," domain "," requires "]}," Fog DNS Softlayer Records all":{"type":"method","name":"all","children":[],"call":[" load "," service get_records body "," service get_records "," domain id "," domain "," service "," clear "," requires "]}," Fog DNS Softlayer Record generate_template":{"type":"method","name":"generate_template","children":[],"call":["template []= "," retry "," refresh "," minimum "," expire "," priority "," ttl "," domain_id "," type "," value "," name "]}," Fog DNS Softlayer Record save":{"type":"method","name":"save","children":[],"call":[" service update_record "," id "," service "," merge_attributes ","data body "," service create_record "," id nil? "," generate_template "," requires "," service update_record  body "," service create_record  body "]}," Fog DNS Softlayer Record destroy":{"type":"method","name":"destroy","children":[],"call":["response body "," service delete_record "," identity "," service "," service delete_record  body "]}," Fog DNS Softlayer Record initialize":{"type":"method","name":"initialize","children":[],"call":[" domain_id= ","attributes [] "]}," Fog DNS Softlayer Domains create":{"type":"method","name":"create","children":[],"call":[" new merge_attributes "," new ","response body "," service create_domain "," service "," service create_domain  body "]}," Fog DNS Softlayer Domains get_by_name":{"type":"method","name":"get_by_name","children":[],"call":[" new merge_attributes ","data first "," new ","data empty? ","response body "," service get_domain_by_name "," service ","name == ","name nil? ","response body  first ","response body  empty? "," service get_domain_by_name  body "]}," Fog DNS Softlayer Domains get":{"type":"method","name":"get","children":[],"call":[" new merge_attributes "," new ","response body "," service get_domain "," service ","identifier == ","identifier nil? "," service get_domain  body "]}," Fog DNS Softlayer Domains all":{"type":"method","name":"all","children":[],"call":[" load "," service get_domains body "," service get_domains "," service "]}," Fog DNS Softlayer Domain destroy":{"type":"method","name":"destroy","children":[],"call":["response body "," service delete_domain "," id "," service "," requires "," service delete_domain  body "]}," Fog DNS Softlayer Domain create_record":{"type":"method","name":"create_record","children":[],"call":[" records ","record save ","Fog DNS Softlayer Record  new ","opts merge! "," service "," id "," Fog DNS Softlayer Record  new s ","Fog DNS Softlayer Record  new  save "]}," Fog DNS Softlayer Domain records":{"type":"method","name":"records","children":[],"call":["Fog DNS Softlayer Records  new "," service "]}," Fog DNS Softlayer Domain initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Fog DNS Softlayer Real user_agent_header":{"type":"method","name":"user_agent_header","children":[],"call":[]}," Fog DNS Softlayer Real set_sl_path":{"type":"method","name":"set_sl_path","children":[],"call":["path to_s underscore camelize ","path to_s underscore ","path to_s ","path to_s softlayer_underscore softlayer_camelize ","path to_s softlayer_underscore ","path to_s underscore camelize  to_s underscore camelize ","path to_s softlayer_underscore softlayer_camelize  to_s underscore camelize ","path to_s underscore camelize  to_s underscore ","path to_s softlayer_underscore softlayer_camelize  to_s underscore ","path to_s underscore camelize  to_s ","path to_s softlayer_underscore softlayer_camelize  to_s ","path to_s underscore camelize  to_s softlayer_underscore softlayer_camelize ","path to_s softlayer_underscore softlayer_camelize  to_s softlayer_underscore softlayer_camelize ","path to_s underscore camelize  to_s softlayer_underscore ","path to_s softlayer_underscore softlayer_camelize  to_s softlayer_underscore "]}," Fog DNS Softlayer Real set_sl_service":{"type":"method","name":"set_sl_service","children":[],"call":["SoftLayer_ << ","(send\n  (send\n    (send\n      (send\n        (lvar :service) :to_s) :gsub\n      (regexp\n        (str \"^softlayer_\")\n        (regopt :i))\n      (str \"\")) :split\n    (str \"_\")) :map) join ","i [] upcase + ","i [] ","i [] upcase ","service to_s gsub split map ","service to_s gsub split ","service to_s gsub ","service to_s ","(send\n  (send\n    (send\n      (send\n        (lvar :SoftLayer_ << ) :to_s) :gsub\n      (regexp\n        (str \"^softlayer_\")\n        (regopt :i))\n      (str \"\")) :split\n    (str \"_\")) :map) join ","SoftLayer_ <<  to_s gsub split map ","SoftLayer_ <<  to_s gsub split ","SoftLayer_ <<  to_s gsub ","SoftLayer_ <<  to_s "]}," Fog DNS Softlayer Real credentialize_url":{"type":"method","name":"credentialize_url","children":[],"call":[]}," Fog DNS Softlayer Real request":{"type":"method","name":"request","children":[],"call":["response body= ","Fog JSON  decode ","response body ","@connection request ","Fog Core Connection  new ","params []= ","options [] ","options [] nil? ","Fog JSON  encode ","params [] []= ","params [] "," user_agent_header "," set_sl_path "," set_sl_service "," credentialize_url ","@credentials [] ","@connection request  body= ","@connection request  body ","Fog Core Connection  new  request "]}," Fog DNS Softlayer Mock initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Fog DNS Softlayer Real get_record":{"type":"method","name":"get_record","children":[],"call":[" request "]}," Fog DNS Softlayer Mock get_record":{"type":"method","name":"get_record","children":[],"call":[" raise ","response status= ","response body= ","Excon Response  new ","record [] to_i == ","id to_i ","record [] to_i ","record [] ","domain [] each ","domain [] ","@softlayer_domains each ","Excon Response  new  status= ","Excon Response  new  body= "]}," Fog DNS Softlayer Records get":{"type":"method","name":"get","children":[],"call":[" new merge_attributes "," new ","response body "," service get_record "," service ","identifier == ","identifier nil? "," service get_record  body "]}," Fog Compute Softlayer Server ssh_password":{"type":"method","name":"ssh_password","children":[],"call":[" os [] [] [] "," os [] [] "," os [] "," os "," id ","@sshpass [] [] [] [] ","@sshpass [] [] [] ","@sshpass [] [] ","@sshpass [] ","@sshpass [] [] empty? ","@sshpass [] nil? "," service request body "," service request "," service "," bare_metal? "," requires "]}," Fog Compute Softlayer Server datacenter":{"type":"method","name":"datacenter","children":[],"call":[" attributes [] [] "," attributes [] "," attributes "," attributes [] nil? "]}," Fog Compute Softlayer Server datacenter=":{"type":"method","name":"datacenter=","children":[],"call":[" attributes []= "," attributes ","name [] ","name is_a? ","name []  [] ","name []  is_a? "]}," Fog Compute Softlayer Real get_vm_tags":{"type":"method","name":"get_vm_tags","children":[],"call":[" request "]}," Fog Compute Softlayer Mock get_vm_tags":{"type":"method","name":"get_vm_tags","children":[],"call":["response body= ","response status == ","response status ","vm []= ","(send\n  (ivar :@tags) :map) compact ","tag [] == ","tag [] ","@tags map ","vm [] "," get_vm body "," get_vm ","response status= "," get_vm status ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status == ","Excon Response  new  status "," get_vm body  []= ","(send\n  (ivar :@(send\n  (ivar :@tags) :map) compact ) :map) compact ","@(send\n  (ivar :@tags) :map) compact  map "," get_vm body  [] "," get_ get_vm body  body "," get_ get_vm body  ","Excon Response  new  status= "," get_ get_vm body  status "]}," Fog Compute Softlayer Real get_tag":{"type":"method","name":"get_tag","children":[],"call":[" request "]}," Fog Compute Softlayer Mock get_tag":{"type":"method","name":"get_tag","children":[],"call":[]}," Fog Compute Softlayer Real get_references_by_tag_name":{"type":"method","name":"get_references_by_tag_name","children":[],"call":[" request "]}," Fog Compute Softlayer Mock get_references_by_tag_name":{"type":"method","name":"get_references_by_tag_name","children":[],"call":["response body= ","(send\n  (send\n    (lvar :tag_list) :split\n    (str \",\")) :map) compact ","Fog Mock  random_numbers ","Fog Softlayer  mock_account_id ","refs empty? ","ref [] [] == ","ref [] [] ","ref [] ","@tags select ","tag_list split map ","tag_list split ","response status= ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Compute Softlayer Real get_bare_metal_tags":{"type":"method","name":"get_bare_metal_tags","children":[],"call":[" request "]}," Fog Compute Softlayer Mock get_bare_metal_tags":{"type":"method","name":"get_bare_metal_tags","children":[],"call":["response body= ","response status == ","response status ","bmc []= ","(send\n  (ivar :@tags) :map) compact ","tag [] == ","tag [] ","@tags map ","bmc [] "," get_bare_metal_server body "," get_bare_metal_server ","response status= "," get_bare_metal_server status ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status == ","Excon Response  new  status "," get_bare_metal_server body  []= ","(send\n  (ivar :@(send\n  (ivar :@tags) :map) compact ) :map) compact ","@(send\n  (ivar :@tags) :map) compact  map "," get_bare_metal_server body  [] ","Excon Response  new  status= "]}," Fog Compute Softlayer Real describe_tags":{"type":"method","name":"describe_tags","children":[],"call":[" request "]}," Fog Compute Softlayer Mock describe_tags":{"type":"method","name":"describe_tags","children":[],"call":["response status= ","response body= ","Excon Response  new ","Excon Response  new  status= ","Excon Response  new  body= "]}," Fog Compute Softlayer Real delete_vm_tags":{"type":"method","name":"delete_vm_tags","children":[],"call":[" create_vm_tags ","(send\n  (send\n    (send\n      (send\n        (self) :get_vm_tags\n        (lvar :id)) :body) :[]\n    (str \"tagReferences\")) :map) compact ","i [] [] ","i [] ","tags include? "," get_vm_tags body [] map "," get_vm_tags body [] "," get_vm_tags body "," get_vm_tags "," raise "," __method__ "," class name "," class ","tags is_a? "]}," Fog Compute Softlayer Mock delete_vm_tags":{"type":"method","name":"delete_vm_tags","children":[],"call":["response body= ","tags include? ","tag [] [] ","tag [] ","tag [] == ","@tags reject ","response status != ","response status ","response status= "," get_vm status "," get_vm ","Excon Response  new "," raise "," __method__ "," class name "," class ","tags is_a? ","Excon Response  new  body= ","Excon Response  new  status != ","Excon Response  new  status ","Excon Response  new  status= "]}," Fog Compute Softlayer Real delete_bare_metal_tags":{"type":"method","name":"delete_bare_metal_tags","children":[],"call":[" create_bare_metal_tags ","(send\n  (send\n    (send\n      (send\n        (self) :get_bare_metal_tags\n        (lvar :id)) :body) :[]\n    (str \"tagReferences\")) :map) compact ","i [] [] ","i [] ","tags include? "," get_bare_metal_tags body [] map "," get_bare_metal_tags body [] "," get_bare_metal_tags body "," get_bare_metal_tags "," raise "," __method__ "," class name "," class ","tags is_a? "]}," Fog Compute Softlayer Mock delete_bare_metal_tags":{"type":"method","name":"delete_bare_metal_tags","children":[],"call":["response body= ","tags include? ","tag [] [] ","tag [] ","tag [] == ","@tags reject ","response status != ","response status ","response status= "," get_bare_metal_server status "," get_bare_metal_server ","Excon Response  new "," raise "," __method__ "," class name "," class ","tags is_a? ","Excon Response  new  body= ","Excon Response  new  status != ","Excon Response  new  status ","Excon Response  new  status= "]}," Fog Compute Softlayer Real create_vm_tags":{"type":"method","name":"create_vm_tags","children":[],"call":[" request ","tags join "," raise "," __method__ "," class name "," class ","tags is_a? "]}," Fog Compute Softlayer Mock create_vm_tags":{"type":"method","name":"create_vm_tags","children":[],"call":["response body= ","@tags << ","Fog Mock  random_numbers ","tags each ","response status != ","response status ","response status= "," get_vm status "," get_vm ","Excon Response  new "," raise "," __method__ "," class name "," class ","tags is_a? ","Excon Response  new  body= ","Excon Response  new  status != ","Excon Response  new  status ","Excon Response  new  status= "]}," Fog Compute Softlayer Real create_bare_metal_tags":{"type":"method","name":"create_bare_metal_tags","children":[],"call":[" request ","tags join "," raise "," __method__ "," class name "," class ","tags is_a? "]}," Fog Compute Softlayer Mock create_bare_metal_tags":{"type":"method","name":"create_bare_metal_tags","children":[],"call":["response body= ","@tags << ","Fog Mock  random_numbers ","tags each ","response status != ","response status ","response status= "," get_bare_metal_server status "," get_bare_metal_server ","Excon Response  new "," raise "," __method__ "," class name "," class ","tags is_a? ","Excon Response  new  body= ","Excon Response  new  status != ","Excon Response  new  status ","Excon Response  new  status= "]}," Fog Compute Softlayer Tag load_server":{"type":"method","name":"load_server","children":[],"call":[" service servers get "," resource_id "," service servers "," service "," requires "]}," Fog Compute Softlayer Tag destroy_vm_tag":{"type":"method","name":"destroy_vm_tag","children":[],"call":[" service delete_vm_tags "," name ","@server id "," service "]}," Fog Compute Softlayer Tag destroy_bare_metal_tag":{"type":"method","name":"destroy_bare_metal_tag","children":[],"call":[" service delete_bare_metal_tags "," name ","@server id "," service "]}," Fog Compute Softlayer Tag add_vm_tag":{"type":"method","name":"add_vm_tag","children":[],"call":[" service create_vm_tags ","@server tags << "," name ","@server tags ","@server id "," service "]}," Fog Compute Softlayer Tag add_bare_metal_tag":{"type":"method","name":"add_bare_metal_tag","children":[],"call":[" service create_bare_metal_tags ","@server tags << "," name ","@server tags ","@server id "," service "]}," Fog Compute Softlayer Tag save":{"type":"method","name":"save","children":[],"call":[" add_vm_tag "," add_bare_metal_tag ","@server bare_metal? "," load_server "," requires "]}," Fog Compute Softlayer Tag references":{"type":"method","name":"references","children":[],"call":[" service servers get ","ref [] "," service servers "," service ","ref [] [] "," service get_tag body [] map "," service get_tag body [] "," service get_tag body "," service get_tag "," id ","(send\n  (send\n    (send\n      (send\n        (send nil :service) :request\n        (sym :tag)\n        (dstr\n          (begin\n            (send nil :id)))\n        (hash\n          (pair\n            (sym :query)\n            (str \"objectMask=references;references.tagType\")))) :body) :[]\n    (str \"references\")) :map) compact ","type == "," service request body [] map "," service request body [] "," service request body "," service request ","ref [] []  == "]}," Fog Compute Softlayer Tag destroy":{"type":"method","name":"destroy","children":[],"call":[" destroy_vm_tag "," destroy_bare_metal_tag ","@server bare_metal? "," load_server "," requires "]}," Fog Compute Softlayer Tag initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Fog Compute Softlayer Servers tagged_with":{"type":"method","name":"tagged_with","children":[],"call":[" get ","ids map ","(send\n  (send\n    (send\n      (send nil :service) :get_references_by_tag_name\n      (send\n        (lvar :tags) :join\n        (str \",\"))) :body) :map) flatten uniq ","(send\n  (send\n    (send\n      (send nil :service) :get_references_by_tag_name\n      (send\n        (lvar :tags) :join\n        (str \",\"))) :body) :map) flatten ","ref [] ","tag [] map ","tag [] "," service get_references_by_tag_name body map "," service get_references_by_tag_name body "," service get_references_by_tag_name ","tags join "," service "," raise "," __method__ "," class name "," class ","tags is_a? ","(send\n  (send\n    (send\n      (send nil :service) :get_references_by_tag_name\n      (send\n        (lvar :tags) :join\n        (str \",\"))) :body) :map) flatten uniq  map "]}," Fog Compute Softlayer Server tags":{"type":"method","name":"tags","children":[],"call":["i [] [] ","i [] "," attributes [] map "," attributes [] "," attributes ","(send\n  (send\n    (send nil :attributes) :[]\n    (sym :tags)) :map) compact "]}," Fog Compute Softlayer Server delete_tags":{"type":"method","name":"delete_tags","children":[],"call":[" reload "," service tags new destroy "," service tags new "," id "," service tags "," service ","tags each "," raise "," __method__ "," class name "," class ","tags is_a? "," requires "]}," Fog Compute Softlayer Server add_tags":{"type":"method","name":"add_tags","children":[],"call":[" reload "," service tags new save "," service tags new "," id "," service tags "," service ","tags each "," raise "," __method__ "," class name "," class ","tags is_a? "," requires "]}," Fog Softlayer stringify_keys":{"type":"method","name":"stringify_keys","children":[],"call":[]}," Fog Network Softlayer Real list_subnets":{"type":"method","name":"list_subnets","children":[],"call":[" request "]}," Fog Network Softlayer Mock list_subnets":{"type":"method","name":"list_subnets","children":[],"call":[" raise "]}," Fog Network Softlayer Real list_networks":{"type":"method","name":"list_networks","children":[],"call":[" request "," list_networks "]}," Fog Network Softlayer Mock list_networks":{"type":"method","name":"list_networks","children":[],"call":["response status= ","response body= ","Excon Response  new ","Excon Response  new  status= ","Excon Response  new  body= "]}," Fog Network Softlayer Real get_subnet_price_code":{"type":"method","name":"get_subnet_price_code","children":[],"call":["(send\n  (send\n    (send nil :request\n      (sym :product_package)\n      (str \"0/get_item_prices\")\n      (hash\n        (pair\n          (sym :query)\n          (str \"objectMask=mask[id,categories.id,item.description]\")))) :body) :map) compact first ","(send\n  (send\n    (send nil :request\n      (sym :product_package)\n      (str \"0/get_item_prices\")\n      (hash\n        (pair\n          (sym :query)\n          (str \"objectMask=mask[id,categories.id,item.description]\")))) :body) :map) compact ","item [] ","item [] [] [] == ","item [] [] [] ","item [] [] "," request body map "," request body "," request "," get_subnet_package_id ","item [] [] =~ "," catg [] == "," catg [] "," catg "," get_ get_subnet_package_id  "]}," Fog Network Softlayer Mock get_subnet_price_code":{"type":"method","name":"get_subnet_price_code","children":[],"call":[]}," Fog Network Softlayer Real get_subnet_package_id":{"type":"method","name":"get_subnet_package_id","children":[],"call":["(send\n  (send\n    (send nil :request\n      (sym :product_package)\n      (str \"0/get_configuration\")\n      (hash\n        (pair\n          (sym :query)\n          (str \"objectMask=mask[isRequired,itemCategory]\")))) :body) :map) compact first ","(send\n  (send\n    (send nil :request\n      (sym :product_package)\n      (str \"0/get_configuration\")\n      (hash\n        (pair\n          (sym :query)\n          (str \"objectMask=mask[isRequired,itemCategory]\")))) :body) :map) compact ","item [] [] ","item [] ","item [] [] == "," request body map "," request body "," request "," raise ","private public include? "," __method__ "," class name "," class ","address_space downcase! "]}," Fog Network Softlayer Mock get_subnet_package_id":{"type":"method","name":"get_subnet_package_id","children":[],"call":[" raise ","private public include? "," __method__ "," class name "," class ","address_space downcase! "]}," Fog Network Softlayer Real get_subnet":{"type":"method","name":"get_subnet","children":[],"call":[" request "]}," Fog Network Softlayer Mock get_subnet":{"type":"method","name":"get_subnet","children":[],"call":[" raise "]}," Fog Network Softlayer Real get_references_by_tag_name":{"type":"method","name":"get_references_by_tag_name","children":[],"call":[" request "]}," Fog Network Softlayer Mock get_references_by_tag_name":{"type":"method","name":"get_references_by_tag_name","children":[],"call":["response body= ","(send\n  (send\n    (lvar :tag_list) :split\n    (str \",\")) :map) compact ","Fog Mock  random_numbers ","Fog Softlayer  mock_account_id ","refs empty? ","ref [] [] == ","ref [] [] ","ref [] ","@tags select ","tag_list split map ","tag_list split ","response status= ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Network Softlayer Real get_public_vlan_price_code":{"type":"method","name":"get_public_vlan_price_code","children":[],"call":["(send\n  (send\n    (send nil :request\n      (sym :product_package)\n      (str \"0/get_items\")) :body) :map) compact first ","(send\n  (send\n    (send nil :request\n      (sym :product_package)\n      (str \"0/get_items\")) :body) :map) compact ","item [] [] [] ","item [] [] ","item [] ","item [] =~ "," request body map "," request body "," request "]}," Fog Network Softlayer Mock get_public_vlan_price_code":{"type":"method","name":"get_public_vlan_price_code","children":[],"call":[]}," Fog Network Softlayer Real get_private_vlan_price_code":{"type":"method","name":"get_private_vlan_price_code","children":[],"call":["(send\n  (send\n    (send nil :request\n      (sym :product_package)\n      (str \"0/get_items\")) :body) :map) compact first ","(send\n  (send\n    (send nil :request\n      (sym :product_package)\n      (str \"0/get_items\")) :body) :map) compact ","item [] [] [] ","item [] [] ","item [] ","item [] =~ "," request body map "," request body "," request "]}," Fog Network Softlayer Mock get_private_vlan_price_code":{"type":"method","name":"get_private_vlan_price_code","children":[],"call":[]}," Fog Network Softlayer Real get_network_tags":{"type":"method","name":"get_network_tags","children":[],"call":[" request "]}," Fog Network Softlayer Mock get_network_tags":{"type":"method","name":"get_network_tags","children":[],"call":["response body= ","response status == ","response status ","net []= ","net is_a? ","(send\n  (ivar :@tags) :map) compact ","tag [] == ","tag [] ","@tags map ","net [] "," get_network body "," get_network ","response status= "," get_network status ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status == ","Excon Response  new  status "," get_network body  []= "," get_network body  is_a? ","(send\n  (ivar :@(send\n  (ivar :@tags) :map) compact ) :map) compact ","@(send\n  (ivar :@tags) :map) compact  map "," get_network body  [] "," get_ get_network body work body "," get_ get_network body work ","Excon Response  new  status= "," get_ get_network body work status "]}," Fog Network Softlayer Real get_network":{"type":"method","name":"get_network","children":[],"call":[" request "]}," Fog Network Softlayer Mock get_network":{"type":"method","name":"get_network","children":[],"call":["response body= ","response status= ","response body nil? ","response body ","(send\n  (ivar :@networks) :select) first ","vlan [] == ","vlan [] ","@networks select ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= ","Excon Response  new  body nil? ","Excon Response  new  body "]}," Fog Network Softlayer Real get_ip_address":{"type":"method","name":"get_ip_address","children":[],"call":[" request "]}," Fog Network Softlayer Mock get_ip_address":{"type":"method","name":"get_ip_address","children":[],"call":[" raise "]}," Fog Network Softlayer Real get_datacenters":{"type":"method","name":"get_datacenters","children":[],"call":[" request "]}," Fog Network Softlayer Mock get_datacenters":{"type":"method","name":"get_datacenters","children":[],"call":["response body= ","response status= ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Network Softlayer Real get_datacenter_routers":{"type":"method","name":"get_datacenter_routers","children":[],"call":[" request ","Excon  defaults [] ","Excon  defaults "]}," Fog Network Softlayer Mock get_datacenter_routers":{"type":"method","name":"get_datacenter_routers","children":[],"call":["response body= ","Fog Mock  random_numbers to_i ","Fog Mock  random_numbers ","dc [] ","response status= ","dc nil? ","(send\n  (ivar :@datacenters) :select) first ","dc [] == ","@datacenters select ","Excon Response  new ","Excon Response  new  body= ","(send\n  (ivar :@datacenters) :select) first  [] ","Excon Response  new  status= ","(send\n  (ivar :@datacenters) :select) first  nil? ","(send\n  (ivar :@datacenters) :select) first  [] == "]}," Fog Network Softlayer Real delete_network_tags":{"type":"method","name":"delete_network_tags","children":[],"call":[" create_network_tags ","(send\n  (send\n    (send\n      (send\n        (self) :get_network_tags\n        (lvar :id)) :body) :[]\n    (str \"tagReferences\")) :map) compact ","i [] [] ","i [] ","tags include? "," get_network_tags body [] map "," get_network_tags body [] "," get_network_tags body "," get_network_tags "," raise "," __method__ "," class name "," class ","tags is_a? "]}," Fog Network Softlayer Mock delete_network_tags":{"type":"method","name":"delete_network_tags","children":[],"call":["response body= ","tags include? ","tag [] [] ","tag [] ","tag [] == ","@tags reject ","response status == ","response status ","response status= "," get_network status "," get_network ","Excon Response  new "," raise "," __method__ "," class name "," class ","tags is_a? ","Excon Response  new  body= ","Excon Response  new  status == ","Excon Response  new  status ","Excon Response  new  status= "]}," Fog Network Softlayer Real delete_network":{"type":"method","name":"delete_network","children":[],"call":[" request body "," request "," raise ","billing_id nil? "," request body [] "," request body []  nil? "]}," Fog Network Softlayer Mock delete_network":{"type":"method","name":"delete_network","children":[],"call":["response body= ","response status= ","(send\n  (ivar :@networks) :reject!) nil? ","vlan [] == ","vlan [] ","@networks reject! ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Network Softlayer Real create_network_tags":{"type":"method","name":"create_network_tags","children":[],"call":[" request ","tags join "," raise "," __method__ "," class name "," class ","tags is_a? "]}," Fog Network Softlayer Mock create_network_tags":{"type":"method","name":"create_network_tags","children":[],"call":["response body= ","@tags << ","Fog Mock  random_numbers ","tags each ","response status == ","response status ","response status= "," get_network status "," get_network ","Excon Response  new "," raise "," __method__ "," class name "," class ","tags is_a? ","Excon Response  new  body= ","Excon Response  new  status == ","Excon Response  new  status ","Excon Response  new  status= "]}," Fog Network Softlayer Real create_network":{"type":"method","name":"create_network","children":[],"call":[" request "," raise "," __method__ "," class name "," class ","order is_a? "]}," Fog Network Softlayer Mock create_network":{"type":"method","name":"create_network","children":[],"call":["response body= ","Fog Mock  random_numbers to_i ","Fog Mock  random_numbers ","Time  now iso8601 ","Time  now ","order [] ","order [] << ","response status= ","Excon Response  new ","@networks << ","Fog Mock  random_ip ","Fog Softlayer  mock_account_id "," raise "," __method__ "," class name "," class ","order is_a? ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Network Softlayer Real request":{"type":"method","name":"request","children":[],"call":["Fog Softlayer Slapi  slapi_request ","(pair\n  (sym :username)\n  (ivar :@softlayer_username)) merge "]}," Fog Network Softlayer Real initialize":{"type":"method","name":"initialize","children":[],"call":["options [] "]}," Fog Network Softlayer Mock credentials":{"type":"method","name":"credentials","children":[],"call":[]}," Fog Network Softlayer Mock initialize":{"type":"method","name":"initialize","children":[],"call":["options [] "]}," Fog Network Softlayer Mock reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Network Softlayer Tag load_network":{"type":"method","name":"load_network","children":[],"call":[" service networks get "," resource_id "," service networks "," service "," requires "]}," Fog Network Softlayer Tag save":{"type":"method","name":"save","children":[],"call":[" service create_network_tags ","@network tags << "," name ","@network tags "," resource_id "," service "," load_network "," requires "]}," Fog Network Softlayer Tag references":{"type":"method","name":"references","children":[],"call":["(send\n  (send\n    (send\n      (send\n        (send nil :service) :request\n        (sym :tag)\n        (dstr\n          (begin\n            (send nil :id)))\n        (hash\n          (pair\n            (sym :query)\n            (str \"objectMask=references;references.tagType\")))) :body) :[]\n    (str \"references\")) :map) compact "," service networks get ","ref [] "," service networks "," service ","ref [] [] == ","ref [] [] "," service request body [] map "," service request body [] "," service request body "," service request "," id "]}," Fog Network Softlayer Tag destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_network_tags "," name "," resource_id "," service "," requires "]}," Fog Network Softlayer Tag initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Fog Network Softlayer Subnets get":{"type":"method","name":"get","children":[],"call":[" new "," service get_subnet body "," service get_subnet "," service "," service get_ service get_subnet body  body "," service get_ service get_subnet body  "]}," Fog Network Softlayer Subnets all":{"type":"method","name":"all","children":[],"call":[" load "," service list_subnets body "," service list_subnets "," service "]}," Fog Network Softlayer Subnet destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_subnet "," id "," service "," requires "]}," Fog Network Softlayer Subnet update":{"type":"method","name":"update","children":[],"call":[" merge_attributes "," service update_subnet body [] "," service update_subnet body "," service update_subnet "," attributes "," id "," service "," requires "]}," Fog Network Softlayer Subnet create":{"type":"method","name":"create","children":[],"call":[" merge_attributes "," service create_subnet body [] "," service create_subnet body "," service create_subnet "," attributes "," ip_version "," cidr "," network_id "," service "," requires "," build_order "]}," Fog Network Softlayer Subnet save":{"type":"method","name":"save","children":[],"call":[" create "," update "," identity "," requires "]}," Fog Network Softlayer Subnet addresses":{"type":"method","name":"addresses","children":[],"call":[" service ips get ","address [] "," service ips "," service "," attributes [] map "," attributes [] "," attributes "," attributes [] nil? "]}," Fog Network Softlayer Networks by_name":{"type":"method","name":"by_name","children":[],"call":["(send\n  (send nil :all) :select) first ","vlan name == ","vlan name "," all select "," all "]}," Fog Network Softlayer Networks tagged_with":{"type":"method","name":"tagged_with","children":[],"call":[" get ","ids map ","(send\n  (send\n    (send\n      (send nil :service) :get_references_by_tag_name\n      (send\n        (lvar :tags) :join\n        (str \",\"))) :body) :map) flatten uniq ","(send\n  (send\n    (send\n      (send nil :service) :get_references_by_tag_name\n      (send\n        (lvar :tags) :join\n        (str \",\"))) :body) :map) flatten ","ref [] ","tag [] map ","tag [] "," service get_references_by_tag_name body map "," service get_references_by_tag_name body "," service get_references_by_tag_name ","tags join "," service "," raise "," __method__ "," class name "," class ","tags is_a? ","(send\n  (send\n    (send\n      (send nil :service) :get_references_by_tag_name\n      (send\n        (lvar :tags) :join\n        (str \",\"))) :body) :map) flatten uniq  map "]}," Fog Network Softlayer Networks get":{"type":"method","name":"get","children":[],"call":[" new "," service get_network body "," service get_network "," service "," service get_ service get_network body  body "," service get_ service get_network body  "]}," Fog Network Softlayer Networks all":{"type":"method","name":"all","children":[],"call":[" load "," service list_networks body "," service list_networks "," service "]}," Fog Network Softlayer Network build_order":{"type":"method","name":"build_order","children":[],"call":[" service get_subnet_price_code "," service "," service get_private_vlan_price_code "," service get_public_vlan_price_code "," public? "," datacenter id "," datacenter "," router [] "," router "," name "]}," Fog Network Softlayer Network tags":{"type":"method","name":"tags","children":[],"call":["i [] [] ","i [] "," attributes [] map "," attributes [] "," attributes "," requires "]}," Fog Network Softlayer Network destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_network "," id "," service "," requires "]}," Fog Network Softlayer Network update":{"type":"method","name":"update","children":[],"call":[" merge_attributes "," service update_network body "," service update_network "," attributes "," id "," service "," requires "]}," Fog Network Softlayer Network create":{"type":"method","name":"create","children":[],"call":[" merge_attributes "," service create_network body "," service create_network "," build_order "," service "," requires "]}," Fog Network Softlayer Network subnets":{"type":"method","name":"subnets","children":[],"call":[" service subnets get ","subnet [] "," service subnets "," service "," attributes [] map "," attributes [] "," attributes "," requires "]}," Fog Network Softlayer Network save":{"type":"method","name":"save","children":[],"call":[" create "," update "," identity "]}," Fog Network Softlayer Network public?":{"type":"method","name":"public?","children":[],"call":[" network_space == "," network_space "," requires "]}," Fog Network Softlayer Network private?":{"type":"method","name":"private?","children":[],"call":[" network_space == "," network_space "," requires "]}," Fog Network Softlayer Network router=":{"type":"method","name":"router=","children":[],"call":[" attributes []= ","(str \"id\") include? ","new_data select "," attributes "," raise ","new_data is_a? "]}," Fog Network Softlayer Network delete_tags":{"type":"method","name":"delete_tags","children":[],"call":[" reload "," service tags new destroy "," service tags new "," id "," service tags "," service ","tags each "," raise "," __method__ "," class name "," class ","tags is_a? "," requires "]}," Fog Network Softlayer Network datacenter":{"type":"method","name":"datacenter","children":[],"call":[" service datacenters new "," attributes [] [] "," attributes [] "," attributes "," service datacenters "," service "]}," Fog Network Softlayer Network add_tags":{"type":"method","name":"add_tags","children":[],"call":[" reload "," service tags new save "," service tags new "," id "," service tags "," service ","tags each "," raise "," __method__ "," class name "," class ","tags is_a? "," requires "]}," Fog Network Softlayer Ip reserved?":{"type":"method","name":"reserved?","children":[],"call":[" attribute [] "," attribute "," attributes [] ! ! "," attributes [] ! "," attributes [] "," attributes "]}," Fog Network Softlayer Ip network?":{"type":"method","name":"network?","children":[],"call":[" attribute [] "," attribute "," attributes [] ! ! "," attributes [] ! "," attributes [] "," attributes "]}," Fog Network Softlayer Ip gateway?":{"type":"method","name":"gateway?","children":[],"call":[" attribute [] "," attribute "," attributes [] ! ! "," attributes [] ! "," attributes [] "," attributes "]}," Fog Network Softlayer Ip broadcast?":{"type":"method","name":"broadcast?","children":[],"call":[" attribute [] "," attribute "," attributes [] ! ! "," attributes [] ! "," attributes [] "," attributes "]}," Fog Network Softlayer Ip destroy":{"type":"method","name":"destroy","children":[],"call":[" requires "," service delete_global_ip_address status == "," service delete_global_ip_address status "," service delete_global_ip_address "," global_id "," service "," raise "," global? "]}," Fog Network Softlayer Ip update":{"type":"method","name":"update","children":[],"call":[]}," Fog Network Softlayer Ip create":{"type":"method","name":"create","children":[],"call":[]}," Fog Network Softlayer Ip save":{"type":"method","name":"save","children":[],"call":[" create "," update "," identity "," requires "]}," Fog Network Softlayer Ip initialize":{"type":"method","name":"initialize","children":[],"call":["attributes [] "]}," Fog Network Softlayer Datacenter destroy":{"type":"method","name":"destroy","children":[],"call":[" raise "]}," Fog Network Softlayer Datacenter update":{"type":"method","name":"update","children":[],"call":[" raise "]}," Fog Network Softlayer Datacenter create":{"type":"method","name":"create","children":[],"call":[" raise "]}," Fog Network Softlayer Datacenter save":{"type":"method","name":"save","children":[],"call":[" raise "]}," Fog Network Softlayer Datacenter routable_subnets":{"type":"method","name":"routable_subnets","children":[],"call":[" service request body "," service request "," id "," service "," requires "]}," Fog Network Softlayer Datacenter routers":{"type":"method","name":"routers","children":[],"call":[" service get_datacenter_routers body "," service get_datacenter_routers "," id "," service "," requires "]}," Fog Network Softlayer Datacenter initialize":{"type":"method","name":"initialize","children":[],"call":["attributes [] "]}," Fog Compute Softlayer Server _get_vlan":{"type":"method","name":"_get_vlan","children":[],"call":["Fog Network  [] networks get ","Fog Network  [] networks ","Fog Network  [] "," service request body [] [] [] "," service request body [] [] "," service request body [] "," service request body "," service request "," id "," service "," bare_metal? "," network_connection networks get "," network_connection networks "," network_connection "]}," Fog Compute Softlayer Server _get_private_vlan":{"type":"method","name":"_get_private_vlan","children":[],"call":["Fog Network  [] networks get ","Fog Network  [] networks ","Fog Network  [] "," service request body [] [] [] "," service request body [] [] "," service request body [] "," service request body "," service request "," id "," service "," bare_metal? "," network_connection networks get "," network_connection networks "," network_connection "]}," Fog Compute Softlayer Server private_vlan=":{"type":"method","name":"private_vlan=","children":[],"call":[" attributes []= "," attributes ","Fog Network  [] networks get ","Fog Network  [] networks ","Fog Network  [] ","value is_a? "," raise "," __method__ "," class name "," class "," network_connection networks get "," network_connection networks "," network_connection ","Fog Network  [] networks get  is_a? "," network_connection networks get  is_a? "]}," Fog Compute Softlayer Server vlan=":{"type":"method","name":"vlan=","children":[],"call":[" attributes []= "," attributes ","Fog Network  [] networks get ","Fog Network  [] networks ","Fog Network  [] ","value is_a? "," raise "," __method__ "," class name "," class "," network_connection networks get "," network_connection networks "," network_connection ","Fog Network  [] networks get  is_a? "," network_connection networks get  is_a? "]}," Fog Compute Softlayer Server private_vlan":{"type":"method","name":"private_vlan","children":[],"call":[" _get_private_vlan "," attributes [] "," attributes "]}," Fog Compute Softlayer Server vlan":{"type":"method","name":"vlan","children":[],"call":[" _get_vlan "," attributes [] "," attributes "]}," String fix_convention_exceptions":{"type":"method","name":"fix_convention_exceptions","children":[],"call":[" gsub! "]}," Fog Softlayer Slapi user_agent_header":{"type":"method","name":"user_agent_header","children":[],"call":[]}," Fog Softlayer Slapi set_sl_path":{"type":"method","name":"set_sl_path","children":[],"call":[]}," Fog Softlayer Slapi set_sl_service":{"type":"method","name":"set_sl_service","children":[],"call":[]}," Fog Softlayer Slapi credentialize_url":{"type":"method","name":"credentialize_url","children":[],"call":[]}," Fog Softlayer Slapi slapi_request":{"type":"method","name":"slapi_request","children":[],"call":[]}," Fog Compute Softlayer Real initialize":{"type":"method","name":"initialize","children":[],"call":["options [] "]}," Fog Network Softlayer Real unroute_global_ip":{"type":"method","name":"unroute_global_ip","children":[],"call":[" request "]}," Fog Network Softlayer Mock unroute_global_ip":{"type":"method","name":"unroute_global_ip","children":[],"call":[" raise "]}," Fog Network Softlayer Real route_global_ip":{"type":"method","name":"route_global_ip","children":[],"call":[" request "]}," Fog Network Softlayer Mock route_global_ip":{"type":"method","name":"route_global_ip","children":[],"call":[" raise "]}," Fog Network Softlayer Real get_ip_addresses":{"type":"method","name":"get_ip_addresses","children":[],"call":[" request "]}," Fog Network Softlayer Mock get_ip_addresses":{"type":"method","name":"get_ip_addresses","children":[],"call":[" raise "]}," Fog Network Softlayer Real get_global_ip_records":{"type":"method","name":"get_global_ip_records","children":[],"call":[" request "]}," Fog Network Softlayer Mock get_global_ip_records":{"type":"method","name":"get_global_ip_records","children":[],"call":[" raise "]}," Fog Network Softlayer Real get_global_ip_address":{"type":"method","name":"get_global_ip_address","children":[],"call":[" request "]}," Fog Network Softlayer Mock get_global_ip_address":{"type":"method","name":"get_global_ip_address","children":[],"call":[" raise "]}," Fog Network Softlayer Real delete_global_ip_address":{"type":"method","name":"delete_global_ip_address","children":[],"call":[" request ","billing [] "," raise ","billing nil? "," request body "," request body  [] "," request body  nil? "]}," Fog Network Softlayer Mock delete_global_ip_address":{"type":"method","name":"delete_global_ip_address","children":[],"call":[" raise "]}," Fog Compute Softlayer Real update_key_pair":{"type":"method","name":"update_key_pair","children":[],"call":[" request "]}," Fog Compute Softlayer Mock update_key_pair":{"type":"method","name":"update_key_pair","children":[],"call":["response body= ","@key_pairs []= ","key_pair merge ","response status= ","key_pair nil? ","(send\n  (send\n    (ivar :@key_pairs) :each_with_index) :map) compact flatten ","(send\n  (send\n    (ivar :@key_pairs) :each_with_index) :map) compact ","kp [] == ","kp [] ","@key_pairs each_with_index map ","@key_pairs each_with_index ","Excon Response  new ","@key_pairs each_with_index select ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Compute Softlayer Real get_key_pairs":{"type":"method","name":"get_key_pairs","children":[],"call":[" request "]}," Fog Compute Softlayer Mock get_key_pairs":{"type":"method","name":"get_key_pairs","children":[],"call":["response status= ","response body= ","Excon Response  new ","Excon Response  new  status= ","Excon Response  new  body= "]}," Fog Compute Softlayer Real get_key_pair":{"type":"method","name":"get_key_pair","children":[],"call":[" request "]}," Fog Compute Softlayer Mock get_key_pair":{"type":"method","name":"get_key_pair","children":[],"call":["response status= ","response body= ","key_pair nil? ","(send\n  (ivar :@key_pairs) :select) first ","kp [] == ","kp [] ","@key_pairs select ","Excon Response  new "," identifier ","Excon Response  new  status= ","Excon Response  new  body= ","(send\n  (ivar :@key_pairs) :select) first  nil? ","(send\n  (ivar :@(send\n  (ivar :@key_pairs) :select) first s) :select) first ","@(send\n  (ivar :@key_pairs) :select) first s select "]}," Fog Compute Softlayer Real delete_key_pair":{"type":"method","name":"delete_key_pair","children":[],"call":[" request "]}," Fog Compute Softlayer Mock delete_key_pair":{"type":"method","name":"delete_key_pair","children":[],"call":["response body= ","response status= ","(send\n  (ivar :@key_pairs) :reject!) nil? ","kp [] == ","kp [] ","@key_pairs reject! ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Compute Softlayer Real create_key_pair":{"type":"method","name":"create_key_pair","children":[],"call":[" request "]}," Fog Compute Softlayer Mock create_key_pair":{"type":"method","name":"create_key_pair","children":[],"call":["@key_pairs push ","response body ","response body= ","opts [] ","Fog Mock  random_numbers to_i ","Fog Mock  random_numbers ","Time  now iso8601 ","Time  now ","response status= ","Excon Response  new ","Excon Response  new  body ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Network Softlayer Real global_ipv6_price_code":{"type":"method","name":"global_ipv6_price_code","children":[],"call":["(send\n  (send\n    (send nil :request\n      (sym :product_package)\n      (str \"0/get_item_prices\")\n      (hash\n        (pair\n          (sym :query)\n          (str \"objectMask=mask[id,item.description,categories.id]\")))) :body) :map) compact first ","(send\n  (send\n    (send nil :request\n      (sym :product_package)\n      (str \"0/get_item_prices\")\n      (hash\n        (pair\n          (sym :query)\n          (str \"objectMask=mask[id,item.description,categories.id]\")))) :body) :map) compact ","item [] ","item [] [] [] == "," global_ipv6_cat_code ","item [] [] [] ","item [] [] "," request body map "," request body "," request "]}," Fog Network Softlayer Real global_ipv4_price_code":{"type":"method","name":"global_ipv4_price_code","children":[],"call":["(send\n  (send\n    (send nil :request\n      (sym :product_package)\n      (str \"0/get_item_prices\")\n      (hash\n        (pair\n          (sym :query)\n          (str \"objectMask=mask[id,item.description,categories.id]\")))) :body) :map) compact first ","(send\n  (send\n    (send nil :request\n      (sym :product_package)\n      (str \"0/get_item_prices\")\n      (hash\n        (pair\n          (sym :query)\n          (str \"objectMask=mask[id,item.description,categories.id]\")))) :body) :map) compact ","item [] ","item [] [] [] == "," global_ipv4_cat_code ","item [] [] [] ","item [] [] "," request body map "," request body "," request ","item [] [] nil? ! ","item [] [] nil? ","item has_key? "]}," Fog Network Softlayer Real global_ipv6_cat_code":{"type":"method","name":"global_ipv6_cat_code","children":[],"call":["(send\n  (send\n    (send nil :request\n      (sym :product_package)\n      (str \"0/get_configuration\")\n      (hash\n        (pair\n          (sym :query)\n          (str \"objectMask=mask[isRequired,itemCategory]\")))) :body) :map) compact first ","(send\n  (send\n    (send nil :request\n      (sym :product_package)\n      (str \"0/get_configuration\")\n      (hash\n        (pair\n          (sym :query)\n          (str \"objectMask=mask[isRequired,itemCategory]\")))) :body) :map) compact ","item [] [] ","item [] ","item [] [] == "," request body map "," request body "," request "]}," Fog Network Softlayer Real global_ipv4_cat_code":{"type":"method","name":"global_ipv4_cat_code","children":[],"call":["(send\n  (send\n    (send nil :request\n      (sym :product_package)\n      (str \"0/get_configuration\")\n      (hash\n        (pair\n          (sym :query)\n          (str \"objectMask=mask[isRequired,itemCategory]\")))) :body) :map) compact first ","(send\n  (send\n    (send nil :request\n      (sym :product_package)\n      (str \"0/get_configuration\")\n      (hash\n        (pair\n          (sym :query)\n          (str \"objectMask=mask[isRequired,itemCategory]\")))) :body) :map) compact ","item [] [] ","item [] ","item [] [] == "," request body map "," request body "," request "]}," Fog Network Softlayer Real create_new_global_ipv6":{"type":"method","name":"create_new_global_ipv6","children":[],"call":[" request status == "," request status "," request "," global_ipv6_price_code "]}," Fog Network Softlayer Real create_new_global_ipv4":{"type":"method","name":"create_new_global_ipv4","children":[],"call":[" request status == "," request status "," request "," global_ipv4_price_code "]}," Fog Network Softlayer Ip unroute":{"type":"method","name":"unroute","children":[],"call":[" service unroute_global_ip status == "," service unroute_global_ip status "," service unroute_global_ip "," global_id "," service "," requires "]}," Fog Network Softlayer Ip routed?":{"type":"method","name":"routed?","children":[],"call":[" destination_ip ! ! "," destination_ip ! "," destination_ip "," assigned_to ! ! "," assigned_to ! "," assigned_to "]}," Fog Network Softlayer Ip route":{"type":"method","name":"route","children":[],"call":[" service route_global_ip status == "," service route_global_ip status "," service route_global_ip ","dest_ip address "," global_id "," service "," raise ","dest_ip global? ","dest_ip broadcast? ","dest_ip gateway? ","dest_ip network? "," __method__ "," class name "," class ","dest_ip is_a? "," requires "]}," Fog Network Softlayer Ip global?":{"type":"method","name":"global?","children":[],"call":[" attributes [] ! ! "," attributes [] ! "," attributes [] "," attributes "]}," Fog Network Softlayer Ip destination_ip=":{"type":"method","name":"destination_ip=","children":[],"call":[" raise "," __method__ "," class name "," class "," attributes []= "," attributes ","ip nil? ","ip is_a? ","Fog Network Softlayer Ip  new "]}," Fog Compute Softlayer Server key_pairs=":{"type":"method","name":"key_pairs=","children":[],"call":[" attributes [] << "," attributes [] "," attributes "," service key_pairs get ","key [] "," service key_pairs "," service ","key is_a? "," raise "," __method__ "," class name "," class "," symbolize_keys ","keys map "," attributes []= "," local_variables first to_s "," local_variables first "," local_variables ","keys is_a? ","key [] is_a? "," service  service key_pairs get _pairs get "," service  symbolize_keys _pairs get "," service key_pairs get  [] "," symbolize_keys  [] "," service  service key_pairs get _pairs "," service  symbolize_keys _pairs "," service key_pairs get  is_a? "," symbolize_keys  is_a? "," symbolize_ service key_pairs get s "," symbolize_ symbolize_keys s "," service key_pairs get s map "," symbolize_keys s map "," service key_pairs get s is_a? "," symbolize_keys s is_a? "," service key_pairs get  [] is_a? "," symbolize_keys  [] is_a? "]}," Fog Compute Softlayer Server key_pairs":{"type":"method","name":"key_pairs","children":[],"call":[" attributes [] "," attributes "]}," Fog Compute Softlayer Server os_code":{"type":"method","name":"os_code","children":[],"call":[" attributes [] [] [] [] "," attributes [] [] [] "," attributes [] [] "," attributes [] "," attributes "," os "]}," Fog Compute Softlayer KeyPairs by_label":{"type":"method","name":"by_label","children":[],"call":["(send\n  (send nil :all) :select) first ","key_pair label == ","key_pair label "," all select "," all "]}," Fog Compute Softlayer KeyPairs get":{"type":"method","name":"get","children":[],"call":[" new "," service get_key_pair body "," service get_key_pair "," service "," service get_ service get_key_pair body  body "," service get_ service get_key_pair body  "]}," Fog Compute Softlayer KeyPairs all":{"type":"method","name":"all","children":[],"call":[" load "," service get_key_pairs body "," service get_key_pairs "," service "]}," Fog Compute Softlayer KeyPair destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_key_pair "," id "," service "," requires "]}," Fog Compute Softlayer KeyPair update":{"type":"method","name":"update","children":[],"call":[" merge_attributes "," service update_key_pair body "," service update_key_pair "," attributes "," id "," service "," requires "]}," Fog Compute Softlayer KeyPair create":{"type":"method","name":"create","children":[],"call":[" merge_attributes "," service create_key_pair body "," service create_key_pair "," attributes "," service "," requires "]}," Fog Compute Softlayer KeyPair save":{"type":"method","name":"save","children":[],"call":[" create "," update "," identity "]}," String softlayer_underscore":{"type":"method","name":"softlayer_underscore","children":[],"call":[" gsub gsub gsub tr downcase "," gsub gsub gsub tr "," gsub gsub gsub "," gsub gsub "," gsub "]}," String softlayer_camelize":{"type":"method","name":"softlayer_camelize","children":[],"call":["(send\n  (send\n    (self) :split\n    (str \"_\")) :inject\n  (array)) join ","buffer push ","e capitalize ","buffer empty? "," split inject "," split "]}," Fog Compute Softlayer Server user_data":{"type":"method","name":"user_data","children":[],"call":[" attributes [] "," attributes "]}," Fog Compute Softlayer Server user_data=":{"type":"method","name":"user_data=","children":[],"call":[" attributes []= "," attributes "]}," Fog Compute Softlayer Server public_ip":{"type":"method","name":"public_ip","children":[],"call":[" public_ip_address "]}," Fog Compute Softlayer Server private_ip":{"type":"method","name":"private_ip","children":[],"call":[" private_ip_address "]}," Fog Compute Softlayer Image public?":{"type":"method","name":"public?","children":[],"call":[" public_flag == "," public_flag "]}," Fog Compute Softlayer Server private_network_components":{"type":"method","name":"private_network_components","children":[],"call":["Fog Compute Softlayer NetworkComponent  new "," attributes [] map "," attributes [] "," attributes "]}," Fog Compute Softlayer Server public_network_components":{"type":"method","name":"public_network_components","children":[],"call":["Fog Compute Softlayer NetworkComponent  new "," attributes [] map "," attributes [] "," attributes "]}," Fog Compute Softlayer Server network_components":{"type":"method","name":"network_components","children":[],"call":[" attributes [] "," attributes ","(send\n  (send nil :public_network_components) :<<\n  (send nil :private_network_components)) flatten "," public_network_components << "," private_network_components "," public_network_components "," id "]}," Fog Compute Softlayer NetworkComponent destroy":{"type":"method","name":"destroy","children":[],"call":[" raise "," class name "," class "]}," Fog Compute Softlayer NetworkComponent update":{"type":"method","name":"update","children":[],"call":[" raise "," class name "," class "]}," Fog Compute Softlayer NetworkComponent create":{"type":"method","name":"create","children":[],"call":[" raise "," class name "," class "]}," Fog Compute Softlayer NetworkComponent save":{"type":"method","name":"save","children":[],"call":[" raise "," class name "," class "]}," Fog Network Softlayer Real get_portable_subnet_price_code":{"type":"method","name":"get_portable_subnet_price_code","children":[],"call":["(send\n  (send\n    (send nil :request\n      (sym :product_package)\n      (str \"0/get_item_prices\")\n      (hash\n        (pair\n          (sym :query)\n          (str \"objectMask=mask[id,categories.id,item.description]\")))) :body) :map) compact first ","(send\n  (send\n    (send nil :request\n      (sym :product_package)\n      (str \"0/get_item_prices\")\n      (hash\n        (pair\n          (sym :query)\n          (str \"objectMask=mask[id,categories.id,item.description]\")))) :body) :map) compact ","item [] ","item [] [] =~ ","item [] [] ","catg [] == ","catg [] "," request body map "," request body "," request "," get_portable_subnet_package_id ","item [] []  [] == ","item [] []  [] "," get_ get_portable_subnet_package_id  "]}," Fog Network Softlayer Mock get_portable_subnet_price_code":{"type":"method","name":"get_portable_subnet_price_code","children":[],"call":[]}," Fog Network Softlayer Real get_portable_subnet_package_id":{"type":"method","name":"get_portable_subnet_package_id","children":[],"call":["(send\n  (send\n    (send nil :request\n      (sym :product_package)\n      (str \"0/get_configuration\")\n      (hash\n        (pair\n          (sym :query)\n          (str \"objectMask=mask[isRequired,itemCategory]\")))) :body) :map) compact first ","(send\n  (send\n    (send nil :request\n      (sym :product_package)\n      (str \"0/get_configuration\")\n      (hash\n        (pair\n          (sym :query)\n          (str \"objectMask=mask[isRequired,itemCategory]\")))) :body) :map) compact ","item [] [] ","item [] ","item [] [] == ","address_space == "," request body map "," request body "," request "," raise ","private public include? "," __method__ "," class name "," class ","address_space downcase! "]}," Fog Network Softlayer Mock get_portable_subnet_package_id":{"type":"method","name":"get_portable_subnet_package_id","children":[],"call":[" raise ","private public include? "," __method__ "," class name "," class ","address_space downcase! "]}," Fog Network Softlayer Real create_subnet":{"type":"method","name":"create_subnet","children":[],"call":[" request "," raise "," __method__ "," class name "," class ","order is_a? "]}," Fog Network Softlayer Mock create_subnet":{"type":"method","name":"create_subnet","children":[],"call":[" raise "," __method__ "," class name "," class ","order is_a? "]}," Fog Network Softlayer Subnet build_order":{"type":"method","name":"build_order","children":[],"call":["order []= "," vlan_id "," portable? "," service get_subnet_price_code "," service "," service get_portable_subnet_price_code "," public? "," datacenter "]}," Fog Network Softlayer Subnet public?":{"type":"method","name":"public?","children":[],"call":[" private? ! "," private? "]}," Fog Network Softlayer Subnet private?":{"type":"method","name":"private?","children":[],"call":[" address_space == "," address_space "]}," Fog Network Softlayer Subnet portable?":{"type":"method","name":"portable?","children":[],"call":[" type == "," type "]}," Fog Softlayer Slapi sanitize_username":{"type":"method","name":"sanitize_username","children":[],"call":[]}," Fog Compute Softlayer Server relaunch!":{"type":"method","name":"relaunch!","children":[],"call":["(int 200) include? "," ready? ! "," ready? "," wait_for "," service request status "," service request "," id "," service "," bare_metal? ","body [] []= ","kp id "," key_pairs map "," key_pairs ","body [] "," key_pairs empty? "," requires "," service request  service request status  "]}," Fog Compute Softlayer Server network_connection":{"type":"method","name":"network_connection","children":[],"call":["Fog Network  new "," service instance_variable_get "," service "]}," Fog Compute Softlayer Server os":{"type":"method","name":"os","children":[],"call":[" attributes [] [] [] [] "," attributes [] [] [] "," attributes [] [] "," attributes [] "," attributes "]}," Fog Softlayer Product Mock fixtures_packages":{"type":"method","name":"fixtures_packages","children":[],"call":[]}," Fog Softlayer Product Real get_packages":{"type":"method","name":"get_packages","children":[],"call":[" request "]}," Fog Softlayer Product Mock get_packages":{"type":"method","name":"get_packages","children":[],"call":["response status= ","response body= "," fixtures_packages ","Excon Response  new ","Excon Response  new  status= ","Excon Response  new  body= "]}," Fog Softlayer Product Mock fixtures_package_items":{"type":"method","name":"fixtures_package_items","children":[],"call":["fixture_package_items [] ","fixture_package_items []= ","Array  new ","Array  new  [] ","Array  new  []= "]}," Fog Softlayer Product Real get_package_items":{"type":"method","name":"get_package_items","children":[],"call":[" request ","package_id to_s + ","package_id to_s "]}," Fog Softlayer Product Mock get_package_items":{"type":"method","name":"get_package_items","children":[],"call":["response status= ","response body= "," fixtures_package_items ","Excon Response  new ","Excon Response  new  status= ","Excon Response  new  body= "]}," Fog Softlayer Product Real get_package_item":{"type":"method","name":"get_package_item","children":[],"call":[" request ","queryEngineVersion=2&objectFilter={\"items\":{\"id\":{\"operation\": + + ","queryEngineVersion=2&objectFilter={\"items\":{\"id\":{\"operation\": + ","id to_s ","package_id to_s + ","package_id to_s "]}," Fog Softlayer Product Mock get_package_item":{"type":"method","name":"get_package_item","children":[],"call":["response status= ","response body= ","item [] == ","item [] ","items each "," fixtures_package_items ","Excon Response  new ","Excon Response  new  status= ","Excon Response  new  body= "," fixtures_package_items  each "," fixtures_package_ fixtures_package_items  "]}," Fog Softlayer Product Real user_agent_header":{"type":"method","name":"user_agent_header","children":[],"call":[]}," Fog Softlayer Product Real set_sl_path":{"type":"method","name":"set_sl_path","children":[],"call":["path to_s softlayer_underscore softlayer_camelize ","path to_s softlayer_underscore ","path to_s ","path to_s softlayer_underscore softlayer_camelize  to_s softlayer_underscore softlayer_camelize ","path to_s softlayer_underscore softlayer_camelize  to_s softlayer_underscore ","path to_s softlayer_underscore softlayer_camelize  to_s "]}," Fog Softlayer Product Real set_sl_service":{"type":"method","name":"set_sl_service","children":[],"call":["SoftLayer_ << ","(send\n  (send\n    (send\n      (send\n        (lvar :service) :to_s) :gsub\n      (regexp\n        (str \"^softlayer_\")\n        (regopt :i))\n      (str \"\")) :split\n    (str \"_\")) :map) join ","i [] upcase + ","i [] ","i [] upcase ","service to_s gsub split map ","service to_s gsub split ","service to_s gsub ","service to_s ","(send\n  (send\n    (send\n      (send\n        (lvar :SoftLayer_ << ) :to_s) :gsub\n      (regexp\n        (str \"^softlayer_\")\n        (regopt :i))\n      (str \"\")) :split\n    (str \"_\")) :map) join ","SoftLayer_ <<  to_s gsub split map ","SoftLayer_ <<  to_s gsub split ","SoftLayer_ <<  to_s gsub ","SoftLayer_ <<  to_s "]}," Fog Softlayer Product Real credentialize_url":{"type":"method","name":"credentialize_url","children":[],"call":[]}," Fog Softlayer Product Real request":{"type":"method","name":"request","children":[],"call":["response body= ","Fog JSON  decode ","response body ","@connection request ","Fog Core Connection  new ","params []= ","options [] ","options [] nil? ","Fog JSON  encode ","params [] []= ","params [] "," user_agent_header "," set_sl_path "," set_sl_service "," credentialize_url ","@credentials [] ","@connection request  body= ","@connection request  body ","Fog Core Connection  new  request "]}," Fog Softlayer Product Mock initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Fog Softlayer Product Packages all":{"type":"method","name":"all","children":[],"call":[" load "," service get_packages body "," service get_packages "," service "]}," Fog Softlayer Product Packages initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Fog Softlayer Product Package items":{"type":"method","name":"items","children":[],"call":["Fog Softlayer Product Items  new all ","Fog Softlayer Product Items  new "," id "," service "]}," Fog Softlayer Product Package initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Fog Softlayer Product Items get":{"type":"method","name":"get","children":[],"call":[" new merge_attributes "," new "," service get_package_item body first "," service get_package_item body "," service get_package_item "," package_id "," service ","identifier == ","identifier nil? "," requires "]}," Fog Softlayer Product Items all":{"type":"method","name":"all","children":[],"call":[" load "," service get_package_items body "," service get_package_items "," package_id "," service "," requires "]}," Fog Softlayer Product Items initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Fog Softlayer Product Item initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Fog Compute Softlayer Real reboot_vm":{"type":"method","name":"reboot_vm","children":[],"call":[" request ","id to_s "]}," Fog Compute Softlayer Mock reboot_vm":{"type":"method","name":"reboot_vm","children":[],"call":["response body= ","response status= ","found ! ","(send\n  (send\n    (send\n      (self) :get_vms) :body) :map) include? ","server [] "," get_vms body map "," get_vms body "," get_vms ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= ","(send\n  (send\n    (send\n      (self) :get_vms) :body) :map) include?  ! "]}," Fog Compute Softlayer Real reboot_bare_metal_server":{"type":"method","name":"reboot_bare_metal_server","children":[],"call":[" request ","id to_s "]}," Fog Compute Softlayer Mock reboot_bare_metal_server":{"type":"method","name":"reboot_bare_metal_server","children":[],"call":["response body= ","response status= ","found ! ","(send\n  (send\n    (send\n      (self) :get_bare_metal_servers) :body) :map) include? ","server [] "," get_bare_metal_servers body map "," get_bare_metal_servers body "," get_bare_metal_servers ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= ","(send\n  (send\n    (send\n      (self) :get_bare_metal_servers) :body) :map) include?  ! "]}," Fog Compute Softlayer Real power_on_vm":{"type":"method","name":"power_on_vm","children":[],"call":[" request ","id to_s "]}," Fog Compute Softlayer Mock power_on_vm":{"type":"method","name":"power_on_vm","children":[],"call":["response body= ","response status= ","found ! ","(send\n  (send\n    (send\n      (self) :get_vms) :body) :map) include? ","server [] "," get_vms body map "," get_vms body "," get_vms ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= ","(send\n  (send\n    (send\n      (self) :get_vms) :body) :map) include?  ! "]}," Fog Compute Softlayer Real power_on_bare_metal_server":{"type":"method","name":"power_on_bare_metal_server","children":[],"call":[" request ","id to_s "]}," Fog Compute Softlayer Mock power_on_bare_metal_server":{"type":"method","name":"power_on_bare_metal_server","children":[],"call":["response body= ","response status= ","found ! ","(send\n  (send\n    (send\n      (self) :get_bare_metal_servers) :body) :map) include? ","server [] "," get_bare_metal_servers body map "," get_bare_metal_servers body "," get_bare_metal_servers ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= ","(send\n  (send\n    (send\n      (self) :get_bare_metal_servers) :body) :map) include?  ! "]}," Fog Compute Softlayer Real power_off_vm":{"type":"method","name":"power_off_vm","children":[],"call":[" request ","id to_s "]}," Fog Compute Softlayer Mock power_off_vm":{"type":"method","name":"power_off_vm","children":[],"call":["response body= ","response status= ","found ! ","(send\n  (send\n    (send\n      (self) :get_vms) :body) :map) include? ","server [] "," get_vms body map "," get_vms body "," get_vms ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= ","(send\n  (send\n    (send\n      (self) :get_vms) :body) :map) include?  ! "]}," Fog Compute Softlayer Real power_off_bare_metal_server":{"type":"method","name":"power_off_bare_metal_server","children":[],"call":[" request ","id to_s "]}," Fog Compute Softlayer Mock power_off_bare_metal_server":{"type":"method","name":"power_off_bare_metal_server","children":[],"call":["response body= ","response status= ","found ! ","(send\n  (send\n    (send\n      (self) :get_bare_metal_servers) :body) :map) include? ","server [] "," get_bare_metal_servers body map "," get_bare_metal_servers body "," get_bare_metal_servers ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= ","(send\n  (send\n    (send\n      (self) :get_bare_metal_servers) :body) :map) include?  ! "]}," Fog Compute Softlayer Mock get_users":{"type":"method","name":"get_users","children":[],"call":[]}," Fog Compute Softlayer Real get_virtual_guest_users":{"type":"method","name":"get_virtual_guest_users","children":[],"call":[" request "]}," Fog Compute Softlayer Mock get_virtual_guest_users":{"type":"method","name":"get_virtual_guest_users","children":[],"call":["response body= ","response status= "," get_users ","(send\n  (send\n    (send\n      (self) :get_vms) :body) :map) include? ","server [] "," get_vms body map "," get_vms body "," get_vms ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Compute Softlayer Mock virtual_guest_options":{"type":"method","name":"virtual_guest_options","children":[],"call":[]}," Fog Compute Softlayer Real get_virtual_guest_create_options":{"type":"method","name":"get_virtual_guest_create_options","children":[],"call":[" request "]}," Fog Compute Softlayer Mock get_virtual_guest_create_options":{"type":"method","name":"get_virtual_guest_create_options","children":[],"call":["response status= ","response body= "," virtual_guest_options ","Excon Response  new ","Excon Response  new  status= ","Excon Response  new  body= "]}," Fog Compute Softlayer Real get_virtual_guest_by_ip":{"type":"method","name":"get_virtual_guest_by_ip","children":[],"call":[" request "]}," Fog Compute Softlayer Mock get_virtual_guest_by_ip":{"type":"method","name":"get_virtual_guest_by_ip","children":[],"call":["response body= ","response status == ","response status ","response status= ","response body empty? ","response body ","(send\n  (ivar :@virtual_guests) :map) compact first ","(send\n  (ivar :@virtual_guests) :map) compact ","vm [] == ","vm [] ","@virtual_guests map ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status == ","Excon Response  new  status ","Excon Response  new  status= ","Excon Response  new  body empty? ","Excon Response  new  body "]}," Fog Compute Softlayer Mock get_active_tickets":{"type":"method","name":"get_active_tickets","children":[],"call":[]}," Fog Compute Softlayer Real get_virtual_guest_active_tickets":{"type":"method","name":"get_virtual_guest_active_tickets","children":[],"call":[" request ","id to_s "]}," Fog Compute Softlayer Mock get_virtual_guest_active_tickets":{"type":"method","name":"get_virtual_guest_active_tickets","children":[],"call":["response body= ","response status= "," get_active_tickets ","(send\n  (send\n    (send\n      (self) :get_vms) :body) :map) include? ","server [] "," get_vms body map "," get_vms body "," get_vms ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Compute Softlayer Real get_bare_metal_users":{"type":"method","name":"get_bare_metal_users","children":[],"call":[" request "]}," Fog Compute Softlayer Mock get_bare_metal_users":{"type":"method","name":"get_bare_metal_users","children":[],"call":["response body= ","response status= "," get_users ","(send\n  (send\n    (send\n      (self) :get_bare_metal_servers) :body) :map) include? ","server [] "," get_bare_metal_servers body map "," get_bare_metal_servers body "," get_bare_metal_servers ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Compute Softlayer Real get_bare_metal_server_by_ip":{"type":"method","name":"get_bare_metal_server_by_ip","children":[],"call":[" request "]}," Fog Compute Softlayer Mock get_bare_metal_server_by_ip":{"type":"method","name":"get_bare_metal_server_by_ip","children":[],"call":["response body= ","response status == ","response status ","response status= ","response body empty? ","response body ","(send\n  (ivar :@bare_metal_servers) :map) compact first ","(send\n  (ivar :@bare_metal_servers) :map) compact ","vm [] == ","ip_address to_s ","vm [] ","@bare_metal_servers map ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status == ","Excon Response  new  status ","Excon Response  new  status= ","Excon Response  new  body empty? ","Excon Response  new  body "]}," Fog Compute Softlayer Mock bare_metal_options":{"type":"method","name":"bare_metal_options","children":[],"call":[]}," Fog Compute Softlayer Real get_bare_metal_create_options":{"type":"method","name":"get_bare_metal_create_options","children":[],"call":[" request "]}," Fog Compute Softlayer Mock get_bare_metal_create_options":{"type":"method","name":"get_bare_metal_create_options","children":[],"call":["response status= ","response body= "," bare_metal_options ","Excon Response  new ","Excon Response  new  status= ","Excon Response  new  body= "]}," Fog Compute Softlayer Real get_bare_metal_active_tickets":{"type":"method","name":"get_bare_metal_active_tickets","children":[],"call":[" request ","id to_s "]}," Fog Compute Softlayer Mock get_bare_metal_active_tickets":{"type":"method","name":"get_bare_metal_active_tickets","children":[],"call":["response body= ","response status= "," get_active_tickets ","(send\n  (send\n    (send\n      (self) :get_bare_metal_servers) :body) :map) include? ","server [] "," get_bare_metal_servers body map "," get_bare_metal_servers body "," get_bare_metal_servers ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Compute Softlayer Servers get_vm_create_options":{"type":"method","name":"get_vm_create_options","children":[],"call":[" service get_virtual_guest_create_options body "," service get_virtual_guest_create_options "," service "]}," Fog Compute Softlayer Servers get_bm_create_options":{"type":"method","name":"get_bm_create_options","children":[],"call":[" service get_bare_metal_create_options body "," service get_bare_metal_create_options "," service "]}," Fog Compute Softlayer Servers get_by_ip":{"type":"method","name":"get_by_ip","children":[],"call":[" new merge_attributes "," new ","data []= ","response body "," service get_bare_metal_server_by_ip "," service ","response status == ","response status "," service get_virtual_guest_by_ip ","ip blank? ","response body  []= "," service get_bare_metal_server_by_ip  body "," service get_virtual_guest_by_ip  body "," service get_bare_metal_server_by_ip  status == "," service get_virtual_guest_by_ip  status == "," service get_bare_metal_server_by_ip  status "," service get_virtual_guest_by_ip  status "]}," Fog Compute Softlayer Server get_users":{"type":"method","name":"get_users","children":[],"call":[" service get_virtual_guest_users body "," service get_virtual_guest_users "," id "," service "," service get_bare_metal_users body "," service get_bare_metal_users "," bare_metal? "]}," Fog Compute Softlayer Server get_active_tickets":{"type":"method","name":"get_active_tickets","children":[],"call":[" service get_virtual_guest_active_tickets body "," service get_virtual_guest_active_tickets "," id "," service "," service get_bare_metal_active_tickets body "," service get_bare_metal_active_tickets "," bare_metal? "]}," Fog Storage Softlayer Directory public":{"type":"method","name":"public","children":[],"call":[" attributes [] ! ! "," attributes [] ! "," attributes [] "," attributes "]}," Fog Product Softlayer Mock place_order_mock":{"type":"method","name":"place_order_mock","children":[],"call":[]}," Fog Softlayer Product Real place_order":{"type":"method","name":"place_order","children":[],"call":[" request "]}," Fog Softlayer Product Mock place_order":{"type":"method","name":"place_order","children":[],"call":["response status= ","response body= "," place_order_mock ","Excon Response  new ","Excon Response  new  status= ","Excon Response  new  body= "]}," Fog Compute Softlayer Mock get_upgrade_item_prices":{"type":"method","name":"get_upgrade_item_prices","children":[],"call":[]}," Fog Compute Softlayer Real get_virtual_guest_upgrade_item_prices":{"type":"method","name":"get_virtual_guest_upgrade_item_prices","children":[],"call":[" request "]}," Fog Compute Softlayer Mock get_virtual_guest_upgrade_item_prices":{"type":"method","name":"get_virtual_guest_upgrade_item_prices","children":[],"call":["response body= ","response status= "," get_upgrade_item_prices ","(send\n  (send\n    (send\n      (self) :get_vms) :body) :map) include? ","id to_s ","server [] "," get_vms body map "," get_vms body "," get_vms ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Compute Softlayer Mock get_upgrade_options":{"type":"method","name":"get_upgrade_options","children":[],"call":[]}," Fog Compute Softlayer Real get_bare_metal_upgrade_item_prices":{"type":"method","name":"get_bare_metal_upgrade_item_prices","children":[],"call":[" request "]}," Fog Compute Softlayer Mock get_bare_metal_upgrade_item_prices":{"type":"method","name":"get_bare_metal_upgrade_item_prices","children":[],"call":["response body= ","response status= "," get_upgrade_item_prices ","(send\n  (send\n    (send\n      (self) :get_bare_metal_servers) :body) :map) include? ","id to_s ","server [] "," get_bare_metal_servers body map "," get_bare_metal_servers body "," get_bare_metal_servers ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Compute Softlayer Mock order_template_mock":{"type":"method","name":"order_template_mock","children":[],"call":[]}," Fog Compute Softlayer Real generate_virtual_guest_order_template":{"type":"method","name":"generate_virtual_guest_order_template","children":[],"call":[" request "]}," Fog Compute Softlayer Mock generate_virtual_guest_order_template":{"type":"method","name":"generate_virtual_guest_order_template","children":[],"call":["@virtual_guests push flatten! ","@virtual_guests push ","response body ","response body= ","required join ","response status= "," order_template_mock "," raise ","Fog Softlayer  valid_request? ","Excon Response  new ","order_template kind_of? ","Excon Response  new  body ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Compute Softlayer Real generate_bare_metal_order_template":{"type":"method","name":"generate_bare_metal_order_template","children":[],"call":[" request "]}," Fog Compute Softlayer Mock generate_bare_metal_order_template":{"type":"method","name":"generate_bare_metal_order_template","children":[],"call":["@virtual_guests push flatten! ","@virtual_guests push ","response body ","response body= ","required join ","response status= "," order_template_mock "," raise ","Fog Softlayer  valid_request? ","Excon Response  new ","order_template kind_of? ","Excon Response  new  body ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Compute Softlayer Server generate_upgrade_order":{"type":"method","name":"generate_upgrade_order","children":[],"call":[" id ","Time  now iso8601 ","Time  now ","time iso8601 ","time present? "," vm_upgrade_order_template merge "," vm_upgrade_order_template "," bm_upgrade_order_template merge "," bm_upgrade_order_template "," bare_metal? "]}," Fog Compute Softlayer Server get_item_prices_id":{"type":"method","name":"get_item_prices_id","children":[],"call":["prices << "," get_item_prices_id_by_value ","update_attributes [] ","categories [] ","update_attributes each_pair ","update_attributes delete "," get_upgrade_options ","key to_s ","update_attributes map "]}," Fog Compute Softlayer Server get_item_prices_id_by_value":{"type":"method","name":"get_item_prices_id_by_value","children":[],"call":["item_price [] ","item_price [] [] to_i == ","item_price [] [] to_i ","item_price [] [] ","item_price_array find ","category_hash [] == ","category_hash [] ","item_price [] find ","item_price_array select ","item_price nil? ","item_price [] [] == ","value to_s ","item_prices find "]}," Fog Compute Softlayer Server generate_order_template":{"type":"method","name":"generate_order_template","children":[],"call":[" service generate_virtual_guest_order_template body "," service generate_virtual_guest_order_template ","copy attributes "," service "," service generate_bare_metal_order_template body "," service generate_bare_metal_order_template "," bare_metal? ","copy pre_save "," dup ","copy bare_metal? "," dup  attributes "," dup  pre_save "," dup  bare_metal? "]}," Fog Compute Softlayer Server update":{"type":"method","name":"update","children":[],"call":[" service place_order body "," service place_order "," service "," generate_upgrade_order ","update_attributes [] "," get_item_prices_id "," raise "," Exception "," bare_metal? ","@product_conn place_order body ","@product_conn place_order "," product_connection ","update_attributes nil? "," service place_ generate_upgrade_order  body "," service place_ generate_upgrade_order  "," generate_upgrade_ generate_upgrade_order  "," get_item_ get_item_prices_id _id ","@product_conn place_ generate_upgrade_order  body ","@product_conn place_ generate_upgrade_order  "]}," Fog Compute Softlayer Server get_upgrade_options":{"type":"method","name":"get_upgrade_options","children":[],"call":[" service get_virtual_guest_upgrade_item_prices body "," service get_virtual_guest_upgrade_item_prices "," id "," service "," service get_bare_metal_upgrade_item_prices body "," service get_bare_metal_upgrade_item_prices "," bare_metal? "]}," Fog Storage Softlayer Integrity validate_username!":{"type":"method","name":"validate_username!","children":[],"call":[" raise ","name =~ "]}," Fog Softlayer Product Mock place_order_mock":{"type":"method","name":"place_order_mock","children":[],"call":[]}," Fog Network Softlayer Mock get_windows":{"type":"method","name":"get_windows","children":[],"call":[]}," Fog Network Softlayer Real get_maintenance_windows":{"type":"method","name":"get_maintenance_windows","children":[],"call":[" request "]}," Fog Network Softlayer Mock get_maintenance_windows":{"type":"method","name":"get_maintenance_windows","children":[],"call":["response body= "," get_windows ","response status= ","Excon Response  new "," raise "," __method__ "," class name "," class ","slots_number nil? ","location_id nil? ","end_date nil? ","begin_date nil? ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Account Softlayer Mock mocked_accounts":{"type":"method","name":"mocked_accounts","children":[],"call":[]}," Fog Account Softlayer Real get_brand_owned_accounts":{"type":"method","name":"get_brand_owned_accounts","children":[],"call":[" request "]}," Fog Account Softlayer Mock get_brand_owned_accounts":{"type":"method","name":"get_brand_owned_accounts","children":[],"call":["response body= "," mocked_accounts ","response status= ","(send\n  (ivar :@brands) :select) empty? ","brand [] == ","identifier to_i ","brand [] ","@brands select ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Account Softlayer Real get_brand":{"type":"method","name":"get_brand","children":[],"call":[" request "]}," Fog Account Softlayer Mock get_brand":{"type":"method","name":"get_brand","children":[],"call":["response body= ","response status == ","response status ","response status= ","response body empty? ","response body ","(send\n  (ivar :@brands) :select) first ","brand [] == ","identifier to_i ","brand [] ","@brands select ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status == ","Excon Response  new  status ","Excon Response  new  status= ","Excon Response  new  body empty? ","Excon Response  new  body "]}," Fog Account Softlayer Mock mocked_brands":{"type":"method","name":"mocked_brands","children":[],"call":[]}," Fog Account Softlayer Real get_account_owned_brands":{"type":"method","name":"get_account_owned_brands","children":[],"call":[" request ","identifier nil? "]}," Fog Account Softlayer Mock get_account_owned_brands":{"type":"method","name":"get_account_owned_brands","children":[],"call":["response body= ","response status= ","(send\n  (ivar :@accounts) :select) empty? ","account [] == ","identifier to_i ","account [] ","@accounts select "," mocked_brands ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Account Softlayer Real create_brand":{"type":"method","name":"create_brand","children":[],"call":[" request "]}," Fog Account Softlayer Mock create_brand":{"type":"method","name":"create_brand","children":[],"call":["response body= ","required join ","response status= ","@brands << ","response body ","(pair\n  (sym :id)\n  (send\n    (send\n      (const\n        (const nil :Fog) :Softlayer) :mock_vm_id) :to_i)) merge ","Fog Softlayer  mock_vm_id to_i ","Fog Softlayer  mock_vm_id ","Fog Softlayer  valid_request? ","Excon Response  new "," raise ","attributes kind_of? ","Excon Response  new  body= ","Excon Response  new  status= ","Excon Response  new  body "]}," Fog Network Softlayer Datacenter get_avaliable_maintenance_windows":{"type":"method","name":"get_avaliable_maintenance_windows","children":[],"call":[" service get_maintenance_windows body "," service get_maintenance_windows "," id "," service "]}," Fog Compute Softlayer Server vm_upgrade_order_template":{"type":"method","name":"vm_upgrade_order_template","children":[],"call":["time iso8601 ","Time  now iso8601 ","Time  now ","time empty? ","time nil? "," id "]}," Fog Compute Softlayer Server bm_upgrade_order_template":{"type":"method","name":"bm_upgrade_order_template","children":[],"call":[" id "]}," Fog Compute Softlayer Server product_connection":{"type":"method","name":"product_connection","children":[],"call":["Fog Softlayer Product  new "," service instance_variable_get "," service "," service instance_variable_get [] ","Fog  mock? "]}," Fog Account Softlayer Brands get":{"type":"method","name":"get","children":[],"call":[" new merge_attributes "," new "," service get_brand body "," service get_brand "," service ","identifier == ","identifier nil? "]}," Fog Account Softlayer Brands all":{"type":"method","name":"all","children":[],"call":[" load "," service get_account_owned_brands "," service "]}," Fog Account Softlayer Brand create_template":{"type":"method","name":"create_template","children":[],"call":[" attributes [] "," attributes "]}," Fog Account Softlayer Brand create":{"type":"method","name":"create","children":[],"call":[" service create_brand body "," service create_brand "," service "," create_template "," create_ create_template  "]}," Fog Account Softlayer Brand save":{"type":"method","name":"save","children":[],"call":[" raise "," create "," attributes [] nil? "," attributes [] "," attributes "]}," Fog Account Softlayer Brand get_accounts":{"type":"method","name":"get_accounts","children":[],"call":[" service get_brand_owned_accounts body "," service get_brand_owned_accounts "," id "," service "]}," Fog Account Softlayer Brand initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Fog Account Softlayer Real request":{"type":"method","name":"request","children":[],"call":["Fog Softlayer Slapi  slapi_request ","(pair\n  (sym :username)\n  (ivar :@softlayer_username)) merge "]}," Fog Account Softlayer Real initialize":{"type":"method","name":"initialize","children":[],"call":["options [] "]}," Fog Account Softlayer Mock credentials":{"type":"method","name":"credentials","children":[],"call":[]}," Fog Account Softlayer Mock initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Fog Compute Softlayer Server provision_script":{"type":"method","name":"provision_script","children":[],"call":[" attributes [] "," attributes "]}," Fog Compute Softlayer Server provision_script=":{"type":"method","name":"provision_script=","children":[],"call":[" attributes []= "," attributes "]}," Fog Compute Softlayer Images private":{"type":"method","name":"private","children":[],"call":[" load "," service request body "," service request "," service "]}," Fog Network Softlayer Tags get":{"type":"method","name":"get","children":[],"call":[" new merge_attributes "," new ","response body "," service request "," service ","id == ","id nil? "," service request  body "]}," Fog Network Softlayer Tags all":{"type":"method","name":"all","children":[],"call":[" load ","filters include? ","data select! ","filters empty? "," service request body "," service request "," service "," filters= "," raise "," __method__ "," class name "," class ","filters is_a? "," service request body  select! "]}," Fog Network Softlayer Tags initialize":{"type":"method","name":"initialize","children":[],"call":[" filters "]}," Fog Network Softlayer Ips parse_global_ip_record":{"type":"method","name":"parse_global_ip_record","children":[],"call":["parsed []= ","record [] ","response [] "," service request body "," service request "," service ","response []  []= "," service request body  [] "]}," Fog Network Softlayer Ips global_records":{"type":"method","name":"global_records","children":[],"call":["@records []= ","record [] "," service get_global_ip_records body each "," service get_global_ip_records body "," service get_global_ip_records "," service ","@records empty? "]}," Fog Network Softlayer Ips get":{"type":"method","name":"get","children":[],"call":[" new "," service get_ip_address body "," service get_ip_address "," service "," parse_global_ip_record "," service get_global_ip_address body "," service get_global_ip_address "," global_records [] [] "," global_records [] "," global_records "," global_records keys include? "," global_records keys "," service get_ service get_ip_address body _address body "," service get_ parse_global_ip_record _address body "," service get_ service get_ip_address body _address "," service get_ parse_global_ip_record _address "," parse_global_ service get_ip_address body _record "," parse_global_ parse_global_ip_record _record "," service get_global_ service get_ip_address body _address body "," service get_global_ parse_global_ip_record _address body "," service get_global_ service get_ip_address body _address "," service get_global_ parse_global_ip_record _address "]}," Fog Network Softlayer Ips by_address":{"type":"method","name":"by_address","children":[],"call":[" new ","(send\n  (send\n    (send\n      (send nil :service) :get_ip_addresses) :body) :select) first ","ip [] == ","ip [] "," service get_ip_addresses body select "," service get_ip_addresses body "," service get_ip_addresses "," service ","(send\n  (send\n    (send\n      (send nil :service) :get_(send\n  (send\n    (send\n      (send nil :service) :get_ip_addresses) :body) :select) first _addresses) :body) :select) first ","(send\n  (send\n    (send\n      (send nil :service) :get_ip_addresses) :body) :select) first  [] == ","(send\n  (send\n    (send\n      (send nil :service) :get_ip_addresses) :body) :select) first  [] "," service get_(send\n  (send\n    (send\n      (send nil :service) :get_ip_addresses) :body) :select) first _addresses body select "," service get_(send\n  (send\n    (send\n      (send nil :service) :get_ip_addresses) :body) :select) first _addresses body "," service get_(send\n  (send\n    (send\n      (send nil :service) :get_ip_addresses) :body) :select) first _addresses "]}," Fog Network Softlayer Ips all":{"type":"method","name":"all","children":[],"call":[" load ","ips []= "," parse_global_ip_record "," service get_global_ip_address body "," service get_global_ip_address "," global_records [] [] "," global_records [] ","ip [] "," global_records "," service "," global_records keys include? "," global_records keys ","ips each_with_index "," service get_ip_addresses body "," service get_ip_addresses "," filters= "," service get_ip_addresses body  []= "," service get_ip_addresses body  each_with_index "]}," Fog Network Softlayer Ips initialize":{"type":"method","name":"initialize","children":[],"call":[" filters "]}," Fog Network Softlayer Datacenters by_name":{"type":"method","name":"by_name","children":[],"call":["(send\n  (send nil :all) :map) compact first ","(send\n  (send nil :all) :map) compact ","dc name == ","dc name "," all map "," all "]}," Fog Network Softlayer Datacenters get":{"type":"method","name":"get","children":[],"call":[" new merge_attributes "," new "," service request body "," service request "," service "]}," Fog Network Softlayer Datacenters all":{"type":"method","name":"all","children":[],"call":[" load "," service get_datacenters body "," service get_datacenters "," service "," filters= "]}," Fog Network Softlayer Datacenters initialize":{"type":"method","name":"initialize","children":[],"call":[" filters "]}," Fog Compute Softlayer Tags get":{"type":"method","name":"get","children":[],"call":[" new merge_attributes "," new ","response body "," service get_tag "," service ","id == ","id nil? "," service get_tag  body "]}," Fog Compute Softlayer Tags all":{"type":"method","name":"all","children":[],"call":[" load ","filters include? ","data select! ","filters empty? "," service describe_tags body "," service describe_tags "," service "," filters= "," raise "," __method__ "," class name "," class ","filters is_a? "," service describe_tags body  select! "]}," Fog Compute Softlayer Tags initialize":{"type":"method","name":"initialize","children":[],"call":[" filters "]}," Fog Compute Softlayer Real get_available_preset_codes":{"type":"method","name":"get_available_preset_codes","children":[],"call":[" request "]}," Fog Compute Softlayer Mock get_available_preset_codes":{"type":"method","name":"get_available_preset_codes","children":[],"call":[]}," Fog Compute Softlayer Servers get_available_preset_codes":{"type":"method","name":"get_available_preset_codes","children":[],"call":["item [] [] ","item [] "," service get_available_preset_codes body [] map "," service get_available_preset_codes body [] "," service get_available_preset_codes body "," service get_available_preset_codes "," service "]}," Fog Compute Softlayer Server wait_for_id":{"type":"method","name":"wait_for_id","children":[],"call":[" reload "," attributes []= ","server [] "," attributes "," block_given? ","res body first ","res body "," service request "," service ","Fog  wait_for ","Fog JSON  encode "," uid "," domain "," name ","res body first  [] "," service request  body first "," service request  body "]}," Fog Compute Softlayer Server active_transaction":{"type":"method","name":"active_transaction","children":[],"call":[" service request body "," service request "," id "," service "," bare_metal? "]}}