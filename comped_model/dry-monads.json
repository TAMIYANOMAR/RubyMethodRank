{" Dry Monads Left":{"type":"method","name":"Left","children":[],"call":["Either Left  new "]}," Dry Monads Right":{"type":"method","name":"Right","children":[],"call":["Either Right  new "]}," Dry Monads None":{"type":"method","name":"None","children":[],"call":["Maybe Some None  instance "]}," Dry Monads Some":{"type":"method","name":"Some","children":[],"call":["Maybe Some  new "]}," Dry Monads Maybe":{"type":"method","name":"Maybe","children":[],"call":["Maybe  lift "]}," Dry Monads Try Mixin Try":{"type":"method","name":"Try","children":[],"call":["Try  lift ","exceptions flatten ","exceptions any? ","exceptions empty? "]}," Dry Monads Try Failure to_s":{"type":"method","name":"to_s","children":[],"call":[" exception message "," exception "," exception class "]}," Dry Monads Try Failure ==":{"type":"method","name":"==","children":[],"call":["@exception == ","other exception ","other is_a? "]}," Dry Monads Try Failure to_either":{"type":"method","name":"to_either","children":[],"call":["Dry Monads  Left "," exception "]}," Dry Monads Try Failure to_maybe":{"type":"method","name":"to_maybe","children":[],"call":["Dry Monads  None "]}," Dry Monads Try Failure fmap":{"type":"method","name":"fmap","children":[],"call":[]}," Dry Monads Try Failure bind":{"type":"method","name":"bind","children":[],"call":[]}," Dry Monads Try Failure initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Dry Monads Try Success to_s":{"type":"method","name":"to_s","children":[],"call":[" value inspect "," value "]}," Dry Monads Try Success to_either":{"type":"method","name":"to_either","children":[],"call":["Dry Monads  Right "," value "]}," Dry Monads Try Success to_maybe":{"type":"method","name":"to_maybe","children":[],"call":["Dry Monads  Maybe "," value "]}," Dry Monads Try Success ==":{"type":"method","name":"==","children":[],"call":["@catchable == ","other catchable ","@value == ","other value ","other is_a? "]}," Dry Monads Try Success fmap":{"type":"method","name":"fmap","children":[],"call":["Try  lift ","(or\n  (lvar :block)\n  (lvar :proc)) call "," lambda "," catchable ","args [] call ","args drop "," value ","args [] ","Failure  new ","Success  new "," bind_call "]}," Dry Monads Try Success bind":{"type":"method","name":"bind","children":[],"call":["Failure  new "," catchable ","proc call "," value ","args [] call ","args drop ","args [] "," block_given? "]}," Dry Monads Try Success initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Dry Monads Try failure?":{"type":"method","name":"failure?","children":[],"call":[" is_a? "]}," Dry Monads Try success?":{"type":"method","name":"success?","children":[],"call":[" is_a? "]}," Dry Monads Try lift":{"type":"method","name":"lift","children":[],"call":[]}," Dry Monads Maybe Mixin None":{"type":"method","name":"None","children":[],"call":["None  instance "]}," Dry Monads Maybe Mixin Some":{"type":"method","name":"Some","children":[],"call":["Some  new "]}," Dry Monads Maybe Mixin Maybe":{"type":"method","name":"Maybe","children":[],"call":["Maybe  lift "]}," Dry Monads Maybe None to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Dry Monads Maybe None or":{"type":"method","name":"or","children":[],"call":[" value "," block_given? ","args [] "]}," Dry Monads Maybe None fmap":{"type":"method","name":"fmap","children":[],"call":[]}," Dry Monads Maybe None bind":{"type":"method","name":"bind","children":[],"call":[]}," Dry Monads Maybe None value":{"type":"method","name":"value","children":[],"call":[]}," Dry Monads Maybe Some to_s":{"type":"method","name":"to_s","children":[],"call":[" value inspect "," value ","@value inspect ","Unit  equal? "]}," Dry Monads Maybe Some or":{"type":"method","name":"or","children":[],"call":[]}," Dry Monads Maybe Some fmap":{"type":"method","name":"fmap","children":[],"call":[" class lift "," bind "," class "," class coerce ","Maybe  coerce ","Some  new ","Monads  None ","Core Deprecations  warn "," class warn_on_implicit_nil_coercion ","next_value nil? "," bind  nil? "]}," Dry Monads Maybe Some bind":{"type":"method","name":"bind","children":[],"call":[" value ","proc call ","args [] call ","args drop ","args [] "," block_given? "]}," Dry Monads Maybe Some initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","value nil? ","Undefined  default "]}," Dry Monads Maybe some?":{"type":"method","name":"some?","children":[],"call":[" is_a? "]}," Dry Monads Maybe none?":{"type":"method","name":"none?","children":[],"call":[" is_a? "]}," Dry Monads Maybe ==":{"type":"method","name":"==","children":[],"call":[" value == ","other value "," value ","other is_a? "]}," Dry Monads Maybe lift":{"type":"method","name":"lift","children":[],"call":[]}," Dry Monads Either Mixin Left":{"type":"method","name":"Left","children":[],"call":["Left  new "]}," Dry Monads Either Mixin Right":{"type":"method","name":"Right","children":[],"call":["Right  new "]}," Dry Monads Either Left to_maybe":{"type":"method","name":"to_maybe","children":[],"call":["Maybe None  instance "]}," Dry Monads Either Left to_s":{"type":"method","name":"to_s","children":[],"call":[" value inspect "," value "]}," Dry Monads Either Left or":{"type":"method","name":"or","children":[],"call":[" value "," block_given? ","args [] "]}," Dry Monads Either Left fmap":{"type":"method","name":"fmap","children":[],"call":[]}," Dry Monads Either Left bind":{"type":"method","name":"bind","children":[],"call":[]}," Dry Monads Either Left initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Dry Monads Either Right to_maybe":{"type":"method","name":"to_maybe","children":[],"call":["Maybe Some  new "," value ","Dry Monads  Maybe ","Kernel  warn "," value nil? "]}," Dry Monads Either Right to_s":{"type":"method","name":"to_s","children":[],"call":[" value inspect "," value "]}," Dry Monads Either Right or":{"type":"method","name":"or","children":[],"call":[]}," Dry Monads Either Right fmap":{"type":"method","name":"fmap","children":[],"call":["Right  new "," bind "]}," Dry Monads Either Right bind":{"type":"method","name":"bind","children":[],"call":[" value ","proc call ","args [] call ","args drop ","args [] "," block_given? "]}," Dry Monads Either Right initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Dry Monads Either left?":{"type":"method","name":"left?","children":[],"call":[" is_a? "]}," Dry Monads Either right?":{"type":"method","name":"right?","children":[],"call":[" is_a? "]}," Dry Monads Either ==":{"type":"method","name":"==","children":[],"call":[" left == ","other left "," left "," right == ","other right "," right ","other is_a? "]}," Dry Monads Maybe to_maybe":{"type":"method","name":"to_maybe","children":[],"call":[]}," Dry Monads Either to_either":{"type":"method","name":"to_either","children":[],"call":[]}," Dry Monads Maybe to_json":{"type":"method","name":"to_json","children":[],"call":[" as_json to_json "," as_json "]}," Dry Monads Maybe as_json":{"type":"method","name":"as_json","children":[],"call":[" value "," class name "," class ","JSON  create_id "," none? "]}," Dry Monads Maybe json_create":{"type":"method","name":"json_create","children":[],"call":[]}," Dry Monads Maybe None value_or":{"type":"method","name":"value_or","children":[],"call":[" block_given? "]}," Dry Monads Maybe Some value_or":{"type":"method","name":"value_or","children":[],"call":[" value "]}," Dry Monads Either Left tee":{"type":"method","name":"tee","children":[],"call":[]}," Dry Monads Either Right tee":{"type":"method","name":"tee","children":[],"call":[" bind bind "," bind "]}," Dry Monads Transformer fmap3":{"type":"method","name":"fmap3","children":[],"call":["func call ","b fmap ","a fmap "," fmap "," block_given? "]}," Dry Monads Transformer fmap2":{"type":"method","name":"fmap2","children":[],"call":["func call ","a fmap "," fmap "," block_given? "]}," Dry Monads RightBiased Left value_or":{"type":"method","name":"value_or","children":[],"call":[" block_given? "]}," Dry Monads RightBiased Left or_fmap":{"type":"method","name":"or_fmap","children":[],"call":[" raise "]}," Dry Monads RightBiased Left or":{"type":"method","name":"or","children":[],"call":[" raise "]}," Dry Monads RightBiased Left fmap":{"type":"method","name":"fmap","children":[],"call":[]}," Dry Monads RightBiased Left tee":{"type":"method","name":"tee","children":[],"call":[]}," Dry Monads RightBiased Left bind":{"type":"method","name":"bind","children":[],"call":[]}," Dry Monads RightBiased Right destructure":{"type":"method","name":"destructure","children":[],"call":["value is_a? "]}," Dry Monads RightBiased Right value_or":{"type":"method","name":"value_or","children":[],"call":[" value "]}," Dry Monads RightBiased Right or_fmap":{"type":"method","name":"or_fmap","children":[],"call":[]}," Dry Monads RightBiased Right or":{"type":"method","name":"or","children":[],"call":[]}," Dry Monads RightBiased Right fmap":{"type":"method","name":"fmap","children":[],"call":[" raise "]}," Dry Monads RightBiased Right tee":{"type":"method","name":"tee","children":[],"call":[" bind bind "," bind "]}," Dry Monads RightBiased Right bind":{"type":"method","name":"bind","children":[],"call":["obj call "," block_given? ","kwargs merge ","vkwargs empty? ","kwargs empty? "," destructure "," value ","kwargs empty? ! ","args empty? "]}," Dry Monads Maybe None or_fmap":{"type":"method","name":"or_fmap","children":[],"call":["Maybe  lift "," or ","Maybe  coerce "]}," Dry Monads Maybe monad":{"type":"method","name":"monad","children":[],"call":[]}," Dry Monads Maybe pure":{"type":"method","name":"pure","children":[],"call":["Some  new ","Undefined  default "]}," Dry Monads Maybe coerce":{"type":"method","name":"coerce","children":[],"call":["Some  new ","None  instance ","value nil? "]}," Dry Monads List Mixin List":{"type":"method","name":"List","children":[],"call":["List  coerce "]}," Dry Monads List coerce":{"type":"method","name":"coerce","children":[],"call":[" class coerce "," class "," raise ","value inspect ","List  new ","value to_ary ","value respond_to? ","value nil? ","values [] monad ","values [] ","values [] respond_to? ","type nil? ","values empty? ! ","values empty? ","value to_ary  [] monad ","value to_ary  [] ","value to_ary  [] respond_to? ","value to_ary  empty? ! ","value to_ary  empty? "]}," Dry Monads List monad":{"type":"method","name":"monad","children":[],"call":[]}," Dry Monads List traverse":{"type":"method","name":"traverse","children":[],"call":["unwrapped + ","List  [] ","mapped fmap "," block_given? ","acc bind "," foldl "," type pure "," type "," raise "," typed? ","with call ","cons apply apply ","cons apply ","Traverse  [] ","list + ","List  pure "]}," Dry Monads List typed?":{"type":"method","name":"typed?","children":[],"call":[" type nil? ! "," type nil? "," type "]}," Dry Monads List typed":{"type":"method","name":"typed","children":[],"call":[" class new "," value "," class "," value [] monad "," value [] "," raise "," size zero? "," size ","type nil? "," class warn ","l !~ "," caller find "," caller ","_1 !~ "]}," Dry Monads List tail":{"type":"method","name":"tail","children":[],"call":[" coerce "," value drop "," value "]}," Dry Monads List head":{"type":"method","name":"head","children":[],"call":["Maybe  coerce "," value first "," value ","Monads Maybe  coerce "]}," Dry Monads List reverse":{"type":"method","name":"reverse","children":[],"call":[" coerce "," value reverse "," value "]}," Dry Monads List size":{"type":"method","name":"size","children":[],"call":[" value size "," value "]}," Dry Monads List filter":{"type":"method","name":"filter","children":[],"call":[" coerce "," value select "," value "]}," Dry Monads List sort":{"type":"method","name":"sort","children":[],"call":[" coerce "," value sort "," value "]}," Dry Monads List empty?":{"type":"method","name":"empty?","children":[],"call":[" value empty? "," value "]}," Dry Monads List fold_right":{"type":"method","name":"fold_right","children":[],"call":[" value reverse reduce "," value reverse "," value "]}," Dry Monads List fold_left":{"type":"method","name":"fold_left","children":[],"call":[" value reduce "," value "]}," Dry Monads List last":{"type":"method","name":"last","children":[],"call":[" value last "," value "]}," Dry Monads List first":{"type":"method","name":"first","children":[],"call":[" value first "," value "]}," Dry Monads List inspect":{"type":"method","name":"inspect","children":[],"call":[" value inspect "," value "," type name split last "," type name split "," type name "," type "," typed? "]}," Dry Monads List +":{"type":"method","name":"+","children":[],"call":["List  new "," to_ary + ","other to_ary "," to_ary "]}," Dry Monads List map":{"type":"method","name":"map","children":[],"call":[" raise "," fmap "," value map "," value "," block_given? "]}," Dry Monads List fmap":{"type":"method","name":"fmap","children":[],"call":["List  new ","obj call "," value map "," value "," block_given? "]}," Dry Monads List bind":{"type":"method","name":"bind","children":[],"call":["List  coerce ","(send\n  (send nil :value) :map) reduce ","obj call "," value map "," value "," block_given? "]}," Dry Monads List initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Dry Monads List pure":{"type":"method","name":"pure","children":[],"call":[" new ","value equal? "]}," Dry Monads List []":{"type":"method","name":"[]","children":[],"call":[" new "]}," Dry Monads Either Left or_fmap":{"type":"method","name":"or_fmap","children":[],"call":["Right  new "," or "]}," Dry Monads Either Left right?":{"type":"method","name":"right?","children":[],"call":[]}," Dry Monads Either Left left?":{"type":"method","name":"left?","children":[],"call":[]}," Dry Monads Either Left either":{"type":"method","name":"either","children":[],"call":["f call "," value "]}," Dry Monads Either Right right?":{"type":"method","name":"right?","children":[],"call":[]}," Dry Monads Either Right left?":{"type":"method","name":"left?","children":[],"call":[]}," Dry Monads Either Right either":{"type":"method","name":"either","children":[],"call":["f call "," value "]}," Dry Monads Either monad":{"type":"method","name":"monad","children":[],"call":[]}," Dry Monads Either pure":{"type":"method","name":"pure","children":[],"call":["Right  new "]}," Dry Monads Result":{"type":"method","name":"Result","children":[],"call":[]}," Dry Monads included":{"type":"method","name":"included","children":[],"call":[]}," Dry Monads Try Mixin Error":{"type":"method","name":"Error","children":[],"call":["Try Error  new "," raise ","block nil? ","error equal? ","v nil? ","Undefined  default ","Undefined  default  nil? "]}," Dry Monads Try Mixin Value":{"type":"method","name":"Value","children":[],"call":["Try Value  new "," raise ","block nil? ","value equal? ","Value  new ","v nil? ","value nil? ! ","value nil? ","Undefined  default ","Undefined  default alue equal? ","Undefined  default  nil? ","Undefined  default alue nil? ! ","Undefined  default alue nil? "]}," Dry Monads Try Error ===":{"type":"method","name":"===","children":[],"call":[" exception === ","other exception "," exception ","Error  === "]}," Dry Monads Try Error or":{"type":"method","name":"or","children":[],"call":["args [] "," exception "," block_given? "]}," Dry Monads Try Error to_s":{"type":"method","name":"to_s","children":[],"call":[" exception message "," exception "," exception class "]}," Dry Monads Try Error to_result":{"type":"method","name":"to_result","children":[],"call":["Dry Monads  Failure "," exception ","Result Failure  new ","RightBiased Left  trace_caller "]}," Dry Monads Try Error to_maybe":{"type":"method","name":"to_maybe","children":[],"call":["Dry Monads  None ","Maybe None  new ","RightBiased Left  trace_caller "]}," Dry Monads Try Error initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Dry Monads Try Value to_s":{"type":"method","name":"to_s","children":[],"call":["@value inspect ","Unit  equal? "]}," Dry Monads Try Value to_result":{"type":"method","name":"to_result","children":[],"call":["Dry Monads  Success ","Dry Monads Result Success  new "]}," Dry Monads Try Value to_maybe":{"type":"method","name":"to_maybe","children":[],"call":["Dry Monads  Maybe "]}," Dry Monads Try Value fmap":{"type":"method","name":"fmap","children":[],"call":["Error  new "," catchable ","Value  new "," bind_call "]}," Dry Monads Try Value bind":{"type":"method","name":"bind","children":[],"call":["Error  new "," catchable "]}," Dry Monads Try Value initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Dry Monads Try error?":{"type":"method","name":"error?","children":[],"call":[" is_a? "]}," Dry Monads Try value?":{"type":"method","name":"value?","children":[],"call":[" is_a? "]}," Dry Monads RightBiased Left apply":{"type":"method","name":"apply","children":[],"call":[]}," Dry Monads RightBiased Left value!":{"type":"method","name":"value!","children":[],"call":[" raise ","UnwrapError  new "]}," Dry Monads RightBiased Right curry":{"type":"method","name":"curry","children":[],"call":["func curry ","seq_args > ","type == ","func parameters any? ","func parameters ","func parameters count ","@value method ","@value is_a? ","Curry  call ","@value method  curry ","@value method  parameters any? ","@value method  parameters ","@value method  parameters count "]}," Dry Monads RightBiased Right ===":{"type":"method","name":"===","children":[],"call":[" value! === ","other value! "," value! "," class == ","other class "," class ","other instance_of? "]}," Dry Monads RightBiased Right apply":{"type":"method","name":"apply","children":[],"call":[" curry call "," curry ","val fmap "," raise ","@value inspect ","val inspect ","@value respond_to? ","(send\n  (const nil :Undefined) :default\n  (lvar :val)) fmap ","Undefined  default ","Undefined  default fmap "]}," Dry Monads RightBiased Right value!":{"type":"method","name":"value!","children":[],"call":[]}," Dry Monads Result Mixin Constructors Failure":{"type":"method","name":"Failure","children":[],"call":["Failure  new "," raise ","block nil? ","value equal? ","RightBiased Left  trace_caller ","v nil? ","value nil? ! ","value nil? ","Undefined  default ","Undefined  default alue equal? ","Undefined  default  nil? ","Undefined  default alue nil? ! ","Undefined  default alue nil? "]}," Dry Monads Result Mixin Constructors Success":{"type":"method","name":"Success","children":[],"call":["Success  new "," raise ","block nil? ","value equal? ","v nil? ","value nil? ! ","value nil? ","Undefined  default ","Undefined  default alue equal? ","Undefined  default  nil? ","Undefined  default alue nil? ! ","Undefined  default alue nil? "]}," Dry Monads Result Failure ===":{"type":"method","name":"===","children":[],"call":[" failure === ","other failure "," failure ","Failure  === "]}," Dry Monads Result Failure value_or":{"type":"method","name":"value_or","children":[],"call":[" block_given? "]}," Dry Monads Result Failure flip":{"type":"method","name":"flip","children":[],"call":["Success  new "]}," Dry Monads Result Failure to_maybe":{"type":"method","name":"to_maybe","children":[],"call":["Maybe None  instance ","Maybe None  new "," trace "]}," Dry Monads Result Failure to_s":{"type":"method","name":"to_s","children":[],"call":["@value inspect ","Unit  equal? "]}," Dry Monads Result Failure or_fmap":{"type":"method","name":"or_fmap","children":[],"call":["Success  new "," or "]}," Dry Monads Result Failure or":{"type":"method","name":"or","children":[],"call":["args [] "," block_given? "]}," Dry Monads Result Failure success?":{"type":"method","name":"success?","children":[],"call":[]}," Dry Monads Result Failure failure?":{"type":"method","name":"failure?","children":[],"call":[]}," Dry Monads Result Failure result":{"type":"method","name":"result","children":[],"call":["f call "]}," Dry Monads Result Failure initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Dry Monads Result Failure failure":{"type":"method","name":"failure","children":[],"call":[]}," Dry Monads Result Success flip":{"type":"method","name":"flip","children":[],"call":["Failure  new ","RightBiased Left  trace_caller "]}," Dry Monads Result Success to_maybe":{"type":"method","name":"to_maybe","children":[],"call":["Dry Monads  Maybe ","Kernel  warn ","@value nil? "," Dry Monads  Maybe "," warn "]}," Dry Monads Result Success to_s":{"type":"method","name":"to_s","children":[],"call":["@value inspect ","Unit  equal? "]}," Dry Monads Result Success fmap":{"type":"method","name":"fmap","children":[],"call":["Success  new "," bind "]}," Dry Monads Result Success success?":{"type":"method","name":"success?","children":[],"call":[]}," Dry Monads Result Success failure?":{"type":"method","name":"failure?","children":[],"call":[]}," Dry Monads Result Success result":{"type":"method","name":"result","children":[],"call":["f call "]}," Dry Monads Result Success initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Dry Monads Result monad":{"type":"method","name":"monad","children":[],"call":[]}," Dry Monads Result to_result":{"type":"method","name":"to_result","children":[],"call":[]}," Dry Monads Result pure":{"type":"method","name":"pure","children":[],"call":["Success  new ","Undefined  default "]}," Monads Result Fixed included":{"type":"method","name":"included","children":[],"call":["base include "]}," Monads Result Fixed initialize":{"type":"method","name":"initialize","children":[{"type":"method","name":"Success","children":[],"asgn":[],"call":["Success  new "]}],"call":["Success  new "," raise ","InvalidFailureTypeError  new ","Failure  new ","error === "," define_method ","Module  new ","RightBiased Left  trace_caller ","Undefined  default ","InUndefined  default alidFailureTypeError  new "]}," Monads Result Fixed []":{"type":"method","name":"[]","children":[],"call":[]}," Dry Monads Maybe Mixin Constructors None":{"type":"method","name":"None","children":[],"call":["None  instance ","None  new ","RightBiased Left  trace_caller "]}," Dry Monads Maybe Mixin Constructors Some":{"type":"method","name":"Some","children":[],"call":["Some  new "," raise ","block nil? ","value equal? ","v nil? ","value nil? ! ","value nil? ","Undefined  default ","Undefined  default alue equal? ","Undefined  default  nil? ","Undefined  default alue nil? ! ","Undefined  default alue nil? "]}," Dry Monads Maybe Mixin Constructors Maybe":{"type":"method","name":"Maybe","children":[],"call":["Maybe  lift ","Maybe  coerce "]}," Dry Monads Maybe None hash":{"type":"method","name":"hash","children":[],"call":["None  instance object_id ","None  instance "]}," Dry Monads Maybe None eql?":{"type":"method","name":"eql?","children":[],"call":["other is_a? "]}," Dry Monads InvalidFailureTypeError initialize":{"type":"method","name":"initialize","children":[],"call":["failure inspect "]}," Dry Monads UnwrapError initialize":{"type":"method","name":"initialize","children":[],"call":["ctx inspect ","receiver inspect "]}," Dry Monads Result Failure to_validated":{"type":"method","name":"to_validated","children":[],"call":["Validated Invalid  new "," trace "," failure "]}," Dry Monads Result Success to_validated":{"type":"method","name":"to_validated","children":[],"call":["Validated Valid  new "," value! "]}," Dry Monads Validated Mixin Constructors Invalid":{"type":"method","name":"Invalid","children":[],"call":["Invalid  new ","RightBiased Left  trace_caller "," raise ","v nil? ","value nil? ! ","value nil? ","Undefined  default ","InUndefined  default alid  new ","Undefined  default  nil? ","Undefined  default alue nil? ! ","Undefined  default alue nil? "]}," Dry Monads Validated Mixin Constructors Valid":{"type":"method","name":"Valid","children":[],"call":["Valid  new "," raise ","v nil? ","value nil? ! ","value nil? ","Undefined  default ","Undefined  default  nil? ","Undefined  default alue nil? ! ","Undefined  default alue nil? "]}," Dry Monads Validated Invalid ===":{"type":"method","name":"===","children":[],"call":[" error === ","other error "," error "," class == ","other class "," class ","other instance_of? "]}," Dry Monads Validated Invalid inspect":{"type":"method","name":"inspect","children":[],"call":["@error inspect "]}," Dry Monads Validated Invalid or":{"type":"method","name":"or","children":[],"call":["Undefined  default call ","Undefined  default "]}," Dry Monads Validated Invalid fmap":{"type":"method","name":"fmap","children":[],"call":[]}," Dry Monads Validated Invalid alt_map":{"type":"method","name":"alt_map","children":[],"call":[" class new ","RightBiased Left  trace_caller ","f call "," error "," class ","Undefined  default ","RightBiased LeUndefined  default t  trace_caller ","Undefined  default  call ","UndeUndefined  default ined  deUndefined  default ault "]}," Dry Monads Validated Invalid apply":{"type":"method","name":"apply","children":[],"call":["@error + ","(send\n  (const nil :Undefined) :default\n  (lvar :val)) alt_map ","Undefined  default ","(send\n  (block\n    (send\n      (const nil :Undefined) :default\n      (lvar :val))\n    (args)\n    (yield)) :alt_map) fmap ","(send\n  (send\n    (const nil :Undefined) :default\n    (lvar :val)\n    (block-pass\n      (lvar :block))) :alt_map) fmap ","Undefined  default alt_map "]}," Dry Monads Validated Invalid initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Dry Monads Validated Valid ===":{"type":"method","name":"===","children":[],"call":[" value! === ","other value! "," value! "," class == ","other class "," class ","other instance_of? "]}," Dry Monads Validated Valid inspect":{"type":"method","name":"inspect","children":[],"call":[" value! inspect "," value! ","@value inspect ","Unit  equal? "]}," Dry Monads Validated Valid or":{"type":"method","name":"or","children":[],"call":[]}," Dry Monads Validated Valid alt_map":{"type":"method","name":"alt_map","children":[],"call":[]}," Dry Monads Validated Valid fmap":{"type":"method","name":"fmap","children":[],"call":[" class new ","f call "," value! "," class ","Undefined  default ","Undefined  default  call ","UndeUndefined  default ined  deUndefined  default ault "]}," Dry Monads Validated Valid apply":{"type":"method","name":"apply","children":[],"call":["(send\n  (const nil :Undefined) :default\n  (lvar :val)) fmap ","Curry  call "," value! ","Undefined  default ","Undefined  default fmap "]}," Dry Monads Validated Valid value!":{"type":"method","name":"value!","children":[],"call":[]}," Dry Monads Validated Valid initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Dry Monads Validated bind":{"type":"method","name":"bind","children":[],"call":[" raise "]}," Dry Monads Validated to_monad":{"type":"method","name":"to_monad","children":[],"call":[]}," Dry Monads Validated pure":{"type":"method","name":"pure","children":[],"call":["Valid  new ","Undefined  default "]}," Dry Monads inspect":{"type":"method","name":"inspect","children":[],"call":[]}," Dry Monads to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Dry Monads Try Mixin Constructors Try":{"type":"method","name":"Try","children":[],"call":["Try  run ","exceptions flatten ","exceptions empty? "]}," Dry Monads Try to_monad":{"type":"method","name":"to_monad","children":[],"call":[]}," Dry Monads Try []":{"type":"method","name":"[]","children":[],"call":[" run "," raise ","exceptions empty? "]}," Dry Monads Try pure":{"type":"method","name":"pure","children":[],"call":["Value  new ","block nil? ","value equal? "]}," Dry Monads Try run":{"type":"method","name":"run","children":[],"call":["Error  new ","Value  new ","f call "]}," Dry Monads Task Mixin Constructors Task":{"type":"method","name":"Task","children":[],"call":["Task  new "]}," Dry Monads Task Mixin []":{"type":"method","name":"[]","children":[],"call":[]}," Dry Monads Task compare_promises":{"type":"method","name":"compare_promises","children":[],"call":["x reason == ","y reason ","x reason ","y rejected? ","x rejected? ","x value == ","y value ","x value ","y fulfilled? ","x fulfilled? ","x equal? "]}," Dry Monads Task curry":{"type":"method","name":"curry","children":[],"call":["@curried [] ","Curry  call ","@curried [] equal? "]}," Dry Monads Task discard":{"type":"method","name":"discard","children":[],"call":[" fmap "]}," Dry Monads Task apply":{"type":"method","name":"apply","children":[],"call":[" curry call "," curry ","arg fmap "," bind ","Undefined  default ","Undefined  default  fmap "]}," Dry Monads Task to_monad":{"type":"method","name":"to_monad","children":[],"call":[]}," Dry Monads Task monad":{"type":"method","name":"monad","children":[],"call":[]}," Dry Monads Task complete?":{"type":"method","name":"complete?","children":[],"call":[" promise complete? "," promise "]}," Dry Monads Task ==":{"type":"method","name":"==","children":[],"call":[" compare_promises ","other promise "," promise "," class == ","other class "," class "," equal? "]}," Dry Monads Task wait":{"type":"method","name":"wait","children":[],"call":[" promise wait "," promise "]}," Dry Monads Task value_or":{"type":"method","name":"value_or","children":[],"call":[" promise rescue wait value "," promise rescue wait "," promise rescue "," promise "]}," Dry Monads Task or":{"type":"method","name":"or","children":[],"call":[" class new "," class ","child on_fulfill "," promise on_success "," promise ","child on_reject ","inner on_error ","inner on_success ","inner execute ","block call promise ","block call "," promise on_error ","Promise  new ","Concurrent ImmediateExecutor  new ","Promise  new  on_fulfill ","Promise  new  on_reject ","block call promise  on_error ","block call promise  on_success ","block call promise  execute "]}," Dry Monads Task or_fmap":{"type":"method","name":"or_fmap","children":[],"call":[" class new "," promise rescue "," promise "," class "]}," Dry Monads Task to_s":{"type":"method","name":"to_s","children":[],"call":[" promise reason inspect "," promise reason "," promise "," value! inspect "," value! "," promise state ","Unit  equal? "]}," Dry Monads Task bind":{"type":"method","name":"bind","children":[],"call":[" class new ","block call promise ","block call "," promise flat_map "," promise "," class "]}," Dry Monads Task fmap":{"type":"method","name":"fmap","children":[],"call":[" class new "," promise then "," promise "," class "]}," Dry Monads Task value!":{"type":"method","name":"value!","children":[],"call":[" raise "," promise reason "," promise "," promise value "," promise wait fulfilled? "," promise wait "]}," Dry Monads Task initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Dry Monads Task pure":{"type":"method","name":"pure","children":[],"call":[" new ","Promise  fulfill ","Undefined  default "]}," Dry Monads Task []":{"type":"method","name":"[]","children":[],"call":[" new ","Promise  execute "]}," Dry Monads Task new":{"type":"method","name":"new","children":[],"call":["Promise  execute "]}," Dry Monads RightBiased Left discard":{"type":"method","name":"discard","children":[],"call":[" fmap "]}," Dry Monads RightBiased Left trace_caller":{"type":"method","name":"trace_caller","children":[],"call":[]}," Dry Monads RightBiased Right discard":{"type":"method","name":"discard","children":[],"call":[" fmap "]}," Dry Monads Validated Invalid to_result":{"type":"method","name":"to_result","children":[],"call":["Result Failure  new ","RightBiased Left  trace_caller "," error "]}," Dry Monads Validated Valid to_result":{"type":"method","name":"to_result","children":[],"call":["Result  pure "," value! "]}," Dry Monads Task to_result":{"type":"method","name":"to_result","children":[],"call":["Result Failure  new ","RightBiased Left  trace_caller "," promise reason "," promise ","Result Success  new "," promise value "," promise wait fulfilled? "," promise wait "]}," Dry Monads Result to_monad":{"type":"method","name":"to_monad","children":[],"call":[]}," Dry Monads Validated Invalid to_maybe":{"type":"method","name":"to_maybe","children":[],"call":["Maybe None  new ","RightBiased Left  trace_caller "]}," Dry Monads Validated Valid to_maybe":{"type":"method","name":"to_maybe","children":[],"call":["Maybe  pure "," value! "]}," Dry Monads Task to_maybe":{"type":"method","name":"to_maybe","children":[],"call":["Maybe None  new ","RightBiased Left  trace_caller ","Maybe Some  new "," promise value "," promise "," promise wait fulfilled? "," promise wait "]}," Dry Monads Maybe None initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Dry Monads Maybe to_monad":{"type":"method","name":"to_monad","children":[],"call":[]}," Dry Monads List ListBuilder pure":{"type":"method","name":"pure","children":[],"call":["List  pure "," type ","Undefined  default "]}," Dry Monads List ListBuilder coerce":{"type":"method","name":"coerce","children":[],"call":["List  coerce "," type "]}," Dry Monads List ListBuilder []":{"type":"method","name":"[]","children":[],"call":["List  new "," type "]}," Dry Monads List ListBuilder initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Dry Monads List to_monad":{"type":"method","name":"to_monad","children":[],"call":[]}," Dry Monads List apply":{"type":"method","name":"apply","children":[],"call":["f call ","v fmap "," fmap bind "," fmap ","Undefined  default ","Undefined  default  fmap "]}," Dry Monads Lazy Mixin Constructors Lazy":{"type":"method","name":"Lazy","children":[],"call":["Lazy  new "]}," Dry Monads Lazy to_s":{"type":"method","name":"to_s","children":[],"call":[" promise reason inspect "," promise reason "," promise "," value! inspect "," value! "," promise state "]}," Dry Monads Lazy force":{"type":"method","name":"force","children":[],"call":["@promise execute "]}," Dry Monads Lazy value!":{"type":"method","name":"value!","children":[],"call":["@promise execute value! ","@promise execute "]}," Dry Monads Lazy new":{"type":"method","name":"new","children":[],"call":["Concurrent Promise  new "]}," Dry Monads Do wrap_method":{"type":"method","name":"wrap_method","children":[],"call":["target module_eval ","104 + ","105 + ","107 + ","109 + ","132 + ","VISIBILITY_WORD  [] ","126 + "]}," Dry Monads Do coerce_to_monad":{"type":"method","name":"coerce_to_monad","children":[],"call":["first traverse ","List  coerce traverse ","List  coerce ","monads [] ","monads size != ","monads size ","monads []  traverse "]}," Dry Monads Do halt":{"type":"method","name":"halt","children":[],"call":[" raise ","Halt  new "]}," Dry Monads Do included":{"type":"method","name":"included","children":[],"call":["base include "," require "]}," Dry Monads Do for":{"type":"method","name":"for","children":[],"call":["base prepend "," singleton_class send "," singleton_class "," Module  new ","Do  wrap_method ","methods each ","base extend ","MethodTracker  new "," singleton_class define_method "]}," Dry Monads Do Halt initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Dry Monads Do All included":{"type":"method","name":"included","children":[],"call":[" wrap_defined_methods ","wrappers [] ","base extend ","base is_a? ","MethodTracker  new ","h []= "," Module  new "," Hash  new ","_1 []= "]}," Dry Monads Do All MethodTracker wrap_method":{"type":"method","name":"wrap_method","children":[],"call":["Do  wrap_method "," wrappers "," wrappers [] ","Do  method_visibility ","Do  method_Do  method_visibility  "]}," Dry Monads Do All MethodTracker extend_object":{"type":"method","name":"extend_object","children":[],"call":["target prepend "," wrappers "," wrappers [] "]}," Dry Monads Do All MethodTracker initialize":{"type":"method","name":"initialize","children":[],"call":["tracker wrap_method "," define_method "," module_eval ","base prepend ","wrappers [] ","Dry Monads Do All  included ","All  included "," private "]}," Dry Monads Curry call":{"type":"method","name":"call","children":[],"call":[]}," Dry Monads ConversionStubs Methods to_validated":{"type":"method","name":"to_validated","children":[],"call":[" raise "]}," Dry Monads ConversionStubs Methods to_result":{"type":"method","name":"to_result","children":[],"call":[" raise "]}," Dry Monads ConversionStubs Methods to_maybe":{"type":"method","name":"to_maybe","children":[],"call":[" raise "]}," Dry Monads ConversionStubs []":{"type":"method","name":"[]","children":[],"call":[]}," Dry Monads RightBiased Right included":{"type":"method","name":"included","children":[{"type":"method","name":"to_proc","children":[],"asgn":[],"call":[]}],"call":[]}," Dry Monads Result Failure to_proc":{"type":"method","name":"to_proc","children":[],"call":[]}," Dry Monads Maybe to_proc":{"type":"method","name":"to_proc","children":[],"call":[" method to_proc "," method "]}," Dry Monads []":{"type":"method","name":"[]","children":[],"call":[]}," Dry Monads Task failed":{"type":"method","name":"failed","children":[],"call":[" new ","Promise  reject "]}," Dry Monads RightBiased Left and":{"type":"method","name":"and","children":[],"call":[]}," Dry Monads RightBiased Left flatten":{"type":"method","name":"flatten","children":[],"call":[]}," Dry Monads RightBiased Right and":{"type":"method","name":"and","children":[],"call":[" block_given? ","mb fmap "," bind "]}," Dry Monads RightBiased Right flatten":{"type":"method","name":"flatten","children":[],"call":[" bind "]}," Dry Monads all_loaded?":{"type":"method","name":"all_loaded?","children":[],"call":[" registry size == ","@paths size "," registry size "," registry "," registry size eql? ","@constants size "]}," Dry Monads constructors":{"type":"method","name":"constructors","children":[],"call":["(send\n  (send\n    (send nil :registry) :values) :map) compact ","m const_defined? "," registry values map "," registry values "," registry "," registry values filter_map "]}," Dry Monads load_monad":{"type":"method","name":"load_monad","children":[],"call":[" require "," Array each "," Array "," raise ","name inspect ","@paths fetch ","mod const_get ","const_name split reduce ","const_name split ","@constants fetch "]}," Dry Monads known_monads":{"type":"method","name":"known_monads","children":[],"call":["@paths keys ","@constants keys "]}," Dry Monads register_mixin":{"type":"method","name":"register_mixin","children":[],"call":[" registry= "," registry merge "," registry "," raise ","name inspect "," registry key? "]}," Dry Monads registry=":{"type":"method","name":"registry=","children":[],"call":["registry dup freeze ","registry dup "]}," Dry Monads List collect":{"type":"method","name":"collect","children":[],"call":["g << ","x value! ","x some? "," value each "," value ","Enumerator  new ","List  new ","ys << ","y value! ","y some? "," value each_with_object "," block_given? ","_1 value! ","_1 some? "]}," Dry Monads RightBiased Left deconstruct":{"type":"method","name":"deconstruct","children":[],"call":["@value is_a? ","Unit  equal? "]}," Dry Monads RightBiased Right deconstruct":{"type":"method","name":"deconstruct","children":[],"call":["@value is_a? ","Unit  equal? ","@value is_a? ! "]}," Dry Monads Maybe None to_result":{"type":"method","name":"to_result","children":[],"call":["Result Failure  new "," block_given? "]}," Dry Monads Maybe Some to_result":{"type":"method","name":"to_result","children":[],"call":["Result Success  new "]}," Dry Monads Result Failure either":{"type":"method","name":"either","children":[],"call":["g call "," failure "]}," Dry Monads Result Failure []":{"type":"method","name":"[]","children":[],"call":[]}," Dry Monads Result Success either":{"type":"method","name":"either","children":[],"call":["f call "," success "]}," Dry Monads Result Success []":{"type":"method","name":"[]","children":[],"call":[]}," Dry Monads Maybe Hash filter":{"type":"method","name":"filter","children":[],"call":[]}," Dry Monads Maybe Hash all":{"type":"method","name":"all","children":[],"call":["RightBiased Left  trace_caller "]}," Dry Monads Maybe None deconstruct":{"type":"method","name":"deconstruct","children":[],"call":[]}," Dry Monads Maybe None method_missing":{"type":"method","name":"method_missing","children":[],"call":[]}," Dry Monads Maybe Some []":{"type":"method","name":"[]","children":[],"call":[]}," Dry Monads List deconstruct":{"type":"method","name":"deconstruct","children":[],"call":[" value "]}," Dry Monads List unfold":{"type":"method","name":"unfold","children":[],"call":[" new ","xs << ","m value! ","m some? "," loop "]}," Dry Monads ConstructorNotAppliedError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Dry Monads Do Mixin bind":{"type":"method","name":"bind","children":[],"call":["unwrapped [] ","monads size == ","monads size ","(send\n  (lvar :monad) :or) value! ","Do  halt ","monad or ","result to_monad ","monads map ","Do  coerce_to_monad "," Array ","result to_monad s size == ","Do  coerce_to_monad  size == ","result to_monad s size ","Do  coerce_to_monad  size ","(send\n  (lvar :result to_monad ) :or) value! ","result to_monad  or ","result to_result to_monad  ","result to_monad s map ","Do  coerce_to_monad  map ","Do  coerce_to_result to_monad  "]}," Dry Monads Do Mixin call":{"type":"method","name":"call","children":[],"call":["e result "]}," Dry Monads Do All InstanceMixin extended":{"type":"method","name":"extended","children":[],"call":["Do  wrap_method ","object singleton_class instance_methods each ","object singleton_class instance_methods ","object singleton_class ","method equal? ","object define_singleton_method ","object singleton_class prepend "," Module  new ","All  wrap_defined_methods ","Do  method_visibility ","eigenclass prepend ","Do  method_Do  method_visibility  ","object singleton_class  prepend "]}," Dry Monads RightBiased Left deconstruct_keys":{"type":"method","name":"deconstruct_keys","children":[],"call":["@value is_a? ","@value deconstruct_keys ","@value respond_to? "]}," Dry Monads RightBiased Right deconstruct_keys":{"type":"method","name":"deconstruct_keys","children":[],"call":["@value is_a? ","@value deconstruct_keys ","@value respond_to? "]}," Dry Monads deconstruct":{"type":"method","name":"deconstruct","children":[],"call":[]}," Dry Monads Try Error recover":{"type":"method","name":"recover","children":[],"call":["Value  new "," exception "," exception class ","c === ","classes any? ","errors empty? ","_1 === "]}," Dry Monads Try Value recover":{"type":"method","name":"recover","children":[],"call":[]}," Dry Monads RightBiased Left |":{"type":"method","name":"|","children":[],"call":[" or "]}," Dry Monads RightBiased Right |":{"type":"method","name":"|","children":[],"call":[]}," Dry Monads Result Failure alt_map":{"type":"method","name":"alt_map","children":[],"call":[" class new ","RightBiased Left  trace_caller ","f call "," failure "," class ","Undefined  default ","RightBiased LeUndefined  default t  trace_caller ","Undefined  default  call "," Undefined  default ailure ","UndeUndefined  default ined  deUndefined  default ault "]}," Dry Monads Result Success alt_map":{"type":"method","name":"alt_map","children":[],"call":[]}," Dry Monads Result Fixed included":{"type":"method","name":"included","children":[],"call":["base include "]}," Dry Monads Result Fixed initialize":{"type":"method","name":"initialize","children":[{"type":"method","name":"Success","children":[],"asgn":[{"type":"local","name":"v","value":"Undefined  default "},["Undefined  default "]],"call":["Success  new ","Undefined  default "]}],"call":["Success  new ","Undefined  default "," raise ","InvalidFailureTypeError  new ","Failure  new ","RightBiased Left  trace_caller ","error === "," define_method "," Module  new ","InUndefined  default alidFailureTypeError  new "]}," Dry Monads Result Fixed []":{"type":"method","name":"[]","children":[],"call":[]}," Dry Monads Maybe None filter":{"type":"method","name":"filter","children":[],"call":[]}," Dry Monads Maybe Some filter":{"type":"method","name":"filter","children":[],"call":["Monads  None ","block call ","Undefined  default ","Undefined  default  call "]}," Dry Monads Maybe Some maybe":{"type":"method","name":"maybe","children":[],"call":["Maybe  coerce "," bind "]}," Dry Monads Lazy evaluated?":{"type":"method","name":"evaluated?","children":[],"call":["@promise complete? "]}," Dry Monads Do method_visibility":{"type":"method","name":"method_visibility","children":[],"call":["mod private_method_defined? ","mod public_method_defined? "]}," Dry Monads Do MethodTracker initialize":{"type":"method","name":"initialize","children":[],"call":["Do  wrap_method ","Do  method_visibility ","tracked_methods include? "," define_method "," private "," module_eval ","Do  method_Do  method_visibility  "]}," Dry Monads Do All wrap_defined_methods":{"type":"method","name":"wrap_defined_methods","children":[],"call":["Do  wrap_method ","klass private_instance_methods each ","klass private_instance_methods ","klass protected_instance_methods each ","klass protected_instance_methods ","klass public_instance_methods each ","klass public_instance_methods "]}," Dry Monads loader":{"type":"method","name":"loader","children":[],"call":[]}}