{" Sidekiq Launcher stop":{"type":"method","name":"stop","children":[],"call":[" old_stop "," cron_poller async terminate "," cron_poller async "," cron_poller "," poller alive? "," poller "," cron_poller terminate "]}," Sidekiq Launcher run":{"type":"method","name":"run","children":[],"call":[" cron_poller async poll "," cron_poller async "," cron_poller "," old_run "," cron_poller start "]}," Sidekiq Launcher initialize":{"type":"method","name":"initialize","children":[],"call":[" old_initialize ","Sidekiq Cron Poller  new "]}," Sidekiq Cron WebExtension registered":{"type":"method","name":"registered","children":[{"type":"method","name":"strings","children":[],"asgn":[],"call":["@strings [] []= ","@strings [] ","translations each ","YAML  load each ","YAML  load ","File  open ","Dir  [] each ","Dir  [] ","File  join ","File  expand_path "," old_strings "]}],"call":[]}," Sidekiq Cron Poller add_jitter":{"type":"method","name":"add_jitter","children":[],"call":[" sleep "," poll_interval * "," rand "," poll_interval "]}," Sidekiq Cron Poller poll_interval":{"type":"method","name":"poll_interval","children":[],"call":["Sidekiq  options [] ","Sidekiq  options "]}," Sidekiq Cron Poller poll":{"type":"method","name":"poll","children":[],"call":[" poll "," after "," poll_interval "," logger error ","ex backtrace first ","ex backtrace "," logger ","ex message ","job test_and_enque_for_time! ","job valid? ","Sidekiq Cron Job  all each ","Sidekiq Cron Job  all ","Time  now "," add_jitter "," watchdog "]}," Sidekiq Cron Job hash_to_redis":{"type":"method","name":"hash_to_redis","children":[],"call":["arr + ","kv [] ","hash inject ","hash flat_map "]}," Sidekiq Cron Job job_enqueued_key":{"type":"method","name":"job_enqueued_key","children":[],"call":[" class job_enqueued_key "," class "]}," Sidekiq Cron Job redis_key":{"type":"method","name":"redis_key","children":[],"call":[" class redis_key "," class "]}," Sidekiq Cron Job jobs_key":{"type":"method","name":"jobs_key","children":[],"call":[]}," Sidekiq Cron Job sort_name":{"type":"method","name":"sort_name","children":[],"call":["(begin\n  (if\n    (send\n      (send nil :status) :==\n      (str \"enabled\"))\n    (int 0)\n    (int 1))) downcase "," name "," status == "," status "]}," Sidekiq Cron Job exists?":{"type":"method","name":"exists?","children":[],"call":[" class exists? "," class "]}," Sidekiq Cron Job formated_last_time":{"type":"method","name":"formated_last_time","children":[],"call":[" last_time getutc "," last_time "," last_time getutc iso8601 "]}," Sidekiq Cron Job last_time":{"type":"method","name":"last_time","children":[],"call":["CronParser  new last ","now + ","CronParser  new ","Rufus Scheduler CronLine  new previous_time ","Rufus Scheduler CronLine  new ","Rufus Scheduler CronLine  new previous_time utc ","now utc "," parsed_cron previous_time utc "," parsed_cron previous_time "," parsed_cron "]}," Sidekiq Cron Job destroy_all!":{"type":"method","name":"destroy_all!","children":[],"call":[]}," Sidekiq Cron Job destroy":{"type":"method","name":"destroy","children":[],"call":[" logger info "," logger ","conn del "," redis_key "," job_enqueued_key ","conn srem "," class jobs_key "," class ","Sidekiq  redis "," jid_history_key ","Sidekiq  logger info ","Sidekiq  logger "]}," Sidekiq Cron Job save":{"type":"method","name":"save","children":[],"call":[" logger info "," logger ","conn zadd "," formated_last_time to_s "," formated_last_time ","time to_f to_s ","time to_f "," job_enqueued_key ","Time  now ","conn hmset "," hash_to_redis "," to_hash "," redis_key ","conn sadd "," class jobs_key "," class ","Sidekiq  redis "," valid? ","conn exists ","Time  now utc ","Sidekiq  logger info ","Sidekiq  logger "," formatted_last_time to_s "," formatted_last_time ","exists == ","conn public_send ","conn hset "," to_hash transform_values! "," formated_last_Time  now  to_s "," formated_last_Time  now utc  to_s "," formated_last_Time  now  "," formated_last_Time  now utc  ","Time  now  to_f to_s ","Time  now utc  to_f to_s ","Time  now  to_f ","Time  now utc  to_f ","conn conn public_send  "," formatted_last_Time  now  to_s "," formatted_last_Time  now utc  to_s "," formatted_last_Time  now  "," formatted_last_Time  now utc  ","conn public_send  == "]}," Sidekiq Cron Job valid?":{"type":"method","name":"valid?","children":[],"call":[" errors any? ! "," errors any? "," errors "," errors << ","@klass size == ","@klass size ","@klass nil? ","e message ","cron next ","Time  now ","CronParser  new ","@cron size == ","@cron size ","@cron nil? ","@name size == ","@name size ","@name nil? ","e message == ","cron next_time ","Rufus Scheduler CronLine  new "," klass_valid ","cron next_time utc ","Time  now utc "," errors empty? ","e class ","@cron inspect ","Fugit  do_parse_cron ","Fugit  do_parse_cronish ","c class ","c is_a? ","Fugit  do_parse ","CronParser  new  next ","Rufus Scheduler CronLine  new  next ","Fugit  do_parse ron next ","@CronParser  new  size == ","@Rufus Scheduler CronLine  new  size == ","@Fugit  do_parse ron size == ","@CronParser  new  size ","@Rufus Scheduler CronLine  new  size ","@Fugit  do_parse ron size ","@CronParser  new  nil? ","@Rufus Scheduler CronLine  new  nil? ","@Fugit  do_parse ron nil? ","CronParser  new  next_time ","Rufus Scheduler CronLine  new  next_time ","Fugit  do_parse ron next_time ","Rufus SFugit  do_parse heduler CronLine  new ","CronParser  new  next_time utc ","Rufus Scheduler CronLine  new  next_time utc ","Fugit  do_parse ron next_time utFugit  do_parse  ","Time  now utFugit  do_parse  ","e Fugit  do_parse lass ","@CronParser  new  inspect ","@Rufus Scheduler CronLine  new  inspect ","@Fugit  do_parse ron inspeFugit  do_parse t ","Fugit  do_parse_CronParser  new  ","Fugit  do_parse_Rufus Scheduler CronLine  new  ","Fugit  do_parse_Fugit  do_parse ron ","Fugit  do_parse_CronParser  new ish ","Fugit  do_parse_Rufus Scheduler CronLine  new ish ","Fugit  do_parse_Fugit  do_parse ronish ","Fugit  do_parse  Fugit  do_parse lass ","Fugit  do_parse  is_a? "]}," Sidekiq Cron Job errors":{"type":"method","name":"errors","children":[],"call":[]}," Sidekiq Cron Job to_hash":{"type":"method","name":"to_hash","children":[],"call":["Sidekiq  dump_json ","@message is_a? ","@args is_a? ","hash merge! "," date_as_argument? "," symbolize_args? "," serialized_last_enqueue_time ","@klass to_s ","@last_enqueue_time to_s "]}," Sidekiq Cron Job status_from_redis":{"type":"method","name":"status_from_redis","children":[],"call":["conn hget "," redis_key ","Sidekiq  redis "," exists? "," fetch_missing_args "]}," Sidekiq Cron Job enable!":{"type":"method","name":"enable!","children":[],"call":[" save "]}," Sidekiq Cron Job disable!":{"type":"method","name":"disable!","children":[],"call":[" save "]}," Sidekiq Cron Job status":{"type":"method","name":"status","children":[],"call":[]}," Sidekiq Cron Job initialize":{"type":"method","name":"initialize","children":[],"call":["message_data []= ","args [] ","message_data merge ","@klass constantize get_sidekiq_options merge ","@klass constantize get_sidekiq_options ","@klass constantize ","@klass get_sidekiq_options merge ","@klass get_sidekiq_options ","@klass to_s ","args [] is_a? ","args [] nil? ","Time  now ","Time  parse ","args [] to_s "," status_from_redis ","input_args stringify_keys "," parse_args ","args [] empty? ! ","args [] empty? "," last_enqueue_time_from_redis "," default ","message_data [] ","Sidekiq  load_json ","(send\n  (dstr\n    (begin\n      (send\n        (lvar :args) :[]\n        (str \"active_job\")))) :=~\n  (begin\n    (regexp\n      (str \"^(true|t|yes|y|1)$\")\n      (regopt :i)))) == ","(begin\n  (send\n    (lvar :args) :[]\n    (str \"active_job\"))) =~ ","args [] == ","@fetch_missing_args nil? ","args delete "," queue_name_with_prefix ","Hash  [] ","k to_s ","input_args map ","klass_data merge ","Sidekiq Cron Support  constantize get_sidekiq_options ","Sidekiq Cron Support  constantize ","Time  strptime "," parse_enqueue_time ","Time  now to_f ","(send\n  (dstr\n    (begin\n      (send\n        (lvar :args) :[]\n        (str \"date_as_argument\")))) :=~\n  (begin\n    (regexp\n      (str \"^(true|t|yes|y|1)$\")\n      (regopt :i)))) == ","(begin\n  (send\n    (lvar :args) :[]\n    (str \"date_as_argument\"))) =~ ","(send\n  (dstr\n    (begin\n      (send\n        (lvar :args) :[]\n        (str \"symbolize_args\")))) :=~\n  (begin\n    (regexp\n      (str \"^(true|t|yes|y|1)$\")\n      (regopt :i)))) == ","(begin\n  (send\n    (lvar :args) :[]\n    (str \"symbolize_args\"))) =~ ","klass_data merge  []= ","input_args stringify_keys  [] ","Hash  []  [] ","klass_data merge  merge ","input_args stringify_keys  [] is_a? ","Hash  []  [] is_a? ","input_args stringify_keys  [] nil? ","Hash  []  [] nil? ","input_args stringify_keys  [] to_s ","Hash  []  [] to_s ","input_input_args stringify_keys  stringify_keys ","input_Hash  []  stringify_keys "," parse_input_args stringify_keys  "," parse_Hash  []  ","input_args stringify_keys  [] empty? ! ","Hash  []  [] empty? ! ","input_args stringify_keys  [] empty? ","Hash  []  [] empty? ","klass_data merge  [] ","(send\n  (dstr\n    (begin\n      (send\n        (lvar :input_args stringify_keys ) :[]\n        (str \"active_job\")))) :=~\n  (begin\n    (regexp\n      (str \"^(true|t|yes|y|1)$\")\n      (regopt :i)))) == ","(send\n  (dstr\n    (begin\n      (send\n        (lvar :Hash  [] ) :[]\n        (str \"active_job\")))) :=~\n  (begin\n    (regexp\n      (str \"^(true|t|yes|y|1)$\")\n      (regopt :i)))) == ","(begin\n  (send\n    (lvar :input_args stringify_keys ) :[]\n    (str \"active_job\"))) =~ ","(begin\n  (send\n    (lvar :Hash  [] ) :[]\n    (str \"active_job\"))) =~ ","input_args stringify_keys  [] == ","Hash  []  [] == ","@fetch_missing_input_args stringify_keys  nil? ","@fetch_missing_Hash  []  nil? ","args delete  nil? ","input_args stringify_keys  delete ","Hash  []  delete ","input_input_args stringify_keys  map ","input_Hash  []  map ","(send\n  (dstr\n    (begin\n      (send\n        (lvar :input_args stringify_keys ) :[]\n        (str \"date_as_argument\")))) :=~\n  (begin\n    (regexp\n      (str \"^(true|t|yes|y|1)$\")\n      (regopt :i)))) == ","(send\n  (dstr\n    (begin\n      (send\n        (lvar :Hash  [] ) :[]\n        (str \"date_as_argument\")))) :=~\n  (begin\n    (regexp\n      (str \"^(true|t|yes|y|1)$\")\n      (regopt :i)))) == ","(begin\n  (send\n    (lvar :input_args stringify_keys ) :[]\n    (str \"date_as_argument\"))) =~ ","(begin\n  (send\n    (lvar :Hash  [] ) :[]\n    (str \"date_as_argument\"))) =~ ","(send\n  (dstr\n    (begin\n      (send\n        (lvar :input_args stringify_keys ) :[]\n        (str \"symbolize_input_args stringify_keys \")))) :=~\n  (begin\n    (regexp\n      (str \"^(true|t|yes|y|1)$\")\n      (regopt :i)))) == ","(send\n  (dstr\n    (begin\n      (send\n        (lvar :Hash  [] ) :[]\n        (str \"symbolize_Hash  [] \")))) :=~\n  (begin\n    (regexp\n      (str \"^(true|t|yes|y|1)$\")\n      (regopt :i)))) == ","(begin\n  (send\n    (lvar :input_args stringify_keys ) :[]\n    (str \"symbolize_input_args stringify_keys \"))) =~ ","(begin\n  (send\n    (lvar :Hash  [] ) :[]\n    (str \"symbolize_Hash  [] \"))) =~ "]}," Sidekiq Cron Job create":{"type":"method","name":"create","children":[],"call":[]}," Sidekiq Cron Job find":{"type":"method","name":"find","children":[],"call":[]}," Sidekiq Cron Job count":{"type":"method","name":"count","children":[],"call":[]}," Sidekiq Cron Job all":{"type":"method","name":"all","children":[],"call":[]}," Sidekiq Cron Job load_from_array":{"type":"method","name":"load_from_array","children":[],"call":[]}," Sidekiq Cron Job load_from_hash":{"type":"method","name":"load_from_hash","children":[],"call":[]}," Sidekiq Cron Job enque!":{"type":"method","name":"enque!","children":[],"call":[" logger debug "," logger "," save ","Sidekiq Client  push ","Sidekiq  load_json ","@message is_a? "," sidekiq_worker_message "," active_job_message ","@klass to_s constantize < ","@klass to_s constantize ","@klass to_s ","klass_const < "," enqueue_sidekiq_worker "," enqueue_active_job "," save_last_enqueue_time ","Sidekiq Cron Support  constantize ","time strftime "," add_jid_history "," enqueue_active_job try ","Sidekiq  logger debug ","Sidekiq  logger "," is_active_job? "]}," Sidekiq Cron Job test_and_enque_for_time!":{"type":"method","name":"test_and_enque_for_time!","children":[],"call":[" remove_previous_enques "," enque! "," should_enque? "]}," Sidekiq Cron Job remove_previous_enques":{"type":"method","name":"remove_previous_enques","children":[],"call":["conn zremrangebyscore ","(send\n  (send\n    (lvar :time) :to_f) :-\n  (const nil :REMEMBER_THRESHOLD)) to_s ","time to_f - ","time to_f "," job_enqueued_key ","Sidekiq  redis "]}," Sidekiq Cron Job should_enque?":{"type":"method","name":"should_enque?","children":[],"call":["conn zadd "," formated_last_time ","time to_f to_s ","time to_f "," job_enqueued_key ","@last_run_time < "," last_time "," status == "," status ","Sidekiq  redis "," not_enqueued_after? "," formated_enqueue_time "," not_past_scheduled_time? ","enqueue == "," formatted_last_time "," formatted_enqueue_time "]}," Sidekiq Cron Job parse_args":{"type":"method","name":"parse_args","children":[],"call":["Sidekiq  load_json "," symbolize_args "," symbolize_args? "," serialize_argument "," convert_to_global_id_hash "," symbolize_ serialize_argument  "," symbolize_ serialize_argument ? "]}," Sidekiq Cron Job not_enqueued_after?":{"type":"method","name":"not_enqueued_after?","children":[],"call":["@last_enqueue_time < "," last_time ","@last_enqueue_time nil? ","@last_enqueue_time to_i < "," last_time to_i ","@last_enqueue_time to_i "]}," Sidekiq Cron Job last_enqueue_time_from_redis":{"type":"method","name":"last_enqueue_time_from_redis","children":[],"call":["Time  parse ","conn hget "," redis_key ","Sidekiq  redis "," exists? "," fetch_missing_args ","Time  strptime "," parse_enqueue_time "]}," Sidekiq Cron Job destroy_removed_jobs":{"type":"method","name":"destroy_removed_jobs","children":[],"call":[]}," Sidekiq Cron Job klass_valid":{"type":"method","name":"klass_valid","children":[],"call":["@klass size > ","@klass size "]}," Sidekiq Cron Job load_from_array!":{"type":"method","name":"load_from_array!","children":[],"call":[]}," Sidekiq Cron Job load_from_hash!":{"type":"method","name":"load_from_hash!","children":[],"call":[]}," Sidekiq Cron Job active_job_message":{"type":"method","name":"active_job_message","children":[],"call":["SecureRandom  uuid ","ActiveJob Base  queue_name_prefix ","(begin\n  (send\n    (const\n      (const nil :ActiveJob) :Base) :queue_name_prefix)) empty? ! ","(begin\n  (send\n    (const\n      (const nil :ActiveJob) :Base) :queue_name_prefix)) empty? ","(begin\n  (ivar :@active_job_queue_name_prefix)) empty? ! ","(begin\n  (ivar :@active_job_queue_name_prefix)) empty? ","ActiveJob Base  queue_name_delimiter ","ActiveJob Base  queue_name_delimiter empty? ! ","ActiveJob Base  queue_name_delimiter empty? ","(begin\n  (ivar :@active_job_queue_name_delimiter)) empty? ! ","(begin\n  (ivar :@active_job_queue_name_delimiter)) empty? "," enqueue_args ","ActiveJob Base  ActiveJob Base  queue_name_delimiter  ","ActiveJob Base  ActiveJob Base  queue_name_delimiter  empty? ! ","ActiveJob Base  ActiveJob Base  queue_name_delimiter  empty? ","(begin\n  (ivar :@active_job_ActiveJob Base  queue_name_delimiter )) empty? ! ","(begin\n  (ivar :@active_job_ActiveJob Base  queue_name_delimiter )) empty? "]}," Sidekiq Cron Job sidekiq_worker_message":{"type":"method","name":"sidekiq_worker_message","children":[],"call":["Sidekiq  load_json ","@message is_a? ","message []= "," enqueue_args ","@Sidekiq  load_json  is_a? ","Sidekiq  load_json  []= "]}," Sidekiq Cron Poller enqueue_job":{"type":"method","name":"enqueue_job","children":[],"call":[" logger error ","ex backtrace first ","ex backtrace "," logger ","ex message ","job test_and_enque_for_time! ","Time  now ","job valid? "," handle_exception "," respond_to? ","Sidekiq  logger error ","Sidekiq  logger "]}," Sidekiq Cron Poller enqueue":{"type":"method","name":"enqueue","children":[],"call":[" logger error ","ex backtrace first ","ex backtrace "," logger ","ex message "," enqueue_job ","Sidekiq Cron Job  all each ","Sidekiq Cron Job  all ","Time  now utc ","Time  now "," handle_exception "," respond_to? ","Sidekiq  logger error ","Sidekiq  logger "]}," Sidekiq Launcher quiet":{"type":"method","name":"quiet","children":[],"call":[" old_quiet "," cron_poller terminate "," cron_poller "]}," Sidekiq Cron Job disabled?":{"type":"method","name":"disabled?","children":[],"call":[" enabled? ! "," enabled? "]}," Sidekiq Cron Job enabled?":{"type":"method","name":"enabled?","children":[],"call":["@status == "]}," Sidekiq Cron Job not_past_scheduled_time?":{"type":"method","name":"not_past_scheduled_time?","children":[],"call":["(send\n  (lvar :current_time) :-\n  (lvar :last_cron_time)) > ","current_time - ","Rufus Scheduler CronLine  new previous_time ","Rufus Scheduler CronLine  new ","(send\n  (send\n    (lvar :current_time) :to_i) :-\n  (send\n    (lvar :last_cron_time) :to_i)) > ","current_time to_i - ","last_cron_time to_i ","current_time to_i ","Rufus Scheduler CronLine  new previous_time utc "," parsed_cron previous_time utc "," parsed_cron previous_time "," parsed_cron ","(send\n  (lvar :current_time) :-\n  (lvar :Rufus Scheduler CronLine  new previous_time )) > ","(send\n  (lvar :current_time) :-\n  (lvar :Rufus Scheduler CronLine  new previous_time utc )) > ","(send\n  (lvar :current_time) :-\n  (lvar : parsed_cron previous_time utc )) > ","(send\n  (send\n    (lvar :current_time) :to_i) :-\n  (send\n    (lvar :Rufus Scheduler CronLine  new previous_time ) :to_i)) > ","(send\n  (send\n    (lvar :current_time) :to_i) :-\n  (send\n    (lvar :Rufus Scheduler CronLine  new previous_time utc ) :to_i)) > ","(send\n  (send\n    (lvar :current_time) :to_i) :-\n  (send\n    (lvar : parsed_cron previous_time utc ) :to_i)) > ","Rufus Scheduler CronLine  new previous_time  to_i ","Rufus Scheduler CronLine  new previous_time utc  to_i "," parsed_cron previous_time utc  to_i "]}," Sidekiq Cron Job formated_enqueue_time":{"type":"method","name":"formated_enqueue_time","children":[],"call":[" last_time getutc to_f to_s "," last_time getutc to_f "," last_time getutc "," last_time "]}," Sidekiq Cron Job queue_name_with_prefix":{"type":"method","name":"queue_name_with_prefix","children":[],"call":["ActiveJob Base  queue_name_prefix ","(begin\n  (send\n    (const\n      (const nil :ActiveJob) :Base) :queue_name_prefix)) empty? ! ","(begin\n  (send\n    (const\n      (const nil :ActiveJob) :Base) :queue_name_prefix)) empty? ","(begin\n  (ivar :@active_job_queue_name_prefix)) empty? ! ","(begin\n  (ivar :@active_job_queue_name_prefix)) empty? ","ActiveJob Base  queue_name_delimiter ","ActiveJob Base  queue_name_delimiter empty? ! ","ActiveJob Base  queue_name_delimiter empty? ","(begin\n  (ivar :@active_job_queue_name_delimiter)) empty? ! ","(begin\n  (ivar :@active_job_queue_name_delimiter)) empty? "," is_active_job? ","ActiveJob Base  ActiveJob Base  queue_name_delimiter  ","ActiveJob Base  ActiveJob Base  queue_name_delimiter  empty? ! ","ActiveJob Base  ActiveJob Base  queue_name_delimiter  empty? ","(begin\n  (ivar :@active_job_ActiveJob Base  queue_name_delimiter )) empty? ! ","(begin\n  (ivar :@active_job_ActiveJob Base  queue_name_delimiter )) empty? "]}," Sidekiq Cron Job enqueue_sidekiq_worker":{"type":"method","name":"enqueue_sidekiq_worker","children":[],"call":["klass_const set perform_async ","klass_const set "," queue_name_with_prefix "," enqueue_args "]}," Sidekiq Cron Job enqueue_active_job":{"type":"method","name":"enqueue_active_job","children":[],"call":["klass_const set perform_later ","klass_const set "," enqueue_args "]}," Sidekiq Cron Job is_active_job?":{"type":"method","name":"is_active_job?","children":[],"call":["@klass to_s constantize < ","@klass to_s constantize ","@klass to_s ","Sidekiq Cron Support  constantize < ","Sidekiq Cron Support  constantize ","(or\n  (lvar :klass)\n  (send\n    (const\n      (const\n        (const nil :Sidekiq) :Cron) :Support) :constantize\n    (send\n      (ivar :@klass) :to_s))) < "]}," Sidekiq Cron Poller poll_interval_average":{"type":"method","name":"poll_interval_average","children":[],"call":["Sidekiq  options [] ","Sidekiq  options ","@config [] "]}," Sidekiq Cron Job save_last_enqueue_time":{"type":"method","name":"save_last_enqueue_time","children":[],"call":["conn hset "," redis_key ","Sidekiq  redis "," serialized_last_enqueue_time "]}," Sidekiq Cron Support constantize":{"type":"method","name":"constantize","children":[],"call":[]}," Sidekiq Cron Job parsed_cron":{"type":"method","name":"parsed_cron","children":[],"call":["Fugit  parse_cron ","Fugit  parse_cronish "," errors << ","e message ","e class ","@cron inspect "," errors ","c class ","c is_a? ","Fugit  parse ","Fugit  parse_Fugit  parse ron ","Fugit  parse_Fugit  parse ronish ","e Fugit  parse lass ","@Fugit  parse ron inspeFugit  parse t ","Fugit  parse  Fugit  parse lass ","Fugit  parse  is_a? "]}," Sidekiq Cron Job parse_enqueue_time":{"type":"method","name":"parse_enqueue_time","children":[],"call":["DateTime  strptime to_time utc ","DateTime  strptime to_time ","DateTime  strptime ","DateTime  parse to_time utc ","DateTime  parse to_time ","DateTime  parse "]}," Sidekiq Cron Job jid_history_key":{"type":"method","name":"jid_history_key","children":[],"call":[" class jid_history_key "," class "]}," Sidekiq Cron Job add_jid_history":{"type":"method","name":"add_jid_history","children":[],"call":["conn ltrim "," jid_history_key ","conn lpush ","Sidekiq  dump_json ","Sidekiq  redis ","(or\n  (send\n    (send\n      (const nil :Sidekiq) :options) :[]\n    (sym :cron_history_size))\n  (int 10)) to_i - ","(or\n  (send\n    (send\n      (const nil :Sidekiq) :options) :[]\n    (sym :cron_history_size))\n  (int 10)) to_i ","Sidekiq  options [] ","Sidekiq  options ","(or\n  (send\n    (const\n      (const nil :Sidekiq) :Options) :[]\n    (sym :cron_history_size))\n  (int 10)) to_i - ","(or\n  (send\n    (const\n      (const nil :Sidekiq) :Options) :[]\n    (sym :cron_history_size))\n  (int 10)) to_i ","Sidekiq Options  [] ","(or\n  (lvar :cron_history_size)\n  (int 10)) to_i - ","(or\n  (lvar :cron_history_size)\n  (int 10)) to_i ","Sidekiq  [] ","Sidekiq  respond_to? ","(or\n  (send\n    (send\n      (const nil :Sidekiq) :options) :[]\n    (sym :Sidekiq  options [] ))\n  (int 10)) to_i - ","(or\n  (send\n    (send\n      (const nil :Sidekiq) :options) :[]\n    (sym :Sidekiq  [] ))\n  (int 10)) to_i - ","(or\n  (send\n    (send\n      (const nil :Sidekiq) :options) :[]\n    (sym :Sidekiq  options [] ))\n  (int 10)) to_i ","(or\n  (send\n    (send\n      (const nil :Sidekiq) :options) :[]\n    (sym :Sidekiq  [] ))\n  (int 10)) to_i ","(or\n  (send\n    (const\n      (const nil :Sidekiq) :Options) :[]\n    (sym :Sidekiq  options [] ))\n  (int 10)) to_i - ","(or\n  (send\n    (const\n      (const nil :Sidekiq) :Options) :[]\n    (sym :Sidekiq  [] ))\n  (int 10)) to_i - ","(or\n  (send\n    (const\n      (const nil :Sidekiq) :Options) :[]\n    (sym :Sidekiq  options [] ))\n  (int 10)) to_i ","(or\n  (send\n    (const\n      (const nil :Sidekiq) :Options) :[]\n    (sym :Sidekiq  [] ))\n  (int 10)) to_i ","(or\n  (lvar :Sidekiq  options [] )\n  (int 10)) to_i - ","(or\n  (lvar :Sidekiq  [] )\n  (int 10)) to_i - ","(or\n  (lvar :Sidekiq  options [] )\n  (int 10)) to_i ","(or\n  (lvar :Sidekiq  [] )\n  (int 10)) to_i "]}," Sidekiq Cron Job jid_history_from_redis":{"type":"method","name":"jid_history_from_redis","children":[],"call":["Sidekiq  load_json ","out map ","conn lrange "," jid_history_key ","Sidekiq  redis "]}," Sidekiq Cron Job pretty_message":{"type":"method","name":"pretty_message","children":[],"call":[" message ","JSON  pretty_generate ","Sidekiq  load_json "]}," Sidekiq Options options_field":{"type":"method","name":"options_field","children":[],"call":[]}," Sidekiq Options []=":{"type":"method","name":"[]=","children":[],"call":[]}," Sidekiq Options []":{"type":"method","name":"[]","children":[],"call":[]}," Sidekiq Cron Support load_yaml":{"type":"method","name":"load_yaml","children":[],"call":[]}," Sidekiq Cron Poller initialize":{"type":"method","name":"initialize","children":[],"call":["Gem Version  new >= ","Gem Version  new ","config []= ","config [] ","Sidekiq  configure_server ","config options []= ","config options [] ","config options ","config respond_to? ","Sidekiq Options  []= "]}," Sidekiq Cron Launcher stop":{"type":"method","name":"stop","children":[],"call":[" cron_poller terminate "," cron_poller "]}," Sidekiq Cron Launcher quiet":{"type":"method","name":"quiet","children":[],"call":[" cron_poller terminate "," cron_poller "]}," Sidekiq Cron Launcher run":{"type":"method","name":"run","children":[],"call":[" cron_poller start "," cron_poller "]}," Sidekiq Cron Launcher initialize":{"type":"method","name":"initialize","children":[],"call":["Sidekiq Cron Poller  new ","config [] > ","config [] ","config []= ","config [] nil? ","options [] > ","options [] ","options []= ","options [] nil? "]}," Sidekiq Cron Job serialize_argument":{"type":"method","name":"serialize_argument","children":[],"call":["hash []= "," serialize_argument ","argument each_with_object ","argument map "," convert_to_global_id_hash "]}," Sidekiq Cron Job deserialize_global_id":{"type":"method","name":"deserialize_global_id","children":[],"call":["GlobalID Locator  locate ","hash [] "]}," Sidekiq Cron Job serialized_global_id?":{"type":"method","name":"serialized_global_id?","children":[],"call":["hash include? ","hash size == ","hash size "]}," Sidekiq Cron Job deserialize_argument":{"type":"method","name":"deserialize_argument","children":[],"call":[" deserialize_argument ","argument transform_values "," deserialize_global_id "," serialized_global_id? ","argument map "]}," Sidekiq Cron Job convert_to_global_id_hash":{"type":"method","name":"convert_to_global_id_hash","children":[],"call":[" raise ","argument class ","argument to_global_id to_s ","argument to_global_id "]}," Sidekiq Cron Job serialized_last_enqueue_time":{"type":"method","name":"serialized_last_enqueue_time","children":[],"call":[]}," Sidekiq Cron Job symbolize_args":{"type":"method","name":"symbolize_args","children":[],"call":["input symbolize_keys ","input respond_to? ","input is_a? ","arg symbolize_keys ","arg respond_to? ","input map "]}," Sidekiq Cron Job symbolize_args?":{"type":"method","name":"symbolize_args?","children":[],"call":[]}," Sidekiq Cron Job formatted_last_time":{"type":"method","name":"formatted_last_time","children":[],"call":[" last_time getutc iso8601 "," last_time getutc "," last_time "]}," Sidekiq Cron Job formatted_enqueue_time":{"type":"method","name":"formatted_enqueue_time","children":[],"call":[" last_time getutc to_f to_s "," last_time getutc to_f "," last_time getutc "," last_time "]}," Sidekiq Cron Job enqueue_args":{"type":"method","name":"enqueue_args","children":[],"call":[" deserialize_argument ","@args + ","Time  now to_f ","Time  now "," date_as_argument? ","@@args +  + "]}," Sidekiq Cron Job date_as_argument?":{"type":"method","name":"date_as_argument?","children":[],"call":["@date_as_argument ! ! ","@date_as_argument ! "]}," Sidekiq Options new_version?":{"type":"method","name":"new_version?","children":[],"call":[]}}