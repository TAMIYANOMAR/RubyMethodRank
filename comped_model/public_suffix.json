{" PublicSuffix valid?":{"type":"method","name":"valid?","children":[],"call":["List  default ","list default_rule "]}," PublicSuffix parse":{"type":"method","name":"parse","children":[],"call":["List  default ","list default_rule "]}," PublicSuffix Rule Exception decompose":{"type":"method","name":"decompose","children":[],"call":["domain to_s chomp =~ "," parts join "," parts ","domain to_s chomp ","domain to_s ","matches [] ","domain to_s match ","domain to_s match  [] "]}," PublicSuffix Rule Exception parts":{"type":"method","name":"parts","children":[],"call":["@value split [] ","@value split "]}," PublicSuffix Rule Exception initialize":{"type":"method","name":"initialize","children":[],"call":["name to_s [] ","name to_s ","definition to_s [] ","definition to_s "]}," PublicSuffix Rule Wildcard decompose":{"type":"method","name":"decompose","children":[],"call":["domain to_s chomp =~ "," parts join "," parts ","domain to_s chomp ","domain to_s ","matches [] ","domain to_s match ","(send\n  (array\n    (str \".*?\")) :+\n  (send nil :parts)) join ","(str \".*?\") + ","domain to_s match  [] "]}," PublicSuffix Rule Wildcard length":{"type":"method","name":"length","children":[],"call":[" parts length + "," parts length "," parts "]}," PublicSuffix Rule Wildcard parts":{"type":"method","name":"parts","children":[],"call":["@value split "]}," PublicSuffix Rule Wildcard initialize":{"type":"method","name":"initialize","children":[],"call":["name to_s [] ","name to_s ","definition to_s [] ","definition to_s "]}," PublicSuffix Rule Normal decompose":{"type":"method","name":"decompose","children":[],"call":["domain to_s chomp =~ "," parts join "," parts ","domain to_s chomp ","domain to_s ","matches [] ","domain to_s match ","domain to_s match  [] "]}," PublicSuffix Rule Normal parts":{"type":"method","name":"parts","children":[],"call":["@value split "]}," PublicSuffix Rule Normal initialize":{"type":"method","name":"initialize","children":[],"call":[]}," PublicSuffix Rule Base odiff":{"type":"method","name":"odiff","children":[],"call":["one [] ","one length ","one [] == ","two [] ","ii < ","one size "]}," PublicSuffix Rule Base decompose":{"type":"method","name":"decompose","children":[],"call":[" raise "," __method__ "," class "]}," PublicSuffix Rule Base parts":{"type":"method","name":"parts","children":[],"call":[" raise "," __method__ "," class "]}," PublicSuffix Rule Base length":{"type":"method","name":"length","children":[],"call":[" parts length "," parts "," raise "]}," PublicSuffix Rule Base allow?":{"type":"method","name":"allow?","children":[],"call":[" decompose last nil? ! "," decompose last nil? "," decompose last "," decompose "]}," PublicSuffix Rule Base match?":{"type":"method","name":"match?","children":[],"call":[" odiff empty? "," odiff ","Domain  domain_to_labels "," labels ","diff [] == ","diff [] ","diff empty? ","name chomp "," value ","diff end_with? "," oname chomp  empty? "," oname chomp  ","name chomp  [] == ","name chomp  [] ","name chomp  empty? ","name chomp  end_with? "]}," PublicSuffix Rule Base ==":{"type":"method","name":"==","children":[],"call":[" name == ","other name "," name "," equal? ","other is_a? "," class "," value == ","other value "," value "," class == ","other class "]}," PublicSuffix Rule Base initialize":{"type":"method","name":"initialize","children":[],"call":["Domain  domain_to_labels "," class name split last downcase to_sym "," class name split last downcase "," class name split last "," class name split "," class name "," class ","name to_s ","value to_s ","@value count + ","@value count ","value to_s  count + ","value to_s  count "]}," PublicSuffix Rule factory":{"type":"method","name":"factory","children":[],"call":[]}," PublicSuffix List parse":{"type":"method","name":"parse","children":[],"call":["list add ","Rule  factory ","line =~ ","line empty? ","line strip! ","input each_line "," new "]}," PublicSuffix List default_definition":{"type":"method","name":"default_definition","children":[],"call":["File  new ","File  join ","File  dirname "]}," PublicSuffix List reload":{"type":"method","name":"reload","children":[],"call":[" clear default "," clear "]}," PublicSuffix List clear":{"type":"method","name":"clear","children":[],"call":[" default= ","@rules clear "," reindex! "]}," PublicSuffix List default=":{"type":"method","name":"default=","children":[],"call":[]}," PublicSuffix List default":{"type":"method","name":"default","children":[],"call":[" parse "," default_definition "]}," PublicSuffix List select":{"type":"method","name":"select","children":[],"call":["rule match? ","@rules values_at select ","@rules values_at ","@indexes [] ","Domain  domain_to_labels first ","Domain  domain_to_labels ","domain include? ","domain to_s !~ ","domain to_s ","domain to_s =~ ","finder to_a ","rule private ! ","rule private ","finder select ","@rules values_at lazy ","Domain  name_to_labels last ","Domain  name_to_labels ","name to_s ","parts [] + + ","parts [] + ","parts [] ","index >= ","parts size ","rules << "," entry_to_rule ","match private == ","match private ","ignore_private == ","match nil? ! ","match nil? ","@rules [] "," loop ","name split reverse! ","name split ","rule @rules [] ? ","@rules values_at lazy  to_a ","@rules values_at lazy  select ","Domain  name to_s _to_labels last ","Domain  name to_s _to_labels ","name to_s  to_s ","name split reverse!  [] + + ","name split reverse!  [] + ","name split reverse!  [] ","name split reverse!  size ","@rules []  private == ","@rules []  private ","@rules []  nil? ! ","@rules []  nil? ","name to_s  split reverse! ","name to_s  split "]}," PublicSuffix List find":{"type":"method","name":"find","children":[],"call":["t length > ","r length ","t length ","rules inject ","(send\n  (lvar :rules) :select) first ","r type == ","r type ","rules select "," select ","rules detect ","l length > ","l length ","r class == ","r class "," select inject ","r instance_of? "," select  inject ","(send\n  (lvar : select ) :select) first "," select  select "," select  detect "]}," PublicSuffix List empty?":{"type":"method","name":"empty?","children":[],"call":["@rules empty? "]}," PublicSuffix List size":{"type":"method","name":"size","children":[],"call":["@rules size "]}," PublicSuffix List add":{"type":"method","name":"add","children":[],"call":[" create_index! ","index == ","@rules << "," reindex! ","@rules []= "," rule_to_entry ","rule value "]}," PublicSuffix List to_a":{"type":"method","name":"to_a","children":[],"call":[]}," PublicSuffix List each":{"type":"method","name":"each","children":[],"call":["@rules each ","(send\n  (const nil :Enumerator) :new) each ","y << "," entry_to_rule ","Enumerator  new "]}," PublicSuffix List ==":{"type":"method","name":"==","children":[],"call":[" rules == ","other rules "," rules "," equal? ","other is_a? ","@rules == "]}," PublicSuffix List create_index!":{"type":"method","name":"create_index!","children":[],"call":["@indexes [] << ","@indexes [] ","@indexes []= ","@indexes has_key? ! ","@indexes has_key? ","(send\n  (ivar :@rules) :map) each_with_index ","l labels first ","l labels ","@rules map "]}," PublicSuffix List initialize":{"type":"method","name":"initialize","children":[],"call":[" create_index! "," block_given? "," reindex! "]}," PublicSuffix Domain valid_subdomain?":{"type":"method","name":"valid_subdomain?","children":[],"call":[" valid? "," subdomain? "]}," PublicSuffix Domain valid_domain?":{"type":"method","name":"valid_domain?","children":[],"call":[" valid? "," domain? "]}," PublicSuffix Domain valid?":{"type":"method","name":"valid?","children":[],"call":["r allow? "," name ","r nil? ! ","r nil? "," rule "," rule  allow? "," rule  nil? ! "," rule  nil? ","  rule ule "]}," PublicSuffix Domain is_a_subdomain?":{"type":"method","name":"is_a_subdomain?","children":[],"call":[" subdomain? "]}," PublicSuffix Domain is_a_domain?":{"type":"method","name":"is_a_domain?","children":[],"call":[" subdomain? ! "," subdomain? "," domain? "]}," PublicSuffix Domain subdomain?":{"type":"method","name":"subdomain?","children":[],"call":["(or\n  (or\n    (send\n      (send nil :tld) :nil?)\n    (send\n      (send nil :sld) :nil?))\n  (send\n    (send nil :trd) :nil?)) ! "," trd nil? "," trd "," sld nil? "," sld "," tld nil? "," tld ","(or\n  (or\n    (send\n      (ivar :@tld) :nil?)\n    (send\n      (ivar :@sld) :nil?))\n  (send\n    (ivar :@trd) :nil?)) ! ","@trd nil? ","@sld nil? ","@tld nil? "]}," PublicSuffix Domain domain?":{"type":"method","name":"domain?","children":[],"call":["(or\n  (send\n    (send nil :tld) :nil?)\n  (send\n    (send nil :sld) :nil?)) ! "," sld nil? "," sld "," tld nil? "," tld ","(or\n  (send\n    (ivar :@tld) :nil?)\n  (send\n    (ivar :@sld) :nil?)) ! ","@sld nil? ","@tld nil? "]}," PublicSuffix Domain rule":{"type":"method","name":"rule","children":[],"call":["List  default find "," name ","List  default "]}," PublicSuffix Domain subdomain":{"type":"method","name":"subdomain","children":[],"call":["(send nil :trd) join "," tld "," sld "," trd "," subdomain? ","(ivar :@trd) join "]}," PublicSuffix Domain domain":{"type":"method","name":"domain","children":[],"call":["(send nil :sld) join "," tld "," sld "," domain? ","(ivar :@sld) join "]}," PublicSuffix Domain name":{"type":"method","name":"name","children":[],"call":["(send\n  (array\n    (send nil :trd)\n    (send nil :sld)\n    (send nil :tld)) :reject) join ","part nil? ","(send nil :trd) reject "," tld "," sld "," trd ","(ivar :@trd) compact join ","(ivar :@trd) compact "]}," PublicSuffix Domain trd":{"type":"method","name":"trd","children":[],"call":[]}," PublicSuffix Domain sld":{"type":"method","name":"sld","children":[],"call":[]}," PublicSuffix Domain tld":{"type":"method","name":"tld","children":[],"call":[]}," PublicSuffix Domain to_a":{"type":"method","name":"to_a","children":[],"call":[" tld "," sld "," trd "]}," PublicSuffix Domain to_s":{"type":"method","name":"to_s","children":[],"call":[" name "]}," PublicSuffix Domain initialize":{"type":"method","name":"initialize","children":[],"call":[" block_given? "]}," PublicSuffix Domain domain_to_labels":{"type":"method","name":"domain_to_labels","children":[],"call":[]}," PublicSuffix List private_domains=":{"type":"method","name":"private_domains=","children":[],"call":[]}," PublicSuffix List private_domains?":{"type":"method","name":"private_domains?","children":[],"call":[]}," PublicSuffix Rule Base type":{"type":"method","name":"type","children":[],"call":[" class type "," class "]}," PublicSuffix normalize":{"type":"method","name":"normalize","children":[],"call":[]}," PublicSuffix decompose":{"type":"method","name":"decompose","children":[],"call":[]}," PublicSuffix domain":{"type":"method","name":"domain","children":[],"call":[]}," PublicSuffix Rule default":{"type":"method","name":"default","children":[],"call":[]}," PublicSuffix Rule Exception length":{"type":"method","name":"length","children":[],"call":[" parts length "," parts "]}," PublicSuffix Rule Exception rule":{"type":"method","name":"rule","children":[],"call":["BANG  + "," value "]}," PublicSuffix Rule Wildcard rule":{"type":"method","name":"rule","children":[],"call":["STAR  + + "," value ","STAR  + "," value == "]}," PublicSuffix Rule Normal length":{"type":"method","name":"length","children":[],"call":[" parts length "," parts "]}," PublicSuffix Rule Normal rule":{"type":"method","name":"rule","children":[],"call":[" value "]}," PublicSuffix List default_rule":{"type":"method","name":"default_rule","children":[],"call":["PublicSuffix Rule  default "]}," PublicSuffix List indexes":{"type":"method","name":"indexes","children":[],"call":["@indexes dup "]}," PublicSuffix List reindex!":{"type":"method","name":"reindex!","children":[],"call":["@indexes [] << ","@indexes [] ","Domain  name_to_labels last ","Domain  name_to_labels ","rule value ","@rules each_with_index "]}," PublicSuffix Domain name_to_labels":{"type":"method","name":"name_to_labels","children":[],"call":[]}," PublicSuffix Rule Exception build":{"type":"method","name":"build","children":[],"call":[]}," PublicSuffix Rule Wildcard build":{"type":"method","name":"build","children":[],"call":[]}," PublicSuffix Rule Base build":{"type":"method","name":"build","children":[],"call":[]}," PublicSuffix List rule_to_entry":{"type":"method","name":"rule_to_entry","children":[],"call":["Rule Entry  new ","rule private ","rule length ","rule class "]}," PublicSuffix List entry_to_rule":{"type":"method","name":"entry_to_rule","children":[],"call":["entry type new ","entry private ","entry length ","entry type "]}}