{" Http Parameters []":{"type":"method","name":"[]","children":[],"call":[" default_headers [] ","field downcase "," default_headers "]}," Http Parameters []=":{"type":"method","name":"[]=","children":[],"call":[" default_headers []= ","field downcase "," default_headers "]}," Http Parameters initialize":{"type":"method","name":"initialize","children":[],"call":[" default_headers= "]}," Http MimeType emit":{"type":"method","name":"emit","children":[],"call":["@emit_with [] "]}," Http MimeType parse":{"type":"method","name":"parse","children":[],"call":["@parse_with [] "]}," Http MimeType emit_with":{"type":"method","name":"emit_with","children":[],"call":[]}," Http MimeType parse_with":{"type":"method","name":"parse_with","children":[],"call":[]}," Http MimeType initialize":{"type":"method","name":"initialize","children":[],"call":[" class register "," class "]}," Http MimeType []":{"type":"method","name":"[]","children":[],"call":["@mime_types [] ","@shortcuts [] ","type is_a? "]}," Http MimeType register":{"type":"method","name":"register","children":[],"call":["@shortcuts []= ","obj shortcut ","@mime_types []= ","obj type "]}," Http Client parse_response":{"type":"method","name":"parse_response","children":[],"call":["response body ","mime_type parse ","MimeType  [] ","response [] split first ","response [] split ","response [] ","MimeType  []  parse "]}," Http Client request":{"type":"method","name":"request","children":[],"call":["response body "," parse_response ","options [] ","http request ","request set_form_data ","request_class new ","@uri request_uri ","Net HTTP  const_get ","verb to_s capitalize ","verb to_s ","http use_ssl= ","@uri is_a? ","Net HTTP  new ","@uri port ","@uri host ","headers []= ","k to_s ","raw_headers each ","@options merge "," raise ","response parse_body ","response body= ","net_http_response body ","response status= "," Integer ","net_http_response code ","response []= ","net_http_response each_header ","Http Response  new "," format_response ","opts response ","c call ","opts callbacks [] each ","opts callbacks [] ","opts callbacks "," perform ","Request  new ","headers [] ","URI  encode_www_form ","opts form ","opts headers ","@default_options merge ","response headers [] ","response headers ","response code "," body "," puts ","code == ","opts follow ","opts proxy ","http request  body ","Http Response  new  body "," perform  body ","response URI  encode_www_form  "," parse_http request  "," parse_Http Response  new  "," parse_ perform  ","@options merge  [] ","http request_class new  ","http Request  new  ","Net HTTP  new  request ","request_class new  set_form_data ","Request  new  set_form_data ","request_class new _class new ","Request  new _class new ","Net HTTP  const_get  new ","@uri request_class new _uri ","@uri Request  new _uri ","@response headers []  request_response headers []  ","Net HTTP  new  use_ssl= ","@response headers []  is_a? ","@response headers []  port ","@response headers []  host ","opts headers  []= ","raw_opts headers  each ","@@options merge  merge ","http request  parse_body ","Http Response  new  parse_body "," perform  parse_body ","response parse_URI  encode_www_form  ","http request  body= ","Http Response  new  body= "," perform  body= ","response URI  encode_www_form = ","net_http_http request  body ","net_http_Http Response  new  body ","net_http_ perform  body ","net_Net HTTP  new _response body ","net_http_response URI  encode_www_form  ","http request  status= ","Http Response  new  status= "," perform  status= ","net_http_http request  code ","net_http_Http Response  new  code ","net_http_ perform  code ","net_Net HTTP  new _response code ","http request  code ","net_http_response response code  ","http request  []= ","Http Response  new  []= "," perform  []= ","net_http_http request  each_header ","net_http_Http Response  new  each_header ","net_http_ perform  each_header ","net_Net HTTP  new _response each_header ","http request  each_header "," format_http request  "," format_Http Response  new  "," format_ perform  ","opts http request  ","opts Http Response  new  ","opts  perform  ","@default_options merge  response ","@default_options merge  callbacks [] each ","@default_options merge  callbacks [] ","@default_options merge  callbacks ","opts headers  [] ","URI  enresponse code _www_form ","@default_options merge  form ","opts opts headers  ","@default_options merge  headers ","@default_@options merge  merge ","http request  headers [] ","Http Response  new  headers [] "," perform  headers [] ","response opts headers  [] ","http request  headers ","Http Response  new  headers "," perform  headers ","response opts headers  ","Http Response  new  code "," perform  code ","response response code  "," URI  encode_www_form  ","response code  == ","@default_options merge  follow ","@default_options merge  proxy ","opts opts proxy  "]}," Http Client patch":{"type":"method","name":"patch","children":[],"call":[" request "]}," Http Client connect":{"type":"method","name":"connect","children":[],"call":[" request "]}," Http Client options":{"type":"method","name":"options","children":[],"call":[" request "]}," Http Client trace":{"type":"method","name":"trace","children":[],"call":[" request "]}," Http Client delete":{"type":"method","name":"delete","children":[],"call":[" request "]}," Http Client put":{"type":"method","name":"put","children":[],"call":[" request "]}," Http Client post":{"type":"method","name":"post","children":[],"call":[" request "]}," Http Client get":{"type":"method","name":"get","children":[],"call":[" request "]}," Http Client head":{"type":"method","name":"head","children":[],"call":[" request "]}," Http Client initialize":{"type":"method","name":"initialize","children":[],"call":["(pair\n  (sym :response)\n  (sym :parsed_body)) merge "," URI ","uri is_a? ","(pair\n  (sym :response)\n  (sym :object)) merge ","uri to_s ","Options  new "]}," Http Chainable default_headers=":{"type":"method","name":"default_headers=","children":[],"call":["opts headers= "," default_options dup "," default_options "]}," Http Chainable default_headers":{"type":"method","name":"default_headers","children":[],"call":[" default_options headers "," default_options "]}," Http Chainable accept":{"type":"method","name":"accept","children":[],"call":[" with ","mime_type type "," raise ","Http MimeType  [] ","type is_a? ","Http MimeType  []  type "]}," Http Chainable with_headers":{"type":"method","name":"with_headers","children":[],"call":["Parameters  new "," default_headers merge "," default_headers "," branch "," default_options with_headers "," default_options "]}," Http Chainable request":{"type":"method","name":"request","children":[],"call":["Client  new request ","options merge ","Client  new "," default_headers "," default_headers merge ","options [] "," branch request "," branch "," default_ default_headers  "," default_ default_headers merge  "," default_ default_headers  merge "," default_ default_headers merge  merge "]}," Http Chainable patch":{"type":"method","name":"patch","children":[],"call":[" request "]}," Http Chainable connect":{"type":"method","name":"connect","children":[],"call":[" request "]}," Http Chainable options":{"type":"method","name":"options","children":[],"call":[" request "]}," Http Chainable trace":{"type":"method","name":"trace","children":[],"call":[" request "]}," Http Chainable delete":{"type":"method","name":"delete","children":[],"call":[" request "]}," Http Chainable put":{"type":"method","name":"put","children":[],"call":[" request "]}," Http Chainable post":{"type":"method","name":"post","children":[],"call":[" request "]}," Http Chainable get":{"type":"method","name":"get","children":[],"call":[" request "]}," Http Chainable head":{"type":"method","name":"head","children":[],"call":[" request ","(pair\n  (sym :response)\n  (sym :object)) merge "]}," Http Response parse_body":{"type":"method","name":"parse_body","children":[],"call":["mime_type parse ","MimeType  [] ","@headers [] split first ","@headers [] split ","@headers [] "," body ","MimeType  []  parse "]}," Http Response []":{"type":"method","name":"[]","children":[],"call":["@headers [] ","header to_s downcase ","header to_s ","Http  canonicalize_header "]}," Http Response []=":{"type":"method","name":"[]=","children":[],"call":["@headers []= ","(lvar :old_value) flatten << ","(lvar :old_value) flatten ","@headers [] ","header to_s downcase ","header to_s ","Http  canonicalize_header ","name [] ","(lvar :@headers [] ) flatten << ","(lvar :@headers [] ) flatten "]}," Http Response initialize":{"type":"method","name":"initialize","children":[],"call":["@headers []= ","Http  canonicalize_header ","headers each "]}," Curl Multi perform":{"type":"method","name":"perform","children":[],"call":["(send\n  (ivar :@clients) :map) each ","client perform ","Thread  new ","@clients map "]}," Curl Multi add":{"type":"method","name":"add","children":[],"call":["@clients << "]}," Curl Multi initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Curl Easy http_delete":{"type":"method","name":"http_delete","children":[],"call":[" perform "]}," Curl Easy http_post":{"type":"method","name":"http_post","children":[],"call":[" perform "]}," Curl Easy http_put":{"type":"method","name":"http_put","children":[],"call":[" perform "]}," Curl Easy http_get":{"type":"method","name":"http_get","children":[],"call":[" perform "]}," Curl Easy perform":{"type":"method","name":"perform","children":[],"call":[" raise ","ex message ","ex message [] ","response body ","response code ","client send ","Http Client  new ","client request ","client send  body ","client request  body ","client send  code ","client request  code ","Http Client  new  send ","Http Client  new  request "]}," Curl Easy initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Http canonicalize_header":{"type":"method","name":"canonicalize_header","children":[],"call":["header to_s split map join ","header to_s split map ","header to_s split ","header to_s "]}," URI decode_www_form":{"type":"method","name":"decode_www_form","children":[],"call":[]}," URI encode_www_form":{"type":"method","name":"encode_www_form","children":[],"call":[]}," URI decode_www_form_component":{"type":"method","name":"decode_www_form_component","children":[],"call":[]}," URI encode_www_form_component":{"type":"method","name":"encode_www_form_component","children":[],"call":[]}," Http Response to_a":{"type":"method","name":"to_a","children":[],"call":[" parse_body "," headers "," status "]}," Http Request to_net_http_request":{"type":"method","name":"to_net_http_request","children":[],"call":["request body= ","request_class new ","@uri request_uri ","Net HTTP  const_get ","@method to_s capitalize ","@method to_s ","request_class new  body= ","request_class new _class new ","Net HTTP  const_get  new ","@uri request_class new _uri "]}," Http Request []":{"type":"method","name":"[]","children":[],"call":["@headers [] ","Http  canonicalize_header "]}," Http Request initialize":{"type":"method","name":"initialize","children":[],"call":["@headers []= ","Http  canonicalize_header ","name [] ","name to_s ","headers each "," URI ","uri to_s ","uri is_a? "," raise ","METHODS  include? ","method to_s downcase to_sym ","method to_s downcase ","method to_s ","name to_s  [] ","name to_s  to_s "]}," Http Options argument_error!":{"type":"method","name":"argument_error!","children":[],"call":[" raise "," caller [] "," caller "]}," Http Options dup":{"type":"method","name":"dup","children":[],"call":[" block_given? "]}," Http Options to_hash":{"type":"method","name":"to_hash","children":[],"call":[" callbacks "," form "," headers "," response "," follow "," body "," proxy "]}," Http Options merge":{"type":"method","name":"merge","children":[],"call":["Options  new ","(send\n  (lvar :l) :+\n  (lvar :r)) uniq ","l + ","v1 merge ","h1 merge ","other to_hash "," to_hash "]}," Http Options []":{"type":"method","name":"[]","children":[],"call":[" send "]}," Http Options with_callback":{"type":"method","name":"with_callback","children":[],"call":["opts callbacks []= "," callbacks [] dup << "," callbacks [] dup "," callbacks [] "," callbacks ","opts callbacks ","opts callbacks= "," callbacks dup "," dup "," argument_error! ","(sym :request) include? ","callback arity == ","callback arity ","callback respond_to? "]}," Http Options with_form":{"type":"method","name":"with_form","children":[],"call":["opts form= "," dup "]}," Http Options with_headers":{"type":"method","name":"with_headers","children":[],"call":["opts headers= "," headers merge ","headers to_hash "," headers "," dup "," argument_error! ","headers respond_to? "]}," Http Options with_response":{"type":"method","name":"with_response","children":[],"call":["opts response= "," dup "," argument_error! ","(sym :auto) include? "]}," Http Options initialize":{"type":"method","name":"initialize","children":[],"call":["default [] ","options [] "," class default_ssl_socket_class "," class "," class default_socket_class "]}," Http Options new":{"type":"method","name":"new","children":[],"call":["options is_a? "]}," Http Client format_response":{"type":"method","name":"format_response","children":[],"call":[" raise ","response body ","response parse_body ","method == "]}," Http Client perform":{"type":"method","name":"perform","children":[],"call":["res body= ","response body ","res status= "," Integer ","response code ","res []= ","response each_header ","Http Response  new tap ","Http Response  new ","http request ","request to_net_http_request ","http use_ssl= ","uri is_a? ","Net HTTP  new ","uri port ","uri host ","request uri ","response [] ","@body_remaining < ","chunk length ","parser chunk ","parser << ","socket readpartial ","@body_remaining > ","parser headers ","parser http_version ","parser status_code "," raise ","$! message ","request stream ","socket connect ","options [] open ","options [] ","request proxy ","Http Response Parser  new ","http request  body ","http request  code ","http request  each_header ","Net HTTP  new  request ","request to_net_Net HTTP  new _request ","Net HTTP  new  use_ssl= ","request uri  is_a? ","request uri  port ","request uri  host ","request request uri  ","http request  [] "," Integer  < ","parser chunk  length ","parser parser chunk  ","Http Response Parser  new  chunk ","Http Response Parser  new  << ","options [] open  readpartial "," Integer  > ","Http Response Parser  new  headers ","parser Net HTTP  new _version ","Http Response Parser  new  http_version ","Http Response Parser  new  status_code ","options [] open  connect "]}," Http Chainable branch":{"type":"method","name":"branch","children":[],"call":["Client  new "]}," Http Chainable default_callbacks=":{"type":"method","name":"default_callbacks=","children":[],"call":["opts callbacks= "," default_options dup "," default_options "]}," Http Chainable default_callbacks":{"type":"method","name":"default_callbacks","children":[],"call":[" default_options callbacks "," default_options "]}," Http Chainable default_options=":{"type":"method","name":"default_options=","children":[],"call":["Options  new "]}," Http Chainable default_options":{"type":"method","name":"default_options","children":[],"call":["Options  new "]}," Http Chainable on":{"type":"method","name":"on","children":[],"call":[" branch "," default_options with_callback "," default_options "]}," Http Response Parser reset":{"type":"method","name":"reset","children":[],"call":[]}," Http Response Parser on_message_complete":{"type":"method","name":"on_message_complete","children":[],"call":[]}," Http Response Parser chunk":{"type":"method","name":"chunk","children":[],"call":[]}," Http Response Parser on_body":{"type":"method","name":"on_body","children":[],"call":["@chunk << "]}," Http Response Parser on_headers_complete":{"type":"method","name":"on_headers_complete","children":[],"call":[]}," Http Response Parser status_code":{"type":"method","name":"status_code","children":[],"call":["@parser status_code "]}," Http Response Parser http_version":{"type":"method","name":"http_version","children":[],"call":["@parser http_version join ","@parser http_version "]}," Http Response Parser headers?":{"type":"method","name":"headers?","children":[],"call":["@headers ! ! ","@headers ! "]}," Http Response Parser add":{"type":"method","name":"add","children":[],"call":["@parser << "]}," Http Response Parser initialize":{"type":"method","name":"initialize","children":[],"call":[" reset ","Http Parser  new "]}," Http Response body":{"type":"method","name":"body","children":[],"call":[" block_given? ","body << ","@body_proc call "," raise "]}," Http Request stream":{"type":"method","name":"stream","children":[],"call":[" raise "," body class "," body ","socket << << ","CRLF  * ","socket << ","chunk bytesize to_s ","chunk bytesize "," body each ","request_header << ","encoding == ","@headers [] "," body to_s "," body length ","@headers each "," version "," uri path "," uri "," method to_s upcase "," method to_s "," method ","@headers []  == "]}," Http Options with_follow":{"type":"method","name":"with_follow","children":[],"call":["opts follow= "," dup "]}," Http Options with_body":{"type":"method","name":"with_body","children":[],"call":["opts body= "," dup "]}," Http Options with_proxy":{"type":"method","name":"with_proxy","children":[],"call":["opts proxy= "," dup "]}," Http Client body":{"type":"method","name":"body","children":[],"call":["URI  encode_www_form ","opts form ","headers [] ","opts body ","opts URI  encode_www_form  ","opts opts body  "]}," Http Chainable with_follow":{"type":"method","name":"with_follow","children":[],"call":[" branch "," default_options with_follow "," default_options "]}," Http Chainable with_response":{"type":"method","name":"with_response","children":[],"call":[" branch "," default_options with_response "," default_options "]}," Http Chainable via":{"type":"method","name":"via","children":[],"call":[" raise "," branch "," default_options with_proxy "," default_options ","proxy_hash keys size >= ","proxy_hash keys size ","proxy_hash keys ","proxy_hash []= ","proxy [] ","proxy [] is_a? "]}," HTTP canonicalize_header":{"type":"method","name":"canonicalize_header","children":[],"call":["header to_s split map join ","header to_s split map ","header to_s split ","header to_s "]}," HTTP Response Parser reset":{"type":"method","name":"reset","children":[],"call":["@parser reset! ","HTTP Headers  new ","Hash  new ","@state reset! "," +@ ","Headers  new ","@handler reset ","@parser finish ","@parser reset "]}," HTTP Response Parser on_message_complete":{"type":"method","name":"on_message_complete","children":[],"call":["@finished []= "," reset ","@state http_status < ","@state http_status "]}," HTTP Response Parser chunk":{"type":"method","name":"chunk","children":[],"call":[]}," HTTP Response Parser on_body":{"type":"method","name":"on_body","children":[],"call":["@chunk << "]}," HTTP Response Parser on_headers_complete":{"type":"method","name":"on_headers_complete","children":[],"call":["@finished []= "," append_header "]}," HTTP Response Parser status_code":{"type":"method","name":"status_code","children":[],"call":["@parser status_code ","@state http_status "]}," HTTP Response Parser http_version":{"type":"method","name":"http_version","children":[],"call":["@parser http_version join ","@parser http_version ","@state http_version "]}," HTTP Response Parser headers?":{"type":"method","name":"headers?","children":[],"call":["@headers ! ! ","@headers ! ","@finished [] "]}," HTTP Response Parser add":{"type":"method","name":"add","children":[],"call":["@parser << "," raise ","@parser parse ","e message "," parser << "," parser "]}," HTTP Response Parser initialize":{"type":"method","name":"initialize","children":[],"call":[" reset ","Http Parser  new ","HTTP Parser  new ","HttpParser Parser  new ","i type= ","HttpParser Parser  new_instance ","LLHttp Parser  new ","Handler  new "]}," HTTP Response to_a":{"type":"method","name":"to_a","children":[],"call":[" parse_body "," headers "," status "," body to_s "," body "," headers to_h "," status to_i "]}," HTTP Response parse_body":{"type":"method","name":"parse_body","children":[],"call":[" body ","mime_type parse ","MimeType  [] ","@headers [] split first ","@headers [] split ","@headers [] ","MimeType  []  parse "]}," HTTP Response body":{"type":"method","name":"body","children":[],"call":[" block_given? ","body << ","@body_proc call "," raise "]}," HTTP Response []":{"type":"method","name":"[]","children":[],"call":["@headers [] ","Http  canonicalize_header "," canonicalize_header "]}," HTTP Response []=":{"type":"method","name":"[]=","children":[],"call":["@headers []= ","(lvar :old_value) flatten << ","(lvar :old_value) flatten ","@headers [] ","Http  canonicalize_header ","name [] "," canonicalize_header ","(lvar :@headers [] ) flatten << ","(lvar :@headers [] ) flatten "]}," HTTP Response initialize":{"type":"method","name":"initialize","children":[],"call":["@headers []= ","Http  canonicalize_header ","headers each "," canonicalize_header ","HTTP Headers  coerce ","HTTP Response Status  new ","HTTP URI  parse ","opts fetch ","Response Body  new "," charset ","opts [] ","opts include? "," body_stream_for "," init_request "," default_encoding ","HTTP Headers  coerce  []= "," body_ body_stream_for _for "]}," HTTP RequestStream send_request_body":{"type":"method","name":"send_request_body","children":[],"call":["@socket << << ","CRLF  * ","@socket << ","chunk bytesize to_s ","chunk bytesize ","@body each ","@body is_a? "]}," HTTP RequestStream send_request_header":{"type":"method","name":"send_request_header","children":[],"call":["@socket << "," join_headers "," add_body_type_headers "," add_headers "," join_ join_headers s "," add_body_type_ join_headers s "," add_ join_headers s "]}," HTTP RequestStream join_headers":{"type":"method","name":"join_headers","children":[],"call":["@request_header join + ","(const nil :CRLF) * ","@request_header join "]}," HTTP RequestStream add_body_type_headers":{"type":"method","name":"add_body_type_headers","children":[],"call":["@request_header << "," raise ","encoding == ! ","encoding == ","@headers [] ","@body is_a? ","@body length ","@headers [] ! ","@headers []  == ! ","@headers []  == "]}," HTTP RequestStream stream":{"type":"method","name":"stream","children":[],"call":[" send_request_body "," send_request_header "]}," HTTP RequestStream add_headers":{"type":"method","name":"add_headers","children":[],"call":["@request_header << ","@headers each "]}," HTTP RequestStream valid_body_type":{"type":"method","name":"valid_body_type","children":[],"call":["checks any? ","@body is_a? ","valid_types map "]}," HTTP RequestStream initialize":{"type":"method","name":"initialize","children":[],"call":[" raise "," valid_body_type "]}," HTTP Request stream":{"type":"method","name":"stream","children":[],"call":["rs stream ","Http RequestStream  new "," body "," version "," uri path "," uri "," method to_s upcase "," method to_s "," method ","HTTP RequestStream  new ","path empty? "," uri query ","Request Writer  new stream ","Request Writer  new "," request_header "," headers "," include_proxy_authorization_header "," using_authenticated_proxy? "," headline ","@uri https? ! ","@uri https? "," include_proxy_headers "," using_proxy? ","Http RequestStream  new  stream ","HTTP RequestStream  new  stream "," veHttp RequestStream  new ion "," veHTTP RequestStream  new ion "," uri  uri path  "," uri path  empty? "," headeHttp RequestStream  new  "," headeHTTP RequestStream  new  "," include_proxy_headeHttp RequestStream  new  "," include_proxy_headeHTTP RequestStream  new  "]}," HTTP Request []":{"type":"method","name":"[]","children":[],"call":["@headers [] ","Http  canonicalize_header "," canonicalize_header "]}," HTTP Request initialize":{"type":"method","name":"initialize","children":[],"call":["@headers []= ","Http  canonicalize_header ","name [] ","name to_s ","headers each "," URI ","uri to_s ","uri is_a? "," raise ","METHODS  include? ","method to_s downcase to_sym ","method to_s downcase ","method to_s ","@uri host ","@headers [] "," canonicalize_header ","HTTP Headers  coerce "," fail "," scheme ","SCHEMES  include? ","@uri scheme to_s downcase to_sym ","@uri scheme to_s downcase ","@uri scheme to_s ","@uri scheme ","verb to_s downcase to_sym ","verb to_s downcase ","verb to_s "," default_host "," default_host_header_value ","HTTP URI  parse ","HTTP URI  parse normalize "," normalize_uri ","opts [] "," verb ","opts fetch ","opts fetch to_s downcase to_sym ","opts fetch to_s downcase ","opts fetch to_s "," request_body ","Request Body  new ","(lvasgn :body\n  (send\n    (lvar :opts) :[]\n    (sym :body))) is_a? "," prepare_body "," prepare_headers ","@uri_normalizer call ","HTTP Headers  coerce  []= "," prepare_headers  []= ","name to_s  [] ","name to_s  to_s "," URI  host ","HTTP URI  parse  host ","HTTP URI  parse normalize  host "," normalize_uri  host ","@uri_normalizer call  host ","HTTP Headers  coerce  [] "," prepare_headers  [] "," URI  scheme to_s downcase to_sym ","HTTP URI  parse  scheme to_s downcase to_sym ","HTTP URI  parse normalize  scheme to_s downcase to_sym "," normalize_uri  scheme to_s downcase to_sym ","@uri_normalizer call  scheme to_s downcase to_sym "," URI  scheme to_s downcase ","HTTP URI  parse  scheme to_s downcase ","HTTP URI  parse normalize  scheme to_s downcase "," normalize_uri  scheme to_s downcase ","@uri_normalizer call  scheme to_s downcase "," URI  scheme to_s ","HTTP URI  parse  scheme to_s ","HTTP URI  parse normalize  scheme to_s "," normalize_uri  scheme to_s ","@uri_normalizer call  scheme to_s "," URI  scheme ","HTTP URI  parse  scheme ","HTTP URI  parse normalize  scheme "," normalize_uri  scheme ","@uri_normalizer call  scheme "," request_opts []  ","(lvasgn :opts [] \n  (send\n    (lvar :opts) :[]\n    (sym :opts [] ))) is_a? "," prepare_opts []  "," URI _normalizer call ","HTTP URI  parse _normalizer call ","HTTP URI  parse normalize _normalizer call "," normalize_uri _normalizer call ","@uri_normalizer call _normalizer call "]}," HTTP Options argument_error!":{"type":"method","name":"argument_error!","children":[],"call":[" raise "," caller [] "," caller "," fail "]}," HTTP Options dup":{"type":"method","name":"dup","children":[],"call":[" block_given? "]}," HTTP Options to_hash":{"type":"method","name":"to_hash","children":[],"call":[" follow "," callbacks "," body "," form "," proxy "," headers "," response "," ssl_context "," ssl_socket_class "," socket_class "," params "," json "," headers to_h ","Hash  [] "," [] "," class defined_options flat_map "," class defined_options "," class "," send "]}," HTTP Options merge":{"type":"method","name":"merge","children":[],"call":["Options  new ","(send\n  (lvar :l) :+\n  (lvar :r)) uniq ","l + ","v1 merge ","h1 merge ","other to_hash "," to_hash "," class new "," class "," to_hash  merge "]}," HTTP Options []":{"type":"method","name":"[]","children":[],"call":[" send "," warn "]}," HTTP Options with_callback":{"type":"method","name":"with_callback","children":[],"call":["opts callbacks []= "," callbacks [] dup << "," callbacks [] dup "," callbacks [] "," callbacks ","opts callbacks ","opts callbacks= "," callbacks dup "," dup "," argument_error! ","(sym :request) include? ","callback arity == ","callback arity ","callback respond_to? "]}," HTTP Options with_follow":{"type":"method","name":"with_follow","children":[],"call":["opts follow= "," dup "]}," HTTP Options with_body":{"type":"method","name":"with_body","children":[],"call":["opts body= "," dup "]}," HTTP Options with_form":{"type":"method","name":"with_form","children":[],"call":["opts form= "," dup "]}," HTTP Options with_proxy":{"type":"method","name":"with_proxy","children":[],"call":["opts proxy= "," dup "]}," HTTP Options with_headers":{"type":"method","name":"with_headers","children":[],"call":["opts headers= "," headers merge ","headers to_hash "," headers "," dup "," argument_error! ","headers respond_to? "]}," HTTP Options with_response":{"type":"method","name":"with_response","children":[],"call":["opts response= "," dup "," argument_error! ","(sym :auto) include? "]}," HTTP Options initialize":{"type":"method","name":"initialize","children":[],"call":["@headers [] ","options [] "," class default_ssl_socket_class "," class "," class default_socket_class ","HTTP Headers  coerce "," []= ","opts_w_defaults each ","opts_w_defaults []= ","opts_w_defaults [] ","defaults merge "," class default_cache "," class default_timeout_class ","HTTP Headers  coerce  [] ","defaults merge  each ","defaults merge  []= ","defaults merge  [] "]}," HTTP Options new":{"type":"method","name":"new","children":[],"call":["options is_a? "]}," HTTP MimeType emit":{"type":"method","name":"emit","children":[],"call":["@emit_with [] "]}," HTTP MimeType parse":{"type":"method","name":"parse","children":[],"call":["@parse_with [] "]}," HTTP MimeType emit_with":{"type":"method","name":"emit_with","children":[],"call":[]}," HTTP MimeType parse_with":{"type":"method","name":"parse_with","children":[],"call":[]}," HTTP MimeType initialize":{"type":"method","name":"initialize","children":[],"call":[" class register "," class "]}," HTTP MimeType []":{"type":"method","name":"[]","children":[],"call":["@mime_types [] ","@shortcuts [] ","type is_a? "," fail "," adapters [] "," normalize "," adapters "," raise "]}," HTTP MimeType register":{"type":"method","name":"register","children":[],"call":["@shortcuts []= ","obj shortcut ","@mime_types []= ","obj type "]}," HTTP Client format_response":{"type":"method","name":"format_response","children":[],"call":[" raise ","response body ","response parse_body ","method == ","HTTP Response BodyDelegator  new ","Http Response BodyDelegator  new "]}," HTTP Client perform":{"type":"method","name":"perform","children":[],"call":[" Integer ","response [] ","@body_remaining < ","chunk length ","parser chunk ","parser << ","socket readpartial ","@body_remaining > ","Http Response  new ","parser headers ","parser http_version ","parser status_code "," raise ","$! message ","request stream ","socket connect ","options [] new ","options [] ","OpenSSL SSL SSLContext  new ","options [] == ","uri is_a? ","options [] open ","uri port ","uri host ","request proxy ","request uri ","Http Response Parser  new ","parser finished? ! ","parser finished? ","HTTP Response  new ","HTTP Response Parser  new "," finish_response ","head == ","req verb ","Response  new ","@parser headers ","@parser http_version ","@parser status_code ","Response Body  new "," read_more ","req stream "," start_tls ","req socket_port ","req socket_host ","req uri "," perform_without_following_redirects ","Redirector  new perform ","Redirector  new ","options follow "," read_headers! ","req using_proxy? ! ","req using_proxy? "," make_request ","options cache perform ","options cache "," close "," persistent? ","@connection finish_response ","req verb == ","@connection headers ","@connection http_version ","@connection status_code ","@connection read_headers! ","@connection send_request ","@connection failed_proxy_connect? ","HTTP Connection  new "," verify_connection! ","options encoding ","@connection proxy_response_headers ","options feature ","feature wrap_response ","options features inject ","options features "," build_response ","feature on_error ","options features each_value ","Response  new ponse [] "," perform_without_following_redirects ponse [] "," build_response ponse [] "," Integer  < ","@Response Body  new _remaining < ","parser chunk  length ","parser parser chunk  ","Http Response Parser  new  chunk ","HTTP Response Parser  new  chunk ","Http Response Parser  new  << ","HTTP Response Parser  new  << ","options [] new  readpartial ","options [] open  readpartial "," Integer  > ","@Response Body  new _remaining > ","Http Response Parser  new  headers ","HTTP Response Parser  new  headers ","Http Response Parser  new  http_version ","HTTP Response Parser  new  http_version ","Http Response Parser  new  status_code ","HTTP Response Parser  new  status_code ","options [] new  connect ","options [] open  connect ","request uri  is_a? ","req uri  is_a? ","request uri  port ","req uri  port ","request uri  host ","req uri  host ","request request uri  ","request req uri  ","Http Response Parser  new  finished? ! ","HTTP Response Parser  new  finished? ! ","Http Response Parser  new  finished? ","HTTP Response Parser  new  finished? "," finish_Response  new ponse "," finish_ perform_without_following_redirects ponse "," finish_ build_response ponse ","@Http Response Parser  new  headers ","@HTTP Response Parser  new  headers ","@Http Response Parser  new  http_version ","@HTTP Response Parser  new  http_version ","@Http Response Parser  new  status_code ","@HTTP Response Parser  new  status_code ","req options [] new _port ","req options [] open _port ","req options [] new _host ","req options [] open _host ","req request uri  ","req req uri  ","@connection finish_Response  new ponse ","@connection finish_ perform_without_following_redirects ponse ","@connection finish_ build_response ponse ","@connection proxy_Response  new ponse_headers ","@connection proxy_ perform_without_following_redirects ponse_headers ","@connection proxy_ build_response ponse_headers ","feature wrap_Response  new ponse ","feature wrap_ perform_without_following_redirects ponse ","feature wrap_ build_response ponse ","options featuResponse  new  inject ","options featu perform_without_following_redirects  inject ","options featu build_response  inject ","options featuResponse  new  ","options featu perform_without_following_redirects  ","options featu build_response  "," build_Response  new ponse "," build_ perform_without_following_redirects ponse "," build_ build_response ponse ","options featuResponse  new  each_value ","options featu perform_without_following_redirects  each_value ","options featu build_response  each_value "]}," HTTP Client request":{"type":"method","name":"request","children":[],"call":[" format_response ","opts response ","c call ","opts callbacks [] each ","opts callbacks [] ","opts callbacks "," perform ","response headers [] ","response headers ","response code ","Request  new "," body ","opts headers []= ","opts headers ","URI  parse host ","URI  parse ","uri match ! ","uri match ","code == ","opts follow ","opts proxy ","@default_options merge ","HTTP Request  new ","URI  encode_www_form ","opts params ","Redirector  new perform ","Redirector  new ","opts params empty? ! ","opts params empty? "," make_request_body "," make_request_uri "," normalize_get_params ","verb == ","headers []= "," default_options persistent? "," default_options "," make_request_headers ","opts headers merge ","opts cookies values ","opts cookies ","opts feature "," build_request "," wrap_request "," format_ perform  "," format_ perform ponse ","opts  perform  ","@default_options merge  response ","opts  perform ponse ","@default_options merge  callbacks [] each ","@default_options merge  callbacks [] ","@default_options merge  callbacks "," perform  headers [] ","response opts headers  [] ","response  make_request_headers  [] ","response opts headers merge  [] "," perform ponse headers [] "," perform  headers ","response opts headers  ","response  make_request_headers  ","response opts headers merge  "," perform ponse headers "," perform  code ","response response code  "," perform ponse code ","  make_request_body  ","opts opts headers  []= ","opts  make_request_headers  []= ","opts opts headers merge  []= ","@default_options merge  headers []= ","opts opts headers  ","opts  make_request_headers  ","opts opts headers merge  ","@default_options merge  headers ","URI  parse URI  parse host  ","response headers []  match ! "," make_request_uri  match ! ","response headers []  match "," make_request_uri  match ","response code  == ","@default_options merge  follow ","opts opts proxy  ","@default_options merge  proxy ","URI  enresponse code _www_form ","@default_options merge  params ","@default_options merge  params empty? ! ","@default_options merge  params empty? "," make_Request  new _body "," make_HTTP Request  new _body "," make_HTTP Request  new uest_body "," make_ build_request uest_body "," make_request_ make_request_body  "," make_ make_request_body  "," make_request_response headers []  "," make_request_ make_request_uri  "," make_Request  new _uri "," make_HTTP Request  new _uri "," make_HTTP Request  new uest_uri "," make_ build_request uest_uri ","opts headers  []= "," make_request_headers  []= ","opts headers merge  []= "," make_Request  new _headers "," make_HTTP Request  new _headers "," make_request_opts headers  "," make_request_ make_request_headers  "," make_request_opts headers merge  "," make_HTTP Request  new uest_headers "," make_ build_request uest_headers ","opts opts headers  merge ","opts  make_request_headers  merge ","opts opts headers merge  merge ","@default_options merge  headers merge ","@default_options merge  cookies values ","@default_options merge  cookies ","@default_options merge  feature "," build_Request  new  "," build_HTTP Request  new  "," build_HTTP Request  new uest "," build_ build_request uest "," wrap_Request  new  "," wrap_HTTP Request  new  "," wrap_HTTP Request  new uest "," wrap_ build_request uest "]}," HTTP Client body":{"type":"method","name":"body","children":[],"call":["URI  encode_www_form ","opts form ","headers [] ","opts body ","opts URI  encode_www_form  ","opts opts body  "]}," HTTP Client initialize":{"type":"method","name":"initialize","children":[],"call":["Options  new ","HTTP Options  new ","HTTP Response Parser  new "]}," HTTP Chainable branch":{"type":"method","name":"branch","children":[],"call":["Client  new ","HTTP Client  new "]}," HTTP Chainable default_callbacks=":{"type":"method","name":"default_callbacks=","children":[],"call":["opts callbacks= "," default_options dup "," default_options "]}," HTTP Chainable default_callbacks":{"type":"method","name":"default_callbacks","children":[],"call":[" default_options callbacks "," default_options "]}," HTTP Chainable default_headers=":{"type":"method","name":"default_headers=","children":[],"call":["opts headers= "," default_options dup "," default_options "]}," HTTP Chainable default_headers":{"type":"method","name":"default_headers","children":[],"call":[" default_options headers "," default_options "]}," HTTP Chainable default_options=":{"type":"method","name":"default_options=","children":[],"call":["Options  new ","HTTP Options  new "]}," HTTP Chainable default_options":{"type":"method","name":"default_options","children":[],"call":["Options  new ","HTTP Options  new "]}," HTTP Chainable accept":{"type":"method","name":"accept","children":[],"call":[" with ","mime_type type "," raise ","Http MimeType  [] ","type is_a? ","HTTP MimeType  [] ","MimeType  normalize "," headers ","Http MimeType  []  type ","HTTP MimeType  []  type "]}," HTTP Chainable with_headers":{"type":"method","name":"with_headers","children":[],"call":[" branch "," default_options with_headers "," default_options "]}," HTTP Chainable with_follow":{"type":"method","name":"with_follow","children":[],"call":[" branch "," default_options with_follow "," default_options "]}," HTTP Chainable with_response":{"type":"method","name":"with_response","children":[],"call":[" branch "," default_options with_response "," default_options "]}," HTTP Chainable via":{"type":"method","name":"via","children":[],"call":[" raise "," branch "," default_options with_proxy "," default_options ","proxy_hash keys size >= ","proxy_hash keys size ","proxy_hash keys ","proxy_hash []= ","proxy [] ","proxy [] is_a? "," fail ","(int 2) include? ","(irange\n  (int 2)\n  (int 5)) cover? "]}," HTTP Chainable on":{"type":"method","name":"on","children":[],"call":[" branch "," default_options with_callback "," default_options "]}," HTTP Chainable request":{"type":"method","name":"request","children":[],"call":[" branch request "," branch "," default_options "]}," HTTP Chainable patch":{"type":"method","name":"patch","children":[],"call":[" request "]}," HTTP Chainable connect":{"type":"method","name":"connect","children":[],"call":[" request "]}," HTTP Chainable options":{"type":"method","name":"options","children":[],"call":[" request "]}," HTTP Chainable trace":{"type":"method","name":"trace","children":[],"call":[" request "]}," HTTP Chainable delete":{"type":"method","name":"delete","children":[],"call":[" request "]}," HTTP Chainable put":{"type":"method","name":"put","children":[],"call":[" request "]}," HTTP Chainable post":{"type":"method","name":"post","children":[],"call":[" request "]}," HTTP Chainable get":{"type":"method","name":"get","children":[],"call":[" request "]}," HTTP Chainable head":{"type":"method","name":"head","children":[],"call":[" request "]}," HTTP Response Parser finished?":{"type":"method","name":"finished?","children":[],"call":["@finished [] "]}," HTTP Response BodyDelegator __setobj__":{"type":"method","name":"__setobj__","children":[],"call":[]}," HTTP Response BodyDelegator __getobj__":{"type":"method","name":"__getobj__","children":[],"call":[]}," HTTP Response BodyDelegator initialize":{"type":"method","name":"initialize","children":[],"call":[]}," HTTP Response inspect":{"type":"method","name":"inspect","children":[],"call":["@headers inspect "," reason "," status "," class "," headers inspect "," headers "," code "," headers to_h inspect "," headers to_h "]}," HTTP Response reason":{"type":"method","name":"reason","children":[],"call":["STATUS_CODES  [] "]}," HTTP Options with_params":{"type":"method","name":"with_params","children":[],"call":["opts params= "," dup "]}," HTTP Header canonicalize_header":{"type":"method","name":"canonicalize_header","children":[],"call":["header to_s split map join ","header to_s split map ","header to_s split ","header to_s "]}," HTTP Chainable stream":{"type":"method","name":"stream","children":[],"call":[" with_response "]}," HTTP Request redirect":{"type":"method","name":"redirect","children":[],"call":["req headers merge! ","req uri host ","req uri ","req headers "," class new "," version "," body "," proxy "," headers "," method "," class ","@uri merge ","uri to_s ","req []= ","@uri join ","headers delete "," headers dup "," body source "," uri_normalizer ","verb == "," class new  headers merge! ","req  headers dup  merge! "," class new  uri host ","req @uri merge  host "," class new  uri ","req @uri merge  "," class new  headers ","req  headers dup  ","  headers dup  ","@@uri merge  merge ","@uri merge  to_s "," class new  []= ","@@uri merge  join "," headers dup  delete ","  headers dup  dup "," @uri merge _normalizer "]}," HTTP Redirector endless_loop?":{"type":"method","name":"endless_loop?","children":[],"call":["2 < ","@visited count ","@visited last ","2 <= "]}," HTTP Redirector too_many_hops?":{"type":"method","name":"too_many_hops?","children":[],"call":["@max_redirects to_i < ","@visited count ","@max_redirects to_i ","@max_redirects is_a? ","@max_hops < ","1 <= "]}," HTTP Redirector follow":{"type":"method","name":"follow","children":[],"call":["@request redirect "," fail ","@response headers [] ","@response headers "," endless_loop? "," too_many_hops? ","@visited << ","@request uri to_s ","@request uri ","REDIRECT_CODES  include? ","@response code ","303 == ","@request redirect  redirect ","@request redirect  uri to_s ","@request @response headers []  to_s ","@request redirect  uri ","@request @response headers []  "]}," HTTP Redirector reset":{"type":"method","name":"reset","children":[],"call":[]}," HTTP Redirector perform":{"type":"method","name":"perform","children":[],"call":[" follow "," reset "," redirect_to ","@response headers [] ","@response headers "," fail "," endless_loop? "," too_many_hops? ","@visited << ","@request uri ","@request verb ","REDIRECT_CODES  include? ","@response status code ","@response status ","@response flush "," raise ","@response headers get inject ","@response headers get "," collect_cookies_from_response ","@request headers set ","(send\n  (send\n    (send nil :cookie_jar) :cookies) :map) join ","c value ","c name "," cookie_jar cookies map "," cookie_jar cookies "," cookie_jar ","@request headers "," cookie_jar empty? "," collect_cookies_from_request ","@on_redirect call ","@on_redirect respond_to? "," redirect_to  uri "," redirect_to  verb "," redirect_to  headers set "," redirect_to  headers "]}," HTTP Redirector initialize":{"type":"method","name":"initialize","children":[],"call":["1 > ","@max_hops to_i ","options fetch ","options respond_to? ","options fetch to_i ","opts fetch to_i ","opts fetch ","options fetch  to_i ","options fetch to_i  to_i ","opts fetch to_i  to_i "]}," HTTP Response parse":{"type":"method","name":"parse","children":[],"call":["MimeType  [] decode "," to_s ","MimeType  [] "," mime_type "]}," HTTP Response charset":{"type":"method","name":"charset","children":[],"call":[" content_type charset "," content_type "]}," HTTP Response mime_type":{"type":"method","name":"mime_type","children":[],"call":[" content_type mime_type "," content_type "]}," HTTP Response content_type":{"type":"method","name":"content_type","children":[],"call":["ContentType  parse "," headers [] "," headers "]}," HTTP Response to_s":{"type":"method","name":"to_s","children":[],"call":[" body to_s "," body "]}," HTTP Response Body inspect":{"type":"method","name":"inspect","children":[],"call":["@streaming ! ! ","@streaming ! "," object_id to_s "," object_id "," class "]}," HTTP Response Body stream!":{"type":"method","name":"stream!","children":[],"call":[" fail ","@streaming == "," raise "]}," HTTP Response Body to_s":{"type":"method","name":"to_s","children":[],"call":[" raise ","@contents << ","@client readpartial "," fail ","@streaming nil? "," check_sequence! ","chunk force_encoding "," force_encoding ","Encoding  find ","String  new force_encoding ","String  new ","@connection readpartial ","@stream readpartial ","chunk clear "," force_encoding  << ","String  new force_encoding  << ","String  new  << ","@client readpartial  force_encoding ","@connection readpartial  force_encoding ","@stream readpartial  force_encoding ","chunk force_Encoding  find  "," force_Encoding  find  ","String  new force_Encoding  find  ","@client readpartial  clear ","@connection readpartial  clear ","@stream readpartial  clear "]}," HTTP Response Body each":{"type":"method","name":"each","children":[],"call":[" readpartial "]}," HTTP Response Body readpartial":{"type":"method","name":"readpartial","children":[],"call":["@client readpartial "," stream! "," check_sequence! ","@connection readpartial ","@stream readpartial ","chunk force_encoding ","String  new ","@stream readpartial  force_encoding "]}," HTTP Response Body initialize":{"type":"method","name":"initialize","children":[],"call":["client sequence_id ","stream connection ","stream is_a? "," find_encoding "]}," HTTP Request socket_port":{"type":"method","name":"socket_port","children":[],"call":[" uri port "," uri "," proxy [] "," proxy "," using_proxy? "," port "]}," HTTP Request socket_host":{"type":"method","name":"socket_host","children":[],"call":[" uri host "," uri "," proxy [] "," proxy "," using_proxy? "," host "]}," HTTP Request request_header":{"type":"method","name":"request_header","children":[],"call":[" version "," verb to_s upcase "," verb to_s "," verb ","path empty? "," uri path "," uri "," uri query "," uri query empty? ! "," uri query empty? "," using_proxy? "," path_for_request_header "," uri normalize "," uri omit "," uri path  empty? "," uri  uri path  ","  uri path _for_request_header "]}," HTTP Request include_proxy_authorization_header":{"type":"method","name":"include_proxy_authorization_header","children":[],"call":[" headers []= "," headers ","Base64  encode64 chomp ","Base64  encode64 "," proxy [] "," proxy "," proxy_authorization_header "]}," HTTP Request using_authenticated_proxy?":{"type":"method","name":"using_authenticated_proxy?","children":[],"call":[" proxy keys size == "," proxy keys size "," proxy keys "," proxy "," proxy keys size >= "]}," HTTP Request using_proxy?":{"type":"method","name":"using_proxy?","children":[],"call":[" proxy keys size >= "," proxy keys size "," proxy keys "," proxy "]}," HTTP Request method":{"type":"method","name":"method","children":[],"call":[" warn ","Kernel  caller first ","Kernel  caller "]}," HTTP Request Writer send_request_body":{"type":"method","name":"send_request_body","children":[],"call":["@socket << << ","CRLF  * ","@socket << ","chunk bytesize to_s ","chunk bytesize ","@body each ","@body is_a? ","@socket << << << "," write ","chunk << ","chunk bytesize to_s << "]}," HTTP Request Writer send_request_header":{"type":"method","name":"send_request_header","children":[],"call":["@socket << "," join_headers "," add_body_type_headers "," add_headers "," write "," join_ join_headers s "," add_body_type_ join_headers s "," add_ join_headers s "]}," HTTP Request Writer join_headers":{"type":"method","name":"join_headers","children":[],"call":["@request_header join + ","(const nil :CRLF) * ","@request_header join ","CRLF  * "]}," HTTP Request Writer add_body_type_headers":{"type":"method","name":"add_body_type_headers","children":[],"call":[" fail ","@request_header << ","encoding == ","@headers [] ","@body is_a? ","@body length ","@headers [] ! ","@body bytesize ","chunked != ","CHUNKED  != "," raise ","@body nil? ","@body size "," chunked? ","@request_header [] start_with? ","@request_header [] ","(str \"GET\") any? ","@body source nil? ","@body source ","@headers []  == "]}," HTTP Request Writer stream":{"type":"method","name":"stream","children":[],"call":[" send_request_body "," send_request_header "," send_request "," add_body_type_headers "," add_headers "]}," HTTP Request Writer add_headers":{"type":"method","name":"add_headers","children":[],"call":["@request_header << ","@headers each "]}," HTTP Request Writer valid_body_type":{"type":"method","name":"valid_body_type","children":[],"call":["checks any? ","@body is_a? ","valid_types map "]}," HTTP Request Writer initialize":{"type":"method","name":"initialize","children":[],"call":[" fail "," valid_body_type "," validate_body_type! "]}," HTTP Options with_json":{"type":"method","name":"with_json","children":[],"call":["opts json= "," dup "]}," HTTP MimeType aliases":{"type":"method","name":"aliases","children":[],"call":[]}," HTTP MimeType adapters":{"type":"method","name":"adapters","children":[],"call":[]}," HTTP MimeType normalize":{"type":"method","name":"normalize","children":[],"call":[" aliases fetch ","type to_s "," aliases "]}," HTTP MimeType register_alias":{"type":"method","name":"register_alias","children":[],"call":[" aliases []= ","type to_s ","shortcut to_sym "," aliases "]}," HTTP MimeType register_adapter":{"type":"method","name":"register_adapter","children":[],"call":[" adapters []= ","type to_s "," adapters "]}," HTTP MimeType JSON decode":{"type":"method","name":"decode","children":[],"call":[" JSON  load "," JSON  parse "]}," HTTP MimeType JSON encode":{"type":"method","name":"encode","children":[],"call":[" JSON  dump ","obj to_json ","obj respond_to? "]}," HTTP Headers canonicalize_header":{"type":"method","name":"canonicalize_header","children":[],"call":["name split map join ","name split map ","name split ","name [] "]}," HTTP Headers coerce":{"type":"method","name":"coerce","children":[],"call":["headers add ","object each "," new "," fail ","object inspect ","object to_a ","object respond_to? ","object to_h ","object to_hash ","object is_a? "," raise "," new  add "]}," HTTP Headers merge":{"type":"method","name":"merge","children":[],"call":["dupped merge! "," dup tap "," dup "]}," HTTP Headers merge!":{"type":"method","name":"merge!","children":[],"call":[" set "," class coerce to_h each "," class coerce to_h "," class coerce "," class "]}," HTTP Headers initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":[" to_a ","@pile map "," to_a  map ","@pile map  map "]}," HTTP Headers ==":{"type":"method","name":"==","children":[],"call":["@pile == ","other to_a ","other respond_to? "," to_a == "," to_a "]}," HTTP Headers keys":{"type":"method","name":"keys","children":[],"call":["(send\n  (ivar :@pile) :map) uniq ","@pile map "]}," HTTP Headers inspect":{"type":"method","name":"inspect","children":[],"call":[" to_h inspect "," to_h "," class "]}," HTTP Headers to_a":{"type":"method","name":"to_a","children":[],"call":["pair map ","@pile map ","item [] "]}," HTTP Headers to_h":{"type":"method","name":"to_h","children":[],"call":["Hash  [] "," [] "," keys map "," keys ","(send\n  (send nil :keys) :map) to_h "," keys to_h "]}," HTTP Headers []":{"type":"method","name":"[]","children":[],"call":["values first ","values count "," get "," get  first "," get  count "]}," HTTP Headers get":{"type":"method","name":"get","children":[],"call":["(send\n  (ivar :@pile) :select) map ","k == ","@pile select "," canonicalize_header ","name to_s "," normalize_header "," canonicalize_header  to_s "," normalize_header  to_s "]}," HTTP Headers add":{"type":"method","name":"add","children":[],"call":["@pile << "," Array each "," Array "," canonicalize_header ","name to_s ","v to_s "," normalize_header "," validate_value "," raise ","name inspect "," canonicalize_header  to_s "," normalize_header  to_s "," canonicalize_header  inspect "," normalize_header  inspect "]}," HTTP Headers delete":{"type":"method","name":"delete","children":[],"call":["k == ","@pile delete_if "," canonicalize_header ","name to_s "," normalize_header "," canonicalize_header  to_s "," normalize_header  to_s "]}," HTTP Headers set":{"type":"method","name":"set","children":[],"call":[" add "," delete "]}," HTTP Headers initialize":{"type":"method","name":"initialize","children":[],"call":[]}," HTTP charset":{"type":"method","name":"charset","children":[],"call":["md [] to_s strip gsub ","md [] to_s strip ","md [] to_s ","md [] ","str to_s match ","str to_s ","m strip delete ","m strip ","str to_s [] ","str to_s match  [] to_s strip gsub ","str to_s [] d [] to_s strip gsub ","str to_s match  [] to_s strip ","str to_s [] d [] to_s strip ","str to_s match  [] to_s ","str to_s [] d [] to_s ","str to_s match  [] ","str to_s [] d [] ","str to_s str to_s [] atch ","str to_s []  strip delete ","str to_s []  strip "]}," HTTP mime_type":{"type":"method","name":"mime_type","children":[],"call":["md [] to_s strip downcase ","md [] to_s strip ","md [] to_s ","md [] ","str to_s match ","str to_s ","m strip downcase ","m strip ","str to_s [] ","str to_s match  [] to_s strip downcase ","str to_s [] d [] to_s strip downcase ","str to_s match  [] to_s strip ","str to_s [] d [] to_s strip ","str to_s match  [] to_s ","str to_s [] d [] to_s ","str to_s match  [] ","str to_s [] d [] ","str to_s str to_s [] atch ","str to_s []  strip downcase ","str to_s []  strip "]}," HTTP parse":{"type":"method","name":"parse","children":[],"call":[" new "," charset "," mime_type "]}," HTTP Client read_more":{"type":"method","name":"read_more","children":[],"call":["@parser << ","@socket readpartial ","@parser finished? "]}," HTTP Client finish_response":{"type":"method","name":"finish_response","children":[],"call":["@parser reset ","@socket close ","@socket closed? ! ","@socket closed? "]}," HTTP Client make_request_body":{"type":"method","name":"make_request_body","children":[],"call":["MimeType  [] encode ","opts json ","MimeType  [] ","headers [] ","URI  encode_www_form ","opts form ","opts body ","form to_s ","form content_length ","form content_type ","FormData  create ","HTTP FormData  create ","body encoding name ","body encoding ","auto_deflate deflate ","opts feature "," make_form_data ","URI  encode_www_FormData  create  ","URI  encode_www_HTTP FormData  create  ","URI  encode_www_ make_form_data  ","opts FormData  create  ","opts HTTP FormData  create  ","opts  make_form_data  ","opts MimeType  [] encode  ","FormData  create  to_s ","HTTP FormData  create  to_s "," make_form_data  to_s ","FormData  create  content_length ","HTTP FormData  create  content_length "," make_form_data  content_length ","FormData  create  content_type ","HTTP FormData  create  content_type "," make_form_data  content_type ","MimeType  [] encode  encoding name ","MimeType  [] encode  encoding ","opts feature  deflate "," make_FormData  create _data "," make_HTTP FormData  create _data "," make_ make_form_data _data "]}," HTTP Client make_request_uri":{"type":"method","name":"make_request_uri","children":[],"call":["uri query= ","URI  encode_www_form ","CGI  parse merge ","options params ","CGI  parse ","uri query to_s ","uri query ","options params empty? ! ","options params empty? "," URI ","uri to_s ","uri is_a? "," normalize_uri ","uri path= ","uri path empty? ","uri path "," URI  encode_www_form ","HTTP URI  parse "," default_options persistent "," default_options ","uri !~ "," default_options persistent? ","(send\n  (lvar :uri) :query) compact join ","(send\n  (lvar :uri) :query) compact ","HTTP URI  form_encode ","opts params ","opts params empty? ! ","opts params empty? ","uri query_values= ","uri query_values to_a concat ","opts params to_a ","uri query_values to_a ","uri query_values "," URI  query= "," normalize_uri  query= ","HTTP URI  parse  query= ","uri to_s  query= ","options CGI  parse merge  "," URI  query to_s "," normalize_uri  query to_s ","HTTP URI  parse  query to_s ","uri to_s  query to_s "," URI  query "," normalize_uri  query ","HTTP URI  parse  query ","uri to_s  query ","options CGI  parse merge  empty? ! ","options CGI  parse merge  empty? "," URI  to_s "," normalize_uri  to_s ","HTTP URI  parse  to_s ","uri to_s  to_s "," URI  is_a? "," normalize_uri  is_a? ","HTTP URI  parse  is_a? ","uri to_s  is_a? "," normalize_ URI  "," normalize_ normalize_uri  "," normalize_HTTP URI  parse  "," normalize_uri to_s  "," URI  path= "," normalize_uri  path= ","HTTP URI  parse  path= ","uri to_s  path= "," URI  path empty? "," normalize_uri  path empty? ","HTTP URI  parse  path empty? ","uri to_s  path empty? "," URI  path "," normalize_uri  path ","HTTP URI  parse  path ","uri to_s  path "," URI  !~ "," normalize_uri  !~ ","HTTP URI  parse  !~ ","uri to_s  !~ ","(send\n  (lvar : URI ) :query) compact join ","(send\n  (lvar : normalize_uri ) :query) compact join ","(send\n  (lvar :HTTP URI  parse ) :query) compact join ","(send\n  (lvar :uri to_s ) :query) compact join ","(send\n  (lvar : URI ) :query) compact ","(send\n  (lvar : normalize_uri ) :query) compact ","(send\n  (lvar :HTTP URI  parse ) :query) compact ","(send\n  (lvar :uri to_s ) :query) compact ","opts CGI  parse merge  ","opts CGI  parse merge  empty? ! ","opts CGI  parse merge  empty? "," URI  query_values= "," normalize_uri  query_values= ","HTTP URI  parse  query_values= ","uri to_s  query_values= "," URI  query_values to_a concat "," normalize_uri  query_values to_a concat ","HTTP URI  parse  query_values to_a concat ","uri to_s  query_values to_a concat ","opts CGI  parse merge  to_a "," URI  query_values to_a "," normalize_uri  query_values to_a ","HTTP URI  parse  query_values to_a ","uri to_s  query_values to_a "," URI  query_values "," normalize_uri  query_values ","HTTP URI  parse  query_values ","uri to_s  query_values "]}," HTTP Client start_tls":{"type":"method","name":"start_tls","children":[],"call":["socket connect ","options [] new ","options [] ","OpenSSL SSL SSLContext  new ","socket post_connection_check ","context verify_mode == ","context verify_mode ","options [] new  connect ","options [] new  post_connection_check "]}," HTTP Client readpartial":{"type":"method","name":"readpartial","children":[],"call":[" finish_response ","@parser finished? ","@parser chunk "," read_more ","chunk to_s ","@parser @parser finished? ? ","@parser @parser chunk  ","@parser chunk  to_s "]}," HTTP Chainable auth":{"type":"method","name":"auth","children":[],"call":[" with ","value to_s "," fail ","args count ","AuthorizationHeader  build ","args first "," basic_auth ","basic == "," headers "]}," Base64 strict_encode64":{"type":"method","name":"strict_encode64","children":[],"call":[]}," HTTP AuthorizationHeader builders":{"type":"method","name":"builders","children":[],"call":[]}," HTTP AuthorizationHeader build":{"type":"method","name":"build","children":[],"call":["klass new "," fail "," builders [] ","type to_sym "," builders "," builders []  new "]}," HTTP AuthorizationHeader register":{"type":"method","name":"register","children":[],"call":[" builders []= ","type to_sym "," builders "]}," HTTP AuthorizationHeader BearerToken to_s":{"type":"method","name":"to_s","children":[],"call":[" token "]}," HTTP AuthorizationHeader BearerToken token":{"type":"method","name":"token","children":[],"call":["Base64  strict_encode64 "]}," HTTP AuthorizationHeader BearerToken initialize":{"type":"method","name":"initialize","children":[],"call":["opts fetch ","Base64  strict_encode64 "," warn ","Kernel  caller first ","Kernel  caller "]}," HTTP AuthorizationHeader BasicAuth to_s":{"type":"method","name":"to_s","children":[],"call":["Basic  << ","Base64  strict_encode64 "]}," HTTP AuthorizationHeader BasicAuth initialize":{"type":"method","name":"initialize","children":[],"call":["opts fetch "]}," HTTP Client normalize_get_params":{"type":"method","name":"normalize_get_params","children":[],"call":["uri query= ","opts with_params ","extracted_params_from_uri merge ","opts params ","Hash  [] ","URI  decode_www_form ","uri query "," URI ","uri is_a? "," URI  query= ","opts with_params  with_params ","Hash  []  merge ","extracted_params_from_ URI  merge ","opts with_params  params "," URI  query "," URI  is_a? "]}," HTTP Client perform_without_following_redirects":{"type":"method","name":"perform_without_following_redirects","children":[],"call":[" finish_response ","head == ","req verb ","Response  new ","@parser headers ","@parser http_version ","@parser status_code ","Response Body  new "," raise "," read_more ","req stream "," start_tls ","uri is_a? ","options [] open ","req socket_port ","req socket_host ","options [] ","req uri "," finish_Response  new ponse ","req uri  is_a? ","req req uri  "]}," HTTP Response flush":{"type":"method","name":"flush","children":[],"call":[" body to_s "," body "]}," HTTP Request default_host":{"type":"method","name":"default_host","children":[],"call":["@uri port ","@uri host ","PORTS  [] == ","PORTS  [] "]}," HTTP Request Writer validate_body_type!":{"type":"method","name":"validate_body_type!","children":[],"call":[" fail ","@body class ","@body is_a? ","VALID_BODY_TYPES  any? "," raise "]}," HTTP Chainable follow":{"type":"method","name":"follow","children":[],"call":[" branch "," default_options with_follow "," default_options "]}," HTTP Client read_headers!":{"type":"method","name":"read_headers!","children":[],"call":[" raise ","@parser headers ","ex is_a? "," read_more "]}," HTTP Client normalize_uri":{"type":"method","name":"normalize_uri","children":[],"call":["uri path= ","uri path empty? ","uri path "," URI ","uri to_s "," default_options persistent "," default_options ","uri !~ "," default_options persistent? "," URI  path= "," URI  path empty? "," URI  path "," URI  to_s "," URI  !~ "]}," HTTP Response Status __getobj__":{"type":"method","name":"__getobj__","children":[],"call":[]}," HTTP Response Status __setobj__":{"type":"method","name":"__setobj__","children":[],"call":["obj to_i "," fail ","obj inspect ","obj respond_to? "," raise "]}," HTTP Response Status inspect":{"type":"method","name":"inspect","children":[],"call":["(begin\n  (send nil :code)) inspect "," reason "," code "," class "]}," HTTP Response Status symbolize":{"type":"method","name":"symbolize","children":[],"call":["SYMBOLS  [] "," code ","str to_s downcase gsub gsub gsub to_sym ","str to_s downcase gsub gsub gsub ","str to_s downcase gsub gsub ","str to_s downcase gsub ","str to_s downcase ","str to_s ","str to_s downcase tr gsub gsub to_sym ","str to_s downcase tr gsub gsub ","str to_s downcase tr gsub ","str to_s downcase tr "]}," HTTP Response Status reason":{"type":"method","name":"reason","children":[],"call":["REASONS  [] "," code "]}," HTTP Response Status initialize":{"type":"method","name":"initialize","children":[],"call":[" __setobj__ "]}," HTTP Response Status coerce":{"type":"method","name":"coerce","children":[],"call":[" fail ","object class "," new ","object to_i ","object is_a? ","SYMBOL_CODES  [] "," symbolize "," raise "]}," HTTP Request uri_has_query?":{"type":"method","name":"uri_has_query?","children":[],"call":[" uri query empty? ! "," uri query empty? "," uri query "," uri "]}," HTTP Request uri_path_with_query":{"type":"method","name":"uri_path_with_query","children":[],"call":["path empty? "," uri path "," uri "," uri query "," uri_has_query? "," uri path  empty? "," uri  uri path  "]}," HTTP Request path_for_request_header":{"type":"method","name":"path_for_request_header","children":[],"call":[" uri_path_with_query "," uri "," using_proxy? "]}," HTTP Request __method__":{"type":"method","name":"__method__","children":[],"call":[" method "," warn ","Kernel  caller first ","Kernel  caller "]}," HTTP Chainable basic_auth":{"type":"method","name":"basic_auth","children":[],"call":[" auth ","Basic  << ","Base64  strict_encode64 ","opts fetch ","Basic  + "]}," HTTP Headers each":{"type":"method","name":"each","children":[],"call":["@pile each "," to_enum "," __method__ "," block_given? ","item [] "]}," HTTP URI https?":{"type":"method","name":"https?","children":[],"call":["HTTPS_SCHEME  == "," scheme "]}," HTTP URI http?":{"type":"method","name":"http?","children":[],"call":["HTTP_SCHEME  == "," scheme "]}," HTTP Timeout PerOperation write":{"type":"method","name":"write","children":[],"call":[" raise "," write_timeout ","IO  select "," socket "," socket write_nonblock "," rescue_writable "," fail ","result == "," loop "," socket to_io wait_writable "," socket to_io ","@socket to_io wait_writable ","@socket to_io ","@socket write_nonblock "," socket write_nonblock  == ","@socket write_nonblock  == "]}," HTTP Timeout PerOperation readpartial":{"type":"method","name":"readpartial","children":[],"call":[" raise "," read_timeout ","IO  select "," socket "," socket read_nonblock "," rescue_readable "," fail ","result == "," loop ","result != ","result nil? "," socket to_io wait_readable "," socket to_io ","@socket to_io wait_readable ","@socket to_io ","@socket read_nonblock "," socket read_nonblock  == ","@socket read_nonblock  == "," socket read_nonblock  != ","@socket read_nonblock  != "," socket read_nonblock  nil? ","@socket read_nonblock  nil? "]}," HTTP Timeout PerOperation connect_ssl":{"type":"method","name":"connect_ssl","children":[],"call":[" raise "," connect_timeout ","IO  select "," socket "," socket connect_nonblock "," rescue_writable "," rescue_readable ","@socket connect_nonblock "]}," HTTP Timeout PerOperation connect":{"type":"method","name":"connect","children":[],"call":["socket_class open "," Timeout  timeout "," connect_timeout "," connect_with_timeout ","Socket  sockaddr_in ","addr to_s ","Socket  new "," fail ","addr class "," resolve_address ","Resolv IPv6  create ","Resolv IPv4  create ","@socket setsockopt "," raise ","connect_operation call ","trying_iterator next ","trying_targets lazy ","host_addresses empty? ","@dns_resolver call "," lambda ","Socket  sock resolve_address _in ","Socket  sockResolv IPv4  create _in "," resolve_address  to_s ","Resolv IPv4  create  to_s "," resolve_address  class ","Resolv IPv4  create  class "," resolve_ resolve_address ess "," resolve_Resolv IPv4  create ess ","socket_class open  setsockopt ","Socket  new  setsockopt ","trying_targets lazy  next ","host_ resolve_address esses empty? ","host_Resolv IPv4  create esses empty? ","@dns_resolver call  empty? "]}," HTTP Timeout PerOperation initialize":{"type":"method","name":"initialize","children":[],"call":[" options fetch "," options "," Resolv  method "]}," HTTP Timeout Null write":{"type":"method","name":"write","children":[],"call":[" socket << "," socket ","@socket << ","@socket write "]}," HTTP Timeout Null readpartial":{"type":"method","name":"readpartial","children":[],"call":[" socket readpartial "," socket ","@socket readpartial "]}," HTTP Timeout Null start_tls":{"type":"method","name":"start_tls","children":[],"call":[" socket post_connection_check "," socket ","ssl_context verify_mode == ","ssl_context verify_mode "," connect_ssl "," socket sync_close= ","ssl_socket_class new ","OpenSSL SSL SSLContext  new ","@socket post_connection_check ","@socket sync_close= ","@socket respond_to? ","@socket hostname= ","ssl_context verify_hostname ! ","ssl_context verify_hostname ","ssl_context respond_to? ","ssl_socket_class new  post_connection_check ","ssl_socket_class new  sync_close= ","ssl_socket_class new  respond_to? ","ssl_socket_class new  hostname= "]}," HTTP Timeout Null connect_ssl":{"type":"method","name":"connect_ssl","children":[],"call":[" socket connect "," socket ","@socket connect "]}," HTTP Timeout Null connect":{"type":"method","name":"connect","children":[],"call":["socket_class open ","@socket setsockopt ","socket_class open  setsockopt "]}," HTTP Timeout Null initialize":{"type":"method","name":"initialize","children":[],"call":[]}," HTTP Timeout Global log_time":{"type":"method","name":"log_time","children":[],"call":[" reset_timer "," fail "," total_timeout "," time_left <= "," time_left ","Time  now - ","Time  now "," raise ","@time_left <= "]}," HTTP Timeout Global reset_timer":{"type":"method","name":"reset_timer","children":[],"call":["Time  now "]}," HTTP Timeout Global write":{"type":"method","name":"write","children":[],"call":[" log_time ","IO  select "," time_left "," socket "," socket << "," reset_timer ","result == "," socket write_nonblock "," loop "," write_nonblock "," perform_io "," socket write_nonblock  == "]}," HTTP Timeout Global readpartial":{"type":"method","name":"readpartial","children":[],"call":[" log_time ","IO  select "," time_left "," socket "," socket read_nonblock "," reset_timer ","result == "," loop ","result != ","result nil? "," read_nonblock "," perform_io "," socket read_nonblock  == "," socket read_nonblock  != "," socket read_nonblock  nil? "]}," HTTP Timeout Global connect_ssl":{"type":"method","name":"connect_ssl","children":[],"call":[" log_time ","IO  select "," time_left "," socket "," socket connect_nonblock "," reset_timer ","@socket connect_nonblock ","@socket wait_writable ","@socket wait_readable "," wait_writable_or_timeout "," wait_readable_or_timeout "]}," HTTP Timeout Global connect":{"type":"method","name":"connect","children":[],"call":[" log_time ","socket_class open "," Timeout  timeout "," time_left "," reset_timer ","@socket setsockopt "," raise ","connect_operation call tap ","connect_operation call ","trying_iterator next ","trying_targets lazy ","host_addresses empty? ","@dns_resolver call "," lambda ","socket_class open  setsockopt ","trying_targets lazy  next ","@dns_resolver call  empty? "]}," HTTP Timeout Global initialize":{"type":"method","name":"initialize","children":[],"call":[" time_left "," connect_timeout + + "," write_timeout "," connect_timeout + "," read_timeout "," connect_timeout "," reset_counter "," options fetch "," options "," Resolv  method "]}," HTTP Response caching":{"type":"method","name":"caching","children":[],"call":["Caching  new "]}," HTTP Response StringBody initialize":{"type":"method","name":"initialize","children":[],"call":[]}," HTTP Response StringBody inspect":{"type":"method","name":"inspect","children":[],"call":[" object_id to_s "," object_id "," class "]}," HTTP Response StringBody stream!":{"type":"method","name":"stream!","children":[],"call":[" fail ","@streaming == "]}," HTTP Response StringBody to_s":{"type":"method","name":"to_s","children":[],"call":[]}," HTTP Response StringBody each":{"type":"method","name":"each","children":[],"call":[]}," HTTP Response StringBody readpartial":{"type":"method","name":"readpartial","children":[],"call":["part length + ","part length ","@contents [] tap ","@contents [] ","@streaming_offset >= ","@contents length "," stream! "]}," HTTP Response IoBody readall":{"type":"method","name":"readall","children":[],"call":["buf << "," stream read "," stream "," stream eof? "," tap "," fail ","@streaming nil? "]}," HTTP Response IoBody initialize":{"type":"method","name":"initialize","children":[],"call":[]}," HTTP Response IoBody inspect":{"type":"method","name":"inspect","children":[],"call":["@streaming ! ! ","@streaming ! "," object_id to_s "," object_id "," class "]}," HTTP Response IoBody stream!":{"type":"method","name":"stream!","children":[],"call":[" fail ","@streaming == "]}," HTTP Response IoBody to_s":{"type":"method","name":"to_s","children":[],"call":[" readall "]}," HTTP Response IoBody each":{"type":"method","name":"each","children":[],"call":[" readpartial "," read readpartial ial "]}," HTTP Response IoBody readpartial":{"type":"method","name":"readpartial","children":[],"call":[" stream readpartial "," stream "," stream eof? "," stream! "]}," HTTP Response Caching to_time_or_epoch":{"type":"method","name":"to_time_or_epoch","children":[],"call":["Time  at ","Time  httpdate "]}," HTTP Response Caching server_response_time":{"type":"method","name":"server_response_time","children":[],"call":[" received_at "," headers []= "," received_at httpdate "," headers "," headers get map max "," headers get map "," method "," headers get "]}," HTTP Response Caching vary":{"type":"method","name":"vary","children":[],"call":[" headers get first "," headers get "," headers "]}," HTTP Response Caching body=":{"type":"method","name":"body=","children":[],"call":["StringBody  new ","new_body to_s ","new_body respond_to? ","new_body join ","IoBody  new "]}," HTTP Response Caching body":{"type":"method","name":"body","children":[],"call":["StringBody  new "," __getobj__ body to_s "," __getobj__ body "," __getobj__ "," __getobj__ body respond_to? "]}," HTTP Response Caching cache_headers":{"type":"method","name":"cache_headers","children":[],"call":["HTTP Cache Headers  new "," headers "]}," HTTP Response Caching validated!":{"type":"method","name":"validated!","children":[],"call":[" received_at= ","validating_response received_at "," requested_at= ","validating_response requested_at "," headers merge! ","validating_response headers "," headers "]}," HTTP Response Caching received_at":{"type":"method","name":"received_at","children":[],"call":["Time  now "]}," HTTP Response Caching requested_at":{"type":"method","name":"requested_at","children":[],"call":[" received_at "]}," HTTP Response Caching current_age":{"type":"method","name":"current_age","children":[],"call":["corrected_initial_age + ","(int 0) max ","now - "," received_at ","corrected_received_age + "," received_at - "," requested_at ","(lvar :apparent_age) max "," server_response_time "," headers get map max "," headers get map "," headers get "," headers ","Time  now ","corrected_received_age +  + ","Time  now  - ","(lvar :apparent_age) max  + ","(lvar :(int 0) max ) max ","Time  Time  now  "]}," HTTP Response Caching cacheable?":{"type":"method","name":"cacheable?","children":[],"call":["(or\n  (or\n    (send\n      (send nil :cache_headers) :vary_star?)\n    (send\n      (send nil :cache_headers) :no_store?))\n  (send\n    (send nil :cache_headers) :no_cache?)) ! "," cache_headers no_cache? "," cache_headers "," cache_headers no_store? "," cache_headers vary_star? ","CACHEABLE_RESPONSE_CODES  include? "," code "]}," HTTP Response Caching expired?":{"type":"method","name":"expired?","children":[],"call":[" current_age >= "," cache_headers max_age "," cache_headers "," current_age "]}," HTTP Response Caching stale?":{"type":"method","name":"stale?","children":[],"call":[" cache_headers must_revalidate? "," cache_headers "," expired? "]}," HTTP Response Caching caching":{"type":"method","name":"caching","children":[],"call":[]}," HTTP Response Caching initialize":{"type":"method","name":"initialize","children":[],"call":[]}," HTTP Request default_host_header_value":{"type":"method","name":"default_host_header_value","children":[],"call":[" host "," port ","PORTS  [] != ","PORTS  [] ","PORTS  [] == "]}," HTTP Request port":{"type":"method","name":"port","children":[],"call":["@uri default_port ","@uri port "]}," HTTP Request caching":{"type":"method","name":"caching","children":[],"call":["Caching  new "]}," HTTP Request Caching conditional_headers_for":{"type":"method","name":"conditional_headers_for","children":[],"call":["headers add "," cache_headers forces_revalidation? "," cache_headers ","cached_response headers get each ","cached_response headers get ","cached_response headers ","HTTP Headers  new ","HTTP Headers  new  add "," cache_HTTP Headers  new  forces_revalidation? "," cache_HTTP Headers  new  ","cached_response HTTP Headers  new  get each ","cached_response HTTP Headers  new  get ","cached_response HTTP Headers  new  "]}," HTTP Request Caching env":{"type":"method","name":"env","children":[],"call":["r uri to_s ","r uri "," lambda "]}," HTTP Request Caching cache_headers":{"type":"method","name":"cache_headers","children":[],"call":["HTTP Cache Headers  new "," headers "]}," HTTP Request Caching conditional_on_changes_to":{"type":"method","name":"conditional_on_changes_to","children":[],"call":[" class new ","HTTP Request  new caching ","HTTP Request  new "," version "," body "," proxy "," headers merge "," conditional_headers_for "," headers "," uri "," verb "," class "]}," HTTP Request Caching skips_cache?":{"type":"method","name":"skips_cache?","children":[],"call":[" cache_headers no_cache? "," cache_headers "," cache_headers must_revalidate? ","0 == "," cache_headers max_age "]}," HTTP Request Caching cacheable?":{"type":"method","name":"cacheable?","children":[],"call":[" cache_headers no_store? ! "," cache_headers no_store? "," cache_headers ","CACHEABLE_METHODS  include? "," verb "]}," HTTP Request Caching invalidates_cache?":{"type":"method","name":"invalidates_cache?","children":[],"call":[" cache_headers no_store? "," cache_headers ","INVALIDATING_METHODS  include? "," verb "]}," HTTP Request Caching caching":{"type":"method","name":"caching","children":[],"call":[]}," HTTP Request Caching initialize":{"type":"method","name":"initialize","children":[],"call":[]}," HTTP Redirector redirect_to":{"type":"method","name":"redirect_to","children":[],"call":["@request redirect ","303 == ","SEE_OTHER_ALLOWED_VERBS  include? ! ","SEE_OTHER_ALLOWED_VERBS  include? "," fail ","@response status ","STRICT_SENSITIVE_CODES  include? ","UNSAFE_VERBS  include? ","@response status code ","@request verb "," raise ","@response status @response status code  ","@request @request verb  "]}," HTTP Options []=":{"type":"method","name":"[]=","children":[],"call":[" send "]}," HTTP Options persistent?":{"type":"method","name":"persistent?","children":[],"call":[" persistent != "," persistent "," persistent nil? ! "," persistent nil? "]}," HTTP Options follow=":{"type":"method","name":"follow=","children":[],"call":[" argument_error! ","value respond_to? "," == ","value ! "]}," HTTP Options def_option":{"type":"method","name":"def_option","children":[],"call":["opts send "," instance_exec "," dup "," define_method "," protected "," attr_accessor "," lambda "," defined_options << ","name to_sym "," defined_options "," attr_reader "]}," HTTP Options defined_options":{"type":"method","name":"defined_options","children":[],"call":[]}," HTTP Headers normalize_header":{"type":"method","name":"normalize_header","children":[],"call":[" fail ","name inspect ","normalized =~ ","name split map join ","name split map ","name split ","name [] ","name split each join ","name split each ","name =~ "," raise ","name []  =~ ","name split each join  =~ "]}," HTTP Connection read_more":{"type":"method","name":"read_more","children":[],"call":["@parser << ","@socket readpartial ","@parser finished? "," parser << "," socket readpartial "," socket "," parser "," parser finished? ","value == "," raise ","ex backtrace ","e backtrace ","@socket readpartial  == "]}," HTTP Connection set_keep_alive":{"type":"method","name":"set_keep_alive","children":[],"call":["@parser headers [] != ","@parser headers [] ","@parser headers ","@parser headers [] == ","@parser http_version "," parser headers [] != "," parser headers [] "," parser headers "," parser "," parser http_version == "," parser http_version "," parser headers [] == "," persistent "]}," HTTP Connection reset_timer":{"type":"method","name":"reset_timer","children":[],"call":["Time  now + ","Time  now "," keep_alive_timeout "," persistent "]}," HTTP Connection start_tls":{"type":"method","name":"start_tls","children":[],"call":["@socket start_tls ","options [] ","req uri host ","req uri ","ssl_context set_params ","OpenSSL SSL SSLContext  new ","req using_proxy? ! ","req using_proxy? ","req uri https? "," socket "," socket post_connection_check ","ssl_context verify_mode == ","ssl_context verify_mode "," socket connect "," socket sync_close= ","ssl_socket_class new ","req uri is_a? "," failed_proxy_connect? ! "," failed_proxy_connect? ","options ssl_socket_class ","options ssl ","options ssl_context ","ssl_socket_class new  start_tls ","OpenSSL SSL SSLContext  new  set_params ","options []  set_params ","options ssl_context  set_params ","OpenSSL SSL SSLContext  new  verify_mode == ","options []  verify_mode == ","options ssl_context  verify_mode == ","OpenSSL SSL SSLContext  new  verify_mode ","options []  verify_mode ","options ssl_context  verify_mode ","options OpenSSL SSL SSLContext  new  ","options options []  ","options options ssl_context  "]}," HTTP Connection expired?":{"type":"method","name":"expired?","children":[],"call":["@conn_expires_at < ","Time  now ","@conn_expires_at ! "]}," HTTP Connection keep_alive?":{"type":"method","name":"keep_alive?","children":[],"call":["@socket closed? ! ","@socket closed? ","@keep_alive ! ! ","@keep_alive ! "," socket closed? ! "," socket closed? "," socket "]}," HTTP Connection close":{"type":"method","name":"close","children":[],"call":["@socket close ","@socket closed? "," socket close "," socket "," socket closed? "]}," HTTP Connection finish_response":{"type":"method","name":"finish_response","children":[],"call":[" reset_timer ","@parser reset "," close "," keep_alive? "," parser reset "," parser ","@socket reset_counter ","@socket respond_to? "]}," HTTP Connection read_headers!":{"type":"method","name":"read_headers!","children":[],"call":[" raise ","@parser headers ","e is_a? "," set_keep_alive "," read_more "," parser headers "," parser ","ex is_a? ","@parser headers? "," fail "," read_more == "," loop ","result == "," read_more  == "]}," HTTP Connection readpartial":{"type":"method","name":"readpartial","children":[],"call":["chunk to_s "," finish_response ","@parser chunk ","@parser finished? "," read_more "," parser chunk "," parser "," parser finished? "," pending_response "," read_more == ","@parser read "," b ","@parser chunk  to_s "," parser chunk  to_s ","@parser read  to_s ","@parser @parser chunk  ","@parser  parser chunk  ","@parser @parser read  ","@parser @parser finished? ? ","@parser  parser finished? ? "," parser @parser chunk  "," parser  parser chunk  "," parser @parser read  "," parser @parser finished? ? "," parser  parser finished? ? "]}," HTTP Connection send_request":{"type":"method","name":"send_request","children":[],"call":["req stream "," fail "," socket "," pending_request "," pending_response "," raise "]}," HTTP Connection initialize":{"type":"method","name":"initialize","children":[],"call":[" reset_timer "," start_tls ","@socket connect ","req socket_port ","req socket_host ","options [] ","options [] new ","Response Parser  new ","options [] to_f ","options persistent? ","req uri host ","req uri ","req using_proxy? ! ","req using_proxy? ","req uri is_a? ","options [] open ","@socket start_tls "," send_proxy_connect_request "," raise ","options nodelay ","options socket_class ","options timeout_class new ","options timeout_options ","options timeout_class ","options keep_alive_timeout to_f ","options keep_alive_timeout ","ex backtrace "," b ","e backtrace ","options [] new  connect ","options [] open  connect ","options timeout_class new  connect ","options [] new  start_tls ","options [] open  start_tls ","options timeout_class new  start_tls "]}," HTTP Client base_host":{"type":"method","name":"base_host","children":[],"call":["uri omit to_s ","uri omit ","base to_s ","base path= ","base query= ","uri dup ","uri dup  to_s ","uri dup  path= ","uri dup  query= "]}," HTTP Client verify_connection!":{"type":"method","name":"verify_connection!","children":[],"call":[" close ","@state == ","@connection expired? ","@connection keep_alive? ! ","@connection keep_alive? "," fail "," base_host "," default_options persistent "," default_options "," base_host != "," default_options persistent? "," default_options persistent? ! ","uri origin ","uri origin != "," raise "]}," HTTP Client close":{"type":"method","name":"close","children":[],"call":["@connection close "]}," HTTP Client make_request":{"type":"method","name":"make_request","children":[],"call":[" raise "," close "," default_options persistent? "," default_options ","@connection finish_response ","req verb == ","req verb ","Response  new ","req uri ","Response Body  new ","@connection headers ","@connection http_version ","@connection status_code ","@connection read_headers! ","@connection send_request ","HTTP Connection  new "," verify_connection! ","@connection close ","@connection parser headers ","@connection parser ","@connection parser http_version ","@connection parser status_code "," persistent? ","@connection failed_proxy_connect? ","@connection finish_Response  new ponse "]}," HTTP Chainable with_cache":{"type":"method","name":"with_cache","children":[],"call":[" branch "," default_options with_cache "," default_options "]}," HTTP Chainable persistent":{"type":"method","name":"persistent","children":[],"call":[" branch "," default_options with_persistent "," default_options ","p_client close "," block_given? "," default_options merge with_persistent "," default_options merge "," branch  close "]}," HTTP Cache stringify":{"type":"method","name":"stringify","children":[],"call":["body to_s ","buf << ","body each "," tap ","body respond_to? "]}," HTTP Cache storage":{"type":"method","name":"storage","children":[],"call":["Rack Cache Storage  new "]}," HTTP Cache initialize":{"type":"method","name":"initialize","children":[],"call":["NullLogger  new ","opts fetch "," storage resolve_entitystore_uri "," storage "," storage resolve_metastore_uri "]}," HTTP Cache invalidate_cache":{"type":"method","name":"invalidate_cache","children":[],"call":[" metastore invalidate "," entitystore "," metastore "]}," HTTP Cache store_in_cache":{"type":"method","name":"store_in_cache","children":[],"call":[" metastore store "," entitystore "," metastore ","response body= ","response body to_s ","response body "]}," HTTP Cache cache_lookup":{"type":"method","name":"cache_lookup","children":[],"call":["HTTP Response  new caching ","HTTP Response  new "," stringify ","rack_resp body ","rack_resp headers ","rack_resp status ","rack_resp nil? "," metastore lookup "," entitystore "," metastore ","request skips_cache? "," metastore lookup  body "," metastore lookup  headers "," metastore lookup  status "," metastore lookup  nil? "]}," HTTP Cache make_request":{"type":"method","name":"make_request","children":[],"call":["res requested_at= ","req sent_at ","res received_at= ","Time  now ","request_performer call caching tap ","request_performer call caching ","request_performer call ","req sent_at= "]}," HTTP Cache handle_response":{"type":"method","name":"handle_response","children":[],"call":[" store_in_cache ","actual_resp cacheable? ","req cacheable? ","cached_resp validated! ","req uri "," logger debug "," logger ","actual_resp status not_modified? ","actual_resp status "]}," HTTP Cache get_response":{"type":"method","name":"get_response","children":[],"call":[" handle_response "," make_request ","req conditional_on_changes_to ","req uri "," logger debug "," logger ","cached_resp stale? ! ","cached_resp stale? "," cache_lookup "," cache_lookup  stale? ! "," cache_lookup  stale? "]}," HTTP Cache perform":{"type":"method","name":"perform","children":[],"call":[" get_response "," invalidate_cache ","req invalidates_cache? ","request caching ","request caching  invalidates_cache? ","request caching uest caching "]}," HTTP Cache NullLogger warn":{"type":"method","name":"warn","children":[],"call":[]}," HTTP Cache NullLogger info":{"type":"method","name":"info","children":[],"call":[]}," HTTP Cache NullLogger debug":{"type":"method","name":"debug","children":[],"call":[]}," HTTP Cache NullLogger error":{"type":"method","name":"error","children":[],"call":[]}," HTTP Cache NullCache perform":{"type":"method","name":"perform","children":[],"call":[]}," HTTP Cache Headers explicit_max_age":{"type":"method","name":"explicit_max_age","children":[],"call":["(send\n  (send\n    (block\n      (send\n        (send nil :get\n          (str \"Cache-Control\")) :map)\n      (args\n        (arg :v))\n      (send\n        (begin\n          (regexp\n            (str \"max-age=(\\\\d+)\")\n            (regopt :i))) :match\n        (lvar :v))) :compact) :map) max ","m [] to_i ","m [] ","(send\n  (send nil :get\n    (str \"Cache-Control\")) :map) compact map ","(send\n  (send nil :get\n    (str \"Cache-Control\")) :map) compact ","(regexp\n  (str \"max-age=(\\\\d+)\")\n  (regopt :i)) match "," get map "," get ","(send\n  (send\n    (block\n      (send\n        (send nil :get\n          (const\n            (const\n              (const nil :HTTP) :Headers) :CACHE_CONTROL)) :map)\n      (args\n        (arg :v))\n      (send\n        (begin\n          (regexp\n            (str \"max-age=(\\\\d+)\")\n            (regopt :i))) :match\n        (lvar :v))) :compact) :map) max ","(send\n  (send nil :get\n    (const\n      (const\n        (const nil :HTTP) :Headers) :CACHE_CONTROL)) :map) compact map ","(send\n  (send nil :get\n    (const\n      (const\n        (const nil :HTTP) :Headers) :CACHE_CONTROL)) :map) compact "]}," HTTP Cache Headers to_time_or_epoch":{"type":"method","name":"to_time_or_epoch","children":[],"call":["Time  at ","Time  httpdate "]}," HTTP Cache Headers http_date_to_ttl":{"type":"method","name":"http_date_to_ttl","children":[],"call":["ttl < "," to_time_or_epoch - ","Time  now "," to_time_or_epoch "," to_time_or_epoch -  < "]}," HTTP Cache Headers seconds_til_expires":{"type":"method","name":"seconds_til_expires","children":[],"call":["(send\n  (send nil :get\n    (str \"Expires\")) :map) max "," http_date_to_ttl "," get map "," get ","(send\n  (send nil :get\n    (const\n      (const\n        (const nil :HTTP) :Headers) :EXPIRES)) :map) max "]}," HTTP Cache Headers matches?":{"type":"method","name":"matches?","children":[],"call":["v =~ "," get any? "," get "]}," HTTP Cache Headers vary_star?":{"type":"method","name":"vary_star?","children":[],"call":["* == ","v strip "," get any? "," get "]}," HTTP Cache Headers max_age":{"type":"method","name":"max_age","children":[],"call":[" seconds_til_expires "," explicit_max_age "]}," HTTP Cache Headers private?":{"type":"method","name":"private?","children":[],"call":[" matches? "]}," HTTP Cache Headers public?":{"type":"method","name":"public?","children":[],"call":[" matches? "]}," HTTP Cache Headers no_store?":{"type":"method","name":"no_store?","children":[],"call":[" matches? "]}," HTTP Cache Headers no_cache?":{"type":"method","name":"no_cache?","children":[],"call":[" matches? "]}," HTTP Cache Headers must_revalidate?":{"type":"method","name":"must_revalidate?","children":[],"call":[" matches? "]}," HTTP Cache Headers forces_revalidation?":{"type":"method","name":"forces_revalidation?","children":[],"call":[" max_age == "," max_age "," must_revalidate? "]}," HTTP Cache Headers initialize":{"type":"method","name":"initialize","children":[],"call":["HTTP Headers  coerce ","headers is_a? "]}," HTTP Response Body check_sequence!":{"type":"method","name":"check_sequence!","children":[],"call":[" fail ","@client sequence_id ","@active_seq != "]}," HTTP Timeout PerOperation resolve_address":{"type":"method","name":"resolve_address","children":[],"call":[" raise "," connect_timeout ","dns getaddress ","Resolv DNS  open ","HostResolver  getaddress ","dns getHostResolver  getaddress ess ","HostResolver  getHostResolver  getaddress ess "]}," HTTP Timeout PerOperation connect_with_timeout":{"type":"method","name":"connect_with_timeout","children":[],"call":[" raise "," connect_timeout ","IO  select "," socket "," socket connect_nonblock "]}," HTTP Timeout Global resolve_address":{"type":"method","name":"resolve_address","children":[],"call":[" raise "," total_timeout "," log_time ","dns getaddress ","Resolv DNS  open "," time_left "," reset_timer ","HostResolver  getaddress ","dns getHostResolver  getaddress ess ","HostResolver  getHostResolver  getaddress ess "]}," HTTP Timeout Global connect_with_timeout":{"type":"method","name":"connect_with_timeout","children":[],"call":[" log_time ","IO  select "," time_left "," socket "," socket connect_nonblock "," reset_timer "]}," HTTP Timeout Global reset_counter":{"type":"method","name":"reset_counter","children":[],"call":[" connect_timeout + + "," write_timeout "," connect_timeout + "," read_timeout "," connect_timeout "," time_left "]}," HTTP Response cookies":{"type":"method","name":"cookies","children":[],"call":["jar parse "," uri ","k == "," headers each_with_object ","CookieJar  new "," headers "," headers get each_with_object "," headers get "]}," HTTP Request proxy_connect_headers":{"type":"method","name":"proxy_connect_headers","children":[],"call":["connect_headers []= "," proxy_authorization_header "," using_authenticated_proxy? ","HTTP Headers  coerce "," headers [] "," headers ","connect_headers merge! "," proxy [] "," proxy "," proxy key? ","HTTP Headers  coerce  []= ","HTTP Headers  coerce  merge! "]}," HTTP Request proxy_connect_header":{"type":"method","name":"proxy_connect_header","children":[],"call":[" version "," port "," host ","@uri port ","@uri host "]}," HTTP Request headline":{"type":"method","name":"headline","children":[],"call":[" version "," verb to_s upcase "," verb to_s "," verb "," uri omit "," uri "," using_proxy? ","request_uri omit "," uri https? ! "," uri https? "," uri request_uri "," uri omit  omit "," uri  omit "," uri request_uri  omit "," uri  uri omit  "," uri  uri  "," uri  uri request_uri  "]}," HTTP Request connect_using_proxy":{"type":"method","name":"connect_using_proxy","children":[],"call":["Request Writer  new connect_through_proxy ","Request Writer  new "," proxy_connect_header "," proxy_connect_headers "]}," HTTP Request proxy_authorization_header":{"type":"method","name":"proxy_authorization_header","children":[],"call":["Base64  strict_encode64 "," proxy [] "," proxy "]}," HTTP Request Writer connect_through_proxy":{"type":"method","name":"connect_through_proxy","children":[],"call":["@socket << "," join_headers "," add_headers "," write "]}," HTTP Options persistent=":{"type":"method","name":"persistent=","children":[],"call":["HTTP URI  parse origin ","HTTP URI  parse "]}," HTTP Connection send_proxy_connect_request":{"type":"method","name":"send_proxy_connect_request","children":[],"call":["@parser reset ","@parser status_code == ","@parser status_code "," read_headers! ","req connect_using_proxy ","req using_proxy? ","req uri https? ","req uri ","@parser status_code != ","@parser headers "]}," HTTP Connection failed_proxy_connect?":{"type":"method","name":"failed_proxy_connect?","children":[],"call":[]}," HTTP Client make_request_headers":{"type":"method","name":"make_request_headers","children":[],"call":["opts headers merge ","opts headers ","opts headers get concat join ","opts headers get concat ","opts headers get ","cookies empty? ","opts cookies values ","opts cookies ","headers []= "," default_options persistent? "," default_options ","auto_deflate method ","headers delete ","opts feature ","opts opts headers  merge ","opts opts headers  ","opts opts headers  get concat join ","opts opts headers  get concat ","opts opts headers  get ","opts headers get concat join  empty? ","opts cookies values  empty? ","opts opts headers get concat join  values ","opts opts cookies values  values ","opts opts headers get concat join  ","opts opts cookies values  ","opts headers  []= ","opts feature  method ","opts headers  delete "]}," HTTP Chainable cookies":{"type":"method","name":"cookies","children":[],"call":[" branch "," default_options with_cookies "," default_options "]}," HTTP Chainable headers":{"type":"method","name":"headers","children":[],"call":[" branch "," default_options with_headers "," default_options "]}," HTTP Chainable cache":{"type":"method","name":"cache","children":[],"call":[" branch "," default_options with_cache "," default_options "]}," HTTP Chainable timeout":{"type":"method","name":"timeout","children":[],"call":[" branch ","options []= ","options delete ","(begin\n  (lvar :k)) to_sym ","options key? ","(sym :read) each "," fail ","klass to_sym ","klass is_a? "," default_options merge "," default_options "," raise ","(sym :global) each ","options dup "]}," HTTP Response Status to_sym":{"type":"method","name":"to_sym","children":[],"call":["SYMBOLS  [] "," code "]}," HTTP Response Status to_s":{"type":"method","name":"to_s","children":[],"call":["(begin\n  (send nil :code)) strip "," reason "," code "]}," HTTP URI inspect":{"type":"method","name":"inspect","children":[],"call":[" format "," to_s "," object_id "," class "," object_id << "," class name "]}," HTTP Request normalize_uri":{"type":"method","name":"normalize_uri","children":[],"call":["HTTP URI  new ","uri normalized_fragment ","uri query ","uri normalized_path ","uri normalized_authority ","uri normalized_scheme ","HTTP URI  parse ","HTTP URI  parse  normalized_fragment ","HTTP URI  parse  query ","HTTP URI  parse  normalized_path ","HTTP URI  parse  normalized_authority ","HTTP URI  parse  normalized_scheme "]}," HTTP Timeout Null rescue_writable":{"type":"method","name":"rescue_writable","children":[],"call":[" raise "," write_timeout ","IO  select "," socket "," socket to_io wait_writable "," socket to_io ","@socket to_io wait_writable ","@socket to_io "]}," HTTP Timeout Null rescue_readable":{"type":"method","name":"rescue_readable","children":[],"call":[" raise "," read_timeout ","IO  select "," socket "," socket to_io wait_readable "," socket to_io ","@socket to_io wait_readable ","@socket to_io "]}," HTTP Request Writer write":{"type":"method","name":"write","children":[],"call":["data [] ","data length > ","data length ","@socket write ","data present? ","data empty? ","data byteslice ","data bytesize > ","data bytesize "," raise ","ex backtrace ","e backtrace ","data []  [] ","data byteslice  [] ","data []  length > ","data byteslice  length > ","data @socket write  > ","data []  length ","data byteslice  length ","data @socket write  ","data []  present? ","data byteslice  present? ","data []  empty? ","data byteslice  empty? ","data []  byteslice ","data byteslice  byteslice ","data []  bytesize > ","data byteslice  bytesize > ","data []  bytesize ","data byteslice  bytesize "]}," HTTP Timeout Global wait_writable_or_timeout":{"type":"method","name":"wait_writable_or_timeout","children":[],"call":[" log_time ","IO  select "," time_left ","@socket to_io wait_writable ","@socket to_io "]}," HTTP Timeout Global wait_readable_or_timeout":{"type":"method","name":"wait_readable_or_timeout","children":[],"call":[" log_time ","IO  select "," time_left ","@socket to_io wait_readable ","@socket to_io "]}," HTTP Timeout Global perform_io":{"type":"method","name":"perform_io","children":[],"call":[" wait_writable_or_timeout "," wait_readable_or_timeout "," loop "," reset_timer "]}," HTTP Timeout Global write_nonblock":{"type":"method","name":"write_nonblock","children":[],"call":["@socket write_nonblock "]}," HTTP Timeout Global read_nonblock":{"type":"method","name":"read_nonblock","children":[],"call":["@socket read_nonblock "]}," HTTP Request Writer send_request":{"type":"method","name":"send_request","children":[],"call":[" fail ","@body class "," write ","chunk << ","chunk bytesize to_s << ","chunk bytesize to_s ","chunk bytesize ","@body each ","headers << "," join_headers ","chunk bytesize to_s << << << ","chunk bytesize to_s << << "," raise "," chunked? ","data empty? ","data clear ","data << "," encode_chunk "," each_chunk "," join_headers  << "," join_ join_headers  "," join_headers  empty? "," join_headers  clear "]}," HTTP Chainable nodelay":{"type":"method","name":"nodelay","children":[],"call":[" branch "," default_options with_nodelay "," default_options "]}," HTTP Chainable encoding":{"type":"method","name":"encoding","children":[],"call":[" branch "," default_options with_encoding "," default_options "]}," HTTP URI to_s":{"type":"method","name":"to_s","children":[],"call":["@uri to_s "]}," HTTP URI port":{"type":"method","name":"port","children":[],"call":["@uri default_port ","@uri port "]}," HTTP URI hash":{"type":"method","name":"hash","children":[],"call":[" to_s hash * "," to_s hash "," to_s "]}," HTTP URI eql?":{"type":"method","name":"eql?","children":[],"call":[" to_s == ","other to_s "," to_s ","other is_a? "]}," HTTP URI ==":{"type":"method","name":"==","children":[],"call":[" normalize to_s == ","other normalize to_s ","other normalize "," normalize to_s "," normalize ","other is_a? "]}," HTTP URI initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","options_or_uri class ","Addressable URI  new "," fail "," process_ipv6_brackets ","@uri normalized_host ","@uri host ","Addressable URI  new  normalized_host ","Addressable URI  new  host "]}," HTTP URI form_encode":{"type":"method","name":"form_encode","children":[],"call":[]}," HTTP URI parse":{"type":"method","name":"parse","children":[],"call":[]}," HTTP Response Status server_error?":{"type":"method","name":"server_error?","children":[],"call":[" code < "," code ","500 <= "]}," HTTP Response Status client_error?":{"type":"method","name":"client_error?","children":[],"call":[" code < "," code ","400 <= "]}," HTTP Response Status redirect?":{"type":"method","name":"redirect?","children":[],"call":[" code < "," code ","300 <= "]}," HTTP Response Status success?":{"type":"method","name":"success?","children":[],"call":[" code < "," code ","200 <= "]}," HTTP Response Status informational?":{"type":"method","name":"informational?","children":[],"call":[" code < "," code ","100 <= "]}," HTTP Request include_proxy_headers":{"type":"method","name":"include_proxy_headers","children":[],"call":[" include_proxy_authorization_header "," using_authenticated_proxy? "," headers merge! "," proxy [] "," proxy "," headers "," proxy key? "]}," HTTP Response content_length":{"type":"method","name":"content_length","children":[],"call":[" Integer ","@headers [] ","@headers include? "]}," HTTP Headers include?":{"type":"method","name":"include?","children":[],"call":["k == ","@pile any? "," normalize_header ","name to_s "," normalize_header  to_s "]}," HTTP Response body_stream_for":{"type":"method","name":"body_stream_for","children":[],"call":["opts [] stream_for ","opts [] "]}," HTTP Response Inflater zstream":{"type":"method","name":"zstream","children":[],"call":["Zlib Inflate  new ","32 + "]}," HTTP Response Inflater readpartial":{"type":"method","name":"readpartial","children":[],"call":[" zstream close "," zstream "," zstream finish "," zstream closed? ! "," zstream closed? "," zstream inflate ","@connection readpartial "," zstream total_in positive? "," zstream total_in "]}," HTTP Response Inflater initialize":{"type":"method","name":"initialize","children":[],"call":[]}," HTTP Options feature":{"type":"method","name":"feature","children":[],"call":[" features [] "," features "]}," HTTP Options features=":{"type":"method","name":"features=","children":[],"call":["h []= ","feature new "," argument_error! "," class available_features [] "," class available_features "," class ","opts_or_feature is_a? ","features each_with_object "," class available_features []  new "," class available_ class available_features [] s [] "," class available_ class available_features [] s ","opts_or_ class available_features []  is_a? "," class available_features [] s each_with_object "]}," HTTP Features AutoInflate stream_for":{"type":"method","name":"stream_for","children":[],"call":["Response Inflater  new ","(str \"deflate\") include? ","response headers [] ","response headers ","Response Body  new "]}," HTTP Features AutoDeflate deflate":{"type":"method","name":"deflate","children":[],"call":[" raise "," method ","Zlib Deflate  deflate ","out tap read ","out tap ","gz finish ","gz write ","Zlib GzipWriter  wrap ","StringIO  open ","headers []= ","headers delete ","body is_a? "]}," HTTP Features AutoDeflate initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","(str \"gzip\") include? ","@opts [] to_s ","@opts [] ","@opts key? "]}," HTTP Feature initialize":{"type":"method","name":"initialize","children":[],"call":[]}," HTTP Chainable use":{"type":"method","name":"use","children":[],"call":[" branch "," default_options with_features "," default_options "]}," HTTP URI dup":{"type":"method","name":"dup","children":[],"call":[" class new ","@uri dup "," class "]}," HTTP Response chunked?":{"type":"method","name":"chunked?","children":[],"call":["encoding last == ","encoding last ","@headers get ","@headers include? ","@headers get  last == ","@headers get  last "]}," HTTP Response Body find_encoding":{"type":"method","name":"find_encoding","children":[],"call":["Encoding  find "]}," HTTP Request request_body":{"type":"method","name":"request_body","children":[],"call":["opts [] deflated_body ","opts [] ","Request Body  new ","body is_a? ","opts [] deflated_opts [] deflated_body  ","opts [] deflated_Request Body  new  ","opts [] deflated_body  is_a? ","Request Body  new  is_a? "]}," HTTP Request Writer chunked?":{"type":"method","name":"chunked?","children":[],"call":["@headers [] == ","@headers [] "]}," HTTP Request Writer encode_chunk":{"type":"method","name":"encode_chunk","children":[],"call":["chunk bytesize to_s << << << ","chunk bytesize to_s << << ","chunk bytesize to_s << ","chunk bytesize to_s ","chunk bytesize "," chunked? "]}," HTTP Request Body ProcIO write":{"type":"method","name":"write","children":[],"call":["data bytesize ","@block call "]}," HTTP Request Body ProcIO initialize":{"type":"method","name":"initialize","children":[],"call":[]}," HTTP Request Body validate_body_type!":{"type":"method","name":"validate_body_type!","children":[],"call":[" raise ","@body class ","@body nil? ","@body is_a? ","@body respond_to? "]}," HTTP Request Body each":{"type":"method","name":"each","children":[],"call":["@body each ","@body is_a? ","IO  copy_stream ","ProcIO  new ","@body respond_to? ","@source each ","@source is_a? ","@source respond_to? ","@source rewind "," rewind "]}," HTTP Request Body size":{"type":"method","name":"size","children":[],"call":[" raise ","@body inspect ","@body nil? ","@body size ","@body respond_to? ","@body bytesize ","@body is_a? ","@source inspect ","@source nil? ","@source size ","@source respond_to? ","@source bytesize ","@source is_a? "]}," HTTP Request Body initialize":{"type":"method","name":"initialize","children":[],"call":[" validate_body_type! "," validate_source_type! "]}," HTTP Features AutoDeflate DeflatedBody compress":{"type":"method","name":"compress","children":[],"call":["deflater close ","deflater finish ","deflater deflate ","@body each ","Zlib Deflate  new ","Zlib Deflate  new  close ","Zlib Deflate  new  finish ","Zlib Deflate  new  deflate "]}," HTTP Features AutoDeflate GzippedBody BlockIO write":{"type":"method","name":"write","children":[],"call":["@block call "]}," HTTP Features AutoDeflate GzippedBody BlockIO initialize":{"type":"method","name":"initialize","children":[],"call":[]}," HTTP Features AutoDeflate GzippedBody compress":{"type":"method","name":"compress","children":[],"call":["gzip finish ","gzip write ","@body each ","Zlib GzipWriter  new ","BlockIO  new ","Zlib GzipWriter  new  finish ","Zlib GzipWriter  new  write "]}," HTTP Features AutoDeflate CompressedBody compress_all!":{"type":"method","name":"compress_all!","children":[],"call":["@compressed rewind ","@compressed write "," compress ","Tempfile  new ","Tempfile  new  rewind ","Tempfile  new  write "]}," HTTP Features AutoDeflate CompressedBody compressed_each":{"type":"method","name":"compressed_each","children":[],"call":["@compressed close! ","@compressed read "]}," HTTP Features AutoDeflate CompressedBody each":{"type":"method","name":"each","children":[],"call":[" compress "," compressed_each "," to_enum "," __method__ "]}," HTTP Features AutoDeflate CompressedBody size":{"type":"method","name":"size","children":[],"call":["@compressed size "," compress_all! "]}," HTTP Features AutoDeflate CompressedBody initialize":{"type":"method","name":"initialize","children":[],"call":[]}," HTTP Features AutoDeflate deflated_body":{"type":"method","name":"deflated_body","children":[],"call":[" raise "," method ","DeflatedBody  new ","GzippedBody  new "]}," HTTP Response Parser read":{"type":"method","name":"read","children":[],"call":["@chunk []= ","@chunk byteslice ","@chunk bytesize <= ","@chunk bytesize ","@chunk nil? ","@@chunk byteslice  []= ","@@chunk byteslice  byteslice ","@@chunk byteslice  bytesize <= ","@@chunk byteslice  bytesize ","@@chunk byteslice  nil? "]}," HTTP Request Body validate_source_type!":{"type":"method","name":"validate_source_type!","children":[],"call":[" raise ","@source class ","@source nil? ","@source is_a? ","@source respond_to? "]}," HTTP Client build_request":{"type":"method","name":"build_request","children":[],"call":["HTTP Request  new ","opts feature ","opts proxy "," make_request_body "," make_request_headers "," make_request_uri ","@default_options merge ","feature wrap_request ","opts features inject ","opts features "," wrap_request ","@default_options merge  feature ","opts opts proxy  ","@default_options merge  proxy "," make_request_ make_request_body  "," make_HTTP Request  new uest_body "," make_request_ make_request_headers  "," make_HTTP Request  new uest_headers "," make_request_ make_request_uri  "," make_HTTP Request  new uest_uri ","feature wrap_HTTP Request  new uest ","@default_options merge  features inject ","@default_options merge  features "," wrap_HTTP Request  new uest "]}," HTTP Chainable build_request":{"type":"method","name":"build_request","children":[],"call":[" branch build_request "," branch "," default_options "]}," HTTP Request Writer each_chunk":{"type":"method","name":"each_chunk","children":[],"call":[" chunked? ","data empty? ","data clear ","data << "," encode_chunk ","@body each "," join_headers "," join_headers  empty? "," join_headers  clear "," join_headers  << "]}," HTTP Request Body ==":{"type":"method","name":"==","children":[],"call":[" source == ","other source "," source "," class == ","other class "," class "]}," HTTP Options register_feature":{"type":"method","name":"register_feature","children":[],"call":["@available_features []= "]}," HTTP Features Logging wrap_response":{"type":"method","name":"wrap_response","children":[],"call":["headers + + ","headers + ","response body to_s ","response body ","(send\n  (send\n    (lvar :response) :headers) :map) join ","response headers map ","response headers "," logger debug "," logger ","response status "," logger info "," stringify_headers ","(send\n  (send\n    (lvar :response) :headers) :map) join  + + ","(send\n  (send\n    (lvar :response) :headers) :map) join  + ","response response body to_s  to_s ","response response body to_s  ","(send\n  (send\n    (lvar :response) :(send\n  (send\n    (lvar :response) :headers) :map) join ) :map) join ","response (send\n  (send\n    (lvar :response) :headers) :map) join  map ","response (send\n  (send\n    (lvar :response) :headers) :map) join  "," stringify_(send\n  (send\n    (lvar :response) :headers) :map) join  "]}," HTTP Features Logging wrap_request":{"type":"method","name":"wrap_request","children":[],"call":["headers + + ","body to_s ","headers + ","request body source ","request body ","(send\n  (send\n    (lvar :request) :headers) :map) join ","request headers map ","request headers "," logger debug "," logger ","request uri ","request verb to_s upcase ","request verb to_s ","request verb "," logger info "," stringify_headers ","(send\n  (send\n    (lvar :request) :headers) :map) join  + + ","request body source  to_s ","(send\n  (send\n    (lvar :request) :headers) :map) join  + ","request request body source  source ","request request body source  ","(send\n  (send\n    (lvar :request) :(send\n  (send\n    (lvar :request) :headers) :map) join ) :map) join ","request (send\n  (send\n    (lvar :request) :headers) :map) join  map ","request (send\n  (send\n    (lvar :request) :headers) :map) join  "," stringify_(send\n  (send\n    (lvar :request) :headers) :map) join  "]}," HTTP Features Logging initialize":{"type":"method","name":"initialize","children":[],"call":[]}," HTTP Features Instrumentation NullInstrumenter finish":{"type":"method","name":"finish","children":[],"call":[]}," HTTP Features Instrumentation NullInstrumenter start":{"type":"method","name":"start","children":[],"call":[]}," HTTP Features Instrumentation NullInstrumenter instrument":{"type":"method","name":"instrument","children":[],"call":[" finish "," block_given? "," start "]}," HTTP Features Instrumentation wrap_response":{"type":"method","name":"wrap_response","children":[],"call":[" instrumenter finish "," name "," instrumenter "]}," HTTP Features Instrumentation wrap_request":{"type":"method","name":"wrap_request","children":[],"call":[" instrumenter start "," name "," instrumenter "," instrumenter instrument "]}," HTTP Features Instrumentation initialize":{"type":"method","name":"initialize","children":[],"call":[]}," HTTP Features AutoInflate wrap_response":{"type":"method","name":"wrap_response","children":[],"call":["Response  new "," stream_for ","response connection ","response proxy_headers ","response headers ","response version ","response status ","(str \"deflate\") include? ","response headers [] ","options []= ","response uri "," supported_encoding? ","response request "]}," HTTP Features AutoDeflate wrap_request":{"type":"method","name":"wrap_request","children":[],"call":["Request  new "," deflated_body ","request body ","request proxy ","request headers ","request uri ","request verb ","request version "," method ","request headers []= ","request headers delete ","request body size zero? ","request body size ","request uri_normalizer "]}," HTTP Feature wrap_response":{"type":"method","name":"wrap_response","children":[],"call":[]}," HTTP Feature wrap_request":{"type":"method","name":"wrap_request","children":[],"call":[]}," HTTP Request inspect":{"type":"method","name":"inspect","children":[],"call":[" uri "," verb to_s upcase "," verb to_s "," verb "," class "]}," HTTP Features AutoInflate supported_encoding?":{"type":"method","name":"supported_encoding?","children":[],"call":["SUPPORTED_ENCODING  include? ","response headers get first ","response headers get ","response headers "]}," HTTP Request Body rewind":{"type":"method","name":"rewind","children":[],"call":["io rewind ","io respond_to? "]}," HTTP Request prepare_headers":{"type":"method","name":"prepare_headers","children":[],"call":["headers [] "," default_host_header_value ","HTTP Headers  coerce ","HTTP Headers  coerce  [] "]}," HTTP Request prepare_body":{"type":"method","name":"prepare_body","children":[],"call":["Request Body  new ","body is_a? "]}," HTTP Features NormalizeUri initialize":{"type":"method","name":"initialize","children":[],"call":[]}," HTTP Response Parser on_header_value":{"type":"method","name":"on_header_value","children":[],"call":["@headers add ","@field_value << "]}," HTTP Response Parser on_header_field":{"type":"method","name":"on_header_field","children":[],"call":["@field << "," append_header "]}," HTTP Client make_form_data":{"type":"method","name":"make_form_data","children":[],"call":["HTTP FormData  create ","form is_a? "]}," HTTP Response Parser append_header":{"type":"method","name":"append_header","children":[],"call":[" +@ ","@headers add "]}," HTTP Response Parser Handler append_header":{"type":"method","name":"append_header","children":[],"call":[" +@ ","@target add_header "]}," HTTP Response Parser Handler on_message_complete":{"type":"method","name":"on_message_complete","children":[],"call":["@target mark_message_finished "]}," HTTP Response Parser Handler on_body":{"type":"method","name":"on_body","children":[],"call":["@target add_body "]}," HTTP Response Parser Handler on_headers_complete":{"type":"method","name":"on_headers_complete","children":[],"call":["@target mark_header_finished "," append_header "]}," HTTP Response Parser Handler on_header_value":{"type":"method","name":"on_header_value","children":[],"call":["@field_value << "]}," HTTP Response Parser Handler on_header_field":{"type":"method","name":"on_header_field","children":[],"call":["@field << "," append_header "]}," HTTP Response Parser Handler reset":{"type":"method","name":"reset","children":[],"call":[" +@ "]}," HTTP Response Parser Handler initialize":{"type":"method","name":"initialize","children":[],"call":[" reset "]}," HTTP Response Parser add_body":{"type":"method","name":"add_body","children":[],"call":["@chunk << "]}," HTTP Response Parser mark_message_finished":{"type":"method","name":"mark_message_finished","children":[],"call":[]}," HTTP Response Parser add_header":{"type":"method","name":"add_header","children":[],"call":["@headers add "]}," HTTP Response Parser mark_header_finished":{"type":"method","name":"mark_header_finished","children":[],"call":["@parser http_minor ","@parser http_major ","@parser status_code "]}," HTTP Headers validate_value":{"type":"method","name":"validate_value","children":[],"call":[" raise ","v inspect ","v include? ","value to_s ","value to_s  inspect ","value to_s  include? ","value to_s alue to_s "]}," HTTP Features Logging stringify_headers":{"type":"method","name":"stringify_headers","children":[],"call":["(send\n  (lvar :headers) :map) join ","headers map "]}," HTTP Feature on_error":{"type":"method","name":"on_error","children":[],"call":[]}," HTTP ContentType initialize":{"type":"method","name":"initialize","children":[],"call":[]}," HTTP ContentType charset":{"type":"method","name":"charset","children":[],"call":["str to_s [] ","str to_s "]}," HTTP ContentType mime_type":{"type":"method","name":"mime_type","children":[],"call":["str to_s [] ","str to_s "]}," HTTP ContentType parse":{"type":"method","name":"parse","children":[],"call":[" new "," charset "," mime_type "]}," HTTP Client build_response":{"type":"method","name":"build_response","children":[],"call":["Response  new ","options encoding ","@connection proxy_response_headers ","@connection headers ","@connection http_version ","@connection status_code "]}," HTTP Response init_request":{"type":"method","name":"init_request","children":[],"call":["opts fetch ","HTTP Request  new ","opts [] "," raise "]}," HTTP Client wrap_request":{"type":"method","name":"wrap_request","children":[],"call":["feature wrap_request ","opts features inject ","opts features "]}," HTTP Response default_encoding":{"type":"method","name":"default_encoding","children":[],"call":[" mime_type == "," mime_type "]}," HTTP Redirector collect_cookies_from_response":{"type":"method","name":"collect_cookies_from_response","children":[],"call":["@response cookies add ","@response cookies "," cookie_jar each "," cookie_jar "," cookie_jar add "," cookie_jar delete ","cookie value == ","cookie value ","@response cookies each "]}," HTTP Redirector collect_cookies_from_request":{"type":"method","name":"collect_cookies_from_request","children":[],"call":[" cookie_jar add ","HTTP Cookie  new ","@request host ","@request uri path ","@request uri "," cookie_jar ","cookies each ","HTTP Cookie  cookie_value_to_hash ","@request headers [] ","@request headers ","HTTP Cookie  cookie_value_to_hash  each "]}," HTTP Redirector cookie_jar":{"type":"method","name":"cookie_jar","children":[],"call":["HTTP CookieJar  new "]}," HTTP URI process_ipv6_brackets":{"type":"method","name":"process_ipv6_brackets","children":[],"call":["ip to_s ","ip ipv6? ","IPAddr  new ","IPAddr  new  to_s ","IPAddr  new  IPAddr  new v6? "]}," HTTP URI host=":{"type":"method","name":"host=","children":[],"call":[" process_ipv6_brackets ","@uri normalized_host ","@uri host ","@uri host= "]}}