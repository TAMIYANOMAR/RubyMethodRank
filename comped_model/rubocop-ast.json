{" RuboCop Token equal_sign?":{"type":"method","name":"equal_sign?","children":[],"call":["(sym :tEQL) include? "," type "]}," RuboCop Token end?":{"type":"method","name":"end?","children":[],"call":[" type == "," type "]}," RuboCop Token rescue_modifier?":{"type":"method","name":"rescue_modifier?","children":[],"call":[" type == "," type "]}," RuboCop Token comma?":{"type":"method","name":"comma?","children":[],"call":[" type == "," type "]}," RuboCop Token right_parens?":{"type":"method","name":"right_parens?","children":[],"call":[" type == "," type "]}," RuboCop Token left_parens?":{"type":"method","name":"left_parens?","children":[],"call":["(sym :tLPAREN) include? "," type "]}," RuboCop Token right_curly_brace?":{"type":"method","name":"right_curly_brace?","children":[],"call":[" type == "," type "]}," RuboCop Token left_curly_brace?":{"type":"method","name":"left_curly_brace?","children":[],"call":[" type == "," type "]}," RuboCop Token left_brace?":{"type":"method","name":"left_brace?","children":[],"call":[" type == "," type "]}," RuboCop Token right_bracket?":{"type":"method","name":"right_bracket?","children":[],"call":[" type == "," type "]}," RuboCop Token left_bracket?":{"type":"method","name":"left_bracket?","children":[],"call":["(sym :tLBRACK) include? "," type "]}," RuboCop Token left_ref_bracket?":{"type":"method","name":"left_ref_bracket?","children":[],"call":[" type == "," type "]}," RuboCop Token left_array_bracket?":{"type":"method","name":"left_array_bracket?","children":[],"call":[" type == "," type "]}," RuboCop Token semicolon?":{"type":"method","name":"semicolon?","children":[],"call":[" type == "," type "]}," RuboCop Token comment?":{"type":"method","name":"comment?","children":[],"call":[" type == "," type "]}," RuboCop Token space_before?":{"type":"method","name":"space_before?","children":[],"call":[" pos source_buffer source match "," pos source_buffer source "," pos source_buffer "," pos "," begin_pos - "," begin_pos "," begin_pos zero? "]}," RuboCop Token space_after?":{"type":"method","name":"space_after?","children":[],"call":[" pos source_buffer source match "," end_pos "," pos source_buffer source "," pos source_buffer "," pos "]}," RuboCop Token to_s":{"type":"method","name":"to_s","children":[],"call":[" text inspect "," text "," type "," column "," line "]}," RuboCop Token end_pos":{"type":"method","name":"end_pos","children":[],"call":["@pos end_pos "]}," RuboCop Token begin_pos":{"type":"method","name":"begin_pos","children":[],"call":["@pos begin_pos "]}," RuboCop Token column":{"type":"method","name":"column","children":[],"call":["@pos column "]}," RuboCop Token line":{"type":"method","name":"line","children":[],"call":["@pos line "]}," RuboCop Token initialize":{"type":"method","name":"initialize","children":[],"call":["text to_s "]}," RuboCop Token from_parser_token":{"type":"method","name":"from_parser_token","children":[],"call":[]}," RuboCop ProcessedSource create_parser":{"type":"method","name":"create_parser","children":[],"call":["parser diagnostics consumer= ","@diagnostics << "," lambda ","parser diagnostics ","parser diagnostics ignore_warnings= ","parser diagnostics all_errors_are_fatal= ","RUBY_ENGINE  != "," parser_class new tap "," parser_class new "," parser_class ","RuboCop AST Builder  new "]}," RuboCop ProcessedSource parser_class":{"type":"method","name":"parser_class","children":[],"call":[" raise ","ruby_version inspect "," require "]}," RuboCop ProcessedSource tokenize":{"type":"method","name":"tokenize","children":[],"call":["Token  from_parser_token ","tokens map ","ast complete! ","ast respond_to? ","parser tokenize "]}," RuboCop ProcessedSource parse":{"type":"method","name":"parse","children":[],"call":[" tokenize "," create_parser ","@buffer source= ","Parser Source Buffer  new ","Parser Source Buffer  new  source= "]}," RuboCop ProcessedSource comment_lines":{"type":"method","name":"comment_lines","children":[],"call":["c location line ","c location "," comments map "," comments "]}," RuboCop ProcessedSource line_indentation":{"type":"method","name":"line_indentation","children":[],"call":[" lines [] match [] to_s length "," lines [] match [] to_s "," lines [] match [] "," lines [] match "," lines [] ","line_number - "," lines "]}," RuboCop ProcessedSource following_line":{"type":"method","name":"following_line","children":[],"call":[" lines [] ","token line "," lines "]}," RuboCop ProcessedSource current_line":{"type":"method","name":"current_line","children":[],"call":[" lines [] ","token line - ","token line "," lines "]}," RuboCop ProcessedSource preceding_line":{"type":"method","name":"preceding_line","children":[],"call":[" lines [] ","token line - ","token line "," lines "]}," RuboCop ProcessedSource start_with?":{"type":"method","name":"start_with?","children":[],"call":[" [] start_with? "," [] "," [] nil? "]}," RuboCop ProcessedSource comments_before_line":{"type":"method","name":"comments_before_line","children":[],"call":["c location line <= ","c location line ","c location "," comments select "," comments "]}," RuboCop ProcessedSource commented?":{"type":"method","name":"commented?","children":[],"call":[" comment_lines include? ","source_range line "," comment_lines "]}," RuboCop ProcessedSource blank?":{"type":"method","name":"blank?","children":[],"call":[" ast nil? "," ast "]}," RuboCop ProcessedSource file_path":{"type":"method","name":"file_path","children":[],"call":[" buffer name "," buffer "]}," RuboCop ProcessedSource find_token":{"type":"method","name":"find_token","children":[],"call":[" tokens find "," tokens "]}," RuboCop ProcessedSource each_token":{"type":"method","name":"each_token","children":[],"call":[" tokens each "," tokens "]}," RuboCop ProcessedSource find_comment":{"type":"method","name":"find_comment","children":[],"call":[" comments find "," comments "]}," RuboCop ProcessedSource each_comment":{"type":"method","name":"each_comment","children":[],"call":[" comments each "," comments "]}," RuboCop ProcessedSource checksum":{"type":"method","name":"checksum","children":[],"call":["Digest SHA1  hexdigest "]}," RuboCop ProcessedSource valid_syntax?":{"type":"method","name":"valid_syntax?","children":[],"call":["(sym :error) include? ","d level ","@diagnostics none? "]}," RuboCop ProcessedSource []":{"type":"method","name":"[]","children":[],"call":[" lines [] "," lines "]}," RuboCop ProcessedSource lines":{"type":"method","name":"lines","children":[],"call":["result << ","line == ","ix >= ","all_lines each_with_index ","all_lines size "," tokens last line "," tokens last "," tokens "," tokens any? ","@buffer source_lines ","@buffer source_lines  each_with_index ","@buffer source_lines  size "]}," RuboCop ProcessedSource ast_with_comments":{"type":"method","name":"ast_with_comments","children":[],"call":["Parser Source Comment  associate "," comments "," ast "," comments ! "," ast ! "]}," RuboCop ProcessedSource disabled_line_ranges":{"type":"method","name":"disabled_line_ranges","children":[],"call":[" comment_config cop_disabled_line_ranges "," comment_config "]}," RuboCop ProcessedSource comment_config":{"type":"method","name":"comment_config","children":[],"call":["CommentConfig  new "]}," RuboCop ProcessedSource initialize":{"type":"method","name":"initialize","children":[],"call":[" parse ","source force_encoding ","source encoding == ","source encoding "]}," RuboCop ProcessedSource from_file":{"type":"method","name":"from_file","children":[],"call":[]}," RuboCop NodePattern descend":{"type":"method","name":"descend","children":[],"call":[]}," RuboCop NodePattern to_s":{"type":"method","name":"to_s","children":[],"call":[" pattern "," class "]}," RuboCop NodePattern ==":{"type":"method","name":"==","children":[],"call":["Compiler  tokens == ","Compiler  tokens "," pattern ","other pattern ","other is_a? "]}," RuboCop NodePattern marshal_dump":{"type":"method","name":"marshal_dump","children":[],"call":[" pattern "]}," RuboCop NodePattern marshal_load":{"type":"method","name":"marshal_load","children":[],"call":[" initialize "]}," RuboCop NodePattern match":{"type":"method","name":"match","children":[],"call":[" match "," initialize "," pattern "]}," RuboCop NodePattern initialize":{"type":"method","name":"initialize","children":[],"call":[" instance_eval ","836 + ","compiler emit_method_code ","compiler emit_trailing_params ","Compiler  new ","Compiler  new  emit_method_code ","Compiler  new  emit_trailing_params "]}," RuboCop NodePattern Macros node_search_body":{"type":"method","name":"node_search_body","children":[],"call":[]}," RuboCop NodePattern Macros node_search":{"type":"method","name":"node_search","children":[],"call":[" class_eval ","lineno to_i "," node_search_body ","compiler match_code ","compiler emit_trailing_params "]}," RuboCop NodePattern Macros node_search_all":{"type":"method","name":"node_search_all","children":[],"call":[" node_search ","compiler emit_trailing_params ","compiler emit_yield_capture "]}," RuboCop NodePattern Macros node_search_first":{"type":"method","name":"node_search_first","children":[],"call":[" node_search "]}," RuboCop NodePattern Macros def_node_search":{"type":"method","name":"def_node_search","children":[],"call":[" node_search_all "," node_search_first ","method_name to_s end_with? ","method_name to_s "," caller first split "," caller first "," caller ","Compiler  new "]}," RuboCop NodePattern Macros def_node_matcher":{"type":"method","name":"def_node_matcher","children":[],"call":[" class_eval ","location lineno ","location path "," caller_locations first "," caller_locations ","compiler emit_method_code ","compiler emit_trailing_params ","Compiler  new "," caller_locations first  lineno "," caller_locations first  path "," caller_ caller_locations first s first "," caller_ caller_locations first s ","Compiler  new  emit_method_code ","Compiler  new  emit_trailing_params "]}," RuboCop NodePattern Compiler tokens":{"type":"method","name":"tokens","children":[],"call":[]}," RuboCop NodePattern Compiler substitute_cur_node":{"type":"method","name":"substitute_cur_node","children":[],"call":["(send\n  (send\n    (lvar :code) :gsub\n    (const nil :CUR_ELEMENT)\n    (const nil :CUR_NODE)) :gsub\n  (const nil :CUR_NODE)) gsub ","iter == ","code gsub gsub ","code gsub "]}," RuboCop NodePattern Compiler with_seq_head_context":{"type":"method","name":"with_seq_head_context","children":[],"call":["code gsub "," fail_due_to ","code include? "]}," RuboCop NodePattern Compiler with_context":{"type":"method","name":"with_context","children":[],"call":[" substitute_cur_node "," with_temp_node "]}," RuboCop NodePattern Compiler with_child_context":{"type":"method","name":"with_child_context","children":[],"call":[" with_context "]}," RuboCop NodePattern Compiler auto_use_temp_node?":{"type":"method","name":"auto_use_temp_node?","children":[],"call":["code scan count > ","code scan count ","code scan "]}," RuboCop NodePattern Compiler next_temp_value":{"type":"method","name":"next_temp_value","children":[],"call":[]}," RuboCop NodePattern Compiler next_temp_variable":{"type":"method","name":"next_temp_variable","children":[],"call":[" next_temp_value "]}," RuboCop NodePattern Compiler with_temp_variables":{"type":"method","name":"with_temp_variables","children":[],"call":[" next_temp_variable ","block parameters map ","block parameters "]}," RuboCop NodePattern Compiler with_temp_node":{"type":"method","name":"with_temp_node","children":[],"call":["(send nil :with_temp_variables) gsub "," with_temp_variables "]}," RuboCop NodePattern Compiler fail_due_to":{"type":"method","name":"fail_due_to","children":[],"call":[" raise "]}," RuboCop NodePattern Compiler emit_method_code":{"type":"method","name":"emit_method_code","children":[],"call":[" emit_retval "," emit_yield_capture "]}," RuboCop NodePattern Compiler emit_trailing_params":{"type":"method","name":"emit_trailing_params","children":[],"call":["params empty? "," emit_param_list "," emit_param_list  empty? "]}," RuboCop NodePattern Compiler emit_param_list":{"type":"method","name":"emit_param_list","children":[],"call":["(send\n  (begin\n    (irange\n      (int 1)\n      (ivar :@params))) :map) join ","(irange\n  (int 1)\n  (ivar :@params)) map "]}," RuboCop NodePattern Compiler emit_retval":{"type":"method","name":"emit_retval","children":[],"call":["@captures == ","@captures zero? "]}," RuboCop NodePattern Compiler emit_yield_capture":{"type":"method","name":"emit_yield_capture","children":[],"call":["@captures == ","@captures zero? "]}," RuboCop NodePattern Compiler get_param":{"type":"method","name":"get_param","children":[],"call":["number zero? ","number > "," Integer ","number empty? "," Integer  zero? "," Integer  > "," Integer  empty? "]}," RuboCop NodePattern Compiler next_capture":{"type":"method","name":"next_capture","children":[],"call":[]}," RuboCop NodePattern Compiler compile_arg":{"type":"method","name":"compile_arg","children":[],"call":[" fail_due_to ","token inspect "," get_param ","token [] ","invalid in arglist:  + "," access_unify "]}," RuboCop NodePattern Compiler compile_args":{"type":"method","name":"compile_args","children":[],"call":["args << "," compile_arg ","(str \")\") include? ","tokens slice! each_with_object ","tokens slice! ","token == ","tokens find_index "]}," RuboCop NodePattern Compiler compile_param":{"type":"method","name":"compile_param","children":[],"call":[" get_param "]}," RuboCop NodePattern Compiler compile_nodetype":{"type":"method","name":"compile_nodetype","children":[],"call":["type tr "," compile_guard_clause "]}," RuboCop NodePattern Compiler compile_funcall":{"type":"method","name":"compile_funcall","children":[],"call":["args join ","method [] "," compile_args "," tokens ","method end_with? "," compile_args  join ","method []  [] "," compile_ compile_args  ","method []  end_with? "]}," RuboCop NodePattern Compiler compile_predicate":{"type":"method","name":"compile_predicate","children":[],"call":["args join ","predicate [] "," compile_args "," tokens ","predicate end_with? "," compile_args  join ","predicate []  [] "," compile_ compile_args  ","predicate []  end_with? "]}," RuboCop NodePattern Compiler compile_literal":{"type":"method","name":"compile_literal","children":[],"call":[]}," RuboCop NodePattern Compiler compile_wildcard":{"type":"method","name":"compile_wildcard","children":[],"call":["@unify []= ","name gsub "," access_unify ","@unify key? ","name empty? ","@u@unify []= ify []= ","@unify []= ame gsub "," access_u@unify []= ify ","@u@unify []= ify key? ","@unify []= ame empty? "]}," RuboCop NodePattern Compiler compile_descend":{"type":"method","name":"compile_descend","children":[],"call":["(dstr\n  (str \"RuboCop::NodePattern.descend(\")\n  (begin\n    (const nil :CUR_ELEMENT))\n  (str \").\")) join "," with_context "," compile_expr "," with_temp_variables "]}," RuboCop NodePattern Compiler compile_ascend":{"type":"method","name":"compile_ascend","children":[],"call":[" with_context "," compile_expr "]}," RuboCop NodePattern Compiler compile_negation":{"type":"method","name":"compile_negation","children":[],"call":[" compile_expr "]}," RuboCop NodePattern Compiler compile_capture":{"type":"method","name":"compile_capture","children":[],"call":[" compile_expr "," next_capture "]}," RuboCop NodePattern Compiler compile_intersect":{"type":"method","name":"compile_intersect","children":[],"call":["(send\n  (send nil :tokens_until\n    (str \"]\")\n    (str \"intersection\")) :map) join "," compile_expr "," tokens_until map "," tokens_until "]}," RuboCop NodePattern Compiler compile_union":{"type":"method","name":"compile_union","children":[],"call":["terms join "," compile_expr "," insure_same_captures map "," insure_same_captures "," unify_in_union "," tokens_until "]}," RuboCop NodePattern Compiler unify_in_union":{"type":"method","name":"unify_in_union","children":[],"call":[" forbid_unification ","union - ","new_unify_intersection | ","new_unify_intersection nil? ","@unify keys - ","unify_before keys ","@unify keys ","unify_before dup ","enum each ","@unify dup "," to_enum "," __method__ "," block_given? ","new_unify_intersection |  - ","@unify keys - _intersection | ","@unify keys - _intersection nil? ","unify_before dup  keys - ","@unify dup  keys ","unify_before dup  keys ","@unify dup  dup ","unify_before dup  dup "]}," RuboCop NodePattern Compiler forbid_unification":{"type":"method","name":"forbid_unification","children":[],"call":["@unify []= ","names each "]}," RuboCop NodePattern Compiler access_unify":{"type":"method","name":"access_unify","children":[],"call":[" fail_due_to ","var == ","@unify [] ","@unify []  == "]}," RuboCop NodePattern Compiler insure_same_captures":{"type":"method","name":"insure_same_captures","children":[],"call":[" fail_due_to ","captures_after != ","enum each "," to_enum "," __method__ "," block_given? "]}," RuboCop NodePattern Compiler compile_any_order":{"type":"method","name":"compile_any_order","children":[],"call":["ANY_ORDER_TEMPLATE  result "," binding "," lambda ","patterns size ","patterns << "," compile_expr "," next_capture "," tokens shift "," tokens "," fail_due_to "," tokens_until "," with_temp_variables ","  tokens shift s shift ","  tokens shift s ","  tokens shift s_until "]}," RuboCop NodePattern Compiler compile_ellipsis":{"type":"method","name":"compile_ellipsis","children":[],"call":[]}," RuboCop NodePattern Compiler compile_captured_ellipsis":{"type":"method","name":"compile_captured_ellipsis","children":[],"call":["range end ","range begin == ","range begin "," lambda "," next_capture "," next_ next_capture  "]}," RuboCop NodePattern Compiler Sequence variadic_arity":{"type":"method","name":"variadic_arity","children":[],"call":[" last_terms_arity -@ - "," last_terms_arity -@ "," last_terms_arity "," first_terms_arity ","@variadic_index positive? ","  first_terms_arity _terms_arity "]}," RuboCop NodePattern Compiler Sequence compile_variadic_term":{"type":"method","name":"compile_variadic_term","children":[],"call":[" term "," variadic_arity "]}," RuboCop NodePattern Compiler Sequence compile_terms":{"type":"method","name":"compile_terms","children":[],"call":[" term ","start - ","@arities fetch ","index_range map "]}," RuboCop NodePattern Compiler Sequence compile_last_terms":{"type":"method","name":"compile_last_terms","children":[],"call":[" compile_terms "," last_terms_arity -@ "," last_terms_arity "," last_terms_range "]}," RuboCop NodePattern Compiler Sequence compile_first_terms":{"type":"method","name":"compile_first_terms","children":[],"call":[" compile_terms "," first_terms_range "]}," RuboCop NodePattern Compiler Sequence compile_seq_head":{"type":"method","name":"compile_seq_head","children":[],"call":[" with_seq_head_context ","@terms [] "," fail_due_to ","@terms [] respond_to? "," seq_head? "]}," RuboCop NodePattern Compiler Sequence term":{"type":"method","name":"term","children":[],"call":[" with_child_context ","range begin ","t call ","t respond_to? ","@terms [] "," wi@terms [] h_child_con@terms [] ex@terms []  ","@terms []  call ","@terms []  respond_@terms [] o? ","@@terms [] erms [] "]}," RuboCop NodePattern Compiler Sequence compile_child_nb_guard":{"type":"method","name":"compile_child_nb_guard","children":[],"call":["fixed + ","max_variadic != ","@arities [] end ","@arities [] "," variadic_term_min_arity "," first_terms_arity + "," last_terms_arity "," first_terms_arity "," first_terms_arity +  + ","@arities [] end  != "," variadic_term_fixed + _arity "]}," RuboCop NodePattern Compiler Sequence seq_head?":{"type":"method","name":"seq_head?","children":[],"call":["@variadic_index != "]}," RuboCop NodePattern Compiler Sequence last_terms_range":{"type":"method","name":"last_terms_range","children":[],"call":["@terms size ","@variadic_index + "]}," RuboCop NodePattern Compiler Sequence first_terms_range":{"type":"method","name":"first_terms_range","children":[],"call":["(or\n  (ivar :@variadic_index)\n  (send\n    (ivar :@terms) :size)) - ","@terms size "," seq_head? "]}," RuboCop NodePattern Compiler Sequence variadic_term_min_arity":{"type":"method","name":"variadic_term_min_arity","children":[],"call":["@arities [] begin ","@arities [] "]}," RuboCop NodePattern Compiler Sequence last_terms_arity":{"type":"method","name":"last_terms_arity","children":[],"call":["@arities [] inject ","@arities [] "," last_terms_range "]}," RuboCop NodePattern Compiler Sequence first_terms_arity":{"type":"method","name":"first_terms_arity","children":[],"call":["@arities [] inject ","@arities [] "," first_terms_range "]}," RuboCop NodePattern Compiler Sequence compile":{"type":"method","name":"compile","children":[],"call":["(send nil :compile_guard_clause) compact join << ","(send nil :compile_guard_clause) compact join ","(send nil :compile_guard_clause) compact "," compile_last_terms "," compile_variadic_term "," compile_first_terms "," compile_seq_head "," compile_child_nb_guard "," compile_guard_clause "]}," RuboCop NodePattern Compiler Sequence initialize":{"type":"method","name":"initialize","children":[],"call":[" fail_due_to ","(send\n  (ivar :@arities) :one?) ! ","a is_a? ","@arities one? ","@arities find_index ","arity_term_list transpose "]}," RuboCop NodePattern Compiler parse_repetition_token":{"type":"method","name":"parse_repetition_token","children":[],"call":[" tokens shift "," tokens "," tokens first "]}," RuboCop NodePattern Compiler repeated_generator":{"type":"method","name":"repeated_generator","children":[],"call":["REPEATED_TEMPLATE  result "," binding "," fail_due_to ","range begin == ","range begin "," lambda "," with_temp_variables "]}," RuboCop NodePattern Compiler compile_repeated_expr":{"type":"method","name":"compile_repeated_expr","children":[],"call":[" repeated_generator "," next_temp_variable ","@captures != ","min nil? "," parse_repetition_token "," compile_expr "," compile_ compile_expr  "]}," RuboCop NodePattern Compiler variadic_seq_term":{"type":"method","name":"variadic_seq_term","children":[],"call":[" compile_repeated_expr "," compile_any_order "," next_capture "," compile_ellipsis "," compile_captured_ellipsis "," tokens shift "," tokens ","  tokens shift s shift ","  tokens shift s "]}," RuboCop NodePattern Compiler compile_guard_clause":{"type":"method","name":"compile_guard_clause","children":[],"call":[]}," RuboCop NodePattern Compiler compile_seq":{"type":"method","name":"compile_seq","children":[],"call":["Sequence  new compile ","Sequence  new "," variadic_seq_term "," tokens_until map "," tokens_until "]}," RuboCop NodePattern Compiler tokens_until":{"type":"method","name":"tokens_until","children":[],"call":[" tokens shift "," tokens "," tokens first == "," tokens first "," fail_due_to "," to_enum "," __method__ "," block_given? "]}," RuboCop NodePattern Compiler compile_expr":{"type":"method","name":"compile_expr","children":[],"call":[" fail_due_to ","token inspect "," compile_param ","token [] "," compile_nodetype "," compile_predicate "," compile_literal "," compile_funcall "," compile_wildcard "," compile_descend "," compile_ascend "," compile_capture "," compile_negation "," compile_intersect "," compile_union "," compile_seq "]}," RuboCop NodePattern Compiler run":{"type":"method","name":"run","children":[],"call":[" fail_due_to "," tokens empty? "," tokens ","@match_code prepend ","@captures positive? "," with_context "," compile_expr ","Compiler  tokens "," with_context  prepend "]}," RuboCop NodePattern Compiler initialize":{"type":"method","name":"initialize","children":[],"call":[" run "]}," RuboCop ErrorWithAnalyzedFileLocation message":{"type":"method","name":"message","children":[],"call":[" cause inspect "," cause "]}," RuboCop ErrorWithAnalyzedFileLocation column":{"type":"method","name":"column","children":[],"call":[]}," RuboCop ErrorWithAnalyzedFileLocation line":{"type":"method","name":"line","children":[],"call":[]}," RuboCop ErrorWithAnalyzedFileLocation initialize":{"type":"method","name":"initialize","children":[],"call":["node loc ","node is_a? "]}," RuboCop AST Traversal on_numblock":{"type":"method","name":"on_numblock","children":[],"call":[" send ","child type ","children [] ","node children ","children []  type ","children [] ren [] ","node children  [] ","node children [] ren ","node node children  "]}," RuboCop AST Traversal on_case":{"type":"method","name":"on_case","children":[],"call":[" send ","child type ","node children each ","node children "]}," RuboCop AST Traversal on_block":{"type":"method","name":"on_block","children":[],"call":[" send ","child type ","children [] "," on_args ","node children ","children []  type ","children [] ren [] ","node children  [] ","node children [] ren ","node node children  "]}," RuboCop AST Traversal on_while":{"type":"method","name":"on_while","children":[],"call":[" send ","child type ","children [] ","node children ","children []  type ","children [] ren [] ","node children  [] ","node children [] ren ","node node children  "]}," RuboCop AST Traversal on_if":{"type":"method","name":"on_if","children":[],"call":[" send ","child type ","children [] ","node children ","children []  type ","children [] ren [] ","node children  [] ","node children [] ren ","node node children  "]}," RuboCop AST Traversal on_defs":{"type":"method","name":"on_defs","children":[],"call":[" send ","child type ","children [] "," on_args ","node children ","children []  type ","children [] ren [] ","node children  [] ","node children [] ren ","node node children  "]}," RuboCop AST Traversal on_op_asgn":{"type":"method","name":"on_op_asgn","children":[],"call":[" send ","child type ","children [] ","node children ","children []  type ","children [] ren [] ","node children  [] ","node children [] ren ","node node children  "]}," RuboCop AST Traversal on_send":{"type":"method","name":"on_send","children":[],"call":[" send ","child type ","i == ","node children each_with_index ","node children "]}," RuboCop AST Traversal on_def":{"type":"method","name":"on_def","children":[],"call":[" send ","child type ","children [] "," on_args ","node children ","children []  type ","children [] ren [] ","node children  [] ","node children [] ren ","node node children  "]}," RuboCop AST Traversal on_class":{"type":"method","name":"on_class","children":[],"call":[" send ","child type ","children [] ","node children ","children []  type ","children [] ren [] ","node children  [] ","node children [] ren ","node node children  "]}," RuboCop AST Traversal on_casgn":{"type":"method","name":"on_casgn","children":[],"call":[" send ","child type ","children [] ","node children ","children []  type ","children [] ren [] ","node children  [] ","node children [] ren ","node node children  "]}," RuboCop AST Traversal on_const":{"type":"method","name":"on_const","children":[],"call":[" send ","child type ","node children [] ","node children ","node children []  type ","node node children [] ren [] ","node node children [] ren "]}," RuboCop AST Traversal walk":{"type":"method","name":"walk","children":[],"call":[" send ","node type ","node nil? ","TYPE_TO_METHOD  [] "]}," RuboCop AST Sexp s":{"type":"method","name":"s","children":[],"call":["Node  new ","klass new ","Builder NODE_MAP  [] "]}," RuboCop AST Node parent_module_name_for_block":{"type":"method","name":"parent_module_name_for_block","children":[],"call":[" new_class_or_module_block? ! "," new_class_or_module_block? ","receiver const_name ","receiver const_type? ","ancestor receiver ","ancestor method? ","ancestor receiver  const_name ","ancestor receiver  const_type? ","ancestor ancestor receiver  "]}," RuboCop AST Node parent_module_name_for_sclass":{"type":"method","name":"parent_module_name_for_sclass","children":[],"call":["sclass_node parent_module_name ","subject self_type? ","subject const_name ","subject const_type? ","sclass_node children [] ","sclass_node children ","sclass_node children []  self_type? ","sclass_node children []  const_name ","sclass_node children []  const_type? "]}," RuboCop AST Node parent_module_name_part":{"type":"method","name":"parent_module_name_part","children":[],"call":[" parent_module_name_for_block "," parent_module_name_for_sclass ","node defined_module_name ","node type "]}," RuboCop AST Node while_until_value_used?":{"type":"method","name":"while_until_value_used?","children":[],"call":[" sibling_index zero? "," sibling_index "]}," RuboCop AST Node case_if_value_used?":{"type":"method","name":"case_if_value_used?","children":[],"call":[" parent value_used? "," parent "," sibling_index zero? "," sibling_index "]}," RuboCop AST Node for_value_used?":{"type":"method","name":"for_value_used?","children":[],"call":[" parent value_used? "," parent "," sibling_index == "," sibling_index "]}," RuboCop AST Node begin_value_used?":{"type":"method","name":"begin_value_used?","children":[],"call":[" parent value_used? "," parent "," sibling_index == "," parent children size - "," parent children size "," parent children "," sibling_index "]}," RuboCop AST Node visit_ancestors":{"type":"method","name":"visit_ancestors","children":[],"call":["types include? ","current_node type ","types empty? ","last_node parent ","last_node parent  type "]}," RuboCop AST Node visit_descendants":{"type":"method","name":"visit_descendants","children":[],"call":["child visit_descendants ","types include? ","child type ","types empty? "," each_child_node "]}," RuboCop AST Node pure?":{"type":"method","name":"pure?","children":[],"call":[" child_nodes all? "," child_nodes "," type "]}," RuboCop AST Node value_used?":{"type":"method","name":"value_used?","children":[],"call":[" while_until_value_used? "," case_if_value_used? "," for_value_used? "," begin_value_used? "," parent value_used? "," parent "," parent type "," parent nil? "]}," RuboCop AST Node guard_clause?":{"type":"method","name":"guard_clause?","children":[],"call":["node match_guard_clause? "," rhs "," or_type? "," and_type? "," rhs  match_guard_clause? "]}," RuboCop AST Node range_type?":{"type":"method","name":"range_type?","children":[],"call":[" erange_type? "," irange_type? "]}," RuboCop AST Node numeric_type?":{"type":"method","name":"numeric_type?","children":[],"call":[" float_type? "," int_type? "," complex_type? "," rational_type? "]}," RuboCop AST Node boolean_type?":{"type":"method","name":"boolean_type?","children":[],"call":[" false_type? "," true_type? "]}," RuboCop AST Node argument?":{"type":"method","name":"argument?","children":[],"call":[" parent arguments include? "," parent arguments "," parent "]}," RuboCop AST Node chained?":{"type":"method","name":"chained?","children":[],"call":[" eql? "," parent receiver "," parent "]}," RuboCop AST Node call_type?":{"type":"method","name":"call_type?","children":[],"call":[" csend_type? "," send_type? "]}," RuboCop AST Node parenthesized_call?":{"type":"method","name":"parenthesized_call?","children":[],"call":[" loc begin is? "," loc begin "," loc "," loc respond_to? "]}," RuboCop AST Node operator_keyword?":{"type":"method","name":"operator_keyword?","children":[],"call":["OPERATOR_KEYWORDS  include? "," type "]}," RuboCop AST Node special_keyword?":{"type":"method","name":"special_keyword?","children":[],"call":["SPECIAL_KEYWORDS  include? "," source "]}," RuboCop AST Node keyword?":{"type":"method","name":"keyword?","children":[],"call":[" loc operator is? "," type to_s "," type "," loc operator "," loc ","OPERATOR_KEYWORDS  include? ! ","OPERATOR_KEYWORDS  include? ","KEYWORDS  include? "," prefix_not? "," send_type? "," special_keyword? "]}," RuboCop AST Node conditional?":{"type":"method","name":"conditional?","children":[],"call":["CONDITIONALS  include? "," type "]}," RuboCop AST Node basic_conditional?":{"type":"method","name":"basic_conditional?","children":[],"call":["BASIC_CONDITIONALS  include? "," type "]}," RuboCop AST Node assignment?":{"type":"method","name":"assignment?","children":[],"call":["ASSIGNMENTS  include? "," type "]}," RuboCop AST Node shorthand_asgn?":{"type":"method","name":"shorthand_asgn?","children":[],"call":["SHORTHAND_ASSIGNMENTS  include? "," type "]}," RuboCop AST Node equals_asgn?":{"type":"method","name":"equals_asgn?","children":[],"call":["EQUALS_ASSIGNMENTS  include? "," type "]}," RuboCop AST Node reference?":{"type":"method","name":"reference?","children":[],"call":["REFERENCES  include? "," type "]}," RuboCop AST Node variable?":{"type":"method","name":"variable?","children":[],"call":["VARIABLES  include? "," type "]}," RuboCop AST Node immutable_literal?":{"type":"method","name":"immutable_literal?","children":[],"call":["IMMUTABLE_LITERALS  include? "," type "]}," RuboCop AST Node mutable_literal?":{"type":"method","name":"mutable_literal?","children":[],"call":["MUTABLE_LITERALS  include? "," type "]}," RuboCop AST Node falsey_literal?":{"type":"method","name":"falsey_literal?","children":[],"call":["FALSEY_LITERALS  include? "," type "]}," RuboCop AST Node truthy_literal?":{"type":"method","name":"truthy_literal?","children":[],"call":["TRUTHY_LITERALS  include? "," type "]}," RuboCop AST Node basic_literal?":{"type":"method","name":"basic_literal?","children":[],"call":["BASIC_LITERALS  include? "," type "]}," RuboCop AST Node literal?":{"type":"method","name":"literal?","children":[],"call":["LITERALS  include? "," type "]}," RuboCop AST Node empty_source?":{"type":"method","name":"empty_source?","children":[],"call":[" source_length zero? "," source_length "]}," RuboCop AST Node single_line?":{"type":"method","name":"single_line?","children":[],"call":[" line_count == "," line_count "]}," RuboCop AST Node multiline?":{"type":"method","name":"multiline?","children":[],"call":[" line_count > "," line_count "]}," RuboCop AST Node parent_module_name":{"type":"method","name":"parent_module_name","children":[],"call":["result empty? ","(send\n  (lvar :ancestors) :map) compact reverse join ","(send\n  (lvar :ancestors) :map) compact reverse ","(send\n  (lvar :ancestors) :map) compact "," parent_module_name_part ","ancestors map "," each_ancestor ","(send\n  (lvar :ancestors) :map) compact reverse join  empty? ","(send\n  (lvar : each_ancestor ) :map) compact reverse join ","(send\n  (lvar : each_ancestor ) :map) compact reverse ","(send\n  (lvar : each_ancestor ) :map) compact "," each_ancestor  map "]}," RuboCop AST Node defined_module_name":{"type":"method","name":"defined_module_name","children":[],"call":["const const_name "," defined_module "," defined_module   defined_module _name "]}," RuboCop AST Node defined_module":{"type":"method","name":"defined_module","children":[],"call":[" s "," defined_module0 "]}," RuboCop AST Node const_name":{"type":"method","name":"const_name","children":[],"call":["name to_s ","namespace const_name ","namespace cbase_type? ! ","namespace cbase_type? "," const_type? "]}," RuboCop AST Node source_length":{"type":"method","name":"source_length","children":[],"call":[" source_range size "," source_range "]}," RuboCop AST Node nonempty_line_count":{"type":"method","name":"nonempty_line_count","children":[],"call":[" source lines grep size "," source lines grep "," source lines "," source "]}," RuboCop AST Node line_count":{"type":"method","name":"line_count","children":[],"call":[" source_range last_line - + "," source_range last_line - "," source_range first_line "," source_range "," source_range last_line "]}," RuboCop AST Node last_line":{"type":"method","name":"last_line","children":[],"call":[" loc last_line "," loc "]}," RuboCop AST Node first_line":{"type":"method","name":"first_line","children":[],"call":[" loc line "," loc "]}," RuboCop AST Node source_range":{"type":"method","name":"source_range","children":[],"call":[" loc expression "," loc "]}," RuboCop AST Node source":{"type":"method","name":"source","children":[],"call":[" loc expression source "," loc expression "," loc "]}," RuboCop AST Node each_node":{"type":"method","name":"each_node","children":[],"call":[" visit_descendants ","types include? "," type ","types empty? "," to_enum "," __method__ "," block_given? "]}," RuboCop AST Node descendants":{"type":"method","name":"descendants","children":[],"call":[" each_descendant to_a "," each_descendant "]}," RuboCop AST Node each_descendant":{"type":"method","name":"each_descendant","children":[],"call":[" visit_descendants "," to_enum "," __method__ "," block_given? "]}," RuboCop AST Node child_nodes":{"type":"method","name":"child_nodes","children":[],"call":[" each_child_node to_a "," each_child_node "]}," RuboCop AST Node each_child_node":{"type":"method","name":"each_child_node","children":[],"call":["types include? ","child type ","types empty? ","child is_a? "," children each "," children "," to_enum "," __method__ "," block_given? "]}," RuboCop AST Node ancestors":{"type":"method","name":"ancestors","children":[],"call":[" each_ancestor to_a "," each_ancestor "]}," RuboCop AST Node each_ancestor":{"type":"method","name":"each_ancestor","children":[],"call":[" visit_ancestors "," to_enum "," __method__ "," block_given? "]}," RuboCop AST Node node_parts":{"type":"method","name":"node_parts","children":[],"call":[" to_a "]}," RuboCop AST Node sibling_index":{"type":"method","name":"sibling_index","children":[],"call":["sibling equal? "," parent "]}," RuboCop AST Node updated":{"type":"method","name":"updated","children":[],"call":["klass new ","RuboCop AST Builder NODE_MAP  [] ","properties [] "]}," RuboCop AST Node complete?":{"type":"method","name":"complete?","children":[],"call":["@mutable_attributes frozen? "]}," RuboCop AST Node complete!":{"type":"method","name":"complete!","children":[],"call":[" each_child_node ","@mutable_attributes freeze "]}," RuboCop AST Node parent=":{"type":"method","name":"parent=","children":[],"call":["@mutable_attributes []= "]}," RuboCop AST Node parent":{"type":"method","name":"parent","children":[],"call":["@mutable_attributes [] "]}," RuboCop AST Node initialize":{"type":"method","name":"initialize","children":[],"call":["child_node parent= ","child_node complete? "," each_child_node "]}," RuboCop AST YieldNode node_parts":{"type":"method","name":"node_parts","children":[],"call":[" to_a "]}," RuboCop AST WhileNode do?":{"type":"method","name":"do?","children":[],"call":[" loc begin "," loc "]}," RuboCop AST WhileNode inverse_keyword":{"type":"method","name":"inverse_keyword","children":[],"call":[]}," RuboCop AST WhileNode keyword":{"type":"method","name":"keyword","children":[],"call":[]}," RuboCop AST WhenNode body":{"type":"method","name":"body","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST WhenNode then?":{"type":"method","name":"then?","children":[],"call":[" loc begin "," loc "]}," RuboCop AST WhenNode branch_index":{"type":"method","name":"branch_index","children":[],"call":[" parent when_branches index "," parent when_branches "," parent "]}," RuboCop AST WhenNode each_condition":{"type":"method","name":"each_condition","children":[],"call":[" conditions each "," conditions "," conditions to_enum "," __method__ "," block_given? "]}," RuboCop AST WhenNode conditions":{"type":"method","name":"conditions","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST UntilNode do?":{"type":"method","name":"do?","children":[],"call":[" loc begin "," loc "]}," RuboCop AST UntilNode inverse_keyword":{"type":"method","name":"inverse_keyword","children":[],"call":[]}," RuboCop AST UntilNode keyword":{"type":"method","name":"keyword","children":[],"call":[]}," RuboCop AST SuperNode node_parts":{"type":"method","name":"node_parts","children":[],"call":[" to_a "]}," RuboCop AST StrNode heredoc?":{"type":"method","name":"heredoc?","children":[],"call":[" loc is_a? "," loc "]}," RuboCop AST SelfClassNode body":{"type":"method","name":"body","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST SelfClassNode identifier":{"type":"method","name":"identifier","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST ReturnNode arguments":{"type":"method","name":"arguments","children":[],"call":[" node_parts "," node_parts first children "," node_parts first "," node_parts first begin_type? "," node_parts one? "]}," RuboCop AST RetryNode arguments":{"type":"method","name":"arguments","children":[],"call":[]}," RuboCop AST ResbodyNode exception_variable":{"type":"method","name":"exception_variable","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST ResbodyNode body":{"type":"method","name":"body","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST RegexpNode content":{"type":"method","name":"content","children":[],"call":[" children select map join "," children select map "," children select "," children "]}," RuboCop AST RegexpNode regopt":{"type":"method","name":"regopt","children":[],"call":[" children last "," children "]}," RuboCop AST RegexpNode to_regexp":{"type":"method","name":"to_regexp","children":[],"call":["Regexp  new "," content ","(send\n  (send\n    (send nil :regopt) :children) :map) inject ","OPTIONS  [] "," regopt children map "," regopt children "," regopt ","OPTIONS  fetch "," options "," (send\n  (send\n    (send nil :regopt) :children) :map) inject s "]}," RuboCop AST RangeNode end":{"type":"method","name":"end","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST RangeNode begin":{"type":"method","name":"begin","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST PairNode value_on_new_line?":{"type":"method","name":"value_on_new_line?","children":[],"call":[" key loc line != "," value loc line "," value loc "," value "," key loc line "," key loc "," key "]}," RuboCop AST PairNode inverse_delimiter":{"type":"method","name":"inverse_delimiter","children":[],"call":[" hash_rocket? "]}," RuboCop AST PairNode delimiter":{"type":"method","name":"delimiter","children":[],"call":[" hash_rocket? "]}," RuboCop AST PairNode colon?":{"type":"method","name":"colon?","children":[],"call":[" loc operator is? "," loc operator "," loc "]}," RuboCop AST PairNode hash_rocket?":{"type":"method","name":"hash_rocket?","children":[],"call":[" loc operator is? "," loc operator "," loc "]}," RuboCop AST OrNode inverse_operator":{"type":"method","name":"inverse_operator","children":[],"call":[" logical_operator? "]}," RuboCop AST OrNode alternate_operator":{"type":"method","name":"alternate_operator","children":[],"call":[" logical_operator? "]}," RuboCop AST ModuleNode body":{"type":"method","name":"body","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST ModuleNode identifier":{"type":"method","name":"identifier","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST PredicateOperatorNode semantic_operator?":{"type":"method","name":"semantic_operator?","children":[],"call":[" operator == "," operator "]}," RuboCop AST PredicateOperatorNode logical_operator?":{"type":"method","name":"logical_operator?","children":[],"call":[" operator == "," operator "]}," RuboCop AST PredicateOperatorNode operator":{"type":"method","name":"operator","children":[],"call":[" loc operator source "," loc operator "," loc "]}," RuboCop AST ParameterizedNode block_argument?":{"type":"method","name":"block_argument?","children":[],"call":[" last_argument blockarg_type? "," last_argument "," last_argument block_pass_type? "," arguments? "]}," RuboCop AST ParameterizedNode splat_argument?":{"type":"method","name":"splat_argument?","children":[],"call":[" arguments any? "," arguments "," arguments? "]}," RuboCop AST ParameterizedNode arguments?":{"type":"method","name":"arguments?","children":[],"call":[" arguments empty? ! "," arguments empty? "," arguments "]}," RuboCop AST ParameterizedNode last_argument":{"type":"method","name":"last_argument","children":[],"call":[" arguments [] "," arguments "]}," RuboCop AST ParameterizedNode first_argument":{"type":"method","name":"first_argument","children":[],"call":[" arguments [] "," arguments "]}," RuboCop AST ParameterizedNode parenthesized?":{"type":"method","name":"parenthesized?","children":[],"call":[" loc end "," loc "]}," RuboCop AST NumericNode sign?":{"type":"method","name":"sign?","children":[],"call":[" source match "," source "]}," RuboCop AST ModifierNode modifier_form?":{"type":"method","name":"modifier_form?","children":[],"call":[" loc end nil? "," loc end "," loc "]}," RuboCop AST MethodIdentifierPredicates prefix_bang?":{"type":"method","name":"prefix_bang?","children":[],"call":[" loc selector is? "," loc selector "," loc "," negation_method? "]}," RuboCop AST MethodIdentifierPredicates prefix_not?":{"type":"method","name":"prefix_not?","children":[],"call":[" loc selector is? "," loc selector "," loc "," negation_method? "]}," RuboCop AST MethodIdentifierPredicates negation_method?":{"type":"method","name":"negation_method?","children":[],"call":[" method_name == "," method_name "," receiver "]}," RuboCop AST MethodIdentifierPredicates const_receiver?":{"type":"method","name":"const_receiver?","children":[],"call":[" receiver "]}," RuboCop AST MethodIdentifierPredicates self_receiver?":{"type":"method","name":"self_receiver?","children":[],"call":[" receiver "]}," RuboCop AST MethodIdentifierPredicates camel_case_method?":{"type":"method","name":"camel_case_method?","children":[],"call":[" method_name to_s =~ "," method_name to_s "," method_name "]}," RuboCop AST MethodIdentifierPredicates bang_method?":{"type":"method","name":"bang_method?","children":[],"call":[" method_name to_s end_with? "," method_name to_s "," method_name "]}," RuboCop AST MethodIdentifierPredicates predicate_method?":{"type":"method","name":"predicate_method?","children":[],"call":[" method_name to_s end_with? "," method_name to_s "," method_name "]}," RuboCop AST MethodIdentifierPredicates enumerator_method?":{"type":"method","name":"enumerator_method?","children":[],"call":[" method_name to_s start_with? "," method_name to_s "," method_name ","ENUMERATOR_METHODS  include? "]}," RuboCop AST MethodIdentifierPredicates assignment_method?":{"type":"method","name":"assignment_method?","children":[],"call":[" method_name to_s end_with? "," method_name to_s "," method_name "," comparison_method? ! "," comparison_method? "]}," RuboCop AST MethodIdentifierPredicates comparison_method?":{"type":"method","name":"comparison_method?","children":[],"call":["Node COMPARISON_OPERATORS  include? "," method_name "]}," RuboCop AST MethodIdentifierPredicates operator_method?":{"type":"method","name":"operator_method?","children":[],"call":["OPERATOR_METHODS  include? "," method_name "]}," RuboCop AST MethodIdentifierPredicates method?":{"type":"method","name":"method?","children":[],"call":[" method_name == ","name to_sym "," method_name "]}," RuboCop AST MethodDispatchNode root_node?":{"type":"method","name":"root_node?","children":[],"call":["node parent nil? ","node parent "]}," RuboCop AST MethodDispatchNode macro_kwbegin_wrapper?":{"type":"method","name":"macro_kwbegin_wrapper?","children":[],"call":[" macro_scope? ","parent kwbegin_type? "]}," RuboCop AST MethodDispatchNode binary_operation?":{"type":"method","name":"binary_operation?","children":[],"call":[" loc expression begin_pos != "," loc selector begin_pos "," loc selector "," loc "," loc expression begin_pos "," loc expression "," operator_method? "," selector begin_pos "," selector "]}," RuboCop AST MethodDispatchNode unary_operation?":{"type":"method","name":"unary_operation?","children":[],"call":[" loc expression begin_pos == "," loc selector begin_pos "," loc selector "," loc "," loc expression begin_pos "," loc expression "," operator_method? "," selector begin_pos "," selector "]}," RuboCop AST MethodDispatchNode lambda_literal?":{"type":"method","name":"lambda_literal?","children":[],"call":[" loc expression source == "," loc expression source "," loc expression "," loc "," block_literal? "]}," RuboCop AST MethodDispatchNode lambda?":{"type":"method","name":"lambda?","children":[],"call":[" command? "," block_literal? "]}," RuboCop AST MethodDispatchNode def_modifier?":{"type":"method","name":"def_modifier?","children":[],"call":["(self) any? "," each_descendant "," send_type? "," each_child_node any? "," each_child_node "," adjacent_def_modifier? "," def_modifier ! ! "," def_modifier ! "," def_modifier "]}," RuboCop AST MethodDispatchNode arithmetic_operation?":{"type":"method","name":"arithmetic_operation?","children":[],"call":["ARITHMETIC_OPERATORS  include? "," method_name "]}," RuboCop AST MethodDispatchNode block_literal?":{"type":"method","name":"block_literal?","children":[],"call":[" eql? "," parent send_node "," parent "]}," RuboCop AST MethodDispatchNode implicit_call?":{"type":"method","name":"implicit_call?","children":[],"call":[" loc selector ! "," loc selector "," loc "," method? "," selector ! "," selector "]}," RuboCop AST MethodDispatchNode const_receiver?":{"type":"method","name":"const_receiver?","children":[],"call":[" receiver "]}," RuboCop AST MethodDispatchNode self_receiver?":{"type":"method","name":"self_receiver?","children":[],"call":[" receiver "]}," RuboCop AST MethodDispatchNode safe_navigation?":{"type":"method","name":"safe_navigation?","children":[],"call":[" loc dot is? "," loc dot "," loc "," loc respond_to? "]}," RuboCop AST MethodDispatchNode double_colon?":{"type":"method","name":"double_colon?","children":[],"call":[" loc dot is? "," loc dot "," loc "," loc respond_to? "]}," RuboCop AST MethodDispatchNode dot?":{"type":"method","name":"dot?","children":[],"call":[" loc dot is? "," loc dot "," loc "," loc respond_to? "]}," RuboCop AST MethodDispatchNode setter_method?":{"type":"method","name":"setter_method?","children":[],"call":[" loc operator "," loc "," loc respond_to? "]}," RuboCop AST MethodDispatchNode command?":{"type":"method","name":"command?","children":[],"call":[" method? "," receiver ! "," receiver "]}," RuboCop AST MethodDispatchNode special_modifier?":{"type":"method","name":"special_modifier?","children":[],"call":["SPECIAL_MODIFIERS  include? "," source "," bare_access_modifier? "]}," RuboCop AST MethodDispatchNode non_bare_access_modifier?":{"type":"method","name":"non_bare_access_modifier?","children":[],"call":[" non_bare_access_modifier_declaration? "," macro? "]}," RuboCop AST MethodDispatchNode bare_access_modifier?":{"type":"method","name":"bare_access_modifier?","children":[],"call":[" bare_access_modifier_declaration? "," macro? "]}," RuboCop AST MethodDispatchNode access_modifier?":{"type":"method","name":"access_modifier?","children":[],"call":[" non_bare_access_modifier? "," bare_access_modifier? "]}," RuboCop AST MethodDispatchNode macro?":{"type":"method","name":"macro?","children":[],"call":[" macro_scope? "," receiver ! "," receiver "," in_macro_scope? "]}," RuboCop AST MethodDispatchNode block_node":{"type":"method","name":"block_node","children":[],"call":[" parent "," block_literal? "]}," RuboCop AST MethodDispatchNode arguments":{"type":"method","name":"arguments","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST MethodDispatchNode method_name":{"type":"method","name":"method_name","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST MethodDispatchNode receiver":{"type":"method","name":"receiver","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST HashElementNode HashElementDelta keyword_splat?":{"type":"method","name":"keyword_splat?","children":[],"call":["(send nil :first) any? "," second "," first "]}," RuboCop AST HashElementNode HashElementDelta delta":{"type":"method","name":"delta","children":[],"call":["first last_column - ","second last_column ","first last_column ","first column - ","second column ","first column "]}," RuboCop AST HashElementNode HashElementDelta valid_argument_types?":{"type":"method","name":"valid_argument_types?","children":[],"call":["argument kwsplat_type? ","argument pair_type? ","(send nil :first) all? "," second "," first "]}," RuboCop AST HashElementNode HashElementDelta delimiter_delta":{"type":"method","name":"delimiter_delta","children":[],"call":[" delta "," second loc operator "," second loc "," second "," first loc operator "," first loc "," first "," first delimiter != "," second delimiter "," first delimiter "," first same_line? "]}," RuboCop AST HashElementNode HashElementDelta value_delta":{"type":"method","name":"value_delta","children":[],"call":[" delta "," second value loc "," second value "," second "," first value loc "," first value "," first "," keyword_splat? "," first same_line? "]}," RuboCop AST HashElementNode HashElementDelta key_delta":{"type":"method","name":"key_delta","children":[],"call":[" delta "," second key loc "," second key "," second "," first key loc "," first key "," first ","alignment == "," keyword_splat? "," first same_line? "]}," RuboCop AST HashElementNode HashElementDelta initialize":{"type":"method","name":"initialize","children":[],"call":[" raise "," valid_argument_types? "]}," RuboCop AST HashElementNode delimiter_delta":{"type":"method","name":"delimiter_delta","children":[],"call":["HashElementDelta  new delimiter_delta ","HashElementDelta  new "]}," RuboCop AST HashElementNode value_delta":{"type":"method","name":"value_delta","children":[],"call":["HashElementDelta  new value_delta ","HashElementDelta  new "]}," RuboCop AST HashElementNode key_delta":{"type":"method","name":"key_delta","children":[],"call":["HashElementDelta  new key_delta ","HashElementDelta  new "]}," RuboCop AST HashElementNode same_line?":{"type":"method","name":"same_line?","children":[],"call":[" loc line == ","other loc last_line ","other loc "," loc line "," loc "," loc last_line == ","other loc line "," loc last_line "]}," RuboCop AST HashElementNode value":{"type":"method","name":"value","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST HashElementNode key":{"type":"method","name":"key","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST ConditionalNode body":{"type":"method","name":"body","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST ConditionalNode condition":{"type":"method","name":"condition","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST ConditionalNode multiline_condition?":{"type":"method","name":"multiline_condition?","children":[],"call":[" single_line_condition? ! "," single_line_condition? "]}," RuboCop AST ConditionalNode single_line_condition?":{"type":"method","name":"single_line_condition?","children":[],"call":[" loc keyword line == "," condition source_range line "," condition source_range "," condition "," loc keyword line "," loc keyword "," loc "]}," RuboCop AST BinaryOperatorNode conditions":{"type":"method","name":"conditions","children":[],"call":["collection << ","collection concat ","side conditions ","side operator_keyword? ","(lvar :lhs) each_with_object ","rhs children first ","rhs children ","rhs begin_type? ","lhs children first ","lhs children ","lhs begin_type? ","(lvar :lhs children first ) each_with_object ","rhs children first  children first ","rhs children first  children ","rhs children first  begin_type? ","lhs children first  children first ","lhs children first  children ","lhs children first  begin_type? "]}," RuboCop AST BinaryOperatorNode rhs":{"type":"method","name":"rhs","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST BinaryOperatorNode lhs":{"type":"method","name":"lhs","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST BasicLiteralNode value":{"type":"method","name":"value","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST KeywordSplatNode node_parts":{"type":"method","name":"node_parts","children":[],"call":[]}," RuboCop AST KeywordSplatNode operator":{"type":"method","name":"operator","children":[],"call":[]}," RuboCop AST KeywordSplatNode colon?":{"type":"method","name":"colon?","children":[],"call":[]}," RuboCop AST KeywordSplatNode hash_rocket?":{"type":"method","name":"hash_rocket?","children":[],"call":[]}," RuboCop AST IfNode each_branch":{"type":"method","name":"each_branch","children":[],"call":[" branches each "," branches "," branches to_enum "," __method__ "," block_given? "]}," RuboCop AST IfNode branches":{"type":"method","name":"branches","children":[],"call":["branches concat "," else_branch "," else_branch branches "," elsif_conditional? "," if_branch "," else? "," else? ! "," ternary? "]}," RuboCop AST IfNode node_parts":{"type":"method","name":"node_parts","children":[],"call":[" unless? "]}," RuboCop AST IfNode else_branch":{"type":"method","name":"else_branch","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST IfNode if_branch":{"type":"method","name":"if_branch","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST IfNode elsif_conditional?":{"type":"method","name":"elsif_conditional?","children":[],"call":[" else_branch "]}," RuboCop AST IfNode nested_conditional?":{"type":"method","name":"nested_conditional?","children":[],"call":["nested elsif? ","branch each_node "," node_parts [] compact each "," node_parts [] compact "," node_parts [] "," node_parts "]}," RuboCop AST IfNode modifier_form?":{"type":"method","name":"modifier_form?","children":[],"call":[" unless? "," if? "]}," RuboCop AST IfNode inverse_keyword":{"type":"method","name":"inverse_keyword","children":[],"call":[" keyword == "," keyword "]}," RuboCop AST IfNode keyword":{"type":"method","name":"keyword","children":[],"call":[" loc keyword source "," loc keyword "," loc "," ternary? "]}," RuboCop AST IfNode ternary?":{"type":"method","name":"ternary?","children":[],"call":[" loc respond_to? "," loc "]}," RuboCop AST IfNode else?":{"type":"method","name":"else?","children":[],"call":[" loc else "," loc "," loc respond_to? "]}," RuboCop AST IfNode elsif?":{"type":"method","name":"elsif?","children":[],"call":[" keyword == "," keyword "]}," RuboCop AST IfNode unless?":{"type":"method","name":"unless?","children":[],"call":[" keyword == "," keyword "]}," RuboCop AST IfNode if?":{"type":"method","name":"if?","children":[],"call":[" keyword == "," keyword "]}," RuboCop AST HashNode braces?":{"type":"method","name":"braces?","children":[],"call":[" loc end "," loc "]}," RuboCop AST HashNode mixed_delimiters?":{"type":"method","name":"mixed_delimiters?","children":[],"call":[" pairs map uniq size > "," pairs map uniq size "," pairs map uniq "," pairs map "," pairs "]}," RuboCop AST HashNode pairs_on_same_line?":{"type":"method","name":"pairs_on_same_line?","children":[],"call":["first same_line? "," pairs each_cons any? "," pairs each_cons "," pairs "]}," RuboCop AST HashNode each_value":{"type":"method","name":"each_value","children":[],"call":[" pairs map each "," pairs map "," pairs "," pairs map to_enum "," block_given? "]}," RuboCop AST HashNode values":{"type":"method","name":"values","children":[],"call":[" each_pair map "," each_pair "]}," RuboCop AST HashNode each_key":{"type":"method","name":"each_key","children":[],"call":[" pairs map each "," pairs map "," pairs "," pairs map to_enum "," block_given? "]}," RuboCop AST HashNode keys":{"type":"method","name":"keys","children":[],"call":[" each_key to_a "," each_key "]}," RuboCop AST HashNode each_pair":{"type":"method","name":"each_pair","children":[],"call":[" each_child_node "," each_child_node to_enum "," block_given? "]}," RuboCop AST HashNode empty?":{"type":"method","name":"empty?","children":[],"call":[" children empty? "," children "]}," RuboCop AST HashNode pairs":{"type":"method","name":"pairs","children":[],"call":[" each_pair to_a "," each_pair "]}," RuboCop AST ForwardArgsNode to_a":{"type":"method","name":"to_a","children":[],"call":[]}," RuboCop AST ForNode body":{"type":"method","name":"body","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST ForNode collection":{"type":"method","name":"collection","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST ForNode variable":{"type":"method","name":"variable","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST ForNode void_context?":{"type":"method","name":"void_context?","children":[],"call":[]}," RuboCop AST ForNode do?":{"type":"method","name":"do?","children":[],"call":[" loc begin "," loc "]}," RuboCop AST ForNode keyword":{"type":"method","name":"keyword","children":[],"call":[]}," RuboCop AST EnsureNode body":{"type":"method","name":"body","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST DefinedNode node_parts":{"type":"method","name":"node_parts","children":[],"call":[" to_a "]}," RuboCop AST DefNode node_parts":{"type":"method","name":"node_parts","children":[],"call":[" to_a reverse "," to_a "]}," RuboCop AST DefNode receiver":{"type":"method","name":"receiver","children":[],"call":[" node_parts [] "," node_parts "," children [] "," children "]}," RuboCop AST DefNode body":{"type":"method","name":"body","children":[],"call":[" node_parts [] "," node_parts "," children [] "," children "]}," RuboCop AST DefNode arguments":{"type":"method","name":"arguments","children":[],"call":[" node_parts [] "," node_parts "," children [] "," children "]}," RuboCop AST DefNode method_name":{"type":"method","name":"method_name","children":[],"call":[" node_parts [] "," node_parts "," children [] "," children "]}," RuboCop AST DefNode argument_forwarding?":{"type":"method","name":"argument_forwarding?","children":[],"call":[" arguments any? "," arguments "]}," RuboCop AST DefNode void_context?":{"type":"method","name":"void_context?","children":[],"call":[" assignment_method? "," method? "]}," RuboCop AST ClassNode body":{"type":"method","name":"body","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST ClassNode parent_class":{"type":"method","name":"parent_class","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST ClassNode identifier":{"type":"method","name":"identifier","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST CaseNode else?":{"type":"method","name":"else?","children":[],"call":[" loc else "," loc "]}," RuboCop AST CaseNode else_branch":{"type":"method","name":"else_branch","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST CaseNode when_branches":{"type":"method","name":"when_branches","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST CaseNode each_when":{"type":"method","name":"each_when","children":[],"call":[" when_branches each "," when_branches "," when_branches to_enum "," __method__ "," block_given? "]}," RuboCop AST CaseNode keyword":{"type":"method","name":"keyword","children":[],"call":[]}," RuboCop AST CaseMatchNode else?":{"type":"method","name":"else?","children":[],"call":[" loc else nil? ! "," loc else nil? "," loc else "," loc "]}," RuboCop AST CaseMatchNode else_branch":{"type":"method","name":"else_branch","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST CaseMatchNode in_pattern_branches":{"type":"method","name":"in_pattern_branches","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST CaseMatchNode each_in_pattern":{"type":"method","name":"each_in_pattern","children":[],"call":[" in_pattern_branches each "," in_pattern_branches "," in_pattern_branches to_enum "," __method__ "," block_given? "]}," RuboCop AST CaseMatchNode keyword":{"type":"method","name":"keyword","children":[],"call":[]}," RuboCop AST BreakNode arguments":{"type":"method","name":"arguments","children":[],"call":[]}," RuboCop AST BlockNode void_context?":{"type":"method","name":"void_context?","children":[],"call":["VOID_CONTEXT_METHODS  include? "," method_name "]}," RuboCop AST BlockNode lambda?":{"type":"method","name":"lambda?","children":[],"call":[" send_node method? "," send_node "]}," RuboCop AST BlockNode multiline?":{"type":"method","name":"multiline?","children":[],"call":[" single_line? ! "," single_line? "]}," RuboCop AST BlockNode single_line?":{"type":"method","name":"single_line?","children":[],"call":[" loc begin line == "," loc end line "," loc end "," loc "," loc begin line "," loc begin "]}," RuboCop AST BlockNode closing_delimiter":{"type":"method","name":"closing_delimiter","children":[],"call":[" delimiters last "," delimiters "]}," RuboCop AST BlockNode opening_delimiter":{"type":"method","name":"opening_delimiter","children":[],"call":[" delimiters first "," delimiters "]}," RuboCop AST BlockNode delimiters":{"type":"method","name":"delimiters","children":[],"call":["(send\n  (send\n    (send nil :loc) :begin) :source) freeze "," loc end source "," loc end "," loc "," loc begin source "," loc begin "]}," RuboCop AST BlockNode keywords?":{"type":"method","name":"keywords?","children":[],"call":[" loc end "," loc "]}," RuboCop AST BlockNode braces?":{"type":"method","name":"braces?","children":[],"call":[" loc end "," loc "]}," RuboCop AST BlockNode arguments?":{"type":"method","name":"arguments?","children":[],"call":[" arguments empty? ! "," arguments empty? "," arguments "]}," RuboCop AST BlockNode method_name":{"type":"method","name":"method_name","children":[],"call":[" send_node method_name "," send_node "]}," RuboCop AST BlockNode body":{"type":"method","name":"body","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST BlockNode arguments":{"type":"method","name":"arguments","children":[],"call":[" node_parts [] "," node_parts "," numblock_type? "," freeze "]}," RuboCop AST BlockNode send_node":{"type":"method","name":"send_node","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST ArrayNode bracketed?":{"type":"method","name":"bracketed?","children":[],"call":[" percent_literal? "," square_brackets? "]}," RuboCop AST ArrayNode percent_literal?":{"type":"method","name":"percent_literal?","children":[],"call":[" loc begin "," loc "," loc begin source =~ ","PERCENT_LITERAL_TYPES  [] "," loc begin source "]}," RuboCop AST ArrayNode square_brackets?":{"type":"method","name":"square_brackets?","children":[],"call":[" loc begin "," loc "]}," RuboCop AST ArrayNode each_value":{"type":"method","name":"each_value","children":[],"call":[" values each "," values "," to_enum "," __method__ "," block_given? "]}," RuboCop AST ArrayNode values":{"type":"method","name":"values","children":[],"call":[" each_child_node to_a "," each_child_node "]}," RuboCop AST ArgsNode empty_and_without_delimiters?":{"type":"method","name":"empty_and_without_delimiters?","children":[],"call":[" loc expression nil? "," loc expression "," loc "]}," RuboCop AST AndNode inverse_operator":{"type":"method","name":"inverse_operator","children":[],"call":[" logical_operator? "]}," RuboCop AST AndNode alternate_operator":{"type":"method","name":"alternate_operator","children":[],"call":[" logical_operator? "]}," RuboCop AST AliasNode new_identifier":{"type":"method","name":"new_identifier","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST AliasNode old_identifier":{"type":"method","name":"old_identifier","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST Builder node_klass":{"type":"method","name":"node_klass","children":[],"call":["NODE_MAP  [] "]}," RuboCop AST Builder string_value":{"type":"method","name":"string_value","children":[],"call":[" value "]}," RuboCop AST Builder n":{"type":"method","name":"n","children":[],"call":[" node_klass new "," node_klass "]}," RuboCop AST Token equal_sign?":{"type":"method","name":"equal_sign?","children":[],"call":["(sym :tEQL) include? "," type "]}," RuboCop AST Token end?":{"type":"method","name":"end?","children":[],"call":[" type == "," type "]}," RuboCop AST Token rescue_modifier?":{"type":"method","name":"rescue_modifier?","children":[],"call":[" type == "," type "]}," RuboCop AST Token comma?":{"type":"method","name":"comma?","children":[],"call":[" type == "," type "]}," RuboCop AST Token right_parens?":{"type":"method","name":"right_parens?","children":[],"call":[" type == "," type "]}," RuboCop AST Token left_parens?":{"type":"method","name":"left_parens?","children":[],"call":["(sym :tLPAREN) include? "," type ","LEFT_PAREN_TYPES  include? "]}," RuboCop AST Token right_curly_brace?":{"type":"method","name":"right_curly_brace?","children":[],"call":[" type == "," type "]}," RuboCop AST Token left_curly_brace?":{"type":"method","name":"left_curly_brace?","children":[],"call":[" type == "," type "]}," RuboCop AST Token left_brace?":{"type":"method","name":"left_brace?","children":[],"call":[" type == "," type "]}," RuboCop AST Token right_bracket?":{"type":"method","name":"right_bracket?","children":[],"call":[" type == "," type "]}," RuboCop AST Token left_bracket?":{"type":"method","name":"left_bracket?","children":[],"call":["(sym :tLBRACK) include? "," type "]}," RuboCop AST Token left_ref_bracket?":{"type":"method","name":"left_ref_bracket?","children":[],"call":[" type == "," type "]}," RuboCop AST Token left_array_bracket?":{"type":"method","name":"left_array_bracket?","children":[],"call":[" type == "," type "]}," RuboCop AST Token semicolon?":{"type":"method","name":"semicolon?","children":[],"call":[" type == "," type "]}," RuboCop AST Token comment?":{"type":"method","name":"comment?","children":[],"call":[" type == "," type "]}," RuboCop AST Token space_before?":{"type":"method","name":"space_before?","children":[],"call":[" pos source_buffer source match "," pos source_buffer source "," pos source_buffer "," pos "," begin_pos - "," begin_pos "," begin_pos zero? "]}," RuboCop AST Token space_after?":{"type":"method","name":"space_after?","children":[],"call":[" pos source_buffer source match "," end_pos "," pos source_buffer source "," pos source_buffer "," pos "]}," RuboCop AST Token to_s":{"type":"method","name":"to_s","children":[],"call":[" text inspect "," text "," type "," column "," line "]}," RuboCop AST Token end_pos":{"type":"method","name":"end_pos","children":[],"call":["@pos end_pos "]}," RuboCop AST Token begin_pos":{"type":"method","name":"begin_pos","children":[],"call":["@pos begin_pos "]}," RuboCop AST Token column":{"type":"method","name":"column","children":[],"call":["@pos column "]}," RuboCop AST Token line":{"type":"method","name":"line","children":[],"call":["@pos line "]}," RuboCop AST Token initialize":{"type":"method","name":"initialize","children":[],"call":["text to_s "]}," RuboCop AST Token from_parser_token":{"type":"method","name":"from_parser_token","children":[],"call":[]}," RuboCop AST ProcessedSource create_parser":{"type":"method","name":"create_parser","children":[],"call":["parser diagnostics consumer= ","@diagnostics << "," lambda ","parser diagnostics ","parser diagnostics ignore_warnings= ","parser diagnostics all_errors_are_fatal= ","RUBY_ENGINE  != "," parser_class new tap "," parser_class new "," parser_class ","RuboCop AST Builder  new "]}," RuboCop AST ProcessedSource parser_class":{"type":"method","name":"parser_class","children":[],"call":[" raise ","ruby_version inspect "," require "]}," RuboCop AST ProcessedSource tokenize":{"type":"method","name":"tokenize","children":[],"call":["Token  from_parser_token ","tokens map ","ast complete! ","ast respond_to? ","parser tokenize ","tokens map! "]}," RuboCop AST ProcessedSource parse":{"type":"method","name":"parse","children":[],"call":[" tokenize "," create_parser ","@buffer source= ","Parser Source Buffer  new ","Parser Source Buffer  new  source= "]}," RuboCop AST ProcessedSource comment_lines":{"type":"method","name":"comment_lines","children":[],"call":["c location line ","c location "," comments map "," comments "]}," RuboCop AST ProcessedSource line_indentation":{"type":"method","name":"line_indentation","children":[],"call":[" lines [] match [] to_s length "," lines [] match [] to_s "," lines [] match [] "," lines [] match "," lines [] ","line_number - "," lines "]}," RuboCop AST ProcessedSource following_line":{"type":"method","name":"following_line","children":[],"call":[" lines [] ","token line "," lines "]}," RuboCop AST ProcessedSource current_line":{"type":"method","name":"current_line","children":[],"call":[" lines [] ","token line - ","token line "," lines "]}," RuboCop AST ProcessedSource preceding_line":{"type":"method","name":"preceding_line","children":[],"call":[" lines [] ","token line - ","token line "," lines "]}," RuboCop AST ProcessedSource start_with?":{"type":"method","name":"start_with?","children":[],"call":[" [] start_with? "," [] "," [] nil? "]}," RuboCop AST ProcessedSource comments_before_line":{"type":"method","name":"comments_before_line","children":[],"call":["c location line <= ","c location line ","c location "," comments select "," comments "," each_comment_in_lines to_a "," each_comment_in_lines "]}," RuboCop AST ProcessedSource commented?":{"type":"method","name":"commented?","children":[],"call":[" comment_lines include? ","source_range line "," comment_lines "]}," RuboCop AST ProcessedSource blank?":{"type":"method","name":"blank?","children":[],"call":[" ast nil? "," ast "]}," RuboCop AST ProcessedSource file_path":{"type":"method","name":"file_path","children":[],"call":[" buffer name "," buffer "]}," RuboCop AST ProcessedSource find_token":{"type":"method","name":"find_token","children":[],"call":[" tokens find "," tokens "]}," RuboCop AST ProcessedSource each_token":{"type":"method","name":"each_token","children":[],"call":[" tokens each "," tokens "]}," RuboCop AST ProcessedSource find_comment":{"type":"method","name":"find_comment","children":[],"call":[" comments find "," comments "]}," RuboCop AST ProcessedSource each_comment":{"type":"method","name":"each_comment","children":[],"call":[" comments each "," comments "]}," RuboCop AST ProcessedSource checksum":{"type":"method","name":"checksum","children":[],"call":["Digest SHA1  hexdigest "]}," RuboCop AST ProcessedSource valid_syntax?":{"type":"method","name":"valid_syntax?","children":[],"call":["(sym :error) include? ","d level ","@diagnostics none? ","INVALID_LEVELS  include? "]}," RuboCop AST ProcessedSource []":{"type":"method","name":"[]","children":[],"call":[" lines [] "," lines "]}," RuboCop AST ProcessedSource lines":{"type":"method","name":"lines","children":[],"call":["result << ","line == ","ix >= ","all_lines each_with_index ","all_lines size "," tokens last line "," tokens last "," tokens "," tokens any? ","@buffer source_lines ","@buffer source_lines  each_with_index ","@buffer source_lines  size "]}," RuboCop AST ProcessedSource ast_with_comments":{"type":"method","name":"ast_with_comments","children":[],"call":["Parser Source Comment  associate "," comments "," ast "," comments ! "," ast ! ","Parser Source Comment  associate_by_identity "]}," RuboCop AST ProcessedSource initialize":{"type":"method","name":"initialize","children":[],"call":[" parse ","source force_encoding ","source encoding == ","source encoding ","(send\n  (lvar :source) :+@) force_encoding ","source +@ "]}," RuboCop AST ProcessedSource from_file":{"type":"method","name":"from_file","children":[],"call":[]}," RuboCop AST NodePattern descend":{"type":"method","name":"descend","children":[],"call":[]}," RuboCop AST NodePattern to_s":{"type":"method","name":"to_s","children":[],"call":[" pattern "," class "]}," RuboCop AST NodePattern ==":{"type":"method","name":"==","children":[],"call":["Compiler  tokens == ","Compiler  tokens "," pattern ","other pattern ","other is_a? ","other ast == "," ast ","other ast "]}," RuboCop AST NodePattern marshal_dump":{"type":"method","name":"marshal_dump","children":[],"call":[" pattern "]}," RuboCop AST NodePattern marshal_load":{"type":"method","name":"marshal_load","children":[],"call":[" initialize "]}," RuboCop AST NodePattern match":{"type":"method","name":"match","children":[],"call":[" match "," initialize "," pattern ","rest empty? ","@cache [] call ","@cache [] "," as_lambda "]}," RuboCop AST NodePattern initialize":{"type":"method","name":"initialize","children":[],"call":[" instance_eval ","837 + ","compiler emit_method_code ","compiler emit_trailing_params ","Compiler  new ","889 + ","890 + ","compiler emit_params ","891 + ","@compiler compile_as_node_pattern ","compiler parser parse ","compiler parser ","Compiler  new  emit_method_code ","Compiler  new  emit_trailing_params ","Compiler  new  emit_params ","@Compiler  new  compile_as_node_pattern ","Compiler  new  parser parse ","Compiler  new  parser "]}," RuboCop AST NodePattern Macros node_search_body":{"type":"method","name":"node_search_body","children":[],"call":[]}," RuboCop AST NodePattern Macros node_search":{"type":"method","name":"node_search","children":[],"call":[" class_eval ","lineno to_i "," node_search_body ","compiler match_code ","compiler emit_trailing_params "]}," RuboCop AST NodePattern Macros node_search_all":{"type":"method","name":"node_search_all","children":[],"call":[" node_search ","compiler emit_trailing_params ","compiler emit_yield_capture "]}," RuboCop AST NodePattern Macros node_search_first":{"type":"method","name":"node_search_first","children":[],"call":[" node_search "]}," RuboCop AST NodePattern Macros def_node_search":{"type":"method","name":"def_node_search","children":[],"call":[" node_search_all "," node_search_first ","method_name to_s end_with? ","method_name to_s "," caller first split "," caller first "," caller ","Compiler  new ","Compiler  new def_node_search ","NodePattern  new def_node_search ","NodePattern  new "]}," RuboCop AST NodePattern Macros def_node_matcher":{"type":"method","name":"def_node_matcher","children":[],"call":[" class_eval ","location lineno ","location path "," caller_locations first "," caller_locations ","compiler emit_method_code ","compiler emit_trailing_params ","Compiler  new ","Compiler  new def_node_matcher ","NodePattern  new def_node_matcher ","NodePattern  new "," caller_locations first  lineno "," caller_locations first  path "," caller_ caller_locations first s first "," caller_ caller_locations first s ","Compiler  new  emit_method_code ","Compiler  new  emit_trailing_params "]}," RuboCop AST NodePattern Compiler tokens":{"type":"method","name":"tokens","children":[],"call":[]}," RuboCop AST NodePattern Compiler substitute_cur_node":{"type":"method","name":"substitute_cur_node","children":[],"call":["(send\n  (send\n    (lvar :code) :gsub\n    (const nil :CUR_ELEMENT)\n    (const nil :CUR_NODE)) :gsub\n  (const nil :CUR_NODE)) gsub ","iter == ","code gsub gsub ","code gsub "]}," RuboCop AST NodePattern Compiler with_seq_head_context":{"type":"method","name":"with_seq_head_context","children":[],"call":["code gsub "," fail_due_to ","code include? "]}," RuboCop AST NodePattern Compiler with_context":{"type":"method","name":"with_context","children":[],"call":[" substitute_cur_node "," with_temp_node "]}," RuboCop AST NodePattern Compiler with_child_context":{"type":"method","name":"with_child_context","children":[],"call":[" with_context "]}," RuboCop AST NodePattern Compiler auto_use_temp_node?":{"type":"method","name":"auto_use_temp_node?","children":[],"call":["code scan count > ","code scan count ","code scan ","code match? "]}," RuboCop AST NodePattern Compiler next_temp_value":{"type":"method","name":"next_temp_value","children":[],"call":[]}," RuboCop AST NodePattern Compiler next_temp_variable":{"type":"method","name":"next_temp_variable","children":[],"call":[" next_temp_value "]}," RuboCop AST NodePattern Compiler with_temp_variables":{"type":"method","name":"with_temp_variables","children":[],"call":[" next_temp_variable ","block parameters map ","block parameters ","names map! ","names empty? ","@temp_depth > ","block parameters map  map! ","block parameters map  empty? "]}," RuboCop AST NodePattern Compiler with_temp_node":{"type":"method","name":"with_temp_node","children":[],"call":["(send nil :with_temp_variables) gsub "," with_temp_variables "]}," RuboCop AST NodePattern Compiler fail_due_to":{"type":"method","name":"fail_due_to","children":[],"call":[" raise "]}," RuboCop AST NodePattern Compiler emit_method_code":{"type":"method","name":"emit_method_code","children":[],"call":[" emit_retval "," emit_yield_capture "]}," RuboCop AST NodePattern Compiler emit_trailing_params":{"type":"method","name":"emit_trailing_params","children":[],"call":["params empty? "," emit_param_list ","(send\n  (send\n    (array\n      (lvar :params)\n      (lvar :keywords)) :reject\n    (block-pass\n      (sym :empty?))) :map) join ","(lvar :params) reject map ","(lvar :params) reject "," emit_keyword_list "," emit_param_list  empty? ","(send\n  (send\n    (array\n      (lvar : emit_param_list )\n      (lvar :keywords)) :reject\n    (block-pass\n      (sym :empty?))) :map) join ","(send\n  (send\n    (array\n      (lvar :params)\n      (lvar : emit_keyword_list )) :reject\n    (block-pass\n      (sym :empty?))) :map) join ","(lvar : emit_param_list ) reject map ","(lvar : emit_param_list ) reject "]}," RuboCop AST NodePattern Compiler emit_param_list":{"type":"method","name":"emit_param_list","children":[],"call":["(send\n  (begin\n    (irange\n      (int 1)\n      (ivar :@params))) :map) join ","(irange\n  (int 1)\n  (ivar :@params)) map "]}," RuboCop AST NodePattern Compiler emit_retval":{"type":"method","name":"emit_retval","children":[],"call":["@captures == ","@captures zero? "]}," RuboCop AST NodePattern Compiler emit_yield_capture":{"type":"method","name":"emit_yield_capture","children":[],"call":["@captures == ","@captures zero? "]}," RuboCop AST NodePattern Compiler get_param":{"type":"method","name":"get_param","children":[],"call":["number zero? ","number > "," Integer ","number empty? "," Integer  zero? "," Integer  > "," Integer  empty? "]}," RuboCop AST NodePattern Compiler next_capture":{"type":"method","name":"next_capture","children":[],"call":[" new_capture "]}," RuboCop AST NodePattern Compiler compile_arg":{"type":"method","name":"compile_arg","children":[],"call":[" fail_due_to ","token inspect "," get_param ","token [] ","invalid in arglist:  + "," access_unify "," get_const "," get_keyword "," expr_to_atom "," compile_expr "," compile_atom "," tokens shift "," tokens "," tokens shift  inspect "," tokens shift  [] ","  tokens shift s shift ","  tokens shift s "]}," RuboCop AST NodePattern Compiler compile_args":{"type":"method","name":"compile_args","children":[],"call":["args << "," compile_arg ","(str \")\") include? ","tokens slice! each_with_object ","tokens slice! ","token == ","tokens find_index "," tokens shift "," tokens "," tokens first == "," tokens first "," tokens_until map "," tokens_until "," compile_arg s << "," compile_ compile_arg  "]}," RuboCop AST NodePattern Compiler compile_param":{"type":"method","name":"compile_param","children":[],"call":[" get_param "]}," RuboCop AST NodePattern Compiler compile_nodetype":{"type":"method","name":"compile_nodetype","children":[],"call":["type tr "," compile_guard_clause "]}," RuboCop AST NodePattern Compiler compile_funcall":{"type":"method","name":"compile_funcall","children":[],"call":["args join ","method [] "," compile_args "," tokens ","method end_with? "," compile_args  join ","method []  [] "," compile_ compile_args  ","method []  end_with? "]}," RuboCop AST NodePattern Compiler compile_predicate":{"type":"method","name":"compile_predicate","children":[],"call":["args join ","predicate [] "," compile_args "," tokens ","predicate end_with? "," compile_args  join ","predicate []  [] "," compile_ compile_args  ","predicate []  end_with? "]}," RuboCop AST NodePattern Compiler compile_literal":{"type":"method","name":"compile_literal","children":[],"call":[]}," RuboCop AST NodePattern Compiler compile_wildcard":{"type":"method","name":"compile_wildcard","children":[],"call":["@unify []= ","name gsub "," access_unify ","@unify key? ","name empty? ","@u@unify []= ify []= ","@unify []= ame gsub "," access_u@unify []= ify ","@u@unify []= ify key? ","@unify []= ame empty? "]}," RuboCop AST NodePattern Compiler compile_descend":{"type":"method","name":"compile_descend","children":[],"call":["(dstr\n  (str \"RuboCop::AST::NodePattern.descend(\")\n  (begin\n    (const nil :CUR_ELEMENT))\n  (str \").\")) join "," with_context "," compile_expr "," with_temp_variables "]}," RuboCop AST NodePattern Compiler compile_ascend":{"type":"method","name":"compile_ascend","children":[],"call":[" with_context "," compile_expr "]}," RuboCop AST NodePattern Compiler compile_negation":{"type":"method","name":"compile_negation","children":[],"call":[" compile_expr "]}," RuboCop AST NodePattern Compiler compile_capture":{"type":"method","name":"compile_capture","children":[],"call":[" compile_expr "," next_capture "]}," RuboCop AST NodePattern Compiler compile_intersect":{"type":"method","name":"compile_intersect","children":[],"call":["(send\n  (send nil :tokens_until\n    (str \"]\")\n    (str \"intersection\")) :map) join "," compile_expr "," tokens_until map "," tokens_until "]}," RuboCop AST NodePattern Compiler compile_union":{"type":"method","name":"compile_union","children":[],"call":["terms join "," compile_expr "," insure_same_captures map "," insure_same_captures "," unify_in_union "," tokens_until "]}," RuboCop AST NodePattern Compiler unify_in_union":{"type":"method","name":"unify_in_union","children":[],"call":[" forbid_unification ","union - ","new_unify_intersection | ","new_unify_intersection nil? ","@unify keys - ","unify_before keys ","@unify keys ","unify_before dup ","enum each ","@unify dup "," to_enum "," __method__ "," block_given? ","new_unify_intersection |  - ","@unify keys - _intersection | ","@unify keys - _intersection nil? ","unify_before dup  keys - ","@unify dup  keys ","unify_before dup  keys ","@unify dup  dup ","unify_before dup  dup "]}," RuboCop AST NodePattern Compiler forbid_unification":{"type":"method","name":"forbid_unification","children":[],"call":["@unify []= ","names each "]}," RuboCop AST NodePattern Compiler access_unify":{"type":"method","name":"access_unify","children":[],"call":[" fail_due_to ","var == ","@unify [] ","@unify []  == "]}," RuboCop AST NodePattern Compiler insure_same_captures":{"type":"method","name":"insure_same_captures","children":[],"call":[" fail_due_to ","captures_after != ","enum each "," to_enum "," __method__ "," block_given? "]}," RuboCop AST NodePattern Compiler compile_any_order":{"type":"method","name":"compile_any_order","children":[],"call":["ANY_ORDER_TEMPLATE  result "," binding "," lambda ","patterns size ","patterns << "," compile_expr "," next_capture "," tokens shift "," tokens "," fail_due_to "," tokens_until "," with_temp_variables ","  tokens shift s shift ","  tokens shift s ","  tokens shift s_until "]}," RuboCop AST NodePattern Compiler compile_ellipsis":{"type":"method","name":"compile_ellipsis","children":[],"call":[]}," RuboCop AST NodePattern Compiler compile_captured_ellipsis":{"type":"method","name":"compile_captured_ellipsis","children":[],"call":["range end ","range begin == ","range begin "," lambda "," next_capture "," next_ next_capture  "]}," RuboCop AST NodePattern Compiler Sequence variadic_arity":{"type":"method","name":"variadic_arity","children":[],"call":[" last_terms_arity -@ - "," last_terms_arity -@ "," last_terms_arity "," first_terms_arity ","@variadic_index positive? ","  first_terms_arity _terms_arity "]}," RuboCop AST NodePattern Compiler Sequence compile_variadic_term":{"type":"method","name":"compile_variadic_term","children":[],"call":[" term "," variadic_arity "]}," RuboCop AST NodePattern Compiler Sequence compile_terms":{"type":"method","name":"compile_terms","children":[],"call":[" term ","start - ","@arities fetch ","index_range map "]}," RuboCop AST NodePattern Compiler Sequence compile_last_terms":{"type":"method","name":"compile_last_terms","children":[],"call":[" compile_terms "," last_terms_arity -@ "," last_terms_arity "," last_terms_range "]}," RuboCop AST NodePattern Compiler Sequence compile_first_terms":{"type":"method","name":"compile_first_terms","children":[],"call":[" compile_terms "," first_terms_range "]}," RuboCop AST NodePattern Compiler Sequence compile_seq_head":{"type":"method","name":"compile_seq_head","children":[],"call":[" with_seq_head_context ","@terms [] "," fail_due_to ","@terms [] respond_to? "," seq_head? "]}," RuboCop AST NodePattern Compiler Sequence term":{"type":"method","name":"term","children":[],"call":[" with_child_context ","range begin ","t call ","t respond_to? ","@terms [] "," wi@terms [] h_child_con@terms [] ex@terms []  ","@terms []  call ","@terms []  respond_@terms [] o? ","@@terms [] erms [] "]}," RuboCop AST NodePattern Compiler Sequence compile_child_nb_guard":{"type":"method","name":"compile_child_nb_guard","children":[],"call":["fixed + ","max_variadic != ","@arities [] end ","@arities [] "," variadic_term_min_arity "," first_terms_arity + "," last_terms_arity "," first_terms_arity "," first_terms_arity +  + ","@arities [] end  != "," variadic_term_fixed + _arity "]}," RuboCop AST NodePattern Compiler Sequence seq_head?":{"type":"method","name":"seq_head?","children":[],"call":["@variadic_index != "]}," RuboCop AST NodePattern Compiler Sequence last_terms_range":{"type":"method","name":"last_terms_range","children":[],"call":["@terms size ","@variadic_index + "]}," RuboCop AST NodePattern Compiler Sequence first_terms_range":{"type":"method","name":"first_terms_range","children":[],"call":["(or\n  (ivar :@variadic_index)\n  (send\n    (ivar :@terms) :size)) - ","@terms size "," seq_head? "]}," RuboCop AST NodePattern Compiler Sequence variadic_term_min_arity":{"type":"method","name":"variadic_term_min_arity","children":[],"call":["@arities [] begin ","@arities [] "]}," RuboCop AST NodePattern Compiler Sequence last_terms_arity":{"type":"method","name":"last_terms_arity","children":[],"call":["@arities [] inject ","@arities [] "," last_terms_range "]}," RuboCop AST NodePattern Compiler Sequence first_terms_arity":{"type":"method","name":"first_terms_arity","children":[],"call":["@arities [] inject ","@arities [] "," first_terms_range "]}," RuboCop AST NodePattern Compiler Sequence compile":{"type":"method","name":"compile","children":[],"call":["(send nil :compile_guard_clause) compact join << ","(send nil :compile_guard_clause) compact join ","(send nil :compile_guard_clause) compact "," compile_last_terms "," compile_variadic_term "," compile_first_terms "," compile_seq_head "," compile_child_nb_guard "," compile_guard_clause "]}," RuboCop AST NodePattern Compiler Sequence initialize":{"type":"method","name":"initialize","children":[],"call":[" fail_due_to ","(send\n  (ivar :@arities) :one?) ! ","a is_a? ","@arities one? ","@arities find_index ","arity_term_list transpose "]}," RuboCop AST NodePattern Compiler parse_repetition_token":{"type":"method","name":"parse_repetition_token","children":[],"call":[" tokens shift "," tokens "," tokens first "]}," RuboCop AST NodePattern Compiler repeated_generator":{"type":"method","name":"repeated_generator","children":[],"call":["REPEATED_TEMPLATE  result "," binding "," fail_due_to ","range begin == ","range begin "," lambda "," with_temp_variables "]}," RuboCop AST NodePattern Compiler compile_repeated_expr":{"type":"method","name":"compile_repeated_expr","children":[],"call":[" repeated_generator "," next_temp_variable ","@captures != ","min nil? "," parse_repetition_token "," compile_expr "," compile_ compile_expr  "]}," RuboCop AST NodePattern Compiler variadic_seq_term":{"type":"method","name":"variadic_seq_term","children":[],"call":[" compile_repeated_expr "," compile_any_order "," next_capture "," compile_ellipsis "," compile_captured_ellipsis "," tokens shift "," tokens ","  tokens shift s shift ","  tokens shift s "]}," RuboCop AST NodePattern Compiler compile_guard_clause":{"type":"method","name":"compile_guard_clause","children":[],"call":[]}," RuboCop AST NodePattern Compiler compile_seq":{"type":"method","name":"compile_seq","children":[],"call":["Sequence  new compile ","Sequence  new "," variadic_seq_term "," tokens_until map "," tokens_until "]}," RuboCop AST NodePattern Compiler tokens_until":{"type":"method","name":"tokens_until","children":[],"call":[" tokens shift "," tokens "," tokens first == "," tokens first "," fail_due_to "," to_enum "," __method__ "," block_given? "]}," RuboCop AST NodePattern Compiler compile_expr":{"type":"method","name":"compile_expr","children":[],"call":[" fail_due_to ","token inspect "," compile_param ","token [] "," compile_nodetype "," compile_predicate "," compile_literal "," compile_funcall "," compile_wildcard "," compile_descend "," compile_ascend "," compile_capture "," compile_negation "," compile_intersect "," compile_union "," compile_seq "," compile_const "," compile_keyword "," compile_new_wildcard "," atom_to_expr "," compile_atom ","  compile_atom _to_expr "," compile_ compile_atom  "]}," RuboCop AST NodePattern Compiler run":{"type":"method","name":"run","children":[],"call":[" fail_due_to "," tokens empty? "," tokens ","@match_code prepend ","@captures positive? "," with_context "," compile_expr ","Compiler  tokens "," with_context  prepend "]}," RuboCop AST NodePattern Compiler initialize":{"type":"method","name":"initialize","children":[],"call":[" run ","Set  [] "," class AtomSubcompiler  new "," class ","Binding  new "]}," RuboCop AST NodePattern Compiler emit_node_search_body":{"type":"method","name":"emit_node_search_body","children":[],"call":[" match_code "," emit_trailing_params "," emit_params "]}," RuboCop AST NodePattern Compiler emit_node_search":{"type":"method","name":"emit_node_search","children":[],"call":[" emit_node_search_body "," emit_yield_capture "," emit_trailing_params ","method_name to_s end_with? ","method_name to_s "," emit_params "]}," RuboCop AST NodePattern Compiler def_node_search":{"type":"method","name":"def_node_search","children":[],"call":[" emit_node_search "," def_helper "]}," RuboCop AST NodePattern Compiler def_node_matcher":{"type":"method","name":"def_node_matcher","children":[],"call":[" emit_method_code "," emit_trailing_params "," def_helper "," emit_params "]}," RuboCop AST NodePattern Compiler def_helper":{"type":"method","name":"def_helper","children":[],"call":["base class_eval ","location lineno ","location path "," send ","base send ","defaults empty? "," caller_locations first "," caller_locations "," wrapping_block "," caller_locations first  lineno "," caller_locations first  path "," caller_ caller_locations first s first "," caller_ caller_locations first s "]}," RuboCop AST NodePattern Compiler emit_keyword_list":{"type":"method","name":"emit_keyword_list","children":[],"call":["(send\n  (ivar :@keywords) :map) join "," format ","@keywords map "]}," RuboCop AST NodePattern Compiler get_const":{"type":"method","name":"get_const","children":[],"call":[]}," RuboCop AST NodePattern Compiler get_keyword":{"type":"method","name":"get_keyword","children":[],"call":["@keywords << "]}," RuboCop AST NodePattern Compiler compile_keyword":{"type":"method","name":"compile_keyword","children":[],"call":[" get_keyword "]}," RuboCop AST NodePattern Compiler compile_const":{"type":"method","name":"compile_const","children":[],"call":[" get_const "]}," RuboCop AST Node argument_type?":{"type":"method","name":"argument_type?","children":[],"call":["ARGUMENT_TYPES  include? "," type "]}," RuboCop AST Node loop_keyword?":{"type":"method","name":"loop_keyword?","children":[],"call":["LOOP_TYPES  include? "," type "]}," RuboCop AST Node post_condition_loop?":{"type":"method","name":"post_condition_loop?","children":[],"call":["POST_CONDITION_LOOP_TYPES  include? "," type "]}," RuboCop AST RegexpNode regopt_include?":{"type":"method","name":"regopt_include?","children":[],"call":[" regopt children include? "," regopt children "," regopt "]}," RuboCop AST RegexpNode no_encoding?":{"type":"method","name":"no_encoding?","children":[],"call":[" regopt_include? "]}," RuboCop AST RegexpNode single_interpolation?":{"type":"method","name":"single_interpolation?","children":[],"call":[" regopt_include? "]}," RuboCop AST RegexpNode ignore_case?":{"type":"method","name":"ignore_case?","children":[],"call":[" regopt_include? "]}," RuboCop AST RegexpNode extended?":{"type":"method","name":"extended?","children":[],"call":[" regopt_include? "]}," RuboCop AST RegexpNode multiline_mode?":{"type":"method","name":"multiline_mode?","children":[],"call":[" regopt_include? "]}," RuboCop AST RegexpNode interpolation?":{"type":"method","name":"interpolation?","children":[],"call":[" children any? "," children "]}," RuboCop AST RegexpNode delimiter?":{"type":"method","name":"delimiter?","children":[],"call":[" delimiters include? "," delimiters "]}," RuboCop AST RegexpNode delimiters":{"type":"method","name":"delimiters","children":[],"call":[" loc end source [] "," loc end source "," loc end "," loc "," loc begin source [] "," loc begin source "," loc begin "]}," RuboCop AST RegexpNode percent_r_literal?":{"type":"method","name":"percent_r_literal?","children":[],"call":[" slash_literal? ! "," slash_literal? "]}," RuboCop AST RegexpNode slash_literal?":{"type":"method","name":"slash_literal?","children":[],"call":[" loc begin source == "," loc begin source "," loc begin "," loc "]}," RuboCop AST MethodIdentifierPredicates enumerable_method?":{"type":"method","name":"enumerable_method?","children":[],"call":["ENUMERABLE_METHODS  include? "," method_name "]}," RuboCop AST MethodIdentifierPredicates nonmutating_string_method?":{"type":"method","name":"nonmutating_string_method?","children":[],"call":["NONMUTATING_STRING_METHODS  include? "," method_name "]}," RuboCop AST MethodIdentifierPredicates nonmutating_hash_method?":{"type":"method","name":"nonmutating_hash_method?","children":[],"call":["NONMUTATING_HASH_METHODS  include? "," method_name "]}," RuboCop AST MethodIdentifierPredicates nonmutating_array_method?":{"type":"method","name":"nonmutating_array_method?","children":[],"call":["NONMUTATING_ARRAY_METHODS  include? "," method_name "]}," RuboCop AST MethodIdentifierPredicates nonmutating_operator_method?":{"type":"method","name":"nonmutating_operator_method?","children":[],"call":["NONMUTATING_OPERATOR_METHODS  include? "," method_name "]}," RuboCop AST MethodIdentifierPredicates nonmutating_unary_operator_method?":{"type":"method","name":"nonmutating_unary_operator_method?","children":[],"call":["NONMUTATING_UNARY_OPERATOR_METHODS  include? "," method_name "]}," RuboCop AST MethodIdentifierPredicates nonmutating_binary_operator_method?":{"type":"method","name":"nonmutating_binary_operator_method?","children":[],"call":["NONMUTATING_BINARY_OPERATOR_METHODS  include? "," method_name "]}," RuboCop AST LambdaNode arguments":{"type":"method","name":"arguments","children":[],"call":[]}," RuboCop AST LambdaNode method_name":{"type":"method","name":"method_name","children":[],"call":[]}," RuboCop AST LambdaNode assignment_method?":{"type":"method","name":"assignment_method?","children":[],"call":[]}," RuboCop AST LambdaNode attribute_accessor?":{"type":"method","name":"attribute_accessor?","children":[],"call":[]}," RuboCop AST LambdaNode lambda_literal?":{"type":"method","name":"lambda_literal?","children":[],"call":[]}," RuboCop AST LambdaNode lambda?":{"type":"method","name":"lambda?","children":[],"call":[]}," RuboCop AST IndexasgnNode arguments":{"type":"method","name":"arguments","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST IndexasgnNode method_name":{"type":"method","name":"method_name","children":[],"call":[]}," RuboCop AST IndexasgnNode assignment_method?":{"type":"method","name":"assignment_method?","children":[],"call":[]}," RuboCop AST IndexasgnNode attribute_accessor?":{"type":"method","name":"attribute_accessor?","children":[],"call":[]}," RuboCop AST IndexNode arguments":{"type":"method","name":"arguments","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST IndexNode method_name":{"type":"method","name":"method_name","children":[],"call":[]}," RuboCop AST IndexNode assignment_method?":{"type":"method","name":"assignment_method?","children":[],"call":[]}," RuboCop AST IndexNode attribute_accessor?":{"type":"method","name":"attribute_accessor?","children":[],"call":[]}," RuboCop AST ProcessedSource contains_comment?":{"type":"method","name":"contains_comment?","children":[],"call":[" line_with_comment? ","(irange\n  (send\n    (lvar :source_range) :line)\n  (send\n    (lvar :source_range) :last_line)) any? ","source_range last_line ","source_range line "," each_comment_in_lines any? "," each_comment_in_lines "]}," RuboCop AST ProcessedSource line_with_comment?":{"type":"method","name":"line_with_comment?","children":[],"call":[" comment_lines include? "," comment_lines "," comment_index include? "," comment_index "]}," RuboCop AST NodePattern Matcher ===":{"type":"method","name":"===","children":[],"call":["@block call "]}," RuboCop AST NodePattern Matcher initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop AST NodePattern Compiler wrapping_block":{"type":"method","name":"wrapping_block","children":[],"call":[" send "," proc "]}," RuboCop AST NodePattern Compiler emit_params":{"type":"method","name":"emit_params","children":[],"call":["(splat\n  (lvar :first)) reject join ","(splat\n  (lvar :first)) reject "," emit_keyword_list "," emit_param_list "]}," RuboCop AST NodePattern Compiler compile_atom":{"type":"method","name":"compile_atom","children":[],"call":[" fail_due_to "," get_param ","token [] "," get_const "," get_keyword "," access_unify "]}," RuboCop AST NodePattern Compiler expr_to_atom":{"type":"method","name":"expr_to_atom","children":[],"call":[" with_context "," with_temp_variables "]}," RuboCop AST NodePattern Compiler atom_to_expr":{"type":"method","name":"atom_to_expr","children":[],"call":[]}," RuboCop AST NodePattern Compiler compile_new_wildcard":{"type":"method","name":"compile_new_wildcard","children":[],"call":["@unify []= ","name gsub ","name empty? ","@u@unify []= ify []= ","@unify []= ame gsub ","@unify []= ame empty? "]}," RuboCop AST ProcessedSource comment_index":{"type":"method","name":"comment_index","children":[],"call":["hash []= ","c location line ","c location "," comments each "," comments "," tap "]}," RuboCop AST ProcessedSource each_comment_in_lines":{"type":"method","name":"each_comment_in_lines","children":[],"call":[" comment_index [] "," comment_index ","line_range each "," to_enum "," block_given? ","  comment_index [] _index [] ","  comment_index [] _index "]}," RuboCop AST ProcessedSource comment_at_line":{"type":"method","name":"comment_at_line","children":[],"call":[" comment_index [] "," comment_index "]}," RuboCop AST SendNode first_argument_index":{"type":"method","name":"first_argument_index","children":[],"call":[]}," RuboCop AST ParameterizedNode RestArguments arguments?":{"type":"method","name":"arguments?","children":[],"call":[" children size > "," first_argument_index "," children size "," children "]}," RuboCop AST ParameterizedNode RestArguments last_argument":{"type":"method","name":"last_argument","children":[],"call":[" children [] "," children "," arguments? "]}," RuboCop AST ParameterizedNode RestArguments first_argument":{"type":"method","name":"first_argument","children":[],"call":[" children [] "," first_argument_index "," children "]}," RuboCop AST ParameterizedNode RestArguments arguments":{"type":"method","name":"arguments","children":[],"call":[" children [] "," first_argument_index "," children "," children [] freeze "," children drop freeze "," children drop "," arguments? "]}," RuboCop AST ParameterizedNode WrappedArguments arguments":{"type":"method","name":"arguments","children":[],"call":[" children ","first children "," children first "," children first  children "," children  children first  "]}," RuboCop AST LambdaNode first_argument_index":{"type":"method","name":"first_argument_index","children":[],"call":[]}," RuboCop AST LambdaNode receiver":{"type":"method","name":"receiver","children":[],"call":[]}," RuboCop AST IndexasgnNode first_argument_index":{"type":"method","name":"first_argument_index","children":[],"call":[]}," RuboCop AST IndexNode first_argument_index":{"type":"method","name":"first_argument_index","children":[],"call":[]}," RuboCop AST CaseNode branches":{"type":"method","name":"branches","children":[],"call":["bodies push "," else_branch "," else? "," when_branches map "," when_branches "," when_branches map  push "]}," RuboCop AST Ext Range line_span":{"type":"method","name":"line_span","children":[],"call":[" Range  new "," last_line "," first_line "]}," RuboCop AST ProcessedSource source_range":{"type":"method","name":"source_range","children":[],"call":["range_or_node source_range ","range_or_node respond_to? "]}," RuboCop AST ProcessedSource sorted_tokens":{"type":"method","name":"sorted_tokens","children":[],"call":[" tokens sort_by "," tokens ","token begin_pos "," tokens sort_by with_index "]}," RuboCop AST ProcessedSource last_token_index":{"type":"method","name":"last_token_index","children":[],"call":["token end_pos >= ","token end_pos "," sorted_tokens bsearch_index "," sorted_tokens "," source_range end_pos "," source_range ","token  source_range end_pos  >= ","token  source_range end_pos  "," source_range  source_range end_pos  "]}," RuboCop AST ProcessedSource first_token_index":{"type":"method","name":"first_token_index","children":[],"call":["token begin_pos >= ","token begin_pos "," sorted_tokens bsearch_index "," sorted_tokens "," source_range begin_pos "," source_range ","token  source_range begin_pos  >= ","token  source_range begin_pos  "," source_range  source_range begin_pos  "]}," RuboCop AST ProcessedSource last_token_of":{"type":"method","name":"last_token_of","children":[],"call":[" sorted_tokens [] "," last_token_index "," sorted_tokens "]}," RuboCop AST ProcessedSource first_token_of":{"type":"method","name":"first_token_of","children":[],"call":[" sorted_tokens [] "," first_token_index "," sorted_tokens "]}," RuboCop AST ProcessedSource tokens_within":{"type":"method","name":"tokens_within","children":[],"call":[" sorted_tokens [] "," sorted_tokens "," last_token_index "," first_token_index "]}," RuboCop AST Node right_siblings":{"type":"method","name":"right_siblings","children":[],"call":[" parent children [] freeze "," parent children [] "," sibling_index + "," sibling_index "," parent children "," parent "," freeze "]}," RuboCop AST Node left_siblings":{"type":"method","name":"left_siblings","children":[],"call":[" parent children [] freeze "," parent children [] "," sibling_index "," parent children "," parent "," freeze "]}," RuboCop AST Node left_sibling":{"type":"method","name":"left_sibling","children":[],"call":[" parent children [] freeze "," parent children [] ","i - "," parent children "," parent ","i zero? ","i nil? "," sibling_index "," parent ch sibling_index ldren [] freeze "," parent ch sibling_index ldren [] "," sibling_index  - "," parent ch sibling_index ldren "," sibling_index  zero? "," sibling_index  n sibling_index l? "," s sibling_index bl sibling_index ng_ sibling_index ndex "]}," RuboCop AST Node right_sibling":{"type":"method","name":"right_sibling","children":[],"call":[" parent children [] freeze "," parent children [] "," sibling_index + "," sibling_index "," parent children "," parent "]}," RuboCop AST RescueNode else?":{"type":"method","name":"else?","children":[],"call":[" loc else "," loc "]}," RuboCop AST RescueNode else_branch":{"type":"method","name":"else_branch","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST RescueNode branches":{"type":"method","name":"branches","children":[],"call":["bodies push "," else_branch "," else? "," resbody_branches map "," resbody_branches "," resbody_branches map  push "]}," RuboCop AST RescueNode resbody_branches":{"type":"method","name":"resbody_branches","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST RescueNode body":{"type":"method","name":"body","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST ResbodyNode branch_index":{"type":"method","name":"branch_index","children":[],"call":[" parent resbody_branches index "," parent resbody_branches "," parent "]}," RuboCop AST ResbodyNode exceptions":{"type":"method","name":"exceptions","children":[],"call":["exceptions_node values ","exceptions_node array_type? ","exceptions_node nil? "," node_parts [] "," node_parts "," node_parts []  values "," node_parts []  array_type? "," node_parts []  nil? "]}," RuboCop AST ConstNode each_path":{"type":"method","name":"each_path","children":[],"call":["descendants reverse_each ","last const_type? ","descendants << ","last nil? ","last children first ","last children "," loop "," to_enum "," __method__ "," block_given? ","last children first  const_type? ","last children first  nil? ","last children first  children first ","last children first  children "]}," RuboCop AST ConstNode relative?":{"type":"method","name":"relative?","children":[],"call":[" absolute? ! "," absolute? "]}," RuboCop AST ConstNode absolute?":{"type":"method","name":"absolute?","children":[],"call":[" each_path first cbase_type? "," each_path first "," each_path "," namespace "]}," RuboCop AST ConstNode module_name?":{"type":"method","name":"module_name?","children":[],"call":[" short_name match? "," short_name "]}," RuboCop AST ConstNode short_name":{"type":"method","name":"short_name","children":[],"call":[" children [] "," children "]}," RuboCop AST ConstNode namespace":{"type":"method","name":"namespace","children":[],"call":[" children [] "," children "]}," RuboCop AST Node root?":{"type":"method","name":"root?","children":[],"call":[" parent ! "," parent "]}," RuboCop AST Node parent?":{"type":"method","name":"parent?","children":[],"call":[" parent ! ! "," parent ! "," parent "]}," RuboCop AST RuboCopCompatibility rubocop_loaded":{"type":"method","name":"rubocop_loaded","children":[],"call":[" warn ","INCOMPATIBLE_COPS  keys last ","INCOMPATIBLE_COPS  keys ","incompatible join ","incompatible size > ","incompatible size ","incompatible empty? ","(send\n  (const nil :INCOMPATIBLE_COPS) :select) values ","loaded < ","Gem Version  new ","INCOMPATIBLE_COPS  select ","(send\n  (const nil :INCOMPATIBLE_COPS) :select) values  join ","(send\n  (const nil :INCOMPATIBLE_COPS) :select) values  size > ","(send\n  (const nil :INCOMPATIBLE_COPS) :select) values  size ","(send\n  (const nil :INCOMPATIBLE_COPS) :select) values  empty? ","Gem Version  new  < "]}," RuboCop AST RegexpNode options":{"type":"method","name":"options","children":[],"call":["(send\n  (send\n    (send nil :regopt) :children) :map) inject ","OPTIONS  fetch "," regopt children map "," regopt children "," regopt "]}," RuboCop AST NodePattern freeze":{"type":"method","name":"freeze","children":[],"call":["@compiler freeze ","@match_code freeze "]}," RuboCop AST NodePattern init_with":{"type":"method","name":"init_with","children":[],"call":[" initialize ","coder [] "]}," RuboCop AST NodePattern encode_with":{"type":"method","name":"encode_with","children":[],"call":["coder []= "," pattern "]}," RuboCop AST NodePattern as_json":{"type":"method","name":"as_json","children":[],"call":[" pattern "]}," RuboCop AST NodePattern Parser WithMeta do_parse":{"type":"method","name":"do_parse","children":[],"call":["@lexer tokens ","@lexer comments "]}," RuboCop AST NodePattern Parser WithMeta Builder source_map":{"type":"method","name":"source_map","children":[],"call":[" Parser Source Map Send  new with_operator "," Parser Source Map Send  new ","locs compact inject ","locs compact "," loc ","(lvar :begin_t) map ","expression_l expression ","expression_l respond_to? ","locs compact inject  expression ","expression_l expression  expression "," loc  expression ","locs compact inject  respond_to? ","expression_l expression  respond_to? "," loc  respond_to? "]}," RuboCop AST NodePattern Parser WithMeta Builder join_exprs":{"type":"method","name":"join_exprs","children":[],"call":["left_expr loc expression join ","right_expr loc expression ","right_expr loc ","left_expr loc expression ","left_expr loc ","left_expr source_range join ","right_expr source_range ","left_expr source_range "]}," RuboCop AST NodePattern Parser WithMeta Builder loc":{"type":"method","name":"loc","children":[],"call":["token_or_range [] ","token_or_range is_a? "]}," RuboCop AST NodePattern Parser WithMeta Builder n":{"type":"method","name":"n","children":[],"call":[]}," RuboCop AST NodePattern Parser WithMeta Builder emit_call":{"type":"method","name":"emit_call","children":[],"call":[" n "," source_map "," source_ source_map  "]}," RuboCop AST NodePattern Parser WithMeta Builder emit_list":{"type":"method","name":"emit_list","children":[],"call":[" n "," source_map ","children first loc expression join ","children last loc expression ","children last loc ","children last ","children first loc expression ","children first loc ","children first ","children first source_range join ","children last source_range ","children first source_range "," source_ source_map  ","children first loc children first loc expression join ession join ","children first loc children first source_range join ession join ","children last loc children first loc expression join ession ","children last loc children first source_range join ession ","children first loc children first loc expression join ession ","children first loc children first source_range join ession "]}," RuboCop AST NodePattern Parser WithMeta Builder emit_unary_op":{"type":"method","name":"emit_unary_op","children":[],"call":[" n "," source_map ","children first loc expression ","children first loc ","children first ","children []= ","children [] first ","children [] ","children [] is_a? ","children first source_range "," source_ source_map  "]}," RuboCop AST NodePattern Parser WithMeta Builder emit_atom":{"type":"method","name":"emit_atom","children":[],"call":[" n "," source_map ","end_l source match? ","end_l source ","begin_l source match? ","begin_l source ","loc end adjust ","loc end ","loc resize ","loc end adjust  source match? ","loc end adjust  source ","loc resize  source match? ","loc resize  source "]}," RuboCop AST NodePattern Parser WithMeta Lexer pos":{"type":"method","name":"pos","children":[],"call":[" Parser Source Range  new "," ss pos "," ss "," ss pos - "," ss matched_size "," source_buffer "]}," RuboCop AST NodePattern Parser WithMeta Lexer emit_comment":{"type":"method","name":"emit_comment","children":[],"call":["@comments << ","Comment  new "," pos "]}," RuboCop AST NodePattern Parser WithMeta Lexer token":{"type":"method","name":"token","children":[],"call":[" pos "]}," RuboCop AST NodePattern Parser WithMeta Lexer initialize":{"type":"method","name":"initialize","children":[],"call":["@source_buffer source "," Parser Source Buffer  new ","str_or_buffer respond_to? "," Parser Source Buffer  new  source "]}," RuboCop AST NodePattern Sets []":{"type":"method","name":"[]","children":[],"call":[]}," RuboCop AST NodePattern Sets uniq":{"type":"method","name":"uniq","children":[],"call":[]}," RuboCop AST NodePattern Sets name":{"type":"method","name":"name","children":[],"call":[]}," RuboCop AST NodePattern Parser on_error":{"type":"method","name":"on_error","children":[],"call":[" raise ","val inspect "," token_to_str "]}," RuboCop AST NodePattern Parser enforce_unary":{"type":"method","name":"enforce_unary","children":[],"call":[" raise ","node to_s ","node loc ","node arity == ","node arity "]}," RuboCop AST NodePattern Parser inspect":{"type":"method","name":"inspect","children":[],"call":[" class "]}," RuboCop AST NodePattern Parser parse":{"type":"method","name":"parse","children":[],"call":[" raise ","e message "," do_parse "," class Lexer  new "," class "]}," RuboCop AST NodePattern Parser initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop AST NodePattern Parser _reduce_none":{"type":"method","name":"_reduce_none","children":[],"call":["val [] "]}," RuboCop AST NodePattern Parser _reduce_46":{"type":"method","name":"_reduce_46","children":[],"call":["val [] << ","val [] "]}," RuboCop AST NodePattern Parser _reduce_45":{"type":"method","name":"_reduce_45","children":[],"call":["val [] ","val [] last << ","val [] last "]}," RuboCop AST NodePattern Parser _reduce_44":{"type":"method","name":"_reduce_44","children":[],"call":[]}," RuboCop AST NodePattern Parser _reduce_43":{"type":"method","name":"_reduce_43","children":[],"call":["val [] << ","val [] "]}," RuboCop AST NodePattern Parser _reduce_42":{"type":"method","name":"_reduce_42","children":[],"call":[]}," RuboCop AST NodePattern Parser _reduce_41":{"type":"method","name":"_reduce_41","children":[],"call":["val [] << ","val [] "]}," RuboCop AST NodePattern Parser _reduce_40":{"type":"method","name":"_reduce_40","children":[],"call":[]}," RuboCop AST NodePattern Parser _reduce_39":{"type":"method","name":"_reduce_39","children":[],"call":["val [] << ","val [] "]}," RuboCop AST NodePattern Parser _reduce_38":{"type":"method","name":"_reduce_38","children":[],"call":[]}," RuboCop AST NodePattern Parser _reduce_37":{"type":"method","name":"_reduce_37","children":[],"call":[]}," RuboCop AST NodePattern Parser _reduce_33":{"type":"method","name":"_reduce_33","children":[],"call":[" emit_capture "," emit_atom ","val [] "]}," RuboCop AST NodePattern Parser _reduce_26":{"type":"method","name":"_reduce_26","children":[],"call":[" emit_capture "," emit_list ","node_pattern_list << "]}," RuboCop AST NodePattern Parser _reduce_25":{"type":"method","name":"_reduce_25","children":[],"call":[" emit_unary_op "]}," RuboCop AST NodePattern Parser _reduce_22":{"type":"method","name":"_reduce_22","children":[],"call":[" emit_union "]}," RuboCop AST NodePattern Parser _reduce_21":{"type":"method","name":"_reduce_21","children":[],"call":[" emit_atom "]}," RuboCop AST NodePattern Parser _reduce_20":{"type":"method","name":"_reduce_20","children":[],"call":[" emit_atom "]}," RuboCop AST NodePattern Parser _reduce_19":{"type":"method","name":"_reduce_19","children":[],"call":[" emit_atom "]}," RuboCop AST NodePattern Parser _reduce_18":{"type":"method","name":"_reduce_18","children":[],"call":[" emit_atom "]}," RuboCop AST NodePattern Parser _reduce_17":{"type":"method","name":"_reduce_17","children":[],"call":[" emit_atom "]}," RuboCop AST NodePattern Parser _reduce_16":{"type":"method","name":"_reduce_16","children":[],"call":[" emit_atom "]}," RuboCop AST NodePattern Parser _reduce_15":{"type":"method","name":"_reduce_15","children":[],"call":[" emit_atom "]}," RuboCop AST NodePattern Parser _reduce_14":{"type":"method","name":"_reduce_14","children":[],"call":[" emit_atom "]}," RuboCop AST NodePattern Parser _reduce_13":{"type":"method","name":"_reduce_13","children":[],"call":[" emit_atom "]}," RuboCop AST NodePattern Parser _reduce_11":{"type":"method","name":"_reduce_11","children":[],"call":[" emit_call "]}," RuboCop AST NodePattern Parser _reduce_10":{"type":"method","name":"_reduce_10","children":[],"call":[" emit_call "]}," RuboCop AST NodePattern Parser _reduce_9":{"type":"method","name":"_reduce_9","children":[],"call":[" emit_call "]}," RuboCop AST NodePattern Parser _reduce_8":{"type":"method","name":"_reduce_8","children":[],"call":[" emit_capture "]}," RuboCop AST NodePattern Parser _reduce_7":{"type":"method","name":"_reduce_7","children":[],"call":[" emit_unary_op "]}," RuboCop AST NodePattern Parser _reduce_6":{"type":"method","name":"_reduce_6","children":[],"call":[" emit_unary_op "]}," RuboCop AST NodePattern Parser _reduce_5":{"type":"method","name":"_reduce_5","children":[],"call":[" emit_unary_op "]}," RuboCop AST NodePattern Parser _reduce_4":{"type":"method","name":"_reduce_4","children":[],"call":[" emit_list "]}," RuboCop AST NodePattern Parser _reduce_3":{"type":"method","name":"_reduce_3","children":[],"call":[" emit_list "]}," RuboCop AST NodePattern Parser _reduce_2":{"type":"method","name":"_reduce_2","children":[],"call":[" enforce_unary ","val [] "]}," RuboCop AST NodePattern Node Union in_sequence_head":{"type":"method","name":"in_sequence_head","children":[],"call":[" with ","replace first ","Subsequence  new ","child loc ","replace size > ","replace size ","child in_sequence_head "," children map "," children "," children any? ","child in_sequence_head  first ","child in_sequence_head  size > ","child in_sequence_head  size "]}," RuboCop AST NodePattern Node Union arity":{"type":"method","name":"arity","children":[],"call":["min == ","maxima max ","minima min "," map_min_max transpose "," map_min_max "," children map "," children "," children map map transpose "," children map map ","(send\n  (send nil :children) :map) transpose ","child arity_range minmax ","child arity_range ","minima min  == ","maxima max ima maxima max  ","minima min ima minima min  "," map_min_maxima max  transpose "," map_minima min _max transpose "," map_min_maxima max  "," map_minima min _max ","child arity_range minmaxima max  ","child arity_range minima min max "]}," RuboCop AST NodePattern Node Subsequence in_sequence_head":{"type":"method","name":"in_sequence_head","children":[],"call":[" with "," children [] "," children "," children first in_sequence_head "," children first "," children empty? "]}," RuboCop AST NodePattern Node Subsequence arity":{"type":"method","name":"arity","children":[],"call":["min == "," map_min_max transpose map "," map_min_max transpose "," map_min_max "," children map "," children "," children map map transpose map "," children map map transpose "," children map map ","(send\n  (send nil :children) :map) transpose map ","(send\n  (send nil :children) :map) transpose ","child arity_range minmax ","child arity_range "]}," RuboCop AST NodePattern Node MapMinMax map_min_max":{"type":"method","name":"map_min_max","children":[],"call":["r max ","r min ","enum map "]}," RuboCop AST NodePattern Node AnyOrder arity":{"type":"method","name":"arity","children":[],"call":["ARITIES  [] "," children size "," children "," ends_with_rest? "]}," RuboCop AST NodePattern Node AnyOrder rest_node":{"type":"method","name":"rest_node","children":[],"call":[" children last "," children "," ends_with_rest? "]}," RuboCop AST NodePattern Node AnyOrder ends_with_rest?":{"type":"method","name":"ends_with_rest?","children":[],"call":[" children last rest? "," children last "," children "]}," RuboCop AST NodePattern Node AnyOrder term_nodes":{"type":"method","name":"term_nodes","children":[],"call":[" children "," children [] "," ends_with_rest? "]}," RuboCop AST NodePattern Node Rest in_sequence_head":{"type":"method","name":"in_sequence_head","children":[],"call":["Node  new "]}," RuboCop AST NodePattern Node Rest arity":{"type":"method","name":"arity","children":[],"call":[]}," RuboCop AST NodePattern Node Rest rest?":{"type":"method","name":"rest?","children":[],"call":[]}," RuboCop AST NodePattern Node Repetition arity":{"type":"method","name":"arity","children":[],"call":["ARITIES  [] "," operator "]}," RuboCop AST NodePattern Node Repetition operator":{"type":"method","name":"operator","children":[],"call":[" children [] "," children "]}," RuboCop AST NodePattern Node Predicate arg_list":{"type":"method","name":"arg_list","children":[],"call":[" children [] "," children "]}," RuboCop AST NodePattern Node Predicate method_name":{"type":"method","name":"method_name","children":[],"call":[" children first "," children "]}," RuboCop AST NodePattern Node Sequence initialize":{"type":"method","name":"initialize","children":[],"call":["children [] ","children first in_sequence_head ","children first "]}," RuboCop AST NodePattern Node Capture in_sequence_head":{"type":"method","name":"in_sequence_head","children":[],"call":[" child in_sequence_head "," child "]}," RuboCop AST NodePattern Node Capture nb_captures":{"type":"method","name":"nb_captures","children":[],"call":["1 + "]}," RuboCop AST NodePattern Node Capture capture?":{"type":"method","name":"capture?","children":[],"call":[]}," RuboCop AST NodePattern Node ForbidInSeqHead in_sequence_head":{"type":"method","name":"in_sequence_head","children":[],"call":[" raise "," type "]}," RuboCop AST NodePattern Node with":{"type":"method","name":"with","children":[],"call":[" class new "," class "]}," RuboCop AST NodePattern Node arity_range":{"type":"method","name":"arity_range","children":[],"call":["INT_TO_RANGE  [] ","a is_a? "," arity "," arity  is_ arity ? ","  arity rity "]}," RuboCop AST NodePattern Node matches_within_set?":{"type":"method","name":"matches_within_set?","children":[],"call":["MATCHES_WITHIN_SET  include? "," type "]}," RuboCop AST NodePattern Node variadic?":{"type":"method","name":"variadic?","children":[],"call":[" arity is_a? "," arity "]}," RuboCop AST NodePattern Node nb_captures":{"type":"method","name":"nb_captures","children":[],"call":[" children_nodes sum "," children_nodes "]}," RuboCop AST NodePattern Node child":{"type":"method","name":"child","children":[],"call":[" children [] "," children "]}," RuboCop AST NodePattern Node children_nodes":{"type":"method","name":"children_nodes","children":[],"call":[" children grep "," children "]}," RuboCop AST NodePattern Node in_sequence_head":{"type":"method","name":"in_sequence_head","children":[],"call":[]}," RuboCop AST NodePattern Node arity":{"type":"method","name":"arity","children":[],"call":[]}," RuboCop AST NodePattern Node capture?":{"type":"method","name":"capture?","children":[],"call":[]}," RuboCop AST NodePattern Node rest?":{"type":"method","name":"rest?","children":[],"call":[]}," RuboCop AST NodePattern MethodDefiner compile_init":{"type":"method","name":"compile_init","children":[],"call":[" captures "," captures positive? "]}," RuboCop AST NodePattern MethodDefiner emit_lambda_code":{"type":"method","name":"emit_lambda_code","children":[],"call":[" emit_retval "," emit_yield_capture "," match_code "]}," RuboCop AST NodePattern MethodDefiner emit_method_code":{"type":"method","name":"emit_method_code","children":[],"call":[" emit_retval "," emit_yield_capture "," match_code "]}," RuboCop AST NodePattern MethodDefiner emit_params":{"type":"method","name":"emit_params","children":[],"call":["(splat\n  (lvar :first)) reject join ","(splat\n  (lvar :first)) reject "," emit_keyword_list "," emit_param_list "]}," RuboCop AST NodePattern MethodDefiner emit_keyword_list":{"type":"method","name":"emit_keyword_list","children":[],"call":["(send\n  (send nil :named_parameters) :map) join "," format "," named_parameters map "," named_parameters "]}," RuboCop AST NodePattern MethodDefiner emit_param_list":{"type":"method","name":"emit_param_list","children":[],"call":["(send\n  (begin\n    (irange\n      (int 1)\n      (send nil :positional_parameters))) :map) join ","(irange\n  (int 1)\n  (send nil :positional_parameters)) map "," positional_parameters "]}," RuboCop AST NodePattern MethodDefiner emit_retval":{"type":"method","name":"emit_retval","children":[],"call":[" captures == "," captures "," captures zero? "]}," RuboCop AST NodePattern MethodDefiner emit_yield_capture":{"type":"method","name":"emit_yield_capture","children":[],"call":[" captures == "," captures "," captures zero? "]}," RuboCop AST NodePattern MethodDefiner emit_node_search_body":{"type":"method","name":"emit_node_search_body","children":[],"call":[" match_code "," compile_init "," emit_params "]}," RuboCop AST NodePattern MethodDefiner emit_node_search":{"type":"method","name":"emit_node_search","children":[],"call":[" emit_node_search_body "," emit_yield_capture "," emit_params ","method_name to_s end_with? ","method_name to_s "]}," RuboCop AST NodePattern MethodDefiner def_helper":{"type":"method","name":"def_helper","children":[],"call":["base class_eval ","location lineno ","location path ","base send "," wrapping_block ","defaults empty? "," caller_locations first "," caller_locations "," caller_locations first  lineno "," caller_locations first  path "," caller_ caller_locations first s first "," caller_ caller_locations first s "]}," RuboCop AST NodePattern MethodDefiner wrapping_block":{"type":"method","name":"wrapping_block","children":[],"call":[" send "," proc "]}," RuboCop AST NodePattern MethodDefiner as_lambda":{"type":"method","name":"as_lambda","children":[],"call":[" eval "," compile_as_lambda "]}," RuboCop AST NodePattern MethodDefiner compile_as_lambda":{"type":"method","name":"compile_as_lambda","children":[],"call":[" emit_lambda_code "," compile_init "," emit_params "]}," RuboCop AST NodePattern MethodDefiner def_node_search":{"type":"method","name":"def_node_search","children":[],"call":[" emit_node_search "," def_helper "]}," RuboCop AST NodePattern MethodDefiner def_node_matcher":{"type":"method","name":"def_node_matcher","children":[],"call":[" emit_method_code "," compile_init "," emit_params "," def_helper "," emit_ emit_params  "]}," LexerRex next_token":{"type":"method","name":"next_token","children":[],"call":[" state= ","token last ","token first == ","token first "," raise ","token inspect "," location ","token size >= ","token size ","Array  === ","token nil? "," state "," state inspect "," ss string [] "," ss pos "," ss "," ss string "," action "," ss skip "," emit "," emit_comment ","s to_i ","s empty? "," emit_regexp "," ss matched ","Regexp  union "," ss eos? "]}," LexerRex location":{"type":"method","name":"location","children":[],"call":["(begin\n  (or\n    (send nil :filename)\n    (str \"<input>\"))) compact join ","(begin\n  (or\n    (send nil :filename)\n    (str \"<input>\"))) compact "," filename "]}," LexerRex parse_file":{"type":"method","name":"parse_file","children":[],"call":[" parse ","f read "," open "," filename= "]}," LexerRex parse":{"type":"method","name":"parse","children":[],"call":[" do_parse "," state "," ss= "," scanner_class new "," scanner_class "]}," LexerRex scanner_class":{"type":"method","name":"scanner_class","children":[],"call":[]}," LexerRex action":{"type":"method","name":"action","children":[],"call":[]}," LexerRex matches":{"type":"method","name":"matches","children":[],"call":["m pop ","m empty? ","m [] "," ss [] "," ss ","(irange\n  (int 1)\n  (int 9)) map "]}," RuboCop AST NodePattern Lexer token":{"type":"method","name":"token","children":[],"call":[]}," RuboCop AST NodePattern Lexer do_parse":{"type":"method","name":"do_parse","children":[],"call":[]}," RuboCop AST NodePattern Lexer emit_regexp":{"type":"method","name":"emit_regexp","children":[],"call":["Regexp  new "," emit ","(send\n  (send\n    (lvar :options) :each_char) :map) sum ","REGEXP_OPTIONS  [] ","options each_char map ","options each_char "," ss captures "," ss "," ss [] ","options each_char sum ","(send\n  (send\n    (lvar : ss [] ) :each_char) :map) sum "," ss []  each_char map "," ss []  each_char "," ss []  each_char sum "]}," RuboCop AST NodePattern Lexer emit_comment":{"type":"method","name":"emit_comment","children":[],"call":[]}," RuboCop AST NodePattern Lexer emit":{"type":"method","name":"emit","children":[],"call":["@tokens << "," token "," block_given? "," ss matched "," ss "," ss captures first "," ss captures "," ss [] ","@ token s << ","  token  "]}," RuboCop AST NodePattern Lexer initialize":{"type":"method","name":"initialize","children":[],"call":[" parse "]}," RuboCop AST NodePattern Compiler new_capture":{"type":"method","name":"new_capture","children":[],"call":[]}," RuboCop AST NodePattern Compiler enforce_same_captures":{"type":"method","name":"enforce_same_captures","children":[],"call":[" raise ","captures_after != ","enum each "," to_enum "," __method__ "," block_given? "]}," RuboCop AST NodePattern Compiler freeze":{"type":"method","name":"freeze","children":[],"call":["@named_parameters freeze "]}," RuboCop AST NodePattern Compiler parser":{"type":"method","name":"parser","children":[],"call":["Parser  new "]}," RuboCop AST NodePattern Compiler compile_sequence":{"type":"method","name":"compile_sequence","children":[],"call":[" class SequenceSubcompiler  new compile_sequence "," class SequenceSubcompiler  new "," class "]}," RuboCop AST NodePattern Compiler compile_as_node_pattern":{"type":"method","name":"compile_as_node_pattern","children":[],"call":[" class NodePatternSubcompiler  new compile "," class NodePatternSubcompiler  new "," class "]}," RuboCop AST NodePattern Compiler compile_as_atom":{"type":"method","name":"compile_as_atom","children":[],"call":["@atom_subcompiler compile "]}," RuboCop AST NodePattern Compiler each_union":{"type":"method","name":"each_union","children":[],"call":[" enforce_same_captures "," binding union_bind "," binding "]}," RuboCop AST NodePattern Compiler named_parameter":{"type":"method","name":"named_parameter","children":[],"call":["@named_parameters << "]}," RuboCop AST NodePattern Compiler positional_parameter":{"type":"method","name":"positional_parameter","children":[],"call":["number > "]}," RuboCop AST NodePattern Compiler Subcompiler inherited":{"type":"method","name":"inherited","children":[],"call":["us registry dup ","us registry ","base class_eval "]}," RuboCop AST NodePattern Compiler Subcompiler method_added":{"type":"method","name":"method_added","children":[],"call":["@registry []= ","Regexp  last_match to_sym ","Regexp  last_match ","method =~ "]}," RuboCop AST NodePattern Compiler Subcompiler do_compile":{"type":"method","name":"do_compile","children":[],"call":[" send "," class registry fetch "," node type "," node "," class registry "," class "]}," RuboCop AST NodePattern Compiler Subcompiler compile":{"type":"method","name":"compile","children":[],"call":[" do_compile "]}," RuboCop AST NodePattern Compiler Subcompiler initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop AST NodePattern Compiler SequenceSubcompiler merge_forks!":{"type":"method","name":"merge_forks!","children":[],"call":["sub_compilers all? ","forks []= ","sub sync ","forks each "," use_index_from_end ","sub_compilers first cur_index ","sub_compilers first "," node variadic? ! "," node variadic? "," node ","forks keys ","forks keys  all? ","forks keys  first cur_index ","forks keys  first "]}," RuboCop AST NodePattern Compiler SequenceSubcompiler preserve_union_start":{"type":"method","name":"preserve_union_start","children":[],"call":["forks transform_values! "," compiler with_temp_variables "," compiler ","forks size <= ","forks size ","@cur_index != "]}," RuboCop AST NodePattern Compiler SequenceSubcompiler compile_union_forks":{"type":"method","name":"compile_union_forks","children":[],"call":["(send\n  (send\n    (send nil :compiler) :each_union\n    (send\n      (send nil :node) :children)) :map) to_h ","@cur_index != ","fork compile_terms "," dup ","child children ","child is_a? "," compiler each_union map "," compiler each_union "," node children "," node "," compiler "," compiler each_union to_h "," dup  compile_terms "]}," RuboCop AST NodePattern Compiler SequenceSubcompiler compile_child_nb_guard":{"type":"method","name":"compile_child_nb_guard","children":[],"call":[" compile_remaining ","arity_range max ","arity_range begin "]}," RuboCop AST NodePattern Compiler SequenceSubcompiler compile_loop":{"type":"method","name":"compile_loop","children":[],"call":[" compile_min_check "," compile_max_matched "]}," RuboCop AST NodePattern Compiler SequenceSubcompiler compile_loop_advance":{"type":"method","name":"compile_loop_advance","children":[],"call":[]}," RuboCop AST NodePattern Compiler SequenceSubcompiler use_index_from_end":{"type":"method","name":"use_index_from_end","children":[],"call":["@remaining_arity begin -@ - ","@remaining_arity begin -@ ","@remaining_arity begin ","@remaining_arity begin != ","@remaining_arity max ","@cur_index == ","@remaining_arity begin -@ -  == "]}," RuboCop AST NodePattern Compiler SequenceSubcompiler within_loop":{"type":"method","name":"within_loop","children":[],"call":[" sync "]}," RuboCop AST NodePattern Compiler SequenceSubcompiler compile_index":{"type":"method","name":"compile_index","children":[],"call":["(send\n  (lvar :cur) :+\n  (const nil :DELTA)) -@ ","cur + ","cur >= "]}," RuboCop AST NodePattern Compiler SequenceSubcompiler compile_cur_index":{"type":"method","name":"compile_cur_index","children":[],"call":[" compile_index "]}," RuboCop AST NodePattern Compiler SequenceSubcompiler empty_loop":{"type":"method","name":"empty_loop","children":[],"call":["@remaining_arity begin -@ - ","@remaining_arity begin -@ ","@remaining_arity begin "]}," RuboCop AST NodePattern Compiler SequenceSubcompiler compile_max_matched":{"type":"method","name":"compile_max_matched","children":[],"call":[" node arity max "," node arity "," node "," node arity end infinite? "," node arity end ","@remaining_arity begin "," compile_remaining "," node variadic? "]}," RuboCop AST NodePattern Compiler SequenceSubcompiler compile_remaining":{"type":"method","name":"compile_remaining","children":[],"call":["(send\n  (ivar :@cur_index) :+\n  (const nil :DELTA)) -@ ","@cur_index + "]}," RuboCop AST NodePattern Compiler SequenceSubcompiler compile_min_check":{"type":"method","name":"compile_min_check","children":[],"call":["(lvar :not_too_much_remaining) compact join ","(lvar :not_too_much_remaining) compact "," compile_matched ","min_to_match positive? "," node arity_range begin "," node arity_range "," node ","@remaining_arity max "," compile_remaining ","@remaining_arity end infinite? ","@remaining_arity end "," node variadic? "," node arity_range begin  positive? "]}," RuboCop AST NodePattern Compiler SequenceSubcompiler remaining_arities":{"type":"method","name":"remaining_arities","children":[],"call":["arities push ","(send\n  (send\n    (send\n      (lvar :children) :reverse) :map\n    (block-pass\n      (sym :arity_range))) :map) reverse! ","last max + ","r max ","last max ","last begin + ","r begin ","last begin ","children reverse map map ","children reverse map ","children reverse ","(send\n  (send\n    (send\n      (lvar :children) :reverse) :map\n    (block-pass\n      (sym :arity_range))) :map) reverse!  push "]}," RuboCop AST NodePattern Compiler SequenceSubcompiler sync":{"type":"method","name":"sync","children":[],"call":[" compile_loop_advance "," compile_cur_index "]}," RuboCop AST NodePattern Compiler SequenceSubcompiler compile_terms":{"type":"method","name":"compile_terms","children":[],"call":["(lvar :guard) join "," compile "," handle_prev ","arities shift "," use_index_from_end ","children map ","children empty? "," compile_child_nb_guard "," remaining_arities ","(lvar : compile_child_nb_guard ) join "," remaining_arities  shift "," compile_child_nb_ compile_child_nb_guard  "," remaining_ remaining_arities  "]}," RuboCop AST NodePattern Compiler SequenceSubcompiler handle_prev":{"type":"method","name":"handle_prev","children":[],"call":[]}," RuboCop AST NodePattern Compiler SequenceSubcompiler compile_matched":{"type":"method","name":"compile_matched","children":[],"call":[" compile_index ","@prev_index == "," compile_cur_index "]}," RuboCop AST NodePattern Compiler SequenceSubcompiler compile_captured_repetition":{"type":"method","name":"compile_captured_repetition","children":[],"call":[" compile_loop "," compiler with_temp_variables "," compiler "," compiler captures "," compiler captures - "]}," RuboCop AST NodePattern Compiler SequenceSubcompiler compile_and_advance":{"type":"method","name":"compile_and_advance","children":[],"call":[" compile_loop_advance "]}," RuboCop AST NodePattern Compiler SequenceSubcompiler visit_rest":{"type":"method","name":"visit_rest","children":[],"call":[" empty_loop "]}," RuboCop AST NodePattern Compiler SequenceSubcompiler visit_capture":{"type":"method","name":"visit_capture","children":[],"call":[" compile_matched "," compile "," node child "," node "," compiler next_capture "," compiler "," visit_other_type "," node child arity == "," node child arity "]}," RuboCop AST NodePattern Compiler SequenceSubcompiler compile_any_order_else":{"type":"method","name":"compile_any_order_else","children":[],"call":[" compiler next_capture "," compiler ","rest capture? ","rest ! "," node rest_node "," node "," node rest_node  capture? "," node rest_node  ! "," node  node rest_node _node "]}," RuboCop AST NodePattern Compiler SequenceSubcompiler compile_any_order_branches":{"type":"method","name":"compile_any_order_branches","children":[],"call":[" compiler compile_as_node_pattern "," compiler "," node term_nodes map with_index "," node term_nodes map "," node term_nodes "," node "]}," RuboCop AST NodePattern Compiler SequenceSubcompiler compile_case":{"type":"method","name":"compile_case","children":[],"call":["when_branches join "]}," RuboCop AST NodePattern Compiler SequenceSubcompiler visit_union":{"type":"method","name":"visit_union","children":[],"call":["forks values join ","forks values "," merge_forks! "," preserve_union_start "," compile_union_forks "," visit_other_type "," node arity == "," node arity "," node "," compile_union_forks  values join "," compile_union_forks  values "," merge_ compile_union_forks ! "," compile_union_ compile_union_forks  "]}," RuboCop AST NodePattern Compiler SequenceSubcompiler visit_any_order":{"type":"method","name":"visit_any_order","children":[],"call":[" compile_loop "," node term_nodes size "," node term_nodes "," node "," node rest_node "," compile_loop_advance "," compile_case "," compile_any_order_else "," compile_any_order_branches "," compiler with_temp_variables "," compiler "," within_loop "]}," RuboCop AST NodePattern Compiler SequenceSubcompiler visit_repetition":{"type":"method","name":"visit_repetition","children":[],"call":[" compile_captured_repetition "," compile_loop ","child_captures zero? "," compile "," node child "," node "," node child nb_captures "," within_loop "," node child nb_captures  zero? "]}," RuboCop AST NodePattern Compiler SequenceSubcompiler visit_other_type":{"type":"method","name":"visit_other_type","children":[],"call":[" compile_and_advance "," compiler compile_as_node_pattern "," node "," compiler ","@cur_index + ","@cur_index negative? "]}," RuboCop AST NodePattern Compiler SequenceSubcompiler compile_sequence":{"type":"method","name":"compile_sequence","children":[],"call":[" compile_terms "," compiler with_temp_variables "," compiler "]}," RuboCop AST NodePattern Compiler SequenceSubcompiler initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop AST NodePattern Compiler NodePatternSubcompiler multiple_access":{"type":"method","name":"multiple_access","children":[],"call":[" access "," compiler with_temp_variables "," compiler "]}," RuboCop AST NodePattern Compiler NodePatternSubcompiler compile_guard_clause":{"type":"method","name":"compile_guard_clause","children":[],"call":[" access "]}," RuboCop AST NodePattern Compiler NodePatternSubcompiler access_node":{"type":"method","name":"access_node","children":[],"call":[" access "," compile_guard_clause "," seq_head "]}," RuboCop AST NodePattern Compiler NodePatternSubcompiler access_element":{"type":"method","name":"access_element","children":[],"call":[" access "," seq_head "]}," RuboCop AST NodePattern Compiler NodePatternSubcompiler compile_args":{"type":"method","name":"compile_args","children":[],"call":["args join "," compiler compile_as_atom "," compiler "]}," RuboCop AST NodePattern Compiler NodePatternSubcompiler compile_value_match":{"type":"method","name":"compile_value_match","children":[],"call":[" access_element "]}," RuboCop AST NodePattern Compiler NodePatternSubcompiler visit_other_type":{"type":"method","name":"visit_other_type","children":[],"call":[" compile_value_match "," compiler compile_as_atom "," node "," compiler "," compile_ compiler compile_as_atom _match "]}," RuboCop AST NodePattern Compiler NodePatternSubcompiler visit_sequence":{"type":"method","name":"visit_sequence","children":[],"call":[" compile_guard_clause "," compiler compile_sequence "," node "," compiler "," multiple_access "]}," RuboCop AST NodePattern Compiler NodePatternSubcompiler visit_node_type":{"type":"method","name":"visit_node_type","children":[],"call":[" node child to_s tr "," node child to_s "," node child "," node "," access_node "]}," RuboCop AST NodePattern Compiler NodePatternSubcompiler visit_function_call":{"type":"method","name":"visit_function_call","children":[],"call":[" compile_args "," access_element "," node arg_list "," node "," node method_name "]}," RuboCop AST NodePattern Compiler NodePatternSubcompiler visit_predicate":{"type":"method","name":"visit_predicate","children":[],"call":[" compile_args "," node arg_list "," node "," node method_name "," access_element "]}," RuboCop AST NodePattern Compiler NodePatternSubcompiler visit_intersection":{"type":"method","name":"visit_intersection","children":[],"call":["(send\n  (send\n    (send nil :node) :children) :map) join "," compile "," node children map "," node children "," node "," multiple_access "]}," RuboCop AST NodePattern Compiler NodePatternSubcompiler visit_union":{"type":"method","name":"visit_union","children":[],"call":["terms join "," compile "," compiler each_union map "," compiler each_union "," node children "," node "," compiler "," multiple_access "]}," RuboCop AST NodePattern Compiler NodePatternSubcompiler visit_capture":{"type":"method","name":"visit_capture","children":[],"call":[" compile "," node child "," node "," access_element "," compiler next_capture "," compiler "]}," RuboCop AST NodePattern Compiler NodePatternSubcompiler visit_unify":{"type":"method","name":"visit_unify","children":[],"call":[" compile_value_match "," access_element "," compiler bind "," node child "," node "," compiler "]}," RuboCop AST NodePattern Compiler NodePatternSubcompiler visit_wildcard":{"type":"method","name":"visit_wildcard","children":[],"call":[]}," RuboCop AST NodePattern Compiler NodePatternSubcompiler visit_descend":{"type":"method","name":"visit_descend","children":[],"call":["(str \"::RuboCop::AST::NodePattern.descend(\") chomp "," compiler compile_as_node_pattern "," node child "," node "," compiler "," access "," compiler with_temp_variables "]}," RuboCop AST NodePattern Compiler NodePatternSubcompiler visit_ascend":{"type":"method","name":"visit_ascend","children":[],"call":[" access_node "," compiler compile_as_node_pattern "," node child "," node "," compiler "," compiler with_temp_variables "]}," RuboCop AST NodePattern Compiler NodePatternSubcompiler visit_negation":{"type":"method","name":"visit_negation","children":[],"call":[" compile "," node child "," node "]}," RuboCop AST NodePattern Compiler NodePatternSubcompiler initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop AST NodePattern Compiler Debug InstrumentationSubcompiler node_id":{"type":"method","name":"node_id","children":[],"call":[" compiler node_ids [] "," node "," compiler node_ids "," compiler "]}," RuboCop AST NodePattern Compiler Debug InstrumentationSubcompiler tracer":{"type":"method","name":"tracer","children":[],"call":[" node_id "]}," RuboCop AST NodePattern Compiler Debug InstrumentationSubcompiler do_compile":{"type":"method","name":"do_compile","children":[],"call":[" tracer "]}," RuboCop AST NodePattern Compiler Debug parser":{"type":"method","name":"parser","children":[],"call":["Parser WithMeta  new "]}," RuboCop AST NodePattern Compiler Debug named_parameters":{"type":"method","name":"named_parameters","children":[],"call":[" << "]}," RuboCop AST NodePattern Compiler Debug initialize":{"type":"method","name":"initialize","children":[],"call":["(send\n  (const nil :Hash) :new) compare_by_identity ","h []= ","h size ","Hash  new "]}," RuboCop AST NodePattern Compiler Debug Colorizer ruby_parser":{"type":"method","name":"ruby_parser","children":[],"call":[" Parser CurrentRuby  new "," RuboCop AST Builder  new "," require "]}," RuboCop AST NodePattern Compiler Debug Colorizer ruby_ast":{"type":"method","name":"ruby_ast","children":[],"call":[" ruby_parser parse "," ruby_parser "," Parser Source Buffer  new "]}," RuboCop AST NodePattern Compiler Debug Colorizer test":{"type":"method","name":"test","children":[],"call":[" class Result  new "," class ","@node_pattern as_lambda call ","@node_pattern as_lambda "," ruby_ast ","ruby is_a? ","  ruby_ast _ast "," ruby_ast  is_a? "]}," RuboCop AST NodePattern Compiler Debug Colorizer initialize":{"type":"method","name":"initialize","children":[],"call":[" RuboCop AST NodePattern  new "]}," RuboCop AST NodePattern Compiler Debug Colorizer ast":{"type":"method","name":"ast","children":[],"call":[" colorizer node_pattern ast "," colorizer node_pattern "," colorizer "]}," RuboCop AST NodePattern Compiler Debug Colorizer color_map_for":{"type":"method","name":"color_map_for","children":[],"call":["range to_a to_h ","range to_a ","node loc "]}," RuboCop AST NodePattern Compiler Debug Colorizer matched?":{"type":"method","name":"matched?","children":[],"call":[" trace matched? "," trace "," colorizer compiler node_ids fetch "," colorizer compiler node_ids "," colorizer compiler "," colorizer "]}," RuboCop AST NodePattern Compiler Debug Colorizer match_map":{"type":"method","name":"match_map","children":[],"call":[" matched? "," ast each_node to_h "," ast each_node "," ast "]}," RuboCop AST NodePattern Compiler Debug Colorizer color_map":{"type":"method","name":"color_map","children":[],"call":["h default= ","color_scheme fetch ","(send\n  (block\n    (send\n      (send nil :match_map) :transform_values)\n    (args\n      (arg :matched))\n    (send\n      (lvar :color_scheme) :fetch\n      (lvar :matched))) :map) inject tap ","(send\n  (block\n    (send\n      (send nil :match_map) :transform_values)\n    (args\n      (arg :matched))\n    (send\n      (lvar :color_scheme) :fetch\n      (lvar :matched))) :map) inject "," color_map_for ","(send\n  (send nil :match_map) :transform_values) map "," match_map transform_values "," match_map "]}," RuboCop AST NodePattern Compiler Debug Colorizer colorize":{"type":"method","name":"colorize","children":[],"call":["(send\n  (send\n    (send\n      (send\n        (send\n          (send\n            (send\n              (send nil :ast) :loc) :expression) :source_buffer) :source) :chars) :map) :with_index) join "," Rainbow color ","map [] "," Rainbow "," ast loc expression source_buffer source chars map with_index "," ast loc expression source_buffer source chars map "," ast loc expression source_buffer source chars "," ast loc expression source_buffer source "," ast loc expression source_buffer "," ast loc expression "," ast loc "," ast "," color_map ","(send\n  (send\n    (send\n      (send\n        (send\n          (send\n            (send nil :ast) :source_range) :source_buffer) :source) :chars) :map) :with_index) join "," ast source_range source_buffer source chars map with_index "," ast source_range source_buffer source chars map "," ast source_range source_buffer source chars "," ast source_range source_buffer source "," ast source_range source_buffer "," ast source_range ","(send\n  (send\n    (send\n      (send\n        (send\n          (send\n            (send\n              (send nil :ast) :loc) :expression) :source_buffer) :source) :chars) : color_map ) :with_index) join "," color_map  [] "," ast loc expression source_buffer source chars  color_map  with_index "," ast loc expression source_buffer source chars  color_map  "," color_ color_map  ","(send\n  (send\n    (send\n      (send\n        (send\n          (send\n            (send nil :ast) :source_range) :source_buffer) :source) :chars) : color_map ) :with_index) join "," ast source_range source_buffer source chars  color_map  with_index "," ast source_range source_buffer source chars  color_map  "]}," RuboCop AST NodePattern Compiler Debug Trace matched?":{"type":"method","name":"matched?","children":[],"call":["@visit [] "]}," RuboCop AST NodePattern Compiler Debug Trace success":{"type":"method","name":"success","children":[],"call":["@visit []= "]}," RuboCop AST NodePattern Compiler Debug Trace enter":{"type":"method","name":"enter","children":[],"call":["@visit []= "]}," RuboCop AST NodePattern Compiler Debug Trace initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop AST NodePattern Compiler Binding forbid":{"type":"method","name":"forbid","children":[],"call":["@bound []= ","names each "]}," RuboCop AST NodePattern Compiler Binding union_bind":{"type":"method","name":"union_bind","children":[],"call":[" forbid ","union - ","newly_bound_intersection | ","newly_bound_intersection nil? ","@bound keys - ","bound_before keys ","@bound keys ","bound_before dup ","enum each ","@bound dup "," to_enum "," __method__ "," block_given? ","newly_bound_intersection |  - ","@bound keys - _intersection | ","@bound keys - _intersection nil? ","bound_before dup  keys - ","@bound dup  keys ","bound_before dup  keys ","@bound dup  dup ","bound_before dup  dup "]}," RuboCop AST NodePattern Compiler Binding bind":{"type":"method","name":"bind","children":[],"call":[" raise ","var == ","@bound []= ","name gsub ","@bound fetch ","@bou@bound []= d []= ","@bound []= ame gsub ","@bou@bound []= d fetch "]}," RuboCop AST NodePattern Compiler Binding initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop AST NodePattern Compiler AtomSubcompiler visit_other_type":{"type":"method","name":"visit_other_type","children":[],"call":[" compiler compile_as_node_pattern "," node "," compiler "," compiler with_temp_variables "]}," RuboCop AST NodePattern Compiler AtomSubcompiler visit_set":{"type":"method","name":"visit_set","children":[],"call":["NodePattern Sets  [] "," node children map to_set freeze "," node children map to_set "," node children map "," node children "," node "," node children to_set freeze "," node children to_set "," node children map to_ node children map to_set freeze  freeze "," node children map to_ node children to_set freeze  freeze "," node children map to_ node children map to_set freeze  "," node children map to_ node children to_set freeze  "," node children to_ node children map to_set freeze  freeze "," node children to_ node children to_set freeze  freeze "," node children to_ node children map to_set freeze  "," node children to_ node children to_set freeze  "]}," RuboCop AST NodePattern Compiler AtomSubcompiler visit_positional_parameter":{"type":"method","name":"visit_positional_parameter","children":[],"call":[" compiler positional_parameter "," node child "," node "," compiler "]}," RuboCop AST NodePattern Compiler AtomSubcompiler visit_named_parameter":{"type":"method","name":"visit_named_parameter","children":[],"call":[" compiler named_parameter "," node child "," node "," compiler "]}," RuboCop AST NodePattern Compiler AtomSubcompiler visit_const":{"type":"method","name":"visit_const","children":[],"call":[" node child "," node "]}," RuboCop AST NodePattern Compiler AtomSubcompiler visit_symbol":{"type":"method","name":"visit_symbol","children":[],"call":[" node child inspect "," node child "," node "]}," RuboCop AST NodePattern Compiler AtomSubcompiler visit_unify":{"type":"method","name":"visit_unify","children":[],"call":[" raise "," compiler bind "," node child "," node "," compiler "]}," RuboCop AST NodePattern Comment inspect":{"type":"method","name":"inspect","children":[],"call":[" text inspect "," text ","@location expression "]}," RuboCop AST NodePattern Comment ==":{"type":"method","name":"==","children":[],"call":["@location == ","other location ","other is_a? "]}," RuboCop AST NodePattern Comment text":{"type":"method","name":"text","children":[],"call":[" loc expression source freeze "," loc expression source "," loc expression "," loc "]}," RuboCop AST NodePattern Comment initialize":{"type":"method","name":"initialize","children":[],"call":[" freeze "," Parser Source Map  new "]}," RuboCop AST NodePattern Builder union_children":{"type":"method","name":"union_children","children":[],"call":[" emit_subsequence ","pattern_lists map "," raise ","children empty? ","pattern_lists first ","pattern_lists size == ","pattern_lists size ","pattern_lists first  empty? "]}," RuboCop AST NodePattern Builder n":{"type":"method","name":"n","children":[],"call":["Node MAP  [] new ","Node MAP  [] "]}," RuboCop AST NodePattern Builder optimizable_as_set?":{"type":"method","name":"optimizable_as_set?","children":[],"call":["children all? "]}," RuboCop AST NodePattern Builder emit_subsequence":{"type":"method","name":"emit_subsequence","children":[],"call":[" emit_list ","node_list first ","node_list size == ","node_list size "]}," RuboCop AST NodePattern Builder emit_union":{"type":"method","name":"emit_union","children":[],"call":[" emit_list "," optimizable_as_set? "," union_children "," union_ union_children  "]}," RuboCop AST NodePattern Builder emit_call":{"type":"method","name":"emit_call","children":[],"call":[" n "]}," RuboCop AST NodePattern Builder emit_list":{"type":"method","name":"emit_list","children":[],"call":[" n "]}," RuboCop AST NodePattern Builder emit_unary_op":{"type":"method","name":"emit_unary_op","children":[],"call":[" n "]}," RuboCop AST NodePattern Builder emit_atom":{"type":"method","name":"emit_atom","children":[],"call":[" n "]}," RuboCop AST NodePattern Builder emit_capture":{"type":"method","name":"emit_capture","children":[],"call":[" emit_unary_op ","capture_token nil? "]}," RuboCop AST Descendence visit_descendants":{"type":"method","name":"visit_descendants","children":[],"call":["child visit_descendants ","types include? ","child type ","types empty? "," each_child_node ","child is_a? "," children each "," children "]}," RuboCop AST Descendence each_node":{"type":"method","name":"each_node","children":[],"call":[" visit_descendants ","types include? "," type ","types empty? "," to_enum "," __method__ "," block_given? "]}," RuboCop AST Descendence descendants":{"type":"method","name":"descendants","children":[],"call":[" each_descendant to_a "," each_descendant "]}," RuboCop AST Descendence each_descendant":{"type":"method","name":"each_descendant","children":[],"call":[" visit_descendants "," to_enum "," __method__ "," block_given? "]}," RuboCop AST Descendence child_nodes":{"type":"method","name":"child_nodes","children":[],"call":[" each_child_node to_a "," each_child_node ","nodes << "]}," RuboCop AST Descendence each_child_node":{"type":"method","name":"each_child_node","children":[],"call":["types include? ","child type ","types empty? ","child is_a? "," children each "," children "," to_enum "," __method__ "," block_given? "]}," RuboCop AST Traversal CallbackCompiler arity_check":{"type":"method","name":"arity_check","children":[],"call":[]}," RuboCop AST Traversal CallbackCompiler body":{"type":"method","name":"body","children":[],"call":["(send\n  (send\n    (lvar :signature) :map) :with_index) unshift join ","(send\n  (send\n    (lvar :signature) :map) :with_index) unshift ","TEMPLATE  [] gsub ","i to_s ","TEMPLATE  [] ","signature map with_index ","signature map "]}," RuboCop AST Traversal CallbackCompiler def_callback":{"type":"method","name":"def_callback","children":[],"call":[" alias_method ","aliases each "," module_eval "," caller_locations first lineno "," caller_locations first "," caller_locations "," caller_locations first  caller_locations first lineno  "]}," RuboCop AST DefNode endless?":{"type":"method","name":"endless?","children":[],"call":[" loc end ! "," loc end "," loc "]}," RuboCop AST Procarg0Node name":{"type":"method","name":"name","children":[],"call":[" node_parts [] name "," node_parts [] "," node_parts "]}," RuboCop AST OrAsgnNode operator":{"type":"method","name":"operator","children":[],"call":[]}," RuboCop AST OpAsgnNode expression":{"type":"method","name":"expression","children":[],"call":[" node_parts last "," node_parts "]}," RuboCop AST OpAsgnNode operator":{"type":"method","name":"operator","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST OpAsgnNode name":{"type":"method","name":"name","children":[],"call":[" assignment_node name "," assignment_node "]}," RuboCop AST OpAsgnNode assignment_node":{"type":"method","name":"assignment_node","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST MethodDispatchNode def_modifier":{"type":"method","name":"def_modifier","children":[],"call":[" def_modifier ","arg defs_type? ","arg def_type? ","arg is_a? ","node receiver nil? ","node receiver ","node send_type? ","node children [] ","node children ","node children []  defs_type? ","node children []  def_type? ","node children []  is_a? "]}," RuboCop AST InPatternNode body":{"type":"method","name":"body","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST InPatternNode then?":{"type":"method","name":"then?","children":[],"call":[" loc begin "," loc "]}," RuboCop AST InPatternNode branch_index":{"type":"method","name":"branch_index","children":[],"call":[" parent in_pattern_branches index "," parent in_pattern_branches "," parent "]}," RuboCop AST InPatternNode pattern":{"type":"method","name":"pattern","children":[],"call":[" node_parts first "," node_parts "]}," RuboCop AST DstrNode value":{"type":"method","name":"value","children":[],"call":["(send\n  (send nil :child_nodes) :map) join ","child source ","child value ","child respond_to? "," child_nodes map "," child_nodes "]}," RuboCop AST CasgnNode expression":{"type":"method","name":"expression","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST CasgnNode name":{"type":"method","name":"name","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST CasgnNode namespace":{"type":"method","name":"namespace","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST CaseMatchNode branches":{"type":"method","name":"branches","children":[],"call":["bodies push "," else_branch "," else_branch empty_else_type? "," else? "," in_pattern_branches map "," in_pattern_branches "," in_pattern_branches map  push "]}," RuboCop AST BlockNode numbered_arguments":{"type":"method","name":"numbered_arguments","children":[],"call":["(send\n  (send\n    (int 1) :upto\n    (lvar :max_param)) :map) freeze ","ArgNode  new ","1 upto map ","1 upto "," children [] "," children "," freeze "," numblock_type? ","(send\n  (send\n    (int 1) :upto\n    (lvar : children [] )) :map) freeze "]}," RuboCop AST BlockNode argument_list":{"type":"method","name":"argument_list","children":[],"call":[" arguments argument_list "," arguments "," numbered_arguments "," numblock_type? "]}," RuboCop AST AsgnNode expression":{"type":"method","name":"expression","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST AsgnNode name":{"type":"method","name":"name","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST ArgsNode argument_list":{"type":"method","name":"argument_list","children":[],"call":[" each_descendant to_a freeze "," each_descendant to_a "," each_descendant "]}," RuboCop AST ArgNode default?":{"type":"method","name":"default?","children":[],"call":[" kwoptarg_type? "," optarg_type? "]}," RuboCop AST ArgNode default_value":{"type":"method","name":"default_value","children":[],"call":[" node_parts [] "," node_parts "," default? "]}," RuboCop AST ArgNode name":{"type":"method","name":"name","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST AndAsgnNode operator":{"type":"method","name":"operator","children":[],"call":[]}," RuboCop AST Ext RangeMinMax minmax":{"type":"method","name":"minmax","children":[],"call":[" max "," min "]}," RuboCop AST PairNode value_omission?":{"type":"method","name":"value_omission?","children":[],"call":[" source end_with? "," source "]}," RuboCop AST Token regexp_dot?":{"type":"method","name":"regexp_dot?","children":[],"call":["(sym :tDOT2) include? "," type "]}," RuboCop AST Token regexp_dots?":{"type":"method","name":"regexp_dots?","children":[],"call":["(sym :tDOT2) include? "," type "]}," RuboCop AST RegexpNode fixed_encoding?":{"type":"method","name":"fixed_encoding?","children":[],"call":[" regopt_include? "]}," RuboCop AST Token dot?":{"type":"method","name":"dot?","children":[],"call":[" type == "," type "]}," RuboCop AST Token new_line?":{"type":"method","name":"new_line?","children":[],"call":[" type == "," type "]}," RuboCop AST StrNode character_literal?":{"type":"method","name":"character_literal?","children":[],"call":[" loc begin is? "," loc begin "," loc "," loc respond_to? "]}," RuboCop AST Node send_type?":{"type":"method","name":"send_type?","children":[],"call":[]}," RuboCop AST SendNode send_type?":{"type":"method","name":"send_type?","children":[],"call":[]}," RuboCop AST CsendNode send_type?":{"type":"method","name":"send_type?","children":[],"call":[]}," RuboCop AST NodePattern Node source_range":{"type":"method","name":"source_range","children":[],"call":[" loc expression "," loc "]}," RuboCop AST KeywordSplatNode kwsplat_type?":{"type":"method","name":"kwsplat_type?","children":[],"call":[]}," RuboCop AST MethodDispatchNode selector":{"type":"method","name":"selector","children":[],"call":[" loc selector "," loc "," loc keyword "," loc respond_to? "]}," RuboCop AST BlockNode last_argument":{"type":"method","name":"last_argument","children":[],"call":[" arguments [] "," arguments "]}," RuboCop AST BlockNode first_argument":{"type":"method","name":"first_argument","children":[],"call":[" arguments [] "," arguments "]}}