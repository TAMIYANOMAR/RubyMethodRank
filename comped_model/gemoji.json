{" Emoji names":{"type":"method","name":"names","children":[],"call":[" mapping keys sort "," mapping keys "," mapping "]}," Emoji images_path":{"type":"method","name":"images_path","children":[],"call":["File  expand_path "]}," Emoji path":{"type":"method","name":"path","children":[],"call":[]}," Emoji inverted_mapping":{"type":"method","name":"inverted_mapping","children":[],"call":["inverted_mapping []= ","unicodes each ","unicodes nil? "," mapping each "," mapping "," tap "]}," Emoji mapping":{"type":"method","name":"mapping","children":[],"call":["mapping []= ","File  readlink ","File  symlink? ","mapping [] << ","codepoints split map pack ","codepoints split map ","codepoints split ","mapping [] ","unicode_filename match [] ","unicode_filename match "," loop ","File  basename ","Dir  [] each ","Dir  [] "," images_path "," tap ","unicode_filename match []  split map pack ","unicode_filename match []  split map ","unicode_filename match []  split ","unicode_fileFile  basename  match [] ","unicode_fileFile  basename  match ","File  baseFile  basename  "]}," Emoji name_for":{"type":"method","name":"name_for","children":[],"call":[" inverted_mapping [] "," inverted_mapping "]}," Emoji unicode_for":{"type":"method","name":"unicode_for","children":[],"call":[" Array last "," Array "," mapping [] "," mapping "]}," Emoji custom":{"type":"method","name":"custom","children":[],"call":["(send\n  (send nil :mapping) :select) keys sort ","(send\n  (send nil :mapping) :select) keys ","unicode nil? "," mapping select "," mapping "]}," Emoji unicodes":{"type":"method","name":"unicodes","children":[],"call":[" inverted_mapping keys "," inverted_mapping "]}," Emoji unicodes_index":{"type":"method","name":"unicodes_index","children":[],"call":[" all "]}," Emoji names_index":{"type":"method","name":"names_index","children":[],"call":[" all "]}," Emoji parse_data_file":{"type":"method","name":"parse_data_file","children":[],"call":["emoji add_tag ","raw_emoji fetch each ","raw_emoji fetch ","emoji add_unicode_alias ","uni sub ","uni index ","unicodes each "," Array + "," Array ","raw_emoji [] ","emoji add_alias "," create ","raw each ","JSON  parse ","data read ","File  open "," data_file ","(lvar :raw) uniq ","raw sub + ","raw sub ","2 == "," edit_emoji "," find_by_unicode ","data each ","emoji ios_version= ","emoji unicode_version= ","emoji description= ","emoji category= ","file read ","emoji skin_tones= ","dedup call ","append_unicode call ","raw gsub ","start_pos > ","found_index + ","raw_alternate []= ","raw dup ","raw index ","emoji unicode_aliases include? ","emoji unicode_aliases ","TEXT_GLYPHS  include? "," lambda ","str freeze ","str -@ "," respond_to? "," find_by_unicode  add_tag ","raw_emoji [] _emoji fetch each ","raw_ find_by_unicode  fetch each ","raw_emoji [] _emoji fetch ","raw_ find_by_unicode  fetch "," find_by_unicode  add_unicode_alias "," Array +  each ","(lvar :raw) uniq  each ","raw_emoji [] _emoji [] ","raw_ find_by_unicode  [] "," find_by_unicode  add_alias ","raw_emoji []  each ","(lvar :raw_emoji [] ) uniq ","raw_emoji []  sub + ","raw_emoji []  sub "," edit_ find_by_unicode  "," find_by_unicode  ios_version= "," find_by_unicode  unicode_version= "," find_by_unicode  description= "," find_by_unicode  category= "," find_by_unicode  skin_tones= ","raw_emoji []  gsub ","found_index +  > ","raw index  + ","raw_emoji [] _alternate []= ","raw dup  []= ","raw_emoji []  dup ","raw_emoji []  index "," find_by_unicode  unicode_aliases include? "," find_by_unicode  unicode_aliases "]}," Emoji find_by_unicode":{"type":"method","name":"find_by_unicode","children":[],"call":[" raise ","Emoji not found from unicode: %s % ","Emoji Character  hex_inspect "," block_given? "," unicodes_index fetch "," unicodes_index "," unicodes_index [] ","unicode sub "]}," Emoji find_by_alias":{"type":"method","name":"find_by_alias","children":[],"call":[" raise ","Emoji not found by name: %s % ","name inspect "," block_given? "," names_index fetch "," names_index "," names_index [] "]}," Emoji edit_emoji":{"type":"method","name":"edit_emoji","children":[],"call":["@unicodes_index []= ","emoji unicode_aliases each ","emoji unicode_aliases ","@names_index []= ","emoji aliases each ","emoji aliases ","Hash  new "]}," Emoji create":{"type":"method","name":"create","children":[],"call":[" all << "," block_given? "," edit_emoji "," all ","Emoji Character  new "," edit_Emoji Character  new  "]}," Emoji all":{"type":"method","name":"all","children":[],"call":[" parse_data_file "]}," Emoji data_file":{"type":"method","name":"data_file","children":[],"call":["File  expand_path "]}," Emoji Character image_filename":{"type":"method","name":"image_filename","children":[],"call":["unicode/%s.png % "," hex_inspect ","%s.png % "," name "," custom? "," hex_inspect sub "," default_image_filename "]}," Emoji Character hex_inspect":{"type":"method","name":"hex_inspect","children":[],"call":[" class hex_inspect "," raw "," class "]}," Emoji Character inspect":{"type":"method","name":"inspect","children":[],"call":[" name "," class name "," class ","(%s) % "," hex_inspect "," custom? "," (%s) % _inspect "]}," Emoji Character initialize":{"type":"method","name":"initialize","children":[],"call":[" Array "]}," Emoji Character add_tag":{"type":"method","name":"add_tag","children":[],"call":[" tags << "," tags "]}," Emoji Character add_unicode_alias":{"type":"method","name":"add_unicode_alias","children":[],"call":[" unicode_aliases << "," unicode_aliases "]}," Emoji Character raw":{"type":"method","name":"raw","children":[],"call":[" unicode_aliases first "," unicode_aliases "]}," Emoji Character add_alias":{"type":"method","name":"add_alias","children":[],"call":[" aliases << "," aliases "]}," Emoji Character name":{"type":"method","name":"name","children":[],"call":[" aliases first "," aliases "]}," Emoji Character custom?":{"type":"method","name":"custom?","children":[],"call":[" raw ! "," raw "]}," Emoji apple_palette":{"type":"method","name":"apple_palette","children":[],"call":["all []= ","raw + ","TEXT_GLYPHS  include? ","group fetch fetch split map ","group fetch fetch split ","group fetch fetch ","group fetch ","group fetch split [] ","group fetch split ","data fetch each_with_object ","data fetch ","JSON  parse ","f read ","File  open "," apple_palette_file "]}," Emoji apple_palette_file":{"type":"method","name":"apple_palette_file","children":[],"call":["File  expand_path "]}," Emoji Extractor parse_version":{"type":"method","name":"parse_version","children":[],"call":["num & ","num >> "]}," Emoji Extractor extract_sbix_strike":{"type":"method","name":"extract_sbix_strike","children":[],"call":["io read unpack ","io read ","4 * ","num_glyphs + ","ppem == "," size ","io pos= ","sbix_offset + ","strike_offsets each ","io read unpack [] ","num_strikes times map ","num_strikes times ","2 * + ","2 * ","io pos ","io pos  + "]}," Emoji Extractor each_glyph_bitmap":{"type":"method","name":"each_glyph_bitmap","children":[],"call":["io read ","next_glyph_offset - - ","next_glyph_offset - "," lambda ","io read unpack ","2 * + ","2 * ","io pos= ","sbix_offset + + ","sbix_offset + ","strike [] ","glyph_offset < ","strike [] [] ","glyph_id + ","glyph_index each_with_name "," extract_sbix_strike "," size ","glyph_index length ","tables fetch [] ","tables fetch ","strike [] []  - - ","next_strike [] []  - - ","strike [] []  - ","next_strike [] []  - ","tables fetch []  + + ","tables fetch []  + "," extract_sbix_strike  [] ","strike [] []  < "," extract_sbix_strike  [] [] "," extract_sbix_ extract_sbix_strike  "]}," Emoji Extractor extract_glyph_index":{"type":"method","name":"extract_glyph_index","children":[],"call":["GlyphIndex  new ","glyph_names << ","io read ","io read unpack [] ","io read unpack ","io pos < ","io pos ","2 * "," parse_version ","io pos + ","postscript_table [] ","io pos= ","tables fetch ","tables fetch  [] "]}," Emoji Extractor each_with_name":{"type":"method","name":"each_with_name","children":[],"call":[" name_for "," each "]}," Emoji Extractor each":{"type":"method","name":"each","children":[],"call":[" length times "," length "," each_glyph_bitmap "," extract_glyph_index "," parse_tables ","file pos= ","font_offsets [] "," parse_ttc ","File  open "," to_enum "," __method__ "," block_given? "," extract_ extract_glyph_index  "," parse_ parse_tables  "," parse_ttc  [] "]}," Emoji Extractor name_for":{"type":"method","name":"name_for","children":[],"call":[" names [] ","index - "," names "," name_index [] "," name_index "," name_index []  - "," name_ name_index []  [] "," name_ name_index []  "]}," Emoji Extractor parse_tables":{"type":"method","name":"parse_tables","children":[],"call":["tables []= ","io read unpack ","io read ","4 + ","4 * ","num_tables times each_with_object ","num_tables times ","2 * "]}," Emoji Extractor parse_ttc":{"type":"method","name":"parse_ttc","children":[],"call":["io read unpack ","io read ","4 * "," raise ","ttcf == ","io read unpack [] "]}," Emoji Extractor glyph_name_to_emoji":{"type":"method","name":"glyph_name_to_emoji","children":[],"call":["(send\n  (lvar :candidates) :map) compact first ","(send\n  (lvar :candidates) :map) compact ","Emoji  find_by_unicode ","candidates map ","candidates << ","c + ","candidates dup each ","candidates dup ","raw gsub ","raw include? ","raw sub ","v16 + + ","GENDER_MAP  fetch ","v16 + ","raw sub! ","GENDER_MAP  keys join ","GENDER_MAP  keys ","(if\n  (send\n    (nth-ref 1) :empty?)\n  (nth-ref 1)\n  (lvar :zwj)) + ","(send\n  (nth-ref 2) :hex) pack ","2 hex ","1 empty? ","glyph_name gsub ","(send\n  (send\n    (nth-ref 2) :split\n    (str \"\")) :map) join ","FAMILY_MAP  fetch ","2 split map ","2 split ","1 == ","(send\n  (nth-ref 1) :hex) pack ","1 hex ","2 == ","glyph_name =~ ","FAMILY_MAP  keys join ","FAMILY_MAP  keys ","(send\n  (send\n    (nth-ref 2) :split\n    (str \"\")) :map) join  gsub ","(send\n  (nth-ref 1) :hex) pack  gsub ","(send\n  (send\n    (nth-ref 2) :split\n    (str \"\")) :map) join  include? ","(send\n  (nth-ref 1) :hex) pack  include? ","(send\n  (send\n    (nth-ref 2) :split\n    (str \"\")) :map) join  sub ","(send\n  (nth-ref 1) :hex) pack  sub ","(send\n  (send\n    (nth-ref 2) :split\n    (str \"\")) :map) join  sub! ","(send\n  (nth-ref 1) :hex) pack  sub! "]}," Emoji Extractor extract!":{"type":"method","name":"extract!","children":[],"call":["f write ","binread call ","File  open ","FileUtils  mkdir_p ","File  dirname ","emoji image_filename "," images_path "," glyph_name_to_emoji "," each "," glyph_name_to_emoji  image_filename "," glyph_name_to_ glyph_name_to_emoji  "]}," Emoji Extractor initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Emoji CLI usage_text":{"type":"method","name":"usage_text","children":[],"call":[]}," Emoji CLI extract":{"type":"method","name":"extract","children":[],"call":["FileUtils  cp ","File  join ","File  basename ","Dir  [] each ","Dir  [] ","Emoji  images_path ","Emoji Extractor  new extract! ","Emoji Extractor  new ","argv [] "," raise ","argv size == ","argv size ","(send\n  (const nil :OptionParser) :new) parse! ","VALID_SIZES  join ","VALID_SIZES  include? ","opts on ","OptionParser  new ","path to_s empty? ","path to_s ","argv shift ","Emoji  images_argv []  ","Emoji  images_argv shift  ","argv []  to_s empty? ","argv shift  to_s empty? ","argv []  to_s ","argv shift  to_s "]}," Emoji CLI help":{"type":"method","name":"help","children":[],"call":[" puts "," usage_text "]}," Emoji CLI dispatch":{"type":"method","name":"dispatch","children":[],"call":["$stderr puts "," usage_text ","err message ","err message == ","err class to_s ","err class "," raise "," help "," public_send ","argv [] ","argv []  [] "]}," Emoji Character default_image_filename":{"type":"method","name":"default_image_filename","children":[],"call":["unicode/%s.png % "," hex_inspect gsub "," hex_inspect ","%s.png % "," name "," custom? "]}," Emoji Character raw_skin_tone_variants":{"type":"method","name":"raw_skin_tone_variants","children":[],"call":["raw_normalized + ","raw_normalized [] + + ","raw_normalized [] ","raw_normalized [] + ","SKIN_TONES  map ","raw_normalized index "," raw sub "," raw "," skin_tones? ! "," skin_tones? "," custom? ","raw_normalized [] + + + ","raw_normalized == "," raw sub  + "," raw sub  [] + + "," raw sub  [] "," raw sub  [] + "," raw sub  index "," raw sub  [] + + + "," raw sub  == "]}," Emoji Character skin_tones?":{"type":"method","name":"skin_tones?","children":[],"call":[]}}