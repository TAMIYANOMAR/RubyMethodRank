{" Rubocop Cop Offence to_s":{"type":"method","name":"to_s","children":[],"call":["@line chomp "," message "," sprintf "," line_number "," encode_severity "," real_column "," line "," severity_code ","(begin\n  (send nil :encode_severity)) % "," message gsub "]}," Rubocop Cop Offence initialize":{"type":"method","name":"initialize","children":[],"call":[" freeze ","cop_name freeze ","message freeze ","location column freeze ","location column ","location line freeze ","location line ","location freeze ","severity freeze "," fail ","SEVERITIES  include? ","corrected freeze "]}," Rubocop Cop LineLengthCop inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","line size > ","line size ","File  readlines each_with_index ","File  readlines "]}," Rubocop Cop Cop add_offence":{"type":"method","name":"add_offence","children":[],"call":["@offences << ","Offence  new "," name "," debug ","@disabled_lines include? ","location line "," autocorrect_action "," autocorrect? "," debug? "," message "," disabled_line? ","node loc send ","node loc ","loc is_a? "," autocorrect "," block_given? "," default_severity "," custom_severity "," display_cop_names? ","$options [] ","node loc send  line ","  message  "]}," Rubocop Cop Cop report":{"type":"method","name":"report","children":[],"call":[" puts ","@offences each "]}," Rubocop Cop Cop initialize":{"type":"method","name":"initialize","children":[],"call":["Config  new "]}," Rubocop CLI target_files":{"type":"method","name":"target_files","children":[],"call":["Dir  [] ","arg =~ ","ARGV  detect ","ARGV  empty? ","name =~ "," raw_target_files reject "," raw_target_files ","files flatten ","files << ","target =~ ","File  directory? ","args each ","args empty? "," ruby_files ","files uniq ","target chomp ","(send\n  (lvar :files) :map) uniq ","File  expand_path ","files map "]}," Rubocop CLI run":{"type":"method","name":"run","children":[],"call":["cop report ","cop inspect ","cop_klass new ","cops each "," target_files each "," target_files ","cops << ","(send\n  (const nil :OptionParser) :new) parse! ","options []= ","opts on ","opts banner= ","OptionParser  new ","total_offences == "," puts "," print "," target_files count ","report display ","report empty? ","report << ","cop has_report? ","cop offences count ","cop offences ","cop inspect_source ","line chomp ","line encode! ","line encoding name ","line encoding ","File  readlines map ","File  readlines ","Report  create ","options [] ","(send\n  (send nil :target_files\n    (lvar :args)) :reject) each ","File  directory? "," target_files reject ","Cop Cop  all "," wants_to_quit ! "," wants_to_quit ","any_failed ! "," display_error_summary ","@options [] "," formatter_set close_output_files "," formatter_set "," formatter_set finished ","inspected_files freeze "," formatter_set file_finished ","offences freeze ","inspected_files << ","offences empty? "," inspect_file "," formatter_set file_started "," wants_to_quit? ","target_files each "," formatter_set started ","target_files each freeze "," target_finder find "," target_finder ","@cops select! ","@cops reject! ","$stderr puts ","e message "," parse_options "," trap_interrupt ","Config  debug= ","Options  new parse ","Options  new ","ConfigLoader  debug= "," process_files "," act_on_options ","inspector display_error_summary ","inspector process_files ","FileInspector  new ","e backtrace ","CLI  rip_source ","$options [] "," show_cops_on_duty ","$options []= ","cop correlations= "," get_rid_of_invalid_byte_sequences ","cop_config [] ","cop_config nil? ","config [] ","cop_klass name split last ","cop_klass name split ","cop_klass name "," config_from_dotfile ","File  dirname ","YAML  load_file ","cop_klass config= ","(begin\n  (lvar :total_offences)) send ","total_offences zero? "," cops_on_duty ","target_files [] "," exit ","syntax_cop offences count ","syntax_cop offences ","syntax_cop offences map include? ","syntax_cop offences map ","syntax_cop inspect ","Rubocop Cop Syntax  new "," display_summary ","cop disabled_lines= ","disabled_lines [] "," disabled_lines_in "," warn ","(str \"An error occurred while \") + ","cop name ","@total_offences == ","syntax_cop debug= "," read_source ","ConfigStore  for "," handle_only_option ","syntax_cop inspect_file "," validate_only_option ","cop_klass rails? ","cop_klass new  report ","cop Report  create  ","cop_klass new  inspect ","cop_klass new _klass new ","cop_klass new s each ","Cop Cop  all  each "," cops_on_duty  each ","  target_finder find  each ","  target_files  each ","  target_finder find  ","  target_files  ","cop_klass new s << ","Cop Cop  all  << "," cops_on_duty  << ","total_offline encoding name es == ","total_ inspect_file  == ","  target_finder find  count ","  target_files  count ","Report  create  display ","Report  create  empty? ","Report  create  << ","cop_klass new  has_report? ","cop has_Report  create ? ","cop_klass new  offences count ","cop offline encoding name es count ","cop  inspect_file  count ","cop_klass new  offences ","cop offline encoding name es ","cop  inspect_file  ","cop_klass new  inspect_source ","cop inspect_ read_source  ","line line encoding name ode! ","line line encoding name oding name ","line line encoding name oding ","(send\n  (send nil : target_finder find \n    (lvar :args)) :reject) each ","(send\n  (send nil : target_files \n    (lvar :args)) :reject) each ","  target_finder find  reject ","  target_files  reject "," process_files  ! ","offline encoding name es freeze "," inspect_file  freeze ","offline encoding name es empty? "," inspect_file  empty? "," target_finder find  each "," target_files  each "," target_finder find  each freeze "," target_files  each freeze ","@cop_klass new s select! ","@Cop Cop  all  select! ","@ cops_on_duty  select! ","@cop_klass new s reject! ","@Cop Cop  all  reject! ","@ cops_on_duty  reject! ","FileInspector  new  display_error_summary ","FileInspector  new  process_files ","CLI  rip_ read_source  "," show_cop_klass new s_on_duty "," show_Cop Cop  all _on_duty "," show_ cops_on_duty _on_duty ","cop_klass new  correlations= "," get_rid_of_invalid_byte_sequline encoding name es ","cop_klass new _config [] ","config []  [] ","cop_ConfigStore  for  [] ","cop_klass new _config nil? ","config []  nil? ","cop_ConfigStore  for  nil? ","ConfigStore  for  [] ","cop_klass new _klass name split last ","cop_klass new _klass name split ","cop_klass new _klass name "," ConfigStore  for _from_dotfile ","cop_klass new _klass config= ","cop_klass ConfigStore  for = ","(begin\n  (lvar :total_offline encoding name es)) send ","(begin\n  (lvar :total_ inspect_file )) send ","total_offline encoding name es zero? ","total_ inspect_file  zero? "," cop_klass new s_on_duty "," Cop Cop  all _on_duty ","  cops_on_duty _on_duty "," target_finder find  [] "," target_files  [] ","syntax_cop_klass new  offences count ","syntax_cop offline encoding name es count ","syntax_cop  inspect_file  count ","Rubocop Cop Syntax  new  offences count ","syntax_cop_klass new  offences ","syntax_cop offline encoding name es ","syntax_cop  inspect_file  ","Rubocop Cop Syntax  new  offences ","syntax_cop_klass new  offences map include? ","syntax_cop offline encoding name es map include? ","syntax_cop  inspect_file  map include? ","Rubocop Cop Syntax  new  offences map include? ","syntax_cop_klass new  offences map ","syntax_cop offline encoding name es map ","syntax_cop  inspect_file  map ","Rubocop Cop Syntax  new  offences map ","syntax_cop_klass new  inspect ","Rubocop Cop Syntax  new  inspect ","Rubocop_klass new  Cop Syntax  new ","cop_klass new  disabled_lines= ","cop  disabled_lines_in = "," disabled_lines_in  [] ","  disabled_lines_in _in ","cop_klass new  name ","@total_offline encoding name es == ","@total_ inspect_file  == ","syntax_cop_klass new  debug= ","Rubocop Cop Syntax  new  debug= "," read_ read_source  ","syntax_cop_klass new  inspect_file ","Rubocop Cop Syntax  new  inspect_file ","cop_klass new _klass rails? "]}," Rubocop Report Report empty?":{"type":"method","name":"empty?","children":[],"call":[" entries empty? "," entries "]}," Rubocop Report Report <<":{"type":"method","name":"<<","children":[],"call":["@entries << ","cop offences each ","cop offences "]}," Rubocop Report Report initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rubocop Report create":{"type":"method","name":"create","children":[],"call":["EmacsStyle  new ","PlainText  new "]}," Rubocop Report PlainText display":{"type":"method","name":"display","children":[],"call":["stream puts "," generate "]}," Rubocop Report PlainText generate":{"type":"method","name":"generate","children":[],"call":["report << "," entries join "," entries "," filename ","(str \"== \") yellow ","(str \"== \") color ","(str \"== \") yellow  << ","(str \"== \") color  << "]}," Rubocop Report EmacsStyle generate":{"type":"method","name":"generate","children":[],"call":["(send\n  (send nil :entries) :map) join ","e message ","e encode_severity ","e line_number + ","e line_number "," entries map "," entries ","report join ","%s:%d: %s: %s % "," sprintf "]}," Rubocop Cop TrailingWhitespace inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","line =~ ","source each_with_index ","index + "]}," Rubocop Cop Tab inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","line =~ ","source each_with_index ","index + "]}," Rubocop Cop SurroundingSpace whitespace?":{"type":"method","name":"whitespace?","children":[],"call":["(sym :on_sp) include? ","token [] "]}," Rubocop Cop SurroundingSpace surrounded_by_whitespace?":{"type":"method","name":"surrounded_by_whitespace?","children":[],"call":[" whitespace? "]}," Rubocop Cop SurroundingSpace ok_without_spaces?":{"type":"method","name":"ok_without_spaces?","children":[],"call":["child == ","parent == ","grandparent == ","(sym :rest_param) include? ","(sym :unary) include? ","grammar_path values_at ","(sym :**) include? "]}," Rubocop Cop SurroundingSpace inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","ERROR_MESSAGE  + ","source [] ","pos [] - ","pos [] "," ok_without_spaces? "," surrounded_by_whitespace? ","tokens [] ","ix - ","name == ","Grammar  new correlate sort each ","Grammar  new correlate sort ","Grammar  new correlate ","Grammar  new ","t pos lineno ","t pos ","t text ","t type "," whitespace? ","t text == ","prev_ns type != ","prev_ns type "," tokens_on_same_row? "," previous_non_space ","prev type == ","prev type ","nxt type == ","nxt type ","tokens values_at ","ix + ","tokens each_index ","@correlations sort each ","@correlations sort "," check_extra "," check_missing "," check_unwanted_space "," check_missing_space "," ok_witokens [] houtokens [] _spaces? "," surrounded_by_whitokens [] espace? ","tokens [] okens [] ","Grammar  new correlatokens [] e sortokens []  each ","Grammar  new correlatokens [] e sortokens []  ","Grammar  new correlatokens [] e ","tokens []  pos lineno ","tokens []  pos ","tokens []  tokens [] extokens []  ","tokens []  tokens [] ype "," whitokens [] espace? ","tokens []  tokens [] extokens []  == "," previous_non_space  type != ","prev_ns tokens [] ype != "," previous_non_space  type ","prev_ns tokens [] ype "," tokens [] okens_on_same_row? ","prev tokens [] ype == ","prev tokens [] ype ","nxtokens []  tokens [] ype == ","nxtokens []  tokens [] ype ","tokens [] okens values_atokens []  ","tokens each_pos [] -  ","tokens [] okens each_index ","@correlatokens [] ions sortokens []  each ","@correlatokens [] ions sortokens []  "," check_extokens [] ra "," check_unwantokens [] ed_space "]}," Rubocop Cop SpaceAfterCommaEtc inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","ERROR_MESSAGE  % ","source [] ","pos [] - ","pos [] ","(sym :on_sp) include? ! ","(sym :on_sp) include? ","tokens [] [] ","tokens [] ","ix + ","text == ","tokens each_index ","t pos lineno ","t pos ","tokens [] type ","t text == ","t text ","t type "," kind "," whitespace? ! "," whitespace? "," sprintf ","t1 pos lineno ","t1 pos ","tokens each_cons ","t1 pos line ","t2 pos column == ","t1 pos column + "," offset ","t1 pos column ","t2 pos column ","t2 pos ","t1 pos line == ","t2 pos line ","tokens [] okens [] [] ","tokens [] okens [] ","tokens [] extokens []  == ","tokens each_pos [] -  ","tokens [] okens each_index ","tokens []  pos lineno ","tokens []  pos ","tokens [] okens [] tokens [] ype ","tokens []  tokens [] extokens []  == ","tokens []  tokens [] extokens []  ","tokens []  tokens [] ype "," whitokens [] espace? ! "," whitokens [] espace? "," sprintokens [] f ","tokens [] 1 pos lineno ","tokens [] 1 pos ","tokens [] okens each_cons ","tokens [] 1 pos line ","tokens [] 2 pos column == ","tokens [] 1 pos column + "," offsetokens []  ","tokens [] 1 pos column ","tokens [] 2 pos column ","tokens [] 2 pos ","tokens [] 1 pos line == ","tokens [] 2 pos line "]}," Rubocop Cop Offence encode_severity":{"type":"method","name":"encode_severity","children":[],"call":["@severity to_s [] upcase ","@severity to_s [] ","@severity to_s "]}," Rubocop Cop LineLength inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence "," sprintf ","line length ","line length > ","source each_with_index ","index + ","LineLength  max ","LineLength  LineLength  max  "]}," Rubocop Cop Indentation next_when":{"type":"method","name":"next_when","children":[],"call":[" each_when ","s [] == ","s [] ","sexp grep find ","sexp grep "]}," Rubocop Cop Indentation each_when":{"type":"method","name":"each_when","children":[],"call":[" each_when ","sexp grep each ","sexp grep ","case_ix_next == "," next_when ","s [] != ","s [] ","sexp grep find_all ","sexp [] ","sexp [] == ","(or\n  (ivar :@total_case_ix)\n  (int -1)) + "," each_when _next == "," next_when _next == "," next_when  == ","(or\n  (ivar :@total_ each_when )\n  (int -1)) + ","(or\n  (ivar :@total_ next_when )\n  (int -1)) + ","(or\n  (ivar :(or\n  (ivar :@total_case_ix)\n  (int -1)) + )\n  (int -1)) + "]}," Rubocop Cop Indentation keyword?":{"type":"method","name":"keyword?","children":[],"call":["tokens [] [] != ","tokens [] [] ","tokens [] ","ix - ","tokens [] [] == ","tokens [] type != ","tokens [] type ","(send\n  (send\n    (lvar :tokens) :[]\n    (lvar :ix)) :type) == ","tokens [] text "]}," Rubocop Cop Indentation find_keywords":{"type":"method","name":"find_keywords","children":[],"call":["tokens values_at "," keyword? ","tokens each_index find_all ","tokens each_index ","tokens each_index select "]}," Rubocop Cop Indentation inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","source [] ","when_pos [] - ","when_pos [] ","when_pos [] != ","case_tokens [] [] [] ","case_tokens [] [] ","case_tokens [] ","when_tokens shift [] ","when_tokens shift "," each_when "," find_keywords ","when_pos lineno ","when_pos column != ","case_tokens [] pos column ","case_tokens [] pos ","when_pos column ","when_tokens shift pos ","when_tokens shift []  [] - ","when_tokens shift pos  [] - ","when_tokens shift []  [] ","when_tokens shift pos  [] ","when_tokens shift []  [] != ","when_tokens shift pos  [] != "," find_keywords  [] [] [] "," find_keywords  [] [] "," find_keywords  [] "," find_keywords  shift [] "," find_keywords  shift ","when_tokens shift []  lineno ","when_tokens shift pos  lineno ","when_tokens shift []  column != ","when_tokens shift pos  column != "," find_keywords  [] pos column "," find_keywords  [] pos ","when_tokens shift []  column ","when_tokens shift pos  column "," find_keywords  shift pos "]}," Rubocop Cop Grammar find":{"type":"method","name":"find","children":[],"call":["@table []= ","path + ","sexp [] ","@ix + ","@tokens_without_pos [] index ","@tokens_without_pos [] "," add_matching_rbrace ","token_to_find == ","i >= ","indices find ","@token_indexes [] ","@@ix +  + ","@token_indexes []  find "]}," Rubocop Cop Grammar correlate":{"type":"method","name":"correlate","children":[],"call":[" find ","elem to_s chomp ","elem to_s ","elem to_s =~ "," correlate ","children each ","sexp reverse ","sexp [] == ","sexp [] ","Symbol  === "," find + ","@special [] ","@special keys ","@table []= ","path + ","@index_by_pos [] "," fail ","sexp [] column ","sexp [] lineno ","modifiers include? ","@special [] each ","sexp reverse  each "]}," Rubocop Cop Grammar initialize":{"type":"method","name":"initialize","children":[],"call":["Hash  [] ","token_positions each_with_index to_a flatten ","token_positions each_with_index to_a ","token_positions each_with_index ","tok [] ","tokens map ","t pos column ","t pos ","t pos lineno ","@token_indexes [] << ","@token_indexes [] ","@tokens_without_pos each_with_index "," process_embedded_expressions ","t text ","t type ","RUBY_VERSION  < "]}," Rubocop Cop Encoding inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence "," sprintf ","source [] =~ ","source [] ","RUBY_VERSION  >= "]}," Rubocop Cop EmptyLines inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","source [] ","source [] grep empty? ","source [] grep ","child [] [] [] - ","child [] [] [] ","child [] [] ","child [] ","defs [] each ","defs [] ","identifier_of_first_def [] [] - ","identifier_of_first_def [] [] ","identifier_of_first_def [] ","defs [] [] ","child [] == ","parent select "," each_parent_of ","next_row_ix + ","child [] [] lineno - ","child [] [] lineno ","identifier_of_first_def [] lineno - ","identifier_of_first_def [] lineno ","t pos lineno ","t pos ","previous_token type == ","previous_token type ","t type == ","t type ","tokens each ","Token  new ","source [] empty? ","line - ","(erange\n  (begin\n    (send\n      (lvar :prev_line) :+\n      (int 1)))\n  (lvar :cur_line)) each ","prev_line + ","line_diff > ","cur_line - ","token pos line ","token pos ","tokens empty? ","defs [] []  [] [] - ","defs [] []  [] [] ","defs [] []  [] ","child [] [] [] -  + ","child [] [] lineno -  + ","defs [] []  [] lineno - ","defs [] []  [] lineno ","Token  new  type == ","Token  new  type ","(erange\n  (begin\n    (send\n      (lvar :prev_line) :+\n      (int 1)))\n  (lvar :token pos line )) each ","cur_line -  > ","token pos line  - "]}," Rubocop Cop Cop each":{"type":"method","name":"each","children":[],"call":[" each ","Array  === ","sexp each ","sexp [] == ","sexp [] "]}," Rubocop Cop Cop each_parent_of":{"type":"method","name":"each_parent_of","children":[],"call":["parents uniq each ","parents uniq ","parents << "," each_parent_of ","elem [] ","elem [] == ","Array  === ","sexp each ","parents each ","parents include? ","elem []  [] ","elem []  [] == "]}," Rubocop Cop Cop inspect_source":{"type":"method","name":"inspect_source","children":[],"call":[" inspect ","Ripper  sexp ","source join ","Ripper  lex "," method arity "," method ","Ripper  Ripper  sexp  "]}," Rubocop Cop Cop has_report?":{"type":"method","name":"has_report?","children":[],"call":["@offences empty? ! ","@offences empty? "]}," Rubocop Cop Cop enabled?":{"type":"method","name":"enabled?","children":[],"call":[]}," Rubocop Cop Cop enabled":{"type":"method","name":"enabled","children":[],"call":[]}," Rubocop Cop Cop inherited":{"type":"method","name":"inherited","children":[],"call":[]}," Rubocop CLI raw_target_files":{"type":"method","name":"raw_target_files","children":[],"call":["Dir  [] ","arg =~ ","args detect ","args empty? "]}," Rubocop Version version":{"type":"method","name":"version","children":[],"call":[" sprintf "," format "]}," Rubocop Token to_s":{"type":"method","name":"to_s","children":[],"call":["@text inspect ","@pos column ","@pos line "]}," Rubocop Token initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rubocop Token from_parser_token":{"type":"method","name":"from_parser_token","children":[],"call":[]}," Rubocop TargetFinder ruby_executable?":{"type":"method","name":"ruby_executable?","children":[],"call":[" warn ","e message ","e class ","first_line =~ ","f readline ","File  open ","File  extname empty? ","File  extname "," debug? "]}," Rubocop TargetFinder target_files_in_dir":{"type":"method","name":"target_files_in_dir","children":[],"call":["target_files uniq ","config file_to_include? "," ruby_executable? ","File  extname == ","File  extname ","config file_to_exclude? ","@config_store for ","files select ","FileTest  file? ","Dir  [] select ","Dir  [] ","@config_store for file_to_include? ","base_dir_config file_to_exclude? ","base_dir gsub! ","File  mtime to_i -@ ","File  mtime to_i ","File  mtime ","target_files sort_by! "," fail_fast? ","@config_store for  file_to_include? ","@config_store for  file_to_exclude? ","@@config_store for _store for ","@@config_store for _store for file_to_include? ","base_dir_@config_store for  file_to_exclude? "]}," Rubocop TargetFinder find":{"type":"method","name":"find","children":[],"call":["(send\n  (lvar :files) :map) uniq ","File  expand_path ","files map ","files << ","Dir  [] ","arg include? "," target_files_in_dir ","arg chomp ","File  directory? ","args uniq each ","args uniq ","args empty? "," process_explicit_path "]}," Rubocop TargetFinder initialize":{"type":"method","name":"initialize","children":[],"call":["(pair\n  (sym :force_exclusion)\n  (false)) merge "]}," Rubocop SourceParser each_mentioned_cop":{"type":"method","name":"each_mentioned_cop","children":[],"call":["cop_names each ","non_whitespace_before_comment nil? ! ","non_whitespace_before_comment nil? ","switch == ","cops_string split ","Cop Cop  all map ","Cop Cop  all ","cops_string include? ","match captures ","line match ","cops_string split  each ","Cop Cop  all map  each ","line match  captures ","line line match  "]}," Rubocop SourceParser cop_disabled_lines_in":{"type":"method","name":"cop_disabled_lines_in","children":[],"call":["disabled_lines_for_cops [] << ","disabled_lines_for_cops [] ","current_disabled_cops each ","current_disabled_cops []= "," each_mentioned_cop ","index + ","source_lines each_with_index "]}," Rubocop SourceParser create_parser":{"type":"method","name":"create_parser","children":[],"call":["parser diagnostics ignore_warnings= ","parser diagnostics ","parser diagnostics all_errors_are_fatal= ","RUBY_ENGINE  != ","Parser CurrentRuby  new ","Parser CurrentRuby  new  diagnostics ignore_warnings= ","Parser CurrentRuby  new  diagnostics ","Parser CurrentRuby  new  diagnostics all_errors_are_fatal= "]}," Rubocop SourceParser parse_with_parser":{"type":"method","name":"parse_with_parser","children":[],"call":["ProcessedSource  new ","Token  from_parser_token ","tokens map ","parser tokenize ","parser diagnostics consumer= ","diagnostics << "," lambda ","parser diagnostics "," create_parser ","source_buffer source= ","Parser Source Buffer  new ","Token  from_ create_parser _token "," create_parser  tokenize "," create_parser  diagnostics consumer= "," create_parser  diagnostics "," create_ create_parser  ","Parser Source Buffer  new  source= "]}," Rubocop SourceParser parse_file":{"type":"method","name":"parse_file","children":[],"call":[" parse ","File  read "]}," Rubocop SourceParser parse":{"type":"method","name":"parse","children":[],"call":["processed_source disabled_lines_for_cops= "," cop_disabled_lines_in ","processed_source lines "," parse_with_parser ","ProcessedSource  new ","Token  from_parser_token ","tokens map ","parser tokenize ","parser diagnostics consumer= ","diagnostics << "," lambda ","parser diagnostics "," create_parser ","source_buffer source= ","Parser Source Buffer  new "," parse_with_parser  disabled_lines_for_cops= "," parse_with_parser  lines "," parse_with_ create_parser  ","Token  from_ create_parser _token "," create_parser  tokenize "," create_parser  diagnostics consumer= "," create_parser  diagnostics "," create_ create_parser  ","Parser Source Buffer  new  source= "]}," Rubocop RakeTask setup_ivars":{"type":"method","name":"setup_ivars","children":[],"call":["args shift "," require "]}," Rubocop RakeTask run_task":{"type":"method","name":"run_task","children":[],"call":[" abort "," fail_on_error ","result == ","cli run "," patterns "," puts ","CLI  new "," require "," formatters map "," formatters "," full_options ","cli run  == ","CLI  new  run "]}," Rubocop RakeTask initialize":{"type":"method","name":"initialize","children":[],"call":[" run_task "," verbose ","task_block call ","(self) slice ","task_block arity ","RakeFileUtils  send "," task "," name "," desc "," Rake  application last_comment "," Rake  application "," setup_ivars "," setup_subtasks "," run_main_task "]}," Rubocop ProcessedSource []":{"type":"method","name":"[]","children":[],"call":[" lines [] "," lines "]}," Rubocop ProcessedSource lines":{"type":"method","name":"lines","children":[],"call":["@buffer source split ","@buffer source "," init_lines "]}," Rubocop ProcessedSource initialize":{"type":"method","name":"initialize","children":[],"call":["CommentConfig  new "]}," Rubocop Formatter SimpleTextFormatter smart_path":{"type":"method","name":"smart_path","children":[],"call":["Pathname  new relative_path_from to_s ","Pathname  new relative_path_from ","Pathname  getwd ","Pathname  new ","path start_with? ","Dir  pwd "," relative_path "]}," Rubocop Formatter SimpleTextFormatter report_summary":{"type":"method","name":"report_summary","children":[],"call":[" output puts "," output ","summary << ","(begin\n  (lvar :offences_string)) color ","offence_count zero? ","file_count > ","file_count == ","correction_text color ","correction_count == ","correction_text << "," pluralize ","correction_count > ","offences_text color ","offences_text << "," colorize ","offense_count zero? ","offenses_text << "," pluralize  << "," pluralize  color "]}," Rubocop Formatter SimpleTextFormatter report_file":{"type":"method","name":"report_file","children":[],"call":[" output puts ","offences join "," output ","(str \"== \") color "," smart_path "," output printf "," message ","o real_column ","o line "," colored_severity_code ","offences each "," yellow ","offenses each "]}," Rubocop Formatter SimpleTextFormatter finished":{"type":"method","name":"finished","children":[],"call":[" report_summary ","inspected_files count "," reports_summary? "]}," Rubocop Formatter SimpleTextFormatter file_finished":{"type":"method","name":"file_finished","children":[],"call":[" report_file ","offences count ","offences empty? "," count_stats ","offenses empty? "]}," Rubocop Formatter SimpleTextFormatter started":{"type":"method","name":"started","children":[],"call":[]}," Rubocop Formatter ProgressFormatter report_file_as_mark":{"type":"method","name":"report_file_as_mark","children":[],"call":[" output write "," output ","highest_offence encode_severity color ","highest_offence encode_severity ","COLOR_FOR_SEVERITY  [] ","highest_offence severity ","a severity_level <=> ","b severity_level ","a severity_level ","offences max ",". color ","offences empty? "," colored_severity_code "," green ","offenses max ","offenses empty? ","o severity ","offenses max_by ","highest_offence encode_severity COLOR_FOR_SEVERITY  []  ",". COLOR_FOR_SEVERITY  []  "," COLOR_FOR_SEVERITY  [] ed_severity_code "]}," Rubocop Formatter ProgressFormatter finished":{"type":"method","name":"finished","children":[],"call":[" report_summary ","inspected_files count "," report_file ","@offences_for_files each "," output puts "," output ","@offences_for_files empty? "," reports_summary? ","@offenses_for_files each ","@offenses_for_files empty? "]}," Rubocop Formatter ProgressFormatter file_finished":{"type":"method","name":"file_finished","children":[],"call":[" report_file_as_mark ","@offences_for_files []= ","offences empty? ","offences count "," count_stats ","@offenses_for_files []= ","offenses empty? "]}," Rubocop Formatter ProgressFormatter started":{"type":"method","name":"started","children":[],"call":[" output puts ","target_files count "," output ","target_files count == "]}," Rubocop Formatter JSONFormatter relative_path":{"type":"method","name":"relative_path","children":[],"call":["Pathname  new relative_path_from to_s ","Pathname  new relative_path_from ","Pathname  getwd ","Pathname  new "]}," Rubocop Formatter JSONFormatter hash_for_location":{"type":"method","name":"hash_for_location","children":[],"call":["offence real_column ","offence line ","offense location length ","offense location ","offense real_column ","offense line "]}," Rubocop Formatter JSONFormatter hash_for_offence":{"type":"method","name":"hash_for_offence","children":[],"call":[" hash_for_location ","offence cop_name ","offence message ","offence severity ","offence corrected? "]}," Rubocop Formatter JSONFormatter hash_for_file":{"type":"method","name":"hash_for_file","children":[],"call":[" hash_for_offence ","offences map "," relative_path "," hash_for_offense ","offenses map "]}," Rubocop Formatter JSONFormatter metadata_hash":{"type":"method","name":"metadata_hash","children":[],"call":["RUBY_PATCHLEVEL  to_s "]}," Rubocop Formatter JSONFormatter finished":{"type":"method","name":"finished","children":[],"call":[" output write "," output_hash to_json "," output_hash "," output "," output_hash [] []= ","inspected_files count "," output_hash [] "]}," Rubocop Formatter JSONFormatter file_finished":{"type":"method","name":"file_finished","children":[],"call":["offences count "," output_hash [] [] "," output_hash [] "," output_hash "," output_hash [] << "," hash_for_file ","offenses count "]}," Rubocop Formatter JSONFormatter started":{"type":"method","name":"started","children":[],"call":[" output_hash [] []= ","target_files count "," output_hash [] "," output_hash "]}," Rubocop Formatter JSONFormatter initialize":{"type":"method","name":"initialize","children":[],"call":[" metadata_hash "]}," Rubocop Formatter FormatterSet custom_formatter_class":{"type":"method","name":"custom_formatter_class","children":[],"call":["namespace const_get ","constant_names reduce ","constant_names shift ","constant_names first empty? ","constant_names first ","specified_class_name split ","specified_class_name split  reduce ","specified_class_name split  shift ","specified_class_name split  first empty? ","specified_class_name split  first "]}," Rubocop Formatter FormatterSet builtin_formatter_class":{"type":"method","name":"builtin_formatter_class","children":[],"call":["BUILTIN_FORMATTERS_FOR_KEYS  [] ","matching_keys first "," fail ","matching_keys size > ","matching_keys size ","matching_keys empty? ","key start_with? ","BUILTIN_FORMATTERS_FOR_KEYS  keys select ","BUILTIN_FORMATTERS_FOR_KEYS  keys "]}," Rubocop Formatter FormatterSet close_output_files":{"type":"method","name":"close_output_files","children":[],"call":["formatter output close ","formatter output ","formatter output is_a? "," each "]}," Rubocop Formatter FormatterSet add_formatter":{"type":"method","name":"add_formatter","children":[],"call":[" << ","formatter reports_summary= ","formatter respond_to? ","formatter_class new ","File  open "," builtin_formatter_class "," custom_formatter_class ","formatter_key =~ ","formatter_class new  reports_summary= ","formatter_class new  respond_to? ","formatter_class new _class new "," builtin_formatter_class  new "," custom_formatter_class  new "," builtin_formatter_class new _class "," builtin_ builtin_formatter_class  "," builtin_ custom_formatter_class  "," custom_formatter_class new _class "," custom_ builtin_formatter_class  "," custom_ custom_formatter_class  ","formatter_class new _key =~ "]}," Rubocop Formatter FormatterSet initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rubocop Formatter FileListFormatter report_file":{"type":"method","name":"report_file","children":[],"call":[" output printf "," output "]}," Rubocop Formatter EmacsStyleFormatter report_file":{"type":"method","name":"report_file","children":[],"call":[" output printf ","o message ","o encode_severity ","o real_column ","o line "," output ","offences each "]}," Rubocop Formatter ClangStyleFormatter report_file":{"type":"method","name":"report_file","children":[],"call":[" output puts ","  * + ","^ * ","o location column_range count ","o location column_range ","o location ","  * ","o location column "," output ","o location source_line "," output printf ","o message ","o clang_severity ","o real_column ","o line "," smart_path color "," smart_path ","offences each ","source_line strip empty? ","source_line strip ","source_line blank? "," message "," colored_severity_code "," highlight_line "," cyan ","offenses each ","o location o location source_line  ","o location source_line  strip empty? ","o location source_line  strip ","o location source_line  blank? "]}," Rubocop Formatter BaseFormatter finished":{"type":"method","name":"finished","children":[],"call":[]}," Rubocop Formatter BaseFormatter file_finished":{"type":"method","name":"file_finished","children":[],"call":[]}," Rubocop Formatter BaseFormatter file_started":{"type":"method","name":"file_started","children":[],"call":[]}," Rubocop Formatter BaseFormatter started":{"type":"method","name":"started","children":[],"call":[]}," Rubocop Formatter BaseFormatter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rubocop Cop VariableInspector after_declaring_variable":{"type":"method","name":"after_declaring_variable","children":[],"call":[]}," Rubocop Cop VariableInspector before_declaring_variable":{"type":"method","name":"before_declaring_variable","children":[],"call":[]}," Rubocop Cop VariableInspector after_leaving_scope":{"type":"method","name":"after_leaving_scope","children":[],"call":[]}," Rubocop Cop VariableInspector before_leaving_scope":{"type":"method","name":"before_leaving_scope","children":[],"call":[]}," Rubocop Cop VariableInspector after_entering_scope":{"type":"method","name":"after_entering_scope","children":[],"call":[]}," Rubocop Cop VariableInspector before_entering_scope":{"type":"method","name":"before_entering_scope","children":[],"call":[]}," Rubocop Cop VariableInspector process_named_captures":{"type":"method","name":"process_named_captures","children":[],"call":[" process_variable_assignment ","variable_names each ","regexp named_captures keys ","regexp named_captures ","Regexp  new ","match_with_lvasgn_node children [] children [] children [] ","match_with_lvasgn_node children [] children [] children ","match_with_lvasgn_node children [] children [] ","match_with_lvasgn_node children [] children ","match_with_lvasgn_node children [] ","match_with_lvasgn_node children ","regexp named_captures keys  each ","Regexp  new  named_captures keys ","Regexp  new  named_captures "]}," Rubocop Cop VariableInspector process_variable_assignment":{"type":"method","name":"process_variable_assignment","children":[],"call":[" variable_table add_variable_entry "," variable_table ","entry used= "," variable_table find_variable_entry "," skip_children! "," variable_table assign_to_variable "," process_children "," variable_table declare_variable "," variable_table variable_exist? ","node children first ","node children "," variable_table add_variable_ variable_table find_variable_entry  "," variable_table find_variable_entry  used= "," variable_table find_variable_ variable_table find_variable_entry  "]}," Rubocop Cop VariableInspector process_node":{"type":"method","name":"process_node","children":[],"call":[" inspect_variables_in_scope "," process_node ","node children first ","node children ","NodeScanner  scan_nodes_in_scope ","variable_entry used= "," fail ","(str \"Using undeclared local variable \\\"\") + ","node inspect ","node loc expression ","node loc "," variable_table find_variable_entry "," variable_table "," process_named_captures "," process_variable_assignment "," variable_table add_variable_entry ","node type "," process_children "," dispatch_node "," catch "," variable_table find_variable_entry  used= "," variable_table find_ variable_table find_variable_entry  "," variable_table add_ variable_table find_variable_entry  "]}," Rubocop Cop VariableInspector inspect_variables_in_scope":{"type":"method","name":"inspect_variables_in_scope","children":[],"call":[" variable_table pop_scope "," variable_table "," process_node "," throw ","index == ","(sym :sclass) include? ","scope_node type ","node type == ","node type ","scope_node type == ","NodeScanner  scan_nodes_in_scope "," variable_table push_scope "," process_children "]}," Rubocop Cop VariableInspector inspect_variables":{"type":"method","name":"inspect_variables","children":[],"call":[" inspect_variables_in_scope ","Parser AST Node  new ","root_node type == ","root_node type "," wrap_with_top_level_node ","Parser AST Node  new  type == ","Parser AST Node  new  type "," wrap_with_ wrap_with_top_level_node  "]}," Rubocop Cop VariableInspector variable_table":{"type":"method","name":"variable_table","children":[],"call":["VariableTable  new "]}," Rubocop Cop VariableInspector NodeScanner scan_nodes_in_scope":{"type":"method","name":"scan_nodes_in_scope","children":[],"call":[" scan_nodes_in_scope ","SCOPE_TYPES  include? ","node type "," catch ","child is_a? ","origin_node children each ","origin_node children "," scan_children ","@callback call ","TWISTED_SCOPE_NODE_TYPES  include? ","origin_node type ","index == ","origin_node children each_with_index "]}," Rubocop Cop VariableInspector NodeScanner initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rubocop Cop VariableInspector VariableTable find_variable_entry":{"type":"method","name":"find_variable_entry","children":[],"call":["scope node type == ","scope node type ","scope node ","scope variable_entries [] ","scope variable_entries "," scope_stack reverse_each "," scope_stack "]}," Rubocop Cop VariableInspector VariableTable add_variable_entry":{"type":"method","name":"add_variable_entry","children":[],"call":[" invoke_hook "," current_scope variable_entries []= ","entry name "," current_scope variable_entries "," current_scope ","VariableEntry  new ","VariableEntry  new  name "]}," Rubocop Cop VariableInspector VariableTable current_scope_level":{"type":"method","name":"current_scope_level","children":[],"call":[" scope_stack count "," scope_stack "]}," Rubocop Cop VariableInspector VariableTable current_scope":{"type":"method","name":"current_scope","children":[],"call":[" scope_stack last "," scope_stack "]}," Rubocop Cop VariableInspector VariableTable pop_scope":{"type":"method","name":"pop_scope","children":[],"call":[" invoke_hook "," scope_stack pop "," scope_stack "," current_scope ","  current_scope _stack pop ","  current_scope _stack "," current_ current_scope  "]}," Rubocop Cop VariableInspector VariableTable push_scope":{"type":"method","name":"push_scope","children":[],"call":[" invoke_hook "," scope_stack push "," scope_stack ","Scope  new "," Scope  new _stack push "," Scope  new _stack "]}," Rubocop Cop VariableInspector VariableTable scope_stack":{"type":"method","name":"scope_stack","children":[],"call":[]}," Rubocop Cop VariableInspector VariableTable invoke_hook":{"type":"method","name":"invoke_hook","children":[],"call":["@hook_receiver send "]}," Rubocop Cop VariableInspector VariableTable initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rubocop Cop VariableInspector Scope initialize":{"type":"method","name":"initialize","children":[],"call":[" fail ","(str \"Node type must be any of \") + ","node type ","node type == ","SCOPE_TYPES  include? "]}," Rubocop Cop VariableInspector VariableEntry name":{"type":"method","name":"name","children":[],"call":["@node children first ","@node children "]}," Rubocop Cop VariableInspector VariableEntry initialize":{"type":"method","name":"initialize","children":[],"call":["name to_sym "," fail ","(str \"Node type must be any of \") + ","node type ","VARIABLE_DECLARATION_TYPES  include? "]}," Rubocop Cop Util block_length":{"type":"method","name":"block_length","children":[],"call":["block_node loc end line - ","block_node loc begin line ","block_node loc begin ","block_node loc ","block_node loc end line ","block_node loc end "]}," Rubocop Cop Util strip_quotes":{"type":"method","name":"strip_quotes","children":[],"call":["str []= ","str [] == ","str [] "]}," Rubocop Cop Style WordArray complex_content?":{"type":"method","name":"complex_content?","children":[],"call":["str_content =~ ","Util  strip_quotes ","source start_with? ","s loc expression source ","s loc expression ","s loc ","arr_sexp each ","Util  strip_quotes  =~ ","s loc expression source  start_with? ","s loc expression s loc expression source  "]}," Rubocop Cop Style WordArray on_array":{"type":"method","name":"on_array","children":[],"call":[" add_offence ","node loc expression ","node loc "," complex_content? ! "," complex_content? ","e type == ","e type ","array_elems all? ","array_elems size > ","array_elems size ","node children ","node loc begin is? ","node loc begin "," convention "," comments_in_array? ! "," comments_in_array? "," min_size "," array_of? "," max= "," add_offense ","node children  all? ","node children  size > ","node children  size "]}," Rubocop Cop Style WhileUntilDo autocorrect_action":{"type":"method","name":"autocorrect_action","children":[],"call":["@corrections << ","corrector remove ","node loc begin ","node loc "," lambda ","end_of_condition_range join ","condition_node loc expression end ","condition_node loc expression ","condition_node loc "," remove ","condition_node loc expression end  join "]}," Rubocop Cop Style WhileUntilDo error_message":{"type":"method","name":"error_message","children":[],"call":[" format "]}," Rubocop Cop Style WhileUntilDo handle":{"type":"method","name":"handle","children":[],"call":[" do_autocorrect "," add_offence "," error_message ","node type ","node loc begin ","node loc ","node loc begin is? ","length > ","node loc expression source lines to_a size ","node loc expression source lines to_a ","node loc expression source lines ","node loc expression source ","node loc expression "," convention "," add_offense ","node loc expression source lines to_a size  > "]}," Rubocop Cop Style WhileUntilDo on_until":{"type":"method","name":"on_until","children":[],"call":[" handle "]}," Rubocop Cop Style WhileUntilDo on_while":{"type":"method","name":"on_while","children":[],"call":[" handle "]}," Rubocop Cop Style WhenThen autocorrect_action":{"type":"method","name":"autocorrect_action","children":[],"call":["@corrections << ","corrector replace ","node loc begin ","node loc "," lambda "," replace "]}," Rubocop Cop Style WhenThen on_when":{"type":"method","name":"on_when","children":[],"call":[" do_autocorrect "," add_offence ","node loc begin ","node loc ","node loc begin is? "," convention "," add_offense "]}," Rubocop Cop Style VariableInterpolation var_nodes":{"type":"method","name":"var_nodes","children":[],"call":["(sym :ivar) include? ","n type ","nodes select "]}," Rubocop Cop Style VariableInterpolation on_dstr":{"type":"method","name":"on_dstr","children":[],"call":[" add_offence "," sprintf ","v loc expression ","v loc ","node loc expression source include? ","node loc expression source ","node loc expression ","node loc ","(if\n  (send\n    (send\n      (lvar :v) :type) :==\n    (sym :nth_ref))\n  (str \"$\")\n  (str \"\")) + ","v to_a [] to_s ","v to_a [] ","v to_a ","v type == ","v type "," var_nodes each "," var_nodes ","node children "," convention "," add_offense "," format ","v loc expression source ","(if\n  (send\n    (send\n      (l(if\n  (send\n    (send\n      (lvar :v) :type) :==\n    (sym :nth_ref))\n  (str \"$\")\n  (str \"\")) +  :v) :type) :==\n    (sym :nth_ref))\n  (str \"$\")\n  (str \"\")) + ","(if\n  (send\n    (send\n      (lv loc expression source  :v) :type) :==\n    (sym :nth_ref))\n  (str \"$\")\n  (str \"\")) + "," (if\n  (send\n    (send\n      (lvar :v) :type) :==\n    (sym :nth_ref))\n  (str \"$\")\n  (str \"\")) + _nodes each "," v loc expression source _nodes each "," (if\n  (send\n    (send\n      (lvar :v) :type) :==\n    (sym :nth_ref))\n  (str \"$\")\n  (str \"\")) + _nodes "," v loc expression source _nodes "]}," Rubocop Cop Style UnlessElse on_if":{"type":"method","name":"on_if","children":[],"call":[" add_offence ","loc expression ","loc else ","loc keyword is? ","loc keyword ","loc respond_to? ","node loc "," convention "," add_offense ","node loc  expression ","node loc  else ","node loc  keyword is? ","node loc  keyword ","node loc  respond_to? ","node node loc  "]}," Rubocop Cop Style TrivialAccessors names_match?":{"type":"method","name":"names_match?","children":[],"call":["method_name to_s chomp == ","ivar_name [] ","method_name to_s chomp ","method_name to_s "]}," Rubocop Cop Style TrivialAccessors trivial_writer?":{"type":"method","name":"trivial_writer?","children":[],"call":[" names_match? "," exact_name_match? ","method_name != ","body children [] type == ","body children [] type ","body children [] ","body children ","body type == ","body type ","args children size == ","args children size ","args children "," allowed_method? ! "," allowed_method? "," looks_like_trivial_writer? "," allowed_writer? ! "," allowed_writer? "]}," Rubocop Cop Style TrivialAccessors trivial_reader?":{"type":"method","name":"trivial_reader?","children":[],"call":[" names_match? "," exact_name_match? "," predicate? "," allow_predicates? ","body type == ","body type ","args children size == ","args children size ","args children "," allowed_method? ! "," allowed_method? "," looks_like_trivial_reader? "," allowed_reader? ! "," allowed_reader? "]}," Rubocop Cop Style TrivialAccessors predicate?":{"type":"method","name":"predicate?","children":[],"call":["method_name [] == ","method_name [] "]}," Rubocop Cop Style TrivialAccessors allow_predicates?":{"type":"method","name":"allow_predicates?","children":[],"call":["TrivialAccessors  config [] ","TrivialAccessors  config "," cop_config [] "," cop_config "]}," Rubocop Cop Style TrivialAccessors exact_name_match?":{"type":"method","name":"exact_name_match?","children":[],"call":["TrivialAccessors  config [] ","TrivialAccessors  config "," cop_config [] "," cop_config "]}," Rubocop Cop Style TrivialAccessors check":{"type":"method","name":"check","children":[],"call":[" add_offence "," sprintf ","node loc keyword ","node loc "," trivial_writer? "," trivial_reader? "," convention "," add_offense "," format "]}," Rubocop Cop Style TrivialAccessors on_defs":{"type":"method","name":"on_defs","children":[],"call":[" check "]}," Rubocop Cop Style TrivialAccessors on_def":{"type":"method","name":"on_def","children":[],"call":[" check "," add_offence "," sprintf ","node loc keyword ","node loc ","method_name != ","body children [] type == ","body children [] type ","body children [] ","body children ","body type == ","body type ","args children size == ","args children size ","args children "]}," Rubocop Cop Style TrailingWhitespace investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offence "," source_range ","line length - ","line rstrip length ","line rstrip ","line length ","processed_source [] ","processed_source buffer ","line =~ ","processed_source lines each_with_index ","processed_source lines "," convention "," add_offense "," source_ source_range  "]}," Rubocop Cop Style NestedTernaryOperator on_if":{"type":"method","name":"on_if","children":[],"call":[" add_offence ","c loc expression ","c loc ","c loc respond_to? "," on_node ","node children each ","node children ","loc respond_to? ","node loc "," convention "," add_offense ","c node loc  expression ","c node loc  ","c node loc  respond_to? ","node loc  respond_to? ","node node loc  "]}," Rubocop Cop Style MultilineTernaryOperator on_if":{"type":"method","name":"on_if","children":[],"call":[" add_offence ","loc expression ","loc line != ","loc colon line ","loc colon ","loc line ","loc respond_to? ","node loc "," convention "," add_offense ","node loc  expression ","node loc  line != ","node loc  colon line ","node loc  colon ","node loc  line ","node loc  respond_to? ","node node loc  "]}," Rubocop Cop Style Tab investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offence "," source_range ","spaces length ","processed_source [] ","processed_source buffer ","match captures [] ","match captures ","line match ","processed_source lines each_with_index ","processed_source lines "," convention "," add_offense ","match captures []  length ","line match  captures [] ","line match  captures ","line line match  "]}," Rubocop Cop Style SymbolName on_sym":{"type":"method","name":"on_sym","children":[],"call":[" add_offence ","node loc expression ","node loc ","sym_name =~ "," allow_camel_case? ","node to_a [] ","node to_a "," ignored_node? "," convention "," allow_dots? ","node to_a []  =~ "]}," Rubocop Cop Style SymbolName allow_camel_case?":{"type":"method","name":"allow_camel_case?","children":[],"call":[" class config [] "," class config "," class "," cop_config [] "," cop_config "]}," Rubocop Cop Style SymbolArray on_array":{"type":"method","name":"on_array","children":[],"call":[" add_offence ","node loc expression ","node loc ","e type == ","e type ","array_elems all? ","array_elems size > ","array_elems size ","node children ","node loc begin is? ","node loc begin ","RUBY_VERSION  < "," convention "," array_of? "," add_offense ","node children  all? ","node children  size > ","node children  size "]}," Rubocop Cop Style SpaceAroundEqualsInParameterDefault investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offence ","equals pos "," space_between? ","processed_source tokens [] ","processed_source tokens "," index_of_first_token "," on_node ","processed_source ast "," convention "," check_optarg ","  index_of_first_token _of_first_token "]}," Rubocop Cop Style SpaceInsideHashLiteralBraces check":{"type":"method","name":"check","children":[],"call":[" add_offence "," sprintf ","t1 pos ","has_space ! "," class config [] "," class config "," class "," space_between? ","t1 pos line < ","t2 pos line ","t2 pos ","t1 pos line ","(send\n  (lvar :braces) :-\n  (lvar :types)) size == ","(send\n  (lvar :braces) :-\n  (lvar :types)) size ","braces - ","types == ","(lvar :t1) map "," convention ","brace_token pos ","t1 text == ","t1 text "," cop_config [] "," cop_config "," message "," space_range ","(if\n  (send\n    (send\n      (lvar :t1) :text) :==\n    (str \"{\"))\n  (lvar :t1)\n  (lvar :t2)) pos "," offence? "," cop_config [] == ","t2 text == ","t2 text "," style == "," style "," correct_style_detected "," opposite_style_detected "," add_offense "," offense? ","t2 type == ","t2 type "," space_between?  ! ","(send\n  (lvar :braces) :-\n  (lvar :(lvar :t1) map )) size == ","(send\n  (lvar :(if\n  (send\n    (send\n      (lvar :t1) :text) :==\n    (str \"{\"))\n  (lvar :t1)\n  (lvar :t2)) pos s) :-\n  (lvar :types)) size == ","(send\n  (lvar :braces) :-\n  (lvar :(lvar :t1) map )) size ","(send\n  (lvar :(if\n  (send\n    (send\n      (lvar :t1) :text) :==\n    (str \"{\"))\n  (lvar :t1)\n  (lvar :t2)) pos s) :-\n  (lvar :types)) size ","(if\n  (send\n    (send\n      (lvar :t1) :text) :==\n    (str \"{\"))\n  (lvar :t1)\n  (lvar :t2)) pos s - ","(lvar :t1) map  == ","(if\n  (send\n    (send\n      (lvar :t1) :text) :==\n    (str \"{\"))\n  (lvar :t1)\n  (lvar :t2)) pos _token pos "," space_ space_range  "]}," Rubocop Cop Style SpaceInsideHashLiteralBraces investigate":{"type":"method","name":"investigate","children":[],"call":[" check ","tokens [] ","e_ix - ","b_ix + ","tokens [] type == ","tokens [] type "," index_of_last_token "," index_of_first_token "," on_node ","processed_source ast ","processed_source tokens ","b_ix == ","processed_source tokens  [] "," index_of_last_token  - "," index_of_first_token  + ","processed_source tokens  [] type == ","processed_source tokens  [] type ","processed_source processed_source tokens  "," index_of_first_token  == "]}," Rubocop Cop Style SpaceInsideBrackets specifics":{"type":"method","name":"specifics","children":[],"call":[]}," Rubocop Cop Style SpaceInsideParens specifics":{"type":"method","name":"specifics","children":[],"call":[]}," Rubocop Cop Style SpaceInside investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offence "," format ","Parser Source Range  new ","t2 pos begin_pos ","t2 pos ","t1 pos end_pos ","t1 pos ","processed_source buffer "," space_between? ","t2 pos line == ","t1 pos line ","t2 pos line ","t2 type == ","t2 type ","t1 type == ","t1 type ","processed_source tokens each_cons ","processed_source tokens "," specifics "," convention "]}," Rubocop Cop Style SpaceAroundBraces check":{"type":"method","name":"check","children":[],"call":[" add_offence ","brace_token pos ","msg == "," space_between? "," convention ","t1 text == ","t1 text "]}," Rubocop Cop Style SpaceAroundBraces positions_not_to_check":{"type":"method","name":"positions_not_to_check","children":[],"call":["positions << ","t pos ","t type == ","t type ","tokens [] each ","tokens [] "," index_of_last_token "," index_of_first_token "," on_node ","positions << << ","tokens [] pos ","@processed_source tokens ","@processed_source ast ","@processed_source tokens  [] each ","@processed_source tokens  [] "," index_of_l@processed_source ast _token ","@processed_source tokens  [] pos ","@processed_source @processed_source tokens  ","@processed_source @processed_source ast  "]}," Rubocop Cop Style SpaceAroundBraces investigate":{"type":"method","name":"investigate","children":[],"call":[" check ","type2 == ","type1 == ","(sym :tLCURLY) include? ","t2 type ","t1 type ","(send\n  (array\n    (send\n      (lvar :t1) :pos)\n    (send\n      (lvar :t2) :pos)) :-\n  (send nil :positions_not_to_check)) size < ","(send\n  (array\n    (send\n      (lvar :t1) :pos)\n    (send\n      (lvar :t2) :pos)) :-\n  (send nil :positions_not_to_check)) size ","(send\n  (lvar :t1) :pos) - "," positions_not_to_check ","t2 pos ","t1 pos ","processed_source tokens each_cons ","processed_source tokens ","processed_source ast "]}," Rubocop Cop Style SpaceAroundOperators has_space?":{"type":"method","name":"has_space?","children":[],"call":[" space_between? "]}," Rubocop Cop Style SpaceAroundOperators check_missing_space":{"type":"method","name":"check_missing_space","children":[],"call":[" add_offence ","MSG_MISSING  % ","token pos ","token text to_s + ","token type == ","token type ","token text to_s ","token text "," has_space? "," convention ","MSG_MISSING  format "," token_with_surrounding_space "," space_on_both_sides? ","token token text to_s +  to_s + ","token token text to_s +  to_s ","token token text to_s +  "]}," Rubocop Cop Style SpaceAroundOperators do_not_check_singleton_operator_defs":{"type":"method","name":"do_not_check_singleton_operator_defs","children":[],"call":["positions << ","name_token pos ","t text == ","name to_s ","t text ","tokens [] find ","tokens [] "," index_of_first_token "," on_node ","@processed_source ast ","@processed_source tokens ","positions_not_to_check << ","@processed_source tokens  [] find ","@processed_source tokens  [] ","@processed_source @processed_source tokens  "]}," Rubocop Cop Style SpaceAroundOperators do_not_check_def_things":{"type":"method","name":"do_not_check_def_things","children":[],"call":["positions << ","tokens [] pos ","tokens [] "," index_of_first_token + "," index_of_first_token "," on_node ","@processed_source ast ","@processed_source tokens ","positions_not_to_check << ","@processed_source tokens  [] pos ","@processed_source tokens  [] ","@processed_source @processed_source tokens  "]}," Rubocop Cop Style SpaceAroundOperators do_not_check_class_lshift_self":{"type":"method","name":"do_not_check_class_lshift_self","children":[],"call":["positions << ","tokens [] pos ","tokens [] ","ix + ","tokens [] map == ","tokens [] map "," index_of_first_token "," on_node ","@processed_source ast ","@processed_source tokens ","positions_not_to_check << ","@processed_source tokens  [] pos ","@processed_source tokens  [] "," index_of_first_token  + ","@processed_source tokens  [] map == ","@processed_source tokens  [] map ","@processed_source @processed_source tokens  "]}," Rubocop Cop Style SpaceAroundOperators do_not_check_param_default":{"type":"method","name":"do_not_check_param_default","children":[],"call":["positions << ","equals pos ","tokens [] "," index_of_first_token "," on_node ","@processed_source ast ","@processed_source tokens ","positions_not_to_check << ","@processed_source tokens  [] ","@processed_source @processed_source tokens  "]}," Rubocop Cop Style SpaceAroundOperators do_not_check_block_arg_pipes":{"type":"method","name":"do_not_check_block_arg_pipes","children":[],"call":["positions << << ","a loc end ","a loc ","positions << ","a loc begin "," on_node ","@processed_source ast ","positions_not_to_check << << ","positions_not_to_check << "]}," Rubocop Cop Style SpaceAroundOperators positions_not_to_check":{"type":"method","name":"positions_not_to_check","children":[],"call":["positions concat "," do_not_check_singleton_operator_defs "," do_not_check_def_things "," do_not_check_class_lshift_self "," do_not_check_param_default "," do_not_check_block_arg_pipes "]}," Rubocop Cop Style SpaceAroundOperators investigate":{"type":"method","name":"investigate","children":[],"call":[" check_missing_space "," add_offence ","token pos "," has_space? ","token type "," positions_not_to_check include? "," positions_not_to_check ","token_before type == ","token_before type ","tokens each_cons ","processed_source tokens ","processed_source ast "," convention "," token_with_surrounding_space "," space_on_any_side? ","processed_source tokens  each_cons ","processed_source processed_source tokens  "]}," Rubocop Cop Style SurroundingSpace token_table":{"type":"method","name":"token_table","children":[],"call":["table []= ","t pos column ","t pos ","t pos line ","@processed_source tokens each_with_index ","@processed_source tokens "]}," Rubocop Cop Style SurroundingSpace index_of_last_token":{"type":"method","name":"index_of_last_token","children":[],"call":[" token_table [] ","e line "," token_table ","(erange\n  (int 0)\n  (send\n    (lvar :e) :column)) to_a reverse find ","(erange\n  (int 0)\n  (send\n    (lvar :e) :column)) to_a reverse ","(erange\n  (int 0)\n  (send\n    (lvar :e) :column)) to_a ","e column ","node loc expression end ","node loc expression ","node loc ","@token_table [] "," build_token_table "," toknode loc expression end n_tablnode loc expression end  [] ","node loc expression end  linnode loc expression end  "," toknode loc expression end n_tablnode loc expression end  ","(node loc expression end rangnode loc expression end \n  (int 0)\n  (snode loc expression end nd\n    (lvar :node loc expression end ) :column)) to_a rnode loc expression end vnode loc expression end rsnode loc expression end  find ","(node loc expression end rangnode loc expression end \n  (int 0)\n  (snode loc expression end nd\n    (lvar :node loc expression end ) :column)) to_a rnode loc expression end vnode loc expression end rsnode loc expression end  ","(node loc expression end rangnode loc expression end \n  (int 0)\n  (snode loc expression end nd\n    (lvar :node loc expression end ) :column)) to_a ","node loc expression end  column ","nodnode loc expression end  loc node loc expression end xprnode loc expression end ssion node loc expression end nd ","nodnode loc expression end  loc node loc expression end xprnode loc expression end ssion ","nodnode loc expression end  loc ","@toknode loc expression end n_tablnode loc expression end  [] "," build_toknode loc expression end n_tablnode loc expression end  "]}," Rubocop Cop Style SurroundingSpace index_of_first_token":{"type":"method","name":"index_of_first_token","children":[],"call":[" token_table [] ","b column ","b line "," token_table ","node loc expression begin ","node loc expression ","node loc ","@token_table [] "," build_token_table "," token_tanode loc expression begin le [] ","node loc expression begin  column ","node loc expression begin  line "," token_tanode loc expression begin le ","node loc expression node loc expression begin egin ","@token_tanode loc expression begin le [] "," node loc expression begin uild_token_tanode loc expression begin le "]}," Rubocop Cop Style SurroundingSpace space_between?":{"type":"method","name":"space_between?","children":[],"call":["char_preceding_2nd_token == ","t2 pos line > ","t1 pos line ","t1 pos ","t2 pos line ","t2 pos ","@processed_source [] [] ","t2 pos column - ","t2 pos column ","@processed_source [] ","t2 pos line - ","t1 type != ","t1 type ","char_preceding_2nd_token =~ ","@source [] [] ","@source [] ","@processed_source [] []  == ","@source [] []  == ","@processed_source [] []  =~ ","@source [] []  =~ "]}," Rubocop Cop Style StringLiterals autocorrect_action":{"type":"method","name":"autocorrect_action","children":[],"call":["@corrections << ","corrector replace ","node loc end ","node loc ","node loc begin "," lambda "," replace "]}," Rubocop Cop Style StringLiterals on_str":{"type":"method","name":"on_str","children":[],"call":[" do_autocorrect "," add_offence ","node loc expression ","node loc ","node loc begin is? ","node loc begin ","node loc expression source !~ ","node loc expression source "," part_of_ignored_node? ","node loc respond_to? "," convention "]}," Rubocop Cop Style SpaceAfterControlKeyword on_keyword":{"type":"method","name":"on_keyword","children":[],"call":[" add_offence ","exp source [] start_with? ","kw source + ","kw source ","exp source [] ","exp source ","kw begin_pos - ","exp begin_pos ","kw begin_pos ","node loc keyword ","node loc ","node loc expression ","node loc is_a? "," convention "," add_offense ","node loc expression  source [] start_with? ","node loc keyword  source + ","node loc keyword  source ","node loc expression  source [] ","node loc expression  source ","node loc keyword  begin_pos - ","node loc expression  begin_pos ","node loc keyword  begin_pos ","node loc node loc expression ression "]}," Rubocop Cop Style SpaceAfterColon kind":{"type":"method","name":"kind","children":[],"call":["token type "]}," Rubocop Cop Style SpaceAfterColon offset":{"type":"method","name":"offset","children":[],"call":["token text length + ","token text length ","token text ","token type "]}," Rubocop Cop Style SpaceAfterSemicolon kind":{"type":"method","name":"kind","children":[],"call":["token type == ","token type "]}," Rubocop Cop Style SpaceAfterComma kind":{"type":"method","name":"kind","children":[],"call":["token type == ","token type "]}," Rubocop Cop Style SpaceAfterCommaEtc offset":{"type":"method","name":"offset","children":[],"call":[]}," Rubocop Cop Style SpaceAfterCommaEtc investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offence "," sprintf "," kind ","t1 pos ","t2 pos column == ","t1 pos column + "," offset ","t1 pos column ","t2 pos column ","t2 pos ","t1 pos line == ","t2 pos line ","t1 pos line ","processed_source tokens each_cons ","processed_source tokens "," convention "]}," Rubocop Cop Style SingleLineMethods check":{"type":"method","name":"check","children":[],"call":[" add_offence ","node loc expression ","node loc ","(and\n  (send nil :allow_empty?)\n  (lvar :empty_body)) ! "," allow_empty? ","start_line == ","node children [] nil? ","node children [] ","node children ","node type == ","node type ","node loc end line ","node loc end ","node loc keyword line ","node loc keyword "," convention ","body nil? "," add_offense ","(and\n  (send nil :allow_empty?)\n  (lvar :node children [] nil? )) ! ","(and\n  (send nil :allow_empty?)\n  (lvar :body nil? )) ! ","node loc keyword line  == "]}," Rubocop Cop Style SingleLineMethods on_defs":{"type":"method","name":"on_defs","children":[],"call":[" check "]}," Rubocop Cop Style SingleLineMethods on_def":{"type":"method","name":"on_def","children":[],"call":[" check "]}," Rubocop Cop Style SingleLineMethods allow_empty?":{"type":"method","name":"allow_empty?","children":[],"call":["SingleLineMethods  config [] ","SingleLineMethods  config "," cop_config [] "," cop_config "]}," Rubocop Cop Style Semicolon investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offence "," source_range ","processed_source [] ","line - ","processed_source buffer ","tokens last pos column ","tokens last pos ","tokens last ","tokens last type == ","tokens last type ","tokens_for_lines each ","token pos line ","token pos ","processed_source tokens group_by ","processed_source tokens ","processed_source [] index ","expr_on_line size > ","expr_on_line size ","lines each ","exprs_lines group_by ","e loc expression line ","e loc expression ","e loc ","exprs map ","exprs size < ","exprs size ","node children "," on_node ","processed_source ast "," convention "," check_for_line_terminator "," check_for_expr_separator "," cop_config [] "," cop_config ","tokens last pos tokens last pos column  ","tokens last pos processed_source [] index  ","node children _lines group_by ","node children  map ","node children  size < ","node children  size "]}," Rubocop Cop Style RescueModifier check_rescue":{"type":"method","name":"check_rescue","children":[],"call":[" ignore_node ","first_child type == ","first_child type ","node children first ","node children ","node type ","node children first  type == ","node children first  type "]}," Rubocop Cop Style RescueModifier on_defs":{"type":"method","name":"on_defs","children":[],"call":[" check_rescue "," normal_rescue? "]}," Rubocop Cop Style RescueModifier on_def":{"type":"method","name":"on_def","children":[],"call":[" check_rescue "," normal_rescue? "]}," Rubocop Cop Style RescueModifier on_kwbegin":{"type":"method","name":"on_kwbegin","children":[],"call":[" check_rescue "," check "," normal_rescue? "]}," Rubocop Cop Style RescueModifier on_rescue":{"type":"method","name":"on_rescue","children":[],"call":[" add_offence ","node loc expression ","node loc "," ignored_node? "," convention "," add_offense "]}," Rubocop Cop Style RegexpLiteral error_message":{"type":"method","name":"error_message","children":[],"call":[" sprintf ","RegexpLiteral  max_slashes == ","RegexpLiteral  max_slashes ","Use %%r %sfor regular expressions matching more  + "," max_slashes == "," max_slashes "," format "]}," Rubocop Cop Style RegexpLiteral max_slashes":{"type":"method","name":"max_slashes","children":[],"call":[" cop_config [] "," cop_config "," fail ","m >= ","m is_a? "," cop_config []  >= "," cop_config []  is_a? "]}," Rubocop Cop Style RegexpLiteral on_regexp":{"type":"method","name":"on_regexp","children":[],"call":[" add_offence ","node loc expression ","node loc "," error_message ","slashes <= ","slashes > ","node loc begin is? ","node loc begin ","RegexpLiteral  max_slashes ","node loc expression source [] scan size ","node loc expression source [] scan ","node loc expression source [] ","node loc expression source ","node loc expression source count "," convention "," max_slashes ","total_string count ","(send\n  (lvar :string_parts) :map) join ","s loc expression source ","s loc expression ","s loc ","string_parts map ","child type == ","child type ","node children select ","node children "," max= ","slashes + "," slash_count_in_percent_r_regexp= "," add_offense "," slash_count_in_slashes_regexp= "," configure_max ","@options [] ","delimiter_start == ","node loc begin source [] ","node loc begin source ","node loc expression source [] scan size  <= ","node loc expression source count  <= ","total_string count  <= ","node loc expression source [] scan size  > ","node loc expression source count  > ","total_string count  > ","RegexpLiteral  RegexpLiteral  max_slashes _slashes ","RegexpLiteral  max_node loc expression source [] scan size  ","RegexpLiteral  max_node loc expression source count  ","RegexpLiteral  max_total_string count  "," RegexpLiteral  max_slashes _slashes "," max_node loc expression source [] scan size  "," max_node loc expression source count  "," max_total_string count  ","(send\n  (lvar :string_parts) :map) join  count "," RegexpLiteral  max_slashes = ","node loc expression source [] scan size  + ","node loc expression source count  + ","total_string count  + "," slash_count_in_node loc expression source [] scan size _regexp= "," slash_count_in_node loc expression source count _regexp= "," slash_count_in_total_string count _regexp= "," configure_RegexpLiteral  max_slashes  ","node loc begin source []  == "]}," Rubocop Cop Style RedundantSelf allow_self":{"type":"method","name":"allow_self","children":[],"call":["@allowed_send_nodes << ","receiver type == ","receiver type ","node type == ","node type "]}," Rubocop Cop Style RedundantSelf keyword?":{"type":"method","name":"keyword?","children":[],"call":["(sym :class) include? ","(sym :alias) include? "]}," Rubocop Cop Style RedundantSelf operator?":{"type":"method","name":"operator?","children":[],"call":["method_name to_s =~ ","method_name to_s "]}," Rubocop Cop Style RedundantSelf on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offence ","receiver loc expression ","receiver loc ","@local_variables include? ","@allowed_send_nodes include? "," keyword? "," operator? ","receiver type == ","receiver type "," convention "," constant_name? "," add_offense "]}," Rubocop Cop Style RedundantSelf on_lvasgn":{"type":"method","name":"on_lvasgn","children":[],"call":["@local_variables << "]}," Rubocop Cop Style RedundantSelf on_defs":{"type":"method","name":"on_defs","children":[],"call":[]}," Rubocop Cop Style RedundantSelf on_def":{"type":"method","name":"on_def","children":[],"call":[]}," Rubocop Cop Style RedundantSelf on_op_asgn":{"type":"method","name":"on_op_asgn","children":[],"call":[" allow_self "]}," Rubocop Cop Style RedundantSelf on_or_asgn":{"type":"method","name":"on_or_asgn","children":[],"call":[" allow_self "]}," Rubocop Cop Style RedundantSelf initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rubocop Cop Style RedundantReturn check":{"type":"method","name":"check","children":[],"call":[" add_offence ","last_expr loc keyword ","last_expr loc ","last_expr type == ","last_expr type ","expressions last ","node type == ","node type ","node loc keyword ","node loc "," convention "," check_return_node ","body type == ","body type ","expressions last  loc keyword ","expressions last  loc ","expressions last  type == ","expressions last  type "]}," Rubocop Cop Style RedundantReturn on_defs":{"type":"method","name":"on_defs","children":[],"call":[" check "]}," Rubocop Cop Style RedundantReturn on_def":{"type":"method","name":"on_def","children":[],"call":[" check "]}," Rubocop Cop Style RedundantBegin check":{"type":"method","name":"check","children":[],"call":[" add_offence ","node loc begin ","node loc ","node type == ","node type "," convention ","body type == ","body type "," add_offense "]}," Rubocop Cop Style RedundantBegin on_defs":{"type":"method","name":"on_defs","children":[],"call":[" check "]}," Rubocop Cop Style RedundantBegin on_def":{"type":"method","name":"on_def","children":[],"call":[" check "]}," Rubocop Cop Style ReduceArguments on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offence ","node loc expression ","node loc ","args_node == ","(sym :reduce) include? ","Util  block_length == ","Util  block_length "," convention ","element_node type == ","element_node type "]}," Rubocop Cop Style Proc on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offence ","block_method loc expression ","block_method loc ","block_method == "," convention "," add_offense "]}," Rubocop Cop Style ParenthesesAroundCondition safe_assignment_allowed?":{"type":"method","name":"safe_assignment_allowed?","children":[],"call":["ParenthesesAroundCondition  config [] ","ParenthesesAroundCondition  config "," cop_config [] "," cop_config "]}," Rubocop Cop Style ParenthesesAroundCondition safe_assignment?":{"type":"method","name":"safe_assignment?","children":[],"call":["ASGN_NODES  include? ","node children [] type ","node children [] ","node children ","node children size == ","node children size "]}," Rubocop Cop Style ParenthesesAroundCondition process_control_op":{"type":"method","name":"process_control_op","children":[],"call":[" add_offence ","cond loc expression ","cond loc "," safe_assignment_allowed? "," safe_assignment? ","cond type == ","cond type "," convention "," message "," parens_required? "," add_offense "]}," Rubocop Cop Style ParenthesesAroundCondition on_until":{"type":"method","name":"on_until","children":[],"call":[" process_control_op "]}," Rubocop Cop Style ParenthesesAroundCondition on_while":{"type":"method","name":"on_while","children":[],"call":[" process_control_op "]}," Rubocop Cop Style ParenthesesAroundCondition on_if":{"type":"method","name":"on_if","children":[],"call":[" process_control_op "," ternary_op? "]}," Rubocop Cop Style ParameterLists count_keyword_args?":{"type":"method","name":"count_keyword_args?","children":[],"call":["ParameterLists  config [] ","ParameterLists  config "," cop_config [] "," cop_config "]}," Rubocop Cop Style ParameterLists max_params":{"type":"method","name":"max_params","children":[],"call":["ParameterLists  config [] ","ParameterLists  config "," cop_config [] "," cop_config "]}," Rubocop Cop Style ParameterLists args_count":{"type":"method","name":"args_count","children":[],"call":["(send\n  (send\n    (lvar :node) :children) :reject) size ","a type == ","a type ","node children reject ","node children ","node children size "," count_keyword_args? "]}," Rubocop Cop Style ParameterLists on_args":{"type":"method","name":"on_args","children":[],"call":[" add_offence "," sprintf "," max_params ","node loc expression ","node loc "," args_count > "," args_count "," convention "," max= ","count > "," add_offense "," format "," args_ args_count  > "," args_ args_count  "," args_count  > "]}," Rubocop Cop Style OpMethod on_def":{"type":"method","name":"on_def","children":[],"call":[" add_offence "," sprintf ","args children [] loc expression ","args children [] loc ","args children [] ","args children ","args != ","args children size == ","args children size ","BLACKLISTED  include? ! ","BLACKLISTED  include? ","name !~ "," convention "," add_offense "," format ","TARGET_ARGS  include? ! ","TARGET_ARGS  include? "]}," Rubocop Cop Style OneLineConditional error_message":{"type":"method","name":"error_message","children":[],"call":[]}," Rubocop Cop Style OneLineConditional offending_line":{"type":"method","name":"offending_line","children":[],"call":["node loc expression line ","node loc expression ","node loc ","node loc expression source =~ ","node loc expression source "]}," Rubocop Cop Style NumericLiterals on_int":{"type":"method","name":"on_int","children":[],"call":[" add_offence ","node loc expression ","node loc ","node loc expression source split grep any? ","node loc expression source split grep ","node loc expression source split ","node loc expression source ","value > "," check "]}," Rubocop Cop Style Not on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offence ","node loc selector ","node loc ","node loc selector is? ","method_name == ","args empty? "," convention "," add_offense "]}," Rubocop Cop Style MultilineIfThen error_message":{"type":"method","name":"error_message","children":[],"call":["node loc keyword source ","node loc keyword ","node loc "]}," Rubocop Cop Style MultilineIfThen offending_line":{"type":"method","name":"offending_line","children":[],"call":["node loc expression begin line ","node loc expression begin ","node loc expression ","node loc ","right_after_cond source =~ ","right_after_cond source ","Parser Source Range  new ","next_thing begin_pos ","condition loc expression end end_pos ","condition loc expression end ","condition loc expression ","condition loc ","next_thing source_buffer ","node loc end ","else_clause loc expression begin ","else_clause loc expression ","else_clause loc ","body loc expression begin ","body loc expression ","body loc "," end_position ","Parser Source Range  new  source =~ ","Parser Source Range  new  source ","body loc expression begin  begin_pos ","node loc end  begin_pos ","body loc expression begin  source_buffer ","node loc end  source_buffer "]}," Rubocop Cop Style MethodLength calculate_length":{"type":"method","name":"calculate_length","children":[],"call":["lines size ","line =~ ","lines reject! "," count_comments? ","lines map! reject! ","lines map! ","source lines to_a [] ","source lines to_a ","source lines ","source lines to_a []  size ","source lines to_a []  reject! ","source lines to_a []  map! reject! ","source lines to_a []  map! ","source source lines to_a []  to_a [] ","source source lines to_a []  to_a ","source source lines to_a []  "]}," Rubocop Cop Style MethodLength check":{"type":"method","name":"check","children":[],"call":[" add_offence ","node loc keyword ","node loc "," sprintf "," max_length ","method_length > "," calculate_length ","node loc expression source ","node loc expression "," convention ","Util  source_length "," count_comments? "," calculate_length  > ","Util  source_length  > "]}," Rubocop Cop Style MethodLength count_comments?":{"type":"method","name":"count_comments?","children":[],"call":["MethodLength  config [] ","MethodLength  config "," cop_config [] "," cop_config "]}," Rubocop Cop Style MethodLength max_length":{"type":"method","name":"max_length","children":[],"call":["MethodLength  config [] ","MethodLength  config "," cop_config [] "," cop_config "]}," Rubocop Cop Style MethodLength on_defs":{"type":"method","name":"on_defs","children":[],"call":[" check "]}," Rubocop Cop Style MethodLength on_def":{"type":"method","name":"on_def","children":[],"call":[" check "]}," Rubocop Cop Style MethodCallParentheses on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offence ","node loc begin ","node loc ","args empty? "," do_autocorrect "," convention ","method_name =~ "," add_offense "]}," Rubocop Cop Style MethodAndVariableSnakeCase name_of_setter":{"type":"method","name":"name_of_setter","children":[],"call":["method_name to_s end_with? ","method_name to_s ","receiver type == ","receiver type "," after_dot ","Regexp  escape ","receiver loc expression source ","receiver loc expression ","receiver loc ","method_name length - ","= length ","method_name length "]}," Rubocop Cop Style MethodAndVariableSnakeCase name_of_variable":{"type":"method","name":"name_of_variable","children":[],"call":["vasgn_node children first ","vasgn_node children ","Parser Source Range  new ","expr begin_pos + ","name length ","expr begin_pos ","expr source_buffer ","vasgn_node loc expression ","vasgn_node loc ","vasgn_node loc expression  begin_pos + ","vasgn_node children first  length ","vasgn_node loc expression  begin_pos ","vasgn_node loc expression  source_buffer ","vasgn_node loc vasgn_node loc expression ession "]}," Rubocop Cop Style MethodAndVariableSnakeCase name_of_singleton_method":{"type":"method","name":"name_of_singleton_method","children":[],"call":["defs_node children [] ","defs_node children "," after_dot ","def + + ","Regexp  escape ","scope loc expression source ","scope loc expression ","scope loc ","method_name length "]}," Rubocop Cop Style MethodAndVariableSnakeCase name_of_instance_method":{"type":"method","name":"name_of_instance_method","children":[],"call":["def_node children first ","def_node children ","Parser Source Range  new ","begin_pos + ","method_name length ","expr source_buffer ","expr begin_pos + + ","space length ","expr begin_pos + ","def length ","expr begin_pos ","match captures ","(str \"^def(\\\\s+)([\\\\w]+[!?=]?\\\\b)\") match ","expr source ","def_node loc expression ","def_node loc ","expr begin_pos + +  + ","def_node loc expression  source_buffer ","expr expr begin_pos + +  + + ","def_node loc expression  begin_pos + + ","expr expr begin_pos + +  + ","def_node loc expression  begin_pos + ","expr expr begin_pos + +  ","def_node loc expression  begin_pos ","(str \"^def(\\s+)([\\w]+[!?=]?\\b)\") match  captures ","(str \"^def(\\\\s+)([\\\\w]+[!?=]?\\\\b)\") (str \"^def(\\s+)([\\w]+[!?=]?\\b)\") match  ","def_node loc expression  source ","def_node loc def_node loc expression ession "]}," Rubocop Cop Style MethodAndVariableSnakeCase investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offence ","n location expression ","n location ","OPERATOR_METHODS  include? ","name =~ "," name_of_setter "," name_of_variable "," name_of_singleton_method "," name_of_instance_method ","n type "," on_node ","processed_source ast ","range source to_sym ","range source "," convention ","range source to_sym  =~ "," range source to_sym _of_setter "," range source to_sym _of_variable "," range source to_sym _of_singleton_method "," range source to_sym _of_instance_method ","processed_source processed_source ast  "]}," Rubocop Cop Style LineLength max":{"type":"method","name":"max","children":[],"call":[" cop_config [] "," cop_config "]}," Rubocop Cop Style LineLength investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offence "," source_range ","line length - ","line length ","processed_source [] ","processed_source buffer "," sprintf ","line length > ","LineLength  max ","processed_source lines each_with_index ","processed_source lines "," convention "," max "," max= "," add_offense "," format ","LineLength  LineLength  max  "," LineLength  max  "," LineLength  max = "]}," Rubocop Cop Style LineContinuation investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offence "," source_range ","line length - ","line length ","processed_source [] ","processed_source buffer ","line =~ ","processed_source lines each_with_index ","processed_source lines "]}," Rubocop Cop Style LeadingCommentSpace investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offence ","comment loc ","comment loc line == ","comment loc line ","comment text start_with? ","comment text ","comment text =~ ","processed_source comments each ","processed_source comments ","comment loc expression "," convention "," add_offense "]}," Rubocop Cop Style Lambda lambda_length":{"type":"method","name":"lambda_length","children":[],"call":["end_line - ","block_node loc end line ","block_node loc end ","block_node loc ","block_node loc begin line ","block_node loc begin ","block_node loc end line  - "]}," Rubocop Cop Style Lambda on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offence ","block_method loc expression ","block_method loc ","lambda_length > ","selector == ","lambda_length == ","selector != "," lambda_length ","block_method loc selector source ","block_method loc selector ","block_method == "," convention "," add_offense "," lambda_length  > ","block_method loc selector source  == "," lambda_length  == ","block_method loc selector source  != ","  lambda_length  ","block_method loc block_method loc selector source  source ","block_method loc block_method loc selector source  "]}," Rubocop Cop Style IfWithSemicolon error_message":{"type":"method","name":"error_message","children":[],"call":[]}," Rubocop Cop Style IfWithSemicolon offending_line":{"type":"method","name":"offending_line","children":[],"call":["node loc begin line ","node loc begin ","node loc ","node loc begin is? "]}," Rubocop Cop Style IfThenElse check":{"type":"method","name":"check","children":[],"call":[" add_offence "," error_message ","node loc expression ","node loc "," offending_line ","node loc expression source =~ ","node loc expression source "," convention "]}," Rubocop Cop Style IfThenElse on_unless":{"type":"method","name":"on_unless","children":[],"call":[" check "]}," Rubocop Cop Style IfThenElse on_if":{"type":"method","name":"on_if","children":[],"call":[" check "]}," Rubocop Cop Style HashSyntax word_symbol_pair?":{"type":"method","name":"word_symbol_pair?","children":[],"call":["sym_name =~ ","key to_a [] ","key to_a ","key type == ","key type ","key to_a []  =~ "]}," Rubocop Cop Style HashSyntax on_hash":{"type":"method","name":"on_hash","children":[],"call":[" add_offence ","pair loc expression begin join ","pair loc operator ","pair loc ","pair loc expression begin ","pair loc expression ","pair loc operator is? ","pairs each "," word_symbol_pair? ","pairs all? "," convention "," fail "," hash_rockets_check "," ruby19_check "," cop_config [] "," cop_config "," style == "," style "]}," Rubocop Cop Style FavorUntilOverNegatedWhile error_message":{"type":"method","name":"error_message","children":[],"call":[]}," Rubocop Cop Style FavorUntilOverNegatedWhile on_while":{"type":"method","name":"on_while","children":[],"call":[" check "]}," Rubocop Cop Style FavorUnlessOverNegatedIf error_message":{"type":"method","name":"error_message","children":[],"call":[]}," Rubocop Cop Style FavorUnlessOverNegatedIf on_if":{"type":"method","name":"on_if","children":[],"call":[" check ","node loc keyword is? ","node loc keyword ","node loc ","node loc respond_to? "]}," Rubocop Cop Style FavorOtherKeywordOverNegation check":{"type":"method","name":"check","children":[],"call":[" add_offence "," error_message ","node loc expression ","node loc ","(and\n  (send\n    (send\n      (lvar :node) :loc) :respond_to?\n    (sym :else))\n  (send\n    (send\n      (lvar :node) :loc) :else)) ! ","node loc else ","node loc respond_to? ","method == ","condition type == ","condition type ","condition children last ","condition children "," convention ","condition children last  type == ","condition children last  type ","condition children last  children last ","condition children last  children "]}," Rubocop Cop Style FavorSprintf on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offence ","node loc selector ","node loc ","arg_nodes [] type == ","arg_nodes [] type ","arg_nodes [] ","(sym :str) include? ","receiver_node type ","method_name == "," convention "]}," Rubocop Cop Style WhileUntilModifier investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offence ","node loc expression ","node loc "," check ","processed_source comments ","node loc end "," on_node ","processed_source ast ","node loc keyword "," convention "," message ","node loc keyword source "," add_offense "]}," Rubocop Cop Style IfUnlessModifier if_else?":{"type":"method","name":"if_else?","children":[],"call":["node loc else ","node loc ","node loc respond_to? "]}," Rubocop Cop Style IfUnlessModifier elsif?":{"type":"method","name":"elsif?","children":[],"call":["node loc keyword is? ","node loc keyword ","node loc "]}," Rubocop Cop Style IfUnlessModifier modifier_if?":{"type":"method","name":"modifier_if?","children":[],"call":["node loc end nil? ","node loc end ","node loc "]}," Rubocop Cop Style IfUnlessModifier ternary_op?":{"type":"method","name":"ternary_op?","children":[],"call":["node loc respond_to? ","node loc "]}," Rubocop Cop Style IfUnlessModifier investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offence "," error_message ","node loc expression ","node loc "," check ","processed_source comments "," if_else? "," elsif? "," modifier_if? "," ternary_op? "," on_node ","processed_source ast ","node loc keyword "," convention ","node loc keyword source "," add_offense "]}," Rubocop Cop Style IfUnlessModifier error_message":{"type":"method","name":"error_message","children":[],"call":["Favor modifier if/unless usage when you have a single-line body.  + "]}," Rubocop Cop Style FavorModifier body_has_comment?":{"type":"method","name":"body_has_comment?","children":[],"call":["comment_lines include? ","body loc expression line ","body loc expression ","body loc ","comments map map ","comments map ","comments map map  include? "]}," Rubocop Cop Style FavorModifier body_length":{"type":"method","name":"body_length","children":[],"call":["body loc expression size ","body loc expression ","body loc "]}," Rubocop Cop Style FavorModifier length":{"type":"method","name":"length","children":[],"call":["sexp loc expression source lines to_a size ","sexp loc expression source lines to_a ","sexp loc expression source lines ","sexp loc expression source ","sexp loc expression ","sexp loc "]}," Rubocop Cop Style FavorModifier check":{"type":"method","name":"check","children":[],"call":[" body_has_comment? ! "," body_has_comment? ","total <= ","LineLength  max ","indentation + + + + + ","indentation + + + + ","indentation + + + ","indentation + + ","indentation + ","cond loc expression size ","cond loc expression ","cond loc ","sexp loc keyword size ","sexp loc keyword ","sexp loc ","sexp loc keyword column ","body_length == "," body_length "," length > "," length ","sexp loc keyword source "," max_line_length "," conditional_length "," on_node ","indentation + + + + +  <= ","sexp loc keyword column  + + + + + ","sexp loc keyword column  + + + + ","sexp loc keyword column  + + + ","sexp loc keyword column  + + ","sexp loc keyword column  + "," body_length  == ","  body_length  "]}," Rubocop Cop Style FavorJoin on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offence ","node loc selector ","node loc ","arg_nodes [] type == ","arg_nodes [] type ","arg_nodes [] ","method_name == ","receiver_node type == ","receiver_node type "," convention "," add_offense "]}," Rubocop Cop Style EndOfLine investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offence "," source_range ","line length - ","line length ","processed_source [] ","processed_source buffer ","line =~ ","processed_source lines each_with_index ","processed_source lines "," convention ","original_source lines each_with_index ","original_source lines ","IO  read ","processed_source buffer name ","buffer source encoding ","buffer source ","buffer name "," add_offense ","processed_source processed_source buffer  ","IO  read  lines each_with_index ","IO  read  lines ","processed_source processed_source buffer  name ","processed_source buffer  source encoding ","processed_source buffer  source ","processed_source buffer  name "]}," Rubocop Cop Style EndBlock on_postexe":{"type":"method","name":"on_postexe","children":[],"call":[" add_offence ","node loc keyword ","node loc "," convention "," add_offense "]}," Rubocop Cop Style Encoding investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offence "," source_range ","processed_source [] ","processed_source buffer ","line =~ ","processed_source [] =~ ","RUBY_VERSION  >= "," convention "," add_offense "," offense "," encoding_line_number ","processed_source buffer source empty? ","processed_source buffer source ","processed_source []  =~ "," encoding_processed_source [] _number "," encoding_ encoding_line_number  "]}," Rubocop Cop Style EmptyLiteral on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offence ","node loc expression ","node loc "," part_of_ignored_node? "," do_autocorrect "," convention "," add_offense "]}," Rubocop Cop Style EmptyLines investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offence "," source_range ","processed_source [] ","line - ","processed_source buffer ","processed_source [] empty? ","(erange\n  (begin\n    (send\n      (lvar :prev_line) :+\n      (int 1)))\n  (lvar :cur_line)) each ","prev_line + ","line_diff > ","cur_line - ","token pos line ","token pos ","processed_source tokens each ","processed_source tokens ","processed_source tokens empty? "," convention "," add_offense ","(send\n  (send\n    (lvar :processed_source) :tokens) :sort_by) each ","t pos line ","t pos ","processed_source tokens sort_by "," source_ source_range  ","(e source_range \n  (begin\n    (send\n      (lvar :prev_line) :+\n      (int 1)))\n  (lvar :cur_line)) each ","(erange\n  (begin\n    (send\n      (lvar :prev_line) :+\n      (int 1)))\n  (lvar :token pos line )) each ","cur_line -  > ","token pos line  - "]}," Rubocop Cop Style EmptyLineBetweenDefs on_def":{"type":"method","name":"on_def","children":[],"call":[" add_offence ","node loc keyword ","node loc ","(send\n  (lvar :def_start) :-\n  (ivar :@prev_def_end)) < ","def_start - ","node loc end line ","node loc end ","node loc keyword line ","(send\n  (lvar :def_start) :-\n  (ivar :@prev_def_end)) == "," singe_line_def? "," def_end "," convention "," cop_config [] "," cop_config ","(send\n  (send nil :def_start\n    (lvar :node)) :-\n  (ivar :@prev_def_end)) == "," def_start - "," def_start "," add_offense ","(send\n  (lvar :def_start) :-\n  (ivar :@prev_node loc end line )) < ","(send\n  (lvar :node loc keyword line ) :-\n  (ivar :@prev_def_end)) < ","(send\n  (lvar :def_start) :-\n  (ivar : def_end )) < ","node loc keyword line  - ","(send\n  (lvar :def_start) :-\n  (ivar :@prev_node loc end line )) == ","(send\n  (lvar :node loc keyword line ) :-\n  (ivar :@prev_def_end)) == ","(send\n  (lvar :def_start) :-\n  (ivar : def_end )) == "," node loc end line  ","(send\n  (send nil :def_start\n    (lvar :node)) :-\n  (ivar :@prev_node loc end line )) == ","(send\n  (send nil :node loc keyword line \n    (lvar :node)) :-\n  (ivar :@prev_def_end)) == ","(send\n  (send nil :def_start\n    (lvar :node)) :-\n  (ivar : def_end )) == "," node loc keyword line  - "," node loc keyword line  "]}," Rubocop Cop Style DotPosition proper_dot_position?":{"type":"method","name":"proper_dot_position?","children":[],"call":[" fail ","dot_line != ","dot_line == ","DotPosition  config [] downcase ","DotPosition  config [] ","DotPosition  config ","node loc selector line ","node loc selector ","node loc ","node loc dot line ","node loc dot ","node loc begin line ","node loc begin "," cop_config [] downcase "," cop_config [] "," cop_config "," same_line? "," style ","selector_line == ","receiver loc expression end line ","receiver loc expression end ","receiver loc expression ","receiver loc ","node loc dot line  != ","node loc dot line  == ","node loc selector line  == ","node loc begin line  == "]}," Rubocop Cop Style DotPosition on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offence ","node loc dot ","node loc "," proper_dot_position? "," convention "," opposite_style_detected "," correct_style_detected "," add_offense ","dot_line != ","node loc selector line ","node loc selector ","node loc dot line ","node loc dot line  != "]}," Rubocop Cop Style Documentation check_modules":{"type":"method","name":"check_modules","children":[],"call":[" add_offence "," format ","node loc keyword ","node loc ","ast_with_comments [] empty? ","ast_with_comments [] ","namespace ! ","body type == ","body type ","(sym :class) include? ","n type ","body children all? ","body children ","body nil? "," on_node "," convention "]}," Rubocop Cop Style Documentation check_classes":{"type":"method","name":"check_classes","children":[],"call":[" add_offence "," format ","node loc keyword ","node loc ","ast_with_comments [] empty? ","ast_with_comments [] ","body != "," on_node "," convention "]}," Rubocop Cop Style Documentation investigate":{"type":"method","name":"investigate","children":[],"call":[" check_modules "," check_classes ","Parser Source Comment  associate ","processed_source comments ","processed_source ast "," check ","processed_source processed_source ast  "]}," Rubocop Cop Style DefWithoutParentheses on_defs":{"type":"method","name":"on_defs","children":[],"call":[" add_offence ","args loc expression ","args loc ","args loc begin nil? ","args loc begin ","args children size > ","args children size ","args children "," do_autocorrect "," convention "]}," Rubocop Cop Style DefWithoutParentheses on_def":{"type":"method","name":"on_def","children":[],"call":[" add_offence ","args loc expression ","args loc ","args loc begin nil? ","args loc begin ","args children size > ","args children size ","args children "," do_autocorrect "," convention "]}," Rubocop Cop Style DefWithParentheses on_defs":{"type":"method","name":"on_defs","children":[],"call":[" add_offence ","args loc begin ","args loc ","args children == ","args children ","start_line == ","node loc end line ","node loc end ","node loc ","node loc keyword line ","node loc keyword "," do_autocorrect "," convention ","node loc keyword line  == "]}," Rubocop Cop Style DefWithParentheses on_def":{"type":"method","name":"on_def","children":[],"call":[" add_offence ","args loc begin ","args loc ","args children == ","args children ","start_line == ","node loc end line ","node loc end ","node loc ","node loc keyword line ","node loc keyword "," do_autocorrect "," convention ","node loc keyword line  == "]}," Rubocop Cop Style ConstantName on_casgn":{"type":"method","name":"on_casgn","children":[],"call":[" add_offence ","node loc name ","node loc ","const_name !~ ","value type == ","value type ","(sym :send) include? "," convention "," add_offense "]}," Rubocop Cop Style CommentAnnotation correct_annotation?":{"type":"method","name":"correct_annotation?","children":[],"call":["note ! ","colon ! ","KEYWORDS  include? "," keyword? "]}," Rubocop Cop Style CommentAnnotation annotation?":{"type":"method","name":"annotation?","children":[],"call":["note ! ","KEYWORDS  include? ","first_word upcase "," just_first_word_of_sentence? ! "," just_first_word_of_sentence? "," keyword_appearance? "]}," Rubocop Cop Style CommentAnnotation investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offence ","Parser Source Range  new ","start + ","processed_source buffer ","first_word length + ","(or\n  (lvar :colon)\n  (str \"\")) length ","first_word length ","comment loc begin_pos + ","margin length ","comment loc begin_pos ","comment loc "," correct_annotation? ! "," correct_annotation? "," annotation? ","match captures ","comment text match ","comment text ","processed_source comments each ","processed_source comments ","comment loc expression begin_pos + ","comment loc expression begin_pos ","comment loc expression "," convention "," split_comment "," add_offense ","comment loc begin_pos +  + ","comment loc expression begin_pos +  + ","first_word first_word length +  + ","(or\n  (lvar :colon)\n  (str \"\")) first_word length +  ","first_word first_word length +  ","margin first_word length +  ","comment text match  captures ","comment text comment text match  "]}," Rubocop Cop Style ColonMethodCall autocorrect_action":{"type":"method","name":"autocorrect_action","children":[],"call":["@corrections << ","corrector replace ","node loc dot ","node loc "," lambda "," replace "]}," Rubocop Cop Style ColonMethodCall on_send":{"type":"method","name":"on_send","children":[],"call":[" do_autocorrect "," add_offence ","node loc dot ","node loc ","node loc dot is? "," allowed_name ","_method_name to_s "," convention "," add_offense ","method_name to_s "]}," Rubocop Cop Style CollectionMethods check_method_node":{"type":"method","name":"check_method_node","children":[],"call":[" add_offence "," sprintf "," class preferred_methods [] "," class preferred_methods "," class ","node loc selector ","node loc "," do_autocorrect "," preferred_method "," convention "," preferred_methods [] "," preferred_methods "," add_offense "," format "]}," Rubocop Cop Style CollectionMethods on_send":{"type":"method","name":"on_send","children":[],"call":[" check_method_node ","args first type == ","args first type ","args first ","args size == ","args size "," add_offence "," sprintf ","PREFERRED_METHODS  [] ","node loc selector ","node loc "]}," Rubocop Cop Style CollectionMethods on_block":{"type":"method","name":"on_block","children":[],"call":[" check_method_node "]}," Rubocop Cop Style CollectionMethods preferred_methods":{"type":"method","name":"preferred_methods","children":[],"call":[" cop_config [] symbolize_keys "," cop_config [] "," cop_config ","(send\n  (lvar :merged) :reject) symbolize_keys ","overrides include? ","merged reject ","merged values - ","default values ","merged values "," default_cop_config [] "," default_cop_config ","(send\n  (lvar : cop_config [] ) :reject) symbolize_keys ","merged values -  include? "," cop_config []  reject "," cop_config []  values - "," default_cop_config []  values "," cop_config []  values ","  default_cop_config [] _cop_config [] ","  default_cop_config [] _cop_config "]}," Rubocop Cop Style ClassMethods on_defs":{"type":"method","name":"on_defs","children":[],"call":[" add_offence ","definee loc name ","definee loc ","definee type == ","definee type "," convention "," add_offense "," message "]}," Rubocop Cop Style ClassAndModuleCamelCase check_name":{"type":"method","name":"check_name","children":[],"call":[" add_offence ","node loc name ","node loc ","name =~ ","node loc name source "," convention "," add_offense ","node loc node loc name source  ","node loc name source  =~ ","node loc node loc name source  source "]}," Rubocop Cop Style ClassAndModuleCamelCase on_module":{"type":"method","name":"on_module","children":[],"call":[" check_name "]}," Rubocop Cop Style ClassAndModuleCamelCase on_class":{"type":"method","name":"on_class","children":[],"call":[" check_name "]}," Rubocop Cop Style CharacterLiteral autocorrect_action":{"type":"method","name":"autocorrect_action","children":[],"call":["@corrections << ","corrector replace ","node loc expression ","node loc ","string length == ","string length ","node loc expression source [] ","node loc expression source "," lambda "," replace ","node loc expression source []  length == ","node loc expression source []  length "]}," Rubocop Cop Style CharacterLiteral on_str":{"type":"method","name":"on_str","children":[],"call":[" do_autocorrect "," add_offence ","node loc expression ","node loc ","node loc expression source size between? ","node loc expression source size ","node loc expression source ","node loc begin is? ","node loc begin "," part_of_ignored_node? ","node loc respond_to? "," convention ","node loc expression source size < "]}," Rubocop Cop Style CaseIndentation on_case":{"type":"method","name":"on_case","children":[],"call":[" add_offence ","pos column != ","pos column ","when_node loc keyword ","when_node loc ","whens each ","case_node location keyword column ","case_node location keyword ","case_node location "," convention ","Indent when  + ","base_column + "," base_column "," cop_config values_at "," cop_config "," check_when "," cop_config [] "," style ","when_node loc keyword  column != ","when_node loc keyword  column "," base_column  + "," style _column + ","  base_column  ","  style _column "]}," Rubocop Cop Style CaseEquality on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offence ","node loc selector ","node loc ","method_name == "," convention "," add_offense "]}," Rubocop Cop Style Blocks on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offence ","node loc begin ","node loc ","block_begin != ","block_length == ","block_begin == ","block_length > ","node loc begin source ","Util  block_length "," ignored_node? "," convention "," add_offense ","node loc begin source  != ","Util  block_length  == ","node loc begin source  == ","Util  block_length  > ","Util  Util  block_length  "]}," Rubocop Cop Style BlockNesting message":{"type":"method","name":"message","children":[],"call":[]}," Rubocop Cop Style BlockNesting check_nesting_level":{"type":"method","name":"check_nesting_level","children":[],"call":[" check_nesting_level ","child is_a? ","node children each ","node children "," add_offence "," message ","node location expression ","node location ","current_level == ","max + ","node loc keyword is? ","node loc keyword ","node loc ","node loc respond_to? ","NESTING_BLOCKS  include? ","node type "," convention "," max= "," add_offense "," ignore_node "," part_of_ignored_node? ","current_level > "]}," Rubocop Cop Style BlockNesting investigate":{"type":"method","name":"investigate","children":[],"call":[" check_nesting_level ","processed_source ast ","BlockNesting  config [] ","BlockNesting  config "," cop_config [] "," cop_config "]}," Rubocop Cop Style BlockComments investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offence ","comment loc ","comment text start_with? ","comment text ","processed_source comments each ","processed_source comments ","comment loc expression "," convention "," add_offense "]}," Rubocop Cop Style BeginBlock on_preexe":{"type":"method","name":"on_preexe","children":[],"call":[" add_offence ","node loc keyword ","node loc "," convention "," add_offense "]}," Rubocop Cop Style AvoidPerlisms on_gvar":{"type":"method","name":"on_gvar","children":[],"call":[" add_offence ","PREFERRED_VARS  [] ","node loc expression ","node loc ","global_var to_s ","global_var to_s  to_s "]}," Rubocop Cop Style AvoidPerlBackrefs on_nth_ref":{"type":"method","name":"on_nth_ref","children":[],"call":[" add_offence ","node loc expression ","node loc "]}," Rubocop Cop Style AvoidGlobalVars check":{"type":"method","name":"check","children":[],"call":[" add_offence ","node loc name ","node loc ","BUILT_IN_VARS  include? ","global_var to_s "]}," Rubocop Cop Style AvoidGlobalVars on_gvasgn":{"type":"method","name":"on_gvasgn","children":[],"call":[" check "]}," Rubocop Cop Style AvoidGlobalVars on_gvar":{"type":"method","name":"on_gvar","children":[],"call":[" check "]}," Rubocop Cop Style AvoidFor on_for":{"type":"method","name":"on_for","children":[],"call":[" add_offence ","node loc keyword ","node loc "]}," Rubocop Cop Style AvoidClassVars on_cvasgn":{"type":"method","name":"on_cvasgn","children":[],"call":[" add_offence "," sprintf ","node loc name ","node loc "]}," Rubocop Cop Style Attr on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offence ","node loc selector ","node loc "," command? "," do_autocorrect "," convention "," add_offense "]}," Rubocop Cop Style AsciiIdentifiers investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offence ","t pos ","t text =~ ","t text ","t type == ","t type ","processed_source tokens each ","processed_source tokens "," convention ","t text ascii_only? ! ","t text ascii_only? "," add_offense "]}," Rubocop Cop Style AsciiComments investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offence ","comment loc ","comment text =~ ","comment text ","processed_source comments each ","processed_source comments ","comment loc expression "," convention ","comment text ascii_only? "," add_offense "]}," Rubocop Cop Style AndOr autocorrect_action":{"type":"method","name":"autocorrect_action","children":[],"call":["@corrections << ","corrector replace ","node loc operator ","node loc ","node type == ","node type "," lambda ","node == ","SourceParser  parse ast ","SourceParser  parse "," rewrite_node "," replace "]}," Rubocop Cop Style AndOr process_logical_op":{"type":"method","name":"process_logical_op","children":[],"call":[" do_autocorrect "," add_offence "," sprintf ","OPS  [] ","node loc operator ","node loc ","op == ","node type to_s ","node type ","node loc operator source "," convention "," add_offense "," format ","node loc node loc operator source erator ","node loc operator source  == ","node loc node loc operator source erator source "]}," Rubocop Cop Style AndOr on_or":{"type":"method","name":"on_or","children":[],"call":[" process_logical_op "]}," Rubocop Cop Style AndOr on_and":{"type":"method","name":"on_and","children":[],"call":[" process_logical_op "]}," Rubocop Cop Style AlignParameters on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offence ","arg loc expression ","arg loc ","cur_arg_col != ","cur_arg_line != ","arg loc expression column ","arg loc expression line ","args each ","args first loc expression line ","args first loc expression ","args first loc ","args first ","args first loc expression column ","args size > ","args size ","method != "," do_autocorrect ","first_arg_column - ","current_pos column ","current_pos column != ","current_pos line > ","prev loc expression line ","prev loc expression ","prev loc ","current_pos line ","current loc expression ","current loc ","args each_cons ","args size <= ","method == "," convention "," check_alignment "," base_column ","arg loc expression column  != ","arg loc expression line  != ","args first loc expression column umn - ","args first loc expression column  - ","current loc expression  column ","current loc expression  column != ","current loc expression  line > ","current loc expression  line "]}," Rubocop Cop Style Alias on_alias":{"type":"method","name":"on_alias","children":[],"call":[" add_offence ","node loc keyword ","node loc ","old type == ","old type ","new type == ","new type "," convention "," ignored_node? "," add_offense "]}," Rubocop Cop Style AccessControl modifier_node?":{"type":"method","name":"modifier_node?","children":[],"call":["(const nil :PRIVATE_NODE) include? "]}," Rubocop Cop Style AccessControl investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offence "," format ","send_node loc expression ","send_node loc ","processed_source [] chomp empty? ","processed_source [] chomp ","processed_source [] ","send_line - ","send_node loc line ","send_start_col - != ","send_start_col - ","send_node loc selector source ","send_node loc selector ","send_node loc expression column "," modifier_node? "," on_node ","class_node children compact each ","class_node children compact ","class_node children ","class_node loc expression column ","class_node loc expression ","class_node loc ","processed_source ast "," class_constructor? ! "," class_constructor? ","class_node type == ","class_node type "," convention ","send_node loc line  - ","send_node loc expression column  - != ","send_node loc expression column  - ","send_node loc send_node loc selector source  source ","send_node loc send_node loc selector source  ","processed_source processed_source ast  "]}," Rubocop Cop Rails Validation on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offence ","node loc selector ","node loc ","BLACKLIST  include? ","receiver nil? "," convention "," add_offense "]}," Rubocop Cop Offence <=>":{"type":"method","name":"<=>","children":[],"call":["result == "," send <=> ","other send "," send ","(sym :line) each "," send <=>  == "]}," Rubocop Cop Offence ==":{"type":"method","name":"==","children":[],"call":[" cop_name == ","other cop_name "," cop_name "," message == ","other message "," message "," column == ","other column "," column "," line == ","other line "," line "," severity == ","other severity "," severity "," line_number == ","other line_number "," line_number "]}," Rubocop Cop Offence real_column":{"type":"method","name":"real_column","children":[],"call":[" column + "," column "]}," Rubocop Cop Offence severity_level":{"type":"method","name":"severity_level","children":[],"call":["SEVERITIES  index + ","SEVERITIES  index "," severity "]}," Rubocop Cop Offence clang_severity":{"type":"method","name":"clang_severity","children":[],"call":["C color ","W color ","E color ","F color "]}," Rubocop Cop Offence from_diagnostic":{"type":"method","name":"from_diagnostic","children":[],"call":[]}," Rubocop Cop Lint Void check_for_literal":{"type":"method","name":"check_for_literal","children":[],"call":[" add_offence "," sprintf ","node loc expression source ","node loc expression ","node loc ","LITERALS  include? ","node type "," warning "," add_offense "," format "]}," Rubocop Cop Lint Void check_for_var":{"type":"method","name":"check_for_var","children":[],"call":[" add_offence "," sprintf ","node loc name source ","node loc name ","node loc ","VARS  include? ","node type "," warning "," add_offense "," format "]}," Rubocop Cop Lint Void check_for_void_op":{"type":"method","name":"check_for_void_op","children":[],"call":[" add_offence "," sprintf ","node loc selector ","node loc ","OPS  include? ","node loc selector source ","node type == ","node type "," warning "," add_offense "," format "]}," Rubocop Cop Lint Void on_begin":{"type":"method","name":"on_begin","children":[],"call":[" check_for_var "," check_for_literal "," check_for_void_op ","expressions [] each ","expressions [] ","expressions drop_last each ","expressions drop_last "]}," Rubocop Cop Lint UnusedLocalVariable after_leaving_scope":{"type":"method","name":"after_leaving_scope","children":[],"call":[" add_offence ","entry node loc expression ","entry node loc ","entry node "," sprintf ","entry name ","entry name to_s start_with? ","entry name to_s ","TYPES_TO_ACCEPT_UNUSED  include? ","entry node type ","entry used? ","scope variable_entries each_value ","scope variable_entries "]}," Rubocop Cop Lint UnusedLocalVariable investigate":{"type":"method","name":"investigate","children":[],"call":[" inspect_variables ","processed_source ast "]}," Rubocop Cop Lint UnreachableCode flow_command?":{"type":"method","name":"flow_command?","children":[],"call":[" command? ","FLOW_COMMANDS  any? "]}," Rubocop Cop Lint UnreachableCode on_begin":{"type":"method","name":"on_begin","children":[],"call":[" add_offence ","e2 loc expression ","e2 loc "," flow_command? ","NODE_TYPES  include? ","e1 type ","expressions each_cons "," warning "," add_offense "]}," Rubocop Cop Lint ShadowingOuterLocalVariable before_declaring_variable":{"type":"method","name":"before_declaring_variable","children":[],"call":[" add_offence ","entry node loc expression ","entry node loc ","entry node "," sprintf ","entry name "," variable_table find_variable_entry "," variable_table ","entry name to_s start_with? ","entry name to_s ","ARGUMENT_DECLARATION_TYPES  include? ","entry node type "," variable_table current_scope node type == "," variable_table current_scope node type "," variable_table current_scope node "," variable_table current_scope "," warning ","variable declaration_node ","variable name "," variable_table find_variable ","variable name to_s start_with? ","variable name to_s "," add_offense "," format ","variable_table find_variable "]}," Rubocop Cop Lint ShadowingOuterLocalVariable investigate":{"type":"method","name":"investigate","children":[],"call":[" inspect_variables ","processed_source ast "]}," Rubocop Cop Lint RescueException targets_exception?":{"type":"method","name":"targets_exception?","children":[],"call":["klass_name == ","namespace type == ","namespace type ","namespace nil? ","rescue_arg_node type == ","rescue_arg_node type ","Util  const_name == ","Util  const_name "]}," Rubocop Cop Lint RescueException on_resbody":{"type":"method","name":"on_resbody","children":[],"call":[" add_offence ","node location expression ","node location "," targets_exception? ","rescue_args any? ","node children first children ","node children first ","node children "," warning "," add_offense ","node children first children  any? "]}," Rubocop Cop Lint Loop register_offence":{"type":"method","name":"register_offence","children":[],"call":[" add_offence ","node loc keyword ","node loc "," warning "]}," Rubocop Cop Lint Loop on_until_post":{"type":"method","name":"on_until_post","children":[],"call":[" register_offence "," register_offense "]}," Rubocop Cop Lint Loop on_while_post":{"type":"method","name":"on_while_post","children":[],"call":[" register_offence "," register_offense "]}," Rubocop Cop Lint LiteralInCondition handle_node":{"type":"method","name":"handle_node","children":[],"call":[" check_node ","(sym :send) include? ","node type "," add_offence "," format ","node loc expression source ","node loc expression ","node loc "," literal? "," warning "," add_offense "]}," Rubocop Cop Lint LiteralInCondition check_node":{"type":"method","name":"check_node","children":[],"call":[" handle_node ","node children first ","node children ","node children size == ","node children size ","node type == ","node type ","operands each ","(sym :and) include? "," not? "]}," Rubocop Cop Lint LiteralInCondition literal?":{"type":"method","name":"literal?","children":[],"call":["LITERALS  include? ","node type "]}," Rubocop Cop Lint LiteralInCondition not?":{"type":"method","name":"not?","children":[],"call":["method_name == ","node type == ","node type "]}," Rubocop Cop Lint LiteralInCondition check_for_literal":{"type":"method","name":"check_for_literal","children":[],"call":[" check_node "," add_offence "," format ","cond loc expression source ","cond loc expression ","cond loc "," literal? "," warning "," add_offense ","op loc expression source ","op loc expression ","op loc ","LITERALS  include? ","op type ","operands each "," on_node "]}," Rubocop Cop Lint LiteralInCondition on_until_post":{"type":"method","name":"on_until_post","children":[],"call":[" check_for_literal "]}," Rubocop Cop Lint LiteralInCondition on_until":{"type":"method","name":"on_until","children":[],"call":[" check_for_literal "]}," Rubocop Cop Lint LiteralInCondition on_while_post":{"type":"method","name":"on_while_post","children":[],"call":[" check_for_literal "]}," Rubocop Cop Lint LiteralInCondition on_while":{"type":"method","name":"on_while","children":[],"call":[" check_for_literal "]}," Rubocop Cop Lint LiteralInCondition on_if":{"type":"method","name":"on_if","children":[],"call":[" check_for_literal "]}," Rubocop Cop Lint HandleExceptions on_resbody":{"type":"method","name":"on_resbody","children":[],"call":[" add_offence ","node loc expression ","node loc "," warning "," add_offense "]}," Rubocop Cop Lint Eval on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offence ","node loc selector ","node loc ","method_name == ","receiver nil? "," warning "," add_offense "]}," Rubocop Cop Lint EnsureReturn on_ensure":{"type":"method","name":"on_ensure","children":[],"call":[" add_offence ","e loc expression ","e loc "," on_node "," warning "," add_offense "]}," Rubocop Cop Lint EndInMethod check":{"type":"method","name":"check","children":[],"call":[" add_offence ","end_node loc keyword ","end_node loc "," on_node "," warning "," add_offense "]}," Rubocop Cop Lint EndInMethod on_defs":{"type":"method","name":"on_defs","children":[],"call":[" check "]}," Rubocop Cop Lint EndInMethod on_def":{"type":"method","name":"on_def","children":[],"call":[" check "]}," Rubocop Cop Lint EndAlignment check":{"type":"method","name":"check","children":[],"call":[" add_offence "," sprintf ","kw_loc column ","kw_loc line ","kw_loc source ","end_loc column ","end_loc line ","kw_loc column != ","kw_loc line != ","node loc end ","node loc ","node loc keyword "," warning "," check_offset ","node loc keyword source ","node loc keyword  column ","node loc keyword  line ","node loc keyword  source ","node loc end  column ","node loc end  line ","node loc keyword  column != ","node loc keyword  line != "]}," Rubocop Cop Lint EndAlignment on_until":{"type":"method","name":"on_until","children":[],"call":[" check "]}," Rubocop Cop Lint EndAlignment on_while":{"type":"method","name":"on_while","children":[],"call":[" check "]}," Rubocop Cop Lint EndAlignment on_if":{"type":"method","name":"on_if","children":[],"call":[" check ","node loc respond_to? ","node loc "]}," Rubocop Cop Lint EndAlignment on_module":{"type":"method","name":"on_module","children":[],"call":[" check "]}," Rubocop Cop Lint EndAlignment on_class":{"type":"method","name":"on_class","children":[],"call":[" check "]}," Rubocop Cop Lint EndAlignment on_defs":{"type":"method","name":"on_defs","children":[],"call":[" check "]}," Rubocop Cop Lint EndAlignment on_def":{"type":"method","name":"on_def","children":[],"call":[" check "]}," Rubocop Cop Lint EmptyEnsure on_ensure":{"type":"method","name":"on_ensure","children":[],"call":[" add_offence ","node loc keyword ","node loc "," warning "," add_offense "]}," Rubocop Cop Lint BlockAlignment block_is_on_next_line?":{"type":"method","name":"block_is_on_next_line?","children":[],"call":["begin_node loc line != ","block_node loc line ","block_node loc ","begin_node loc line ","begin_node loc "]}," Rubocop Cop Lint BlockAlignment already_processed_node?":{"type":"method","name":"already_processed_node?","children":[],"call":["@inspected_blocks include? "]}," Rubocop Cop Lint BlockAlignment check_block_alignment":{"type":"method","name":"check_block_alignment","children":[],"call":[" add_offence "," sprintf ","end_loc column ","end_loc line ","start_column != ","block_loc begin line != ","block_loc begin line ","block_loc begin ","block_loc end ","start_loc source lines to_a first chomp ","start_loc source lines to_a first ","start_loc source lines to_a ","start_loc source lines ","start_loc source ","start_loc column ","start_loc line ","match captures [] ","match captures ","match captures [] length ","start_loc line + ","start_loc source count ","start_loc source match ","start_loc column != ","block_node loc begin line != ","block_node loc begin line ","block_node loc begin ","block_node loc ","block_node loc end ","start_node loc expression ","start_node loc "," warning ","(str \" or \") + ","do_loc line ","match [] ","start_loc column == ","start_loc line == ","end_loc column != ","match begin ","(str \"\\\\S.*\") match ","do_loc source_line ","do_loc line == "," alt_start_msg "," add_offense "," format ","block_loc end  column ","block_node loc end  column ","block_loc end  line ","block_node loc end  line ","start_loc column  != ","match captures [] length  != ","start_node loc expression  source lines to_a first chomp ","start_node loc expression  source lines to_a first ","start_node loc expression  source lines to_a ","start_node loc expression  source lines ","start_node loc expression  source ","start_node loc expression  column ","start_node loc expression  line ","start_loc source match  captures [] ","(str \"\\S.*\") match  captures [] ","start_loc source match  captures ","(str \"\\S.*\") match  captures ","start_loc source match  captures [] length ","(str \"\\S.*\") match  captures [] length ","start_node loc expression  line + ","start_node loc expression  source count ","start_loc source start_loc source match  ","start_loc source (str \"\\S.*\") match  ","start_node loc expression  source match ","start_node loc expression  column != ","block_node loc begin  line ","start_loc source match  [] ","(str \"\\S.*\") match  [] ","start_node loc expression  column == ","start_node loc expression  line == ","block_loc end  column != ","block_node loc end  column != ","start_loc source match  begin ","(str \"\\S.*\") match  begin ","(str \"\\\\S.*\") start_loc source match  ","(str \"\\\\S.*\") (str \"\\S.*\") match  ","block_node loc begin  source_line ","block_node loc begin  line == "," (str \" or \") +  "]}," Rubocop Cop Lint BlockAlignment find_block_or_send_node":{"type":"method","name":"find_block_or_send_node","children":[],"call":["(sym :block) include? ","subnode type ","(lvar :receiver) find "]}," Rubocop Cop Lint BlockAlignment find_block_node":{"type":"method","name":"find_block_node","children":[],"call":[" find_block_or_send_node ","node type ","(sym :send) include? "]}," Rubocop Cop Lint BlockAlignment process_block_assignment":{"type":"method","name":"process_block_assignment","children":[],"call":[" check_block_alignment ","block_node loc ","begin_node loc expression ","begin_node loc ","@inspected_blocks << "," already_processed_node? "," block_is_on_next_line? ","begin_node type != ","begin_node type ","method to_s =~ ","method to_s ","begin_node type == ","block_node type == ","block_node type "," find_block_node "," find_block_node  loc "," find_block_node  type == "," find_block_node  type "," find_ find_block_node  "]}," Rubocop Cop Lint BlockAlignment on_masgn":{"type":"method","name":"on_masgn","children":[],"call":[" process_block_assignment "," check_assignment "]}," Rubocop Cop Lint BlockAlignment on_send":{"type":"method","name":"on_send","children":[],"call":[" process_block_assignment ","args last "," check_assignment "]}," Rubocop Cop Lint BlockAlignment on_op_asgn":{"type":"method","name":"on_op_asgn","children":[],"call":[" process_block_assignment "," check_assignment "]}," Rubocop Cop Lint BlockAlignment on_casgn":{"type":"method","name":"on_casgn","children":[],"call":[" process_block_assignment "]}," Rubocop Cop Lint BlockAlignment on_lvasgn":{"type":"method","name":"on_lvasgn","children":[],"call":[" process_block_assignment "]}," Rubocop Cop Lint BlockAlignment on_and":{"type":"method","name":"on_and","children":[],"call":["@inspected_blocks << "," check_block_alignment ","right loc ","node loc expression ","node loc ","right type == ","right type "," already_processed_node? "]}," Rubocop Cop Lint BlockAlignment on_block":{"type":"method","name":"on_block","children":[],"call":[" check_block_alignment ","node loc ","start_node loc expression ","start_node loc ","method loc expression source =~ ","method loc expression source ","method loc expression ","method loc "," already_processed_node? "]}," Rubocop Cop Lint BlockAlignment initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rubocop Cop Lint AssignmentInCondition safe_assignment_allowed?":{"type":"method","name":"safe_assignment_allowed?","children":[],"call":["AssignmentInCondition  config [] ","AssignmentInCondition  config "," cop_config [] "," cop_config "]}," Rubocop Cop Lint AssignmentInCondition safe_assignment?":{"type":"method","name":"safe_assignment?","children":[],"call":["ASGN_NODES  include? ","node children [] type ","node children [] ","node children ","node children size == ","node children size ","node type == ","node type "]}," Rubocop Cop Lint AssignmentInCondition check":{"type":"method","name":"check","children":[],"call":[" add_offence ","asgn_node loc operator ","asgn_node loc ","asgn_node type != ","asgn_node type "," safe_assignment? "," safe_assignment_allowed? "," on_node ","condition type == ","condition type "," warning "," add_offense "]}," Rubocop Cop Lint AssignmentInCondition on_until":{"type":"method","name":"on_until","children":[],"call":[" check "]}," Rubocop Cop Lint AssignmentInCondition on_while":{"type":"method","name":"on_while","children":[],"call":[" check "]}," Rubocop Cop Lint AssignmentInCondition on_if":{"type":"method","name":"on_if","children":[],"call":[" check "]}," Rubocop Cop Corrector replace":{"type":"method","name":"replace","children":[],"call":["@source_rewriter replace "]}," Rubocop Cop Corrector insert_after":{"type":"method","name":"insert_after","children":[],"call":["@source_rewriter insert_after "]}," Rubocop Cop Corrector insert_before":{"type":"method","name":"insert_before","children":[],"call":["@source_rewriter insert_before "]}," Rubocop Cop Corrector remove":{"type":"method","name":"remove","children":[],"call":["@source_rewriter remove "]}," Rubocop Cop Corrector rewrite":{"type":"method","name":"rewrite","children":[],"call":["@source_rewriter process ","correction call ","@corrections each "]}," Rubocop Cop Corrector initialize":{"type":"method","name":"initialize","children":[],"call":["Parser Source Rewriter  new "]}," Rubocop Cop Cop source_range":{"type":"method","name":"source_range","children":[],"call":["Parser Source Range  new ","begin_pos + ","(send\n  (lvar :preceding_lines) :reduce\n  (int 0)) + ","a + + ","a + ","e length ","preceding_lines reduce ","(send\n  (lvar :preceding_lines) :reduce\n  (int 0)) +  + "]}," Rubocop Cop Cop command?":{"type":"method","name":"command?","children":[],"call":["method_name == ","receiver ! ","node type == ","node type "]}," Rubocop Cop Cop on_node":{"type":"method","name":"on_node","children":[],"call":[" on_node ","elem is_a? ","sexp children each ","sexp children "," Array include? ","sexp type "," Array ","Parser AST Node  === "]}," Rubocop Cop Cop ignored_node?":{"type":"method","name":"ignored_node?","children":[],"call":["@ignored_nodes include? ","n eql? ","@ignored_nodes any? "]}," Rubocop Cop Cop part_of_ignored_node?":{"type":"method","name":"part_of_ignored_node?","children":[],"call":["ignored_node loc expression end_pos >= ","expression end_pos ","ignored_node loc expression end_pos ","ignored_node loc expression ","ignored_node loc ","ignored_node loc expression begin_pos <= ","expression begin_pos ","ignored_node loc expression begin_pos ","@ignored_nodes each ","node loc expression ","node loc ","ignored_node loc node loc expression  end_pos >= ","node loc expression  end_pos ","ignored_node loc node loc expression  end_pos ","ignored_node loc node loc expression  ","ignored_node loc node loc expression  begin_pos <= ","node loc expression  begin_pos ","ignored_node loc node loc expression  begin_pos ","node loc node loc expression  "]}," Rubocop Cop Cop ignore_node":{"type":"method","name":"ignore_node","children":[],"call":["@ignored_nodes << "]}," Rubocop Cop Cop name":{"type":"method","name":"name","children":[],"call":[" class cop_name "," class "," class to_s split [] "," class to_s split "," class to_s "]}," Rubocop Cop Cop autocorrect_action":{"type":"method","name":"autocorrect_action","children":[],"call":[]}," Rubocop Cop Cop do_autocorrect":{"type":"method","name":"do_autocorrect","children":[],"call":[" autocorrect_action "," autocorrect "]}," Rubocop Cop Cop rails?":{"type":"method","name":"rails?","children":[],"call":[]}," Rubocop Cop Cop lint?":{"type":"method","name":"lint?","children":[],"call":[]}," Rubocop Cop Cop style?":{"type":"method","name":"style?","children":[],"call":[]}," Rubocop Cop Cop cop_type":{"type":"method","name":"cop_type","children":[],"call":[]}," Rubocop Cop Cop cop_name":{"type":"method","name":"cop_name","children":[],"call":[" class cop_name "," class "]}," Rubocop Cop Cop all":{"type":"method","name":"all","children":[],"call":[]}," Rubocop Cop Commissioner delegate_to":{"type":"method","name":"delegate_to","children":[],"call":["@errors [] << ","@errors [] "," fail ","@options [] ","cop send "," raise "]}," Rubocop Cop Commissioner invoke_cops_callback":{"type":"method","name":"invoke_cops_callback","children":[],"call":["cop investigate ","cop respond_to? ","@cops each "," with_cop_error_handling ","cop relevant_file? ","processed_source buffer name ","processed_source buffer "]}," Rubocop Cop Commissioner reset_errors":{"type":"method","name":"reset_errors","children":[],"call":["hash []= ","Hash  new "]}," Rubocop Cop Commissioner investigate":{"type":"method","name":"investigate","children":[],"call":["offences concat ","cop offences ","@cops reduce "," process ","processed_source ast "," invoke_cops_callback "," reset_errors "," prepare ","cop relevant_file? ","processed_source buffer name ","processed_source buffer ","@cops each_with_object ","offenses concat ","cop offenses "," invoke_custom_processing "]}," Rubocop Cop Commissioner initialize":{"type":"method","name":"initialize","children":[],"call":[" reset_errors "]}," Rubocop Cop Commissioner call_super":{"type":"method","name":"call_super","children":[],"call":[]}," Rubocop Cop Commissioner callback_methods":{"type":"method","name":"callback_methods","children":[],"call":[]}," Rubocop ConfigStore for":{"type":"method","name":"for","children":[],"call":["Config  configuration_from_file ","@object_cache [] ","@path_cache [] ","Config  configuration_file_for ","File  dirname "," print ","Config  debug? ","ConfigLoader  configuration_from_file ","ConfigLoader  debug? ","ConfigLoader  configuration_file_for ","File  directory? ","@@path_cache [] _cache [] ","File  File  dirname name ","File  File  dirname ectory? "]}," Rubocop ConfigStore set_options_config":{"type":"method","name":"set_options_config","children":[],"call":["Config  merge_with_default ","Config  load_file ","ConfigLoader  merge_with_default ","ConfigLoader  load_file "]}," Rubocop ConfigStore initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rubocop Config match_path?":{"type":"method","name":"match_path?","children":[],"call":["path =~ ","File  fnmatch ","File  basename == ","File  basename "]}," Rubocop Config loaded_dir_pathname":{"type":"method","name":"loaded_dir_pathname","children":[],"call":["Pathname  new ","File  expand_path ","File  dirname "," loaded_path "]}," Rubocop Config relative_path_to_loaded_dir":{"type":"method","name":"relative_path_to_loaded_dir","children":[],"call":["Config  relative_path "," loaded_dir_pathname "," loaded_path ","ConfigLoader  relative_path ","file_pathname relative_path_from to_s ","file_pathname relative_path_from ","Pathname  new ","File  expand_path ","Pathname  new  relative_path_from to_s ","Pathname  new  relative_path_from "]}," Rubocop Config patterns_to_exclude":{"type":"method","name":"patterns_to_exclude","children":[],"call":["@hash [] [] ","@hash [] "]}," Rubocop Config patterns_to_include":{"type":"method","name":"patterns_to_include","children":[],"call":["@hash [] [] ","@hash [] "]}," Rubocop Config file_to_exclude?":{"type":"method","name":"file_to_exclude?","children":[],"call":[" match_path? "," patterns_to_exclude any? "," patterns_to_exclude ","File  join ","Dir  pwd ","file start_with? "," loaded_path ","File  expand_path "," relative_path_to_loaded_dir ","File  join  start_with? ","File  expand_path  start_with? "]}," Rubocop Config file_to_include?":{"type":"method","name":"file_to_include?","children":[],"call":[" match_path? "," patterns_to_include any? "," patterns_to_include "," relative_path_to_loaded_dir "," path_relative_to_config "," loaded_path "]}," Rubocop Config validate":{"type":"method","name":"validate","children":[],"call":[" fail ","(str \"unrecognized parameter \") + "," loaded_path ","default_config [] has_key? ","default_config [] ","@hash [] each_key ","@hash [] ","valid_cop_names each ","invalid_cop_names each ","default_config has_key? ","@hash keys partition ","@hash keys "," class default_configuration "," class ","@loaded_path start_with? ","default_config [] key? ","default_config key? ","ConfigLoader  default_configuration ","COMMON_PARAMS  include? "," class default_configuration  [] has_key? ","ConfigLoader  default_configuration  [] has_key? "," class default_configuration  [] ","ConfigLoader  default_configuration  [] "," class default_configuration  has_key? ","ConfigLoader  default_configuration  has_key? "," class  class default_configuration uration "," class ConfigLoader  default_configuration uration "," class default_configuration  [] key? ","ConfigLoader  default_configuration  [] key? "," class default_configuration  key? ","ConfigLoader  default_configuration  key? ","ConfigLoader   class default_configuration uration ","ConfigLoader  ConfigLoader  default_configuration uration "]}," Rubocop Config warn_unless_valid":{"type":"method","name":"warn_unless_valid","children":[],"call":[" puts ","(str \"Warning: \") color ","e message "," validate "," warn "," validate! "]}," Rubocop Config cop_enabled?":{"type":"method","name":"cop_enabled?","children":[],"call":[" [] [] "," [] "," [] nil? "," for_cop [] "," for_cop "," for_cop nil? "]}," Rubocop Config for_cop":{"type":"method","name":"for_cop","children":[],"call":[" [] ","cop cop_name ","cop respond_to? ","cop cop_name  cop cop_name _name ","cop cop_name  respond_to? "]}," Rubocop Config initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rubocop Config dirs_to_search":{"type":"method","name":"dirs_to_search","children":[],"call":["dirs_to_search << ","Dir  home ","dir_pathname to_s ","target_dir_pathname ascend ","Pathname  new ","File  expand_path ","Pathname  new  ascend "]}," Rubocop Config config_files_in_path":{"type":"method","name":"config_files_in_path","children":[],"call":["File  exist? ","possible_config_files select ","File  join "," dirs_to_search map "," dirs_to_search "]}," Rubocop Config merge_with_default":{"type":"method","name":"merge_with_default","children":[],"call":[" new "," merge "," default_configuration ","result contains_auto_generated_config= ","config contains_auto_generated_config "," load_file ","  load_file uration "," new  contains_auto_generated_config= "]}," Rubocop Config default_configuration":{"type":"method","name":"default_configuration","children":[],"call":[" load_file "," print "," debug? "]}," Rubocop Config add_excludes_from_higher_level":{"type":"method","name":"add_excludes_from_higher_level","children":[],"call":["config [] [] uniq! ","config [] [] ","config [] ","config [] [] << ","File  join ","File  dirname ","highest_config loaded_path ","path start_with? ","path is_a? ","highest_config [] [] each ","highest_config [] [] ","highest_config [] ","excludes << ","excludes include? "," [] [] "," [] ","../ * + ","../ * ","config loaded_path count - ","highest_config loaded_path count ","config loaded_path count ","config loaded_path ","highest_config loaded_File  join  ","highest_config loaded_../ * +  ","File  join  start_with? ","../ * +  start_with? ","File  join  is_a? ","../ * +  is_a? ","config loaded_File  join  count - ","config loaded_../ * +  count - ","highest_config loaded_File  join  count ","highest_config loaded_../ * +  count ","config loaded_File  join  count ","config loaded_../ * +  count ","config loaded_File  join  ","config loaded_../ * +  "]}," Rubocop Config configuration_from_file":{"type":"method","name":"configuration_from_file","children":[],"call":[" merge_with_default "," make_excludes_absolute "," add_excludes_from_higher_level "," load_file ","found_files last ","found_files last != ","found_files any? "," config_files_in_path "," print "," debug? "," config_files_in_path  last "," config_files_in_path  last != "," config_files_in_path  any? ","  load_file _files_in_path "]}," Rubocop Config configuration_file_for":{"type":"method","name":"configuration_file_for","children":[],"call":[" config_files_in_path first "," config_files_in_path ","File  exist? ","possible_config_files find ","File  join "," dirs_to_search map "," dirs_to_search "]}," Rubocop Config base_configs":{"type":"method","name":"base_configs","children":[],"call":[" load_file ","File  join ","File  dirname ","f start_with? ","base_files map "," print "," debug? "," load_File  join ile ","File  join  start_with? ","base_File  join iles map "]}," Rubocop Config merge":{"type":"method","name":"merge","children":[],"call":["result []= ","base_hash has_key? ","derived_hash each ","base_hash [] ","derived_hash [] ","value merge ","value is_a? ","derived_hash has_key? ","base_hash each ","base_hash key? ","derived_hash key? "," merge "]}," Rubocop Config relative_path":{"type":"method","name":"relative_path","children":[],"call":["path_name relative_path_from to_s ","path_name relative_path_from ","Pathname  new ","File  expand_path ","Pathname  new  relative_path_from to_s ","Pathname  new  relative_path_from "]}," Rubocop Config make_excludes_absolute":{"type":"method","name":"make_excludes_absolute","children":[],"call":["File  join ","File  dirname ","config loaded_path ","exclude_elem start_with? ! ","exclude_elem start_with? ","exclude_elem is_a? ","config [] [] map! ","config [] [] ","config [] "," base_dir_for_path_parameters "," [] [] map! "," [] [] "," [] "]}," Rubocop Config load_file":{"type":"method","name":"load_file","children":[],"call":["config warn_unless_valid "," new ","hash delete ","hash []= "," merge ","hash [] ","hash has_key? ","value is_a? ","base_config each "," make_excludes_absolute ","File  basename == ","File  basename ","base_config loaded_path "," base_configs reverse each "," base_configs reverse "," base_configs ","YAML  load_file ","File  absolute_path ","config contains_auto_generated_config= ","base_config loaded_path include? "," puts "," debug? ","hash key? "," base_configs reverse_each ","File  realpath "," correct_relative_excludes ","value [] ","key == "," new  warn_unless_valid ","YAML  load_file  delete ","YAML  load_file  []= ","YAML  load_file  [] ","YAML  load_file  has_key? ","base_ new  each ","base_ new  loaded_path ","base_config loaded_File  absolute_path  "," base_ new s reverse each "," base_ new s reverse "," base_ new s ","File  absolute_File  absolute_path  "," new  contains_auto_generated_ new = ","base_ new  loaded_path include? ","base_config loaded_File  absolute_path  include? ","YAML  load_file  key? "," base_ new s reverse_each ","File  realFile  absolute_path  "]}," Rubocop CLI deprecate":{"type":"method","name":"deprecate","children":[],"call":[" warn ","message << "]}," Rubocop CLI formatter_set":{"type":"method","name":"formatter_set","children":[],"call":[" exit "," warn ","error message ","set add_formatter ","pairs each ","@options [] ","Formatter FormatterSet  new ","@options [] ! ","Formatter FormatterSet  new  add_formatter "]}," Rubocop CLI target_finder":{"type":"method","name":"target_finder","children":[],"call":["TargetFinder  new ","@options [] "]}," Rubocop CLI autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["f write ","File  open ","buffer instance_variable_get ","new_source == ","buffer source ","corrector rewrite ","Cop Corrector  new ","array concat ","cop corrections ","cops reduce ","@options [] ","corrector rewrite  == ","Cop Corrector  new  rewrite "]}," Rubocop CLI display_error_summary":{"type":"method","name":"display_error_summary","children":[],"call":[" puts ","Rubocop Version  version ","errors each ","(str \"\\n\") color ","errors count ","errors count > ","errors empty? "," warn "]}," Rubocop CLI trap_interrupt":{"type":"method","name":"trap_interrupt","children":[],"call":["$stderr puts "," wants_to_quit= "," exit! "," wants_to_quit? ","Signal  trap ","STDERR  puts "]}," Rubocop CLI convert_deprecated_options!":{"type":"method","name":"convert_deprecated_options!","children":[],"call":["(send\n  (lvar :args) :map!) flatten! "," deprecate ","args map! "]}," Rubocop CLI parse_options":{"type":"method","name":"parse_options","children":[],"call":["(send\n  (const nil :OptionParser) :new) parse! "," exit "," puts ","Rubocop Version  version ","opts on ","Sickill Rainbow  enabled= ","@options []= "," require ","@options [] last << ","@options [] last ","@options [] ","@options [] << "," validate_only_option ","@config_store set_options_config ","opts banner= ","OptionParser  new "," convert_deprecated_options! "," validate_auto_gen_config_option "," print_available_cops "," convert_deprecated_options "," ignore_dropped_options ","$options []= ","YAML  load_file ","ConfigStore  set_options_config "]}," Rubocop CLI handle_error":{"type":"method","name":"handle_error","children":[],"call":[" warn "," puts ","e backtrace ","e message ","@options [] ","@errors << "]}," Rubocop CLI setup_cop":{"type":"method","name":"setup_cop","children":[],"call":["cop disabled_lines= ","disabled_lines_for_cops [] ","cop_class cop_name ","cop autocorrect= ","@options [] ","cop debug= ","cop_class new ","disabled_lines [] ","cop_class config= ","cop_class new  disabled_lines= ","disabled_lines_for_cop_class new s [] ","cop_class new _class cop_class new _name ","cop_class new  autocorrect= ","cop_class new  debug= ","cop_class new _class new ","cop_class new _class config= "]}," Rubocop CLI set_config_for_all_cops":{"type":"method","name":"set_config_for_all_cops","children":[],"call":["cop_class config= ","config for_cop ","cop_class cop_name ","@cops each "]}," Rubocop CLI process_commissioner_errors":{"type":"method","name":"process_commissioner_errors","children":[],"call":[" handle_error ","(str \"An error occurred while \") color + ","(str \" cop was inspecting \") color ","(str \"An error occurred while \") color ","cop name ","errors each ","file_errors each "]}," Rubocop CLI inspect_file":{"type":"method","name":"inspect_file","children":[],"call":["offences sort "," autocorrect ","processed_source buffer "," process_commissioner_errors ","commissioner errors ","commissioner investigate ","Cop Commissioner  new ","cops << "," setup_cop ","processed_source disabled_lines_for_cops ","@options [] == ","@options [] ","@options [] ! ","config cop_enabled? ","cop_class cop_name ","@cops each "," set_config_for_all_cops ","@config_store for ","Cop Offence  from_diagnostic ","processed_source diagnostics map ","processed_source diagnostics ","processed_source diagnostics empty? "," handle_error ","(str \"An error occurred while parsing \") color ","SourceParser  parse_file "," fail ","(str \"Remove \") + ","config contains_auto_generated_config ","@errors concat ","team errors ","team inspect_file ","Cop Team  new "," mobilized_cop_classes ","report << ","cop has_report? ","cop offences count ","cop offences "," warn "," puts ","e backtrace ","e message ","@errors << ","(str \"An error occurred while \") color + ","(str \" was inspecting \") color ","(str \"An error occurred while \") color ","cop name ","cop inspect ","cop disabled_lines= ","disabled_lines [] ","cop correlations= ","cop debug= ","cop_klass new ","cop_klass config= ","config for_cop ","cop_klass cop_name "," disabled_lines_in ","CLI  rip_source ","(str \" cop was inspecting \") color ","source_buffer read ","CLI  parse ","cop_class config= ","(send\n  (ivar :@cops) :reduce\n  (array)) sort ","offences concat ","@cops reduce ","ConfigStore  for ","syntax_offences empty? ","sb read ","commissioner investigate  sort ","team inspect_file  sort ","SourceParser  parse_file  buffer "," process_Cop Commissioner  new _errors ","Cop Commissioner  new  errors ","Cop Commissioner  new  investigate "," setup_cop s << ","cop_klass new s << "," setup_ setup_cop  "," setup_cop_klass new  ","processed_source disabled_lines_for_ setup_cop s ","processed_source disabled_lines_for_cop_klass new s ","SourceParser  parse_file  disabled_lines_for_cops ","processed_source  disabled_lines_in _for_cops ","config  setup_cop _enabled? ","config cop_klass new _enabled? ","@config_store for  cop_enabled? ","ConfigStore  for  cop_enabled? "," setup_cop _class  setup_cop _name ","cop_klass new _class cop_klass new _name ","cop_class cop_class cop_name  ","cop_class cop_klass cop_name  ","@ setup_cop s each ","@cop_klass new s each "," set_config_for_all_ setup_cop s "," set_config_for_all_cop_klass new s "," set_@config_store for _for_all_cops "," set_ConfigStore  for _for_all_cops ","@@config_store for _store for ","@ConfigStore  for _store for ","SourceParser  parse_file  diagnostics map ","SourceParser  parse_file  diagnostics ","SourceParser  parse_file  diagnostics empty? ","@config_store for  contains_auto_generated_@config_store for  ","ConfigStore  for  contains_auto_generated_ConfigStore  for  ","Cop Team  new  errors ","Cop Team  new  inspect_file "," mobilized_ setup_cop _classes "," mobilized_cop_klass new _classes "," setup_cop  has_report? ","cop_klass new  has_report? ","cop commissioner investigate  count ","cop team inspect_file  count "," setup_cop  offences count ","cop_klass new  offences count ","cop commissioner investigate  ","cop team inspect_file  "," setup_cop  offences ","cop_klass new  offences ","e (str \"An error occurred while \") color +  "," setup_cop  name ","cop_klass new  name "," setup_cop  inspect ","cop_klass new  inspect "," setup_cop  disabled_lines= ","cop_klass new  disabled_lines= ","cop  disabled_lines_in = "," disabled_lines_in  [] "," setup_cop  correlations= ","cop_klass new  correlations= "," setup_cop  debug= ","cop_klass new  debug= "," setup_cop _klass new ","cop_klass new _klass new "," setup_cop _klass config= ","cop_klass new _klass config= ","cop_klass @config_store for = ","cop_klass ConfigStore  for = ","config for_ setup_cop  ","config for_cop_klass new  ","@config_store for  for_cop ","ConfigStore  for  for_cop "," setup_cop _klass  setup_cop _name ","cop_klass new _klass cop_klass new _name ","cop_klass cop_class cop_name  ","cop_klass cop_klass cop_name  ","  disabled_lines_in _in ","(str \"  setup_cop  was inspecting \") color ","(str \" cop_klass new  was inspecting \") color "," setup_cop _class config= ","cop_klass new _class config= ","cop_class @config_store for = ","cop_class ConfigStore  for = ","(send\n  (ivar :@ setup_cop s) :reduce\n  (array)) sort ","(send\n  (ivar :@cop_klass new s) :reduce\n  (array)) sort ","commissioner investigate  concat ","team inspect_file  concat ","@ setup_cop s reduce ","@cop_klass new s reduce ","syntax_commissioner investigate  empty? ","syntax_team inspect_file  empty? "]}," Rubocop CLI validate_only_option":{"type":"method","name":"validate_only_option","children":[],"call":[" fail ","@options [] ","c cop_name == ","c cop_name ","@cops none? ","Cop Cop  all none? ","Cop Cop  all "]}," Rubocop CLI initialize":{"type":"method","name":"initialize","children":[],"call":["ConfigStore  new ","Cop Cop  all ","ConfigStore  prepare "]}," Rubocop Formatter DisabledConfigFormatter finished":{"type":"method","name":"finished","children":[],"call":[" puts "," output path "," output "," output puts ","@cops_with_offences keys sort each ","@cops_with_offences keys sort ","@cops_with_offences keys ","cfg each "," class config_to_allow_offences [] "," class config_to_allow_offences "," class "," output_cop_comments ","@cops_with_offences sort each ","@cops_with_offences sort "," class config_to_allow_offenses [] "," class config_to_allow_offenses ","@cops_with_offenses sort each ","@cops_with_offenses sort ","@cops_with_offenses delete "," class config_to_allow_offences []  each "," class config_to_allow_offenses []  each "]}," Rubocop Formatter DisabledConfigFormatter file_finished":{"type":"method","name":"file_finished","children":[],"call":["@cops_with_offences []= ","o cop_name ","offences each ","@cops_with_offences [] ","Hash  new ","@cops_with_offenses [] ","offenses each "]}," Rubocop Cop VariableInspector NodeScanner scan_children":{"type":"method","name":"scan_children","children":[],"call":[" scan_nodes_in_scope ","node children first ","node children ","node children [] ","node type "]}," Rubocop Cop Style TrivialAccessors allowed_method?":{"type":"method","name":"allowed_method?","children":[],"call":[" names_match? ! "," names_match? "," exact_name_match? "," whitelist include? "," whitelist "," predicate? "," allow_predicates? "]}," Rubocop Cop Style TrivialAccessors looks_like_trivial_writer?":{"type":"method","name":"looks_like_trivial_writer?","children":[],"call":["body children [] type == ","body children [] type ","body children [] ","body children ","body type == ","body type ","args children size == ","args children size ","args children ","args children [] type != ","args children [] type ","args children [] "]}," Rubocop Cop Style TrivialAccessors looks_like_trivial_reader?":{"type":"method","name":"looks_like_trivial_reader?","children":[],"call":["body type == ","body type ","args children size == ","args children size ","args children "]}," Rubocop Cop Style TrivialAccessors whitelist":{"type":"method","name":"whitelist","children":[],"call":[" Array map + "," Array map "," Array ","TrivialAccessors  config [] ","TrivialAccessors  config "," cop_config [] "," cop_config "]}," Rubocop Cop Style SymbolName on_send":{"type":"method","name":"on_send","children":[],"call":[" ignore_node ","args each ","method_name == ","receiver nil? "]}," Rubocop Cop Style SignalException check_for_fail":{"type":"method","name":"check_for_fail","children":[],"call":[" add_offence ","send_node loc selector ","send_node loc "," command? "," on_node "," do_autocorrect "," convention "]}," Rubocop Cop Style SignalException check_for_raise":{"type":"method","name":"check_for_raise","children":[],"call":[" add_offence ","send_node loc selector ","send_node loc "," command? "," on_node "," do_autocorrect "," convention "]}," Rubocop Cop Style SignalException on_rescue":{"type":"method","name":"on_rescue","children":[],"call":[" check_for_fail "," check_for_raise "," allow "," check_for "," style == "," style ","rescue_nodes each "]}," Rubocop Cop Style ModuleFunction on_module":{"type":"method","name":"on_module","children":[],"call":[" add_offence ","body_node loc expression ","body_node loc ","body_node == ","body children each ","body children ","body type == ","body type "," convention "," add_offense "]}," Rubocop Cop Style CommentAnnotation keyword?":{"type":"method","name":"keyword?","children":[],"call":["CommentAnnotation  keywords include? ","CommentAnnotation  keywords "," keywords include? "," keywords "]}," Rubocop Cop Style CommentAnnotation just_first_word_of_sentence?":{"type":"method","name":"just_first_word_of_sentence?","children":[],"call":["colon ! ","first_word == ","first_word capitalize "]}," Rubocop Cop Style CommentAnnotation keyword_appearance?":{"type":"method","name":"keyword_appearance?","children":[],"call":[" keyword? ","first_word upcase "]}," Rubocop Cop Style CommentAnnotation keywords":{"type":"method","name":"keywords","children":[],"call":[" cop_config [] "," cop_config "]}," Rubocop Cop Style Blocks operator?":{"type":"method","name":"operator?","children":[],"call":["method_name =~ "]}," Rubocop Cop Style Blocks has_parentheses?":{"type":"method","name":"has_parentheses?","children":[],"call":["send_node loc begin ","send_node loc "]}," Rubocop Cop Style Blocks get_block":{"type":"method","name":"get_block","children":[],"call":[" get_block ","node type "]}," Rubocop Cop Style Blocks on_send":{"type":"method","name":"on_send","children":[],"call":[" ignore_node "," operator? ! "," operator? "," has_parentheses? ! "," has_parentheses? "," get_block ","args last ","args any? "," parentheses? ! "," parentheses? "," get_ get_block  "]}," Rubocop Cop Style AndOr rewrite_node":{"type":"method","name":"rewrite_node","children":[],"call":["Corrector  new rewrite ","Corrector  new ","processed_source buffer ","SourceParser  parse ","node loc expression source ","node loc expression ","node loc "," correction ","processed_source ast ","Corre correction tor  new rewrite ","Corre correction tor  new ","SourceParser  parse  buffer ","pro correction essed_sour correction e buffer ","Sour correction eParser  parse ","node lo correction  expression sour correction e ","node lo correction  expression ","node lo correction  ","  correction orre correction tion ","SourceParser  parse  ast ","pro correction essed_sour correction e ast "]}," Rubocop Cop Style AlignParameters autocorrect_action":{"type":"method","name":"autocorrect_action","children":[],"call":["@corrections << ","corrector replace ","expr source ","Parser Source Range  new ","expr end_pos ","expr begin_pos + ","expr begin_pos ","expr source_buffer ","  * + ","  * ","column_delta > ","node loc expression ","node loc "," lambda ","node loc expression  source ","node loc expression  end_pos ","node loc expression  begin_pos + ","node loc expression  begin_pos ","node loc expression  source_buffer ","node loc node loc expression ession "]}," Rubocop Cop Lint UselessComparison on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offence ","node loc selector ","node loc ","receiver == ","OPS  include? ","node loc selector source "," warning "," add_offense "]}," Rubocop Cop Lint UselessAssignment check_for_useless_assignment":{"type":"method","name":"check_for_useless_assignment","children":[],"call":[" add_offence ","MSG  format ","receiver loc name source ","receiver loc name ","receiver loc ","method =~ ","receiver type == ","receiver type ","last_expr type == ","last_expr type ","last_expr loc name ","last_expr loc ","expression last ","expression is_a? ","body children ","body type == ","body type "," contains_object_passed_as_argument? ","expression last  type == ","expression last  type ","expression last  loc name ","expression last  loc ","body children  last ","body children  is_a? "]}," Rubocop Cop Lint UselessAssignment on_defs":{"type":"method","name":"on_defs","children":[],"call":[" check_for_useless_assignment "]}," Rubocop Cop Lint UselessAssignment on_def":{"type":"method","name":"on_def","children":[],"call":[" check_for_useless_assignment "]}," Rubocop CLI validate_auto_gen_config_option":{"type":"method","name":"validate_auto_gen_config_option","children":[],"call":[" fail ","args any? ","(str \"Remove \") + ","config contains_auto_generated_config ","@options [] ","@config_store for "," target_finder find each "," target_finder find "," target_finder ","@config_store for  contains_auto_generated_@config_store for  ","@@config_store for _store for "]}," Rubocop Cop Style ColonMethodCall allowed_name":{"type":"method","name":"allowed_name","children":[],"call":["method_name match "]}," Rubocop Formatter OffenceCountFormatter total_offence_count":{"type":"method","name":"total_offence_count","children":[],"call":["offence_counts values inject ","offence_counts values "]}," Rubocop Formatter OffenceCountFormatter ordered_offence_counts":{"type":"method","name":"ordered_offence_counts","children":[],"call":["Hash  [] ","(send\n  (lvar :offence_counts) :sort_by) reverse ","offence_counts sort_by "]}," Rubocop Formatter OffenceCountFormatter report_summary":{"type":"method","name":"report_summary","children":[],"call":[" output puts "," output ","(begin\n  (send\n    (send\n      (lvar :count) :to_s) :ljust\n    (send\n      (send\n        (send\n          (lvar :offence_count) :to_s) :length) :+\n      (int 2)))) + ","count to_s ljust ","offence_count to_s length + ","offence_count to_s length ","offence_count to_s ","count to_s ","offence_counts each "," total_offence_count ","(begin\n  (send\n    (send\n      (lvar :count) :to_s) :ljust\n    (send\n      (send\n        (send\n          (lvar : total_offence_count ) :to_s) :length) :+\n      (int 2)))) + "," total_offence_count  to_s length + "," total_offence_count  to_s length "," total_offence_count  to_s "," total_offence_count s each "," total_ total_offence_count  "]}," Rubocop Formatter OffenceCountFormatter finished":{"type":"method","name":"finished","children":[],"call":[" report_summary "," ordered_offence_counts ","inspected_files count "]}," Rubocop Formatter OffenceCountFormatter file_finished":{"type":"method","name":"file_finished","children":[],"call":["@offence_counts [] ","o cop_name ","offences each "]}," Rubocop Formatter OffenceCountFormatter started":{"type":"method","name":"started","children":[],"call":["Hash  new "]}," Rubocop Formatter FileListFormatter file_finished":{"type":"method","name":"file_finished","children":[],"call":[" output printf "," output ","offences empty? ","offenses empty? "]}," Rubocop Formatter EmacsStyleFormatter file_finished":{"type":"method","name":"file_finished","children":[],"call":[" output printf ","o message ","o encode_severity ","o real_column ","o line "," output ","offences each ","o severity_code ","message << ","o corrected? ","offenses each ","o severity code ","o severity "]}," Rubocop Cop Util const_name":{"type":"method","name":"const_name","children":[],"call":["const_names reverse join ","const_names reverse ","namespace_node type == ","namespace_node type ","const_names << "," loop ","node type != ","node type ","node nil? ","namespace_node is_a? "]}," Rubocop Cop Style SpaceAfterMethodName check":{"type":"method","name":"check","children":[],"call":[" add_offence ","pos_before_left_paren source =~ ","pos_before_left_paren source ","Parser Source Range  new ","expr begin_pos ","expr begin_pos - ","expr source_buffer ","args loc expression ","args loc ","args loc begin is? ","args loc begin "," convention "," add_offense ","Parser Source Range  new  source =~ ","Parser Source Range  new  source ","args loc expression  begin_pos ","args loc expression  begin_pos - ","args loc expression  source_buffer ","args loc args loc expression ession "]}," Rubocop Cop Style SpaceAfterMethodName on_defs":{"type":"method","name":"on_defs","children":[],"call":[" check "]}," Rubocop Cop Style SpaceAfterMethodName on_def":{"type":"method","name":"on_def","children":[],"call":[" check "]}," Rubocop Cop Style SignalException autocorrect_action":{"type":"method","name":"autocorrect_action","children":[],"call":["@corrections << ","corrector replace ","node loc selector ","node loc "," command? "," lambda "]}," Rubocop Cop Style NilComparison on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offence ","node loc selector ","node loc ","args == ","OPS  include? ","node loc selector source "," convention "," add_offense "]}," Rubocop Cop Style MethodCallParentheses autocorrect_action":{"type":"method","name":"autocorrect_action","children":[],"call":["@corrections << ","corrector remove ","node loc end ","node loc ","node loc begin "," lambda "]}," Rubocop Cop Style MethodAndVariableSnakeCase after_dot":{"type":"method","name":"after_dot","children":[],"call":["Parser Source Range  new ","begin_pos + ","expr source_buffer ","expr begin_pos + ","expr begin_pos ","match [] length ","match [] ","(str \"\\\\A\") match ","expr source ","node loc expression ","node loc ","expr begin_pos +  + ","node loc expression  source_buffer ","expr expr begin_pos +  + ","node loc expression  begin_pos + ","expr expr begin_pos +  ","node loc expression  begin_pos ","(str \"\\A\") match  [] length ","(str \"\\A\") match  [] ","(str \"\\\\A\") (str \"\\A\") match  ","node loc expression  source ","node loc node loc expression ession "]}," Rubocop Cop Style IndentationWidth check_indentation":{"type":"method","name":"check_indentation","children":[],"call":[" add_offence "," sprintf ","Parser Source Range  new ","expr source_buffer ","expr begin_pos - ","expr begin_pos ","indentation >= ","body_node loc expression ","body_node loc ","indentation != ","body_node loc column - ","base_loc column ","body_node loc column ","body_node loc column == ","body_node loc expression source_line =~ ","body_node loc expression source_line ","body_node loc line == ","base_loc line ","body_node loc line "," convention ","(str \"Use \") + ","indentation + == ","indentation + ","indentation == "," starts_with_access_modifier? "," add_offense "," format ","pos end ","pos begin ","body_node children first ","body_node children ","body_node type == ","body_node type ","@column_delta == ","CORRECT_INDENTATION  - "," spParser Source Range  new intf ","PaParser Source Range  new seParser Source Range  new  SouParser Source Range  new ce Range  new ","body_node loc expression  source_buffer ","expParser Source Range  new  souParser Source Range  new ce_buffeParser Source Range  new  ","body_node loc expression  begin_pos - ","expParser Source Range  new  begin_pos - ","body_node loc expression  begin_pos ","expParser Source Range  new  begin_pos ","body_node loc column -  >= ","body_node loc body_node loc expression ession ","body_node children first  loc expression ","body_node loc expParser Source Range  new ession ","body_node children first  loc ","body_node loc column -  != ","body_node children first  loc column - ","body_node children first  loc column ","body_node children first  loc column == ","body_node loc body_node loc expression ession source_line =~ ","body_node children first  loc expression source_line =~ ","body_node loc expParser Source Range  new ession souParser Source Range  new ce_line =~ ","body_node loc body_node loc expression ession source_line ","body_node children first  loc expression source_line ","body_node loc expParser Source Range  new ession souParser Source Range  new ce_line ","body_node children first  loc line == ","body_node children first  loc line ","(stParser Source Range  new  \"Use \") + ","body_node loc column -  + == ","body_node loc column -  + ","body_node loc column -  == "," staParser Source Range  new ts_with_access_modifieParser Source Range  new ? "," foParser Source Range  new mat ","body_node children first  children first ","body_node childParser Source Range  new en fiParser Source Range  new st ","body_node children first  children ","body_node childParser Source Range  new en ","body_node children first  type == ","body_node children first  type ","CORRECT_INDENTATION  -  == "]}," Rubocop Cop Style IndentationWidth elsif?":{"type":"method","name":"elsif?","children":[],"call":["node loc keyword is? ","node loc keyword ","node loc ","node loc respond_to? "]}," Rubocop Cop Style IndentationWidth ternary_op?":{"type":"method","name":"ternary_op?","children":[],"call":["node loc respond_to? ","node loc "]}," Rubocop Cop Style IndentationWidth modifier_if?":{"type":"method","name":"modifier_if?","children":[],"call":["node loc end nil? ","node loc end ","node loc "]}," Rubocop Cop Style IndentationWidth check_if":{"type":"method","name":"check_if","children":[],"call":[" check_indentation ","node loc keyword ","node loc "," check_if "," elsif? "," ternary_op? ","node loc else "]}," Rubocop Cop Style IndentationWidth on_if":{"type":"method","name":"on_if","children":[],"call":[" check_if ","node loc keyword source ","node loc keyword ","node loc "," modifier_if? "," ternary_op? "," ignored_node? ","base loc "]}," Rubocop Cop Style IndentationWidth on_case":{"type":"method","name":"on_case","children":[],"call":[" check_indentation ","latest_when loc keyword ","latest_when loc ","b loc keyword ","b loc ","b type == ","b type ","branches compact each ","branches compact "]}," Rubocop Cop Style IndentationWidth on_while":{"type":"method","name":"on_while","children":[],"call":[" check_indentation ","node loc keyword ","node loc ","node loc keyword begin_pos == ","node loc expression begin_pos ","node loc expression ","node loc keyword begin_pos ","base loc "]}," Rubocop Cop Style IndentationWidth on_for":{"type":"method","name":"on_for","children":[],"call":[" check_indentation ","node loc keyword ","node loc "]}," Rubocop Cop Style IndentationWidth on_defs":{"type":"method","name":"on_defs","children":[],"call":[" check_indentation ","node loc keyword ","node loc "]}," Rubocop Cop Style IndentationWidth on_def":{"type":"method","name":"on_def","children":[],"call":[" check_indentation ","node loc keyword ","node loc "]}," Rubocop Cop Style IndentationWidth on_class":{"type":"method","name":"on_class","children":[],"call":[" check_indentation ","node loc keyword ","node loc ","members each "]}," Rubocop Cop Style IndentationWidth on_module":{"type":"method","name":"on_module","children":[],"call":[" check_indentation ","node loc keyword ","node loc ","members each "]}," Rubocop Cop Style IndentationWidth on_block":{"type":"method","name":"on_block","children":[],"call":[" check_indentation ","node loc end ","node loc ","loc end "," begins_its_line? ","node node loc  end ","node node loc  ","node loc  end "]}," Rubocop Cop Style IndentationWidth on_kwbegin":{"type":"method","name":"on_kwbegin","children":[],"call":[" check_indentation ","node loc end ","node loc ","node children each ","node children "," check_consistent ","node children first "]}," Rubocop Cop Style HashMethods proper_method_name":{"type":"method","name":"proper_method_name","children":[],"call":["method_name to_s sub ","method_name to_s "]}," Rubocop Cop Style HashMethods autocorrect_action":{"type":"method","name":"autocorrect_action","children":[],"call":["@corrections << ","corrector replace "," proper_method_name ","node loc selector source ","node loc selector ","node loc "," lambda "]}," Rubocop Cop Style HashMethods on_send":{"type":"method","name":"on_send","children":[],"call":[" do_autocorrect "," add_offence ","MSG  format "," proper_method_name ","node loc selector ","node loc ","DEPRECATED_METHODS  include? ","args size == ","args size "," convention "," add_offense "]}," Rubocop Cop Style EvenOdd div_by_2?":{"type":"method","name":"div_by_2?","children":[],"call":["args == ","method == ","node type == ","node type ","node children first ","node children ","node children size == ","node children size ","node children first  type == ","node children first  type ","node children first  children first ","node children first  children ","node children first  children size == ","node children first  children size "]}," Rubocop Cop Style EvenOdd on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offence ","node loc expression ","node loc ","args == "," div_by_2? ","method == "," convention ","(sym :==) include? "," add_offense "]}," Rubocop Cop Style EmptyLiteral autocorrect_action":{"type":"method","name":"autocorrect_action","children":[],"call":["@corrections << ","corrector replace ","node loc expression ","node loc "," lambda "]}," Rubocop Cop Style DefWithoutParentheses autocorrect_action":{"type":"method","name":"autocorrect_action","children":[],"call":["@corrections << ","corrector insert_after ","node loc expression ","node loc ","corrector insert_before "," lambda "]}," Rubocop Cop Style DefWithParentheses autocorrect_action":{"type":"method","name":"autocorrect_action","children":[],"call":["@corrections << ","corrector remove ","node loc end ","node loc ","node loc begin "," lambda "]}," Rubocop Cop Style CollectionMethods preferred_method":{"type":"method","name":"preferred_method","children":[],"call":[" class preferred_methods [] ","method to_sym "," class preferred_methods "," class "," preferred_methods [] "," preferred_methods "]}," Rubocop Cop Style CollectionMethods autocorrect_action":{"type":"method","name":"autocorrect_action","children":[],"call":["@corrections << ","corrector replace "," preferred_method ","node loc selector source ","node loc selector ","node loc "," lambda "]}," Rubocop Cop Style Attr autocorrect_action":{"type":"method","name":"autocorrect_action","children":[],"call":["@corrections << ","corrector replace ","node loc selector ","node loc "," lambda "]}," Rubocop Cop Style AccessControl class_constructor?":{"type":"method","name":"class_constructor?","children":[],"call":["(str \"Class\") include? ","Util  const_name ","method_name == ","block_node children first ","block_node children "]}," Rubocop Cop Rails ReadAttribute on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offence ","node loc selector ","node loc ","method_name == ","receiver nil? "," convention "," add_offense "]}," Rubocop Cop Rails HasAndBelongsToMany on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offence ","node loc selector ","node loc ","method_name == ","receiver nil? "," convention "," command? "," add_offense "]}," Rubocop Cop Lint UselessAssignment contains_object_passed_as_argument?":{"type":"method","name":"contains_object_passed_as_argument?","children":[],"call":["variable_table [] ","variable_table []= ","(sym :lvar) include? ","rhs_node type "," on_node ","args children each ","args children "]}," Rubocop Cop Lint ParenthesesAsGroupedExpression on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offence ","Parser Source Range  new ","expr begin_pos ","expr begin_pos - ","expr source_buffer ","match captures [] length ","match captures [] ","match captures ","args loc expression ","args loc ","without_receiver match ","Regexp  escape ","node loc expression source [] ","node loc expression source ","node loc expression ","node loc ","receiver loc expression source length ","receiver loc expression source ","receiver loc expression ","receiver loc ","args loc expression source start_with? ","args loc expression source ","method_name to_s end_with? ","method_name to_s ","OPERATOR_METHODS  include? "," warning ","space_length > "," spaces_before_left_parenthesis "," operator? "," add_offense ","args loc expression  begin_pos ","args loc expression  begin_pos - ","args loc expression  source_buffer ","without_receiver match  captures [] length ","without_receiver match  captures [] ","without_receiver match  captures ","args loc args loc expression ession ","without_receiver without_receiver match  ","node loc expression source []  match ","node loc args loc expression ession source [] ","node loc args loc expression ession source ","node loc args loc expression ession ","receiver loc args loc expression ession source length ","receiver loc args loc expression ession source ","receiver loc args loc expression ession ","args loc args loc expression ession source start_with? ","args loc args loc expression ession source ","match captures [] length  > "," spaces_before_left_parenthesis  > "]}," Rubocop Cop Cop full_description":{"type":"method","name":"full_description","children":[],"call":[]}," Rubocop Cop Cop short_description":{"type":"method","name":"short_description","children":[],"call":[]}," Rubocop Cop CopStore with_type":{"type":"method","name":"with_type","children":[],"call":["c cop_type == ","c cop_type "," select "]}," Rubocop Cop CopStore types":{"type":"method","name":"types","children":[],"call":[" map uniq! "," map "]}," Rubocop CLI convert_deprecated_options":{"type":"method","name":"convert_deprecated_options","children":[],"call":["(send\n  (lvar :args) :map!) flatten! "," deprecate ","args map! "]}," Rubocop CLI ignore_dropped_options":{"type":"method","name":"ignore_dropped_options","children":[],"call":[" warn ","-s/--silent options is dropped.  + ","(str \"-s\") include? ","args reject! "]}," Rubocop CLI print_conf_option":{"type":"method","name":"print_conf_option","children":[],"call":[" puts "]}," Rubocop CLI print_available_cops":{"type":"method","name":"print_available_cops","children":[],"call":[" print_conf_option ","cnf each ","cnf delete ","dirconf for_cop dup ","dirconf for_cop "," puts ","cop cop_name ","coptypes each ","coptypes size ","type to_s capitalize ","type to_s ","@cops with_type sort_by! ","@cops with_type ","@cops types sort! each ","@cops types sort! ","@cops types ","@config_store for ","Dir  pwd to_s ","Dir  pwd ","@cops length ","cops with_type sort_by! ","cops with_type ","cops types sort! each ","cops types sort! ","cops types ","cops length ","Cop Cop  all ","cop new support_autocorrect? to_s ","cop new support_autocorrect? ","cop new "," print_cops_of_type ","@options [] empty? ","@options [] ","dirconf for_cop dup  each ","dirconf for_cop dup  delete ","@config_store for  for_cop dup ","@config_store for  for_cop ","cop cop_cop cop_name  ","@cops with_type sort_by!  each ","cops with_type sort_by!  each ","@cops with_type sort_by!  size ","cops with_type sort_by!  size ","@Cop Cop  all  with_type sort_by! ","@Cop Cop  all  with_type ","@Cop Cop  all  types sort! each ","@Cop Cop  all  types sort! ","@Cop Cop  all  types ","@Cop Cop  all  length ","Cop Cop  all  with_type sort_by! ","Cop Cop  all  with_type ","Cop Cop  all  types sort! each ","Cop Cop  all  types sort! ","Cop Cop  all  types ","Cop Cop  all  length "," print_Cop Cop  all _of_type "]}," Rubocop ProcessedSource init_lines":{"type":"method","name":"init_lines","children":[],"call":["@raw_lines map ","@buffer source lines ","@buffer source ","@buffer source lines  map "]}," Rubocop ProcessedSource raw_lines":{"type":"method","name":"raw_lines","children":[],"call":[" init_lines "]}," Rubocop Cop VariableInspector scanned_nodes":{"type":"method","name":"scanned_nodes","children":[],"call":[]}," Rubocop Cop VariableInspector scanned_node?":{"type":"method","name":"scanned_node?","children":[],"call":["scanned_node equal? "," scanned_nodes any? "," scanned_nodes "]}," Rubocop Cop VariableInspector scan":{"type":"method","name":"scan","children":[],"call":[" scan ","child is_a? ","node children each ","node children "]}," Rubocop Cop VariableInspector mark_assignments_as_referenced_in_loop":{"type":"method","name":"mark_assignments_as_referenced_in_loop","children":[],"call":["assignment reference! ","assignment_node equal? ","assignment node ","assignment_nodes_in_loop none? ","variable assignments each ","variable assignments "," variable_table find_variable "," variable_table ","referenced_variable_names_in_loop each ","assignment_nodes_in_loop << ","referenced_variable_names_in_loop << ","scanning_node children first ","scanning_node children ","scanning_node type "," scan "," find_variables_in_loop "," variable_table find_variable  assignments each "," variable_table find_variable  assignments ","  variable_table find_variable _table find_ variable_table find_variable  ","  variable_table find_variable _table ","referenced_ variable_table find_variable _names_in_loop each ","referenced_ variable_table find_variable _names_in_loop << "," find_ variable_table find_variable s_in_loop "]}," Rubocop Cop VariableInspector process_scope":{"type":"method","name":"process_scope","children":[],"call":[" skip_children! "," inspect_variables_in_scope "," scanned_nodes << "," scanned_nodes "," process_node ","twisted_nodes each ","twisted_nodes compact! ","twisted_nodes << ","node children [] ","node children ","node type == ","node type ","TWISTED_SCOPE_TYPES  include? "]}," Rubocop Cop VariableInspector process_zero_arity_super":{"type":"method","name":"process_zero_arity_super","children":[],"call":["variable reference! ","variable method_argument? "," variable_table accessible_variables each "," variable_table accessible_variables "," variable_table "]}," Rubocop Cop VariableInspector process_rescue":{"type":"method","name":"process_rescue","children":[],"call":[" process_loop ","node_in_resbody type == ","node_in_resbody type "," scan ","resbody_nodes any? ","child type == ","child type ","child is_a? ","node children select ","node children "]}," Rubocop Cop VariableInspector process_loop":{"type":"method","name":"process_loop","children":[],"call":[" skip_children! "," mark_assignments_as_referenced_in_loop "," process_children "," process_node ","POST_CONDITION_LOOP_TYPES  include? ","node type "]}," Rubocop Cop VariableInspector process_variable_referencing":{"type":"method","name":"process_variable_referencing","children":[],"call":[" variable_table reference_variable "," variable_table ","node children first ","node children "]}," Rubocop Cop VariableInspector process_variable_multiple_assignment":{"type":"method","name":"process_variable_multiple_assignment","children":[],"call":[" skip_children! "," process_node "]}," Rubocop Cop VariableInspector process_variable_operator_assignment":{"type":"method","name":"process_variable_operator_assignment","children":[],"call":[" skip_children! "," variable_table assign_to_variable "," variable_table "," process_node "," variable_table reference_variable "," variable_table declare_variable "," variable_table variable_exist? ","asgn_node children first ","asgn_node children ","asgn_node type == ","asgn_node type ","LOGICAL_OPERATOR_ASSIGNMENT_TYPES  include? ","node type "]}," Rubocop Cop VariableInspector process_regexp_named_captures":{"type":"method","name":"process_regexp_named_captures","children":[],"call":[" skip_children! "," variable_table assign_to_variable "," variable_table ","variable_names each "," process_node "," variable_table declare_variable "," variable_table variable_exist? ","regexp named_captures keys ","regexp named_captures ","Regexp  new ","regexp_node children [] children [] ","regexp_node children [] children ","regexp_node children [] ","regexp_node children ","regexp named_captures keys  each ","Regexp  new  named_captures keys ","Regexp  new  named_captures ","Regexp  new _node children [] children [] ","Regexp  new _node children [] children ","Regexp  new _node children [] ","Regexp  new _node children "]}," Rubocop Cop VariableInspector process_variable_declaration":{"type":"method","name":"process_variable_declaration","children":[],"call":[" variable_table declare_variable "," variable_table ","node children first ","node children ","node children empty? ","node type == ","node type "]}," Rubocop Cop VariableInspector dispatch_node":{"type":"method","name":"dispatch_node","children":[],"call":[" process_scope "," process_zero_arity_super "," process_rescue "," process_loop "," process_variable_referencing "," process_variable_multiple_assignment "," process_variable_operator_assignment "," process_regexp_named_captures "," process_variable_assignment "," process_variable_declaration ","node type "]}," Rubocop Cop VariableInspector skip_children!":{"type":"method","name":"skip_children!","children":[],"call":[" throw "]}," Rubocop Cop VariableInspector process_children":{"type":"method","name":"process_children","children":[],"call":[" process_node "," scanned_node? ","child is_a? ","origin_node children each ","origin_node children "]}," Rubocop Cop VariableInspector VariableTable mark_variable_as_captured_by_block_if_so":{"type":"method","name":"mark_variable_as_captured_by_block_if_so","children":[],"call":["variable capture_with_block! ","variable scope == "," current_scope ","variable scope "," current_scope node type == "," current_scope node type "," current_scope node "]}," Rubocop Cop VariableInspector VariableTable accessible_variables":{"type":"method","name":"accessible_variables","children":[],"call":["scope node type == ","scope node type ","scope node ","variables concat ","scope variables values ","scope variables "," scope_stack reverse_each reduce "," scope_stack reverse_each "," scope_stack "]}," Rubocop Cop VariableInspector VariableTable variable_exist?":{"type":"method","name":"variable_exist?","children":[],"call":[" find_variable nil? ! "," find_variable nil? "," find_variable "]}," Rubocop Cop VariableInspector VariableTable find_variable":{"type":"method","name":"find_variable","children":[],"call":["scope node type == ","scope node type ","scope node ","scope variables [] ","scope variables "," scope_stack reverse_each "," scope_stack ","name to_sym ","scope scope variables [] s [] ","scope scope variables [] s ","name to_sym  to_sym "]}," Rubocop Cop VariableInspector VariableTable reference_variable":{"type":"method","name":"reference_variable","children":[],"call":[" mark_variable_as_captured_by_block_if_so ","variable reference! "," find_variable "," mark_ find_variable _as_captured_by_block_if_so "," find_variable  reference! "," find_ find_variable  "]}," Rubocop Cop VariableInspector VariableTable assign_to_variable":{"type":"method","name":"assign_to_variable","children":[],"call":[" mark_variable_as_captured_by_block_if_so ","variable assign "," fail ","(str \"Assigning to undeclared local variable \\\"\") + ","node inspect ","node loc expression ","node loc "," find_variable "," mark_ find_variable _as_captured_by_block_if_so "," find_variable  assign ","(str \"Assigning to undeclared local  find_variable  \\\"\") + "," find_ find_variable  "]}," Rubocop Cop VariableInspector VariableTable declare_variable":{"type":"method","name":"declare_variable","children":[],"call":[" invoke_hook "," current_scope variables []= ","variable name "," current_scope variables "," current_scope ","Variable  new "," current_scope Variable  new s []= ","Variable  new  name "," current_scope Variable  new s "]}," Rubocop Cop VariableInspector Variable block_local_variable?":{"type":"method","name":"block_local_variable?","children":[],"call":["@declaration_node type == ","@declaration_node type "]}," Rubocop Cop VariableInspector Variable method_argument?":{"type":"method","name":"method_argument?","children":[],"call":["METHOD_ARGUMENT_DECLARATION_TYPES  include? ","@declaration_node type "]}," Rubocop Cop VariableInspector Variable used?":{"type":"method","name":"used?","children":[],"call":[" referenced? "]}," Rubocop Cop VariableInspector Variable capture_with_block!":{"type":"method","name":"capture_with_block!","children":[],"call":[]}," Rubocop Cop VariableInspector Variable reference!":{"type":"method","name":"reference!","children":[],"call":["consumed_branch_ids << ","assignment branch_id ","assignment reference_penetrable? ","assignment branch_id == ","reference branch_id ","assignment inside_of_branch? ","assignment reference! ","consumed_branch_ids include? ","@assignments reverse_each ","Set  new ","Reference  new ","Set  new  << ","assignment Reference  new _penetrable? ","Reference  new  branch_id ","assignment Reference  new ! ","Set  new  include? "]}," Rubocop Cop VariableInspector Variable referenced?":{"type":"method","name":"referenced?","children":[],"call":["@assignments any? "]}," Rubocop Cop VariableInspector Variable assign":{"type":"method","name":"assign","children":[],"call":["@assignments << ","Assignment  new "]}," Rubocop Cop VariableInspector Variable initialize":{"type":"method","name":"initialize","children":[],"call":["name to_sym "," fail ","(str \"Node type must be any of \") + ","declaration_node type ","VARIABLE_DECLARATION_TYPES  include? "]}," Rubocop Cop VariableInspector Scope ASTScanner scan":{"type":"method","name":"scan","children":[],"call":["@ancestor_nodes pop "," scan ","child is_a? ","node children each ","node children ","@ancestor_nodes push "]}," Rubocop Cop VariableInspector Scope ASTScanner initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rubocop Cop VariableInspector Scope ancestors_of_node":{"type":"method","name":"ancestors_of_node","children":[],"call":[" fail ","ancestor_nodes [] ","scanning_node equal? ","ASTScanner  scan "]}," Rubocop Cop VariableInspector Scope body_node":{"type":"method","name":"body_node","children":[],"call":["@node children [] ","@node children ","@node type "]}," Rubocop Cop VariableInspector Scope ==":{"type":"method","name":"==","children":[],"call":["@node equal? ","other node "]}," Rubocop Cop VariableInspector Reference initialize":{"type":"method","name":"initialize","children":[],"call":[" fail ","(str \"Node type must be any of \") + ","node type ","VARIABLE_REFERENCE_TYPES  include? "]}," Rubocop Cop VariableInspector Locatable branch?":{"type":"method","name":"branch?","children":[],"call":["child_index != ","parent_node type ","parent_node children index ","parent_node children ","parent_node children index  != "]}," Rubocop Cop VariableInspector Locatable set_branch_point_and_body_nodes!":{"type":"method","name":"set_branch_point_and_body_nodes!","children":[],"call":[" branch? ","ancestors_and_self_nodes reverse each_cons ","ancestors_and_self_nodes reverse "," ancestor_nodes_in_scope + "," ancestor_nodes_in_scope "," ancestor_nodes_in_scope +  reverse each_cons "," ancestor_nodes_in_scope +  reverse "]}," Rubocop Cop VariableInspector Locatable body_index":{"type":"method","name":"body_index","children":[],"call":[" branch_point_node children index "," branch_body_node "," branch_point_node children "," branch_point_node "]}," Rubocop Cop VariableInspector Locatable ensure_body_name":{"type":"method","name":"ensure_body_name","children":[],"call":[" fail "," body_index "]}," Rubocop Cop VariableInspector Locatable rescue_body_name":{"type":"method","name":"rescue_body_name","children":[],"call":[" body_index - "," body_index "," branch_body_node type == "," branch_body_node type "," branch_body_node "," body_index == "]}," Rubocop Cop VariableInspector Locatable logical_operator_body_name":{"type":"method","name":"logical_operator_body_name","children":[],"call":[" fail "," body_index "]}," Rubocop Cop VariableInspector Locatable case_body_name":{"type":"method","name":"case_body_name","children":[],"call":[" body_index - "," body_index "," branch_body_node type == "," branch_body_node type "," branch_body_node "]}," Rubocop Cop VariableInspector Locatable if_body_name":{"type":"method","name":"if_body_name","children":[],"call":[" fail "," body_index "]}," Rubocop Cop VariableInspector Locatable branch_body_name":{"type":"method","name":"branch_body_name","children":[],"call":[" raise "," branch_point_node type "," branch_point_node "," body_index "," fail "," ensure_body_name "," rescue_body_name "," logical_operator_body_name "," case_body_name "," if_body_name "]}," Rubocop Cop VariableInspector Locatable ancestor_nodes_in_scope":{"type":"method","name":"ancestor_nodes_in_scope","children":[],"call":[" scope ancestors_of_node "," scope "]}," Rubocop Cop VariableInspector Locatable branch_body_node":{"type":"method","name":"branch_body_node","children":[],"call":[" set_branch_point_and_body_nodes! "," instance_variable_defined? "]}," Rubocop Cop VariableInspector Locatable branch_point_node":{"type":"method","name":"branch_point_node","children":[],"call":[" set_branch_point_and_body_nodes! "," instance_variable_defined? "]}," Rubocop Cop VariableInspector Locatable branch_type":{"type":"method","name":"branch_type","children":[],"call":["(send\n  (send nil :branch_point_node) :type) join "," branch_body_name "," branch_point_node type "," branch_point_node "," inside_of_branch? "]}," Rubocop Cop VariableInspector Locatable branch_id":{"type":"method","name":"branch_id","children":[],"call":["(send\n  (send nil :branch_point_node) :object_id) join "," branch_type "," branch_point_node object_id "," branch_point_node "," inside_of_branch? "]}," Rubocop Cop VariableInspector Locatable inside_of_branch?":{"type":"method","name":"inside_of_branch?","children":[],"call":[" branch_point_node nil? ! "," branch_point_node nil? "," branch_point_node "]}," Rubocop Cop VariableInspector Locatable scope":{"type":"method","name":"scope","children":[],"call":[" fail "]}," Rubocop Cop VariableInspector Locatable node":{"type":"method","name":"node","children":[],"call":[" fail "]}," Rubocop Cop VariableInspector Assignment grantparent_node":{"type":"method","name":"grantparent_node","children":[],"call":[" ancestor_nodes_in_scope [] "," ancestor_nodes_in_scope "]}," Rubocop Cop VariableInspector Assignment parent_node":{"type":"method","name":"parent_node","children":[],"call":[" ancestor_nodes_in_scope last "," ancestor_nodes_in_scope "]}," Rubocop Cop VariableInspector Assignment meta_assignment_node":{"type":"method","name":"meta_assignment_node","children":[],"call":[" grantparent_node "," grantparent_node type == "," grantparent_node type "," parent_node type == "," parent_node type "," parent_node "," parent_node children index == "," parent_node children index "," parent_node children ","OPERATOR_ASSIGNMENT_TYPES  include? "," instance_variable_defined? "]}," Rubocop Cop VariableInspector Assignment operator":{"type":"method","name":"operator","children":[],"call":["assignment_node loc operator source ","assignment_node loc operator ","assignment_node loc "," meta_assignment_node "]}," Rubocop Cop VariableInspector Assignment multiple_assignment?":{"type":"method","name":"multiple_assignment?","children":[],"call":[" meta_assignment_node type == "," meta_assignment_node type "," meta_assignment_node "]}," Rubocop Cop VariableInspector Assignment operator_assignment?":{"type":"method","name":"operator_assignment?","children":[],"call":["OPERATOR_ASSIGNMENT_TYPES  include? "," meta_assignment_node type "," meta_assignment_node "]}," Rubocop Cop VariableInspector Assignment regexp_named_capture?":{"type":"method","name":"regexp_named_capture?","children":[],"call":["@node type == ","@node type "]}," Rubocop Cop VariableInspector Assignment reference_penetrable?":{"type":"method","name":"reference_penetrable?","children":[],"call":["REFERENCE_PENETRABLE_BRANCH_TYPES  include? "," branch_type "]}," Rubocop Cop VariableInspector Assignment used?":{"type":"method","name":"used?","children":[],"call":["@variable captured_by_block? "]}," Rubocop Cop VariableInspector Assignment reference!":{"type":"method","name":"reference!","children":[],"call":[]}," Rubocop Cop VariableInspector Assignment scope":{"type":"method","name":"scope","children":[],"call":["@variable scope "]}," Rubocop Cop VariableInspector Assignment name":{"type":"method","name":"name","children":[],"call":["@node children first ","@node children "]}," Rubocop Cop VariableInspector Assignment initialize":{"type":"method","name":"initialize","children":[],"call":[" fail ","(str \"Node type must be any of \") + ","node type ","VARIABLE_ASSIGNMENT_TYPES  include? "]}," Rubocop Cop Team handle_error":{"type":"method","name":"handle_error","children":[],"call":[" warn "," puts ","e backtrace ","e message "," debug? ","@errors << "]}," Rubocop Cop Team process_commissioner_errors":{"type":"method","name":"process_commissioner_errors","children":[],"call":[" handle_error ","(str \"An error occurred while \") color + ","(str \" cop was inspecting \") color ","(str \"An error occurred while \") color ","cop name ","errors each ","file_errors each "]}," Rubocop Cop Team autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["f write ","File  open ","buffer name ","new_source == ","buffer source ","corrector rewrite ","Corrector  new ","array concat ","cop corrections ","cops reduce "," autocorrect? "," autocorrect_one_cop ","cop relevant_file? ","cops each_with_object ","corrector rewrite  == ","Corrector  new  rewrite "]}," Rubocop Cop Team cops":{"type":"method","name":"cops","children":[],"call":["instances << ","cop_class new ","@config cop_enabled? ","@cop_classes reduce "," cop_enabled? ","@cop_classes each_with_object "]}," Rubocop Cop Team inspect_file":{"type":"method","name":"inspect_file","children":[],"call":["offences sort "," autocorrect "," cops ","processed_source buffer "," process_commissioner_errors ","commissioner errors ","commissioner investigate ","Commissioner  new ","(sym :error) include? ","o severity ","offences any? ","Offence  from_diagnostic ","processed_source diagnostics map ","processed_source diagnostics "," handle_error ","(str \"An error occurred while parsing \") color ","SourceParser  parse_file ","Lint Syntax  offences_from_diagnostics ","processed_source valid_syntax? ","Offence  new ","e message capitalize + ","e message capitalize ","e message ","Struct  new new ","Struct  new ","Lint Syntax  offenses_from_diagnostics ","Offense  new ","processed_source file_path "," forces ","commissioner investigate  sort ","SourceParser  parse_file  buffer "," process_Commissioner  new _errors ","Commissioner  new  errors ","Commissioner  new  investigate ","commissioner investigate  any? ","SourceParser  parse_file  diagnostics map ","processed_source processed_source diagnostics  map ","SourceParser  parse_file  diagnostics ","processed_source processed_source diagnostics  ","Lint Syntax  commissioner investigate _from_diagnostics ","Lint Syntax  offences_from_processed_source diagnostics  ","SourceParser  parse_file  valid_syntax? ","Lint Syntax  offenses_from_processed_source diagnostics  ","SourceParser  parse_file  file_path "]}," Rubocop Cop Team debug?":{"type":"method","name":"debug?","children":[],"call":["@options [] "]}," Rubocop Cop Team autocorrect?":{"type":"method","name":"autocorrect?","children":[],"call":["@options [] "]}," Rubocop Cop Team initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rubocop Cop Style TrailingBlankLines investigate":{"type":"method","name":"investigate","children":[],"call":[" convention "," format "," source_range ","processed_source [] ","blank_lines -@ ","processed_source buffer ","blank_lines > ","line blank? ","processed_source lines reverse_each ","processed_source lines ","processed_source raw_lines to_a [] join length ","processed_source raw_lines to_a [] join ","processed_source raw_lines to_a [] ","processed_source raw_lines to_a ","processed_source raw_lines "," add_offence "," add_offense "," message ","Parser Source Range  new ","sb source length ","sb source ","\n length ","whitespace_at_end length == ","whitespace_at_end length ","sb source length - ","blank_lines != "," style == "," style ","whitespace_at_end count - ","whitespace_at_end count ","sb source [] ","sb source empty? "," source_ source_range  ","whitespace_at_end count -  -@ ","whitespace_at_end count -  > ","processed_source buffer  source length ","processed_source buffer  source ","sb source []  length == ","sb source []  length ","processed_source buffer  source length - ","whitespace_at_end count -  != ","sb source []  count - ","sb source []  count ","processed_source buffer  source [] ","processed_source buffer  source empty? "]}," Rubocop Cop Style SymbolName allow_dots?":{"type":"method","name":"allow_dots?","children":[],"call":[" cop_config [] "," cop_config "]}," Rubocop Cop Style SpecialGlobalVars autocorrect_action":{"type":"method","name":"autocorrect_action","children":[],"call":["@corrections << ","corrector replace ","PREFERRED_VARS  [] ","node loc expression ","node loc "," lambda "]}," Rubocop Cop Style SpecialGlobalVars message":{"type":"method","name":"message","children":[],"call":["MSG  format ","PREFERRED_VARS  [] "," fail ","MSG_ENGLISH  format ","english length > ","english length ","MSG_REGULAR  format ","regular length > ","regular length ","MSG_BOTH  format ","english join ","regular join ","NON_ENGLISH_VARS  include? ","PREFERRED_VARS  [] partition "," format "]}," Rubocop Cop Style SpecialGlobalVars on_gvar":{"type":"method","name":"on_gvar","children":[],"call":[" convention ","PREFERRED_VARS  [] "," add_offence "," add_offense "]}," Rubocop Cop Style SpaceBeforeModifierKeyword elsif?":{"type":"method","name":"elsif?","children":[],"call":["node loc keyword is? ","node loc keyword ","node loc "]}," Rubocop Cop Style SpaceBeforeModifierKeyword modifier?":{"type":"method","name":"modifier?","children":[],"call":[" elsif? ! "," elsif? ","node loc end nil? ","node loc end ","node loc ","node loc respond_to? "]}," Rubocop Cop Style SpaceBeforeModifierKeyword on_if":{"type":"method","name":"on_if","children":[],"call":[" convention ","left_of_kw is? ","Parser Source Range  new ","b - ","kw source_buffer ","kw begin_pos ","node loc keyword ","node loc "," modifier? "," add_offence "," add_offense ","Parser Source Range  new  is? ","left_of_node loc keyword  is? ","kw begin_pos  - ","kw source_kw begin_pos uffer ","node loc keyword  source_buffer ","kw kw begin_pos egin_pos ","node loc keyword  begin_pos "]}," Rubocop Cop Style RedundantSelf autocorrect_action":{"type":"method","name":"autocorrect_action","children":[],"call":["@corrections << ","corrector replace ","node loc expression source gsub ","node loc expression source ","node loc expression ","node loc "," lambda "]}," Rubocop Cop Style RedundantReturn autocorrect_action":{"type":"method","name":"autocorrect_action","children":[],"call":["@corrections << ","corrector replace ","node loc expression source sub ","node loc expression source ","node loc expression ","node loc "," lambda "]}," Rubocop Cop Style PerlBackrefs autocorrect_action":{"type":"method","name":"autocorrect_action","children":[],"call":["@corrections << ","corrector replace ","node loc expression ","node loc "," lambda "]}," Rubocop Cop Style PerlBackrefs on_nth_ref":{"type":"method","name":"on_nth_ref","children":[],"call":[" convention "," add_offence "," add_offense "]}," Rubocop Cop Style NumericLiterals integer_part":{"type":"method","name":"integer_part","children":[],"call":["node loc expression source split first ","node loc expression source split ","node loc expression source ","node loc expression ","node loc ","node loc expression source sub split first ","node loc expression source sub split ","node loc expression source sub "]}," Rubocop Cop Style NumericLiterals check":{"type":"method","name":"check","children":[],"call":[" convention ","int =~ "," integer_part "," enough_digits? ","int start_with? ","int size >= "," min_digits ","int size "," add_offence "," config_to_allow_offences= "," max= "," config_to_allow_offenses= "," add_offense ","int size + "," integer_part  =~ ","  integer_part eger_part "," integer_part  start_with? "," integer_part  size >= "," integer_part  size "," integer_part  size + "]}," Rubocop Cop Style NumericLiterals on_fload":{"type":"method","name":"on_fload","children":[],"call":[" check "]}," Rubocop Cop Style NumericLiterals enough_digits?":{"type":"method","name":"enough_digits?","children":[],"call":["number to_s size >= "," min_digits ","number to_s size ","number to_s "]}," Rubocop Cop Style NumericLiterals min_digits":{"type":"method","name":"min_digits","children":[],"call":[" cop_config [] "," cop_config "]}," Rubocop Cop Style MultilineBlockChain on_block":{"type":"method","name":"on_block","children":[],"call":[" convention ","Parser Source Range  new ","method loc expression end_pos ","method loc expression ","method loc ","end_kw_loc begin_pos ","end_kw_loc source_buffer ","do_kw_loc line != ","end_kw_loc line ","do_kw_loc line ","receiver loc end ","receiver loc ","receiver loc begin ","receiver type == ","receiver type "," on_node "," add_offence "," add_offense "]}," Rubocop Cop Style GlobalVars check":{"type":"method","name":"check","children":[],"call":[" convention "," allowed_var? "," add_offence "," add_offense "]}," Rubocop Cop Style GlobalVars on_gvasgn":{"type":"method","name":"on_gvasgn","children":[],"call":[" check "]}," Rubocop Cop Style GlobalVars on_gvar":{"type":"method","name":"on_gvar","children":[],"call":[" check "]}," Rubocop Cop Style GlobalVars allowed_var?":{"type":"method","name":"allowed_var?","children":[],"call":[" user_vars include? "," user_vars ","BUILT_IN_VARS  include? "]}," Rubocop Cop Style GlobalVars user_vars":{"type":"method","name":"user_vars","children":[],"call":[" cop_config [] map "," cop_config [] "," cop_config "]}," Rubocop Cop Style For on_for":{"type":"method","name":"on_for","children":[],"call":[" convention "," correct_style_detected "," opposite_style_detected "," add_offence "," style == "," style "," add_offense "]}," Rubocop Cop Style FinalNewline investigate":{"type":"method","name":"investigate","children":[],"call":[" convention "," source_range ","final_line length - ","final_line length ","processed_source [] ","processed_source buffer ","final_line end_with? ","processed_source raw_lines to_a last ","processed_source raw_lines to_a ","processed_source raw_lines ","final_line nil? "," add_offence "," add_offense "," source_ source_range  ","processed_source raw_lines to_a last  length - ","processed_source raw_lines to_a last  length ","processed_source raw_lines to_a last  end_with? ","processed_source raw_lines to_a last  nil? "]}," Rubocop Cop Style FavorModifier max_line_length":{"type":"method","name":"max_line_length","children":[],"call":[" config for_cop [] "," config for_cop "," config "]}," Rubocop Cop Style EmptyLineBetweenDefs def_end":{"type":"method","name":"def_end","children":[],"call":["node loc end line ","node loc end ","node loc "]}," Rubocop Cop Style EmptyLineBetweenDefs def_start":{"type":"method","name":"def_start","children":[],"call":["node loc keyword line ","node loc keyword ","node loc "]}," Rubocop Cop Style EmptyLineBetweenDefs singe_line_def?":{"type":"method","name":"singe_line_def?","children":[],"call":[" def_start == "," def_end "," def_start "]}," Rubocop Cop Style ClassVars message":{"type":"method","name":"message","children":[],"call":["MSG  format "," format "]}," Rubocop Cop Style ClassVars on_cvasgn":{"type":"method","name":"on_cvasgn","children":[],"call":[" convention "," add_offence "," add_offense "]}," Rubocop Cop Style Blocks autocorrect_action":{"type":"method","name":"autocorrect_action","children":[],"call":["@corrections << ","corrector replace ","node loc end ","node loc ","node loc begin ","node loc begin is? "," lambda "]}," Rubocop Cop Style AlignHash config_parameter":{"type":"method","name":"config_parameter","children":[],"call":["node loc operator is? ","node loc operator ","node loc "]}," Rubocop Cop Style AlignHash enforced_style":{"type":"method","name":"enforced_style","children":[],"call":[" cop_config [] "," config_parameter "," cop_config "]}," Rubocop Cop Style AlignHash spaced_separator":{"type":"method","name":"spaced_separator","children":[],"call":["node loc operator is? ","node loc operator ","node loc "]}," Rubocop Cop Style AlignHash value_delta":{"type":"method","name":"value_delta","children":[],"call":["correct_value_column - ","value loc column ","value loc ","value1 loc column ","value1 loc ","key loc column + + ","key loc column + "," spaced_separator length "," spaced_separator ","key loc column ","key loc "," enforced_style == "," enforced_style ","first_pair nil? ","key loc column + +  - "]}," Rubocop Cop Style AlignHash key_end_column":{"type":"method","name":"key_end_column","children":[],"call":["key loc column + ","key loc expression source length ","key loc expression source ","key loc expression ","key loc ","key loc column "]}," Rubocop Cop Style AlignHash deltas":{"type":"method","name":"deltas","children":[],"call":[" value_delta ","first_pair loc operator column - ","current_pair loc operator column ","current_pair loc operator ","current_pair loc ","first_pair loc operator column ","first_pair loc operator ","first_pair loc "," key_end_column - "," key_end_column ","enforced_style == ","current_pair loc operator is? ","first_pair loc column - ","current_pair loc column ","first_pair loc column ","current_pair loc line == ","prev_pair loc line ","prev_pair loc ","current_pair loc line "," fail "," config_parameter ","(str \"key\") include? "," enforced_style "," enforced_style  == ","  enforced_style  "]}," Rubocop Cop Style AlignHash good_alignment?":{"type":"method","name":"good_alignment?","children":[],"call":["v != ","@column_deltas values compact none? ","@column_deltas values compact ","@column_deltas values "]}," Rubocop Cop Style AlignHash autocorrect_action":{"type":"method","name":"autocorrect_action","children":[],"call":["@corrections << ","corrector replace ","  * + ","key_source + + ","value loc expression source ","value loc expression ","value loc ","key_source + "," spaced_separator + "," spaced_separator ","space + ","node loc operator is? ","node loc operator ","node loc ","  * ","max_key_width - ","key_source length "," enforced_style ","key loc expression source ","key loc expression ","key loc ","expr source "," enforced_style == ","(lvar :key_delta) max ","Parser Source Range  new ","expr end_pos ","expr source_buffer ","key_delta abs ","key_delta < ","expr begin_pos ","node loc expression "," lambda ","@column_deltas [] ","key_  * +  + + ","key loc expression source  + + ","value loc expression   * +  ","value loc node loc expression ession source ","value loc node loc expression ession ","key_  * +  + ","key loc expression source  + ","   * d_separator + ","   * d_separator ","  *  + ","key_  * +  length ","key loc expression source  length ","key loc expression   * +  ","key loc node loc expression ession source ","key loc node loc expression ession ","expr   * +  ","node loc expression  source ","node loc expression  end_pos ","expr   * + _buffer ","expr source_expr begin_pos uffer ","node loc expression  source_buffer ","key_delta aexpr begin_pos s ","expr expr begin_pos egin_pos ","node loc expression  begin_pos ","node loc node loc expression ession "," lamexpr begin_pos da "]}," Rubocop Cop Style AlignHash on_hash":{"type":"method","name":"on_hash","children":[],"call":[" convention "," good_alignment? "," deltas ","node children each_cons ","node children "," value_delta != "," value_delta ","key_widths max ","key loc expression source length ","key loc expression source ","key loc expression ","key loc ","node children map ","(send\n  (send nil :cop_config) :[]\n  (str \"EnforcedHashRocketStyle\")) include? "," cop_config [] "," cop_config ","node children first ","on_the_same_line ! ","lines_of_the_children uniq size == ","lines_of_the_children uniq size ","lines_of_the_children uniq ","key loc line ","styles include? "," any_pairs_on_the_same_line? "," alignment_for deltas "," alignment_for "," alignment_for deltas_for_first_pair ","@alignment_for_colons checkable_layout ","@alignment_for_hash_rockets checkable_layout "," new_alignment ","node children empty? "," add_offence "," multiline? "," add_offense "," ignored_node? ","lines_of_the_children uniq size ==  ! "," any_pairs_lines_of_the_children uniq size == ? "," alignment_for deltas_for_node children first  "]}," Rubocop Cop Style AlignArray autocorrect_action":{"type":"method","name":"autocorrect_action","children":[],"call":["@corrections << ","corrector replace ","expr source ","Parser Source Range  new ","expr end_pos ","expr begin_pos + ","expr begin_pos ","expr source_buffer ","  * + ","  * ","column_delta > ","node loc expression ","node loc "," lambda ","node loc expression  source ","node loc expression  end_pos ","node loc expression  begin_pos + ","node loc expression  begin_pos ","node loc expression  source_buffer ","node loc node loc expression ession "]}," Rubocop Cop Style AlignArray on_array":{"type":"method","name":"on_array","children":[],"call":[" convention ","current loc column != ","first_element loc column ","first_element loc ","current loc column ","current loc ","first_element loc column - ","current loc line != ","prev loc line ","prev loc ","current loc line ","node children each_cons ","node children ","node children first "," check_alignment ","node children first  loc column ","node children first  loc ","node children first  loc column - "]}," Rubocop Cop Lint UselessSetterCall contains_object_passed_as_argument?":{"type":"method","name":"contains_object_passed_as_argument?","children":[],"call":["variable_table [] ","variable_table []= ","(sym :lvar) include? ","rhs_node type "," on_node ","args children each ","args children "]}," Rubocop Cop Lint UselessSetterCall setter_call_to_local_variable?":{"type":"method","name":"setter_call_to_local_variable?","children":[],"call":["method =~ ","receiver type == ","receiver type ","node type == ","node type "]}," Rubocop Cop Lint UselessSetterCall check_for_useless_assignment":{"type":"method","name":"check_for_useless_assignment","children":[],"call":[" warning ","MSG  format ","receiver loc name source ","receiver loc name ","receiver loc "," contains_object_passed_as_argument? "," setter_call_to_local_variable? ","expression last ","expression is_a? ","body children ","body type == ","body type ","tracker contain_object_passed_as_argument? ","MethodVariableTracker  new ","body children  last ","body children  is_a? ","MethodVariableTracker  new  contain_object_passed_as_argument? "]}," Rubocop Cop Lint UselessSetterCall on_defs":{"type":"method","name":"on_defs","children":[],"call":[" check_for_useless_assignment "]}," Rubocop Cop Lint UselessSetterCall on_def":{"type":"method","name":"on_def","children":[],"call":[" check_for_useless_assignment "]}," Rubocop Cop Lint UselessAssignment check_for_unused_block_local_variable":{"type":"method","name":"check_for_unused_block_local_variable","children":[],"call":[" warning ","variable declaration_node "," sprintf ","variable name ","variable assignments empty? ","variable assignments ","variable block_local_variable? "," add_offence "," add_offense "," format "]}," Rubocop Cop Lint UselessAssignment return_value_node_of_scope":{"type":"method","name":"return_value_node_of_scope","children":[],"call":["body_node children last ","body_node children ","body_node type == ","body_node type ","scope body_node ","scope body_node  children last ","scope body_node  children ","scope body_node  type == ","scope body_node  type ","scope scope body_node  "]}," Rubocop Cop Lint UselessAssignment message_for_useless_assignment":{"type":"method","name":"message_for_useless_assignment","children":[],"call":["message << ","assignment operator sub ","assignment operator ","assignment meta_assignment_node equal? ","assignment meta_assignment_node "," return_value_node_of_scope ","variable scope ","assignment operator_assignment? ","(str \". Use _ or _\") + ","variable name ","assignment multiple_assignment? "," sprintf ","assignment variable "," format "," sprintf  << "," format  << ","  return_value_node_of_scope _of_scope ","assignment variable  scope ","assignment variable  name ","assignment assignment variable  "]}," Rubocop Cop Lint UselessAssignment check_for_unused_assignments":{"type":"method","name":"check_for_unused_assignments","children":[],"call":[" warning ","assignment node loc name ","assignment node loc ","assignment node ","assignment node children first loc expression ","assignment node children first loc ","assignment node children first ","assignment node children ","assignment regexp_named_capture? "," message_for_useless_assignment ","assignment used? ","variable assignments each ","variable assignments ","variable name to_s start_with? ","variable name to_s ","variable name "," add_offence "," add_offense ","  message_for_useless_assignment _for_useless_assignment "]}," Rubocop Cop Lint UselessAssignment after_leaving_scope":{"type":"method","name":"after_leaving_scope","children":[],"call":[" check_for_unused_block_local_variable "," check_for_unused_assignments ","scope variables each_value ","scope variables "]}," Rubocop Cop Lint UselessAssignment investigate":{"type":"method","name":"investigate","children":[],"call":[" inspect_variables ","processed_source ast "]}," Rubocop Cop Lint LiteralInCondition message":{"type":"method","name":"message","children":[],"call":["MSG  format ","node loc expression source ","node loc expression ","node loc "," format "]}," Rubocop Cop Lint BlockAlignment message":{"type":"method","name":"message","children":[],"call":[]}," Rubocop Cop Cop disabled_line?":{"type":"method","name":"disabled_line?","children":[],"call":["disabled_lines include? ","@processed_source disabled_lines_for_cops [] "," name ","@processed_source disabled_lines_for_cops ","@processed_source disabled_lines_for_cops []  include? ","@processed_source @processed_source disabled_lines_for_cops [] _for_cops [] ","@processed_source @processed_source disabled_lines_for_cops [] _for_cops "]}," Rubocop Cop Cop warning":{"type":"method","name":"warning","children":[],"call":[" add_offence "]}," Rubocop Cop Cop convention":{"type":"method","name":"convention","children":[],"call":[" add_offence "]}," Rubocop Cop Cop message":{"type":"method","name":"message","children":[],"call":[" class "]}," Rubocop Cop Cop debug?":{"type":"method","name":"debug?","children":[],"call":["@options [] "]}," Rubocop Cop Cop autocorrect?":{"type":"method","name":"autocorrect?","children":[],"call":["@options [] "," support_autocorrect? "]}," Rubocop Cop Cop cop_config":{"type":"method","name":"cop_config","children":[],"call":["@config for_cop "]}," Rubocop Cop Commissioner with_cop_error_handling":{"type":"method","name":"with_cop_error_handling","children":[],"call":["@errors [] << ","@errors [] "," raise ","@options [] "]}," Rubocop Cop Commissioner prepare":{"type":"method","name":"prepare","children":[],"call":["cop processed_source= ","@cops each "]}," Rubocop CLI mobilized_cop_classes":{"type":"method","name":"mobilized_cop_classes","children":[],"call":["cop_classes select! ","@options [] ","cop_classes reject! ","c cop_name == ","c cop_name ","Cop Cop  all "," run_rails_cops? ","@mobilized_cop_classes [] ","config object_id ","Cop Cop  all  select! ","Cop Cop  all  reject! ","@mobilized_Cop Cop  all  [] "]}," Rubocop Cop Style SpaceAroundBlockBraces check_pipe":{"type":"method","name":"check_pipe","children":[],"call":[" convention ","t1 pos "," space_between? "," space_range "," cop_config [] "," cop_config ","t2 pos ","t1 po space_range  ","  space_range pace_between? ","  space_range pace_range ","t2 po space_range  "]}," Rubocop Cop Style SpaceAroundBlockBraces check":{"type":"method","name":"check","children":[],"call":[" convention ","brace_token pos ","t1 text == ","t1 text "," space_between? "," check_space_outside_left_brace "," check_no_space_inside_braces "," check_space_inside_braces "," cop_config [] == "," cop_config [] "," cop_config "," check_empty_braces ","t2 text == ","t2 text "]}," Rubocop Cop Style SpaceAroundBlockBraces positions_not_to_check":{"type":"method","name":"positions_not_to_check","children":[],"call":["positions << ","t pos ","t type == ","t type ","tokens [] each ","tokens [] "," index_of_last_token "," index_of_first_token "," on_node ","positions << << ","tokens [] pos ","@processed_source tokens ","@processed_source ast ","@processed_source tokens  [] each ","@processed_source tokens  [] "," index_of_l@processed_source ast _token ","@processed_source tokens  [] pos ","@processed_source @processed_source tokens  ","@processed_source @processed_source ast  "]}," Rubocop Cop Style SpaceAroundBlockBraces investigate":{"type":"method","name":"investigate","children":[],"call":[" check ","type2 == "," check_pipe "," cop_config [] "," cop_config ","type1 == ","t2 type ","t1 type ","(send\n  (array\n    (send\n      (lvar :t1) :pos)\n    (send\n      (lvar :t2) :pos)) :-\n  (send nil :positions_not_to_check)) size < ","(send\n  (array\n    (send\n      (lvar :t1) :pos)\n    (send\n      (lvar :t2) :pos)) :-\n  (send nil :positions_not_to_check)) size ","(send\n  (lvar :t1) :pos) - "," positions_not_to_check ","t2 pos ","t1 pos ","processed_source tokens each_cons ","processed_source tokens ","processed_source ast ","(sym :tLCURLY) include? "]}," Rubocop Cop Style StringLiterals offence?":{"type":"method","name":"offence?","children":[],"call":["node loc begin is? ","node loc begin ","node loc ","node loc expression source !~ ","node loc expression source ","node loc expression ","src !~ "," single_quotes_preferred? ","src =~ "," style == "," style ","node loc expression source  !~ ","node loc expression source  =~ "]}," Rubocop Cop Style StringHelp on_regexp":{"type":"method","name":"on_regexp","children":[],"call":[" ignore_node "]}," Rubocop Cop Style StringHelp on_dstr":{"type":"method","name":"on_dstr","children":[],"call":[" ignore_node "]}," Rubocop Cop Style StringHelp on_str":{"type":"method","name":"on_str","children":[],"call":[" convention "," offence? "," part_of_ignored_node? ","node loc begin ","node loc ","node loc respond_to? "," add_offence "]}," Rubocop Cop Style RedundantSelf on_argument":{"type":"method","name":"on_argument","children":[],"call":["@local_variables << "]}," Rubocop Cop Style RedundantSelf on_blockarg":{"type":"method","name":"on_blockarg","children":[],"call":[" on_argument "]}," Rubocop Cop Style RedundantSelf on_arg":{"type":"method","name":"on_arg","children":[],"call":[" on_argument "]}," Rubocop Cop Style LambdaCall autocorrect_action":{"type":"method","name":"autocorrect_action","children":[],"call":["@corrections << ","corrector replace ","expr source sub ","expr source ","receiver_node loc expression source ","receiver_node loc expression ","receiver_node loc ","node loc expression ","node loc "," lambda ","node loc expression  source sub ","node loc expression  source ","receiver_node loc expression source _node loc expression source ","receiver_node loc node loc expression ession source ","receiver_node loc expression source _node loc expression ","receiver_node loc node loc expression ession ","receiver_node loc expression source _node loc ","node loc node loc expression ession "]}," Rubocop Cop Style LambdaCall on_send":{"type":"method","name":"on_send","children":[],"call":[" convention ","node loc selector nil? ","node loc selector ","node loc ","selector == "," style == "," style "," add_offence "," correct_style_detected "," opposite_style_detected "," offence? "," add_offense "," offense? "]}," Rubocop Cop Style HashSyntax autocorrect_action":{"type":"method","name":"autocorrect_action","children":[],"call":["@corrections << ","corrector replace ","node loc expression ","node loc ","node loc expression source [] sub ","node loc expression source [] ","node loc expression source "," lambda "]}," Rubocop Cop Style CharacterLiteral offence?":{"type":"method","name":"offence?","children":[],"call":["node loc expression source size between? ","node loc expression source size ","node loc expression source ","node loc expression ","node loc ","node loc begin is? ","node loc begin "]}," Rubocop Cop Style AutocorrectAlignment autocorrect_action":{"type":"method","name":"autocorrect_action","children":[],"call":["@corrections << ","corrector replace ","expr source ","Parser Source Range  new ","expr end_pos ","expr begin_pos + ","expr begin_pos ","expr source_buffer ","  * + ","  * ","column_delta > ","node loc expression ","node loc "," lambda ","node loc expression  source ","node loc expression  end_pos ","node loc expression  begin_pos + ","node loc expression  begin_pos ","node loc expression  source_buffer ","node loc node loc expression ession "]}," Rubocop Cop Lint UselessSetterCall MethodVariableTracker process_assignment":{"type":"method","name":"process_assignment","children":[],"call":["@table []= ","@table [] ","(sym :lvar) include? ","rhs_node type "]}," Rubocop Cop Lint UselessSetterCall MethodVariableTracker process_binary_operator_assignment":{"type":"method","name":"process_binary_operator_assignment","children":[],"call":[" throw ","@table []= ","ASSIGNMENT_TYPES  include? ","lhs_node type "]}," Rubocop Cop Lint UselessSetterCall MethodVariableTracker process_logical_operator_assignment":{"type":"method","name":"process_logical_operator_assignment","children":[],"call":[" throw "," process_assignment ","ASSIGNMENT_TYPES  include? ","lhs_node type "]}," Rubocop Cop Lint UselessSetterCall MethodVariableTracker process_multiple_assignment":{"type":"method","name":"process_multiple_assignment","children":[],"call":[" throw "," table []= "," table "," process_assignment ","mrhs_node type == ","mrhs_node type ","mrhs_node children [] ","mrhs_node children ","ASSIGNMENT_TYPES  include? ","lhs_node type ","mlhs_node children each_with_index ","mlhs_node children ","@table []= ","mmrhs_node children []  type == ","mmrhs_node children []  type ","mmrhs_node children []  children [] ","mmrhs_node children []  children "]}," Rubocop Cop Lint UselessSetterCall MethodVariableTracker scan":{"type":"method","name":"scan","children":[],"call":[" scan ","child is_a? ","node children each ","node children "," catch "]}," Rubocop Cop Lint UselessSetterCall MethodVariableTracker contain_object_passed_as_argument?":{"type":"method","name":"contain_object_passed_as_argument?","children":[],"call":["@table [] "," process_assignment "," process_binary_operator_assignment "," process_logical_operator_assignment "," process_multiple_assignment ","node type "," scan ","@table []= ","@args_node children each ","@args_node children "]}," Rubocop Cop Lint UselessSetterCall MethodVariableTracker initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Array bsearch":{"type":"method","name":"bsearch","children":[],"call":["midpoint + ","midpoint - "," fail ","result class ","result < ","result == "," [] ","(send\n  (lvar :from) :+\n  (lvar :to)) div ","from + ","from <= "," size - "," size "," to_enum "," __method__ "," block_given? ","(send\n  (lvar :from) :+\n  (lvar :to)) div  + ","(send\n  (lvar :from) :+\n  (lvar :to)) div  - ","result <  class ","result <  < ","result <  == ","(send\n  (lvar :midpoint + ) :+\n  (lvar :to)) div ","(send\n  (lvar :from) :+\n  (lvar :midpoint - )) div ","(send\n  (lvar :from) :+\n  (lvar : size - )) div ","midpoint +  + ","midpoint +  <= "," midpoint - _enum ","  size - _enum "]}," Rubocop ProcessedSource valid_syntax?":{"type":"method","name":"valid_syntax?","children":[],"call":["(sym :error) include? ","d level ","@diagnostics none? "]}," Rubocop Options print_conf_option":{"type":"method","name":"print_conf_option","children":[],"call":[" puts "]}," Rubocop Options print_available_cops":{"type":"method","name":"print_available_cops","children":[],"call":[" print_conf_option ","cop new support_autocorrect? to_s ","cop new support_autocorrect? ","cop new ","cnf each ","cnf delete ","dirconf for_cop dup ","dirconf for_cop "," puts ","cop cop_name ","coptypes each ","coptypes size ","type to_s capitalize ","type to_s ","cops with_type sort_by! ","cops with_type ","cops types sort! each ","cops types sort! ","cops types ","@config_store for ","Dir  pwd to_s ","Dir  pwd ","cops length ","Cop Cop  all ","dirconf for_cop dup  each ","dirconf for_cop dup  delete ","@config_store for  for_cop dup ","@config_store for  for_cop ","cops with_type sort_by!  each ","cops with_type sort_by!  size ","Cop Cop  all  with_type sort_by! ","Cop Cop  all  with_type ","Cop Cop  all  types sort! each ","Cop Cop  all  types sort! ","Cop Cop  all  types ","Cop Cop  all  length "]}," Rubocop Options target_finder":{"type":"method","name":"target_finder","children":[],"call":["TargetFinder  new ","@options [] "]}," Rubocop Options validate_auto_gen_config_option":{"type":"method","name":"validate_auto_gen_config_option","children":[],"call":[" fail ","(str \"Remove \") + ","config contains_auto_generated_config ","@options [] ","@config_store for "," target_finder find each "," target_finder find "," target_finder ","args any? "," exit "," warn ","@config_store for  contains_auto_generated_@config_store for  ","@@config_store for _store for "]}," Rubocop Options validate_only_option":{"type":"method","name":"validate_only_option","children":[],"call":[" fail ","@options [] ","c cop_name == ","c cop_name ","Cop Cop  all none? ","Cop Cop  all ","@options [] each "]}," Rubocop Options deprecate":{"type":"method","name":"deprecate","children":[],"call":[" warn ","message << "]}," Rubocop Options convert_deprecated_options":{"type":"method","name":"convert_deprecated_options","children":[],"call":["(send\n  (lvar :args) :map!) flatten! "," deprecate ","args map! "]}," Rubocop Options ignore_dropped_options":{"type":"method","name":"ignore_dropped_options","children":[],"call":[" warn ","-s/--silent options is dropped.  + ","(str \"-s\") include? ","args reject! "]}," Rubocop Options parse":{"type":"method","name":"parse","children":[],"call":[" target_finder find "," target_finder ","(send\n  (const nil :OptionParser) :new) parse! "," exit "," puts ","Rubocop Version  version ","opts on ","Sickill Rainbow  enabled= ","@options []= "," require ","@options [] last << ","@options [] last ","@options [] ","@options [] << "," print_available_cops "," validate_auto_gen_config_option "," validate_only_option ","@config_store set_options_config ","opts banner= ","OptionParser  new "," convert_deprecated_options "," ignore_dropped_options "," add_boolean_flags "," option "," add_formatting_options "," add_flags_with_optional_args "," fail ","incompat inspect ","(lvasgn :incompat\n  (send\n    (send\n      (ivar :@options) :keys) :&\n    (const nil :EXITING_OPTIONS))) size > ","(lvasgn :incompat\n  (send\n    (send\n      (ivar :@options) :keys) :&\n    (const nil :EXITING_OPTIONS))) size ","@options keys & ","@options keys "," add_severity_option "," add_configuration_options ","list split ","@options keys &  inspect ","(lvasgn :@options keys & \n  (send\n    (send\n      (ivar :@options) :keys) :&\n    (const nil :EXITING_OPTIONS))) size > ","(lvasgn :@options keys & \n  (send\n    (send\n      (ivar :@options) :keys) :&\n    (const nil :EXITING_OPTIONS))) size "]}," Rubocop Options initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rubocop Formatter SimpleTextFormatter pluralize":{"type":"method","name":"pluralize","children":[],"call":["text << ","number == ","number to_s ","options [] "]}," Rubocop Formatter SimpleTextFormatter message":{"type":"method","name":"message","children":[],"call":["message << ","offence message ","[Corrected]  color ","offence corrected? "," green ","offense message ","offense corrected? "," annotate_message ","[Corrected]  color  << "," green  << ","offence [Corrected]  color  ","offence  green  ","offense [Corrected]  color  ","offense  green  "," annotate_[Corrected]  color  "," annotate_ green  "]}," Rubocop Formatter SimpleTextFormatter colored_severity_code":{"type":"method","name":"colored_severity_code","children":[],"call":["offence severity_code color ","offence severity_code ","COLOR_FOR_SEVERITY  [] ","offence severity "," colorize ","offense severity_code ","offense severity ","offense severity code ","offense severity name ","offence severity_code COLOR_FOR_SEVERITY  []  "," COLOR_FOR_SEVERITY  [] ize "]}," Rubocop Formatter SimpleTextFormatter count_stats":{"type":"method","name":"count_stats","children":[],"call":["offences select count ","offences select ","offences count ","offenses select count ","offenses select ","offenses count "]}," Rubocop Cop Util source_length":{"type":"method","name":"source_length","children":[],"call":["lines size ","line =~ ","lines reject! ","source lines to_a [] ","source lines to_a ","source lines "," comment_line? ","source lines to_a []  size ","source lines to_a []  reject! ","source source lines to_a []  to_a [] ","source source lines to_a []  to_a ","source source lines to_a []  "]}," Rubocop Cop Style WhileUntilDo autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector remove ","end_of_condition_range join ","node loc begin ","node loc ","condition_node loc expression end ","condition_node loc expression ","condition_node loc "," lambda ","condition_node loc expression end  join "]}," Rubocop Cop Style WhenThen autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","node loc begin ","node loc "," lambda "]}," Rubocop Cop Style VariableName message":{"type":"method","name":"message","children":[],"call":[" format "]}," Rubocop Cop Style VariableName name_of_setter":{"type":"method","name":"name_of_setter","children":[],"call":[" after_dot ","Regexp  escape ","receiver loc expression source ","receiver loc expression ","receiver loc ","method_name length - ","= length ","method_name length ","method_name to_s end_with? ","method_name to_s ","receiver type == ","receiver type "]}," Rubocop Cop Style VariableName name_of_variable":{"type":"method","name":"name_of_variable","children":[],"call":["Parser Source Range  new ","expr begin_pos + ","name length ","expr begin_pos ","expr source_buffer ","vasgn_node children first ","vasgn_node children ","vasgn_node loc expression ","vasgn_node loc ","vasgn_node loc expression  begin_pos + ","vasgn_node children first  length ","vasgn_node loc expression  begin_pos ","vasgn_node loc expression  source_buffer ","vasgn_node loc vasgn_node loc expression ession "]}," Rubocop Cop Style VariableName on_send":{"type":"method","name":"on_send","children":[],"call":[" check "," name_of_setter "]}," Rubocop Cop Style VariableName on_ivasgn":{"type":"method","name":"on_ivasgn","children":[],"call":[" check "," name_of_variable "]}," Rubocop Cop Style VariableName on_lvasgn":{"type":"method","name":"on_lvasgn","children":[],"call":[" check "," name_of_variable "]}," Rubocop Cop Style SpaceAroundBlockBraces space_range":{"type":"method","name":"space_range","children":[],"call":["Parser Source Range  new ","@processed_source buffer ","src [] =~ ","src [] ","b - ","e - ","token pos begin_pos ","token pos ","b + ","token pos begin_pos + ","token text == ","token text ","@processed_source buffer source ","Parstoken pos begin_pos r Sourctoken pos begin_pos  Rangtoken pos begin_pos   ntoken pos begin_pos w ","Parsb + r Sourcb +  Rangb +   nb + w ","@processed_source e - uffer ","@processed_source token pos begin_pos + uffer ","@proctoken pos begin_pos sstoken pos begin_pos d_sourctoken pos begin_pos  bufftoken pos begin_pos r ","@procb + ssb + d_sourcb +  buffb + r ","@processed_source buffer source  [] =~ ","@processed_source buffer source  [] ","e -  - ","token pos begin_pos +  - ","token pos begin_pos  - ","b +  - ","token pos e - egin_pos ","token pos token pos begin_pos + egin_pos ","toktoken pos begin_pos n pos btoken pos begin_pos gin_pos ","tokb + n pos bb + gin_pos ","toktoken pos begin_pos n pos ","tokb + n pos ","e -  + ","token pos begin_pos +  + ","token pos e - egin_pos + ","token pos token pos begin_pos + egin_pos + ","toktoken pos begin_pos n pos btoken pos begin_pos gin_pos + ","tokb + n pos bb + gin_pos + ","toktoken pos begin_pos n ttoken pos begin_pos xt == ","tokb + n tb + xt == ","toktoken pos begin_pos n ttoken pos begin_pos xt ","tokb + n tb + xt ","@processed_source e - uffer source ","@processed_source token pos begin_pos + uffer source ","@proctoken pos begin_pos sstoken pos begin_pos d_sourctoken pos begin_pos  bufftoken pos begin_pos r sourctoken pos begin_pos  ","@procb + ssb + d_sourcb +  buffb + r sourcb +  "]}," Rubocop Cop Style SpaceAroundBlockBraces check_space_outside_left_brace":{"type":"method","name":"check_space_outside_left_brace","children":[],"call":[" convention ","t2 pos "," space_between? ! "," space_between? ","t2 text == ","t2 text ","t1 pos "]}," Rubocop Cop Style SpaceAroundBlockBraces check_no_space_inside_braces":{"type":"method","name":"check_no_space_inside_braces","children":[],"call":[" convention "," space_range ","t2 text == ","t2 text ","t1 text == ","t1 text "," space_between? "," problem_details ","  space_range pace_range ","  space_range pace_between? "," problem_detail space_range  "]}," Rubocop Cop Style SpaceAroundBlockBraces check_space_inside_braces":{"type":"method","name":"check_space_inside_braces","children":[],"call":[" convention ","t2 pos ","t2 text == ","t2 text ","t1 pos ","t1 text == ","t1 text "," space_between? ","token pos "," problem_details "]}," Rubocop Cop Style StringLiterals autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","node loc end ","node loc ","node loc begin ","node loc begin is? "," lambda "]}," Rubocop Cop Style StringLiterals single_quotes_preferred?":{"type":"method","name":"single_quotes_preferred?","children":[],"call":[" fail "," cop_config [] "," cop_config "]}," Rubocop Cop Style StringLiterals message":{"type":"method","name":"message","children":[],"call":["Prefer double-quoted strings unless you need single quotes to  + ","Prefer single-quoted strings when you don't need string  + "," single_quotes_preferred? "," style == "," style "]}," Rubocop Cop Style SpecialGlobalVars autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","PREFERRED_VARS  [] ","node loc expression ","node loc "," lambda ","PREFERRED_VARS  [] first "]}," Rubocop Cop Style SignalException each_command":{"type":"method","name":"each_command","children":[],"call":[" command? "," on_node "]}," Rubocop Cop Style SignalException allow":{"type":"method","name":"allow","children":[],"call":[" ignore_node "," each_command "]}," Rubocop Cop Style SignalException check_for":{"type":"method","name":"check_for","children":[],"call":[" convention "," message ","selector != ","(sym :raise) include? "," ignore_node "," each_command "," style == "," style "," ignored_node? "," add_offence "," add_offense "]}," Rubocop Cop Style SignalException message":{"type":"method","name":"message","children":[],"call":["method_name == "," style "]}," Rubocop Cop Style SignalException style":{"type":"method","name":"style","children":[],"call":[" fail "," cop_config [] "," cop_config "]}," Rubocop Cop Style SignalException autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","node loc selector ","node loc "," command? "," style "," lambda "]}," Rubocop Cop Style SignalException on_send":{"type":"method","name":"on_send","children":[],"call":[" check_for "," ignored_node? "," style "]}," Rubocop Cop Style Semicolon check_for_line_terminator":{"type":"method","name":"check_for_line_terminator","children":[],"call":[" convention "," source_range ","processed_source [] ","line - ","processed_source buffer ","tokens last pos column ","tokens last pos ","tokens last ","tokens last type == ","tokens last type ","tokens_for_lines each ","token pos line ","token pos ","processed_source tokens group_by ","processed_source tokens "," convention_on ","@processed_source tokens group_by ","@processed_source tokens ","tokens last pos tokens last pos column  "]}," Rubocop Cop Style Semicolon check_for_expr_separator":{"type":"method","name":"check_for_expr_separator","children":[],"call":[" convention "," source_range ","processed_source [] ","line - ","processed_source buffer ","processed_source [] index ","expr_on_line size > ","expr_on_line size ","lines each ","exprs_lines group_by ","e loc expression line ","e loc expression ","e loc ","exprs map ","exprs size < ","exprs size ","node children "," on_node ","processed_source ast ","node children _lines group_by ","node children  map ","node children  size < ","node children  size "]}," Rubocop Cop Style RedundantSelf autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","node loc expression source gsub ","node loc expression source ","node loc expression ","node loc "," lambda ","corrector remove ","node loc dot ","receiver loc expression ","receiver loc "]}," Rubocop Cop Style RedundantReturn check_return_node":{"type":"method","name":"check_return_node","children":[],"call":[" convention ","node children size > ","node children size ","node children "," cop_config [] "," cop_config "," add_offence "," add_offense "]}," Rubocop Cop Style RedundantReturn autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","node children size > ","node children size ","node children ","expr source sub ","expr source ","node loc expression ","node loc "," lambda ","corrector remove "," range_with_surrounding_space ","node loc keyword ","corrector insert_after ","kids last ","corrector insert_before ","kids first ","child loc expression ","child loc ","node children map ","node loc expression  source sub ","node loc expression  source ","node loc node loc expression ession ","child loc node loc expression ession "]}," Rubocop Cop Style RedundantException on_send":{"type":"method","name":"on_send","children":[],"call":[" convention ","first_arg == ","args size == ","args size "," command? "," add_offence "," add_offense "]}," Rubocop Cop Style RaiseArgs message":{"type":"method","name":"message","children":[],"call":[" style "]}," Rubocop Cop Style RaiseArgs style":{"type":"method","name":"style","children":[],"call":[" fail "," cop_config [] "," cop_config "]}," Rubocop Cop Style RaiseArgs check_exploded":{"type":"method","name":"check_exploded","children":[],"call":[" convention "," message ","arg loc selector is? ","arg loc selector ","arg loc ","arg type == ","arg type ","args size == ","args size ","constructor_args size > ","constructor_args size "," add_offence "," correct_style_detected "," opposite_style_detected ","constructor_args size <= "," add_offense "]}," Rubocop Cop Style RaiseArgs check_compact":{"type":"method","name":"check_compact","children":[],"call":[" convention "," message ","args size > ","args size "," add_offence "," correct_style_detected "," opposite_style_detected "," add_offense "]}," Rubocop Cop Style RaiseArgs on_send":{"type":"method","name":"on_send","children":[],"call":[" check_exploded "," check_compact "," style "," command? "]}," Rubocop Cop Style PerlBackrefs autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","node loc expression ","node loc "," lambda "]}," Rubocop Cop Style MethodName message":{"type":"method","name":"message","children":[],"call":[" format "]}," Rubocop Cop Style MethodName name_of_singleton_method":{"type":"method","name":"name_of_singleton_method","children":[],"call":[" after_dot ","def + + ","Regexp  escape ","scope loc expression source ","scope loc expression ","scope loc ","method_name length "]}," Rubocop Cop Style MethodName name_of_instance_method":{"type":"method","name":"name_of_instance_method","children":[],"call":["Parser Source Range  new ","begin_pos + ","method_name length ","expr source_buffer ","expr begin_pos + + ","space length ","expr begin_pos + ","def length ","expr begin_pos ","match captures ","(str \"^def(\\\\s+)([\\\\w]+[!?=]?\\\\b)\") match ","expr source ","def_node loc expression ","def_node loc ","expr begin_pos + +  + ","def_node loc expression  source_buffer ","expr expr begin_pos + +  + + ","def_node loc expression  begin_pos + + ","expr expr begin_pos + +  + ","def_node loc expression  begin_pos + ","expr expr begin_pos + +  ","def_node loc expression  begin_pos ","(str \"^def(\\s+)([\\w]+[!?=]?\\b)\") match  captures ","(str \"^def(\\\\s+)([\\\\w]+[!?=]?\\\\b)\") (str \"^def(\\s+)([\\w]+[!?=]?\\b)\") match  ","def_node loc expression  source ","def_node loc def_node loc expression ession "]}," Rubocop Cop Style MethodName on_defs":{"type":"method","name":"on_defs","children":[],"call":[" check "," name_of_singleton_method "]}," Rubocop Cop Style MethodName on_def":{"type":"method","name":"on_def","children":[],"call":[" check "," name_of_instance_method "]}," Rubocop Cop Style MethodCalledOnDoEndBlock on_send":{"type":"method","name":"on_send","children":[],"call":[" convention ","Parser Source Range  new ","node loc expression end_pos ","node loc expression ","node loc ","receiver loc end begin_pos ","receiver loc end ","receiver loc ","receiver loc end source_buffer ","receiver loc end is? ","receiver type == ","receiver type "," ignored_node? "," add_offence "," add_offense "]}," Rubocop Cop Style MethodCalledOnDoEndBlock on_block":{"type":"method","name":"on_block","children":[],"call":[" ignore_node "]}," Rubocop Cop Style MethodCallParentheses autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector remove ","node loc end ","node loc ","node loc begin "," lambda "," fail ","(const\n  (const nil :EmptyLiteral) :HASH_NODE) include? "," config for_cop [] "," config for_cop "," config "]}," Rubocop Cop Style LambdaCall style":{"type":"method","name":"style","children":[],"call":[" fail "," cop_config [] "," cop_config "]}," Rubocop Cop Style LambdaCall message":{"type":"method","name":"message","children":[],"call":[" style == "," style "]}," Rubocop Cop Style LambdaCall autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector remove ","node loc selector ","node loc ","corrector replace ","expr source sub ","expr source ","receiver_node loc expression source ","receiver_node loc expression ","receiver_node loc ","node loc expression "," style == "," style "," lambda ","node loc expression  source sub ","node loc expression  source ","receiver_node loc expression source _node loc expression source ","receiver_node loc node loc expression ession source ","receiver_node loc expression source _node loc expression ","receiver_node loc node loc expression ession ","receiver_node loc expression source _node loc ","node loc node loc expression ession "]}," Rubocop Cop Style HashSyntax autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","node loc expression ","node loc ",": + ","node loc expression source sub ","node loc expression source ","node loc expression source [] sub ","node loc expression source [] "," cop_config [] == "," cop_config [] "," cop_config "," lambda ","corrector remove "," range_with_surrounding_space ","corrector insert_before ","corrector insert_after ","key source sub ","key source "," fail "," config for_cop [] "," config for_cop "," config "," space_before_operator? ! "," space_before_operator? ","node loc operator ","node children first loc expression ","node children first loc ","node children first ","node children "," style == "," style ","range source sub ","range source ","Parser Source Range  new ","op end_pos ","key begin_pos ","key source_buffer "," cnode loc operator _config [] == "," cnode loc operator _config [] "," cnode loc operator _config ","  range_with_surrounding_space _with_surrounding_space "," Parser Source Range  new _with_surrounding_space ","node children first loc expression  source sub ","node children first loc expression  source "," config for_cnode loc operator  [] "," config for_cnode loc operator  "," space_before_node loc operator erator? ! "," space_before_node loc operator erator? ","node loc node loc operator erator "," range_with_surrounding_space  source sub ","Parser Source Range  new  source sub "," range_with_surrounding_space  source ","Parser Source Range  new  source ","node loc operator  end_pos ","node children first loc expression  begin_pos ","node children first loc expression  source_buffer "]}," Rubocop Cop Style HashSyntax hash_rockets_check":{"type":"method","name":"hash_rockets_check","children":[],"call":[" convention ","pair loc expression begin join ","pair loc operator ","pair loc ","pair loc expression begin ","pair loc expression ","pair loc operator is? ","pairs each "," check "]}," Rubocop Cop Style HashSyntax ruby19_check":{"type":"method","name":"ruby19_check","children":[],"call":[" convention ","pair loc expression begin join ","pair loc operator ","pair loc ","pair loc expression begin ","pair loc expression ","pair loc operator is? ","pairs each "," word_symbol_pair? ","pairs all? "," check "]}," Rubocop Cop Style HashMethods autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace "," proper_method_name ","node loc selector source ","node loc selector ","node loc "," lambda "]}," Rubocop Cop Style EmptyLiteral autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","node loc expression ","node loc "," lambda "]}," Rubocop Cop Style DefWithoutParentheses autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector insert_after ","node loc expression ","node loc ","corrector insert_before "," lambda "]}," Rubocop Cop Style DefWithParentheses autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector remove ","node loc end ","node loc ","node loc begin "," lambda "]}," Rubocop Cop Style ConfigurableNaming after_dot":{"type":"method","name":"after_dot","children":[],"call":["Parser Source Range  new ","begin_pos + ","expr source_buffer ","expr begin_pos + ","expr begin_pos ","match [] length ","match [] ","(str \"\\\\A\") match ","expr source ","node loc expression ","node loc ","expr begin_pos +  + ","node loc expression  source_buffer ","expr expr begin_pos +  + ","node loc expression  begin_pos + ","expr expr begin_pos +  ","node loc expression  begin_pos ","(str \"\\A\") match  [] length ","(str \"\\A\") match  [] ","(str \"\\\\A\") (str \"\\A\") match  ","node loc expression  source ","node loc node loc expression ession "]}," Rubocop Cop Style ConfigurableNaming matches_config?":{"type":"method","name":"matches_config?","children":[],"call":[" fail ","Illegal value for EnforcedStyle. Must be snake_case or  + ","name =~ "," cop_config [] "," cop_config "," style == "," style "]}," Rubocop Cop Style ConfigurableNaming check":{"type":"method","name":"check","children":[],"call":[" convention "," message "," cop_config [] "," cop_config ","Cop OPERATOR_METHODS  include? "," matches_config? ","range source to_sym ","range source "," add_offence "," style "]}," Rubocop Cop Style ColonMethodCall autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","node loc dot ","node loc "," lambda "]}," Rubocop Cop Style CollectionMethods autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace "," preferred_method ","node loc selector source ","node loc selector ","node loc "," lambda "]}," Rubocop Cop Style ClassLength check":{"type":"method","name":"check","children":[],"call":[" convention "," sprintf "," max_length ","method_length > ","Util  source_length "," count_comments? ","node loc expression source ","node loc expression ","node loc ","class_length > ","length + "," comment_line? "," count_comments? ! ","source_line blank? "," processed_source [] "," processed_source ","target_line_numbers reduce ","class_body_line_numbers - "," line_numbers_of_inner_classes "," line_range to_a [] "," line_range to_a "," line_range ","Util  source_length  > "," processed_source []  blank? ","class_body_line_numbers -  reduce "," line_range to_a []  - "]}," Rubocop Cop Style ClassLength count_comments?":{"type":"method","name":"count_comments?","children":[],"call":[" cop_config [] "," cop_config "]}," Rubocop Cop Style ClassLength max_length":{"type":"method","name":"max_length","children":[],"call":[" cop_config [] "," cop_config "]}," Rubocop Cop Style ClassLength on_class":{"type":"method","name":"on_class","children":[],"call":[" check "]}," Rubocop Cop Style CharacterLiteral autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","node loc expression ","node loc ","string length == ","string length ","node loc expression source [] ","node loc expression source "," lambda ","node loc expression source []  length == ","node loc expression source []  length "]}," Rubocop Cop Style Blocks autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","padding + ","b source_buffer source [] =~ ","b source_buffer source [] ","b begin_pos - ","b begin_pos ","b source_buffer source ","b source_buffer ","b is? ","node loc end ","node loc ","node loc begin "," lambda ","corrector insert_before "]}," Rubocop Cop Style AutocorrectAlignment autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","line length ","corrector replace ","line [] ","column_delta -@ ","Parser Source Range  new ","b + ","expr source_buffer ","offset == ","expr begin_pos + ","expr begin_pos ","expr source each_line ","expr source ","expr source gsub ","  * ","column_delta > ","node loc expression ","node loc "," lambda "," remove ","corrector insert_before ","pos_to_remove + ","column_delta abs ","line_begin_pos - ","expr source_buffer source [] =~ ","expr source_buffer source [] ","expr source_buffer source "," each_line "," calculate_range ","expr begin_pos +  + ","expr source_expr begin_pos + uffer ","node loc expression  source_buffer ","expr expr begin_pos + egin_pos + ","node loc expression  begin_pos + ","expr expr begin_pos + egin_pos ","node loc expression  begin_pos ","node loc expression  source each_line ","node loc expression  source ","expr source gsuexpr begin_pos +  ","node loc expression  source gsub ","node loc node loc expression ession "," lamexpr begin_pos + da ","corrector insert_expr begin_pos + efore ","line_begin_pos -  + ","column_delta aexpr begin_pos + s ","line_expr begin_pos + egin_pos - ","expr source_expr begin_pos + uffer source [] =~ ","node loc expression  source_buffer source [] =~ ","expr source_expr begin_pos + uffer source [] ","node loc expression  source_buffer source [] ","expr source_expr begin_pos + uffer source ","node loc expression  source_buffer source "," calculate_Parser Source Range  new  "," calculate_ calculate_range  "]}," Rubocop Cop Style AutocorrectAlignment start_of_line?":{"type":"method","name":"start_of_line?","children":[],"call":["loc expression source_line [] =~ ","loc expression source_line [] ","loc column ","loc expression source_line ","loc expression "]}," Rubocop Cop Style AutocorrectAlignment check_alignment":{"type":"method","name":"check_alignment","children":[],"call":[" convention ","@column_delta != ","items first loc column - ","current loc column ","current loc ","items first loc column ","items first loc ","items first "," start_of_line? ","current loc line > ","prev loc line ","prev loc ","current loc line ","items each_cons "," add_offence ","items first loc column -  != "]}," Rubocop Cop Style Attr autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","node loc selector ","node loc "," lambda "]}," Rubocop Cop Style AndOr correction":{"type":"method","name":"correction","children":[],"call":["corrector replace ","node loc operator ","node loc ","node type == ","node type "," lambda "]}," Rubocop Cop Style AndOr autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","node == ","SourceParser  parse ast ","SourceParser  parse "," rewrite_node "," correction ","@ correction orre correction tions << ","Sour correction eParser  parse ast ","Sour correction eParser  parse ","  correction orre correction tion "]}," Rubocop Cop Style AlignHash autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","  * + ","key_source + + ","value loc expression source ","value loc expression ","value loc ","key_source + "," spaced_separator + "," spaced_separator ","space + ","node loc operator is? ","node loc operator ","node loc ","  * ","max_key_width - ","key_source length "," enforced_style ","key loc expression source ","key loc expression ","key loc ","expr source "," enforced_style == ","(lvar :key_delta) max ","Parser Source Range  new ","expr end_pos ","expr source_buffer ","key_delta abs ","key_delta < ","expr begin_pos ","node loc expression "," lambda ","@column_deltas [] "," adjust ","key_  * +  + + ","key loc expression source  + + ","value loc expression   * +  ","value loc node loc expression ession source ","value loc node loc expression ession ","key_  * +  + ","key loc expression source  + ","   * d_separator + ","   * d_separator ","  *  + ","key_  * +  length ","key loc expression source  length ","key loc expression   * +  ","key loc node loc expression ession source ","key loc node loc expression ession ","expr   * +  ","node loc expression  source ","node loc expression  end_pos ","expr   * + _buffer ","expr source_expr begin_pos uffer ","node loc expression  source_buffer ","key_delta aexpr begin_pos s ","expr expr begin_pos egin_pos ","node loc expression  begin_pos ","node loc node loc expression ession "," lamexpr begin_pos da "]}," Rubocop Cop Offence severity_code":{"type":"method","name":"severity_code","children":[],"call":["@severity to_s [] upcase ","@severity to_s [] ","@severity to_s "]}," Rubocop Cop Lint Syntax investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offence ","d message ","d location ","d level ","processed_source diagnostics each ","processed_source diagnostics "]}," Rubocop Cop Lint Syntax offence_from_diagnostic":{"type":"method","name":"offence_from_diagnostic","children":[],"call":[]}," Rubocop Cop Lint Syntax offences_from_diagnostics":{"type":"method","name":"offences_from_diagnostics","children":[],"call":[]}," Rubocop Cop Lint Debugger on_send":{"type":"method","name":"on_send","children":[],"call":[" warning ","DEBUGGER_NODES  include? "," add_offence "," add_offense "," format ","node loc expression source ","node loc expression ","node loc "]}," Rubocop Cop Cop support_autocorrect?":{"type":"method","name":"support_autocorrect?","children":[],"call":[" respond_to? "]}," Rubocop CLI run_rails_cops?":{"type":"method","name":"run_rails_cops?","children":[],"call":["config [] [] ","config [] ","@options [] "]}," Rubocop Formatter ClangStyleFormatter highlight_line":{"type":"method","name":"highlight_line","children":[],"call":["  * + ","^ * ","  * ","location column ","location source_line length - ","location source_line length ","location source_line ","location column_range count ","location column_range ","location begin line == ","location end line ","location end ","location begin line ","location begin "]}," Rubocop Cop Util line_range":{"type":"method","name":"line_range","children":[],"call":["source_range end line ","source_range end ","source_range begin line ","source_range begin "," fail ","arg loc expression ","arg loc "]}," Rubocop Cop Util comment_line?":{"type":"method","name":"comment_line?","children":[],"call":["line_source =~ "]}," Rubocop Cop Style SpaceAfterNot autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","node loc expression source gsub ","node loc expression source ","node loc expression ","node loc "," lambda ","corrector remove ","Parser Source Range  new ","receiver loc expression begin_pos ","receiver loc expression ","receiver loc ","node loc selector end_pos ","node loc selector ","node loc selector source_buffer "]}," Rubocop Cop Style SpaceAfterNot on_send":{"type":"method","name":"on_send","children":[],"call":[" convention ","node loc expression source =~ ","node loc expression source ","node loc expression ","node loc ","method_name == "," add_offence "," add_offense "]}," Rubocop Cop Style Documentation namespace?":{"type":"method","name":"namespace?","children":[],"call":["(sym :class) include? ","node type ","body_node children all? ","body_node children ","body_node type "]}," Rubocop Cop Style Documentation check":{"type":"method","name":"check","children":[],"call":[" convention "," format ","node type to_s ","node type ","ast_with_comments [] empty? ","ast_with_comments [] "," namespace? ","body ! ","node type == "," on_node "," add_offence "," associated_comment? "," add_offense "]}," Rubocop Cop Style ClassLength line_numbers_of_inner_classes":{"type":"method","name":"line_numbers_of_inner_classes","children":[],"call":["line_numbers to_a ","line_numbers merge "," line_range ","inner_node eql? "," on_node ","Set  new ","Set  new  to_a ","Set  new  merge ","  line_range  "]}," Rubocop Cop Style BracesAroundHashParameters style":{"type":"method","name":"style","children":[],"call":[" fail "," cop_config [] "," cop_config "]}," Rubocop Cop Style BracesAroundHashParameters on_send":{"type":"method","name":"on_send","children":[],"call":[" convention ","has_braces ! "," style == "," style ","arg loc begin nil? ! ","arg loc begin nil? ","arg loc begin ","arg loc ","arg children any? ","arg children ","arg type == ","arg type ","args first ","OPERATOR_METHODS  include? ","method_name to_s end_with? ","method_name to_s ","args size == ","args size ","all_hashes ! ","a type == ","a type ","args all? ","args length > ","args length ","args last "," check "," non_empty_hash? "," operator? ","arg loc begin nil? !  ! ","args first  loc begin nil? ! ","args last  loc begin nil? ! ","args first  loc begin nil? ","args last  loc begin nil? ","args first  loc begin ","args last  loc begin ","args first  loc ","args last  loc ","args first  children any? ","args last  children any? ","args first  children ","args last  children ","args first  type == ","args last  type == ","args first  type ","args last  type ","args first s first ","args last s first ","args first s size == ","args last s size == ","args first s size ","args last s size ","args first s all? ","args last s all? ","args first s length > ","args last s length > ","args first s length ","args last s length ","args first s last ","args last s last "]}," Rubocop Cop Style AlignHash any_pairs_on_the_same_line?":{"type":"method","name":"any_pairs_on_the_same_line?","children":[],"call":["lines_of_the_children uniq size < ","lines_of_the_children size ","lines_of_the_children uniq size ","lines_of_the_children uniq ","key loc line ","key loc ","node children map ","node children "]}," Rubocop ConfigLoader dirs_to_search":{"type":"method","name":"dirs_to_search","children":[],"call":["dirs_to_search << ","Dir  home ","dir_pathname to_s ","target_dir_pathname ascend ","Pathname  new ","File  expand_path ","dir_pathname to_s == ","Pathname  new ascend ","Pathname  new  ascend "]}," Rubocop ConfigLoader config_files_in_path":{"type":"method","name":"config_files_in_path","children":[],"call":["File  exist? ","possible_config_files select ","File  join "," dirs_to_search map "," dirs_to_search "]}," Rubocop ConfigLoader merge_with_default":{"type":"method","name":"merge_with_default","children":[],"call":["result contains_auto_generated_config= ","config contains_auto_generated_config ","Config  new "," merge "," default_configuration ","Config  new  contains_auto_generated_config= "]}," Rubocop ConfigLoader default_configuration":{"type":"method","name":"default_configuration","children":[],"call":[" load_file "," print "," debug? "]}," Rubocop ConfigLoader add_excludes_from_higher_level":{"type":"method","name":"add_excludes_from_higher_level","children":[],"call":["config [] [] uniq! ","config [] [] ","config [] ","config [] [] << ","File  join ","File  dirname ","highest_config loaded_path ","path start_with? ","path is_a? ","highest_config [] [] each ","highest_config [] [] ","highest_config [] ","excludes << ","excludes include? ","highest_config loaded_File  join  ","File  join  start_with? ","File  join  is_a? "]}," Rubocop ConfigLoader configuration_from_file":{"type":"method","name":"configuration_from_file","children":[],"call":[" merge_with_default "," make_excludes_absolute "," add_excludes_from_higher_level "," load_file ","found_files last "," print "," debug? ","found_files last != ","found_files any? "," config_files_in_path ","config_file == ","config add_excludes_from_higher_level "," config_files_in_path  last "," config_files_in_path  last != "," config_files_in_path  any? ","  load_file _files_in_path "," load_file _file == "," load_file  add_excludes_from_higher_level "]}," Rubocop ConfigLoader configuration_file_for":{"type":"method","name":"configuration_file_for","children":[],"call":[" config_files_in_path first "," config_files_in_path "]}," Rubocop ConfigLoader base_configs":{"type":"method","name":"base_configs","children":[],"call":[" load_file "," print "," debug? ","File  join ","File  dirname ","f start_with? "," Array map "," Array "," fail ","(str \"Remove \") + ","f include? "," auto_gen_config? "," exit "," warn ","configs compact "," old_auto_config_file_warning "," load_File  join ile ","File  join  start_with? "," File  join ail ","File  join  include? "," auto_gen_conFile  join ig? ","conFile  join igs compact "," old_auto_conFile  join ig_File  join ile_warning "]}," Rubocop ConfigLoader merge":{"type":"method","name":"merge","children":[],"call":["result []= ","base_hash [] merge ","derived_hash [] ","base_hash [] ","base_hash [] is_a? ","keys_appearing_in_both each ","base_hash keys & ","derived_hash keys ","base_hash keys ","base_hash merge "," merge ","base_hash merge  []= ","base_hash keys &  each "]}," Rubocop ConfigLoader relative_path":{"type":"method","name":"relative_path","children":[],"call":["path_name relative_path_from to_s ","path_name relative_path_from ","Pathname  new ","File  expand_path ","Pathname  new  relative_path_from to_s ","Pathname  new  relative_path_from "]}," Rubocop ConfigLoader make_excludes_absolute":{"type":"method","name":"make_excludes_absolute","children":[],"call":["File  join ","File  dirname ","config loaded_path ","exclude_elem start_with? ! ","exclude_elem start_with? ","exclude_elem is_a? ","config [] [] map! ","config [] [] ","config [] ","config base_dir_for_path_parameters "]}," Rubocop ConfigLoader load_file":{"type":"method","name":"load_file","children":[],"call":["config contains_auto_generated_config= ","config warn_unless_valid ","Config  new ","hash delete ","base_config loaded_path include? ","base_config loaded_path ","hash []= "," merge ","hash [] ","hash key? ","value is_a? ","base_config each "," make_excludes_absolute ","File  basename == ","File  basename "," base_configs reverse_each "," base_configs "," puts "," debug? ","YAML  load_file ","File  absolute_path "," resolve_inheritance "," deprecation_check ","config make_excludes_absolute "," exit "," warn ","config deprecation_check ","Config  new  contains_auto_generated_Config  new = ","Config  new  warn_unless_valid ","YAML  load_file  delete ","base_Config  new  loaded_path include? ","base_config loaded_File  absolute_path  include? ","base_Config  new  loaded_path ","base_config loaded_File  absolute_path  ","YAML  load_file  []= ","YAML  load_file  [] ","YAML  load_file  key? ","base_Config  new  each "," base_Config  new s reverse_each "," base_Config  new s ","File  absolute_File  absolute_path  ","Config  new  make_excludes_absolute ","Config  new  deprecation_check "]}," Rubocop Options long_opt_symbol":{"type":"method","name":"long_opt_symbol","children":[],"call":["long_opt [] sub gsub to_sym ","long_opt [] sub gsub ","long_opt [] sub ","long_opt [] ","arg start_with? ","args find "]}," Rubocop Options option":{"type":"method","name":"option","children":[],"call":[" block_given? ","@options []= "," long_opt_symbol ","opts on "," Array ","OptionsHelp TEXT  [] ","  long_opt_symbol  "]}," Rubocop Options add_boolean_flags":{"type":"method","name":"add_boolean_flags","children":[],"call":[" option ","@options []= ","opts on "]}," Rubocop Options add_formatting_options":{"type":"method","name":"add_formatting_options","children":[],"call":["@options [] last << ","@options [] last ","@options [] "," option ","@options [] << ","@options []= "," validate_auto_gen_config_option "]}," Rubocop Cop Style WordArray min_size":{"type":"method","name":"min_size","children":[],"call":[" cop_config [] "," cop_config "]}," Rubocop Cop Style WordArray comments_in_array?":{"type":"method","name":"comments_in_array?","children":[],"call":["(send\n  (send\n    (send\n      (send\n        (lvar :comment) :loc) :expression) :to_a) :&\n  (lvar :array_range)) empty? ! ","(send\n  (send\n    (send\n      (send\n        (lvar :comment) :loc) :expression) :to_a) :&\n  (lvar :array_range)) empty? ","comment loc expression to_a & ","comment loc expression to_a ","comment loc expression ","comment loc ","comments any? ","node loc expression to_a ","node loc expression ","node loc "," processed_source comments "," processed_source ","(send\n  (send\n    (send\n      (send\n        (lvar :comment) :loc) :expression) :to_a) :&\n  (lvar :node loc expression to_a )) empty? ! ","(send\n  (send\n    (send\n      (send\n        (lvar :comment) :loc) :expression) :to_a) :&\n  (lvar :node loc expression to_a )) empty? "," processed_source comments  any? "," processed_source  processed_source comments  "]}," Rubocop Cop Style TrailingWhitespace autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector remove "," lambda "]}," Rubocop Cop Style TrailingBlankLines autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector remove "," lambda "," fail "," config for_cop [] "," config for_cop "," config ","range source =~ ","range source ","corrector replace "," style == "," style "]}," Rubocop Cop Style SpaceInsideHashLiteralBraces range_of_space_to_the_left":{"type":"method","name":"range_of_space_to_the_left","children":[],"call":["Parser Source Range  new ","range end_pos - ","range end_pos ","range source_buffer ","src [] =~ ","src [] ","begin_pos - ","range begin_pos ","range source_buffer source ","range source_buffer source  [] =~ ","range source_buffer source  [] ","range begin_pos  - ","range range begin_pos  "]}," Rubocop Cop Style SpaceInsideHashLiteralBraces range_of_space_to_the_right":{"type":"method","name":"range_of_space_to_the_right","children":[],"call":["Parser Source Range  new ","range begin_pos + ","range begin_pos ","range source_buffer ","src [] =~ ","src [] ","range end_pos ","range source_buffer source ","range source_buffer source  [] =~ ","range source_buffer source  [] ","range range end_pos  "]}," Rubocop Cop Style SpaceInsideHashLiteralBraces space_range":{"type":"method","name":"space_range","children":[],"call":[" range_of_space_to_the_left "," range_of_space_to_the_right ","token_range source == ","token_range source "]}," Rubocop Cop Style SpaceInsideHashLiteralBraces autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector insert_before ","corrector insert_after ","corrector remove ","range source "," lambda ","corrector replace "]}," Rubocop Cop Style SpaceInsideHashLiteralBraces message":{"type":"method","name":"message","children":[],"call":[" sprintf ","brace source "," format "]}," Rubocop Cop Style SpaceInsideHashLiteralBraces offence?":{"type":"method","name":"offence?","children":[],"call":["has_space ! "," space_between? "," space_between?  ! "]}," Rubocop Cop Style SpaceInside autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector remove "," lambda "]}," Rubocop Cop Style SpaceBeforeModifierKeyword autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector insert_before ","node loc keyword ","node loc "," lambda "]}," Rubocop Cop Style SpaceAroundOperators autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector insert_after ","range source =~ ","range source ","corrector insert_before ","corrector replace "," lambda ","range source strip "]}," Rubocop Cop Style SpaceAroundOperators space_on_any_side?":{"type":"method","name":"space_on_any_side?","children":[],"call":[" space_between? "]}," Rubocop Cop Style SpaceAroundOperators space_on_both_sides?":{"type":"method","name":"space_on_both_sides?","children":[],"call":[" space_between? "]}," Rubocop Cop Style SpaceAroundOperators token_with_surrounding_space":{"type":"method","name":"token_with_surrounding_space","children":[],"call":["Parser Source Range  new ","@processed_source buffer ","src [] =~ ","src [] ","token pos end_pos ","token pos ","begin_pos - ","token pos begin_pos ","@processed_source buffer source ","@processed_source buffer source  [] =~ ","@processed_source buffer source  [] ","token pos token pos end_pos  ","token pos begin_pos  - ","token pos token pos begin_pos  "]}," Rubocop Cop Style SpaceAroundEqualsInParameterDefault autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector insert_after ","corrector insert_before "," lambda ","corrector replace "," style == "," style "]}," Rubocop Cop Style SpaceAroundBlockBraces autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector insert_after ","corrector remove ","corrector insert_before ","range source "," lambda ","corrector replace "]}," Rubocop Cop Style SpaceAroundBlockBraces problem_details":{"type":"method","name":"problem_details","children":[],"call":["t2 text == ","t2 text ","t1 text == ","t1 text "]}," Rubocop Cop Style SpaceAroundBlockBraces check_empty_braces":{"type":"method","name":"check_empty_braces","children":[],"call":[" check_no_space_inside_braces "," check_space_inside_braces "," cop_config [] == "," cop_config [] "," cop_config "]}," Rubocop Cop Style SpaceAfterMethodName autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector remove "," lambda "]}," Rubocop Cop Style SpaceAfterControlKeyword autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector insert_after ","node loc keyword ","node loc "," lambda "]}," Rubocop Cop Style SpaceAfterCommaEtc autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector insert_after ","token pos "," lambda "]}," Rubocop Cop Style LeadingCommentSpace autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector insert_after "," lambda ","Parser Source Range  new ","b + ","expr source_buffer ","expr begin_pos ","comment loc expression ","comment loc "," lamexpr begin_pos da ","expr begin_pos  + ","expr source_expr begin_pos uffer ","comment loc expression  source_buffer ","expr expr begin_pos egin_pos ","comment loc expression  begin_pos ","comment loc comment loc expression ession "]}," Rubocop Cop Style HashSyntax check":{"type":"method","name":"check","children":[],"call":[" convention ","pair loc expression begin join ","pair loc operator ","pair loc ","pair loc expression begin ","pair loc expression ","pair loc operator is? ","pairs each "," add_offence "," correct_style_detected "," opposite_style_detected "," add_offense "]}," Rubocop Cop Style HashSyntax space_before_operator?":{"type":"method","name":"space_before_operator?","children":[],"call":["op begin_pos - - > ","op begin_pos - - ","key source length ","key source ","op begin_pos - ","key begin_pos ","op begin_pos "]}," Rubocop Cop Style FinalNewline autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector insert_after "," lambda "]}," Rubocop Cop Style FavorModifier conditional_length":{"type":"method","name":"conditional_length","children":[],"call":["node loc expression size ","node loc expression ","node loc ","conditional_node children first ","conditional_node children ","conditional_node type == ","conditional_node type ","conditional_node children first  loc expression size ","conditional_node children first  loc expression ","conditional_node children first  loc ","conditional_conditional_node children first  children first ","conditional_conditional_node children first  children ","conditional_conditional_node children first  type == ","conditional_conditional_node children first  type "]}," Rubocop Cop Style EmptyLinesAroundBody check_source":{"type":"method","name":"check_source","children":[],"call":[" convention "," source_range "," processed_source [] ","end_line - "," processed_source "," processed_source buffer "," processed_source lines [] blank? "," processed_source lines [] "," processed_source lines "," add_offence "," processed_source lines [] empty? "," check_line ","end_line - == "," source_ source_range  "]}," Rubocop Cop Style EmptyLinesAroundBody check_node":{"type":"method","name":"check_node","children":[],"call":[" check_source ","start_line == ","node loc end line ","node loc end ","node loc ","node loc keyword line ","node loc keyword ","node loc keyword line  == "]}," Rubocop Cop Style EmptyLinesAroundBody on_defs":{"type":"method","name":"on_defs","children":[],"call":[" check_node "]}," Rubocop Cop Style EmptyLinesAroundBody on_def":{"type":"method","name":"on_def","children":[],"call":[" check_node "]}," Rubocop Cop Style EmptyLinesAroundBody on_sclass":{"type":"method","name":"on_sclass","children":[],"call":[" check_node "," check "]}," Rubocop Cop Style EmptyLinesAroundBody on_module":{"type":"method","name":"on_module","children":[],"call":[" check_node "," check "]}," Rubocop Cop Style EmptyLinesAroundBody on_class":{"type":"method","name":"on_class","children":[],"call":[" check_node "," check "]}," Rubocop Cop Style EmptyLinesAroundAccessModifier modifier_node?":{"type":"method","name":"modifier_node?","children":[],"call":["(const nil :PRIVATE_NODE) include? "]}," Rubocop Cop Style EmptyLinesAroundAccessModifier message":{"type":"method","name":"message","children":[],"call":[" format ","node loc selector source ","node loc selector ","node loc "]}," Rubocop Cop Style EmptyLinesAroundAccessModifier class_def?":{"type":"method","name":"class_def?","children":[],"call":["line start_with? ","(str \"class\") any? "]}," Rubocop Cop Style EmptyLinesAroundAccessModifier empty_lines_around?":{"type":"method","name":"empty_lines_around?","children":[],"call":["next_line blank? ","previous_line blank? "," class_def? ","previous_line lstrip "," processed_source [] "," processed_source ","send_line - ","node loc line ","node loc "," processed_source []  blank? "," processed_source []  lstrip ","node loc line  - "]}," Rubocop Cop Style EmptyLinesAroundAccessModifier on_send":{"type":"method","name":"on_send","children":[],"call":[" convention "," empty_lines_around? "," modifier_node? "," add_offence "," add_offense "]}," Rubocop Cop Style CyclomaticComplexity check":{"type":"method","name":"check","children":[],"call":[" convention "," sprintf ","complexity > "," cop_config [] "," cop_config "," on_node "," max= "," add_offence "," add_offense "," format ","  cop_config [] = "]}," Rubocop Cop Style CyclomaticComplexity on_defs":{"type":"method","name":"on_defs","children":[],"call":[" check "]}," Rubocop Cop Style CyclomaticComplexity on_def":{"type":"method","name":"on_def","children":[],"call":[" check "]}," Rubocop Cop Style AutocorrectAlignment each_line":{"type":"method","name":"each_line","children":[],"call":["line length ","expr begin_pos + ","expr begin_pos ","expr source each_line ","expr source "]}," Rubocop Cop Style AutocorrectAlignment remove":{"type":"method","name":"remove","children":[],"call":["range source =~ ","range source ","Parser Source Range  new ","range end_pos + ","range end_pos ","range begin_pos + ","range begin_pos ","range source_buffer ","corrector remove ","StringIO  new ","Parser Source Range  new  source =~ ","Parser Source Range  new  source ","Parser Source Range  new  end_pos + ","Parser Source Range  new  end_pos ","Parser Source Range  new  begin_pos + ","Parser Source Range  new  begin_pos ","Parser Source Range  new  source_buffer "]}," Rubocop Cop Style AlignHash adjust":{"type":"method","name":"adjust","children":[],"call":["corrector remove ","Parser Source Range  new ","range begin_pos ","range begin_pos - ","delta abs ","range source_buffer ","delta < ","corrector insert_before ","  * ","delta > ","Parser Source Range  new  begin_pos ","Parser Source Range  new  begin_pos - ","Parser Source Range  new  source_buffer "]}," Rubocop Cop Style AlignHash new_alignment":{"type":"method","name":"new_alignment","children":[],"call":[" fail "," cop_config [] "," cop_config ","SeparatorAlignment  new ","TableAlignment  new ","KeyAlignment  new "]}," Rubocop Cop Style AlignHash alignment_for":{"type":"method","name":"alignment_for","children":[],"call":["pair loc operator is? ","pair loc operator ","pair loc "]}," Rubocop Cop Style AlignHash SeparatorAlignment value_delta":{"type":"method","name":"value_delta","children":[],"call":["first_value loc column - ","current_value loc column ","current_value loc ","first_value loc column ","first_value loc "]}," Rubocop Cop Style AlignHash SeparatorAlignment separator_delta":{"type":"method","name":"separator_delta","children":[],"call":["first_pair loc operator column - - ","first_pair loc operator column - ","current_separator column ","first_pair loc operator column ","first_pair loc operator ","first_pair loc ","current_separator is? "]}," Rubocop Cop Style AlignHash SeparatorAlignment key_end_column":{"type":"method","name":"key_end_column","children":[],"call":["key loc column + ","key loc expression source length ","key loc expression source ","key loc expression ","key loc ","key loc column "]}," Rubocop Cop Style AlignHash SeparatorAlignment key_delta":{"type":"method","name":"key_delta","children":[],"call":[" key_end_column - "," key_end_column "]}," Rubocop Cop Style AlignHash SeparatorAlignment deltas_for_first_pair":{"type":"method","name":"deltas_for_first_pair","children":[],"call":[]}," Rubocop Cop Style AlignHash TableAlignment spaced_separator":{"type":"method","name":"spaced_separator","children":[],"call":["node loc operator is? ","node loc operator ","node loc "]}," Rubocop Cop Style AlignHash TableAlignment value_delta":{"type":"method","name":"value_delta","children":[],"call":["correct_value_column - ","current_value loc column ","current_value loc ","first_key loc column + + ","first_key loc column + "," spaced_separator length "," spaced_separator ","first_key loc column ","first_key loc ","first_key loc column + +  - "]}," Rubocop Cop Style AlignHash TableAlignment separator_delta":{"type":"method","name":"separator_delta","children":[],"call":["first_pair loc column + + - - ","first_pair loc column + + - ","current_separator column ","first_pair loc column + + ","first_pair loc column + ","first_pair loc column ","first_pair loc ","current_separator is? "]}," Rubocop Cop Style AlignHash TableAlignment key_delta":{"type":"method","name":"key_delta","children":[],"call":["first_pair loc column - ","current_pair loc column ","current_pair loc ","first_pair loc column ","first_pair loc "]}," Rubocop Cop Style AlignHash TableAlignment deltas_for_first_pair":{"type":"method","name":"deltas_for_first_pair","children":[],"call":[" value_delta - "," value_delta "," separator_delta ","first_pair loc operator ","first_pair loc ","key_widths max ","key loc expression source length ","key loc expression source ","key loc expression ","key loc ","node children map ","node children ","  separator_delta  "]}," Rubocop Cop Style AlignHash AlignmentOfValues all_have_same_sparator?":{"type":"method","name":"all_have_same_sparator?","children":[],"call":["pair loc operator is? ","pair loc operator ","pair loc ","node children [] all? ","node children [] ","node children ","node children first loc operator source ","node children first loc operator ","node children first loc ","node children first "]}," Rubocop Cop Style AlignHash AlignmentOfValues any_pairs_on_the_same_line?":{"type":"method","name":"any_pairs_on_the_same_line?","children":[],"call":["lines_of_the_children uniq size < ","lines_of_the_children size ","lines_of_the_children uniq size ","lines_of_the_children uniq ","key loc line ","key loc ","node children map ","node children "]}," Rubocop Cop Style AlignHash AlignmentOfValues deltas":{"type":"method","name":"deltas","children":[],"call":[" value_delta - - "," value_delta - "," value_delta "," separator_delta ","current_pair loc operator ","current_pair loc "," key_delta ","  value_delta - -  - - ","  value_delta - -  - ","  value_delta - -  ","  separator_delta  ","  key_delta  "]}," Rubocop Cop Style AlignHash AlignmentOfValues checkable_layout":{"type":"method","name":"checkable_layout","children":[],"call":[" all_have_same_sparator? "," any_pairs_on_the_same_line? ! "," any_pairs_on_the_same_line? "]}," Rubocop Cop Style AlignHash KeyAlignment deltas":{"type":"method","name":"deltas","children":[],"call":["first_pair loc column - ","current_pair loc column ","current_pair loc ","first_pair loc column ","first_pair loc ","current_pair loc line == ","prev_pair loc line ","prev_pair loc ","current_pair loc line "]}," Rubocop Cop Style AlignHash KeyAlignment deltas_for_first_pair":{"type":"method","name":"deltas_for_first_pair","children":[],"call":[]}," Rubocop Cop Style AlignHash KeyAlignment checkable_layout":{"type":"method","name":"checkable_layout","children":[],"call":[]}," Rubocop Cop Style Alias on_block":{"type":"method","name":"on_block","children":[],"call":[" ignore_node "," on_node ","method_name == "]}," Rubocop Cop Style AccessModifierIndentation modifier_node?":{"type":"method","name":"modifier_node?","children":[],"call":["(const nil :PRIVATE_NODE) include? "]}," Rubocop Cop Style AccessModifierIndentation expected_indent_offset":{"type":"method","name":"expected_indent_offset","children":[],"call":[" fail "," cop_config [] downcase "," cop_config [] "," cop_config "," style == "," style "]}," Rubocop Cop Style AccessModifierIndentation class_constructor?":{"type":"method","name":"class_constructor?","children":[],"call":["(str \"Class\") include? ","Util  const_name ","method_name == ","block_node children first ","block_node children "]}," Rubocop Cop Style AccessModifierIndentation message":{"type":"method","name":"message","children":[],"call":[" format ","node loc selector source ","node loc selector ","node loc "," cop_config [] capitalize "," cop_config [] "," cop_config "," style capitalize "," style "]}," Rubocop Cop Style AccessModifierIndentation investigate":{"type":"method","name":"investigate","children":[],"call":[" convention ","send_start_col != ","class_start_col + "," expected_indent_offset ","send_node loc expression column ","send_node loc expression ","send_node loc "," modifier_node? "," on_node ","class_node children compact each ","class_node children compact ","class_node children ","class_node loc expression column ","class_node loc expression ","class_node loc "," class_constructor? ! "," class_constructor? ","class_node type == ","class_node type ","processed_source ast "," check "," class modifier_node? "," class ","send_node loc expression column  != ","class_node loc expression column  + ","processed_source processed_source ast  "]}," Rubocop Cop Rails Output ignore_paths":{"type":"method","name":"ignore_paths","children":[],"call":[" cop_config [] "," cop_config "]}," Rubocop Cop Rails Output matches_blacklist?":{"type":"method","name":"matches_blacklist?","children":[],"call":["source buffer name =~ ","source buffer name ","source buffer "," ignore_paths any? "," ignore_paths "]}," Rubocop Cop Rails Output on_send":{"type":"method","name":"on_send","children":[],"call":[" convention ","BLACKLIST  include? ","receiver nil? "," matches_blacklist? "," processed_source "," add_offence "," add_offense "]}," Rubocop Cop Lint ParenthesesAsGroupedExpression spaces_before_left_parenthesis":{"type":"method","name":"spaces_before_left_parenthesis","children":[],"call":["match captures [] length ","match captures [] ","match captures ","without_receiver match ","Regexp  escape ","node loc expression source [] ","node loc expression source ","node loc expression ","node loc ","receiver loc expression source length ","receiver loc expression source ","receiver loc expression ","receiver loc ","without_receiver match  captures [] length ","without_receiver match  captures [] ","without_receiver match  captures ","without_receiver without_receiver match  ","node loc expression source []  match "]}," Rubocop Cop Lint BlockAlignment alt_start_msg":{"type":"method","name":"alt_start_msg","children":[],"call":["do_loc line ","match [] ","start_loc column == ","start_loc column ","start_loc line == ","start_loc line "]}," Rubocop Cop Cop range_with_surrounding_space":{"type":"method","name":"range_with_surrounding_space","children":[],"call":["Parser Source Range  new ","@processed_source buffer ","src [] =~ ","src [] ","range end_pos ","begin_pos - ","range begin_pos ","side == ","@processed_source buffer source ","@processed_source buffer source  [] =~ ","@processed_source buffer source  [] ","range range end_pos  ","range begin_pos  - ","range range begin_pos  "]}," Rubocop Cop Cop non_rails":{"type":"method","name":"non_rails","children":[],"call":[]}," Rubocop Cop CopStore without_type":{"type":"method","name":"without_type","children":[],"call":["c cop_type == ","c cop_type "," reject "]}," Rubocop CLI act_on_options":{"type":"method","name":"act_on_options","children":[],"call":[" fail ","(str \"Remove \") + ","config contains_auto_generated_config ","@config_store for "," target_finder find each "," target_finder find "," target_finder ","@options [] ","ConfigLoader  debug= "," exit "," puts ","Rubocop Version  version ","Sickill Rainbow  enabled= ","@config_store set_options_config "," print_available_cops ","@config_store options_config= ","Rainbow  enabled= ","ConfigLoader  auto_gen_config= "," handle_exiting_options ","@config_store for  contains_auto_generated_@config_store for  ","@@config_store for _store for ","@@config_store for _store set_options_@config_store for  ","@@config_store for _store options_@config_store for = ","ConfigLoader  auto_gen_@config_store for = "]}," Rubocop CLI process_files":{"type":"method","name":"process_files","children":[],"call":[" formatter_set close_output_files "," formatter_set "," formatter_set finished ","inspected_files freeze "," formatter_set file_finished ","offences freeze ","inspected_files << ","offences empty? "," inspect_file "," formatter_set file_started "," puts ","@options [] "," wants_to_quit? ","target_files each "," formatter_set started ","target_files each freeze "," inspect_file  freeze "," inspect_file  empty? "]}," Rubocop FileInspector formatter_set":{"type":"method","name":"formatter_set","children":[],"call":[" exit ","$stderr puts ","error backtrace "," warn ","error message ","set add_formatter ","pairs each ","@options [] ","Formatter FormatterSet  new ","Formatter FormatterSet  new  add_formatter "]}," Rubocop FileInspector run_rails_cops?":{"type":"method","name":"run_rails_cops?","children":[],"call":["config [] [] ","config [] ","@options [] "]}," Rubocop FileInspector mobilized_cop_classes":{"type":"method","name":"mobilized_cop_classes","children":[],"call":["cop_classes select! ","@options [] ","cop_classes reject! "," run_rails_cops? ","c cop_name == ","c cop_name ","Cop Cop  all ","@mobilized_cop_classes [] ","config object_id ","c lint? ","@options [] include? ","Cop Cop  all  select! ","Cop Cop  all  reject! ","@mobilized_Cop Cop  all  [] "]}," Rubocop FileInspector inspect_file":{"type":"method","name":"inspect_file","children":[],"call":["@errors concat ","team errors ","team inspect_file ","Cop Team  new "," mobilized_cop_classes ","config_store for ","team updated_source_file? ","processed_source file_path ","Cop Team  new  errors ","Cop Team  new  inspect_file ","config_store for _store for ","Cop Team  new  updated_source_file? "]}," Rubocop FileInspector display_error_summary":{"type":"method","name":"display_error_summary","children":[],"call":[" warn ","Rubocop Version  version ","@errors each ","(str \"\\n\") color ","@errors count ","@errors count > ","@errors empty? "]}," Rubocop FileInspector process_files":{"type":"method","name":"process_files","children":[],"call":[" formatter_set close_output_files "," formatter_set "," formatter_set finished ","inspected_files freeze "," formatter_set file_finished ","offences freeze ","inspected_files << ","offences empty? "," inspect_file "," formatter_set file_started "," puts ","@options [] ","target_files each "," formatter_set started ","target_files each freeze "," process_file ","offenses empty? ","o severity >= "," fail_level ","o severity ","offenses any? "," inspect_file  freeze "," process_file  freeze "," inspect_file  empty? "," process_file  empty? "," process_file  any? "]}," Rubocop FileInspector initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rubocop Cop Util first_part_of_call_chain":{"type":"method","name":"first_part_of_call_chain","children":[],"call":["node type "]}," Rubocop Cop Util range_with_surrounding_space":{"type":"method","name":"range_with_surrounding_space","children":[],"call":["Parser Source Range  new ","@processed_source buffer ","src [] == ","src [] ","src [] =~ ","range end_pos ","begin_pos - ","range begin_pos ","side == ","@processed_source buffer source ","@processed_source buffer source  [] == ","@processed_source buffer source  [] ","@processed_source buffer source  [] =~ ","range range end_pos  ","range begin_pos  - ","range range begin_pos  "]}," Rubocop Cop Util source_range":{"type":"method","name":"source_range","children":[],"call":["Parser Source Range  new ","begin_pos + ","(send\n  (lvar :preceding_lines) :reduce\n  (int 0)) + ","a + + ","a + ","e length ","preceding_lines reduce ","(send\n  (lvar :preceding_lines) :reduce\n  (int 0)) +  + "]}," Rubocop Cop Util on_node":{"type":"method","name":"on_node","children":[],"call":[" on_node ","elem is_a? ","sexp children each ","sexp children "," Array include? ","sexp type "," Array "]}," Rubocop Cop Util lambda_or_proc?":{"type":"method","name":"lambda_or_proc?","children":[],"call":[" proc? "," lambda? "]}," Rubocop Cop Util proc?":{"type":"method","name":"proc?","children":[],"call":["send_node == "," command? "," fail ","node type == ","node type "]}," Rubocop Cop Util lambda?":{"type":"method","name":"lambda?","children":[],"call":[" command? "," fail ","node type == ","node type "]}," Rubocop Cop Util command?":{"type":"method","name":"command?","children":[],"call":["method_name == ","receiver ! ","node type == ","node type "]}," Rubocop Cop Style SpaceAroundOperators check_operator":{"type":"method","name":"check_operator","children":[],"call":[" add_offence ","Surrounding space missing for operator + ","op source ","with_space source !~ ","with_space source ","with_space is? ","op is? "," range_with_surrounding_space "," add_offense "," range_with_surrounding_space  source !~ "," range_with_surrounding_space  source "," range_with_surrounding_space  is? "]}," Rubocop Cop Style SpaceAroundOperators check":{"type":"method","name":"check","children":[],"call":[" check_operator ","node loc operator ","node loc "]}," Rubocop Cop Style SpaceAroundOperators called_with_dot?":{"type":"method","name":"called_with_dot?","children":[],"call":["node loc dot ! ! ","node loc dot ! ","node loc dot ","node loc "]}," Rubocop Cop Style SpaceAroundOperators unary_operation?":{"type":"method","name":"unary_operation?","children":[],"call":["whole begin_pos == ","selector begin_pos ","whole begin_pos "," operator? ","node loc selector ","node loc ","node loc expression "]}," Rubocop Cop Style SpaceAroundOperators operator?":{"type":"method","name":"operator?","children":[],"call":["range source !~ ","range source "]}," Rubocop Cop Style SpaceAroundOperators on_send":{"type":"method","name":"on_send","children":[],"call":[" check_operator "," operator? ","node loc selector ","node loc "," called_with_dot? ! "," called_with_dot? "," unary_operation? ! "," unary_operation? "," check ","node loc operator "," check_node loc selector erator "," node loc selector erator? "," unary_node loc selector eration? ! "," unary_node loc selector eration? ","node loc node loc selector erator "]}," Rubocop Cop Style SpaceAroundOperators on_resbody":{"type":"method","name":"on_resbody","children":[],"call":[" check_operator ","node loc assoc ","node loc "]}," Rubocop Cop Style SpaceAroundOperators on_if":{"type":"method","name":"on_if","children":[],"call":[" check_operator ","node loc colon ","node loc ","node loc question ","node loc respond_to? "]}," Rubocop Cop Style SpaceAroundOperators on_pair":{"type":"method","name":"on_pair","children":[],"call":[" check ","node loc operator is? ","node loc operator ","node loc "]}," Rubocop Cop Style SpaceAroundBlockBraces style_for_block_parameters":{"type":"method","name":"style_for_block_parameters","children":[],"call":[" cop_config [] "," cop_config "]}," Rubocop Cop Style SpaceAroundBlockBraces style_for_empty_braces":{"type":"method","name":"style_for_empty_braces","children":[],"call":[" fail "," cop_config [] "," cop_config "]}," Rubocop Cop Style SpaceAroundBlockBraces style_for_inside_braces":{"type":"method","name":"style_for_inside_braces","children":[],"call":[" style == "," style "]}," Rubocop Cop Style SpaceAroundBlockBraces available_styles":{"type":"method","name":"available_styles","children":[],"call":[]}," Rubocop Cop Style SpaceAroundBlockBraces offence":{"type":"method","name":"offence","children":[],"call":[" add_offence ","Parser Source Range  new "," block_given? "]}," Rubocop Cop Style SpaceAroundBlockBraces space":{"type":"method","name":"space","children":[],"call":[" offence ","specific_style == "," correct_style_detected "," opposite_style_detected "," style == "," style "]}," Rubocop Cop Style SpaceAroundBlockBraces no_space":{"type":"method","name":"no_space","children":[],"call":[" offence ","specific_style == "," correct_style_detected "," opposite_style_detected "," style == "," style "]}," Rubocop Cop Style SpaceAroundBlockBraces space_inside_right_brace":{"type":"method","name":"space_inside_right_brace","children":[],"call":[" space ","brace_with_space end_pos - ","brace_with_space end_pos ","brace_with_space begin_pos "," style_for_inside_braces "," range_with_surrounding_space "," range_with_surrounding_space  end_pos - "," range_with_surrounding_space  end_pos "," range_with_surrounding_space  begin_pos "]}," Rubocop Cop Style SpaceAroundBlockBraces space_inside_left_brace":{"type":"method","name":"space_inside_left_brace","children":[],"call":[" space ","brace_with_space end_pos ","brace_with_space begin_pos + ","brace_with_space begin_pos "," style_for_inside_braces "," range_with_surrounding_space ","pipe begin_pos ","left_brace end_pos "," style_for_block_parameters "," offence "," cop_config [] "," cop_config "," range_with_surrounding_space  end_pos "," range_with_surrounding_space  begin_pos + "," range_with_surrounding_space  begin_pos "]}," Rubocop Cop Style SpaceAroundBlockBraces no_space_inside_left_brace":{"type":"method","name":"no_space_inside_left_brace","children":[],"call":[" no_space ","left_brace end_pos + ","left_brace end_pos "," style_for_inside_braces ","pipe end_pos ","left_brace begin_pos "," style_for_block_parameters ","left_brace end_pos == ","pipe begin_pos "," offence "," cop_config [] "," cop_config "]}," Rubocop Cop Style SpaceAroundBlockBraces braces_with_contents_inside":{"type":"method","name":"braces_with_contents_inside","children":[],"call":[" space_inside_right_brace "," no_space ","right_brace end_pos ","right_brace begin_pos "," style_for_inside_braces ","inner =~ "," space_inside_left_brace "," no_space_inside_left_brace ","node loc expression source_buffer ","node loc expression ","node loc ","args loc begin ","args loc ","node loc end ","node loc begin "]}," Rubocop Cop Style SpaceAroundBlockBraces check_inside":{"type":"method","name":"check_inside","children":[],"call":[" space ","range end_pos ","range begin_pos "," style_for_empty_braces "," braces_with_contents_inside ","inner =~ ","range source ","Parser Source Range  new ","right_brace begin_pos ","left_brace end_pos "," no_space ","right_brace end_pos ","left_brace begin_pos ","left_brace end_pos == ","node loc expression source_buffer ","node loc expression ","node loc "," offence "," style_for_empty_braces == ","Parser Source Range  new  end_pos ","Parser Source Range  new  begin_pos ","range source  =~ ","Parser Source Range  new  source "]}," Rubocop Cop Style SpaceAroundBlockBraces check_outside":{"type":"method","name":"check_outside","children":[],"call":[" add_offence "," range_with_surrounding_space source start_with? "," range_with_surrounding_space source "," range_with_surrounding_space "]}," Rubocop Cop Style SpaceAroundBlockBraces on_block":{"type":"method","name":"on_block","children":[],"call":[" check_inside "," check_outside ","node loc end ","node loc ","node loc begin ","Util  block_length > ","Util  block_length "," config for_cop [] "," config for_cop "," config ","node loc begin is? "]}," Rubocop Cop Style SingleLineBlockParams args_match?":{"type":"method","name":"args_match?","children":[],"call":["actual_args == "," target_args map "," target_args ","a to_a ","args flat_map "]}," Rubocop Cop Style SingleLineBlockParams target_args":{"type":"method","name":"target_args","children":[],"call":["method_hash [] ","m keys first == ","m keys first ","m keys "," methods find "," methods ","method_name to_s ","method_name to_s  to_s "]}," Rubocop Cop Style SingleLineBlockParams method_names":{"type":"method","name":"method_names","children":[],"call":["e keys first to_sym ","e keys first ","e keys "," methods map "," methods "]}," Rubocop Cop Style SingleLineBlockParams methods":{"type":"method","name":"methods","children":[],"call":[" cop_config [] "," cop_config "]}," Rubocop Cop Style SingleLineBlockParams message":{"type":"method","name":"message","children":[],"call":[" target_args join "," target_args "," target_ target_args join  join "," target_ target_args join  "]}," Rubocop Cop Style SingleLineBlockParams on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offence "," message "," args_match? ","n type == ","n type ","args all? "," method_names include? "," method_names ","Util  block_length == ","Util  block_length "," add_offense "]}," Rubocop Cop Style Semicolon convention_on":{"type":"method","name":"convention_on","children":[],"call":[" add_offence "," source_range ","@processed_source [] ","line - ","@processed_source buffer "," add_offense "," source_ source_range  "]}," Rubocop Cop Style Semicolon on_begin":{"type":"method","name":"on_begin","children":[],"call":[" convention_on ","@processed_source [] index ","@processed_source [] ","line - ","expr_on_line size > ","expr_on_line size ","lines each ","exprs_lines group_by ","e loc expression line ","e loc expression ","e loc ","exprs map ","exprs size < ","exprs size ","node children "," cop_config [] "," cop_config ","last_on_line ! ","node children _lines group_by ","node children  map ","node children  size < ","node children  size "]}," Rubocop Cop Style RescueModifier check":{"type":"method","name":"check","children":[],"call":[" ignore_node ","first_child type == ","first_child type ","body children first ","body children ","body type ","body children first  type == ","body children first  type "]}," Rubocop Cop Style RedundantSelf constant_name?":{"type":"method","name":"constant_name?","children":[],"call":["method_name match "]}," Rubocop Cop Style RedundantSelf on_args":{"type":"method","name":"on_args","children":[],"call":[" on_argument ","node children each ","node children "]}," Rubocop Cop Style PredicateName prefix_blacklist":{"type":"method","name":"prefix_blacklist","children":[],"call":[" cop_config [] "," cop_config "]}," Rubocop Cop Style PredicateName message":{"type":"method","name":"message","children":[],"call":["new_name << ","method_name end_with? ","method_name sub ","method_name sub  << "]}," Rubocop Cop Style PredicateName check":{"type":"method","name":"check","children":[],"call":[" add_offence "," message ","method_name start_with? "," prefix_blacklist each "," prefix_blacklist ","method_name to_s ","method_name to_s start_with? "," add_offense "]}," Rubocop Cop Style PredicateName on_defs":{"type":"method","name":"on_defs","children":[],"call":[" check ","method_name to_s "]}," Rubocop Cop Style PredicateName on_def":{"type":"method","name":"on_def","children":[],"call":[" check ","method_name to_s "]}," Rubocop Cop Style ParenthesesAroundCondition autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector remove ","node loc end ","node loc ","node loc begin "," lambda "]}," Rubocop Cop Style MultilineIfThen end_position":{"type":"method","name":"end_position","children":[],"call":["node loc expression end end_pos ","node loc expression end ","node loc expression ","node loc ","conditional_node children first ","conditional_node children ","conditional_node type == ","conditional_node type ","conditional_node loc expression end end_pos ","conditional_node loc expression end ","conditional_node loc expression ","conditional_node loc ","conditional_node children first  loc expression end end_pos ","conditional_node children first  loc expression end ","conditional_node children first  loc expression ","conditional_node children first  loc ","conditional_conditional_node children first  children first ","conditional_conditional_node children first  children ","conditional_conditional_node children first  type == ","conditional_conditional_node children first  type ","conditional_conditional_node children first  loc expression end end_pos ","conditional_conditional_node children first  loc expression end ","conditional_conditional_node children first  loc expression ","conditional_conditional_node children first  loc "]}," Rubocop Cop Style MethodLength code_length":{"type":"method","name":"code_length","children":[],"call":["lines size "," irrelevant_line ","lines reject! ","node loc expression source lines to_a [] ","node loc expression source lines to_a ","node loc expression source lines ","node loc expression source ","node loc expression ","node loc "]}," Rubocop Cop Style MethodLength message":{"type":"method","name":"message","children":[],"call":[]}," Rubocop Cop Style MethodDefParentheses parentheses?":{"type":"method","name":"parentheses?","children":[],"call":["args loc begin ","args loc "]}," Rubocop Cop Style MethodDefParentheses arguments?":{"type":"method","name":"arguments?","children":[],"call":["args children size > ","args children size ","args children "]}," Rubocop Cop Style MethodDefParentheses autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector remove ","node loc end ","node loc ","corrector replace ","node loc begin "," style == "," style ","expression source sub ","expression source ","node loc expression ","corrector insert_after ","node children [] loc expression ","node children [] loc ","node children [] ","node children "," lambda "," args_node loc expression "," args_node loc "," args_node ","Parser Source Range  new ","args_expr begin_pos ","args_with_space begin_pos ","args_expr source_buffer "," range_with_surrounding_space ","node loc expression  source sub ","node loc expression  source ","node loc node loc expression  ","node children [] loc node loc expression  "," args_node loc node loc expression  "," args_node loc expression  begin_pos "," range_with_surrounding_space  begin_pos "," args_node loc expression  source_buffer "]}," Rubocop Cop Style MethodDefParentheses check":{"type":"method","name":"check","children":[],"call":[" add_offence "," parentheses? "," style == "," style ","args loc expression ","args loc "," parentheses? ! "," arguments? "," correct_style_detected "," opposite_style_detected "," add_offense "]}," Rubocop Cop Style IndentationWidth check_consistent":{"type":"method","name":"check_consistent","children":[],"call":[" add_offence ","Parser Source Range  new ","expr source_buffer ","end_pos - ","expr begin_pos ","expr source_line =~ ","expr source_line ","child2 expression ","child2 column != ","child1 column ","child2 column ","child2 line > ","child1 line ","child2 line ","children_to_check map each_cons ","children_to_check map ","AccessModifierIndentation  modifier_node? ","node children reject ","node children ","child2 expression  source_buffer ","expr begin_pos  - ","expr end_pos -  ","child2 expression  begin_pos ","child2 expression  source_line =~ ","child2 expression  source_line ","child2 child2 expression ession "]}," Rubocop Cop Style IndentationWidth starts_with_access_modifier?":{"type":"method","name":"starts_with_access_modifier?","children":[],"call":["AccessModifierIndentation  modifier_node? ","body_node children first ","body_node children ","body_node type == ","body_node type "]}," Rubocop Cop Style IndentationWidth check_assignment":{"type":"method","name":"check_assignment","children":[],"call":[" ignore_node "," on_if ","rhs loc column - ","node loc column ","node loc ","rhs loc column ","rhs loc ","rhs type == ","rhs type "," first_part_of_call_chain "," on_while ","style == ","end_alignment_config [] "," config for_cop "," config ","end_config [] "," first_part_of_call_chain  loc column - "," first_part_of_call_chain  loc column "," first_part_of_call_chain  loc "," first_part_of_call_chain  type == "," first_part_of_call_chain  type ","end_alignment_config []  == ","end_config []  == "," config for_cop  [] "]}," Rubocop Cop Style IndentationWidth check":{"type":"method","name":"check","children":[],"call":[" check_indentation ","node loc keyword ","node loc "," ignored_node? "]}," Rubocop Cop Style IndentationWidth on_begin":{"type":"method","name":"on_begin","children":[],"call":[" check_consistent "]}," Rubocop Cop IfNode if_else?":{"type":"method","name":"if_else?","children":[],"call":["node loc else ","node loc ","node loc respond_to? "]}," Rubocop Cop IfNode elsif?":{"type":"method","name":"elsif?","children":[],"call":["node loc keyword is? ","node loc keyword ","node loc ","node loc respond_to? "]}," Rubocop Cop IfNode ternary_op?":{"type":"method","name":"ternary_op?","children":[],"call":["node loc respond_to? ","node loc "]}," Rubocop Cop IfNode modifier_if?":{"type":"method","name":"modifier_if?","children":[],"call":["node loc end nil? ","node loc end ","node loc "]}," Rubocop Cop Style For on_block":{"type":"method","name":"on_block","children":[],"call":[" correct_style_detected "," opposite_style_detected "," add_offence ","Parser Source Range  new ","end_pos - ","each length "," processed_source buffer "," processed_source ","method loc expression end_pos ","method loc expression ","method loc "," style == "," style ","args empty? ","method_name == ","method type == ","method type "," block_length == "," block_length "," add_offense ","method loc expression end_pos  - ","method loc expression method loc expression end_pos  "]}," Rubocop Cop Style FlipFlop on_eflipflop":{"type":"method","name":"on_eflipflop","children":[],"call":[" add_offence "," add_offense "]}," Rubocop Cop Style FlipFlop on_iflipflop":{"type":"method","name":"on_iflipflop","children":[],"call":[" add_offence "," add_offense "]}," Rubocop Cop Style EmptyLinesAroundBody check":{"type":"method","name":"check","children":[],"call":[" check_source ","start_line == ","node loc end line ","node loc end ","node loc ","node loc keyword line ","node loc keyword ","node loc keyword line  == "]}," Rubocop Cop Style EmptyLinesAroundBody autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector remove "," lambda "]}," Rubocop Cop Style EmptyLines autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector remove "," lambda "]}," Rubocop Cop Style DotPosition same_line?":{"type":"method","name":"same_line?","children":[],"call":["node loc dot line == ","node loc line ","node loc ","node loc dot line ","node loc dot "]}," Rubocop Cop Style DefWithParentheses check":{"type":"method","name":"check","children":[],"call":[" add_offence ","args loc begin ","args loc ","args children == ","args children ","start_line == ","node loc end line ","node loc end ","node loc ","node loc keyword line ","node loc keyword "," add_offense ","node loc keyword line  == "]}," Rubocop Cop Style ConfigurableMax max=":{"type":"method","name":"max=","children":[],"call":["cfg []= ","(send\n  (lvar :cfg) :[]\n  (str \"Max\")) max ","cfg [] "," config_to_allow_offences "]}," Rubocop Cop Style ConfigurableEnforcedStyle alternative_style":{"type":"method","name":"alternative_style","children":[],"call":["a first ","a last "," style == "," style "," fail ","alternative_style can only be used when there are exactly  + ","a size != ","a size "," cop_config [] map "," cop_config [] "," cop_config "," cop_config [] map  first "," cop_config [] map  l cop_config [] map st "," f cop_config [] map il "," cop_config [] map ltern cop_config [] map tive_style c cop_config [] map n only be used when there  cop_config [] map re ex cop_config [] map ctly  + "," cop_config [] map  size != "," cop_config [] map  size "," cop_config [] m cop_config [] map p "]}," Rubocop Cop Style ConfigurableEnforcedStyle style":{"type":"method","name":"style","children":[],"call":[" fail ","s to_sym "," cop_config [] include? "," cop_config [] "," cop_config "," cop_config []  to_ cop_config [] ym "]}," Rubocop Cop Style ConfigurableEnforcedStyle unrecognized_style_detected":{"type":"method","name":"unrecognized_style_detected","children":[],"call":[" config_to_allow_offences= "]}," Rubocop Cop Style ConfigurableEnforcedStyle both_styles_detected":{"type":"method","name":"both_styles_detected","children":[],"call":[" config_to_allow_offences= "]}," Rubocop Cop Style ConfigurableEnforcedStyle correct_style_detected":{"type":"method","name":"correct_style_detected","children":[],"call":[" both_styles_detected "," config_to_allow_offences [] "," config_to_allow_offences "]}," Rubocop Cop Style ConfigurableEnforcedStyle opposite_style_detected":{"type":"method","name":"opposite_style_detected","children":[],"call":[" both_styles_detected "," config_to_allow_offences [] "," config_to_allow_offences "," alternative_style to_s "," alternative_style "]}," Rubocop Cop Style CodeLength irrelevant_line":{"type":"method","name":"irrelevant_line","children":[],"call":[" comment_line? "," count_comments? ! "," count_comments? ","source_line blank? "]}," Rubocop Cop Style CodeLength check":{"type":"method","name":"check","children":[],"call":[" max= "," add_offence "," sprintf "," max_length "," message ","length > "," code_length "," max_ code_length  "," code_length  > "," code_ code_length  "]}," Rubocop Cop Style CodeLength count_comments?":{"type":"method","name":"count_comments?","children":[],"call":[" cop_config [] "," cop_config "]}," Rubocop Cop Style CodeLength max_length":{"type":"method","name":"max_length","children":[],"call":[" cop_config [] "," cop_config "]}," Rubocop Cop Style ClassLength code_length":{"type":"method","name":"code_length","children":[],"call":["length + "," irrelevant_line "," processed_source [] "," processed_source ","target_line_numbers reduce ","class_body_line_numbers - "," line_numbers_of_inner_classes "," line_range to_a [] "," line_range to_a "," line_range ","class_body_line_numbers -  reduce "," line_range to_a []  - "]}," Rubocop Cop Style ClassLength message":{"type":"method","name":"message","children":[],"call":[]}," Rubocop Cop Style CaseIndentation base_column":{"type":"method","name":"base_column","children":[],"call":[" fail ","case_node location end column ","case_node location end ","case_node location ","case_node location keyword column ","case_node location keyword "]}," Rubocop Cop Style BracesAroundHashParameters all_hashes?":{"type":"method","name":"all_hashes?","children":[],"call":["a type == ","a type ","args all? ","args length > ","args length "]}," Rubocop Cop Style BracesAroundHashParameters braces?":{"type":"method","name":"braces?","children":[],"call":["arg loc begin nil? ! ","arg loc begin nil? ","arg loc begin ","arg loc "]}," Rubocop Cop Style BracesAroundHashParameters non_empty_hash?":{"type":"method","name":"non_empty_hash?","children":[],"call":["arg children any? ","arg children ","arg type == ","arg type "]}," Rubocop Cop Style BracesAroundHashParameters autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector insert_after ","node loc expression ","node loc ","corrector insert_before "," style == "," style ","corrector remove ","node loc end ","node loc begin "," lambda "," remove_trailing_comma "]}," Rubocop Cop Style BracesAroundHashParameters check":{"type":"method","name":"check","children":[],"call":[" opposite_style_detected "," add_offence "," correct_style_detected "," braces? "," all_hashes? "," braces? ! "," style == "," style "," add_offense "]}," Rubocop Cop Style Blocks parentheses?":{"type":"method","name":"parentheses?","children":[],"call":["send_node loc begin ","send_node loc "]}," Rubocop Cop Style AutocorrectAlignment calculate_range":{"type":"method","name":"calculate_range","children":[],"call":["Parser Source Range  new ","pos_to_remove + ","column_delta abs ","expr source_buffer ","line_begin_pos - ","column_delta > ","expr source_buffer source [] =~ ","expr source_buffer source [] ","expr source_buffer source ","line_begin_pos -  + "]}," Rubocop Cop Style ArraySyntax array_of?":{"type":"method","name":"array_of?","children":[],"call":["e type == ","e type ","array_elems all? ","array_elems size > ","array_elems size ","node children ","node loc begin is? ","node loc begin ","node loc ","node children  all? ","node children  size > ","node children  size "]}," Rubocop Cop Style AlignHash SeparatorAlignment hash_rocket_delta":{"type":"method","name":"hash_rocket_delta","children":[],"call":["first_pair loc operator column - ","current_separator column ","first_pair loc operator column ","first_pair loc operator ","first_pair loc "]}," Rubocop Cop Style AlignHash TableAlignment hash_rocket_delta":{"type":"method","name":"hash_rocket_delta","children":[],"call":["first_pair loc column + + - ","current_separator column ","first_pair loc column + + ","first_pair loc column + ","first_pair loc column ","first_pair loc "]}," Rubocop Cop Style AlignHash AlignmentOfValues separator_delta":{"type":"method","name":"separator_delta","children":[],"call":[" hash_rocket_delta - "," hash_rocket_delta ","current_separator is? "]}," Rubocop Cop Style Alias autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","old children first ","old children ","old loc expression ","old loc ","new children first ","new children ","new loc expression ","new loc ","corrector insert_after ","node loc keyword ","node loc "," lambda "]}," Rubocop Cop Style AccessorMethodName bad_writer_name?":{"type":"method","name":"bad_writer_name?","children":[],"call":["args to_a one? ","args to_a ","method_name start_with? "]}," Rubocop Cop Style AccessorMethodName bad_reader_name?":{"type":"method","name":"bad_reader_name?","children":[],"call":["args to_a empty? ","args to_a ","method_name start_with? "]}," Rubocop Cop Style AccessorMethodName check":{"type":"method","name":"check","children":[],"call":[" add_offence "," bad_writer_name? "," bad_reader_name? ","method_name to_s "," add_offense "]}," Rubocop Cop Style AccessorMethodName on_defs":{"type":"method","name":"on_defs","children":[],"call":[" check ","method_name to_s "]}," Rubocop Cop Style AccessorMethodName on_def":{"type":"method","name":"on_def","children":[],"call":[" check ","method_name to_s "]}," Rubocop Cop Style AccessModifierIndentation unexpected_indent_offset":{"type":"method","name":"unexpected_indent_offset","children":[],"call":["IndentationWidth CORRECT_INDENTATION  - "," expected_indent_offset "]}," Rubocop Cop Style AccessModifierIndentation check":{"type":"method","name":"check","children":[],"call":[" unrecognized_style_detected "," opposite_style_detected ","offset == "," unexpected_indent_offset "," add_offence "," correct_style_detected "," expected_indent_offset ","access_modifier_start_col - ","send_node loc expression column ","send_node loc expression ","send_node loc ","@column_delta == "," expected_indent_offset - ","access_modifier_start_col -  == "," unexpected_indent_access_modifier_start_col -  "," expected_indent_access_modifier_start_col -  ","send_node loc expression column  - "," expected_indent_offset -  == "," expected_indent_access_modifier_start_col -  - "]}," Rubocop Cop Rails DefaultScope on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offence "," lambda_or_proc? ","args [] ","args size == ","args size "," command? ","first_arg type != ","first_arg type "," add_offense ","args []  type != ","args []  type "]}," Rubocop Cop Lint UselessSetterCall check":{"type":"method","name":"check","children":[],"call":[" add_offence ","MSG  format ","receiver loc name source ","receiver loc name ","receiver loc ","tracker contain_object_passed_as_argument? ","MethodVariableTracker  new "," setter_call_to_local_variable? ","expression last ","expression is_a? ","body children ","body type == ","body type "," add_offense "," format ","MethodVariableTracker  new  contain_object_passed_as_argument? ","body children  last ","body children  is_a? "]}," Rubocop Cop Lint EndAlignment alignment":{"type":"method","name":"alignment","children":[],"call":[" fail ","a to_sym "," cop_config [] "," cop_config "," f cop_config [] il "," cop_config []  to_sym "]}," Rubocop Cop Lint EndAlignment check_offset":{"type":"method","name":"check_offset","children":[],"call":[" add_offence "," sprintf ","kw_loc column ","kw_loc line ","end_loc column ","end_loc line ","kw_loc column != ","end_loc column + ","kw_loc line != ","node loc keyword ","node loc ","node loc end "," ignored_node? "," correct_style_detected "," opposite_style_detected "," add_offense "," format ","node loc keyword  column ","node loc keyword  line ","node loc end  column ","node loc end  line ","node loc keyword  column != ","node loc end  column + ","node loc keyword  line != "]}," Rubocop Cop Lint EndAlignment check_assignment":{"type":"method","name":"check_assignment","children":[],"call":[" ignore_node "," check_offset ","range source ","Parser Source Range  new ","rhs loc keyword end_pos ","rhs loc keyword ","rhs loc ","expr begin_pos ","expr source_buffer ","node loc expression ","node loc ","rhs loc keyword column - ","node loc expression column ","rhs loc keyword column "," alignment == "," alignment ","rhs loc respond_to? ","rhs type "," first_part_of_call_chain "," style == "," style "," check_rhs loc keyword column -  ","Parser Source Range  new  source ","rhs loc keyword  source "," first_part_of_call_chain  loc keyword end_pos "," first_part_of_call_chain  loc keyword "," first_part_of_call_chain  loc ","node loc expression  begin_pos ","node loc expression  source_buffer ","node loc node loc expression ession "," first_part_of_call_chain  loc keyword column - ","node loc node loc expression ession column "," first_part_of_call_chain  loc keyword column "," first_part_of_call_chain  loc respond_to? "," first_part_of_call_chain  type "]}," Rubocop Cop Cop custom_severity":{"type":"method","name":"custom_severity","children":[],"call":[" warn ","(str \"Warning: Invalid severity '\") + ","(str \"Valid severities are \") color ","Offence SEVERITIES  join ","severity to_sym ","Offence SEVERITIES  include? "," cop_config [] "," cop_config ","Offense SEVERITIES  join ","Offense SEVERITIES  include? ","Severity NAMES  join ","Severity NAMES  include? "]}," Rubocop Cop Cop default_severity":{"type":"method","name":"default_severity","children":[],"call":[" class lint? "," class "]}," Rubocop Cop Cop relevant_file?":{"type":"method","name":"relevant_file?","children":[],"call":[" exclude_file? ! "," exclude_file? "," include_file? "]}," Rubocop Cop Cop exclude_file?":{"type":"method","name":"exclude_file?","children":[],"call":[" processed_source buffer name =~ "," processed_source buffer name "," processed_source buffer "," processed_source "," exclude_paths any? "," exclude_paths "," buffer_name_matches_any? "," file_name_matches_any? "]}," Rubocop Cop Cop exclude_paths":{"type":"method","name":"exclude_paths","children":[],"call":[" cop_config [] "," cop_config "]}," Rubocop Cop Cop include_file?":{"type":"method","name":"include_file?","children":[],"call":[" processed_source buffer name =~ "," processed_source buffer name "," processed_source buffer "," processed_source "," include_paths any? "," include_paths "," buffer_name_matches_any? "," file_name_matches_any? "]}," Rubocop Cop Cop include_paths":{"type":"method","name":"include_paths","children":[],"call":[" cop_config [] "," cop_config "]}," Rubocop Cop Cop config_to_allow_offences=":{"type":"method","name":"config_to_allow_offences=","children":[],"call":["Formatter DisabledConfigFormatter  config_to_allow_offences []= "," cop_name ","Formatter DisabledConfigFormatter  config_to_allow_offences "]}," Rubocop Cop Cop config_to_allow_offences":{"type":"method","name":"config_to_allow_offences","children":[],"call":["Formatter DisabledConfigFormatter  config_to_allow_offences [] "," cop_name ","Formatter DisabledConfigFormatter  config_to_allow_offences "]}," Rubocop Cop CheckMethods on_defs":{"type":"method","name":"on_defs","children":[],"call":[" check "]}," Rubocop Cop CheckMethods on_def":{"type":"method","name":"on_def","children":[],"call":[" check "]}," Rubocop Cop CheckAssignment on_op_asgn":{"type":"method","name":"on_op_asgn","children":[],"call":[" check_assignment "]}," Rubocop Cop CheckAssignment on_casgn":{"type":"method","name":"on_casgn","children":[],"call":[" check_assignment "]}," Rubocop Cop CheckAssignment on_and_asgn":{"type":"method","name":"on_and_asgn","children":[],"call":[" check_assignment "]}," Rubocop Cop CheckAssignment on_or_asgn":{"type":"method","name":"on_or_asgn","children":[],"call":[" check_assignment "]}," Rubocop Cop CheckAssignment on_gvasgn":{"type":"method","name":"on_gvasgn","children":[],"call":[" check_assignment "]}," Rubocop Cop CheckAssignment on_ivasgn":{"type":"method","name":"on_ivasgn","children":[],"call":[" check_assignment "]}," Rubocop Cop CheckAssignment on_lvasgn":{"type":"method","name":"on_lvasgn","children":[],"call":[" check_assignment "]}," Rubocop ConfigStore options_config=":{"type":"method","name":"options_config=","children":[],"call":["ConfigLoader  merge_with_default ","ConfigLoader  make_excludes_absolute ","ConfigLoader  load_file "]}," Rubocop ConfigLoader resolve_inheritance":{"type":"method","name":"resolve_inheritance","children":[],"call":["hash []= "," merge ","hash [] ","hash key? ","value is_a? ","base_config each "," make_excludes_absolute ","File  basename == ","File  basename ","base_config loaded_path "," base_configs reverse_each "," base_configs ","v is_a? "]}," Rubocop Options add_flags_with_optional_args":{"type":"method","name":"add_flags_with_optional_args","children":[],"call":["@options []= ","list split ","list nil? "," option "]}," Rubocop Formatter DisabledConfigFormatter output_cop_comments":{"type":"method","name":"output_cop_comments","children":[],"call":["output puts ","params join ","params empty? ","default_cfg keys - - ","cfg keys ","default_cfg keys - ","default_cfg keys ","Rubocop ConfigLoader  default_configuration [] ","Rubocop ConfigLoader  default_configuration ","COPS  [] first new support_autocorrect? ","COPS  [] first new ","COPS  [] first ","COPS  [] ","default_cfg keys - -  join ","default_cfg keys - -  empty? ","Rubocop ConfigLoader  default_configuration []  keys - - ","Rubocop ConfigLoader  default_configuration []  keys - ","Rubocop ConfigLoader  default_configuration []  keys "]}," Rubocop Formatter Colorizable colorize":{"type":"method","name":"colorize","children":[],"call":[" rainbow wrap color "," rainbow wrap "," rainbow "]}," Rubocop Formatter Colorizable rainbow":{"type":"method","name":"rainbow","children":[],"call":["rainbow enabled= "," output tty? "," output ","Rainbow  new ","Rainbow  new  enabled= "]}," Rubocop FileInspector process_file":{"type":"method","name":"process_file","children":[],"call":[" formatter_set file_finished ","offences freeze "," formatter_set ","unique_new any? ","offences include? ","new_offences reject "," inspect_file "," loop "," formatter_set file_started "," puts ","@options [] ","offenses sort freeze ","offenses sort ","offenses include? ","new_offenses reject ","offenses compact sort freeze ","offenses compact sort ","offenses compact ","parse_offenses any? "," process_source ","processed_source disabled_line_ranges ","offenses any? ","offenses select! "," inspect_file  reject "]}," Rubocop Cop VariableInspector wrap_with_top_level_node":{"type":"method","name":"wrap_with_top_level_node","children":[],"call":["Parser AST Node  new "]}," Rubocop Cop Util operator?":{"type":"method","name":"operator?","children":[],"call":["OPERATOR_METHODS  include? "]}," Rubocop Cop Style WordArray parameter_name":{"type":"method","name":"parameter_name","children":[],"call":[]}," Rubocop Cop Style WhileUntilModifier message":{"type":"method","name":"message","children":[],"call":[]}," Rubocop Cop Style TrailingComma put_comma":{"type":"method","name":"put_comma","children":[],"call":[" add_offence "," sprintf ","Parser Source Range  new ","last_expr end_pos ","last_expr begin_pos + ","last_expr begin_pos ","last_expr source [] =~ ","last_expr source [] ","last_expr source ","last_expr source rindex ","items last loc expression ","items last loc ","items last "," add_offense "," format ","items last loc expression  end_pos ","items last loc expression  begin_pos + ","items last loc expression  begin_pos ","items last loc expression  source [] =~ ","items last loc expression  source [] ","items last loc expression  source ","items last loc expression  source rindex "]}," Rubocop Cop Style TrailingComma avoid_comma":{"type":"method","name":"avoid_comma","children":[],"call":[" add_offence "," sprintf ","kind =~ ","Parser Source Range  new ","comma_begin_pos + "," add_offense "," format "]}," Rubocop Cop Style TrailingComma multiline?":{"type":"method","name":"multiline?","children":[],"call":["(send\n  (send\n    (lvar :node) :loc) :begin) map uniq size > ","(send\n  (send\n    (lvar :node) :loc) :begin) map uniq size ","(send\n  (send\n    (lvar :node) :loc) :begin) map uniq ","(send\n  (send\n    (lvar :node) :loc) :begin) map ","node loc end ","node loc ","node loc begin "]}," Rubocop Cop Style TrailingComma brackets?":{"type":"method","name":"brackets?","children":[],"call":["node loc end nil? ! ","node loc end nil? ","node loc end ","node loc "]}," Rubocop Cop Style TrailingComma check":{"type":"method","name":"check","children":[],"call":[" put_comma "," avoid_comma ","after_last_item begin_pos + ","after_last_item begin_pos "," multiline? "," style == "," style ","after_last_item source =~ ","after_last_item source ","Parser Source Range  new ","items first loc expression source_buffer ","items first loc expression ","items first loc ","items first "," heredoc? ","Parser Source Range  new  begin_pos + ","Parser Source Range  new  begin_pos ","Parser Source Range  new  source =~ ","Parser Source Range  new  source "]}," Rubocop Cop Style TrailingComma check_literal":{"type":"method","name":"check_literal","children":[],"call":[" check ","node loc end begin_pos ","node loc end ","node loc ","node children last loc expression end_pos ","node children last loc expression ","node children last loc ","node children last ","node children "," brackets? ","node children empty? "]}," Rubocop Cop Style TrailingComma parameter_name":{"type":"method","name":"parameter_name","children":[],"call":[]}," Rubocop Cop Style TrailingComma on_send":{"type":"method","name":"on_send","children":[],"call":[" check ","node loc expression end_pos ","node loc expression ","node loc ","args last loc expression end_pos ","args last loc expression ","args last loc ","args last "," brackets? ","args empty? "]}," Rubocop Cop Style TrailingComma on_hash":{"type":"method","name":"on_hash","children":[],"call":[" check_literal "]}," Rubocop Cop Style TrailingComma on_array":{"type":"method","name":"on_array","children":[],"call":[" check_literal "," square_brackets? "]}," Rubocop Cop Style SpaceAfterColon autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector insert_after "," lambda "]}," Rubocop Cop Style SpaceAfterColon on_if":{"type":"method","name":"on_if","children":[],"call":[" add_offence ","colon source_buffer source [] =~ ","colon source_buffer source [] ","colon end_pos ","colon source_buffer source ","colon source_buffer ","node loc colon ","node loc "," ternary_op? "," add_offense ","node loc colon  source_buffer source [] =~ ","node loc colon  source_buffer source [] ","node loc colon  end_pos ","node loc colon  source_buffer source ","node loc colon  source_buffer ","node loc node loc colon  "]}," Rubocop Cop Style SpaceAfterColon on_pair":{"type":"method","name":"on_pair","children":[],"call":[" add_offence ","oper source_buffer source [] =~ ","oper source_buffer source [] ","oper end_pos ","oper source_buffer source ","oper source_buffer ","oper is? ","node loc operator ","node loc "," add_offense ","node loc operator  source_buffer source [] =~ ","node loc operator  source_buffer source [] ","node loc operator  end_pos ","node loc operator  source_buffer source ","node loc operator  source_buffer ","node loc operator  is? ","node loc node loc operator ator "]}," Rubocop Cop Style RegexpLiteral parameter_name":{"type":"method","name":"parameter_name","children":[],"call":[]}," Rubocop Cop Style ParenthesesAroundCondition message":{"type":"method","name":"message","children":[],"call":["kw == ","node loc keyword source ","node loc keyword ","node loc ","node loc keyword source  == "]}," Rubocop Cop Style NumericLiterals autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","node loc expression ","node loc ","formatted_int insert ","int < ","int abs to_s reverse gsub reverse ","int abs to_s reverse gsub ","int abs to_s reverse ","int abs to_s ","int abs ","node loc expression source to_i ","node loc expression source "," lambda ","int abs to_s reverse gsub reverse  insert ","formatted_node loc expression source to_i  insert ","node loc expression source to_i  < ","node loc expression source to_i  abs to_s reverse gsub reverse ","node loc expression source to_i  abs to_s reverse gsub ","node loc expression source to_i  abs to_s reverse ","node loc expression source to_i  abs to_s ","node loc expression source to_i  abs "]}," Rubocop Cop Style NumericLiterals parameter_name":{"type":"method","name":"parameter_name","children":[],"call":[]}," Rubocop Cop Style MethodDefParentheses args_node":{"type":"method","name":"args_node","children":[],"call":["def_node type == ","def_node type "]}," Rubocop Cop Style LambdaCall offence?":{"type":"method","name":"offence?","children":[],"call":["node loc selector ","node loc "," style == "," style ","node loc selector nil? "]}," Rubocop Cop Style IndentationConsistency check":{"type":"method","name":"check","children":[],"call":[" add_offence ","Parser Source Range  new ","expr source_buffer ","end_pos - ","expr begin_pos ","expr source_line =~ ","expr source_line ","child2 expression ","child2 column != ","child1 column ","child2 column ","child2 line > ","child1 line ","child2 line ","children_to_check map each_cons ","children_to_check map ","AccessModifierIndentation  modifier_node? ","node children reject ","node children "," check_alignment ","child2 expression  source_buffer ","expr begin_pos  - ","expr end_pos -  ","child2 expression  begin_pos ","child2 expression  source_line =~ ","child2 expression  source_line ","child2 child2 expression ession "]}," Rubocop Cop Style IndentationConsistency on_kwbegin":{"type":"method","name":"on_kwbegin","children":[],"call":[" check "]}," Rubocop Cop Style IndentationConsistency on_begin":{"type":"method","name":"on_begin","children":[],"call":[" check "]}," Rubocop Cop Style DotPosition parameter_name":{"type":"method","name":"parameter_name","children":[],"call":[]}," Rubocop Cop Style DotPosition message":{"type":"method","name":"message","children":[],"call":["Place the . on the  + "," style "]}," Rubocop Cop Style CharacterLiteral correct_style_detected":{"type":"method","name":"correct_style_detected","children":[],"call":[]}," Rubocop Cop Style CharacterLiteral opposite_style_detected":{"type":"method","name":"opposite_style_detected","children":[],"call":[]}," Rubocop Cop Style CaseIndentation parameter_name":{"type":"method","name":"parameter_name","children":[],"call":[]}," Rubocop Cop Style CaseIndentation check_when":{"type":"method","name":"check_when","children":[],"call":[" unrecognized_style_detected "," opposite_style_detected ","pos column == "," base_column "," alternative_style ","pos column "," add_offence ","Indent when  + "," correct_style_detected ","base_column + ","when_node loc keyword ","when_node loc "," add_offense ","Indent `when`  + "," opwhen_node loc keyword ite_style_detected ","when_node loc keyword  column == ","when_node loc keyword  column "]}," Rubocop Cop Style BracesAroundHashParameters remove_trailing_comma":{"type":"method","name":"remove_trailing_comma","children":[],"call":["corrector remove ","Parser Source Range  new ","comma_begin + ","pos_after_last_pair + ","range_after_last_pair source =~ ","range_after_last_pair source ","node loc end begin_pos ","node loc end ","node loc ","node children last loc expression end_pos ","node children last loc expression ","node children last loc ","node children last ","node children ","node loc end source_buffer ","pos_after_last_pair +  + ","node children last loc expression end_pos  + ","Parser Source Range  new  source =~ ","Parser Source Range  new  source "]}," Rubocop Cop SurroundingSpace token_table":{"type":"method","name":"token_table","children":[],"call":["table []= ","t pos column ","t pos ","t pos line ","@processed_source tokens each_with_index ","@processed_source tokens "]}," Rubocop Cop SurroundingSpace index_of_last_token":{"type":"method","name":"index_of_last_token","children":[],"call":[" token_table [] ","e line "," token_table ","(erange\n  (int 0)\n  (send\n    (lvar :e) :column)) to_a reverse find ","(erange\n  (int 0)\n  (send\n    (lvar :e) :column)) to_a reverse ","(erange\n  (int 0)\n  (send\n    (lvar :e) :column)) to_a ","e column ","node loc expression end ","node loc expression ","node loc ","@token_table [] "," build_token_table "," toknode loc expression end n_tablnode loc expression end  [] ","node loc expression end  linnode loc expression end  "," toknode loc expression end n_tablnode loc expression end  ","(node loc expression end rangnode loc expression end \n  (int 0)\n  (snode loc expression end nd\n    (lvar :node loc expression end ) :column)) to_a rnode loc expression end vnode loc expression end rsnode loc expression end  find ","(node loc expression end rangnode loc expression end \n  (int 0)\n  (snode loc expression end nd\n    (lvar :node loc expression end ) :column)) to_a rnode loc expression end vnode loc expression end rsnode loc expression end  ","(node loc expression end rangnode loc expression end \n  (int 0)\n  (snode loc expression end nd\n    (lvar :node loc expression end ) :column)) to_a ","node loc expression end  column ","nodnode loc expression end  loc node loc expression end xprnode loc expression end ssion node loc expression end nd ","nodnode loc expression end  loc node loc expression end xprnode loc expression end ssion ","nodnode loc expression end  loc ","@toknode loc expression end n_tablnode loc expression end  [] "," build_toknode loc expression end n_tablnode loc expression end  "]}," Rubocop Cop SurroundingSpace index_of_first_token":{"type":"method","name":"index_of_first_token","children":[],"call":[" token_table [] ","b column ","b line "," token_table ","node loc expression begin ","node loc expression ","node loc ","@token_table [] "," build_token_table "," token_tanode loc expression begin le [] ","node loc expression begin  column ","node loc expression begin  line "," token_tanode loc expression begin le ","node loc expression node loc expression begin egin ","@token_tanode loc expression begin le [] "," node loc expression begin uild_token_tanode loc expression begin le "]}," Rubocop Cop SurroundingSpace space_between?":{"type":"method","name":"space_between?","children":[],"call":["char_preceding_2nd_token =~ ","t2 pos line > ","t1 pos line ","t1 pos ","t2 pos line ","t2 pos ","@processed_source [] [] ","t2 pos column - ","t2 pos column ","@processed_source [] ","t2 pos line - ","t1 type != ","t1 type ","char_preceding_2nd_token == ","@source [] [] ","@source [] ","@processed_source [] []  =~ ","@source [] []  =~ ","@processed_source [] []  == ","@source [] []  == "]}," Rubocop Cop StringHelp on_regexp":{"type":"method","name":"on_regexp","children":[],"call":[" ignore_node "]}," Rubocop Cop StringHelp on_dstr":{"type":"method","name":"on_dstr","children":[],"call":[" ignore_node "]}," Rubocop Cop StringHelp on_str":{"type":"method","name":"on_str","children":[],"call":[" correct_style_detected "," opposite_style_detected "," add_offence "," offence? "," part_of_ignored_node? ","node loc begin ","node loc ","node loc respond_to? "," add_offense "," offense? "]}," Rubocop Cop StatementModifier body_has_comment?":{"type":"method","name":"body_has_comment?","children":[],"call":["comment_lines include? ","body loc expression line ","body loc expression ","body loc ","comments map map ","comments map ","comments map map  include? "]}," Rubocop Cop StatementModifier body_length":{"type":"method","name":"body_length","children":[],"call":["body loc expression size ","body loc expression ","body loc "]}," Rubocop Cop StatementModifier length":{"type":"method","name":"length","children":[],"call":["sexp loc expression source lines to_a size ","sexp loc expression source lines to_a ","sexp loc expression source lines ","sexp loc expression source ","sexp loc expression ","sexp loc "]}," Rubocop Cop StatementModifier max_line_length":{"type":"method","name":"max_line_length","children":[],"call":[" config for_cop [] "," config for_cop "," config "," cop_config [] "," cop_config "]}," Rubocop Cop StatementModifier check":{"type":"method","name":"check","children":[],"call":[" body_has_comment? ! "," body_has_comment? ","total <= "," max_line_length ","indentation + + + + + ","indentation + + + + ","indentation + + + ","indentation + + ","indentation + ","cond loc expression size ","cond loc expression ","cond loc ","sexp loc keyword size ","sexp loc keyword ","sexp loc ","sexp loc keyword column "," on_node ","body_length == "," body_length "," length > "," length ","sexp loc keyword source ","indentation + + + + +  <= ","sexp loc keyword column  + + + + + ","sexp loc keyword column  + + + + ","sexp loc keyword column  + + + ","sexp loc keyword column  + + ","sexp loc keyword column  + "," body_length  == ","  body_length  "]}," Rubocop Cop SpaceInside autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector remove "," lambda "]}," Rubocop Cop SpaceInside investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offence "," format ","Parser Source Range  new ","t2 pos begin_pos ","t2 pos ","t1 pos end_pos ","t1 pos ","processed_source buffer "," space_between? ","t2 pos line == ","t1 pos line ","t2 pos line ","t2 type == ","t2 type ","t1 type == ","t1 type ","processed_source tokens each_cons ","processed_source tokens "," specifics "," add_offense "]}," Rubocop Cop SpaceAfterPunctuation autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector insert_after ","token pos "," lambda ","corrector replace ","token pos source + ","token pos source "]}," Rubocop Cop SpaceAfterPunctuation offset":{"type":"method","name":"offset","children":[],"call":[]}," Rubocop Cop SpaceAfterPunctuation investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offence "," sprintf "," kind ","t1 pos ","t2 pos column == ","t1 pos column + "," offset ","t1 pos column ","t2 pos column ","t2 pos ","t1 pos line == ","t2 pos line ","t1 pos line ","processed_source tokens each_cons ","processed_source tokens "," add_offense "," format ","t2 type != ","t2 type ","(sym :tRPAREN) include? ! ","(sym :tRPAREN) include? "]}," Rubocop Cop SafeAssignment safe_assignment_allowed?":{"type":"method","name":"safe_assignment_allowed?","children":[],"call":[" cop_config [] "," cop_config "]}," Rubocop Cop SafeAssignment safe_assignment?":{"type":"method","name":"safe_assignment?","children":[],"call":["Util EQUALS_ASGN_NODES  include? ","node children [] type ","node children [] ","node children ","node children size == ","node children size ","node type == ","node type "]}," Rubocop Cop ParserDiagnostic investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offence ","d level ","d location ","d message capitalize ","d message "," alternative_message "," respond_to? "," relevant_diagnostic? ","processed_source diagnostics each ","processed_source diagnostics "," add_offense ","d d message capitalize  capitalize ","d  alternative_message  capitalize ","d d message capitalize  ","d  alternative_message  "," alternative_d message capitalize  "," alternative_ alternative_message  "]}," Rubocop Cop NegativeConditional check":{"type":"method","name":"check","children":[],"call":[" add_offence "," error_message ","(and\n  (send\n    (send\n      (lvar :node) :loc) :respond_to?\n    (sym :else))\n  (send\n    (send\n      (lvar :node) :loc) :else)) ! ","node loc else ","node loc ","node loc respond_to? ","method == ","condition type == ","condition type ","condition children last ","condition children "," add_offense ","condition children last  type == ","condition children last  type ","condition children last  children last ","condition children last  children "]}," Rubocop Cop IfThenElse check":{"type":"method","name":"check","children":[],"call":[" add_offence "," error_message "," offending_line ","node loc expression source =~ ","node loc expression source ","node loc expression ","node loc "," add_offense "," offending_ offending_line  "]}," Rubocop Cop IfThenElse on_unless":{"type":"method","name":"on_unless","children":[],"call":[" check "]}," Rubocop Cop IfThenElse on_if":{"type":"method","name":"on_if","children":[],"call":[" check "]}," Rubocop Cop ConfigurableNaming after_dot":{"type":"method","name":"after_dot","children":[],"call":["Parser Source Range  new ","begin_pos + ","expr source_buffer ","expr begin_pos + ","expr begin_pos ","match [] length ","match [] ","(str \"\\\\A\") match ","expr source ","node loc expression ","node loc ","expr begin_pos +  + ","node loc expression  source_buffer ","expr expr begin_pos +  + ","node loc expression  begin_pos + ","expr expr begin_pos +  ","node loc expression  begin_pos ","(str \"\\A\") match  [] length ","(str \"\\A\") match  [] ","(str \"\\\\A\") (str \"\\A\") match  ","node loc expression  source ","node loc node loc expression ession "]}," Rubocop Cop ConfigurableNaming matches_config?":{"type":"method","name":"matches_config?","children":[],"call":["name =~ "," style == "," style "]}," Rubocop Cop ConfigurableNaming check":{"type":"method","name":"check","children":[],"call":[" opposite_style_detected "," add_offence "," message "," style "," correct_style_detected "," matches_config? "," operator? ","range source to_sym ","range source "," add_offense "]}," Rubocop Cop ConfigurableMax parameter_name":{"type":"method","name":"parameter_name","children":[],"call":[]}," Rubocop Cop ConfigurableMax max=":{"type":"method","name":"max=","children":[],"call":["cfg []= "," parameter_name ","(send\n  (lvar :cfg) :[]\n  (send nil :parameter_name)) max ","cfg [] "," config_to_allow_offences "," config_to_allow_offenses "]}," Rubocop Cop ConfigurableEnforcedStyle parameter_name":{"type":"method","name":"parameter_name","children":[],"call":[]}," Rubocop Cop ConfigurableEnforcedStyle alternative_style":{"type":"method","name":"alternative_style","children":[],"call":["a first ","a last "," style == "," style "," fail ","alternative_style can only be used when there are exactly  + ","a size != ","a size "," cop_config [] map "," cop_config [] "," cop_config "," cop_config [] map  first "," cop_config [] map  l cop_config [] map st "," f cop_config [] map il "," cop_config [] map ltern cop_config [] map tive_style c cop_config [] map n only be used when there  cop_config [] map re ex cop_config [] map ctly  + "," cop_config [] map  size != "," cop_config [] map  size "," cop_config [] m cop_config [] map p "]}," Rubocop Cop ConfigurableEnforcedStyle style":{"type":"method","name":"style","children":[],"call":[" fail ","s to_sym "," cop_config [] include? "," cop_config [] "," cop_config "," parameter_name "," cop_config []  to_ cop_config [] ym "]}," Rubocop Cop ConfigurableEnforcedStyle unrecognized_style_detected":{"type":"method","name":"unrecognized_style_detected","children":[],"call":[" config_to_allow_offences= "," config_to_allow_offenses= "]}," Rubocop Cop ConfigurableEnforcedStyle both_styles_detected":{"type":"method","name":"both_styles_detected","children":[],"call":[" config_to_allow_offences= "," config_to_allow_offenses= "]}," Rubocop Cop ConfigurableEnforcedStyle correct_style_detected":{"type":"method","name":"correct_style_detected","children":[],"call":[" both_styles_detected "," config_to_allow_offences [] "," parameter_name "," config_to_allow_offences "," config_to_allow_offenses [] "," config_to_allow_offenses "]}," Rubocop Cop ConfigurableEnforcedStyle opposite_style_detected":{"type":"method","name":"opposite_style_detected","children":[],"call":[" both_styles_detected "," config_to_allow_offences [] "," config_to_allow_offences "," alternative_style to_s "," alternative_style "," parameter_name "," config_to_allow_offenses [] "," config_to_allow_offenses "]}," Rubocop Cop CodeLength irrelevant_line":{"type":"method","name":"irrelevant_line","children":[],"call":[" comment_line? "," count_comments? ! "," count_comments? ","source_line blank? "]}," Rubocop Cop CodeLength check":{"type":"method","name":"check","children":[],"call":[" max= "," add_offence "," sprintf "," max_length "," message ","length > "," code_length "," add_offense "," format "," max_ code_length  "," code_length  > "," code_ code_length  "]}," Rubocop Cop CodeLength count_comments?":{"type":"method","name":"count_comments?","children":[],"call":[" cop_config [] "," cop_config "]}," Rubocop Cop CodeLength max_length":{"type":"method","name":"max_length","children":[],"call":[" cop_config [] "," cop_config "]}," Rubocop Cop AutocorrectAlignment each_line":{"type":"method","name":"each_line","children":[],"call":["line length ","expr begin_pos + ","expr begin_pos ","expr source each_line ","expr source "]}," Rubocop Cop AutocorrectAlignment remove":{"type":"method","name":"remove","children":[],"call":["range source =~ ","range source ","Parser Source Range  new ","range end_pos + ","range end_pos ","range begin_pos + ","range begin_pos ","range source_buffer ","corrector remove ","StringIO  new ","Parser Source Range  new  source =~ ","Parser Source Range  new  source ","Parser Source Range  new  end_pos + ","Parser Source Range  new  end_pos ","Parser Source Range  new  begin_pos + ","Parser Source Range  new  begin_pos ","Parser Source Range  new  source_buffer "]}," Rubocop Cop AutocorrectAlignment calculate_range":{"type":"method","name":"calculate_range","children":[],"call":["Parser Source Range  new ","pos_to_remove + ","column_delta abs ","expr source_buffer ","line_begin_pos - ","column_delta > ","expr source_buffer source [] =~ ","expr source_buffer source [] ","expr source_buffer source ","line_begin_pos -  + "]}," Rubocop Cop AutocorrectAlignment autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << "," remove ","corrector insert_before ","  * ","column_delta > "," calculate_range "," each_line ","node loc expression ","node loc "," lambda ","range source =~ ","range source ","range source == "," calculate_ calculate_range  ","node loc node loc expression ession "," calculate_range  source =~ "," calculate_range  source "," calculate_range  source == "]}," Rubocop Cop AutocorrectAlignment start_of_line?":{"type":"method","name":"start_of_line?","children":[],"call":["loc expression source_line [] =~ ","loc expression source_line [] ","loc column ","loc expression source_line ","loc expression "]}," Rubocop Cop AutocorrectAlignment check_alignment":{"type":"method","name":"check_alignment","children":[],"call":[" add_offence ","@column_delta != ","items first loc column - ","current loc column ","current loc ","items first loc column ","items first loc ","items first "," start_of_line? ","current loc line > ","prev loc line ","prev loc ","current loc line ","items each_cons "," add_offense ","base_column - ","items empty? ","items each ","items first loc column -  != ","base_column -  != "]}," Rubocop Cop ArraySyntax array_of?":{"type":"method","name":"array_of?","children":[],"call":["e type == ","e type ","array_elems all? ","array_elems size > ","array_elems size ","node children ","node loc begin is? ","node loc begin ","node loc "," square_brackets? ","node children  all? ","node children  size > ","node children  size "]}," Rubocop Cop Lint UselessElseWithoutRescue relevant_diagnostic?":{"type":"method","name":"relevant_diagnostic?","children":[],"call":["diagnostic reason == ","diagnostic reason "]}," Rubocop Cop Lint InvalidCharacterLiteral alternative_message":{"type":"method","name":"alternative_message","children":[],"call":["diagnostic message capitalize gsub ","diagnostic message capitalize ","diagnostic message "]}," Rubocop Cop Lint InvalidCharacterLiteral relevant_diagnostic?":{"type":"method","name":"relevant_diagnostic?","children":[],"call":["diagnostic reason == ","diagnostic reason "]}," Rubocop Cop Lint EndAlignment parameter_name":{"type":"method","name":"parameter_name","children":[],"call":[]}," Rubocop Cop Lint EndAlignment visibility_and_def_on_same_line?":{"type":"method","name":"visibility_and_def_on_same_line?","children":[],"call":["(sym :def) include? ","args first type ","args first ","args size == ","args size ","(sym :public) include? ","receiver ! "]}," Rubocop Cop Lint EndAlignment on_send":{"type":"method","name":"on_send","children":[],"call":[" ignore_node "," check_offset ","method_def loc keyword begin_pos - ","expr begin_pos ","method_def loc keyword begin_pos ","method_def loc keyword ","method_def loc ","range source ","Parser Source Range  new ","method_def loc keyword end_pos ","expr source_buffer ","args first ","node loc expression ","node loc "," visibility_and_def_on_same_line? "," process_block_assignment "," attribute_writer? "," align_with_start_of_assignment? ","args last ","args first  loc keyword begin_pos - ","node loc expression  begin_pos ","args first  loc keyword begin_pos ","args first  loc keyword ","args first  loc ","Parser Source Range  new  source ","args first  loc keyword end_pos ","node loc expression  source_buffer ","node loc node loc expression ession "]}," Rubocop Cop Lint ElseLayout message":{"type":"method","name":"message","children":[],"call":[]}," Rubocop Cop Lint ElseLayout check":{"type":"method","name":"check","children":[],"call":[" check ","(str \"if\") include? ","node loc keyword source ","node loc keyword ","node loc ","node loc respond_to? "," add_offence "," message ","first_else_expr loc expression line == ","node loc else line ","node loc else ","first_else_expr loc expression line ","first_else_expr loc expression ","first_else_expr loc ","else_branch children first ","else_branch children ","else_branch type == ","else_branch type ","node loc else is? "," add_offense ","else_branch children first  loc expression line == ","else_branch children first  loc expression line ","else_branch children first  loc expression ","else_branch children first  loc "]}," Rubocop Cop Lint ElseLayout on_if":{"type":"method","name":"on_if","children":[],"call":[" check ","node loc end ","node loc ","node loc respond_to? "]}," Rubocop Cop Lint ConditionPosition on_different_line?":{"type":"method","name":"on_different_line?","children":[],"call":["keyword_line != "]}," Rubocop Cop Lint ConditionPosition message":{"type":"method","name":"message","children":[],"call":[]}," Rubocop Cop Lint ConditionPosition check":{"type":"method","name":"check","children":[],"call":[" add_offence "," message ","node loc keyword source ","node loc keyword ","node loc "," on_different_line? ","condition loc expression line ","condition loc expression ","condition loc ","node loc keyword line "," add_offense ","node loc end nil? ","node loc end ","node loc keyword is? ! ","node loc keyword is? "]}," Rubocop Cop Lint ConditionPosition on_until":{"type":"method","name":"on_until","children":[],"call":[" check "]}," Rubocop Cop Lint ConditionPosition on_while":{"type":"method","name":"on_while","children":[],"call":[" check "]}," Rubocop Cop Lint ConditionPosition on_if":{"type":"method","name":"on_if","children":[],"call":[" check ","node loc respond_to? ","node loc "]}," Rubocop Cop Lint BlockAlignment check_assignment":{"type":"method","name":"check_assignment","children":[],"call":[" check_block_alignment ","@inspected_blocks << "," already_processed_node? "," block_is_on_next_line? ","begin_node type != ","begin_node type ","method to_s =~ ","method to_s ","begin_node type == ","block_node type == ","block_node type "," find_block_node "," find_block_node  type == "," find_block_node  type "," find_ find_block_node  "]}," Rubocop Cop Lint AmbiguousRegexpLiteral alternative_message":{"type":"method","name":"alternative_message","children":[],"call":[]}," Rubocop Cop Lint AmbiguousRegexpLiteral relevant_diagnostic?":{"type":"method","name":"relevant_diagnostic?","children":[],"call":["diagnostic reason == ","diagnostic reason "]}," Rubocop Cop Lint AmbiguousOperator alternative_message":{"type":"method","name":"alternative_message","children":[],"call":[" format ","AMBIGUITIES  [] ","diagnostic location source ","diagnostic location "]}," Rubocop Cop Lint AmbiguousOperator relevant_diagnostic?":{"type":"method","name":"relevant_diagnostic?","children":[],"call":["diagnostic reason == ","diagnostic reason "]}," Rubocop Cop IgnoredNode ignored_node?":{"type":"method","name":"ignored_node?","children":[],"call":["n eql? ","@ignored_nodes any? ","n equal? "," ignored_nodes any? "," ignored_nodes "]}," Rubocop Cop IgnoredNode part_of_ignored_node?":{"type":"method","name":"part_of_ignored_node?","children":[],"call":["ignored_node loc expression end_pos >= ","expression end_pos ","ignored_node loc expression end_pos ","ignored_node loc expression ","ignored_node loc ","ignored_node loc expression begin_pos <= ","expression begin_pos ","ignored_node loc expression begin_pos ","@ignored_nodes each ","node loc expression ","node loc "," ignored_nodes any? "," ignored_nodes ","ignored_node loc node loc expression  end_pos >= ","node loc expression  end_pos ","ignored_node loc node loc expression  end_pos ","ignored_node loc node loc expression  ","ignored_node loc node loc expression  begin_pos <= ","node loc expression  begin_pos ","ignored_node loc node loc expression  begin_pos ","node loc node loc expression  "]}," Rubocop Cop IgnoredNode ignore_node":{"type":"method","name":"ignore_node","children":[],"call":["@ignored_nodes << "," ignored_nodes << "," ignored_nodes "]}," Rubocop Cop Cop match_path?":{"type":"method","name":"match_path?","children":[],"call":["path =~ ","File  fnmatch ","basename == ","File  basename ","File  basename  == ","File  File  basename  "]}," Rubocop Cop Cop buffer_name_matches_any?":{"type":"method","name":"buffer_name_matches_any?","children":[],"call":[" match_path? "," processed_source buffer name "," processed_source buffer "," processed_source ","paths any? "," cop_config [] "," cop_config ","patterns any? "," relative_path "," match_ relative_path ? "," relative_path s any? "," relative_ relative_path  "]}," Rubocop Cop Cop display_cop_names?":{"type":"method","name":"display_cop_names?","children":[],"call":["@options [] "," debug? "]}," Rubocop CLI print_cops_of_type":{"type":"method","name":"print_cops_of_type","children":[],"call":[" puts ","   + ","cnf to_yaml lines to_a [] map ","cnf to_yaml lines to_a [] ","cnf to_yaml lines to_a ","cnf to_yaml lines ","cnf to_yaml ","@config_store for for_cop ","@config_store for ","Dir  pwd to_s ","Dir  pwd ","cop cop_name ","cop new support_autocorrect? ","cop new ","selected_cops each ","@options [] include? ","@options [] ","cops_of_this_type select ","cops_of_this_type size ","type to_s capitalize ","type to_s ","cops with_type sort_by! ","cops with_type ","@config_store for for_cop  to_yaml lines to_a [] map ","@config_store for for_cop  to_yaml lines to_a [] ","@config_store for for_cop  to_yaml lines to_a ","@config_store for for_cop  to_yaml lines ","@config_store for for_cop  to_yaml ","cops with_type sort_by!  select ","cops with_type sort_by!  size "]}," Rubocop RakeTask full_options":{"type":"method","name":"full_options","children":[],"call":["result concat "," patterns "," options ","(send\n  (send nil :requires) :map) flatten "," requires map "," requires ","(send\n  (send nil :formatters) :map) flatten "," formatters map "," formatters "," tap "]}," Rubocop PathUtil match_path?":{"type":"method","name":"match_path?","children":[],"call":["path =~ ","File  fnmatch ","basename == ","path == ","File  basename "," warn ","pattern end_with? ","new_match ! ","File  fnmatch? ","File  basename  == ","File  File  basename  ","File  fnmatch?  ! "]}," Rubocop PathUtil relative_path":{"type":"method","name":"relative_path","children":[],"call":["Pathname  new relative_path_from to_s ","Pathname  new relative_path_from ","Pathname  new ","path_name relative_path_from to_s ","path_name relative_path_from ","File  expand_path ","Pathname  new  relative_path_from to_s ","Pathname  new  relative_path_from "]}," Rubocop Cop Style WordArray character_literal?":{"type":"method","name":"character_literal?","children":[],"call":["node loc end nil? ","node loc end ","node loc "]}," Rubocop Cop Style WordArray autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","node loc expression ","node loc "," lambda ","(send\n  (send\n    (lvar :node) :children) :map) join ","Parser Source Range  new source ","Parser Source Range  new ","n loc end begin_pos ","n loc end ","n loc ","n loc begin end_pos ","n loc begin ","n loc expression end_pos ","n loc expression ","n loc expression begin_pos + ","? length ","n loc expression begin_pos "," character_literal? ","node children map ","node children ","node loc expression source_buffer ","n loc end n loc begin end_pos  ","n loc end n loc expression begin_pos +  ","n loc begin n loc end begin_pos  ","n loc begin n loc expression end_pos  ","n loc expression n loc end begin_pos  ","n loc expression n loc expression end_pos  ","n loc expression n loc begin end_pos  + ","n loc expression n loc expression begin_pos +  + ","n loc expression n loc begin end_pos  ","n loc expression n loc expression begin_pos +  "]}," Rubocop Cop Style TrailingComma heredoc?":{"type":"method","name":"heredoc?","children":[],"call":["source_after_last_item =~ "]}," Rubocop Cop Style Proc autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","node loc expression ","node loc "," lambda "]}," Rubocop Cop Style LineEndConcatenation offending_node?":{"type":"method","name":"offending_node?","children":[],"call":["receiver_line != ","arg loc expression line ","arg loc expression ","arg loc ","receiver loc expression line ","receiver loc expression ","receiver loc ","arg type == ","arg type ","receiver type == ","receiver type ","+ == "," plus_at_line_end? ","node loc expression source ","node loc expression ","node loc "," string_type? "," concatenator_at_line_end? ","(sym :+) include? "," root_node_is_string_type? "," final_node_is_string_type? "," concat? ","receiver loc expression line  != ","arg loc node loc expression source  line ","arg loc node loc expression source  ","receiver loc node loc expression source  line ","receiver loc node loc expression source  ","node loc node loc expression source  source ","node loc node loc expression source  "]}," Rubocop Cop Style LineEndConcatenation autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","node loc selector ","node loc "," lambda "]}," Rubocop Cop Style LineEndConcatenation on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offence "," offending_node? "," add_offense "]}," Rubocop Cop Lint RequireParentheses offence?":{"type":"method","name":"offence?","children":[],"call":["(sym :and) include? ","node type "]}," Rubocop Cop Lint RequireParentheses parentheses?":{"type":"method","name":"parentheses?","children":[],"call":["node loc end ! ! ","node loc end ! ","node loc end ","node loc ","node loc respond_to? "]}," Rubocop Cop Lint RequireParentheses predicate?":{"type":"method","name":"predicate?","children":[],"call":["method_name =~ "]}," Rubocop Cop Lint RequireParentheses check_send":{"type":"method","name":"check_send","children":[],"call":[" add_offence "," offence? "," add_offense "," offense? "]}," Rubocop Cop Lint RequireParentheses check_ternary":{"type":"method","name":"check_ternary","children":[],"call":[" add_offence ","Parser Source Range  new ","condition loc expression end_pos ","condition loc expression ","condition loc ","expr begin_pos ","expr source_buffer ","node loc expression ","node loc "," offence? "," add_offense "," offense? ","condition loc node loc expression ession end_pos ","condition loc node loc expression ession ","node loc expression  begin_pos ","node loc expression  source_buffer ","node loc node loc expression ession "]}," Rubocop Cop Lint RequireParentheses on_send":{"type":"method","name":"on_send","children":[],"call":[" check_send ","args last "," predicate? "," check_ternary ","args first "," ternary_op? ","args empty? "," parentheses? "]}," Rubocop Cop Style ParenthesesAroundCondition parens_required?":{"type":"method","name":"parens_required?","children":[],"call":["expr start_with? ","node loc keyword source ","node loc keyword ","node loc ","node loc expression source ","node loc expression ","exp source [] start_with? ","kw source + ","kw source ","exp source [] ","exp source ","kw begin_pos - ","exp begin_pos ","kw begin_pos ","node loc expression source  start_with? ","node loc expression r start_with? ","node loc node loc keyword source  source ","node loc node loc keyword source  ","node loc node loc expression source ession source ","node loc node loc expression ression source ","node loc node loc expression source ession ","node loc node loc expression ression ","node loc expression  source [] start_with? ","node loc keyword  source + ","node loc keyword  source ","node loc expression  source [] ","node loc expression  source ","node loc keyword  begin_pos - ","node loc expression  begin_pos ","node loc keyword  begin_pos "]}," Rubocop Cop Style LineEndConcatenation plus_at_line_end?":{"type":"method","name":"plus_at_line_end?","children":[],"call":["expression =~ "]}," Rubocop Cop Style EmptyLinesAroundBody check_line":{"type":"method","name":"check_line","children":[],"call":[" add_offence "," source_range "," processed_source [] "," processed_source "," processed_source buffer "," processed_source lines [] empty? "," processed_source lines [] "," processed_source lines "," add_offense "," source_ source_range  "]}," Rubocop Cop Style Documentation associated_comment?":{"type":"method","name":"associated_comment?","children":[],"call":[" annotation? ! "," annotation? ","distance > ","node loc keyword line - ","preceding_comment loc line ","preceding_comment loc ","node loc keyword line ","node loc keyword ","node loc ","ast_with_comments [] last ","ast_with_comments [] ","ast_with_comments [] empty? ","node loc keyword line -  > ","ast_with_comments [] last  loc line ","ast_with_comments [] last  loc "]}," Rubocop Cop Style AlignHash multiline?":{"type":"method","name":"multiline?","children":[],"call":["node loc expression source include? ","node loc expression source ","node loc expression ","node loc "]}," Rubocop Cop Style AccessModifierIndentation check_modifier":{"type":"method","name":"check_modifier","children":[],"call":[" unrecognized_style_detected "," opposite_style_detected ","offset == "," unexpected_indent_offset "," add_offence "," correct_style_detected ","@column_delta == "," expected_indent_offset - "," expected_indent_offset ","access_modifier_start_col - ","send_node loc expression column ","send_node loc expression ","send_node loc "," add_offense ","access_modifier_start_col -  == "," unexpected_indent_access_modifier_start_col -  "," expected_indent_offset -  == "," expected_indent_access_modifier_start_col -  - "," expected_indent_access_modifier_start_col -  ","send_node loc expression column  - "]}," Rubocop Cop Style AccessModifierIndentation check_body":{"type":"method","name":"check_body","children":[],"call":[" check_modifier ","modifiers each ","node loc expression column ","node loc expression ","node loc "," class modifier_node? "," class ","body children select ","body children ","body nil? "]}," Rubocop Cop Style AccessModifierIndentation on_block":{"type":"method","name":"on_block","children":[],"call":[" check_body "," class_constructor? "]}," Rubocop Cop Style AccessModifierIndentation on_module":{"type":"method","name":"on_module","children":[],"call":[" check_body "]}," Rubocop Cop Style AccessModifierIndentation on_sclass":{"type":"method","name":"on_sclass","children":[],"call":[" check_body "]}," Rubocop Cop Style AccessModifierIndentation on_class":{"type":"method","name":"on_class","children":[],"call":[" check_body "]}," Rubocop Cop ArraySyntax square_brackets?":{"type":"method","name":"square_brackets?","children":[],"call":["node loc begin is? ","node loc begin ","node loc "]}," Rubocop Cop Style AnnotationComment keyword?":{"type":"method","name":"keyword?","children":[],"call":[" config for_cop [] include? "," config for_cop [] "," config for_cop "," config "]}," Rubocop Cop Style AnnotationComment just_first_word_of_sentence?":{"type":"method","name":"just_first_word_of_sentence?","children":[],"call":["colon ! ","first_word == ","first_word capitalize "]}," Rubocop Cop Style AnnotationComment keyword_appearance?":{"type":"method","name":"keyword_appearance?","children":[],"call":[" keyword? ","first_word upcase "]}," Rubocop Cop Style AnnotationComment split_comment":{"type":"method","name":"split_comment","children":[],"call":["match captures ","comment text match ","comment text ","comment text match  captures ","comment text comment text match  "]}," Rubocop Cop Style AnnotationComment annotation?":{"type":"method","name":"annotation?","children":[],"call":[" just_first_word_of_sentence? ! "," just_first_word_of_sentence? "," keyword_appearance? "," split_comment "]}," Rubocop Formatter OffenseCountFormatter total_offense_count":{"type":"method","name":"total_offense_count","children":[],"call":["offense_counts values inject ","offense_counts values "]}," Rubocop Formatter OffenseCountFormatter ordered_offense_counts":{"type":"method","name":"ordered_offense_counts","children":[],"call":["Hash  [] ","v -@ ","offense_counts sort_by "]}," Rubocop Formatter OffenseCountFormatter report_summary":{"type":"method","name":"report_summary","children":[],"call":[" output puts "," output ","count to_s ljust ","offense_count to_s length + ","offense_count to_s length ","offense_count to_s ","count to_s ","offense_counts each "," total_offense_count ","total_count to_s length + ","total_count to_s length ","total_count to_s ","per_cop_counts each "," ordered_offense_counts "," total_offense_count  to_s length + "," total_offense_count  to_s length "," total_offense_count  to_s "," total_offense_count s each "," total_ total_offense_count  "," ordered_offense_counts  each "," ordered_ total_offense_count s "]}," Rubocop Formatter OffenseCountFormatter finished":{"type":"method","name":"finished","children":[],"call":[" report_summary "," ordered_offense_counts ","inspected_files count "]}," Rubocop Formatter OffenseCountFormatter file_finished":{"type":"method","name":"file_finished","children":[],"call":["@offense_counts [] ","o cop_name ","offenses each "]}," Rubocop Formatter OffenseCountFormatter started":{"type":"method","name":"started","children":[],"call":["Hash  new "]}," Rubocop Formatter JSONFormatter hash_for_offense":{"type":"method","name":"hash_for_offense","children":[],"call":[" hash_for_location ","offense corrected? ","offense cop_name ","offense message ","offense severity ","offense severity name "]}," Rubocop Formatter FuubarStyleFormatter progressbar_color":{"type":"method","name":"progressbar_color","children":[],"call":["COLOR_FOR_SEVERITY  [] ","@severest_offense severity ","@severest_offense severity name "]}," Rubocop Formatter FuubarStyleFormatter with_color":{"type":"method","name":"with_color","children":[],"call":[" output write "," output "," colorize chomp "," colorize "," progressbar_color "," rainbow enabled "," rainbow "]}," Rubocop Formatter FuubarStyleFormatter count_stats":{"type":"method","name":"count_stats","children":[],"call":["a severity_level <=> ","b severity_level ","a severity_level ","offenses max ","offenses << ","offenses empty? ","offenses reject ","offense severity ","offenses max_by ","offenses reject  max ","offenses reject  << ","offenses reject  empty? ","offenses reject  reject ","offenses reject  max_by "]}," Rubocop Formatter FuubarStyleFormatter file_finished":{"type":"method","name":"file_finished","children":[],"call":["@progressbar increment "," with_color "," report_file ","@progressbar clear ","offenses empty? "," count_stats "]}," Rubocop Formatter FuubarStyleFormatter started":{"type":"method","name":"started","children":[],"call":["@progressbar start "," with_color ","ProgressBar  create ","target_files count "," output ","target_files count == ","ProgressBar  create  start "]}," Rubocop Cop VariableInspector find_variables_in_loop":{"type":"method","name":"find_variables_in_loop","children":[],"call":["assignment_nodes_in_loop << ","referenced_variable_names_in_loop << ","asgn_node children first ","asgn_node children ","asgn_node type == ","asgn_node type ","node children first ","node children ","node type "," scan ","node children first  children first ","node children first  children ","node children first  type == ","node children first  type "]}," Rubocop Cop Team autocorrect_one_cop":{"type":"method","name":"autocorrect_one_cop","children":[],"call":["corrector rewrite ","Corrector  new ","cop_with_corrections corrections ","cop corrections any? ","cop corrections ","cops find ","Corrector  new  rewrite "]}," Rubocop Cop Style StringLiterals offense?":{"type":"method","name":"offense?","children":[],"call":["src !~ "," style == "," style ","src =~ ","node loc expression source ","node loc expression ","node loc ","node loc expression source  !~ ","node loc expression source  =~ "]}," Rubocop Cop Style SpaceInsideHashLiteralBraces offense?":{"type":"method","name":"offense?","children":[],"call":["has_space ! "," space_between? "," space_between?  ! "]}," Rubocop Cop Style SpaceInsideBlockBraces autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector insert_before ","corrector replace ","corrector remove ","range source "," lambda "]}," Rubocop Cop Style SpaceInsideBlockBraces style_for_empty_braces":{"type":"method","name":"style_for_empty_braces","children":[],"call":[" fail "," cop_config [] "," cop_config "]}," Rubocop Cop Style SpaceInsideBlockBraces offense":{"type":"method","name":"offense","children":[],"call":[" block_given? "," add_offense ","Parser Source Range  new "]}," Rubocop Cop Style SpaceInsideBlockBraces space":{"type":"method","name":"space","children":[],"call":[" correct_style_detected "," opposite_style_detected "," offense "," style == "," style "]}," Rubocop Cop Style SpaceInsideBlockBraces no_space":{"type":"method","name":"no_space","children":[],"call":[" correct_style_detected "," opposite_style_detected "," offense "," style == "," style "]}," Rubocop Cop Style SpaceInsideBlockBraces space_inside_right_brace":{"type":"method","name":"space_inside_right_brace","children":[],"call":[" space ","brace_with_space end_pos - ","brace_with_space end_pos ","brace_with_space begin_pos "," range_with_surrounding_space "," range_with_surrounding_space  end_pos - "," range_with_surrounding_space  end_pos "," range_with_surrounding_space  begin_pos "]}," Rubocop Cop Style SpaceInsideBlockBraces space_inside_left_brace":{"type":"method","name":"space_inside_left_brace","children":[],"call":[" space ","brace_with_space end_pos ","brace_with_space begin_pos + ","brace_with_space begin_pos "," range_with_surrounding_space "," offense ","pipe begin_pos ","left_brace end_pos "," cop_config [] "," cop_config "," range_with_surrounding_space  end_pos "," range_with_surrounding_space  begin_pos + "," range_with_surrounding_space  begin_pos "]}," Rubocop Cop Style SpaceInsideBlockBraces no_space_inside_left_brace":{"type":"method","name":"no_space_inside_left_brace","children":[],"call":[" no_space ","left_brace end_pos + ","left_brace end_pos "," offense ","pipe end_pos ","left_brace begin_pos "," cop_config [] "," cop_config ","left_brace end_pos == ","pipe begin_pos "]}," Rubocop Cop Style SpaceInsideBlockBraces braces_with_contents_inside":{"type":"method","name":"braces_with_contents_inside","children":[],"call":[" space_inside_right_brace "," no_space ","right_brace end_pos ","right_brace begin_pos ","inner =~ "," space_inside_left_brace "," no_space_inside_left_brace ","args loc begin ","args loc ","node loc end ","node loc ","node loc begin "]}," Rubocop Cop Style SpaceInsideBlockBraces check_inside":{"type":"method","name":"check_inside","children":[],"call":[" offense ","range end_pos ","range begin_pos "," style_for_empty_braces == "," style_for_empty_braces "," braces_with_contents_inside ","inner =~ ","range source ","Parser Source Range  new ","right_brace begin_pos ","left_brace end_pos ","right_brace end_pos ","left_brace begin_pos ","left_brace end_pos == ","node loc expression source_buffer ","node loc expression ","node loc ","Parser Source Range  new  end_pos ","Parser Source Range  new  begin_pos ","range source  =~ ","Parser Source Range  new  source "]}," Rubocop Cop Style SpaceInsideBlockBraces on_block":{"type":"method","name":"on_block","children":[],"call":[" check_inside ","node loc end ","node loc ","node loc begin ","Util  block_length > ","Util  block_length "," config for_cop [] "," config for_cop "," config ","node loc begin is? "]}," Rubocop Cop Style SpaceBeforeBlockBraces autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector insert_before ","corrector remove ","range source "," lambda "]}," Rubocop Cop Style SpaceBeforeBlockBraces space_detected":{"type":"method","name":"space_detected","children":[],"call":[" opposite_style_detected "," add_offense ","Parser Source Range  new ","left_brace begin_pos ","space_plus_brace begin_pos ","left_brace source_buffer ","Parser Source Range  new _plus_brace begin_pos "]}," Rubocop Cop Style SpaceBeforeBlockBraces space_missing":{"type":"method","name":"space_missing","children":[],"call":[" opposite_style_detected "," add_offense "]}," Rubocop Cop Style SpaceBeforeBlockBraces on_block":{"type":"method","name":"on_block","children":[],"call":[" space_missing "," space_detected "," correct_style_detected "," style ","space_plus_brace source start_with? ","space_plus_brace source "," range_with_surrounding_space ","node loc begin ","node loc ","Util  block_length > ","Util  block_length "," config for_cop [] "," config for_cop "," config ","node loc begin is? "," range_with_surrounding_space  source start_with? "," range_with_surrounding_space  source "]}," Rubocop Cop Style SpaceAroundEqualsInParameterDefault message":{"type":"method","name":"message","children":[],"call":[" format "," style == "," style "]}," Rubocop Cop Style SpaceAroundEqualsInParameterDefault no_surrounding_space?":{"type":"method","name":"no_surrounding_space?","children":[],"call":[" space_between? ! "," space_between? "]}," Rubocop Cop Style SpaceAroundEqualsInParameterDefault space_on_both_sides?":{"type":"method","name":"space_on_both_sides?","children":[],"call":[" space_between? "]}," Rubocop Cop Style SpaceAroundEqualsInParameterDefault check_optarg":{"type":"method","name":"check_optarg","children":[],"call":[" unrecognized_style_detected "," opposite_style_detected "," style == "," style "," add_offense ","Parser Source Range  new ","value pos begin_pos ","value pos ","arg pos end_pos ","arg pos "," processed_source buffer "," processed_source "," correct_style_detected "," no_surrounding_space? "," space_on_both_sides? ","  no_surrounding_space? ? ","  space_on_both_sides? ? "]}," Rubocop Cop Style SingleLineMethods move_comment":{"type":"method","name":"move_comment","children":[],"call":["corrector remove ","eol_comment loc expression ","eol_comment loc ","corrector insert_before ","text + + ","  * ","node loc keyword column ","node loc keyword ","node loc ","text + ","node loc expression ","eol_comment loc expression source ","eol_comment loc expression source  + + ","eol_comment loc expression source  + "]}," Rubocop Cop Style SingleLineMethods break_line_before":{"type":"method","name":"break_line_before","children":[],"call":["corrector insert_before ","\n + ","  * ","node loc keyword column + ","indent_steps * ","node loc keyword column ","node loc keyword ","node loc "]}," Rubocop Cop Style SingleLineMethods autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << "," move_comment "," break_line_before ","node loc end ","node loc ","body loc expression ","body loc ","part loc expression ","part loc ","body children each ","body children ","body type == ","body type "," lambda ","c loc line == ","node loc expression line ","node loc expression ","c loc line ","c loc "," processed_source comments find "," processed_source comments "," processed_source "]}," Rubocop Cop Style Semicolon autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector remove "," lambda "]}," Rubocop Cop Style SelfAssignment check_boolean_node":{"type":"method","name":"check_boolean_node","children":[],"call":[" add_offense ","rhs loc operator source ","rhs loc operator ","rhs loc ","first_operand == "," s "," format ","rhs loc rhs loc operator source  source ","rhs loc rhs loc operator source  "]}," Rubocop Cop Style SelfAssignment check_send_node":{"type":"method","name":"check_send_node","children":[],"call":[" add_offense ","receiver == "," s ","OPS  include? "," format "]}," Rubocop Cop Style SelfAssignment check":{"type":"method","name":"check","children":[],"call":[" check_boolean_node ","(sym :and) include? ","rhs type "," check_send_node ","rhs type == "]}," Rubocop Cop Style SelfAssignment on_cvasgn":{"type":"method","name":"on_cvasgn","children":[],"call":[" check "]}," Rubocop Cop Style SelfAssignment on_ivasgn":{"type":"method","name":"on_ivasgn","children":[],"call":[" check "]}," Rubocop Cop Style SelfAssignment on_lvasgn":{"type":"method","name":"on_lvasgn","children":[],"call":[" check "]}," Rubocop Cop Style RegexpLiteral configure_slashes":{"type":"method","name":"configure_slashes","children":[],"call":["cfg []= "," config_to_allow_offenses= ","value > "," max_slashes ","cfg [] < ","cfg [] ","value < ","cfg [] > ","cfg key? "," config_to_allow_offenses ","value >= "," config_to_allow_offenses=  []= "," config_to_allow_offenses=  [] < "," config_to_allow_offenses=  [] "," config_to_allow_offenses=  [] > "," config_to_allow_offenses=  key? "]}," Rubocop Cop Style RegexpLiteral slash_count_in_percent_r_regexp=":{"type":"method","name":"slash_count_in_percent_r_regexp=","children":[],"call":["(lvar :current) min ","value - "," configure_slashes "]}," Rubocop Cop Style RegexpLiteral slash_count_in_slashes_regexp=":{"type":"method","name":"slash_count_in_slashes_regexp=","children":[],"call":["(lvar :current) max "," configure_slashes "]}," Rubocop Cop Style PercentLiteralDelimiters same_line?":{"type":"method","name":"same_line?","children":[],"call":["range begin line == ","child_node loc line ","child_node loc ","range begin line ","range begin ","child_node is_a? ! ","child_node is_a? "]}," Rubocop Cop Style PercentLiteralDelimiters new_line":{"type":"method","name":"new_line","children":[],"call":[" same_line? "]}," Rubocop Cop Style PercentLiteralDelimiters string_source":{"type":"method","name":"string_source","children":[],"call":["node loc expression source ","node loc expression ","node loc ","node type == ","node type ","node respond_to? ","node is_a? "]}," Rubocop Cop Style PercentLiteralDelimiters begin_source":{"type":"method","name":"begin_source","children":[],"call":["node loc begin source ","node loc begin ","node loc ","node loc respond_to? "]}," Rubocop Cop Style PercentLiteralDelimiters contains_preferred_delimiter?":{"type":"method","name":"contains_preferred_delimiter?","children":[],"call":["s include? ","preferred_delimiters any? ","(send\n  (send\n    (lvar :node) :children) :map) compact any? ","(send\n  (send\n    (lvar :node) :children) :map) compact "," string_source ","node children map ","node children "," preferred_delimiters "," preferred_delimiters  any? ","  preferred_delimiters  "]}," Rubocop Cop Style PercentLiteralDelimiters uses_preferred_delimiter?":{"type":"method","name":"uses_preferred_delimiter?","children":[],"call":[" preferred_delimiters [] == "," begin_source [] "," begin_source "," preferred_delimiters [] "," preferred_delimiters "]}," Rubocop Cop Style PercentLiteralDelimiters contents":{"type":"method","name":"contents","children":[],"call":["node children first to_s ","node children first ","node children ","Parser Source Range  new source ","Parser Source Range  new ","node children last loc expression end_pos ","node children last loc expression ","node children last loc ","node children last ","node children first loc expression begin_pos ","node children first loc expression ","node children first loc ","node loc expression source_buffer ","node loc expression ","node loc ","node children first is_a? ","node children empty? ","first_child to_s "," source ","first_child is_a? ","last_child loc expression source ","last_child loc expression ","last_child loc ","node type == ","node type "]}," Rubocop Cop Style PercentLiteralDelimiters preferred_delimiters":{"type":"method","name":"preferred_delimiters","children":[],"call":[" cop_config [] [] split "," cop_config [] [] "," cop_config [] "," cop_config "]}," Rubocop Cop Style PercentLiteralDelimiters type":{"type":"method","name":"type","children":[],"call":["node loc begin source [] ","node loc begin source ","node loc begin ","node loc "]}," Rubocop Cop Style PercentLiteralDelimiters on_percent_literal":{"type":"method","name":"on_percent_literal","children":[],"call":[" add_offense "," contains_preferred_delimiter? ! "," contains_preferred_delimiter? "," uses_preferred_delimiter? ! "," uses_preferred_delimiter? ","types include? "," type "," type s include? ","  type  "]}," Rubocop Cop Style PercentLiteralDelimiters percent_literal?":{"type":"method","name":"percent_literal?","children":[],"call":["begin_source start_with? "," begin_source "," begin_source  start_with? ","  begin_source  "]}," Rubocop Cop Style PercentLiteralDelimiters process":{"type":"method","name":"process","children":[],"call":[" on_percent_literal "," percent_literal? "]}," Rubocop Cop Style PercentLiteralDelimiters autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","node loc expression ","node loc "," lambda ","type + + + + + + ","type + + + + + ","type + + + + ","type + + + ","type + + ","type + "," contents ","node children last ","node children ","node children first ","node type == ","node type "," new_line ","node loc end ","node loc begin "," preferred_delimiters "," type "," type  + + + + + + "," type  + + + + + "," type  + + + + "," type  + + + "," type  + + "," type  + ","node  type  == ","node  type  ","  type  "]}," Rubocop Cop Style PercentLiteralDelimiters message":{"type":"method","name":"message","children":[],"call":["delimiters [] "," preferred_delimiters "," type "," preferred_delimiters  [] "," preferred_ preferred_delimiters  ","  type  "]}," Rubocop Cop Style PercentLiteralDelimiters on_xstr":{"type":"method","name":"on_xstr","children":[],"call":[" process "]}," Rubocop Cop Style PercentLiteralDelimiters on_sym":{"type":"method","name":"on_sym","children":[],"call":[" process "]}," Rubocop Cop Style PercentLiteralDelimiters on_str":{"type":"method","name":"on_str","children":[],"call":[" process "]}," Rubocop Cop Style PercentLiteralDelimiters on_regexp":{"type":"method","name":"on_regexp","children":[],"call":[" process "]}," Rubocop Cop Style PercentLiteralDelimiters on_array":{"type":"method","name":"on_array","children":[],"call":[" process "]}," Rubocop Cop Style LineEndConcatenation string_type?":{"type":"method","name":"string_type?","children":[],"call":["(sym :str) include? ","(str \"'\") include? ","node loc begin source ","node loc begin ","node loc ","node type ","node loc respond_to? "]}," Rubocop Cop Style LambdaCall offense?":{"type":"method","name":"offense?","children":[],"call":["node loc selector ","node loc "," style == "," style ","node loc selector nil? "]}," Rubocop Cop Style IndentHash message":{"type":"method","name":"message","children":[],"call":[" format "]}," Rubocop Cop Style IndentHash unexpected_column":{"type":"method","name":"unexpected_column","children":[],"call":["unexpected_base_column + ","left_parenthesis column + ","left_parenthesis column ","left_brace source_line =~ ","left_brace source_line "," style == "," style ","unexpected_base_column + + ","left_parenthesis column +  + ","left_brace source_line =~  + ","left_parenthesis column +  + + ","left_brace source_line =~  + + "]}," Rubocop Cop Style IndentHash base_description":{"type":"method","name":"base_description","children":[],"call":[" style == "," style "]}," Rubocop Cop Style IndentHash expected_column":{"type":"method","name":"expected_column","children":[],"call":["base_column + ","left_brace source_line =~ ","left_brace source_line ","left_parenthesis column + ","left_parenthesis column "," style == "," style ","base_column + + ","left_brace source_line =~  + ","left_parenthesis column +  + ","left_brace source_line =~  + + ","left_parenthesis column +  + + "]}," Rubocop Cop Style IndentHash check":{"type":"method","name":"check","children":[],"call":[" unrecognized_style_detected "," opposite_style_detected ","column == "," unexpected_column "," add_offense "," message "," base_description "," correct_style_detected ","@column_delta == "," expected_column - "," expected_column ","first_pair loc expression column ","first_pair loc expression ","first_pair loc ","first_pair loc expression line == ","left_brace line ","first_pair loc expression line ","hash_node loc begin ","hash_node loc ","first_pair nil? ","hash_node children first ","hash_node children "," ignored_node? "," check_first_pair "," check_based_on_longest_key "," separator_style? ","first_pair loc expression column  == "," unexpected_first_pair loc expression column  "," expected_column -  == ","@first_pair loc expression column _delta == "," expected_first_pair loc expression column  - "," expected_first_pair loc expression column  ","first_pair loc expression first_pair loc expression column  ","hash_node children first  loc expression column ","hash_node children first  loc expression ","hash_node children first  loc ","hash_node children first  loc expression line == ","hash_node loc begin  line ","hash_node children first  loc expression line ","hash_node children first  nil? "," check_hash_node children first  "]}," Rubocop Cop Style IndentHash on_send":{"type":"method","name":"on_send","children":[],"call":[" ignore_node "," check ","left_brace line == ","left_parenthesis line ","left_brace line ","hash_node loc begin ","hash_node loc "," on_node ","args each ","node loc begin ","node loc ","hash_node loc begin  line == ","node loc begin  line ","hash_node loc begin  line "]}," Rubocop Cop Style IndentHash on_hash":{"type":"method","name":"on_hash","children":[],"call":[" check ","node loc begin ","node loc "]}," Rubocop Cop Style IndentArray message":{"type":"method","name":"message","children":[],"call":[" format "]}," Rubocop Cop Style IndentArray on_array":{"type":"method","name":"on_array","children":[],"call":[" add_offense ","@column_delta != ","expected_column - ","base_column + ","left_bracket source_line =~ ","left_bracket source_line ","first_pair loc expression column ","first_pair loc expression ","first_pair loc ","first_pair loc expression line == ","left_bracket line ","first_pair loc expression line ","left_bracket nil? ","node loc begin ","node loc ","first_pair nil? ","node children first ","node children ","expected_column -  != ","@first_pair loc expression column _delta != ","base_column +  - ","expected_first_pair loc expression column  - ","left_bracket source_line =~  + ","base_first_pair loc expression column  + ","node loc begin  source_line =~ ","node loc begin  source_line ","first_pair loc expression first_pair loc expression column  ","node children first  loc expression column ","node children first  loc expression ","node children first  loc ","node children first  loc expression line == ","node loc begin  line ","node children first  loc expression line ","node loc begin  nil? ","node children first  nil? "]}," Rubocop Cop Style FormatString message":{"type":"method","name":"message","children":[],"call":["method_name == "," style "," style == "]}," Rubocop Cop Style FormatString percent?":{"type":"method","name":"percent?","children":[],"call":["arg_nodes [] type == ","arg_nodes [] type ","arg_nodes [] ","(sym :str) include? ","receiver_node type ","method_name == "]}," Rubocop Cop Style FormatString sprintf?":{"type":"method","name":"sprintf?","children":[],"call":[" command? "]}," Rubocop Cop Style FormatString format?":{"type":"method","name":"format?","children":[],"call":[" command? "]}," Rubocop Cop Style FormatString offending_node?":{"type":"method","name":"offending_node?","children":[],"call":[" sprintf? "," format? "," percent? "," style "]}," Rubocop Cop Style FormatString on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," offending_node? "]}," Rubocop Cop Style FileName investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense "," source_range ","processed_source [] ","processed_source buffer ","basename =~ ","File  basename sub ","File  basename "," config file_to_include? "," config ","processed_source buffer name ","fragment =~ ","basename split all? ","basename split "," snake_case? ","File  basename sub  =~ ","File  File  basename sub  sub ","File  File  basename sub  ","File  basename sub  split all? ","File  basename sub  split "]}," Rubocop Cop Style EmptyLineBetweenDefs autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector insert_before "," lambda "," range_with_surrounding_space ","node loc expression ","node loc ","  range_with_surrounding_space _with_surrounding_space "]}," Rubocop Cop Style DoubleNegation not_node?":{"type":"method","name":"not_node?","children":[],"call":["node loc selector is? ","node loc selector ","node loc ","method_name == ","args empty? "]}," Rubocop Cop Style DoubleNegation on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," not_node? "]}," Rubocop Cop Style ClassAndModuleChildren compact_node_name?":{"type":"method","name":"compact_node_name?","children":[],"call":["node loc name source =~ ","node loc name source ","node loc name ","node loc "]}," Rubocop Cop Style ClassAndModuleChildren one_child?":{"type":"method","name":"one_child?","children":[],"call":["body type != ","body type ","(sym :module) include? "]}," Rubocop Cop Style ClassAndModuleChildren check_compact_style":{"type":"method","name":"check_compact_style","children":[],"call":[" add_offense "," compact_node_name? ! "," compact_node_name? "," one_child? "]}," Rubocop Cop Style ClassAndModuleChildren check_nested_style":{"type":"method","name":"check_nested_style","children":[],"call":[" add_offense "," compact_node_name? "]}," Rubocop Cop Style ClassAndModuleChildren check_style":{"type":"method","name":"check_style","children":[],"call":[" check_compact_style "," check_nested_style "," style == "," style "]}," Rubocop Cop Style ClassAndModuleChildren on_module":{"type":"method","name":"on_module","children":[],"call":[" check_style "]}," Rubocop Cop Style ClassAndModuleChildren on_class":{"type":"method","name":"on_class","children":[],"call":[" check_style "]}," Rubocop Cop Style CharacterLiteral offense?":{"type":"method","name":"offense?","children":[],"call":["node loc expression source size between? ","node loc expression source size ","node loc expression source ","node loc expression ","node loc ","node loc begin is? ","node loc begin "]}," Rubocop Cop Style AlignParameters base_column":{"type":"method","name":"base_column","children":[],"call":["args first loc column ","args first loc ","args first ","node loc column + ","node loc column ","node loc "," fixed_indentation? ","indentation_of_line + ","(str \"\\\\S.*\") match begin ","(str \"\\\\S.*\") match ","node loc expression source_buffer source_line ","node loc expression source_buffer ","node loc expression "," target_method_lineno ","(str \"\\S.*\") match begin  + ","indentation_of_node loc expression source_buffer source_line  + ","node loc expression source_buffer source_node loc expression source_buffer source_line  "," target_method_node loc expression source_buffer source_line no "," target_method_ target_method_lineno  "]}," Rubocop Cop Style AlignParameters fixed_indentation?":{"type":"method","name":"fixed_indentation?","children":[],"call":[" cop_config [] == "," cop_config [] "," cop_config "]}," Rubocop Cop Style AlignHash explicit_hash?":{"type":"method","name":"explicit_hash?","children":[],"call":["node loc begin nil? ! ","node loc begin nil? ","node loc begin ","node loc "]}," Rubocop Cop Style AlignHash hash?":{"type":"method","name":"hash?","children":[],"call":["node type == ","node type ","node respond_to? "]}," Rubocop Cop Style AlignHash ignore_last_argument_hash?":{"type":"method","name":"ignore_last_argument_hash?","children":[],"call":[" explicit_hash? ! "," explicit_hash? "," cop_config [] "," cop_config "]}," Rubocop Cop Style AlignHash on_send":{"type":"method","name":"on_send","children":[],"call":[" ignore_node "," ignore_last_argument_hash? "," hash? ","node children last ","node children "]}," Rubocop Cop Rails ScopeArgs on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","second_arg type == ","second_arg type ","args [] ","args size == ","args size "," command? ","args []  type == ","args []  type "]}," Rubocop Cop Rails ActionFilter preferred_method":{"type":"method","name":"preferred_method","children":[],"call":[" good_methods [] "," bad_methods index ","method to_sym "," bad_methods "," good_methods "]}," Rubocop Cop Rails ActionFilter good_methods":{"type":"method","name":"good_methods","children":[],"call":[" style == "," style "]}," Rubocop Cop Rails ActionFilter bad_methods":{"type":"method","name":"bad_methods","children":[],"call":[" style == "," style "]}," Rubocop Cop Rails ActionFilter offending_method?":{"type":"method","name":"offending_method?","children":[],"call":[" bad_methods include? "," bad_methods "]}," Rubocop Cop Rails ActionFilter check_method_node":{"type":"method","name":"check_method_node","children":[],"call":[" add_offense "," format "," preferred_method "," offending_method? "]}," Rubocop Cop Rails ActionFilter autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace "," preferred_method to_s "," preferred_method ","node loc selector source ","node loc selector ","node loc "," lambda "]}," Rubocop Cop Rails ActionFilter on_send":{"type":"method","name":"on_send","children":[],"call":[" check_method_node ","receiver nil? "]}," Rubocop Cop Rails ActionFilter on_block":{"type":"method","name":"on_block","children":[],"call":[" check_method_node "]}," Rubocop Cop Offense <=>":{"type":"method","name":"<=>","children":[],"call":["result == "," send <=> ","other send "," send ","(sym :line) each "," send <=>  == "]}," Rubocop Cop Offense ==":{"type":"method","name":"==","children":[],"call":[" cop_name == ","other cop_name "," cop_name "," message == ","other message "," message "," column == ","other column "," column "," line == ","other line "," line "," severity == ","other severity "," severity "]}," Rubocop Cop Offense real_column":{"type":"method","name":"real_column","children":[],"call":[" column + "," column "]}," Rubocop Cop Offense severity_level":{"type":"method","name":"severity_level","children":[],"call":["SEVERITIES  index + ","SEVERITIES  index "," severity "]}," Rubocop Cop Offense severity_code":{"type":"method","name":"severity_code","children":[],"call":["@severity to_s [] upcase ","@severity to_s [] ","@severity to_s "]}," Rubocop Cop Offense to_s":{"type":"method","name":"to_s","children":[],"call":[" format "," message "," real_column "," line "," severity_code "," severity code "," severity "]}," Rubocop Cop Offense initialize":{"type":"method","name":"initialize","children":[],"call":[" freeze ","corrected freeze ","cop_name freeze ","message freeze ","location column freeze ","location column ","location line freeze ","location line ","location freeze ","severity freeze "," fail ","SEVERITIES  include? ","Rubocop Cop Severity  new "]}," Rubocop Cop Lint Syntax offense_from_diagnostic":{"type":"method","name":"offense_from_diagnostic","children":[],"call":[]}," Rubocop Cop Lint Syntax offenses_from_diagnostics":{"type":"method","name":"offenses_from_diagnostics","children":[],"call":[]}," Rubocop Cop Lint StringConversionInInterpolation on_dstr":{"type":"method","name":"on_dstr","children":[],"call":[" add_offense ","args empty? ","method_name == ","final_node type == ","final_node type ","begin_node children last ","begin_node children ","(send\n  (send\n    (lvar :node) :children) :select) each ","n type == ","n type ","node children select ","node children ","begin_node children last  type == ","begin_node children last  type "]}," Rubocop Cop Lint RequireParentheses offense?":{"type":"method","name":"offense?","children":[],"call":["(sym :and) include? ","node type "]}," Rubocop Cop Lint Loop register_offense":{"type":"method","name":"register_offense","children":[],"call":[" add_offense "]}," Rubocop Cop Lint LiteralInInterpolation on_dstr":{"type":"method","name":"on_dstr","children":[],"call":[" add_offense ","LITERALS  include? ","final_node type ","begin_node children last ","begin_node children ","(send\n  (send\n    (lvar :node) :children) :select) each ","n type == ","n type ","node children select ","node children "," special_string? ","begin_node children last  type "]}," Rubocop Cop Lint LiteralInCondition on_case":{"type":"method","name":"on_case","children":[],"call":[" check_for_literal ","whens each "," handle_node "," check_case_cond "]}," Rubocop Cop Lint DeprecatedClassMethods replacement_method":{"type":"method","name":"replacement_method","children":[],"call":[" format ","data [] "]}," Rubocop Cop Lint DeprecatedClassMethods deprecated_method":{"type":"method","name":"deprecated_method","children":[],"call":[" format ","data [] "]}," Rubocop Cop Lint DeprecatedClassMethods class_node":{"type":"method","name":"class_node","children":[],"call":[" s ","data [] "]}," Rubocop Cop Lint DeprecatedClassMethods autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","data [] to_s ","data [] ","node loc selector ","node loc ","method_name == ","receiver == "," class_node ","DEPRECATED_METHODS  each "," lambda "," class_nodes include? "," class_nodes "]}," Rubocop Cop Lint DeprecatedClassMethods on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","MSG  format "," replacement_method "," deprecated_method ","method_name == ","data [] ","receiver == "," class_node ","DEPRECATED_METHODS  each "," format "," class_nodes include? "," class_nodes "]}," Rubocop Cop Cop enabled_line?":{"type":"method","name":"enabled_line?","children":[],"call":["@processed_source comment_config cop_enabled_at_line? ","@processed_source comment_config "]}," Rubocop Cop Cop config_to_allow_offenses=":{"type":"method","name":"config_to_allow_offenses=","children":[],"call":["Formatter DisabledConfigFormatter  config_to_allow_offenses []= "," cop_name ","Formatter DisabledConfigFormatter  config_to_allow_offenses "]}," Rubocop Cop Cop config_to_allow_offenses":{"type":"method","name":"config_to_allow_offenses","children":[],"call":["Formatter DisabledConfigFormatter  config_to_allow_offenses [] "," cop_name ","Formatter DisabledConfigFormatter  config_to_allow_offenses "]}," Rubocop Cop Cop add_offense":{"type":"method","name":"add_offense","children":[],"call":[" block_given? ","@offenses << ","Offense  new "," autocorrect? "," name "," autocorrect "," display_cop_names? "," message "," default_severity "," custom_severity ","o location == ","o location ","@offenses find "," enabled_line? ","location line ","node loc send ","node loc ","loc is_a? ","o node loc send  == ","o node loc send  ","node loc send  line "]}," Rubocop CommentConfig non_comment_token_line_numbers":{"type":"method","name":"non_comment_token_line_numbers","children":[],"call":["(send\n  (lvar :non_comment_tokens) :map) uniq ","token pos line ","token pos ","non_comment_tokens map ","token type == ","token type "," processed_source tokens reject "," processed_source tokens "," processed_source "]}," Rubocop CommentConfig comment_only_line?":{"type":"method","name":"comment_only_line?","children":[],"call":["non_comment_line_number == "," non_comment_token_line_numbers none? "," non_comment_token_line_numbers "]}," Rubocop CommentConfig each_mentioned_cop":{"type":"method","name":"each_mentioned_cop","children":[],"call":["cop_names each "," comment_only_line? ! "," comment_only_line? ","comment loc expression line ","comment loc expression ","comment loc ","switch == ","cops_string split ","Cop Cop  all map ","Cop Cop  all ","cops_string == ","match captures ","comment text match ","comment text "," processed_source comments each "," processed_source comments "," processed_source "," processed_source comments nil? ","cops_string split  each ","comment text match  captures ","comment text comment text match  "]}," Rubocop CommentConfig analyze":{"type":"method","name":"analyze","children":[],"call":["disabled_line_ranges [] << ","disabled_line_ranges [] ","disablement_start_line_numbers each ","disablement_start_line_numbers delete ","disablement_start_line_numbers []= "," each_mentioned_cop ","hash []= ","Hash  new ","disablement_disablement_start_line_numbers delete _numbers each ","disablement_disablement_start_line_numbers delete _numbers delete ","disablement_disablement_start_line_numbers delete _numbers []= "]}," Rubocop CommentConfig cop_disabled_line_ranges":{"type":"method","name":"cop_disabled_line_ranges","children":[],"call":[" analyze "]}," Rubocop CommentConfig cop_enabled_at_line?":{"type":"method","name":"cop_enabled_at_line?","children":[],"call":["range include? ","disabled_line_ranges none? "," cop_disabled_line_ranges [] "," cop_disabled_line_ranges ","cop cop_name ","cop respond_to? "," cop_disabled_line_ranges []  none? "," cop_ cop_disabled_line_ranges []  [] "," cop cop_name _disabled_line_ranges [] "," cop_ cop_disabled_line_ranges []  "," cop cop_name _disabled_line_ranges ","cop cop_name  cop cop_name _name ","cop cop_name  respond_to? "]}," Rubocop CommentConfig initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rubocop Cop Style PercentLiteralDelimiters source":{"type":"method","name":"source","children":[],"call":["Parser Source Range  new source ","Parser Source Range  new ","end_node loc expression end_pos ","end_node loc expression ","end_node loc ","begin_node loc expression begin_pos ","begin_node loc expression ","begin_node loc ","node loc expression source_buffer ","node loc expression ","node loc "]}," Rubocop Cop Style IndentHash check_first_pair":{"type":"method","name":"check_first_pair","children":[],"call":[" unrecognized_style_detected "," opposite_style_detected ","column == "," unexpected_column "," add_offense "," message "," base_description "," correct_style_detected ","@column_delta == "," expected_column - "," expected_column ","first_pair loc expression column ","first_pair loc expression ","first_pair loc ","first_pair loc expression column  == "," unexpected_first_pair loc expression column  "," expected_column -  == ","@first_pair loc expression column _delta == "," expected_first_pair loc expression column  - "," expected_first_pair loc expression column  ","first_pair loc expression first_pair loc expression column  "]}," Rubocop Cop Style IndentHash check_based_on_longest_key":{"type":"method","name":"check_based_on_longest_key","children":[],"call":[" check_first_pair ","key_lengths max - ","key_lengths first ","key_lengths max ","pairs first ","pair children first loc expression length ","pair children first loc expression ","pair children first loc ","pair children first ","pair children ","pairs map "]}," Rubocop Cop Style IndentHash separator_style?":{"type":"method","name":"separator_style?","children":[],"call":[" config for_cop [] == "," config for_cop [] "," config for_cop "," config ","separator is? ","first_pair loc operator ","first_pair loc ","first_pair loc operator  is? "]}," Rubocop Cop Lint LiteralInCondition check_case_cond":{"type":"method","name":"check_case_cond","children":[],"call":[" handle_node ","node type == ","node type "," primitive_array? ! "," primitive_array? "]}," Rubocop Cop Lint LiteralInCondition primitive_array?":{"type":"method","name":"primitive_array?","children":[],"call":[" basic_literal? ","node children all? ","node children "]}," Rubocop Cop Lint LiteralInCondition basic_literal?":{"type":"method","name":"basic_literal?","children":[],"call":["BASIC_LITERALS  include? ","node type "," primitive_array? ","node type == "]}," Rubocop CLI handle_exiting_options":{"type":"method","name":"handle_exiting_options","children":[],"call":[" exit "," print_available_cops ","@options [] "," puts ","Rubocop Version  version ","@options key? ","Options EXITING_OPTIONS  any? "]}," Rubocop Cop SurroundingSpace previous_non_space":{"type":"method","name":"previous_non_space","children":[],"call":[" whitespace? ","tokens [] ","(send\n  (lvar :ix) :-\n  (int 1)) downto ","ix - "," whitespace? ! ","tokens [] reverse find ","tokens [] reverse "," whitokens [] espace? ","tokens [] okens [] ","(send\n  (lvar :ix) :-\n  (intokens []  1)) downtokens [] o "," whitokens [] espace? ! ","tokens [] okens [] reverse find ","tokens [] okens [] reverse "]}," Rubocop Cop SurroundingSpace tokens_on_same_row?":{"type":"method","name":"tokens_on_same_row?","children":[],"call":["t1 pos lineno == ","t2 pos lineno ","t2 pos ","t1 pos lineno ","t1 pos "]}," Rubocop Cop NumericLiterals inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","t pos lineno ","t pos ","t text split grep any? ","t text split grep ","t text split ","t text ","(sym :on_int) include? ","t type ","tokens each "]}," Rubocop Cop IfThenElse kind_of_if":{"type":"method","name":"kind_of_if","children":[],"call":["t text =~ ","t text ","t type ","tokens [] each ","tokens [] "]}," Rubocop Cop IfThenElse inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","t pos lineno ","t pos ","ERROR_MESSAGE  [] "," kind_of_if ","ix + ","(str \"if\") include? ","t text ","t type == ","t type ","tokens each_with_index "," error_message "," kind_of_if == "," class "," ERROR_MESSAGE  [] _message "]}," Rubocop Cop HashSyntax inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","assoc_new [] [] [] [] lineno ","assoc_new [] [] [] [] ","assoc_new [] [] [] ","assoc_new [] [] ","assoc_new [] ","assoc_new [] [] == "," each ","(sym :symbol_literal) include? ! ","(sym :symbol_literal) include? ","keys find ","assoclist_from_args [] map ","assoclist_from_args [] ","keys any? "]}," Rubocop Cop Grammar add_matching_rbrace":{"type":"method","name":"add_matching_rbrace","children":[],"call":["@table []= ","@table [] ","@ix + ","t == ","brace_depth == ","@tokens_without_pos [] index ","@tokens_without_pos [] ","ix + "]}," Rubocop Cop Grammar process_embedded_expressions":{"type":"method","name":"process_embedded_expressions","children":[],"call":["@tokens_without_pos [] []= ","@tokens_without_pos [] ","brace_depth == ","type == ","@tokens_without_pos each_with_index "]}," Rubocop Cop EndOfLine inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","index + ","line =~ ","source each_with_index "]}," Rubocop Cop DefParentheses inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","ERROR_MESSAGE  [] ","pos lineno ","first_body_token pos lineno > ","first_body_token pos lineno ","first_body_token pos "," whitespace? ! "," whitespace? ","tokens [] find ","tokens [] ","rparen_ix + ","start + ","t text == ","t text ","tokens [] index ","method_name_ix + ","t pos == ","t pos ","tokens index ","def_sexp [] [] == ","def_sexp [] [] ","def_sexp [] ","def_sexp [] != "," each "," check ","def_sexp [] []  lineno ","first_body_token def_sexp [] []  lineno > ","first_body_token def_sexp [] []  lineno ","first_body_token def_sexp [] []  ","start +  + ","method_name_ix +  + ","t def_sexp [] []  == ","t def_sexp [] []  "]}," Rubocop Cop Cop whitespace?":{"type":"method","name":"whitespace?","children":[],"call":["(sym :on_sp) include? ","token type "]}," Rubocop Cop Token to_s":{"type":"method","name":"to_s","children":[],"call":["@text inspect ","@pos column ","@pos lineno ","@pos line "]}," Rubocop Cop Token initialize":{"type":"method","name":"initialize","children":[],"call":["Position  new "]}," Rubocop Cop Position make_position_objects":{"type":"method","name":"make_position_objects","children":[],"call":[]}," Rubocop Cop AlignParameters find_first_non_whitespace_token":{"type":"method","name":"find_first_non_whitespace_token","children":[],"call":["start_ix + "," whitespace? ! "," whitespace? ","@tokens [] index ","@tokens [] ","i + ","i == ","@tokens [] text ","ix downto ","@token_indexes [] ","start_@token_indexes []  + ","@token_indexes []  downto "]}," Rubocop Cop AlignParameters find_pos_in_sexp":{"type":"method","name":"find_pos_in_sexp","children":[],"call":[" find_pos_in_sexp ","sexp grep each ","sexp grep ","sexp [] ","Position  === "," find_ find_pos_in_sexp _in_sexp "]}," Rubocop Cop AlignParameters position_of":{"type":"method","name":"position_of","children":[],"call":["@tokens [] pos ","@tokens [] "," find_first_non_whitespace_token "," find_pos_in_sexp ","sexp [] == ","sexp [] ","@tokens []  find_pos_in_sexp  "," find_ find_pos_in_sexp _in_sexp "]}," Rubocop Cop AlignParameters get_lparen_ix":{"type":"method","name":"get_lparen_ix","children":[],"call":["method_name_ix + ","@tokens [] map index ","@tokens [] map ","@tokens [] ","@token_indexes [] ","method_add_arg [] [] [] ","method_add_arg [] [] ","method_add_arg [] ","@token_indexes []  + "]}," Rubocop Cop AlignParameters divide_args":{"type":"method","name":"divide_args","children":[],"call":["args [] ","args [] == "]}," Rubocop Cop AlignParameters get_args":{"type":"method","name":"get_args","children":[],"call":["args_add_block [] ","args_add_block [] empty? "," fail ","args_add_block [] == ","arg_paren [] ","(sym :command) include? ","arg_paren [] [] [] ","arg_paren [] [] ","arg_paren [] nil? ","arg_paren [] != ","method_add_arg [] [] ","method_add_arg [] ","fcall [] [] == ","fcall [] [] ","fcall [] ","fcall [] != ","arg_paren [] [] == ","arg_paren []  [] ","arg_paren []  [] empty? ","arg_paren []  [] == ","method_add_arg [] []  [] ","method_add_arg [] []  [] [] [] ","method_add_arg [] []  [] [] ","method_add_arg [] []  [] nil? ","method_add_arg [] []  [] != ","method_add_arg []  [] [] == ","method_add_arg []  [] [] ","method_add_arg []  [] ","method_add_arg []  [] != ","method_add_arg [] []  [] [] == "]}," Rubocop Cop AlignParameters inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","pos lineno ","pos column != ","pos_of_1st_arg column ","pos column ","pos lineno != ","pos_of_1st_arg lineno "," position_of ","rest_of_args each "," get_lparen_ix "," divide_args "," get_args "," each ","@token_indexes []= ","t pos ","@tokens each_with_index "," position_of  lineno "," position_of  column != "," position_of _of_1st_arg column "," position_of  column "," position_of  lineno != "," position_of _of_1st_arg lineno ","  position_of ition_of ","rest_of_ get_args  each "," divide_ get_args  "," get_ get_args  ","t  position_of  "]}," Rubocop CLI show_cops_on_duty":{"type":"method","name":"show_cops_on_duty","children":[],"call":[" puts ","cops each "," *  yellow + ","c to_s green ","c to_s "," *  yellow "," *  color + ","c to_s color "," *  color "]}," Rubocop CLI rip_source":{"type":"method","name":"rip_source","children":[],"call":[]}," Rubocop Cop TernaryOperator all_positions":{"type":"method","name":"all_positions","children":[],"call":["memo + "," all_positions ","sexp grep inject ","sexp grep ","sexp [] ","sexp [] =~ "]}," Rubocop Cop TernaryOperator inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","line_numbers [] ","line_numbers uniq size > ","line_numbers uniq size ","line_numbers uniq "," all_positions map "," all_positions "," each "," error_message "," all_positions first lineno "," all_positions first "," offends? "," all_positions map  [] "," all_positions map  uniq size > "," all_positions map  uniq size "," all_positions map  uniq "]}," Rubocop Cop StringLiterals inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","t pos lineno ","t pos ","t text =~ ","t text ","t text == ","t type ","tokens each ","s loc line ","s loc ","s loc expression source [] == ","s loc expression source [] ","s loc expression source ","s loc expression ","text !~ ","s to_a [] ","s to_a "," on_node ","t s to_a []  =~ ","t s to_a []  ","t s to_a []  == ","s to_a []  !~ "]}," Rubocop Cop ParameterLists inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","params [] [] [] lineno ","params [] [] [] ","params [] [] ","params [] ","params [] size > ","params [] size "," each "]}," Rubocop Cop Blocks inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","ERROR_MESSAGE  [] ","t pos lineno ","t pos ","tokens [] pos lineno == ","tokens [] pos lineno ","tokens [] pos ","tokens [] ","ix + "," fail ","(str \"\\n\") + ","t pos column ","t2 text == ","t2 text ","tokens [] index ","tokens [] pos lineno > ","rbrace_ix empty? ","reverse_correlations [] - ","reverse_correlations [] ","path object_id ","path last == ","path last ","@correlations [] ","t text ","t type ","tokens each_with_index ","@correlations each ","Hash  new "," check ","tokens each_index ","@reverse_correlations [] ","reverse_correlations [] -  empty? ","Hash  new  [] - ","Hash  new  [] ","@correlations []  object_id ","@correlations []  last == ","@correlations []  last ","@Hash  new  [] "]}," Rubocop CLI get_rid_of_invalid_byte_sequences":{"type":"method","name":"get_rid_of_invalid_byte_sequences","children":[],"call":["line encode! ","RUBY_VERSION  == ","line encoding name ","line encoding ","source encode! ","source encoding name ","source encoding ","line line encoding name ode! ","line line encoding name oding name ","line line encoding name oding ","source line encoding name ode! ","source line encoding name oding name ","source line encoding name oding "]}," Rubocop TargetFinder process_explicit_path":{"type":"method","name":"process_explicit_path","children":[],"call":["config file_to_exclude? ","@config_store for ","files reject "," force_exclusion? ","Dir  [] ","path include? ","@config_store for  file_to_exclude? ","@@config_store for _store for ","Dir  []  reject "]}," Rubocop TargetFinder debug?":{"type":"method","name":"debug?","children":[],"call":["@options [] "]}," Rubocop TargetFinder force_exclusion?":{"type":"method","name":"force_exclusion?","children":[],"call":["@options [] "]}," Rubocop ProcessedSource file_path":{"type":"method","name":"file_path","children":[],"call":["@buffer name "]}," Rubocop ProcessedSource disabled_line_ranges":{"type":"method","name":"disabled_line_ranges","children":[],"call":[" comment_config cop_disabled_line_ranges "," comment_config "]}," Rubocop Options add_severity_option":{"type":"method","name":"add_severity_option","children":[],"call":["@options []= ","opts on "," option "]}," Rubocop Options add_configuration_options":{"type":"method","name":"add_configuration_options","children":[],"call":[" option ","@options []= "," validate_auto_gen_config_option "]}," Rubocop Formatter SimpleTextFormatter annotate_message":{"type":"method","name":"annotate_message","children":[],"call":["msg gsub "," Rainbow yellow "," Rainbow "]}," Rubocop Formatter DisabledLinesFormatter smart_path":{"type":"method","name":"smart_path","children":[],"call":[" relative_path ","path start_with? ","Dir  pwd "]}," Rubocop Formatter DisabledLinesFormatter cops_disabled_in_comments_summary":{"type":"method","name":"cops_disabled_in_comments_summary","children":[],"call":[" output puts "," output ","summary << "," cyan "," smart_path ","line_ranges each ","disabled_cops each ","@cop_disabled_line_ranges each "]}," Rubocop Formatter DisabledLinesFormatter finished":{"type":"method","name":"finished","children":[],"call":[" cops_disabled_in_comments_summary "]}," Rubocop Formatter DisabledLinesFormatter file_started":{"type":"method","name":"file_started","children":[],"call":["@cop_disabled_line_ranges []= ","options [] "]}," Rubocop Formatter DisabledLinesFormatter started":{"type":"method","name":"started","children":[],"call":[]}," Rubocop FileInspector fail_level":{"type":"method","name":"fail_level","children":[],"call":["Rubocop Cop Severity  new ","@options [] "]}," Rubocop FileInspector process_source":{"type":"method","name":"process_source","children":[],"call":["Cop Offense  new ","e message capitalize + ","e message capitalize ","e message ","Struct  new new ","Struct  new ","SourceParser  parse_file "]}," Rubocop Cop Util parentheses?":{"type":"method","name":"parentheses?","children":[],"call":["node loc end ","node loc ","node loc respond_to? "]}," Rubocop Cop Team cop_enabled?":{"type":"method","name":"cop_enabled?","children":[],"call":["cop_class cop_name == ","@options [] ","cop_class cop_name ","@config cop_enabled? ","(or\n  (send\n    (ivar :@options) :[]\n    (sym :only))\n  (array)) include? "]}," Rubocop Cop Style VariableInterpolation autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","expr source ","node loc expression ","node loc "," lambda ","node loc expression  source ","node loc node loc expression ession "]}," Rubocop Cop Style SingleSpaceBeforeFirstArg autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace "," lambda "]}," Rubocop Cop Style SingleSpaceBeforeFirstArg on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","space length > ","space length ","Parser Source Range  new ","arg1 begin_pos ","arg1_with_space begin_pos ","arg1 source_buffer "," range_with_surrounding_space ","arg1 line > ","node loc line ","node loc ","arg1 line ","args first loc expression ","args first loc ","args first ","method_name to_s end_with? ","method_name to_s "," operator? ","args empty? "," parentheses? ","Parser Source Range  new  length > ","Parser Source Range  new  length ","args first loc expression  begin_pos ","arg1_with_Parser Source Range  new  begin_pos "," range_with_surrounding_space  begin_pos ","args first loc expression _with_space begin_pos ","args first loc expression  source_buffer "," range_with_surrounding_Parser Source Range  new  ","args first loc expression  line > ","args first loc expression  line "]}," Rubocop Cop Style NumericLiterals on_float":{"type":"method","name":"on_float","children":[],"call":[" check "]}," Rubocop Cop Style Not correction":{"type":"method","name":"correction","children":[],"call":["corrector replace ","node loc expression ","node loc ","old_source sub ","node loc expression source "," lambda ","node loc expression source  sub "]}," Rubocop Cop Style Not rewrite_node":{"type":"method","name":"rewrite_node","children":[],"call":["Corrector  new rewrite ","Corrector  new ","processed_source buffer "," correction ","processed_source ast ","SourceParser  parse ","node loc expression source ","node loc expression ","node loc ","Corre correction tor  new rewrite ","Corre correction tor  new ","pro correction essed_sour correction e buffer ","SourceParser  parse  buffer ","  correction orre correction tion ","pro correction essed_sour correction e ast ","SourceParser  parse  ast ","Sour correction eParser  parse ","node lo correction  expression sour correction e ","node lo correction  expression ","node lo correction  "]}," Rubocop Cop Style Not autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","node == ","SourceParser  parse ast ","SourceParser  parse "," rewrite_node "," correction ","@ correction orre correction tions << ","Sour correction eParser  parse ast ","Sour correction eParser  parse ","  correction orre correction tion "]}," Rubocop Cop Style NonNilCheck autocorrect_non_nil":{"type":"method","name":"autocorrect_non_nil","children":[],"call":["@corrections << ","corrector replace ","receiver loc expression source ","receiver loc expression ","receiver loc ","node loc expression ","node loc "," lambda "]}," Rubocop Cop Style NonNilCheck autocorrect_comparison":{"type":"method","name":"autocorrect_comparison","children":[],"call":["@corrections << ","corrector replace ","expr source sub ","expr source ","node loc expression ","node loc "," lambda "," include_semantic_changes? ","node loc expression  source sub ","node loc expression  source ","node loc node loc expression ession "]}," Rubocop Cop Style NonNilCheck autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" autocorrect_non_nil ","method == "," autocorrect_comparison "]}," Rubocop Cop Style NonNilCheck nil_check?":{"type":"method","name":"nil_check?","children":[],"call":["method == ","node type == ","node type "]}," Rubocop Cop Style NonNilCheck on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," nil_check? ","method == ","args == ","(sym :!=) include? "," ignored_node? "," include_semantic_changes? "]}," Rubocop Cop Style NilComparison autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","expr source sub ","expr source ","node loc expression ","node loc "," lambda ","node loc expression  source sub ","node loc expression  source ","node loc node loc expression ession "]}," Rubocop Cop Style NegatedWhile autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","pos_condition loc expression source ","pos_condition loc expression ","pos_condition loc ","condition loc expression ","condition loc ","node loc keyword ","node loc "," lambda ","node type == ","node type "]}," Rubocop Cop Style NegatedWhile error_message":{"type":"method","name":"error_message","children":[],"call":[]}," Rubocop Cop Style NegatedWhile on_while":{"type":"method","name":"on_while","children":[],"call":[" check "]}," Rubocop Cop Style NegatedIf autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","pos_condition loc expression source ","pos_condition loc expression ","pos_condition loc ","condition loc expression ","condition loc ","node loc keyword ","node loc "," lambda ","node loc keyword is? ","condition children first ","condition children ","condition type == ","condition type ","pos_condition children first  loc expression source ","pos_condition children first  loc expression ","pos_condition children first  loc ","condition children first  loc expression ","condition children first  loc ","condition children first  children first ","condition children first  children ","condition children first  type == ","condition children first  type "]}," Rubocop Cop Style NegatedIf error_message":{"type":"method","name":"error_message","children":[],"call":[]}," Rubocop Cop Style NegatedIf on_if":{"type":"method","name":"on_if","children":[],"call":[" check ","node loc keyword is? ","node loc keyword ","node loc ","node loc respond_to? "]}," Rubocop Cop Style LineEndConcatenation concatenator_at_line_end?":{"type":"method","name":"concatenator_at_line_end?","children":[],"call":["expression =~ "]}," Rubocop Cop Style GuardClause if_length":{"type":"method","name":"if_length","children":[],"call":["node loc end line - + ","node loc end line - ","node loc keyword line ","node loc keyword ","node loc ","node loc end line ","node loc end "]}," Rubocop Cop Style GuardClause check_if_node":{"type":"method","name":"check_if_node","children":[],"call":[" add_offense "," if_length > "," if_length "," ternary_op? "," modifier_if? "," min_body_length? "]}," Rubocop Cop Style GuardClause check":{"type":"method","name":"check","children":[],"call":[" check_if_node ","last_expr type == ","last_expr type ","expressions last ","body type == ","body type ","expressions last  type == ","expressions last  type "]}," Rubocop Cop Style DeprecatedHashMethods proper_method_name":{"type":"method","name":"proper_method_name","children":[],"call":["method_name to_s sub ","method_name to_s "]}," Rubocop Cop Style DeprecatedHashMethods autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace "," proper_method_name ","node loc selector source ","node loc selector ","node loc "," lambda "]}," Rubocop Cop Style DeprecatedHashMethods on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format "," proper_method_name ","DEPRECATED_METHODS  include? ","args size == ","args size "]}," Rubocop Cop Style CollectionMethods default_cop_config":{"type":"method","name":"default_cop_config","children":[],"call":["ConfigLoader  default_configuration [] "," cop_name ","ConfigLoader  default_configuration "]}," Rubocop Cop Style ClassMethods autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","node loc name ","node loc "," lambda "]}," Rubocop Cop Style ClassMethods message":{"type":"method","name":"message","children":[],"call":[" format "]}," Rubocop Cop Style ArrayJoin on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","arg_nodes [] type == ","arg_nodes [] type ","arg_nodes [] ","method_name == ","receiver_node type == ","receiver_node type "]}," Rubocop Cop Severity <=>":{"type":"method","name":"<=>","children":[],"call":[" level <=> ","other level "," level "]}," Rubocop Cop Severity hash":{"type":"method","name":"hash","children":[],"call":["@name hash "]}," Rubocop Cop Severity ==":{"type":"method","name":"==","children":[],"call":["@name == ","other name ","other is_a? "]}," Rubocop Cop Severity level":{"type":"method","name":"level","children":[],"call":["NAMES  index + ","NAMES  index "," name "]}," Rubocop Cop Severity code":{"type":"method","name":"code","children":[],"call":["@name to_s [] upcase ","@name to_s [] ","@name to_s "]}," Rubocop Cop Severity to_s":{"type":"method","name":"to_s","children":[],"call":["@name to_s "]}," Rubocop Cop Severity initialize":{"type":"method","name":"initialize","children":[],"call":[" freeze ","name freeze "," fail ","NAMES  include? ","Severity  name_from_code ","Severity  name_from_code  freeze ","Severity  Severity  name_from_code _from_code "]}," Rubocop Cop Severity name_from_code":{"type":"method","name":"name_from_code","children":[],"call":[]}," Rubocop Cop Rails ReadWriteAttribute message":{"type":"method","name":"message","children":[],"call":[" format ","method_name == "]}," Rubocop Cop Rails ReadWriteAttribute on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","(sym :read_attribute) include? "]}," Rubocop Cop Lint UselessAccessModifier check_for_access_modifier":{"type":"method","name":"check_for_access_modifier","children":[],"call":[" add_offense_for_access_modifier ","Style AccessModifierIndentation  modifier_node? "]}," Rubocop Cop Lint UselessAccessModifier check_for_instance_method":{"type":"method","name":"check_for_instance_method","children":[],"call":["node type == ","node type "]}," Rubocop Cop Lint UselessAccessModifier add_offense_for_access_modifier":{"type":"method","name":"add_offense_for_access_modifier","children":[],"call":[" add_offense "," format "]}," Rubocop Cop Lint UselessAccessModifier on_class":{"type":"method","name":"on_class","children":[],"call":[" add_offense_for_access_modifier "," check_for_instance_method "," check_for_access_modifier ","body_nodes each ","body children ","body type == ","body type ","body children  each "]}," Rubocop Cop Lint StringConversionInInterpolation autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","receiver loc expression source ","receiver loc expression ","receiver loc ","node loc expression ","node loc "," lambda "]}," Rubocop Cop Lint SpaceBeforeFirstArg on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","arg1_with_space source =~ ","arg1_with_space source "," range_with_surrounding_space ","args first loc expression ","args first loc ","args first ","args first type == ","args first type "," operator? ","args empty? "," parentheses? ","method_name to_s end_with? ","method_name to_s "," range_with_surrounding_space  source =~ ","args first loc expression _with_space source =~ "," range_with_surrounding_space  source ","args first loc expression _with_space source "]}," Rubocop Cop Lint LiteralInInterpolation special_string?":{"type":"method","name":"special_string?","children":[],"call":["node loc respond_to? ! ","node loc respond_to? ","node loc ","node type == ","node type "]}," Rubocop Cop Lint EmptyInterpolation on_dstr":{"type":"method","name":"on_dstr","children":[],"call":[" add_offense ","begin_node children empty? ","begin_node children ","(send\n  (send\n    (lvar :node) :children) :select) each ","n type == ","n type ","node children select ","node children "]}," Rubocop Cop Lint DeprecatedClassMethods class_nodes":{"type":"method","name":"class_nodes","children":[],"call":[" s ","data [] "]}," Rubocop Cop Cop file_name_matches_any?":{"type":"method","name":"file_name_matches_any?","children":[],"call":[" match_path? ","patterns any? "," config path_relative_to_config "," config "," cop_config [] "," cop_config "," config loaded_path "," match_ config path_relative_to_config ? "," config  config path_relative_to_config _relative_to_config "," config loaded_ config path_relative_to_config  "]}," Rubocop ConfigLoader deprecation_check":{"type":"method","name":"deprecation_check","children":[],"call":[" exit "," warn ","config [] [] ","config [] "]}," Rubocop Config base_dir_for_path_parameters":{"type":"method","name":"base_dir_for_path_parameters","children":[],"call":["Dir  pwd ","File  dirname "," loaded_path ","File  basename == ","File  basename ","File  expand_path "]}," Rubocop Config path_relative_to_config":{"type":"method","name":"path_relative_to_config","children":[],"call":[" relative_path "," base_dir_for_path_parameters "]}," Rubocop Cop Style NonNilCheck process_method":{"type":"method","name":"process_method","children":[],"call":[" ignore_node ","body children last ","body children ","body type == ","body type ","body type != ","name to_s end_with? ","name to_s "]}," Rubocop Cop Style NonNilCheck on_defs":{"type":"method","name":"on_defs","children":[],"call":[" process_method "]}," Rubocop Cop Style NonNilCheck on_def":{"type":"method","name":"on_def","children":[],"call":[" process_method "]}," Rubocop Cop Style NegatedWhile message":{"type":"method","name":"message","children":[],"call":[" format ","node type == ","node type "]}," Rubocop Cop Style NegatedWhile on_until":{"type":"method","name":"on_until","children":[],"call":[" check "]}," Rubocop Cop Style NegatedIf message":{"type":"method","name":"message","children":[],"call":[" format ","node loc keyword is? ","node loc keyword ","node loc "]}," Rubocop Cop Style ClassMethods check_defs":{"type":"method","name":"check_defs","children":[],"call":[" add_offense "," message ","definee type == ","definee type "]}," Rubocop Cop Style ClassMethods check":{"type":"method","name":"check","children":[],"call":[" check_defs ","defs_nodes each ","n type == ","n type ","node children compact select ","node children compact ","node children ","node type == ","node type "]}," Rubocop Cop Style ClassMethods on_module":{"type":"method","name":"on_module","children":[],"call":[" check "]}," Rubocop Cop Style ClassMethods on_class":{"type":"method","name":"on_class","children":[],"call":[" check "]}," Rubocop Cop Style Blocks correction":{"type":"method","name":"correction","children":[],"call":["corrector replace ","corrector insert_before ","b source_buffer source [] =~ ","b source_buffer source [] ","b begin_pos - ","b begin_pos ","b source_buffer source ","b source_buffer ","b is? ","node loc end ","node loc ","node loc begin "," lambda "]}," Rubocop Cop AutocorrectUnlessChangingAST rewrite_node":{"type":"method","name":"rewrite_node","children":[],"call":["Corrector  new rewrite ","Corrector  new ","processed_source buffer "," correction ","processed_source ast ","SourceParser  parse ","node loc expression source ","node loc expression ","node loc ","Corre correction tor  new rewrite ","Corre correction tor  new ","pro correction essed_sour correction e buffer ","SourceParser  parse  buffer ","  correction orre correction tion ","pro correction essed_sour correction e ast ","SourceParser  parse  ast ","Sour correction eParser  parse ","node lo correction  expression sour correction e ","node lo correction  expression ","node lo correction  "]}," Rubocop Cop AutocorrectUnlessChangingAST autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","node == ","SourceParser  parse ast ","SourceParser  parse "," rewrite_node "," correction "," fail ","node != ","@ correction orre correction tions << ","Sour correction eParser  parse ast ","Sour correction eParser  parse ","  correction orre correction tion "]}," Rubocop RakeTask setup_subtasks":{"type":"method","name":"setup_subtasks","children":[],"call":[" run_cli "," verbose "," full_options unshift "," full_options "," task "," desc "," namespace "," full_ full_options unshift  unshift "," full_ full_options unshift  "]}," Rubocop RakeTask run_cli":{"type":"method","name":"run_cli","children":[],"call":[" abort "," fail_on_error ","result == ","cli run "," puts ","CLI  new "," require ","cli run  == ","CLI  new  run "]}," Rubocop RakeTask run_main_task":{"type":"method","name":"run_main_task","children":[],"call":[" run_cli "," full_options "]}," Rubocop Cop VariableForce scanned_nodes":{"type":"method","name":"scanned_nodes","children":[],"call":[]}," Rubocop Cop VariableForce scanned_node?":{"type":"method","name":"scanned_node?","children":[],"call":["scanned_node equal? "," scanned_nodes any? "," scanned_nodes "]}," Rubocop Cop VariableForce scan":{"type":"method","name":"scan","children":[],"call":[" scan ","child is_a? ","node children each ","node children "]}," Rubocop Cop VariableForce find_variables_in_loop":{"type":"method","name":"find_variables_in_loop","children":[],"call":["assignment_nodes_in_loop << ","referenced_variable_names_in_loop << ","asgn_node children first ","asgn_node children ","asgn_node type == ","asgn_node type ","node children first ","node children ","node type "," scan ","node children first  children first ","node children first  children ","node children first  type == ","node children first  type "]}," Rubocop Cop VariableForce mark_assignments_as_referenced_in_loop":{"type":"method","name":"mark_assignments_as_referenced_in_loop","children":[],"call":["assignment reference! ","assignment_node equal? ","assignment node ","assignment_nodes_in_loop none? ","variable assignments each ","variable assignments "," variable_table find_variable "," variable_table ","referenced_variable_names_in_loop each "," find_variables_in_loop "," variable_table find_variable  assignments each "," variable_table find_variable  assignments ","  variable_table find_variable _table find_ variable_table find_variable  ","  variable_table find_variable _table ","referenced_ variable_table find_variable _names_in_loop each "," find_ variable_table find_variable s_in_loop "]}," Rubocop Cop VariableForce process_scope":{"type":"method","name":"process_scope","children":[],"call":[" skip_children! "," inspect_variables_in_scope "," scanned_nodes << "," scanned_nodes "," process_node ","twisted_nodes each ","twisted_nodes compact! ","twisted_nodes << ","node children [] ","node children ","node type == ","node type ","TWISTED_SCOPE_TYPES  include? "]}," Rubocop Cop VariableForce process_zero_arity_super":{"type":"method","name":"process_zero_arity_super","children":[],"call":["variable reference! ","variable method_argument? "," variable_table accessible_variables each "," variable_table accessible_variables "," variable_table "]}," Rubocop Cop VariableForce process_rescue":{"type":"method","name":"process_rescue","children":[],"call":[" process_loop ","node_in_resbody type == ","node_in_resbody type "," scan ","resbody_nodes any? ","child type == ","child type ","child is_a? ","node children select ","node children "]}," Rubocop Cop VariableForce process_loop":{"type":"method","name":"process_loop","children":[],"call":[" skip_children! "," mark_assignments_as_referenced_in_loop "," process_children "," process_node ","POST_CONDITION_LOOP_TYPES  include? ","node type "]}," Rubocop Cop VariableForce process_variable_referencing":{"type":"method","name":"process_variable_referencing","children":[],"call":[" variable_table reference_variable "," variable_table ","node children first ","node children "]}," Rubocop Cop VariableForce process_variable_multiple_assignment":{"type":"method","name":"process_variable_multiple_assignment","children":[],"call":[" skip_children! "," process_node "]}," Rubocop Cop VariableForce process_variable_operator_assignment":{"type":"method","name":"process_variable_operator_assignment","children":[],"call":[" skip_children! "," variable_table assign_to_variable "," variable_table "," process_node "," variable_table reference_variable "," variable_table declare_variable "," variable_table variable_exist? ","asgn_node children first ","asgn_node children ","asgn_node type == ","asgn_node type ","LOGICAL_OPERATOR_ASSIGNMENT_TYPES  include? ","node type "]}," Rubocop Cop VariableForce process_regexp_named_captures":{"type":"method","name":"process_regexp_named_captures","children":[],"call":[" skip_children! "," variable_table assign_to_variable "," variable_table ","variable_names each "," process_node "," variable_table declare_variable "," variable_table variable_exist? ","regexp named_captures keys ","regexp named_captures ","Regexp  new ","regexp_node children [] children [] ","regexp_node children [] children ","regexp_node children [] ","regexp_node children ","regexp named_captures keys  each ","Regexp  new  named_captures keys ","Regexp  new  named_captures ","Regexp  new _node children [] children [] ","Regexp  new _node children [] children ","Regexp  new _node children [] ","Regexp  new _node children "]}," Rubocop Cop VariableForce process_variable_assignment":{"type":"method","name":"process_variable_assignment","children":[],"call":[" skip_children! "," variable_table assign_to_variable "," variable_table "," process_children "," variable_table declare_variable "," variable_table variable_exist? ","node children first ","node children "]}," Rubocop Cop VariableForce process_variable_declaration":{"type":"method","name":"process_variable_declaration","children":[],"call":[" variable_table declare_variable "," variable_table ","node children first ","node children ","node children empty? ","node type == ","node type "]}," Rubocop Cop VariableForce dispatch_node":{"type":"method","name":"dispatch_node","children":[],"call":[" process_scope "," process_zero_arity_super "," process_rescue "," process_loop "," process_variable_referencing "," process_variable_multiple_assignment "," process_variable_operator_assignment "," process_regexp_named_captures "," process_variable_assignment "," process_variable_declaration ","node type "]}," Rubocop Cop VariableForce skip_children!":{"type":"method","name":"skip_children!","children":[],"call":[" throw "]}," Rubocop Cop VariableForce process_node":{"type":"method","name":"process_node","children":[],"call":[" process_children "," dispatch_node "," catch "]}," Rubocop Cop VariableForce process_children":{"type":"method","name":"process_children","children":[],"call":[" process_node "," scanned_node? ","child is_a? ","origin_node children each ","origin_node children "]}," Rubocop Cop VariableForce inspect_variables_in_scope":{"type":"method","name":"inspect_variables_in_scope","children":[],"call":[" variable_table pop_scope "," variable_table "," process_children "," variable_table push_scope "]}," Rubocop Cop VariableForce investigate":{"type":"method","name":"investigate","children":[],"call":[" inspect_variables_in_scope "," class wrap_with_top_level_node "," class ","processed_source ast "," class wrap_with_ class wrap_with_top_level_node  "]}," Rubocop Cop VariableForce variable_table":{"type":"method","name":"variable_table","children":[],"call":["VariableTable  new "]}," Rubocop Cop VariableForce wrap_with_top_level_node":{"type":"method","name":"wrap_with_top_level_node","children":[],"call":[]}," Rubocop Cop VariableForce VariableTable mark_variable_as_captured_by_block_if_so":{"type":"method","name":"mark_variable_as_captured_by_block_if_so","children":[],"call":["variable capture_with_block! ","variable scope == "," current_scope ","variable scope "," current_scope node type == "," current_scope node type "," current_scope node "]}," Rubocop Cop VariableForce VariableTable accessible_variables":{"type":"method","name":"accessible_variables","children":[],"call":["scope node type == ","scope node type ","scope node ","variables concat ","scope variables values ","scope variables "," scope_stack reverse_each reduce "," scope_stack reverse_each "," scope_stack "," scope_stack reverse_each each_with_object "]}," Rubocop Cop VariableForce VariableTable variable_exist?":{"type":"method","name":"variable_exist?","children":[],"call":[" find_variable "]}," Rubocop Cop VariableForce VariableTable find_variable":{"type":"method","name":"find_variable","children":[],"call":["scope node type == ","scope node type ","scope node ","scope variables [] ","scope variables "," scope_stack reverse_each "," scope_stack ","name to_sym ","scope scope variables [] s [] ","scope scope variables [] s ","name to_sym  to_sym "]}," Rubocop Cop VariableForce VariableTable reference_variable":{"type":"method","name":"reference_variable","children":[],"call":[" mark_variable_as_captured_by_block_if_so ","variable reference! "," find_variable "," mark_ find_variable _as_captured_by_block_if_so "," find_variable  reference! "," find_ find_variable  "]}," Rubocop Cop VariableForce VariableTable assign_to_variable":{"type":"method","name":"assign_to_variable","children":[],"call":[" mark_variable_as_captured_by_block_if_so ","variable assign "," fail ","node inspect ","node loc expression ","node loc "," find_variable "," mark_ find_variable _as_captured_by_block_if_so "," find_variable  assign "," find_ find_variable  "]}," Rubocop Cop VariableForce VariableTable declare_variable":{"type":"method","name":"declare_variable","children":[],"call":[" invoke_hook "," current_scope variables []= ","variable name "," current_scope variables "," current_scope ","Variable  new "," current_scope Variable  new s []= ","Variable  new  name "," current_scope Variable  new s "]}," Rubocop Cop VariableForce VariableTable current_scope_level":{"type":"method","name":"current_scope_level","children":[],"call":[" scope_stack count "," scope_stack "]}," Rubocop Cop VariableForce VariableTable current_scope":{"type":"method","name":"current_scope","children":[],"call":[" scope_stack last "," scope_stack "]}," Rubocop Cop VariableForce VariableTable pop_scope":{"type":"method","name":"pop_scope","children":[],"call":[" invoke_hook "," scope_stack pop "," scope_stack "," current_scope ","  current_scope _stack pop ","  current_scope _stack "," current_ current_scope  "]}," Rubocop Cop VariableForce VariableTable push_scope":{"type":"method","name":"push_scope","children":[],"call":[" invoke_hook "," scope_stack push "," scope_stack ","Scope  new "," Scope  new _stack push "," Scope  new _stack "]}," Rubocop Cop VariableForce VariableTable scope_stack":{"type":"method","name":"scope_stack","children":[],"call":[]}," Rubocop Cop VariableForce VariableTable invoke_hook":{"type":"method","name":"invoke_hook","children":[],"call":["@hook_receiver send "]}," Rubocop Cop VariableForce VariableTable initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rubocop Cop VariableForce Variable block_local_variable?":{"type":"method","name":"block_local_variable?","children":[],"call":["@declaration_node type == ","@declaration_node type "]}," Rubocop Cop VariableForce Variable block_argument?":{"type":"method","name":"block_argument?","children":[],"call":["@scope node type == ","@scope node type ","@scope node "," argument? "]}," Rubocop Cop VariableForce Variable method_argument?":{"type":"method","name":"method_argument?","children":[],"call":["(sym :def) include? ","@scope node type ","@scope node "," argument? "]}," Rubocop Cop VariableForce Variable argument?":{"type":"method","name":"argument?","children":[],"call":["ARGUMENT_DECLARATION_TYPES  include? ","@declaration_node type "]}," Rubocop Cop VariableForce Variable used?":{"type":"method","name":"used?","children":[],"call":[" referenced? "]}," Rubocop Cop VariableForce Variable capture_with_block!":{"type":"method","name":"capture_with_block!","children":[],"call":[]}," Rubocop Cop VariableForce Variable reference!":{"type":"method","name":"reference!","children":[],"call":["consumed_branch_ids << ","assignment branch_id ","assignment reference_penetrable? ","assignment branch_id == ","reference branch_id ","assignment inside_of_branch? ","assignment reference! ","consumed_branch_ids include? ","@assignments reverse_each ","Set  new ","@references << ","Reference  new ","Set  new  << ","assignment Reference  new _penetrable? ","Reference  new  branch_id ","assignment Reference  new ! ","Set  new  include? ","@Reference  new s << "]}," Rubocop Cop VariableForce Variable referenced?":{"type":"method","name":"referenced?","children":[],"call":["@references empty? ! ","@references empty? "]}," Rubocop Cop VariableForce Variable assign":{"type":"method","name":"assign","children":[],"call":["@assignments << ","Assignment  new "]}," Rubocop Cop VariableForce Variable initialize":{"type":"method","name":"initialize","children":[],"call":["name to_sym "," fail ","declaration_node type ","VARIABLE_DECLARATION_TYPES  include? "]}," Rubocop Cop VariableForce Scope ASTScanner scan":{"type":"method","name":"scan","children":[],"call":["@ancestor_nodes pop "," scan ","child is_a? ","node children each ","node children ","@ancestor_nodes push "]}," Rubocop Cop VariableForce Scope ASTScanner initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rubocop Cop VariableForce Scope ancestors_of_node":{"type":"method","name":"ancestors_of_node","children":[],"call":[" fail ","ancestor_nodes [] ","scanning_node equal? ","ASTScanner  scan "]}," Rubocop Cop VariableForce Scope body_node":{"type":"method","name":"body_node","children":[],"call":["@node children [] ","@node children ","@node type "]}," Rubocop Cop VariableForce Scope name":{"type":"method","name":"name","children":[],"call":["@node children [] ","@node children ","@node type "]}," Rubocop Cop VariableForce Scope ==":{"type":"method","name":"==","children":[],"call":["@node equal? ","other node "]}," Rubocop Cop VariableForce Scope initialize":{"type":"method","name":"initialize","children":[],"call":[" fail ","node type ","node type == ","SCOPE_TYPES  include? "]}," Rubocop Cop VariableForce Reference explicit?":{"type":"method","name":"explicit?","children":[],"call":["@node type != ","@node type "]}," Rubocop Cop VariableForce Reference initialize":{"type":"method","name":"initialize","children":[],"call":[" fail ","node type ","VARIABLE_REFERENCE_TYPES  include? "]}," Rubocop Cop VariableForce Locatable branch?":{"type":"method","name":"branch?","children":[],"call":["child_index != ","parent_node type ","parent_node children index ","parent_node children ","parent_node children index  != "]}," Rubocop Cop VariableForce Locatable set_branch_point_and_body_nodes!":{"type":"method","name":"set_branch_point_and_body_nodes!","children":[],"call":[" branch? ","ancestors_and_self_nodes reverse each_cons ","ancestors_and_self_nodes reverse "," ancestor_nodes_in_scope + "," ancestor_nodes_in_scope "," ancestor_nodes_in_scope +  reverse each_cons "," ancestor_nodes_in_scope +  reverse "]}," Rubocop Cop VariableForce Locatable body_index":{"type":"method","name":"body_index","children":[],"call":[" branch_point_node children index "," branch_body_node "," branch_point_node children "," branch_point_node "]}," Rubocop Cop VariableForce Locatable ensure_body_name":{"type":"method","name":"ensure_body_name","children":[],"call":[" fail "," body_index "]}," Rubocop Cop VariableForce Locatable rescue_body_name":{"type":"method","name":"rescue_body_name","children":[],"call":[" body_index - "," body_index "," branch_body_node type == "," branch_body_node type "," branch_body_node "," body_index == "]}," Rubocop Cop VariableForce Locatable logical_operator_body_name":{"type":"method","name":"logical_operator_body_name","children":[],"call":[" fail "," body_index "]}," Rubocop Cop VariableForce Locatable case_body_name":{"type":"method","name":"case_body_name","children":[],"call":[" body_index - "," body_index "," branch_body_node type == "," branch_body_node type "," branch_body_node "]}," Rubocop Cop VariableForce Locatable if_body_name":{"type":"method","name":"if_body_name","children":[],"call":[" fail "," body_index "]}," Rubocop Cop VariableForce Locatable branch_body_name":{"type":"method","name":"branch_body_name","children":[],"call":[" raise "," branch_point_node type "," branch_point_node "," body_index "," fail "," ensure_body_name "," rescue_body_name "," logical_operator_body_name "," case_body_name "," if_body_name "]}," Rubocop Cop VariableForce Locatable ancestor_nodes_in_scope":{"type":"method","name":"ancestor_nodes_in_scope","children":[],"call":[" scope ancestors_of_node "," scope "]}," Rubocop Cop VariableForce Locatable branch_body_node":{"type":"method","name":"branch_body_node","children":[],"call":[" set_branch_point_and_body_nodes! "," instance_variable_defined? "]}," Rubocop Cop VariableForce Locatable branch_point_node":{"type":"method","name":"branch_point_node","children":[],"call":[" set_branch_point_and_body_nodes! "," instance_variable_defined? "]}," Rubocop Cop VariableForce Locatable branch_type":{"type":"method","name":"branch_type","children":[],"call":["(send\n  (send nil :branch_point_node) :type) join "," branch_body_name "," branch_point_node type "," branch_point_node "," inside_of_branch? "]}," Rubocop Cop VariableForce Locatable branch_id":{"type":"method","name":"branch_id","children":[],"call":["(send\n  (send nil :branch_point_node) :object_id) join "," branch_type "," branch_point_node object_id "," branch_point_node "," inside_of_branch? "]}," Rubocop Cop VariableForce Locatable inside_of_branch?":{"type":"method","name":"inside_of_branch?","children":[],"call":[" branch_point_node "]}," Rubocop Cop VariableForce Locatable scope":{"type":"method","name":"scope","children":[],"call":[" fail "]}," Rubocop Cop VariableForce Locatable node":{"type":"method","name":"node","children":[],"call":[" fail "]}," Rubocop Cop VariableForce Assignment grantparent_node":{"type":"method","name":"grantparent_node","children":[],"call":[" ancestor_nodes_in_scope [] "," ancestor_nodes_in_scope "]}," Rubocop Cop VariableForce Assignment parent_node":{"type":"method","name":"parent_node","children":[],"call":[" ancestor_nodes_in_scope last "," ancestor_nodes_in_scope "]}," Rubocop Cop VariableForce Assignment meta_assignment_node":{"type":"method","name":"meta_assignment_node","children":[],"call":[" grantparent_node "," grantparent_node type == "," grantparent_node type "," parent_node type == "," parent_node type "," parent_node "," parent_node children index == "," parent_node children index "," parent_node children ","OPERATOR_ASSIGNMENT_TYPES  include? "," instance_variable_defined? "]}," Rubocop Cop VariableForce Assignment operator":{"type":"method","name":"operator","children":[],"call":["assignment_node loc operator source ","assignment_node loc operator ","assignment_node loc "," meta_assignment_node "]}," Rubocop Cop VariableForce Assignment multiple_assignment?":{"type":"method","name":"multiple_assignment?","children":[],"call":[" meta_assignment_node type == "," meta_assignment_node type "," meta_assignment_node "]}," Rubocop Cop VariableForce Assignment operator_assignment?":{"type":"method","name":"operator_assignment?","children":[],"call":["OPERATOR_ASSIGNMENT_TYPES  include? "," meta_assignment_node type "," meta_assignment_node "]}," Rubocop Cop VariableForce Assignment regexp_named_capture?":{"type":"method","name":"regexp_named_capture?","children":[],"call":["@node type == ","@node type "]}," Rubocop Cop VariableForce Assignment reference_penetrable?":{"type":"method","name":"reference_penetrable?","children":[],"call":["REFERENCE_PENETRABLE_BRANCH_TYPES  include? "," branch_type "]}," Rubocop Cop VariableForce Assignment used?":{"type":"method","name":"used?","children":[],"call":["@variable captured_by_block? "]}," Rubocop Cop VariableForce Assignment reference!":{"type":"method","name":"reference!","children":[],"call":[]}," Rubocop Cop VariableForce Assignment scope":{"type":"method","name":"scope","children":[],"call":["@variable scope "]}," Rubocop Cop VariableForce Assignment name":{"type":"method","name":"name","children":[],"call":["@node children first ","@node children "]}," Rubocop Cop VariableForce Assignment initialize":{"type":"method","name":"initialize","children":[],"call":[" fail ","node type ","VARIABLE_ASSIGNMENT_TYPES  include? "]}," Rubocop Cop Team forces":{"type":"method","name":"forces","children":[],"call":["forces << ","force_class new ","joining_cops empty? ","cop join_force? "," cops select "," cops ","Force  all each_with_object ","Force  all "]}," Rubocop Cop Style UnneededCapitalW on_percent_literal":{"type":"method","name":"on_percent_literal","children":[],"call":[" add_offense ","x type == ","x type ","node children none? ","node children ","types include? "," type ","x  type  == ","x  type  "," type s include? ","  type  "]}," Rubocop Cop Style UnneededCapitalW on_array":{"type":"method","name":"on_array","children":[],"call":[" process "]}," Rubocop Cop Style TrivialAccessors autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","method_name to_s chomp ","method_name to_s ","node loc expression ","node loc "," lambda "," trivial_reader? "," dsl_writer? "," trivial_writer? "," names_match? ","node type == ","node type "]}," Rubocop Cop Style TrivialAccessors allowed_reader?":{"type":"method","name":"allowed_reader?","children":[],"call":[" predicate? "," allow_predicates? "]}," Rubocop Cop Style TrivialAccessors allowed_writer?":{"type":"method","name":"allowed_writer?","children":[],"call":[" dsl_writer? "," allow_dsl_writers? "]}," Rubocop Cop Style TrivialAccessors dsl_writer?":{"type":"method","name":"dsl_writer?","children":[],"call":["method_name to_s end_with? ! ","method_name to_s end_with? ","method_name to_s "]}," Rubocop Cop Style TrivialAccessors allow_dsl_writers?":{"type":"method","name":"allow_dsl_writers?","children":[],"call":[" cop_config [] "," cop_config "]}," Rubocop Cop Style TrailingBlankLines message":{"type":"method","name":"message","children":[],"call":[" format ","wanted_blank_lines == "]}," Rubocop Cop Style RegexpLiteral configure_max":{"type":"method","name":"configure_max","children":[],"call":[" config_to_allow_offenses= ","min - ","max < ","min < "," max_slashes + "," max_slashes ","max > ","@slash_count [] min ","@slash_count [] ","@slash_count [] max ","@slash_count [] add ","Set  new ","@slash_count [] min  - ","@slash_count [] max  < ","@slash_count [] min  < "," @slash_count [] max _slashes + "," @slash_count [] max _slashes ","@slash_count [] max  > ","@slash_count [] @slash_count [] min  ","@slash_count [] @slash_count [] max  "]}," Rubocop Cop Style RedundantBegin autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace "," range_with_surrounding_space source gsub "," range_with_surrounding_space source "," range_with_surrounding_space ","child loc expression ","child loc ","node loc expression ","node loc ","child_indent - ","child loc column ","node loc column ","node children first ","node children "," lambda ","node children first  loc expression ","node children first  loc ","child loc column  - ","node children first _indent - ","node children first  loc column ","node node children first ren first ","node node children first ren "]}," Rubocop Cop Style IndentationWidth begins_its_line?":{"type":"method","name":"begins_its_line?","children":[],"call":["source_before_end =~ ","range source_buffer source [] ","range begin_pos ","range source_buffer source ","range source_buffer ","range source_buffer source []  =~ "]}," Rubocop Cop Style IndentationWidth on_send":{"type":"method","name":"on_send","children":[],"call":[" ignore_node ","args first "," check_indentation ","node loc expression ","node loc "," visibility_and_def_on_same_line? "]}," Rubocop Cop Style Encoding encoding_line_number":{"type":"method","name":"encoding_line_number","children":[],"call":["processed_source [] =~ ","processed_source [] "]}," Rubocop Cop Style Encoding offense":{"type":"method","name":"offense","children":[],"call":["always_encode ! ","ascii_only ! ","encoding_present ! "," style == "," style ","processed_source buffer source ascii_only? ","processed_source buffer source ","processed_source buffer ","line =~ ","processed_source [] "," style ==  ! ","processed_source buffer source ascii_only?  ! ","line =~  ! ","processed_source buffer source processed_source buffer source ascii_only? ? ","processed_source []  =~ "]}," Rubocop Cop Rails Delegate private_or_protected_inline":{"type":"method","name":"private_or_protected_inline","children":[],"call":[" processed_source [] strip =~ "," processed_source [] strip "," processed_source [] ","line - "," processed_source "]}," Rubocop Cop Rails Delegate private_or_protected_before":{"type":"method","name":"private_or_protected_before","children":[],"call":["(send\n  (send\n    (send\n      (send nil :processed_source) :[]\n      (irange\n        (int 0)\n        (lvar :line))) :map\n    (block-pass\n      (sym :strip))) :&\n  (array\n    (str \"private\")\n    (str \"protected\"))) any? "," processed_source [] map & "," processed_source [] map "," processed_source [] "," processed_source "]}," Rubocop Cop Rails Delegate private_or_protected_delegation":{"type":"method","name":"private_or_protected_delegation","children":[],"call":[" private_or_protected_inline "," private_or_protected_before ","node loc line ","node loc "," private_or_protected_innode loc line  ","node loc node loc line  "]}," Rubocop Cop Rails Delegate prefixed_method_name":{"type":"method","name":"prefixed_method_name","children":[],"call":["(lvar :target) join to_sym ","(lvar :target) join "]}," Rubocop Cop Rails Delegate method_name_matches?":{"type":"method","name":"method_name_matches?","children":[],"call":["method_name == "," prefixed_method_name "]}," Rubocop Cop Rails Delegate arguments_match?":{"type":"method","name":"arguments_match?","children":[],"call":["arg_array map == ","argument_array map ","arg_array map ","arg_array == ","arg_array size == ","argument_array size ","arg_array size "," Array "," Array  map == "," Array  map "," Array  == "," Array  size == "," Array  size "]}," Rubocop Cop Rails Delegate delegate?":{"type":"method","name":"delegate?","children":[],"call":["n is_a? ","receiver children none? ","receiver children ","receiver type == ","receiver type ","receiver is_a? "]}," Rubocop Cop Rails Delegate trivial_delegate?":{"type":"method","name":"trivial_delegate?","children":[],"call":[" arguments_match? "," method_name_matches? "," delegate? "]}," Rubocop Cop Rails Delegate autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","delegation join ","node loc expression ","node loc "," lambda ","delegation << ","method_name == "," prefixed_method_name ","body children [] children [] ","body children [] children ","body children [] ","body children "," private_or_protected_delegation "," trivial_delegate? "]}," Rubocop Cop Rails Delegate check":{"type":"method","name":"check","children":[],"call":[" add_offense "," private_or_protected_delegation "," trivial_delegate? "]}," Rubocop Cop PercentLiteral type":{"type":"method","name":"type","children":[],"call":["node loc begin source [] ","node loc begin source ","node loc begin ","node loc "]}," Rubocop Cop PercentLiteral begin_source":{"type":"method","name":"begin_source","children":[],"call":["node loc begin source ","node loc begin ","node loc ","node loc respond_to? "]}," Rubocop Cop PercentLiteral process":{"type":"method","name":"process","children":[],"call":[" on_percent_literal "," percent_literal? "]}," Rubocop Cop PercentLiteral percent_literal?":{"type":"method","name":"percent_literal?","children":[],"call":["begin_source start_with? "," begin_source "," begin_source  start_with? ","  begin_source  "]}," Rubocop Cop CheckMethods visibility_and_def_on_same_line?":{"type":"method","name":"visibility_and_def_on_same_line?","children":[],"call":["(sym :def) include? ","args first type ","args first ","args size == ","args size ","(sym :public) include? ","receiver ! "]}," Rubocop Cop CheckAssignment on_send":{"type":"method","name":"on_send","children":[],"call":[" check_assignment ","rhs is_a? ","method_name to_s end_with? ","method_name to_s "]}," Rubocop Cop Lint UselessElseWithoutRescue alternative_message":{"type":"method","name":"alternative_message","children":[],"call":[]}," Rubocop Cop Lint UselessAssignment join_force?":{"type":"method","name":"join_force?","children":[],"call":["force_class == "]}," Rubocop Cop Lint UnusedMethodArgument message":{"type":"method","name":"message","children":[],"call":["message << ","scope name ","all_arguments none? ","scope variables each_value select ","scope variables each_value ","scope variables ","variable scope ","variable name ","variable scope  name ","scope variables each_value select  none? ","variable scope  variables each_value select ","variable scope  variables each_value ","variable scope  variables ","variable variable scope  "]}," Rubocop Cop Lint UnusedMethodArgument check_argument":{"type":"method","name":"check_argument","children":[],"call":[" add_offense ","variable declaration_node "," message ","variable referenced? ","variable name to_s start_with? ","variable name to_s ","variable name ","variable method_argument? ","  message  "]}," Rubocop Cop Lint UnusedMethodArgument after_leaving_scope":{"type":"method","name":"after_leaving_scope","children":[],"call":[" check_argument ","scope variables each_value ","scope variables "]}," Rubocop Cop Lint UnusedMethodArgument join_force?":{"type":"method","name":"join_force?","children":[],"call":["force_class == "]}," Rubocop Cop Lint UnusedBlockArgument message_for_underscore_prefix":{"type":"method","name":"message_for_underscore_prefix","children":[],"call":["variable name "]}," Rubocop Cop Lint UnusedBlockArgument message_for_lambda":{"type":"method","name":"message_for_lambda","children":[],"call":["message << ","all_arguments none? "," message_for_underscore_prefix "," message_for_underscore_prefix  << ","  message_for_underscore_prefix _for_underscore_prefix "]}," Rubocop Cop Lint UnusedBlockArgument message_for_normal_block":{"type":"method","name":"message_for_normal_block","children":[],"call":[" message_for_underscore_prefix ","all_arguments count > ","all_arguments count ","all_arguments none? "]}," Rubocop Cop Lint UnusedBlockArgument message":{"type":"method","name":"message","children":[],"call":["message << "," message_for_normal_block "," message_for_lambda "," lambda? ","scope node ","scope variables each_value select ","scope variables each_value ","scope variables ","variable scope ","variable name ","variable scope  node ","variable scope  variables each_value select ","variable scope  variables each_value ","variable scope  variables ","variable variable scope  "]}," Rubocop Cop Lint UnusedBlockArgument check_argument":{"type":"method","name":"check_argument","children":[],"call":[" add_offense ","variable declaration_node "," message ","variable referenced? ","variable name to_s start_with? ","variable name to_s ","variable name ","variable block_argument? ","  message  "]}," Rubocop Cop Lint UnusedBlockArgument after_leaving_scope":{"type":"method","name":"after_leaving_scope","children":[],"call":[" check_argument ","scope variables each_value ","scope variables "]}," Rubocop Cop Lint UnusedBlockArgument join_force?":{"type":"method","name":"join_force?","children":[],"call":["force_class == "]}," Rubocop Cop Lint UnderscorePrefixedVariableName check_variable":{"type":"method","name":"check_variable","children":[],"call":[" add_offense ","node loc name ","node loc ","node children first loc expression ","node children first loc ","node children first ","node children ","node type == ","node type ","variable declaration_node ","variable references none? ","variable references ","variable references empty? ","variable name to_s start_with? ","variable name to_s ","variable name ","variable declaration_node  loc name ","variable declaration_node  loc ","variable declaration_node  children first loc expression ","variable declaration_node  children first loc ","variable declaration_node  children first ","variable declaration_node  children ","variable declaration_node  type == ","variable declaration_node  type ","variable declaration_variable declaration_node  "]}," Rubocop Cop Lint UnderscorePrefixedVariableName after_leaving_scope":{"type":"method","name":"after_leaving_scope","children":[],"call":[" check_variable ","scope variables each_value ","scope variables "]}," Rubocop Cop Lint UnderscorePrefixedVariableName join_force?":{"type":"method","name":"join_force?","children":[],"call":["force_class == "]}," Rubocop Cop Lint ShadowingOuterLocalVariable join_force?":{"type":"method","name":"join_force?","children":[],"call":["force_class == "]}," Rubocop Cop Lint RescueException autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector remove "," range_with_surrounding_space ","node children first children first loc expression ","node children first children first loc ","node children first children first ","node children first children ","node children first ","node children "," lambda "]}," Rubocop Cop IgnoredNode ignored_nodes":{"type":"method","name":"ignored_nodes","children":[],"call":[]}," Rubocop Cop Force investigate":{"type":"method","name":"investigate","children":[],"call":[]}," Rubocop Cop Force run_hook":{"type":"method","name":"run_hook","children":[],"call":["cop send ","cop respond_to? "," cops each "," cops "]}," Rubocop Cop Force name":{"type":"method","name":"name","children":[],"call":[" class force_name "," class "]}," Rubocop Cop Force initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rubocop Cop Force force_name":{"type":"method","name":"force_name","children":[],"call":[]}," Rubocop Cop Force inherited":{"type":"method","name":"inherited","children":[],"call":[]}," Rubocop Cop Force all":{"type":"method","name":"all","children":[],"call":[]}," Rubocop Cop Cop join_force?":{"type":"method","name":"join_force?","children":[],"call":[]}," Rubocop Cop Commissioner invoke_custom_processing":{"type":"method","name":"invoke_custom_processing","children":[],"call":["cop investigate "," with_cop_error_handling ","cop relevant_file? ","processed_source buffer name ","processed_source buffer ","cop respond_to? ","cops_or_forces each "]}," Rubocop Config deprecation_check":{"type":"method","name":"deprecation_check","children":[],"call":[" [] [] "," [] ","all_cops delete ","all_cops []= ","all_cops [] ","(str \"Exclude\") each "," []  delete "," []  []= "," []  [] "]}," Rubocop TargetFinder fail_fast?":{"type":"method","name":"fail_fast?","children":[],"call":["@options [] "]}," Rubocop Cop Style UnneededPercentX autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","string loc expression source ","string loc expression ","string loc ","node loc expression ","node loc "," lambda "]}," Rubocop Cop Style UnneededPercentX on_xstr":{"type":"method","name":"on_xstr","children":[],"call":[" add_offense ","node loc expression source !~ ","node loc expression source ","node loc expression ","node loc "]}," Rubocop Cop Style SpaceBeforeComment autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector insert_before "," lambda "]}," Rubocop Cop Style SpaceBeforeComment investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense ","t2 pos ","t1 pos end == ","t2 pos begin ","t1 pos end ","t1 pos ","t1 pos line == ","t2 pos line ","t1 pos line ","t2 type == ","t2 type ","processed_source tokens each_cons ","processed_source tokens "]}," Rubocop Cop Style NonNilCheck include_semantic_changes?":{"type":"method","name":"include_semantic_changes?","children":[],"call":[" cop_config [] "," cop_config "]}," Rubocop Cop Style Next simple_if_without_break?":{"type":"method","name":"simple_if_without_break?","children":[],"call":["(or\n  (lvar :return_method)\n  (lvar :return_body)) type != ","(or\n  (lvar :return_method)\n  (lvar :return_body)) type "," modifier_if? "," style == "," style ","body type == ","body type "," if_else? "," ternary_op? "]}," Rubocop Cop Style Next ends_with_condition?":{"type":"method","name":"ends_with_condition?","children":[],"call":[" simple_if_without_break? ","body children last ","body children ","body type == ","body type "]}," Rubocop Cop Style Next method?":{"type":"method","name":"method?","children":[],"call":["(str \"\\\\Aeach_\") match ","METHODS  include? "]}," Rubocop Cop Style Next on_for":{"type":"method","name":"on_for","children":[],"call":[" add_offense "," ends_with_condition? "]}," Rubocop Cop Style Next on_while":{"type":"method","name":"on_while","children":[],"call":[" add_offense "," ends_with_condition? "]}," Rubocop Cop Style Next on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," ends_with_condition? "," method? ","body nil? "]}," Rubocop Cop Style LineEndConcatenation root_node_is_string_type?":{"type":"method","name":"root_node_is_string_type?","children":[],"call":[" string_type? "," root_node_is_string_type? "," concat? ","node type == ","node type "]}," Rubocop Cop Style LineEndConcatenation final_node_is_string_type?":{"type":"method","name":"final_node_is_string_type?","children":[],"call":[" string_type? "," final_node_is_string_type? "," concat? ","node type == ","node type "]}," Rubocop Cop Style LineEndConcatenation concat?":{"type":"method","name":"concat?","children":[],"call":["(sym :+) include? "]}," Rubocop Cop Style GuardClause min_body_length":{"type":"method","name":"min_body_length","children":[],"call":[" fail ","length > ","length is_a? "," cop_config [] "," cop_config "]}," Rubocop Cop Style GuardClause min_body_length?":{"type":"method","name":"min_body_length?","children":[],"call":["(send\n  (send\n    (send\n      (send\n        (lvar :node) :loc) :end) :line) :-\n  (send\n    (send\n      (send\n        (lvar :node) :loc) :keyword) :line)) > "," min_body_length ","node loc end line - ","node loc keyword line ","node loc keyword ","node loc ","node loc end line ","node loc end "]}," Rubocop Cop Style GuardClause if?":{"type":"method","name":"if?","children":[],"call":["body type == ","body type "]}," Rubocop Cop Style GuardClause on_def":{"type":"method","name":"on_def","children":[],"call":[" check_if_node "," if? ","expressions last ","body type == ","body type "]}," Rubocop Cop Style FileName snake_case?":{"type":"method","name":"snake_case?","children":[],"call":["fragment =~ ","basename split all? ","basename split "]}," Rubocop Cop Style EachWithObject on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," format ","accumulator_var == ","return_value type == ","return_value type ","body children last ","body children ","method_args type == ","method_args type ","METHODS  include? ","body children last  type == ","body children last  type "]}," Rubocop Cop Style CommentIndentation two_alternatives?":{"type":"method","name":"two_alternatives?","children":[],"call":["line =~ "]}," Rubocop Cop Style CommentIndentation less_indented?":{"type":"method","name":"less_indented?","children":[],"call":["line =~ "]}," Rubocop Cop Style CommentIndentation correct_indentation":{"type":"method","name":"correct_indentation","children":[],"call":["indentation_of_next_line + "," less_indented? ","next_line =~ ","next_line =~  + "]}," Rubocop Cop Style CommentIndentation investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense "," format ","comment loc expression ","comment loc ","column == "," two_alternatives? ","@column_delta == ","correct_comment_indentation - ","comment loc column "," correct_indentation ","line blank? ! ","line blank? ","lines [] find ","lines [] ","comment loc line ","own_line =~ ","comment loc line - ","processed_source lines ","processed_source comments each ","processed_source comments ","comment loc column  == ","correct_comment_indentation -  == ","@comment loc column _delta == "," correct_indentation  - ","comment loc comment loc column  ","processed_source lines  [] find ","processed_source lines  [] ","lines []  =~ ","processed_source processed_source lines  "]}," Rubocop Cop Style AlignParameters target_method_lineno":{"type":"method","name":"target_method_lineno","children":[],"call":["node loc begin line ","node loc begin ","node loc ","node loc selector line ","node loc selector "]}," Rubocop Cop Lint UnusedArgument check_argument":{"type":"method","name":"check_argument","children":[],"call":[" add_offense ","variable declaration_node "," message ","variable referenced? ","variable name to_s start_with? ","variable name to_s ","variable name ","  message  "]}," Rubocop Cop Lint UnusedArgument after_leaving_scope":{"type":"method","name":"after_leaving_scope","children":[],"call":[" check_argument ","scope variables each_value ","scope variables "]}," Rubocop Cop Lint UnusedArgument autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","node loc expression ","node loc "," lambda ","node loc expression source sub ","node loc expression source "]}," Rubocop Cop Lint UnusedArgument join_force?":{"type":"method","name":"join_force?","children":[],"call":["force_class == "]}," Rubocop ConfigLoader old_auto_config_file_warning":{"type":"method","name":"old_auto_config_file_warning","children":[],"call":[" exit "," warn ","(str \"Attention: rubocop-todo.yml has been renamed to \") color "]}," RuboCop Version version":{"type":"method","name":"version","children":[],"call":[" format "]}," RuboCop Token to_s":{"type":"method","name":"to_s","children":[],"call":["@text inspect ","@pos column ","@pos line "," text inspect "," text "," type "," column "," line "]}," RuboCop Token initialize":{"type":"method","name":"initialize","children":[],"call":["text to_s "]}," RuboCop Token from_parser_token":{"type":"method","name":"from_parser_token","children":[],"call":[]}," RuboCop TargetFinder process_explicit_path":{"type":"method","name":"process_explicit_path","children":[],"call":["config file_to_exclude? ","@config_store for ","files reject "," force_exclusion? ","Dir  [] ","path include? "," ruby_file? ","files select! "," included_file? ","mode == ","@config_store for  file_to_exclude? ","@@config_store for _store for ","Dir  []  reject ","Dir  []  select! "]}," RuboCop TargetFinder ruby_executable?":{"type":"method","name":"ruby_executable?","children":[],"call":[" warn ","e message ","e class "," debug? ","first_line =~ ","f readline ","File  open ","File  extname empty? ","File  extname ","(send\n  (lvar :first_line) :=~\n  (regexp\n    (str \"#!.*(\")\n    (begin\n      (send\n        (const nil :RUBY_INTERPRETERS) :join\n        (str \"|\")))\n    (str \")\")\n    (regopt))) nil? ! ","(send\n  (lvar :first_line) :=~\n  (regexp\n    (str \"#!.*(\")\n    (begin\n      (send\n        (const nil :RUBY_INTERPRETERS) :join\n        (str \"|\")))\n    (str \")\")\n    (regopt))) nil? ","RUBY_INTERPRETERS  join ","File  exist? ","(send\n  (lvar :first_line) :=~\n  (regexp\n    (str \"#!.*(\")\n    (begin\n      (send\n        (send nil :ruby_interpreters\n          (lvar :file)) :join\n        (str \"|\")))\n    (str \")\")\n    (regopt))) nil? ! ","(send\n  (lvar :first_line) :=~\n  (regexp\n    (str \"#!.*(\")\n    (begin\n      (send\n        (send nil :ruby_interpreters\n          (lvar :file)) :join\n        (str \"|\")))\n    (str \")\")\n    (regopt))) nil? "," ruby_interpreters join "," ruby_interpreters ","ex message ","ex class ","(str \"#!.*(\") match? ","File  open  =~ ","(send\n  (lvar :File  open ) :=~\n  (regexp\n    (str \"#!.*(\")\n    (begin\n      (send\n        (const nil :RUBY_INTERPRETERS) :join\n        (str \"|\")))\n    (str \")\")\n    (regopt))) nil? ! ","(send\n  (lvar :File  open ) :=~\n  (regexp\n    (str \"#!.*(\")\n    (begin\n      (send\n        (const nil :RUBY_INTERPRETERS) :join\n        (str \"|\")))\n    (str \")\")\n    (regopt))) nil? ","(send\n  (lvar :File  open ) :=~\n  (regexp\n    (str \"#!.*(\")\n    (begin\n      (send\n        (send nil :ruby_interpreters\n          (lvar :file)) :join\n        (str \"|\")))\n    (str \")\")\n    (regopt))) nil? ! ","(send\n  (lvar :File  open ) :=~\n  (regexp\n    (str \"#!.*(\")\n    (begin\n      (send\n        (send nil :ruby_interpreters\n          (lvar :file)) :join\n        (str \"|\")))\n    (str \")\")\n    (regopt))) nil? "]}," RuboCop TargetFinder target_files_in_dir":{"type":"method","name":"target_files_in_dir","children":[],"call":["File  mtime to_i -@ ","File  mtime to_i ","File  mtime ","target_files sort_by! "," fail_fast? ","@config_store for file_to_include? ","@config_store for "," ruby_executable? ","File  extname == ","File  extname ","base_dir_config file_to_exclude? ","files select ","FileTest  file? ","Dir  [] select ","Dir  [] ","base_dir gsub! "," to_inspect? ","all_files select ","Set  new ","all_files - "," find_files ","base_dir gsub "," Integer ","File  mtime -@ "," Integer -@ "," ls_git_files ","target_files sort! "," order ","file include? ","(send\n  (lvar :all_files) :select) sort ","@config_store for  file_to_exclude? ","base_dir gsub _config file_to_exclude? ","base_dir gsub  gsub! "," find_files  select "," find_files  - ","base_dir gsub  gsub "," ls_ ls_git_files  ","(send\n  (lvar : find_files ) :select) sort "]}," RuboCop TargetFinder find":{"type":"method","name":"find","children":[],"call":["(send\n  (lvar :files) :map) uniq ","File  expand_path ","files map "," process_explicit_path "," target_files_in_dir ","arg chomp ","File  directory? ","args uniq each ","args uniq ","args empty? "]}," RuboCop TargetFinder fail_fast?":{"type":"method","name":"fail_fast?","children":[],"call":["@options [] "]}," RuboCop TargetFinder debug?":{"type":"method","name":"debug?","children":[],"call":["@options [] "]}," RuboCop TargetFinder force_exclusion?":{"type":"method","name":"force_exclusion?","children":[],"call":["@options [] "]}," RuboCop TargetFinder initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop SourceParser create_parser":{"type":"method","name":"create_parser","children":[],"call":["parser diagnostics ignore_warnings= ","parser diagnostics ","parser diagnostics all_errors_are_fatal= ","RUBY_ENGINE  != ","Parser CurrentRuby  new ","Parser CurrentRuby  new  diagnostics ignore_warnings= ","Parser CurrentRuby  new  diagnostics ","Parser CurrentRuby  new  diagnostics all_errors_are_fatal= "]}," RuboCop SourceParser parse":{"type":"method","name":"parse","children":[],"call":["ProcessedSource  new ","Token  from_parser_token ","tokens map ","parser tokenize ","parser diagnostics consumer= ","diagnostics << "," lambda ","parser diagnostics "," create_parser ","source_buffer source= ","Parser Source Buffer  new ","Token  from_ create_parser _token "," create_parser  tokenize "," create_parser  diagnostics consumer= "," create_parser  diagnostics "," create_ create_parser  ","Parser Source Buffer  new  source= "]}," RuboCop SourceParser parse_file":{"type":"method","name":"parse_file","children":[],"call":[" parse ","File  read "]}," RuboCop RakeTask setup_subtasks":{"type":"method","name":"setup_subtasks","children":[],"call":[" run_cli "," verbose "," full_options unshift "," full_options "," task "," desc "," namespace ","task_block call ","(self) slice ","task_block arity "," block_given? ","RakeFileUtils  verbose ","options delete "," perform "," Rake Task  [] invoke "," Rake Task  [] "," warn "," Rainbow yellow "," Rainbow "," task_args "," require "," full_ full_options unshift  unshift "," full_ full_options unshift  "," full_options unshift  delete "]}," RuboCop RakeTask setup_ivars":{"type":"method","name":"setup_ivars","children":[],"call":["args shift "," require "]}," RuboCop RakeTask full_options":{"type":"method","name":"full_options","children":[],"call":["result concat "," patterns "," options ","(send\n  (send nil :requires) :map) flatten "," requires map "," requires ","(send\n  (send nil :formatters) :map) flatten "," formatters map "," formatters "," tap "," requires flat_map "," formatters flat_map "," options flatten ","(send\n  (send nil :formatters) :map) flatten concat concat concat ","(send\n  (send nil :formatters) :map) flatten concat concat ","(send\n  (send nil :formatters) :map) flatten concat "]}," RuboCop RakeTask run_cli":{"type":"method","name":"run_cli","children":[],"call":[" abort "," fail_on_error ","result == ","cli run "," puts ","CLI  new "," require ","result != ","result nonzero? ","cli run  == ","CLI  new  run ","cli run  != ","cli run  nonzero? "]}," RuboCop RakeTask run_main_task":{"type":"method","name":"run_main_task","children":[],"call":[" run_cli "," full_options "]}," RuboCop RakeTask initialize":{"type":"method","name":"initialize","children":[],"call":[" setup_subtasks "," name "," run_main_task "," verbose ","task_block call ","(self) slice ","task_block arity ","RakeFileUtils  send "," task "," desc "," Rake  application last_comment "," Rake  application "," setup_ivars "," block_given? "," Rake  application last_description "," run_cli "," full_options ","RakeFileUtils  verbose "]}," RuboCop ProcessedSource init_lines":{"type":"method","name":"init_lines","children":[],"call":["@raw_lines map ","@buffer source lines ","@buffer source ","@buffer source lines  map "]}," RuboCop ProcessedSource file_path":{"type":"method","name":"file_path","children":[],"call":["@buffer name "," buffer name "," buffer "]}," RuboCop ProcessedSource valid_syntax?":{"type":"method","name":"valid_syntax?","children":[],"call":["(sym :error) include? ","d level ","@diagnostics none? "]}," RuboCop ProcessedSource []":{"type":"method","name":"[]","children":[],"call":[" lines [] "," lines "]}," RuboCop ProcessedSource raw_lines":{"type":"method","name":"raw_lines","children":[],"call":[" init_lines "]}," RuboCop ProcessedSource lines":{"type":"method","name":"lines","children":[],"call":[" init_lines "," raw_source lines map "," raw_source lines "," raw_source ","result << ","line == ","ix >= ","all_lines each_with_index ","all_lines count "," tokens last pos line "," tokens last pos "," tokens last "," tokens "," tokens any? ","all_lines size ","@buffer source_lines "," tokens last line "," raw_source lines map  each_with_index ","@buffer source_lines  each_with_index "," raw_source lines map  count ","@buffer source_lines  count "," raw_source lines map  size ","@buffer source_lines  size "]}," RuboCop ProcessedSource disabled_line_ranges":{"type":"method","name":"disabled_line_ranges","children":[],"call":[" comment_config cop_disabled_line_ranges "," comment_config "]}," RuboCop ProcessedSource initialize":{"type":"method","name":"initialize","children":[],"call":["CommentConfig  new "," parse ","source force_encoding ","source encoding == ","source encoding "]}," RuboCop PathUtil match_path?":{"type":"method","name":"match_path?","children":[],"call":["path =~ "," warn ","pattern end_with? ","basename == ","new_match ! ","File  fnmatch? ","File  basename "," issue_deprecation_warning ","s start_with? ","path split none? ","path split ","basename start_with? "," hidden? ","path split any? "," raise ","e message start_with? ","e message ","File FNM_PATHNAME  | "," hidden_file_in_not_hidden_dir? "," exception ","ex message start_with? ","ex message ","pattern match? ","pattern == "," glob? ","File  basename  == ","File  fnmatch?  ! ","File  File  basename  ","File  basename  start_with? "]}," RuboCop PathUtil relative_path":{"type":"method","name":"relative_path","children":[],"call":["path_name relative_path_from to_s ","path_name relative_path_from ","Pathname  new ","File  expand_path ","path [] ","base_dir length + ","base_dir length ","path start_with? ","base_dir_length + ","path length - - ","path length - ","path length ","PathUtil  relative_paths_cache [] [] ","PathUtil  relative_paths_cache [] ","PathUtil  relative_paths_cache ","Pathname  new  relative_path_from to_s ","Pathname  new  relative_path_from ","base_dir length  + "]}," RuboCop Options validate_auto_gen_config_option":{"type":"method","name":"validate_auto_gen_config_option","children":[],"call":[" exit "," warn ","args any? ","args first == ","args first ","args size <= ","args size ","args empty? "]}," RuboCop Options validate_only_option":{"type":"method","name":"validate_only_option","children":[],"call":[" fail ","c cop_name == ","c cop_name ","Cop Cop  all none? ","Cop Cop  all ","@options [] each ","@options [] "]}," RuboCop Options deprecate":{"type":"method","name":"deprecate","children":[],"call":[" warn ","message << "]}," RuboCop Options convert_deprecated_options":{"type":"method","name":"convert_deprecated_options","children":[],"call":["(send\n  (lvar :args) :map!) flatten! "," deprecate ","args map! "]}," RuboCop Options ignore_dropped_options":{"type":"method","name":"ignore_dropped_options","children":[],"call":[" warn ","(str \"-s\") include? ","args reject! "]}," RuboCop Options long_opt_symbol":{"type":"method","name":"long_opt_symbol","children":[],"call":["long_opt [] sub gsub to_sym ","long_opt [] sub gsub ","long_opt [] sub ","long_opt [] ","arg start_with? ","args find ","long_opt [] sub tr to_sym ","long_opt [] sub tr ","long_opt [] sub tr gsub to_sym ","long_opt [] sub tr gsub ","long_opt [] sub sub tr gsub to_sym ","long_opt [] sub sub tr gsub ","long_opt [] sub sub tr ","long_opt [] sub sub "]}," RuboCop Options option":{"type":"method","name":"option","children":[],"call":[" block_given? ","@options []= ","opts on "," Array ","OptionsHelp TEXT  [] "," long_opt_symbol ","  long_opt_symbol  "]}," RuboCop Options add_boolean_flags":{"type":"method","name":"add_boolean_flags","children":[],"call":[" option ","@options []= ","$stdin read ","@options [] << ","@options [] ","$stdin binmode read ","$stdin binmode "," warn "]}," RuboCop Options add_flags_with_optional_args":{"type":"method","name":"add_flags_with_optional_args","children":[],"call":["@options []= ","list split ","list nil? "," option "]}," RuboCop Options add_severity_option":{"type":"method","name":"add_severity_option","children":[],"call":["@options []= "," option ","RuboCop Cop Severity NAMES  + ","RuboCop Cop Severity CODE_TABLE  merge "]}," RuboCop Options add_formatting_options":{"type":"method","name":"add_formatting_options","children":[],"call":["@options [] last << ","@options [] last ","@options [] "," option ","@options [] << ","@options []= "]}," RuboCop Options add_configuration_options":{"type":"method","name":"add_configuration_options","children":[],"call":[" option ","@options []= "," validate_auto_gen_config_option "," validate_exclude_limit_option ","@validator validate_exclude_limit_option "," add_auto_gen_options "]}," RuboCop Options parse":{"type":"method","name":"parse","children":[],"call":[" fail ","incompat inspect ","(lvasgn :incompat\n  (send\n    (send\n      (ivar :@options) :keys) :&\n    (const nil :EXITING_OPTIONS))) size > ","(lvasgn :incompat\n  (send\n    (send\n      (ivar :@options) :keys) :&\n    (const nil :EXITING_OPTIONS))) size ","@options keys & ","@options keys ","(send\n  (const nil :OptionParser) :new) parse! "," add_boolean_flags "," add_flags_with_optional_args "," add_severity_option "," require "," option "," add_formatting_options "," add_configuration_options "," validate_only_option ","@options []= ","Cop Cop  qualified_cop_name ","list split map ","list split ","opts banner= ","OptionParser  new "," convert_deprecated_options "," ignore_dropped_options "," validate_compatibility "," define_options parse! "," define_options ","args one? ! ","args one? ","@options [] ","@options delete ","@validator validate_compatibility "," raise "," args_from_file concat concat "," args_from_file concat "," args_from_env "," args_from_file ","$stdin binmode read ","$stdin binmode ","args any? ","args_from_file concat concat ","args_from_file concat ","ArgumentsEnv  read_as_arguments ","ArgumentsFile  read_as_arguments ","@options keys &  inspect ","(lvasgn :@options keys & \n  (send\n    (send\n      (ivar :@options) :keys) :&\n    (const nil :EXITING_OPTIONS))) size > ","(lvasgn :@options keys & \n  (send\n    (send\n      (ivar :@options) :keys) :&\n    (const nil :EXITING_OPTIONS))) size "," add_flags_with_optional_ args_from_file concat concat  "," add_flags_with_optional_args_from_file concat concat  "," args_from_file concat concat  one? ! ","args_from_file concat concat  one? ! "," args_from_file concat concat  one? ","args_from_file concat concat  one? ","  args_from_file concat concat _from_file concat concat "," args_from_file concat concat _from_file concat concat "," ArgumentsFile  read_as_arguments  concat concat ","  args_from_file concat concat _from_file concat "," args_from_file concat concat _from_file concat "," ArgumentsFile  read_as_arguments  concat ","  args_from_file concat concat _from_env "," args_from_file concat concat _from_env "," ArgumentsEnv  read_as_arguments  ","  args_from_file concat concat _from_file "," args_from_file concat concat _from_file "," ArgumentsFile  read_as_arguments  "," args_from_file concat concat  any? ","args_from_file concat concat  any? ","args_from_file concat concat _from_file concat concat ","ArgumentsFile  read_as_arguments  concat concat ","args_from_file concat concat _from_file concat ","ArgumentsFile  read_as_arguments  concat "]}," RuboCop Options initialize":{"type":"method","name":"initialize","children":[],"call":["OptionsValidator  new "]}," RuboCop Formatter SimpleTextFormatter pluralize":{"type":"method","name":"pluralize","children":[],"call":["text << ","number == ","number to_s ","options [] "]}," RuboCop Formatter SimpleTextFormatter message":{"type":"method","name":"message","children":[],"call":["message << "," annotate_message ","offense message "," green ","offense corrected? ","offense corrected_with_todo? "," yellow ","offense correctable? "," green  << "," annotate_ green  ","offense  green  "]}," RuboCop Formatter SimpleTextFormatter annotate_message":{"type":"method","name":"annotate_message","children":[],"call":["msg gsub "," Rainbow yellow "," Rainbow "," yellow "]}," RuboCop Formatter SimpleTextFormatter colored_severity_code":{"type":"method","name":"colored_severity_code","children":[],"call":[" colorize ","offense severity code ","offense severity ","COLOR_FOR_SEVERITY  [] ","offense severity name ","COLOR_FOR_SEVERITY  fetch "," COLOR_FOR_SEVERITY  [] ize "," COLOR_FOR_SEVERITY  fetch ize "]}," RuboCop Formatter SimpleTextFormatter smart_path":{"type":"method","name":"smart_path","children":[],"call":[" relative_path ","path start_with? ","Dir  pwd "]}," RuboCop Formatter SimpleTextFormatter count_stats":{"type":"method","name":"count_stats","children":[],"call":["offenses select count ","offenses select ","offenses count ","offenses count - "]}," RuboCop Formatter SimpleTextFormatter report_summary":{"type":"method","name":"report_summary","children":[],"call":[" output puts "," output ","summary << "," colorize ","correction_count == ","correction_text << "," pluralize ","correction_count > ","offense_count zero? ","offenses_text << ","report summary ","Report  new "," rainbow ","@options [] "," pluralize  << ","report  pluralize  ","Report  new  summary "]}," RuboCop Formatter SimpleTextFormatter report_file":{"type":"method","name":"report_file","children":[],"call":[" output printf "," message ","o real_column ","o line "," colored_severity_code "," output ","offenses each "," output puts "," yellow "," smart_path "]}," RuboCop Formatter SimpleTextFormatter finished":{"type":"method","name":"finished","children":[],"call":[" report_summary ","inspected_files count "]}," RuboCop Formatter SimpleTextFormatter file_finished":{"type":"method","name":"file_finished","children":[],"call":[" report_file "," count_stats ","offenses empty? "]}," RuboCop Formatter SimpleTextFormatter started":{"type":"method","name":"started","children":[],"call":[]}," RuboCop Formatter ProgressFormatter report_file_as_mark":{"type":"method","name":"report_file_as_mark","children":[],"call":[" output write "," output "," colored_severity_code ","o severity ","offenses max_by "," green ","offenses empty? "]}," RuboCop Formatter ProgressFormatter finished":{"type":"method","name":"finished","children":[],"call":[" report_summary ","inspected_files count "," report_file ","@offenses_for_files each "," output puts "," output ","@offenses_for_files empty? ","inspected_files size "]}," RuboCop Formatter ProgressFormatter file_finished":{"type":"method","name":"file_finished","children":[],"call":[" report_file_as_mark ","@offenses_for_files []= "," count_stats ","offenses empty? "]}," RuboCop Formatter ProgressFormatter started":{"type":"method","name":"started","children":[],"call":[" output puts ","target_files count "," output ","target_files count == "," pluralize ","target_files size "]}," RuboCop Formatter OffenseCountFormatter total_offense_count":{"type":"method","name":"total_offense_count","children":[],"call":["offense_counts values inject ","offense_counts values ","offense_counts values sum "]}," RuboCop Formatter OffenseCountFormatter ordered_offense_counts":{"type":"method","name":"ordered_offense_counts","children":[],"call":["Hash  [] ","v -@ ","offense_counts sort_by ","(send\n  (lvar :offense_counts) :sort_by) to_h "]}," RuboCop Formatter OffenseCountFormatter report_summary":{"type":"method","name":"report_summary","children":[],"call":[" output puts "," output ","count to_s ljust ","total_count to_s length + ","total_count to_s length ","total_count to_s ","count to_s ","per_cop_counts each "," total_offense_count "," ordered_offense_counts ","@style_guide_links [] "," total_offense_count  to_s length + "," total_offense_count  to_s length "," total_offense_count  to_s "," ordered_offense_counts  each "]}," RuboCop Formatter OffenseCountFormatter finished":{"type":"method","name":"finished","children":[],"call":[" report_summary "]}," RuboCop Formatter OffenseCountFormatter file_finished":{"type":"method","name":"file_finished","children":[],"call":["@offense_counts [] ","o cop_name ","offenses each ","@progressbar increment "," instance_variable_defined? ","o message [] ","o message ","@style_guide_links [] "," options [] "," options ","offenses empty? "]}," RuboCop Formatter OffenseCountFormatter started":{"type":"method","name":"started","children":[],"call":["Hash  new ","@progressbar start ","ProgressBar  create ","target_files count "," output ","target_files count == "," output tty? ","ProgressBar  create  start "]}," RuboCop Formatter JSONFormatter hash_for_location":{"type":"method","name":"hash_for_location","children":[],"call":["offense location length ","offense location ","offense real_column ","offense line ","offense last_column ","offense last_line ","offense last_column zero? "]}," RuboCop Formatter JSONFormatter hash_for_offense":{"type":"method","name":"hash_for_offense","children":[],"call":[" hash_for_location ","offense corrected? ","offense cop_name ","offense message ","offense severity name ","offense severity ","offense correctable? "]}," RuboCop Formatter JSONFormatter hash_for_file":{"type":"method","name":"hash_for_file","children":[],"call":[" hash_for_offense ","offenses map "," relative_path "," smart_path "]}," RuboCop Formatter JSONFormatter metadata_hash":{"type":"method","name":"metadata_hash","children":[],"call":["RUBY_PATCHLEVEL  to_s "]}," RuboCop Formatter JSONFormatter finished":{"type":"method","name":"finished","children":[],"call":[" output write "," output_hash to_json "," output_hash "," output "," output_hash [] []= ","inspected_files count "," output_hash [] "]}," RuboCop Formatter JSONFormatter file_finished":{"type":"method","name":"file_finished","children":[],"call":["offenses count "," output_hash [] [] "," output_hash [] "," output_hash "," output_hash [] << "," hash_for_file "]}," RuboCop Formatter JSONFormatter started":{"type":"method","name":"started","children":[],"call":[" output_hash [] []= ","target_files count "," output_hash [] "," output_hash "]}," RuboCop Formatter JSONFormatter initialize":{"type":"method","name":"initialize","children":[],"call":[" metadata_hash "]}," RuboCop Formatter FuubarStyleFormatter progressbar_color":{"type":"method","name":"progressbar_color","children":[],"call":["COLOR_FOR_SEVERITY  [] ","@severest_offense severity name ","@severest_offense severity "]}," RuboCop Formatter FuubarStyleFormatter with_color":{"type":"method","name":"with_color","children":[],"call":[" output write "," output "," colorize chomp "," colorize "," progressbar_color "," rainbow enabled "," rainbow "]}," RuboCop Formatter FuubarStyleFormatter count_stats":{"type":"method","name":"count_stats","children":[],"call":["offense severity ","offenses max_by ","offenses << ","offenses empty? ","offenses reject ","offenses reject  max_by ","offenses reject  << ","offenses reject  empty? ","offenses reject  reject "]}," RuboCop Formatter FuubarStyleFormatter file_finished":{"type":"method","name":"file_finished","children":[],"call":["@progressbar increment "," with_color "," report_file ","@progressbar clear ","offenses empty? "," count_stats "]}," RuboCop Formatter FuubarStyleFormatter started":{"type":"method","name":"started","children":[],"call":["@progressbar start "," with_color ","ProgressBar  create ","target_files count "," output ","target_files count == ","ProgressBar  create  start "]}," RuboCop Formatter FormatterSet custom_formatter_class":{"type":"method","name":"custom_formatter_class","children":[],"call":["namespace const_get ","constant_names reduce ","constant_names shift ","constant_names first empty? ","constant_names first ","specified_class_name split ","specified_class_name split  reduce ","specified_class_name split  shift ","specified_class_name split  first empty? ","specified_class_name split  first "]}," RuboCop Formatter FormatterSet builtin_formatter_class":{"type":"method","name":"builtin_formatter_class","children":[],"call":["BUILTIN_FORMATTERS_FOR_KEYS  [] ","matching_keys first "," fail ","matching_keys size > ","matching_keys size ","matching_keys empty? ","key start_with? ","BUILTIN_FORMATTERS_FOR_KEYS  keys select ","BUILTIN_FORMATTERS_FOR_KEYS  keys "," raise ","specified_key == ","key delete ","key =~ ","(str \"^\\\\[\") match? ","RuboCop Formatter  const_get "]}," RuboCop Formatter FormatterSet close_output_files":{"type":"method","name":"close_output_files","children":[],"call":["formatter output close ","formatter output ","formatter output is_a? "," each "]}," RuboCop Formatter FormatterSet add_formatter":{"type":"method","name":"add_formatter","children":[],"call":[" << ","formatter_class new ","File  open "," builtin_formatter_class "," custom_formatter_class ","FileUtils  mkdir_p ","File  exist? ","File  dirname "," formatter_class new "," formatter_class "]}," RuboCop Formatter FileListFormatter file_finished":{"type":"method","name":"file_finished","children":[],"call":[" output printf "," output ","offenses empty? "]}," RuboCop Formatter EmacsStyleFormatter file_finished":{"type":"method","name":"file_finished","children":[],"call":[" output printf ","o severity code ","o severity ","o real_column ","o line "," output ","message << ","o message ","o corrected? ","offenses each ","message tr ","o corrected_with_todo? "," message ","o message  << ","o o message  ","o message  tr "," o message  "]}," RuboCop Formatter DisabledLinesFormatter smart_path":{"type":"method","name":"smart_path","children":[],"call":[" relative_path ","path start_with? ","Dir  pwd "]}," RuboCop Formatter DisabledLinesFormatter cops_disabled_in_comments_summary":{"type":"method","name":"cops_disabled_in_comments_summary","children":[],"call":[" output puts "," output ","summary << "," cyan "," smart_path ","line_ranges each ","disabled_cops each ","@cop_disabled_line_ranges each "]}," RuboCop Formatter DisabledLinesFormatter finished":{"type":"method","name":"finished","children":[],"call":[" cops_disabled_in_comments_summary "]}," RuboCop Formatter DisabledLinesFormatter file_started":{"type":"method","name":"file_started","children":[],"call":["@cop_disabled_line_ranges []= ","options [] "]}," RuboCop Formatter DisabledLinesFormatter started":{"type":"method","name":"started","children":[],"call":[]}," RuboCop Formatter DisabledConfigFormatter output_cop_comments":{"type":"method","name":"output_cop_comments","children":[],"call":["output puts ","params join ","params empty? ","default_cfg keys - - ","cfg keys ","default_cfg keys - ","default_cfg keys ","RuboCop ConfigLoader  default_configuration [] ","RuboCop ConfigLoader  default_configuration ","COPS  [] first new support_autocorrect? ","COPS  [] first new ","COPS  [] first ","COPS  [] ","value join ","value empty? ","value is_a? ","default_cfg [] ","params each "," output_cop_param_comments "," cop_config_params "," default_config ","output_buffer puts ","cop_class new support_autocorrect? ","cop_class new ","Cop Cop  registry find_by_cop_name ","Cop Cop  registry ","Cop Registry  global find_by_cop_name ","Cop Registry  global "," show_offense_counts? "," supports_unsafe_autocorrect? "," supports_safe_auto_correct? "," supports_safe_autocorrect? ","default_cfg keys - -  join "," cop_config_params  join ","default_cfg keys - -  empty? "," cop_config_params  empty? ","RuboCop ConfigLoader  default_configuration []  keys - - "," default_config  keys - - ","RuboCop ConfigLoader  default_configuration []  keys - "," default_config  keys - ","RuboCop ConfigLoader  default_configuration []  keys "," default_config  keys ","default_cfg []  join ","default_cfg []  empty? ","default_cfg []  is_a? ","RuboCop ConfigLoader  default_configuration []  [] "," default_config  [] ","default_cfg keys - -  each "," cop_config_params  each "," cop_config_default_cfg keys - -  "," cop_config_ cop_config_params  ","Cop Cop  registry find_by_cop_name  new support_autocorrect? ","Cop Registry  global find_by_cop_name  new support_autocorrect? ","Cop Cop  registry find_by_cop_name  new ","Cop Registry  global find_by_cop_name  new "]}," RuboCop Formatter DisabledConfigFormatter finished":{"type":"method","name":"finished","children":[],"call":[" puts "," output path "," output "," output puts ","cfg each "," output_cop_comments "," class config_to_allow_offenses [] "," class config_to_allow_offenses "," class ","@cops_with_offenses sort each ","@cops_with_offenses sort ","@cops_with_offenses delete "," output_offending_files ","HEADING  % "," format ","@exclude_limit_option to_i "," output_cop_config "," output_offenses "," command "," timestamp "," class config_to_allow_offenses []  each "]}," RuboCop Formatter DisabledConfigFormatter file_finished":{"type":"method","name":"file_finished","children":[],"call":["@cops_with_offenses [] ","o cop_name ","offenses each ","Hash  new ","@files_with_offences [] << ","@files_with_offences [] ","@files_with_offenses [] << ","@files_with_offenses [] ","Set  new "]}," RuboCop Formatter Colorizable colorize":{"type":"method","name":"colorize","children":[],"call":[" rainbow wrap color "," rainbow wrap "," rainbow "]}," RuboCop Formatter Colorizable rainbow":{"type":"method","name":"rainbow","children":[],"call":["rainbow enabled= "," output tty? "," output ","Rainbow  new "," output tty? ! "," options [] == "," options [] "," options ","Rainbow  new  enabled= "]}," RuboCop Formatter ClangStyleFormatter highlight_line":{"type":"method","name":"highlight_line","children":[],"call":["  * + ","^ * ","  * ","location column ","location source_line length - ","location source_line length ","location source_line ","location column_range count ","location column_range ","location begin line == ","location end line ","location end ","location begin line ","location begin "]}," RuboCop Formatter ClangStyleFormatter report_file":{"type":"method","name":"report_file","children":[],"call":[" output puts "," highlight_line ","o location "," output ","source_line blank? ","o location source_line "," output printf "," message "," colored_severity_code ","o real_column ","o line "," cyan "," smart_path ","offenses each ","^ * ","o highlighted_area size ","o highlighted_area ","  * ","o highlighted_area begin_pos ","location first_line == ","location last_line ","location first_line ","location source_line "," report_offense ","o o location  ","o location source_line  blank? ","location source_line  blank? ","o location o location source_line  ","o location location source_line  ","o o location  source_line ","o location  first_line == ","o location  last_line ","o location  first_line ","location o location source_line  ","location location source_line  ","o location  source_line "]}," RuboCop Formatter BaseFormatter finished":{"type":"method","name":"finished","children":[],"call":[]}," RuboCop Formatter BaseFormatter file_finished":{"type":"method","name":"file_finished","children":[],"call":[]}," RuboCop Formatter BaseFormatter file_started":{"type":"method","name":"file_started","children":[],"call":[]}," RuboCop Formatter BaseFormatter started":{"type":"method","name":"started","children":[],"call":[]}," RuboCop Formatter BaseFormatter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop FileInspector fail_level":{"type":"method","name":"fail_level","children":[],"call":["RuboCop Cop Severity  new ","@options [] "]}," RuboCop FileInspector formatter_set":{"type":"method","name":"formatter_set","children":[],"call":[" exit ","$stderr puts ","error backtrace "," warn ","error message ","set add_formatter ","pairs each ","@options [] ","Formatter FormatterSet  new ","Formatter FormatterSet  new  add_formatter "]}," RuboCop FileInspector run_rails_cops?":{"type":"method","name":"run_rails_cops?","children":[],"call":["config [] [] ","config [] ","@options [] "]}," RuboCop FileInspector mobilized_cop_classes":{"type":"method","name":"mobilized_cop_classes","children":[],"call":["cop_classes select! ","@options [] ","cop_classes reject! "," run_rails_cops? ","c lint? ","@options [] include? ","c cop_name ","Cop Cop  all ","@mobilized_cop_classes [] ","config object_id ","Cop Cop  all  select! ","Cop Cop  all  reject! ","@mobilized_Cop Cop  all  [] "]}," RuboCop FileInspector inspect_file":{"type":"method","name":"inspect_file","children":[],"call":["team updated_source_file? ","@errors concat ","team errors ","team inspect_file ","Cop Team  new "," mobilized_cop_classes ","config_store for ","processed_source file_path ","Cop Team  new  updated_source_file? ","Cop Team  new  errors ","Cop Team  new  inspect_file ","config_store for _store for "]}," RuboCop FileInspector process_source":{"type":"method","name":"process_source","children":[],"call":["Cop Offense  new ","e message capitalize + ","e message capitalize ","e message ","Struct  new new ","Struct  new ","SourceParser  parse_file "]}," RuboCop FileInspector process_file":{"type":"method","name":"process_file","children":[],"call":[" formatter_set file_finished ","offenses compact sort freeze ","offenses compact sort ","offenses compact "," formatter_set ","parse_offenses any? "," process_source ","offenses include? ","new_offenses reject "," inspect_file ","offenses select! "," loop "," formatter_set file_started ","processed_source disabled_line_ranges ","offenses any? "," puts ","@options [] "]}," RuboCop FileInspector display_error_summary":{"type":"method","name":"display_error_summary","children":[],"call":[" warn ","RuboCop Version  version ","@errors each ","(str \"\\n\") color ","@errors count ","@errors count > ","@errors empty? "]}," RuboCop FileInspector process_files":{"type":"method","name":"process_files","children":[],"call":[" formatter_set close_output_files "," formatter_set "," formatter_set finished ","inspected_files freeze ","@options [] ","inspected_files << ","o severity >= "," fail_level ","o severity ","offenses any? "," process_file ","target_files each "," formatter_set started ","target_files each freeze "," process_file  any? "]}," RuboCop FileInspector initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop Cop VariableForce scanned_nodes":{"type":"method","name":"scanned_nodes","children":[],"call":["Set  new compare_by_identity ","Set  new "]}," RuboCop Cop VariableForce scanned_node?":{"type":"method","name":"scanned_node?","children":[],"call":["scanned_node equal? "," scanned_nodes any? "," scanned_nodes "," scanned_nodes include? "]}," RuboCop Cop VariableForce scan":{"type":"method","name":"scan","children":[],"call":[" scan ","child is_a? ","node children each ","node children "]}," RuboCop Cop VariableForce find_variables_in_loop":{"type":"method","name":"find_variables_in_loop","children":[],"call":["assignment_nodes_in_loop << ","referenced_variable_names_in_loop << ","asgn_node children first ","asgn_node children ","asgn_node type == ","asgn_node type ","node children first ","node children ","node type "," scan ","loop_node each_descendant ","reference name ","reference node ","reference assignment? "," each_descendant_reference ","node children first  children first ","node children first  children ","node children first  type == ","node children first  type "]}," RuboCop Cop VariableForce mark_assignments_as_referenced_in_loop":{"type":"method","name":"mark_assignments_as_referenced_in_loop","children":[],"call":["assignment reference! ","assignment_node equal? ","assignment node ","assignment_nodes_in_loop none? ","variable assignments each ","variable assignments "," variable_table find_variable "," variable_table ","referenced_variable_names_in_loop each "," find_variables_in_loop "," variable_table find_variable  assignments each "," variable_table find_variable  assignments ","  variable_table find_variable _table find_ variable_table find_variable  ","  variable_table find_variable _table ","referenced_ variable_table find_variable _names_in_loop each "," find_ variable_table find_variable s_in_loop "]}," RuboCop Cop VariableForce process_scope":{"type":"method","name":"process_scope","children":[],"call":[" skip_children! "," inspect_variables_in_scope "," scanned_nodes << "," scanned_nodes "," process_node ","twisted_nodes each ","twisted_nodes compact! ","twisted_nodes << ","node children [] ","node children ","node type == ","node type ","TWISTED_SCOPE_TYPES  include? ","node class_type? "," twisted_nodes each "," twisted_nodes "]}," RuboCop Cop VariableForce process_zero_arity_super":{"type":"method","name":"process_zero_arity_super","children":[],"call":["variable reference! ","variable method_argument? "," variable_table accessible_variables each "," variable_table accessible_variables "," variable_table "]}," RuboCop Cop VariableForce process_rescue":{"type":"method","name":"process_rescue","children":[],"call":[" process_loop ","node_in_resbody type == ","node_in_resbody type "," scan ","resbody_nodes any? ","child type == ","child type ","child is_a? ","node children select ","node children ","resbody_node each_descendant any? ","resbody_node each_descendant ","node each_child_node ","node each_child_node  any? "]}," RuboCop Cop VariableForce process_loop":{"type":"method","name":"process_loop","children":[],"call":[" skip_children! "," mark_assignments_as_referenced_in_loop "," process_children "," process_node ","POST_CONDITION_LOOP_TYPES  include? ","node type "]}," RuboCop Cop VariableForce process_variable_referencing":{"type":"method","name":"process_variable_referencing","children":[],"call":[" variable_table reference_variable "," variable_table ","node children first ","node children "]}," RuboCop Cop VariableForce process_variable_multiple_assignment":{"type":"method","name":"process_variable_multiple_assignment","children":[],"call":[" skip_children! "," process_node "]}," RuboCop Cop VariableForce process_variable_operator_assignment":{"type":"method","name":"process_variable_operator_assignment","children":[],"call":[" skip_children! "," variable_table assign_to_variable "," variable_table "," process_node "," variable_table reference_variable "," variable_table declare_variable "," variable_table variable_exist? ","asgn_node children first ","asgn_node children ","asgn_node type == ","asgn_node type ","LOGICAL_OPERATOR_ASSIGNMENT_TYPES  include? ","node type ","asgn_node lvasgn_type? "]}," RuboCop Cop VariableForce process_regexp_named_captures":{"type":"method","name":"process_regexp_named_captures","children":[],"call":[" skip_children! "," variable_table assign_to_variable "," variable_table ","variable_names each "," process_node "," variable_table declare_variable "," variable_table variable_exist? ","regexp named_captures keys ","regexp named_captures ","Regexp  new ","regexp_node children [] children [] ","regexp_node children [] children ","regexp_node children [] ","regexp_node children "," regexp_captured_names ","regexp named_captures keys  each "," regexp_captured_names  each ","Regexp  new  named_captures keys ","Regexp  new  named_captures ","Regexp  new _node children [] children [] ","Regexp  new _node children [] children ","Regexp  new _node children [] ","Regexp  new _node children "," Regexp  new _captured_names "]}," RuboCop Cop VariableForce process_variable_assignment":{"type":"method","name":"process_variable_assignment","children":[],"call":[" skip_children! "," variable_table assign_to_variable "," variable_table "," process_children "," variable_table declare_variable "," variable_table variable_exist? ","node children first ","node children "]}," RuboCop Cop VariableForce process_variable_declaration":{"type":"method","name":"process_variable_declaration","children":[],"call":[" variable_table declare_variable "," variable_table ","node children first ","node children ","node children empty? ","node type == ","node type "]}," RuboCop Cop VariableForce dispatch_node":{"type":"method","name":"dispatch_node","children":[],"call":[" process_scope "," process_zero_arity_super "," process_rescue "," process_loop "," process_variable_referencing "," process_variable_multiple_assignment "," process_variable_operator_assignment "," process_regexp_named_captures "," process_variable_assignment "," process_variable_declaration ","node type "," process_send "]}," RuboCop Cop VariableForce skip_children!":{"type":"method","name":"skip_children!","children":[],"call":[" throw "]}," RuboCop Cop VariableForce process_node":{"type":"method","name":"process_node","children":[],"call":[" process_children "," dispatch_node "," catch ","retval == "," send "," node_handler_method_name "," send  == "," node_handler_ node_handler_method_name  "]}," RuboCop Cop VariableForce process_children":{"type":"method","name":"process_children","children":[],"call":[" process_node "," scanned_node? ","child is_a? ","origin_node children each ","origin_node children ","origin_node each_child_node "]}," RuboCop Cop VariableForce inspect_variables_in_scope":{"type":"method","name":"inspect_variables_in_scope","children":[],"call":[" variable_table pop_scope "," variable_table "," process_children "," variable_table push_scope "]}," RuboCop Cop VariableForce investigate":{"type":"method","name":"investigate","children":[],"call":[" inspect_variables_in_scope "," class wrap_with_top_level_node "," class ","processed_source ast "," class wrap_with_top_level_scope_node "," variable_table pop_scope "," variable_table "," process_node "," variable_table push_scope "," class wrap_with_ class wrap_with_top_level_node  "]}," RuboCop Cop VariableForce variable_table":{"type":"method","name":"variable_table","children":[],"call":["VariableTable  new "]}," RuboCop Cop VariableForce wrap_with_top_level_node":{"type":"method","name":"wrap_with_top_level_node","children":[],"call":[]}," RuboCop Cop VariableForce VariableTable mark_variable_as_captured_by_block_if_so":{"type":"method","name":"mark_variable_as_captured_by_block_if_so","children":[],"call":["variable capture_with_block! ","variable scope == "," current_scope ","variable scope "," current_scope node type == "," current_scope node type "," current_scope node "," current_scope node block_type? "," current_scope node numblock_type? "]}," RuboCop Cop VariableForce VariableTable accessible_variables":{"type":"method","name":"accessible_variables","children":[],"call":["scope node type == ","scope node type ","scope node ","variables concat ","scope variables values ","scope variables "," scope_stack reverse_each each_with_object "," scope_stack reverse_each "," scope_stack ","scope node block_type? "," scope_stack reverse_each with_object ","scope node numblock_type? "]}," RuboCop Cop VariableForce VariableTable variable_exist?":{"type":"method","name":"variable_exist?","children":[],"call":[" find_variable "]}," RuboCop Cop VariableForce VariableTable find_variable":{"type":"method","name":"find_variable","children":[],"call":["scope node type == ","scope node type ","scope node ","scope variables [] ","scope variables "," scope_stack reverse_each "," scope_stack ","name to_sym ","scope node block_type? ","node numblock_type? ","node block_type? ","scope scope node  type == ","scope scope node  type ","scope scope node  ","scope scope variables [] s [] ","scope scope variables [] s ","name to_sym  to_sym ","scope scope node  block_type? ","scope node  numblock_type? ","scope node  block_type? "]}," RuboCop Cop VariableForce VariableTable reference_variable":{"type":"method","name":"reference_variable","children":[],"call":[" mark_variable_as_captured_by_block_if_so ","variable reference! "," find_variable "," mark_ find_variable _as_captured_by_block_if_so "," find_variable  reference! "," find_ find_variable  "]}," RuboCop Cop VariableForce VariableTable assign_to_variable":{"type":"method","name":"assign_to_variable","children":[],"call":[" mark_variable_as_captured_by_block_if_so ","variable assign "," fail ","node inspect ","node loc expression ","node loc "," find_variable ","node source_range "," raise "," mark_ find_variable _as_captured_by_block_if_so "," find_variable  assign "," find_ find_variable  "]}," RuboCop Cop VariableForce VariableTable declare_variable":{"type":"method","name":"declare_variable","children":[],"call":[" invoke_hook "," current_scope variables []= ","variable name "," current_scope variables "," current_scope ","Variable  new "," current_scope Variable  new s []= ","Variable  new  name "," current_scope Variable  new s "]}," RuboCop Cop VariableForce VariableTable current_scope_level":{"type":"method","name":"current_scope_level","children":[],"call":[" scope_stack count "," scope_stack "]}," RuboCop Cop VariableForce VariableTable current_scope":{"type":"method","name":"current_scope","children":[],"call":[" scope_stack last "," scope_stack "]}," RuboCop Cop VariableForce VariableTable pop_scope":{"type":"method","name":"pop_scope","children":[],"call":[" invoke_hook "," scope_stack pop "," scope_stack "," current_scope ","  current_scope _stack pop ","  current_scope _stack "," current_ current_scope  "]}," RuboCop Cop VariableForce VariableTable push_scope":{"type":"method","name":"push_scope","children":[],"call":[" invoke_hook "," scope_stack push "," scope_stack ","Scope  new "," Scope  new _stack push "," Scope  new _stack "]}," RuboCop Cop VariableForce VariableTable scope_stack":{"type":"method","name":"scope_stack","children":[],"call":[]}," RuboCop Cop VariableForce VariableTable invoke_hook":{"type":"method","name":"invoke_hook","children":[],"call":["@hook_receiver send "]}," RuboCop Cop VariableForce VariableTable initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop Cop VariableForce Variable block_local_variable?":{"type":"method","name":"block_local_variable?","children":[],"call":["@declaration_node type == ","@declaration_node type "]}," RuboCop Cop VariableForce Variable block_argument?":{"type":"method","name":"block_argument?","children":[],"call":["@scope node type == ","@scope node type ","@scope node "," argument? ","@scope node block_type? "]}," RuboCop Cop VariableForce Variable method_argument?":{"type":"method","name":"method_argument?","children":[],"call":["(sym :def) include? ","@scope node type ","@scope node "," argument? "]}," RuboCop Cop VariableForce Variable argument?":{"type":"method","name":"argument?","children":[],"call":["ARGUMENT_DECLARATION_TYPES  include? ","@declaration_node type "]}," RuboCop Cop VariableForce Variable used?":{"type":"method","name":"used?","children":[],"call":[" referenced? "]}," RuboCop Cop VariableForce Variable capture_with_block!":{"type":"method","name":"capture_with_block!","children":[],"call":[]}," RuboCop Cop VariableForce Variable reference!":{"type":"method","name":"reference!","children":[],"call":["consumed_branch_ids << ","assignment branch_id ","assignment reference_penetrable? ","assignment branch_id == ","reference branch_id ","assignment inside_of_branch? ","assignment reference! ","consumed_branch_ids include? ","@assignments reverse_each ","Set  new ","@references << ","Reference  new ","assignment run_exclusively_with? ","consumed_branches << ","assignment branch ","assignment branch may_run_incompletely? ","assignment branch == ","reference branch ","assignment branch ! ","consumed_branches include? "," in_modifier_if? ","(or-asgn\n  (lvasgn :consumed_branches)\n  (send\n    (const nil :Set) :new)) << "," in_modifier_conditional? ","Set  new  << ","assignment Reference  new _penetrable? ","Reference  new  branch_id ","assignment Reference  new ! ","Set  new  include? ","@Reference  new s << ","Reference  new  branch ","(or-asgn\n  (lvasgn :Set  new )\n  (send\n    (const nil :Set) :new)) << "]}," RuboCop Cop VariableForce Variable referenced?":{"type":"method","name":"referenced?","children":[],"call":["@references empty? ! ","@references empty? "]}," RuboCop Cop VariableForce Variable assign":{"type":"method","name":"assign","children":[],"call":["@assignments << ","Assignment  new "]}," RuboCop Cop VariableForce Variable initialize":{"type":"method","name":"initialize","children":[],"call":["name to_sym "," fail ","declaration_node type ","VARIABLE_DECLARATION_TYPES  include? "," raise "]}," RuboCop Cop VariableForce Scope ASTScanner scan":{"type":"method","name":"scan","children":[],"call":["@ancestor_nodes pop "," scan ","child is_a? ","node children each ","node children ","@ancestor_nodes push "]}," RuboCop Cop VariableForce Scope ASTScanner initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop Cop VariableForce Scope ancestors_of_node":{"type":"method","name":"ancestors_of_node","children":[],"call":[" fail ","ancestor_nodes [] ","scanning_node equal? ","ASTScanner  scan "]}," RuboCop Cop VariableForce Scope body_node":{"type":"method","name":"body_node","children":[],"call":["@node children [] ","@node children ","@node type "," node children [] "," node children "," node "," node type "," naked_top_level? "]}," RuboCop Cop VariableForce Scope name":{"type":"method","name":"name","children":[],"call":["@node children [] ","@node children ","@node type ","@node method_name "]}," RuboCop Cop VariableForce Scope ==":{"type":"method","name":"==","children":[],"call":["@node equal? ","other node "]}," RuboCop Cop VariableForce Scope initialize":{"type":"method","name":"initialize","children":[],"call":[" fail ","node type ","node type == ","SCOPE_TYPES  include? "," raise ","node parent ! ","node parent "]}," RuboCop Cop VariableForce Reference explicit?":{"type":"method","name":"explicit?","children":[],"call":["@node type != ","@node type ","(const nil :ZERO_ARITY_SUPER_TYPE) include? ! ","(const nil :ZERO_ARITY_SUPER_TYPE) include? "]}," RuboCop Cop VariableForce Reference initialize":{"type":"method","name":"initialize","children":[],"call":[" fail ","node type ","VARIABLE_REFERENCE_TYPES  include? "," raise "]}," RuboCop Cop VariableForce Locatable branch?":{"type":"method","name":"branch?","children":[],"call":["child_index != ","parent_node type ","parent_node children index ","parent_node children ","child_index == ","parent_node children index  != ","parent_node children index  == "]}," RuboCop Cop VariableForce Locatable set_branch_point_and_body_nodes!":{"type":"method","name":"set_branch_point_and_body_nodes!","children":[],"call":[" branch? ","ancestors_and_self_nodes reverse each_cons ","ancestors_and_self_nodes reverse "," ancestor_nodes_in_scope + "," ancestor_nodes_in_scope ","self_and_ancestor_nodes each_cons ","(send nil :node) + "," node "," ancestor_nodes_in_scope +  reverse each_cons "," ancestor_nodes_in_scope +  reverse ","(send nil :node) +  each_cons "]}," RuboCop Cop VariableForce Locatable body_index":{"type":"method","name":"body_index","children":[],"call":[" branch_point_node children index "," branch_body_node "," branch_point_node children "," branch_point_node ","n equal? "]}," RuboCop Cop VariableForce Locatable ensure_body_name":{"type":"method","name":"ensure_body_name","children":[],"call":[" fail "," body_index "," raise "]}," RuboCop Cop VariableForce Locatable rescue_body_name":{"type":"method","name":"rescue_body_name","children":[],"call":[" body_index - "," body_index "," branch_body_node type == "," branch_body_node type "," branch_body_node "," body_index == "," body_index zero? "]}," RuboCop Cop VariableForce Locatable logical_operator_body_name":{"type":"method","name":"logical_operator_body_name","children":[],"call":[" fail "," body_index "," raise "]}," RuboCop Cop VariableForce Locatable case_body_name":{"type":"method","name":"case_body_name","children":[],"call":[" body_index - "," body_index "," branch_body_node type == "," branch_body_node type "," branch_body_node "," branch_body_node when_type? "]}," RuboCop Cop VariableForce Locatable if_body_name":{"type":"method","name":"if_body_name","children":[],"call":[" fail "," body_index "," raise "]}," RuboCop Cop VariableForce Locatable branch_body_name":{"type":"method","name":"branch_body_name","children":[],"call":[" raise "," branch_point_node type "," branch_point_node "," body_index "," fail "," ensure_body_name "," rescue_body_name "," logical_operator_body_name "," case_body_name "," if_body_name "," loop_body_name "]}," RuboCop Cop VariableForce Locatable ancestor_nodes_in_scope":{"type":"method","name":"ancestor_nodes_in_scope","children":[],"call":[" scope ancestors_of_node "," scope ","ancestor_node equal? ! ","ancestor_node equal? "," scope node "," node each_ancestor take_while "," node each_ancestor "," node "]}," RuboCop Cop VariableForce Locatable branch_body_node":{"type":"method","name":"branch_body_node","children":[],"call":[" set_branch_point_and_body_nodes! "," instance_variable_defined? "]}," RuboCop Cop VariableForce Locatable branch_point_node":{"type":"method","name":"branch_point_node","children":[],"call":[" set_branch_point_and_body_nodes! "," instance_variable_defined? "]}," RuboCop Cop VariableForce Locatable branch_type":{"type":"method","name":"branch_type","children":[],"call":["(send\n  (send nil :branch_point_node) :type) join "," branch_body_name "," branch_point_node type "," branch_point_node "," inside_of_branch? "]}," RuboCop Cop VariableForce Locatable branch_id":{"type":"method","name":"branch_id","children":[],"call":["(send\n  (send nil :branch_point_node) :object_id) join "," branch_type "," branch_point_node object_id "," branch_point_node "," inside_of_branch? "]}," RuboCop Cop VariableForce Locatable inside_of_branch?":{"type":"method","name":"inside_of_branch?","children":[],"call":[" branch_point_node "]}," RuboCop Cop VariableForce Locatable scope":{"type":"method","name":"scope","children":[],"call":[" fail "," raise "]}," RuboCop Cop VariableForce Locatable node":{"type":"method","name":"node","children":[],"call":[" fail "," raise "]}," RuboCop Cop VariableForce Assignment grantparent_node":{"type":"method","name":"grantparent_node","children":[],"call":[" ancestor_nodes_in_scope [] "," ancestor_nodes_in_scope "]}," RuboCop Cop VariableForce Assignment parent_node":{"type":"method","name":"parent_node","children":[],"call":[" ancestor_nodes_in_scope last "," ancestor_nodes_in_scope "]}," RuboCop Cop VariableForce Assignment meta_assignment_node":{"type":"method","name":"meta_assignment_node","children":[],"call":[" grantparent_node "," grantparent_node type == "," grantparent_node type "," parent_node type == "," parent_node type "," parent_node "," parent_node children index == "," parent_node children index "," parent_node children ","OPERATOR_ASSIGNMENT_TYPES  include? "," instance_variable_defined? "," multiple_assignment_node "," operator_assignment_node "," rest_assignment_node "," for_assignment_node "]}," RuboCop Cop VariableForce Assignment operator":{"type":"method","name":"operator","children":[],"call":["assignment_node loc operator source ","assignment_node loc operator ","assignment_node loc "," meta_assignment_node "]}," RuboCop Cop VariableForce Assignment multiple_assignment?":{"type":"method","name":"multiple_assignment?","children":[],"call":[" meta_assignment_node type == "," meta_assignment_node type "," meta_assignment_node "]}," RuboCop Cop VariableForce Assignment operator_assignment?":{"type":"method","name":"operator_assignment?","children":[],"call":["OPERATOR_ASSIGNMENT_TYPES  include? "," meta_assignment_node type "," meta_assignment_node "]}," RuboCop Cop VariableForce Assignment regexp_named_capture?":{"type":"method","name":"regexp_named_capture?","children":[],"call":["@node type == ","@node type "]}," RuboCop Cop VariableForce Assignment reference_penetrable?":{"type":"method","name":"reference_penetrable?","children":[],"call":["REFERENCE_PENETRABLE_BRANCH_TYPES  include? "," branch_type "]}," RuboCop Cop VariableForce Assignment used?":{"type":"method","name":"used?","children":[],"call":["@variable captured_by_block? "]}," RuboCop Cop VariableForce Assignment reference!":{"type":"method","name":"reference!","children":[],"call":["@references << "]}," RuboCop Cop VariableForce Assignment scope":{"type":"method","name":"scope","children":[],"call":["@variable scope "]}," RuboCop Cop VariableForce Assignment name":{"type":"method","name":"name","children":[],"call":["@node children first ","@node children "]}," RuboCop Cop VariableForce Assignment initialize":{"type":"method","name":"initialize","children":[],"call":[" fail ","node type ","VARIABLE_ASSIGNMENT_TYPES  include? "," raise "]}," RuboCop Cop Util first_part_of_call_chain":{"type":"method","name":"first_part_of_call_chain","children":[],"call":["node type ","node send_node ","node receiver ","node send_node  type ","node receiver  type ","node send_node  send_node send_node  ","node receiver  send_node receiver  ","node send_node  receiver ","node receiver  receiver "]}," RuboCop Cop Util range_with_surrounding_space":{"type":"method","name":"range_with_surrounding_space","children":[],"call":["Parser Source Range  new ","@processed_source buffer ","src [] == ","src [] ","src [] =~ ","range end_pos ","begin_pos - ","range begin_pos ","side == ","@processed_source buffer source ","buffer source "," move_pos "," directions "," final_pos ","@processed_source @processed_source buffer  ","@processed_source buffer source  [] == ","buffer source  [] == ","@processed_source buffer source  [] ","buffer source  [] ","@processed_source buffer source  [] =~ ","buffer source  [] =~ ","range range end_pos  ","range  move_pos  ","range  final_pos  ","range begin_pos  - "," move_pos  - "," final_pos  - ","range range begin_pos  ","@processed_source @processed_source buffer  source ","@processed_source buffer  source "]}," RuboCop Cop Util source_range":{"type":"method","name":"source_range","children":[],"call":["Parser Source Range  new ","begin_pos + ","(send\n  (lvar :preceding_lines) :reduce\n  (int 0)) + ","a + + ","a + ","e length ","preceding_lines reduce ","line_begin_pos + ","pos + + ","pos + ","source_buffer source_line length ","source_buffer source_line ","preceding_line_numbers reduce "," numeric_range_size ","column begin ","column is_a? ","source_buffer line_range begin_pos ","source_buffer line_range ","line_number == ","line_number zero? ","column size ","(send\n  (lvar :preceding_lines) :reduce\n  (int 0)) +  + ","line_begin_pos +  + ","e  numeric_range_size  ","e column size  ","line_(send\n  (lvar :preceding_lines) :reduce\n  (int 0)) +  + ","line_line_begin_pos +  + ","source_buffer line_range begin_pos  + ","source_buffer source_line  numeric_range_size  ","source_buffer source_line column size  ","source_buffer line_range (send\n  (lvar :preceding_lines) :reduce\n  (int 0)) +  ","source_buffer line_range line_begin_pos +  "]}," RuboCop Cop Util on_node":{"type":"method","name":"on_node","children":[],"call":[" on_node ","elem is_a? ","sexp children each ","sexp children "," Array include? ","sexp type "," Array "," to_enum "," block_given? ","sexp each_child_node "," include_or_equal? "]}," RuboCop Cop Util parentheses?":{"type":"method","name":"parentheses?","children":[],"call":["node loc end ","node loc ","node loc respond_to? ","node loc end is? ",") freeze "]}," RuboCop Cop Util lambda_or_proc?":{"type":"method","name":"lambda_or_proc?","children":[],"call":[" proc? "," lambda? "]}," RuboCop Cop Util proc?":{"type":"method","name":"proc?","children":[],"call":["send_node == "," command? "," fail ","node type == ","node type "]}," RuboCop Cop Util lambda?":{"type":"method","name":"lambda?","children":[],"call":[" command? "," fail ","node type == ","node type "]}," RuboCop Cop Util command?":{"type":"method","name":"command?","children":[],"call":["method_name == ","receiver ! ","node type == ","node type "]}," RuboCop Cop Util const_name":{"type":"method","name":"const_name","children":[],"call":["const_names reverse join ","const_names reverse ","namespace_node type == ","namespace_node type ","namespace_node is_a? ","const_names << "," loop ","node type != ","node type ","node nil? "]}," RuboCop Cop Util line_range":{"type":"method","name":"line_range","children":[],"call":["source_range end line ","source_range end ","source_range begin line ","source_range begin "," fail ","arg loc expression ","arg loc ","arg source_range "," raise ","node last_line ","node first_line "]}," RuboCop Cop Util comment_line?":{"type":"method","name":"comment_line?","children":[],"call":["line_source =~ ","(str \"^\\\\s*#\") match? "]}," RuboCop Cop Util block_length":{"type":"method","name":"block_length","children":[],"call":["block_node loc end line - ","block_node loc begin line ","block_node loc begin ","block_node loc ","block_node loc end line ","block_node loc end "]}," RuboCop Cop Util strip_quotes":{"type":"method","name":"strip_quotes","children":[],"call":["str []= ","str [] == ","str [] "]}," RuboCop Cop Util operator?":{"type":"method","name":"operator?","children":[],"call":["OPERATOR_METHODS  include? "]}," RuboCop Cop Team handle_error":{"type":"method","name":"handle_error","children":[],"call":[" warn "," puts ","e backtrace ","e message "," debug? ","@errors << "," Rainbow red "," Rainbow ","cop name ","error backtrace ","error message ","e  Rainbow red  ","error  Rainbow red  "]}," RuboCop Cop Team process_commissioner_errors":{"type":"method","name":"process_commissioner_errors","children":[],"call":[" handle_error ","(str \"An error occurred while \") color + ","(str \" cop was inspecting \") color ","(str \"An error occurred while \") color ","cop name ","errors each ","file_errors each "," Rainbow ","(str \"An error occurred while \") / ","(str \" cop was inspecting \") red "," Rainbow red "," handle_warning "," Rainbow yellow ","e message ","e is_a? ","cop_error column ","cop_error line ","cop_error error "," handlcop_error error _cop_error error rror ","(str \"An cop_error error rror occurrcop_error error d whilcop_error error  \") color + ","(str \" cop was inspcop_error error cting \") color ","(str \"An cop_error error rror occurrcop_error error d whilcop_error error  \") color ","cop namcop_error error  ","cop_error error rrors cop_error error ach ","filcop_error error _cop_error error rrors cop_error error ach ","(str \"An cop_error error rror occurrcop_error error d whilcop_error error  \") / ","(str \" cop was inspcop_error error cting \") rcop_error error d "," Rainbow rcop_error error d "," handlcop_error error _warning "," Rainbow ycop_error error llow ","cop_error error  mcop_error error ssagcop_error error  ","cop_error error  is_a? ","cop_cop_error error rror column ","cop_cop_error error rror lincop_error error  ","cop_cop_error error rror cop_error error rror "]}," RuboCop Cop Team autocorrect_one_cop":{"type":"method","name":"autocorrect_one_cop","children":[],"call":["corrector rewrite ","Corrector  new ","cop_with_corrections corrections ","cop corrections any? ","cop corrections ","cops find ","buffer source ","cop relevant_file? ","buffer name ","corrections first ","buffer source =~ ","Corrector  new  rewrite ","cop_with_cop_with_corrections corrections  cop_with_corrections corrections  ","cop cop_with_corrections corrections  any? ","cop cop_with_corrections corrections  ","cop_with_corrections corrections  first "]}," RuboCop Cop Team autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["f write ","File  open ","buffer name ","new_source == ","buffer source "," autocorrect_one_cop "," fail ","SourceParser  parse valid_syntax? ","SourceParser  parse ","corrector rewrite ","Corrector  new ","array concat ","cop corrections ","cop relevant_file? ","cops each_with_object "," autocorrect? ","ProcessedSource  new valid_syntax? ","ProcessedSource  new ","@options []= ","@options [] "," autocorrect_all_cops "," raise ","e cause "," process_errors ","processed_source buffer name ","processed_source buffer "," autocorrect_report ","report processed_source parser_error ","report processed_source ","File  write ","processed_source file_path ","new_corrector rewrite ource == "," autocorrect_one_cop  == "," autocorrect_all_cops  == "," autocorrect_report  == ","buffer corrector rewrite ource ","SourceParcorrector rewrite er  parcorrector rewrite e valid_corrector rewrite yntax? ","SourceParcorrector rewrite er  parcorrector rewrite e ","Corrector  new  rewrite ","cop correctioncorrector rewrite  ","copcorrector rewrite  each_with_object ","Procecorrector rewrite corrector rewrite edSource  new valid_corrector rewrite yntax? ","Procecorrector rewrite corrector rewrite edSource  new ","@optioncorrector rewrite  []= ","@optioncorrector rewrite  [] "," autocorrect_all_copcorrector rewrite  "," raicorrector rewrite e ","e caucorrector rewrite e "," procecorrector rewrite corrector rewrite _errorcorrector rewrite  ","procecorrector rewrite corrector rewrite ed_corrector rewrite ource buffer name ","procecorrector rewrite corrector rewrite ed_corrector rewrite ource buffer ","report procecorrector rewrite corrector rewrite ed_corrector rewrite ource parcorrector rewrite er_error ","report procecorrector rewrite corrector rewrite ed_corrector rewrite ource ","procecorrector rewrite corrector rewrite ed_corrector rewrite ource file_path "]}," RuboCop Cop Team cop_enabled?":{"type":"method","name":"cop_enabled?","children":[],"call":["(or\n  (send\n    (ivar :@options) :[]\n    (sym :only))\n  (array)) include? ","cop_class cop_name ","@options [] ","@config cop_enabled? "]}," RuboCop Cop Team forces":{"type":"method","name":"forces","children":[],"call":["forces << ","force_class new ","joining_cops empty? ","cop join_force? "," cops select "," cops ","Force  all each_with_object ","Force  all "," forces_for "," class forces_for "," class "]}," RuboCop Cop Team cops":{"type":"method","name":"cops","children":[],"call":["instances << ","cop_class new "," cop_enabled? ","@cop_classes each_with_object ","(send\n  (ivar :@cop_classes) :select) map ","@cop_classes select ","@cop_classes enabled map ","@cop_classes enabled ","@options fetch "]}," RuboCop Cop Team inspect_file":{"type":"method","name":"inspect_file","children":[],"call":[" autocorrect "," cops ","processed_source buffer "," process_commissioner_errors ","commissioner errors ","processed_source file_path ","commissioner investigate ","Commissioner  new "," forces ","Lint Syntax  offenses_from_diagnostics ","processed_source diagnostics ","processed_source valid_syntax? ","processed_source path ","Lint Syntax  offenses_from_processed_source ","errors merge! ","offenses concat "," forces_for ","autocorrect_cops any? "," cops partition "," offenses "," investigate offenses "," investigate "," process_Commissioner  new _errors "," process_commissioner_commissioner errors  ","Commissioner  new  errors ","commissioner commissioner errors  ","Commissioner  new  investigate ","Lint Syntax  commissioner investigate _from_diagnostics ","Lint Syntax  offenses_from_processed_source diagnostics  ","processed_source processed_source diagnostics  ","Lint Syntax  commissioner investigate _from_processed_source ","commissioner errors  merge! ","commissioner investigate  concat "," commissioner investigate  "," investigate commissioner investigate  "]}," RuboCop Cop Team debug?":{"type":"method","name":"debug?","children":[],"call":["@options [] "]}," RuboCop Cop Team autocorrect?":{"type":"method","name":"autocorrect?","children":[],"call":["@options [] "]}," RuboCop Cop Team initialize":{"type":"method","name":"initialize","children":[],"call":[" validate_config "," reset ","Registry  new ","options dup "]}," RuboCop Cop Style WordArray character_literal?":{"type":"method","name":"character_literal?","children":[],"call":["node loc end nil? ","node loc end ","node loc "]}," RuboCop Cop Style WordArray autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","node loc expression ","node loc "," lambda ","(send\n  (send\n    (lvar :node) :children) :map) join ","Parser Source Range  new source ","Parser Source Range  new ","n loc end begin_pos ","n loc end ","n loc ","n loc begin end_pos ","n loc begin ","n loc expression end_pos ","n loc expression ","n loc expression begin_pos + ","? length ","n loc expression begin_pos "," character_literal? ","node children map ","node children ","node loc expression source_buffer "," source_for "," autocorrect_words ","node loc line ","words join ","node source_range "," to_string_literal ","w children [] ","w children ","words map "," double_quotes_required? ","words any? "," style == "," style "," needs_escaping? "," correct_bracketed "," correct_percent ","PercentLiteralCorrector  new correct ","PercentLiteralCorrector  new ","n loc end n loc begin end_pos  ","n loc end n loc expression begin_pos +  ","n loc begin n loc end begin_pos  ","n loc begin n loc expression end_pos  ","n loc expression n loc end begin_pos  ","n loc expression n loc expression end_pos  ","n loc expression n loc begin end_pos  + ","n loc expression n loc expression begin_pos +  + ","n loc expression n loc begin end_pos  ","n loc expression n loc expression begin_pos +  "," autocorrect_node children  ","node children  join ","node children  map ","node children  any? "]}," RuboCop Cop Style WordArray min_size":{"type":"method","name":"min_size","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style WordArray complex_content?":{"type":"method","name":"complex_content?","children":[],"call":["str_content =~ ","Util  strip_quotes ","source start_with? ","s loc expression source ","s loc expression ","s loc ","arr_sexp each "," word_regex ","string =~ ","string !~ ","s str_content ","strings any? ","string valid_encoding? ! ","string valid_encoding? ","string dup force_encoding valid_encoding? ! ","string dup force_encoding valid_encoding? ","string dup force_encoding ","string dup ","s str_content dup force_encoding ","s str_content dup ","(str \" \") match? "," word_regex match? ! "," word_regex match? ","complex_regex match? ! ","complex_regex match? ","string include? ","Util  strip_quotes  =~ ","s loc expression source  start_with? ","s loc expression s loc expression source  ","s str_content  =~ ","s str_content dup force_encoding  =~ ","s str_content  !~ ","s str_content dup force_encoding  !~ ","s Util  strip_quotes  ","s str_content s any? ","s str_content dup force_encoding s any? ","s str_content  valid_encoding? ! ","s str_content dup force_encoding  valid_encoding? ! ","s str_content  valid_encoding? ","s str_content dup force_encoding  valid_encoding? ","s str_content  dup force_encoding valid_encoding? ! ","s str_content dup force_encoding  dup force_encoding valid_encoding? ! ","s str_content  dup force_encoding valid_encoding? ","s str_content dup force_encoding  dup force_encoding valid_encoding? ","s str_content  dup force_encoding ","s str_content dup force_encoding  dup force_encoding ","s str_content  dup ","s str_content dup force_encoding  dup ","s Util  strip_quotes  dup force_encoding ","s Util  strip_quotes  dup ","s str_content  include? ","s str_content dup force_encoding  include? "]}," RuboCop Cop Style WordArray comments_in_array?":{"type":"method","name":"comments_in_array?","children":[],"call":["(send\n  (send\n    (send\n      (send\n        (lvar :comment) :loc) :expression) :to_a) :&\n  (lvar :array_range)) empty? ! ","(send\n  (send\n    (send\n      (send\n        (lvar :comment) :loc) :expression) :to_a) :&\n  (lvar :array_range)) empty? ","comment loc expression to_a & ","comment loc expression to_a ","comment loc expression ","comment loc ","comments any? ","node loc expression to_a ","node loc expression ","node loc "," processed_source comments "," processed_source ","node source_range to_a ","node source_range ","(send\n  (send\n    (send\n      (send\n        (lvar :comment) :loc) :expression) :to_a) :&\n  (lvar :node loc expression to_a )) empty? ! ","(send\n  (send\n    (send\n      (send\n        (lvar :comment) :loc) :expression) :to_a) :&\n  (lvar :node source_range to_a )) empty? ! ","(send\n  (send\n    (send\n      (send\n        (lvar :comment) :loc) :expression) :to_a) :&\n  (lvar :node loc expression to_a )) empty? ","(send\n  (send\n    (send\n      (send\n        (lvar :comment) :loc) :expression) :to_a) :&\n  (lvar :node source_range to_a )) empty? "," processed_source comments  any? "," processed_source  processed_source comments  "]}," RuboCop Cop Style WordArray parameter_name":{"type":"method","name":"parameter_name","children":[],"call":[]}," RuboCop Cop Style WordArray on_array":{"type":"method","name":"on_array","children":[],"call":[" max= ","array_elems size "," add_offense "," comments_in_array? ! "," comments_in_array? ","array_elems size > "," min_size "," complex_content? ! "," complex_content? "," array_of? ","node children "," style == "," style "," style_detected ","node loc begin source =~ ","node loc begin source ","node loc begin ","node loc ","array_elems size >= "," bracketed_array_of? "," check_percent "," percent_syntax? "," check_bracketed ","node percent_literal? "," check_percent_array "," check_bracketed_array ","node values "," within_2d_array_of_complex_content? "," within_matrix_of_complex_content? ","node children  size ","node children  size > ","node children  size >= "]}," RuboCop Cop Style WhileUntilModifier message":{"type":"method","name":"message","children":[],"call":[]}," RuboCop Cop Style WhileUntilModifier investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense "," message ","node loc keyword source ","node loc keyword ","node loc "," check ","processed_source comments ","node loc end "," on_node ","processed_source ast "," fit_within_line_as_modifier_form? "]}," RuboCop Cop Style WhileUntilDo autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector remove ","end_of_condition_range join ","node loc begin ","node loc ","condition_node loc expression end ","condition_node loc expression ","condition_node loc "," lambda ","condition_node source_range end ","condition_node source_range ","node condition source_range end join ","node condition source_range end ","node condition source_range ","node condition ","condition_node loc expression end  join ","condition_node source_range end  join "]}," RuboCop Cop Style WhileUntilDo error_message":{"type":"method","name":"error_message","children":[],"call":[" format "]}," RuboCop Cop Style WhileUntilDo handle":{"type":"method","name":"handle","children":[],"call":[" add_offense "," error_message ","node type ","node loc begin is? ","node loc begin ","node loc ","length > ","node loc expression source lines to_a size ","node loc expression source lines to_a ","node loc expression source lines ","node loc expression source ","node loc expression ","node source lines to_a size ","node source lines to_a ","node source lines ","node source "," format ","node keyword ","node do? ","node multiline? ","node loc expression source lines to_a size  > ","node source lines to_a size  > "]}," RuboCop Cop Style WhileUntilDo on_until":{"type":"method","name":"on_until","children":[],"call":[" handle "]}," RuboCop Cop Style WhileUntilDo on_while":{"type":"method","name":"on_while","children":[],"call":[" handle ","corrector remove ","node condition source_range end join ","node loc begin ","node loc ","node condition source_range end ","node condition source_range ","node condition "," add_offense "," format ","node keyword ","node do? ","node multiline? "]}," RuboCop Cop Style WhenThen autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","node loc begin ","node loc "," lambda "]}," RuboCop Cop Style WhenThen on_when":{"type":"method","name":"on_when","children":[],"call":[" add_offense ","node loc begin is? ","node loc begin ","node loc ","node body ! ","node body ","node then? ","node multiline? ","corrector replace "," format ","node conditions map join ","node conditions map ","node conditions "]}," RuboCop Cop Style VariableName message":{"type":"method","name":"message","children":[],"call":[" format "]}," RuboCop Cop Style VariableName name_of_setter":{"type":"method","name":"name_of_setter","children":[],"call":[" after_dot ","Regexp  escape ","receiver loc expression source ","receiver loc expression ","receiver loc ","method_name length - ","= length ","method_name length ","method_name to_s end_with? ","method_name to_s ","receiver type == ","receiver type "]}," RuboCop Cop Style VariableName name_of_variable":{"type":"method","name":"name_of_variable","children":[],"call":["Parser Source Range  new ","expr begin_pos + ","name length ","expr begin_pos ","expr source_buffer ","vasgn_node children first ","vasgn_node children ","vasgn_node loc expression ","vasgn_node loc ","vasgn_node loc expression  begin_pos + ","vasgn_node children first  length ","vasgn_node loc expression  begin_pos ","vasgn_node loc expression  source_buffer ","vasgn_node loc vasgn_node loc expression ession "]}," RuboCop Cop Style VariableName on_send":{"type":"method","name":"on_send","children":[],"call":[" check "," name_of_setter "," check_name ","node loc selector ","node loc ","method_name to_s sub to_sym ","method_name to_s sub ","method_name to_s "," setter_call_on_self? "]}," RuboCop Cop Style VariableName on_ivasgn":{"type":"method","name":"on_ivasgn","children":[],"call":[" check "," name_of_variable "," check_name ","node loc name ","node loc "]}," RuboCop Cop Style VariableName on_lvasgn":{"type":"method","name":"on_lvasgn","children":[],"call":[" check "," name_of_variable "," check_name ","node loc name ","node loc "]}," RuboCop Cop Style VariableInterpolation var_nodes":{"type":"method","name":"var_nodes","children":[],"call":["(sym :ivar) include? ","n type ","nodes select ","n reference? ","n variable? "]}," RuboCop Cop Style VariableInterpolation autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","expr source ","node loc expression ","node loc "," lambda ","node source ","node source_range ","node loc expression  source ","node loc node loc expression ession "]}," RuboCop Cop Style VariableInterpolation on_dstr":{"type":"method","name":"on_dstr","children":[],"call":[" add_offense "," format ","v loc expression source ","v loc expression ","v loc "," var_nodes each "," var_nodes ","node children "," check_for_interpolation "," v loc expression source _nodes each "," v loc expression source _nodes "]}," RuboCop Cop Style UnneededPercentX autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","string loc expression source ","string loc expression ","string loc ","node loc expression ","node loc "," lambda ","node loc end ","node loc begin "]}," RuboCop Cop Style UnneededPercentX on_xstr":{"type":"method","name":"on_xstr","children":[],"call":[" add_offense ","node loc expression source !~ ","node loc expression source ","node loc expression ","node loc "]}," RuboCop Cop Style UnneededCapitalW on_percent_literal":{"type":"method","name":"on_percent_literal","children":[],"call":[" add_offense ","x type == ","x type ","node children none? ","node children ","types include? "," type ","string loc expression source =~ ","string loc expression source ","string loc expression ","string loc ","string type == ","string type ","node children each ","node children any? "," double_quotes_acceptable? ","string str_content "," requires_interpolation? ","x  type  == ","x  type  "," type s include? ","  type  ","string  type  == ","string  type  "]}," RuboCop Cop Style UnneededCapitalW on_array":{"type":"method","name":"on_array","children":[],"call":[" process "]}," RuboCop Cop Style UnlessElse on_if":{"type":"method","name":"on_if","children":[],"call":[" add_offense ","loc else ","loc keyword is? ","loc keyword ","loc respond_to? ","node loc ","unless freeze ","node else? ","node unless? ","corrector replace ","body_range source ","else_range source ","node loc keyword "," range_between_else_and_end "," range_between_condition_and_else ","node condition "," ignore_node "," part_of_ignored_node? ","node loc  else ","node loc  keyword is? ","node loc  keyword ","node loc  respond_to? ","node node loc  "," range_between_condition_and_else  source "," range_between_else_and_end  source ","node node loc  keyword "]}," RuboCop Cop Style TrivialAccessors autocorrect_class":{"type":"method","name":"autocorrect_class","children":[],"call":["@corrections << ","corrector replace ","(str \"class << self\") join "," accessor ","node loc expression ","node loc ","  * ","node loc column "," lambda "," trivial_accessor_kind "," names_match? "," fail ","node source_range ","node method_name "," trivial_accessor_ trivial_accessor_kind  "]}," RuboCop Cop Style TrivialAccessors autocorrect_instance":{"type":"method","name":"autocorrect_instance","children":[],"call":["@corrections << ","corrector replace "," accessor ","node loc expression ","node loc "," lambda "," trivial_accessor_kind "," names_match? "," fail "," predicate? ! "," predicate? ","node source_range ","node method_name ","node predicate_method? ! ","node predicate_method? "," trivial_accessor_ trivial_accessor_kind  "]}," RuboCop Cop Style TrivialAccessors autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" autocorrect_class ","node children first type == ","node children first type ","node children first ","node children ","node type == ","node type "," autocorrect_instance "," fail ","node children first self_type? ","node defs_type? ","node def_type? ","parent send_type? ","node parent ","node parent  send_type? ","node node parent  "]}," RuboCop Cop Style TrivialAccessors accessor":{"type":"method","name":"accessor","children":[],"call":["method_name to_s chomp ","method_name to_s "]}," RuboCop Cop Style TrivialAccessors trivial_accessor_kind":{"type":"method","name":"trivial_accessor_kind","children":[],"call":[" trivial_reader? "," dsl_writer? ! "," dsl_writer? "," trivial_writer? ","node method_name "]}," RuboCop Cop Style TrivialAccessors names_match?":{"type":"method","name":"names_match?","children":[],"call":["method_name to_s chomp == ","ivar_name [] ","method_name to_s chomp ","method_name to_s ","method_name to_s sub == ","method_name to_s sub ","node method_name to_s sub == ","node method_name to_s sub ","node method_name to_s ","node method_name ","node body "]}," RuboCop Cop Style TrivialAccessors allowed_reader?":{"type":"method","name":"allowed_reader?","children":[],"call":[" predicate? "," allow_predicates? ","node predicate_method? "]}," RuboCop Cop Style TrivialAccessors allowed_writer?":{"type":"method","name":"allowed_writer?","children":[],"call":[" dsl_writer? "," allow_dsl_writers? "]}," RuboCop Cop Style TrivialAccessors allowed_method?":{"type":"method","name":"allowed_method?","children":[],"call":[" names_match? ! "," names_match? "," exact_name_match? "," whitelist include? "," whitelist ","node method_name "," allowed_methods include? "," allowed_methods "]}," RuboCop Cop Style TrivialAccessors looks_like_trivial_writer?":{"type":"method","name":"looks_like_trivial_writer?","children":[],"call":["body children [] type == ","body children [] type ","body children [] ","body children ","body type == ","body type ","args children [] type != ","args children [] type ","args children [] ","args children ","args children size == ","args children size ","(sym :restarg) include? ! ","(sym :restarg) include? ","body children [] lvar_type? ","body ivasgn_type? ","args children one? "]}," RuboCop Cop Style TrivialAccessors trivial_writer?":{"type":"method","name":"trivial_writer?","children":[],"call":[" allowed_writer? ! "," allowed_writer? "," allowed_method? ! "," allowed_method? "," looks_like_trivial_writer? ","node method_name "," allowed_method_name? ! "," allowed_method_name? "]}," RuboCop Cop Style TrivialAccessors looks_like_trivial_reader?":{"type":"method","name":"looks_like_trivial_reader?","children":[],"call":["body type == ","body type ","args children size == ","args children size ","args children ","args children empty? ","body ivar_type? ","node body ivar_type? ","node body ","node arguments? ! ","node arguments? "]}," RuboCop Cop Style TrivialAccessors trivial_reader?":{"type":"method","name":"trivial_reader?","children":[],"call":[" allowed_reader? ! "," allowed_reader? "," allowed_method? ! "," allowed_method? "," looks_like_trivial_reader? "," allowed_method_name? ! "," allowed_method_name? "]}," RuboCop Cop Style TrivialAccessors dsl_writer?":{"type":"method","name":"dsl_writer?","children":[],"call":["method_name to_s end_with? ! ","method_name to_s end_with? ","method_name to_s ","node assignment_method? ! ","node assignment_method? "]}," RuboCop Cop Style TrivialAccessors predicate?":{"type":"method","name":"predicate?","children":[],"call":["method_name [] == ","method_name [] "]}," RuboCop Cop Style TrivialAccessors whitelist":{"type":"method","name":"whitelist","children":[],"call":[" Array map + "," Array map "," Array "," cop_config [] "," cop_config "]}," RuboCop Cop Style TrivialAccessors allow_dsl_writers?":{"type":"method","name":"allow_dsl_writers?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style TrivialAccessors allow_predicates?":{"type":"method","name":"allow_predicates?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style TrivialAccessors exact_name_match?":{"type":"method","name":"exact_name_match?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style TrivialAccessors check":{"type":"method","name":"check","children":[],"call":[" add_offense "," format "," trivial_writer? "," trivial_reader? "]}," RuboCop Cop Style TrailingWhitespace autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector remove "," lambda "]}," RuboCop Cop Style TrailingWhitespace investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense "," source_range ","line length - ","line rstrip length ","line rstrip ","line length ","processed_source [] ","processed_source buffer ","line =~ ","processed_source lines each_with_index ","processed_source lines ","index + "," source_ source_range  "]}," RuboCop Cop Style TrailingComma put_comma":{"type":"method","name":"put_comma","children":[],"call":[" add_offense "," format ","Parser Source Range  new ","last_expr end_pos ","last_expr begin_pos + ","last_expr begin_pos ","last_expr source [] =~ ","last_expr source [] ","last_expr source ","last_expr source rindex ","items last loc expression ","items last loc ","items last "," format + ","last_item loc expression ","last_item loc ","last_item type == ","last_item type ","items last loc expression  end_pos ","last_item loc expression  end_pos ","items last loc expression  begin_pos + ","last_item loc expression  begin_pos + ","items last loc expression  begin_pos ","last_item loc expression  begin_pos ","items last loc expression  source [] =~ ","last_item loc expression  source [] =~ ","items last loc expression  source [] ","last_item loc expression  source [] ","items last loc expression  source ","last_item loc expression  source ","items last loc expression  source rindex ","last_item loc expression  source rindex ","items last  loc expression ","items last  loc ","items last  type == ","items last  type "]}," RuboCop Cop Style TrailingComma avoid_comma":{"type":"method","name":"avoid_comma","children":[],"call":[" add_offense "," format ","kind =~ ","Parser Source Range  new ","comma_begin_pos + "," format + + "," format + "]}," RuboCop Cop Style TrailingComma on_same_line?":{"type":"method","name":"on_same_line?","children":[],"call":["(lvar :a) map uniq size == ","(lvar :a) map uniq size ","(lvar :a) map uniq ","(lvar :a) map ","a line + == ","b line ","a line + ","a source count ","a source ","a line "]}," RuboCop Cop Style TrailingComma multiline?":{"type":"method","name":"multiline?","children":[],"call":[" on_same_line? ","items each_cons ","node loc end ","node loc ","e loc expression ","e loc ","elements map ","node children ","node type == ","node type "," on_same_line? ! ","items each_cons all? ","items << ","items each_cons any? "," style == "," style ","a children ","a type == ","a type ","args flat_map ","elements empty? ","node children  map ","node children  empty? "]}," RuboCop Cop Style TrailingComma brackets?":{"type":"method","name":"brackets?","children":[],"call":["node loc end ","node loc "]}," RuboCop Cop Style TrailingComma heredoc?":{"type":"method","name":"heredoc?","children":[],"call":["source_after_last_item =~ "]}," RuboCop Cop Style TrailingComma check":{"type":"method","name":"check","children":[],"call":[" put_comma "," avoid_comma ","after_last_item begin_pos + ","after_last_item begin_pos "," multiline? "," style == "," style ","after_last_item source =~ ","after_last_item source "," heredoc? ","Parser Source Range  new ","items first loc expression source_buffer ","items first loc expression ","items first loc ","items first ","(sym :comma) include? "," inside_comment? ! "," inside_comment? "," should_have_comma? ","Parser Source Range  new  begin_pos + ","Parser Source Range  new  begin_pos ","Parser Source Range  new  source =~ ","Parser Source Range  new  source "]}," RuboCop Cop Style TrailingComma check_literal":{"type":"method","name":"check_literal","children":[],"call":[" check ","node loc end begin_pos ","node loc end ","node loc ","node children last loc expression end_pos ","node children last loc expression ","node children last loc ","node children last ","node children "," brackets? ","node children empty? "]}," RuboCop Cop Style TrailingComma parameter_name":{"type":"method","name":"parameter_name","children":[],"call":[]}," RuboCop Cop Style TrailingComma on_send":{"type":"method","name":"on_send","children":[],"call":[" check ","node loc expression end_pos ","node loc expression ","node loc ","args last loc expression end_pos ","args last loc expression ","args last loc ","args last "," brackets? ","args empty? "]}," RuboCop Cop Style TrailingComma on_hash":{"type":"method","name":"on_hash","children":[],"call":[" check_literal "]}," RuboCop Cop Style TrailingComma on_array":{"type":"method","name":"on_array","children":[],"call":[" check_literal "," square_brackets? "]}," RuboCop Cop Style TrailingBlankLines autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace "," style == "," style "," lambda "]}," RuboCop Cop Style TrailingBlankLines message":{"type":"method","name":"message","children":[],"call":[" format ","wanted_blank_lines == ","wanted_blank_lines zero? "]}," RuboCop Cop Style TrailingBlankLines investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense "," message ","Parser Source Range  new ","sb source length ","sb source ","\n length ","whitespace_at_end length == ","whitespace_at_end length ","sb source length - ","blank_lines != "," style == "," style ","whitespace_at_end count - ","whitespace_at_end count ","sb source [] ","sb source empty? ","processed_source buffer ","extra strip start_with? ","extra strip ","processed_source tokens last pos end_pos ","processed_source tokens last pos ","processed_source tokens last ","processed_source tokens "," ends_in_end? "," offense_detected ","processed_source buffer  source length ","processed_source buffer  source ","sb source []  length == ","sb source []  length ","processed_source buffer  source length - ","whitespace_at_end count -  != ","sb source []  count - ","sb source []  count ","processed_source buffer  source [] ","processed_source buffer  source empty? ","sb source []  strip start_with? ","sb source []  strip "]}," RuboCop Cop Style Tab investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense "," source_range ","spaces length ","processed_source [] ","processed_source buffer ","match captures [] ","match captures ","line match ","processed_source lines each_with_index ","processed_source lines ","index + ","match end ","str_lines include? "," string_literal_lines ","processed_source ast "," source_ source_range  ","match captures []  length ","line match  captures [] ","line match  captures ","line line match  ","line match  end "," string_literal_lines  include? "]}," RuboCop Cop Style SymbolArray on_array":{"type":"method","name":"on_array","children":[],"call":[" add_offense "," array_of? ","RUBY_VERSION  < "," style == "," style "," style_detected ","node loc begin source =~ ","node loc begin source ","node loc begin ","node loc "," symbols_contain_spaces? "," comments_in_array? "," bracketed_array_of? "," check_percent_array "," percent_array? "," check_bracketed_array ","node percent_literal? "," complex_content? "]}," RuboCop Cop Style StringLiterals autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","node loc end ","node loc ","node loc begin ","node loc begin is? "," lambda ","StringLiteralCorrector  correct "," style "]}," RuboCop Cop Style StringLiterals offense?":{"type":"method","name":"offense?","children":[],"call":["src !~ "," style == "," style ","src =~ ","node loc expression source ","node loc expression ","node loc "," wrong_quotes? "," inside_interpolation? "," inside_interpolation? ! ","node loc expression source  !~ ","node loc expression source  =~ "]}," RuboCop Cop Style StringLiterals message":{"type":"method","name":"message","children":[],"call":[" style == "," style "]}," RuboCop Cop Style SpecialGlobalVars autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","PREFERRED_VARS  [] first ","PREFERRED_VARS  [] ","node loc expression ","node loc "," lambda ","(sym :dstr) include? ","node parent type ","node parent "," preferred_names first to_s "," preferred_names first "," preferred_names ","node source_range "," style == "," style ","node parent children one? ","node parent children ","node parent begin_type? "," replacement "," ensure_required "," should_require_english? ","node parent  loc expression ","node parent  loc ","node parent  parent type ","node parent  parent ","node parent  source_range ","node parent  parent children one? ","node parent  parent children ","node parent  parent begin_type? "]}," RuboCop Cop Style SpecialGlobalVars message":{"type":"method","name":"message","children":[],"call":[" fail "," format ","english length > ","english length ","regular length > ","regular length ","english join ","regular join ","NON_ENGLISH_VARS  include? ","PREFERRED_VARS  [] partition ","PREFERRED_VARS  [] "," preferred_names first "," preferred_names ","ENGLISH_VARS  [] partition ","ENGLISH_VARS  [] "," style == "," style "," raise ","english empty? ! ","english empty? ","regular empty? ! ","regular empty? "," format_english_message "]}," RuboCop Cop Style SpecialGlobalVars on_gvar":{"type":"method","name":"on_gvar","children":[],"call":[" add_offense ","PREFERRED_VARS  [] "," opposite_style_detected "," correct_style_detected ","preferred include? "," preferred_names "," autocorrect "," message "," style_detected "," matching_styles "," preferred_names  include? ","  preferred_names _names "]}," RuboCop Cop Style SpaceInsideParens specifics":{"type":"method","name":"specifics","children":[],"call":[]}," RuboCop Cop Style SpaceInsideHashLiteralBraces range_of_space_to_the_left":{"type":"method","name":"range_of_space_to_the_left","children":[],"call":["Parser Source Range  new ","range end_pos - ","range end_pos ","range source_buffer ","src [] =~ ","src [] ","begin_pos - ","range begin_pos ","range source_buffer source "," range_between ","range source_buffer source  [] =~ ","range source_buffer source  [] ","range begin_pos  - ","range range begin_pos  "]}," RuboCop Cop Style SpaceInsideHashLiteralBraces range_of_space_to_the_right":{"type":"method","name":"range_of_space_to_the_right","children":[],"call":["Parser Source Range  new ","range begin_pos + ","range begin_pos ","range source_buffer ","src [] =~ ","src [] ","range end_pos ","range source_buffer source "," range_between ","range source_buffer source  [] =~ ","range source_buffer source  [] ","range range end_pos  "]}," RuboCop Cop Style SpaceInsideHashLiteralBraces space_range":{"type":"method","name":"space_range","children":[],"call":[" range_of_space_to_the_left "," range_of_space_to_the_right ","token_range source == ","token_range source "]}," RuboCop Cop Style SpaceInsideHashLiteralBraces autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","corrector remove ","range source "," lambda "]}," RuboCop Cop Style SpaceInsideHashLiteralBraces message":{"type":"method","name":"message","children":[],"call":[" format ","brace source "]}," RuboCop Cop Style SpaceInsideHashLiteralBraces offense?":{"type":"method","name":"offense?","children":[],"call":["has_space ! "," space_between? "," space_between?  ! "]}," RuboCop Cop Style SpaceInsideHashLiteralBraces check":{"type":"method","name":"check","children":[],"call":[" correct_style_detected "," opposite_style_detected "," add_offense "," message "," space_range ","(if\n  (send\n    (send\n      (lvar :t1) :text) :==\n    (str \"{\"))\n  (lvar :t1)\n  (lvar :t2)) pos ","t1 text == ","t1 text "," offense? "," style == "," style "," cop_config [] == "," cop_config [] "," cop_config ","t2 text == ","t2 text ","t2 type == ","t2 type ","t1 pos line < ","t2 pos line ","t2 pos ","t1 pos line ","t1 pos "," incorrect_style_detected "," expect_space? "," right_brace? "," left_brace? "," space_ space_range  ","  style == ? ","  cop_config [] == ? ","  expect_space? ? "," right_(if\n  (send\n    (send\n      (lvar :t1) :text) :==\n    (str \"{\"))\n  (lvar :t1)\n  (lvar :t2)) pos ? "," left_(if\n  (send\n    (send\n      (lvar :t1) :text) :==\n    (str \"{\"))\n  (lvar :t1)\n  (lvar :t2)) pos ? "]}," RuboCop Cop Style SpaceInsideHashLiteralBraces investigate":{"type":"method","name":"investigate","children":[],"call":[" check ","tokens [] ","e_ix - ","b_ix == ","b_ix + "," index_of_last_token ","tokens [] type == ","tokens [] type "," index_of_first_token "," on_node ","processed_source ast ","processed_source tokens ","processed_source tokens  [] "," index_of_last_token  - "," index_of_first_token  == "," index_of_first_token  + ","processed_source tokens  [] type == ","processed_source tokens  [] type ","processed_source processed_source tokens  "]}," RuboCop Cop Style SpaceInsideBrackets specifics":{"type":"method","name":"specifics","children":[],"call":[]}," RuboCop Cop Style SpaceInsideBlockBraces autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector insert_before ","corrector replace ","corrector remove ","range source "," lambda "]}," RuboCop Cop Style SpaceInsideBlockBraces style_for_empty_braces":{"type":"method","name":"style_for_empty_braces","children":[],"call":[" fail "," cop_config [] "," cop_config "," raise "]}," RuboCop Cop Style SpaceInsideBlockBraces offense":{"type":"method","name":"offense","children":[],"call":[" block_given? "," add_offense ","Parser Source Range  new "," range_between "," Parser Source Range  new _between ","  range_between _between "]}," RuboCop Cop Style SpaceInsideBlockBraces space":{"type":"method","name":"space","children":[],"call":[" correct_style_detected "," opposite_style_detected "," offense "," style == "," style "]}," RuboCop Cop Style SpaceInsideBlockBraces no_space":{"type":"method","name":"no_space","children":[],"call":[" correct_style_detected "," opposite_style_detected "," offense "," style == "," style "]}," RuboCop Cop Style SpaceInsideBlockBraces space_inside_right_brace":{"type":"method","name":"space_inside_right_brace","children":[],"call":[" space ","brace_with_space end_pos - ","brace_with_space end_pos ","brace_with_space begin_pos "," range_with_surrounding_space "," range_with_surrounding_space  end_pos - "," range_with_surrounding_space  end_pos "," range_with_surrounding_space  begin_pos "]}," RuboCop Cop Style SpaceInsideBlockBraces space_inside_left_brace":{"type":"method","name":"space_inside_left_brace","children":[],"call":[" space ","brace_with_space end_pos ","brace_with_space begin_pos + ","brace_with_space begin_pos "," range_with_surrounding_space "," offense ","pipe begin_pos ","left_brace end_pos "," cop_config [] "," cop_config ","args_delimiter begin_pos "," pipe? "," opposite_style_detected "," range_with_surrounding_space  end_pos "," range_with_surrounding_space  begin_pos + "," range_with_surrounding_space  begin_pos "]}," RuboCop Cop Style SpaceInsideBlockBraces no_space_inside_left_brace":{"type":"method","name":"no_space_inside_left_brace","children":[],"call":[" no_space ","left_brace end_pos + ","left_brace end_pos "," offense ","pipe end_pos ","left_brace begin_pos "," cop_config [] "," cop_config ","left_brace end_pos == ","pipe begin_pos ","args_delimiter end_pos ","args_delimiter begin_pos "," pipe? "," opposite_style_detected "]}," RuboCop Cop Style SpaceInsideBlockBraces braces_with_contents_inside":{"type":"method","name":"braces_with_contents_inside","children":[],"call":[" space_inside_right_brace "," no_space ","right_brace end_pos ","right_brace begin_pos ","inner =~ "," space_inside_left_brace "," no_space_inside_left_brace ","args loc begin ","args loc ","node loc end ","node loc ","node loc begin "," block_length == "," block_length "," block_length zero? "," check_right_brace "," check_left_brace "," space_inside_node loc end  ","node loc end  end_pos ","node loc end  begin_pos "," space_inside_node loc begin  "," no_space_inside_node loc begin  "," check_node loc end  "," check_node loc begin  "]}," RuboCop Cop Style SpaceInsideBlockBraces check_inside":{"type":"method","name":"check_inside","children":[],"call":[" offense ","range end_pos ","range begin_pos "," style_for_empty_braces == "," style_for_empty_braces "," braces_with_contents_inside ","inner =~ ","range source ","Parser Source Range  new ","right_brace begin_pos ","left_brace end_pos ","right_brace end_pos ","left_brace begin_pos ","left_brace end_pos == ","node loc expression source_buffer ","node loc expression ","node loc ","left_brace line == ","right_brace line ","left_brace line "," adjacent_braces ","node source_range source_buffer ","node source_range "," range_between ","Parser Source Range  new  end_pos "," range_between  end_pos ","Parser Source Range  new  begin_pos "," range_between  begin_pos ","range source  =~ ","Parser Source Range  new  source "," range_between  source ","node source_Parser Source Range  new  source_buffer ","node source_ range_between  source_buffer ","node source_Parser Source Range  new  ","node source_ range_between  "," Parser Source Range  new _between ","  range_between _between "]}," RuboCop Cop Style SpaceInsideBlockBraces on_block":{"type":"method","name":"on_block","children":[],"call":[" check_inside ","node loc end ","node loc ","node loc begin ","Util  block_length > ","Util  block_length "," config for_cop [] "," config for_cop "," config ","node loc begin is? "," block_length > "," block_length "]}," RuboCop Cop Style SpaceBeforeModifierKeyword autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector insert_before ","node loc keyword ","node loc "," lambda "]}," RuboCop Cop Style SpaceBeforeModifierKeyword elsif?":{"type":"method","name":"elsif?","children":[],"call":["node loc keyword is? ","node loc keyword ","node loc "]}," RuboCop Cop Style SpaceBeforeModifierKeyword modifier?":{"type":"method","name":"modifier?","children":[],"call":[" elsif? ! "," elsif? ","node loc end nil? ","node loc end ","node loc ","node loc respond_to? "]}," RuboCop Cop Style SpaceBeforeModifierKeyword on_if":{"type":"method","name":"on_if","children":[],"call":[" add_offense ","left_of_kw is? ","Parser Source Range  new ","b - ","kw source_buffer ","kw begin_pos ","node loc keyword ","node loc "," modifier? ","Parser Source Range  new  is? ","left_of_node loc keyword  is? ","kw begin_pos  - ","kw source_kw begin_pos uffer ","node loc keyword  source_buffer ","kw kw begin_pos egin_pos ","node loc keyword  begin_pos "]}," RuboCop Cop Style SpaceBeforeComment autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector insert_before "," lambda "]}," RuboCop Cop Style SpaceBeforeComment investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense ","t2 pos ","t1 pos end == ","t2 pos begin ","t1 pos end ","t1 pos ","t1 pos line == ","t2 pos line ","t1 pos line ","t2 type == ","t2 type ","processed_source tokens each_cons ","processed_source tokens "]}," RuboCop Cop Style SpaceBeforeBlockBraces autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector insert_before ","corrector remove ","range source "," lambda "]}," RuboCop Cop Style SpaceBeforeBlockBraces space_detected":{"type":"method","name":"space_detected","children":[],"call":[" opposite_style_detected "," add_offense ","Parser Source Range  new ","left_brace begin_pos ","space_plus_brace begin_pos ","left_brace source_buffer "," range_between ","Parser Source Range  new _plus_brace begin_pos "," range_between _plus_brace begin_pos "]}," RuboCop Cop Style SpaceBeforeBlockBraces space_missing":{"type":"method","name":"space_missing","children":[],"call":[" opposite_style_detected "," add_offense "]}," RuboCop Cop Style SpaceBeforeBlockBraces on_block":{"type":"method","name":"on_block","children":[],"call":[" space_missing "," space_detected "," correct_style_detected "," style ","space_plus_brace source start_with? ","space_plus_brace source "," range_with_surrounding_space ","node loc begin ","node loc ","Util  block_length > ","Util  block_length "," config for_cop [] "," config for_cop "," config ","node loc begin is? "," block_length > "," block_length "," range_with_surrounding_space  source start_with? "," range_with_surrounding_space  source "]}," RuboCop Cop Style SpaceAroundOperators autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","range source strip ","range source "," lambda ","range source end_with? ","range source =~ "]}," RuboCop Cop Style SpaceAroundOperators check_operator":{"type":"method","name":"check_operator","children":[],"call":[" add_offense ","op source ","with_space source !~ ","with_space source ","with_space is? ","op is? "," range_with_surrounding_space "," multi_space_operator? ! "," multi_space_operator? ","with_space source =~ ","with_space source start_with? "," excess_trailing_space? "," excess_leading_space? "," offense "," range_with_surrounding_space  source !~ "," range_with_surrounding_space  source "," range_with_surrounding_space  is? "," range_with_surrounding_space  source =~ "," range_with_surrounding_space  source start_with? "]}," RuboCop Cop Style SpaceAroundOperators check":{"type":"method","name":"check","children":[],"call":[" check_operator ","node loc operator ","node loc "]}," RuboCop Cop Style SpaceAroundOperators called_with_dot?":{"type":"method","name":"called_with_dot?","children":[],"call":["node loc dot ","node loc "]}," RuboCop Cop Style SpaceAroundOperators unary_operation?":{"type":"method","name":"unary_operation?","children":[],"call":["whole begin_pos == ","selector begin_pos ","whole begin_pos "," operator? ","node loc selector ","node loc ","node loc expression ","node source_range begin_pos == ","node source_range begin_pos ","node source_range ","node loc expression  begin_pos == ","node loc selector  begin_pos ","node loc expression  begin_pos ","node loc node loc selector  "]}," RuboCop Cop Style SpaceAroundOperators operator?":{"type":"method","name":"operator?","children":[],"call":["range source !~ ","range source "]}," RuboCop Cop Style SpaceAroundOperators on_send":{"type":"method","name":"on_send","children":[],"call":[" check_operator "," operator? ","node loc selector ","node loc "," called_with_dot? ! "," called_with_dot? "," unary_operation? ! "," unary_operation? "," check ","node loc operator ","right source_range "," on_special_asgn ","op source to_sym ","op source ","node unary_operation? ! ","node unary_operation? ","op != ","node method_name "," operator_with_regular_syntax? ","node first_argument source_range ","node first_argument "," regular_operator? ","node setter_method? "," check_node loc selector erator "," check_node method_name erator "," node loc selector erator? "," node method_name erator? "," unary_node loc selector eration? ! "," unary_node method_name eration? ! "," unary_node loc selector eration? "," unary_node method_name eration? ","node loc node loc selector erator ","node loc node method_name erator ","node loc selector  source to_sym ","node method_name  source to_sym ","node loc selector  source ","node method_name  source ","node unary_node loc selector eration? ! ","node unary_node method_name eration? ! ","node unary_node loc selector eration? ","node unary_node method_name eration? ","node loc selector  != ","node method_name  != "," node loc selector erator_with_regular_syntax? "," node method_name erator_with_regular_syntax? "," regular_node loc selector erator? "," regular_node method_name erator? "]}," RuboCop Cop Style SpaceAroundOperators on_resbody":{"type":"method","name":"on_resbody","children":[],"call":[" check_operator ","node loc assoc ","node loc ","variable source_range "]}," RuboCop Cop Style SpaceAroundOperators on_if":{"type":"method","name":"on_if","children":[],"call":[" check_operator ","node loc colon ","node loc ","node loc question ","node loc respond_to? ","else_branch source_range ","if_branch source_range "," ternary? ","node else_branch source_range ","node else_branch ","node if_branch source_range ","node if_branch ","node ternary? "]}," RuboCop Cop Style SpaceAroundOperators on_pair":{"type":"method","name":"on_pair","children":[],"call":[" check ","node loc operator is? ","node loc operator ","node loc "," check_operator ","right source_range "," any_pairs_on_the_same_line? ! "," any_pairs_on_the_same_line? ","node parent ","align_hash_config [] == ","align_hash_config [] "," config for_cop "," config ","node source_range ","node parent pairs_on_same_line? ! ","node parent pairs_on_same_line? "," hash_table_style? ","node hash_rocket? "," config for_cop  [] == "," config for_cop  [] "]}," RuboCop Cop Style SpaceAroundEqualsInParameterDefault autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace "," lambda "," style == "," style ","replacement + ","m captures [] ","m captures ","range source match ","range source "," larange source match bda ","replacerange source match ent + ","range source match  captures [] ","range source match  captures ","range source range source match atch "]}," RuboCop Cop Style SpaceAroundEqualsInParameterDefault message":{"type":"method","name":"message","children":[],"call":[" format "," style == "," style "]}," RuboCop Cop Style SpaceAroundEqualsInParameterDefault no_surrounding_space?":{"type":"method","name":"no_surrounding_space?","children":[],"call":[" space_between? ! "," space_between? "]}," RuboCop Cop Style SpaceAroundEqualsInParameterDefault space_on_both_sides?":{"type":"method","name":"space_on_both_sides?","children":[],"call":[" space_between? "]}," RuboCop Cop Style SpaceAroundEqualsInParameterDefault check_optarg":{"type":"method","name":"check_optarg","children":[],"call":[" unrecognized_style_detected "," opposite_style_detected "," style == "," style "," add_offense ","Parser Source Range  new ","value pos begin_pos ","value pos ","arg pos end_pos ","arg pos "," processed_source buffer "," processed_source "," correct_style_detected "," no_surrounding_space? "," space_on_both_sides? "," incorrect_style_detected ","  no_surrounding_space? ? ","  space_on_both_sides? ? "]}," RuboCop Cop Style SpaceAroundEqualsInParameterDefault investigate":{"type":"method","name":"investigate","children":[],"call":[" check_optarg ","processed_source tokens [] ","processed_source tokens "," index_of_first_token "," on_node ","processed_source ast ","  index_of_first_token _of_first_token "]}," RuboCop Cop Style SpaceAfterSemicolon kind":{"type":"method","name":"kind","children":[],"call":["token type == ","token type "]}," RuboCop Cop Style SpaceAfterNot autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector remove ","Parser Source Range  new ","receiver loc expression begin_pos ","receiver loc expression ","receiver loc ","node loc selector end_pos ","node loc selector ","node loc ","node loc selector source_buffer "," lambda ","receiver source_range begin_pos ","receiver source_range "," range_between ","node receiver source_range begin_pos ","node receiver source_range ","node receiver "]}," RuboCop Cop Style SpaceAfterNot on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","node loc expression source =~ ","node loc expression source ","node loc expression ","node loc ","method_name == ","node source =~ ","node source ","receiver loc column - > ","receiver loc column - ","node loc column ","receiver loc column ","receiver loc "," whitespace_after_bang_op? ","node keyword_bang? "," whitespace_after_operator? "]}," RuboCop Cop Style SpaceAfterMethodName autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector remove "," lambda "]}," RuboCop Cop Style SpaceAfterMethodName check":{"type":"method","name":"check","children":[],"call":[" add_offense ","pos_before_left_paren source =~ ","pos_before_left_paren source ","Parser Source Range  new ","expr begin_pos ","expr begin_pos - ","expr source_buffer ","args loc expression ","args loc ","args loc begin is? ","args loc begin ","Parser Source Range  new  source =~ ","Parser Source Range  new  source ","args loc expression  begin_pos ","args loc expression  begin_pos - ","args loc expression  source_buffer ","args loc args loc expression ession "]}," RuboCop Cop Style SpaceAfterControlKeyword autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector insert_after ","node loc keyword ","node loc "," lambda "]}," RuboCop Cop Style SpaceAfterControlKeyword on_keyword":{"type":"method","name":"on_keyword","children":[],"call":[" add_offense ","exp source [] start_with? ","kw source + ","kw source ","exp source [] ","exp source ","kw begin_pos - ","exp begin_pos ","kw begin_pos ","node loc keyword ","node loc ","node loc expression ","node loc is_a? ","node source [] start_with? ","node source [] ","node source ","node source_range begin_pos ","node source_range ","node loc expression  source [] start_with? ","node loc keyword  source + ","node loc keyword  source ","node loc expression  source [] ","node loc expression  source ","node loc keyword  begin_pos - ","node loc expression  begin_pos ","node loc keyword  begin_pos ","node loc node loc expression ression "]}," RuboCop Cop Style SpaceAfterComma kind":{"type":"method","name":"kind","children":[],"call":["token type == ","token type "]}," RuboCop Cop Style SpaceAfterColon autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector insert_after "," lambda "]}," RuboCop Cop Style SpaceAfterColon on_if":{"type":"method","name":"on_if","children":[],"call":[" add_offense ","colon source_buffer source [] =~ ","colon source_buffer source [] ","colon end_pos ","colon source_buffer source ","colon source_buffer ","node loc colon ","node loc "," ternary_op? "," followed_by_space? ","node loc colon  source_buffer source [] =~ ","node loc colon  source_buffer source [] ","node loc colon  end_pos ","node loc colon  source_buffer source ","node loc colon  source_buffer ","node loc node loc colon  "]}," RuboCop Cop Style SpaceAfterColon on_pair":{"type":"method","name":"on_pair","children":[],"call":[" add_offense ","oper source_buffer source [] =~ ","oper source_buffer source [] ","oper end_pos ","oper source_buffer source ","oper source_buffer ","oper is? ","node loc operator ","node loc "," followed_by_space? ","colon is? ","node colon? ","node loc operator  source_buffer source [] =~ ","node loc operator  source_buffer source [] ","node loc operator  end_pos ","node loc operator  source_buffer source ","node loc operator  source_buffer ","node loc operator  is? ","node loc node loc operator ator ","node node loc operator ? "]}," RuboCop Cop Style SingleSpaceBeforeFirstArg autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace "," lambda "]}," RuboCop Cop Style SingleSpaceBeforeFirstArg on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","space length > ","space length ","Parser Source Range  new ","arg1 begin_pos ","arg1_with_space begin_pos ","arg1 source_buffer "," range_with_surrounding_space ","arg1 line > ","node loc line ","node loc ","arg1 line ","args first loc expression ","args first loc ","args first ","method_name to_s end_with? ","method_name to_s "," operator? ","args empty? "," parentheses? ","node asgn_method_call? ","Parser Source Range  new  length > ","Parser Source Range  new  length ","args first loc expression  begin_pos ","arg1_with_Parser Source Range  new  begin_pos "," range_with_surrounding_space  begin_pos ","args first loc expression _with_space begin_pos ","args first loc expression  source_buffer "," range_with_surrounding_Parser Source Range  new  ","args first loc expression  line > ","args first loc expression  line "]}," RuboCop Cop Style SingleLineMethods move_comment":{"type":"method","name":"move_comment","children":[],"call":["corrector remove ","eol_comment loc expression ","eol_comment loc ","corrector insert_before ","text + + ","  * ","node loc keyword column ","node loc keyword ","node loc ","text + ","node loc expression ","eol_comment loc expression source ","node source_range ","LineBreakCorrector  move_comment "," end_of_line_comment ","node source_range line "," processed_source comment_at_line "," processed_source ","eol_comment loc expression source  + + ","eol_comment loc expression source  + "]}," RuboCop Cop Style SingleLineMethods break_line_before":{"type":"method","name":"break_line_before","children":[],"call":["corrector insert_before ","\n + ","  * ","node loc keyword column + ","indent_steps * ","node loc keyword column ","node loc keyword ","node loc "," configured_indentation_width ","LineBreakCorrector  break_line_before "]}," RuboCop Cop Style SingleLineMethods autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << "," move_comment "," break_line_before ","node loc end ","node loc ","body loc expression ","body loc ","part loc expression ","part loc ","body children each ","body children ","body type == ","body type "," lambda ","c loc line == ","node loc expression line ","node loc expression ","c loc line ","c loc "," processed_source comments find "," processed_source comments "," processed_source ","body source_range ","part source_range ","node source_range line ","node source_range "," end_of_line_comment "," each_part ","node body ","LineBreakCorrector  break_line_before "," configured_indentation_width "," correct_to_multiline "," correct_to_endless "," correct_to_endless? ","node body  loc expression ","node body  loc ","node body  children each ","node body  children ","node body  type == ","node body  type ","node body  source_range ","node node body  "]}," RuboCop Cop Style SingleLineMethods check":{"type":"method","name":"check","children":[],"call":[" add_offense ","(and\n  (send nil :allow_empty?)\n  (lvar :empty_body)) ! "," allow_empty? ","start_line == ","body nil? ","node loc end line ","node loc end ","node loc ","node loc keyword line ","node loc keyword ","(and\n  (send nil :allow_empty?)\n  (lvar :body nil? )) ! ","node loc keyword line  == "]}," RuboCop Cop Style SingleLineMethods allow_empty?":{"type":"method","name":"allow_empty?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style SingleLineBlockParams args_match?":{"type":"method","name":"args_match?","children":[],"call":["actual_args == "," target_args map "," target_args ","a to_a ","args flat_map ","actual_args_no_underscores == ","arg to_s sub ","arg to_s ","actual_args map ","args to_a flat_map ","args to_a "," target_args first ","actual_args_no_underscores size ","args flat_map  == ","args to_a flat_map  == ","args flat_map _no_underscores == ","args to_a flat_map _no_underscores == ","args flat_map  map ","args to_a flat_map  map ","args flat_map _no_underscores size ","args to_a flat_map _no_underscores size "]}," RuboCop Cop Style SingleLineBlockParams target_args":{"type":"method","name":"target_args","children":[],"call":["method_hash [] ","m keys first == ","m keys first ","m keys "," methods find "," methods ","method_name to_s "," method_name == "," method_name ","method_name to_s  to_s "," method_name to_s  == "," method_name to_s  "]}," RuboCop Cop Style SingleLineBlockParams method_names":{"type":"method","name":"method_names","children":[],"call":["e keys first to_sym ","e keys first ","e keys "," methods map "," methods "," method_name to_sym "," method_name "]}," RuboCop Cop Style SingleLineBlockParams methods":{"type":"method","name":"methods","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style SingleLineBlockParams message":{"type":"method","name":"message","children":[],"call":[" target_args join "," target_args "," format ","node parent send_node method_name ","node parent send_node ","node parent "," target_ target_args join  join "," target_ target_args join  ","node parent send_node node parent send_node method_name  "]}," RuboCop Cop Style SingleLineBlockParams on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," message "," args_match? ","n type == ","n type ","args all? "," method_names include? "," method_names ","Util  block_length == ","Util  block_length "," block_length == "," block_length ","args empty? "," block_length zero? ","node arguments ","send_node method_name ","arguments all? ","node arguments to_a ","node arguments? ","send_node receiver ","node send_node ","node single_line? ","node send_node method_name "," eligible_arguments? "," eligible_method? "," autocorrect "," format ","preferred_block_arguments values join ","preferred_block_arguments values "," build_preferred_arguments_map "," target_args ","node method_name ","  message  ","  format  "," node send_node method_name s include? "," node method_name s include? "," node send_node method_name s "," node method_name s ","node node arguments to_a  ","node send_node  method_name ","send_node node send_node method_name  ","send_node node method_name  ","node arguments to_a  all? ","node node arguments to_a  to_a ","node node arguments to_a ? ","node send_node  receiver ","node node send_node  ","node node send_node  method_name ","node send_node node send_node method_name  ","node send_node node method_name  "," eligible_node arguments to_a ? ","preferred_block_node arguments to_a  values join "," build_preferred_arguments_map  values join ","preferred_block_node arguments to_a  values "," build_preferred_arguments_map  values "," build_preferred_node arguments to_a _map ","node node send_node method_name  ","node node method_name  "]}," RuboCop Cop Style SignalException each_command":{"type":"method","name":"each_command","children":[],"call":[" command? "," on_node "]}," RuboCop Cop Style SignalException allow":{"type":"method","name":"allow","children":[],"call":[" ignore_node "," each_command "," each_command_or_kernel_call "]}," RuboCop Cop Style SignalException check_for":{"type":"method","name":"check_for","children":[],"call":[" add_offense "," message ","selector != ","(sym :raise) include? "," ignore_node "," ignored_node? "," each_command "," style == "," style "," command_or_kernel_call? ","method_name == "," each_command_or_kernel_call "]}," RuboCop Cop Style SignalException message":{"type":"method","name":"message","children":[],"call":["method_name == "," style "]}," RuboCop Cop Style SignalException autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","node loc selector ","node loc "," command? "," style "," lambda "," command_or_kernel_call? "]}," RuboCop Cop Style SignalException on_send":{"type":"method","name":"on_send","children":[],"call":[" check_for "," ignored_node? "," style "," check_send "," custom_fail_defined? "]}," RuboCop Cop Style SignalException on_rescue":{"type":"method","name":"on_rescue","children":[],"call":[" allow "," check_for ","rescue_nodes each "," style == "," style "," check_scope "]}," RuboCop Cop Style Semicolon autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector remove "," lambda "," fail "]}," RuboCop Cop Style Semicolon convention_on":{"type":"method","name":"convention_on","children":[],"call":[" add_offense "," source_range ","@processed_source [] ","line - ","@processed_source buffer ","corrector remove "," source_ source_range  "]}," RuboCop Cop Style Semicolon check_for_line_terminator":{"type":"method","name":"check_for_line_terminator","children":[],"call":[" convention_on ","tokens last pos column ","tokens last pos ","tokens last ","tokens last type == ","tokens last type ","tokens_for_lines each ","token pos line ","token pos ","@processed_source tokens group_by ","@processed_source tokens "]}," RuboCop Cop Style Semicolon on_begin":{"type":"method","name":"on_begin","children":[],"call":[" convention_on ","last_on_line ! ","@processed_source [] index ","@processed_source [] ","line - ","expr_on_line size > ","expr_on_line size ","lines each ","exprs_lines group_by ","e loc expression line ","e loc expression ","e loc ","exprs map ","exprs size < ","exprs size ","node children "," cop_config [] "," cop_config ","e source_range line ","e source_range "," register_semicolon "," find_semicolon_positions "," expressions_per_line each "," expressions_per_line ","node source include? ","node source ","exprs_lines group_by  each ","node children _lines group_by ","exprs_exprs_lines group_by  group_by ","exprs map  group_by ","node children  map ","node children  size < ","node children  size "]}," RuboCop Cop Style Semicolon investigate":{"type":"method","name":"investigate","children":[],"call":[" check_for_line_terminator ","processed_source ast "," check_for_line_terminator_or_opener ","processed_source blank? "]}," RuboCop Cop Style SelfAssignment check_boolean_node":{"type":"method","name":"check_boolean_node","children":[],"call":[" add_offense "," format ","rhs loc operator source ","rhs loc operator ","rhs loc ","first_operand == "," s "," autocorrect ","rhs loc rhs loc operator source  source ","rhs loc rhs loc operator source  "]}," RuboCop Cop Style SelfAssignment check_send_node":{"type":"method","name":"check_send_node","children":[],"call":[" add_offense "," format ","receiver == "," s ","OPS  include? "," autocorrect "]}," RuboCop Cop Style SelfAssignment check":{"type":"method","name":"check","children":[],"call":[" check_boolean_node ","(sym :and) include? ","rhs type "," check_send_node ","rhs type == ","rhs send_type? ","rhs operator_keyword? "]}," RuboCop Cop Style SelfAssignment on_cvasgn":{"type":"method","name":"on_cvasgn","children":[],"call":[" check "]}," RuboCop Cop Style SelfAssignment on_ivasgn":{"type":"method","name":"on_ivasgn","children":[],"call":[" check "]}," RuboCop Cop Style SelfAssignment on_lvasgn":{"type":"method","name":"on_lvasgn","children":[],"call":[" check "]}," RuboCop Cop Style RescueModifier check":{"type":"method","name":"check","children":[],"call":[" ignore_node ","first_child type == ","first_child type ","body children first ","body children ","body type ","body children first  type == ","body children first  type "]}," RuboCop Cop Style RescueModifier on_kwbegin":{"type":"method","name":"on_kwbegin","children":[],"call":[" check "]}," RuboCop Cop Style RescueModifier on_rescue":{"type":"method","name":"on_rescue","children":[],"call":[" add_offense "," ignored_node? "]}," RuboCop Cop Style RegexpLiteral error_message":{"type":"method","name":"error_message","children":[],"call":[" format "," max_slashes == "," max_slashes "]}," RuboCop Cop Style RegexpLiteral configure_max":{"type":"method","name":"configure_max","children":[],"call":[" config_to_allow_offenses= ","min - ","max < ","min < "," max_slashes + "," max_slashes ","max > "," class slash_count [] min "," class slash_count [] "," class slash_count "," class "," class slash_count [] max "," class slash_count [] add ","Set  new "," calculate_config "," class slash_count [] min  - "," class slash_count [] max  < "," class slash_count [] min  < ","  class slash_count [] max _slashes + ","  class slash_count [] max _slashes "," class slash_count [] max  > "," class slash_count []  class slash_count [] min  "," class slash_count []  class slash_count [] max  "]}," RuboCop Cop Style RegexpLiteral max_slashes":{"type":"method","name":"max_slashes","children":[],"call":[" fail ","m >= ","m is_a? "," cop_config [] "," cop_config "," cop_config []  >= "," cop_config []  is_a? "]}," RuboCop Cop Style RegexpLiteral on_regexp":{"type":"method","name":"on_regexp","children":[],"call":[" configure_max ","@options [] "," add_offense "," error_message ","slashes <= "," max_slashes ","slashes > ","delimiter_start == ","node loc begin source [] ","node loc begin source ","node loc begin ","node loc ","total_string count ","(send\n  (lvar :string_parts) :map) join ","s loc expression source ","s loc expression ","s loc ","string_parts map ","child type == ","child type ","node children select ","node children "," check_percent_r_literal "," check_slash_literal "," slash_literal? "," correct_inner_slashes "," correct_delimiters "," allowed_percent_r_literal? "," allowed_slash_literal? ","total_string count  <= "," max_total_string count  ","total_string count  > ","node loc begin source []  == ","(send\n  (lvar :string_parts) :map) join  count "," correct_inner_total_string count  "]}," RuboCop Cop Style RedundantSelf allow_self":{"type":"method","name":"allow_self","children":[],"call":["@allowed_send_nodes << ","receiver type == ","receiver type ","node type == ","node type ","receiver self_type? ","node send_type? ","node self_receiver? "]}," RuboCop Cop Style RedundantSelf constant_name?":{"type":"method","name":"constant_name?","children":[],"call":["method_name match "]}," RuboCop Cop Style RedundantSelf keyword?":{"type":"method","name":"keyword?","children":[],"call":["(sym :alias) include? "]}," RuboCop Cop Style RedundantSelf operator?":{"type":"method","name":"operator?","children":[],"call":["method_name to_s =~ ","method_name to_s "]}," RuboCop Cop Style RedundantSelf on_argument":{"type":"method","name":"on_argument","children":[],"call":["@local_variables << ","@local_variables_scopes [] << ","@local_variables_scopes [] "," on_args ","node mlhs_type? "]}," RuboCop Cop Style RedundantSelf autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector remove ","node loc dot ","node loc ","receiver loc expression ","receiver loc "," lambda ","receiver source_range ","node receiver source_range ","node receiver "]}," RuboCop Cop Style RedundantSelf on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","@local_variables include? ","@allowed_send_nodes include? "," constant_name? "," keyword? "," operator? ","receiver type == ","receiver type ","node asgn_method_call? "," regular_method_call? ","receiver self_type? ","@local_variables_scopes [] include? ","@local_variables_scopes [] ","node method_name ","node self_receiver? ","node parent mlhs_type? ","node parent "," allowed_send_node? ","corrector remove ","node loc dot ","node loc ","node receiver "]}," RuboCop Cop Style RedundantSelf on_lvasgn":{"type":"method","name":"on_lvasgn","children":[],"call":["@local_variables << ","@local_variables_scopes [] << ","@local_variables_scopes [] "," add_lhs_to_local_variables_scopes "]}," RuboCop Cop Style RedundantSelf on_blockarg":{"type":"method","name":"on_blockarg","children":[],"call":[" on_argument "]}," RuboCop Cop Style RedundantSelf on_args":{"type":"method","name":"on_args","children":[],"call":[" on_argument ","node children each ","node children "]}," RuboCop Cop Style RedundantSelf on_defs":{"type":"method","name":"on_defs","children":[],"call":[" add_scope "]}," RuboCop Cop Style RedundantSelf on_def":{"type":"method","name":"on_def","children":[],"call":[" add_scope "]}," RuboCop Cop Style RedundantSelf on_op_asgn":{"type":"method","name":"on_op_asgn","children":[],"call":[" allow_self "]}," RuboCop Cop Style RedundantSelf on_or_asgn":{"type":"method","name":"on_or_asgn","children":[],"call":[" allow_self "]}," RuboCop Cop Style RedundantSelf initialize":{"type":"method","name":"initialize","children":[],"call":["hash []= ","Hash  new ","(send\n  (const nil :Hash) :new) compare_by_identity "]}," RuboCop Cop Style RedundantReturn check_return_node":{"type":"method","name":"check_return_node","children":[],"call":[" add_offense ","node children size > ","node children size ","node children "," cop_config [] "," cop_config "," correct_without_arguments "," correct_with_arguments ","node arguments? "," message ","node loc keyword ","node loc "]}," RuboCop Cop Style RedundantReturn check":{"type":"method","name":"check","children":[],"call":[" check_return_node ","last_expr type == ","last_expr type ","expressions last ","body type == ","body type ","expressions last  type == ","expressions last  type "]}," RuboCop Cop Style RedundantReturn autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector remove "," range_with_surrounding_space ","node loc keyword ","node loc ","corrector insert_after ","kids last ","corrector insert_before ","kids first ","child loc expression ","child loc ","node children map ","node children ","node children size > ","node children size "," lambda ","corrector replace ","node loc expression "," arguments? "," add_braces "," braces? ","return_value hash_type? "," add_brackets ","node source_range ","return_value braces? "," correct_without_arguments "," correct_with_arguments ","node arguments? "]}," RuboCop Cop Style RedundantException on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","first_arg == ","args size == ","args size "," command? ","node command? "," compact? "," exploded? "," fix_compact "," fix_exploded ","RAISE_METHODS  include? ","node method_name "]}," RuboCop Cop Style RedundantBegin autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace "," range_with_surrounding_space source gsub "," range_with_surrounding_space source "," range_with_surrounding_space ","child loc expression ","child loc ","node loc expression ","node loc ","child_indent - ","child loc column ","node loc column ","node children first ","node children "," lambda ","corrector remove ","node loc end ","node loc begin ","node children first  loc expression ","node children first  loc ","child loc column  - ","node children first _indent - ","node children first  loc column ","node node children first ren first ","node node children first ren "]}," RuboCop Cop Style RedundantBegin check":{"type":"method","name":"check","children":[],"call":[" add_offense ","body type == ","body type ","node body ","node body kwbegin_type? ","corrector remove ","node body loc end ","node body loc ","node body loc begin "]}," RuboCop Cop Style RaiseArgs message":{"type":"method","name":"message","children":[],"call":[" style "," format "," style == ","node method_name "]}," RuboCop Cop Style RaiseArgs check_exploded":{"type":"method","name":"check_exploded","children":[],"call":[" correct_style_detected "," opposite_style_detected "," add_offense "," message ","constructor_args size <= ","constructor_args size ","arg loc selector is? ","arg loc selector ","arg loc ","arg type == ","arg type ","args size == ","args size ","arg send_type? ","args one? ","first_arg splat_type? ","constructor_args first ","node method_name "," acceptable_exploded_args? ","first_arg arguments ","first_arg method? ","first_arg send_type? ","node first_argument ","node arguments one? ","node arguments ","corrector replace "," correction_compact_to_exploded "," format "," allowed_non_exploded_type? "," use_new_method? ! "," use_new_method? ","constructor_args first  splat_type? ","node first_argument  splat_type? ","constructor_args first  arguments ","node first_argument  arguments ","constructor_args first  method? ","node first_argument  method? ","constructor_args first  send_type? ","node first_argument  send_type? ","node constructor_args first ument ","node node first_argument ument "]}," RuboCop Cop Style RaiseArgs check_compact":{"type":"method","name":"check_compact","children":[],"call":[" correct_style_detected "," opposite_style_detected "," add_offense "," message ","args size > ","args size ","node method_name ","node arguments size > ","node arguments size ","node arguments ","corrector replace "," correction_exploded_to_compact "," format ","exception first_argument ","exception send_type? ","node first_argument ","node first_argument  first_argument ","node first_argument  send_type? "]}," RuboCop Cop Style RaiseArgs on_send":{"type":"method","name":"on_send","children":[],"call":[" check_exploded "," check_compact "," style "," command? ","node command? "]}," RuboCop Cop Style Proc autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","node loc expression ","node loc "," lambda ","node source_range "]}," RuboCop Cop Style Proc on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense ","block_method == "," proc_new? ","corrector replace "]}," RuboCop Cop Style PredicateName prefix_blacklist":{"type":"method","name":"prefix_blacklist","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style PredicateName message":{"type":"method","name":"message","children":[],"call":["new_name << ","method_name end_with? ","method_name sub ","method_name sub  << "]}," RuboCop Cop Style PredicateName check":{"type":"method","name":"check","children":[],"call":[" add_offense "," message ","method_name to_s ","method_name to_s start_with? "," prefix_blacklist each "," prefix_blacklist "]}," RuboCop Cop Style PerlBackrefs autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","node loc expression ","node loc "," lambda ","(sym :dstr) include? ","node parent type ","node parent ","node source_range "]}," RuboCop Cop Style PerlBackrefs on_nth_ref":{"type":"method","name":"on_nth_ref","children":[],"call":[" add_offense ","corrector replace ","(sym :dstr) include? ","node parent type ","node parent "," on_back_ref_or_gvar_or_nth_ref "]}," RuboCop Cop Style PercentLiteralDelimiters same_line?":{"type":"method","name":"same_line?","children":[],"call":["range begin line == ","child_node loc line ","child_node loc ","range begin line ","range begin ","child_node is_a? ! ","child_node is_a? "]}," RuboCop Cop Style PercentLiteralDelimiters new_line":{"type":"method","name":"new_line","children":[],"call":[" same_line? "]}," RuboCop Cop Style PercentLiteralDelimiters string_source":{"type":"method","name":"string_source","children":[],"call":["node loc expression source ","node loc expression ","node loc ","node type == ","node type ","node respond_to? ","node is_a? ","node source ","node str_type? ","node sym_type? ","node scrub "]}," RuboCop Cop Style PercentLiteralDelimiters contains_preferred_delimiter?":{"type":"method","name":"contains_preferred_delimiter?","children":[],"call":["s include? ","preferred_delimiters any? ","(send\n  (send\n    (lvar :node) :children) :map) compact any? ","(send\n  (send\n    (lvar :node) :children) :map) compact "," string_source ","node children map ","node children "," preferred_delimiters "," preferred_delimiters_for "," contains_delimiter? "," preferred_delimiters  any? "," preferred_delimiters_for  any? ","  preferred_delimiters  ","  preferred_delimiters_for  ","  preferred_delimiters _for ","  preferred_delimiters_for _for "]}," RuboCop Cop Style PercentLiteralDelimiters uses_preferred_delimiter?":{"type":"method","name":"uses_preferred_delimiter?","children":[],"call":[" preferred_delimiters [] == "," begin_source [] "," begin_source "," preferred_delimiters [] "," preferred_delimiters "," preferred_delimiters_for [] == "," preferred_delimiters_for [] "," preferred_delimiters_for "]}," RuboCop Cop Style PercentLiteralDelimiters source":{"type":"method","name":"source","children":[],"call":["Parser Source Range  new source ","Parser Source Range  new ","end_node loc expression end_pos ","end_node loc expression ","end_node loc ","begin_node loc expression begin_pos ","begin_node loc expression ","begin_node loc ","node loc expression source_buffer ","node loc expression ","node loc "]}," RuboCop Cop Style PercentLiteralDelimiters contents":{"type":"method","name":"contents","children":[],"call":["first_child to_s "," source ","first_child is_a? ","last_child loc expression source ","last_child loc expression ","last_child loc ","node type == ","node type ","last_child loc first_child to_s  source ","last_child loc  source  source ","last_child loc first_child to_s  ","last_child loc  source  "]}," RuboCop Cop Style PercentLiteralDelimiters preferred_delimiters":{"type":"method","name":"preferred_delimiters","children":[],"call":[" cop_config [] [] split "," cop_config [] [] "," cop_config [] "," cop_config ","Hash  [] ","PERCENT_LITERAL_TYPES  map "," cop_config [] key? "," ensure_valid_preferred_delimiters "]}," RuboCop Cop Style PercentLiteralDelimiters on_percent_literal":{"type":"method","name":"on_percent_literal","children":[],"call":[" add_offense "," contains_preferred_delimiter? ! "," contains_preferred_delimiter? "," uses_preferred_delimiter? ! "," uses_preferred_delimiter? ","types include? "," type "," include_same_character_as_used_for_delimiter? ","corrector replace ","node loc end ","node loc ","node loc begin "," preferred_delimiters_for "," message "," type s include? ","  type  "]}," RuboCop Cop Style PercentLiteralDelimiters autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","node loc expression ","node loc "," lambda ","type + + + + + + ","type + + + + + ","type + + + + ","type + + + ","type + + ","type + "," contents "," new_line ","node children last ","node children ","node loc end ","node children first ","node loc begin "," preferred_delimiters "," type ","type + + + + + + + + ","type + + + + + + + "," leading_whitespace "," preferred_delimiters_for "," type  + + + + + + "," type  + + + + + "," type  + + + + "," type  + + + "," type  + + "," type  + ","  type  "," type  + + + + + + + + "," type  + + + + + + + "]}," RuboCop Cop Style PercentLiteralDelimiters message":{"type":"method","name":"message","children":[],"call":["delimiters [] "," preferred_delimiters "," type "," preferred_delimiters_for "," preferred_delimiters  [] "," preferred_delimiters_for  [] "," preferred_ preferred_delimiters  "," preferred_ preferred_delimiters_for  ","  type  "," preferred_ preferred_delimiters _for "," preferred_ preferred_delimiters_for _for "]}," RuboCop Cop Style PercentLiteralDelimiters on_xstr":{"type":"method","name":"on_xstr","children":[],"call":[" process "]}," RuboCop Cop Style PercentLiteralDelimiters on_sym":{"type":"method","name":"on_sym","children":[],"call":[" process "]}," RuboCop Cop Style PercentLiteralDelimiters on_str":{"type":"method","name":"on_str","children":[],"call":[" process "]}," RuboCop Cop Style PercentLiteralDelimiters on_regexp":{"type":"method","name":"on_regexp","children":[],"call":[" process "]}," RuboCop Cop Style PercentLiteralDelimiters on_array":{"type":"method","name":"on_array","children":[],"call":[" process "]}," RuboCop Cop Style ParenthesesAroundCondition autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector remove ","node loc end ","node loc ","node loc begin "," lambda ","ParenthesesCorrector  correct "]}," RuboCop Cop Style ParenthesesAroundCondition message":{"type":"method","name":"message","children":[],"call":["kw == ","node loc keyword source ","node loc keyword ","node loc ","node keyword ","node parent keyword ","node parent ","node loc keyword source  == ","node keyword  == ","node parent keyword  == "]}," RuboCop Cop Style ParenthesesAroundCondition parens_required?":{"type":"method","name":"parens_required?","children":[],"call":["exp source [] start_with? ","kw source + ","kw source ","exp source [] ","exp source ","kw begin_pos - ","exp begin_pos ","kw begin_pos ","node loc keyword ","node loc ","node loc expression ","node loc expression  source [] start_with? ","node loc keyword  source + ","node loc keyword  source ","node loc expression  source [] ","node loc expression  source ","node loc keyword  begin_pos - ","node loc expression  begin_pos ","node loc keyword  begin_pos ","node loc node loc expression ression "]}," RuboCop Cop Style ParenthesesAroundCondition modifier_op?":{"type":"method","name":"modifier_op?","children":[],"call":["node loc end nil? ","node loc end ","node loc ","(sym :if) include? ","node type ","node type == "," ternary_op? "," ternary? ","node rescue_type? ","node modifier_form? ","MODIFIER_NODES  include? ","node ternary? ","node if_type? ","node basic_conditional? "]}," RuboCop Cop Style ParenthesesAroundCondition process_control_op":{"type":"method","name":"process_control_op","children":[],"call":[" add_offense "," message "," safe_assignment_allowed? "," safe_assignment? "," parens_required? "," modifier_op? ","cond children first ","cond children ","cond type == ","cond type ","node children first ","node children ","cond begin_type? "," empty_condition? ","cond children empty? ","node condition "," control_op_condition "," parens_allowed? ","ParenthesesCorrector  correct "," semicolon_separated_expressions? ","  message  ","node condition  children first ","node condition  children ","node condition  type == ","node condition  type ","node condition  begin_type? "," empty_node condition ition? ","node condition  children empty? ","node node condition ition "," control_op_node condition ition "]}," RuboCop Cop Style ParenthesesAroundCondition on_until":{"type":"method","name":"on_until","children":[],"call":[" process_control_op "]}," RuboCop Cop Style ParenthesesAroundCondition on_while":{"type":"method","name":"on_while","children":[],"call":[" process_control_op "]}," RuboCop Cop Style ParenthesesAroundCondition on_if":{"type":"method","name":"on_if","children":[],"call":[" process_control_op "," ternary_op? "," ternary? ","node ternary? "]}," RuboCop Cop Style ParameterLists count_keyword_args?":{"type":"method","name":"count_keyword_args?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style ParameterLists max_params":{"type":"method","name":"max_params","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style ParameterLists args_count":{"type":"method","name":"args_count","children":[],"call":["(send\n  (send\n    (lvar :node) :children) :reject) size ","a type == ","a type ","node children reject ","node children ","node children size "," count_keyword_args? "]}," RuboCop Cop Style ParameterLists on_args":{"type":"method","name":"on_args","children":[],"call":[" max= "," add_offense "," format "," max_params ","count > "," args_count "," args_count  > "," args_ args_count  "]}," RuboCop Cop Style OpMethod on_def":{"type":"method","name":"on_def","children":[],"call":[" add_offense "," format ","args children [] ","args children ","TARGET_ARGS  include? ! ","TARGET_ARGS  include? ","args children size == ","args children size ","BLACKLISTED  include? ! ","BLACKLISTED  include? ","name !~ "," op_method? ","args children one? ","args children first "," op_method_candidate? "]}," RuboCop Cop Style OneLineConditional error_message":{"type":"method","name":"error_message","children":[],"call":[]}," RuboCop Cop Style OneLineConditional offending_line":{"type":"method","name":"offending_line","children":[],"call":["node loc expression line ","node loc expression ","node loc ","node loc expression source =~ ","node loc expression source "]}," RuboCop Cop Style NumericLiterals min_digits":{"type":"method","name":"min_digits","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style NumericLiterals integer_part":{"type":"method","name":"integer_part","children":[],"call":["node loc expression source sub split first ","node loc expression source sub split ","node loc expression source sub ","node loc expression source ","node loc expression ","node loc ","node source sub split first ","node source sub split ","node source sub ","node source "]}," RuboCop Cop Style NumericLiterals autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","node loc expression ","node loc ","formatted_int insert ","int < ","int abs to_s reverse gsub reverse ","int abs to_s reverse gsub ","int abs to_s reverse ","int abs to_s ","int abs ","node loc expression source to_i ","node loc expression source "," lambda "," format_number ","node source_range ","int abs to_s reverse gsub reverse  insert ","formatted_node loc expression source to_i  insert ","node loc expression source to_i  < ","node loc expression source to_i  abs to_s reverse gsub reverse ","node loc expression source to_i  abs to_s reverse gsub ","node loc expression source to_i  abs to_s reverse ","node loc expression source to_i  abs to_s ","node loc expression source to_i  abs "]}," RuboCop Cop Style NumericLiterals check":{"type":"method","name":"check","children":[],"call":[" config_to_allow_offenses= "," add_offense "," max= ","int size + ","int size ","int size >= "," min_digits ","int start_with? "," integer_part "," short_group_regex "," register_offense "," min_digits= "," allowed_numbers include? "," allowed_numbers "," matches_allowed_pattern? "," integer_part  size + "," integer_part  size "," integer_part  size >= "," integer_part  start_with? ","  integer_part eger_part "]}," RuboCop Cop Style NumericLiterals parameter_name":{"type":"method","name":"parameter_name","children":[],"call":[]}," RuboCop Cop Style NumericLiterals on_float":{"type":"method","name":"on_float","children":[],"call":[" check "]}," RuboCop Cop Style NumericLiterals on_int":{"type":"method","name":"on_int","children":[],"call":[" check "]}," RuboCop Cop Style Not correction":{"type":"method","name":"correction","children":[],"call":["corrector replace ","node loc expression ","node loc ","old_source sub ","node loc expression source "," lambda ","node source_range ","node source sub ","node source ","node loc expression source  sub "]}," RuboCop Cop Style Not on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","node loc selector is? ","node loc selector ","node loc ","method_name == ","args empty? ","node keyword_not? ","node prefix_not? "," correct_without_parens "," correct_with_parens "," requires_parens? ","node receiver "," correct_opposite_method "," opposite_method? "," range_with_surrounding_space ","  range_with_surrounding_space _with_surrounding_space "]}," RuboCop Cop Style NonNilCheck autocorrect_non_nil":{"type":"method","name":"autocorrect_non_nil","children":[],"call":["@corrections << ","corrector replace ","node loc expression ","node loc ","receiver loc expression source ","receiver loc expression ","receiver loc "," lambda ","node source_range ","receiver source ","inner_node receiver source ","inner_node receiver "]}," RuboCop Cop Style NonNilCheck autocorrect_comparison":{"type":"method","name":"autocorrect_comparison","children":[],"call":["@corrections << ","corrector replace ","expr source sub ","expr source "," include_semantic_changes? ","node loc expression ","node loc "," lambda ","expr == ","expr sub ","node loc expression source ","node source_range ","node source ","node loc expression  source sub ","node loc expression source  source sub ","node source  source sub ","node loc expression  source ","node loc expression source  source ","node source  source ","node loc node loc expression ession ","node loc node loc expression source ession ","node loc node source ession ","node loc expression  == ","node loc expression source  == ","node source  == ","node loc expression  sub ","node loc expression source  sub ","node source  sub ","node loc node loc expression ession source ","node loc node loc expression source ession source ","node loc node source ession source "]}," RuboCop Cop Style NonNilCheck autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" autocorrect_non_nil ","method == "," autocorrect_comparison "," autocorrect_unless_nil ","node receiver ","node method_name "]}," RuboCop Cop Style NonNilCheck nil_check?":{"type":"method","name":"nil_check?","children":[],"call":["method == ","node type == ","node type ","node send_type? "]}," RuboCop Cop Style NonNilCheck process_method":{"type":"method","name":"process_method","children":[],"call":[" ignore_node ","body children last ","body children ","body type == ","body type ","body type != ","name to_s end_with? ","name to_s "]}," RuboCop Cop Style NonNilCheck include_semantic_changes?":{"type":"method","name":"include_semantic_changes?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style NonNilCheck on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," nil_check? ","method == "," include_semantic_changes? ","args == ","(sym :!=) include? "," ignored_node? "," not_and_nil_check? "," not_equal_to_nil? "," unless_and_nil_check? "," autocorrect "," message "," find_offense_node "," register_offense? "," nil_comparison_style == "," nil_comparison_style "," include_semantic_changes? ! ","  message  "," find_ find_offense_node  "]}," RuboCop Cop Style NonNilCheck on_defs":{"type":"method","name":"on_defs","children":[],"call":[" process_method "]}," RuboCop Cop Style NonNilCheck on_def":{"type":"method","name":"on_def","children":[],"call":[" process_method "," ignore_node ","body children last ","body children ","body begin_type? ","node predicate_method? ","node body ","node body  children last ","node body  children ","node body  begin_type? ","node node body  "]}," RuboCop Cop Style NilComparison autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","expr source sub ","expr source ","node loc expression ","node loc "," lambda ","node source_range ","node source sub ","node source "," prefer_comparison? ","node loc expression  source sub ","node loc expression  source ","node loc node loc expression ession "]}," RuboCop Cop Style NilComparison on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","args == ","OPS  include? "," nil_comparison? "," style_check? ","corrector replace ","node source sub ","node source "," prefer_comparison? ","node loc selector ","node loc ","corrector wrap ","parent method? ","parent respond_to? ","node parent ","node parent  method? ","node parent  respond_to? ","node node parent  "]}," RuboCop Cop Style Next simple_if_without_break?":{"type":"method","name":"simple_if_without_break?","children":[],"call":["(or\n  (lvar :return_method)\n  (lvar :return_body)) type != ","(or\n  (lvar :return_method)\n  (lvar :return_body)) type "," modifier_if? "," style == "," style ","body type == ","body type "," if_else? "," ternary_op? ","(sym :break) include? ! ","(sym :break) include? ","(or\n  (lvar :if_body)\n  (lvar :else_body)) type ","node type == ","node type ","if_body type "," min_body_length? ! "," min_body_length? "," modifier_if? ! ","EXIT_TYPES  include? ! ","EXIT_TYPES  include? ","node if_type? "," ternary? "," exit_body_type? ! "," exit_body_type? "," if_without_else? "," allowed_modifier_if? "," if_else_children? "]}," RuboCop Cop Style Next ends_with_condition?":{"type":"method","name":"ends_with_condition?","children":[],"call":[" simple_if_without_break? ","body children last ","body children ","body type == ","body type ","body begin_type? "]}," RuboCop Cop Style Next method?":{"type":"method","name":"method?","children":[],"call":["(str \"\\\\Aeach_\") match ","METHODS  include? "]}," RuboCop Cop Style Next on_for":{"type":"method","name":"on_for","children":[],"call":[" add_offense "," ends_with_condition? "," offense_location "," offense_node ","  offense_node  "]}," RuboCop Cop Style Next on_while":{"type":"method","name":"on_while","children":[],"call":[" add_offense "," ends_with_condition? "," offense_location "," offense_node ","node body "," check ","  offense_node  "]}," RuboCop Cop Style Next on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," ends_with_condition? "," method? ","body nil? ","method type == ","method type "," enumerator? ","block_owner type == ","block_owner type "," offense_location "," offense_node ","block_owner send_type? "," check ","node send_node enumerator_method? ","node send_node ","node send_node send_type? ","  offense_node  "]}," RuboCop Cop Style NestedTernaryOperator on_if":{"type":"method","name":"on_if","children":[],"call":[" add_offense ","c loc respond_to? ","c loc "," on_node ","node children each ","node children ","loc respond_to? ","node loc ","nested_if_node loc respond_to? ","nested_if_node loc ","node each_descendant "," ternary? ","node each_descendant select each ","node each_descendant select ","node ternary? ","corrector replace ","(str \"if \") chop ","if_node else_branch source ","if_node else_branch "," remove_parentheses ","if_node if_branch source ","if_node if_branch ","if_node condition source ","if_node condition "," if_node "," ignore_node "," autocorrect "," part_of_ignored_node? ","c node loc  respond_to? ","c node loc  ","node loc  respond_to? ","node node loc  ","nested_if_node node loc  respond_to? ","nested_ if_node  loc respond_to? ","nested_if_node node loc  ","nested_ if_node  loc "," if_node  else_branch source "," if_node  else_branch "," if_node  if_branch source "," if_node  if_branch "," if_node  condition source "," if_node  condition ","  if_node  "]}," RuboCop Cop Style NegatedWhile autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","pos_condition loc expression source ","pos_condition loc expression ","pos_condition loc ","condition loc expression ","condition loc ","node type == ","node type ","node loc keyword ","node loc "," lambda ","condition type == ","condition type ","pos_condition source ","condition source_range ","node while_type? ","condition begin_type? "," negative_conditional_corrector ","ConditionCorrector  correct_negative_condition "]}," RuboCop Cop Style NegatedWhile message":{"type":"method","name":"message","children":[],"call":[" format ","node type == ","node type ","node while_type? ","node keyword ","node inverse_keyword "]}," RuboCop Cop Style NegatedWhile on_until":{"type":"method","name":"on_until","children":[],"call":[" check "," check_negative_conditional "]}," RuboCop Cop Style NegatedWhile on_while":{"type":"method","name":"on_while","children":[],"call":[" check "," check_negative_conditional ","ConditionCorrector  correct_negative_condition "," format ","node keyword ","node inverse_keyword "]}," RuboCop Cop Style NegatedIf autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","pos_condition loc expression source ","pos_condition loc expression ","pos_condition loc ","condition loc expression ","condition loc ","node loc keyword is? ","node loc keyword ","node loc ","condition children first ","condition children ","condition type == ","condition type "," lambda ","pos_condition source ","condition source_range ","condition begin_type? "," negative_conditional_corrector ","ConditionCorrector  correct_negative_condition ","pos_condition children first  loc expression source ","pos_condition children first  loc expression ","pos_condition children first  loc ","condition children first  loc expression ","condition children first  loc ","condition children first  children first ","condition children first  children ","condition children first  type == ","condition children first  type ","pos_condition children first  source ","condition children first  source_range ","condition children first  begin_type? "," negative_condition children first al_corrector ","ConditionCorrector  correct_negative_condition children first  "]}," RuboCop Cop Style NegatedIf message":{"type":"method","name":"message","children":[],"call":[" format ","node loc keyword is? ","node loc keyword ","node loc ","node keyword ","node inverse_keyword "]}," RuboCop Cop Style NegatedIf on_if":{"type":"method","name":"on_if","children":[],"call":[" check ","node loc keyword is? ","node loc keyword ","node loc ","node loc respond_to? "," check_negative_conditional ","node elsif? ","node ternary? ","node modifier_form? ! ","node modifier_form? "," style == "," style "," correct_style? ","node unless? ","ConditionCorrector  correct_negative_condition "," message ","  message  "]}," RuboCop Cop Style MultilineTernaryOperator on_if":{"type":"method","name":"on_if","children":[],"call":[" add_offense ","loc line != ","loc colon line ","loc colon ","loc line ","loc respond_to? ","node loc ","else_branch loc line ","else_branch loc ","node loc line == ","node loc line "," ternary? ","node multiline? ","node ternary? ","corrector replace ","(str \"if \") chop ","node else_branch source ","node else_branch ","node if_branch source ","node if_branch ","node condition source ","node condition ","node parent return_type? ! ","node parent return_type? ","node parent "," offense? "," replacement "," enforce_single_line_ternary_operator? "," autocorrect ","node loc  line != ","node loc  colon line ","node loc  colon ","node loc  line ","node loc  respond_to? ","node node loc  ","else_branch node loc  line ","else_branch node loc  ","node node loc  line == ","node node loc  line "]}," RuboCop Cop Style MultilineIfThen error_message":{"type":"method","name":"error_message","children":[],"call":["node loc keyword source ","node loc keyword ","node loc "]}," RuboCop Cop Style MultilineIfThen end_position":{"type":"method","name":"end_position","children":[],"call":["conditional_node loc expression end end_pos ","conditional_node loc expression end ","conditional_node loc expression ","conditional_node loc "]}," RuboCop Cop Style MultilineIfThen offending_line":{"type":"method","name":"offending_line","children":[],"call":["node loc expression begin line ","node loc expression begin ","node loc expression ","node loc ","right_after_cond source =~ ","right_after_cond source ","Parser Source Range  new ","next_thing begin_pos "," end_position ","next_thing source_buffer ","node loc end ","else_clause loc expression begin ","else_clause loc expression ","else_clause loc ","body loc expression begin ","body loc expression ","body loc ","Parser Source Range  new  source =~ ","Parser Source Range  new  source ","body loc expression begin  begin_pos ","body loc expression begin  source_buffer "]}," RuboCop Cop Style MultilineBlockChain on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense ","Parser Source Range  new ","method loc expression end_pos ","method loc expression ","method loc ","end_kw_loc begin_pos ","end_kw_loc source_buffer ","do_kw_loc line != ","end_kw_loc line ","do_kw_loc line ","receiver loc end ","receiver loc ","receiver loc begin ","receiver type == ","receiver type "," on_node ","do_kw_loc line == ","method each_node ","method source_range end_pos ","method source_range "," range_between ","receiver block_type? ","node send_node source_range end_pos ","node send_node source_range ","node send_node ","receiver loc end begin_pos ","receiver multiline? ","send_node receiver ","node send_node each_node ","receiver loc end  begin_pos ","receiver loc end  source_buffer ","receiver loc begin  line != ","receiver loc end  line ","receiver loc begin  line ","send_node receiver  loc end ","send_node receiver  loc ","send_node receiver  loc begin ","send_node receiver  type == ","send_node receiver  type ","receiver loc begin  line == ","method source_Parser Source Range  new  end_pos ","method source_ range_between  end_pos ","method source_Parser Source Range  new  ","method source_ range_between  "," Parser Source Range  new _between ","  range_between _between ","send_node receiver  block_type? ","node send_node source_Parser Source Range  new  end_pos ","node send_node source_ range_between  end_pos ","node send_node source_Parser Source Range  new  ","node send_node source_ range_between  ","send_node receiver  loc end begin_pos ","send_node receiver  multiline? ","send_node send_node receiver  "]}," RuboCop Cop Style ModuleFunction on_module":{"type":"method","name":"on_module","children":[],"call":[" add_offense ","body_node == ","body children each ","body children ","body type == ","body type "," style == "," style "," each_wrong_style ","body begin_type? ","node body children ","node body ","node body begin_type? ","corrector replace "," extend_self_node? "]}," RuboCop Cop Style MethodName message":{"type":"method","name":"message","children":[],"call":[" format "]}," RuboCop Cop Style MethodName name_of_singleton_method":{"type":"method","name":"name_of_singleton_method","children":[],"call":[" after_dot ","def + + ","Regexp  escape ","scope loc expression source ","scope loc expression ","scope loc ","method_name length "]}," RuboCop Cop Style MethodName name_of_instance_method":{"type":"method","name":"name_of_instance_method","children":[],"call":["Parser Source Range  new ","begin_pos + ","method_name length ","expr source_buffer ","expr begin_pos + + ","space length ","expr begin_pos + ","def length ","expr begin_pos ","match captures ","(str \"^def(\\\\s+)([\\\\w]+[!?=]?\\\\b)\") match ","expr source ","def_node loc expression ","def_node loc ","expr begin_pos + +  + ","def_node loc expression  source_buffer ","expr expr begin_pos + +  + + ","def_node loc expression  begin_pos + + ","expr expr begin_pos + +  + ","def_node loc expression  begin_pos + ","expr expr begin_pos + +  ","def_node loc expression  begin_pos ","(str \"^def(\\s+)([\\w]+[!?=]?\\b)\") match  captures ","(str \"^def(\\\\s+)([\\\\w]+[!?=]?\\\\b)\") (str \"^def(\\s+)([\\w]+[!?=]?\\b)\") match  ","def_node loc expression  source ","def_node loc def_node loc expression ession "]}," RuboCop Cop Style MethodName on_defs":{"type":"method","name":"on_defs","children":[],"call":[" check "," name_of_singleton_method "," check_name ","node loc name ","node loc "," sanitize_name "]}," RuboCop Cop Style MethodName on_def":{"type":"method","name":"on_def","children":[],"call":[" check "," name_of_instance_method "," check_name ","node loc name ","node loc "," sanitize_name "]}," RuboCop Cop Style MethodLength code_length":{"type":"method","name":"code_length","children":[],"call":["lines size "," irrelevant_line ","lines reject! ","node loc expression source lines to_a [] ","node loc expression source lines to_a ","node loc expression source lines ","node loc expression source ","node loc expression ","node loc "]}," RuboCop Cop Style MethodLength message":{"type":"method","name":"message","children":[],"call":[]}," RuboCop Cop Style MethodDefParentheses parentheses?":{"type":"method","name":"parentheses?","children":[],"call":["args loc begin ","args loc "]}," RuboCop Cop Style MethodDefParentheses arguments?":{"type":"method","name":"arguments?","children":[],"call":["args children size > ","args children size ","args children ","args children empty? ! ","args children empty? "]}," RuboCop Cop Style MethodDefParentheses args_node":{"type":"method","name":"args_node","children":[],"call":["def_node type == ","def_node type ","def_node def_type? "]}," RuboCop Cop Style MethodDefParentheses autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector remove ","node loc end ","node loc ","corrector replace ","node loc begin "," style == "," style ","corrector insert_after ","Parser Source Range  new ","args_expr begin_pos ","args_with_space begin_pos ","args_expr source_buffer "," range_with_surrounding_space "," args_node loc expression "," args_node loc "," args_node "," lambda ","node args_type? "," args_node source_range "," range_between ","node arguments source_range ","node arguments "," correct_definition "," correct_arguments "," args_node loc expression  begin_pos "," args_node source_range  begin_pos ","node arguments source_range  begin_pos "," range_with_surrounding_space  begin_pos "," args_node loc expression  source_buffer "," args_node source_range  source_buffer ","node arguments source_range  source_buffer "]}," RuboCop Cop Style MethodDefParentheses check":{"type":"method","name":"check","children":[],"call":[" correct_style_detected "," opposite_style_detected "," add_offense "," parentheses? ","args loc expression ","args loc "," parentheses? ! "," arguments? "," style == "," style "]}," RuboCop Cop Style MethodCalledOnDoEndBlock on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","Parser Source Range  new ","node loc expression end_pos ","node loc expression ","node loc ","receiver loc end begin_pos ","receiver loc end ","receiver loc ","receiver loc end source_buffer ","receiver loc end is? ","receiver type == ","receiver type "," ignored_node? ","node source_range end_pos ","node source_range "," range_between ","receiver block_type? ","node receiver ","node receiver  loc end begin_pos ","node receiver  loc end ","node receiver  loc ","node receiver  loc end source_buffer ","node receiver  loc end is? ","node receiver  type == ","node receiver  type ","node source_Parser Source Range  new  end_pos ","node source_ range_between  end_pos ","node source_Parser Source Range  new  ","node source_ range_between  "," Parser Source Range  new _between ","  range_between _between ","node receiver  block_type? ","node node receiver  "]}," RuboCop Cop Style MethodCalledOnDoEndBlock on_block":{"type":"method","name":"on_block","children":[],"call":[" ignore_node ","node send_node "]}," RuboCop Cop Style MethodCallParentheses autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector remove ","node loc end ","node loc ","node loc begin "," lambda ","(const\n  (const nil :EmptyLiteral) :HASH_NODE) include? "," config for_cop [] "," config for_cop "," config "]}," RuboCop Cop Style MethodCallParentheses on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","node loc begin ","node loc ","args empty? ","method_name =~ "," same_name_assignment? "," lambda_call_syntax? ","node keyword_not? "]}," RuboCop Cop Style LineLength max":{"type":"method","name":"max","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style LineLength investigate":{"type":"method","name":"investigate","children":[],"call":[" max= ","line length "," add_offense "," source_range ","line length - "," max ","processed_source [] ","processed_source buffer "," format ","line length > ","processed_source lines each_with_index ","processed_source lines ","index + ","uri_range end ","uri_range begin < ","uri_range begin "," allowed_uri_position? "," find_excessive_uri_range "," allow_uri? "," source_ source_range  ","uri_ source_range  end "," find_excessive_uri_range  end ","uri_ source_range  begin < "," find_excessive_uri_range  begin < ","uri_ source_range  begin "," find_excessive_uri_range  begin "," find_excessive_uri_ source_range  "," find_excessive_ find_excessive_uri_range  "]}," RuboCop Cop Style LineEndConcatenation root_node_is_string_type?":{"type":"method","name":"root_node_is_string_type?","children":[],"call":[" string_type? "," root_node_is_string_type? "," concat? ","node type == ","node type "]}," RuboCop Cop Style LineEndConcatenation final_node_is_string_type?":{"type":"method","name":"final_node_is_string_type?","children":[],"call":[" string_type? "," final_node_is_string_type? "," concat? ","node type == ","node type "]}," RuboCop Cop Style LineEndConcatenation string_type?":{"type":"method","name":"string_type?","children":[],"call":["(str \"'\") include? ","node loc begin source ","node loc begin ","node loc ","node loc respond_to? ","(sym :str) include? ","node type ","(send\n  (send\n    (lvar :node) :children) :map) all? "," string_type? ","node children map ","node children ","node children any? "]}," RuboCop Cop Style LineEndConcatenation concatenator_at_line_end?":{"type":"method","name":"concatenator_at_line_end?","children":[],"call":["expression =~ "]}," RuboCop Cop Style LineEndConcatenation offending_node?":{"type":"method","name":"offending_node?","children":[],"call":[" concatenator_at_line_end? ","node loc expression source ","node loc expression ","node loc "," root_node_is_string_type? "," final_node_is_string_type? "," concat? ","node loc node loc expression source  source ","node loc node loc expression source  "]}," RuboCop Cop Style LineEndConcatenation concat?":{"type":"method","name":"concat?","children":[],"call":["(sym :+) include? "]}," RuboCop Cop Style LineEndConcatenation autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","node loc selector ","node loc "," lambda "," range_with_surrounding_space ","with_newline ! ","one_more_char source end_with? ","one_more_char source ","operator_range resize ","operator_range size + ","operator_range size ","operator_range resize  source end_with? ","operator_range resize  source "," range_with_surrounding_space  resize "," range_with_surrounding_space  size + "," range_with_surrounding_space  size "]}," RuboCop Cop Style LineEndConcatenation on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," offending_node? "]}," RuboCop Cop Style LeadingCommentSpace autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector insert_after "," lambda ","Parser Source Range  new ","b + ","expr source_buffer ","expr begin_pos ","comment loc expression ","comment loc "," range_between "," lamexpr begin_pos da ","expr begin_pos  + ","expr source_expr begin_pos uffer ","comment loc expression  source_buffer ","expr expr begin_pos egin_pos ","comment loc expression  begin_pos ","comment loc comment loc expression ession "," range_expr begin_pos etween "]}," RuboCop Cop Style LeadingCommentSpace investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense ","comment loc line == ","comment loc line ","comment loc ","comment text start_with? ","comment text ","comment text =~ ","processed_source comments each ","processed_source comments "," config_ru? ","processed_source buffer name ","processed_source buffer "]}," RuboCop Cop Style LambdaCall message":{"type":"method","name":"message","children":[],"call":[" style == "," style "," explicit_style? "]}," RuboCop Cop Style LambdaCall autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector remove ","node loc selector ","node loc ","corrector replace ","expr source sub ","expr source ","receiver_node loc expression source ","receiver_node loc expression ","receiver_node loc ","node loc expression "," style == "," style "," lambda ","node source_range ","node source sub ","node source ","receiver_node source ","node receiver source ","node receiver "," explicit_style? "," add_parentheses ","node parenthesized? ","node loc expression  source sub ","node loc expression  source ","receiver_node loc expression source _node loc expression source ","receiver_node source _node loc expression source ","node receiver source _node loc expression source ","receiver_node loc node loc expression ession source ","receiver_node loc expression source _node loc expression ","receiver_node source _node loc expression ","node receiver source _node loc expression ","receiver_node loc node loc expression ession ","receiver_node loc expression source _node loc ","receiver_node source _node loc ","node receiver source _node loc ","node loc node loc expression ession ","receiver_node loc expression source _node source ","receiver_node source _node source ","node receiver source _node source ","node receiver_node loc expression source  source ","node receiver_node source  source ","node node receiver source  source ","node receiver_node loc expression source  ","node receiver_node source  ","node node receiver source  "]}," RuboCop Cop Style LambdaCall offense?":{"type":"method","name":"offense?","children":[],"call":["node loc selector ","node loc "," style == "," style ","node loc selector nil? ","node implicit_call? ! ","node implicit_call? "," implicit_style? "," explicit_style? "]}," RuboCop Cop Style LambdaCall on_send":{"type":"method","name":"on_send","children":[],"call":[" correct_style_detected "," opposite_style_detected "," add_offense "," offense? ","selector == ","node method? ","node receiver "," autocorrect ","corrector replace "," format ","node source "," prefer "," ignore_node "," part_of_ignored_node? ","  prefer  "]}," RuboCop Cop Style Lambda lambda_length":{"type":"method","name":"lambda_length","children":[],"call":["end_line - ","block_node loc end line ","block_node loc end ","block_node loc ","block_node loc begin line ","block_node loc begin ","end_line - + ","block_node loc end line  - ","block_node loc end line  - + "]}," RuboCop Cop Style Lambda on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense ","lambda_length > ","selector == ","lambda_length == ","selector != "," lambda_length ","block_method loc selector source ","block_method loc selector ","block_method loc ","block_method == "," add_offense_for_single_line ","block_method loc expression ","length > ","length == ","block_method source_range ","block_method source "," check "," message "," offending_selector? "," lambda_node? ","node send_node source_range ","node send_node ","node send_node source ","node lambda? ","LambdaLiteralToMethodCorrector  new call ","LambdaLiteralToMethodCorrector  new "," autocorrect_method_to_literal ","node send_node source == ","node send_node lambda_literal? "," lambda_length  > ","lambda_ lambda_length  > ","block_method loc selector source  == ","block_method source  == ","node send_node source  == "," lambda_length  == ","lambda_ lambda_length  == ","block_method loc selector source  != ","block_method source  != ","node send_node source  != ","  lambda_length  "," lambda_ lambda_length  ","block_method loc block_method loc selector source  source ","block_method loc block_method source  source ","block_method loc node send_node source  source ","block_method loc block_method loc selector source  ","block_method loc block_method source  ","block_method loc node send_node source  "," offending_block_method loc selector source ? "," offending_block_method source ? "," offending_node send_node source ? "]}," RuboCop Cop Style InlineComment investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense ","comment inline? ","processed_source comments each ","processed_source comments "," comment_line? ","processed_source [] ","comment loc line - ","comment loc line ","comment loc ","processed_source each_comment ","comment text match ","comment text ","comment text match? "]}," RuboCop Cop Style IndentationWidth starts_with_access_modifier?":{"type":"method","name":"starts_with_access_modifier?","children":[],"call":["AccessModifierIndentation  modifier_node? ","body_node children first ","body_node children ","body_node type == ","body_node type "," modifier_node? ","body_node begin_type? "]}," RuboCop Cop Style IndentationWidth check_indentation":{"type":"method","name":"check_indentation","children":[],"call":[" add_offense "," format ","Parser Source Range  new ","pos end ","pos begin ","expr source_buffer ","indentation >= ","expr begin_pos - ","expr begin_pos ","body_node loc expression ","body_node loc ","body_node children first ","body_node children ","body_node type == ","body_node type ","@column_delta == ","CORRECT_INDENTATION  - ","body_node loc column - ","base_loc column ","body_node loc column ","body_node loc column == ","body_node loc expression source_line =~ ","body_node loc expression source_line "," starts_with_access_modifier? ","body_node loc line == ","base_loc line ","body_node loc line ","(and\n  (send\n    (send\n      (lvar :body_node) :loc) :begin)\n  (send\n    (send\n      (send\n        (lvar :body_node) :loc) :begin) :is?\n    (str \"(\"))) ! ","body_node loc begin is? ","body_node loc begin "," configured_indentation_width "," configured_indentation_width - "," indentation_to_check? "," offending_range ","style == "," other_offense_in_same_range? "," autocorrect? "," effective_column "," offense ","@column_delta zero? "," foParser Source Range  new mat ","PaParser Source Range  new seParser Source Range  new  SouParser Source Range  new ce Range  new ","expParser Source Range  new  souParser Source Range  new ce_buffeParser Source Range  new  ","body_node loc expression  source_buffer ","body_node loc column -  >= ","expParser Source Range  new  begin_pos - ","body_node loc expression  begin_pos - ","expParser Source Range  new  begin_pos ","body_node loc expression  begin_pos ","body_node loc expParser Source Range  new ession ","body_node loc body_node loc expression ession ","body_node children first  loc expression ","body_node children first  loc ","body_node childParser Source Range  new en fiParser Source Range  new st ","body_node children first  children first ","body_node childParser Source Range  new en ","body_node children first  children ","body_node children first  type == ","body_node children first  type ","CORRECT_INDENTATION  -  == "," configured_indentation_width -  == ","body_node children first  loc column - ","body_node children first  loc column ","body_node children first  loc column == ","body_node loc expParser Source Range  new ession souParser Source Range  new ce_line =~ ","body_node loc body_node loc expression ession source_line =~ ","body_node children first  loc expression source_line =~ ","body_node loc expParser Source Range  new ession souParser Source Range  new ce_line ","body_node loc body_node loc expression ession source_line ","body_node children first  loc expression source_line "," staParser Source Range  new ts_with_access_modifieParser Source Range  new ? ","body_node children first  loc line == ","body_node children first  loc line ","(and\n  (send\n    (send\n      (lvaParser Source Range  new  :body_node) :loc) :begin)\n  (send\n    (send\n      (send\n        (lvaParser Source Range  new  :body_node) :loc) :begin) :is?\n    (stParser Source Range  new  \"(\"))) ! ","(and\n  (send\n    (send\n      (lvar :body_node children first ) :loc) :begin)\n  (send\n    (send\n      (send\n        (lvar :body_node children first ) :loc) :begin) :is?\n    (str \"(\"))) ! ","body_node children first  loc begin is? ","body_node children first  loc begin "," configuParser Source Range  new ed_indentation_width "," configured_body_node loc column - _width "," configuParser Source Range  new ed_indentation_width - "," configured_body_node loc column - _width - "," body_node loc column - _to_check? "," offending_Parser Source Range  new ange "," otheParser Source Range  new _offense_in_same_Parser Source Range  new ange? "," autocoParser Source Range  new Parser Source Range  new ect? ","@column_delta zeParser Source Range  new o? ","CORRECT_INDENTATION  -  zero? "," configured_indentation_width -  zero? "]}," RuboCop Cop Style IndentationWidth check_if":{"type":"method","name":"check_if","children":[],"call":[" check_indentation ","node loc else ","node loc "," check_if "," elsif? "," ternary_op? "," ternary? ","else_clause elsif? ","else_clause if_type? ","node ternary? "]}," RuboCop Cop Style IndentationWidth check_assignment":{"type":"method","name":"check_assignment","children":[],"call":[" ignore_node "," on_while "," on_if ","rhs type ","style == ","end_config [] "," config for_cop "," config "," first_part_of_call_chain "," variable_alignment? ","style to_sym ","node loc "," first_part_of_call_chain  type ","end_config []  == "," config for_cop  [] ","end_config []  to_sym "]}," RuboCop Cop Style IndentationWidth begins_its_line?":{"type":"method","name":"begins_its_line?","children":[],"call":["source_before_end =~ ","range source_buffer source [] ","range begin_pos ","range source_buffer source ","range source_buffer ","range source_buffer source []  =~ "]}," RuboCop Cop Style IndentationWidth on_if":{"type":"method","name":"on_if","children":[],"call":[" check_if ","base loc ","node loc keyword source ","node loc keyword ","node loc "," modifier_if? "," ternary_op? "," ignored_node? "," if_node_parts "," ternary? ","node else_branch ","node body ","node modifier_form? ","node ternary? ","node body ! "]}," RuboCop Cop Style IndentationWidth on_case":{"type":"method","name":"on_case","children":[],"call":[" check_indentation ","latest_when loc keyword ","latest_when loc ","b loc keyword ","b loc ","b type == ","b type ","branches compact each ","branches compact ","b children last ","b children ","b when_type? ","case_node else_branch ","case_node when_branches last loc keyword ","case_node when_branches last loc ","case_node when_branches last ","case_node when_branches ","when_node body ","when_node loc keyword ","when_node loc ","case_node each_when ","when_node b children last  "]}," RuboCop Cop Style IndentationWidth on_while":{"type":"method","name":"on_while","children":[],"call":[" check_indentation ","base loc ","node loc keyword begin_pos == ","node loc expression begin_pos ","node loc expression ","node loc ","node loc keyword begin_pos ","node loc keyword "," ignored_node? ","node source_range begin_pos ","node source_range ","node body ","node single_line_condition? "]}," RuboCop Cop Style IndentationWidth on_for":{"type":"method","name":"on_for","children":[],"call":[" check_indentation ","node loc keyword ","node loc ","node body "]}," RuboCop Cop Style IndentationWidth check":{"type":"method","name":"check","children":[],"call":[" check_indentation ","node loc keyword ","node loc "," ignored_node? "]}," RuboCop Cop Style IndentationWidth on_send":{"type":"method","name":"on_send","children":[],"call":[" ignore_node ","args first "," check_indentation ","node loc expression ","node loc "," visibility_and_def_on_same_line? ","base loc expression ","base loc ","style == ","def_end_config [] "," config for_cop "," config "," modifier_and_def_on_same_line? ","base source_range ","node first_argument ","args first  loc expression ","node first_argument  loc expression ","args first  loc ","node first_argument  loc ","def_end_config []  == "," config for_cop  [] ","args first  source_range ","node first_argument  source_range "]}," RuboCop Cop Style IndentationWidth on_class":{"type":"method","name":"on_class","children":[],"call":[" check_indentation ","node loc keyword ","node loc ","members each "," check_members "]}," RuboCop Cop Style IndentationWidth on_module":{"type":"method","name":"on_module","children":[],"call":[" check_indentation ","node loc keyword ","node loc ","members each "," check_members "]}," RuboCop Cop Style IndentationWidth on_block":{"type":"method","name":"on_block","children":[],"call":[" check_indentation ","loc end "," begins_its_line? ","node loc "," check_members "," indentation_consistency_style == "," indentation_consistency_style ","node loc  end ","node node loc  "]}," RuboCop Cop Style IndentationWidth on_kwbegin":{"type":"method","name":"on_kwbegin","children":[],"call":[" check_indentation ","node children first ","node children ","node loc end ","node loc "," begins_its_line? "]}," RuboCop Cop Style IndentationConsistency check":{"type":"method","name":"check","children":[],"call":[" check_alignment ","AccessModifierIndentation  modifier_node? ","node children reject ","node children "," modifier_node? ","children_to_check each ","children_to_check last << ","children_to_check last ","children_to_check << "," style == "," style ","node children each "]}," RuboCop Cop Style IndentationConsistency on_kwbegin":{"type":"method","name":"on_kwbegin","children":[],"call":[" check "]}," RuboCop Cop Style IndentationConsistency on_begin":{"type":"method","name":"on_begin","children":[],"call":[" check "]}," RuboCop Cop Style IndentHash message":{"type":"method","name":"message","children":[],"call":[" format "," configured_indentation_width "]}," RuboCop Cop Style IndentHash unexpected_column":{"type":"method","name":"unexpected_column","children":[],"call":["unexpected_base_column + + ","unexpected_base_column + ","left_parenthesis column + ","left_parenthesis column ","left_brace source_line =~ ","left_brace source_line "," style == "," style "," configured_indentation_width ","left_parenthesis column +  + + ","left_brace source_line =~  + + ","left_parenthesis column +  + ","left_brace source_line =~  + "]}," RuboCop Cop Style IndentHash base_description":{"type":"method","name":"base_description","children":[],"call":[" style == "," style "]}," RuboCop Cop Style IndentHash base_column":{"type":"method","name":"base_column","children":[],"call":["left_brace source_line =~ ","left_brace source_line ","left_parenthesis column + ","left_parenthesis column "," style == "," style ","left_brace column "]}," RuboCop Cop Style IndentHash check_first_pair":{"type":"method","name":"check_first_pair","children":[],"call":[" unrecognized_style_detected "," opposite_style_detected ","column == "," unexpected_column "," add_offense "," message "," base_description "," correct_style_detected ","@column_delta == ","expected_column - "," base_column + + "," base_column + "," base_column ","first_pair loc expression column ","first_pair loc expression ","first_pair loc "," incorrect_style_detected "," configured_indentation_width "," ambiguous_style_detected ","styles size > ","styles size "," detected_styles ","actual_column - - ","actual_column - ","first_pair loc expression column  == "," un base_column + +  "," unexpected_first_pair loc expression column  ","expected_column -  == ","@first_pair loc expression column _delta == "," base_column + +  - ","expected_first_pair loc expression column  - "," base_first_pair loc expression column  + + "," actual_column - -  + + "," base_first_pair loc expression column  + "," actual_column - -  + "," base_first_pair loc expression column  "," actual_column - -  ","first_pair loc expression first_pair loc expression column  "," detected_styles  size > "," detected_styles  size "," detected_ detected_styles  ","actual_first_pair loc expression column  - - ","first_pair loc expression column  - - ","actual_first_pair loc expression column  - ","first_pair loc expression column  - "]}," RuboCop Cop Style IndentHash check_based_on_longest_key":{"type":"method","name":"check_based_on_longest_key","children":[],"call":[" check_first_pair ","key_lengths max - ","key_lengths first ","key_lengths max ","pairs first ","pair children first loc expression length ","pair children first loc expression ","pair children first loc ","pair children first ","pair children ","pairs map "," check_first ","pair children first source_range length ","pair children first source_range "]}," RuboCop Cop Style IndentHash separator_style?":{"type":"method","name":"separator_style?","children":[],"call":[" config for_cop [] == "," config for_cop [] "," config for_cop "," config ","separator is? ","first_pair loc operator ","first_pair loc ","first_pair loc operator  is? "]}," RuboCop Cop Style IndentHash check_right_brace":{"type":"method","name":"check_right_brace","children":[],"call":[" add_offense "," style == "," style ","@column_delta == ","expected_column - ","right_brace column "," base_column ","right_brace source_line [] =~ ","right_brace source_line [] ","right_brace source_line ","@column_delta zero? ","expected_column -  == "," base_column  - ","expected_column -  zero? "]}," RuboCop Cop Style IndentHash check":{"type":"method","name":"check","children":[],"call":[" check_right_brace ","hash_node loc end ","hash_node loc "," check_first_pair "," check_based_on_longest_key ","hash_node children "," separator_style? ","first_pair loc expression line == ","left_brace line ","first_pair loc expression line ","first_pair loc expression ","first_pair loc ","hash_node loc begin ","hash_node children first "," ignored_node? "," check_first ","first_pair source_range line == ","first_pair source_range line ","first_pair source_range ","hash_node pairs first ","hash_node pairs "," check_hash_node children first  "," check_hash_node pairs first  ","hash_node children first  loc expression line == ","hash_node pairs first  loc expression line == ","hash_node loc begin  line ","hash_node children first  loc expression line ","hash_node pairs first  loc expression line ","hash_node children first  loc expression ","hash_node pairs first  loc expression ","hash_node children first  loc ","hash_node pairs first  loc ","hash_node children first  source_range line == ","hash_node pairs first  source_range line == ","hash_node children first  source_range line ","hash_node pairs first  source_range line ","hash_node children first  source_range ","hash_node pairs first  source_range "]}," RuboCop Cop Style IndentHash on_send":{"type":"method","name":"on_send","children":[],"call":[" ignore_node "," check ","left_brace line == ","left_parenthesis line ","left_brace line ","hash_node loc begin ","hash_node loc "," on_node ","args each ","node loc begin ","node loc "," each_argument_node ","hash_node loc begin  line == ","node loc begin  line ","hash_node loc begin  line "]}," RuboCop Cop Style IndentHash on_hash":{"type":"method","name":"on_hash","children":[],"call":[" check ","node loc begin ","node loc "]}," RuboCop Cop Style IndentArray check_right_bracket":{"type":"method","name":"check_right_bracket","children":[],"call":[" add_offense ","Indent the right bracket the same as  + + ","Indent the right bracket the same as  + ","@column_delta == ","base_column - ","left_bracket source_line =~ ","left_bracket source_line ","left_bracket column ","first_pair loc expression line == ","left_bracket line ","first_pair loc expression line ","first_pair loc expression ","first_pair loc ","right_bracket source_line [] =~ ","right_bracket source_line [] ","right_bracket source_line ","right_bracket column ","node loc end ","node loc "," style == "," style ","expected_column - "," base_column ","@column_delta zero? ","base_column -  == ","expected_column -  == ","@right_bracket column _delta == ","left_bracket source_line =~  - ","left_bracket column  - ","base_right_bracket column  - ","left_bracket right_bracket column  ","node loc end  source_line [] =~ ","node loc end  source_line [] ","node loc end  source_line ","right_bracket right_bracket column  ","node loc end  column ","expected_right_bracket column  - "," base_column  - "," left_bracket source_line =~  "," left_bracket column  "," base_right_bracket column  ","base_column -  zero? ","expected_column -  zero? ","@right_bracket column _delta zero? "]}," RuboCop Cop Style IndentArray check_first_pair":{"type":"method","name":"check_first_pair","children":[],"call":[" add_offense "," format ","@column_delta == ","expected_column - ","expr column ","base_column + ","left_bracket source_line =~ ","left_bracket source_line ","expr line == ","left_bracket line ","expr line ","first_pair loc expression ","first_pair loc ","first_pair nil? "," configured_indentation_width ","expected_column -  == ","base_column +  - ","first_pair loc expression  column ","left_bracket source_line =~  + ","first_pair loc expression  line == ","first_pair loc expression  line ","first_pair loc first_pair loc expression ession "]}," RuboCop Cop Style IndentArray on_array":{"type":"method","name":"on_array","children":[],"call":[" check_right_bracket "," check_first_pair ","node children first ","node children ","left_bracket nil? ","node loc begin ","node loc "," check "," check_node children first  ","node loc begin  nil? "]}," RuboCop Cop Style IfWithSemicolon error_message":{"type":"method","name":"error_message","children":[],"call":[]}," RuboCop Cop Style IfWithSemicolon offending_line":{"type":"method","name":"offending_line","children":[],"call":["node loc begin line ","node loc begin ","node loc ","node loc begin is? ","b line ","b is? ","node loc node loc begin egin line ","node loc node loc begin egin ","node loc node loc begin egin is? ","node loc begin  line ","node loc begin  is? "]}," RuboCop Cop Style IfUnlessModifier investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense "," error_message ","node loc keyword source ","node loc keyword ","node loc "," check ","processed_source comments "," if_else? "," elsif? "," modifier_if? "," ternary_op? "," on_node ","processed_source ast "," message "," fit_within_line_as_modifier_form? "]}," RuboCop Cop Style IfUnlessModifier error_message":{"type":"method","name":"error_message","children":[],"call":[]}," RuboCop Cop Style HashSyntax word_symbol_pair?":{"type":"method","name":"word_symbol_pair?","children":[],"call":["sym_name =~ ","key to_a [] ","key to_a ","key type == ","key type ","sym_name !~ ","key loc expression source ","key loc expression ","key loc ","key sym_type? "," valid_19_syntax_symbol? ","key source "," acceptable_19_syntax_symbol? ","pair key source ","pair key ","pair key sym_type? ","pair key dsym_type? ","key to_a []  =~ ","key loc expression source  =~ ","key to_a []  !~ ","key loc expression source  !~ "]}," RuboCop Cop Style HashSyntax check":{"type":"method","name":"check","children":[],"call":[" correct_style_detected "," opposite_style_detected "," add_offense ","pair loc expression begin join ","pair loc operator ","pair loc ","pair loc expression begin ","pair loc expression ","pair loc operator is? ","pairs each ","pair source_range begin join ","pair source_range begin ","pair source_range ","pair delimiter == ","pair delimiter "," autocorrect "]}," RuboCop Cop Style HashSyntax space_before_operator?":{"type":"method","name":"space_before_operator?","children":[],"call":["op begin_pos - - > ","op begin_pos - - ","key source length ","key source ","op begin_pos - ","key begin_pos ","op begin_pos "]}," RuboCop Cop Style HashSyntax autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector remove "," range_with_surrounding_space ","corrector insert_before ","corrector insert_after ","corrector replace ","range source sub ","range source ","Parser Source Range  new ","op end_pos ","key begin_pos ","key source_buffer "," style == "," style "," lambda ","node loc operator ","node loc ","node children first loc expression ","node children first loc ","node children first ","node children "," autocorrect_ruby19 "," autocorrect_ruby19_no_mixed_keys "," autocorrect_hash_rockets "," autocorrect_no_mixed_keys "," force_hash_rockets? ","node parent pairs ","node parent ","  range_with_surrounding_space _with_surrounding_space "," Parser Source Range  new _with_surrounding_space "," range_with_surrounding_space  source sub ","Parser Source Range  new  source sub "," range_with_surrounding_space  source ","Parser Source Range  new  source ","node loc operator  end_pos ","node children first loc expression  begin_pos ","node children first loc expression  source_buffer ","node loc node loc operator erator "," autocorrect_ruby19_no_mixed_node children first loc expression s "," autocorrect_no_mixed_node children first loc expression s "]}," RuboCop Cop Style HashSyntax hash_rockets_check":{"type":"method","name":"hash_rockets_check","children":[],"call":[" check "]}," RuboCop Cop Style HashSyntax ruby19_check":{"type":"method","name":"ruby19_check","children":[],"call":[" check "," word_symbol_pair? ","pairs all? "," sym_indices? "]}," RuboCop Cop Style HashSyntax on_hash":{"type":"method","name":"on_hash","children":[],"call":[" hash_rockets_check "," ruby19_check "," style == "," style "," ruby19_no_mixed_keys_check "," symbol_value? ","pairs any? "," cop_config [] "," cop_config "," no_mixed_keys_check ","node pairs "," force_hash_rockets? ","node pairs empty? ","pairs empty? ","node source include? ","node source "," on_hash_for_mixed_shorthand ","node pairs  any? ","node node pairs  ","node node pairs  empty? ","node pairs  empty? "]}," RuboCop Cop Style GuardClause min_body_length":{"type":"method","name":"min_body_length","children":[],"call":[" fail ","length > ","length is_a? "," cop_config [] "," cop_config "]}," RuboCop Cop Style GuardClause min_body_length?":{"type":"method","name":"min_body_length?","children":[],"call":["(send\n  (send\n    (send\n      (send\n        (lvar :node) :loc) :end) :line) :-\n  (send\n    (send\n      (send\n        (lvar :node) :loc) :keyword) :line)) > "," min_body_length ","node loc end line - ","node loc keyword line ","node loc keyword ","node loc ","node loc end line ","node loc end "]}," RuboCop Cop Style GuardClause check_if_node":{"type":"method","name":"check_if_node","children":[],"call":[" add_offense "," min_body_length? "," ternary_op? "," modifier_if? "]}," RuboCop Cop Style GuardClause if?":{"type":"method","name":"if?","children":[],"call":["body type == ","body type ","node if_type? "]}," RuboCop Cop Style GuardClause on_def":{"type":"method","name":"on_def","children":[],"call":[" check_if_node "," if? ","expressions last ","body type == ","body type "," check_trailing_if ","body children last ","body children ","body begin_type? "," check_ending_if ","body if_type? ","body children last if_type? ","node body "," check_ending_body ","node body  type == ","node body  type ","node body  children last ","node body  children ","node body  begin_type? ","node body  if_type? ","node body  children last if_type? ","node node body  "," check_ending_node body  "]}," RuboCop Cop Style GlobalVars check":{"type":"method","name":"check","children":[],"call":[" add_offense "," allowed_var? ","node loc name ","node loc "]}," RuboCop Cop Style GlobalVars on_gvasgn":{"type":"method","name":"on_gvasgn","children":[],"call":[" check "]}," RuboCop Cop Style GlobalVars on_gvar":{"type":"method","name":"on_gvar","children":[],"call":[" check "]}," RuboCop Cop Style GlobalVars allowed_var?":{"type":"method","name":"allowed_var?","children":[],"call":[" user_vars include? "," user_vars ","BUILT_IN_VARS  include? "]}," RuboCop Cop Style GlobalVars user_vars":{"type":"method","name":"user_vars","children":[],"call":[" cop_config [] map "," cop_config [] "," cop_config "]}," RuboCop Cop Style FormatString message":{"type":"method","name":"message","children":[],"call":["method_name == "," style "," style == "," format "," method_name "]}," RuboCop Cop Style FormatString percent?":{"type":"method","name":"percent?","children":[],"call":["arg_nodes [] type == ","arg_nodes [] type ","arg_nodes [] ","(sym :str) include? ","receiver_node type ","method_name == ","arg_nodes first array_type? ","arg_nodes first "]}," RuboCop Cop Style FormatString sprintf?":{"type":"method","name":"sprintf?","children":[],"call":[" command? "," format_method? "]}," RuboCop Cop Style FormatString format?":{"type":"method","name":"format?","children":[],"call":[" command? "," format_method? "]}," RuboCop Cop Style FormatString offending_node?":{"type":"method","name":"offending_node?","children":[],"call":[" sprintf? "," format? "," percent? "," style "]}," RuboCop Cop Style FormatString on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," offending_node? "," message ","detected_style == "," style ","selector == "," formatter ","FORMAT_METHODS  include? ","node method_name "," autocorrect ","node loc selector ","node loc "," formatter  == ","node loc  formatter  "]}," RuboCop Cop Style For on_block":{"type":"method","name":"on_block","children":[],"call":[" correct_style_detected "," opposite_style_detected "," add_offense ","Parser Source Range  new ","end_pos - ","each length "," processed_source buffer "," processed_source ","method loc expression end_pos ","method loc expression ","method loc "," style == "," style ","args empty? ","method_name == ","method type == ","method type "," block_length == "," block_length ","method source_range end_pos ","method source_range "," block_length zero? "," incorrect_style_detected ","method send_type? ","method arguments? ! ","method arguments? ","method method? ","node send_node ","node send_node arguments? ! ","node send_node arguments? ","node send_node method? ","node single_line? "," suspect_enumerable? ","EachToForCorrector  new call ","EachToForCorrector  new ","method loc expression end_pos  - ","method source_range end_pos  - ","method loc expression method loc expression end_pos  ","method loc expression method source_range end_pos  ","method source_Parser Source Range  new  end_pos ","method source_range method loc expression end_pos  ","method source_range method source_range end_pos  ","method source_Parser Source Range  new  "]}," RuboCop Cop Style For on_for":{"type":"method","name":"on_for","children":[],"call":[" correct_style_detected "," opposite_style_detected "," add_offense "," style == "," style ","ForToEachCorrector  new call ","ForToEachCorrector  new "]}," RuboCop Cop Style FlipFlop on_eflipflop":{"type":"method","name":"on_eflipflop","children":[],"call":[" add_offense "]}," RuboCop Cop Style FlipFlop on_iflipflop":{"type":"method","name":"on_iflipflop","children":[],"call":[" add_offense "]}," RuboCop Cop Style FileName snake_case?":{"type":"method","name":"snake_case?","children":[],"call":["fragment =~ ","basename split all? ","basename split "]}," RuboCop Cop Style FileName investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense "," source_range ","processed_source [] ","processed_source buffer "," snake_case? ","File  basename sub ","File  basename "," config file_to_include? "," config ","processed_source buffer name "," format "," regex "," shebang? "," cop_config [] "," cop_config ","processed_source lines first ","processed_source lines "," to_namespace join "," to_namespace "," find_class_or_module ","processed_source ast "," expect_matching_definition? "," filename_good? "," for_bad_filename "," source_ source_range  ","File  File  basename sub  sub ","File  File  basename  sub ","File  File  basename sub  ","File  File  basename  "]}," RuboCop Cop Style EvenOdd div_by_2?":{"type":"method","name":"div_by_2?","children":[],"call":["args == ","method == ","node type == ","node type ","node children first ","node children ","node children size == ","node children size "," expression ","node children first  type == "," expression  type == ","node children first  type "," expression  type ","node children first  children first "," expression  children first ","node children first  children "," expression  children ","node children first  children size == "," expression  children size == ","node children first  children size "," expression  children size "]}," RuboCop Cop Style EvenOdd on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","method == ","args == "," div_by_2? ","(sym :==) include? "," format "," offense_type "," replacement_method "," even_odd_candidate? ","corrector replace ","base_number source "," add_ offense_type  ","  offense_type _type ","  replacement_method  "]}," RuboCop Cop Style EndOfLine change_encoding":{"type":"method","name":"change_encoding","children":[],"call":["string force_encoding ","Parser Source Buffer  recognize_encoding "]}," RuboCop Cop Style EndOfLine investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense "," source_range ","line length ","processed_source [] ","line =~ ","original_source lines each_with_index ","original_source lines "," change_encoding ","IO  read ","buffer name ","processed_source buffer ","index + ","processed_source raw_source each_line with_index ","processed_source raw_source each_line ","processed_source raw_source ","index >= ","processed_source lines length ","processed_source lines ","last_token pos line ","last_token pos ","processed_source tokens last ","processed_source tokens "," unimportant_missing_cr? "," offense_message "," source_ source_range  ","IO  read  lines each_with_index ","IO  read  lines ","processed_source buffer  name ","processed_source processed_source buffer  ","processed_source tokens last  pos line ","processed_source tokens last  pos "]}," RuboCop Cop Style EndBlock on_postexe":{"type":"method","name":"on_postexe","children":[],"call":[" add_offense ","corrector replace ","node loc keyword ","node loc "]}," RuboCop Cop Style Encoding encoding_line_number":{"type":"method","name":"encoding_line_number","children":[],"call":["processed_source [] =~ ","processed_source [] ","processed_source [] start_with? "]}," RuboCop Cop Style Encoding offense":{"type":"method","name":"offense","children":[],"call":["always_encode ! ","ascii_only ! ","encoding_present ! "," style == "," style ","processed_source buffer source ascii_only? ","processed_source buffer source ","processed_source buffer ","line =~ ","processed_source [] ","encoding_omitable ! "," encoding_omitable? "," encoding_present? "," encoding_omitable? ! "," encoding_present? ! "," style ==  ! ","processed_source buffer source ascii_only?  ! ","line =~  ! ","processed_source buffer source processed_source buffer source ascii_only? ? ","processed_source []  =~ "," line =~ ? "," line =~ ? ! "]}," RuboCop Cop Style Encoding investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense "," source_range ","processed_source [] ","processed_source buffer "," offense "," encoding_line_number ","processed_source buffer source empty? ","processed_source buffer source ","RUBY_VERSION  >= ","line_number + ","processed_source tokens first ","processed_source tokens ","processed_source buffer line_range "," source_ source_range  "," source_processed_source buffer line_range  "," encoding_ encoding_line_number  "," encoding_line_number  + ","processed_source buffer line_ source_range  ","processed_source buffer line_processed_source buffer line_range  "]}," RuboCop Cop Style EmptyLiteral autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","node loc expression ","node loc "," lambda "," fail "," first_arg_in_method_call_without_parentheses? ","node source_range "," enforce_double_quotes? "," preferred_string_literal "," correction "," replacement_range "]}," RuboCop Cop Style EmptyLiteral on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," part_of_ignored_node? ","node parent block_type? ","node parent "," format "," preferred_string_literal "," frozen_string_literals_enabled? "," processed_source "," str_node "," hash_node "," array_node "," offense_hash_node? "," offense_array_node? ","corrector replace "," correction "," replacement_range "," offense_message "," offense_ offense_message  "]}," RuboCop Cop Style EmptyLinesAroundBody check_line":{"type":"method","name":"check_line","children":[],"call":[" add_offense "," source_range "," processed_source [] "," processed_source "," processed_source buffer "," processed_source lines [] empty? "," processed_source lines [] "," processed_source lines ","line + ","msg include? "," style == "," style ","style == "," source_ source_range  "]}," RuboCop Cop Style EmptyLinesAroundBody check_source":{"type":"method","name":"check_source","children":[],"call":[" check_line ","end_line - ","end_line - == ","line empty? ! ","line empty? "," check_both "," style "," message "]}," RuboCop Cop Style EmptyLinesAroundBody check":{"type":"method","name":"check","children":[],"call":[" check_source ","start_line == ","node loc end line ","node loc end ","node loc ","node loc keyword line ","node loc keyword "," style == "," style ","node loc expression last_line ","node loc expression ","node loc expression first_line ","node single_line? "," namespace? ","node source_range last_line ","node source_range ","node source_range first_line "," check_both "," check_empty_lines_special "," check_empty_lines_except_namespace ","node loc keyword line  == ","node loc expression node source_range last_line  ","node loc expression node source_range first_line  ","node source_range node source_range last_line  ","node source_range node source_range first_line  "]}," RuboCop Cop Style EmptyLinesAroundBody autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector remove "," lambda ","corrector insert_before "," style "]}," RuboCop Cop Style EmptyLinesAroundBody on_sclass":{"type":"method","name":"on_sclass","children":[],"call":[" check "]}," RuboCop Cop Style EmptyLinesAroundBody on_module":{"type":"method","name":"on_module","children":[],"call":[" check "]}," RuboCop Cop Style EmptyLinesAroundBody on_class":{"type":"method","name":"on_class","children":[],"call":[" check "]}," RuboCop Cop Style EmptyLinesAroundAccessModifier modifier_node?":{"type":"method","name":"modifier_node?","children":[],"call":["(const nil :PRIVATE_NODE) include? "]}," RuboCop Cop Style EmptyLinesAroundAccessModifier message":{"type":"method","name":"message","children":[],"call":[" format ","node loc selector source ","node loc selector ","node loc "," class_def? "," block_start? "," processed_source [] ","node loc line - ","node loc line "," processed_source "]}," RuboCop Cop Style EmptyLinesAroundAccessModifier class_def?":{"type":"method","name":"class_def?","children":[],"call":["line start_with? ","(str \"class\") any? ","line =~ "]}," RuboCop Cop Style EmptyLinesAroundAccessModifier empty_lines_around?":{"type":"method","name":"empty_lines_around?","children":[],"call":["next_line blank? ","previous_line blank? "," class_def? ","previous_line lstrip "," processed_source [] "," processed_source ","send_line - ","node loc line ","node loc "," next_line_empty? "," previous_line_empty? "," previous_line_ignoring_comments "," processed_source []  blank? "," previous_line_ignoring_comments  blank? "," processed_source []  lstrip "," previous_line_ignoring_comments  lstrip ","node loc line  - ","  processed_source [] _empty? ","  previous_line_ignoring_comments _empty? ","  processed_source [] _ignoring_comments ","  previous_line_ignoring_comments _ignoring_comments "]}," RuboCop Cop Style EmptyLinesAroundAccessModifier on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," empty_lines_around? "," modifier_node? "]}," RuboCop Cop Style EmptyLines autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector remove "," lambda "]}," RuboCop Cop Style EmptyLines investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense "," source_range ","processed_source [] ","line - ","processed_source buffer ","processed_source [] empty? ","(erange\n  (begin\n    (send\n      (lvar :prev_line) :+\n      (int 1)))\n  (lvar :cur_line)) each ","prev_line + ","line_diff > ","cur_line - ","token pos line ","token pos ","(send\n  (send\n    (lvar :processed_source) :tokens) :sort_by) each ","t pos line ","t pos ","processed_source tokens sort_by ","processed_source tokens ","processed_source tokens empty? ","lines sort each ","lines sort ","lines << ","processed_source tokens each ","Set  new "," each_extra_empty_line "," source_ source_range  ","(e source_range \n  (begin\n    (send\n      (lvar :prev_line) :+\n      (int 1)))\n  (lvar :cur_line)) each ","(erange\n  (begin\n    (send\n      (lvar :prev_line) :+\n      (int 1)))\n  (lvar :token pos line )) each ","cur_line -  > ","token pos line  - ","Set  new  sort each ","Set  new  sort ","Set  new  << "]}," RuboCop Cop Style EmptyLineBetweenDefs autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector insert_before "," lambda "," range_with_surrounding_space ","node loc expression ","node loc ","corrector insert_after ","Parser Source Range  new ","newline_pos + ","source_buffer source index ","source_buffer source ","prev_def loc end source_buffer ","prev_def loc end ","prev_def loc ","prev_def loc end end_pos "," prev_node "," range_between "," autocorrect_insert_lines "," autocorrect_remove_lines ","count > "," maximum_empty_lines "," blank_lines_count_between ","  range_with_surrounding_space _with_surrounding_space ","Parser Source Range  new _pos + "," range_between _pos + ","source_buffer source index  + ","prev_def loc end source_buffer  source index ","prev_def loc end source_buffer  source ","prev_def loc end prev_def loc end source_buffer  "," prev_node  loc end source_buffer "," prev_node  loc end "," prev_node  loc ","prev_def loc end prev_def loc end end_pos  "," prev_node  loc end end_pos ","  range_with_surrounding_space _between "," blank_lines_count_between  > "," blank_lines_ blank_lines_count_between _between "]}," RuboCop Cop Style EmptyLineBetweenDefs def_end":{"type":"method","name":"def_end","children":[],"call":["node loc end line ","node loc end ","node loc "]}," RuboCop Cop Style EmptyLineBetweenDefs def_start":{"type":"method","name":"def_start","children":[],"call":["node loc keyword line ","node loc keyword ","node loc "]}," RuboCop Cop Style EmptyLineBetweenDefs singe_line_def?":{"type":"method","name":"singe_line_def?","children":[],"call":[" def_start == "," def_end "," def_start "]}," RuboCop Cop Style EmptyLineBetweenDefs on_def":{"type":"method","name":"on_def","children":[],"call":[" singe_line_def? "," def_end "," add_offense "," cop_config [] "," cop_config ","(send\n  (send nil :def_start\n    (lvar :node)) :-\n  (ivar :@prev_def_end)) == "," def_start - "," def_start ","(send\n  (send nil :def_start\n    (lvar :node)) :-\n  (ivar : def_end )) == "]}," RuboCop Cop Style EachWithObject first_argument_returned?":{"type":"method","name":"first_argument_returned?","children":[],"call":["accumulator_var == "]}," RuboCop Cop Style EachWithObject return_value":{"type":"method","name":"return_value","children":[],"call":["return_value type == ","return_value type ","body children last ","body children ","body type == ","body type ","return_value lvar_type? ","body begin_type? ","body children last  type == ","body children last  type ","body children last  lvar_type? "]}," RuboCop Cop Style EachWithObject on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," format "," first_argument_returned? "," return_value ","method_args type == ","method_args type ","METHODS  include? ","method type == ","method type ","lhs equal? ","n assignment? ","body each_descendant any? ","body each_descendant ","BASIC_LITERALS  include? ","method_arg type ","method_arg basic_literal? "," accumulator_param_assigned_to? "," simple_method_arg? "," reduce_method? ","method loc selector ","method loc "," each_with_object_candidate? "," autocorrect "," autocorrect_block "," each_with_object_block_candidate? ","  return_value  "]}," RuboCop Cop Style DoubleNegation not_node?":{"type":"method","name":"not_node?","children":[],"call":["node loc selector is? ","node loc selector ","node loc ","method_name == ","args empty? "]}," RuboCop Cop Style DoubleNegation on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," not_node? ","node loc selector is? ","node loc selector ","node loc "," double_negative? ","node keyword_bang? ","node prefix_bang? "," allowed_in_returns? "," style == "," style ","corrector insert_after ","corrector remove "]}," RuboCop Cop Style DotPosition proper_dot_position?":{"type":"method","name":"proper_dot_position?","children":[],"call":["dot_line != ","dot_line == "," style ","node loc dot line ","node loc dot ","node loc ","selector_line == ","node loc begin line ","node loc begin ","node loc selector line ","node loc selector ","receiver loc expression end line ","receiver loc expression end ","receiver loc expression ","receiver loc ","(send\n  (lvar :selector_line) :-\n  (lvar :dot_line)) > ","selector_line - ","receiver source_range end line ","receiver source_range end ","receiver source_range "," correct_dot_position_style? "," line_between? "," selector_range line "," selector_range ","node receiver source_range end line ","node receiver source_range end ","node receiver source_range ","node receiver ","node loc dot line  != ","node loc dot line  == ","node loc begin line  == ","node loc selector line  == "," selector_range line  == ","(send\n  (lvar :selector_line) :-\n  (lvar :node loc dot line )) > ","(send\n  (lvar :node loc begin line ) :-\n  (lvar :dot_line)) > ","(send\n  (lvar :node loc selector line ) :-\n  (lvar :dot_line)) > ","(send\n  (lvar : selector_range line ) :-\n  (lvar :dot_line)) > ","node loc begin line  - ","node loc selector line  - "," selector_range line  - "]}," RuboCop Cop Style DotPosition message":{"type":"method","name":"message","children":[],"call":["Place the . on the  + "," style "]}," RuboCop Cop Style DotPosition on_send":{"type":"method","name":"on_send","children":[],"call":[" opposite_style_detected "," add_offense "," correct_style_detected "," proper_dot_position? ","node loc dot ","node loc ","node dot? "]}," RuboCop Cop Style Documentation associated_comment?":{"type":"method","name":"associated_comment?","children":[],"call":[" annotation? ! "," annotation? ","ast_with_comments [] any? ","ast_with_comments [] ","distance > ","node loc keyword line - ","preceding_comment loc line ","preceding_comment loc ","node loc keyword line ","node loc keyword ","node loc ","ast_with_comments [] last ","ast_with_comments [] empty? "," comment_line_only? ","preceding_comments any? ","preceding_comments last ","preceding_comments last loc line ","preceding_comments last loc ","preceding_comments empty? "," preceding_comments "," interpreter_directive_comment? ! "," interpreter_directive_comment? ","node loc keyword line -  > ","ast_with_comments [] last  loc line ","ast_with_comments [] last  loc ","ast_with_comments [] last s any? "," preceding_comments  any? ","ast_with_comments [] last s last "," preceding_comments  last ","ast_with_comments [] last s last loc line "," preceding_comments  last loc line ","ast_with_comments [] last s last loc "," preceding_comments  last loc ","ast_with_comments [] last s empty? "," preceding_comments  empty? "," ast_with_comments [] last s ","  preceding_comments  "]}," RuboCop Cop Style Documentation namespace?":{"type":"method","name":"namespace?","children":[],"call":["(sym :class) include? ","node type ","body_node children all? ","body_node children ","body_node type "," module_definition? "," constant_definition? ","node children all? ","node children ","node begin_type? "," method "," constant_declaration? "]}," RuboCop Cop Style Documentation check":{"type":"method","name":"check","children":[],"call":[" add_offense "," format ","node type to_s ","node type "," associated_comment? "," namespace? ","body ! ","node type == "," on_node ","ast each_node "," nodoc? "," nodoc_comment? "," documentation_comment? "," outer_module first "," outer_module "," compact_namespace? ","node loc keyword ","node loc "," macro_only? "," nodoc_self_or_outer_module? "," constant_allowed? "," identifier "," range_between ","node loc name end_pos ","node loc name ","node loc expression begin_pos ","node loc expression "," include_statement_only? ","node source_range begin_pos ","node source_range ","  range_between _between ","node source_ range_between  begin_pos ","node source_ range_between  "]}," RuboCop Cop Style Documentation investigate":{"type":"method","name":"investigate","children":[],"call":[" check ","Parser Source Comment  associate ","processed_source comments ","processed_source ast ","processed_source processed_source ast  "]}," RuboCop Cop Style DeprecatedHashMethods proper_method_name":{"type":"method","name":"proper_method_name","children":[],"call":["method_name to_s sub ","method_name to_s "]}," RuboCop Cop Style DeprecatedHashMethods autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace "," proper_method_name ","node loc selector source ","node loc selector ","node loc "," lambda "]}," RuboCop Cop Style DeprecatedHashMethods on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format "," proper_method_name ","DEPRECATED_METHODS  include? ","args size == ","args size "]}," RuboCop Cop Style DefWithParentheses autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector remove ","node loc end ","node loc ","node loc begin "," lambda "]}," RuboCop Cop Style DefWithParentheses check":{"type":"method","name":"check","children":[],"call":[" add_offense ","args loc begin ","args loc ","args children == ","args children ","start_line == ","node loc end line ","node loc end ","node loc ","node loc keyword line ","node loc keyword ","node loc keyword line  == "]}," RuboCop Cop Style CyclomaticComplexity check":{"type":"method","name":"check","children":[],"call":[" max= "," add_offense "," format ","complexity > "," cop_config [] "," cop_config "," on_node ","  cop_config [] = "]}," RuboCop Cop Style ConstantName on_casgn":{"type":"method","name":"on_casgn","children":[],"call":[" add_offense ","const_name !~ ","(sym :send) include? ","value type "]}," RuboCop Cop Style CommentIndentation two_alternatives?":{"type":"method","name":"two_alternatives?","children":[],"call":["line =~ "]}," RuboCop Cop Style CommentIndentation less_indented?":{"type":"method","name":"less_indented?","children":[],"call":["line =~ "]}," RuboCop Cop Style CommentIndentation correct_indentation":{"type":"method","name":"correct_indentation","children":[],"call":["indentation_of_next_line + "," less_indented? ","next_line =~ "," configured_indentation_width ","next_line =~  + "]}," RuboCop Cop Style CommentIndentation investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense "," format ","comment loc expression ","comment loc ","column == "," two_alternatives? ","@column_delta == ","correct_comment_indentation - ","comment loc column "," correct_indentation ","line blank? ! ","line blank? ","lines [] find ","lines [] ","comment loc line ","own_line =~ ","comment loc line - ","processed_source lines ","processed_source comments each ","processed_source comments "," check ","comment loc column  == ","correct_comment_indentation -  == ","@comment loc column _delta == "," correct_indentation  - ","comment loc comment loc column  ","processed_source lines  [] find ","processed_source lines  [] ","lines []  =~ ","processed_source processed_source lines  "]}," RuboCop Cop Style CommentAnnotation correct_annotation?":{"type":"method","name":"correct_annotation?","children":[],"call":["note ! ","colon ! "," keyword? "," correct_space_annotation? "," correct_colon_annotation? "," requires_colon? "]}," RuboCop Cop Style CommentAnnotation investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense ","Parser Source Range  new ","start + ","processed_source buffer ","first_word length + ","(or\n  (lvar :colon)\n  (str \"\")) length ","first_word length ","comment loc expression begin_pos + ","margin length ","comment loc expression begin_pos ","comment loc expression ","comment loc "," correct_annotation? ! "," correct_annotation? "," annotation? "," split_comment ","processed_source comments each ","processed_source comments ","first_word length + + ","space to_s length ","space to_s ","colon to_s length ","colon to_s "," format ","comment loc expression source_buffer "," first_comment_line? ","processed_source comments each_with_index "," annotation_range "," concat_length "," inline_comment? ","comment loc expression begin_pos +  + ","first_word first_word length +  + ","first_word first_word length + +  + ","first_word  concat_length  + ","(or\n  (lvar :colon)\n  (str \"\")) first_word length +  ","(or\n  (lvar :colon)\n  (str \"\")) first_word length + +  ","(or\n  (lvar :colon)\n  (str \"\"))  concat_length  ","first_word first_word length +  ","first_word first_word length + +  ","first_word  concat_length  ","margin first_word length +  ","margin first_word length + +  ","margin  concat_length  ","first_word first_word length +  + + ","first_word first_word length + +  + + ","first_word  concat_length  + + ","space to_s first_word length +  ","space to_s first_word length + +  ","space to_s  concat_length  ","colon to_s first_word length +  ","colon to_s first_word length + +  ","colon to_s  concat_length  ","comment loc expression comment loc expression source_buffer  "," annotation_Parser Source Range  new  "," concat_first_word length +  "," concat_first_word length + +  "," concat_ concat_length  "]}," RuboCop Cop Style ColonMethodCall autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","node loc dot ","node loc "," lambda "]}," RuboCop Cop Style ColonMethodCall allowed_name":{"type":"method","name":"allowed_name","children":[],"call":["method_name match "]}," RuboCop Cop Style ColonMethodCall on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," allowed_name ","method_name to_s ","node loc dot is? ","node loc dot ","node loc ","JAVA_TYPE_NODES  include? "," java_type_node? ","node camel_case_method? ","node double_colon? ","node receiver ","corrector replace "]}," RuboCop Cop Style CollectionMethods default_cop_config":{"type":"method","name":"default_cop_config","children":[],"call":["ConfigLoader  default_configuration [] "," cop_name ","ConfigLoader  default_configuration "]}," RuboCop Cop Style CollectionMethods preferred_methods":{"type":"method","name":"preferred_methods","children":[],"call":["(send\n  (lvar :merged) :reject) symbolize_keys ","overrides include? ","merged reject ","merged values - ","default values ","merged values "," cop_config [] "," cop_config "," default_cop_config [] "," default_cop_config ","(send\n  (lvar : cop_config [] ) :reject) symbolize_keys ","merged values -  include? "," cop_config []  reject "," cop_config []  values - "," default_cop_config []  values "," cop_config []  values ","  default_cop_config [] _cop_config [] ","  default_cop_config [] _cop_config "]}," RuboCop Cop Style CollectionMethods preferred_method":{"type":"method","name":"preferred_method","children":[],"call":[" preferred_methods [] ","method to_sym "," preferred_methods "]}," RuboCop Cop Style CollectionMethods check_method_node":{"type":"method","name":"check_method_node","children":[],"call":[" add_offense "," format "," preferred_method "," preferred_methods [] "," preferred_methods ","node method_name ","corrector replace ","node loc selector source ","node loc selector ","node loc "," message ","  message  "]}," RuboCop Cop Style CollectionMethods autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace "," preferred_method ","node loc selector source ","node loc selector ","node loc "," lambda "]}," RuboCop Cop Style CollectionMethods on_send":{"type":"method","name":"on_send","children":[],"call":[" check_method_node ","args first type == ","args first type ","args first ","args size == ","args size ","args first block_pass_type? ","args one? ","node first_argument block_pass_type? ","node first_argument ","node arguments one? ","node arguments "," implicit_block? "]}," RuboCop Cop Style CollectionMethods on_block":{"type":"method","name":"on_block","children":[],"call":[" check_method_node ","node send_node "]}," RuboCop Cop Style ClassVars message":{"type":"method","name":"message","children":[],"call":[" format "]}," RuboCop Cop Style ClassVars on_cvasgn":{"type":"method","name":"on_cvasgn","children":[],"call":[" add_offense "," format ","node children first ","node children ","node loc name ","node loc "]}," RuboCop Cop Style ClassMethods autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","node loc name ","node loc "," lambda "]}," RuboCop Cop Style ClassMethods message":{"type":"method","name":"message","children":[],"call":[" format ","node parent method_name ","node parent "]}," RuboCop Cop Style ClassMethods check_defs":{"type":"method","name":"check_defs","children":[],"call":[" add_offense "," message ","definee type == ","definee type ","name == ","node receiver ","corrector replace ","node receiver loc name ","node receiver loc "," format ","name source ","node method_name ","  format  "]}," RuboCop Cop Style ClassMethods check":{"type":"method","name":"check","children":[],"call":[" check_defs ","defs_nodes each ","n type == ","n type ","node children compact select ","node children compact ","node children ","node type == ","node type ","node each_child_node ","node begin_type? ","node defs_type? "]}," RuboCop Cop Style ClassMethods on_module":{"type":"method","name":"on_module","children":[],"call":[" check "]}," RuboCop Cop Style ClassMethods on_class":{"type":"method","name":"on_class","children":[],"call":[" check "," check_defs ","node identifier ","node body each_child_node ","node body ","node body begin_type? ","node body defs_type? "]}," RuboCop Cop Style ClassLength line_numbers_of_inner_classes":{"type":"method","name":"line_numbers_of_inner_classes","children":[],"call":["line_numbers to_a ","line_numbers merge "," line_range ","inner_node eql? "," on_node ","Set  new ","Set  new  to_a ","Set  new  merge ","  line_range  "]}," RuboCop Cop Style ClassLength code_length":{"type":"method","name":"code_length","children":[],"call":["length + "," irrelevant_line "," processed_source [] "," processed_source ","target_line_numbers reduce ","class_body_line_numbers - "," line_numbers_of_inner_classes "," line_range to_a [] "," line_range to_a "," line_range ","class_body_line_numbers -  reduce "," line_range to_a []  - "]}," RuboCop Cop Style ClassLength message":{"type":"method","name":"message","children":[],"call":[]}," RuboCop Cop Style ClassLength on_class":{"type":"method","name":"on_class","children":[],"call":[" check "]}," RuboCop Cop Style ClassAndModuleChildren compact_node_name?":{"type":"method","name":"compact_node_name?","children":[],"call":["node loc name source =~ ","node loc name source ","node loc name ","node loc ","(str \"::\") match? ","node identifier source ","node identifier ","node identifier source include? "]}," RuboCop Cop Style ClassAndModuleChildren one_child?":{"type":"method","name":"one_child?","children":[],"call":["(sym :module) include? ","body type "]}," RuboCop Cop Style ClassAndModuleChildren check_compact_style":{"type":"method","name":"check_compact_style","children":[],"call":[" add_offense "," compact_node_name? ! "," compact_node_name? "," one_child? "," autocorrect ","node loc name ","node loc "," needs_compacting? ","node parent ","node node parent  "]}," RuboCop Cop Style ClassAndModuleChildren check_nested_style":{"type":"method","name":"check_nested_style","children":[],"call":[" add_offense "," compact_node_name? "," autocorrect ","node loc name ","node loc "]}," RuboCop Cop Style ClassAndModuleChildren check_style":{"type":"method","name":"check_style","children":[],"call":[" check_compact_style "," check_nested_style "," style == "," style ","node identifier children [] ","node identifier children ","node identifier ","node identifier namespace "]}," RuboCop Cop Style ClassAndModuleChildren on_module":{"type":"method","name":"on_module","children":[],"call":[" check_style ","node body "]}," RuboCop Cop Style ClassAndModuleChildren on_class":{"type":"method","name":"on_class","children":[],"call":[" check_style "," style != "," style ","node body ","node parent_class "]}," RuboCop Cop Style ClassAndModuleCamelCase check_name":{"type":"method","name":"check_name","children":[],"call":[" add_offense ","name =~ ","node loc name source ","node loc name ","node loc ","node loc name source  =~ ","node loc node loc name source  source ","node loc node loc name source  "]}," RuboCop Cop Style ClassAndModuleCamelCase on_module":{"type":"method","name":"on_module","children":[],"call":[" check_name "]}," RuboCop Cop Style ClassAndModuleCamelCase on_class":{"type":"method","name":"on_class","children":[],"call":[" check_name "]}," RuboCop Cop Style CharacterLiteral correct_style_detected":{"type":"method","name":"correct_style_detected","children":[],"call":[]}," RuboCop Cop Style CharacterLiteral opposite_style_detected":{"type":"method","name":"opposite_style_detected","children":[],"call":[]}," RuboCop Cop Style CharacterLiteral autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","node loc expression ","node loc ","string length == ","string length ","node loc expression source [] ","node loc expression source "," lambda ","node source_range ","string == ","node source [] ","node source ","node loc expression source []  length == ","node source []  length == ","node loc expression source []  length ","node source []  length ","node loc expression source []  == ","node source []  == "]}," RuboCop Cop Style CharacterLiteral offense?":{"type":"method","name":"offense?","children":[],"call":["node loc expression source size between? ","node loc expression source size ","node loc expression source ","node loc expression ","node loc ","node loc begin is? ","node loc begin ","node source size between? ","node source size ","node source ","node character_literal? "]}," RuboCop Cop Style CaseIndentation base_column":{"type":"method","name":"base_column","children":[],"call":["case_node location end column ","case_node location end ","case_node location ","case_node location keyword column ","case_node location keyword "]}," RuboCop Cop Style CaseIndentation parameter_name":{"type":"method","name":"parameter_name","children":[],"call":[]}," RuboCop Cop Style CaseIndentation check_when":{"type":"method","name":"check_when","children":[],"call":[" unrecognized_style_detected "," opposite_style_detected ","pos column == "," base_column "," alternative_style ","pos column "," add_offense ","Indent `when`  + "," correct_style_detected ","base_column + ","when_node loc keyword ","when_node loc "," incorrect_style "," configured_indentation_width ","when_column == "," indentation_width "," style ","when_node parent ","when_node loc keyword column "," opwhen_node loc keyword ite_style_detected ","when_node loc keyword  column == ","  base_column  ","when_node loc keyword  column "," base_column  + ","when_node loc keyword column  == "]}," RuboCop Cop Style CaseIndentation on_case":{"type":"method","name":"on_case","children":[],"call":[" check_when ","whens each "," base_column "," cop_config [] "," cop_config "," style ","case_node each_when ","case_node single_line? ","  base_column  ","  style _column "]}," RuboCop Cop Style CaseEquality on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","method_name == "," case_equality? ","corrector replace "," replacement ","node loc selector ","node loc ","lhs module_name? ! ","lhs module_name? ","lhs const_type? ","  replacement  "]}," RuboCop Cop Style BracesAroundHashParameters all_hashes?":{"type":"method","name":"all_hashes?","children":[],"call":["a type == ","a type ","args all? ","args length > ","args length "]}," RuboCop Cop Style BracesAroundHashParameters braces?":{"type":"method","name":"braces?","children":[],"call":["arg loc begin ","arg loc "]}," RuboCop Cop Style BracesAroundHashParameters non_empty_hash?":{"type":"method","name":"non_empty_hash?","children":[],"call":["arg children any? ","arg children ","arg type == ","arg type ","arg children empty? ! ","arg children empty? ","arg hash_type? "]}," RuboCop Cop Style BracesAroundHashParameters remove_trailing_comma":{"type":"method","name":"remove_trailing_comma","children":[],"call":["corrector remove ","Parser Source Range  new ","comma_begin + ","pos_after_last_pair + ","range_after_last_pair source =~ ","range_after_last_pair source ","node loc end begin_pos ","node loc end ","node loc ","node children last loc expression end_pos ","node children last loc expression ","node children last loc ","node children last ","node children ","node loc end source_buffer ","pos_after_last_pair +  + ","node children last loc expression end_pos  + ","Parser Source Range  new  source =~ ","Parser Source Range  new  source "]}," RuboCop Cop Style BracesAroundHashParameters autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector insert_after ","node loc expression ","node loc ","corrector insert_before "," style == "," style "," remove_trailing_comma ","corrector remove ","node loc end ","node loc begin "," lambda "," remove_trailing_comma_and_whitespace "," remove_leading_whitespace "," braces? "," range_with_surrounding_space "," add_braces "," remove_braces ","args last "," remove_braces_with_whitespace ","node braces? ","hash_node braces? ","send_node last_argument "," extra_space ","args last  loc expression ","args last  loc ","args last  loc end ","args last  loc begin ","args last  braces? ","hash_args last  braces? ","send_node last_argument  braces? ","send_args last  last_argument "]}," RuboCop Cop Style BracesAroundHashParameters check":{"type":"method","name":"check","children":[],"call":[" opposite_style_detected "," add_offense "," correct_style_detected "," braces? "," all_hashes? "," braces? ! "," style == "," style "," offense "," check_context_dependent "," format ","arg loc expression ","arg loc ","arg parent ","arg source_range ","arg braces? ","arg braces? ! "," add_arg_offense "," check_no_braces "," check_braces "]}," RuboCop Cop Style BracesAroundHashParameters on_send":{"type":"method","name":"on_send","children":[],"call":[" check "," non_empty_hash? ","args last "," operator? ","method_name to_s end_with? ","method_name to_s ","node asgn_method_call? ","args last pairs empty? ! ","args last pairs empty? ","args last pairs ","args last hash_type? ","args empty? ","node arguments ","node last_argument ","node last_argument empty? ! ","node last_argument empty? ","node last_argument hash_type? ","node arguments? ","node operator_method? ","node assignment_method? ","args last s last ","args last s last pairs empty? ! ","args last s last pairs empty? ","args last s last pairs ","args last s last hash_type? ","args last s empty? ","node args last uments ","node last_args last ument ","node last_args last ument empty? ! ","node last_args last ument empty? ","node last_args last ument hash_type? ","node args last uments? "]}," RuboCop Cop Style Blocks operator?":{"type":"method","name":"operator?","children":[],"call":["method_name =~ "]}," RuboCop Cop Style Blocks parentheses?":{"type":"method","name":"parentheses?","children":[],"call":["send_node loc begin ","send_node loc "]}," RuboCop Cop Style Blocks get_block":{"type":"method","name":"get_block","children":[],"call":[" get_block ","node type "]}," RuboCop Cop Style Blocks correction":{"type":"method","name":"correction","children":[],"call":["corrector replace ","corrector insert_before ","b source_buffer source [] =~ ","b source_buffer source [] ","b begin_pos - ","b begin_pos ","b source_buffer source ","b source_buffer ","b is? ","node loc end ","node loc ","node loc begin "," lambda "]}," RuboCop Cop Style Blocks on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense ","block_begin != ","block_length == ","block_begin == ","block_length > ","node loc begin source ","node loc begin ","node loc ","Util  block_length "," ignored_node? ","node loc begin source  != ","Util  block_length  == ","node loc begin source  == ","Util  block_length  > ","Util  Util  block_length  "]}," RuboCop Cop Style Blocks on_send":{"type":"method","name":"on_send","children":[],"call":[" ignore_node "," operator? ! "," operator? "," parentheses? ! "," parentheses? "," get_block ","args last ","args any? "," get_ get_block  "]}," RuboCop Cop Style BlockNesting message":{"type":"method","name":"message","children":[],"call":[]}," RuboCop Cop Style BlockNesting check_nesting_level":{"type":"method","name":"check_nesting_level","children":[],"call":[" check_nesting_level ","child is_a? ","node children each ","node children "," ignore_node "," add_offense "," message "," part_of_ignored_node? "," max= ","current_level > ","node loc keyword is? ","node loc keyword ","node loc ","node loc respond_to? ","NESTING_BLOCKS  include? ","node type "]}," RuboCop Cop Style BlockNesting investigate":{"type":"method","name":"investigate","children":[],"call":[" check_nesting_level ","processed_source ast "," cop_config [] "," cop_config "]}," RuboCop Cop Style BlockComments autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector remove ","corrector replace ","contents source gsub gsub gsub ","contents source gsub gsub ","contents source gsub ","contents source ","contents length == ","contents length "," lambda ","Parser Source Range  new ","eq_end begin_pos ","eq_begin end_pos ","expr source_buffer ","expr end_pos ","expr end_pos - ","\n=end length ","expr resize ","=begin\n length ","comment loc expression ","comment loc "," parts ","contents length zero? ","Parser Source Range  new  source gsub gsub gsub ","Parser Source Range  new  source gsub gsub ","Parser Source Range  new  source gsub ","Parser Source Range  new  source ","Parser Source Range  new  length == ","Parser Source Range  new  length ","Parser Source Range  new  begin_pos ","expr resize  end_pos ","comment loc expression  source_buffer ","comment loc expression  end_pos ","comment loc expression  end_pos - ","comment loc expression  resize ","comment loc comment loc expression ession ","Parser Source Range  new  length zero? "]}," RuboCop Cop Style BlockComments investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense ","comment document? ","processed_source comments each ","processed_source comments ","processed_source each_comment "]}," RuboCop Cop Style BeginBlock on_preexe":{"type":"method","name":"on_preexe","children":[],"call":[" add_offense ","node loc keyword ","node loc "]}," RuboCop Cop Style Attr autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","node loc selector ","node loc "," lambda "," replacement_method ","Parser Source Range  new ","node_expr end_pos ","attr_expr end_pos ","node_expr source_buffer ","setter false_type? ","setter true_type? ","attr_name source_range ","node source_range "," range_between ","corrector remove ","node arguments ","node source_range  end_pos ","attr_name source_range  end_pos ","node source_range  source_buffer ","corrector Parser Source Range  new  ","corrector  range_between  "]}," RuboCop Cop Style Attr on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," command? ","args any? "," replacement_method ","node command? ","node arguments? "," class_eval? ! "," class_eval? ","node parent ","node parent class_type? ! ","node parent class_type? "," autocorrect ","node loc selector ","node loc "," message "," allowed_context? ","  message  "]}," RuboCop Cop Style AsciiIdentifiers investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense ","t pos ","t text ascii_only? ! ","t text ascii_only? ","t text ","t type == ","t type ","processed_source tokens each ","processed_source tokens "," first_offense_range ","token text ascii_only? ! ","token text ascii_only? ","token text ","token type == ","token type "]}," RuboCop Cop Style AsciiComments investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense ","comment text ascii_only? ","comment text ","processed_source comments each ","processed_source comments "," first_offense_range "," only_allowed_non_ascii_chars? ","processed_source each_comment "]}," RuboCop Cop Style ArrayJoin on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","arg_nodes [] type == ","arg_nodes [] type ","arg_nodes [] ","method_name == ","receiver_node type == ","receiver_node type ","arg_nodes first str_type? ","arg_nodes first ","receiver_node array_type? "," join_candidate? ","corrector replace ","join_arg source ","array source ","node loc selector ","node loc "]}," RuboCop Cop Style AndOr correction":{"type":"method","name":"correction","children":[],"call":["corrector replace ","node loc operator ","node loc ","node type == ","node type "," lambda ","corrector insert_after ","args last loc expression ","args last loc ","args last ","Parser Source Range  new ","begin_paren + ","expr loc selector end_pos ","expr loc selector ","expr loc ","expr loc expression source_buffer ","expr loc expression ","method_name to_s =~ ","method_name to_s ","expr loc begin source != ","expr loc begin source ","expr loc begin ","expr loc begin ! ","expr type == ","expr type ","(lvar :expr1) each "," correctable? "," correct_other ","expr assignment? ","expr return_type? "," correct_send ","expr send_type? ","expr loc selector end_pos  + "]}," RuboCop Cop Style AndOr process_logical_op":{"type":"method","name":"process_logical_op","children":[],"call":[" add_offense "," format ","OPS  [] ","op == ","node type to_s ","node type ","node loc operator source ","node loc operator ","node loc ","node operator ","node alternate_operator ","node logical_operator? ","node loc operator source  == ","node loc node loc operator source erator source ","node loc node loc operator source erator ","node node loc operator source erator ","node alternate_node loc operator source erator ","node logical_node loc operator source erator? "]}," RuboCop Cop Style AndOr on_or":{"type":"method","name":"on_or","children":[],"call":[" process_logical_op "," style == "," style "]}," RuboCop Cop Style AndOr on_and":{"type":"method","name":"on_and","children":[],"call":[" process_logical_op "," style == "," style "," process_logical_operator "]}," RuboCop Cop Style AlignParameters target_method_lineno":{"type":"method","name":"target_method_lineno","children":[],"call":["node loc begin line ","node loc begin ","node loc ","node loc selector line ","node loc selector ","node loc keyword line ","node loc keyword ","node defs_type? ","node def_type? "]}," RuboCop Cop Style AlignParameters base_column":{"type":"method","name":"base_column","children":[],"call":["args first loc column ","args first loc ","args first ","indentation_of_line + ","(str \"\\\\S.*\") match begin ","(str \"\\\\S.*\") match ","node loc expression source_buffer source_line ","node loc expression source_buffer ","node loc expression ","node loc "," target_method_lineno "," fixed_indentation? "," configured_indentation_width ","node source_range source_buffer source_line ","node source_range source_buffer ","node source_range "," display_column ","args first source_range ","(str \"\\S.*\") match begin  + ","indentation_of_node loc expression source_buffer source_line  + ","indentation_of_node source_range source_buffer source_line  + ","node loc expression source_buffer source_node loc expression source_buffer source_line  ","node loc expression source_buffer source_node source_range source_buffer source_line  "," target_method_node loc expression source_buffer source_line no "," target_method_node source_range source_buffer source_line no "," target_method_ target_method_lineno  ","node source_range source_buffer source_node loc expression source_buffer source_line  ","node source_range source_buffer source_node source_range source_buffer source_line  "]}," RuboCop Cop Style AlignParameters fixed_indentation?":{"type":"method","name":"fixed_indentation?","children":[],"call":[" cop_config [] == "," cop_config [] "," cop_config "]}," RuboCop Cop Style AlignParameters on_send":{"type":"method","name":"on_send","children":[],"call":[" check_alignment "," base_column ","args size <= ","args size ","method == ","args size < ","node arguments ","node method? ","node arguments size < ","node arguments size "]}," RuboCop Cop Style AlignHash good_alignment?":{"type":"method","name":"good_alignment?","children":[],"call":["v != ","@column_deltas values compact none? ","@column_deltas values compact ","@column_deltas values ","@column_deltas values compact all? "," column_deltas values all? "," column_deltas values "," column_deltas "]}," RuboCop Cop Style AlignHash adjust":{"type":"method","name":"adjust","children":[],"call":["corrector remove ","Parser Source Range  new ","range begin_pos ","range begin_pos - ","delta abs ","range source_buffer ","delta < ","corrector insert_before ","  * ","delta > "," range_between ","Parser Source Range  new  begin_pos "," range_between  begin_pos ","Parser Source Range  new  begin_pos - "," range_between  begin_pos - ","Parser Source Range  new  source_buffer "," range_between  source_buffer "," Parser Source Range  new _between ","  range_between _between "]}," RuboCop Cop Style AlignHash new_alignment":{"type":"method","name":"new_alignment","children":[],"call":[" fail "," cop_config [] "," cop_config ","SeparatorAlignment  new ","TableAlignment  new ","KeyAlignment  new "," raise "]}," RuboCop Cop Style AlignHash autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << "," adjust ","value loc expression ","value loc ","node loc operator ","node loc ","key loc expression ","key loc "," lambda ","@column_deltas [] ","node loc expression ","value nil? ","value source_range ","key source_range ","node source_range ","key_column -@ ","key_delta < ","key source_range column "," correct_key_value "," correct_no_value ","node value source_range ","node value ","node key source_range ","node key ","node value ! "," column_deltas [] "," column_deltas ","key source_range column  -@ ","key_column -@  < "]}," RuboCop Cop Style AlignHash alignment_for":{"type":"method","name":"alignment_for","children":[],"call":["pair loc operator is? ","pair loc operator ","pair loc "," alignment_for_colons "," alignment_for_hash_rockets ","pair hash_rocket? "]}," RuboCop Cop Style AlignHash multiline?":{"type":"method","name":"multiline?","children":[],"call":["node loc expression source include? ","node loc expression source ","node loc expression ","node loc "," begins_its_line? ! "," begins_its_line? ","child loc expression ","child loc ","node children [] find ","node children [] ","node children ","node children [] all? "]}," RuboCop Cop Style AlignHash explicit_hash?":{"type":"method","name":"explicit_hash?","children":[],"call":["node loc begin ","node loc "]}," RuboCop Cop Style AlignHash hash?":{"type":"method","name":"hash?","children":[],"call":["node type == ","node type ","node respond_to? ","node hash_type? "]}," RuboCop Cop Style AlignHash ignore_last_argument_hash?":{"type":"method","name":"ignore_last_argument_hash?","children":[],"call":[" explicit_hash? ! "," explicit_hash? "," cop_config [] "," cop_config "]}," RuboCop Cop Style AlignHash on_hash":{"type":"method","name":"on_hash","children":[],"call":[" add_offense "," good_alignment? "," alignment_for deltas "," alignment_for ","node children each_cons ","node children "," alignment_for deltas_for_first_pair ","@alignment_for_colons checkable_layout ","@alignment_for_hash_rockets checkable_layout ","node children first "," new_alignment "," multiline? ","node children empty? "," ignored_node? "," check_pairs ","node multiline? "," alignment_for_colons checkable_layout? "," alignment_for_colons "," alignment_for_hash_rockets checkable_layout? "," alignment_for_hash_rockets ","node single_line? ","node pairs empty? ","node pairs "," alignment_for deltas_for_node children first  "]}," RuboCop Cop Style AlignHash on_send":{"type":"method","name":"on_send","children":[],"call":[" ignore_node "," ignore_last_argument_hash? "," hash? ","node children last ","node children "," ignore_hash_argument? ","last_argument hash_type? "," double_splat? ","node last_argument "," ignore_node children last _hash? "," ignore_node last_argument _hash? ","node children last  hash_type? ","node last_argument  hash_type? ","node node children last  ","node node last_argument  "]}," RuboCop Cop Style AlignHash SeparatorAlignment value_delta":{"type":"method","name":"value_delta","children":[],"call":["first_value loc column - ","current_value loc column ","current_value loc ","first_value loc column ","first_value loc "]}," RuboCop Cop Style AlignHash SeparatorAlignment hash_rocket_delta":{"type":"method","name":"hash_rocket_delta","children":[],"call":["first_pair loc operator column - ","current_separator column ","first_pair loc operator column ","first_pair loc operator ","first_pair loc "]}," RuboCop Cop Style AlignHash SeparatorAlignment key_end_column":{"type":"method","name":"key_end_column","children":[],"call":["key loc column + ","key loc expression source length ","key loc expression source ","key loc expression ","key loc ","key loc column ","key source length ","key source "]}," RuboCop Cop Style AlignHash SeparatorAlignment key_delta":{"type":"method","name":"key_delta","children":[],"call":[" key_end_column - "," key_end_column "]}," RuboCop Cop Style AlignHash SeparatorAlignment deltas_for_first_pair":{"type":"method","name":"deltas_for_first_pair","children":[],"call":[]}," RuboCop Cop Style AlignHash TableAlignment spaced_separator":{"type":"method","name":"spaced_separator","children":[],"call":["node loc operator is? ","node loc operator ","node loc "]}," RuboCop Cop Style AlignHash TableAlignment value_delta":{"type":"method","name":"value_delta","children":[],"call":["correct_value_column - ","current_value loc column ","current_value loc ","first_key loc column + + ","first_key loc column + "," spaced_separator length "," spaced_separator ","first_key loc column ","first_key loc ","first_key loc column + +  - "]}," RuboCop Cop Style AlignHash TableAlignment hash_rocket_delta":{"type":"method","name":"hash_rocket_delta","children":[],"call":["first_pair loc column + + - ","current_separator column ","first_pair loc column + + ","first_pair loc column + ","first_pair loc column ","first_pair loc "]}," RuboCop Cop Style AlignHash TableAlignment key_delta":{"type":"method","name":"key_delta","children":[],"call":["first_pair loc column - ","current_pair loc column ","current_pair loc ","first_pair loc column ","first_pair loc "]}," RuboCop Cop Style AlignHash TableAlignment deltas_for_first_pair":{"type":"method","name":"deltas_for_first_pair","children":[],"call":[" value_delta - "," value_delta "," separator_delta ","first_pair loc operator ","first_pair loc ","key_widths max ","key loc expression source length ","key loc expression source ","key loc expression ","key loc ","node children map ","node children ","key source length ","key source ","  separator_delta  "]}," RuboCop Cop Style AlignHash AlignmentOfValues all_have_same_sparator?":{"type":"method","name":"all_have_same_sparator?","children":[],"call":["pair loc operator is? ","pair loc operator ","pair loc ","node children [] all? ","node children [] ","node children ","node children first loc operator source ","node children first loc operator ","node children first loc ","node children first "]}," RuboCop Cop Style AlignHash AlignmentOfValues any_pairs_on_the_same_line?":{"type":"method","name":"any_pairs_on_the_same_line?","children":[],"call":["lines_of_the_children uniq size < ","lines_of_the_children size ","lines_of_the_children uniq size ","lines_of_the_children uniq ","key loc line ","key loc ","node children map ","node children ","Util  begins_its_line? ! ","Util  begins_its_line? ","pair loc expression ","pair loc ","node children [] any? ","node children [] "]}," RuboCop Cop Style AlignHash AlignmentOfValues separator_delta":{"type":"method","name":"separator_delta","children":[],"call":[" hash_rocket_delta - "," hash_rocket_delta ","current_separator is? "]}," RuboCop Cop Style AlignHash AlignmentOfValues deltas":{"type":"method","name":"deltas","children":[],"call":[" value_delta - - "," value_delta - "," value_delta "," separator_delta ","current_pair loc operator ","current_pair loc "," key_delta ","  value_delta - -  - - ","  value_delta - -  - ","  value_delta - -  ","  separator_delta  ","  key_delta  "]}," RuboCop Cop Style AlignHash AlignmentOfValues checkable_layout":{"type":"method","name":"checkable_layout","children":[],"call":[" all_have_same_sparator? "," any_pairs_on_the_same_line? ! "," any_pairs_on_the_same_line? "," all_have_same_separator? "]}," RuboCop Cop Style AlignHash KeyAlignment deltas":{"type":"method","name":"deltas","children":[],"call":["first_pair loc column - ","current_pair loc column ","current_pair loc ","first_pair loc column ","first_pair loc ","current_pair loc line == ","prev_pair loc line ","prev_pair loc ","current_pair loc line ","Util  begins_its_line? ","current_pair loc expression ","current_pair source_range "]}," RuboCop Cop Style AlignHash KeyAlignment deltas_for_first_pair":{"type":"method","name":"deltas_for_first_pair","children":[],"call":[]}," RuboCop Cop Style AlignHash KeyAlignment checkable_layout":{"type":"method","name":"checkable_layout","children":[],"call":[]}," RuboCop Cop Style AlignArray on_array":{"type":"method","name":"on_array","children":[],"call":[" check_alignment ","node children "]}," RuboCop Cop Style Alias autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","old children first ","old children ","old loc expression ","old loc ","new children first ","new children ","new loc expression ","new loc ","corrector insert_after ","node loc keyword ","node loc "," lambda "," correct_alias_with_symbol_args "," correct_alias_to_alias_method "," style == "," style "," scope_type == "," scope_type "," correct_alias_method_to_alias ","node send_type? "]}," RuboCop Cop Style Alias on_alias":{"type":"method","name":"on_alias","children":[],"call":[" add_offense ","old type == ","old type ","new type == ","new type "," ignored_node? ","arg_ranges reduce "," format ","node children map ","node children ","(send\n  (send\n    (lvar :node) :children) :map) join ","a source [] ","a source ","node children map join "," bareword? ","node children none? "," style == "," style "," scope_type == "," scope_type ","node children any? ","scope_type == "," add_offense_for_args ","node each_child_node any? ","node each_child_node "," alias_method_possible? "," autocorrect ","node loc keyword ","node loc ","node children map  reduce ","  scope_type  == ","  scope_type  "," scope_type  == "]}," RuboCop Cop Style Alias on_block":{"type":"method","name":"on_block","children":[],"call":[" ignore_node "," on_node ","method_name == ","body each_node "]}," RuboCop Cop Style AccessorMethodName bad_writer_name?":{"type":"method","name":"bad_writer_name?","children":[],"call":["args to_a one? ","args to_a ","method_name start_with? "]}," RuboCop Cop Style AccessorMethodName bad_reader_name?":{"type":"method","name":"bad_reader_name?","children":[],"call":["args to_a empty? ","args to_a ","method_name start_with? "]}," RuboCop Cop Style AccessorMethodName check":{"type":"method","name":"check","children":[],"call":[" add_offense "," bad_writer_name? ","method_name to_s "," bad_reader_name? "]}," RuboCop Cop Style AccessModifierIndentation unexpected_indent_offset":{"type":"method","name":"unexpected_indent_offset","children":[],"call":["IndentationWidth CORRECT_INDENTATION  - "," expected_indent_offset "," configured_indentation_width - "," configured_indentation_width "]}," RuboCop Cop Style AccessModifierIndentation expected_indent_offset":{"type":"method","name":"expected_indent_offset","children":[],"call":[" style == "," style "," configured_indentation_width "]}," RuboCop Cop Style AccessModifierIndentation class_constructor?":{"type":"method","name":"class_constructor?","children":[],"call":["(str \"Class\") include? ","Util  const_name ","method_name == ","block_node children first ","block_node children "]}," RuboCop Cop Style AccessModifierIndentation message":{"type":"method","name":"message","children":[],"call":[" format ","node loc selector source ","node loc selector ","node loc "," style capitalize "," style "]}," RuboCop Cop Style AccessModifierIndentation check_modifier":{"type":"method","name":"check_modifier","children":[],"call":[" unrecognized_style_detected "," opposite_style_detected ","offset == "," unexpected_indent_offset "," add_offense "," correct_style_detected ","@column_delta == "," expected_indent_offset - "," expected_indent_offset ","access_modifier_start_col - ","send_node loc expression column ","send_node loc expression ","send_node loc ","send_node source_range column ","send_node source_range ","@column_delta zero? ","access_modifier_start_col -  == "," unexpected_indent_access_modifier_start_col -  "," expected_indent_offset -  == "," expected_indent_access_modifier_start_col -  - "," expected_indent_access_modifier_start_col -  ","send_node loc expression column  - ","send_node source_range column  - "," expected_indent_offset -  zero? "]}," RuboCop Cop Style AccessModifierIndentation check_body":{"type":"method","name":"check_body","children":[],"call":[" check_modifier ","modifiers each ","node loc expression column ","node loc expression ","node loc "," class modifier_node? "," class ","body children select ","body children ","body nil? "," modifier_node? ","node source_range column ","node source_range ","body each_child_node select ","body each_child_node "]}," RuboCop Cop Style AccessModifierIndentation modifier_node?":{"type":"method","name":"modifier_node?","children":[],"call":[]}," RuboCop Cop Style AccessModifierIndentation on_block":{"type":"method","name":"on_block","children":[],"call":[" check_body "," class_constructor? ","node class_constructor? "]}," RuboCop Cop Style AccessModifierIndentation on_module":{"type":"method","name":"on_module","children":[],"call":[" check_body "]}," RuboCop Cop Style AccessModifierIndentation on_sclass":{"type":"method","name":"on_sclass","children":[],"call":[" check_body "]}," RuboCop Cop Style AccessModifierIndentation on_class":{"type":"method","name":"on_class","children":[],"call":[" check_body "]}," RuboCop Cop Severity <=>":{"type":"method","name":"<=>","children":[],"call":[" level <=> ","other level "," level "]}," RuboCop Cop Severity hash":{"type":"method","name":"hash","children":[],"call":["@name hash "]}," RuboCop Cop Severity ==":{"type":"method","name":"==","children":[],"call":["@name == ","other name ","other is_a? "]}," RuboCop Cop Severity level":{"type":"method","name":"level","children":[],"call":["NAMES  index + ","NAMES  index "," name "]}," RuboCop Cop Severity code":{"type":"method","name":"code","children":[],"call":["@name to_s [] upcase ","@name to_s [] ","@name to_s "]}," RuboCop Cop Severity to_s":{"type":"method","name":"to_s","children":[],"call":["@name to_s "]}," RuboCop Cop Severity initialize":{"type":"method","name":"initialize","children":[],"call":[" freeze ","name freeze "," fail ","NAMES  include? ","Severity  name_from_code "," raise ","Severity  name_from_code  freeze ","Severity  Severity  name_from_code _from_code "]}," RuboCop Cop Severity name_from_code":{"type":"method","name":"name_from_code","children":[],"call":[]}," RuboCop Cop Rails Validation on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","BLACKLIST  include? ","receiver nil? "," format "," preferred_method ","node method_name ","node receiver ! ","node receiver ","DENYLIST  include? "]}," RuboCop Cop Rails ScopeArgs on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","second_arg type == ","second_arg type ","args [] ","args size == ","args size "," command? ","node command? ","second_arg send_type? "," scope? ","args []  type == ","args []  type ","args []  send_type? "]}," RuboCop Cop Rails ReadWriteAttribute message":{"type":"method","name":"message","children":[],"call":[" format ","method_name == ","node method? "]}," RuboCop Cop Rails ReadWriteAttribute on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","(sym :read_attribute) include? "," read_write_attribute? "]}," RuboCop Cop Rails Output on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","BLACKLIST  include? ","receiver nil? ","args empty? ! ","args empty? "," output? ","node arguments? "," io_output? "]}," RuboCop Cop Rails HasAndBelongsToMany on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," command? ","node command? "]}," RuboCop Cop Rails Delegate private_or_protected_inline":{"type":"method","name":"private_or_protected_inline","children":[],"call":[" processed_source [] strip =~ "," processed_source [] strip "," processed_source [] ","line - "," processed_source "]}," RuboCop Cop Rails Delegate private_or_protected_before":{"type":"method","name":"private_or_protected_before","children":[],"call":["(send\n  (send\n    (send\n      (send nil :processed_source) :[]\n      (irange\n        (int 0)\n        (lvar :line))) :map\n    (block-pass\n      (sym :strip))) :&\n  (array\n    (str \"private\")\n    (str \"protected\"))) any? "," processed_source [] map & "," processed_source [] map "," processed_source [] "," processed_source "]}," RuboCop Cop Rails Delegate private_or_protected_delegation":{"type":"method","name":"private_or_protected_delegation","children":[],"call":[" private_or_protected_inline "," private_or_protected_before ","node loc line ","node loc ","node first_line "," private_or_protected_innode loc line  "," private_or_protected_innode first_line  ","node loc node loc line  ","node loc node first_line  ","node first_node loc line  ","node first_node first_line  "]}," RuboCop Cop Rails Delegate prefixed_method_name":{"type":"method","name":"prefixed_method_name","children":[],"call":["(lvar :target) join to_sym ","(lvar :target) join ","(send\n  (send\n    (lvar :body) :receiver) :method_name) join to_sym ","(send\n  (send\n    (lvar :body) :receiver) :method_name) join ","body method_name ","body receiver method_name ","body receiver "]}," RuboCop Cop Rails Delegate method_name_matches?":{"type":"method","name":"method_name_matches?","children":[],"call":["method_name == "," prefixed_method_name "," include_prefix_case? ","body method_name "]}," RuboCop Cop Rails Delegate arguments_match?":{"type":"method","name":"arguments_match?","children":[],"call":["arg_array map == ","argument_array map ","arg_array map ","arg_array == ","arg_array size == ","argument_array size ","arg_array size "," Array ","body arguments ","arg children == ","argument children ","arg children ","argument lvar_type? ","arg arg_type? ","arg_array zip all? ","arg_array zip ","arg_array size != "," Array  map == "," Array  map ","body arguments  map "," Array  == "," Array  size == "," Array  size ","body arguments  size "," Array  zip all? "," Array  zip "," Array  size != "]}," RuboCop Cop Rails Delegate delegate?":{"type":"method","name":"delegate?","children":[],"call":["n is_a? ","receiver children none? ","receiver children ","receiver type == ","receiver type ","receiver is_a? ","receiver child_nodes empty? ","receiver child_nodes ","receiver send_type? ","receiver respond_to? ","body receiver receiver ! ","body receiver receiver ","body receiver ","body receiver send_type? ","body send_type? "]}," RuboCop Cop Rails Delegate trivial_delegate?":{"type":"method","name":"trivial_delegate?","children":[],"call":[" arguments_match? "," method_name_matches? "," delegate? ","body csend_type? ! ","body csend_type? ","def_node body ","def_node arguments ","def_node method_name "]}," RuboCop Cop Rails Delegate autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","delegation join ","node loc expression ","node loc "," lambda ","delegation << ","method_name == "," prefixed_method_name ","body children [] children [] ","body children [] children ","body children [] ","body children "," private_or_protected_delegation "," trivial_delegate? ","node source_range ","body receiver method_name ","body receiver ","body method_name ","node method_name == ","node body ","node method_name ","node body receiver method_name ","node body receiver ","node body method_name "]}," RuboCop Cop Rails Delegate check":{"type":"method","name":"check","children":[],"call":[" add_offense "," private_or_protected_delegation "," trivial_delegate? "]}," RuboCop Cop Rails DefaultScope on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," lambda_or_proc? ","first_arg type != ","first_arg type ","args [] ","args size == ","args size "," command? ","args []  type != ","args []  type "]}," RuboCop Cop Rails ActionFilter preferred_method":{"type":"method","name":"preferred_method","children":[],"call":[" good_methods [] "," bad_methods index ","method to_sym "," bad_methods "," good_methods "]}," RuboCop Cop Rails ActionFilter good_methods":{"type":"method","name":"good_methods","children":[],"call":[" style == "," style "]}," RuboCop Cop Rails ActionFilter bad_methods":{"type":"method","name":"bad_methods","children":[],"call":[" style == "," style "]}," RuboCop Cop Rails ActionFilter offending_method?":{"type":"method","name":"offending_method?","children":[],"call":[" bad_methods include? "," bad_methods "]}," RuboCop Cop Rails ActionFilter check_method_node":{"type":"method","name":"check_method_node","children":[],"call":[" add_offense "," format "," preferred_method "," offending_method? "," bad_methods include? ","node method_name "," bad_methods "]}," RuboCop Cop Rails ActionFilter autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace "," preferred_method to_s "," preferred_method ","node loc selector source ","node loc selector ","node loc "," lambda "]}," RuboCop Cop Rails ActionFilter on_send":{"type":"method","name":"on_send","children":[],"call":[" check_method_node ","receiver nil? ","node receiver "]}," RuboCop Cop Rails ActionFilter on_block":{"type":"method","name":"on_block","children":[],"call":[" check_method_node ","node send_node "]}," RuboCop Cop Offense <=>":{"type":"method","name":"<=>","children":[],"call":["result == "," send <=> ","other send "," send ","(sym :line) each ","COMPARISON_ATTRIBUTES  each ","result zero? "," public_send <=> ","other public_send "," public_send "," send <=>  == "," public_send <=>  == "," send <=>  zero? "," public_send <=>  zero? "]}," RuboCop Cop Offense ==":{"type":"method","name":"==","children":[],"call":[" cop_name == ","other cop_name "," cop_name "," message == ","other message "," message "," column == ","other column "," column "," line == ","other line "," line "," severity == ","other severity "," severity "," send == ","other send "," send ","COMPARISON_ATTRIBUTES  all? "," public_send == ","other public_send "," public_send "]}," RuboCop Cop Offense real_column":{"type":"method","name":"real_column","children":[],"call":[" column + "," column "]}," RuboCop Cop Offense to_s":{"type":"method","name":"to_s","children":[],"call":[" format "," message "," real_column "," line "," severity code "," severity "]}," RuboCop Cop Offense initialize":{"type":"method","name":"initialize","children":[],"call":[" freeze ","corrected freeze ","cop_name freeze ","message freeze ","location column freeze ","location column ","location line freeze ","location line ","location freeze ","RuboCop Cop Severity  new "]}," RuboCop Cop Lint UnusedArgument check_argument":{"type":"method","name":"check_argument","children":[],"call":[" add_offense ","variable declaration_node "," message ","variable referenced? ","variable name to_s start_with? ","variable name to_s ","variable name ","variable should_be_unused? "," variable_used? "," autocorrect ","variable declaration_node loc name ","variable declaration_node loc ","  message  "]}," RuboCop Cop Lint UnusedArgument after_leaving_scope":{"type":"method","name":"after_leaving_scope","children":[],"call":[" check_argument ","scope variables each_value ","scope variables "]}," RuboCop Cop Lint UnusedArgument autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","node loc expression ","node loc "," lambda ","node loc expression source sub ","node loc expression source ","corrector insert_before ","node loc name ","(sym :kwarg) include? ","node type ","corrector remove "," range_with_surrounding_comma "," range_with_surrounding_space ","node source_range ","node blockarg_type? ","  range_with_surrounding_comma _with_surrounding_comma ","  range_with_surrounding_space _with_surrounding_comma ","  range_with_surrounding_comma _with_surrounding_space ","  range_with_surrounding_space _with_surrounding_space ","node source_ range_with_surrounding_comma  ","node source_ range_with_surrounding_space  "]}," RuboCop Cop Lint UnusedArgument join_force?":{"type":"method","name":"join_force?","children":[],"call":["force_class == "]}," RuboCop Cop SurroundingSpace token_table":{"type":"method","name":"token_table","children":[],"call":["table []= ","t pos column ","t pos ","t pos line ","@processed_source tokens each_with_index ","@processed_source tokens ","table [] []= ","table [] ","t column ","t line "," processed_source tokens each_with_index "," processed_source tokens "," processed_source "]}," RuboCop Cop SurroundingSpace index_of_last_token":{"type":"method","name":"index_of_last_token","children":[],"call":[" token_table [] ","e line "," token_table ","(erange\n  (int 0)\n  (send\n    (lvar :e) :column)) to_a reverse find ","(erange\n  (int 0)\n  (send\n    (lvar :e) :column)) to_a reverse ","(erange\n  (int 0)\n  (send\n    (lvar :e) :column)) to_a ","e column ","node loc expression end ","node loc expression ","node loc "," token_table [] [] ","(erange\n  (int 0)\n  (send\n    (lvar :e) :column)) to_a reverse_each ","node source_range end ","node source_range ","table_row [] ","(erange\n  (int 0)\n  (send\n    (lvar :range) :last_column)) reverse_each ","range last_column ","range last_line "," toknode loc expression end n_tablnode loc expression end  [] "," toknode source_range end n_tablnode source_range end  [] ","node loc expression end  linnode loc expression end  ","node source_range end  linnode source_range end  "," toknode loc expression end n_tablnode loc expression end  "," toknode source_range end n_tablnode source_range end  ","(node loc expression end rangnode loc expression end \n  (int 0)\n  (snode loc expression end nd\n    (lvar :node loc expression end ) :column)) to_a rnode loc expression end vnode loc expression end rsnode loc expression end  find ","(node source_range end rangnode source_range end \n  (int 0)\n  (snode source_range end nd\n    (lvar :node source_range end ) :column)) to_a rnode source_range end vnode source_range end rsnode source_range end  find ","(enode source_range \n  (int 0)\n  (send\n    (lvar :e) :column)) to_a reverse find ","(node loc expression end rangnode loc expression end \n  (int 0)\n  (snode loc expression end nd\n    (lvar :node loc expression end ) :column)) to_a rnode loc expression end vnode loc expression end rsnode loc expression end  ","(node source_range end rangnode source_range end \n  (int 0)\n  (snode source_range end nd\n    (lvar :node source_range end ) :column)) to_a rnode source_range end vnode source_range end rsnode source_range end  ","(enode source_range \n  (int 0)\n  (send\n    (lvar :e) :column)) to_a reverse ","(node loc expression end rangnode loc expression end \n  (int 0)\n  (snode loc expression end nd\n    (lvar :node loc expression end ) :column)) to_a ","(node source_range end rangnode source_range end \n  (int 0)\n  (snode source_range end nd\n    (lvar :node source_range end ) :column)) to_a ","(enode source_range \n  (int 0)\n  (send\n    (lvar :e) :column)) to_a ","node loc expression end  column ","node source_range end  column ","nodnode loc expression end  loc node loc expression end xprnode loc expression end ssion node loc expression end nd ","nodnode source_range end  loc node source_range end xprnode source_range end ssion node source_range end nd ","nodnode loc expression end  loc node loc expression end xprnode loc expression end ssion ","nodnode source_range end  loc node source_range end xprnode source_range end ssion ","nodnode loc expression end  loc ","nodnode source_range end  loc "," toknode loc expression end n_tablnode loc expression end  [] [] "," toknode source_range end n_tablnode source_range end  [] [] ","(node loc expression end rangnode loc expression end \n  (int 0)\n  (snode loc expression end nd\n    (lvar :node loc expression end ) :column)) to_a rnode loc expression end vnode loc expression end rsnode loc expression end _node loc expression end ach ","(node source_range end rangnode source_range end \n  (int 0)\n  (snode source_range end nd\n    (lvar :node source_range end ) :column)) to_a rnode source_range end vnode source_range end rsnode source_range end _node source_range end ach ","(enode source_range \n  (int 0)\n  (send\n    (lvar :e) :column)) to_a reverse_each ","nodnode loc expression end  sourcnode loc expression end _rangnode loc expression end  node loc expression end nd ","nodnode source_range end  sourcnode source_range end _rangnode source_range end  node source_range end nd ","node source_node source_range  end ","nodnode loc expression end  sourcnode loc expression end _rangnode loc expression end  ","nodnode source_range end  sourcnode source_range end _rangnode source_range end  ","node source_node source_range  ","tablnode loc expression end _row [] ","tablnode source_range end _row [] "," token_table []  [] ","(node loc expression end rangnode loc expression end \n  (int 0)\n  (snode loc expression end nd\n    (lvar :rangnode loc expression end ) :last_column)) rnode loc expression end vnode loc expression end rsnode loc expression end _node loc expression end ach ","(node source_range end rangnode source_range end \n  (int 0)\n  (snode source_range end nd\n    (lvar :rangnode source_range end ) :last_column)) rnode source_range end vnode source_range end rsnode source_range end _node source_range end ach ","(enode source_range \n  (int 0)\n  (send\n    (lvar :node source_range ) :last_column)) reverse_each ","rangnode loc expression end  last_column ","rangnode source_range end  last_column ","node source_range  last_column ","rangnode loc expression end  last_linnode loc expression end  ","rangnode source_range end  last_linnode source_range end  ","node source_range  last_line "]}," RuboCop Cop SurroundingSpace index_of_first_token":{"type":"method","name":"index_of_first_token","children":[],"call":[" token_table [] ","b column ","b line "," token_table ","node loc expression begin ","node loc expression ","node loc "," token_table [] [] ","node source_range begin ","node source_range ","range column ","range line "," token_tanode loc expression begin le [] "," token_tanode source_range begin le [] ","node loc expression begin  column ","node source_range begin  column ","node loc expression begin  line ","node source_range begin  line "," token_tanode loc expression begin le "," token_tanode source_range begin le ","node loc expression node loc expression begin egin ","node loc expression node source_range begin egin "," token_tanode loc expression begin le [] [] "," token_tanode source_range begin le [] [] ","node source_range node loc expression begin egin ","node source_range node source_range begin egin ","node source_node source_range  begin ","node source_node source_range  ","node source_range  column ","node source_range  line "]}," RuboCop Cop SurroundingSpace space_between?":{"type":"method","name":"space_between?","children":[],"call":["char_preceding_2nd_token =~ ","t2 pos line > ","t1 pos line ","t1 pos ","t2 pos line ","t2 pos ","@processed_source [] [] ","t2 pos column - ","t2 pos column ","@processed_source [] ","t2 pos line - ","t1 type != ","t1 type ","char_preceding_2nd_token == ","between =~ ","Parser Source Range  new source ","Parser Source Range  new ","t2 pos begin_pos ","t1 pos end_pos ","t1 pos source_buffer ","t1 pos source_buffer source match ","t1 pos source_buffer source ","left_bracket_token end_pos + == ","right_bracket_token begin_pos ","left_bracket_token end_pos + ","left_bracket_token end_pos "," processed_source buffer source [] == "," processed_source buffer source [] "," processed_source buffer source "," processed_source buffer "," processed_source ","@processed_source [] []  =~ ","@processed_source [] []  == ","Parser Source Range  new source  =~ "]}," RuboCop Cop StringHelp on_regexp":{"type":"method","name":"on_regexp","children":[],"call":[" ignore_node "]}," RuboCop Cop StringHelp on_str":{"type":"method","name":"on_str","children":[],"call":[" correct_style_detected "," opposite_style_detected "," add_offense "," offense? "," part_of_ignored_node? ","node loc begin ","node loc ","node loc respond_to? "," autocorrect "," respond_to? "]}," RuboCop Cop StatementModifier body_has_comment?":{"type":"method","name":"body_has_comment?","children":[],"call":["comment_lines include? ","body loc expression line ","body loc expression ","body loc ","comments map map ","comments map "," processed_source comments map map "," processed_source comments map "," processed_source comments "," processed_source "," comment_lines include? "," comment_lines ","body source_range line ","body source_range ","comments map map  include? "," processed_source comments map map  include? "," comments map map  include? ","  processed_source comments map map  include? "," comments map map  ","  processed_source comments map map  "]}," RuboCop Cop StatementModifier body_length":{"type":"method","name":"body_length","children":[],"call":["body loc expression size ","body loc expression ","body loc ","body source_range size ","body source_range "]}," RuboCop Cop StatementModifier length":{"type":"method","name":"length","children":[],"call":["sexp loc expression source lines to_a size ","sexp loc expression source lines to_a ","sexp loc expression source lines ","sexp loc expression source ","sexp loc expression ","sexp loc ","node loc expression source lines to_a size ","node loc expression source lines to_a ","node loc expression source lines ","node loc expression source ","node loc expression ","node loc ","node loc expression source lines grep size ","node loc expression source lines grep ","node source lines grep size ","node source lines grep ","node source lines ","node source "]}," RuboCop Cop StatementModifier max_line_length":{"type":"method","name":"max_line_length","children":[],"call":[" config for_cop [] "," config for_cop "," config "," cop_config [] "," cop_config "]}," RuboCop Cop StatementModifier check":{"type":"method","name":"check","children":[],"call":[" body_has_comment? ! "," body_has_comment? ","total <= "," max_line_length ","indentation + + + + + ","indentation + + + + ","indentation + + + ","indentation + + ","indentation + ","cond loc expression size ","cond loc expression ","cond loc ","sexp loc keyword size ","sexp loc keyword ","sexp loc ","sexp loc keyword column "," on_node ","body_length == "," body_length "," length > "," length ","sexp loc keyword source ","indentation + + + + +  <= ","sexp loc keyword column  + + + + + ","sexp loc keyword column  + + + + ","sexp loc keyword column  + + + ","sexp loc keyword column  + + ","sexp loc keyword column  + "," body_length  == ","  body_length  "]}," RuboCop Cop SpaceInside autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector remove "," lambda "]}," RuboCop Cop SpaceInside investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense "," format ","Parser Source Range  new ","t2 pos begin_pos ","t2 pos ","t1 pos end_pos ","t1 pos ","processed_source buffer "," space_between? ","t2 pos line == ","t1 pos line ","t2 pos line ","t2 type == ","t2 type ","t1 type == ","t1 type ","processed_source tokens each_cons ","processed_source tokens "," specifics ","brackets kind ","brackets right_side? ","brackets left_side? ","Brackets  new "," each_extraneous_space ","Brackets  new  kind ","Brackets  new  right_side? ","Brackets  new  left_side? "]}," RuboCop Cop SpaceAfterPunctuation autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","token pos source + ","token pos source ","token pos "," lambda "]}," RuboCop Cop SpaceAfterPunctuation offset":{"type":"method","name":"offset","children":[],"call":[]}," RuboCop Cop SpaceAfterPunctuation investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense "," format "," kind ","t1 pos ","(sym :tRPAREN) include? ! ","(sym :tRPAREN) include? ","t2 type ","t2 pos column == ","t1 pos column + "," offset ","t1 pos column ","t2 pos column ","t2 pos ","t1 pos line == ","t2 pos line ","t1 pos line ","processed_source tokens each_cons ","processed_source tokens ","(and\n  (send\n    (send\n      (lvar :t2) :type) :==\n    (sym :tRCURLY))\n  (send nil :space_forbidden_before_rcurly?)) ! "," space_forbidden_before_rcurly? ","t2 type == ","token pos "," each_missing_space "]}," RuboCop Cop SafeAssignment safe_assignment_allowed?":{"type":"method","name":"safe_assignment_allowed?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop SafeAssignment safe_assignment?":{"type":"method","name":"safe_assignment?","children":[],"call":["method_name to_s end_with? ","method_name to_s ","child type ","node children first ","node children ","node children size == ","node children size ","node type == ","node type ","node children first  type ","node node children first ren first ","node node children first ren ","node node children first ren size == ","node node children first ren size "]}," RuboCop Cop PercentLiteral type":{"type":"method","name":"type","children":[],"call":["node loc begin source [] ","node loc begin source ","node loc begin ","node loc "]}," RuboCop Cop PercentLiteral begin_source":{"type":"method","name":"begin_source","children":[],"call":["node loc begin source ","node loc begin ","node loc ","node loc respond_to? "]}," RuboCop Cop PercentLiteral process":{"type":"method","name":"process","children":[],"call":[" on_percent_literal "," percent_literal? ","types include? "," type "]}," RuboCop Cop PercentLiteral percent_literal?":{"type":"method","name":"percent_literal?","children":[],"call":["begin_source start_with? "," begin_source "," begin_source  start_with? ","  begin_source  "]}," RuboCop Cop ParserDiagnostic investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense ","d level ","d location ","d message capitalize ","d message "," alternative_message "," respond_to? "," relevant_diagnostic? ","processed_source diagnostics each ","processed_source diagnostics "," find_offense_node_by ","d d message capitalize  capitalize ","d  alternative_message  capitalize ","d d message capitalize  ","d  alternative_message  "," alternative_d message capitalize  "," alternative_ alternative_message  "]}," RuboCop Cop NegativeConditional check":{"type":"method","name":"check","children":[],"call":[" add_offense ","(and\n  (send\n    (send\n      (lvar :node) :loc) :respond_to?\n    (sym :else))\n  (send\n    (send\n      (lvar :node) :loc) :else)) ! ","node loc else ","node loc ","node loc respond_to? ","method == ","condition type == ","condition type ","condition children last ","condition children ","condition children last  type == ","condition children last  type ","condition children last  children last ","condition children last  children "]}," RuboCop Cop IfThenElse check":{"type":"method","name":"check","children":[],"call":[" add_offense "," error_message "," offending_line ","node loc expression source =~ ","node loc expression source ","node loc expression ","node loc "]}," RuboCop Cop IfThenElse on_unless":{"type":"method","name":"on_unless","children":[],"call":[" check "]}," RuboCop Cop IfThenElse on_if":{"type":"method","name":"on_if","children":[],"call":[" check "]}," RuboCop Cop IfNode if_else?":{"type":"method","name":"if_else?","children":[],"call":["node loc else ","node loc ","node loc respond_to? "]}," RuboCop Cop IfNode elsif?":{"type":"method","name":"elsif?","children":[],"call":["node loc keyword is? ","node loc keyword ","node loc ","node loc respond_to? "]}," RuboCop Cop IfNode ternary_op?":{"type":"method","name":"ternary_op?","children":[],"call":["node loc respond_to? ","node loc "]}," RuboCop Cop IfNode modifier_if?":{"type":"method","name":"modifier_if?","children":[],"call":["node loc end nil? ","node loc end ","node loc ","node loc respond_to? ","(str \"if\") include? ","node loc keyword source ","node loc keyword ","node modifier_form? "]}," RuboCop Cop ConfigurableNaming after_dot":{"type":"method","name":"after_dot","children":[],"call":["Parser Source Range  new ","begin_pos + ","expr source_buffer ","expr begin_pos + ","expr begin_pos ","match [] length ","match [] ","(str \"\\\\A\") match ","expr source ","node loc expression ","node loc ","expr begin_pos +  + ","node loc expression  source_buffer ","expr expr begin_pos +  + ","node loc expression  begin_pos + ","expr expr begin_pos +  ","node loc expression  begin_pos ","(str \"\\A\") match  [] length ","(str \"\\A\") match  [] ","(str \"\\\\A\") (str \"\\A\") match  ","node loc expression  source ","node loc node loc expression ession "]}," RuboCop Cop ConfigurableNaming matches_config?":{"type":"method","name":"matches_config?","children":[],"call":["name =~ "," style == "," style "]}," RuboCop Cop ConfigurableNaming check":{"type":"method","name":"check","children":[],"call":[" opposite_style_detected "," add_offense "," message "," style "," correct_style_detected "," matches_config? "," operator? ","range source to_sym ","range source "]}," RuboCop Cop ConfigurableMax parameter_name":{"type":"method","name":"parameter_name","children":[],"call":[]}," RuboCop Cop ConfigurableMax max=":{"type":"method","name":"max=","children":[],"call":["cfg []= "," parameter_name ","(send\n  (lvar :cfg) :[]\n  (send nil :parameter_name)) max ","cfg [] "," config_to_allow_offenses "," max_parameter_name ","(send\n  (lvar :cfg) :[]\n  (send nil :max_parameter_name)) max ","cfg [] []= ","(lvar :current_max) max ","cfg [] [] "," config_to_allow_offenses  []= ","(send\n  (lvar : config_to_allow_offenses ) :[]\n  (send nil :parameter_name)) max "," config_to_allow_offenses  [] ","(send\n  (lvar : config_to_allow_offenses ) :[]\n  (send nil :max_parameter_name)) max "," config_to_allow_offenses  [] []= ","(lvar :cfg [] [] ) max "," config_to_allow_offenses  [] [] "]}," RuboCop Cop ConfigurableEnforcedStyle parameter_name":{"type":"method","name":"parameter_name","children":[],"call":[]}," RuboCop Cop ConfigurableEnforcedStyle alternative_style":{"type":"method","name":"alternative_style","children":[],"call":["a first ","a last "," style == "," style "," fail ","a size != ","a size "," cop_config [] map "," cop_config [] "," cop_config ","(send\n  (send nil :supported_styles) :-\n  (array\n    (send nil :style))) first "," supported_styles - "," supported_styles "," supported_styles size != "," supported_styles size "," raise "," alternative_styles first "," alternative_styles "," cop_config [] map  first "," cop_config [] map  l cop_config [] map st "," f cop_config [] map il "," cop_config [] map  size != "," cop_config [] map  size "," cop_config [] m cop_config [] map p ","(send\n  (send nil :supported_styles) :-\n  ( cop_config [] map rr cop_config [] map y\n    (send nil :style))) first "," r cop_config [] map ise ","  cop_config [] map ltern cop_config [] map tive_styles first ","  cop_config [] map ltern cop_config [] map tive_styles "]}," RuboCop Cop ConfigurableEnforcedStyle style":{"type":"method","name":"style","children":[],"call":[" fail ","s to_sym "," cop_config [] include? "," cop_config [] "," cop_config "," parameter_name "," supported_styles include? "," supported_styles "," cop_config [] to_sym "," raise "," style_parameter_name "," cop_config []  to_ cop_config [] ym "," cop_config [] to_sym  to_ cop_config [] to_sym ym ","  cop_config [] upported_ cop_config [] tyle cop_config []  include? ","  cop_config [] to_sym upported_ cop_config [] to_sym tyle cop_config [] to_sym  include? ","  cop_config [] upported_ cop_config [] tyle cop_config []  ","  cop_config [] to_sym upported_ cop_config [] to_sym tyle cop_config [] to_sym  "," cop_config [] to_ cop_config [] ym "," cop_config [] to_ cop_config [] to_sym ym "," rai cop_config [] e "," rai cop_config [] to_sym e ","  cop_config [] tyle_parameter_name ","  cop_config [] to_sym tyle_parameter_name "]}," RuboCop Cop ConfigurableEnforcedStyle unrecognized_style_detected":{"type":"method","name":"unrecognized_style_detected","children":[],"call":[" config_to_allow_offenses= "]}," RuboCop Cop ConfigurableEnforcedStyle both_styles_detected":{"type":"method","name":"both_styles_detected","children":[],"call":[" config_to_allow_offenses= "]}," RuboCop Cop ConfigurableEnforcedStyle correct_style_detected":{"type":"method","name":"correct_style_detected","children":[],"call":[" both_styles_detected "," config_to_allow_offenses [] "," parameter_name "," config_to_allow_offenses "," style_detected "," style "]}," RuboCop Cop ConfigurableEnforcedStyle opposite_style_detected":{"type":"method","name":"opposite_style_detected","children":[],"call":[" both_styles_detected "," config_to_allow_offenses [] "," config_to_allow_offenses "," alternative_style to_s "," alternative_style "," parameter_name "," style_detected "]}," RuboCop Cop CodeLength irrelevant_line":{"type":"method","name":"irrelevant_line","children":[],"call":[" comment_line? "," count_comments? ! "," count_comments? ","source_line blank? "]}," RuboCop Cop CodeLength check":{"type":"method","name":"check","children":[],"call":[" max= "," add_offense "," format "," max_length "," message ","length > "," code_length "," max_ code_length  "," code_length  > "," code_ code_length  "]}," RuboCop Cop CodeLength count_comments?":{"type":"method","name":"count_comments?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop CodeLength max_length":{"type":"method","name":"max_length","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop CheckMethods visibility_and_def_on_same_line?":{"type":"method","name":"visibility_and_def_on_same_line?","children":[],"call":["(sym :def) include? ","args first type ","args first ","args size == ","args size ","(sym :public) include? ","receiver ! "]}," RuboCop Cop CheckMethods on_defs":{"type":"method","name":"on_defs","children":[],"call":[" check "]}," RuboCop Cop CheckMethods on_def":{"type":"method","name":"on_def","children":[],"call":[" check "]}," RuboCop Cop CheckAssignment on_send":{"type":"method","name":"on_send","children":[],"call":[" check_assignment ","rhs is_a? ","method_name to_s end_with? ","method_name to_s ","node children last ","node children ","node asgn_method_call? "," extract_rhs ","node setter_method? ","node children last  is_a? "," extract_rhs  is_a? "," extract_node children last  "," extract_ extract_rhs  "]}," RuboCop Cop CheckAssignment on_op_asgn":{"type":"method","name":"on_op_asgn","children":[],"call":[" check_assignment "]}," RuboCop Cop CheckAssignment on_casgn":{"type":"method","name":"on_casgn","children":[],"call":[" check_assignment "]}," RuboCop Cop AutocorrectUnlessChangingAST rewrite_node":{"type":"method","name":"rewrite_node","children":[],"call":["Corrector  new rewrite ","Corrector  new ","processed_source buffer "," correction ","processed_source ast ","SourceParser  parse ","node loc expression source ","node loc expression ","node loc ","ProcessedSource  new ","ps buffer ","ps ast "," parse ","node source ","Corre correction tor  new rewrite ","Corre correction tor  new ","pro correction essed_sour correction e buffer ","SourceParser  parse  buffer ","ProcessedSource  new  buffer ","  correction orre correction tion ","pro correction essed_sour correction e ast ","SourceParser  parse  ast ","ProcessedSource  new  ast ","Sour correction eParser  parse ","node lo correction  expression sour correction e ","node lo correction  expression ","node lo correction  ","Pro correction essedSour correction e  new "," parse  buffer "," parse  ast ","node sour correction e "]}," RuboCop Cop AutocorrectUnlessChangingAST autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << "," fail ","node != ","SourceParser  parse ast ","SourceParser  parse "," rewrite_node "," correction ","ProcessedSource  new ast ","ProcessedSource  new "," ast_for != "," ast_for ","node loc expression source ","node loc expression ","node loc "," syntax_error? "," processed_source ast != "," processed_source ast "," processed_source ","pre + + ","pre + ","current_buffer_src [] ","replaced_range end_pos ","replaced_range begin_pos "," processed_source buffer source "," processed_source buffer ","INLINE_BEGIN  process != ","INLINE_BEGIN  process ","new_processed_src ast ","new_processed_src ast ! "," parse "," processed_source buffer name ","node source_range ","@ correction orre correction tions << ","Sour correction eParser  parse ast ","Sour correction eParser  parse ","  correction orre correction tion ","Pro correction essedSour correction e  new ast ","Pro correction essedSour correction e  new ","node lo correction  expression sour correction e ","node loc excurrent_buffer_src [] ssion source ","node lo correction  expression ","node loc excurrent_buffer_src [] ssion ","node lo correction  "," pro correction essed_sour correction e ast != "," pro correction essed_sour correction e ast "," pro correction essed_sour correction e ","current_buffer_src []  + + ","current_buffer_src []  + "," correction urrent_buffer_sr correction  [] "," processed_source buffer source  [] ","repla correction ed_range end_pos ","node loc expression  end_pos ","node source_range  end_pos ","repla correction ed_range begin_pos ","node loc expression  begin_pos ","node source_range  begin_pos "," pro correction essed_sour correction e buffer sour correction e "," pro correction essed_sour correction e buffer ","INLINE_BEGIN  pro correction ess != ","INLINE_BEGIN  pro correction ess ","new_pro correction essed_sr correction  ast ","ProcessedSource  new  ast "," parse  ast ","new_pro correction essed_sr correction  ast ! ","ProcessedSource  new  ast ! "," parse  ast ! "," pro correction essed_sour correction e buffer name ","node sour correction e_range "]}," RuboCop Cop AutocorrectAlignment each_line":{"type":"method","name":"each_line","children":[],"call":["line length ","expr begin_pos + ","expr begin_pos ","expr source each_line ","expr source "]}," RuboCop Cop AutocorrectAlignment remove":{"type":"method","name":"remove","children":[],"call":["range source =~ ","range source ","Parser Source Range  new ","range end_pos + ","range end_pos ","range begin_pos + ","range begin_pos ","range source_buffer ","corrector remove ","StringIO  new "," range_between ","Parser Source Range  new  source =~ "," range_between  source =~ ","Parser Source Range  new  source "," range_between  source ","Parser Source Range  new  end_pos + "," range_between  end_pos + ","Parser Source Range  new  end_pos "," range_between  end_pos ","Parser Source Range  new  begin_pos + "," range_between  begin_pos + ","Parser Source Range  new  begin_pos "," range_between  begin_pos ","Parser Source Range  new  source_buffer "," range_between  source_buffer "," Parser Source Range  new _between ","  range_between _between "]}," RuboCop Cop AutocorrectAlignment calculate_range":{"type":"method","name":"calculate_range","children":[],"call":["Parser Source Range  new ","pos_to_remove + ","column_delta abs ","expr source_buffer ","line_begin_pos - ","column_delta > ","expr source_buffer source [] =~ ","expr source_buffer source [] ","expr source_buffer source "," range_between ","line_begin_pos -  + "]}," RuboCop Cop AutocorrectAlignment within?":{"type":"method","name":"within?","children":[],"call":["inner end_pos <= ","outer end_pos ","inner end_pos ","inner begin_pos >= ","outer begin_pos ","inner begin_pos "]}," RuboCop Cop AutocorrectAlignment block_comment_within?":{"type":"method","name":"block_comment_within?","children":[],"call":[" within? ","c loc expression ","c loc ","(send\n  (send\n    (send nil :processed_source) :comments) :select) find ","c document? "," processed_source comments select "," processed_source comments "," processed_source "," processed_source comments select find "," processed_source comments select any? "]}," RuboCop Cop AutocorrectAlignment heredoc_ranges":{"type":"method","name":"heredoc_ranges","children":[],"call":["heredoc_ranges << ","n loc heredoc_body join ","n loc heredoc_end ","n loc ","n loc heredoc_body "," on_node ","arg is_a? ","n loc respond_to? ","arg each_node ","(send\n  (send\n    (lvar :arg) :each_node\n    (sym :dstr)) :select) map ","arg each_node select "]}," RuboCop Cop AutocorrectAlignment autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << "," remove ","range source =~ ","range source ","corrector insert_before ","  * ","range source == ","column_delta > "," within? ","heredoc_ranges any? "," calculate_range "," each_line "," lambda "," fail "," block_comment_within? ","arg loc expression ","arg loc ","arg respond_to? "," heredoc_ranges "," autocorrect_line "," calculate_range  source =~ "," calculate_range  source "," calculate_range  source == ","heredoc_ calculate_range s any? "," heredoc_ranges  any? "," calculate_ calculate_range  ","arg loc arg loc expression ession "," heredoc_ calculate_range s ","  heredoc_ranges  "]}," RuboCop Cop AutocorrectAlignment start_of_line?":{"type":"method","name":"start_of_line?","children":[],"call":["loc expression source_line [] =~ ","loc expression source_line [] ","loc column ","loc expression source_line ","loc expression ","loc expression source_line [] blank? "]}," RuboCop Cop AutocorrectAlignment check_alignment":{"type":"method","name":"check_alignment","children":[],"call":["current loc line ","current loc "," add_offense ","@column_delta != ","base_column - ","current loc column "," start_of_line? ","current loc line > ","items each ","items first loc column ","items first loc ","items first ","items empty? "," within? ","o location "," offenses any? "," offenses ","current loc expression ","current source_range "," begins_its_line? "," display_column ","items first source_range "," each_bad_alignment ","base_column -  != ","current loc current loc expression ession ","current loc current source_range ession "]}," RuboCop Cop ArraySyntax square_brackets?":{"type":"method","name":"square_brackets?","children":[],"call":["node loc begin is? ","node loc begin ","node loc "]}," RuboCop Cop ArraySyntax array_of?":{"type":"method","name":"array_of?","children":[],"call":["e type == ","e type ","array_elems all? ","array_elems size > ","array_elems size ","node children "," square_brackets? ","node children  all? ","node children  size > ","node children  size "]}," RuboCop Cop Style AnnotationComment keyword?":{"type":"method","name":"keyword?","children":[],"call":[" config for_cop [] include? "," config for_cop [] "," config for_cop "," config "]}," RuboCop Cop Style AnnotationComment just_first_word_of_sentence?":{"type":"method","name":"just_first_word_of_sentence?","children":[],"call":["colon ! ","first_word == ","first_word capitalize "]}," RuboCop Cop Style AnnotationComment keyword_appearance?":{"type":"method","name":"keyword_appearance?","children":[],"call":[" keyword? ","first_word upcase "]}," RuboCop Cop Style AnnotationComment split_comment":{"type":"method","name":"split_comment","children":[],"call":["match captures ","comment text match ","comment text ","comment text match  captures ","comment text comment text match  "]}," RuboCop Cop Style AnnotationComment annotation?":{"type":"method","name":"annotation?","children":[],"call":[" just_first_word_of_sentence? ! "," just_first_word_of_sentence? "," keyword_appearance? "," split_comment "]}," RuboCop Cop Lint Void check_for_literal":{"type":"method","name":"check_for_literal","children":[],"call":[" add_offense "," format ","node loc expression source ","node loc expression ","node loc ","LITERALS  include? ","node type ","node source ","node xstr_type? ","node literal? ","node literal? ! "]}," RuboCop Cop Lint Void check_for_var":{"type":"method","name":"check_for_var","children":[],"call":[" add_offense "," format ","node loc name source ","node loc name ","node loc ","VARS  include? ","node type ","node const_type? ","node variable? "]}," RuboCop Cop Lint Void check_for_void_op":{"type":"method","name":"check_for_void_op","children":[],"call":[" add_offense "," format ","OPS  include? ","node loc selector source ","node loc selector ","node loc ","node type == ","node type ","node send_type? "]}," RuboCop Cop Lint Void on_begin":{"type":"method","name":"on_begin","children":[],"call":[" check_for_var "," check_for_literal "," check_for_void_op ","expressions drop_last each ","expressions drop_last "," check_begin "]}," RuboCop Cop Lint UselessSetterCall MethodVariableTracker process_assignment":{"type":"method","name":"process_assignment","children":[],"call":["@table []= ","@table [] ","(sym :lvar) include? ","rhs_node type ","@local []= "," constructor? ","@local [] ","rhs_node variable? "]}," RuboCop Cop Lint UselessSetterCall MethodVariableTracker process_binary_operator_assignment":{"type":"method","name":"process_binary_operator_assignment","children":[],"call":[" throw ","@table []= ","ASSIGNMENT_TYPES  include? ","lhs_node type ","@local []= "]}," RuboCop Cop Lint UselessSetterCall MethodVariableTracker process_logical_operator_assignment":{"type":"method","name":"process_logical_operator_assignment","children":[],"call":[" throw "," process_assignment ","ASSIGNMENT_TYPES  include? ","lhs_node type "]}," RuboCop Cop Lint UselessSetterCall MethodVariableTracker process_multiple_assignment":{"type":"method","name":"process_multiple_assignment","children":[],"call":[" throw ","@table []= "," process_assignment ","mrhs_node type == ","mrhs_node type ","mrhs_node children [] ","mrhs_node children ","ASSIGNMENT_TYPES  include? ","lhs_node type ","mlhs_node children each_with_index ","mlhs_node children ","@local []= ","mrhs_node array_type? ","mmrhs_node children []  type == ","mmrhs_node children []  type ","mmrhs_node children []  children [] ","mmrhs_node children []  children ","mmrhs_node children []  array_type? "]}," RuboCop Cop Lint UselessSetterCall MethodVariableTracker scan":{"type":"method","name":"scan","children":[],"call":[" scan ","child is_a? ","node children each ","node children "," catch ","node each_child_node "]}," RuboCop Cop Lint UselessSetterCall MethodVariableTracker contain_object_passed_as_argument?":{"type":"method","name":"contain_object_passed_as_argument?","children":[],"call":["@table [] "," process_assignment "," process_binary_operator_assignment "," process_logical_operator_assignment "," process_multiple_assignment ","node type "," scan ","@table []= ","@args_node children each ","@args_node children "]}," RuboCop Cop Lint UselessSetterCall MethodVariableTracker initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop Cop Lint UselessSetterCall setter_call_to_local_variable?":{"type":"method","name":"setter_call_to_local_variable?","children":[],"call":["method =~ ","receiver type == ","receiver type ","node type == ","node type ","receiver lvar_type? ","node send_type? ","node method_name =~ ","node method_name ","node receiver lvar_type? ","node receiver "]}," RuboCop Cop Lint UselessSetterCall check":{"type":"method","name":"check","children":[],"call":[" add_offense "," format ","receiver loc name source ","receiver loc name ","receiver loc ","tracker contain_object_passed_as_argument? ","MethodVariableTracker  new "," setter_call_to_local_variable? ","expression last ","expression is_a? ","body children ","body type == ","body type ","tracker contain_local_object? ","MethodVariableTracker  new  contain_object_passed_as_argument? ","body children  last ","body children  is_a? ","MethodVariableTracker  new  contain_local_object? "]}," RuboCop Cop Lint UselessElseWithoutRescue alternative_message":{"type":"method","name":"alternative_message","children":[],"call":[]}," RuboCop Cop Lint UselessElseWithoutRescue relevant_diagnostic?":{"type":"method","name":"relevant_diagnostic?","children":[],"call":["diagnostic reason == ","diagnostic reason "]}," RuboCop Cop Lint UselessComparison on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","receiver == ","OPS  include? ","node loc selector source ","node loc selector ","node loc "," comparison? "," useless_comparison? "]}," RuboCop Cop Lint UselessAssignment check_for_unused_block_local_variable":{"type":"method","name":"check_for_unused_block_local_variable","children":[],"call":[" add_offense ","variable declaration_node "," format ","variable name ","variable assignments empty? ","variable assignments ","variable block_local_variable? "]}," RuboCop Cop Lint UselessAssignment return_value_node_of_scope":{"type":"method","name":"return_value_node_of_scope","children":[],"call":["body_node children last ","body_node children ","body_node type == ","body_node type ","scope body_node ","body_node begin_type? ","scope body_node  children last ","scope body_node  children ","scope body_node  type == ","scope body_node  type ","scope scope body_node  ","scope body_node  begin_type? "]}," RuboCop Cop Lint UselessAssignment message_for_useless_assignment":{"type":"method","name":"message_for_useless_assignment","children":[],"call":["message << ","assignment operator sub ","assignment operator ","assignment meta_assignment_node equal? ","assignment meta_assignment_node "," return_value_node_of_scope ","variable scope ","assignment operator_assignment? ","variable name ","assignment multiple_assignment? "," format ","assignment variable "," find_similar_name "," format + "," message_specification to_s "," message_specification "," format  << ","  return_value_node_of_scope _of_scope ","assignment variable  scope ","assignment variable  name ","assignment assignment variable  "," find_ find_similar_name  ","  format _specification to_s ","  format _specification "]}," RuboCop Cop Lint UselessAssignment check_for_unused_assignments":{"type":"method","name":"check_for_unused_assignments","children":[],"call":[" add_offense ","assignment node loc name ","assignment node loc ","assignment node ","assignment node children first loc expression ","assignment node children first loc ","assignment node children first ","assignment node children ","assignment regexp_named_capture? "," message_for_useless_assignment ","assignment used? ","variable assignments each ","variable assignments ","variable name to_s start_with? ","variable name to_s ","variable name ","variable should_be_unused? ","assignment node children first source_range "," autocorrect "," ignore_node "," chained_assignment? "," sequential_assignment? "," offense_range "," part_of_ignored_node? ","  message_for_useless_assignment _for_useless_assignment ","assignment node children first source_ offense_range  "," offense_ offense_range  "]}," RuboCop Cop Lint UselessAssignment after_leaving_scope":{"type":"method","name":"after_leaving_scope","children":[],"call":[" check_for_unused_block_local_variable "," check_for_unused_assignments ","scope variables each_value ","scope variables "]}," RuboCop Cop Lint UselessAssignment join_force?":{"type":"method","name":"join_force?","children":[],"call":["force_class == "]}," RuboCop Cop Lint UselessAccessModifier check_for_access_modifier":{"type":"method","name":"check_for_access_modifier","children":[],"call":[" add_offense_for_access_modifier ","Style AccessModifierIndentation  modifier_node? "," modifier_node? "]}," RuboCop Cop Lint UselessAccessModifier check_for_instance_method":{"type":"method","name":"check_for_instance_method","children":[],"call":["node type == ","node type "]}," RuboCop Cop Lint UselessAccessModifier add_offense_for_access_modifier":{"type":"method","name":"add_offense_for_access_modifier","children":[],"call":[" add_offense "," format "]}," RuboCop Cop Lint UselessAccessModifier on_class":{"type":"method","name":"on_class","children":[],"call":[" add_offense_for_access_modifier "," check_for_instance_method "," check_for_access_modifier ","body_nodes each ","body children ","body type == ","body type "," check_node ","node children [] ","node children ","node body ","body children  each "]}," RuboCop Cop Lint UnusedMethodArgument message":{"type":"method","name":"message","children":[],"call":["message << ","scope name ","all_arguments none? ","scope variables each_value select ","scope variables each_value ","scope variables ","variable scope ","variable name ","variable keyword_argument? ","String  new ","(str \"Unused method argument - `\") +@ ","String  new  << ","(str \"Unused method argument - `\") +@  << ","variable scope  name ","scope variables each_value select  none? ","variable scope  variables each_value select ","variable scope  variables each_value ","variable scope  variables ","variable variable scope  "]}," RuboCop Cop Lint UnusedMethodArgument check_argument":{"type":"method","name":"check_argument","children":[],"call":["variable method_argument? ","body nil? ","variable scope node ","variable scope "," cop_config [] "," cop_config ","variable keyword_argument? ","variable scope node body "," ignored_method? ","variable scope node body  nil? ","variable scope node variable scope node body  "]}," RuboCop Cop Lint UnusedBlockArgument message_for_underscore_prefix":{"type":"method","name":"message_for_underscore_prefix","children":[],"call":["variable name "]}," RuboCop Cop Lint UnusedBlockArgument message_for_lambda":{"type":"method","name":"message_for_lambda","children":[],"call":["message << ","all_arguments none? "," message_for_underscore_prefix ","String  new ","(lvar :message) compact join ","(lvar :message) compact "," message_for_underscore_prefix  << ","String  new  << ","  message_for_underscore_prefix _for_underscore_prefix "," String  new _for_underscore_prefix ","(lvar : message_for_underscore_prefix ) compact join ","(lvar :String  new ) compact join ","(lvar : message_for_underscore_prefix ) compact ","(lvar :String  new ) compact "]}," RuboCop Cop Lint UnusedBlockArgument message_for_normal_block":{"type":"method","name":"message_for_normal_block","children":[],"call":[" message_for_underscore_prefix ","all_arguments count > ","all_arguments count ","all_arguments none? "," define_method_call? ! "," define_method_call? "]}," RuboCop Cop Lint UnusedBlockArgument message":{"type":"method","name":"message","children":[],"call":["message << "," message_for_normal_block "," message_for_lambda "," lambda? ","scope node ","scope variables each_value select ","scope variables each_value ","scope variables ","variable scope ","variable name ","variable explicit_block_local_variable? "," variable_type ","scope node lambda? ","String  new "," augment_message ","String  new  << "," String  new _for_normal_block "," String  new _for_lambda ","variable scope  node ","variable scope  variables each_value select ","variable scope  variables each_value ","variable scope  variables ","variable variable scope  ","variable scope  node lambda? "," augment_String  new  "]}," RuboCop Cop Lint UnusedBlockArgument check_argument":{"type":"method","name":"check_argument","children":[],"call":["variable block_argument? ","body nil? ","variable scope node ","variable scope "," cop_config [] "," cop_config ","variable keyword_argument? "," allowed_keyword_argument? "," allowed_block? "," used_block_local? "]}," RuboCop Cop Lint UnreachableCode flow_command?":{"type":"method","name":"flow_command?","children":[],"call":[" command? ","FLOW_COMMANDS  any? ","node command? ","node send_type? "]}," RuboCop Cop Lint UnreachableCode on_begin":{"type":"method","name":"on_begin","children":[],"call":[" add_offense "," flow_command? ","NODE_TYPES  include? ","e1 type ","expressions each_cons "," flow_expression? "]}," RuboCop Cop Lint UnderscorePrefixedVariableName check_variable":{"type":"method","name":"check_variable","children":[],"call":[" add_offense ","node loc name ","node loc ","node children first loc expression ","node children first loc ","node children first ","node children ","node type == ","node type ","variable declaration_node ","variable references none? ","variable references ","variable references empty? ","variable name to_s start_with? ","variable name to_s ","variable name ","variable should_be_unused? ","node children first source_range ","node match_with_lvasgn_type? "," allowed_keyword_block_argument? ","variable declaration_node  loc name ","variable declaration_node  loc ","variable declaration_node  children first loc expression ","variable declaration_node  children first loc ","variable declaration_node  children first ","variable declaration_node  children ","variable declaration_node  type == ","variable declaration_node  type ","variable declaration_variable declaration_node  ","variable declaration_node  children first source_range ","variable declaration_node  match_with_lvasgn_type? "]}," RuboCop Cop Lint UnderscorePrefixedVariableName after_leaving_scope":{"type":"method","name":"after_leaving_scope","children":[],"call":[" check_variable ","scope variables each_value ","scope variables "]}," RuboCop Cop Lint UnderscorePrefixedVariableName join_force?":{"type":"method","name":"join_force?","children":[],"call":["force_class == "]}," RuboCop Cop Lint Syntax offense_from_diagnostic":{"type":"method","name":"offense_from_diagnostic","children":[],"call":[]}," RuboCop Cop Lint Syntax offenses_from_diagnostics":{"type":"method","name":"offenses_from_diagnostics","children":[],"call":[]}," RuboCop Cop Lint StringConversionInInterpolation autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","receiver loc expression source ","receiver loc expression ","receiver loc ","node loc expression ","node loc "," lambda ","receiver source ","node source_range ","node receiver ","node receiver  loc expression source ","node receiver  loc expression ","node receiver  loc ","node receiver  source ","node node receiver  "]}," RuboCop Cop Lint StringConversionInInterpolation on_dstr":{"type":"method","name":"on_dstr","children":[],"call":[" add_offense ","args empty? ","method_name == ","final_node type == ","final_node type ","begin_node children last ","begin_node children ","(send\n  (send\n    (lvar :node) :children) :select) each ","n type == ","n type ","node children select ","node children ","final_node send_type? ","node each_child_node ","final_node arguments? ! ","final_node arguments? ","final_node method? "," to_s_without_args? ","begin_node children last  type == ","begin_node children last  type ","begin_node children last  send_type? ","begin_node children last  arguments? ! ","begin_node children last  arguments? ","begin_node children last  method? "]}," RuboCop Cop Lint SpaceBeforeFirstArg on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","arg1_with_space source =~ ","arg1_with_space source "," range_with_surrounding_space ","args first loc expression ","args first loc ","args first ","args first type == ","args first type ","method_name to_s end_with? ","method_name to_s "," operator? ","args empty? "," parentheses? ","Parser Source Range  new ","arg1 begin_pos ","arg1_with_space begin_pos ","arg1 source_buffer ","node asgn_method_call? "," range_with_surrounding_space  source =~ ","args first loc expression _with_space source =~ ","arg1_with_Parser Source Range  new  source =~ "," range_with_surrounding_space  source ","args first loc expression _with_space source ","arg1_with_Parser Source Range  new  source "," range_with_surrounding_Parser Source Range  new  ","args first loc expression  begin_pos "," range_with_surrounding_space  begin_pos ","args first loc expression _with_space begin_pos ","arg1_with_Parser Source Range  new  begin_pos ","args first loc expression  source_buffer "]}," RuboCop Cop Lint ShadowingOuterLocalVariable before_declaring_variable":{"type":"method","name":"before_declaring_variable","children":[],"call":[" add_offense ","variable declaration_node "," format ","variable name ","variable_table find_variable ","variable name to_s start_with? ","variable name to_s ","variable should_be_unused? "," ractor_block? ","variable scope node ","variable scope "," same_conditions_node_different_branch? "]}," RuboCop Cop Lint ShadowingOuterLocalVariable join_force?":{"type":"method","name":"join_force?","children":[],"call":["force_class == "]}," RuboCop Cop Lint RescueException autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector remove "," range_with_surrounding_space ","node children first children first loc expression ","node children first children first loc ","node children first children first ","node children first children ","node children first ","node children "," lambda "]}," RuboCop Cop Lint RescueException targets_exception?":{"type":"method","name":"targets_exception?","children":[],"call":["Util  const_name == ","Util  const_name ","rescue_arg_node const_name == ","rescue_arg_node const_name "]}," RuboCop Cop Lint RescueException on_resbody":{"type":"method","name":"on_resbody","children":[],"call":[" add_offense "," targets_exception? ","rescue_args any? ","node children first children ","node children first ","node children ","node children first children  any? "]}," RuboCop Cop Lint RequireParentheses offense?":{"type":"method","name":"offense?","children":[],"call":["(sym :and) include? ","node type "]}," RuboCop Cop Lint RequireParentheses predicate?":{"type":"method","name":"predicate?","children":[],"call":["method_name =~ ","method_name to_s end_with? ","method_name to_s "]}," RuboCop Cop Lint RequireParentheses check_send":{"type":"method","name":"check_send","children":[],"call":[" add_offense "," offense? "]}," RuboCop Cop Lint RequireParentheses check_ternary":{"type":"method","name":"check_ternary","children":[],"call":[" add_offense ","Parser Source Range  new ","condition loc expression end_pos ","condition loc expression ","condition loc ","expr begin_pos ","expr source_buffer ","node loc expression ","node loc "," offense? ","condition source_range end_pos ","condition source_range ","node source_range "," range_between ","ternary condition source_range end_pos ","ternary condition source_range ","ternary condition ","node source_range begin_pos ","ternary condition operator_keyword? ","ternary condition operator_keyword? ! ","node method? ","node assignment_method? ","condition loc node loc expression ession end_pos ","condition loc node source_range ession end_pos ","condition loc node loc expression ession ","condition loc node source_range ession ","node loc expression  begin_pos ","node source_range  begin_pos ","node loc expression  source_buffer ","node source_range  source_buffer ","node loc node loc expression ession ","node loc node source_range ession ","condition source_Parser Source Range  new  end_pos ","condition source_ range_between  end_pos ","condition source_Parser Source Range  new  ","condition source_ range_between  ","node source_Parser Source Range  new  ","node source_ range_between  "," Parser Source Range  new _between ","  range_between _between ","ternary condition source_Parser Source Range  new  end_pos ","ternary condition source_ range_between  end_pos ","ternary condition source_Parser Source Range  new  ","ternary condition source_ range_between  ","node source_Parser Source Range  new  begin_pos ","node source_ range_between  begin_pos "]}," RuboCop Cop Lint RequireParentheses on_send":{"type":"method","name":"on_send","children":[],"call":[" check_send ","args last "," predicate? "," check_ternary ","args first "," ternary_op? ","args empty? "," parentheses? "," ternary? "," check_predicate ","method_name to_s end_with? ","method_name to_s ","args first ternary? ","args first if_type? ","node last_argument ","node predicate_method? ","node first_argument ","node first_argument ternary? ","node first_argument if_type? ","node parenthesized? ","node arguments? ! ","node arguments? "]}," RuboCop Cop Lint ParenthesesAsGroupedExpression spaces_before_left_parenthesis":{"type":"method","name":"spaces_before_left_parenthesis","children":[],"call":["match captures [] length ","match captures [] ","match captures ","without_receiver match ","Regexp  escape ","node loc expression source [] ","node loc expression source ","node loc expression ","node loc ","receiver loc expression source length ","receiver loc expression source ","receiver loc expression ","receiver loc ","node source [] ","node source ","receiver source length ","receiver source ","node method_name ","node receiver ","without_receiver match  captures [] length ","without_receiver match  captures [] ","without_receiver match  captures ","without_receiver without_receiver match  ","node loc expression source []  match ","node source []  match ","without_node receiver  match ","node receiver  loc expression source length ","node receiver  loc expression source ","node receiver  loc expression ","node receiver  loc ","node receiver  source length ","node receiver  source ","node node receiver  "]}," RuboCop Cop Lint ParenthesesAsGroupedExpression on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","Parser Source Range  new ","expr begin_pos ","expr begin_pos - ","expr source_buffer ","args loc expression ","args loc ","space_length > "," spaces_before_left_parenthesis ","args loc expression source start_with? ","args loc expression source ","method_name to_s end_with? ","method_name to_s "," operator? ","node asgn_method_call? ","args first source_range ","args first ","args size > ","args size ","args first source start_with? ","args first source "," space_range ","first_arg source_range ","first_arg source start_with? ","first_arg source ","args one? ","node first_argument source_range ","node first_argument ","node first_argument source start_with? ","node first_argument source ","node setter_method? ","node operator_method? ","node arguments one? ","node arguments ","space_length positive? "," grouped_parentheses? "," valid_context? ","corrector remove "," format ","args loc expression  begin_pos ","args first source_range  begin_pos ","args loc expression  begin_pos - ","args first source_range  begin_pos - ","args loc expression  source_buffer ","args first source_range  source_buffer ","args loc args loc expression ession ","args loc args first source_range ession "," spaces_before_left_parenthesis  > ","args loc args loc expression ession source start_with? ","args loc args first source_range ession source start_with? ","args loc args loc expression ession source ","args loc args first source_range ession source ","args first source_ space_range  "," Parser Source Range  new  "," space_ space_range  ","args first  source_range ","first_arg source_ space_range  ","args first  source start_with? ","args first  source ","node args first ument source_range ","node first_argument source_ space_range  ","node args first ument ","node args first ument source start_with? ","node args first ument source "," spaces_before_left_parenthesis  positive? "]}," RuboCop Cop Lint Loop register_offense":{"type":"method","name":"register_offense","children":[],"call":[" add_offense ","corrector insert_before "," build_break_line ","body loc end ","body loc ","corrector remove "," keyword_and_condition_range ","corrector replace ","body loc begin ","node loc keyword ","node loc ","node body ","node body  loc end ","node body  loc ","node body  loc begin ","node node body  "]}," RuboCop Cop Lint Loop on_until_post":{"type":"method","name":"on_until_post","children":[],"call":[" register_offense "]}," RuboCop Cop Lint Loop on_while_post":{"type":"method","name":"on_while_post","children":[],"call":[" register_offense "]}," RuboCop Cop Lint LiteralInInterpolation special_string?":{"type":"method","name":"special_string?","children":[],"call":["node loc respond_to? ! ","node loc respond_to? ","node loc ","node type == ","node type "]}," RuboCop Cop Lint LiteralInInterpolation on_dstr":{"type":"method","name":"on_dstr","children":[],"call":[" add_offense ","LITERALS  include? ","final_node type "," special_string? ","begin_node children last ","begin_node children ","(send\n  (send\n    (lvar :node) :children) :select) each ","n type == ","n type ","node children select ","node children "," special_keyword? ","final_node literal? ","final_node xstr_type? "," prints_as_self? ","node each_child_node ","begin_node children last  type ","begin_node children last  literal? ","begin_node children last  xstr_type? "]}," RuboCop Cop Lint LiteralInCondition check_case_cond":{"type":"method","name":"check_case_cond","children":[],"call":[" handle_node ","node type == ","node type "," primitive_array? ! "," primitive_array? ","node dstr_type? ","node array_type? "]}," RuboCop Cop Lint LiteralInCondition handle_node":{"type":"method","name":"handle_node","children":[],"call":[" check_node ","(sym :send) include? ","node type "," add_offense "," literal? ","node literal? "]}," RuboCop Cop Lint LiteralInCondition check_node":{"type":"method","name":"check_node","children":[],"call":[" handle_node ","node children first ","node children ","node children size == ","node children size ","node type == ","node type ","operands each ","(sym :and) include? "," not? ","node children one? ","node begin_type? ","node each_child_node ","LOGICAL_OPERATOR_NODES  include? ","node keyword_bang? ","node each_node children first  "]}," RuboCop Cop Lint LiteralInCondition primitive_array?":{"type":"method","name":"primitive_array?","children":[],"call":[" basic_literal? ","node children all? ","node children "]}," RuboCop Cop Lint LiteralInCondition basic_literal?":{"type":"method","name":"basic_literal?","children":[],"call":["BASIC_LITERALS  include? ","node type "," primitive_array? ","node type == ","node basic_literal? ","node array_type? "]}," RuboCop Cop Lint LiteralInCondition literal?":{"type":"method","name":"literal?","children":[],"call":["LITERALS  include? ","node type "]}," RuboCop Cop Lint LiteralInCondition not?":{"type":"method","name":"not?","children":[],"call":["method_name == ","node type == ","node type ","node send_type? "]}," RuboCop Cop Lint LiteralInCondition check_for_literal":{"type":"method","name":"check_for_literal","children":[],"call":[" check_node "," add_offense "," literal? ","cond literal? ","node condition ","node condition literal? "]}," RuboCop Cop Lint LiteralInCondition message":{"type":"method","name":"message","children":[],"call":[" format ","node loc expression source ","node loc expression ","node loc ","node source "]}," RuboCop Cop Lint LiteralInCondition on_case":{"type":"method","name":"on_case","children":[],"call":[" check_for_literal ","whens each "," check_case_cond "," add_offense ","when_node conditions all? ","when_node conditions ","case_node each_when "," check_case ","case_node condition "]}," RuboCop Cop Lint LiteralInCondition on_until_post":{"type":"method","name":"on_until_post","children":[],"call":[" check_for_literal "]}," RuboCop Cop Lint LiteralInCondition on_until":{"type":"method","name":"on_until","children":[],"call":[" check_for_literal "]}," RuboCop Cop Lint LiteralInCondition on_while_post":{"type":"method","name":"on_while_post","children":[],"call":[" check_for_literal "]}," RuboCop Cop Lint LiteralInCondition on_while":{"type":"method","name":"on_while","children":[],"call":[" check_for_literal "]}," RuboCop Cop Lint LiteralInCondition on_if":{"type":"method","name":"on_if","children":[],"call":[" check_for_literal "]}," RuboCop Cop Lint InvalidCharacterLiteral alternative_message":{"type":"method","name":"alternative_message","children":[],"call":["diagnostic message capitalize gsub ","diagnostic message capitalize ","diagnostic message "]}," RuboCop Cop Lint InvalidCharacterLiteral relevant_diagnostic?":{"type":"method","name":"relevant_diagnostic?","children":[],"call":["diagnostic reason == ","diagnostic reason "]}," RuboCop Cop Lint HandleExceptions on_resbody":{"type":"method","name":"on_resbody","children":[],"call":[" add_offense ","node body "," comment_lines? "," cop_config [] "," cop_config "]}," RuboCop Cop Lint Eval on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","method_name == ","receiver nil? ","args first type != ","args first type ","args first ","args empty? ! ","args empty? ","args first str_type? ! ","args first str_type? "," eval? "]}," RuboCop Cop Lint EnsureReturn on_ensure":{"type":"method","name":"on_ensure","children":[],"call":[" add_offense "," on_node ","ensure_body each_node ","node body ","return_node arguments size >= ","return_node arguments size ","return_node arguments ","node body  each_node "]}," RuboCop Cop Lint EndInMethod check":{"type":"method","name":"check","children":[],"call":[" add_offense "," on_node "]}," RuboCop Cop Lint EndAlignment parameter_name":{"type":"method","name":"parameter_name","children":[],"call":[]}," RuboCop Cop Lint EndAlignment check_offset":{"type":"method","name":"check_offset","children":[],"call":[" correct_style_detected "," opposite_style_detected "," add_offense "," format ","kw_loc column ","kw_loc line ","end_loc column ","end_loc line ","kw_loc column != ","end_loc column + ","kw_loc line != ","node loc keyword ","node loc ","node loc end "," ignored_node? ","node loc keyword  column ","node loc keyword  line ","node loc end  column ","node loc end  line ","node loc keyword  column != ","node loc end  column + ","node loc keyword  line != "]}," RuboCop Cop Lint EndAlignment check":{"type":"method","name":"check","children":[],"call":[" check_offset ","node loc keyword source ","node loc keyword ","node loc "]}," RuboCop Cop Lint EndAlignment check_assignment":{"type":"method","name":"check_assignment","children":[],"call":[" ignore_node "," check_offset ","range source ","rhs loc keyword ","rhs loc ","rhs loc keyword column - ","node loc expression column ","node loc expression ","node loc ","rhs loc keyword column ","Parser Source Range  new ","rhs loc keyword end_pos ","expr begin_pos ","expr source_buffer "," style == "," style ","rhs loc respond_to? ","rhs type "," first_part_of_call_chain "," ternary_op? ","(sym :if) include? "," line_break_before_keyword? ! "," line_break_before_keyword? "," variable_alignment? "," check_alignment "," check_asgn_alignment "," ternary? ","rhs ternary? ","rhs if_type? ","CONDITIONAL_NODES  include? "," check_rhs loc keyword column -  ","rhs loc keyword  source ","Parser Source Range  new  source "," first_part_of_call_chain  loc keyword "," first_part_of_call_chain  loc "," first_part_of_call_chain  loc keyword column - ","node loc node loc expression ession column ","node loc node loc expression ession "," first_part_of_call_chain  loc keyword column "," first_part_of_call_chain  loc keyword end_pos ","node loc expression  begin_pos ","node loc expression  source_buffer "," first_part_of_call_chain  loc respond_to? "," first_part_of_call_chain  type "," first_part_of_call_chain  ternary? "," first_part_of_call_chain  if_type? "]}," RuboCop Cop Lint EndAlignment on_send":{"type":"method","name":"on_send","children":[],"call":[" ignore_node "," check_offset ","method_def loc keyword begin_pos - ","expr begin_pos ","method_def loc keyword begin_pos ","method_def loc keyword ","method_def loc ","range source ","Parser Source Range  new ","method_def loc keyword end_pos ","expr source_buffer ","args first ","node loc expression ","node loc "," visibility_and_def_on_same_line? ","args first  loc keyword begin_pos - ","node loc expression  begin_pos ","args first  loc keyword begin_pos ","args first  loc keyword ","args first  loc ","Parser Source Range  new  source ","args first  loc keyword end_pos ","node loc expression  source_buffer ","node loc node loc expression ession "]}," RuboCop Cop Lint EndAlignment on_until":{"type":"method","name":"on_until","children":[],"call":[" check "," check_offset_of_node "," check_other_alignment "]}," RuboCop Cop Lint EndAlignment on_while":{"type":"method","name":"on_while","children":[],"call":[" check "," check_offset_of_node "," check_other_alignment "]}," RuboCop Cop Lint EndAlignment on_if":{"type":"method","name":"on_if","children":[],"call":[" check ","node loc respond_to? ","node loc "," ternary_op? "," check_offset_of_node "," check_other_alignment "," ternary? ","node ternary? "]}," RuboCop Cop Lint EndAlignment on_module":{"type":"method","name":"on_module","children":[],"call":[" check "," check_offset_of_node "," check_other_alignment "]}," RuboCop Cop Lint EndAlignment on_class":{"type":"method","name":"on_class","children":[],"call":[" check "," check_offset_of_node "," check_other_alignment "]}," RuboCop Cop Lint EmptyInterpolation on_dstr":{"type":"method","name":"on_dstr","children":[],"call":[" add_offense ","begin_node children empty? ","begin_node children ","(send\n  (send\n    (lvar :node) :children) :select) each ","n type == ","n type ","node children select ","node children ","node each_child_node "]}," RuboCop Cop Lint EmptyEnsure on_ensure":{"type":"method","name":"on_ensure","children":[],"call":[" add_offense ","node body ","corrector remove ","node loc keyword ","node loc "]}," RuboCop Cop Lint ElseLayout message":{"type":"method","name":"message","children":[],"call":[]}," RuboCop Cop Lint ElseLayout check":{"type":"method","name":"check","children":[],"call":[" check ","(str \"if\") include? ","node loc keyword source ","node loc keyword ","node loc ","node loc respond_to? "," add_offense "," message ","first_else_expr loc expression line == ","node loc else line ","node loc else ","first_else_expr loc expression line ","first_else_expr loc expression ","first_else_expr loc ","else_branch children first ","else_branch children ","else_branch type == ","else_branch type ","node loc else is? ","first_else_expr source_range line == ","first_else_expr source_range line ","first_else_expr source_range "," check_if "," if? "," check_else "," else? ","node else_branch ","node if? ","node else? ","else_branch children first  loc expression line == ","else_branch children first  loc expression line ","else_branch children first  loc expression ","else_branch children first  loc ","else_branch children first  source_range line == ","else_branch children first  source_range line ","else_branch children first  source_range "]}," RuboCop Cop Lint ElseLayout on_if":{"type":"method","name":"on_if","children":[],"call":[" check ","node loc end ","node loc ","node loc respond_to? "," ternary? ","node elsif? ","node ternary? ","node single_line? "]}," RuboCop Cop Lint DeprecatedClassMethods replacement_method":{"type":"method","name":"replacement_method","children":[],"call":[" format ","data [] "," method_call ","data replacement_method ","data class_constant "]}," RuboCop Cop Lint DeprecatedClassMethods deprecated_method":{"type":"method","name":"deprecated_method","children":[],"call":[" format ","data [] "," method_call ","data deprecated_method ","data class_constant "]}," RuboCop Cop Lint DeprecatedClassMethods class_nodes":{"type":"method","name":"class_nodes","children":[],"call":[" s ","data [] ","data class_constant "]}," RuboCop Cop Lint DeprecatedClassMethods autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","data [] to_s ","data [] ","node loc selector ","node loc ","method_name == "," class_nodes include? "," class_nodes ","DEPRECATED_METHODS  each "," lambda ","data replacement_method to_s ","data replacement_method "," check "]}," RuboCop Cop Lint DeprecatedClassMethods on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format "," replacement_method "," deprecated_method ","method_name == ","data [] "," class_nodes include? "," class_nodes ","DEPRECATED_METHODS  each "," check ","corrector replace ","data replacement_method to_s ","data replacement_method ","node loc selector ","node loc ","DEPRECATED_METHODS  include? ","node method_name "," replacement method "," replacement ","deprecated correctable? ","corrector remove ","node loc dot ","prefer method ","node method? "," socket_const? ","node receiver ","offense_range source "," preferred_method "," offense_range "," deprecated_class_method? "," replacement  method "," preferred_method  method "," offense_range  source "," prefer method  ","  replacement red_method ","  preferred_method red_method ","  offense_range  "]}," RuboCop Cop Lint Debugger on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format ","node loc expression source ","node loc expression ","node loc ","DEBUGGER_NODES  include? "," class s "," class "," debugger_call? ","node source "," binding_irb? ","DEBUGGER_METHODS  include? ","node method_name "," debugger_method? "," debugger_receiver? ! "," debugger_receiver? ","node receiver nil? ! ","node receiver nil? ","node receiver ","node each_ancestor any? ","node each_ancestor ","node arguments empty? ","node arguments "," assumed_usage_context? "," debugger_method? ! "]}," RuboCop Cop Lint ConditionPosition on_different_line?":{"type":"method","name":"on_different_line?","children":[],"call":["keyword_line != "]}," RuboCop Cop Lint ConditionPosition message":{"type":"method","name":"message","children":[],"call":[" format ","node parent keyword ","node parent "]}," RuboCop Cop Lint ConditionPosition check":{"type":"method","name":"check","children":[],"call":[" add_offense "," message ","node loc keyword source ","node loc keyword ","node loc "," on_different_line? ","condition loc expression line ","condition loc expression ","condition loc ","node loc keyword line ","node loc end nil? ","node loc end ","node loc keyword is? ! ","node loc keyword is? ","condition source_range line ","condition source_range "," format ","node keyword ","node condition ","node single_line_condition? ","node modifier_form? "]}," RuboCop Cop Lint ConditionPosition on_until":{"type":"method","name":"on_until","children":[],"call":[" check "]}," RuboCop Cop Lint ConditionPosition on_while":{"type":"method","name":"on_while","children":[],"call":[" check "]}," RuboCop Cop Lint ConditionPosition on_if":{"type":"method","name":"on_if","children":[],"call":[" check ","node loc respond_to? ","node loc "," ternary? ","node ternary? "]}," RuboCop Cop Lint BlockAlignment block_is_on_next_line?":{"type":"method","name":"block_is_on_next_line?","children":[],"call":["begin_node loc line != ","block_node loc line ","block_node loc ","begin_node loc line ","begin_node loc "]}," RuboCop Cop Lint BlockAlignment already_processed_node?":{"type":"method","name":"already_processed_node?","children":[],"call":["@inspected_blocks include? "]}," RuboCop Cop Lint BlockAlignment message":{"type":"method","name":"message","children":[],"call":[]}," RuboCop Cop Lint BlockAlignment alt_start_msg":{"type":"method","name":"alt_start_msg","children":[],"call":["do_loc line ","match [] ","start_loc column == ","start_loc column ","start_loc line == ","start_loc line "," or  + "," format_source_line_column ","source_line_column [] "," style != "," style "]}," RuboCop Cop Lint BlockAlignment check_block_alignment":{"type":"method","name":"check_block_alignment","children":[],"call":[" add_offense "," format "," alt_start_msg ","start_loc column ","start_loc line ","start_loc source lines to_a first chomp ","start_loc source lines to_a first ","start_loc source lines to_a ","start_loc source lines ","start_loc source ","end_loc column ","end_loc line ","end_loc column != ","match begin ","(str \"\\\\S.*\") match ","do_loc source_line ","start_loc column != ","do_loc line == ","do_loc line ","block_node loc begin ","block_node loc ","block_node loc end ","start_node loc expression ","start_node loc "," begins_its_line? ","end_loc source ","start_node source_range "," format_source_line_column "," loc_to_source_line_column "," style == "," style "," compute_do_source_line_column "," offense "," register_offense ","start_node loc expression  column ","start_node source_range  column ","start_node loc expression  line ","start_node source_range  line ","start_node loc expression  source lines to_a first chomp ","start_node source_range  source lines to_a first chomp ","start_node loc expression  source lines to_a first ","start_node source_range  source lines to_a first ","start_node loc expression  source lines to_a ","start_node source_range  source lines to_a ","start_node loc expression  source lines ","start_node source_range  source lines ","start_node loc expression  source ","start_node source_range  source ","block_node loc end  column ","block_node loc end  line ","block_node loc end  column != ","(str \"\\S.*\") match  begin ","(str \"\\\\S.*\") (str \"\\S.*\") match  ","block_node loc begin  source_line ","start_node loc expression  column != ","start_node source_range  column != ","block_node loc begin  line == ","block_node loc begin  line ","block_node loc end  source "," compute_ compute_do_source_line_column  "]}," RuboCop Cop Lint BlockAlignment find_block_or_send_node":{"type":"method","name":"find_block_or_send_node","children":[],"call":["(sym :block) include? ","subnode type ","(lvar :receiver) find "]}," RuboCop Cop Lint BlockAlignment find_block_node":{"type":"method","name":"find_block_node","children":[],"call":[" find_block_or_send_node ","node type ","(sym :send) include? "]}," RuboCop Cop Lint BlockAlignment check_assignment":{"type":"method","name":"check_assignment","children":[],"call":[" check_block_alignment ","@inspected_blocks << "," already_processed_node? "," block_is_on_next_line? ","begin_node type != ","begin_node type ","method to_s =~ ","method to_s ","begin_node type == ","block_node type == ","block_node type "," find_block_node "," ignore_node "," ignored_node? "," find_block_node  type == "," find_block_node  type "," find_ find_block_node  "]}," RuboCop Cop Lint BlockAlignment on_masgn":{"type":"method","name":"on_masgn","children":[],"call":[" check_assignment "]}," RuboCop Cop Lint BlockAlignment on_send":{"type":"method","name":"on_send","children":[],"call":[" check_assignment ","args last "]}," RuboCop Cop Lint BlockAlignment on_op_asgn":{"type":"method","name":"on_op_asgn","children":[],"call":[" check_assignment "]}," RuboCop Cop Lint BlockAlignment on_and":{"type":"method","name":"on_and","children":[],"call":["@inspected_blocks << "," check_block_alignment ","right type == ","right type "," already_processed_node? "," ignore_node "," ignored_node? "]}," RuboCop Cop Lint BlockAlignment on_block":{"type":"method","name":"on_block","children":[],"call":[" check_block_alignment "," already_processed_node? "," ignored_node? "," start_for_block_node "]}," RuboCop Cop Lint BlockAlignment initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop Cop Lint AssignmentInCondition check":{"type":"method","name":"check","children":[],"call":[" add_offense ","asgn_node loc operator ","asgn_node loc ","asgn_node type != ","asgn_node type "," safe_assignment? "," safe_assignment_allowed? "," on_node ","condition type == ","condition type ","condition each_node ","method_name != ","asgn_node type == "," traverse_node ","method_name !~ "," allowed_construct? "," skip_children? ","condition block_type? ","node condition ","node condition block_type? "]}," RuboCop Cop Lint AssignmentInCondition on_until":{"type":"method","name":"on_until","children":[],"call":[" check "]}," RuboCop Cop Lint AssignmentInCondition on_while":{"type":"method","name":"on_while","children":[],"call":[" check "]}," RuboCop Cop Lint AssignmentInCondition on_if":{"type":"method","name":"on_if","children":[],"call":[" check "," add_offense "," allowed_construct? "," skip_children? "," traverse_node ","node condition ","node condition block_type? ","asgn_node loc operator ","asgn_node loc ","corrector wrap "," safe_assignment_allowed? "]}," RuboCop Cop Lint AmbiguousRegexpLiteral alternative_message":{"type":"method","name":"alternative_message","children":[],"call":[]}," RuboCop Cop Lint AmbiguousRegexpLiteral relevant_diagnostic?":{"type":"method","name":"relevant_diagnostic?","children":[],"call":["diagnostic reason == ","diagnostic reason "]}," RuboCop Cop Lint AmbiguousOperator alternative_message":{"type":"method","name":"alternative_message","children":[],"call":[" format ","AMBIGUITIES  [] ","diagnostic location source ","diagnostic location "]}," RuboCop Cop Lint AmbiguousOperator relevant_diagnostic?":{"type":"method","name":"relevant_diagnostic?","children":[],"call":["diagnostic reason == ","diagnostic reason "]}," RuboCop Cop IgnoredNode ignored_nodes":{"type":"method","name":"ignored_nodes","children":[],"call":[]}," RuboCop Cop IgnoredNode ignored_node?":{"type":"method","name":"ignored_node?","children":[],"call":["n equal? "," ignored_nodes any? "," ignored_nodes "]}," RuboCop Cop IgnoredNode part_of_ignored_node?":{"type":"method","name":"part_of_ignored_node?","children":[],"call":["ignored_node loc expression end_pos >= ","expression end_pos ","ignored_node loc expression end_pos ","ignored_node loc expression ","ignored_node loc ","ignored_node loc expression begin_pos <= ","expression begin_pos ","ignored_node loc expression begin_pos "," ignored_nodes any? "," ignored_nodes ","node loc expression ","node loc ","ignored_end_pos >= ","node loc expression end_pos ","ignored_loc expression end_pos ","ignored_loc expression ","ignored_loc heredoc_end end_pos ","ignored_loc heredoc_end ","ignored_loc respond_to? ","ignored_loc expression begin_pos > ","node loc expression begin_pos ","ignored_loc expression begin_pos "," ignored_nodes map any? "," ignored_nodes map ","node source_range end_pos ","node source_range ","node source_range begin_pos ","ignored_node loc node loc expression  end_pos >= ","node loc expression  end_pos ","ignored_node loc node loc expression  end_pos ","ignored_node loc node loc expression  ","ignored_node loc node loc expression  begin_pos <= ","node loc expression  begin_pos ","ignored_node loc node loc expression  begin_pos ","node loc node loc expression  ","ignored_loc expression end_pos  >= ","ignored_loc heredoc_end end_pos  >= ","node loc node loc expression  end_pos ","ignored_loc node loc expression  end_pos ","ignored_loc node loc expression  ","ignored_loc node loc expression  begin_pos > ","node loc node loc expression  begin_pos ","ignored_loc node loc expression  begin_pos "]}," RuboCop Cop IgnoredNode ignore_node":{"type":"method","name":"ignore_node","children":[],"call":[" ignored_nodes << "," ignored_nodes "]}," RuboCop Cop Force investigate":{"type":"method","name":"investigate","children":[],"call":[]}," RuboCop Cop Force run_hook":{"type":"method","name":"run_hook","children":[],"call":["cop send ","cop respond_to? "," cops each "," cops ","cop public_send "]}," RuboCop Cop Force name":{"type":"method","name":"name","children":[],"call":[" class force_name "," class "]}," RuboCop Cop Force initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop Cop Force force_name":{"type":"method","name":"force_name","children":[],"call":[]}," RuboCop Cop Force inherited":{"type":"method","name":"inherited","children":[],"call":[]}," RuboCop Cop Force all":{"type":"method","name":"all","children":[],"call":[]}," RuboCop Cop Corrector replace":{"type":"method","name":"replace","children":[],"call":["@source_rewriter replace "," validate_range "," to_range "," validate_ to_range  "," to_ to_range  "]}," RuboCop Cop Corrector insert_after":{"type":"method","name":"insert_after","children":[],"call":["@source_rewriter insert_after "," validate_range "," to_range "," validate_ to_range  "," to_ to_range  "]}," RuboCop Cop Corrector insert_before":{"type":"method","name":"insert_before","children":[],"call":["@source_rewriter insert_before ","range with ","@source_buffer source size ","@source_buffer source ","range end_pos > ","range end_pos "," validate_range "," to_range ","range with  with "," to_range  with ","range with  end_pos > "," to_range  end_pos > ","range with  end_pos "," to_range  end_pos "," validate_range with  "," validate_ to_range  "," to_range with  "," to_ to_range  "]}," RuboCop Cop Corrector remove":{"type":"method","name":"remove","children":[],"call":["@source_rewriter remove "," validate_range "," to_range "," validate_ to_range  "," to_ to_range  "]}," RuboCop Cop Corrector rewrite":{"type":"method","name":"rewrite","children":[],"call":["@source_rewriter process ","correction call ","@corrections each ","@source_rewriter transaction "," raise ","e cause is_a? ","e cause "]}," RuboCop Cop Corrector initialize":{"type":"method","name":"initialize","children":[],"call":["Parser Source Rewriter  new ","@source_rewriter diagnostics consumer= ","@diagnostics << "," lambda ","@source_rewriter diagnostics ","Parser Source TreeRewriter  new "," raise ","source_buffer is_a? "," diagnostics consumer= "," diagnostics "," class source_buffer "," class ","Parser Source Rewriter  new  diagnostics consumer= ","Parser Source TreeRewriter  new  diagnostics consumer= ","@ class source_buffer _rewriter diagnostics consumer= ","Parser Source Rewriter  new  diagnostics ","Parser Source TreeRewriter  new  diagnostics ","@ class source_buffer _rewriter diagnostics "," class source_buffer _buffer is_a? "," class  class source_buffer _buffer "]}," RuboCop Cop Cop custom_severity":{"type":"method","name":"custom_severity","children":[],"call":[" warn ","(str \"Warning: Invalid severity '\") + ","(str \"Valid severities are \") color ","Severity NAMES  join ","severity to_sym ","Severity NAMES  include? "," cop_config [] "," cop_config "," Rainbow red "," Rainbow ","(str \"Warning: Invalid  cop_config []  '\") + "," cop_config []  to_sym "]}," RuboCop Cop Cop default_severity":{"type":"method","name":"default_severity","children":[],"call":[" class lint? "," class "]}," RuboCop Cop Cop enabled_line?":{"type":"method","name":"enabled_line?","children":[],"call":["@processed_source comment_config cop_enabled_at_line? ","@processed_source comment_config ","@processed_source ! ","@options [] "]}," RuboCop Cop Cop file_name_matches_any?":{"type":"method","name":"file_name_matches_any?","children":[],"call":[" match_path? "," config loaded_path "," config ","patterns any? "," config path_relative_to_config "," cop_config [] "," cop_config "," match_ config path_relative_to_config ? "," config loaded_ config path_relative_to_config  "," cop_config []  any? "," config  config path_relative_to_config _relative_to_config "]}," RuboCop Cop Cop relevant_file?":{"type":"method","name":"relevant_file?","children":[],"call":[" exclude_file? ! "," exclude_file? "," include_file? "," file_name_matches_any? ! "," file_name_matches_any? ","file == "]}," RuboCop Cop Cop exclude_file?":{"type":"method","name":"exclude_file?","children":[],"call":[" file_name_matches_any? "]}," RuboCop Cop Cop include_file?":{"type":"method","name":"include_file?","children":[],"call":[" file_name_matches_any? "]}," RuboCop Cop Cop cop_name":{"type":"method","name":"cop_name","children":[],"call":[" class cop_name "," class "]}," RuboCop Cop Cop config_to_allow_offenses=":{"type":"method","name":"config_to_allow_offenses=","children":[],"call":["Formatter DisabledConfigFormatter  config_to_allow_offenses []= "," cop_name ","Formatter DisabledConfigFormatter  config_to_allow_offenses "]}," RuboCop Cop Cop config_to_allow_offenses":{"type":"method","name":"config_to_allow_offenses","children":[],"call":["Formatter DisabledConfigFormatter  config_to_allow_offenses [] "," cop_name ","Formatter DisabledConfigFormatter  config_to_allow_offenses "]}," RuboCop Cop Cop add_offense":{"type":"method","name":"add_offense","children":[],"call":[" block_given? ","@offenses << ","Offense  new "," name "," autocorrect? "," autocorrect "," display_cop_names? "," message "," default_severity "," custom_severity ","o location == ","o location ","@offenses find "," enabled_line? ","location line ","node loc send ","node loc ","loc is_a? "," correct "," annotate_message ","status != ","@offenses any? ","node loc public_send "," duplicate_location? "," find_location "," annotate "," add_offense_common "," add_offense_deprecated ","args any? ","loc line "," find_message "," find_severity "," emulate_v0_callsequence "," autocorrect? ! ","block nil? "," support_autocorrect? ! "," support_autocorrect? "," range_for_original "," b find_location k_given? ","  annotate_message  ","  annotate  ","  find_message  "," default_ find_severity  "," custom_ find_severity  ","o node loc send  == ","o node loc public_send  == ","o  find_location  == ","o  find_location ation == ","o node loc send  ","o node loc public_send  ","o  find_location  ","o  find_location ation ","node loc send  line ","node loc public_send  line "," find_location  line "," find_location ation line ","node  find_location  send ","node  find_location  "," find_location  is_a? "," annotate_ annotate_message  "," annotate_ annotate  "," annotate_ find_message  "," correct  != ","node  find_location  public_send "," duplicate_node loc send ? "," duplicate_node loc public_send ? "," duplicate_ find_location ? "," duplicate_ find_location ation? "," find_node loc send  "," find_node loc public_send  "," find_ find_location  "," find_ find_location ation "," find_ annotate_message  "," find_ annotate  "," find_ find_message  "," find_ find_severity  ","b find_location k nil? ","  find_location _for_original ","  range_for_original _for_original "]}," RuboCop Cop Cop support_autocorrect?":{"type":"method","name":"support_autocorrect?","children":[],"call":[" respond_to? "," class support_autocorrect? "," class "]}," RuboCop Cop Cop message":{"type":"method","name":"message","children":[],"call":[" class "]}," RuboCop Cop Cop display_cop_names?":{"type":"method","name":"display_cop_names?","children":[],"call":["@options [] "," debug? "," config [] [] "," config [] "," config ","@config for_all_cops [] ","@config for_all_cops "]}," RuboCop Cop Cop debug?":{"type":"method","name":"debug?","children":[],"call":["@options [] "]}," RuboCop Cop Cop autocorrect?":{"type":"method","name":"autocorrect?","children":[],"call":[" support_autocorrect? ","@options [] "]}," RuboCop Cop Cop cop_config":{"type":"method","name":"cop_config","children":[],"call":["@config for_cop ","@config for_cop merge "," class department to_s "," class department "," class "]}," RuboCop Cop Cop join_force?":{"type":"method","name":"join_force?","children":[],"call":[]}," RuboCop Cop Cop initialize":{"type":"method","name":"initialize","children":[],"call":["Config  new ","@corrected_nodes compare_by_identity "]}," RuboCop Cop Cop rails?":{"type":"method","name":"rails?","children":[],"call":[]}," RuboCop Cop Cop lint?":{"type":"method","name":"lint?","children":[],"call":[]}," RuboCop Cop Cop cop_type":{"type":"method","name":"cop_type","children":[],"call":[]}," RuboCop Cop Cop inherited":{"type":"method","name":"inherited","children":[],"call":[]}," RuboCop Cop Cop non_rails":{"type":"method","name":"non_rails","children":[],"call":[]}," RuboCop Cop Cop qualified_cop_name":{"type":"method","name":"qualified_cop_name","children":[],"call":[]}," RuboCop Cop Cop all":{"type":"method","name":"all","children":[],"call":[]}," RuboCop Cop CopStore without_type":{"type":"method","name":"without_type","children":[],"call":["c cop_type == ","c cop_type "," reject ","CopStore  new "]}," RuboCop Cop CopStore with_type":{"type":"method","name":"with_type","children":[],"call":["c cop_type == ","c cop_type "," select ","CopStore  new "]}," RuboCop Cop CopStore types":{"type":"method","name":"types","children":[],"call":[" map uniq! "," map "]}," RuboCop Cop Commissioner with_cop_error_handling":{"type":"method","name":"with_cop_error_handling","children":[],"call":["@errors [] << ","@errors [] "," raise ","@options [] ","CopError  new ","node loc column ","node loc ","node loc line ","node first_line ","@errors << ","ErrorWithAnalyzedFileLocation  new ","@CopError  new s [] << ","@ErrorWithAnalyzedFileLocation  new ors [] << ","@CopError  new s [] ","@ErrorWithAnalyzedFileLocation  new ors [] ","node loc node loc column  ","node loc node loc line  ","node loc node first_line  ","node first_node loc line  ","node first_node first_line  ","@CopError  new s << ","@ErrorWithAnalyzedFileLocation  new ors << "]}," RuboCop Cop Commissioner invoke_custom_processing":{"type":"method","name":"invoke_custom_processing","children":[],"call":["cop investigate "," with_cop_error_handling ","cop relevant_file? ","processed_source buffer name ","processed_source buffer ","cop respond_to? ","cops_or_forces each "]}," RuboCop Cop Commissioner prepare":{"type":"method","name":"prepare","children":[],"call":["cop processed_source= ","@cops each "]}," RuboCop Cop Commissioner reset_errors":{"type":"method","name":"reset_errors","children":[],"call":["hash []= ","Hash  new "]}," RuboCop Cop Commissioner investigate":{"type":"method","name":"investigate","children":[],"call":["offenses concat ","cop offenses ","cop relevant_file? ","processed_source buffer name ","processed_source buffer ","@cops each_with_object "," process ","processed_source ast "," invoke_custom_processing "," prepare "," reset_errors ","@cops flat_map "," remove_irrelevant_cops "," walk "," setup_callbacks "," reset_callbacks ","processed_source blank? ","processed_source file_path "," invoke_custom_post_walk_processing ","InvestigationReport  new ","cop send ","@cops map "," invoke ","@cops empty? ","processed_source valid_syntax? ","@cops each "," reset "," invoke_with_argument "," begin_investigation "]}," RuboCop Cop Commissioner initialize":{"type":"method","name":"initialize","children":[],"call":[" reset_errors "," reset ","h []= "," cops_callbacks_for ","Hash  new "," initialize_callbacks "]}," RuboCop Cop Commissioner call_super":{"type":"method","name":"call_super","children":[],"call":[]}," RuboCop Cop Commissioner callback_methods":{"type":"method","name":"callback_methods","children":[],"call":[]}," RuboCop ConfigStore for":{"type":"method","name":"for","children":[],"call":["ConfigLoader  configuration_from_file "," print ","ConfigLoader  debug? ","@object_cache [] ","@path_cache [] ","ConfigLoader  configuration_file_for ","File  dirname ","File  directory? "," for_dir ","@@path_cache [] _cache [] ","File  File  dirname name ","File  File  dirname ectory? "," for_File  dirname  "]}," RuboCop ConfigStore options_config=":{"type":"method","name":"options_config=","children":[],"call":["ConfigLoader  merge_with_default ","ConfigLoader  load_file "]}," RuboCop ConfigStore initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop ConfigLoader old_auto_config_file_warning":{"type":"method","name":"old_auto_config_file_warning","children":[],"call":[" exit "," warn ","(str \"Attention: rubocop-todo.yml has been renamed to \") color "," Rainbow red "," Rainbow "," fail "," raise "]}," RuboCop ConfigLoader dirs_to_search":{"type":"method","name":"dirs_to_search","children":[],"call":["dirs_to_search << ","Dir  home ","dir_pathname to_s ","dir_pathname to_s == ","Pathname  new ascend ","Pathname  new ","File  expand_path ","ENV  key? "]}," RuboCop ConfigLoader config_files_in_path":{"type":"method","name":"config_files_in_path","children":[],"call":["File  exist? ","possible_config_files select ","File  join "," dirs_to_search map "," dirs_to_search "]}," RuboCop ConfigLoader resolve_inheritance":{"type":"method","name":"resolve_inheritance","children":[],"call":["hash []= "," merge ","hash [] ","hash key? ","v is_a? ","base_config each "," base_configs reverse_each "," base_configs "]}," RuboCop ConfigLoader merge_with_default":{"type":"method","name":"merge_with_default","children":[],"call":["Config  new "," merge "," default_configuration ","configs last ","configs first ","(pair\n  (str \"Enabled\")\n  (true)) merge "," transform ","params merge ","config [] [] ","config [] ","config key? ","config for_all_cops [] ","config for_all_cops ","disabled_by_default ! "," handle_disabled_by_default "," resolver merge_with_default "," resolver ","  default_configuration  "," default_ handle_disabled_by_default uration "," handle_disabled_by_default s last "," handle_disabled_by_default s first "," handle_disabled_by_default  [] [] "," handle_disabled_by_default  [] "," handle_disabled_by_default  key? "," handle_disabled_by_default  for_all_cops [] "," handle_disabled_by_default  for_all_cops ","config for_all_cops []  ! "," handle_config for_all_cops []  "]}," RuboCop ConfigLoader default_configuration":{"type":"method","name":"default_configuration","children":[],"call":[" load_file "," print "," debug? "]}," RuboCop ConfigLoader configuration_from_file":{"type":"method","name":"configuration_from_file","children":[],"call":[" merge_with_default ","config add_excludes_from_higher_level "," load_file ","found_files last "," print "," debug? ","found_files last != ","found_files any? "," config_files_in_path ","config_file == "," add_excludes_from_files "," ignore_parent_exclusion? "," warn_on_pending_cops "," merge_with_default tap ","merged_config pending_cops "," possible_new_cops? ","ConfigLoader  default_configuration "," default_configuration ","config validate_after_resolution ","pending_cops empty? "," pending_cops_only_qualified "," load_file  add_excludes_from_higher_level "," config_files_in_path  last "," config_files_in_path  last != "," config_files_in_path  any? ","  load_file _files_in_path "," load_file _file == "," warn_on_ pending_cops_only_qualified  ","merged_ load_file  pending_cops ","merged_config  pending_cops_only_qualified  ","ConfigLoader  default_ load_file uration "," default_ load_file uration "," load_file  validate_after_resolution "," pending_cops_only_qualified  empty? ","  pending_cops_only_qualified _only_qualified "]}," RuboCop ConfigLoader configuration_file_for":{"type":"method","name":"configuration_file_for","children":[],"call":[" config_files_in_path first "," config_files_in_path "," find_file_upwards "," find_user_xdg_config "," find_user_dotfile "," find_project_dotfile ","ConfigFinder  find_config_path "]}," RuboCop ConfigLoader base_configs":{"type":"method","name":"base_configs","children":[],"call":["configs compact "," load_file "," print "," debug? "," old_auto_config_file_warning ","f include? "," auto_gen_config? ","File  join ","File  dirname ","f start_with? "," Array map "," Array ","File  expand_path ","RemoteConfig  new file ","RemoteConfig  new ","f =~ ","URI  regexp "," Array compact map "," Array compact ","URI Parser  new make_regexp ","URI Parser  new ","URI DEFAULT_PARSER  make_regexp "," inherited_file ","conFile  join igs compact ","conFile  expand_path igs compact ","conRemoteConfig  new file igs compact "," load_File  join ile "," load_File  expand_path ile "," load_RemoteConfig  new file ile "," old_auto_conFile  join ig_File  join ile_warning "," old_auto_conFile  expand_path ig_File  expand_path ile_warning "," old_auto_conRemoteConfig  new file ig_RemoteConfig  new file ile_warning ","File  join  include? ","File  expand_path  include? ","RemoteConfig  new file  include? "," auto_gen_conFile  join ig? "," auto_gen_conFile  expand_path ig? "," auto_gen_conRemoteConfig  new file ig? ","File  join  start_with? ","File  expand_path  start_with? ","RemoteConfig  new file  start_with? ","RemoteConFile  join ig  new File  join ile ","RemoteConFile  expand_path ig  new File  expand_path ile ","RemoteConRemoteConfig  new file ig  new RemoteConfig  new file ile ","RemoteConFile  join ig  new ","RemoteConFile  expand_path ig  new ","RemoteConRemoteConfig  new file ig  new ","File  join  =~ ","File  expand_path  =~ ","RemoteConfig  new file  =~ "," inherited_File  join ile "," inherited_File  expand_path ile "," inherited_RemoteConfig  new file ile "]}," RuboCop ConfigLoader merge":{"type":"method","name":"merge","children":[],"call":["result []= "," merge ","derived_hash [] ","base_hash [] ","base_hash [] is_a? ","keys_appearing_in_both each ","base_hash keys & ","derived_hash keys ","base_hash keys ","base_hash merge "," resolver merge "," resolver ","base_hash merge  []= ","base_hash keys &  each "]}," RuboCop ConfigLoader load_file":{"type":"method","name":"load_file","children":[],"call":["config make_excludes_absolute ","config warn_unless_valid ","config add_missing_namespaces "," warn ","config deprecation_check ","Config  new ","hash delete "," require "," Array each "," Array "," resolve_inheritance "," puts "," debug? ","YAML  load_file ","File  absolute_path ","YAML ENGINE  yamler= ","YAML ENGINE  yamler ","RUBY_PLATFORM  != ","RUBY_VERSION  < ","YAML  load ","yaml_code =~ ","IO  read "," load_yaml_configuration "," resolve_inheritance_from_gems ","config validate ","File  join ","File  dirname "," resolve_requires ","config delete "," add_missing_namespaces "," create_config "," target_ruby_version_to_f! ","file file ","file is_a? ","file nil? ","Config  create "," resolver resolve_inheritance "," resolver "," resolver resolve_inheritance_from_gems "," resolver resolve_requires "," resolver override_department_setting_for_cops "," add_loaded_features "," file_path ","Config  new  make_excludes_absolute ","Config  new  warn_unless_valid ","Config  new  add_missing_namespaces ","Config  new  deprecation_check ","YAML  load  delete "," load_yaml_configuration  delete ","File  absolute_File  absolute_path  ","File  absolute_ file_path  ","IO  read  =~ "," load_yaml_Config  new uration ","Config  new  validate ","Config  new  delete "," create_Config  new  "," add_ resolver resolve_requires  "," file_File  absolute_path  "," file_ file_path  "]}," RuboCop Config base_dir_for_path_parameters":{"type":"method","name":"base_dir_for_path_parameters","children":[],"call":["Dir  pwd ","File  expand_path ","File  dirname "," loaded_path ","File  basename == ","File  basename ","config_files include? "," loaded_path != ","File  join ","Dir  home ","File  basename start_with? "]}," RuboCop Config path_relative_to_config":{"type":"method","name":"path_relative_to_config","children":[],"call":[" relative_path "," base_dir_for_path_parameters "]}," RuboCop Config patterns_to_exclude":{"type":"method","name":"patterns_to_exclude","children":[],"call":["@hash [] [] ","@hash [] "," [] [] "," [] "," for_all_cops [] "," for_all_cops "]}," RuboCop Config patterns_to_include":{"type":"method","name":"patterns_to_include","children":[],"call":["@hash [] [] ","@hash [] "," [] [] "," [] "," for_all_cops [] "," for_all_cops "]}," RuboCop Config file_to_exclude?":{"type":"method","name":"file_to_exclude?","children":[],"call":[" match_path? "," loaded_path "," patterns_to_exclude any? "," patterns_to_exclude ","File  expand_path "]}," RuboCop Config file_to_include?":{"type":"method","name":"file_to_include?","children":[],"call":[" match_path? "," loaded_path "," patterns_to_include any? "," patterns_to_include "," path_relative_to_config ","File  expand_path "," possibly_include_hidden? ! "," possibly_include_hidden? ","relative_file_path start_with? ! ","relative_file_path start_with? "," block_given? "," path_relative_to_config  start_with? ! "," path_relative_to_config  start_with? "]}," RuboCop Config validate":{"type":"method","name":"validate","children":[],"call":[" fail "," loaded_path ","default_config [] key? ","default_config [] ","COMMON_PARAMS  include? ","@hash [] each_key ","@hash [] ","valid_cop_names each ","invalid_cop_names each ","default_config key? ","@hash keys partition ","@hash keys ","ConfigLoader  default_configuration ","@loaded_path start_with? ","File  join "," validate_parameter_names ","ConfigLoader  default_configuration key? "," loaded_path start_with? ","File  expand_path start_with? ","File  expand_path "," keys partition "," keys "," validate_enforced_styles "," check_target_ruby "," reject_obsolete_parameters "," warn_about_unrecognized_cops "," reject_obsolete_cops "," reject_obsolete_cops_and_parameters "," reject_mutually_exclusive_defaults "," validate_syntax_cop ","ConfigLoader  default_configuration  [] key? ","ConfigLoader  default_configuration  [] ","ConfigLoader  default_configuration  key? ","ConfigLoader  ConfigLoader  default_configuration uration ","ConfigLoader  ConfigLoader  default_configuration uration key? "]}," RuboCop Config add_missing_namespaces":{"type":"method","name":"add_missing_namespaces","children":[],"call":[" delete "," []= "," [] ","q == ","Cop Cop  qualified_cop_name "," loaded_path "," keys each "," keys ","Cop Cop  qualified_cop_name  == ","Cop Cop  Cop Cop  qualified_cop_name ualified_cop_name "]}," RuboCop Config warn_unless_valid":{"type":"method","name":"warn_unless_valid","children":[],"call":[" warn ","(str \"Warning: \") color ","e message "," validate ","Rainbow  new wrap red ","Rainbow  new wrap ","Rainbow  new "]}," RuboCop Config cop_enabled?":{"type":"method","name":"cop_enabled?","children":[],"call":[" for_cop [] "," for_cop "," for_cop nil? "," for_cop empty? ","dept_config [] == ","dept_config [] "," [] ","cop split [] ","cop split ","cop cop_type to_s capitalize ","cop cop_type to_s ","cop cop_type ","cop respond_to? ","cop cop_type to_s capitalize! "," for_cop fetch ","cop department to_s ","cop department "," []  [] == "," []  [] ","cop cop split []  to_s ","cop cop cop_type to_s capitalize  to_s ","cop cop cop_type to_s capitalize!  to_s ","cop cop split []  ","cop cop cop_type to_s capitalize  ","cop cop cop_type to_s capitalize!  "]}," RuboCop Config for_cop":{"type":"method","name":"for_cop","children":[],"call":[" [] ","Cop Cop  qualified_cop_name "," loaded_path ","@for_cop [] ","cop cop_name ","cop respond_to? ","Cop Cop  qualified_cop cop_name _name ","@for_cop cop_name  [] ","cop cop_name  cop cop_name _name ","cop cop_name  respond_to? "]}," RuboCop Config deprecation_check":{"type":"method","name":"deprecation_check","children":[],"call":["all_cops delete ","all_cops []= ","all_cops [] ","(str \"Exclude\") each "," [] "," for_all_cops delete "," for_all_cops "," for_all_cops []= "," for_all_cops [] "," []  delete "," []  []= "," []  [] "," for_ []  delete "," for_ []  "," for_ []  []= "," for_ []  [] "]}," RuboCop Config add_excludes_from_higher_level":{"type":"method","name":"add_excludes_from_higher_level","children":[],"call":["excludes << ","excludes include? ","File  join ","File  dirname ","highest_config loaded_path ","path start_with? ","path is_a? ","highest_config [] [] each ","highest_config [] [] ","highest_config [] "," [] [] "," [] "," absolute? ","highest_config for_all_cops [] each ","highest_config for_all_cops [] ","highest_config for_all_cops "," for_all_cops [] "," for_all_cops ","highest_config loaded_File  join  ","File  join  start_with? ","File  join  is_a? "]}," RuboCop Config make_excludes_absolute":{"type":"method","name":"make_excludes_absolute","children":[],"call":["File  join "," base_dir_for_path_parameters ","exclude_elem start_with? ! ","exclude_elem start_with? ","exclude_elem is_a? "," [] [] map! "," [] [] "," [] "," keys each "," keys ","File  expand_path "," validate_section_presence "," each_key "," absolute? ! "," absolute? "," each ","@validator validate_section_presence "]}," RuboCop Config initialize":{"type":"method","name":"initialize","children":[],"call":["h []= "," [] ","Cop Cop  qualified_cop_name ","Hash  new "," replace ","cop_options []= "," enable_cop? ","ConfigValidator  new ","Cop Registry  qualified_cop_name "," [] dup ","cop cop_name ","cop respond_to? "," compare_by_identity ","Cop Cop  Cop Cop  qualified_cop_name  ","Cop Cop  Cop Registry  qualified_cop_name  ","Cop Cop  qualified_cop cop_name  ","Cop Registry  Cop Cop  qualified_cop_name  ","Cop Registry  Cop Registry  qualified_cop_name  ","Cop Registry  qualified_cop cop_name  ","cop cop cop_name  "]}," RuboCop CommentConfig non_comment_token_line_numbers":{"type":"method","name":"non_comment_token_line_numbers","children":[],"call":["(send\n  (lvar :non_comment_tokens) :map) uniq ","token pos line ","token pos ","non_comment_tokens map ","token type == ","token type "," processed_source tokens reject "," processed_source tokens "," processed_source ","non_comment_tokens map uniq ","(send\n  (lvar : processed_source tokens reject ) :map) uniq "," processed_source tokens reject  map "," processed_source tokens reject  map uniq "]}," RuboCop CommentConfig comment_only_line?":{"type":"method","name":"comment_only_line?","children":[],"call":["non_comment_line_number == "," non_comment_token_line_numbers none? "," non_comment_token_line_numbers "]}," RuboCop CommentConfig each_mentioned_cop":{"type":"method","name":"each_mentioned_cop","children":[],"call":["Cop Cop  qualified_cop_name "," processed_source buffer name "," processed_source buffer "," processed_source ","cop_names each "," comment_only_line? ! "," comment_only_line? ","comment loc expression line ","comment loc expression ","comment loc ","switch == ","cops_string split ","Cop Cop  all map ","Cop Cop  all ","cops_string == ","match captures ","comment text match ","comment text "," processed_source comments each "," processed_source comments "," processed_source comments nil? "," all_cop_names ","cop_name strip "," qualified_cop_name "," each_directive "," directive_on_comment_line? ","Cop Cop  qualified_Cop Cop  qualified_cop_name  ","Cop Cop  qualified_cop_name s each ","cops_string split  each "," all_cop_names  each ","comment text match  captures ","comment text comment text match  "," all_Cop Cop  qualified_cop_name s "," all_cops_string split  "," all_ all_cop_names  ","Cop Cop  qualified_cop_name  strip "," qualified_Cop Cop  qualified_cop_name  "]}," RuboCop CommentConfig analyze":{"type":"method","name":"analyze","children":[],"call":["disabled_line_ranges [] << ","disabled_line_ranges [] ","disablement_start_line_numbers each ","disablement_start_line_numbers delete ","disablement_start_line_numbers []= "," each_mentioned_cop ","hash []= ","Hash  new ","disablement_start_line_numbers [] "," cop_line_ranges ","analyses each_with_object ","analyses []= "," analyze_cop ","analyses [] ","CopAnalysis  new "," qualified_cop_name ","directive cop_names each ","directive cop_names "," each_directive "," inject_disabled_cops_directives ","disablement_disablement_start_line_numbers delete _numbers each ","disablement_disablement_start_line_numbers delete _numbers delete ","disablement_disablement_start_line_numbers delete _numbers []= ","disablement_disablement_start_line_numbers delete _numbers [] "," qualified_ qualified_cop_name  ","directive  qualified_cop_name s each ","directive  qualified_cop_name s "]}," RuboCop CommentConfig cop_disabled_line_ranges":{"type":"method","name":"cop_disabled_line_ranges","children":[],"call":[" analyze "]}," RuboCop CommentConfig cop_enabled_at_line?":{"type":"method","name":"cop_enabled_at_line?","children":[],"call":["range include? ","disabled_line_ranges none? "," cop_disabled_line_ranges [] "," cop_disabled_line_ranges ","cop cop_name ","cop respond_to? "," cop_disabled_line_ranges []  none? "," cop_ cop_disabled_line_ranges []  [] "," cop cop_name _disabled_line_ranges [] "," cop_ cop_disabled_line_ranges []  "," cop cop_name _disabled_line_ranges ","cop cop_name  cop cop_name _name ","cop cop_name  respond_to? "]}," RuboCop CommentConfig initialize":{"type":"method","name":"initialize","children":[],"call":["processed_source raw_source include? ! ","processed_source raw_source include? ","processed_source raw_source "]}," RuboCop CLI target_finder":{"type":"method","name":"target_finder","children":[],"call":["TargetFinder  new "]}," RuboCop CLI print_cops_of_type":{"type":"method","name":"print_cops_of_type","children":[],"call":[" puts ","   + ","cnf to_yaml lines to_a [] map ","cnf to_yaml lines to_a [] ","cnf to_yaml lines to_a ","cnf to_yaml lines ","cnf to_yaml ","@config_store for for_cop ","@config_store for ","Dir  pwd to_s ","Dir  pwd ","cop cop_name ","cop new support_autocorrect? ","cop new ","selected_cops each ","@options [] include? ","@options [] ","cops_of_this_type select ","cops_of_this_type size ","type to_s capitalize ","type to_s ","cops with_type sort_by! ","cops with_type ","cnf to_yaml lines to_a butfirst map ","cnf to_yaml lines to_a butfirst "," config_lines ","selected_cops size "," selected_cops_of_type "," cops_of_type ","@config_store for for_cop  to_yaml lines to_a [] map ","@config_store for for_cop  to_yaml lines to_a [] ","@config_store for for_cop  to_yaml lines to_a ","@config_store for for_cop  to_yaml lines ","@config_store for for_cop  to_yaml "," selected_cops_of_type  each "," cops_of_type  each ","cops with_type sort_by!  select ","cops with_type sort_by!  size ","@config_store for for_cop  to_yaml lines to_a butfirst map ","@config_store for for_cop  to_yaml lines to_a butfirst "," selected_cops_of_type  size "," cops_of_type  size ","  selected_cops_of_type _of_type ","  cops_of_type _of_type "]}," RuboCop CLI print_available_cops":{"type":"method","name":"print_available_cops","children":[],"call":[" print_cops_of_type ","cops types sort! each ","cops types sort! ","cops types "," puts ","Dir  pwd ","cops length ","@options [] empty? ","@options [] ","Cop Cop  all ","@config_store for "," print_cops_of_department ","registry departments sort! each ","registry departments sort! ","registry departments ","registry length ","Cop Cop  registry "," print_Cop Cop  all _of_type ","Cop Cop  all  types sort! each ","Cop Cop  all  types sort! ","Cop Cop  all  types ","Cop Cop  all  length "," print_Cop Cop  all _of_department ","Cop Cop  registry  departments sort! each ","Cop Cop  registry  departments sort! ","Cop Cop  registry  departments ","Cop Cop  registry  length ","Cop Cop  Cop Cop  registry  "]}," RuboCop CLI handle_exiting_options":{"type":"method","name":"handle_exiting_options","children":[],"call":[" exit "," print_available_cops ","@options [] "," puts ","RuboCop Version  version ","@options key? ","Options EXITING_OPTIONS  any? "," fail "," raise "," run_command "]}," RuboCop CLI act_on_options":{"type":"method","name":"act_on_options","children":[],"call":["Rainbow  enabled= ","@options [] ","@config_store options_config= ","ConfigLoader  auto_gen_config= ","ConfigLoader  debug= "," handle_exiting_options ","ConfigLoader  exclude_limit= ","@options [] == ","@config_store force_default_config! ","ConfigLoader  ignore_parent_exclusion= ","ConfigLoader  options_config= "," set_options_to_config_loader "]}," RuboCop CLI trap_interrupt":{"type":"method","name":"trap_interrupt","children":[],"call":["$stderr puts "," wants_to_quit= "," exit! "," wants_to_quit? ","Signal  trap ","runner abort ","runner aborting? "," warn "]}," RuboCop CLI run":{"type":"method","name":"run","children":[],"call":["$stderr puts ","e backtrace ","e message "," wants_to_quit ! "," wants_to_quit ","any_failed ! ","inspector display_error_summary "," wants_to_quit? ","inspector process_files ","FileInspector  new "," target_finder find "," target_finder "," act_on_options ","Options  new parse ","Options  new "," trap_interrupt ","runner aborting? ! ","runner aborting? "," display_error_summary ","runner errors ","runner run ","Runner  new ","runner errors empty? "," display_warning_summary ","runner warnings "," Rainbow red "," Rainbow "," maybe_print_corrected_source "," apply_default_formatter "," execute_runner "," validate_options_vs_config "," warn "," execute_runners ","e status ","ex backtrace ","ex message "," init_dotfile ","@options [] "," run_command ","Environment  new "," parallel_by_default! "," profile_if_needed ","FileInspector  new  display_error_summary ","FileInspector  new  process_files ","Runner  new  aborting? ! ","Runner  new  aborting? ","Runner  new  errors ","Runner  new  run ","Runner  new  errors empty? ","Runner  new  warnings "," execute_Runner  new  "," execute_Runner  new s "]}," RuboCop CLI initialize":{"type":"method","name":"initialize","children":[],"call":["ConfigStore  new "]}," RuboCop Runner file_info":{"type":"method","name":"file_info","children":[],"call":["processed_source disabled_line_ranges "]}," RuboCop Runner minimum_severity_to_fail":{"type":"method","name":"minimum_severity_to_fail","children":[],"call":["RuboCop Cop Severity  new ","@options [] ","name == "]}," RuboCop Runner considered_failure?":{"type":"method","name":"considered_failure?","children":[],"call":["offense severity >= "," minimum_severity_to_fail ","offense severity ","offense corrected? ! ","offense corrected? ","@options [] == ","@options [] ","offense disabled? ","offense correctable? "]}," RuboCop Runner formatter_set":{"type":"method","name":"formatter_set","children":[],"call":[" exit ","$stderr puts ","error backtrace "," warn ","error message ","set add_formatter ","pairs each ","@options [] ","Formatter FormatterSet  new ","Formatter FormatterSet  new  add_formatter "]}," RuboCop Runner run_rails_cops?":{"type":"method","name":"run_rails_cops?","children":[],"call":["config [] [] ","config [] ","@options [] "]}," RuboCop Runner mobilized_cop_classes":{"type":"method","name":"mobilized_cop_classes","children":[],"call":["cop_classes select! ","@options [] ","cop_classes reject! "," run_rails_cops? ","c lint? ","@options [] include? ","c cop_name ","Cop Cop  all ","@mobilized_cop_classes [] ","config object_id "," validate_only_option "," filter_cop_classes "," cop_match? ","Options  validate_cop_list ","(sym :only) each ","c match? ","OptionsValidator  validate_cop_list ","Cop Registry  new ","OptionsValidator  new validate_cop_options ","OptionsValidator  new ","Cop Registry  all "," compare_by_identity "," qualify_option_cop_names ","Cop Cop  all  select! ","Cop Registry  all  select! ","Cop Cop  all  reject! ","Cop Registry  all  reject! ","@mobilized_Cop Cop  all  [] ","@mobilized_Cop Registry  all  [] "," filter_Cop Cop  all  "," filter_Cop Registry  all  "]}," RuboCop Runner inspect_file":{"type":"method","name":"inspect_file","children":[],"call":["team updated_source_file? ","@errors concat ","team errors ","team inspect_file ","Cop Team  new "," mobilized_cop_classes ","@config_store for ","processed_source path ","@warnings concat ","team warnings "," enable_rails_cops ","@options [] ","ConfigLoader  required_features include? ","ConfigLoader  required_features ","Cop Team  mobilize ","@config_store for_file ","report offenses ","team investigate ","extracted_ruby_source [] ","extracted_ruby_sources flat_map "," extract_ruby_sources ","Cop Team  new  updated_source_file? ","Cop Team  mobilize  updated_source_file? ","Cop Team  new  errors ","Cop Team  mobilize  errors ","Cop Team  new  inspect_file ","Cop Team  mobilize  inspect_file ","@@config_store for _store for ","@@config_store for_file _store for ","Cop Team  new  warnings ","Cop Team  mobilize  warnings ","@@config_store for _store for_file ","@@config_store for_file _store for_file ","report team inspect_file  ","team investigate  offenses ","Cop Team  new  investigate ","Cop Team  mobilize  investigate "," extract_ruby_sources  flat_map "]}," RuboCop Runner process_file":{"type":"method","name":"process_file","children":[],"call":[" formatter_set file_finished ","offenses sort freeze ","offenses sort "," formatter_set ","ProcessedSource  from_file ","offenses concat uniq! ","offenses concat "," inspect_file ","offenses select! "," loop "," formatter_set file_started "," file_info "," puts ","@options [] ","offenses compact sort freeze ","offenses compact sort ","offenses compact "," do_inspection_loop "," raise ","e offenses compact sort freeze ","e offenses compact sort ","e offenses compact ","e offenses ","processed_source comments ","processed_source disabled_line_ranges ","cache save "," file_started "," get_processed_source ","cache load ","cache valid? ","ResultCache  new "," cached_run? "," save_in_cache ","SimpleDelegator  new "," add_unneeded_disables "," file_offenses "," considered_failure? ","offenses select ","ex offenses compact sort freeze ","ex offenses compact sort ","ex offenses compact ","ex offenses "," file_finished "," do_inspection_loop  sort freeze "," formatter_set file_finished  sort freeze "," add_unneeded_disables  sort freeze ","cache load  sort freeze "," file_offenses  sort freeze ","e offenses compact sort freeze  sort freeze "," do_inspection_loop  sort "," formatter_set file_finished  sort "," add_unneeded_disables  sort ","cache load  sort "," file_offenses  sort ","e offenses compact sort freeze  sort "," do_inspection_loop  concat uniq! "," formatter_set file_finished  concat uniq! "," add_unneeded_disables  concat uniq! ","cache load  concat uniq! "," file_offenses  concat uniq! ","e offenses compact sort freeze  concat uniq! "," do_inspection_loop  concat "," formatter_set file_finished  concat "," add_unneeded_disables  concat ","cache load  concat "," file_offenses  concat ","e offenses compact sort freeze  concat "," do_inspection_loop  select! "," formatter_set file_finished  select! "," add_unneeded_disables  select! ","cache load  select! "," file_offenses  select! ","e offenses compact sort freeze  select! "," do_inspection_loop  compact sort freeze "," formatter_set file_finished  compact sort freeze "," add_unneeded_disables  compact sort freeze ","cache load  compact sort freeze "," file_offenses  compact sort freeze ","e offenses compact sort freeze  compact sort freeze "," do_inspection_loop  compact sort "," formatter_set file_finished  compact sort "," add_unneeded_disables  compact sort ","cache load  compact sort "," file_offenses  compact sort ","e offenses compact sort freeze  compact sort "," do_inspection_loop  compact "," formatter_set file_finished  compact "," add_unneeded_disables  compact ","cache load  compact "," file_offenses  compact ","e offenses compact sort freeze  compact ","e  do_inspection_loop  compact sort freeze ","e  formatter_set file_finished  compact sort freeze ","e  add_unneeded_disables  compact sort freeze ","e cache load  compact sort freeze ","e  file_offenses  compact sort freeze ","e e offenses compact sort freeze  compact sort freeze ","e  do_inspection_loop  compact sort ","e  formatter_set file_finished  compact sort ","e  add_unneeded_disables  compact sort ","e cache load  compact sort ","e  file_offenses  compact sort ","e e offenses compact sort freeze  compact sort ","e  do_inspection_loop  compact ","e  formatter_set file_finished  compact ","e  add_unneeded_disables  compact ","e cache load  compact ","e  file_offenses  compact ","e e offenses compact sort freeze  compact ","e  do_inspection_loop  ","e  formatter_set file_finished  ","e  add_unneeded_disables  ","e cache load  ","e  file_offenses  ","e e offenses compact sort freeze  ","ProcessedSource  from_file  comments "," get_processed_source  comments ","processed_source SimpleDelegator  new  ","processed_ get_processed_source  comments ","ProcessedSource  from_file  disabled_line_ranges "," get_processed_source  disabled_line_ranges ","processed_ get_processed_source  disabled_line_ranges ","ResultCache  new  save "," get_ProcessedSource  from_file  "," get_ get_processed_source  "," get_processed_ get_processed_source  ","ResultCache  new  load ","ResultCache  new  valid? "," ResultCache  new d_run? "," save_in_ResultCache  new  "," file_ do_inspection_loop  "," file_ formatter_set file_finished  "," file_ add_unneeded_disables  "," file_cache load  "," file_ file_offenses  "," file_e offenses compact sort freeze  "," do_inspection_loop  select "," formatter_set file_finished  select "," add_unneeded_disables  select ","cache load  select "," file_offenses  select ","e offenses compact sort freeze  select ","ex  do_inspection_loop  compact sort freeze ","ex  formatter_set file_finished  compact sort freeze ","ex  add_unneeded_disables  compact sort freeze ","ex cache load  compact sort freeze ","ex  file_offenses  compact sort freeze ","ex e offenses compact sort freeze  compact sort freeze ","ex  do_inspection_loop  compact sort ","ex  formatter_set file_finished  compact sort ","ex  add_unneeded_disables  compact sort ","ex cache load  compact sort ","ex  file_offenses  compact sort ","ex e offenses compact sort freeze  compact sort ","ex  do_inspection_loop  compact ","ex  formatter_set file_finished  compact ","ex  add_unneeded_disables  compact ","ex cache load  compact ","ex  file_offenses  compact ","ex e offenses compact sort freeze  compact ","ex  do_inspection_loop  ","ex  formatter_set file_finished  ","ex  add_unneeded_disables  ","ex cache load  ","ex  file_offenses  ","ex e offenses compact sort freeze  "]}," RuboCop Runner find_target_files":{"type":"method","name":"find_target_files","children":[],"call":["target_files each freeze ","target_files each ","target_finder find ","TargetFinder  new ","@options [] ","target_finder find  each freeze ","target_finder find  each ","TargetFinder  new  find "]}," RuboCop Runner abort":{"type":"method","name":"abort","children":[],"call":[]}," RuboCop Runner run":{"type":"method","name":"run","children":[],"call":[" formatter_set close_output_files "," formatter_set "," formatter_set finished ","inspected_files freeze ","all_passed ! ","@options [] ","inspected_files << "," considered_failure? ","offenses any? "," process_file "," aborting? ","target_files each "," formatter_set started "," find_target_files "," inspect_files "," list_files "," warm_cache "," warn "," aborting= "," process_file  any? "," find_target_files  each "," find_ find_target_files  "]}," RuboCop Runner initialize":{"type":"method","name":"initialize","children":[],"call":[" warn ","@options key? "]}," RuboCop ProcessedSource create_parser":{"type":"method","name":"create_parser","children":[],"call":["parser diagnostics consumer= ","@diagnostics << "," lambda ","parser diagnostics ","parser diagnostics ignore_warnings= ","parser diagnostics all_errors_are_fatal= ","RUBY_ENGINE  != ","Parser CurrentRuby  new tap ","Parser CurrentRuby  new ","Astrolabe Builder  new "," parser_class new tap "," parser_class new "," parser_class ","RuboCop Node Builder  new ","RuboCop AST Builder  new "]}," RuboCop ProcessedSource parse":{"type":"method","name":"parse","children":[],"call":["Token  from_parser_token ","tokens map ","parser tokenize "," create_parser ","@buffer source= ","Parser Source Buffer  new ","@ast complete! "," tokenize ","Token  from_ create_parser _token "," create_parser  tokenize "," create_ create_parser  ","Parser Source Buffer  new  source= "]}," RuboCop ProcessedSource comment_config":{"type":"method","name":"comment_config","children":[],"call":["CommentConfig  new "]}," RuboCop ProcessedSource from_file":{"type":"method","name":"from_file","children":[],"call":[]}," RuboCop Cop VariableForce Variable explicit_block_local_variable?":{"type":"method","name":"explicit_block_local_variable?","children":[],"call":["@declaration_node type == ","@declaration_node type ","@declaration_node shadowarg_type? "]}," RuboCop Cop VariableForce Variable should_be_unused?":{"type":"method","name":"should_be_unused?","children":[],"call":[" name to_s start_with? "," name to_s "," name "]}," RuboCop Cop Util numeric_range_size":{"type":"method","name":"numeric_range_size","children":[],"call":["size < ","range exclude_end? ","range end - ","range begin ","range end ","range end -  < "]}," RuboCop Cop Style UnneededPercentQ autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","node loc end ","node loc ","node loc begin "," lambda ","node loc expression source =~ ","node loc expression source ","node loc expression ","node source =~ ","node source "]}," RuboCop Cop Style UnneededPercentQ check":{"type":"method","name":"check","children":[],"call":[" add_offense "," format ","src [] ","src =~ ","node loc expression source ","node loc expression ","node loc "," part_of_ignored_node? "," ignored_node? "," ignore_node ","node loc respond_to? ","src start_with? ","src include? "," start_with_percent_q_variant? "," acceptable_capital_q? ","node source "," acceptable_q? "," allowed_percent_q? "," interpolated_quotes? ","node loc expression source  [] ","node source  [] ","node loc expression source  =~ ","node source  =~ ","node loc expression source  start_with? ","node source  start_with? ","node loc expression source  include? ","node source  include? "]}," RuboCop Cop Style UnneededPercentQ on_str":{"type":"method","name":"on_str","children":[],"call":[" check "," string_literal? "]}," RuboCop Cop Style UnneededPercentQ on_dstr":{"type":"method","name":"on_dstr","children":[],"call":[" check ","node loc expression source =~ ","node loc expression source ","node loc expression ","node loc "," string_literal? "]}," RuboCop Cop Style UnneededCapitalW autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","node loc begin ","node loc "," lambda ","src tr ","node loc begin source ","node loc begin source  tr "]}," RuboCop Cop Style SpaceBeforeSemicolon kind":{"type":"method","name":"kind","children":[],"call":["token type == ","token type "]}," RuboCop Cop Style SpaceBeforeComma kind":{"type":"method","name":"kind","children":[],"call":["token type == ","token type "]}," RuboCop Cop Style SpaceAfterColon followed_by_space?":{"type":"method","name":"followed_by_space?","children":[],"call":["colon source_buffer source [] =~ ","colon source_buffer source [] ","colon end_pos ","colon source_buffer source ","colon source_buffer "]}," RuboCop Cop Style NumericLiterals format_number":{"type":"method","name":"format_number","children":[],"call":[" format ","formatted_int insert ","int_part < ","int_part abs to_s reverse gsub reverse ","int_part abs to_s reverse gsub ","int_part abs to_s reverse ","int_part abs to_s ","int_part abs ","int_part to_i ","node loc expression source split ","node loc expression source ","node loc expression ","node loc ","node source split ","node source "," Integer ","formatted_int + + ","formatted_int + ","source [] "," format_int_part ","source split ","node source gsub ","int_part abs to_s reverse gsub reverse  insert "," format_int_part  insert ","int_part to_i  < "," Integer  < ","int_part to_i  abs to_s reverse gsub reverse "," Integer  abs to_s reverse gsub reverse ","int_part to_i  abs to_s reverse gsub "," Integer  abs to_s reverse gsub ","int_part to_i  abs to_s reverse "," Integer  abs to_s reverse ","int_part to_i  abs to_s "," Integer  abs to_s ","int_part to_i  abs "," Integer  abs ","int_part to_i  to_i "," Integer  to_i ","node loc expression node source gsub  split ","node loc expression node source gsub  ","node node source gsub  split ","node node source gsub  ","int_part abs to_s reverse gsub reverse  + + "," format_int_part  + + ","int_part abs to_s reverse gsub reverse  + "," format_int_part  + ","node source gsub  [] "," format_int_part to_i  "," format_ Integer  ","node source gsub  split ","node node source gsub  gsub "]}," RuboCop Cop Style Next enumerator?":{"type":"method","name":"enumerator?","children":[],"call":["(str \"\\\\Aeach_\") match ","ENUMERATORS  include? ","method_name to_s start_with? ","method_name to_s "]}," RuboCop Cop Style LineLength valid_uri?":{"type":"method","name":"valid_uri?","children":[],"call":["URI  parse "]}," RuboCop Cop Style LineLength match_uris":{"type":"method","name":"match_uris","children":[],"call":["match_data offset ","matches << "," valid_uri? ","match_data [] ","string match ","URI  regexp "," loop ","string match  offset ","string match  [] "]}," RuboCop Cop Style LineLength find_excessive_uri_range":{"type":"method","name":"find_excessive_uri_range","children":[],"call":["end_position < "," max ","begin_position < ","last_uri_match offset "," match_uris last "," match_uris "," match_uris last  offset "]}," RuboCop Cop Style LineLength allowed_uri_position?":{"type":"method","name":"allowed_uri_position?","children":[],"call":["uri_range end == ","line length ","uri_range end ","uri_range begin < "," max ","uri_range begin "]}," RuboCop Cop Style LineLength allow_uri?":{"type":"method","name":"allow_uri?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style IndentationWidth on_ensure":{"type":"method","name":"on_ensure","children":[],"call":[" check_indentation ","node loc keyword ","node loc ","node body "]}," RuboCop Cop Style IndentationWidth on_rescue":{"type":"method","name":"on_rescue","children":[],"call":[" check_indentation ","node loc else ","node loc ","rescue_node loc keyword ","rescue_node loc ","rescue_nodes each "]}," RuboCop Cop Style ClassCheck autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","method_name == ","node loc selector ","node loc "," lambda ","node method? "]}," RuboCop Cop Style ClassCheck message":{"type":"method","name":"message","children":[],"call":[" format ","method_name == ","node method? "]}," RuboCop Cop Style ClassCheck on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," style == "," style ","(sym :is_a?) include? "," class_check? ","corrector replace ","node loc selector ","node loc ","node method? "," message ","node method_name ","  message  "]}," RuboCop Cop Offense hash":{"type":"method","name":"hash","children":[],"call":["hash ^ "," send hash "," send ","COMPARISON_ATTRIBUTES  reduce "," public_send hash "," public_send ","(send\n  (const nil :COMPARISON_ATTRIBUTES) :map) hash ","COMPARISON_ATTRIBUTES  map "]}," RuboCop Cop Offense column":{"type":"method","name":"column","children":[],"call":[" location column "," location "]}," RuboCop Cop Offense line":{"type":"method","name":"line","children":[],"call":[" location line "," location "]}," RuboCop Cop SpaceBeforePunctuation autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector remove "," lambda "]}," RuboCop Cop SpaceBeforePunctuation investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense "," format "," kind ","Parser Source Range  new ","t2 pos begin_pos ","t2 pos ","t1 pos end_pos ","t1 pos ","processed_source buffer ","t2 pos begin_pos > ","t1 pos line == ","t2 pos line ","t1 pos line ","processed_source tokens each_cons ","processed_source tokens ","(and\n  (send\n    (send\n      (lvar :t1) :type) :==\n    (sym :tLCURLY))\n  (send nil :space_required_after_lcurly?)) ! "," space_required_after_lcurly? ","t1 type == ","t1 type "," each_missing_space ","processed_source processed_source buffer  "]}," RuboCop Cop EndKeywordAlignment parameter_name":{"type":"method","name":"parameter_name","children":[],"call":[]}," RuboCop Cop EndKeywordAlignment check_offset":{"type":"method","name":"check_offset","children":[],"call":[" correct_style_detected "," opposite_style_detected "," add_offense "," format ","kw_loc column ","kw_loc line ","end_loc column ","end_loc line ","kw_loc column != ","end_loc column + ","kw_loc line != ","node loc keyword ","node loc ","node loc end "," ignored_node? ","node loc keyword  column ","node loc keyword  line ","node loc end  column ","node loc end  line ","node loc keyword  column != ","node loc end  column + ","node loc keyword  line != "]}," RuboCop Cop EndKeywordAlignment check":{"type":"method","name":"check","children":[],"call":[" check_offset ","node loc keyword source ","node loc keyword ","node loc "]}," RuboCop Cop AccessModifierNode modifier_node?":{"type":"method","name":"modifier_node?","children":[],"call":["(const nil :PRIVATE_NODE) include? "," class_or_module_parent? "," modifier_structure? "]}," RuboCop Cop Lint UselessSetterCall MethodVariableTracker constructor?":{"type":"method","name":"constructor?","children":[],"call":["method == ","node type == ","node type ","LITERAL_TYPES  include? ","node literal? ","node send_type? ","node method_name == ","node method_name ","node method? "]}," RuboCop Cop Lint UselessSetterCall MethodVariableTracker contain_local_object?":{"type":"method","name":"contain_local_object?","children":[],"call":["@local [] "," process_assignment "," process_binary_operator_assignment "," process_logical_operator_assignment "," process_multiple_assignment ","node type "," scan "," process_assignment_node "]}," RuboCop Cop Lint UnusedBlockArgument variable_type":{"type":"method","name":"variable_type","children":[],"call":["variable explicit_block_local_variable? "]}," RuboCop Cop Lint Syntax beautify_message":{"type":"method","name":"beautify_message","children":[],"call":["message << ","message end_with? ","message capitalize ","message capitalize  << ","message capitalize  end_with? ","message capitalize  capitalize "]}," RuboCop Cop Lint Syntax offense_from_error":{"type":"method","name":"offense_from_error","children":[],"call":[]}," RuboCop Cop Lint Syntax offenses_from_processed_source":{"type":"method","name":"offenses_from_processed_source","children":[],"call":[]}," RuboCop Cop Lint DefEndAlignment on_send":{"type":"method","name":"on_send","children":[],"call":[" ignore_node "," check_offset ","method_def loc keyword begin_pos - ","expr begin_pos ","method_def loc keyword begin_pos ","method_def loc keyword ","method_def loc ","range source ","Parser Source Range  new ","method_def loc keyword end_pos ","expr source_buffer ","node loc expression ","node loc "," style == "," style ","args first "," visibility_and_def_on_same_line? "," modifier_and_def_on_same_line? "," check_end_kw_alignment ","node source_range "," range_between ","node first_argument ","node each_descendant first ","node each_descendant ","node def_modifier? ","args first  loc keyword begin_pos - ","node first_argument  loc keyword begin_pos - ","node each_descendant first  loc keyword begin_pos - ","node loc expression  begin_pos ","node source_range  begin_pos ","args first  loc keyword begin_pos ","node first_argument  loc keyword begin_pos ","node each_descendant first  loc keyword begin_pos ","args first  loc keyword ","node first_argument  loc keyword ","node each_descendant first  loc keyword ","args first  loc ","node first_argument  loc ","node each_descendant first  loc ","Parser Source Range  new  source ","args first  loc keyword end_pos ","node first_argument  loc keyword end_pos ","node each_descendant first  loc keyword end_pos ","node loc expression  source_buffer ","node source_range  source_buffer ","node loc node loc expression ession ","node loc node source_range ession ","node source_Parser Source Range  new  "," Parser Source Range  new _between "]}," RuboCop CLI display_error_summary":{"type":"method","name":"display_error_summary","children":[],"call":[" warn ","(str \"        Errors are usually caused by RuboCop bugs.\\n\") strip_indent ","RuboCop Version  version ","errors each ","(str \"\\n\") color ","errors count ","errors count > ","errors empty? "," pluralize ","errors size "," Rainbow red "," Rainbow ","Gem  loaded_specs [] metadata [] ","Gem  loaded_specs [] metadata ","Gem  loaded_specs [] ","Gem  loaded_specs "]}," RuboCop Runner validate_only_option":{"type":"method","name":"validate_only_option","children":[],"call":[" fail ","c cop_name == ","c cop_name ","Cop Cop  all none? ","Cop Cop  all ","@options [] each ","@options [] "]}," RuboCop Cop VariableForce Variable keyword_argument?":{"type":"method","name":"keyword_argument?","children":[],"call":["(sym :kwarg) include? ","@declaration_node type "]}," RuboCop Cop Util begins_its_line?":{"type":"method","name":"begins_its_line?","children":[],"call":["source_before_end =~ ","range source_buffer source [] ","range begin_pos ","range source_buffer source ","range source_buffer ","source_before_range rpartition last strip empty? ","source_before_range rpartition last strip ","source_before_range rpartition last ","source_before_range rpartition ","(send\n  (send\n    (lvar :range) :source_line) :=~\n  (regexp\n    (str \"\\\\S\")\n    (regopt))) == ","range column ","range source_line =~ ","range source_line ","range source_line index == ","range source_line index ","range source_line match? ","LINE_BEGINS_REGEX_CACHE  [] ","range source_buffer source []  =~ ","range source_buffer source []  rpartition last strip empty? ","range source_buffer source []  rpartition last strip ","range source_buffer source []  rpartition last ","range source_buffer source []  rpartition ","(send\n  (send\n    (lvar :range) :source_line) :=~\n  (LINE_BEGINS_REGEX_CACHE  [] p\n    (str \"\\\\S\")\n    (regopt))) == "]}," RuboCop Cop Style VariableName setter_call_on_self?":{"type":"method","name":"setter_call_on_self?","children":[],"call":["method_name to_s end_with? ","method_name to_s ","receiver type == ","receiver type "]}," RuboCop Cop Style VariableInterpolation check_for_interpolation":{"type":"method","name":"check_for_interpolation","children":[],"call":[" add_offense "," format ","v loc expression source ","v loc expression ","v loc "," var_nodes each "," var_nodes ","node children ","v source "," v loc expression source _nodes each "," v source _nodes each "," v loc expression source _nodes "," v source _nodes "]}," RuboCop Cop Style VariableInterpolation on_xstr":{"type":"method","name":"on_xstr","children":[],"call":[" check_for_interpolation "]}," RuboCop Cop Style VariableInterpolation on_regexp":{"type":"method","name":"on_regexp","children":[],"call":[" check_for_interpolation "]}," RuboCop Cop Style UnneededPercentQ on_regexp":{"type":"method","name":"on_regexp","children":[],"call":[" ignore_node ","string_parts each ","child type == ","child type ","node children select ","node children "]}," RuboCop Cop Style TrivialAccessors on_method":{"type":"method","name":"on_method","children":[],"call":[" add_offense "," format "," trivial_writer? "," trivial_reader? "]}," RuboCop Cop Style TrailingComma autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector insert_after ","corrector remove ","range source "," lambda "]}," RuboCop Cop Style SpaceInsideBlockBraces pipe?":{"type":"method","name":"pipe?","children":[],"call":["args_delimiter is? "]}," RuboCop Cop Style SpaceAfterMethodName on_method":{"type":"method","name":"on_method","children":[],"call":[" add_offense ","pos_before_left_paren source =~ ","pos_before_left_paren source ","Parser Source Range  new ","expr begin_pos ","expr begin_pos - ","expr source_buffer ","args loc expression ","args loc ","args loc begin is? ","args loc begin ","Parser Source Range  new  source =~ ","Parser Source Range  new  source ","args loc expression  begin_pos ","args loc expression  begin_pos - ","args loc expression  source_buffer ","args loc args loc expression ession "]}," RuboCop Cop Style SingleLineMethods on_method":{"type":"method","name":"on_method","children":[],"call":[" add_offense ","(and\n  (send nil :allow_empty?)\n  (lvar :empty_body)) ! "," allow_empty? ","start_line == ","body nil? ","node loc end line ","node loc end ","node loc ","node loc keyword line ","node loc keyword ","(and\n  (send nil :allow_empty?)\n  (lvar :body nil? )) ! ","node loc keyword line  == "]}," RuboCop Cop Style RescueModifier on_method":{"type":"method","name":"on_method","children":[],"call":[" check "]}," RuboCop Cop Style RedundantReturn on_method":{"type":"method","name":"on_method","children":[],"call":[" check_return_node ","last_expr type == ","last_expr type ","expressions last ","body type == ","body type ","expressions last  type == ","expressions last  type "]}," RuboCop Cop Style RedundantBegin on_method":{"type":"method","name":"on_method","children":[],"call":[" add_offense ","body type == ","body type "]}," RuboCop Cop Style PredicateName on_method":{"type":"method","name":"on_method","children":[],"call":[" add_offense "," message ","method_name to_s ","method_name to_s start_with? "," prefix_blacklist each "," prefix_blacklist "," expected_name ","method_name == ","method_name start_with? "," predicate_prefices each "," predicate_prefices ","method_name to_s  to_s ","method_name to_s  to_s start_with? ","method_name to_s  == ","method_name to_s  start_with? "]}," RuboCop Cop Style PercentQLiterals corrected":{"type":"method","name":"corrected","children":[],"call":["src sub ","src [] swapcase ","src [] "]}," RuboCop Cop Style PercentQLiterals autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace "," corrected ","node loc expression ","node loc "," lambda ","node loc expression source ","node source ","node source_range "]}," RuboCop Cop Style PercentQLiterals check":{"type":"method","name":"check","children":[],"call":[" add_offense ","node children != ","ProcessedSource  new ast children ","ProcessedSource  new ast ","ProcessedSource  new "," corrected ","node children ","node loc expression source ","node loc expression ","node loc "," parse ast children "," parse ast "," parse ","node source "]}," RuboCop Cop Style PercentQLiterals on_percent_literal":{"type":"method","name":"on_percent_literal","children":[],"call":[" check "," type == "," type "," style == "," style "," add_offense "," message ","node children != "," parse ast children "," parse ast "," parse "," corrected ","node source ","node children "," correct_literal_style? ","corrector replace ","node loc begin ","node loc ","ast children ","ProcessedSource  new ast ","ProcessedSource  new "," target_ruby_version "," parse ProcessedSource  new ast  children "," parse  parse ast  children "," parse ProcessedSource  new ast  "," parse  parse ast  ","ProcessedSource  new ast  children "," parse ast  children ","ProcessedSource  new ProcessedSource  new ast  ","ProcessedSource  new  parse ast  "]}," RuboCop Cop Style PercentQLiterals on_str":{"type":"method","name":"on_str","children":[],"call":[" process "]}," RuboCop Cop Style PercentLiteralDelimiters leading_whitespace":{"type":"method","name":"leading_whitespace","children":[],"call":[" fail ","(str \"(\\\\s*)\") match [] ","(str \"(\\\\s*)\") match ","object loc send source_line ","object loc send ","object loc ","(str \"^(\\\\s*)$\") match ","part_range source_line [] ","part_range column ","part_range source_line ","object loc send  source_line [] ","object loc send  column ","object loc send  source_line "]}," RuboCop Cop Style OneLineConditional on_normal_if_unless":{"type":"method","name":"on_normal_if_unless","children":[],"call":[" add_offense ","node loc expression source include? ","node loc expression source ","node loc expression ","node loc "," format ","exp include? ","node loc else ","node loc respond_to? ","node source "," else_branch_present? ","node keyword ","node else_branch ","node single_line? ","corrector replace "," replacement "," message ","node elsif? "," autocorrect ","node loc node loc expression source ression source include? ","node loc node source ression source include? ","node loc node loc expression source ression source ","node loc node source ression source ","node loc node loc expression source ression ","node loc node source ression ","node loc expression source  include? ","node source  include? ","  message  "]}," RuboCop Cop Style Next min_body_length":{"type":"method","name":"min_body_length","children":[],"call":[" fail ","length > ","length is_a? "," cop_config [] "," cop_config "]}," RuboCop Cop Style Next min_body_length?":{"type":"method","name":"min_body_length?","children":[],"call":["(send\n  (send\n    (send\n      (send\n        (lvar :node) :loc) :end) :line) :-\n  (send\n    (send\n      (send\n        (lvar :node) :loc) :keyword) :line)) > "," min_body_length ","node loc end line - ","node loc keyword line ","node loc keyword ","node loc ","node loc end line ","node loc end "]}," RuboCop Cop Style MultilineIfThen message":{"type":"method","name":"message","children":[],"call":["node loc keyword source ","node loc keyword ","node loc "]}," RuboCop Cop Style MultilineIfThen on_normal_if_unless":{"type":"method","name":"on_normal_if_unless","children":[],"call":[" add_offense "," message ","right_after_cond source =~ ","right_after_cond source ","Parser Source Range  new ","next_thing begin_pos "," end_position ","next_thing source_buffer ","node loc end ","node loc ","else_clause loc expression begin ","else_clause loc expression ","else_clause loc ","body loc expression begin ","body loc expression ","body loc ","node loc begin source_line =~ ","node loc begin source_line ","node loc begin "," format ","node keyword "," non_modifier_then? ","corrector remove "," range_with_surrounding_space ","Parser Source Range  new  source =~ ","Parser Source Range  new  source ","body loc expression begin  begin_pos ","body loc expression begin  source_buffer "]}," RuboCop Cop Style MultilineBlockLayout autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector insert_before ","  * ","first_node loc expression ","first_node loc ","node loc expression column ","node loc expression ","node loc ","block_body children first ","block_body children ","block_body type == ","block_body type "," lambda "," autocorrect_body ","expr_before_body line == ","block_body loc line ","block_body loc ","expr_before_body line ","node loc begin ","args loc expression end ","args loc expression ","args loc "," autocorrect_arguments ","args loc end line == ","node loc begin line ","args loc end line ","args loc end ","args children empty? ","args children ","args source_range end ","args source_range ","args loc last_line == ","node loc line ","args loc last_line "," arguments_on_different_line? ","block_body children first  loc expression ","block_body children first  loc ","args loc expression end  line == ","args source_range end  line == ","args loc expression end  line ","args source_range end  line "]}," RuboCop Cop Style MultilineBlockLayout on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense ","Parser Source Range  new ","expression end_pos ","expression begin_pos ","expression source_buffer ","last_expression loc expression ","last_expression loc ","do_loc line == ","expression_loc line ","do_loc line ","node children last ","node children ","end_loc line ","node loc begin ","node loc ","node loc end "," add_offense_for_expression ","do_loc line != ","args loc end line ","args loc end ","args loc ","args children empty? ! ","args children empty? ","args children ","args loc line ","args loc end nil? ","args loc last_line "," args_on_different_line? "," oneliner? ","last_expression loc expression  end_pos ","last_expression loc expression  begin_pos ","last_expression loc expression  source_buffer ","last_last_expression loc expression  loc last_expression loc expression  ","node children last  loc expression ","last_last_expression loc expression  loc ","node children last  loc ","node loc begin  line == ","do_loc args loc end line  == ","do_loc args loc line  == ","last_expression loc expression _loc line ","last_expression loc  line ","expression_loc args loc end line  ","expression_loc args loc line  ","node loc begin  line ","do_loc args loc end line  ","do_loc args loc line  ","node loc end  line ","end_loc args loc end line  ","end_loc args loc line  "," add_offense_for_last_expression loc expression  ","node loc begin  line != ","do_loc args loc end line  != ","do_loc args loc line  != ","args loc end args loc end line  ","args loc end args loc line  ","args loc args loc end line  ","args loc args loc line  ","args loc last_args loc end line  ","args loc last_args loc line  "," args_on_different_args loc end line ? "," args_on_different_args loc line ? "," oneargs loc end line r? "," oneargs loc line r? "]}," RuboCop Cop Style MethodDefParentheses on_method":{"type":"method","name":"on_method","children":[],"call":[" correct_style_detected "," opposite_style_detected "," add_offense "," parentheses? ","args loc expression ","args loc "," parentheses? ! "," arguments? "," style == "," style "]}," RuboCop Cop Style IndentationWidth on_method":{"type":"method","name":"on_method","children":[],"call":[" check_indentation ","node loc keyword ","node loc "," ignored_node? "]}," RuboCop Cop Style IfWithSemicolon on_normal_if_unless":{"type":"method","name":"on_normal_if_unless","children":[],"call":[" add_offense ","beginning is? ","node loc begin ","node loc ","node else_branch ","corrector replace "," correct_to_ternary "," autocorrect "," format ","node condition source ","node condition ","node else_branch if_type? ","node parent ","node loc begin  is? "]}," RuboCop Cop Style IfUnlessModifier message":{"type":"method","name":"message","children":[],"call":[" too_long_due_to_modifier? "," named_capture_in_condition? ! "," named_capture_in_condition? "," single_line_as_modifier? "]}," RuboCop Cop Style EmptyLinesAroundBody on_method":{"type":"method","name":"on_method","children":[],"call":[" check "]}," RuboCop Cop Style EmptyLinesAroundAccessModifier next_line_empty?":{"type":"method","name":"next_line_empty?","children":[],"call":["next_line blank? "," body_end? ","next_line lstrip "]}," RuboCop Cop Style EmptyLinesAroundAccessModifier previous_line_empty?":{"type":"method","name":"previous_line_empty?","children":[],"call":["previous_line blank? "," class_def? ","previous_line lstrip "," block_start? "]}," RuboCop Cop Style EmptyLinesAroundAccessModifier autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector insert_after "," next_line_empty? ","corrector insert_before "," previous_line_empty? ","Parser Source Range  new ","node loc expression end_pos ","node loc expression ","node loc ","node loc expression begin_pos - ","node loc column ","node loc expression begin_pos "," processed_source buffer "," processed_source "," processed_source [] ","send_line - ","node loc line "," lambda ","node source_range end_pos ","node source_range ","node source_range begin_pos - ","node source_range begin_pos "," line_range "," next_Parser Source Range  new _empty? "," next_ line_range _empty? ","  processed_source [] _empty? "," previous_Parser Source Range  new _empty? "," previous_ line_range _empty? ","send_Parser Source Range  new  - ","send_ line_range  - ","node loc line  - ","node loc Parser Source Range  new  ","node loc  line_range  "," Parser Source Range  new _range ","  line_range _range "]}," RuboCop Cop Style DefWithParentheses on_method":{"type":"method","name":"on_method","children":[],"call":[" add_offense ","args loc begin ","args loc ","args children == ","args children ","start_line == ","node loc end line ","node loc end ","node loc ","node loc keyword line ","node loc keyword ","node loc keyword line  == "]}," RuboCop Cop Style BlockEndNewline indentation_of_block_start_line":{"type":"method","name":"indentation_of_block_start_line","children":[],"call":["match begin ","(str \"\\\\S.*\") match ","node loc begin source_line ","node loc begin ","node loc ","(str \"\\S.*\") match  begin ","(str \"\\\\S.*\") (str \"\\S.*\") match  "]}," RuboCop Cop Style BlockEndNewline autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector insert_before ","\n + ","  * ","node loc end ","node loc "," indentation_of_block_start_line "," lambda ","  indentation_of_block_start_line _of_block_start_line "]}," RuboCop Cop Style BlockEndNewline on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," format ","end_loc column + ","end_loc column ","end_loc line ","(str \"^\\\\s*\") match ","end_loc source_line ","end_loc source ","do_loc line == ","do_loc line ","node loc begin ","node loc ","node loc end ","end_loc source_line =~ ","node loc end  column + ","node loc end  column ","node loc end  line ","node loc end  source_line ","node loc end  source ","node loc begin  line == ","node loc begin  line ","node loc end  source_line =~ "]}," RuboCop Cop Style BarePercentLiterals autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","src sub ","node loc begin ","node loc "," lambda ","src start_with? ","node loc begin source ","node loc begin source  sub ","node loc begin source  start_with? "]}," RuboCop Cop Style BarePercentLiterals check":{"type":"method","name":"check","children":[],"call":[" add_offense "," format "," style == "," style ","node loc begin source ","node loc begin ","node loc ","node loc respond_to? "," add_offense_for_wrong_style "," requires_bare_percent? "," requires_percent_q? ","node heredoc? ","node loc begin node loc begin source  "]}," RuboCop Cop Style BarePercentLiterals on_str":{"type":"method","name":"on_str","children":[],"call":[" check "]}," RuboCop Cop Style BarePercentLiterals on_dstr":{"type":"method","name":"on_dstr","children":[],"call":[" check "]}," RuboCop Cop Style AndOr on_conditionals":{"type":"method","name":"on_conditionals","children":[],"call":[" process_logical_op "," on_node ","condition_node each_node ","node condition each_node ","node condition "," process_logical_operator "]}," RuboCop Cop Style AndOr on_until":{"type":"method","name":"on_until","children":[],"call":[" on_conditionals "," style == "," style "]}," RuboCop Cop Style AndOr on_while":{"type":"method","name":"on_while","children":[],"call":[" on_conditionals "," style == "," style "]}," RuboCop Cop Style AndOr on_if":{"type":"method","name":"on_if","children":[],"call":[" on_conditionals "," style == "," style "]}," RuboCop Cop Style AccessorMethodName on_method":{"type":"method","name":"on_method","children":[],"call":[" add_offense "," bad_writer_name? ","method_name to_s "," bad_reader_name? "]}," RuboCop Cop Rails Delegate on_method":{"type":"method","name":"on_method","children":[],"call":[" add_offense "," private_or_protected_delegation "," trivial_delegate? "]}," RuboCop Cop StatementModifier fit_within_line_as_modifier_form?":{"type":"method","name":"fit_within_line_as_modifier_form?","children":[],"call":[" body_has_comment? ! "," body_has_comment? ","total <= "," max_line_length ","indentation + + + + + ","indentation + + + + ","indentation + + + ","indentation + + ","indentation + ","cond loc expression size ","cond loc expression ","cond loc ","node loc keyword size ","node loc keyword ","node loc ","node loc keyword column "," on_node ","body_length == "," body_length "," length > "," length ","node loc keyword source ","cond each_node any? ","cond each_node "," end_keyword_has_comment? ","body begin_type? "," if_node_parts ","cond source_range size ","cond source_range "," length_in_modifier_form <= "," length_in_modifier_form ","body_length zero? ","indentation + + + + +  <= ","node loc keyword column  + + + + + ","node loc keyword column  + + + + ","node loc keyword column  + + + ","node loc keyword column  + + ","node loc keyword column  + "," body_length  == ","  body_length  "," body_length  zero? "]}," RuboCop Cop SpaceInside Brackets right_side?":{"type":"method","name":"right_side?","children":[],"call":["@right_side_type == ","token type "]}," RuboCop Cop SpaceInside Brackets left_side?":{"type":"method","name":"left_side?","children":[],"call":["@left_side_types include? ","token type "]}," RuboCop Cop SpaceInside Brackets initialize":{"type":"method","name":"initialize","children":[],"call":["(lvar :left) flatten "]}," RuboCop Cop OnNormalIfUnless invoke_hook_for_normal_if_unless":{"type":"method","name":"invoke_hook_for_normal_if_unless","children":[],"call":[" on_normal_if_unless "," ternary_op? "," modifier_if? "," ternary? "]}," RuboCop Cop OnNormalIfUnless on_unless":{"type":"method","name":"on_unless","children":[],"call":[" invoke_hook_for_normal_if_unless "]}," RuboCop Cop OnNormalIfUnless on_if":{"type":"method","name":"on_if","children":[],"call":[" invoke_hook_for_normal_if_unless "," on_normal_if_unless ","node ternary? ","node modifier_form? "]}," RuboCop Cop OnMethod visibility_and_def_on_same_line?":{"type":"method","name":"visibility_and_def_on_same_line?","children":[],"call":["(sym :def) include? ","args first type ","args first ","args size == ","args size ","(sym :public) include? ","receiver ! "]}," RuboCop Cop OnMethod on_defs":{"type":"method","name":"on_defs","children":[],"call":[" on_method "]}," RuboCop Cop OnMethod on_def":{"type":"method","name":"on_def","children":[],"call":[" on_method "]}," RuboCop Cop NegativeConditional check_negative_conditional":{"type":"method","name":"check_negative_conditional","children":[],"call":[" add_offense ","(and\n  (send\n    (send\n      (lvar :node) :loc) :respond_to?\n    (sym :else))\n  (send\n    (send\n      (lvar :node) :loc) :else)) ! ","node loc else ","node loc ","node loc respond_to? ","method == ","condition type == ","condition type ","condition children last ","condition children "," single_negative? "," if_else? ! "," if_else? ","condition begin_type? "," empty_condition? ","node else? ","node if_type? ","node condition ","condition children last  type == ","node condition  type == ","condition children last  type ","node condition  type ","condition children last  children last ","node condition  children last ","condition children last  children ","node condition  children ","condition children last  begin_type? ","node condition  begin_type? "," empty_condition children last ? "," empty_node condition ? ","node condition children last  ","node node condition  "]}," RuboCop Cop MethodComplexity complexity":{"type":"method","name":"complexity","children":[],"call":[" complexity_score_for "," on_node "," class ","score + ","node each_node reduce ","node each_node ","body each_node reduce ","body each_node "," reset_on_lvasgn ","node lvasgn_type? "]}," RuboCop Cop MethodComplexity on_method":{"type":"method","name":"on_method","children":[],"call":[" max= "," add_offense "," format "," class ","complexity > "," complexity "," cop_config [] "," cop_config ","  cop_config [] = "," complexity  > ","  complexity  "]}," RuboCop Cop EndKeywordAlignment check_offset_of_node":{"type":"method","name":"check_offset_of_node","children":[],"call":[" check_offset ","node loc keyword source ","node loc keyword ","node loc "]}," RuboCop Cop ConfigurableNaming valid_name?":{"type":"method","name":"valid_name?","children":[],"call":["name match "," style == "," style "," class_emitter_method? "]}," RuboCop Cop ConfigurableNaming check_name":{"type":"method","name":"check_name","children":[],"call":[" opposite_style_detected "," add_offense "," message "," style "," correct_style_detected "," valid_name? "," operator? "]}," RuboCop Cop CodeLength check_code_length":{"type":"method","name":"check_code_length","children":[],"call":[" max= "," add_offense "," message "," max_length ","length > "," code_length ","node casgn_type? ","node loc expression ","node loc ","node loc name ","length <= ","calculator calculate "," build_code_length_calculator ","node line_count <= ","node line_count ","node source_range "," max_ code_length  "," max_calculator calculate  "," code_length  > ","calculator calculate  > "," code_ code_length  "," code_calculator calculate  "," code_length  <= ","calculator calculate  <= "," build_code_length_calculator  calculate "," build_code_ code_length _calculator "," build_code_calculator calculate _calculator "," build_code_length_ build_code_length_calculator  "]}," RuboCop Cop AutocorrectUnlessChangingAST ast_for":{"type":"method","name":"ast_for","children":[],"call":["ProcessedSource  new ast ","ProcessedSource  new "]}," RuboCop Cop Metrics PerceivedComplexity complexity_score_for":{"type":"method","name":"complexity_score_for","children":[],"call":[" elsif? ! "," elsif? "," if_else? ","(send\n  (float 0.8) :+\n  (send\n    (float 0.2) :*\n    (send\n      (lvar :whens) :length))) round ","0.8 + ","0.2 * ","whens length ","expression nil? ","node type ","node elsif? ! ","node elsif? ","node else? ","(send\n  (float 0.8) :+\n  (send\n    (float 0.2) :*\n    (send\n      (send\n        (lvar :node) :when_branches) :length))) round ","node when_branches length ","node when_branches ","node condition nil? ","node condition ","(send\n  (float 0.8) :+\n  (send\n    (float 0.2) :*\n    (lvar :nb_branches))) round ","node when_branches length + ","node else_branch ","(send\n  (float 0.8) :+\n  (begin\n    (send\n      (float 0.2) :*\n      (lvar :nb_branches)))) round ","(send\n  (begin\n    (send\n      (lvar :nb_branches) :*\n      (float 0.2))) :+\n  (float 0.8)) round ","(send\n  (lvar :nb_branches) :*\n  (float 0.2)) + ","nb_branches * ","(send\n  (float 0.8) :+\n  (send\n    (float 0.2) :*\n    (lvar :node when_branches length + ))) round ","(send\n  (float 0.8) :+\n  (begin\n    (send\n      (float 0.2) :*\n      (lvar :node when_branches length + )))) round ","(send\n  (begin\n    (send\n      (lvar :node when_branches length + ) :*\n      (float 0.2))) :+\n  (float 0.8)) round ","(send\n  (lvar :node when_branches length + ) :*\n  (float 0.2)) + ","node when_branches length +  * "]}," RuboCop Cop Metrics ParameterLists count_keyword_args?":{"type":"method","name":"count_keyword_args?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Metrics ParameterLists max_params":{"type":"method","name":"max_params","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Metrics ParameterLists args_count":{"type":"method","name":"args_count","children":[],"call":["(send\n  (send\n    (lvar :node) :children) :reject) size ","a type == ","a type ","node children reject ","node children ","node children size "," count_keyword_args? ","a type != ","node children count ","(sym :kwoptarg) include? ! ","(sym :kwoptarg) include? ","NAMED_KEYWORD_TYPES  include? ! ","NAMED_KEYWORD_TYPES  include? ","a blockarg_type? ! ","a blockarg_type? "]}," RuboCop Cop Metrics ParameterLists on_args":{"type":"method","name":"on_args","children":[],"call":[" max= "," add_offense "," format "," max_params ","count > "," args_count "," argument_to_lambda_or_proc? "," struct_new_or_data_define_block? ","parent parent ","parent method? ","node parent "," args_count  > "," args_ args_count  ","node parent  node parent  ","node parent  method? ","node node parent  "]}," RuboCop Cop Metrics MethodLength code_length":{"type":"method","name":"code_length","children":[],"call":["lines size "," irrelevant_line ","lines reject! ","node loc expression source lines to_a [] ","node loc expression source lines to_a ","node loc expression source lines ","node loc expression source ","node loc expression ","node loc "," irrelevant_line ! ","lines count ","node source lines to_a [] ","node source lines to_a ","node source lines ","node source "]}," RuboCop Cop Metrics MethodLength message":{"type":"method","name":"message","children":[],"call":[" format "]}," RuboCop Cop Metrics MethodLength on_method":{"type":"method","name":"on_method","children":[],"call":[" check_code_length "]}," RuboCop Cop Metrics LineLength valid_uri?":{"type":"method","name":"valid_uri?","children":[],"call":["URI  parse "]}," RuboCop Cop Metrics LineLength match_uris":{"type":"method","name":"match_uris","children":[],"call":["match_data offset ","matches << "," valid_uri? ","match_data [] ","string match ","URI  regexp "," loop "," uri_regexp ","$LAST_MATCH_INFO [] ","string scan ","string match  offset ","string match  [] "]}," RuboCop Cop Metrics LineLength find_excessive_uri_range":{"type":"method","name":"find_excessive_uri_range","children":[],"call":["end_position < "," max ","begin_position < ","last_uri_match offset "," match_uris last "," match_uris ","pos + "," indentation_difference ","last_uri_match offset map "," match_uris last  offset "," match_uris last  offset map "]}," RuboCop Cop Metrics LineLength allowed_uri_position?":{"type":"method","name":"allowed_uri_position?","children":[],"call":["uri_range end == ","line length ","uri_range end ","uri_range begin < "," max ","uri_range begin ","line length - "," line_length - "," line_length "]}," RuboCop Cop Metrics LineLength allow_uri?":{"type":"method","name":"allow_uri?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Metrics LineLength max":{"type":"method","name":"max","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Metrics LineLength investigate":{"type":"method","name":"investigate","children":[],"call":[" max= ","line length "," add_offense "," source_range ","index + ","processed_source buffer "," max ","uri_range end ","uri_range begin < ","uri_range begin "," format "," allowed_uri_position? "," find_excessive_uri_range "," allow_uri? ","line length > ","processed_source lines each_with_index ","processed_source lines "," line_in_whitelisted_heredoc? ","index succ "," allow_heredoc? "," extract_heredocs ","processed_source ast "," check_line "," check_for_breakable_semicolons "," source_ source_range  ","uri_ source_range  end "," find_excessive_uri_range  end ","uri_ source_range  begin < "," find_excessive_uri_range  begin < ","uri_ source_range  begin "," find_excessive_uri_range  begin "," find_excessive_uri_ source_range  "," find_excessive_ find_excessive_uri_range  "," extract_ extract_heredocs  "]}," RuboCop Cop Metrics CyclomaticComplexity complexity_score_for":{"type":"method","name":"complexity_score_for","children":[],"call":[" iterating_block? == "," iterating_block? "," discount_for_repeated_csend? ","node csend_type? "]}," RuboCop Cop Metrics ClassLength line_numbers_of_inner_classes":{"type":"method","name":"line_numbers_of_inner_classes","children":[],"call":["line_numbers to_a ","line_numbers merge "," line_range ","inner_node eql? "," on_node ","Set  new ","node each_descendant ","Set  new  to_a ","Set  new  merge ","  line_range  "]}," RuboCop Cop Metrics ClassLength code_length":{"type":"method","name":"code_length","children":[],"call":["length + "," irrelevant_line "," processed_source [] "," processed_source ","target_line_numbers reduce ","class_body_line_numbers - "," line_numbers_of_inner_classes "," line_range to_a [] "," line_range to_a "," line_range ","class_body_line_numbers -  reduce "," line_range to_a []  - "]}," RuboCop Cop Metrics ClassLength message":{"type":"method","name":"message","children":[],"call":[" format "]}," RuboCop Cop Metrics ClassLength on_class":{"type":"method","name":"on_class","children":[],"call":[" check_code_length "]}," RuboCop Cop Metrics BlockNesting message":{"type":"method","name":"message","children":[],"call":[]}," RuboCop Cop Metrics BlockNesting check_nesting_level":{"type":"method","name":"check_nesting_level","children":[],"call":[" check_nesting_level ","child is_a? ","node children each ","node children "," ignore_node "," add_offense "," message "," part_of_ignored_node? "," max= ","current_level > ","node loc keyword is? ","node loc keyword ","node loc ","node loc respond_to? ","NESTING_BLOCKS  include? ","node type ","node each_child_node "," elsif? ","node elsif? ","node if_type? "," consider_node? "]}," RuboCop Cop Metrics BlockNesting investigate":{"type":"method","name":"investigate","children":[],"call":[" check_nesting_level ","processed_source ast "," cop_config [] "," cop_config ","processed_source blank? "]}," RuboCop Cop Lint UselessSetterCall on_method":{"type":"method","name":"on_method","children":[],"call":[" add_offense "," format ","receiver loc name source ","receiver loc name ","receiver loc ","tracker contain_local_object? ","MethodVariableTracker  new "," setter_call_to_local_variable? ","expression last ","expression is_a? ","body children ","body type == ","body type ","MethodVariableTracker  new  contain_local_object? ","body children  last ","body children  is_a? "]}," RuboCop Cop Lint EndInMethod on_method":{"type":"method","name":"on_method","children":[],"call":[" add_offense "," on_node "]}," RuboCop Cop Lint DefEndAlignment on_method":{"type":"method","name":"on_method","children":[],"call":[" check_offset_of_node "]}," RuboCop Cop Lint BlockAlignment autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector remove ","Parser Source Range  new ","range_start - ","starting_position_of_block_end + ","start_col - ","end_col > ","corrector insert_before ","  * ","node loc end ","node loc ","end_col < ","node loc end column ","node loc end begin_pos ","key loc expression column ","key loc expression ","key loc "," lambda ","node loc expression source_buffer ","node loc expression ","node children first ","node children ","starting_position_of_block_end + - ","(or\n  (lvar :ancestor_node)\n  (lvar :node)) loc expression column ","(or\n  (lvar :ancestor_node)\n  (lvar :node)) loc expression ","(or\n  (lvar :ancestor_node)\n  (lvar :node)) loc "," ancestor_on_same_line ","(or\n  (lvar :ancestor_node)\n  (lvar :node)) source_range column ","(or\n  (lvar :ancestor_node)\n  (lvar :node)) source_range ","node source_range source_buffer ","node source_range "," start_for_block_node "," compute_start_col "," remove_space_before ","delta -@ ","loc_end begin_pos ","delta < "," add_space_before ","delta > ","loc_end column ","Parser Source Range  new _start - ","starting_position_of_block_end +  - ","starting_position_of_block_end + -  - ","node loc end begin_pos  + ","key loc expression column  - ","(or\n  (lvar :ancestor_node)\n  (lvar :node)) loc expression column  - ","(or\n  (lvar :ancestor_node)\n  (lvar :node)) source_range column  - "," compute_start_col  - ","node loc end column  > ","node loc end column  < ","node children first  loc expression column ","node children first  loc expression ","node children first  loc ","node loc expression node loc expression source_buffer _buffer ","node loc expression node source_range source_buffer _buffer ","node loc end begin_pos  + - ","(or\n  (lvar : ancestor_on_same_line )\n  (lvar :node)) loc expression column ","(or\n  (lvar : start_for_block_node )\n  (lvar :node)) loc expression column ","(or\n  (lvar : ancestor_on_same_line )\n  (lvar :node)) loc expression ","(or\n  (lvar : start_for_block_node )\n  (lvar :node)) loc expression ","(or\n  (lvar : ancestor_on_same_line )\n  (lvar :node)) loc ","(or\n  (lvar : start_for_block_node )\n  (lvar :node)) loc ","(or\n  (lvar :ancestor_node)\n  (lvar :node)) source_Parser Source Range  new  column ","(or\n  (lvar :ancestor_node)\n  (lvar :node)) node loc expression source_buffer _range column ","(or\n  (lvar :ancestor_node)\n  (lvar :node)) node source_range source_buffer _range column ","(or\n  (lvar : ancestor_on_same_line )\n  (lvar :node)) source_range column ","(or\n  (lvar : start_for_block_node )\n  (lvar :node)) source_range column ","(or\n  (lvar :ancestor_node)\n  (lvar :node)) source_Parser Source Range  new  ","(or\n  (lvar :ancestor_node)\n  (lvar :node)) node loc expression source_buffer _range ","(or\n  (lvar :ancestor_node)\n  (lvar :node)) node source_range source_buffer _range ","(or\n  (lvar : ancestor_on_same_line )\n  (lvar :node)) source_range ","(or\n  (lvar : start_for_block_node )\n  (lvar :node)) source_range ","node source_Parser Source Range  new  source_buffer ","node node loc expression source_buffer _range node loc expression source_buffer _buffer ","node node source_range source_buffer _range node source_range source_buffer _buffer ","node source_Parser Source Range  new  ","node node loc expression source_buffer _range ","node node source_range source_buffer _range "," compute_key loc expression column  "," compute_(or\n  (lvar :ancestor_node)\n  (lvar :node)) loc expression column  "," compute_(or\n  (lvar :ancestor_node)\n  (lvar :node)) source_range column  "," compute_ compute_start_col  ","start_col -  -@ ","node loc end  begin_pos ","start_col -  < ","start_col -  > ","node loc end  column "]}," RuboCop StringUtil JaroWinkler common_prefix_length":{"type":"method","name":"common_prefix_length","children":[],"call":[" shorter size "," shorter "," shorter [] == "," longer [] "," longer "," shorter [] "," shorter size times "]}," RuboCop StringUtil JaroWinkler limited_common_prefix_length":{"type":"method","name":"limited_common_prefix_length","children":[],"call":["length > "," common_prefix_length "," common_prefix_length  > "," common_prefix_ common_prefix_length  "]}," RuboCop StringUtil JaroWinkler compute_distance":{"type":"method","name":"compute_distance","children":[],"call":["jaro_distance + "," limited_common_prefix_length to_f * * ","1.0 - "," limited_common_prefix_length to_f * "," scaling_factor to_f "," scaling_factor "," limited_common_prefix_length to_f "," limited_common_prefix_length ","jaro_distance >= "," boost_threshold "]}," RuboCop StringUtil JaroWinkler initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop StringUtil Jaro matching_window":{"type":"method","name":"matching_window","children":[],"call":["(send\n  (send\n    (send nil :longer) :size) :/\n  (int 2)) to_i - ","(send\n  (send\n    (send nil :longer) :size) :/\n  (int 2)) to_i "," longer size / "," longer size "," longer ","(send\n  (send\n    (send nil :longer) :size) :/\n  (int 2)) - "]}," RuboCop StringUtil Jaro matching_index_range":{"type":"method","name":"matching_index_range","children":[],"call":["origin + "," matching_window ","min < ","origin - ","origin -  < "]}," RuboCop StringUtil Jaro count_transpositions":{"type":"method","name":"count_transpositions","children":[],"call":["common_chars_a [] != ","common_chars_b [] ","common_chars_a [] ","common_chars_a size times count ","common_chars_a size times ","common_chars_a size "]}," RuboCop StringUtil Jaro find_common_characters":{"type":"method","name":"find_common_characters","children":[],"call":["(lvar :common_chars_of_shorter) map ","longer_chars []= ","common_chars_of_longer []= ","common_chars_of_shorter []= ","shorter_char == ","longer_chars [] "," matching_index_range each "," matching_index_range "," shorter each_char with_index "," shorter each_char "," shorter "," longer each_char to_a "," longer each_char "," longer ","Array  new "," longer size "," shorter size "," longer chars []= "," longer chars "," longer chars [] ","(lvar :Array  new ) map ","longer_chars [] s []= "," longer chars [] s []= "," longer each_char to_a  []= ","Array  new  []= ","longer_chars [] s [] "," longer chars [] s [] "," longer each_char to_a  [] "]}," RuboCop StringUtil Jaro compute_distance":{"type":"method","name":"compute_distance","children":[],"call":["sum / ","(send\n  (lvar :matched_count) :/\n  (send\n    (send\n      (send nil :shorter) :size) :to_f)) + + ","(send\n  (lvar :matched_count) :-\n  (send\n    (lvar :transposition_count) :/\n    (int 2))) / ","matched_count to_f ","matched_count - ","transposition_count / ","(send\n  (lvar :matched_count) :/\n  (send\n    (send\n      (send nil :shorter) :size) :to_f)) + ","matched_count / "," longer size to_f "," longer size "," longer "," shorter size to_f "," shorter size "," shorter "," count_transpositions ","matched_count zero? ","common_chars_a size "," find_common_characters "," compute_non_zero_distance ","(send\n  (lvar :matched_count) :/\n  (send\n    (send\n      (send nil :shorter) :size) :to_f)) + +  / ","(send\n  (lvar :common_chars_a size ) :/\n  (send\n    (send\n      (send nil :shorter) :size) :to_f)) + + ","(send\n  (lvar :matched_count) :-\n  (send\n    (lvar : count_transpositions ) :/\n    (int 2))) / ","(send\n  (lvar :common_chars_a size ) :-\n  (send\n    (lvar :transposition_count) :/\n    (int 2))) / ","common_chars_a size  to_f ","common_chars_a size  - "," count_transpositions  / ","(send\n  (lvar :common_chars_a size ) :/\n  (send\n    (send\n      (send nil :shorter) :size) :to_f)) + ","common_chars_a size  / ","common_chars_a size  zero? "]}," RuboCop StringUtil Jaro distance":{"type":"method","name":"distance","children":[],"call":[" compute_distance "]}," RuboCop StringUtil Jaro initialize":{"type":"method","name":"initialize","children":[],"call":["a size < ","b size ","a size ","string_a size < ","string_b size ","string_a size "]}," RuboCop StringUtil similarity":{"type":"method","name":"similarity","children":[],"call":["JaroWinkler  distance ","string_b to_s ","string_a to_s "]}," RuboCop Formatter HTMLFormatter highlight_line":{"type":"method","name":"highlight_line","children":[],"call":["  * + ","^ * ","  * ","location column ","location source_line length - ","location source_line length ","location source_line ","location column_range count ","location column_range ","location begin line == ","location end line ","location end ","location begin line ","location begin "]}," RuboCop Formatter HTMLFormatter hash_for_location":{"type":"method","name":"hash_for_location","children":[],"call":[" highlight_line ","offense location ","offense location source_line ","offense location length ","offense real_column ","offense line "]}," RuboCop Formatter HTMLFormatter hash_for_offense":{"type":"method","name":"hash_for_offense","children":[],"call":[" hash_for_location ","offense corrected? ","offense cop_name ","offense message ","offense severity name ","offense severity "]}," RuboCop Formatter HTMLFormatter hash_for_file":{"type":"method","name":"hash_for_file","children":[],"call":[" hash_for_offense ","offenses map "," relative_path "]}," RuboCop Formatter HTMLFormatter metadata_hash":{"type":"method","name":"metadata_hash","children":[],"call":["RUBY_PATCHLEVEL  to_s "]}," RuboCop Formatter HTMLFormatter finished":{"type":"method","name":"finished","children":[],"call":[" output write "," output ","erb result "," binding ","ERB  new ","File  read ","File  expand_path "," output_hash [] []= ","inspected_files count "," output_hash [] "," output_hash "," render_html "," summary inspected_files= "," summary ","ERB  new  result "]}," RuboCop Formatter HTMLFormatter file_finished":{"type":"method","name":"file_finished","children":[],"call":["offenses count "," output_hash [] [] "," output_hash [] "," output_hash "," output_hash [] << "," hash_for_file "," summary offense_count "," summary "," files << ","OpenStruct  new "," files ","FileOffenses  new "]}," RuboCop Formatter HTMLFormatter started":{"type":"method","name":"started","children":[],"call":[" output_hash [] []= ","target_files count "," output_hash [] "," output_hash "," summary target_files= "," summary "]}," RuboCop Formatter HTMLFormatter initialize":{"type":"method","name":"initialize","children":[],"call":[" metadata_hash ","OpenStruct  new ","Summary  new "]}," RuboCop Cop VariableForce wrap_with_top_level_scope_node":{"type":"method","name":"wrap_with_top_level_scope_node","children":[],"call":[]}," RuboCop Cop VariableForce Scope belong_to_inner_scope?":{"type":"method","name":"belong_to_inner_scope?","children":[],"call":["indices include? ! ","indices include? ","target_node sibling_index ","OUTER_SCOPE_CHILD_INDICES  [] ","target_node parent type ","target_node parent ","SCOPE_TYPES  include? ","target_node parent equal? "," node ","target_node parent ! ","OUTER_SCOPE_CHILD_INDICES  []  include? ! ","OUTER_SCOPE_CHILD_INDICES  []  include? "]}," RuboCop Cop VariableForce Scope belong_to_outer_scope?":{"type":"method","name":"belong_to_outer_scope?","children":[],"call":["indices include? ","target_node sibling_index ","OUTER_SCOPE_CHILD_INDICES  [] ","target_node parent type ","target_node parent ","target_node parent equal? "," node "," ancestor_node? ","target_node equal? "," naked_top_level? ! "," naked_top_level? ","OUTER_SCOPE_CHILD_INDICES  []  include? "]}," RuboCop Cop VariableForce Scope belong_to_another_scope?":{"type":"method","name":"belong_to_another_scope?","children":[],"call":[" belong_to_inner_scope? "," belong_to_outer_scope? "]}," RuboCop Cop VariableForce Scope scan_node":{"type":"method","name":"scan_node","children":[],"call":[" scan_node "," belong_to_another_scope? ","node each_child_node ","node parent "," include? "]}," RuboCop Cop VariableForce Scope each_node":{"type":"method","name":"each_node","children":[],"call":[" scan_node "," node "," to_enum "," __method__ "," block_given? "," naked_top_level? "]}," RuboCop Cop VariableForce Locatable run_exclusively_with?":{"type":"method","name":"run_exclusively_with?","children":[],"call":["other branch_body_name == ","other branch_body_name "," branch_body_name == "," branch_body_name "," branch_point_node type == "," branch_point_node type "," branch_point_node "," branch_body_node equal? ","other branch_body_node "," branch_body_node "," branch_point_node equal? ","other branch_point_node "," branch_point_node rescue_type? "]}," RuboCop Cop VariableForce Assignment multiple_assignment_node":{"type":"method","name":"multiple_assignment_node","children":[],"call":[" node parent type == "," node parent type "," node parent "," node ","grandparent_node type == ","grandparent_node type "," node parent parent "," find_multiple_assignment_node ","  find_multiple_assignment_node  parent type == ","  find_multiple_assignment_node  parent type ","  find_multiple_assignment_node  parent ","  find_multiple_assignment_node  "," node parent parent  type == ","grandparent_ find_multiple_assignment_node  type == "," node parent parent  type ","grandparent_ find_multiple_assignment_node  type ","  find_multiple_assignment_node  parent parent "," find_multiple_assignment_ find_multiple_assignment_node  "]}," RuboCop Cop VariableForce Assignment operator_assignment_node":{"type":"method","name":"operator_assignment_node","children":[],"call":[" node parent "," node "," node parent children index == "," node parent children index "," node parent children ","OPERATOR_ASSIGNMENT_TYPES  include? "," node parent type "," node sibling_index zero? "," node sibling_index "]}," RuboCop Cop Style WhileUntilModifier check":{"type":"method","name":"check","children":[],"call":[" add_offense "," message ","node loc keyword source ","node loc keyword ","node loc "," fit_within_line_as_modifier_form? ","node loc end "," single_line_as_modifier? "," format ","node keyword ","node multiline? "]}," RuboCop Cop Style WhileUntilModifier on_until":{"type":"method","name":"on_until","children":[],"call":[" check "]}," RuboCop Cop Style WhileUntilModifier on_while":{"type":"method","name":"on_while","children":[],"call":[" check ","corrector replace ","node condition source ","node condition ","node keyword ","node body source ","node body "," add_offense "," format ","node loc keyword ","node loc "," single_line_as_modifier? ","node multiline? "," to_modifier_form "]}," RuboCop Cop Style VariableName on_cvasgn":{"type":"method","name":"on_cvasgn","children":[],"call":[" check_name ","node loc name ","node loc "]}," RuboCop Cop Style Tab autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","range source gsub ","range source "," lambda "]}," RuboCop Cop Style SymbolProc ignored_method?":{"type":"method","name":"ignored_method?","children":[],"call":[" ignored_methods include? ","name to_s "," ignored_methods "]}," RuboCop Cop Style SymbolProc ignored_methods":{"type":"method","name":"ignored_methods","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style SymbolProc autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","node loc expression ","node loc ","block_method loc expression source ","block_method loc expression ","block_method loc "," lambda "," range_with_surrounding_space ","Parser Source Range  new ","node loc end end_pos ","node loc end ","node loc begin begin_pos ","node loc begin ","node loc expression source_buffer "," autocorrect_method "," super? "," autocorrect_without_args "," autocorrect_with_args ","node body method_name ","node body ","node send_node arguments ","node send_node ","node send_node arguments? "]}," RuboCop Cop Style SymbolProc on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," format ","block_arg_name != ","block_args children first ","block_args children ","receiver type != ","receiver type ","block_body type == ","block_body type ","block_args children size == ","block_args children size "," ignored_method? ","bmethod_name == "," can_shorten? ","(sym :lambda) include? ","block_send == ","block_send_or_super == "," super? ","Parser Source Range  new ","node loc end end_pos ","node loc end ","node loc ","node loc begin begin_pos ","node loc begin ","node loc expression source_buffer ","node loc expression ","node source_range source_buffer ","node source_range "," offense "," resolve_block_method_name "," proc_node? "," symbol_proc? ","block_args source include? ","block_args source "," register_offense ","dispatch_node method_name "," destructuring_block_argument? ","node block_type? "," allow_if_method_has_argument? "," contains_comments? "," allow_comments? ","node send_node "," allowed_method_name? "," unsafe_hash_usage? "," unsafe_array_usage? ","node source_Parser Source Range  new  source_buffer ","node source_Parser Source Range  new  "," resolve_ resolve_block_method_name  "]}," RuboCop Cop Style SpaceInsideRangeLiteral autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","expression sub sub ","expression sub ","node loc expression ","node loc "," lambda ","operator gsub ","node loc operator source ","node loc operator ","node loc expression source ","node source_range ","node source ","node loc expression source  sub sub ","node source  sub sub ","node loc expression source  sub ","node source  sub ","node loc node loc expression source  ","node loc node source  ","node loc operator source  gsub ","node loc node loc operator source  source ","node loc node loc operator source  ","node loc node loc expression source  source ","node loc node source  source "]}," RuboCop Cop Style SpaceInsideRangeLiteral check":{"type":"method","name":"check","children":[],"call":[" add_offense ","expression =~ ","node loc operator source gsub ","node loc operator source ","node loc operator ","node loc ","node loc expression source ","node loc expression ","expression sub! ","op gsub ","node source ","node loc expression source  =~ ","node source  =~ ","node loc node loc operator source gsub  source gsub ","node loc node loc operator source erator source gsub ","node loc node loc operator source gsub  source ","node loc node loc operator source erator source ","node loc node loc operator source gsub  ","node loc node loc operator source erator ","node loc node loc expression source  source ","node loc node source  source ","node loc node loc expression source  ","node loc node source  ","node loc expression source  sub! ","node source  sub! ","node loc operator source  gsub "]}," RuboCop Cop Style SpaceInsideRangeLiteral on_erange":{"type":"method","name":"on_erange","children":[],"call":[" check "]}," RuboCop Cop Style SpaceInsideRangeLiteral on_irange":{"type":"method","name":"on_irange","children":[],"call":[" check "]}," RuboCop Cop Style SpaceInsideHashLiteralBraces on_hash":{"type":"method","name":"on_hash","children":[],"call":[" check ","tokens [] ","e_ix - ","b_ix == ","b_ix + "," index_of_last_token ","tokens [] type == ","tokens [] type "," processed_source tokens "," processed_source "," index_of_first_token ","end_index - ","begin_index == ","begin_index + "," hash_literal_with_braces "," processed_source tokens  [] "," index_of_last_token  - "," index_of_first_token  == "," index_of_first_token  + "," processed_source tokens  [] type == "," processed_source tokens  [] type "," processed_source  processed_source tokens  "]}," RuboCop Cop Style SpaceAroundEqualsInParameterDefault on_optarg":{"type":"method","name":"on_optarg","children":[],"call":[" check_optarg "," processed_source tokens [] "," processed_source tokens "," processed_source "," index_of_first_token ","  index_of_first_token _of_first_token "]}," RuboCop Cop Style PredicateName predicate_prefices":{"type":"method","name":"predicate_prefices","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style PredicateName expected_name":{"type":"method","name":"expected_name","children":[],"call":["new_name << ","method_name end_with? ","method_name dup ","method_name sub "," prefix_blacklist include? "," prefix_blacklist ","method_name dup  << ","method_name sub  << "]}," RuboCop Cop Style MultilineIfThen autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector remove ","end_of_condition_range join ","node loc begin ","node loc ","condition_node loc expression end ","condition_node loc expression ","condition_node loc "," lambda "," range_with_surrounding_space ","condition_node loc expression end  join "]}," RuboCop Cop Style InfiniteLoop autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","start_range join ","condition_node loc expression end ","condition_node loc expression ","condition_node loc ","node loc begin end ","node loc begin ","node loc ","node loc keyword begin ","node loc keyword "," lambda ","condition_node source_range end ","condition_node source_range "," non_modifier_range "," modifier_replacement ","node source_range ","node modifier_form? ","corrector remove ","body loc end end join ","node source_range end ","body loc end end ","body loc end ","body loc ","body loc begin ","node until_post_type? ","node while_post_type? "," replace_source "," replace_begin_end_with_modifier ","node loc keyword begin  join ","start_ non_modifier_range  join ","start_node source_range  join ","condition_node source_ non_modifier_range  end ","condition_node source_node source_range  end ","condition_node source_ non_modifier_range  ","condition_node source_node source_range  "," non_modifier_ non_modifier_range  "," non_modifier_node source_range  "," modifier_ modifier_replacement  ","node source_ non_modifier_range  ","node source_node source_range  ","node source_ non_modifier_range  end ","node source_node source_range  end "]}," RuboCop Cop Style InfiniteLoop on_until":{"type":"method","name":"on_until","children":[],"call":[" add_offense ","FALSEY_LITERALS  include? ","condition type ","condition falsey_literal? ","node condition falsey_literal? ","node condition "," while_or_until "]}," RuboCop Cop Style InfiniteLoop on_while":{"type":"method","name":"on_while","children":[],"call":[" add_offense ","TRUTHY_LITERALS  include? ","condition type ","condition truthy_literal? ","node condition truthy_literal? ","node condition "," while_or_until "]}," RuboCop Cop Style IfUnlessModifier on_if":{"type":"method","name":"on_if","children":[],"call":[" add_offense "," message ","node loc keyword source ","node loc keyword ","node loc "," fit_within_line_as_modifier_form? "," if_else? "," elsif? "," modifier_if? "," ternary_op? "," chained? ","node chained? "," nested_conditional? "," ternary? "," eligible_node? "," format ","node keyword "," named_capture_in_condition? "," too_long_single_line? ","node modifier_form? "," too_long_due_to_modifier? "," single_line_as_modifier? "," autocorrect "," named_capture_in_condition? ! "," defined_argument_is_undefined? "," defined_nodes any? "," defined_nodes "," pattern_matching_nodes any? "," pattern_matching_nodes ","node condition "," ignore_node "," part_of_ignored_node? "," nested_node condition al? "," named_capture_in_node condition ? "," named_capture_in_node condition ? ! ","node node condition  "]}," RuboCop Cop Style FormatString format_method?":{"type":"method","name":"format_method?","children":[],"call":["method_name == ","receiver ! ","args children size < ","args children size ","args children ","args children size >= ","args size >= ","args size "]}," RuboCop Cop Style EmptyLinesAroundAccessModifier body_end?":{"type":"method","name":"body_end?","children":[],"call":["line start_with? ","line =~ "]}," RuboCop Cop Style DotPosition autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector insert_after ","receiver loc expression ","receiver loc ","corrector insert_before "," style ","corrector remove ","node loc dot ","node loc "," lambda ","node loc begin ","node loc selector ","receiver source_range "," selector_range ","node receiver source_range ","node receiver ","node loc node loc begin  ","node loc node loc selector  "," node loc begin _range "," node loc selector _range "]}," RuboCop Cop Style BracesAroundHashParameters remove_trailing_comma_and_whitespace":{"type":"method","name":"remove_trailing_comma_and_whitespace","children":[],"call":["corrector remove ","Parser Source Range  new ","node loc end begin_pos ","node loc end ","node loc ","node children last loc expression end_pos ","node children last loc expression ","node children last loc ","node children last ","node children ","node loc expression source_buffer ","node loc expression "]}," RuboCop Cop Style BracesAroundHashParameters remove_leading_whitespace":{"type":"method","name":"remove_leading_whitespace","children":[],"call":["corrector remove ","Parser Source Range  new ","node children first loc expression begin_pos ","node children first loc expression ","node children first loc ","node children first ","node children ","node loc begin end_pos ","node loc begin ","node loc ","node loc expression source_buffer ","node loc expression "]}," RuboCop Cop Style AndOr on_until_post":{"type":"method","name":"on_until_post","children":[],"call":[" on_conditionals "," style == "," style "]}," RuboCop Cop Style AndOr on_while_post":{"type":"method","name":"on_while_post","children":[],"call":[" on_conditionals "," style == "," style "]}," RuboCop Cop Rails Validation preferred_method":{"type":"method","name":"preferred_method","children":[],"call":["WHITELIST  [] ","BLACKLIST  index ","method to_sym ","ALLOWLIST  [] ","DENYLIST  index "]}," RuboCop Cop Lint UselessAssignment variable_like_method_invocation?":{"type":"method","name":"variable_like_method_invocation?","children":[],"call":["args empty? ","receiver nil? ","node send_type? ","node arguments? ! ","node arguments? ","node receiver nil? ","node receiver "]}," RuboCop Cop Lint UselessAssignment collect_variable_like_names":{"type":"method","name":"collect_variable_like_names","children":[],"call":["names merge ","scope variables each_value map ","scope variables each_value ","scope variables ","set << "," variable_like_method_invocation? ","scope each_node with_object ","Set  new ","scope each_node ","node method_name "]}," RuboCop Cop Lint UselessAssignment find_similar_name":{"type":"method","name":"find_similar_name","children":[],"call":["scores max_by ","hash []= ","score >= ","StringUtil  similarity ","names each_with_object ","names delete "," collect_variable_like_names ","StringUtil  similarity s max_by ","StringUtil  similarity  >= "," collect_variable_like_names  each_with_object "," collect_variable_like_names  delete "," collect_variable_like_ collect_variable_like_names  "]}," RuboCop Cop Lint SpaceBeforeFirstArg autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector insert_before "," lambda "]}," RuboCop Cop Lint EndInMethod on_postexe":{"type":"method","name":"on_postexe","children":[],"call":[" add_offense ","node each_ancestor count nonzero? ","node each_ancestor count ","node each_ancestor "]}," RuboCop Cop Style SymbolProc can_shorten?":{"type":"method","name":"can_shorten?","children":[],"call":["block_arg_name == ","block_args children first ","block_args children ","receiver type == ","receiver type ","block_body type == ","block_body type ","block_args children size == ","block_args children size ","block_args children first blockarg_type? "," non_shortenable_args? "," argument_matches_receiver? "," shortenable_body? "," shortenable_args? "]}," RuboCop Cop Style OpMethod op_method?":{"type":"method","name":"op_method?","children":[],"call":["OP_LIKE_METHODS  include? ","name !~ ","BLACKLISTED  include? "]}," RuboCop Cop Metrics LineLength uri_regexp":{"type":"method","name":"uri_regexp","children":[],"call":["URI  regexp "," cop_config [] "," cop_config ","URI Parser  new make_regexp ","URI Parser  new ","URI DEFAULT_PARSER  make_regexp "]}," RuboCop Runner do_inspection_loop":{"type":"method","name":"do_inspection_loop","children":[],"call":["ProcessedSource  from_file ","offenses concat uniq! ","offenses concat "," inspect_file ","offenses select! "," loop "," check_for_infinite_loop "," get_processed_source ","comments __setobj__ ","processed_source comments ","disabled_line_ranges __setobj__ ","processed_source disabled_line_ranges "," raise ","InfiniteCorrectionLoop  new ","processed_source path ","(op-asgn\n  (ivasgn :@iterations) :+\n  (int 1)) > "," iterate_until_no_changes ","offenses_by_iteration flatten uniq ","offenses_by_iteration flatten ","offenses_by_iteration push ","offenses_by_iteration last select! ","offenses_by_iteration last ","offenses_by_iteration empty? ! ","offenses_by_iteration empty? ","offenses_by_iteration flatten uniq  concat uniq! ","offenses_by_iteration flatten uniq  concat ","offenses_by_iteration flatten uniq  select! "," get_ProcessedSource  from_file  "," get_ get_processed_source  ","ProcessedSource  from_file  comments "," get_processed_source  comments ","ProcessedSource  from_file  disabled_line_ranges "," get_processed_source  disabled_line_ranges ","ProcessedSource  from_file  path "," get_processed_source  path ","offenses_by_iteration flatten uniq _by_iteration flatten uniq ","offenses_by_iteration flatten uniq _by_iteration flatten ","offenses_by_iteration flatten uniq _by_iteration push ","offenses_by_iteration flatten uniq _by_iteration last select! ","offenses_by_iteration flatten uniq _by_iteration last ","offenses_by_iteration flatten uniq _by_iteration empty? ! ","offenses_by_iteration flatten uniq _by_iteration empty? "]}," RuboCop PathUtil issue_deprecation_warning":{"type":"method","name":"issue_deprecation_warning","children":[],"call":[" warn ","pattern end_with? ","basename == "]}," RuboCop Options validate_compatibility":{"type":"method","name":"validate_compatibility","children":[],"call":[" fail ","incompat inspect ","(lvasgn :incompat\n  (send\n    (send\n      (ivar :@options) :keys) :&\n    (const nil :EXITING_OPTIONS))) size > ","(lvasgn :incompat\n  (send\n    (send\n      (ivar :@options) :keys) :&\n    (const nil :EXITING_OPTIONS))) size ","@options keys & ","@options keys ","(send\n  (send\n    (ivar :@options) :[]\n    (sym :only)) :&\n  (array\n    (str \"Lint/UnneededDisable\")\n    (str \"UnneededDisable\"))) any? ","@options [] & ","@options [] ","@options key? ","(str \"true\") include? ! ","(str \"true\") include? ","@options keys &  inspect ","(lvasgn :@options keys & \n  (send\n    (send\n      (ivar :@options) :keys) :&\n    (const nil :EXITING_OPTIONS))) size > ","(lvasgn :@options keys & \n  (send\n    (send\n      (ivar :@options) :keys) :&\n    (const nil :EXITING_OPTIONS))) size "]}," RuboCop Options define_options":{"type":"method","name":"define_options","children":[],"call":[" add_boolean_flags "," add_flags_with_optional_args "," add_severity_option "," require "," option "," add_formatting_options "," add_configuration_options ","@options []= ","Cop Cop  qualified_cop_name ","list split map ","list split ","opts banner= ","OptionParser  new "," add_only_options "," add_list_options "," add_aliases "," add_cache_options "," require_feature "," add_general_options "," add_additional_modes "," add_config_generation_options "," add_autocorrection_options "," add_output_options "," add_check_options "," rainbow wrap bright "," rainbow wrap "," rainbow "," add_server_options "," add_profile_options ","Platform  windows? ! ","Platform  windows? ","RUBY_ENGINE  == "," add_lsp_option "]}," RuboCop Formatter TextUtil pluralize":{"type":"method","name":"pluralize","children":[],"call":["text << ","number == ","number to_s ","options [] ","number zero? ","number to_s  << "]}," RuboCop Formatter HTMLFormatter ERBContext base64_encoded_logo_image":{"type":"method","name":"base64_encoded_logo_image","children":[],"call":["Base64  encode64 ","File  read "]}," RuboCop Formatter HTMLFormatter ERBContext highlighted_source_line":{"type":"method","name":"highlighted_source_line","children":[],"call":["source_line [] + + + + ","source_line [] ","column_range end ","source_line [] + + + ","source_line [] + + ","source_line [] + ","offense severity ","column_range begin ","location source_line ","location source_line length ","location column ","location column_range ","location begin line == ","location end line ","location end ","location begin line ","location begin ","offense location "," escape + + + + "," escape "," escape + + + "," escape + + "," escape + ","offense highlighted_area end_pos ","offense highlighted_area ","offense highlighted_area source ","offense highlighted_area begin_pos ","location first_line == ","location last_line ","location first_line "," escape + + + + + "," source_before_highlight + + + "," possible_ellipses "," source_before_highlight + + "," source_after_highlight "," source_before_highlight + "," hightlight_source_tag "," source_before_highlight "," highlight_source_tag ","location source_line  [] + + + + ","location source_line  [] ","location column_range  end ","location source_line  [] + + + ","location source_line  [] + + ","location source_line  [] + ","location column_range  begin ","location location source_line  ","offense location  source_line ","location location source_line  length ","offense location  source_line length ","offense location  column ","location location column_range  ","offense location  column_range ","offense location  begin line == ","offense location  end line ","offense location  end ","offense location  begin line ","offense location  begin ","offense offense location  ","offense location  first_line == ","offense location  last_line ","offense location  first_line "]}," RuboCop Formatter HTMLFormatter ERBContext decorated_message":{"type":"method","name":"decorated_message","children":[],"call":["Regexp  last_match ","offense message gsub ","offense message "]}," RuboCop Formatter HTMLFormatter ERBContext binding":{"type":"method","name":"binding","children":[],"call":[]}," RuboCop Formatter HTMLFormatter ERBContext initialize":{"type":"method","name":"initialize","children":[],"call":["files sort_by "]}," RuboCop Formatter HTMLFormatter fade_out":{"type":"method","name":"fade_out","children":[],"call":["color alpha "," dup tap "," dup "]}," RuboCop Formatter HTMLFormatter to_s":{"type":"method","name":"to_s","children":[],"call":[" values join "," values "]}," RuboCop Formatter HTMLFormatter render_html":{"type":"method","name":"render_html","children":[],"call":[" output write "," output ","erb result ","context binding ","ERB  new ","File  read ","ERBContext  new "," summary "," files ","RUBY_VERSION  >= ","ERB  new  result ","ERBContext  new  binding "]}," RuboCop Cop Util within_node?":{"type":"method","name":"within_node?","children":[],"call":["i end_pos <= ","o end_pos ","i end_pos ","i begin_pos >= ","o begin_pos ","i begin_pos ","inner loc expression ","inner loc ","outer loc expression ","outer loc ","inner source_range ","inner is_a? ","outer source_range ","outer is_a? ","inner loc expression  end_pos <= ","inner source_range  end_pos <= ","i end_pouter loc expression s <= ","i end_pouter source_range s <= ","outer loc expression  end_pouter loc expression s ","outer source_range  end_pouter source_range s ","inner loc expression  end_pos ","inner source_range  end_pos ","i end_pouter loc expression s ","i end_pouter source_range s ","inner loc expression  beginner loc expression n_pos >= ","inner source_range  beginner source_range n_pos >= ","i begin_pouter loc expression s >= ","i begin_pouter source_range s >= ","o beginner loc expression n_pos ","o beginner source_range n_pos ","outer loc expression  begin_pouter loc expression s ","outer source_range  begin_pouter source_range s ","inner loc expression  beginner loc expression n_pos ","inner source_range  beginner source_range n_pos ","i begin_pouter loc expression s ","i begin_pouter source_range s ","inner loc expression nner loc expressinner loc expression on ","inner source_range nner loc expressinner source_range on ","inner louter loc expression c expressiouter loc expression n ","inner louter source_range c expressiouter source_range n ","inner loc expression nner loc ","inner source_range nner loc ","inner louter loc expression c ","inner louter source_range c ","outer loc expressinner loc expression on ","outer loc expressinner source_range on ","outer loc expression uter louter loc expression c expressiouter loc expression n ","outer source_range uter louter source_range c expressiouter source_range n ","outer loc expression uter louter loc expression c ","outer source_range uter louter source_range c ","inner loc expression nner source_range ","inner source_range nner source_range ","inner souter loc expression urce_range ","inner souter source_range urce_range ","inner loc expression nner inner loc expression s_a? ","inner source_range nner inner source_range s_a? ","outer loc expression uter souter loc expression urce_range ","outer source_range uter souter source_range urce_range ","outer inner loc expression s_a? ","outer inner source_range s_a? ","outer loc expression uter is_a? ","outer source_range uter is_a? "]}," RuboCop Cop Style WordArray source_for":{"type":"method","name":"source_for","children":[],"call":["Parser Source Range  new source ","Parser Source Range  new ","str_node loc expression source_buffer ","str_node loc expression ","str_node loc ","str_node loc end begin_pos ","str_node loc end ","str_node loc begin end_pos ","str_node loc begin ","str_node loc expression end_pos ","str_node loc expression begin_pos + ","? length ","str_node loc expression begin_pos "," character_literal? ","str_node loc end str_node loc begin end_pos  ","str_node loc end str_node loc expression begin_pos +  ","str_node loc begin str_node loc end begin_pos  ","str_node loc begin str_node loc expression end_pos  ","str_node loc expression str_node loc end begin_pos  ","str_node loc expression str_node loc expression end_pos  ","str_node loc expression str_node loc begin end_pos  + ","str_node loc expression str_node loc expression begin_pos +  + ","str_node loc expression str_node loc begin end_pos  ","str_node loc expression str_node loc expression begin_pos +  "]}," RuboCop Cop Style WordArray word_regex":{"type":"method","name":"word_regex","children":[],"call":[" cop_config [] "," cop_config ","Regexp  new "]}," RuboCop Cop Style TrivialAccessors on_method_def":{"type":"method","name":"on_method_def","children":[],"call":[" add_offense "," format "," trivial_writer? "," trivial_reader? "," autocorrect ","node loc keyword ","node loc "]}," RuboCop Cop Style StringLiteralsInInterpolation autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","node loc end ","node loc ","node loc begin ","node loc begin is? "," lambda ","StringLiteralCorrector  correct "," style "]}," RuboCop Cop Style StringLiteralsInInterpolation offense?":{"type":"method","name":"offense?","children":[],"call":[" wrong_quotes? "," style "," within_node? ","a type == ","a type ","node each_ancestor find ","node each_ancestor "," inside_interpolation? "]}," RuboCop Cop Style StringLiteralsInInterpolation message":{"type":"method","name":"message","children":[],"call":[" style to_s sub "," style to_s "," style "]}," RuboCop Cop Style StringLiterals on_dstr":{"type":"method","name":"on_dstr","children":[],"call":[" ignore_node ","child type == ","child type ","node children find ","node children "," check_multiline_quote_style ","quote_styles [] "," add_offense ","quote_styles size > ","quote_styles size ","(send\n  (lvar :children) :map) uniq ","c loc begin source ","c loc begin ","c loc ","children map ","c dstr_type? ","c str_type? ","children all? "," consistent_multiline? ","node loc is_a? ","node loc "," detect_quote_styles "," all_string_literals? ","node heredoc? "," register_offense ","node node children  find ","node node children  ","(send\n  (lvar :children) :map) uniq  [] "," detect_quote_styles  [] ","(send\n  (lvar :children) :map) uniq  size > "," detect_quote_styles  size > ","(send\n  (lvar :children) :map) uniq  size "," detect_quote_styles  size ","(send\n  (lvar :node children ) :map) uniq ","node children  map ","node children  all? "," detect_(send\n  (lvar :children) :map) uniq  "," detect_ detect_quote_styles  "]}," RuboCop Cop Style SpaceInsideHashLiteralBraces incorrect_style_detected":{"type":"method","name":"incorrect_style_detected","children":[],"call":[" opposite_style_detected "," add_offense "," message "," space_range ","(if\n  (send\n    (send\n      (lvar :t1) :text) :==\n    (str \"{\"))\n  (lvar :t1)\n  (lvar :t2)) pos ","t1 text == ","t1 text "," ambiguous_style_detected "," unexpected_style_detected ","t2 text "," ambiguous_or_unexpected_style_detected "," space_ space_range  "]}," RuboCop Cop Style SpaceInsideBlockBraces adjacent_braces":{"type":"method","name":"adjacent_braces","children":[],"call":[" offense ","right_brace end_pos ","left_brace begin_pos "," style_for_empty_braces != "," style_for_empty_braces "]}," RuboCop Cop Style SpaceAroundEqualsInParameterDefault incorrect_style_detected":{"type":"method","name":"incorrect_style_detected","children":[],"call":[" unrecognized_style_detected "," opposite_style_detected "," style == "," style "," add_offense ","Parser Source Range  new ","value pos begin_pos ","value pos ","arg pos end_pos ","arg pos "," processed_source buffer "," processed_source "," range_between "," Parser Source Range  new _between ","  range_between _between "]}," RuboCop Cop Style SpaceAfterMethodName on_method_def":{"type":"method","name":"on_method_def","children":[],"call":[" add_offense ","pos_before_left_paren source =~ ","pos_before_left_paren source ","Parser Source Range  new ","expr begin_pos ","expr begin_pos - ","expr source_buffer ","args loc expression ","args loc ","args loc begin is? ","args loc begin ","args source_range "," range_between ","Parser Source Range  new  source =~ "," range_between  source =~ ","Parser Source Range  new  source "," range_between  source ","args loc expression  begin_pos ","args source_range  begin_pos ","args loc expression  begin_pos - ","args source_range  begin_pos - ","args loc expression  source_buffer ","args source_range  source_buffer ","args loc args loc expression ession ","args loc args source_range ession "]}," RuboCop Cop Style SingleLineMethods configured_indentation_width":{"type":"method","name":"configured_indentation_width","children":[],"call":[" config for_cop [] "," config for_cop "," config "]}," RuboCop Cop Style SingleLineMethods on_method_def":{"type":"method","name":"on_method_def","children":[],"call":[" add_offense ","(and\n  (send nil :allow_empty?)\n  (lvar :empty_body)) ! "," allow_empty? ","start_line == ","body nil? ","node loc end line ","node loc end ","node loc ","node loc keyword line ","node loc keyword ","(and\n  (send nil :allow_empty?)\n  (lvar :body nil? )) ! ","node loc keyword line  == "]}," RuboCop Cop Style RescueModifier on_method_def":{"type":"method","name":"on_method_def","children":[],"call":[" check "]}," RuboCop Cop Style RegexpLiteral calculate_config":{"type":"method","name":"calculate_config","children":[],"call":["min - ","max < ","min < "," max_slashes + "," max_slashes ","max > "]}," RuboCop Cop Style RedundantReturn on_method_def":{"type":"method","name":"on_method_def","children":[],"call":[" check_return_node ","last_expr type == ","last_expr type ","expressions last ","body type == ","body type ","last_expr return_type? ","body begin_type? ","body return_type? "," check_branch ","expressions last  type == ","expressions last  type ","expressions last  return_type? "]}," RuboCop Cop Style RedundantBegin on_method_def":{"type":"method","name":"on_method_def","children":[],"call":[" add_offense ","body type == ","body type ","body kwbegin_type? "]}," RuboCop Cop Style PredicateName on_method_def":{"type":"method","name":"on_method_def","children":[],"call":[" add_offense "," message "," expected_name ","method_name == ","method_name start_with? ","method_name to_s "," predicate_prefices each "," predicate_prefices "," predicate_whitelist include? "," predicate_whitelist "," predicate_prefixes each "," predicate_prefixes ","method_name to_s  == ","method_name to_s  start_with? ","method_name to_s  to_s "]}," RuboCop Cop Style NonNilCheck on_method_def":{"type":"method","name":"on_method_def","children":[],"call":[" ignore_node ","body children last ","body children ","body type == ","body type ","body type != ","name to_s end_with? ","name to_s ","body begin_type? "]}," RuboCop Cop Style NonNilCheck message":{"type":"method","name":"message","children":[],"call":["method == ","node method? "," format ","node source ","node receiver source ","node receiver "," include_semantic_changes? ! "," include_semantic_changes? "]}," RuboCop Cop Style MultilineOperationIndentation inside_arg_list_parentheses?":{"type":"method","name":"inside_arg_list_parentheses?","children":[],"call":["n end_pos < ","a end end_pos ","a end ","n end_pos ","n begin_pos > ","a begin begin_pos ","a begin ","n begin_pos ","node loc expression ","node loc ","a begin is? ","ancestor type == ","ancestor type ","ancestor loc ","node loc expression  enode loc expression d_pos < ","a enode loc expression d enode loc expression d_pos ","ancestor loc  end end_pos ","a enode loc expression d ","ancestor loc  end ","node loc expression  enode loc expression d_pos ","node loc expression  beginode loc expression _pos > ","a beginode loc expression  beginode loc expression _pos ","ancestor loc  begin begin_pos ","a beginode loc expression  ","ancestor loc  begin ","node loc expression  beginode loc expression _pos ","node loc expression ode loc expressionode loc expression  ","node loc expression ode loc ","a beginode loc expression  is? ","ancestor loc  begin is? ","anode loc expression cestor type == ","ancestor loc ncestor type == ","anode loc expression cestor type ","ancestor loc ncestor type ","anode loc expression cestor loc ","ancestor loc ncestor loc "]}," RuboCop Cop Style MultilineOperationIndentation grouped_expression?":{"type":"method","name":"grouped_expression?","children":[],"call":["node loc begin ","node loc ","node loc respond_to? ","node type == ","node type "]}," RuboCop Cop Style MultilineOperationIndentation not_for_this_cop?":{"type":"method","name":"not_for_this_cop?","children":[],"call":[" inside_arg_list_parentheses? "," grouped_expression? ","node each_ancestor find ","node each_ancestor ","node each_ancestor any? "]}," RuboCop Cop Style MultilineOperationIndentation assignment?":{"type":"method","name":"assignment?","children":[],"call":["ASGN_NODES  include? ","a type ","node each_ancestor find ","node each_ancestor ","method_name == "]}," RuboCop Cop Style MultilineOperationIndentation kw_node_with_special_indentation":{"type":"method","name":"kw_node_with_special_indentation","children":[],"call":[" within_node? ","a type ","a loc respond_to? ","a loc ","node each_ancestor find ","node each_ancestor "]}," RuboCop Cop Style MultilineOperationIndentation should_align?":{"type":"method","name":"should_align?","children":[],"call":[" assignment? "," kw_node_with_special_indentation ","given_style == "," assignment_rhs? "," argument_in_method_call "," part_of_assignment_rhs "," begins_its_line? ","assignment_rhs source_range ","CheckAssignment  extract_rhs "," CheckAssignment  extract_rhs ? "," part_of_CheckAssignment  extract_rhs  ","CheckAssignment  extract_rhs  source_range "]}," RuboCop Cop Style MultilineOperationIndentation correct_indentation":{"type":"method","name":"correct_indentation","children":[],"call":[" configured_indentation_width * "," configured_indentation_width "," kw_node_with_special_indentation "]}," RuboCop Cop Style MultilineOperationIndentation right_hand_side":{"type":"method","name":"right_hand_side","children":[],"call":["send_node loc selector ","send_node loc ","send_node loc dot join ","send_node loc dot ","send_node loc dot line == ","send_node loc selector line ","send_node loc dot line ","args first loc expression ","args first loc ","args first ","args any? "," operator? ","send_node loc begin ","send_node loc begin line ","dot join ","dot line == ","dot line ","selector line ","send_node loc send_node loc selector  ","send_node loc send_node loc dot  join ","send_node loc send_node loc dot  ","send_node loc send_node loc dot  line == ","send_node loc send_node loc selector  line ","send_node loc send_node loc dot  line ","send_node loc dot  join ","send_node loc dot  line == ","send_node loc dot  line ","send_node loc selector  line "]}," RuboCop Cop Style MultilineOperationIndentation left_hand_side":{"type":"method","name":"left_hand_side","children":[],"call":["lhs parent ","lhs parent type == ","lhs parent type "," operator? ","lhs parent  parent ","lhs parent  parent type == ","lhs parent  parent type "]}," RuboCop Cop Style MultilineOperationIndentation operation_description":{"type":"method","name":"operation_description","children":[],"call":["an expression + "," assignment? ","kw =~ ","kw == ","ancestor loc keyword source ","ancestor loc keyword ","ancestor loc "," kw_node_with_special_indentation "," assignment_rhs? ","ancestor loc keyword source  =~ ","ancestor loc keyword source  == "," kw_node_with_special_indentation  loc keyword source "," kw_node_with_special_indentation  loc keyword "," kw_node_with_special_indentation  loc "," ancestor loc keyword source _node_with_special_indentation "]}," RuboCop Cop Style MultilineOperationIndentation indentation":{"type":"method","name":"indentation","children":[],"call":["node loc expression source_line =~ ","node loc expression source_line ","node loc expression ","node loc "]}," RuboCop Cop Style MultilineOperationIndentation message":{"type":"method","name":"message","children":[],"call":[" correct_indentation ","rhs column - "," indentation ","rhs column "," should_align? "," style "," operation_description "]}," RuboCop Cop Style MultilineOperationIndentation offending_range":{"type":"method","name":"offending_range","children":[],"call":["@column_delta != ","correct_column - ","rhs column "," indentation + "," correct_indentation "," indentation ","lhs loc column ","lhs loc "," should_align? "," not_for_this_cop? ","lhs loc line == ","rhs line ","lhs loc line "," begins_its_line? ","node loc column ","node loc ","@column_delta nonzero? ","correct_column -  != "," indentation +  - ","lhs loc column  - ","node loc column  - ","correct_column -  nonzero? "]}," RuboCop Cop Style MultilineOperationIndentation incorrect_style_detected":{"type":"method","name":"incorrect_style_detected","children":[],"call":[" opposite_style_detected "," offending_range "," alternative_style "," add_offense "," message "," unrecognized_style_detected "]}," RuboCop Cop Style MultilineOperationIndentation check":{"type":"method","name":"check","children":[],"call":[" correct_style_detected "," incorrect_style_detected "]}," RuboCop Cop Style MultilineOperationIndentation check_and_or":{"type":"method","name":"check_and_or","children":[],"call":[" check ","rhs loc expression ","rhs loc "," offending_range "," style ","rhs source_range "," offending_ offending_range  ","rhs source_ offending_range  "]}," RuboCop Cop Style MultilineOperationIndentation on_send":{"type":"method","name":"on_send","children":[],"call":[" check "," offending_range "," style "," right_hand_side "," left_hand_side ","method_name == "," offending_ offending_range  "]}," RuboCop Cop Style MultilineOperationIndentation on_or":{"type":"method","name":"on_or","children":[],"call":[" check_and_or "]}," RuboCop Cop Style MultilineOperationIndentation on_and":{"type":"method","name":"on_and","children":[],"call":[" check_and_or "]}," RuboCop Cop Style MethodDefParentheses unwanted_parentheses":{"type":"method","name":"unwanted_parentheses","children":[],"call":[" opposite_style_detected "," add_offense "," unexpected_style_detected "," correct_arguments "]}," RuboCop Cop Style MethodDefParentheses missing_parentheses":{"type":"method","name":"missing_parentheses","children":[],"call":[" opposite_style_detected "," add_offense ","args loc expression ","args loc "," unexpected_style_detected ","args source_range ","node arguments source_range ","node arguments "," correct_definition "," add_parentheses "]}," RuboCop Cop Style MethodDefParentheses on_method_def":{"type":"method","name":"on_method_def","children":[],"call":[" correct_style_detected "," unwanted_parentheses "," parentheses? "," missing_parentheses "," parentheses? ! "," arguments? "," style == "," style ","args multiline? "," arguments_without_parentheses? "," require_parentheses? "]}," RuboCop Cop Style IndentationWidth configured_indentation_width":{"type":"method","name":"configured_indentation_width","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style IndentationWidth indentation_to_check?":{"type":"method","name":"indentation_to_check?","children":[],"call":["body_node loc column == ","body_node loc column ","body_node loc ","body_node loc expression source_line =~ ","body_node loc expression source_line ","body_node loc expression "," starts_with_access_modifier? ","body_node loc line == ","base_loc line ","body_node loc line ","(sym :rescue) include? ","body_node type ","body_node source_range source_line =~ ","body_node source_range source_line ","body_node source_range "," skip_check? "]}," RuboCop Cop Style IndentationWidth on_method_def":{"type":"method","name":"on_method_def","children":[],"call":[" check_indentation ","node loc keyword ","node loc "," ignored_node? "]}," RuboCop Cop Style IndentHash incorrect_style_detected":{"type":"method","name":"incorrect_style_detected","children":[],"call":[" unrecognized_style_detected "," opposite_style_detected ","column == "," unexpected_column "," add_offense "," message "," base_description "," ambiguous_style_detected "," detected_styles ","column - - ","column - "," configured_indentation_width "," detected_ detected_styles  "]}," RuboCop Cop Style EmptyLinesAroundModuleBody on_module":{"type":"method","name":"on_module","children":[],"call":[" check "]}," RuboCop Cop Style EmptyLinesAroundMethodBody style":{"type":"method","name":"style","children":[],"call":[]}," RuboCop Cop Style EmptyLinesAroundMethodBody on_method_def":{"type":"method","name":"on_method_def","children":[],"call":[" check "]}," RuboCop Cop Style EmptyLinesAroundClassBody on_sclass":{"type":"method","name":"on_sclass","children":[],"call":[" check "]}," RuboCop Cop Style EmptyLinesAroundClassBody on_class":{"type":"method","name":"on_class","children":[],"call":[" check "]}," RuboCop Cop Style ElseAlignment check_alignment":{"type":"method","name":"check_alignment","children":[],"call":[" add_offense "," format ","base_loc source [] ","base_loc source ","else_range source ","@column_delta == ","base_loc column - ","else_range column ","base_loc column "," begins_its_line? ","base_range source [] ","base_range source ","base_range column - ","base_range column "," effective_column - "," effective_column ","@column_delta zero? ","base_loc column -  == ","base_range column -  == "," effective_column -  == ","base_loc column -  zero? ","base_range column -  zero? "," effective_column -  zero? "]}," RuboCop Cop Style ElseAlignment check_assignment":{"type":"method","name":"check_assignment","children":[],"call":[" ignore_node "," on_if ","rhs type != ","rhs type ","style == ","end_config [] "," config for_cop "," config "," first_part_of_call_chain "," variable_alignment? ","style to_sym ","node loc ","rhs if_type? "," first_part_of_call_chain  type != "," first_part_of_call_chain  type ","end_config []  == "," config for_cop  [] ","end_config []  to_sym "," first_part_of_call_chain  if_type? "]}," RuboCop Cop Style ElseAlignment on_case":{"type":"method","name":"on_case","children":[],"call":[" check_alignment ","node loc else ","node loc ","whens last loc keyword ","whens last loc ","whens last "," if_else? ","node when_branches last loc keyword ","node when_branches last loc ","node when_branches last ","node when_branches ","node else? "]}," RuboCop Cop Style ElseAlignment on_rescue":{"type":"method","name":"on_rescue","children":[],"call":[" check_alignment ","node loc else ","node loc ","node loc keyword ","grandparent loc begin ","grandparent loc ","node parent loc keyword ","node parent loc ","node parent ","grandparent loc selector ","grandparent type == ","grandparent type ","node parent type ","node parent parent ","parent parent loc begin ","parent parent loc ","parent parent ","parent loc begin ","parent loc "," base_for_method_definition ","parent type ","parent type == ","parent ensure_type? "," if_else? ","node loc respond_to? ","node parent parent  loc begin ","grandnode parent  loc begin ","grandparent parent  loc begin ","node parent parent  loc ","grandnode parent  loc ","grandparent parent  loc ","node node parent  loc keyword ","node parent parent  loc keyword ","node node parent  loc ","node node parent  ","node parent parent  ","node parent parent  loc selector ","grandnode parent  loc selector ","grandparent parent  loc selector ","node parent parent  type == ","grandnode parent  type == ","grandparent parent  type == ","node parent parent  type ","grandnode parent  type ","grandparent parent  type ","node node parent  type ","node node parent  node parent  ","node parent parent  parent parent  ","node parent  node parent  loc begin ","parent parent  parent parent  loc begin ","node parent  node parent  loc ","parent parent  parent parent  loc ","node parent  node parent  ","parent parent  parent parent  ","node parent  loc begin ","parent parent  loc begin ","node parent  loc ","parent parent  loc ","node parent  type ","parent parent  type ","node parent  type == ","parent parent  type == ","node parent  ensure_type? ","parent parent  ensure_type? "]}," RuboCop Cop Style ElseAlignment on_if":{"type":"method","name":"on_if","children":[],"call":[" check_alignment ","base loc keyword ","base loc ","base parent ","(str \"if\") include? ","base loc keyword source ","base loc expression "," begins_its_line? ","node loc else ","node loc ","node loc else nil? ","node loc respond_to? "," ignored_node? "," ignore_node "," on_if ","else_range source != ","else_range source "," base_range "," elsif? "," if_else? ","else_branch elsif? ","else_branch if_type? ","node else_branch ","node else? ","base parent  loc keyword ","base parent  loc ","base parent  parent ","base parent  loc keyword source ","base parent  loc expression ","node loc else  source != ","node loc else  source "," base loc expression  "," base parent _range ","node else_branch  elsif? ","node else_branch  if_type? ","node node else_branch  "]}," RuboCop Cop Style DefWithParentheses on_method_def":{"type":"method","name":"on_method_def","children":[],"call":[" add_offense ","args loc begin ","args loc ","args children == ","args children ","start_line == ","node loc end line ","node loc end ","node loc ","node loc keyword line ","node loc keyword ","args children empty? ","node single_line? ","node loc keyword line  == "]}," RuboCop Cop Style CommentIndentation check":{"type":"method","name":"check","children":[],"call":[" add_offense "," format ","comment loc expression ","comment loc ","column == "," configured_indentation_width "," two_alternatives? ","@column_delta == ","correct_comment_indentation - ","comment loc column "," correct_indentation ","line blank? ! ","line blank? ","lines [] find ","lines [] ","comment loc line ","own_line =~ ","comment loc line - "," processed_source lines "," processed_source "," line_after_comment "," own_line_comment? ","@column_delta zero? ","comment loc column  == ","correct_comment_indentation -  == ","@comment loc column _delta == "," correct_indentation  - ","comment loc comment loc column  "," processed_source lines  [] find "," processed_source lines  [] ","lines []  =~ "," processed_source  processed_source lines  "," lines [] _comment? ","correct_comment_indentation -  zero? ","@comment loc column _delta zero? "]}," RuboCop Cop Style CaseIndentation configured_indentation_width":{"type":"method","name":"configured_indentation_width","children":[],"call":[" config for_cop [] "," config for_cop "," config "]}," RuboCop Cop Style CaseIndentation incorrect_style":{"type":"method","name":"incorrect_style","children":[],"call":[" unrecognized_style_detected "," opposite_style_detected ","pos column == "," base_column "," alternative_style ","pos column "," add_offense ","Indent `when`  + ","when_column == "," message "," style ","when_node parent ","when_node loc keyword column ","when_node loc keyword ","when_node loc ","  base_column  ","when_node loc keyword column  == "]}," RuboCop Cop Style BracesAroundHashParameters offense":{"type":"method","name":"offense","children":[],"call":[" opposite_style_detected "," add_offense "]}," RuboCop Cop Style BlockComments parts":{"type":"method","name":"parts","children":[],"call":["Parser Source Range  new ","eq_end begin_pos ","eq_begin end_pos ","expr source_buffer ","expr end_pos ","expr end_pos - ","\n=end length ","expr resize ","=begin\n length ","comment loc expression ","comment loc "," range_between "," eq_end_part ","comment source_range ","Parser Source Range  new  begin_pos "," range_between  begin_pos "," eq_end_part  begin_pos ","expr resize  end_pos ","comment loc expression  source_buffer ","comment source_range  source_buffer ","comment loc expression  end_pos ","comment source_range  end_pos ","comment loc expression  end_pos - ","comment source_range  end_pos - ","comment loc expression  resize ","comment source_range  resize ","comment loc comment loc expression ession ","comment loc comment source_range ession "," Parser Source Range  new _part ","  range_between _part ","  eq_end_part _part "]}," RuboCop Cop Style AndOr correctable?":{"type":"method","name":"correctable?","children":[],"call":["method_name to_s =~ ","method_name to_s ","args last ","expr loc begin source != ","expr loc begin source ","expr loc begin ","expr loc ","expr loc begin ! ","expr type == ","expr type "]}," RuboCop Cop Style AlignHash check_pairs":{"type":"method","name":"check_pairs","children":[],"call":[" add_offense "," good_alignment? "," alignment_for deltas "," alignment_for ","node children each_cons ","node children "," alignment_for deltas_for_first_pair ","node children first ","node children each "," column_deltas= ","node pairs first ","node pairs "," alignment_for deltas_for_node children first  "," alignment_for deltas_for_node pairs first  "]}," RuboCop Cop Style AccessorMethodName on_method_def":{"type":"method","name":"on_method_def","children":[],"call":[" add_offense "," bad_writer_name? ","method_name to_s "," bad_reader_name? "]}," RuboCop Cop Rails Delegate on_method_def":{"type":"method","name":"on_method_def","children":[],"call":[" add_offense "," private_or_protected_delegation "," trivial_delegate? "]}," RuboCop Cop StringLiteralsHelp autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","node loc end ","node loc ","node loc begin ","node loc begin is? "," lambda ","str inspect ","node source_range "," to_string_literal "," style == "," style ","node str_content ","node dstr_type? ","node str_content  inspect "," to_node str_content ing_literal ","node node str_content _content ","node dnode str_content _type? "]}," RuboCop Cop StringLiteralsHelp wrong_quotes?":{"type":"method","name":"wrong_quotes?","children":[],"call":["src !~ ","style == ","src start_with? ","node loc expression source ","node loc expression ","node loc "," double_quotes_acceptable? ! "," double_quotes_acceptable? ","node str_content "," style == "," style ","node source "," double_quotes_required? ! "," double_quotes_required? ","(str \"\\\" | \\\\\\\\[^'] | \\\\#(@|\\\\{)\") match? ! ","(str \"\\\" | \\\\\\\\[^'] | \\\\#(@|\\\\{)\") match? ","(str \"\\\" | \\\\\\\\[^'\\\\\\\\] | \\\\#[@{$]\") match? ! ","(str \"\\\" | \\\\\\\\[^'\\\\\\\\] | \\\\#[@{$]\") match? ","src_or_node source ","src_or_node is_a? ","(str \"\\\" | (?<!\\\\\\\\)\\\\\\\\[abcefMnrtuUx0-7] | \\\\#[@{$]\") match? ! ","(str \"\\\" | (?<!\\\\\\\\)\\\\\\\\[abcefMnrtuUx0-7] | \\\\#[@{$]\") match? ","(str \"\\\" | (?<!\\\\\\\\)\\\\\\\\[aAbcdefkMnprsStuUxzZ0-7] | \\\\#[@{$]\") match? ! ","(str \"\\\" | (?<!\\\\\\\\)\\\\\\\\[aAbcdefkMnprsStuUxzZ0-7] | \\\\#[@{$]\") match? ","node loc expression source  !~ ","node source  !~ ","src_or_node source  !~ ","node loc expression source  start_with? ","node source  start_with? ","src_or_node source  start_with? ","node loc expression source _or_node source ","node source _or_node source ","src_or_node source _or_node source ","node loc expression source _or_node is_a? ","node source _or_node is_a? ","src_or_node source _or_node is_a? "]}," RuboCop Cop OnMethodDef visibility_and_def_on_same_line?":{"type":"method","name":"visibility_and_def_on_same_line?","children":[],"call":["(sym :def) include? ","args first type ","args first ","args size == ","args size ","(sym :public) include? ","receiver ! "]}," RuboCop Cop OnMethodDef on_defs":{"type":"method","name":"on_defs","children":[],"call":[" on_method_def "]}," RuboCop Cop OnMethodDef on_def":{"type":"method","name":"on_def","children":[],"call":[" on_method_def "]}," RuboCop Cop MethodComplexity on_method_def":{"type":"method","name":"on_method_def","children":[],"call":[" max= ","complexity ceil "," add_offense "," format "," class ","complexity > "," complexity "," cop_config [] "," cop_config ","  cop_config [] = "," complexity  ceil "," complexity  > ","  complexity  "]}," RuboCop Cop Style EmptyLinesAroundBody check_both":{"type":"method","name":"check_both","children":[],"call":[" check_line "," format ","end_line - "," class "," check_ending "," check_beginning "]}," RuboCop Cop AutocorrectUnlessChangingAST syntax_error?":{"type":"method","name":"syntax_error?","children":[],"call":["ProcessedSource  new valid_syntax? ! ","ProcessedSource  new valid_syntax? ","ProcessedSource  new ","pre + + ","pre + ","current_buffer_src [] ","replaced_range end_pos ","replaced_range begin_pos "," processed_source buffer source "," processed_source buffer "," processed_source ","current_buffer_src []  + + ","current_buffer_src []  + "," processed_source buffer source  [] "]}," RuboCop Cop AutocorrectAlignment autocorrect_line":{"type":"method","name":"autocorrect_line","children":[],"call":[" remove ","range source =~ ","range source ","corrector insert_before ","  * ","range source == ","column_delta > "," within? ","heredoc_ranges any? "," calculate_range "," calculate_range  source =~ "," calculate_range  source "," calculate_range  source == ","heredoc_ calculate_range s any? "," calculate_ calculate_range  "]}," RuboCop Cop AutocorrectAlignment configured_indentation_width":{"type":"method","name":"configured_indentation_width","children":[],"call":[" config for_cop [] "," config for_cop "," config "," cop_config [] "," cop_config "]}," RuboCop Cop Metrics MethodLength on_method_def":{"type":"method","name":"on_method_def","children":[],"call":[" check_code_length "]}," RuboCop Cop Metrics AbcSize complexity":{"type":"method","name":"complexity","children":[],"call":["Math  sqrt round ","Math  sqrt ","a ** + + ","c ** ","a ** + ","b ** ","a ** ","node each_node count ","node each_node ","assignment ** + + ","condition ** ","assignment ** + ","branch ** ","assignment ** ","CONDITION_NODES  include? ","child type ","BRANCH_NODES  include? ","ASGN_NODES  include? ","child assignment? ","Utils AbcSizeCalculator  calculate "," cop_config [] ! "," cop_config [] "," cop_config ","Mnode each_node count th  sqrt round ","Mnode each_node count th  sqrt ","node each_node count  ** + + ","node each_node count  ** ","node each_node count  ** + ","node eanode each_node count h_node node each_node count ount ","node enode each_node count ch_node count ","node eanode each_node count h_node ","node enode each_node count ch_node ","node each_node count ssignment ** + + ","node each_node count ondition ** ","node each_node count ssignment ** + ","brannode each_node count h ** ","node each_node count ranch ** ","brnode each_node count nch ** ","node each_node count ssignment ** ","CONDITION_NODES  innode each_node count lude? ","node each_node count hild type ","BRANCH_NODES  innode each_node count lude? ","ASGN_NODES  innode each_node count lude? ","node each_node count hild assignment? ","child node each_node count ssignment? ","Utils Abnode each_node count SizeCalnode each_node count ulator  node each_node count alnode each_node count ulate ","Utils Anode each_node count cSizeCalculator  calculate ","Utils AbcSizeCnode each_node count lculnode each_node count tor  cnode each_node count lculnode each_node count te "," node each_node count op_node each_node count onfig [] ! "," node each_node count op_node each_node count onfig [] "," node each_node count op_node each_node count onfig "]}," RuboCop Cop Lint UselessSetterCall on_method_def":{"type":"method","name":"on_method_def","children":[],"call":[" add_offense "," format ","receiver loc name source ","receiver loc name ","receiver loc ","tracker contain_local_object? ","MethodVariableTracker  new "," setter_call_to_local_variable? ","expression last ","expression is_a? ","body children ","body type == ","body type "," last_expression ","MethodVariableTracker  new  contain_local_object? ","body children  last ","body children  is_a? "," expression last ession ","  last_expression ession "," last_body children  "]}," RuboCop Cop Lint DefEndAlignment on_method_def":{"type":"method","name":"on_method_def","children":[],"call":[" check_offset_of_node "," check_end_kw_in_node "]}," RuboCop Cop Cop cop_name_with_namespace":{"type":"method","name":"cop_name_with_namespace","children":[],"call":[]}," RuboCop Config validate_parameter_names":{"type":"method","name":"validate_parameter_names","children":[],"call":[" fail "," loaded_path ","ConfigLoader  default_configuration [] key? ","ConfigLoader  default_configuration [] ","ConfigLoader  default_configuration ","COMMON_PARAMS  include? ","@hash [] each_key ","@hash [] ","valid_cop_names each "," validate_section_presence "," [] each_key "," [] "," warn "," Rainbow yellow "," Rainbow "," smart_loaded_path "," Rainbow yellow to_s ","(send\n  (send\n    (lvar :default_config) :keys) :-\n  (const nil :INTERNAL_PARAMS)) join ","default_config keys - ","default_config keys ","default_config key? ","ConfigLoader  ConfigLoader  default_configuration [] uration [] key? ","ConfigLoader  ConfigLoader  default_configuration [] uration [] ","ConfigLoader  ConfigLoader  default_configuration [] uration ","(send\n  (send\n    (lvar :ConfigLoader  default_configuration [] ) :keys) :-\n  (const nil :INTERNAL_PARAMS)) join ","ConfigLoader  default_configuration []  keys - ","ConfigLoader  default_configuration []  keys ","ConfigLoader  default_configuration []  key? "]}," RuboCop CommentConfig all_cop_names":{"type":"method","name":"all_cop_names","children":[],"call":["Cop Cop  all map ","Cop Cop  all ","cop_name == ","Cop Cop  all map reject ","Cop Cop  registry names - ","Cop Cop  registry names ","Cop Cop  registry ","Cop Registry  global names - ","Cop Registry  global names ","Cop Registry  global "]}," RuboCop TargetFinder find_files":{"type":"method","name":"find_files","children":[],"call":["FileTest  file? ","Dir  glob select ","Dir  glob ","wanted_toplevel_dirs join ","wanted_toplevel_dirs empty? "," toplevel_dirs - "," excluded_dirs "," toplevel_dirs ","dir gsub ","wanted_toplevel_dirs map! ","wanted_toplevel_dirs unshift ","dir << ","File  join "," dir ","patterns empty? ","patterns map! "," wanted_dir_patterns ","flags | | ","flags | "," combined_exclude_glob_patterns "," toplevel_dirs -  join "," toplevel_dirs -  empty? "," toplevel_dirs -  map! "," toplevel_dirs -  unshift ","wanted_toplevel_dirs unshift s empty? "," wanted_dir_patterns  empty? ","wanted_toplevel_dirs unshift s map! "," wanted_dir_patterns  map! "," wanted_dir_wanted_toplevel_dirs unshift s "," wanted_dir_ wanted_dir_patterns  "," combined_exclude_glob_wanted_toplevel_dirs unshift s "," combined_exclude_glob_ wanted_dir_patterns  "]}," RuboCop TargetFinder to_inspect?":{"type":"method","name":"to_inspect?","children":[],"call":["base_dir_config file_to_include? "," ruby_executable? ","File  extname == ","File  extname ","hidden_files include? ","base_dir_config file_to_exclude? "," ruby_file? ","hidden_files include? ! ","git_files include? ","git_files nil? ","(send\n  (lvar :hidden_files) :bsearch) ! ","file <=> ","hidden_files bsearch "]}," RuboCop Cop Style ElseAlignment base_for_method_definition":{"type":"method","name":"base_for_method_definition","children":[],"call":["node loc keyword ","node loc ","parent loc selector ","parent loc ","parent type == ","parent type ","node parent ","parent send_type? ","node parent  loc selector ","node parent  loc ","node parent  type == ","node parent  type ","node node parent  ","node parent  send_type? "]}," RuboCop TargetFinder excluded_dirs":{"type":"method","name":"excluded_dirs","children":[],"call":["pattern sub ","dir_tree_excludes map ","pattern end_with? ","pattern is_a? ","all_cops_config [] select ","all_cops_config [] ","@config_store for [] ","@config_store for ","@config_store for for_all_cops ","@config_store for []  [] select ","@config_store for for_all_cops  [] select ","@config_store for []  [] ","@config_store for for_all_cops  [] "]}," RuboCop TargetFinder toplevel_dirs":{"type":"method","name":"toplevel_dirs","children":[],"call":["(or\n  (send\n    (lvar :dir) :end_with?\n    (str \"/.\"))\n  (send\n    (lvar :dir) :end_with?\n    (str \"/..\"))) ! ","dir end_with? ","File  directory? ","Dir  glob select ","Dir  glob ","File  join ","dir end_with? ! "]}," RuboCop Runner style_guide_cops_only?":{"type":"method","name":"style_guide_cops_only?","children":[],"call":["config [] [] ","config [] ","@options [] ","config for_all_cops [] ","config for_all_cops "]}," RuboCop Runner filter_cop_classes":{"type":"method","name":"filter_cop_classes","children":[],"call":["cop_classes select! ","@options [] ","cop_classes reject! "," run_rails_cops? ","config for_cop [] ","config for_cop "," style_guide_cops_only? "]}," RuboCop Options add_only_options":{"type":"method","name":"add_only_options","children":[],"call":[" option ","@options []= ","Cop Cop  qualified_cop_name ","list split map ","list split "," add_cop_selection_csv_option "]}," RuboCop Cop Style ExtraSpacing autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector remove "," lambda "," align_equal_sign ","range source end_with? ","range source "," align_equal_signs "]}," RuboCop Cop Style ExtraSpacing investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense ","Parser Source Range  new ","t2 pos begin_pos - ","t2 pos begin_pos ","t2 pos ","t1 pos end_pos ","t1 pos ","processed_source buffer ","t2 pos begin_pos - > ","t1 pos line == ","t2 pos line ","t1 pos line ","processed_source tokens each_cons ","processed_source tokens "," aligned_with_something? "," allow_for_alignment? ","t2 pos begin_pos - <= ","t1 pos line != ","t2 type == ","t2 type ","ignored_ranges include? "," ignored_ranges ","processed_source ast "," unary_plus_non_offense? ","r include? "," ignored_ranges find "," check_other "," check_assignment ","@asgn_lines include? ","t2 pos line + ","t2 pos line - ","@asgn_tokens include? "," force_equal_sign_alignment? ","Set  new ","t pos line ","t pos ","@asgn_tokens map ","@asgn_tokens uniq "," equal_sign? ","processed_source tokens select "," check_tokens "," remove_optarg_equals ","processed_source ast nil? "," assignment_tokens ","t1 pos t2 pos begin_pos -  ","processed_source processed_source buffer  ","ignored_Parser Source Range  new s include? "," ignored_ranges  include? "," ignored_Parser Source Range  new s ","  ignored_ranges  ","processed_source processed_source ast  "," ignored_Parser Source Range  new s find ","  ignored_ranges  find ","Set  new  include? "," remove_optarg_equals  include? "," assignment_tokens  include? ","Set  new  map "," remove_optarg_equals  map "," assignment_tokens  map ","Set  new  uniq "," remove_optarg_equals  uniq "," assignment_tokens  uniq ","processed_source processed_source ast  nil? "]}," RuboCop Cop Style EmptyLinesAroundBlockBody check":{"type":"method","name":"check","children":[],"call":[" check_source ","start_line == ","node loc end line ","node loc end ","node loc ","node loc begin line ","node loc begin "," style == "," style ","node loc begin line  == "]}," RuboCop Cop Style EmptyLinesAroundBlockBody on_block":{"type":"method","name":"on_block","children":[],"call":[" check "]}," RuboCop Cop Style EmptyElse case_else_clause":{"type":"method","name":"case_else_clause","children":[],"call":["node children last ","node children "]}," RuboCop Cop Style EmptyElse if_else_clause":{"type":"method","name":"if_else_clause","children":[],"call":["node children [] ","node children ","keyword is? ","node loc keyword ","node loc ","node loc keyword  is? ","node loc node loc keyword  "]}," RuboCop Cop Style EmptyElse check":{"type":"method","name":"check","children":[],"call":[" add_offense ","else_clause type != ","else_clause type ","node loc else ","node loc "," both_check "," nil_check "," empty_check "," style "," nil_style? "," empty_style? "," comment_in_else? "," cop_config [] "," cop_config "]}," RuboCop Cop Style EmptyElse on_case":{"type":"method","name":"on_case","children":[],"call":[" check "," case_else_clause "]}," RuboCop Cop Style EmptyElse on_normal_if_unless":{"type":"method","name":"on_normal_if_unless","children":[],"call":[" check "," if_else_clause "]}," RuboCop Cop Style ElseAlignment base_range":{"type":"method","name":"base_range","children":[],"call":["base loc keyword ","base loc ","base parent ","(str \"if\") include? ","base loc keyword source ","base loc expression ","base source_range ","(send\n  (lvar :lineage) :find) loc keyword ","(send\n  (lvar :lineage) :find) loc ","parent unless? ","parent if? ","lineage find ","node each_ancestor ","base parent  loc keyword ","base parent  loc ","base parent  parent ","base parent  loc keyword source ","base parent  loc expression ","base parent  source_range "]}," RuboCop Cop Style BracesAroundHashParameters check_context_dependent":{"type":"method","name":"check_context_dependent","children":[],"call":[" add_offense "," format "," braces? ","args [] type == ","args [] type ","args [] ","args length > ","args length ","arg loc expression ","arg loc ","arg parent ","arg source_range ","args [] hash_type? ","arg braces? ","args size > ","args size "," add_arg_offense "," braces_needed_for_semantics? "]}," RuboCop Cop Style AlignHash AlignmentOfValues all_have_same_separator?":{"type":"method","name":"all_have_same_separator?","children":[],"call":["pair loc operator is? ","pair loc operator ","pair loc ","node children [] all? ","node children [] ","node children ","node children first loc operator source ","node children first loc operator ","node children first loc ","node children first ","node children butfirst all? ","node children butfirst "]}," RuboCop Cop StringHelp inside_interpolation?":{"type":"method","name":"inside_interpolation?","children":[],"call":["a type == ","a type ","node each_ancestor find ","node each_ancestor ","node each_ancestor any? ","(send\n  (send\n    (lvar :node) :ancestors) :drop_while) any? ","a begin_type? ! ","a begin_type? ","node ancestors drop_while ","node ancestors ","a dsym_type? ","a dstr_type? ","a regexp_type? "]}," RuboCop Runner cop_match?":{"type":"method","name":"cop_match?","children":[],"call":["given_names include? ","cop cop_type to_s capitalize ","cop cop_type to_s ","cop cop_type ","cop cop_name "]}," RuboCop Runner check_for_infinite_loop":{"type":"method","name":"check_for_infinite_loop","children":[],"call":["@processed_sources << "," fail ","InfiniteCorrectionLoop  new ","processed_source path ","@processed_sources include? ","processed_source checksum "," raise ","@processed_sources index ","processed_source processed_source checksum  "]}," RuboCop Runner InfiniteCorrectionLoop initialize":{"type":"method","name":"initialize","children":[],"call":["(send\n  (send\n    (lvar :offenses_by_iteration) :[]\n    (irange\n      (lvar :loop_start)\n      (int -1))) :map) join ","x map uniq join ","x map uniq ","x map ","offenses_by_iteration [] map ","offenses_by_iteration [] ","offenses_by_iteration flatten uniq ","offenses_by_iteration flatten ","(send\n  (send\n    (lvar :offenses_by_iteration) :[]\n    (irange\n      (lvar :loop_start) nil)) :map) join "]}," RuboCop ProcessedSource checksum":{"type":"method","name":"checksum","children":[],"call":["Digest MD5  hexdigest ","Digest SHA1  hexdigest "]}," RuboCop Options add_cop_selection_csv_option":{"type":"method","name":"add_cop_selection_csv_option","children":[],"call":["@options []= ","Cop Cop  qualified_cop_name ","list split map ","list split "," option ","list empty? "," raise ","Cop Registry  qualified_cop_name ","cop_names unshift ","cop_names include? ! ","cop_names include? ","option == ","list split  unshift ","list split  include? ! ","list split  include? "]}," RuboCop Options validate_cop_list":{"type":"method","name":"validate_cop_list","children":[],"call":[]}," RuboCop Cop Util range_with_surrounding_comma":{"type":"method","name":"range_with_surrounding_comma","children":[],"call":["Parser Source Range  new ","src [] == ","src [] ","begin_pos - ","range end_pos ","range begin_pos ","side == ","buffer source ","@processed_source buffer "," move_pos "," directions ","buffer source  [] == ","buffer source  [] "," move_pos  - ","range begin_pos  - ","range  move_pos  ","range range end_pos  ","range range begin_pos  ","@processed_source buffer  source ","@processed_source @processed_source buffer  "]}," RuboCop Cop Style StructInheritance struct_constructor?":{"type":"method","name":"struct_constructor?","children":[],"call":["method_name == ","receiver children last == ","receiver children last ","receiver children ","receiver const_type? ","node send_type? ","send_node send_type? ","node children first ","node children ","node block_type? ","node children first  send_type? "]}," RuboCop Cop Style StructInheritance on_class":{"type":"method","name":"on_class","children":[],"call":[" add_offense ","superclass loc expression ","superclass loc "," struct_constructor? ","superclass source_range ","node parent_class source_range ","node parent_class "," correct_parent ","corrector replace ","node loc operator ","node loc ","corrector remove "," range_with_surrounding_space ","node loc keyword "]}," RuboCop Cop Style SpaceAroundBlockParameters autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector insert_after ","corrector remove ","range source "," lambda "]}," RuboCop Cop Style SpaceAroundBlockParameters check_no_space":{"type":"method","name":"check_no_space","children":[],"call":[" add_offense ","Parser Source Range  new "," processed_source buffer "," processed_source ","space_begin_pos >= "," range_between "," Parser Source Range  new _between ","  range_between _between "]}," RuboCop Cop Style SpaceAroundBlockParameters check_space":{"type":"method","name":"check_space","children":[],"call":[" add_offense ","space_begin_pos != "]}," RuboCop Cop Style SpaceAroundBlockParameters check_each_arg":{"type":"method","name":"check_each_arg","children":[],"call":[" check_no_space ","expr begin_pos - ","expr begin_pos "," range_with_surrounding_space begin_pos "," range_with_surrounding_space ","arg loc expression ","arg loc ","args children [] each ","args children [] ","args children ","arg source_range ","args children butfirst each ","args children butfirst ","arg loc expression  begin_pos - ","arg source_range  begin_pos - ","arg loc expression  begin_pos ","arg source_range  begin_pos ","arg loc arg loc expression ession ","arg loc arg source_range ession "]}," RuboCop Cop Style SpaceAroundBlockParameters check_inside_pipes":{"type":"method","name":"check_inside_pipes","children":[],"call":[" check_no_space ","closing_pipe begin_pos ","last end_pos + ","last end_pos ","first begin_pos - ","first begin_pos ","opening_pipe end_pos "," check_space "," style == "," style ","args last loc expression ","args last loc ","args last ","args first loc expression ","args first loc ","args first "," check_space_style_inside_pipes "," check_no_space_style_inside_pipes "]}," RuboCop Cop Style SpaceAroundBlockParameters parameter_name":{"type":"method","name":"parameter_name","children":[],"call":[]}," RuboCop Cop Style SpaceAroundBlockParameters on_block":{"type":"method","name":"on_block","children":[],"call":[" check_each_arg "," check_space ","body loc expression begin_pos ","body loc expression ","body loc ","closing_pipe end_pos "," check_inside_pipes ","args children ","args loc end ","args loc ","args loc begin ","args children empty? ! ","args children empty? ","body source_range begin_pos ","body source_range ","args loc end  end_pos "]}," RuboCop Cop Style SelfAssignment apply_autocorrect":{"type":"method","name":"apply_autocorrect","children":[],"call":["@corrections << ","corrector replace ","new_rhs loc expression source ","new_rhs loc expression ","new_rhs loc ","rhs loc expression ","rhs loc ","corrector insert_before ","node loc operator ","node loc "," lambda ","new_rhs source ","rhs source_range "]}," RuboCop Cop Style SelfAssignment autocorrect_boolean_node":{"type":"method","name":"autocorrect_boolean_node","children":[],"call":[" apply_autocorrect ","rhs loc operator source ","rhs loc operator ","rhs loc "]}," RuboCop Cop Style SelfAssignment autocorrect_send_node":{"type":"method","name":"autocorrect_send_node","children":[],"call":[" apply_autocorrect ","method_name to_s "]}," RuboCop Cop Style SelfAssignment autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" autocorrect_boolean_node ","(sym :and) include? ","rhs type "," autocorrect_send_node ","rhs type == ","rhs send_type? ","rhs operator_keyword? "]}," RuboCop Cop Style RedundantException autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace "," range_with_surrounding_space ","start_range join "," range_with_surrounding_comma ","node loc expression end ","node loc expression ","node loc ","node loc expression begin "," lambda ","node source_range end ","node source_range ","node source_range begin ","message source ","new_call source_range "," compact? "," exploded? ","node parenthesized? ","node loc expression begin  join ","node source_range begin  join "]}," RuboCop Cop Style MultilineBlockLayout block_arg_string":{"type":"method","name":"block_arg_string","children":[],"call":["(send\n  (send\n    (lvar :args) :children) :map) join ","a loc expression source ","a loc expression ","a loc ","args children map ","args children ","args children map join ","arg source "," block_arg_string ","arg mlhs_type? "]}," RuboCop Cop Style MultilineBlockLayout autocorrect_body":{"type":"method","name":"autocorrect_body","children":[],"call":["corrector insert_before ","  * ","first_node loc expression ","first_node loc ","node loc expression column ","node loc expression ","node loc ","block_body children first ","block_body children ","block_body type == ","block_body type ","first_node source_range ","node source_range column ","node source_range ","block_body begin_type? ","block_body children first  loc expression ","block_body children first  loc ","block_body children first  source_range "]}," RuboCop Cop Style MultilineBlockLayout autocorrect_arguments":{"type":"method","name":"autocorrect_arguments","children":[],"call":["corrector replace "," block_arg_string ","Parser Source Range  new ","node loc begin end begin_pos ","node loc begin end ","node loc begin ","node loc ","args loc expression source_buffer ","args loc expression ","args loc ","node loc end begin begin_pos - ","node loc end begin begin_pos ","node loc end begin ","node loc end ","block_body loc expression begin_pos ","block_body loc expression ","block_body loc ","args source_range source_buffer ","args source_range ","block_body source_range begin_pos ","block_body source_range "," range_with_surrounding_space end_pos "," range_with_surrounding_space "," range_between ","args source_Parser Source Range  new  source_buffer ","args source_ range_between  source_buffer ","args source_Parser Source Range  new  ","args source_ range_between  ","block_body source_Parser Source Range  new  begin_pos ","block_body source_ range_between  begin_pos ","block_body source_Parser Source Range  new  ","block_body source_ range_between  "," Parser Source Range  new _with_surrounding_space end_pos ","  range_between _with_surrounding_space end_pos "," range_with_surrounding_space node loc end begin begin_pos -  "," range_with_surrounding_space block_body loc expression begin_pos  "," range_with_surrounding_space block_body source_range begin_pos  "," range_with_surrounding_space  range_with_surrounding_space end_pos  "," Parser Source Range  new _with_surrounding_space ","  range_between _with_surrounding_space "," Parser Source Range  new _between ","  range_between _between "]}," RuboCop Cop Style MultilineBlockLayout add_offense_for_expression":{"type":"method","name":"add_offense_for_expression","children":[],"call":[" add_offense ","Parser Source Range  new ","expression end_pos ","expression begin_pos ","expression source_buffer ","expr loc expression ","expr loc ","expr source_range "," range_between ","expr loc expression  end_pos ","expr source_range  end_pos ","expr loc expression  begin_pos ","expr source_range  begin_pos ","expr loc expression  source_buffer ","expr source_range  source_buffer ","expr loc expr loc expression  ","expr loc expr source_range  ","expr source_Parser Source Range  new  ","expr source_ range_between  "," Parser Source Range  new _between ","  range_between _between "]}," RuboCop Cop Style LineEndConcatenation standard_string_literal?":{"type":"method","name":"standard_string_literal?","children":[],"call":["QUOTE_DELIMITERS  include? ","token text ","token type "]}," RuboCop Cop Style LineEndConcatenation token_after_last_string":{"type":"method","name":"token_after_last_string","children":[],"call":[" processed_source tokens [] "," processed_source tokens "," processed_source "," processed_source tokens [] type ","ends_to_find > ","successor type == ","successor type ","base_index + ","ends_to_find positive? ","base_base_index +  + "]}," RuboCop Cop Style LineEndConcatenation check_token_set":{"type":"method","name":"check_token_set","children":[],"call":[" add_offense ","operator pos ","HIGH_PRECEDENCE_OP_TOKEN_TYPES  include? ","next_successor type "," token_after_last_string ","operator pos line == ","successor pos line ","successor pos ","operator pos line "," standard_string_literal? ","CONCAT_TOKEN_TYPES  include? ","operator type "," processed_source tokens [] "," processed_source tokens "," processed_source "," eligible_next_successor? "," eligible_predecessor? "," eligible_operator? "," eligible_successor? ","operator line == ","successor line ","operator line "," eligible_token_set? "," autocorrect "," same_line? ","tokens [] ","index + ","tokens []  pos "," token_after_last_string  type ","next_tokens []  type ","tokens []  pos line == ","tokens []  pos line ","tokens []  type "," processed_source  processed_source tokens  [] "," processed_source  processed_source tokens  "," eligible_ token_after_last_string ? "," eligible_next_tokens [] ? "," eligible_tokens [] ? ","tokens []  line == ","tokens []  line "," processed_source tokens  [] "]}," RuboCop Cop Style LineEndConcatenation investigate":{"type":"method","name":"investigate","children":[],"call":[" check_token_set ","processed_source tokens each_index ","processed_source tokens "]}," RuboCop Cop Style Lambda lambda_arg_string":{"type":"method","name":"lambda_arg_string","children":[],"call":["(send\n  (send\n    (lvar :args) :children) :map) join ","a loc expression source ","a loc expression ","a loc ","args children map ","args children ","args children map join "]}," RuboCop Cop Style Lambda autocorrect_old_to_new":{"type":"method","name":"autocorrect_old_to_new","children":[],"call":["corrector remove ","corrector insert_after ","block_method loc expression ","block_method loc ","node loc begin end join ","args loc end ","args loc ","node loc begin end ","node loc begin ","node loc "," lambda_arg_string ","args children empty? ","args children ","corrector replace ","block_method source_range "]}," RuboCop Cop Style Lambda autocorrect_new_to_old":{"type":"method","name":"autocorrect_new_to_old","children":[],"call":["corrector insert_after ","node loc begin ","node loc ","corrector remove ","args loc expression ","args loc "," lambda_arg_string ","args children empty? ","args children ","corrector replace ","block_method loc expression ","block_method loc ","corrector insert_before "," needs_whitespace? ","args source_range ","block_method source_range "]}," RuboCop Cop Style Lambda autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << "," autocorrect_new_to_old "," autocorrect_old_to_new ","node loc expression source == ","node loc expression source ","node loc expression ","node loc "," lambda ","node ancestors first ","node ancestors ","block_method source == ","block_method source "," arg_to_unparenthesized_call? ","selector == "," autocorrect_literal_to_method "," autocorrect_method_to_literal ","LambdaLiteralToMethodCorrector  new ","node send_node source == ","node send_node source ","node send_node ","node node ancestors first s first ","node node ancestors first s ","block_method source  == "]}," RuboCop Cop Style Lambda add_offense_for_single_line":{"type":"method","name":"add_offense_for_single_line","children":[],"call":[" add_offense ","args children empty? ","args children "]}," RuboCop Cop Style FirstParameterIndentation previous_code_line":{"type":"method","name":"previous_code_line","children":[],"call":[" processed_source lines [] ","line_number - "," processed_source lines "," processed_source ","line =~ ","@comment_lines include? ","c loc line ","c loc ","(send\n  (send\n    (send nil :processed_source) :comments) :select) map "," begins_its_line? ","c loc expression "," processed_source comments select "," processed_source comments ","line blank? "," processed_source  processed_source lines [] s [] "," processed_source lines [] _number - "," processed_source  processed_source lines [] s "," processed_source lines []  =~ ","@comment_ processed_source lines [] s include? ","c loc  processed_source lines []  "," begins_its_ processed_source lines [] ? "," processed_source lines []  blank? "]}," RuboCop Cop Style FirstParameterIndentation column_of":{"type":"method","name":"column_of","children":[],"call":["range column "," previous_code_line =~ "," previous_code_line ","range line + + ","range line + ","source count ","range line ","source include? ","range source strip ","range source "," display_column ","range source strip  count ","range source strip  include? ","range range source strip  strip ","range range source strip  "]}," RuboCop Cop Style FirstParameterIndentation base_range":{"type":"method","name":"base_range","children":[],"call":["Parser Source Range  new ","arg_node loc expression begin_pos ","arg_node loc expression ","arg_node loc ","send_node loc expression begin_pos ","send_node loc expression ","send_node loc "," processed_source buffer "," processed_source ","arg_node source_range begin_pos ","arg_node source_range ","send_node source_range begin_pos ","send_node source_range "," range_between "]}," RuboCop Cop Style FirstParameterIndentation special_inner_call_indentation?":{"type":"method","name":"special_inner_call_indentation?","children":[],"call":["node loc expression begin_pos > ","parent loc expression begin_pos ","parent loc expression ","parent loc ","node loc expression begin_pos ","node loc expression ","node loc "," style == "," style "," parentheses? ! "," parentheses? ","method_name == ","parent send_type? ","node parent ","node source_range begin_pos > ","parent source_range begin_pos ","parent source_range ","node source_range begin_pos ","node source_range ","parent parenthesized? ! ","parent parenthesized? ","parent method? ! ","parent method? ","node parent  loc expression begin_pos ","node parent  loc expression ","node parent  loc "," node parent heses? ! "," node parent heses? ","node parent  send_type? ","node node parent  ","node parent  source_range begin_pos ","node parent  source_range ","node parent  node parent hesized? ! ","node parent  node parent hesized? ","node parent  method? ! ","node parent  method? "]}," RuboCop Cop Style FirstParameterIndentation message":{"type":"method","name":"message","children":[],"call":[" format ","text lines reverse_each first =~ ","text lines reverse_each first ","text lines reverse_each ","text lines "," special_inner_call_indentation? ","text !~ "," base_range source strip "," base_range source "," base_range ","arg_node parent ","arg_node nil? "," base_range source strip  lines reverse_each first =~ "," base_range source strip  lines reverse_each first "," base_range source strip  lines reverse_each "," base_range source strip  lines "," base_range source strip  !~ "]}," RuboCop Cop Style FirstParameterIndentation on_send":{"type":"method","name":"on_send","children":[],"call":[" check_alignment ","base_indentation + "," configured_indentation_width ","args first "," previous_code_line =~ "," previous_code_line ","args first loc line ","args first loc "," column_of "," base_range "," special_inner_call_indentation? "," operator? ","args empty? ","node first_argument "," base_indentation + "," base_indentation ","node operator_method? ","node arguments? ! ","node arguments? "," previous_code_line =~  + "," column_of  + ","base_ base_indentation + ation + "," configured_ base_indentation + ation_width "," special_inner_call_ base_indentation + ation? ","  previous_code_line =~  + ","  column_of  + "," base_ base_indentation + ation + ","  previous_code_line =~  ","  column_of  "," base_ base_indentation + ation "]}," RuboCop Cop Style EvenOdd expression":{"type":"method","name":"expression","children":[],"call":["node type == ","node type ","node children first ","node children ","node children size == ","node children size ","node send_type? ","node children one? ","node begin_type? ","node children first  type == ","node children first  type ","node children first  children first ","node children first  children ","node children first  children size == ","node children first  children size ","node children first  send_type? ","node children first  children one? ","node children first  begin_type? "]}," RuboCop Cop Style EvenOdd offense_type":{"type":"method","name":"offense_type","children":[],"call":["method == ","args == "," div_by_2? ","(sym :==) include? "," replacement_method "," equality_operator? "]}," RuboCop Cop Style EvenOdd base_number":{"type":"method","name":"base_number","children":[],"call":["node children [] loc expression source ","node children [] loc expression ","node children [] loc ","node children [] ","node children "," expression ","node children [] source ","node children first source ","node children first "," expression  children [] loc expression source "," expression  children [] loc expression "," expression  children [] loc "," expression  children [] "," expression  children "," expression  children [] source "," expression  children first source "," expression  children first "]}," RuboCop Cop Style EvenOdd autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","node loc expression ","node loc "," offense_type "," base_number "," lambda ","node source_range ","base_number source "," replacement_method "," even_odd_candidate? ","  replacement_method  "]}," RuboCop Cop Style EmptyLiteral first_arg_in_method_call_without_parentheses?":{"type":"method","name":"first_arg_in_method_call_without_parentheses?","children":[],"call":[" parentheses? ! "," parentheses? ","node parent ","node object_id == ","args first object_id ","args first ","node object_id ","node parent send_type? "]}," RuboCop Cop Style EmptyLinesAroundAccessModifier block_start?":{"type":"method","name":"block_start?","children":[],"call":["line match "]}," RuboCop Cop Rails ReadWriteAttribute write_attribute_replacement":{"type":"method","name":"write_attribute_replacement","children":[],"call":["value loc expression source ","value loc expression ","value loc ","name loc expression source ","name loc expression ","name loc ","value source ","name source ","node last_argument source ","node last_argument ","node first_argument source ","node first_argument "]}," RuboCop Cop Rails ReadWriteAttribute read_attribute_replacement":{"type":"method","name":"read_attribute_replacement","children":[],"call":["body loc expression source ","body loc expression ","body loc ","body source ","node first_argument source ","node first_argument "]}," RuboCop Cop Rails ReadWriteAttribute autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","node loc expression ","node loc "," lambda "," write_attribute_replacement "," read_attribute_replacement ","node source_range ","node method_name "," write_attribute_ write_attribute_replacement  "," write_attribute_ read_attribute_replacement  "," read_attribute_ write_attribute_replacement  "," read_attribute_ read_attribute_replacement  "]}," RuboCop Cop Rails Delegate on_def":{"type":"method","name":"on_def","children":[],"call":[" add_offense "," private_or_protected_delegation "," trivial_delegate? "]}," RuboCop Cop AccessModifierNode class_constructor?":{"type":"method","name":"class_constructor?","children":[],"call":["(str \"Class\") include? ","Util  const_name ","method_name == ","block_node children first ","block_node children "]}," RuboCop Cop AccessModifierNode class_or_module_parent?":{"type":"method","name":"class_or_module_parent?","children":[],"call":["(sym :casgn) include? ","a type ","a type != "," class_constructor? ","a type == ","node each_ancestor ","a class_constructor? ","ancestor type ","ancestor begin_type? ! ","ancestor begin_type? ","ancestor class_constructor? ","ancestor block_type? "]}," RuboCop Cop AccessModifierNode modifier_structure?":{"type":"method","name":"modifier_structure?","children":[],"call":["(const nil :PRIVATE_NODE) include? "," module_function_node? "," public_node? "," protected_node? "," private_node? "]}," RuboCop Cop Lint DuplicateMethods check_duplicate_methods":{"type":"method","name":"check_duplicate_methods","children":[],"call":[" add_offense "," format ","lines join ","nodes last ","node loc line ","node loc ","nodes map ","nodes size < ","nodes size ","dups each ","accum [] << ","item [] ","accum [] ","names each_with_object "]}," RuboCop Cop Lint DuplicateMethods method_names":{"type":"method","name":"method_names","children":[],"call":["(send\n  (send\n    (lvar :body) :child_nodes) :map) compact ","node defs_type? ","node def_type? ","body nil? ","node is_a? ","node send_type? ","body child_nodes map ","body child_nodes "]}," RuboCop Cop Lint DuplicateMethods on_module":{"type":"method","name":"on_module","children":[],"call":[" check_duplicate_methods "," method_names "," method_ method_names  "]}," RuboCop Cop Lint DuplicateMethods on_class":{"type":"method","name":"on_class","children":[],"call":[" check_duplicate_methods "," method_names "," method_ method_names  "]}," RuboCop Cop Lint BlockAlignment ancestor_on_same_line":{"type":"method","name":"ancestor_on_same_line","children":[],"call":["ancestor loc line == ","node loc line ","node loc ","ancestor loc line ","ancestor loc ","ancestor loc respond_to? ","node ancestors reverse find ","node ancestors reverse ","node ancestors "]}," RuboCop ConfigLoader load_yaml_configuration":{"type":"method","name":"load_yaml_configuration","children":[],"call":[" fail ","hash is_a? "," puts "," debug? ","YAML  load ","yaml_code =~ ","IO  read "," yaml_safe_load "," raise "," read_file "," check_duplication "," check_cop_config_value ","ERB  new result ","ERB  new ","Dir  chdir ","File  dirname ","YAML  load  is_a? "," yaml_safe_load  is_a? ","IO  read  =~ "," read_file  =~ "]}," RuboCop Runner inspect_files":{"type":"method","name":"inspect_files","children":[],"call":[" formatter_set close_output_files "," formatter_set "," formatter_set finished ","inspected_files freeze ","all_passed ! ","@options [] ","inspected_files << "," considered_failure? ","offenses any? "," process_file "," aborting? ","files each "," formatter_set started ","ResultCache  cleanup "," cached_run? "," each_inspected_file ","files size > ","files size "," process_file  any? "]}," Rubocop Cop WhenThen inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","t pos lineno ","t pos ","t type == ","t type ","(str \"then\") include? ","t text ","tokens [] each ","tokens [] ","t pos == ","tokens index "," all_positions [] "," all_positions ","s [] "," each "]}," Rubocop Cop UnlessElse inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence "," all_positions first lineno "," all_positions first "," all_positions ","s [] == ","s [] ","unless_sexp compact find ","unless_sexp compact "," each ","unless_sexp compact any? "]}," Rubocop Cop NestedTernaryOperator offends?":{"type":"method","name":"offends?","children":[],"call":["ifop flatten [] include? ","ifop flatten [] ","ifop flatten "]}," Rubocop Cop NestedTernaryOperator error_message":{"type":"method","name":"error_message","children":[],"call":["Ternary operators must not be nested. Prefer if/else constructs  + "]}," Rubocop Cop MultilineTernaryOperator offends?":{"type":"method","name":"offends?","children":[],"call":[" all_positions map uniq size > "," all_positions map uniq size "," all_positions map uniq "," all_positions map "," all_positions "]}," Rubocop Cop MultilineTernaryOperator error_message":{"type":"method","name":"error_message","children":[],"call":[]}," Rubocop Cop SpaceInsideBrackets check_extra":{"type":"method","name":"check_extra","children":[],"call":[" add_offence ","t pos lineno ","t pos ","prev_ns type != ","prev_ns type "," tokens_on_same_row? ","tokens [] "," previous_non_space ","prev type == ","prev type ","nxt type == ","nxt type ","t type ","tokens values_at ","ix + ","ix - "," previous_non_space  type != "," previous_non_space  type "]}," Rubocop Cop SpaceInsideParens check_extra":{"type":"method","name":"check_extra","children":[],"call":[" add_offence ","t pos lineno ","t pos ","prev_ns type != ","prev_ns type "," tokens_on_same_row? ","tokens [] "," previous_non_space ","prev type == ","prev type ","nxt type == ","nxt type ","t type ","tokens values_at ","ix + ","ix - "," previous_non_space  type != "," previous_non_space  type "]}," Rubocop Cop SpaceAroundBraces check_missing":{"type":"method","name":"check_missing","children":[],"call":[" add_offence ","t pos lineno ","t pos "," whitespace? ","tokens [] ","ix - "," surrounded_by_whitespace? ","t type ","tokens []  pos lineno ","tokens []  pos "," whitokens [] espace? ","tokens [] okens [] "," surrounded_by_whitokens [] espace? ","tokens []  tokens [] ype "]}," Rubocop Cop SpaceAroundBraces check_extra":{"type":"method","name":"check_extra","children":[],"call":[]}," Rubocop Cop SpaceAroundOperators check_extra":{"type":"method","name":"check_extra","children":[],"call":[" add_offence ","t text ","t pos lineno ","t pos "," whitespace? ","t text == ","t type == ","t type ","tokens values_at ","ix + ","ix - "]}," Rubocop Cop SpaceAroundOperators check_missing":{"type":"method","name":"check_missing","children":[],"call":[" add_offence ","ERROR_MESSAGE  + ","t text ","t pos lineno ","t pos "," ok_without_spaces? "," surrounded_by_whitespace? ","tokens [] ","ix - ","t type == ","t type ","tokens []  tokens [] extokens []  ","tokens []  pos lineno ","tokens []  pos "," ok_witokens [] houtokens [] _spaces? "," surrounded_by_whitokens [] espace? ","tokens [] okens [] ","tokens []  tokens [] ype == ","tokens []  tokens [] ype "]}," Rubocop Cop SurroundingSpace check_missing":{"type":"method","name":"check_missing","children":[],"call":[]}," Rubocop Cop SpaceAfterColon kind":{"type":"method","name":"kind","children":[],"call":["token text == ","token text ","token type "]}," Rubocop Cop SpaceAfterSemicolon kind":{"type":"method","name":"kind","children":[],"call":["token type == ","token type "]}," Rubocop Cop SpaceAfterComma kind":{"type":"method","name":"kind","children":[],"call":["token type == ","token type "]}," Rubocop Cop OneLineConditional error_message":{"type":"method","name":"error_message","children":[],"call":[]}," Rubocop Cop MultilineIfThen error_message":{"type":"method","name":"error_message","children":[],"call":[]}," Rubocop Cop IfWithSemicolon error_message":{"type":"method","name":"error_message","children":[],"call":[]}," Rubocop Cop DefWithoutParentheses check":{"type":"method","name":"check","children":[],"call":[" add_offence "," error_message ","def_sexp [] [] lineno ","def_sexp [] [] ","def_sexp [] ","def_sexp [] != ","def_sexp [] [] == "]}," Rubocop Cop DefWithoutParentheses error_message":{"type":"method","name":"error_message","children":[],"call":[]}," Rubocop Cop DefWithParentheses check":{"type":"method","name":"check","children":[],"call":[" add_offence "," error_message ","pos lineno ","first_body_token pos lineno > ","first_body_token pos lineno ","first_body_token pos "," whitespace? ! "," whitespace? ","tokens [] find ","tokens [] ","rparen_ix + ","start + ","t text == ","t text ","tokens [] index ","method_name_ix + ","t pos == ","t pos ","tokens index ","def_sexp [] [] ","def_sexp [] ","def_sexp [] [] == ","def_sexp [] []  lineno ","first_body_token def_sexp [] []  lineno > ","first_body_token def_sexp [] []  lineno ","first_body_token def_sexp [] []  ","start +  + ","method_name_ix +  + ","t def_sexp [] []  == ","t def_sexp [] []  "]}," Rubocop Cop DefWithParentheses error_message":{"type":"method","name":"error_message","children":[],"call":["Omit the parentheses in defs when the method doesn't accept any  + "]}," Rubocop Cop Cop all_positions":{"type":"method","name":"all_positions","children":[],"call":["memo + "," all_positions ","sexp grep inject ","sexp grep ","sexp [] ","sexp [] =~ ","sexp grep reduce ","a + "]}," Rubocop Cop SingleLineBlocks check":{"type":"method","name":"check","children":[],"call":[" add_offence ","t pos lineno ","t pos ","tokens [] pos lineno == ","tokens [] pos lineno ","tokens [] pos ","tokens [] ","ix + ","t2 text == ","t2 text ","tokens [] index ","(send\n  (lvar :t) :type) == ","t text ","t type ","tokens []  pos lineno ","tokens []  pos ","tokens [] okens [] pos lineno == ","tokens [] okens [] pos lineno ","tokens [] okens [] pos ","tokens [] okens [] ","tokens [] 2 tokens [] extokens []  == ","tokens [] 2 tokens [] extokens []  ","tokens [] okens [] index ","(send\n  (lvar :tokens [] ) :tokens [] ype) == ","tokens []  tokens [] extokens []  ","tokens []  tokens [] ype "]}," Rubocop Cop MultilineBlocks check":{"type":"method","name":"check","children":[],"call":[" add_offence ","t pos lineno ","t pos ","tokens [] pos lineno > ","tokens [] pos lineno ","tokens [] pos ","tokens [] "," fail ","(str \"\\n\") + ","t pos column ","rbrace_ix empty? ","@reverse_correlations [] - ","@reverse_correlations [] ","path object_id ","path last == ","path last ","@correlations [] ","(send\n  (lvar :t) :type) == ","t text ","t type ","tokens []  pos lineno ","tokens []  pos ","tokens [] okens [] pos lineno > ","tokens [] okens [] pos lineno ","tokens [] okens [] pos ","tokens [] okens [] ","(stokens [] r \"\\n\") + ","tokens []  pos column ","@reverse_correlations [] -  empty? ","rbrace_ix emptokens [] y? ","@reverse_correlatokens [] ions [] - ","@reverse_correlatokens [] ions [] ","@correlations []  object_id ","patokens [] h objectokens [] _id ","@correlations []  last == ","patokens [] h lastokens []  == ","@correlations []  last ","patokens [] h lastokens []  ","@correlatokens [] ions [] ","(send\n  (lvar :tokens [] ) :tokens [] ype) == ","tokens []  tokens [] extokens []  ","tokens []  tokens [] ype "]}," Rubocop Cop AmpersandsPipesVsAndOr check":{"type":"method","name":"check","children":[],"call":[" add_offence ","sub_sexp flatten grep first lineno ","sub_sexp flatten grep first ","sub_sexp flatten grep ","sub_sexp flatten ","(sym :and) include? ","condition [] ","condition [] == ","sub_sexp [] "," each ","sub_sexp []  [] ","sub_sexp []  [] == "]}," Rubocop Cop AmpersandsPipesVsAndOr inspect":{"type":"method","name":"inspect","children":[],"call":[" check ","(sym :if) each "]}," Rubocop CLI config_from_dotfile":{"type":"method","name":"config_from_dotfile","children":[],"call":["@configs [] ","@configs []= ","YAML  load_file ","File  exist? ","File  join ","Dir  home ","File  expand_path ","dir != ","File  expand_File  join  ","File  expand_path  != "]}," Rubocop Cop LineLength max":{"type":"method","name":"max","children":[],"call":[]}," Rubocop Cop WhileUntilModifier inspect":{"type":"method","name":"inspect","children":[],"call":[" check ","(sym :while) each "," add_offence ","node loc line ","node loc "," on_node ","node loc end "]}," Rubocop Cop WhileUntilModifier error_message":{"type":"method","name":"error_message","children":[],"call":[]}," Rubocop Cop IfUnlessModifier inspect":{"type":"method","name":"inspect","children":[],"call":[" check ","(sym :if) each "]}," Rubocop Cop IfUnlessModifier error_message":{"type":"method","name":"error_message","children":[],"call":["Favor modifier if/unless usage when you have a single-line body.  + "]}," Rubocop Cop FavorModifier length":{"type":"method","name":"length","children":[],"call":["acc + ","tokens [] text length ","tokens [] text ","tokens [] ","tokens [] text =~ ","ix - ","ix > ","(irange\n  (lvar :start_ix)\n  (lvar :stop_ix)) inject ","(irange\n  (lvar :start_ix)\n  (lvar :stop_ix)) reduce ","sexp loc expression source split size ","sexp loc expression source split ","sexp loc expression source ","sexp loc expression ","sexp loc ","sexp loc expression source lines to_a size ","sexp loc expression source lines to_a ","sexp loc expression source lines "]}," Rubocop Cop FavorModifier check":{"type":"method","name":"check","children":[],"call":[" add_offence "," error_message ","token_positions [] lineno ","token_positions [] "," length <= ","LineLength  max "," length ","tokens [] text !~ ","tokens [] text ","tokens [] ","(send\n  (lvar :end_ix) :-\n  (int 1)) downto find ","(send\n  (lvar :end_ix) :-\n  (int 1)) downto ","end_ix - ","tokens [] text =~ ","ix - ","ix == ","if_ix downto find ","if_ix downto ","token_positions [] lineno - > ","token_positions [] lineno - ","tokens [] map include? ","tokens [] map ","ix + ","token_texts [] index ","token_texts [] ","token_positions index ","sexp_positions last ","token_texts [] rindex ","kind to_s ","sexp_positions first "," all_positions ","s [] [] == ","s [] [] ","s [] "," each ","tokens map ","block_ix - ","block_ix == ","(send\n  (lvar :cond_length) :+\n  (lvar :body_length)) <= ","cond_length + "," body_length ","sexp loc keyword size + + ","sexp loc keyword size + ","cond loc expression size ","cond loc expression ","cond loc ","sexp loc keyword size ","sexp loc keyword ","sexp loc "," length > ","(str \"if\") include? ","sexp loc keyword source ","sexp loc else ","sexp loc respond_to? ","body_length > ","sexp loc end ! ","sexp loc end ","(sym :while) include? ","sexp type ","(send\n  (send\n    (lvar :indentation) :+\n    (lvar :cond_length)) :+\n  (lvar :body_length)) <= ","indentation + + ","indentation + ","sexp loc keyword column ","tokens map  [] lineno ","tokens map  [] ","(send\n  (lvar :ix + ) :-\n  (int 1)) downto find ","(send\n  (lvar :end_token_positions index ) :-\n  (int 1)) downto find ","(send\n  (lvar :ix + ) :-\n  (int 1)) downto ","(send\n  (lvar :end_token_positions index ) :-\n  (int 1)) downto ","ix +  - ","end_token_positions index  - ","token_positions index  - ","token_positions index  == ","if_token_positions index  downto find ","token_texts [] rindex  downto find ","if_token_positions index  downto ","token_texts [] rindex  downto ","tokens map  [] lineno - > ","tokens map  [] lineno - ","token_positions index  + ","tokens map  [] index ","tokens map  index "," all_positions  last ","tokens map  [] rindex "," all_positions  first ","block_token_positions index  - ","block_token_positions index  == ","(send\n  (lvar :cond_length) :+\n  (lvar : body_length )) <= ","(send\n  (lvar :sexp loc keyword size + + ) :+\n  (lvar :body_length)) <= ","sexp loc keyword size + +  + ","  body_length  "," body_length  > ","(send\n  (send\n    (lvar :indentation) :+\n    (lvar :cond_length)) :+\n  (lvar : body_length )) <= ","(send\n  (send\n    (lvar :indentation) :+\n    (lvar :sexp loc keyword size + + )) :+\n  (lvar :body_length)) <= ","(send\n  (send\n    (lvar :sexp loc keyword column ) :+\n    (lvar :cond_length)) :+\n  (lvar :body_length)) <= ","sexp loc keyword column  + + ","sexp loc keyword column  + "]}," Rubocop Report Report entries":{"type":"method","name":"entries","children":[],"call":["@entries sort_by "]}," Rubocop Cop SpaceAroundEqualsInParameterDefault inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","Surrounding space missing in default value  + ","param [] lineno ","param [] ","value_pos column - <= ","value_pos column - ","param [] column + ","param [] length ","param [] column ","value_pos column ","param [] lineno == ","value_pos lineno "," all_positions first "," all_positions ","(or\n  (send\n    (lvar :s) :[]\n    (int 2))\n  (array)) each ","s [] "," each "," whitespace? ","tokens [] ","ix + ","t pos == ","t pos ","tokens index ","param last ","equals pos line ","equals pos "," space_between? "," index_of_first_token "," on_node "," all_positions first  column - <= "," all_positions first  column - "," all_positions first  column "," all_positions first  lineno "]}," Rubocop Cop SpaceInsideBrackets get_paren":{"type":"method","name":"get_paren","children":[],"call":["Paren  new "]}," Rubocop Cop SpaceInsideParens get_paren":{"type":"method","name":"get_paren","children":[],"call":["Paren  new "]}," Rubocop Cop SpaceInside check_unwanted_space":{"type":"method","name":"check_unwanted_space","children":[],"call":[" add_offence ","paren kind ","t pos lineno ","t pos ","prev_ns type != ","paren left ","prev_ns type ","prev_ns pos lineno == ","tokens [] pos lineno ","tokens [] pos ","tokens [] ","prev_ns pos lineno ","prev_ns pos "," previous_non_space ","prev type == ","prev type ","paren right ","nxt type == ","nxt type ","t type ","tokens values_at ","ix + ","ix - "," get_paren "," get_paren  kind "," previous_non_space  type != "," get_paren  left "," previous_non_space  type "," previous_non_space  pos lineno == "," previous_non_space  pos lineno "," previous_non_space  pos "," get_paren  right "," get_ get_paren  "]}," Rubocop Cop SpaceAroundBraces check_missing_space":{"type":"method","name":"check_missing_space","children":[],"call":[" add_offence ","t pos lineno ","t pos "," whitespace? ","tokens [] ","ix - "," surrounded_by_whitespace? ","t type ","grammar_path last == ","grammar_path last ","tokens []  pos lineno ","tokens []  pos "," whitokens [] espace? ","tokens [] okens [] "," surrounded_by_whitokens [] espace? ","tokens []  tokens [] ype ","grammar_patokens [] h lastokens []  == ","grammar_patokens [] h lastokens []  "]}," Rubocop Cop SpaceAroundBraces check_unwanted_space":{"type":"method","name":"check_unwanted_space","children":[],"call":[]}," Rubocop Cop SpaceAroundOperators check_unwanted_space":{"type":"method","name":"check_unwanted_space","children":[],"call":[" add_offence ","t text ","t pos lineno ","t pos "," whitespace? ","t text == ","t type == ","t type ","tokens values_at ","ix + ","ix - "]}," Rubocop Cop SpaceAroundOperators check_missing_space":{"type":"method","name":"check_missing_space","children":[],"call":[" add_offence ","ERROR_MESSAGE  + ","t text ","t pos lineno ","t pos "," ok_without_spaces? "," surrounded_by_whitespace? ","tokens [] ","ix - ","t type == ","t type ","MSG_MISSING  % ","token pos line ","token pos ","token text to_s + ","token type == ","token type ","token text to_s ","token text "," has_space? ","tokens []  tokens [] extokens []  ","t token text to_s +  ","tokens []  pos lineno ","tokens []  pos "," ok_witokens [] houtokens [] _spaces? "," surrounded_by_whitokens [] espace? ","tokens [] okens [] ","tokens []  tokens [] ype == ","tokens []  tokens [] ype ","tokens [] oken pos line ","tokens [] oken pos ","tokens [] oken tokens [] extokens []  tokens [] o_s + ","token token text to_s +  to_s + ","tokens [] oken tokens [] ype == ","tokens [] oken tokens [] ype ","tokens [] oken tokens [] extokens []  tokens [] o_s ","token token text to_s +  to_s ","tokens [] oken tokens [] extokens []  ","token token text to_s +  "]}," Rubocop Cop SurroundingSpace check_missing_space":{"type":"method","name":"check_missing_space","children":[],"call":[]}," Rubocop Cop ParenthesesAroundCondition inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","positions first lineno ","positions first ","positions first lineno == ","positions last lineno ","positions last "," all_positions ","s [] ","s [] [] [] [] != ","s [] [] [] [] ","s [] [] [] ","s [] [] ","s [] [] == "," each ","(sym :if) each ","cond loc line ","cond loc ","cond_source end_with? ","cond_source start_with? ","cond loc expression source ","cond loc expression "," on_node "," all_positions  first lineno "," all_positions  first "," all_positions  first lineno == "," all_positions  last lineno "," all_positions  last "," all_ all_positions  ","cond loc expression source  end_with? ","cond loc expression source  start_with? "]}," Rubocop Cop NewLambdaLiteral inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","s [] [] lineno ","s [] [] ","s [] ","s [] [] == "," each "]}," Rubocop Cop MethodAndVariableSnakeCase check":{"type":"method","name":"check","children":[],"call":[" add_offence ","sexp [] lineno ","sexp [] ","sexp [] !~ ","(sym :@ivar) include? ","pos lineno ","name !~ "]}," Rubocop Cop MethodAndVariableSnakeCase inspect":{"type":"method","name":"inspect","children":[],"call":[" check ","s [] [] ","s [] ","s [] [] [] [] == ","s [] [] [] [] ","s [] [] [] ","s [] [] [] == "," each ","s [] [] [] =~ "," add_offence ","n location line ","n location ","OPERATOR_METHODS  include? ","name =~ "," name_of_setter "," name_of_variable "," name_of_singleton_method "," name_of_instance_method ","n type "," on_node "]}," Rubocop Cop FavorUntilOverNegatedWhile inspect":{"type":"method","name":"inspect","children":[],"call":[" check ","(sym :while) each "]}," Rubocop Cop FavorUntilOverNegatedWhile error_message":{"type":"method","name":"error_message","children":[],"call":[]}," Rubocop Cop FavorUnlessOverNegatedIf inspect":{"type":"method","name":"inspect","children":[],"call":[" check ","(sym :if) each "]}," Rubocop Cop FavorUnlessOverNegatedIf error_message":{"type":"method","name":"error_message","children":[],"call":[]}," Rubocop Cop FavorOtherKeywordOverNegation check":{"type":"method","name":"check","children":[],"call":[" add_offence "," error_message "," all_positions first lineno "," all_positions first "," all_positions ","(sym :!) include? ","condition [] ","condition [] == ","condition [] [] ","s [] ","(sym :else) include? ","s [] [] "," each ","node loc expression line ","node loc expression ","node loc ","(and\n  (send\n    (send\n      (lvar :node) :loc) :respond_to?\n    (sym :else))\n  (send\n    (send\n      (lvar :node) :loc) :else)) ! ","node loc else ","node loc respond_to? ","method == ","condition type == ","condition type ","condition [] []  [] ","s []  [] ","condition [] []  [] == ","s []  [] == ","condition [] []  [] [] ","s []  [] [] ","condition [] []  type == ","s []  type == ","condition [] []  type ","s []  type "]}," Rubocop Cop ClassAndModuleCamelCase inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","s [] [] [] lineno ","s [] [] [] ","s [] [] ","s [] ","s [] [] [] =~ ","s [] [] [] == ","s [] [] == "," each ","(sym :class) each "]}," RuboCop PathUtil hidden?":{"type":"method","name":"hidden?","children":[],"call":["path_component =~ "]}," RuboCop Formatter HTMLFormatter ERBContext escape":{"type":"method","name":"escape","children":[],"call":["CGI  escapeHTML gsub ","CGI  escapeHTML "]}," RuboCop Cop VariableForce process_send":{"type":"method","name":"process_send","children":[],"call":["variable reference! "," variable_table accessible_variables each "," variable_table accessible_variables "," variable_table ","args children empty? ! ","args children empty? ","args children ","method_name == "]}," RuboCop Cop Util directions":{"type":"method","name":"directions","children":[],"call":["side == "]}," RuboCop Cop Util move_pos":{"type":"method","name":"move_pos","children":[],"call":["src [] =~ ","src [] ","pos + ","step == ","pos < "]}," RuboCop Cop Style WhileUntilModifier autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","node loc expression ","node loc ","(dstr\n  (begin\n    (send\n      (send\n        (send\n          (lvar :body) :loc) :expression) :source))\n  (str \" \")) + ","cond loc expression source ","cond loc expression ","cond loc ","node loc keyword source ","node loc keyword ","body loc expression source ","body loc expression ","body loc "," lambda ","node source_range ","(begin\n  (send\n    (lvar :body) :source)) + ","cond source ","body source ","node condition source ","node condition ","node keyword ","node body source ","node body "]}," RuboCop Cop Style TrivialAccessors ignore_class_methods?":{"type":"method","name":"ignore_class_methods?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style TrivialAccessors on_defs":{"type":"method","name":"on_defs","children":[],"call":[" on_method_def "," ignore_class_methods? "," in_module? "," in_module_or_instance_eval? "]}," RuboCop Cop Style TrivialAccessors on_def":{"type":"method","name":"on_def","children":[],"call":[" on_method_def "," in_module? "," in_module_or_instance_eval? ","node defs_type? "," ignore_class_methods? "," top_level_node? "]}," RuboCop Cop Style SymbolLiteral autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","current_name gsub ","node loc expression ","node loc ","node loc expression source "," lambda ","current_name delete ","node source delete ","node source ","node source_range ","node loc expression source  gsub ","node loc expression source  delete "]}," RuboCop Cop Style SymbolLiteral on_sym":{"type":"method","name":"on_sym","children":[],"call":[" add_offense ","sym_name =~ ","node loc expression source ","node loc expression ","node loc ","node source =~ ","node source ","(str \"\\\\A:[\\\"'][A-Za-z_]\\\\w*[\\\"']\\\\z\") match? ","corrector replace ","node source delete ","node loc expression source  =~ "]}," RuboCop Cop Style SpaceAroundOperators multi_space_operator?":{"type":"method","name":"multi_space_operator?","children":[],"call":["op is? "," cop_config [] any? "," cop_config [] "," cop_config "]}," RuboCop Cop Style RegexpLiteral autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","replacement last ","node loc end ","node loc ","replacement first ","node loc begin "," lambda ","(str \"%r\") zip map ","(str \"%r\") zip "," preferred_delimiters "," slash_literal? "," fail "," contains_slash? "," correct_inner_slashes "," correct_delimiters ","(str \"%r\") zip map  last ","(str \"%r\") zip map  first "]}," RuboCop Cop Style RegexpLiteral preferred_delimiters":{"type":"method","name":"preferred_delimiters","children":[],"call":[" config for_cop [] [] split "," config for_cop [] [] "," config for_cop [] "," config for_cop "," config "," config for_cop [] [] chars "]}," RuboCop Cop Style RegexpLiteral multi_line?":{"type":"method","name":"multi_line?","children":[],"call":[" block_length > "," block_length "]}," RuboCop Cop Style RegexpLiteral single_line?":{"type":"method","name":"single_line?","children":[],"call":[" multi_line? ! "," multi_line? "]}," RuboCop Cop Style RegexpLiteral slash_literal?":{"type":"method","name":"slash_literal?","children":[],"call":["node loc begin source == ","node loc begin source ","node loc begin ","node loc "]}," RuboCop Cop Style RegexpLiteral node_body":{"type":"method","name":"node_body","children":[],"call":["(send\n  (lvar :string_parts) :map) join ","s loc expression source ","s loc expression ","s loc ","string_parts map ","child type == ","child type ","node children select ","node children ","string_parts map join ","node each_child_node map join ","node each_child_node map ","node each_child_node "]}," RuboCop Cop Style RegexpLiteral allow_inner_slashes?":{"type":"method","name":"allow_inner_slashes?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style RegexpLiteral contains_slash?":{"type":"method","name":"contains_slash?","children":[],"call":[" node_body include? "," node_body "]}," RuboCop Cop Style RegexpLiteral contains_disallowed_slash?":{"type":"method","name":"contains_disallowed_slash?","children":[],"call":[" contains_slash? "," allow_inner_slashes? ! "," allow_inner_slashes? "]}," RuboCop Cop Style RegexpLiteral check_percent_r_literal":{"type":"method","name":"check_percent_r_literal","children":[],"call":[" add_offense "," contains_disallowed_slash? "," style == "," style "," multi_line? ","node multiline? "," allowed_percent_r_literal? "]}," RuboCop Cop Style RegexpLiteral check_slash_literal":{"type":"method","name":"check_slash_literal","children":[],"call":[" add_offense "," contains_disallowed_slash? ! "," contains_disallowed_slash? "," single_line? "," style == "," style ","node single_line? "," allowed_slash_literal? "]}," RuboCop Cop Style MissingElse check":{"type":"method","name":"check","children":[],"call":[" add_offense "," format ","node type ","empty_else [] "," config for_cop "," config ","node loc else ","node loc "," empty_else_style == "," empty_else_style "," empty_else_cop_enabled? ","node else? "," message_template "," autocorrect "," config for_cop  [] ","  config for_cop _style == ","  config for_cop _style ","  config for_cop _cop_enabled? "]}," RuboCop Cop Style MissingElse on_case":{"type":"method","name":"on_case","children":[],"call":[" check "," case_else_clause "," style == "," style "," if_style? "]}," RuboCop Cop Style MissingElse on_normal_if_unless":{"type":"method","name":"on_normal_if_unless","children":[],"call":[" check "," if_else_clause "," style == "," style ","node loc keyword is? ","node loc keyword ","node loc ","unless_else_cop [] "," config for_cop "," config ","node unless? "," unless_else_cop_enabled? "," case_style? "," config for_cop  [] ","  config for_cop _enabled? "]}," RuboCop Cop Style Lambda needs_whitespace?":{"type":"method","name":"needs_whitespace?","children":[],"call":["block_begin == ","selector_end == ","node loc begin begin_pos ","node loc begin ","node loc ","args loc end end_pos ","args loc end ","args loc ","args loc begin begin_pos ","args loc begin ","block_method loc selector end end_pos ","block_method loc selector end ","block_method loc selector ","block_method loc "," begin_pos "," end_pos ","node loc begin begin_pos  == ","block_method loc selector end end_pos  == "]}," RuboCop Cop Style Lambda correction":{"type":"method","name":"correction","children":[],"call":[" autocorrect_new_to_old "," autocorrect_old_to_new ","block_method loc expression source == ","block_method loc expression source ","block_method loc expression ","block_method loc "," lambda ","block_method source == ","block_method source "]}," RuboCop Cop Style IndentationWidth offending_range":{"type":"method","name":"offending_range","children":[],"call":["Parser Source Range  new ","pos end ","pos begin ","expr source_buffer ","indentation >= ","expr begin_pos - ","expr begin_pos ","body_node loc expression ","body_node loc ","body_node source_range "," range_between ","body_node loc expression  source_buffer ","body_node source_range  source_buffer ","expr begin_pos - entation >= ","body_node loc expression  begin_pos - ","body_node source_range  begin_pos - ","expr expr begin_pos  - ","body_node loc expression  begin_pos ","body_node source_range  begin_pos ","expr expr begin_pos  ","body_node loc body_node loc expression ession ","body_node loc body_node source_range ession "]}," RuboCop Cop Style IndentationWidth check_members":{"type":"method","name":"check_members","children":[],"call":[" check_indentation ","previous_modifier loc expression ","previous_modifier loc ","special include? ","m loc expression source ","m loc expression ","m loc "," modifier_node? ","members first children each ","members first children ","members first ","style == "," config for_cop [] "," config for_cop "," config ","members first begin_type? ","members any? ","node loc keyword ","node loc ","previous_modifier source_range ","m source "," indentation_consistency_style "," each_member "," indentation_consistency_style == "," config for_cop []  == "," indentation_consistency_ config for_cop []  "," indentation_consistency_ config for_cop []  == "]}," RuboCop Cop Style IfUnlessModifier autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","node loc expression ","node loc ","(dstr\n  (begin\n    (send\n      (send\n        (send\n          (lvar :body) :loc) :expression) :source))\n  (str \" \")) + ","cond loc expression source ","cond loc expression ","cond loc ","node loc keyword source ","node loc keyword ","body loc expression source ","body loc expression ","body loc "," lambda ","node loc keyword source == ","oneline << << ","first_line_comment loc expression source ","first_line_comment loc expression ","first_line_comment loc ","oneline << ","c loc line == ","node loc line ","c loc line ","c loc "," processed_source comments find "," processed_source comments "," processed_source ","(begin\n  (send\n    (send\n      (send\n        (lvar :body) :loc) :expression) :source)) + ","node loc keyword is? "," if_node_parts "," parenthesize? ","node source_range ","(begin\n  (send\n    (lvar :body) :source)) + ","cond source ","body source "," oneline "," to_modifier_form "," to_normal_form ","node modifier_form? "," to_normal_form_with_heredoc "," remove_heredoc "," extract_heredoc_from ","last_argument heredoc? ","last_argument respond_to? ","node if_branch last_argument ","node if_branch ","  * ","node source_range column "," indent ","node if_branch send_type? "," replacement_for_modifier_form ","(dstr\n  (begin\n    (send\n      (send\n        (send\n          (lvar :body) :loc) :expression) :source))\n  (str \" \")) +  << << ","(begin\n  (send\n    (send\n      (send\n        (lvar :body) :loc) :expression) :source)) +  << << ","(begin\n  (send\n    (lvar :body) :source)) +  << << ","(dstr\n  (begin\n    (send\n      (send\n        (send\n          (lvar :body) :loc) :expression) :source))\n  (str \" \")) +  << ","(begin\n  (send\n    (send\n      (send\n        (lvar :body) :loc) :expression) :source)) +  << ","(begin\n  (send\n    (lvar :body) :source)) +  << "," (dstr\n  (begin\n    (send\n      (send\n        (send\n          (lvar :body) :loc) :expression) :source))\n  (str \" \")) +  "," (begin\n  (send\n    (send\n      (send\n        (lvar :body) :loc) :expression) :source)) +  "," (begin\n  (send\n    (lvar :body) :source)) +  "," to_normal_form_with_ extract_heredoc_from  "," remove_ extract_heredoc_from  "," extract_ extract_heredoc_from _from ","last_argument  extract_heredoc_from ? ","node if_branch last_argument  heredoc? ","node if_branch last_argument  respond_to? ","node if_branch node if_branch last_argument  ","  to_modifier_form _for_modifier_form ","  to_normal_form _for_modifier_form ","  replacement_for_modifier_form _for_modifier_form "]}," RuboCop Cop Style HashSyntax autocorrect_ruby19_no_mixed_keys":{"type":"method","name":"autocorrect_ruby19_no_mixed_keys","children":[],"call":[" autocorrect_ruby19 "," autocorrect_hash_rockets ","op is? ","node loc operator ","node loc ","node loc operator  is? ","node loc node loc operator erator "]}," RuboCop Cop Style HashSyntax autocorrect_hash_rockets":{"type":"method","name":"autocorrect_hash_rockets","children":[],"call":["corrector remove "," range_with_surrounding_space ","corrector insert_before ","corrector insert_after ","node loc operator ","node loc ","node children first loc expression ","node children first loc ","node children first ","node children ","node children first source_range ","node inverse_delimiter ","pair_node inverse_delimiter ","pair_node loc operator ","pair_node loc ","pair_node key source_range ","pair_node key ","corrector wrap ","corrector replace ","pair_node key source ","pair_node value_omission? ","node loc node loc operator erator ","node loc pair_node loc operator erator ","pair_node loc node loc operator erator ","pair_node loc pair_node loc operator erator ","pair_node node children first loc expression  source_range ","pair_node node children first source_range  source_range ","pair_node pair_node key source_range  source_range ","pair_node node children first loc expression  ","pair_node node children first source_range  ","pair_node pair_node key source_range  ","pair_node node children first loc expression  source ","pair_node node children first source_range  source ","pair_node pair_node key source_range  source "]}," RuboCop Cop Style HashSyntax autocorrect_ruby19":{"type":"method","name":"autocorrect_ruby19","children":[],"call":["corrector replace ","range source sub ","range source "," range_with_surrounding_space ","Parser Source Range  new ","op end_pos ","key begin_pos ","key source_buffer ","node loc operator ","node loc ","node children first loc expression ","node children first loc ","node children first ","node children ","node children first source_range "," range_between "," argument_without_space? ","pair_node parent ","key source ","key value ","key sym_type? ","key source_range begin_pos ","key source_range ","pair_node loc operator ","pair_node loc ","pair_node key ","space to_s + ","space to_s ","key join ","pair_node key source_range ","corrector wrap ","hash_node braces? ! ","hash_node braces? ","hash_node parent "," range_for_autocorrect_ruby19 "," range_with_surrounding_space  source sub ","Parser Source Range  new  source sub "," range_between  source sub ","key join  source sub "," range_for_autocorrect_ruby19  source sub "," range_with_surrounding_space  source ","Parser Source Range  new  source "," range_between  source ","key join  source "," range_for_autocorrect_ruby19  source ","  range_with_surrounding_space _with_surrounding_space "," Parser Source Range  new _with_surrounding_space ","  range_between _with_surrounding_space "," key join _with_surrounding_space ","  range_for_autocorrect_ruby19 _with_surrounding_space ","node loc operator  end_pos ","pair_node loc operator  end_pos ","node children first loc expression  begin_pos ","node children first source_range  begin_pos ","pair_node key  begin_pos ","pair_node key source_range  begin_pos ","node children first loc expression  source_buffer ","node children first source_range  source_buffer ","pair_node key  source_buffer ","pair_node key source_range  source_buffer ","node loc node loc operator erator ","node loc pair_node loc operator erator ","node children first source_ range_with_surrounding_space  ","node children first source_Parser Source Range  new  ","node children first source_ range_between  ","node children first source_key join  ","node children first source_ range_for_autocorrect_ruby19  ","  range_with_surrounding_space _between "," Parser Source Range  new _between ","  range_between _between "," key join _between ","  range_for_autocorrect_ruby19 _between ","node children first loc expression  source ","node children first source_range  source ","pair_node key  source ","pair_node key source_range  source ","node children first loc expression  value ","node children first source_range  value ","pair_node key  value ","pair_node key source_range  value ","node children first loc expression  sym_type? ","node children first source_range  sym_type? ","pair_node key  sym_type? ","pair_node key source_range  sym_type? ","key source_ range_with_surrounding_space  begin_pos ","key source_Parser Source Range  new  begin_pos ","key source_ range_between  begin_pos ","key source_key join  begin_pos ","key source_ range_for_autocorrect_ruby19  begin_pos ","node children first loc expression  source_range begin_pos ","node children first source_range  source_range begin_pos ","pair_node key  source_range begin_pos ","pair_node key source_range  source_range begin_pos ","key source_ range_with_surrounding_space  ","key source_Parser Source Range  new  ","key source_ range_between  ","key source_key join  ","key source_ range_for_autocorrect_ruby19  ","node children first loc expression  source_range ","node children first source_range  source_range ","pair_node key  source_range ","pair_node key source_range  source_range ","pair_node loc node loc operator erator ","pair_node loc pair_node loc operator erator ","pair_node node children first loc expression  ","pair_node node children first source_range  ","pair_node pair_node key  ","pair_node pair_node key source_range  ","node children first loc expression  join ","node children first source_range  join ","pair_node key  join ","pair_node key source_range  join ","pair_node key source_ range_with_surrounding_space  ","pair_node key source_Parser Source Range  new  ","pair_node key source_ range_between  ","pair_node key source_key join  ","pair_node key source_ range_for_autocorrect_ruby19  ","pair_node node children first loc expression  source_range ","pair_node node children first source_range  source_range ","pair_node pair_node key  source_range ","pair_node pair_node key source_range  source_range ","pair_node parent  braces? ! ","pair_node parent  braces? ","pair_node parent  parent ","  range_with_surrounding_space _for_autocorrect_ruby19 "," Parser Source Range  new _for_autocorrect_ruby19 ","  range_between _for_autocorrect_ruby19 "," key join _for_autocorrect_ruby19 ","  range_for_autocorrect_ruby19 _for_autocorrect_ruby19 "]}," RuboCop Cop Style HashSyntax sym_indices?":{"type":"method","name":"sym_indices?","children":[],"call":[" word_symbol_pair? ","pairs all? "]}," RuboCop Cop Style HashSyntax symbol_value?":{"type":"method","name":"symbol_value?","children":[],"call":["value sym_type? "]}," RuboCop Cop Style HashSyntax alternative_style":{"type":"method","name":"alternative_style","children":[],"call":[" style "]}," RuboCop Cop Style HashSyntax ruby19_no_mixed_keys_check":{"type":"method","name":"ruby19_no_mixed_keys_check","children":[],"call":[" check "," sym_indices? "," force_hash_rockets? "]}," RuboCop Cop Style Encoding autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" fail ","@corrections << ","corrector replace ","node pos source ","node pos "," lambda ","encoding =~ "," cop_config [] "," cop_config ","corrector insert_after ","corrector insert_before "," encoding_line_number == "," encoding_line_number "," processed_source "," raise ","corrector remove "," range_with_surrounding_space ","@message == "," encoding "," encoding_mismatch_message "," matching_encoding? "," cop_config []  =~ ","  cop_config [] _line_number == ","  cop_config [] _line_number ","  cop_config []  ","  cop_config [] _mismatch_message "," matching_ cop_config [] ? "]}," RuboCop Cop Style EmptyElse both_check":{"type":"method","name":"both_check","children":[],"call":[" add_offense ","else_clause type == ","else_clause type ","else_clause nil? ","node loc else nil? ","node loc else ","node loc "," nil_check "," empty_check "]}," RuboCop Cop Style EmptyElse nil_check":{"type":"method","name":"nil_check","children":[],"call":[" add_offense ","node location ","else_clause type == ","else_clause type ","else_clause nil_type? ","node else_branch nil_type? ","node else_branch "," autocorrect ","node loc else ","node loc "]}," RuboCop Cop Style EmptyElse empty_check":{"type":"method","name":"empty_check","children":[],"call":[" add_offense ","else_clause nil? ","node loc else ","node loc ","node else_branch ! ","node else_branch ","node else? "," autocorrect "]}," RuboCop Cop Style Documentation nodoc?":{"type":"method","name":"nodoc?","children":[],"call":[" nodoc? ","node ancestors first ","node ancestors ","comment text =~ ","comment text ","comment loc line == ","node loc line ","node loc ","comment loc line ","comment loc ","ast_with_comments [] first ","ast_with_comments [] ","nodoc_node children first ","nodoc_node children ","nodoc_node type == ","nodoc_node type ","node children last ","node children ","node children first ","(str \"^#\\\\s*:nodoc:\") match? ","ast_with_comments [] first  text =~ ","ast_with_comments [] first  text ","ast_with_comments [] first  loc line == ","ast_with_comments [] first  loc line ","ast_with_comments [] first  loc ","ast_with_ast_with_comments [] first s [] first ","ast_with_ast_with_comments [] first s [] ","nodoc_node children first  children first ","node children last  children first ","node children first  children first ","nodoc_node children first  children ","node children last  children ","node children first  children ","nodoc_node children first  type == ","node children last  type == ","node children first  type == ","nodoc_node children first  type ","node children last  type ","node children first  type "]}," RuboCop Cop Style Documentation comment_line_only?":{"type":"method","name":"comment_line_only?","children":[],"call":["comment_line =~ ","source_buffer source_line ","comment loc line ","comment loc ","comment loc expression source_buffer ","comment loc expression ","source_buffer source_line  =~ ","comment loc expression source_buffer  source_line ","comment loc expression comment loc expression source_buffer  "]}," RuboCop Cop Style Copyright autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector insert_before "," autocorrect_notice ","token pos ","Parser Source Range  new ","token nil? "," lambda "," fail "," notice "," autocorrect_notice =~ ","Regexp  new "," autocorrect_notice empty? "," raise "," range_between "," verify_autocorrect_notice! "," token pos _between "," Parser Source Range  new _between ","  range_between _between "]}," RuboCop Cop Style Copyright notice_found?":{"type":"method","name":"notice_found?","children":[],"call":["(send\n  (begin\n    (send\n      (send\n        (lvar :token) :text) :=~\n      (lvar :notice_regexp))) :nil?) ! ","(send\n  (send\n    (lvar :token) :text) :=~\n  (lvar :notice_regexp)) nil? ","token text =~ ","token text ","token type == ","token type ","processed_source tokens each ","processed_source tokens ","Regexp  new "," notice ","(send\n  (send\n    (lvar :token) :text) :=~\n  (lvar :notice_regexp)) nil? ! ","token comment? ","processed_source each_token ","notice_regexp match? ","(send\n  (begin\n    (send\n      (send\n        (lvar :token) :text) :=~\n      (lvar :Regexp  new ))) :nil?) ! ","(send\n  (send\n    (lvar :token) :text) :=~\n  (lvar :Regexp  new )) nil? ","(send\n  (send\n    (lvar :token) :text) :=~\n  (lvar :Regexp  new )) nil? ! ","Regexp  new  match? "]}," RuboCop Cop Style Copyright encoding_token?":{"type":"method","name":"encoding_token?","children":[],"call":["token text =~ ","token text ","token type == ","token type ","processed_source tokens [] ","processed_source tokens ","token_index >= ","processed_source tokens size ","token comment? ","(str \"^#.*coding\\\\s?[:=]\\\\s?(?:UTF|utf)-8\") match? ","processed_source tokens []  text =~ ","processed_source tokens []  text ","processed_source tokens []  type == ","processed_source tokens []  type ","processed_source processed_source tokens [] s [] ","processed_source processed_source tokens [] s ","processed_source tokens [] _index >= ","processed_source processed_source tokens [] s size ","processed_source tokens []  comment? "]}," RuboCop Cop Style Copyright shebang_token?":{"type":"method","name":"shebang_token?","children":[],"call":["token text =~ ","token text ","token type == ","token type ","processed_source tokens [] ","processed_source tokens ","token_index >= ","processed_source tokens size ","token comment? ","(str \"^#!.*$\") match? ","processed_source tokens []  text =~ ","processed_source tokens []  text ","processed_source tokens []  type == ","processed_source tokens []  type ","processed_source processed_source tokens [] s [] ","processed_source processed_source tokens [] s ","processed_source tokens [] _index >= ","processed_source processed_source tokens [] s size ","processed_source tokens []  comment? "]}," RuboCop Cop Style Copyright insert_notice_before":{"type":"method","name":"insert_notice_before","children":[],"call":["processed_source tokens [] ","processed_source tokens "," encoding_token? "," shebang_token? "]}," RuboCop Cop Style Copyright investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense "," message "," insert_notice_before "," source_range ","processed_source buffer "," notice_found? "," notice empty? "," notice ","MSG  % "," format "," source_ source_range  "]}," RuboCop Cop Style Copyright autocorrect_notice":{"type":"method","name":"autocorrect_notice","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style Copyright notice":{"type":"method","name":"notice","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style Copyright message":{"type":"method","name":"message","children":[],"call":[" notice "]}," RuboCop Cop Style CommandLiteral autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","replacement last ","node loc end ","node loc ","replacement first ","node loc begin "," lambda ","(str \"%x\") zip map ","(str \"%x\") zip "," preferred_delimiters "," backtick_literal? "," fail "," contains_backtick? "," preferred_delimiter ","(str \"%x\") zip map  last ","(str \"%x\") zip map  first "]}," RuboCop Cop Style CommandLiteral preferred_delimiters":{"type":"method","name":"preferred_delimiters","children":[],"call":[" config for_cop [] [] split "," config for_cop [] [] "," config for_cop [] "," config for_cop "," config "]}," RuboCop Cop Style CommandLiteral multi_line?":{"type":"method","name":"multi_line?","children":[],"call":[" block_length > "," block_length "]}," RuboCop Cop Style CommandLiteral single_line?":{"type":"method","name":"single_line?","children":[],"call":[" multi_line? ! "," multi_line? "]}," RuboCop Cop Style CommandLiteral backtick_literal?":{"type":"method","name":"backtick_literal?","children":[],"call":["node loc begin source == ","node loc begin source ","node loc begin ","node loc "]}," RuboCop Cop Style CommandLiteral heredoc_literal?":{"type":"method","name":"heredoc_literal?","children":[],"call":["node loc respond_to? ","node loc "]}," RuboCop Cop Style CommandLiteral node_body":{"type":"method","name":"node_body","children":[],"call":["loc expression source [] ","loc end length -@ ","loc end length ","loc end ","loc begin length ","loc begin ","loc expression source ","loc expression ","node loc ","node loc  expression source [] ","node loc  end length -@ ","node loc  end length ","node loc  end ","node loc  begin length ","node loc  begin ","node loc  expression source ","node loc  expression ","node node loc  "]}," RuboCop Cop Style CommandLiteral contains_backtick?":{"type":"method","name":"contains_backtick?","children":[],"call":[" node_body =~ "," node_body ","(str \"`\") match? "," node_body include? "]}," RuboCop Cop Style CommandLiteral allow_inner_backticks?":{"type":"method","name":"allow_inner_backticks?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style CommandLiteral contains_disallowed_backtick?":{"type":"method","name":"contains_disallowed_backtick?","children":[],"call":[" contains_backtick? "," allow_inner_backticks? ! "," allow_inner_backticks? "]}," RuboCop Cop Style CommandLiteral check_percent_x_literal":{"type":"method","name":"check_percent_x_literal","children":[],"call":[" add_offense "," contains_disallowed_backtick? "," style == "," style "," multi_line? ","node multiline? "," allowed_percent_x_literal? "," autocorrect "]}," RuboCop Cop Style CommandLiteral check_backtick_literal":{"type":"method","name":"check_backtick_literal","children":[],"call":[" add_offense "," contains_disallowed_backtick? ! "," contains_disallowed_backtick? "," single_line? "," style == "," style ","node single_line? "," allowed_backtick_literal? "," autocorrect "]}," RuboCop Cop Style CommandLiteral on_xstr":{"type":"method","name":"on_xstr","children":[],"call":[" check_percent_x_literal "," check_backtick_literal "," backtick_literal? "," heredoc_literal? ","node heredoc? "]}," RuboCop Cop Style ClosingParenthesisIndentation line_break_after_left_paren?":{"type":"method","name":"line_break_after_left_paren?","children":[],"call":["elements first loc line > ","left_paren line ","elements first loc line ","elements first loc ","elements first "]}," RuboCop Cop Style ClosingParenthesisIndentation check":{"type":"method","name":"check","children":[],"call":[" add_offense ","node loc end ","node loc ","correct_column == ","left_paren column ","@column_delta == ","correct_column - ","right_paren column ","left_paren source_line =~ ","left_paren source_line "," line_break_after_left_paren? ","node loc begin "," begins_its_line? "," expected_column ","@column_delta zero? ","left_paren column  == ","left_paren source_line =~  == "," expected_column  == ","node loc begin  column ","correct_column -  == ","left_paren column  - ","left_paren source_line =~  - "," expected_column  - ","node loc end  column ","node loc begin  source_line =~ ","node loc begin  source_line "," line_break_after_node loc begin ? ","correct_column -  zero? "]}," RuboCop Cop Style ClosingParenthesisIndentation on_method_def":{"type":"method","name":"on_method_def","children":[],"call":[" check ","args children "]}," RuboCop Cop Style ClosingParenthesisIndentation on_begin":{"type":"method","name":"on_begin","children":[],"call":[" check ","node children "]}," RuboCop Cop Style ClosingParenthesisIndentation on_send":{"type":"method","name":"on_send","children":[],"call":[" check ","node arguments "]}," RuboCop Cop Style BlockDelimiters conditional?":{"type":"method","name":"conditional?","children":[],"call":["node and_type? ","node or_type? ","node if_type? "]}," RuboCop Cop Style BlockDelimiters ignored_methods":{"type":"method","name":"ignored_methods","children":[],"call":[" cop_config [] map "," cop_config [] "," cop_config "]}," RuboCop Cop Style BlockDelimiters functional_methods":{"type":"method","name":"functional_methods","children":[],"call":[" cop_config [] map "," cop_config [] "," cop_config "]}," RuboCop Cop Style BlockDelimiters procedural_methods":{"type":"method","name":"procedural_methods","children":[],"call":[" cop_config [] map "," cop_config [] "," cop_config "]}," RuboCop Cop Style BlockDelimiters return_value_of_scope?":{"type":"method","name":"return_value_of_scope?","children":[],"call":["node parent children last == ","node parent children last ","node parent children ","node parent "," conditional? "," array_or_range? "]}," RuboCop Cop Style BlockDelimiters return_value_used?":{"type":"method","name":"return_value_used?","children":[],"call":["node parent send_type? ","node parent ","Util ASGN_NODES  include? ","node parent type "," return_value_used? ","node parent begin_type? ","node parent assignment? ","node parent call_type? "]}," RuboCop Cop Style BlockDelimiters procedural_method?":{"type":"method","name":"procedural_method?","children":[],"call":[" procedural_methods include? "," procedural_methods "," cop_config [] map include? "," cop_config [] map "," cop_config [] "," cop_config "]}," RuboCop Cop Style BlockDelimiters functional_block?":{"type":"method","name":"functional_block?","children":[],"call":[" return_value_of_scope? "," return_value_used? "]}," RuboCop Cop Style BlockDelimiters functional_method?":{"type":"method","name":"functional_method?","children":[],"call":[" functional_methods include? "," functional_methods "," cop_config [] map include? "," cop_config [] map "," cop_config [] "," cop_config "]}," RuboCop Cop Style BlockDelimiters ignored_method?":{"type":"method","name":"ignored_method?","children":[],"call":[" ignored_methods include? "," ignored_methods "," cop_config [] map include? "," cop_config [] map "," cop_config [] "," cop_config "]}," RuboCop Cop Style BlockDelimiters extract_method_name_from_block":{"type":"method","name":"extract_method_name_from_block","children":[],"call":[]}," RuboCop Cop Style BlockDelimiters semantic_block_style?":{"type":"method","name":"semantic_block_style?","children":[],"call":[" return_value_used? ! "," return_value_used? "," procedural_method? "," functional_block? "," functional_method? ","block_begin == ","node loc begin source ","node loc begin ","node loc "," ignored_method? "," extract_method_name_from_block "," block_method_name ","node method_name ","node braces? ","node multiline? ! ","node multiline? "," procedural_oneliners_may_have_braces? ","node loc begin source  == "," extract_ extract_method_name_from_block _from_block "," extract_ block_method_name _from_block "," extract_node method_name _from_block "," block_ extract_method_name_from_block  "," block_ block_method_name  "," block_node method_name  ","node  extract_method_name_from_block  ","node  block_method_name  ","node node method_name  "]}," RuboCop Cop Style BlockDelimiters line_count_based_block_style?":{"type":"method","name":"line_count_based_block_style?","children":[],"call":["block_begin == ","block_begin != ","block_length > ","node loc begin source ","node loc begin ","node loc ","Util  block_length "," block_length ","(send\n  (send nil :block_length\n    (lvar :node)) :>\n  (int 0)) ^ "," block_length > ","node multiline? ^ ","node braces? ","node multiline? ","node loc begin source  == ","node loc begin source  != ","Util  block_length  > "," block_length  > ","Util  Util  block_length  ","Util   block_length  "," Util  block_length  ","  block_length  ","(send\n  (send nil :Util  block_length \n    (lvar :node)) :>\n  (int 0)) ^ ","(send\n  (send nil : block_length \n    (lvar :node)) :>\n  (int 0)) ^ "," Util  block_length  > ","  block_length  > "]}," RuboCop Cop Style BlockDelimiters proper_block_style?":{"type":"method","name":"proper_block_style?","children":[],"call":[" semantic_block_style? "," line_count_based_block_style? "," style "," braces_for_chaining_style? "," ignored_method? ","node method_name "," braces_style? "," special_method_proper_block_style? "," special_method? "," require_braces? "]}," RuboCop Cop Style BlockDelimiters operator?":{"type":"method","name":"operator?","children":[],"call":["method_name =~ "]}," RuboCop Cop Style BlockDelimiters parentheses?":{"type":"method","name":"parentheses?","children":[],"call":["send_node loc begin ","send_node loc "]}," RuboCop Cop Style BlockDelimiters get_block":{"type":"method","name":"get_block","children":[],"call":[" get_block ","node type "]}," RuboCop Cop Style BlockDelimiters correction":{"type":"method","name":"correction","children":[],"call":["corrector replace ","corrector insert_before ","b source_buffer source [] =~ ","b source_buffer source [] ","b begin_pos - ","b begin_pos ","b source_buffer source ","b source_buffer ","b is? ","node loc end ","node loc ","node loc begin "," lambda "," whitespace_before? ","corrnode loc end ctor rnode loc end placnode loc end  ","corrnode loc end ctor insnode loc end rt_bnode loc end fornode loc end  ","corrector insert_node loc begin efore ","b sourcnode loc end _buffnode loc end r sourcnode loc end  [] =~ ","node loc begin  source_node loc begin uffer source [] =~ ","b sourcnode loc end _buffnode loc end r sourcnode loc end  [] ","node loc begin  source_node loc begin uffer source [] ","b bnode loc end gin_pos - ","node loc begin  node loc begin egin_pos - ","b bnode loc end gin_pos ","node loc begin  node loc begin egin_pos ","b sourcnode loc end _buffnode loc end r sourcnode loc end  ","node loc begin  source_node loc begin uffer source ","b sourcnode loc end _buffnode loc end r ","node loc begin  source_node loc begin uffer ","node loc begin  is? ","nodnode loc end  loc node loc end nd ","nodnode loc end  loc ","nodnode loc end  loc bnode loc end gin ","node loc node loc begin egin "," lamnode loc begin da "," whitnode loc end spacnode loc end _bnode loc end fornode loc end ? "," whitespace_node loc begin efore? "]}," RuboCop Cop Style BlockDelimiters message":{"type":"method","name":"message","children":[],"call":["block_begin == ","block_length > "," style ","Util  block_length ","node loc begin source ","node loc begin ","node loc "," braces_for_chaining_message "," semantic_message "," line_count_based_message "," braces_required_message "," braces_required_method? ","node method_name ","node loc begin source  == ","Util  block_length  > ","Util  Util  block_length  "]}," RuboCop Cop Style BlockDelimiters on_block":{"type":"method","name":"on_block","children":[],"call":[" opposite_style_detected "," add_offense "," correct_style_detected "," proper_block_style? "," ignored_node? "," autocorrect ","node loc begin ","node loc "," message ","  message  "]}," RuboCop Cop Style BlockDelimiters on_send":{"type":"method","name":"on_send","children":[],"call":[" ignore_node "," operator? ! "," operator? "," parentheses? ! "," parentheses? "," get_block ","args last ","args any? "," get_blocks ","args empty? ","args each ","node arguments each ","node arguments ","node operator_method? ","node parenthesized? ","node arguments? ","node assignment_method? "," get_ get_block  "," get_ get_block s "]}," RuboCop Cop Style AutoResourceCleanup on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format ","node parent block_type? ","node parent ","method_name != ","receiver_node != "," s ","TARGET_METHODS  each ","arg_nodes last block_pass_type? ","arg_nodes last ","arg_nodes empty? ! ","arg_nodes empty? ","node block_argument? ","node method_name != ","node method_name ","node receiver != ","node receiver "," cleanup? "]}," RuboCop Cop Rails TimeZone good_methods":{"type":"method","name":"good_methods","children":[],"call":[" style == "," style ","(sym :zone) + ","GOOD_METHODS  + + ","GOOD_METHODS  + "," strict? "]}," RuboCop Cop Rails TimeZone method_send?":{"type":"method","name":"method_send?","children":[],"call":["receiver == ","node parent ","node parent send_type? ","node parent receiver == ","node parent receiver "]}," RuboCop Cop Rails TimeZone extract_method":{"type":"method","name":"extract_method","children":[],"call":[]}," RuboCop Cop Rails TimeZone extract_method_chain":{"type":"method","name":"extract_method_chain","children":[],"call":["p parent ","chain << "," extract_method ","p send_type? ","p nil? ! ","p nil? ","node parent ","node send_type? ","node nil? ! ","node nil? "," method_from_time_class? ","node method_name ","p parent  p parent arent ","p parent  send_typ parent e? ","p parent  nil? ! ","p parent  nil? ","node p parent arent ","node parent  parent ","node send_typ parent e? ","node parent  send_type? ","node parent  nil? ! ","node parent  nil? ","node parent  method_name "]}," RuboCop Cop Rails TimeZone check_time_node":{"type":"method","name":"check_time_node","children":[],"call":[" add_offense "," format ","chain & ","(send\n  (lvar :chain) :&\n  (send nil :good_methods)) empty? ! ","(send\n  (lvar :chain) :&\n  (send nil :good_methods)) empty? "," good_methods ","(send\n  (lvar :chain) :&\n  (const nil :DANGER_METHODS)) empty? "," extract_method_chain "," safe_method ","(send\n  (lvar :chain) :&\n  (const nil :DANGER_METHODS)) join "," check_localtime "," need_check_localtime? "," danger_chain? "," build_message ","(send\n  (lvar :chain) :&\n  (const nil :DANGEROUS_METHODS)) join "," offset_provided? "," not_danger_chain? "," extract_method_chain  & ","(send\n  (lvar : extract_method_chain ) :&\n  (send nil :good_methods)) empty? ! ","(send\n  (lvar : extract_method_chain ) :&\n  (send nil :good_methods)) empty? ","(send\n  (lvar : extract_method_chain ) :&\n  (const nil :DANGER_METHODS)) empty? "," extract_method_ extract_method_chain  ","(send\n  (lvar : extract_method_chain ) :&\n  (const nil :DANGER_METHODS)) join "," danger_ extract_method_chain ? "," build_ build_message  ","(send\n  (lvar : extract_method_chain ) :&\n  (const nil :DANGEROUS_METHODS)) join "," not_danger_ extract_method_chain ? "]}," RuboCop Cop Rails TimeZone on_const":{"type":"method","name":"on_const","children":[],"call":[" check_time_node ","node parent ","TIMECLASS  include? "," method_send? ","mod cbase_type? ","mod nil? ","TIMECLASSES  include? "]}," RuboCop Cop Rails FindEach autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace "," lambda ","node loc selector ","node loc "]}," RuboCop Cop Rails FindEach on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","node loc selector ","node loc ","SCOPE_METHODS  include? ","receiver nil? ","second_method == "," ignored_by_find_each? "," method_chain any? "," method_chain ","method == ","node receiver method_name ","node receiver ","node method? ","node receiver send_type? "]}," RuboCop Cop Rails FindBy autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace "," lambda ","Parser Source Range  new ","node loc selector end_pos ","node loc selector ","node loc ","node loc dot begin_pos ","node loc dot ","node loc expression source_buffer ","node loc expression ","receiver loc selector ","receiver loc ","node source_range source_buffer ","node source_range ","second_method == "," where_first "," range_between ","node receiver loc selector ","node receiver loc ","node receiver ","node method? "]}," RuboCop Cop Rails FindBy on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format ","Parser Source Range  new ","node loc expression source_buffer ","node loc expression ","node loc ","node loc selector end_pos ","node loc selector ","receiver loc selector begin_pos ","receiver loc selector ","receiver loc ","first_method == ","receiver nil? ","TARGET_SELECTORS  include? ","node source_range source_buffer ","node source_range "," where_first "," range_between ","node method_name ","node receiver loc selector begin_pos ","node receiver loc selector ","node receiver loc ","node receiver "," where_first? ","node source_Parser Source Range  new  source_buffer ","node source_ range_between  source_buffer ","node source_Parser Source Range  new  ","node source_ range_between  "," Parser Source Range  new _between ","  range_between _between "]}," RuboCop Cop Rails Date bad_methods":{"type":"method","name":"bad_methods","children":[],"call":[" style == "," style "]}," RuboCop Cop Rails Date bad_days":{"type":"method","name":"bad_days","children":[],"call":["BAD_DAYS  - "," good_days "]}," RuboCop Cop Rails Date good_days":{"type":"method","name":"good_days","children":[],"call":[" style == "," style "]}," RuboCop Cop Rails Date method_send?":{"type":"method","name":"method_send?","children":[],"call":["receiver == ","node parent ","node parent send_type? ","node parent receiver == ","node parent receiver "]}," RuboCop Cop Rails Date extract_method":{"type":"method","name":"extract_method","children":[],"call":[]}," RuboCop Cop Rails Date extract_method_chain":{"type":"method","name":"extract_method_chain","children":[],"call":["p parent ","chain << "," extract_method ","p send_type? ","p nil? ! ","p nil? ","node parent ","node send_type? ","node nil? ! ","node nil? ","(lvar :node) map ","node each_ancestor ","p parent  p parent arent ","p parent  send_typ parent e? ","p parent  nil? ! ","p parent  nil? ","node p parent arent ","node parent  parent ","node send_typ parent e? ","node parent  send_type? ","node parent  nil? ! ","node parent  nil? ","(lvar :node) map parent  ","(lvar :node parent ) map ","node parent  each_ancestor "]}," RuboCop Cop Rails Date check_date_node":{"type":"method","name":"check_date_node","children":[],"call":[" add_offense "," format ","chain & "," bad_days ","(send\n  (lvar :chain) :&\n  (send nil :bad_days)) empty? "," extract_method_chain ","(send\n  (lvar :chain) :&\n  (send nil :bad_days)) join ","method_name to_s ","method_name == "," extract_method_chain  & ","(send\n  (lvar : extract_method_chain ) :&\n  (send nil :bad_days)) empty? "," extract_method_ extract_method_chain  ","(send\n  (lvar : extract_method_chain ) :&\n  (send nil :bad_days)) join ","(send\n  (lvar :chain) :&\n  (send nil :bad_days)) join  to_s ","(send\n  (lvar :chain) :&\n  (send nil :bad_days)) join  == "]}," RuboCop Cop Rails Date on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format "," bad_methods include? "," bad_methods "," extract_method ","args length == ","args length ","method_name == "," safe_chain? "," extract_method_chain ","node method_name "," safe_to_time? ","node receiver "," check_deprecated_methods "," extract_method  == "," safe_ extract_method_chain ? "," extract_method_ extract_method_chain  ","node  extract_method  "]}," RuboCop Cop Rails Date on_const":{"type":"method","name":"on_const","children":[],"call":[" check_date_node ","node parent ","klass == "," method_send? ","node children ","mod cbase_type? ","mod nil? "]}," RuboCop Cop Performance Size hash?":{"type":"method","name":"hash?","children":[],"call":["method == ","constant == ","node hash_type? ","node method_name == ","node method_name ","node receiver ","node send_type? "]}," RuboCop Cop Performance Size array?":{"type":"method","name":"array?","children":[],"call":["method == ","constant == ","node array_type? ","node method_name == ","node method_name ","node receiver ","node send_type? "]}," RuboCop Cop Performance Size autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","node loc selector ","node loc "," lambda "]}," RuboCop Cop Performance Size on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","node loc selector ","node loc ","node parent block_type? ","node parent "," hash? "," array? ","method == ","receiver nil? ","args block_pass_type? "," eligible_node? "]}," RuboCop Cop Performance Sample autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace "," lambda ","Parser Source Range  new ","node loc selector end_pos ","node loc selector ","node loc ","node loc expression source_buffer ","node loc expression ","receiver loc selector begin_pos ","receiver loc selector ","receiver loc ","corrector insert_after ","selector loc expression source ","selector loc expression ","selector loc ","selector nil? ","node parent loc selector end_pos ","node parent loc selector ","node parent loc ","node parent ","node loc selector begin_pos "," range_of_shuffle ","params lvar_type? ","params hash_type? ","RANGE_TYPES  include? ","params type ","params nil? ","ShuffleAnalyzer  new autocorrect ","ShuffleAnalyzer  new "," correction "," source_range "," sample_candidate? "," Parser Source Range  new _of_shuffle ","  range_of_shuffle _of_shuffle "," source_Parser Source Range  new  "," source_ range_of_shuffle  "]}," RuboCop Cop Performance Sample on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format ","selector loc expression source ","selector loc expression ","selector loc ","second_method == ","Parser Source Range  new ","node loc expression source_buffer ","node loc expression ","node loc ","node loc selector end_pos ","node loc selector ","receiver loc selector begin_pos ","receiver loc selector ","receiver loc ","first_method == ","receiver nil? ","ARRAY_SELECTORS  include? "," range_of_shuffle "," shuffle_params ","node parent loc selector source ","node parent loc selector ","node parent loc ","node parent ","selector == ","params lvar_type? ","params nil? ","method == "," message ","second_method nil? ","VALID_ARRAY_SELECTORS  include? ","analyzer message ","analyzer source_range ","analyzer offensive? ","ShuffleAnalyzer  new "," source_range "," offensive? "," sample_candidate? "," Parser Source Range  new _of_shuffle ","  source_range _of_shuffle ","  format  ","  message  ","analyzer  format  ","analyzer  message  ","ShuffleAnalyzer  new  message ","analyzer source_Parser Source Range  new  ","analyzer source_ source_range  ","ShuffleAnalyzer  new  source_range ","ShuffleAnalyzer  new  offensive? "," source_Parser Source Range  new  "," source_ source_range  "]}," RuboCop Cop Performance ReverseEach autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","node loc dot ","node loc "," lambda "]}," RuboCop Cop Performance ReverseEach on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","Parser Source Range  new ","node loc selector end_pos ","node loc selector ","node loc ","receiver loc selector begin_pos ","receiver loc selector ","receiver loc ","node loc expression source_buffer ","node loc expression ","first_method == ","receiver nil? ","second_method == ","node source_range source_buffer ","node source_range "," reverse_each? "," range_between ","node loc expression node loc expression source_buffer  ","node loc expression node source_range source_buffer  ","node source_Parser Source Range  new  source_buffer ","node source_ range_between  source_buffer ","node source_range node loc expression source_buffer  ","node source_range node source_range source_buffer  ","node source_Parser Source Range  new  ","node source_ range_between  "," Parser Source Range  new _between ","  range_between _between "]}," RuboCop Cop Performance FlatMap autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","array loc selector ","array loc ","corrector remove ","Parser Source Range  new ","node loc expression end_pos ","node loc expression ","node loc ","node loc dot begin_pos ","node loc dot ","node loc expression source_buffer "," lambda ","flatten_level nil? ","node source_range end_pos ","node source_range ","node source_range source_buffer "," range_between ","map_node loc selector ","map_node loc ","params first "," flat_map_candidate? ","node source_Parser Source Range  new  end_pos ","node source_ range_between  end_pos ","node source_Parser Source Range  new  ","node source_ range_between  ","node source_Parser Source Range  new  source_buffer ","node source_ range_between  source_buffer "," Parser Source Range  new _between ","  range_between _between "]}," RuboCop Cop Performance FlatMap on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format ","Parser Source Range  new ","node loc selector end_pos ","node loc selector ","node loc ","expression loc selector begin_pos ","expression loc selector ","expression loc ","node loc expression source_buffer ","node loc expression ","flatten_level == ","MSG  + ","flatten_level nil? "," cop_config [] "," cop_config ","first_method == ","FLATTEN  include? ","node source_range source_buffer ","node source_range ","flatten_level != "," offense_for_method "," offense_for_levels "," map_method? "," flatten_method? ","params first "," flat_map_candidate? ","flatten_level ! ","node source_Parser Source Range  new  source_buffer ","node source_Parser Source Range  new  "]}," RuboCop Cop Performance Detect preferred_method":{"type":"method","name":"preferred_method","children":[],"call":[" config for_cop [] [] "," config for_cop [] "," config for_cop "," config "]}," RuboCop Cop Performance Detect autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["@corrections << ","corrector replace ","receiver loc selector ","receiver loc ","corrector remove "," lambda ","receiver block_type? ","node loc dot join ","node loc selector ","node loc ","node loc dot "," preferred_method ","first_method == ","Parser Source Range  new join ","Parser Source Range  new ","receiver loc end end_pos ","receiver loc end ","receiver loc expression source ","receiver loc expression ","receiver source ","receiver source_range end join ","receiver source_range end ","receiver source_range "]}," RuboCop Cop Performance Detect on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format "," preferred_method ","second_method == ","receiver loc selector join ","node loc selector ","node loc ","receiver loc selector ","receiver loc ","SELECT_METHODS  include? ","receiver block_type? ","receiver nil? ","args block_pass_type? ! ","args block_pass_type? ","args nil? ","body nil? "," lazy? ","DANGEROUS_METHODS  include? "," check_second_call "," should_run? "," offense "," accept_first_call? "," accept_second_call? "," rails_safe_mode? ","args empty? "," detect_candidate? "," register_offense "]}," RuboCop Cop OnNormalIfUnless case_else_clause":{"type":"method","name":"case_else_clause","children":[],"call":["node children last ","node children ","node case_type? "]}," RuboCop Cop OnNormalIfUnless if_else_clause":{"type":"method","name":"if_else_clause","children":[],"call":["node children [] ","node children ","keyword is? ","node children last ","node loc keyword ","node loc ","node if_type? ","node loc keyword  is? ","node loc node loc keyword  "]}," RuboCop Cop Lint Void check_begin":{"type":"method","name":"check_begin","children":[],"call":[" check_for_var "," check_for_literal "," check_for_void_op ","expressions drop_last each ","expressions drop_last "," check_for_defined "," check_for_self "," check_defined "," check_self "," check_var "," check_literal "," check_void_op ","expressions each "," in_void_context? "," check_nonmutating "," cop_config [] "," cop_config "," check_expression ","expressions pop ","expressions drop_last  drop_last each ","expressions drop_last  drop_last ","expressions drop_last  each ","expressions drop_last  pop "]}," RuboCop Cop Lint Void on_kwbegin":{"type":"method","name":"on_kwbegin","children":[],"call":[" check_begin "]}," RuboCop Cop Lint NonLocalExitFromIterator chained_send?":{"type":"method","name":"chained_send?","children":[],"call":["receiver_node nil? ! ","receiver_node nil? "]}," RuboCop Cop Lint NonLocalExitFromIterator return_value?":{"type":"method","name":"return_value?","children":[],"call":["return_node children empty? ! ","return_node children empty? ","return_node children "]}," RuboCop Cop Lint NonLocalExitFromIterator on_return":{"type":"method","name":"on_return","children":[],"call":[" add_offense "," chained_send? ","args_node children empty? ","args_node children ","return_node each_ancestor "," return_value? "," lambda? "," define_method? ","block_node lambda? "," scoped_node? ","node send_node ","node arguments? ","return_node loc keyword ","return_node loc "]}," RuboCop Cop Lint AssignmentInCondition traverse_node":{"type":"method","name":"traverse_node","children":[],"call":[" traverse_node ","child is_a? ","node children each ","node children ","result == ","types include? ","node type ","node each_child_node ","ASGN_TYPES  include? ","node block_type? "]}," RuboCop Cop Cop annotate_message":{"type":"method","name":"annotate_message","children":[],"call":[" style_guide_url "," display_style_guide? "," name "," display_cop_names? ","(send nil :style_guide_url) compact join ","(send nil :style_guide_url) compact "," reference_url "," details "," extra_details? "]}," RuboCop Cop Cop style_guide_url":{"type":"method","name":"style_guide_url","children":[],"call":["url empty? ","url nil? "," cop_config [] "," cop_config ","URI  join to_s ","URI  join ","base_url empty? ","base_url nil? "," config for_all_cops [] "," config for_all_cops "," config "," cop_config []  empty? "," cop_config []  nil? ","base_ cop_config []  empty? "," config for_all_cops []  empty? ","base_ cop_config []  nil? "," config for_all_cops []  nil? "]}," RuboCop Cop Cop correct":{"type":"method","name":"correct","children":[],"call":[" autocorrect "," autocorrect? "," support_autocorrect? ","@corrections << ","@corrected_nodes []= ","@corrected_nodes key? "," disable_uncorrectable "," disable_uncorrectable? ","Correction  new "," reason_to_not_correct ","@ autocorrect s << ","  reason_to_not_correct _to_not_correct "]}," RuboCop Cop Cop display_style_guide?":{"type":"method","name":"display_style_guide?","children":[],"call":[" config [] [] "," config [] "," config ","@options [] "," style_guide_url "," reference_url "," config for_all_cops [] "," config for_all_cops "]}," RuboCop Cop AutocorrectLogic autocorrect_enabled?":{"type":"method","name":"autocorrect_enabled?","children":[],"call":[" cop_config [] != "," cop_config [] "," cop_config "," cop_config fetch ","@options fetch "," cop_config [] == "," safe_autocorrect? "]}," RuboCop Cop AutocorrectLogic support_autocorrect?":{"type":"method","name":"support_autocorrect?","children":[],"call":[" respond_to? "]}," RuboCop Cop AutocorrectLogic autocorrect_requested?":{"type":"method","name":"autocorrect_requested?","children":[],"call":["@options fetch "]}," RuboCop Cop AutocorrectLogic autocorrect?":{"type":"method","name":"autocorrect?","children":[],"call":[" autocorrect_enabled? "," support_autocorrect? "," autocorrect_requested? "," correctable? "]}," RuboCop ConfigLoader yaml_safe_load":{"type":"method","name":"yaml_safe_load","children":[],"call":["YAML  load ","YAML  safe_load ","YAML  respond_to? ","SafeYAML  load ","SafeYAML  respond_to? ","RUBY_VERSION  >= ","Gem Version  new >= ","Gem Version  new "," raise "," yaml_safe_load! "]}," RuboCop Config possibly_include_hidden?":{"type":"method","name":"possibly_include_hidden?","children":[],"call":["s include? ","s start_with? ","s is_a? "," patterns_to_include any? "," patterns_to_include ","@possibly_include_hidden nil? "]}," RuboCop Cop Style TrailingComma inside_comment?":{"type":"method","name":"inside_comment?","children":[],"call":["comment_offset < ","comment_offset >= ","comment loc expression begin_pos - ","range begin_pos ","comment loc expression begin_pos ","comment loc expression ","comment loc "," processed_source comments any? "," processed_source comments "," processed_source ","comment loc expression begin_pos -  < ","comment loc expression begin_pos -  >= "]}," RuboCop Cop Style TrailingBlankLines ends_in_end?":{"type":"method","name":"ends_in_end?","children":[],"call":["extra strip start_with? ","extra strip ","sb source [] ","processed_source tokens last pos end_pos ","processed_source tokens last pos ","processed_source tokens last ","processed_source tokens ","sb source ","processed_source tokens empty? ","sb source strip start_with? ","sb source strip ","processed_source buffer ","sb source []  strip start_with? ","sb source []  strip ","processed_source buffer  source [] ","processed_source buffer  source ","processed_source buffer  source strip start_with? ","processed_source buffer  source strip "]}," RuboCop Cop Style HashSyntax valid_19_syntax_symbol?":{"type":"method","name":"valid_19_syntax_symbol?","children":[],"call":["RuboCop ProcessedSource  new valid_syntax? ","RuboCop ProcessedSource  new ","sym_name sub! ","sym_name =~ "," parse valid_syntax? "," parse "]}," RuboCop Cop Rails TimeZone need_check_localtime?":{"type":"method","name":"need_check_localtime?","children":[],"call":["chain include? "," style == "," style "," acceptable? "," flexible? "]}," RuboCop Cop Rails TimeZone danger_chain?":{"type":"method","name":"danger_chain?","children":[],"call":["(send\n  (lvar :chain) :&\n  (send nil :good_methods)) empty? ! ","(send\n  (lvar :chain) :&\n  (send nil :good_methods)) empty? ","chain & "," good_methods ","(send\n  (lvar :chain) :&\n  (const nil :DANGER_METHODS)) empty? ","(send\n  (lvar :chain) :&\n  (const nil :DANGEROUS_METHODS)) empty? "]}," RuboCop Cop Rails TimeZone check_localtime":{"type":"method","name":"check_localtime","children":[],"call":[" add_offense ","args nil? ","node parent "," extract_method == "," extract_method ","node send_type? ","node nil? ! ","node nil? ","node arguments? ","node method_name == ","node method_name ","node parent  parent ","node parent  send_type? ","node parent  nil? ! ","node parent  nil? ","node parent  arguments? ","node parent  method_name == ","node parent  method_name "]}," RuboCop Cop Rails TimeZone safe_method":{"type":"method","name":"safe_method","children":[],"call":["args empty? ","method_name == ","node arguments? ","(str \"new\") include? "]}," RuboCop Cop Performance Sample shuffle_params":{"type":"method","name":"shuffle_params","children":[],"call":["params source ","Parser Source Range  new ","node loc expression end_pos ","node loc expression ","node loc ","node loc selector end_pos ","node loc selector ","node loc expression source_buffer ","Parser Source Range  new  source "]}," RuboCop Cop Performance Sample range_of_shuffle":{"type":"method","name":"range_of_shuffle","children":[],"call":["Parser Source Range  new ","node loc selector end_pos ","node loc selector ","node loc ","node loc selector begin_pos ","node loc expression source_buffer ","node loc expression "]}," RuboCop Cop Lint LiteralInInterpolation special_keyword?":{"type":"method","name":"special_keyword?","children":[],"call":["node loc expression is? ","node loc expression ","node loc ","node loc respond_to? ! ","node loc respond_to? ","node type == ","node type ","node source_range is? ","node source_range ","node str_type? "]}," RuboCop Cop Lint EndAlignment line_break_before_keyword?":{"type":"method","name":"line_break_before_keyword?","children":[],"call":["rhs loc keyword line > ","whole_expression line ","rhs loc keyword line ","rhs loc keyword ","rhs loc "]}," RuboCop Config validate_section_presence":{"type":"method","name":"validate_section_presence","children":[],"call":[" fail "," loaded_path ","@hash [] nil? ","@hash [] ","@hash key? "," [] nil? "," [] "," key? "," raise "," smart_loaded_path "]}," RuboCop Cop Style TrailingUnderscoreVariable find_first_offense":{"type":"method","name":"find_first_offense","children":[],"call":["variable children first == ","variable children first ","variable children ","variables reverse_each ","variables [] splat_type? ","variables [] ","0 upto each ","0 upto ","first_offense_index - ","variables index ","first_offense nil? ","var to_s start_with? ","var to_s ","var == "," allow_named_underscore_variables "," splat_variable_before? "," find_first_possible_offense ","variables reverse ","variables index  - "," find_first_possible_offense _index - "," find_first_possible_offense  nil? "]}," RuboCop Cop Style TrailingUnderscoreVariable autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove ","range nil? "," lambda ","Parser Source Range  new ","first_offense loc expression begin_pos ","first_offense loc expression ","first_offense loc ","node loc expression source_buffer ","node loc expression ","node loc ","node loc operator begin_pos ","node loc operator ","right loc expression begin_pos ","right loc expression ","right loc ","first_offense loc expression == ","variables first loc expression ","variables first loc ","variables first "," find_first_offense ","first_offense source_range begin_pos ","first_offense source_range ","node source_range source_buffer ","node source_range ","right source_range begin_pos ","right source_range ","first_offense source_range == ","variables first source_range "," unneeded_range ","ranges each "," unneeded_ranges ","Parser Source Range  new  nil? "," unneeded_range  nil? "," find_first_offense  loc expression begin_pos "," find_first_offense  loc expression "," find_first_offense  loc "," find_first_offense  loc expression == "," find_ find_first_offense  ","first_offense source_Parser Source Range  new  begin_pos ","first_offense source_ unneeded_range  begin_pos "," find_first_offense  source_range begin_pos ","first_offense source_Parser Source Range  new  ","first_offense source_ unneeded_range  "," find_first_offense  source_range ","node source_Parser Source Range  new  source_buffer ","node source_ unneeded_range  source_buffer ","node source_Parser Source Range  new  ","node source_ unneeded_range  ","right source_Parser Source Range  new  begin_pos ","right source_ unneeded_range  begin_pos ","right source_Parser Source Range  new  ","right source_ unneeded_range  ","first_offense source_Parser Source Range  new  == ","first_offense source_ unneeded_range  == "," find_first_offense  source_range == ","variables first source_Parser Source Range  new  ","variables first source_ unneeded_range  "," unneeded_Parser Source Range  new  "," unneeded_ unneeded_range  ","Parser Source Range  new s each "," unneeded_range s each "," unneeded_ranges  each "," unneeded_Parser Source Range  new s "," unneeded_ unneeded_range s "," unneeded_ unneeded_ranges  "]}," RuboCop Cop Style TrailingUnderscoreVariable on_masgn":{"type":"method","name":"on_masgn","children":[],"call":[" add_offense ","Parser Source Range  new ","variables last loc expression end_pos ","variables last loc expression ","variables last loc ","variables last ","first_offense loc expression begin_pos ","first_offense loc expression ","first_offense loc ","node loc expression source_buffer ","node loc expression ","node loc ","first_offense nil? "," find_first_offense ","variables last source_range end_pos ","variables last source_range ","first_offense source_range begin_pos ","first_offense source_range ","node source_range source_buffer ","node source_range "," format ","good_code []= ","range size ","range begin_pos - ","node source_range begin_pos ","range begin_pos ","node source "," unneeded_range ","ranges each "," unneeded_ranges ","corrector remove "," find_first_offense  loc expression begin_pos "," find_first_offense  loc expression "," find_first_offense  loc "," find_first_offense  nil? "," find_ find_first_offense  ","variables last source_Parser Source Range  new  end_pos ","variables last source_ unneeded_range  end_pos ","variables last source_Parser Source Range  new  ","variables last source_ unneeded_range  ","first_offense source_Parser Source Range  new  begin_pos ","first_offense source_ unneeded_range  begin_pos "," find_first_offense  source_range begin_pos ","first_offense source_Parser Source Range  new  ","first_offense source_ unneeded_range  "," find_first_offense  source_range ","node source_Parser Source Range  new  source_buffer ","node source_ unneeded_range  source_buffer ","node source_Parser Source Range  new  ","node source_ unneeded_range  ","node source  []= ","Parser Source Range  new  size "," unneeded_range  size ","Parser Source Range  new  begin_pos - "," unneeded_range  begin_pos - ","node source_Parser Source Range  new  begin_pos ","node source_ unneeded_range  begin_pos ","Parser Source Range  new  begin_pos "," unneeded_range  begin_pos "," unneeded_Parser Source Range  new  "," unneeded_ unneeded_range  ","Parser Source Range  new s each "," unneeded_range s each "," unneeded_ranges  each "," unneeded_Parser Source Range  new s "," unneeded_ unneeded_range s "," unneeded_ unneeded_ranges  "]}," RuboCop Cop Style SpaceAroundBlockParameters last_end_pos_inside_pipes":{"type":"method","name":"last_end_pos_inside_pipes","children":[],"call":["pos + "," processed_source buffer source [] == "," processed_source buffer source [] "," processed_source buffer source "," processed_source buffer "," processed_source "]}," RuboCop Cop Style SpaceAroundBlockParameters check_space_style_inside_pipes":{"type":"method","name":"check_space_style_inside_pipes","children":[],"call":[" check_no_space ","closing_pipe begin_pos ","last_end_pos + ","first begin_pos - ","first begin_pos ","opening_pipe end_pos "," check_space "," last_end_pos_inside_pipes ","last end_pos ","args last loc expression ","args last loc ","args last ","args first loc expression ","args first loc ","args first ","args last source_range ","args first source_range "," last_end_pos_inside_pipes  + ","args last loc expression _end_pos + ","args last source_range _end_pos + ","args first loc expression  begin_pos - ","args first source_range  begin_pos - ","args first loc expression  begin_pos ","args first source_range  begin_pos ","  last_end_pos_inside_pipes _inside_pipes "," args last loc expression _end_pos_inside_pipes "," args last source_range _end_pos_inside_pipes ","args last loc expression  end_pos ","args last source_range  end_pos ","args args last loc expression  loc expression ","args args last source_range  loc expression ","args args last loc expression  loc ","args args last source_range  loc ","args args last loc expression  ","args args last source_range  ","args args first loc expression  loc expression ","args args first source_range  loc expression ","args args first loc expression  loc ","args args first source_range  loc ","args args first loc expression  ","args args first source_range  ","args args last loc expression  source_range ","args args last source_range  source_range ","args args first loc expression  source_range ","args args first source_range  source_range "]}," RuboCop Cop Style SpaceAroundBlockParameters check_no_space_style_inside_pipes":{"type":"method","name":"check_no_space_style_inside_pipes","children":[],"call":[" check_no_space ","closing_pipe begin_pos "," last_end_pos_inside_pipes ","last end_pos ","first begin_pos ","opening_pipe end_pos ","args last loc expression ","args last loc ","args last ","args first loc expression ","args first loc ","args first ","args last source_range ","args first source_range "," args last loc expression _end_pos_inside_pipes "," args last source_range _end_pos_inside_pipes ","args last loc expression  end_pos ","args last source_range  end_pos ","args first loc expression  begin_pos ","args first source_range  begin_pos ","args args last loc expression  loc expression ","args args last source_range  loc expression ","args args last loc expression  loc ","args args last source_range  loc ","args args last loc expression  ","args args last source_range  ","args args first loc expression  loc expression ","args args first source_range  loc expression ","args args first loc expression  loc ","args args first source_range  loc ","args args first loc expression  ","args args first source_range  ","args args last loc expression  source_range ","args args last source_range  source_range ","args args first loc expression  source_range ","args args first source_range  source_range "]}," RuboCop Cop Style CommentAnnotation autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","annotation_keyword upcase << ","annotation_keyword upcase ","range source split first ","range source split ","range source "," lambda ","first_word upcase ","Parser Source Range  new ","start + ","comment loc expression source ","comment loc expression ","comment loc ","first_word length + + ","space to_s length ","space to_s ","first_word length + ","colon to_s length ","colon to_s ","first_word length ","note nil? ","comment loc expression begin_pos + ","margin length ","comment loc expression begin_pos "," split_comment "," annotation_range "," concat_length ","range source split first  upcase << ","range source split first  upcase ","Parser Source Range  new  source split first "," annotation_range  source split first ","Parser Source Range  new  source split "," annotation_range  source split ","Parser Source Range  new  source "," annotation_range  source ","comment loc expression begin_pos +  + ","first_word first_word length + +  + + ","first_word  concat_length  + + ","space to_s first_word length + +  ","space to_s  concat_length  ","first_word first_word length + +  + ","first_word  concat_length  + ","colon to_s first_word length + +  ","colon to_s  concat_length  ","first_word first_word length + +  ","first_word  concat_length  ","margin first_word length + +  ","margin  concat_length  "," annotation_Parser Source Range  new  "," annotation_ annotation_range  "," concat_first_word length + +  "," concat_ concat_length  "]}," RuboCop Cop Style ArrayJoin autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," lambda ","arg_nodes [] loc expression source ","arg_nodes [] loc expression ","arg_nodes [] loc ","arg_nodes [] ","receiver_node loc expression source ","receiver_node loc expression ","receiver_node loc ","node loc expression ","node loc ","node source_range ","arg_nodes [] source ","receiver_node source ","arg_nodes first source ","arg_nodes first "," join_candidate? map "," join_candidate? ","arg_nodes [] loc node loc expression ession source ","arg_nodes [] loc node loc expression ession ","receiver_node loc node loc expression ession source ","receiver_node loc node loc expression ession ","node loc node loc expression ession "]}," RuboCop Cop Rails TimeZone acceptable?":{"type":"method","name":"acceptable?","children":[],"call":[" style == "," style "]}," RuboCop Cop Rails TimeZone build_message":{"type":"method","name":"build_message","children":[],"call":[" format "," safe_method ","accepted_methods join ","ACCEPTED_METHODS  map "," acceptable? "," acceptable_methods join "," acceptable_methods ","method_name == "," flexible? "]}," RuboCop Cop Performance Sample message":{"type":"method","name":"message","children":[],"call":[" format "," shuffle_params ","node parent loc selector source ","node parent loc selector ","node parent loc ","node parent ","selector == ","params lvar_type? ","range source "," correction "]}," RuboCop Cop Performance ParallelAssignment variable_reassignment?":{"type":"method","name":"variable_reassignment?","children":[],"call":["re loc expression is? ","le loc expression source ","le loc expression ","le loc ","re loc expression ","re loc ","right_elements any? ","left_elements any? "]}," RuboCop Cop Performance ParallelAssignment extract_sources":{"type":"method","name":"extract_sources","children":[],"call":["child loc expression source ","child loc expression ","child loc ","node children map ","node children "]}," RuboCop Cop Performance ParallelAssignment autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","assignment join ","\n << ","  * ","node loc expression ","node loc ","node loc expression column ","pair join ","groups map ","l_vars zip "," extract_sources "," lambda ","l_vars zip  map "," extract_sources  zip "]}," RuboCop Cop Performance ParallelAssignment on_masgn":{"type":"method","name":"on_masgn","children":[],"call":[" add_offense "," variable_reassignment? ","(send\n  (lvar :left_elements) :+\n  (lvar :right_elements)) any? ","left_elements + ","right send_type? ","right block_type? ","left_elements size == ","left_elements size ","left_elements size != ","right_elements size ","(splat\n  (lvar :right)) compact ","(send\n  (lvar :left_elements) :+\n  (lvar :(splat\n  (lvar :right)) compact )) any? ","(splat\n  (lvar :right)) compact  size "]}," RuboCop Cop Performance Count parse":{"type":"method","name":"parse","children":[],"call":["expression loc selector ","expression loc "," contains_selector? ","expression parent loc selector ","expression parent loc ","expression parent ","expression parent loc respond_to? ","selector is_a? ","left loc selector ","left loc ","left loc respond_to? "," selector_location ","head loc "," expression loc selector ation ","  selector_location ation "]}," RuboCop Cop Performance Count autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","corrector remove ","Parser Source Range  new ","node loc expression end_pos ","node loc expression ","node loc ","node loc dot begin_pos ","node loc dot ","node loc expression source_buffer "," lambda ","expression parent loc selector ","expression parent loc ","expression parent ","expression loc selector ","expression loc ","SELECTORS  include? ","second_method == ","first_method == "," parse ","selector == ","node source_range end_pos ","node source_range ","node source_range source_buffer ","n loc dot begin_pos ","n loc dot ","n loc "," source_starting_at ","selector_node loc selector ","selector_node loc "," count_candidate? ","expression parent loc expression parent loc selector  ","expression parent loc expression loc selector  ","expression loc expression parent loc selector  ","expression loc expression loc selector  ","expression parent loc selector  == ","expression loc selector  == ","node source_Parser Source Range  new  end_pos ","node source_Parser Source Range  new  ","node source_Parser Source Range  new  source_buffer ","expression parent loc selector _node loc expression parent loc selector  ","expression loc selector _node loc expression loc selector  ","expression parent loc selector _node loc ","expression loc selector _node loc "]}," RuboCop Cop Performance Count on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format ","Parser Source Range  new ","node loc expression end_pos ","node loc expression ","node loc ","node loc expression source_buffer ","node parent block_type? ","node parent ","expression parent loc selector begin_pos ","expression parent loc selector ","expression parent loc ","expression parent ","SELECTORS  include? ","expression loc selector begin_pos ","expression loc selector ","expression loc ","second_method is_a? ","COUNTERS  include? "," parse ","selector_loc begin_pos ","params block_pass_type? ! ","params block_pass_type? ","node source_range end_pos ","node source_range ","node source_range source_buffer "," should_run? "," check "," rails_safe_mode? ","selector_node loc selector begin_pos ","selector_node loc selector ","selector_node loc "," source_starting_at "," eligible_node? "," count_candidate? ","node source_Parser Source Range  new  end_pos ","node source_Parser Source Range  new  ","node source_Parser Source Range  new  source_buffer "]}," RuboCop Cop StatementModifier comment_lines":{"type":"method","name":"comment_lines","children":[],"call":[" processed_source comments map map "," processed_source comments map "," processed_source comments "," processed_source ","c location line ","c location "]}," RuboCop Cop StatementModifier end_keyword_has_comment?":{"type":"method","name":"end_keyword_has_comment?","children":[],"call":[" comment_lines include? ","node loc end line ","node loc end ","node loc "," comment_lines "]}," RuboCop Cop MinBodyLength min_body_length":{"type":"method","name":"min_body_length","children":[],"call":[" fail ","length > ","length is_a? "," cop_config [] "," cop_config "," raise ","length positive? "]}," RuboCop Cop MinBodyLength min_body_length?":{"type":"method","name":"min_body_length?","children":[],"call":["(send\n  (send\n    (send\n      (send\n        (lvar :node) :loc) :end) :line) :-\n  (send\n    (send\n      (send\n        (lvar :node) :loc) :keyword) :line)) > "," min_body_length ","node loc end line - ","node loc keyword line ","node loc keyword ","node loc ","node loc end line ","node loc end "]}," RuboCop Cop EndKeywordAlignment align":{"type":"method","name":"align","children":[],"call":["corrector replace ","  * "," lambda ","alignment_node loc expression column ","alignment_node loc expression ","alignment_node loc ","whitespace source strip empty? ","whitespace source strip ","whitespace source ","Parser Source Range  new ","begin_pos - ","node loc end column ","node loc end ","node loc ","node loc end begin_pos ","node loc expression source_buffer ","node loc expression ","align_to column ","align_to source_range column ","align_to source_range ","align_to respond_to? ","align_to ! ","node source_range source_buffer ","node source_range "," alignment_column "," whitespace_range ","alignment_node loc expression alignment_node loc expression column  ","alignment_node loc expression  alignment_column  ","Parser Source Range  new  source strip empty? "," whitespace_range  source strip empty? ","Parser Source Range  new  source strip "," whitespace_range  source strip ","Parser Source Range  new  source "," whitespace_range  source ","node loc end begin_pos  - ","node loc end alignment_node loc expression column  ","node loc end  alignment_column  ","node loc end node loc end begin_pos  ","node loc expression node loc expression source_buffer  ","node loc expression node source_range source_buffer  ","align_to alignment_node loc expression column  ","align_to  alignment_column  ","align_to source_range alignment_node loc expression column  ","align_to source_range  alignment_column  ","node source_range node loc expression source_buffer  ","node source_range node source_range source_buffer  "," alignment_alignment_node loc expression column  "," alignment_ alignment_column  "," Parser Source Range  new _range ","  whitespace_range _range "]}," RuboCop Cop ClassishLength line_numbers_of_inner_thing":{"type":"method","name":"line_numbers_of_inner_thing","children":[],"call":["line_numbers to_a ","line_numbers merge "," line_range ","node each_descendant ","Set  new ","Set  new  to_a ","Set  new  merge ","  line_range  "]}," RuboCop Cop ClassishLength code_length":{"type":"method","name":"code_length","children":[],"call":["length + "," irrelevant_line "," processed_source [] "," processed_source ","target_line_numbers reduce ","body_line_numbers - - "," line_numbers_of_inner_thing ","body_line_numbers - "," line_range to_a [] "," line_range to_a "," line_range "," line_numbers_of_inner_nodes ","body_line_numbers - -  reduce ","body_line_numbers -  reduce "," line_range to_a []  - - "," line_range to_a []  - "]}," RuboCop Cop Metrics ModuleLength message":{"type":"method","name":"message","children":[],"call":[" format "]}," RuboCop Cop Metrics ModuleLength on_module":{"type":"method","name":"on_module","children":[],"call":[" check_code_length "]}," RuboCop Cop Lint EndAlignment autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" align ","node each_ancestor first ","node each_ancestor "," style == "," style "," alignment_node ","AlignmentCorrector  align_end "," processed_source "]}," RuboCop Cop Lint EachWithObjectArgument on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","arg float_type? ","arg int_type? ","args first ","args length == ","args length ","method_name == ","arg immutable_literal? "," each_with_object? ","args first  float_type? ","args first  int_type? ","args first s first ","args first s length == ","args first s length ","args first  immutable_literal? "]}," RuboCop Cop Lint DefEndAlignment autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" align ","node ancestors first ","node ancestors "," style == "," style ","node parent ","node parent send_type? ","AlignmentCorrector  align_end "," processed_source "]}," RuboCop Cop Cop match?":{"type":"method","name":"match?","children":[],"call":[]}," RuboCop Cop CopStore cop_name_with_namespace":{"type":"method","name":"cop_name_with_namespace","children":[],"call":[" warn ","found_ns != ","File  dirname to_sym ","File  dirname ","name != "]}," RuboCop Cop CopStore qualified_cop_name":{"type":"method","name":"qualified_cop_name","children":[],"call":[" fail "," cop_name_with_namespace ","found_ns [] ","found_ns size ","@cop_names include? "," types map select "," types map "," types ","File  basename ","Set  new "," map "," raise ","(send\n  (lvar :found_ns) :map) join ","found_ns map "," cop_names include? "," cop_names ","File  File  basename  "]}," RuboCop Formatter FormatterSet file_finished":{"type":"method","name":"file_finished","children":[],"call":["f file_finished "," each ","offenses sort reject ","offenses sort ","cop offenses ","cop check ","Cop Lint UnneededDisable  new ","@only_cops empty? ","@excepted_cops empty? ","@cop_disabled_line_ranges [] any? ","@cop_disabled_line_ranges [] ","config [] [] ","config [] ","@config_store for ","(or\n  (send\n    (ivar :@options) :[]\n    (sym :only))\n  (array)) empty? ","@options [] ","(or\n  (send\n    (ivar :@options) :[]\n    (sym :except))\n  (array)) empty? ","@cop_disabled_line_ranges any? ","offenses sort reject  sort reject ","offenses sort reject  sort ","cop offenses sort reject  ","Cop Lint UnneededDisable  new  offenses ","Cop Lint UnneededDisable  new  check ","@only_Cop Lint UnneededDisable  new s empty? ","@excepted_Cop Lint UnneededDisable  new s empty? ","@Cop Lint UnneededDisable  new _disabled_line_ranges [] any? ","@Cop Lint UnneededDisable  new _disabled_line_ranges [] ","@config_store for  [] [] ","@config_store for  [] ","@@config_store for _store for ","@Cop Lint UnneededDisable  new _disabled_line_ranges any? "]}," RuboCop Formatter FormatterSet file_started":{"type":"method","name":"file_started","children":[],"call":["f file_started "," each ","options [] ","@comments []= ","@cop_disabled_line_ranges []= ","options []  []= "]}," RuboCop Cop Style TrailingBlankLines offense_detected":{"type":"method","name":"offense_detected","children":[],"call":[" add_offense "," message ","Parser Source Range  new ","sb source length ","sb source ","\n length ","whitespace_at_end length == ","whitespace_at_end length ","sb source length - ","whitespace_at_end empty? "," range_between "]}," RuboCop Cop Style SpaceInsideStringInterpolation autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node loc expression source ","node loc expression ","node loc "," range_with_surrounding_space "," lambda "," style == "," style ","node source_range ","node source "]}," RuboCop Cop Style SpaceInsideStringInterpolation on_dstr":{"type":"method","name":"on_dstr","children":[],"call":[" add_offense "," range_with_surrounding_space != "," range_with_surrounding_space ","final_node loc expression ","final_node loc ","begin_node children last ","begin_node children ","(send\n  (send\n    (lvar :node) :children) :select) each ","n type == ","n type ","node children select ","node children ","interp_with_surrounding_space source != ","interp source ","interp_with_surrounding_space source "," style == "," style ","interp_with_surrounding_space != ","final_node source_range "," each_style_violation ","begin_node children last  loc expression ","begin_node children last  loc ","final_node loc expression _with_surrounding_space source != ","final_node source_range _with_surrounding_space source != "," range_with_surrounding_space  source != ","final_node loc expression  source ","final_node source_range  source ","final_node loc expression _with_surrounding_space source ","final_node source_range _with_surrounding_space source "," range_with_surrounding_space  source ","final_node loc expression _with_surrounding_space != ","final_node source_range _with_surrounding_space != "," range_with_surrounding_space  != ","begin_node children last  source_range "]}," RuboCop Cop Style ParallelAssignment ModifierCorrector space_offset":{"type":"method","name":"space_offset","children":[],"call":["offset + "," indentation_width "]}," RuboCop Cop Style ParallelAssignment ModifierCorrector correction_range":{"type":"method","name":"correction_range","children":[],"call":["@node parent loc expression ","@node parent loc ","@node parent "," node parent loc expression "," node parent loc "," node parent "," node "," node parent source_range "]}," RuboCop Cop Style ParallelAssignment ModifierCorrector correction":{"type":"method","name":"correction","children":[],"call":["(begin\n  (send\n    (lvar :modifier_range) :source)) << << << ","(begin\n  (send\n    (lvar :modifier_range) :source)) << << "," assignment join "," indent "," assignment ","(begin\n  (send\n    (lvar :modifier_range) :source)) << ","modifier_range source ","Parser Source Range  new ","parent loc expression end_pos ","parent loc expression ","parent loc ","parent loc keyword begin_pos ","parent loc keyword ","parent loc expression source_buffer ","@node parent "," offset "," node "," indentation "," node parent ","parent source_range end_pos ","parent source_range ","parent source_range source_buffer "," modifier_range source "," modifier_range ","(begin\n  (send\n    (lvar :Parser Source Range  new ) :source)) << << << ","(begin\n  (send\n    (lvar :Parser Source Range  new ) :source)) << << ","(begin\n  (send\n    (lvar :Parser Source Range  new ) :source)) << ","Parser Source Range  new  source ","@node parent  loc expression end_pos "," node parent  loc expression end_pos ","@node parent  loc expression "," node parent  loc expression ","@node parent  loc "," node parent  loc ","@node parent  loc keyword begin_pos "," node parent  loc keyword begin_pos ","@node parent  loc keyword "," node parent  loc keyword ","@node parent  loc expression source_buffer "," node parent  loc expression source_buffer ","@node @node parent  ","@node  node parent  "," node @node parent  "," node  node parent  ","@node parent  source_range end_pos "," node parent  source_range end_pos ","@node parent  source_range "," node parent  source_range ","@node parent  source_range source_buffer "," node parent  source_range source_buffer "," Parser Source Range  new  source "," Parser Source Range  new  "]}," RuboCop Cop Style ParallelAssignment RescueCorrector space_offset":{"type":"method","name":"space_offset","children":[],"call":["offset + "," indentation_width "]}," RuboCop Cop Style ParallelAssignment RescueCorrector correction_range":{"type":"method","name":"correction_range","children":[],"call":["@node parent loc expression ","@node parent loc ","@node parent "," node parent loc expression "," node parent loc "," node parent "," node "," node parent source_range "," rhs parent parent source_range "," rhs parent parent "," rhs parent "," rhs "]}," RuboCop Cop Style ParallelAssignment RescueCorrector correction":{"type":"method","name":"correction","children":[],"call":["begin\n << << << << << << ","begin\n << << << << << ","rescue_result loc expression source ","rescue_result loc expression ","rescue_result loc ","begin\n << << << << "," indent ","begin\n << << << ","begin\n << << "," assignment join "," assignment ","begin\n << ","@node parent "," offset "," node "," indentation "," node parent ","rescue_result source "," begin_correction "," + "," def_correction "," node parent parent def_type? "," node parent parent "," rescue_result "," rhs parent parent parent "," rhs parent parent "," rhs parent "," rhs "]}," RuboCop Cop Style ParallelAssignment GenericCorrector extract_sources":{"type":"method","name":"extract_sources","children":[],"call":["child loc expression source ","child loc expression ","child loc ","node children map ","node children "]}," RuboCop Cop Style ParallelAssignment GenericCorrector assignment":{"type":"method","name":"assignment","children":[],"call":["pair join ","groups map ","l_vars zip "," extract_sources "," node ","rhs loc expression source ","rhs loc expression ","rhs loc ","lhs loc expression source ","lhs loc expression ","lhs loc ","@new_elements map ","rhs source ","lhs source "," source ","l_vars zip  map "," extract_sources  zip "]}," RuboCop Cop Style ParallelAssignment GenericCorrector indent":{"type":"method","name":"indent","children":[],"call":["  * "," space_offset "]}," RuboCop Cop Style ParallelAssignment GenericCorrector space_offset":{"type":"method","name":"space_offset","children":[],"call":["@node loc expression column ","@node loc expression ","@node loc "]}," RuboCop Cop Style ParallelAssignment GenericCorrector correction_range":{"type":"method","name":"correction_range","children":[],"call":["@node loc expression ","@node loc "," node loc expression "," node loc "," node "," node source_range "]}," RuboCop Cop Style ParallelAssignment GenericCorrector correction":{"type":"method","name":"correction","children":[],"call":[" assignment join "," indent "," assignment "," offset "," node "]}," RuboCop Cop Style ParallelAssignment GenericCorrector initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop Cop Style ParallelAssignment rescue_modifier?":{"type":"method","name":"rescue_modifier?","children":[],"call":["node parent kwbegin_type? ! ","node parent kwbegin_type? ","node parent ","node parent nil? ","node rescue_type? ","(or\n  (send\n    (send\n      (lvar :node) :parent) :kwbegin_type?)\n  (send\n    (send\n      (lvar :node) :parent) :ensure_type?)) ! ","node parent ensure_type? "]}," RuboCop Cop Style ParallelAssignment modifier_while?":{"type":"method","name":"modifier_while?","children":[],"call":["node loc end nil? ","node loc end ","node loc ","node loc respond_to? ","(str \"while\") include? ","node loc keyword source ","node loc keyword ","node modifier_form? "]}," RuboCop Cop Style ParallelAssignment modifier_statement?":{"type":"method","name":"modifier_statement?","children":[],"call":[" modifier_while? ","node until_type? ","node while_type? "," modifier_if? ","node if_type? ","node modifier_form? ","(sym :if) include? ","node type ","node basic_conditional? "]}," RuboCop Cop Style ParallelAssignment swapping_variables?":{"type":"method","name":"swapping_variables?","children":[],"call":["re loc expression is? ","le loc expression source ","le loc expression ","le loc ","re loc expression ","re loc ","right_elements any? ","left_elements any? "]}," RuboCop Cop Style ParallelAssignment autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","assignment_corrector correction ","assignment_corrector correction_range ","GenericCorrector  new "," configured_indentation_width ","RescueCorrector  new "," rescue_modifier? ","node parent ","ModifierCorrector  new "," modifier_statement? "," lambda "," config "," find_valid_order ","(splat\n  (lvar :right)) compact ","correction correction ","correction correction_range "," assignment_corrector "," Array compact "," Array ","ModifierCorrector  new  correction ","assignment_corrector  assignment_corrector  ","ModifierCorrector  new  correction_range ","assignment_corrector  assignment_corrector _range "," find_valid_ find_valid_order  "," assignment_corrector   assignment_corrector  "," assignment_corrector   assignment_corrector _range "," ModifierCorrector  new  "]}," RuboCop Cop Style ParallelAssignment on_masgn":{"type":"method","name":"on_masgn","children":[],"call":[" add_offense "," swapping_variables? ","(send\n  (lvar :left_elements) :+\n  (lvar :right_elements)) any? ","left_elements + ","right send_type? ","right block_type? ","left_elements size == ","left_elements size ","left_elements size != ","right_elements size ","(splat\n  (lvar :right)) compact ","right array_type? ","order nil? "," find_valid_order "," allowed_masign? "," allowed_rhs? "," allowed_lhs? ","(splat\n  (lvar :rhs)) compact "," Array compact "," Array "," autocorrect ","node source_range begin join ","rhs source_range end ","rhs source_range ","node source_range begin ","node source_range ","rhs body ","rhs rescue_type? ","(send\n  (lvar :left_elements) :+\n  (lvar :(splat\n  (lvar :right)) compact )) any? ","(splat\n  (lvar :right)) compact  size "," find_valid_order  nil? "," find_valid_ find_valid_order  "," allowed_rhs body ? ","(splat\n  (lvar :rhs body )) compact ","node source_node source_range begin join  begin join ","rhs source_node source_range begin join  end ","rhs body  source_range end ","rhs source_node source_range begin join  ","rhs body  source_range ","node source_node source_range begin join  begin ","node source_node source_range begin join  ","rhs body  body ","rhs body  rescue_type? "]}," RuboCop Cop Style EmptyElse missing_else_style":{"type":"method","name":"missing_else_style","children":[],"call":["missing_config [] "," config for_cop "," config ","missing_cfg [] ","missing_cfg fetch "," config for_cop  [] "," config for_cop  fetch "]}," RuboCop Cop Style EmptyElse autocorrect_forbidden?":{"type":"method","name":"autocorrect_forbidden?","children":[],"call":["(lvar :type) include? "," missing_else_style "]}," RuboCop Cop Style EmptyElse autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove ","Parser Source Range  new ","node loc else begin_pos ","node loc else ","node loc ","node loc expression source_buffer ","node loc expression ","node loc expression end_pos + ","node loc expression end_pos ","node loc end begin_pos ","node loc end "," lambda "," autocorrect_forbidden? ","node type to_s ","node type ","node source_range source_buffer ","node source_range ","node source_range end_pos + ","node source_range end_pos ","node parent loc end begin_pos ","node parent loc end ","node parent loc ","node parent "," range_between "," base_if_node loc end begin_pos "," base_if_node loc end "," base_if_node loc "," base_if_node "," comment_in_else? "," base_node loc end begin_pos "," base_node loc end "," base_node loc "," base_node ","node loc expression node loc expression end_pos +  + ","node loc expression node loc end begin_pos  + ","node loc expression node source_range end_pos +  + ","node loc expression node parent loc end begin_pos  + ","node loc expression  base_if_node loc end begin_pos  + ","node loc expression  base_node loc end begin_pos  + ","node loc expression node loc expression end_pos +  ","node loc expression node loc end begin_pos  ","node loc expression node source_range end_pos +  ","node loc expression node parent loc end begin_pos  ","node loc expression  base_if_node loc end begin_pos  ","node loc expression  base_node loc end begin_pos  ","node source_Parser Source Range  new  source_buffer ","node source_Parser Source Range  new  ","node source_Parser Source Range  new  end_pos + ","node source_range node loc expression end_pos +  + ","node source_range node loc end begin_pos  + ","node source_range node source_range end_pos +  + ","node source_range node parent loc end begin_pos  + ","node source_range  base_if_node loc end begin_pos  + ","node source_range  base_node loc end begin_pos  + ","node source_Parser Source Range  new  end_pos ","node source_range node loc expression end_pos +  ","node source_range node loc end begin_pos  ","node source_range node source_range end_pos +  ","node source_range node parent loc end begin_pos  ","node source_range  base_if_node loc end begin_pos  ","node source_range  base_node loc end begin_pos  "," Parser Source Range  new _between "]}," RuboCop Cop Style Documentation preceding_comments":{"type":"method","name":"preceding_comments","children":[],"call":["c loc line < ","node loc line ","node loc ","c loc line ","c loc ","ast_with_comments [] select ","ast_with_comments [] "]}," RuboCop Cop Style CaseIndentation autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","  * "," lambda "," configured_indentation_width "," cop_config [] "," cop_config "," base_column "," cop_config [] == "," parameter_name ","node each_ancestor first ","node each_ancestor ","whitespace source strip empty? ","whitespace source strip ","whitespace source ","Parser Source Range  new ","begin_pos - ","node loc keyword begin_pos ","node loc keyword ","node loc ","node loc expression source_buffer ","node loc expression ","node location keyword column ","node location keyword ","node location ","node source_range source_buffer ","node source_range "," replacement "," whitespace_range "," base_ base_column  ","Parser Source Range  new  source strip empty? "," whitespace_range  source strip empty? ","Parser Source Range  new  source strip "," whitespace_range  source strip ","Parser Source Range  new  source "," whitespace_range  source ","node loc keyword begin_pos  - ","node loc keyword node loc keyword begin_pos  ","node loc expression node loc expression source_buffer  ","node loc expression node source_range source_buffer  ","node location keyword  base_column  ","node source_range node loc expression source_buffer  ","node source_range node source_range source_buffer  "," Parser Source Range  new _range ","  whitespace_range _range "]}," RuboCop Cop Style BracesAroundHashParameters add_braces":{"type":"method","name":"add_braces","children":[],"call":["corrector insert_after ","node loc expression ","node loc ","corrector insert_before ","node source_range "]}," RuboCop Cop Style BracesAroundHashParameters remove_braces":{"type":"method","name":"remove_braces","children":[],"call":["corrector remove "," range_with_surrounding_space ","node loc begin ","node loc ","node loc end ","c loc line == ","right_brace_and_space line ","c loc line ","c loc ","comments any? "," processed_source comments "," processed_source "," range_with_surrounding_comma "," range_with_surrounding_space  line "," range_with_surrounding_comma  line "," processed_source comments  any? "," processed_source  processed_source comments  "]}," RuboCop Cop Style BracesAroundHashParameters correction":{"type":"method","name":"correction","children":[],"call":[" add_braces "," remove_braces "," braces? "," lambda ","args last "]}," RuboCop Cop Rails TimeZone acceptable_methods":{"type":"method","name":"acceptable_methods","children":[],"call":["acceptable << ","ACCEPTED_METHODS  each "," safe_method "]}," RuboCop Cop Performance Sample ShuffleAnalyzer shuffle_arg":{"type":"method","name":"shuffle_arg","children":[],"call":["arg loc expression source ","arg loc expression ","arg loc "," shuffle_node ","arg source "]}," RuboCop Cop Performance Sample ShuffleAnalyzer sample_size":{"type":"method","name":"sample_size","children":[],"call":["second to_a first ","second to_a ","second int_type? ","first to_a first zero? ","first to_a first ","first to_a ","first int_type? ","arg to_a first zero? ","arg to_a first ","arg to_a "," range_size ","arg type ","args first ","args size "," method_node "," sample_size_for_two_args "," sample_size_for_one_arg ","args first  to_a first zero? ","args first  to_a first ","args first  to_a ","args first  type ","args first s first ","args first s size "," sample_size_for_two_args first s "," sample_size_for_one_args first  "]}," RuboCop Cop Performance Sample ShuffleAnalyzer sample_arg":{"type":"method","name":"sample_arg","children":[],"call":[" sample_size "," method_arg "," method "]}," RuboCop Cop Performance Sample ShuffleAnalyzer range_size":{"type":"method","name":"range_size","children":[],"call":["high - + ","high - ","range_node type ","high >= ","low zero? ","vals map map ","vals map ","vals all? ","val to_a first ","val to_a "]}," RuboCop Cop Performance Sample ShuffleAnalyzer method_arg":{"type":"method","name":"method_arg","children":[],"call":["arg loc expression source ","arg loc expression ","arg loc "," method_node ","arg source "]}," RuboCop Cop Performance Sample ShuffleAnalyzer method":{"type":"method","name":"method","children":[],"call":[" method_node to_a [] "," method_node to_a "," method_node "]}," RuboCop Cop Performance Sample ShuffleAnalyzer corrigible?":{"type":"method","name":"corrigible?","children":[],"call":[" sample_size != "," sample_size "," method "]}," RuboCop Cop Performance Sample ShuffleAnalyzer correct":{"type":"method","name":"correct","children":[],"call":["args empty? ","(send nil :sample_arg) compact join ","(send nil :sample_arg) compact "," shuffle_arg "," sample_arg ","(send nil :sample_arg) compact join  empty? "]}," RuboCop Cop Performance Sample ShuffleAnalyzer source_range":{"type":"method","name":"source_range","children":[],"call":["Parser Source Range  new "," method_node loc expression end_pos "," method_node loc expression "," method_node loc "," method_node "," shuffle_node loc selector begin_pos "," shuffle_node loc selector "," shuffle_node loc "," shuffle_node "," shuffle_node loc expression source_buffer "," shuffle_node loc expression "," method_node source_range end_pos "," method_node source_range "," shuffle_node source_range source_buffer "," shuffle_node source_range "]}," RuboCop Cop Performance Sample ShuffleAnalyzer offensive?":{"type":"method","name":"offensive?","children":[],"call":[" corrigible? "," shuffle_node to_a [] == "," shuffle_node to_a [] "," shuffle_node to_a "," shuffle_node "]}," RuboCop Cop Performance Sample ShuffleAnalyzer message":{"type":"method","name":"message","children":[],"call":[" format "," source_range source "," source_range "," correct "]}," RuboCop Cop Performance Sample ShuffleAnalyzer autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," correct "," source_range "," lambda "]}," RuboCop Cop Performance Sample ShuffleAnalyzer initialize":{"type":"method","name":"initialize","children":[],"call":["shuffle_node parent "]}," RuboCop Cop Performance Count contains_selector?":{"type":"method","name":"contains_selector?","children":[],"call":["node loc respond_to? ","node loc ","node respond_to? "]}," RuboCop Cop Offense disabled?":{"type":"method","name":"disabled?","children":[],"call":["@status == "]}," RuboCop Cop Offense corrected":{"type":"method","name":"corrected","children":[],"call":["@status == "]}," RuboCop Cop SpaceBeforePunctuation space_required_after_lcurly?":{"type":"method","name":"space_required_after_lcurly?","children":[],"call":["style == ","cfg [] "," config for_cop "," config ","cfg []  == "," config for_cop  [] "]}," RuboCop Cop SpaceAfterPunctuation space_forbidden_before_rcurly?":{"type":"method","name":"space_forbidden_before_rcurly?","children":[],"call":["style == ","cfg [] "," config for_cop "," config "," space_style_before_rcurly ","cfg []  == "," space_style_before_rcurly  == "," config for_cop  [] "," space_cfg [] _before_rcurly "," space_ space_style_before_rcurly _before_rcurly "]}," RuboCop Cop IfNode if_node_parts":{"type":"method","name":"if_node_parts","children":[],"call":["node loc keyword source ","node loc keyword ","node loc "]}," RuboCop Cop Lint UnneededDisable find_unneeded":{"type":"method","name":"find_unneeded","children":[],"call":["line_range include? ","o line ","cop_offenses none? ","offenses none? ","comment loc expression source =~ ","comment loc expression source ","comment loc expression ","comment loc "," all_disabled? ","line_range cover? ","o cop_name == ","o cop_name ","offenses select ","line_range last != ","next_line_range first ","line_range last ","next_line_range nil? "]}," RuboCop Cop Lint UnneededDisable check":{"type":"method","name":"check","children":[],"call":[" add_offense ","cops sort join ","cops sort ","unneeded_cops each ","unneeded_cops [] add ","unneeded_cops [] ","comment loc expression ","comment loc ","Set  new "," find_unneeded ","c loc line == ","line_range begin ","c loc line ","c loc ","comments [] find ","comments [] ","line_ranges each ","o cop_name == ","o cop_name ","offenses select ","cop_disabled_line_ranges [] each ","cop_disabled_line_ranges [] "," add_offenses "," ignore_offense? "," all_disabled? ","comments find ","cop_disabled_line_ranges each ","range begin ","previous_range end != ","previous_range end ","line_ranges each_cons ","h []= ","Hash  new "," each_unneeded_disable "," find_unneeded s each "," find_unneeded s [] add "," find_unneeded s [] "]}," RuboCop Cop Lint NonLocalExitFromIterator lambda?":{"type":"method","name":"lambda?","children":[],"call":["selector_node == ","receiver_node nil? "]}," RuboCop Cop Lint NestedMethodDefinition on_method_def":{"type":"method","name":"on_method_def","children":[],"call":[" add_offense ","node each_descendant "," find_nested_defs "]}," RuboCop Cop Lint LiteralInInterpolation autocorrected_value":{"type":"method","name":"autocorrected_value","children":[],"call":["node loc expression source ","node loc expression ","node loc ","node children last ","node children ","node str_type? ","node source "," autocorrected_value_for_symbol ","node type ","node source gsub ","node children last to_f to_s ","node children last to_f ","node children last to_i to_s ","node children last to_i "," autocorrected_value_for_array "," autocorrected_value_for_string "," autocorrected_value_for_hash "]}," RuboCop Cop Lint LiteralInInterpolation autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," lambda "," autocorrected_value ","node parent loc expression ","node parent loc ","node parent ","node parent source_range ","node dstr_type? "," autocorrected_ autocorrected_value  ","node parent loc node parent loc expression ession "]}," RuboCop Cop Cop reference_url":{"type":"method","name":"reference_url","children":[],"call":["url empty? ","url nil? "," cop_config [] "," cop_config "," cop_config []  empty? "," cop_config []  nil? "]}," RuboCop Cop Style RedundantReturn arguments?":{"type":"method","name":"arguments?","children":[],"call":["args first children empty? ! ","args first children empty? ","args first children ","args first ","args first begin_type? ! ","args first begin_type? ","args size > ","args size ","args empty? "]}," RuboCop Cop Lint UnneededDisable add_offenses":{"type":"method","name":"add_offenses","children":[],"call":[" add_offense ","cops sort join ","cops sort ","unneeded_cops each "," describe ","cop_ranges each ","cop_ranges map ","r begin_pos ","cop_ranges sort_by! "," cop_range ","cops map ","cop_list join ","cops sort map ","comment loc expression ","comment loc "," directive_count == ","cops size "," directive_count "," all_disabled? "," add_offense_for_some_cops "," add_offense_for_entire_comment "]}," RuboCop Cop Lint UnneededDisable ignore_offense?":{"type":"method","name":"ignore_offense?","children":[],"call":["range include? ","line_range max ","line_range min ","disabled_ranges any? ","range cover? "]}," RuboCop Cop Lint UnneededDisable all_disabled?":{"type":"method","name":"all_disabled?","children":[],"call":["comment loc expression source =~ ","comment loc expression source ","comment loc expression ","comment loc ","comment text =~ ","comment text "]}," RuboCop Options validate_exclude_limit_option":{"type":"method","name":"validate_exclude_limit_option","children":[],"call":[" fail ","args include? ","@options [] ","@options [] !~ "]}," RuboCop Formatter DisabledConfigFormatter output_exclude_list":{"type":"method","name":"output_exclude_list","children":[],"call":["output puts ","file_path relative_path_from ","Pathname  new ","offending_files each ","Dir  pwd "," require ","(send\n  (lvar :default_excludes) :+\n  (lvar :offending_files)) each ","default_excludes + ","default_cfg [] ","RuboCop ConfigLoader  default_configuration [] ","RuboCop ConfigLoader  default_configuration ","excludes each ","(send\n  (begin\n    (or\n      (send\n        (lvar :cfg) :[]\n        (str \"Exclude\"))\n      (array))) :+\n  (lvar :offending_files)) uniq ","(or\n  (send\n    (lvar :cfg) :[]\n    (str \"Exclude\"))\n  (array)) + ","cfg [] ","config [] ","ConfigStore  new for ","ConfigStore  new "," output_exclude_path "," excludes each "," excludes ","output_buffer puts ","file_path file_path relative_path_from _path_from ","Pathname  new  relative_path_from ","(send\n  (lvar :default_(send\n  (begin\n    (or\n      (send\n        (lvar :cfg) :[]\n        (str \"Exclude\"))\n      (array))) :+\n  (lvar :offending_files)) uniq ) :+\n  (lvar :offending_files)) each ","default_(send\n  (begin\n    (or\n      (send\n        (lvar :cfg) :[]\n        (str \"Exclude\"))\n      (array))) :+\n  (lvar :offending_files)) uniq  + ","RuboCop ConfigLoader  default_configuration []  [] ","RuboCop ConfigLoader  default_ConfigStore  new for uration [] ","RuboCop ConfigLoader  default_ConfigStore  new for uration ","(send\n  (begin\n    (or\n      (send\n        (lvar :cfg) :[]\n        (str \"Exclude\"))\n      (array))) :+\n  (lvar :offending_files)) uniq  each ","ConfigStore  new for  [] "," (send\n  (begin\n    (or\n      (send\n        (lvar :cfg) :[]\n        (str \"Exclude\"))\n      (array))) :+\n  (lvar :offending_files)) uniq  each "," (send\n  (begin\n    (or\n      (send\n        (lvar :cfg) :[]\n        (str \"Exclude\"))\n      (array))) :+\n  (lvar :offending_files)) uniq  "]}," RuboCop Formatter DisabledConfigFormatter output_offending_files":{"type":"method","name":"output_offending_files","children":[],"call":[" output_exclude_list ","output puts ","offending_files count > ","offending_files count ","@files_with_offences [] uniq sort ","@files_with_offences [] uniq ","@files_with_offences [] ","cfg empty? ","@files_with_offenses [] uniq sort ","@files_with_offenses [] uniq ","@files_with_offenses [] ","output_buffer puts ","@files_with_offenses [] sort "," no_exclude_limit? ! "," no_exclude_limit? ","@files_with_offences [] uniq sort  count > ","@files_with_offenses [] uniq sort  count > ","@files_with_offenses [] sort  count > ","@files_with_offences [] uniq sort  count ","@files_with_offenses [] uniq sort  count ","@files_with_offenses [] sort  count "]}," RuboCop Formatter DisabledConfigFormatter file_started":{"type":"method","name":"file_started","children":[],"call":["(or\n  (ivar :@exclude_limit_option)\n  (const\n    (const\n      (const nil :RuboCop) :Options) :DEFAULT_MAXIMUM_EXCLUSION_ITEMS)) to_i ","file_info fetch [] ","file_info fetch ","@options [] ! ","@options [] "," Integer ","(or\n  (ivar :(or\n  (ivar :@exclude_limit_option)\n  (const\n    (const\n      (const nil :RuboCop) :Options) :DEFAULT_MAXIMUM_EXCLUSION_ITEMS)) to_i _option)\n  (const\n    (const\n      (const nil :RuboCop) :Options) :DEFAULT_MAXIMUM_EXCLUSION_ITEMS)) to_i ","(or\n  (ivar : Integer _option)\n  (const\n    (const\n      (const nil :RuboCop) :Options) :DEFAULT_MAXIMUM_EXCLUSION_ITEMS)) to_i ","(or\n  (ivar :file_info fetch [] )\n  (const\n    (const\n      (const nil :RuboCop) :Options) :DEFAULT_MAXIMUM_EXCLUSION_ITEMS)) to_i ","(or\n  (ivar :@options [] )\n  (const\n    (const\n      (const nil :RuboCop) :Options) :DEFAULT_MAXIMUM_EXCLUSION_ITEMS)) to_i "]}," RuboCop Cop Style WordArray autocorrect_words":{"type":"method","name":"autocorrect_words","children":[],"call":["(send\n  (lvar :word_nodes) :map) join ","line_breaks + "," source_for ","node loc line ","node loc ","\n * ","node loc line - ","word_nodes map ","content gsub! "," escape_string ","node children [] ","node children ","node children first ","\n *  + "," escape_string  gsub! ","node children []  gsub! ","node children first  gsub! "]}," RuboCop Cop Style TrivialAccessors in_module?":{"type":"method","name":"in_module?","children":[],"call":["pnode type == ","pnode type ","pnode nil? ! ","pnode nil? ","pnode parent ","node parent ","pnode parent  type == ","node parent  type == ","pnode parent  type ","node parent  type ","pnode parent  nil? ! ","node parent  nil? ! ","pnode parent  nil? ","node parent  nil? ","pnode parent  parent ","node parent  parent "]}," RuboCop Cop Style Send on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","args length > ","args length ","method_name == ","args empty? ! ","args empty? "," sending? ","node arguments? ","node loc selector ","node loc "]}," RuboCop Cop Style RescueModifier investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense ","t pos ","t type == ","t type ","processed_source tokens each ","processed_source tokens ","(send\n  (send\n    (lvar :processed_source) :tokens) :select) map ","processed_source tokens select "]}," RuboCop Cop Style RescueEnsureAlignment ancestor_node":{"type":"method","name":"ancestor_node","children":[],"call":["node each_ancestor first ","node each_ancestor "]}," RuboCop Cop Style RescueEnsureAlignment modifier?":{"type":"method","name":"modifier?","children":[],"call":["@modifier_locations include? ","node loc keyword ","node loc ","@modifier_locations respond_to? "]}," RuboCop Cop Style RescueEnsureAlignment check":{"type":"method","name":"check","children":[],"call":[" add_offense "," format ","end_loc column ","end_loc line ","kw_loc column ","kw_loc line ","kw_loc source ","node loc keyword ","node loc ","end_loc column == ","node loc keyword column "," ancestor_node loc end "," ancestor_node loc "," ancestor_node ","end_loc line == ","node loc keyword line "," format_message "," ancestor_node loc end  column "," ancestor_node loc end  line ","node loc keyword  column ","node loc keyword  line ","node loc keyword  source "," ancestor_node loc end  column == "," ancestor_node loc end  line == "]}," RuboCop Cop Style RescueEnsureAlignment autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","  * "," lambda "," ancestor_node loc end column "," ancestor_node loc end "," ancestor_node loc "," ancestor_node ","whitespace source strip empty? ","whitespace source strip ","whitespace source ","Parser Source Range  new ","begin_pos - ","node loc keyword column ","node loc keyword ","node loc ","node loc keyword begin_pos ","node loc keyword source_buffer "," whitespace_range ","Parser Source Range  new  source strip empty? "," whitespace_range  source strip empty? ","Parser Source Range  new  source strip "," whitespace_range  source strip ","Parser Source Range  new  source "," whitespace_range  source ","node loc keyword begin_pos  - ","node loc keyword node loc keyword begin_pos  ","node loc keyword node loc keyword source_buffer  "," Parser Source Range  new _range ","  whitespace_range _range "]}," RuboCop Cop Style RescueEnsureAlignment investigate":{"type":"method","name":"investigate","children":[],"call":["(send\n  (send\n    (lvar :processed_source) :tokens) :select) map ","t type == ","t type ","processed_source tokens select ","processed_source tokens ","locations << ","token pos ","token type == ","token type ","processed_source tokens each_with_object "]}," RuboCop Cop Style RescueEnsureAlignment on_ensure":{"type":"method","name":"on_ensure","children":[],"call":[" check "]}," RuboCop Cop Style RescueEnsureAlignment on_resbody":{"type":"method","name":"on_resbody","children":[],"call":[" check "," modifier? "]}," RuboCop Cop Style RedundantReturn add_braces":{"type":"method","name":"add_braces","children":[],"call":["corrector insert_after ","kids last ","corrector insert_before ","kids first ","child loc expression ","child loc ","node children map ","node children ","node children last ","node children first ","node children map  last ","node children map  first "]}," RuboCop Cop Style RedundantReturn add_brackets":{"type":"method","name":"add_brackets","children":[],"call":["corrector insert_after ","kids last ","corrector insert_before ","kids first ","child loc expression ","child loc ","node children map ","node children ","node children last ","node children first ","node children map  last ","node children map  first "]}," RuboCop Cop Style RedundantReturn braces?":{"type":"method","name":"braces?","children":[],"call":["arg loc begin ","arg loc "]}," RuboCop Cop Style OptionalArguments on_def":{"type":"method","name":"on_def","children":[],"call":[" add_offense "," format ","arguments [] ","optarg_position > ","arg_positions max ","optarg_positions each ","arg_positions empty? ","optarg_positions empty? ","arg_positions << ","argument arg_type? ","optarg_positions << ","argument optarg_type? ","arguments each_with_index "," each_misplaced_optional_arg ","node arguments ","arguments [] s [] ","arguments []  arg_type? ","arguments []  optarg_type? ","arguments [] s each_with_index ","node arguments [] s "]}," RuboCop Cop Style OptionHash supports_keyword_arguments?":{"type":"method","name":"supports_keyword_arguments?","children":[],"call":["RUBY_VERSION  >= "]}," RuboCop Cop Style OptionHash on_args":{"type":"method","name":"on_args","children":[],"call":[" add_offense ","key_value_pairs empty? ","default_value hash_type? ","last_arg optarg_type? "," supports_keyword_arguments? "," name_in_suspicious_param_names? "," suspicious_name? ","default_value pairs empty? ","default_value pairs "," option_hash "," super_used? "," whitelist include? ","node parent method_name to_s ","node parent method_name ","node parent "," whitelist "," allowlist include? "," allowlist "]}," RuboCop Cop Style MethodCallParentheses same_name_assignment?":{"type":"method","name":"same_name_assignment?","children":[],"call":["asgn_node loc name source == ","method_name to_s ","asgn_node loc name source ","asgn_node loc name ","asgn_node loc ","mlhs_node children [] ","node sibling_index ","mlhs_node children ","asgn_node masgn_type? ","node each_ancestor any? ","node each_ancestor ","asgn_node send_type? ","asgn_node and_asgn_type? ","asgn_node or_asgn_type? ","vars include? ","(lvasgn :_b\n  (array\n    (splat\n      (lvar :n)))) first ","var_nodes map ","asgn_node op_asgn_type? "," variable_in_mass_assignment? "," any_assignment? ","mlhs_node children []  loc name source == ","mlhs_node children []  loc name source ","mlhs_node children []  loc name ","mlhs_node children []  loc ","mlhs_node children []  masgn_type? ","mlhs_node children []  send_type? ","mlhs_node children []  and_asgn_type? ","mlhs_node children []  or_asgn_type? ","mlhs_node children []  op_asgn_type? "]}," RuboCop Cop Style InitialIndentation autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove "," lambda "]}," RuboCop Cop Style InitialIndentation investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense ","first_token pos ","Parser Source Range  new ","first_token pos begin_pos ","with_space begin_pos ","processed_source buffer "," range_with_surrounding_space ","with_newline ! ","first_token pos column == ","first_token pos column ","t text start_with? ! ","t text start_with? ","t text ","processed_source tokens find ","processed_source tokens ","with_space == ","first_token pos column zero? ","token pos "," space_before "," first_token ","first_ first_token  pos ","first_ first_token  pos begin_pos ","with_Parser Source Range  new  begin_pos "," range_with_surrounding_space  begin_pos "," range_with_surrounding_Parser Source Range  new  ","first_ first_token  pos column == ","first_ first_token  pos column ","processed_source  first_token s find ","processed_source  first_token s ","with_Parser Source Range  new  == "," range_with_surrounding_space  == ","first_ first_token  pos column zero? "," first_token  pos "," Parser Source Range  new _before "," first_ first_token  "]}," RuboCop Cop Style IndentationWidth other_offense_in_same_range?":{"type":"method","name":"other_offense_in_same_range?","children":[],"call":["@offense_ranges << "," within? ","@offense_ranges any? ","node loc expression ","node loc ","node source_range ","node loc node loc expression ession ","node loc node source_range ession "]}," RuboCop Cop Style ExtraSpacing aligned_same_character?":{"type":"method","name":"aligned_same_character?","children":[],"call":["line [] == ","token text [] ","token text ","line [] ","token pos column ","token pos ","token text to_s [] ","token text to_s "]}," RuboCop Cop Style ExtraSpacing aligned_assignments?":{"type":"method","name":"aligned_assignments?","children":[],"call":["line [] == ","line [] ","token pos column + ","token text length ","token text ","token pos column ","token pos ","token type == ","token type "]}," RuboCop Cop Style ExtraSpacing aligned_words?":{"type":"method","name":"aligned_words?","children":[],"call":["line [] =~ ","line [] ","token pos column - ","token pos column ","token pos "]}," RuboCop Cop Style ExtraSpacing comment_lines":{"type":"method","name":"comment_lines","children":[],"call":["whole_line_comments map map ","whole_line_comments map "," begins_its_line? ","c loc expression ","c loc "," processed_source comments select "," processed_source comments "," processed_source ","c loc line "]}," RuboCop Cop Style ExtraSpacing aligned_with?":{"type":"method","name":"aligned_with?","children":[],"call":[" aligned_same_character? "," aligned_assignments? "," aligned_words? ","line strip empty? ","line strip "," processed_source lines [] "," processed_source lines "," processed_source "," comment_lines include? ","ix + "," comment_lines ","indices_to_check each ","indentation != ","line =~ "," processed_source lines []  strip empty? "," processed_source lines []  strip "," processed_source  processed_source lines [] s [] "," processed_source  processed_source lines [] s "," comment_ processed_source lines [] s include? "," comment_ processed_source lines [] s ","line =~  != "," processed_source lines []  =~ "]}," RuboCop Cop Style ExtraSpacing comment_column":{"type":"method","name":"comment_column","children":[],"call":[" processed_source comments [] loc column "," processed_source comments [] loc "," processed_source comments [] "," processed_source comments "," processed_source "]}," RuboCop Cop Style ExtraSpacing aligned_with_next_comment?":{"type":"method","name":"aligned_with_next_comment?","children":[],"call":[" comment_column == "," comment_column ","ix + ","ix < "," processed_source comments length - "," processed_source comments length "," processed_source comments "," processed_source "]}," RuboCop Cop Style ExtraSpacing aligned_with_previous_comment?":{"type":"method","name":"aligned_with_previous_comment?","children":[],"call":[" comment_column == "," comment_column ","ix - ","ix > "]}," RuboCop Cop Style ExtraSpacing aligned_comments?":{"type":"method","name":"aligned_comments?","children":[],"call":[" aligned_with_next_comment? "," aligned_with_previous_comment? ","c loc expression begin_pos == ","token pos begin_pos ","token pos ","c loc expression begin_pos ","c loc expression ","c loc "," processed_source comments index "," processed_source comments "," processed_source "]}," RuboCop Cop Style ExtraSpacing aligned_with_something?":{"type":"method","name":"aligned_with_something?","children":[],"call":[" aligned_with? ","token pos line upto "," processed_source lines size - "," processed_source lines size "," processed_source lines "," processed_source ","token pos line ","token pos ","(send\n  (send\n    (send\n      (lvar :token) :pos) :line) :-\n  (int 2)) downto ","token pos line - "," aligned_comments? ","token type == ","token type "," processed_source lines [] =~ "," processed_source lines [] "]}," RuboCop Cop Style ExtraSpacing allow_for_alignment?":{"type":"method","name":"allow_for_alignment?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style BlockDelimiters array_or_range?":{"type":"method","name":"array_or_range?","children":[],"call":["node erange_type? ","node irange_type? ","node array_type? ","node range_type? "]}," RuboCop Cop Performance StringReplacement require_double_quotes?":{"type":"method","name":"require_double_quotes?","children":[],"call":["StringHelp ESCAPED_CHAR_REGEXP  =~ ","string inspect ","string inspect include? "]}," RuboCop Cop Performance StringReplacement escape":{"type":"method","name":"escape","children":[],"call":["string inspect "," require_double_quotes? "]}," RuboCop Cop Performance StringReplacement bang_method?":{"type":"method","name":"bang_method?","children":[],"call":["method to_s end_with? ","method to_s "]}," RuboCop Cop Performance StringReplacement message":{"type":"method","name":"message","children":[],"call":[" format "," bang_method? "," replacement_method ","node method_name ","  replacement_method  "]}," RuboCop Cop Performance StringReplacement replacement_method":{"type":"method","name":"replacement_method","children":[],"call":["first_source length == ","first_source length ","second_source empty? "," bang_method? ","node bang_method? "]}," RuboCop Cop Performance StringReplacement range":{"type":"method","name":"range","children":[],"call":["Parser Source Range  new ","node loc expression end_pos ","node loc expression ","node loc ","node loc selector begin_pos ","node loc selector ","node loc expression source_buffer ","node source_range end_pos ","node source_range ","node source_range source_buffer "," range_between "]}," RuboCop Cop Performance StringReplacement regex?":{"type":"method","name":"regex?","children":[],"call":["REGEXP_CONSTRUCTOR_METHODS  include? ","klass == ","node regexp_type? "]}," RuboCop Cop Performance StringReplacement source_from_regex_constructor":{"type":"method","name":"source_from_regex_constructor","children":[],"call":[" source_from_regex_literal ","regex type "]}," RuboCop Cop Performance StringReplacement source_from_regex_literal":{"type":"method","name":"source_from_regex_literal","children":[],"call":[]}," RuboCop Cop Performance StringReplacement extract_source":{"type":"method","name":"extract_source","children":[],"call":[" source_from_regex_constructor "," source_from_regex_literal ","node type "]}," RuboCop Cop Performance StringReplacement first_source":{"type":"method","name":"first_source","children":[],"call":[" extract_source "," regex? ","first_param type ","first_param children first ","first_param children "," source_from_regex_constructor "," source_from_regex_literal "]}," RuboCop Cop Performance StringReplacement autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," range "," escape "," bang_method? ","first_source length == ","first_source length ","second_source empty? "," lambda "," replacement_method "," first_source "," remove_second_param ","first_param loc expression ","first_param loc ","first_param str_type? ","node loc selector ","node loc "," to_string_literal ","first_param source_range "," interpret_string_escapes "," regex? "," replace_method "," first_source  length == "," interpret_string_escapes  length == "," first_source  length "," interpret_string_escapes  length ","  replacement_method  ","  first_source  ","  interpret_string_escapes  "]}," RuboCop Cop Performance StringReplacement on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," range "," message ","second_source length <= ","second_source length ","first_source length != ","first_source length ","first_source =~ "," regex? ","first_source nil? "," first_source ","DETERMINISTIC_TYPES  include? ","first_param type ","second_param str_type? ","GSUB_METHODS  include? "," string? "," interpret_string_escapes "," offense "," accept_first_param? "," accept_second_param? "," string_replacement? ","  message  "," first_source  length != "," interpret_string_escapes  length != "," first_source  length "," interpret_string_escapes  length "," first_source  =~ "," interpret_string_escapes  =~ "," first_source  nil? "," interpret_string_escapes  nil? ","  first_source  ","  interpret_string_escapes  "]}," RuboCop Cop Performance Detect lazy?":{"type":"method","name":"lazy?","children":[],"call":["receiver nil? ! ","receiver nil? ","method == ","node nil? "]}," RuboCop Cop OnMethodDef modifier_and_def_on_same_line?":{"type":"method","name":"modifier_and_def_on_same_line?","children":[],"call":["(sym :def) include? ","args first type ","args first ","args size == ","args size ","method_name != ","receiver ! ","send_node method_args first type ","send_node method_args first ","send_node method_args ","send_node method_args size == ","send_node method_args size ","send_node method_name != ","send_node method_name ","send_node receiver nil? ","send_node receiver ","send_node first_argument type ","send_node first_argument ","send_node arguments one? ","send_node arguments ","send_node receiver ! "]}," RuboCop Cop Lint FormatParameterMismatch message":{"type":"method","name":"message","children":[],"call":[" format ","% == ","method_name to_s "," count_matches ","PERCENT  == ","node method_name ","node method_name to_s == ","node method_name to_s ","node method? ","node method_name  to_s ","node node method_name  ","node node method_name  to_s == ","node node method_name  to_s "]}," RuboCop Cop Lint FormatParameterMismatch percent?":{"type":"method","name":"percent?","children":[],"call":["arg_nodes [] type == ","arg_nodes [] type ","arg_nodes [] ","(sym :str) include? ","receiver_node type ","method_name == "," heredoc? ","STRING_TYPES  include? ","arg_nodes [] array_type? ","receiver type ","node first_argument array_type? ","node first_argument ","node method_name == ","node method_name ","node receiver ","node method? "," string_type? ","node receiver _node type ","node receiver  type ","node node receiver  "]}," RuboCop Cop Lint FormatParameterMismatch sprintf?":{"type":"method","name":"sprintf?","children":[],"call":[" format_method? "]}," RuboCop Cop Lint FormatParameterMismatch format?":{"type":"method","name":"format?","children":[],"call":[" format_method? "]}," RuboCop Cop Lint FormatParameterMismatch expected_fields":{"type":"method","name":"expected_fields","children":[],"call":["node loc expression source scan ","node loc expression source ","node loc expression ","node loc "]}," RuboCop Cop Lint FormatParameterMismatch format_method?":{"type":"method","name":"format_method?","children":[],"call":["str == ","args first type ","args first ","args size > ","args size ","method_name == ","receiver ! ","args first str_type? ","receiver loc name is? ","receiver loc name ","receiver loc ","receiver const_type? ","node first_argument str_type? ","node first_argument ","node arguments size > ","node arguments size ","node arguments ","node method? ","node receiver loc name is? ! ","node receiver loc name is? ","node receiver loc name ","node receiver loc ","node receiver ","node const_receiver? "," string_type? "]}," RuboCop Cop Lint FormatParameterMismatch count_matches":{"type":"method","name":"count_matches","children":[],"call":[" expected_fields size "," expected_fields ","args first child_nodes size ","args first child_nodes ","args first "," percent? ","args size - ","args size "," format? "," sprintf? "," expected_fields_count ","first_child_argument type == ","first_child_argument type "," heredoc? ! "," heredoc? ","first_child_argument array_type? "," literal? ","args first array_type? "," arguments_count "," arguments_count - ","(sym :unknown) * "," count_percent_matches "," countable_percent? "," count_format_matches "," countable_format? ","args first  type == ","args first  type ","args first  array_type? "]}," RuboCop Cop Lint FormatParameterMismatch offending_node?":{"type":"method","name":"offending_node?","children":[],"call":["num_of_expected_fields != "," count_matches "," percent? "," format? "," sprintf? "," named_mode? "," node_with_splat_args? "," called_on_string? ","num_of_format_args != "," method_with_format_args? "," matched_arguments_count? ","num_of_format_args == "," splat_args? ","node child_nodes first dstr_type? ","node child_nodes first ","node child_nodes ","num_of_expected_fields zero? ","first_arg array_type? ","first_arg dstr_type? ","node first_argument ","node first_argument  array_type? ","node first_argument  dstr_type? ","node node first_argument ument "]}," RuboCop Cop Lint FormatParameterMismatch on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," offending_node? "," invalid_format_string? "," format_string? "," message ","node loc selector ","node loc ","FORMAT_METHODS  include? ","node method_name "]}," RuboCop Cop Lint FormatParameterMismatch fields_regex":{"type":"method","name":"fields_regex","children":[],"call":[]}," RuboCop Cop Lint DeprecatedClassMethods method_call":{"type":"method","name":"method_call","children":[],"call":[" format "]}," RuboCop Cop Lint DeprecatedClassMethods check":{"type":"method","name":"check","children":[],"call":["block call ","method_name == ","data deprecated_method "," class_nodes include? "," class_nodes ","DEPRECATED_METHODS_OBJECT  each ","data class_nodes include? ","data class_nodes ","node method? ","node receiver ","deprecated method ","deprecated class_nodes include? ","deprecated class_nodes ","DEPRECATED_METHODS_OBJECT  each_key "]}," RuboCop Cop Lint DeprecatedClassMethods DeprecatedClassMethod initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop Cop Lint CircularArgumentReference on_kwoptarg":{"type":"method","name":"on_kwoptarg","children":[],"call":[" add_offense "," format ","arg_value to_a == ","arg_value to_a ","receiver nil? ","name == ","arg_value type "," check_for_circular_argument_references "]}," RuboCop ConfigLoader transform":{"type":"method","name":"transform","children":[],"call":["Hash  [] ","config map "]}," RuboCop Runner get_processed_source":{"type":"method","name":"get_processed_source","children":[],"call":["ProcessedSource  from_file ","ProcessedSource  new ","@options [] ","@config_store for [] [] ","@config_store for [] ","@config_store for ","@config_store for for_all_cops [] ","@config_store for for_all_cops ","@config_store for target_ruby_version "," raise ","@config_store for_file target_ruby_version ","@config_store for_file ","processed_source registry= "," mobilized_cop_classes ","processed_source config= ","config target_ruby_version ","@@config_store for_file _store for [] [] ","@@config_store for_file _store for [] ","@@config_store for_file _store for ","@@config_store for_file _store for for_all_cops [] ","@@config_store for_file _store for for_all_cops ","@config_store for target_@config_store for [] []  ","@config_store for target_@config_store for for_all_cops []  ","@config_store for target_@config_store for target_ruby_version  ","@config_store for target_@config_store for_file target_ruby_version  ","@config_store for target_config target_ruby_version  ","@@config_store for_file _store for target_ruby_version ","@config_store for_file target_@config_store for [] []  ","@config_store for_file target_@config_store for for_all_cops []  ","@config_store for_file target_@config_store for target_ruby_version  ","@config_store for_file target_@config_store for_file target_ruby_version  ","@config_store for_file target_config target_ruby_version  ","@@config_store for_file _store for_file target_ruby_version ","@@config_store for_file _store for_file ","ProcessedSource  new  registry= ","ProcessedSource  new  config= ","processed_source @config_store for_file = ","config target_@config_store for [] []  ","config target_@config_store for for_all_cops []  ","config target_@config_store for target_ruby_version  ","config target_@config_store for_file target_ruby_version  ","config target_config target_ruby_version  ","@config_store for_file  target_ruby_version "]}," RuboCop Runner cached_run?":{"type":"method","name":"cached_run?","children":[],"call":["@options [] ! ","@options [] ","@config_store for [] [] ","@config_store for [] ","@config_store for ","Dir  pwd ","@options [] != ","@options [] == ","@config_store for for_all_cops [] ","@config_store for for_all_cops ","@config_store for_dir for_all_cops [] ","@config_store for_dir for_all_cops ","@config_store for_dir ","@config_store for_pwd for_all_cops [] ","@config_store for_pwd for_all_cops ","@config_store for_pwd "]}," RuboCop Runner file_started":{"type":"method","name":"file_started","children":[],"call":[" formatter_set file_started "," formatter_set "," puts ","@options [] "]}," RuboCop Runner list_files":{"type":"method","name":"list_files","children":[],"call":[" puts ","PathUtil  relative_path ","paths each "]}," RuboCop ResultCache relevant_options":{"type":"method","name":"relevant_options","children":[],"call":["options to_s gsub ","options to_s ","NON_CHANGING  include? ","options reject "]}," RuboCop ResultCache rubocop_checksum":{"type":"method","name":"rubocop_checksum","children":[],"call":["Digest MD5  hexdigest ","source join ","IO  read ","File  file? ","Find  find sort map ","Find  find sort ","Find  find ","File  join ","File  dirname ","ResultCache  source_checksum ","sources join ","(send\n  (lvar :source_files) :select) sort map ","(send\n  (lvar :source_files) :select) sort ","source_files select ","$LOADED_FEATURES + ","Find  find to_a ","Digest SHA1  hexdigest ","digest hexdigest ","digest << ","File  mtime to_s ","File  mtime ","(send\n  (lvar :source_files) :select) sort! each ","(send\n  (lvar :source_files) :select) sort! ","Digest SHA1  new ","digest << << ","Zlib  crc32 to_s ","Zlib  crc32 ","File  open ","(send\n  (send nil :rubocop_extra_features) :select) sort! each ","(send\n  (send nil :rubocop_extra_features) :select) sort! "," rubocop_extra_features select "," rubocop_extra_features ","File  binread "," digest ","Digest MD5  hexDigest SHA1  new  ","(send\n  (lvar :$LOADED_FEATURES + ) :select) sort map ","(send\n  (lvar :$LOADED_FEATURES + ) :select) sort ","$LOADED_FEATURES +  select ","Digest SHA1  hexDigest SHA1  new  ","Digest SHA1  new  hexDigest SHA1  new  ","Digest SHA1  new  << ","(send\n  (lvar :$LOADED_FEATURES + ) :select) sort! each ","(send\n  (lvar :$LOADED_FEATURES + ) :select) sort! ","Digest SHA1  new  << << "," Digest SHA1  new  "]}," RuboCop ResultCache file_checksum":{"type":"method","name":"file_checksum","children":[],"call":["Digest MD5  hexdigest ","Dir  pwd + + + ","config_store for to_s ","config_store for ","Dir  pwd + + ","IO  read ","Dir  pwd + ","Dir  pwd ","Dir  pwd + + + + ","File  stat mode to_s ","File  stat mode ","File  stat ","IO  binread ","digester hexdigest ","digester file ","digester update ","config_store for signature ","Digest MD5  new ","Digest SHA1  new ","config_store for_file signature ","config_store for_file ","File  stat File  stat mode  to_s ","File  stat File  stat mode  ","Digest MD5  new  hexdigest ","Digest SHA1  new  hexdigest ","Digest MD5  new  file ","Digest SHA1  new  file ","Digest MD5  new  update ","Digest SHA1  new  update "]}," RuboCop ResultCache cache_root":{"type":"method","name":"cache_root","children":[],"call":[]}," RuboCop ResultCache cleanup":{"type":"method","name":"cleanup","children":[],"call":[]}," RuboCop ResultCache save":{"type":"method","name":"save","children":[],"call":["FileUtils  mv ","f write ","Marshal  dump ","Hash  [] ","disabled_line_ranges sort ","File  open "," rand ","FileUtils  mkdir_p ","File  dirname ","@cached_data to_json "," any_symlink? "," symlink_protection_triggered? "," warn ","e message ","ex message ","FileUtils  mkFile  dirname _p ","File  File  dirname name "]}," RuboCop ResultCache load":{"type":"method","name":"load","children":[],"call":["Marshal  load ","IO  read ","IO  binread ","@cached_data from_json "," puts "," debug? ","File  read "]}," RuboCop ResultCache valid?":{"type":"method","name":"valid?","children":[],"call":["File  exist? "]}," RuboCop ResultCache initialize":{"type":"method","name":"initialize","children":[],"call":["File  join "," file_checksum "," relevant_options "," rubocop_checksum ","ResultCache  cache_root ","CachedData  new "," relevant_options_digest ","ResultCache  allow_symlinks_in_cache_location? ","Dir  pwd "," context_checksum ","options [] "]}," RuboCop Options add_list_options":{"type":"method","name":"add_list_options","children":[],"call":[" option "]}," RuboCop Cop Style SymbolProc super?":{"type":"method","name":"super?","children":[],"call":["(sym :super) include? ","node type ","SUPER_TYPES  include? "]}," RuboCop Cop Style SymbolProc begin_pos_for_replacement":{"type":"method","name":"begin_pos_for_replacement","children":[],"call":["node loc begin begin_pos ","node loc begin ","node loc ","expr begin_pos + ","expr begin_pos ","expr source =~ ","expr source ","block_send_or_super loc expression ","block_send_or_super loc ","block_send_or_super source_range ","node send_node source_range ","node send_node ","block_send_or_super loc expression  begin_pos + ","block_send_or_super source_range  begin_pos + ","node send_node source_range  begin_pos + ","block_send_or_super loc expression  begin_pos ","block_send_or_super source_range  begin_pos ","node send_node source_range  begin_pos ","block_send_or_super loc expression  source =~ ","block_send_or_super source_range  source =~ ","node send_node source_range  source =~ ","block_send_or_super loc expression  source ","block_send_or_super source_range  source ","node send_node source_range  source ","block_send_or_super loc block_send_or_super loc expression ession ","block_send_or_super loc block_send_or_super source_range ession ","block_send_or_super loc node send_node source_range ession "]}," RuboCop Cop Style SymbolProc block_range_with_space":{"type":"method","name":"block_range_with_space","children":[],"call":[" range_with_surrounding_space ","Parser Source Range  new ","node loc end end_pos ","node loc end ","node loc "," begin_pos_for_replacement ","node loc expression source_buffer ","node loc expression ","node source_range source_buffer ","node source_range "," range_between "]}," RuboCop Cop Style SymbolProc autocorrect_with_args":{"type":"method","name":"autocorrect_with_args","children":[],"call":["corrector remove "," block_range_with_space ","corrector insert_after ","args last loc expression ","args last loc ","args last ",", + ","arg_range source end_with? ","arg_range source "," range_with_surrounding_comma ","args last source_range "," range_with_surrounding_comma  source end_with? ","args last source_range  source end_with? "," range_with_surrounding_comma  source ","args last source_range  source "]}," RuboCop Cop Style SymbolProc autocorrect_no_args":{"type":"method","name":"autocorrect_no_args","children":[],"call":["corrector replace "," block_range_with_space "]}," RuboCop Cop Style SymbolProc autocorrect_method":{"type":"method","name":"autocorrect_method","children":[],"call":[" autocorrect_with_args "," autocorrect_no_args ","args empty? "]}," RuboCop Cop Style StringMethods autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," preferred_method ","node loc selector source ","node loc selector ","node loc "," lambda ","node method_name "]}," RuboCop Cop Style StringMethods on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format "," preferred_method "," preferred_methods [] "," preferred_methods ","node method_name ","corrector replace ","node loc selector ","node loc ","  preferred_method  ","  preferred_method s [] ","  preferred_method s "]}," RuboCop Cop Style RescueModifier modifier?":{"type":"method","name":"modifier?","children":[],"call":["@modifier_locations include? ","node loc keyword ","node loc ","@modifier_locations respond_to? "]}," RuboCop Cop Style RescueModifier autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," lambda ","Parser Source Range  new ","node loc expression end_pos ","node loc expression ","node loc ","node loc expression begin_pos ","node loc expression source_buffer ","begin\n << << << << << << "," offset ","begin\n << << << << << ","rescue_args loc expression source ","rescue_args loc expression ","rescue_args loc ","begin\n << << << << "," indentation ","begin\n << << << ","begin\n << << ","operation loc expression source ","operation loc expression ","operation loc ","begin\n << ","node source_range end_pos ","node source_range ","node source_range begin_pos ","node source_range source_buffer ","rescue_args source ","operation source ","rescue_args source gsub ","operation source gsub ","ParenthesesCorrector  correct ","node parent "," corrected_block "," parenthesized? ","  indentation ation ","node source_Parser Source Range  new  end_pos ","node source_Parser Source Range  new  ","node source_Parser Source Range  new  begin_pos ","node source_Parser Source Range  new  source_buffer ","  parenthesized? ? "]}," RuboCop Cop Style RescueModifier on_resbody":{"type":"method","name":"on_resbody","children":[],"call":[" add_offense ","node parent "," modifier? "," rescue_modifier? ","ParenthesesCorrector  correct ","rescue_node parent "," correct_rescue_block "," parenthesized? ","node parent  parent ","  parenthesized? ? "]}," RuboCop Cop Style RedundantFreeze autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove ","node loc selector ","node loc ","node loc dot "," lambda "]}," RuboCop Cop Style RedundantFreeze on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","args empty? ","method_name == ","TARGET_NODES  include? ","receiver type ","receiver immutable_literal? "," immutable_literal? "," freezing? ","node receiver ","node method? "," operation_produces_immutable_object? ","corrector remove ","node loc selector ","node loc ","node loc dot "]}," RuboCop Cop Style OptionHash name_in_suspicious_param_names?":{"type":"method","name":"name_in_suspicious_param_names?","children":[],"call":[" cop_config [] include? ","arg_name to_s "," cop_config [] "," cop_config "," cop_config key? "]}," RuboCop Cop Style Next offense_location":{"type":"method","name":"offense_location","children":[],"call":["offense_begin_pos join ","condition_expression loc expression ","condition_expression loc ","offense_node loc expression begin ","offense_node loc expression ","offense_node loc ","condition_expression source_range ","offense_node source_range begin ","offense_node source_range ","offense_node condition source_range ","offense_node condition ","offense_node loc expression begin  join ","offense_node source_range begin  join "]}," RuboCop Cop Style Next offense_node":{"type":"method","name":"offense_node","children":[],"call":["condition if_type? "]}," RuboCop Cop Style MutableConstant autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","expr source "," lambda ","node loc expression ","node loc ","node source_range ","corrector insert_after ","corrector insert_before ","node loc end nil? ","node loc end ","node loc begin nil? ","node loc begin ","node array_type? ","node square_brackets? ! ","node square_brackets? "," unbracketed_array? ","node bracketed? ! ","node bracketed? ","node erange_type? ","node irange_type? "," requires_parentheses? "," correct_splat_expansion "," splat_value ","corrector wrap ","node loc expression  source ","node source_range  source ","node loc node loc expression ession ","node loc node source_range ession ","  splat_value  "]}," RuboCop Cop Style MutableConstant on_casgn":{"type":"method","name":"on_casgn","children":[],"call":[" add_offense ","MUTABLE_TYPES  include? ! ","MUTABLE_TYPES  include? ","value type ","value mutable_literal? ! ","value mutable_literal? "," on_assignment ","parent children last ","parent children ","parent or_asgn_type? ","node parent ","value nil? ","parent children last  type ","parent children last  mutable_literal? ! ","parent children last  mutable_literal? ","node parent  children last ","node parent  children ","node parent  or_asgn_type? ","node node parent  ","parent children last  nil? "]}," RuboCop Cop Style EmptyLineBetweenDefs single_line_def?":{"type":"method","name":"single_line_def?","children":[],"call":[" def_start == "," def_end "," def_start "]}," RuboCop Cop Style EmptyLineBetweenDefs lines_between_defs":{"type":"method","name":"lines_between_defs","children":[],"call":[" processed_source lines [] "," processed_source lines "," processed_source "," def_start - "," def_start "," def_end "]}," RuboCop Cop Style EmptyLineBetweenDefs prev_node":{"type":"method","name":"prev_node","children":[],"call":["node parent children [] ","node sibling_index - ","node sibling_index ","node parent children ","node parent ","node sibling_index > "]}," RuboCop Cop Style EmptyLineBetweenDefs blank_lines_between?":{"type":"method","name":"blank_lines_between?","children":[],"call":[" lines_between_defs any? "," lines_between_defs ","(irange\n  (send nil :minimum_empty_lines)\n  (send nil :maximum_empty_lines)) cover? "," maximum_empty_lines "," minimum_empty_lines "," blank_lines_count_between "," blank_lines_ blank_lines_count_between _between "]}," RuboCop Cop Style EmptyLineBetweenDefs def_node?":{"type":"method","name":"def_node?","children":[],"call":["node defs_type? ","node def_type? "]}," RuboCop Cop Style EmptyLineBetweenDefs on_method_def":{"type":"method","name":"on_method_def","children":[],"call":[" add_offense "," cop_config [] "," cop_config ","nodes all? "," method "," blank_lines_between? "," prev_node ","node parent begin_type? ","node parent "]}," RuboCop Cop Style BlockDelimiters whitespace_before?":{"type":"method","name":"whitespace_before?","children":[],"call":["node source_buffer source [] =~ ","node source_buffer source [] ","node begin_pos - ","node begin_pos ","node source_buffer source ","node source_buffer ","range source_buffer source [] =~ ","range source_buffer source [] ","range begin_pos - ","range begin_pos ","range source_buffer source ","range source_buffer ","(str \"\\\\s\") match? "]}," RuboCop Cop Rails TimeZone offset_provided?":{"type":"method","name":"offset_provided?","children":[],"call":["args length >= ","args length ","node arguments size >= ","node arguments size ","node arguments "]}," RuboCop Cop Performance StringReplacement remove_second_param":{"type":"method","name":"remove_second_param","children":[],"call":["corrector replace ","Parser Source Range  new ","node loc expression end_pos ","node loc expression ","node loc ","first_param loc expression end_pos ","first_param loc expression ","first_param loc ","node loc expression source_buffer "," method_suffix ","node source_range end_pos ","node source_range ","first_param source_range end_pos ","first_param source_range ","node source_range source_buffer "," range_between "]}," RuboCop Cop Performance CaseWhenSplat reorder_splat_condition":{"type":"method","name":"reorder_splat_condition","children":[],"call":["corrector insert_after ","when_branches last loc expression ","when_branches last loc ","when_branches last ","corrector remove "," lambda ","Parser Source Range  new ","next_branch loc expression begin_pos ","next_branch loc expression ","next_branch loc ","node loc expression begin_pos ","node loc expression ","node loc ","node parent ","node loc expression source "," offset ","when_branches [] ","current_index + ","branch == ","when_branches index ","when_branches last source_range ","next_branch source_range begin_pos ","next_branch source_range ","node source_range begin_pos ","node source_range ","node source ","when_branches []  loc expression begin_pos ","when_branches []  loc expression ","when_branches []  loc ","when_branches last source_Parser Source Range  new  ","next_branch source_Parser Source Range  new  begin_pos ","when_branches []  source_range begin_pos ","next_branch source_Parser Source Range  new  ","when_branches []  source_range ","node source_Parser Source Range  new  begin_pos ","node source_Parser Source Range  new  "]}," RuboCop Cop Performance CaseWhenSplat correct_array_literal":{"type":"method","name":"correct_array_literal","children":[],"call":["corrector remove ","variable loc end ","variable loc ","variable loc begin ","condition loc operator ","condition loc "," lambda ","corrector replace "," expand_percent_array ","condition loc expression ","array_start start_with? ","variable loc begin source ","condition source_range ","variable loc begin source  start_with? "]}," RuboCop Cop Performance CaseWhenSplat error_condition?":{"type":"method","name":"error_condition?","children":[],"call":["condition splat_type? ! ","condition splat_type? ","variable array_type? "]}," RuboCop Cop Performance CaseWhenSplat splat_offenses":{"type":"method","name":"splat_offenses","children":[],"call":["result << ","condition splat_type? "," error_condition? ","when_conditions reverse each_with_object ","when_conditions reverse ","variable array_type? ","offenses compact "," non_splat? ","when_conditions reverse map "]}," RuboCop Cop Performance CaseWhenSplat autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" reorder_splat_condition "," correct_array_literal ","variable array_type? "," inline_fix_branch "," reorder_condition "," needs_reorder? "," lambda ","new_condition join ","correction << ","condition source "," expand_percent_array ","variable respond_to? ","conditions each_with_object "," replacement ","new_condition join  join "]}," RuboCop Cop Performance CaseWhenSplat on_case":{"type":"method","name":"on_case","children":[],"call":[" add_offense ","condition parent ","variable array_type? ","condition parent loc keyword join ","condition loc expression ","condition loc ","condition parent loc keyword ","condition parent loc "," splat_offenses reverse_each "," splat_offenses ","conditions << ","when_branches each_with_object ","condition source_range ","condition each ","case_node when_branches flat_map ","case_node when_branches ","condition source_condition parent loc keyword join  "]}," RuboCop Cop MethodPreference default_cop_config":{"type":"method","name":"default_cop_config","children":[],"call":["ConfigLoader  default_configuration [] "," cop_name ","ConfigLoader  default_configuration "]}," RuboCop Cop MethodPreference preferred_methods":{"type":"method","name":"preferred_methods","children":[],"call":["(send\n  (lvar :merged) :reject) symbolize_keys ","overrides include? ","merged reject ","merged values - ","default values ","merged values "," cop_config [] "," cop_config "," default_cop_config [] "," default_cop_config ","(send\n  (block\n    (send\n      (lvar :merged) :reject)\n    (args\n      (arg :key)\n      (arg :_))\n    (send\n      (lvar :overrides) :include?\n      (lvar :key))) :map) to_h ","k to_sym ","(send\n  (lvar :merged) :reject) map ","(send\n  (lvar :merged) :reject) transform_keys ","(send\n  (lvar : cop_config [] ) :reject) symbolize_keys ","merged values -  include? "," cop_config []  reject "," cop_config []  values - "," default_cop_config []  values "," cop_config []  values ","  default_cop_config [] _cop_config [] ","  default_cop_config [] _cop_config ","(send\n  (block\n    (send\n      (lvar :merged) :reject)\n    (args\n      (arg :key)\n      (arg :_))\n    (send\n      (lvar :merged values - ) :include?\n      (lvar :key))) :map) to_h ","(send\n  (block\n    (send\n      (lvar : cop_config [] ) :reject)\n    (args\n      (arg :key)\n      (arg :_))\n    (send\n      (lvar :overrides) :include?\n      (lvar :key))) :map) to_h ","(send\n  (lvar : cop_config [] ) :reject) map ","(send\n  (lvar : cop_config [] ) :reject) transform_keys "]}," RuboCop Cop MethodPreference preferred_method":{"type":"method","name":"preferred_method","children":[],"call":[" preferred_methods [] ","method to_sym "," preferred_methods "]}," RuboCop Cop EndKeywordAlignment line_break_before_keyword?":{"type":"method","name":"line_break_before_keyword?","children":[],"call":["rhs loc line > ","whole_expression line ","rhs loc line ","rhs loc ","rhs first_line > ","rhs first_line "]}," RuboCop Cop EndKeywordAlignment variable_alignment?":{"type":"method","name":"variable_alignment?","children":[],"call":[" line_break_before_keyword? ! "," line_break_before_keyword? ","end_alignment_style == "]}," RuboCop Cop ConfigurableNaming class_emitter_method?":{"type":"method","name":"class_emitter_method?","children":[],"call":["c loc name is? ","name to_s ","c loc name ","c loc ","c class_type? ","node parent children any? ","node parent children ","node parent ","node defs_type? ","node parent children compact any? ","node parent children compact ","node parent defs_type? ","node parent each_child_node any? ","node parent each_child_node ","node parent  parent children any? ","node parent  parent children ","node parent  parent ","node parent  defs_type? ","node parent  parent children compact any? ","node parent  parent children compact ","node parent  parent defs_type? ","node parent  parent each_child_node parent  any? ","node parent  parent each_child_node parent  "]}," RuboCop Cop AutocorrectAlignment offset":{"type":"method","name":"offset","children":[],"call":["SPACE  * ","node loc column ","node loc "]}," RuboCop Cop AutocorrectAlignment indentation":{"type":"method","name":"indentation","children":[],"call":[" offset + ","SPACE  * "," configured_indentation_width "," offset "]}," RuboCop Cop Lint FormatParameterMismatch expected_fields_count":{"type":"method","name":"expected_fields_count","children":[],"call":["a + ","e [] == ","e [] ","(send\n  (send\n    (send\n      (send\n        (send\n          (lvar :node) :loc) :expression) :source) :scan\n    (const nil :FIELD_REGEX)) :select) reduce ","x first != ","x first ","node loc expression source scan select ","node loc expression source scan ","node loc expression source ","node loc expression ","node loc ","node str_type? ","e [] =~ ","(send\n  (send\n    (send\n      (lvar :node) :source) :scan\n    (const nil :FIELD_REGEX)) :select) reduce ","node source scan select ","node source scan ","node source ","node source =~ ","acc + ","elem [] =~ ","elem [] ","(send\n  (send\n    (send\n      (lvar :node) :source) :scan\n    (const nil :FIELD_REGEX)) :reject) reduce ","x first == ","node source scan reject "," arguments_count ","max_digit_dollar_num nonzero? "," max_digit_dollar_num ","seq arity ","format_string format_sequences reject reduce ","format_string format_sequences reject ","format_string format_sequences ","format_string max_digit_dollar_num ","format_string named_interpolation? ","RuboCop Cop Utils FormatString  new "," string_type? "," max_digit_dollar_num  nonzero? ","format_string max_digit_dollar_num  nonzero? ","  max_digit_dollar_num  "," format_string max_digit_dollar_num  ","RuboCop Cop Utils FormatString  new  format_sequences reject reduce ","RuboCop Cop Utils FormatString  new  format_sequences reject ","RuboCop Cop Utils FormatString  new  format_sequences ","format_string  max_digit_dollar_num  ","format_string format_string max_digit_dollar_num  ","RuboCop Cop Utils FormatString  new  max_digit_dollar_num ","RuboCop Cop Utils FormatString  new  named_interpolation? "]}," RuboCop Cop Lint FormatParameterMismatch heredoc?":{"type":"method","name":"heredoc?","children":[],"call":["args loc expression source [] == ","args loc expression source [] ","args loc expression source ","args loc expression ","args loc ","args source [] == ","args source [] ","args source ","node first_argument source [] == ","node first_argument source [] ","node first_argument source ","node first_argument "]}," RuboCop Cop Lint FormatParameterMismatch named_mode?":{"type":"method","name":"named_mode?","children":[],"call":["relevant_node loc expression source scan count > ","relevant_node loc expression source scan count ","relevant_node loc expression source scan ","relevant_node loc expression source ","relevant_node loc expression ","relevant_node loc "," percent? ","args first "," format? "," sprintf? ","relevant_node loc expression source scan size > ","relevant_node loc expression source scan size ","relevant_node source scan size > ","relevant_node source scan size ","relevant_node source scan ","relevant_node source ","relevant_node source scan empty? ! ","relevant_node source scan empty? ","node receiver ","node first_argument ","args first  loc expression source scan count > ","node first_argument  loc expression source scan count > ","args first  loc expression source scan count ","node first_argument  loc expression source scan count ","args first  loc expression source scan ","node first_argument  loc expression source scan ","args first  loc expression source ","node first_argument  loc expression source ","args first  loc expression ","node first_argument  loc expression ","args first  loc ","node first_argument  loc ","args first  loc expression source scan size > ","node first_argument  loc expression source scan size > ","args first  loc expression source scan size ","node first_argument  loc expression source scan size ","args first  source scan size > ","node first_argument  source scan size > ","args first  source scan size ","node first_argument  source scan size ","args first  source scan ","node first_argument  source scan ","args first  source ","node first_argument  source ","args first  source scan empty? ! ","node first_argument  source scan empty? ! ","args first  source scan empty? ","node first_argument  source scan empty? "]}," RuboCop Cop Lint EndAlignment on_case":{"type":"method","name":"on_case","children":[],"call":[" check_offset_of_node "," check_alignment ","node ancestors first ","node ancestors "," argument_case? "," check_other_alignment "," check_asgn_alignment ","node parent ","node argument? "]}," RuboCop Cop Lint DuplicatedKey on_hash":{"type":"method","name":"on_hash","children":[],"call":["keys << "," add_offense ","LITERALS  include? ","child type ","key children each ","key children ","key type == ","key type ","keys include? ","hash_pairs each ","key recursive_basic_literal? "," consecutive_duplicates each "," consecutive_duplicates "," duplicates? ","node keys select ","node keys ","node keys select  << ","node keys select  include? ","node node keys select  select ","node node keys select  "]}," RuboCop Cop Lint DeprecatedClassMethods DeprecatedClassMethod class_nodes":{"type":"method","name":"class_nodes","children":[],"call":[" s "," class_constant "]}," RuboCop Cop Cop excluded_file?":{"type":"method","name":"excluded_file?","children":[],"call":[" relevant_file? ! "," relevant_file? "]}," RuboCop Cop Commissioner remove_irrelevant_cops":{"type":"method","name":"remove_irrelevant_cops","children":[],"call":["cop excluded_file? ","@cops reject! ","cop class support_target_ruby_version? ! ","cop class support_target_ruby_version? ","cop target_ruby_version ","cop class ","cop class respond_to? ","cop class support_target_rails_version? ! ","cop class support_target_rails_version? ","cop target_rails_version "," support_target_rails_version? ! "," support_target_rails_version? "," support_target_ruby_version? ! "," support_target_ruby_version? "]}," RuboCop Config to_s":{"type":"method","name":"to_s","children":[],"call":[" __getobj__ to_s "," __getobj__ ","@hash to_s "]}," RuboCop Formatter ProgressFormatter initialize":{"type":"method","name":"initialize","children":[],"call":["@output tty? "," green "]}," RuboCop Cop Style SignalException each_command_or_kernel_call":{"type":"method","name":"each_command_or_kernel_call","children":[],"call":[" command_or_kernel_call? "," on_node "]}," RuboCop Cop Style SignalException kernel_call?":{"type":"method","name":"kernel_call?","children":[],"call":["constant == ","receiver const_type? ","name == ","node type == ","node type "]}," RuboCop Cop Style SignalException command_or_kernel_call?":{"type":"method","name":"command_or_kernel_call?","children":[],"call":[" kernel_call? "," command? ","node command? ","node method? "]}," RuboCop Cop Performance StringReplacement method_suffix":{"type":"method","name":"method_suffix","children":[],"call":["node loc end source ","node loc end ","node loc "]}," RuboCop Cop Style ExtraSpacing ignored_ranges":{"type":"method","name":"ignored_ranges","children":[],"call":["ranges << ","Parser Source Range  new ","value loc expression begin_pos - ","value loc expression begin_pos ","value loc expression ","value loc ","pair loc operator end_pos ","pair loc operator ","pair loc "," processed_source buffer "," processed_source "," on_node ","key loc expression end_pos ","key loc expression ","key loc ","value source_range begin_pos ","value source_range ","key source_range end_pos ","key source_range "," on_node map ","(send\n  (send nil :on_node\n    (sym :pair)\n    (lvar :ast)) :map) compact ","pair parent single_line? ","pair parent "]}," RuboCop Cop Style CommentAnnotation first_comment_line?":{"type":"method","name":"first_comment_line?","children":[],"call":["comments [] loc line < ","comments [] loc line - ","comments [] loc line ","comments [] loc ","comments [] ","ix - ","ix == ","ix zero? ","index - ","index zero? "]}," RuboCop Cop Performance CaseWhenSplat expand_percent_array":{"type":"method","name":"expand_percent_array","children":[],"call":["elements join ","array_start start_with? ","e loc expression source ","e loc expression ","e loc ","elements map ","array loc begin source ","array loc begin ","array loc ","elements map  join ","array loc begin source  start_with? ","elements map  map "]}," RuboCop Cop Lint FormatParameterMismatch node_with_splat_args?":{"type":"method","name":"node_with_splat_args?","children":[],"call":["arg type == ","arg type ","args [] any? ","args [] "," percent? ","args butfirst any? ","args butfirst "]}," RuboCop Cop Lint FormatParameterMismatch called_on_string?":{"type":"method","name":"called_on_string?","children":[],"call":["receiver_node str_type? ","format_string str_type? ","receiver_node const_type? ","receiver_node nil? "]}," RuboCop Runner save_in_cache":{"type":"method","name":"save_in_cache","children":[],"call":["cache save ","processed_source comments ","processed_source disabled_line_ranges "," warnings any? "," warnings "," errors any? "," errors "]}," RuboCop RemoteConfig cache_name_from_uri":{"type":"method","name":"cache_name_from_uri","children":[],"call":["uri to_s gsub! ","uri to_s ","uri query= ","@uri clone "," cloned_url ","@uri clone  to_s gsub! "," cloned_url  to_s gsub! ","@uri clone  to_s "," cloned_url  to_s ","@uri clone  query= "," cloned_url  query= ","@@uri clone  clone ","@ cloned_url  clone "]}," RuboCop RemoteConfig cache_path_expired?":{"type":"method","name":"cache_path_expired?","children":[],"call":["(send\n  (lvar :file_age) :/\n  (const nil :CACHE_LIFETIME)) > ","file_age / ","(send\n  (send\n    (const nil :Time) :now) :-\n  (send\n    (send\n      (const nil :File) :stat\n      (send nil :cache_path)) :mtime)) to_f ","Time  now - ","File  stat mtime ","File  stat "," cache_path ","Time  now "," cache_path_exists? ","(send\n  (lvar :(send\n  (send\n    (const nil :Time) :now) :-\n  (send\n    (send\n      (const nil :File) :stat\n      (send nil :cache_path)) :mtime)) to_f ) :/\n  (const nil :CACHE_LIFETIME)) > ","(send\n  (send\n    (const nil :Time) :now) :-\n  (send\n    (send\n      (const nil :File) :stat\n      (send nil :cache_path)) :mtime)) to_f  / "]}," RuboCop RemoteConfig cache_path_exists?":{"type":"method","name":"cache_path_exists?","children":[],"call":["File  exist? "," cache_path "]}," RuboCop RemoteConfig cache_path":{"type":"method","name":"cache_path","children":[],"call":[" cache_name_from_uri ","File  expand_path "]}," RuboCop RemoteConfig file":{"type":"method","name":"file","children":[],"call":["io write ","response body "," open ","response is_a? "," cache_path tap "," cache_path ","http request ","request []= ","File  stat mtime rfc2822 ","File  stat mtime ","File  stat "," cache_path_exists? ","Net HTTP Get  new ","@uri request_uri ","http use_ssl= ","@uri instance_of? ","Net HTTP  new ","@uri port ","@uri hostname "," cache_path_expired? "," request ","File  open ","File  write ","http request  body ","http request  is_a? ","http Net HTTP Get  new  ","Net HTTP  new  request ","Net HTTP Get  new  []= ","@uri Net HTTP Get  new _uri ","Net HTTP  new  use_ssl= "," Net HTTP Get  new  "]}," RuboCop RemoteConfig initialize":{"type":"method","name":"initialize","children":[],"call":["URI  parse "]}," RuboCop OptionsValidator validate_exclude_limit_option":{"type":"method","name":"validate_exclude_limit_option","children":[],"call":[" fail ","args include? ","@options [] ","@options [] !~ "," raise ","@options [] =~ ","(str \"^\\\\d+$\") match? "]}," RuboCop OptionsValidator validate_compatibility":{"type":"method","name":"validate_compatibility","children":[],"call":[" fail ","incompat inspect ","(lvasgn :incompat\n  (send\n    (send\n      (ivar :@options) :keys) :&\n    (const\n      (const nil :Options) :EXITING_OPTIONS))) size <= ","(lvasgn :incompat\n  (send\n    (send\n      (ivar :@options) :keys) :&\n    (const\n      (const nil :Options) :EXITING_OPTIONS))) size ","@options keys & ","@options keys ","(str \"true\") include? ! ","(str \"true\") include? ","@options [] ","@options key? ","(send\n  (send\n    (ivar :@options) :[]\n    (sym :except)) :&\n  (array\n    (str \"Lint/Syntax\")\n    (str \"Syntax\"))) any? ","@options [] & ","(send\n  (send\n    (ivar :@options) :[]\n    (sym :only)) :&\n  (array\n    (str \"Lint/UnneededDisable\")\n    (str \"UnneededDisable\"))) any? ","@options key? ! "," raise "," incompatible_options inspect "," incompatible_options "," incompatible_options size <= "," incompatible_options size "," no_offense_counts_without_auto_gen_config? "," boolean_or_empty_cache? "," except_syntax? "," only_includes_unneeded_disable? "," validate_parallel "," validate_auto_gen_config "," display_only_fail_level_offenses_with_autocorrect? "," validate_auto_correct "," only_includes_redundant_disable? "," validate_display_only_failed "," disable_parallel_when_invalid_option_combo "," validate_display_only_correctable_and_auto_correct "," validate_display_only_failed_and_display_only_correctable "," validate_display_only_correctable_and_autocorrect "," validate_autocorrect ","@options keys &  inspect ","(lvasgn :@options keys & \n  (send\n    (send\n      (ivar :@options) :keys) :&\n    (const\n      (const nil :Options) :EXITING_OPTIONS))) size <= ","(lvasgn :@options keys & \n  (send\n    (send\n      (ivar :@options) :keys) :&\n    (const\n      (const nil :Options) :EXITING_OPTIONS))) size "," @options keys & ible_options inspect "," @options keys & ible_options "," @options keys & ible_options size <= "," @options keys & ible_options size "]}," RuboCop OptionsValidator validate_cop_list":{"type":"method","name":"validate_cop_list","children":[],"call":[" raise "," format_message_from ","(str \"Syntax\") include? ","departments include? ","cop_names include? ","names each ","Cop Cop  registry departments map ","Cop Cop  registry departments ","Cop Cop  registry ","Cop Cop  registry names ","Cop Registry  global departments map ","Cop Registry  global departments ","Cop Registry  global ","Cop Registry  global names ","SYNTAX_DEPARTMENTS  include? ","Cop Cop  registry departments map  include? ","Cop Registry  global departments map  include? ","Cop Cop  registry names  include? ","Cop Registry  global names  include? ","Cop Cop  registry Cop Cop  registry departments map  map ","Cop Cop  registry Cop Registry  global departments map  map ","Cop Cop  registry Cop Cop  registry departments map  ","Cop Cop  registry Cop Registry  global departments map  ","Cop Registry  global Cop Cop  registry departments map  map ","Cop Registry  global Cop Registry  global departments map  map ","Cop Registry  global Cop Cop  registry departments map  ","Cop Registry  global Cop Registry  global departments map  "]}," RuboCop OptionsValidator initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop NodePattern initialize":{"type":"method","name":"initialize","children":[],"call":[" instance_eval ","def match(node0 << << << << ","def match(node0 << << << ","compiler emit_method_code ","def match(node0 << << ","def match(node0 << ","compiler emit_trailing_param_list ","Compiler  new ","compiler emit_trailing_params ","555 + ","557 + ","691 + ","770 + ","772 + ","842 + ","Compiler  new  emit_method_code ","Compiler  new  emit_trailing_param_list ","Compiler  new  emit_trailing_params "]}," RuboCop NodePattern Macros def_node_search":{"type":"method","name":"def_node_search","children":[],"call":[" class_eval ","compiler match_code ","compiler emit_trailing_param_list ","yieldval empty? ","compiler emit_capture_list ","method_name to_s end_with? ","method_name to_s ","RuboCop NodePattern Compiler  new ","lineno to_i "," caller first split "," caller first "," caller "," node_search_body ","compiler emit_trailing_params "," node_search_all "," node_search_first ","Compiler  new ","RuboCop NodePattern Compiler  new  match_code ","Compiler  new  match_code ","RuboCop NodePattern Compiler  new  emit_trailing_param_list ","Compiler  new  emit_trailing_param_list ","compiler emit_capture_list  empty? ","RuboCop NodePattern Compiler  new  emit_capture_list ","Compiler  new  emit_capture_list ","RuboCop NodePattern Compiler  new  emit_trailing_params ","Compiler  new  emit_trailing_params "]}," RuboCop NodePattern Macros def_node_matcher":{"type":"method","name":"def_node_matcher","children":[],"call":[" class_eval ","(str \"def \") << << << << ","(str \"def \") << << << ","compiler emit_method_code ","(str \"def \") << << ","(str \"def \") << ","compiler emit_trailing_param_list ","RuboCop NodePattern Compiler  new ","lineno to_i "," caller first split "," caller first "," caller ","compiler emit_trailing_params ","location lineno ","location path "," caller_locations first "," caller_locations ","compiler emit_guard_clause ","Compiler  new ","RuboCop NodePattern Compiler  new  emit_method_code ","Compiler  new  emit_method_code ","RuboCop NodePattern Compiler  new  emit_trailing_param_list ","Compiler  new  emit_trailing_param_list ","RuboCop NodePattern Compiler  new  emit_trailing_params ","Compiler  new  emit_trailing_params "," caller_locations first  lineno "," caller_locations first  path "," caller_ caller_locations first s first "," caller_ caller_locations first s ","RuboCop NodePattern Compiler  new  emit_guard_clause ","Compiler  new  emit_guard_clause "]}," RuboCop NodePattern Compiler fail_due_to":{"type":"method","name":"fail_due_to","children":[],"call":[" fail "," raise "]}," RuboCop NodePattern Compiler emit_method_code":{"type":"method","name":"emit_method_code","children":[],"call":[" emit_retval "," emit_capture_list "," emit_yield_capture "]}," RuboCop NodePattern Compiler emit_trailing_param_list":{"type":"method","name":"emit_trailing_param_list","children":[],"call":[", << ","params empty? "," emit_param_list "," emit_param_list  empty? "]}," RuboCop NodePattern Compiler emit_param_list":{"type":"method","name":"emit_param_list","children":[],"call":["(send\n  (begin\n    (irange\n      (int 1)\n      (ivar :@params))) :map) join ","(irange\n  (int 1)\n  (ivar :@params)) map "]}," RuboCop NodePattern Compiler emit_retval":{"type":"method","name":"emit_retval","children":[],"call":[" emit_capture_list ","@captures == ","@captures zero? "]}," RuboCop NodePattern Compiler emit_capture_list":{"type":"method","name":"emit_capture_list","children":[],"call":["(send\n  (begin\n    (irange\n      (int 1)\n      (ivar :@captures))) :map) join ","(irange\n  (int 1)\n  (ivar :@captures)) map "]}," RuboCop NodePattern Compiler join_terms":{"type":"method","name":"join_terms","children":[],"call":["( << << << << ","( << << << ","terms join ","( << << ","( << "]}," RuboCop NodePattern Compiler next_capture":{"type":"method","name":"next_capture","children":[],"call":[]}," RuboCop NodePattern Compiler compile_param":{"type":"method","name":"compile_param","children":[],"call":["number > "," Integer ","number empty? "," get_param "," Integer  > "," Integer  empty? "]}," RuboCop NodePattern Compiler compile_nodetype":{"type":"method","name":"compile_nodetype","children":[],"call":["type tr "," compile_guard_clause "]}," RuboCop NodePattern Compiler compile_predicate":{"type":"method","name":"compile_predicate","children":[],"call":["args join ","predicate [] "," compile_args ","predicate end_with? "," tokens "," compile_args  join ","predicate []  [] "," compile_ compile_args  ","predicate []  end_with? "]}," RuboCop NodePattern Compiler compile_literal":{"type":"method","name":"compile_literal","children":[],"call":[]}," RuboCop NodePattern Compiler compile_wildcard":{"type":"method","name":"compile_wildcard","children":[],"call":["@unify []= ","@unify [] ","@unify key? ","name empty? "," next_temp_value ","name gsub "," access_unify ","@u@unify []= ify []= ","@u@unify []= ify [] ","@u@unify []= ify key? ","@unify []= ame empty? "," @unify []= ext_temp_value ","@unify []= ame gsub "," access_u@unify []= ify "]}," RuboCop NodePattern Compiler compile_ascend":{"type":"method","name":"compile_ascend","children":[],"call":["(str \"(\") << << ","(str \"(\") << "," compile_expr "," with_context "]}," RuboCop NodePattern Compiler compile_negation":{"type":"method","name":"compile_negation","children":[],"call":["(! << << ","(! << "," compile_expr "]}," RuboCop NodePattern Compiler compile_capture":{"type":"method","name":"compile_capture","children":[],"call":["(str \"(\") << << ","(str \"(\") << "," compile_expr "," next_capture "]}," RuboCop NodePattern Compiler compile_intersect":{"type":"method","name":"compile_intersect","children":[],"call":[" join_terms ","tokens shift ","terms << "," compile_expr ","tokens first == ","tokens first "," fail_due_to "," with_temp_node ","(send\n  (send nil :tokens_until\n    (str \"]\")\n    (str \"intersection\")) :map) join "," tokens_until map "," tokens_until "]}," RuboCop NodePattern Compiler compile_union":{"type":"method","name":"compile_union","children":[],"call":[" join_terms ","tokens shift "," fail_due_to ","@captures != ","terms << "," compile_expr ","tokens first == ","tokens first "," union_terms "," with_temp_node ","terms join "," insure_same_captures map "," insure_same_captures "," tokens_until "," unify_in_union "," join_ union_terms  "," union_terms  << "," union_ union_terms  "," union_terms  join "]}," RuboCop NodePattern Compiler compile_seq_tail":{"type":"method","name":"compile_seq_tail","children":[],"call":[" fail_due_to ","tokens shift == ","tokens shift "," compile_expr ","tokens first == ","tokens first "," format ","i - ","terms size ","terms map with_index ","terms map ","terms << "," compile_ compile_expr  "]}," RuboCop NodePattern Compiler compile_capt_ellip":{"type":"method","name":"compile_capt_ellip","children":[],"call":["terms << ","index > "," compile_seq_tail "," next_capture "," compile_seq_tail s << "," next_ next_capture  "]}," RuboCop NodePattern Compiler compile_ellipsis":{"type":"method","name":"compile_ellipsis","children":[],"call":["terms << ","index > "," compile_seq_tail ","tail size -@ - ","tail size -@ ","tail size ","terms concat ","index + ","tokens shift "," compile_seq_tail s << "," compile_seq_ compile_seq_tail  "," compile_seq_tail  size -@ - "," compile_seq_tail  size -@ "," compile_seq_tail  size "," compile_seq_tail s concat "]}," RuboCop NodePattern Compiler compile_seq_terms":{"type":"method","name":"compile_seq_terms","children":[],"call":["tokens shift ","terms << "," compile_expr ","index nil? "," compile_capt_ellip ","tokens first == ","tokens first "," compile_ellipsis ","$... freeze ","... freeze "," compile_seq_terms_with_size ","ret << ","ret size - ","ret size ","index == ","token == "," next_capture "," next_ next_capture  "]}," RuboCop NodePattern Compiler compile_seq":{"type":"method","name":"compile_seq","children":[],"call":[" join_terms "," compile_seq_terms "," fail_due_to ","tokens first == ","tokens first "," with_temp_node ","terms unshift "," compile_guard_clause ","Sequence  new compile ","Sequence  new "," variadic_seq_term "," tokens_until map "," tokens_until "," join_ compile_seq_terms  "," compile_seq_ compile_seq_terms  "," compile_seq_terms  unshift "]}," RuboCop NodePattern Compiler compile_expr":{"type":"method","name":"compile_expr","children":[],"call":[" fail_due_to ","token inspect "," compile_param ","token [] "," compile_nodetype "," compile_predicate "," compile_literal "," compile_wildcard "," compile_ascend "," compile_capture "," compile_negation "," compile_intersect "," compile_union "," compile_seq ","tokens shift "," compile_funcall "," compile_descend ","tokens shift  inspect ","tokens shift  [] ","tokens shift s shift "]}," RuboCop NodePattern Compiler run":{"type":"method","name":"run","children":[],"call":[" fail_due_to ","tokens empty? "," compile_expr ","token =~ ","tokens reject! ","@string scan ","@string scan reject ","Compiler  tokens "," tokens empty? "," tokens ","@match_code prepend ","@captures > "," with_context ","@captures positive? ","@string scan  empty? ","Compiler  tokens  empty? ","@string scan  reject! ","Compiler  tokens  reject! ","Compiler  @string scan  ","Compiler  Compiler  tokens  "," @string scan  empty? "," Compiler  tokens  empty? "," @string scan  "," Compiler  tokens  "," compile_expr  prepend "," with_context  prepend "]}," RuboCop NodePattern Compiler initialize":{"type":"method","name":"initialize","children":[],"call":[" run "]}," RuboCop Formatter DisabledConfigFormatter output_cop_config":{"type":"method","name":"output_cop_config","children":[],"call":[" output_offending_files ","output puts ","value [] ","value is_a? ","cfg each ","cfg_without_enabled each ","key == ","cfg reject ","output_buffer puts ","filtered_cfg each "," filtered_config ","value []  [] ","value []  is_a? "," filtered_config  each "]}," RuboCop Cop Team handle_warning":{"type":"method","name":"handle_warning","children":[],"call":[" puts ","e backtrace "," debug? "," warn ","@warnings << "," Rainbow yellow "," Rainbow ","e message ","error backtrace ","error message ","e  Rainbow yellow  ","error  Rainbow yellow  "]}," RuboCop Cop Style VariableName on_arg":{"type":"method","name":"on_arg","children":[],"call":[" check_name ","node loc name ","node loc "]}," RuboCop Cop Style UnneededPercentQ start_with_percent_q_variant?":{"type":"method","name":"start_with_percent_q_variant?","children":[],"call":["string start_with? ","string source start_with? ","string source "]}," RuboCop Cop Style UnneededPercentQ string_literal?":{"type":"method","name":"string_literal?","children":[],"call":["node loc end ","node loc ","node loc begin ","node loc respond_to? "]}," RuboCop Cop Style TrailingUnderscoreVariable allow_named_underscore_variables":{"type":"method","name":"allow_named_underscore_variables","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style TrailingComma should_have_comma?":{"type":"method","name":"should_have_comma?","children":[],"call":["items last hash_type? ","items last ","items size > ","items size "," multiline? ","(sym :comma) include? "]}," RuboCop Cop Style StabbyLambdaParentheses parentheses?":{"type":"method","name":"parentheses?","children":[],"call":["args loc begin ","args loc "," node_args "," node_args loc begin "," node_args loc ","node parent arguments loc begin ","node parent arguments loc ","node parent arguments ","node parent ","node block_node arguments loc begin ","node block_node arguments loc ","node block_node arguments ","node block_node "," node_args  loc begin "," node_args  loc "," node_ node_args  "," node_ node_args  loc begin "," node_ node_args  loc "]}," RuboCop Cop Style StabbyLambdaParentheses args?":{"type":"method","name":"args?","children":[],"call":["args children count > ","args children count ","args children "," node_args "," node_args children empty? ! "," node_args children empty? "," node_args children "," node_args  children count > "," node_args  children count "," node_args  children "," node_ node_args  "," node_ node_args  children empty? ! "," node_ node_args  children empty? "," node_ node_args  children "]}," RuboCop Cop Style StabbyLambdaParentheses node_args":{"type":"method","name":"node_args","children":[],"call":["node parent "]}," RuboCop Cop Style StabbyLambdaParentheses lambda_node?":{"type":"method","name":"lambda_node?","children":[],"call":["call == ","receiver nil? ","receiver ! "]}," RuboCop Cop Style StabbyLambdaParentheses lambda_with_args?":{"type":"method","name":"lambda_with_args?","children":[],"call":[" args? "," lambda_node? "]}," RuboCop Cop Style StabbyLambdaParentheses unwanted_parentheses_corrector":{"type":"method","name":"unwanted_parentheses_corrector","children":[],"call":["corrector remove ","args_loc end ","corrector replace ","args_loc begin "," node_args loc "," node_args "," lambda ","node parent arguments loc ","node parent arguments ","node parent ","node loc "," node_args loc  end ","node parent arguments loc  end ","node loc  end "," node_args loc  begin ","node parent arguments loc  begin ","node loc  begin "]}," RuboCop Cop Style StabbyLambdaParentheses missing_parentheses_corrector":{"type":"method","name":"missing_parentheses_corrector","children":[],"call":["corrector insert_after ","corrector insert_before "," node_args loc expression "," node_args loc "," node_args "," lambda "," node_args source_range ","node parent arguments source_range ","node parent arguments ","node parent ","node loc expression ","node loc ","corrector wrap "]}," RuboCop Cop Style StabbyLambdaParentheses unwanted_parentheses":{"type":"method","name":"unwanted_parentheses","children":[],"call":[" opposite_style_detected "," add_offense "," node_args "]}," RuboCop Cop Style StabbyLambdaParentheses missing_parentheses":{"type":"method","name":"missing_parentheses","children":[],"call":[" opposite_style_detected "," add_offense "," node_args "]}," RuboCop Cop Style StabbyLambdaParentheses autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" unwanted_parentheses_corrector "," style == "," style "," missing_parentheses_corrector "]}," RuboCop Cop Style StabbyLambdaParentheses on_send":{"type":"method","name":"on_send","children":[],"call":[" correct_style_detected "," unwanted_parentheses "," parentheses? "," missing_parentheses "," style == "," style "," lambda_with_args? "," arrow_lambda_with_args? "," add_offense ","node parent arguments ","node parent "," missing_parentheses? "," redundant_parentheses? "," stabby_lambda_with_args? ","node block_node arguments ","node block_node "," unwanted_parentheses_corrector "," missing_parentheses_corrector ","node parent node block_node arguments  ","node block_node node block_node arguments  "]}," RuboCop Cop Style PredicateName predicate_whitelist":{"type":"method","name":"predicate_whitelist","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style PredicateName predicate_prefixes":{"type":"method","name":"predicate_prefixes","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style ParallelAssignment AssignmentSorter tsort_each_child":{"type":"method","name":"tsort_each_child","children":[],"call":[" uses_var? "," var_name ","@assignments each "," accesses? ","my_lhs asgn_method_call? "," dependency? "," uses_ var_name ? ","  var_name _name "]}," RuboCop Cop Style ParallelAssignment AssignmentSorter tsort_each_node":{"type":"method","name":"tsort_each_node","children":[],"call":["@assignments each "]}," RuboCop Cop Style ParallelAssignment AssignmentSorter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop Cop Style ParallelAssignment find_valid_order":{"type":"method","name":"find_valid_order","children":[],"call":["AssignmentSorter  new tsort ","AssignmentSorter  new ","left_elements zip "]}," RuboCop Cop Style Next autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","body loc expression source ","body loc expression ","body loc ","node loc expression ","node loc ","corrector insert_before ","next  << << << << ","next  << << << ","cond loc expression source ","cond loc expression ","cond loc ","next  << << ","next  << ","if_body nil? "," lambda "," reindent ","reindent_lines to_a - "," heredoc_lines ","reindent_lines to_a ","node loc end line ","node loc end ","node source_range line + ","node source_range line ","node source_range ","corrector remove "," end_range "," cond_range ","cond source "," autocorrect_block "," autocorrect_modifier "," modifier_if? ","node modifier_form? ","reindent_lines to_a -  to_a - ","reindent_lines to_a -  to_a "]}," RuboCop Cop Style NestedModifier new_expression":{"type":"method","name":"new_expression","children":[],"call":["outer_cond loc expression source ","outer_cond loc expression ","outer_cond loc ","outer_node loc keyword source ","outer_node loc keyword ","outer_node loc ","outer_keyword == ","inner_cond or_type? ","inner_cond loc expression source ","inner_cond loc expression ","inner_cond loc ","inner_node loc keyword source ","inner_node loc keyword ","inner_node loc ","outer_cond source ","inner_cond source ","operator == ","&& freeze ","outer_cond or_type? ","|| freeze ","if freeze "," requires_parens? "," right_hand_operand "," left_hand_operand "," replacement_operator ","outer_node keyword ","inner_node parent ","inner_node parent  loc keyword source ","inner_node parent  loc keyword ","inner_node parent  loc ","outer_node loc keyword source  == ","|| freeze  == ","&& freeze  == "," replacement_operator  == "," replacement_|| freeze  "," replacement_&& freeze  "," replacement_ replacement_operator  ","inner_node parent  keyword "]}," RuboCop Cop Style NestedModifier autocorrect_if_unless":{"type":"method","name":"autocorrect_if_unless","children":[],"call":["corrector replace "," new_expression "," lambda ","Parser Source Range  new ","outer_cond loc expression end_pos ","outer_cond loc expression ","outer_cond loc ","inner_node loc keyword begin_pos ","inner_node loc keyword ","inner_node loc ","inner_node loc expression source_buffer ","inner_node loc expression ","outer_cond source_range end_pos ","outer_cond source_range ","inner_node source_range source_buffer ","inner_node source_range "," range_between ","outer_cond source_Parser Source Range  new  end_pos ","outer_cond source_ range_between  end_pos ","outer_cond source_Parser Source Range  new  ","outer_cond source_ range_between  ","inner_node source_Parser Source Range  new  source_buffer ","inner_node source_ range_between  source_buffer ","inner_node source_Parser Source Range  new  ","inner_node source_ range_between  "," Parser Source Range  new _between ","  range_between _between "]}," RuboCop Cop Style NestedModifier autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" autocorrect_if_unless ","ancestor if_type? ","node ancestors first ","node ancestors ","node if_type? ","corrector replace "," new_expression ","node parent "," lambda "," range_between ","node parent condition source_range end_pos ","node parent condition source_range ","node parent condition ","node loc keyword begin_pos ","node loc keyword ","node loc ","node parent if_type? ","node ancestors first  if_type? ","node node ancestors first s first ","node node ancestors first s ","  range_between _between ","node parent condition source_ range_between  end_pos ","node parent condition source_ range_between  "]}," RuboCop Cop Style NestedModifier modifier_while_or_until?":{"type":"method","name":"modifier_while_or_until?","children":[],"call":["node loc end nil? ","node loc end ","node loc ","node loc respond_to? ","(str \"while\") include? ","node loc keyword source ","node loc keyword ","node modifier_form? "]}," RuboCop Cop Style NestedModifier modifier?":{"type":"method","name":"modifier?","children":[],"call":[" modifier_while_or_until? "," modifier_if? ","node modifier_form? ","MODIFIER_NODES  include? ","node type ","node basic_conditional? "]}," RuboCop Cop Style NestedModifier check":{"type":"method","name":"check","children":[],"call":[" ignore_node "," add_offense "," modifier? ","(sym :if) include? ","ancestor type ","node ancestors first ","node ancestors "," part_of_ignored_node? ","node parent "," autocorrect ","node loc keyword ","node loc ","node ancestors first  type ","node node ancestors first s first ","node node ancestors first s "]}," RuboCop Cop Style NestedModifier on_if":{"type":"method","name":"on_if","children":[],"call":[" check "]}," RuboCop Cop Style NestedModifier on_until":{"type":"method","name":"on_until","children":[],"call":[" check "]}," RuboCop Cop Style NestedModifier on_while":{"type":"method","name":"on_while","children":[],"call":[" check "]}," RuboCop Cop Style MultilineOperationIndentation assignment_rhs?":{"type":"method","name":"assignment_rhs?","children":[],"call":["grandparent asgn_rhs equal? ","grandparent asgn_rhs ","grandparent masgn_type? ","parent parent ","parent asgn_rhs equal? ","parent asgn_rhs ","node ancestors unshift each_cons any? ","node ancestors unshift each_cons ","node ancestors unshift ","node ancestors ","parent parent  asgn_rhs equal? ","parent parent  asgn_rhs ","parent parent  masgn_type? "]}," RuboCop Cop Style IndentHash detected_styles":{"type":"method","name":"detected_styles","children":[],"call":["styles << ","column == ","left_brace column ","left_parenthesis column + ","left_parenthesis column ","left_brace source_line =~ ","left_brace source_line "]}," RuboCop Cop Style IfUnlessModifier method_uses_parens?":{"type":"method","name":"method_uses_parens?","children":[],"call":["source =~ ","node loc expression source_line [] ","limit loc column ","limit loc ","node loc expression source_line ","node loc expression ","node loc ","node source_range source_line [] ","node source_range source_line ","node source_range ","node loc expression source_line []  =~ ","node source_range source_line []  =~ ","node loc expression node loc expression source_line [] _line [] ","node loc expression node source_range source_line [] _line [] ","node loc expression node loc expression source_line [] _line ","node loc expression node source_range source_line [] _line ","node node loc expression source_line [] _range node loc expression source_line [] _line [] ","node node source_range source_line [] _range node source_range source_line [] _line [] ","node node loc expression source_line [] _range node loc expression source_line [] _line ","node node source_range source_line [] _range node source_range source_line [] _line ","node node loc expression source_line [] _range ","node node source_range source_line [] _range "]}," RuboCop Cop Style IfUnlessModifier parenthesize?":{"type":"method","name":"parenthesize?","children":[],"call":[" method_uses_parens? ! "," method_uses_parens? ","args first ","node parent ","node parent send_type? ","ASSIGNMENT_TYPES  include? ","node parent type ","node parent nil? ","node parent parenthesized? ! ","node parent parenthesized? ","parent operator_keyword? ","parent assignment? ","parent nil? ","node node parent  ","node node parent  send_type? ","node node parent  type ","node node parent  nil? ","node node parent  node parent hesized? ! ","node node parent  node parent hesized? ","node parent  operator_keyword? ","node parent  assignment? ","node parent  nil? "]}," RuboCop Cop Style IfUnlessModifier chained?":{"type":"method","name":"chained?","children":[],"call":["node equal? ","node parent children [] ","node parent children ","node parent ","node parent send_type? ! ","node parent send_type? ","node parent nil? "]}," RuboCop Cop Style FirstMethodParameterLineBreak on_method_def":{"type":"method","name":"on_method_def","children":[],"call":[" check_method_line_break ","args to_a "]}," RuboCop Cop Style FirstMethodArgumentLineBreak on_send":{"type":"method","name":"on_send","children":[],"call":[" check_method_line_break ","args concat ","args pop children ","args pop ","last_arg loc begin ! ","last_arg loc begin ","last_arg loc ","last_arg hash_type? ","args last ","last_arg braces? ! ","last_arg braces? ","node arguments ","args concat  concat ","node arguments  concat ","args concat  pop children ","node arguments  pop children ","args concat  pop ","node arguments  pop ","args last  loc begin ! ","args last  loc begin ","args last  loc ","args last  hash_type? ","args concat  last ","node arguments  last ","args last  braces? ! ","args last  braces? "]}," RuboCop Cop Style FirstHashElementLineBreak on_hash":{"type":"method","name":"on_hash","children":[],"call":[" check_children_line_break ","node parent ","node children "," method_uses_parens? ","node loc begin ","node loc "]}," RuboCop Cop Style FirstArrayElementLineBreak assignment_on_same_line?":{"type":"method","name":"assignment_on_same_line?","children":[],"call":["source =~ ","node loc expression source_line [] ","node loc column ","node loc ","node loc expression source_line ","node loc expression ","node source_range source_line [] ","node source_range source_line ","node source_range ","node loc expression source_line []  =~ ","node source_range source_line []  =~ ","node loc expression node loc expression source_line [] _line [] ","node loc expression node source_range source_line [] _line [] ","node loc expression node loc expression source_line [] _line ","node loc expression node source_range source_line [] _line ","node node loc expression source_line [] _range node loc expression source_line [] _line [] ","node node source_range source_line [] _range node source_range source_line [] _line [] ","node node loc expression source_line [] _range node loc expression source_line [] _line ","node node source_range source_line [] _range node source_range source_line [] _line ","node node loc expression source_line [] _range ","node node source_range source_line [] _range "]}," RuboCop Cop Style FirstArrayElementLineBreak on_array":{"type":"method","name":"on_array","children":[],"call":[" check_children_line_break ","node children "," assignment_on_same_line? ! "," assignment_on_same_line? ","node loc begin ! ","node loc begin ","node loc "]}," RuboCop Cop Style ExtraSpacing unary_plus_non_offense?":{"type":"method","name":"unary_plus_non_offense?","children":[],"call":["range resize source =~ ","range resize source ","range resize ","range size + ","range size "]}," RuboCop Cop Style BlockDelimiters return_value_chaining?":{"type":"method","name":"return_value_chaining?","children":[],"call":["node parent loc dot ","node parent loc ","node parent ","node parent send_type? ","node parent dot? "]}," RuboCop Cop Style BlockDelimiters braces_for_chaining_style?":{"type":"method","name":"braces_for_chaining_style?","children":[],"call":["block_begin == "," return_value_chaining? ","block_length > ","node loc begin source ","node loc begin ","node loc ","Util  block_length "," block_length ","node multiline? ","node chained? ","node loc begin source  == ","Util  block_length  > "," block_length  > ","Util  Util  block_length  ","Util   block_length  "," Util  block_length  ","  block_length  "]}," RuboCop Cop Style BlockDelimiters braces_for_chaining_message":{"type":"method","name":"braces_for_chaining_message","children":[],"call":[" return_value_chaining? ","block_length > ","Util  block_length "," block_length "," block_length > ","node multiline? ","node chained? ","Util  block_length  > "," block_length  > ","Util  Util  block_length  ","Util   block_length  "," Util  block_length  ","  block_length  "," Util  block_length  > ","  block_length  > "]}," RuboCop Cop Style BlockDelimiters semantic_message":{"type":"method","name":"semantic_message","children":[],"call":["block_begin == ","node loc begin source ","node loc begin ","node loc ","node loc begin source  == "]}," RuboCop Cop Style BlockDelimiters line_count_based_message":{"type":"method","name":"line_count_based_message","children":[],"call":["block_length > ","Util  block_length "," block_length "," block_length > ","node multiline? ","Util  block_length  > "," block_length  > ","Util  Util  block_length  ","Util   block_length  "," Util  block_length  ","  block_length  "," Util  block_length  > ","  block_length  > "]}," RuboCop Cop Style AndOr correctable_send?":{"type":"method","name":"correctable_send?","children":[],"call":["method_name to_s =~ ","method_name to_s ","args last ","node loc begin source != ","node loc begin source ","node loc begin ","node loc ","node loc begin ! ","node arguments? ","node parenthesized? ! ","node parenthesized? ","node method? ! ","node method? "]}," RuboCop Cop Style AndOr correct_other":{"type":"method","name":"correct_other","children":[],"call":["corrector insert_after ","node loc expression ","node loc ","corrector insert_before ","node loc expression begin source != ","node loc expression begin source ","node loc expression begin ","node source_range ","node source_range begin source != ","node source_range begin source ","node source_range begin ","node source_range begin is? ","corrector wrap "]}," RuboCop Cop Style AndOr correct_send":{"type":"method","name":"correct_send","children":[],"call":["corrector insert_after ","args last loc expression ","args last loc ","args last ","corrector replace ","Parser Source Range  new ","begin_paren + ","node loc selector end_pos ","node loc selector ","node loc ","node loc expression source_buffer ","node loc expression "," correctable_send? "," fail "," correct_other ","node loc selector source == ","node loc selector source ","method_name == ","args last source_range ","node source_range source_buffer ","node source_range ","node send_type? "," raise ",") freeze ","( freeze "," whitespace_before_arg "," correct_not "," correct_setter "," setter_method? ","node last_argument source_range ","node last_argument ","node setter_method? ","node receiver ","node method? ","node comparison_method? ","corrector insert_before ","corrector remove ","node loc selector end_pos  + ","args last source_Parser Source Range  new  ","node source_Parser Source Range  new  source_buffer ","node source_Parser Source Range  new  ","node last_argument source_Parser Source Range  new  "]}," RuboCop Cop Style AlignParameters message":{"type":"method","name":"message","children":[],"call":["node parent send_type? ","node parent "," format "," fixed_indentation? "]}," RuboCop Cop Style AlignParameters on_method_def":{"type":"method","name":"on_method_def","children":[],"call":[" check_alignment "," base_column ","args size < ","args size ","args children ","args children  size < ","args children  size ","args children  children "]}," RuboCop Cop Rails PluralizationGrammar duration_method?":{"type":"method","name":"duration_method?","children":[],"call":["PLURAL_DURATION_METHODS  key? ","SINGULAR_DURATION_METHODS  key? "]}," RuboCop Cop Rails PluralizationGrammar singularize":{"type":"method","name":"singularize","children":[],"call":["PLURAL_DURATION_METHODS  fetch to_s ","PLURAL_DURATION_METHODS  fetch ","method_name to_sym "]}," RuboCop Cop Rails PluralizationGrammar pluralize":{"type":"method","name":"pluralize","children":[],"call":["SINGULAR_DURATION_METHODS  fetch to_s ","SINGULAR_DURATION_METHODS  fetch ","method_name to_sym "]}," RuboCop Cop Rails PluralizationGrammar literal_number?":{"type":"method","name":"literal_number?","children":[],"call":["node float_type? ","node int_type? "]}," RuboCop Cop Rails PluralizationGrammar plural_receiver?":{"type":"method","name":"plural_receiver?","children":[],"call":[" singular_receiver? ! "," singular_receiver? "]}," RuboCop Cop Rails PluralizationGrammar singular_receiver?":{"type":"method","name":"singular_receiver?","children":[],"call":["number == ","number abs == ","number abs "]}," RuboCop Cop Rails PluralizationGrammar singular_method?":{"type":"method","name":"singular_method?","children":[],"call":[" plural_method? ! "," plural_method? "]}," RuboCop Cop Rails PluralizationGrammar plural_method?":{"type":"method","name":"plural_method?","children":[],"call":["method_name to_s end_with? ","method_name to_s "]}," RuboCop Cop Rails PluralizationGrammar autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node loc selector ","node loc "," pluralize "," singularize "," plural_method? ","node loc selector source "," lambda "," correct_method "]}," RuboCop Cop Rails PluralizationGrammar on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format "," pluralize "," singular_method? "," plural_receiver? "," singularize "," plural_method? "," singular_receiver? "," literal_number? "," duration_method? ","receiver nil? "," expect_plural_method? "," expect_singular_method? "," offense? ","node receiver ","node method_name "]}," RuboCop Cop Performance StringReplacement string?":{"type":"method","name":"string?","children":[],"call":["node str_type? "]}," RuboCop Cop Performance FixedSize string_argument?":{"type":"method","name":"string_argument?","children":[],"call":["node str_type? ! ","node str_type? "]}," RuboCop Cop Performance FixedSize contains_double_splat?":{"type":"method","name":"contains_double_splat?","children":[],"call":["child kwsplat_type? ","child respond_to? ","node children any? ","node children ","node hash_type? ","node each_child_node any? ","node each_child_node "]}," RuboCop Cop Performance FixedSize contains_splat?":{"type":"method","name":"contains_splat?","children":[],"call":["child splat_type? ","child respond_to? ","node children any? ","node children ","node array_type? ","node each_child_node any? ","node each_child_node "]}," RuboCop Cop Performance FixedSize on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","node parent block_type? ","node parent ","node parent casgn_type? "," string_argument? "," contains_double_splat? "," contains_splat? ","STATIC_SIZED_TYPES  include? ","variable type ","COUNTERS  include? ","arg first ","arg nil? ! ","arg nil? "," counter "," allowed_argument? "," allowed_variable? "," allowed_parent? "]}," RuboCop Cop FirstElementLineBreak check_children_line_break":{"type":"method","name":"check_children_line_break","children":[],"call":[" add_offense "," class ","line == ","max loc last_line ","max loc ","n loc last_line ","n loc ","children max_by ","line != ","min loc first_line ","min loc ","n loc first_line ","children min_by ","start loc line ","start loc ","children size < ","children size "," last_by_line "," first_by_line ","max last_line ","min first_line ","start first_line ","EmptyLineCorrector  insert_before ","children empty? "," last_line ","start loc line  == ","start first_line  == ","max loc last_start loc line  ","max loc last_start first_line  "," last_by_line  loc last_line "," last_by_line  loc ","n loc last_start loc line  ","n loc last_start first_line  ","children  last_by_line _by ","start loc line  != ","start first_line  != ","min loc first_start loc line  ","min loc first_start first_line  "," first_by_line  loc first_line "," first_by_line  loc ","n loc first_start loc line  ","n loc first_start first_line  ","children  first_by_line _by ","start loc start loc line  ","start loc start first_line  "," last_by_start loc line  "," last_by_start first_line  "," first_by_start loc line  "," first_by_start first_line  ","max last_start loc line  ","max last_start first_line  "," last_by_line  last_line ","min first_start loc line  ","min first_start first_line  "," first_by_line  first_line ","start first_start loc line  ","start first_start first_line  "," last_start loc line  "," last_start first_line  "]}," RuboCop Cop FirstElementLineBreak method_uses_parens?":{"type":"method","name":"method_uses_parens?","children":[],"call":["source =~ ","node loc expression source_line [] ","limit loc column ","limit loc ","node loc expression source_line ","node loc expression ","node loc ","node source_range source_line [] ","node source_range source_line ","node source_range ","(str \"\\\\s*\\\\(\\\\s*$\") match? ","node loc expression source_line []  =~ ","node source_range source_line []  =~ ","node loc expression node loc expression source_line [] _line [] ","node loc expression node source_range source_line [] _line [] ","node loc expression node loc expression source_line [] _line ","node loc expression node source_range source_line [] _line ","node node loc expression source_line [] _range node loc expression source_line [] _line [] ","node node source_range source_line [] _range node source_range source_line [] _line [] ","node node loc expression source_line [] _range node loc expression source_line [] _line ","node node source_range source_line [] _range node source_range source_line [] _line ","node node loc expression source_line [] _range ","node node source_range source_line [] _range "]}," RuboCop Cop FirstElementLineBreak check_method_line_break":{"type":"method","name":"check_method_line_break","children":[],"call":[" check_children_line_break "," method_uses_parens? ","children first ","children empty? "]}," RuboCop Cop FirstElementLineBreak autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector insert_before ","node loc expression ","node loc "," lambda ","node source_range "]}," RuboCop Cop ConfigurableEnforcedStyle detected_style=":{"type":"method","name":"detected_style=","children":[],"call":[" config_to_allow_offenses []= "," parameter_name "," config_to_allow_offenses ","style [] ","style one? "," no_acceptable_style! ","style empty? ","style is_a? ","style nil? ","Formatter DisabledConfigFormatter  detected_styles []= "," cop_name ","Formatter DisabledConfigFormatter  detected_styles ","style first "," style_parameter_name "]}," RuboCop Cop ConfigurableEnforcedStyle detected_style":{"type":"method","name":"detected_style","children":[],"call":[" config_to_allow_offenses [] "," parameter_name "," config_to_allow_offenses ","Formatter DisabledConfigFormatter  detected_styles [] "," cop_name ","Formatter DisabledConfigFormatter  detected_styles "]}," RuboCop Cop ConfigurableEnforcedStyle no_acceptable_style!":{"type":"method","name":"no_acceptable_style!","children":[],"call":[" config_to_allow_offenses= ","Formatter DisabledConfigFormatter  detected_styles []= "," cop_name ","Formatter DisabledConfigFormatter  detected_styles "]}," RuboCop Cop ConfigurableEnforcedStyle no_acceptable_style?":{"type":"method","name":"no_acceptable_style?","children":[],"call":[" config_to_allow_offenses [] == "," config_to_allow_offenses [] "," config_to_allow_offenses "]}," RuboCop Cop ConfigurableEnforcedStyle style_detected":{"type":"method","name":"style_detected","children":[],"call":[" no_acceptable_style! "," detected_style == "," detected_style ","detected include? ","detected is_a? "," detected_style is_a? "," detected_style= "," detected_style ! ","detected to_s ","detected map! "," no_acceptable_style? ","detected include? ! "," Array map "," Array "," config_to_allow_offenses []= ","updated_list first "," style_parameter_name "," config_to_allow_offenses ","updated_list empty? "," detected_style & ","SYMBOL_TO_STRING_CACHE  values_at "," detected_style include? ","SYMBOL_TO_STRING_CACHE  [] "," detected_style size == "," detected_style size "," detected to_s _style == "," detected to_s _style ","detected to_s  include? ","detected to_s  is_a? "," detected to_s _style is_a? "," detected to_s _style= "," detected to_s _style ! ","detected to_s  to_s ","detected to_s  map! ","detected to_s  include? ! "," detected_style &  first ","SYMBOL_TO_STRING_CACHE  values_at  first "," detected_style &  empty? ","SYMBOL_TO_STRING_CACHE  values_at  empty? "," detected to_s _style & "," detected to_s _style include? "," detected to_s _style size == "," detected to_s _style size "]}," RuboCop Cop ConfigurableEnforcedStyle ambiguous_style_detected":{"type":"method","name":"ambiguous_style_detected","children":[],"call":[" style_detected "]}," RuboCop Cop ConfigurableEnforcedStyle unexpected_style_detected":{"type":"method","name":"unexpected_style_detected","children":[],"call":[" style_detected "]}," RuboCop Cop AutocorrectUnlessChangingAST InlineBeginNodes on_begin":{"type":"method","name":"on_begin","children":[],"call":["node children [] ","node children ","node children one? "," process "]}," RuboCop Cop Lint NonLocalExitFromIterator define_method?":{"type":"method","name":"define_method?","children":[],"call":["selector == ","(sym :define_method) include? "]}," RuboCop Cop Lint FormatParameterMismatch literal?":{"type":"method","name":"literal?","children":[],"call":["node dsym_type? ","node dstr_type? ","node float_type? ","node sym_type? ","node str_type? ","node int_type? "]}," RuboCop Cop Lint EndAlignment argument_case?":{"type":"method","name":"argument_case?","children":[],"call":["node ancestors first send_type? ","node ancestors first ","node ancestors ","node ancestors empty? ! ","node ancestors empty? ","node case_type? ","node parent send_type? ","node parent "]}," RuboCop Cop Lint EndAlignment alignment_node":{"type":"method","name":"alignment_node","children":[],"call":["node each_ancestor first ","node each_ancestor ","node ancestors first ","node ancestors "," argument_case? "," style == "," style "," start_line_range ","node ancestors find ","node parent ","node argument? ","node case_type? "]}," RuboCop Cop Lint EndAlignment check_alignment":{"type":"method","name":"check_alignment","children":[],"call":[" ignore_node "," check_offset ","range source ","inner_node loc keyword ","inner_node loc ","inner_node loc keyword column - ","outer_node loc expression column ","outer_node loc expression ","outer_node loc ","inner_node loc keyword column ","Parser Source Range  new ","inner_node loc keyword end_pos ","expr begin_pos ","expr source_buffer "," variable_alignment? "," style "," check_inner_node loc keyword column -  ","inner_node loc keyword  source ","Parser Source Range  new  source ","outer_node loc outer_node loc expression ession column ","outer_node loc outer_node loc expression ession ","outer_node loc expression  begin_pos ","outer_node loc expression  source_buffer "]}," RuboCop Cop Lint CircularArgumentReference check_for_circular_argument_references":{"type":"method","name":"check_for_circular_argument_references","children":[],"call":[" add_offense "," format ","arg_value to_a == ","arg_value to_a ","receiver nil? ","name == ","arg_value type ","arg_value lvar_type? "]}," RuboCop Cop Lint CircularArgumentReference on_optarg":{"type":"method","name":"on_optarg","children":[],"call":[" check_for_circular_argument_references "]}," RuboCop Cop Cop details":{"type":"method","name":"details","children":[],"call":["details empty? ","details nil? "," cop_config [] "," cop_config "]}," RuboCop Cop Cop extra_details?":{"type":"method","name":"extra_details?","children":[],"call":[" config [] [] "," config [] "," config ","@options [] "," config for_all_cops [] "," config for_all_cops "]}," RuboCop ConfigLoader gem_config_path":{"type":"method","name":"gem_config_path","children":[],"call":[" raise ","File  join ","spec gem_dir ","Gem Specification  find_by_name ","Gem Specification  find_by_name  gem_dir "]}," RuboCop ConfigLoader resolve_inheritance_from_gems":{"type":"method","name":"resolve_inheritance_from_gems","children":[],"call":["hash [] << "," gem_config_path ","hash [] ","hash []= "," Array ","(or\n  (lvar :gems)\n  (hash)) each_pair ","hash [] unshift "," fail ","gem_name == "," raise "]}," RuboCop CLI display_warning_summary":{"type":"method","name":"display_warning_summary","children":[],"call":[" warn ","warnings each "," Rainbow yellow "," Rainbow "," pluralize ","warnings size ","warnings empty? "]}," Astrolabe Node asgn_method_call?":{"type":"method","name":"asgn_method_call?","children":[],"call":[" method_name to_s end_with? "," method_name to_s "," method_name "," method_name != "]}," Astrolabe Node single_line?":{"type":"method","name":"single_line?","children":[],"call":[" multiline? ! "," multiline? "]}," Astrolabe Node multiline?":{"type":"method","name":"multiline?","children":[],"call":["expr first_line != ","expr last_line ","expr first_line "," loc expression "," loc "," loc expression  first_line != "," loc expression  last_line "," loc expression  first_line "," loc  loc expression ession "]}," Astrolabe Node def_matcher":{"type":"method","name":"def_matcher","children":[],"call":[" class_eval "," singleton_class def_node_matcher "," singleton_class "]}," RuboCop Runner enable_rails_cops":{"type":"method","name":"enable_rails_cops","children":[],"call":["config [] []= ","config [] "]}," RuboCop Runner add_unneeded_disables":{"type":"method","name":"add_unneeded_disables","children":[],"call":["offenses sort reject freeze ","offenses sort reject ","offenses sort ","cop offenses ","cop check ","source comments ","source disabled_line_ranges ","Cop Lint UnneededDisable  new ","config [] [] ","config [] ","@config_store for ","(or\n  (send\n    (ivar :@options) :[]\n    (sym :only))\n  (array)) empty? ","@options [] ","(or\n  (send\n    (ivar :@options) :[]\n    (sym :except))\n  (array)) empty? ","source disabled_line_ranges any? ","cop relevant_file? ","config cop_enabled? "," autocorrect_unneeded_disables "," check_for_unneded_disables? ","config for_cop fetch ","config for_cop "," check_for_unneeded_disables? ","Cop Lint UnneededCopDisableDirective  new ","Cop Lint UnneededDisable  new  offenses ","Cop Lint UnneededCopDisableDirective  new  offenses ","Cop Lint UnneededDisable  new  check ","Cop Lint UnneededCopDisableDirective  new  check ","@config_store for  [] [] ","@config_store for  [] ","@@config_store for _store for ","Cop Lint UnneededDisable  new  relevant_file? ","Cop Lint UnneededCopDisableDirective  new  relevant_file? ","config Cop Lint UnneededDisable  new _enabled? ","config Cop Lint UnneededCopDisableDirective  new _enabled? ","@config_store for  cop_enabled? ","config for_Cop Lint UnneededDisable  new  fetch ","config for_Cop Lint UnneededCopDisableDirective  new  fetch ","@config_store for  for_cop fetch ","config for_Cop Lint UnneededDisable  new  ","config for_Cop Lint UnneededCopDisableDirective  new  ","@config_store for  for_cop "]}," RuboCop ResultCache any_symlink?":{"type":"method","name":"any_symlink?","children":[],"call":["File  dirname "," warn ","File  symlink? ","path != ","File  dirname  != "]}," RuboCop ProcessedSource parser_class":{"type":"method","name":"parser_class","children":[],"call":[" fail ","ruby_version inspect "," require "," raise "]}," RuboCop NodePattern Macros node_search_body":{"type":"method","name":"node_search_body","children":[],"call":[]}," RuboCop NodePattern Compiler emit_trailing_params":{"type":"method","name":"emit_trailing_params","children":[],"call":["params empty? "," emit_param_list "," emit_param_list  empty? "]}," RuboCop NodePattern Compiler get_param":{"type":"method","name":"get_param","children":[],"call":["number zero? ","number > "," Integer ","number empty? "," Integer  zero? "," Integer  > "," Integer  empty? "]}," RuboCop NodePattern Compiler compile_arg":{"type":"method","name":"compile_arg","children":[],"call":[" fail_due_to ","token inspect "," get_param ","token [] ","invalid in arglist:  + ","@unify [] "," access_unify "]}," RuboCop NodePattern Compiler compile_args":{"type":"method","name":"compile_args","children":[],"call":["tokens shift ","args << "," compile_arg ","tokens first == ","tokens first ","(str \")\") include? ","tokens slice! each_with_object ","tokens slice! ","token == ","tokens find_index "]}," RuboCop NodePattern Compiler compile_funcall":{"type":"method","name":"compile_funcall","children":[],"call":["args join ","method [] "," compile_args ","method end_with? "," tokens "," compile_args  join ","method []  [] "," compile_ compile_args  ","method []  end_with? "]}," RuboCop NameSimilarity find_similar_name":{"type":"method","name":"find_similar_name","children":[],"call":["scores max_by ","hash []= ","score >= ","StringUtil  similarity ","names each_with_object ","names delete "," collect_variable_like_names ","similar_names first "," find_similar_names ","StringUtil  similarity s max_by ","StringUtil  similarity  >= "," collect_variable_like_names  each_with_object "," collect_variable_like_names  delete "," collect_variable_like_ collect_variable_like_names  ","similar_ collect_variable_like_names  first "," find_similar_names  first "," find_similar_ collect_variable_like_names  "," find_ find_similar_names  "]}," RuboCop Formatter WorstOffendersFormatter total_offense_count":{"type":"method","name":"total_offense_count","children":[],"call":["offense_counts values inject ","offense_counts values ","offense_counts values sum "]}," RuboCop Formatter WorstOffendersFormatter ordered_offense_counts":{"type":"method","name":"ordered_offense_counts","children":[],"call":["Hash  [] ","v -@ ","offense_counts sort_by ","(send\n  (lvar :offense_counts) :sort_by) to_h "]}," RuboCop Formatter WorstOffendersFormatter report_summary":{"type":"method","name":"report_summary","children":[],"call":[" output puts "," output ","count to_s ljust ","total_count to_s length + ","total_count to_s length ","total_count to_s ","count to_s ","per_file_counts each "," total_offense_count "," ordered_offense_counts ","per_file_counts size "," total_offense_count  to_s length + "," total_offense_count  to_s length "," total_offense_count  to_s "," ordered_offense_counts  each ","per_per_file_counts size s each "," ordered_offense_counts  size ","per_per_file_counts size s size "]}," RuboCop Formatter WorstOffendersFormatter finished":{"type":"method","name":"finished","children":[],"call":[" report_summary "]}," RuboCop Formatter WorstOffendersFormatter file_finished":{"type":"method","name":"file_finished","children":[],"call":["@offense_counts []= ","offenses size ","Pathname  new relative_path_from ","Pathname  new ","Dir  pwd ","offenses empty? ","Pathname  new relative_Pathname  new relative_path_from _from "]}," RuboCop Formatter WorstOffendersFormatter started":{"type":"method","name":"started","children":[],"call":[]}," RuboCop Formatter SimpleTextFormatter Report corrections":{"type":"method","name":"corrections","children":[],"call":[" colorize ","@correction_count == "," pluralize "]}," RuboCop Formatter SimpleTextFormatter Report offenses":{"type":"method","name":"offenses","children":[],"call":[" colorize ","@offense_count zero? "," pluralize "]}," RuboCop Formatter SimpleTextFormatter Report files":{"type":"method","name":"files","children":[],"call":[" pluralize "]}," RuboCop Formatter SimpleTextFormatter Report summary":{"type":"method","name":"summary","children":[],"call":[" offenses "," files "," corrections ","@correction_count > ","@correction_count positive? "," correctable ","@correctable_count positive? "]}," RuboCop Formatter SimpleTextFormatter Report initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop Formatter FormatterSet initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop Cop Util interpret_string_escapes":{"type":"method","name":"interpret_string_escapes","children":[],"call":["escape [] ","(send\n  (send\n    (lvar :escape) :[]\n    (irange\n      (int 1)\n      (int -1))) :to_i\n  (int 8)) pack ","escape [] to_i ","escape [] =~ ","(send\n  (send\n    (lvar :escape) :[]\n    (irange\n      (int 2)\n      (int -1))) :hex) pack ","escape [] hex ","escape [] split map pack ","escape [] split map ","escape [] split ","escape [] == ","STRING_ESCAPES  [] ","string gsub ","StringInterpreter  interpret "]}," RuboCop Cop Util to_symbol_literal":{"type":"method","name":"to_symbol_literal","children":[],"call":[" to_string_literal "," double_quotes_required? ","string =~ ","string to_sym "," symbol_without_quote? "]}," RuboCop Cop Util to_string_literal":{"type":"method","name":"to_string_literal","children":[],"call":["string gsub ","string inspect "," double_quotes_required? "," needs_escaping? "," compatible_external_encoding_for? ","string gsub gsub ","(send\n  (lvar :string) :gsub\n  (str \"\\\\\")) gsub "]}," RuboCop Cop Util double_quotes_acceptable?":{"type":"method","name":"double_quotes_acceptable?","children":[],"call":["cp > ","cp < ","string codepoints any? ","string codepoints "," double_quotes_required? "," needs_escaping? "," hard_to_type? "]}," RuboCop Cop Util double_quotes_required?":{"type":"method","name":"double_quotes_required?","children":[],"call":["string inspect =~ ","string inspect ","string =~ ","(str \"'|(?<! \\\\\\\\) \\\\\\\\{2}* \\\\\\\\ (?![\\\\\\\\\\\"])\") match? "]}," RuboCop Cop Util ends_its_line?":{"type":"method","name":"ends_its_line?","children":[],"call":["(send\n  (lvar :line) :=~\n  (regexp\n    (str \"\\\\s*\\\\z\")\n    (regopt))) == ","range last_column ","line =~ ","range source_buffer source_line ","range last_line ","range source_buffer ","(send\n  (lvar :range source_buffer source_line ) :=~\n  (regexp\n    (str \"\\\\s*\\\\z\")\n    (regopt))) == ","range source_buffer source_line  =~ ","range source_buffer source_range source_buffer source_line  ","range last_range source_buffer source_line  "]}," RuboCop Cop Team validate_config":{"type":"method","name":"validate_config","children":[],"call":["cop validate_config ","cop respond_to? "," cops each "," cops "]}," RuboCop Cop Style WordArray style_detected":{"type":"method","name":"style_detected","children":[],"call":["cfg []= ","@largest_brackets + "," config_to_allow_offenses= ","@smallest_percent <= ","style to_s ","cfg [] nil? ","cfg [] ","cfg [] == ","ary_size > ","ary_size < ","style == ","Float INFINITY  -@ "," config_to_allow_offenses ","largest_brackets + ","smallest_percent <= "," smallest_percent_size "," largest_brackets_size "," config_to_allow_offenses  []= ","@ largest_brackets_size  + ","@ smallest_percent_size  <= "," config_to_allow_offenses  [] nil? "," config_to_allow_offenses  [] "," config_to_allow_offenses  [] == "," largest_brackets_size  + "," smallest_percent_size  <= ","  smallest_percent_size _size ","  largest_brackets_size _size "]}," RuboCop Cop Style WordArray escape_string":{"type":"method","name":"escape_string","children":[],"call":["s gsub! ","string inspect [] tap ","string inspect [] ","string inspect "]}," RuboCop Cop Style WordArray style":{"type":"method","name":"style","children":[],"call":[" cop_config [] to_sym "," cop_config [] "," cop_config "]}," RuboCop Cop Style UnneededPercentQ acceptable_capital_q?":{"type":"method","name":"acceptable_capital_q?","children":[],"call":[" double_quotes_acceptable? ","node str_content ","node str_type? ","src =~ ","src include? ","node source "," double_quotes_required? ","node source  =~ ","node source  include? "]}," RuboCop Cop Style UnneededPercentQ message":{"type":"method","name":"message","children":[],"call":[" format ","src [] ","src start_with? ","node source ","node source  [] ","node source  start_with? "]}," RuboCop Cop Style UnneededInterpolation autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","embedded_loc end ","embedded_loc begin ","loc end ","loc begin "," lambda ","loc expression ","variable_loc expression source ","variable_loc expression ","embedded_node children first loc ","embedded_node children first ","embedded_node children "," single_variable_interpolation? ","embedded_loc expression source ","embedded_loc expression "," variable_interpolation? ","embedded_node loc ","node children first ","node children ","node loc "," autocorrect_other "," autocorrect_single_variable_interpolation "," autocorrect_variable_interpolation ","embedded_node loc  end ","embedded_node loc  begin ","node loc  end ","node loc  begin ","node loc  expression ","embedded_node children first loc  expression source ","variable_node loc  expression source ","embedded_node children first loc  expression ","variable_node loc  expression ","node children first  children first loc ","embedded_node children first node loc  ","node children first  children first ","node children first  children ","embedded_node loc  expression source ","embedded_node loc  expression ","node children first  loc ","embedded_node node loc  ","node node loc  "]}," RuboCop Cop Style UnneededInterpolation embedded_in_percent_array?":{"type":"method","name":"embedded_in_percent_array?","children":[],"call":[" percent_literal? ","node parent ","node parent type == ","node parent type ","node parent array_type? "]}," RuboCop Cop Style UnneededInterpolation implicit_concatenation?":{"type":"method","name":"implicit_concatenation?","children":[],"call":["node parent type == ","node parent type ","node parent ","node parent dstr_type? "]}," RuboCop Cop Style UnneededInterpolation variable_interpolation?":{"type":"method","name":"variable_interpolation?","children":[],"call":["node reference? ","node variable? "]}," RuboCop Cop Style UnneededInterpolation interpolation?":{"type":"method","name":"interpolation?","children":[],"call":["node type == ","node type "," variable_interpolation? ","node begin_type? "]}," RuboCop Cop Style UnneededInterpolation single_child?":{"type":"method","name":"single_child?","children":[],"call":["node children size == ","node children size ","node children ","node children one? "]}," RuboCop Cop Style UnneededInterpolation single_variable_interpolation?":{"type":"method","name":"single_variable_interpolation?","children":[],"call":[" variable_interpolation? ","node children first ","node children "," single_child? ","node children one? "]}," RuboCop Cop Style UnneededInterpolation single_interpolation?":{"type":"method","name":"single_interpolation?","children":[],"call":[" embedded_in_percent_array? ! "," embedded_in_percent_array? "," implicit_concatenation? ! "," implicit_concatenation? "," interpolation? ","node children first ","node children "," single_child? ","node children one? "]}," RuboCop Cop Style UnneededInterpolation on_dstr":{"type":"method","name":"on_dstr","children":[],"call":[" add_offense "," single_interpolation? "]}," RuboCop Cop Style TrivialAccessors in_module_or_instance_eval?":{"type":"method","name":"in_module_or_instance_eval?","children":[],"call":["pnode method_name == ","pnode method_name ","pnode type ","node each_ancestor each ","node each_ancestor ","pnode method? "]}," RuboCop Cop Style TrailingCommaInLiteral check_literal":{"type":"method","name":"check_literal","children":[],"call":[" check ","node loc end begin_pos ","node loc end ","node loc ","node children last source_range end_pos ","node children last source_range ","node children last ","node children "," brackets? ","node children empty? "]}," RuboCop Cop Style TrailingCommaInLiteral on_hash":{"type":"method","name":"on_hash","children":[],"call":[" check_literal "]}," RuboCop Cop Style TrailingCommaInLiteral on_array":{"type":"method","name":"on_array","children":[],"call":[" check_literal "," square_brackets? ","node square_brackets? "]}," RuboCop Cop Style TrailingCommaInArguments on_send":{"type":"method","name":"on_send","children":[],"call":[" check ","node source_range end_pos ","node source_range ","args last source_range end_pos ","args last source_range ","args last "," brackets? ","args empty? ","node last_argument source_range end_pos ","node last_argument source_range ","node last_argument ","node arguments ","node parenthesized? ","node arguments? "]}," RuboCop Cop Style Tab string_literal_lines":{"type":"method","name":"string_literal_lines","children":[],"call":["lines merge ","str_lines to_a ","loc last_line ","loc first_line + ","loc first_line ","body last_line ","body first_line ","loc heredoc_body ","loc is_a? ","str location ","ast each_node each_with_object ","Set  new ","ast each_node ","ast nil? ","str location  last_line ","str location  first_line + ","str location  first_line ","loc heredoc_body  last_line ","loc heredoc_body  first_line ","loc heredoc_loc heredoc_body  ","str location  heredoc_body ","str location  is_a? ","str str location ation "]}," RuboCop Cop Style SymbolArray escape_string":{"type":"method","name":"escape_string","children":[],"call":["s gsub! ","string inspect [] tap ","string inspect [] ","string inspect "]}," RuboCop Cop Style SymbolArray autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node source_range "," lambda ","syms join "," to_symbol_literal ","syms map ","s gsub "," escape_string "," double_quotes_required? ","syms any? "," style == "," style ","c children [] to_s ","c children [] ","c children ","node children map ","node children "," needs_escaping? "," bracket_replacement "," percent_replacement "," correct_bracketed "," correct_percent ","PercentLiteralCorrector  new correct ","PercentLiteralCorrector  new "]}," RuboCop Cop Style SymbolArray symbols_contain_spaces?":{"type":"method","name":"symbols_contain_spaces?","children":[],"call":["content =~ ","node children any? ","node children ","(str \" \") match? ","content to_s include? ","content to_s "]}," RuboCop Cop Style SymbolArray comments_in_array?":{"type":"method","name":"comments_in_array?","children":[],"call":["(send\n  (send\n    (send\n      (send\n        (lvar :comment) :loc) :expression) :to_a) :&\n  (lvar :array_range)) empty? ! ","(send\n  (send\n    (send\n      (send\n        (lvar :comment) :loc) :expression) :to_a) :&\n  (lvar :array_range)) empty? ","comment loc expression to_a & ","comment loc expression to_a ","comment loc expression ","comment loc ","comments any? ","node source_range to_a ","node source_range "," processed_source comments "," processed_source ","(send\n  (send\n    (send\n      (send\n        (lvar :comment) :loc) :expression) :to_a) :&\n  (lvar :node source_range to_a )) empty? ! ","(send\n  (send\n    (send\n      (send\n        (lvar :comment) :loc) :expression) :to_a) :&\n  (lvar :node source_range to_a )) empty? "," processed_source comments  any? "," processed_source  processed_source comments  "]}," RuboCop Cop Style SymbolArray validate_config":{"type":"method","name":"validate_config","children":[],"call":[" fail "," target_ruby_version < "," target_ruby_version "," style == "," style "," raise "]}," RuboCop Cop Style StringLiterals check_multiline_quote_style":{"type":"method","name":"check_multiline_quote_style","children":[],"call":[" add_offense "," double_quotes_acceptable? ","c str_content ","children none? "," style == "," style ","quote == "," wrong_quotes? ","children all? ","node children ","node source_range "," accept_child_double_quotes? ! "," accept_child_double_quotes? "," unexpected_double_quotes? "," unexpected_single_quotes? "," register_offense ","node children  none? ","node children  all? ","node node children  ","node source_node source_range  "]}," RuboCop Cop Style StringLiterals consistent_multiline?":{"type":"method","name":"consistent_multiline?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style StabbyLambdaParentheses arrow_form?":{"type":"method","name":"arrow_form?","children":[],"call":["node loc selector source == ","node loc selector source ","node loc selector ","node loc "]}," RuboCop Cop Style StabbyLambdaParentheses arrow_lambda_with_args?":{"type":"method","name":"arrow_lambda_with_args?","children":[],"call":[" args? "," arrow_form? "," lambda_node? "]}," RuboCop Cop Style SpecialGlobalVars preferred_names":{"type":"method","name":"preferred_names","children":[],"call":["PERL_VARS  [] ","ENGLISH_VARS  [] "," style == "," style ","vars [] "," raise "," style inspect ","STYLE_VARS_MAP  fetch "]}," RuboCop Cop Style SpaceBeforeFirstArg autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," lambda "]}," RuboCop Cop Style SpaceBeforeFirstArg on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","space length > ","space length ","Parser Source Range  new ","arg1 begin_pos ","arg1_with_space begin_pos ","arg1 source_buffer "," range_with_surrounding_space "," aligned_with_something? "," allow_for_alignment? ","arg1 line > ","node loc line ","node loc ","arg1 line ","args first source_range ","args first ","node asgn_method_call? "," operator? ","args empty? "," parentheses? "," expect_params_after_method_name? "," regular_method_call_with_params? "," range_between ","first_arg begin_pos ","first_arg_with_space begin_pos ","node first_argument source_range ","node first_argument "," regular_method_call_with_arguments? ","Parser Source Range  new  length > "," range_between  length > ","Parser Source Range  new  length "," range_between  length ","args first source_range  begin_pos ","arg1_with_Parser Source Range  new  begin_pos ","arg1_with_ range_between  begin_pos "," range_with_surrounding_space  begin_pos ","args first source_range _with_space begin_pos ","args first source_range  source_buffer "," range_with_surrounding_Parser Source Range  new  "," range_with_surrounding_ range_between  ","args first source_range  line > ","args first source_range  line ","node first_argument source_range  begin_pos ","first_arg_with_Parser Source Range  new  begin_pos ","first_arg_with_ range_between  begin_pos ","node first_argument source_range _with_space begin_pos ","node node first_argument source_range ument source_range ","node node first_argument source_range ument "]}," RuboCop Cop Style SpaceAroundOperators excess_trailing_space?":{"type":"method","name":"excess_trailing_space?","children":[],"call":[" aligned_with_something? ! "," aligned_with_something? "," allow_for_alignment? ! "," allow_for_alignment? ","with_space source =~ ","with_space source "]}," RuboCop Cop Style SpaceAroundOperators excess_leading_space?":{"type":"method","name":"excess_leading_space?","children":[],"call":[" aligned_with_operator? ! "," aligned_with_operator? "," allow_for_alignment? ! "," allow_for_alignment? ","with_space source =~ ","with_space source "]}," RuboCop Cop Style SpaceAroundOperators on_special_asgn":{"type":"method","name":"on_special_asgn","children":[],"call":[" check_operator ","right source_range ","node loc operator ","node loc "]}," RuboCop Cop Style SpaceAroundOperators on_binary":{"type":"method","name":"on_binary","children":[],"call":[" check_operator ","right source_range ","node loc operator ","node loc ","right nil? ","rhs source_range "]}," RuboCop Cop Style RedundantParentheses method_call_with_redundant_parentheses?":{"type":"method","name":"method_call_with_redundant_parentheses?","children":[],"call":[" square_brackets? "," parentheses? ","args empty? "," method_node_and_args "," range_end? ","node keyword_not? ","node send_type? ","node prefix_not? ","node call_type? "]}," RuboCop Cop Style RedundantParentheses keyword_with_redundant_parentheses?":{"type":"method","name":"keyword_with_redundant_parentheses?","children":[],"call":[" parentheses? ","args empty? ","args first ","args first begin_type? ","args size == ","args size ","node special_keyword? ","node keyword? "," only_begin_arg? "]}," RuboCop Cop Style RedundantParentheses disallowed_literal?":{"type":"method","name":"disallowed_literal?","children":[],"call":["ALLOWED_LITERALS  include? ! ","ALLOWED_LITERALS  include? ","node type ","node literal? "," raised_to_power_negative_numeric? ! "," raised_to_power_negative_numeric? ","node range_type? ! ","node range_type? "]}," RuboCop Cop Style RedundantParentheses keyword_ancestor?":{"type":"method","name":"keyword_ancestor?","children":[],"call":["node ancestors first keyword? ","node ancestors first ","node ancestors ","node parent keyword? ","node parent "]}," RuboCop Cop Style RedundantParentheses offense":{"type":"method","name":"offense","children":[],"call":[" add_offense ","ParenthesesCorrector  correct "]}," RuboCop Cop Style RedundantParentheses on_begin":{"type":"method","name":"on_begin","children":[],"call":[" offense "," method_call_with_redundant_parentheses? ","child_node const_type? ","child_node variable? "," disallowed_literal? "," keyword_with_redundant_parentheses? "," parens_required? "," keyword_ancestor? ","node children first ","node children "," parentheses? "," check "," rescue? "," parentheses? ! ","node parent "," first_argument? ","child_node hash_type? "," parens_allowed? ","node parent until_post_type? ","node parent while_post_type? "," ignore_syntax? ","node children first  const_type? ","node children first  variable? ","node children first  hash_type? "]}," RuboCop Cop Style ParallelAssignment GenericCorrector cop_config":{"type":"method","name":"cop_config","children":[],"call":["@config for_cop "]}," RuboCop Cop Style ParallelAssignment AssignmentSorter accesses?":{"type":"method","name":"accesses?","children":[],"call":[" matching_calls any? "," matching_calls ","lhs receiver ","lhs method_name to_s chop to_sym ","lhs method_name to_s chop ","lhs method_name to_s ","lhs method_name ","args == ","lhs method_args ","lhs method_name == ","lhs method? ","lhs arguments "]}," RuboCop Cop Style OptionHash validate_config":{"type":"method","name":"validate_config","children":[],"call":[" fail "," target_ruby_version < "," target_ruby_version "," raise "]}," RuboCop Cop Style Next heredoc_lines":{"type":"method","name":"heredoc_lines","children":[],"call":["(erange\n  (send\n    (lvar :b) :line)\n  (send\n    (lvar :b) :last_line)) to_a ","b last_line ","b line ","(send\n  (block\n    (send\n      (send\n        (lvar :node) :each_node\n        (sym :dstr)) :select)\n    (args\n      (arg :n))\n    (send\n      (send\n        (lvar :n) :loc) :respond_to?\n      (sym :heredoc_body))) :map) flat_map ","n loc heredoc_body ","n loc ","(send\n  (send\n    (lvar :node) :each_node\n    (sym :dstr)) :select) map ","n loc respond_to? ","node each_node select ","node each_node ","(send\n  (send\n    (send\n      (lvar :node) :each_node\n      (sym :dstr)) :select\n    (block-pass\n      (sym :heredoc?))) :map) flat_map ","node each_node select map "]}," RuboCop Cop Style Next reindent":{"type":"method","name":"reindent","children":[],"call":["corrector insert_before ","  * ","adjustment -@ ","buffer line_range ","adjustment < ","corrector remove_leading ","adjustment > ","@reindented_lines []= ","@reindented_lines [] ","lines each ","actual_indent - ","(send\n  (lvar :lines) :map) min ","buffer source_line =~ ","buffer source_line ","lines map ","lines empty? ","lines reject! ","range source_line =~ ","range source_line ","range source_buffer ","node source_range "," reindent_line "," actual_indent - "," actual_indent ","range source_buffer  line_range ","buffer line_node source_range  ","(send\n  (lvar :lines) :map) min  - ","range source_buffer  source_line =~ ","range source_buffer  source_line ","node source_range  source_line =~ ","node source_range  source_line ","range source_range source_buffer  ","node source_range  source_buffer ","node source_node source_range  "," (send\n  (lvar :lines) :map) min  - "," (send\n  (lvar :lines) :map) min  "]}," RuboCop Cop Style Next end_followed_by_whitespace_only?":{"type":"method","name":"end_followed_by_whitespace_only?","children":[],"call":["source_buffer source [] =~ ","source_buffer source [] ","source_buffer source ","(str \"\\\\A\\\\s*$\") match? "]}," RuboCop Cop Style Next end_range":{"type":"method","name":"end_range","children":[],"call":["Parser Source Range  new "," end_followed_by_whitespace_only? ","node loc end begin_pos - ","node source_range column ","node source_range ","node loc end begin_pos ","node loc end ","node loc ","node loc end end_pos ","node source_range source_buffer "," range_between ","node loc end column ","node loc end node loc end begin_pos -  - ","node loc end node loc end begin_pos -  ","node loc end node loc end end_pos  ","node source_range node source_range source_buffer  "]}," RuboCop Cop Style Next cond_range":{"type":"method","name":"cond_range","children":[],"call":["Parser Source Range  new ","cond source_range end_pos ","cond source_range ","node source_range begin_pos ","node source_range ","node source_range source_buffer ","node loc begin end_pos ","node loc begin ","node loc "," range_between ","cond source_range cond source_range end_pos  ","cond source_range node loc begin end_pos  ","node loc begin cond source_range end_pos  ","node loc begin node loc begin end_pos  "]}," RuboCop Cop Style Next investigate":{"type":"method","name":"investigate","children":[],"call":["Hash  new "]}," RuboCop Cop Style NestedParenthesizedCalls rspec_matcher?":{"type":"method","name":"rspec_matcher?","children":[],"call":["send method_args one? ","send method_args ","RSPEC_MATCHERS  include? ","send method_name ","parent method_args one? ","parent method_args ","send_node arguments one? ","send_node arguments ","send_node method_name ","send_node parent arguments one? ","send_node parent arguments ","send_node parent "]}," RuboCop Cop Style NestedParenthesizedCalls parenthesized_call?":{"type":"method","name":"parenthesized_call?","children":[],"call":["send loc begin is? ","send loc begin ","send loc "]}," RuboCop Cop Style NestedParenthesizedCalls on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format ","nested source ","nested source_range "," rspec_matcher? "," operator? ","nested method_name "," parenthesized_call? ","nested method_args empty? ","nested method_args ","node each_child_node ","nested asgn_method_call? "," allowed_omission? ","node parenthesized? "," autocorrect "]}," RuboCop Cop Style MultilineOperationIndentation relevant_node?":{"type":"method","name":"relevant_node?","children":[],"call":["node loc dot ! ","node loc dot ","node loc "]}," RuboCop Cop Style MultilineOperationIndentation validate_config":{"type":"method","name":"validate_config","children":[],"call":[" fail "," cop_config [] "," cop_config "," style == "," style "," raise "]}," RuboCop Cop Style MultilineMethodCallIndentation operation_rhs":{"type":"method","name":"operation_rhs","children":[],"call":[" within_node? "," operator? ","receiver each_ancestor select each ","receiver each_ancestor select ","receiver each_ancestor "]}," RuboCop Cop Style MultilineMethodCallIndentation semantic_alignment_base":{"type":"method","name":"semantic_alignment_base","children":[],"call":["first_send loc dot join ","first_send loc selector ","first_send loc ","first_send loc dot ","first_send loc dot line != ","first_send loc line ","first_send loc dot line ","node parent ","node parent send_type? ","node block_type? ","node loc dot ","node loc ","node send_type? "," argument_in_method_call ","rhs source start_with? ","rhs source ","node loc dot join ","node loc selector "," semantic_alignment_node ","node parent  loc dot join ","node parent  loc selector ","node parent  loc ","node parent  loc dot ","node parent  loc dot line != ","node parent  loc line ","node parent  loc dot line "," semantic_alignment_node  parent "," semantic_alignment_node  parent send_type? "," semantic_alignment_node  block_type? "," semantic_alignment_node  loc dot "," semantic_alignment_node  loc "," semantic_alignment_node  send_type? "," semantic_alignment_node  loc dot join "," semantic_alignment_node  loc selector "," semantic_alignment_ semantic_alignment_node  "]}," RuboCop Cop Style MultilineMethodCallIndentation syntactic_alignment_base":{"type":"method","name":"syntactic_alignment_base","children":[],"call":["n source_range "," operation_rhs "," assignment_rhs source_range "," assignment_rhs "," part_of_assignment_rhs ","expression source_range ","n type "," kw_node_with_special_indentation "," operation_rhs  source_ra operation_rhs ge "," part_of_assignment_rhs  source_ra part_of_assignment_rhs ge "," kw_node_with_special_indentation  source_ra kw_node_with_special_indentation ge "," operatio operation_rhs _rhs "," operatio part_of_assignment_rhs _rhs "," operatio kw_node_with_special_indentation _rhs "," assig operation_rhs me operation_rhs t_rhs source_ra operation_rhs ge "," assig part_of_assignment_rhs me part_of_assignment_rhs t_rhs source_ra part_of_assignment_rhs ge "," assig kw_node_with_special_indentation me kw_node_with_special_indentation t_rhs source_ra kw_node_with_special_indentation ge "," assig operation_rhs me operation_rhs t_rhs "," assig part_of_assignment_rhs me part_of_assignment_rhs t_rhs "," assig kw_node_with_special_indentation me kw_node_with_special_indentation t_rhs "," part_of_assig operation_rhs me operation_rhs t_rhs "," part_of_assig part_of_assignment_rhs me part_of_assignment_rhs t_rhs "," part_of_assig kw_node_with_special_indentation me kw_node_with_special_indentation t_rhs ","expressio operation_rhs  source_ra operation_rhs ge ","expressio part_of_assignment_rhs  source_ra part_of_assignment_rhs ge ","expressio kw_node_with_special_indentation  source_ra kw_node_with_special_indentation ge "," operation_rhs  type "," part_of_assignment_rhs  type "," kw_node_with_special_indentation  type "," kw_ operation_rhs ode_with_special_i operation_rhs de operation_rhs tatio operation_rhs  "," kw_ part_of_assignment_rhs ode_with_special_i part_of_assignment_rhs de part_of_assignment_rhs tatio part_of_assignment_rhs  "," kw_ kw_node_with_special_indentation ode_with_special_i kw_node_with_special_indentation de kw_node_with_special_indentation tatio kw_node_with_special_indentation  "]}," RuboCop Cop Style MultilineMethodCallIndentation alignment_base":{"type":"method","name":"alignment_base","children":[],"call":[" syntactic_alignment_base "," semantic_alignment_base ","given_style == "," receiver_alignment_base "]}," RuboCop Cop Style MultilineMethodCallIndentation message":{"type":"method","name":"message","children":[],"call":[" correct_indentation ","rhs column - "," indentation ","rhs column ","@base line ","@base source [] ","@base source ","rhs source "," operation_description "," configured_indentation_width "," style == "," style "," no_base_message "," align_with_base_message "," should_align_with_base? "," relative_to_receiver_message "," should_indent_relative_to_receiver? "]}," RuboCop Cop Style MultilineMethodCallIndentation offending_range":{"type":"method","name":"offending_range","children":[],"call":["@column_delta != ","correct_column - ","rhs column "," indentation + "," correct_indentation "," indentation ","@base column "," alignment_base "," not_for_this_cop? "," begins_its_line? ","@base column + "," extra_indentation ","@column_delta nonzero? ","correct_column -  != "," indentation +  - ","@base column  - ","@base column +  - "," alignment_base  column "," alignment_base  column + ","correct_column -  nonzero? "]}," RuboCop Cop Style MultilineMethodCallIndentation relevant_node?":{"type":"method","name":"relevant_node?","children":[],"call":["send_node loc dot ","send_node loc "]}," RuboCop Cop Style MultilineMethodCallIndentation validate_config":{"type":"method","name":"validate_config","children":[],"call":[" fail "," cop_config [] "," cop_config "," style == "," style "," raise "]}," RuboCop Cop Style MultilineAssignmentLayout supported_types":{"type":"method","name":"supported_types","children":[],"call":[" cop_config [] map "," cop_config [] "," cop_config "]}," RuboCop Cop Style MultilineAssignmentLayout autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," lambda ","Parser Source Range  new "," extract_rhs source_range begin_pos "," extract_rhs source_range "," extract_rhs ","node loc operator end_pos ","node loc operator ","node loc ","node source_range source_buffer ","node source_range ","corrector insert_after "," style "," range_between "," extract_rhs source_Parser Source Range  new  begin_pos "," extract_rhs source_ range_between  begin_pos "," extract_rhs source_Parser Source Range  new  "," extract_rhs source_ range_between  ","node source_Parser Source Range  new  source_buffer ","node source_ range_between  source_buffer ","node source_Parser Source Range  new  ","node source_ range_between  "," Parser Source Range  new _between ","  range_between _between "]}," RuboCop Cop Style MultilineAssignmentLayout check_same_line_offense":{"type":"method","name":"check_same_line_offense","children":[],"call":[" add_offense ","node loc operator line != ","rhs loc line ","rhs loc ","node loc operator line ","node loc operator ","node loc "]}," RuboCop Cop Style MultilineAssignmentLayout check_new_line_offense":{"type":"method","name":"check_new_line_offense","children":[],"call":[" add_offense ","node loc operator line == ","rhs loc line ","rhs loc ","node loc operator line ","node loc operator ","node loc "]}," RuboCop Cop Style MultilineAssignmentLayout check_assignment":{"type":"method","name":"check_assignment","children":[],"call":[" check_same_line_offense "," check_new_line_offense "," style ","rhs loc first_line == ","rhs loc last_line ","rhs loc ","rhs loc first_line "," supported_types include? ","rhs type "," supported_types "]}," RuboCop Cop Style MultilineArrayBraceLayout closing_brace_on_same_line?":{"type":"method","name":"closing_brace_on_same_line?","children":[],"call":["node loc end line == ","node children last loc last_line ","node children last loc ","node children last ","node children ","node loc end line ","node loc end ","node loc "]}," RuboCop Cop Style MultilineArrayBraceLayout opening_brace_on_same_line?":{"type":"method","name":"opening_brace_on_same_line?","children":[],"call":["node loc begin line == ","node children first loc first_line ","node children first loc ","node children first ","node children ","node loc begin line ","node loc begin ","node loc "]}," RuboCop Cop Style MultilineArrayBraceLayout autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove "," lambda ","Parser Source Range  new ","node loc end begin_pos ","node loc end ","node loc ","node children last source_range end_pos ","node children last source_range ","node children last ","node children ","node source_range source_buffer ","node source_range ","corrector insert_before ","\n freeze "," closing_brace_on_same_line? ","node children last source_Parser Source Range  new  end_pos ","node children last source_Parser Source Range  new  ","node source_Parser Source Range  new  source_buffer ","node source_Parser Source Range  new  "]}," RuboCop Cop Style MultilineArrayBraceLayout on_array":{"type":"method","name":"on_array","children":[],"call":[" add_offense "," closing_brace_on_same_line? "," opening_brace_on_same_line? ","node children empty? ","node children ","node loc begin ","node loc "," check_brace_layout "]}," RuboCop Cop Style MethodCallParentheses lambda_call_syntax?":{"type":"method","name":"lambda_call_syntax?","children":[],"call":["node loc selector nil? ","node loc selector ","node loc ","node method_name == ","node method_name "]}," RuboCop Cop Style IndentHash brace_alignment_style":{"type":"method","name":"brace_alignment_style","children":[],"call":[]}," RuboCop Cop Style IndentAssignment check_assignment":{"type":"method","name":"check_assignment","children":[],"call":[" check_alignment ","base + "," configured_indentation_width ","node source_range column ","node source_range ","node loc operator line == ","rhs loc line ","rhs loc ","node loc operator line ","node loc operator ","node loc "," display_column ","node source_range column  + "," display_column  + "]}," RuboCop Cop Style IndentArray message":{"type":"method","name":"message","children":[],"call":[" format "," configured_indentation_width "]}," RuboCop Cop Style IndentArray base_description":{"type":"method","name":"base_description","children":[],"call":[" style == "," style "]}," RuboCop Cop Style IndentArray check":{"type":"method","name":"check","children":[],"call":[" check_right_bracket ","array_node loc end ","array_node loc "," check_first ","first_elem source_range line == ","left_bracket line ","first_elem source_range line ","first_elem source_range ","array_node children first ","array_node children ","array_node loc begin "," ignored_node? ","array_node values first ","array_node values ","array_node children first  source_range line == ","array_node values first  source_range line == ","array_node loc begin  line ","array_node children first  source_range line ","array_node values first  source_range line ","array_node children first  source_range ","array_node values first  source_range "]}," RuboCop Cop Style IndentArray brace_alignment_style":{"type":"method","name":"brace_alignment_style","children":[],"call":[]}," RuboCop Cop Style IndentArray on_send":{"type":"method","name":"on_send","children":[],"call":[" check "," each_argument_node "]}," RuboCop Cop Style IfInsideElse on_if":{"type":"method","name":"on_if","children":[],"call":[" add_offense ","node loc keyword is? ","node loc keyword ","node loc ","else_branch loc keyword is? ","else_branch loc keyword ","else_branch loc "," ternary_op? ","else_branch if_type? "," ternary? ","else_branch if? ","node else_branch ","node unless? ","node ternary? "," allow_if_modifier_in_else_branch? "," autocorrect "," ignore_node "," part_of_ignored_node? ","node else_branch  loc keyword is? ","node else_branch  loc keyword ","node else_branch  loc ","node else_branch  if_type? ","node else_branch  if? ","node node else_branch  "," allow_if_modifier_in_node else_branch ? "]}," RuboCop Cop Style IdenticalConditionalBranches tail":{"type":"method","name":"tail","children":[],"call":["node children last ","node children ","node begin_type? "]}," RuboCop Cop Style IdenticalConditionalBranches expand_when_branches":{"type":"method","name":"expand_when_branches","children":[],"call":["branch children [] ","branch children ","when_branches map "]}," RuboCop Cop Style IdenticalConditionalBranches expand_elses":{"type":"method","name":"expand_elses","children":[],"call":[" expand_elses unshift "," expand_elses ","branch if_type? ","branch nil? "]}," RuboCop Cop Style IdenticalConditionalBranches check_node":{"type":"method","name":"check_node","children":[],"call":[" add_offense "," format ","branch source ","branches each ","branch == ","branches [] ","branches all? "," tail ","branches map "]}," RuboCop Cop Style IdenticalConditionalBranches on_case":{"type":"method","name":"on_case","children":[],"call":[" check_node ","when_branches push "," expand_when_branches ","node loc else ","node loc "," check_branches ","node when_branches map push ","node else_branch ","node when_branches map ","node when_branches ","node else? ","branches any? "," expand_when_branches  push ","when_node when_branches map push  push "," expand_ expand_when_branches  "," expand_when_node when_branches map push  "," check_node when_branches map push  ","node  expand_when_branches  map push ","node when_node when_branches map push  map push ","node  expand_when_branches  map ","node when_node when_branches map push  map ","node  expand_when_branches  ","node when_node when_branches map push  ","node when_branches map push  any? "]}," RuboCop Cop Style IdenticalConditionalBranches on_if":{"type":"method","name":"on_if","children":[],"call":[" check_node ","branches any? "," expand_elses unshift "," expand_elses "," elsif? "," check_branches ","node if_branch ","node else_branch ","node elsif? "," expand_elses unshift  any? "," check_ expand_elses unshift  "]}," RuboCop Cop Style GuardClause line_too_long?":{"type":"method","name":"line_too_long?","children":[],"call":["indent + + > ","indent + + ","indent + ","(send\n  (send\n    (send\n      (lvar :body) :source) :+\n    (lvar :keyword)) :+\n  (send\n    (lvar :condition) :source)) length ","body source + + ","condition source ","body source + ","body source ","node loc column ","node loc "," config for_cop [] "," config for_cop "," config ","(send\n  (send\n    (lvar :source) :+\n    (lvar :keyword)) :+\n  (send\n    (lvar :condition) :source)) length ","source + + ","source + ","node loc column  + + > ","node loc column  + + ","node loc column  + "]}," RuboCop Cop Style GuardClause line_too_long_when_corrected?":{"type":"method","name":"line_too_long_when_corrected?","children":[],"call":[" line_too_long? ","else_body ! "," single_line_control_flow_exit? "]}," RuboCop Cop Style GuardClause check_trailing_if":{"type":"method","name":"check_trailing_if","children":[],"call":[" add_offense "," line_too_long_when_corrected? "," min_body_length? ","cond multiline? "," ternary_op? "," modifier_if? "," ternary? "]}," RuboCop Cop Style GuardClause elsif?":{"type":"method","name":"elsif?","children":[],"call":["node children last if_type? ","node children last ","node children ","else_branch equal? ","node parent ","node parent if_type? "]}," RuboCop Cop Style GuardClause on_if":{"type":"method","name":"on_if","children":[],"call":[" add_offense "," line_too_long_when_corrected? ","cond multiline? "," single_line_control_flow_exit? "," elsif? "," ternary_op? "," modifier_if? "," any_single_line_control_flow_exit? "," accept_form? "," contains_guard_clause? ! "," contains_guard_clause? "," accepted_form? "," register_offense ","guard_clause source "," opposite_keyword ","node loc keyword source ","node loc keyword ","node loc ","node else_branch ","node if_branch "," guard_clause_source ","node inverse_keyword "," and_or_guard_clause? "]}," RuboCop Cop Style FrozenStringLiteralComment offense":{"type":"method","name":"offense","children":[],"call":[" add_offense "," source_range ","processed_source buffer ","processed_source tokens [] ","processed_source tokens "," last_special_comment "," source_ source_range  ","  last_special_comment  "]}," RuboCop Cop Style FrozenStringLiteralComment last_special_comment":{"type":"method","name":"last_special_comment","children":[],"call":["processed_source tokens [] ","processed_source tokens ","processed_source tokens [] text =~ ","processed_source tokens [] text ","processed_source tokens [] text start_with? ","next_token text =~ ","next_token text ","Encoding ENCODING_PATTERN  match? ","processed_source processed_source tokens [] s [] ","processed_source processed_source tokens [] s ","processed_source processed_source tokens [] s [] text =~ ","processed_source processed_source tokens [] s [] text ","processed_source processed_source tokens [] s [] text start_with? ","next_processed_source tokens []  text =~ ","processed_source tokens []  text =~ ","next_processed_source tokens []  text ","processed_source tokens []  text "]}," RuboCop Cop Style FrozenStringLiteralComment frozen_string_literal_comment_exists?":{"type":"method","name":"frozen_string_literal_comment_exists?","children":[],"call":["line start_with? ","first_three_lines any? ","first_three_lines compact! ","processed_source [] "]}," RuboCop Cop Style FrozenStringLiteralComment autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector insert_after ","last_special_comment pos ","corrector insert_before "," processed_source tokens [] pos "," processed_source tokens [] "," processed_source tokens "," processed_source ","last_special_comment nil? "," last_special_comment "," lambda ","corrector remove "," range_with_surrounding_space ","node pos "," style == "," style "," insert_comment "," remove_comment "," enable_comment "," frozen_string_literal_specified? "," last_special_comment  pos "," last_special_comment  nil? ","  last_special_comment  "]}," RuboCop Cop Style FrozenStringLiteralComment on_send":{"type":"method","name":"on_send","children":[],"call":[" offense "," processed_source "," frozen_strings "," frozen_string_literal_comment_exists? "," style == "," style ","RUBY_VERSION  < "," target_ruby_version < "," target_ruby_version "]}," RuboCop Cop Style FrozenStringLiteralComment investigate":{"type":"method","name":"investigate","children":[],"call":[" offense "," frozen_string_literal_comment_exists? ","processed_source buffer source empty? ","processed_source buffer source ","processed_source buffer "," style == "," style "," target_ruby_version < "," target_ruby_version ","processed_source tokens empty? ","processed_source tokens "," check_for_comment "," check_for_no_comment "," ensure_comment "," ensure_enabled_comment "," ensure_no_comment "]}," RuboCop Cop Style FileName to_module_name":{"type":"method","name":"to_module_name","children":[],"call":["words map join to_sym ","words map join ","words map ","basename sub split ","basename sub ","basename sub split  map join to_sym ","basename sub split  map join ","basename sub split  map "]}," RuboCop Cop Style FileName to_namespace":{"type":"method","name":"to_namespace","children":[],"call":[" to_module_name ","components last ","components drop map ","components drop ","start include? ! ","start include? ","components drop_while ","components find "," Pathname each_filename to_a "," Pathname each_filename "," Pathname ","components [] map ","components [] ","start_index nil? ","components size - ","components size ","components reverse each_with_index ","components reverse "," Pathname each_filename to_a  last "," Pathname each_filename to_a  drop map "," Pathname each_filename to_a  drop "," Pathname each_filename to_a  drop_while "," Pathname each_filename to_a  find "," Pathname each_filename to_a  [] map "," Pathname each_filename to_a  [] ","components size -  nil? "," Pathname each_filename to_a  size - "," Pathname each_filename to_a  size "," Pathname each_filename to_a  reverse each_with_index "," Pathname each_filename to_a  reverse "]}," RuboCop Cop Style FileName match_namespace":{"type":"method","name":"match_namespace","children":[],"call":["expected == ","expected empty? ","match_partial call ","ancestor defined_module ","ancestor sclass_type? ","node each_ancestor ","expected pop ","name == ","expected last ","ns cbase_type? ","ns nil? "," lambda ","expected dup "," match? "," partial_matcher! ","expected dup  == ","expected dup  empty? "," partial_matcher!  call ","expected dup  pop ","expected dup  last ","expected dup  dup "]}," RuboCop Cop Style FileName find_class_or_module":{"type":"method","name":"find_class_or_module","children":[],"call":[" match_namespace ","namespace empty? ","name == ","child defined_module "," on_node ","namespace pop ","node nil? "," match_acronym? ! "," match_acronym? ","name != "," match_namespace pop space ","namespace pop space empty? ","namespace pop  == ","namespace pop space pop ","namespace pop  != "]}," RuboCop Cop Style FileName filename_good?":{"type":"method","name":"filename_good?","children":[],"call":[" snake_case? ","basename =~ "," regex ","basename sub ","basename sub  =~ ","basename sub  sub "]}," RuboCop Cop Style FileName regex":{"type":"method","name":"regex","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style FileName expect_matching_definition?":{"type":"method","name":"expect_matching_definition?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style FileName shebang?":{"type":"method","name":"shebang?","children":[],"call":["line start_with? "]}," RuboCop Cop Style ExtraSpacing align_column":{"type":"method","name":"align_column","children":[],"call":["asgn_token pos last_column - + ","asgn_token pos last_column - ","asgn_token pos last_column ","asgn_token pos ","leading size - ","leading =~ ","leading size ","line [] ","asgn_token pos column "," processed_source lines [] ","asgn_token pos line - ","asgn_token pos line "," processed_source lines "," processed_source ","line []  size - ","line []  =~ ","line []  size "," processed_source lines []  [] "," processed_source  processed_source lines [] s [] ","asgn_token pos  processed_source lines []  - ","asgn_token pos  processed_source lines []  "," processed_source  processed_source lines [] s "]}," RuboCop Cop Style ExtraSpacing contiguous_assignment_lines":{"type":"method","name":"contiguous_assignment_lines","children":[],"call":["result sort! ","result << ","@asgn_lines include? ","range line upto "," processed_source lines size "," processed_source lines "," processed_source ","range line ","range line downto "]}," RuboCop Cop Style ExtraSpacing align_equal_sign":{"type":"method","name":"align_equal_sign","children":[],"call":["corrector remove_preceding ","diff -@ ","token pos ","diff < ","corrector insert_before ","  * ","diff > ","align_to - ","token pos last_column ","@corrected add? ","tokens each ","columns max "," align_column ","tokens map ","lines include? ","t pos line ","t pos ","@asgn_tokens select "," contiguous_assignment_lines ","align_to -  -@ ","align_to -  < ","align_to -  > ","columns max  - "," contiguous_assignment_lines  include? "," contiguous_assignment_ contiguous_assignment_lines  "]}," RuboCop Cop Style ExtraSpacing equal_sign?":{"type":"method","name":"equal_sign?","children":[],"call":["token type == ","token type "]}," RuboCop Cop Style ExtraSpacing force_equal_sign_alignment?":{"type":"method","name":"force_equal_sign_alignment?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style ExtraSpacing aligned_tok?":{"type":"method","name":"aligned_tok?","children":[],"call":[" aligned_with_something? ","token pos "," aligned_comments? ","token type == ","token type "]}," RuboCop Cop Style ExtraSpacing check_other":{"type":"method","name":"check_other","children":[],"call":[" add_offense "," unary_plus_non_offense? ","Parser Source Range  new "," processed_source buffer "," processed_source ","t2 pos begin_pos - ","t2 pos begin_pos ","t2 pos ","r include? "," ignored_ranges find "," ignored_ranges ","t1 pos end_pos ","t1 pos "," aligned_tok? "," allow_for_alignment? ","t2 pos begin_pos - <= ","t1 pos line != ","t2 pos line ","t1 pos line "," ignored_range? ","end_pos <= ","range begin_pos "," extra_space_range "," ignored_Parser Source Range  new s find "," ignored_Parser Source Range  new s ","t1 pos t2 pos begin_pos -  "," ignored_Parser Source Range  new ? ","t2 pos begin_pos -  <= ","Parser Source Range  new  begin_pos "," extra_space_Parser Source Range  new  "]}," RuboCop Cop Style ExtraSpacing check_assignment":{"type":"method","name":"check_assignment","children":[],"call":[" add_offense ","token pos "," format ","@asgn_lines include? ","token pos line - ","token pos line "," aligned_assignment? "," processed_source lines [] "," processed_source lines "," processed_source "," following_line "," preceding_line "," should_aligned_with_preceding_line? ","@asgn_ processed_source lines [] s include? ","token pos  processed_source lines []  - ","token pos  processed_source lines []  "," processed_source  processed_source lines [] s [] "," processed_source  processed_source lines [] s "," following_ processed_source lines []  "," @asgn_lines include? _line "," preceding_ processed_source lines []  "," should_aligned_with_@asgn_lines include? _line? "," should_aligned_with_preceding_ processed_source lines [] ? "]}," RuboCop Cop Style EmptyLiteral string_literals_config":{"type":"method","name":"string_literals_config","children":[],"call":[" config for_cop "," config "]}," RuboCop Cop Style EmptyLiteral enforce_double_quotes?":{"type":"method","name":"enforce_double_quotes?","children":[],"call":[" string_literals_config [] == "," string_literals_config [] "," string_literals_config "]}," RuboCop Cop Style EmptyLinesAroundAccessModifier previous_line_ignoring_comments":{"type":"method","name":"previous_line_ignoring_comments","children":[],"call":[" comment_line? ! "," comment_line? ","processed_source [] reverse find ","processed_source [] reverse ","processed_source [] ","send_line - "]}," RuboCop Cop Style UnlessCorrector correct":{"type":"method","name":"correct","children":[],"call":["corrector replace ","else_assignment source ","else_branch source_range ","if_assignment source ","if_branch source_range ","corrector insert_before "," lhs ","node source_range "," lambda "," tail "," indent ","node loc end ","node loc "," correct_if_branches "," tail  source_range "," correct_ tail es "]}," RuboCop Cop Style CaseCorrector correct":{"type":"method","name":"correct","children":[],"call":["corrector replace ","else_assignment source ","else_branch source_range "," correct_branches ","corrector insert_before "," lhs ","node source_range "," lambda "," tail ","when_branches map! "," expand_when_branches "," indent ","node loc end ","node loc "," extract_tail_branches "," replace_branch_assignment "," tail  source_range "," expand_when_branches  map! "," expand_ expand_when_branches  "]}," RuboCop Cop Style IfCorrector correct":{"type":"method","name":"correct","children":[],"call":["corrector replace ","else_assignment source ","else_branch source_range "," correct_branches ","if_assignment source ","if_branch source_range ","corrector insert_before "," lhs ","node source_range "," lambda "," tail ","elsif_branches map! "," expand_elses "," indent ","node loc end ","node loc "," extract_branches "," extract_tail_branches "," correct_if_branches "," tail  source_range ","els tail es map! "," correct_ tail es "]}," RuboCop Cop Style TernaryCorrector correct":{"type":"method","name":"correct","children":[],"call":["corrector replace ","node source_range "," lambda "," lhs ","if_branch method_name != ","if_branch method_name ","if_branch send_type? ","else_rhs source ","if_rhs source ","condition source "," correction ","else_rhs source  source ","if_rhs source  source ","condition source  source "]}," RuboCop Cop Style ConditionalAssignment single_line_conditions_only?":{"type":"method","name":"single_line_conditions_only?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style ConditionalAssignment lines_with_numbers":{"type":"method","name":"lines_with_numbers","children":[],"call":["node source lines zip ","node source lines ","node source ","node loc last_line ","node loc ","node loc line "]}," RuboCop Cop Style ConditionalAssignment longest_rhs":{"type":"method","name":"longest_rhs","children":[],"call":["(send\n  (lvar :branches) :map) max ","branch children last source length ","branch children last source ","branch children last ","branch children ","branches map ","line_lengths max ","branch children last source split map ","branch children last source split ","branches flat_map "]}," RuboCop Cop Style ConditionalAssignment correction_exceeds_line_limit?":{"type":"method","name":"correction_exceeds_line_limit?","children":[],"call":["(send\n  (lvar :longest_line) :+\n  (lvar :assignment)) length > ","(send\n  (lvar :longest_line) :+\n  (lvar :assignment)) length ","longest_line + ","lines max_by ","line chomp sub ","line chomp ","node source lines map ","node source lines ","node source "," longest_rhs + + > "," longest_rhs + + ","assignment length "," longest_rhs + "," longest_rhs "," config for_cop [] "," config for_cop "," config ","assignment gsub "," lhs "," tail ","branches [] "," longest_line length > "," longest_line length "," longest_line "," longest_line_exceeds_line_limit? "," longest_rhs_exceeds_line_limit? "," line_length_cop_enabled? ","(send\n  (lvar :lines max_by ) :+\n  (lvar :assignment)) length > ","(send\n  (lvar :longest_line) :+\n  (lvar : lhs )) length > ","(send\n  (lvar :lines max_by ) :+\n  (lvar :assignment)) length ","(send\n  (lvar :longest_line) :+\n  (lvar : lhs )) length ","lines max_by  + "," lhs  length "," lhs  gsub "," lines max_by  length > "," lines max_by  length "," lines max_by  "," lines max_by _exceeds_line_limit? "]}," RuboCop Cop Style ConditionalAssignment check_node":{"type":"method","name":"check_node","children":[],"call":[" add_offense "," correction_exceeds_line_limit? ","branches any? "," single_line_conditions_only? "," assignment_types_match? ","last_statements any? "," lhs_all_match? "," tail ","branches map ","branches all? "," allowed_statements? "," allowed_ternary? "," allowed_single_line? "," autocorrect "]}," RuboCop Cop Style ConditionalAssignment assignment_type?":{"type":"method","name":"assignment_type?","children":[],"call":["method to_s end_with? ","method to_s ","METHODS  include? ","branch send_type? ","ASSIGNMENT_TYPES  include? ","branch type ","branch method_name to_s end_with? ","branch method_name to_s ","branch method_name "]}," RuboCop Cop Style ConditionalAssignment assignment_types_match?":{"type":"method","name":"assignment_types_match?","children":[],"call":["node type == ","node type ","nodes all? ","nodes first type ","nodes first "," assignment_type? ","nodes map uniq one? ","nodes map uniq ","nodes map "]}," RuboCop Cop Style ConditionalAssignment autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["CaseCorrector  correct ","UnlessCorrector  correct ","IfCorrector  correct ","node loc keyword source ","node loc keyword ","node loc ","TernaryCorrector  correct "," ternary_op? "," move_assignment_outside_condition "," move_assignment_inside_condition "," assignment_type? "]}," RuboCop Cop Style ConditionalAssignment on_case":{"type":"method","name":"on_case","children":[],"call":[" check_node "," expand_when_branches "," style == "," style ","node else_branch ","node when_branches "," expand_ expand_when_branches  ","node  expand_when_branches  "]}," RuboCop Cop Style ConditionalAssignment on_if":{"type":"method","name":"on_if","children":[],"call":[" check_node "," expand_elses "," elsif? "," style == "," style ","node loc keyword is? ","node loc keyword ","node loc "," ternary? ","node if_branch ","node else_branch ","node elsif? ","node node else_branch  "]}," RuboCop Cop Style ConditionalAssignment lhs_all_match?":{"type":"method","name":"lhs_all_match?","children":[],"call":[" lhs == "," lhs ","branches all? ","branches first ","branches empty? "]}," RuboCop Cop Style ConditionalAssignmentHelper lhs_for_send":{"type":"method","name":"lhs_for_send","children":[],"call":["node method_name ","node method_name [] ","(sym :!=) include? ! ","(sym :!=) include? ","node method_name to_s end_with? ","node method_name to_s ","node children [] map join ","node children [] map ","node children [] ","node children ","node method_name == ","node receiver source ","node receiver ","node receiver nil? ","method_name [] "," setter_method? ","method_name == ","node setter_method? ","node arguments [] map join ","node arguments [] map ","node arguments [] ","node arguments ","node method? ","node node method_name  ","node node method_name  [] ","node node method_name  to_s end_with? ","node node method_name  to_s ","node node method_name  == ","node node receiver source  source ","node node receiver source  ","node node receiver source  nil? ","node method_name  [] ","node method_name  == "]}," RuboCop Cop Style ConditionalAssignmentHelper expand_elsif":{"type":"method","name":"expand_elsif","children":[],"call":["elsif_branches << "," expand_elsif ","else_branch if_type? ","node if_type? ! ","node if_type? ","node nil? ","node else_branch ","node else_branch if_type? ","node if_branch ","node elsif? ! ","node elsif? ","node else_branch  if_type? ","node node else_branch  ","node node else_branch  if_type? "]}," RuboCop Cop Style ConditionalAssignmentHelper lhs":{"type":"method","name":"lhs","children":[],"call":["node source ","node children [] ","node children ","node children [] source "," lhs_for_send ","node type ","node loc operator source ","node loc operator ","node loc "," lhs_for_casgn "]}," RuboCop Cop Style ConditionalAssignmentHelper tail":{"type":"method","name":"tail","children":[],"call":["(splat\n  (lvar :branch)) last ","branch begin_type? "," Array last "," Array "]}," RuboCop Cop Style ConditionalAssignmentHelper correct_branches":{"type":"method","name":"correct_branches","children":[],"call":["corrector replace ","assignment source ","branch source_range ","branches each "]}," RuboCop Cop Style ConditionalAssignmentHelper expand_when_branches":{"type":"method","name":"expand_when_branches","children":[],"call":["branch children [] ","branch children ","when_branches map "]}," RuboCop Cop Style ConditionalAssignmentHelper expand_elses":{"type":"method","name":"expand_elses","children":[],"call":["elsif_branches pop ","elsif_branches any? "," expand_elsif "," expand_elsif  pop "," expand_elsif  any? "]}," RuboCop Cop Style Attr replacement_method":{"type":"method","name":"replacement_method","children":[],"call":["setter true_type? ","setter false_type? ","node last_argument ","node last_argument  true_type? ","node last_argument  false_type? "]}," RuboCop Cop Style Alias correct_alias_with_symbol_args":{"type":"method","name":"correct_alias_with_symbol_args","children":[],"call":["corrector replace ","old children first to_s ","old children first ","old children ","old source_range ","new children first to_s ","new children first ","new children ","new source_range "," lambda ","node old_identifier source [] ","node old_identifier source ","node old_identifier ","node old_identifier source_range ","node new_identifier source [] ","node new_identifier source ","node new_identifier ","node new_identifier source_range "]}," RuboCop Cop Style Alias correct_alias_to_alias_method":{"type":"method","name":"correct_alias_to_alias_method","children":[],"call":["corrector replace ","node source_range ","old children first ","old children ","new children first ","new children "," lambda "," identifier ","node old_identifier ","node new_identifier "]}," RuboCop Cop Style Alias correct_alias_method_to_alias":{"type":"method","name":"correct_alias_method_to_alias","children":[],"call":["corrector replace ","node source_range ","old children first ","old children ","new children first ","new children ","node method_args "," lambda ","send_node source_range ","send_node arguments "," identifier "]}," RuboCop Cop Style Alias bareword?":{"type":"method","name":"bareword?","children":[],"call":["sym_node source [] != ","sym_node source [] ","sym_node source ","sym_node source start_with? ! ","sym_node source start_with? ","sym_node dsym_type? "]}," RuboCop Cop Style Alias lexical_scope_type":{"type":"method","name":"lexical_scope_type","children":[],"call":["ancestor class_type? ","node each_ancestor ","ancestor nil? ","node each_ancestor first ","node each_ancestor first  class_type? ","node each_node each_ancestor first  ","node each_ancestor first  nil? ","node each_node each_ancestor first  first "]}," RuboCop Cop Style Alias scope_type":{"type":"method","name":"scope_type","children":[],"call":["parent type ","node parent ","parent method_name == ","parent method_name ","parent method? ","node parent  type ","node node parent  ","node parent  method_name == ","node parent  method_name ","node parent  method? "]}," RuboCop Cop Style Alias on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format "," lexical_scope_type "," scope_type == "," scope_type "," style == "," style ","node receiver nil? ","node receiver ","node method_name == ","node method_name ","node command? "," alias_keyword_possible? "," autocorrect ","node loc selector ","node loc "]}," RuboCop Cop Rails FindEach ignored_by_find_each?":{"type":"method","name":"ignored_by_find_each?","children":[],"call":["(sym :order) include? ","IGNORED_METHODS  include? "]}," RuboCop Cop Rails FindEach method_chain":{"type":"method","name":"method_chain","children":[],"call":["node method_name "," method_chain << "," method_chain ","node parent ","node receiver nil? ! ","node receiver nil? ","node receiver ","node block_type? ","node send_type? ","(splat\n  (send\n    (lvar :node) :ancestors)) map ","node ancestors ","(splat\n  (send\n    (send\n      (lvar :node) :descendants) :select\n    (block-pass\n      (sym :send_type?)))) map ","node descendants select ","node descendants ","node each_node map ","node each_node "]}," RuboCop Cop Performance TimesMap check":{"type":"method","name":"check","children":[],"call":[" add_offense "," format "," times_map_call "," message "]}," RuboCop Cop Performance TimesMap on_block":{"type":"method","name":"on_block","children":[],"call":[" check "]}," RuboCop Cop Performance TimesMap on_send":{"type":"method","name":"on_send","children":[],"call":[" check "]}," RuboCop Cop Performance StartWith autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node source_range ","receiver source + + + ","receiver source + + "," to_string_literal ","receiver source + ","receiver source "," lambda "," interpret_string_escapes ","regex_str [] ","receiver is_a? "," redundant_regex? "," interpret_string_escapes  [] ","regex_str []  [] "]}," RuboCop Cop Performance StartWith on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," redundant_regex? "]}," RuboCop Cop Performance StartWith literal_at_start?":{"type":"method","name":"literal_at_start?","children":[],"call":["regex_str =~ "]}," RuboCop Cop Performance RedundantSortBy autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," lambda ","Parser Source Range  new ","node loc end end_pos ","node loc end ","node loc ","send loc selector begin_pos ","send loc selector ","send loc ","node source_range source_buffer ","node source_range "," sort_by_range ","node source_Parser Source Range  new  source_buffer ","node source_Parser Source Range  new  "," sort_by_Parser Source Range  new  "]}," RuboCop Cop Performance RedundantSortBy on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," format ","Parser Source Range  new ","node loc end end_pos ","node loc end ","node loc ","send loc selector begin_pos ","send loc selector ","send loc ","node source_range source_buffer ","node source_range "," redundant_sort_by "," sort_by_range ","node source_Parser Source Range  new  source_buffer ","node source_ sort_by_range  source_buffer ","node source_Parser Source Range  new  ","node source_ sort_by_range  "," sort_by_Parser Source Range  new  "," sort_by_ sort_by_range  "]}," RuboCop Cop Performance RedundantMerge modifier?":{"type":"method","name":"modifier?","children":[],"call":["node loc end nil? ","node loc end ","node loc ","node loc respond_to? "]}," RuboCop Cop Performance RedundantMerge indent_width":{"type":"method","name":"indent_width","children":[],"call":["@config for_cop [] ","@config for_cop "]}," RuboCop Cop Performance RedundantMerge leading_spaces":{"type":"method","name":"leading_spaces","children":[],"call":["node source_range source_line [] ","node source_range source_line ","node source_range "]}," RuboCop Cop Performance RedundantMerge to_assignments":{"type":"method","name":"to_assignments","children":[],"call":[" format ","value source ","receiver source ","key source ","key source start_with? ! ","key source start_with? ","key sym_type? ","pairs map ","pair colon? ","key source  source ","key source  source start_with? ! ","key source  source start_with? ","key source  sym_type? "]}," RuboCop Cop Performance RedundantMerge autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node source_range ","parent loc keyword source << << << << << << << << ","parent loc keyword source << << << << << << << "," leading_spaces ","parent loc keyword source << << << << << << ","parent loc keyword source << << << << << ","parent loc keyword source << << << << ","parent loc keyword source << << << ","parent loc keyword source << << ","cond source ","parent loc keyword source << ","parent loc keyword source ","parent loc keyword ","parent loc ","new_source gsub! ","  * "," indent_width "," modifier_flow_control ","pairs size > ","pairs size ","node parent "," to_assignments join "," to_assignments "," lambda "," redundant_merge "," rewrite_with_modifier "," correct_single_element "," correct_multiple_elements "," redundant_merge_candidate ","node parent  loc keyword source << << << << << << << << ","node parent  loc keyword source << << << << << << << ","node parent  loc keyword source << << << << << << ","node parent  loc keyword source << << << << << ","node parent  loc keyword source << << << << ","node parent  loc keyword source << << << ","node parent  loc keyword source << << ","node parent  loc keyword source << ","node parent  loc keyword source ","node parent  loc keyword ","node parent  loc ","parent loc keyword source << << << << << << << <<  gsub! "," to_assignments join  gsub! "," rewrite_with_modifier  gsub! ","node node parent  "]}," RuboCop Cop Performance RedundantMerge on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format ","node source "," to_assignments join "," to_assignments ","receiver pure? ! ","receiver pure? ","pairs size > ","pairs size ","node value_used? "," redundant_merge "," max_key_value_pairs ","receiver loc name source == ","second_arg loc name source ","second_arg loc name ","second_arg loc ","receiver loc name source ","receiver loc name ","receiver loc ","second_arg nil? "," each_with_object_node ","parent parent ","parent begin_type? ","node parent "," each_redundant_merge ","pairs any? "," to_ to_assignments join  join "," to_ to_assignments join  "," each_with_object_node  loc name source "," each_with_object_node  loc name "," each_with_object_node  loc "," each_with_object_node  nil? ","node parent  node parent  ","node parent  begin_type? ","node node parent  "]}," RuboCop Cop Performance RedundantMatch autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node source_range "," lambda ","receiver source + + ","arg source ","receiver source + ","receiver source ","arg regexp_type? ","node receiver source + + ","node first_argument source ","node first_argument ","node receiver source + ","node receiver source ","node receiver ","node first_argument regexp_type? "]}," RuboCop Cop Performance RedundantMatch on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," only_truthiness_matters? ","node value_used? ! ","node value_used? "," match_call? ","(and\n  (send\n    (lvar :node) :parent)\n  (send\n    (send\n      (lvar :node) :parent) :block_type?)) ! ","node parent block_type? ","node parent "]}," RuboCop Cop Performance RedundantBlockCall autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node source_range "," lambda ","args map join ","args map ","args empty? ","new_source << "," parentheses? ","String  new ","args empty? ! ","String  new  << "]}," RuboCop Cop Performance RedundantBlockCall on_def":{"type":"method","name":"on_def","children":[],"call":[" add_offense "," format "," blockarg_calls "," blockarg_def "," calls_to_report each "," calls_to_report "]}," RuboCop Cop Performance RangeInclude autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node loc selector ","node loc "," lambda "]}," RuboCop Cop Performance RangeInclude on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," range_include "]}," RuboCop Cop Performance LstripRstrip autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," lambda ","Parser Source Range  new ","node source_range end_pos ","node source_range ","first_send loc selector begin_pos ","first_send loc selector ","first_send loc ","node source_range source_buffer "," range_between ","node receiver loc selector begin_pos ","node receiver loc selector ","node receiver loc ","node receiver ","node source_Parser Source Range  new  end_pos ","node source_ range_between  end_pos ","node source_Parser Source Range  new  ","node source_ range_between  ","node source_Parser Source Range  new  source_buffer ","node source_ range_between  source_buffer "," Parser Source Range  new _between ","  range_between _between "]}," RuboCop Cop Performance LstripRstrip on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format ","Parser Source Range  new ","node source_range end_pos ","node source_range ","first_send loc selector begin_pos ","first_send loc selector ","first_send loc ","node source_range source_buffer "," lstrip_rstrip "," range_between ","node source_Parser Source Range  new  end_pos ","node source_ range_between  end_pos ","node source_Parser Source Range  new  ","node source_ range_between  ","node source_Parser Source Range  new  source_buffer ","node source_ range_between  source_buffer "," Parser Source Range  new _between ","  range_between _between "]}," RuboCop Cop Performance HashEachMethods range":{"type":"method","name":"range","children":[],"call":["inner_node loc selector join ","outer_node loc selector ","outer_node loc ","inner_node loc selector ","inner_node loc ","outer_node children first ","outer_node children ","outer_node children first  loc selector join ","outer_node children first  loc selector ","outer_node children first  loc "]}," RuboCop Cop Performance HashEachMethods correct_args":{"type":"method","name":"correct_args","children":[],"call":["corrector replace ","Parser Source Range  new ","args loc end end_pos ","args loc end ","args loc ","args loc begin begin_pos ","args loc begin ","node parent source ","node parent ","(send\n  (ivar :@args) :detect) first ","@args detect ","node parent children [] ","node parent children "," range_between ","args source_range "," used? ","args children find ","args children ","node parent arguments ","node parent children []  loc end end_pos ","node parent arguments  loc end end_pos ","node parent children []  loc end ","node parent arguments  loc end ","node parent children []  loc ","node parent arguments  loc ","node parent children []  loc begin begin_pos ","node parent arguments  loc begin begin_pos ","node parent children []  loc begin ","node parent arguments  loc begin ","(send\n  (ivar :@node parent children [] ) :detect) first ","(send\n  (ivar :@node parent arguments ) :detect) first ","@node parent children []  detect ","@node parent arguments  detect ","node parent children []  source_range ","node parent arguments  source_range ","node parent children []  children find ","node parent arguments  children find ","node parent children []  children ","node parent arguments  children "]}," RuboCop Cop Performance HashEachMethods autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node loc expression ","node loc ","caller source + ","first_method [] ","caller source "," correct_args ","receiver source + ","receiver source ","@args values first ","@args values ","first_method == "," lambda "," correct_plain_each "," correct_implicit ","receiver nil? "," correct_key_value_each ","receiver receiver nil? ","receiver receiver ","node receiver ","node receiver  source + ","node receiver  source ","node receiver  nil? ","node receiver  node receiver  nil? ","node receiver  node receiver  ","node node receiver  "]}," RuboCop Cop Performance HashEachMethods check_argument":{"type":"method","name":"check_argument","children":[],"call":["(or-asgn\n  (ivasgn :@args)\n  (hash)) []= ","variable used? ","variable name ","variable block_argument? ","(or-asgn\n  (ivasgn :@block_args)\n  (array)) push "]}," RuboCop Cop Performance HashEachMethods on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," format ","method [] "," message "," range "," kv_each ","@args [] "," plain_each "," register_kv_offense "," register_each_offense "]}," RuboCop Cop Performance EndWith autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node source_range ","receiver source + + + ","receiver source + + "," to_string_literal ","receiver source + ","receiver source "," lambda "," interpret_string_escapes ","regex_str [] ","receiver is_a? "," redundant_regex? "," interpret_string_escapes  [] ","regex_str []  [] "]}," RuboCop Cop Performance EndWith on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," redundant_regex? "]}," RuboCop Cop Performance EndWith literal_at_end?":{"type":"method","name":"literal_at_end?","children":[],"call":["regex_str =~ "]}," RuboCop Cop Performance DoubleStartEndWith combine_args":{"type":"method","name":"combine_args","children":[],"call":["(send\n  (lvar :first_call_args) :+\n  (lvar :second_call_args)) map join ","(send\n  (lvar :first_call_args) :+\n  (lvar :second_call_args)) map ","first_call_args + "]}," RuboCop Cop Performance DoubleStartEndWith on_or":{"type":"method","name":"on_or","children":[],"call":[" add_offense "," format ","node source "," combine_args ","receiver source ","second_call_args all? "," two_start_end_with_calls "," add_offense_for_double_call "," process_source "]}," RuboCop Cop Performance Casecmp autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector insert_after ","arg source_range ","corrector replace ","range source =~ ","range source ","arg loc begin source == ","arg loc begin source ","arg loc begin ","arg loc "," lambda ","Parser Source Range  new ","arg loc begin begin_pos ","receiver loc selector begin_pos ","receiver loc selector ","receiver loc ","node source_range source_buffer ","node source_range "," correction "," eq_downcase "," downcase_eq "," downcase_downcase "," take_method_apart ","arg source_Parser Source Range  new  ","Parser Source Range  new  source =~ ","Parser Source Range  new  source ","node source_Parser Source Range  new  source_buffer ","node source_Parser Source Range  new  "]}," RuboCop Cop Performance Casecmp on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format ","node loc selector join ","send_downcase loc selector ","send_downcase loc ","node loc selector ","node loc "," downcase_eq "," eq_downcase "," ignore_node ","node loc expression ","CASE_METHODS  include? "," part_of_ignored_node? "," inefficient_comparison ","methods join ","node source "," build_good_method "," take_method_apart "," build_ build_good_method  "]}," RuboCop Cop TrailingComma autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector insert_after ","corrector remove ","range source "," lambda "]}," RuboCop Cop TrailingComma put_comma":{"type":"method","name":"put_comma","children":[],"call":[" add_offense "," format "," format + ","Parser Source Range  new ","last_expr end_pos ","last_expr begin_pos + ","last_expr begin_pos ","last_expr source [] =~ ","last_expr source [] ","last_expr source ","last_expr source rindex ","last_item source_range ","last_item type == ","last_item type ","items last "," avoid_autocorrect? "," elements "," autocorrect_range ","last_item block_pass_type? ","PunctuationCorrector  swap_comma ","last_item source_range  end_pos ","last_item source_range  begin_pos + ","last_item source_range  begin_pos ","last_item source_range  source [] =~ ","last_item source_range  source [] ","last_item source_range  source ","last_item source_range  source rindex ","last_item source_Parser Source Range  new  ","last_item source_ autocorrect_range  ","items last  source_range ","items last  type == ","items last  type "," autocorrect_Parser Source Range  new  "," autocorrect_ autocorrect_range  ","items last  block_pass_type? "]}," RuboCop Cop TrailingComma avoid_comma":{"type":"method","name":"avoid_comma","children":[],"call":[" add_offense "," format + "," format ","kind =~ ","Parser Source Range  new ","comma_begin_pos + "," range_between ","extra_info to_s ","(str \"array\") match? ","PunctuationCorrector  swap_comma ","kind include? "," Parser Source Range  new _between ","  range_between _between "]}," RuboCop Cop TrailingComma on_same_line?":{"type":"method","name":"on_same_line?","children":[],"call":["a last_line == ","b line ","a last_line ","range1 last_line == ","range2 line ","range1 last_line "]}," RuboCop Cop TrailingComma multiline?":{"type":"method","name":"multiline?","children":[],"call":[" on_same_line? ! "," on_same_line? ","items each_cons all? ","items each_cons ","items << ","node loc end ","node loc ","items each_cons any? ","items one? "," style == "," style ","elements map ","elements empty? ","node children ","a children ","a loc first_line != ","a loc last_line ","a loc ","a loc first_line ","a hash_type? ","args flat_map ","node type == ","node type ","node multiline? ! ","node multiline? ","items empty? "," elements map "," elements ","(send\n  (send\n    (lvar :items) :map\n    (block-pass\n      (sym :first_line))) :+\n  (send\n    (lvar :items) :map\n    (block-pass\n      (sym :last_line)))) uniq count > ","(send\n  (send\n    (lvar :items) :map\n    (block-pass\n      (sym :first_line))) :+\n  (send\n    (lvar :items) :map\n    (block-pass\n      (sym :last_line)))) uniq count ","(send\n  (send\n    (lvar :items) :map\n    (block-pass\n      (sym :first_line))) :+\n  (send\n    (lvar :items) :map\n    (block-pass\n      (sym :last_line)))) uniq ","items map + ","items map ","items << << ","node loc begin ","(send\n  (send\n    (lvar :items) :map\n    (block-pass\n      (sym :first_line))) :+\n  (send\n    (lvar :items) :map\n    (block-pass\n      (sym :last_line)))) uniq size > ","(send\n  (send\n    (lvar :items) :map\n    (block-pass\n      (sym :first_line))) :+\n  (send\n    (lvar :items) :map\n    (block-pass\n      (sym :last_line)))) uniq size "," allowed_multiline_argument? ! "," allowed_multiline_argument? ","elements map  each_cons all? "," elements map  each_cons all? ","elements map  each_cons "," elements map  each_cons ","elements map  << "," elements map  << ","elements map  each_cons any? "," elements map  each_cons any? ","elements map  one? "," elements map  one? ","node children  map ","node children  empty? ","elements map  empty? "," elements map  empty? "," node children  map "," node children  ","(send\n  (send\n    (lvar :elements map ) :map\n    (block-pass\n      (sym :first_line))) :+\n  (send\n    (lvar :elements map ) :map\n    (block-pass\n      (sym :last_line)))) uniq count > ","(send\n  (send\n    (lvar : elements map ) :map\n    (block-pass\n      (sym :first_line))) :+\n  (send\n    (lvar : elements map ) :map\n    (block-pass\n      (sym :last_line)))) uniq count > ","(send\n  (send\n    (lvar :elements map ) :map\n    (block-pass\n      (sym :first_line))) :+\n  (send\n    (lvar :elements map ) :map\n    (block-pass\n      (sym :last_line)))) uniq count ","(send\n  (send\n    (lvar : elements map ) :map\n    (block-pass\n      (sym :first_line))) :+\n  (send\n    (lvar : elements map ) :map\n    (block-pass\n      (sym :last_line)))) uniq count ","(send\n  (send\n    (lvar :elements map ) :map\n    (block-pass\n      (sym :first_line))) :+\n  (send\n    (lvar :elements map ) :map\n    (block-pass\n      (sym :last_line)))) uniq ","(send\n  (send\n    (lvar : elements map ) :map\n    (block-pass\n      (sym :first_line))) :+\n  (send\n    (lvar : elements map ) :map\n    (block-pass\n      (sym :last_line)))) uniq ","elements map  map + "," elements map  map + ","elements map  map "," elements map  map ","elements map  << << "," elements map  << << ","(send\n  (send\n    (lvar :elements map ) :map\n    (block-pass\n      (sym :first_line))) :+\n  (send\n    (lvar :elements map ) :map\n    (block-pass\n      (sym :last_line)))) uniq size > ","(send\n  (send\n    (lvar : elements map ) :map\n    (block-pass\n      (sym :first_line))) :+\n  (send\n    (lvar : elements map ) :map\n    (block-pass\n      (sym :last_line)))) uniq size > ","(send\n  (send\n    (lvar :elements map ) :map\n    (block-pass\n      (sym :first_line))) :+\n  (send\n    (lvar :elements map ) :map\n    (block-pass\n      (sym :last_line)))) uniq size ","(send\n  (send\n    (lvar : elements map ) :map\n    (block-pass\n      (sym :first_line))) :+\n  (send\n    (lvar : elements map ) :map\n    (block-pass\n      (sym :last_line)))) uniq size "]}," RuboCop Cop TrailingComma brackets?":{"type":"method","name":"brackets?","children":[],"call":["node loc end ","node loc "]}," RuboCop Cop TrailingComma heredoc?":{"type":"method","name":"heredoc?","children":[],"call":["source_after_last_item =~ ","source_after_last_item !~ "," heredoc? ","node children last ","node children ","node hash_type? ","node pair_type? "," heredoc_send? ","node send_type? ","node loc respond_to? ","node loc ","node is_a? "]}," RuboCop Cop TrailingComma inside_comment?":{"type":"method","name":"inside_comment?","children":[],"call":["comment_offset < ","comment_offset >= ","comment loc expression begin_pos - ","range begin_pos ","comment loc expression begin_pos ","comment loc expression ","comment loc "," processed_source comments any? "," processed_source comments "," processed_source ","comment loc expression begin_pos < ","range begin_pos + "," processed_source comment_at_line ","range line ","comment source_range begin_pos < ","comment source_range begin_pos ","comment source_range ","comment loc expression begin_pos -  < "," processed_source comment_at_line _offset < ","comment loc expression begin_pos -  >= "," processed_source comment_at_line _offset >= "," processed_source comment_at_line  loc expression begin_pos - "," processed_source comment_at_line  loc expression begin_pos "," processed_source comment_at_line  loc expression "," processed_source comment_at_line  loc "," processed_source  processed_source comment_at_line s any? "," processed_source  processed_source comment_at_line s "," processed_source comment_at_line  loc expression begin_pos < "," processed_source  processed_source comment_at_line _at_line "," processed_source comment_at_line  source_range begin_pos < "," processed_source comment_at_line  source_range begin_pos "," processed_source comment_at_line  source_range "]}," RuboCop Cop TrailingComma should_have_comma?":{"type":"method","name":"should_have_comma?","children":[],"call":[" multiline? ","(sym :comma) include? "," no_elements_on_same_line? "," method_name_and_arguments_on_same_line? ! "," method_name_and_arguments_on_same_line? "]}," RuboCop Cop TrailingComma check":{"type":"method","name":"check","children":[],"call":[" put_comma "," should_have_comma? "," style "," avoid_comma ","after_last_item begin_pos + ","after_last_item begin_pos "," inside_comment? ! "," inside_comment? ","after_last_item source =~ ","after_last_item source "," heredoc? ","Parser Source Range  new ","node source_range source_buffer ","node source_range "," check_comma "," range_between ","items last ","after_last_item source index "," any_heredoc? "," comma_offset ","Parser Source Range  new  begin_pos + "," range_between  begin_pos + ","Parser Source Range  new  begin_pos "," range_between  begin_pos ","Parser Source Range  new  source =~ "," range_between  source =~ ","Parser Source Range  new  source "," range_between  source ","Parser Source Range  new  source index "," range_between  source index "," after_last_item source =~  ","  comma_offset  "]}," RuboCop Cop TrailingComma parameter_name":{"type":"method","name":"parameter_name","children":[],"call":[]}," RuboCop Cop PrecedingFollowingAlignment aligned_identical?":{"type":"method","name":"aligned_identical?","children":[],"call":["range source == ","line [] ","range size ","range column ","range source "]}," RuboCop Cop PrecedingFollowingAlignment aligned_assignment?":{"type":"method","name":"aligned_assignment?","children":[],"call":["line [] == ","line [] ","range last_column - ","range last_column ","range source [] == ","range source [] ","range source "," aligned_with_append_operator? "]}," RuboCop Cop PrecedingFollowingAlignment aligned_char?":{"type":"method","name":"aligned_char?","children":[],"call":["line [] == ","range source [] ","range source ","line [] ","range column "]}," RuboCop Cop PrecedingFollowingAlignment aligned_words?":{"type":"method","name":"aligned_words?","children":[],"call":["line [] =~ ","line [] ","range column - ","range column ","(str \"\\\\s\\\\S\") match? ","token == ","token length ","range source ","left_edge - ","range source  == ","range source  length ","range column  - "]}," RuboCop Cop PrecedingFollowingAlignment aligned_operator?":{"type":"method","name":"aligned_operator?","children":[],"call":[" aligned_assignment? "," aligned_identical? "]}," RuboCop Cop PrecedingFollowingAlignment aligned_token?":{"type":"method","name":"aligned_token?","children":[],"call":[" aligned_assignment? "," aligned_char? "," aligned_words? "," aligned_dot? "]}," RuboCop Cop PrecedingFollowingAlignment comment_lines":{"type":"method","name":"comment_lines","children":[],"call":["(send\n  (send\n    (send\n      (send nil :processed_source) :comments) :map\n    (block-pass\n      (sym :loc))) :select) map "," begins_its_line? ","r expression "," processed_source comments map select "," processed_source comments map "," processed_source comments "," processed_source "]}," RuboCop Cop PrecedingFollowingAlignment aligned_with_line?":{"type":"method","name":"aligned_with_line?","children":[],"call":["indent != ","line =~ "," processed_source lines [] "," processed_source lines "," processed_source "," comment_lines include? ","lineno + "," comment_lines ","line_nos each "," aligned_comment_lines include? "," aligned_comment_lines "," processed_source lines []  =~ "," processed_source  processed_source lines [] s [] "," processed_source  processed_source lines [] s "," comment_ processed_source lines [] s include? "," processed_source lines [] no + "," comment_ processed_source lines [] s "," processed_source lines [] _nos each "," aligned_comment_ processed_source lines [] s include? "," aligned_comment_ processed_source lines [] s "]}," RuboCop Cop PrecedingFollowingAlignment aligned_with_adjacent_line?":{"type":"method","name":"aligned_with_adjacent_line?","children":[],"call":[" aligned_with_line? "," processed_source lines [] =~ "," processed_source lines [] ","range line - ","range line "," processed_source lines "," processed_source ","range line upto "," processed_source lines size - "," processed_source lines size ","(send\n  (send\n    (lvar :range) :line) :-\n  (int 2)) downto "," aligned_with_any_line_range? "]}," RuboCop Cop PrecedingFollowingAlignment aligned_with_operator?":{"type":"method","name":"aligned_with_operator?","children":[],"call":[" aligned_with_adjacent_line? "," method "]}," RuboCop Cop PrecedingFollowingAlignment aligned_with_something?":{"type":"method","name":"aligned_with_something?","children":[],"call":[" aligned_with_adjacent_line? "," method "]}," RuboCop Cop PrecedingFollowingAlignment allow_for_alignment?":{"type":"method","name":"allow_for_alignment?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Parentheses autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove ","node loc end ","node loc ","node loc begin "," lambda ","corrector insert_after "," next_char_is_question_mark? "," ternary_condition? "]}," RuboCop Cop Parentheses parens_required?":{"type":"method","name":"parens_required?","children":[],"call":["source_buffer source [] =~ ","source_buffer source [] ","node source_range end_pos ","node source_range ","source_buffer source ","node source_range begin_pos - ","node source_range begin_pos ","node source_range source_buffer ","source [] =~ ","source [] ","range end_pos ","range begin_pos - ","range begin_pos ","range source_buffer source ","range source_buffer ","(str \"[a-z]\") match? ","node source_range source_buffer  source [] =~ ","range source_buffer source _buffer range source_buffer source  [] =~ ","node source_range source_buffer  source [] ","range source_buffer source _buffer range source_buffer source  [] ","node range source_buffer source _range end_pos ","node source_node source_range  end_pos ","node range source_buffer source _range ","node source_node source_range  ","node source_range source_buffer  source ","range source_buffer source _buffer range source_buffer source  ","node range source_buffer source _range begin_pos - ","node source_node source_range  begin_pos - ","node range source_buffer source _range begin_pos ","node source_node source_range  begin_pos ","node source_range node source_range source_buffer  ","node range source_buffer source _range range source_buffer source _buffer ","node source_node source_range  source_buffer ","range source_buffer source  [] =~ ","range source_buffer source  [] ","node source_range  end_pos ","node source_range  begin_pos - ","node source_range  begin_pos ","range node source_range source_buffer  source ","range range source_buffer source _buffer range source_buffer source  ","node source_range  source_buffer source ","range node source_range source_buffer  ","range range source_buffer source _buffer ","node source_range  source_buffer "]}," RuboCop Cop MultilineExpressionIndentation inside_arg_list_parentheses?":{"type":"method","name":"inside_arg_list_parentheses?","children":[],"call":["n end_pos < ","a end end_pos ","a end ","n end_pos ","n begin_pos > ","a begin begin_pos ","a begin ","n begin_pos ","node source_range ","a begin is? ","ancestor type == ","ancestor type ","ancestor loc ","ancestor send_type? ","node source_range end_pos < ","ancestor loc end end_pos ","ancestor loc end ","node source_range end_pos ","node source_range begin_pos > ","ancestor loc begin begin_pos ","ancestor loc begin ","node source_range begin_pos ","ancestor parenthesized? ","node source_range  enode source_range d_pos < ","a enode source_range d enode source_range d_pos ","ancestor loc  end end_pos ","a enode source_range d ","ancestor loc  end ","node source_range  enode source_range d_pos ","node source_range  beginode source_range _pos > ","a beginode source_range  beginode source_range _pos ","ancestor loc  begin begin_pos ","a beginode source_range  ","ancestor loc  begin ","node source_range  beginode source_range _pos ","node source_range ode source_ranode source_range ge ","node source_rancestor loc nge ","a beginode source_range  is? ","ancestor loc  begin is? ","anode source_range cestor type == ","ancestor loc ncestor type == ","anode source_range cestor type ","ancestor loc ncestor type ","anode source_range cestor loc ","ancestor loc ncestor loc ","anode source_range cestor senode source_range d_type? ","ancestor loc ncestor send_type? ","node source_range ode source_ranode source_range ge enode source_range d_pos < ","node source_rancestor loc nge end_pos < ","anode source_range cestor loc enode source_range d enode source_range d_pos ","ancestor loc ncestor loc end end_pos ","anode source_range cestor loc enode source_range d ","ancestor loc ncestor loc end ","node source_range ode source_ranode source_range ge enode source_range d_pos ","node source_rancestor loc nge end_pos ","node source_range ode source_ranode source_range ge beginode source_range _pos > ","node source_rancestor loc nge begin_pos > ","anode source_range cestor loc beginode source_range  beginode source_range _pos ","ancestor loc ncestor loc begin begin_pos ","anode source_range cestor loc beginode source_range  ","ancestor loc ncestor loc begin ","node source_range ode source_ranode source_range ge beginode source_range _pos ","node source_rancestor loc nge begin_pos ","anode source_range cestor parenode source_range thesized? ","ancestor loc ncestor pancestor loc renthesized? "]}," RuboCop Cop MultilineExpressionIndentation grouped_expression?":{"type":"method","name":"grouped_expression?","children":[],"call":["node loc begin ","node loc ","node loc respond_to? ","node type == ","node type ","node begin_type? "]}," RuboCop Cop MultilineExpressionIndentation not_for_this_cop?":{"type":"method","name":"not_for_this_cop?","children":[],"call":[" inside_arg_list_parentheses? "," grouped_expression? ","node each_ancestor any? ","node each_ancestor ","node ancestors any? ","node ancestors "]}," RuboCop Cop MultilineExpressionIndentation assignment_rhs":{"type":"method","name":"assignment_rhs","children":[],"call":["node type ","node last_argument "]}," RuboCop Cop MultilineExpressionIndentation part_of_block_body?":{"type":"method","name":"part_of_block_body?","children":[],"call":[" within_node? ","block_node body "]}," RuboCop Cop MultilineExpressionIndentation assignment_call?":{"type":"method","name":"assignment_call?","children":[],"call":["method_name to_s =~ ","method_name to_s ","method_name == "]}," RuboCop Cop MultilineExpressionIndentation part_of_assignment_rhs":{"type":"method","name":"part_of_assignment_rhs","children":[],"call":[" within_node? "," assignment_rhs ","candidate ! ","args last "," assignment_call? "," part_of_block_body? ","a type ","node each_ancestor find ","node each_ancestor "," valid_rhs_candidate? "," valid_method_rhs_candidate? "," block_given? "," valid_rhs? "," disqualified_rhs? "]}," RuboCop Cop MultilineExpressionIndentation argument_in_method_call":{"type":"method","name":"argument_in_method_call","children":[],"call":[" within_node? ","args any? "," assignment_call? ","node each_ancestor find ","node each_ancestor ","a block_type? ","a arguments any? ","a arguments ","a setter_method? "," parentheses? ","node parent ","kind == "]}," RuboCop Cop MultilineExpressionIndentation kw_node_with_special_indentation":{"type":"method","name":"kw_node_with_special_indentation","children":[],"call":[" within_node? ","a type ","a loc respond_to? ","a loc ","node each_ancestor find ","node each_ancestor "," block_given? "," indented_keyword_expression ","ancestor ternary? ","ancestor if_type? "]}," RuboCop Cop MultilineExpressionIndentation operation_description":{"type":"method","name":"operation_description","children":[],"call":["an expression + "," part_of_assignment_rhs ","kw =~ ","kw == ","ancestor loc keyword source ","ancestor loc keyword ","ancestor loc "," kw_node_with_special_indentation "," keyword_message_tail ","ancestor loc keyword source  =~ ","ancestor loc keyword source  == "," kw_node_with_special_indentation  loc keyword source "," kw_node_with_special_indentation  loc keyword "," kw_node_with_special_indentation  loc "," ancestor loc keyword source _node_with_special_indentation "]}," RuboCop Cop MultilineExpressionIndentation indentation":{"type":"method","name":"indentation","children":[],"call":["node source_range source_line =~ ","node source_range source_line ","node source_range "]}," RuboCop Cop MultilineExpressionIndentation incorrect_style_detected":{"type":"method","name":"incorrect_style_detected","children":[],"call":[" opposite_style_detected "," unrecognized_style_detected "," offending_range "," alternative_style "," add_offense "," message "," supported_styles size > "," supported_styles size "," supported_styles "," autocorrect "]}," RuboCop Cop MultilineExpressionIndentation check":{"type":"method","name":"check","children":[],"call":[" correct_style_detected "," incorrect_style_detected "]}," RuboCop Cop MultilineExpressionIndentation correct_indentation":{"type":"method","name":"correct_indentation","children":[],"call":[" configured_indentation_width "," configured_indentation_width + ","@config for_cop [] ","@config for_cop "," kw_node_with_special_indentation "," postfix_conditional? ! "," postfix_conditional? ","  kw_node_with_special_indentation _with_special_indentation "]}," RuboCop Cop MultilineExpressionIndentation right_hand_side":{"type":"method","name":"right_hand_side","children":[],"call":["dot join ","send_node loc begin ","send_node loc ","dot line == ","send_node loc begin line ","dot line ","selector line ","send_node loc selector ","send_node loc dot ","args first source_range ","args first ","args any? "," operator? "," regular_method_right_hand_side ","send_node first_argument source_range ","send_node first_argument ","send_node arguments? ","send_node operator_method? ","send_node loc dot  join ","send_node loc dot  line == ","send_node loc dot  line ","send_node loc selector  line ","send_node loc send_node loc selector  ","send_node loc send_node loc dot  "]}," RuboCop Cop MultilineExpressionIndentation left_hand_side":{"type":"method","name":"left_hand_side","children":[],"call":["lhs parent ","lhs parent send_type? ","lhs parent loc dot ","lhs parent loc ","lhs parent assignment_method? ! ","lhs parent assignment_method? ","lhs parent  parent ","lhs parent  parent send_type? ","lhs parent  parent loc dot ","lhs parent  parent loc ","lhs parent  parent assignment_method? ! ","lhs parent  parent assignment_method? "]}," RuboCop Cop MultilineExpressionIndentation on_send":{"type":"method","name":"on_send","children":[],"call":[" check "," offending_range "," style "," right_hand_side "," left_hand_side ","method_name == "," relevant_node? ","node receiver ","node method? ","node receiver ! "," offending_ offending_range  "]}," RuboCop Cop HashNode any_pairs_on_the_same_line?":{"type":"method","name":"any_pairs_on_the_same_line?","children":[],"call":["Util  begins_its_line? ! ","Util  begins_its_line? ","pair loc expression ","pair loc ","node children butfirst any? ","node children butfirst ","node children "]}," RuboCop Cop EndKeywordAlignment check_end_kw_alignment":{"type":"method","name":"check_end_kw_alignment","children":[],"call":[" style_detected ","matching keys "," add_offense "," format ","align_with column ","align_with line ","align_with source ","end_loc column ","end_loc line ","align_ranges [] "," style "," correct_style_detected ","matching key? ","range column == ","range column ","range line == ","range line ","align_ranges select ","node loc end ","node loc "," ignored_node? "," effective_column == "," effective_column "," add_offense_for_misalignment "," matching_ranges "," accept_end_kw_alignment? "," matching_ranges  keys ","align_ranges []  column ","align_ranges []  line ","align_ranges []  source ","node loc end  column ","node loc end  line "," matching_ranges  key? ","  matching_ranges _ranges "]}," RuboCop Cop EndKeywordAlignment check_end_kw_in_node":{"type":"method","name":"check_end_kw_in_node","children":[],"call":[" check_end_kw_alignment ","node loc keyword ","node loc "," style "]}," RuboCop Cop ConfigurableEnforcedStyle supported_styles":{"type":"method","name":"supported_styles","children":[],"call":[" cop_config [] map "," cop_config [] "," cop_config ","Util  to_supported_styles "," style_parameter_name ","Util  to_Util  to_supported_styles  "]}," RuboCop Cop CheckAssignment extract_rhs":{"type":"method","name":"extract_rhs","children":[],"call":["node children last ","node children ","node send_type? ","Util ASGN_NODES  include? ","node type ","node op_asgn_type? ","node casgn_type? ","node last_argument ","node assignment? ","node csend_type? ","node call_type? "]}," RuboCop Cop ArraySyntax bracketed_array_of?":{"type":"method","name":"bracketed_array_of?","children":[],"call":["e type == ","e type ","array_elems all? ","array_elems size > ","array_elems size ","node children "," square_brackets? ","value type == ","value type ","node values all? ","node values ","node values size > ","node values size ","node square_brackets? ","node values empty? ! ","node values empty? ","node children  all? ","node children  size > ","node children  size "]}," RuboCop Cop ArrayHashIndentation incorrect_style_detected":{"type":"method","name":"incorrect_style_detected","children":[],"call":[" ambiguous_style_detected "," detected_styles ","column - - ","column - "," configured_indentation_width "," add_offense "," message "," base_description "," detected_ detected_styles  "]}," RuboCop Cop ArrayHashIndentation detected_styles":{"type":"method","name":"detected_styles","children":[],"call":["styles << "," brace_alignment_style ","column == ","left_brace column ","left_parenthesis column + ","left_parenthesis column ","left_brace source_line =~ ","left_brace source_line "," detected_styles_for_column ","actual_column - - ","actual_column - "," configured_indentation_width "]}," RuboCop Cop ArrayHashIndentation base_column":{"type":"method","name":"base_column","children":[],"call":["left_brace source_line =~ ","left_brace source_line ","left_parenthesis column + ","left_parenthesis column "," style == "," style ","left_brace column "," brace_alignment_style "]}," RuboCop Cop ArrayHashIndentation check_first":{"type":"method","name":"check_first","children":[],"call":[" incorrect_style_detected "," correct_style_detected "," ambiguous_style_detected ","styles size > ","styles size "," detected_styles ","actual_column - - ","actual_column - "," configured_indentation_width ","@column_delta == ","expected_column - "," base_column + + "," base_column + "," base_column ","first source_range column ","first source_range ","@column_delta zero? "," check_expected_style "," detected_styles  size > "," detected_styles  size "," detected_ detected_styles  ","first source_range column  - - ","first source_range column  - ","expected_column -  == "," base_column + +  - "," actual_column - -  + + "," actual_column - -  + "," actual_column - -  ","expected_column -  zero? "]}," RuboCop Cop ArrayHashIndentation each_argument_node":{"type":"method","name":"each_argument_node","children":[],"call":[" ignore_node ","left_brace line == ","left_parenthesis line ","left_brace line ","type_node loc begin ","type_node loc "," on_node ","args each ","node loc begin ","node loc ","node arguments each ","node arguments ","type_node loc begin  line == ","node loc begin  line ","type_node loc begin  line "]}," RuboCop Cop Metrics LineLength line_in_whitelisted_heredoc?":{"type":"method","name":"line_in_whitelisted_heredoc?","children":[],"call":[" allowed_heredoc include? "," allowed_heredoc "," allowed_heredoc == ","range cover? ","heredocs any? "]}," RuboCop Cop Metrics LineLength extract_heredocs":{"type":"method","name":"extract_heredocs","children":[],"call":["heredocs << ","body last_line ","body first_line ","node location heredoc_end source strip ","node location heredoc_end source ","node location heredoc_end ","node location ","node location heredoc_body ","node location is_a? ","ast each_node with_object ","ast each_node ","ast each_node select map ","ast each_node select ","node location heredoc_body  last_line ","node location heredoc_body  first_line ","node location heredoc_node location heredoc_body  "]}," RuboCop Cop Metrics LineLength allowed_heredoc":{"type":"method","name":"allowed_heredoc","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Metrics LineLength allow_heredoc?":{"type":"method","name":"allow_heredoc?","children":[],"call":[" allowed_heredoc "]}," RuboCop Cop Lint UselessAccessModifier check_scope":{"type":"method","name":"check_scope","children":[],"call":[" add_offense "," format "," check_scope ","child kwbegin_type? "," method_definition? ","new_vis == "," access_modifier ","node children each ","node children ","child send_type? ","node child_nodes each ","node child_nodes "," check_child_nodes "," autocorrect "," access_modifier  == "]}," RuboCop Cop Lint UselessAccessModifier check_node":{"type":"method","name":"check_node","children":[],"call":[" add_offense "," format "," access_modifier "," check_scope ","node begin_type? ","node nil? ","node method_name ","node access_modifier? ","node send_type? ","node bare_access_modifier? "," access_modifier? "," autocorrect "]}," RuboCop Cop Lint UselessAccessModifier on_module":{"type":"method","name":"on_module","children":[],"call":[" check_node ","node children [] ","node children "]}," RuboCop Cop Lint UnneededDisable all_cop_names":{"type":"method","name":"all_cop_names","children":[],"call":["Cop  all map ","Cop  all ","Cop  registry names ","Cop  registry "]}," RuboCop Cop Lint UnneededDisable collect_variable_like_names":{"type":"method","name":"collect_variable_like_names","children":[],"call":["scope << "," all_cop_names each "," all_cop_names "]}," RuboCop Cop Lint UnneededDisable describe":{"type":"method","name":"describe","children":[],"call":[" find_similar_name "," all_cop_names include? "," all_cop_names ","cop == "," find_ find_similar_name _name "]}," RuboCop Cop Lint UnneededDisable trailing_range?":{"type":"method","name":"trailing_range?","children":[],"call":["intervening =~ ","(send\n  (send\n    (block\n      (send\n        (lvar :ranges) :drop_while)\n      (args\n        (arg :r))\n      (send\n        (send\n          (lvar :r) :equal?\n          (lvar :range)) :!)) :each_cons\n    (int 2)) :map) all? ","r1 end join source ","r1 end join ","r2 begin ","r1 end ","(send\n  (lvar :ranges) :drop_while) each_cons map ","(send\n  (lvar :ranges) :drop_while) each_cons ","r equal? ! ","r equal? ","ranges drop_while "]}," RuboCop Cop Lint UnneededDisable matching_range":{"type":"method","name":"matching_range","children":[],"call":["Parser Source Range  new ","offset + ","needle size ","haystack source_buffer ","haystack begin_pos ","haystack source =~ ","Regexp  new ","Regexp  escape ","haystack source "]}," RuboCop Cop Lint UnneededDisable cop_range":{"type":"method","name":"cop_range","children":[],"call":[" fail ","comment text "," matching_range ","cop split last ","cop split ","comment loc expression ","comment loc "," raise ","Badge  parse cop_name ","Badge  parse "]}," RuboCop Cop Lint UnneededDisable directive_count":{"type":"method","name":"directive_count","children":[],"call":["cops_string split size ","cops_string split ","match captures ","comment text match ","comment text ","comment text match  captures ","comment text comment text match  "]}," RuboCop Cop Lint UnneededDisable autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove "," range_with_surrounding_space "," range_with_surrounding_comma "," trailing_range? "," ends_its_line? ","ranges last ","range source start_with? ","range source "," lambda ","original_begin == ","range begin_pos ","original_begin zero? "," directive_range_in_list "," comment_range_with_surrounding_space ","  range_with_surrounding_space _with_surrounding_space ","  range_with_surrounding_comma _with_surrounding_space ","  directive_range_in_list _with_surrounding_space ","  comment_range_with_surrounding_space _with_surrounding_space ","  range_with_surrounding_space _with_surrounding_comma ","  range_with_surrounding_comma _with_surrounding_comma ","  directive_range_in_list _with_surrounding_comma ","  comment_range_with_surrounding_space _with_surrounding_comma "," trailing_ range_with_surrounding_space ? "," trailing_ range_with_surrounding_comma ? "," trailing_ directive_range_in_list ? "," trailing_ comment_range_with_surrounding_space ? "," range_with_surrounding_space s last "," range_with_surrounding_comma s last "," directive_range_in_list s last "," comment_range_with_surrounding_space s last "," range_with_surrounding_space  source start_with? "," range_with_surrounding_comma  source start_with? "," directive_range_in_list  source start_with? "," comment_range_with_surrounding_space  source start_with? "," range_with_surrounding_space  source "," range_with_surrounding_comma  source "," directive_range_in_list  source "," comment_range_with_surrounding_space  source ","range begin_pos  == "," range_with_surrounding_space  begin_pos "," range_with_surrounding_comma  begin_pos "," directive_range_in_list  begin_pos "," comment_range_with_surrounding_space  begin_pos ","range begin_pos  zero? "," directive_ range_with_surrounding_space _in_list "," directive_ range_with_surrounding_comma _in_list "," directive_ directive_range_in_list _in_list "," directive_ comment_range_with_surrounding_space _in_list "," comment_ range_with_surrounding_space _with_surrounding_space "," comment_ range_with_surrounding_comma _with_surrounding_space "," comment_ directive_range_in_list _with_surrounding_space "," comment_ comment_range_with_surrounding_space _with_surrounding_space "]}," RuboCop Cop Lint RandOne on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format ","node source "," rand_one? ","node method? "]}," RuboCop Cop Lint NextWithoutAccumulator on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense ","n children empty? ","n children ","body each_node find ","body each_node "," on_body_of_reduce "," parent_block_node == "," parent_block_node "," on_block_body_of_reduce "]}," RuboCop Cop Lint NestedMethodDefinition find_nested_defs":{"type":"method","name":"find_nested_defs","children":[],"call":[" find_nested_defs "," eval_call? ! "," eval_call? ","child defs_type? ","child def_type? ","node each_child_node ","(or\n  (send nil :eval_call?\n    (lvar :child))\n  (send nil :class_or_module_new_call?\n    (lvar :child))) ! "," class_or_module_new_call? ","subject lvar_type? "," ignored_child? ! "," ignored_child? "," scoping_method_call? ! "," scoping_method_call? "]}," RuboCop Cop Lint IneffectiveAccessModifier check_scope":{"type":"method","name":"check_scope","children":[],"call":[" check_scope ","child kwbegin_type? ","@useless delete ","sym children [] ","sym children ","methods select each ","methods select "," private_class_method ","@useless []= ","cur_vis != ","child defs_type? "," access_modifier ","node children each ","node children "," check_child_scope ","node children reduce ","node each_child_node reduce ","node each_child_node "," private_class_method  select each "," private_class_method  select "," check_scope  != "]}," RuboCop Cop Lint IneffectiveAccessModifier format_message":{"type":"method","name":"format_message","children":[],"call":[" format ","modifier location expression line ","modifier location expression ","modifier location ","visibility == ","modifier method_name ","modifier source_range line ","modifier source_range ","modifier method_name  == "]}," RuboCop Cop Lint IneffectiveAccessModifier check_node":{"type":"method","name":"check_node","children":[],"call":[" add_offense "," format_message ","@useless each "," check_scope "," clear ","node begin_type? "," ineffective_modifier "," private_class_method_names ","defs_node loc keyword ","defs_node loc "]}," RuboCop Cop Lint IneffectiveAccessModifier clear":{"type":"method","name":"clear","children":[],"call":[]}," RuboCop Cop Lint IneffectiveAccessModifier on_module":{"type":"method","name":"on_module","children":[],"call":[" check_node ","node children [] ","node children "]}," RuboCop Cop Lint IneffectiveAccessModifier on_class":{"type":"method","name":"on_class","children":[],"call":[" check_node ","node children [] ","node children ","node body "]}," RuboCop Cop Lint ImplicitStringConcatenation str_content":{"type":"method","name":"str_content","children":[],"call":["(send\n  (send\n    (lvar :node) :children) :map) join "," str_content ","node children map ","node children ","node children [] ","node str_type? "]}," RuboCop Cop Lint ImplicitStringConcatenation display_str":{"type":"method","name":"display_str","children":[],"call":["node source "," str_content inspect "," str_content ","node source =~ ","(str \"\\\\n\") match? ","node source include? "]}," RuboCop Cop Lint ImplicitStringConcatenation string_literal?":{"type":"method","name":"string_literal?","children":[],"call":[" string_literal? ","node children all? ","node children ","node dstr_type? ","node str_type? "]}," RuboCop Cop Lint ImplicitStringConcatenation ending_delimiter":{"type":"method","name":"ending_delimiter","children":[],"call":["str source [] == ","str source [] ","str source "]}," RuboCop Cop Lint ImplicitStringConcatenation on_dstr":{"type":"method","name":"on_dstr","children":[],"call":[" add_offense ","message << ","node parent send_type? ","node parent ","node parent array_type? "," format "," display_str ","child1 source_range join ","child2 source_range ","child1 source_range ","child1 source [] == "," ending_delimiter ","child1 source [] ","child1 source ","child1 loc last_line == ","child2 loc line ","child2 loc ","child1 loc last_line ","child1 loc "," string_literal? ","node children each_cons ","node children "," each_bad_cons ","child_node1 source_range join ","child_node2 source_range ","child_node1 source_range "," format  << ","child1 source_child1 source_range join  join ","child1 source_child_node1 source_range join  join ","child2 source_child1 source_range join  ","child2 source_child_node1 source_range join  ","child1 source_child1 source_range join  ","child1 source_child_node1 source_range join  ","child_node1 source_child1 source_range join  join ","child_node1 source_child_node1 source_range join  join ","child_node2 source_child1 source_range join  ","child_node2 source_child_node1 source_range join  ","child_node1 source_child1 source_range join  ","child_node1 source_child_node1 source_range join  "]}," RuboCop Cop Lint FloatOutOfRange on_float":{"type":"method","name":"on_float","children":[],"call":[" add_offense ","node source =~ ","node source ","value zero? ","value infinite? ","(str \"[1-9]\") match? "]}," RuboCop Cop Lint EndAlignment start_line_range":{"type":"method","name":"start_line_range","children":[],"call":["Parser Source Range  new ","range begin_pos + ","source =~ ","range begin_pos ","buffer line_range ","expr line ","buffer source_line ","expr source_buffer ","node source_range "," range_between ","buffer line_range  begin_pos + ","buffer source_line  =~ ","buffer line_range  begin_pos ","buffer line_buffer line_range  ","expr source_buffer  line_range ","node source_range  line ","buffer buffer source_line _line ","expr source_buffer  source_line ","expr buffer source_line _buffer ","expr source_expr source_buffer  ","node source_range  source_buffer ","node source_buffer line_range  ","node buffer source_line _range "," buffer line_range _between "]}," RuboCop Cop Lint EndAlignment check_other_alignment":{"type":"method","name":"check_other_alignment","children":[],"call":[" check_end_kw_alignment "," start_line_range ","node loc keyword ","node loc "]}," RuboCop Cop Lint EndAlignment check_asgn_alignment":{"type":"method","name":"check_asgn_alignment","children":[],"call":[" ignore_node "," check_end_kw_alignment ","align_with []= ","inner_node loc keyword ","inner_node loc ","Parser Source Range  new ","inner_node loc keyword end_pos ","expr begin_pos ","expr source_buffer "," line_break_before_keyword? ! "," line_break_before_keyword? "," start_line_range ","outer_node source_range "," range_between "," asgn_variable_align_with ","outer_node source_range  begin_pos ","outer_node source_range  source_buffer "]}," RuboCop Cop Lint DuplicateMethods source_location":{"type":"method","name":"source_location","children":[],"call":["range line ","range source_buffer name ","range source_buffer ","node location expression ","node location "," smart_path ","node source_range ","node location expression  line ","node source_range  line ","node location expression  source_buffer name ","node source_range  source_buffer name ","node location expression  source_buffer ","node source_range  source_buffer "," smart_ smart_path  ","node source_node location expression  ","node source_node source_range  "]}," RuboCop Cop Lint DuplicateMethods possible_dsl?":{"type":"method","name":"possible_dsl?","children":[],"call":["ancestor class_constructor? ! ","ancestor class_constructor? ","ancestor method_name != ","ancestor method_name ","node each_ancestor any? ","node each_ancestor "]}," RuboCop Cop Lint DuplicateMethods qualified_name":{"type":"method","name":"qualified_name","children":[],"call":["namespace const_name ","enclosing != "]}," RuboCop Cop Lint DuplicateMethods lookup_constant":{"type":"method","name":"lookup_constant","children":[],"call":["namespace nil? "," qualified_name ","ancestor parent_module_name ","mod_name == "," loop ","ancestor defined_module ","node each_ancestor "]}," RuboCop Cop Lint DuplicateMethods found_method":{"type":"method","name":"found_method","children":[],"call":["@definitions []= "," source_location "," add_offense "," message_for_dup ","@definitions key? ","node loc keyword ","node loc ","node loc selector ","node send_type? ","node loc expression ","node loc keyword join ","node loc name ","node type ","DEF_TYPES  include? "," method_key "," location ","@scopes [] << ","@scopes [] ","@scopes [] include? ! ","@scopes [] include? ","node each_ancestor first ","node each_ancestor "," source_node loc keyword ation "," source_node loc selector ation "," source_node loc expression ation "," source_node loc keyword join ation ","  message_for_dup _for_dup ","@definitions  method_key ? ","node node loc keyword  keyword ","node node loc selector  keyword ","node node loc expression  keyword ","node node loc keyword join  keyword ","node loc  method_key word ","node node loc keyword  ","node node loc selector  ","node node loc expression  ","node node loc keyword join  ","node node loc keyword  selector ","node node loc selector  selector ","node node loc expression  selector ","node node loc keyword join  selector ","node node loc keyword  expression ","node node loc selector  expression ","node node loc expression  expression ","node node loc keyword join  expression ","node node loc keyword  keyword join ","node node loc selector  keyword join ","node node loc expression  keyword join ","node node loc keyword join  keyword join ","node loc  method_key word join ","node node loc keyword  name ","node node loc selector  name ","node node loc expression  name ","node node loc keyword join  name "," method_ method_key  "," node loc keyword ation "," node loc selector ation "," node loc expression ation "," node loc keyword join ation "]}," RuboCop Cop Lint DuplicateMethods found_instance_method":{"type":"method","name":"found_instance_method","children":[],"call":[" found_method ","Regexp  last_match ","scope =~ ","node parent_module_name ","scope << ","scope end_with? ","scope sub "," found_sclass_method ","node parent_module_name  =~ ","scope sub  =~ ","node parent_module_name  << ","scope sub  << ","node parent_module_name  end_with? ","scope sub  end_with? ","node parent_module_name  sub ","scope sub  sub "]}," RuboCop Cop Lint DuplicateMethods message_for_dup":{"type":"method","name":"message_for_dup","children":[],"call":[" format "," source_location ","@definitions [] "]}," RuboCop Cop Lint DuplicateMethods on_defs":{"type":"method","name":"on_defs","children":[],"call":[" found_method ","node parent_module_name ","receiver self_type? "," lookup_constant ","receiver const_type? "," possible_dsl? ","node ancestors any? ","node ancestors "," check_self_receiver "," check_const_receiver ","node method_name ","node receiver self_type? ","node receiver ","node receiver const_type? ","node each_ancestor any? ","node each_ancestor "]}," RuboCop Cop Lint DuplicateMethods on_def":{"type":"method","name":"on_def","children":[],"call":[" found_instance_method ","node parent_module_name "," possible_dsl? ","node ancestors any? ","node ancestors ","node method_name ","node each_ancestor any? ","node each_ancestor "]}," RuboCop Cop Lint DuplicateMethods initialize":{"type":"method","name":"initialize","children":[],"call":["hash []= ","Hash  new "]}," RuboCop Cop Lint Debugger autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove "," range_with_surrounding_space ","node source_range ","corrector replace ","body source ","block source_range ","block children [] ","block children ","node parent "," pry_rescue? "," lambda ","  range_with_surrounding_space _with_surrounding_space "," node source_range _with_surrounding_space ","node source_ range_with_surrounding_space  ","node source_node source_range  ","block children []  source ","block source_ range_with_surrounding_space  ","block source_node source_range  ","node parent  source_range ","node parent  children [] ","node parent  children "]}," RuboCop Cop Lint BlockAlignment start_for_block_node":{"type":"method","name":"start_for_block_node","children":[],"call":["result masgn_type? ","result op_asgn_type? "," block_end_align_target? ","parent masgn_type? ! ","parent masgn_type? ","parent loc line != ","block_node loc line ","block_node loc ","parent loc line ","parent loc ","parent loc ! ","parent ! ","result parent "," block_end_align_target "," block_end_align_target  masgn_type? "," block_end_align_target  op_asgn_type? ","result parent  masgn_type? ! ","result parent  masgn_type? ","result parent  loc line != ","result parent  loc line ","result parent  loc ","result parent  loc ! ","result parent  ! ","result result parent  "," block_end_align_target  parent "]}," RuboCop Cop Corrector remove_leading":{"type":"method","name":"remove_leading","children":[],"call":["@source_rewriter remove ","Parser Source Range  new ","range begin_pos + ","range begin_pos ","range source_buffer "," validate_range "," to_range "," remove ","range with "," to_range  begin_pos + "," to_range  begin_pos "," to_range  source_buffer "," validate_ to_range  "," to_ to_range  "," to_range  with "]}," RuboCop Cop Corrector remove_preceding":{"type":"method","name":"remove_preceding","children":[],"call":["@source_rewriter remove ","Parser Source Range  new ","range begin_pos ","range begin_pos - ","range source_buffer "," validate_range "," to_range "," remove ","range with "," to_range  begin_pos "," to_range  begin_pos - "," to_range  source_buffer "," validate_ to_range  "," to_ to_range  "," to_range  with "]}," RuboCop Cop Cop parse":{"type":"method","name":"parse","children":[],"call":["ProcessedSource  new "," target_ruby_version "]}," RuboCop Cop Cop target_ruby_version":{"type":"method","name":"target_ruby_version","children":[],"call":["@config [] [] ","@config [] ","@config for_all_cops [] ","@config for_all_cops ","@config target_ruby_version "]}," RuboCop ConfigLoader clear_options":{"type":"method","name":"clear_options","children":[],"call":["FileFinder  root_level= ","Set  new "]}," RuboCop Config check_target_ruby":{"type":"method","name":"check_target_ruby","children":[],"call":[" fail ","KNOWN_RUBIES  join "," loaded_path ","target inspect ","KNOWN_RUBIES  include? "," [] [] "," [] "," raise "," for_all_cops [] "," for_all_cops "," target_ruby_version inspect "," target_ruby_version "," target_ruby_source ","OBSOLETE_RUBIES  [] ","OBSOLETE_RUBIES  include? "," for_all_cops []  inspect ","  for_all_cops [] _ruby_version inspect ","  for_all_cops [] _ruby_version ","  for_all_cops [] _ruby_source "]}," RuboCop Config reject_obsolete_cops":{"type":"method","name":"reject_obsolete_cops","children":[],"call":[" fail "," loaded_path "," key? "," raise ","cop_name split last ","cop_name split ","OBSOLETE_COPS  each "]}," RuboCop Config check_obsolete_parameter":{"type":"method","name":"check_obsolete_parameter","children":[],"call":[" fail "," loaded_path "," [] key? "," [] "," key? "," raise "]}," RuboCop Config reject_obsolete_parameters":{"type":"method","name":"reject_obsolete_parameters","children":[],"call":[" check_obsolete_parameter "]}," RuboCop Config validate_enforced_styles":{"type":"method","name":"validate_enforced_styles","children":[],"call":[" fail ","valid join "," loaded_path ","valid include? ","ConfigLoader  default_configuration [] [] ","ConfigLoader  default_configuration [] ","ConfigLoader  default_configuration "," [] [] "," [] ","valid_cop_names each "," raise ","RuboCop Cop Util  to_supported_styles ","styles each ","key start_with? "," [] select "," smart_loaded_path "," validate_support_and_has_list ","ConfigLoader  default_configuration [] []  join ","ConfigLoader  default_configuration [] []  include? ","ConfigLoader  default_configuration [] [] _cop_names each ","RuboCop Cop Util  to_supported_ [] [] s "," [] [] s each "," ConfigLoader  default_configuration [] [] ate_support_and_has_list "]}," RuboCop Config warn_about_unrecognized_cops":{"type":"method","name":"warn_about_unrecognized_cops","children":[],"call":[" warn "," Rainbow yellow "," Rainbow "," loaded_path ","c match? ","Cop Cop  all any? ","Cop Cop  all "," fail ","name == ","invalid_cop_names each "," raise ","Cop Cop  registry contains_cop_matching? ","Cop Cop  registry "," smart_loaded_path "]}," RuboCop CLI maybe_print_corrected_source":{"type":"method","name":"maybe_print_corrected_source","children":[],"call":[" print ","@options [] "," puts ","= * "]}," RuboCop CLI apply_default_formatter":{"type":"method","name":"apply_default_formatter","children":[],"call":["@options [] << ","@options [] ","cfg [] ","@config_store for [] ","@config_store for ","Dir  pwd ","@config_store for for_all_cops ","@config_store for_dir for_all_cops ","@config_store for_dir ","@config_store for_pwd for_all_cops ","@config_store for_pwd ","@config_store for []  [] ","@config_store for for_all_cops  [] ","@config_store for_dir for_all_cops  [] ","@config_store for_pwd for_all_cops  [] "]}," RuboCop CachedData deserialize_offenses":{"type":"method","name":"deserialize_offenses","children":[],"call":["Cop Offense  new ","o [] to_sym ","o [] ","Parser Source Range  new ","o [] [] ","offenses map! ","source_buffer read ","Parser Source Buffer  new ","o [] force_encoding "," utf8_source_buffer ","source_buffer source= ","File  read ","Parser Source Buffer  new  read "," utf8_source_buffer  read "," utf8_Parser Source Buffer  new  "," utf8_ utf8_source_buffer  ","Parser Source Buffer  new  source= "," utf8_source_buffer  source= "]}," RuboCop CachedData serialize_offense":{"type":"method","name":"serialize_offense","children":[],"call":["offense status ","offense cop_name ","offense location end_pos ","offense location ","offense location begin_pos ","offense severity ","message chars select join ","message chars select ","message chars ","message scrub ","message respond_to? ","offense message ","offense severity to_s "," message ","(sym :corrected) include? ","message chars select join  chars select join ","message scrub  chars select join ","offense message  chars select join ","message chars select join  chars select ","message scrub  chars select ","offense message  chars select ","message chars select join  chars ","message scrub  chars ","offense message  chars ","message chars select join  scrub ","message scrub  scrub ","offense message  scrub ","message chars select join  respond_to? ","message scrub  respond_to? ","offense message  respond_to? ","offense message chars select join  ","offense message scrub  ","offense offense message  "," message chars select join  "," message scrub  "," offense message  "]}," RuboCop CachedData to_json":{"type":"method","name":"to_json","children":[],"call":["JSON  dump "," serialize_offense ","offenses map "]}," RuboCop CachedData from_json":{"type":"method","name":"from_json","children":[],"call":[" deserialize_offenses ","JSON  load ","JSON  parse "]}," RuboCop CachedData initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop Node visit_ancestors_with_types":{"type":"method","name":"visit_ancestors_with_types","children":[],"call":["types include? ","current_node type ","last_node parent ","last_node parent  type "]}," RuboCop Node visit_ancestors":{"type":"method","name":"visit_ancestors","children":[],"call":["last_node parent "]}," RuboCop Node visit_descendants_with_types":{"type":"method","name":"visit_descendants_with_types","children":[],"call":["child visit_descendants_with_types ","types include? ","child type ","child is_a? "," children each "," children "]}," RuboCop Node visit_descendants":{"type":"method","name":"visit_descendants","children":[],"call":["child visit_descendants ","child is_a? "," children each "," children "]}," RuboCop Node pure?":{"type":"method","name":"pure?","children":[],"call":[" child_nodes all? "," child_nodes "," type "]}," RuboCop Node value_used?":{"type":"method","name":"value_used?","children":[],"call":["index == "," parent value_used? "," parent "," parent children size - "," parent children size "," parent children "," parent type ","child equal? "," parent children index "," parent nil? "," while_until_value_used? "," case_if_value_used? "," for_value_used? "," begin_value_used? "]}," RuboCop Node keyword_not?":{"type":"method","name":"keyword_not?","children":[],"call":[" loc selector is? ","not freeze "," loc selector "," loc ","method_name == ","args empty? "]}," RuboCop Node special_keyword?":{"type":"method","name":"special_keyword?","children":[],"call":["SPECIAL_KEYWORDS  include? "," source "]}," RuboCop Node keyword?":{"type":"method","name":"keyword?","children":[],"call":[" loc operator is? "," type to_s "," type "," loc operator "," loc ","OPERATOR_KEYWORDS  include? ! ","OPERATOR_KEYWORDS  include? ","KEYWORDS  include? "," keyword_not? "," special_keyword? "]}," RuboCop Node reference?":{"type":"method","name":"reference?","children":[],"call":["REFERENCES  include? "," type "]}," RuboCop Node variable?":{"type":"method","name":"variable?","children":[],"call":["VARIABLES  include? "," type "]}," RuboCop Node immutable_literal?":{"type":"method","name":"immutable_literal?","children":[],"call":["IMMUTABLE_LITERALS  include? "," type "]}," RuboCop Node mutable_literal?":{"type":"method","name":"mutable_literal?","children":[],"call":["MUTABLE_LITERALS  include? "," type "]}," RuboCop Node falsey_literal?":{"type":"method","name":"falsey_literal?","children":[],"call":["FALSEY_LITERALS  include? "," type "]}," RuboCop Node truthy_literal?":{"type":"method","name":"truthy_literal?","children":[],"call":["TRUTHY_LITERALS  include? "," type "]}," RuboCop Node basic_literal?":{"type":"method","name":"basic_literal?","children":[],"call":["BASIC_LITERALS  include? "," type "]}," RuboCop Node literal?":{"type":"method","name":"literal?","children":[],"call":["LITERALS  include? "," type "]}," RuboCop Node asgn_method_call?":{"type":"method","name":"asgn_method_call?","children":[],"call":[" method_name to_s end_with? "," method_name to_s "," method_name ","COMPARISON_OPERATORS  include? ! ","COMPARISON_OPERATORS  include? ","= freeze "]}," RuboCop Node single_line?":{"type":"method","name":"single_line?","children":[],"call":[" multiline? ! "," multiline? "]}," RuboCop Node multiline?":{"type":"method","name":"multiline?","children":[],"call":["expr first_line != ","expr last_line ","expr first_line "," loc expression "," loc "," loc expression  first_line != "," loc expression  last_line "," loc expression  first_line "," loc  loc expression ession "]}," RuboCop Node parent_module_name":{"type":"method","name":"parent_module_name","children":[],"call":["result empty? ","(send\n  (lvar :ancestors) :map) compact reverse join ","(send\n  (lvar :ancestors) :map) compact reverse ","(send\n  (lvar :ancestors) :map) compact ","ancestor receiver const_name ","ancestor receiver ","ancestor receiver const_type? ","ancestor method_name == ","ancestor method_name ","ancestor receiver nil? ","(sym :describe) include? ","ancestor parent_module_name ","obj self_type? ","obj const_name ","obj const_type? ","ancestor children [] ","ancestor children ","ancestor defined_module_name ","ancestor type ","ancestors map "," each_ancestor ","ancestor known_dsl? "," new_class_or_module_block? ","receiver const_name ","receiver const_type? "," parent_module_name_for_sclass "," parent_module_name_part ","(send\n  (lvar :ancestors) :map) compact reverse join  empty? ","(send\n  (lvar : each_ancestor ) :map) compact reverse join ","(send\n  (lvar : each_ancestor ) :map) compact reverse ","(send\n  (lvar : each_ancestor ) :map) compact ","ancestor ancestor receiver  const_name ","ancestor ancestor receiver  ","ancestor ancestor receiver  const_type? ","ancestor ancestor receiver  nil? ","ancestor children []  self_type? ","ancestor children []  const_name ","ancestor children []  const_type? "," each_ancestor  map ","ancestor receiver  const_name ","ancestor receiver  const_type? "]}," RuboCop Node defined_module_name":{"type":"method","name":"defined_module_name","children":[],"call":["const const_name "," defined_module "," defined_module   defined_module _name "]}," RuboCop Node defined_module":{"type":"method","name":"defined_module","children":[],"call":[" s "," defined_module0 "]}," RuboCop Node const_name":{"type":"method","name":"const_name","children":[],"call":["name to_s ","namespace const_name ","namespace cbase_type? ! ","namespace cbase_type? "," const_type? "]}," RuboCop Node source_range":{"type":"method","name":"source_range","children":[],"call":[" loc expression "," loc "]}," RuboCop Node source":{"type":"method","name":"source","children":[],"call":[" loc expression source "," loc expression "," loc "]}," RuboCop Node each_node":{"type":"method","name":"each_node","children":[],"call":[" visit_descendants_with_types "," visit_descendants ","types empty? ","types include? "," type ","types flatten! "," to_enum "," __method__ "," block_given? "]}," RuboCop Node descendants":{"type":"method","name":"descendants","children":[],"call":[" each_descendant to_a "," each_descendant "]}," RuboCop Node each_descendant":{"type":"method","name":"each_descendant","children":[],"call":[" visit_descendants_with_types "," visit_descendants ","types empty? ","types flatten! "," to_enum "," __method__ "," block_given? "]}," RuboCop Node child_nodes":{"type":"method","name":"child_nodes","children":[],"call":[" each_child_node to_a "," each_child_node "]}," RuboCop Node each_child_node":{"type":"method","name":"each_child_node","children":[],"call":["types include? ","child type ","types empty? ","child is_a? "," children each "," children ","types flatten! "," to_enum "," __method__ "," block_given? "]}," RuboCop Node ancestors":{"type":"method","name":"ancestors","children":[],"call":[" each_ancestor to_a "," each_ancestor "]}," RuboCop Node each_ancestor":{"type":"method","name":"each_ancestor","children":[],"call":[" visit_ancestors_with_types "," visit_ancestors ","types empty? ","types flatten! "," to_enum "," __method__ "," block_given? "]}," RuboCop Node sibling_index":{"type":"method","name":"sibling_index","children":[],"call":["sibling equal? "," parent children index "," parent children "," parent "]}," RuboCop Node parent=":{"type":"method","name":"parent=","children":[],"call":["@mutable_attributes []= "]}," RuboCop Node parent":{"type":"method","name":"parent","children":[],"call":["@mutable_attributes [] "]}," RuboCop Node initialize":{"type":"method","name":"initialize","children":[],"call":["child_node parent= "," each_child_node ","child_node complete? "]}," RuboCop Node def_matcher":{"type":"method","name":"def_matcher","children":[],"call":[" class_eval ","lineno to_i "," caller first split "," caller first "," caller ","compiler emit_method_code ","compiler emit_param_list ","RuboCop NodePattern Compiler  new ","RuboCop NodePattern Compiler  new  emit_method_code ","RuboCop NodePattern Compiler  new  emit_param_list "]}," RuboCop Sexp s":{"type":"method","name":"s","children":[],"call":["Node  new "]}," RuboCop Node Builder n":{"type":"method","name":"n","children":[],"call":["Node  new "]}," RuboCop ProcessedSource ast_with_comments":{"type":"method","name":"ast_with_comments","children":[],"call":["Parser Source Comment  associate "," comments "," ast "," comments ! "," ast ! "]}," RuboCop PathUtil absolute?":{"type":"method","name":"absolute?","children":[],"call":["path =~ ","(str \"\\\\A([A-Z]:)?/\") match? "]}," RuboCop Cop VariableForce Locatable loop_body_name":{"type":"method","name":"loop_body_name","children":[],"call":[" raise ","loop_indices include? "," body_index "]}," RuboCop Cop Util effective_column":{"type":"method","name":"effective_column","children":[],"call":["range column ","range column - ","@processed_source raw_source codepoints first == ","@processed_source raw_source codepoints first ","@processed_source raw_source codepoints ","@processed_source raw_source ","range line == ","range line "]}," RuboCop Cop Team forces_for":{"type":"method","name":"forces_for","children":[],"call":["forces << ","force_class new ","joining_cops empty? ","cop join_force? ","cops select ","Force  all each_with_object ","Force  all "]}," RuboCop Cop Style ZeroLengthPredicate on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format "," nonzero_length_predicate "," zero_length_predicate "," check_nonzero_length_predicate "," check_zero_length_predicate "," check_nonzero_length_comparison "," check_zero_length_comparison ","  nonzero_length_predicate  "," non zero_length_predicate  ","  zero_length_predicate  "," check_ nonzero_length_predicate  "," check_non zero_length_predicate  "," check_ zero_length_predicate  "]}," RuboCop Cop Style SpaceAroundKeyword autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector insert_after ","  freeze "," lambda ","corrector insert_before "," space_before_missing? "]}," RuboCop Cop Style SpaceAroundKeyword preceded_by_operator?":{"type":"method","name":"preceded_by_operator?","children":[],"call":[" operator? ","ancestor loc selector source to_sym ","ancestor loc selector source ","ancestor loc selector ","ancestor loc ","ancestor send_type? ","ancestor or_type? ","ancestor and_type? ","node ancestors first ","node ancestors ","ancestor method_name ","node parent ","node each_ancestor ","node ancestors first  loc selector source to_sym ","node parent  loc selector source to_sym ","node ancestors first  loc selector source ","node parent  loc selector source ","node ancestors first  loc selector ","node parent  loc selector ","node ancestors first  loc ","node parent  loc ","node ancestors first  send_type? ","node parent  send_type? ","node ancestors first  or_type? ","node parent  or_type? ","node ancestors first  and_type? ","node parent  and_type? ","node node ancestors first s first ","node node parent s first ","node node ancestors first s ","node node parent s ","node ancestors first  method_name ","node parent  method_name ","node each_node ancestors first  ","node each_node parent  "]}," RuboCop Cop Style SpaceAroundKeyword accept_left_parenthesis?":{"type":"method","name":"accept_left_parenthesis?","children":[],"call":["ACCEPT_LEFT_PAREN  include? ","range source "]}," RuboCop Cop Style SpaceAroundKeyword space_after_missing?":{"type":"method","name":"space_after_missing?","children":[],"call":["char !~ ","char == ","( freeze "," accept_left_parenthesis? ","range source_buffer source [] ","range source_buffer source ","range source_buffer ","range end_pos ","[ freeze "," accept_left_square_bracket? "," safe_navigation_call? ","range source_buffer source []  !~ ","range source_buffer source []  == ","range end_range end_pos  "]}," RuboCop Cop Style SpaceAroundKeyword space_before_missing?":{"type":"method","name":"space_before_missing?","children":[],"call":["range source_buffer source [] !~ ","range source_buffer source [] ","range source_buffer source ","range source_buffer ","pos < ","range begin_pos - ","range begin_pos ","range begin_pos -  < ","range begin_range begin_pos -  - ","range begin_range begin_pos -  "]}," RuboCop Cop Style SpaceAroundKeyword offense":{"type":"method","name":"offense","children":[],"call":[" add_offense ","msg % ","range source "]}," RuboCop Cop Style SpaceAroundKeyword check_keyword":{"type":"method","name":"check_keyword","children":[],"call":[" offense "," space_after_missing? "," preceded_by_operator? ! "," preceded_by_operator? "," space_before_missing? "]}," RuboCop Cop Style SpaceAroundKeyword do?":{"type":"method","name":"do?","children":[],"call":["node loc begin is? ","node loc begin ","node loc "]}," RuboCop Cop Style SpaceAroundKeyword check_end":{"type":"method","name":"check_end","children":[],"call":[" offense "," space_before_missing? "," do? ! "," do? ","begin_keyword == "]}," RuboCop Cop Style SpaceAroundKeyword check_begin":{"type":"method","name":"check_begin","children":[],"call":[" check_keyword ","range is? ! ","range is? "]}," RuboCop Cop Style SpaceAroundKeyword check":{"type":"method","name":"check","children":[],"call":[" check_keyword "," check_end "," check_begin ","node loc public_send ","node loc ","node loc respond_to? ","locations each "]}," RuboCop Cop Style SpaceAroundKeyword on_yield":{"type":"method","name":"on_yield","children":[],"call":[" check ","(sym :keyword) freeze "]}," RuboCop Cop Style SpaceAroundKeyword on_while":{"type":"method","name":"on_while","children":[],"call":[" check ","(sym :begin) freeze "]}," RuboCop Cop Style SpaceAroundKeyword on_when":{"type":"method","name":"on_when","children":[],"call":[" check ","(sym :keyword) freeze "]}," RuboCop Cop Style SpaceAroundKeyword on_until":{"type":"method","name":"on_until","children":[],"call":[" check ","(sym :begin) freeze "]}," RuboCop Cop Style SpaceAroundKeyword on_super":{"type":"method","name":"on_super","children":[],"call":[" check ","(sym :keyword) freeze "]}," RuboCop Cop Style SpaceAroundKeyword on_send":{"type":"method","name":"on_send","children":[],"call":[" check ","(sym :selector) freeze ","node keyword_not? "]}," RuboCop Cop Style SpaceAroundKeyword on_return":{"type":"method","name":"on_return","children":[],"call":[" check ","(sym :keyword) freeze "]}," RuboCop Cop Style SpaceAroundKeyword on_rescue":{"type":"method","name":"on_rescue","children":[],"call":[" check ","(sym :else) freeze "]}," RuboCop Cop Style SpaceAroundKeyword on_resbody":{"type":"method","name":"on_resbody","children":[],"call":[" check ","(sym :keyword) freeze "]}," RuboCop Cop Style SpaceAroundKeyword on_preexe":{"type":"method","name":"on_preexe","children":[],"call":[" check ","(sym :keyword) freeze "]}," RuboCop Cop Style SpaceAroundKeyword on_postexe":{"type":"method","name":"on_postexe","children":[],"call":[" check ","(sym :keyword) freeze "]}," RuboCop Cop Style SpaceAroundKeyword on_or":{"type":"method","name":"on_or","children":[],"call":[" check ","(sym :operator) freeze ","node keyword? "]}," RuboCop Cop Style SpaceAroundKeyword on_next":{"type":"method","name":"on_next","children":[],"call":[" check ","(sym :keyword) freeze "]}," RuboCop Cop Style SpaceAroundKeyword on_kwbegin":{"type":"method","name":"on_kwbegin","children":[],"call":[" check ","(sym :begin) freeze "]}," RuboCop Cop Style SpaceAroundKeyword on_if":{"type":"method","name":"on_if","children":[],"call":[" check ","then freeze ","(sym :keyword) freeze "]}," RuboCop Cop Style SpaceAroundKeyword on_for":{"type":"method","name":"on_for","children":[],"call":[" check ","(sym :begin) freeze "]}," RuboCop Cop Style SpaceAroundKeyword on_ensure":{"type":"method","name":"on_ensure","children":[],"call":[" check ","(sym :keyword) freeze "]}," RuboCop Cop Style SpaceAroundKeyword on_case":{"type":"method","name":"on_case","children":[],"call":[" check ","(sym :keyword) freeze "]}," RuboCop Cop Style SpaceAroundKeyword on_break":{"type":"method","name":"on_break","children":[],"call":[" check ","(sym :keyword) freeze "]}," RuboCop Cop Style SpaceAroundKeyword on_block":{"type":"method","name":"on_block","children":[],"call":[" check ","(sym :begin) freeze "]}," RuboCop Cop Style SpaceAroundKeyword on_and":{"type":"method","name":"on_and","children":[],"call":[" check ","(sym :operator) freeze ","node keyword? "]}," RuboCop Cop Style RedundantParentheses rescue?":{"type":"method","name":"rescue?","children":[],"call":["node parent array_type? ","node parent "]}," RuboCop Cop Style RedundantParentheses first_argument?":{"type":"method","name":"first_argument?","children":[],"call":["node == ","args first ","send_node send_type? ","node parent "," first_super_argument? "," first_send_argument? "," first_yield_argument? ","node parent  send_type? "]}," RuboCop Cop Style RedundantParentheses check_send":{"type":"method","name":"check_send","children":[],"call":[" offense "," method_call_with_redundant_parentheses? ","begin_node chained? ","node unary_operation? ","node send_type? ","node children first ","node children "," call_chain_starts_with_int? "," check_unary ","begin_node children first  chained? ","node children first  unary_operation? ","node children first  send_type? ","node children first  children first ","node children first  children "]}," RuboCop Cop Style RedundantParentheses check":{"type":"method","name":"check","children":[],"call":[" check_send ","node send_type? "," offense ","node const_type? ","node variable? "," disallowed_literal? "," keyword_with_redundant_parentheses? ","begin_node children first ","begin_node children ","node call_type? "," interpolation? ","begin_node children first  send_type? ","begin_node children first  const_type? ","begin_node children first  variable? ","begin_begin_node children first  children first ","begin_begin_node children first  children ","begin_node children first  call_type? "]}," RuboCop Cop Style RedundantFreeze immutable_literal?":{"type":"method","name":"immutable_literal?","children":[],"call":[" frozen_string_literals_enabled? "," processed_source ","FROZEN_STRING_LITERAL_TYPES  include? ","node type ","node immutable_literal? "," strip_parenthesis ","node range_type? ","node regexp_type? "," target_ruby_version >= "," target_ruby_version "," frozen_string_literal? "," strip_parenthesis  type "," strip_parenthesis  immutable_literal? "," strip_parenthesis  range_type? "," strip_parenthesis  regexp_type? "]}," RuboCop Cop Style Next opposite_kw":{"type":"method","name":"opposite_kw","children":[],"call":["if_body nil? "]}," RuboCop Cop Style Next autocorrect_block":{"type":"method","name":"autocorrect_block","children":[],"call":[" reindent ","reindent_lines to_a - "," heredoc_lines ","reindent_lines to_a ","node loc end line ","node loc end ","node loc ","node source_range line + ","node source_range line ","node source_range ","corrector remove "," end_range "," cond_range ","corrector insert_before ","cond source "," opposite_kw ","lines empty? "," reindentable_lines ","node condition ","node condition source ","node inverse_keyword ","reindent_lines to_a -  to_a - ","reindent_ reindentable_lines  to_a - "," heredoc_ reindentable_lines  ","reindent_lines to_a -  to_a ","reindent_ reindentable_lines  to_a "," reindentable_lines  empty? "," reindentable_ reindentable_lines  "]}," RuboCop Cop Style Next autocorrect_modifier":{"type":"method","name":"autocorrect_modifier","children":[],"call":["corrector replace ","node source_range ","body source ","  * ","node source_range column ","cond source "," opposite_kw ","node condition source ","node condition ","node inverse_keyword ","node else_branch ","node if_branch "]}," RuboCop Cop Style MutableConstant on_assignment":{"type":"method","name":"on_assignment","children":[],"call":[" add_offense "," frozen_string_literals_enabled? "," processed_source ","FROZEN_STRING_LITERAL_TYPES  include? ","value type ","value mutable_literal? "," splat_value "," mutable_literal? "," range_enclosed_in_parentheses? "," check "," strict_check "," style == "," style "," splat_value  type "," splat_value  mutable_literal? "," splat_ splat_value  ","  range_enclosed_in_parentheses? ? "]}," RuboCop Cop Style MutableConstant on_or_asgn":{"type":"method","name":"on_or_asgn","children":[],"call":[" on_assignment ","lhs type == ","lhs type ","lhs casgn_type? "]}," RuboCop Cop Style MultilineMethodDefinitionBraceLayout on_method_def":{"type":"method","name":"on_method_def","children":[],"call":[" check_brace_layout "]}," RuboCop Cop Style MultilineMethodCallBraceLayout children":{"type":"method","name":"children","children":[],"call":["node arguments "]}," RuboCop Cop Style MultilineMethodCallBraceLayout on_send":{"type":"method","name":"on_send","children":[],"call":[" check_brace_layout "]}," RuboCop Cop Style MultilineHashBraceLayout on_hash":{"type":"method","name":"on_hash","children":[],"call":[" check_brace_layout "]}," RuboCop Cop Style Documentation nodoc_comment?":{"type":"method","name":"nodoc_comment?","children":[],"call":[" nodoc_comment? ","node ancestors first ","node ancestors ","comment text =~ ","comment text ","comment loc line == ","node loc line ","node loc ","comment loc line ","comment loc ","ast_with_comments [] first ","ast_with_comments [] ","node children first ","node children ","node parent "," nodoc? "," same_line? "," nodoc "," nodoc_ast_with_comments [] first ? ","  nodoc _comment? ","ast_with_comments [] first  text =~ ","ast_with_comments [] first  text ","ast_with_comments [] first  loc line == ","ast_with_comments [] first  loc line ","ast_with_comments [] first  loc ","ast_with_ast_with_comments [] first s [] first ","ast_with_ast_with_comments [] first s [] ","  nodoc ? ","  nodoc  "]}," RuboCop Cop Style Documentation on_module":{"type":"method","name":"on_module","children":[],"call":[" add_offense "," format "," nodoc_comment? "," associated_comment? "," processed_source ast_with_comments "," processed_source "," namespace? "," check ","node body "," processed_source  processed_source ast_with_comments  "]}," RuboCop Cop Style Documentation on_class":{"type":"method","name":"on_class","children":[],"call":[" add_offense "," format "," nodoc_comment? "," associated_comment? "," processed_source ast_with_comments "," processed_source "," namespace? "," check ","node body "," processed_source  processed_source ast_with_comments  "]}," RuboCop Cop Performance RedundantMerge max_key_value_pairs":{"type":"method","name":"max_key_value_pairs","children":[],"call":[" cop_config [] to_i "," cop_config [] "," cop_config "," Integer "]}," RuboCop Cop Performance Casecmp correction":{"type":"method","name":"correction","children":[],"call":["corrector replace ","node loc expression ","node loc ","arg source ","variable source "," parentheses? ! "," parentheses? ","arg send_type? ","corrector insert_before ","method == "," lambda "," build_good_method "]}," RuboCop Cop Performance CaseWhenSplat initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop Cop MultilineLiteralBraceLayout closing_brace_on_same_line?":{"type":"method","name":"closing_brace_on_same_line?","children":[],"call":["node loc end line == "," children last loc last_line "," children last loc "," children last "," children ","node loc end line ","node loc end ","node loc "," children last last_line "]}," RuboCop Cop MultilineLiteralBraceLayout opening_brace_on_same_line?":{"type":"method","name":"opening_brace_on_same_line?","children":[],"call":["node loc begin line == "," children first loc first_line "," children first loc "," children first "," children ","node loc begin line ","node loc begin ","node loc "," children first first_line "," same_line? "]}," RuboCop Cop MultilineLiteralBraceLayout children":{"type":"method","name":"children","children":[],"call":["node children "]}," RuboCop Cop MultilineLiteralBraceLayout autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove "," lambda ","Parser Source Range  new ","node loc end begin_pos ","node loc end ","node loc "," children last source_range end_pos "," children last source_range "," children last "," children ","node source_range source_buffer ","node source_range ","corrector insert_before ","\n freeze "," closing_brace_on_same_line? ","corrector insert_after ","node loc end source "," range_with_surrounding_space "," last_element_range_with_trailing_comma "," new_line_needed_before_closing_brace? "," children last source_Parser Source Range  new  end_pos "," children last source_Parser Source Range  new  ","node source_Parser Source Range  new  source_buffer ","node source_Parser Source Range  new  "," Parser Source Range  new _with_surrounding_space "," last_element_Parser Source Range  new _with_trailing_comma "]}," RuboCop Cop MultilineLiteralBraceLayout check_brace_layout":{"type":"method","name":"check_brace_layout","children":[],"call":[" add_offense "," class "," closing_brace_on_same_line? "," opening_brace_on_same_line? "," children empty? "," children ","node loc begin ","node loc "," handle_same_line "," handle_new_line "," handle_symmetrical "," style "," last_line_heredoc? "," children last ","node single_line? "," check ","node children last ","node children "," ignored_literal? "]}," RuboCop Cop FrozenStringLiteral frozen_string_literals_enabled?":{"type":"method","name":"frozen_string_literals_enabled?","children":[],"call":[" frozen_string_literal_comment_exists? ","ruby_version >= ","processed_source ruby_version ","MagicComment  parse frozen_string_literal? ","MagicComment  parse "," leading_comment_lines any? "," leading_comment_lines "," processed_source ruby_version "," processed_source ","processed_source ruby_version  >= "," processed_source ruby_version  >= ","processed_source processed_source ruby_version  ","processed_source  processed_source ruby_version  "," processed_source processed_source ruby_version  "," processed_source  processed_source ruby_version  "]}," RuboCop Cop FrozenStringLiteral frozen_string_literal_comment_exists?":{"type":"method","name":"frozen_string_literal_comment_exists?","children":[],"call":["line start_with? ","first_three_lines any? ","first_three_lines compact! ","processed_source [] ","MagicComment  parse frozen_string_literal_specified? ","MagicComment  parse "," leading_comment_lines any? "," leading_comment_lines ","MagicComment  parse valid_literal_value? "]}," RuboCop Cop ClassishLength line_numbers_of_inner_nodes":{"type":"method","name":"line_numbers_of_inner_nodes","children":[],"call":["line_numbers to_a ","line_numbers merge "," line_range ","node each_descendant ","Set  new ","Set  new  to_a ","Set  new  merge ","  line_range  "]}," RuboCop Cop AutocorrectAlignment display_column":{"type":"method","name":"display_column","children":[],"call":["line [] display_width ","line [] ","range column "," processed_source lines [] ","range line - ","range line "," processed_source lines "," processed_source ","Unicode DisplayWidth  of "," processed_source lines []  [] display_width "," processed_source lines []  [] "," processed_source  processed_source lines [] s [] ","range  processed_source lines []  - ","range  processed_source lines []  "," processed_source  processed_source lines [] s "]}," RuboCop Cop Lint LiteralInInterpolation autocorrected_value_for_symbol":{"type":"method","name":"autocorrected_value_for_symbol","children":[],"call":["Parser Source Range  new source ","Parser Source Range  new ","node loc begin end_pos ","node loc begin ","node loc ","node source_range source_buffer ","node source_range ","node loc expression end_pos ","node loc expression ","node loc end begin_pos ","node loc end "," range_between source "," range_between "," range_between source gsub ","node source_range end_pos ","node loc begin node loc expression end_pos  ","node loc begin node loc end begin_pos  ","node loc begin node source_range end_pos  ","node loc expression node loc expression end_pos  ","node loc expression node loc end begin_pos  ","node loc expression node source_range end_pos  ","node source_range node loc expression end_pos  ","node source_range node loc end begin_pos  ","node source_range node source_range end_pos  "]}," RuboCop Cop Commissioner setup_callbacks":{"type":"method","name":"setup_callbacks","children":[],"call":["@callbacks []= ","cop respond_to? ","@cops select "," class callback_methods each "," class callback_methods "," class ","@callbacks clear "]}," RuboCop Node known_dsl?":{"type":"method","name":"known_dsl?","children":[],"call":[" receiver nil? "," receiver ","RSPEC_METHODS  include? "," method_name "]}," RuboCop Node chained?":{"type":"method","name":"chained?","children":[],"call":[" equal? "," parent "," parent send_type? ! "," parent send_type? "," parent nil? "]}," RuboCop Node unary_operation?":{"type":"method","name":"unary_operation?","children":[],"call":[" source_range begin_pos == "," loc selector begin_pos "," loc selector "," loc "," source_range begin_pos "," source_range ","Cop Util  operator? "," loc selector source to_sym "," loc selector source "," loc respond_to? "]}," RuboCop Node updated":{"type":"method","name":"updated","children":[],"call":["Node  new ","properties [] "]}," RuboCop Node complete?":{"type":"method","name":"complete?","children":[],"call":["@mutable_attributes frozen? "]}," RuboCop Node complete!":{"type":"method","name":"complete!","children":[],"call":[" each_child_node ","@mutable_attributes freeze "]}," RuboCop Node Traversal on_case":{"type":"method","name":"on_case","children":[],"call":[" send ","child type ","node children each ","node children "]}," RuboCop Node Traversal on_block":{"type":"method","name":"on_block","children":[],"call":[" send ","child type ","children [] "," on_args "," on_send ","node children ","children []  type ","children [] ren [] ","node children  [] ","node children [] ren ","node node children  "]}," RuboCop Node Traversal on_while":{"type":"method","name":"on_while","children":[],"call":[" send ","child type ","children [] ","node children ","children []  type ","children [] ren [] ","node children  [] ","node children [] ren ","node node children  "]}," RuboCop Node Traversal on_if":{"type":"method","name":"on_if","children":[],"call":[" send ","child type ","children [] ","node children ","children []  type ","children [] ren [] ","node children  [] ","node children [] ren ","node node children  "]}," RuboCop Node Traversal on_defs":{"type":"method","name":"on_defs","children":[],"call":[" send ","child type ","children [] "," on_args ","node children ","children []  type ","children [] ren [] ","node children  [] ","node children [] ren ","node node children  "]}," RuboCop Node Traversal on_op_asgn":{"type":"method","name":"on_op_asgn","children":[],"call":[" send ","child type ","children [] ","node children ","children []  type ","children [] ren [] ","node children  [] ","node children [] ren ","node node children  "]}," RuboCop Node Traversal on_send":{"type":"method","name":"on_send","children":[],"call":[" send ","child type ","i == ","node children each_with_index ","node children "]}," RuboCop Node Traversal on_def":{"type":"method","name":"on_def","children":[],"call":[" send ","child type ","children [] "," on_args ","node children ","children []  type ","children [] ren [] ","node children  [] ","node children [] ren ","node node children  "]}," RuboCop Node Traversal on_class":{"type":"method","name":"on_class","children":[],"call":[" send ","child type ","children [] ","node children ","children []  type ","children [] ren [] ","node children  [] ","node children [] ren ","node node children  "]}," RuboCop Node Traversal on_casgn":{"type":"method","name":"on_casgn","children":[],"call":[" send ","child type ","children [] ","node children ","children []  type ","children [] ren [] ","node children  [] ","node children [] ren ","node node children  "]}," RuboCop Node Traversal on_const":{"type":"method","name":"on_const","children":[],"call":[" send ","child type ","node children [] ","node children ","node children []  type ","node node children [] ren [] ","node node children [] ren "]}," RuboCop Node Traversal walk":{"type":"method","name":"walk","children":[],"call":[" send ","node type ","node nil? "]}," RuboCop Cop Team autocorrect_all_cops":{"type":"method","name":"autocorrect_all_cops","children":[],"call":["buffer source ","corrector rewrite ","corrector corrections empty? ! ","corrector corrections empty? ","corrector corrections ","skip merge ","INCOMPATIBLE_COPS  [] ","cop class ","corrector corrections concat ","cop corrections ","skip include? ","cop corrections empty? ","cops each ","Set  new ","Corrector  new ","cop class autocorrect_incompatible_with "," collate_corrections ","Corrector  new  rewrite ","Corrector  new  corrections empty? ! ","Corrector  new  corrections empty? ","Corrector  new  corrections ","Set  new  merge ","Corrector  new  corrections concat ","Set  new  include? ","cop class autocorrect_INCOMPATIBLE_COPS  [] _with "]}," RuboCop Cop Style TrailingUnderscoreVariable unneeded_range":{"type":"method","name":"unneeded_range","children":[],"call":[" range_with_surrounding_space ","Parser Source Range  new ","first_offense source_range begin_pos ","first_offense source_range ","node source_range source_buffer ","node source_range ","node loc operator begin_pos ","node loc operator ","node loc ","right source_range begin_pos ","right source_range ","first_offense source_range == ","variables first source_range ","variables first "," find_first_offense "," range_between "," range_for_parentheses ","Util  parentheses? "," left_side_range "," unused_variables_only? "," Parser Source Range  new _with_surrounding_space ","  range_between _with_surrounding_space ","first_offense source_Parser Source Range  new  begin_pos ","first_offense source_ range_between  begin_pos "," find_first_offense  source_range begin_pos ","first_offense source_Parser Source Range  new  ","first_offense source_ range_between  "," find_first_offense  source_range ","node source_Parser Source Range  new  source_buffer ","node source_ range_between  source_buffer ","node source_Parser Source Range  new  ","node source_ range_between  ","right source_Parser Source Range  new  begin_pos ","right source_ range_between  begin_pos ","right source_Parser Source Range  new  ","right source_ range_between  ","first_offense source_Parser Source Range  new  == ","first_offense source_ range_between  == "," find_first_offense  source_range == ","variables first source_Parser Source Range  new  ","variables first source_ range_between  "," find_ find_first_offense  "," Parser Source Range  new _between ","  range_between _between "," Parser Source Range  new _for_parentheses ","  range_between _for_parentheses "," left_side_Parser Source Range  new  "," left_side_ range_between  "]}," RuboCop Cop Style SpaceAroundKeyword on_defined?":{"type":"method","name":"on_defined?","children":[],"call":[" check ","(sym :keyword) freeze "]}," RuboCop Cop Style SpaceAroundKeyword on_zsuper":{"type":"method","name":"on_zsuper","children":[],"call":[" check ","(sym :keyword) freeze "]}," RuboCop Cop Style Semicolon check_for_line_terminator_or_opener":{"type":"method","name":"check_for_line_terminator_or_opener","children":[],"call":[" convention_on ","tokens first pos column ","tokens first pos ","tokens first ","tokens first type == ","tokens first type ","tokens last pos column ","tokens last pos ","tokens last ","tokens last type == ","tokens last type ","tokens_for_lines each ","token pos line ","token pos ","@processed_source tokens group_by ","@processed_source tokens "," each_semicolon ","@processed_source raw_source include? ","@processed_source raw_source "," register_semicolon "," processed_source raw_source include? "," processed_source raw_source "," processed_source "]}," RuboCop Cop Style EmptyLineBetweenDefs check_defs":{"type":"method","name":"check_defs","children":[],"call":[" add_offense ","nodes last "," cop_config [] "," cop_config ","nodes all? "," blank_lines_between? "," multiple_blank_lines_groups? "]}," RuboCop Cop Style EmptyLineBetweenDefs on_begin":{"type":"method","name":"on_begin","children":[],"call":[" check_defs ","nodes all? "," method ","node children each_cons ","node children "]}," RuboCop Cop Style ConditionalAssignmentHelper indent":{"type":"method","name":"indent","children":[],"call":["  * ","source length ","cop config [] [] == ","cop config [] [] ","cop config [] ","cop config ","conf [] == ","conf [] ","cop config for_cop ","cop cop config for_cop ig [] [] == ","cop cop config for_cop ig [] [] ","cop cop config for_cop ig [] ","cop cop config for_cop ig ","cop config for_cop  [] == ","cop config for_cop  [] ","cop cop config for_cop ig for_cop "]}," RuboCop Cop Commissioner reset_callbacks":{"type":"method","name":"reset_callbacks","children":[],"call":["@callbacks clear "]}," RuboCop Node new_class_or_module_block?":{"type":"method","name":"new_class_or_module_block?","children":[],"call":["block_node parent casgn_type? ","block_node parent ","receiver const_name == ","receiver const_name ","receiver const_type? ","block_node method_name == ","block_node method_name ","block_node receiver ","block_node receiver  const_name == ","block_node receiver  const_name ","block_node receiver  const_type? ","block_node block_node receiver  "]}," RuboCop Node parent_module_name_for_sclass":{"type":"method","name":"parent_module_name_for_sclass","children":[],"call":["sclass_node parent_module_name ","subject self_type? ","subject const_name ","subject const_type? ","sclass_node children [] ","sclass_node children ","sclass_node children []  self_type? ","sclass_node children []  const_name ","sclass_node children []  const_type? "]}," RuboCop ResultCache relevant_options_digest":{"type":"method","name":"relevant_options_digest","children":[],"call":["Digest MD5  hexdigest ","options length <= ","options length ","options to_s gsub ","options to_s ","NON_CHANGING  include? ","options reject ","Digest SHA1  hexdigest ","options to_s gsub  length <= ","options to_s gsub  length ","options to_s gsub  to_s gsub ","options to_s gsub  to_s ","options to_s gsub  reject "]}," RuboCop Cop Style RedundantParentheses first_arg?":{"type":"method","name":"first_arg?","children":[],"call":["node equal? ","args first ","send_node send_type? ","node parent ","node parent  send_type? "]}," RuboCop Cop Style RedundantParentheses parens_allowed?":{"type":"method","name":"parens_allowed?","children":[],"call":[" parentheses? ! "," parentheses? "," arg_in_call_with_block? "," rescue? "," first_arg? ","child hash_type? "," parens_required? "," keyword_ancestor? ","node parent ","node children first ","node children "," allowed_array_or_hash_element? "," hash_literal_as_first_arg? "," empty_parentheses? "," allowed_method_call? "," allowed_ancestor? "," allowed_multiple_expression? "," allowed_expression? "," first_arg_begins_with_hash_literal? "," allowed_pin_operator? "," node parent heses? ! "," node parent heses? ","node children first  hash_type? ","node node parent  ","node node children first ren first ","node node children first ren "," empty_node parent heses? "]}," RuboCop Cop Performance RedundantMerge rewrite_with_modifier":{"type":"method","name":"rewrite_with_modifier","children":[],"call":["parent loc keyword source << << << << << << << ","parent loc keyword source << << << << << << "," leading_spaces ","parent loc keyword source << << << << << ","parent loc keyword source << << << << ","parent loc keyword source << << << ","parent loc keyword source << << ","cond source ","parent loc keyword source << ","parent loc keyword source ","parent loc keyword ","parent loc ","new_source gsub! ","(send\n  (str \" \") :*\n  (send nil :indent_width)) + ","  * "," indent_width "," format chomp "," format ","parent condition source ","parent condition ","indent + ","(send\n  (str \" \") :*\n  (send nil :  * _width)) + ","   * _width ","  *  + "]}," RuboCop Cop Performance Detect check_second_call":{"type":"method","name":"check_second_call","children":[],"call":["args empty? ","DANGEROUS_METHODS  include? "]}," RuboCop ResultCache remove_files":{"type":"method","name":"remove_files","children":[],"call":[" puts ","Dir  rmdir ","Dir  [] empty? ","Dir  [] ","dirs each ","File  delete ","files [] ","files [] each_slice each ","files [] each_slice "]}," RuboCop Cop Util parenthesized_call?":{"type":"method","name":"parenthesized_call?","children":[],"call":["send loc begin is? ","send loc begin ","send loc "]}," RuboCop Cop Util ternary_op?":{"type":"method","name":"ternary_op?","children":[],"call":["node loc respond_to? ","node loc "]}," RuboCop Cop Style UnneededInterpolation autocorrect_other":{"type":"method","name":"autocorrect_other","children":[],"call":["corrector replace ","embedded_loc end ","embedded_loc begin ","loc end ","loc begin "," lambda ","embedded_node loc ","node loc ","embedded_node loc  end ","embedded_node loc  begin ","node loc  end ","node loc  begin ","embedded_node node loc  ","node node loc  "]}," RuboCop Cop Style UnneededInterpolation autocorrect_single_variable_interpolation":{"type":"method","name":"autocorrect_single_variable_interpolation","children":[],"call":["corrector replace ","node loc expression ","node loc "," lambda ","variable_loc expression source ","variable_loc expression ","embedded_node children first loc ","embedded_node children first ","embedded_node children ","embedded_node children first loc  expression source ","embedded_node children first loc  expression "]}," RuboCop Cop Style UnneededInterpolation autocorrect_variable_interpolation":{"type":"method","name":"autocorrect_variable_interpolation","children":[],"call":["corrector replace ","node loc expression ","node loc "," lambda ","embedded_node loc expression source ","embedded_node loc expression ","embedded_node loc "]}," RuboCop Cop Style UnlessElse range_between_else_and_end":{"type":"method","name":"range_between_else_and_end","children":[],"call":["Parser Source Range  new ","node loc end begin_pos ","node loc end ","node loc ","node loc else end_pos ","node loc else ","node source_range source_buffer ","node source_range "," range_between "]}," RuboCop Cop Style UnlessElse range_between_condition_and_else":{"type":"method","name":"range_between_condition_and_else","children":[],"call":["Parser Source Range  new ","node loc else begin_pos ","node loc else ","node loc ","condition source_range end_pos ","condition source_range ","node source_range source_buffer ","node source_range "," range_between "]}," RuboCop Cop Style UnlessElse autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","body_range source ","else_range source ","if freeze ","node loc keyword ","node loc "," lambda "," range_between_else_and_end "," range_between_condition_and_else ","node condition "," range_between_condition_and_else  source "," range_between_else_and_end  source "]}," RuboCop Cop Style SignalException check_send":{"type":"method","name":"check_send","children":[],"call":[" add_offense "," message "," command_or_kernel_call? "," autocorrect ","node loc selector ","node loc "]}," RuboCop Cop Style SignalException check_scope":{"type":"method","name":"check_scope","children":[],"call":[" ignore_node "," add_offense "," message "," ignored_node? "," each_command_or_kernel_call "," autocorrect ","send_node loc selector ","send_node loc "]}," RuboCop Cop Style SignalException investigate":{"type":"method","name":"investigate","children":[],"call":[" custom_fail_methods any? "," custom_fail_methods ","processed_source ast ","processed_source processed_source ast  "]}," RuboCop Cop Style OneLineConditional replacement":{"type":"method","name":"replacement","children":[],"call":[" operator? ","node parent ","node parent send_type? ","(sym :and) include? ","node parent type ","else_clause source ","body source ","cond source "," ternary ","node parent method_name "," to_ternary ","node parent operator_method? "," ternary_replacement "," multiline_replacement "," cannot_replace_to_ternary? "," always_multiline? "]}," RuboCop Cop Style OneLineConditional autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," replacement ","node source_range "," lambda "," ternary_correction ","IfThenCorrector  new call ","IfThenCorrector  new "," indentation_width "," cannot_replace_to_ternary? "," always_multiline? "," configured_indentation_width "]}," RuboCop Cop Style Not autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," lambda ","corrector insert_after ","node source_range "," ternary_op? ","child binary_operation? ","child or_type? ","child and_type? ","OPPOSITE_METHODS  [] to_s ","OPPOSITE_METHODS  [] ","child method_name ","child loc selector ","child loc ","corrector remove ","OPPOSITE_METHODS  key? ","child send_type? ","node children first ","node children "," range_with_surrounding_space ","node loc selector ","node loc "," ternary? "," correct_without_parens "," correct_with_parens "," requires_parens? "," correct_opposite_method "," opposite_method? ","node receiver ","node source_ range_with_surrounding_space  ","node children first  binary_operation? ","node children first  or_type? ","node children first  and_type? ","node children first  method_name ","node children first  loc selector ","node children first  loc ","node children first  send_type? ","node node children first ren first ","node node children first ren ","  range_with_surrounding_space _with_surrounding_space "]}," RuboCop Cop Style NestedModifier requires_parens?":{"type":"method","name":"requires_parens?","children":[],"call":["(send\n  (const\n    (const\n      (const nil :RuboCop) :Node) :COMPARISON_OPERATORS) :&\n  (send\n    (lvar :node) :children)) empty? ! ","(send\n  (const\n    (const\n      (const nil :RuboCop) :Node) :COMPARISON_OPERATORS) :&\n  (send\n    (lvar :node) :children)) empty? ","RuboCop Node COMPARISON_OPERATORS  & ","node children ","node or_type? ","(send\n  (const\n    (const\n      (const\n        (const nil :RuboCop) :AST) :Node) :COMPARISON_OPERATORS) :&\n  (send\n    (lvar :node) :children)) empty? ! ","(send\n  (const\n    (const\n      (const\n        (const nil :RuboCop) :AST) :Node) :COMPARISON_OPERATORS) :&\n  (send\n    (lvar :node) :children)) empty? ","RuboCop AST Node COMPARISON_OPERATORS  & "]}," RuboCop Cop Style Lambda arg_to_unparenthesized_call?":{"type":"method","name":"arg_to_unparenthesized_call?","children":[],"call":["index >= ","c equal? ","parent children index ","parent children "," parenthesized_call? ","parent send_type? ","node parent ","node sibling_index > ","node sibling_index ","arg_node sibling_index > ","arg_node sibling_index ","arg_node parent ","parent parent ","parent pair_type? ","parent parenthesized_call? ","node parent  children index ","arg_node parent  children index ","node parent  children ","arg_node parent  children "," node parent hesized_call? "," arg_node parent hesized_call? ","node parent  send_type? ","arg_node parent  send_type? ","node node parent  ","node arg_node parent  ","parent parent  sibling_index > ","parent parent  sibling_index ","arg_node node parent  ","arg_node arg_node parent  ","parent parent  parent ","node parent  node parent  ","arg_node parent  arg_node parent  ","node parent  pair_type? ","arg_node parent  pair_type? ","node parent  node parent hesized_call? ","arg_node parent  arg_node parent hesized_call? "]}," RuboCop Cop Style ExtraSpacing check_tokens":{"type":"method","name":"check_tokens","children":[],"call":[" check_other "," check_assignment ","@asgn_lines include? ","t2 pos line + ","t2 pos line ","t2 pos ","t2 pos line - ","@asgn_tokens include? "," force_equal_sign_alignment? ","t2 type == ","t2 type "]}," RuboCop Cop Style ConditionalAssignment longest_line":{"type":"method","name":"longest_line","children":[],"call":["longest_line + ","lines max_by ","line chomp sub ","line chomp ","node source lines map ","node source lines ","node source ","Regexp  escape gsub ","Regexp  escape ","assignment + ","lines max_by  + "]}," RuboCop Cop Style CommentAnnotation annotation_range":{"type":"method","name":"annotation_range","children":[],"call":["Parser Source Range  new ","start + ","comment loc expression source_buffer ","comment loc expression ","comment loc ","comment loc expression begin_pos + ","margin length ","comment loc expression begin_pos "," range_between "," concat_length ","annotation bounds ","comment loc expression begin_pos +  + ","comment loc expression comment loc expression source_buffer  ","margin  concat_length  "," concat_ concat_length  "]}," RuboCop Cop Style BlockDelimiters correction_would_break_code?":{"type":"method","name":"correction_would_break_code?","children":[],"call":[" parentheses? ! "," parentheses? ","args empty? ! ","args empty? ","node children first ","node children ","node loc begin is? ","node loc begin ","node loc ","send parenthesized? ! ","send parenthesized? ","send arguments? ","node send_node parenthesized? ! ","node send_node parenthesized? ","node send_node ","node send_node arguments? ","node keywords? ","node children first  parenthesized? ! ","node children first  parenthesized? ","node children first  arguments? ","node node children first _node parenthesized? ! ","node node children first _node parenthesized? ","node node children first _node ","node node children first _node arguments? "]}," RuboCop Cop Style BlockDelimiters get_blocks":{"type":"method","name":"get_blocks","children":[],"call":[" get_blocks ","node children each ","node children ","node loc begin ","node loc ","node type ","node each_child_node ","node receiver ","node braces? "]}," RuboCop Cop Style BlockDelimiters autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","corrector insert_before "," whitespace_before? ","b is? ","node loc end ","node loc ","node loc begin "," lambda "," correction_would_break_code? ","corrector insert_after "," whitespace_after? "," replace_do_end_with_braces "," replace_braces_with_do_end ","node loc begin is? ","node braces? ","corrnode loc end ctor rnode loc end placnode loc end  ","corrnode loc end ctor insnode loc end rt_bnode loc end fornode loc end  ","corrector insert_node loc begin efore "," whitnode loc end spacnode loc end _bnode loc end fornode loc end ? "," whitespace_node loc begin efore? ","node loc begin  is? ","nodnode loc end  loc node loc end nd ","nodnode loc end  loc ","nodnode loc end  loc bnode loc end gin ","node loc node loc begin egin "," lamnode loc begin da "," corrnode loc end ction_would_brnode loc end ak_codnode loc end ? "," correction_would_node loc begin reak_code? ","corrnode loc end ctor insnode loc end rt_aftnode loc end r "," whitnode loc end spacnode loc end _aftnode loc end r? "," rnode loc end placnode loc end _do_node loc end nd_with_bracnode loc end s "," replace_do_end_with_node loc begin races "," rnode loc end placnode loc end _bracnode loc end s_with_do_node loc end nd "," replace_node loc begin races_with_do_end ","nodnode loc end  loc bnode loc end gin is? ","node loc node loc begin egin is? ","nodnode loc end  bracnode loc end s? ","node node loc begin races? "]}," RuboCop Cop Style AndOr autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node loc operator ","node loc "," correct_other ","expr assignment? ","expr return_type? "," correct_send ","expr send_type? ","(lvar :expr1) each "," lambda ","node type == ","node type ","node and_type? ","node alternate_operator ","(splat\n  (lvar :node)) each ","node each_child_node "]}," RuboCop Cop Rails Date good_methods":{"type":"method","name":"good_methods","children":[],"call":[" style == "," style "]}," RuboCop Cop Rails Date safe_chain?":{"type":"method","name":"safe_chain?","children":[],"call":["(send\n  (lvar :chain) :&\n  (send nil :good_methods)) empty? ! ","(send\n  (lvar :chain) :&\n  (send nil :good_methods)) empty? ","chain & "," good_methods ","(send\n  (lvar :chain) :&\n  (send nil :bad_methods)) empty? "," bad_methods "," extract_method_chain ","(send\n  (lvar : extract_method_chain ) :&\n  (send nil :good_methods)) empty? ! ","(send\n  (lvar : extract_method_chain ) :&\n  (send nil :good_methods)) empty? "," extract_method_chain  & ","(send\n  (lvar : extract_method_chain ) :&\n  (send nil :bad_methods)) empty? "," extract_method_ extract_method_chain  "]}," RuboCop Cop Offense highlighted_area":{"type":"method","name":"highlighted_area","children":[],"call":["Parser Source Range  new "," location column + "," location column "," location "," location source_line "," location source_line length - "," location source_line length "," location column_range count "," location column_range "," location first_line == "," location last_line "," location first_line "," column + "," column_length "," column "," source_line ","  location source_line length -  ","  location column_range count  "]}," RuboCop Cop TrailingComma elements":{"type":"method","name":"elements","children":[],"call":["a children ","a loc first_line != ","a loc last_line ","a loc ","a loc first_line ","a hash_type? ","args flat_map ","node children ","node send_type? "," brackets? ! "," brackets? ","a braces? ! ","a braces? ","a multiline? ","argument children ","argument braces? ! ","argument braces? ","argument multiline? ","argument hash_type? ","node arguments flat_map ","node arguments ","(sym :csend) include? ","node type ","node call_type? "]}," RuboCop Cop Metrics LineLength excess_range":{"type":"method","name":"excess_range","children":[],"call":[" source_range ","line length ","index + "," processed_source buffer "," processed_source "," max ","uri_range end ","uri_range begin < ","uri_range begin "," line_length "," highligh_start ","line_index + "," highlight_start "]}," RuboCop Cop Metrics LineLength offense":{"type":"method","name":"offense","children":[],"call":[" max= ","line length "," add_offense "," format "," max "]}," RuboCop Cop Metrics LineLength check_line":{"type":"method","name":"check_line","children":[],"call":[" offense "," excess_range "," allowed_uri_position? "," find_excessive_uri_range "," allow_uri? "," line_in_whitelisted_heredoc? ","index succ ","line length > "," max ","line length "," source_range ","index + "," processed_source buffer "," processed_source "," check_uri_line "," check_directive_line "," directive_on_source_line? "," ignore_cop_directives? ","line length <= "," ignored_line? "," register_offense "," line_length "," highligh_start "," line_length <= "," highlight_start "," find_excessive_ find_excessive_uri_range  "]}," RuboCop Cop Lint UnneededDisable each_already_disabled":{"type":"method","name":"each_already_disabled","children":[],"call":["c loc line == ","range begin ","c loc line ","c loc ","comments find ","previous_range end != ","previous_range end ","line_ranges each_cons "," all_disabled? ! "," all_disabled? "," ignore_offense? "]}," RuboCop Cop Lint UnneededDisable each_unneeded_disable":{"type":"method","name":"each_unneeded_disable","children":[],"call":[" find_unneeded "," ignore_offense? "," all_disabled? ","c loc line == ","line_range begin ","c loc line ","c loc ","comments find ","line_ranges each "," each_already_disabled ","cop_disabled_line_ranges each ","cop_disabled_line_ranges [] "," each_line_range "]}," RuboCop Cop Lint ImplicitStringConcatenation each_bad_cons":{"type":"method","name":"each_bad_cons","children":[],"call":["child1 source [] == "," ending_delimiter ","child1 source [] ","child1 source ","child1 loc last_line == ","child2 loc line ","child2 loc ","child1 loc last_line ","child1 loc "," string_literal? ","node children each_cons ","node children ","child1 last_line == ","child2 first_line ","child1 last_line ","child_node1 source [] == ","child_node1 source [] ","child_node1 source ","child_node1 last_line == ","child_node2 first_line ","child_node1 last_line "," string_literals? "]}," RuboCop Cop Lint ElseLayout else?":{"type":"method","name":"else?","children":[],"call":["node loc else is? ","node loc else ","node loc ","node loc respond_to? "]}," RuboCop Cop Lint ElseLayout if?":{"type":"method","name":"if?","children":[],"call":["(str \"if\") include? ","node loc keyword source ","node loc keyword ","node loc ","node loc respond_to? "]}," RuboCop Cop Lint ElseLayout check_if":{"type":"method","name":"check_if","children":[],"call":[" check "]}," RuboCop Cop Lint ElseLayout check_else":{"type":"method","name":"check_else","children":[],"call":[" add_offense "," message ","first_else_expr source_range line == ","node loc else line ","node loc else ","node loc ","first_else_expr source_range line ","first_else_expr source_range ","else_branch children first ","else_branch children ","else_branch type == ","else_branch type ","else_branch begin_type? ","first_else source_range line == ","first_else source_range line ","first_else source_range ","node else_branch "," autocorrect "," same_line? ","else_branch children first  source_range line == ","else_branch children first _expr source_range line == ","else_branch children first  source_range line ","else_branch children first _expr source_range line ","else_branch children first  source_range ","else_branch children first _expr source_range ","node else_branch  children first ","node else_branch  children ","node else_branch  type == ","node else_branch  type ","node else_branch  begin_type? ","node node else_branch  "]}," RuboCop Cop Lint BlockAlignment compute_start_col":{"type":"method","name":"compute_start_col","children":[],"call":["(or\n  (lvar :ancestor_node)\n  (lvar :node)) source_range column ","(or\n  (lvar :ancestor_node)\n  (lvar :node)) source_range ","do_loc source_line =~ ","do_loc source_line ","node loc begin ","node loc "," style == "," style ","node loc begin  source_line =~ ","node loc begin  source_line "]}," RuboCop Cop Lint BlockAlignment format_source_line_column":{"type":"method","name":"format_source_line_column","children":[],"call":["source_line_column [] "]}," RuboCop Cop Lint BlockAlignment loc_to_source_line_column":{"type":"method","name":"loc_to_source_line_column","children":[],"call":["loc column ","loc line ","loc source lines to_a first chomp ","loc source lines to_a first ","loc source lines to_a ","loc source lines ","loc source "]}," RuboCop Cop Lint BlockAlignment compute_do_source_line_column":{"type":"method","name":"compute_do_source_line_column","children":[],"call":["do_loc line ","match [] "," style == "," style ","end_loc column != ","end_loc column ","match begin ","(str \"\\\\S.*\") match ","do_loc source_line ","node loc begin ","node loc ","node loc begin  line ","(str \"\\S.*\") match  [] ","(str \"\\S.*\") match  begin ","(str \"\\\\S.*\") (str \"\\S.*\") match  ","node loc begin  source_line "]}," RuboCop Cop Lint BlockAlignment parameter_name":{"type":"method","name":"parameter_name","children":[],"call":[]}," RuboCop Node binary_operation?":{"type":"method","name":"binary_operation?","children":[],"call":[" source_range begin_pos != "," loc selector begin_pos "," loc selector "," loc "," source_range begin_pos "," source_range ","Cop Util  operator? "," method_name "," loc respond_to? "]}," RuboCop Cop Style ZeroLengthPredicate replacement":{"type":"method","name":"replacement","children":[],"call":[" other_receiver source "," other_receiver ","receiver source "," zero_length_receiver "," other_ zero_length_receiver  source "," other_ zero_length_receiver  "," zero_length_receiver  source "," zero_length_ zero_length_receiver  "]}," RuboCop Cop Style ZeroLengthPredicate autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," replacement ","node loc expression ","node loc "," lambda "]}," RuboCop Cop Style SpecialGlobalVars english_name_replacement":{"type":"method","name":"english_name_replacement","children":[],"call":["node begin_type? "]}," RuboCop Cop Style SpecialGlobalVars replacement":{"type":"method","name":"replacement","children":[],"call":[" english_name_replacement "," style == "," style ","preferred_name to_s ","(sym :dstr) include? "," preferred_names first "," preferred_names ","node parent type ","node parent "," preferred_names first  to_s ","  preferred_names first s first ","  preferred_names first s "]}," RuboCop Cop Style SpaceAroundKeyword accept_left_square_bracket?":{"type":"method","name":"accept_left_square_bracket?","children":[],"call":["ACCEPT_LEFT_SQUARE_BRACKET  include? ","range source "]}," RuboCop Cop Style RedundantParentheses call_chain_starts_with_int?":{"type":"method","name":"call_chain_starts_with_int?","children":[],"call":["parent method_name == ","parent method_name ","parent send_type? ","begin_node parent ","recv int_type? "," first_part_of_call_chain ","parent method? ","begin_node parent  method_name == ","begin_node parent  method_name ","begin_node parent  send_type? ","begin_node begin_node parent  "," first_part_of_call_chain  int_type? ","begin_node parent  method? "]}," RuboCop Cop Style OneLineConditional keyword_with_changed_precedence?":{"type":"method","name":"keyword_with_changed_precedence?","children":[],"call":[" parenthesized_call? ! "," parenthesized_call? ","node keyword_not? ","node keyword? ","node parenthesized_call? ! ","node parenthesized_call? ","node prefix_not? ","node arguments? ","node respond_to? "]}," RuboCop Cop Style OneLineConditional method_call_with_changed_precedence?":{"type":"method","name":"method_call_with_changed_precedence?","children":[],"call":[" operator? ! "," operator? ","node method_name "," parenthesized_call? ","node method_args empty? ","node method_args ","node send_type? ","node arguments? ","node parenthesized_call? ","node operator_method? ! ","node operator_method? "]}," RuboCop Cop Style OneLineConditional requires_parentheses?":{"type":"method","name":"requires_parentheses?","children":[],"call":[" keyword_with_changed_precedence? "," method_call_with_changed_precedence? ","node assignment? ","(sym :and) include? ","node type "]}," RuboCop Cop Style OneLineConditional expr_replacement":{"type":"method","name":"expr_replacement","children":[],"call":["node source "," requires_parentheses? ","node nil? "]}," RuboCop Cop Style OneLineConditional ternary":{"type":"method","name":"ternary","children":[],"call":["(begin\n  (send nil :expr_replacement\n    (lvar :cond))) + "," expr_replacement "]}," RuboCop Cop Style IfUnlessModifierOfIfUnless on_if":{"type":"method","name":"on_if","children":[],"call":[" add_offense "," message ","node loc keyword source ","node loc keyword ","node loc ","body type == ","body type "," if_node_parts "," modifier_if? ","body if_type? "," format ","node keyword ","node body if_type? ","node body ","node modifier_form? ","corrector replace ","(begin\n  (lvar :keyword)) chop ","node if_branch source ","node if_branch ","node condition source ","node condition ","node if? "]}," RuboCop Cop Style IfUnlessModifierOfIfUnless message":{"type":"method","name":"message","children":[],"call":[" format "]}," RuboCop Cop Style IfUnlessModifier nested_conditional?":{"type":"method","name":"nested_conditional?","children":[],"call":["child type == ","child type ","node children [] any? ","node children [] ","node children ","node children [] compact any? ","node children [] compact "]}," RuboCop Cop Style FileName other_message":{"type":"method","name":"other_message","children":[],"call":[" format "," regex "]}," RuboCop Cop Style FileName no_definition_message":{"type":"method","name":"no_definition_message","children":[],"call":[" format "," to_namespace join "," to_namespace "]}," RuboCop Cop Style FileName first_line":{"type":"method","name":"first_line","children":[],"call":[" processed_source lines first "," processed_source lines "," processed_source "]}," RuboCop Cop Style FileName for_bad_filename":{"type":"method","name":"for_bad_filename","children":[],"call":[" source_range "," processed_source buffer "," processed_source "," other_message "," shebang? "," first_line "," cop_config [] "," cop_config "," no_definition_message "," find_class_or_module "," to_namespace "," processed_source ast "," expect_matching_definition? "," filename_good? ","File  basename "," ignore_executable_scripts? ","File  File  basename  "]}," RuboCop Cop Style CaseCorrector move_assignment_inside_condition":{"type":"method","name":"move_assignment_inside_condition","children":[],"call":["corrector remove_preceding ","branch parent loc keyword column - ","branch parent loc keyword column ","branch parent loc keyword ","branch parent loc ","branch parent "," remove_whitespace_in_branches ","corrector insert_before ","assignment source ","branch_assignment loc expression ","branch_assignment loc "," tail ","(splat\n  (lvar :when_branches)) each ","corrector remove "," lambda "," assignment "," expand_when_branches ","node loc expression column ","node loc expression ","node loc "," move_branch_inside_condition "," extract_branches flatten each "," extract_branches flatten "," extract_branches ","node source_range column ","node source_range ","branch parent loc keyword node loc expression column  - ","branch parent loc keyword node source_range column  - ","branch parent loc keyword node loc expression column  ","branch parent loc keyword node source_range column  "," assignment  source "," tail  loc expression ","branch_ assignment  loc expression "," tail  loc ","branch_ assignment  loc ","(splat\n  (lvar : expand_when_branches )) each ","  assignment  "," expand_ expand_when_branches  ","node loc expression node loc expression column  ","node loc expression node source_range column  ","node source_range node loc expression column  ","node source_range node source_range column  "]}," RuboCop Cop Style IfCorrector move_assignment_inside_condition":{"type":"method","name":"move_assignment_inside_condition","children":[],"call":["corrector remove_preceding ","branch parent loc else column - ","branch parent loc else column ","branch parent loc else ","branch parent loc ","branch parent "," remove_whitespace_in_branches ","corrector insert_before ","assignment source ","branch_assignment loc expression ","branch_assignment loc "," tail ","(lvar :if_branch) each ","corrector remove "," lambda "," assignment "," expand_elses ","node loc expression column ","node loc expression ","node loc "," move_branch_inside_condition "," extract_branches flatten each "," extract_branches flatten "," extract_branches ","condition branches flatten each ","condition branches flatten ","condition branches ","node source_range column ","node source_range ","branch parent loc else node loc expression column  - ","branch parent loc else node source_range column  - ","branch parent loc else node loc expression column  ","branch parent loc else node source_range column  "," assignment  source "," tail  loc expression ","branch_ assignment  loc expression "," tail  loc ","branch_ assignment  loc ","  assignment  ","node loc expression node loc expression column  ","node loc expression node source_range column  ","node source_range node loc expression column  ","node source_range node source_range column  "]}," RuboCop Cop Style TernaryCorrector move_assignment_inside_condition":{"type":"method","name":"move_assignment_inside_condition","children":[],"call":["corrector insert_before ","assignment source ","else_branch loc expression ","else_branch loc ","if_branch loc expression ","if_branch loc ","corrector remove ","rhs loc end ","rhs loc ","rhs loc begin ","rhs begin_type? "," lambda "," assignment ","rhs children size == ","rhs children size ","rhs children "," move_branch_inside_condition "," remove_parentheses ","Util  parentheses? "," extract_branches "," assignment  source ","  assignment  "]}," RuboCop Cop Style ConditionalCorrectorHelper correct_branches":{"type":"method","name":"correct_branches","children":[],"call":["corrector replace ","assignment source ","branch source_range ","branches each "]}," RuboCop Cop Style ConditionalCorrectorHelper assignment":{"type":"method","name":"assignment","children":[],"call":["Parser Source Range  new ","condition loc expression begin_pos ","condition loc expression ","condition loc ","node loc expression begin_pos ","node loc expression ","node loc ","node loc expression source_buffer ","condition source_range begin_pos ","condition source_range ","node source_range begin_pos ","node source_range ","node source_range source_buffer "]}," RuboCop Cop Style ConditionalCorrectorHelper remove_whitespace_in_branches":{"type":"method","name":"remove_whitespace_in_branches","children":[],"call":["corrector remove_preceding ","loc column - ","loc column ","(send\n  (send\n    (lvar :condition) :loc) :else) each ","condition loc end ","condition loc ","condition loc else ","corrector remove ","white_space source strip empty? ","white_space source strip ","white_space source ","Parser Source Range  new ","child_expression begin_pos ","child_expression begin_pos - ","child loc expression column - - ","child loc expression column - ","child loc expression column ","child loc expression ","child loc ","child_expression source_buffer ","branch each_node "," white_space_range ","child source_range nil? ","child source_range ","Parser Source Range  new  source strip empty? "," white_space_range  source strip empty? ","Parser Source Range  new  source strip "," white_space_range  source strip ","Parser Source Range  new  source "," white_space_range  source ","child loc expression  begin_pos ","child loc expression  begin_pos - ","child loc expression  source_buffer "," Parser Source Range  new _range ","  white_space_range _range "]}," RuboCop Cop Style ConditionalAssignment move_assignment_inside_condition":{"type":"method","name":"move_assignment_inside_condition","children":[],"call":["IfCorrector  move_assignment_inside_condition ","condition if_type? ","CaseCorrector  move_assignment_inside_condition ","condition case_type? ","TernaryCorrector  move_assignment_inside_condition "," ternary_op? ","condition children [] ","condition children "," ternary? "," ternary_condition? ","condition case_match_type? "]}," RuboCop Cop Style ConditionalAssignment move_assignment_outside_condition":{"type":"method","name":"move_assignment_outside_condition","children":[],"call":["CaseCorrector  correct ","UnlessCorrector  correct ","node loc keyword is? ","node loc keyword ","node loc ","IfCorrector  correct ","TernaryCorrector  correct "," ternary_op? "," ternary? ","node unless? ","node if? ","node ternary? ","node case_type? ","node case_match_type? "]}," RuboCop Cop Style ConditionalAssignment check_assignment_to_condition":{"type":"method","name":"check_assignment_to_condition","children":[],"call":[" add_offense ","(splat\n  (lvar :branches)) any? "," single_line_conditions_only? ","CONDITION_TYPES  include? ","assignment type ","assignment children size == ","assignment children size ","assignment children ","assignment begin_type? ","assignment respond_to? "," ignore_node "," style == "," style "," condition? "," assignment_node "," allowed_ternary? "," allowed_single_line? "," assignment_rhs_exist? "," candidate_condition? "," candidate_node? "," autocorrect "," assignment_node  type "," assignment_node  children size == "," assignment_node  children size "," assignment_node  children "," assignment_node  begin_type? "," assignment_node  respond_to? ","  assignment_node _node ","  assignment_node _rhs_exist? "]}," RuboCop Cop Style ConditionalAssignment on_send":{"type":"method","name":"on_send","children":[],"call":[" check_assignment_to_condition "," assignment_type? "," style == "," style "," assignment_rhs_exist? "]}," RuboCop Cop Style CaseIndentation replacement":{"type":"method","name":"replacement","children":[],"call":["  * "," configured_indentation_width "," cop_config [] "," cop_config "," base_column "," cop_config [] == "," parameter_name ","node each_ancestor first ","node each_ancestor "," indentation_width "," style_parameter_name "," base_ base_column  "]}," RuboCop Cop Style CaseIndentation whitespace_range":{"type":"method","name":"whitespace_range","children":[],"call":["Parser Source Range  new ","begin_pos - ","node source_range source_buffer ","node source_range ","node loc keyword begin_pos ","node loc keyword ","node loc ","node location keyword column ","node location keyword ","node location "," range_between ","node loc keyword begin_pos  - ","node loc keyword node loc keyword begin_pos  "]}," RuboCop Cop Performance TimesMap autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","send_node loc expression ","send_node loc "," lambda ","(send\n  (lvar :args) :map) join ","arg source ","args map ","count source ","node each_descendant first ","node each_descendant ","node send_type? ","(send\n  (send\n    (lvar :send_node) :arguments) :map) join ","send_node arguments map ","send_node arguments ","send_node receiver ","map_or_collect loc expression ","map_or_collect loc ","(send\n  (send\n    (lvar :map_or_collect) :arguments) :map) join ","map_or_collect arguments map ","map_or_collect arguments "," times_map_call ","node each_descendant first  loc expression ","node each_descendant first  loc ","(send\n  (send\n    (lvar :node each_descendant first ) :arguments) :map) join ","node each_descendant first  arguments map ","node each_descendant first  arguments ","node each_descendant first  receiver "]}," RuboCop Cop Performance Detect should_run?":{"type":"method","name":"should_run?","children":[],"call":["(or\n  (send\n    (send nil :cop_config) :[]\n    (send\n      (str \"SafeMode\") :freeze))\n  (and\n    (send\n      (send nil :config) :[]\n      (send\n        (str \"Rails\") :freeze))\n    (send\n      (send\n        (send nil :config) :[]\n        (send\n          (str \"Rails\") :freeze)) :[]\n      (send\n        (str \"Enabled\") :freeze)))) ! "," config [] [] ","Enabled freeze "," config [] ","Rails freeze "," config "," cop_config [] ","SafeMode freeze "," cop_config "]}," RuboCop Cop Performance Count should_run?":{"type":"method","name":"should_run?","children":[],"call":["(or\n  (send\n    (send nil :cop_config) :[]\n    (send\n      (str \"SafeMode\") :freeze))\n  (and\n    (send\n      (send nil :config) :[]\n      (send\n        (str \"Rails\") :freeze))\n    (send\n      (send\n        (send nil :config) :[]\n        (send\n          (str \"Rails\") :freeze)) :[]\n      (send\n        (str \"Enabled\") :freeze)))) ! "," config [] [] ","Enabled freeze "," config [] ","Rails freeze "," config "," cop_config [] ","SafeMode freeze "," cop_config "]}," RuboCop Cop StatementModifier length_in_modifier_form":{"type":"method","name":"length_in_modifier_form","children":[],"call":["indentation + + + + + ","indentation + + + + ","indentation + + + ","indentation + + ","indentation + ","cond source_range size ","cond source_range ","node loc keyword size ","node loc keyword ","node loc ","node loc keyword column ","node loc keyword column * "," indentation_multiplier ","keyword size ","keyword column * ","keyword column "," line_length ","cond source ","keyword source ","node body source ","node body ","keyword source_line [] ","keyword source_line "," to_modifier_form ","end_element source_line [] ","end_element last_column ","end_element source_line ","keyword_element source_line [] ","keyword_element column ","keyword_element source_line ","node loc end "," code_after ","node loc keyword column  + + + + + ","node loc keyword column *  + + + + + ","keyword column *  + + + + + ","keyword source_line []  + + + + + ","node loc keyword column  + + + + ","node loc keyword column *  + + + + ","keyword column *  + + + + ","keyword source_line []  + + + + ","node loc keyword column  + + + ","node loc keyword column *  + + + ","keyword column *  + + + ","keyword source_line []  + + + ","node loc keyword column  + + ","node loc keyword column *  + + ","keyword column *  + + ","keyword source_line []  + + ","node loc keyword column  + ","node loc keyword column *  + ","keyword column *  + ","keyword source_line []  + ","node loc node loc keyword  size ","node loc node loc keyword  ","node loc node loc keyword  column ","node loc node loc keyword  column * "," node loc keyword column _multiplier "," node loc keyword column * _multiplier "," keyword column * _multiplier "," keyword source_line [] _multiplier ","node loc keyword  size ","node loc keyword  column * ","node loc keyword  column ","node loc keyword  source ","node loc keyword  source_line [] ","node loc keyword  source_line ","node loc end  source_line [] ","node loc end  last_column ","node loc end  source_line ","node loc keyword _element source_line [] ","node loc keyword _element column ","node loc keyword _element source_line "," end_element source_line []  "]}," RuboCop Cop Lint LiteralInInterpolation prints_as_self?":{"type":"method","name":"prints_as_self?","children":[],"call":[" prints_as_self? ","node children all? ","node children ","COMPOSITE  include? ","node type ","node basic_literal? "]}," RuboCop ConfigLoaderResolver resolve_inheritance_from_gems":{"type":"method","name":"resolve_inheritance_from_gems","children":[],"call":["hash [] unshift "," gem_config_path ","hash [] ","hash []= "," Array "," raise ","gem_name == ","(or\n  (lvar :gems)\n  (hash)) each_pair "," Array reverse each "," Array reverse "," Array reverse_each ","hash delete ","(or\n  (lvar :hash delete )\n  (hash)) each_pair "]}," RuboCop ConfigLoaderResolver resolve_inheritance":{"type":"method","name":"resolve_inheritance","children":[],"call":["hash []= "," merge ","hash [] ","hash key? ","v is_a? ","base_config each "," base_configs reverse_each "," base_configs "," determine_inherit_mode ","inherited_files [] "," base_configs reverse each_with_index "," base_configs reverse "," Array "," override_department_setting_for_cops "," override_enabled_for_disabled_departments "," fix_include_paths ","base_config loaded_path ","v key? "," base_configs each_with_index reverse_each "," base_configs each_with_index "," merge  is_a? "," base_configs re merge erse_each "," Array  [] "," base_configs re merge erse each_with_index "," base_configs re merge erse "," o merge erride_department_setting_for_cops "," o merge erride_enabled_for_disabled_departments "," merge  key? "," base_configs each_with_index re merge erse_each "]}," RuboCop ConfigLoaderResolver resolve_requires":{"type":"method","name":"resolve_requires","children":[],"call":[" require ","File  join ","r start_with? "," Array each "," Array ","hash delete ","File  dirname ","@required_features << ","feature start_with? ","hash delete tap ","FeatureLoader  load "]}," RuboCop Config for_all_cops":{"type":"method","name":"for_all_cops","children":[],"call":[" [] "]}," RuboCop Node Builder string_value":{"type":"method","name":"string_value","children":[],"call":[" value "]}," Rubocop Cop Syntax inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","warning capitalize ","line_no to_i ","line match captures ","line match ","stderr each_line ","Open3  capture3 ","source join "," process_line ","line =~ ","Bundler  with_clean_env "]}," Rubocop Cop CollectionMethods inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","PREFERRED_METHODS  [] ","m [] [] lineno ","m [] [] ","m [] ","s drop each_slice ","s drop "," each "]}," Rubocop CLI cops_on_duty":{"type":"method","name":"cops_on_duty","children":[],"call":["cops_on_duty << ","cop_config [] ","cop_config nil? ","config [] ","cop_klass name split last ","cop_klass name split ","cop_klass name ","Cop Cop  all each ","Cop Cop  all ","config []  [] ","config []  nil? "]}," Rubocop Cop AvoidPerlisms inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","PREFERRED_VARS  [] ","s [] lineno ","s [] "," each "]}," Rubocop Cop AvoidPerlBackrefs inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","s [] lineno ","s [] "," each ","s [] s [] lineno  "]}," Rubocop Cop AvoidFor inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","s [] [] [] lineno ","s [] [] [] ","s [] [] ","s [] "," each ","t pos lineno ","t pos "," each_keyword "]}," Rubocop Cop AvoidClassVars inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","s [] lineno ","s [] "," each ","s [] s [] lineno  "]}," Rubocop Cop Syntax process_line":{"type":"method","name":"process_line","children":[],"call":["message capitalize ","line_no to_i ","message sub capitalize ","message sub ","message start_with? ","line match captures ","line match "]}," Rubocop Cop SymbolSnakeCase inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","s [] [] [] lineno ","s [] [] [] ","s [] [] ","s [] ","symbol_ident =~ ","OPERATORS  include? "," each ","symbol_type == "," check_for_hash_labels "," check_for_symbols ","s [] [] []  =~ ","s [] [] []  == "]}," RuboCop OptionsValidator incompatible_options":{"type":"method","name":"incompatible_options","children":[],"call":["@options keys & ","@options keys "]}," RuboCop OptionsValidator no_offense_counts_without_auto_gen_config?":{"type":"method","name":"no_offense_counts_without_auto_gen_config?","children":[],"call":["@options key? ! ","@options key? "]}," RuboCop OptionsValidator boolean_or_empty_cache?":{"type":"method","name":"boolean_or_empty_cache?","children":[],"call":["(str \"true\") include? ","@options [] ","@options key? ! ","@options key? "]}," RuboCop OptionsValidator except_syntax?":{"type":"method","name":"except_syntax?","children":[],"call":["(send\n  (send\n    (ivar :@options) :[]\n    (sym :except)) :&\n  (array\n    (str \"Lint/Syntax\")\n    (str \"Syntax\"))) any? ","@options [] & ","@options [] ","@options key? "]}," RuboCop OptionsValidator only_includes_unneeded_disable?":{"type":"method","name":"only_includes_unneeded_disable?","children":[],"call":["(send\n  (send\n    (ivar :@options) :[]\n    (sym :only)) :&\n  (array\n    (str \"Lint/UnneededDisable\")\n    (str \"UnneededDisable\"))) any? ","@options [] & ","@options [] ","@options key? ","(send\n  (send\n    (ivar :@options) :[]\n    (sym :only)) :&\n  (array\n    (str \"Lint/UnneededCopDisableDirective\")\n    (str \"UnneededCopDisableDirective\"))) any? "]}," RuboCop Options args_from_env":{"type":"method","name":"args_from_env","children":[],"call":["Shellwords  split ","ENV  fetch "]}," RuboCop Options args_from_file":{"type":"method","name":"args_from_file","children":[],"call":["IO  readlines map ","IO  readlines ","File  exist? ","File  directory? ! ","File  directory? ","File  read shellsplit ","File  read "]}," RuboCop Formatter ClangStyleFormatter report_highlighted_area":{"type":"method","name":"report_highlighted_area","children":[],"call":[" output puts ","^ * ","highlighted_area size ","  * ","highlighted_area begin_pos "," output ","Unicode DisplayWidth  of ","highlighted_area source ","highlighted_area source_buffer slice ","highlighted_area source_buffer "]}," RuboCop Formatter ClangStyleFormatter report_line":{"type":"method","name":"report_line","children":[],"call":[" output puts "," output ","location first_line == ","location last_line ","location first_line ","location source_line "," yellow ","location single_line? ","location location source_line  "]}," RuboCop Formatter ClangStyleFormatter valid_line?":{"type":"method","name":"valid_line?","children":[],"call":["offense location source_line blank? ! ","offense location source_line blank? ","offense location source_line ","offense location "]}," RuboCop Formatter ClangStyleFormatter report_offense":{"type":"method","name":"report_offense","children":[],"call":[" report_highlighted_area ","offense highlighted_area "," report_line ","offense location "," valid_line? "," output printf "," message "," colored_severity_code ","offense real_column ","offense line "," cyan "," smart_path "," output "]}," RuboCop Cop Style WordArray smallest_percent_size":{"type":"method","name":"smallest_percent_size","children":[],"call":["ary_size < ","style == "]}," RuboCop Cop Style WordArray largest_brackets_size":{"type":"method","name":"largest_brackets_size","children":[],"call":["ary_size > ","style == ","Float INFINITY  -@ "," class largest_brackets "," class "," class largest_brackets= "]}," RuboCop Cop Style WordArray percent_syntax?":{"type":"method","name":"percent_syntax?","children":[],"call":["node loc begin source =~ ","node loc begin source ","node loc begin ","node loc "]}," RuboCop Cop Style WordArray check_percent":{"type":"method","name":"check_percent","children":[],"call":[" add_offense "," style == "," style "," style_detected ","array_elems size ","node children ","node values size ","node values ","node children  size "]}," RuboCop Cop Style WordArray check_bracketed":{"type":"method","name":"check_bracketed","children":[],"call":[" add_offense ","array_elems size >= "," min_size ","array_elems size "," style == "," style "," style_detected "," comments_in_array? "," complex_content? ","node children ","node values size >= ","node values size ","node values ","node children  size >= ","node children  size "]}," RuboCop Cop Style TrailingCommaInArguments braces_will_be_removed?":{"type":"method","name":"braces_will_be_removed?","children":[],"call":["args [] hash_type? ! ","args [] hash_type? ","args [] ","args size == ","args size ","brace_style == ","brace_config [] ","brace_config [] == "," config for_cop "," config ","args one? ","brace_config fetch ","brace_config []  == "," config for_cop  [] "," config for_cop  [] == "," config for_cop  fetch "]}," RuboCop Cop Style TrailingCommaInArguments hash_with_braces?":{"type":"method","name":"hash_with_braces?","children":[],"call":["node loc begin ","node loc ","node hash_type? "]}," RuboCop Cop Style TrailingCommaInArguments avoid_autocorrect?":{"type":"method","name":"avoid_autocorrect?","children":[],"call":[" braces_will_be_removed? "," hash_with_braces? ","args last ","args last braces? ","args last hash_type? "]}," RuboCop Cop Style SymbolProc non_shortenable_args?":{"type":"method","name":"non_shortenable_args?","children":[],"call":["(sym :blockarg) include? ","block_args children first type ","block_args children first ","block_args children "]}," RuboCop Cop Style SpaceAfterSemicolon space_style_before_rcurly":{"type":"method","name":"space_style_before_rcurly","children":[],"call":["cfg [] "," config for_cop "," config "," config for_cop  [] "]}," RuboCop Cop Style SpaceAfterComma space_style_before_rcurly":{"type":"method","name":"space_style_before_rcurly","children":[],"call":["cfg [] "," config for_cop "," config "," config for_cop  [] "]}," RuboCop Cop Style SpaceAfterColon on_kwoptarg":{"type":"method","name":"on_kwoptarg","children":[],"call":[" add_offense "," followed_by_space? ","node loc name end resize ","node loc name end ","node loc name ","node loc "]}," RuboCop Cop Style RedundantParentheses only_closing_paren_before_comma?":{"type":"method","name":"only_closing_paren_before_comma?","children":[],"call":["line_range source =~ ","line_range source ","source_buffer line_range ","node loc end line ","node loc end ","node loc ","node source_range source_buffer ","node source_range ","(str \"^\\\\s*\\\\)\\\\s*,\") match? ","source_buffer line_range  source =~ ","source_buffer line_range  source ","source_buffer source_buffer line_range  ","node source_range source_buffer  line_range ","node source_range node source_range source_buffer  "]}," RuboCop Cop Style RedundantParentheses array_element?":{"type":"method","name":"array_element?","children":[],"call":["node parent array_type? ","node parent "]}," RuboCop Cop Style RedundantParentheses hash_element?":{"type":"method","name":"hash_element?","children":[],"call":["node parent pair_type? ","node parent "]}," RuboCop Cop Style RedundantParentheses allowed_array_or_hash_element?":{"type":"method","name":"allowed_array_or_hash_element?","children":[],"call":[" only_closing_paren_before_comma? "," array_element? "," hash_element? "," hash_or_array_element? "]}," RuboCop Cop Style RaiseArgs correction_exploded_to_compact":{"type":"method","name":"correction_exploded_to_compact","children":[],"call":["exception_node const_name ","message_nodes map join ","message_nodes map ","node method_name ","message_nodes first source ","message_nodes first ","node source ","message_nodes size > ","message_nodes size ","node arguments "," requires_parens? ","node parent ","exception_node receiver source ","exception_node receiver ","exception_node source ","node message_nodes first source s "]}," RuboCop Cop Style RaiseArgs correction_compact_to_exploded":{"type":"method","name":"correction_compact_to_exploded","children":[],"call":["message_node source ","exception_node const_name ","node first ","exception_node const_name to_s ","node method_name ","node first_argument ","exception_node source "," requires_parens? ","node parent ","(lvar :exception_node) compact map join ","(lvar :exception_node) compact map ","(lvar :exception_node) compact "]}," RuboCop Cop Style RaiseArgs autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node source_range "," lambda "," correction_compact_to_exploded "," correction_exploded_to_compact "," style == "," style ","node method_name ","node first_argument ","node arguments "]}," RuboCop Cop Style NestedParenthesizedCalls autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector insert_after ","corrector replace "," lambda ","first_arg_with_space begin resize ","first_arg_with_space begin "," range_with_surrounding_space ","args last source_range ","args last ","args first source_range ","args first "," range_with_surrounding_space begin resize "," range_with_surrounding_space begin ","nested last_argument source_range ","nested last_argument ","nested first_argument source_range ","nested first_argument ","first_arg begin "," range_with_surrounding_space  begin resize ","args first source_range _with_space begin resize ","nested first_argument source_range _with_space begin resize "," range_with_surrounding_space  begin ","args first source_range _with_space begin ","nested first_argument source_range _with_space begin ","nested args last source_range ument source_range ","nested nested last_argument source_range ument source_range ","nested args last source_range ument ","nested nested last_argument source_range ument ","nested args first source_range ument source_range ","nested nested first_argument source_range ument source_range ","nested args first source_range ument ","nested nested first_argument source_range ument ","args first source_range  begin ","nested first_argument source_range  begin "]}," RuboCop Cop Style Lambda autocorrect_method_to_literal":{"type":"method","name":"autocorrect_method_to_literal","children":[],"call":["corrector remove ","corrector insert_after ","block_method source_range ","node loc begin end join ","args loc end ","args loc ","node loc begin end ","node loc begin ","node loc "," lambda_arg_string ","args children empty? ","args children ","corrector replace "," arguments_with_whitespace ","node send_node source_range ","node send_node ","node arguments ","node arguments? "]}," RuboCop Cop Style Lambda autocorrect_literal_to_method":{"type":"method","name":"autocorrect_literal_to_method","children":[],"call":["corrector insert_after ","node loc begin ","node loc "," lambda_arg_string ","args children empty? ","args children ","corrector remove ","args source_range ","corrector replace ","block_method source_range ","corrector insert_before "," needs_whitespace? "," remove_unparenthesized_whitespaces "," remove_unparenthesized_whitespace "]}," RuboCop Cop Style Lambda message_line_modifier":{"type":"method","name":"message_line_modifier","children":[],"call":["node multiline? "," style "]}," RuboCop Cop Style Lambda message":{"type":"method","name":"message","children":[],"call":[" format "," message_line_modifier ","selector == "]}," RuboCop Cop Style Lambda offending_selector?":{"type":"method","name":"offending_selector?","children":[],"call":["selector == ","OFFENDING_SELECTORS  [] [] [] ","OFFENDING_SELECTORS  [] [] "," style ","OFFENDING_SELECTORS  [] ","node multiline? "]}," RuboCop Cop Style Lambda check":{"type":"method","name":"check","children":[],"call":[" add_offense "," message ","block_method source_range "," offending_selector? ","block_method source "," offending_block_method source ? "]}," RuboCop Cop Style IndentationWidth offense":{"type":"method","name":"offense","children":[],"call":[" add_offense "," format "," configured_indentation_width "," offending_range ","style == "," other_offense_in_same_range? "," autocorrect? ","body_node children first ","body_node children "," parentheses? ! "," parentheses? ","body_node type == ","body_node type ","body_node begin_type? ","body_node children first  children first ","body_node children first  children ","body_node children first  type == ","body_node children first  type ","body_node children first  begin_type? "]}," RuboCop Cop Style GuardClause any_single_line_control_flow_exit?":{"type":"method","name":"any_single_line_control_flow_exit?","children":[],"call":[" single_line_control_flow_exit? "]}," RuboCop Cop Style GuardClause accept_form?":{"type":"method","name":"accept_form?","children":[],"call":["cond multiline? "," elsif? "," ternary? "," modifier_if? "]}," RuboCop Cop Style ExtraSpacing following_line":{"type":"method","name":"following_line","children":[],"call":[" processed_source lines [] ","token pos line ","token pos "," processed_source lines "," processed_source "]}," RuboCop Cop Style ExtraSpacing preceding_line":{"type":"method","name":"preceding_line","children":[],"call":[" processed_source lines [] ","token pos line - ","token pos line ","token pos "," processed_source lines "," processed_source "]}," RuboCop Cop Style ExtraSpacing should_aligned_with_preceding_line?":{"type":"method","name":"should_aligned_with_preceding_line?","children":[],"call":["@asgn_lines include? ","token pos line - ","token pos line ","token pos "]}," RuboCop Cop Style EmptyCaseCondition correct_multiple_alternative_whens":{"type":"method","name":"correct_multiple_alternative_whens","children":[],"call":["corrector replace ","children map join ","children map ","Parser Source Range  new ","last loc expression end_pos ","last loc expression ","last loc ","first loc expression begin_pos ","first loc expression ","first loc ","when_node loc expression source_buffer ","when_node loc expression ","when_node loc ","children last ","children first ","children size > ","children size ","when_node children ","when_nodes each "," range_between ","children last  loc expression end_pos ","children last  loc expression ","children last  loc ","children first  loc expression begin_pos ","children first  loc expression ","children first  loc ","children children last  ","children children first  "," Parser Source Range  new _between ","  range_between _between "]}," RuboCop Cop Style EmptyCaseCondition correct_case_whens":{"type":"method","name":"correct_case_whens","children":[],"call":["corrector replace ","when_node loc keyword ","when_node loc ","when_nodes drop each ","when_nodes drop ","case_node loc keyword join ","when_nodes first loc keyword ","when_nodes first loc ","when_nodes first ","case_node loc keyword ","case_node loc "]}," RuboCop Cop Style EmptyCaseCondition autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" correct_multiple_alternative_whens "," correct_case_whens "," lambda "," correct_when_conditions "," correct_case_when ","case_node when_branches ","case_node case_node when_branches  "]}," RuboCop Cop Style EmptyCaseCondition on_case":{"type":"method","name":"on_case","children":[],"call":[" add_offense ","condition_node nil? ","case_node children first ","case_node children ","case_node condition ","else_branch each_descendant any? ","else_branch each_descendant ","else_branch return_type? ","case_node else_branch ","when_branch each_descendant any? ","when_branch each_descendant ","case_node when_branches any? ","case_node when_branches ","body each_descendant any? ","body each_descendant ","body return_type? ","branch_bodies any? ","(splat\n  (send\n    (send\n      (lvar :case_node) :when_branches) :map\n    (block-pass\n      (sym :body)))) compact ","case_node when_branches map "," autocorrect ","case_node loc keyword ","case_node loc ","NOT_SUPPORTED_PARENT_TYPES  include? ","case_node parent ","case_node children first  nil? ","case_node else_branch  each_descendant any? ","case_node else_branch  each_descendant ","case_node else_branch  return_type? ","case_node case_node else_branch  ","(splat\n  (send\n    (send\n      (lvar :case_node) :when_branches) :map\n    (block-pass\n      (sym :body)))) compact  any? "]}," RuboCop Cop Style IfCorrector extract_branches":{"type":"method","name":"extract_branches","children":[],"call":[" tail ","elsif_branches map! "," expand_elses "]}," RuboCop Cop Style AndOr whitespace_before_arg":{"type":"method","name":"whitespace_before_arg","children":[],"call":["Parser Source Range  new ","node source =~ ","node source ","node loc selector end_pos ","node loc selector ","node loc ","node source_range source_buffer ","node source_range "," range_between ","(str \"\\\\?\\\\S\") match? "]}," RuboCop Cop Style AndOr correct_not":{"type":"method","name":"correct_not","children":[],"call":[" raise "," correct_other ","node keyword_not? "," correct_send ","receiver send_type? ","node loc selector source == ","node loc selector source ","node loc selector ","node loc ","node keyword_bang? ","node prefix_not? ","node prefix_bang? "]}," RuboCop Cop Rails UniqBeforePluck autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector insert_before ","receiver loc dot begin ","receiver loc dot ","receiver loc ","corrector remove ","Parser Source Range  new ","node loc selector end_pos ","node loc selector ","node loc ","node loc expression source_buffer ","node loc expression "," lambda ","node children first ","node children ","node loc dot begin_pos ","node loc dot ","node source rindex ","node source ","lines last strip == ","lines last strip ","lines last ","node source split ","send_pluck loc dot begin ","send_pluck loc dot ","send_pluck loc "," dot_method_with_whitespace ","node receiver loc dot begin ","node receiver loc dot ","node receiver loc ","node receiver ","node method_name ","node children first  loc dot begin ","node children first  loc dot ","node children first  loc ","node source split  last strip == ","node source split  last strip ","node source split  last "," dot_node method_name _with_whitespace ","node node children first  loc dot begin ","node node children first  loc dot ","node node children first  loc ","node node children first  ","node node method_name _name "]}," RuboCop Cop Rails UniqBeforePluck on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","receiver children [] == ","receiver children [] ","receiver children ","receiver send_type? ","receiver nil? ! ","receiver nil? ","method_name == "," format "," aggressive_node_match "," conservative_node_match "," mode == "," mode "," style == "," style "," aggressive_node_match _name == "," conservative_node_match _name == "]}," RuboCop Cop Performance StringReplacement offense":{"type":"method","name":"offense","children":[],"call":[" add_offense "," range "," message "," interpret_string_escapes "," regex? "," first_source ","first_param str_type? ","  message  ","  interpret_string_escapes  "]}," RuboCop Cop Performance StringReplacement accept_first_param?":{"type":"method","name":"accept_first_param?","children":[],"call":["first_source length != ","first_source length "," interpret_string_escapes ","first_source =~ "," regex? ","first_source nil? "," first_source ","DETERMINISTIC_TYPES  include? ","first_param type ","first_param str_type? "," interpret_string_escapes  length != "," interpret_string_escapes  length "," interpret_string_escapes  =~ "," interpret_string_escapes  nil? ","  interpret_string_escapes  "]}," RuboCop Cop Performance StringReplacement accept_second_param?":{"type":"method","name":"accept_second_param?","children":[],"call":["second_source length > ","second_source length "," string? "]}," RuboCop Cop Performance RedundantMerge value_used_inside_each_with_object?":{"type":"method","name":"value_used_inside_each_with_object?","children":[],"call":["receiver loc name source == ","second_arg loc name source ","second_arg loc name ","second_arg loc ","receiver loc name source ","receiver loc name ","receiver loc ","second_arg nil? "," each_with_object_node ","parent parent ","parent begin_type? ","node parent ","receiver lvar_type? ","receiver respond_to? ","receiver send_type? "," each_with_object_node  loc name source "," each_with_object_node  loc name "," each_with_object_node  loc "," each_with_object_node  nil? ","node parent  node parent  ","node parent  begin_type? ","node node parent  "]}," RuboCop Cop Performance RedundantMerge each_redundant_merge":{"type":"method","name":"each_redundant_merge","children":[],"call":["pairs size > "," max_key_value_pairs ","pairs size ","receiver pure? ! ","receiver pure? "," value_used_inside_each_with_object? ! "," value_used_inside_each_with_object? ","node value_used? "," redundant_merge ","EachWithObjectInspector  new value_used? ! ","EachWithObjectInspector  new value_used? ","EachWithObjectInspector  new "," non_redundant_merge? "," redundant_merge_candidate "]}," RuboCop Cop Performance Detect offense":{"type":"method","name":"offense","children":[],"call":[" add_offense "," format "," preferred_method ","second_method == ","receiver loc selector join ","node loc selector ","node loc ","receiver loc selector ","receiver loc "]}," RuboCop Cop Performance Detect accept_first_call?":{"type":"method","name":"accept_first_call?","children":[],"call":[" lazy? ","SELECT_METHODS  include? ","args block_pass_type? ! ","args block_pass_type? ","args nil? ","body nil? "]}," RuboCop Cop Performance Detect accept_second_call?":{"type":"method","name":"accept_second_call?","children":[],"call":["args empty? ! ","args empty? ","DANGEROUS_METHODS  include? ! ","DANGEROUS_METHODS  include? ","receiver ! "]}," RuboCop Cop Performance CaseWhenSplat needs_reorder?":{"type":"method","name":"needs_reorder?","children":[],"call":["(and\n  (lvar :variable)\n  (send\n    (lvar :variable) :array_type?)) ! ","variable array_type? ","condition splat_type? ","conditions any? ","conditions none? ","when_branches [] any? ","when_branches [] ","current_index + ","branch == ","when_branches index ","node parent "," non_splat? ","when_branch conditions any? ","when_branch conditions ","following_branches any? ","when_node parent when_branches [] ","when_node branch_index + ","when_node branch_index ","when_node parent when_branches ","when_node parent ","when_node parent when_branches []  any? "]}," RuboCop Cop Performance CaseWhenSplat new_branch_without_then":{"type":"method","name":"new_branch_without_then","children":[],"call":["node children last source ","node children last ","node children ","  * ","body loc column ","body loc ","node loc column ","node loc ","node body source ","node body "," indent_for "]}," RuboCop Cop Performance CaseWhenSplat new_condition_with_then":{"type":"method","name":"new_condition_with_then","children":[],"call":["node children last source ","node children last ","node children ","  * ","node loc column ","node loc ","node body source ","node body "," indent_for "]}," RuboCop Cop Performance CaseWhenSplat same_line?":{"type":"method","name":"same_line?","children":[],"call":["node loc first_line == ","other loc first_line ","other loc ","node loc first_line ","node loc "]}," RuboCop Cop Performance CaseWhenSplat reorder_condition":{"type":"method","name":"reorder_condition","children":[],"call":["corrector insert_after ","when_branches last source_range ","when_branches last "," new_branch_without_then "," new_condition_with_then "," same_line? ","corrector remove ","Parser Source Range  new ","next_branch source_range begin_pos ","next_branch source_range ","node source_range begin_pos ","node source_range ","when_branches [] ","current_index + ","branch == ","when_branches index ","node parent "," when_branch_range ","when_branches size == ","when_branches size "," reordering_correction ","when_branches one? ","when_node parent when_branches ","when_node parent ","when_branches last source_Parser Source Range  new  ","when_node parent when_branches  last source_range ","when_node parent when_branches  last ","next_branch source_Parser Source Range  new  begin_pos ","when_branches []  source_range begin_pos ","next_branch source_Parser Source Range  new  ","when_branches []  source_range ","node source_Parser Source Range  new  begin_pos ","node source_Parser Source Range  new  ","when_node parent when_branches  [] ","when_node parent when_branches  index ","node node parent  "," when_branch_Parser Source Range  new  ","when_node parent when_branches  size == ","when_node parent when_branches  size "," reordering_ new_branch_without_then  "," reordering_ new_condition_with_then  ","when_node parent when_branches  one? ","when_node node parent  when_branches ","when_node parent when_node parent when_branches  ","when_node node parent  "]}," RuboCop Cop Performance CaseWhenSplat inline_fix_branch":{"type":"method","name":"inline_fix_branch","children":[],"call":["corrector replace ","Parser Source Range  new ","conditions [] loc expression end_pos ","conditions [] loc expression ","conditions [] loc ","conditions [] ","conditions [] loc expression begin_pos ","node loc expression source_buffer ","node loc expression ","node loc "," range_between "," replacement ","when_node conditions ","when_node conditions  [] loc expression end_pos ","when_node conditions  [] loc expression ","when_node conditions  [] loc ","when_node conditions  [] ","when_node conditions  [] loc expression begin_pos "," Parser Source Range  new _between ","  range_between _between ","when_node when_node conditions  "]}," RuboCop Cop TrailingComma avoid_autocorrect?":{"type":"method","name":"avoid_autocorrect?","children":[],"call":[]}," RuboCop Cop MultilineLiteralBraceLayout last_line_heredoc?":{"type":"method","name":"last_line_heredoc?","children":[],"call":[" last_line_heredoc? ","node children any? ","node children ","node children empty? ","node respond_to? ","node loc heredoc_end last_line >= ","parent loc last_line ","parent loc ","node loc heredoc_end last_line ","node loc heredoc_end ","node loc ","node loc respond_to? ","parent last_line "]}," RuboCop Cop MultilineLiteralBraceLayout handle_symmetrical":{"type":"method","name":"handle_symmetrical","children":[],"call":[" add_offense "," class "," closing_brace_on_same_line? "," opening_brace_on_same_line? "]}," RuboCop Cop MultilineLiteralBraceLayout handle_same_line":{"type":"method","name":"handle_same_line","children":[],"call":[" add_offense "," class "," closing_brace_on_same_line? "]}," RuboCop Cop MultilineLiteralBraceLayout handle_new_line":{"type":"method","name":"handle_new_line","children":[],"call":[" add_offense "," class "," closing_brace_on_same_line? "]}," RuboCop Cop MultilineExpressionIndentation regular_method_right_hand_side":{"type":"method","name":"regular_method_right_hand_side","children":[],"call":["dot join ","send_node loc begin ","send_node loc ","dot line == ","send_node loc begin line ","dot line ","selector line ","send_node loc selector ","send_node loc dot ","send_node implicit_call? ","send_node dot? ","send_node loc dot  join ","send_node loc dot  line == ","send_node loc dot  line ","send_node loc selector  line ","send_node loc send_node loc selector  ","send_node loc send_node loc dot  ","send_node send_node loc dot ? "]}," RuboCop Cop IfNode ternary?":{"type":"method","name":"ternary?","children":[],"call":["node loc respond_to? ","node loc "]}," RuboCop Cop Lint UselessArraySplat autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove "," splat_source_range "," lambda "]}," RuboCop Cop Lint UselessArraySplat splat_source_range":{"type":"method","name":"splat_source_range","children":[],"call":["node loc expression begin resize ","node loc expression begin ","node loc expression ","node loc "]}," RuboCop Cop Lint UselessAccessModifier start_of_new_scope?":{"type":"method","name":"start_of_new_scope?","children":[],"call":[" class_or_instance_eval? ","child sclass_type? ","child class_type? ","child module_type? "," instance_eval_or_new_call? "," eval_call? "]}," RuboCop Cop Lint UselessAccessModifier method_definition?":{"type":"method","name":"method_definition?","children":[],"call":[" dynamic_method_definition? "," static_method_definition? "," any_method_definition? "]}," RuboCop Cop Lint UselessAccessModifier check_child_nodes":{"type":"method","name":"check_child_nodes","children":[],"call":[" check_child_nodes ","child defs_type? ! ","child defs_type? "," check_scope "," start_of_new_scope? "," method_definition? "," add_offense "," format ","new_vis == "," access_modifier ","node child_nodes each ","node child_nodes "," check_new_visibility ","child method_name ","child access_modifier? ","child send_type? ","child bare_access_modifier? "," check_send_node "," access_modifier? "," included_block? ","child block_type? "," access_modifier  == "," check_ access_modifier ibility "]}," RuboCop Cop Lint UselessAccessModifier on_sclass":{"type":"method","name":"on_sclass","children":[],"call":[" check_node ","node children [] ","node children "]}," RuboCop Cop Lint UselessAccessModifier on_block":{"type":"method","name":"on_block","children":[],"call":[" check_node ","node children [] ","node children "," class_or_instance_eval? "," instance_eval_or_new_call? "," eval_call? ","node body "," included_block? "]}," RuboCop Cop Lint NestedMethodDefinition ignored_child?":{"type":"method","name":"ignored_child?","children":[],"call":[" class_or_module_or_struct_new_call? "," eval_call? "]}," RuboCop CLI config_lines":{"type":"method","name":"config_lines","children":[],"call":["   + ","cnf to_yaml lines to_a butfirst map ","cnf to_yaml lines to_a butfirst ","cnf to_yaml lines to_a ","cnf to_yaml lines ","cnf to_yaml ","@config_store for for_cop ","@config_store for ","Dir  pwd ","cnf to_yaml lines to_a drop map ","cnf to_yaml lines to_a drop ","@config_store for for_cop  to_yaml lines to_a butfirst map ","@config_store for for_cop  to_yaml lines to_a butfirst ","@config_store for for_cop  to_yaml lines to_a ","@config_store for for_cop  to_yaml lines ","@config_store for for_cop  to_yaml ","@config_store for for_cop  to_yaml lines to_a drop map ","@config_store for for_cop  to_yaml lines to_a drop "]}," RuboCop CLI cops_of_type":{"type":"method","name":"cops_of_type","children":[],"call":["cops with_type sort_by! ","cops with_type "]}," RuboCop CLI selected_cops_of_type":{"type":"method","name":"selected_cops_of_type","children":[],"call":["@options [] include? ","cop cop_name ","@options [] "," cops_of_type select "," cops_of_type "]}," RuboCop CachedData utf8_source_buffer":{"type":"method","name":"utf8_source_buffer","children":[],"call":["source_buffer source= ","Parser Source Buffer  new ","ascii_source dup force_encoding ","ascii_source dup ","Parser Source Buffer  new read source ","Parser Source Buffer  new read ","Parser Source Buffer  new  source= ","ascii_source dup force_encoding _buffer ascii_source dup force_encoding = ","ascii_ascii_source dup force_encoding  dup force_encoding ","Parser Source Buffer  new read source  dup force_encoding ","ascii_ascii_source dup force_encoding  dup ","Parser Source Buffer  new read source  dup ","Parser Source Buffer  new read ascii_source dup force_encoding  "]}," RuboCop Node while_until_value_used?":{"type":"method","name":"while_until_value_used?","children":[],"call":[" sibling_index == "," sibling_index "," sibling_index zero? "]}," RuboCop Node case_if_value_used?":{"type":"method","name":"case_if_value_used?","children":[],"call":[" parent value_used? "," parent "," sibling_index == "," sibling_index "," sibling_index zero? "]}," RuboCop Node for_value_used?":{"type":"method","name":"for_value_used?","children":[],"call":[" parent value_used? "," parent "," sibling_index == "," sibling_index "]}," RuboCop Node begin_value_used?":{"type":"method","name":"begin_value_used?","children":[],"call":[" parent value_used? "," parent "," sibling_index == "," parent children size - "," parent children size "," parent children "," sibling_index "]}," RuboCop StringInterpreter interpret_octal":{"type":"method","name":"interpret_octal","children":[],"call":["(send\n  (send\n    (lvar :escape) :[]\n    (irange\n      (int 1)\n      (int -1))) :to_i\n  (int 8)) pack ","C freeze ","escape [] to_i ","escape [] ","(send\n  (send\n    (lvar :escape) :[]\n    (irange\n      (int 1) nil)) :to_i\n  (int 8)) pack "]}," RuboCop StringInterpreter interpret_hex":{"type":"method","name":"interpret_hex","children":[],"call":["(send\n  (send\n    (lvar :escape) :[]\n    (irange\n      (int 2)\n      (int -1))) :hex) pack ","C freeze ","escape [] hex ","escape [] ","(send\n  (send\n    (lvar :escape) :[]\n    (irange\n      (int 2) nil)) :hex) pack "]}," RuboCop StringInterpreter interpret_unicode":{"type":"method","name":"interpret_unicode","children":[],"call":["(send\n  (send\n    (lvar :escape) :[]\n    (irange\n      (int 2)\n      (int -1))) :hex) pack ","U freeze ","escape [] hex ","escape [] ","escape [] split map pack ","U* freeze ","escape [] split map ","escape [] split ","escape [] == ","{ freeze ","(send\n  (send\n    (lvar :escape) :[]\n    (irange\n      (int 2) nil)) :hex) pack "]}," RuboCop StringInterpreter interpret_string_escape":{"type":"method","name":"interpret_string_escape","children":[],"call":["escape [] "," interpret_octal "," interpret_hex ","x freeze "," interpret_unicode ","u freeze "]}," RuboCop StringInterpreter interpret":{"type":"method","name":"interpret","children":[],"call":[" interpret_string_escape ","STRING_ESCAPES  [] ","string gsub "]}," HostEnvironmentSimulatorHelper in_its_own_process_with":{"type":"method","name":"in_its_own_process_with","children":[],"call":[" warn "," expect to "," be_success "," expect "," Process  wait "," require ","files each ","SimpleCov  pid= ","Process  pid ","SimpleCov  command_name "," Process  fork "," Process  respond_to? ","SimpleCov  coverage_dir "]}," RuboCop Cop Cop highlights":{"type":"method","name":"highlights","children":[],"call":["o location source ","o location "," offenses sort map "," offenses sort "," offenses "]}," RuboCop Cop Cop messages":{"type":"method","name":"messages","children":[],"call":[" offenses sort map "," offenses sort "," offenses "]}," CopHelper _investigate":{"type":"method","name":"_investigate","children":[],"call":["commissioner investigate ","RuboCop Cop Commissioner  new ","instances << ","klass new ","cop join_force? ","RuboCop Cop Force  all each_with_object ","RuboCop Cop Force  all ","team inspect_file ","RuboCop Cop Team  new ","report offenses ","RuboCop Cop Corrector  new ","report correctors first ","report correctors ","team investigate ","report offenses reject "," configuration ","RuboCop Cop Commissioner  new  investigate ","RuboCop Cop Team  new  inspect_file ","team investigate  offenses ","team investigate  correctors first ","team investigate  correctors ","RuboCop Cop Team  new  investigate ","team investigate  offenses reject "]}," CopHelper autocorrect_source":{"type":"method","name":"autocorrect_source","children":[],"call":["corrector rewrite ","RuboCop Cop Corrector  new ","cop corrections ","processed_source buffer "," _investigate "," parse_source ","cop instance_variable_get []= ","cop instance_variable_get "," cop corrections "," cop "," cop instance_variable_get []= "," cop instance_variable_get ","RuboCop Formatter DisabledConfigFormatter  detected_styles= ","RuboCop Formatter DisabledConfigFormatter  config_to_allow_offenses= ","@last_corrector rewrite ","RuboCop Cop Corrector  new  rewrite "," parse_source  buffer ","@last_RuboCop Cop Corrector  new  rewrite "]}," CopHelper autocorrect_source_file":{"type":"method","name":"autocorrect_source_file","children":[],"call":[" autocorrect_source ","Tempfile  open "]}," CopHelper parse_source":{"type":"method","name":"parse_source","children":[],"call":["RuboCop ProcessedSource  new "," ruby_version ","file path ","file rewind ","file write ","file respond_to? ","source join ","source is_a? ","processed_source registry= "," registry ","processed_source config= "," configuration ","file path  path ","file path  rewind ","file path  write ","file path  respond_to? ","source join  join ","source join  is_a? ","processed_source join  registry= ","RuboCop ProcessedSource  new  registry= ","processed_source join  config= ","RuboCop ProcessedSource  new  config= "]}," CopHelper inspect_source":{"type":"method","name":"inspect_source","children":[],"call":[" _investigate "," raise ","processed_source valid_syntax? "," parse_source ","RuboCop Formatter DisabledConfigFormatter  detected_styles= ","RuboCop Formatter DisabledConfigFormatter  config_to_allow_offenses= ","source size == ","source size ","source is_a? "," cop ","processed_source diagnostics map join ","processed_source diagnostics map ","processed_source diagnostics "," parse_source  valid_syntax? "," parse_source  diagnostics map join "," parse_source  diagnostics map "," parse_source  diagnostics "]}," CopHelper inspect_source_file":{"type":"method","name":"inspect_source_file","children":[],"call":[" inspect_source ","Tempfile  open "]}," RuboCop ResultCache symlink_protection_triggered?":{"type":"method","name":"symlink_protection_triggered?","children":[],"call":[" any_symlink? ","@allow_symlinks_in_cache_location ! "]}," RuboCop ResultCache allow_symlinks_in_cache_location?":{"type":"method","name":"allow_symlinks_in_cache_location?","children":[],"call":[]}," RuboCop Formatter DisabledConfigFormatter output_cop":{"type":"method","name":"output_cop","children":[],"call":[" output_cop_config "," output "," output_cop_comments "," class config_to_allow_offenses [] "," class config_to_allow_offenses "," class "," output puts ","output_buffer string ","StringIO  new "," set_max ","StringIO  new  string "]}," RuboCop Formatter DisabledConfigFormatter output_offenses":{"type":"method","name":"output_offenses","children":[],"call":[" output_cop ","@cops_with_offenses sort each ","@cops_with_offenses sort "]}," RuboCop Formatter DisabledConfigFormatter command":{"type":"method","name":"command","children":[],"call":[" format ","@exclude_limit_option to_i ","@options [] "," Integer "," show_timestamp? "," show_offense_counts? "," no_exclude_limit? "," auto_gen_enforced_style? "]}," RuboCop Formatter DisabledConfigFormatter initialize":{"type":"method","name":"initialize","children":[],"call":["Hash  new "]}," RuboCop Cop Util escape_string":{"type":"method","name":"escape_string","children":[],"call":["s gsub! ","string inspect [] tap ","string inspect [] ","string inspect "]}," RuboCop Cop Util needs_escaping?":{"type":"method","name":"needs_escaping?","children":[],"call":[" double_quotes_required? "," escape_string "]}," RuboCop Cop Team investigate":{"type":"method","name":"investigate","children":[],"call":["Investigation  new ","commissioner errors "," block_given? ","commissioner investigate ","Commissioner  new "," forces_for ","cops empty? "," process_errors ","report errors ","processed_source path ","report merge "," investigate_partial "," autocorrect ","on_duty partition "," roundup_relevant_cops ","processed_source file_path "," be_ready ","Commissioner  new  errors ","Commissioner  new  investigate ","report merge  errors "," investigate_partial  errors ","report merge  merge "," investigate_partial  merge "," roundup_relevant_cops  partition "]}," RuboCop Cop Team offenses":{"type":"method","name":"offenses","children":[],"call":["autocorrect offenses concat ","other offenses ","autocorrect offenses "," process_commissioner_errors ","processed_source path ","autocorrect errors merge ","other errors ","autocorrect errors "," investigate "," autocorrect ","processed_source buffer "," cops partition "," cops "," process_errors ","on_duty partition "," roundup_relevant_cops ","processed_source file_path "," investigate  offenses concat "," investigate  offenses "," process_commissioner_autocorrect errors merge  ","autocorrect autocorrect errors merge  merge "," investigate  errors merge ","other autocorrect errors merge  "," investigate  errors ","autocorrect autocorrect errors merge  ","  investigate  "," process_autocorrect errors merge  "," roundup_relevant_cops  partition "]}," RuboCop Cop Style SymbolProc offense":{"type":"method","name":"offense","children":[],"call":[" add_offense "," format ","Parser Source Range  new ","node loc end end_pos ","node loc end ","node loc ","node loc begin begin_pos ","node loc begin ","node source_range source_buffer ","node source_range "," range_between ","node source_Parser Source Range  new  source_buffer ","node source_ range_between  source_buffer ","node source_Parser Source Range  new  ","node source_ range_between  "," Parser Source Range  new _between ","  range_between _between "]}," RuboCop Cop Style SymbolProc resolve_block_method_name":{"type":"method","name":"resolve_block_method_name","children":[],"call":[" super? "]}," RuboCop Cop Style SymbolArray check_percent_array":{"type":"method","name":"check_percent_array","children":[],"call":[" add_offense "," style == "," style "," style_detected "," array_style_detected ","node values size ","node values "]}," RuboCop Cop Style SymbolArray check_bracketed_array":{"type":"method","name":"check_bracketed_array","children":[],"call":[" add_offense "," style == "," style "," style_detected "," symbols_contain_spaces? "," comments_in_array? "," array_style_detected ","node values size ","node values "," below_array_length? "]}," RuboCop Cop Style SymbolArray percent_array?":{"type":"method","name":"percent_array?","children":[],"call":["node loc begin source =~ ","node loc begin source ","node loc begin ","node loc "]}," RuboCop Cop Style StringLiterals accept_child_double_quotes?":{"type":"method","name":"accept_child_double_quotes?","children":[],"call":[" double_quotes_acceptable? ","n str_content ","n dstr_type? ","nodes any? "," double_quotes_required? ","n source "]}," RuboCop Cop Style StringLiterals unexpected_double_quotes?":{"type":"method","name":"unexpected_double_quotes?","children":[],"call":[" style == "," style ","quote == "]}," RuboCop Cop Style StringLiterals unexpected_single_quotes?":{"type":"method","name":"unexpected_single_quotes?","children":[],"call":[" style == "," style ","quote == "]}," RuboCop Cop Style StringLiterals detect_quote_styles":{"type":"method","name":"detect_quote_styles","children":[],"call":["styles map uniq ","styles map ","node loc begin source ","node loc begin ","node loc ","styles all? ","c loc begin ","c loc ","node children map ","node children "]}," RuboCop Cop Style StringLiterals all_string_literals?":{"type":"method","name":"all_string_literals?","children":[],"call":["n dstr_type? ","n str_type? ","nodes all? "]}," RuboCop Cop Style SpaceInsidePercentLiteralDelimiters regex_matches":{"type":"method","name":"regex_matches","children":[],"call":[" each_match_range "," contents_range ","(const nil :BEGIN_REGEX) each "]}," RuboCop Cop Style SpaceInsidePercentLiteralDelimiters add_offenses_for_unnecessary_spaces":{"type":"method","name":"add_offenses_for_unnecessary_spaces","children":[],"call":[" add_offense "," regex_matches ","node single_line? "]}," RuboCop Cop Style SpaceInsidePercentLiteralDelimiters autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove "," regex_matches "," lambda "]}," RuboCop Cop Style SpaceInsidePercentLiteralDelimiters on_xstr":{"type":"method","name":"on_xstr","children":[],"call":[" add_offenses_for_unnecessary_spaces "]}," RuboCop Cop Style SpaceInsidePercentLiteralDelimiters on_percent_literal":{"type":"method","name":"on_percent_literal","children":[],"call":[" add_offenses_for_unnecessary_spaces "]}," RuboCop Cop Style SpaceInsidePercentLiteralDelimiters on_array":{"type":"method","name":"on_array","children":[],"call":[" process "]}," RuboCop Cop Style SpaceInsideHashLiteralBraces expect_space?":{"type":"method","name":"expect_space?","children":[],"call":[" style != "," style "," cop_config [] != "," cop_config [] "," cop_config "," style == ","t2 text == ","t2 text ","t1 text == ","t1 text "," right_brace? "," left_brace? ","t1 type == ","t2 type ","t1 type "]}," RuboCop Cop Style SpaceInsideArrayPercentLiteral each_unnecessary_space_match":{"type":"method","name":"each_unnecessary_space_match","children":[],"call":[" each_match_range "," contents_range "]}," RuboCop Cop Style SpaceInsideArrayPercentLiteral autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," each_unnecessary_space_match "," lambda "]}," RuboCop Cop Style SpaceInsideArrayPercentLiteral on_percent_literal":{"type":"method","name":"on_percent_literal","children":[],"call":[" add_offense "," each_unnecessary_space_match "]}," RuboCop Cop Style SpaceInsideArrayPercentLiteral on_array":{"type":"method","name":"on_array","children":[],"call":[" process "]}," RuboCop Cop Style SpaceBeforeFirstArg expect_params_after_method_name?":{"type":"method","name":"expect_params_after_method_name?","children":[],"call":["(and\n  (send nil :allow_for_alignment?)\n  (send nil :aligned_with_something?\n    (lvar :arg1))) ! "," aligned_with_something? "," allow_for_alignment? ","arg1 line == ","node loc line ","node loc ","arg1 line ","args first source_range ","args first "," parentheses? ","(and\n  (send nil :allow_for_alignment?)\n  (send nil :aligned_with_something?\n    (send\n      (lvar :first_arg) :source_range))) ! ","first_arg source_range "," same_line? ","node first_argument ","node parenthesized? ","(and\n  (send nil :allow_for_alignment?)\n  (send nil :aligned_with_something?\n    (lvar :args first source_range ))) ! ","args first source_range  line == ","args first source_range  line ","(and\n  (send nil :allow_for_alignment?)\n  (send nil :aligned_with_something?\n    (send\n      (lvar :node first_argument ) :source_range))) ! ","node first_argument  source_range ","node node first_argument ument "]}," RuboCop Cop Style SpaceBeforeFirstArg regular_method_call_with_params?":{"type":"method","name":"regular_method_call_with_params?","children":[],"call":["(or\n  (or\n    (send\n      (lvar :args) :empty?)\n    (send nil :operator?\n      (lvar :method_name)))\n  (send\n    (lvar :node) :asgn_method_call?)) ! ","node asgn_method_call? "," operator? ","args empty? "]}," RuboCop Cop Style SpaceAroundOperators operator_with_regular_syntax?":{"type":"method","name":"operator_with_regular_syntax?","children":[],"call":[" operator? ","(sym :[]) include? ! ","(sym :[]) include? ","IRREGULAR_METHODS  include? ! ","IRREGULAR_METHODS  include? ","send_node method_name ","send_node operator_method? "]}," RuboCop Cop Style SpaceAroundKeyword safe_navigation_call?":{"type":"method","name":"safe_navigation_call?","children":[],"call":["range source_buffer source [] start_with? ","range source_buffer source [] ","range source_buffer source ","range source_buffer "]}," RuboCop Cop Style SpaceAfterNot whitespace_after_bang_op?":{"type":"method","name":"whitespace_after_bang_op?","children":[],"call":["receiver loc column - > ","receiver loc column - ","node loc column ","node loc ","receiver loc column ","receiver loc "]}," RuboCop Cop Style RedundantSelf regular_method_call?":{"type":"method","name":"regular_method_call?","children":[],"call":["(or\n  (or\n    (or\n      (send nil :operator?\n        (lvar :method_name))\n      (send nil :keyword?\n        (lvar :method_name)))\n    (send nil :constant_name?\n      (lvar :method_name)))\n  (send\n    (lvar :node) :asgn_method_call?)) ! ","node asgn_method_call? "," constant_name? "," keyword? "," operator? ","(or\n  (or\n    (or\n      (or\n        (send nil :operator?\n          (lvar :method_name))\n        (send nil :keyword?\n          (lvar :method_name)))\n      (send nil :constant_name?\n        (lvar :method_name)))\n    (send\n      (lvar :node) :asgn_method_call?))\n  (send nil :braces_style_call?\n    (lvar :node))) ! "," braces_style_call? ","(or\n  (or\n    (or\n      (or\n        (send nil :operator?\n          (send\n            (lvar :node) :method_name))\n        (send nil :keyword?\n          (send\n            (lvar :node) :method_name)))\n      (send\n        (lvar :node) :camel_case_method?))\n    (send\n      (lvar :node) :setter_method?))\n  (send\n    (lvar :node) :implicit_call?)) ! ","node implicit_call? ","node setter_method? ","node camel_case_method? ","node method_name ","(or\n  (or\n    (or\n      (or\n        (send\n          (lvar :node) :operator_method?)\n        (send nil :keyword?\n          (send\n            (lvar :node) :method_name)))\n      (send\n        (lvar :node) :camel_case_method?))\n    (send\n      (lvar :node) :setter_method?))\n  (send\n    (lvar :node) :implicit_call?)) ! ","node operator_method? ","(or\n  (or\n    (or\n      (or\n        (send\n          (lvar :node) :operator_method?)\n        (send\n          (const nil :KEYWORDS) :include?\n          (send\n            (lvar :node) :method_name)))\n      (send\n        (lvar :node) :camel_case_method?))\n    (send\n      (lvar :node) :setter_method?))\n  (send\n    (lvar :node) :implicit_call?)) ! ","KEYWORDS  include? "]}," RuboCop Cop Style RedundantParentheses check_unary":{"type":"method","name":"check_unary","children":[],"call":[" offense "," method_call_with_redundant_parentheses? ","node send_type? ","node children first ","node children ","node unary_operation? ","begin_node chained? "," suspect_unary? "," method_call_with_redundant_parentheses? ! ","node children first  send_type? ","node children first  children first ","node children first  children ","node children first  unary_operation? ","begin_node children first  chained? "]}," RuboCop Cop Style RedundantParentheses hash_literal_as_first_arg?":{"type":"method","name":"hash_literal_as_first_arg?","children":[],"call":[" parentheses? ! "," parentheses? ","node parent "," first_arg? ","child hash_type? ","node children first ","node children ","node children first hash_type? "," first_argument? ","node children first  hash_type? ","node node children first ren first ","node node children first ren ","node node children first ren first hash_type? "]}," RuboCop Cop Style RedundantParentheses empty_parentheses?":{"type":"method","name":"empty_parentheses?","children":[],"call":["node children empty? ","node children "]}," RuboCop Cop Style PreferredHashMethods proper_method_name":{"type":"method","name":"proper_method_name","children":[],"call":["method_name to_s sub ","method_name to_s "," style == "," style ","method_name to_s delete_prefix "]}," RuboCop Cop Style PreferredHashMethods autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," proper_method_name ","node loc selector source ","node loc selector ","node loc "," lambda "]}," RuboCop Cop Style PreferredHashMethods on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format "," proper_method_name ","PREFERRED_METHODS  include? ","args size == ","args size "," offending_selector? ","node method_name ","node arguments one? ","node arguments ","corrector replace ","node loc selector source ","node loc selector ","node loc "," message ","  message  "]}," RuboCop Cop Style ParallelAssignment RescueCorrector begin_correction":{"type":"method","name":"begin_correction","children":[],"call":[" offset "," node ","rescue_result source "," indentation "," assignment join "," assignment "]}," RuboCop Cop Style ParallelAssignment RescueCorrector def_correction":{"type":"method","name":"def_correction","children":[],"call":["rescue_result source "," offset "," node "]}," RuboCop Cop Style NumericLiteralPrefix format_decimal":{"type":"method","name":"format_decimal","children":[],"call":["source sub "]}," RuboCop Cop Style NumericLiteralPrefix format_binary":{"type":"method","name":"format_binary","children":[],"call":["source sub "]}," RuboCop Cop Style NumericLiteralPrefix format_hex":{"type":"method","name":"format_hex","children":[],"call":["source sub "]}," RuboCop Cop Style NumericLiteralPrefix format_octal_zero_only":{"type":"method","name":"format_octal_zero_only","children":[],"call":["source sub "]}," RuboCop Cop Style NumericLiteralPrefix format_octal":{"type":"method","name":"format_octal","children":[],"call":["source sub "]}," RuboCop Cop Style NumericLiteralPrefix octal_zero_only?":{"type":"method","name":"octal_zero_only?","children":[],"call":[" cop_config [] == "," cop_config [] "," cop_config "]}," RuboCop Cop Style NumericLiteralPrefix literal_type":{"type":"method","name":"literal_type","children":[],"call":[" octal_zero_only? ! "," octal_zero_only? ","literal =~ "," integer_part "," hex_bin_dec_literal_type "," octal_literal_type "," integer_part  =~ "," hex_bin_dec_ integer_part _type "," octal_ integer_part _type "]}," RuboCop Cop Style NumericLiteralPrefix autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," send ","node source ","node source_range "," literal_type "," lambda "," literal_ literal_type  "]}," RuboCop Cop Style NumericLiteralPrefix on_int":{"type":"method","name":"on_int","children":[],"call":[" add_offense "," class const_get ","type upcase "," class "," literal_type ","corrector replace "," send ","node source "," literal_type  upcase "," literal_ literal_type  "]}," RuboCop Cop Style Not correct_without_parens":{"type":"method","name":"correct_without_parens","children":[],"call":["corrector replace "," lambda "]}," RuboCop Cop Style Not correct_with_parens":{"type":"method","name":"correct_with_parens","children":[],"call":["corrector insert_after ","node source_range ","corrector replace "," lambda "]}," RuboCop Cop Style Not correct_opposite_method":{"type":"method","name":"correct_opposite_method","children":[],"call":["corrector replace ","OPPOSITE_METHODS  [] to_s ","OPPOSITE_METHODS  [] ","child method_name ","child loc selector ","child loc ","corrector remove "," lambda "]}," RuboCop Cop Style Not requires_parens?":{"type":"method","name":"requires_parens?","children":[],"call":[" ternary? ","child binary_operation? ","child or_type? ","child and_type? ","child ternary? ","child if_type? ","child send_type? "]}," RuboCop Cop Style Not opposite_method?":{"type":"method","name":"opposite_method?","children":[],"call":["OPPOSITE_METHODS  key? ","child method_name ","child send_type? "]}," RuboCop Cop Style Next reindent_line":{"type":"method","name":"reindent_line","children":[],"call":["corrector insert_before ","  * ","adjustment -@ ","buffer line_range ","adjustment < ","corrector remove_leading ","adjustment > ","@reindented_lines []= ","delta + ","@reindented_lines [] ","adjustment negative? ","adjustment positive? ","delta +  -@ ","delta +  < ","delta +  > ","delta +  negative? ","delta +  positive? "]}," RuboCop Cop Style Next actual_indent":{"type":"method","name":"actual_indent","children":[],"call":["(send\n  (lvar :lines) :map) min ","buffer source_line =~ ","buffer source_line ","lines map "]}," RuboCop Cop Style Next reindentable_lines":{"type":"method","name":"reindentable_lines","children":[],"call":["buffer source_line =~ ","buffer source_line ","lines reject ","lines to_a - "," heredoc_lines ","lines to_a ","node loc end line ","node loc end ","node loc ","node source_range line + ","node source_range line ","node source_range ","node source_range source_buffer ","(str \"\\\\A\\\\s*\\\\z\") match? ","node source_range source_buffer  source_line =~ ","node source_range source_buffer  source_line ","lines to_a -  reject ","lines to_a -  to_a - "," heredoc_lines to_a -  ","lines to_a -  to_a ","node source_range source_node source_range source_buffer  "]}," RuboCop Cop Style Next exit_body_type?":{"type":"method","name":"exit_body_type?","children":[],"call":["EXIT_TYPES  include? ","if_body type ","node if_branch type ","node if_branch "]}," RuboCop Cop Style Next if_without_else?":{"type":"method","name":"if_without_else?","children":[],"call":[" if_else? ! "," if_else? "," ternary? ! "," ternary? ","node if_type? ","node else? ! ","node else? ","node ternary? ! ","node ternary? "]}," RuboCop Cop Style MultilineMethodCallIndentation semantic_alignment_node":{"type":"method","name":"semantic_alignment_node","children":[],"call":["node loc dot line != ","node loc line ","node loc ","node loc dot line ","node loc dot ","node parent ","node receiver "," argument_in_method_call ","node parent  loc dot line != ","node receiver  loc dot line != ","node parent  loc line ","node receiver  loc line ","node parent  loc ","node receiver  loc ","node parent  loc dot line ","node receiver  loc dot line ","node parent  loc dot ","node receiver  loc dot ","node parent  parent ","node receiver  parent ","node parent  receiver ","node receiver  receiver "]}," RuboCop Cop Style MultilineMethodCallIndentation receiver_alignment_base":{"type":"method","name":"receiver_alignment_base","children":[],"call":["node receiver source_range ","node receiver "," semantic_alignment_node ","node parent ","node loc dot ","node loc "," semantic_alignment_node  receiver source_range ","node parent  receiver source_range ","node receiver  receiver source_range "," semantic_alignment_node  receiver ","node parent  receiver ","node receiver  receiver "," semantic_alignment_ semantic_alignment_node  "," semantic_alignment_node parent  "," semantic_alignment_node receiver  "," semantic_alignment_node  parent ","node parent  parent ","node receiver  parent "," semantic_alignment_node  loc dot ","node parent  loc dot ","node receiver  loc dot "," semantic_alignment_node  loc ","node parent  loc ","node receiver  loc "]}," RuboCop Cop Style MultilineMethodCallIndentation extra_indentation":{"type":"method","name":"extra_indentation","children":[],"call":[" configured_indentation_width ","given_style == "]}," RuboCop Cop Style MethodDefParentheses arguments_without_parentheses?":{"type":"method","name":"arguments_without_parentheses?","children":[],"call":[" parentheses? ! "," parentheses? "," arguments? ","node arguments ","node arguments? "]}," RuboCop Cop Style MethodDefParentheses require_parentheses?":{"type":"method","name":"require_parentheses?","children":[],"call":["args multiline? "," style == "," style "]}," RuboCop Cop Style Lambda unparenthesized_literal_args?":{"type":"method","name":"unparenthesized_literal_args?","children":[],"call":[" parentheses? ! "," parentheses? ","args source_range begin ","args source_range "]}," RuboCop Cop Style Lambda remove_unparenthesized_whitespaces":{"type":"method","name":"remove_unparenthesized_whitespaces","children":[],"call":["corrector remove_preceding ","node loc begin ","node loc ","node loc begin begin_pos - - ","node loc begin begin_pos - ","args source_range end_pos ","args source_range ","node loc begin begin_pos ","args source_range begin_pos - ","block_method source_range end_pos ","block_method source_range ","args source_range begin_pos "," unparenthesized_literal_args? "]}," RuboCop Cop Style InfiniteLoop configured_indentation_width":{"type":"method","name":"configured_indentation_width","children":[],"call":[" config for_cop [] "," config for_cop "," config "]}," RuboCop Cop Style InfiniteLoop non_modifier_range":{"type":"method","name":"non_modifier_range","children":[],"call":["start_range join ","condition_node source_range end ","condition_node source_range ","node loc begin end ","node loc begin ","node loc ","node loc keyword begin ","node loc keyword ","node condition source_range end ","node condition source_range ","node condition ","node do? ","node loc keyword begin  join "]}," RuboCop Cop Style InfiniteLoop modifier_replacement":{"type":"method","name":"modifier_replacement","children":[],"call":["loop do\n + + + ","loop do\n + + ","body source gsub ","  * "," configured_indentation_width ","body source ","loop do\n + ","body loc expression source_line [] ","body loc expression source_line ","body loc expression ","body loc ","loop {  + + ","loop {  + ","node single_line? ","(str \"loop do\") join ","node body source gsub "," configured_indent ","node body source ","node body ","node body loc expression source_line [] ","node body loc expression source_line ","node body loc expression ","node body loc ","body source_range source_line [] ","body source_range source_line ","body source_range "," indentation ","node body  source gsub "," configured_body loc expression source_line [] _width "," configured_node body loc expression source_line [] _width "," configured_body source_range source_line [] _width ","node body  source ","node body  loc expression source_line [] ","node body  loc expression source_line ","node body  loc expression ","node body  loc ","node node body  source gsub ","node node body  source ","node node body  ","node node body  loc expression source_line [] ","node node body  loc expression source_line ","node node body  loc expression ","node node body  loc ","node body  source_range source_line [] ","node body  source_range source_line ","node body  source_range "," body loc expression source_line []  "," node body loc expression source_line []  "," body source_range source_line []  "]}," RuboCop Cop Style ImplicitRuntimeError on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," implicit_runtime_error_raise_or_fail "," format "]}," RuboCop Cop Style IfUnlessModifier first_line_comment":{"type":"method","name":"first_line_comment","children":[],"call":["comment loc expression source ","comment loc expression ","comment loc ","c loc line == ","node loc line ","node loc ","c loc line ","c loc "," processed_source comments find "," processed_source comments "," processed_source "," processed_source find_comment "," processed_source comment_at_line "]}," RuboCop Cop Style IfUnlessModifier oneline":{"type":"method","name":"oneline","children":[],"call":[" parenthesize? ","expr << << ","expr << "," first_line_comment ","(begin\n  (send\n    (lvar :body) :source)) + ","cond source ","node loc keyword source ","node loc keyword ","node loc ","body source "," if_node_parts ","(begin\n  (send\n    (lvar :body) :source)) +  << << ","(begin\n  (send\n    (lvar :body) :source)) +  << "]}," RuboCop Cop Style HashSyntax acceptable_19_syntax_symbol?":{"type":"method","name":"acceptable_19_syntax_symbol?","children":[],"call":[" parse valid_syntax? "," parse ","sym_name =~ "," cop_config [] "," cop_config ","sym_name sub! ","(str \"\\\\A[_a-z]\\\\w*[?!]?\\\\z\") match? ","(str \"[\\\\p{Alnum}\\\"']\\\\z\") match? ","(str \"[\\\\p{Alnum}\\\"']\\\\z\") match? ! ","ProcessedSource  new valid_syntax? ","ProcessedSource  new "," target_ruby_version ","sym_name delete_prefix! "]}," RuboCop Cop Style ExtraSpacing remove_optarg_equals":{"type":"method","name":"remove_optarg_equals","children":[],"call":["optarg_eql include? ","t pos begin_pos ","t pos ","asgn_tokens reject ","(send\n  (lvar :optargs) :map) to_set ","o loc operator begin_pos ","o loc operator ","o loc ","optargs map ","processed_source ast each_node ","processed_source ast ","(send\n  (lvar :optargs) :map) to_set  include? ","(send\n  (lvar :processed_source ast each_node ) :map) to_set ","processed_source ast each_node  map "]}," RuboCop Cop Style ExtraSpacing ignored_range?":{"type":"method","name":"ignored_range?","children":[],"call":["r include? "," ignored_ranges any? "," ignored_ranges "]}," RuboCop Cop Style EachWithObject accumulator_param_assigned_to?":{"type":"method","name":"accumulator_param_assigned_to?","children":[],"call":["lhs equal? ","n assignment? ","body each_descendant any? ","body each_descendant "]}," RuboCop Cop Style EachWithObject simple_method_arg?":{"type":"method","name":"simple_method_arg?","children":[],"call":["method_arg basic_literal? "]}," RuboCop Cop Style EachWithObject reduce_method?":{"type":"method","name":"reduce_method?","children":[],"call":["METHODS  include? ","method send_type? "]}," RuboCop Cop Style EachForSimpleLoop autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","max - ","node children first source_range ","node children first ","node children "," bad_each_range "," lambda ","range_type == "," offending_each_range ","node send_node source_range ","node send_node "]}," RuboCop Cop Style EachForSimpleLoop on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense ","send_node receiver source_range join ","send_node loc selector ","send_node loc ","send_node receiver source_range ","send_node receiver "," bad_each_range "," offending_each_range ","node send_node ","corrector replace ","max - ","range_type == "," each_range "," offending? ","send_node receiver source_send_node receiver source_range join  join ","node send_node  receiver source_range join ","node send_node  loc selector ","node send_node  loc ","send_node receiver source_send_node receiver source_range join  ","node send_node  receiver source_range ","node send_node  receiver "," bad_each_send_node receiver source_range join  "," offending_each_send_node receiver source_range join  ","node node send_node  ","send_node receiver source_range join _type == "," each_send_node receiver source_range join  "]}," RuboCop Cop Style Documentation interpreter_directive_comment?":{"type":"method","name":"interpreter_directive_comment?","children":[],"call":["comment text =~ ","comment text "]}," RuboCop Cop Style CaseCorrector move_branch_inside_condition":{"type":"method","name":"move_branch_inside_condition","children":[],"call":["corrector remove_preceding ","parent_keyword column - ","parent_keyword column ","branch parent loc keyword ","branch parent loc ","branch parent "," remove_whitespace_in_branches ","corrector insert_before ","assignment source ","branch_assignment loc expression ","branch_assignment loc "," tail ","branch parent loc keyword  column - ","branch parent loc keyword  column "," tail  loc expression "," tail  loc "]}," RuboCop Cop Style CaseCorrector extract_branches":{"type":"method","name":"extract_branches","children":[],"call":[" expand_when_branches ","case_node else_branch ","case_node when_branches ","case_node in_pattern_branches ","case_node case_type? "," expand_ expand_when_branches  ","case_node  expand_when_branches  "]}," RuboCop Cop Style CaseCorrector extract_tail_branches":{"type":"method","name":"extract_tail_branches","children":[],"call":[" tail ","when_branches map! "," extract_branches "]}," RuboCop Cop Style IfCorrector move_branch_inside_condition":{"type":"method","name":"move_branch_inside_condition","children":[],"call":["corrector remove_preceding ","branch_else column - ","branch_else column ","branch parent loc else ","branch parent loc ","branch parent "," remove_whitespace_in_branches ","corrector insert_before ","assignment source ","branch_assignment loc expression ","branch_assignment loc "," tail ","branch parent loc else  column - ","branch parent loc else  column "," tail  loc expression "," tail  loc "]}," RuboCop Cop Style IfCorrector extract_tail_branches":{"type":"method","name":"extract_tail_branches","children":[],"call":[" tail ","elsif_branches map! "," extract_branches ","node branches "]}," RuboCop Cop Style TernaryCorrector move_branch_inside_condition":{"type":"method","name":"move_branch_inside_condition","children":[],"call":["corrector insert_before ","assignment source ","branch loc expression ","branch loc "]}," RuboCop Cop Style TernaryCorrector remove_parentheses":{"type":"method","name":"remove_parentheses","children":[],"call":["corrector remove ","node loc end ","node loc ","node loc begin "]}," RuboCop Cop Style TernaryCorrector extract_branches":{"type":"method","name":"extract_branches","children":[],"call":["rhs children size == ","rhs children size ","rhs children ","rhs begin_type? ","rhs children one? "]}," RuboCop Cop Style ConditionalCorrectorHelper white_space_range":{"type":"method","name":"white_space_range","children":[],"call":["Parser Source Range  new ","expression begin_pos ","expression source_buffer ","expression begin_pos - ","expression column - - ","expression column - ","expression column ","node loc expression ","node loc ","node source_range ","expression expression begin_pos -  ","node loc expression  begin_pos ","node source_range  begin_pos ","node loc expression  source_buffer ","node source_range  source_buffer ","expression expression begin_pos -  - ","node loc expression  begin_pos - ","node source_range  begin_pos - ","node loc expression  column - - ","node source_range  column - - ","node loc expression  column - ","node source_range  column - ","node loc expression  column ","node source_range  column ","node loc node loc expression  ","node loc node source_range  "]}," RuboCop Cop Style ConditionalAssignment condition?":{"type":"method","name":"condition?","children":[],"call":["CONDITION_TYPES  include? ","node type "]}," RuboCop Cop Style ConditionalAssignment assignment_node":{"type":"method","name":"assignment_node","children":[],"call":["assignment children size == ","assignment children size ","assignment children ","assignment begin_type? ","assignment children one? ","node parent for_type? ","node parent "]}," RuboCop Cop Style CommentIndentation line_after_comment":{"type":"method","name":"line_after_comment","children":[],"call":["line blank? ! ","line blank? ","lines [] find ","lines [] ","comment loc line ","comment loc "," processed_source lines "," processed_source "," processed_source lines  [] find "," processed_source lines  [] "," processed_source  processed_source lines  "]}," RuboCop Cop Style CommentIndentation own_line_comment?":{"type":"method","name":"own_line_comment?","children":[],"call":["own_line =~ "," processed_source lines [] ","comment loc line - ","comment loc line ","comment loc "," processed_source lines "," processed_source "," processed_source lines []  =~ "]}," RuboCop Cop Style ClosingParenthesisIndentation fixed_parameter_indentation?":{"type":"method","name":"fixed_parameter_indentation?","children":[],"call":[" config for_cop [] == "," config for_cop [] "," config for_cop "," config "]}," RuboCop Cop Style ClosingParenthesisIndentation expected_column":{"type":"method","name":"expected_column","children":[],"call":["left_paren column ","left_paren source_line =~ ","left_paren source_line "," line_break_after_left_paren? "," fixed_parameter_indentation? ","node send_type? ","node loc begin ","node loc ","node loc begin  column ","node loc begin  source_line =~ ","node loc begin  source_line "," line_break_after_node loc begin ? "]}," RuboCop Cop Style BarePercentLiterals add_offense_for_wrong_style":{"type":"method","name":"add_offense_for_wrong_style","children":[],"call":[" add_offense "," format ","corrector replace ","source sub ","source start_with? ","location source ","node loc begin ","node loc ","location source  sub ","location source  start_with? ","location location source  ","node loc begin  source "]}," RuboCop Cop Style BarePercentLiterals requires_bare_percent?":{"type":"method","name":"requires_bare_percent?","children":[],"call":["source =~ "," style == "," style ","source start_with? "]}," RuboCop Cop Style BarePercentLiterals requires_percent_q?":{"type":"method","name":"requires_percent_q?","children":[],"call":["source =~ "," style == "," style ","(str \"^%[^\\\\w]\") match? "]}," RuboCop Cop Style Alias add_offense_for_args":{"type":"method","name":"add_offense_for_args","children":[],"call":[" add_offense ","arg_ranges reduce "," format ","node children map ","node children ","(send\n  (send\n    (lvar :node) :children) :map) join ","a source [] ","a source ","node children map join ","node children map  reduce "]}," RuboCop Cop Rails Validation autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector insert_after ","node loc expression ","node loc ","corrector replace ","options source ","options loc expression ","options loc "," cop_config [] "," cop_config ","node loc selector ","method_name to_s split [] ","method_name to_s split ","method_name to_s "," lambda ","arg type != ","arg type ","args find "," correct_validate_type ","last_argument splat_type? ! ","last_argument splat_type? ","last_argument literal? ! ","last_argument literal? ","node arguments last ","node arguments "," correct_method_name to_s split []  ","node arguments last  splat_type? ! ","node arguments last  splat_type? ","node arguments last  literal? ! ","node arguments last  literal? "]}," RuboCop Cop Rails UniqBeforePluck dot_method_begin_pos":{"type":"method","name":"dot_method_begin_pos","children":[],"call":["node loc dot begin_pos ","node loc dot ","node loc ","node source rindex ","node source ","lines last strip == ","lines last strip ","lines last ","node source split ","node source split  last strip == ","node source split  last strip ","node source split  last "]}," RuboCop Cop Rails UniqBeforePluck dot_method_with_whitespace":{"type":"method","name":"dot_method_with_whitespace","children":[],"call":["Parser Source Range  new ","node loc selector end_pos ","node loc selector ","node loc "," dot_method_begin_pos ","node loc expression source_buffer ","node loc expression "," range_between "]}," RuboCop Cop Rails UniqBeforePluck mode":{"type":"method","name":"mode","children":[],"call":[" cop_config [] to_sym "," cop_config [] "," cop_config "]}," RuboCop Cop Rails RequestReferer wrong_method_name":{"type":"method","name":"wrong_method_name","children":[],"call":[" style == "," style "]}," RuboCop Cop Rails RequestReferer message":{"type":"method","name":"message","children":[],"call":[" wrong_method_name "," style "," format "]}," RuboCop Cop Rails RequestReferer offense?":{"type":"method","name":"offense?","children":[],"call":["node method_name == "," wrong_method_name ","node method_name ","receiver_name == ","node receiver method_name ","node receiver ","node receiver method_name  == "]}," RuboCop Cop Rails RequestReferer autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," style "," lambda "]}," RuboCop Cop Rails RequestReferer on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," message ","node source_range "," offense? ","method_name == "," wrong_method_name "," referer? ","node method? "]}," RuboCop Cop Rails PluralizationGrammar expect_plural_method?":{"type":"method","name":"expect_plural_method?","children":[],"call":[" singular_method? "," plural_receiver? "]}," RuboCop Cop Rails PluralizationGrammar expect_singular_method?":{"type":"method","name":"expect_singular_method?","children":[],"call":[" plural_method? "," singular_receiver? "]}," RuboCop Cop Rails OutputSafety on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","method_name == ","receiver nil? "," looks_like_rails_raw? "," looks_like_rails_html_safe? "," part_of_ignored_node? ! "," part_of_ignored_node? "," ignore_node ","node method? "," looks_like_rails_safe_concat? "," non_interpolated_string? "]}," RuboCop Cop Rails Exit right_receiver?":{"type":"method","name":"right_receiver?","children":[],"call":["EXPLICIT_RECEIVERS  include? ","receiver_node nil? "]}," RuboCop Cop Rails Exit right_argument_count?":{"type":"method","name":"right_argument_count?","children":[],"call":["arg_nodes length <= ","arg_nodes length ","arg_nodes size <= ","arg_nodes size "]}," RuboCop Cop Rails Exit right_method_name?":{"type":"method","name":"right_method_name?","children":[],"call":["TARGET_METHODS  include? "]}," RuboCop Cop Rails Exit offending_node?":{"type":"method","name":"offending_node?","children":[],"call":[" right_receiver? "," right_argument_count? "," right_method_name? ","node receiver ","node arguments ","node method_name "]}," RuboCop Cop Rails Exit on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," offending_node? "]}," RuboCop Cop Performance Sample ShuffleAnalyzer sample_size_for_two_args":{"type":"method","name":"sample_size_for_two_args","children":[],"call":["second to_a first ","second to_a ","second int_type? ","first to_a first zero? ","first to_a first ","first to_a ","first int_type? "]}," RuboCop Cop Performance Sample ShuffleAnalyzer sample_size_for_one_arg":{"type":"method","name":"sample_size_for_one_arg","children":[],"call":["arg to_a first zero? ","arg to_a first ","arg to_a "," range_size ","arg type "]}," RuboCop Cop Performance RedundantBlockCall args_include_block_pass?":{"type":"method","name":"args_include_block_pass?","children":[],"call":["args any? "]}," RuboCop Cop Performance RedundantBlockCall calls_to_report":{"type":"method","name":"calls_to_report","children":[],"call":[" args_include_block_pass? ","calls any? "," to_enum "," blockarg_assigned? "," to_enum  any? "]}," RuboCop Cop Performance PushSplat autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","splat loc expression ","splat loc ","body source "," parens_required? ","node location selector ","node location "," lambda ","body body source  "]}," RuboCop Cop Performance PushSplat on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," push_splat "]}," RuboCop Cop Performance FlatMap offense":{"type":"method","name":"offense","children":[],"call":[" add_offense "," format ","Parser Source Range  new ","node loc selector end_pos ","node loc selector ","node loc ","expression loc selector begin_pos ","expression loc selector ","expression loc ","node source_range source_buffer ","node source_range "," range_between ","node loc expression end_pos ","node loc expression ","map_node loc selector begin_pos ","map_node loc selector ","map_node loc ","node source_Parser Source Range  new  source_buffer ","node source_ range_between  source_buffer ","node source_Parser Source Range  new  ","node source_ range_between  "," Parser Source Range  new _between ","  range_between _between "]}," RuboCop Cop Performance FlatMap offense_for_method":{"type":"method","name":"offense_for_method","children":[],"call":[" offense "," register_offense "]}," RuboCop Cop Performance FlatMap offense_for_levels":{"type":"method","name":"offense_for_levels","children":[],"call":[" offense ","MSG  + "," register_offense "]}," RuboCop Cop TrailingComma no_elements_on_same_line?":{"type":"method","name":"no_elements_on_same_line?","children":[],"call":[" on_same_line? ","items each_cons none? ","items each_cons ","items << ","node loc end ","node loc "," elements map "," elements "," elements map  each_cons none? "," elements map  each_cons "," elements map  << "]}," RuboCop Cop TrailingComma extra_avoid_comma_info":{"type":"method","name":"extra_avoid_comma_info","children":[],"call":[" style "]}," RuboCop Cop TrailingComma check_comma":{"type":"method","name":"check_comma","children":[],"call":[" avoid_comma "," extra_avoid_comma_info ","node source_range source_buffer ","node source_range "," should_have_comma? "," style "]}," RuboCop Cop SpaceBeforePunctuation space_required_after?":{"type":"method","name":"space_required_after?","children":[],"call":[" space_required_after_lcurly? ","token type == ","token type ","token left_curly_brace? "]}," RuboCop Cop SpaceBeforePunctuation space_missing?":{"type":"method","name":"space_missing?","children":[],"call":["t2 pos begin_pos > ","t1 pos end_pos ","t1 pos ","t2 pos begin_pos ","t2 pos ","t1 pos line == ","t2 pos line ","t1 pos line ","t2 begin_pos > ","t1 end_pos ","t2 begin_pos ","t1 line == ","t2 line ","t1 line ","token2 begin_pos > ","token1 end_pos ","token2 begin_pos ","token1 line == ","token2 line ","token1 line "," same_line? "]}," RuboCop Cop SpaceBeforePunctuation each_missing_space":{"type":"method","name":"each_missing_space","children":[],"call":["Parser Source Range  new ","t2 pos begin_pos ","t2 pos ","t1 pos end_pos ","t1 pos "," processed_source buffer "," processed_source "," space_required_after? "," space_missing? "," kind ","tokens each_cons "," range_between ","t2 begin_pos ","t1 end_pos ","token2 begin_pos ","token1 end_pos "," processed_source  processed_source buffer  "]}," RuboCop Cop SpaceAfterPunctuation allowed_type?":{"type":"method","name":"allowed_type?","children":[],"call":["(sym :tRPAREN) include? ","token type "]}," RuboCop Cop SpaceAfterPunctuation space_required_before?":{"type":"method","name":"space_required_before?","children":[],"call":["(or\n  (send nil :allowed_type?\n    (lvar :token))\n  (begin\n    (and\n      (send\n        (send\n          (lvar :token) :type) :==\n        (sym :tRCURLY))\n      (send nil :space_forbidden_before_rcurly?)))) ! "," space_forbidden_before_rcurly? ","token type == ","token type "," allowed_type? ","(or\n  (send nil :allowed_type?\n    (lvar :token))\n  (begin\n    (and\n      (send\n        (lvar :token) :right_curly_brace?)\n      (send nil :space_forbidden_before_rcurly?)))) ! ","token right_curly_brace? "]}," RuboCop Cop SpaceAfterPunctuation space_missing?":{"type":"method","name":"space_missing?","children":[],"call":["t2 pos column == ","t1 pos column + "," offset ","t1 pos column ","t1 pos ","t2 pos column ","t2 pos ","t1 pos line == ","t2 pos line ","t1 pos line ","t2 column == ","t1 column + ","t1 column ","t2 column ","t1 line == ","t2 line ","t1 line ","token2 column == ","token1 column + ","token1 column ","token2 column ","token1 line == ","token2 line ","token1 line "," same_line? "]}," RuboCop Cop SpaceAfterPunctuation each_missing_space":{"type":"method","name":"each_missing_space","children":[],"call":[" space_required_before? "," space_missing? "," kind ","tokens each_cons "]}," RuboCop Cop PercentLiteral contents_range":{"type":"method","name":"contents_range","children":[],"call":["Parser Source Range  new ","node loc end begin_pos ","node loc end ","node loc ","node loc begin end_pos ","node loc begin ","node loc expression source_buffer ","node loc expression "," range_between "]}," RuboCop Cop NegativeConditional included":{"type":"method","name":"included","children":[],"call":[]}," RuboCop Cop MultilineLiteralBraceLayout last_element_trailing_comma_range":{"type":"method","name":"last_element_trailing_comma_range","children":[],"call":["range source == ","range source "," range_with_surrounding_space end resize "," range_with_surrounding_space end "," range_with_surrounding_space "," children last source_range "," children last "," children "," range_with_surrounding_space end resize  source == "," range_with_surrounding_space end resize  source ","  range_with_surrounding_space end resize _with_surrounding_space end resize ","  range_with_surrounding_space end resize _with_surrounding_space end ","  range_with_surrounding_space end resize _with_surrounding_space "," children last source_ range_with_surrounding_space end resize  "]}," RuboCop Cop MultilineLiteralBraceLayout last_element_range_with_trailing_comma":{"type":"method","name":"last_element_range_with_trailing_comma","children":[],"call":[" children last source_range "," children last "," children "," children last source_range join "," last_element_trailing_comma_range "," last_element_ last_element_trailing_comma_range  "]}," RuboCop Cop MultilineExpressionIndentation valid_rhs_candidate?":{"type":"method","name":"valid_rhs_candidate?","children":[],"call":[" within_node? ","candidate ! "]}," RuboCop Cop MultilineExpressionIndentation valid_method_rhs_candidate?":{"type":"method","name":"valid_method_rhs_candidate?","children":[],"call":[" valid_rhs_candidate? ","args last "," assignment_call? ","node last_argument ","node setter_method? "]}," RuboCop Cop MatchRange match_range":{"type":"method","name":"match_range","children":[],"call":["Parser Source Range  new ","range begin_pos + ","match end ","range begin_pos ","match begin ","range source_buffer "," range_between "]}," RuboCop Cop MatchRange each_match_range":{"type":"method","name":"each_match_range","children":[],"call":[" match_range ","Regexp  last_match ","range source scan ","range source "]}," RuboCop Cop IntegerNode integer_part":{"type":"method","name":"integer_part","children":[],"call":["node source sub split first ","node source sub split ","node source sub ","node source "]}," RuboCop Cop EndKeywordAlignment add_offense_for_misalignment":{"type":"method","name":"add_offense_for_misalignment","children":[],"call":[" add_offense "," format ","align_with column ","align_with line ","align_with source ","end_loc column ","end_loc line ","node loc end ","node loc "," autocorrect ","node loc end  column ","node loc end  line "]}," RuboCop Cop EndKeywordAlignment matching_ranges":{"type":"method","name":"matching_ranges","children":[],"call":[" effective_column == ","end_loc column "," effective_column ","range line == ","end_loc line ","range line ","align_ranges select "," column_offset_between zero? "," column_offset_between "," same_line? "]}," RuboCop Cop AutocorrectAlignment each_bad_alignment":{"type":"method","name":"each_bad_alignment","children":[],"call":["current loc line ","current loc ","@column_delta != ","base_column - "," display_column ","current source_range "," begins_its_line? ","current loc line > ","items each ","@column_delta nonzero? ","base_column -  != ","base_column -  nonzero? "]}," RuboCop Cop Lint UselessAccessModifier instance_eval_or_new_call?":{"type":"method","name":"instance_eval_or_new_call?","children":[],"call":[" class_or_module_or_struct_new_call? "," class_or_instance_eval? "]}," RuboCop Cop Lint UselessAccessModifier check_new_visibility":{"type":"method","name":"check_new_visibility","children":[],"call":[" add_offense "," format ","new_vis == "," autocorrect "]}," RuboCop Cop Lint ShadowedException sort_rescued_groups":{"type":"method","name":"sort_rescued_groups","children":[],"call":["x <=> ","groups sort ","y empty? ","x empty? ","y include? ","x include? "]}," RuboCop Cop Lint ShadowedException evaluate_exceptions":{"type":"method","name":"evaluate_exceptions","children":[],"call":["converted << "," instance_eval ","rescued_exceptions each_with_object ","rescue_group source delete split ","rescue_group source delete ","rescue_group source "," rescued_exceptions ","Kernel  const_get "," silence_warnings ","exception source ","rescued_exceptions any? ","group exceptions ","RuboCop Util  silence_warnings ","rescue_group source delete split  each_with_object "," rescued_exceptions  each_with_object ","group exceptions  each_with_object "," rescue_group source delete split  ","  rescued_exceptions  "," group exceptions  ","rescue_group source delete split  any? "," rescued_exceptions  any? ","group exceptions  any? "]}," RuboCop Cop Lint ShadowedException contains_multiple_levels_of_exceptions?":{"type":"method","name":"contains_multiple_levels_of_exceptions?","children":[],"call":["group [] < ","group [] ","group each_with_index ","group any? ","exception nil? ","group [] nil? ","(and\n  (send\n    (send\n      (lvar :group) :size) :==\n    (int 2))\n  (send\n    (lvar :group) :include?\n    (const nil :NilClass))) ! ","group include? ","group size == ","group size ","group size > ","a <=> ","group combination any? ","group combination "," compare_exceptions "]}," RuboCop Cop Lint ShadowedException rescue_modifier?":{"type":"method","name":"rescue_modifier?","children":[],"call":["(or\n  (send\n    (send\n      (lvar :node) :parent) :kwbegin_type?)\n  (send\n    (send\n      (lvar :node) :parent) :ensure_type?)) ! ","node parent ensure_type? ","node parent ","node parent kwbegin_type? ","node parent nil? ","node rescue_type? "]}," RuboCop Cop Lint ShadowedException on_rescue":{"type":"method","name":"on_rescue","children":[],"call":[" add_offense ","rescued_groups == "," sort_rescued_groups "," contains_multiple_levels_of_exceptions? ! "," contains_multiple_levels_of_exceptions? ","rescued_groups any? ","exceptions << "," evaluate_exceptions ","rescues each_with_object "," rescue_modifier? "," offense_range ","rescue_group_rescues_multiple_levels ! "," sorted? "," rescued_groups_for "," rescued_groups_for  == "," sort_ rescued_groups_for  "," rescued_groups_for  any? ","  rescued_groups_for _for "]}," RuboCop Cop Lint PercentSymbolArray autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove_leading ","range source ","corrector remove_trailing ","child loc expression ","child loc ","node children each ","node children "," lambda ","range source start_with? ","range source end_with? ","child source_range ","child loc expression  source ","child source_range  source ","child loc expression  source start_with? ","child source_range  source start_with? ","child loc expression  source end_with? ","child source_range  source end_with? ","child source_child loc expression  ","child source_child source_range  "]}," RuboCop Cop Lint PercentSymbolArray contains_colons_or_commas?":{"type":"method","name":"contains_colons_or_commas?","children":[],"call":["literal =~ ","patterns any? ","literal to_s gsub empty? ","literal to_s gsub ","literal to_s ","child children first ","child children ","node children any? ","node children ","literal end_with? ","literal start_with? "," non_alphanumeric_literal? ","child children first to_s ","child children first  =~ ","child children first to_s  =~ ","child children first  to_s gsub empty? ","child children first to_s  to_s gsub empty? ","child children first  to_s gsub ","child children first to_s  to_s gsub ","child children first  to_s ","child children first to_s  to_s ","child children first  end_with? ","child children first to_s  end_with? ","child children first  start_with? ","child children first to_s  start_with? "," non_alphanumeric_child children first ? "," non_alphanumeric_child children first to_s ? "]}," RuboCop Cop Lint PercentSymbolArray on_percent_literal":{"type":"method","name":"on_percent_literal","children":[],"call":[" add_offense "," contains_colons_or_commas? "," autocorrect "]}," RuboCop Cop Lint PercentSymbolArray on_array":{"type":"method","name":"on_array","children":[],"call":[" process "]}," RuboCop Cop Lint PercentStringArray autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove_leading ","range source ","corrector remove_trailing ","match [] length ","match [] ","(str \"['\\\"]?,?$\") match ","child loc expression ","child loc ","node children each ","node children "," lambda ","range source =~ ","range source match ","value loc expression ","value loc ","node values each ","node values ","LEADING_QUOTE  match? ","node each_value ","child loc expression  source ","value loc expression  source ","(str \"['\\\"]?,?$\") match  [] length ","range source match  [] length ","(str \"['\\\"]?,?$\") match  [] ","range source match  [] ","(str \"['\\\"]?,?$\") (str \"['\\\"]?,?$\") match  ","(str \"['\\\"]?,?$\") range source match  ","child loc expression  source =~ ","value loc expression  source =~ ","range source (str \"['\\\"]?,?$\") match  ","range source range source match  ","child loc expression  source match ","value loc expression  source match ","LEADING_QUOTE  (str \"['\\\"]?,?$\") match ? ","LEADING_QUOTE  range source match ? "]}," RuboCop Cop Lint PercentStringArray contains_quotes_or_commas?":{"type":"method","name":"contains_quotes_or_commas?","children":[],"call":["literal =~ ","patterns any? ","literal to_s gsub empty? ","literal to_s gsub ","literal to_s ","child children first ","child children ","node children any? ","node children ","literal gsub empty? ","literal gsub "," scrub_string ","child children first to_s ","QUOTES_AND_COMMAS  any? ","value children first to_s ","value children first ","value children ","node values any? ","node values ","value children first to_s scrub ","literal match? ","child children first  =~ "," scrub_string  =~ ","value children first to_s scrub  =~ ","child children first  to_s gsub empty? "," scrub_string  to_s gsub empty? ","value children first to_s scrub  to_s gsub empty? ","child children first  to_s gsub "," scrub_string  to_s gsub ","value children first to_s scrub  to_s gsub ","child children first  to_s "," scrub_string  to_s ","value children first to_s scrub  to_s ","child children first  gsub empty? "," scrub_string  gsub empty? ","value children first to_s scrub  gsub empty? ","child children first  gsub "," scrub_string  gsub ","value children first to_s scrub  gsub ","child children first  match? "," scrub_string  match? ","value children first to_s scrub  match? "]}," RuboCop Cop Lint PercentStringArray on_percent_literal":{"type":"method","name":"on_percent_literal","children":[],"call":[" add_offense "," contains_quotes_or_commas? "," autocorrect ","corrector remove_leading ","LEADING_QUOTE  match? ","range source ","corrector remove_trailing ","match [] length ","match [] ","range source match ","value loc expression ","value loc ","node each_value ","value source_range ","LEADING_QUOTE  range source match ? ","value loc expression  source ","value source_range  source ","range source match  [] length ","range source match  [] ","range source range source match  ","value loc expression  source match ","value source_range  source match ","value source_value loc expression  ","value source_value source_range  "]}," RuboCop Cop Lint PercentStringArray on_array":{"type":"method","name":"on_array","children":[],"call":[" process "]}," RuboCop Cop Lint InheritException preferred_base_class":{"type":"method","name":"preferred_base_class","children":[],"call":["PREFERRED_BASE_CLASS  [] "," style "]}," RuboCop Cop Lint InheritException autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," preferred_base_class ","node loc expression ","node loc "," lambda "]}," RuboCop Cop Lint InheritException check":{"type":"method","name":"check","children":[],"call":[" add_offense "," format "," preferred_base_class ","node const_name == ","node const_name ","ILLEGAL_CLASSES  include? "]}," RuboCop Cop Lint InheritException on_class":{"type":"method","name":"on_class","children":[],"call":[" check ","base_class nil? "," add_offense "," illegal_class_name? ","node parent_class ","corrector replace "," preferred_base_class "," message "," exception_class? "," inherit_exception_class_with_omitted_namespace? ","  message  "]}," RuboCop Cop Lint FormatParameterMismatch method_with_format_args?":{"type":"method","name":"method_with_format_args?","children":[],"call":[" percent? "," format? "," sprintf? "]}," RuboCop Cop Lint BlockAlignment format_message":{"type":"method","name":"format_message","children":[],"call":[" format "," alt_start_msg "," format_source_line_column "," loc_to_source_line_column "]}," RuboCop Cop Lint BlockAlignment offense":{"type":"method","name":"offense","children":[],"call":[" add_offense "," format_message "," loc_to_source_line_column "," style == "," style "," format_ format_message  "]}," RuboCop Cop Lint BlockAlignment block_end_align_target":{"type":"method","name":"block_end_align_target","children":[],"call":[" block_end_align_target? ","parent masgn_type? ! ","parent masgn_type? ","parent loc line != ","node loc line ","node loc ","parent loc line ","parent loc ","parent loc ! ","parent ! ","node parent ","lineage last "," end_align_target? ","lineage each_cons ","node ancestors ","node parent  masgn_type? ! ","node parent  masgn_type? ","node parent  loc line != ","node parent  loc line ","node parent  loc ","node parent  loc ! ","node parent  ! ","node node parent  "]}," RuboCop Cop Corrector remove_trailing":{"type":"method","name":"remove_trailing","children":[],"call":["@source_rewriter remove ","Parser Source Range  new ","range end_pos ","range end_pos - ","range source_buffer "," validate_range "," to_range "," remove ","range with "," to_range  end_pos "," to_range  end_pos - "," to_range  source_buffer "," validate_ to_range  "," to_ to_range  "," to_range  with "]}," RuboCop Config target_ruby_version":{"type":"method","name":"target_ruby_version","children":[],"call":[" for_all_cops [] "," for_all_cops ","File  read to_f ","File  read ","File  file? ","version to_f "," target_ruby_version_from_version_file "," target_ruby_version_from_bundler_lock_file "," for_all_cops [] to_f "]}," RuboCop CommentConfig qualified_cop_name":{"type":"method","name":"qualified_cop_name","children":[],"call":["Cop Cop  qualified_cop_name "," processed_source buffer name "," processed_source buffer "," processed_source ","cop_name strip "," processed_source file_path ","Cop Registry  qualified_cop_name "]}," RuboCop CommentConfig directive_parts":{"type":"method","name":"directive_parts","children":[],"call":["switch == ","cops_string split "," all_cop_names ","cops_string == ","match captures ","comment text match ","comment text ","(str \"disable\") include? "," all_cops_string split  "," all_ all_cop_names  ","comment text match  captures ","comment text comment text match  "]}," RuboCop CommentConfig each_directive":{"type":"method","name":"each_directive","children":[],"call":[" directive_parts "," processed_source comments each "," processed_source comments "," processed_source "," processed_source comments nil? "," processed_source each_comment ","directive cop_names ","DirectiveComment  new ","  directive_parts _parts "," DirectiveComment  new _parts "," directive_parts  cop_names ","DirectiveComment  new  cop_names "]}," RuboCop CommentConfig cop_line_ranges":{"type":"method","name":"cop_line_ranges","children":[],"call":["analysis line_ranges + ","analysis start_line_number ","analysis line_ranges "]}," RuboCop CommentConfig analyze_rest":{"type":"method","name":"analyze_rest","children":[],"call":["CopAnalysis  new ","analysis line_ranges ","analysis line_ranges + ","analysis start_line_number ","directive line_number ","analysis directive line_number _ranges ","analysis directive line_number _ranges + ","analysis analysis start_line_number _number ","analysis start_directive line_number _number ","directive directive line_number _number "]}," RuboCop CommentConfig analyze_disabled":{"type":"method","name":"analyze_disabled","children":[],"call":["CopAnalysis  new ","analysis line_ranges ","analysis line_ranges + ","analysis start_line_number ","directive line_number ","analysis directive line_number _ranges ","analysis directive line_number _ranges + ","analysis analysis start_line_number _number ","analysis start_directive line_number _number ","directive directive line_number _number "]}," RuboCop CommentConfig analyze_single_line":{"type":"method","name":"analyze_single_line","children":[],"call":["CopAnalysis  new ","analysis start_line_number ","analysis line_ranges + ","analysis line_ranges ","directive line_number ","directive disabled? ","analysis analysis start_line_number _number ","analysis start_directive line_number _number ","analysis directive line_number _ranges + ","analysis directive line_number _ranges ","directive directive line_number _number "]}," RuboCop CommentConfig analyze_cop":{"type":"method","name":"analyze_cop","children":[],"call":[" analyze_rest "," analyze_disabled "," analyze_single_line ","directive disabled? ","directive single_line? "," comment_only_line? ! "," comment_only_line? ","directive line_number "]}," RuboCop CLI execute_runner":{"type":"method","name":"execute_runner","children":[],"call":["runner errors empty? ","runner errors ","runner aborting? ! ","runner aborting? "," maybe_print_corrected_source "," display_error_summary "," display_warning_summary ","runner warnings ","runner run "," trap_interrupt ","Runner  new ","@options [] ","Runner  new  errors empty? ","Runner  new  errors ","Runner  new  aborting? ! ","Runner  new  aborting? ","Runner  new  warnings ","Runner  new  run "]}," RuboCop Node parent_module_name_for_block":{"type":"method","name":"parent_module_name_for_block","children":[],"call":[" new_class_or_module_block? ! "," new_class_or_module_block? ","receiver const_name ","receiver const_type? ","ancestor receiver ","ancestor method_name == ","ancestor method_name ","ancestor receiver  const_name ","ancestor receiver  const_type? ","ancestor ancestor receiver  "]}," RuboCop Node parent_module_name_part":{"type":"method","name":"parent_module_name_part","children":[],"call":[" parent_module_name_for_block "," parent_module_name_for_sclass ","node defined_module_name ","node type "]}," RuboCop Node keyword_bang?":{"type":"method","name":"keyword_bang?","children":[],"call":[" loc selector is? ","! freeze "," loc selector "," loc ","method_name == ","args empty? "]}," RuboCop Node modifier_form?":{"type":"method","name":"modifier_form?","children":[],"call":[" loc end nil? "," loc end "," loc "," loc respond_to? "]}," RuboCop Runner autocorrect_unneeded_disables":{"type":"method","name":"autocorrect_unneeded_disables","children":[],"call":["Cop Team  new autocorrect ","source buffer ","Cop Team  new ","cop processed_source= ","RuboCop Cop Registry  new ","new_offenses - "," do_inspection_loop "," get_processed_source ","team updated_source_file? ","team autocorrect ","Cop Team  new  updated_source_file? ","Cop Team  new  autocorrect "]}," RuboCop NodePattern Compiler compile_expr_with_index":{"type":"method","name":"compile_expr_with_index","children":[],"call":["index + "," compile_expr ","index nil? ","index == "]}," RuboCop NodePattern Compiler compile_seq_terms_with_size":{"type":"method","name":"compile_seq_terms_with_size","children":[],"call":["tokens shift ","terms << "," compile_expr_with_index ","tokens first ","tokens first == "," compile_expr_with_index s << "]}," RuboCop Cop Style SpecialGlobalVars format_list":{"type":"method","name":"format_list","children":[],"call":["items join "]}," RuboCop Cop Style SpecialGlobalVars format_message":{"type":"method","name":"format_message","children":[],"call":[" raise "," format "," format_list ","english empty? ! ","english empty? ","regular empty? ! ","regular empty? "]}," RuboCop Cop Style SpecialGlobalVars format_english_message":{"type":"method","name":"format_english_message","children":[],"call":[" format_message ","NON_ENGLISH_VARS  include? ","ENGLISH_VARS  [] partition ","ENGLISH_VARS  [] "]}," RuboCop Cop Style BlockDelimiters whitespace_after?":{"type":"method","name":"whitespace_after?","children":[],"call":["node source_buffer source [] =~ ","node source_buffer source [] ","node begin_pos + ","node begin_pos ","node source_buffer source ","node source_buffer ","range source_buffer source [] =~ ","range source_buffer source [] ","range begin_pos + ","range begin_pos ","range source_buffer source ","range source_buffer ","(str \"\\\\s\") match? "]}," RuboCop Cop Style AsciiIdentifiers first_non_ascii_chars":{"type":"method","name":"first_non_ascii_chars","children":[],"call":["string match to_s ","string match "]}," RuboCop Cop Style AsciiIdentifiers first_offense_range":{"type":"method","name":"first_offense_range","children":[],"call":["Parser Source Range  new ","identifier pos source_buffer ","identifier pos ","start_position + ","first_offense length ","expression begin_pos + ","identifier text index ","identifier text ","expression begin_pos "," first_non_ascii_chars "," range_between ","expression begin_pos +  + "," first_non_ascii_chars  length ","identifier pos  begin_pos + ","identifier pos  begin_pos "]}," RuboCop Cop Style AsciiComments first_non_ascii_chars":{"type":"method","name":"first_non_ascii_chars","children":[],"call":["string match to_s ","string match "]}," RuboCop Cop Style AsciiComments first_offense_range":{"type":"method","name":"first_offense_range","children":[],"call":["Parser Source Range  new ","comment loc expression source_buffer ","comment loc expression ","comment loc ","start_position + ","first_offense length ","expression begin_pos + ","comment text index ","comment text ","expression begin_pos "," first_non_ascii_chars "," range_between ","comment source_range ","comment loc comment loc expression  source_buffer ","comment loc comment source_range  source_buffer ","comment loc comment loc expression  ","comment loc comment source_range  ","expression begin_pos +  + "," first_non_ascii_chars  length ","comment loc expression  begin_pos + ","comment source_range  begin_pos + ","comment loc expression  begin_pos ","comment source_range  begin_pos "]}," RuboCop Cop Performance StringReplacement replace_method":{"type":"method","name":"replace_method","children":[],"call":[" remove_second_param ","first length == ","first length ","second empty? ","corrector replace "," to_string_literal ","first_param source_range ","first_param str_type? ","node loc selector ","node loc "," lambda "]}," RuboCop Cop Lint ShadowedException rescued_exceptions":{"type":"method","name":"rescued_exceptions","children":[],"call":["(send\n  (lvar :klasses) :map) compact ","klass source ","klass const_type? ","klass nil_type? ","klasses map "]}," RuboCop Cop Lint ShadowedException offense_range":{"type":"method","name":"offense_range","children":[],"call":["Parser Source Range  new ","last_exceptions loc expression end_pos ","last_exceptions loc expression ","last_exceptions loc ","first_rescue loc expression begin_pos ","first_rescue loc expression ","first_rescue loc ","node loc expression source_buffer ","node loc expression ","node loc ","rescues last ","rescues first "," range_between ","last_rescue loc keyword end_pos ","last_rescue loc keyword ","last_rescue loc ","expression end_pos ","expression begin_pos ","shadowing_rescue loc expression ","shadowing_rescue loc "," find_shadowing_rescue ","shadowing_rescue source_range ","last_exceptions loc expression last_rescue loc keyword end_pos  ","last_exceptions loc expression last_exceptions loc expression end_pos  ","last_exceptions loc shadowing_rescue loc expression  end_pos ","last_exceptions loc shadowing_rescue source_range  end_pos ","last_exceptions loc shadowing_rescue loc expression  ","last_exceptions loc shadowing_rescue source_range  ","rescues first  loc expression begin_pos ","first_rescue loc shadowing_rescue loc expression  begin_pos ","first_rescue loc shadowing_rescue source_range  begin_pos ","rescues first  loc expression ","first_rescue loc shadowing_rescue loc expression  ","first_rescue loc shadowing_rescue source_range  ","rescues first  loc ","node loc shadowing_rescue loc expression  source_buffer ","node loc shadowing_rescue source_range  source_buffer ","node loc shadowing_rescue loc expression  ","node loc shadowing_rescue source_range  ","rescues last  loc keyword end_pos ","last_rescue loc keyword last_rescue loc keyword end_pos  ","last_rescue loc keyword last_exceptions loc expression end_pos  ","rescues last  loc keyword ","rescues last  loc ","expression last_rescue loc keyword end_pos  ","expression last_exceptions loc expression end_pos  ","shadowing_rescue loc expression  end_pos ","shadowing_rescue source_range  end_pos ","shadowing_rescue loc expression  begin_pos ","shadowing_rescue source_range  begin_pos ","shadowing_rescue loc shadowing_rescue loc expression  ","shadowing_rescue loc shadowing_rescue source_range  "," find_shadowing_rescue  loc expression "," find_shadowing_rescue  loc "," find_ find_shadowing_rescue  "," find_shadowing_rescue  source_range "]}," RuboCop Runner file_offense_cache":{"type":"method","name":"file_offense_cache","children":[],"call":[" save_in_cache ","cache load ","cache valid? ","ResultCache  new "," cached_run? ","offenses any? ","@options [] "," cached_result "," standby_team ","@config_store for ","@config_store for_file "," save_in_ResultCache  new  "," save_in_ cached_result  ","ResultCache  new  load "," cached_result  load ","ResultCache  new  valid? "," cached_result  valid? "," ResultCache  new d_run? ","  cached_result d_run? ","cache load  any? "," ResultCache  new d_result ","  cached_result d_result ","@@config_store for _store for ","@@config_store for_file _store for ","@@config_store for _store for_file ","@@config_store for_file _store for_file "]}," RuboCop Runner file_offenses":{"type":"method","name":"file_offenses","children":[],"call":[" add_unneeded_disables ","offenses compact sort ","offenses compact "," do_inspection_loop "," get_processed_source "," file_offense_cache "," add_redundant_disables ","offenses sort reject freeze ","offenses sort reject ","offenses sort "," add_redundant_disables  compact sort "," add_redundant_disables  compact "," get_processed_ get_processed_source  "," add_redundant_disables  sort reject freeze "," add_redundant_disables  sort reject "," add_redundant_disables  sort "]}," RuboCop Formatter HTMLFormatter ERBContext possible_ellipses":{"type":"method","name":"possible_ellipses","children":[],"call":["location first_line == ","location last_line ","location first_line ","location single_line? "]}," RuboCop Formatter HTMLFormatter ERBContext source_after_highlight":{"type":"method","name":"source_after_highlight","children":[],"call":[" escape ","source_line [] ","offense highlighted_area end_pos ","offense highlighted_area ","offense location source_line ","offense location ","offense location source_line  [] ","offense location offense location source_line  "]}," RuboCop Formatter HTMLFormatter ERBContext source_before_highlight":{"type":"method","name":"source_before_highlight","children":[],"call":[" escape ","source_line [] ","offense highlighted_area begin_pos ","offense highlighted_area ","offense location source_line ","offense location ","offense location source_line  [] ","offense location offense location source_line  "]}," RuboCop Formatter HTMLFormatter ERBContext hightlight_source_tag":{"type":"method","name":"hightlight_source_tag","children":[],"call":[" escape ","offense highlighted_area source ","offense highlighted_area ","offense severity "]}," RuboCop Formatter DisabledConfigFormatter default_config":{"type":"method","name":"default_config","children":[],"call":["RuboCop ConfigLoader  default_configuration [] ","RuboCop ConfigLoader  default_configuration "]}," RuboCop Formatter DisabledConfigFormatter output_cop_param_comments":{"type":"method","name":"output_cop_param_comments","children":[],"call":[" output puts ","value join "," output ","value empty? ","value is_a? ","default_cfg [] ","params each ","params join ","config_params join ","p start_with? ","params reject ","output_buffer puts ","value uniq join ","value uniq ","default_cfg []  join ","default_cfg []  empty? ","default_cfg []  is_a? ","default_cfg []  uniq join ","default_cfg []  uniq "]}," RuboCop Formatter DisabledConfigFormatter cop_config_params":{"type":"method","name":"cop_config_params","children":[],"call":["default_cfg keys - - ","cfg keys ","default_cfg keys - ","default_cfg keys "]}," RuboCop Cop Style UnneededPercentQ acceptable_q?":{"type":"method","name":"acceptable_q?","children":[],"call":["s =~ ","src scan any? ","src scan ","src =~ ","node source ","node source  scan any? ","node source  scan ","node source  =~ "]}," RuboCop Cop Style TernaryParentheses parenthesized?":{"type":"method","name":"parenthesized?","children":[],"call":["node source =~ ","node source ","node begin_type? "]}," RuboCop Cop Style TernaryParentheses require_parentheses?":{"type":"method","name":"require_parentheses?","children":[],"call":[" style == "," style "]}," RuboCop Cop Style TernaryParentheses message":{"type":"method","name":"message","children":[],"call":[" format "," require_parentheses? "," parenthesized? "," require_parentheses_when_complex? ","node condition "]}," RuboCop Cop Style TernaryParentheses autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove ","condition loc end ","condition loc ","condition loc begin "," safe_assignment? ","corrector insert_after ","condition source_range ","corrector insert_before "," require_parentheses? "," lambda "," unsafe_autocorrect? "," parenthesized? ","node condition "," correct_unparenthesized "," correct_parenthesized ","node condition  loc end ","node condition  loc ","node condition  loc begin ","node condition  source_range ","node node condition  "]}," RuboCop Cop Style TernaryParentheses offense?":{"type":"method","name":"offense?","children":[],"call":["(and\n  (send nil :safe_assignment?\n    (lvar :condition))\n  (send nil :safe_assignment_allowed?)) ! "," safe_assignment_allowed? "," safe_assignment? "," parenthesized? "," require_parentheses? ! "," require_parentheses? "," parenthesized? ! "," infinite_loop? ! "," infinite_loop? ","parens ! "," complex_condition? "," style "," safe_assignment_allowed? ! ","node condition ","(and\n  (send nil :safe_assignment?\n    (lvar :node condition ))\n  (send nil :safe_assignment_allowed?)) ! "," parenthesized?  ! "," complex_node condition ? ","node node condition  "]}," RuboCop Cop Style TernaryParentheses on_if":{"type":"method","name":"on_if","children":[],"call":[" add_offense "," message ","node source_range "," offense? "," ternary? "," infinite_loop? ! "," infinite_loop? ","node ternary? "," only_closing_parenthesis_is_last_line? ","node condition "," autocorrect "," condition_as_parenthesized_one_line_pattern_matching? ","  message  ","node node condition  "," node condition _as_parenthesized_one_line_pattern_matching? "]}," RuboCop Cop Style SymbolArray bracket_replacement":{"type":"method","name":"bracket_replacement","children":[],"call":["syms join "," to_symbol_literal ","syms map "]}," RuboCop Cop Style SymbolArray percent_replacement":{"type":"method","name":"percent_replacement","children":[],"call":["syms join ","s gsub ","syms map "," escape_string "," needs_escaping? ","syms any? "]}," RuboCop Cop Style RescueEnsureAlignment format_message":{"type":"method","name":"format_message","children":[],"call":[" format ","end_loc column ","end_loc line ","kw_loc column ","kw_loc line ","kw_loc source "]}," RuboCop Cop Style ParallelAssignment GenericCorrector source":{"type":"method","name":"source","children":[],"call":["node source ","node loc begin nil? ","node loc begin ","node loc ","node sym_type? ","node str_type? "]}," RuboCop Cop Style NumericPredicate invert":{"type":"method","name":"invert","children":[],"call":["(pair\n  (sym :>)\n  (sym :<)) [] "," lambda "]}," RuboCop Cop Style NumericPredicate replacement_supported?":{"type":"method","name":"replacement_supported?","children":[],"call":[" target_ruby_version >= "," target_ruby_version ","(sym :>) include? "]}," RuboCop Cop Style NumericPredicate require_parentheses?":{"type":"method","name":"require_parentheses?","children":[],"call":["node source !~ ","node source ","node binary_operation? ","node parenthesized? ! ","node parenthesized? ","node send_type? "]}," RuboCop Cop Style NumericPredicate parenthesized_source":{"type":"method","name":"parenthesized_source","children":[],"call":["node source "," require_parentheses? "]}," RuboCop Cop Style NumericPredicate replacement":{"type":"method","name":"replacement","children":[],"call":["(send\n  (lvar :numeric) :source) join ","REPLACEMENTS  [] ","operation to_s ","numeric source ","(send nil :parenthesized_source\n  (lvar :numeric)) join ","REPLACEMENTS  invert [] ","REPLACEMENTS  invert "," parenthesized_source "," style == "," style "]}," RuboCop Cop Style NumericPredicate autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node loc expression ","node loc "," lambda "," check "]}," RuboCop Cop Style NumericPredicate check":{"type":"method","name":"check","children":[],"call":[" replacement "," replacement_supported? "," predicate "," inverted_comparison "," invert "," comparison "," style == "," style "]}," RuboCop Cop Style NumericPredicate on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format ","node source ","node loc expression ","node loc "," check "," ignored_method? ","ancestor method_name ","node each_ancestor any? ","node each_ancestor ","node method_name ","COMPARISON_METHODS  include? ","corrector replace "," allowed_method_name? "]}," RuboCop Cop Style NestedModifier right_hand_operand":{"type":"method","name":"right_hand_operand","children":[],"call":["left_hand_keyword == "," requires_parens? ","cond source ","node loc keyword source ","node loc keyword ","node loc ","node keyword ","node condition ","node condition source ","condition source "," add_parentheses_to_method_arguments ","condition operator_method? ! ","condition operator_method? ","condition arguments empty? ! ","condition arguments empty? ","condition arguments ","condition send_type? ","left_hand_node loc keyword source  == ","node loc node loc keyword source  source ","node loc node loc keyword source  ","node node loc keyword source  ","node node condition  ","node node condition  source ","node condition  source ","node condition  operator_method? ! ","node condition  operator_method? ","node condition  arguments empty? ! ","node condition  arguments empty? ","node condition  arguments ","node condition  send_type? "]}," RuboCop Cop Style NestedModifier left_hand_operand":{"type":"method","name":"left_hand_operand","children":[],"call":["operator == ","&& freeze ","cond or_type? ","cond source ","node condition or_type? ","node condition ","node condition source "]}," RuboCop Cop Style NestedModifier replacement_operator":{"type":"method","name":"replacement_operator","children":[],"call":["|| freeze ","&& freeze ","keyword == ","if freeze "]}," RuboCop Cop Style MethodMissing implements_respond_to_missing?":{"type":"method","name":"implements_respond_to_missing?","children":[],"call":[" respond_to_missing_def? ","node parent children any? ","node parent children ","node parent "," respond_to_missing_defs? ","node defs_type? ","node def_type? ","node parent each_child_node any? ","node parent each_child_node ","node type ","sibling method? "]}," RuboCop Cop Style MethodMissing calls_super?":{"type":"method","name":"calls_super?","children":[],"call":["node descendants any? ","node descendants "]}," RuboCop Cop Style MethodMissing message":{"type":"method","name":"message","children":[],"call":[" format ","instructions join ","instructions << ","fall back on `super` freeze "," calls_super? ","define `respond_to_missing?` freeze "," implements_respond_to_missing? "]}," RuboCop Cop Style MethodMissing check":{"type":"method","name":"check","children":[],"call":[" add_offense "," implements_respond_to_missing? "," calls_super? "]}," RuboCop Cop Style MethodMissing on_method_def":{"type":"method","name":"on_method_def","children":[],"call":[" check ","method_name == "]}," RuboCop Cop Style EmptyLiteral preferred_string_literal":{"type":"method","name":"preferred_string_literal","children":[],"call":[" enforce_double_quotes? "]}," RuboCop Cop Style EmptyLinesAroundAccessModifier line_range":{"type":"method","name":"line_range","children":[],"call":["Parser Source Range  new ","node source_range end_pos ","node source_range ","node source_range begin_pos - ","node loc column ","node loc ","node source_range begin_pos "," processed_source buffer "," processed_source "," range_between "]}," RuboCop Cop Style EmptyLines previous_and_current_lines_empty?":{"type":"method","name":"previous_and_current_lines_empty?","children":[],"call":[" processed_source [] empty? "," processed_source [] ","line - "," processed_source "]}," RuboCop Cop Style EmptyLines exceeds_line_offset?":{"type":"method","name":"exceeds_line_offset?","children":[],"call":["line_diff > "]}," RuboCop Cop Style EmptyLines each_extra_empty_line":{"type":"method","name":"each_extra_empty_line","children":[],"call":[" source_range "," processed_source buffer "," processed_source "," previous_and_current_lines_empty? ","(erange\n  (begin\n    (send\n      (lvar :prev_line) :+\n      (int 1)))\n  (lvar :cur_line)) each ","prev_line + "," exceeds_line_offset? ","cur_line - ","lines each "]}," RuboCop Cop Style EachWithObject autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","first_arg source ","second_arg loc expression ","second_arg loc ","second_arg source ","first_arg loc expression ","first_arg loc ","method loc selector ","method loc "," lambda ","corrector remove ","return_value loc expression ","return_value loc "," return_value ","node body ","node arguments ","node send_node loc selector ","node send_node loc ","node send_node "," whole_line_expression "," return_value_occupies_whole_line? "," return_value  loc expression "," return_value  loc ","  return_value  ","  return_value _occupies_whole_line? "]}," RuboCop Cop Style DotPosition selector_range":{"type":"method","name":"selector_range","children":[],"call":["node loc begin ","node loc ","node loc selector "]}," RuboCop Cop Style DotPosition correct_dot_position_style?":{"type":"method","name":"correct_dot_position_style?","children":[],"call":["dot_line != ","dot_line == "," style "]}," RuboCop Cop Style DotPosition line_between?":{"type":"method","name":"line_between?","children":[],"call":["(send\n  (lvar :first_line) :-\n  (lvar :second_line)) > ","first_line - "]}," RuboCop Cop Style UnlessCorrector extract_tail_branches":{"type":"method","name":"extract_tail_branches","children":[],"call":[" tail "]}," RuboCop Cop Style ConditionalCorrectorHelper replace_branch_assignment":{"type":"method","name":"replace_branch_assignment","children":[],"call":["corrector replace ","assignment source ","branch source_range ","assignment bracketed? ! ","assignment bracketed? ","assignment array_type? ","assignment assignment source  ","branch assignment source _range "]}," RuboCop Cop Style ConditionalCorrectorHelper correct_if_branches":{"type":"method","name":"correct_if_branches","children":[],"call":["corrector insert_before "," indent "," lhs ","node loc end ","node loc "," replace_branch_assignment "," correct_branches ","node source_range "," extract_tail_branches "]}," RuboCop Cop Style CommentAnnotation concat_length":{"type":"method","name":"concat_length","children":[],"call":["a + ","e to_s length ","e to_s ","args reduce ","acc + ","elem to_s length ","elem to_s "]}," RuboCop Cop Style BracesAroundHashParameters comment_on_line?":{"type":"method","name":"comment_on_line?","children":[],"call":["c loc line == ","c loc line ","c loc "," processed_source comments any? "," processed_source comments "," processed_source "]}," RuboCop Cop Style BracesAroundHashParameters right_brace_and_space":{"type":"method","name":"right_brace_and_space","children":[],"call":[" range_with_surrounding_comma "," range_with_surrounding_space ","space [] "]}," RuboCop Cop Style BracesAroundHashParameters remove_braces_with_whitespace":{"type":"method","name":"remove_braces_with_whitespace","children":[],"call":["corrector remove "," range_with_surrounding_space ","node loc begin ","node loc "," remove_braces "," comment_on_line? ","right_brace_and_space line "," right_brace_and_space ","node loc end ","space [] "," remove_braces_with_range "," left_brace_and_space "," right_whole_line_range "," left_whole_line_range ","node multiline? "," processed_source comment_on_line? "," processed_source ","loc end ","loc begin ","node node loc  begin ","node node loc  "," right_brace_and_space  line ","  right_brace_and_space  ","node node loc  end ","  range_with_surrounding_space  ","  left_brace_and_space  ","node loc  end ","node loc  begin "]}," RuboCop Cop Rails Validation correct_validate_type":{"type":"method","name":"correct_validate_type","children":[],"call":["corrector insert_after ","node loc expression ","node loc ","corrector replace ","options source ","options loc expression ","options loc ","method_name to_s split [] ","method_name to_s split ","method_name to_s ","arg type != ","arg type ","args find ","arg sym_type? ! ","arg sym_type? ","node method_name to_s split [] ","node method_name to_s split ","node method_name to_s ","node method_name ","node arguments find ","node arguments "," braced_options ","last_argument loc expression ","last_argument loc ","last_argument hash_type? ","node arguments last ","last_argument source_range ","node arguments last  loc expression ","node arguments last  loc ","node arguments last  hash_type? ","node arguments last  source_range ","last_argument source_last_argument source_range  "]}," RuboCop Cop Rails SaveBang expected_signature?":{"type":"method","name":"expected_signature?","children":[],"call":["node method_args first literal? ! ","node method_args first literal? ","node method_args first ","node method_args ","node method_args first hash_type? ","node method_name != ","node method_name ","node method_args length == ","node method_args length ","node method_args empty? ","node first_argument literal? ! ","node first_argument literal? ","node first_argument ","node first_argument hash_type? ","node arguments one? ","node arguments ","node arguments? ! ","node arguments? "]}," RuboCop Cop Rails SaveBang return_value_used?":{"type":"method","name":"return_value_used?","children":[],"call":["node sibling_index zero? ","node sibling_index ","node parent if_type? ","node parent ","node parent lvasgn_type? "]}," RuboCop Cop Rails SaveBang autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," lambda ","node method_name ","node loc selector ","node loc "]}," RuboCop Cop Rails SaveBang on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format ","node method_name to_s ","node method_name ","node loc selector ","node loc "," expected_signature? "," return_value_used? ","PERSIST_METHODS  include? "," check_used_in_conditional "," return_value_assigned? "," last_call_of_method? "," add_offense_for_node "," explicit_return? "," implicit_return? "," argument? "," persist_method? "]}," RuboCop Cop Performance CaseWhenSplat replacement":{"type":"method","name":"replacement","children":[],"call":["new_condition join ","condition source "," expand_percent_array ","variable array_type? ","variable respond_to? ","conditions map ","ordered_conditions join ","ordered_conditions map! ","ordered_conditions flatten! ","cond splat_type? ! ","cond splat_type? ","conditions partition ","reordered flatten map join ","reordered flatten map ","reordered flatten ","conditions partition reverse ","conditions map  join ","conditions partition reverse  flatten map join ","conditions partition reverse  flatten map ","conditions partition reverse  flatten "]}," RuboCop Cop Offense column_range":{"type":"method","name":"column_range","children":[],"call":[" location column_range "," location "," last_column "," column "]}," RuboCop Cop Offense last_line":{"type":"method","name":"last_line","children":[],"call":[" location last_line "," location "]}," RuboCop Cop Offense first_line":{"type":"method","name":"first_line","children":[],"call":[" location first_line "," location "]}," RuboCop Cop Offense column_length":{"type":"method","name":"column_length","children":[],"call":[" source_line length - "," column "," source_line length "," source_line "," column_range count "," column_range "," first_line == "," last_line "," first_line "]}," RuboCop Cop Offense source_line":{"type":"method","name":"source_line","children":[],"call":[" location source_line "," location "]}," RuboCop Cop SpaceInside range_between_tokens":{"type":"method","name":"range_between_tokens","children":[],"call":["Parser Source Range  new ","t2 pos begin_pos ","t2 pos ","t1 pos end_pos ","t1 pos "," processed_source buffer "," processed_source "," range_between "]}," RuboCop Cop SpaceInside matching_brackets?":{"type":"method","name":"matching_brackets?","children":[],"call":["brackets right_side? ","brackets left_side? "]}," RuboCop Cop SpaceInside each_extraneous_space":{"type":"method","name":"each_extraneous_space","children":[],"call":[" range_between_tokens ","brackets kind "," space_between? ","t2 pos line == ","t1 pos line ","t1 pos ","t2 pos line ","t2 pos ","t2 type == ","t2 type "," matching_brackets? ","tokens each_cons ","Brackets  new "," specifics ","Brackets  new  kind "," matching_Brackets  new ? "]}," RuboCop Cop Lint UselessAccessModifier any_context_creating_methods?":{"type":"method","name":"any_context_creating_methods?","children":[],"call":[" send "," class def_node_matcher "," class "," respond_to? ","(begin\n  (lvar :m)) to_sym "," cop_config fetch any? "," cop_config fetch "," cop_config "," public_send "]}," RuboCop Cop Lint UselessAccessModifier eval_call?":{"type":"method","name":"eval_call?","children":[],"call":[" any_context_creating_methods? "," class_or_module_or_struct_new_call? "," class_or_instance_eval? "," class_constructor? ","child class_constructor? "]}," RuboCop Cop Lint NextWithoutAccumulator parent_block_node":{"type":"method","name":"parent_block_node","children":[],"call":["n type == ","n type ","node each_ancestor find ","node each_ancestor ","node each_ancestor first "]}," RuboCop Cop Lint IneffectiveAccessModifier revert_method_uselessness":{"type":"method","name":"revert_method_uselessness","children":[],"call":["@useless delete ","sym children [] ","sym children ","sym sym_type? ","methods each ","sym value "]}," RuboCop Cop Lint IneffectiveAccessModifier mark_method_as_useless":{"type":"method","name":"mark_method_as_useless","children":[],"call":["@useless []= ","node method_name "]}," RuboCop Cop Lint IneffectiveAccessModifier change_visibility":{"type":"method","name":"change_visibility","children":[],"call":[]}," RuboCop Cop Lint IneffectiveAccessModifier check_child_scope":{"type":"method","name":"check_child_scope","children":[],"call":[" check_scope ","node kwbegin_type? "," revert_method_uselessness "," private_class_method "," mark_method_as_useless ","cur_vis != ","node defs_type? "," change_visibility "," access_modifier "," check_defs "," check_send ","node type "," check_scope  != "," change_visibility  != "," check_send  != "]}," RuboCop Cop Lint BlockAlignment remove_space_before":{"type":"method","name":"remove_space_before","children":[],"call":["corrector remove "," lambda ","Parser Source Range  new ","end_pos - "," range_between "," Parser Source Range  new _between ","  range_between _between "]}," RuboCop Cop Lint BlockAlignment add_space_before":{"type":"method","name":"add_space_before","children":[],"call":["corrector insert_before ","  * "," lambda "]}," RuboCop StringUtil Jaro compute_non_zero_distance":{"type":"method","name":"compute_non_zero_distance","children":[],"call":["sum / ","(send\n  (lvar :matched_count) :/\n  (send\n    (send\n      (send nil :shorter) :size) :to_f)) + + ","(send\n  (lvar :matched_count) :-\n  (send\n    (lvar :transposition_count) :/\n    (int 2))) / ","matched_count - ","transposition_count / ","(send\n  (lvar :matched_count) :/\n  (send\n    (send\n      (send nil :shorter) :size) :to_f)) + ","matched_count / "," longer size to_f "," longer size "," longer "," shorter size to_f "," shorter size "," shorter ","(send\n  (lvar :matched_count) :/\n  (send\n    (send\n      (send nil :shorter) :size) :to_f)) + +  / "]}," RuboCop Runner iterate_until_no_changes":{"type":"method","name":"iterate_until_no_changes","children":[],"call":[" raise ","InfiniteCorrectionLoop  new ","source path ","(op-asgn\n  (lvasgn :iterations) :+\n  (int 1)) > "," check_for_infinite_loop "," loop "]}," RuboCop Runner filtered_run?":{"type":"method","name":"filtered_run?","children":[],"call":["@options [] "]}," RuboCop Runner check_for_unneded_disables?":{"type":"method","name":"check_for_unneded_disables?","children":[],"call":[" filtered_run? ! "," filtered_run? ","source disabled_line_ranges empty? ! ","source disabled_line_ranges empty? ","source disabled_line_ranges "]}," RuboCop Runner each_inspected_file":{"type":"method","name":"each_inspected_file","children":[],"call":["@options [] "," considered_failure? ","offenses any? "," process_file "," aborting? ","files reduce "," trap_interrupt "," process_file  any? "]}," RuboCop ResultCache remove_oldest_files":{"type":"method","name":"remove_oldest_files","children":[],"call":[" remove_files ","File  mtime ","files sort_by "," puts ","1 + ","files length / ","files length ","(send\n  (send\n    (lvar :files) :length) :/\n  (int 2)) + "]}," RuboCop ResultCache requires_file_removal?":{"type":"method","name":"requires_file_removal?","children":[],"call":["file_count > ","config_store for for_all_cops [] ","config_store for for_all_cops ","config_store for ","config_store for_dir for_all_cops [] ","config_store for_dir for_all_cops ","config_store for_dir ","config_store for_pwd for_all_cops [] ","config_store for_pwd for_all_cops ","config_store for_pwd "]}," RuboCop RemoteConfig request":{"type":"method","name":"request","children":[],"call":["response is_a? ","http request ","request []= ","File  stat mtime rfc2822 ","File  stat mtime ","File  stat "," cache_path "," cache_path_exists? ","Net HTTP Get  new ","@uri request_uri ","http use_ssl= ","@uri instance_of? ","Net HTTP  new ","@uri port ","@uri hostname "," handle_response ","uri request_uri ","uri instance_of? ","uri port ","uri hostname "," raise ","limit zero? "," generate_request ","http request  is_a? ","http Net HTTP Get  new  ","Net HTTP  new  request ","Net HTTP Get  new  []= ","@uri Net HTTP Get  new _uri ","Net HTTP  new  use_ssl= "," handle_http request  ","uri Net HTTP Get  new _uri "," generate_Net HTTP Get  new  "]}," RuboCop ProcessedSource tokenize":{"type":"method","name":"tokenize","children":[],"call":["Token  from_parser_token ","tokens map ","ast complete! ","parser tokenize ","ast respond_to? "]}," RuboCop NodePattern Macros node_search":{"type":"method","name":"node_search","children":[],"call":[" class_eval ","lineno to_i "," node_search_body ","compiler match_code ","compiler emit_trailing_params "]}," RuboCop NodePattern Macros node_search_all":{"type":"method","name":"node_search_all","children":[],"call":[" node_search ","compiler emit_trailing_params ","yieldval empty? ","compiler emit_capture_list ","compiler emit_yield_capture ","compiler emit_capture_list  empty? "]}," RuboCop NodePattern Macros node_search_first":{"type":"method","name":"node_search_first","children":[],"call":[" node_search "]}," RuboCop NodePattern Compiler next_temp_value":{"type":"method","name":"next_temp_value","children":[],"call":[]}," RuboCop NodePattern Compiler with_temp_variable":{"type":"method","name":"with_temp_variable","children":[],"call":[" next_temp_value "]}," RuboCop NodePattern Compiler with_temp_node":{"type":"method","name":"with_temp_node","children":[],"call":[" with_temp_variable ","(send nil :with_temp_variables) gsub "," with_temp_variables "]}," RuboCop NodePattern Compiler compile_expr_with_capture_check":{"type":"method","name":"compile_expr_with_capture_check","children":[],"call":[" fail_due_to ","@captures != "," compile_expr "," compile_ compile_expr  "]}," RuboCop NodePattern Compiler compile_expr_with_captures":{"type":"method","name":"compile_expr_with_captures","children":[],"call":[" compile_expr "," compile_ compile_expr  "]}," RuboCop NodePattern Compiler union_terms":{"type":"method","name":"union_terms","children":[],"call":["tokens shift ","terms << "," compile_expr_with_capture_check ","tokens first == ","tokens first "," compile_expr_with_captures "]}," RuboCop Formatter FormatterSet formatter_class":{"type":"method","name":"formatter_class","children":[],"call":[" builtin_formatter_class "," custom_formatter_class "]}," RuboCop Formatter DisabledConfigFormatter output_exclude_path":{"type":"method","name":"output_exclude_path","children":[],"call":["output puts ","file_path relative_path_from ","Pathname  new ","output_buffer puts ","regexp source ","file_path file_path relative_path_from _path_from ","Pathname  new  relative_path_from "]}," RuboCop Formatter DisabledConfigFormatter excludes":{"type":"method","name":"excludes","children":[],"call":["(send\n  (begin\n    (or\n      (send\n        (lvar :cfg) :[]\n        (str \"Exclude\"))\n      (array))) :+\n  (lvar :offending_files)) uniq ","(or\n  (send\n    (lvar :cfg) :[]\n    (str \"Exclude\"))\n  (array)) + ","cfg [] ","config [] ","ConfigStore  new for ","ConfigStore  new ","(send\n  (begin\n    (or\n      (lvar :cop_exclude)\n      (array))) :+\n  (lvar :offending_files)) uniq ","(or\n  (lvar :cop_exclude)\n  (array)) + "," warn "," smart_path ","config loaded_path ","cop_exclude != "," default_config [] "," default_config "," merge_mode_for_exclude? ","ConfigStore  new for  [] ","(send\n  (begin\n    (or\n      (lvar :cfg [] )\n      (array))) :+\n  (lvar :offending_files)) uniq ","(or\n  (lvar :cfg [] )\n  (array)) + ","ConfigStore  new for  loaded_path ","cfg []  != "," default_ConfigStore  new for  [] "," default_ConfigStore  new for  "]}," RuboCop Cop VariableForce descendant_reference":{"type":"method","name":"descendant_reference","children":[],"call":["VariableReference  new ","asgn_node children first ","asgn_node children ","asgn_node lvasgn_type? ","node children first ","node children ","AssignmentReference  new ","node type ","node children first  children first ","node children first  children ","node children first  lvasgn_type? "]}," RuboCop Cop VariableForce each_descendant_reference":{"type":"method","name":"each_descendant_reference","children":[],"call":[" descendant_reference ","loop_node each_descendant "," descendant_ descendant_reference  "]}," RuboCop Cop VariableForce regexp_captured_names":{"type":"method","name":"regexp_captured_names","children":[],"call":["regexp named_captures keys ","regexp named_captures ","Regexp  new ","node children [] children [] ","node children [] children ","node children [] ","node children ","(send\n  (send\n    (send\n      (lvar :node) :children) :select\n    (block-pass\n      (sym :str_type?))) :map) join ","child children first ","child children ","node children select map ","node children select ","node to_regexp ","Regexp  new  named_captures keys ","node to_regexp  named_captures keys ","Regexp  new  named_captures ","node to_regexp  named_captures ","node to_Regexp  new  ","node to_node to_regexp  "]}," RuboCop Cop VariableForce assignment?":{"type":"method","name":"assignment?","children":[],"call":[]}," RuboCop Cop Util stripped_source_upto":{"type":"method","name":"stripped_source_upto","children":[],"call":[" processed_source [] map "," processed_source [] "," processed_source "]}," RuboCop Cop Util preceed?":{"type":"method","name":"preceed?","children":[],"call":[" line_distance == "," line_distance "]}," RuboCop Cop Util line_distance":{"type":"method","name":"line_distance","children":[],"call":["n2 loc line - ","n1 loc line ","n1 loc ","n2 loc line ","n2 loc "]}," RuboCop Cop Util same_line?":{"type":"method","name":"same_line?","children":[],"call":["n1 loc line == ","n2 loc line ","n2 loc ","n1 loc line ","n1 loc ","n2 respond_to? ","n1 respond_to? ","node1 loc line == ","node2 loc line ","node2 loc ","node1 loc line ","node1 loc ","node2 respond_to? ","node1 respond_to? ","line1 == "," line "," line  == "]}," RuboCop Cop Util range_between":{"type":"method","name":"range_between","children":[],"call":["Parser Source Range  new "," processed_source buffer "," processed_source "]}," RuboCop Cop Style WordArray correct_bracketed":{"type":"method","name":"correct_bracketed","children":[],"call":["corrector replace ","words join ","node source_range "," lambda "," to_string_literal ","w children [] ","w children ","node children map ","node children ","word children [] ","word children "," trim_string_interporation_escape_character ","word source ","word dstr_type? "," to_ to_string_literal  "]}," RuboCop Cop Style WordArray correct_percent":{"type":"method","name":"correct_percent","children":[],"call":["corrector replace ","node source_range "," lambda "," autocorrect_words ","node loc line ","node loc "," needs_escaping? ","w children [] ","w children ","words any? ","node children "," autocorrect_node children  ","node children  any? "]}," RuboCop Cop Style VariableNumber message":{"type":"method","name":"message","children":[],"call":[" format "]}," RuboCop Cop Style VariableNumber on_arg":{"type":"method","name":"on_arg","children":[],"call":[" check_name ","node loc name ","node loc "]}," RuboCop Cop Style VariableNumber on_cvasgn":{"type":"method","name":"on_cvasgn","children":[],"call":[" check_name ","node loc name ","node loc "]}," RuboCop Cop Style VariableNumber on_ivasgn":{"type":"method","name":"on_ivasgn","children":[],"call":[" check_name ","node loc name ","node loc "]}," RuboCop Cop Style VariableNumber on_lvasgn":{"type":"method","name":"on_lvasgn","children":[],"call":[" check_name ","node loc name ","node loc "]}," RuboCop Cop Style UnneededPercentQ allowed_percent_q?":{"type":"method","name":"allowed_percent_q?","children":[],"call":[" acceptable_capital_q? ","node source start_with? ","node source "," acceptable_q? "]}," RuboCop Cop Style UnneededPercentQ interpolated_quotes?":{"type":"method","name":"interpolated_quotes?","children":[],"call":["node source include? ","node source "]}," RuboCop Cop Style UnneededCapitalW requires_interpolation?":{"type":"method","name":"requires_interpolation?","children":[],"call":[" double_quotes_acceptable? ","string str_content ","string dstr_type? ","node child_nodes any? ","node child_nodes ","string source == ","string source "," double_quotes_required? "]}," RuboCop Cop Style TrailingUnderscoreVariable reverse_index":{"type":"method","name":"reverse_index","children":[],"call":["collection size - - ","collection reverse index ","collection reverse ","collection size - ","collection size "]}," RuboCop Cop Style TrailingUnderscoreVariable splat_variable_before?":{"type":"method","name":"splat_variable_before?","children":[],"call":["variables [] any? ","variables [] "," reverse_index "]}," RuboCop Cop Style TrailingUnderscoreVariable find_first_possible_offense":{"type":"method","name":"find_first_possible_offense","children":[],"call":["var to_s start_with? ","var to_s ","var == "," allow_named_underscore_variables ","variables reduce ","(sym :lvasgn) include? ","variable type ","var to_s start_with? ! ","var != ","DISALLOW  include? "]}," RuboCop Cop Style TernaryParentheses unparenthesized_method_call?":{"type":"method","name":"unparenthesized_method_call?","children":[],"call":["argument !~ "," method_call_argument ","argument parenthesized? ! ","argument parenthesized? ","child parenthesized? ! ","child parenthesized? "," method_name =~ "," method_name ","(str \"^[a-z]\") match? "," method_call_argument  !~ "," method_call_ method_call_argument  "," method_call_argument  parenthesized? ! "," method_call_argument  parenthesized? "]}," RuboCop Cop Style TernaryParentheses unsafe_autocorrect?":{"type":"method","name":"unsafe_autocorrect?","children":[],"call":[" unparenthesized_method_call? ","condition children any? ","condition children "," below_ternary_precedence? "]}," RuboCop Cop Style TernaryParentheses infinite_loop?":{"type":"method","name":"infinite_loop?","children":[],"call":[" redundant_parentheses_enabled? "," require_parentheses? "," require_parentheses_when_complex? "]}," RuboCop Cop Style TernaryParentheses redundant_parentheses_enabled?":{"type":"method","name":"redundant_parentheses_enabled?","children":[],"call":["@config for_cop [] ","@config for_cop ","@config for_cop fetch "]}," RuboCop Cop Style SymbolProc shortenable_args?":{"type":"method","name":"shortenable_args?","children":[],"call":[" non_shortenable_args? ! "," non_shortenable_args? ","block_args children one? ","block_args children "]}," RuboCop Cop Style SymbolProc shortenable_body?":{"type":"method","name":"shortenable_body?","children":[],"call":["receiver lvar_type? ","block_body send_type? "]}," RuboCop Cop Style SymbolProc argument_matches_receiver?":{"type":"method","name":"argument_matches_receiver?","children":[],"call":["block_arg_name == ","block_args children first ","block_args children "]}," RuboCop Cop Style SpaceInsideStringInterpolation space_on_each_side?":{"type":"method","name":"space_on_each_side?","children":[],"call":["interp_with_surrounding_space source == ","interp source ","interp_with_surrounding_space source "," range_with_surrounding_space ","node source_range "," range_with_surrounding_space  source == ","node source_range _with_surrounding_space source == ","node source_range  source "," range_with_surrounding_space  source ","node source_range _with_surrounding_space source "]}," RuboCop Cop Style SpaceInsideStringInterpolation space_on_any_side?":{"type":"method","name":"space_on_any_side?","children":[],"call":["interp_with_surrounding_space != "," range_with_surrounding_space ","node source_range "," range_with_surrounding_space  != ","node source_range _with_surrounding_space != "]}," RuboCop Cop Style SpaceInsideStringInterpolation each_style_violation":{"type":"method","name":"each_style_violation","children":[],"call":[" space_on_each_side? ! "," space_on_each_side? "," style == "," style "," space_on_any_side? ","begin_node children last ","begin_node children ","node each_child_node "]}," RuboCop Cop Style SpaceInsideHashLiteralBraces ambiguous_or_unexpected_style_detected":{"type":"method","name":"ambiguous_or_unexpected_style_detected","children":[],"call":[" unexpected_style_detected "," ambiguous_style_detected "]}," RuboCop Cop Style SpaceInsideHashLiteralBraces right_brace?":{"type":"method","name":"right_brace?","children":[],"call":["token type == ","token type "]}," RuboCop Cop Style SpaceInsideHashLiteralBraces left_brace?":{"type":"method","name":"left_brace?","children":[],"call":["token type == ","token type "]}," RuboCop Cop Style SpaceInsideHashLiteralBraces hash_literal_with_braces":{"type":"method","name":"hash_literal_with_braces","children":[],"call":[" right_brace? ","tokens [] "," index_of_last_token "," left_brace? "," index_of_first_token "," processed_source tokens "," processed_source "," processed_source tokens  [] "," processed_source  processed_source tokens  "]}," RuboCop Cop Style SpaceInsideBlockBraces check_right_brace":{"type":"method","name":"check_right_brace","children":[],"call":[" space_inside_right_brace "," no_space ","right_brace end_pos ","right_brace begin_pos ","block_length zero? ","inner =~ "]}," RuboCop Cop Style SpaceInsideBlockBraces check_left_brace":{"type":"method","name":"check_left_brace","children":[],"call":[" space_inside_left_brace "," no_space_inside_left_brace ","inner =~ "]}," RuboCop Cop Style SpaceAroundOperators offense_message":{"type":"method","name":"offense_message","children":[],"call":["op source "," excess_trailing_space? "," excess_leading_space? ","with_space source !~ ","with_space source ","with_space is? ","op is? "]}," RuboCop Cop Style SpaceAroundOperators offense":{"type":"method","name":"offense","children":[],"call":[" offense_message "]}," RuboCop Cop Style SingleLineMethods each_part":{"type":"method","name":"each_part","children":[],"call":["body source_range ","part source_range ","body each_child_node ","body begin_type? "]}," RuboCop Cop Style SingleLineMethods end_of_line_comment":{"type":"method","name":"end_of_line_comment","children":[],"call":["c loc line == ","c loc line ","c loc "," processed_source comments find "," processed_source comments "," processed_source "]}," RuboCop Cop Style Semicolon tokens_for_lines":{"type":"method","name":"tokens_for_lines","children":[],"call":["token pos line ","token pos ","@processed_source tokens group_by ","@processed_source tokens "," processed_source tokens group_by "," processed_source tokens "," processed_source "]}," RuboCop Cop Style Semicolon each_semicolon":{"type":"method","name":"each_semicolon","children":[],"call":["tokens first pos column ","tokens first pos ","tokens first ","tokens first type == ","tokens first type ","tokens last pos column ","tokens last pos ","tokens last ","tokens last type == ","tokens last type "," tokens_for_lines each "," tokens_for_lines ","tokens first column ","tokens first semicolon? ","tokens last column ","tokens last semicolon? ","tokens [] ","tokens [] column ","semicolon_pos == "," semicolon_position "," semicolon_position  == ","  semicolon_position ition "]}," RuboCop Cop Style SafeNavigation range":{"type":"method","name":"range","children":[],"call":["Parser Source Range  new ","node_expression end_pos ","method_expression end_pos ","method_expression begin_pos ","node_expression begin_pos ","node or_type? ","node and_type? ","method_call loc expression ","method_call loc ","node loc expression ","node loc ","node loc expression source_buffer ","node loc expression  end_pos ","method_call loc expression  end_pos ","method_call loc expression  begin_pos ","node loc expression  begin_pos ","node loc expression node loc expression source_buffer  "]}," RuboCop Cop Style SafeNavigation autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove "," range ","corrector insert_before ","method_call loc dot ","method_call loc ","method loc dot ","method loc ","method_call block_type? ","node loc keyword is? ","node loc keyword ","node loc ","node loc respond_to? "," lambda ","(or\n  (lvar :method_call)\n  (lvar :body)) loc dot ","(or\n  (lvar :method_call)\n  (lvar :body)) loc "," end_range "," begin_range ","body block_type? ","node node_parts ","node if_type? ","matching_receiver parent "," extract_parts "," add_safe_nav_to_all_methods_in_chain "," handle_comments "," method_call ","node node_parts [] ","method_call safe_navigation? "," extract_body "," method_call  loc dot "," method_call  loc "," method_call  block_type? ","(or\n  (lvar : method_call )\n  (lvar :body)) loc dot ","(or\n  (lvar :method_call)\n  (lvar :node node_parts [] )) loc dot ","(or\n  (lvar :method_call)\n  (lvar : extract_body )) loc dot ","(or\n  (lvar : method_call )\n  (lvar :body)) loc ","(or\n  (lvar :method_call)\n  (lvar :node node_parts [] )) loc ","(or\n  (lvar :method_call)\n  (lvar : extract_body )) loc ","node node_parts []  block_type? "," extract_body  block_type? ","  method_call  "," method_call  safe_navigation? "," extract_node node_parts []  "," extract_ extract_body  "]}," RuboCop Cop Style SafeNavigation check_node":{"type":"method","name":"check_node","children":[],"call":[" add_offense ","method =~ ","NIL_METHODS  include? ","receiver == "," safe_navigation_candidate "," target_ruby_version < "," target_ruby_version "," extract_parts ","node loc else nil? ! ","node loc else nil? ","node loc else ","node loc ","node loc respond_to? "," elsif? "," if_else? "," allowed_if_condition? "," unsafe_method? "," unsafe_method_used? "," chain_size > "," chain_size "," use_var_only_in_unless_modifier? "," autocorrect ","method_chain method? "," chain_length > "," max_chain_length "," chain_length ","receiver nil? ","receiver != "]}," RuboCop Cop Style SafeNavigation on_or":{"type":"method","name":"on_or","children":[],"call":[" check_node "]}," RuboCop Cop Style SafeNavigation on_and":{"type":"method","name":"on_and","children":[],"call":[" check_node "]}," RuboCop Cop Style SafeNavigation on_if":{"type":"method","name":"on_if","children":[],"call":[" check_node "," ternary? ","node ternary? "," allowed_if_condition? "]}," RuboCop Cop Style RescueEnsureAlignment whitespace_range":{"type":"method","name":"whitespace_range","children":[],"call":[" range_between ","begin_pos - ","node loc keyword column ","node loc keyword ","node loc ","node loc keyword begin_pos ","node loc keyword begin_pos  - ","node loc keyword node loc keyword begin_pos  "]}," RuboCop Cop Style RegexpLiteral allowed_percent_r_literal?":{"type":"method","name":"allowed_percent_r_literal?","children":[],"call":[" contains_disallowed_slash? "," style == "," style ","node multiline? "," allowed_mixed_percent_r? "," omit_parentheses_style? "," allowed_omit_parentheses_with_percent_r_literal? "]}," RuboCop Cop Style RegexpLiteral allowed_slash_literal?":{"type":"method","name":"allowed_slash_literal?","children":[],"call":[" contains_disallowed_slash? ! "," contains_disallowed_slash? ","node single_line? "," style == "," style "," allowed_mixed_slash? "]}," RuboCop Cop Style RedundantSelf add_scope":{"type":"method","name":"add_scope","children":[],"call":["@local_variables_scopes []= ","node descendants each ","node descendants ","node each_descendant "]}," RuboCop Cop Style RedundantParentheses only_begin_arg?":{"type":"method","name":"only_begin_arg?","children":[],"call":["args first begin_type? ","args first ","args size == ","args size ","args one? "]}," RuboCop Cop Style RedundantParentheses allowed_method_call?":{"type":"method","name":"allowed_method_call?","children":[],"call":[" parentheses? ! "," parentheses? ","node parent "," arg_in_call_with_block? "]}," RuboCop Cop Style RedundantParentheses allowed_ancestor?":{"type":"method","name":"allowed_ancestor?","children":[],"call":[" parens_required? "," keyword_ancestor? "]}," RuboCop Cop Style ParallelAssignment ModifierCorrector modifier_range":{"type":"method","name":"modifier_range","children":[],"call":["Parser Source Range  new ","node source_range end_pos ","node source_range ","node loc keyword begin_pos ","node loc keyword ","node loc ","node source_range source_buffer "]}," RuboCop Cop Style ParallelAssignment assignment_corrector":{"type":"method","name":"assignment_corrector","children":[],"call":["GenericCorrector  new "," config ","RescueCorrector  new "," rescue_modifier? ","node parent ","ModifierCorrector  new "," modifier_statement? ","rhs parent "]}," RuboCop Cop Style ParallelAssignment return_of_method_call?":{"type":"method","name":"return_of_method_call?","children":[],"call":["node send_type? ","node block_type? "]}," RuboCop Cop Style ParallelAssignment allowed_rhs?":{"type":"method","name":"allowed_rhs?","children":[],"call":["elements any? "," return_of_method_call? ","node array_type? ! ","node array_type? ","(splat\n  (lvar :node)) compact "," Array compact "," Array ","(splat\n  (lvar :node)) compact  any? "," Array compact  any? "]}," RuboCop Cop Style ParallelAssignment allowed_lhs?":{"type":"method","name":"allowed_lhs?","children":[],"call":["elements any? ","elements one? "]}," RuboCop Cop Style ParallelAssignment allowed_masign?":{"type":"method","name":"allowed_masign?","children":[],"call":[" find_valid_order ! "," find_valid_order ","lhs_elements size != ","rhs_elements size ","lhs_elements size "," add_self_to_getters "]}," RuboCop Cop Style OptionalArguments argument_positions":{"type":"method","name":"argument_positions","children":[],"call":["arg_positions << ","argument arg_type? ","optarg_positions << ","argument optarg_type? ","arguments each_with_index "]}," RuboCop Cop Style OptionalArguments each_misplaced_optional_arg":{"type":"method","name":"each_misplaced_optional_arg","children":[],"call":["arguments [] ","optarg_position > ","arg_positions max ","optarg_positions each ","arg_positions empty? ","optarg_positions empty? "," argument_positions "]}," RuboCop Cop Style OneLineConditional else_branch_present?":{"type":"method","name":"else_branch_present?","children":[],"call":["condition == "]}," RuboCop Cop Style NumericLiteralPrefix hex_bin_dec_literal_type":{"type":"method","name":"hex_bin_dec_literal_type","children":[],"call":[]}," RuboCop Cop Style NumericLiteralPrefix octal_literal_type":{"type":"method","name":"octal_literal_type","children":[],"call":[" octal_zero_only? ! "," octal_zero_only? ","literal =~ ","OCTAL_REGEX  match? ","OCTAL_ZERO_ONLY_REGEX  match? "]}," RuboCop Cop Style NonNilCheck not_and_nil_check?":{"type":"method","name":"not_and_nil_check?","children":[],"call":[" nil_check? ","method == "]}," RuboCop Cop Style NonNilCheck not_equal_to_nil?":{"type":"method","name":"not_equal_to_nil?","children":[],"call":["args == ","method == "]}," RuboCop Cop Style MultilineMethodCallIndentation no_base_message":{"type":"method","name":"no_base_message","children":[],"call":[" correct_indentation "," operation_description ","rhs column - "," indentation ","rhs column "]}," RuboCop Cop Style MultilineMethodCallIndentation base_source":{"type":"method","name":"base_source","children":[],"call":["@base source [] ","@base source "]}," RuboCop Cop Style MultilineMethodCallIndentation align_with_base_message":{"type":"method","name":"align_with_base_message","children":[],"call":["@base line "," base_source ","rhs source "]}," RuboCop Cop Style MultilineMethodCallIndentation relative_to_receiver_message":{"type":"method","name":"relative_to_receiver_message","children":[],"call":["@base line "," base_source "," configured_indentation_width ","rhs source "]}," RuboCop Cop Style MultilineMethodCallIndentation should_align_with_base?":{"type":"method","name":"should_align_with_base?","children":[],"call":[" style != "," style "]}," RuboCop Cop Style MultilineMethodCallIndentation should_indent_relative_to_receiver?":{"type":"method","name":"should_indent_relative_to_receiver?","children":[],"call":[" style == "," style "]}," RuboCop Cop Style MultilineMethodCallBraceLayout single_line_ignoring_receiver?":{"type":"method","name":"single_line_ignoring_receiver?","children":[],"call":["node loc begin line == ","node loc end line ","node loc end ","node loc ","node loc begin line ","node loc begin "]}," RuboCop Cop Style MultilineMethodCallBraceLayout ignored_literal?":{"type":"method","name":"ignored_literal?","children":[],"call":[" single_line_ignoring_receiver? "]}," RuboCop Cop Style MultilineBlockLayout arguments_on_different_line?":{"type":"method","name":"arguments_on_different_line?","children":[],"call":["args loc last_line == ","node loc line ","node loc ","args loc last_line ","args loc ","args children empty? ","args children "]}," RuboCop Cop Style MultilineBlockLayout args_on_different_line?":{"type":"method","name":"args_on_different_line?","children":[],"call":["do_line != ","args loc last_line ","args loc ","args children empty? ","args children "]}," RuboCop Cop Style MultilineBlockLayout oneliner?":{"type":"method","name":"oneliner?","children":[],"call":["node loc begin line == ","node loc end line ","node loc end ","node loc ","node loc begin line ","node loc begin "]}," RuboCop Cop Style ModuleFunction each_wrong_style":{"type":"method","name":"each_wrong_style","children":[],"call":["node == "," style == "," style ","nodes each "," module_function_node? "," extend_self_node? ","private_directive ! "," private_directive? ","nodes any? "," check_forbidden "," check_extend_self "," check_module_function "]}," RuboCop Cop Style MethodCallParentheses variable_in_mass_assignment?":{"type":"method","name":"variable_in_mass_assignment?","children":[],"call":["(send\n  (lvar :var_nodes) :map) include? ","n to_a first ","n to_a ","var_nodes map "]}," RuboCop Cop Style MethodCallParentheses any_assignment?":{"type":"method","name":"any_assignment?","children":[],"call":["asgn_node send_type? ","asgn_node op_asgn_type? ","asgn_node and_asgn_type? ","asgn_node or_asgn_type? ","node each_ancestor any? ","node each_ancestor "]}," RuboCop Cop Style LineEndConcatenation eligible_predecessor?":{"type":"method","name":"eligible_predecessor?","children":[],"call":[" standard_string_literal? "]}," RuboCop Cop Style LineEndConcatenation eligible_next_successor?":{"type":"method","name":"eligible_next_successor?","children":[],"call":["(and\n  (lvar :next_successor)\n  (send\n    (const nil :HIGH_PRECEDENCE_OP_TOKEN_TYPES) :include?\n    (send\n      (lvar :next_successor) :type))) ! ","HIGH_PRECEDENCE_OP_TOKEN_TYPES  include? ","next_successor type "]}," RuboCop Cop Style LineEndConcatenation eligible_operator?":{"type":"method","name":"eligible_operator?","children":[],"call":["CONCAT_TOKEN_TYPES  include? ","operator type "]}," RuboCop Cop Style LineEndConcatenation eligible_successor?":{"type":"method","name":"eligible_successor?","children":[],"call":[" standard_string_literal? "]}," RuboCop Cop Style LeadingCommentSpace config_ru?":{"type":"method","name":"config_ru?","children":[],"call":["File  basename eql? ","File  basename "]}," RuboCop Cop Style Lambda end_pos":{"type":"method","name":"end_pos","children":[],"call":["node loc end end_pos ","node loc end ","node loc "]}," RuboCop Cop Style Lambda begin_pos":{"type":"method","name":"begin_pos","children":[],"call":["node loc begin begin_pos ","node loc begin ","node loc "]}," RuboCop Cop Style InitialIndentation space_before":{"type":"method","name":"space_before","children":[],"call":[" range_between ","token pos begin_pos ","token pos ","token_with_space begin_pos ","token_with_space == "," range_with_surrounding_space ","token pos column zero? ","token pos column "," range_with_surrounding_space  begin_pos "," range_with_surrounding_space  == "]}," RuboCop Cop Style InitialIndentation first_token":{"type":"method","name":"first_token","children":[],"call":["t text start_with? ! ","t text start_with? ","t text "," processed_source tokens find "," processed_source tokens "," processed_source "]}," RuboCop Cop Style InfiniteLoop replace_source":{"type":"method","name":"replace_source","children":[],"call":["corrector replace "," lambda "]}," RuboCop Cop Style InfiniteLoop replace_begin_end_with_modifier":{"type":"method","name":"replace_begin_end_with_modifier","children":[],"call":["corrector remove ","body loc end end join ","node source_range end ","node source_range ","body loc end end ","body loc end ","body loc ","corrector replace ","body loc begin "," lambda ","node body loc end end join ","node body loc end end ","node body loc end ","node body loc ","node body ","node body loc begin "]}," RuboCop Cop Style IndentationWidth indentation_consistency_style":{"type":"method","name":"indentation_consistency_style","children":[],"call":[" config for_cop [] "," config for_cop "," config "]}," RuboCop Cop Style IndentationWidth special_modifier?":{"type":"method","name":"special_modifier?","children":[],"call":["SPECIAL_MODIFIERS  include? ","node source "," modifier_node? "]}," RuboCop Cop Style IndentationWidth each_member":{"type":"method","name":"each_member","children":[],"call":["previous_modifier source_range "," special_modifier? ","members first children each ","members first children ","members first "]}," RuboCop Cop Style IfUnlessModifier non_eligible_if?":{"type":"method","name":"non_eligible_if?","children":[],"call":[" if_else? "," elsif? "," modifier_if? "," ternary? ","node else? ","node elsif? ","node modifier_form? ","node ternary? "]}," RuboCop Cop Style IfUnlessModifier eligible_node?":{"type":"method","name":"eligible_node?","children":[],"call":[" single_line_as_modifier? "," nested_conditional? ! "," nested_conditional? ","node chained? ! ","node chained? "," non_eligible_if? ! "," non_eligible_if? ","node nested_conditional? ! ","node nested_conditional? "]}," RuboCop Cop Style HashSyntax autocorrect_no_mixed_keys":{"type":"method","name":"autocorrect_no_mixed_keys","children":[],"call":[" autocorrect_ruby19 "," autocorrect_hash_rockets ","op is? ","node loc operator ","node loc ","node colon? ","pair_node colon? ","node loc operator  is? ","node loc node loc operator erator "]}," RuboCop Cop Style HashSyntax no_mixed_keys_check":{"type":"method","name":"no_mixed_keys_check","children":[],"call":[" check ","pairs first loc operator source == ","pairs first loc operator source ","pairs first loc operator ","pairs first loc ","pairs first "," sym_indices? ! "," sym_indices? ","pairs first inverse_delimiter "]}," RuboCop Cop Style GuardClause contains_guard_clause?":{"type":"method","name":"contains_guard_clause?","children":[],"call":[" guard_clause? ","node else_branch guard_clause? ","node else_branch ","node if_branch guard_clause? ","node if_branch "]}," RuboCop Cop Style GuardClause ignored_node?":{"type":"method","name":"ignored_node?","children":[],"call":[" elsif? "," if_else? ! "," if_else? "," ternary? "," modifier_if? "]}," RuboCop Cop Style GuardClause accepted_form?":{"type":"method","name":"accepted_form?","children":[],"call":["condition multiline? "," ignored_node? ","node condition multiline? ","node condition "," accepted_if? ","node parent "]}," RuboCop Cop Style GuardClause check_ending_if":{"type":"method","name":"check_ending_if","children":[],"call":[" add_offense "," min_body_length? ! "," min_body_length? "," accepted_form? ","node if_type? ! ","node if_type? "," register_offense "," opposite_keyword "," consecutive_conditionals? ","node parent "," allowed_consecutive_conditionals? ","node inverse_keyword "," check_ending_body ","node if_branch "]}," RuboCop Cop Style For incorrect_style_detected":{"type":"method","name":"incorrect_style_detected","children":[],"call":[" opposite_style_detected "," add_offense "," range_between ","end_pos - ","method source_range end_pos ","method source_range ","  range_between _between ","method source_range end_pos  - ","method source_ range_between  end_pos ","method source_range method source_range end_pos  ","method source_ range_between  "]}," RuboCop Cop Style FileName match?":{"type":"method","name":"match?","children":[],"call":["expected == ","expected empty? "]}," RuboCop Cop Style FileName partial_matcher!":{"type":"method","name":"partial_matcher!","children":[],"call":["expected pop ","name == ","expected last "," match? ","namespace cbase_type? "," lambda "," match_acronym? "]}," RuboCop Cop Style ExtraSpacing align_equal_signs":{"type":"method","name":"align_equal_signs","children":[],"call":[" align_equal_sign ","tokens each ","columns max "," align_column ","tokens map ","lines include? ","t pos line ","t pos ","@asgn_tokens select "," contiguous_assignment_lines "," contiguous_assignment_lines  include? "," contiguous_assignment_ contiguous_assignment_lines  "]}," RuboCop Cop Style ExtraSpacing extra_space_range":{"type":"method","name":"extra_space_range","children":[],"call":[" range_between ","end_pos <= ","t2 pos begin_pos - ","t2 pos begin_pos ","t2 pos ","t1 pos end_pos ","t1 pos "," aligned_tok? "," allow_for_alignment? ","t1 pos line != ","t2 pos line ","t1 pos line ","t2 pos begin_pos -  <= ","t1 pos t2 pos begin_pos -  "]}," RuboCop Cop Style ExtraSpacing assignment_tokens":{"type":"method","name":"assignment_tokens","children":[],"call":["Set  new ","t pos line ","t pos ","tokens uniq "," remove_optarg_equals "," processed_source "," equal_sign? "," processed_source tokens select "," processed_source tokens "," remove_optarg_equals  uniq "," processed_source  remove_optarg_equals  select "," processed_source  remove_optarg_equals  "]}," RuboCop Cop Style EvenOdd replacement_method":{"type":"method","name":"replacement_method","children":[],"call":["method == ","args == "]}," RuboCop Cop Style EvenOdd equality_operator?":{"type":"method","name":"equality_operator?","children":[],"call":["EQUALITY_OPERATORS  include? "]}," RuboCop Cop Style Encoding encoding_omitable?":{"type":"method","name":"encoding_omitable?","children":[],"call":[" processed_source buffer source ascii_only? "," processed_source buffer source "," processed_source buffer "," processed_source "," style != "," style "," style == ","line =~ ","ENCODING_PATTERN  match? "]}," RuboCop Cop Style Encoding encoding_present?":{"type":"method","name":"encoding_present?","children":[],"call":["line =~ ","MagicComment  parse encoding ","MagicComment  parse "]}," RuboCop Cop Style Encoding encoding_mismatch_message":{"type":"method","name":"encoding_mismatch_message","children":[],"call":[" encoding "]}," RuboCop Cop Style Encoding matching_encoding?":{"type":"method","name":"matching_encoding?","children":[],"call":[" encoding =~ "," encoding "]}," RuboCop Cop Style Encoding encoding":{"type":"method","name":"encoding","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style DocumentationMethod require_for_non_public_methods?":{"type":"method","name":"require_for_non_public_methods?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style DocumentationMethod check":{"type":"method","name":"check","children":[],"call":[" add_offense "," documentation_comment? "," require_for_non_public_methods? ! "," require_for_non_public_methods? "," non_public? "]}," RuboCop Cop Style DocumentationMethod on_method_def":{"type":"method","name":"on_method_def","children":[],"call":[" check "]}," RuboCop Cop Style DocumentationMethod on_def":{"type":"method","name":"on_def","children":[],"call":[" check "," module_function_node? ","node parent ","node method? "," modifier_node? ","node node parent  "]}," RuboCop Cop Style Documentation nodoc":{"type":"method","name":"nodoc","children":[],"call":[" processed_source ast_with_comments [] first "," processed_source ast_with_comments [] ","node children first ","node children "," processed_source ast_with_comments "," processed_source "]}," RuboCop Cop Style TernaryCorrector element_assignment?":{"type":"method","name":"element_assignment?","children":[],"call":["node method_name != ","node method_name ","node send_type? "]}," RuboCop Cop Style TernaryCorrector ternary":{"type":"method","name":"ternary","children":[],"call":[" element_assignment? ","else_rhs source ","if_rhs source ","condition source ","node if_branch ","node condition source ","node condition ","node else_branch "]}," RuboCop Cop Style TernaryCorrector correction":{"type":"method","name":"correction","children":[],"call":[" ternary "," lhs ","node if_branch "]}," RuboCop Cop Style ConditionalAssignment indentation_width":{"type":"method","name":"indentation_width","children":[],"call":[" config for_cop [] "," config for_cop "," config "]}," RuboCop Cop Style ConditionalAssignment max_line_length":{"type":"method","name":"max_line_length","children":[],"call":[" config for_cop [] "," config for_cop "," config "]}," RuboCop Cop Style ConditionalAssignment line_length_cop_enabled?":{"type":"method","name":"line_length_cop_enabled?","children":[],"call":[" config for_cop [] "," config for_cop "," config "]}," RuboCop Cop Style ConditionalAssignment longest_rhs_full_length":{"type":"method","name":"longest_rhs_full_length","children":[],"call":[" longest_rhs + + ","assignment length "," longest_rhs + "," indentation_width "," longest_rhs "]}," RuboCop Cop Style ConditionalAssignment longest_line_exceeds_line_limit?":{"type":"method","name":"longest_line_exceeds_line_limit?","children":[],"call":[" longest_line length > "," max_line_length "," longest_line length "," longest_line "]}," RuboCop Cop Style ConditionalAssignment longest_rhs_exceeds_line_limit?":{"type":"method","name":"longest_rhs_exceeds_line_limit?","children":[],"call":[" longest_rhs_full_length > "," max_line_length "," longest_rhs_full_length "]}," RuboCop Cop Style ConditionalAssignment allowed_statements?":{"type":"method","name":"allowed_statements?","children":[],"call":[" assignment_types_match? ","statements any? ! ","statements any? "," lhs_all_match? "," tail ","branches map ","branches all? ","statements none? ","(send\n  (lvar :branches) :map) compact ","branches filter_map ","(send\n  (lvar :branches) :map) compact  any? ! ","(send\n  (lvar :branches) :map) compact  any? ","(send\n  (lvar :branches) :map) compact  none? "]}," RuboCop Cop Style ConditionalAssignmentHelper setter_method?":{"type":"method","name":"setter_method?","children":[],"call":["(sym :!=) include? ! ","(sym :!=) include? ","method_name to_s end_with? ","method_name to_s "]}," RuboCop Cop Style CommandLiteral allowed_percent_x_literal?":{"type":"method","name":"allowed_percent_x_literal?","children":[],"call":[" contains_disallowed_backtick? "," style == "," style ","node multiline? "]}," RuboCop Cop Style CommandLiteral allowed_backtick_literal?":{"type":"method","name":"allowed_backtick_literal?","children":[],"call":[" contains_disallowed_backtick? ! "," contains_disallowed_backtick? ","node single_line? "," style == "," style "]}," RuboCop Cop Style BlockDelimiters replace_do_end_with_braces":{"type":"method","name":"replace_do_end_with_braces","children":[],"call":["corrector replace ","corrector insert_after "," whitespace_after? "," lambda ","loc end ","loc begin ","corrector wrap ","node body "," begin_required? ","node loc ","corrloc end ctor rloc end placloc end  ","corrloc end ctor insloc end rt_aftloc end r "," whitloc end spacloc end _aftloc end r? "," lamloc begin da ","loc loc end nd ","node loc  end ","loc bloc end gin ","loc loc begin egin ","node loc  begin ","corrloc end ctor wrap ","nodloc end  body ","node loc begin ody "," bloc end gin_rloc end quirloc end d? "," loc begin egin_required? ","nodloc end  loc ","node node loc  "]}," RuboCop Cop Style BlockDelimiters replace_braces_with_do_end":{"type":"method","name":"replace_braces_with_do_end","children":[],"call":["corrector replace ","corrector insert_after "," whitespace_after? ","corrector insert_before "," whitespace_before? "," lambda ","loc end ","loc begin "," move_comment_before_block ","loc node "," processed_source comment_at_line ","e line "," processed_source ","corrloc end ctor rloc end placloc end  ","corrloc end ctor insloc end rt_aftloc end r "," whitloc end spacloc end _aftloc end r? ","corrloc end ctor insloc end rt_bloc end forloc end  ","corrector insert_loc begin efore "," whitloc end spacloc end _bloc end forloc end ? "," whitespace_loc begin efore? "," lamloc begin da ","loc loc end nd ","loc bloc end gin ","loc loc begin egin "," movloc end _commloc end nt_bloc end forloc end _block "," move_comment_loc begin efore_loc begin lock "," move_ processed_source comment_at_line _before_block ","loc nodloc end  "," procloc end ssloc end d_sourcloc end  commloc end nt_at_linloc end  "," processed_source  processed_source comment_at_line _at_line ","loc end  linloc end  "," procloc end ssloc end d_sourcloc end  "]}," RuboCop Cop Style AndOr setter_method?":{"type":"method","name":"setter_method?","children":[],"call":["method_name to_s end_with? ","method_name to_s "]}," RuboCop Cop Style AndOr correct_setter":{"type":"method","name":"correct_setter","children":[],"call":["corrector insert_after ",") freeze ","args last source_range ","args last ","corrector insert_before ","( freeze ","receiver source_range ","node last_argument source_range ","node last_argument ","node receiver source_range ","node receiver "]}," RuboCop Cop Style AlignHash correct_key_value":{"type":"method","name":"correct_key_value","children":[],"call":[" adjust "," lambda ","key_column -@ ","key_delta < ","key column ","@column_deltas [] "," column_deltas [] "," column_deltas ","key column  -@ ","key_column -@  < "]}," RuboCop Cop Style AlignHash correct_no_value":{"type":"method","name":"correct_no_value","children":[],"call":[" adjust "," lambda "]}," RuboCop Cop Security JSONLoad autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node loc selector ","node loc "," lambda "]}," RuboCop Cop Security JSONLoad on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format "," json_load ","corrector replace ","node loc selector ","node loc "]}," RuboCop Cop Rails SaveBang return_value_assigned?":{"type":"method","name":"return_value_assigned?","children":[],"call":["node parent parent lvasgn_type? ","node parent parent ","node parent ","node parent block_type? ","node parent lvasgn_type? ","assignment lvasgn_type? "," assignable_node parent "," assignable_node "," assignable_node parent  lvasgn_type? "]}," RuboCop Cop Rails SaveBang check_used_in_conditional":{"type":"method","name":"check_used_in_conditional","children":[],"call":[" add_offense "," format ","node method_name to_s ","node method_name ","node loc selector ","node loc ","MODIFY_PERSIST_METHODS  include? ","node sibling_index zero? ","node sibling_index ","node parent if_type? ","node parent "," conditional? "," add_offense_for_node "]}," RuboCop Cop Rails SaveBang persisted_referenced?":{"type":"method","name":"persisted_referenced?","children":[],"call":["reference node parent method_name == ","reference node parent method_name ","reference node parent ","reference node ","assignment variable references any? ","assignment variable references ","assignment variable ","assignment referenced? ","reference node parent method? "," call_to_persisted? "]}," RuboCop Cop Rails SaveBang right_assignment_node":{"type":"method","name":"right_assignment_node","children":[],"call":["node child_nodes first ","node child_nodes ","node block_type? ","assignment node child_nodes first ","assignment node child_nodes ","assignment node ","node send_node ","assignment node child_nodes first  child_assignment node child_nodes first s first ","assignment node child_nodes first  child_assignment node child_nodes first s ","assignment node child_nodes first  block_type? ","assignment assignment node child_nodes first  child_assignment node child_nodes first s first ","assignment assignment node child_nodes first  child_assignment node child_nodes first s ","assignment assignment node child_nodes first  ","assignment node child_nodes first  send_assignment node child_nodes first  "]}," RuboCop Cop Rails SaveBang check_assignment":{"type":"method","name":"check_assignment","children":[],"call":[" add_offense "," format ","node method_name to_s ","node method_name ","node loc selector ","node loc "," persisted_referenced? "," expected_signature? ","CREATE_PERSIST_METHODS  include? "," right_assignment_node "," add_offense_for_node "," persist_method? ","node send_type? "," right_assignment_node  method_name to_s "," right_assignment_node  method_name "," right_assignment_node  loc selector "," right_assignment_node  loc "," right_assignment_ right_assignment_node  "," add_offense_for_ right_assignment_node  "," right_assignment_node  send_type? "]}," RuboCop Cop Rails SaveBang after_leaving_scope":{"type":"method","name":"after_leaving_scope","children":[],"call":[" check_assignment ","variable assignments each ","variable assignments ","scope variables each ","scope variables ","scope variables each_value "]}," RuboCop Cop Rails SaveBang join_force?":{"type":"method","name":"join_force?","children":[],"call":["force_class == "]}," RuboCop Cop Rails SafeNavigation replacement":{"type":"method","name":"replacement","children":[],"call":["params empty? ","method [] ","method end_with? ","params map join ","params map "]}," RuboCop Cop Rails SafeNavigation autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," replacement "," lambda "," range_between ","node loc expression end_pos ","node loc expression ","node loc ","node loc dot begin_pos ","node loc dot ","method_node source [] ","method_node source ","node arguments ","  range_between _between ","method_node source [] _node source [] ","method_node source [] _node source "]}," RuboCop Cop Rails SafeNavigation on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format ","method =~ ","method_to_try sym_type? "," cop_config [] ! "," cop_config [] "," cop_config ","try_method == "," try_call "," target_ruby_version < "," target_ruby_version ","dispatch value =~ ","dispatch value ","dispatch sym_type? "]}," RuboCop Cop Rails NotNullColumn on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," null_false? ","pairs find "," has_default? ","pairs any? "," add_not_null_column? "," check_add_reference "," check_add_column "," add_not_null_column?  find "," add_not_null_column?  any? "]}," RuboCop Cop Performance SortWithBlock sort_range":{"type":"method","name":"sort_range","children":[],"call":[" range_between ","node loc end end_pos ","node loc end ","node loc ","send loc selector begin_pos ","send loc selector ","send loc "]}," RuboCop Cop Performance SortWithBlock autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," sort_range ","node children last children last children last ","node children last children last children ","node children last children last ","node children last children ","node children last ","node children "," lambda "]}," RuboCop Cop Performance SortWithBlock on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," format "," sort_range "," sort "," sort_ sort_range  "]}," RuboCop Cop Performance Size allowed_parent?":{"type":"method","name":"allowed_parent?","children":[],"call":["node block_type? "]}," RuboCop Cop Performance Size eligible_receiver?":{"type":"method","name":"eligible_receiver?","children":[],"call":[" hash? "," array? "]}," RuboCop Cop Performance Size eligible_node?":{"type":"method","name":"eligible_node?","children":[],"call":[" allowed_parent? ! "," allowed_parent? ","node parent "," eligible_receiver? ","method == ","node receiver ","node arguments? ! ","node arguments? ","node method? "]}," RuboCop Cop Performance RedundantSortBy sort_by_range":{"type":"method","name":"sort_by_range","children":[],"call":[" range_between ","node loc end end_pos ","node loc end ","node loc ","send loc selector begin_pos ","send loc selector ","send loc "]}," RuboCop Cop Performance RedundantMerge EachWithObjectInspector unwind":{"type":"method","name":"unwind","children":[],"call":["receiver send_type? ","receiver respond_to? "]}," RuboCop Cop Performance RedundantMerge EachWithObjectInspector second_argument":{"type":"method","name":"second_argument","children":[],"call":[" each_with_object_node ","parent parent ","parent begin_type? "," node parent "," node ","parent parent  parent parent  "," node parent   node parent  ","parent parent  begin_type? "," node parent  begin_type? "," node parent parent  "," node  node parent  "]}," RuboCop Cop Performance RedundantMerge EachWithObjectInspector eligible_receiver?":{"type":"method","name":"eligible_receiver?","children":[],"call":[" receiver lvar_type? "," receiver "," receiver respond_to? "]}," RuboCop Cop Performance RedundantMerge EachWithObjectInspector value_used?":{"type":"method","name":"value_used?","children":[],"call":[" receiver loc name source == "," second_argument loc name source "," second_argument loc name "," second_argument loc "," second_argument "," receiver loc name source "," receiver loc name "," receiver loc "," receiver "," eligible_receiver? "]}," RuboCop Cop Performance RedundantMerge EachWithObjectInspector initialize":{"type":"method","name":"initialize","children":[],"call":[" unwind "]}," RuboCop Cop Performance RedundantMerge correct_single_element":{"type":"method","name":"correct_single_element","children":[],"call":["corrector replace ","node source_range "," lambda "]}," RuboCop Cop Performance RedundantMerge correct_multiple_elements":{"type":"method","name":"correct_multiple_elements","children":[],"call":["corrector replace ","node source_range "," lambda ","new_source gsub! "," leading_spaces "," rewrite_with_modifier "," modifier_flow_control? "," rewrite_with_modifier  gsub! "]}," RuboCop Cop Performance FlatMap map_method?":{"type":"method","name":"map_method?","children":[],"call":["MAP_METHODS  include? "]}," RuboCop Cop Performance FlatMap flatten_method?":{"type":"method","name":"flatten_method?","children":[],"call":["FLATTEN_METHODS  include? "]}," RuboCop Cop Performance FixedSize non_string_argument?":{"type":"method","name":"non_string_argument?","children":[],"call":["node str_type? ! ","node str_type? "]}," RuboCop Cop Performance FixedSize allowed_parent?":{"type":"method","name":"allowed_parent?","children":[],"call":["node block_type? ","node casgn_type? "]}," RuboCop Cop Performance FixedSize allowed_argument?":{"type":"method","name":"allowed_argument?","children":[],"call":[" non_string_argument? ","arg first "]}," RuboCop Cop Performance FixedSize allowed_variable?":{"type":"method","name":"allowed_variable?","children":[],"call":[" contains_double_splat? "," contains_splat? "]}," RuboCop Cop Performance DoubleStartEndWith add_offense_for_double_call":{"type":"method","name":"add_offense_for_double_call","children":[],"call":[" add_offense "," format ","node source ","receiver source "]}," RuboCop Cop Performance Count source_starting_at":{"type":"method","name":"source_starting_at","children":[],"call":[" range_between ","node source_range end_pos ","node source_range ","node source_range begin_pos "," block_given? ","node source_range node source_range begin_pos  "]}," RuboCop Cop Performance Count selector_location":{"type":"method","name":"selector_location","children":[],"call":["head_loc selector ","head_loc respond_to? ","expression parent loc selector ","expression parent loc ","expression parent ","expression parent loc respond_to? "]}," RuboCop Cop Performance Count eligible_method_chain?":{"type":"method","name":"eligible_method_chain?","children":[],"call":["SELECTORS  include? "," selector ","COUNTERS  include? "," counter "]}," RuboCop Cop Performance Count eligible_params?":{"type":"method","name":"eligible_params?","children":[],"call":["(and\n  (send nil :params)\n  (send\n    (send\n      (send nil :params) :block_pass_type?) :!)) ! "," params block_pass_type? ! "," params block_pass_type? "," params "]}," RuboCop Cop Performance Count eligible_node?":{"type":"method","name":"eligible_node?","children":[],"call":["(and\n  (send\n    (lvar :node) :parent)\n  (send\n    (send\n      (lvar :node) :parent) :block_type?)) ! ","node parent block_type? ","node parent "]}," RuboCop Cop Performance Count check":{"type":"method","name":"check","children":[],"call":[" add_offense "," format ","@selector_loc begin_pos "," source_starting_at "," eligible_method_chain? "," eligible_params? "," eligible_node? "]}," RuboCop Cop Performance Casecmp downcase_eq_range":{"type":"method","name":"downcase_eq_range","children":[],"call":["loc selector join ","send_downcase loc selector ","send_downcase loc ","loc selector ","loc expression ","CASE_METHODS  include? "]}," RuboCop Cop Performance Casecmp inefficient_comparison":{"type":"method","name":"inefficient_comparison","children":[],"call":["loc selector join ","send_downcase loc selector ","send_downcase loc ","loc selector "," eq_downcase "," downcase_eq_range "," downcase_eq ","node loc ","node loc  selector join ","send_downcase node loc  selector ","send_downcase node loc  ","node loc  selector "," downcase_eq_loc selector join  ","node node loc  "]}," RuboCop Cop Performance CaseWhenSplat when_branch_range":{"type":"method","name":"when_branch_range","children":[],"call":[" range_between ","next_branch source_range begin_pos ","next_branch source_range ","node source_range begin_pos ","node source_range ","when_branches [] ","current_index + ","branch == ","when_branches index ","when_node source_range begin_pos ","when_node source_range ","when_node parent when_branches [] ","when_node branch_index + ","when_node branch_index ","when_node parent when_branches ","when_node parent ","when_branches []  source_range begin_pos ","when_node parent when_branches []  source_range begin_pos ","when_branches []  source_range ","when_node parent when_branches []  source_range "]}," RuboCop Cop TrailingComma autocorrect_range":{"type":"method","name":"autocorrect_range","children":[],"call":[" range_between ","expr end_pos ","expr begin_pos + ","expr begin_pos ","expr source [] =~ ","expr source [] ","expr source ","expr source rindex ","item source_range ","item source_range  end_pos ","item source_range  begin_pos + ","item source_range  begin_pos ","item source_range  source [] =~ ","item source_range  source [] ","item source_range  source ","item source_range  source rindex "]}," RuboCop Cop StatementModifier commented?":{"type":"method","name":"commented?","children":[],"call":[" comment_lines include? ","source line "," comment_lines "]}," RuboCop Cop StatementModifier empty_body?":{"type":"method","name":"empty_body?","children":[],"call":[" body_length zero? "," body_length ","body ! "]}," RuboCop Cop StatementModifier line_count":{"type":"method","name":"line_count","children":[],"call":["node source lines grep size ","node source lines grep ","node source lines ","node source "]}," RuboCop Cop StatementModifier modifier_fits_on_single_line?":{"type":"method","name":"modifier_fits_on_single_line?","children":[],"call":[" length_in_modifier_form <= "," max_line_length "," length_in_modifier_form "," body_length "," if_node_parts ","modifier_length <= ","node body ","node condition ","node body length ","node body source_length ","  body_length  "," length_in_modifier_form  <= "]}," RuboCop Cop StatementModifier non_eligible_condition?":{"type":"method","name":"non_eligible_condition?","children":[],"call":["condition each_node any? ","condition each_node "]}," RuboCop Cop StatementModifier non_eligible_body?":{"type":"method","name":"non_eligible_body?","children":[],"call":[" commented? ","body source_range "," empty_body? ","body begin_type? ","body empty? ","body nil? ","body empty_source? "," processed_source commented? "," processed_source "," processed_source contains_comment? "]}," RuboCop Cop StatementModifier non_eligible_node?":{"type":"method","name":"non_eligible_node?","children":[],"call":[" commented? ","node loc end ","node loc "," line_count > "," line_count ","node modifier_form? ! ","node modifier_form? ","node nonempty_line_count > ","node nonempty_line_count "," processed_source commented? "," processed_source "," processed_source line_with_comment? ","node loc last_line "," code_after "," first_line_comment "]}," RuboCop Cop StatementModifier single_line_as_modifier?":{"type":"method","name":"single_line_as_modifier?","children":[],"call":[" modifier_fits_on_single_line? "," non_eligible_condition? "," non_eligible_body? "," non_eligible_node? "," if_node_parts ","node condition ","node body "]}," RuboCop Cop SafeMode rails?":{"type":"method","name":"rails?","children":[],"call":[" config [] [] "," config [] "," config "," config [] fetch "]}," RuboCop Cop SafeMode safe_mode?":{"type":"method","name":"safe_mode?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop SafeMode rails_safe_mode?":{"type":"method","name":"rails_safe_mode?","children":[],"call":[" rails? "," safe_mode? "]}," RuboCop Cop PrecedingFollowingAlignment aligned_with_any_line?":{"type":"method","name":"aligned_with_any_line?","children":[],"call":[" aligned_with_line? ","line_ranges any? "]}," RuboCop Cop PrecedingFollowingAlignment aligned_with_any_line_range?":{"type":"method","name":"aligned_with_any_line_range?","children":[],"call":[" aligned_with_any_line? "," processed_source lines [] =~ "," processed_source lines [] ","range line - ","range line "," processed_source lines "," processed_source "]}," RuboCop Cop MultilineLiteralBraceLayout empty_literal?":{"type":"method","name":"empty_literal?","children":[],"call":[" children empty? "," children "]}," RuboCop Cop MultilineLiteralBraceLayout implicit_literal?":{"type":"method","name":"implicit_literal?","children":[],"call":["node loc begin ! ","node loc begin ","node loc "]}," RuboCop Cop MultilineLiteralBraceLayout ignored_literal?":{"type":"method","name":"ignored_literal?","children":[],"call":["node single_line? "," empty_literal? "," implicit_literal? "]}," RuboCop Cop MultilineLiteralBraceLayout check_symmetrical":{"type":"method","name":"check_symmetrical","children":[],"call":[" add_offense "," class "," closing_brace_on_same_line? "," opening_brace_on_same_line? ","MultilineLiteralBraceCorrector  correct "," processed_source ","node loc end ","node loc "]}," RuboCop Cop MultilineLiteralBraceLayout check_same_line":{"type":"method","name":"check_same_line","children":[],"call":[" add_offense "," class "," closing_brace_on_same_line? ","MultilineLiteralBraceCorrector  correct "," processed_source ","node loc end ","node loc "]}," RuboCop Cop MultilineLiteralBraceLayout check_new_line":{"type":"method","name":"check_new_line","children":[],"call":[" add_offense "," class "," closing_brace_on_same_line? ","MultilineLiteralBraceCorrector  correct "," processed_source ","node loc end ","node loc "]}," RuboCop Cop MultilineLiteralBraceLayout check":{"type":"method","name":"check","children":[],"call":[" check_same_line "," check_new_line "," check_symmetrical "," style "]}," RuboCop Cop EndKeywordAlignment alignment_column":{"type":"method","name":"alignment_column","children":[],"call":["align_to column ","align_to source_range column ","align_to source_range ","align_to respond_to? ","align_to ! "]}," RuboCop Cop EndKeywordAlignment whitespace_range":{"type":"method","name":"whitespace_range","children":[],"call":[" range_between ","begin_pos - ","node loc end column ","node loc end ","node loc ","node loc end begin_pos ","node loc end begin_pos  - ","node loc end node loc end begin_pos  "]}," RuboCop Cop DocumentationComment interpreter_directive_comment?":{"type":"method","name":"interpreter_directive_comment?","children":[],"call":["comment text =~ ","comment text ","(str \"^#\\\\s*(frozen_string_literal|encoding):\") match? "]}," RuboCop Cop DocumentationComment preceding_lines":{"type":"method","name":"preceding_lines","children":[],"call":["line loc line < ","node loc line ","node loc ","line loc line ","line loc "," processed_source ast_with_comments [] select "," processed_source ast_with_comments [] "," processed_source ast_with_comments "," processed_source "]}," RuboCop Cop DocumentationComment preceding_comment?":{"type":"method","name":"preceding_comment?","children":[],"call":[" comment_line? ","n2 loc expression source ","n2 loc expression ","n2 loc "," preceed? "," precede? ","node2 loc expression source ","node2 loc expression ","node2 loc ","node2 source "]}," RuboCop Cop DocumentationComment documentation_comment?":{"type":"method","name":"documentation_comment?","children":[],"call":[" interpreter_directive_comment? ! "," interpreter_directive_comment? "," annotation? ! "," annotation? ","preceding_lines any? "," preceding_comment? ","preceding_lines last "," preceding_lines "," rubocop_directive_comment? ! "," rubocop_directive_comment? ","AnnotationComment  new annotation? ! ","AnnotationComment  new annotation? ","AnnotationComment  new "," annotation_keywords "," preceding_lines  any? "," preceding_lines  last ","  preceding_lines  "]}," RuboCop Cop DefNode preceding_non_public_modifier?":{"type":"method","name":"preceding_non_public_modifier?","children":[],"call":["NON_PUBLIC_MODIFIERS  include? "," stripped_source_upto any? "," stripped_source_upto ","node loc line ","node loc ","node first_line "," node_visibility != "," node_visibility "]}," RuboCop Cop DefNode non_public?":{"type":"method","name":"non_public?","children":[],"call":[" preceding_non_public_modifier? "," non_public_modifier? ","node parent "]}," RuboCop Cop ConfigurableNumbering class_emitter_method?":{"type":"method","name":"class_emitter_method?","children":[],"call":["c loc name is? ","name to_s ","c loc name ","c loc ","node parent each_child_node any? ","node parent each_child_node ","node parent ","node parent defs_type? ","node defs_type? ","node parent  parent each_child_node parent  any? ","node parent  parent each_child_node parent  ","node parent  parent ","node parent  parent defs_type? ","node parent  defs_type? "]}," RuboCop Cop ConfigurableNumbering valid_name?":{"type":"method","name":"valid_name?","children":[],"call":[" class_emitter_method? ","name match "," style "]}," RuboCop Cop ConfigurableNumbering check_name":{"type":"method","name":"check_name","children":[],"call":[" add_offense "," message "," style "," correct_style_detected "," valid_name? "," operator? "," unexpected_style_detected ","(send\n  (send nil :supported_styles) :-\n  (array\n    (send nil :style))) each "," supported_styles - "," supported_styles "]}," RuboCop Cop ArrayHashIndentation detected_styles_for_column":{"type":"method","name":"detected_styles_for_column","children":[],"call":["styles << "," brace_alignment_style ","column == ","left_brace column ","left_parenthesis column + ","left_parenthesis column ","left_brace source_line =~ ","left_brace source_line "]}," RuboCop Cop ArrayHashIndentation check_expected_style":{"type":"method","name":"check_expected_style","children":[],"call":[" correct_style_detected "," ambiguous_style_detected ","styles size > ","styles size "]}," RuboCop Cop Lint UselessSetterCall MethodVariableTracker process_assignment_node":{"type":"method","name":"process_assignment_node","children":[],"call":[" process_assignment "," process_binary_operator_assignment "," process_logical_operator_assignment "," process_multiple_assignment ","node type "]}," RuboCop Cop Lint UselessSetterCall last_expression":{"type":"method","name":"last_expression","children":[],"call":["expression last ","expression is_a? ","body children ","body begin_type? ","body children  last ","body children  is_a? "]}," RuboCop Cop Lint UselessAssignment similar_name_message":{"type":"method","name":"similar_name_message","children":[],"call":[" find_similar_name ","variable scope ","variable name ","NameSimilarity  find_similar_name "," collect_variable_like_names "," find_ find_similar_name  "," find_NameSimilarity  find_similar_name  ","NameSimilarity  find_ find_similar_name  ","NameSimilarity  find_NameSimilarity  find_similar_name  "," collect_ collect_variable_like_names  "]}," RuboCop Cop Lint UselessAssignment operator_assignment_message":{"type":"method","name":"operator_assignment_message","children":[],"call":["assignment operator sub ","assignment operator ","assignment meta_assignment_node equal? ","assignment meta_assignment_node "," return_value_node_of_scope ","assignment operator delete_suffix ","  return_value_node_of_scope _of_scope "]}," RuboCop Cop Lint UselessAssignment multiple_assignment_message":{"type":"method","name":"multiple_assignment_message","children":[],"call":[]}," RuboCop Cop Lint UselessAssignment message_specification":{"type":"method","name":"message_specification","children":[],"call":[" similar_name_message "," operator_assignment_message ","variable scope ","assignment operator_assignment? "," multiple_assignment_message ","variable name ","assignment multiple_assignment? "]}," RuboCop Cop Lint UnneededSplatExpansion remove_brackets":{"type":"method","name":"remove_brackets","children":[],"call":["elements join ","array_start start_with? ","elements map ","array loc begin source ","array loc begin ","array loc ","elements map  join ","array loc begin source  start_with? ","elements map  map "]}," RuboCop Cop Lint UnneededSplatExpansion unneeded_brackets?":{"type":"method","name":"unneeded_brackets?","children":[],"call":["parent resbody_type? ","node send_type? ","node when_type? ","node parent ","grandparent resbody_type? "," part_of_an_array? ","parent send_type? ","parent when_type? ","node parent parent ","node parent  resbody_type? ","node node parent  ","grandnode parent  resbody_type? ","node parent parent  resbody_type? ","node parent  send_type? ","node parent  when_type? ","node node parent  node parent  "]}," RuboCop Cop Lint UnneededSplatExpansion autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove ","loc operator ","corrector replace "," remove_brackets ","loc expression "," unneeded_brackets? ","variable source ","variable array_type? ! ","variable array_type? "," lambda ","node loc ","node parent "," replacement_range_and_content ","node loc  operator ","node loc  expression ","node node loc  ","node node parent  "]}," RuboCop Cop Lint UnneededSplatExpansion on_splat":{"type":"method","name":"on_splat","children":[],"call":[" add_offense ","ASSIGNMENT_TYPES  include? ","node parent parent type ","node parent parent ","node parent ","object send_type? "," literal_expansion? "," method_argument? "," array_splat? "," part_of_an_array? "," unneeded_splat_expansion "]}," RuboCop Cop Lint UnneededDisable add_offense_for_some_cops":{"type":"method","name":"add_offense_for_some_cops","children":[],"call":[" add_offense "," describe ","cop_ranges each ","cop_ranges map ","r begin_pos ","cop_ranges sort_by! "," cop_range ","cops map "]}," RuboCop Cop Lint UnneededDisable add_offense_for_entire_comment":{"type":"method","name":"add_offense_for_entire_comment","children":[],"call":[" add_offense ","cop_list join "," describe ","cops sort map ","cops sort ","comment loc expression ","comment loc "]}," RuboCop Cop Lint UnneededDisable directive_range_in_list":{"type":"method","name":"directive_range_in_list","children":[],"call":[" range_with_surrounding_space "," range_with_surrounding_comma "," trailing_range? "," ends_its_line? ","ranges last ","  range_with_surrounding_comma _with_surrounding_space ","  range_with_surrounding_space _with_surrounding_space ","  range_with_surrounding_comma _with_surrounding_comma ","  range_with_surrounding_space _with_surrounding_comma "," trailing_ range_with_surrounding_comma ? "," trailing_ range_with_surrounding_space ? "," range_with_surrounding_comma s last "," range_with_surrounding_space s last "]}," RuboCop Cop Lint UnneededDisable comment_range_with_surrounding_space":{"type":"method","name":"comment_range_with_surrounding_space","children":[],"call":[" range_with_surrounding_space ","original_begin zero? ","range begin_pos ","  range_with_surrounding_space _with_surrounding_space ","range begin_pos  zero? "," range_with_surrounding_space  begin_pos "]}," RuboCop Cop Lint UnifiedInteger autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node loc name ","node loc "," lambda "," target_ruby_version <= "," target_ruby_version "]}," RuboCop Cop Lint UnifiedInteger on_const":{"type":"method","name":"on_const","children":[],"call":[" add_offense "," format "," fixnum_or_bignum_const? "," fixnum_or_bignum_const ","corrector replace ","node loc name ","node loc "," target_ruby_version <= "," target_ruby_version "]}," RuboCop Cop Lint ShadowedException sorted?":{"type":"method","name":"sorted?","children":[],"call":["(or\n  (send\n    (lvar :x) :<=>\n    (lvar :y))\n  (int 0)) <= ","x <=> ","y none? ","x none? ","y include? ","x include? ","rescued_groups each_cons all? ","rescued_groups each_cons "]}," RuboCop Cop Lint PercentStringArray scrub_string":{"type":"method","name":"scrub_string","children":[],"call":["string encode encode ","string encode ","string scrub ","string respond_to? "]}," RuboCop Cop Lint ParenthesesAsGroupedExpression space_range":{"type":"method","name":"space_range","children":[],"call":[" range_between ","expr begin_pos ","expr begin_pos - "]}," RuboCop Cop Lint DuplicateMethods check_self_receiver":{"type":"method","name":"check_self_receiver","children":[],"call":[" found_method ","node parent_module_name "]}," RuboCop Cop Lint DuplicateMethods check_const_receiver":{"type":"method","name":"check_const_receiver","children":[],"call":[" found_method "," lookup_constant "]}," RuboCop Cop Lint AssignmentInCondition skip_children?":{"type":"method","name":"skip_children?","children":[],"call":[" safe_assignment? "," safe_assignment_allowed? ","asgn_node method_name !~ ","asgn_node method_name ","asgn_node send_type? "," empty_condition? ","asgn_node assignment_method? ! ","asgn_node assignment_method? "]}," RuboCop Cop Lint AssignmentInCondition conditional_assignment?":{"type":"method","name":"conditional_assignment?","children":[],"call":["asgn_node loc operator ! ","asgn_node loc operator ","asgn_node loc "]}," RuboCop Cop Lint AssignmentInCondition allowed_construct?":{"type":"method","name":"allowed_construct?","children":[],"call":[" conditional_assignment? ","asgn_node begin_type? "]}," RuboCop Cop Cop duplicate_location?":{"type":"method","name":"duplicate_location?","children":[],"call":["o location == ","o location ","@offenses any? "]}," RuboCop Cop Cop find_location":{"type":"method","name":"find_location","children":[],"call":["node loc public_send ","node loc ","loc is_a? "]}," RuboCop Config to_hash":{"type":"method","name":"to_hash","children":[],"call":[]}," RuboCop Config to_h":{"type":"method","name":"to_h","children":[],"call":[]}," RuboCop Config merge":{"type":"method","name":"merge","children":[],"call":["@hash merge "]}," RuboCop Config map":{"type":"method","name":"map","children":[],"call":["@hash map "]}," RuboCop Config keys":{"type":"method","name":"keys","children":[],"call":["@hash keys "]}," RuboCop Config key?":{"type":"method","name":"key?","children":[],"call":["@hash key? "]}," RuboCop Config each":{"type":"method","name":"each","children":[],"call":["@hash each "]}," RuboCop Config delete":{"type":"method","name":"delete","children":[],"call":["@hash delete "]}," RuboCop Config []=":{"type":"method","name":"[]=","children":[],"call":["@hash []= "]}," RuboCop Config []":{"type":"method","name":"[]","children":[],"call":["@hash [] "]}," RuboCop CachedData message":{"type":"method","name":"message","children":[],"call":["message chars select join ","message chars select ","message chars ","message scrub ","message respond_to? ","offense message ","offense message scrub ","offense message dup force_encoding scrub ","offense message dup force_encoding ","offense message dup ","offense message  chars select join ","offense message  chars select ","offense message  chars ","offense message  scrub ","offense message  respond_to? ","offense offense message  ","offense offense message  scrub ","offense offense message  dup force_encoding scrub ","offense offense message  dup force_encoding ","offense offense message  dup "]}," RuboCop Cop Util compatible_external_encoding_for?":{"type":"method","name":"compatible_external_encoding_for?","children":[],"call":["src force_encoding valid_encoding? ","src force_encoding ","Encoding  default_external ","src dup ","RUBY_VERSION  < ","RUBY_ENGINE  == ","src dup  force_encoding valid_encoding? ","src dup  force_encoding ","src dup  dup "]}," RuboCop Cop Util hard_to_type?":{"type":"method","name":"hard_to_type?","children":[],"call":["cp > ","cp < ","string codepoints any? ","string codepoints "]}," RuboCop Cop Style SafeNavigation end_range":{"type":"method","name":"end_range","children":[],"call":["Parser Source Range  new ","node loc expression end_pos ","node loc expression ","node loc ","method_call loc expression end_pos ","method_call loc expression ","method_call loc "," range_between ","node source_range end_pos ","node source_range ","method_call source_range end_pos ","method_call source_range "]}," RuboCop Cop Style SafeNavigation begin_range":{"type":"method","name":"begin_range","children":[],"call":["Parser Source Range  new ","method_call loc expression begin_pos ","method_call loc expression ","method_call loc ","node loc expression begin_pos ","node loc expression ","node loc ","node loc expression source_buffer "," range_between ","method_call source_range begin_pos ","method_call source_range ","node source_range begin_pos ","node source_range "]}," RuboCop Cop Style SafeNavigation extract_parts":{"type":"method","name":"extract_parts","children":[],"call":[" safe_navigation_candidate "," candidate_that_may_introduce_nil "," cop_config [] "," cop_config "," extract_parts_from_and "," extract_parts_from_if ","node type "]}," RuboCop Cop Style RedundantReturn check_begin_node":{"type":"method","name":"check_begin_node","children":[],"call":[" check_return_node ","last_expr return_type? ","expressions last "," check_branch ","node children last ","node children ","expressions last  return_type? ","node children last  return_type? "]}," RuboCop Cop Style RedundantReturn check_if_node":{"type":"method","name":"check_if_node","children":[],"call":[" check_branch "," if_node_parts "," ternary? "," modifier_if? ","node node_parts ","node ternary? ","node modifier_form? ","node else_branch ","node if_branch "]}," RuboCop Cop Style RedundantReturn check_when_node":{"type":"method","name":"check_when_node","children":[],"call":[" check_branch "]}," RuboCop Cop Style RedundantReturn check_case_node":{"type":"method","name":"check_case_node","children":[],"call":[" check_branch "," check_when_node ","when_nodes each ","node else_branch ","when_node body ","node when_branches each ","node when_branches "]}," RuboCop Cop Style RedundantReturn check_branch":{"type":"method","name":"check_branch","children":[],"call":[" check_begin_node "," check_if_node "," check_case_node "," check_return_node ","node type "," check_ensure_node "," check_rescue_node "," check_resbody_node "]}," RuboCop Cop Style PreferredHashMethods offending_selector?":{"type":"method","name":"offending_selector?","children":[],"call":["OFFENDING_SELECTORS  [] include? ","OFFENDING_SELECTORS  [] "," style "]}," RuboCop Cop Style ParallelAssignment add_self_to_getters":{"type":"method","name":"add_self_to_getters","children":[],"call":[" s "," implicit_self_getter? ","right_elements map "]}," RuboCop Cop Style NonNilCheck autocorrect_unless_nil":{"type":"method","name":"autocorrect_unless_nil","children":[],"call":["corrector replace ","receiver source ","node source_range ","node parent loc keyword ","node parent loc ","node parent "," lambda "]}," RuboCop Cop Style NonNilCheck unless_and_nil_check?":{"type":"method","name":"unless_and_nil_check?","children":[],"call":["parent loc keyword is? ","parent loc keyword ","parent loc ","parent if_type? ","send_node parent ","method == "," ternary? ! "," ternary? "," unless_check? "," nil_check? ","parent unless? ","parent ternary? ! ","parent ternary? ","send_node parent  loc keyword is? ","send_node parent  loc keyword ","send_node parent  loc ","send_node parent  if_type? ","send_node send_node parent  ","send_node parent  unless? ","send_node parent  ternary? ! ","send_node parent  ternary? "]}," RuboCop Cop Style MultilineMemoization autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node loc end ","node loc ","node loc begin "," lambda "," style == "," style "," keyword_autocorrect "]}," RuboCop Cop Style MultilineMemoization on_or_asgn":{"type":"method","name":"on_or_asgn","children":[],"call":[" add_offense ","node source_range ","rhs begin_type? ","rhs multiline? "," bad_rhs? ","corrector replace ","rhs loc end ","rhs loc ","rhs loc begin "," keyword_autocorrect "," style == "," style "]}," RuboCop Cop Style GuardClause on_method_def":{"type":"method","name":"on_method_def","children":[],"call":[" check_ending_if ","body children last ","body children ","body begin_type? ","body if_type? ","body children last if_type? "]}," RuboCop Cop Style EmptyElse base_if_node":{"type":"method","name":"base_if_node","children":[],"call":["parent_node parent ","parent_node loc end ","parent_node loc ","parent loc end ","parent loc ","node each_ancestor find ","node each_ancestor ","node elsif? ","node case_type? ","parent_node parent  parent ","parent_node parent  loc end ","parent_node parent  loc "]}," RuboCop Cop Rails SaveBang last_call_of_method?":{"type":"method","name":"last_call_of_method?","children":[],"call":["node parent children count == ","node sibling_index + ","node sibling_index ","node parent children count ","node parent children ","node parent ","node parent nil? ! ","node parent nil? ","node parent children size == ","node parent children size "]}," RuboCop Cop Rails SaveBang conditional?":{"type":"method","name":"conditional?","children":[],"call":[" conditional? ","node parent ","node sibling_index zero? ","node sibling_index ","node parent if_type? ","node parent and_type? ","node parent or_type? ","node parent case_type? "," single_negative? ","condition and_type? ","condition or_type? ","condition case_type? ","condition if_type? ","node block_node "," node parent al? ","node parent  and_type? ","node parent  or_type? ","node parent  case_type? ","node parent  if_type? "]}," RuboCop Cop Rails HttpPositionalArguments autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," lambda "," format ","node loc expression ","node loc "," convert_hash_data ","data last ","data count > ","data count ","data first ","http_path source "," parentheses? ","data size > ","data size ","node method_name ","node arguments "," parentheses_format "," correction ","  parentheses_format  "," parentheses_ parentheses_format  "]}," RuboCop Cop Rails HttpPositionalArguments convert_hash_data":{"type":"method","name":"convert_hash_data","children":[],"call":[" format ","data children map join ","data children map ","data children ","data source ","data type == ","data type ","data children count < ","data children count ","data nil? ","data hash_type? ","data pairs map join ","data pairs map ","data pairs ","data children empty? ","data empty? "]}," RuboCop Cop Rails HttpPositionalArguments needs_conversion?":{"type":"method","name":"needs_conversion?","children":[],"call":["value nil? ","KEYWORD_ARGS  include? ","d children first ","d children ","d type == ","d type ","data descendants find ","data descendants ","children size == ","children size "," format_arg? "," special_keyword_arg? ","children find ","data child_nodes ","data hash_type? ","data pairs one? ","data pairs ","pair key ","data each_pair none? ","data each_pair ","d data child_nodes  first ","d data child_nodes  ","data child_nodes  size == ","data child_nodes  size ","data child_nodes  find "]}," RuboCop Cop Rails HttpPositionalArguments on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format ","node method_name ","node loc selector ","node loc ","http_path nil? ","receiver nil? "," needs_conversion? ","data nil? ","HTTP_METHODS  include? "," http_request? "," http_request?  nil? "]}," RuboCop Cop Rails DynamicFindBy static_method_name":{"type":"method","name":"static_method_name","children":[],"call":["match [] ","METHOD_PATTERN  match ","METHOD_PATTERN  match  [] ","METHOD_PATTERN  METHOD_PATTERN  match  "]}," RuboCop Cop Rails DynamicFindBy column_keywords":{"type":"method","name":"column_keywords","children":[],"call":["keyword_string split map ","keyword_string split ","method to_s [] ","method to_s ","method to_s []  split map ","method to_s []  split "]}," RuboCop Cop Rails DynamicFindBy whitelist":{"type":"method","name":"whitelist","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Rails DynamicFindBy autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector insert_before ","args [] loc expression ","args [] loc ","args [] ","keywords each with_index ","keywords each ","corrector replace ","node loc selector ","node loc "," lambda ","keywords size != ","args size ","keywords size "," column_keywords "," static_method_name ","method to_s "," autocorrect_argument_keywords "," autocorrect_method_name ","node arguments size ","node arguments ","node method_name "," column_keywords  each with_index "," column_keywords  each "," column_keywords  size != "," column_keywords  size "," column_ column_keywords  "," autocorrect_argument_ column_keywords  "]}," RuboCop Cop Rails DynamicFindBy on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format "," static_method_name "," whitelist include? "," whitelist ","method to_s ","node method_name ","node method_name to_s "," static_method to_s  "," static_node method_name to_s  ","node method to_s  ","node node method_name to_s  ","node method to_s  to_s ","node node method_name to_s  to_s "]}," RuboCop Cop Rails DelegateAllowBlank allow_blank_option":{"type":"method","name":"allow_blank_option","children":[],"call":[" allow_blank? ","options detect "," delegate_options "," delegate "," allow_blank_option? ","options_hash pairs find ","options_hash pairs ","hash pairs find ","hash pairs "," delegate_options  detect "," delegate_ delegate_options  "," delegate_options _hash pairs find "," delegate  pairs find "," delegate_options _hash pairs "," delegate  pairs "]}," RuboCop Cop Rails DelegateAllowBlank autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","allow_blank source_range "," lambda ","offending_node children first ","offending_node children "," allow_blank_option ","pair_node key source_range ","pair_node key ","offending_node children first  source_range "," allow_blank_option  children first "," allow_blank_option  children "," offending_node children first _option "]}," RuboCop Cop Rails DelegateAllowBlank on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","allow_blank source_range ","offending_node children first ","offending_node children "," allow_blank_option ","offending_node children first  source_range "," allow_blank_option  children first "," allow_blank_option  children "," offending_node children first _option "]}," RuboCop Cop TooManyLines code_length":{"type":"method","name":"code_length","children":[],"call":[" irrelevant_line ! "," irrelevant_line ","lines count ","node source lines to_a [] ","node source lines to_a ","node source lines ","node source ","body source lines ","body source "," extract_body ","Metrics Utils CodeLengthCalculator  new calculate ","Metrics Utils CodeLengthCalculator  new "," count_as_one "," count_comments? "," extract_body  source lines "," extract_body  source "," extract_ extract_body  "]}," RuboCop Cop TooManyLines message":{"type":"method","name":"message","children":[],"call":[" format "," cop_label "]}," RuboCop Cop Style EmptyLinesAroundBody namespace?":{"type":"method","name":"namespace?","children":[],"call":[" constant_definition? ","node children all? ","node children ","node begin_type? ","body children all? ","body children ","body begin_type? "]}," RuboCop Cop Metrics MethodLength cop_label":{"type":"method","name":"cop_label","children":[],"call":[]}," RuboCop Cop Metrics LineLength check_uri_line":{"type":"method","name":"check_uri_line","children":[],"call":[" offense "," excess_range "," allowed_uri_position? "," find_excessive_uri_range "," register_offense "," find_excessive_ find_excessive_uri_range  "]}," RuboCop Cop Metrics LineLength line_length_without_directive":{"type":"method","name":"line_length_without_directive","children":[],"call":["before_comment rstrip length ","before_comment rstrip ","line split "]}," RuboCop Cop Metrics LineLength directive_on_source_line?":{"type":"method","name":"directive_on_source_line?","children":[],"call":["comment text match ","comment text ","e location line == ","e location line ","e location "," processed_source comments detect "," processed_source comments "," processed_source ","index + "," processed_source buffer first_line "," processed_source buffer ","line_index + "]}," RuboCop Cop Metrics LineLength check_directive_line":{"type":"method","name":"check_directive_line","children":[],"call":[" offense "," source_range ","index + "," processed_source buffer "," processed_source "," line_length_without_directive - "," line_length_without_directive "," max "," line_length_without_directive <= "," register_offense ","line_index + "]}," RuboCop Cop Metrics LineLength ignore_cop_directives?":{"type":"method","name":"ignore_cop_directives?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Metrics BlockLength cop_label":{"type":"method","name":"cop_label","children":[],"call":[]}," RuboCop Cop Metrics BlockLength on_block":{"type":"method","name":"on_block","children":[],"call":[" check_code_length "," excluded_methods include? ","node method_name to_s ","node method_name "," excluded_methods ","node send_node method_name to_s ","node send_node method_name ","node send_node "," excluded_method? ","node class_constructor? ","node struct_constructor? "," method_receiver_excluded? "," ignored_method? "," matches_allowed_pattern? "," allowed_method? "]}," RuboCop Cop Lint UnusedBlockArgument ignore_empty_blocks?":{"type":"method","name":"ignore_empty_blocks?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Lint UnusedBlockArgument allow_unused_keyword_arguments?":{"type":"method","name":"allow_unused_keyword_arguments?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Lint UnusedBlockArgument empty_block?":{"type":"method","name":"empty_block?","children":[],"call":["body nil? ","variable scope node ","variable scope "]}," RuboCop Cop Lint UnusedBlockArgument define_method_call?":{"type":"method","name":"define_method_call?","children":[],"call":["method == ","variable scope node ","variable scope "]}," RuboCop Cop Lint UnusedBlockArgument augment_message":{"type":"method","name":"augment_message","children":[],"call":["(lvar :message) join "," message_for_normal_block "," message_for_lambda ","scope node lambda? ","scope node ","scope variables each_value select ","scope variables each_value ","scope variables ","variable scope ","variable scope  node lambda? ","variable scope  node ","variable scope  variables each_value select ","variable scope  variables each_value ","variable scope  variables ","variable variable scope  "]}," RuboCop Cop Lint UnusedBlockArgument allowed_keyword_argument?":{"type":"method","name":"allowed_keyword_argument?","children":[],"call":[" allow_unused_keyword_arguments? ","variable keyword_argument? "]}," RuboCop Cop Lint UnusedBlockArgument allowed_block?":{"type":"method","name":"allowed_block?","children":[],"call":[" empty_block? "," ignore_empty_blocks? ","variable block_argument? ! ","variable block_argument? "]}," RuboCop Cop Lint UnneededSplatExpansion method_argument?":{"type":"method","name":"method_argument?","children":[],"call":["node parent send_type? ","node parent "]}," RuboCop Cop Lint UnneededSplatExpansion array_splat?":{"type":"method","name":"array_splat?","children":[],"call":["node children first array_type? ","node children first ","node children "]}," RuboCop Cop CopStore cop_names":{"type":"method","name":"cop_names","children":[],"call":["Set  new "," map "]}," RuboCop Cop Style SpaceInLambdaLiteral space_after_arrow?":{"type":"method","name":"space_after_arrow?","children":[],"call":["parentheses source_range begin_pos - > ","parentheses source_range begin_pos - ","arrow source_range end_pos ","arrow source_range ","parentheses source_range begin_pos ","parentheses source_range ","lambda_node parent children [] ","lambda_node parent children ","lambda_node parent ","lambda_node parent children []  source_range begin_pos - > ","lambda_node parent children []  source_range begin_pos - ","lambda_node parent children []  source_range end_pos ","lambda_node parent children []  source_range ","lambda_node parent children []  source_range begin_pos "]}," RuboCop Cop Style SpaceInLambdaLiteral args?":{"type":"method","name":"args?","children":[],"call":["args children empty? ! ","args children empty? ","args children ","lambda_node parent "]}," RuboCop Cop Style SpaceInLambdaLiteral arrow_form?":{"type":"method","name":"arrow_form?","children":[],"call":["lambda_node loc selector source == ","lambda_node loc selector source ","lambda_node loc selector ","lambda_node loc "]}," RuboCop Cop Style SpaceInLambdaLiteral lambda_node?":{"type":"method","name":"lambda_node?","children":[],"call":["call == ","receiver nil? "]}," RuboCop Cop Style SpaceInLambdaLiteral arrow_lambda_with_args?":{"type":"method","name":"arrow_lambda_with_args?","children":[],"call":[" args? "," arrow_form? "," lambda_node? "]}," RuboCop Cop Style SpaceInLambdaLiteral autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove "," range_between ","children [] source_range begin_pos ","children [] source_range ","children [] ","children [] source_range end_pos ","corrector insert_before "," style == "," style "," lambda ","lambda_node parent children ","lambda_node parent ","lambda_node parent children  [] source_range begin_pos ","lambda_node parent children  [] source_range ","lambda_node parent children  [] ","lambda_node parent children  [] source_range end_pos ","lambda_node parent lambda_node parent children  "]}," RuboCop Cop Style SpaceInLambdaLiteral on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","node parent loc expression ","node parent loc ","node parent "," space_after_arrow? "," style == "," style "," space_after_arrow? ! "," arrow_lambda_with_args? "]}," RuboCop Cop Style RedundantSelf braces_style_call?":{"type":"method","name":"braces_style_call?","children":[],"call":["node loc selector nil? ","node loc selector ","node loc "]}," RuboCop Cop Style MultilineIfModifier indented_body":{"type":"method","name":"indented_body","children":[],"call":["(send\n  (send\n    (lvar :body_source) :each_line) :map) join ","line sub "," indentation "," offset length "," offset ","line == ","body_source each_line map ","body_source each_line ","body source "]}," RuboCop Cop Style MultilineIfModifier configured_indentation_width":{"type":"method","name":"configured_indentation_width","children":[],"call":[]}," RuboCop Cop Style MultilineIfModifier to_normal_if":{"type":"method","name":"to_normal_if","children":[],"call":[" offset ","cond source ","node loc keyword source ","node loc keyword ","node loc "," indented_body "," if_node_parts ","(lvar :condition) join ","node condition source ","node condition ","node keyword ","node body ","  indented_body  "]}," RuboCop Cop Style MultilineIfModifier autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," to_normal_if ","node source_range "," lambda "]}," RuboCop Cop Style MultilineIfModifier message":{"type":"method","name":"message","children":[],"call":[" format ","node loc keyword source ","node loc keyword ","node loc ","node keyword "]}," RuboCop Cop Style MultilineIfModifier on_if":{"type":"method","name":"on_if","children":[],"call":[" add_offense ","body single_line? "," if_node_parts "," modifier_if? "," format ","node keyword ","node body multiline? ","node body ","node modifier_form? ","corrector replace "," to_normal_if "]}," RuboCop Cop Rails TimeZone method_from_time_class?":{"type":"method","name":"method_from_time_class?","children":[],"call":["TIMECLASS  include? "," method_from_time_class? ","receiver cbase_type? ! ","receiver cbase_type? ","receiver is_a? ","TIMECLASSES  include? "]}," RuboCop Cop Rails OutputSafety looks_like_rails_raw?":{"type":"method","name":"looks_like_rails_raw?","children":[],"call":["args one? ","method_name == ","receiver nil? ","node arguments one? ","node arguments ","node command? "]}," RuboCop Cop Rails OutputSafety looks_like_rails_html_safe?":{"type":"method","name":"looks_like_rails_html_safe?","children":[],"call":["args empty? ","method_name == ","node arguments? ! ","node arguments? ","node method? ","node receiver "]}," RuboCop Cop TooManyLines extract_body":{"type":"method","name":"extract_body","children":[],"call":["node type ","node body "]}," RuboCop Cop Lint EmptyWhen empty_when_body?":{"type":"method","name":"empty_when_body?","children":[],"call":["when_node to_a last ! ","when_node to_a last ","when_node to_a "]}," RuboCop Cop Lint EmptyWhen check_when":{"type":"method","name":"check_when","children":[],"call":[" add_offense ","when_node source_range "," empty_when_body? "]}," RuboCop Cop Lint EmptyWhen on_case":{"type":"method","name":"on_case","children":[],"call":[" check_when ","when_nodes each "," add_offense ","when_node source_range ","when_node body ","node each_when "," comment_lines? "," cop_config [] "," cop_config "," contains_comments? "]}," RuboCop Cop Lint EmptyInterpolation autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["collector remove ","node loc expression ","node loc "," lambda "]}," RuboCop Cop Lint EmptyExpression empty_expression?":{"type":"method","name":"empty_expression?","children":[],"call":["begin_node children empty? ","begin_node children "]}," RuboCop Cop Lint EmptyExpression on_begin":{"type":"method","name":"on_begin","children":[],"call":[" add_offense ","node source_range "," empty_expression? "]}," RuboCop Cop Lint DuplicateCaseCondition repeated_condition?":{"type":"method","name":"repeated_condition?","children":[],"call":["x include? ","conditions_seen any? ","c include? ","previous any? "]}," RuboCop Cop Lint DuplicateCaseCondition when_conditions":{"type":"method","name":"when_conditions","children":[],"call":["when_node to_a [] ","when_node to_a "]}," RuboCop Cop Lint DuplicateCaseCondition on_case":{"type":"method","name":"on_case","children":[],"call":["conditions_seen push "," add_offense ","cond loc expression ","cond loc "," repeated_condition? ","conditions each "," when_conditions ","whens each ","previous push ","when_node conditions ","when_node each_condition ","case_node when_branches each_with_object ","case_node when_branches ","previous add? ","Set  new "," when_conditions _seen push "," when_conditions  each "," when_ when_conditions  ","when_node  when_conditions  "]}," RuboCop ConfigStore force_default_config!":{"type":"method","name":"force_default_config!","children":[],"call":["ConfigLoader  default_configuration "]}," CopHelper inspect_gemfile":{"type":"method","name":"inspect_gemfile","children":[],"call":[" inspect_source "]}," RuboCop Formatter FuubarStyleFormatter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop Cop VariableForce Locatable initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop Cop Style TernaryParentheses require_parentheses_when_complex?":{"type":"method","name":"require_parentheses_when_complex?","children":[],"call":[" style == "," style "]}," RuboCop Cop Style TernaryParentheses non_complex_type?":{"type":"method","name":"non_complex_type?","children":[],"call":["condition defined_type? "," operator? ! "," operator? ","condition method_name ","condition send_type? ","condition const_type? ","condition variable? "," square_brackets? ","condition yield_type? "]}," RuboCop Cop Style TernaryParentheses complex_condition?":{"type":"method","name":"complex_condition?","children":[],"call":[" non_complex_type? "," complex_condition? ","condition to_a any? ","condition to_a ","condition type == ","condition type ","condition begin_type? "," non_complex_expression? "," non_complex_expression? ! "]}," RuboCop Cop Style HashSyntax initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop Cop Style EmptyMethod expanded_style?":{"type":"method","name":"expanded_style?","children":[],"call":[" style == "," style "]}," RuboCop Cop Style EmptyMethod compact_style?":{"type":"method","name":"compact_style?","children":[],"call":[" style == "," style "]}," RuboCop Cop Style EmptyMethod expanded?":{"type":"method","name":"expanded?","children":[],"call":["node multiline? "]}," RuboCop Cop Style EmptyMethod compact?":{"type":"method","name":"compact?","children":[],"call":["node single_line? "]}," RuboCop Cop Style EmptyMethod comment_lines?":{"type":"method","name":"comment_lines?","children":[],"call":[" comment_line? "," processed_source [] any? "," processed_source [] "," line_range "," processed_source "]}," RuboCop Cop Style EmptyMethod corrected":{"type":"method","name":"corrected","children":[],"call":["(dstr\n  (str \"def \")\n  (begin\n    (lvar :method_name))\n  (begin\n    (lvar :arguments))) join "," compact_style? ","args source ","args children empty? ","args children ","(dstr\n  (str \"def \")\n  (begin\n    (lvar :scope))\n  (begin\n    (lvar :method_name))\n  (begin\n    (lvar :arguments))) join "," method_def_node_parts ","  * ","node loc column ","node loc ","args children empty? ! ","(dstr\n  (str \"def \")\n  (begin\n    (lvar :signature))) join "," joint ","(lvar :scope) join ","node method_name ","node receiver source ","node receiver ","node arguments source ","node arguments ","node arguments? ","has_parentheses ! "," parentheses? ","node arguments map join ","node arguments map ","(dstr\n  (str \"def \")\n  (begin\n    (lvar :method_name))\n  (begin\n    (lvar :args source ))) join ","(dstr\n  (str \"def \")\n  (begin\n    (lvar :method_name))\n  (begin\n    (lvar :node arguments source ))) join ","node arguments map join  source ","node arguments map join  children empty? ","node arguments map join  children ","(dstr\n  (str \"def \")\n  (begin\n    (lvar :scope))\n  (begin\n    (lvar :method_name))\n  (begin\n    (lvar :args source ))) join ","(dstr\n  (str \"def \")\n  (begin\n    (lvar :scope))\n  (begin\n    (lvar :method_name))\n  (begin\n    (lvar :node arguments source ))) join ","node arguments map join  children empty? ! ","(dstr\n  (str \"def \")\n  (begin\n    (lvar :(lvar :scope) join ))) join ","node args source  source ","node node arguments source  source ","node args source  ","node node arguments source  ","node args source ? ","node node arguments source ? "," parentheses?  ! ","node args source  map join ","node node arguments source  map join ","node args source  map ","node node arguments source  map "]}," RuboCop Cop Style EmptyMethod message":{"type":"method","name":"message","children":[],"call":[" compact_style? "]}," RuboCop Cop Style EmptyMethod autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," corrected ","node source_range "," lambda "]}," RuboCop Cop Style EmptyMethod on_def":{"type":"method","name":"on_def","children":[],"call":[" add_offense "," message ","node source_range "," expanded? "," expanded_style? "," compact? "," compact_style? "," comment_lines? "," correct_style? ","node body ","corrector replace "," corrected ","correction size > "," max_line_length ","correction size "," processed_source contains_comment? "," processed_source "," corrected  size > "," corrected  size "]}," RuboCop Cop Style EmptyLiteral correction":{"type":"method","name":"correction","children":[],"call":["args [] map unshift join ","args [] map unshift ","args [] map ","args [] ","node parent "," first_arg_in_method_call_without_parentheses? "," hash_node "," preferred_string_literal "," str_node "," array_node "," first_argument_unparenthesized? "," offense_hash_node? "," offense_array_node? ","node parent arguments ","node parent arguments  [] map unshift join ","node parent arguments  [] map unshift ","node parent arguments  [] map ","node parent arguments  [] "]}," RuboCop Cop Style EmptyLiteral replacement_range":{"type":"method","name":"replacement_range","children":[],"call":["node source_range ","Parser Source Range  new ","args [] loc expression end_pos ","args [] loc expression ","args [] loc ","args [] ","args [] loc expression begin_pos - ","args [] loc expression begin_pos ","node parent loc expression ","node parent loc ","node parent "," first_arg_in_method_call_without_parentheses? "," hash_node "," first_argument_unparenthesized? "," range_between ","node parent arguments ","args [] source_range end_pos ","args [] source_range ","args [] source_range begin_pos - ","args [] source_range begin_pos ","node parent arguments  [] loc expression end_pos ","node parent arguments  [] loc expression ","node parent arguments  [] loc ","node parent arguments  [] ","node parent arguments  [] loc expression begin_pos - ","node parent arguments  [] loc expression begin_pos ","node parent arguments  [] source_range end_pos ","node parent arguments  [] source_range ","node parent arguments  [] source_range begin_pos - ","node parent arguments  [] source_range begin_pos "]}," RuboCop Cop Rails EnumUniqueness parse_args":{"type":"method","name":"parse_args","children":[],"call":["enum_config last ","enum_config first source ","enum_config first ","args first each_child_node first child_nodes ","args first each_child_node first ","args first each_child_node ","args first ","args first each_child_node first child_nodes  last ","args first each_child_node first child_nodes  first source ","args first each_child_node first child_nodes  first "]}," RuboCop Cop Rails EnumUniqueness arr_dupes":{"type":"method","name":"arr_dupes","children":[],"call":["(send\n  (lvar :array) :select) uniq ","array count > ","array count ","array select "]}," RuboCop Cop Rails EnumUniqueness enum_hash_values":{"type":"method","name":"enum_hash_values","children":[],"call":["child_node child_nodes last source ","child_node child_nodes last ","child_node child_nodes ","hash_node each_child_node map ","hash_node each_child_node "]}," RuboCop Cop Rails EnumUniqueness enum_array_keys":{"type":"method","name":"enum_array_keys","children":[],"call":["array_node each_child_node map ","array_node each_child_node "]}," RuboCop Cop Rails EnumUniqueness enum_values":{"type":"method","name":"enum_values","children":[],"call":[" enum_hash_values "," enum_array_keys ","enum_args type == ","enum_args type "]}," RuboCop Cop Rails EnumUniqueness on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format ","dupes join ","dupes empty? "," arr_dupes "," enum_values "," parse_args ","method_name == ","item source "," consecutive_duplicates each "," consecutive_duplicates "," duplicates? ","args values "," enum_declaration "," arr_dupes  join "," arr_dupes  empty? "," arr_ arr_dupes  "]}," RuboCop Cop Performance Sample extract_source":{"type":"method","name":"extract_source","children":[],"call":["args first source ","args first ","args empty? "]}," RuboCop Cop Performance Sample sample_arg":{"type":"method","name":"sample_arg","children":[],"call":[" sample_size "," extract_source "]}," RuboCop Cop Performance Sample correction":{"type":"method","name":"correction","children":[],"call":["args empty? ","(lvar :sample_arg) compact join ","(lvar :sample_arg) compact "," sample_arg "," extract_source ","(lvar :sample_arg) compact join  empty? ","(lvar : sample_arg ) compact join ","(lvar : sample_arg ) compact ","  sample_arg  "]}," RuboCop Cop Performance Sample source_range":{"type":"method","name":"source_range","children":[],"call":["Parser Source Range  new ","node source_range end_pos ","node source_range ","shuffle_node loc selector begin_pos ","shuffle_node loc selector ","shuffle_node loc ","shuffle_node source_range source_buffer ","shuffle_node source_range "]}," RuboCop Cop Performance Sample range_size":{"type":"method","name":"range_size","children":[],"call":["(irange\n  (lvar :low)\n  (lvar :high)) size ","(erange\n  (lvar :low)\n  (lvar :high)) size ","range_node type ","high >= ","low zero? ","val children [] ","val children ","vals map ","vals all? ","range_node to_a ","range_node to_a  map ","range_node to_a  all? "]}," RuboCop Cop Performance Sample sample_size_for_two_args":{"type":"method","name":"sample_size_for_two_args","children":[],"call":["second to_a first ","second to_a ","second int_type? ","first to_a first zero? ","first to_a first ","first to_a ","first int_type? "]}," RuboCop Cop Performance Sample sample_size_for_one_arg":{"type":"method","name":"sample_size_for_one_arg","children":[],"call":["arg to_a first zero? ","arg to_a first ","arg to_a "," range_size ","arg type ","(int 0) include? "]}," RuboCop Cop Performance Sample sample_size":{"type":"method","name":"sample_size","children":[],"call":[" sample_size_for_two_args "," sample_size_for_one_arg ","method_args first ","method_args size "]}," RuboCop Cop Performance Sample offensive?":{"type":"method","name":"offensive?","children":[],"call":[" sample_size != "," sample_size "]}," RuboCop Cop Performance CompareWithBlock compare_range":{"type":"method","name":"compare_range","children":[],"call":[" range_between ","node loc end end_pos ","node loc end ","node loc ","send loc selector begin_pos ","send loc selector ","send loc "]}," RuboCop Cop Performance CompareWithBlock autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","send method_name "," compare_range ","node children last children last children last ","node children last children last children ","node children last children last ","node children last children ","node children last ","node children "," lambda ","arg first source ","arg first ","method == "," replaceable_body? "," compare? ","send node children last children last children last _name ","node children last children last children last  == "]}," RuboCop Cop Performance CompareWithBlock on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," format ","send method_name "," compare_range "," compare? "," message "," slow_compare? "," replaceable_body? "," compare_ compare_range  "]}," RuboCop Cop Style EmptyLinesAroundBody deferred_message":{"type":"method","name":"deferred_message","children":[],"call":[" format ","node type "]}," RuboCop Cop Style EmptyLinesAroundBody message":{"type":"method","name":"message","children":[],"call":[" format "," class "]}," RuboCop Cop Style EmptyLinesAroundBody previous_line_ignoring_comments":{"type":"method","name":"previous_line_ignoring_comments","children":[],"call":[" comment_line? "," processed_source [] "," processed_source ","(send\n  (lvar :send_line) :-\n  (int 2)) downto ","send_line - "]}," RuboCop Cop Style EmptyLinesAroundBody first_empty_line_required_child":{"type":"method","name":"first_empty_line_required_child","children":[],"call":[" empty_line_required? ","body children find ","body children ","body begin_type? "]}," RuboCop Cop Style EmptyLinesAroundBody first_child_requires_empty_line?":{"type":"method","name":"first_child_requires_empty_line?","children":[],"call":[" empty_line_required? ","body children first ","body children ","body begin_type? "]}," RuboCop Cop Style EmptyLinesAroundBody check_deferred_empty_line":{"type":"method","name":"check_deferred_empty_line","children":[],"call":[" add_offense "," deferred_message "," source_range ","line + "," processed_source buffer "," processed_source "," processed_source [] empty? "," processed_source [] "," previous_line_ignoring_comments ","node loc first_line ","node loc "," first_empty_line_required_child "," source_ source_range  "," previous_line_ignoring_comments  + "," previous_ previous_line_ignoring_comments _ignoring_comments ","node loc first_ previous_line_ignoring_comments  "," first_empty_line_required_child  loc first_line "," first_empty_line_required_child  loc "," first_empty_ previous_line_ignoring_comments _required_child "]}," RuboCop Cop Style EmptyLinesAroundBody check_ending":{"type":"method","name":"check_ending","children":[],"call":[" check_source ","last_line - "]}," RuboCop Cop Style EmptyLinesAroundBody check_beginning":{"type":"method","name":"check_beginning","children":[],"call":[" check_source "]}," RuboCop Cop Style EmptyLinesAroundBody check_empty_lines_special":{"type":"method","name":"check_empty_lines_special","children":[],"call":[" check_ending "," check_deferred_empty_line "," check_beginning "," first_child_requires_empty_line? "," check_both "," namespace? "]}," RuboCop Cop Style EmptyLinesAroundBody check_empty_lines_except_namespace":{"type":"method","name":"check_empty_lines_except_namespace","children":[],"call":[" check_both "," namespace? "]}," RuboCop Cop Metrics LineLength ignored_patterns":{"type":"method","name":"ignored_patterns","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Metrics LineLength matches_ignored_pattern?":{"type":"method","name":"matches_ignored_pattern?","children":[],"call":["Regexp  new match ","Regexp  new "," ignored_patterns any? "," ignored_patterns "]}," RuboCop Cop Metrics LineLength ignored_line?":{"type":"method","name":"ignored_line?","children":[],"call":[" line_in_whitelisted_heredoc? ","index succ "," matches_ignored_pattern? "," line_in_permitted_heredoc? ","line_index succ "," heredocs "," shebang? "]}," RuboCop Cop Lint UnneededSplatExpansion part_of_an_array?":{"type":"method","name":"part_of_an_array?","children":[],"call":["parent loc end ","parent loc ","parent loc begin ","parent array_type? ","node parent ","node parent  loc end ","node parent  loc ","node parent  loc begin ","node parent  array_type? ","node node parent  "]}," RuboCop Cop Lint Debugger binding_irb?":{"type":"method","name":"binding_irb?","children":[],"call":[" binding_irb_call? "," target_ruby_version >= "," target_ruby_version "]}," RuboCop Cop Bundler OrderedGems register_offense":{"type":"method","name":"register_offense","children":[],"call":[" add_offense "," format ","previous children [] children first ","previous children [] children ","previous children [] ","previous children ","current children [] children first ","current children [] children ","current children [] ","current children ","current source_range "," gem_name "]}," RuboCop Cop Bundler OrderedGems consecutive_lines":{"type":"method","name":"consecutive_lines","children":[],"call":["previous source_range last_line == ","current source_range first_line - ","current source_range first_line ","current source_range ","previous source_range last_line ","previous source_range ","first_line - "," get_source_range first_line "," get_source_range ","current source_range  get_source_range first_line  - ","current source_range  get_source_range first_line  "," get_source_range first_line  - "," get_source_range  get_source_range first_line  "]}," RuboCop Cop Bundler OrderedGems investigate":{"type":"method","name":"investigate","children":[],"call":[" register_offense ","current children [] children first to_s < ","previous children [] children first to_s ","previous children [] children first ","previous children [] children ","previous children [] ","previous children ","current children [] children first to_s ","current children [] children first ","current children [] children ","current children [] ","current children "," consecutive_lines "," gem_declarations each_cons "," gem_declarations ","processed_source ast ","processed_source ast nil? "," case_insensitive_out_of_order? "," gem_name ","processed_source blank? "]}," RuboCop Cop Bundler DuplicatedGem offense":{"type":"method","name":"offense","children":[],"call":[" add_offense "," format "," source_range ","node loc line ","node loc "," processed_source buffer "," processed_source ","node loc last_column ","node loc column "]}," RuboCop Cop Bundler DuplicatedGem duplicated_gem_nodes":{"type":"method","name":"duplicated_gem_nodes","children":[],"call":["(send\n  (block\n    (send\n      (send nil :gem_declarations\n        (send\n          (send nil :processed_source) :ast)) :group_by)\n    (args\n      (arg :e))\n    (send\n      (send\n        (lvar :e) :method_args) :first)) :keep_if) values ","nodes length > ","nodes length ","(send\n  (send nil :gem_declarations\n    (send\n      (send nil :processed_source) :ast)) :group_by) keep_if ","e method_args first ","e method_args "," gem_declarations group_by "," gem_declarations "," processed_source ast "," processed_source ","nodes size > ","nodes size "," gem_declarations group_by values select "," gem_declarations group_by values "," condition? ! "," condition? "," conditional_declaration? ! "," conditional_declaration? "]}," RuboCop Cop Bundler DuplicatedGem investigate":{"type":"method","name":"investigate","children":[],"call":[" offense ","nodes first loc line ","nodes first loc ","nodes first ","node method_args first to_a first ","node method_args first to_a ","node method_args first ","node method_args ","nodes [] each ","nodes [] "," duplicated_gem_nodes each "," duplicated_gem_nodes ","processed_source ast "," register_offense ","node first_argument to_a first ","node first_argument to_a ","node first_argument ","nodes first first_line ","processed_source blank? "]}," RuboCop ConfigLoader add_missing_namespaces":{"type":"method","name":"add_missing_namespaces","children":[],"call":["hash []= ","hash delete ","q == ","Cop Cop  qualified_cop_name ","hash keys each ","hash keys ","hash_keys each ","Cop Registry  qualified_cop_name ","Cop Cop  qualified_cop_name  == ","Cop Registry  qualified_cop_name  == ","Cop Cop  Cop Cop  qualified_cop_name ualified_cop_name ","Cop Cop  Cop Registry  qualified_cop_name ualified_cop_name ","hash keys  each ","Cop Registry  Cop Cop  qualified_cop_name ualified_cop_name ","Cop Registry  Cop Registry  qualified_cop_name ualified_cop_name "]}," CopHelper autocorrect_source_with_loop":{"type":"method","name":"autocorrect_source_with_loop","children":[],"call":["new_source == "," autocorrect_source ","cop instance_variable_set "," loop "," cop instance_variable_set "," cop "," raise ","RuboCop Runner InfiniteCorrectionLoop  new ","cnt > "," autocorrect_source  == "]}," RuboCop MagicComment SimpleComment extract_frozen_string_literal":{"type":"method","name":"extract_frozen_string_literal","children":[],"call":[" extract ","KEYWORDS  [] "]}," RuboCop MagicComment SimpleComment encoding":{"type":"method","name":"encoding","children":[],"call":[" extract ","KEYWORDS  [] "]}," RuboCop MagicComment VimComment frozen_string_literal":{"type":"method","name":"frozen_string_literal","children":[],"call":[]}," RuboCop MagicComment VimComment encoding":{"type":"method","name":"encoding","children":[],"call":[" match "," tokens size > "," tokens size "," tokens "]}," RuboCop MagicComment EmacsComment extract_frozen_string_literal":{"type":"method","name":"extract_frozen_string_literal","children":[],"call":[" match ","KEYWORDS  [] "]}," RuboCop MagicComment EmacsComment encoding":{"type":"method","name":"encoding","children":[],"call":[" match "]}," RuboCop MagicComment EditorComment tokens":{"type":"method","name":"tokens","children":[],"call":[" extract split map "," extract split "," class "," extract "]}," RuboCop MagicComment EditorComment match":{"type":"method","name":"match","children":[],"call":["value downcase ","token [] "," tokens each "," tokens "," class ","token []  downcase "]}," RuboCop MagicComment extract":{"type":"method","name":"extract","children":[],"call":["@comment [] "]}," RuboCop MagicComment frozen_string_literal":{"type":"method","name":"frozen_string_literal","children":[],"call":[" extract_frozen_string_literal "]}," RuboCop MagicComment frozen_string_literal_specified?":{"type":"method","name":"frozen_string_literal_specified?","children":[],"call":[" frozen_string_literal nil? ! "," frozen_string_literal nil? "," frozen_string_literal "," specified? "]}," RuboCop MagicComment frozen_string_literal?":{"type":"method","name":"frozen_string_literal?","children":[],"call":[" frozen_string_literal == "," frozen_string_literal "]}," RuboCop MagicComment initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop MagicComment parse":{"type":"method","name":"parse","children":[],"call":[]}," RuboCop Cop Util to_supported_styles":{"type":"method","name":"to_supported_styles","children":[],"call":["enforced_style sub sub ","enforced_style sub ","@to_supported_styles_cache [] "]}," RuboCop Cop Style SpaceAroundOperators hash_table_style?":{"type":"method","name":"hash_table_style?","children":[],"call":[" align_hash_cop_config [] == "," align_hash_cop_config [] "," align_hash_cop_config "]}," RuboCop Cop Style SpaceAroundOperators align_hash_cop_config":{"type":"method","name":"align_hash_cop_config","children":[],"call":[" config for_cop "," config "]}," RuboCop Cop Style SpaceAroundBlockParameters style_parameter_name":{"type":"method","name":"style_parameter_name","children":[],"call":[]}," RuboCop Cop Style SafeNavigation allowed_if_condition?":{"type":"method","name":"allowed_if_condition?","children":[],"call":["node elsif? ","node else? ","node if_type? ","node ternary? "]}," RuboCop Cop Style RedundantParentheses raised_to_power_negative_numeric?":{"type":"method","name":"raised_to_power_negative_numeric?","children":[],"call":["next_sibling == ","base_value < ","node children first ","node children ","siblings [] ","begin_node sibling_index + ","begin_node sibling_index ","siblings nil? ","begin_node parent children ","begin_node parent ","node numeric_type? ","base_value negative? ","begin_node right_sibling ","siblings []  == ","begin_node right_sibling  == ","node children first  < ","node children first  negative? "]}," RuboCop Cop Style RedundantParentheses allowed_multiple_expression?":{"type":"method","name":"allowed_multiple_expression?","children":[],"call":["ancestor block_type? ! ","ancestor block_type? ","ancestor def_type? ! ","ancestor def_type? ","ancestor begin_type? ! ","ancestor begin_type? ","node ancestors first ","node ancestors ","node children size == ","node children size ","node children ","node children one? ","node ancestors first  block_type? ! ","node ancestors first  block_type? ","node ancestors first  def_type? ! ","node ancestors first  def_type? ","node ancestors first  begin_type? ! ","node ancestors first  begin_type? ","node node ancestors first s first ","node node ancestors first s "]}," RuboCop Cop Style PercentQLiterals message":{"type":"method","name":"message","children":[],"call":[" style == "," style "]}," RuboCop Cop Style PercentQLiterals correct_literal_style?":{"type":"method","name":"correct_literal_style?","children":[],"call":[" type == "," type "," style == "," style "]}," RuboCop Cop Style OptionHash suspicious_name?":{"type":"method","name":"suspicious_name?","children":[],"call":[" cop_config [] include? ","arg_name to_s "," cop_config [] "," cop_config "," cop_config key? "]}," RuboCop Cop Style OneLineConditional to_ternary":{"type":"method","name":"to_ternary","children":[],"call":[" expr_replacement "]}," RuboCop Cop Style NumericLiterals max_parameter_name":{"type":"method","name":"max_parameter_name","children":[],"call":[]}," RuboCop Cop Style Next if_else_children?":{"type":"method","name":"if_else_children?","children":[],"call":["node each_child_node any? ","node each_child_node "]}," RuboCop Cop Style Next allowed_modifier_if?":{"type":"method","name":"allowed_modifier_if?","children":[],"call":[" min_body_length? ! "," min_body_length? "," style == "," style ","node modifier_form? "]}," RuboCop Cop Style MultilineIfThen non_modifier_then?":{"type":"method","name":"non_modifier_then?","children":[],"call":["node loc begin source_line =~ ","node loc begin source_line ","node loc begin ","node loc ","NON_MODIFIER_THEN  match? "]}," RuboCop Cop Style MissingElse empty_else_config":{"type":"method","name":"empty_else_config","children":[],"call":[" config for_cop "," config "]}," RuboCop Cop Style MissingElse empty_else_style":{"type":"method","name":"empty_else_style","children":[],"call":[" empty_else_config [] to_sym "," empty_else_config [] "," empty_else_config "," empty_else_config key? "]}," RuboCop Cop Style MissingElse empty_else_cop_enabled?":{"type":"method","name":"empty_else_cop_enabled?","children":[],"call":[" empty_else_config [] "," empty_else_config "," empty_else_config fetch "]}," RuboCop Cop Style MissingElse unless_else_config":{"type":"method","name":"unless_else_config","children":[],"call":[" config for_cop "," config "]}," RuboCop Cop Style MissingElse unless_else_cop_enabled?":{"type":"method","name":"unless_else_cop_enabled?","children":[],"call":[" unless_else_config [] "," unless_else_config "," unless_else_config fetch "]}," RuboCop Cop Style MissingElse case_style?":{"type":"method","name":"case_style?","children":[],"call":[" style == "," style "]}," RuboCop Cop Style MissingElse if_style?":{"type":"method","name":"if_style?","children":[],"call":[" style == "," style "]}," RuboCop Cop Style MethodCallWithoutArgsParentheses lambda_call_syntax?":{"type":"method","name":"lambda_call_syntax?","children":[],"call":["node loc selector nil? ","node loc selector ","node loc ","node method_name == ","node method_name "]}," RuboCop Cop Style MethodCallWithoutArgsParentheses variable_in_mass_assignment?":{"type":"method","name":"variable_in_mass_assignment?","children":[],"call":["(send\n  (lvar :var_nodes) :map) include? ","n to_a first ","n to_a ","var_nodes map ","n to_a first == ","var_nodes any? "]}," RuboCop Cop Style MethodCallWithoutArgsParentheses any_assignment?":{"type":"method","name":"any_assignment?","children":[],"call":["asgn_node send_type? ","asgn_node op_asgn_type? ","asgn_node and_asgn_type? ","asgn_node or_asgn_type? ","node each_ancestor any? ","node each_ancestor ","asgn_node shorthand_asgn? "]}," RuboCop Cop Style MethodCallWithoutArgsParentheses same_name_assignment?":{"type":"method","name":"same_name_assignment?","children":[],"call":["asgn_node loc name source == ","method_name to_s ","asgn_node loc name source ","asgn_node loc name ","asgn_node loc "," variable_in_mass_assignment? ","asgn_node masgn_type? "," any_assignment? ","node method_name to_s ","node method_name ","node receiver "]}," RuboCop Cop Style MethodCallWithoutArgsParentheses autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove ","node loc end ","node loc ","node loc begin "," lambda "]}," RuboCop Cop Style MethodCallWithoutArgsParentheses on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","node keyword_not? "," lambda_call_syntax? "," same_name_assignment? ","node loc begin ","node loc ","args empty? ","method_name =~ ","node implicit_call? ","node parenthesized? ","node arguments? ! ","node arguments? ","node camel_case_method? "," ineligible_node? "," ignored_method? ","node method_name ","node loc begin join ","node loc end ","corrector remove "," offense_range "," register_offense "," default_argument? "," allowed_method_name? "]}," RuboCop Cop Style MethodCallWithArgsParentheses args_end":{"type":"method","name":"args_end","children":[],"call":["node loc expression end ","node loc expression ","node loc ","node source_range end ","node source_range "]}," RuboCop Cop Style MethodCallWithArgsParentheses args_begin":{"type":"method","name":"args_begin","children":[],"call":["selector end resize ","selector end ","loc selector ","loc keyword ","node super_type? ","node loc ","node yield_type? "," args_parenthesized? ","loc selector  end resize ","loc keyword  end resize ","loc selector  end ","loc keyword  end ","loc loc selector  ","loc loc keyword  ","node loc  selector ","node loc  keyword ","node node loc  "]}," RuboCop Cop Style MethodCallWithArgsParentheses reciever?":{"type":"method","name":"reciever?","children":[],"call":["node children [] nil? ! ","node children [] nil? ","node children [] ","node children "]}," RuboCop Cop Style MethodCallWithArgsParentheses operator_call?":{"type":"method","name":"operator_call?","children":[],"call":["node loc dot ! ","node loc dot ","node loc "," reciever? ","node loc operator ","node operator_method? "]}," RuboCop Cop Style MethodCallWithArgsParentheses parentheses?":{"type":"method","name":"parentheses?","children":[],"call":["node loc begin ","node loc "]}," RuboCop Cop Style MethodCallWithArgsParentheses ignored_list":{"type":"method","name":"ignored_list","children":[],"call":[" cop_config [] map "," cop_config [] "," cop_config "]}," RuboCop Cop Style MethodCallWithArgsParentheses autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector insert_after "," args_end ","corrector replace "," args_begin "," lambda "," args_parenthesized? "," autocorrect_for_omit_parentheses "," autocorrect_for_require_parentheses "," style "]}," RuboCop Cop Style MethodCallWithArgsParentheses on_yield":{"type":"method","name":"on_yield","children":[],"call":[" add_offense "," parentheses? ","args empty? ","node children ","node children  empty? "]}," RuboCop Cop Style MethodCallWithArgsParentheses on_super":{"type":"method","name":"on_super","children":[],"call":[" add_offense "," parentheses? ","node parenthesized? "]}," RuboCop Cop Style MethodCallWithArgsParentheses on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," parentheses? "," operator_call? ","args empty? "," ignored_list include? "," ignored_list ","node macro? "," ignore_macros? ","node parenthesized? ! ","node parenthesized? ","node arguments? ","node method_name "," ignored_method? "," add_offense_for_omit_parentheses "," add_offense_for_require_parentheses "," style "," send "]}," RuboCop Cop Style InfiniteLoop configured_indent":{"type":"method","name":"configured_indent","children":[],"call":["  * "," config for_cop [] "," config for_cop "," config "]}," RuboCop Cop Style IfUnlessModifier to_modifier_form":{"type":"method","name":"to_modifier_form","children":[],"call":[" parenthesize? ","(send\n  (send\n    (lvar :node) :body) :source) compact join ","(send\n  (send\n    (lvar :node) :body) :source) compact "," first_line_comment ","node condition source ","node condition ","node keyword ","node body source ","node body "]}," RuboCop Cop Style IdenticalConditionalBranches head":{"type":"method","name":"head","children":[],"call":["node children first ","node children ","node begin_type? "]}," RuboCop Cop Style IdenticalConditionalBranches check_expressions":{"type":"method","name":"check_expressions","children":[],"call":[" add_offense "," format ","expression source ","expressions each ","expressions uniq one? ","expressions uniq ","expressions size > ","expressions size ","corrector insert_before ","corrector insert_after ","insert_position == ","corrector remove "," range_by_whole_lines ","expression source_range ","node ternary? ","node if_type? ","expressions any? ","  range_by_whole_lines _by_whole_lines ","expression source_ range_by_whole_lines  "]}," RuboCop Cop Style IdenticalConditionalBranches check_branches":{"type":"method","name":"check_branches","children":[],"call":[" check_expressions "," head ","branches compact map ","branches compact "," tail ","tails none? ","branches map ","branches any? "," duplicated_expressions? "," single_child_branch? "," last_child_of_parent? "]}," RuboCop Cop Style HashSyntax force_hash_rockets?":{"type":"method","name":"force_hash_rockets?","children":[],"call":["pairs map any? ","pairs map "," cop_config [] "," cop_config "]}," RuboCop Cop Style GuardClause accepted_if?":{"type":"method","name":"accepted_if?","children":[],"call":["node elsif? ","node else? ! ","node else? ","node ternary? ","node modifier_form? ","node elsif_conditional? "]}," RuboCop Cop Style FrozenStringLiteralComment unnecessary_comment_offense":{"type":"method","name":"unnecessary_comment_offense","children":[],"call":[" add_offense ","frozen_string_literal_comment pos "," frozen_string_literal_comment "," remove_comment "," frozen_string_literal_comment  pos ","  frozen_string_literal_comment  "]}," RuboCop Cop Style FrozenStringLiteralComment frozen_string_literal_comment":{"type":"method","name":"frozen_string_literal_comment","children":[],"call":["token text start_with? ","token text ","processed_source tokens find ","processed_source tokens ","processed_source find_token "]}," RuboCop Cop Style FrozenStringLiteralComment check_for_comment":{"type":"method","name":"check_for_comment","children":[],"call":[" offense "," style == "," style "]}," RuboCop Cop Style FrozenStringLiteralComment check_for_no_comment":{"type":"method","name":"check_for_no_comment","children":[],"call":[" unnecessary_comment_offense "," style == "," style "]}," RuboCop Cop Style FormatString method_name":{"type":"method","name":"method_name","children":[],"call":["style_name == "]}," RuboCop Cop Style FileName match_acronym?":{"type":"method","name":"match_acronym?","children":[],"call":["expected gsub == ","expected gsub ","acronym capitalize "," allowed_acronyms any? "," allowed_acronyms ","name to_s ","expected to_s ","expected to_s  gsub == ","expected to_s  gsub ","name to_s  to_s ","expected to_s  to_s "]}," RuboCop Cop Style FileName allowed_acronyms":{"type":"method","name":"allowed_acronyms","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style FileName ignore_executable_scripts?":{"type":"method","name":"ignore_executable_scripts?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style EmptyMethod on_method_def":{"type":"method","name":"on_method_def","children":[],"call":[" add_offense "," message ","node source_range "," expanded? "," expanded_style? "," compact? "," compact_style? "," comment_lines? "]}," RuboCop Cop Style EmptyLiteral first_argument_unparenthesized?":{"type":"method","name":"first_argument_unparenthesized?","children":[],"call":[" parentheses? ! "," parentheses? ","node parent ","node object_id == ","args first object_id ","args first ","node object_id ","node parent send_type? ","parent arguments first object_id ","parent arguments first ","parent arguments ","(sym :send) include? ","parent type ","node equal? "," node parent heses? ! "," node parent heses? ","node node parent  ","node node parent  send_type? ","node parent  arguments first object_id ","node parent  arguments first ","node parent  arguments ","node parent  type "]}," RuboCop Cop Style EmptyElse empty_style?":{"type":"method","name":"empty_style?","children":[],"call":[" style == "," style "]}," RuboCop Cop Style EmptyElse nil_style?":{"type":"method","name":"nil_style?","children":[],"call":[" style == "," style "]}," RuboCop Cop Style EmptyCaseCondition correct_when_conditions":{"type":"method","name":"correct_when_conditions","children":[],"call":["corrector replace ","conditions map join ","conditions map "," range_between ","conditions last loc expression end_pos ","conditions last loc expression ","conditions last loc ","conditions last ","conditions first loc expression begin_pos ","conditions first loc expression ","conditions first loc ","conditions first ","conditions size > ","conditions size ","when_node conditions ","when_nodes each ","conditions last source_range end_pos ","conditions last source_range ","conditions first source_range begin_pos ","conditions first source_range "," replace_then_with_line_break ","when_node conditions  map join ","when_node conditions  map ","  range_between _between ","when_node conditions  last loc expression end_pos ","when_node conditions  last loc expression ","when_node conditions  last loc ","when_node conditions  last ","when_node conditions  first loc expression begin_pos ","when_node conditions  first loc expression ","when_node conditions  first loc ","when_node conditions  first ","when_node conditions  size > ","when_node conditions  size ","when_node when_node conditions  ","conditions last source_ range_between  end_pos ","when_node conditions  last source_range end_pos ","conditions last source_ range_between  ","when_node conditions  last source_range ","conditions first source_ range_between  begin_pos ","when_node conditions  first source_range begin_pos ","conditions first source_ range_between  ","when_node conditions  first source_range "]}," RuboCop Cop Style EmptyCaseCondition correct_case_when":{"type":"method","name":"correct_case_when","children":[],"call":["corrector replace ","when_node loc keyword ","when_node loc ","when_nodes each ","case_node loc keyword join ","when_nodes shift loc keyword ","when_nodes shift loc ","when_nodes shift ","case_node loc keyword ","case_node loc ","when_nodes [] each ","when_nodes [] ","when_nodes first loc keyword ","when_nodes first loc ","when_nodes first "," remove_case_node "," keep_first_when_comment "]}," RuboCop Cop Style ConditionalAssignment include_ternary?":{"type":"method","name":"include_ternary?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style ConditionalAssignment ternary_condition?":{"type":"method","name":"ternary_condition?","children":[],"call":["n ternary? ","n if_type? ","(lvar :node) any? ","node children first ","node children ","(lvar :node) compact any? ","(lvar :node) compact "]}," RuboCop Cop Style ConditionalAssignment allowed_ternary?":{"type":"method","name":"allowed_ternary?","children":[],"call":[" include_ternary? ! "," include_ternary? ","assignment ternary? ","assignment if_type? "]}," RuboCop Cop Style ConditionalAssignmentHelper assignment_rhs_exist?":{"type":"method","name":"assignment_rhs_exist?","children":[],"call":["(or\n  (send\n    (lvar :parent) :mlhs_type?)\n  (send\n    (lvar :parent) :resbody_type?)) ! ","parent resbody_type? ","parent mlhs_type? ","node parent ","(or\n  (send\n    (lvar :node parent ) :mlhs_type?)\n  (send\n    (lvar :node parent ) :resbody_type?)) ! ","node parent  resbody_type? ","node parent  mlhs_type? ","node node parent  "]}," RuboCop Cop Style CaseIndentation message":{"type":"method","name":"message","children":[],"call":[" format "," indent_one_step? "]}," RuboCop Cop Style CaseIndentation indentation_width":{"type":"method","name":"indentation_width","children":[],"call":[" configured_indentation_width "," indent_one_step? "]}," RuboCop Cop Style CaseIndentation indent_one_step?":{"type":"method","name":"indent_one_step?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style AlignHash alignment_for_colons":{"type":"method","name":"alignment_for_colons","children":[],"call":[" new_alignment "]}," RuboCop Cop Style AlignHash alignment_for_hash_rockets":{"type":"method","name":"alignment_for_hash_rockets","children":[],"call":[" new_alignment "]}," RuboCop Cop Style AlignHash ignore_hash_argument?":{"type":"method","name":"ignore_hash_argument?","children":[],"call":["node braces? ! ","node braces? "," cop_config [] "," cop_config "]}," RuboCop Cop Style AlignHash double_splat?":{"type":"method","name":"double_splat?","children":[],"call":["node children last is_a? ","node children last ","node children "]}," RuboCop Cop Security YAMLLoad autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node loc selector ","node loc "," lambda "]}," RuboCop Cop Security YAMLLoad on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format "," yaml_load ","corrector replace ","node loc selector ","node loc "," target_ruby_version >= "," target_ruby_version "]}," RuboCop Cop Security MarshalLoad on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format "," marshal_load ","node loc selector ","node loc "]}," RuboCop Cop Security Eval on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," eval? ","code recursive_literal? ","code dstr_type? ","node loc selector ","node loc "]}," RuboCop Cop Registry registered?":{"type":"method","name":"registered?","children":[],"call":["@registry key? "," clear_enrollment_queue "]}," RuboCop Cop Registry resolve_badge":{"type":"method","name":"resolve_badge","children":[],"call":["real_badge to_s "," warn ","real_badge department ","given_badge match? ","PathUtil  smart_path ","PathUtil  smart_PathUtil  smart_path  "]}," RuboCop Cop Registry qualify_badge":{"type":"method","name":"qualify_badge","children":[],"call":[" registered? ","(send\n  (ivar :@departments) :map) select ","badge with_department ","@departments map "," clear_enrollment_queue "]}," RuboCop Cop Registry with":{"type":"method","name":"with","children":[],"call":[" class new "," class "]}," RuboCop Cop Registry each":{"type":"method","name":"each","children":[],"call":[" cops each "," cops "]}," RuboCop Cop Registry select":{"type":"method","name":"select","children":[],"call":[" cops select "," cops "]}," RuboCop Cop Registry sort!":{"type":"method","name":"sort!","children":[],"call":["Hash  [] ","badge cop_name ","@registry sort_by "," clear_enrollment_queue ","(send\n  (ivar :@registry) :sort_by) to_h ","Hash  []  sort_by ","(send\n  (ivar :@registry) :sort_by) to_h  sort_by ","(send\n  (ivar :Hash  [] ) :sort_by) to_h ","(send\n  (ivar :(send\n  (ivar :@registry) :sort_by) to_h ) :sort_by) to_h "]}," RuboCop Cop Registry ==":{"type":"method","name":"==","children":[],"call":[" cops == ","other cops "," cops "]}," RuboCop Cop Registry names":{"type":"method","name":"names","children":[],"call":[" cops map "," cops "]}," RuboCop Cop Registry enabled":{"type":"method","name":"enabled","children":[],"call":["only include? ","cop cop_name ","config cop_enabled? "," select ","config for_cop fetch ","config for_cop "," enabled? ","@enabled_cache [] "]}," RuboCop Cop Registry length":{"type":"method","name":"length","children":[],"call":["@registry size "," clear_enrollment_queue "]}," RuboCop Cop Registry cops":{"type":"method","name":"cops","children":[],"call":["@registry values "," clear_enrollment_queue "]}," RuboCop Cop Registry to_h":{"type":"method","name":"to_h","children":[],"call":[" cops group_by "," cops "," clear_enrollment_queue "]}," RuboCop Cop Registry qualified_cop_name":{"type":"method","name":"qualified_cop_name","children":[],"call":[" raise ","AmbiguousCopName  new "," resolve_badge ","potential_badges first ","potential_badges size "," qualify_badge "," registered? ","Badge  parse "," print_warning "," department_missing? "," resolve_Badge  parse  "," qualify_badge  first ","potential_Badge  parse s first "," qualify_badge  size ","potential_Badge  parse s size "," qualify_Badge  parse  "]}," RuboCop Cop Registry contains_cop_matching?":{"type":"method","name":"contains_cop_matching?","children":[],"call":["cop match? "," cops any? "," cops "]}," RuboCop Cop Registry without_department":{"type":"method","name":"without_department","children":[],"call":[" with ","without_department values flatten ","without_department values ","without_department delete ","@departments dup "," clear_enrollment_queue ","@departments dup  values flatten ","@departments dup  values ","@departments dup  delete "]}," RuboCop Cop Registry with_department":{"type":"method","name":"with_department","children":[],"call":[" with ","@departments fetch "," clear_enrollment_queue "]}," RuboCop Cop Registry departments":{"type":"method","name":"departments","children":[],"call":["@departments keys "," clear_enrollment_queue "]}," RuboCop Cop Registry enlist":{"type":"method","name":"enlist","children":[],"call":["@departments [] << ","@departments [] ","cop department ","@registry []= ","cop badge ","@cops_by_cop_name [] << ","@cops_by_cop_name [] ","cop cop_name ","@enrollment_queue << "]}," RuboCop Cop Registry initialize":{"type":"method","name":"initialize","children":[],"call":[" enlist ","cops each ","hash []= ","Hash  new "," compare_by_identity "]}," RuboCop Cop AmbiguousCopName initialize":{"type":"method","name":"initialize","children":[],"call":[" format ","badges to_a join ","badges to_a "]}," RuboCop Cop Rails UniqBeforePluck style_parameter_name":{"type":"method","name":"style_parameter_name","children":[],"call":[]}," RuboCop Cop Rails SkipsModelValidations blacklist":{"type":"method","name":"blacklist","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Rails SkipsModelValidations on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format ","node loc selector ","node loc "," blacklist include? ","method_name to_s "," blacklist ","args empty? ","METHODS_WITH_ARGUMENTS  include? ","node method_name to_s ","node method_name "," good_touch? "," whitelist include? "," whitelist "," allowed_method? "]}," RuboCop Cop Rails ReversibleMigration all_hash_key?":{"type":"method","name":"all_hash_key?","children":[],"call":["hash_keys & == ","hash_keys & ","arg to_a first children first to_sym ","arg to_a first children first ","arg to_a first children ","arg to_a first ","arg to_a ","args to_a map ","args to_a ","args hash_type? ","key children first to_sym ","key children first ","key children ","args keys map ","args keys "]}," RuboCop Cop Rails ReversibleMigration within_reversible_block?":{"type":"method","name":"within_reversible_block?","children":[],"call":["parent parent ","block_name == ","parent to_a first ","parent to_a ","parent block_type? ","node parent ","ancestor send_node method? ","ancestor send_node ","ancestor block_type? ","node each_ancestor any? ","node each_ancestor ","parent parent  parent parent  ","node parent  node parent  ","parent parent  to_a first ","node parent  to_a first ","parent parent  to_a ","node parent  to_a ","parent parent  block_type? ","node parent  block_type? ","node parent parent  ","node node parent  "]}," RuboCop Cop Rails ReversibleMigration within_change_method?":{"type":"method","name":"within_change_method?","children":[],"call":["parent parent ","method_name == ","parent def_type? ","node parent ","node each_ancestor any? ","node each_ancestor ","ancestor method? ","parent parent  parent parent  ","node parent  node parent  ","parent parent  def_type? ","node parent  def_type? ","node parent parent  ","node node parent  "]}," RuboCop Cop Rails ReversibleMigration check_remove_foreign_key_node":{"type":"method","name":"check_remove_foreign_key_node","children":[],"call":[" add_offense "," format ","arg hash_type? "," remove_foreign_key_call "]}," RuboCop Cop Rails ReversibleMigration check_remove_column_node":{"type":"method","name":"check_remove_column_node","children":[],"call":[" add_offense "," format ","args to_a size < ","args to_a size ","args to_a "," remove_column_call "]}," RuboCop Cop Rails ReversibleMigration check_change_column_default_node":{"type":"method","name":"check_change_column_default_node","children":[],"call":[" add_offense "," format "," all_hash_key? ","args first "," change_column_default_call ","args last "]}," RuboCop Cop Rails ReversibleMigration check_drop_table_node":{"type":"method","name":"check_drop_table_node","children":[],"call":[" add_offense "," format ","node parent block_type? ","node parent "," drop_table_call "]}," RuboCop Cop Rails ReversibleMigration check_irreversible_schema_statement_node":{"type":"method","name":"check_irreversible_schema_statement_node","children":[],"call":[" add_offense "," format "," irreversible_schema_statement_call "]}," RuboCop Cop Rails ReversibleMigration on_send":{"type":"method","name":"on_send","children":[],"call":[" check_remove_foreign_key_node "," check_remove_column_node "," check_change_column_default_node "," check_drop_table_node "," check_irreversible_schema_statement_node "," within_reversible_block? "," within_change_method? "," within_reversible_or_up_only_block? "]}," RuboCop Cop Rails NotNullColumn check_pairs":{"type":"method","name":"check_pairs","children":[],"call":[" add_offense "," null_false? ","pairs find "," has_default? ","pairs any? "," default_option? "]}," RuboCop Cop Rails NotNullColumn check_add_reference":{"type":"method","name":"check_add_reference","children":[],"call":[" check_pairs "," add_not_null_reference? "," check_ add_not_null_reference?  "]}," RuboCop Cop Rails NotNullColumn check_add_column":{"type":"method","name":"check_add_column","children":[],"call":[" check_pairs "," add_not_null_column? "," check_ add_not_null_column?  "]}," RuboCop Cop Rails HttpPositionalArguments format_arg?":{"type":"method","name":"format_arg?","children":[],"call":["node children first == ","node children first ","node children ","node type == ","node type ","node sym_type? ","node value == ","node value "]}," RuboCop Cop Rails HttpPositionalArguments special_keyword_arg?":{"type":"method","name":"special_keyword_arg?","children":[],"call":["KEYWORD_ARGS  include? ","node children first ","node children ","node type == ","node type ","node sym_type? ","node value "]}," RuboCop Cop Rails FilePath register_offense":{"type":"method","name":"register_offense","children":[],"call":[" add_offense "," source_range ","node loc line ","node loc "," processed_source buffer "," processed_source ","node loc last_column ","node loc column ","node first_line ","  source_range  "]}," RuboCop Cop Rails FilePath check_for_rails_root_join_with_slash_separated_path":{"type":"method","name":"check_for_rails_root_join_with_slash_separated_path","children":[],"call":[" register_offense ","arg source =~ ","arg source "," rails_root_join_nodes map flatten any? "," rails_root_join_nodes map flatten "," rails_root_join_nodes map "," rails_root_join_nodes "," rails_root_nodes? ","node method_args any? ","node method_args "," rails_root_join_nodes? "," string_with_slash? ","node arguments any? ","node arguments "," style == "," style "]}," RuboCop Cop Rails FilePath check_for_file_join_with_rails_root":{"type":"method","name":"check_for_file_join_with_rails_root","children":[],"call":[" register_offense "," rails_root_nodes? "," file_join_nodes map flatten any? "," file_join_nodes map flatten "," file_join_nodes map "," file_join_nodes "," file_join_nodes? ","node method_args any? ","node method_args ","node arguments any? ","node arguments "]}," RuboCop Cop Rails FilePath on_send":{"type":"method","name":"on_send","children":[],"call":[" check_for_rails_root_join_with_slash_separated_path "," check_for_file_join_with_rails_root "," check_for_rails_root_join_with_string_arguments "]}," RuboCop Cop Rails FilePath on_dstr":{"type":"method","name":"on_dstr","children":[],"call":[" register_offense "," rails_root_nodes? ","node children last source include? ","node children last source ","node children last ","node children ","node children last source start_with? "]}," RuboCop Cop Performance RegexpMatch correct_operator":{"type":"method","name":"correct_operator","children":[],"call":["corrector insert_after ","arg loc expression ","arg loc ","corrector replace ","Parser Source Range  new ","arg loc expression begin_pos ","recv loc expression end_pos ","recv loc expression ","recv loc "," processed_source buffer "," processed_source ","corrector insert_before ","oper == "," swap_receiver_and_arg ","TYPES_IMPLEMENTING_MATCH  include? ","arg type ","recv type "," correction_range "," processed_source  processed_source buffer  "]}," RuboCop Cop Performance RegexpMatch dollar_tilde":{"type":"method","name":"dollar_tilde","children":[],"call":["sym == "]}," RuboCop Cop Performance RegexpMatch scope_root":{"type":"method","name":"scope_root","children":[],"call":["ancestor module_type? ","ancestor class_type? ","ancestor def_type? ","node each_ancestor find ","node each_ancestor ","ancestor defs_type? "]}," RuboCop Cop Performance RegexpMatch scope_body":{"type":"method","name":"scope_body","children":[],"call":["node children [] ","node children ","children [] ","node type ","node node children  [] ","node node children  ","node children  [] "]}," RuboCop Cop Performance RegexpMatch find_last_match":{"type":"method","name":"find_last_match","children":[],"call":[" scope_root == "," scope_root ","range cover? ","ref loc expression begin_pos ","ref loc expression ","ref loc "," last_matches find "," last_matches "]}," RuboCop Cop Performance RegexpMatch next_match_pos":{"type":"method","name":"next_match_pos","children":[],"call":["node loc expression begin_pos ","node loc expression ","node loc "," scope_root == "," scope_root ","match loc expression begin_pos > ","match loc expression begin_pos ","match loc expression ","match loc "," search_match_nodes find "," search_match_nodes "]}," RuboCop Cop Performance RegexpMatch last_match_used?":{"type":"method","name":"last_match_used?","children":[],"call":[" find_last_match "," next_match_pos ","match_node loc expression begin_pos ","match_node loc expression ","match_node loc ","match_node ancestors last ","match_node ancestors "," scope_body "," scope_root ","match_node parent modifier_form? ","match_node parent ","match_node parent if_type? ","  next_match_pos  "," scope_match_node ancestors last  "," scope_ scope_body  ","  scope_root  "]}," RuboCop Cop Performance RegexpMatch check_condition":{"type":"method","name":"check_condition","children":[],"call":[" add_offense "," format ","cond loc selector source ","cond loc selector ","cond loc "," last_match_used? "," match_node? "]}," RuboCop Cop Performance RegexpMatch autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" correct_operator "," match_with_lvasgn? "," match_threequals? "," match_operator? ","corrector replace ","node loc selector ","node loc "," match_method? "," lambda "]}," RuboCop Cop Performance RegexpMatch on_case":{"type":"method","name":"on_case","children":[],"call":[" check_condition ","when_node each_condition ","node each_when ","node condition "]}," RuboCop Cop Performance RegexpMatch on_if":{"type":"method","name":"on_if","children":[],"call":[" check_condition ","node condition "]}," RuboCop Cop Performance FlatMap register_offense":{"type":"method","name":"register_offense","children":[],"call":[" add_offense "," format "," range_between ","node loc expression end_pos ","node loc expression ","node loc ","map_node loc selector begin_pos ","map_node loc selector ","map_node loc ","  range_between _between "]}," RuboCop Cop Performance Detect register_offense":{"type":"method","name":"register_offense","children":[],"call":[" add_offense "," format "," preferred_method ","second_method == ","receiver loc selector join ","node loc selector ","node loc ","receiver loc selector ","receiver loc "]}," RuboCop Cop Performance CaseWhenSplat non_splat?":{"type":"method","name":"non_splat?","children":[],"call":["condition splat_type? ! ","condition splat_type? ","variable array_type? "]}," RuboCop Cop Performance CaseWhenSplat indent_for":{"type":"method","name":"indent_for","children":[],"call":["  * ","node loc column ","node loc "]}," RuboCop Cop Performance CaseWhenSplat reordering_correction":{"type":"method","name":"reordering_correction","children":[],"call":[" new_branch_without_then "," new_condition_with_then "," same_line? ","when_node body "," replacement ","when_node conditions ","  replacement _with_then "]}," RuboCop Cop TrailingComma style_parameter_name":{"type":"method","name":"style_parameter_name","children":[],"call":[]}," RuboCop Cop TargetRubyVersion support_target_ruby_version?":{"type":"method","name":"support_target_ruby_version?","children":[],"call":["@minimum_target_ruby_version <= "," required_minimum_ruby_version <= "," required_minimum_ruby_version "]}," RuboCop Cop TargetRubyVersion minimum_target_ruby_version":{"type":"method","name":"minimum_target_ruby_version","children":[],"call":[]}," RuboCop Cop OnMethodDef method_def_node_parts":{"type":"method","name":"method_def_node_parts","children":[],"call":["node defs_type? ","node def_type? "]}," RuboCop Cop NegativeConditional negated_condition":{"type":"method","name":"negated_condition","children":[],"call":["condition children first ","condition children ","condition begin_type? ","node condition ","condition children first  children first ","node condition  children first ","condition children first  children ","node condition  children ","condition children first  begin_type? ","node condition  begin_type? ","node condition children first  ","node node condition  "]}," RuboCop Cop NegativeConditional negative_conditional_corrector":{"type":"method","name":"negative_conditional_corrector","children":[],"call":["corrector replace ","condition children first source ","condition children first ","condition children ","condition source_range ","node inverse_keyword ","node loc keyword ","node loc "," lambda "," negated_condition "," negated_condition  children first source "," negated_condition  children first "," negated_condition  children "," negated_condition  source_range "," negated_ negated_condition  "]}," RuboCop Cop HashAlignment SeparatorAlignment value_delta":{"type":"method","name":"value_delta","children":[],"call":["first_pair value_delta "]}," RuboCop Cop HashAlignment SeparatorAlignment hash_rocket_delta":{"type":"method","name":"hash_rocket_delta","children":[],"call":["first_pair delimiter_delta "]}," RuboCop Cop HashAlignment SeparatorAlignment key_delta":{"type":"method","name":"key_delta","children":[],"call":["first_pair key_delta "]}," RuboCop Cop HashAlignment SeparatorAlignment deltas_for_first_pair":{"type":"method","name":"deltas_for_first_pair","children":[],"call":[]}," RuboCop Cop HashAlignment TableAlignment value_delta":{"type":"method","name":"value_delta","children":[],"call":["correct_value_column - ","current_pair value loc column ","current_pair value loc ","current_pair value ","first_pair key loc column + + "," max_key_width ","first_pair key loc column + ","current_pair delimiter length ","current_pair delimiter ","first_pair key loc column ","first_pair key loc ","first_pair key ","current_pair kwsplat_type? ","first_pair key loc column + +  - "]}," RuboCop Cop HashAlignment TableAlignment hash_rocket_delta":{"type":"method","name":"hash_rocket_delta","children":[],"call":["first_pair loc column + + - ","current_pair loc operator column ","current_pair loc operator ","current_pair loc ","first_pair loc column + + ","first_pair loc column + "," max_key_width ","first_pair loc column ","first_pair loc "]}," RuboCop Cop HashAlignment TableAlignment key_delta":{"type":"method","name":"key_delta","children":[],"call":["first_pair key_delta "]}," RuboCop Cop HashAlignment TableAlignment deltas_for_first_pair":{"type":"method","name":"deltas_for_first_pair","children":[],"call":[" value_delta - "," value_delta "," separator_delta "," max_key_width= ","(send\n  (send\n    (lvar :node) :keys) :map) max ","key source length ","key source ","node keys map ","node keys ","  separator_delta  "]}," RuboCop Cop HashAlignment ValueAlignment separator_delta":{"type":"method","name":"separator_delta","children":[],"call":[" hash_rocket_delta - "," hash_rocket_delta ","current_pair colon? ","current_pair hash_rocket? "]}," RuboCop Cop HashAlignment ValueAlignment deltas":{"type":"method","name":"deltas","children":[],"call":[" value_delta - - "," value_delta - "," value_delta "," separator_delta "," key_delta ","  value_delta - -  - - ","  value_delta - -  - ","  value_delta - -  ","  separator_delta  ","  key_delta  "]}," RuboCop Cop HashAlignment ValueAlignment checkable_layout?":{"type":"method","name":"checkable_layout?","children":[],"call":["node mixed_delimiters? ! ","node mixed_delimiters? ","node pairs_on_same_line? ! ","node pairs_on_same_line? "]}," RuboCop Cop HashAlignment KeyAlignment deltas":{"type":"method","name":"deltas","children":[],"call":["first_pair key_delta ","Util  begins_its_line? ","current_pair source_range "," value_delta "," separator_delta ","first_pair first_pair key_delta  ","  value_delta  ","  separator_delta  "]}," RuboCop Cop HashAlignment KeyAlignment deltas_for_first_pair":{"type":"method","name":"deltas_for_first_pair","children":[],"call":[" value_delta "," separator_delta "]}," RuboCop Cop HashAlignment KeyAlignment checkable_layout?":{"type":"method","name":"checkable_layout?","children":[],"call":[]}," RuboCop Cop FrozenStringLiteral leading_comment_lines":{"type":"method","name":"leading_comment_lines","children":[],"call":[" processed_source [] compact "," processed_source [] "," processed_source ","leading_comments << ","comment text ","comment loc line > ","comment loc line ","comment loc ","comments each_with_object "," processed_source comments "," processed_source comments first map "," processed_source comments first "," processed_source lines "," processed_source lines [] ","first_non_comment_token line - ","first_non_comment_token line ","token comment? ! ","token comment? "," processed_source tokens find "," processed_source tokens ","leading_ processed_source comments  << "," processed_source comments  each_with_object "," processed_source  processed_source comments  "," processed_source  processed_source comments  first map "," processed_source  processed_source comments  first "]}," RuboCop Cop EndKeywordAlignment style_parameter_name":{"type":"method","name":"style_parameter_name","children":[],"call":[]}," RuboCop Cop Duplication grouped_duplicates":{"type":"method","name":"grouped_duplicates","children":[],"call":["(send\n  (lvar :collection) :group_by) values reject ","(send\n  (lvar :collection) :group_by) values ","collection group_by "]}," RuboCop Cop Duplication consecutive_duplicates":{"type":"method","name":"consecutive_duplicates","children":[],"call":["items [] "," grouped_duplicates flat_map "," grouped_duplicates "]}," RuboCop Cop Duplication duplicates":{"type":"method","name":"duplicates","children":[],"call":[" grouped_duplicates flatten "," grouped_duplicates "]}," RuboCop Cop Duplication duplicates?":{"type":"method","name":"duplicates?","children":[],"call":["collection size > ","collection uniq size ","collection uniq ","collection size "]}," RuboCop Cop DocumentationComment rubocop_directive_comment?":{"type":"method","name":"rubocop_directive_comment?","children":[],"call":["comment text =~ ","comment text ","CommentConfig COMMENT_DIRECTIVE_REGEXP  match? ","DirectiveComment  new match_captures ! ! ","DirectiveComment  new match_captures ! ","DirectiveComment  new match_captures ","DirectiveComment  new "]}," RuboCop Cop ConfigurableMax max_parameter_name":{"type":"method","name":"max_parameter_name","children":[],"call":[]}," RuboCop Cop ConfigurableFormatting class_emitter_method?":{"type":"method","name":"class_emitter_method?","children":[],"call":["c loc name is? ","name to_s ","c loc name ","c loc ","node parent each_child_node any? ","node parent each_child_node ","node parent ","node parent defs_type? ","node defs_type? ","node parent  parent each_child_node parent  any? ","node parent  parent each_child_node parent  ","node parent  parent ","node parent  parent defs_type? ","node parent  defs_type? "]}," RuboCop Cop ConfigurableFormatting valid_name?":{"type":"method","name":"valid_name?","children":[],"call":[" class_emitter_method? ","name match "," class FORMATS  fetch "," class ","name match? "]}," RuboCop Cop ConfigurableFormatting report_opposing_styles":{"type":"method","name":"report_opposing_styles","children":[],"call":[" unexpected_style_detected "," valid_name? "," alternative_styles each "," alternative_styles "]}," RuboCop Cop ConfigurableFormatting check_name":{"type":"method","name":"check_name","children":[],"call":[" report_opposing_styles "," add_offense "," message "," style "," correct_style_detected "," valid_name? "," operator? "]}," RuboCop Cop ConfigurableEnforcedStyle style_parameter_name":{"type":"method","name":"style_parameter_name","children":[],"call":[]}," RuboCop Cop ConfigurableEnforcedStyle alternative_styles":{"type":"method","name":"alternative_styles","children":[],"call":[" supported_styles - "," style "," supported_styles "]}," RuboCop Cop Metrics LineLength register_offense":{"type":"method","name":"register_offense","children":[],"call":[" max= ","line length "," add_offense "," format "," max "," line_length "," breakable_range "," breakable_range_by_line_index [] "," breakable_range_by_line_index ","  breakable_range  ","  breakable_range_by_line_index []  ","  breakable_range _by_line_index [] ","  breakable_range_by_line_index [] _by_line_index [] ","  breakable_range _by_line_index ","  breakable_range_by_line_index [] _by_line_index "]}," RuboCop Cop Metrics BlockNesting count_blocks?":{"type":"method","name":"count_blocks?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Metrics BlockNesting consider_node?":{"type":"method","name":"consider_node?","children":[],"call":["node block_type? "," count_blocks? ","NESTING_BLOCKS  include? ","node type ","node numblock_type? "]}," RuboCop Cop Metrics BlockLength excluded_methods":{"type":"method","name":"excluded_methods","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop MessageAnnotator details":{"type":"method","name":"details","children":[],"call":["details empty? ","details nil? "," cop_config [] "," cop_config "]}," RuboCop Cop MessageAnnotator display_cop_names?":{"type":"method","name":"display_cop_names?","children":[],"call":[" config for_all_cops [] "," config for_all_cops "," config "," options [] "," options "," debug? "," options [] == "]}," RuboCop Cop MessageAnnotator debug?":{"type":"method","name":"debug?","children":[],"call":[" options [] "," options "]}," RuboCop Cop MessageAnnotator extra_details?":{"type":"method","name":"extra_details?","children":[],"call":[" config for_all_cops [] "," config for_all_cops "," config "," options [] "," options "]}," RuboCop Cop MessageAnnotator reference_url":{"type":"method","name":"reference_url","children":[],"call":["url empty? ","url nil? "," cop_config [] "," cop_config "," cop_config []  empty? "," cop_config []  nil? "]}," RuboCop Cop MessageAnnotator display_style_guide?":{"type":"method","name":"display_style_guide?","children":[],"call":[" config for_all_cops [] "," config for_all_cops "," config "," options [] "," options "," reference_url "," style_guide_url "," urls empty? ! "," urls empty? "," urls "]}," RuboCop Cop MessageAnnotator style_guide_url":{"type":"method","name":"style_guide_url","children":[],"call":["URI  join to_s ","URI  join ","base_url empty? ","base_url nil? "," config for_all_cops [] "," config for_all_cops "," config ","url empty? ","url nil? "," cop_config [] "," cop_config "," class style_guide_urls [] "," class style_guide_urls "," class "," style_guide_base_url "," config for_all_cops []  empty? "," style_guide_base_url  empty? ","base_ cop_config []  empty? "," config for_all_cops []  nil? "," style_guide_base_url  nil? ","base_ cop_config []  nil? "," cop_config []  empty? "," cop_config []  nil? "," class style_guide_ cop_config [] s [] "," class style_guide_ cop_config [] s "," style_guide_ config for_all_cops []  "," style_guide_ style_guide_base_url  "," style_guide_base_ cop_config []  "]}," RuboCop Cop MessageAnnotator annotate":{"type":"method","name":"annotate","children":[],"call":["(send nil :style_guide_url) compact join ","(send nil :style_guide_url) compact "," reference_url "," style_guide_url "," display_style_guide? "," details "," extra_details? "," display_cop_names? "," urls join "," urls "," cop_name "]}," RuboCop Cop MessageAnnotator initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop Cop Lint Void check_for_defined":{"type":"method","name":"check_for_defined","children":[],"call":[" add_offense "," format ","node source ","node defined_type? "]}," RuboCop Cop Lint Void check_for_self":{"type":"method","name":"check_for_self","children":[],"call":[" add_offense ","node self_type? "]}," RuboCop Cop Lint UselessAccessModifier any_method_definition?":{"type":"method","name":"any_method_definition?","children":[],"call":[" send "," class def_node_matcher "," class "," respond_to? ","(begin\n  (lvar :m)) to_sym "," cop_config fetch any? "," cop_config fetch "," cop_config "," public_send "]}," RuboCop Cop Lint SafeNavigationChain nil_methods":{"type":"method","name":"nil_methods","children":[],"call":[" methods + "," methods "," whitelist "]}," RuboCop Cop Lint SafeNavigationChain autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector insert_before "," lambda ","node loc dot ","node loc ","corrector replace "," add_safe_navigation_operator ","node loc node loc dot  "]}," RuboCop Cop Lint SafeNavigationChain on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","node loc dot ","node loc "," nil_methods include? "," nil_methods "," bad_method? ","Parser Source Range  new ","method_chain loc expression end_pos ","method_chain loc expression ","method_chain loc ","safe_nav loc expression end_pos ","safe_nav loc expression ","safe_nav loc ","node loc expression source_buffer ","node loc expression "," method_chain ","method_chain source_range end_pos ","method_chain source_range ","safe_nav source_range end_pos ","safe_nav source_range ","node source_range source_buffer ","node source_range "," autocorrect ","PLUS_MINUS_METHODS  include? ","node method_name ","node source_range end_pos "," method_chain  loc expression end_pos "," method_chain  loc expression "," method_chain  loc ","  method_chain  "," method_chain  source_range end_pos "," method_chain  source_range "]}," RuboCop Cop Lint RequireParentheses check_predicate":{"type":"method","name":"check_predicate","children":[],"call":[" add_offense "," offense? ","predicate operator_keyword? "]}," RuboCop Cop Lint MultipleCompare autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","center source_range ","center source "," multiple_compare? "," lambda "," multiple_compare?  source_range "," multiple_compare?  source "]}," RuboCop Cop Lint MultipleCompare on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," multiple_compare? "]}," RuboCop Cop Lint LiteralInCondition check_case":{"type":"method","name":"check_case","children":[],"call":[" handle_node ","condition dstr_type? "," primitive_array? ! "," primitive_array? ","condition array_type? ","case_node condition ","case_node condition  dstr_type? ","case_node condition  array_type? ","case_node case_node condition  "]}," RuboCop Cop Lint FormatParameterMismatch arguments_count":{"type":"method","name":"arguments_count","children":[],"call":["args count ","(send\n  (send\n    (lvar :args) :count) :-\n  (int 1)) -@ ","args count - ","args last type == ","args last type ","args last ","args empty? ","args last splat_type? ","format scan count + ","format scan count ","format scan "]}," RuboCop Cop Lint FormatParameterMismatch matched_arguments_count?":{"type":"method","name":"matched_arguments_count?","children":[],"call":["expected != ","expected < ","passed abs ","passed < ","passed negative? "]}," RuboCop Cop Lint EndAlignment asgn_variable_align_with":{"type":"method","name":"asgn_variable_align_with","children":[],"call":["inner_node loc keyword ","inner_node loc "," range_between ","inner_node loc keyword end_pos ","expr begin_pos "," line_break_before_keyword? ! "," line_break_before_keyword? ","outer_node source_range ","outer_node source_range  begin_pos "]}," RuboCop Cop Lint BlockAlignment register_offense":{"type":"method","name":"register_offense","children":[],"call":[" add_offense "," format_message "," loc_to_source_line_column "," style == "," style "," format_ format_message  "]}," RuboCop Cop Lint BlockAlignment style_parameter_name":{"type":"method","name":"style_parameter_name","children":[],"call":[]}," RuboCop Cop Cop annotate":{"type":"method","name":"annotate","children":[],"call":["RuboCop Cop MessageAnnotator  new annotate "," name ","RuboCop Cop MessageAnnotator  new "," cop_config "," config "," cop_name "]}," RuboCop Cop Cop department":{"type":"method","name":"department","children":[],"call":[]}," RuboCop Cop Cop badge":{"type":"method","name":"badge","children":[],"call":[]}," RuboCop Cop Bundler OrderedGems previous_declaration":{"type":"method","name":"previous_declaration","children":[],"call":["declarations to_a [] ","node_index - ","declarations to_a ","declarations find_index "," gem_declarations "," processed_source ast "," processed_source ","declarations map find_index ","node location ","declarations map "," gem_declarations  to_a [] ","declarations find_index  - ","declarations map find_index  - "," gem_declarations  to_a "," gem_declarations  find_index "," gem_ gem_declarations  "," gem_declarations  map find_index "," gem_declarations  map "]}," RuboCop Cop Bundler OrderedGems swap_range":{"type":"method","name":"swap_range","children":[],"call":["corrector replace ","range2 source ","range1 source "]}," RuboCop Cop Bundler OrderedGems declaration_with_comment":{"type":"method","name":"declaration_with_comment","children":[],"call":["Parser Source Range  new ","buffer line_range end_pos ","buffer line_range ","buffer line_for_position ","node loc expression end_pos ","node loc expression ","node loc ","node loc expression begin_pos "," processed_source buffer "," processed_source "," get_source_range begin_pos "," get_source_range ","buffer line_range buffer line_range end_pos  "," processed_source buffer  line_range end_pos "," processed_source buffer  line_range "," processed_source buffer  line_for_position ","node loc expression buffer line_range end_pos  ","node loc expression node loc expression begin_pos  ","node loc expression  get_source_range begin_pos  "," processed_source  processed_source buffer  "," get_source_range node loc expression begin_pos  "," get_source_range  get_source_range begin_pos  "]}," RuboCop Cop Bundler OrderedGems autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" swap_range "," lambda "," declaration_with_comment "," previous_declaration ","OrderedGemCorrector  correct "," treat_comments_as_separators "," processed_source ","  previous_declaration _declaration "]}," RuboCop Cop Bundler OrderedGems case_insensitive_out_of_order?":{"type":"method","name":"case_insensitive_out_of_order?","children":[],"call":["1 > ","string_a casecmp ","string_a downcase < ","string_b downcase ","string_a downcase "]}," RuboCop Cop Bundler DuplicatedGem register_offense":{"type":"method","name":"register_offense","children":[],"call":[" add_offense "," format "," source_range ","node loc line ","node loc "," processed_source buffer "," processed_source ","node loc last_column ","node loc column ","node first_line "]}," RuboCop Cop Badge with_department":{"type":"method","name":"with_department","children":[],"call":[" class new "," cop_name "," class ","(send\n  (send\n    (lvar :department) :to_s) :split\n  (str \"/\")) flatten ","department to_s split ","department to_s "]}," RuboCop Cop Badge qualified?":{"type":"method","name":"qualified?","children":[],"call":[" department nil? ! "," department nil? "," department "]}," RuboCop Cop Badge to_s":{"type":"method","name":"to_s","children":[],"call":[" cop_name "," department "," qualified? "]}," RuboCop Cop Badge match?":{"type":"method","name":"match?","children":[],"call":[" department == ","other department "," department "," qualified? ! "," qualified? "," cop_name == ","other cop_name "," cop_name "]}," RuboCop Cop Badge hash":{"type":"method","name":"hash","children":[],"call":["(send nil :department) hash "," cop_name "," department "," department hash ^ "," cop_name hash "," department hash "]}," RuboCop Cop Badge ==":{"type":"method","name":"==","children":[],"call":[" hash == ","other hash "," hash "]}," RuboCop Cop Badge initialize":{"type":"method","name":"initialize","children":[],"call":["department to_sym ","class_name_parts last ","department_parts join to_sym ","department_parts join ","department_parts empty? ","class_name_parts [] ","class_name_parts []  join to_sym ","class_name_parts []  join ","class_name_parts []  empty? "]}," RuboCop Cop Badge parse":{"type":"method","name":"parse","children":[],"call":[]}," RuboCop Cop Badge for":{"type":"method","name":"for","children":[],"call":[]}," RuboCop Cop Badge InvalidBadge initialize":{"type":"method","name":"initialize","children":[],"call":[" format "]}," RuboCop Config obsolete_cops":{"type":"method","name":"obsolete_cops","children":[],"call":["message + "," loaded_path "," key? ","Cop Badge  parse cop_name ","Cop Badge  parse ","OBSOLETE_COPS  map "," smart_loaded_path "]}," RuboCop Config obsolete_parameter_message":{"type":"method","name":"obsolete_parameter_message","children":[],"call":[" loaded_path "," [] key? "," [] "," smart_loaded_path "]}," RuboCop Config obsolete_parameters":{"type":"method","name":"obsolete_parameters","children":[],"call":[" obsolete_parameter_message ","params [] ","OBSOLETE_PARAMETERS  map "]}," RuboCop Config reject_obsolete_cops_and_parameters":{"type":"method","name":"reject_obsolete_cops_and_parameters","children":[],"call":[" raise ","messages join ","messages empty? ","(send nil :obsolete_cops) flatten compact ","(send nil :obsolete_cops) flatten "," obsolete_parameters "," obsolete_cops "," obsolete_enforced_style ","(send nil :obsolete_cops) flatten compact  join ","(send nil :obsolete_cops) flatten compact  empty? "]}," RuboCop CLI cops_of_department":{"type":"method","name":"cops_of_department","children":[],"call":["cops with_department sort! ","cops with_department "]}," RuboCop CLI selected_cops_of_department":{"type":"method","name":"selected_cops_of_department","children":[],"call":["@options [] include? ","cop cop_name ","@options [] "," cops_of_department select "," cops_of_department "]}," RuboCop CLI print_cop_details":{"type":"method","name":"print_cop_details","children":[],"call":[" puts "," config_lines ","cop cop_name ","cop new support_autocorrect? ","cop new ","cops each "]}," RuboCop CLI print_cops_of_department":{"type":"method","name":"print_cops_of_department","children":[],"call":[" print_cop_details "," puts ","selected_cops length "," selected_cops_of_department "," cops_of_department "," selected_cops_of_department  length "," cops_of_department  length ","  selected_cops_of_department _of_department ","  cops_of_department _of_department "]}," RuboCop AST Traversal on_case":{"type":"method","name":"on_case","children":[],"call":[" send ","child type ","node children each ","node children "]}," RuboCop AST Traversal on_block":{"type":"method","name":"on_block","children":[],"call":[" send ","child type ","children [] "," on_args ","node children ","children []  type ","children [] ren [] ","node children  [] ","node children [] ren ","node node children  "]}," RuboCop AST Traversal on_while":{"type":"method","name":"on_while","children":[],"call":[" send ","child type ","children [] ","node children ","children []  type ","children [] ren [] ","node children  [] ","node children [] ren ","node node children  "]}," RuboCop AST Traversal on_if":{"type":"method","name":"on_if","children":[],"call":[" send ","child type ","children [] ","node children ","children []  type ","children [] ren [] ","node children  [] ","node children [] ren ","node node children  "]}," RuboCop AST Traversal on_defs":{"type":"method","name":"on_defs","children":[],"call":[" send ","child type ","children [] "," on_args ","node children ","children []  type ","children [] ren [] ","node children  [] ","node children [] ren ","node node children  "]}," RuboCop AST Traversal on_op_asgn":{"type":"method","name":"on_op_asgn","children":[],"call":[" send ","child type ","children [] ","node children ","children []  type ","children [] ren [] ","node children  [] ","node children [] ren ","node node children  "]}," RuboCop AST Traversal on_send":{"type":"method","name":"on_send","children":[],"call":[" send ","child type ","i == ","node children each_with_index ","node children "]}," RuboCop AST Traversal on_def":{"type":"method","name":"on_def","children":[],"call":[" send ","child type ","children [] "," on_args ","node children ","children []  type ","children [] ren [] ","node children  [] ","node children [] ren ","node node children  "]}," RuboCop AST Traversal on_class":{"type":"method","name":"on_class","children":[],"call":[" send ","child type ","children [] ","node children ","children []  type ","children [] ren [] ","node children  [] ","node children [] ren ","node node children  "]}," RuboCop AST Traversal on_casgn":{"type":"method","name":"on_casgn","children":[],"call":[" send ","child type ","children [] ","node children ","children []  type ","children [] ren [] ","node children  [] ","node children [] ren ","node node children  "]}," RuboCop AST Traversal on_const":{"type":"method","name":"on_const","children":[],"call":[" send ","child type ","node children [] ","node children ","node children []  type ","node node children [] ren [] ","node node children [] ren "]}," RuboCop AST Traversal walk":{"type":"method","name":"walk","children":[],"call":[" send ","node type ","node nil? "]}," RuboCop AST Sexp s":{"type":"method","name":"s","children":[],"call":["Node  new "]}," RuboCop AST Node new_class_or_module_block?":{"type":"method","name":"new_class_or_module_block?","children":[],"call":["block_node parent casgn_type? ","block_node parent ","receiver const_name == ","receiver const_name ","receiver const_type? ","block_node method_name == ","block_node method_name ","block_node receiver ","block_node receiver  const_name == ","block_node receiver  const_name ","block_node receiver  const_type? ","block_node block_node receiver  "]}," RuboCop AST Node parent_module_name_for_block":{"type":"method","name":"parent_module_name_for_block","children":[],"call":[" new_class_or_module_block? ! "," new_class_or_module_block? ","receiver const_name ","receiver const_type? ","ancestor receiver ","ancestor method_name == ","ancestor method_name ","ancestor method? ","ancestor receiver  const_name ","ancestor receiver  const_type? ","ancestor ancestor receiver  "]}," RuboCop AST Node parent_module_name_for_sclass":{"type":"method","name":"parent_module_name_for_sclass","children":[],"call":["sclass_node parent_module_name ","subject self_type? ","subject const_name ","subject const_type? ","sclass_node children [] ","sclass_node children ","sclass_node children []  self_type? ","sclass_node children []  const_name ","sclass_node children []  const_type? "]}," RuboCop AST Node parent_module_name_part":{"type":"method","name":"parent_module_name_part","children":[],"call":[" parent_module_name_for_block "," parent_module_name_for_sclass ","node defined_module_name ","node type "]}," RuboCop AST Node while_until_value_used?":{"type":"method","name":"while_until_value_used?","children":[],"call":[" sibling_index zero? "," sibling_index "]}," RuboCop AST Node case_if_value_used?":{"type":"method","name":"case_if_value_used?","children":[],"call":[" parent value_used? "," parent "," sibling_index zero? "," sibling_index "]}," RuboCop AST Node for_value_used?":{"type":"method","name":"for_value_used?","children":[],"call":[" parent value_used? "," parent "," sibling_index == "," sibling_index "]}," RuboCop AST Node begin_value_used?":{"type":"method","name":"begin_value_used?","children":[],"call":[" parent value_used? "," parent "," sibling_index == "," parent children size - "," parent children size "," parent children "," sibling_index "]}," RuboCop AST Node visit_ancestors":{"type":"method","name":"visit_ancestors","children":[],"call":["types include? ","current_node type ","types empty? ","last_node parent ","last_node parent  type "]}," RuboCop AST Node visit_descendants":{"type":"method","name":"visit_descendants","children":[],"call":["child visit_descendants ","types include? ","child type ","types empty? "," each_child_node "]}," RuboCop AST Node pure?":{"type":"method","name":"pure?","children":[],"call":[" child_nodes all? "," child_nodes "," type "]}," RuboCop AST Node value_used?":{"type":"method","name":"value_used?","children":[],"call":[" while_until_value_used? "," case_if_value_used? "," for_value_used? "," begin_value_used? "," parent value_used? "," parent "," parent type "," parent nil? "]}," RuboCop AST Node numeric_type?":{"type":"method","name":"numeric_type?","children":[],"call":[" float_type? "," int_type? "]}," RuboCop AST Node argument?":{"type":"method","name":"argument?","children":[],"call":[" parent send_type? "," parent "," parent arguments include? "," parent arguments "]}," RuboCop AST Node chained?":{"type":"method","name":"chained?","children":[],"call":[" equal? "," parent "," argument? "," eql? "," parent receiver "," parent send_type? "]}," RuboCop AST Node binary_operation?":{"type":"method","name":"binary_operation?","children":[],"call":[" source_range begin_pos != "," loc selector begin_pos "," loc selector "," loc "," source_range begin_pos "," source_range ","Cop Util  operator? "," method_name "," loc respond_to? "]}," RuboCop AST Node unary_operation?":{"type":"method","name":"unary_operation?","children":[],"call":[" source_range begin_pos == "," loc selector begin_pos "," loc selector "," loc "," source_range begin_pos "," source_range ","Cop Util  operator? "," loc selector source to_sym "," loc selector source "," loc respond_to? "]}," RuboCop AST Node keyword_bang?":{"type":"method","name":"keyword_bang?","children":[],"call":[" loc selector is? ","! freeze "," loc selector "," loc ","method_name == ","args empty? "]}," RuboCop AST Node keyword_not?":{"type":"method","name":"keyword_not?","children":[],"call":[" loc selector is? ","not freeze "," loc selector "," loc ","method_name == ","args empty? "]}," RuboCop AST Node special_keyword?":{"type":"method","name":"special_keyword?","children":[],"call":["SPECIAL_KEYWORDS  include? "," source "]}," RuboCop AST Node keyword?":{"type":"method","name":"keyword?","children":[],"call":[" loc operator is? "," type to_s "," type "," loc operator "," loc ","OPERATOR_KEYWORDS  include? ! ","OPERATOR_KEYWORDS  include? ","KEYWORDS  include? "," keyword_not? "," special_keyword? "," prefix_not? "," send_type? "]}," RuboCop AST Node reference?":{"type":"method","name":"reference?","children":[],"call":["REFERENCES  include? "," type "]}," RuboCop AST Node variable?":{"type":"method","name":"variable?","children":[],"call":["VARIABLES  include? "," type "]}," RuboCop AST Node immutable_literal?":{"type":"method","name":"immutable_literal?","children":[],"call":["IMMUTABLE_LITERALS  include? "," type "]}," RuboCop AST Node mutable_literal?":{"type":"method","name":"mutable_literal?","children":[],"call":["MUTABLE_LITERALS  include? "," type "]}," RuboCop AST Node falsey_literal?":{"type":"method","name":"falsey_literal?","children":[],"call":["FALSEY_LITERALS  include? "," type "]}," RuboCop AST Node truthy_literal?":{"type":"method","name":"truthy_literal?","children":[],"call":["TRUTHY_LITERALS  include? "," type "]}," RuboCop AST Node basic_literal?":{"type":"method","name":"basic_literal?","children":[],"call":["BASIC_LITERALS  include? "," type "]}," RuboCop AST Node literal?":{"type":"method","name":"literal?","children":[],"call":["LITERALS  include? "," type "]}," RuboCop AST Node asgn_method_call?":{"type":"method","name":"asgn_method_call?","children":[],"call":[" method_name to_s end_with? ","= freeze "," method_name to_s "," method_name ","COMPARISON_OPERATORS  include? ! ","COMPARISON_OPERATORS  include? "]}," RuboCop AST Node single_line?":{"type":"method","name":"single_line?","children":[],"call":[" multiline? ! "," multiline? "," line_count == "," line_count "]}," RuboCop AST Node multiline?":{"type":"method","name":"multiline?","children":[],"call":[" source_range first_line != "," source_range last_line "," source_range "," source_range first_line "," line_count > "," line_count "]}," RuboCop AST Node parent_module_name":{"type":"method","name":"parent_module_name","children":[],"call":["result empty? ","(send\n  (lvar :ancestors) :map) compact reverse join ","(send\n  (lvar :ancestors) :map) compact reverse ","(send\n  (lvar :ancestors) :map) compact "," parent_module_name_part ","ancestors map "," each_ancestor ","(send\n  (lvar :ancestors) :map) compact reverse join  empty? ","(send\n  (lvar : each_ancestor ) :map) compact reverse join ","(send\n  (lvar : each_ancestor ) :map) compact reverse ","(send\n  (lvar : each_ancestor ) :map) compact "," each_ancestor  map "]}," RuboCop AST Node defined_module_name":{"type":"method","name":"defined_module_name","children":[],"call":["const const_name "," defined_module "," defined_module   defined_module _name "]}," RuboCop AST Node defined_module":{"type":"method","name":"defined_module","children":[],"call":[" s "," defined_module0 "]}," RuboCop AST Node const_name":{"type":"method","name":"const_name","children":[],"call":["name to_s ","namespace const_name ","namespace cbase_type? ! ","namespace cbase_type? "," const_type? "]}," RuboCop AST Node source_range":{"type":"method","name":"source_range","children":[],"call":[" loc expression "," loc "]}," RuboCop AST Node source":{"type":"method","name":"source","children":[],"call":[" loc expression source "," loc expression "," loc "]}," RuboCop AST Node each_node":{"type":"method","name":"each_node","children":[],"call":[" visit_descendants ","types include? "," type ","types empty? "," to_enum "," __method__ "," block_given? "]}," RuboCop AST Node descendants":{"type":"method","name":"descendants","children":[],"call":[" each_descendant to_a "," each_descendant "]}," RuboCop AST Node each_descendant":{"type":"method","name":"each_descendant","children":[],"call":[" visit_descendants "," to_enum "," __method__ "," block_given? "]}," RuboCop AST Node child_nodes":{"type":"method","name":"child_nodes","children":[],"call":[" each_child_node to_a "," each_child_node "]}," RuboCop AST Node each_child_node":{"type":"method","name":"each_child_node","children":[],"call":["types include? ","child type ","types empty? ","child is_a? "," children each "," children "," to_enum "," __method__ "," block_given? "]}," RuboCop AST Node ancestors":{"type":"method","name":"ancestors","children":[],"call":[" each_ancestor to_a "," each_ancestor "]}," RuboCop AST Node each_ancestor":{"type":"method","name":"each_ancestor","children":[],"call":[" visit_ancestors "," to_enum "," __method__ "," block_given? "]}," RuboCop AST Node sibling_index":{"type":"method","name":"sibling_index","children":[],"call":["sibling equal? "," parent children index "," parent children "," parent "]}," RuboCop AST Node updated":{"type":"method","name":"updated","children":[],"call":["Node  new ","properties [] "," class new "," class ","klass new ","RuboCop AST Builder NODE_MAP  [] "]}," RuboCop AST Node complete?":{"type":"method","name":"complete?","children":[],"call":["@mutable_attributes frozen? "]}," RuboCop AST Node complete!":{"type":"method","name":"complete!","children":[],"call":[" each_child_node ","@mutable_attributes freeze "]}," RuboCop AST Node parent=":{"type":"method","name":"parent=","children":[],"call":["@mutable_attributes []= "]}," RuboCop AST Node parent":{"type":"method","name":"parent","children":[],"call":["@mutable_attributes [] "]}," RuboCop AST Node initialize":{"type":"method","name":"initialize","children":[],"call":["child_node parent= ","child_node complete? "," each_child_node "]}," RuboCop AST Node def_matcher":{"type":"method","name":"def_matcher","children":[],"call":[" class_eval ","lineno to_i "," caller first split "," caller first "," caller ","compiler emit_method_code ","compiler emit_param_list ","RuboCop NodePattern Compiler  new ","location lineno ","location path "," caller_locations first "," caller_locations ","RuboCop NodePattern Compiler  new  emit_method_code ","RuboCop NodePattern Compiler  new  emit_param_list "," caller_locations first  lineno "," caller_locations first  path "," caller_ caller_locations first s first "," caller_ caller_locations first s "]}," RuboCop AST WhileNode node_parts":{"type":"method","name":"node_parts","children":[],"call":[" to_a "]}," RuboCop AST WhileNode do?":{"type":"method","name":"do?","children":[],"call":[" loc begin is? "," loc begin "," loc "]}," RuboCop AST WhileNode inverse_keyword":{"type":"method","name":"inverse_keyword","children":[],"call":[]}," RuboCop AST WhileNode keyword":{"type":"method","name":"keyword","children":[],"call":[]}," RuboCop AST WhenNode node_parts":{"type":"method","name":"node_parts","children":[],"call":[" to_a "]}," RuboCop AST WhenNode body":{"type":"method","name":"body","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST WhenNode then?":{"type":"method","name":"then?","children":[],"call":[" loc begin is? "," loc begin "," loc "]}," RuboCop AST WhenNode branch_index":{"type":"method","name":"branch_index","children":[],"call":[" parent when_branches index "," parent when_branches "," parent "]}," RuboCop AST WhenNode each_condition":{"type":"method","name":"each_condition","children":[],"call":[" conditions each "," conditions "," conditions to_enum "," __method__ "," block_given? "]}," RuboCop AST WhenNode conditions":{"type":"method","name":"conditions","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST UntilNode node_parts":{"type":"method","name":"node_parts","children":[],"call":[" to_a "]}," RuboCop AST UntilNode do?":{"type":"method","name":"do?","children":[],"call":[" loc begin is? "," loc begin "," loc "]}," RuboCop AST UntilNode inverse_keyword":{"type":"method","name":"inverse_keyword","children":[],"call":[]}," RuboCop AST UntilNode keyword":{"type":"method","name":"keyword","children":[],"call":[]}," RuboCop AST PairNode node_parts":{"type":"method","name":"node_parts","children":[],"call":[" to_a "]}," RuboCop AST PairNode inverse_delimiter":{"type":"method","name":"inverse_delimiter","children":[],"call":[" hash_rocket? "]}," RuboCop AST PairNode delimiter":{"type":"method","name":"delimiter","children":[],"call":[" hash_rocket? "]}," RuboCop AST PairNode colon?":{"type":"method","name":"colon?","children":[],"call":[" loc operator is? "," loc operator "," loc "]}," RuboCop AST PairNode hash_rocket?":{"type":"method","name":"hash_rocket?","children":[],"call":[" loc operator is? "," loc operator "," loc "]}," RuboCop AST ModifierNode modifier_form?":{"type":"method","name":"modifier_form?","children":[],"call":[" loc end nil? "," loc end "," loc "]}," RuboCop AST HashElementNode HashElementDelta keyword_splat?":{"type":"method","name":"keyword_splat?","children":[],"call":["(send nil :first) any? "," second "," first "]}," RuboCop AST HashElementNode HashElementDelta delta":{"type":"method","name":"delta","children":[],"call":["first last_column - ","second last_column ","first last_column ","first column - ","second column ","first column "]}," RuboCop AST HashElementNode HashElementDelta valid_argument_types?":{"type":"method","name":"valid_argument_types?","children":[],"call":["argument kwsplat_type? ","argument pair_type? ","(send nil :first) all? "," second "," first "]}," RuboCop AST HashElementNode HashElementDelta delimiter_delta":{"type":"method","name":"delimiter_delta","children":[],"call":[" delta "," second loc operator "," second loc "," second "," first loc operator "," first loc "," first "," first delimiter != "," second delimiter "," first delimiter "," first same_line? "]}," RuboCop AST HashElementNode HashElementDelta value_delta":{"type":"method","name":"value_delta","children":[],"call":[" delta "," second value loc "," second value "," second "," first value loc "," first value "," first "," keyword_splat? "," first same_line? "]}," RuboCop AST HashElementNode HashElementDelta key_delta":{"type":"method","name":"key_delta","children":[],"call":[" delta "," second key loc "," second key "," second "," first key loc "," first key "," first ","alignment == "," keyword_splat? "," first same_line? "]}," RuboCop AST HashElementNode HashElementDelta initialize":{"type":"method","name":"initialize","children":[],"call":[" raise "," valid_argument_types? "]}," RuboCop AST HashElementNode delimiter_delta":{"type":"method","name":"delimiter_delta","children":[],"call":["HashElementDelta  new delimiter_delta ","HashElementDelta  new "]}," RuboCop AST HashElementNode value_delta":{"type":"method","name":"value_delta","children":[],"call":["HashElementDelta  new value_delta ","HashElementDelta  new "]}," RuboCop AST HashElementNode key_delta":{"type":"method","name":"key_delta","children":[],"call":["HashElementDelta  new key_delta ","HashElementDelta  new "]}," RuboCop AST HashElementNode same_line?":{"type":"method","name":"same_line?","children":[],"call":[" loc line == ","other loc last_line ","other loc "," loc line "," loc "," loc last_line == ","other loc line "," loc last_line "]}," RuboCop AST HashElementNode value":{"type":"method","name":"value","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST HashElementNode key":{"type":"method","name":"key","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST ConditionalNode body":{"type":"method","name":"body","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST ConditionalNode condition":{"type":"method","name":"condition","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST ConditionalNode multiline_condition?":{"type":"method","name":"multiline_condition?","children":[],"call":[" single_line_condition? ! "," single_line_condition? "]}," RuboCop AST ConditionalNode single_line_condition?":{"type":"method","name":"single_line_condition?","children":[],"call":[" loc keyword line == "," condition source_range line "," condition source_range "," condition "," loc keyword line "," loc keyword "," loc "]}," RuboCop AST KeywordSplatNode node_parts":{"type":"method","name":"node_parts","children":[],"call":[]}," RuboCop AST KeywordSplatNode operator":{"type":"method","name":"operator","children":[],"call":[]}," RuboCop AST KeywordSplatNode colon?":{"type":"method","name":"colon?","children":[],"call":[]}," RuboCop AST KeywordSplatNode hash_rocket?":{"type":"method","name":"hash_rocket?","children":[],"call":[]}," RuboCop AST IfNode node_parts":{"type":"method","name":"node_parts","children":[],"call":[" unless? "]}," RuboCop AST IfNode else_branch":{"type":"method","name":"else_branch","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST IfNode if_branch":{"type":"method","name":"if_branch","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST IfNode nested_conditional?":{"type":"method","name":"nested_conditional?","children":[],"call":["nested elsif? ","branch each_node "," node_parts [] compact each "," node_parts [] compact "," node_parts [] "," node_parts "]}," RuboCop AST IfNode modifier_form?":{"type":"method","name":"modifier_form?","children":[],"call":[" unless? "," if? "]}," RuboCop AST IfNode inverse_keyword":{"type":"method","name":"inverse_keyword","children":[],"call":[" keyword == "," keyword "]}," RuboCop AST IfNode keyword":{"type":"method","name":"keyword","children":[],"call":[" loc keyword source "," loc keyword "," loc "," ternary? "]}," RuboCop AST IfNode ternary?":{"type":"method","name":"ternary?","children":[],"call":[" loc respond_to? "," loc "]}," RuboCop AST IfNode else?":{"type":"method","name":"else?","children":[],"call":[" loc else "," loc "," loc respond_to? "]}," RuboCop AST IfNode elsif?":{"type":"method","name":"elsif?","children":[],"call":[" keyword == "," keyword "]}," RuboCop AST IfNode unless?":{"type":"method","name":"unless?","children":[],"call":[" keyword == "," keyword "]}," RuboCop AST IfNode if?":{"type":"method","name":"if?","children":[],"call":[" keyword == "," keyword "]}," RuboCop AST HashNode braces?":{"type":"method","name":"braces?","children":[],"call":[" loc end "," loc "," loc end is? "]}," RuboCop AST HashNode mixed_delimiters?":{"type":"method","name":"mixed_delimiters?","children":[],"call":[" pairs map uniq size > "," pairs map uniq size "," pairs map uniq "," pairs map "," pairs "]}," RuboCop AST HashNode pairs_on_same_line?":{"type":"method","name":"pairs_on_same_line?","children":[],"call":["first same_line? "," pairs each_cons any? "," pairs each_cons "," pairs "]}," RuboCop AST HashNode each_value":{"type":"method","name":"each_value","children":[],"call":[" pairs map each "," pairs map "," pairs "," pairs map to_enum "," block_given? "]}," RuboCop AST HashNode values":{"type":"method","name":"values","children":[],"call":[" each_pair map "," each_pair "]}," RuboCop AST HashNode each_key":{"type":"method","name":"each_key","children":[],"call":[" pairs map each "," pairs map "," pairs "," pairs map to_enum "," block_given? "]}," RuboCop AST HashNode keys":{"type":"method","name":"keys","children":[],"call":[" each_key to_a "," each_key "]}," RuboCop AST HashNode each_pair":{"type":"method","name":"each_pair","children":[],"call":[" each_child_node "," each_child_node to_enum "," block_given? "]}," RuboCop AST HashNode pairs":{"type":"method","name":"pairs","children":[],"call":[" each_pair to_a "," each_pair "]}," RuboCop AST ForNode node_parts":{"type":"method","name":"node_parts","children":[],"call":[" to_a "]}," RuboCop AST ForNode body":{"type":"method","name":"body","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST ForNode collection":{"type":"method","name":"collection","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST ForNode variable":{"type":"method","name":"variable","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST ForNode do?":{"type":"method","name":"do?","children":[],"call":[" loc begin is? "," loc begin "," loc "]}," RuboCop AST ForNode keyword":{"type":"method","name":"keyword","children":[],"call":[]}," RuboCop AST CaseNode node_parts":{"type":"method","name":"node_parts","children":[],"call":[" to_a "]}," RuboCop AST CaseNode else?":{"type":"method","name":"else?","children":[],"call":[" loc else "," loc "]}," RuboCop AST CaseNode else_branch":{"type":"method","name":"else_branch","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST CaseNode when_branches":{"type":"method","name":"when_branches","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST CaseNode each_when":{"type":"method","name":"each_when","children":[],"call":[" when_branches each "," when_branches "," when_branches to_enum "," __method__ "," block_given? "]}," RuboCop AST CaseNode keyword":{"type":"method","name":"keyword","children":[],"call":[]}," RuboCop AST ArrayNode percent_literal?":{"type":"method","name":"percent_literal?","children":[],"call":[" loc begin source start_with? "," loc begin source "," loc begin "," loc "," loc begin source =~ ","PERCENT_LITERAL_TYPES  [] "]}," RuboCop AST ArrayNode square_brackets?":{"type":"method","name":"square_brackets?","children":[],"call":[" loc begin is? "," loc begin "," loc "]}," RuboCop AST ArrayNode values":{"type":"method","name":"values","children":[],"call":[" each_child_node to_a "," each_child_node "]}," RuboCop AST Builder node_map":{"type":"method","name":"node_map","children":[],"call":["map []= ","types each ","NODE_MAP  each_pair each_with_object ","NODE_MAP  each_pair "]}," RuboCop AST Builder node_klass":{"type":"method","name":"node_klass","children":[],"call":[" node_map [] "," node_map ","NODE_MAP  [] "]}," RuboCop AST Builder string_value":{"type":"method","name":"string_value","children":[],"call":[" value "]}," RuboCop AST Builder n":{"type":"method","name":"n","children":[],"call":[" node_klass new "," node_klass "]}," RuboCop TargetFinder ruby_file?":{"type":"method","name":"ruby_file?","children":[],"call":[" ruby_executable? "," ruby_filename? "," ruby_extension? "," stdin? "]}," RuboCop TargetFinder ruby_filename?":{"type":"method","name":"ruby_filename?","children":[],"call":["RUBY_FILENAMES  include? ","File  basename "," ruby_filenames include? "," ruby_filenames "]}," RuboCop TargetFinder ruby_extension?":{"type":"method","name":"ruby_extension?","children":[],"call":["RUBY_EXTENSIONS  include? ","File  extname "," ruby_extensions include? "," ruby_extensions "]}," RuboCop RemoteConfig handle_response":{"type":"method","name":"handle_response","children":[],"call":["response error! "," request ","limit - ","URI  parse ","response [] "," raise "," uri ","e message ","ex message "," cloned_url "]}," RuboCop Platform windows?":{"type":"method","name":"windows?","children":[],"call":[]}," RuboCop MagicComment specified?":{"type":"method","name":"specified?","children":[],"call":["value nil? ! ","value nil? "]}," RuboCop MagicComment encoding_specified?":{"type":"method","name":"encoding_specified?","children":[],"call":[" specified? "," encoding "]}," RuboCop MagicComment any?":{"type":"method","name":"any?","children":[],"call":[" encoding_specified? "," frozen_string_literal_specified? "," shareable_constant_value_specified? "," typed_specified? "]}," RuboCop Cop VariableForce Scope ancestor_node?":{"type":"method","name":"ancestor_node?","children":[],"call":["ancestor_node equal? "," node each_ancestor any? "," node each_ancestor "," node "]}," RuboCop Cop VariableForce Scope include?":{"type":"method","name":"include?","children":[],"call":[" belong_to_inner_scope? ! "," belong_to_inner_scope? "," belong_to_outer_scope? ! "," belong_to_outer_scope? "]}," RuboCop Cop VariableForce Branchable run_exclusively_with?":{"type":"method","name":"run_exclusively_with?","children":[],"call":[" branch exclusive_with? ","other branch "," branch ","other branch ! "," branch ! "]}," RuboCop Cop VariableForce Branchable branch":{"type":"method","name":"branch","children":[],"call":["Branch  of "," scope "," node "," instance_variable_defined? "]}," RuboCop Cop VariableForce Branch Ensure always_run?":{"type":"method","name":"always_run?","children":[],"call":[" ensure_body? "]}," RuboCop Cop VariableForce Branch Rescue always_run?":{"type":"method","name":"always_run?","children":[],"call":[]}," RuboCop Cop VariableForce Branch ExceptionHandler may_run_incompletely?":{"type":"method","name":"may_run_incompletely?","children":[],"call":[" main_body? "]}," RuboCop Cop VariableForce Branch ExceptionHandler may_jump_to_other_branch?":{"type":"method","name":"may_jump_to_other_branch?","children":[],"call":[" main_body? "]}," RuboCop Cop VariableForce Branch LogicalOperator always_run?":{"type":"method","name":"always_run?","children":[],"call":[" left_body? "]}," RuboCop Cop VariableForce Branch For always_run?":{"type":"method","name":"always_run?","children":[],"call":[" collection? "," element? "]}," RuboCop Cop VariableForce Branch Case always_run?":{"type":"method","name":"always_run?","children":[],"call":[" target? "]}," RuboCop Cop VariableForce Branch SimpleConditional always_run?":{"type":"method","name":"always_run?","children":[],"call":[" conditional_clause? "]}," RuboCop Cop VariableForce Branch SimpleConditional conditional_clause?":{"type":"method","name":"conditional_clause?","children":[],"call":[" raise "]}," RuboCop Cop VariableForce Branch scan_ancestors":{"type":"method","name":"scan_ancestors","children":[],"call":["branch parent ","branch parent  parent "]}," RuboCop Cop VariableForce Branch hash":{"type":"method","name":"hash","children":[],"call":[" control_node object_id hash ^ "," child_node object_id hash "," child_node object_id "," child_node "," control_node object_id hash "," control_node object_id "," control_node ","(send\n  (send nil :control_node) :object_id) hash "]}," RuboCop Cop VariableForce Branch ==":{"type":"method","name":"==","children":[],"call":[" child_node equal? ","other child_node "," child_node "," control_node equal? ","other control_node "," control_node "]}," RuboCop Cop VariableForce Branch exclusive_with?":{"type":"method","name":"exclusive_with?","children":[],"call":[" parent exclusive_with? "," parent "," child_node equal? ! "," child_node equal? ","other_ancestor child_node "," child_node "," control_node equal? ","other_ancestor control_node "," control_node ","other each_ancestor "," may_jump_to_other_branch? "]}," RuboCop Cop VariableForce Branch may_run_incompletely?":{"type":"method","name":"may_run_incompletely?","children":[],"call":[]}," RuboCop Cop VariableForce Branch may_jump_to_other_branch?":{"type":"method","name":"may_jump_to_other_branch?","children":[],"call":[]}," RuboCop Cop VariableForce Branch always_run?":{"type":"method","name":"always_run?","children":[],"call":[" raise "]}," RuboCop Cop VariableForce Branch branched?":{"type":"method","name":"branched?","children":[],"call":[" always_run? ! "," always_run? "]}," RuboCop Cop VariableForce Branch each_ancestor":{"type":"method","name":"each_ancestor","children":[],"call":[" scan_ancestors "," to_enum "," __method__ "," block_given? "]}," RuboCop Cop VariableForce Branch parent":{"type":"method","name":"parent","children":[],"call":["Branch  of "," scope "," control_node "," instance_variable_defined? "]}," RuboCop Cop VariableForce Branch control_node":{"type":"method","name":"control_node","children":[],"call":[" child_node parent "," child_node "]}," RuboCop Cop VariableForce Branch define_predicate":{"type":"method","name":"define_predicate","children":[],"call":[]}," RuboCop Cop VariableForce Branch type":{"type":"method","name":"type","children":[],"call":[]}," RuboCop Cop VariableForce Branch inherited":{"type":"method","name":"inherited","children":[],"call":[]}," RuboCop Cop VariableForce Branch classes":{"type":"method","name":"classes","children":[],"call":[]}," RuboCop Cop VariableForce Branch of":{"type":"method","name":"of","children":[],"call":[]}," RuboCop Cop Util symbol_without_quote?":{"type":"method","name":"symbol_without_quote?","children":[],"call":["redefinable_operators include? ","special_gvars include? ","string =~ "]}," RuboCop Cop Style TernaryParentheses whitespace_after?":{"type":"method","name":"whitespace_after?","children":[],"call":[" space_between? "," processed_source tokens [] "," processed_source tokens "," processed_source "," index_of_last_token ","last_token space_after? "," processed_source last_token_of ","  index_of_last_token _of_last_token "," index_of_ processed_source tokens []  "," index_of_ processed_source last_token_of  "," processed_source tokens []  space_after? "," processed_source last_token_of  space_after? "," processed_source  processed_source tokens [] _of "," processed_source  processed_source last_token_of _of "]}," RuboCop Cop Style TernaryParentheses correct_unparenthesized":{"type":"method","name":"correct_unparenthesized","children":[],"call":["corrector insert_after ","condition source_range ","corrector insert_before "," lambda ","corrector wrap "]}," RuboCop Cop Style TernaryParentheses correct_parenthesized":{"type":"method","name":"correct_parenthesized","children":[],"call":["corrector insert_after ","condition loc end ","condition loc "," whitespace_after? ","corrector remove ","condition loc begin "," lambda "]}," RuboCop Cop Style SymbolArray correct_bracketed":{"type":"method","name":"correct_bracketed","children":[],"call":["corrector replace ","syms join ","node source_range "," lambda "," to_symbol_literal ","c children [] to_s ","c children [] ","c children ","node children map ","node children ","c value to_s ","c value ",": + "," trim_string_interporation_escape_character "," to_string_literal ","c source ","c dsym_type? "," to_ to_string_literal  "]}," RuboCop Cop Style StringMethods message":{"type":"method","name":"message","children":[],"call":[" format ","node method_name "," preferred_method "]}," RuboCop Cop Style SpaceBeforeFirstArg regular_method_call_with_arguments?":{"type":"method","name":"regular_method_call_with_arguments?","children":[],"call":["node setter_method? ! ","node setter_method? ","node operator_method? ! ","node operator_method? ","node arguments? "]}," RuboCop Cop Style SpaceAroundOperators regular_operator?":{"type":"method","name":"regular_operator?","children":[],"call":[" operator_with_regular_syntax? ","send_node dot? ! ","send_node dot? ","send_node unary_operation? ! ","send_node unary_operation? "]}," RuboCop Cop Style SpaceAfterNot whitespace_after_operator?":{"type":"method","name":"whitespace_after_operator?","children":[],"call":["node receiver loc column - > ","node receiver loc column - ","node loc column ","node loc ","node receiver loc column ","node receiver loc ","node receiver "]}," RuboCop Cop Style RaiseArgs acceptable_exploded_args?":{"type":"method","name":"acceptable_exploded_args?","children":[],"call":["arg splat_type? ","arg hash_type? ","args first ","args empty? ","args size > ","args size ","args first  splat_type? ","args first  hash_type? ","args first s first ","args first s empty? ","args first s size > ","args first s size "]}," RuboCop Cop Style PreferredHashMethods message":{"type":"method","name":"message","children":[],"call":[" format ","node method_name "," proper_method_name "]}," RuboCop Cop Style PercentLiteralDelimiters preferred_delimiters_for":{"type":"method","name":"preferred_delimiters_for","children":[],"call":[" preferred_delimiters [] split "," preferred_delimiters [] "," preferred_delimiters ","PreferredDelimiters  new delimiters ","PreferredDelimiters  new "]}," RuboCop Cop Style PercentLiteralDelimiters ensure_valid_preferred_delimiters":{"type":"method","name":"ensure_valid_preferred_delimiters","children":[],"call":[" raise ","invalid join ","invalid empty? "," cop_config [] keys - ","PERCENT_LITERAL_TYPES  + "," cop_config [] keys "," cop_config [] "," cop_config "," cop_config [] keys -  join "," cop_config [] keys -  empty? "]}," RuboCop Cop Style ParallelAssignment rescue_modifier_old?":{"type":"method","name":"rescue_modifier_old?","children":[],"call":["(or\n  (send\n    (send\n      (lvar :node) :parent) :kwbegin_type?)\n  (send\n    (send\n      (lvar :node) :parent) :ensure_type?)) ! ","node parent ensure_type? ","node parent ","node parent kwbegin_type? ","node parent nil? ","node rescue_type? "]}," RuboCop Cop Style NumericLiterals short_group_regex":{"type":"method","name":"short_group_regex","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style NestedParenthesizedCalls allowed_omission?":{"type":"method","name":"allowed_omission?","children":[],"call":[" rspec_matcher? ","send_node operator_method? ","send_node setter_method? ","send_node parenthesized? ","send_node arguments? ! ","send_node arguments? "," whitelisted? "," allowed? "]}," RuboCop Cop Style MutableConstant unbracketed_array?":{"type":"method","name":"unbracketed_array?","children":[],"call":["node percent_literal? ! ","node percent_literal? ","node square_brackets? ! ","node square_brackets? ","node array_type? "]}," RuboCop Cop Style MultilineMemoization bad_rhs?":{"type":"method","name":"bad_rhs?","children":[],"call":["rhs kwbegin_type? ","rhs begin_type? "," style == "," style ","rhs multiline? "]}," RuboCop Cop Style MixinGrouping separated_style?":{"type":"method","name":"separated_style?","children":[],"call":[" style == "," style "]}," RuboCop Cop Style MixinGrouping grouped_style?":{"type":"method","name":"grouped_style?","children":[],"call":[" style == "," style "]}," RuboCop Cop Style MixinGrouping message":{"type":"method","name":"message","children":[],"call":[" format ","send_node method_name "," separated_style? "]}," RuboCop Cop Style MixinGrouping sibling_mixins?":{"type":"method","name":"sibling_mixins?","children":[],"call":["sibling_node method_name == ","send_node method_name ","sibling_node method_name ","siblings any? ","sibling == ","send_node parent each_child_node reject ","send_node parent each_child_node ","send_node parent "]}," RuboCop Cop Style MixinGrouping check_separated_style":{"type":"method","name":"check_separated_style","children":[],"call":[" add_offense ","send_node arguments one? ","send_node arguments ","corrector replace "," separate_mixins ","send_node loc expression ","send_node loc "," format ","send_node method_name ","send_node source_range ","send_node source_send_node loc expression  ","send_node source_send_node source_range  "]}," RuboCop Cop Style MixinGrouping check_grouped_style":{"type":"method","name":"check_grouped_style","children":[],"call":[" add_offense "," sibling_mixins? "," sibling_mixins empty? "," sibling_mixins "," sibling_mixins size == "," sibling_mixins size ","corrector replace "," range_to_remove_for_subsequent_mixin "," group_mixins ","send_node == ","mixins first ","send_node loc expression ","send_node loc "," format ","send_node method_name ","send_node source_range "," sibling_ sibling_mixins ? "," sibling_ sibling_mixins  empty? "," sibling_ sibling_mixins  "," sibling_ sibling_mixins  size == "," sibling_ sibling_mixins  size ","  range_to_remove_for_subsequent_mixin _to_remove_for_subsequent_mixin "," send_node loc expression _to_remove_for_subsequent_mixin "," send_node source_range _to_remove_for_subsequent_mixin "," group_ sibling_mixins  "," sibling_mixins  first ","send_node source_ range_to_remove_for_subsequent_mixin  ","send_node source_send_node loc expression  ","send_node source_send_node source_range  "]}," RuboCop Cop Style MixinGrouping check":{"type":"method","name":"check","children":[],"call":[" check_grouped_style "," check_separated_style "," separated_style? "]}," RuboCop Cop Style MixinGrouping on_send":{"type":"method","name":"on_send","children":[],"call":[" check ","MIXIN_METHODS  include? ","node method_name ","node macro? "]}," RuboCop Cop Style MethodCallWithArgsParentheses ignore_macros?":{"type":"method","name":"ignore_macros?","children":[],"call":[" cop_config [] "," cop_config ","node macro? "]}," RuboCop Cop Style LambdaCall explicit_style?":{"type":"method","name":"explicit_style?","children":[],"call":[" style == "," style "]}," RuboCop Cop Style LambdaCall implicit_style?":{"type":"method","name":"implicit_style?","children":[],"call":[" style == "," style "]}," RuboCop Cop Style InverseMethods end_parentheses":{"type":"method","name":"end_parentheses","children":[],"call":["Parser Source Range  new ","node loc expression end_pos ","node loc expression ","node loc ","method_call loc expression end_pos ","method_call loc expression ","method_call loc ","node loc expression source_buffer ","node source_range end_pos ","node source_range ","method_call source_range end_pos ","method_call source_range ","node source_range source_buffer "]}," RuboCop Cop Style InverseMethods not_to_receiver":{"type":"method","name":"not_to_receiver","children":[],"call":["Parser Source Range  new ","method_call loc expression begin_pos ","method_call loc expression ","method_call loc ","node loc selector begin_pos ","node loc selector ","node loc ","node loc expression source_buffer ","node loc expression ","method_call source_range begin_pos ","method_call source_range ","node source_range source_buffer ","node source_range "]}," RuboCop Cop Style InverseMethods inverse_blocks":{"type":"method","name":"inverse_blocks","children":[],"call":[" cop_config [] merge "," cop_config [] invert "," cop_config [] "," cop_config "]}," RuboCop Cop Style InverseMethods inverse_methods":{"type":"method","name":"inverse_methods","children":[],"call":[" cop_config [] merge "," cop_config [] invert "," cop_config [] "," cop_config "]}," RuboCop Cop Style InverseMethods correct_inverse_block":{"type":"method","name":"correct_inverse_block","children":[],"call":["corrector remove ","block loc selector ","block loc ","corrector replace ","selector []= ","(str \"!=\") include? "," inverse_blocks [] to_s "," inverse_blocks [] "," inverse_blocks ","method_call loc selector ","method_call loc "," lambda ","block loc selector source "," inverse_block? "," correct_inverse_selector ","block loc block loc selector source  ","block loc selector source  []= ","method_call loc block loc selector source  ","block loc block loc selector source  source "," correct_inverse_block loc selector source  "]}," RuboCop Cop Style InverseMethods autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" correct_inverse_block ","corrector remove "," end_parentheses ","EQUALITY_METHODS  include? ","corrector replace "," inverse_methods [] to_s "," inverse_methods [] "," inverse_methods ","method_call loc selector ","method_call loc "," not_to_receiver "," lambda "," inverse_candidate? "," correct_inverse_method ","node send_type? ","node block_type? "]}," RuboCop Cop Style InverseMethods on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," format "," inverse_blocks [] "," inverse_blocks "," inverse_blocks key? "," inverse_block? "," negated? ","node parent "," ignore_node ","node each_node any? ","node each_node "," correct_inverse_block "," message "]}," RuboCop Cop Style InverseMethods on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format "," inverse_methods [] "," inverse_methods "," inverse_methods key? "," inverse_candidate? "," negated? "," part_of_ignored_node? "," possible_class_hierarchy_check? "," correct_inverse_method "," message "]}," RuboCop Cop Style IndentationWidth skip_check?":{"type":"method","name":"skip_check?","children":[],"call":["body_node loc column == ","body_node loc column ","body_node loc ","body_node source_range source_line =~ ","body_node source_range source_line ","body_node source_range "," starts_with_access_modifier? ","body_node loc line == ","base_loc line ","body_node loc line "," ignored_line? "]}," RuboCop Cop Style IndentHeredoc indentation_width":{"type":"method","name":"indentation_width","children":[],"call":["@config for_cop [] ","@config for_cop "]}," RuboCop Cop Style IndentHeredoc heredoc_indent_type":{"type":"method","name":"heredoc_indent_type","children":[],"call":["node source [] ","node source "]}," RuboCop Cop Style IndentHeredoc indent_level":{"type":"method","name":"indent_level","children":[],"call":["(send\n  (send\n    (lvar :str) :scan\n    (regexp\n      (str \"^\\\\s*\")\n      (regopt))) :reject) min_by size ","(send\n  (send\n    (lvar :str) :scan\n    (regexp\n      (str \"^\\\\s*\")\n      (regopt))) :reject) min_by ","line == ","str scan reject ","str scan "]}," RuboCop Cop Style IndentHeredoc base_indent_level":{"type":"method","name":"base_indent_level","children":[],"call":[" indent_level "," processed_source lines [] ","base_line_num - "," processed_source lines "," processed_source ","node loc expression line ","node loc expression ","node loc "," processed_source lines [] _num - ","node loc expression line  - "]}," RuboCop Cop Style IndentHeredoc body_indent_level":{"type":"method","name":"body_indent_level","children":[],"call":[" indent_level ","node loc heredoc_body source ","node loc heredoc_body ","node loc ","node loc heredoc_node loc heredoc_body source  source ","node loc heredoc_node loc heredoc_body source  "]}," RuboCop Cop Style IndentHeredoc indented_body":{"type":"method","name":"indented_body","children":[],"call":["body gsub ","  * "," base_indent_level + "," indentation_width "," base_indent_level "," body_indent_level ","node loc heredoc_body source ","node loc heredoc_body ","node loc ","node loc heredoc_body source  gsub ","  body_indent_level  "," node loc heredoc_body source _indent_level ","node loc heredoc_node loc heredoc_body source  source ","node loc heredoc_node loc heredoc_body source  "]}," RuboCop Cop Style IndentHeredoc heredoc?":{"type":"method","name":"heredoc?","children":[],"call":["node loc is_a? ","node loc "]}," RuboCop Cop Style IndentHeredoc check_style!":{"type":"method","name":"check_style!","children":[],"call":[" raise "," cop_name "," target_ruby_version < "," target_ruby_version "," style "]}," RuboCop Cop Style IndentHeredoc correct_by_library":{"type":"method","name":"correct_by_library","children":[],"call":["corrector insert_after ","node loc expression ","node loc ","StripMethods  [] "," style ","corrector replace "," indented_body ","node loc heredoc_body "," lambda "]}," RuboCop Cop Style IndentHeredoc correct_by_squiggly":{"type":"method","name":"correct_by_squiggly","children":[],"call":["corrector replace ","node loc expression ","node loc ","heredoc_begenning sub ","node loc expression source "," indented_body ","node loc heredoc_body "," heredoc_indent_type == "," heredoc_indent_type "," lambda "," target_ruby_version < "," target_ruby_version ","node loc expression source  sub "]}," RuboCop Cop Style IndentHeredoc message":{"type":"method","name":"message","children":[],"call":[" format "," indentation_width ","StripMethods  [] "," style "," heredoc_indent_type "]}," RuboCop Cop Style IndentHeredoc style":{"type":"method","name":"style","children":[],"call":[" rails? "," target_ruby_version >= "," target_ruby_version ","style == "]}," RuboCop Cop Style IndentHeredoc autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" correct_by_library "," correct_by_squiggly "," style "," check_style! "]}," RuboCop Cop Style IndentHeredoc on_str":{"type":"method","name":"on_str","children":[],"call":[" add_offense ","body_indent_level zero? ","expected_indent_level == "," base_indent_level + "," indentation_width "," base_indent_level "," heredoc_indent_type == "," heredoc_indent_type "," body_indent_level "," heredoc? "," body_indent_level  zero? "," base_indent_level +  == ","  body_indent_level  "]}," RuboCop Cop Style FirstParameterIndentation base_indentation":{"type":"method","name":"base_indentation","children":[],"call":[" previous_code_line =~ "," previous_code_line ","node first_argument loc line ","node first_argument loc ","node first_argument "," column_of "," base_range "," special_inner_call_indentation? "]}," RuboCop Cop Style EndOfLine offense_message":{"type":"method","name":"offense_message","children":[],"call":["line !~ ","line =~ "," style ","Platform  windows? "," style == "]}," RuboCop Cop Style EndOfLine unimportant_missing_cr?":{"type":"method","name":"unimportant_missing_cr?","children":[],"call":["line !~ ","index == ","last_line - "," style == "," style "]}," RuboCop Cop Style EmptyLiteral offense_hash_node?":{"type":"method","name":"offense_hash_node?","children":[],"call":[" hash_with_block ! "," hash_with_block ","node parent "," hash_node "]}," RuboCop Cop Style EmptyLiteral offense_array_node?":{"type":"method","name":"offense_array_node?","children":[],"call":[" array_with_block ! "," array_with_block ","node parent "," array_node "]}," RuboCop Cop Style EmptyLinesAroundExceptionHandlingKeywords keyword_locations_in_ensure":{"type":"method","name":"keyword_locations_in_ensure","children":[],"call":[" keyword_locations ","node loc keyword ","node loc "]}," RuboCop Cop Style EmptyLinesAroundExceptionHandlingKeywords keyword_locations_in_rescue":{"type":"method","name":"keyword_locations_in_rescue","children":[],"call":["(send\n  (send\n    (lvar :node) :loc) :else) compact ","body loc keyword ","body loc ","resbodies map ","node loc else ","node loc "]}," RuboCop Cop Style EmptyLinesAroundExceptionHandlingKeywords keyword_locations":{"type":"method","name":"keyword_locations","children":[],"call":[" keyword_locations_in_ensure "," keyword_locations_in_rescue ","node type "]}," RuboCop Cop Style EmptyLinesAroundExceptionHandlingKeywords style":{"type":"method","name":"style","children":[],"call":[]}," RuboCop Cop Style EmptyLinesAroundExceptionHandlingKeywords check_body":{"type":"method","name":"check_body","children":[],"call":[" check_line "," format ","line - "," style ","loc source ","loc line ","locations each "," keyword_locations "," check_loc line  ","loc line  - ","loc loc line  "," keyword_locations  each "," loc source _locations "," keyword_ keyword_locations  "]}," RuboCop Cop Style EmptyLinesAroundExceptionHandlingKeywords on_kwbegin":{"type":"method","name":"on_kwbegin","children":[],"call":[" check_body "]}," RuboCop Cop Style EmptyLinesAroundExceptionHandlingKeywords on_method_def":{"type":"method","name":"on_method_def","children":[],"call":[" check_body "]}," RuboCop Cop Style EmptyLinesAroundBeginBody style":{"type":"method","name":"style","children":[],"call":[]}," RuboCop Cop Style EmptyLinesAroundBeginBody on_kwbegin":{"type":"method","name":"on_kwbegin","children":[],"call":[" check "]}," RuboCop Cop Style EmptyLineBetweenDefs autocorrect_insert_lines":{"type":"method","name":"autocorrect_insert_lines","children":[],"call":["corrector insert_after ","\n * "," lambda "," range_between ","newline_pos + "," minimum_empty_lines - "," minimum_empty_lines "]}," RuboCop Cop Style EmptyLineBetweenDefs autocorrect_remove_lines":{"type":"method","name":"autocorrect_remove_lines","children":[],"call":["corrector remove "," lambda "," range_between ","newline_pos + ","count - "," maximum_empty_lines "]}," RuboCop Cop Style EmptyLineBetweenDefs maximum_empty_lines":{"type":"method","name":"maximum_empty_lines","children":[],"call":[" Array last "," Array "," cop_config [] "," cop_config "]}," RuboCop Cop Style EmptyLineBetweenDefs minimum_empty_lines":{"type":"method","name":"minimum_empty_lines","children":[],"call":[" Array first "," Array "," cop_config [] "," cop_config "]}," RuboCop Cop Style EmptyLineBetweenDefs blank_lines_count_between":{"type":"method","name":"blank_lines_count_between","children":[],"call":[" lines_between_defs count "," lines_between_defs "]}," RuboCop Cop Style EmptyLineBetweenDefs multiple_blank_lines_groups?":{"type":"method","name":"multiple_blank_lines_groups?","children":[],"call":["blank_start > ","non_blank_end nil? ","blank_start nil? ","(send\n  (send\n    (lvar :lines) :each_index) :reject) min ","lines [] blank? ","lines [] ","lines each_index reject ","lines each_index ","(send\n  (send\n    (lvar :lines) :each_index) :select) max ","lines each_index select "," lines_between_defs ","(send\n  (send\n    (lvar :lines) :each_index) :select) max  > ","(send\n  (send\n    (lvar :lines) :each_index) :reject) min  nil? ","(send\n  (send\n    (lvar :lines) :each_index) :select) max  nil? ","(send\n  (send\n    (lvar : lines_between_defs ) :each_index) :reject) min "," lines_between_defs  [] blank? "," lines_between_defs  [] "," lines_between_defs  each_index reject "," lines_between_defs  each_index ","(send\n  (send\n    (lvar : lines_between_defs ) :each_index) :select) max "," lines_between_defs  each_index select ","  lines_between_defs _between_defs "]}," RuboCop Cop Style EmptyLineAfterMagicComment last_magic_comment":{"type":"method","name":"last_magic_comment","children":[],"call":["(send\n  (block\n    (send\n      (send\n        (lvar :source) :comments) :take_while)\n    (args\n      (arg :comment))\n    (send\n      (send\n        (send\n          (lvar :comment) :loc) :line) :<\n      (send\n        (send\n          (send\n            (lvar :source) :ast) :loc) :line))) :select) last ","MagicComment  parse any? ","MagicComment  parse ","comment text ","(send\n  (send\n    (lvar :source) :comments) :take_while) select ","comment loc line < ","source ast loc line ","source ast loc ","source ast ","comment loc line ","comment loc ","source comments take_while ","source comments "]}," RuboCop Cop Style EmptyLineAfterMagicComment autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector insert_before "," lambda "]}," RuboCop Cop Style EmptyLineAfterMagicComment investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense "," source_range ","last_magic_comment loc line + ","last_magic_comment loc line ","last_magic_comment loc ","source buffer ","source [] =~ ","source [] "," last_magic_comment ","source ast "," last_magic_comment  loc line + "," last_magic_comment  loc line "," last_magic_comment  loc ","  last_magic_comment  "]}," RuboCop Cop Style ConditionalAssignment allowed_single_line?":{"type":"method","name":"allowed_single_line?","children":[],"call":["branches any? "," single_line_conditions_only? "]}," RuboCop Cop Style ConditionalAssignmentHelper end_with_eq?":{"type":"method","name":"end_with_eq?","children":[],"call":["sym to_s end_with? ","sym to_s "]}," RuboCop Cop Style CollectionMethods message":{"type":"method","name":"message","children":[],"call":[" format ","node method_name "," preferred_method "]}," RuboCop Cop Style BracesAroundHashParameters add_arg_offense":{"type":"method","name":"add_arg_offense","children":[],"call":[" add_offense "," format ","type to_s capitalize ","type to_s ","arg source_range ","arg parent "]}," RuboCop Cop Style Attr message":{"type":"method","name":"message","children":[],"call":[" format "," replacement_method "]}," RuboCop Cop Rails Validation message":{"type":"method","name":"message","children":[],"call":[" format ","node method_name "," preferred_method "]}," RuboCop Cop Rails SkipsModelValidations message":{"type":"method","name":"message","children":[],"call":[" format ","node method_name "]}," RuboCop Cop Rails RelativeDateConstant autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node source_range "," lambda ","(dstr\n  (str \"def self.\")\n  (begin\n    (send\n      (lvar :const_name) :downcase))) join ","value source ","const_name downcase ","  * ","node loc column ","node loc ","scope nil? ","node casgn_type? "]}," RuboCop Cop Rails RelativeDateConstant bad_method?":{"type":"method","name":"bad_method?","children":[],"call":["node method_args empty? ","node method_args ","RELATIVE_DATE_METHODS  include? ","node method_name ","node send_type? "]}," RuboCop Cop Rails RelativeDateConstant on_casgn":{"type":"method","name":"on_casgn","children":[],"call":[" add_offense "," format ","bad_node method_name "," bad_method? ","node descendants find ","node descendants "," relative_date_method? ","rhs lambda_or_proc? "," check_node "," relative_date_assignment? "]}," RuboCop Cop Rails Present unless_condition":{"type":"method","name":"unless_condition","children":[],"call":["node loc expression begin join ","method_call loc expression ","method_call loc ","node loc expression begin ","node loc expression ","node loc ","node loc keyword join ","node loc expression end ","node loc keyword ","node modifier_form? "]}," RuboCop Cop Rails Present autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","variable1 source ","node loc expression ","node loc "," not_blank? "," exists_and_not_empty? ","method_call loc expression ","method_call loc ","node loc keyword "," unless_blank? "," lambda "," replacement "]}," RuboCop Cop Rails Present on_if":{"type":"method","name":"on_if","children":[],"call":[" add_offense "," format ","range source ","receiver source "," unless_condition "," unless_blank? ","node unless? "," cop_config [] "," cop_config "," replacement "," config for_cop [] "," config for_cop "," config ","node else? "," unless_condition  source "]}," RuboCop Cop Rails Present on_or":{"type":"method","name":"on_or","children":[],"call":[" add_offense ","variable1 == "," exists_and_not_empty? "," cop_config [] "," cop_config ","var1 == "]}," RuboCop Cop Rails Present on_and":{"type":"method","name":"on_and","children":[],"call":[" add_offense "," format ","node source ","variable1 source ","variable1 == "," exists_and_not_empty? "," cop_config [] "," cop_config "," replacement ","var1 == "]}," RuboCop Cop Rails Present on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format ","node source ","receiver source "," not_blank? "," cop_config [] "," cop_config "," replacement "]}," RuboCop Cop Rails PluralizationGrammar offense?":{"type":"method","name":"offense?","children":[],"call":[" singular_method? ","node method_name "," plural_receiver? "," plural_method? "," singular_receiver? ","node receiver "]}," RuboCop Cop Rails PluralizationGrammar correct_method":{"type":"method","name":"correct_method","children":[],"call":[" pluralize "," singularize "," plural_method? "]}," RuboCop Cop Rails PluralizationGrammar message":{"type":"method","name":"message","children":[],"call":[" format "," correct_method ","node method_name to_s ","node method_name ","node receiver "]}," RuboCop Cop Rails Date safe_to_time?":{"type":"method","name":"safe_to_time?","children":[],"call":["node arguments one? ","node arguments ","node receiver str_content match ","node receiver str_content ","node receiver ","node receiver str_type? ","node method? "]}," RuboCop Cop Rails Blank unless_condition":{"type":"method","name":"unless_condition","children":[],"call":["node loc expression begin join ","method_call loc expression ","method_call loc ","node loc expression begin ","node loc expression ","node loc ","node loc keyword join ","node loc expression end ","node loc keyword ","node modifier_form? "]}," RuboCop Cop Rails Blank autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","variable1 source ","node loc expression ","node loc "," not_present? "," nil_or_empty? ","method_call loc expression ","method_call loc ","node loc keyword "," unless_present? "," lambda "," replacement "]}," RuboCop Cop Rails Blank on_if":{"type":"method","name":"on_if","children":[],"call":[" add_offense "," format ","range source ","receiver source "," unless_condition "," unless_present? ","node unless? "," cop_config [] "," cop_config "," replacement "," config for_cop [] "," config for_cop "," config ","node else? "," unless_condition  source "]}," RuboCop Cop Rails Blank on_or":{"type":"method","name":"on_or","children":[],"call":[" add_offense "," format ","node source ","variable1 source ","variable1 == "," nil_or_empty? "," cop_config [] "," cop_config ","node rhs receiver ","node rhs ","node lhs receiver ","node lhs "," replacement ","var1 == "]}," RuboCop Cop Rails Blank on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format ","node source ","receiver source "," not_present? "," cop_config [] "," cop_config "," replacement "," defining_blank? ","node parent "]}," RuboCop Cop Rails ActiveSupportAliases register_offense":{"type":"method","name":"register_offense","children":[],"call":[" add_offense "," format ","ALIASES  [] [] ","ALIASES  [] "]}," RuboCop Cop Rails ActiveSupportAliases autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","replacement to_s ","node loc selector ","node loc ","ALIASES  [] [] ","ALIASES  [] ","method_name to_sym ","node loc selector source "," lambda "," append ","ALIASES  [] []  to_s ","node loc selector source  to_sym "]}," RuboCop Cop Rails ActiveSupportAliases on_send":{"type":"method","name":"on_send","children":[],"call":[" register_offense "," public_send ","ALIASES  keys each ","ALIASES  keys ","ALIASES  each_key "]}," RuboCop Cop Rails ActionFilter message":{"type":"method","name":"message","children":[],"call":[" format ","node method_name "," preferred_method "]}," RuboCop Cop Performance RegexpMatch match_gvar?":{"type":"method","name":"match_gvar?","children":[],"call":["(sym :$~) include? "]}," RuboCop Cop Performance DoubleStartEndWith check_for_active_support_aliases?":{"type":"method","name":"check_for_active_support_aliases?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Performance DoubleStartEndWith process_source":{"type":"method","name":"process_source","children":[],"call":[" two_start_end_with_calls "," check_with_active_support_aliases "," check_for_active_support_aliases? "]}," RuboCop Cop Performance DoubleStartEndWith autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," lambda ","first_argument join ","second_call_args last loc expression ","second_call_args last loc ","second_call_args last ","first_call_args first loc expression ","first_call_args first loc ","first_call_args first "," combine_args "," process_source ","first_call_args first loc expression  join "]}," RuboCop Cop TargetRailsVersion support_target_rails_version?":{"type":"method","name":"support_target_rails_version?","children":[],"call":["@minimum_target_rails_version <= "]}," RuboCop Cop TargetRailsVersion minimum_target_rails_version":{"type":"method","name":"minimum_target_rails_version","children":[],"call":[]}," RuboCop Cop RescueNode rescue_modifier?":{"type":"method","name":"rescue_modifier?","children":[],"call":["@modifier_locations include? ","node loc keyword ","node loc ","node resbody_type? ","node respond_to? "," modifier_locations include? "," modifier_locations "]}," RuboCop Cop RescueNode investigate":{"type":"method","name":"investigate","children":[],"call":["(send\n  (send\n    (lvar :processed_source) :tokens) :select) map ","t type == ","t type ","processed_source tokens select ","processed_source tokens ","processed_source tokens select map "]}," RuboCop Cop PercentLiteral autocorrect_words":{"type":"method","name":"autocorrect_words","children":[],"call":["(send\n  (lvar :word_nodes) :map) join ","line_breaks + ","content gsub! "," escape_string ","node children first to_s ","node children first ","node children ","node loc line ","node loc ","\n * ","node loc line - ","word_nodes map ","delimiters each ","node first_line ","node first_line - ","(send\n  (send\n    (lvar :node) :children) :map) join ","word_node children first to_s ","word_node children first ","word_node children ","node children map ","\n *  + "," escape_string  gsub! ","node children first to_s  gsub! ","word_node children first to_s  gsub! "]}," RuboCop Cop PercentLiteral correct_percent":{"type":"method","name":"correct_percent","children":[],"call":["corrector replace ","node source_range "," lambda "," autocorrect_words ","node loc line ","node loc ","char upcase "," needs_escaping? ","w children [] ","w children ","words any? ","node children ","delimiters [] "," preferred_delimiters_for ","node first_line "," new_contents "," autocorrect_node children  ","char upcase  upcase ","node children  any? "," preferred_delimiters_for  [] "," preferred_ preferred_delimiters_for _for "," new_ autocorrect_words  "," new_ new_contents  "]}," RuboCop Cop IgnoredPattern ignored_patterns":{"type":"method","name":"ignored_patterns","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop IgnoredPattern matches_ignored_pattern?":{"type":"method","name":"matches_ignored_pattern?","children":[],"call":["Regexp  new match ","Regexp  new "," ignored_patterns any? "," ignored_patterns ","Regexp  new match? "]}," RuboCop Cop IgnoredPattern ignored_line?":{"type":"method","name":"ignored_line?","children":[],"call":[" matches_ignored_pattern? ","line node source_range source_line ","line node source_range ","line node ","line respond_to? ","line source_line ","line source_line  node source_range source_line source_line  ","line source_line  node source_range ","line source_line  node ","line source_line  respond_to? ","line source_line  source_line source_line  "]}," RuboCop Cop MessageAnnotator urls":{"type":"method","name":"urls","children":[],"call":["(send nil :style_guide_url) compact "," reference_url "," style_guide_url "," reference_urls "]}," RuboCop Cop Lint UnneededDisable each_line_range":{"type":"method","name":"each_line_range","children":[],"call":[" find_unneeded ","line_ranges [] ","ix + "," ignore_offense? "," all_disabled? ","c loc line == ","line_range begin ","c loc line ","c loc ","comments find ","line_ranges each_with_index "]}," RuboCop Cop Lint StringConversionInInterpolation message":{"type":"method","name":"message","children":[],"call":["node receiver "]}," RuboCop Cop Lint SafeNavigationChain whitelist":{"type":"method","name":"whitelist","children":[],"call":[" cop_config [] map "," cop_config [] "," cop_config "]}," RuboCop Cop Lint NonLocalExitFromIterator scoped_node?":{"type":"method","name":"scoped_node?","children":[],"call":["node lambda? ","node defs_type? ","node def_type? "]}," RuboCop Cop Lint FormatParameterMismatch splat_args?":{"type":"method","name":"splat_args?","children":[],"call":["node arguments butfirst any? ","node arguments butfirst ","node arguments "," percent? ","node arguments drop any? ","node arguments drop "]}," RuboCop Cop Lint EmptyEnsure autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove ","node loc keyword ","node loc "," lambda "]}," RuboCop Cop Lint Debugger message":{"type":"method","name":"message","children":[],"call":[" format ","node source "]}," RuboCop Cop Lint AmbiguousBlockAssociation message":{"type":"method","name":"message","children":[],"call":[" format ","param children [] ","param children ","param children first source ","param children first ","param source ","node last_argument ","block_param send_node source ","block_param send_node ","block_param source ","send_node last_argument ","node last_argument  children [] ","node last_argument  children ","node last_argument  children first source ","node last_argument  children first ","node last_argument  source ","block_node last_argument  send_node source ","send_node last_argument  send_node source ","block_node last_argument  send_node ","send_node last_argument  send_node ","block_node last_argument  source ","send_node last_argument  source "]}," RuboCop Cop Lint AmbiguousBlockAssociation method_as_param?":{"type":"method","name":"method_as_param?","children":[],"call":["param arguments? ! ","param arguments? ","param send_type? "]}," RuboCop Cop Lint AmbiguousBlockAssociation method_with_block?":{"type":"method","name":"method_with_block?","children":[],"call":["param block_type? "]}," RuboCop Cop Lint AmbiguousBlockAssociation on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," message ","node method_name "," method_as_param? ","node first_argument children first ","node first_argument children ","node first_argument "," method_with_block? ","node method? ","node assignment? ","node parenthesized? ","node last_argument ","node last_argument children first ","node last_argument children "," lambda_argument? "," allowed_method? "," ambiguous_block_association? ","node last_argument lambda? ","node arguments? ! ","node arguments? ","node last_argument proc? "," allowed_method_pattern? ","node last_argument lambda_or_proc? "," wrap_in_parentheses ","  message  "]}," RuboCop Cop Cop target_rails_version":{"type":"method","name":"target_rails_version","children":[],"call":["@config target_rails_version "]}," RuboCop Cop Bundler OrderedGems get_source_range":{"type":"method","name":"get_source_range","children":[],"call":["node source_range ","first_comment loc expression ","first_comment loc ","first_comment nil? "," processed_source ast_with_comments [] first "," processed_source ast_with_comments [] "," processed_source ast_with_comments "," processed_source "," cop_config [] "," cop_config "," processed_source ast_with_comments [] first  loc expression "," processed_source ast_with_comments [] first  loc "," processed_source ast_with_comments [] first  nil? "]}," RuboCop ConfigLoader target_ruby_version_to_f!":{"type":"method","name":"target_ruby_version_to_f!","children":[],"call":["hash [] []= ","hash [] [] to_f ","hash [] [] ","hash [] "]}," RuboCop ConfigLoader create_config":{"type":"method","name":"create_config","children":[],"call":["config make_excludes_absolute ","config validate "," warn ","config deprecation_check ","Config  new ","Config  new  make_excludes_absolute ","Config  new  validate ","Config  new  deprecation_check "]}," RuboCop Config enable_cop?":{"type":"method","name":"enable_cop?","children":[],"call":["cop_options fetch ","department_options fetch == ","department_options fetch "," [] ","cop_name nil? ","qualified_cop_name split ","department_options [] == ","department_options [] "," for_all_cops [] ! "," for_all_cops [] "," for_all_cops ","department [] == ","department [] "," department_of ","cop_enabled == ","cop_options [] == ","cop_options [] ","qualified_cop_name == "," []  fetch == ","cop_name nil? _options fetch == "," department_of _options fetch == "," []  fetch ","cop_name nil? _options fetch "," department_of _options fetch "," []  [] == ","cop_name nil? _options [] == "," department_of _options [] == "," []  [] ","cop_name nil? _options [] "," department_of _options [] ","cop_name nil?  [] == "," department_of  [] == ","cop_name nil?  [] "," department_of  [] "," cop_name nil? _of ","  department_of _of "]}," RuboCop Config reject_mutually_exclusive_defaults":{"type":"method","name":"reject_mutually_exclusive_defaults","children":[],"call":[" raise "," for_all_cops [] "," for_all_cops "]}," RuboCop Config target_rails_version":{"type":"method","name":"target_rails_version","children":[],"call":[" for_all_cops fetch "," for_all_cops "," target_rails_version_from_bundler_lock_file "," for_all_cops [] to_f "," for_all_cops [] "]}," RuboCop AST Node operator_keyword?":{"type":"method","name":"operator_keyword?","children":[],"call":["OPERATOR_KEYWORDS  include? "," type "]}," RuboCop AST SendNode node_parts":{"type":"method","name":"node_parts","children":[],"call":[" to_a "]}," RuboCop AST SendNode splat_argument?":{"type":"method","name":"splat_argument?","children":[],"call":[" arguments any? "," arguments "," arguments? "]}," RuboCop AST SendNode block_argument?":{"type":"method","name":"block_argument?","children":[],"call":[" last_argument block_pass_type? "," last_argument "," arguments? "]}," RuboCop AST SendNode camel_case_method?":{"type":"method","name":"camel_case_method?","children":[],"call":[" method_name to_s =~ "," method_name to_s "," method_name "]}," RuboCop AST SendNode bang_method?":{"type":"method","name":"bang_method?","children":[],"call":[" method_name to_s end_with? "," method_name to_s "," method_name "]}," RuboCop AST SendNode predicate_method?":{"type":"method","name":"predicate_method?","children":[],"call":[" method_name to_s end_with? "," method_name to_s "," method_name "]}," RuboCop AST SendNode implicit_call?":{"type":"method","name":"implicit_call?","children":[],"call":[" loc selector ! "," loc selector "," loc "," method_name == "," method_name "]}," RuboCop AST SendNode self_receiver?":{"type":"method","name":"self_receiver?","children":[],"call":[" receiver self_type? "," receiver "]}," RuboCop AST SendNode double_colon?":{"type":"method","name":"double_colon?","children":[],"call":[" loc dot is? "," loc dot "," loc "]}," RuboCop AST SendNode dot?":{"type":"method","name":"dot?","children":[],"call":[" loc dot is? "," loc dot "," loc "]}," RuboCop AST SendNode operator_method?":{"type":"method","name":"operator_method?","children":[],"call":["RuboCop Cop Util OPERATOR_METHODS  include? "," method_name "]}," RuboCop AST SendNode setter_method?":{"type":"method","name":"setter_method?","children":[],"call":[" loc operator "," loc "]}," RuboCop AST SendNode parenthesized?":{"type":"method","name":"parenthesized?","children":[],"call":[" loc end is? "," loc end "," loc "]}," RuboCop AST SendNode arguments?":{"type":"method","name":"arguments?","children":[],"call":[" arguments empty? ! "," arguments empty? "," arguments "]}," RuboCop AST SendNode last_argument":{"type":"method","name":"last_argument","children":[],"call":[" arguments [] "," arguments "]}," RuboCop AST SendNode first_argument":{"type":"method","name":"first_argument","children":[],"call":[" arguments [] "," arguments "]}," RuboCop AST SendNode arguments":{"type":"method","name":"arguments","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST SendNode command?":{"type":"method","name":"command?","children":[],"call":[" method? "," receiver ! "," receiver "]}," RuboCop AST SendNode macro?":{"type":"method","name":"macro?","children":[],"call":["MACRO_PARENT_NODES  include? "," parent type "," parent "," receiver ! "," receiver "," macro_scope? "]}," RuboCop AST SendNode method?":{"type":"method","name":"method?","children":[],"call":[" method_name == ","name to_sym "," method_name "]}," RuboCop AST SendNode method_name":{"type":"method","name":"method_name","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST SendNode receiver":{"type":"method","name":"receiver","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST ResbodyNode node_parts":{"type":"method","name":"node_parts","children":[],"call":[" to_a "]}," RuboCop AST ResbodyNode body":{"type":"method","name":"body","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST OrNode node_parts":{"type":"method","name":"node_parts","children":[],"call":[" to_a "]}," RuboCop AST OrNode inverse_operator":{"type":"method","name":"inverse_operator","children":[],"call":[" logical_operator? "]}," RuboCop AST OrNode alternate_operator":{"type":"method","name":"alternate_operator","children":[],"call":[" logical_operator? "]}," RuboCop AST PredicateOperatorNode semantic_operator?":{"type":"method","name":"semantic_operator?","children":[],"call":[" operator == "," operator "]}," RuboCop AST PredicateOperatorNode logical_operator?":{"type":"method","name":"logical_operator?","children":[],"call":[" operator == "," operator "]}," RuboCop AST PredicateOperatorNode operator":{"type":"method","name":"operator","children":[],"call":[" loc operator source "," loc operator "," loc "]}," RuboCop AST BinaryOperatorNode rhs":{"type":"method","name":"rhs","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST BinaryOperatorNode lhs":{"type":"method","name":"lhs","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST HashNode empty?":{"type":"method","name":"empty?","children":[],"call":[" children empty? "," children "]}," RuboCop AST EnsureNode node_parts":{"type":"method","name":"node_parts","children":[],"call":[" to_a "]}," RuboCop AST EnsureNode body":{"type":"method","name":"body","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST AndNode node_parts":{"type":"method","name":"node_parts","children":[],"call":[" to_a "]}," RuboCop AST AndNode inverse_operator":{"type":"method","name":"inverse_operator","children":[],"call":[" logical_operator? "]}," RuboCop AST AndNode alternate_operator":{"type":"method","name":"alternate_operator","children":[],"call":[" logical_operator? "]}," RuboCop Cop Style MethodCallWithArgsParentheses ignored_method?":{"type":"method","name":"ignored_method?","children":[],"call":[" ignored_list include? ","node method_name "," ignored_list ","node macro? "," ignore_macros? ","node setter_method? ","node operator_method? "]}," RuboCop Cop Rails RelativeDateConstant relative_date_method?":{"type":"method","name":"relative_date_method?","children":[],"call":["node method_args empty? ","node method_args ","RELATIVE_DATE_METHODS  include? ","node method_name ","node send_type? ","node arguments? ! ","node arguments? "]}," RuboCop Cop Rails FilePath string_with_slash?":{"type":"method","name":"string_with_slash?","children":[],"call":["node source =~ ","node source ","node type == ","node type ","node str_type? "]}," RuboCop Cop PercentLiteral preferred_delimiters_for":{"type":"method","name":"preferred_delimiters_for","children":[],"call":[" preferred_delimiters [] split "," preferred_delimiters [] "," preferred_delimiters "]}," RuboCop Cop PercentLiteral preferred_delimiters_config":{"type":"method","name":"preferred_delimiters_config","children":[],"call":["@config for_cop [] ","@config for_cop "]}," RuboCop Cop PercentLiteral preferred_delimiters":{"type":"method","name":"preferred_delimiters","children":[],"call":[" preferred_delimiters_config ","Hash  [] "," preferred_delimiters_config [] ","PERCENT_LITERAL_TYPES  map "," preferred_delimiters_config key? "," ensure_valid_preferred_delimiters "]}," RuboCop Cop PercentLiteral ensure_valid_preferred_delimiters":{"type":"method","name":"ensure_valid_preferred_delimiters","children":[],"call":[" raise ","invalid join ","invalid empty? "," preferred_delimiters_config keys - ","PERCENT_LITERAL_TYPES  + "," preferred_delimiters_config keys "," preferred_delimiters_config "," preferred_delimiters_config keys -  join "," preferred_delimiters_config keys -  empty? "]}," RuboCop Cop Lint NestedMethodDefinition scoping_method_call?":{"type":"method","name":"scoping_method_call?","children":[],"call":[" class_or_module_or_struct_new_call? ","child sclass_type? "," exec_call? "," eval_call? "," allowed_method_name? "," class_constructor? ","child class_constructor? "]}," RuboCop Cop Lint AmbiguousBlockAssociation allowed_method?":{"type":"method","name":"allowed_method?","children":[],"call":["node method? ","node operator_method? ","node assignment? "," ignored_method? ","node last_argument send_node source ","node last_argument send_node ","node last_argument "]}," RuboCop Runner check_for_unneeded_disables?":{"type":"method","name":"check_for_unneeded_disables?","children":[],"call":[" filtered_run? ! "," filtered_run? ","source disabled_line_ranges empty? ! ","source disabled_line_ranges empty? ","source disabled_line_ranges "]}," RuboCop Runner warm_cache":{"type":"method","name":"warm_cache","children":[],"call":["Parallel  each "," method "," puts ","@options [] "," file_offenses ","@options []= ","(sym :autocorrect) each ","@options dup ","target_files length <= ","target_files length "]}," RuboCop RSpec ExpectOffense AnnotatedSource with_offense_annotations":{"type":"method","name":"with_offense_annotations","children":[],"call":[" class new "," lines "," class ","offense message ","offense line ","^ * ","offense column_length ","  * ","offense column ","offenses map ","offense column_length zero? "]}," RuboCop RSpec ExpectOffense AnnotatedSource plain_source":{"type":"method","name":"plain_source","children":[],"call":[" lines join "," lines "]}," RuboCop RSpec ExpectOffense AnnotatedSource to_s":{"type":"method","name":"to_s","children":[],"call":["reconstructed join ","reconstructed insert "," annotations reverse_each "," annotations "," lines dup "," lines "," lines dup  join "," lines dup  insert "]}," RuboCop RSpec ExpectOffense AnnotatedSource initialize":{"type":"method","name":"initialize","children":[],"call":["annotations sort freeze ","annotations sort ","lines freeze "]}," RuboCop RSpec ExpectOffense AnnotatedSource parse":{"type":"method","name":"parse","children":[],"call":[]}," RuboCop RSpec ExpectOffense expect_no_offenses":{"type":"method","name":"expect_no_offenses","children":[],"call":[" expect to "," be_empty "," expect "," cop offenses "," cop "," inspect_source "," eq ","actual_annotations to_s ","expected_annotations with_offense_annotations ","AnnotatedSource  parse "," cop  inspect_source  ","expected_annotations with_offense_annotations  to_s ","AnnotatedSource  parse  with_offense_annotations "]}," RuboCop RSpec ExpectOffense expect_offense":{"type":"method","name":"expect_offense","children":[],"call":[" expect to "," eq ","actual_annotations to_s "," expect ","expected_annotations to_s ","expected_annotations with_offense_annotations "," cop offenses "," cop "," inspect_source ","expected_annotations plain_source "," raise ","expected_annotations plain_source == ","AnnotatedSource  parse "," _investigate ","@processed_source valid_syntax? "," parse_source "," cop instance_variable_get []= "," cop instance_variable_get ","RuboCop Formatter DisabledConfigFormatter  detected_styles= ","RuboCop Formatter DisabledConfigFormatter  config_to_allow_offenses= "," format_offense ","offenses map uniq ","offenses map ","@processed_source diagnostics map join ","@processed_source diagnostics map ","@processed_source diagnostics ","@offenses map uniq ","@offenses map "," parse_processed_source ","source chomp "," parse_annotations ","expected_annotations with_offense_annotations  to_s ","AnnotatedSource  parse  to_s "," parse_annotations  to_s ","AnnotatedSource  parse  with_offense_annotations "," parse_annotations  with_offense_annotations "," cop  _investigate  "," inspect_ format_offense  "," inspect_source chomp  "," inspect_expected_annotations plain_source  ","AnnotatedSource  parse  plain_source "," parse_annotations  plain_source ","expected_annotations plain_ format_offense  ","expected_annotations plain_source chomp  ","expected_annotations plain_expected_annotations plain_source  ","AnnotatedSource  parse  plain_source == "," parse_annotations  plain_source == ","expected_annotations plain_ format_offense  == ","expected_annotations plain_source chomp  == ","expected_annotations plain_expected_annotations plain_source  == "," parse_source  valid_syntax? "," parse_processed_source  valid_syntax? ","@processed_ format_offense  valid_syntax? ","@processed_source chomp  valid_syntax? ","@processed_expected_annotations plain_source  valid_syntax? "," parse_ format_offense  "," parse_source chomp  "," parse_expected_annotations plain_source  ","RuboCop Formatter DisabledConfigFormatter  config_to_allow_ _investigate = "," _investigate  map uniq "," _investigate  map "," parse_source  diagnostics map join "," parse_processed_source  diagnostics map join ","@processed_ format_offense  diagnostics map join ","@processed_source chomp  diagnostics map join ","@processed_expected_annotations plain_source  diagnostics map join "," parse_source  diagnostics map "," parse_processed_source  diagnostics map ","@processed_ format_offense  diagnostics map ","@processed_source chomp  diagnostics map ","@processed_expected_annotations plain_source  diagnostics map "," parse_source  diagnostics "," parse_processed_source  diagnostics ","@processed_ format_offense  diagnostics ","@processed_source chomp  diagnostics ","@processed_expected_annotations plain_source  diagnostics ","@ _investigate  map uniq ","@ _investigate  map "," parse_processed_ format_offense  "," parse_processed_source chomp  "," parse_processed_expected_annotations plain_source  "," format_offense  chomp ","source chomp  chomp ","expected_annotations plain_source  chomp "]}," RuboCop PathUtil smart_path":{"type":"method","name":"smart_path","children":[],"call":[" relative_path ","path start_with? ","Dir  pwd ","PathUtil  pwd ","SMART_PATH_CACHE  [] "]}," RuboCop OptionsValidator validate_parallel":{"type":"method","name":"validate_parallel","children":[],"call":[" raise ","@options key? ","combos each ","@options [] == ","@options [] "," validate_parallel_with_combo_option "," disable_parallel_when_invalid_combo "]}," RuboCop Cop Util range_by_whole_lines":{"type":"method","name":"range_by_whole_lines","children":[],"call":["Parser Source Range  new ","end_pos + ","last_line length - ","range last_column ","last_line length ","range end_pos ","buffer source_line ","range last_line ","begin_pos - ","range column ","range begin_pos ","@processed_source buffer ","range end_pos  + ","buffer source_line  length - ","buffer source_line  length ","range range end_pos  ","@processed_source buffer  source_line ","range buffer source_line  ","range begin_pos  - ","range range begin_pos  ","@processed_source @processed_source buffer  "]}," RuboCop Cop Style YodaCondition reverse_comparison":{"type":"method","name":"reverse_comparison","children":[],"call":["REVERSE_COMPARISON  fetch ","operator to_s "]}," RuboCop Cop Style YodaCondition actual_code_range":{"type":"method","name":"actual_code_range","children":[],"call":[" range_between ","node loc expression end_pos ","node loc expression ","node loc ","node loc expression begin_pos ","node source_range end_pos ","node source_range ","node source_range begin_pos "]}," RuboCop Cop Style YodaCondition corrected_code":{"type":"method","name":"corrected_code","children":[],"call":["first source "," reverse_comparison ","last source ","node children ","lhs source ","rhs source ","node method_name ","node first_argument ","node receiver ","node receiver  source ","node first_argument  source "]}," RuboCop Cop Style YodaCondition autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," corrected_code "," actual_code_range "," lambda "]}," RuboCop Cop Style YodaCondition register_offense":{"type":"method","name":"register_offense","children":[],"call":[" add_offense "," format ","node source "]}," RuboCop Cop Style YodaCondition comparison_operator?":{"type":"method","name":"comparison_operator?","children":[],"call":["RuboCop AST Node COMPARISON_OPERATORS  include? ","node method_name "]}," RuboCop Cop Style YodaCondition yoda_condition?":{"type":"method","name":"yoda_condition?","children":[],"call":["WHITELIST_TYPES  include? ! ","WHITELIST_TYPES  include? ","node receiver type ","node receiver "," comparison_operator? ","node arguments first literal? ! ","node arguments first literal? ","node arguments first ","node arguments ","node receiver literal? ","rhs literal? ! ","rhs literal? ","lhs literal? "," noncommutative_operator? "," non_equality_operator? "," check_equality_only? ","node comparison_method? "]}," RuboCop Cop Style YodaCondition on_send":{"type":"method","name":"on_send","children":[],"call":[" register_offense "," yoda_condition? "," add_offense "," valid_yoda? "," non_equality_operator? "," equality_only? "," yoda_compatible_condition? "," file_constant_equal_program_name? ","corrector replace "," corrected_code "," actual_code_range "]}," RuboCop Cop Style WordArray check_percent_array":{"type":"method","name":"check_percent_array","children":[],"call":[" add_offense "," style == "," style "," array_style_detected ","node values size ","node values "]}," RuboCop Cop Style WordArray check_bracketed_array":{"type":"method","name":"check_bracketed_array","children":[],"call":[" add_offense "," style == "," style "," array_style_detected ","node values size ","node values "," below_array_length? "," comments_in_array? "," complex_content? "," allowed_bracket_array? "]}," RuboCop Cop Style UnneededInterpolation autocorrect_incompatible_with":{"type":"method","name":"autocorrect_incompatible_with","children":[],"call":[]}," RuboCop Cop Style SymbolProc autocorrect_incompatible_with":{"type":"method","name":"autocorrect_incompatible_with","children":[],"call":[]}," RuboCop Cop Style SingleLineBlockParams method_name":{"type":"method","name":"method_name","children":[],"call":["method keys first ","method keys "]}," RuboCop Cop Style SelfAssignment autocorrect_incompatible_with":{"type":"method","name":"autocorrect_incompatible_with","children":[],"call":[]}," RuboCop Cop Style ParallelAssignment AssignmentSorter dependency?":{"type":"method","name":"dependency?","children":[],"call":[" accesses? ","lhs assignment_method? ","lhs send_type? "," uses_var? "," var_name "]}," RuboCop Cop Style Next check":{"type":"method","name":"check","children":[],"call":[" add_offense "," offense_location "," offense_node ","node body "," ends_with_condition? "," autocorrect_block "," autocorrect_modifier ","offending_node modifier_form? "," offense_node  modifier_form? "]}," RuboCop Cop Style MultipleComparison comparison?":{"type":"method","name":"comparison?","children":[],"call":[" nested_comparison? "," simple_comparison? "," simple_comparison_rhs? "," simple_comparison_lhs? "]}," RuboCop Cop Style MultipleComparison nested_comparison?":{"type":"method","name":"nested_comparison?","children":[],"call":[" comparison? ","node node_parts all? ","node node_parts ","node or_type? "]}," RuboCop Cop Style MultipleComparison variable_name":{"type":"method","name":"variable_name","children":[],"call":["node children [] ","node children "]}," RuboCop Cop Style MultipleComparison variables_in_simple_node":{"type":"method","name":"variables_in_simple_node","children":[],"call":[" variable_name "," simple_comparison? "," simple_double_comparison? ","@compared_elements << ","obj source ","obj send_type? "," allow_method_comparison? "," simple_comparison_rhs? "," simple_comparison_lhs? "]}," RuboCop Cop Style MultipleComparison variables_in_node":{"type":"method","name":"variables_in_node","children":[],"call":[" variables_in_simple_node ","(send\n  (send\n    (lvar :node) :node_parts) :flat_map) uniq "," variables_in_node ","node node_parts flat_map ","node node_parts ","node or_type? "]}," RuboCop Cop Style MultipleComparison nested_variable_comparison?":{"type":"method","name":"nested_variable_comparison?","children":[],"call":[" variables_in_node count == "," variables_in_node count "," variables_in_node "," nested_comparison? "]}," RuboCop Cop Style MultipleComparison on_if":{"type":"method","name":"on_if","children":[],"call":[" add_offense "," nested_variable_comparison? ","node condition "]}," RuboCop Cop Style MixinGrouping indent":{"type":"method","name":"indent","children":[],"call":["  * ","node loc column ","node loc "]}," RuboCop Cop Style MixinGrouping group_mixins":{"type":"method","name":"group_mixins","children":[],"call":["all_mixin_arguments join ","m arguments map ","m arguments ","mixins reverse flat_map ","mixins reverse ","mixin_names join ","node method_name ","mixin arguments map ","mixin arguments "]}," RuboCop Cop Style MixinGrouping separate_mixins":{"type":"method","name":"separate_mixins","children":[],"call":["replacement << ","arg source "," indent ","args [] inject ","args [] ","String  new ","args first source ","args first ","args reverse! ","(send\n  (send\n    (lvar :arguments) :[]\n    (irange\n      (int 1)\n      (int -1))) :inject\n  (lvar :mixins)) join ","node method_name ","arguments [] inject ","arguments [] ","arguments first source ","arguments first ","node arguments reverse ","node arguments ","(send\n  (send\n    (lvar :arguments) :[]\n    (irange\n      (int 1) nil)) :inject\n  (lvar :mixins)) join ","(send\n  (send\n    (lvar :node arguments reverse ) :[]\n    (irange\n      (int 1)\n      (int -1))) :inject\n  (lvar :mixins)) join ","node arguments reverse  [] inject ","node arguments reverse  [] ","node arguments reverse  first source ","node arguments reverse  first ","node node arguments reverse  reverse ","node node arguments reverse  ","(send\n  (send\n    (lvar :node arguments reverse ) :[]\n    (irange\n      (int 1) nil)) :inject\n  (lvar :mixins)) join "]}," RuboCop Cop Style MixinGrouping sibling_mixins":{"type":"method","name":"sibling_mixins","children":[],"call":["sibling_node method_name == ","send_node method_name ","sibling_node method_name ","siblings select ","sibling == ","send_node parent each_child_node reject ","send_node parent each_child_node ","send_node parent ","send_node parent each_child_node select ","sibling_node method? ","send_node parent each_child_node select  select "]}," RuboCop Cop Style MixinGrouping autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," lambda "," group_mixins ","node loc expression join ","mixins last loc expression ","mixins last loc ","mixins last ","node loc expression ","node loc ","mixins unshift "," sibling_mixins "," separate_mixins "," separated_style? "," range_to_remove_for_subsequent_mixin ","node == ","mixins first "," group_ sibling_mixins  "," sibling_mixins  last loc expression "," sibling_mixins  last loc "," sibling_mixins  last "," sibling_mixins  unshift "," sibling_ sibling_mixins  "," separate_ sibling_mixins  "," node loc expression join _to_remove_for_subsequent_mixin "," node loc expression _to_remove_for_subsequent_mixin ","  range_to_remove_for_subsequent_mixin _to_remove_for_subsequent_mixin "," sibling_mixins  first "]}," RuboCop Cop Style MethodName sanitize_name":{"type":"method","name":"sanitize_name","children":[],"call":["name to_s delete to_sym ","name to_s delete ","name to_s "]}," RuboCop Cop Style LineEndConcatenation autocorrect_incompatible_with":{"type":"method","name":"autocorrect_incompatible_with","children":[],"call":[]}," RuboCop Cop Style InverseMethods negated?":{"type":"method","name":"negated?","children":[],"call":["node parent method? ","node parent ","node parent respond_to? "]}," RuboCop Cop Style FormatStringToken slice_source":{"type":"method","name":"slice_source","children":[],"call":["Parser Source Range  new ","source_range source_buffer "]}," RuboCop Cop Style FormatStringToken split_token":{"type":"method","name":"split_token","children":[],"call":[" slice_source ","source_range end_pos ","source_range begin_pos + ","source_range begin_pos "]}," RuboCop Cop Style FormatStringToken match_token":{"type":"method","name":"match_token","children":[],"call":["match end ","match begin ","source_range source match ","source_range source ","STYLE_PATTERNS  fetch "," supported_styles each "," supported_styles ","source_range source match  end ","source_range source match  begin ","source_range source source_range source match  "]}," RuboCop Cop Style FormatStringToken token_ranges":{"type":"method","name":"token_ranges","children":[],"call":[" split_token "," match_token "," slice_source ","contents begin_pos + ","seq end_pos ","contents begin_pos ","seq begin_pos ","seq style ","format_string format_sequences each ","format_string format_sequences ","RuboCop Cop Utils FormatString  new ","contents source ","contents begin adjust ","contents begin ","seq percent? ","detected_sequence end_pos ","detected_sequence begin_pos ","detected_sequence percent? "," split_ slice_source  "," split_contents begin adjust  "," match_ slice_source  "," match_contents begin adjust  ","RuboCop Cop Utils FormatString  new  format_sequences each ","RuboCop Cop Utils FormatString  new  format_sequences "]}," RuboCop Cop Style FormatStringToken str_contents":{"type":"method","name":"str_contents","children":[],"call":["source_map expression "," slice_source ","source_map expression end_pos - ","source_map expression end_pos ","source_map expression begin_pos + ","source_map expression begin_pos ","source_map begin ","source_map heredoc_body ","source_map is_a? ","source_map expression adjust "]}," RuboCop Cop Style FormatStringToken tokens":{"type":"method","name":"tokens","children":[],"call":[" token_ranges "," str_contents ","str_node loc ","str_node source == ","str_node source "]}," RuboCop Cop Style FormatStringToken message_text":{"type":"method","name":"message_text","children":[],"call":["(pair\n  (sym :annotated)\n  (str \"annotated tokens (like `%<foo>s`)\")) [] "]}," RuboCop Cop Style FormatStringToken message":{"type":"method","name":"message","children":[],"call":[" message_text "," style "]}," RuboCop Cop Style FormatStringToken on_str":{"type":"method","name":"on_str","children":[],"call":[" add_offense "," message "," style_detected "," correct_style_detected ","detected_style == "," style "," tokens ","node each_ancestor any? ","node each_ancestor "," unannotated_format? "," placeholder_argument? ","node value include? ","node value ","detections each "," allowed_unannotated? ","detections empty? "," collect_detections "," use_ignored_method? "," format_string_token? "," check_sequence "," use_allowed_method? "," collect_detections  each "," collect_detections  empty? "," collect_ collect_detections  "]}," RuboCop Cop Style FormatString autocorrect_to_percent":{"type":"method","name":"autocorrect_to_percent","children":[],"call":["corrector replace ","node loc expression ","node loc ","args map join ","args map ","arg source ","arg hash_type? ","args first ","args one? ","format source ","node arguments [] map join ","node arguments [] map ","node arguments [] ","node arguments ","node arguments last ","node arguments size == ","node arguments size ","node first_argument source ","node first_argument ","param_args map join ","param_args map ","param_args last ","param_args one? ","format_arg source "," format_single_parameter ","args first s map join ","node arguments last s map join ","param_args last s map join "," format_single_parameter  map join ","args first s map ","node arguments last s map ","param_args last s map "," format_single_parameter  map ","args first  source ","node arguments last  source ","param_args last  source ","args first  hash_type? ","node arguments last  hash_type? ","param_args last  hash_type? ","args first s first ","node arguments last s first ","param_args last s first "," format_single_parameter  first ","args first s one? ","node arguments last s one? ","param_args last s one? "," format_single_parameter  one? ","format source  source ","node first_argument source  source ","format_arg source  source ","node args first uments [] map join ","node node arguments last uments [] map join ","node param_args last uments [] map join ","node args first uments [] map ","node node arguments last uments [] map ","node param_args last uments [] map ","node args first uments [] ","node node arguments last uments [] ","node param_args last uments [] ","node args first uments ","node node arguments last uments ","node param_args last uments ","node args first uments last ","node node arguments last uments last ","node param_args last uments last ","node args first uments size == ","node node arguments last uments size == ","node param_args last uments size == ","node args first uments size ","node node arguments last uments size ","node param_args last uments size ","node first_args first ument source ","node first_node arguments last ument source ","node first_param_args last ument source ","node first_args first ument ","node first_node arguments last ument ","node first_param_args last ument ","param_args first s map join ","param_node arguments last s map join ","param_param_args last s map join ","param_ format_single_parameter  map join ","param_args first s map ","param_node arguments last s map ","param_param_args last s map ","param_ format_single_parameter  map ","param_args first s last ","param_node arguments last s last ","param_param_args last s last ","param_ format_single_parameter  last ","param_args first s one? ","param_node arguments last s one? ","param_param_args last s one? ","param_ format_single_parameter  one? ","format_args first  source ","format_node arguments last  source ","format_param_args last  source ","format source _arg source ","node first_argument source _arg source ","format_arg source _arg source "," format source _single_parameter "," node first_argument source _single_parameter "," format_arg source _single_parameter "]}," RuboCop Cop Style FormatString autocorrect_from_percent":{"type":"method","name":"autocorrect_from_percent","children":[],"call":["corrector replace ","node loc expression ","node loc "," style ","args source ","args children map join ","args children map ","args children ","args hash_type? ","args array_type? ","receiver source ","node receiver source ","node receiver ","node first_argument source ","node first_argument ","node first_argument children map join ","node first_argument children map ","node first_argument children ","(sym :array) include? ","node first_argument type ","percent_rhs source ","percent_rhs children map join ","percent_rhs children map ","percent_rhs children ","percent_rhs type ","args source  source ","args children map join  source ","node first_argument source  source ","node first_argument children map join  source ","args source  children map join ","args children map join  children map join ","node first_argument source  children map join ","node first_argument children map join  children map join ","args source  children map ","args children map join  children map ","node first_argument source  children map ","node first_argument children map join  children map ","args source  children ","args children map join  children ","node first_argument source  children ","node first_argument children map join  children ","args source  hash_type? ","args children map join  hash_type? ","node first_argument source  hash_type? ","node first_argument children map join  hash_type? ","args source  array_type? ","args children map join  array_type? ","node first_argument source  array_type? ","node first_argument children map join  array_type? ","node first_argument  source ","node first_argument  children map join ","node first_argument  children map ","node first_argument  children ","node first_argument  type "]}," RuboCop Cop Style FormatString autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," style to_s "," style ","node loc selector ","node loc "," autocorrect_to_percent "," autocorrect_from_percent "," lambda ","node method_name "," variable_argument? "]}," RuboCop Cop Rails SaveBang call_to_persisted?":{"type":"method","name":"call_to_persisted?","children":[],"call":["node method? ","node send_type? "]}," RuboCop Cop Rails ReversibleMigration check_change_table_offense":{"type":"method","name":"check_change_table_offense","children":[],"call":[" add_offense "," format ","IRREVERSIBLE_CHANGE_TABLE_CALLS  include? ! ","IRREVERSIBLE_CHANGE_TABLE_CALLS  include? ","receiver != ","node receiver ","node method_name ","node node method_name  "]}," RuboCop Cop Rails ReversibleMigration check_change_table_node":{"type":"method","name":"check_change_table_node","children":[],"call":[" check_change_table_offense ","block each_child_node ","block send_type? "," add_offense "," format "," target_rails_version < "," target_rails_version "," change_table_call "]}," RuboCop Cop Rails ReversibleMigration on_block":{"type":"method","name":"on_block","children":[],"call":[" check_change_table_node ","node body ","node send_node "," within_reversible_block? "," within_change_method? "," within_reversible_or_up_only_block? ","node body nil? "]}," RuboCop Cop Rails RelativeDateConstant check_node":{"type":"method","name":"check_node","children":[],"call":[" add_offense "," format ","n method_name ","node parent "," relative_date_method? ","nodes each ","node children ","node send_type? ","node erange_type? ","node irange_type? ","node children  each "]}," RuboCop Cop Rails RelativeDateConstant on_or_asgn":{"type":"method","name":"on_or_asgn","children":[],"call":[" check_node ","lhs casgn_type? "," add_offense "," format "," relative_date_or_assignment? "]}," RuboCop Cop Rails RelativeDateConstant on_masgn":{"type":"method","name":"on_masgn","children":[],"call":[" check_node ","name casgn_type? ","lhs children zip each ","lhs children zip ","rhs children ","lhs children ","rhs array_type? "," add_offense "," format "," range_between ","value loc expression end_pos ","value loc expression ","value loc ","name loc expression begin_pos ","name loc expression ","name loc "," relative_date? "]}," RuboCop Cop Rails Present replacement":{"type":"method","name":"replacement","children":[],"call":["node source ","node respond_to? "]}," RuboCop Cop Rails OutputSafety looks_like_rails_safe_concat?":{"type":"method","name":"looks_like_rails_safe_concat?","children":[],"call":["node arguments one? ","node arguments ","node method? "]}," RuboCop Cop Rails Blank replacement":{"type":"method","name":"replacement","children":[],"call":["node source ","node respond_to? "]}," RuboCop Cop Performance CompareWithBlock message":{"type":"method","name":"message","children":[],"call":[" format ","key source ","args first ","method == ","send method_name ","args first  source "]}," RuboCop Cop Performance CompareWithBlock slow_compare?":{"type":"method","name":"slow_compare?","children":[],"call":["args_a empty? ","(sym :sym) include? ","key type ","args_a first ","args_a size == ","args_a size ","method == ","args_a == ","args_a first  type "]}," RuboCop Cop Performance Caller slow_caller?":{"type":"method","name":"slow_caller?","children":[],"call":["arguments [] int_type? ","arguments [] ","arguments length == ","arguments length ","arguments empty? ","node receiver arguments ","node receiver ","node receiver arguments  [] int_type? ","node receiver arguments  [] ","node receiver arguments  length == ","node receiver arguments  length ","node receiver arguments  empty? ","node receiver node receiver arguments  "]}," RuboCop Cop Performance Caller on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," slow_caller? "," caller_with_scope_method? "]}," RuboCop Cop EnforceSuperclass autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," class ","node source_range "," lambda "]}," RuboCop Cop EnforceSuperclass on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," class ","node children last ","node children "," class_new_definition "]}," RuboCop Cop EnforceSuperclass on_class":{"type":"method","name":"on_class","children":[],"call":[" add_offense "," class ","node children [] ","node children "," class_definition "]}," RuboCop Cop EnforceSuperclass included":{"type":"method","name":"included","children":[],"call":[]}," RuboCop Cop Layout EmptyLinesAroundBody deferred_message":{"type":"method","name":"deferred_message","children":[],"call":[" format ","node type "]}," RuboCop Cop Layout EmptyLinesAroundBody message":{"type":"method","name":"message","children":[],"call":[" format "," class "]}," RuboCop Cop Layout EmptyLinesAroundBody previous_line_ignoring_comments":{"type":"method","name":"previous_line_ignoring_comments","children":[],"call":[" comment_line? "," processed_source [] "," processed_source ","(send\n  (lvar :send_line) :-\n  (int 2)) downto ","send_line - "]}," RuboCop Cop Layout EmptyLinesAroundBody first_empty_line_required_child":{"type":"method","name":"first_empty_line_required_child","children":[],"call":[" empty_line_required? ","body children find ","body children ","body begin_type? "]}," RuboCop Cop Layout EmptyLinesAroundBody first_child_requires_empty_line?":{"type":"method","name":"first_child_requires_empty_line?","children":[],"call":[" empty_line_required? ","body children first ","body children ","body begin_type? "]}," RuboCop Cop Layout EmptyLinesAroundBody namespace?":{"type":"method","name":"namespace?","children":[],"call":[" constant_definition? ","body children all? ","body children ","body begin_type? "]}," RuboCop Cop Layout EmptyLinesAroundBody check_deferred_empty_line":{"type":"method","name":"check_deferred_empty_line","children":[],"call":[" add_offense "," deferred_message "," source_range ","line + "," processed_source buffer "," processed_source "," processed_source [] empty? "," processed_source [] "," previous_line_ignoring_comments ","node loc first_line ","node loc "," first_empty_line_required_child ","node first_line ","EmptyLineCorrector  correct "," source_ source_range  "," previous_line_ignoring_comments  + "," previous_ previous_line_ignoring_comments _ignoring_comments ","node loc first_ previous_line_ignoring_comments  "," first_empty_line_required_child  loc first_line "," first_empty_line_required_child  loc "," first_empty_ previous_line_ignoring_comments _required_child ","node first_ previous_line_ignoring_comments  "," first_empty_line_required_child  first_line "]}," RuboCop Cop Layout EmptyLinesAroundBody check_line":{"type":"method","name":"check_line","children":[],"call":[" add_offense "," source_range ","line + "," processed_source buffer "," processed_source ","msg include? ","style == "," processed_source lines [] "," processed_source lines ","EmptyLineCorrector  correct "," source_ source_range  "]}," RuboCop Cop Layout EmptyLinesAroundBody check_source":{"type":"method","name":"check_source","children":[],"call":["line empty? ! ","line empty? "," check_line "," message "]}," RuboCop Cop Layout EmptyLinesAroundBody check_ending":{"type":"method","name":"check_ending","children":[],"call":[" check_source ","last_line - "]}," RuboCop Cop Layout EmptyLinesAroundBody check_beginning":{"type":"method","name":"check_beginning","children":[],"call":[" check_source "]}," RuboCop Cop Layout EmptyLinesAroundBody check_both":{"type":"method","name":"check_both","children":[],"call":[" check_ending "," check_beginning "]}," RuboCop Cop Layout EmptyLinesAroundBody check_empty_lines_special":{"type":"method","name":"check_empty_lines_special","children":[],"call":[" check_ending "," check_deferred_empty_line "," check_beginning "," first_child_requires_empty_line? "," check_both "," namespace? "]}," RuboCop Cop Layout EmptyLinesAroundBody check_empty_lines_except_namespace":{"type":"method","name":"check_empty_lines_except_namespace","children":[],"call":[" check_both "," namespace? "]}," RuboCop Cop Layout EmptyLinesAroundBody check":{"type":"method","name":"check","children":[],"call":[" check_both "," style "," check_empty_lines_special "," check_empty_lines_except_namespace ","node source_range last_line ","node source_range ","node source_range first_line ","node single_line? "," style == "," valid_body_style? ","node source_range node source_range last_line  ","node source_range node source_range first_line  "]}," RuboCop Cop Layout EmptyLinesAroundBody autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector insert_before ","corrector remove "," lambda "]}," RuboCop Cop ArrayMinSize smallest_percent_size":{"type":"method","name":"smallest_percent_size","children":[],"call":["ary_size < ","style == "]}," RuboCop Cop ArrayMinSize largest_brackets_size":{"type":"method","name":"largest_brackets_size","children":[],"call":[" class largest_brackets "," class "," class largest_brackets= ","ary_size > ","style == ","Float INFINITY  -@ "]}," RuboCop Cop ArrayMinSize array_style_detected":{"type":"method","name":"array_style_detected","children":[],"call":["cfg []= ","largest_brackets + "," config_to_allow_offenses= ","smallest_percent <= ","style to_s ","cfg [] nil? ","cfg [] ","cfg [] == "," smallest_percent_size "," largest_brackets_size "," config_to_allow_offenses "," config_to_allow_offenses  []= "," largest_brackets_size  + "," smallest_percent_size  <= "," config_to_allow_offenses  [] nil? "," config_to_allow_offenses  [] "," config_to_allow_offenses  [] == ","  smallest_percent_size _size ","  largest_brackets_size _size "]}," RuboCop Cop ArrayMinSize min_size_config":{"type":"method","name":"min_size_config","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop ArrayMinSize below_array_length?":{"type":"method","name":"below_array_length?","children":[],"call":["node values length < "," min_size_config ","node values length ","node values "]}," RuboCop Cop Lint ScriptPermission format_message_from":{"type":"method","name":"format_message_from","children":[],"call":[" format ","File  basename ","processed_source buffer name ","processed_source buffer ","processed_source file_path ","File  File  basename  "]}," RuboCop Cop Lint ScriptPermission executable?":{"type":"method","name":"executable?","children":[],"call":["File  stat executable? ","File  stat ","processed_source buffer name ","processed_source buffer ","processed_source file_path "]}," RuboCop Cop Lint ScriptPermission start_with_shebang?":{"type":"method","name":"start_with_shebang?","children":[],"call":["processed_source [] start_with? ","processed_source [] ","processed_source [] nil? "]}," RuboCop Cop Lint ScriptPermission investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense "," format_message_from ","processed_source comments [] ","processed_source comments "," executable? "," start_with_shebang? ","Platform  windows? ","@options key? ","processed_source start_with? "," format_ format_message_from _from ","processed_source processed_source comments [] s [] ","processed_source processed_source comments [] s "]}," RuboCop Cop Lint RescueType invalid_exceptions":{"type":"method","name":"invalid_exceptions","children":[],"call":["INVALID_TYPES  include? ","exception type ","exceptions select "]}," RuboCop Cop Lint RescueType autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," lambda ","Parser Source Range  new ","rescued loc expression end_pos ","rescued loc expression ","rescued loc ","node loc keyword end_pos ","node loc keyword ","node loc ","node loc expression ","correction empty? ","valid_exceptions map join ","valid_exceptions map ","exceptions - "," invalid_exceptions "," correction ","node loc expression source_buffer ","rescued source_range end_pos ","rescued source_range ","node source_range source_buffer ","node source_range ","valid_exceptions map join  empty? ","exceptions -  map join ","exceptions -  map "," inexceptions -  "," valid_exceptions map join  ","rescued source_Parser Source Range  new  end_pos ","rescued source_Parser Source Range  new  ","node source_Parser Source Range  new  source_buffer ","node source_Parser Source Range  new  "]}," RuboCop Cop Lint RescueType on_resbody":{"type":"method","name":"on_resbody","children":[],"call":[" add_offense "," format ","invalid_exceptions map join ","invalid_exceptions map ","node loc keyword join ","rescued loc expression ","rescued loc ","node loc keyword ","node loc ","invalid_exceptions empty? "," invalid_exceptions ","rescued nil? "," autocorrect ","rescued source_range "," invalid_exceptions  map join "," invalid_exceptions  map "," invalid_exceptions  empty? ","  invalid_exceptions  "]}," RuboCop Cop Layout TrailingWhitespace autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove "," lambda "]}," RuboCop Cop Layout TrailingWhitespace investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense "," source_range ","line length ","line rstrip length ","line rstrip ","index + ","processed_source buffer ","line end_with? ","processed_source lines each_with_index ","processed_source lines "," inside_heredoc? "," skip_heredoc? "," extract_heredoc_ranges ","processed_source ast "," source_ source_range  "," extract_heredoc_ source_range s "," extract_ extract_heredoc_ranges  "]}," RuboCop Cop Layout TrailingBlankLines autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," style == "," style "," lambda "]}," RuboCop Cop Layout TrailingBlankLines message":{"type":"method","name":"message","children":[],"call":[" format ","wanted_blank_lines zero? "]}," RuboCop Cop Layout TrailingBlankLines ends_in_end?":{"type":"method","name":"ends_in_end?","children":[],"call":["extra strip start_with? ","extra strip ","sb source [] ","processed_source tokens last pos end_pos ","processed_source tokens last pos ","processed_source tokens last ","processed_source tokens ","sb source ","processed_source tokens empty? ","sb source strip start_with? ","sb source strip ","processed_source buffer ","processed_source tokens last end_pos ","buffer source [] ","buffer source ","buffer source strip start_with? ","buffer source strip ","sb source []  strip start_with? ","buffer source []  strip start_with? ","sb source []  strip ","buffer source []  strip ","processed_source buffer  source [] ","processed_source buffer  source ","processed_source buffer  source strip start_with? ","processed_source buffer  source strip ","processed_source processed_source buffer  "]}," RuboCop Cop Layout TrailingBlankLines offense_detected":{"type":"method","name":"offense_detected","children":[],"call":[" add_offense "," message "," range_between ","sb source length ","sb source ","whitespace_at_end empty? ","sb source length - ","whitespace_at_end length ","buffer source length ","buffer source ","buffer source length - "]}," RuboCop Cop Layout TrailingBlankLines investigate":{"type":"method","name":"investigate","children":[],"call":[" offense_detected ","blank_lines != "," style == "," style ","whitespace_at_end count - ","whitespace_at_end count ","sb source [] ","sb source "," ends_in_end? ","sb source empty? ","processed_source buffer ","buffer source [] ","buffer source ","buffer source empty? ","whitespace_at_end count -  != ","sb source []  count - ","buffer source []  count - ","sb source []  count ","buffer source []  count ","processed_source buffer  source [] ","processed_source buffer  source ","processed_source buffer  source empty? ","processed_source processed_source buffer  "]}," RuboCop Cop Layout Tab string_literal_lines":{"type":"method","name":"string_literal_lines","children":[],"call":["lines merge ","str_lines to_a ","loc last_line ","loc first_line + ","loc first_line ","body last_line ","body first_line ","loc heredoc_body ","loc is_a? ","str location ","ast each_node each_with_object ","Set  new ","ast each_node ","ast nil? ","str location  last_line ","str location  first_line + ","str location  first_line ","loc heredoc_body  last_line ","loc heredoc_body  first_line ","loc heredoc_loc heredoc_body  ","str location  heredoc_body ","str location  is_a? ","str str location ation "]}," RuboCop Cop Layout Tab autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","range source gsub ","range source "," lambda ","  * "," configured_indentation_width "]}," RuboCop Cop Layout Tab investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense "," source_range ","match end ","spaces length ","index + ","processed_source buffer ","match captures [] ","match captures ","str_lines include? ","line match ","processed_source lines each_with_index ","processed_source lines "," string_literal_lines ","processed_source ast "," in_string_literal? ","prefix length ","processed_source lines each with_index ","processed_source lines each "," string_literal_ranges ","match begin "," source_ source_range  ","line match  end ","match captures []  length ","line match  captures [] ","line match  captures "," string_literal_lines  include? ","line line match  "," string_literal_ source_range s ","line match  begin "]}," RuboCop Cop Layout SpaceInsideStringInterpolation autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," range_with_surrounding_space ","node source_range "," lambda ","node source "," style == "," style ","SpaceCorrector  add_space "," processed_source ","SpaceCorrector  remove_space "," delimiters "]}," RuboCop Cop Layout SpaceInsideStringInterpolation space_on_each_side?":{"type":"method","name":"space_on_each_side?","children":[],"call":["interp_with_surrounding_space source == ","interp source ","interp_with_surrounding_space source "," range_with_surrounding_space ","node source_range "," range_with_surrounding_space  source == ","node source_range _with_surrounding_space source == ","node source_range  source "," range_with_surrounding_space  source ","node source_range _with_surrounding_space source "]}," RuboCop Cop Layout SpaceInsideStringInterpolation space_on_any_side?":{"type":"method","name":"space_on_any_side?","children":[],"call":["interp_with_surrounding_space != "," range_with_surrounding_space ","node source_range "," range_with_surrounding_space  != ","node source_range _with_surrounding_space != "]}," RuboCop Cop Layout SpaceInsideStringInterpolation each_style_violation":{"type":"method","name":"each_style_violation","children":[],"call":[" space_on_each_side? ! "," space_on_each_side? "," style == "," style "," space_on_any_side? ","begin_node children last ","begin_node children ","node each_child_node "]}," RuboCop Cop Layout SpaceInsideStringInterpolation on_dstr":{"type":"method","name":"on_dstr","children":[],"call":[" add_offense "," each_style_violation "]}," RuboCop Cop Layout SpaceInsideRangeLiteral autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","expression sub sub ","expression sub ","node source_range "," lambda ","operator gsub ","node loc operator source ","node loc operator ","node loc ","node source ","node source  sub sub ","node source  sub ","node loc operator source  gsub ","node loc node loc operator source  source ","node loc node loc operator source  "]}," RuboCop Cop Layout SpaceInsideRangeLiteral check":{"type":"method","name":"check","children":[],"call":[" add_offense ","expression =~ ","expression sub! ","op gsub ","node loc operator source ","node loc operator ","node loc ","node source ","(str \"(\\\\s\") match? ","corrector replace ","expression sub sub ","expression sub ","node source  =~ ","node source  sub! ","node loc operator source  gsub ","node loc node loc operator source erator source ","node loc node loc operator source erator ","node source  sub sub ","node source  sub "]}," RuboCop Cop Layout SpaceInsideRangeLiteral on_erange":{"type":"method","name":"on_erange","children":[],"call":[" check "]}," RuboCop Cop Layout SpaceInsideRangeLiteral on_irange":{"type":"method","name":"on_irange","children":[],"call":[" check "]}," RuboCop Cop Layout SpaceInsidePercentLiteralDelimiters regex_matches":{"type":"method","name":"regex_matches","children":[],"call":[" each_match_range "," contents_range ","(const nil :BEGIN_REGEX) each "]}," RuboCop Cop Layout SpaceInsidePercentLiteralDelimiters add_offenses_for_unnecessary_spaces":{"type":"method","name":"add_offenses_for_unnecessary_spaces","children":[],"call":[" add_offense "," regex_matches ","node single_line? ","corrector remove "]}," RuboCop Cop Layout SpaceInsidePercentLiteralDelimiters autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove "," regex_matches "," lambda "]}," RuboCop Cop Layout SpaceInsidePercentLiteralDelimiters on_percent_literal":{"type":"method","name":"on_percent_literal","children":[],"call":[" add_offenses_for_unnecessary_spaces "," add_offenses_for_blank_spaces "]}," RuboCop Cop Layout SpaceInsidePercentLiteralDelimiters on_xstr":{"type":"method","name":"on_xstr","children":[],"call":[" process "]}," RuboCop Cop Layout SpaceInsidePercentLiteralDelimiters on_array":{"type":"method","name":"on_array","children":[],"call":[" process "]}," RuboCop Cop Layout SpaceInsideParens specifics":{"type":"method","name":"specifics","children":[],"call":[]}," RuboCop Cop Layout SpaceInsideHashLiteralBraces range_of_space_to_the_left":{"type":"method","name":"range_of_space_to_the_left","children":[],"call":[" range_between ","range end_pos - ","range end_pos ","src [] =~ ","src [] ","begin_pos - ","range begin_pos ","range source_buffer source ","range source_buffer ","(str \"[ \\\\t]\") match? ","range source_buffer source  [] =~ ","range source_buffer source  [] ","range begin_pos  - ","range range begin_pos  "]}," RuboCop Cop Layout SpaceInsideHashLiteralBraces range_of_space_to_the_right":{"type":"method","name":"range_of_space_to_the_right","children":[],"call":[" range_between ","range begin_pos + ","range begin_pos ","src [] =~ ","src [] ","range end_pos ","range source_buffer source ","range source_buffer ","(str \"[ \\\\t]\") match? ","range source_buffer source  [] =~ ","range source_buffer source  [] ","range range end_pos  "]}," RuboCop Cop Layout SpaceInsideHashLiteralBraces space_range":{"type":"method","name":"space_range","children":[],"call":[" range_of_space_to_the_left "," range_of_space_to_the_right ","token_range source == ","token_range source "]}," RuboCop Cop Layout SpaceInsideHashLiteralBraces autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","corrector remove ","range source "," lambda ","corrector insert_before ","corrector insert_after "]}," RuboCop Cop Layout SpaceInsideHashLiteralBraces message":{"type":"method","name":"message","children":[],"call":[" format ","brace source "]}," RuboCop Cop Layout SpaceInsideHashLiteralBraces offense?":{"type":"method","name":"offense?","children":[],"call":["has_space ! "," space_between? ","t1 space_after? ","token1 space_after? "," space_between?  ! ","t1 space_after?  ! ","token1 space_after?  ! "]}," RuboCop Cop Layout SpaceInsideHashLiteralBraces ambiguous_or_unexpected_style_detected":{"type":"method","name":"ambiguous_or_unexpected_style_detected","children":[],"call":[" unexpected_style_detected "," ambiguous_style_detected "]}," RuboCop Cop Layout SpaceInsideHashLiteralBraces incorrect_style_detected":{"type":"method","name":"incorrect_style_detected","children":[],"call":[" ambiguous_or_unexpected_style_detected ","t1 text == ","t2 text ","t1 text "," add_offense "," message "," space_range ","(if\n  (send\n    (send\n      (lvar :t1) :text) :==\n    (str \"{\"))\n  (lvar :t1)\n  (lvar :t2)) pos ","token1 text == ","token2 text ","token1 text ","(if\n  (send\n    (send\n      (lvar :token1) :text) :==\n    (str \"{\"))\n  (lvar :token1)\n  (lvar :token2)) pos "," autocorrect "," style "," space_ space_range  "]}," RuboCop Cop Layout SpaceInsideHashLiteralBraces expect_space?":{"type":"method","name":"expect_space?","children":[],"call":[" style != "," style "," cop_config [] != "," cop_config [] "," cop_config "," style == "," right_brace? "," left_brace? ","t1 type == ","t2 type ","t1 type ","t2 right_curly_brace? ","t1 left_brace? ","token2 right_curly_brace? ","token1 left_brace? ","token1 type == ","token2 type ","token1 type "," enforce_no_space_style_for_empty_braces? ! "," enforce_no_space_style_for_empty_braces? "]}," RuboCop Cop Layout SpaceInsideHashLiteralBraces check":{"type":"method","name":"check","children":[],"call":[" correct_style_detected "," incorrect_style_detected "," offense? "," expect_space? "," right_brace? "," left_brace? ","t2 type == ","t2 type ","t1 pos line < ","t2 pos line ","t2 pos ","t1 pos line ","t1 pos ","t2 right_curly_brace? ","t1 left_brace? ","t2 comment? ","t1 line < ","t2 line ","t1 line ","token2 right_curly_brace? ","token1 left_brace? ","token2 comment? ","token1 line < ","token2 line ","token1 line ","  expect_space? ? "]}," RuboCop Cop Layout SpaceInsideHashLiteralBraces right_brace?":{"type":"method","name":"right_brace?","children":[],"call":["token type == ","token type "]}," RuboCop Cop Layout SpaceInsideHashLiteralBraces left_brace?":{"type":"method","name":"left_brace?","children":[],"call":["token type == ","token type "]}," RuboCop Cop Layout SpaceInsideHashLiteralBraces hash_literal_with_braces":{"type":"method","name":"hash_literal_with_braces","children":[],"call":[" right_brace? ","tokens [] "," index_of_last_token "," left_brace? "," index_of_first_token "," processed_source tokens "," processed_source ","tokens [] right_curly_brace? ","tokens [] left_brace? "," processed_source tokens  [] "," processed_source  processed_source tokens  "," processed_source tokens  [] right_curly_brace? "," processed_source tokens  [] left_brace? "]}," RuboCop Cop Layout SpaceInsideHashLiteralBraces on_hash":{"type":"method","name":"on_hash","children":[],"call":[" check ","tokens [] ","end_index - ","begin_index == ","begin_index + "," hash_literal_with_braces "," processed_source tokens "," processed_source ","tokens size > ","tokens size ","tokens last right_curly_brace? ","tokens last ","tokens first left_brace? ","tokens first "," processed_source tokens_within "," check_whitespace_only_hash "," enforce_no_space_style_for_empty_braces? "," processed_source tokens  [] "," processed_source tokens_within  [] "," processed_source  processed_source tokens  "," processed_source  processed_source tokens_within  "," processed_source tokens  size > "," processed_source tokens_within  size > "," processed_source tokens  size "," processed_source tokens_within  size "," processed_source tokens  last right_curly_brace? "," processed_source tokens_within  last right_curly_brace? "," processed_source tokens  last "," processed_source tokens_within  last "," processed_source tokens  first left_brace? "," processed_source tokens_within  first left_brace? "," processed_source tokens  first "," processed_source tokens_within  first "," processed_source  processed_source tokens _within "," processed_source  processed_source tokens_within _within "]}," RuboCop Cop Layout SpaceInsideBrackets specifics":{"type":"method","name":"specifics","children":[],"call":[]}," RuboCop Cop Layout SpaceInsideBlockBraces autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector insert_before ","corrector replace ","corrector remove ","range source "," lambda "]}," RuboCop Cop Layout SpaceInsideBlockBraces style_for_empty_braces":{"type":"method","name":"style_for_empty_braces","children":[],"call":[" raise "," cop_config [] "," cop_config "]}," RuboCop Cop Layout SpaceInsideBlockBraces offense":{"type":"method","name":"offense","children":[],"call":[" block_given? "," add_offense "," range_between ","corrector insert_before ","corrector replace ","corrector remove ","range source "," opposite_style_detected ","style_param == ","begin_pos > ","  range_between _between "," range_between  source "]}," RuboCop Cop Layout SpaceInsideBlockBraces space":{"type":"method","name":"space","children":[],"call":[" correct_style_detected "," opposite_style_detected "," offense "," style == "," style "]}," RuboCop Cop Layout SpaceInsideBlockBraces no_space":{"type":"method","name":"no_space","children":[],"call":[" correct_style_detected "," opposite_style_detected "," offense "," style == "," style "]}," RuboCop Cop Layout SpaceInsideBlockBraces space_inside_right_brace":{"type":"method","name":"space_inside_right_brace","children":[],"call":[" space ","brace_with_space end_pos - ","brace_with_space end_pos ","brace_with_space begin_pos "," range_with_surrounding_space ","end_pos - "," inner_last_space_count - "," inner_last_space_count ","inner end_with? ","right_brace column - ","right_brace column ","brace_with_space source match? ","brace_with_space source "," range_with_surrounding_space  end_pos - ","brace_with_space brace_with_space end_pos -  - "," range_with_surrounding_space  end_pos ","brace_with_space brace_with_space end_pos -  "," range_with_surrounding_space  begin_pos ","brace_with_space end_pos -  ","brace_with_space brace_with_space begin_pos  ","brace_with_space end_pos -  - "," range_with_surrounding_space  source match? "," range_with_surrounding_space  source "]}," RuboCop Cop Layout SpaceInsideBlockBraces pipe?":{"type":"method","name":"pipe?","children":[],"call":["args_delimiter is? "]}," RuboCop Cop Layout SpaceInsideBlockBraces space_inside_left_brace":{"type":"method","name":"space_inside_left_brace","children":[],"call":[" space ","brace_with_space end_pos ","brace_with_space begin_pos + ","brace_with_space begin_pos "," range_with_surrounding_space "," opposite_style_detected "," offense ","args_delimiter begin_pos ","left_brace end_pos "," cop_config [] "," cop_config "," pipe? "," correct_style_detected "," range_with_surrounding_space  end_pos "," range_with_surrounding_space  begin_pos + "," range_with_surrounding_space  begin_pos "]}," RuboCop Cop Layout SpaceInsideBlockBraces no_space_inside_left_brace":{"type":"method","name":"no_space_inside_left_brace","children":[],"call":[" no_space ","left_brace end_pos + ","left_brace end_pos "," opposite_style_detected "," offense ","args_delimiter end_pos ","left_brace begin_pos "," cop_config [] "," cop_config ","left_brace end_pos == ","args_delimiter begin_pos "," pipe? "," correct_style_detected "]}," RuboCop Cop Layout SpaceInsideBlockBraces check_right_brace":{"type":"method","name":"check_right_brace","children":[],"call":[" space_inside_right_brace "," no_space ","right_brace end_pos ","right_brace begin_pos ","block_length zero? ","inner =~ "," aligned_braces? "," multiline_block? ","(str \"\\\\S$\") match? ","node loc expression column ","node loc expression ","node loc ","node source_range column ","node source_range ","node loc expression node loc expression column  ","node loc expression node source_range column  ","node source_range node loc expression column  ","node source_range node source_range column  "]}," RuboCop Cop Layout SpaceInsideBlockBraces check_left_brace":{"type":"method","name":"check_left_brace","children":[],"call":[" space_inside_left_brace "," no_space_inside_left_brace ","inner =~ ","(str \"\\\\A\\\\S\") match? "]}," RuboCop Cop Layout SpaceInsideBlockBraces braces_with_contents_inside":{"type":"method","name":"braces_with_contents_inside","children":[],"call":[" check_right_brace "," block_length ","node loc end ","node loc "," check_left_brace ","node loc begin ","node arguments loc begin ","node arguments loc ","node arguments ","node single_line? ","node block_type? "]}," RuboCop Cop Layout SpaceInsideBlockBraces adjacent_braces":{"type":"method","name":"adjacent_braces","children":[],"call":[" offense ","right_brace end_pos ","left_brace begin_pos "," style_for_empty_braces != "," style_for_empty_braces "]}," RuboCop Cop Layout SpaceInsideBlockBraces check_inside":{"type":"method","name":"check_inside","children":[],"call":[" offense ","range end_pos ","range begin_pos "," style_for_empty_braces == "," style_for_empty_braces "," braces_with_contents_inside ","inner =~ ","range source "," range_between ","right_brace begin_pos ","left_brace end_pos "," adjacent_braces ","left_brace end_pos == ","(str \"\\\\S\") match? "," range_between  end_pos "," range_between  begin_pos ","range source  =~ "," range_between  source ","  range_between _between "]}," RuboCop Cop Layout SpaceInsideBlockBraces on_block":{"type":"method","name":"on_block","children":[],"call":[" check_inside ","node loc end ","node loc ","node loc begin ","node keywords? ","node multiline? ","node body nil? ","node body "]}," RuboCop Cop Layout SpaceInsideArrayPercentLiteral each_unnecessary_space_match":{"type":"method","name":"each_unnecessary_space_match","children":[],"call":[" each_match_range "," contents_range "]}," RuboCop Cop Layout SpaceInsideArrayPercentLiteral autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," each_unnecessary_space_match "," lambda "]}," RuboCop Cop Layout SpaceInsideArrayPercentLiteral on_percent_literal":{"type":"method","name":"on_percent_literal","children":[],"call":[" add_offense "," each_unnecessary_space_match ","corrector replace "]}," RuboCop Cop Layout SpaceInsideArrayPercentLiteral on_array":{"type":"method","name":"on_array","children":[],"call":[" process "]}," RuboCop Cop Layout SpaceInLambdaLiteral space_after_arrow?":{"type":"method","name":"space_after_arrow?","children":[],"call":["parentheses source_range begin_pos - > ","parentheses source_range begin_pos - ","arrow source_range end_pos ","arrow source_range ","parentheses source_range begin_pos ","parentheses source_range ","lambda_node parent children [] ","lambda_node parent children ","lambda_node parent ","(send\n  (send\n    (send\n      (lvar :parentheses) :source_range) :begin_pos) :-\n  (send\n    (send\n      (lvar :arrow) :source_range) :end_pos)) positive? "," space_after_arrow empty? ! "," space_after_arrow empty? "," space_after_arrow ","lambda_node parent children []  source_range begin_pos - > ","lambda_node parent children []  source_range begin_pos - ","lambda_node parent children []  source_range end_pos ","lambda_node parent children []  source_range ","lambda_node parent children []  source_range begin_pos ","(send\n  (send\n    (send\n      (lvar :lambda_node parent children [] ) :source_range) :begin_pos) :-\n  (send\n    (send\n      (lvar :arrow) :source_range) :end_pos)) positive? ","(send\n  (send\n    (send\n      (lvar :parentheses) :source_range) :begin_pos) :-\n  (send\n    (send\n      (lvar :lambda_node parent children [] ) :source_range) :end_pos)) positive? "," space_after_lambda_node parent children []  empty? ! "," space_after_lambda_node parent children []  empty? "," space_after_lambda_node parent children []  "]}," RuboCop Cop Layout SpaceInLambdaLiteral args?":{"type":"method","name":"args?","children":[],"call":["args children empty? ! ","args children empty? ","args children ","lambda_node parent "]}," RuboCop Cop Layout SpaceInLambdaLiteral arrow_form?":{"type":"method","name":"arrow_form?","children":[],"call":["lambda_node loc selector source == ","lambda_node loc selector source ","lambda_node loc selector ","lambda_node loc "]}," RuboCop Cop Layout SpaceInLambdaLiteral lambda_node?":{"type":"method","name":"lambda_node?","children":[],"call":["call == ","receiver nil? "]}," RuboCop Cop Layout SpaceInLambdaLiteral arrow_lambda_with_args?":{"type":"method","name":"arrow_lambda_with_args?","children":[],"call":[" args? "," arrow_form? "," lambda_node? ","node parent arguments? ","node parent ","node lambda_literal? "]}," RuboCop Cop Layout SpaceInLambdaLiteral autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove "," range_between ","children [] source_range begin_pos ","children [] source_range ","children [] ","children [] source_range end_pos ","corrector insert_before "," style == "," style "," lambda ","lambda_node parent children ","lambda_node parent "," space_after_arrow ","lambda_node parent children  [] source_range begin_pos ","lambda_node parent children  [] source_range ","lambda_node parent children  [] ","lambda_node parent children  [] source_range end_pos ","lambda_node parent lambda_node parent children  "]}," RuboCop Cop Layout SpaceInLambdaLiteral on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","node parent loc expression ","node parent loc ","node parent "," space_after_arrow? "," style == "," style "," space_after_arrow? ! "," arrow_lambda_with_args? "," range_of_offense ","corrector remove "," space_after_arrow ","corrector insert_before ","node parent children [] ","node parent children "," lambda_arguments ","  space_after_arrow _after_arrow? ","  space_after_arrow _after_arrow? ! ","  space_after_arrow _after_arrow "]}," RuboCop Cop Layout SpaceBeforeSemicolon kind":{"type":"method","name":"kind","children":[],"call":["token type == ","token type ","token semicolon? "]}," RuboCop Cop Layout SpaceBeforeFirstArg expect_params_after_method_name?":{"type":"method","name":"expect_params_after_method_name?","children":[],"call":["(and\n  (send nil :allow_for_alignment?)\n  (send nil :aligned_with_something?\n    (send\n      (lvar :first_arg) :source_range))) ! "," aligned_with_something? ","first_arg source_range "," allow_for_alignment? "," same_line? ","node first_argument ","node parenthesized? "," no_space_between_method_name_and_first_argument? ","(and\n  (send nil :allow_for_alignment?)\n  (send nil :aligned_with_something?\n    (send\n      (lvar :node first_argument ) :source_range))) ! ","node first_argument  source_range ","node node first_argument ument "," no_space_between_method_name_and_node first_argument ument? "]}," RuboCop Cop Layout SpaceBeforeFirstArg regular_method_call_with_arguments?":{"type":"method","name":"regular_method_call_with_arguments?","children":[],"call":["node setter_method? ! ","node setter_method? ","node operator_method? ! ","node operator_method? ","node arguments? "]}," RuboCop Cop Layout SpaceBeforeFirstArg autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," lambda "]}," RuboCop Cop Layout SpaceBeforeFirstArg on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","space length != ","space length "," range_between ","first_arg begin_pos ","first_arg_with_space begin_pos "," range_with_surrounding_space ","node first_argument source_range ","node first_argument "," expect_params_after_method_name? "," regular_method_call_with_arguments? ","corrector replace ","space length == ","node parenthesized? "," range_between  length != "," range_between  length ","node first_argument source_range  begin_pos ","first_arg_with_ range_between  begin_pos "," range_with_surrounding_space  begin_pos ","node first_argument source_range _with_space begin_pos "," range_with_surrounding_ range_between  ","node node first_argument source_range ument source_range ","node node first_argument source_range ument "," range_between  length == "]}," RuboCop Cop Layout SpaceBeforeComment autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector insert_before "," lambda "]}," RuboCop Cop Layout SpaceBeforeComment investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense ","t2 pos ","t1 pos end == ","t2 pos begin ","t1 pos end ","t1 pos ","t1 pos line == ","t2 pos line ","t1 pos line ","t2 type == ","t2 type ","processed_source tokens each_cons ","processed_source tokens ","t1 line == ","t2 line ","t1 line ","t2 comment? ","token2 pos ","token1 pos end == ","token2 pos begin ","token1 pos end ","token1 pos ","token1 line == ","token2 line ","token1 line ","token2 comment? "]}," RuboCop Cop Layout SpaceBeforeComma kind":{"type":"method","name":"kind","children":[],"call":["token type == ","token type ","token comma? "]}," RuboCop Cop Layout SpaceBeforeBlockBraces autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector insert_before ","corrector remove ","range source "," lambda "]}," RuboCop Cop Layout SpaceBeforeBlockBraces space_detected":{"type":"method","name":"space_detected","children":[],"call":[" opposite_style_detected "," add_offense "," range_between ","left_brace begin_pos ","space_plus_brace begin_pos "," autocorrect "," range_between _plus_brace begin_pos "]}," RuboCop Cop Layout SpaceBeforeBlockBraces space_missing":{"type":"method","name":"space_missing","children":[],"call":[" opposite_style_detected "," add_offense "," autocorrect "]}," RuboCop Cop Layout SpaceBeforeBlockBraces on_block":{"type":"method","name":"on_block","children":[],"call":[" space_missing "," space_detected "," correct_style_detected "," style ","space_plus_brace source start_with? ","space_plus_brace source "," range_with_surrounding_space ","node loc begin ","node loc ","node keywords? "," check_non_empty "," check_empty "," empty_braces? "," conflict_with_block_delimiters? "," range_with_surrounding_space  source start_with? "," range_with_surrounding_space  source "]}," RuboCop Cop Layout SpaceBeforeBlockBraces autocorrect_incompatible_with":{"type":"method","name":"autocorrect_incompatible_with","children":[],"call":[]}," RuboCop Cop Layout SpaceAroundOperators hash_table_style?":{"type":"method","name":"hash_table_style?","children":[],"call":[" align_hash_cop_config [] == "," align_hash_cop_config [] "," align_hash_cop_config "]}," RuboCop Cop Layout SpaceAroundOperators align_hash_cop_config":{"type":"method","name":"align_hash_cop_config","children":[],"call":[" config for_cop "," config "]}," RuboCop Cop Layout SpaceAroundOperators autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","range source strip ","range source ","range source end_with? ","range source =~ "," lambda "," space_around_exponent_operator? ! "," space_around_exponent_operator? "," enclose_operator_with_space ","(str \"\\\\*\\\\*\") match? ","range source include? "]}," RuboCop Cop Layout SpaceAroundOperators excess_trailing_space?":{"type":"method","name":"excess_trailing_space?","children":[],"call":[" aligned_with_something? ! "," aligned_with_something? "," allow_for_alignment? ! "," allow_for_alignment? ","with_space source =~ ","with_space source ","with_space source end_with? "]}," RuboCop Cop Layout SpaceAroundOperators excess_leading_space?":{"type":"method","name":"excess_leading_space?","children":[],"call":[" aligned_with_operator? ! "," aligned_with_operator? "," allow_for_alignment? ! "," allow_for_alignment? ","with_space source =~ ","with_space source ","with_space source start_with? "," aligned_with_subsequent_assignment != "," aligned_with_subsequent_assignment ","align_preceding == "," aligned_with_preceding_assignment ","Token  new ","operator source ","type == "," aligned_with_subsequent_assignment == "," aligned_with_preceding_assignment  == "]}," RuboCop Cop Layout SpaceAroundOperators offense_message":{"type":"method","name":"offense_message","children":[],"call":["op source "," excess_trailing_space? "," excess_leading_space? ","with_space source !~ ","with_space source ","with_space is? ","op is? ","operator source ","operator is? "," should_not_have_surrounding_space? ","(str \"^\\\\s.*\\\\s$\") match? ! ","(str \"^\\\\s.*\\\\s$\") match? "]}," RuboCop Cop Layout SpaceAroundOperators offense":{"type":"method","name":"offense","children":[],"call":[" offense_message "]}," RuboCop Cop Layout SpaceAroundOperators check_operator":{"type":"method","name":"check_operator","children":[],"call":[" add_offense "," offense ","with_space source start_with? ","with_space source "," range_with_surrounding_space "," autocorrect "," range_with_surrounding_space  source start_with? "," range_with_surrounding_space  source "]}," RuboCop Cop Layout SpaceAroundOperators operator_with_regular_syntax?":{"type":"method","name":"operator_with_regular_syntax?","children":[],"call":["IRREGULAR_METHODS  include? ! ","IRREGULAR_METHODS  include? ","send_node method_name ","send_node operator_method? "]}," RuboCop Cop Layout SpaceAroundOperators regular_operator?":{"type":"method","name":"regular_operator?","children":[],"call":[" operator_with_regular_syntax? ","send_node dot? ! ","send_node dot? ","send_node unary_operation? ! ","send_node unary_operation? ","send_node double_colon? "]}," RuboCop Cop Layout SpaceAroundOperators on_special_asgn":{"type":"method","name":"on_special_asgn","children":[],"call":[" check_operator ","right source_range ","node loc operator ","node loc "]}," RuboCop Cop Layout SpaceAroundOperators on_binary":{"type":"method","name":"on_binary","children":[],"call":[" check_operator ","rhs source_range ","node loc operator ","node loc "]}," RuboCop Cop Layout SpaceAroundOperators on_send":{"type":"method","name":"on_send","children":[],"call":[" check_operator ","node first_argument source_range ","node first_argument ","node loc selector ","node loc "," regular_operator? "," on_special_asgn ","node setter_method? "," rational_literal? "]}," RuboCop Cop Layout SpaceAroundOperators on_resbody":{"type":"method","name":"on_resbody","children":[],"call":[" check_operator ","variable source_range ","node loc assoc ","node loc "]}," RuboCop Cop Layout SpaceAroundOperators on_if":{"type":"method","name":"on_if","children":[],"call":[" check_operator ","node else_branch source_range ","node else_branch ","node loc colon ","node loc ","node if_branch source_range ","node if_branch ","node loc question ","node ternary? "]}," RuboCop Cop Layout SpaceAroundOperators on_pair":{"type":"method","name":"on_pair","children":[],"call":[" check_operator ","node source_range ","node loc operator ","node loc ","node parent pairs_on_same_line? ! ","node parent pairs_on_same_line? ","node parent "," hash_table_style? ","node hash_rocket? "]}," RuboCop Cop Layout SpaceAroundOperators autocorrect_incompatible_with":{"type":"method","name":"autocorrect_incompatible_with","children":[],"call":[]}," RuboCop Cop Layout SpaceAroundKeyword autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector insert_after ","  freeze "," lambda ","corrector insert_before "," space_before_missing? "]}," RuboCop Cop Layout SpaceAroundKeyword preceded_by_operator?":{"type":"method","name":"preceded_by_operator?","children":[],"call":[" operator? ","ancestor method_name ","ancestor send_type? ","ancestor or_type? ","ancestor and_type? ","node each_ancestor ","ancestor operator_method? ","ancestor range_type? "]}," RuboCop Cop Layout SpaceAroundKeyword safe_navigation_call?":{"type":"method","name":"safe_navigation_call?","children":[],"call":["range source_buffer source [] start_with? ","range source_buffer source [] ","range source_buffer source ","range source_buffer "]}," RuboCop Cop Layout SpaceAroundKeyword accept_left_square_bracket?":{"type":"method","name":"accept_left_square_bracket?","children":[],"call":["ACCEPT_LEFT_SQUARE_BRACKET  include? ","range source "]}," RuboCop Cop Layout SpaceAroundKeyword accept_left_parenthesis?":{"type":"method","name":"accept_left_parenthesis?","children":[],"call":["ACCEPT_LEFT_PAREN  include? ","range source "]}," RuboCop Cop Layout SpaceAroundKeyword space_after_missing?":{"type":"method","name":"space_after_missing?","children":[],"call":["char !~ "," safe_navigation_call? ","char == ","[ freeze "," accept_left_square_bracket? ","( freeze "," accept_left_parenthesis? ","range source_buffer source [] ","range source_buffer source ","range source_buffer ","range end_pos "," accepted_opening_delimiter? "," namespace_operator? "," accept_namespace_operator? ","(str \"[\\\\s;,#\\\\\\\\)}\\\\].]\") match? ! ","(str \"[\\\\s;,#\\\\\\\\)}\\\\].]\") match? ","range source_buffer source []  !~ ","range source_buffer source []  == ","range end_range end_pos  "]}," RuboCop Cop Layout SpaceAroundKeyword space_before_missing?":{"type":"method","name":"space_before_missing?","children":[],"call":["range source_buffer source [] !~ ","range source_buffer source [] ","range source_buffer source ","range source_buffer ","pos < ","range begin_pos - ","range begin_pos ","pos negative? ","(str \"[\\\\s(|{\\\\[;,*=]\") match? ! ","(str \"[\\\\s(|{\\\\[;,*=]\") match? ","range begin_pos -  < ","range begin_range begin_pos -  - ","range begin_range begin_pos -  ","range begin_pos -  negative? "]}," RuboCop Cop Layout SpaceAroundKeyword offense":{"type":"method","name":"offense","children":[],"call":[" add_offense ","msg % ","range source "," format "]}," RuboCop Cop Layout SpaceAroundKeyword check_keyword":{"type":"method","name":"check_keyword","children":[],"call":[" offense "," space_after_missing? "," preceded_by_operator? ! "," preceded_by_operator? "," space_before_missing? ","corrector insert_after "," add_offense "," format ","range source ","corrector insert_before "]}," RuboCop Cop Layout SpaceAroundKeyword do?":{"type":"method","name":"do?","children":[],"call":["node loc begin is? ","node loc begin ","node loc "]}," RuboCop Cop Layout SpaceAroundKeyword check_end":{"type":"method","name":"check_end","children":[],"call":[" offense "," space_before_missing? "," do? ! "," do? ","begin_keyword == ","corrector insert_before "," add_offense "," format ","range source "]}," RuboCop Cop Layout SpaceAroundKeyword check_begin":{"type":"method","name":"check_begin","children":[],"call":[" check_keyword ","range is? ! ","range is? "]}," RuboCop Cop Layout SpaceAroundKeyword check":{"type":"method","name":"check","children":[],"call":[" check_keyword "," check_end "," check_begin ","node loc public_send ","node loc ","node loc respond_to? ","locations each "]}," RuboCop Cop Layout SpaceAroundKeyword on_defined?":{"type":"method","name":"on_defined?","children":[],"call":[" check ","(sym :keyword) freeze "]}," RuboCop Cop Layout SpaceAroundKeyword on_yield":{"type":"method","name":"on_yield","children":[],"call":[" check ","(sym :keyword) freeze "]}," RuboCop Cop Layout SpaceAroundKeyword on_while":{"type":"method","name":"on_while","children":[],"call":[" check ","(sym :begin) freeze "]}," RuboCop Cop Layout SpaceAroundKeyword on_when":{"type":"method","name":"on_when","children":[],"call":[" check ","(sym :keyword) freeze "]}," RuboCop Cop Layout SpaceAroundKeyword on_until":{"type":"method","name":"on_until","children":[],"call":[" check ","(sym :begin) freeze "]}," RuboCop Cop Layout SpaceAroundKeyword on_zsuper":{"type":"method","name":"on_zsuper","children":[],"call":[" check ","(sym :keyword) freeze "]}," RuboCop Cop Layout SpaceAroundKeyword on_super":{"type":"method","name":"on_super","children":[],"call":[" check ","(sym :keyword) freeze "]}," RuboCop Cop Layout SpaceAroundKeyword on_send":{"type":"method","name":"on_send","children":[],"call":[" check ","(sym :selector) freeze ","node keyword_not? ","node prefix_not? "]}," RuboCop Cop Layout SpaceAroundKeyword on_return":{"type":"method","name":"on_return","children":[],"call":[" check ","(sym :keyword) freeze "]}," RuboCop Cop Layout SpaceAroundKeyword on_rescue":{"type":"method","name":"on_rescue","children":[],"call":[" check ","(sym :else) freeze "]}," RuboCop Cop Layout SpaceAroundKeyword on_resbody":{"type":"method","name":"on_resbody","children":[],"call":[" check ","(sym :keyword) freeze "]}," RuboCop Cop Layout SpaceAroundKeyword on_preexe":{"type":"method","name":"on_preexe","children":[],"call":[" check ","(sym :keyword) freeze "]}," RuboCop Cop Layout SpaceAroundKeyword on_postexe":{"type":"method","name":"on_postexe","children":[],"call":[" check ","(sym :keyword) freeze "]}," RuboCop Cop Layout SpaceAroundKeyword on_or":{"type":"method","name":"on_or","children":[],"call":[" check ","(sym :operator) freeze ","node keyword? "]}," RuboCop Cop Layout SpaceAroundKeyword on_next":{"type":"method","name":"on_next","children":[],"call":[" check ","(sym :keyword) freeze "]}," RuboCop Cop Layout SpaceAroundKeyword on_kwbegin":{"type":"method","name":"on_kwbegin","children":[],"call":[" check ","(sym :begin) freeze "]}," RuboCop Cop Layout SpaceAroundKeyword on_if":{"type":"method","name":"on_if","children":[],"call":[" check ","then freeze ","(sym :keyword) freeze "]}," RuboCop Cop Layout SpaceAroundKeyword on_for":{"type":"method","name":"on_for","children":[],"call":[" check ","(sym :begin) freeze "]}," RuboCop Cop Layout SpaceAroundKeyword on_ensure":{"type":"method","name":"on_ensure","children":[],"call":[" check ","(sym :keyword) freeze "]}," RuboCop Cop Layout SpaceAroundKeyword on_case":{"type":"method","name":"on_case","children":[],"call":[" check ","(sym :keyword) freeze "]}," RuboCop Cop Layout SpaceAroundKeyword on_break":{"type":"method","name":"on_break","children":[],"call":[" check ","(sym :keyword) freeze "]}," RuboCop Cop Layout SpaceAroundKeyword on_block":{"type":"method","name":"on_block","children":[],"call":[" check ","(sym :begin) freeze "]}," RuboCop Cop Layout SpaceAroundKeyword on_and":{"type":"method","name":"on_and","children":[],"call":[" check ","(sym :operator) freeze ","node keyword? "]}," RuboCop Cop Layout SpaceAroundEqualsInParameterDefault autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","replacement + "," lambda "," style == "," style ","m captures [] ","m captures ","range source match ","range source ","replacerange source match ent + "," larange source match bda ","range source match  captures [] ","range source match  captures ","range source range source match atch "]}," RuboCop Cop Layout SpaceAroundEqualsInParameterDefault message":{"type":"method","name":"message","children":[],"call":[" format "," style == "," style "]}," RuboCop Cop Layout SpaceAroundEqualsInParameterDefault no_surrounding_space?":{"type":"method","name":"no_surrounding_space?","children":[],"call":[" space_between? ! "," space_between? ","equals space_after? ! ","equals space_after? ","arg space_after? ! ","arg space_after? "]}," RuboCop Cop Layout SpaceAroundEqualsInParameterDefault space_on_both_sides?":{"type":"method","name":"space_on_both_sides?","children":[],"call":[" space_between? ","equals space_after? ","arg space_after? "]}," RuboCop Cop Layout SpaceAroundEqualsInParameterDefault incorrect_style_detected":{"type":"method","name":"incorrect_style_detected","children":[],"call":[" unrecognized_style_detected "," opposite_style_detected "," style == "," style "," add_offense "," range_between ","value pos begin_pos ","value pos ","arg pos end_pos ","arg pos ","value begin_pos ","arg end_pos "," autocorrect ","  range_between _between "]}," RuboCop Cop Layout SpaceAroundEqualsInParameterDefault check_optarg":{"type":"method","name":"check_optarg","children":[],"call":[" incorrect_style_detected "," correct_style_detected "," style == "," style "," no_surrounding_space? "," space_on_both_sides? ","  no_surrounding_space? ? ","  space_on_both_sides? ? "]}," RuboCop Cop Layout SpaceAroundEqualsInParameterDefault on_optarg":{"type":"method","name":"on_optarg","children":[],"call":[" check_optarg "," processed_source tokens [] "," processed_source tokens "," processed_source "," index_of_first_token ","tokens take "," processed_source tokens_within "," processed_source  processed_source tokens_within  [] "," processed_source  processed_source tokens_within  ","  index_of_first_token _of_first_token "," processed_source tokens_within  take "," processed_source  processed_source tokens_within _within "]}," RuboCop Cop Layout SpaceAroundBlockParameters autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector insert_after ","corrector remove ","range source "," lambda ","target source =~ ","target source ","target source_range ","corrector insert_before ","target parent children first == ","target parent children first ","target parent children ","target parent ","target is_a? ","(str \"^\\\\s+$\") match? "]}," RuboCop Cop Layout SpaceAroundBlockParameters check_no_space":{"type":"method","name":"check_no_space","children":[],"call":[" add_offense "," range_between ","space_begin_pos >= ","range source include? ","range source ","corrector remove ","  range_between _between "," range_between  source include? "," range_between  source "]}," RuboCop Cop Layout SpaceAroundBlockParameters check_space":{"type":"method","name":"check_space","children":[],"call":[" add_offense ","space_begin_pos != ","corrector insert_after ","corrector insert_before "]}," RuboCop Cop Layout SpaceAroundBlockParameters check_each_arg":{"type":"method","name":"check_each_arg","children":[],"call":[" check_no_space ","expr begin_pos - ","expr begin_pos "," range_with_surrounding_space begin_pos "," range_with_surrounding_space ","arg source_range ","args children butfirst each ","args children butfirst ","args children "," check_arg ","args children each ","arg source_range  begin_pos - ","arg source_range  begin_pos "]}," RuboCop Cop Layout SpaceAroundBlockParameters last_end_pos_inside_pipes":{"type":"method","name":"last_end_pos_inside_pipes","children":[],"call":["pos + "," processed_source buffer source [] == "," processed_source buffer source [] "," processed_source buffer source "," processed_source buffer "," processed_source ","range source_buffer source [] == ","range source_buffer source [] ","range source_buffer source ","range source_buffer ","range end_pos ","pos + + ","arguments source [] index ","arguments source [] ","arguments source ","pos - ","arguments source_range begin_pos ","arguments source_range ","range end_pos  + ","range end_range end_pos  ","range end_pos  + + ","range end_pos  - ","arguments source_range begin_range end_pos  "]}," RuboCop Cop Layout SpaceAroundBlockParameters check_space_style_inside_pipes":{"type":"method","name":"check_space_style_inside_pipes","children":[],"call":[" check_no_space ","closing_pipe begin_pos ","last_end_pos + ","first begin_pos - ","first begin_pos ","opening_pipe end_pos "," check_space "," last_end_pos_inside_pipes ","last end_pos ","args last source_range ","args last ","args first source_range ","args first "," check_closing_pipe_space "," check_opening_pipe_space "," pipes "," last_end_pos_inside_pipes  + ","args last source_range _end_pos + ","args first source_range  begin_pos - ","args first source_range  begin_pos ","  last_end_pos_inside_pipes _inside_pipes "," args last source_range _end_pos_inside_pipes ","args last source_range  end_pos ","args args last source_range  source_range ","args args last source_range  ","args args first source_range  source_range ","args args first source_range  "]}," RuboCop Cop Layout SpaceAroundBlockParameters check_no_space_style_inside_pipes":{"type":"method","name":"check_no_space_style_inside_pipes","children":[],"call":[" check_no_space ","closing_pipe begin_pos "," last_end_pos_inside_pipes ","last end_pos ","first begin_pos ","opening_pipe end_pos ","args last source_range ","args last ","args first source_range ","args first "," pipes ","arguments children "," args last source_range _end_pos_inside_pipes ","args last source_range  end_pos ","args first source_range  begin_pos ","args args last source_range  source_range ","arguments children  last source_range ","args args last source_range  ","arguments children  last ","args args first source_range  source_range ","arguments children  first source_range ","args args first source_range  ","arguments children  first "]}," RuboCop Cop Layout SpaceAroundBlockParameters check_inside_pipes":{"type":"method","name":"check_inside_pipes","children":[],"call":[" check_space_style_inside_pipes "," style == "," style "," check_no_space_style_inside_pipes ","arguments children "," pipes "]}," RuboCop Cop Layout SpaceAroundBlockParameters style_parameter_name":{"type":"method","name":"style_parameter_name","children":[],"call":[]}," RuboCop Cop Layout SpaceAroundBlockParameters on_block":{"type":"method","name":"on_block","children":[],"call":[" check_each_arg "," check_space ","node body source_range begin_pos ","node body source_range ","node body ","closing_pipe end_pos "," check_inside_pipes ","args children ","args loc end ","args loc ","args loc begin ","node arguments ","node arguments? ","closing_pipe nil? ","opening_pipe nil? "," check_after_closing_pipe "," pipes? ","args loc end  end_pos ","node arguments  children ","node arguments  loc end ","node arguments  loc ","node arguments  loc begin ","node node arguments  ","node node arguments ? ","args loc end  nil? ","args loc begin  nil? "," check_after_args loc end  "]}," RuboCop Cop Layout SpaceAfterSemicolon kind":{"type":"method","name":"kind","children":[],"call":["token type == ","token type ","token semicolon? "]}," RuboCop Cop Layout SpaceAfterSemicolon space_style_before_rcurly":{"type":"method","name":"space_style_before_rcurly","children":[],"call":["cfg [] "," config for_cop "," config "," config for_cop  [] "]}," RuboCop Cop Layout SpaceAfterNot autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove "," range_between ","node receiver source_range begin_pos ","node receiver source_range ","node receiver ","node loc selector end_pos ","node loc selector ","node loc "," lambda "]}," RuboCop Cop Layout SpaceAfterNot whitespace_after_operator?":{"type":"method","name":"whitespace_after_operator?","children":[],"call":["node receiver loc column - > ","node receiver loc column - ","node loc column ","node loc ","node receiver loc column ","node receiver loc ","node receiver ","node receiver source_range begin_pos - > ","node receiver source_range begin_pos - ","node source_range begin_pos ","node source_range ","node receiver source_range begin_pos ","node receiver source_range "]}," RuboCop Cop Layout SpaceAfterNot on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," whitespace_after_operator? ","node keyword_bang? ","node prefix_bang? ","corrector remove "," range_between ","node receiver source_range begin_pos ","node receiver source_range ","node receiver ","node loc selector end_pos ","node loc selector ","node loc "]}," RuboCop Cop Layout SpaceAfterMethodName autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove "," lambda "]}," RuboCop Cop Layout SpaceAfterMethodName on_method_def":{"type":"method","name":"on_method_def","children":[],"call":[" add_offense ","pos_before_left_paren source =~ ","pos_before_left_paren source "," range_between ","expr begin_pos ","expr begin_pos - ","args source_range ","args loc begin is? ","args loc begin ","args loc "," range_between  source =~ "," range_between  source ","args source_range  begin_pos ","args source_range  begin_pos - "]}," RuboCop Cop Layout SpaceAfterComma kind":{"type":"method","name":"kind","children":[],"call":["token type == ","token type ","token comma? "," before_semicolon? ! "," before_semicolon? "]}," RuboCop Cop Layout SpaceAfterComma space_style_before_rcurly":{"type":"method","name":"space_style_before_rcurly","children":[],"call":["cfg [] "," config for_cop "," config "," config for_cop  [] "]}," RuboCop Cop Layout SpaceAfterColon autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector insert_after "," lambda "]}," RuboCop Cop Layout SpaceAfterColon followed_by_space?":{"type":"method","name":"followed_by_space?","children":[],"call":["colon source_buffer source [] =~ ","colon source_buffer source [] ","colon end_pos ","colon source_buffer source ","colon source_buffer ","(str \"\\\\s\") match? "]}," RuboCop Cop Layout SpaceAfterColon on_kwoptarg":{"type":"method","name":"on_kwoptarg","children":[],"call":[" add_offense "," followed_by_space? ","node loc name end resize ","node loc name end ","node loc name ","node loc "," register_offense "]}," RuboCop Cop Layout SpaceAfterColon on_pair":{"type":"method","name":"on_pair","children":[],"call":[" add_offense "," followed_by_space? ","node loc operator ","node loc ","node colon? "," register_offense ","node value_omission? ","node colon? ! ","node node loc operator ? ","node node loc operator ? ! "]}," RuboCop Cop Layout RescueEnsureAlignment ancestor_node":{"type":"method","name":"ancestor_node","children":[],"call":["node each_ancestor first ","node each_ancestor ","types << "," target_ruby_version >= "," target_ruby_version "]}," RuboCop Cop Layout RescueEnsureAlignment whitespace_range":{"type":"method","name":"whitespace_range","children":[],"call":[" range_between ","begin_pos - ","node loc keyword column ","node loc keyword ","node loc ","node loc keyword begin_pos ","node loc keyword begin_pos  - ","node loc keyword node loc keyword begin_pos  "]}," RuboCop Cop Layout RescueEnsureAlignment modifier?":{"type":"method","name":"modifier?","children":[],"call":["@modifier_locations include? ","node loc keyword ","node loc ","@modifier_locations respond_to? "]}," RuboCop Cop Layout RescueEnsureAlignment format_message":{"type":"method","name":"format_message","children":[],"call":[" format ","end_loc column ","end_loc line ","kw_loc column ","kw_loc line ","kw_loc source ","alignment_loc column ","alignment_loc line "," alignment_source "]}," RuboCop Cop Layout RescueEnsureAlignment check":{"type":"method","name":"check","children":[],"call":[" add_offense "," format_message ","end_loc line == ","kw_loc line ","end_loc line ","end_loc column == ","kw_loc column ","end_loc column ","node loc keyword ","node loc "," ancestor_node loc end "," ancestor_node loc "," ancestor_node ","alignment_loc line == ","alignment_loc line ","alignment_loc column == ","alignment_loc column ","ancestor_node loc expression ","ancestor_node loc ","alignment_node loc expression ","alignment_node loc ","alignment_node nil? "," alignment_node "," autocorrect "," alignment_location "," same_line? "," ancestor_node loc end  line == ","node loc keyword  line "," ancestor_node loc end  line "," ancestor_node loc end  column == ","node loc keyword  column "," ancestor_node loc end  column ","  ancestor_node  loc end ","  ancestor_node  loc ","  ancestor_node  ","ancestor_node loc expression  line == ","alignment_node loc expression  line == "," alignment_location  line == ","ancestor_node loc expression  line ","alignment_node loc expression  line "," alignment_location  line ","ancestor_node loc expression  column == ","alignment_node loc expression  column == "," alignment_location  column == ","ancestor_node loc expression  column ","alignment_node loc expression  column "," alignment_location  column "," ancestor_node  loc expression "," ancestor_node  loc "," alignment_node  loc expression "," alignment_node  loc "," alignment_node  nil? ","  alignment_node  "," ancestor_node loc expression ation "," alignment_node loc expression ation ","  alignment_location ation "]}," RuboCop Cop Layout RescueEnsureAlignment autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","  * "," lambda "," ancestor_node loc end column "," ancestor_node loc end "," ancestor_node loc "," ancestor_node ","whitespace source strip empty? ","whitespace source strip ","whitespace source "," whitespace_range ","alignment_node loc column ","alignment_node loc ","alignment_node nil? "," alignment_node ","alignment_location column "," whitespace_range  source strip empty? "," whitespace_range  source strip "," whitespace_range  source ","  whitespace_range _range "," alignment_node  loc column "," alignment_node  loc "," alignment_node  nil? ","  alignment_node  "]}," RuboCop Cop Layout RescueEnsureAlignment investigate":{"type":"method","name":"investigate","children":[],"call":["locations << ","token pos ","token type == ","token type ","processed_source tokens each_with_object ","processed_source tokens ","token rescue_modifier? "]}," RuboCop Cop Layout RescueEnsureAlignment on_ensure":{"type":"method","name":"on_ensure","children":[],"call":[" check "]}," RuboCop Cop Layout RescueEnsureAlignment on_resbody":{"type":"method","name":"on_resbody","children":[],"call":[" check "," modifier? "]}," RuboCop Cop Layout MultilineOperationIndentation message":{"type":"method","name":"message","children":[],"call":[" correct_indentation ","rhs column - "," indentation ","rhs column "," should_align? "," style "," operation_description "]}," RuboCop Cop Layout MultilineOperationIndentation should_align?":{"type":"method","name":"should_align?","children":[],"call":[" argument_in_method_call "," kw_node_with_special_indentation ","given_style == "," begins_its_line? ","assignment_rhs source_range ","CheckAssignment  extract_rhs "," part_of_assignment_rhs ","CheckAssignment  extract_rhs  source_range "," part_of_CheckAssignment  extract_rhs  "]}," RuboCop Cop Layout MultilineOperationIndentation offending_range":{"type":"method","name":"offending_range","children":[],"call":["@column_delta nonzero? ","correct_column - ","rhs column "," indentation + "," correct_indentation "," indentation ","node loc column ","node loc "," should_align? "," not_for_this_cop? ","lhs loc line == ","rhs line ","lhs loc line ","lhs loc "," begins_its_line? ","lhs first_line == ","lhs first_line ","correct_column -  nonzero? "," indentation +  - ","node loc column  - "]}," RuboCop Cop Layout MultilineOperationIndentation check_and_or":{"type":"method","name":"check_and_or","children":[],"call":[" check ","rhs source_range "," offending_range "," style ","rhs source_ offending_range  "," offending_ offending_range  "]}," RuboCop Cop Layout MultilineOperationIndentation relevant_node?":{"type":"method","name":"relevant_node?","children":[],"call":["node loc dot ! ","node loc dot ","node loc ","node unary_operation? ","node send_type? "]}," RuboCop Cop Layout MultilineOperationIndentation validate_config":{"type":"method","name":"validate_config","children":[],"call":[" raise "," cop_config [] "," cop_config "," style == "," style "]}," RuboCop Cop Layout MultilineOperationIndentation on_or":{"type":"method","name":"on_or","children":[],"call":[" check_and_or "]}," RuboCop Cop Layout MultilineOperationIndentation on_and":{"type":"method","name":"on_and","children":[],"call":[" check_and_or "]}," RuboCop Cop Layout MultilineMethodDefinitionBraceLayout on_method_def":{"type":"method","name":"on_method_def","children":[],"call":[" check_brace_layout "]}," RuboCop Cop Layout MultilineMethodCallIndentation operation_rhs":{"type":"method","name":"operation_rhs","children":[],"call":[" within_node? "," operator? ","receiver each_ancestor ","operation_rhs first_argument "," operator_rhs? ","receiver each_ancestor find ","node receiver ","node receiver each_ancestor find ","node receiver each_ancestor "]}," RuboCop Cop Layout MultilineMethodCallIndentation semantic_alignment_node":{"type":"method","name":"semantic_alignment_node","children":[],"call":["node loc dot line != ","node loc line ","node loc ","node loc dot line ","node loc dot ","node parent ","node receiver "," argument_in_method_call ","node first_line ","node loc respond_to? "," first_call_has_a_dot "," get_dot_right_above ","node parent  loc dot line != ","node receiver  loc dot line != "," first_call_has_a_dot  loc dot line != ","node parent  loc line ","node receiver  loc line "," first_call_has_a_dot  loc line ","node parent  loc ","node receiver  loc "," first_call_has_a_dot  loc ","node parent  loc dot line ","node receiver  loc dot line "," first_call_has_a_dot  loc dot line ","node parent  loc dot ","node receiver  loc dot "," first_call_has_a_dot  loc dot ","node parent  parent ","node receiver  parent "," first_call_has_a_dot  parent ","node parent  receiver ","node receiver  receiver "," first_call_has_a_dot  receiver ","node parent  first_line ","node receiver  first_line "," first_call_has_a_dot  first_line ","node parent  loc respond_to? ","node receiver  loc respond_to? "," first_call_has_a_dot  loc respond_to? "," get_ get_dot_right_above  "]}," RuboCop Cop Layout MultilineMethodCallIndentation receiver_alignment_base":{"type":"method","name":"receiver_alignment_base","children":[],"call":["node receiver source_range ","node receiver ","node parent ","node loc dot ","node loc ","node parent  receiver source_range ","node receiver  receiver source_range ","node parent  receiver ","node receiver  receiver ","node parent  parent ","node receiver  parent ","node parent  loc dot ","node receiver  loc dot ","node parent  loc ","node receiver  loc "]}," RuboCop Cop Layout MultilineMethodCallIndentation semantic_alignment_base":{"type":"method","name":"semantic_alignment_base","children":[],"call":["node loc dot join ","node loc selector ","node loc ","node loc dot "," semantic_alignment_node ","rhs source start_with? ","rhs source "," semantic_alignment_node  loc dot join "," semantic_alignment_node  loc selector "," semantic_alignment_node  loc "," semantic_alignment_node  loc dot "," semantic_alignment_ semantic_alignment_node  "]}," RuboCop Cop Layout MultilineMethodCallIndentation syntactic_alignment_base":{"type":"method","name":"syntactic_alignment_base","children":[],"call":["n source_range "," operation_rhs "," assignment_rhs source_range "," assignment_rhs "," part_of_assignment_rhs ","expression source_range ","n type "," kw_node_with_special_indentation ","base source_range "," indented_keyword_expression source_range "," indented_keyword_expression "," operation_rhs  source_ra operation_rhs ge "," part_of_assignment_rhs  source_ra part_of_assignment_rhs ge "," kw_node_with_special_indentation  source_ra kw_node_with_special_indentation ge "," operatio operation_rhs _rhs "," operatio part_of_assignment_rhs _rhs "," operatio kw_node_with_special_indentation _rhs "," assig operation_rhs me operation_rhs t_rhs source_ra operation_rhs ge "," assig part_of_assignment_rhs me part_of_assignment_rhs t_rhs source_ra part_of_assignment_rhs ge "," assig kw_node_with_special_indentation me kw_node_with_special_indentation t_rhs source_ra kw_node_with_special_indentation ge "," assig operation_rhs me operation_rhs t_rhs "," assig part_of_assignment_rhs me part_of_assignment_rhs t_rhs "," assig kw_node_with_special_indentation me kw_node_with_special_indentation t_rhs "," part_of_assig operation_rhs me operation_rhs t_rhs "," part_of_assig part_of_assignment_rhs me part_of_assignment_rhs t_rhs "," part_of_assig kw_node_with_special_indentation me kw_node_with_special_indentation t_rhs ","expressio operation_rhs  source_ra operation_rhs ge ","expressio part_of_assignment_rhs  source_ra part_of_assignment_rhs ge ","expressio kw_node_with_special_indentation  source_ra kw_node_with_special_indentation ge "," operation_rhs  type "," part_of_assignment_rhs  type "," kw_node_with_special_indentation  type "," kw_ operation_rhs ode_with_special_i operation_rhs de operation_rhs tatio operation_rhs  "," kw_ part_of_assignment_rhs ode_with_special_i part_of_assignment_rhs de part_of_assignment_rhs tatio part_of_assignment_rhs  "," kw_ kw_node_with_special_indentation ode_with_special_i kw_node_with_special_indentation de kw_node_with_special_indentation tatio kw_node_with_special_indentation  ","base source_ra operation_rhs ge ","base source_ra part_of_assignment_rhs ge ","base source_ra kw_node_with_special_indentation ge "," i operation_rhs de operation_rhs ted_keyword_expressio operation_rhs  source_ra operation_rhs ge "," i part_of_assignment_rhs de part_of_assignment_rhs ted_keyword_expressio part_of_assignment_rhs  source_ra part_of_assignment_rhs ge "," i kw_node_with_special_indentation de kw_node_with_special_indentation ted_keyword_expressio kw_node_with_special_indentation  source_ra kw_node_with_special_indentation ge "," i operation_rhs de operation_rhs ted_keyword_expressio operation_rhs  "," i part_of_assignment_rhs de part_of_assignment_rhs ted_keyword_expressio part_of_assignment_rhs  "," i kw_node_with_special_indentation de kw_node_with_special_indentation ted_keyword_expressio kw_node_with_special_indentation  "]}," RuboCop Cop Layout MultilineMethodCallIndentation alignment_base":{"type":"method","name":"alignment_base","children":[],"call":[" receiver_alignment_base "," syntactic_alignment_base "," semantic_alignment_base "]}," RuboCop Cop Layout MultilineMethodCallIndentation no_base_message":{"type":"method","name":"no_base_message","children":[],"call":[" correct_indentation "," operation_description ","rhs column - "," indentation ","rhs column "]}," RuboCop Cop Layout MultilineMethodCallIndentation base_source":{"type":"method","name":"base_source","children":[],"call":["@base source [] ","@base source "]}," RuboCop Cop Layout MultilineMethodCallIndentation align_with_base_message":{"type":"method","name":"align_with_base_message","children":[],"call":["@base line "," base_source ","rhs source "]}," RuboCop Cop Layout MultilineMethodCallIndentation relative_to_receiver_message":{"type":"method","name":"relative_to_receiver_message","children":[],"call":["@base line "," base_source "," configured_indentation_width ","rhs source "]}," RuboCop Cop Layout MultilineMethodCallIndentation should_align_with_base?":{"type":"method","name":"should_align_with_base?","children":[],"call":[" style != "," style "]}," RuboCop Cop Layout MultilineMethodCallIndentation should_indent_relative_to_receiver?":{"type":"method","name":"should_indent_relative_to_receiver?","children":[],"call":[" style == "," style "]}," RuboCop Cop Layout MultilineMethodCallIndentation message":{"type":"method","name":"message","children":[],"call":[" no_base_message "," align_with_base_message "," should_align_with_base? "," relative_to_receiver_message "," should_indent_relative_to_receiver? "]}," RuboCop Cop Layout MultilineMethodCallIndentation extra_indentation":{"type":"method","name":"extra_indentation","children":[],"call":[" configured_indentation_width ","given_style == "," configured_indentation_width - ","parent loc operator length ","parent loc operator ","parent loc ","parent kwsplat_type? ","parent splat_type? "]}," RuboCop Cop Layout MultilineMethodCallIndentation offending_range":{"type":"method","name":"offending_range","children":[],"call":["@column_delta nonzero? ","correct_column - ","rhs column "," indentation + "," correct_indentation "," indentation ","@base column + "," extra_indentation ","@base column "," alignment_base "," not_for_this_cop? "," begins_its_line? ","node parent ","correct_column -  nonzero? "," indentation +  - ","@base column +  - "," alignment_base  column + "," alignment_base  column "]}," RuboCop Cop Layout MultilineMethodCallIndentation relevant_node?":{"type":"method","name":"relevant_node?","children":[],"call":["send_node loc dot ","send_node loc "]}," RuboCop Cop Layout MultilineMethodCallIndentation validate_config":{"type":"method","name":"validate_config","children":[],"call":[" raise "," cop_config [] "," cop_config "," style == "," style "]}," RuboCop Cop Layout MultilineMethodCallBraceLayout single_line_ignoring_receiver?":{"type":"method","name":"single_line_ignoring_receiver?","children":[],"call":["node loc begin line == ","node loc end line ","node loc end ","node loc ","node loc begin line ","node loc begin "]}," RuboCop Cop Layout MultilineMethodCallBraceLayout ignored_literal?":{"type":"method","name":"ignored_literal?","children":[],"call":[" single_line_ignoring_receiver? "]}," RuboCop Cop Layout MultilineMethodCallBraceLayout children":{"type":"method","name":"children","children":[],"call":["node arguments "]}," RuboCop Cop Layout MultilineMethodCallBraceLayout on_send":{"type":"method","name":"on_send","children":[],"call":[" check_brace_layout "]}," RuboCop Cop Layout MultilineHashBraceLayout on_hash":{"type":"method","name":"on_hash","children":[],"call":[" check_brace_layout "]}," RuboCop Cop Layout MultilineHashBraceLayout autocorrect_incompatible_with":{"type":"method","name":"autocorrect_incompatible_with","children":[],"call":[]}," RuboCop Cop Layout MultilineBlockLayout block_arg_string":{"type":"method","name":"block_arg_string","children":[],"call":["(send\n  (send\n    (lvar :args) :children) :map) join ","arg source "," block_arg_string ","arg mlhs_type? ","args children map ","args children "," include_trailing_comma? ","node arguments "," block_(send\n  (send\n    (lvar :args) :children) :map) join  "]}," RuboCop Cop Layout MultilineBlockLayout autocorrect_body":{"type":"method","name":"autocorrect_body","children":[],"call":["corrector insert_before ","  * ","first_node source_range ","node source_range column ","node source_range ","block_body children first ","block_body children ","block_body begin_type? ","block_body source start_with? ! ","block_body source start_with? ","block_body source ","block_body children first  source_range "]}," RuboCop Cop Layout MultilineBlockLayout autocorrect_arguments":{"type":"method","name":"autocorrect_arguments","children":[],"call":["corrector replace "," block_arg_string ","node arguments "," range_between ","node loc begin end begin_pos ","node loc begin end ","node loc begin ","node loc "," range_with_surrounding_space end_pos "," range_with_surrounding_space ","node arguments source_range ","  range_between _between ","  range_between _with_surrounding_space end_pos "," range_with_surrounding_space  range_with_surrounding_space end_pos  ","  range_between _with_surrounding_space ","node arguments source_ range_between  "]}," RuboCop Cop Layout MultilineBlockLayout autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" autocorrect_body ","node body ","expr_before_body line == ","node body loc line ","node body loc ","expr_before_body line ","node loc begin ","node loc ","node arguments source_range end ","node arguments source_range ","node arguments "," autocorrect_arguments "," args_on_beginning_line? "," lambda ","node body first_line "," same_line? ","node arguments source_range end  line == ","node arguments source_range end  line "]}," RuboCop Cop Layout MultilineBlockLayout add_offense_for_expression":{"type":"method","name":"add_offense_for_expression","children":[],"call":[" add_offense "," range_between ","expression end_pos ","expression begin_pos ","expr source_range "," autocorrect ","  range_between _between ","expr source_range  end_pos ","expr source_range  begin_pos ","expr source_ range_between  "]}," RuboCop Cop Layout MultilineBlockLayout args_on_beginning_line?":{"type":"method","name":"args_on_beginning_line?","children":[],"call":["node loc begin line == ","node arguments loc last_line ","node arguments loc ","node arguments ","node loc begin line ","node loc begin ","node loc ","node arguments? ! ","node arguments? "]}," RuboCop Cop Layout MultilineBlockLayout on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense_for_expression ","node body ","node loc begin line == ","node body loc line ","node body loc ","node loc begin line ","node loc begin ","node loc ","node arguments "," args_on_beginning_line? ","node single_line? ","node body first_line "," line_break_necessary_in_args? "," same_line? "]}," RuboCop Cop Layout MultilineAssignmentLayout supported_types":{"type":"method","name":"supported_types","children":[],"call":[" cop_config [] map "," cop_config [] "," cop_config "]}," RuboCop Cop Layout MultilineAssignmentLayout autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," lambda "," range_between "," extract_rhs source_range begin_pos "," extract_rhs source_range "," extract_rhs ","node loc operator end_pos ","node loc operator ","node loc ","corrector insert_after "," style ","  range_between _between "," extract_rhs source_ range_between  begin_pos "," extract_rhs source_ range_between  "]}," RuboCop Cop Layout MultilineAssignmentLayout check_same_line_offense":{"type":"method","name":"check_same_line_offense","children":[],"call":[" add_offense ","node loc operator line != ","rhs loc line ","rhs loc ","node loc operator line ","node loc operator ","node loc ","rhs first_line ","corrector replace "," range_between "," extract_rhs source_range begin_pos "," extract_rhs source_range "," extract_rhs ","node loc operator end_pos ","  range_between _between "," extract_rhs source_ range_between  begin_pos "," extract_rhs source_ range_between  "]}," RuboCop Cop Layout MultilineAssignmentLayout check_new_line_offense":{"type":"method","name":"check_new_line_offense","children":[],"call":[" add_offense ","node loc operator line == ","rhs loc line ","rhs loc ","node loc operator line ","node loc operator ","node loc ","rhs first_line ","corrector insert_after "," same_line? "]}," RuboCop Cop Layout MultilineAssignmentLayout check_assignment":{"type":"method","name":"check_assignment","children":[],"call":[" check_same_line_offense "," check_new_line_offense "," style ","rhs loc first_line == ","rhs loc last_line ","rhs loc ","rhs loc first_line "," supported_types include? ","rhs type "," supported_types ","rhs first_line == ","rhs last_line ","rhs first_line "," check_by_enforced_style ","node send_type? ","(send\n  (send\n    (lvar :node) :loc) :operator) != ","node loc operator ","node loc ","rhs single_line? "]}," RuboCop Cop Layout MultilineArrayBraceLayout on_array":{"type":"method","name":"on_array","children":[],"call":[" check_brace_layout "]}," RuboCop Cop Layout LeadingCommentSpace config_ru?":{"type":"method","name":"config_ru?","children":[],"call":["File  basename eql? ","File  basename "]}," RuboCop Cop Layout LeadingCommentSpace autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector insert_after "," lambda "," range_between ","b + ","expr begin_pos ","comment loc expression ","comment loc ","expr begin_pos + "," lamexpr begin_pos da "," range_expr begin_pos etween ","expr begin_pos  + ","expr expr begin_pos egin_pos ","comment loc expression  begin_pos ","comment loc comment loc expression ession ","expr expr begin_pos egin_pos + ","comment loc expression  begin_pos + "]}," RuboCop Cop Layout LeadingCommentSpace investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense "," config_ru? ","processed_source buffer name ","processed_source buffer ","comment loc line == ","comment loc line ","comment loc ","comment text start_with? ","comment text ","comment text =~ ","processed_source comments each ","processed_source comments "," allowed_on_first_line? ","processed_source each_comment "," doxygen_comment_style? "," allow_doxygen_comment? "," gemfile_ruby_comment? ","(str \"\\\\A#+[^#\\\\s=:+-]\") match? "]}," RuboCop Cop Layout InitialIndentation space_before":{"type":"method","name":"space_before","children":[],"call":[" range_between ","token pos begin_pos ","token pos ","token_with_space begin_pos ","token_with_space == "," range_with_surrounding_space ","token pos column zero? ","token pos column ","token begin_pos ","space_range begin_pos ","space_range == ","token column zero? ","token column "," range_with_surrounding_space  begin_pos "," range_with_surrounding_space  == "]}," RuboCop Cop Layout InitialIndentation first_token":{"type":"method","name":"first_token","children":[],"call":["t text start_with? ! ","t text start_with? ","t text "," processed_source tokens find "," processed_source tokens "," processed_source "," processed_source find_token "]}," RuboCop Cop Layout InitialIndentation autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove "," lambda "]}," RuboCop Cop Layout InitialIndentation investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense ","token pos "," space_before "," first_token "," first_token pos "," first_token  pos "," first_ first_token  "," first_ first_token  pos "]}," RuboCop Cop Layout IndentationWidth configured_indentation_width":{"type":"method","name":"configured_indentation_width","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Layout IndentationWidth starts_with_access_modifier?":{"type":"method","name":"starts_with_access_modifier?","children":[],"call":[" modifier_node? ","body_node children first ","body_node children ","body_node begin_type? ","starting_node access_modifier? ","starting_node send_type? ","starting_node bare_access_modifier? ","body_node children first  access_modifier? ","body_node children first  send_type? ","body_node children first  bare_access_modifier? "]}," RuboCop Cop Layout IndentationWidth offending_range":{"type":"method","name":"offending_range","children":[],"call":[" range_between ","pos end ","pos begin ","indentation >= ","expr begin_pos - ","expr begin_pos ","body_node source_range ","expr begin_pos - entation >= ","expr expr begin_pos  - ","body_node source_range  begin_pos - ","expr expr begin_pos  ","body_node source_range  begin_pos "]}," RuboCop Cop Layout IndentationWidth skip_check?":{"type":"method","name":"skip_check?","children":[],"call":["body_node loc column == ","body_node loc column ","body_node loc ","body_node source_range source_line =~ ","body_node source_range source_line ","body_node source_range "," starts_with_access_modifier? ","body_node loc line == ","base_loc line ","body_node loc line "," ignored_line? "," same_line? "," allowed_line? "]}," RuboCop Cop Layout IndentationWidth indentation_to_check?":{"type":"method","name":"indentation_to_check?","children":[],"call":["(sym :rescue) include? ","body_node type "," skip_check? "," check_rescue? ","block_body rescue_type? ","body_node ensure_type? ","body_node rescue_type? ","block_body nil? ! ","block_body nil? "]}," RuboCop Cop Layout IndentationWidth other_offense_in_same_range?":{"type":"method","name":"other_offense_in_same_range?","children":[],"call":["@offense_ranges << "," within? ","@offense_ranges any? ","node source_range "]}," RuboCop Cop Layout IndentationWidth offense":{"type":"method","name":"offense","children":[],"call":[" add_offense "," format "," configured_indentation_width "," offending_range ","style == "," other_offense_in_same_range? "," autocorrect? ","body_node children first ","body_node children "," parentheses? ! "," parentheses? ","body_node begin_type? "," message "," autocorrect ","body_node children first  children first ","body_node children first  children ","body_node children first  begin_type? ","  message  "]}," RuboCop Cop Layout IndentationWidth check_indentation":{"type":"method","name":"check_indentation","children":[],"call":[" offense ","@column_delta zero? "," configured_indentation_width - "," configured_indentation_width ","body_node loc column - "," effective_column ","body_node loc column ","body_node loc "," indentation_to_check? "," column_offset_between "," configured_indentation_width -  zero? "," configured_body_node loc column - _width - "," configured_ column_offset_between _width - "," configured_body_node loc column - _width "," configured_ column_offset_between _width "," body_node loc column - _to_check? ","  column_offset_between _to_check? "]}," RuboCop Cop Layout IndentationWidth check_if":{"type":"method","name":"check_if","children":[],"call":[" check_indentation ","node loc else ","node loc ","else_clause elsif? ","else_clause if_type? ","node ternary? "]}," RuboCop Cop Layout IndentationWidth check_assignment":{"type":"method","name":"check_assignment","children":[],"call":[" ignore_node "," on_while "," on_if ","rhs type "," variable_alignment? ","style to_sym ","node loc ","end_config [] "," config for_cop "," config "," first_part_of_call_chain "," first_part_of_call_chain  type "," config for_cop  [] "]}," RuboCop Cop Layout IndentationWidth indentation_consistency_style":{"type":"method","name":"indentation_consistency_style","children":[],"call":[" config for_cop [] "," config for_cop "," config "]}," RuboCop Cop Layout IndentationWidth special_modifier?":{"type":"method","name":"special_modifier?","children":[],"call":["SPECIAL_MODIFIERS  include? ","node source "," modifier_node? ","node access_modifier? ","node bare_access_modifier? "]}," RuboCop Cop Layout IndentationWidth each_member":{"type":"method","name":"each_member","children":[],"call":["previous_modifier source_range "," special_modifier? ","members first children each ","members first children ","members first ","member send_type? ","member special_modifier? "]}," RuboCop Cop Layout IndentationWidth check_members":{"type":"method","name":"check_members","children":[],"call":[" check_indentation "," indentation_consistency_style "," each_member "," indentation_consistency_style == ","members first begin_type? ","members first ","members any? ","member access_modifier? ","member send_type? ","members first children each ","members first children "," check_members_for_rails_style "," select_check_member "," check_members_for_indented_internal_methods_style "," check_members_for_normal_style "]}," RuboCop Cop Layout IndentationWidth on_if":{"type":"method","name":"on_if","children":[],"call":[" check_if ","base loc ","node else_branch ","node body ","node modifier_form? ","node ternary? ","node body ! "," ignored_node? "]}," RuboCop Cop Layout IndentationWidth on_case":{"type":"method","name":"on_case","children":[],"call":[" check_indentation ","case_node else_branch ","case_node when_branches last loc keyword ","case_node when_branches last loc ","case_node when_branches last ","case_node when_branches ","when_node body ","when_node loc keyword ","when_node loc ","case_node each_when "]}," RuboCop Cop Layout IndentationWidth on_while":{"type":"method","name":"on_while","children":[],"call":[" check_indentation ","node body ","base loc ","node single_line_condition? "," ignored_node? "]}," RuboCop Cop Layout IndentationWidth on_method_def":{"type":"method","name":"on_method_def","children":[],"call":[" check_indentation ","node loc keyword ","node loc "," ignored_node? "]}," RuboCop Cop Layout IndentationWidth on_send":{"type":"method","name":"on_send","children":[],"call":[" ignore_node ","node first_argument "," check_indentation ","base source_range ","style == ","def_end_config [] "," config for_cop "," config "," modifier_and_def_on_same_line? ","node adjacent_def_modifier? "," leftmost_modifier_of ","node first_argument body ","node first_argument  source_range "," config for_cop  [] "]}," RuboCop Cop Layout IndentationWidth on_class":{"type":"method","name":"on_class","children":[],"call":[" check_members ","node loc keyword ","node loc ","node body "," same_line? "]}," RuboCop Cop Layout IndentationWidth on_module":{"type":"method","name":"on_module","children":[],"call":[" check_members ","node loc keyword ","node loc "]}," RuboCop Cop Layout IndentationWidth on_block":{"type":"method","name":"on_block","children":[],"call":[" check_members ","node body "," indentation_consistency_style == "," indentation_consistency_style "," check_indentation "," begins_its_line? ","node loc end ","node loc "," indented_internal_methods_style? "]}," RuboCop Cop Layout IndentationWidth on_kwbegin":{"type":"method","name":"on_kwbegin","children":[],"call":[" check_indentation ","node children first ","node children ","node loc end ","node loc "," begins_its_line? "]}," RuboCop Cop Layout IndentationWidth on_ensure":{"type":"method","name":"on_ensure","children":[],"call":[" check_indentation ","node body ","node loc keyword ","node loc "]}," RuboCop Cop Layout IndentationWidth on_rescue":{"type":"method","name":"on_rescue","children":[],"call":[" check_indentation ","node loc else ","node loc "]}," RuboCop Cop Layout IndentationConsistency check":{"type":"method","name":"check","children":[],"call":[" check_alignment ","children_to_check each ","children_to_check last << ","children_to_check last ","children_to_check << "," style == "," style "," modifier_node? ","node children each ","node children ","child access_modifier? ","child send_type? ","child bare_access_modifier? "," check_normal_style "," check_rails_style "," check_indented_internal_methods_style "]}," RuboCop Cop Layout IndentationConsistency on_kwbegin":{"type":"method","name":"on_kwbegin","children":[],"call":[" check "]}," RuboCop Cop Layout IndentationConsistency on_begin":{"type":"method","name":"on_begin","children":[],"call":[" check "]}," RuboCop Cop Layout IndentHeredoc indentation_width":{"type":"method","name":"indentation_width","children":[],"call":["@config for_cop [] ","@config for_cop "]}," RuboCop Cop Layout IndentHeredoc heredoc_indent_type":{"type":"method","name":"heredoc_indent_type","children":[],"call":["node source [] ","node source "]}," RuboCop Cop Layout IndentHeredoc indent_level":{"type":"method","name":"indent_level","children":[],"call":["(send\n  (send\n    (lvar :str) :scan\n    (regexp\n      (str \"^\\\\s*\")\n      (regopt))) :reject) min_by size ","(send\n  (send\n    (lvar :str) :scan\n    (regexp\n      (str \"^\\\\s*\")\n      (regopt))) :reject) min_by ","line == ","str scan reject ","str scan ","indentations min_by size ","indentations min_by ","indentations empty? ","(send\n  (send\n    (lvar :str) :lines) :map) reject ","line [] ","str lines map ","str lines "]}," RuboCop Cop Layout IndentHeredoc base_indent_level":{"type":"method","name":"base_indent_level","children":[],"call":[" indent_level "," processed_source lines [] ","base_line_num - "," processed_source lines "," processed_source ","node loc expression line ","node loc expression ","node loc "," processed_source lines [] _num - ","node loc expression line  - "]}," RuboCop Cop Layout IndentHeredoc body_indent_level":{"type":"method","name":"body_indent_level","children":[],"call":[" indent_level ","node loc heredoc_body source ","node loc heredoc_body ","node loc ","node loc heredoc_node loc heredoc_body source  source ","node loc heredoc_node loc heredoc_body source  "]}," RuboCop Cop Layout IndentHeredoc indented_body":{"type":"method","name":"indented_body","children":[],"call":["body gsub ","  * "," base_indent_level + "," indentation_width "," base_indent_level "," body_indent_level ","node loc heredoc_body source ","node loc heredoc_body ","node loc "," indent_level "," heredoc_body ","node loc heredoc_body source  gsub "," heredoc_body  gsub ","  body_indent_level  ","  indent_level  "," node loc heredoc_body source _indent_level ","  heredoc_body _indent_level ","node loc heredoc_node loc heredoc_body source  source ","node loc heredoc_ heredoc_body  source ","node loc heredoc_node loc heredoc_body source  ","node loc heredoc_ heredoc_body  "," heredoc_node loc heredoc_body source  "," heredoc_ heredoc_body  "]}," RuboCop Cop Layout IndentHeredoc heredoc?":{"type":"method","name":"heredoc?","children":[],"call":["node loc is_a? ","node loc "]}," RuboCop Cop Layout IndentHeredoc check_style!":{"type":"method","name":"check_style!","children":[],"call":[" raise "," cop_name "," target_ruby_version < "," target_ruby_version "," style "]}," RuboCop Cop Layout IndentHeredoc correct_by_library":{"type":"method","name":"correct_by_library","children":[],"call":["corrector insert_after ","node loc expression ","node loc ","StripMethods  [] "," style ","corrector replace "," indented_body ","node loc heredoc_body "," lambda ","STRIP_METHODS  [] "]}," RuboCop Cop Layout IndentHeredoc correct_by_squiggly":{"type":"method","name":"correct_by_squiggly","children":[],"call":["corrector replace ","node loc expression ","node loc ","heredoc_beginning sub ","node loc expression source "," indented_body ","node loc heredoc_body "," heredoc_indent_type == "," heredoc_indent_type "," lambda "," target_ruby_version < "," target_ruby_version "," adjust_minus "," adjust_squiggly ","node loc expression source  sub "]}," RuboCop Cop Layout IndentHeredoc message":{"type":"method","name":"message","children":[],"call":[" format "," indentation_width ","StripMethods  [] "," style "," heredoc_indent_type "," library_message ","STRIP_METHODS  [] "," ruby23_message "]}," RuboCop Cop Layout IndentHeredoc style":{"type":"method","name":"style","children":[],"call":[" rails? "," target_ruby_version >= "," target_ruby_version ","style == "]}," RuboCop Cop Layout IndentHeredoc autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" correct_by_library "," correct_by_squiggly "," style "," check_style! "]}," RuboCop Cop Layout IndentHeredoc on_str":{"type":"method","name":"on_str","children":[],"call":[" add_offense ","body_indent_level zero? ","expected_indent_level == "," base_indent_level + "," indentation_width "," base_indent_level "," heredoc_indent_type == "," heredoc_indent_type "," body_indent_level "," heredoc? "," body_indent_level  zero? "," base_indent_level +  == ","  body_indent_level  "]}," RuboCop Cop Layout IndentHash message":{"type":"method","name":"message","children":[],"call":[" format "," configured_indentation_width "]}," RuboCop Cop Layout IndentHash base_description":{"type":"method","name":"base_description","children":[],"call":[" style == "," style "]}," RuboCop Cop Layout IndentHash check_based_on_longest_key":{"type":"method","name":"check_based_on_longest_key","children":[],"call":[" check_first ","key_lengths max - ","key_lengths first ","key_lengths max ","pairs first ","pair children first source_range length ","pair children first source_range ","pair children first ","pair children ","pairs map ","hash_node pairs first ","hash_node pairs ","key source_range length ","key source_range ","hash_node keys map ","hash_node keys "]}," RuboCop Cop Layout IndentHash separator_style?":{"type":"method","name":"separator_style?","children":[],"call":[" config for_cop [] == "," config for_cop [] "," config for_cop "," config ","separator is? ","first_pair loc operator ","first_pair loc ","first_pair loc operator  is? "]}," RuboCop Cop Layout IndentHash check_right_brace":{"type":"method","name":"check_right_brace","children":[],"call":[" add_offense "," style == "," style ","@column_delta zero? ","expected_column - ","right_brace column "," base_column ","right_brace source_line [] =~ ","right_brace source_line [] ","right_brace source_line ","expected_column -  zero? "," base_column  - "]}," RuboCop Cop Layout IndentHash check":{"type":"method","name":"check","children":[],"call":[" check_right_brace ","hash_node loc end ","hash_node loc "," check_first "," check_based_on_longest_key ","hash_node children "," separator_style? ","first_pair source_range line == ","left_brace line ","first_pair source_range line ","first_pair source_range ","hash_node pairs first ","hash_node pairs ","hash_node loc begin "," ignored_node? ","hash_node pairs first  source_range line == ","hash_node loc begin  line ","hash_node pairs first  source_range line ","hash_node pairs first  source_range "]}," RuboCop Cop Layout IndentHash brace_alignment_style":{"type":"method","name":"brace_alignment_style","children":[],"call":[]}," RuboCop Cop Layout IndentHash on_send":{"type":"method","name":"on_send","children":[],"call":[" check "," each_argument_node "]}," RuboCop Cop Layout IndentHash on_hash":{"type":"method","name":"on_hash","children":[],"call":[" check ","node loc begin ","node loc "]}," RuboCop Cop Layout IndentAssignment check_assignment":{"type":"method","name":"check_assignment","children":[],"call":[" check_alignment ","base + "," configured_indentation_width "," display_column ","node source_range ","node loc operator line == ","rhs loc line ","rhs loc ","node loc operator line ","node loc operator ","node loc ","rhs first_line "," leftmost_multiple_assignment source_range "," leftmost_multiple_assignment "," display_column  + "]}," RuboCop Cop Layout IndentArray message":{"type":"method","name":"message","children":[],"call":[" format "," configured_indentation_width "]}," RuboCop Cop Layout IndentArray base_description":{"type":"method","name":"base_description","children":[],"call":[" style == "," style "]}," RuboCop Cop Layout IndentArray check_right_bracket":{"type":"method","name":"check_right_bracket","children":[],"call":[" add_offense "," style == "," style ","@column_delta zero? ","expected_column - ","right_bracket column "," base_column ","right_bracket source_line [] =~ ","right_bracket source_line [] ","right_bracket source_line ","expected_column -  zero? "," base_column  - "]}," RuboCop Cop Layout IndentArray check":{"type":"method","name":"check","children":[],"call":[" check_right_bracket ","array_node loc end ","array_node loc "," check_first ","first_elem source_range line == ","left_bracket line ","first_elem source_range line ","first_elem source_range ","array_node values first ","array_node values ","array_node loc begin "," ignored_node? ","array_node values first  source_range line == ","array_node loc begin  line ","array_node values first  source_range line ","array_node values first  source_range "]}," RuboCop Cop Layout IndentArray brace_alignment_style":{"type":"method","name":"brace_alignment_style","children":[],"call":[]}," RuboCop Cop Layout IndentArray on_send":{"type":"method","name":"on_send","children":[],"call":[" check "," each_argument_node "]}," RuboCop Cop Layout IndentArray on_array":{"type":"method","name":"on_array","children":[],"call":[" check ","node loc begin ","node loc "]}," RuboCop Cop Layout FirstParameterIndentation previous_code_line":{"type":"method","name":"previous_code_line","children":[],"call":[" processed_source lines [] ","line_number - "," processed_source lines "," processed_source ","@comment_lines include? ","line blank? ","c loc line ","c loc ","(send\n  (send\n    (send nil :processed_source) :comments) :select) map "," begins_its_line? ","c loc expression "," processed_source comments select "," processed_source comments "," processed_source  processed_source lines [] s [] "," processed_source lines [] _number - "," processed_source  processed_source lines [] s ","@comment_ processed_source lines [] s include? "," processed_source lines []  blank? ","c loc  processed_source lines []  "," begins_its_ processed_source lines [] ? "]}," RuboCop Cop Layout FirstParameterIndentation column_of":{"type":"method","name":"column_of","children":[],"call":[" display_column "," previous_code_line =~ "," previous_code_line ","range line + + ","range line + ","source count ","range line ","source include? ","range source strip ","range source ","range source strip  count ","range source strip  include? ","range range source strip  strip ","range range source strip  "]}," RuboCop Cop Layout FirstParameterIndentation base_range":{"type":"method","name":"base_range","children":[],"call":[" range_between ","arg_node source_range begin_pos ","arg_node source_range ","send_node source_range begin_pos ","send_node source_range "]}," RuboCop Cop Layout FirstParameterIndentation special_inner_call_indentation?":{"type":"method","name":"special_inner_call_indentation?","children":[],"call":["node source_range begin_pos > ","parent source_range begin_pos ","parent source_range ","node source_range begin_pos ","node source_range "," style == "," style ","parent parenthesized? ! ","parent parenthesized? ","parent method? ! ","parent method? ","parent send_type? ","node parent "," eligible_method_call? ","node parent  source_range begin_pos ","node parent  source_range ","node parent  node parent hesized? ! ","node parent  node parent hesized? ","node parent  method? ! ","node parent  method? ","node parent  send_type? ","node node parent  "]}," RuboCop Cop Layout FirstParameterIndentation base_indentation":{"type":"method","name":"base_indentation","children":[],"call":[" previous_code_line =~ "," previous_code_line ","node first_argument loc line ","node first_argument loc ","node first_argument "," column_of "," base_range "," special_inner_call_indentation? ","node first_argument first_line "]}," RuboCop Cop Layout FirstParameterIndentation message":{"type":"method","name":"message","children":[],"call":[" format ","text lines reverse_each first =~ ","text lines reverse_each first ","text lines reverse_each ","text lines "," special_inner_call_indentation? ","text !~ "," base_range source strip "," base_range source "," base_range ","arg_node parent "," comment_line? "," configured_indentation_width "," base_range source strip  lines reverse_each first =~ "," base_range source strip  lines reverse_each first "," base_range source strip  lines reverse_each "," base_range source strip  lines "," base_range source strip  !~ "]}," RuboCop Cop Layout FirstParameterIndentation on_send":{"type":"method","name":"on_send","children":[],"call":[" check_alignment ","node first_argument "," base_indentation + "," configured_indentation_width "," base_indentation ","node operator_method? ","node arguments? ! ","node arguments? "," base_ base_indentation + ation + "," configured_ base_indentation + ation_width "," base_ base_indentation + ation "]}," RuboCop Cop Layout FirstMethodParameterLineBreak on_method_def":{"type":"method","name":"on_method_def","children":[],"call":[" check_method_line_break ","args to_a "]}," RuboCop Cop Layout FirstMethodArgumentLineBreak on_send":{"type":"method","name":"on_send","children":[],"call":[" check_method_line_break ","args concat ","args pop children ","args pop ","last_arg braces? ! ","last_arg braces? ","last_arg hash_type? ","args last ","node arguments ","node arguments dup ","(lvar :last_arg) ! "," ignore_last_element? ","args concat  concat ","node arguments  concat ","node arguments dup  concat ","args concat  pop children ","node arguments  pop children ","node arguments dup  pop children ","args concat  pop ","node arguments  pop ","node arguments dup  pop ","args last  braces? ! ","args last  braces? ","args last  hash_type? ","args concat  last ","node arguments  last ","node arguments dup  last ","(lvar :args last ) ! "]}," RuboCop Cop Layout FirstHashElementLineBreak on_hash":{"type":"method","name":"on_hash","children":[],"call":[" check_children_line_break ","node children ","node loc begin ","node loc "," ignore_last_element? "]}," RuboCop Cop Layout FirstArrayElementLineBreak assignment_on_same_line?":{"type":"method","name":"assignment_on_same_line?","children":[],"call":["source =~ ","node source_range source_line [] ","node loc column ","node loc ","node source_range source_line ","node source_range ","(str \"\\\\s*=\\\\s*$\") match? ","node source_range source_line []  =~ ","node node source_range source_line [] _range node source_range source_line [] _line [] ","node node source_range source_line [] _range node source_range source_line [] _line ","node node source_range source_line [] _range "]}," RuboCop Cop Layout FirstArrayElementLineBreak on_array":{"type":"method","name":"on_array","children":[],"call":[" check_children_line_break ","node children "," assignment_on_same_line? ! "," assignment_on_same_line? ","node loc begin ! ","node loc begin ","node loc "," ignore_last_element? "]}," RuboCop Cop Layout ExtraSpacing remove_optarg_equals":{"type":"method","name":"remove_optarg_equals","children":[],"call":["optarg_eql include? ","t pos begin_pos ","t pos ","asgn_tokens reject ","(send\n  (lvar :optargs) :map) to_set ","o loc operator begin_pos ","o loc operator ","o loc ","optargs map ","processed_source ast each_node ","processed_source ast ","t begin_pos ","(send\n  (lvar :optargs) :map) to_set  include? ","(send\n  (lvar :processed_source ast each_node ) :map) to_set ","processed_source ast each_node  map "]}," RuboCop Cop Layout ExtraSpacing align_column":{"type":"method","name":"align_column","children":[],"call":["asgn_token pos last_column - + ","asgn_token pos last_column - ","asgn_token pos last_column ","asgn_token pos ","leading size - ","leading =~ ","leading size ","line [] ","asgn_token pos column "," processed_source lines [] ","asgn_token pos line - ","asgn_token pos line "," processed_source lines "," processed_source ","asgn_token column ","asgn_token line - ","asgn_token line ","line []  size - ","line []  =~ ","line []  size "," processed_source lines []  [] "," processed_source  processed_source lines [] s [] ","asgn_token pos  processed_source lines []  - ","asgn_token pos  processed_source lines []  "," processed_source  processed_source lines [] s ","asgn_token  processed_source lines []  - ","asgn_token  processed_source lines []  "]}," RuboCop Cop Layout ExtraSpacing contiguous_assignment_lines":{"type":"method","name":"contiguous_assignment_lines","children":[],"call":["result sort! ","result << ","@asgn_lines include? ","range line upto "," processed_source lines size "," processed_source lines "," processed_source ","range line ","range line downto "]}," RuboCop Cop Layout ExtraSpacing align_equal_sign":{"type":"method","name":"align_equal_sign","children":[],"call":["corrector remove_preceding ","diff -@ ","token pos ","diff < ","corrector insert_before ","  * ","diff > ","align_to - ","token pos last_column ","@corrected add? ","diff negative? ","diff positive? ","align_to -  -@ ","align_to -  < ","align_to -  > ","align_to -  negative? ","align_to -  positive? "]}," RuboCop Cop Layout ExtraSpacing align_equal_signs":{"type":"method","name":"align_equal_signs","children":[],"call":[" align_equal_sign ","tokens each ","columns max "," align_column ","tokens map ","lines include? ","t pos line ","t pos ","@asgn_tokens select "," contiguous_assignment_lines ","t line "," assignment_tokens select "," assignment_tokens "," all_relevant_assignment_lines ","range line "," contiguous_assignment_lines  include? "," all_relevant_assignment_lines  include? "," contiguous_assignment_ contiguous_assignment_lines  "," contiguous_assignment_ all_relevant_assignment_lines  "," all_relevant_assignment_ contiguous_assignment_lines  "," all_relevant_assignment_ all_relevant_assignment_lines  "]}," RuboCop Cop Layout ExtraSpacing equal_sign?":{"type":"method","name":"equal_sign?","children":[],"call":["token type == ","token type "]}," RuboCop Cop Layout ExtraSpacing force_equal_sign_alignment?":{"type":"method","name":"force_equal_sign_alignment?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Layout ExtraSpacing comment_column":{"type":"method","name":"comment_column","children":[],"call":[" processed_source comments [] loc column "," processed_source comments [] loc "," processed_source comments [] "," processed_source comments "," processed_source "]}," RuboCop Cop Layout ExtraSpacing aligned_with_next_comment?":{"type":"method","name":"aligned_with_next_comment?","children":[],"call":[" comment_column == "," comment_column ","ix + ","ix < "," processed_source comments length - "," processed_source comments length "," processed_source comments "," processed_source ","index + ","index < "]}," RuboCop Cop Layout ExtraSpacing aligned_with_previous_comment?":{"type":"method","name":"aligned_with_previous_comment?","children":[],"call":[" comment_column == "," comment_column ","ix - ","ix > ","index - ","index > ","index positive? "]}," RuboCop Cop Layout ExtraSpacing aligned_comments?":{"type":"method","name":"aligned_comments?","children":[],"call":[" aligned_with_next_comment? "," aligned_with_previous_comment? ","c loc expression begin_pos == ","token pos begin_pos ","token pos ","c loc expression begin_pos ","c loc expression ","c loc "," processed_source comments index "," processed_source comments "," processed_source ","token begin_pos ","comment loc expression begin_pos == ","comment_token begin_pos ","comment loc expression begin_pos ","comment loc expression ","comment loc "]}," RuboCop Cop Layout ExtraSpacing ignored_ranges":{"type":"method","name":"ignored_ranges","children":[],"call":["(send\n  (send nil :on_node\n    (sym :pair)\n    (lvar :ast)) :map) compact ","value source_range begin_pos ","value source_range ","key source_range end_pos ","key source_range ","pair parent single_line? ","pair parent "," on_node map "," on_node ","ranges << "]}," RuboCop Cop Layout ExtraSpacing unary_plus_non_offense?":{"type":"method","name":"unary_plus_non_offense?","children":[],"call":["range resize source =~ ","range resize source ","range resize ","range size + ","range size "]}," RuboCop Cop Layout ExtraSpacing ignored_range?":{"type":"method","name":"ignored_range?","children":[],"call":["r include? "," ignored_ranges any? "," ignored_ranges "]}," RuboCop Cop Layout ExtraSpacing aligned_tok?":{"type":"method","name":"aligned_tok?","children":[],"call":[" aligned_with_something? ","token pos "," aligned_comments? ","token type == ","token type ","token comment? ","@aligned_comments include? ","token line "]}," RuboCop Cop Layout ExtraSpacing extra_space_range":{"type":"method","name":"extra_space_range","children":[],"call":[" range_between "," aligned_tok? "," allow_for_alignment? ","end_pos <= ","t2 pos begin_pos - ","t2 pos begin_pos ","t2 pos ","t1 pos end_pos ","t1 pos ","t1 pos line != ","t2 pos line ","t1 pos line ","t2 begin_pos - ","t2 begin_pos ","t1 end_pos ","t1 line != ","t2 line ","t1 line ","token2 begin_pos - ","token2 begin_pos ","token1 end_pos ","token1 line != ","token2 line ","token1 line ","t2 pos begin_pos -  <= ","t2 begin_pos -  <= ","token2 begin_pos -  <= ","t1 pos t2 pos begin_pos -  ","t1 pos t2 begin_pos -  ","t1 pos token2 begin_pos -  ","t1 t2 pos begin_pos -  ","t1 t2 begin_pos -  ","t1 token2 begin_pos -  ","token1 t2 pos begin_pos -  ","token1 t2 begin_pos -  ","token1 token2 begin_pos -  "]}," RuboCop Cop Layout ExtraSpacing check_other":{"type":"method","name":"check_other","children":[],"call":[" add_offense "," unary_plus_non_offense? "," ignored_range? ","range begin_pos "," extra_space_range ","token2 text start_with? ","token2 text "," allow_for_trailing_comments? ","corrector remove "]}," RuboCop Cop Layout ExtraSpacing following_line":{"type":"method","name":"following_line","children":[],"call":[" processed_source lines [] ","token pos line ","token pos "," processed_source lines "," processed_source ","token line "]}," RuboCop Cop Layout ExtraSpacing preceding_line":{"type":"method","name":"preceding_line","children":[],"call":[" processed_source lines [] ","token pos line - ","token pos line ","token pos "," processed_source lines "," processed_source ","token line - ","token line "]}," RuboCop Cop Layout ExtraSpacing should_aligned_with_preceding_line?":{"type":"method","name":"should_aligned_with_preceding_line?","children":[],"call":["@asgn_lines include? ","token pos line - ","token pos line ","token pos ","token line - ","token line "]}," RuboCop Cop Layout ExtraSpacing check_assignment":{"type":"method","name":"check_assignment","children":[],"call":[" add_offense ","token pos "," aligned_assignment? "," format "," following_line "," preceding_line "," should_aligned_with_preceding_line? "," processed_source following_line "," processed_source "," processed_source preceding_line "," aligned_with_preceding_assignment == "," aligned_with_preceding_assignment "," align_equal_signs "]}," RuboCop Cop Layout ExtraSpacing check_tokens":{"type":"method","name":"check_tokens","children":[],"call":[" check_other "," check_assignment ","@asgn_lines include? ","t2 pos line + ","t2 pos line ","t2 pos ","t2 pos line - ","@asgn_tokens include? "," force_equal_sign_alignment? ","t2 type == ","t2 type ","t2 line + ","t2 line ","t2 line - ","token2 line + ","token2 line ","token2 line - ","token2 type == ","token2 type "," assignment_tokens include? "," assignment_tokens "]}," RuboCop Cop Layout ExtraSpacing assignment_tokens":{"type":"method","name":"assignment_tokens","children":[],"call":["Set  new ","t pos line ","t pos ","tokens uniq "," remove_optarg_equals "," processed_source "," equal_sign? "," processed_source tokens select "," processed_source tokens "," remove_optarg_equals  uniq "," processed_source tokens select  uniq "," processed_source  remove_optarg_equals  select "," processed_source  processed_source tokens select  select "," processed_source  remove_optarg_equals  "," processed_source  processed_source tokens select  "]}," RuboCop Cop Layout ExtraSpacing autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove "," align_equal_signs ","range source end_with? ","range source "," lambda "]}," RuboCop Cop Layout ExtraSpacing investigate":{"type":"method","name":"investigate","children":[],"call":[" check_tokens ","processed_source ast ","processed_source tokens each_cons ","processed_source tokens ","Set  new ","t pos line ","t pos ","@asgn_tokens map "," assignment_tokens "," force_equal_sign_alignment? ","processed_source ast nil? ","processed_source blank? "," assignment_tokens  map "]}," RuboCop Cop Layout EndOfLine offense_message":{"type":"method","name":"offense_message","children":[],"call":["line !~ ","line =~ "," style ","Platform  windows? "," style == ","(str \"\\\\r$\") match? ","line end_with? "]}," RuboCop Cop Layout EndOfLine unimportant_missing_cr?":{"type":"method","name":"unimportant_missing_cr?","children":[],"call":["line !~ ","index == ","last_line - "," style == "," style ","(str \"\\\\n$\") match? ! ","(str \"\\\\n$\") match? ","line end_with? ! ","line end_with? "]}," RuboCop Cop Layout EndOfLine investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense "," source_range ","line length ","index + ","processed_source buffer "," unimportant_missing_cr? "," offense_message ","index >= ","processed_source raw_source each_line with_index ","processed_source raw_source each_line ","processed_source raw_source ","processed_source lines length ","processed_source lines ","last_token pos line ","last_token pos ","processed_source tokens last ","processed_source tokens ","last_token line "," last_line "," source_ source_range  ","processed_source tokens last  pos line ","processed_source tokens last  pos ","processed_source tokens last  line "," processed_source lines length  "," last_token pos line  "," last_token line  ","  last_line  "]}," RuboCop Cop Layout EmptyLinesAroundModuleBody on_module":{"type":"method","name":"on_module","children":[],"call":[" check ","node body "]}," RuboCop Cop Layout EmptyLinesAroundMethodBody style":{"type":"method","name":"style","children":[],"call":[]}," RuboCop Cop Layout EmptyLinesAroundMethodBody on_method_def":{"type":"method","name":"on_method_def","children":[],"call":[" check "]}," RuboCop Cop Layout EmptyLinesAroundExceptionHandlingKeywords keyword_locations_in_ensure":{"type":"method","name":"keyword_locations_in_ensure","children":[],"call":[" keyword_locations ","node loc keyword ","node loc "]}," RuboCop Cop Layout EmptyLinesAroundExceptionHandlingKeywords keyword_locations_in_rescue":{"type":"method","name":"keyword_locations_in_rescue","children":[],"call":["(send\n  (send\n    (lvar :node) :loc) :else) compact ","body loc keyword ","body loc ","resbodies map ","node loc else ","node loc ","node resbody_branches map ","node resbody_branches "]}," RuboCop Cop Layout EmptyLinesAroundExceptionHandlingKeywords keyword_locations":{"type":"method","name":"keyword_locations","children":[],"call":[" keyword_locations_in_ensure "," keyword_locations_in_rescue ","node type "]}," RuboCop Cop Layout EmptyLinesAroundExceptionHandlingKeywords style":{"type":"method","name":"style","children":[],"call":[]}," RuboCop Cop Layout EmptyLinesAroundExceptionHandlingKeywords check_body":{"type":"method","name":"check_body","children":[],"call":[" check_line "," format ","line - "," style ","loc source ","loc line ","locations each "," keyword_locations "," message ","line == "," last_rescue_and_end_on_same_line "," check_loc line  ","loc line  - ","loc loc line  "," keyword_locations  each "," loc source _locations "," keyword_ keyword_locations  ","loc line  == "," last_rescue_and_end_on_same_loc line  "]}," RuboCop Cop Layout EmptyLinesAroundExceptionHandlingKeywords on_kwbegin":{"type":"method","name":"on_kwbegin","children":[],"call":[" check_body ","node loc line ","node loc "]}," RuboCop Cop Layout EmptyLinesAroundExceptionHandlingKeywords on_method_def":{"type":"method","name":"on_method_def","children":[],"call":[" check_body "]}," RuboCop Cop Layout EmptyLinesAroundClassBody on_sclass":{"type":"method","name":"on_sclass","children":[],"call":[" check ","node body "]}," RuboCop Cop Layout EmptyLinesAroundClassBody on_class":{"type":"method","name":"on_class","children":[],"call":[" check ","superclass first_line ","node body ","node parent_class first_line ","node parent_class ","superclass node parent_class first_line  ","node parent_class node parent_class first_line  "]}," RuboCop Cop Layout EmptyLinesAroundBlockBody on_block":{"type":"method","name":"on_block","children":[],"call":[" check ","node body ","node send_node last_line ","node send_node "]}," RuboCop Cop Layout EmptyLinesAroundBeginBody style":{"type":"method","name":"style","children":[],"call":[]}," RuboCop Cop Layout EmptyLinesAroundBeginBody on_kwbegin":{"type":"method","name":"on_kwbegin","children":[],"call":[" check "]}," RuboCop Cop Layout EmptyLinesAroundAccessModifier message":{"type":"method","name":"message","children":[],"call":[" format ","node loc selector source ","node loc selector ","node loc "," class_def? "," block_start? "," processed_source [] ","node loc line - ","node loc line "," processed_source ","node first_line - ","node first_line ","send_line - "," message_for_only_before_style "," message_for_around_style "," style ","node first_line  - "]}," RuboCop Cop Layout EmptyLinesAroundAccessModifier body_end?":{"type":"method","name":"body_end?","children":[],"call":["line =~ ","line == ","@class_or_module_def last_line - ","@class_or_module_def last_line ","@class_or_module_def_last_line - "]}," RuboCop Cop Layout EmptyLinesAroundAccessModifier block_start?":{"type":"method","name":"block_start?","children":[],"call":["line match ","line == ","@block_line + "]}," RuboCop Cop Layout EmptyLinesAroundAccessModifier class_def?":{"type":"method","name":"class_def?","children":[],"call":["line =~ ","line == ","@class_or_module_def_line + ","@class_or_module_def first_line + ","@class_or_module_def first_line ","@class_or_module_def_first_line + "]}," RuboCop Cop Layout EmptyLinesAroundAccessModifier empty_lines_around?":{"type":"method","name":"empty_lines_around?","children":[],"call":[" next_line_empty? "," previous_line_empty? "," processed_source [] "," processed_source "," previous_line_ignoring_comments ","node loc line ","node loc ","node first_line ","node last_line ","  processed_source [] _empty? ","  previous_line_ignoring_comments _empty? ","  previous_line_ignoring_comments _ignoring_comments "]}," RuboCop Cop Layout EmptyLinesAroundAccessModifier next_line_empty?":{"type":"method","name":"next_line_empty?","children":[],"call":["next_line blank? "," body_end? "," processed_source [] "," processed_source "," processed_source []  blank? "]}," RuboCop Cop Layout EmptyLinesAroundAccessModifier previous_line_empty?":{"type":"method","name":"previous_line_empty?","children":[],"call":["previous_line blank? "," class_def? "," block_start? "," previous_line_ignoring_comments "," processed_source "," previous_line_ignoring_comments  blank? ","  previous_line_ignoring_comments _ignoring_comments "]}," RuboCop Cop Layout EmptyLinesAroundAccessModifier previous_line_ignoring_comments":{"type":"method","name":"previous_line_ignoring_comments","children":[],"call":[" comment_line? ! "," comment_line? ","processed_source [] reverse find ","processed_source [] reverse ","processed_source [] ","send_line - "]}," RuboCop Cop Layout EmptyLinesAroundAccessModifier autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector insert_after "," next_line_empty? ","corrector insert_before "," previous_line_empty? "," range_by_whole_lines ","node source_range "," processed_source [] "," processed_source ","send_line - ","node loc line ","node loc "," lambda ","node first_line ","node last_line "," correct_next_line_if_denied_style "," next_ range_by_whole_lines _empty? ","  processed_source [] _empty? "," previous_ range_by_whole_lines _empty? "," range_by_whole_ range_by_whole_lines s ","send_ range_by_whole_lines  - ","node loc line  - ","node first_line  - ","node loc  range_by_whole_lines  ","node first_ range_by_whole_lines  ","node last_ range_by_whole_lines  "," correct_next_ range_by_whole_lines _if_denied_style "," correct_ processed_source [] _if_denied_style "]}," RuboCop Cop Layout EmptyLinesAroundAccessModifier on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," empty_lines_around? "," modifier_node? ","node access_modifier? ","node bare_access_modifier? "," allowed_only_before_style? "," style "," correct_next_line_if_denied_style ","corrector insert_before "," previous_line_empty? ","node first_line "," range_by_whole_lines ","node source_range "," message "," register_offense? "," expected_empty_lines? ","(send\n  (lvar :node) :parent) ! ","node parent ","(or\n  (csend\n    (send\n      (lvar :node) :parent) :block_type?)\n  (csend\n    (send\n      (lvar :node) :parent) :numblock_type?)) ! "," empty_ range_by_whole_lines s_around? "," correct_next_ range_by_whole_lines _if_denied_style "," previous_ range_by_whole_lines _empty? ","node first_ range_by_whole_lines  "," range_by_whole_ range_by_whole_lines s ","  message  "," expected_empty_ range_by_whole_lines s? "]}," RuboCop Cop Layout EmptyLines previous_and_current_lines_empty?":{"type":"method","name":"previous_and_current_lines_empty?","children":[],"call":[" processed_source [] empty? "," processed_source [] ","line - "," processed_source "]}," RuboCop Cop Layout EmptyLines exceeds_line_offset?":{"type":"method","name":"exceeds_line_offset?","children":[],"call":["line_diff > "]}," RuboCop Cop Layout EmptyLines each_extra_empty_line":{"type":"method","name":"each_extra_empty_line","children":[],"call":[" source_range "," processed_source buffer "," processed_source "," previous_and_current_lines_empty? ","(erange\n  (begin\n    (send\n      (lvar :prev_line) :+\n      (int 1)))\n  (lvar :cur_line)) each ","prev_line + "," exceeds_line_offset? ","cur_line - ","lines each "]}," RuboCop Cop Layout EmptyLines autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove "," lambda "]}," RuboCop Cop Layout EmptyLines investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense "," each_extra_empty_line ","lines sort ","lines << ","token pos line ","token pos ","processed_source tokens each ","processed_source tokens ","Set  new ","processed_source tokens empty? ","token line ","processed_source each_token ","Set  new  sort ","Set  new  << "]}," RuboCop Cop Layout EmptyLineBetweenDefs autocorrect_insert_lines":{"type":"method","name":"autocorrect_insert_lines","children":[],"call":["corrector insert_after ","\n * "," lambda "," range_between ","newline_pos + "," minimum_empty_lines - "," minimum_empty_lines "]}," RuboCop Cop Layout EmptyLineBetweenDefs autocorrect_remove_lines":{"type":"method","name":"autocorrect_remove_lines","children":[],"call":["corrector remove "," lambda "," range_between ","newline_pos + ","count - "," maximum_empty_lines "]}," RuboCop Cop Layout EmptyLineBetweenDefs autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" autocorrect_insert_lines "," autocorrect_remove_lines ","count > "," maximum_empty_lines "," blank_lines_count_between ","source_buffer source index ","source_buffer source ","prev_def loc end source_buffer ","prev_def loc end ","prev_def loc ","prev_def loc end end_pos "," prev_node ","end_pos + ","newline_pos > ","node source_range begin_pos ","node source_range "," end_loc source_buffer "," end_loc "," end_loc end_pos "," blank_lines_count_between  > "," blank_lines_ blank_lines_count_between _between ","prev_def loc end source_buffer  source index "," end_loc source_buffer  source index ","prev_def loc end source_buffer  source "," end_loc source_buffer  source ","prev_def loc end prev_def loc end source_buffer  ","prev_def loc end  end_loc source_buffer  "," prev_node  loc end source_buffer "," prev_node  loc end "," prev_node  loc ","prev_def loc end prev_def loc end end_pos  ","prev_def loc end  end_loc end_pos  "," prev_node  loc end end_pos ","prev_def loc end end_pos  + "," end_loc end_pos  + ","source_buffer source index  > ","end_pos +  > "," end_loc prev_def loc end source_buffer  "," end_loc  end_loc source_buffer  "," end_loc prev_def loc end end_pos  "," end_loc  end_loc end_pos  "]}," RuboCop Cop Layout EmptyLineBetweenDefs def_end":{"type":"method","name":"def_end","children":[],"call":["node loc end line ","node loc end ","node loc "," end_loc line "," end_loc "]}," RuboCop Cop Layout EmptyLineBetweenDefs def_start":{"type":"method","name":"def_start","children":[],"call":["node loc keyword line ","node loc keyword ","node loc ","node source_range line ","node source_range ","node children first send_type? ","node children first ","node children ","node block_type? "]}," RuboCop Cop Layout EmptyLineBetweenDefs lines_between_defs":{"type":"method","name":"lines_between_defs","children":[],"call":[" processed_source lines [] "," processed_source lines "," processed_source "," def_start - "," def_start "," def_end ","end_line_num negative? "," def_start -  negative? "]}," RuboCop Cop Layout EmptyLineBetweenDefs prev_node":{"type":"method","name":"prev_node","children":[],"call":["node parent children [] ","node sibling_index - ","node sibling_index ","node parent children ","node parent ","node sibling_index > ","node sibling_index positive? "]}," RuboCop Cop Layout EmptyLineBetweenDefs maximum_empty_lines":{"type":"method","name":"maximum_empty_lines","children":[],"call":[" Array last "," Array "," cop_config [] "," cop_config "]}," RuboCop Cop Layout EmptyLineBetweenDefs minimum_empty_lines":{"type":"method","name":"minimum_empty_lines","children":[],"call":[" Array first "," Array "," cop_config [] "," cop_config "]}," RuboCop Cop Layout EmptyLineBetweenDefs blank_lines_count_between":{"type":"method","name":"blank_lines_count_between","children":[],"call":[" lines_between_defs count "," lines_between_defs "]}," RuboCop Cop Layout EmptyLineBetweenDefs blank_lines_between?":{"type":"method","name":"blank_lines_between?","children":[],"call":["(irange\n  (send nil :minimum_empty_lines)\n  (send nil :maximum_empty_lines)) cover? "," maximum_empty_lines "," minimum_empty_lines "," blank_lines_count_between "," blank_lines_ blank_lines_count_between _between "]}," RuboCop Cop Layout EmptyLineBetweenDefs multiple_blank_lines_groups?":{"type":"method","name":"multiple_blank_lines_groups?","children":[],"call":["blank_start > ","non_blank_end nil? ","blank_start nil? ","(send\n  (send\n    (lvar :lines) :each_index) :reject) min ","lines [] blank? ","lines [] ","lines each_index reject ","lines each_index ","(send\n  (send\n    (lvar :lines) :each_index) :select) max ","lines each_index select "," lines_between_defs ","(send\n  (send\n    (lvar :lines) :each_index) :select) max  > ","(send\n  (send\n    (lvar :lines) :each_index) :reject) min  nil? ","(send\n  (send\n    (lvar :lines) :each_index) :select) max  nil? ","(send\n  (send\n    (lvar : lines_between_defs ) :each_index) :reject) min "," lines_between_defs  [] blank? "," lines_between_defs  [] "," lines_between_defs  each_index reject "," lines_between_defs  each_index ","(send\n  (send\n    (lvar : lines_between_defs ) :each_index) :select) max "," lines_between_defs  each_index select ","  lines_between_defs _between_defs "]}," RuboCop Cop Layout EmptyLineBetweenDefs def_node?":{"type":"method","name":"def_node?","children":[],"call":["node defs_type? ","node def_type? "]}," RuboCop Cop Layout EmptyLineBetweenDefs check_defs":{"type":"method","name":"check_defs","children":[],"call":[" add_offense ","nodes last "," cop_config [] "," cop_config ","nodes all? "," multiple_blank_lines_groups? "," blank_lines_between? ","nodes last loc keyword join ","nodes last loc name ","nodes last loc ","nodes last loc keyword "," autocorrect "," message ","correction_node loc keyword join ","correction_node loc name ","correction_node loc ","correction_node loc keyword "," line_count_allowed? "," blank_lines_count_between "," def_location ","nodes last  loc keyword join ","nodes last  loc name ","nodes last  loc ","nodes last  loc keyword "," line_ blank_lines_count_between _allowed? "," blank_lines_ blank_lines_count_between _between "," def_nodes last loc keyword join  "," def_correction_node loc keyword join  "," def_ def_location  "]}," RuboCop Cop Layout EmptyLineBetweenDefs on_begin":{"type":"method","name":"on_begin","children":[],"call":[" check_defs ","nodes all? "," method ","node children each_cons ","node children "," candidate? "]}," RuboCop Cop Layout EmptyLineAfterMagicComment last_magic_comment":{"type":"method","name":"last_magic_comment","children":[],"call":["(send\n  (block\n    (send\n      (send\n        (lvar :source) :comments) :take_while)\n    (args\n      (arg :comment))\n    (send\n      (send\n        (send\n          (lvar :comment) :loc) :line) :<\n      (send\n        (send\n          (send\n            (lvar :source) :ast) :loc) :line))) :select) last ","MagicComment  parse any? ","MagicComment  parse ","comment text ","(send\n  (send\n    (lvar :source) :comments) :take_while) select ","comment loc line < ","source ast loc line ","source ast loc ","source ast ","comment loc line ","comment loc ","source comments take_while ","source comments ","(send\n  (send\n    (lvar :source) :comments) :take_while) reverse find ","(send\n  (send\n    (lvar :source) :comments) :take_while) reverse "]}," RuboCop Cop Layout EmptyLineAfterMagicComment autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector insert_before "," lambda "]}," RuboCop Cop Layout EmptyLineAfterMagicComment investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense "," source_range ","last_magic_comment loc line + ","last_magic_comment loc line ","last_magic_comment loc ","source buffer ","source [] =~ ","source [] "," last_magic_comment ","source ast ","source [] strip empty? ","source [] strip "," last_magic_comment  loc line + "," last_magic_comment  loc line "," last_magic_comment  loc ","  last_magic_comment  "]}," RuboCop Cop Layout ElseAlignment check_alignment":{"type":"method","name":"check_alignment","children":[],"call":[" add_offense "," format ","base_range source [] ","base_range source ","else_range source ","@column_delta zero? "," effective_column - ","else_range column "," effective_column "," begins_its_line? "," column_offset_between "," autocorrect "," effective_column -  zero? "," column_offset_between  zero? "]}," RuboCop Cop Layout ElseAlignment check_assignment":{"type":"method","name":"check_assignment","children":[],"call":[" ignore_node "," on_if ","rhs if_type? "," variable_alignment? ","style to_sym ","node loc ","end_config [] "," config for_cop "," config "," first_part_of_call_chain "," check_nested "," first_part_of_call_chain  if_type? "," config for_cop  [] "]}," RuboCop Cop Layout ElseAlignment base_for_method_definition":{"type":"method","name":"base_for_method_definition","children":[],"call":["node loc keyword ","node loc ","parent loc selector ","parent loc ","parent send_type? ","node parent ","node parent  loc selector ","node parent  loc ","node parent  send_type? ","node node parent  "]}," RuboCop Cop Layout ElseAlignment base_range":{"type":"method","name":"base_range","children":[],"call":["(send\n  (lvar :lineage) :find) loc keyword ","(send\n  (lvar :lineage) :find) loc ","parent unless? ","parent if? ","lineage find ","node each_ancestor ","base source_range "]}," RuboCop Cop Layout ElseAlignment on_case":{"type":"method","name":"on_case","children":[],"call":[" check_alignment ","node loc else ","node loc ","node when_branches last loc keyword ","node when_branches last loc ","node when_branches last ","node when_branches ","node else? "]}," RuboCop Cop Layout ElseAlignment on_rescue":{"type":"method","name":"on_rescue","children":[],"call":[" check_alignment ","node loc else ","node loc ","node loc keyword ","parent loc begin ","parent loc "," base_for_method_definition ","parent type ","parent parent ","parent ensure_type? ","node parent ","node loc respond_to? "," base_range_of_rescue ","parent parent  loc begin ","node parent  loc begin ","parent parent  loc ","node parent  loc ","parent parent  type ","node parent  type ","parent parent  parent parent  ","node parent  node parent  ","parent parent  ensure_type? ","node parent  ensure_type? ","node parent parent  ","node node parent  "]}," RuboCop Cop Layout ElseAlignment on_if":{"type":"method","name":"on_if","children":[],"call":[" ignore_node "," on_if ","else_branch elsif? ","else_branch if_type? ","node else_branch "," check_alignment ","node loc else ","node loc "," base_range "," begins_its_line? ","node else? "," ignored_node? "," check_nested ","node elsif_conditional? "," base_range_of_if ","node else_branch  elsif? ","node else_branch  if_type? ","node node else_branch  "]}," RuboCop Cop Layout DotPosition selector_range":{"type":"method","name":"selector_range","children":[],"call":["node loc begin ","node loc ","node loc selector ","node call_type? "]}," RuboCop Cop Layout DotPosition autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector insert_after ","node receiver source_range ","node receiver ","corrector insert_before "," selector_range "," style ","corrector remove ","node loc dot ","node loc "," lambda ","node loc dot source ","dot source "," range_by_whole_lines "," processed_source [] strip == "," processed_source [] strip "," processed_source [] ","dot line - ","dot line "," processed_source ","node loc node loc dot source  ","node loc node loc dot source  source ","node loc dot source  source ","node loc dot source  line - ","node loc dot source  line "]}," RuboCop Cop Layout DotPosition correct_dot_position_style?":{"type":"method","name":"correct_dot_position_style?","children":[],"call":["dot_line != ","dot_line == "," style "]}," RuboCop Cop Layout DotPosition line_between?":{"type":"method","name":"line_between?","children":[],"call":["(send\n  (lvar :first_line) :-\n  (lvar :second_line)) > ","first_line - "]}," RuboCop Cop Layout DotPosition proper_dot_position?":{"type":"method","name":"proper_dot_position?","children":[],"call":[" correct_dot_position_style? "," line_between? ","node loc dot line ","node loc dot ","node loc ","selector_line == "," selector_range line "," selector_range ","node receiver source_range end line ","node receiver source_range end ","node receiver source_range ","node receiver ","(lvar :receiver_line) max "," receiver_end_line ","node receiver loc first_line == ","node receiver loc first_line ","node receiver loc "," heredoc? ","selector_range line "," same_line? "," end_range "," selector_range line  == ","selector_range line  == ","  selector_range  line ","  selector_range  ","(lvar :node receiver source_range end line ) max ","(lvar : receiver_end_line ) max "," selector_range  line "]}," RuboCop Cop Layout DotPosition message":{"type":"method","name":"message","children":[],"call":["Place the . on the  + "," style ","(str \"Place the \") + ","node loc dot source ","node loc dot ","node loc ","dot source ","node loc node loc dot source  source ","node loc node loc dot source  ","node loc dot source  source "]}," RuboCop Cop Layout DotPosition on_send":{"type":"method","name":"on_send","children":[],"call":[" opposite_style_detected "," add_offense "," correct_style_detected "," proper_dot_position? ","node dot? "," ampersand_dot? "," autocorrect "," message ","node loc dot ","node loc "," proper_node loc dot _position? ","node node loc dot ? "," ampersand_node loc dot ? ","  message  ","node loc node loc dot  "]}," RuboCop Cop Layout CommentIndentation two_alternatives?":{"type":"method","name":"two_alternatives?","children":[],"call":["line =~ ","(str \"^\\\\s*(else|elsif|when|rescue|ensure)\\\\b\") match? "]}," RuboCop Cop Layout CommentIndentation less_indented?":{"type":"method","name":"less_indented?","children":[],"call":["line =~ ","(str \"^\\\\s*(end\\\\b|[)}\\\\]])\") match? ","(str \"\\\\A\\\\s*(\") match? ","(str \"\\\\A\\\\s*(end\\\\b|[)}\\\\]])\") match? "," config for_cop [] == "," config for_cop [] "," config for_cop "," config "]}," RuboCop Cop Layout CommentIndentation correct_indentation":{"type":"method","name":"correct_indentation","children":[],"call":["indentation_of_next_line + "," configured_indentation_width "," less_indented? ","next_line =~ ","next_line =~  + "]}," RuboCop Cop Layout CommentIndentation line_after_comment":{"type":"method","name":"line_after_comment","children":[],"call":["line blank? ! ","line blank? ","lines [] find ","lines [] ","comment loc line ","comment loc "," processed_source lines "," processed_source "," processed_source lines  [] find "," processed_source lines  [] "," processed_source  processed_source lines  "]}," RuboCop Cop Layout CommentIndentation own_line_comment?":{"type":"method","name":"own_line_comment?","children":[],"call":["own_line =~ "," processed_source lines [] ","comment loc line - ","comment loc line ","comment loc "," processed_source lines "," processed_source ","(str \"\\\\A\\\\s*#\") match? "," processed_source lines []  =~ "]}," RuboCop Cop Layout CommentIndentation check":{"type":"method","name":"check","children":[],"call":[" add_offense "," format ","comment loc expression ","comment loc ","column == "," configured_indentation_width "," two_alternatives? ","@column_delta zero? ","correct_comment_indentation - ","comment loc column "," correct_indentation "," line_after_comment "," own_line_comment? "," message "," autocorrect "," correctly_aligned_with_preceding_comment? ","comment loc column  == ","correct_comment_indentation -  zero? ","@comment loc column _delta zero? "," correct_indentation  - ","comment loc comment loc column  "]}," RuboCop Cop Layout CommentIndentation investigate":{"type":"method","name":"investigate","children":[],"call":[" check ","processed_source comments each ","processed_source comments ","processed_source each_comment "]}," RuboCop Cop Layout ClosingParenthesisIndentation line_break_after_left_paren?":{"type":"method","name":"line_break_after_left_paren?","children":[],"call":["elements first loc line > ","left_paren line ","elements first loc line ","elements first loc ","elements first "]}," RuboCop Cop Layout ClosingParenthesisIndentation fixed_parameter_indentation?":{"type":"method","name":"fixed_parameter_indentation?","children":[],"call":[" config for_cop [] == "," config for_cop [] "," config for_cop "," config "]}," RuboCop Cop Layout ClosingParenthesisIndentation expected_column":{"type":"method","name":"expected_column","children":[],"call":["left_paren column ","left_paren source_line =~ ","left_paren source_line "," line_break_after_left_paren? "," fixed_parameter_indentation? ","node send_type? ","node loc begin ","node loc ","new_indent < ","source_indent - "," indentation_width "," processed_source line_indentation "," last_argument_line "," processed_source "," all_elements_aligned? "," line_break_after_left_paren? ! "," first_argument_line ","new_indent negative? "," configured_indentation_width ","node loc begin  column ","node loc begin  source_line =~ ","node loc begin  source_line "," line_break_after_node loc begin ? ","source_indent -  < "," processed_source line_indentation  - "," line_break_after_node loc begin ? ! ","source_indent -  negative? "]}," RuboCop Cop Layout ClosingParenthesisIndentation check":{"type":"method","name":"check","children":[],"call":[" add_offense ","correct_column == ","left_paren column ","node loc begin ","node loc ","@column_delta zero? ","correct_column - ","right_paren column "," expected_column "," begins_its_line? ","node loc end "," message "," check_for_elements "," check_for_no_elements ","elements empty? "," expected_column  == ","node loc begin  column ","correct_column -  zero? "," expected_column  - ","node loc end  column "]}," RuboCop Cop Layout ClosingParenthesisIndentation on_method_def":{"type":"method","name":"on_method_def","children":[],"call":[" check ","args children "]}," RuboCop Cop Layout ClosingParenthesisIndentation on_begin":{"type":"method","name":"on_begin","children":[],"call":[" check ","node children "]}," RuboCop Cop Layout ClosingParenthesisIndentation on_send":{"type":"method","name":"on_send","children":[],"call":[" check ","node arguments "]}," RuboCop Cop Layout CaseIndentation replacement":{"type":"method","name":"replacement","children":[],"call":["  * "," indentation_width "," base_column "," cop_config [] == "," cop_config [] "," style_parameter_name "," cop_config ","node each_ancestor first ","node each_ancestor "," base_ base_column  "]}," RuboCop Cop Layout CaseIndentation whitespace_range":{"type":"method","name":"whitespace_range","children":[],"call":[" range_between ","begin_pos - ","node loc keyword begin_pos ","node loc keyword ","node loc ","node location keyword column ","node location keyword ","node location ","node loc keyword begin_pos  - ","node loc keyword node loc keyword begin_pos  "]}," RuboCop Cop Layout CaseIndentation autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," replacement "," lambda ","whitespace source strip empty? ","whitespace source strip ","whitespace source "," whitespace_range "," whitespace_range  source strip empty? "," whitespace_range  source strip "," whitespace_range  source ","  whitespace_range _range "]}," RuboCop Cop Layout CaseIndentation base_column":{"type":"method","name":"base_column","children":[],"call":["case_node location end column ","case_node location end ","case_node location ","case_node location keyword column ","case_node location keyword "]}," RuboCop Cop Layout CaseIndentation message":{"type":"method","name":"message","children":[],"call":[" format "," indent_one_step? "]}," RuboCop Cop Layout CaseIndentation incorrect_style":{"type":"method","name":"incorrect_style","children":[],"call":[" unrecognized_style_detected "," opposite_style_detected ","when_column == "," add_offense "," message "," style "," base_column "," alternative_style ","when_node parent ","when_node loc keyword column ","when_node loc keyword ","when_node loc ","corrector replace "," replacement ","whitespace source strip empty? ","whitespace source strip ","whitespace source "," whitespace_range "," detect_incorrect_style "," format "," indent_one_step? ","when_node loc keyword column  == ","  format  ","  base_column  "," whitespace_range  source strip empty? "," whitespace_range  source strip "," whitespace_range  source ","  whitespace_range _range "]}," RuboCop Cop Layout CaseIndentation indentation_width":{"type":"method","name":"indentation_width","children":[],"call":[" configured_indentation_width "," indent_one_step? "]}," RuboCop Cop Layout CaseIndentation indent_one_step?":{"type":"method","name":"indent_one_step?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Layout CaseIndentation check_when":{"type":"method","name":"check_when","children":[],"call":[" incorrect_style "," correct_style_detected ","when_column == ","base_column + "," indentation_width "," base_column "," style ","when_node parent ","when_node loc keyword column ","when_node loc keyword ","when_node loc ","when_node loc keyword column  == "," base_column  + ","  base_column  "]}," RuboCop Cop Layout CaseIndentation on_case":{"type":"method","name":"on_case","children":[],"call":[" check_when ","case_node each_when ","case_node single_line? "," end_and_last_conditional_same_line? "," enforced_style_end? "]}," RuboCop Cop Layout BlockEndNewline indentation_of_block_start_line":{"type":"method","name":"indentation_of_block_start_line","children":[],"call":["match begin ","(str \"\\\\S.*\") match ","node loc begin source_line ","node loc begin ","node loc ","(str \"\\S.*\") match  begin ","(str \"\\\\S.*\") (str \"\\S.*\") match  "]}," RuboCop Cop Layout BlockEndNewline message":{"type":"method","name":"message","children":[],"call":[" format ","node loc end column + ","node loc end column ","node loc end ","node loc ","node loc end line "]}," RuboCop Cop Layout BlockEndNewline autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector insert_before ","\n + ","  * ","node loc end ","node loc "," indentation_of_block_start_line "," lambda ","corrector replace "," delimiter_range ","\n + + ","node loc end source "," offset ","  indentation_of_block_start_line _of_block_start_line "]}," RuboCop Cop Layout BlockEndNewline on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense ","end_loc source_line =~ ","end_loc source ","end_loc source_line ","node loc end ","node loc ","node single_line? "," begins_its_line? ","corrector replace "," offset ","node loc end source "," delimiter_range "," message "," register_offense ","offense_range source lstrip start_with? ","offense_range source lstrip ","offense_range source "," offense_range ","node loc end  source_line =~ ","node loc end  source ","node loc end  source_line "," offense_range  source lstrip start_with? "," offense_range  source lstrip "," offense_range  source ","  offense_range  "]}," RuboCop Cop Layout AlignParameters target_method_lineno":{"type":"method","name":"target_method_lineno","children":[],"call":["node loc begin line ","node loc begin ","node loc ","node loc selector line ","node loc selector ","node loc keyword line ","node loc keyword ","node defs_type? ","node def_type? "]}," RuboCop Cop Layout AlignParameters base_column":{"type":"method","name":"base_column","children":[],"call":[" display_column ","args first source_range ","args first ","indentation_of_line + "," configured_indentation_width ","(str \"\\\\S.*\") match begin ","(str \"\\\\S.*\") match ","node source_range source_buffer source_line ","node source_range source_buffer ","node source_range "," target_method_lineno "," fixed_indentation? ","(str \"\\S.*\") match begin  + ","indentation_of_node source_range source_buffer source_line  + ","node source_range source_buffer source_node source_range source_buffer source_line  "," target_method_node source_range source_buffer source_line no "," target_method_ target_method_lineno  "]}," RuboCop Cop Layout AlignParameters fixed_indentation?":{"type":"method","name":"fixed_indentation?","children":[],"call":[" cop_config [] == "," cop_config [] "," cop_config "]}," RuboCop Cop Layout AlignParameters message":{"type":"method","name":"message","children":[],"call":[" format "," fixed_indentation? ","node parent send_type? ","node parent ","node parent csend_type? "]}," RuboCop Cop Layout AlignParameters on_method_def":{"type":"method","name":"on_method_def","children":[],"call":[" check_alignment "," base_column ","args size < ","args size ","args children ","args children  size < ","args children  size ","args children  children "]}," RuboCop Cop Layout AlignParameters on_send":{"type":"method","name":"on_send","children":[],"call":[" check_alignment "," base_column ","node arguments ","node method? ","node arguments size < ","node arguments size ","node send_type? "]}," RuboCop Cop Layout AlignHash good_alignment?":{"type":"method","name":"good_alignment?","children":[],"call":[" column_deltas values all? "," column_deltas values "," column_deltas ","column_deltas values all? ","column_deltas values "]}," RuboCop Cop Layout AlignHash adjust":{"type":"method","name":"adjust","children":[],"call":["corrector remove "," range_between ","range begin_pos ","range begin_pos - ","delta abs ","delta < ","corrector insert_before ","  * ","delta > ","delta negative? ","delta positive? ","  range_between _between "," range_between  begin_pos "," range_between  begin_pos - "]}," RuboCop Cop Layout AlignHash new_alignment":{"type":"method","name":"new_alignment","children":[],"call":[" raise "," cop_config [] "," cop_config ","SeparatorAlignment  new ","TableAlignment  new ","KeyAlignment  new ","formats uniq map ","formats uniq ","formats is_a? "," cop_config []  uniq map "," cop_config []  uniq "," cop_config []  is_a? "]}," RuboCop Cop Layout AlignHash correct_key_value":{"type":"method","name":"correct_key_value","children":[],"call":[" adjust "," lambda ","key_column -@ ","key_delta < ","key column "," column_deltas [] "," column_deltas ","delta [] ","key column  -@ ","key_column -@  < "]}," RuboCop Cop Layout AlignHash correct_no_value":{"type":"method","name":"correct_no_value","children":[],"call":[" adjust "," lambda "]}," RuboCop Cop Layout AlignHash autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" correct_key_value ","node loc operator ","node loc ","node value source_range ","node value ","node key source_range ","node key "," correct_no_value ","node source_range ","node value ! "," column_deltas [] "," column_deltas "," correct_node ","delta nil? "," column_deltas [] [] "," alignment_for first class "," alignment_for first "," alignment_for "," column_ column_deltas [] [] s [] "," column_ column_deltas [] [] s "," column_deltas [] []  nil? "," column_ column_deltas [] [] s [] [] "]}," RuboCop Cop Layout AlignHash alignment_for_colons":{"type":"method","name":"alignment_for_colons","children":[],"call":[" new_alignment "]}," RuboCop Cop Layout AlignHash alignment_for_hash_rockets":{"type":"method","name":"alignment_for_hash_rockets","children":[],"call":[" new_alignment "]}," RuboCop Cop Layout AlignHash alignment_for":{"type":"method","name":"alignment_for","children":[],"call":[" alignment_for_colons "," alignment_for_hash_rockets ","pair hash_rocket? "]}," RuboCop Cop Layout AlignHash ignore_hash_argument?":{"type":"method","name":"ignore_hash_argument?","children":[],"call":["node braces? ! ","node braces? "," cop_config [] "," cop_config "]}," RuboCop Cop Layout AlignHash check_pairs":{"type":"method","name":"check_pairs","children":[],"call":[" add_offense "," good_alignment? "," column_deltas= "," alignment_for deltas "," alignment_for ","node children each ","node children "," alignment_for deltas_for_first_pair ","node pairs first ","node pairs "," add_offences "," check_delta ","alignment deltas "," alignment_for each ","alignment deltas_for_first_pair ","hash []= ","Hash  new "," offences_by= "," reset! "," column_alignment deltas s= "," column_alignment deltas_for_first_pair s= "," alignment_for alignment deltas s "," alignment_for alignment deltas_for_first_pair s "," alignment_for deltas_for_node pairs first  "," alignment_for alignment deltas s_for_first_pair "," alignment_for alignment deltas_for_first_pair s_for_first_pair "," check_alignment deltas  "," check_alignment deltas_for_first_pair  ","alignment alignment deltas s ","alignment alignment deltas_for_first_pair s ","alignment deltas_for_node pairs first  ","alignment alignment deltas s_for_first_pair ","alignment alignment deltas_for_first_pair s_for_first_pair "]}," RuboCop Cop Layout AlignHash double_splat?":{"type":"method","name":"double_splat?","children":[],"call":["node children last is_a? ","node children last ","node children "]}," RuboCop Cop Layout AlignHash on_hash":{"type":"method","name":"on_hash","children":[],"call":[" check_pairs "," alignment_for_colons checkable_layout? "," alignment_for_colons "," alignment_for_hash_rockets checkable_layout? "," alignment_for_hash_rockets ","node single_line? ","node pairs empty? ","node pairs "," ignored_node? ","node empty? ","a checkable_layout? "," alignment_for_colons any? "," alignment_for_hash_rockets any? "]}," RuboCop Cop Layout AlignHash on_send":{"type":"method","name":"on_send","children":[],"call":[" ignore_node "," ignore_hash_argument? ","last_argument hash_type? ","node last_argument "," double_splat? ","node arguments? ","node last_argument  hash_type? ","node node last_argument  "]}," RuboCop Cop Layout AlignArray on_array":{"type":"method","name":"on_array","children":[],"call":[" check_alignment ","node children "]}," RuboCop Cop Layout AccessModifierIndentation unexpected_indent_offset":{"type":"method","name":"unexpected_indent_offset","children":[],"call":[" configured_indentation_width - "," expected_indent_offset "," configured_indentation_width "]}," RuboCop Cop Layout AccessModifierIndentation expected_indent_offset":{"type":"method","name":"expected_indent_offset","children":[],"call":[" configured_indentation_width "," style == "," style "]}," RuboCop Cop Layout AccessModifierIndentation message":{"type":"method","name":"message","children":[],"call":[" format ","node loc selector source ","node loc selector ","node loc "," style capitalize "," style ","range source "]}," RuboCop Cop Layout AccessModifierIndentation check_modifier":{"type":"method","name":"check_modifier","children":[],"call":[" unrecognized_style_detected "," opposite_style_detected ","offset == "," unexpected_indent_offset "," add_offense "," correct_style_detected ","@column_delta zero? "," expected_indent_offset - "," expected_indent_offset ","access_modifier_start_col - ","send_node source_range column ","send_node source_range "," column_offset_between "," autocorrect ","access_modifier_start_col -  == "," column_offset_between  == "," unexpected_indent_access_modifier_start_col -  "," unexpected_indent_ column_offset_between  "," expected_indent_offset -  zero? "," expected_indent_access_modifier_start_col -  - "," expected_indent_ column_offset_between  - "," expected_indent_access_modifier_start_col -  "," expected_indent_ column_offset_between  ","send_node source_range column  - "," column_access_modifier_start_col - _between "," column_ column_offset_between _between "]}," RuboCop Cop Layout AccessModifierIndentation check_body":{"type":"method","name":"check_body","children":[],"call":[" check_modifier ","modifiers each ","node source_range column ","node source_range "," modifier_node? ","body each_child_node select ","body each_child_node ","body nil? ","body begin_type? ","node loc end ","node loc ","body each_child_node select  each "]}," RuboCop Cop Layout AccessModifierIndentation on_block":{"type":"method","name":"on_block","children":[],"call":[" check_body ","node body ","node class_constructor? "]}," RuboCop Cop Layout AccessModifierIndentation on_module":{"type":"method","name":"on_module","children":[],"call":[" check_body "]}," RuboCop Cop Layout AccessModifierIndentation on_sclass":{"type":"method","name":"on_sclass","children":[],"call":[" check_body "]}," RuboCop Cop Layout AccessModifierIndentation on_class":{"type":"method","name":"on_class","children":[],"call":[" check_body ","node body ","node body begin_type? "]}," RuboCop Cop Cop autocorrect_incompatible_with":{"type":"method","name":"autocorrect_incompatible_with","children":[],"call":[]}," RuboCop ConfigLoader handle_disabled_by_default":{"type":"method","name":"handle_disabled_by_default","children":[],"call":["(pair\n  (str \"Enabled\")\n  (true)) merge "," transform ","params []= "," default_configuration [] [] "," default_configuration [] "," default_configuration ","cop start_with? ","dept + ","new_default_configuration each ","dept_params [] ","department_config each ","cop include? ","config to_hash reject ","config to_hash ","dept == "]}," RuboCop CLI validate_options_vs_config":{"type":"method","name":"validate_options_vs_config","children":[],"call":[" raise ","@config_store for for_all_cops [] ! ","@config_store for for_all_cops [] ","@config_store for for_all_cops ","@config_store for ","Dir  pwd ","@options [] ","@config_store for_dir for_all_cops [] ! ","@config_store for_dir for_all_cops [] ","@config_store for_dir for_all_cops ","@config_store for_dir ","@config_store for_pwd for_all_cops [] ! ","@config_store for_pwd for_all_cops [] ","@config_store for_pwd for_all_cops ","@config_store for_pwd "]}," RuboCop AST SuperNode node_parts":{"type":"method","name":"node_parts","children":[],"call":[" to_a "]}," RuboCop AST SuperNode method?":{"type":"method","name":"method?","children":[],"call":[" method_name == ","name to_sym "," method_name "]}," RuboCop AST SuperNode arguments":{"type":"method","name":"arguments","children":[],"call":[" node_parts "]}," RuboCop AST SuperNode method_name":{"type":"method","name":"method_name","children":[],"call":[]}," RuboCop AST SendNode enumerator_method?":{"type":"method","name":"enumerator_method?","children":[],"call":[" method_name to_s start_with? "," method_name to_s "," method_name ","ENUMERATOR_METHODS  include? "]}," RuboCop AST SendNode assignment_method?":{"type":"method","name":"assignment_method?","children":[],"call":[" method_name to_s end_with? "," method_name to_s "," method_name "," comparison_method? ! "," comparison_method? "]}," RuboCop AST SendNode comparison_method?":{"type":"method","name":"comparison_method?","children":[],"call":["COMPARISON_OPERATORS  include? "," method_name "]}," RuboCop AST ParameterizedNode block_node":{"type":"method","name":"block_node","children":[],"call":[" parent "," block_literal? "]}," RuboCop AST ParameterizedNode block_literal?":{"type":"method","name":"block_literal?","children":[],"call":[" eql? "," parent send_node "," parent "," parent block_type? "]}," RuboCop AST ParameterizedNode block_argument?":{"type":"method","name":"block_argument?","children":[],"call":[" last_argument block_pass_type? "," last_argument "," arguments? "," last_argument blockarg_type? "]}," RuboCop AST ParameterizedNode splat_argument?":{"type":"method","name":"splat_argument?","children":[],"call":[" arguments any? "," arguments "," arguments? "]}," RuboCop AST ParameterizedNode arguments?":{"type":"method","name":"arguments?","children":[],"call":[" arguments empty? ! "," arguments empty? "," arguments "]}," RuboCop AST ParameterizedNode last_argument":{"type":"method","name":"last_argument","children":[],"call":[" arguments [] "," arguments "]}," RuboCop AST ParameterizedNode first_argument":{"type":"method","name":"first_argument","children":[],"call":[" arguments [] "," arguments "]}," RuboCop AST ParameterizedNode parenthesized?":{"type":"method","name":"parenthesized?","children":[],"call":[" loc end is? "," loc end "," loc "]}," RuboCop AST BlockNode node_parts":{"type":"method","name":"node_parts","children":[],"call":[" to_a "]}," RuboCop AST BlockNode lambda?":{"type":"method","name":"lambda?","children":[],"call":[" send_node method? "," send_node "]}," RuboCop AST BlockNode multiline?":{"type":"method","name":"multiline?","children":[],"call":[" single_line? ! "," single_line? "]}," RuboCop AST BlockNode single_line?":{"type":"method","name":"single_line?","children":[],"call":[" loc begin line == "," loc end line "," loc end "," loc "," loc begin line "," loc begin "]}," RuboCop AST BlockNode closing_delimiter":{"type":"method","name":"closing_delimiter","children":[],"call":[" delimiters last "," delimiters "]}," RuboCop AST BlockNode opening_delimiter":{"type":"method","name":"opening_delimiter","children":[],"call":[" delimiters first "," delimiters "]}," RuboCop AST BlockNode delimiters":{"type":"method","name":"delimiters","children":[],"call":["(send\n  (send\n    (send nil :loc) :begin) :source) freeze "," loc end source "," loc end "," loc "," loc begin source "," loc begin "]}," RuboCop AST BlockNode keywords?":{"type":"method","name":"keywords?","children":[],"call":[" loc end is? "," loc end "," loc "]}," RuboCop AST BlockNode braces?":{"type":"method","name":"braces?","children":[],"call":[" loc end is? "," loc end "," loc "]}," RuboCop AST BlockNode arguments?":{"type":"method","name":"arguments?","children":[],"call":[" arguments empty? ! "," arguments empty? "," arguments "]}," RuboCop AST BlockNode body":{"type":"method","name":"body","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST BlockNode arguments":{"type":"method","name":"arguments","children":[],"call":[" node_parts [] "," node_parts "," numblock_type? "]}," RuboCop AST BlockNode send_node":{"type":"method","name":"send_node","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST ArgsNode size":{"type":"method","name":"size","children":[],"call":[" to_a size "," to_a "]}," RuboCop AST ArgsNode empty?":{"type":"method","name":"empty?","children":[],"call":[" to_a empty? "," to_a "]}," RuboCop Cop InternalAffairs UselessMessageAssertion relevant_file?":{"type":"method","name":"relevant_file?","children":[],"call":["file end_with? "]}," RuboCop Cop InternalAffairs UselessMessageAssertion assertions_using_described_class_msg":{"type":"method","name":"assertions_using_described_class_msg","children":[],"call":["node ancestors any? "," method ","node ancestors "," described_class_msg reject "," described_class_msg "," processed_source ast "," processed_source "," rspec_expectation_on_msg? "]}," RuboCop Cop InternalAffairs UselessMessageAssertion contains_described_class_msg?":{"type":"method","name":"contains_described_class_msg?","children":[],"call":[" described_class_msg any? "," described_class_msg "]}," RuboCop Cop InternalAffairs UselessMessageAssertion investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense "," assertions_using_described_class_msg each "," assertions_using_described_class_msg "]}," RuboCop Cop InternalAffairs NodeTypePredicate on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format ","Parser Meta NODE_TYPES  include? "," node_type_check ","corrector replace ","node loc expression with ","receiver loc expression end_pos + ","receiver loc expression end_pos ","receiver loc expression ","receiver loc ","node loc expression ","node loc ","node source_range with ","receiver source_range end_pos + ","receiver source_range end_pos ","receiver source_range ","node source_range ","node source_node loc expression with  with ","node source_node source_range with  with ","receiver source_node loc expression with  end_pos + ","receiver source_node source_range with  end_pos + ","receiver source_node loc expression with  end_pos ","receiver source_node source_range with  end_pos ","receiver source_node loc expression with  ","receiver source_node source_range with  ","node source_node loc expression with  ","node source_node source_range with  "]}," RuboCop Cop Generator snake_case":{"type":"method","name":"snake_case","children":[],"call":["camel_case_string gsub gsub downcase ","camel_case_string gsub gsub ","camel_case_string gsub ","camel_case_string == ","camel_case_string gsub gsub gsub downcase ","camel_case_string gsub gsub gsub "]}," RuboCop Cop Generator source_path":{"type":"method","name":"source_path","children":[],"call":["File  join "," snake_case "," badge cop_name to_s "," badge cop_name "," badge "," badge department to_s "," badge department "]}," RuboCop Cop Generator spec_path":{"type":"method","name":"spec_path","children":[],"call":["File  join "," snake_case "," badge cop_name to_s "," badge cop_name "," badge "," badge department to_s "," badge department "]}," RuboCop Cop Generator require_path":{"type":"method","name":"require_path","children":[],"call":[" source_path sub sub "," source_path sub "," source_path "]}," RuboCop Cop Generator generate":{"type":"method","name":"generate","children":[],"call":[" format "," badge cop_name "," badge "," badge department "," badge department to_s gsub "," badge department to_s "]}," RuboCop Cop Generator generated_spec":{"type":"method","name":"generated_spec","children":[],"call":[" generate "]}," RuboCop Cop Generator generated_source":{"type":"method","name":"generated_source","children":[],"call":[" generate "]}," RuboCop Cop Generator write_unless_file_exists":{"type":"method","name":"write_unless_file_exists","children":[],"call":["File  write "," raise ","File  exist? ","FileUtils  mkdir_p ","File  dirname "," exit! "," warn "," output puts "," output ","FileUtils  mkFile  dirname _p ","File  File  dirname name "]}," RuboCop Cop Generator todo":{"type":"method","name":"todo","children":[],"call":["(str \"          created\\n\") strip_indent "," require_path "," badge cop_name "," badge "," spec_path "," source_path ","(str \"          Files created:\\n\") strip_indent ","(str \"          Do 3 steps:\\n\") strip_indent "," github_user "]}," RuboCop Cop Generator write_spec":{"type":"method","name":"write_spec","children":[],"call":[" write_unless_file_exists "," generated_spec "," spec_path "]}," RuboCop Cop Generator write_source":{"type":"method","name":"write_source","children":[],"call":[" write_unless_file_exists "," generated_source "," source_path "]}," RuboCop Cop Generator initialize":{"type":"method","name":"initialize","children":[],"call":[" raise "," badge qualified? "," badge ","Badge  parse "]}," Rubocop Cop VariableInterpolation inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","s [] [] [] lineno ","s [] [] [] ","s [] [] ","s [] "," each ","interpolation [] lineno ","interpolation [] ","s [] [] == ","s [] [] [] s [] [] [] lineno  ","s [] [] [] interpolation [] lineno  ","interpolation [] s [] [] [] lineno  ","interpolation [] interpolation [] lineno  ","s [] []  [] lineno ","s []  [] lineno ","s [] []  [] ","s []  [] "]}," Rubocop Cop Semicolon inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","t pos lineno ","t pos ","t type == ","t type ","tokens [] ","tokens each_index ","source [] =~ ","source [] ","t pos lineno - "," handle_exceptions_to_the_rule ","(str \"def\") include? ","tokens [] text "," index_of_first_token_on_line ","t pos lineno == ","tokens each_with_index ","line =~ ","source each_with_index ","expr_on_line size > ","expr_on_line size ","lines each ","exprs_lines group_by ","e loc expression line ","e loc expression ","e loc ","exprs map ","exprs size < ","exprs size ","node children "," on_node ","tokens []  pos lineno ","tokens []  pos ","tokens []  tokens [] ype == ","tokens []  tokens [] ype ","tokens [] okens [] ","tokens [] okens each_index ","tokens []  pos lineno - "," handle_exceptokens [] ions_tokens [] o_tokens [] he_rule ","(stokens [] r \"def\") include? ","tokens [] okens [] tokens [] extokens []  "," index_of_firstokens [] _tokens [] oken_on_line ","tokens []  pos lineno == ","tokens [] okens each_witokens [] h_index ","source each_witokens [] h_index ","node children _lines group_by ","node children  map ","node children  size < ","node children  size "]}," Rubocop Cop FavorSprintf matching?":{"type":"method","name":"matching?","children":[],"call":["op2 [] == ","op2 [] ","op1 [] == ","op1 [] ","operator == "]}," Rubocop Cop FavorSprintf inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","lineno_struct lineno ","lineno_struct respond_to? ","s [] [] [] ","s [] [] ","s [] ","s [] [] [] [] ","op1 [] == ","op1 [] "," matching? "," each ","pos lineno "," all_positions first "," all_positions ","lineno_struct lineno _struct lineno_struct lineno  ","pos lineno _struct pos lineno  ","s [] [] []  lineno ","s [] [] [] []  lineno ","lineno_struct lineno _struct respond_to? ","pos lineno _struct respond_to? ","s [] [] []  respond_to? ","s [] [] [] []  respond_to? ","s []  [] == ","s []  [] ","pos lineno_struct lineno  ","pos pos lineno  "," all_positions first  lineno "," all_ all_positions first itions first "," all_ all_positions first itions "]}," Rubocop Cop Alias inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","s [] [] [] [] lineno ","s [] [] [] [] ","s [] [] [] ","s [] [] ","s [] "," each ","t pos lineno ","t pos ","t text == ","t text ","t type == ","t type ","tokens [] ","tokens each_index "," each_keyword ","s [] [] [] [] s [] [] [] [] lineno  ","t pos s [] [] [] [] lineno  ","tokens []  pos lineno ","tokens []  pos ","tokens []  tokens [] extokens []  == ","tokens []  tokens [] extokens []  ","tokens []  tokens [] ype == ","tokens []  tokens [] ype ","tokens [] okens [] ","tokens [] okens each_index "]}," Rubocop CLI ruby_files":{"type":"method","name":"ruby_files","children":[],"call":["rb flatten ","rb << ","(send\n  (const nil :File) :open\n  (lvar :file)) =~ ","f readline ","File  open ","File  extname == ","File  extname ","files select ","FileTest  directory? ","Dir  [] reject ","Dir  [] "," log_error ","file inspect ","(send\n  (lvar :rb) :reject) uniq ","config file_to_exclude? ","ConfigStore  for ","rb reject ","config file_to_include? "," excluded_file? "," excluded_file? ! ","FileTest  file? ","Dir  [] select ","ConfigStore  for  file_to_exclude? ","ConfigStore  for  file_to_include? "]}," RuboCop NodePattern Compiler emit_guard_clause":{"type":"method","name":"emit_guard_clause","children":[],"call":[]}," RuboCop Formatter TapFormatter message":{"type":"method","name":"message","children":[],"call":[" annotate_message ","offense message ","offense corrected? ","offense corrected_with_todo? ","offense correctable? "]}," RuboCop Formatter TapFormatter annotate_message":{"type":"method","name":"annotate_message","children":[],"call":["msg gsub "]}," RuboCop Formatter TapFormatter report_offense":{"type":"method","name":"report_offense","children":[],"call":[" report_highlighted_area ","offense highlighted_area "," report_line ","offense location "," valid_line? "," output printf "," message "," colored_severity_code ","offense real_column ","offense line "," cyan "," smart_path "," output "]}," RuboCop Formatter TapFormatter report_highlighted_area":{"type":"method","name":"report_highlighted_area","children":[],"call":[" output puts ","^ * ","highlighted_area size ","  * ","highlighted_area begin_pos "," output ","Unicode DisplayWidth  of ","highlighted_area source ","highlighted_area source_buffer slice ","highlighted_area source_buffer "]}," RuboCop Formatter TapFormatter report_line":{"type":"method","name":"report_line","children":[],"call":[" output puts "," yellow "," output ","location first_line == ","location last_line ","location first_line ","location source_line ","location single_line? ","location location source_line  "]}," RuboCop Formatter TapFormatter file_finished":{"type":"method","name":"file_finished","children":[],"call":[" report_file "," count_stats "," output puts "," smart_path "," output ","offenses empty? "]}," RuboCop Formatter TapFormatter started":{"type":"method","name":"started","children":[],"call":[" output puts ","target_files size "," output "]}," RuboCop Cop Util scrub_string":{"type":"method","name":"scrub_string","children":[],"call":["string encode encode ","string encode ","string scrub ","string respond_to? "]}," RuboCop Cop Team collate_corrections":{"type":"method","name":"collate_corrections","children":[],"call":["skips merge ","cop class autocorrect_incompatible_with ","cop class ","corrector corrections concat ","cop corrections ","corrector corrections ","skips include? ","cop corrections empty? ","cops each ","Set  new ","corrector merge! "," suppress_clobbering "," each_corrector ","Corrector  new ","report processed_source ","corrector import! ","offset positive? ","Set  new  merge ","Corrector  new  corrections concat ","Corrector  new  corrections ","Set  new  include? ","Corrector  new  merge! "," each_Corrector  new  ","Corrector  new  import! "]}," RuboCop Cop Style ZeroLengthPredicate check_nonzero_length_predicate":{"type":"method","name":"check_nonzero_length_predicate","children":[],"call":[" add_offense "," format "," nonzero_length_predicate "," non_polymorphic_collection? ","node parent ","LENGTH_METHODS  include? ","node method_name ","corrector replace "," replacement ","  nonzero_length_predicate  "]}," RuboCop Cop Style ZeroLengthPredicate check_zero_length_predicate":{"type":"method","name":"check_zero_length_predicate","children":[],"call":[" add_offense "," format "," zero_length_predicate "," non_polymorphic_collection? ","node parent ","LENGTH_METHODS  include? ","node method_name ","corrector replace "," replacement ","node loc selector join ","node parent source_range end ","node parent source_range ","node loc selector ","node loc "," add_node loc selector join  ","  zero_length_predicate  "]}," RuboCop Cop Style YodaCondition noncommutative_operator?":{"type":"method","name":"noncommutative_operator?","children":[],"call":["NONCOMMUTATIVE_OPERATORS  include? ","node method_name "]}," RuboCop Cop Style YodaCondition non_equality_operator?":{"type":"method","name":"non_equality_operator?","children":[],"call":["EQUALITY_OPERATORS  include? ! ","EQUALITY_OPERATORS  include? ","node method_name "]}," RuboCop Cop Style YodaCondition check_equality_only?":{"type":"method","name":"check_equality_only?","children":[],"call":[" style == "," style "]}," RuboCop Cop Style YodaCondition message":{"type":"method","name":"message","children":[],"call":[" format ","node source "]}," RuboCop Cop Style VariableInterpolation message":{"type":"method","name":"message","children":[],"call":[" format ","node source ","range source "]}," RuboCop Cop Style TrailingUnderscoreVariable range_for_parentheses":{"type":"method","name":"range_for_parentheses","children":[],"call":[" range_between ","left loc expression end_pos - ","left loc expression end_pos ","left loc expression ","left loc ","offense source_range begin_pos - ","offense source_range begin_pos ","offense source_range ","left source_range end_pos - ","left source_range end_pos ","left source_range "]}," RuboCop Cop Style TrailingUnderscoreVariable left_side_range":{"type":"method","name":"left_side_range","children":[],"call":[" range_between ","right source_range begin_pos ","right source_range ","left source_range begin_pos ","left source_range "]}," RuboCop Cop Style TrailingUnderscoreVariable unused_variables_only?":{"type":"method","name":"unused_variables_only?","children":[],"call":["offense source_range == ","variables first source_range ","variables first ","offense source_range "]}," RuboCop Cop Style TernaryParentheses non_complex_send?":{"type":"method","name":"non_complex_send?","children":[],"call":["node method? ","node operator_method? ! ","node operator_method? ","node send_type? ","node call_type? "]}," RuboCop Cop Style TernaryParentheses non_complex_expression?":{"type":"method","name":"non_complex_expression?","children":[],"call":[" non_complex_send? ","NON_COMPLEX_TYPES  include? ","condition type "]}," RuboCop Cop Style StabbyLambdaParentheses stabby_lambda_with_args?":{"type":"method","name":"stabby_lambda_with_args?","children":[],"call":["node parent arguments? ","node parent "," arrow_form? ","node command? ","node stabby_lambda? ","node block_node arguments? ","node block_node ","node lambda_literal? "]}," RuboCop Cop Style StabbyLambdaParentheses message":{"type":"method","name":"message","children":[],"call":[" style == "," style "]}," RuboCop Cop Style StabbyLambdaParentheses redundant_parentheses?":{"type":"method","name":"redundant_parentheses?","children":[],"call":[" parentheses? "," style == "," style "]}," RuboCop Cop Style StabbyLambdaParentheses missing_parentheses?":{"type":"method","name":"missing_parentheses?","children":[],"call":[" parentheses? ! "," parentheses? "," style == "," style "]}," RuboCop Cop Style SingleLineMethods on_def":{"type":"method","name":"on_def","children":[],"call":[" add_offense ","node body ! ","node body "," allow_empty? ","node single_line? "," autocorrect ","node endless? "]}," RuboCop Cop Style SingleLineBlockParams eligible_method?":{"type":"method","name":"eligible_method?","children":[],"call":[" method_names include? ","node send_node method_name ","node send_node "," method_names ","node send_node receiver ","node method_name ","node receiver "]}," RuboCop Cop Style SingleLineBlockParams eligible_arguments?":{"type":"method","name":"eligible_arguments?","children":[],"call":["node arguments to_a all? ","node arguments to_a ","node arguments ","node arguments? "]}," RuboCop Cop Style SafeNavigation unsafe_method?":{"type":"method","name":"unsafe_method?","children":[],"call":["method !~ ","NIL_METHODS  include? ","send_node dot? ! ","send_node dot? "," negated? ","send_node method_name ","send_node assignment? ","send_node safe_navigation? ! ","send_node safe_navigation? "]}," RuboCop Cop Style SafeNavigation find_matching_receiver_invocation":{"type":"method","name":"find_matching_receiver_invocation","children":[],"call":[" find_matching_receiver_invocation ","receiver == ","node send_type? ","node block_type? ","node nil? ","node receiver ","node send_node receiver ","node send_node "," assignment_arithmetic_or_comparison? ","method_chain receiver ","method_chain send_node receiver ","method_chain send_node ","method_chain block_type? "," find_matching_node receiver _invocation "," find_matching_node send_node receiver _invocation "," find_matching_method_chain receiver _invocation "," find_matching_method_chain send_node receiver _invocation ","node receiver  == ","node send_node receiver  == ","method_chain receiver  == ","method_chain send_node receiver  == ","node node receiver  ","node node send_node receiver  ","node method_chain receiver  ","node method_chain send_node receiver  ","node send_node node receiver  ","node send_node node send_node receiver  ","node send_node method_chain receiver  ","node send_node method_chain send_node receiver  ","method_chain node receiver  ","method_chain node send_node receiver  ","method_chain method_chain receiver  ","method_chain method_chain send_node receiver  ","method_chain send_node node receiver  ","method_chain send_node node send_node receiver  ","method_chain send_node method_chain receiver  ","method_chain send_node method_chain send_node receiver  "]}," RuboCop Cop Style SafeNavigation extract_parts_from_and":{"type":"method","name":"extract_parts_from_and","children":[],"call":["matching_receiver parent loc selector source ","matching_receiver parent loc selector ","matching_receiver parent loc ","matching_receiver parent "," find_matching_receiver_invocation "," not_nil_check? "," cop_config [] "," cop_config "," extract_common_parts "," find_matching_receiver_invocation  parent loc selector source "," find_matching_receiver_invocation  parent loc selector "," find_matching_receiver_invocation  parent loc "," find_matching_receiver_invocation  parent "," find_ find_matching_receiver_invocation _invocation "]}," RuboCop Cop Style SafeNavigation extract_parts_from_if":{"type":"method","name":"extract_parts_from_if","children":[],"call":["matching_receiver parent loc selector source ","matching_receiver parent loc selector ","matching_receiver parent loc ","matching_receiver parent "," find_matching_receiver_invocation "," modifier_if_safe_navigation_candidate? "," extract_common_parts ","LOGIC_JUMP_KEYWORDS  include? ","receiver type "," modifier_if_safe_navigation_candidate "," ternary_safe_navigation_candidate ","node ternary? "," find_matching_receiver_invocation  parent loc selector source "," find_matching_receiver_invocation  parent loc selector "," find_matching_receiver_invocation  parent loc "," find_matching_receiver_invocation  parent "," find_ find_matching_receiver_invocation _invocation "]}," RuboCop Cop Style ReturnNil scoped_node?":{"type":"method","name":"scoped_node?","children":[],"call":["node lambda? ","node defs_type? ","node def_type? "]}," RuboCop Cop Style ReturnNil return_nil_node?":{"type":"method","name":"return_nil_node?","children":[],"call":["node children first nil_type? ","node children first ","node children ","node children empty? ! ","node children empty? "]}," RuboCop Cop Style ReturnNil correct_style?":{"type":"method","name":"correct_style?","children":[],"call":[" return_node? ! "," return_node? "," style == "," style "," return_nil_node? ! "," return_nil_node? "]}," RuboCop Cop Style ReturnNil message":{"type":"method","name":"message","children":[],"call":[" style == "," style "]}," RuboCop Cop Style ReturnNil autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node source_range "," style == "," style "," lambda "]}," RuboCop Cop Style ReturnNil on_return":{"type":"method","name":"on_return","children":[],"call":[" add_offense "," correct_style? "," chained_send? ","args_node children empty? ","args_node children "," define_method? "," scoped_node? ","node each_ancestor ","corrector replace "," style == "," style "]}," RuboCop Cop Style RegexpLiteral allowed_mixed_percent_r?":{"type":"method","name":"allowed_mixed_percent_r?","children":[],"call":[" contains_disallowed_slash? ","node multiline? "," style == "," style "]}," RuboCop Cop Style RegexpLiteral allowed_mixed_slash?":{"type":"method","name":"allowed_mixed_slash?","children":[],"call":[" contains_disallowed_slash? ! "," contains_disallowed_slash? ","node single_line? "," style == "," style "]}," RuboCop Cop Style RedundantSelf allowed_send_node?":{"type":"method","name":"allowed_send_node?","children":[],"call":["@local_variables_scopes [] include? ","node method_name ","@local_variables_scopes [] ","@allowed_send_nodes include? ","KERNEL_METHODS  include? ","node each_ancestor any? ","node each_ancestor "]}," RuboCop Cop Style RedundantSelf on_block":{"type":"method","name":"on_block","children":[],"call":[" add_scope ","@local_variables_scopes [] "]}," RuboCop Cop Style RedundantReturn message":{"type":"method","name":"message","children":[],"call":["node children size > ","node children size ","node children "," allow_multiple_return_values? ! "," allow_multiple_return_values? "]}," RuboCop Cop Style RedundantReturn allow_multiple_return_values?":{"type":"method","name":"allow_multiple_return_values?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style RedundantReturn on_def":{"type":"method","name":"on_def","children":[],"call":[" check_branch ","node body "]}," RuboCop Cop Style RedundantParentheses allowed_expression?":{"type":"method","name":"allowed_expression?","children":[],"call":[" allowed_multiple_expression? "," allowed_array_or_hash_element? "," allowed_method_call? "," allowed_ancestor? "," allowed_ternary? "]}," RuboCop Cop Style RedundantConditional configured_indentation_width":{"type":"method","name":"configured_indentation_width","children":[],"call":[]}," RuboCop Cop Style RedundantConditional indented_else_node":{"type":"method","name":"indented_else_node","children":[],"call":[" indentation "]}," RuboCop Cop Style RedundantConditional invert_expression?":{"type":"method","name":"invert_expression?","children":[],"call":[" redundant_condition? ","node unless? "," redundant_condition_inverted? ","node ternary? ","node elsif? ","node if? "]}," RuboCop Cop Style RedundantConditional replacement_condition":{"type":"method","name":"replacement_condition","children":[],"call":[" indented_else_node ","node elsif? "," invert_expression? ","node condition source ","node condition ","node node condition source  source ","node node condition source  "]}," RuboCop Cop Style RedundantConditional autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," replacement_condition ","node loc expression ","node loc "," lambda "]}," RuboCop Cop Style RedundantConditional offense?":{"type":"method","name":"offense?","children":[],"call":[" redundant_condition_inverted? "," redundant_condition? ","node modifier_form? "]}," RuboCop Cop Style RedundantConditional message":{"type":"method","name":"message","children":[],"call":[" format ","node elsif? "," replacement_condition ","  replacement_condition _condition "]}," RuboCop Cop Style RedundantConditional on_if":{"type":"method","name":"on_if","children":[],"call":[" add_offense "," offense? ","corrector replace "," replacement_condition "," message ","  message  "]}," RuboCop Cop Style RedundantBegin on_def":{"type":"method","name":"on_def","children":[],"call":[" add_offense ","node body ","node body kwbegin_type? "," check "," register_offense ","node body children one? ! ","node body children one? ","node body children ","node endless? "]}," RuboCop Cop Style OrAssignment take_variable_and_default_from_unless":{"type":"method","name":"take_variable_and_default_from_unless","children":[],"call":["node if_branch ","node else_branch "]}," RuboCop Cop Style OrAssignment take_variable_and_default_from_ternary":{"type":"method","name":"take_variable_and_default_from_ternary","children":[],"call":["if_statement else_branch "]}," RuboCop Cop Style OrAssignment autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","default source ","node source_range "," lambda "," take_variable_and_default_from_unless "," take_variable_and_default_from_ternary "," ternary_assignment? "]}," RuboCop Cop Style OrAssignment on_lvasgn":{"type":"method","name":"on_lvasgn","children":[],"call":[" add_offense "," ternary_assignment? ","else_branch if_type? "," autocorrect "," ternary_assignment?  if_type? "]}," RuboCop Cop Style OrAssignment on_if":{"type":"method","name":"on_if","children":[],"call":[" add_offense "," unless_assignment? "," autocorrect "]}," RuboCop Cop Style OneLineConditional message":{"type":"method","name":"message","children":[],"call":[" format ","node keyword "]}," RuboCop Cop Style NumericLiteralPrefix message":{"type":"method","name":"message","children":[],"call":[" class const_get "," literal_type upcase "," literal_type "," class "]}," RuboCop Cop Style NestedParenthesizedCalls whitelisted_methods":{"type":"method","name":"whitelisted_methods","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style NestedParenthesizedCalls whitelisted?":{"type":"method","name":"whitelisted?","children":[],"call":["send_node arguments one? ","send_node arguments "," whitelisted_methods include? ","send_node method_name to_s ","send_node method_name "," whitelisted_methods ","send_node parent arguments one? ","send_node parent arguments ","send_node parent "]}," RuboCop Cop Style NegatedIf correct_style?":{"type":"method","name":"correct_style?","children":[],"call":["node modifier_form? ! ","node modifier_form? "," style == "," style "]}," RuboCop Cop Style MultilineMemoization keyword_end_str":{"type":"method","name":"keyword_end_str","children":[],"call":["\n + + ","\n + ","  * ","node loc column ","node loc ","node_buf source_line =~ ","node_buf source_line ","node loc end line ","node loc end ","(str \"[^\\\\s\\\\)]\") match? ","(str \"[^\\\\s)]\") match? "]}," RuboCop Cop Style MultilineMemoization keyword_begin_str":{"type":"method","name":"keyword_begin_str","children":[],"call":["begin\n + ","  * ","node loc column + ","node loc column ","node loc ","node_buf source [] == ","node_buf source [] ","node loc begin end_pos ","node loc begin ","node_buf source "," config for_cop [] "," config for_cop "," config "," configured_indentation_width "]}," RuboCop Cop Style MultilineMemoization keyword_autocorrect":{"type":"method","name":"keyword_autocorrect","children":[],"call":["corrector replace "," keyword_end_str ","node loc end ","node loc "," keyword_begin_str ","node loc begin ","node source_range source_buffer ","node source_range "]}," RuboCop Cop Style ModuleFunction message":{"type":"method","name":"message","children":[],"call":[" style == "," style "]}," RuboCop Cop Style MissingElse message":{"type":"method","name":"message","children":[],"call":[" format ","node type "," empty_else_style "]}," RuboCop Cop Style MinMax argument_range":{"type":"method","name":"argument_range","children":[],"call":["first_argument_range join ","node children last loc expression ","node children last loc ","node children last ","node children ","node children first loc expression ","node children first loc ","node children first ","node children last source_range ","node children first source_range ","node children first loc expression  join ","node children first source_range  join "]}," RuboCop Cop Style MinMax offending_range":{"type":"method","name":"offending_range","children":[],"call":["node loc expression ","node loc "," argument_range ","node type ","node source_range "]}," RuboCop Cop Style MinMax autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","receiver source "," offending_range "," lambda ","node children first receiver ","node children first ","node children ","node children first receiver  source ","node children first node children first receiver  "]}," RuboCop Cop Style MinMax message":{"type":"method","name":"message","children":[],"call":[" format ","receiver source ","offender source "]}," RuboCop Cop Style MinMax on_array":{"type":"method","name":"on_array","children":[],"call":[" add_offense "," message "," offending_range "," min_max_candidate ","corrector replace ","receiver source ","node children first receiver ","node children first ","node children ","node children first receiver  source ","node children first node children first receiver  "]}," RuboCop Cop Style MethodMissing on_def":{"type":"method","name":"on_def","children":[],"call":[" check ","node method? "]}," RuboCop Cop Style MethodDefParentheses on_def":{"type":"method","name":"on_def","children":[],"call":[" correct_style_detected "," unwanted_parentheses "," parentheses? "," missing_parentheses "," arguments_without_parentheses? "," require_parentheses? ","node arguments ","node endless? "," forced_parentheses? "]}," RuboCop Cop Style MethodCallWithoutArgsParentheses ineligible_node?":{"type":"method","name":"ineligible_node?","children":[],"call":["node keyword_not? ","node implicit_call? ","node camel_case_method? ","node prefix_not? "]}," RuboCop Cop Style LambdaCall args_end":{"type":"method","name":"args_end","children":[],"call":["node loc expression end ","node loc expression ","node loc "]}," RuboCop Cop Style LambdaCall args_begin":{"type":"method","name":"args_begin","children":[],"call":["selector end resize ","selector end ","loc selector ","loc keyword ","node yield_type? ","node super_type? ","node loc ","loc selector  end resize ","loc keyword  end resize ","loc selector  end ","loc keyword  end ","loc loc selector  ","loc loc keyword  ","node loc  selector ","node loc  keyword ","node node loc  "]}," RuboCop Cop Style LambdaCall add_parentheses":{"type":"method","name":"add_parentheses","children":[],"call":["corrector insert_after "," args_end ","corrector replace "," args_begin ","node source_range ","node arguments empty? ","node arguments "]}," RuboCop Cop Style Lambda remove_trailing_whitespace":{"type":"method","name":"remove_trailing_whitespace","children":[],"call":["corrector remove_preceding ","node loc begin begin_pos - - ","node loc begin begin_pos - ","node arguments source_range end_pos ","node arguments source_range ","node arguments ","node loc begin begin_pos ","node loc begin ","node loc "]}," RuboCop Cop Style Lambda remove_leading_whitespace":{"type":"method","name":"remove_leading_whitespace","children":[],"call":["corrector remove_preceding ","node arguments source_range begin_pos - ","node send_node source_range end_pos ","node send_node source_range ","node send_node ","node arguments source_range begin_pos ","node arguments source_range ","node arguments "]}," RuboCop Cop Style Lambda remove_unparenthesized_whitespace":{"type":"method","name":"remove_unparenthesized_whitespace","children":[],"call":[" remove_trailing_whitespace "," remove_leading_whitespace "," unparenthesized_literal_args? ","node arguments "," unparenthesized_literal_node arguments ? "]}," RuboCop Cop Style InverseMethods correct_inverse_selector":{"type":"method","name":"correct_inverse_selector","children":[],"call":["corrector remove ","block loc selector ","block loc ","corrector replace ","selector []= ","NEGATED_EQUALITY_METHODS  include? ","selector to_sym ","block loc selector source "," dot_range ","block loc dot ","selector_loc source ","block loc block loc selector source  ","block loc selector_loc source  ","block loc selector source  []= ","selector_loc source  []= ","block loc selector source  to_sym ","selector_loc source  to_sym ","block loc block loc selector source  source ","block loc selector_loc source  source "," dot_ dot_range  ","block loc selector source _loc source ","selector_loc source _loc source ","block loc selector  source "]}," RuboCop Cop Style IdenticalConditionalBranches message":{"type":"method","name":"message","children":[],"call":[" format ","node source "]}," RuboCop Cop Style EmptyMethod joint":{"type":"method","name":"joint","children":[],"call":[" compact_style? ","  * ","node loc column ","node loc "]}," RuboCop Cop Style EmptyMethod correct_style?":{"type":"method","name":"correct_style?","children":[],"call":[" expanded? "," expanded_style? "," compact? "," compact_style? "]}," RuboCop Cop Style Dir file_keyword?":{"type":"method","name":"file_keyword?","children":[],"call":["node source_range is? ","node source_range ","node str_type? "]}," RuboCop Cop Style Dir autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node source_range "," lambda "]}," RuboCop Cop Style Dir on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," dir_replacement? ","corrector replace "]}," RuboCop Cop Style DefWithParentheses on_def":{"type":"method","name":"on_def","children":[],"call":[" add_offense ","node arguments ","node arguments loc begin ","node arguments loc ","node arguments? ! ","node arguments? ","node single_line? ","corrector remove ","node arguments loc end ","node arguments source_range ","node endless? ! ","node endless? "]}," RuboCop Cop Style ConditionalAssignment candidate_node?":{"type":"method","name":"candidate_node?","children":[],"call":[" assignment_rhs_exist? "," style == "," style "]}," RuboCop Cop Style CommandLiteral message":{"type":"method","name":"message","children":[],"call":[" backtick_literal? "]}," RuboCop Cop Style AndOr message":{"type":"method","name":"message","children":[],"call":[" format ","node operator ","node alternate_operator "]}," RuboCop Cop Style AndOr process_logical_operator":{"type":"method","name":"process_logical_operator","children":[],"call":[" add_offense ","node logical_operator? ","corrector replace ","node alternate_operator ","node loc operator ","node loc "," correct_other ","expr assignment? ","expr return_type? "," correct_send ","expr send_type? ","node each_child_node "," message "," keep_operator_precedence ","  message  "]}," RuboCop Cop Style Alias alias_method_possible?":{"type":"method","name":"alias_method_possible?","children":[],"call":["node children none? ","node children "," scope_type != "," scope_type ","(csend\n  (lvar :node) :parent) != "]}," RuboCop Cop Style Alias alias_keyword_possible?":{"type":"method","name":"alias_keyword_possible?","children":[],"call":["node arguments all? ","node arguments "," scope_type != "," scope_type "]}," RuboCop Cop Rails HasManyOrHasOneDependent on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," has_dependent? ","pairs any? "," is_has_many_or_has_one_with_options? "," is_has_many_or_has_one_without_options? "," valid_options? "," with_options_block ","node parent "," association_with_options? "," association_without_options? ! "," association_without_options? ","node parent parent ","node parent begin_type? "," valid_options_in_with_options_block? "," active_resource? "," add_offenode parent se "," add_offenode parent parent se "," has_depenode parent denode parent t? "," has_depenode parent parent denode parent parent t? "," is_has_many_or_has_one_with_options?  any? ","pairs anode parent y? ","pairs anode parent parent y? "," is_has_manode parent y_or_has_onode parent e_with_optionode parent s? "," is_has_manode parent parent y_or_has_onode parent parent e_with_optionode parent parent s? "," is_has_manode parent y_or_has_onode parent e_without_optionode parent s? "," is_has_manode parent parent y_or_has_onode parent parent e_without_optionode parent parent s? "," valid_optionode parent s? "," valid_optionode parent parent s? "," with_optionode parent s_block "," with_optionode parent parent s_block ","node parent ode parenode parent t ","node parent parent ode parenode parent parent t "," associationode parent _with_optionode parent s? "," associationode parent parent _with_optionode parent parent s? "," associationode parent _without_optionode parent s? ! "," associationode parent parent _without_optionode parent parent s? ! "," associationode parent _without_optionode parent s? "," associationode parent parent _without_optionode parent parent s? ","node parent ode parenode parent t parenode parent t ","node parent parent ode parenode parent parent t parenode parent parent t ","node parent ode parenode parent t beginode parent _type? ","node parent parent ode parenode parent parent t beginode parent parent _type? "," valid_optionode parent s_inode parent _with_optionode parent s_block? "," valid_optionode parent parent s_inode parent parent _with_optionode parent parent s_block? "]}," RuboCop Cop Rails Delegate include_prefix_case?":{"type":"method","name":"include_prefix_case?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Performance UriDefaultParser autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node loc expression ","node loc "," uri_parser_new? "," lambda "]}," RuboCop Cop Performance UriDefaultParser on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format "," uri_parser_new? "]}," RuboCop Cop Performance UnfreezeString on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," string_new? "," dup_string? "]}," RuboCop Cop Performance TimesMap message":{"type":"method","name":"message","children":[],"call":[" format ","map_or_collect method_name ","count source ","MESSAGE  + ","count literal? "]}," RuboCop Cop Performance RegexpMatch message":{"type":"method","name":"message","children":[],"call":[" format ","node loc selector source ","node loc selector ","node loc "]}," RuboCop Cop Performance RegexpMatch match_with_lvasgn?":{"type":"method","name":"match_with_lvasgn?","children":[],"call":["regexp to_regexp named_captures empty? ","regexp to_regexp named_captures ","regexp to_regexp ","node match_with_lvasgn_type? "]}," RuboCop Cop Performance RedundantMerge non_redundant_value_used?":{"type":"method","name":"non_redundant_value_used?","children":[],"call":["EachWithObjectInspector  new value_used? ! ","EachWithObjectInspector  new value_used? ","EachWithObjectInspector  new ","node value_used? "]}," RuboCop Cop Performance RedundantMerge non_redundant_pairs?":{"type":"method","name":"non_redundant_pairs?","children":[],"call":["pairs size > "," max_key_value_pairs ","pairs size ","receiver pure? ! ","receiver pure? "]}," RuboCop Cop Performance RedundantMerge non_redundant_merge?":{"type":"method","name":"non_redundant_merge?","children":[],"call":[" non_redundant_value_used? "," non_redundant_pairs? "," kwsplat_used? "]}," RuboCop Cop Performance RedundantMerge message":{"type":"method","name":"message","children":[],"call":[" format ","node source "," to_assignments join "," to_assignments "," redundant_merge_candidate "," to_ to_assignments join  join "," to_ to_assignments join  "]}," RuboCop Cop Performance HashEachMethods kv_range":{"type":"method","name":"kv_range","children":[],"call":["inner_node loc selector join ","outer_node loc selector ","outer_node loc ","inner_node loc selector ","inner_node loc ","outer_node children first ","outer_node children ","outer_node receiver loc selector join ","outer_node receiver loc selector ","outer_node receiver loc ","outer_node receiver ","outer_node children first  loc selector join ","outer_node children first  loc selector ","outer_node children first  loc "]}," RuboCop Cop Performance HashEachMethods plain_range":{"type":"method","name":"plain_range","children":[],"call":["outer_node loc selector ","outer_node loc "]}," RuboCop Cop Performance HashEachMethods correct_plain_each":{"type":"method","name":"correct_plain_each","children":[],"call":[" correct_args ","corrector replace ","node loc expression ","node loc ","node receiver source + ","node receiver source ","node receiver ","@args include? ","node loc selector "," correct_implicit "," used? "," plain_each ","node parent "]}," RuboCop Cop Performance HashEachMethods correct_key_value_each":{"type":"method","name":"correct_key_value_each","children":[],"call":["corrector replace ","node loc expression ","node loc ","receiver receiver source + ","receiver method_name [] ","receiver method_name ","receiver receiver source ","receiver receiver ","node receiver ","receiver source + ","receiver source "," correct_implicit ","node receiver method_name to_s chop ","node receiver method_name to_s ","node receiver method_name ","node receiver receiver ","node receiver  node receiver  source + ","node receiver receiver  node receiver receiver  source + ","node receiver  method_name [] ","node receiver receiver  method_name [] ","node receiver  method_name ","node receiver receiver  method_name ","node receiver  node receiver  source ","node receiver receiver  node receiver receiver  source ","node receiver  node receiver  ","node receiver receiver  node receiver receiver  ","node node receiver  ","node node receiver receiver  ","node receiver  source + ","node receiver receiver  source + ","node receiver  source ","node receiver receiver  source ","node node receiver  method_name to_s chop ","node node receiver receiver  method_name to_s chop ","node node receiver  method_name to_s ","node node receiver receiver  method_name to_s ","node node receiver  method_name ","node node receiver receiver  method_name ","node node receiver  node receiver  ","node node receiver receiver  node receiver receiver  "]}," RuboCop Cop Performance HashEachMethods correct_implicit":{"type":"method","name":"correct_implicit","children":[],"call":[" correct_args ","corrector replace ","node loc expression ","node loc ","@args include? "]}," RuboCop Cop Performance HashEachMethods register_kv_offense":{"type":"method","name":"register_kv_offense","children":[],"call":[" add_offense "," format ","method [] "," message "," kv_range "," kv_each "]}," RuboCop Cop Performance HashEachMethods register_each_offense":{"type":"method","name":"register_each_offense","children":[],"call":[" add_offense "," format "," message "," plain_range ","@args [] "," plain_each "," used? "]}," RuboCop Cop Performance Caller int_value":{"type":"method","name":"int_value","children":[],"call":["node children [] ","node children "]}," RuboCop Cop Performance Caller message":{"type":"method","name":"message","children":[],"call":[" format "," int_value ","node first_argument ","node method_name == ","node method_name ","node receiver first_argument ","node receiver ","node receiver method_name "," for int_value at "," i int_value t_value ","node first_argu int_value ent "," int_value ode first_argume int_value t ","node  int_value ethod_na int_value e == "," int_value ode method_ int_value ame == ","node node receiver method_name  == ","node  int_value ethod_na int_value e "," int_value ode method_ int_value ame ","node node receiver method_name  ","node receiver first_argu int_value ent "," int_value ode receiver first_argume int_value t "," int_value ode receiver ","node receiver  int_value ethod_na int_value e "," int_value ode receiver method_ int_value ame ","node receiver node receiver method_name  "]}," RuboCop Cop Naming VariableNumber message":{"type":"method","name":"message","children":[],"call":[" format ","@node type "]}," RuboCop Cop Naming VariableNumber on_arg":{"type":"method","name":"on_arg","children":[],"call":[" check_name ","node loc name ","node loc "," allowed_identifier? "]}," RuboCop Cop Naming VariableNumber on_cvasgn":{"type":"method","name":"on_cvasgn","children":[],"call":[" check_name ","node loc name ","node loc "]}," RuboCop Cop Naming VariableNumber on_ivasgn":{"type":"method","name":"on_ivasgn","children":[],"call":[" check_name ","node loc name ","node loc "]}," RuboCop Cop Naming VariableNumber on_lvasgn":{"type":"method","name":"on_lvasgn","children":[],"call":[" check_name ","node loc name ","node loc "]}," RuboCop Cop Naming VariableName message":{"type":"method","name":"message","children":[],"call":[" format "]}," RuboCop Cop Naming VariableName on_lvasgn":{"type":"method","name":"on_lvasgn","children":[],"call":[" check_name ","node loc name ","node loc "," allowed_identifier? "]}," RuboCop Cop Naming PredicateName predicate_whitelist":{"type":"method","name":"predicate_whitelist","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Naming PredicateName predicate_prefixes":{"type":"method","name":"predicate_prefixes","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Naming PredicateName prefix_blacklist":{"type":"method","name":"prefix_blacklist","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Naming PredicateName message":{"type":"method","name":"message","children":[],"call":[]}," RuboCop Cop Naming PredicateName expected_name":{"type":"method","name":"expected_name","children":[],"call":["new_name << ","method_name end_with? ","method_name dup ","method_name sub "," prefix_blacklist include? "," prefix_blacklist "," forbidden_prefixes include? "," forbidden_prefixes ","method_name dup  << ","method_name sub  << "]}," RuboCop Cop Naming PredicateName on_def":{"type":"method","name":"on_def","children":[],"call":[" add_offense "," message "," expected_name "," predicate_whitelist include? "," predicate_whitelist ","method_name == ","method_name start_with? ","node method_name to_s ","node method_name "," predicate_prefixes each "," predicate_prefixes "," allowed_method_name? ","node loc name ","node loc ","node method_name to_s  == ","node method_name to_s  start_with? ","node node method_name to_s  to_s ","node node method_name to_s  "," allowed_node method_name to_s ? "]}," RuboCop Cop Naming MethodName sanitize_name":{"type":"method","name":"sanitize_name","children":[],"call":["name to_s delete to_sym ","name to_s delete ","name to_s "]}," RuboCop Cop Naming MethodName message":{"type":"method","name":"message","children":[],"call":[" format "]}," RuboCop Cop Naming MethodName on_defs":{"type":"method","name":"on_defs","children":[],"call":[" check_name ","node loc name ","node loc "," sanitize_name "]}," RuboCop Cop Naming MethodName on_def":{"type":"method","name":"on_def","children":[],"call":[" check_name ","node loc name ","node loc "," sanitize_name ","node method_name ","node operator_method? "," matches_ignored_pattern? "," matches_allowed_pattern? "]}," RuboCop Cop Naming HeredocDelimiterNaming blacklisted_delimiters":{"type":"method","name":"blacklisted_delimiters","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Naming HeredocDelimiterNaming delimiters":{"type":"method","name":"delimiters","children":[],"call":["node source match captures first ","node source match captures ","node source match ","node source "]}," RuboCop Cop Naming HeredocDelimiterNaming meaningful_delimiters?":{"type":"method","name":"meaningful_delimiters?","children":[],"call":["delimiters =~ ","Regexp  new "," blacklisted_delimiters none? "," blacklisted_delimiters "," delimiters "," delimiter_string "," forbidden_delimiters none? "," forbidden_delimiters ","(str \"\\\\w\") match? ","Regexp  new match? "," delimiters  =~ "," delimiter_string  =~ "," blacklisted_ delimiters  none? "," blacklisted_ delimiter_string  none? "," blacklisted_ delimiters  "," blacklisted_ delimiter_string  ","  delimiters  ","  delimiter_string  "," forbidden_ delimiters  none? "," forbidden_ delimiter_string  none? "," forbidden_ delimiters  "," forbidden_ delimiter_string  "]}," RuboCop Cop Naming HeredocDelimiterNaming on_heredoc":{"type":"method","name":"on_heredoc","children":[],"call":[" add_offense "," meaningful_delimiters? ","node loc heredoc_end ","node loc ","node children empty? ","node children "]}," RuboCop Cop Naming HeredocDelimiterCase correct_delimiters":{"type":"method","name":"correct_delimiters","children":[],"call":[" delimiter_string downcase "," delimiter_string "," delimiter_string upcase "," style == "," style ","source downcase ","source upcase "]}," RuboCop Cop Naming HeredocDelimiterCase correct_case_delimiters?":{"type":"method","name":"correct_case_delimiters?","children":[],"call":[" delimiter_string == "," correct_delimiters "," delimiter_string "]}," RuboCop Cop Naming HeredocDelimiterCase message":{"type":"method","name":"message","children":[],"call":[" format "," style "]}," RuboCop Cop Naming HeredocDelimiterCase on_heredoc":{"type":"method","name":"on_heredoc","children":[],"call":[" add_offense "," correct_case_delimiters? ","node loc heredoc_end ","node loc ","corrector replace "," correct_delimiters "," delimiter_string ","expr source ","node loc expression ","node source_range ","node loc expression  source ","node source_range  source ","node loc node loc expression ession ","node loc node source_range ession "]}," RuboCop Cop Naming FileName to_module_name":{"type":"method","name":"to_module_name","children":[],"call":["words map join to_sym ","words map join ","words map ","basename sub split ","basename sub ","basename sub split  map join to_sym ","basename sub split  map join ","basename sub split  map "]}," RuboCop Cop Naming FileName to_namespace":{"type":"method","name":"to_namespace","children":[],"call":[" to_module_name ","components [] map ","components [] ","components last ","start_index nil? ","components size - ","components size ","start include? ","components reverse each_with_index ","components reverse "," Pathname each_filename to_a "," Pathname each_filename "," Pathname "," definition_path_hierarchy_roots "," Pathname each_filename to_a  [] map "," Pathname each_filename to_a  [] "," Pathname each_filename to_a  last ","components size -  nil? "," definition_path_hierarchy_roots _index nil? "," Pathname each_filename to_a  size - "," Pathname each_filename to_a  size "," definition_path_hierarchy_roots  include? "," Pathname each_filename to_a  reverse each_with_index "," Pathname each_filename to_a  reverse "]}," RuboCop Cop Naming FileName match_acronym?":{"type":"method","name":"match_acronym?","children":[],"call":["expected gsub == ","expected gsub ","acronym capitalize "," allowed_acronyms any? "," allowed_acronyms ","name to_s ","expected to_s ","expected to_s  gsub == ","expected to_s  gsub ","name to_s  to_s ","expected to_s  to_s "]}," RuboCop Cop Naming FileName match?":{"type":"method","name":"match?","children":[],"call":["expected == ","expected empty? "]}," RuboCop Cop Naming FileName partial_matcher!":{"type":"method","name":"partial_matcher!","children":[],"call":["expected pop "," match_acronym? ","expected last ","name == "," match? ","namespace cbase_type? "," lambda "]}," RuboCop Cop Naming FileName match_namespace":{"type":"method","name":"match_namespace","children":[],"call":[" match? ","match_partial call ","ancestor defined_module ","ancestor sclass_type? ","node each_ancestor "," partial_matcher! "," partial_matcher!  call "]}," RuboCop Cop Naming FileName find_class_or_module":{"type":"method","name":"find_class_or_module","children":[],"call":[" match_namespace ","namespace empty? "," match_acronym? ! "," match_acronym? ","name != ","child defined_module "," on_node ","namespace pop "," find_definition "," match_namespace pop space ","namespace pop space empty? ","namespace pop  != ","namespace pop space pop "]}," RuboCop Cop Naming FileName filename_good?":{"type":"method","name":"filename_good?","children":[],"call":["basename =~ "," regex ","basename sub ","basename match? ","basename delete_prefix ","basename sub  =~ ","basename delete_prefix  =~ ","basename sub  sub ","basename delete_prefix  sub ","basename sub  match? ","basename delete_prefix  match? ","basename sub  delete_prefix ","basename delete_prefix  delete_prefix "]}," RuboCop Cop Naming FileName allowed_acronyms":{"type":"method","name":"allowed_acronyms","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Naming FileName regex":{"type":"method","name":"regex","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Naming FileName expect_matching_definition?":{"type":"method","name":"expect_matching_definition?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Naming FileName ignore_executable_scripts?":{"type":"method","name":"ignore_executable_scripts?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Naming FileName shebang?":{"type":"method","name":"shebang?","children":[],"call":["line start_with? "]}," RuboCop Cop Naming FileName other_message":{"type":"method","name":"other_message","children":[],"call":[" format "," regex "]}," RuboCop Cop Naming FileName no_definition_message":{"type":"method","name":"no_definition_message","children":[],"call":[" format "," to_namespace join "," to_namespace "]}," RuboCop Cop Naming FileName first_line":{"type":"method","name":"first_line","children":[],"call":[" processed_source lines first "," processed_source lines "," processed_source "]}," RuboCop Cop Naming FileName for_bad_filename":{"type":"method","name":"for_bad_filename","children":[],"call":[" source_range "," processed_source buffer "," processed_source "," other_message "," shebang? "," first_line "," ignore_executable_scripts? "," no_definition_message "," find_class_or_module "," to_namespace "," processed_source ast "," expect_matching_definition? "," filename_good? ","File  basename "," processed_source start_with? "," bad_filename_allowed? "," matching_definition? "," perform_class_and_module_naming_checks ","File  File  basename  "]}," RuboCop Cop Naming FileName investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense "," for_bad_filename "," config file_to_include? "," config ","processed_source buffer name ","processed_source buffer ","processed_source file_path "," config allowed_camel_case_file? "," config file_to_exclude? ","processed_source processed_source buffer name  ","processed_source processed_source file_path  "]}," RuboCop Cop Naming ConstantName on_casgn":{"type":"method","name":"on_casgn","children":[],"call":[" add_offense ","const_name !~ ","(sym :send) include? ","value type "," class_or_struct_return_method? "," allowed_method_call_on_rhs? ","(sym :block) include? "," allowed_assignment? ","node parent ","node parent or_asgn_type? ","SNAKE_CASE  match? ","node loc name ","node loc "]}," RuboCop Cop Naming ClassAndModuleCamelCase check_name":{"type":"method","name":"check_name","children":[],"call":[" add_offense ","name =~ ","node loc name source ","node loc name ","node loc ","node loc name source  =~ ","node loc node loc name source  source ","node loc node loc name source  "]}," RuboCop Cop Naming ClassAndModuleCamelCase on_module":{"type":"method","name":"on_module","children":[],"call":[" check_name "]}," RuboCop Cop Naming ClassAndModuleCamelCase on_class":{"type":"method","name":"on_class","children":[],"call":[" check_name "," add_offense ","node loc name source =~ ","node loc name source ","node loc name ","node loc ","(str \"_\") match? ","node loc name source gsub "," cop_config [] join "," cop_config [] "," cop_config ","node loc name source include? ","name include? "," check_node loc name source gsub  ","node loc node loc name source gsub  source =~ ","node loc node loc name source gsub  source ","node loc node loc name source gsub  ","node loc node loc name source gsub  source gsub ","node loc node loc name source gsub  source include? ","node loc name source gsub  include? "]}," RuboCop Cop Naming BinaryOperatorParameterName op_method?":{"type":"method","name":"op_method?","children":[],"call":["OP_LIKE_METHODS  include? ","name !~ ","BLACKLISTED  include? ","(str \"\\\\A\\\\w\") match? ! ","(str \"\\\\A\\\\w\") match? ","EXCLUDED  include? ","(str \"\\\\A[[:word:]]\") match? ! ","(str \"\\\\A[[:word:]]\") match? "]}," RuboCop Cop Naming BinaryOperatorParameterName on_def":{"type":"method","name":"on_def","children":[],"call":[" add_offense "," format "," op_method? "," op_method_candidate? ","corrector replace ","lvar_location source == ","arg source ","lvar_location source ","lvar loc name ","lvar loc ","node each_descendant ","lvar loc name  source == ","lvar loc name  source "]}," RuboCop Cop Naming AsciiIdentifiers first_non_ascii_chars":{"type":"method","name":"first_non_ascii_chars","children":[],"call":["string match to_s ","string match "]}," RuboCop Cop Naming AsciiIdentifiers first_offense_range":{"type":"method","name":"first_offense_range","children":[],"call":[" range_between ","start_position + ","first_offense length ","expression begin_pos + ","identifier text index ","identifier text ","expression begin_pos "," first_non_ascii_chars ","identifier pos ","expression begin_pos +  + "," first_non_ascii_chars  length ","identifier pos  begin_pos + ","identifier pos  begin_pos "]}," RuboCop Cop Naming AsciiIdentifiers investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense "," first_offense_range ","token text ascii_only? ! ","token text ascii_only? ","token text ","token type == ","token type ","processed_source tokens each ","processed_source tokens ","processed_source each_token "," should_check? ! "," should_check? "]}," RuboCop Cop Naming AccessorMethodName bad_writer_name?":{"type":"method","name":"bad_writer_name?","children":[],"call":["node arguments one? ","node arguments ","node method_name to_s start_with? ","node method_name to_s ","node method_name ","node first_argument arg_type? ","node first_argument "]}," RuboCop Cop Naming AccessorMethodName bad_reader_name?":{"type":"method","name":"bad_reader_name?","children":[],"call":["node arguments? ! ","node arguments? ","node method_name to_s start_with? ","node method_name to_s ","node method_name "]}," RuboCop Cop Naming AccessorMethodName on_def":{"type":"method","name":"on_def","children":[],"call":[" add_offense "," bad_writer_name? "," bad_reader_name? ","node loc name ","node loc "," message ","  message  "]}," RuboCop Cop PercentArray check_bracketed_array":{"type":"method","name":"check_bracketed_array","children":[],"call":[" add_offense "," style == "," style "," array_style_detected ","node values size ","node values "," allowed_bracket_array? ","percent_literal_corrector correct ","PercentLiteralCorrector  new "," class ","PercentLiteralCorrector  new  correct "]}," RuboCop Cop PercentArray check_percent_array":{"type":"method","name":"check_percent_array","children":[],"call":[" add_offense "," style == "," style "," array_style_detected ","node values size ","node values "," correct_bracketed "," class "," invalid_percent_array_contents? ","corrector replace "," format "," build_bracketed_array "," no_acceptable_style! "," build_message_for_bracketed_array "," build_ build_bracketed_array  "," build_ format _for_bracketed_array "," build_ build_message_for_bracketed_array _for_bracketed_array "," build_message_for_ build_bracketed_array  "]}," RuboCop Cop PercentArray comments_in_array?":{"type":"method","name":"comments_in_array?","children":[],"call":["(send\n  (send\n    (send\n      (send\n        (lvar :comment) :loc) :expression) :to_a) :&\n  (lvar :array_range)) empty? ! ","(send\n  (send\n    (send\n      (send\n        (lvar :comment) :loc) :expression) :to_a) :&\n  (lvar :array_range)) empty? ","comment loc expression to_a & ","comment loc expression to_a ","comment loc expression ","comment loc ","comments any? ","node source_range to_a ","node source_range "," processed_source comments "," processed_source "," processed_source each_comment_in_lines any? "," processed_source each_comment_in_lines ","node source_range last_line ","node source_range first_line ","(send\n  (send\n    (send\n      (send\n        (lvar :comment) :loc) :expression) :to_a) :&\n  (lvar :node source_range to_a )) empty? ! ","(send\n  (send\n    (send\n      (send\n        (lvar :comment) :loc) :expression) :to_a) :&\n  (lvar :node source_range to_a )) empty? "," processed_source comments  any? "," processed_source  processed_source comments  "]}," RuboCop Cop PercentArray message":{"type":"method","name":"message","children":[],"call":[" class "," style == "," style "]}," RuboCop Cop PercentArray allowed_bracket_array?":{"type":"method","name":"allowed_bracket_array?","children":[],"call":[" invalid_percent_array_context? "," below_array_length? "," comments_in_array? "]}," RuboCop Cop PercentArray invalid_percent_array_context?":{"type":"method","name":"invalid_percent_array_context?","children":[],"call":["parent block_literal? ","parent parenthesized? ! ","parent parenthesized? ","parent arguments include? ","parent arguments ","parent send_type? ","node parent ","node parent  block_literal? ","node parent  node parent hesized? ! ","node parent  node parent hesized? ","node parent  arguments include? ","node parent  arguments ","node parent  send_type? ","node node parent  "]}," RuboCop Cop MultilineLiteralBraceLayout new_line_needed_before_closing_brace?":{"type":"method","name":"new_line_needed_before_closing_brace?","children":[],"call":["c loc line == ","c loc line ","c loc "," processed_source comments any? "," processed_source comments "," processed_source "," last_element_range_with_trailing_comma last_line "," last_element_range_with_trailing_comma ","node chained? ","node argument? "," processed_source comment_at_line "]}," RuboCop Cop MultilineExpressionIndentation valid_rhs?":{"type":"method","name":"valid_rhs?","children":[],"call":[" valid_rhs_candidate? "," assignment_rhs ","Util ASGN_NODES  include? ","ancestor type "," valid_method_rhs_candidate? ","ancestor send_type? ","ancestor assignment? "]}," RuboCop Cop MultilineExpressionIndentation disqualified_rhs?":{"type":"method","name":"disqualified_rhs?","children":[],"call":[" part_of_block_body? ","ancestor block_type? ","UNALIGNED_RHS_TYPES  include? ","ancestor type "]}," RuboCop Cop MultilineExpressionIndentation indented_keyword_expression":{"type":"method","name":"indented_keyword_expression","children":[],"call":["node collection ","node for_type? "]}," RuboCop Cop MultilineExpressionIndentation keyword_message_tail":{"type":"method","name":"keyword_message_tail","children":[],"call":[" format ","keyword =~ ","keyword == ","node loc keyword source ","node loc keyword ","node loc ","keyword start_with? ","node loc keyword source  =~ ","node loc keyword source  == ","node loc node loc keyword source  source ","node loc node loc keyword source  ","node loc keyword source  start_with? "]}," RuboCop Cop MethodComplexity on_def":{"type":"method","name":"on_def","children":[],"call":[" max= ","complexity ceil "," add_offense "," format ","node method_name "," class ","complexity > "," complexity "," cop_config [] "," cop_config "," check_complexity "," ignored_method? "," matches_allowed_pattern? "," allowed_method? ","  cop_config [] = "," complexity  ceil "," complexity  > ","  complexity  "," check_ complexity  "]}," Heredoc delimiter_string":{"type":"method","name":"delimiter_string","children":[],"call":["node source match captures first ","node source match captures ","node source match ","node source "]}," Heredoc heredoc?":{"type":"method","name":"heredoc?","children":[],"call":["node loc is_a? ","node loc "]}," Heredoc on_heredoc":{"type":"method","name":"on_heredoc","children":[],"call":[" raise "]}," Heredoc on_str":{"type":"method","name":"on_str","children":[],"call":[" on_heredoc "," heredoc? "]}," RuboCop Cop FirstElementLineBreak last_by_line":{"type":"method","name":"last_by_line","children":[],"call":["n loc last_line ","n loc ","nodes max_by "]}," RuboCop Cop FirstElementLineBreak first_by_line":{"type":"method","name":"first_by_line","children":[],"call":["n loc first_line ","n loc ","nodes min_by "]}," RuboCop Cop Metrics ParameterLists message":{"type":"method","name":"message","children":[],"call":[" format "," max_params "," args_count "]}," RuboCop Cop Metrics MethodLength on_block":{"type":"method","name":"on_block","children":[],"call":[" check_code_length ","node send_node method_name == ","node send_node method_name ","node send_node ","node send_node method? ","node method? "]}," RuboCop Cop Metrics MethodLength on_def":{"type":"method","name":"on_def","children":[],"call":[" check_code_length ","excluded_methods include? "," String ","node method_name "," cop_config [] "," cop_config "," ignored_method? "," matches_allowed_pattern? "," allowed_method? ","m match? ","excluded_methods any? "," cop_config []  include? "," cop_config []  any? "]}," RuboCop Cop Lint Void in_void_context?":{"type":"method","name":"in_void_context?","children":[],"call":["parent void_context? ","VOID_CONTEXT_TYPES  include? ","parent type ","parent children last == ","parent children last ","parent children ","node parent ","node parent  void_context? ","node parent  type ","node parent  children last == ","node parent  children last ","node parent  children ","node node parent  "]}," RuboCop Cop Lint Void check_defined":{"type":"method","name":"check_defined","children":[],"call":[" add_offense "," format ","node source ","node defined_type? "]}," RuboCop Cop Lint Void check_self":{"type":"method","name":"check_self","children":[],"call":[" add_offense ","node self_type? "," autocorrect_void_self "," autocorrect_void_expression "]}," RuboCop Cop Lint Void check_literal":{"type":"method","name":"check_literal","children":[],"call":[" add_offense "," format ","node source ","node xstr_type? ","node literal? ! ","node literal? ","node range_type? "," autocorrect_void_literal "," autocorrect_void_expression "]}," RuboCop Cop Lint Void check_var":{"type":"method","name":"check_var","children":[],"call":[" add_offense "," format ","node loc name source ","node loc name ","node loc ","node const_type? ","node variable? "," autocorrect_void_var "," autocorrect_void_expression ","node source ","node special_keyword? "]}," RuboCop Cop Lint Void check_void_op":{"type":"method","name":"check_void_op","children":[],"call":[" add_offense "," format ","node method_name ","OPERATORS  include? ","node send_type? ","node loc selector ","node loc "," autocorrect_void_op "]}," RuboCop Cop Lint UselessSetterCall on_def":{"type":"method","name":"on_def","children":[],"call":[" add_offense "," format ","receiver loc name source ","receiver loc name ","receiver loc ","tracker contain_local_object? ","MethodVariableTracker  new ","node body "," setter_call_to_local_variable? "," last_expression ","loc_name source ","corrector insert_after "," indent ","MethodVariableTracker  new  contain_local_object? ","  last_expression ession ","receiver loc name  source "]}," RuboCop Cop Lint UriRegexp register_offense":{"type":"method","name":"register_offense","children":[],"call":[" add_offense "," format ","  format  "]}," RuboCop Cop Lint UriRegexp autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node loc expression ","node loc "," uri_regexp_without_argument? "," uri_regexp_with_argument? "," lambda ","arg source "]}," RuboCop Cop Lint UriRegexp on_send":{"type":"method","name":"on_send","children":[],"call":[" register_offense "," uri_regexp_without_argument? "," uri_regexp_with_argument? ","arg source ","corrector replace "," add_offense ","node loc selector ","node loc "," format ","node method? ","node source ","node receiver source ","node receiver ","node first_argument source ","node first_argument ","URI_CONSTANTS  include? ","  format  "]}," RuboCop Cop Lint UriEscapeUnescape on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format ","(sym :escape) include? "," uri_escape_unescape? ","replacements [] "]}," RuboCop Cop Lint UnreachableCode check_case":{"type":"method","name":"check_case","children":[],"call":[" flow_expression? ","branch body ","node when_branches all? ","node when_branches ","node else_branch ","node node else_branch  "]}," RuboCop Cop Lint UnreachableCode check_if":{"type":"method","name":"check_if","children":[],"call":[" flow_expression? ","node else_branch ","node if_branch ","node node else_branch  ","node node if_branch  "]}," RuboCop Cop Lint UnreachableCode flow_expression?":{"type":"method","name":"flow_expression?","children":[],"call":[" check_case "," check_if "," flow_expression? ","expressions any? ","node type "," flow_command? "]}," RuboCop Cop Lint Syntax add_offense_from_error":{"type":"method","name":"add_offense_from_error","children":[],"call":[" add_offense "," beautify_message ","error message "," add_global_offense "," beautify_ beautify_message  ","error  beautify_message  "]}," RuboCop Cop Lint Syntax add_offense_from_diagnostic":{"type":"method","name":"add_offense_from_diagnostic","children":[],"call":[" add_offense ","diagnostic level ","diagnostic location ","diagnostic message "]}," RuboCop Cop Lint ScriptPermission autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["FileUtils  chmod ","node loc expression source_buffer name ","node loc expression source_buffer ","node loc expression ","node loc "," lambda ","comment loc expression source_buffer name ","comment loc expression source_buffer ","comment loc expression ","comment loc ","comment source_range source_buffer name ","comment source_range source_buffer ","comment source_range "]}," RuboCop Cop Lint ReturnInVoidContext useless_return_method?":{"type":"method","name":"useless_return_method?","children":[],"call":[" method_setter? ","method_name == "]}," RuboCop Cop Lint ReturnInVoidContext method_setter?":{"type":"method","name":"method_setter?","children":[],"call":["AST Node COMPARISON_OPERATORS  include? ! ","AST Node COMPARISON_OPERATORS  include? ","method_name to_s end_with? ","method_name to_s "]}," RuboCop Cop Lint ReturnInVoidContext method_name":{"type":"method","name":"method_name","children":[],"call":["method_node children first ","method_node children ","method_node def_type? ","return_node each_ancestor first ","return_node each_ancestor ","context_node children first ","context_node children ","return_node each_ancestor first  children first ","return_node each_ancestor first  children ","return_node each_ancestor first  def_type? "]}," RuboCop Cop Lint ReturnInVoidContext on_return":{"type":"method","name":"on_return","children":[],"call":[" add_offense "," format "," message "," useless_return_method? ","return_node descendants any? ","return_node descendants "," method_name "," void_context_method? ","context_node def_type? "," non_void_context ","return_node loc keyword ","return_node loc ","context_node method_name ","  method_name  "," non_void_context  def_type? ","context_node  method_name  "," non_void_context  method_name "]}," RuboCop Cop Lint RescueWithoutErrorClass on_resbody":{"type":"method","name":"on_resbody","children":[],"call":[" add_offense "," rescue_without_error_class? "," rescue_modifier? ! "," rescue_modifier? "]}," RuboCop Cop Lint RescueType valid_exceptions":{"type":"method","name":"valid_exceptions","children":[],"call":["exceptions - "," invalid_exceptions "]}," RuboCop Cop Lint RescueType correction":{"type":"method","name":"correction","children":[],"call":["correction empty? "," valid_exceptions map join "," valid_exceptions map "," valid_exceptions "," valid_exceptions map join  empty? "]}," RuboCop Cop Lint RedundantWithIndex with_index_range":{"type":"method","name":"with_index_range","children":[],"call":[" range_between ","send loc selector end_pos ","send loc selector ","send loc ","send loc selector begin_pos ","send loc expression end_pos ","send loc expression ","send source_range end_pos ","send source_range "]}," RuboCop Cop Lint RedundantWithIndex message":{"type":"method","name":"message","children":[],"call":["node method_name == ","node method_name ","node method? "]}," RuboCop Cop Lint RedundantWithIndex autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove ","send loc dot ","send loc ","send loc selector ","corrector replace ","send method_name == ","send method_name "," redundant_with_index? "," lambda "," with_index_range ","send method? "]}," RuboCop Cop Lint RedundantWithIndex on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," with_index_range "," redundant_with_index? ","corrector remove ","send loc dot ","send loc ","corrector replace ","send loc selector ","send method? "," message "," with_index_ with_index_range  "," redundant_with_index?  loc dot "," redundant_with_index?  loc "," redundant_with_index?  loc selector "," redundant_with_index?  method? "]}," RuboCop Cop Lint RandOne message":{"type":"method","name":"message","children":[],"call":[" format ","node source "]}," RuboCop Cop Lint NestedMethodDefinition on_def":{"type":"method","name":"on_def","children":[],"call":[" add_offense "," find_nested_defs ","within_scoping_def ! "," scoping_method_call? ","node each_ancestor any? ","node each_ancestor ","node each_ancestor first ","subject lvar_type? ","node defs_type? "]}," RuboCop Cop Lint InterpolationCheck heredoc?":{"type":"method","name":"heredoc?","children":[],"call":[" heredoc? ","node parent ","node loc is_a? ","node loc "]}," RuboCop Cop Lint InterpolationCheck on_str":{"type":"method","name":"on_str","children":[],"call":[" add_offense "," scrub_string =~ "," scrub_string ","node str_content "," heredoc? ","node str_content scrub =~ ","node str_content scrub ","node parent dstr_type? ","node parent ","node source scrub =~ ","node source scrub ","node source ","parent regexp_type? ","parent dstr_type? ","(str \"(?<!\\\\\\\\)#\\\\{.*\\\\}\") match? "," autocorrect ","node loc end ","node loc ","node loc begin "," string_or_regex? ","node node parent  dstr_type? ","node node parent  ","node parent  regexp_type? ","node parent  dstr_type? "]}," RuboCop Cop Lint InheritException illegal_class_name?":{"type":"method","name":"illegal_class_name?","children":[],"call":["ILLEGAL_CLASSES  include? ","class_node const_name "]}," RuboCop Cop Lint InheritException message":{"type":"method","name":"message","children":[],"call":[" format ","node const_name "," preferred_base_class "]}," RuboCop Cop Lint IneffectiveAccessModifier check_defs":{"type":"method","name":"check_defs","children":[],"call":[" mark_method_as_useless ","cur_vis != "]}," RuboCop Cop Lint IneffectiveAccessModifier check_send":{"type":"method","name":"check_send","children":[],"call":[" revert_method_uselessness "," private_class_method ","node method_name ","node method? ! ","node method? ","node access_modifier? ","node bare_access_modifier? "]}," RuboCop Cop Lint FormatParameterMismatch count_percent_matches":{"type":"method","name":"count_percent_matches","children":[],"call":[" expected_fields_count ","node receiver ","node first_argument child_nodes count ","node first_argument child_nodes ","node first_argument "]}," RuboCop Cop Lint FormatParameterMismatch count_format_matches":{"type":"method","name":"count_format_matches","children":[],"call":[" expected_fields_count ","node first_argument ","node arguments count - ","node arguments count ","node arguments "]}," RuboCop Cop Lint FormatParameterMismatch countable_percent?":{"type":"method","name":"countable_percent?","children":[],"call":["node first_argument array_type? ","node first_argument "," percent? "]}," RuboCop Cop Lint FormatParameterMismatch countable_format?":{"type":"method","name":"countable_format?","children":[],"call":[" heredoc? ! "," heredoc? "," format? "," sprintf? "]}," RuboCop Cop Lint DuplicateMethods found_attr":{"type":"method","name":"found_attr","children":[],"call":[" found_instance_method "," sym_name ","args each "," sym_ sym_name  "]}," RuboCop Cop Lint DuplicateMethods on_attr":{"type":"method","name":"on_attr","children":[],"call":[" found_attr ","args first ","args last true_type? ","args last ","args size == ","args size "]}," RuboCop Cop Lint DuplicateMethods on_send":{"type":"method","name":"on_send","children":[],"call":[" on_attr "," attr? "," found_instance_method "," possible_dsl? ","node ancestors any? ","node ancestors "," alias_method? ","node attribute_accessor? ","METHOD_DEF_METHODS  include? ","node method_name "," on_ attr?  "," on_node attribute_accessor?  ","  attr? ? "," node attribute_accessor? ? ","node  attr? ibute_accessor? ","node node attribute_accessor? ibute_accessor? ","node method_ alias_method?  "]}," RuboCop Cop Lint DuplicateMethods on_alias":{"type":"method","name":"on_alias","children":[],"call":[" found_instance_method "," possible_dsl? ","node ancestors any? ","node ancestors "," method_alias? "]}," RuboCop Cop Lint DefEndAlignment on_def":{"type":"method","name":"on_def","children":[],"call":[" check_end_kw_in_node "]}," RuboCop Cop Lint BooleanSymbol on_sym":{"type":"method","name":"on_sym","children":[],"call":[" add_offense "," format ","node source [] ","node source "," boolean_symbol? ","node to_a first ","node to_a ","node value "," autocorrect ","node parent ","node node parent  "]}," RuboCop Cop Lint BlockAlignment disqualified_parent?":{"type":"method","name":"disqualified_parent?","children":[],"call":["parent masgn_type? ! ","parent masgn_type? ","parent loc line != ","node loc line ","node loc ","parent loc line ","parent loc ","parent first_line != ","node first_line ","parent first_line "]}," RuboCop Cop Lint BlockAlignment end_align_target?":{"type":"method","name":"end_align_target?","children":[],"call":[" block_end_align_target? ! "," block_end_align_target? "," disqualified_parent? "]}," RuboCop Cop Lint AssignmentInCondition message":{"type":"method","name":"message","children":[],"call":[" safe_assignment_allowed? "]}," RuboCop Cop Layout SpaceInsideStringInterpolation message":{"type":"method","name":"message","children":[],"call":[" style == "," style "]}," RuboCop Cop Layout SpaceBeforeBlockBraces empty_braces?":{"type":"method","name":"empty_braces?","children":[],"call":["loc begin end_pos == ","loc end begin_pos ","loc end ","loc begin end_pos ","loc begin "]}," RuboCop Cop Layout SpaceBeforeBlockBraces style_for_empty_braces":{"type":"method","name":"style_for_empty_braces","children":[],"call":[" raise "," style "," cop_config [] "," cop_config "]}," RuboCop Cop Layout SpaceBeforeBlockBraces check_non_empty":{"type":"method","name":"check_non_empty","children":[],"call":[" space_missing "," space_detected "," correct_style_detected "," style "]}," RuboCop Cop Layout SpaceBeforeBlockBraces check_empty":{"type":"method","name":"check_empty","children":[],"call":[" add_offense "," range_between ","left_brace begin_pos ","space_plus_brace begin_pos "," style_for_empty_braces == "," style_for_empty_braces "," config_to_allow_offenses []= ","used_style to_s "," config_to_allow_offenses "," autocorrect "," range_between _plus_brace begin_pos "]}," RuboCop Cop Layout SpaceAroundKeyword accepted_opening_delimiter?":{"type":"method","name":"accepted_opening_delimiter?","children":[],"call":["char == "," accept_left_parenthesis? "," accept_left_square_bracket? "]}," RuboCop Cop Layout SpaceAroundBlockParameters check_closing_pipe_space":{"type":"method","name":"check_closing_pipe_space","children":[],"call":[" check_no_space ","closing_pipe begin_pos ","last_end_pos + "," check_space "," last_end_pos_inside_pipes ","last end_pos ","args last source_range ","args last ","arguments children "," last_end_pos_inside_pipes  + ","args last source_range _end_pos + ","  last_end_pos_inside_pipes _inside_pipes "," args last source_range _end_pos_inside_pipes ","args last source_range  end_pos ","args args last source_range  source_range ","arguments children  last source_range ","args args last source_range  ","arguments children  last "]}," RuboCop Cop Layout SpaceAroundBlockParameters check_opening_pipe_space":{"type":"method","name":"check_opening_pipe_space","children":[],"call":[" check_no_space ","first begin_pos - ","first begin_pos ","opening_pipe end_pos "," check_space ","args first source_range ","args first ","range begin_pos - ","range begin_pos ","first_arg source_range ","arguments children ","args first source_range  begin_pos - ","args first source_range  begin_pos ","args args first source_range  source_range ","args first source_first_arg source_range  ","arguments children  first source_range ","args args first source_range  ","arguments children  first ","first_arg source_range  begin_pos - ","first_arg source_range  begin_pos ","args first source_range _arg source_range ","first_arg source_first_arg source_range  ","args first  source_range "]}," RuboCop Cop Layout SpaceAfterMethodName on_def":{"type":"method","name":"on_def","children":[],"call":[" add_offense ","pos_before_left_paren source =~ ","pos_before_left_paren source "," range_between ","expr begin_pos ","expr begin_pos - ","args source_range ","args loc begin is? ","args loc begin ","args loc ","node arguments ","pos_before_left_paren source start_with? ","corrector remove "," range_between  source =~ "," range_between  source ","args source_range  begin_pos ","args source_range  begin_pos - ","node arguments  source_range ","node arguments  loc begin is? ","node arguments  loc begin ","node arguments  loc "," range_between  source start_with? "]}," RuboCop Cop Layout MultilineMethodDefinitionBraceLayout on_def":{"type":"method","name":"on_def","children":[],"call":[" check_brace_layout ","node arguments "]}," RuboCop Cop Layout MultilineMethodCallIndentation operator_rhs?":{"type":"method","name":"operator_rhs?","children":[],"call":[" within_node? ","node first_argument ","node arguments? ","node operator_method? "]}," RuboCop Cop Layout LeadingCommentSpace rackup_config_file?":{"type":"method","name":"rackup_config_file?","children":[],"call":["File  basename eql? ","File  basename "," processed_source buffer name "," processed_source buffer "," processed_source "," processed_source file_path "]}," RuboCop Cop Layout LeadingCommentSpace rackup_options?":{"type":"method","name":"rackup_options?","children":[],"call":["comment text start_with? ","comment text "]}," RuboCop Cop Layout LeadingCommentSpace shebang?":{"type":"method","name":"shebang?","children":[],"call":["comment text start_with? ","comment text "]}," RuboCop Cop Layout LeadingCommentSpace allowed_on_first_line?":{"type":"method","name":"allowed_on_first_line?","children":[],"call":[" rackup_options? "," rackup_config_file? "," shebang? "]}," RuboCop Cop Layout IndentationWidth on_def":{"type":"method","name":"on_def","children":[],"call":[" check_indentation ","node body ","node loc keyword ","node loc "," ignored_node? "]}," RuboCop Cop Layout IndentHeredoc heredoc_body":{"type":"method","name":"heredoc_body","children":[],"call":[" scrub_string ","node loc heredoc_body source ","node loc heredoc_body ","node loc ","node loc heredoc_body source scrub "]}," RuboCop Cop Layout IndentHeredoc on_heredoc":{"type":"method","name":"on_heredoc","children":[],"call":[" add_offense ","body_indent_level zero? ","expected_indent_level == "," base_indent_level + "," indentation_width "," base_indent_level "," heredoc_indent_type == "," heredoc_indent_type "," indent_level ","body =~ "," heredoc_body "," too_long_line? ","body strip empty? ","body strip "," line_too_long? "," indent_level  zero? "," heredoc_body _indent_level zero? "," base_indent_level +  == "," heredoc_body  =~ "," heredoc_ heredoc_body  "," heredoc_body  strip empty? "," heredoc_body  strip "]}," RuboCop Cop Layout FirstMethodParameterLineBreak on_def":{"type":"method","name":"on_def","children":[],"call":[" check_method_line_break ","node arguments "," ignore_last_element? "]}," RuboCop Cop Layout EmptyLinesAroundMethodBody on_def":{"type":"method","name":"on_def","children":[],"call":[" check ","node body "]}," RuboCop Cop Layout EmptyLinesAroundExceptionHandlingKeywords on_def":{"type":"method","name":"on_def","children":[],"call":[" check_body ","node body ","node loc line ","node loc "]}," RuboCop Cop Layout EmptyLineBetweenDefs autocorrect_incompatible_with":{"type":"method","name":"autocorrect_incompatible_with","children":[],"call":[]}," RuboCop Cop Layout ElseAlignment check_nested":{"type":"method","name":"check_nested","children":[],"call":[" ignore_node "," on_if "]}," RuboCop Cop Layout ClosingParenthesisIndentation on_def":{"type":"method","name":"on_def","children":[],"call":[" check ","node arguments "]}," RuboCop Cop InternalAffairs RedundantMessageArgument autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove "," lambda ","Parser Source Range  new ","arguments last loc expression end_pos ","arguments last loc expression ","arguments last loc ","arguments last ","arguments [] loc expression end_pos ","arguments [] loc expression ","arguments [] loc ","arguments [] ","parent source_range source_buffer ","parent source_range ","parent arguments ","node parent "," offending_range ","parent arguments  last loc expression end_pos ","parent arguments  last loc expression ","parent arguments  last loc ","parent arguments  last ","parent arguments  [] loc expression end_pos ","parent arguments  [] loc expression ","parent arguments  [] loc ","parent arguments  [] ","parent source_Parser Source Range  new  source_buffer ","parent source_ offending_range  source_buffer ","node parent  source_range source_buffer ","parent source_Parser Source Range  new  ","parent source_ offending_range  ","node parent  source_range ","parent parent arguments  ","node parent  arguments ","node node parent  "," offending_Parser Source Range  new  "," offending_ offending_range  "]}," RuboCop Cop InternalAffairs RedundantMessageArgument on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","node last_argument "," node_type_check "," find_offending_argument ","corrector remove "," offending_range "," offending_ offending_range  "]}," RuboCop Cop InternalAffairs RedundantLocationArgument autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove "," lambda "," range_between ","second loc expression end_pos ","second loc expression ","second loc ","first loc expression end_pos ","first loc expression ","first loc ","node parent arguments ","node parent "," offending_range ","  range_between _between ","  offending_range _between "," offending_ range_between  "," offending_ offending_range  "]}," RuboCop Cop InternalAffairs RedundantLocationArgument on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","node last_argument "," node_type_check "," redundant_location_argument ","corrector remove "," offending_range "," offending_ offending_range  "]}," RuboCop Cop InternalAffairs OffenseLocationKeyword autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","location_argument loc expression ","location_argument loc "," offense_location "," lambda ","node source_range "," offending_location_argument ","node parent "]}," RuboCop Cop InternalAffairs OffenseLocationKeyword on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format ","location_argument loc expression ","location_argument loc "," offense_location "," find_offending_argument "," node_type_check ","corrector replace "," offending_location_argument ","location parent "]}," RuboCop Cop InternalAffairs NodeTypePredicate autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," lambda ","Parser Source Range  new ","node loc expression end_pos ","node loc expression ","node loc ","receiver loc expression end_pos + ","receiver loc expression end_pos ","receiver loc expression ","receiver loc ","node source_range source_buffer ","node source_range "," node_type_check ","node source_Parser Source Range  new  source_buffer ","node source_Parser Source Range  new  "]}," RuboCop Cop Generator RequireFileInjector injectable_require_directive":{"type":"method","name":"injectable_require_directive","children":[],"call":[" require_path "]}," RuboCop Cop Generator RequireFileInjector require_path_fragments":{"type":"method","name":"require_path_fragments","children":[],"call":["path captures first split ","path captures first ","path captures ","require_directove match ","require_directive match ","require_directove match  captures first split ","require_directive match  captures first split ","require_directove match  captures first ","require_directive match  captures first ","require_directove match  captures ","require_directive match  captures "]}," RuboCop Cop Generator RequireFileInjector target_line":{"type":"method","name":"target_line","children":[],"call":["inject_parts last < ","current_entry_parts last ","inject_parts last ","inject_parts [] == ","current_entry_parts [] ","inject_parts [] "," require_path_fragments "," require_entries find with_index "," require_entries find "," require_entries "," injectable_require_directive "," require_entries size "," require_path_fragments  last < "," require_path_fragments  last "," require_path_fragments  [] == "," require_path_fragments  [] "]}," RuboCop Cop Generator RequireFileInjector updated_directives":{"type":"method","name":"updated_directives","children":[],"call":[" require_entries insert join "," require_entries insert "," injectable_require_directive "," target_line "," require_entries "]}," RuboCop Cop Generator RequireFileInjector require_exists?":{"type":"method","name":"require_exists?","children":[],"call":["entry == "," injectable_require_directive "," require_entries any? "," require_entries "]}," RuboCop Cop Generator RequireFileInjector rubocop_root_file_path":{"type":"method","name":"rubocop_root_file_path","children":[],"call":["File  join "]}," RuboCop Cop Generator RequireFileInjector inject":{"type":"method","name":"inject","children":[],"call":["File  write "," updated_directives "," rubocop_root_file_path "," target_line ! "," target_line "," require_exists? "," output puts "," root_file_path "," output "," injectable_require_directive chomp "," injectable_require_directive ","  injectable_require_directive chomp _exists? "," injectable_ injectable_require_directive chomp _directive chomp "," injectable_ injectable_require_directive chomp _directive "]}," RuboCop Cop Generator RequireFileInjector initialize":{"type":"method","name":"initialize","children":[],"call":["File  readlines "," rubocop_root_file_path "," Pathname "]}," RuboCop Cop Generator inject_require":{"type":"method","name":"inject_require","children":[],"call":["RequireFileInjector  new inject ","RequireFileInjector  new "," require_path "," source_path "]}," RuboCop Cop Bundler OrderedGems gem_name":{"type":"method","name":"gem_name","children":[],"call":["declaration_node first_argument str_content ","declaration_node first_argument "]}," RuboCop Cop Bundler InsecureProtocolSource source_range":{"type":"method","name":"source_range","children":[],"call":[" range_between ","node end_pos ","node begin_pos "]}," RuboCop Cop Bundler InsecureProtocolSource autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node first_argument loc expression ","node first_argument loc ","node first_argument "," lambda "]}," RuboCop Cop Bundler InsecureProtocolSource on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," source_range ","node first_argument loc expression ","node first_argument loc ","node first_argument "," format "," insecure_protocol_source? "," range ","corrector replace "," allow_http_protocol? ","source == ","source_node value "," source_node value _range "," insecure_protocol_source_node value ? ","source_node value  == ","source_node value _node value "]}," RuboCop Config validate_syntax_cop":{"type":"method","name":"validate_syntax_cop","children":[],"call":[" raise "," loaded_path ","valid_cop_names include? "," smart_loaded_path ","default_config merge != ","default_config merge ","ConfigLoader  default_configuration [] ","ConfigLoader  default_configuration "," [] ","ConfigLoader  default_configuration []  merge != ","ConfigLoader  default_configuration []  merge ","ConfigLoader  ConfigLoader  default_configuration [] uration [] ","ConfigLoader  ConfigLoader  default_configuration [] uration "]}," RuboCop Config each_key":{"type":"method","name":"each_key","children":[],"call":["@hash each_key "]}," RuboCop AST YieldNode node_parts":{"type":"method","name":"node_parts","children":[],"call":[" to_a "]}," RuboCop AST RegexpNode content":{"type":"method","name":"content","children":[],"call":["str str_content "," children first "," children "," children select map join "," children select map "," children select "," children first   children first _content "]}," RuboCop AST RegexpNode regopt":{"type":"method","name":"regopt","children":[],"call":["first regopt_type? "," children last "," children "]}," RuboCop AST RegexpNode to_regexp":{"type":"method","name":"to_regexp","children":[],"call":["Regexp  new "," content ","(send\n  (send\n    (send nil :regopt) :children) :map) inject ","OPTIONS  [] "," regopt children map "," regopt children "," regopt "]}," RuboCop AST MethodIdentifierPredicates const_receiver?":{"type":"method","name":"const_receiver?","children":[],"call":[" receiver const_type? "," receiver "]}," RuboCop AST MethodIdentifierPredicates self_receiver?":{"type":"method","name":"self_receiver?","children":[],"call":[" receiver self_type? "," receiver "]}," RuboCop AST MethodIdentifierPredicates camel_case_method?":{"type":"method","name":"camel_case_method?","children":[],"call":[" method_name to_s =~ "," method_name to_s "," method_name "]}," RuboCop AST MethodIdentifierPredicates bang_method?":{"type":"method","name":"bang_method?","children":[],"call":[" method_name to_s end_with? "," method_name to_s "," method_name "]}," RuboCop AST MethodIdentifierPredicates predicate_method?":{"type":"method","name":"predicate_method?","children":[],"call":[" method_name to_s end_with? "," method_name to_s "," method_name "]}," RuboCop AST MethodIdentifierPredicates enumerator_method?":{"type":"method","name":"enumerator_method?","children":[],"call":[" method_name to_s start_with? "," method_name to_s "," method_name ","ENUMERATOR_METHODS  include? "]}," RuboCop AST MethodIdentifierPredicates assignment_method?":{"type":"method","name":"assignment_method?","children":[],"call":[" method_name to_s end_with? "," method_name to_s "," method_name "," comparison_method? ! "," comparison_method? "]}," RuboCop AST MethodIdentifierPredicates comparison_method?":{"type":"method","name":"comparison_method?","children":[],"call":["Node COMPARISON_OPERATORS  include? "," method_name "]}," RuboCop AST MethodIdentifierPredicates operator_method?":{"type":"method","name":"operator_method?","children":[],"call":["RuboCop Cop Util OPERATOR_METHODS  include? "," method_name ","OPERATOR_METHODS  include? "]}," RuboCop AST MethodIdentifierPredicates method?":{"type":"method","name":"method?","children":[],"call":[" method_name == ","name to_sym "," method_name "]}," RuboCop AST MethodDispatchNode root_node?":{"type":"method","name":"root_node?","children":[],"call":["node parent nil? ","node parent "]}," RuboCop AST MethodDispatchNode macro_kwbegin_wrapper?":{"type":"method","name":"macro_kwbegin_wrapper?","children":[],"call":[" macro_scope? ","parent kwbegin_type? "]}," RuboCop AST MethodDispatchNode def_modifier?":{"type":"method","name":"def_modifier?","children":[],"call":["(self) any? "," each_descendant "," send_type? "]}," RuboCop AST MethodDispatchNode block_node":{"type":"method","name":"block_node","children":[],"call":[" parent "," block_literal? "]}," RuboCop AST MethodDispatchNode block_literal?":{"type":"method","name":"block_literal?","children":[],"call":[" eql? "," parent send_node "," parent "," parent block_type? "]}," RuboCop AST MethodDispatchNode implicit_call?":{"type":"method","name":"implicit_call?","children":[],"call":[" loc selector ! "," loc selector "," loc "," method? "]}," RuboCop AST MethodDispatchNode const_receiver?":{"type":"method","name":"const_receiver?","children":[],"call":[" receiver const_type? "," receiver "]}," RuboCop AST MethodDispatchNode self_receiver?":{"type":"method","name":"self_receiver?","children":[],"call":[" receiver self_type? "," receiver "]}," RuboCop AST MethodDispatchNode double_colon?":{"type":"method","name":"double_colon?","children":[],"call":[" loc dot is? "," loc dot "," loc "," loc respond_to? "]}," RuboCop AST MethodDispatchNode dot?":{"type":"method","name":"dot?","children":[],"call":[" loc dot is? "," loc dot "," loc "," loc respond_to? "]}," RuboCop AST MethodDispatchNode setter_method?":{"type":"method","name":"setter_method?","children":[],"call":[" loc operator "," loc "," loc respond_to? "]}," RuboCop AST MethodDispatchNode command?":{"type":"method","name":"command?","children":[],"call":[" method? "," receiver ! "," receiver "]}," RuboCop AST MethodDispatchNode access_modifier?":{"type":"method","name":"access_modifier?","children":[],"call":[" bare_access_modifier? "," macro? "," non_bare_access_modifier? "]}," RuboCop AST MethodDispatchNode macro?":{"type":"method","name":"macro?","children":[],"call":[" macro_scope? "," receiver ! "," receiver "]}," RuboCop AST MethodDispatchNode arguments":{"type":"method","name":"arguments","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST MethodDispatchNode method_name":{"type":"method","name":"method_name","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST MethodDispatchNode receiver":{"type":"method","name":"receiver","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST IfNode elsif_conditional?":{"type":"method","name":"elsif_conditional?","children":[],"call":[" else_branch elsif? "," else_branch "," else_branch if_type? "]}," RuboCop AST ForNode void_context?":{"type":"method","name":"void_context?","children":[],"call":[]}," RuboCop AST DefNode node_parts":{"type":"method","name":"node_parts","children":[],"call":[" to_a reverse "," to_a "]}," RuboCop AST DefNode receiver":{"type":"method","name":"receiver","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST DefNode body":{"type":"method","name":"body","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST DefNode arguments":{"type":"method","name":"arguments","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST DefNode method_name":{"type":"method","name":"method_name","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST DefNode void_context?":{"type":"method","name":"void_context?","children":[],"call":[" assignment_method? "," method? "]}," RuboCop AST BlockNode void_context?":{"type":"method","name":"void_context?","children":[],"call":["VOID_CONTEXT_METHODS  include? "," send_node method_name "," send_node "," method_name "]}," RuboCop AST ArrayNode bracketed?":{"type":"method","name":"bracketed?","children":[],"call":[" percent_literal? "," square_brackets? "]}," RuboCop RemoteConfig inherit_from_remote":{"type":"method","name":"inherit_from_remote","children":[],"call":["RemoteConfig  new ","File  dirname ","new_uri to_s ","new_uri path gsub! ","new_uri path ","@uri dup ","file delete_prefix ","@uri dup  to_s ","@uri dup  path gsub! ","@uri dup  path "]}," RuboCop Cop Style TrailingUnderscoreVariable unused_range":{"type":"method","name":"unused_range","children":[],"call":[" range_between ","mlhs_node source_range end_pos ","mlhs_node source_range ","right source_range begin_pos ","right source_range ","mlhs_node source_range begin_pos "]}," RuboCop Cop Style TrailingUnderscoreVariable children_offenses":{"type":"method","name":"children_offenses","children":[],"call":[" unneeded_ranges ","variables select flat_map ","variables select "]}," RuboCop Cop Style TrailingUnderscoreVariable main_node_offense":{"type":"method","name":"main_node_offense","children":[],"call":[" range_between ","node loc operator begin_pos ","node loc operator ","node loc ","first_offense source_range begin_pos ","first_offense source_range "," range_for_parentheses ","Util  parentheses? "," unused_range ","node type "," unused_variables_only? "," find_first_offense ","node masgn_type? "," find_first_offense  source_range begin_pos "," find_first_offense  source_range "," find_ find_first_offense  "]}," RuboCop Cop Style TrailingUnderscoreVariable unneeded_ranges":{"type":"method","name":"unneeded_ranges","children":[],"call":[" children_offenses << "," children_offenses ","main_offense nil? "," main_node_offense ","node masgn_type? "," main_node_offense  nil? "]}," RuboCop Cop Style StderrPuts stderr_puts_range":{"type":"method","name":"stderr_puts_range","children":[],"call":[" range_between ","send loc selector end_pos ","send loc selector ","send loc ","send loc expression begin_pos ","send loc expression ","send source_range begin_pos ","send source_range "]}," RuboCop Cop Style StderrPuts stderr_gvar?":{"type":"method","name":"stderr_gvar?","children":[],"call":["sym == "]}," RuboCop Cop Style StderrPuts autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," stderr_puts_range "," lambda "]}," RuboCop Cop Style StderrPuts on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," stderr_puts_range "," stderr_puts? ","corrector replace "," message ","  message  "]}," RuboCop Cop Style SafeNavigation negated?":{"type":"method","name":"negated?","children":[],"call":["send_node parent method? ","send_node parent ","send_node parent send_type? ","send_node method? ","send_node send_type? "," negated? "," method_called? "]}," RuboCop Cop Style SafeNavigation extract_common_parts":{"type":"method","name":"extract_common_parts","children":[],"call":["matching_receiver parent "," find_matching_receiver_invocation "," find_matching_receiver_invocation  parent "," find_ find_matching_receiver_invocation _invocation "]}," RuboCop Cop Style MixinUsage top_level_node?":{"type":"method","name":"top_level_node?","children":[],"call":[" top_level_node? ","node parent ","node sibling_index zero? ","node sibling_index ","node parent parent nil? ","node parent parent "]}," RuboCop Cop Style MixinUsage on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format "," top_level_node? "," include_statement "," accepted_include? ","node argument? "," belongs_to_class_or_module? "," in_top_level_scope? "," include_ include_statement  "]}," RuboCop Cop Style DateTime on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," historic_date? "," date_time? "," to_datetime? "," disallow_coercion? "," autocorrect "]}," RuboCop Cop Style CommentedKeyword extract_heredoc_lines":{"type":"method","name":"extract_heredoc_lines","children":[],"call":["heredocs << ","body last_line ","body first_line ","node location heredoc_body ","node location ","node location is_a? ","ast each_node with_object ","ast each_node ","ast each_node select map ","ast each_node select ","node location heredoc_body  last_line ","node location heredoc_body  first_line ","node location heredoc_node location heredoc_body  "]}," RuboCop Cop Style CommentedKeyword message":{"type":"method","name":"message","children":[],"call":[" format ","(str \"^\\\\s*(\\\\S+).*#\") match [] ","(str \"^\\\\s*(\\\\S+).*#\") match ","node source_line "," line match [] "," line match "," line ","node source_node source_line  "," node source_line  match [] "," node source_line  match "," node source_line  "]}," RuboCop Cop Style CommentedKeyword offensive?":{"type":"method","name":"offensive?","children":[],"call":["line =~ ","ALLOWED_COMMENTS  none? ","KEYWORDS  any? ","line start_with? ","line lstrip "," line ","(str \"#\\\\s*\") match? ","(str \"^\\\\s*\") match? ","r match? ","ALLOWED_COMMENT_REGEXES  none? ","KEYWORD_REGEXES  any? "," source_line ","line lstrip  =~ "," line  =~ "," source_line  =~ ","line lstrip  start_with? "," line  start_with? "," source_line  start_with? ","line lstrip  lstrip "," line  lstrip "," source_line  lstrip "," line lstrip  ","  line  ","  source_line  "," source_line lstrip  "," source_ line  "," source_ source_line  "]}," RuboCop Cop Style CommentedKeyword investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense "," source_range ","line length ","line index ","index + ","processed_source buffer "," offensive? ","r include? ","heredoc_lines any? ","processed_source lines each_with_index ","processed_source lines "," extract_heredoc_lines ","processed_source ast ","location last_column ","location column ","processed_source lines [] ","line_position - ","location line ","comment location ","processed_source comments each ","processed_source comments ","processed_source each_comment "," source_ source_range  ","processed_source lines []  length ","processed_source lines []  index "," extract_heredoc_lines  any? ","heredoc_processed_source lines [] s any? ","processed_source processed_source lines [] s each_with_index ","processed_source processed_source lines [] s "," extract_ extract_heredoc_lines  "," extract_heredoc_processed_source lines [] s ","comment location  last_column ","comment location  column ","processed_source processed_source lines [] s [] ","processed_source lines [] _position - ","location line  - ","location processed_source lines []  ","comment location  line ","comment comment location  "]}," RuboCop Cop Rails UnknownEnv environments":{"type":"method","name":"environments","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Rails UnknownEnv unknown_env_name?":{"type":"method","name":"unknown_env_name?","children":[],"call":[" environments include? ! "," environments include? ","name [] "," environments ","name end_with? ","name to_s ","name to_s  [] ","name to_s  end_with? ","name to_s  to_s "]}," RuboCop Cop Rails UnknownEnv message":{"type":"method","name":"message","children":[],"call":[" format "," find_similar_name ","name to_s "," find_ find_similar_name _name "]}," RuboCop Cop Rails UnknownEnv collect_variable_like_names":{"type":"method","name":"collect_variable_like_names","children":[],"call":["env + "," environments map "," environments "]}," RuboCop Cop Rails UnknownEnv on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," message "," unknown_environment? "]}," RuboCop Cop Rails HasManyOrHasOneDependent valid_options?":{"type":"method","name":"valid_options?","children":[],"call":[" present_option? "," dependent_option? ","options any? "]}," RuboCop Cop Naming PredicateName method_definition_macros":{"type":"method","name":"method_definition_macros","children":[],"call":[" cop_config [] include? ","macro_name to_s "," cop_config [] "," cop_config "]}," RuboCop Cop Naming PredicateName allowed_method_name?":{"type":"method","name":"allowed_method_name?","children":[],"call":[" predicate_whitelist include? "," predicate_whitelist ","method_name == "," expected_name ","method_name start_with? ! ","method_name start_with? ","method_name end_with? ","method_name match ! ","method_name match "," allowed_methods include? "," allowed_methods ","method_name match? ! ","method_name match? "," allowed_method? ","(and\n  (send\n    (lvar :method_name) :start_with?\n    (lvar :prefix))\n  (send\n    (lvar :method_name) :match?\n    (regexp\n      (str \"^\")\n      (begin\n        (lvar :prefix))\n      (str \"[^0-9]\")\n      (regopt)))) ! "]}," RuboCop Cop Naming PredicateName on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," message "," expected_name ","method_name to_s ","node first_argument loc expression ","node first_argument loc ","node first_argument "," allowed_method_name? "," predicate_prefixes each "," predicate_prefixes "," dynamic_method_define ","node first_argument source_range "]}," RuboCop Cop Lint UnusedArgument find_assignment_without_variable_usage":{"type":"method","name":"find_assignment_without_variable_usage","children":[],"call":[" uses_var? ! "," uses_var? ","assignment variable name ","assignment variable ","assignment node ","assignment meta_assignment_node ","assignment branch ","variable assignments find ","variable assignments "]}," RuboCop Cop Lint UnusedArgument variable_used?":{"type":"method","name":"variable_used?","children":[],"call":["pos <= ","reference_positions any? ","var node source_range begin_pos ","var node source_range ","var node ","variable references map ","variable references ","assignment_without_usage node source_range begin_pos ","assignment_without_usage node source_range ","assignment_without_usage node "," find_assignment_without_variable_usage ","variable referenced? "," find_assignment_without_variable_usage  node source_range begin_pos "," find_assignment_without_variable_usage  node source_range "," find_assignment_without_variable_usage  node "]}," RuboCop Cop OrderedGemNode get_source_range":{"type":"method","name":"get_source_range","children":[],"call":["node source_range ","first_comment loc expression ","first_comment loc ","first_comment nil? "," processed_source ast_with_comments [] first "," processed_source ast_with_comments [] "," processed_source ast_with_comments "," processed_source "," cop_config [] "," cop_config ","first_comment source_range "," processed_source ast_with_comments [] first  loc expression "," processed_source ast_with_comments [] first  loc "," processed_source ast_with_comments [] first  nil? "," processed_source ast_with_comments [] first  source_range "]}," RuboCop Cop OrderedGemNode swap_range":{"type":"method","name":"swap_range","children":[],"call":["corrector replace ","range2 source ","range1 source "]}," RuboCop Cop OrderedGemNode declaration_with_comment":{"type":"method","name":"declaration_with_comment","children":[],"call":["Parser Source Range  new ","buffer line_range end_pos ","buffer line_range ","buffer line_for_position ","node loc expression end_pos ","node loc expression ","node loc "," get_source_range begin_pos "," get_source_range "," processed_source buffer "," processed_source ","buffer line_range buffer line_range end_pos  "," processed_source buffer  line_range end_pos "," processed_source buffer  line_range "," processed_source buffer  line_for_position ","node loc expression buffer line_range end_pos  "," get_source_range  get_source_range begin_pos  "," processed_source  processed_source buffer  "]}," RuboCop Cop OrderedGemNode autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" swap_range "," lambda "," declaration_with_comment "," previous_declaration ","  previous_declaration _declaration "]}," RuboCop Cop OrderedGemNode gem_name":{"type":"method","name":"gem_name","children":[],"call":["declaration_node first_argument str_content ","declaration_node first_argument "," find_gem_name "]}," RuboCop Cop OrderedGemNode register_offense":{"type":"method","name":"register_offense","children":[],"call":[" add_offense "," format "," gem_name "," class ","OrderedGemCorrector  correct call ","OrderedGemCorrector  correct "," treat_comments_as_separators "," previous_declaration "," processed_source "]}," RuboCop Cop OrderedGemNode consecutive_lines":{"type":"method","name":"consecutive_lines","children":[],"call":["previous source_range last_line == ","first_line - ","previous source_range last_line ","previous source_range "," get_source_range first_line "," get_source_range "," treat_comments_as_separators "," get_source_range first_line  - "," get_source_range  get_source_range first_line  "]}," RuboCop Cop OrderedGemNode case_insensitive_out_of_order?":{"type":"method","name":"case_insensitive_out_of_order?","children":[],"call":["string_a downcase < ","string_b downcase ","string_a downcase "," gem_canonical_name < "," gem_canonical_name "]}," RuboCop Cop Lint UnneededRequireStatement autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove "," range_with_surrounding_space ","node loc expression ","node loc "," lambda ","  range_with_surrounding_space _with_surrounding_space "]}," RuboCop Cop Lint UnneededRequireStatement on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," unnecessary_require_statement? "]}," RuboCop Cop Lint ShadowedException system_call_err?":{"type":"method","name":"system_call_err?","children":[],"call":["error ancestors [] == ","error ancestors [] ","error ancestors "]}," RuboCop Cop Lint ShadowedException compare_exceptions":{"type":"method","name":"compare_exceptions","children":[],"call":["exception <=> ","exception const_get != ","other_exception const_get ","exception const_get "," system_call_err? "]}," RuboCop Cop Lint ReturnInVoidContext setter_method?":{"type":"method","name":"setter_method?","children":[],"call":["AST Node COMPARISON_OPERATORS  include? ! ","AST Node COMPARISON_OPERATORS  include? ","method_name to_s end_with? ","method_name to_s "]}," RuboCop Cop Lint ReturnInVoidContext void_context_method?":{"type":"method","name":"void_context_method?","children":[],"call":[" setter_method? ","method_name == "]}," RuboCop Cop Lint ReturnInVoidContext non_void_context":{"type":"method","name":"non_void_context","children":[],"call":["return_node each_ancestor first ","return_node each_ancestor "]}," RuboCop Cop Lint RegexpAsCondition on_match_current_line":{"type":"method","name":"on_match_current_line","children":[],"call":[" add_offense ","corrector replace ","node source "," ignore_node "," part_of_ignored_node? ","node ancestors none? ","node ancestors "]}," RuboCop Cop Lint RedundantWithObject with_object_range":{"type":"method","name":"with_object_range","children":[],"call":[" range_between ","send source length ","send source ","send loc selector begin_pos ","send loc selector ","send loc ","send loc expression end_pos ","send loc expression ","send source_range end_pos ","send source_range "]}," RuboCop Cop Lint RedundantWithObject message":{"type":"method","name":"message","children":[],"call":["node method_name == ","node method_name ","node method? "]}," RuboCop Cop Lint RedundantWithObject autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove ","send loc dot ","send loc "," with_object_range ","corrector replace ","send method_name == ","send method_name "," redundant_with_object? "," lambda ","send method? "]}," RuboCop Cop Lint RedundantWithObject on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," with_object_range "," redundant_with_object? ","corrector remove ","send loc dot ","send loc ","corrector replace ","send method? "," message "," with_object_ with_object_range  "," redundant_with_object?  loc dot "," redundant_with_object?  loc "," redundant_with_object?  method? "]}," RuboCop Cop Lint LiteralAsCondition condition":{"type":"method","name":"condition","children":[],"call":["node condition ","node receiver ","node send_type? "]}," RuboCop Cop Lint LiteralAsCondition check_case":{"type":"method","name":"check_case","children":[],"call":[" handle_node ","condition dstr_type? "," primitive_array? ! "," primitive_array? ","condition array_type? ","case_node condition ","case_node condition  dstr_type? ","case_node condition  array_type? ","case_node case_node condition  "]}," RuboCop Cop Lint LiteralAsCondition handle_node":{"type":"method","name":"handle_node","children":[],"call":[" check_node ","(sym :send) include? ","node type "," add_offense ","node literal? "]}," RuboCop Cop Lint LiteralAsCondition check_node":{"type":"method","name":"check_node","children":[],"call":[" handle_node ","node children first ","node children ","node children one? ","node begin_type? ","node each_child_node ","LOGICAL_OPERATOR_NODES  include? ","node type ","node keyword_bang? ","node receiver ","node prefix_bang? ","node send_type? ","node operator_keyword? "]}," RuboCop Cop Lint LiteralAsCondition primitive_array?":{"type":"method","name":"primitive_array?","children":[],"call":[" basic_literal? ","node children all? ","node children "]}," RuboCop Cop Lint LiteralAsCondition basic_literal?":{"type":"method","name":"basic_literal?","children":[],"call":["node basic_literal? "," primitive_array? ","node array_type? "]}," RuboCop Cop Lint LiteralAsCondition check_for_literal":{"type":"method","name":"check_for_literal","children":[],"call":[" check_node "," add_offense ","cond literal? "," condition "," condition  literal? ","  condition ition "]}," RuboCop Cop Lint LiteralAsCondition message":{"type":"method","name":"message","children":[],"call":[" format ","node source "]}," RuboCop Cop Lint LiteralAsCondition on_send":{"type":"method","name":"on_send","children":[],"call":[" check_for_literal ","node negation_method? "]}," RuboCop Cop Lint LiteralAsCondition on_case":{"type":"method","name":"on_case","children":[],"call":[" add_offense ","when_node conditions all? ","when_node conditions ","case_node each_when "," check_case ","case_node condition "," message "," when_conditions_range ","  message  "," when_conditions_ when_conditions_range  "]}," RuboCop Cop Lint LiteralAsCondition on_until_post":{"type":"method","name":"on_until_post","children":[],"call":[" check_for_literal "]}," RuboCop Cop Lint LiteralAsCondition on_until":{"type":"method","name":"on_until","children":[],"call":[" check_for_literal "," condition false_type? "," condition "]}," RuboCop Cop Lint LiteralAsCondition on_while_post":{"type":"method","name":"on_while_post","children":[],"call":[" check_for_literal "]}," RuboCop Cop Lint LiteralAsCondition on_while":{"type":"method","name":"on_while","children":[],"call":[" check_for_literal "," condition true_type? "," condition "]}," RuboCop Cop Lint LiteralAsCondition on_if":{"type":"method","name":"on_if","children":[],"call":[" check_for_literal "]}," RuboCop Cop InternalAffairs RedundantMessageArgument find_offending_argument":{"type":"method","name":"find_offending_argument","children":[],"call":["node == ","node ! "," message_method_call "," redundant_message_argument ","kwargs pairs each ","kwargs pairs "," message_method_call  == "," message_method_call  ! "]}," RuboCop Cop InternalAffairs RedundantMessageArgument offending_range":{"type":"method","name":"offending_range","children":[],"call":[" range_with_surrounding_comma "," range_with_surrounding_space ","node loc expression ","node loc ","node source_range "]}," RuboCop Cop InternalAffairs RedundantLocationArgument offending_range":{"type":"method","name":"offending_range","children":[],"call":[" range_with_surrounding_comma "," range_with_surrounding_space ","node loc expression ","node loc ","node source_range "]}," RuboCop Cop InternalAffairs RedundantLocationArgument redundant_location_argument":{"type":"method","name":"redundant_location_argument","children":[],"call":[" redundant_location_argument? ","kwargs pairs find ","kwargs pairs "," add_offense_kwargs "]}," RuboCop Cop InternalAffairs OffenseLocationKeyword find_offending_argument":{"type":"method","name":"find_offending_argument","children":[],"call":["searched_node == "," offending_location_argument ","kwargs pairs each ","kwargs pairs "]}," RuboCop Cop InternalAffairs DeprecatedPositionalArguments extract_arguments":{"type":"method","name":"extract_arguments","children":[],"call":["arg each_child_node any? ","arg each_child_node ","arg hash_type? ","arg block_pass_type? ","node arguments butfirst take_while ","node arguments butfirst ","node arguments "]}," RuboCop Cop InternalAffairs DeprecatedPositionalArguments positional_arguments":{"type":"method","name":"positional_arguments","children":[],"call":["positional_args any? ","arguments drop_last ","args last hash_type? ","args last "," lambda ","args first hash_type? ","args first ","args one? ","empty? to_proc "," extract_arguments "," extract_arguments  drop_last "," extract_ extract_arguments  "]}," RuboCop Cop InternalAffairs DeprecatedPositionalArguments autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","arg source ","arg source_range ","arguments zip each ","arguments zip "," lambda ","arguments any? "," positional_arguments "]}," RuboCop Cop InternalAffairs DeprecatedPositionalArguments on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," range_between ","arguments last loc expression end_pos ","arguments last loc expression ","arguments last loc ","arguments last ","arguments first loc expression begin_pos ","arguments first loc expression ","arguments first loc ","arguments first "," positional_arguments ","node method_name == ","node method_name "]}," RuboCop Cop Gemspec OrderedDependencies get_dependency_name":{"type":"method","name":"get_dependency_name","children":[],"call":["node method_name "]}," RuboCop Cop Gemspec OrderedDependencies previous_declaration":{"type":"method","name":"previous_declaration","children":[],"call":["declarations to_a [] ","node_index - ","declarations to_a ","declarations find_index "," dependency_declarations "," processed_source ast "," processed_source "," dependency_declarations  to_a [] ","declarations find_index  - "," dependency_declarations  to_a "," dependency_declarations  find_index "," dependency_ dependency_declarations  "]}," RuboCop Cop Gemspec OrderedDependencies investigate":{"type":"method","name":"investigate","children":[],"call":[" register_offense "," get_dependency_name == "," get_dependency_name "," case_insensitive_out_of_order? "," gem_name "," consecutive_lines "," dependency_declarations each_cons "," dependency_declarations ","processed_source ast ","processed_source ast nil? ","processed_source blank? "]}," RuboCop Cop Cop add_offense_common":{"type":"method","name":"add_offense_common","children":[],"call":["status != "," block_given? ","@offenses << ","Offense  new "," name "," correct "," enabled_line? ","loc line "," annotate "," message "," default_severity "," custom_severity "," duplicate_location? "," find_location "," correct  != "," b find_location k_given? "," find_location  line ","  annotate  "," duplicate_ find_location ation? "," find_ find_location ation "]}," RuboCop Cop Cop add_offense_deprecated":{"type":"method","name":"add_offense_deprecated","children":[],"call":[" add_offense_common "," warn "," Rainbow red "," Rainbow ","(str \"          \") strip_indent ","caller lineno ","caller path "," caller_locations first "," caller_locations "," caller_locations first  lineno "," caller_locations first  path ","  caller_locations first _locations first ","  caller_locations first _locations "]}," RuboCop ConfigLoader add_excludes_from_files":{"type":"method","name":"add_excludes_from_files","children":[],"call":["config add_excludes_from_higher_level "," load_file ","found_files last "," print "," debug? ","found_files last != ","found_files any? "," config_files_in_path ","PathUtil  relative_path == ","PathUtil  relative_path ","found_files empty? "," find_files_upwards "," find_files_upwards + ","(send nil :find_user_dotfile) compact "," find_user_xdg_config "," find_user_dotfile "," find_last_file_upwards "," project_root ","ConfigFinder  project_root "," config_files_in_path  last "," find_files_upwards  last "," find_files_upwards +  last ","(send nil :find_user_dotfile) compact  last "," config_files_in_path  last != "," find_files_upwards  last != "," find_files_upwards +  last != ","(send nil :find_user_dotfile) compact  last != "," config_files_in_path  any? "," find_files_upwards  any? "," find_files_upwards +  any? ","(send nil :find_user_dotfile) compact  any? "," config_files_in_path  empty? "," find_files_upwards  empty? "," find_files_upwards +  empty? ","(send nil :find_user_dotfile) compact  empty? "]}," RuboCop ConfigLoader inherited_file":{"type":"method","name":"inherited_file","children":[],"call":[" print "," debug? ","f include? "," auto_gen_config? ","File  expand_path ","File  dirname ","file inherit_from_remote ","file is_a? ","RemoteConfig  new ","inherit_from =~ ","URI DEFAULT_PARSER  make_regexp ","File  expand_path  include? ","file inherit_from_remote  include? ","RemoteConfig  new  include? "," auto_gen_conFile  expand_path ig? "," auto_gen_confile inherit_from_remote ig? "," auto_gen_conRemoteConfig  new ig? ","File  expand_path ile inherit_File  expand_path rom_remote ","file inherit_from_remote ile inherit_file inherit_from_remote rom_remote ","RemoteConfig  new ile inherit_RemoteConfig  new rom_remote ","File  expand_path ile is_a? ","file inherit_from_remote ile is_a? ","RemoteConfig  new ile is_a? ","RemoteConFile  expand_path ig  new ","RemoteConfile inherit_from_remote ig  new ","RemoteConRemoteConfig  new ig  new ","inherit_File  expand_path rom =~ ","inherit_file inherit_from_remote rom =~ ","inherit_RemoteConfig  new rom =~ ","URI DEFAULT_PARSER  make_URI DEFAULT_PARSER  make_regexp p "]}," RuboCop Config smart_loaded_path":{"type":"method","name":"smart_loaded_path","children":[],"call":["PathUtil  smart_path "]}," RuboCop Config target_ruby_source":{"type":"method","name":"target_ruby_source","children":[],"call":[" smart_loaded_path "," bundler_lock_file_path "]}," RuboCop AST SendNode negation_method?":{"type":"method","name":"negation_method?","children":[],"call":[" keyword_not? "," keyword_bang? "]}," RuboCop Token space_before?":{"type":"method","name":"space_before?","children":[],"call":[" pos source_buffer source match "," begin_pos - "," begin_pos "," pos source_buffer source "," pos source_buffer "," pos "," begin_pos zero? "]}," RuboCop Token space_after?":{"type":"method","name":"space_after?","children":[],"call":[" pos source_buffer source match "," end_pos "," pos source_buffer source "," pos source_buffer "," pos "]}," RuboCop Token equal_sign?":{"type":"method","name":"equal_sign?","children":[],"call":["(sym :tEQL) include? "," type "]}," RuboCop Token comma?":{"type":"method","name":"comma?","children":[],"call":[" type == "," type "]}," RuboCop Token right_parens?":{"type":"method","name":"right_parens?","children":[],"call":[" type == "," type "]}," RuboCop Token left_parens?":{"type":"method","name":"left_parens?","children":[],"call":["(sym :tLPAREN) include? "," type "]}," RuboCop Token right_curly_brace?":{"type":"method","name":"right_curly_brace?","children":[],"call":[" type == "," type "]}," RuboCop Token left_curly_brace?":{"type":"method","name":"left_curly_brace?","children":[],"call":[" type == "," type "]}," RuboCop Token left_brace?":{"type":"method","name":"left_brace?","children":[],"call":[" type == "," type "]}," RuboCop Token right_bracket?":{"type":"method","name":"right_bracket?","children":[],"call":[" type == "," type "]}," RuboCop Token left_ref_bracket?":{"type":"method","name":"left_ref_bracket?","children":[],"call":[" type == "," type "]}," RuboCop Token left_array_bracket?":{"type":"method","name":"left_array_bracket?","children":[],"call":[" type == "," type "]}," RuboCop Token semicolon?":{"type":"method","name":"semicolon?","children":[],"call":[" type == "," type "]}," RuboCop Token comment?":{"type":"method","name":"comment?","children":[],"call":[" type == "," type "]}," RuboCop Token end_pos":{"type":"method","name":"end_pos","children":[],"call":[" pos end_pos "," pos ","@pos end_pos "]}," RuboCop Token begin_pos":{"type":"method","name":"begin_pos","children":[],"call":[" pos begin_pos "," pos ","@pos begin_pos "]}," RuboCop Token column":{"type":"method","name":"column","children":[],"call":[" pos column "," pos ","@pos column "]}," RuboCop Token line":{"type":"method","name":"line","children":[],"call":[" pos line "," pos ","@pos line "]}," RuboCop PathUtil reset_pwd":{"type":"method","name":"reset_pwd","children":[],"call":[]}," RuboCop PathUtil pwd":{"type":"method","name":"pwd","children":[],"call":[]}," RuboCop Formatter QuietFormatter report_summary":{"type":"method","name":"report_summary","children":[],"call":["offense_count zero? "]}," RuboCop Cop Util final_pos":{"type":"method","name":"final_pos","children":[],"call":[" move_pos "," move_ move_pos  "]}," RuboCop Cop Util precede?":{"type":"method","name":"precede?","children":[],"call":[" line_distance == "," line_distance "]}," RuboCop Cop Style TrailingMethodEndStatement remove_semicolon":{"type":"method","name":"remove_semicolon","children":[],"call":["corrector remove "," token_before_end pos "," token_before_end "," token_before_end semicolon? "]}," RuboCop Cop Style TrailingMethodEndStatement break_line_before_end":{"type":"method","name":"break_line_before_end","children":[],"call":["corrector insert_before ","\n + ","  * "," configured_indentation_width "," end_token pos "," end_token "]}," RuboCop Cop Style TrailingMethodEndStatement token_before_end":{"type":"method","name":"token_before_end","children":[],"call":[" processed_source tokens [] ","i - "," processed_source tokens "," processed_source "," processed_source tokens index "," end_token "," tokens [] "," tokens "," tokens index "," processed_source tokens index  - "," tokens index  - "," processed_source tokens  processed_source tokens index ndex "," processed_source tokens  tokens index ndex "," tokens  processed_source tokens index ndex "," tokens  tokens index ndex "]}," RuboCop Cop Style TrailingMethodEndStatement body_and_end_on_same_line?":{"type":"method","name":"body_and_end_on_same_line?","children":[],"call":[" end_token line == "," token_before_end line "," token_before_end "," end_token line "," end_token ","last_child loc last_line == ","node loc end last_line ","node loc end ","node loc ","last_child loc last_line ","last_child loc ","node children last ","node children ","node children last  loc last_line == ","node children last  loc last_line ","node children last  loc "]}," RuboCop Cop Style TrailingMethodEndStatement end_token":{"type":"method","name":"end_token","children":[],"call":["token type == ","token type "," processed_source tokens reverse find "," processed_source tokens reverse "," processed_source tokens "," processed_source "," tokens reverse find "," tokens reverse "," tokens "]}," RuboCop Cop Style TrailingMethodEndStatement trailing_end?":{"type":"method","name":"trailing_end?","children":[],"call":[" body_and_end_on_same_line? "," end_token ","node multiline? ","node body "]}," RuboCop Cop Style TrailingMethodEndStatement autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" remove_semicolon "," break_line_before_end "," lambda "]}," RuboCop Cop Style TrailingMethodEndStatement on_def":{"type":"method","name":"on_def","children":[],"call":[" add_offense "," end_token pos "," end_token ","node to_a last ","node to_a "," trailing_end? ","corrector insert_before ","\n + ","  * ","node loc keyword column ","node loc keyword ","node loc ","node loc end "," trailing_end? ! ","node endless? "]}," RuboCop Cop Style TrailingBodyOnMethodDefinition semicolon":{"type":"method","name":"semicolon","children":[],"call":["token semicolon? ","token line == ","token line "," processed_source tokens find "," processed_source tokens "," processed_source "]}," RuboCop Cop Style TrailingBodyOnMethodDefinition remove_semicolon":{"type":"method","name":"remove_semicolon","children":[],"call":["corrector remove "," semicolon pos "," semicolon "]}," RuboCop Cop Style TrailingBodyOnMethodDefinition end_of_line_comment":{"type":"method","name":"end_of_line_comment","children":[],"call":["c loc line == ","c loc line ","c loc "," processed_source comments find "," processed_source comments "," processed_source "]}," RuboCop Cop Style TrailingBodyOnMethodDefinition move_comment":{"type":"method","name":"move_comment","children":[],"call":["corrector remove ","eol_comment loc expression ","eol_comment loc ","corrector insert_before ","text + + ","  * ","node loc keyword column ","node loc keyword ","node loc ","text + ","node source_range ","eol_comment loc expression source "," end_of_line_comment ","node source_range line "," end_of_line_comment  loc expression "," end_of_line_comment  loc ","eol_comment loc expression source  + + ","eol_comment loc expression source  + "," end_of_line_comment  loc expression source "]}," RuboCop Cop Style TrailingBodyOnMethodDefinition first_part_of":{"type":"method","name":"first_part_of","children":[],"call":["body source_range ","body children first source_range ","body children first ","body children ","body begin_type? "]}," RuboCop Cop Style TrailingBodyOnMethodDefinition break_line_before_body":{"type":"method","name":"break_line_before_body","children":[],"call":["corrector insert_before ","\n + ","  * ","node loc keyword column + "," configured_indentation_width ","node loc keyword column ","node loc keyword ","node loc "," first_part_of ","node body "]}," RuboCop Cop Style TrailingBodyOnMethodDefinition on_def_line?":{"type":"method","name":"on_def_line?","children":[],"call":["node source_range first_line == ","node body source_range first_line ","node body source_range ","node body ","node source_range first_line ","node source_range "]}," RuboCop Cop Style TrailingBodyOnMethodDefinition trailing_body?":{"type":"method","name":"trailing_body?","children":[],"call":[" on_def_line? ","node multiline? ","node body "]}," RuboCop Cop Style TrailingBodyOnMethodDefinition autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" remove_semicolon "," move_comment "," break_line_before_body "," lambda ","LineBreakCorrector  correct_trailing_body "," processed_source "," configured_indentation_width "]}," RuboCop Cop Style TrailingBodyOnMethodDefinition on_def":{"type":"method","name":"on_def","children":[],"call":[" add_offense "," first_part_of ","node body "," trailing_body? ","LineBreakCorrector  correct_trailing_body "," processed_source "," configured_indentation_width ","node body parenthesized_call? ","node endless? "]}," RuboCop Cop Style StringHashKeys autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node source_range ","node str_content to_sym inspect ","node str_content to_sym ","node str_content "," lambda "]}," RuboCop Cop Style StringHashKeys on_pair":{"type":"method","name":"on_pair","children":[],"call":[" add_offense ","node key "," string_hash_key? "," receive_environments_method? ","corrector replace ","node key str_content to_sym inspect ","node key str_content to_sym ","node key str_content ","key_content to_sym inspect ","key_content to_sym ","key_content valid_encoding? ","node key str_content  to_sym inspect ","node key str_content  to_sym ","node key str_content  valid_encoding? "]}," RuboCop Cop Style SafeNavigation comparison_node?":{"type":"method","name":"comparison_node?","children":[],"call":["parent comparison_method? ","parent send_type? "]}," RuboCop Cop Style SafeNavigation assignment_arithmetic_or_comparison?":{"type":"method","name":"assignment_arithmetic_or_comparison?","children":[],"call":[" comparison_node? ","node parent ","node parent arithmetic_operation? ","node assignment? "]}," RuboCop Cop Style RescueStandardError autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector insert_after ","node loc keyword ","node loc ","corrector remove "," range_between ","error loc expression end_pos ","error loc expression ","error loc ","node loc keyword end_pos "," rescue_standard_error? "," style "," lambda ","  range_between _between "," rescue_standard_error?  loc expression end_pos "," rescue_standard_error?  loc expression "," rescue_standard_error?  loc "," rescue_standard_ rescue_standard_error? ? "]}," RuboCop Cop Style RescueStandardError on_resbody":{"type":"method","name":"on_resbody","children":[],"call":[" add_offense "," rescue_without_error_class? ","node loc keyword join ","error loc expression ","error loc ","node loc keyword ","node loc "," rescue_standard_error? "," style "," rescue_modifier? "," offense_for_exlicit_enforced_style "," offense_for_implicit_enforced_style "," offense_for_explicit_enforced_style "]}," RuboCop Cop Style RedundantSelf autocorrect_incompatible_with":{"type":"method","name":"autocorrect_incompatible_with","children":[],"call":[]}," RuboCop Cop Style RedundantBegin on_block":{"type":"method","name":"on_block","children":[],"call":[" check ","node braces? "," target_ruby_version < "," target_ruby_version ","node send_node stabby_lambda? ","node send_node ","node send_node lambda_literal? "," register_offense ","node body "]}," RuboCop Cop Style RandomWithOffset int_from_int_node":{"type":"method","name":"int_from_int_node","children":[],"call":["node children first ","node children "]}," RuboCop Cop Style RandomWithOffset boundaries_from_random_node":{"type":"method","name":"boundaries_from_random_node","children":[],"call":[" int_from_int_node - "," int_from_int_node ","children [] ","children first ","random_node type ","random_node children "," to_int - "," to_int ","random_node end ","random_node begin ","random_node children  [] ","random_node children  first ","random_node random_node children  "]}," RuboCop Cop Style RandomWithOffset prefix_from_prefix_node":{"type":"method","name":"prefix_from_prefix_node","children":[],"call":["node nil? ","(lvar :namespace) compact join ","(lvar :namespace) compact "," namespace ","(csend\n  (lvar :node) :source) compact join ","(csend\n  (lvar :node) :source) compact "]}," RuboCop Cop Style RandomWithOffset corrected_rand_modified":{"type":"method","name":"corrected_rand_modified","children":[],"call":["right_int - ","left_int - ","method == ","right_int + ","left_int + ","(sym :succ) include? "," boundaries_from_random_node "," prefix_from_prefix_node ","node method? ","node method_name "," random_call ","  prefix_from_prefix_node _from_ prefix_from_prefix_node _node "]}," RuboCop Cop Style RandomWithOffset corrected_rand_op_integer":{"type":"method","name":"corrected_rand_op_integer","children":[],"call":["right_int - ","left_int - ","right_int + ","left_int + ","operator == "," boundaries_from_random_node "," prefix_from_prefix_node "," int_from_int_node ","node method? "," to_int ","node first_argument "," random_call ","  prefix_from_prefix_node _from_ prefix_from_prefix_node _node "]}," RuboCop Cop Style RandomWithOffset corrected_integer_op_rand":{"type":"method","name":"corrected_integer_op_rand","children":[],"call":["offset - ","offset + ","operator == "," boundaries_from_random_node "," prefix_from_prefix_node "," int_from_int_node ","node method? "," to_int ","node receiver "," random_call "," int_from_int_node  - "," to_int  - "," int_from_int_node  + "," to_int  + ","  prefix_from_prefix_node _from_ prefix_from_prefix_node _node "]}," RuboCop Cop Style RandomWithOffset autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," corrected_rand_modified ","node source_range "," rand_modified? "," corrected_rand_op_integer "," rand_op_integer? "," corrected_integer_op_rand "," integer_op_rand? "," lambda "]}," RuboCop Cop Style RandomWithOffset on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," rand_modified? "," rand_op_integer? "," integer_op_rand? ","node receiver "," autocorrect "]}," RuboCop Cop Style PercentLiteralDelimiters matchpairs":{"type":"method","name":"matchpairs","children":[],"call":["(pair\n  (str \"(\")\n  (array\n    (str \"(\")\n    (str \")\"))) fetch "]}," RuboCop Cop Style PercentLiteralDelimiters include_same_character_as_used_for_delimiter?":{"type":"method","name":"include_same_character_as_used_for_delimiter?","children":[],"call":["Regexp  new =~ ","Regexp  new ","(send\n  (send\n    (lvar :node) :children) :map) compact any? ","(send\n  (send\n    (lvar :node) :children) :map) compact "," string_source ","node children map ","node children ","(send\n  (lvar :used_delimiters) :map) join ","used_delimiters map "," matchpairs "," begin_source [] "," begin_source ","(str \"%w\") include? "," contains_delimiter? ","(send\n  (lvar : matchpairs ) :map) join "," matchpairs  map "]}," RuboCop Cop Style MixinUsage accepted_include?":{"type":"method","name":"accepted_include?","children":[],"call":["node macro? ","node parent "," ascend_macro_scope? "]}," RuboCop Cop Style MixinGrouping range_to_remove_for_subsequent_mixin":{"type":"method","name":"range_to_remove_for_subsequent_mixin","children":[],"call":["range join ","between source !~ ","between source ","prev_mixin loc expression end join ","range begin ","prev_mixin loc expression end ","prev_mixin loc expression ","prev_mixin loc ","n == ","mixins each_cons ","node loc expression ","node loc ","(str \"\\\\S\") match? ","prev_mixin source_range end join ","prev_mixin source_range end ","prev_mixin source_range ","node source_range ","range join  join ","node loc expression  join ","node source_range  join ","prev_mixin loc expression end join  source !~ ","prev_mixin source_range end join  source !~ ","prev_mixin loc expression end join  source ","prev_mixin source_range end join  source ","range join  begin ","node loc expression  begin ","node source_range  begin ","prev_mixin source_range join  end join ","prev_mixin source_node loc expression  end join ","prev_mixin source_node source_range  end join ","prev_mixin source_range join  end ","prev_mixin source_node loc expression  end ","prev_mixin source_node source_range  end ","prev_mixin source_range join  ","prev_mixin source_node loc expression  ","prev_mixin source_node source_range  ","node source_range join  ","node source_node loc expression  ","node source_node source_range  "]}," RuboCop Cop Style HashSyntax argument_without_space?":{"type":"method","name":"argument_without_space?","children":[],"call":["node loc expression begin_pos == ","node parent loc selector end_pos ","node parent loc selector ","node parent loc ","node parent ","node loc expression begin_pos ","node loc expression ","node loc ","node argument? ","node source_range begin_pos == ","node source_range begin_pos ","node source_range "]}," RuboCop Cop Style ExtendSelf extend_self_enforced?":{"type":"method","name":"extend_self_enforced?","children":[],"call":[" style == "," style "]}," RuboCop Cop Style ExtendSelf module_function_enforced?":{"type":"method","name":"module_function_enforced?","children":[],"call":[" style == "," style "]}," RuboCop Cop Style ExtendSelf alternate_source":{"type":"method","name":"alternate_source","children":[],"call":[" style "]}," RuboCop Cop Style ExtendSelf enforced_source":{"type":"method","name":"enforced_source","children":[],"call":[" style "]}," RuboCop Cop Style ExtendSelf message":{"type":"method","name":"message","children":[],"call":[" format "," alternate_source "," enforced_source "]}," RuboCop Cop Style ExtendSelf autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," enforced_source ","node loc expression ","node loc "," lambda "]}," RuboCop Cop Style ExtendSelf on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," module_function? "," extend_self_enforced? "," extend_self? "," module_function_enforced? "," module_scope? "]}," RuboCop Cop Style EvalWithLocation add_offense_for_different_line":{"type":"method","name":"add_offense_for_different_line","children":[],"call":[" add_offense "," message_incorrect_line ","line_node loc expression ","line_node loc "," line_with_offset? ","line_diff abs ","line_diff > ","line_diff positive? "," add_offense_for_incorrect_line ","node method_name "]}," RuboCop Cop Style EvalWithLocation add_offense_for_same_line":{"type":"method","name":"add_offense_for_same_line","children":[],"call":[" add_offense "," message_incorrect_line ","line_node loc expression ","line_node loc "," special_line_keyword? "," add_offense_for_incorrect_line ","node method_name "]}," RuboCop Cop Style EvalWithLocation string_first_line":{"type":"method","name":"string_first_line","children":[],"call":["str_node loc expression first_line ","str_node loc expression ","str_node loc ","str_node loc heredoc_body first_line ","str_node loc heredoc_body ","str_node heredoc? ","str_node source_range first_line ","str_node source_range "]}," RuboCop Cop Style EvalWithLocation on_with_lineno":{"type":"method","name":"on_with_lineno","children":[],"call":[" add_offense_for_different_line "," add_offense_for_same_line ","line_diff zero? "," string_first_line - ","lineno_range first_line "," string_first_line ","line_node loc expression ","line_node loc ","node arguments last ","node arguments "," string_first_line -  zero? ","line_node loc expression  first_line ","node arguments last  loc expression ","node arguments last  loc "]}," RuboCop Cop Style EvalWithLocation message_incorrect_line":{"type":"method","name":"message_incorrect_line","children":[],"call":[" format ","actual source ","line_diff zero? "]}," RuboCop Cop Style EvalWithLocation with_lineno?":{"type":"method","name":"with_lineno?","children":[],"call":["node arguments size == ","node arguments size ","node arguments ","node method_name == ","node method_name ","node method? "]}," RuboCop Cop Style EvalWithLocation special_line_keyword?":{"type":"method","name":"special_line_keyword?","children":[],"call":["node source == ","node source ","node int_type? "]}," RuboCop Cop Style EvalWithLocation special_file_keyword?":{"type":"method","name":"special_file_keyword?","children":[],"call":["node source == ","node source ","node str_type? "]}," RuboCop Cop Style EvalWithLocation on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," on_with_lineno "," with_lineno? "," eval_without_location? ","EVAL_METHODS  include? ","node method_name "," check_location ","code dstr_type? ","code str_type? ","node arguments first ","node arguments "," valid_eval_receiver? ! "," valid_eval_receiver? ","node receiver ","node method? "," register_offense "," check_line "," check_file "," file_and_line ","node arguments first  dstr_type? ","node arguments first  str_type? "]}," RuboCop Cop Style EmptyLambdaParameter autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove "," range_between ","node loc expression end_pos ","node loc expression ","node loc ","send_node loc expression end_pos ","send_node loc expression ","send_node loc ","node parent send_node ","node parent "," lambda ","node source_range end_pos ","node source_range ","send_node source_range end_pos ","send_node source_range ","  range_between _between ","node parent send_node  loc expression end_pos ","node parent send_node  loc expression ","node parent send_node  loc ","node parent node parent send_node  ","node source_ range_between  end_pos ","node source_ range_between  ","send_node source_ range_between  end_pos ","node parent send_node  source_range end_pos ","send_node source_ range_between  ","node parent send_node  source_range "]}," RuboCop Cop Style EmptyLambdaParameter on_block":{"type":"method","name":"on_block","children":[],"call":[" check ","node send_node stabby_lambda? ","node send_node ","send_node send_type? ","node send_node lambda_literal? ","node node send_node  stabby_lambda? ","node node send_node  ","node send_node  send_type? ","node node send_node  lambda_literal? "]}," RuboCop Cop Style EmptyElse else_line_range":{"type":"method","name":"else_line_range","children":[],"call":["loc end first_line ","loc end ","loc else first_line ","loc else ","loc end nil? ","loc else nil? "]}," RuboCop Cop Style EmptyElse comment_in_else?":{"type":"method","name":"comment_in_else?","children":[],"call":["range include? ","c loc line ","c loc "," processed_source comments find "," processed_source comments "," processed_source "," else_line_range ","node loc "," processed_source find_comment "," processed_source contains_comment? ","loc else join ","loc end ","loc else ","loc end nil? ","loc else nil? "," else_line_range  include? "," else_line_ else_line_range  "]}," RuboCop Cop Style EmptyBlockParameter autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove "," range_between ","node loc expression end_pos ","node loc expression ","node loc ","block loc begin end_pos ","block loc begin ","block loc ","node parent "," lambda ","node source_range end_pos ","node source_range ","  range_between _between ","node parent  loc begin end_pos ","node parent  loc begin ","node parent  loc ","node source_ range_between  end_pos ","node source_ range_between  "]}," RuboCop Cop Style EmptyBlockParameter on_block":{"type":"method","name":"on_block","children":[],"call":[" check ","send_node stabby_lambda? ","send_node send_type? ","node send_node ","send_node lambda_literal? ","node send_node  stabby_lambda? ","node send_node  send_type? ","node node send_node  ","node send_node  lambda_literal? "]}," RuboCop Cop Style ColonMethodDefinition autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node loc operator ","node loc "," lambda "]}," RuboCop Cop Style ColonMethodDefinition on_defs":{"type":"method","name":"on_defs","children":[],"call":[" add_offense ","node loc operator source == ","node loc operator source ","node loc operator ","node loc ","corrector replace "]}," RuboCop Cop Style ColonMethodCall autocorrect_incompatible_with":{"type":"method","name":"autocorrect_incompatible_with","children":[],"call":[]}," RuboCop Cop Style BracesAroundHashParameters extra_right_space?":{"type":"method","name":"extra_right_space?","children":[],"call":["bottom_line delete == ","bottom_line delete "," processed_source lines [] ","bottom_line_number - "," processed_source lines "," processed_source ","hash_node source_range last_line ","hash_node source_range "," processed_source lines []  delete == "," processed_source lines []  delete "," processed_source lines [] _number - ","hash_node source_range last_line  - "]}," RuboCop Cop Style BracesAroundHashParameters extra_left_space?":{"type":"method","name":"extra_left_space?","children":[],"call":["top_line delete == ","top_line delete ","hash_node source_range source_line ","hash_node source_range ","hash_node source_range source_line  delete == ","hash_node source_range source_line  delete "]}," RuboCop Cop Style BracesAroundHashParameters extra_space":{"type":"method","name":"extra_space","children":[],"call":[" extra_right_space? "," extra_left_space? "]}," RuboCop Cop Style AsciiComments allowed_non_ascii_chars":{"type":"method","name":"allowed_non_ascii_chars","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style AsciiComments only_allowed_non_ascii_chars?":{"type":"method","name":"only_allowed_non_ascii_chars?","children":[],"call":["(send\n  (lvar :non_ascii) :-\n  (send nil :allowed_non_ascii_chars)) empty? ","non_ascii - "," allowed_non_ascii_chars ","string scan ","(send\n  (lvar :string scan ) :-\n  (send nil :allowed_string scan _chars)) empty? ","string scan  - "," allowed_string scan _chars "]}," RuboCop Cop Rails RedundantReceiverInWithOptions search_begin_pos_of_space_before_block_argument":{"type":"method","name":"search_begin_pos_of_space_before_block_argument","children":[],"call":[" search_begin_pos_of_space_before_block_argument "," processed_source raw_source [] == "," processed_source raw_source [] "," processed_source raw_source "," processed_source ","begin_pos - "]}," RuboCop Cop Rails RedundantReceiverInWithOptions block_argument_range":{"type":"method","name":"block_argument_range","children":[],"call":[" range_between ","block_argument end_pos "," search_begin_pos_of_space_before_block_argument ","block_argument begin_pos ","node parent parent children [] loc expression ","node parent parent children [] loc ","node parent parent children [] ","node parent parent children ","node parent parent ","node parent ","block_node children [] source_range ","block_node children [] ","block_node children ","node each_ancestor first ","node each_ancestor ","node parent parent children [] loc expression  end_pos ","block_node children [] source_range  end_pos "," search_begin_pos_of_space_before_node parent parent children [] loc expression  "," search_begin_pos_of_space_before_block_node children [] source_range  ","node parent parent children [] loc expression  begin_pos ","block_node children [] source_range  begin_pos ","node each_ancestor first  children [] source_range ","node each_ancestor first  children [] ","node each_ancestor first  children "]}," RuboCop Cop Rails RedundantReceiverInWithOptions autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove "," block_argument_range ","node loc dot ","node loc ","node receiver loc expression ","node receiver loc ","node receiver "," lambda ","node receiver source_range "]}," RuboCop Cop Rails RedundantReceiverInWithOptions on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense ","assoc receiver loc expression ","assoc receiver loc ","assoc receiver "," assoc_has_redundant_receiver each "," assoc_has_redundant_receiver "," with_options? ","receiver source_range ","send_node receiver ","send_nodes each "," same_value? ","n receiver ","send_nodes all? "," all_send_nodes_in "," all_block_nodes_in count zero? "," all_block_nodes_in count "," all_block_nodes_in ","body nil? ","assoc send_node receiver  loc expression ","assoc send_node receiver  loc ","assoc send_node receiver  "," assoc_has_redundant_send_node receiver  each "," assoc_has_redundant_send_node receiver  ","send_node receiver  source_range ","send_node send_node receiver  "," all_send_nodes_in  each ","n send_node receiver  "," all_send_nodes_in  all? "," all_ all_send_nodes_in _in "]}," RuboCop Cop Rails Presence replacement":{"type":"method","name":"replacement","children":[],"call":["(begin\n  (send\n    (lvar :receiver) :source)) + ","receiver source ","other source ","other nil_type? ","other nil? "]}," RuboCop Cop Rails Presence autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," replacement ","node source_range "," redundant_negative_receiver_and_other "," redundant_receiver_and_other "," lambda "]}," RuboCop Cop Rails Presence on_if":{"type":"method","name":"on_if","children":[],"call":[" add_offense "," format ","node source "," replacement "," redundant_negative_receiver_and_other "," redundant_receiver_and_other "," message "," ignore_other_node? ","receiver nil? "," ignore_if_node? ","  format  "]}," RuboCop Cop Rails LexicallyScopedActionFilter message":{"type":"method","name":"message","children":[],"call":[" format ","methods join ","methods [] ","methods size == ","methods size ","parent type "]}," RuboCop Cop Rails LexicallyScopedActionFilter array_values":{"type":"method","name":"array_values","children":[],"call":["(send\n  (send\n    (lvar :node) :values) :map) compact ","v value ","v str_content to_sym ","v str_content ","v type ","node values map ","node values ","node value ","node str_content to_sym ","node str_content ","node type "]}," RuboCop Cop Rails LexicallyScopedActionFilter on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," message ","methods empty? ","defined_methods include? "," array_values reject "," array_values ","node parent each_child_node map ","node parent each_child_node ","node parent "," only_or_except_filter_methods ","block each_child_node map ","block each_child_node ","parent each_child_node first ","parent each_child_node ","node each_ancestor first ","node each_ancestor ","  message  ","node parent each_child_node map  include? ","block each_child_node map  include? ","node node each_ancestor first  each_child_node map ","node node each_ancestor first  each_child_node ","node node each_ancestor first  ","parent each_child_node first  each_child_node map ","parent each_child_node first  each_child_node ","node each_ancestor first  each_child_node first ","node each_ancestor first  each_child_node "]}," RuboCop Cop Rails InverseOf options_contain_inverse_of?":{"type":"method","name":"options_contain_inverse_of?","children":[],"call":[" inverse_of_option? ","options any? "]}," RuboCop Cop Rails InverseOf options_requiring_inverse_of?":{"type":"method","name":"options_requiring_inverse_of?","children":[],"call":[" polymorphic_option? ","options any? "," target_rails_version >= "," target_rails_version "," foreign_key_option? "," through_option? "," conditions_option? "," as_option? "," class_name_option? "]}," RuboCop Cop Rails InverseOf scope?":{"type":"method","name":"scope?","children":[],"call":["arguments any? "]}," RuboCop Cop Rails InverseOf on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," options_contain_inverse_of? "," options_requiring_inverse_of? "," scope? "," options_from_argument ","arguments flat_map "," association_arguments "," options_ignoring_inverse_of? ","arguments concat flat_map ","arguments concat "," with_options_arguments "," association_recv_arguments "," message "," association_arguments  flat_map "," association_ association_arguments  "," association_arguments  concat flat_map "," association_arguments  concat "," with_options_ association_arguments  ","  with_options_arguments _arguments "," association_recv_ association_arguments  "]}," RuboCop Cop Rails EnvironmentComparison replacement":{"type":"method","name":"replacement","children":[],"call":["receiver source "," content ","node first_argument ","node receiver source ","node receiver "]}," RuboCop Cop Rails EnvironmentComparison autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," replacement ","node source_range "," lambda "]}," RuboCop Cop Rails EnvironmentComparison on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," environment_sym_comparison? "," format ","env_node source "," environment_str_comparison? "]}," RuboCop Cop Rails CreateTableWithTimestamps time_columns_included?":{"type":"method","name":"time_columns_included?","children":[],"call":[" created_at_or_updated_at_included? "," timestamps_included? "]}," RuboCop Cop Rails CreateTableWithTimestamps on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," time_columns_included? ! "," time_columns_included? ","parent body ","parent body nil? "," create_table_with_block? ","node parent ","node command? "," create_table_with_timestamps_proc? ","node parent  body ","node parent  body nil? ","node node parent  "]}," RuboCop Cop Performance HashEachMethods used?":{"type":"method","name":"used?","children":[],"call":["variable used? ","var declaration_node loc == ","var declaration_node loc ","var declaration_node ","@block_args find ","arg loc ","var declaration_node arg loc  == ","var declaration_node arg loc  ","@barg loc k_args find ","arg arg loc  "]}," RuboCop Cop Offense last_column":{"type":"method","name":"last_column","children":[],"call":[" location last_column "," location "]}," RuboCop Cop Naming ConstantName allowed_method_call_on_rhs?":{"type":"method","name":"allowed_method_call_on_rhs?","children":[],"call":["node receiver literal? ! ","node receiver literal? ","node receiver ","node receiver nil? ","node send_type? "," literal_receiver? ! "," literal_receiver? "]}," RuboCop Cop Naming AccessorMethodName message":{"type":"method","name":"message","children":[],"call":[" bad_writer_name? "," bad_reader_name? "]}," RuboCop Cop SurroundingSpace space_offense":{"type":"method","name":"space_offense","children":[],"call":[" add_offense "," format "," side_space_range ","token pos "," ignore_node "," autocorrect "," ignored_node? "," side_space_ side_space_range  "]}," RuboCop Cop SurroundingSpace reposition":{"type":"method","name":"reposition","children":[],"call":["pos < ","src [] =~ ","src [] ","pos + ","step == ","pos negative? ","SINGLE_SPACE_REGEXP  match? ","src [] == "]}," RuboCop Cop SurroundingSpace extra_space?":{"type":"method","name":"extra_space?","children":[],"call":[" String == "," String ","token space_before? ","token space_after? ","side == "," String =~ ","SINGLE_SPACE_REGEXP  match? "]}," RuboCop Cop SurroundingSpace space_corrector":{"type":"method","name":"space_corrector","children":[],"call":["corrector insert_before ","right_token pos ","right_token space_before? ","corrector insert_after ","left_token pos ","left_token space_after? "]}," RuboCop Cop SurroundingSpace space_offenses":{"type":"method","name":"space_offenses","children":[],"call":[" space_offense "," extra_space? ","start_ok ! "," autocorrect_with_disable_uncorrectable? "]}," RuboCop Cop SurroundingSpace no_space_corrector":{"type":"method","name":"no_space_corrector","children":[],"call":["corrector remove "," side_space_range ","right_token pos ","right_token space_before? ","left_token pos ","left_token space_after? "," side_space_ side_space_range  "]}," RuboCop Cop SurroundingSpace no_space_offenses":{"type":"method","name":"no_space_offenses","children":[],"call":[" space_offense "," extra_space? ! "," extra_space? ","start_ok ! "," autocorrect_with_disable_uncorrectable? "]}," RuboCop Cop SurroundingSpace tokens":{"type":"method","name":"tokens","children":[],"call":["token begin_pos >= ","node source_range begin_pos ","node source_range ","token begin_pos ","token end_pos <= ","node source_range end_pos ","token end_pos "," processed_source tokens select "," processed_source tokens "," processed_source ","@tokens [] ","node object_id "]}," RuboCop Cop SurroundingSpace side_space_range":{"type":"method","name":"side_space_range","children":[],"call":["Parser Source Range  new "," reposition ","side == ","range end_pos ","range begin_pos ","buffer source ","@processed_source buffer "," processed_source buffer "," processed_source ","range  reposition  ","range range end_pos  ","range range begin_pos  ","@processed_source buffer  source "," processed_source buffer  source ","@processed_source @processed_source buffer  ","@processed_source  processed_source buffer  "," processed_source @processed_source buffer  "," processed_source  processed_source buffer  "]}," RuboCop Cop Parentheses next_char_is_question_mark?":{"type":"method","name":"next_char_is_question_mark?","children":[],"call":["node loc last_column == ","node parent loc question column ","node parent loc question ","node parent loc ","node parent ","node loc last_column ","node loc "]}," RuboCop Cop Parentheses ternary_condition?":{"type":"method","name":"ternary_condition?","children":[],"call":["node parent ternary? ","node parent ","node parent if_type? "]}," RuboCop Cop MethodComplexity check_complexity":{"type":"method","name":"check_complexity","children":[],"call":[" max= ","complexity ceil "," add_offense "," format "," class ","complexity > "," complexity ","node body "," cop_config [] "," cop_config "," reset_repeated_csend ","  cop_config [] = "," complexity  ceil "," complexity  > ","  complexity  "]}," RuboCop Cop MethodComplexity on_block":{"type":"method","name":"on_block","children":[],"call":[" check_complexity "," define_method? "," ignored_method? "," matches_allowed_pattern? "," allowed_method? "]}," RuboCop Cop Heredoc delimiter_string":{"type":"method","name":"delimiter_string","children":[],"call":["node source match captures first ","node source match captures ","node source match ","node source ","node source match captures [] ","match captures [] ","match captures ","node source node source match  captures first ","node source node source match  captures ","node source node source match  ","node source node source match  captures [] ","node source match  captures [] ","node source match  captures "]}," RuboCop Cop Heredoc on_heredoc":{"type":"method","name":"on_heredoc","children":[],"call":[" raise "]}," RuboCop Cop Heredoc on_str":{"type":"method","name":"on_str","children":[],"call":[" on_heredoc ","node heredoc? "]}," RuboCop Cop EmptyParameter check":{"type":"method","name":"check","children":[],"call":[" add_offense ","args empty_and_without_delimiters? "," empty_arguments? "," autocorrect "]}," RuboCop Cop Lint UnneededSplatExpansion replacement_range_and_content":{"type":"method","name":"replacement_range_and_content","children":[],"call":["loc operator "," remove_brackets ","loc expression "," unneeded_brackets? ","variable source ","variable array_type? ! ","variable array_type? ","node parent loc expression ","node parent loc ","node parent "," array_new? ","node loc ","node loc  operator ","node loc  expression ","node parent node loc  expression ","node parent node loc  ","node node loc  "]}," RuboCop Cop Lint UnneededSplatExpansion array_new_inside_array_literal?":{"type":"method","name":"array_new_inside_array_literal?","children":[],"call":["grandparent children size > ","grandparent children size ","grandparent children ","grandparent array_type? ","array_new_node parent parent ","array_new_node parent "," array_new? ","array_new_node parent parent  children size > ","array_new_node parent parent  children size ","array_new_node parent parent  children ","array_new_node parent parent  array_type? "]}," RuboCop Cop Lint UnneededSplatExpansion unneeded_splat_expansion":{"type":"method","name":"unneeded_splat_expansion","children":[],"call":["ASSIGNMENT_TYPES  include? ! ","ASSIGNMENT_TYPES  include? ","grandparent type ","node parent parent ","node parent "," array_new_inside_array_literal? ","expanded_item send_type? "," literal_expansion ","node parent parent  type "]}," RuboCop Cop Lint ShadowedArgument ignore_implicit_references?":{"type":"method","name":"ignore_implicit_references?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Lint ShadowedArgument argument_references":{"type":"method","name":"argument_references","children":[],"call":["assignment_references include? ","ref node source_range ","ref node ","ref explicit? ","argument references reject ","argument references ","argument assignments flat_map map ","argument assignments flat_map ","argument assignments ","argument assignments flat_map map  include? "]}," RuboCop Cop Lint ShadowedArgument node_within_block_or_conditional?":{"type":"method","name":"node_within_block_or_conditional?","children":[],"call":[" node_within_block_or_conditional? ","node parent ","node block_type? ","CONDITIONAL_NODES  include? ","node type ","node == ","node conditional? "]}," RuboCop Cop Lint ShadowedArgument assignment_without_argument_usage":{"type":"method","name":"assignment_without_argument_usage","children":[],"call":["assignment node "," uses_var? ","argument name "," node_within_block_or_conditional? ","argument scope node ","argument scope ","assignment_node parent ","assignment meta_assignment_node ","argument assignments reduce ","argument assignments ","assignment_node shorthand_asgn? ","  node_within_block_or_conditional? ? "]}," RuboCop Cop Lint ShadowedArgument shadowing_assignment":{"type":"method","name":"shadowing_assignment","children":[],"call":["argument declaration_node ","reference_pos <= ","reference node source_range begin_pos ","reference node source_range ","reference node "," ignore_implicit_references? ","reference explicit? ! ","reference explicit? ","references any? "," argument_references ","node source_range begin_pos ","node source_range "," assignment_without_argument_usage ","argument referenced? "," reference_pos <= "," reference_pos ","reference node source_range begin_pos  <= "," ignore_implicit_ argument_references ? "," argument_references  any? "," argument_ argument_references  "," reference node source_range begin_pos  <= "," reference node source_range begin_pos  "]}," RuboCop Cop Lint ShadowedArgument check_argument":{"type":"method","name":"check_argument","children":[],"call":[" add_offense "," format ","argument name "," shadowing_assignment ","argument block_argument? ","argument method_argument? ","argument explicit_block_local_variable? "]}," RuboCop Cop Lint ShadowedArgument after_leaving_scope":{"type":"method","name":"after_leaving_scope","children":[],"call":[" check_argument ","scope variables each_value ","scope variables "]}," RuboCop Cop Lint ShadowedArgument join_force?":{"type":"method","name":"join_force?","children":[],"call":["force_class == "]}," RuboCop Cop Lint NestedPercentLiteral contains_percent_literals?":{"type":"method","name":"contains_percent_literals?","children":[],"call":["literal match ","REGEXES  any? ","child children first to_s scrub ","child children first to_s ","child children first ","child children ","node each_child_node any? ","node each_child_node ","literal match? ","child children first to_s scrub  match ","child children first to_s scrub  match? "]}," RuboCop Cop Lint NestedPercentLiteral str_content":{"type":"method","name":"str_content","children":[],"call":["(send\n  (send\n    (lvar :node) :children) :map) join "," str_content ","node children map ","node children ","node children [] ","node str_type? "]}," RuboCop Cop Lint NestedPercentLiteral on_percent_literal":{"type":"method","name":"on_percent_literal","children":[],"call":[" add_offense "," contains_percent_literals? "]}," RuboCop Cop Lint NestedPercentLiteral on_array":{"type":"method","name":"on_array","children":[],"call":[" process "]}," RuboCop Cop Lint MissingCopEnableDirective message":{"type":"method","name":"message","children":[],"call":[" format ","max_range == "," max_range "," max_range == ","cop split first ","cop split "," department_enabled? ","cop split first  split first ","cop split first  split "]}," RuboCop Cop Lint MissingCopEnableDirective investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense "," message "," source_range ","line_range min ","processed_source buffer ","line_range max - < ","max_range + ","line_range max - ","line_range max ","line_ranges each ","processed_source disabled_line_ranges each ","processed_source disabled_line_ranges "," cop_config [] "," cop_config "," source_ source_range  ","line_ source_range  min ","line_ source_range  max - < ","max_ source_range  + "," cop_config []  + ","line_ source_range  max - ","line_ source_range  max ","line_ source_range s each ","processed_source disabled_line_ source_range s each ","processed_source disabled_line_ source_range s "]}," RuboCop Cop Lint AmbiguousBlockAssociation ambiguous_block_association?":{"type":"method","name":"ambiguous_block_association?","children":[],"call":["send_node last_argument send_node arguments? ! ","send_node last_argument send_node arguments? ","send_node last_argument send_node ","send_node last_argument ","send_node last_argument block_type? "]}," RuboCop Cop Layout SpaceInsideReferenceBrackets right_ref_bracket":{"type":"method","name":"right_ref_bracket","children":[],"call":[" tokens slice find "," tokens slice "," tokens "," tokens index "," tokens sl tokens index ce f tokens index nd "," tokens sl tokens index ce "," tokens  tokens index ndex "]}," RuboCop Cop Layout SpaceInsideReferenceBrackets left_ref_bracket":{"type":"method","name":"left_ref_bracket","children":[],"call":[" tokens reverse find "," tokens reverse "," tokens ","tokens reverse find ","tokens reverse ","tokens find ","node method? ","previous_token right_bracket? ! ","previous_token right_bracket? "," previous_token "," previous_token  right_bracket? ! "," previous_token  right_bracket? ","  previous_token  "]}," RuboCop Cop Layout SpaceInsideReferenceBrackets reference_brackets":{"type":"method","name":"reference_brackets","children":[],"call":[" right_ref_bracket "," left_ref_bracket "," closing_bracket "," tokens "," processed_source tokens_within "," processed_source ","  left_ref_bracket _ref_bracket ","  tokens  ","  processed_source tokens_within  "," processed_source  tokens _within "," processed_source  processed_source tokens_within _within "]}," RuboCop Cop Layout SpaceInsideReferenceBrackets autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" space_corrector "," no_space_corrector "," style == "," style "," reference_brackets "," lambda ","SpaceCorrector  add_space "," processed_source ","SpaceCorrector  remove_space ","SpaceCorrector  empty_corrections "," empty_config "," empty_brackets? "]}," RuboCop Cop Layout SpaceInsideReferenceBrackets on_send":{"type":"method","name":"on_send","children":[],"call":[" space_offenses "," no_space_offenses "," style == "," style "," right_ref_bracket "," left_ref_bracket ","node multiline? "," closing_bracket "," empty_offenses "," empty_brackets? "," tokens "," bracket_method? "," processed_source tokens_within "," processed_source ","  tokens  ","  processed_source tokens_within  "," processed_source  tokens _within "," processed_source  processed_source tokens_within _within "]}," RuboCop Cop Layout SpaceInsideParens parens?":{"type":"method","name":"parens?","children":[],"call":["t2 right_parens? ","t1 left_parens? ","token2 right_parens? ","token1 left_parens? "]}," RuboCop Cop Layout SpaceInsideParens each_extraneous_space":{"type":"method","name":"each_extraneous_space","children":[],"call":[" range_between ","t2 begin_pos ","t1 end_pos ","t1 space_after? ","t2 line == ","t1 line ","t2 line ","t2 comment? "," parens? ","tokens each_cons ","token2 begin_pos ","token1 end_pos ","token1 space_after? ","token2 line == ","token1 line ","token2 line ","token2 comment? "," same_line? "]}," RuboCop Cop Layout SpaceInsideParens autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove "," lambda ","corrector insert_before "," style == "," style "]}," RuboCop Cop Layout SpaceInsideParens investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense "," each_extraneous_space ","processed_source tokens "," each_missing_space "," style == "," style "]}," RuboCop Cop Layout SpaceInsideArrayLiteralBrackets compact_corrections":{"type":"method","name":"compact_corrections","children":[],"call":["corrector insert_before ","right pos ","right space_before? ! ","right space_before? ","corrector remove "," side_space_range "," qualifies_for_compact? ","corrector insert_after ","left pos ","left space_after? ! ","left space_after? "," compact "," multi_dimensional_array? "," side_space_ side_space_range  "]}," RuboCop Cop Layout SpaceInsideArrayLiteralBrackets compact_offense":{"type":"method","name":"compact_offense","children":[],"call":[" space_offense ","side == "]}," RuboCop Cop Layout SpaceInsideArrayLiteralBrackets next_to_bracket?":{"type":"method","name":"next_to_bracket?","children":[],"call":["line [] == ","line [] ","col + ","side == "," processed_source lines [] "," processed_source lines "," processed_source "," line_and_column_for "," processed_source lines []  [] == "," processed_source lines []  [] "," processed_source  processed_source lines [] s [] "," processed_source  processed_source lines [] s ","  processed_source lines [] _and_column_for "]}," RuboCop Cop Layout SpaceInsideArrayLiteralBrackets multi_dimensional_array?":{"type":"method","name":"multi_dimensional_array?","children":[],"call":[" tokens [] left_array_bracket? "," tokens [] ","i + "," tokens "," tokens [] right_bracket? ","i - ","side == "," index_for "," processed_source tokens_within [] left_array_bracket? "," processed_source tokens_within [] "," processed_source tokens_within "," processed_source "," processed_source tokens_within [] right_bracket? "," processed_source tokens_within [] new_line? "," index_for + "," index_for  + "," index_for +  + "," tokens [] r index_for ght_bracket? "," tokens [] r index_for + ght_bracket? "," index_for  - "," index_for +  - ","s index_for de == ","s index_for + de == ","  index_for ndex_for ","  index_for + ndex_for "," processed_source tokens_w index_for th index_for n [] left_array_bracket? "," processed_source tokens_w index_for + th index_for + n [] left_array_bracket? "," processed_source tokens_w index_for th index_for n [] "," processed_source tokens_w index_for + th index_for + n [] "," processed_source tokens_w index_for th index_for n "," processed_source tokens_w index_for + th index_for + n "," processed_source tokens_w index_for th index_for n [] r index_for ght_bracket? "," processed_source tokens_w index_for + th index_for + n [] r index_for + ght_bracket? "," processed_source tokens_w index_for th index_for n [] new_l index_for ne? "," processed_source tokens_w index_for + th index_for + n [] new_l index_for + ne? ","  index_for ndex_for + ","  index_for + ndex_for + "]}," RuboCop Cop Layout SpaceInsideArrayLiteralBrackets qualifies_for_compact?":{"type":"method","name":"qualifies_for_compact?","children":[],"call":[" next_to_bracket? ! "," next_to_bracket? "," multi_dimensional_array? ","side == ","token space_after? ","token space_before? "]}," RuboCop Cop Layout SpaceInsideArrayLiteralBrackets compact_offenses":{"type":"method","name":"compact_offenses","children":[],"call":[" space_offenses "," multi_dimensional_array? ! "," multi_dimensional_array? "," compact_offense "," qualifies_for_compact? "]}," RuboCop Cop Layout SpaceInsideArrayLiteralBrackets next_to_comment?":{"type":"method","name":"next_to_comment?","children":[],"call":[" tokens [] comment? "," tokens [] "," index_for + "," index_for "," tokens "," processed_source tokens_within [] comment? "," processed_source tokens_within [] "," processed_source tokens_within "," processed_source "]}," RuboCop Cop Layout SpaceInsideArrayLiteralBrackets issue_offenses":{"type":"method","name":"issue_offenses","children":[],"call":[" compact_offenses "," space_offenses "," style == "," style "," no_space_offenses "," next_to_comment? "]}," RuboCop Cop Layout SpaceInsideArrayLiteralBrackets line_and_column_for":{"type":"method","name":"line_and_column_for","children":[],"call":["token column - ","token column ","token line - ","token line "]}," RuboCop Cop Layout SpaceInsideArrayLiteralBrackets index_for":{"type":"method","name":"index_for","children":[],"call":[" tokens index "," tokens "," processed_source tokens_within index "," processed_source tokens_within "," processed_source "]}," RuboCop Cop Layout SpaceInsideArrayLiteralBrackets end_has_own_line?":{"type":"method","name":"end_has_own_line?","children":[],"call":[" processed_source lines [] [] delete empty? "," processed_source lines [] [] delete "," processed_source lines [] [] "," processed_source lines [] "," processed_source lines "," processed_source ","col == "," line_and_column_for "," processed_source lines [] [] !~ ","(str \"\\\\S\") match? ! ","(str \"\\\\S\") match? "]}," RuboCop Cop Layout SpaceInsideArrayLiteralBrackets next_to_newline?":{"type":"method","name":"next_to_newline?","children":[],"call":[" tokens [] line != ","token line "," tokens [] line "," tokens [] "," index_for + "," index_for "," tokens "," processed_source tokens_within [] line != "," processed_source tokens_within [] line "," processed_source tokens_within [] "," processed_source tokens_within "," processed_source "]}," RuboCop Cop Layout SpaceInsideArrayLiteralBrackets empty_corrections":{"type":"method","name":"empty_corrections","children":[],"call":["corrector remove "," side_space_range ","left pos "," offending_empty_no_space? ","corrector insert_after "," offending_empty_space? "," side_space_ side_space_range  "]}," RuboCop Cop Layout SpaceInsideArrayLiteralBrackets empty_config":{"type":"method","name":"empty_config","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Layout SpaceInsideArrayLiteralBrackets no_space_between?":{"type":"method","name":"no_space_between?","children":[],"call":["left end_pos == ","right begin_pos ","left end_pos "]}," RuboCop Cop Layout SpaceInsideArrayLiteralBrackets space_between?":{"type":"method","name":"space_between?","children":[],"call":["left end_pos + == ","right begin_pos ","left end_pos + ","left end_pos "]}," RuboCop Cop Layout SpaceInsideArrayLiteralBrackets offending_empty_no_space?":{"type":"method","name":"offending_empty_no_space?","children":[],"call":[" no_space_between? ! "," no_space_between? "," empty_config == "," empty_config "]}," RuboCop Cop Layout SpaceInsideArrayLiteralBrackets offending_empty_space?":{"type":"method","name":"offending_empty_space?","children":[],"call":[" space_between? ! "," space_between? "," empty_config == "," empty_config "]}," RuboCop Cop Layout SpaceInsideArrayLiteralBrackets empty_offense":{"type":"method","name":"empty_offense","children":[],"call":[" add_offense "," format "]}," RuboCop Cop Layout SpaceInsideArrayLiteralBrackets empty_offenses":{"type":"method","name":"empty_offenses","children":[],"call":[" empty_offense "," offending_empty_no_space? "," offending_empty_space? "]}," RuboCop Cop Layout SpaceInsideArrayLiteralBrackets empty_brackets?":{"type":"method","name":"empty_brackets?","children":[],"call":[" processed_source tokens index == "," processed_source tokens index - "," processed_source tokens index "," processed_source tokens "," processed_source "]}," RuboCop Cop Layout SpaceInsideArrayLiteralBrackets right_array_bracket":{"type":"method","name":"right_array_bracket","children":[],"call":[" tokens reverse find "," tokens reverse "," tokens "," processed_source tokens_within reverse find "," processed_source tokens_within reverse "," processed_source tokens_within "," processed_source "]}," RuboCop Cop Layout SpaceInsideArrayLiteralBrackets left_array_bracket":{"type":"method","name":"left_array_bracket","children":[],"call":[" tokens find "," tokens "," processed_source tokens_within find "," processed_source tokens_within "," processed_source "]}," RuboCop Cop Layout SpaceInsideArrayLiteralBrackets array_brackets":{"type":"method","name":"array_brackets","children":[],"call":[" right_array_bracket "," left_array_bracket ","tokens reverse_each find ","tokens reverse_each ","tokens find "," processed_source tokens_within "," processed_source "," tokens reverse_each find _array_bracket "," tokens find _array_bracket "," processed_source tokens_within  reverse_each find "," processed_source tokens_within  reverse_each "," processed_source tokens_within  find "," processed_source  processed_source tokens_within _within "]}," RuboCop Cop Layout SpaceInsideArrayLiteralBrackets autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" compact_corrections "," space_corrector "," style == "," style "," no_space_corrector "," empty_corrections "," empty_brackets? "," lambda "," array_brackets ","SpaceCorrector  add_space "," processed_source ","SpaceCorrector  remove_space ","SpaceCorrector  empty_corrections "," empty_config "]}," RuboCop Cop Layout SpaceInsideArrayLiteralBrackets on_array":{"type":"method","name":"on_array","children":[],"call":[" issue_offenses "," end_has_own_line? ","node single_line? "," next_to_newline? "," empty_offenses "," empty_brackets? "," array_brackets ","node square_brackets? "]}," RuboCop Cop Layout IndentationWidth message":{"type":"method","name":"message","children":[],"call":[" format "]}," RuboCop Cop Layout IndentHeredoc max_line_length":{"type":"method","name":"max_line_length","children":[],"call":[" config for_cop [] "," config for_cop "," config "]}," RuboCop Cop Layout IndentHeredoc too_long_line?":{"type":"method","name":"too_long_line?","children":[],"call":["max_line + >= "," max_line_length ","max_line + ","(send\n  (send\n    (lvar :body) :each_line) :map) max ","line chomp size ","line chomp ","body each_line map ","body each_line ","expected_indent - "," indent_level "," base_indent_level + "," indentation_width "," base_indent_level "," heredoc_body "," config for_cop [] "," config for_cop "," config ","(send\n  (send\n    (lvar :body) :each_line) :map) max  + >= "," (send\n  (send\n    (lvar :body) :each_line) :map) max _length ","(send\n  (send\n    (lvar :body) :each_line) :map) max  + ","(send\n  (send\n    (lvar : heredoc_body ) :each_line) :map) max "," heredoc_body  each_line map "," heredoc_body  each_line "," base_indent_level +  - "," heredoc_ heredoc_body  "]}," RuboCop Cop Layout IndentHeredoc ruby23_message":{"type":"method","name":"ruby23_message","children":[],"call":[" format "," ruby23_type_message "," ruby23_width_message ","current_indent_type == "]}," RuboCop Cop Layout IndentHeredoc library_message":{"type":"method","name":"library_message","children":[],"call":[" format "]}," RuboCop Cop Layout EmptyLinesAroundExceptionHandlingKeywords message":{"type":"method","name":"message","children":[],"call":[" format "]}," RuboCop Cop Layout EmptyLinesAroundArguments source_without_block":{"type":"method","name":"source_without_block","children":[],"call":["node source split first ","node source split ","block_node source ","node source "]}," RuboCop Cop Layout EmptyLinesAroundArguments extra_lines":{"type":"method","name":"extra_lines","children":[],"call":[" source_range "," processed_source buffer "," processed_source "," empty_lines each "," empty_lines "," source_ source_range  "]}," RuboCop Cop Layout EmptyLinesAroundArguments source_lines":{"type":"method","name":"source_lines","children":[],"call":["line delete ","source lines map ","source lines ","node source "," source_without_block ","node arguments last ","node arguments ","node arguments last block_type? ","node source  lines map "," source_without_block  lines map ","node source  lines "," source_without_block  lines ","node node source  ","node  source_without_block  "," node source _without_block ","  source_without_block _without_block "]}," RuboCop Cop Layout EmptyLinesAroundArguments empty_lines":{"type":"method","name":"empty_lines","children":[],"call":["lines map ","code == ","lines select! "," source_lines map with_index to_a "," source_lines map with_index "," source_lines map "," source_lines ","code empty? "," processed_lines map with_index to_a "," processed_lines map with_index "," first_line "," processed_lines map "," processed_lines "," source_lines map with_index to_a  map "," processed_lines map with_index to_a  map "," processed_lines  map "," source_lines map with_index to_a  select! "," processed_lines map with_index to_a  select! "," processed_lines  select! "," source_ source_lines map with_index to_a  map with_index to_a "," source_ processed_lines map with_index to_a  map with_index to_a "," source_ processed_lines  map with_index to_a "," source_ source_lines map with_index to_a  map with_index "," source_ processed_lines map with_index to_a  map with_index "," source_ processed_lines  map with_index "," source_ source_lines map with_index to_a  map "," source_ processed_lines map with_index to_a  map "," source_ processed_lines  map "," source_ source_lines map with_index to_a  "," source_ processed_lines map with_index to_a  "," source_ processed_lines  "," processed_ source_lines map with_index to_a  map with_index to_a "," processed_ processed_lines map with_index to_a  map with_index to_a "," processed_ processed_lines  map with_index to_a "," processed_ source_lines map with_index to_a  map with_index "," processed_ processed_lines map with_index to_a  map with_index "," processed_ processed_lines  map with_index "," processed_ source_lines map with_index to_a  map "," processed_ processed_lines map with_index to_a  map "," processed_ processed_lines  map "," processed_ source_lines map with_index to_a  "," processed_ processed_lines map with_index to_a  "," processed_ processed_lines  "]}," RuboCop Cop Layout EmptyLinesAroundArguments autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove "," extra_lines "," lambda "]}," RuboCop Cop Layout EmptyLinesAroundArguments on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," extra_lines "," empty_lines empty? "," empty_lines ","node single_line? ","node arguments empty? ","node arguments ","corrector remove "," receiver_and_method_call_on_different_lines? "]}," RuboCop Cop Layout CommentIndentation message":{"type":"method","name":"message","children":[],"call":[" format "]}," RuboCop Cop Layout ClassStructure categories":{"type":"method","name":"categories","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Layout ClassStructure expected_order":{"type":"method","name":"expected_order","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Layout ClassStructure buffer":{"type":"method","name":"buffer","children":[],"call":[" processed_source buffer "," processed_source "]}," RuboCop Cop Layout ClassStructure comments_before_line":{"type":"method","name":"comments_before_line","children":[],"call":["c location line <= ","c location line ","c location "," processed_source comments select "," processed_source comments "," processed_source "]}," RuboCop Cop Layout ClassStructure start_line_position":{"type":"method","name":"start_line_position","children":[],"call":[" buffer line_range begin_pos - "," buffer line_range begin_pos "," buffer line_range ","node loc line ","node loc "," buffer ","node first_line "]}," RuboCop Cop Layout ClassStructure begin_pos_with_comment":{"type":"method","name":"begin_pos_with_comment","children":[],"call":[" start_line_position ","comment location line == ","comment location line ","comment location "," comments_before_line reverse_each "," comments_before_line ","node loc line - ","node loc line ","node loc ","node first_line - ","node first_line "," processed_source comments_before_line reverse_each "," processed_source comments_before_line "," processed_source "," processed_source comment_at_line ","(send\n  (send\n    (lvar :node) :first_line) :-\n  (int 1)) downto "," whole_line_comment_at_line? "," processed_source comment_at_line  location line == "," processed_source comment_at_line  location line "," processed_source comment_at_line  location ","  processed_source comment_at_line s_before_line reverse_each ","  processed_source comment_at_line s_before_line "," processed_source  processed_source comment_at_line s_before_line reverse_each "," processed_source  processed_source comment_at_line s_before_line "," processed_source  processed_source comment_at_line _at_line "," whole_line_ processed_source comment_at_line _at_line? "]}," RuboCop Cop Layout ClassStructure end_position_for":{"type":"method","name":"end_position_for","children":[],"call":[" buffer line_range end_pos "," buffer line_range "," buffer "," buffer line_for_position ","node loc expression end_pos ","node loc expression ","node loc ","heredoc location heredoc_end end_pos + ","heredoc location heredoc_end end_pos ","heredoc location heredoc_end ","heredoc location "," find_heredoc ","node source_range end_pos ","node source_range ","node casgn_type? "," find_heredoc  location  find_heredoc _end end_pos + "," find_heredoc  location  find_heredoc _end end_pos "," find_heredoc  location  find_heredoc _end "," find_heredoc  location "," find_ find_heredoc  "]}," RuboCop Cop Layout ClassStructure source_range_with_comment":{"type":"method","name":"source_range_with_comment","children":[],"call":["Parser Source Range  new "," buffer "," end_position_for "," begin_pos_with_comment "," end_position_for + "," find_visibility_end "," find_visibility_start ","node def_type? ","node def_modifier? ","node send_type? ","node method? ! ","node method? "]}," RuboCop Cop Layout ClassStructure humanize_node":{"type":"method","name":"humanize_node","children":[],"call":["node type ","HUMANIZED_NODE_TYPE  [] "," node_visibility ","method_name == ","node def_type? ","node method? "]}," RuboCop Cop Layout ClassStructure left_siblings_of":{"type":"method","name":"left_siblings_of","children":[],"call":[" siblings_of [] ","node sibling_index "," siblings_of "]}," RuboCop Cop Layout ClassStructure right_siblings_of":{"type":"method","name":"right_siblings_of","children":[],"call":[" siblings_of [] ","node sibling_index "," siblings_of "]}," RuboCop Cop Layout ClassStructure siblings_of":{"type":"method","name":"siblings_of","children":[],"call":["node parent children ","node parent "]}," RuboCop Cop Layout ClassStructure find_visibility_end":{"type":"method","name":"find_visibility_end","children":[],"call":["right last ","possible_visibilities include? "," node_visibility ","right find "," right_siblings_of ","VISIBILITY_SCOPES  - "," right_siblings_of  last ","VISIBILITY_SCOPES  -  include? "," right_siblings_of  find ","  right_siblings_of _siblings_of "]}," RuboCop Cop Layout ClassStructure find_visibility_start":{"type":"method","name":"find_visibility_start","children":[],"call":[" left_siblings_of reverse find "," method "," left_siblings_of reverse "," left_siblings_of "]}," RuboCop Cop Layout ClassStructure node_visibility":{"type":"method","name":"node_visibility","children":[],"call":[" find_visibility_start ","scope method_name "," find_visibility_start  method_name "]}," RuboCop Cop Layout ClassStructure ignore?":{"type":"method","name":"ignore?","children":[],"call":[" expected_order index nil? "," expected_order index "," expected_order ","classification to_s end_with? ","classification to_s ","classification nil? "," private_constant? "]}," RuboCop Cop Layout ClassStructure class_elements":{"type":"method","name":"class_elements","children":[],"call":["class_def children compact ","class_def children ","class_def send_type? ","class_def def_type? ","class_node children ","class_node body ","class_node body  children compact ","class_node body  children ","class_node body  send_type? ","class_node body  def_type? "]}," RuboCop Cop Layout ClassStructure walk_over_nested_class_definition":{"type":"method","name":"walk_over_nested_class_definition","children":[],"call":[" ignore? "," classify "," class_elements each "," class_elements "]}," RuboCop Cop Layout ClassStructure find_category":{"type":"method","name":"find_category","children":[],"call":["names include? "," categories find "," categories ","method_name to_s "," expected_order include? "," expected_order "," node_visibility ","node method_name to_s ","node method_name ","node def_modifier? ","method_name to_s s include? ","node method_name to_s s include? ","method_method_name to_s  to_s ","method_node method_name to_s  to_s ","node method_method_name to_s  to_s ","node method_node method_name to_s  to_s ","node method_method_name to_s  ","node method_node method_name to_s  "]}," RuboCop Cop Layout ClassStructure classify":{"type":"method","name":"classify","children":[],"call":["(send\n  (lvar :node) :type) to_s "," humanize_node "," find_category ","node method_name "," classify ","node send_node ","node type ","node to_s ","node respond_to? "]}," RuboCop Cop Layout ClassStructure autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove ","corrector insert_before ","current_range source "," lambda "," source_range_with_comment ","node_classification != "," ignore? ! "," ignore? "," classify "," left_siblings_of find "," left_siblings_of ","node left_siblings find ","node left_siblings "," ignore_for_autocorrect? ! "," ignore_for_autocorrect? ","node left_siblings reverse find ","node left_siblings reverse "," source_range_with_comment  source ","node_ classify  != "," classify  != "]}," RuboCop Cop Layout ClassStructure on_class":{"type":"method","name":"on_class","children":[],"call":[" add_offense "," format "," expected_order [] "," expected_order ","index < "," expected_order index "," walk_over_nested_class_definition "," autocorrect "," expected_order index  < "," expected_order  expected_order index  "]}," RuboCop Cop Layout BlockEndNewline index_of_delimiter_with_whitespaces":{"type":"method","name":"index_of_delimiter_with_whitespaces","children":[],"call":["node source =~ ","node closing_delimiter ","node source "]}," RuboCop Cop Layout BlockEndNewline delimiter_range":{"type":"method","name":"delimiter_range","children":[],"call":["Parser Source Range  new ","node source length ","node source "," index_of_delimiter_with_whitespaces ","node loc end source_buffer ","node loc end ","node loc ","node loc expression end_pos ","node loc expression ","node children last loc expression end_pos ","node children last loc expression ","node children last loc ","node children last ","node children ","node loc expression source_buffer ","node children compact last loc expression end_pos ","node children compact last loc expression ","node children compact last loc ","node children compact last ","node children compact "]}," RuboCop Cop InternalAffairs NodeDestructuring node_suffix?":{"type":"method","name":"node_suffix?","children":[],"call":["method_name to_s end_with? ","method_name to_s "]}," RuboCop Cop InternalAffairs NodeDestructuring on_masgn":{"type":"method","name":"on_masgn","children":[],"call":[" add_offense "," node_children_destructuring? "," node_destructuring? "]}," RuboCop Cop Generator inject_config":{"type":"method","name":"inject_config","children":[],"call":["File  write ","config join ","config insert ","index - "," badge to_s < "," badge to_s "," badge ","line =~ ","config find with_index ","config find ","(str \"          \") strip_indent ","File  readlines "," output puts ","(str \"          [modify] A configuration for the cop is added into \") strip_indent "," output "," bump_minor_version "," format ","injector inject ","ConfigurationInjector  new ","File  readlines  join ","File  readlines  insert ","File  readlines  find with_index ","File  readlines  find ","(str \"          [modify] A File  readlines uration for the cop is added into \") strip_indent ","ConfigurationInjector  new  inject "]}," RuboCop Cop Gemspec RequiredRubyVersion message":{"type":"method","name":"message","children":[],"call":[" format ","File  basename "," processed_source buffer name "," processed_source buffer "," processed_source "," processed_source file_path "," processed_source  processed_source buffer name  "]}," RuboCop Cop Gemspec RequiredRubyVersion extract_ruby_version":{"type":"method","name":"extract_ruby_version","children":[],"call":["required_ruby_version str_content match [] ","required_ruby_version str_content match ","required_ruby_version str_content ","v str_content =~ ","v str_content ","required_ruby_version children detect ","required_ruby_version children ","required_ruby_version array_type? ","(str \"[>=]\") match? ","required_ruby_version str_content scan first join ","required_ruby_version str_content scan first ","required_ruby_version str_content scan ","required_ruby_version detect ","required_ruby_version is_a? "]}," RuboCop Cop Gemspec RequiredRubyVersion investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense "," message "," target_ruby_version ","version loc expression ","version loc ","processed_source ast ","ruby_version == "," target_ruby_version to_s "," extract_ruby_version "," required_ruby_version "," source_range ","processed_source buffer "," not_equal_message "," string_version? "," required_ruby_version first ","version_def loc expression ","version_def loc ","ruby_version ! "," defined_ruby_version "," target_ extract_ruby_version  "," target_ruby_ required_ruby_version first  "," required_ruby_version first  loc expression "," required_ruby_version first  loc "," extract_ruby_version  == ","ruby_ required_ruby_version first  == "," target_ extract_ruby_version  to_s "," target_ruby_ required_ruby_version first  to_s "," extract_ extract_ruby_version  "," extract_ruby_ required_ruby_version first  "," required_ extract_ruby_version  "," required_ruby_ required_ruby_version first  "," source_ source_range  "," string_ required_ruby_version first ? "," required_ extract_ruby_version  first "," required_ruby_ required_ruby_version first  first "," required_ruby_version first _def loc expression "," required_ruby_version first _def loc "," extract_ruby_version  ! ","ruby_ required_ruby_version first  ! "," defined_ extract_ruby_version  "," defined_ruby_ required_ruby_version first  "]}," RuboCop Cop Gemspec DuplicatedAssignment register_offense":{"type":"method","name":"register_offense","children":[],"call":[" add_offense "," format "," source_range ","node loc line ","node loc "," processed_source buffer "," processed_source ","node loc last_column ","node loc column ","node first_line "]}," RuboCop Cop Gemspec DuplicatedAssignment duplicated_assignment_method_nodes":{"type":"method","name":"duplicated_assignment_method_nodes","children":[],"call":["nodes size > ","nodes size "," assignment_method_declarations group_by values select "," assignment_method_declarations group_by values "," assignment_method_declarations group_by "," assignment_method_declarations "," processed_source ast "," processed_source "," assignment_method_declarations select group_by values select "," assignment_method_declarations select group_by values "," assignment_method_declarations select group_by "," assignment_method_declarations select "]}," RuboCop Cop Gemspec DuplicatedAssignment assignment_method?":{"type":"method","name":"assignment_method?","children":[],"call":["method_name to_s end_with? ","method_name to_s "]}," RuboCop Cop Gemspec DuplicatedAssignment match_block_variable_name?":{"type":"method","name":"match_block_variable_name?","children":[],"call":["block_variable_name == "," gem_specification "," processed_source ast "," processed_source "]}," RuboCop Cop Gemspec DuplicatedAssignment investigate":{"type":"method","name":"investigate","children":[],"call":[" register_offense ","nodes first loc line ","nodes first loc ","nodes first ","node method_name ","nodes [] each ","nodes [] "," duplicated_assignment_method_nodes each "," duplicated_assignment_method_nodes ","processed_source ast ","nodes first first_line ","processed_source blank? "]}," RuboCop ConfigLoaderResolver gem_config_path":{"type":"method","name":"gem_config_path","children":[],"call":[" raise ","File  join ","spec gem_dir ","Gem Specification  find_by_name ","Gem Specification  find_by_name gem_dir ","gem full_gem_path ","Bundler  load specs [] first ","Bundler  load specs [] ","Bundler  load specs ","Bundler  load ","Gem Specification  find_by_name  gem_dir ","spec Bundler  load specs [] first _dir ","Gem Specification  find_by_name Bundler  load specs [] first _dir ","gem full_gem full_gem_path  ","Bundler  load specs [] first  full_Bundler  load specs [] first _path ","Bundler  load Gem Specification  find_by_name s [] first ","Bundler  load Gem Specification  find_by_name s [] ","Bundler  load Gem Specification  find_by_name s "]}," RuboCop ConfigLoaderResolver transform":{"type":"method","name":"transform","children":[],"call":["Hash  [] ","config map ","config transform_values "]}," RuboCop ConfigLoaderResolver handle_disabled_by_default":{"type":"method","name":"handle_disabled_by_default","children":[],"call":["(pair\n  (str \"Enabled\")\n  (true)) merge "," transform ","params []= ","ConfigLoader  default_configuration [] [] ","ConfigLoader  default_configuration [] ","ConfigLoader  default_configuration ","cop start_with? ","dept + ","new_default_configuration each ","dept_params [] ","dept == ","department_config each ","cop include? ","config to_hash reject ","config to_hash "]}," RuboCop ConfigLoaderResolver inherited_file":{"type":"method","name":"inherited_file","children":[],"call":["File  expand_path ","File  dirname "," print ","ConfigLoader  debug? ","file inherit_from_remote ","file is_a? ","RemoteConfig  new ","inherit_from =~ ","URI DEFAULT_PARSER  make_regexp "," remote_file? ","Pathname  new absolute? ","Pathname  new ","URI DEFAULT_PARSER  make_URI DEFAULT_PARSER  make_regexp p "]}," RuboCop ConfigLoaderResolver base_configs":{"type":"method","name":"base_configs","children":[],"call":["configs compact ","ConfigLoader  load_file "," inherited_file "," Array compact map "," Array compact "," Array ","inherit_froms map ","Dir  glob ","PathUtil  glob? "," Array compact flat_map "]}," RuboCop ConfigLoaderResolver merge":{"type":"method","name":"merge","children":[],"call":["result []= "," merge ","derived_hash [] ","base_hash [] ","base_hash [] is_a? ","keys_appearing_in_both each ","base_hash keys & ","derived_hash keys ","base_hash keys ","base_hash merge "," warn_on_duplicate_setting ","base_hash [] | "," should_union? ","opts [] ","result delete ","derived_hash [] nil? "," merge_hashes? ","base_hash merge  []= ","base_hash keys &  each ","base_hash merge  delete "]}," RuboCop ConfigLoaderResolver merge_with_default":{"type":"method","name":"merge_with_default","children":[],"call":["Config  new "," merge "," handle_disabled_by_default ","params merge ","disabled_by_default ! "," transform ","config for_all_cops [] ","config for_all_cops ","ConfigLoader  default_configuration ","config [] "," override_enabled_for_disabled_departments "," handle_config for_all_cops []  ","config for_all_cops []  ! "," handle_disabled_by_default  for_all_cops [] "," handle_disabled_by_default  for_all_cops ","ConfigLoader  default_ handle_disabled_by_default uration ","ConfigLoader  ConfigLoader  default_configuration  "," handle_disabled_by_default  [] "]}," RuboCop ConfigLoader read_file":{"type":"method","name":"read_file","children":[],"call":[" exit "," warn "," format ","IO  read "," raise ","File  read "]}," RuboCop ConfigLoader resolver":{"type":"method","name":"resolver","children":[],"call":["ConfigLoaderResolver  new "]}," RuboCop ConfigLoader write_dotfile":{"type":"method","name":"write_dotfile","children":[],"call":["f write ","File  open "]}," RuboCop ConfigLoader add_inheritance_from_auto_generated_file":{"type":"method","name":"add_inheritance_from_auto_generated_file","children":[],"call":[" puts "," write_dotfile ","IO  read sub sub ","IO  read sub ","IO  read ","\n  -  + ","files join ","files size > ","files size ","files unshift ","files include? "," Array "," load_yaml_configuration [] "," load_yaml_configuration ","File  exist? "," write_config_file "," existing_configuration "," options_config "," Array  join "," Array  size > "," Array  size "," Array  unshift "," Array  include? "]}," RuboCop Config check":{"type":"method","name":"check","children":[],"call":[" make_excludes_absolute "," validate "," warn "," path "," deprecation_check "," loaded_path ","@validator validate "]}," RuboCop Config create":{"type":"method","name":"create","children":[],"call":[]}," RuboCop CLI reset_config_and_auto_gen_file":{"type":"method","name":"reset_config_and_auto_gen_file","children":[],"call":["ConfigLoader  add_inheritance_from_auto_generated_file ","File  open ","ConfigStore  new ","@config_store options_config= ","@options [] ","ConfigStore  new  options_config= "]}," RuboCop CLI run_all_cops_auto_gen_config":{"type":"method","name":"run_all_cops_auto_gen_config","children":[],"call":["f write ","File  open "," execute_runner "," puts "," Rainbow yellow "," Rainbow "]}," RuboCop CLI run_line_length_cop_auto_gen_config":{"type":"method","name":"run_line_length_cop_auto_gen_config","children":[],"call":["(send\n  (send\n    (send\n      (const nil :IO) :read\n      (const\n        (const nil :ConfigLoader) :AUTO_GENERATED_FILE)) :lines) :drop_while) join ","line start_with? ","IO  read lines drop_while ","IO  read lines ","IO  read ","ConfigStore  new ","@options delete "," execute_runner ","@options []= "," puts "," Rainbow yellow "," Rainbow "]}," RuboCop CLI execute_runners":{"type":"method","name":"execute_runners","children":[],"call":[" execute_runner "," run_all_cops_auto_gen_config "," run_line_length_cop_auto_gen_config "," reset_config_and_auto_gen_file ","@options [] "," puts "," Rainbow yellow "," Rainbow "," max_line_length == "," max_line_length ","ConfigLoader  default_configuration ","@config_store for ","Dir  pwd "," maybe_run_line_length_cop "," run_command "," suggest_extensions "," run_command tap "]}," RuboCop AST Node arithmetic_operation?":{"type":"method","name":"arithmetic_operation?","children":[],"call":["ARITHMETIC_OPERATORS  include? "," method_name "]}," RuboCop AST Node length":{"type":"method","name":"length","children":[],"call":[" source_range size "," source_range "]}," RuboCop AST Node empty?":{"type":"method","name":"empty?","children":[],"call":[" length zero? "," length "]}," RuboCop AST Node nonempty_line_count":{"type":"method","name":"nonempty_line_count","children":[],"call":[" source lines grep size "," source lines grep "," source lines "," source "]}," RuboCop AST Node line_count":{"type":"method","name":"line_count","children":[],"call":[" source_range last_line - + "," source_range last_line - "," source_range first_line "," source_range "," source_range last_line "]}," RuboCop AST SymbolNode node_parts":{"type":"method","name":"node_parts","children":[],"call":[" to_a "]}," RuboCop AST StrNode heredoc?":{"type":"method","name":"heredoc?","children":[],"call":[" loc is_a? "," loc "]}," RuboCop AST SendNode stabby_lambda?":{"type":"method","name":"stabby_lambda?","children":[],"call":["selector source == ","selector source "," loc selector "," loc "," loc selector source == "," loc selector source "," loc selector  source == "," loc selector  source "," loc  loc selector  "," loc  loc selector  source == "," loc  loc selector  source "]}," RuboCop AST SendNode lambda?":{"type":"method","name":"lambda?","children":[],"call":[" method? "," parent block_type? "," parent "," block_literal? "]}," RuboCop AST BasicLiteralNode value":{"type":"method","name":"value","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST ArgsNode empty_and_without_delimiters?":{"type":"method","name":"empty_and_without_delimiters?","children":[],"call":[" loc expression nil? "," loc expression "," loc "]}," RuboCop Token left_bracket?":{"type":"method","name":"left_bracket?","children":[],"call":["(sym :tLBRACK) include? "," type "]}," RuboCop PathUtil find_file_upwards":{"type":"method","name":"find_file_upwards","children":[],"call":["File  exist? ","File  join "," Pathname ascend "," Pathname ","File  expand_path "]}," RuboCop OptionsValidator format_message_from":{"type":"method","name":"format_message_from","children":[],"call":[" format ","corrections join ","corrections empty? ","(send\n  (lvar :cop_names) :select) sort ","score >= ","StringUtil  similarity ","cop_names select ","NameSimilarity  find_similar_names ","(send\n  (lvar :cop_names) :select) sort  join ","NameSimilarity  find_similar_names  join ","(send\n  (lvar :cop_names) :select) sort  empty? ","NameSimilarity  find_similar_names  empty? ","StringUtil  similarity  >= "]}," RuboCop Cop Style TrailingCommaInLiteral autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["PunctuationCorrector  swap_comma "]}," RuboCop Cop Style TrailingCommaInArguments autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["PunctuationCorrector  swap_comma "]}," RuboCop Cop Style RedundantParentheses autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["ParenthesesCorrector  correct "]}," RuboCop Cop Style MixinUsage belongs_to_class_or_module?":{"type":"method","name":"belongs_to_class_or_module?","children":[],"call":[" belongs_to_class_or_module? ","node parent ","node parent module_type? ","node parent class_type? ","node parent ! "]}," RuboCop Cop Style FormatStringToken unannotated_format?":{"type":"method","name":"unannotated_format?","children":[],"call":[" includes_format_methods? ! "," includes_format_methods? ","detected_style == "," format_string_in_typical_context? ! "," format_string_in_typical_context? "]}," RuboCop Cop Style FormatStringToken includes_format_methods?":{"type":"method","name":"includes_format_methods?","children":[],"call":["FORMAT_STRING_METHODS  include? ","desc_node method_name ","root_node descendants any? ","root_node descendants ","node ancestors last ","node ancestors ","ancestor method_name ","node each_ancestor any? ","node each_ancestor ","node ancestors last  descendants any? ","node ancestors last  descendants "]}," RuboCop Cop Style ClassAndModuleChildren indent_width":{"type":"method","name":"indent_width","children":[],"call":["@config for_cop [] ","@config for_cop "]}," RuboCop Cop Style ClassAndModuleChildren leading_spaces":{"type":"method","name":"leading_spaces","children":[],"call":["node source_range source_line [] ","node source_range source_line ","node source_range "]}," RuboCop Cop Style ClassAndModuleChildren remove_end":{"type":"method","name":"remove_end","children":[],"call":["corrector remove "," range_between ","body loc end end_pos + ","body loc end end_pos ","body loc end ","body loc ","body loc end begin_pos - "," leading_spaces size "," leading_spaces ","body loc end begin_pos "," processed_source raw_source [] == "," processed_source raw_source [] "," processed_source raw_source "," processed_source ","  range_between _between "]}," RuboCop Cop Style ClassAndModuleChildren compact_node":{"type":"method","name":"compact_node","children":[],"call":["corrector replace "," range_between ","body loc name end_pos ","body loc name ","body loc ","node loc keyword begin_pos ","node loc keyword ","node loc ","body type ","body children first const_name ","body children first ","body children ","name const_name ","node body loc name end_pos ","node body loc name ","node body loc ","node body "," compact_identifier_name ","node body type "," compact_replacement ","  range_between _between "]}," RuboCop Cop Style ClassAndModuleChildren compact_definition":{"type":"method","name":"compact_definition","children":[],"call":[" remove_end "," compact_node ","node body "," unindent "]}," RuboCop Cop Style ClassAndModuleChildren add_trailing_end":{"type":"method","name":"add_trailing_end","children":[],"call":["corrector replace ","node loc end ","node loc ","(begin\n  (lvar :padding)) freeze "," leading_spaces "]}," RuboCop Cop Style ClassAndModuleChildren split_on_double_colon":{"type":"method","name":"split_on_double_colon","children":[],"call":["corrector replace ","(str \"\\n\") freeze ","node loc keyword source ","node loc keyword ","node loc "," range_between ","children_definition loc double_colon end_pos ","children_definition loc double_colon ","children_definition loc ","children_definition loc double_colon begin_pos ","node children first ","node children ","  range_between _between ","node children first  loc double_colon end_pos ","node children first  loc double_colon ","node children first  loc ","node children first  loc double_colon begin_pos "]}," RuboCop Cop Style ClassAndModuleChildren replace_keyword_with_module":{"type":"method","name":"replace_keyword_with_module","children":[],"call":["corrector replace ","module freeze ","node loc keyword ","node loc "]}," RuboCop Cop Style ClassAndModuleChildren nest_definition":{"type":"method","name":"nest_definition","children":[],"call":[" add_trailing_end "," split_on_double_colon "," replace_keyword_with_module ","padding sub ","  * ","node loc end column ","node loc end ","node loc ","(send\n  (begin\n    (send\n      (str \" \") :*\n      (send nil :indent_width))) :+\n  (send nil :leading_spaces\n    (lvar :node))) to_s ","(send\n  (str \" \") :*\n  (send nil :indent_width)) + "," leading_spaces "," indent_width "," replace_namespace_keyword "," indentation + "," indentation ","(send\n  (begin\n    (send\n      (str \" \") :*\n      (send nil :indent_width))) :+\n  (send nil :leading_spaces\n    (lvar :node))) to_s  sub "," indentation +  sub "]}," RuboCop Cop Style ClassAndModuleChildren nest_or_compact":{"type":"method","name":"nest_or_compact","children":[],"call":[" compact_definition "," nest_definition "," style == "," style "]}," RuboCop Cop Style ClassAndModuleChildren autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" nest_or_compact "," style != "," style ","node class_type? "," lambda ","node parent_class "]}," RuboCop Cop Style BracesAroundHashParameters left_brace_and_space":{"type":"method","name":"left_brace_and_space","children":[],"call":[" range_with_surrounding_space ","space [] "]}," RuboCop Cop Style BracesAroundHashParameters right_whole_line_range":{"type":"method","name":"right_whole_line_range","children":[],"call":[" range_by_whole_lines "," range_by_whole_lines source strip == "," range_by_whole_lines source strip "," range_by_whole_lines source "," range_by_whole_lines source strip =~ "]}," RuboCop Cop Style BracesAroundHashParameters left_whole_line_range":{"type":"method","name":"left_whole_line_range","children":[],"call":[" range_by_whole_lines "," range_by_whole_lines source strip == "," range_by_whole_lines source strip "," range_by_whole_lines source "]}," RuboCop Cop Style BracesAroundHashParameters remove_braces_with_range":{"type":"method","name":"remove_braces_with_range","children":[],"call":["corrector remove "]}," RuboCop Cop Style AutoResourceCleanup cleanup?":{"type":"method","name":"cleanup?","children":[],"call":["parent lvasgn_type? ! ","parent lvasgn_type? ","parent block_type? ","node block_argument? ","node parent ","node parent  lvasgn_type? ! ","node parent  lvasgn_type? ","node parent  block_type? ","node node parent  "]}," RuboCop Cop Rails RedundantReceiverInWithOptions same_value?":{"type":"method","name":"same_value?","children":[],"call":["recv_node children [] == ","arg_node children [] ","arg_node children ","recv_node children [] ","recv_node children "]}," RuboCop Cop Rails Presence message":{"type":"method","name":"message","children":[],"call":[" format ","node source "," replacement "]}," RuboCop Cop Rails Presence ignore_other_node?":{"type":"method","name":"ignore_other_node?","children":[],"call":["node while_type? ","node rescue_type? ","node if_type? "]}," RuboCop Cop Rails InverseOf same_context_in_with_options?":{"type":"method","name":"same_context_in_with_options?","children":[],"call":["arg children [] == ","recv children [] ","recv children ","arg children [] ","arg children ","recv nil? ","arg nil? "]}," RuboCop Cop Rails InverseOf with_options_arguments":{"type":"method","name":"with_options_arguments","children":[],"call":["n send_node arguments ","n send_node ","blocks flat_map "," same_context_in_with_options? ","block arguments first ","block arguments ","block send_node command? ","block send_node ","node each_ancestor select ","node each_ancestor "]}," RuboCop Cop Rails InverseOf options_ignoring_inverse_of?":{"type":"method","name":"options_ignoring_inverse_of?","children":[],"call":[" polymorphic_option? "," through_option? ","options any? "]}," RuboCop Cop Rails HasManyOrHasOneDependent valid_options_in_with_options_block?":{"type":"method","name":"valid_options_in_with_options_block?","children":[],"call":[" valid_options? "," with_options_block ","node parent ","node parent parent ","node parent begin_type? "," contain_valid_options_in_with_options_block? "," valid_optionode parent s? "," valid_optionode parent parent s? "," with_optionode parent s_block "," with_optionode parent parent s_block ","node parent ode parenode parent t ","node parent parent ode parenode parent parent t ","node parent ode parenode parent t parenode parent t ","node parent parent ode parenode parent parent t parenode parent parent t ","node parent ode parenode parent t beginode parent _type? ","node parent parent ode parenode parent parent t beginode parent parent _type? "," conode parent tainode parent _valid_optionode parent s_inode parent _with_optionode parent s_block? "," conode parent parent tainode parent parent _valid_optionode parent parent s_inode parent parent _with_optionode parent parent s_block? "]}," RuboCop Cop Rails ApplicationRecord autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," class ","node source_range "," lambda "]}," RuboCop Cop Rails ApplicationJob autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," class ","node source_range "," lambda "]}," RuboCop Cop OrderedGemNode treat_comments_as_separators":{"type":"method","name":"treat_comments_as_separators","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Alignment within?":{"type":"method","name":"within?","children":[],"call":["inner end_pos <= ","outer end_pos ","inner end_pos ","inner begin_pos >= ","outer begin_pos ","inner begin_pos "]}," RuboCop Cop Alignment display_column":{"type":"method","name":"display_column","children":[],"call":["Unicode DisplayWidth  of ","line [] ","range column "," processed_source lines [] ","range line - ","range line "," processed_source lines "," processed_source "," processed_source lines []  [] "," processed_source  processed_source lines [] s [] ","range  processed_source lines []  - ","range  processed_source lines []  "," processed_source  processed_source lines [] s "]}," RuboCop Cop Alignment each_bad_alignment":{"type":"method","name":"each_bad_alignment","children":[],"call":["current loc line ","current loc ","@column_delta nonzero? ","base_column - "," display_column ","current source_range "," begins_its_line? ","current loc line > ","items each ","base_column -  nonzero? "]}," RuboCop Cop Alignment check_alignment":{"type":"method","name":"check_alignment","children":[],"call":[" add_offense "," within? ","o location "," offenses any? "," offenses ","current source_range "," each_bad_alignment "," display_column ","items first source_range ","items first ","items empty? "," register_offense ","@current_offenses any? "]}," RuboCop Cop Alignment offset":{"type":"method","name":"offset","children":[],"call":["SPACE  * ","node loc column ","node loc "]}," RuboCop Cop Alignment indentation":{"type":"method","name":"indentation","children":[],"call":[" offset + ","SPACE  * "," configured_indentation_width "," offset "]}," RuboCop Cop Alignment configured_indentation_width":{"type":"method","name":"configured_indentation_width","children":[],"call":[" config for_cop [] "," config for_cop "," config "," cop_config [] "," cop_config "]}," RuboCop Cop Lint UnusedMethodArgument autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["UnusedArgCorrector  correct "," processed_source "]}," RuboCop Cop Lint UnusedBlockArgument autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["UnusedArgCorrector  correct "," processed_source "]}," RuboCop Cop Layout SpaceInsideReferenceBrackets closing_bracket":{"type":"method","name":"closing_bracket","children":[],"call":["token right_bracket? ","inner_left_brackets_needing_closure zero? ","token left_bracket? "," tokens [] each "," tokens [] "," tokens "," tokens index ","tokens [] each ","tokens [] ","tokens index ","token r tokens index ght_bracket? ","token rtokens index ght_bracket? "," tokens index nner_left_brackets_need tokens index ng_closure zero? ","tokens index nner_left_brackets_needtokens index ng_closure zero? "," tokens  tokens index ndex "," tokens tokens index ndex ","tokens  tokens index ndex ","tokens tokens index ndex "]}," RuboCop Cop Layout SpaceBeforeSemicolon autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["PunctuationCorrector  remove_space "]}," RuboCop Cop Layout SpaceBeforeComma autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["PunctuationCorrector  remove_space "]}," RuboCop Cop Layout SpaceAfterSemicolon autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["PunctuationCorrector  add_space "]}," RuboCop Cop Layout SpaceAfterComma autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["PunctuationCorrector  add_space "]}," RuboCop Cop Layout MultilineOperationIndentation autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["AlignmentCorrector  correct "," processed_source "]}," RuboCop Cop Layout MultilineMethodDefinitionBraceLayout autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["MultilineLiteralBraceCorrector  correct "," processed_source ","MultilineLiteralBraceCorrector  new "]}," RuboCop Cop Layout MultilineMethodCallIndentation autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["AlignmentCorrector  correct "," processed_source "]}," RuboCop Cop Layout MultilineMethodCallBraceLayout autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["MultilineLiteralBraceCorrector  correct "," processed_source ","MultilineLiteralBraceCorrector  new "]}," RuboCop Cop Layout MultilineHashBraceLayout autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["MultilineLiteralBraceCorrector  correct "," processed_source ","MultilineLiteralBraceCorrector  new "]}," RuboCop Cop Layout MultilineArrayBraceLayout autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["MultilineLiteralBraceCorrector  correct "," processed_source ","MultilineLiteralBraceCorrector  new "]}," RuboCop Cop Layout IndentationWidth autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["AlignmentCorrector  correct "," processed_source "]}," RuboCop Cop Layout IndentationConsistency autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["AlignmentCorrector  correct "," column_delta "," processed_source "]}," RuboCop Cop Layout IndentHash autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["AlignmentCorrector  correct "," processed_source "]}," RuboCop Cop Layout IndentAssignment autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["AlignmentCorrector  correct "," column_delta "," processed_source "]}," RuboCop Cop Layout IndentArray autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["AlignmentCorrector  correct "," processed_source "]}," RuboCop Cop Layout FirstParameterIndentation autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["AlignmentCorrector  correct "," column_delta "," processed_source "]}," RuboCop Cop Layout FirstMethodParameterLineBreak autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["EmptyLineCorrector  insert_before "]}," RuboCop Cop Layout FirstMethodArgumentLineBreak autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["EmptyLineCorrector  insert_before "]}," RuboCop Cop Layout FirstHashElementLineBreak autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["EmptyLineCorrector  insert_before "]}," RuboCop Cop Layout FirstArrayElementLineBreak autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["EmptyLineCorrector  insert_before "]}," RuboCop Cop Layout EmptyLinesAroundModuleBody autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["EmptyLineCorrector  correct "]}," RuboCop Cop Layout EmptyLinesAroundMethodBody autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["EmptyLineCorrector  correct "]}," RuboCop Cop Layout EmptyLinesAroundExceptionHandlingKeywords autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["EmptyLineCorrector  correct "]}," RuboCop Cop Layout EmptyLinesAroundClassBody autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["EmptyLineCorrector  correct "]}," RuboCop Cop Layout EmptyLinesAroundBlockBody autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["EmptyLineCorrector  correct "]}," RuboCop Cop Layout EmptyLinesAroundBeginBody autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["EmptyLineCorrector  correct "]}," RuboCop Cop Layout EmptyLinesAroundArguments processed_lines":{"type":"method","name":"processed_lines","children":[],"call":[" processed_source lines [] "," processed_source lines "," processed_source "," last_line - "," last_line "," first_line - "," first_line ","array << ","num - "," line_numbers each_with_object "," line_numbers "]}," RuboCop Cop Layout EmptyLinesAroundArguments last_line":{"type":"method","name":"last_line","children":[],"call":["node last_line ","last_arg first_line ","last_arg block_type? ","node arguments last ","node arguments ","node arguments last  first_line ","node arguments last  block_type? "]}," RuboCop Cop Layout EmptyLinesAroundArguments first_line":{"type":"method","name":"first_line","children":[],"call":["node first_line ","node receiver last_line ","node receiver "]}," RuboCop Cop Layout ElseAlignment autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["AlignmentCorrector  correct "," column_delta "," processed_source "]}," RuboCop Cop Layout CommentIndentation autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["AlignmentCorrector  correct "," processed_source ","corr call ","corrections each "," lambda "," autocorrect_preceding_comments << "," autocorrect_one "," autocorrect_preceding_comments "," autocorrect_preceding_comments <<  each "]}," RuboCop Cop Layout ClosingParenthesisIndentation autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["AlignmentCorrector  correct "," processed_source "]}," RuboCop Cop Layout AlignParameters autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["AlignmentCorrector  correct "," column_delta "," processed_source "]}," RuboCop Cop Layout AlignArray autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["AlignmentCorrector  correct "," column_delta "," processed_source "]}," RuboCop Cop Layout AccessModifierIndentation autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["AlignmentCorrector  correct "," processed_source "]}," RuboCop Cop Generator RequireFileInjector require_path":{"type":"method","name":"require_path","children":[],"call":["path to_s sub ","path to_s "," source_path relative_path_from "," root_file_path dirname "," root_file_path "," source_path ","path to_s delete_suffix "," source_path relative_path_from  to_s sub "," source_path relative_path_from  to_s "," source_ source_path relative_path_from  relative_ source_path relative_path_from _from "," root_file_ source_path relative_path_from  dirname "," root_file_ source_path relative_path_from  "," source_ source_path relative_path_from  "," source_path relative_path_from  to_s delete_suffix "]}," RuboCop Cop Gemspec OrderedDependencies autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["OrderedGemCorrector  correct "," treat_comments_as_separators "," previous_declaration "," processed_source "]}," RuboCop Cop UnusedArgCorrector correct":{"type":"method","name":"correct","children":[],"call":["corrector insert_before ","node loc name ","node loc "," lambda ","corrector remove "," range_with_surrounding_comma "," range_with_surrounding_space ","node source_range ","node blockarg_type? ","(sym :kwarg) include? ","node type ","corrector replace ","node source gsub ","node source ","node node_parts [] ","node node_parts ","node optarg_type? "," correct_for_blockarg_type ","  range_with_surrounding_comma _with_surrounding_comma ","  range_with_surrounding_space _with_surrounding_comma ","  range_with_surrounding_comma _with_surrounding_space ","  range_with_surrounding_space _with_surrounding_space ","node source_ range_with_surrounding_comma  ","node source_ range_with_surrounding_space  "]}," RuboCop Cop StringLiteralCorrector correct":{"type":"method","name":"correct","children":[],"call":["corrector replace ","str inspect ","node source_range "," to_string_literal ","style == ","node str_content "," lambda ","node dstr_type? ","node str_content  inspect "," to_node str_content ing_literal ","node node str_content _content ","node dnode str_content _type? "]}," RuboCop Cop SpaceCorrector add_space":{"type":"method","name":"add_space","children":[],"call":["corrector insert_before ","right_token pos ","right_token space_before? ","corrector insert_after ","left_token pos ","left_token space_after? "]}," RuboCop Cop SpaceCorrector remove_space":{"type":"method","name":"remove_space","children":[],"call":["corrector remove "," side_space_range ","right_token pos ","right_token space_before? ","left_token pos ","left_token space_after? "," side_space_ side_space_range  "]}," RuboCop Cop PunctuationCorrector swap_comma":{"type":"method","name":"swap_comma","children":[],"call":["corrector insert_after ","corrector remove ","range source "," lambda "]}," RuboCop Cop PunctuationCorrector add_space":{"type":"method","name":"add_space","children":[],"call":["corrector replace ","token pos source + ","token pos source ","token pos "," lambda "]}," RuboCop Cop PunctuationCorrector remove_space":{"type":"method","name":"remove_space","children":[],"call":["corrector remove "," lambda "]}," RuboCop Cop ParenthesesCorrector next_char_is_question_mark?":{"type":"method","name":"next_char_is_question_mark?","children":[],"call":["node loc last_column == ","node parent loc question column ","node parent loc question ","node parent loc ","node parent ","node loc last_column ","node loc "]}," RuboCop Cop ParenthesesCorrector ternary_condition?":{"type":"method","name":"ternary_condition?","children":[],"call":["node parent ternary? ","node parent ","node parent if_type? "]}," RuboCop Cop ParenthesesCorrector correct":{"type":"method","name":"correct","children":[],"call":["corrector insert_after ","node loc end ","node loc "," next_char_is_question_mark? "," ternary_condition? ","corrector remove ","node loc begin "," lambda "," handle_orphaned_comma "]}," RuboCop Cop OrderedGemCorrector swap_range":{"type":"method","name":"swap_range","children":[],"call":["corrector replace ","range2 source ","range1 source ","corrector remove ","corrector insert_before "]}," RuboCop Cop OrderedGemCorrector declaration_with_comment":{"type":"method","name":"declaration_with_comment","children":[],"call":["Parser Source Range  new ","buffer line_range end_pos ","buffer line_range ","buffer line_for_position ","node loc expression end_pos ","node loc expression ","node loc "," get_source_range begin_pos "," get_source_range "," comments_as_separators "," processed_source buffer "," processed_source "," range_between "," range_by_whole_lines end_pos "," range_by_whole_lines "," range_by_whole_lines begin_pos ","node source_range end_pos ","node source_range ","buffer line_range buffer line_range end_pos  ","buffer line_range  range_by_whole_lines end_pos  "," processed_source buffer  line_range end_pos "," processed_source buffer  line_range "," processed_source buffer  line_for_position ","node loc expression buffer line_range end_pos  ","node loc expression  range_by_whole_lines end_pos  "," get_source_range  get_source_range begin_pos  "," get_source_range  range_by_whole_lines begin_pos  "," processed_source  processed_source buffer  "," range_by_whole_lines buffer line_range end_pos  "," range_by_whole_lines  range_by_whole_lines end_pos  "," range_by_whole_lines  get_source_range begin_pos  "," range_by_whole_lines  range_by_whole_lines begin_pos  ","node source_range buffer line_range end_pos  ","node source_range  range_by_whole_lines end_pos  "]}," RuboCop Cop OrderedGemCorrector correct":{"type":"method","name":"correct","children":[],"call":[" swap_range "," lambda "," declaration_with_comment ","corrector swap "]}," RuboCop Cop MultilineLiteralBraceCorrector last_element_trailing_comma_range":{"type":"method","name":"last_element_trailing_comma_range","children":[],"call":["range source == ","range source "," range_with_surrounding_space end resize "," range_with_surrounding_space end "," range_with_surrounding_space "," children last source_range "," children last "," children "," range_with_surrounding_space end resize  source == "," range_with_surrounding_space end resize  source ","  range_with_surrounding_space end resize _with_surrounding_space end resize ","  range_with_surrounding_space end resize _with_surrounding_space end ","  range_with_surrounding_space end resize _with_surrounding_space "," children last source_ range_with_surrounding_space end resize  "]}," RuboCop Cop MultilineLiteralBraceCorrector last_element_range_with_trailing_comma":{"type":"method","name":"last_element_range_with_trailing_comma","children":[],"call":[" children last source_range "," children last "," children "," children last source_range join "," last_element_trailing_comma_range "," last_element_ last_element_trailing_comma_range  "]}," RuboCop Cop MultilineLiteralBraceCorrector correct":{"type":"method","name":"correct","children":[],"call":["corrector insert_after ","node loc end source ","node loc end ","node loc "," last_element_range_with_trailing_comma ","corrector remove "," range_with_surrounding_space "," lambda "," new_line_needed_before_closing_brace? ","corrector insert_before ","\n freeze "," closing_brace_on_same_line? "]}," RuboCop Cop EmptyLineCorrector insert_before":{"type":"method","name":"insert_before","children":[],"call":["corrector insert_before ","node source_range "," lambda "]}," RuboCop Cop EmptyLineCorrector correct":{"type":"method","name":"correct","children":[],"call":["corrector insert_before ","corrector remove "," lambda "]}," RuboCop Cop ConditionCorrector negated_condition":{"type":"method","name":"negated_condition","children":[],"call":["condition children first ","condition children ","condition begin_type? ","node condition ","condition children first  children first ","node condition  children first ","condition children first  children ","node condition  children ","condition children first  begin_type? ","node condition  begin_type? ","node condition children first  ","node node condition  "]}," RuboCop Cop ConditionCorrector correct_negative_condition":{"type":"method","name":"correct_negative_condition","children":[],"call":["corrector replace ","condition children first source ","condition children first ","condition children ","condition source_range ","node inverse_keyword ","node loc keyword ","node loc "," lambda "," negated_condition "," negated_condition  children first source "," negated_condition  children first "," negated_condition  children "," negated_condition  source_range "," negated_ negated_condition  "]}," RuboCop Cop AlignmentCorrector alignment_column":{"type":"method","name":"alignment_column","children":[],"call":["align_to column ","align_to source_range column ","align_to source_range ","align_to respond_to? ","align_to ! "]}," RuboCop Cop AlignmentCorrector whitespace_range":{"type":"method","name":"whitespace_range","children":[],"call":[" range_between ","begin_pos - ","node loc end column ","node loc end ","node loc ","node loc end begin_pos ","node loc end begin_pos  - ","node loc end node loc end begin_pos  "]}," RuboCop Cop AlignmentCorrector begins_its_line?":{"type":"method","name":"begins_its_line?","children":[],"call":["(send\n  (send\n    (lvar :range) :source_line) :=~\n  (regexp\n    (str \"\\\\S\")\n    (regopt))) == ","range column ","range source_line =~ ","range source_line "]}," RuboCop Cop AlignmentCorrector each_line":{"type":"method","name":"each_line","children":[],"call":["line length ","expr source each_line ","expr source ","expr begin_pos "]}," RuboCop Cop AlignmentCorrector remove":{"type":"method","name":"remove","children":[],"call":["range source =~ ","range source "," range_between ","range end_pos + ","range end_pos ","range begin_pos + ","range begin_pos ","corrector remove ","StringIO  new ","(str \"^ +$\") match? "," range_between  source =~ "," range_between  source ","  range_between _between "," range_between  end_pos + "," range_between  end_pos "," range_between  begin_pos + "," range_between  begin_pos "]}," RuboCop Cop AlignmentCorrector calculate_range":{"type":"method","name":"calculate_range","children":[],"call":[" range_between ","pos_to_remove + ","column_delta abs ","line_begin_pos - ","column_delta > ","expr source_buffer source [] =~ ","expr source_buffer source [] ","expr source_buffer source ","expr source_buffer ","expr source_buffer source [] start_with? ","column_delta positive? ","line_begin_pos + ","line_begin_pos -  + "]}," RuboCop Cop AlignmentCorrector block_comment_within?":{"type":"method","name":"block_comment_within?","children":[],"call":[" within? ","c loc expression ","c loc "," processed_source comments select any? "," processed_source comments select "," processed_source comments "," processed_source ","c source_range "]}," RuboCop Cop AlignmentCorrector heredoc_ranges":{"type":"method","name":"heredoc_ranges","children":[],"call":["n loc heredoc_body join ","n loc heredoc_end ","n loc ","n loc heredoc_body ","(send\n  (send\n    (lvar :node) :each_node\n    (sym :dstr)) :select) map ","n loc respond_to? ","node each_node select ","node each_node ","node is_a? ","node each_node select map "]}," RuboCop Cop AlignmentCorrector autocorrect_line":{"type":"method","name":"autocorrect_line","children":[],"call":[" remove ","range source =~ ","range source ","corrector insert_before ","  * ","range source == ","column_delta > "," within? ","heredoc_ranges any? "," calculate_range ","range begin ","column_delta positive? ","range resize source == ","range resize source ","range resize ","taboo_ranges any? ","(str \"\\\\A[ \\\\t]+\\\\z\") match? ","range resize source != "," calculate_range  source =~ "," calculate_range  source "," calculate_range  source == ","heredoc_ calculate_range s any? "," calculate_ calculate_range  "," calculate_range  begin "," calculate_range  resize source == "," calculate_range  resize source "," calculate_range  resize ","taboo_ calculate_range s any? "," calculate_range  resize source != "]}," RuboCop Cop AlignmentCorrector align_end":{"type":"method","name":"align_end","children":[],"call":["corrector replace ","  * "," lambda "," alignment_column ","whitespace source strip empty? ","whitespace source strip ","whitespace source "," whitespace_range "," alignment_ alignment_column  "," whitespace_range  source strip empty? "," whitespace_range  source strip "," whitespace_range  source ","  whitespace_range _range "]}," RuboCop Cop AlignmentCorrector correct":{"type":"method","name":"correct","children":[],"call":[" autocorrect_line "," heredoc_ranges "," each_line "," lambda "," block_comment_within? ","node loc expression ","node loc ","node respond_to? "," inside_string_ranges ","node source_range ","node loc node loc expression ession ","node loc node source_range ession "]}," RuboCop Config target_ruby_version_from_version_file":{"type":"method","name":"target_ruby_version_from_version_file","children":[],"call":["md [] to_f ","md [] ","File  read match ","File  read ","File  file? "," ruby_version_file ","File   ruby_version_file ? "," ruby_version_ ruby_version_file  "]}," RuboCop Config ruby_version_file":{"type":"method","name":"ruby_version_file","children":[],"call":["PathUtil  find_file_upwards "," base_dir_for_path_parameters "," find_file_upwards "]}," RuboCop CLI max_line_length":{"type":"method","name":"max_line_length","children":[],"call":["config for_cop [] ","config for_cop "," line_length_cop [] "," line_length_cop "]}," RuboCop AST Node empty_source?":{"type":"method","name":"empty_source?","children":[],"call":[" source_length zero? "," source_length "]}," RuboCop AST Node source_length":{"type":"method","name":"source_length","children":[],"call":[" source_range size "," source_range "]}," RuboCop AST Node last_line":{"type":"method","name":"last_line","children":[],"call":[" loc last_line "," loc "]}," RuboCop AST Node first_line":{"type":"method","name":"first_line","children":[],"call":[" loc line "," loc "]}," RuboCop Token end?":{"type":"method","name":"end?","children":[],"call":[" type == "," type "]}," RuboCop Token rescue_modifier?":{"type":"method","name":"rescue_modifier?","children":[],"call":[" type == "," type "]}," RuboCop ProcessedSource comment_lines":{"type":"method","name":"comment_lines","children":[],"call":["c location line ","c location "," comments map "," comments "]}," RuboCop ProcessedSource following_line":{"type":"method","name":"following_line","children":[],"call":[" lines [] ","token line "," lines "]}," RuboCop ProcessedSource preceding_line":{"type":"method","name":"preceding_line","children":[],"call":[" lines [] ","token line - ","token line "," lines "]}," RuboCop ProcessedSource start_with?":{"type":"method","name":"start_with?","children":[],"call":[" [] start_with? "," [] "," [] nil? "]}," RuboCop ProcessedSource comments_before_line":{"type":"method","name":"comments_before_line","children":[],"call":["c location line <= ","c location line ","c location "," comments select "," comments "]}," RuboCop ProcessedSource comment_on_line?":{"type":"method","name":"comment_on_line?","children":[],"call":["c loc line == ","c loc line ","c loc "," comments any? "," comments "]}," RuboCop ProcessedSource commented?":{"type":"method","name":"commented?","children":[],"call":[" comment_lines include? ","source_range line "," comment_lines "]}," RuboCop ProcessedSource blank?":{"type":"method","name":"blank?","children":[],"call":[" ast nil? "," ast "]}," RuboCop ProcessedSource find_token":{"type":"method","name":"find_token","children":[],"call":[" tokens find "," tokens "]}," RuboCop ProcessedSource each_token":{"type":"method","name":"each_token","children":[],"call":[" tokens each "," tokens "]}," RuboCop ProcessedSource find_comment":{"type":"method","name":"find_comment","children":[],"call":[" comments find "," comments "]}," RuboCop ProcessedSource each_comment":{"type":"method","name":"each_comment","children":[],"call":[" comments each "," comments "]}," RuboCop OptionsValidator validate_auto_gen_config":{"type":"method","name":"validate_auto_gen_config","children":[],"call":[" raise "," format ","option to_s tr ","option to_s ","@options key? ","(sym :exclude_limit) each "]}," RuboCop Formatter DisabledConfigFormatter timestamp":{"type":"method","name":"timestamp","children":[],"call":["Time  now ","@options [] ","Time  now utc "," show_timestamp? "]}," RuboCop FileFinder traverse_files_upwards":{"type":"method","name":"traverse_files_upwards","children":[],"call":["File  exist? ","File  join ","Dir  home ","ENV  key? ","file to_s ","file exist? ","dir + ","FileFinder  root_level? ","Pathname  new expand_path ascend ","Pathname  new expand_path ","Pathname  new ","dir == ","FileFinder  root_level ","dir to_s ","File  join  to_s ","dir +  to_s ","File  join  exist? ","dir +  exist? ","dir to_s  + ","dir to_s  == ","dir to_s  to_s "]}," RuboCop FileFinder find_files_upwards":{"type":"method","name":"find_files_upwards","children":[],"call":["files << "," traverse_files_upwards "]}," RuboCop FileFinder find_file_upwards":{"type":"method","name":"find_file_upwards","children":[],"call":[" traverse_files_upwards "]}," RuboCop FileFinder root_level?":{"type":"method","name":"root_level?","children":[],"call":[]}," RuboCop FileFinder root_level=":{"type":"method","name":"root_level=","children":[],"call":[]}," RuboCop Cop Util tokens":{"type":"method","name":"tokens","children":[],"call":["@tokens []= ","node object_id ","node_tokens unshift ","token begin_pos >= ","token begin_pos ","tokens_to_node_end reverse_each ","token end_pos <= ","token end_pos "," processed_source tokens take_while "," processed_source tokens "," processed_source ","source_range end_pos ","source_range begin_pos ","node source_range ","@tokens [] "," processed_source tokens select ","token source_range begin_pos  >= ","token source_range begin_pos  ","token source_range end_pos  <= ","token source_range end_pos  ","source_range source_range end_pos  ","node source_range  end_pos ","source_range source_range begin_pos  ","node source_range  begin_pos ","node node source_range  "]}," RuboCop Cop Style TrailingCommaInHashLiteral autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["PunctuationCorrector  swap_comma "]}," RuboCop Cop Style TrailingCommaInHashLiteral on_hash":{"type":"method","name":"on_hash","children":[],"call":[" check_literal "]}," RuboCop Cop Style TrailingCommaInArrayLiteral autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["PunctuationCorrector  swap_comma "]}," RuboCop Cop Style TrailingCommaInArrayLiteral on_array":{"type":"method","name":"on_array","children":[],"call":[" check_literal ","node square_brackets? "]}," RuboCop Cop Style TrailingBodyOnModule autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["LineBreakCorrector  correct_trailing_body "," processed_source "," configured_indentation_width "," lambda "]}," RuboCop Cop Style TrailingBodyOnModule on_module":{"type":"method","name":"on_module","children":[],"call":[" add_offense "," first_part_of ","node to_a last ","node to_a "," trailing_body? ","LineBreakCorrector  correct_trailing_body "," processed_source "," configured_indentation_width "]}," RuboCop Cop Style TrailingBodyOnClass autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["LineBreakCorrector  correct_trailing_body "," processed_source "," configured_indentation_width "," lambda "]}," RuboCop Cop Style TrailingBodyOnClass on_class":{"type":"method","name":"on_class","children":[],"call":[" add_offense "," first_part_of ","node to_a last ","node to_a "," trailing_body? ","LineBreakCorrector  correct_trailing_body "," processed_source "," configured_indentation_width "]}," RuboCop Cop Style SymbolArray symbol_without_quote?":{"type":"method","name":"symbol_without_quote?","children":[],"call":["redefinable_operators include? ","special_gvars include? ","string =~ ","(str \"\\\\A\\\\$[a-zA-Z_]\\\\w*\\\\z\") match? ","(str \"\\\\A\\\\$[1-9]\\\\d*\\\\z\") match? ","(str \"\\\\A@@?[a-zA-Z_]\\\\w*\\\\z\") match? ","(str \"\\\\A[a-zA-Z_]\\\\w*[!?]?\\\\z\") match? ","REDEFINABLE_OPERATORS  include? ","SPECIAL_GVARS  include? "]}," RuboCop Cop Style SymbolArray to_symbol_literal":{"type":"method","name":"to_symbol_literal","children":[],"call":[" to_string_literal "," symbol_without_quote? "]}," RuboCop Cop Style SafeNavigation add_safe_nav_to_all_methods_in_chain":{"type":"method","name":"add_safe_nav_to_all_methods_in_chain","children":[],"call":["corrector insert_before ","ancestor loc dot ","ancestor loc ","ancestor == ","ancestor send_type? ","(sym :send) include? ","ancestor type ","start_method each_ancestor "]}," RuboCop Cop Style SafeNavigation unsafe_method_used?":{"type":"method","name":"unsafe_method_used?","children":[],"call":["ancestor == "," nil_methods include? ","ancestor method_name "," nil_methods "," unsafe_method? "," config for_cop [] "," config for_cop "," config ","method each_ancestor any? ","method each_ancestor "]}," RuboCop Cop Style SafeNavigation chain_size":{"type":"method","name":"chain_size","children":[],"call":["total + ","ancestor == ","method each_ancestor inject ","method each_ancestor "]}," RuboCop Cop Style RedundantReturn check_ensure_node":{"type":"method","name":"check_ensure_node","children":[],"call":[" check_branch ","node node_parts [] ","node node_parts "]}," RuboCop Cop Style RedundantReturn check_rescue_node":{"type":"method","name":"check_rescue_node","children":[],"call":[" check_branch ","node child_nodes each ","node child_nodes ","node body ","node else? ","node branches each ","node branches "]}," RuboCop Cop Style ModuleFunction autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node source_range "," extend_self_node? "," lambda "," style == "," style "]}," RuboCop Cop Style ExpandPathArguments arguments_range":{"type":"method","name":"arguments_range","children":[],"call":[" range_between ","node parent last_argument source_range end_pos ","node parent last_argument source_range ","node parent last_argument ","node parent ","node parent first_argument source_range begin_pos ","node parent first_argument source_range ","node parent first_argument "]}," RuboCop Cop Style ExpandPathArguments remove_parent_method":{"type":"method","name":"remove_parent_method","children":[],"call":["corrector remove ","node loc selector ","node loc ","node loc dot ","default_dir parent parent parent children first ","default_dir parent parent parent children ","default_dir parent parent parent ","default_dir parent parent ","default_dir parent ","default_dir parent parent parent children first  loc selector ","default_dir parent parent parent children first  loc ","default_dir parent parent parent children first  loc dot "]}," RuboCop Cop Style ExpandPathArguments parent_path":{"type":"method","name":"parent_path","children":[],"call":["paths join ","paths delete_at ","path == ","paths each_with_index ","paths delete ","current_path split ","current_path split  join ","current_path split  delete_at ","current_path split  each_with_index ","current_path split  delete "]}," RuboCop Cop Style ExpandPathArguments depth":{"type":"method","name":"depth","children":[],"call":["(send\n  (lvar :paths) :reject) count ","path == ","paths reject ","current_path split ","path != ","paths count ","(send\n  (lvar :current_path split ) :reject) count ","current_path split  reject ","current_path split  count "]}," RuboCop Cop Style ExpandPathArguments strip_surrounded_quotes!":{"type":"method","name":"strip_surrounded_quotes!","children":[],"call":["path_string slice! ","path_string length - ","path_string length "]}," RuboCop Cop Style ExpandPathArguments autocorrect_expand_path":{"type":"method","name":"autocorrect_expand_path","children":[],"call":["corrector replace ","default_dir loc expression ","default_dir loc ","current_path loc expression ","current_path loc "," parent_path "," arguments_range "," depth "," strip_surrounded_quotes! ","current_path source "," arguments_ arguments_range  "]}," RuboCop Cop Style ExpandPathArguments inspect_offense_for_expand_path":{"type":"method","name":"inspect_offense_for_expand_path","children":[],"call":[" add_offense "," format "," depth zero? "," depth ","parent_path == "," parent_path "," strip_surrounded_quotes! ","current_path source ","current_path str_type? "," unrecommended_argument? "," autocorrect ","node loc selector ","node loc "," parent_path  == ","  parent_path  "," strip_surrounded_quotes!  source "," strip_surrounded_quotes!  str_type? "]}," RuboCop Cop Style ExpandPathArguments unrecommended_argument?":{"type":"method","name":"unrecommended_argument?","children":[],"call":["default_dir source == ","default_dir source "]}," RuboCop Cop Style ExpandPathArguments autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" remove_parent_method ","corrector replace ","default_dir loc expression ","default_dir loc "," pathname_new_parent_expand_path "," pathname_parent_expand_path "," autocorrect_expand_path "," file_expand_path "," lambda "," pathname_new_parent_expand_path  loc expression "," pathname_parent_expand_path  loc expression "," pathname_new_parent_expand_path  loc "," pathname_parent_expand_path  loc "]}," RuboCop Cop Style ExpandPathArguments on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," unrecommended_argument? "," pathname_new_parent_expand_path "," pathname_parent_expand_path "," inspect_offense_for_expand_path "," file_expand_path ","node method? "," autocorrect "]}," RuboCop Cop Style EmptyLineAfterGuardClause next_sibling_empty_or_guard_clause?":{"type":"method","name":"next_sibling_empty_or_guard_clause?","children":[],"call":[" contains_guard_clause? ","next_sibling if_type? ","next_sibling nil? ","node parent children [] ","node sibling_index + ","node sibling_index ","node parent children ","node parent ","node parent children []  if_type? ","node parent children []  nil? "]}," RuboCop Cop Style EmptyLineAfterGuardClause next_line_empty?":{"type":"method","name":"next_line_empty?","children":[],"call":[" processed_source [] blank? "," processed_source [] ","node last_line "," processed_source "]}," RuboCop Cop Style EmptyLineAfterGuardClause contains_guard_clause?":{"type":"method","name":"contains_guard_clause?","children":[],"call":["node if_branch guard_clause? ","node if_branch "]}," RuboCop Cop Style EmptyLineAfterGuardClause autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector insert_after "," range_by_whole_lines ","node source_range "," lambda "]}," RuboCop Cop Style EmptyLineAfterGuardClause on_if":{"type":"method","name":"on_if","children":[],"call":[" add_offense "," next_line_empty? "," next_sibling_empty_or_guard_clause? ","node parent single_line? ","node parent ","node parent nil? "," contains_guard_clause? "," next_sibling_parent_empty_or_else? "," next_line_rescue_or_ensure? ","node last_line ","node last_line + + ","node last_line + ","heredoc_node children size ","heredoc_node children "," last_argument "," last_argument_is_heredoc? "," correct_style? "," next_node last_line + + _empty? ","node parent single_node last_line + + ? "," next_node last_line + + _rescue_or_ensure? ","node last_node last_line + +  ","node last_node last_line + +  + + ","node last_node last_line + +  + "," last_argument  children size "," last_argument  children "]}," RuboCop Cop Style EmptyElse base_node":{"type":"method","name":"base_node","children":[],"call":["parent loc end ","parent loc ","node each_ancestor find "," lambda ","node each_ancestor ","node elsif? ","node case_type? "]}," RuboCop Cop Style EachWithObject whole_line_expression":{"type":"method","name":"whole_line_expression","children":[],"call":[" range_by_whole_lines ","node loc expression ","node loc ","node source_range "]}," RuboCop Cop Style EachWithObject return_value_occupies_whole_line?":{"type":"method","name":"return_value_occupies_whole_line?","children":[],"call":[" whole_line_expression source strip == ","node source "," whole_line_expression source strip "," whole_line_expression source "," whole_line_expression "]}," RuboCop Cop Security Open on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," safe? "," open? ","node loc selector ","node loc "," format ","receiver source "]}," RuboCop Cop Security Open safe?":{"type":"method","name":"safe?","children":[],"call":[" safe? ","node child_nodes first ","node child_nodes ","node method_name == ","node method_name ","node send_type? ","node dstr_type? ","node str_content start_with? ! ","node str_content start_with? ","node str_content ","node str_content empty? ! ","node str_content empty? ","node str_type? ","node children first ","node children "," composite_string? "," safe_argument? "," simple_string? "]}," RuboCop Cop Rails Presence ignore_if_node?":{"type":"method","name":"ignore_if_node?","children":[],"call":["node elsif? "]}," RuboCop Cop Rails HttpPositionalArguments parentheses_format":{"type":"method","name":"parentheses_format","children":[],"call":[" parentheses? "]}," RuboCop Cop Rails ActiveRecordAliases autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","ALIASES  [] to_s ","ALIASES  [] ","node method_name ","node loc selector ","node loc "," lambda "]}," RuboCop Cop Rails ActiveRecordAliases on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format ","node method? ","ALIASES  each "]}," RuboCop Cop Naming UncommunicativeMethodParamName on_def":{"type":"method","name":"on_def","children":[],"call":[" check ","node arguments ","node arguments? "]}," RuboCop Cop Naming UncommunicativeBlockParamName on_block":{"type":"method","name":"on_block","children":[],"call":[" check ","node arguments ","node arguments? "]}," RuboCop Cop Naming MemoizedInstanceVariableName matches?":{"type":"method","name":"matches?","children":[],"call":["variable_name == ","variable to_s sub ","variable to_s ","ivar_assign children first ","ivar_assign children ","method_name to_s sub ","method_name to_s ","method_name == ","ivar_assign nil? ","method_name to_s delete ","variable_name sub == ","variable_name sub "," valid_leading_underscore? ","method_name sub "," variable_name_candidates include? "," variable_name_candidates ","variable to_s sub  == ","ivar_assign children first _name == ","ivar_assign children first  to_s sub ","ivar_assign children first  to_s ","method_name to_s sub  to_s sub ","method_name to_s delete  to_s sub ","method_name to_s sub  to_s ","method_name to_s delete  to_s ","method_name to_s sub  == ","method_name to_s delete  == ","method_name to_s sub  to_s delete ","method_name to_s delete  to_s delete ","variable to_s sub  sub == ","ivar_assign children first _name sub == ","variable to_s sub  sub ","ivar_assign children first _name sub ","method_name to_s sub  sub ","method_name to_s delete  sub "," variable to_s sub _candidates include? "," ivar_assign children first _name_candidates include? "," variable to_s sub _candidates "," ivar_assign children first _name_candidates "]}," RuboCop Cop Naming MemoizedInstanceVariableName on_def":{"type":"method","name":"on_def","children":[],"call":[" add_offense ","ivar_assign source_range "," format ","ivar_assign children first to_s ","ivar_assign children first ","ivar_assign children "," matches? "," memoized? ","method_name to_s delete ","method_name to_s "," suggested_var "," message "]}," RuboCop Cop Naming MemoizedInstanceVariableName node_pattern":{"type":"method","name":"node_pattern","children":[],"call":[]}," RuboCop Cop UncommunicativeName min_length":{"type":"method","name":"min_length","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop UncommunicativeName allow_nums":{"type":"method","name":"allow_nums","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop UncommunicativeName forbidden_names":{"type":"method","name":"forbidden_names","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop UncommunicativeName allowed_names":{"type":"method","name":"allowed_names","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop UncommunicativeName forbidden_offense":{"type":"method","name":"forbidden_offense","children":[],"call":[" add_offense "," format "," name_type "]}," RuboCop Cop UncommunicativeName arg_range":{"type":"method","name":"arg_range","children":[],"call":["Parser Source Range  new ","begin_pos + "," processed_source buffer "," processed_source ","arg source_range begin_pos ","arg source_range ","arg source_range begin_pos  + ","arg source_range arg source_range begin_pos  "]}," RuboCop Cop UncommunicativeName long_enough?":{"type":"method","name":"long_enough?","children":[],"call":["name size >= "," min_length ","name size "]}," RuboCop Cop UncommunicativeName length_offense":{"type":"method","name":"length_offense","children":[],"call":[" add_offense "," format "," min_length "," name_type capitalize "," name_type "]}," RuboCop Cop UncommunicativeName ends_with_num?":{"type":"method","name":"ends_with_num?","children":[],"call":["name [] =~ ","name [] ","(str \"\\\\d\") match? "]}," RuboCop Cop UncommunicativeName num_offense":{"type":"method","name":"num_offense","children":[],"call":[" add_offense "," format "," name_type "]}," RuboCop Cop UncommunicativeName name_type":{"type":"method","name":"name_type","children":[],"call":["node type "]}," RuboCop Cop UncommunicativeName uppercase?":{"type":"method","name":"uppercase?","children":[],"call":["name =~ ","(str \"[[:upper:]]\") match? "]}," RuboCop Cop UncommunicativeName case_offense":{"type":"method","name":"case_offense","children":[],"call":[" add_offense "," format "," name_type "]}," RuboCop Cop UncommunicativeName issue_offenses":{"type":"method","name":"issue_offenses","children":[],"call":[" num_offense "," ends_with_num? "," allow_nums "," length_offense "," long_enough? "," case_offense "," uppercase? "," forbidden_offense "," forbidden_names include? "," forbidden_names "]}," RuboCop Cop UncommunicativeName check":{"type":"method","name":"check","children":[],"call":[" issue_offenses "," arg_range ","name size "," allowed_names include? "," allowed_names ","name empty? ","arg restarg_type? ","arg children first to_s ","arg children first ","arg children ","args each ","arg kwrestarg_type? ","full_name gsub ","full_name == ","name_child to_s ","name_child nil? ","full_name size "," arg_ arg_range  ","arg children first to_s  size ","full_name gsub  size "," allowed_arg children first to_s s include? "," allowed_full_name gsub s include? "," allowed_arg children first to_s s "," allowed_full_name gsub s ","arg children first to_s  empty? ","full_name gsub  empty? ","full_arg children first to_s  gsub ","full_full_name gsub  gsub ","arg children first to_s  gsub ","name_child to_s  gsub ","full_arg children first to_s  == ","full_full_name gsub  == ","arg children first to_s  == ","name_child to_s  == ","arg children first to_s _child to_s ","full_name gsub _child to_s ","arg children first  to_s ","arg children first to_s _child nil? ","full_name gsub _child nil? ","arg children first  nil? ","full_arg children first to_s  size ","full_full_name gsub  size ","name_child to_s  size "]}," RuboCop Cop TrailingComma check_literal":{"type":"method","name":"check_literal","children":[],"call":[" check ","node loc end begin_pos ","node loc end ","node loc ","node children last source_range end_pos ","node children last source_range ","node children last ","node children "," brackets? ","node children empty? "]}," RuboCop Cop TrailingBody first_part_of":{"type":"method","name":"first_part_of","children":[],"call":["body source_range ","body children first source_range ","body children first ","body children ","body begin_type? "]}," RuboCop Cop TrailingBody body_on_first_line?":{"type":"method","name":"body_on_first_line?","children":[],"call":["node source_range first_line == ","body source_range first_line ","body source_range ","node source_range first_line ","node source_range "," same_line? "]}," RuboCop Cop TrailingBody trailing_body?":{"type":"method","name":"trailing_body?","children":[],"call":[" body_on_first_line? ","node multiline? ","node to_a reverse [] ","node to_a reverse ","node to_a "," node to_a reverse [] _on_first_line? "]}," RuboCop Cop SurroundingSpace no_space_between?":{"type":"method","name":"no_space_between?","children":[],"call":["left_bracket_token end_pos == ","right_bracket_token begin_pos ","left_bracket_token end_pos "]}," RuboCop Cop SurroundingSpace offending_empty_no_space?":{"type":"method","name":"offending_empty_no_space?","children":[],"call":[" no_space_between? ! "," no_space_between? ","config == "," no_character_between? ! "," no_character_between? "]}," RuboCop Cop SurroundingSpace offending_empty_space?":{"type":"method","name":"offending_empty_space?","children":[],"call":[" space_between? ! "," space_between? ","config == "]}," RuboCop Cop SurroundingSpace empty_brackets?":{"type":"method","name":"empty_brackets?","children":[],"call":["left_index == ","right_index - "," processed_source tokens index "," processed_source tokens "," processed_source ","tokens index "," processed_source tokens index  == ","tokens index  == "," processed_source tokens index  - ","tokens index  - "]}," RuboCop Cop SurroundingSpace empty_offense":{"type":"method","name":"empty_offense","children":[],"call":[" add_offense "," format "," autocorrect "]}," RuboCop Cop SurroundingSpace empty_offenses":{"type":"method","name":"empty_offenses","children":[],"call":[" empty_offense "," offending_empty_no_space? "," empty_config "," offending_empty_space? "," range_between ","right end_pos ","left begin_pos ","  range_between _between "]}," RuboCop Cop RangeHelp move_pos":{"type":"method","name":"move_pos","children":[],"call":["pos < ","src [] =~ ","src [] ","pos + ","step == ","pos negative? ","regexp match? "]}," RuboCop Cop RangeHelp final_pos":{"type":"method","name":"final_pos","children":[],"call":[" move_pos "," move_pos_str "," move_ move_pos  "," move_ move_pos_str  "," move_ move_pos _str "," move_ move_pos_str _str "]}," RuboCop Cop RangeHelp directions":{"type":"method","name":"directions","children":[],"call":["side == "]}," RuboCop Cop RangeHelp range_by_whole_lines":{"type":"method","name":"range_by_whole_lines","children":[],"call":["Parser Source Range  new ","end_pos + ","last_line length - ","range last_column ","last_line length ","range end_pos ","buffer source_line ","range last_line ","begin_pos - ","range column ","range begin_pos ","@processed_source buffer ","range adjust intersect ","buffer source_range ","range adjust ","range column -@ ","range end_pos  + ","buffer source_line  length - ","buffer source_line  length ","range range end_pos  ","@processed_source buffer  source_line ","range buffer source_line  ","range begin_pos  - ","range range begin_pos  ","@processed_source @processed_source buffer  ","@processed_source buffer  source_range "]}," RuboCop Cop RangeHelp range_with_surrounding_space":{"type":"method","name":"range_with_surrounding_space","children":[],"call":["Parser Source Range  new "," final_pos ","range end_pos ","range begin_pos "," directions ","buffer source ","@processed_source buffer ","range_positional == ","range  final_pos  ","range range end_pos  ","range range begin_pos  ","@processed_source buffer  source ","@processed_source @processed_source buffer  "]}," RuboCop Cop RangeHelp range_with_surrounding_comma":{"type":"method","name":"range_with_surrounding_comma","children":[],"call":["Parser Source Range  new "," move_pos ","range end_pos ","range begin_pos "," directions ","buffer source ","@processed_source buffer ","range  move_pos  ","range range end_pos  ","range range begin_pos  ","@processed_source buffer  source ","@processed_source @processed_source buffer  "]}," RuboCop Cop RangeHelp range_between":{"type":"method","name":"range_between","children":[],"call":["Parser Source Range  new "," processed_source buffer "," processed_source "]}," RuboCop Cop RangeHelp source_range":{"type":"method","name":"source_range","children":[],"call":["Parser Source Range  new ","begin_pos + ","line_begin_pos + ","source_buffer line_range begin_pos ","source_buffer line_range ","line_number zero? ","column size ","column begin ","column is_a? ","line_begin_pos +  + ","line_line_begin_pos +  + ","source_buffer line_range begin_pos  + ","source_buffer line_range line_begin_pos +  "]}," RuboCop Cop PrecedingFollowingAlignment aligned_comment_lines":{"type":"method","name":"aligned_comment_lines","children":[],"call":["(send\n  (send\n    (send\n      (send nil :processed_source) :comments) :map\n    (block-pass\n      (sym :loc))) :select) map "," begins_its_line? ","r expression "," processed_source comments map select "," processed_source comments map "," processed_source comments "," processed_source "]}," RuboCop Cop PercentLiteral end_content":{"type":"method","name":"end_content","children":[],"call":["\n + ","result [] ","(str \"\\\\A(\\\\s*)\\\\]\") match ","source split last ","source split ","(str \"\\A(\\s*)\\]\") match  [] "]}," RuboCop Cop PercentLiteral escaped_content":{"type":"method","name":"escaped_content","children":[],"call":["content gsub! ","delimiters each "," escape_string ","word_node children first to_s ","word_node children first ","word_node children "," escape_string  gsub! ","word_node children first to_s  gsub! "]}," RuboCop Cop PercentLiteral line_breaks":{"type":"method","name":"line_breaks","children":[],"call":["\n + ","lines join split first ","lines join split ","node source ","lines join ","source_in_lines [] ","node first_line - + ","node first_line - ","node first_line ","previous_line_number - + ","previous_line_number - ","node first_line == ","source split ","previous_line_num - + ","previous_line_num - ","node_idx zero? ","source_in_lines []  join split first ","source_in_lines []  join split ","source_in_lines []  join ","source_in_source_in_lines []  [] ","source split  [] "]}," RuboCop Cop PercentLiteral autocorrect_multiline_words":{"type":"method","name":"autocorrect_multiline_words","children":[],"call":["contents join ","contents << "," end_content ","node source ","line_breaks + "," escaped_content ","word_node first_line "," line_breaks ","node children map ","node children ","node first_line ","node children map with_index "," escaped_content s join "," escaped_content s << "," end_ escaped_content  "," line_breaks  + "," escaped_ escaped_content  ","  line_breaks  "]}," RuboCop Cop PercentLiteral new_contents":{"type":"method","name":"new_contents","children":[],"call":[" autocorrect_words "," autocorrect_multiline_words ","node multiline? "]}," RuboCop Cop NilMethods whitelist":{"type":"method","name":"whitelist","children":[],"call":[" cop_config [] map "," cop_config [] "," cop_config "]}," RuboCop Cop NilMethods nil_methods":{"type":"method","name":"nil_methods","children":[],"call":[" methods + "," whitelist "," methods "," methods + + "," other_stdlib_methods "," allowed_methods "," allowed_methods map "]}," RuboCop Cop MultilineExpressionIndentation within_node?":{"type":"method","name":"within_node?","children":[],"call":["i end_pos <= ","o end_pos ","i end_pos ","i begin_pos >= ","o begin_pos ","i begin_pos ","inner source_range ","inner is_a? ","outer source_range ","outer is_a? ","inner source_range  end_pos <= ","i end_pouter source_range s <= ","outer source_range  end_pouter source_range s ","inner source_range  end_pos ","i end_pouter source_range s ","inner source_range  beginner source_range n_pos >= ","i begin_pouter source_range s >= ","o beginner source_range n_pos ","outer source_range  begin_pouter source_range s ","inner source_range  beginner source_range n_pos ","i begin_pouter source_range s ","inner source_range nner source_range ","inner souter source_range urce_range ","inner source_range nner inner source_range s_a? ","outer source_range uter souter source_range urce_range ","outer inner source_range s_a? ","outer source_range uter is_a? "]}," RuboCop Cop EndKeywordAlignment effective_column":{"type":"method","name":"effective_column","children":[],"call":["range column ","range column - ","@processed_source raw_source codepoints first == ","@processed_source raw_source codepoints first ","@processed_source raw_source codepoints ","@processed_source raw_source ","range line == ","range line "]}," RuboCop Cop DocumentationComment precede?":{"type":"method","name":"precede?","children":[],"call":["node2 loc line - == ","node2 loc line - ","node1 loc line ","node1 loc ","node2 loc line ","node2 loc "]}," RuboCop Cop DefNode stripped_source_upto":{"type":"method","name":"stripped_source_upto","children":[],"call":[" processed_source [] map "," processed_source [] "," processed_source "]}," RuboCop Cop Alignment end_of_line_comment":{"type":"method","name":"end_of_line_comment","children":[],"call":["c loc line == ","c loc line ","c loc "," processed_source find_comment "," processed_source "," processed_source line_with_comment? "]}," RuboCop Cop Lint Void check_nonmutating":{"type":"method","name":"check_nonmutating","children":[],"call":[" add_offense "," format ","node method_name ","NONMUTATING_METHODS  include? ","node send_type? ","METHODS_REPLACABLE_BY_EACH  include? ","node respond_to? ","METHODS_REPLACEABLE_BY_EACH  include? "," autocorrect_nonmutating_send ","node numblock_type? ! ","node numblock_type? ","node block_type? ! ","node block_type? ","node send_type? ! ","node node method_name  "]}," RuboCop Cop Lint UnneededCopEnableDirective range_to_remove":{"type":"method","name":"range_to_remove","children":[],"call":["range_class new ","comment loc expression end_pos ","comment loc expression ","comment loc ","start + + ","start + ","start + - "," processed_source buffer "," processed_source "," comment_start "," comment_start  + + "," comment_start  + "," comment_start  + - "," processed_source  processed_source buffer  "," comment_ comment_start  "]}," RuboCop Cop Lint UnneededCopEnableDirective range_with_comma":{"type":"method","name":"range_with_comma","children":[],"call":[" range_to_remove ","source [] == ","source [] ","begin_pos - "," reposition ","begin_pos + ","name size "," cop_name_indention ","comment loc expression source ","comment loc expression ","comment loc ","comment loc expression source  [] == ","comment loc expression source  [] "," reposition  - "," cop_name_indention  - "," reposition  + "," cop_name_indention  + ","comment loc expression comment loc expression source  "]}," RuboCop Cop Lint UnneededCopEnableDirective cop_name_indention":{"type":"method","name":"cop_name_indention","children":[],"call":["comment text index ","comment text "]}," RuboCop Cop Lint UnneededCopEnableDirective comment_start":{"type":"method","name":"comment_start","children":[],"call":["comment loc expression begin_pos ","comment loc expression ","comment loc "]}," RuboCop Cop Lint UnneededCopEnableDirective range_of_offense":{"type":"method","name":"range_of_offense","children":[],"call":[" range_between ","start_pos + ","name size "," comment_start + "," cop_name_indention "," comment_start "," comment_start +  + "]}," RuboCop Cop Lint UnneededCopEnableDirective autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove "," range_with_comma "," lambda "]}," RuboCop Cop Lint UnneededCopEnableDirective investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense "," format "," range_of_offense ","offenses each ","processed_source comment_config extra_enabled_comments ","processed_source comment_config ","processed_source blank? "," all_or_name ","processed_source comment_config extra_enabled_comments  each "]}," RuboCop Cop Lint UnneededCopDisableDirective ends_its_line?":{"type":"method","name":"ends_its_line?","children":[],"call":["(send\n  (lvar :line) :=~\n  (regexp\n    (str \"\\\\s*\\\\z\")\n    (regopt))) == ","range last_column ","line =~ ","range source_buffer source_line ","range last_line ","range source_buffer ","(send\n  (lvar :range source_buffer source_line ) :=~\n  (regexp\n    (str \"\\\\s*\\\\z\")\n    (regopt))) == ","range source_buffer source_line  =~ ","range source_buffer source_range source_buffer source_line  ","range last_range source_buffer source_line  "]}," RuboCop Cop Lint UnneededCopDisableDirective all_cop_names":{"type":"method","name":"all_cop_names","children":[],"call":["Cop  registry names ","Cop  registry "]}," RuboCop Cop Lint UnneededCopDisableDirective collect_variable_like_names":{"type":"method","name":"collect_variable_like_names","children":[],"call":["scope << "," all_cop_names each "," all_cop_names "]}," RuboCop Cop Lint UnneededCopDisableDirective describe":{"type":"method","name":"describe","children":[],"call":[" find_similar_name "," all_cop_names include? "," all_cop_names ","cop == "," find_ find_similar_name _name "]}," RuboCop Cop Lint UnneededCopDisableDirective trailing_range?":{"type":"method","name":"trailing_range?","children":[],"call":["intervening =~ ","(send\n  (send\n    (block\n      (send\n        (lvar :ranges) :drop_while)\n      (args\n        (arg :r))\n      (send\n        (send\n          (lvar :r) :equal?\n          (lvar :range)) :!)) :each_cons\n    (int 2)) :map) all? ","range1 end join source ","range1 end join ","range2 begin ","range1 end ","(send\n  (lvar :ranges) :drop_while) each_cons map ","(send\n  (lvar :ranges) :drop_while) each_cons ","r equal? ! ","r equal? ","ranges drop_while "]}," RuboCop Cop Lint UnneededCopDisableDirective matching_range":{"type":"method","name":"matching_range","children":[],"call":["Parser Source Range  new ","offset + ","needle size ","haystack source_buffer ","haystack begin_pos ","haystack source =~ ","Regexp  new ","Regexp  escape ","haystack source "]}," RuboCop Cop Lint UnneededCopDisableDirective cop_range":{"type":"method","name":"cop_range","children":[],"call":[" raise ","comment text "," matching_range ","Badge  parse cop_name ","Badge  parse ","comment loc expression ","comment loc "]}," RuboCop Cop Lint UnneededCopDisableDirective add_offense_for_some_cops":{"type":"method","name":"add_offense_for_some_cops","children":[],"call":[" add_offense "," describe ","cop_ranges each ","cop_ranges map ","r begin_pos ","cop_ranges sort_by! "," cop_range ","cops map "]}," RuboCop Cop Lint UnneededCopDisableDirective add_offense_for_entire_comment":{"type":"method","name":"add_offense_for_entire_comment","children":[],"call":[" add_offense ","cop_list join "," describe ","cops sort map ","cops sort ","comment loc expression ","comment loc "]}," RuboCop Cop Lint UnneededCopDisableDirective add_offenses":{"type":"method","name":"add_offenses","children":[],"call":[" add_offense_for_some_cops "," add_offense_for_entire_comment "," directive_count == ","cops size "," directive_count "," all_disabled? ","unneeded_cops each "]}," RuboCop Cop Lint UnneededCopDisableDirective directive_count":{"type":"method","name":"directive_count","children":[],"call":["cops_string split size ","cops_string split ","match captures ","comment text match ","comment text ","comment text match  captures ","comment text comment text match  "]}," RuboCop Cop Lint UnneededCopDisableDirective ignore_offense?":{"type":"method","name":"ignore_offense?","children":[],"call":["range cover? ","line_range max ","line_range min ","disabled_ranges any? "]}," RuboCop Cop Lint UnneededCopDisableDirective all_disabled?":{"type":"method","name":"all_disabled?","children":[],"call":["comment text =~ ","comment text "]}," RuboCop Cop Lint UnneededCopDisableDirective find_unneeded":{"type":"method","name":"find_unneeded","children":[],"call":["line_range cover? ","o line ","cop_offenses none? ","o cop_name == ","o cop_name ","offenses select ","offenses none? ","line_range last != ","next_line_range first ","line_range last ","next_line_range nil? "," all_disabled? "]}," RuboCop Cop Lint UnneededCopDisableDirective each_already_disabled":{"type":"method","name":"each_already_disabled","children":[],"call":[" all_disabled? ! "," all_disabled? ","c loc line == ","range begin ","c loc line ","c loc ","comments find ","previous_range end != ","previous_range end "," ignore_offense? ","line_ranges each_cons "]}," RuboCop Cop Lint UnneededCopDisableDirective each_line_range":{"type":"method","name":"each_line_range","children":[],"call":[" find_unneeded ","line_ranges [] ","ix + "," ignore_offense? ","c loc line == ","line_range begin ","c loc line ","c loc ","comments find ","line_ranges each_with_index "]}," RuboCop Cop Lint UnneededCopDisableDirective each_unneeded_disable":{"type":"method","name":"each_unneeded_disable","children":[],"call":[" each_line_range "," each_already_disabled ","cop_disabled_line_ranges each ","cop_disabled_line_ranges [] "]}," RuboCop Cop Lint UnneededCopDisableDirective directive_range_in_list":{"type":"method","name":"directive_range_in_list","children":[],"call":[" range_with_surrounding_space "," range_with_surrounding_comma "," trailing_range? "," ends_its_line? ","ranges last ","  range_with_surrounding_comma _with_surrounding_space ","  range_with_surrounding_space _with_surrounding_space ","  range_with_surrounding_comma _with_surrounding_comma ","  range_with_surrounding_space _with_surrounding_comma "," trailing_ range_with_surrounding_comma ? "," trailing_ range_with_surrounding_space ? "," range_with_surrounding_comma s last "," range_with_surrounding_space s last "]}," RuboCop Cop Lint UnneededCopDisableDirective comment_range_with_surrounding_space":{"type":"method","name":"comment_range_with_surrounding_space","children":[],"call":[" range_with_surrounding_space ","original_begin zero? ","range begin_pos ","  range_with_surrounding_space _with_surrounding_space ","range begin_pos  zero? "," range_with_surrounding_space  begin_pos "]}," RuboCop Cop Lint UnneededCopDisableDirective autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove "," directive_range_in_list "," comment_range_with_surrounding_space ","range source start_with? ","range source "," lambda "," directive_ directive_range_in_list _in_list "," directive_ comment_range_with_surrounding_space _in_list "," comment_ directive_range_in_list _with_surrounding_space "," comment_ comment_range_with_surrounding_space _with_surrounding_space "," directive_range_in_list  source start_with? "," comment_range_with_surrounding_space  source start_with? "," directive_range_in_list  source "," comment_range_with_surrounding_space  source "]}," RuboCop Cop Lint UnneededCopDisableDirective check":{"type":"method","name":"check","children":[],"call":[" add_offenses ","unneeded_cops [] add ","unneeded_cops [] "," each_unneeded_disable ","h []= ","Set  new ","Hash  new "]}," RuboCop Cop Lint SafeNavigationChain method_chain":{"type":"method","name":"method_chain","children":[],"call":["chain parent ","(sym :send) include? ","chain parent type ","chain send_type? ","chain parent  parent ","chain parent  parent type ","chain parent  send_type? "]}," RuboCop Cop Lint OrderedMagicComments magic_comments":{"type":"method","name":"magic_comments","children":[],"call":["MagicComment  parse "," leading_comment_lines map "," leading_comment_lines "]}," RuboCop Cop Lint OrderedMagicComments magic_comment_lines":{"type":"method","name":"magic_comment_lines","children":[],"call":["lines [] ","lines []= ","comment frozen_string_literal_specified? ","comment encoding_specified? "," magic_comments each with_index "," magic_comments each "," magic_comments "," leading_magic_comments each with_index "," leading_magic_comments each "," leading_magic_comments "]}," RuboCop Cop Lint OrderedMagicComments autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","range1 source ","range2 source "," lambda "," processed_source buffer line_range ","frozen_string_literal_line + "," processed_source buffer "," processed_source ","encoding_line + "," magic_comment_lines "," processed_source buffer line_range  source "]}," RuboCop Cop Lint OrderedMagicComments investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense ","processed_source buffer line_range ","encoding_line + ","processed_source buffer ","encoding_line < "," magic_comment_lines ","processed_source buffer source empty? ","processed_source buffer source ","processed_source buffer line_processed_source buffer line_range  "]}," RuboCop Cop Lint NumberConversion correct_method":{"type":"method","name":"correct_method","children":[],"call":[" format ","receiver source ","CONVERSION_METHOD_CLASS_MAPPING  [] ","node method_name "]}," RuboCop Cop Lint NumberConversion on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format "," correct_method ","receiver source "," to_method "," date_time_object? ","receiver nil? ","corrector replace ","node receiver "," ignore_receiver? "," handle_as_symbol "," handle_conversion_method "]}," RuboCop Cop Lint ImplicitStringConcatenation string_literals?":{"type":"method","name":"string_literals?","children":[],"call":[" string_literal? "]}," RuboCop Cop Lint BigDecimalNew autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove ","node loc dot ","node loc ","node loc selector "," lambda "]}," RuboCop Cop Lint BigDecimalNew on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format "," big_decimal_new ","corrector remove ","node loc dot ","node loc ","node loc selector ","node method? "]}," RuboCop Cop Layout Tab string_literal_ranges":{"type":"method","name":"string_literal_ranges","children":[],"call":["ranges << ","loc expression ","loc heredoc_body ","str heredoc? ","str location ","ast each_node each_with_object ","Set  new ","ast each_node ","ast nil? ","loc begin ","loc respond_to? ","loc expression s << ","loc heredoc_body s << ","str location  expression ","str location  heredoc_body ","str str location ation ","str location  begin ","str location  respond_to? "]}," RuboCop Cop Layout Tab in_string_literal?":{"type":"method","name":"in_string_literal?","children":[],"call":["range last_column >= ","range last_column ","range last_line == ","range last_line ","range line != ","range line ","line < ","range line < ","range column <= ","range column ","range line == ","ranges any? ","range contains? "]}," RuboCop Cop Layout SpaceInsideReferenceBrackets empty_config":{"type":"method","name":"empty_config","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Layout SpaceInsideReferenceBrackets bracket_method?":{"type":"method","name":"bracket_method?","children":[],"call":["BRACKET_METHODS  include? ","node method_name "]}," RuboCop Cop Layout EndAlignment start_line_range":{"type":"method","name":"start_line_range","children":[],"call":[" range_between ","range begin_pos + ","source =~ ","range begin_pos ","buffer line_range ","expr line ","buffer source_line ","expr source_buffer ","node source_range "," buffer line_range _between ","buffer line_range  begin_pos + ","buffer source_line  =~ ","buffer line_range  begin_pos ","buffer line_buffer line_range  ","expr source_buffer  line_range ","node source_range  line ","buffer buffer source_line _line ","expr source_buffer  source_line ","expr buffer source_line _buffer ","expr source_expr source_buffer  ","node source_range  source_buffer ","node source_buffer line_range  ","node buffer source_line _range "]}," RuboCop Cop Layout EndAlignment alignment_node_for_variable_style":{"type":"method","name":"alignment_node_for_variable_style","children":[],"call":[" line_break_before_keyword? ! "," line_break_before_keyword? ","assignment source_range ","node ancestors find ","node ancestors ","node parent ","node argument? ","node case_type? "," assignment_or_operator_method ","node loc line == ","node parent loc line ","node parent loc ","node loc line ","node loc "," same_line? ","node case_match_type? ","node ancestors find  source_range "," assignment_or_operator_method  source_range "," node ancestors find _or_operator_method ","  assignment_or_operator_method _or_operator_method "]}," RuboCop Cop Layout EndAlignment alignment_node":{"type":"method","name":"alignment_node","children":[],"call":[" start_line_range "," alignment_node_for_variable_style "," style == "," style "]}," RuboCop Cop Layout EndAlignment check_other_alignment":{"type":"method","name":"check_other_alignment","children":[],"call":[" check_end_kw_alignment "," start_line_range ","node loc keyword ","node loc "]}," RuboCop Cop Layout EndAlignment asgn_variable_align_with":{"type":"method","name":"asgn_variable_align_with","children":[],"call":["inner_node loc keyword ","inner_node loc "," range_between ","inner_node loc keyword end_pos ","expr begin_pos "," line_break_before_keyword? ! "," line_break_before_keyword? ","outer_node source_range ","outer_node source_range  begin_pos "]}," RuboCop Cop Layout EndAlignment check_asgn_alignment":{"type":"method","name":"check_asgn_alignment","children":[],"call":[" ignore_node "," check_end_kw_alignment "," asgn_variable_align_with "," start_line_range ","inner_node loc keyword ","inner_node loc "]}," RuboCop Cop Layout EndAlignment check_assignment":{"type":"method","name":"check_assignment","children":[],"call":[" check_asgn_alignment ","rhs ternary? ","rhs if_type? ","CONDITIONAL_NODES  include? ","rhs type "," first_part_of_call_chain ","rhs conditional? "," first_part_of_call_chain  ternary? "," first_part_of_call_chain  if_type? "," first_part_of_call_chain  type "," first_part_of_call_chain  conditional? "]}," RuboCop Cop Layout EndAlignment autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["AlignmentCorrector  align_end "," alignment_node "," processed_source "]}," RuboCop Cop Layout EndAlignment on_case":{"type":"method","name":"on_case","children":[],"call":[" check_other_alignment "," check_asgn_alignment ","node parent ","node argument? "]}," RuboCop Cop Layout EndAlignment on_until":{"type":"method","name":"on_until","children":[],"call":[" check_other_alignment "]}," RuboCop Cop Layout EndAlignment on_while":{"type":"method","name":"on_while","children":[],"call":[" check_other_alignment "]}," RuboCop Cop Layout EndAlignment on_if":{"type":"method","name":"on_if","children":[],"call":[" check_other_alignment ","node ternary? "]}," RuboCop Cop Layout EndAlignment on_module":{"type":"method","name":"on_module","children":[],"call":[" check_other_alignment "]}," RuboCop Cop Layout EndAlignment on_class":{"type":"method","name":"on_class","children":[],"call":[" check_other_alignment "]}," RuboCop Cop Layout EmptyLinesAroundArguments outer_lines":{"type":"method","name":"outer_lines","children":[],"call":["node last_line + ","node last_line ","node first_line - ","node first_line "]}," RuboCop Cop Layout EmptyLinesAroundArguments inner_lines":{"type":"method","name":"inner_lines","children":[],"call":["node last_line - ","node last_line ","node first_line + ","node first_line "]}," RuboCop Cop Layout EmptyLinesAroundArguments line_numbers":{"type":"method","name":"line_numbers","children":[],"call":["line_nums flatten uniq - - "," outer_lines ","line_nums flatten uniq - ","inner_lines flatten ","line_nums flatten uniq ","line_nums flatten ","inner_lines << "," inner_lines ","arg_node multiline? ","lines << ","node arguments each_with_object ","node arguments "]}," RuboCop Cop Layout EmptyComment allow_margin_comment?":{"type":"method","name":"allow_margin_comment?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Layout EmptyComment allow_border_comment?":{"type":"method","name":"allow_border_comment?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Layout EmptyComment comment_text":{"type":"method","name":"comment_text","children":[],"call":["comment text strip ","comment text "]}," RuboCop Cop Layout EmptyComment empty_comment_only?":{"type":"method","name":"empty_comment_only?","children":[],"call":["(send\n  (lvar :comment_text) :=~\n  (lvar :empty_comment_pattern)) nil? ! ","(send\n  (lvar :comment_text) :=~\n  (lvar :empty_comment_pattern)) nil? ","comment_text =~ "," allow_border_comment? ","empty_comment_pattern match? "]}," RuboCop Cop Layout EmptyComment concat_consecutive_comments":{"type":"method","name":"concat_consecutive_comments","children":[],"call":["comment loc line ","comment loc ","concatenated_comments << "," comment_text dup "," comment_text ","last_concatenated_comment [] << ","last_concatenated_comment [] ","concatenated_comments last ","comment loc line == ","prev_line next ","comments each_with_object ","(send\n  (lvar :chunk) :map) join ","chunk map ","consecutive_comments map ","i loc line succ == ","j loc line ","j loc ","i loc line succ ","i loc line ","i loc ","comments chunk_while ","concatenated_comments last  [] << ","concatenated_comments last  [] ","comment loc line  next "]}," RuboCop Cop Layout EmptyComment autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove "," range_by_whole_lines ","node loc expression ","node loc "," lambda "," range_with_surrounding_space ","node loc line == ","previous_token line ","node loc line "," previous_token "," same_line? ","node source_range ","  range_by_whole_lines _by_whole_lines ","  range_with_surrounding_space _by_whole_lines ","  range_by_whole_lines _with_surrounding_space ","  range_with_surrounding_space _with_surrounding_space "," previous_token  line ","  previous_token  ","node source_ range_by_whole_lines  ","node source_ range_with_surrounding_space  "]}," RuboCop Cop Layout EmptyComment investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense "," empty_comment_only? "," comment_text ","processed_source comments each ","processed_source comments ","comment [] each ","comment [] ","comments each "," concat_consecutive_comments "," allow_margin_comment? "," autocorrect ","processed_source  concat_consecutive_comments  each ","processed_source  concat_consecutive_comments  "," concat_consecutive_comments  each "," concat_consecutive_ concat_consecutive_comments  "]}," RuboCop Cop Layout DefEndAlignment autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["AlignmentCorrector  align_end "," processed_source ","node parent ","node parent send_type? "," style == "," style "]}," RuboCop Cop Layout DefEndAlignment on_send":{"type":"method","name":"on_send","children":[],"call":[" ignore_node "," check_end_kw_alignment ","method_def loc keyword ","method_def loc "," range_between ","method_def loc keyword end_pos ","expr begin_pos ","node source_range ","node each_descendant first ","node each_descendant ","node def_modifier? ","node method? ","node def_modifier? ! ","node each_descendant first  loc keyword ","node each_descendant first  loc ","node each_descendant first  loc keyword end_pos ","node source_range  begin_pos "]}," RuboCop Cop Layout DefEndAlignment on_def":{"type":"method","name":"on_def","children":[],"call":[" check_end_kw_in_node "]}," RuboCop Cop Layout ConditionPosition message":{"type":"method","name":"message","children":[],"call":[" format ","node parent keyword ","node parent ","condition parent keyword ","condition parent "]}," RuboCop Cop Layout ConditionPosition check":{"type":"method","name":"check","children":[],"call":[" add_offense ","node condition ","node single_line_condition? ","node modifier_form? ","corrector remove ","corrector insert_after ","condition source ","condition parent loc keyword ","condition parent loc ","condition parent "," range_by_whole_lines ","condition source_range "," message ","node node condition  ","node single_line_node condition ? ","node condition  source ","node condition  parent loc keyword ","node condition  parent loc ","node condition  parent ","  range_by_whole_lines _by_whole_lines ","condition source_ range_by_whole_lines  ","node condition  source_range ","  message  "]}," RuboCop Cop Layout ConditionPosition on_until":{"type":"method","name":"on_until","children":[],"call":[" check "]}," RuboCop Cop Layout ConditionPosition on_while":{"type":"method","name":"on_while","children":[],"call":[" check "]}," RuboCop Cop Layout ConditionPosition on_if":{"type":"method","name":"on_if","children":[],"call":[" check ","node ternary? "]}," RuboCop Cop Layout BlockAlignment remove_space_before":{"type":"method","name":"remove_space_before","children":[],"call":["corrector remove "," lambda "," range_between ","end_pos - ","  range_between _between "]}," RuboCop Cop Layout BlockAlignment add_space_before":{"type":"method","name":"add_space_before","children":[],"call":["corrector insert_before ","  * "," lambda "]}," RuboCop Cop Layout BlockAlignment compute_start_col":{"type":"method","name":"compute_start_col","children":[],"call":["(or\n  (lvar :ancestor_node)\n  (lvar :node)) source_range column ","(or\n  (lvar :ancestor_node)\n  (lvar :node)) source_range ","do_loc source_line =~ ","do_loc source_line ","node loc begin ","node loc "," style == "," style ","node loc begin  source_line =~ ","node loc begin  source_line "]}," RuboCop Cop Layout BlockAlignment format_source_line_column":{"type":"method","name":"format_source_line_column","children":[],"call":["source_line_column [] "]}," RuboCop Cop Layout BlockAlignment alt_start_msg":{"type":"method","name":"alt_start_msg","children":[],"call":[" or  + "," format_source_line_column ","start_loc column == ","source_line_column [] ","start_loc column ","start_loc line == ","start_loc line "," style != "," style "]}," RuboCop Cop Layout BlockAlignment loc_to_source_line_column":{"type":"method","name":"loc_to_source_line_column","children":[],"call":["loc column ","loc line ","loc source lines to_a first chomp ","loc source lines to_a first ","loc source lines to_a ","loc source lines ","loc source "]}," RuboCop Cop Layout BlockAlignment compute_do_source_line_column":{"type":"method","name":"compute_do_source_line_column","children":[],"call":["do_loc line ","match [] "," style == "," style ","end_loc column != ","end_loc column ","match begin ","(str \"\\\\S.*\") match ","do_loc source_line ","node loc begin ","node loc ","node loc begin  line ","(str \"\\S.*\") match  [] ","(str \"\\S.*\") match  begin ","(str \"\\\\S.*\") (str \"\\S.*\") match  ","node loc begin  source_line "]}," RuboCop Cop Layout BlockAlignment format_message":{"type":"method","name":"format_message","children":[],"call":[" format "," alt_start_msg "," format_source_line_column "," loc_to_source_line_column "]}," RuboCop Cop Layout BlockAlignment register_offense":{"type":"method","name":"register_offense","children":[],"call":[" add_offense "," format_message "," loc_to_source_line_column "," style == "," style "," autocorrect "," format_ format_message  "]}," RuboCop Cop Layout BlockAlignment check_block_alignment":{"type":"method","name":"check_block_alignment","children":[],"call":[" register_offense "," compute_do_source_line_column "," style == "," style ","start_loc column != ","end_loc column ","start_loc column ","start_node source_range "," begins_its_line? ","block_node loc end ","block_node loc "," compute_ compute_do_source_line_column  ","start_node source_range  column != ","block_node loc end  column ","start_node source_range  column "]}," RuboCop Cop Layout BlockAlignment disqualified_parent?":{"type":"method","name":"disqualified_parent?","children":[],"call":["parent masgn_type? ! ","parent masgn_type? ","parent first_line != ","node first_line ","parent first_line ","parent loc "]}," RuboCop Cop Layout BlockAlignment end_align_target?":{"type":"method","name":"end_align_target?","children":[],"call":[" block_end_align_target? ! "," block_end_align_target? "," disqualified_parent? "]}," RuboCop Cop Layout BlockAlignment block_end_align_target":{"type":"method","name":"block_end_align_target","children":[],"call":["lineage last "," end_align_target? ","lineage each_cons ","node ancestors "]}," RuboCop Cop Layout BlockAlignment start_for_block_node":{"type":"method","name":"start_for_block_node","children":[],"call":["result masgn_type? ","result op_asgn_type? "," block_end_align_target "," block_end_align_target  masgn_type? "," block_end_align_target  op_asgn_type? "]}," RuboCop Cop Layout BlockAlignment autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" remove_space_before ","delta -@ ","loc_end begin_pos ","delta < "," add_space_before ","delta > ","start_col - ","loc_end column ","node loc end ","node loc "," compute_start_col "," start_for_block_node ","delta negative? ","delta positive? ","start_col -  -@ ","node loc end  begin_pos ","start_col -  < ","start_col -  > "," compute_start_col  - ","node loc end  column "," compute_ compute_start_col  ","start_col -  negative? ","start_col -  positive? "]}," RuboCop Cop Layout BlockAlignment style_parameter_name":{"type":"method","name":"style_parameter_name","children":[],"call":[]}," RuboCop Cop Layout BlockAlignment on_block":{"type":"method","name":"on_block","children":[],"call":[" check_block_alignment "," start_for_block_node "]}," RuboCop Cop SpaceCorrector empty_corrections":{"type":"method","name":"empty_corrections","children":[],"call":["corrector remove "," side_space_range ","left_token pos "," offending_empty_no_space? ","corrector insert_after "," offending_empty_space? "," range_between ","right_token begin_pos ","left_token end_pos "," side_space_ side_space_range  "," side_space_ range_between  ","  side_space_range _between ","  range_between _between "]}," RuboCop Cop LineBreakCorrector semicolon":{"type":"method","name":"semicolon","children":[],"call":[" tokens find "," tokens ","@semicolon [] ","node object_id "," processed_source tokens_within find "," processed_source tokens_within "," processed_source "," compare_by_identity "," trailing_class_definition? ","node body "," same_line? "," processed_source sorted_tokens select find "," processed_source sorted_tokens select "," processed_source sorted_tokens "]}," RuboCop Cop LineBreakCorrector remove_semicolon":{"type":"method","name":"remove_semicolon","children":[],"call":["corrector remove "," semicolon pos "," semicolon "]}," RuboCop Cop LineBreakCorrector move_comment":{"type":"method","name":"move_comment","children":[],"call":["corrector remove ","eol_comment loc expression ","eol_comment loc ","corrector insert_before ","text + + ","  * ","node loc keyword column ","node loc keyword ","node loc ","text + ","node source_range ","eol_comment loc expression source ","eol_comment source ","eol_comment loc expression source  + + ","eol_comment source  + + ","eol_comment loc expression source  + ","eol_comment source  + "]}," RuboCop Cop LineBreakCorrector break_line_before":{"type":"method","name":"break_line_before","children":[],"call":["corrector insert_before ","\n + ","  * ","node loc keyword column + ","indent_steps * ","node loc keyword column ","node loc keyword ","node loc "]}," RuboCop Cop LineBreakCorrector correct_trailing_body":{"type":"method","name":"correct_trailing_body","children":[],"call":[" remove_semicolon "," move_comment "," break_line_before "," end_of_line_comment ","node source_range line ","node source_range "," first_part_of ","node to_a last ","node to_a ","processed_source comment_at_line ","node source_ first_part_of  line ","node source_ first_part_of  "]}," RuboCop Cop Bundler InsecureProtocolSource range":{"type":"method","name":"range","children":[],"call":[" range_between ","node end_pos ","node begin_pos "]}," RuboCop ConfigLoaderResolver remote_file?":{"type":"method","name":"remote_file?","children":[],"call":["uri =~ ","URI DEFAULT_PARSER  make_regexp ","(str \"\\\\A\") match? ","URI DEFAULT_PARSER  make_URI DEFAULT_PARSER  make_regexp p "]}," RuboCop ConfigLoaderResolver should_union?":{"type":"method","name":"should_union?","children":[],"call":["inherit_mode [] include? ","inherit_mode [] ","base_hash [] is_a? ","base_hash [] "," should_merge? "," should_override? ","derived_hash [] "]}," RuboCop ConfigLoaderResolver determine_inherit_mode":{"type":"method","name":"determine_inherit_mode","children":[],"call":["hash [] ","cop_cfg delete ","cop_cfg is_a? ","cop_cfg [] ","hash []  delete ","hash []  is_a? ","hash []  [] "]}," RuboCop ConfigLoaderResolver warn_on_duplicate_setting":{"type":"method","name":"warn_on_duplicate_setting","children":[],"call":[" warn ","opts [] ","PathUtil  smart_path ","inherit_mode include? ","base_hash [] is_a? ","base_hash [] ","opts [] [] "," duplicate_setting? "," puts "]}," RuboCop ConfigLoaderResolver duplicate_setting?":{"type":"method","name":"duplicate_setting?","children":[],"call":["inherited_file start_with? ","Gem  path none? ","Gem  path "," remote_file? ","base_hash [] == ","derived_hash [] ","base_hash [] ","inherited_file nil? "]}," RuboCop Config bundler_lock_file_path":{"type":"method","name":"bundler_lock_file_path","children":[],"call":["File  file? ","File  join ","(str \"gems.locked\") each "," base_dir_for_path_parameters "," loaded_path "," find_file_upwards ","(str \"Gemfile.lock\") each "," base_dir_for_File  join _parameters "," base_dir_for_ find_file_upwards _parameters "," loaded_File  join  "," loaded_ find_file_upwards  "]}," RuboCop Config read_rails_version_from_bundler_lock_file":{"type":"method","name":"read_rails_version_from_bundler_lock_file","children":[],"call":["result captures first to_f ","result captures first ","result captures ","line match ","File  foreach "," bundler_lock_file_path ","line match  captures first to_f ","line match  captures first ","line match  captures "," bundler_ bundler_lock_file_path  "]}," RuboCop Config target_rails_version_from_bundler_lock_file":{"type":"method","name":"target_rails_version_from_bundler_lock_file","children":[],"call":[" read_rails_version_from_bundler_lock_file "]}," RuboCop CommentConfig extra_enabled_comments_with_names":{"type":"method","name":"extra_enabled_comments_with_names","children":[],"call":["extras << ","names [] ","names [] > ","cop_names each "," comment_only_line? ","comment loc expression line ","comment loc expression ","comment loc "," each_directive "," handle_switch "," handle_enable_all "," enable_all? ","disabled ! ","directive enabled_all? ","directive line_number "]}," RuboCop CommentConfig extra_enabled_comments":{"type":"method","name":"extra_enabled_comments","children":[],"call":[" extra_enabled_comments_with_names ","Hash  new ","h []= ","disable_count [] ","cop cop_name "," registry disabled each "," registry disabled "," config "," registry ","Hash  new  [] "]}," RuboCop AST Node parenthesized_call?":{"type":"method","name":"parenthesized_call?","children":[],"call":[" loc begin is? "," loc begin "," loc "," loc respond_to? "]}," RuboCop AST Node node_parts":{"type":"method","name":"node_parts","children":[],"call":[" to_a "]}," RuboCop Cop Style UnpackFirst first_element_range":{"type":"method","name":"first_element_range","children":[],"call":["Parser Source Range  new ","node loc expression end_pos ","node loc expression ","node loc ","unpack_call loc expression end_pos ","unpack_call loc expression ","unpack_call loc ","node loc expression source_buffer ","node source_range end_pos ","node source_range ","unpack_call source_range end_pos ","unpack_call source_range ","node source_range source_buffer "]}," RuboCop Cop Style UnpackFirst autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","unpack_call loc selector ","unpack_call loc ","corrector remove "," first_element_range "," lambda "," unpack_and_first_element? "]}," RuboCop Cop Style UnpackFirst on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format ","range source ","unpack_arg source ","unpack_call receiver source ","unpack_call receiver "," first_element_range "," unpack_and_first_element? ","corrector replace ","unpack_call loc selector ","unpack_call loc ","corrector remove "," first_element_range  source "," first_element_ first_element_range  "]}," RuboCop Cop Style InverseMethods camel_case_constant?":{"type":"method","name":"camel_case_constant?","children":[],"call":["node source =~ ","node source ","node const_type? ","CAMEL_CASE  match? "]}," RuboCop Cop Style InverseMethods possible_class_hierarchy_check?":{"type":"method","name":"possible_class_hierarchy_check?","children":[],"call":[" camel_case_constant? ","rhs first ","rhs size == ","rhs size ","CLASS_COMPARISON_METHODS  include? "]}," RuboCop Cop Style FormatStringToken placeholder_argument?":{"type":"method","name":"placeholder_argument?","children":[],"call":[" placeholder_argument? ","node parent ","node parent pair_type? "]}," RuboCop Cop Style EmptyLineAfterGuardClause next_sibling_parent_empty_or_else?":{"type":"method","name":"next_sibling_parent_empty_or_else?","children":[],"call":["parent else? ","parent if_type? ","next_sibling parent ","next_sibling nil? ","node parent children [] ","node sibling_index + ","node sibling_index ","node parent children ","node parent ","next_sibling parent  else? ","next_sibling parent  if_type? ","next_sibling next_sibling parent  ","node parent children []  parent ","node parent children []  nil? ","node next_sibling parent  children [] ","node next_sibling parent  children ","node next_sibling parent  "]}," RuboCop Cop Style EmptyLineAfterGuardClause next_line_rescue_or_ensure?":{"type":"method","name":"next_line_rescue_or_ensure?","children":[],"call":["parent ensure_type? ","parent rescue_type? ","parent nil? ","node parent ","node parent  ensure_type? ","node parent  rescue_type? ","node parent  nil? ","node node parent  "]}," RuboCop Cop Style Documentation compact_namespace?":{"type":"method","name":"compact_namespace?","children":[],"call":["node loc name source =~ ","node loc name source ","node loc name ","node loc ","(str \"::\") match? ","node loc name source include? "]}," RuboCop Cop Rails HttpStatus NumericStyleChecker whitelisted_symbol?":{"type":"method","name":"whitelisted_symbol?","children":[],"call":["WHITELIST_STATUS  include? "," node value "," node "," node sym_type? "]}," RuboCop Cop Rails HttpStatus NumericStyleChecker symbol":{"type":"method","name":"symbol","children":[],"call":[" node value "," node "]}," RuboCop Cop Rails HttpStatus NumericStyleChecker number":{"type":"method","name":"number","children":[],"call":[" Rack Utils SYMBOL_TO_STATUS_CODE  [] "," symbol "]}," RuboCop Cop Rails HttpStatus NumericStyleChecker preferred_style":{"type":"method","name":"preferred_style","children":[],"call":[" number to_s "," number "]}," RuboCop Cop Rails HttpStatus NumericStyleChecker message":{"type":"method","name":"message","children":[],"call":[" format "," symbol inspect "," symbol "," preferred_style "]}," RuboCop Cop Rails HttpStatus NumericStyleChecker offensive?":{"type":"method","name":"offensive?","children":[],"call":[" whitelisted_symbol? ! "," whitelisted_symbol? "," node int_type? ! "," node int_type? "," node "," permitted_symbol? ! "," permitted_symbol? "]}," RuboCop Cop Rails HttpStatus NumericStyleChecker initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop Cop Rails HttpStatus SymbolicStyleChecker custom_http_status_code?":{"type":"method","name":"custom_http_status_code?","children":[],"call":[" Rack Utils SYMBOL_TO_STATUS_CODE  value? ! "," Rack Utils SYMBOL_TO_STATUS_CODE  value? "," number "," node int_type? "," node "]}," RuboCop Cop Rails HttpStatus SymbolicStyleChecker number":{"type":"method","name":"number","children":[],"call":[" node children first "," node children "," node "]}," RuboCop Cop Rails HttpStatus SymbolicStyleChecker symbol":{"type":"method","name":"symbol","children":[],"call":[" Rack Utils SYMBOL_TO_STATUS_CODE  key "," number "]}," RuboCop Cop Rails HttpStatus SymbolicStyleChecker preferred_style":{"type":"method","name":"preferred_style","children":[],"call":[" symbol inspect "," symbol "]}," RuboCop Cop Rails HttpStatus SymbolicStyleChecker message":{"type":"method","name":"message","children":[],"call":[" format "," number to_s "," number "," preferred_style "]}," RuboCop Cop Rails HttpStatus SymbolicStyleChecker offensive?":{"type":"method","name":"offensive?","children":[],"call":[" custom_http_status_code? ! "," custom_http_status_code? "," node sym_type? ! "," node sym_type? "," node "]}," RuboCop Cop Rails HttpStatus SymbolicStyleChecker initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop Cop Rails HttpStatus checker_class":{"type":"method","name":"checker_class","children":[],"call":[" style "]}," RuboCop Cop Rails HttpStatus autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","checker preferred_style ","node loc expression ","node loc "," checker_class new "," checker_class "," lambda "," checker_class new  preferred_style ","  checker_class new _class new ","  checker_class new _class "]}," RuboCop Cop Rails HttpStatus support_autocorrect?":{"type":"method","name":"support_autocorrect?","children":[],"call":[]}," RuboCop Cop Rails HttpStatus on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","checker message ","checker node ","checker offensive? "," checker_class new "," checker_class "," http_status "," status_code "," checker_class new  message "," checker_class new  node "," checker_class new  offensive? ","  checker_class new _class new ","  checker_class new _class "," http_ status_code  ","  status_code _code "]}," RuboCop Cop Naming ConstantName allowed_assignment?":{"type":"method","name":"allowed_assignment?","children":[],"call":[" class_or_struct_return_method? "," allowed_method_call_on_rhs? ","(sym :block) include? ","value type "," allowed_conditional_expression_on_rhs? "]}," RuboCop Cop Layout IndentHeredoc ruby23_width_message":{"type":"method","name":"ruby23_width_message","children":[],"call":[" format "]}," RuboCop Cop Layout IndentHeredoc ruby23_type_message":{"type":"method","name":"ruby23_type_message","children":[],"call":[" format "]}," RuboCop Cop Layout EmptyComment previous_token":{"type":"method","name":"previous_token","children":[],"call":[" processed_source tokens [] ","index - "," processed_source tokens "," processed_source ","index zero? "," processed_source tokens index "," current_token "," processed_source tokens index  - "," processed_source tokens index  zero? "," processed_source tokens  processed_source tokens index  ","  current_token  "]}," RuboCop Cop Layout EmptyComment current_token":{"type":"method","name":"current_token","children":[],"call":["token line == ","node loc line ","node loc ","token line ","token pos last_column == ","node loc last_column ","token pos last_column ","token pos ","token pos column == ","node loc column ","token pos column "," processed_source find_token "," processed_source ","token pos == ","comment loc expression ","comment loc ","comment source_range "," processed_source tokens find "," processed_source tokens "]}," RuboCop Cop Layout ElseAlignment base_range_of_rescue":{"type":"method","name":"base_range_of_rescue","children":[],"call":["node loc keyword ","node loc ","parent send_node source_range ","parent send_node ","parent loc begin ","parent loc "," base_for_method_definition ","parent type ","parent parent ","parent ensure_type? ","node parent ","assignment_node source_range "," same_line? "," assignment_node ","parent parent  send_node source_range ","node parent  send_node source_range ","parent parent  send_node ","node parent  send_node ","parent parent  loc begin ","node parent  loc begin ","parent parent  loc ","node parent  loc ","parent parent  type ","node parent  type ","parent parent  parent parent  ","node parent  node parent  ","parent parent  ensure_type? ","node parent  ensure_type? ","node parent parent  ","node node parent  "," assignment_node  source_range ","  assignment_node  "]}," RuboCop Cop Layout ElseAlignment base_range_of_if":{"type":"method","name":"base_range_of_if","children":[],"call":["(send\n  (lvar :lineage) :find) loc keyword ","(send\n  (lvar :lineage) :find) loc ","parent unless? ","parent if? ","lineage find ","node each_ancestor ","base source_range "]}," RuboCop Config read_ruby_version_from_bundler_lock_file":{"type":"method","name":"read_ruby_version_from_bundler_lock_file","children":[],"call":["result captures first to_f ","result captures first ","result captures ","line match ","File  foreach "," bundler_lock_file_path ","line match  captures first to_f ","line match  captures first ","line match  captures "," bundler_ bundler_lock_file_path  "]}," RuboCop Config target_ruby_version_from_bundler_lock_file":{"type":"method","name":"target_ruby_version_from_bundler_lock_file","children":[],"call":[" read_ruby_version_from_bundler_lock_file "]}," RuboCop Formatter AutoGenConfigFormatter finished":{"type":"method","name":"finished","children":[],"call":[" report_summary ","inspected_files size "," output puts "," output "]}," RuboCop Cop Style OptionHash super_used?":{"type":"method","name":"super_used?","children":[],"call":["node parent each_node any? ","node parent each_node ","node parent "]}," RuboCop Cop Style MethodCallWithoutArgsParentheses ignored_method?":{"type":"method","name":"ignored_method?","children":[],"call":[" cop_config [] to_a map include? "," cop_config [] to_a map "," cop_config [] to_a "," cop_config [] "," cop_config "]}," RuboCop Cop Style FrozenStringLiteralComment insert_comment":{"type":"method","name":"insert_comment","children":[],"call":["corrector insert_after ","last_special_comment pos "," processed_source following_line empty? "," processed_source following_line "," processed_source ","corrector insert_before "," processed_source tokens [] pos "," processed_source tokens [] "," processed_source tokens ","last_special_comment nil? "," last_special_comment "," proceeding_comment "," correction_range "," preceding_comment "," line_range "," following_comment ","comment line "," processed_source buffer source_range "," processed_source buffer "," last_special_comment  pos ","last_special_ last_special_comment  pos "," last_special_comment  nil? ","last_special_ last_special_comment  nil? ","  last_special_comment  "," last_special_ last_special_comment  "," proceeding_ last_special_comment  "," preceding_ last_special_comment  "," following_ last_special_comment  "," last_special_comment  line "]}," RuboCop Cop Style FrozenStringLiteralComment remove_comment":{"type":"method","name":"remove_comment","children":[],"call":["corrector remove "," range_with_surrounding_space ","node pos "]}," RuboCop Cop Style EmptyLineAfterGuardClause last_argument":{"type":"method","name":"last_argument","children":[],"call":["node children last last_argument ","node children last ","node children "]}," RuboCop Cop Style EmptyLineAfterGuardClause last_argument_is_heredoc?":{"type":"method","name":"last_argument_is_heredoc?","children":[],"call":["last_argument heredoc? ","last_argument dstr_type? ","last_argument str_type? "," last_argument ","last_children send_type? ","node children last ","node children "," last_argument  heredoc? "," last_argument  dstr_type? "," last_argument  str_type? ","  last_argument  ","node children last  send_type? "]}," RuboCop Cop Style EmptyLineAfterGuardClause correct_style?":{"type":"method","name":"correct_style?","children":[],"call":[" next_sibling_empty_or_guard_clause? "," next_sibling_parent_empty_or_else? "," next_line_rescue_or_ensure? "," contains_guard_clause? ! "," contains_guard_clause? "]}," RuboCop Cop Rails InverseOf message":{"type":"method","name":"message","children":[],"call":[" inverse_of_nil_option? ","options any? "]}," RuboCop Cop Rails HttpStatus status_code":{"type":"method","name":"status_code","children":[],"call":[" status_pair? ","node each_pair each ","node each_pair "]}," RuboCop Cop Performance UnneededSort accessor_start":{"type":"method","name":"accessor_start","children":[],"call":["node loc selector begin_pos ","node loc selector ","node loc ","node loc dot begin_pos ","node loc dot "]}," RuboCop Cop Performance UnneededSort arg_value":{"type":"method","name":"arg_value","children":[],"call":[" arg_node node_parts first "," arg_node node_parts "," arg_node "," arg_node nil? "]}," RuboCop Cop Performance UnneededSort arg_node":{"type":"method","name":"arg_node","children":[],"call":["node arguments first ","node arguments "]}," RuboCop Cop Performance UnneededSort suffix":{"type":"method","name":"suffix","children":[],"call":["sorter == "]}," RuboCop Cop Performance UnneededSort base":{"type":"method","name":"base","children":[],"call":["arg == ","accessor == ","arg zero? "]}," RuboCop Cop Performance UnneededSort suggestion":{"type":"method","name":"suggestion","children":[],"call":[" base + "," suffix "," base "]}," RuboCop Cop Performance UnneededSort message":{"type":"method","name":"message","children":[],"call":[" format "," suggestion "," arg_value "," range_between source "," range_between ","node loc expression end_pos ","node loc expression ","node loc ","node loc selector begin_pos ","node loc selector "]}," RuboCop Cop Performance UnneededSort autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," suggestion "," arg_value ","sort_node loc selector ","sort_node loc ","corrector remove "," range_between ","node loc expression end_pos ","node loc expression ","node loc "," accessor_start "," lambda "," unneeded_sort? "]}," RuboCop Cop Performance UnneededSort on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," message "," range_between ","node loc expression end_pos ","node loc expression ","node loc ","sort_node loc selector begin_pos ","sort_node loc selector ","sort_node loc "," unneeded_sort? ","  range_between _between "]}," RuboCop Cop Performance RegexpMatch correction_range":{"type":"method","name":"correction_range","children":[],"call":["Parser Source Range  new ","arg loc expression begin_pos ","arg loc expression ","arg loc ","recv loc expression end_pos ","recv loc expression ","recv loc "," processed_source buffer "," processed_source "," processed_source  processed_source buffer  "]}," RuboCop Cop Performance RegexpMatch swap_receiver_and_arg":{"type":"method","name":"swap_receiver_and_arg","children":[],"call":["corrector replace ","recv source ","arg loc expression ","arg loc ","arg source ","recv loc expression ","recv loc "]}," RuboCop Cop Metrics BlockLength excluded_method?":{"type":"method","name":"excluded_method?","children":[],"call":["receiver == ","method == ","config split "," excluded_methods any? "," excluded_methods "," String ","node method_name ","node receiver source gsub ","node receiver source ","node receiver "]}," RuboCop Cop Lint Void check_expression":{"type":"method","name":"check_expression","children":[],"call":[" check_nonmutating "," cop_config [] "," cop_config "," check_defined "," check_self "," check_var "," check_literal "," check_void_op "," check_void_expression "]}," RuboCop Cop Lint Void on_block":{"type":"method","name":"on_block","children":[],"call":[" check_expression ","node body "," in_void_context? ","node body begin_type? ! ","node body begin_type? "]}," RuboCop Cop Lint SafeNavigationConsistency top_conditional_ancestor":{"type":"method","name":"top_conditional_ancestor","children":[],"call":[" top_conditional_ancestor ","AST Node OPERATOR_KEYWORDS  include? ","parent parent type ","parent parent ","parent begin_type? ","parent type ","node parent ","parent parent operator_keyword? ","parent operator_keyword? ","node parent  node parent  type ","node parent  node parent  ","node parent  begin_type? ","node parent  type ","node node parent  ","node parent  node parent  operator_keyword? ","node parent  operator_keyword? "]}," RuboCop Cop Lint SafeNavigationConsistency autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector insert_before ","node loc dot ","node loc "," lambda ","node dot? "]}," RuboCop Cop Lint SafeNavigationConsistency check":{"type":"method","name":"check","children":[],"call":[" add_offense ","node loc expression join ","unsafe_method_call loc expression ","unsafe_method_call loc ","node loc expression ","node loc ","unsafe_method_calls each ","safe_nav_receiver == ","method_call receiver ","method_calls select ","conditions select ","node receiver ","ancestor conditions "," top_conditional_ancestor "," ignore_node "," unsafe_method_calls "," autocorrect "," location ","unsafe_conditions select  each "," unsafe_method_calls  each ","node receiver  == ","conditions select  select ","ancestor conditions  select ","ancestor ancestor conditions  "," top_conditional_ancestor  conditions "," top_conditional_ top_conditional_ancestor  "," unsafe_conditions select  ","  unsafe_method_calls  "," node loc expression join  ","  location  "]}," RuboCop Cop Lint SafeNavigationConsistency on_csend":{"type":"method","name":"on_csend","children":[],"call":[" check ","AST Node OPERATOR_KEYWORDS  include? ","node parent type ","node parent ","node parent operator_keyword? "]}," RuboCop Cop Layout TrailingWhitespace extract_heredoc_ranges":{"type":"method","name":"extract_heredoc_ranges","children":[],"call":["body last_line ","body first_line ","node location heredoc_body ","node location ","ast each_node select map ","ast each_node select ","ast each_node ","node location heredoc_body  last_line ","node location heredoc_body  first_line ","node location heredoc_node location heredoc_body  "]}," RuboCop Cop Layout TrailingWhitespace inside_heredoc?":{"type":"method","name":"inside_heredoc?","children":[],"call":["r include? ","heredoc_ranges any? "]}," RuboCop Cop Layout TrailingWhitespace skip_heredoc?":{"type":"method","name":"skip_heredoc?","children":[],"call":[" cop_config fetch "," cop_config "]}," RuboCop Cop Layout SpaceInsideParens can_be_ignored?":{"type":"method","name":"can_be_ignored?","children":[],"call":["token2 right_parens? ","token1 left_parens? ","token2 comment? "," parens? ","token1 space_after? ! ","token1 space_after? "," same_line? "," range_between source == "," range_between source "," range_between ","token2 end_pos ","token1 begin_pos "]}," RuboCop Cop Layout SpaceInsideParens each_missing_space":{"type":"method","name":"each_missing_space","children":[],"call":[" range_between ","token2 end_pos ","token2 begin_pos ","token2 right_parens? ","token2 begin_pos + ","token1 left_parens? ","token1 space_after? ! ","token1 space_after? ","token2 line == ","token1 line ","token2 line "," can_be_ignored? ","tokens each_cons "]}," RuboCop Cop Commissioner trigger_responding_cops":{"type":"method","name":"trigger_responding_cops","children":[],"call":["cop send "," with_cop_error_handling ","@callbacks [] each ","@callbacks [] ","cop respond_to? ","@cops select ","cop public_send "]}," RuboCop AST BinaryOperatorNode conditions":{"type":"method","name":"conditions","children":[],"call":["collection << ","collection concat ","side conditions ","AST Node OPERATOR_KEYWORDS  include? ","side type ","(lvar :lhs) each_with_object ","rhs children first ","rhs children ","rhs begin_type? ","lhs children first ","lhs children ","lhs begin_type? ","side operator_keyword? ","(lvar :lhs children first ) each_with_object ","rhs children first  children first ","rhs children first  children ","rhs children first  begin_type? ","lhs children first  children first ","lhs children first  children ","lhs children first  begin_type? "]}," RuboCop TargetFinder included_file?":{"type":"method","name":"included_file?","children":[],"call":[" configured_include? "," ruby_file? "]}," RuboCop TargetFinder configured_include?":{"type":"method","name":"configured_include?","children":[],"call":["@config_store for file_to_include? ","@config_store for ","@config_store for_pwd file_to_include? ","@config_store for_pwd "]}," RuboCop TargetFinder stdin?":{"type":"method","name":"stdin?","children":[],"call":["@options key? "]}," RuboCop TargetFinder ruby_interpreters":{"type":"method","name":"ruby_interpreters","children":[],"call":["@config_store for for_all_cops [] ","@config_store for for_all_cops ","@config_store for "]}," RuboCop TargetFinder all_cops_include":{"type":"method","name":"all_cops_include","children":[],"call":["@config_store for for_all_cops [] map ","@config_store for for_all_cops [] ","@config_store for for_all_cops ","@config_store for ","@config_store for_pwd for_all_cops [] map ","@config_store for_pwd for_all_cops [] ","@config_store for_pwd for_all_cops ","@config_store for_pwd "]}," RuboCop TargetFinder ruby_filenames":{"type":"method","name":"ruby_filenames","children":[],"call":["pattern sub ","file_patterns map ","pattern start_with? "," all_cops_include reject "," all_cops_include "]}," RuboCop TargetFinder ruby_extensions":{"type":"method","name":"ruby_extensions","children":[],"call":["pattern sub ","ext_patterns map ","pattern start_with? "," all_cops_include select "," all_cops_include "]}," RuboCop ProcessedSource line_indentation":{"type":"method","name":"line_indentation","children":[],"call":[" lines [] match [] to_s length "," lines [] match [] to_s "," lines [] match [] "," lines [] match "," lines [] ","line_number - "," lines "]}," RuboCop Cop Style ParenthesesAroundCondition allow_multiline_conditions?":{"type":"method","name":"allow_multiline_conditions?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style ParenthesesAroundCondition parens_allowed?":{"type":"method","name":"parens_allowed?","children":[],"call":[" allow_multiline_conditions? ","node multiline? "," safe_assignment_allowed? "," safe_assignment? "," parens_required? "]}," RuboCop Cop Style MissingRespondToMissing implements_respond_to_missing?":{"type":"method","name":"implements_respond_to_missing?","children":[],"call":["sibling method? ","node parent each_child_node any? ","node parent each_child_node ","node type ","node parent ","child method? ","child respond_to? ","descendant children first ","descendant children ","descendant method? ","grand_parent each_descendant ","node parent parent ","node parent each_descendant children first _node any? ","node parent each_descendant children first _node ","descendant children first  method? ","descendant children first  respond_to? ","descendant descendant children first ren first ","descendant descendant children first ren ","node parent parent  each_descendant "]}," RuboCop Cop Style MissingRespondToMissing on_def":{"type":"method","name":"on_def","children":[],"call":[" add_offense "," implements_respond_to_missing? ","node method? "]}," RuboCop Cop Style MethodMissingSuper on_def":{"type":"method","name":"on_def","children":[],"call":[" add_offense ","node descendants any? ","node descendants ","node method? "]}," RuboCop Cop Style MethodCallWithArgsParentheses args_parenthesized?":{"type":"method","name":"args_parenthesized?","children":[],"call":["node arguments first parenthesized_call? ","node arguments first ","node arguments ","node arguments length == ","node arguments length ","node arguments one? ","first_node parenthesized_call? ","first_node begin_type? ","node arguments first  parenthesized_call? ","node arguments first  begin_type? "]}," RuboCop Cop Style CommentAnnotation inline_comment?":{"type":"method","name":"inline_comment?","children":[],"call":[" comment_line? ! "," comment_line? ","comment loc expression source_line ","comment loc expression ","comment loc ","comment source_range source_line ","comment source_range "]}," RuboCop Cop Style CommandLiteral preferred_delimiters_config":{"type":"method","name":"preferred_delimiters_config","children":[],"call":[" config for_cop [] "," config for_cop "," config "]}," RuboCop Cop Style CommandLiteral default_delimiter":{"type":"method","name":"default_delimiter","children":[],"call":[" preferred_delimiters_config [] "," preferred_delimiters_config "]}," RuboCop Cop Style CommandLiteral command_delimiter":{"type":"method","name":"command_delimiter","children":[],"call":[" preferred_delimiters_config [] "," preferred_delimiters_config "]}," RuboCop Cop Style CommandLiteral preferred_delimiter":{"type":"method","name":"preferred_delimiter","children":[],"call":["(or\n  (send nil :command_delimiter)\n  (send nil :default_delimiter)) split "," default_delimiter "," command_delimiter ","(or\n  (send nil :command_delimiter)\n  (send nil :default_delimiter)) chars "]}," RuboCop Cop Rails ReversibleMigration within_reversible_or_up_only_block?":{"type":"method","name":"within_reversible_or_up_only_block?","children":[],"call":["ancestor send_node method? ","ancestor send_node ","ancestor block_type? ","node each_ancestor any? ","node each_ancestor "]}," RuboCop Cop Rails RefuteMethods offense_message":{"type":"method","name":"offense_message","children":[],"call":[" format ","CORRECTIONS  [] "]}," RuboCop Cop Rails RefuteMethods refute_method?":{"type":"method","name":"refute_method?","children":[],"call":["OFFENSIVE_METHODS  include? "]}," RuboCop Cop Rails RefuteMethods autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","CORRECTIONS  [] ","node method_name ","node loc selector ","node loc "," lambda "]}," RuboCop Cop Rails RefuteMethods on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," offense_message ","node method_name "," offensive? "," offense_ offense_message  "]}," RuboCop Cop Rails HasManyOrHasOneDependent contain_valid_options_in_with_options_block?":{"type":"method","name":"contain_valid_options_in_with_options_block?","children":[],"call":[" contain_valid_options_in_with_options_block? ","node parent parent ","node parent "," valid_options? "," with_options_block "]}," RuboCop Cop Rails AssertNot corrected_source":{"type":"method","name":"corrected_source","children":[],"call":["source gsub "]}," RuboCop Cop Rails AssertNot autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," corrected_source ","expression source "," lambda ","node loc expression ","node loc ","node loc expression  source ","node loc node loc expression  "]}," RuboCop Cop Rails AssertNot on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," offensive? "]}," RuboCop Cop Performance InefficientHashSearch autocorrect_hash_expression":{"type":"method","name":"autocorrect_hash_expression","children":[],"call":["node children [] children [] loc expression source ","node children [] children [] loc expression ","node children [] children [] loc ","node children [] children [] ","node children [] children ","node children [] ","node children ","node receiver receiver source ","node receiver receiver ","node receiver "]}," RuboCop Cop Performance InefficientHashSearch autocorrect_argument":{"type":"method","name":"autocorrect_argument","children":[],"call":["node arguments first source ","node arguments first ","node arguments "]}," RuboCop Cop Performance InefficientHashSearch use_long_method":{"type":"method","name":"use_long_method","children":[],"call":["preferred_config [] ","preferred_config [] == "," config for_all_cops [] "," config for_all_cops "," config "," config for_all_cops []  [] "," config for_all_cops []  [] == "]}," RuboCop Cop Performance InefficientHashSearch current_method":{"type":"method","name":"current_method","children":[],"call":["node children [] method_name ","node children [] ","node children ","node receiver method_name ","node receiver "]}," RuboCop Cop Performance InefficientHashSearch autocorrect_method":{"type":"method","name":"autocorrect_method","children":[],"call":[" use_long_method "," current_method "]}," RuboCop Cop Performance InefficientHashSearch msg":{"type":"method","name":"msg","children":[],"call":[" current_method "," autocorrect_method "]}," RuboCop Cop Performance InefficientHashSearch autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," autocorrect_argument "," autocorrect_method "," autocorrect_hash_expression ","node loc expression ","node loc "," lambda "]}," RuboCop Cop Performance InefficientHashSearch on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," msg "," inefficient_include? ","receiver nil? "]}," RuboCop Cop Lint UnneededCopEnableDirective all_or_name":{"type":"method","name":"all_or_name","children":[],"call":["name == "]}," RuboCop Cop Lint SplatKeywordArguments on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","element kwsplat_type? ","argument children each ","argument children ","argument hash_type? ","node arguments each ","node arguments "]}," RuboCop Cop Lint SafeNavigationConsistency unsafe_method_calls":{"type":"method","name":"unsafe_method_calls","children":[],"call":[" ignored_node? ! "," ignored_node? "," nil_methods include? ! "," nil_methods include? ","method_call method_name "," nil_methods ","safe_nav_receiver == ","method_call receiver ","method_calls select "]}," RuboCop Cop Lint ErbNewArguments correct_arguments?":{"type":"method","name":"correct_arguments?","children":[],"call":["arguments [] hash_type? ","arguments [] ","arguments size == ","arguments size "]}," RuboCop Cop Lint ErbNewArguments on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","arguments [] source_range ","arguments [] "," format ","arguments [] source ","MESSAGES  [] ","i - ","arguments [] hash_type? ","arguments [] ! ","1 upto "," correct_arguments? "," erb_new_with_non_keyword_arguments ","argument source_range ","argument source ","argument hash_type? ","argument ! ","arguments [] each_with_index ","arguments empty? "," autocorrect "]}," RuboCop Cop Layout EmptyLineAfterGuardClause last_argument":{"type":"method","name":"last_argument","children":[],"call":["node children last last_argument ","node children last ","node children ","node if_branch children last ","node if_branch children ","node if_branch "]}," RuboCop Cop Layout EmptyLineAfterGuardClause last_argument_is_heredoc?":{"type":"method","name":"last_argument_is_heredoc?","children":[],"call":["last_argument heredoc? ","last_argument dstr_type? ","last_argument str_type? "," last_argument ","last_children send_type? ","node children last ","node children ","last_argument respond_to? ","node if_branch "," heredoc? "," last_heredoc_argument "," last_argument  heredoc? "," last_argument  dstr_type? "," last_argument  str_type? ","  last_argument  ","node children last  send_type? ","node if_branch  send_type? "," last_argument  respond_to? "]}," RuboCop Cop Layout EmptyLineAfterGuardClause next_sibling_empty_or_guard_clause?":{"type":"method","name":"next_sibling_empty_or_guard_clause?","children":[],"call":[" contains_guard_clause? ","next_sibling if_type? ","next_sibling nil? ","node parent children [] ","node sibling_index + ","node sibling_index ","node parent children ","node parent ","node right_sibling ","node parent children []  if_type? ","node right_sibling  if_type? ","node parent children []  nil? ","node right_sibling  nil? "]}," RuboCop Cop Layout EmptyLineAfterGuardClause next_sibling_parent_empty_or_else?":{"type":"method","name":"next_sibling_parent_empty_or_else?","children":[],"call":["parent else? ","parent if_type? ","next_sibling parent ","next_sibling nil? ","node parent children [] ","node sibling_index + ","node sibling_index ","node parent children ","node parent ","node right_sibling ","next_sibling parent  else? ","next_sibling parent  if_type? ","next_sibling next_sibling parent  ","node parent children []  parent ","node right_sibling  parent ","node parent children []  nil? ","node right_sibling  nil? ","node next_sibling parent  children [] ","node next_sibling parent  children ","node next_sibling parent  "]}," RuboCop Cop Layout EmptyLineAfterGuardClause next_line_rescue_or_ensure?":{"type":"method","name":"next_line_rescue_or_ensure?","children":[],"call":["parent ensure_type? ","parent rescue_type? ","parent nil? ","node parent ","node parent  ensure_type? ","node parent  rescue_type? ","node parent  nil? ","node node parent  "]}," RuboCop Cop Layout EmptyLineAfterGuardClause next_line_empty?":{"type":"method","name":"next_line_empty?","children":[],"call":[" processed_source [] blank? "," processed_source [] "," processed_source "]}," RuboCop Cop Layout EmptyLineAfterGuardClause contains_guard_clause?":{"type":"method","name":"contains_guard_clause?","children":[],"call":["node if_branch guard_clause? ","node if_branch "]}," RuboCop Cop Layout EmptyLineAfterGuardClause correct_style?":{"type":"method","name":"correct_style?","children":[],"call":[" next_sibling_empty_or_guard_clause? "," next_sibling_parent_empty_or_else? "," next_line_rescue_or_ensure? "," contains_guard_clause? ! "," contains_guard_clause? "]}," RuboCop Cop Layout EmptyLineAfterGuardClause autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector insert_after "," range_by_whole_lines ","node source_range "," lambda ","node loc heredoc_body ","node loc ","node heredoc? ","node respond_to? "," processed_source comment_at_line "," processed_source "," next_line_enable_directive_comment? ","node_range last_line + ","node_range last_line "," heredoc? "," next_line_allowed_directive_comment? "," node_range last_line + _enable_directive_comment? "," range_by_whole_lines  last_line + "," processed_source comment_at_line  last_line + "," range_by_whole_lines  last_line "," processed_source comment_at_line  last_line "," node_range last_line + _allowed_directive_comment? "]}," RuboCop Cop Layout EmptyLineAfterGuardClause on_if":{"type":"method","name":"on_if","children":[],"call":[" add_offense "," next_line_empty? ","node last_line ","node last_line + + ","node last_line + ","heredoc_node children size ","heredoc_node children "," last_argument "," last_argument_is_heredoc? "," correct_style? ","heredoc_body last_line - ","heredoc_body first_line ","heredoc_body last_line ","heredoc_node loc heredoc_body ","heredoc_node loc "," offense_location "," heredoc_line ","node modifier_form? "," last_heredoc_argument "," autocorrect ","heredoc_node loc heredoc_end "," next_line_empty_or_enable_directive_comment? "," multiple_statements_on_line? "," next_line_empty_or_allowed_directive_comment? "," next_node last_line + + _empty? ","node last_node last_line + +  ","node last_node last_line + +  + + ","node last_node last_line + +  + "," last_argument  children size "," last_heredoc_argument  children size "," last_argument  children "," last_heredoc_argument  children ","heredoc_body last_node last_line + +  - ","heredoc_node loc heredoc_body  last_line - ","heredoc_body first_node last_line + +  ","heredoc_node loc heredoc_body  first_line ","heredoc_body last_node last_line + +  ","heredoc_node loc heredoc_body  last_line "," last_argument  loc heredoc_body "," last_heredoc_argument  loc heredoc_body ","heredoc_node loc heredoc_node loc heredoc_body  "," last_argument  loc "," last_heredoc_argument  loc "," heredoc_node last_line + +  "," last_argument  loc heredoc_end "," last_heredoc_argument  loc heredoc_end "," next_node last_line + + _empty_or_enable_directive_comment? "," multiple_statements_on_node last_line + + ? "," next_node last_line + + _empty_or_allowed_directive_comment? "]}," RuboCop Cop Layout ClosingParenthesisIndentation indentation_width":{"type":"method","name":"indentation_width","children":[],"call":["@config for_cop [] ","@config for_cop "]}," RuboCop Cop Layout ClosingParenthesisIndentation message":{"type":"method","name":"message","children":[],"call":[" format ","right_paren column ","correct_column == ","left_paren column "]}," RuboCop Cop Layout ClosingParenthesisIndentation last_argument_line":{"type":"method","name":"last_argument_line","children":[],"call":["elements last loc first_line ","elements last loc ","elements last "]}," RuboCop Cop Layout ClosingParenthesisIndentation all_elements_aligned?":{"type":"method","name":"all_elements_aligned?","children":[],"call":["(send\n  (lvar :elements) :map) uniq count == ","(send\n  (lvar :elements) :map) uniq count ","(send\n  (lvar :elements) :map) uniq ","e loc column ","e loc ","elements map ","(send\n  (lvar :elements) :flat_map) uniq count == ","(send\n  (lvar :elements) :flat_map) uniq count ","(send\n  (lvar :elements) :flat_map) uniq ","pair loc column ","pair loc ","e each_pair map ","e each_pair ","e hash_type? ","elements flat_map ","child loc column ","child loc ","e each_child_node map ","e each_child_node "]}," RuboCop Config signature":{"type":"method","name":"signature","children":[],"call":["Digest MD5  hexdigest "," to_s ","Digest SHA1  hexdigest "]}," RuboCop CommentConfig handle_switch":{"type":"method","name":"handle_switch","children":[],"call":["extras << ","names [] ","names [] > ","cop_names each ","(send\n  (lvar :names) :[]\n  (lvar :name)) positive? ","extras [] << ","extras [] ","directive comment ","directive disabled? ","directive cop_names each ","directive cop_names "]}," RuboCop CommentConfig handle_enable_all":{"type":"method","name":"handle_enable_all","children":[],"call":["extras << ","enabled_cops zero? ","names [] ","counter > ","names each ","counter positive? ","extras [] << ","extras [] ","directive comment "]}," RuboCop CommentConfig enable_all?":{"type":"method","name":"enable_all?","children":[],"call":["cops == ","comment text match captures ","comment text match ","comment text "]}," RuboCop Options add_aliases":{"type":"method","name":"add_aliases","children":[],"call":["@options []= ","@options [] << ","@options [] "," option "]}," RuboCop Cop VariableForce node_handler_method_name":{"type":"method","name":"node_handler_method_name","children":[],"call":["node type ","NODE_HANDLER_METHOD_NAMES  [] "]}," RuboCop Cop Style UnneededCondition else_source":{"type":"method","name":"else_source","children":[],"call":["else_branch source ","else_branch modifier_form? ","MODIFIER_NODES  include? ","else_branch type ","else_branch basic_conditional? "]}," RuboCop Cop Style UnneededCondition offense?":{"type":"method","name":"offense?","children":[],"call":["else_branch single_line? ","else_branch instance_of? ! ","else_branch instance_of? ","node ternary? ","node elsif? ! ","node elsif? ","condition == ","node elsif_conditional? "," use_if_branch? "]}," RuboCop Cop Style UnneededCondition range_of_offense":{"type":"method","name":"range_of_offense","children":[],"call":[" range_between ","node loc colon end_pos ","node loc colon ","node loc ","node loc question begin_pos ","node loc question ","node ternary? "]}," RuboCop Cop Style UnneededCondition autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node source_range ","(send\n  (send\n    (lvar :node) :if_branch) :source) join "," else_source ","node else_branch ","node if_branch source ","node if_branch "," range_of_offense ","node ternary? "," lambda ","node modifier_form? "," make_ternary_form ","node else_branch ! "]}," RuboCop Cop Style UnneededCondition on_if":{"type":"method","name":"on_if","children":[],"call":[" add_offense "," range_of_offense "," offense? ","node elsif_conditional? "]}," RuboCop Cop Style MixinGrouping on_class":{"type":"method","name":"on_class","children":[],"call":[" check ","MIXIN_METHODS  include? ","macro method_name ","begin_node each_child_node select each ","begin_node each_child_node select ","begin_node each_child_node ","node child_nodes find ","node child_nodes ","macro arguments empty? ","macro arguments ","MIXIN_METHODS  include? ! "]}," RuboCop Cop Style FrozenStringLiteralComment correction_range":{"type":"method","name":"correction_range","children":[],"call":["last_special_comment pos "," range_with_surrounding_space "," processed_source tokens [] "," processed_source tokens "," processed_source ","last_special_comment nil? "," last_special_comment "," last_special_comment  pos "," last_special_comment  nil? ","  last_special_comment  "]}," RuboCop Cop Style FrozenStringLiteralComment proceeding_comment":{"type":"method","name":"proceeding_comment","children":[],"call":[" processed_source following_line empty? "," processed_source following_line "," processed_source "," last_special_comment ","following_line empty? "," processed_source  processed_source following_line  empty? "," processed_source  processed_source following_line  ","  last_special_comment  "," processed_source following_line  empty? "]}," RuboCop Cop Style FrozenStringLiteralComment preceding_comment":{"type":"method","name":"preceding_comment","children":[],"call":[" processed_source tokens [] space_before? "," processed_source tokens [] "," processed_source tokens "," processed_source "]}," RuboCop Cop Style AccessModifierDeclarations message":{"type":"method","name":"message","children":[],"call":[" format "," inline_style? "," group_style? ","node loc selector source ","node loc selector ","node loc ","range source "]}," RuboCop Cop Style AccessModifierDeclarations access_modifier_is_not_inlined?":{"type":"method","name":"access_modifier_is_not_inlined?","children":[],"call":[" access_modifier_is_inlined? ! "," access_modifier_is_inlined? "]}," RuboCop Cop Style AccessModifierDeclarations access_modifier_is_inlined?":{"type":"method","name":"access_modifier_is_inlined?","children":[],"call":["node arguments any? ","node arguments "]}," RuboCop Cop Style AccessModifierDeclarations inline_style?":{"type":"method","name":"inline_style?","children":[],"call":[" style == "," style "]}," RuboCop Cop Style AccessModifierDeclarations group_style?":{"type":"method","name":"group_style?","children":[],"call":[" style == "," style "]}," RuboCop Cop Style AccessModifierDeclarations offense?":{"type":"method","name":"offense?","children":[],"call":[" access_modifier_is_not_inlined? "," inline_style? "," access_modifier_is_inlined? "," group_style? "," right_siblings_same_inline_method? ! "," right_siblings_same_inline_method? "]}," RuboCop Cop Style AccessModifierDeclarations on_send":{"type":"method","name":"on_send","children":[],"call":[" correct_style_detected "," opposite_style_detected "," add_offense "," offense? ","node access_modifier? ","node parent pair_type? ","node parent "," access_modifier_with_symbol? "," cop_config [] "," cop_config "," access_modifier? ","node loc selector ","node loc "," allow_modifiers_on_symbols? "," autocorrect ","ALLOWED_NODE_TYPES  include? "]}," RuboCop Cop Rails FilePath message":{"type":"method","name":"message","children":[],"call":[" format "," style == "," style "]}," RuboCop Cop Rails FilePath check_for_rails_root_join_with_string_arguments":{"type":"method","name":"check_for_rails_root_join_with_string_arguments","children":[],"call":[" register_offense ","node arguments all? ","node arguments ","node arguments size > ","node arguments size "," rails_root_join_nodes? "," rails_root_nodes? "," style == "," style "]}," RuboCop Cop Rails BulkChangeTable AlterMethodsRecorder offensive_nodes":{"type":"method","name":"offensive_nodes","children":[],"call":[" flush "]}," RuboCop Cop Rails BulkChangeTable AlterMethodsRecorder flush":{"type":"method","name":"flush","children":[],"call":["@offensive_nodes << ","@nodes first ","@nodes size > ","@nodes size "]}," RuboCop Cop Rails BulkChangeTable AlterMethodsRecorder process":{"type":"method","name":"process","children":[],"call":["@nodes << "," flush ","node arguments [] == ","node arguments [] ","node arguments ","@nodes all? ","new_node arguments [] ","new_node arguments ","node arguments [] value to_s == ","node arguments [] value to_s ","node arguments [] value ","new_node arguments [] value to_s ","new_node arguments [] value ","table_node value to_s ","table_node value ","table_node is_a? ","new_node arguments []  value to_s ","new_node arguments []  value ","new_node arguments []  is_a? "]}," RuboCop Cop Rails BulkChangeTable AlterMethodsRecorder initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop Cop Rails BulkChangeTable add_offense_for_change_table":{"type":"method","name":"add_offense_for_change_table","children":[],"call":[" add_offense "]}," RuboCop Cop Rails BulkChangeTable add_offense_for_alter_methods":{"type":"method","name":"add_offense_for_alter_methods","children":[],"call":[" add_offense "," format ","node arguments [] value ","node arguments [] ","node arguments ","table_node value ","table_node is_a? ","node arguments []  value ","node arguments []  is_a? "]}," RuboCop Cop Rails BulkChangeTable combinable_transformations":{"type":"method","name":"combinable_transformations","children":[],"call":["COMBINABLE_TRANSFORMATIONS  + "," database "]}," RuboCop Cop Rails BulkChangeTable combinable_alter_methods":{"type":"method","name":"combinable_alter_methods","children":[],"call":["COMBINABLE_ALTER_METHODS  + "," database "]}," RuboCop Cop Rails BulkChangeTable support_bulk_alter?":{"type":"method","name":"support_bulk_alter?","children":[],"call":[" target_rails_version >= "," target_rails_version "," database "]}," RuboCop Cop Rails BulkChangeTable database_yaml":{"type":"method","name":"database_yaml","children":[],"call":["config is_a? ","yaml [] ","yaml is_a? ","YAML  load_file ","File  exist? ","yaml []  is_a? ","YAML  load_file  [] ","YAML  load_file  is_a? "]}," RuboCop Cop Rails BulkChangeTable database_from_yaml":{"type":"method","name":"database_from_yaml","children":[],"call":[" database_yaml [] "," database_yaml "]}," RuboCop Cop Rails BulkChangeTable database":{"type":"method","name":"database","children":[],"call":[" database_from_yaml "," cop_config [] "," cop_config "]}," RuboCop Cop Rails BulkChangeTable include_bulk_options?":{"type":"method","name":"include_bulk_options?","children":[],"call":["key value == ","key value ","key sym_type? ","options keys any? ","options keys ","options hash_type? ","node arguments [] ","node arguments ","node arguments []  keys any? ","node arguments []  keys ","node arguments []  hash_type? "]}," RuboCop Cop Rails BulkChangeTable on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense_for_change_table ","transformations size > ","transformations size "," combinable_transformations include? ","send_node method_name "," combinable_transformations ","send_nodes select ","node block_node body each_child_node to_a ","node block_node body each_child_node ","node block_node body ","node block_node "," include_bulk_options? ","node command? "," support_bulk_alter? ","node block_node body each_child_node to_a  select "]}," RuboCop Cop Rails BulkChangeTable on_def":{"type":"method","name":"on_def","children":[],"call":[" add_offense_for_alter_methods ","recorder offensive_nodes each ","recorder offensive_nodes ","recorder flush ","recorder process "," combinable_alter_methods include? ","send_node method_name "," combinable_alter_methods ","node body each_child_node ","node body ","AlterMethodsRecorder  new ","MIGRATIION_METHODS  include? ","node method_name "," support_bulk_alter? ","MIGRATION_METHODS  include? ","AlterMethodsRecorder  new  offensive_nodes each ","AlterMethodsRecorder  new  offensive_nodes ","AlterMethodsRecorder  new  flush ","AlterMethodsRecorder  new  process "]}," RuboCop Cop Layout SpaceInsideReferenceBrackets previous_token":{"type":"method","name":"previous_token","children":[],"call":[" processed_source tokens [] ","index - "," processed_source tokens "," processed_source ","index zero? ","index nil? "," processed_source tokens index "," processed_source tokens index  - "," processed_source tokens index  zero? "," processed_source tokens index  nil? "," processed_source tokens  processed_source tokens index  "]}," RuboCop Cop Layout LeadingBlankLines autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove "," lambda ","Parser Source Range  new ","node begin_pos "," processed_source raw_source "," processed_source "," processed_source buffer "]}," RuboCop Cop Layout LeadingBlankLines investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense ","processed_source tokens [] pos ","processed_source tokens [] ","processed_source tokens ","token line > ","token line ","processed_source processed_source tokens [] s [] pos ","processed_source processed_source tokens [] s [] ","processed_source processed_source tokens [] s ","processed_source tokens []  line > ","processed_source tokens []  line "]}," RuboCop Cop Layout IndentHeredoc heredoc_end":{"type":"method","name":"heredoc_end","children":[],"call":["node loc heredoc_end source scrub ","node loc heredoc_end source ","node loc heredoc_end ","node loc "]}," RuboCop Cop Layout IndentHeredoc indented_end":{"type":"method","name":"indented_end","children":[],"call":["end_ gsub ","  * ","end_indent_level < "," base_indent_level "," indent_level "," heredoc_end "," heredoc_end  gsub "," indent_level  < "," heredoc_end indent_level < "]}," RuboCop Cop Layout IndentHeredoc adjust_minus":{"type":"method","name":"adjust_minus","children":[],"call":["corrector replace ","node loc expression ","node loc ","heredoc_beginning sub ","node loc expression source ","node loc expression source  sub "]}," RuboCop Cop Layout IndentHeredoc adjust_squiggly":{"type":"method","name":"adjust_squiggly","children":[],"call":["corrector replace "," indented_end ","node loc heredoc_end ","node loc "," indented_body ","node loc heredoc_body "]}," RuboCop Cop Layout ClosingHeredocIndentation indent_level":{"type":"method","name":"indent_level","children":[],"call":["source_line [] length ","source_line [] "]}," RuboCop Cop Layout ClosingHeredocIndentation message":{"type":"method","name":"message","children":[],"call":[" format "," heredoc_opening strip "," heredoc_opening "," heredoc_closing strip "," heredoc_closing ","node argument? "]}," RuboCop Cop Layout ClosingHeredocIndentation find_node_used_heredoc_argument":{"type":"method","name":"find_node_used_heredoc_argument","children":[],"call":[" find_node_used_heredoc_argument ","node parent ","node parent send_type? "]}," RuboCop Cop Layout ClosingHeredocIndentation indented_end":{"type":"method","name":"indented_end","children":[],"call":["closing_text gsub ","  * "," heredoc_closing "," opening_indentation "," closing_indentation "," heredoc_closing  gsub ","  opening_indentation ation ","  closing_indentation ation "]}," RuboCop Cop Layout ClosingHeredocIndentation heredoc_closing":{"type":"method","name":"heredoc_closing","children":[],"call":["node loc heredoc_end source_line ","node loc heredoc_end ","node loc "]}," RuboCop Cop Layout ClosingHeredocIndentation heredoc_opening":{"type":"method","name":"heredoc_opening","children":[],"call":["node loc expression source_line ","node loc expression ","node loc ","node source_range source_line ","node source_range "]}," RuboCop Cop Layout ClosingHeredocIndentation closing_indentation":{"type":"method","name":"closing_indentation","children":[],"call":[" indent_level "," heredoc_closing "]}," RuboCop Cop Layout ClosingHeredocIndentation contents_indentation":{"type":"method","name":"contents_indentation","children":[],"call":["(send\n  (send\n    (lvar :source_lines) :reject\n    (block-pass\n      (sym :empty?))) :map) min "," indent_level ","source_lines reject map ","source_lines reject ","node loc heredoc_body source split ","node loc heredoc_body source ","node loc heredoc_body ","node loc ","(send\n  (send\n    (lvar :node loc heredoc_body source split ) :reject\n    (block-pass\n      (sym :empty?))) :map) min ","node loc heredoc_body source split  reject map ","node loc heredoc_body source split  reject "]}," RuboCop Cop Layout ClosingHeredocIndentation opening_indentation":{"type":"method","name":"opening_indentation","children":[],"call":[" indent_level "," heredoc_opening "]}," RuboCop Cop Layout ClosingHeredocIndentation autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," indented_end ","node loc heredoc_end ","node loc "," lambda "]}," RuboCop Cop Layout ClosingHeredocIndentation on_heredoc":{"type":"method","name":"on_heredoc","children":[],"call":[" add_offense "," opening_indentation == "," closing_indentation "," opening_indentation "," find_node_used_heredoc_argument ","node parent ","node argument? "," contents_indentation >= "," contents_indentation ","node loc heredoc_body source empty? ","node loc heredoc_body source ","node loc heredoc_body ","node loc "," argument_indentation_correct? "," empty_heredoc? "," heredoc_type == "," heredoc_type ","corrector replace "," indented_end ","node loc heredoc_end "," message ","  message  "]}," RuboCop AST MethodDispatchNode non_bare_access_modifier?":{"type":"method","name":"non_bare_access_modifier?","children":[],"call":[" non_bare_access_modifier_declaration? "," macro? "]}," RuboCop AST MethodDispatchNode bare_access_modifier?":{"type":"method","name":"bare_access_modifier?","children":[],"call":[" bare_access_modifier_declaration? "," macro? "]}," RuboCop Cop Layout IndentationConsistency check_rails_style":{"type":"method","name":"check_rails_style","children":[],"call":[" check_alignment ","children_to_check each ","children_to_check last << ","children_to_check last ","children_to_check << "," bare_access_modifier? ","node children each ","node children "]}," RuboCop Cop Layout IndentationConsistency check_normal_style":{"type":"method","name":"check_normal_style","children":[],"call":[" check_alignment "," base_column_for_normal_style "," bare_access_modifier? ","node children reject ","node children "]}," RuboCop Cop Layout IndentationConsistency base_column_for_normal_style":{"type":"method","name":"base_column_for_normal_style","children":[],"call":["access_modifier_indent > "," display_column ","first_child source_range ","node parent source_range ","node parent "," bare_access_modifier? ","node children first ","node children "," display_column  > ","node children first  source_range "]}," RuboCop Cop Layout IndentationConsistency bare_access_modifier?":{"type":"method","name":"bare_access_modifier?","children":[],"call":["node bare_access_modifier? ","node send_type? "]}," RuboCop Cop Heredoc heredoc_type":{"type":"method","name":"heredoc_type","children":[],"call":["node source match captures [] ","node source match captures ","node source match ","node source ","match captures [] ","match captures ","node source node source match  captures [] ","node source node source match  captures ","node source node source match  ","node source match  captures [] ","node source match  captures "]}," RuboCop Cop Layout ClosingHeredocIndentation argument_indentation_correct?":{"type":"method","name":"argument_indentation_correct?","children":[],"call":[" opening_indentation == "," closing_indentation "," opening_indentation "," find_node_used_heredoc_argument ","node parent ","node argument? ","node chained? "]}," RuboCop Cop Layout ClosingHeredocIndentation empty_heredoc?":{"type":"method","name":"empty_heredoc?","children":[],"call":[" contents_indentation ! "," contents_indentation ","node loc heredoc_body source empty? ","node loc heredoc_body source ","node loc heredoc_body ","node loc "]}," RuboCop OptionsValidator validate_parallel_with_combo_option":{"type":"method","name":"validate_parallel_with_combo_option","children":[],"call":[" raise ","@options key? ","combos each "]}," RuboCop Cop Style UnneededCondition use_if_branch?":{"type":"method","name":"use_if_branch?","children":[],"call":["else_branch if_type? "]}," RuboCop Cop Style UnneededCondition message":{"type":"method","name":"message","children":[],"call":["node modifier_form? ","node else_branch ! ","node else_branch "]}," RuboCop Cop Style MultipleComparison root_of_or_node":{"type":"method","name":"root_of_or_node","children":[],"call":[" root_of_or_node ","or_node parent ","or_node parent or_type? "]}," RuboCop Cop Style MultipleComparison on_or":{"type":"method","name":"on_or","children":[],"call":[" add_offense "," nested_variable_comparison? ","node == "," root_of_or_node ","corrector replace "," variables_in_node first "," variables_in_node ","@compared_elements join "," reset_comparison "," switch_comparison? ","@compared_elements size < "," comparisons_threshold ","@compared_elements size ","  root_of_or_node  ","@compared_@compared_elements join  join ","@compared_@compared_elements join  size < ","@compared_@compared_elements join  size "]}," RuboCop Cop Style IpAddresses starts_with_hex_or_colon?":{"type":"method","name":"starts_with_hex_or_colon?","children":[],"call":["(irange\n  (int 97)\n  (int 102)) cover? ","(irange\n  (int 65)\n  (int 70)) cover? ","(irange\n  (int 48)\n  (int 58)) cover? ","str [] ord ","str [] "]}," RuboCop Cop Style IpAddresses too_long?":{"type":"method","name":"too_long?","children":[],"call":["str size > ","str size "]}," RuboCop Cop Style IpAddresses could_be_ip?":{"type":"method","name":"could_be_ip?","children":[],"call":[" starts_with_hex_or_colon? "," too_long? "]}," RuboCop Cop Style IpAddresses whitelist":{"type":"method","name":"whitelist","children":[],"call":[" Array map "," Array "," cop_config [] "," cop_config "]}," RuboCop Cop Style IpAddresses correct_style_detected":{"type":"method","name":"correct_style_detected","children":[],"call":[]}," RuboCop Cop Style IpAddresses opposite_style_detected":{"type":"method","name":"opposite_style_detected","children":[],"call":[]}," RuboCop Cop Style IpAddresses offense?":{"type":"method","name":"offense?","children":[],"call":["contents =~ "," could_be_ip? "," whitelist include? ","contents downcase "," whitelist ","contents empty? ","node source [] ","node source "," allowed_addresses include? "," allowed_addresses "," Resolv IPv6 Regex  match? "," Resolv IPv4 Regex  match? ","node source []  =~ ","node source []  downcase ","node source []  empty? "]}," RuboCop Cop Registry find_by_cop_name":{"type":"method","name":"find_by_cop_name","children":[],"call":["@cops_by_cop_name [] first ","@cops_by_cop_name [] "," to_h [] first "," to_h [] "," to_h "]}," RuboCop Cop Performance InefficientHashSearch message":{"type":"method","name":"message","children":[],"call":[" current_method "," autocorrect_method "]}," RuboCop Cop Naming MemoizedInstanceVariableName valid_leading_underscore?":{"type":"method","name":"valid_leading_underscore?","children":[],"call":["variable_name start_with? ! ","variable_name start_with? "," style "]}," RuboCop Cop Naming MemoizedInstanceVariableName suggested_var":{"type":"method","name":"suggested_var","children":[],"call":[" style == "," style ","method_name to_s delete ","method_name to_s "]}," RuboCop Cop Naming MemoizedInstanceVariableName message":{"type":"method","name":"message","children":[],"call":["variable_name start_with? ! ","variable_name start_with? "," style == "," style ","variable to_s sub ","variable to_s ","variable to_s sub  start_with? ! ","variable to_s sub  start_with? "]}," RuboCop Cop Naming MemoizedInstanceVariableName style_parameter_name":{"type":"method","name":"style_parameter_name","children":[],"call":[]}," RuboCop Cop StatementModifier indentation_multiplier":{"type":"method","name":"indentation_multiplier","children":[],"call":[" config for_cop [] "," config for_cop "," config ","default_configuration for_cop [] ","default_configuration for_cop ","RuboCop ConfigLoader  default_configuration ","RuboCop ConfigLoader  default_configuration  for_cop [] ","RuboCop ConfigLoader  default_configuration  for_cop ","RuboCop ConfigLoader  RuboCop ConfigLoader  default_configuration  "]}," RuboCop Cop Metrics LineLength highligh_start":{"type":"method","name":"highligh_start","children":[],"call":[" max - ","(send\n  (send nil :tab_indentation_width) :-\n  (int 1)) * ","line count "," tab_indentation_width - "," tab_indentation_width "," max "," indentation_difference "]}," RuboCop Cop Metrics LineLength line_length":{"type":"method","name":"line_length","children":[],"call":["line length ","line gsub ","  * "," tab_indentation_width ","line length + "," indentation_difference ","line gsub  length ","line gsub  gsub ","line gsub  length + "]}," RuboCop Cop Metrics LineLength tab_indentation_width":{"type":"method","name":"tab_indentation_width","children":[],"call":[" config for_cop [] "," config for_cop "," config "]}," RuboCop Cop Lint UselessAccessModifier check_send_node":{"type":"method","name":"check_send_node","children":[],"call":[" add_offense "," format ","node method_name ","node arguments? ! ","node arguments? ","node method_name == "," check_new_visibility ","node bare_access_modifier? ","node method? "," autocorrect "]}," RuboCop Cop Lint UselessAccessModifier access_modifier?":{"type":"method","name":"access_modifier?","children":[],"call":["node method_name == ","node method_name ","node bare_access_modifier? ","node method? "]}," RuboCop Cop Lint ShadowedArgument reference_pos":{"type":"method","name":"reference_pos","children":[],"call":["node source_range begin_pos ","node source_range ","node parent ","node parent masgn_type? ","node parent  source_range begin_pos ","node parent  source_range ","node parent  parent ","node parent  parent masgn_type? "]}," RuboCop Cop Lint IneffectiveAccessModifier correct_visibility?":{"type":"method","name":"correct_visibility?","children":[],"call":["ignored_methods include? ","node method_name ","modifier method_name == ","modifier method_name ","modifier nil? ","modifier method? "]}," RuboCop Cop Lint IneffectiveAccessModifier access_modifier?":{"type":"method","name":"access_modifier?","children":[],"call":["node method? ! ","node method? ","node bare_access_modifier? "]}," RuboCop Cop Lint IneffectiveAccessModifier ineffective_modifier":{"type":"method","name":"ineffective_modifier","children":[],"call":[" ineffective_modifier "," correct_visibility? "," access_modifier? ","child type ","node each_child_node "," private_class_method_names "]}," RuboCop Cop Lint IneffectiveAccessModifier private_class_method_names":{"type":"method","name":"private_class_method_names","children":[],"call":[" private_class_methods to_a flatten select map "," private_class_methods to_a flatten select "," private_class_methods to_a flatten "," private_class_methods to_a "," private_class_methods "]}," RuboCop Cop Layout IndentationWidth leftmost_modifier_of":{"type":"method","name":"leftmost_modifier_of","children":[],"call":["node each_ancestor to_a last ","node each_ancestor to_a ","node each_ancestor "," leftmost_modifier_of ","node parent ","node parent send_type? "]}," RuboCop Cop Corrector validate_range":{"type":"method","name":"validate_range","children":[],"call":[" raise ","@source_buffer name inspect ","@source_buffer name ","@source_buffer object_id ","range source_buffer name inspect ","range source_buffer name ","range source_buffer ","range source_buffer object_id ","range source_buffer class ","range source_buffer is_a? ","range source_buffer == ","buffer name inspect ","buffer name ","buffer object_id ","buffer class ","buffer is_a? ","buffer == ","@source_range source_buffer  name inspect ","@source_range source_buffer  name ","@source_range source_buffer  object_id ","range source_range source_buffer  name inspect ","range source_range source_buffer  name ","range source_range source_buffer  ","range source_range source_buffer  object_id ","range source_range source_buffer  class ","range source_range source_buffer  is_a? ","range source_range source_buffer  == ","range source_buffer  name inspect ","range source_buffer  name ","range source_buffer  object_id ","range source_buffer  class ","range source_buffer  is_a? ","range source_buffer  == "]}," RuboCop Cop OrderedGemNode find_gem_name":{"type":"method","name":"find_gem_name","children":[],"call":[" find_gem_name ","gem_node receiver ","gem_node str_content ","gem_node str_type? "]}," RuboCop Cop Layout MultilineAssignmentLayout check_by_enforced_style":{"type":"method","name":"check_by_enforced_style","children":[],"call":[" check_same_line_offense "," check_new_line_offense "," style "]}," RuboCop PathUtil hidden_dir?":{"type":"method","name":"hidden_dir?","children":[],"call":["dir start_with? ","File  dirname split any? ","File  dirname split ","File  dirname "]}," RuboCop PathUtil hidden_file_in_not_hidden_dir?":{"type":"method","name":"hidden_file_in_not_hidden_dir?","children":[],"call":[" hidden_dir? ! "," hidden_dir? ","File  basename start_with? ","File  basename ","File  fnmatch? ","File FNM_PATHNAME  | | ","File FNM_PATHNAME  | "," hidden_file? "]}," RuboCop OptionsValidator display_only_fail_level_offenses_with_autocorrect?":{"type":"method","name":"display_only_fail_level_offenses_with_autocorrect?","children":[],"call":["@options [] ","@options key? "]}," RuboCop Cop Style WordArray trim_string_interporation_escape_character":{"type":"method","name":"trim_string_interporation_escape_character","children":[],"call":["Regexp  last_match ","str gsub "]}," RuboCop Cop Style UnneededCondition make_ternary_form":{"type":"method","name":"make_ternary_form","children":[],"call":["node parent send_type? ","node parent ","(send\n  (send\n    (lvar :node) :if_branch) :source) join "," else_source ","node else_branch ","node if_branch source ","node if_branch ","(send\n  (lvar :if_branch) :source) join ","if_branch source "]}," RuboCop Cop Style NilComparison prefer_comparison?":{"type":"method","name":"prefer_comparison?","children":[],"call":[" style == "," style "]}," RuboCop Cop Style NilComparison style_check?":{"type":"method","name":"style_check?","children":[],"call":[" nil_comparison? "," nil_check? "," prefer_comparison? "]}," RuboCop Cop Style NilComparison message":{"type":"method","name":"message","children":[],"call":[" prefer_comparison? "]}," RuboCop Cop Style MultilineMethodSignature max_line_length":{"type":"method","name":"max_line_length","children":[],"call":[" config for_cop [] "," config for_cop "," config "]}," RuboCop Cop Style MultilineMethodSignature definition_width":{"type":"method","name":"definition_width","children":[],"call":["node loc expression source squeeze length - ","node loc end source length ","node loc end source ","node loc end ","node loc ","node loc expression source squeeze length ","node loc expression source squeeze ","node loc expression source ","node loc expression ","node source_range begin join length ","node source_range begin join ","node arguments source_range end ","node arguments source_range ","node arguments ","node source_range begin ","node source_range "]}," RuboCop Cop Style MultilineMethodSignature indentation_width":{"type":"method","name":"indentation_width","children":[],"call":[" processed_source line_indentation ","node loc expression line ","node loc expression ","node loc "," processed_source ","node source_range line ","node source_range "]}," RuboCop Cop Style MultilineMethodSignature correction_exceeds_max_line_length?":{"type":"method","name":"correction_exceeds_max_line_length?","children":[],"call":[" indentation_width + > "," max_line_length "," indentation_width + "," definition_width "," indentation_width "]}," RuboCop Cop Style MultilineMethodSignature closing_line":{"type":"method","name":"closing_line","children":[],"call":["node first_line ","node arguments last_line ","node arguments ","node arguments? "]}," RuboCop Cop Style MultilineMethodSignature opening_line":{"type":"method","name":"opening_line","children":[],"call":["node first_line "]}," RuboCop Cop Style MultilineMethodSignature on_def":{"type":"method","name":"on_def","children":[],"call":[" add_offense "," correction_exceeds_max_line_length? "," opening_line == "," closing_line "," opening_line ","node arguments? "," autocorrect ","node arguments loc begin ","node arguments loc ","node arguments "]}," RuboCop Cop Style For replacement_range":{"type":"method","name":"replacement_range","children":[],"call":["Parser Source Range  new ","node loc expression begin_pos ","node loc expression ","node loc ","node loc expression source_buffer "]}," RuboCop Cop Style For autocorrect_to_for":{"type":"method","name":"autocorrect_to_for","children":[],"call":["corrector replace "," lambda ","enumerable source ","variables source "," replacement_range ","items loc expression end_pos ","items loc expression ","items loc ","node loc begin end_pos ","node loc begin ","node loc ","variables nil? "," extract_variables "," deconstruct_each "," extract_variables  source ","  replacement_range  "," extract_variables  nil? "," extract_ extract_variables  "]}," RuboCop Cop Style For autocorrect_to_each":{"type":"method","name":"autocorrect_to_each","children":[],"call":["corrector replace "," lambda ","item source ","enumerable source "," replacement_range ","node loc begin end_pos ","node loc begin ","node loc "," deconstruct_for "," enumerable_source "," end_position ","  replacement_range  ","node loc begin  end_position  ","  end_position ition "]}," RuboCop Cop Style For autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" autocorrect_to_for "," autocorrect_to_each "," style == "," style ","EachToForCorrector  new ","ForToEachCorrector  new "]}," RuboCop Cop Style DateTime disallow_coercion?":{"type":"method","name":"disallow_coercion?","children":[],"call":[" cop_config [] ! "," cop_config [] "," cop_config "]}," RuboCop Cop Rails SaveBang persist_method?":{"type":"method","name":"persist_method?","children":[],"call":[" allowed_receiver? ! "," allowed_receiver? "," expected_signature? ","methods include? ","node method_name "]}," RuboCop Cop Rails SaveBang explicit_return?":{"type":"method","name":"explicit_return?","children":[],"call":["ret next_type? ","ret return_type? "," assignable_node parent "," assignable_node "," assignable_node parent  next_type? "," assignable_node parent   assignable_node parent urn_type? "]}," RuboCop Cop Rails SaveBang argument?":{"type":"method","name":"argument?","children":[],"call":[" assignable_node argument? "," assignable_node "]}," RuboCop Cop Rails SaveBang implicit_return?":{"type":"method","name":"implicit_return?","children":[],"call":["method children size == ","node sibling_index + ","node sibling_index ","method children size ","method children ","method block_type? ","method def_type? ","node parent "," assignable_node "," cop_config [] "," cop_config ","node parent  children size == "," assignable_node  sibling_index + "," assignable_node  sibling_index ","node parent  children size ","node parent  children ","node parent  block_type? ","node parent  def_type? "," assignable_node  parent "," assignable_ assignable_node  "]}," RuboCop Cop Rails SaveBang const_matches?":{"type":"method","name":"const_matches?","children":[],"call":["allowed_part == ","const_part to_s ","parts all? ","allowed_const split reverse zip ","const split reverse ","const split ","allowed_const split reverse ","allowed_const split ","allowed_const split reverse zip  all? "]}," RuboCop Cop Rails SaveBang receiver_chain_matches?":{"type":"method","name":"receiver_chain_matches?","children":[],"call":[" const_matches? ","node const_name ","node const_type? ","node method_name == ","receiver_part to_sym ","node method_name ","node send_type? ","node node_parts first == ","node node_parts first ","node node_parts ","node variable? ","node receiver ","allowed_receiver split reverse all? ","allowed_receiver split reverse ","allowed_receiver split ","node receiver  const_name ","node receiver  const_type? ","node receiver  method_name == ","node receiver  method_name ","node receiver  send_type? ","node receiver  node receiver _parts first == ","node receiver  node receiver _parts first ","node receiver  node receiver _parts ","node receiver  variable? ","node receiver  receiver "]}," RuboCop Cop Rails SaveBang allowed_receiver?":{"type":"method","name":"allowed_receiver?","children":[],"call":[" receiver_chain_matches? "," cop_config [] any? "," cop_config [] "," cop_config ","node receiver "]}," RuboCop Cop Rails SaveBang array_parent":{"type":"method","name":"array_parent","children":[],"call":["array array_type? ","node parent ","node parent  node parent _type? "]}," RuboCop Cop Rails SaveBang hash_parent":{"type":"method","name":"hash_parent","children":[],"call":["hash hash_type? ","pair parent ","pair pair_type? ","node parent ","pair parent  pair parent _type? ","node parent  parent ","node parent  node parent _type? "]}," RuboCop Cop Rails SaveBang assignable_node":{"type":"method","name":"assignable_node","children":[],"call":[" array_parent "," hash_parent ","node block_node "]}," RuboCop Cop Rails SaveBang add_offense_for_node":{"type":"method","name":"add_offense_for_node","children":[],"call":[" add_offense "," format ","name to_s ","node method_name ","node method_name  to_s ","node method_node method_name  "]}," RuboCop Cop Performance ChainArrayAllocation on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format "," range_between ","node source_range end_pos ","node source_range ","node loc dot begin_pos ","node loc dot ","node loc "," flat_map_candidate? ","  range_between _between ","node source_ range_between  end_pos ","node source_ range_between  "]}," RuboCop Cop Performance Casecmp build_good_method":{"type":"method","name":"build_good_method","children":[],"call":["arg source ","variable source "," parentheses? ! "," parentheses? ","arg send_type? "]}," RuboCop Cop Performance Casecmp take_method_apart":{"type":"method","name":"take_method_apart","children":[],"call":[" eq_downcase "," downcase_eq "," downcase_downcase "]}," RuboCop Cop MultilineExpressionIndentation postfix_conditional?":{"type":"method","name":"postfix_conditional?","children":[],"call":["node modifier_form? ","node if_type? "]}," RuboCop Cop IgnoredMethods ignored_methods":{"type":"method","name":"ignored_methods","children":[],"call":[" cop_config fetch "," cop_config "," cop_config slice values reduce "," cop_config slice values "," cop_config slice ","keys << "," deprecated_key "]}," RuboCop Cop IgnoredMethods ignored_method?":{"type":"method","name":"ignored_method?","children":[],"call":[" ignored_methods include? ","name to_s "," ignored_methods ","value == "," String ","value match? "," ignored_methods any? "]}," RuboCop Cop Layout EmptyLinesAroundBody valid_body_style?":{"type":"method","name":"valid_body_style?","children":[],"call":[" style != "," style ","body nil? "]}," RuboCop Cop Layout SpaceInLambdaLiteral range_of_offense":{"type":"method","name":"range_of_offense","children":[],"call":[" range_between ","node parent arguments loc expression end_pos ","node parent arguments loc expression ","node parent arguments loc ","node parent arguments ","node parent ","node parent loc expression begin_pos ","node parent loc expression ","node parent loc ","node parent arguments source_range end_pos ","node parent arguments source_range ","node parent source_range begin_pos ","node parent source_range "]}," RuboCop Cop Layout RescueEnsureAlignment alignment_source":{"type":"method","name":"alignment_source","children":[],"call":[" range_between source "," range_between ","ending end_pos ","node loc expression begin_pos ","node loc expression ","node loc ","node loc begin ","node loc name ","node type ","ending_loc end_pos ","starting_loc begin_pos ","node child_nodes first loc name ","node child_nodes first loc ","node child_nodes first ","node child_nodes ","mlhs_node loc expression ","mlhs_node loc ","mlhs_node source_range "]}," RuboCop Cop Layout ClosingParenthesisIndentation correct_column_candidates":{"type":"method","name":"correct_column_candidates","children":[],"call":["node loc column ","node loc ","left_paren column "," processed_source line_indentation ","left_paren line "," processed_source "]}," RuboCop Cop Layout ClosingParenthesisIndentation check_for_no_elements":{"type":"method","name":"check_for_no_elements","children":[],"call":[" add_offense "," message ","candidates first ","candidates include? ","right_paren column "," correct_column_candidates "," begins_its_line? ","node loc end ","node loc ","node loc begin ","correct_column - "," autocorrect ","  message  "," correct_column_candidates  first "," correct_column_candidates  include? ","node loc end  column "," candidates first _candidates "," correct_column_ correct_column_candidates  ","candidates first  - "]}," RuboCop Cop Layout ClosingParenthesisIndentation check_for_elements":{"type":"method","name":"check_for_elements","children":[],"call":[" add_offense "," message ","@column_delta zero? ","correct_column - ","right_paren column "," expected_column "," begins_its_line? ","node loc end ","node loc ","node loc begin "," autocorrect ","  message  ","correct_column -  zero? "," expected_column  - ","node loc end  column "]}," RuboCop Cop Bundler GemComment whitelisted_gem?":{"type":"method","name":"whitelisted_gem?","children":[],"call":["whitelist include? ","node first_argument value ","node first_argument "," Array "," cop_config [] "," cop_config "," Array  include? "]}," RuboCop Cop Bundler GemComment preceding_comment?":{"type":"method","name":"preceding_comment?","children":[],"call":[" comment_line? ","node2 loc expression source ","node2 loc expression ","node2 loc "," precede? ","node2 source "]}," RuboCop Cop Bundler GemComment preceding_lines":{"type":"method","name":"preceding_lines","children":[],"call":["line loc line < ","node loc line ","node loc ","line loc line ","line loc "," processed_source ast_with_comments [] select "," processed_source ast_with_comments [] "," processed_source ast_with_comments "," processed_source ","line loc line <= "]}," RuboCop Cop Bundler GemComment precede?":{"type":"method","name":"precede?","children":[],"call":["node2 loc line - == ","node2 loc line - ","node1 loc line ","node1 loc ","node2 loc line ","node2 loc ","node2 loc line - <= "]}," RuboCop Cop Bundler GemComment commented?":{"type":"method","name":"commented?","children":[],"call":[" preceding_comment? ","preceding_lines last "," preceding_lines "," preceding_lines  last ","  preceding_lines  "]}," RuboCop Cop Bundler GemComment on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," commented? "," whitelisted_gem? "," gem_declaration? "," ignored_gem? "," checked_options_present? ! "," checked_options_present? "," cop_config [] any? "," cop_config [] "," cop_config "," commented_any_descendant? "]}," RuboCop Config allowed_camel_case_file?":{"type":"method","name":"allowed_camel_case_file?","children":[],"call":[" match_path? ","pattern to_s =~ ","pattern to_s "," file_to_include? ","File  extname == ","File  extname ","(str \"[A-Z]\") match? "]}," RuboCop AST MethodIdentifierPredicates prefix_bang?":{"type":"method","name":"prefix_bang?","children":[],"call":[" loc selector is? "," loc selector "," loc "," negation_method? "]}," RuboCop AST MethodIdentifierPredicates prefix_not?":{"type":"method","name":"prefix_not?","children":[],"call":[" loc selector is? "," loc selector "," loc "," negation_method? "]}," RuboCop AST MethodIdentifierPredicates negation_method?":{"type":"method","name":"negation_method?","children":[],"call":[" method_name == "," method_name "," receiver "]}," RuboCop AST MethodDispatchNode arithmetic_operation?":{"type":"method","name":"arithmetic_operation?","children":[],"call":["ARITHMETIC_OPERATORS  include? "," method_name "]}," RuboCop AST BlockNode method_name":{"type":"method","name":"method_name","children":[],"call":[" send_node method_name "," send_node "]}," RuboCop Cop Style EmptyCaseCondition remove_case_node":{"type":"method","name":"remove_case_node","children":[],"call":["corrector remove "," range_by_whole_lines ","case_node loc keyword ","case_node loc ","  range_by_whole_lines _by_whole_lines "]}," RuboCop AST MethodDispatchNode lambda_literal?":{"type":"method","name":"lambda_literal?","children":[],"call":[" loc expression source == "," loc expression source "," loc expression "," loc "," block_literal? "]}," RuboCop AST MethodDispatchNode lambda?":{"type":"method","name":"lambda?","children":[],"call":[" command? "," block_literal? "]}," RuboCop Cop Style IfUnlessModifier named_capture_in_condition?":{"type":"method","name":"named_capture_in_condition?","children":[],"call":["node condition match_with_lvasgn_type? ","node condition "]}," RuboCop Cop Style For wrap_into_parentheses?":{"type":"method","name":"wrap_into_parentheses?","children":[],"call":["enumerable erange_type? ","enumerable irange_type? "]}," RuboCop Cop Style For enumerable_source":{"type":"method","name":"enumerable_source","children":[],"call":["enumerable source "," wrap_into_parentheses? "]}," RuboCop Cop Style For end_position":{"type":"method","name":"end_position","children":[],"call":["enumerable loc expression end end_pos ","enumerable loc expression end ","enumerable loc expression ","enumerable loc ","enumerable loc end end_pos ","enumerable loc end ","enumerable begin_type? ","node loc begin end_pos ","node loc begin ","node loc ","node do? "]}," RuboCop Cop Rails HasManyOrHasOneDependent active_resource?":{"type":"method","name":"active_resource?","children":[],"call":[" active_resource_class? ","node nil? "]}," RuboCop Cop PreferredDelimiters preferred_delimiters_config":{"type":"method","name":"preferred_delimiters_config","children":[],"call":[" config for_cop [] "," config for_cop "," config "]}," RuboCop Cop PreferredDelimiters preferred_delimiters":{"type":"method","name":"preferred_delimiters","children":[],"call":[" preferred_delimiters_config ","Hash  [] "," preferred_delimiters_config [] ","PERCENT_LITERAL_TYPES  map "," preferred_delimiters_config key? "," ensure_valid_preferred_delimiters ","(send\n  (const nil :PERCENT_LITERAL_TYPES) :map) to_h ","PERCENT_LITERAL_TYPES  to_h "]}," RuboCop Cop PreferredDelimiters ensure_valid_preferred_delimiters":{"type":"method","name":"ensure_valid_preferred_delimiters","children":[],"call":[" raise ","invalid join ","invalid empty? "," preferred_delimiters_config keys - ","PERCENT_LITERAL_TYPES  + "," preferred_delimiters_config keys "," preferred_delimiters_config "," preferred_delimiters_config keys -  join "," preferred_delimiters_config keys -  empty? "]}," RuboCop Cop PreferredDelimiters delimiters":{"type":"method","name":"delimiters","children":[],"call":[" preferred_delimiters [] split "," preferred_delimiters [] "," type "," preferred_delimiters "," preferred_delimiters [] chars "]}," RuboCop Cop PreferredDelimiters initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop Cop Metrics ModuleLength on_casgn":{"type":"method","name":"on_casgn","children":[],"call":[" check_code_length "," module_definition? "]}," RuboCop Cop Metrics ClassLength on_casgn":{"type":"method","name":"on_casgn","children":[],"call":[" check_code_length "," class_definition? ","block_node class_definition? ","node parent children [] ","node parent children ","node parent ","block_node respond_to? ","parent parent children [] ","parent parent children ","parent parent ","parent children [] ","parent children ","node parent children []  class_definition? ","parent parent children []  class_definition? ","parent children []  class_definition? ","node node parent  children [] ","node node parent  children ","node node parent  ","node parent children []  respond_to? ","parent parent children []  respond_to? ","parent children []  respond_to? ","node parent  node parent  children [] ","node parent  node parent  children ","node parent  node parent  ","node parent  children [] ","node parent  children "]}," RuboCop Cop Layout EmptyLinesAroundAccessModifier on_sclass":{"type":"method","name":"on_sclass","children":[],"call":["self_node source_range first_line ","self_node source_range ","self_node source_range last_line ","node source_range last_line ","node source_range ","node identifier source_range first_line ","node identifier source_range ","node identifier "]}," RuboCop Cop Layout EmptyLinesAroundAccessModifier on_module":{"type":"method","name":"on_module","children":[],"call":["node source_range first_line ","node source_range ","node source_range last_line "]}," RuboCop Cop Layout EmptyLinesAroundAccessModifier on_class":{"type":"method","name":"on_class","children":[],"call":["node source_range first_line ","node source_range ","superclass first_line ","node source_range last_line ","node parent_class first_line ","node parent_class "]}," RuboCop Cop Layout EmptyLineAfterGuardClause offense_location":{"type":"method","name":"offense_location","children":[],"call":["node loc end ","node loc ","node loc respond_to? "]}," RuboCop Cop Layout EmptyLineAfterGuardClause heredoc_line":{"type":"method","name":"heredoc_line","children":[],"call":["node last_line + + ","node last_line + ","node last_line ","heredoc_body last_line - ","heredoc_body first_line ","heredoc_body last_line ","heredoc_node loc heredoc_body ","heredoc_node loc ","heredoc_node loc heredoc_body  last_line - ","heredoc_node loc heredoc_body  first_line ","heredoc_node loc heredoc_body  last_line ","heredoc_node loc heredoc_node loc heredoc_body  "]}," RuboCop Cop PercentLiteralCorrector end_content":{"type":"method","name":"end_content","children":[],"call":["\n + ","result [] ","(str \"\\\\A(\\\\s*)\\\\]\") match ","source split last ","source split ","(str \"\\A(\\s*)\\]\") match  [] "]}," RuboCop Cop PercentLiteralCorrector substitute_escaped_delimiters":{"type":"method","name":"substitute_escaped_delimiters","children":[],"call":["content gsub! ","delimiters each "]}," RuboCop Cop PercentLiteralCorrector fix_escaped_content":{"type":"method","name":"fix_escaped_content","children":[],"call":[" substitute_escaped_delimiters "," escape_string ","word_node children first to_s ","word_node children first ","word_node children ","word_node children first to_s +@ "]}," RuboCop Cop PercentLiteralCorrector process_lines":{"type":"method","name":"process_lines","children":[],"call":["\n + ","lines join split first ","lines join split ","node source ","lines join ","source_in_lines [] ","node first_line - + ","node first_line - ","node first_line ","previous_line_num - + ","previous_line_num - ","source_in_lines []  join split first ","source_in_lines []  join split ","source_in_lines []  join ","source_in_source_in_lines []  [] "]}," RuboCop Cop PercentLiteralCorrector first_line?":{"type":"method","name":"first_line?","children":[],"call":["node first_line == ","node first_line "]}," RuboCop Cop PercentLiteralCorrector line_breaks":{"type":"method","name":"line_breaks","children":[],"call":[" process_lines ","node first_line == ","node first_line ","node_indx zero? "," first_line? ","source split ","node_index zero? "]}," RuboCop Cop PercentLiteralCorrector process_multiline_words":{"type":"method","name":"process_multiline_words","children":[],"call":["line_breaks + "," fix_escaped_content ","word_node first_line "," line_breaks ","node source ","node children map with_index ","node children map ","node children ","node first_line ","word_node last_line "," line_breaks  + "," fix_escaped_ fix_escaped_content  ","  line_breaks  "]}," RuboCop Cop PercentLiteralCorrector autocorrect_words":{"type":"method","name":"autocorrect_words","children":[],"call":["(send\n  (send\n    (lvar :node) :children) :map) join "," fix_escaped_content ","node children map ","node children "]}," RuboCop Cop PercentLiteralCorrector autocorrect_multiline_words":{"type":"method","name":"autocorrect_multiline_words","children":[],"call":["contents join ","contents << "," end_content ","node source "," process_multiline_words "," process_multiline_words  join "," process_multiline_words  << "]}," RuboCop Cop PercentLiteralCorrector new_contents":{"type":"method","name":"new_contents","children":[],"call":[" autocorrect_words "," autocorrect_multiline_words ","node multiline? "]}," RuboCop Cop PercentLiteralCorrector delimiters_for":{"type":"method","name":"delimiters_for","children":[],"call":["PreferredDelimiters  new delimiters ","PreferredDelimiters  new "," preferred_delimiters "," config "]}," RuboCop Cop PercentLiteralCorrector escape_words?":{"type":"method","name":"escape_words?","children":[],"call":[" needs_escaping? ","w children [] ","w children ","node children any? ","node children "]}," RuboCop Cop PercentLiteralCorrector wrap_contents":{"type":"method","name":"wrap_contents","children":[],"call":["corrector replace ","delimiters [] ","node source_range "," lambda "]}," RuboCop Cop PercentLiteralCorrector correct":{"type":"method","name":"correct","children":[],"call":[" wrap_contents "," new_contents "," delimiters_for ","char upcase "," escape_words? "," wrap_ new_contents  "," new_ new_contents  ","  delimiters_for _for ","char upcase  upcase ","  escape_words? _words? "]}," RuboCop Cop PercentLiteralCorrector initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rubocop Cop RescueModifier inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","ident [] lineno ","ident [] "," find_first "," each ","s loc line ","s loc "," on_node ","ident [] ident [] lineno  "," find_first  [] lineno "," find_first  [] "]}," Rubocop Cop RescueException valid_case?":{"type":"method","name":"valid_case?","children":[],"call":["s [] [] [] == ","s [] [] [] ","s [] [] ","s [] ","s [] [] == ","s [] nil? "]}," Rubocop Cop RescueException inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","target_class == ","s [] [] [] [] lineno ","s [] [] [] [] ","s [] [] [] ","s [] [] ","s [] "," valid_case? "," each ","s [] [] [] []  == ","s [] [] [] [] s [] [] [] [] lineno  "]}," Rubocop Cop ReduceArguments find_brace_block":{"type":"method","name":"find_brace_block","children":[],"call":["tokens [] type != ","tokens [] type ","tokens [] ","stack empty? ","stack pop ","t type == ","t type ","stack push ","ix + ","(sym :on_lbrace) include? ","t pos lineno != ","tokens [] pos lineno ","tokens [] pos ","t pos lineno ","t pos ","tokens [] each_with_index "]}," Rubocop Cop ReduceArguments find_reduce_blocks":{"type":"method","name":"find_reduce_blocks","children":[],"call":["blocks << "," find_brace_block ","tokens [] text == ","tokens [] text ","tokens [] ","ix - ","(send\n  (lvar :t) :type) == ","t text ","t type ","tokens each_with_index "," find_brace_block s << "," find_brace_ find_brace_block  "]}," Rubocop Cop ReduceArguments arguments_named_properly?":{"type":"method","name":"arguments_named_properly?","children":[],"call":["(send\n  (lvar :t) :type) == ","t text ","t type ","a == ","tokens [] each ","tokens [] "]}," Rubocop Cop ReduceArguments inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","tokens [] pos lineno ","tokens [] pos ","tokens [] "," arguments_named_properly? "," find_reduce_blocks each "," find_reduce_blocks "]}," Rubocop Cop PercentR inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","t1 pos lineno ","t1 pos ","t2 text !~ ","t2 text ","t1 text =~ ","t1 text ","t1 type == ","t1 type ","tokens each_cons "]}," Rubocop Cop PercentLiterals inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence "," sprintf ","t text [] ","t text ","t pos lineno ","t pos ","t text downcase start_with? ","t text downcase ","BAD_LITERALS  [] ","t type ","tokens [] ","tokens each_index "," sprintokens [] f ","tokens []  tokens [] extokens []  [] ","tokens []  tokens [] extokens []  ","tokens []  pos lineno ","tokens []  pos ","tokens []  tokens [] extokens []  downcase stokens [] artokens [] _witokens [] h? ","tokens []  tokens [] extokens []  downcase ","tokens []  tokens [] ype ","tokens [] okens [] ","tokens [] okens each_index "]}," Rubocop Cop OpMethod inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence "," sprintf ","s [] [] ","s [] ","param [] lineno ","param [] ","param [] == ","s [] [] [] [] ","s [] [] [] ","(str \"[]\") include? ! ","(str \"[]\") include? ","s [] [] == "," each ","params [] [] lineno ","params [] [] ","params [] ","params [] [] == "," parameters "," binary_operator? ","s [] [] [] []  [] lineno ","s [] [] []  [] lineno ","s [] [] [] []  [] ","s [] [] []  [] ","s [] [] [] []  [] == ","s [] [] []  [] == ","s [] [] [] [] s [] [] lineno ","s [] [] [] s [] [] lineno "," parameters  [] [] lineno ","s [] [] [] [] s [] [] ","s [] [] [] s [] [] "," parameters  [] [] ","s [] [] [] [] s [] ","s [] [] [] s [] "," parameters  [] ","s [] [] [] [] s [] [] == ","s [] [] [] s [] [] == "," parameters  [] [] == "," s [] [] [] [] eters "," s [] [] [] eters "]}," Rubocop Cop MethodLength def_and_end_lines":{"type":"method","name":"def_and_end_lines","children":[],"call":["t2 pos lineno ","t2 pos ","t1 pos lineno ","t1 pos ","(send\n  (send\n    (lvar :t1) :pos) :column) == ","t pos column ","t pos ","t text ","t type ","t1 pos column ","tokens [] find ","tokens [] "," lambda ","t_ix + ","tokens []  pos lineno ","tokens []  pos ","(send\n  (send\n    (lvar :tokens [] ) :pos) :column) == ","tokens []  pos column "]}," Rubocop Cop MethodLength def_token_indices":{"type":"method","name":"def_token_indices","children":[],"call":["source [] !~ ","source [] ","t pos lineno - ","t pos lineno ","t pos ","source [] [] != ","source [] [] ","t pos column - ","t pos column ","(send\n  (lvar :t) :type) == ","t text ","t type ","tokens [] ","tokens each_index select ","tokens each_index ","tokens []  pos lineno - ","tokens []  pos lineno ","tokens []  pos ","tokens []  pos column - ","tokens []  pos column ","(send\n  (lvar :tokens [] ) :tokens [] ype) == ","tokens []  tokens [] extokens []  ","tokens []  tokens [] ype ","tokens [] okens [] ","tokens [] okens each_index selectokens []  ","tokens [] okens each_index "]}," Rubocop Cop MethodLength calculate_length":{"type":"method","name":"calculate_length","children":[],"call":["lines size ","line =~ ","lines reject ","MethodLength  count_comments? ","source [] reject ","source [] ","end_lineno - ","MethodLength  config [] ","MethodLength  config ","lines reject! "," count_comments? ","lines map! reject! ","lines map! ","source lines to_a [] ","source lines to_a ","source lines ","source [] reject  size ","source lines to_a []  size ","source [] reject  reject ","source lines to_a []  reject ","source [] reject  reject! ","source lines to_a []  reject! ","source [] reject  map! reject! ","source lines to_a []  map! reject! ","source [] reject  map! ","source lines to_a []  map! ","source source [] reject  to_a [] ","source source lines to_a []  to_a [] ","source source [] reject  to_a ","source source lines to_a []  to_a ","source source [] reject  ","source source lines to_a []  "]}," Rubocop Cop MethodLength count_comments?":{"type":"method","name":"count_comments?","children":[],"call":["MethodLength  config [] ","MethodLength  config "]}," Rubocop Cop MethodLength max":{"type":"method","name":"max","children":[],"call":[]}," Rubocop Cop MethodLength inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence "," sprintf ","MethodLength  max ","length > "," calculate_length "," def_and_end_lines "," def_token_indices each "," def_token_indices ","MethodLength  config [] ","MethodLength  config ","MethodLength  MethodLength  config []  "," calculate_length  > "," calculate_ calculate_length  "]}," Rubocop Cop HashLiteral inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","potential_class [] lineno ","potential_class [] ","s [] == ","s [] ","s [] [] [] == ","s [] [] [] ","s [] [] ","potential_class [] == "," each ","o explode ","offences each ","offences delete ","Offence  new ","receiver [] lineno ","receiver [] ","s [] != ","method_name == ","receiver [] == ","s [] [] != "," preliminary_scan ","s [] [] []  [] lineno ","s [] [] []  [] ","s [] [] []  [] == "," preliminary_scan  each "," preliminary_scan  delete ","s [] [] []  == "]}," Rubocop Cop HandleExceptions inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence "," all_positions [] lineno + "," all_positions [] lineno "," all_positions [] "," all_positions ","rs [] == ","rs [] "," each "]}," Rubocop Cop FavorPercentR inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","t1 pos lineno ","t1 pos ","t2 text scan size > ","t2 text scan size ","t2 text scan ","t2 text ","t1 text == ","t1 text ","t1 type == ","t1 type ","tokens each_cons "]}," Rubocop Cop EnsureReturn ensure_end?":{"type":"method","name":"ensure_end?","children":[],"call":["t pos column == ","t pos column ","t pos ","t text == ","t text ","t type == ","t type "]}," Rubocop Cop EnsureReturn ensure_start?":{"type":"method","name":"ensure_start?","children":[],"call":["t text == ","t text ","t type == ","t type "]}," Rubocop Cop EnsureReturn inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","t pos lineno ","t pos ","t text == ","t text ","t type == ","t type "," ensure_end? ","t pos column "," ensure_start? ","tokens [] ","tokens each_index ","tokens []  pos lineno ","tokens []  pos ","tokens []  tokens [] extokens []  == ","tokens []  tokens [] extokens []  ","tokens []  tokens [] ype == ","tokens []  tokens [] ype ","tokens []  pos column "," ensure_stokens [] artokens [] ? ","tokens [] okens [] ","tokens [] okens each_index "]}," Rubocop Cop Cop find_first":{"type":"method","name":"find_first","children":[],"call":[" find_all first "," find_all "]}," Rubocop Cop Cop find_all":{"type":"method","name":"find_all","children":[],"call":["result << "," each "]}," Rubocop Cop BraceAfterPercent inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","t pos lineno ","t pos ","t text [] != ","t text [] ","t text ","t text downcase start_with? ","t text downcase ","LITERALS  [] ","t type ","tokens [] ","tokens each_index ","t text start_with? ","literals each "," Array ","tokens []  pos lineno ","tokens []  pos ","tokens []  tokens [] extokens []  [] != ","tokens []  tokens [] extokens []  [] ","tokens []  tokens [] extokens []  ","tokens []  tokens [] extokens []  downcase stokens [] artokens [] _witokens [] h? ","tokens []  tokens [] extokens []  downcase ","tokens []  tokens [] ype ","LITERALS  [] s [] ","tokens [] okens [] ","LITERALS  [] s each_index ","tokens [] okens each_index ","tokens []  tokens [] extokens []  stokens [] artokens [] _witokens [] h? ","litokens [] erals each "," Array  each "]}," Rubocop Cop AsciiIdentifiersAndComments inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","t pos lineno ","t pos ","t text =~ ","t text ","(sym :on_ident) include? ","t type ","tokens each "]}," Rubocop Cop ArrayLiteral inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","potential_class [] lineno ","potential_class [] ","s [] == ","s [] ","s [] [] [] == ","s [] [] [] ","s [] [] ","potential_class [] == "," each ","o explode ","offences each ","offences delete ","Offence  new ","receiver [] lineno ","receiver [] ","s [] != ","method_name == ","receiver [] == ","s [] [] != "," preliminary_scan ","s [] [] []  [] lineno ","s [] [] []  [] ","s [] [] []  [] == "," preliminary_scan  each "," preliminary_scan  delete ","s [] [] []  == "]}," Rubocop CLI log_error":{"type":"method","name":"log_error","children":[],"call":["STDERR  puts ","e message ","e class ","$options [] ","@options [] "," warn "]}," Rubocop CLI each_mentioned_cop":{"type":"method","name":"each_mentioned_cop","children":[],"call":["cops split each ","cops split ","(send\n  (send\n    (const\n      (const nil :Cop) :Cop) :all) :map) join ","c name split last ","c name split ","c name ","Cop Cop  all map ","Cop Cop  all ","cops include? ","match captures ","line match ","Cop Cop  all map join ","(send\n  (send\n    (const\n      (const nil :Cop) :Cop) :all) :map) join  split each ","Cop Cop  all map join  split each ","(send\n  (send\n    (const\n      (const nil :Cop) :Cop) :all) :map) join  split ","Cop Cop  all map join  split ","(send\n  (send\n    (const\n      (const nil :Cop) :Cop) :all) :map) join  include? ","Cop Cop  all map join  include? ","line match  captures ","line line match  "]}," Rubocop CLI disabled_lines_in":{"type":"method","name":"disabled_lines_in","children":[],"call":["ix + ","disabled_lines [] ","kind == "," each_mentioned_cop ","disabled_section [] ","disabled_section keys each ","disabled_section keys ","disabled_section []= ","source each_with_index ","\\S.* + "," sprintf ","^\\s* + ","# rubocop : (%s)\\b ((?:\\w+,? )+) gsub ","Hash  new ","Hash  new  [] "]}," Rubocop CLI display_summary":{"type":"method","name":"display_summary","children":[],"call":[" puts ","(begin\n  (lvar :offences_string)) send ","total_offences zero? ","total_offences == "," print ","num_files > ","(str \"\\n\") color ","errors_count > ","(begin\n  (lvar :offences_string)) color ","errors each ","errors count ","errors count > ","num_files == "]}," Rubocop Cop SymbolSnakeCase check_for_hash_labels":{"type":"method","name":"check_for_hash_labels","children":[],"call":[" add_offence ","s [] lineno ","s [] ","label_ident =~ ","s [] chop "," each ","s [] chop  =~ "]}," Rubocop Cop SymbolSnakeCase check_for_symbols":{"type":"method","name":"check_for_symbols","children":[],"call":[" add_offence ","s [] [] [] lineno ","s [] [] [] ","s [] [] ","s [] ","symbol_ident =~ ","symbol_type == "," each ","s [] [] == ","s [] [] []  =~ ","s [] [] []  == ","s [] []  == "]}," Rubocop Cop AsciiIdentifiers inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","t pos lineno ","t pos ","t text =~ ","t text ","t type == ","t type ","tokens each ","t pos line "]}," Rubocop Cop AsciiComments inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","t pos lineno ","t pos ","t text =~ ","t text ","t type == ","t type ","tokens each ","comment loc line ","comment loc ","comment text =~ ","comment text ","comments each "]}," RuboCop Options add_auto_gen_options":{"type":"method","name":"add_auto_gen_options","children":[],"call":["@options []= "," option ","@validator validate_exclude_limit_option ","@options replace ","ConfigRegeneration  new options merge ","ConfigRegeneration  new options ","ConfigRegeneration  new "]}," RuboCop Formatter DisabledConfigFormatter set_max":{"type":"method","name":"set_max","children":[],"call":["key == ","cfg reject! ","cfg merge! ","cfg [] ","offense_count > ","@options [] ! ","@options [] ","@files_with_offenses [] size > ","@files_with_offenses [] size ","@files_with_offenses [] "]}," RuboCop Cop Style RedundantParentheses suspect_unary?":{"type":"method","name":"suspect_unary?","children":[],"call":["node prefix_not? ! ","node prefix_not? ","node unary_operation? ","node send_type? "]}," RuboCop Cop Style RedundantFreeze strip_parenthesis":{"type":"method","name":"strip_parenthesis","children":[],"call":["node children first ","node children ","node begin_type? "]}," RuboCop Cop Style MutableConstant mutable_literal?":{"type":"method","name":"mutable_literal?","children":[],"call":["value mutable_literal? "," frozen_regexp_or_range_literals? ","value nil? "]}," RuboCop Cop Registry enabled?":{"type":"method","name":"enabled?","children":[],"call":["cfg fetch ","config for_cop ","cfg fetch == "," enabled_pending_cop? "," options fetch "," options "," options fetch include? ","cop cop_name "," options [] ","config for_cop  fetch ","config for_cop  fetch == "]}," RuboCop Cop Rails SkipsModelValidations whitelist":{"type":"method","name":"whitelist","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop HashAlignment KeyAlignment value_delta":{"type":"method","name":"value_delta","children":[],"call":["correct_value_column - ","pair value loc column ","pair value loc ","pair value ","pair loc operator end column + ","pair loc operator end column ","pair loc operator end ","pair loc operator ","pair loc ","pair value_on_new_line? ","pair kwsplat_type? ","pair loc operator end column +  - "]}," RuboCop Cop HashAlignment KeyAlignment separator_delta":{"type":"method","name":"separator_delta","children":[],"call":["correct_separator_column - ","pair loc operator column ","pair loc operator ","pair loc ","pair key loc expression end column + ","pair key loc expression end column ","pair key loc expression end ","pair key loc expression ","pair key loc ","pair key ","pair hash_rocket? ","pair key loc expression end column +  - "]}," RuboCop Cop CheckAssignment on_lvasgn":{"type":"method","name":"on_lvasgn","children":[],"call":[" check_assignment "," extract_rhs "]}," RuboCop Cop Metrics Utils AbcSizeCalculator calculate":{"type":"method","name":"calculate","children":[],"call":["Math  sqrt round ","Math  sqrt ","@assignment ** + + ","@condition ** ","@assignment ** + ","@branch ** ","@assignment ** "," node_has_else_branch? ","CONDITION_NODES  include? ","child type "," evaluate_branch_nodes ","BRANCH_NODES  include? ","child assignment? ","@node each_node "," evaluate_condition_node "," condition? "," branch? "," assignment? "," calculate_node "," visit_depth_last ","(send\n  (ivar :@assignment) :**\n  (int 2)) + + ","(send\n  (ivar :@assignment) :**\n  (int 2)) + "]}," RuboCop Cop Metrics LineLength indentation_difference":{"type":"method","name":"indentation_difference","children":[],"call":["line match [] size * "," tab_indentation_width - "," tab_indentation_width ","line match [] size ","line match [] ","line match "]}," RuboCop Cop Lint PercentSymbolArray non_alphanumeric_literal?":{"type":"method","name":"non_alphanumeric_literal?","children":[],"call":["literal !~ ","(str \"[[:alnum:]]\") match? ! ","(str \"[[:alnum:]]\") match? "]}," RuboCop Cop Layout RescueEnsureAlignment access_modifier_node":{"type":"method","name":"access_modifier_node","children":[],"call":["access_modifier_node access_modifier? ","access_modifier_node respond_to? ","node ancestors first ","node ancestors ","ANCESTOR_TYPES_WITH_ACCESS_MODIFIERS  include? ","node type "," access_modifier? ","node ancestors first  access_modifier? ","node ancestors first  respond_to? "]}," RuboCop Cop Layout RescueEnsureAlignment alignment_node":{"type":"method","name":"alignment_node","children":[],"call":["access_modifier_node nil? "," access_modifier_node ","ancestor_node nil? "," ancestor_node ","assignment_node nil? "," assignment_node ","ancestor_node kwbegin_type? "," same_line? "," aligned_with_line_break_method? ","ancestor_node respond_to? "," access_modifier_node  nil? ","  access_modifier_node  "," ancestor_node  nil? ","  ancestor_node  "," assignment_node  nil? ","  assignment_node  "," ancestor_node  kwbegin_type? "," ancestor_node  respond_to? "]}," RuboCop Cop Layout EmptyLinesAroundAccessModifier on_block":{"type":"method","name":"on_block","children":[],"call":["node source_range first_line ","node source_range "]}," RuboCop Cop Generator bump_minor_version":{"type":"method","name":"bump_minor_version","children":[],"call":["versions [] succ ","versions [] ","RuboCop Version STRING  split ","RuboCop Version STRING  split  [] succ ","RuboCop Version STRING  split  [] "]}," RuboCop AST Node conditional?":{"type":"method","name":"conditional?","children":[],"call":["CONDITIONALS  include? "," type "]}," RuboCop AST Node basic_conditional?":{"type":"method","name":"basic_conditional?","children":[],"call":["BASIC_CONDITIONALS  include? "," type "]}," RuboCop AST Node assignment?":{"type":"method","name":"assignment?","children":[],"call":["ASSIGNMENTS  include? "," type "]}," RuboCop AST Node shorthand_asgn?":{"type":"method","name":"shorthand_asgn?","children":[],"call":["SHORTHAND_ASSIGNMENTS  include? "," type "]}," RuboCop AST Node equals_asgn?":{"type":"method","name":"equals_asgn?","children":[],"call":["EQUALS_ASSIGNMENTS  include? "," type "]}," RuboCop AST PairNode value_on_new_line?":{"type":"method","name":"value_on_new_line?","children":[],"call":[" key loc line != "," value loc line "," value loc "," value "," key loc line "," key loc "," key "]}," RuboCop AST MethodDispatchNode binary_operation?":{"type":"method","name":"binary_operation?","children":[],"call":[" loc expression begin_pos != "," loc selector begin_pos "," loc selector "," loc "," loc expression begin_pos "," loc expression "," operator_method? "]}," RuboCop AST MethodDispatchNode unary_operation?":{"type":"method","name":"unary_operation?","children":[],"call":[" loc expression begin_pos == "," loc selector begin_pos "," loc selector "," loc "," loc expression begin_pos "," loc expression "," operator_method? "]}," RuboCop Runner aborting?":{"type":"method","name":"aborting?","children":[],"call":[]}," RuboCop Runner trap_interrupt":{"type":"method","name":"trap_interrupt","children":[],"call":[" warn "," aborting= "," exit! "," aborting? ","Signal  trap "]}," RuboCop RemoteConfig generate_request":{"type":"method","name":"generate_request","children":[],"call":["request []= ","File  stat mtime rfc2822 ","File  stat mtime ","File  stat "," cache_path "," cache_path_exists? ","Net HTTP Get  new ","uri request_uri ","request basic_auth ","uri password ","uri user ","Net HTTP Get  new  []= ","uri Net HTTP Get  new _uri ","Net HTTP Get  new  basic_auth "]}," RuboCop Cop Style RegexpLiteral calculate_replacement":{"type":"method","name":"calculate_replacement","children":[],"call":["(str \"%r\") zip map ","(str \"%r\") zip "," preferred_delimiters "," slash_literal? "]}," RuboCop Cop Style RegexpLiteral inner_slash_for":{"type":"method","name":"inner_slash_for","children":[],"call":["(str \"/\") include? "]}," RuboCop Cop Style RegexpLiteral inner_slash_after_correction":{"type":"method","name":"inner_slash_after_correction","children":[],"call":[" inner_slash_for "," calculate_replacement first "," calculate_replacement "]}," RuboCop Cop Style RegexpLiteral inner_slash_before_correction":{"type":"method","name":"inner_slash_before_correction","children":[],"call":[" inner_slash_for ","node loc begin source ","node loc begin ","node loc "]}," RuboCop Cop Style RegexpLiteral inner_slash_indices":{"type":"method","name":"inner_slash_indices","children":[],"call":["indices << ","text index ","index + "," inner_slash_before_correction "," node_body ","text text index  "," node_body  index ","text index  + "]}," RuboCop Cop Style RegexpLiteral correct_inner_slashes":{"type":"method","name":"correct_inner_slashes","children":[],"call":["corrector replace "," inner_slash_after_correction "," range_between ","start + "," inner_slash_before_correction length "," inner_slash_before_correction ","regexp_begin + "," inner_slash_indices each "," inner_slash_indices ","node loc begin end_pos ","node loc begin ","node loc ","regexp_begin +  + ","node loc begin end_pos  + "]}," RuboCop Cop Style RegexpLiteral correct_delimiters":{"type":"method","name":"correct_delimiters","children":[],"call":["corrector replace ","replacement last ","node loc end ","node loc ","replacement first ","node loc begin "," calculate_replacement "," calculate_replacement  last "," calculate_replacement  first "," calculate_ calculate_replacement  "]}," RuboCop Cop Style MethodCallWithArgsParentheses hash_literal?":{"type":"method","name":"hash_literal?","children":[],"call":["node braces? ","node hash_type? "]}," RuboCop Cop Style MethodCallWithArgsParentheses logical_operator?":{"type":"method","name":"logical_operator?","children":[],"call":["node logical_operator? ","node or_type? ","node and_type? "]}," RuboCop Cop Style MethodCallWithArgsParentheses ternary_if?":{"type":"method","name":"ternary_if?","children":[],"call":["node ternary? ","node if_type? "]}," RuboCop Cop Style MethodCallWithArgsParentheses splat?":{"type":"method","name":"splat?","children":[],"call":["node block_pass_type? ","node kwsplat_type? ","node splat_type? "]}," RuboCop Cop Style MethodCallWithArgsParentheses allowed_chained_call_with_parentheses?":{"type":"method","name":"allowed_chained_call_with_parentheses?","children":[],"call":[" allowed_chained_call_with_parentheses? ","previous parenthesized? ","previous send_type? ","node descendants first ","node descendants "," cop_config [] "," cop_config ","node descendants first  parenthesized? ","node descendants first  send_type? "]}," RuboCop Cop Style MethodCallWithArgsParentheses allowed_multiline_call_with_parentheses?":{"type":"method","name":"allowed_multiline_call_with_parentheses?","children":[],"call":["node multiline? "," cop_config [] "," cop_config "]}," RuboCop Cop Style MethodCallWithArgsParentheses hash_literal_in_arguments?":{"type":"method","name":"hash_literal_in_arguments?","children":[],"call":["node descendants any? "," method ","node descendants ","n send_type? "," hash_literal? ","node arguments any? ","node arguments "]}," RuboCop Cop Style MethodCallWithArgsParentheses call_as_argument?":{"type":"method","name":"call_as_argument?","children":[],"call":["node parent send_type? ","node parent "]}," RuboCop Cop Style MethodCallWithArgsParentheses call_with_braced_block?":{"type":"method","name":"call_with_braced_block?","children":[],"call":["node block_node braces? ","node block_node ","node send_type? ","node super_type? "]}," RuboCop Cop Style MethodCallWithArgsParentheses call_with_ambiguous_arguments?":{"type":"method","name":"call_with_ambiguous_arguments?","children":[],"call":[" logical_operator? "," ternary_if? "," splat? ","node descendants any? ","node descendants "," hash_literal_in_arguments? "," call_as_argument? "," call_with_braced_block? "," ambigious_literal? "," call_as_argument_or_chain? "]}," RuboCop Cop Style MethodCallWithArgsParentheses call_in_logical_operators?":{"type":"method","name":"call_in_logical_operators?","children":[],"call":["node parent descendants any? "," method ","node parent descendants ","node parent "," logical_operator? ","node parent arguments any? ","node parent arguments ","node parent send_type? "]}," RuboCop Cop Style MethodCallWithArgsParentheses call_in_literals?":{"type":"method","name":"call_in_literals?","children":[],"call":[" ternary_if? ","node parent ","node parent array_type? ","node parent pair_type? "," splat? ","node parent range_type? "]}," RuboCop Cop Style MethodCallWithArgsParentheses eligible_for_parentheses_presence?":{"type":"method","name":"eligible_for_parentheses_presence?","children":[],"call":[" allowed_chained_call_with_parentheses? "," allowed_multiline_call_with_parentheses? "," call_in_logical_operators? "," call_with_ambiguous_arguments? "," call_in_literals? "]}," RuboCop Cop Style MethodCallWithArgsParentheses camel_case_method_call_without_arguments?":{"type":"method","name":"camel_case_method_call_without_arguments?","children":[],"call":["node arguments none? ","node arguments ","node camel_case_method? "]}," RuboCop Cop Style MethodCallWithArgsParentheses super_call_without_arguments?":{"type":"method","name":"super_call_without_arguments?","children":[],"call":["node arguments none? ","node arguments ","node super_type? "]}," RuboCop Cop Style MethodCallWithArgsParentheses parentheses_at_the_end_of_multiline_call?":{"type":"method","name":"parentheses_at_the_end_of_multiline_call?","children":[],"call":["node loc begin source_line gsub end_with? ","node loc begin source_line gsub ","node loc begin source_line ","node loc begin ","node loc ","node multiline? "]}," RuboCop Cop Style MethodCallWithArgsParentheses eligible_for_parentheses_omission?":{"type":"method","name":"eligible_for_parentheses_omission?","children":[],"call":[" ignore_macros? ","node setter_method? ","node operator_method? "," ignored_macro? "]}," RuboCop Cop Style MethodCallWithArgsParentheses autocorrect_for_omit_parentheses":{"type":"method","name":"autocorrect_for_omit_parentheses","children":[],"call":["corrector remove ","node loc end ","node loc ","corrector replace "," args_begin "," parentheses_at_the_end_of_multiline_call? "," lambda "]}," RuboCop Cop Style MethodCallWithArgsParentheses autocorrect_for_require_parentheses":{"type":"method","name":"autocorrect_for_require_parentheses","children":[],"call":["corrector insert_after "," args_end "," args_parenthesized? ","corrector replace "," args_begin "," lambda "]}," RuboCop Cop Style MethodCallWithArgsParentheses add_offense_for_omit_parentheses":{"type":"method","name":"add_offense_for_omit_parentheses","children":[],"call":[" add_offense ","node loc begin join ","node loc end ","node loc ","node loc begin "," eligible_for_parentheses_presence? "," camel_case_method_call_without_arguments? "," super_call_without_arguments? ","node implicit_call? ","node parenthesized? "," legitimate_call_with_parentheses? "," allowed_camel_case_method_call? "]}," RuboCop Cop Style MethodCallWithArgsParentheses add_offense_for_require_parentheses":{"type":"method","name":"add_offense_for_require_parentheses","children":[],"call":[" add_offense ","node parenthesized? ! ","node parenthesized? ","node arguments? "," eligible_for_parentheses_omission? "," ignored_method? ","node method_name "," ignored_method_pattern? "," matches_ignored_pattern? "]}," RuboCop Cop Style MethodCallWithArgsParentheses message":{"type":"method","name":"message","children":[],"call":["Omit parentheses for method calls with arguments. freeze ","Use parentheses for method calls with arguments. freeze "," style "]}," RuboCop Cop Style InfiniteLoop referenced_after_loop?":{"type":"method","name":"referenced_after_loop?","children":[],"call":["r node source_range begin_pos > ","r node source_range begin_pos ","r node source_range ","r node ","var references any? ","var references ","range end_pos ","r nodrange end_pos  sourcrange end_pos _rangrange end_pos  brange end_pos gin_pos > ","r nodrange end_pos  sourcrange end_pos _rangrange end_pos  brange end_pos gin_pos ","r nodrange end_pos  sourcrange end_pos _rangrange end_pos  ","r nodrange end_pos  ","var rrange end_pos frange end_pos rrange end_pos ncrange end_pos s any? ","var rrange end_pos frange end_pos rrange end_pos ncrange end_pos s ","rangrange end_pos  range end_pos nd_pos "]}," RuboCop Cop Style InfiniteLoop assigned_before_loop?":{"type":"method","name":"assigned_before_loop?","children":[],"call":["a node source_range end_pos < ","a node source_range end_pos ","a node source_range ","a node ","var assignments any? ","var assignments ","range begin_pos ","range range begin_pos egin_pos "]}," RuboCop Cop Style InfiniteLoop assigned_inside_loop?":{"type":"method","name":"assigned_inside_loop?","children":[],"call":["range contains? ","a node source_range ","a node ","var assignments any? ","var assignments "]}," RuboCop Cop Style InfiniteLoop while_or_until":{"type":"method","name":"while_or_until","children":[],"call":[" add_offense "," referenced_after_loop? "," assigned_before_loop? ! "," assigned_before_loop? "," assigned_inside_loop? ","@variables any? ","node source_range "," autocorrect ","node loc keyword ","node loc ","node source_node source_range  "]}," RuboCop Cop Style InfiniteLoop after_leaving_scope":{"type":"method","name":"after_leaving_scope","children":[],"call":["@variables concat ","scope variables values ","scope variables "]}," RuboCop Cop Style InfiniteLoop join_force?":{"type":"method","name":"join_force?","children":[],"call":["force_class == "]}," RuboCop Cop Style For suspect_enumerable?":{"type":"method","name":"suspect_enumerable?","children":[],"call":["node send_node arguments? ! ","node send_node arguments? ","node send_node ","node send_node method? ","node multiline? ","node method? "]}," RuboCop Cop Style EmptyCaseCondition keep_first_when_comment":{"type":"method","name":"keep_first_when_comment","children":[],"call":["corrector insert_before ","case_node parent ! ","case_node parent ","comment empty? ! ","comment empty? "," range_by_whole_lines ","case_node source_range "," processed_source comments_before_line map join "," processed_source comments_before_line map "," processed_source comments_before_line ","first_when_node loc keyword line ","first_when_node loc keyword ","first_when_node loc "," processed_source ","case_range adjust ","case_range column -@ ","case_range column ","(send\n  (send\n    (send nil :processed_source) :each_comment_in_lines\n    (erange\n      (send\n        (lvar :case_range) :first_line)\n      (send\n        (lvar :case_range) :last_line))) :map) join ","comment text "," processed_source each_comment_in_lines map "," processed_source each_comment_in_lines ","case_range last_line ","case_range first_line ","  * "," processed_source comments_before_line map join  empty? ! "," processed_source comments_before_line map join  empty? "," range_by_whole_ range_by_whole_lines s "," processed_source comments_before_ range_by_whole_lines  map join "," processed_source  processed_source comments_before_line map join s_before_line map join "," processed_source (send\n  (send\n    (send nil :processed_source) :each_comment_in_lines\n    (erange\n      (send\n        (lvar :case_range) :first_line)\n      (send\n        (lvar :case_range) :last_line))) :map) join _before_line map join "," processed_source comments_before_ range_by_whole_lines  map "," processed_source  processed_source comments_before_line map join s_before_line map "," processed_source (send\n  (send\n    (send nil :processed_source) :each_comment_in_lines\n    (erange\n      (send\n        (lvar :case_range) :first_line)\n      (send\n        (lvar :case_range) :last_line))) :map) join _before_line map "," processed_source comments_before_ range_by_whole_lines  "," processed_source  processed_source comments_before_line map join s_before_line "," processed_source (send\n  (send\n    (send nil :processed_source) :each_comment_in_lines\n    (erange\n      (send\n        (lvar :case_range) :first_line)\n      (send\n        (lvar :case_range) :last_line))) :map) join _before_line ","first_when_node loc keyword  range_by_whole_lines  ","(send\n  (send\n    (send nil :processed_source) :each_comment_in_ range_by_whole_lines s\n    (erange\n      (send\n        (lvar :case_range) :first_ range_by_whole_lines )\n      (send\n        (lvar :case_range) :last_ range_by_whole_lines ))) :map) join ","(send\n  (send\n    (send nil :processed_source) :each_ processed_source comments_before_line map join _in_lines\n    (erange\n      (send\n        (lvar :case_range) :first_line)\n      (send\n        (lvar :case_range) :last_line))) :map) join "," processed_source comments_before_line map join  text "," processed_source each_comment_in_ range_by_whole_lines s map "," processed_source each_ processed_source comments_before_line map join _in_lines map "," processed_source each_comment_in_ range_by_whole_lines s "," processed_source each_ processed_source comments_before_line map join _in_lines ","case_range last_ range_by_whole_lines  ","case_range first_ range_by_whole_lines  "]}," RuboCop Cop Security Open concatenated_string?":{"type":"method","name":"concatenated_string?","children":[],"call":["node receiver str_type? ","node receiver ","node method? ","node send_type? "]}," RuboCop Cop Security Open interpolated_string?":{"type":"method","name":"interpolated_string?","children":[],"call":["node dstr_type? "]}," RuboCop Cop Security Open composite_string?":{"type":"method","name":"composite_string?","children":[],"call":[" concatenated_string? "," interpolated_string? "]}," RuboCop Cop Security Open simple_string?":{"type":"method","name":"simple_string?","children":[],"call":["node str_type? "]}," RuboCop Cop Security Open safe_argument?":{"type":"method","name":"safe_argument?","children":[],"call":["argument start_with? ! ","argument start_with? ","argument empty? ! ","argument empty? "]}," RuboCop Cop Rails HttpStatus NumericStyleChecker permitted_symbol?":{"type":"method","name":"permitted_symbol?","children":[],"call":["PERMITTED_STATUS  include? "," node value "," node "," node sym_type? "]}," RuboCop Cop Rails HttpPositionalArguments correction_template":{"type":"method","name":"correction_template","children":[],"call":[" parentheses? "]}," RuboCop Cop Rails HttpPositionalArguments correction":{"type":"method","name":"correction","children":[],"call":[" format ","node method_name "," correction_template "," convert_hash_data ","data last ","data size > ","data size ","data first ","http_path source ","node arguments "]}," RuboCop Cop Rails DynamicFindBy autocorrect_argument_keywords":{"type":"method","name":"autocorrect_argument_keywords","children":[],"call":["corrector insert_before ","node arguments [] loc expression ","node arguments [] loc ","node arguments [] ","node arguments ","keywords each with_index ","keywords each "]}," RuboCop Cop Rails DynamicFindBy autocorrect_method_name":{"type":"method","name":"autocorrect_method_name","children":[],"call":["corrector replace "," static_method_name ","node method_name to_s ","node method_name ","node loc selector ","node loc "]}," RuboCop Cop Performance RedundantMerge kwsplat_used?":{"type":"method","name":"kwsplat_used?","children":[],"call":["pairs any? "]}," RuboCop Cop Performance OpenStruct on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format "," open_struct "]}," RuboCop Cop TrailingComma allowed_multiline_argument?":{"type":"method","name":"allowed_multiline_argument?","children":[],"call":["Util  begins_its_line? ! ","Util  begins_its_line? ","node loc end ","node loc "," elements one? "," elements "]}," RuboCop Cop Metrics LineLength line_in_permitted_heredoc?":{"type":"method","name":"line_in_permitted_heredoc?","children":[],"call":[" allowed_heredoc include? "," allowed_heredoc "," allowed_heredoc == ","range cover? ","heredocs any? "," heredocs any? "," heredocs "]}," RuboCop Cop Lint FormatParameterMismatch max_digit_dollar_num":{"type":"method","name":"max_digit_dollar_num","children":[],"call":["(send\n  (send\n    (send\n      (lvar :node) :source) :scan\n    (const nil :DIGIT_DOLLAR_FLAG)) :map) max ","digit_dollar_num first to_i ","digit_dollar_num first ","node source scan map ","node source scan ","node source "]}," RuboCop Cop Layout SpaceAroundBlockParameters check_after_closing_pipe":{"type":"method","name":"check_after_closing_pipe","children":[],"call":[" check_space ","block body source_range begin_pos ","block body source_range ","block body ","closing_pipe end_pos ","arguments parent "," pipes ","arguments parent  body source_range begin_pos ","arguments parent  body source_range ","arguments parent  body "]}," RuboCop Cop Layout SpaceAroundBlockParameters pipes?":{"type":"method","name":"pipes?","children":[],"call":[" pipes none? "," pipes "]}," RuboCop Cop Layout SpaceAroundBlockParameters pipes":{"type":"method","name":"pipes","children":[],"call":["arguments loc end ","arguments loc ","arguments loc begin "]}," RuboCop Cop Layout RescueEnsureAlignment assignment_node":{"type":"method","name":"assignment_node","children":[],"call":["ASSIGNMENT_TYPES  include? ","assignment_node type ","node ancestors first ","node ancestors ","assignment_node assignment? ","node ancestors first  type ","node ancestors first  assignment? "]}," RuboCop Cop Layout IndentationWidth on_sclass":{"type":"method","name":"on_sclass","children":[],"call":[" check_members ","node loc keyword ","node loc "]}," RuboCop Cop Layout IndentHeredoc unlimited_heredoc_length?":{"type":"method","name":"unlimited_heredoc_length?","children":[],"call":[" config for_cop [] "," config for_cop "," config "]}," RuboCop Cop Layout IndentHeredoc longest_line":{"type":"method","name":"longest_line","children":[],"call":["(send\n  (send\n    (lvar :lines) :each_line) :max_by) chomp ","line chomp size ","line chomp ","lines each_line max_by ","lines each_line "]}," RuboCop Cop Layout IndentHeredoc line_too_long?":{"type":"method","name":"line_too_long?","children":[],"call":[" longest_line size + >= "," max_line_length "," longest_line size + "," longest_line size "," longest_line ","expected_indent - "," indent_level "," base_indent_level + "," indentation_width "," base_indent_level "," heredoc_body "," unlimited_heredoc_length? "," base_indent_level +  - "," heredoc_ heredoc_body  "]}," RuboCop Cop Layout CommentIndentation autocorrect_one":{"type":"method","name":"autocorrect_one","children":[],"call":["AlignmentCorrector  correct "," processed_source "]}," RuboCop Cop Layout CommentIndentation should_correct?":{"type":"method","name":"should_correct?","children":[],"call":["loc column == ","loc column ","loc line == ","loc line ","comment loc ","ref_loc column ","ref_loc line - ","ref_loc line ","reference_comment loc ","preceding_comment loc ","comment loc  column == ","preceding_comment loc  column == ","comment loc  column ","preceding_comment loc  column ","comment loc  line == ","preceding_comment loc  line == ","comment loc  line ","preceding_comment loc  line ","comment comment loc  ","comment preceding_comment loc  ","ref_comment loc  column ","ref_preceding_comment loc  column ","reference_comment loc  column ","ref_comment loc  line - ","ref_preceding_comment loc  line - ","reference_comment loc  line - ","ref_comment loc  line ","ref_preceding_comment loc  line ","reference_comment loc  line ","reference_comment comment loc  ","reference_comment preceding_comment loc  ","preceding_comment comment loc  ","preceding_comment preceding_comment loc  "]}," RuboCop Cop Layout CommentIndentation autocorrect_preceding_comments":{"type":"method","name":"autocorrect_preceding_comments","children":[],"call":["corrections << "," autocorrect_one "," should_correct? ","line_no - ","comments [] ","(send\n  (send\n    (lvar :comments) :index\n    (lvar :comment)) :-\n  (int 1)) downto ","comments index - ","comments index "," processed_source comments "," processed_source ","comment loc column ","comment loc ","comment loc line ","(send\n  (send\n    (send\n      (send\n        (lvar :comments) :[]\n        (irange\n          (int 0)\n          (lvar :index))) :reverse_each) :each_cons\n    (int 2)) :take_while) map ","comments [] reverse_each each_cons take_while ","comments [] reverse_each each_cons ","comments [] reverse_each ","comment loc line  - "," processed_source comments  [] ","(send\n  (send\n    (lvar : processed_source comments ) :index\n    (lvar :comment)) :-\n  (int 1)) downto ","(send\n  (send\n    (lvar :comments) :comments index \n    (lvar :comment)) :-\n  (int 1)) downto "," processed_source comments  index - ","comments comments index  - "," processed_source comments  index ","comments comments index  "," processed_source  processed_source comments  ","comment loc comment loc column  ","(send\n  (send\n    (send\n      (send\n        (lvar : processed_source comments ) :[]\n        (irange\n          (int 0)\n          (lvar :index))) :reverse_each) :each_cons\n    (int 2)) :take_while) map ","(send\n  (send\n    (send\n      (send\n        (lvar :comments) :[]\n        (irange\n          (int 0)\n          (lvar :comments index ))) :reverse_each) :each_cons\n    (int 2)) :take_while) map "," processed_source comments  [] reverse_each each_cons take_while "," processed_source comments  [] reverse_each each_cons "," processed_source comments  [] reverse_each "]}," RuboCop Cop Generator ConfigurationInjector comment?":{"type":"method","name":"comment?","children":[],"call":["yaml =~ "]}," RuboCop Cop Generator ConfigurationInjector find_target_line":{"type":"method","name":"find_target_line","children":[],"call":[" badge to_s < "," badge to_s "," badge "," comment? "," configuration_entries find with_index "," configuration_entries find "," configuration_entries "," configuration_entries size - "," configuration_entries size "," cop_name_line? "]}," RuboCop Cop Generator ConfigurationInjector new_configuration_entry":{"type":"method","name":"new_configuration_entry","children":[],"call":[" format "," version_added "," badge "]}," RuboCop Cop Generator ConfigurationInjector configuration_entries":{"type":"method","name":"configuration_entries","children":[],"call":["File  readlines "," configuration_file_path "]}," RuboCop Cop Generator ConfigurationInjector inject":{"type":"method","name":"inject","children":[],"call":[" block_given? ","File  write "," configuration_entries join "," configuration_entries "," configuration_file_path "," configuration_entries insert "," new_configuration_entry "," find_target_line "," configuration_entries push ","\n + "," new_configuration_entry + "," find_ find_target_line  "]}," RuboCop Cop Generator ConfigurationInjector initialize":{"type":"method","name":"initialize","children":[],"call":[" output "]}," RuboCop Cop MultilineLiteralBraceCorrector correct_next_line_brace":{"type":"method","name":"correct_next_line_brace","children":[],"call":["corrector insert_after "," node loc end source "," node loc end "," node loc "," node "," last_element_range_with_trailing_comma ","corrector remove "," range_with_surrounding_space ","corrector insert_before "," last_element_range_with_trailing_comma end "," content_if_comment_present "]}," RuboCop Cop MultilineLiteralBraceCorrector correct_same_line_brace":{"type":"method","name":"correct_same_line_brace","children":[],"call":["corrector insert_before ","\n freeze "," node loc end "," node loc "," node "]}," RuboCop Cop MultilineLiteralBraceCorrector call":{"type":"method","name":"call","children":[],"call":[" correct_next_line_brace "," new_line_needed_before_closing_brace? "," node "," correct_same_line_brace "," closing_brace_on_same_line? "," corrector "," correct_heredoc_argument_method_chain "," last_element_range_with_trailing_comma end "," last_element_range_with_trailing_comma "]}," RuboCop Cop MultilineLiteralBraceCorrector initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop Cop LambdaLiteralToMethodCorrector separating_space?":{"type":"method","name":"separating_space?","children":[],"call":[" block_begin source_buffer source [] match "," block_begin source_buffer source [] "," block_begin begin_pos + "," block_begin begin_pos "," block_begin "," block_begin source_buffer source "," block_begin source_buffer "," block_begin source_buffer source [] match? "]}," RuboCop Cop LambdaLiteralToMethodCorrector arg_to_unparenthesized_call?":{"type":"method","name":"arg_to_unparenthesized_call?","children":[],"call":["current_node sibling_index > ","current_node sibling_index ","parent parenthesized_call? ","parent send_type? ","current_node parent ","parent parent ","parent pair_type? "," block_node ","parent parent  sibling_index > "," block_node  sibling_index > ","parent parent  sibling_index "," block_node  sibling_index ","current_node parent  current_node parent hesized_call? ","current_node parent  send_type? ","current_node current_node parent  ","parent parent  parent "," block_node  parent ","current_node parent  current_node parent  ","current_node parent  pair_type? "]}," RuboCop Cop LambdaLiteralToMethodCorrector selector_end":{"type":"method","name":"selector_end","children":[],"call":[" method loc selector end "," method loc selector "," method loc "," method "]}," RuboCop Cop LambdaLiteralToMethodCorrector block_begin":{"type":"method","name":"block_begin","children":[],"call":[" block_node loc begin "," block_node loc "," block_node "]}," RuboCop Cop LambdaLiteralToMethodCorrector block_end":{"type":"method","name":"block_end","children":[],"call":[" block_node loc end "," block_node loc "," block_node "]}," RuboCop Cop LambdaLiteralToMethodCorrector arguments_begin_pos":{"type":"method","name":"arguments_begin_pos","children":[],"call":[" arguments loc begin begin_pos "," arguments loc begin "," arguments loc "," arguments "]}," RuboCop Cop LambdaLiteralToMethodCorrector arguments_end_pos":{"type":"method","name":"arguments_end_pos","children":[],"call":[" arguments loc end end_pos "," arguments loc end "," arguments loc "," arguments "]}," RuboCop Cop LambdaLiteralToMethodCorrector needs_separating_space?":{"type":"method","name":"needs_separating_space?","children":[],"call":[" block_begin begin_pos == "," selector_end end_pos "," selector_end "," block_begin begin_pos "," block_begin "," selector_end end_pos == "," arguments_begin_pos "," arguments_end_pos "]}," RuboCop Cop LambdaLiteralToMethodCorrector lambda_arg_string":{"type":"method","name":"lambda_arg_string","children":[],"call":[" arguments children map join "," arguments children map "," arguments children "," arguments "]}," RuboCop Cop LambdaLiteralToMethodCorrector replace_delimiters":{"type":"method","name":"replace_delimiters","children":[],"call":["corrector replace "," block_end "," block_begin ","corrector insert_after "," separating_space? "," arg_to_unparenthesized_call? ! "," arg_to_unparenthesized_call? "," block_node braces? "," block_node "]}," RuboCop Cop LambdaLiteralToMethodCorrector remove_trailing_whitespace":{"type":"method","name":"remove_trailing_whitespace","children":[],"call":["corrector remove_preceding "," block_begin begin_pos - - "," block_begin begin_pos - "," arguments source_range end_pos "," arguments source_range "," arguments "," block_begin begin_pos "," block_begin ","size > ","size positive? "," block_begin begin_pos - -  > "," block_begin begin_pos - -  positive? "]}," RuboCop Cop LambdaLiteralToMethodCorrector remove_leading_whitespace":{"type":"method","name":"remove_leading_whitespace","children":[],"call":["corrector remove_preceding "," arguments source_range begin_pos - "," block_node send_node source_range end_pos "," block_node send_node source_range "," block_node send_node "," block_node "," arguments source_range begin_pos "," arguments source_range "," arguments "]}," RuboCop Cop LambdaLiteralToMethodCorrector insert_arguments":{"type":"method","name":"insert_arguments","children":[],"call":["corrector insert_after "," block_node loc begin "," block_node loc "," block_node "," lambda_arg_string "," arguments empty? "," arguments "]}," RuboCop Cop LambdaLiteralToMethodCorrector remove_arguments":{"type":"method","name":"remove_arguments","children":[],"call":["corrector remove "," arguments source_range "," arguments "," arguments empty_and_without_delimiters? "]}," RuboCop Cop LambdaLiteralToMethodCorrector replace_selector":{"type":"method","name":"replace_selector","children":[],"call":["corrector replace "," method source_range "," method "]}," RuboCop Cop LambdaLiteralToMethodCorrector insert_separating_space":{"type":"method","name":"insert_separating_space","children":[],"call":["corrector insert_before "," block_begin "," needs_separating_space? "]}," RuboCop Cop LambdaLiteralToMethodCorrector remove_unparenthesized_whitespace":{"type":"method","name":"remove_unparenthesized_whitespace","children":[],"call":[" remove_trailing_whitespace "," remove_leading_whitespace "," arguments parenthesized_call? ! "," arguments parenthesized_call? "," arguments "," arguments empty? ! "," arguments empty? "]}," RuboCop Cop LambdaLiteralToMethodCorrector call":{"type":"method","name":"call","children":[],"call":[" insert_arguments "," replace_delimiters "," remove_arguments "," replace_selector "," insert_separating_space "," remove_unparenthesized_whitespace "," block_node block_type? "," block_node "]}," RuboCop Cop LambdaLiteralToMethodCorrector initialize":{"type":"method","name":"initialize","children":[],"call":["block_node arguments ","block_node send_node "]}," RuboCop Cop ForToEachCorrector replacement_range":{"type":"method","name":"replacement_range","children":[],"call":["Parser Source Range  new "," for_node loc expression begin_pos "," for_node loc expression "," for_node loc "," for_node "," for_node loc expression source_buffer "," for_node source_range begin_pos "," for_node source_range "," for_node source_range source_buffer "]}," RuboCop Cop ForToEachCorrector offending_range":{"type":"method","name":"offending_range","children":[],"call":[" replacement_range "," end_position "]}," RuboCop Cop ForToEachCorrector collection_end":{"type":"method","name":"collection_end","children":[],"call":[" collection_node loc expression "," collection_node loc "," collection_node "," collection_node loc end "," collection_node begin_type? "," collection_node source_range "]}," RuboCop Cop ForToEachCorrector keyword_begin":{"type":"method","name":"keyword_begin","children":[],"call":[" for_node loc begin "," for_node loc "," for_node "]}," RuboCop Cop ForToEachCorrector end_position":{"type":"method","name":"end_position","children":[],"call":[" collection_end end_pos "," collection_end "," keyword_begin end_pos "," keyword_begin "," for_node do? "," for_node "]}," RuboCop Cop ForToEachCorrector requires_parentheses?":{"type":"method","name":"requires_parentheses?","children":[],"call":[" collection_node erange_type? "," collection_node "," collection_node irange_type? "," collection_node range_type? "," collection_node and_type? "," collection_node or_type? "," collection_node operator_method? "," collection_node send_type? "]}," RuboCop Cop ForToEachCorrector collection_source":{"type":"method","name":"collection_source","children":[],"call":[" collection_node source "," collection_node "," requires_parentheses? "]}," RuboCop Cop ForToEachCorrector correction":{"type":"method","name":"correction","children":[],"call":[" format "," variable_node source "," variable_node "," collection_source "]}," RuboCop Cop ForToEachCorrector call":{"type":"method","name":"call","children":[],"call":["corrector replace "," correction "," offending_range "]}," RuboCop Cop ForToEachCorrector initialize":{"type":"method","name":"initialize","children":[],"call":["for_node collection ","for_node variable "]}," RuboCop Cop EachToForCorrector replacement_range":{"type":"method","name":"replacement_range","children":[],"call":["Parser Source Range  new "," block_node loc expression begin_pos "," block_node loc expression "," block_node loc "," block_node "," block_node loc expression source_buffer "," block_node source_range begin_pos "," block_node source_range "," block_node source_range source_buffer "]}," RuboCop Cop EachToForCorrector offending_range":{"type":"method","name":"offending_range","children":[],"call":[" replacement_range "," block_node loc begin end_pos "," block_node loc begin "," block_node loc "," block_node "," argument_node loc expression end_pos "," argument_node loc expression "," argument_node loc "," argument_node "," block_node arguments? "," argument_node source_range end_pos "," argument_node source_range "]}," RuboCop Cop EachToForCorrector correction":{"type":"method","name":"correction","children":[],"call":[" format "," collection_node source "," collection_node "," argument_node children first source "," argument_node children first "," argument_node children "," argument_node "," block_node arguments? "," block_node "]}," RuboCop Cop EachToForCorrector call":{"type":"method","name":"call","children":[],"call":["corrector replace "," correction "," offending_range "]}," RuboCop Cop EachToForCorrector initialize":{"type":"method","name":"initialize","children":[],"call":["block_node arguments ","block_node send_node receiver ","block_node send_node ","block_node receiver "]}," RuboCop ConfigLoader write_config_file":{"type":"method","name":"write_config_file","children":[],"call":["f write ","rubocop_yml_contents =~ ","File  open ","(str \"\\\\S\") match? "]}," RuboCop ConfigLoader existing_configuration":{"type":"method","name":"existing_configuration","children":[],"call":["IO  read sub sub ","IO  read sub ","IO  read "]}," RuboCop TargetFinder ls_git_files":{"type":"method","name":"ls_git_files","children":[],"call":["output split map ","output split ","status success? ","Open3  capture3 ","(str \"sh -c 'command -v git'\") empty? "]}," RuboCop Cop Style MethodCallWithArgsParentheses regexp_slash_literal?":{"type":"method","name":"regexp_slash_literal?","children":[],"call":["node loc begin source == ","node loc begin source ","node loc begin ","node loc ","node regexp_type? "]}," RuboCop Cop Style MethodCallWithArgsParentheses ambigious_literal?":{"type":"method","name":"ambigious_literal?","children":[],"call":[" regexp_slash_literal? "," ternary_if? "," splat? "," unary_literal? "]}," RuboCop Cop Style MethodCallWithArgsParentheses call_as_argument_or_chain?":{"type":"method","name":"call_as_argument_or_chain?","children":[],"call":["node parent csend_type? ","node parent ","node parent send_type? "," assigned_before? ! "," assigned_before? ","node parent super_type? "]}," RuboCop Cop Style MethodCallWithArgsParentheses call_in_optional_arguments?":{"type":"method","name":"call_in_optional_arguments?","children":[],"call":["node parent optarg_type? ","node parent ","node parent kwoptarg_type? "]}," RuboCop Cop Style MethodCallWithArgsParentheses legitimate_call_with_parentheses?":{"type":"method","name":"legitimate_call_with_parentheses?","children":[],"call":[" allowed_chained_call_with_parentheses? "," allowed_multiline_call_with_parentheses? "," call_in_optional_arguments? "," call_in_logical_operators? "," call_with_ambiguous_arguments? "," call_in_literals? "]}," RuboCop Cop Rails Validation braced_options":{"type":"method","name":"braced_options","children":[],"call":["options source ","options braces? "]}," RuboCop Cop Rails OutputSafety non_interpolated_string?":{"type":"method","name":"non_interpolated_string?","children":[],"call":["node receiver dstr_type? ! ","node receiver dstr_type? ","node receiver ","node receiver str_type? "]}," RuboCop Cop Rails LinkToBlank contains_noopener?":{"type":"method","name":"contains_noopener?","children":[],"call":["str split include? ","str split ","value to_s split include? ","value to_s split ","value to_s ","rel_array include? ","value to_s split  include? "]}," RuboCop Cop Rails LinkToBlank on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," includes_noopener? ","options none? "," blank_target? ","options find ","option_nodes map each ","option_nodes map ","node each_child_node ","node method? ","node each_child_node  map each ","node each_child_node  map "]}," RuboCop Cop Rails Date check_deprecated_methods":{"type":"method","name":"check_deprecated_methods","children":[],"call":[" add_offense "," format ","node method_name == ","deprecated to_sym ","node method_name ","DEPRECATED_METHODS  each "]}," RuboCop Cop TrailingComma method_name_and_arguments_on_same_line?":{"type":"method","name":"method_name_and_arguments_on_same_line?","children":[],"call":["node last_line == ","node arguments last last_line ","node arguments last ","node arguments ","node last_line ","node loc selector line == ","node loc selector line ","node loc selector ","node loc ","node send_type? ","(sym :send) include? ","node type ","node last_argument last_line ","node last_argument ","line == ","node loc line ","node loc selector nil? ","node call_type? ","node last_node loc selector line  == ","node last_node loc line  == ","node arguments last last_node loc selector line  ","node arguments last last_node loc line  ","node last_node loc selector line  ","node last_node loc line  ","node loc selector node loc selector line  == ","node loc selector node loc line  == ","node loc selector node loc selector line  ","node loc selector node loc line  ","node last_argument last_node loc selector line  ","node last_argument last_node loc line  ","node loc selector line  == ","node loc line  == ","node loc node loc selector line  ","node loc node loc line  "]}," RuboCop Cop RangeHelp effective_column":{"type":"method","name":"effective_column","children":[],"call":["range column ","range column - ","@processed_source raw_source codepoints first == ","@processed_source raw_source codepoints first ","@processed_source raw_source codepoints ","@processed_source raw_source ","range line == ","range line "]}," RuboCop Cop RangeHelp column_offset_between":{"type":"method","name":"column_offset_between","children":[],"call":[" effective_column - "," effective_column "]}," RuboCop Cop Layout EmptyLinesAroundAccessModifier initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop CLI line_length_cop":{"type":"method","name":"line_length_cop","children":[],"call":["config for_cop "]}," RuboCop CLI same_max_line_length?":{"type":"method","name":"same_max_line_length?","children":[],"call":[" max_line_length == "," max_line_length "]}," RuboCop CLI line_length_enabled?":{"type":"method","name":"line_length_enabled?","children":[],"call":[" line_length_cop [] "," line_length_cop "]}," RuboCop CLI maybe_run_line_length_cop":{"type":"method","name":"maybe_run_line_length_cop","children":[],"call":[" run_line_length_cop_auto_gen_config "," puts "," Rainbow yellow "," Rainbow "," same_max_line_length? ! "," same_max_line_length? ","ConfigLoader  default_configuration ","@config_store for ","Dir  pwd "," line_length_enabled? ! "," line_length_enabled? "," skip_line_length_cop "]}," RuboCop Cop Style YodaCondition valid_yoda?":{"type":"method","name":"valid_yoda?","children":[],"call":["rhs literal? ","lhs literal? "," enforce_yoda? ","rhs literal? ! ","lhs literal? ! ","node first_argument ","node receiver "," interpolation? "," constant_portion? "," constant_portion? ! ","node first_argument  literal? ","node receiver  literal? ","node first_argument  literal? ! ","node receiver  literal? ! "]}," RuboCop Cop Style YodaCondition both_literals?":{"type":"method","name":"both_literals?","children":[],"call":["rhs literal? ","lhs literal? "]}," RuboCop Cop Style YodaCondition yoda_compatible_condition?":{"type":"method","name":"yoda_compatible_condition?","children":[],"call":[" noncommutative_operator? ! "," noncommutative_operator? ","node comparison_method? "]}," RuboCop Cop Style YodaCondition equality_only?":{"type":"method","name":"equality_only?","children":[],"call":[" style == "," style "]}," RuboCop Cop Style YodaCondition enforce_yoda?":{"type":"method","name":"enforce_yoda?","children":[],"call":[" style == "," style "]}," RuboCop Cop Style SafeNavigation method_called?":{"type":"method","name":"method_called?","children":[],"call":["send_node parent send_type? ","send_node parent "]}," RuboCop Cop Style SafeNavigation use_var_only_in_unless_modifier?":{"type":"method","name":"use_var_only_in_unless_modifier?","children":[],"call":[" method_called? ! "," method_called? ","node unless? ","node if_type? "]}," RuboCop Cop Style MethodCallWithArgsParentheses assigned_before?":{"type":"method","name":"assigned_before?","children":[],"call":["node loc operator begin < ","target loc begin ","target loc ","node loc operator begin ","node loc operator ","node loc ","node assignment? "]}," RuboCop Cop Rails LinkToBlank add_rel":{"type":"method","name":"add_rel","children":[],"call":["corrector insert_after ","send_node loc expression ","send_node loc ","offence_node children last source [] ","offence_node children last source ","offence_node children last ","offence_node children ","send_node arguments last source_range ","send_node arguments last ","send_node arguments ","opening_quote == ","send_node arguments last source_send_node arguments last source_range  ","offence_node children last source []  == "]}," RuboCop Cop Rails LinkToBlank append_to_rel":{"type":"method","name":"append_to_rel","children":[],"call":["corrector replace ","rel_node children last loc expression adjust ","rel_node children last loc expression ","rel_node children last loc ","rel_node children last ","rel_node children ","rel_node children last value "]}," RuboCop Cop Rails LinkToBlank autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" add_rel "," append_to_rel "," rel_node? ","options find ","option_nodes map each ","option_nodes map ","send_node each_child_node ","node parent parent ","node parent "," lambda ","send_node each_child_node  map each ","send_node each_child_node  map ","node parent parent  each_child_node "]}," RuboCop Cop Rails IgnoredSkipActionFilterOption if_and_except?":{"type":"method","name":"if_and_except?","children":[],"call":["options key? "]}," RuboCop Cop Rails IgnoredSkipActionFilterOption if_and_only?":{"type":"method","name":"if_and_only?","children":[],"call":["options key? "]}," RuboCop Cop Rails IgnoredSkipActionFilterOption options_hash":{"type":"method","name":"options_hash","children":[],"call":["(send\n  (block\n    (send\n      (send\n        (lvar :options) :pairs) :select)\n    (args\n      (arg :pair))\n    (send\n      (send\n        (lvar :pair) :key) :sym_type?)) :map) to_h ","pair key value ","pair key ","(send\n  (send\n    (lvar :options) :pairs) :select) map ","pair key sym_type? ","options pairs select ","options pairs "]}," RuboCop Cop Rails IgnoredSkipActionFilterOption on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format ","options [] "," if_and_except? "," if_and_only? "," options_hash ","options hash_type? "," filter_options "," options_hash  [] "," filter_options  [] ","  options_hash _hash ","  filter_options _hash "," options_hash  hash_type? "," filter_options  hash_type? "," filter_ options_hash  "," filter_ filter_options  "]}," RuboCop Cop Rails BelongsTo extract_required_option":{"type":"method","name":"extract_required_option","children":[],"call":[" match_required_false? "," match_required_true? ","opts find "," match_belongs_to_with_options "]}," RuboCop Cop Rails BelongsTo autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","opt loc expression ","opt loc "," match_required_false? "," match_required_true? "," lambda "," extract_required_option ","option_node loc expression ","option_node loc ","option_value false_type? ","option_value true_type? "," match_belongs_to_with_options "," extract_required_option  loc expression "," extract_required_option  loc "," extract_required_ extract_required_option ion "," extract_required_option ion_node loc expression "," extract_required_option ion_node loc "," extract_required_option ion_value false_type? "," extract_required_option ion_value true_type? "," match_belongs_to_with_ extract_required_option ions "]}," RuboCop Cop Rails BelongsTo on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," match_required_false? "," match_required_true? "," extract_required_option ","option_value false_type? ","option_value true_type? "," match_belongs_to_with_options "," extract_required_ extract_required_option ion "," extract_required_option ion_value false_type? "," extract_required_option ion_value true_type? "," match_belongs_to_with_ extract_required_option ions "]}," RuboCop Cop Naming ConstantName contains_contant?":{"type":"method","name":"contains_contant?","children":[],"call":["node branches any? ","node branches "]}," RuboCop Cop Naming ConstantName allowed_conditional_expression_on_rhs?":{"type":"method","name":"allowed_conditional_expression_on_rhs?","children":[],"call":[" contains_contant? ","node if_type? "," contains_constant? "]}," RuboCop Cop TrailingComma heredoc_send?":{"type":"method","name":"heredoc_send?","children":[],"call":[" heredoc? ","node children last ","node children ","node children size > ","node children size ","node children first ","node children size == "]}," RuboCop Cop NilMethods other_stdlib_methods":{"type":"method","name":"other_stdlib_methods","children":[],"call":[]}," RuboCop Cop Lint ShadowedException find_shadowing_rescue":{"type":"method","name":"find_shadowing_rescue","children":[],"call":["rescues [] "," sorted? ","rescued_groups each_cons with_index ","rescued_groups each_cons "," contains_multiple_levels_of_exceptions? ","rescued_groups zip each ","rescued_groups zip "," rescued_groups_for "," rescued_groups_for  each_cons with_index "," rescued_groups_for  each_cons "," rescued_groups_for  zip each "," rescued_groups_for  zip ","  rescued_groups_for _for "]}," RuboCop Cop Lint ShadowedException rescued_groups_for":{"type":"method","name":"rescued_groups_for","children":[],"call":[" evaluate_exceptions ","rescues map "]}," RuboCop Cop Lint FlipFlop on_eflipflop":{"type":"method","name":"on_eflipflop","children":[],"call":[" add_offense "]}," RuboCop Cop Lint FlipFlop on_iflipflop":{"type":"method","name":"on_iflipflop","children":[],"call":[" add_offense "]}," RuboCop Cop Lint DisjunctiveAssignmentInConstructor check_disjunctive_assignment":{"type":"method","name":"check_disjunctive_assignment","children":[],"call":[" add_offense ","lhs ivasgn_type? ","node child_nodes first ","node child_nodes ","corrector replace ","node loc operator ","node loc ","node child_nodes first  ivasgn_type? "]}," RuboCop Cop Lint DisjunctiveAssignmentInConstructor check_body_lines":{"type":"method","name":"check_body_lines","children":[],"call":[" check_disjunctive_assignment ","line type ","lines each "]}," RuboCop Cop Lint DisjunctiveAssignmentInConstructor check_body":{"type":"method","name":"check_body","children":[],"call":[" check_body_lines ","body child_nodes ","body type ","node body ","body nil? "," check_node body _lines ","node body  child_nodes ","node body  type ","node node body  ","node body  nil? "]}," RuboCop Cop Lint DisjunctiveAssignmentInConstructor check":{"type":"method","name":"check","children":[],"call":[" check_body ","node method_name == ","node method_name ","node body ","node method? "]}," RuboCop Cop Lint DisjunctiveAssignmentInConstructor on_def":{"type":"method","name":"on_def","children":[],"call":[" check "]}," RuboCop AST IfNode each_branch":{"type":"method","name":"each_branch","children":[],"call":[" branches each "," branches "," branches to_enum "," __method__ "," block_given? "]}," RuboCop AST IfNode branches":{"type":"method","name":"branches","children":[],"call":["branches concat "," else_branch "," else_branch branches "," elsif_conditional? "," if_branch "]}," RuboCop RSpec ExpectOffense expect_correction":{"type":"method","name":"expect_correction","children":[],"call":[" expect to "," eq "," expect ","corrector rewrite ","RuboCop Cop Corrector  new "," cop corrections "," cop ","@processed_source buffer "," raise "," _investigate "," parse_source ","@processed_source path "," cop instance_variable_set ","RuboCop Runner InfiniteCorrectionLoop  new ","iteration > "," cop corrections empty? "," loop ","corrected_source == ","@processed_source buffer source ","@last_corrector empty? ","@last_corrector rewrite "," parse_processed_source ","expected_annotations plain_source "," parse_annotations ","new_source == ","@processed_source raw_source ","correction == ","RuboCop Cop Corrector  new  rewrite "," parse_source  buffer "," parse_processed_source  buffer ","@processed_@processed_source raw_source  buffer "," parse_@processed_source raw_source  "," parse_source  path "," parse_processed_source  path ","@processed_@processed_source raw_source  path ","corrector rewrite  == ","@last_corrector rewrite  == ","corrected_@processed_source raw_source  == "," parse_source  buffer source "," parse_processed_source  buffer source ","@processed_@processed_source raw_source  buffer @processed_source raw_source  ","@last_RuboCop Cop Corrector  new  empty? ","@last_RuboCop Cop Corrector  new  rewrite "," parse_processed_@processed_source raw_source  "," parse_annotations  plain_source ","expected_annotations plain_@processed_source raw_source  ","new_@processed_source raw_source  == "," parse_source  raw_source "," parse_processed_source  raw_source ","@processed_@processed_source raw_source  raw_@processed_source raw_source  "]}," RuboCop Cop Style MethodCallWithArgsParentheses allowed_camel_case_method_call?":{"type":"method","name":"allowed_camel_case_method_call?","children":[],"call":[" cop_config [] "," cop_config ","node arguments none? ","node arguments ","node camel_case_method? "]}," RuboCop Cop Rails ReflectionClassName on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","reflection_class_name loc expression ","reflection_class_name loc "," reflection_class_name first "," reflection_class_name "," association_with_options? "," association_with_reflection "," reflection_class_name first  loc expression "," reflection_class_name first  loc ","  reflection_class_name first  first ","  reflection_class_name first  "]}," RuboCop Cop Naming MemoizedInstanceVariableName variable_name_candidates":{"type":"method","name":"variable_name_candidates","children":[],"call":[" raise ","(lvar :with_underscore) compact ","method_name start_with? "," style ","method_name sub ","method_name delete_prefix "]}," RuboCop Cop TrailingComma any_heredoc?":{"type":"method","name":"any_heredoc?","children":[],"call":[" heredoc? ","items any? "]}," RuboCop Cop Layout DotPosition ampersand_dot?":{"type":"method","name":"ampersand_dot?","children":[],"call":["node loc dot is? ","node loc dot ","node loc ","node loc respond_to? "]}," RuboCop Cop Layout ClosingParenthesisIndentation first_argument_line":{"type":"method","name":"first_argument_line","children":[],"call":["elements first loc first_line ","elements first loc ","elements first "]}," RuboCop Cop Generator ConfigurationInjector cop_name_line?":{"type":"method","name":"cop_name_line?","children":[],"call":["yaml !~ ","(str \"^[\\\\s#]\") match? ! ","(str \"^[\\\\s#]\") match? "]}," RuboCop YAMLDuplicationChecker traverse":{"type":"method","name":"traverse","children":[],"call":[]}," RuboCop YAMLDuplicationChecker check":{"type":"method","name":"check","children":[],"call":[]}," RuboCop RSpec ExpectOffense expect_no_corrections":{"type":"method","name":"expect_no_corrections","children":[],"call":[" expect to "," eq ","@processed_source buffer source ","@processed_source buffer "," expect ","corrector rewrite ","RuboCop Cop Corrector  new "," cop corrections "," cop "," cop corrections empty? "," raise ","@last_corrector rewrite ","@last_corrector empty? ","RuboCop Cop Corrector  new  rewrite ","@last_RuboCop Cop Corrector  new  rewrite ","@last_RuboCop Cop Corrector  new  empty? "]}," RuboCop PathUtil chdir":{"type":"method","name":"chdir","children":[],"call":[]}," RuboCop Cop Style RaiseArgs requires_parens?":{"type":"method","name":"requires_parens?","children":[],"call":["parent ternary? ","parent if_type? ","parent or_type? ","parent and_type? "]}," RuboCop Cop Style MutableConstant correct_splat_expansion":{"type":"method","name":"correct_splat_expansion","children":[],"call":["corrector replace ","splat_value source "," range_enclosed_in_parentheses? "]}," RuboCop Cop Style MutableConstant requires_parentheses?":{"type":"method","name":"requires_parentheses?","children":[],"call":["node loc dot nil? ","node loc dot ","node loc ","node send_type? ","node range_type? "]}," RuboCop Cop Style MutableConstant frozen_string_literal?":{"type":"method","name":"frozen_string_literal?","children":[],"call":[" frozen_string_literals_enabled? ","FROZEN_STRING_LITERAL_TYPES  include? ","node type "]}," RuboCop Cop Style MutableConstant immutable_literal?":{"type":"method","name":"immutable_literal?","children":[],"call":["node immutable_literal? ","node nil? "," frozen_regexp_or_range_literals? "]}," RuboCop Cop Style MutableConstant check":{"type":"method","name":"check","children":[],"call":[" add_offense "," frozen_string_literals_enabled? ","FROZEN_STRING_LITERAL_TYPES  include? ","value type "," mutable_literal? "," range_enclosed_in_parentheses? "," autocorrect "," target_ruby_version <= "," target_ruby_version "," shareable_constant_value? "," frozen_string_literal? ","  range_enclosed_in_parentheses? ? "]}," RuboCop Cop Style MutableConstant strict_check":{"type":"method","name":"strict_check","children":[],"call":[" add_offense "," frozen_string_literal? "," operation_produces_immutable_object? "," immutable_literal? "," autocorrect "," shareable_constant_value? "]}," RuboCop ConfigLoader check_duplication":{"type":"method","name":"check_duplication","children":[],"call":[" warn "," Rainbow yellow "," Rainbow ","key2 start_line + ","key2 start_line ","key1 start_line + ","key1 start_line ","key1 value ","YAMLDuplicationChecker  check ","PathUtil  smart_path ","key1 respond_to? ","key1 key1 value  ","PathUtil  PathUtil  smart_path  "]}," RuboCop AST Node range_type?":{"type":"method","name":"range_type?","children":[],"call":[" erange_type? "," irange_type? "]}," RuboCop AST RetryNode arguments":{"type":"method","name":"arguments","children":[],"call":[]}," RuboCop AST DefinedNode node_parts":{"type":"method","name":"node_parts","children":[],"call":[" to_a "]}," RuboCop AST BreakNode arguments":{"type":"method","name":"arguments","children":[],"call":[]}," RuboCop NodePattern to_s":{"type":"method","name":"to_s","children":[],"call":[" pattern "," class "]}," RuboCop NodePattern ==":{"type":"method","name":"==","children":[],"call":["Compiler  tokens == ","Compiler  tokens "," pattern ","other pattern ","other is_a? "]}," RuboCop NodePattern marshal_dump":{"type":"method","name":"marshal_dump","children":[],"call":[" pattern "]}," RuboCop NodePattern marshal_load":{"type":"method","name":"marshal_load","children":[],"call":[" initialize "]}," RuboCop NodePattern match":{"type":"method","name":"match","children":[],"call":[" match "," initialize "," pattern "]}," RuboCop NodePattern Compiler tokens":{"type":"method","name":"tokens","children":[],"call":[]}," RuboCop NodePattern Compiler compile_guard_clause":{"type":"method","name":"compile_guard_clause","children":[],"call":[]}," String strip_indent":{"type":"method","name":"strip_indent","children":[],"call":[" gsub ","leading_space size "," scan min "," scan "," scan min  size "]}," String blank?":{"type":"method","name":"blank?","children":[],"call":[" strip empty? "," strip "," empty? "," lstrip empty? "," lstrip "]}," RuboCop Cop Util trim_string_interporation_escape_character":{"type":"method","name":"trim_string_interporation_escape_character","children":[],"call":["Regexp  last_match ","str gsub "]}," RuboCop Cop Style TrivialAccessors top_level_node?":{"type":"method","name":"top_level_node?","children":[],"call":["node parent nil? ","node parent "]}," RuboCop Cop Style OptionHash whitelist":{"type":"method","name":"whitelist","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style NumericLiterals format_int_part":{"type":"method","name":"format_int_part","children":[],"call":["formatted_int insert ","int_part < ","int_part abs to_s reverse gsub reverse ","int_part abs to_s reverse gsub ","int_part abs to_s reverse ","int_part abs to_s ","int_part abs "," Integer ","int_part negative? ","int_part abs to_s reverse gsub reverse  insert "," Integer  < "," Integer  abs to_s reverse gsub reverse "," Integer  abs to_s reverse gsub "," Integer  abs to_s reverse "," Integer  abs to_s "," Integer  abs "," Integer  negative? "]}," RuboCop Cop Style MethodCallWithArgsParentheses ignored_macro?":{"type":"method","name":"ignored_macro?","children":[],"call":[" included_macros_list include? ! "," included_macros_list include? ","node method_name "," included_macros_list ","node macro? "," cop_config [] "," cop_config "]}," RuboCop Cop Style MethodCallWithArgsParentheses included_macros_list":{"type":"method","name":"included_macros_list","children":[],"call":[" cop_config fetch map "," cop_config fetch "," cop_config "]}," RuboCop Cop Style ConstantVisibility visibility_declaration?":{"type":"method","name":"visibility_declaration?","children":[],"call":[" visibility_declaration_for? ","node parent each_child_node any? ","node parent each_child_node ","node parent "]}," RuboCop Cop Style ConstantVisibility class_or_module_scope?":{"type":"method","name":"class_or_module_scope?","children":[],"call":["(sym :class) include? ","node parent type ","node parent "," class_or_module_scope? "]}," RuboCop Cop Style ConstantVisibility message":{"type":"method","name":"message","children":[],"call":[" format "]}," RuboCop Cop Style ConstantVisibility on_casgn":{"type":"method","name":"on_casgn","children":[],"call":[" add_offense "," visibility_declaration? "," class_or_module_scope? "," message "," module? "," ignore_modules? ","  message  "]}," RuboCop Cop Style BlockDelimiters procedural_oneliners_may_have_braces?":{"type":"method","name":"procedural_oneliners_may_have_braces?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Rails TimeZone autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector insert_after ","node children [] source_range ","node children [] ","node children ","node source_range "," acceptable? "," lambda "," remove_redundant_in_time_zone ","corrector replace ","node children first source_range ","node children first "," strict? ","node loc selector ","node loc ","node method_name == ","node method_name "]}," RuboCop Cop Rails Output match_gvar?":{"type":"method","name":"match_gvar?","children":[],"call":["(sym :$stdout) include? "]}," RuboCop Cop Metrics Utils AbcSizeCalculator node_has_else_branch?":{"type":"method","name":"node_has_else_branch?","children":[],"call":["node loc else is? ","node loc else ","node loc ","node else? ","(sym :case) include? ","node type "]}," RuboCop Cop Metrics Utils AbcSizeCalculator evaluate_branch_nodes":{"type":"method","name":"evaluate_branch_nodes","children":[],"call":["node comparison_method? "," discount_for_repeated_csend? ! "," discount_for_repeated_csend? ","node csend_type? "]}," RuboCop Cop Metrics Utils AbcSizeCalculator initialize":{"type":"method","name":"initialize","children":[],"call":[" reset_repeated_csend "]}," RuboCop Cop MessageAnnotator reference_urls":{"type":"method","name":"reference_urls","children":[],"call":["urls reject ","urls empty? ","urls nil? "," Array "," cop_config [] "," cop_config "," Array  reject "," Array  empty? "," Array  nil? "]}," RuboCop Cop Lint ToJSON autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector insert_after ","node loc name ","node loc "," lambda "]}," RuboCop Cop Lint ToJSON on_def":{"type":"method","name":"on_def","children":[],"call":[" add_offense ","node arguments empty? ","node arguments ","node method? ","corrector insert_after ","node loc name ","node loc "]}," RuboCop Cop Lint ShadowedException silence_warnings":{"type":"method","name":"silence_warnings","children":[],"call":[]}," RuboCop Cop Lint SafeNavigationWithEmpty on_if":{"type":"method","name":"on_if","children":[],"call":[" add_offense "," safe_navigation_empty_in_conditional? ","node condition ","corrector replace ","condition method_name ","condition receiver source ","condition receiver "," safe_navigation_empty_in_node condition al? ","node node condition  ","node condition  method_name ","condition condition receiver source  source ","node condition  receiver source ","condition condition receiver source  ","node condition  receiver "]}," RuboCop Cop Layout SpaceAroundBlockParameters check_arg":{"type":"method","name":"check_arg","children":[],"call":[" check_no_space ","expr begin_pos - ","expr begin_pos "," range_with_surrounding_space begin_pos "," range_with_surrounding_space ","arg source_range "," check_arg ","arg children each ","arg children ","arg mlhs_type? ","arg source_range  begin_pos - ","arg source_range  begin_pos "]}," RuboCop Cop Layout IndentationWidth check_members_for_rails_style":{"type":"method","name":"check_members_for_rails_style","children":[],"call":[" check_indentation "," indentation_consistency_style "," each_member "]}," RuboCop Cop Layout IndentationWidth select_check_member":{"type":"method","name":"select_check_member","children":[],"call":["member children first ","member children "," access_modifier? "," access_modifier_indentation_style == "," access_modifier_indentation_style "]}," RuboCop Cop Layout ExtraSpacing allow_for_trailing_comments?":{"type":"method","name":"allow_for_trailing_comments?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style UnneededSort accessor_start":{"type":"method","name":"accessor_start","children":[],"call":["node loc selector begin_pos ","node loc selector ","node loc ","node loc dot begin_pos ","node loc dot "]}," RuboCop Cop Style UnneededSort arg_value":{"type":"method","name":"arg_value","children":[],"call":[" arg_node node_parts first "," arg_node node_parts "," arg_node "," arg_node nil? "]}," RuboCop Cop Style UnneededSort arg_node":{"type":"method","name":"arg_node","children":[],"call":["node arguments first ","node arguments "]}," RuboCop Cop Style UnneededSort suffix":{"type":"method","name":"suffix","children":[],"call":["sorter == "]}," RuboCop Cop Style UnneededSort base":{"type":"method","name":"base","children":[],"call":["arg == ","accessor == ","arg zero? "]}," RuboCop Cop Style UnneededSort suggestion":{"type":"method","name":"suggestion","children":[],"call":[" base + "," suffix "," base "]}," RuboCop Cop Style UnneededSort message":{"type":"method","name":"message","children":[],"call":[" format "," suggestion "," arg_value "," range_between source "," range_between ","node loc expression end_pos ","node loc expression ","node loc ","node loc selector begin_pos ","node loc selector "]}," RuboCop Cop Style UnneededSort autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," suggestion "," arg_value ","sort_node loc selector ","sort_node loc ","corrector remove "," range_between ","node loc expression end_pos ","node loc expression ","node loc "," accessor_start "," lambda "," unneeded_sort? "]}," RuboCop Cop Style UnneededSort on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," message "," range_between ","node loc expression end_pos ","node loc expression ","node loc ","sort_node loc selector begin_pos ","sort_node loc selector ","sort_node loc "," unneeded_sort? ","  range_between _between "]}," RuboCop Cop Style Strip autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," lambda "," range_between ","node source_range end_pos ","node source_range ","node receiver loc selector begin_pos ","node receiver loc selector ","node receiver loc ","node receiver ","  range_between _between ","node source_ range_between  end_pos ","node source_ range_between  "]}," RuboCop Cop Style Strip on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format "," range_between ","node source_range end_pos ","node source_range ","first_send loc selector begin_pos ","first_send loc selector ","first_send loc "," lstrip_rstrip ","corrector replace ","  range_between _between ","node source_ range_between  end_pos ","node source_ range_between  "]}," RuboCop Cop Style StderrPuts message":{"type":"method","name":"message","children":[],"call":[" format ","node method_name ","node receiver source ","node receiver "]}," RuboCop Cop Style Sample extract_source":{"type":"method","name":"extract_source","children":[],"call":["args first source ","args first ","args empty? "]}," RuboCop Cop Style Sample sample_arg":{"type":"method","name":"sample_arg","children":[],"call":[" sample_size "," extract_source "]}," RuboCop Cop Style Sample correction":{"type":"method","name":"correction","children":[],"call":["args empty? ","(lvar :sample_arg) compact join ","(lvar :sample_arg) compact "," sample_arg "," extract_source ","(lvar :sample_arg) compact join  empty? ","(lvar : sample_arg ) compact join ","(lvar : sample_arg ) compact ","  sample_arg  "]}," RuboCop Cop Style Sample message":{"type":"method","name":"message","children":[],"call":[" format ","range source "," correction "]}," RuboCop Cop Style Sample source_range":{"type":"method","name":"source_range","children":[],"call":["Parser Source Range  new ","node source_range end_pos ","node source_range ","shuffle_node loc selector begin_pos ","shuffle_node loc selector ","shuffle_node loc ","shuffle_node source_range source_buffer ","shuffle_node source_range "]}," RuboCop Cop Style Sample range_size":{"type":"method","name":"range_size","children":[],"call":["(irange\n  (lvar :low)\n  (lvar :high)) size ","(erange\n  (lvar :low)\n  (lvar :high)) size ","range_node type ","high >= ","low zero? ","val children [] ","val children ","vals map ","vals all? ","range_node to_a ","val nil? ","val int_type? ","range_node to_a  map ","range_node to_a  all? "]}," RuboCop Cop Style Sample sample_size_for_two_args":{"type":"method","name":"sample_size_for_two_args","children":[],"call":["second to_a first ","second to_a ","second int_type? ","first to_a first zero? ","first to_a first ","first to_a ","first int_type? "]}," RuboCop Cop Style Sample sample_size_for_one_arg":{"type":"method","name":"sample_size_for_one_arg","children":[],"call":["(int 0) include? ","arg to_a first ","arg to_a "," range_size ","arg type ","arg int_type? ","arg range_type? "]}," RuboCop Cop Style Sample sample_size":{"type":"method","name":"sample_size","children":[],"call":[" sample_size_for_two_args "," sample_size_for_one_arg ","method_args first ","method_args size "]}," RuboCop Cop Style Sample offensive?":{"type":"method","name":"offensive?","children":[],"call":[" sample_size != "," sample_size "]}," RuboCop Cop Style Sample autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," correction "," source_range "," lambda "," sample_candidate? "]}," RuboCop Cop Style Sample on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," message "," source_range "," offensive? "," sample_candidate? ","corrector replace "," correction ","  message  "," source_ source_range  "]}," RuboCop Cop Style RedundantSortBy sort_by_range":{"type":"method","name":"sort_by_range","children":[],"call":[" range_between ","node loc end end_pos ","node loc end ","node loc ","send loc selector begin_pos ","send loc selector ","send loc "]}," RuboCop Cop Style RedundantSortBy autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," sort_by_range "," lambda ","node send_node ","node node send_node _node "]}," RuboCop Cop Style RedundantSortBy on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," format "," sort_by_range "," redundant_sort_by ","corrector replace "," redundant_sort_by_block "," sort_by_ sort_by_range  "]}," RuboCop Cop Style BlockComments eq_end_part":{"type":"method","name":"eq_end_part","children":[],"call":[" range_between ","expr end_pos ","expr end_pos - ","expr end_pos - - ","comment text chomp == ","comment text ","comment text chomp "]}," RuboCop Cop Rails RedundantAllowNil node_end":{"type":"method","name":"node_end","children":[],"call":["node loc expression end_pos ","node loc expression ","node loc "]}," RuboCop Cop Rails RedundantAllowNil node_beg":{"type":"method","name":"node_beg","children":[],"call":["node loc expression begin_pos ","node loc expression ","node loc "]}," RuboCop Cop Rails RedundantAllowNil next_sibling":{"type":"method","name":"next_sibling","children":[],"call":["node parent children [] ","node sibling_index + ","node sibling_index ","node parent children ","node parent "]}," RuboCop Cop Rails RedundantAllowNil previous_sibling":{"type":"method","name":"previous_sibling","children":[],"call":["node parent children [] ","node sibling_index - ","node sibling_index ","node parent children ","node parent "]}," RuboCop Cop Rails RedundantAllowNil find_allow_nil_and_allow_blank":{"type":"method","name":"find_allow_nil_and_allow_blank","children":[],"call":["key == ","descendant children first value ","descendant children first ","descendant children ","descendant pair_type? ","node each_descendant ","descendant children first source ","descendant children first value  == ","descendant children first source  == "]}," RuboCop Cop Rails RedundantAllowNil autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove ","node loc expression ","node loc "," range_between "," node_end "," node_beg "," lambda "," next_sibling "," previous_sibling "]}," RuboCop Cop Rails RedundantAllowNil on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","allow_blank_val true_type? ","allow_nil_val false_type? ","allow_nil_val type == ","allow_blank_val type ","allow_nil_val type ","allow_blank children last ","allow_blank children ","allow_nil children last ","allow_nil children "," find_allow_nil_and_allow_blank ","node method_name == ","node method_name "," offense ","allow_blank children last  true_type? ","allow_nil children last  false_type? ","allow_nil children last  type == ","allow_blank children last  type ","allow_nil children last  type "]}," RuboCop Cop Rails ActiveRecordOverride message":{"type":"method","name":"message","children":[],"call":[" format "," callback_names "]}," RuboCop Cop Rails ActiveRecordOverride callback_names":{"type":"method","name":"callback_names","children":[],"call":["names join ","names []= ","names last ","(str \"before_\") map "]}," RuboCop Cop Rails ActiveRecordOverride on_def":{"type":"method","name":"on_def","children":[],"call":[" add_offense "," message ","node descendants any? ","node descendants ","(str \"ApplicationRecord\") include? ","parent_class const_name ","(send\n  (lvar :parent_parts) :take_while) last ","part const_type? ","part nil? ! ","part nil? ","parent_parts take_while ","node parent node_parts ","node parent ","BAD_METHODS  include? ","node method_name "," active_model? "," find_parent_class_name ","(send\n  (lvar :parent_parts) :take_while) last  const_name ","(send\n  (lvar :node parent node_parts ) :take_while) last ","node parent node_parts  take_while ","node node method_name  "," find_(send\n  (lvar :parent_parts) :take_while) last _name "," find_ find_parent_class_name  "]}," RuboCop Cop Naming RescuedExceptionsVariableName message":{"type":"method","name":"message","children":[],"call":[" format "," variable_name "," preferred_name ","  preferred_name  "]}," RuboCop Cop Naming RescuedExceptionsVariableName location":{"type":"method","name":"location","children":[],"call":["@exception_name loc expression ","@exception_name loc "]}," RuboCop Cop Naming RescuedExceptionsVariableName variable_name":{"type":"method","name":"variable_name","children":[],"call":[" location source "," location ","asgn_node children last ","asgn_node children ","node exception_variable ","node exception_variable  children last ","node exception_variable  children "]}," RuboCop Cop Naming RescuedExceptionsVariableName preferred_name":{"type":"method","name":"preferred_name","children":[],"call":[" cop_config fetch "," cop_config "," variable_name to_s start_with? "," variable_name to_s "," variable_name ","variable_name to_s start_with? ","variable_name to_s "," variable_ cop_config fetch  to_s start_with? "," variable_ cop_config fetch  to_s "," variable_ cop_config fetch  ","variable_ cop_config fetch  to_s start_with? ","variable_ cop_config fetch  to_s "]}," RuboCop Cop Naming RescuedExceptionsVariableName on_resbody":{"type":"method","name":"on_resbody","children":[],"call":[" add_offense "," location "," variable_name == "," preferred_name "," variable_name ","@exception_name const_type? ","exception_type children first ","exception_type children "," offense_range "," preferred_name to_sym == "," preferred_name to_sym ","corrector replace ","var children first == ","var children first ","var children ","node body "," message ","preferred_name to_sym == ","preferred_name to_sym "," correct_node ","node each_ancestor any? ","node each_ancestor "," shadowed_variable_name? "," autocorrect "," variable_ variable_name  == "," preferred_ variable_name  ","  preferred_name  "," variable_ variable_name  ","@exception_ variable_name  const_type? "," offense_ offense_range  "," preferred_ variable_name  to_sym == ","  preferred_name  to_sym == "," preferred_ variable_name  to_sym ","  preferred_name  to_sym ","  message  ","preferred_ variable_name  to_sym == "," preferred_name  to_sym == ","preferred_ variable_name  to_sym "," preferred_name  to_sym "," shadowed_variable_ variable_name ? "]}," RuboCop Cop MultilineElementLineBreaks all_on_same_line?":{"type":"method","name":"all_on_same_line?","children":[],"call":["nodes first first_line == ","nodes last last_line ","nodes last ","nodes first first_line ","nodes first ","nodes empty? "," same_line? "]}," RuboCop Cop MultilineElementLineBreaks check_line_breaks":{"type":"method","name":"check_line_breaks","children":[],"call":["child last_line "," add_offense ","last_seen_line >= ","child first_line ","children each "," all_on_same_line? ","EmptyLineCorrector  insert_before ","child last_line  >= "]}," RuboCop Cop Layout MultilineMethodArgumentLineBreaks autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["EmptyLineCorrector  insert_before "]}," RuboCop Cop Layout MultilineMethodArgumentLineBreaks on_send":{"type":"method","name":"on_send","children":[],"call":[" check_line_breaks ","args concat ","args pop children ","args pop ","last_arg braces? ! ","last_arg braces? ","last_arg hash_type? ","args last ","node arguments ","node method_name == ","node method_name ","node method? ","args [] + ","last_arg children ","args [] ","(lvar :last_arg) ! "," ignore_last_element? ","args concat  concat ","node arguments  concat ","args [] +  concat ","args concat  pop children ","node arguments  pop children ","args [] +  pop children ","args concat  pop ","node arguments  pop ","args [] +  pop ","args last  braces? ! ","args last  braces? ","args last  hash_type? ","args concat  last ","node arguments  last ","args [] +  last ","args concat  [] + ","node arguments  [] + ","args [] +  [] + ","args last  children ","args concat  [] ","node arguments  [] ","args [] +  [] ","(lvar :args last ) ! "]}," RuboCop Cop Layout MultilineHashKeyLineBreaks starts_with_curly_brace?":{"type":"method","name":"starts_with_curly_brace?","children":[],"call":["node loc begin ","node loc "]}," RuboCop Cop Layout MultilineHashKeyLineBreaks autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["EmptyLineCorrector  insert_before "]}," RuboCop Cop Layout MultilineHashKeyLineBreaks on_hash":{"type":"method","name":"on_hash","children":[],"call":[" check_line_breaks ","node children ","node loc begin ","node loc "," starts_with_curly_brace? "," ignore_last_element? "]}," RuboCop Cop Layout MultilineArrayLineBreaks autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["EmptyLineCorrector  insert_before "]}," RuboCop Cop Layout MultilineArrayLineBreaks on_array":{"type":"method","name":"on_array","children":[],"call":[" check_line_breaks ","node children "," ignore_last_element? "]}," RuboCop Cop Rails RedundantAllowNil offense":{"type":"method","name":"offense","children":[],"call":[" add_offense ","allow_blank_val true_type? ","allow_nil_val false_type? ","allow_nil_val type == ","allow_blank_val type ","allow_nil_val type "]}," RuboCop NodePattern Compiler substitute_cur_node":{"type":"method","name":"substitute_cur_node","children":[],"call":["(send\n  (send\n    (lvar :code) :gsub\n    (const nil :CUR_ELEMENT)\n    (const nil :CUR_NODE)) :gsub\n  (const nil :CUR_NODE)) gsub ","iter == ","code gsub gsub ","code gsub "]}," RuboCop NodePattern Compiler with_seq_head_context":{"type":"method","name":"with_seq_head_context","children":[],"call":["code gsub "," fail_due_to ","code include? "]}," RuboCop NodePattern Compiler with_context":{"type":"method","name":"with_context","children":[],"call":[" substitute_cur_node "," with_temp_node "]}," RuboCop NodePattern Compiler with_child_context":{"type":"method","name":"with_child_context","children":[],"call":[" with_context "]}," RuboCop NodePattern Compiler auto_use_temp_node?":{"type":"method","name":"auto_use_temp_node?","children":[],"call":["code scan count > ","code scan count ","code scan "]}," RuboCop NodePattern Compiler with_temp_variables":{"type":"method","name":"with_temp_variables","children":[],"call":[" next_temp_value ","block parameters map ","block parameters "," next_temp_variable "]}," RuboCop NodePattern Compiler emit_yield_capture":{"type":"method","name":"emit_yield_capture","children":[],"call":["@captures == ","@captures zero? "]}," RuboCop NodePattern Compiler insure_same_captures":{"type":"method","name":"insure_same_captures","children":[],"call":[" fail_due_to ","captures_after != ","enum each "," to_enum "," __method__ "," block_given? "]}," RuboCop NodePattern Compiler compile_any_order":{"type":"method","name":"compile_any_order","children":[],"call":["ANY_ORDER_TEMPLATE  result "," binding "," lambda ","patterns size ","patterns << "," compile_expr "," next_capture "," tokens shift "," tokens "," fail_due_to "," tokens_until each "," tokens_until "," with_temp_variables ","  tokens shift s shift ","  tokens shift s ","  tokens shift s_until each ","  tokens shift s_until "]}," RuboCop NodePattern Compiler compile_captured_ellipsis":{"type":"method","name":"compile_captured_ellipsis","children":[],"call":["range end ","range begin == ","range begin "," lambda "," next_capture "," next_ next_capture  "]}," RuboCop NodePattern Compiler Sequence variadic_arity":{"type":"method","name":"variadic_arity","children":[],"call":[" last_terms_arity -@ - "," last_terms_arity -@ "," last_terms_arity "," first_terms_arity ","@variadic_index > ","@variadic_index positive? ","  first_terms_arity _terms_arity "]}," RuboCop NodePattern Compiler Sequence compile_variadic_term":{"type":"method","name":"compile_variadic_term","children":[],"call":[" term "," variadic_arity "]}," RuboCop NodePattern Compiler Sequence compile_terms":{"type":"method","name":"compile_terms","children":[],"call":[" term ","start - ","@arities fetch ","index_range map "]}," RuboCop NodePattern Compiler Sequence compile_last_terms":{"type":"method","name":"compile_last_terms","children":[],"call":[" compile_terms "," last_terms_arity -@ "," last_terms_arity "," last_terms_range "]}," RuboCop NodePattern Compiler Sequence compile_first_terms":{"type":"method","name":"compile_first_terms","children":[],"call":[" compile_terms "," first_terms_range "]}," RuboCop NodePattern Compiler Sequence compile_seq_head":{"type":"method","name":"compile_seq_head","children":[],"call":[" with_seq_head_context ","@terms [] "," fail_due_to ","@terms [] respond_to? "," seq_head? "]}," RuboCop NodePattern Compiler Sequence term":{"type":"method","name":"term","children":[],"call":[" with_child_context ","range begin ","t call ","t respond_to? ","@terms [] "," wi@terms [] h_child_con@terms [] ex@terms []  ","@terms []  call ","@terms []  respond_@terms [] o? ","@@terms [] erms [] "]}," RuboCop NodePattern Compiler Sequence compile_child_nb_guard":{"type":"method","name":"compile_child_nb_guard","children":[],"call":[" first_terms_arity + "," last_terms_arity "," first_terms_arity ","fixed + ","max_variadic != ","@arities [] end ","@arities [] "," variadic_term_min_arity "," first_terms_arity +  + ","@arities [] end  != "," variadic_term_ first_terms_arity + _arity "," variadic_term_fixed + _arity "]}," RuboCop NodePattern Compiler Sequence seq_head?":{"type":"method","name":"seq_head?","children":[],"call":["@variadic_index != "]}," RuboCop NodePattern Compiler Sequence last_terms_range":{"type":"method","name":"last_terms_range","children":[],"call":["@terms size ","@variadic_index + "]}," RuboCop NodePattern Compiler Sequence first_terms_range":{"type":"method","name":"first_terms_range","children":[],"call":["(or\n  (ivar :@variadic_index)\n  (send\n    (ivar :@terms) :size)) - ","@terms size "," seq_head? "]}," RuboCop NodePattern Compiler Sequence last_terms_arity":{"type":"method","name":"last_terms_arity","children":[],"call":["@arities [] inject ","@arities [] "," last_terms_range "]}," RuboCop NodePattern Compiler Sequence first_terms_arity":{"type":"method","name":"first_terms_arity","children":[],"call":["@arities [] inject ","@arities [] "," first_terms_range "]}," RuboCop NodePattern Compiler Sequence compile":{"type":"method","name":"compile","children":[],"call":["(send nil :compile_guard_clause) compact join << ","(send nil :compile_guard_clause) compact join ","(send nil :compile_guard_clause) compact "," compile_last_terms "," compile_variadic_term "," compile_first_terms "," compile_seq_head "," compile_child_nb_guard "," compile_guard_clause "]}," RuboCop NodePattern Compiler Sequence initialize":{"type":"method","name":"initialize","children":[],"call":[" fail_due_to ","(send\n  (ivar :@arities) :one?) ! ","a is_a? ","@arities one? ","@arities find_index ","arity_term_list transpose "]}," RuboCop NodePattern Compiler variadic_seq_term":{"type":"method","name":"variadic_seq_term","children":[],"call":[" compile_expr "," compile_any_order "," next_capture "," compile_ellipsis "," compile_captured_ellipsis "," tokens shift "," tokens "," compile_repeated_expr ","  tokens shift s shift ","  tokens shift s "]}," RuboCop NodePattern Compiler tokens_until":{"type":"method","name":"tokens_until","children":[],"call":[" tokens shift "," tokens "," tokens first == "," tokens first "," fail_due_to "," to_enum "," __method__ "," block_given? "]}," RuboCop Cop Style SymbolProc autocorrect_without_args":{"type":"method","name":"autocorrect_without_args","children":[],"call":["corrector replace ","node body method_name ","node body "," block_range_with_space "]}," RuboCop Cop Style SymbolProc register_offense":{"type":"method","name":"register_offense","children":[],"call":[" add_offense "," format "," range_between ","node loc end end_pos ","node loc end ","node loc ","node loc begin begin_pos ","node loc begin "," autocorrect ","  range_between _between "]}," RuboCop Cop Style SymbolProc destructuring_block_argument?":{"type":"method","name":"destructuring_block_argument?","children":[],"call":["argument_node source include? ","argument_node source ","argument_node one? "]}," RuboCop Cop Style Lambda arguments_with_whitespace":{"type":"method","name":"arguments_with_whitespace","children":[],"call":["node loc begin end join ","node arguments loc end ","node arguments loc ","node arguments ","node loc begin end ","node loc begin ","node loc "]}," RuboCop Cop Style InverseMethods autocorrect_incompatible_with":{"type":"method","name":"autocorrect_incompatible_with","children":[],"call":[]}," RuboCop Cop Style ClassAndModuleChildren compact_identifier_name":{"type":"method","name":"compact_identifier_name","children":[],"call":["node body children first const_name ","node body children first ","node body children ","node body ","node identifier const_name ","node identifier "]}," RuboCop Cop Style BlockDelimiters braces_style?":{"type":"method","name":"braces_style?","children":[],"call":["node loc begin source == ","node loc begin source ","node loc begin ","node loc "]}," RuboCop Cop Rails SkipsModelValidations allowed_method?":{"type":"method","name":"allowed_method?","children":[],"call":["node arguments? ! ","node arguments? ","METHODS_WITH_ARGUMENTS  include? ","node method_name to_s ","node method_name "]}," RuboCop Cop Rails ActiveRecordOverride find_parent_class_name":{"type":"method","name":"find_parent_class_name","children":[],"call":[" find_parent_class_name ","node parent ","parent_class_name source ","parent_class_name nil? ","node node_parts [] ","node node_parts ","node class_type? "," find_node node_parts []  ","node node_parts []  source ","node node_parts []  nil? "]}," RuboCop Cop Rails ActiveRecordOverride active_model?":{"type":"method","name":"active_model?","children":[],"call":["ACTIVE_RECORD_CLASSES  include? "]}," RuboCop Cop Naming RescuedExceptionsVariableName offense_range":{"type":"method","name":"offense_range","children":[],"call":["variable loc expression ","variable loc ","resbody exception_variable ","variable source_range ","resbody exception_variable  loc expression ","resbody exception_variable  loc ","resbody exception_resbody exception_variable  ","resbody exception_variable  source_range "]}," RuboCop Cop Naming RescuedExceptionsVariableName autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," preferred_name "," offense_range "," lambda ","var loc expression ","var loc ","var children first == ","var children first ","var children ","node body each_descendant ","node body ","node exception_variable children first ","node exception_variable children ","node exception_variable "," variable_name "," correct_node ","kwbegin_node right_siblings each ","kwbegin_node right_siblings ","node parent each_ancestor first ","node parent each_ancestor ","node parent ","  preferred_name  ","node parent each_ancestor first  right_siblings each ","node parent each_ancestor first  right_siblings "]}," RuboCop Cop MultilineElementIndentation incorrect_style_detected":{"type":"method","name":"incorrect_style_detected","children":[],"call":[" ambiguous_style_detected "," add_offense "," message "," base_description "," autocorrect "]}," RuboCop Cop MultilineElementIndentation detected_styles_for_column":{"type":"method","name":"detected_styles_for_column","children":[],"call":["styles << "," brace_alignment_style ","column == ","left_brace column ","left_parenthesis column + ","left_parenthesis column ","left_brace source_line =~ ","left_brace source_line "]}," RuboCop Cop MultilineElementIndentation detected_styles":{"type":"method","name":"detected_styles","children":[],"call":[" detected_styles_for_column ","actual_column - - ","actual_column - "," configured_indentation_width "]}," RuboCop Cop MultilineElementIndentation base_column":{"type":"method","name":"base_column","children":[],"call":["left_brace source_line =~ ","left_brace source_line ","left_parenthesis column + ","left_parenthesis column "," style == "," style ","left_brace column "," brace_alignment_style "]}," RuboCop Cop MultilineElementIndentation check_expected_style":{"type":"method","name":"check_expected_style","children":[],"call":[" correct_style_detected "," ambiguous_style_detected ","styles size > ","styles size "]}," RuboCop Cop MultilineElementIndentation check_first":{"type":"method","name":"check_first","children":[],"call":[" incorrect_style_detected "," check_expected_style ","@column_delta zero? "," detected_styles ","expected_column - "," base_column + + "," base_column + "," configured_indentation_width "," base_column ","first source_range column ","first source_range ","indent_base_column + + ","indent_base_column + "," indent_base ","expected_column -  zero? "," detected_ detected_styles  "," base_column + +  - ","indent_base_column + +  - "]}," RuboCop Cop MultilineElementIndentation each_argument_node":{"type":"method","name":"each_argument_node","children":[],"call":[" ignore_node ","left_brace line == ","left_parenthesis line ","left_brace line ","type_node loc begin ","type_node loc "," on_node ","node arguments each ","node arguments ","node loc begin ","node loc "," same_line? ","type_node loc begin  line == ","node loc begin  line ","type_node loc begin  line "]}," RuboCop Cop CheckLineBreakable already_on_multiple_lines?":{"type":"method","name":"already_on_multiple_lines?","children":[],"call":["node first_line != ","node last_line ","node first_line ","node arguments last last_line ","node arguments last ","node arguments ","node def_type? ","node single_line? ! ","node single_line? "]}," RuboCop Cop CheckLineBreakable process_args":{"type":"method","name":"process_args","children":[],"call":["args concat ","args pop children ","args pop ","last_arg braces? ! ","last_arg braces? ","last_arg hash_type? ","args last ","args [] + ","last_arg children ","args [] ","(lvar :last_arg) ! ","args concat  concat ","args [] +  concat ","args concat  pop children ","args [] +  pop children ","args concat  pop ","args [] +  pop ","args last  braces? ! ","args last  braces? ","args last  hash_type? ","args concat  last ","args [] +  last ","args concat  [] + ","args [] +  [] + ","args last  children ","args concat  [] ","args [] +  [] ","(lvar :args last ) ! "]}," RuboCop Cop CheckLineBreakable all_on_same_line?":{"type":"method","name":"all_on_same_line?","children":[],"call":["nodes first first_line == ","nodes last last_line ","nodes last ","nodes first first_line ","nodes first ","nodes empty? "]}," RuboCop Cop CheckLineBreakable children_could_be_broken_up?":{"type":"method","name":"children_could_be_broken_up?","children":[],"call":["child last_line ","last_seen_line >= ","child first_line ","children each "," all_on_same_line? ","child last_line  >= "]}," RuboCop Cop CheckLineBreakable contained_by_multiline_collection_that_could_be_broken_up?":{"type":"method","name":"contained_by_multiline_collection_that_could_be_broken_up?","children":[],"call":[" children_could_be_broken_up? "," breakable_collection? "," process_args ","ancestor arguments ","ancestor send_type? ","ancestor children ","ancestor array_type? ","ancestor hash_type? ","node each_ancestor find ","node each_ancestor "," process_ process_args  "]}," RuboCop Cop CheckLineBreakable contained_by_breakable_collection_on_same_line?":{"type":"method","name":"contained_by_breakable_collection_on_same_line?","children":[],"call":[" breakable_collection? "," process_args ","ancestor arguments ","ancestor send_type? ","ancestor children ","ancestor array_type? ","ancestor hash_type? ","ancestor first_line != ","node first_line ","ancestor first_line ","node each_ancestor find ","node each_ancestor "]}," RuboCop Cop CheckLineBreakable breakable_collection?":{"type":"method","name":"breakable_collection?","children":[],"call":["elements length >= ","elements length ","node loc begin ","node loc ","node hash_type? ! ","node hash_type? "]}," RuboCop Cop CheckLineBreakable safe_to_ignore?":{"type":"method","name":"safe_to_ignore?","children":[],"call":[" contained_by_multiline_collection_that_could_be_broken_up? "," contained_by_breakable_collection_on_same_line? "," already_on_multiple_lines? "," max "]}," RuboCop Cop CheckLineBreakable within_column_limit?":{"type":"method","name":"within_column_limit?","children":[],"call":["element loc line == ","element loc line ","element loc ","element loc column < ","element loc column ","element loc column <= "]}," RuboCop Cop CheckLineBreakable extract_first_element_over_column_limit":{"type":"method","name":"extract_first_element_over_column_limit","children":[],"call":["elements [] ","i - ","elements first ","i zero? "," within_column_limit? ","node first_line ","elements shift ","elements first pair_type? ","node parenthesized? ! ","node parenthesized? ","node send_type? ","i nil? "," shift_elements_for_heredoc_arg ","elements drop "," first_argument_is_heredoc? ! "," first_argument_is_heredoc? ","elements drop  [] "," shift_elements_for_heredoc_arg  - ","elements f shift_elements_for_heredoc_arg rst ","elements drop  first "," shift_elements_for_heredoc_arg  zero? "," w shift_elements_for_heredoc_arg th shift_elements_for_heredoc_arg n_column_l shift_elements_for_heredoc_arg m shift_elements_for_heredoc_arg t? ","node first_node first_line  ","node f shift_elements_for_heredoc_arg rst_l shift_elements_for_heredoc_arg ne ","elements sh shift_elements_for_heredoc_arg ft ","elements drop  shift ","elements f shift_elements_for_heredoc_arg rst pa shift_elements_for_heredoc_arg r_type? ","elements drop  first pair_type? ","node parenthes shift_elements_for_heredoc_arg zed? ! ","node parenthes shift_elements_for_heredoc_arg zed? "," shift_elements_for_heredoc_arg  n shift_elements_for_heredoc_arg l? "," sh shift_elements_for_heredoc_arg ft_elements_for_heredoc_arg "," shift_elements drop _for_heredoc_arg ","elements drop  drop "," f shift_elements_for_heredoc_arg rst_argument_ shift_elements_for_heredoc_arg s_heredoc? ! "," f shift_elements_for_heredoc_arg rst_argument_ shift_elements_for_heredoc_arg s_heredoc? "]}," RuboCop Cop CheckLineBreakable extract_breakable_node_from_elements":{"type":"method","name":"extract_breakable_node_from_elements","children":[],"call":[" extract_first_element_over_column_limit ","line length <= ","line length "," processed_source commented? ","node loc begin ","node loc "," processed_source "," processed_source lines [] ","node first_line - ","node first_line "," processed_source lines "," safe_to_ignore? "," breakable_collection? "," processed_source line_with_comment? ","node loc line "," processed_source lines []  length <= "," processed_source lines []  length "," processed_source  processed_source lines [] s [] ","node first_ processed_source lines []  - ","node first_ processed_source lines []  "," processed_source  processed_source lines [] s "," processed_source  processed_source lines [] _with_comment? ","node loc  processed_source lines []  "]}," RuboCop Cop CheckLineBreakable extract_breakable_node":{"type":"method","name":"extract_breakable_node","children":[],"call":[" extract_breakable_node_from_elements ","node children ","node hash_type? ","node array_type? "," process_args ","node arguments ","node send_type? ","node def_type? "," process_ process_args  "]}," RuboCop Cop Metrics LineLength line_in_heredoc?":{"type":"method","name":"line_in_heredoc?","children":[],"call":["range cover? "," heredocs any? "," heredocs "]}," RuboCop Cop Metrics LineLength breakable_semicolon_range":{"type":"method","name":"breakable_semicolon_range","children":[],"call":[" processed_source commented? "," processed_source "," source_range "," processed_source buffer ","semicolon_separated_parts first length + ","semicolon_separated_parts first length ","semicolon_separated_parts first ","semicolon_separated_parts length <= ","semicolon_separated_parts length ","line split "," source_ source_range  ","line split  first length + ","line split  first length ","line split  first ","line split  length <= ","line split  length "]}," RuboCop Cop Metrics LineLength breakable_range":{"type":"method","name":"breakable_range","children":[],"call":["breakable_node source_range "," breakable_nodes_by_line_index [] "," breakable_nodes_by_line_index "," breakable_semicolon_range "," line_in_heredoc? ","line_index + "," breakable_nodes_by_line_index []  source_range ","  breakable_nodes_by_line_index [] s_by_line_index [] ","  breakable_nodes_by_line_index [] s_by_line_index "," breakable_ breakable_semicolon_range  "]}," RuboCop Cop Metrics LineLength highlight_start":{"type":"method","name":"highlight_start","children":[],"call":[" max - "," indentation_difference "," max "]}," RuboCop Cop Metrics LineLength heredocs":{"type":"method","name":"heredocs","children":[],"call":[" extract_heredocs "," processed_source ast "," processed_source "]}," RuboCop Cop Metrics LineLength breakable_nodes_by_line_index":{"type":"method","name":"breakable_nodes_by_line_index","children":[],"call":[]}," RuboCop Cop Metrics LineLength check_for_breakable_node":{"type":"method","name":"check_for_breakable_node","children":[],"call":[" breakable_nodes_by_line_index []= "," breakable_nodes_by_line_index ","breakable_node first_line - ","breakable_node first_line ","breakable_node nil? "," extract_breakable_node "," max "," breakable_range_by_line_index []= "," breakable_range_by_line_index "," breakable_range_by_line_index [] ","breakable_node source_range "," breakable_nodes_by_breakable_node first_line -  []= ","  extract_breakable_node s_by_line_index []= "," breakable_nodes_by_breakable_node first_line -  ","  extract_breakable_node s_by_line_index "," extract_breakable_node  first_line - "," extract_breakable_node  first_line "," extract_breakable_node  nil? "," extract_ extract_breakable_node  "," breakable_range_by_breakable_node first_line -  []= "," breakable_breakable_node source_range _by_line_index []= "," breakable_range_by_breakable_node first_line -  "," breakable_breakable_node source_range _by_line_index "," breakable_range_by_breakable_node first_line -  [] "," breakable_breakable_node source_range _by_line_index [] "," extract_breakable_node  source_range ","breakable_node source_breakable_node source_range  "]}," RuboCop Cop Metrics LineLength autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector insert_before "," lambda ","range nil? "]}," RuboCop Cop Metrics LineLength investigate_post_walk":{"type":"method","name":"investigate_post_walk","children":[],"call":[" check_line ","processed_source lines each_with_index ","processed_source lines "]}," RuboCop Cop Metrics LineLength on_potential_breakable_node":{"type":"method","name":"on_potential_breakable_node","children":[],"call":[" check_for_breakable_node "]}," RuboCop Cop Lint UnderscorePrefixedVariableName allowed_keyword_block_argument?":{"type":"method","name":"allowed_keyword_block_argument?","children":[],"call":[" cop_config [] "," cop_config ","variable keyword_argument? ","variable block_argument? "]}," RuboCop Cop Lint LiteralInInterpolation autocorrected_value_for_array":{"type":"method","name":"autocorrected_value_for_array","children":[],"call":[" contents_range source split to_s gsub "," contents_range source split to_s "," contents_range source split "," contents_range source "," contents_range ","node source gsub ","node source ","node percent_literal? "]}," RuboCop Cop Lint LiteralInInterpolation autocorrected_value_for_string":{"type":"method","name":"autocorrected_value_for_string","children":[],"call":["node children last ","node children ","node children last inspect [] ","node children last inspect ","node source start_with? ","node source "]}," RuboCop Cop Lint HeredocMethodCallPosition trailing_comma?":{"type":"method","name":"trailing_comma?","children":[],"call":["call_source + == ","call_source + ","(begin\n  (lvar :call_source)) == "]}," RuboCop Cop Lint HeredocMethodCallPosition call_range_to_safely_reposition":{"type":"method","name":"call_range_to_safely_reposition","children":[],"call":[" range_between ","call_end_pos + "," trailing_comma? ","call_source == ","call_line_range source strip ","call_line_range source ","call_range source strip ","call_range source "," call_line_range "," call_end_pos "," heredoc_end_pos "," calls_on_multiple_lines? "," call_end_pos  + ","call_range source strip  == "," call_line_range  source strip "," call_line_range  source "," range_between  source strip "," range_between  source ","  call_line_range  ","  call_end_pos  ","  heredoc_end_pos  "]}," RuboCop Cop Lint HeredocMethodCallPosition call_line_range":{"type":"method","name":"call_line_range","children":[],"call":[" range_by_whole_lines "," range_between ","node source_range end_pos ","node source_range ","node source_range end_node source_range end_pos  "]}," RuboCop Cop Lint HeredocMethodCallPosition heredoc_begin_line_range":{"type":"method","name":"heredoc_begin_line_range","children":[],"call":[" range_by_whole_lines "," range_between ","heredoc source_range begin_pos ","heredoc source_range ","heredoc source_range begin_heredoc source_range begin_pos  "]}," RuboCop Cop Lint HeredocMethodCallPosition call_end_pos":{"type":"method","name":"call_end_pos","children":[],"call":["node source_range end_pos ","node source_range "]}," RuboCop Cop Lint HeredocMethodCallPosition heredoc_end_pos":{"type":"method","name":"heredoc_end_pos","children":[],"call":["heredoc location heredoc_end end_pos ","heredoc location heredoc_end ","heredoc location "]}," RuboCop Cop Lint HeredocMethodCallPosition all_on_same_line?":{"type":"method","name":"all_on_same_line?","children":[],"call":["nodes first first_line == ","nodes last last_line ","nodes last ","nodes first first_line ","nodes first ","nodes empty? "]}," RuboCop Cop Lint HeredocMethodCallPosition calls_on_multiple_lines?":{"type":"method","name":"calls_on_multiple_lines?","children":[],"call":["node receiver "," all_on_same_line? ","node arguments ","last_line == ","node last_line "," send_node? ","node receiver  receiver ","node receiver  arguments ","node last_line  == ","node receiver  last_line ","node node last_line  "," send_node receiver ? "]}," RuboCop Cop Lint HeredocMethodCallPosition correctly_positioned?":{"type":"method","name":"correctly_positioned?","children":[],"call":[" heredoc_end_pos > "," call_end_pos "," heredoc_end_pos "]}," RuboCop Cop Lint HeredocMethodCallPosition call_after_heredoc_range":{"type":"method","name":"call_after_heredoc_range","children":[],"call":[" range_between ","pos + "," heredoc_end_pos "," heredoc_end_pos  + "," heredoc_end_ heredoc_end_pos  "]}," RuboCop Cop Lint HeredocMethodCallPosition heredoc_node?":{"type":"method","name":"heredoc_node?","children":[],"call":["node heredoc? ","STRING_TYPES  include? ","node type ","node respond_to? "]}," RuboCop Cop Lint HeredocMethodCallPosition send_node?":{"type":"method","name":"send_node?","children":[],"call":["node csend_type? ","node send_type? ","node call_type? "]}," RuboCop Cop Lint HeredocMethodCallPosition heredoc_node_descendent_receiver":{"type":"method","name":"heredoc_node_descendent_receiver","children":[],"call":["node receiver "," heredoc_node? "," send_node? ","node receiver  receiver "," heredoc_node receiver ? "," send_node receiver ? "]}," RuboCop Cop Lint HeredocMethodCallPosition autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector insert_after "," heredoc_begin_line_range ","corrector remove ","call_range source strip ","call_range source ","call_range nil? "," call_range_to_safely_reposition "," lambda "," heredoc_node_descendent_receiver ","  heredoc_node_descendent_receiver _begin_line_range "," call_range_to_safely_reposition  source strip "," call_range_to_safely_reposition  source "," call_range_to_safely_reposition  nil? ","  call_range_to_safely_reposition _to_safely_reposition ","  heredoc_node_descendent_receiver _node_descendent_receiver "]}," RuboCop Cop Lint HeredocMethodCallPosition on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," call_after_heredoc_range "," correctly_positioned? "," heredoc_node_descendent_receiver "," autocorrect "," call_after_ heredoc_node_descendent_receiver _range ","  heredoc_node_descendent_receiver _node_descendent_receiver "]}," RuboCop Cop Layout IndentFirstParameter message":{"type":"method","name":"message","children":[],"call":[" format "," configured_indentation_width "]}," RuboCop Cop Layout IndentFirstParameter base_description":{"type":"method","name":"base_description","children":[],"call":[" style == "," brace_alignment_style "," style "]}," RuboCop Cop Layout IndentFirstParameter check":{"type":"method","name":"check","children":[],"call":[" check_first ","first_elem source_range line == ","left_parenthesis line ","first_elem source_range line ","first_elem source_range ","def_node arguments first ","def_node arguments ","def_node arguments loc begin ","def_node arguments loc "," ignored_node? ","def_node arguments first  source_range line == ","def_node arguments loc begin  line ","def_node arguments first  source_range line ","def_node arguments first  source_range "]}," RuboCop Cop Layout IndentFirstParameter brace_alignment_style":{"type":"method","name":"brace_alignment_style","children":[],"call":[]}," RuboCop Cop Layout IndentFirstParameter autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["AlignmentCorrector  correct "," processed_source "]}," RuboCop Cop Layout IndentFirstParameter on_def":{"type":"method","name":"on_def","children":[],"call":[" check ","node arguments loc begin nil? ","node arguments loc begin ","node arguments loc ","node arguments ","node arguments empty? "]}," RuboCop Cop Layout IndentFirstHashElement message":{"type":"method","name":"message","children":[],"call":[" format "," configured_indentation_width "]}," RuboCop Cop Layout IndentFirstHashElement base_description":{"type":"method","name":"base_description","children":[],"call":[" style == "," style "]}," RuboCop Cop Layout IndentFirstHashElement check_based_on_longest_key":{"type":"method","name":"check_based_on_longest_key","children":[],"call":[" check_first ","key_lengths max - ","key_lengths first ","key_lengths max ","hash_node pairs first ","hash_node pairs ","key source_range length ","key source_range ","hash_node keys map ","hash_node keys "]}," RuboCop Cop Layout IndentFirstHashElement separator_style?":{"type":"method","name":"separator_style?","children":[],"call":[" config for_cop [] == "," config for_cop [] "," config for_cop "," config ","separator is? ","first_pair loc operator ","first_pair loc ","first_pair loc operator  is? "]}," RuboCop Cop Layout IndentFirstHashElement check_right_brace":{"type":"method","name":"check_right_brace","children":[],"call":[" add_offense "," style == "," style ","@column_delta zero? ","expected_column - ","right_brace column "," base_column ","right_brace source_line [] =~ ","right_brace source_line [] ","right_brace source_line ","expected_column -  zero? "," base_column  - "]}," RuboCop Cop Layout IndentFirstHashElement check":{"type":"method","name":"check","children":[],"call":[" check_right_brace ","hash_node loc end ","hash_node loc "," check_first "," check_based_on_longest_key "," separator_style? ","first_pair source_range line == ","left_brace line ","first_pair source_range line ","first_pair source_range ","hash_node pairs first ","hash_node pairs ","hash_node loc begin "," ignored_node? ","first_pair first_line == ","first_pair first_line ","hash_node pairs first  source_range line == ","hash_node loc begin  line ","hash_node pairs first  source_range line ","hash_node pairs first  source_range ","hash_node pairs first  first_line == ","hash_node pairs first  first_line "]}," RuboCop Cop Layout IndentFirstHashElement brace_alignment_style":{"type":"method","name":"brace_alignment_style","children":[],"call":[]}," RuboCop Cop Layout IndentFirstHashElement autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["AlignmentCorrector  correct "," processed_source "]}," RuboCop Cop Layout IndentFirstHashElement on_send":{"type":"method","name":"on_send","children":[],"call":[" check "," each_argument_node "]}," RuboCop Cop Layout IndentFirstHashElement on_hash":{"type":"method","name":"on_hash","children":[],"call":[" check ","node loc begin ","node loc "]}," RuboCop Cop Layout IndentFirstArrayElement message":{"type":"method","name":"message","children":[],"call":[" format "," configured_indentation_width "]}," RuboCop Cop Layout IndentFirstArrayElement base_description":{"type":"method","name":"base_description","children":[],"call":[" style == "," style "]}," RuboCop Cop Layout IndentFirstArrayElement check_right_bracket":{"type":"method","name":"check_right_bracket","children":[],"call":[" add_offense "," style == "," style ","@column_delta zero? ","expected_column - ","right_bracket column "," base_column ","right_bracket source_line [] =~ ","right_bracket source_line [] ","right_bracket source_line ","expected_column -  zero? "," base_column  - "]}," RuboCop Cop Layout IndentFirstArrayElement check":{"type":"method","name":"check","children":[],"call":[" check_right_bracket ","array_node loc end ","array_node loc "," check_first ","first_elem source_range line == ","left_bracket line ","first_elem source_range line ","first_elem source_range ","array_node values first ","array_node values ","array_node loc begin "," ignored_node? ","array_node values first  source_range line == ","array_node loc begin  line ","array_node values first  source_range line ","array_node values first  source_range "]}," RuboCop Cop Layout IndentFirstArrayElement brace_alignment_style":{"type":"method","name":"brace_alignment_style","children":[],"call":[]}," RuboCop Cop Layout IndentFirstArrayElement autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["AlignmentCorrector  correct "," processed_source "]}," RuboCop Cop Layout IndentFirstArrayElement on_send":{"type":"method","name":"on_send","children":[],"call":[" check "," each_argument_node "]}," RuboCop Cop Layout IndentFirstArrayElement on_array":{"type":"method","name":"on_array","children":[],"call":[" check ","node loc begin ","node loc "]}," RuboCop Cop Layout IndentFirstArgument previous_code_line":{"type":"method","name":"previous_code_line","children":[],"call":[" processed_source lines [] ","line_number - "," processed_source lines "," processed_source ","@comment_lines include? ","line blank? ","c loc line ","c loc ","(send\n  (send\n    (send nil :processed_source) :comments) :select) map "," begins_its_line? ","c loc expression "," processed_source comments select "," processed_source comments "," comment_lines include? "," comment_lines "," processed_source  processed_source lines [] s [] "," processed_source lines [] _number - "," processed_source  processed_source lines [] s ","@comment_ processed_source lines [] s include? "," processed_source lines []  blank? ","c loc  processed_source lines []  "," begins_its_ processed_source lines [] ? "," comment_ processed_source lines [] s include? "," comment_ processed_source lines [] s "]}," RuboCop Cop Layout IndentFirstArgument column_of":{"type":"method","name":"column_of","children":[],"call":[" display_column "," previous_code_line =~ "," previous_code_line ","range line + + ","range line + ","source count ","range line ","source include? ","range source strip ","range source ","range source strip  count ","range source strip  include? ","range range source strip  strip ","range range source strip  "]}," RuboCop Cop Layout IndentFirstArgument base_range":{"type":"method","name":"base_range","children":[],"call":[" range_between ","arg_node source_range begin_pos ","arg_node source_range ","send_node source_range begin_pos ","send_node source_range "]}," RuboCop Cop Layout IndentFirstArgument special_inner_call_indentation?":{"type":"method","name":"special_inner_call_indentation?","children":[],"call":["node source_range begin_pos > ","parent source_range begin_pos ","parent source_range ","node source_range begin_pos ","node source_range "," style == "," style ","parent parenthesized? ! ","parent parenthesized? "," eligible_method_call? ","node parent ","node parent  source_range begin_pos ","node parent  source_range ","node parent  node parent hesized? ! ","node parent  node parent hesized? ","node node parent  "]}," RuboCop Cop Layout IndentFirstArgument base_indentation":{"type":"method","name":"base_indentation","children":[],"call":[" previous_code_line =~ "," previous_code_line ","node first_argument first_line ","node first_argument "," column_of "," base_range "," special_inner_call_indentation? "]}," RuboCop Cop Layout IndentFirstArgument message":{"type":"method","name":"message","children":[],"call":[" format "," comment_line? ","text lines reverse_each first ","text lines reverse_each ","text lines "," special_inner_call_indentation? ","text !~ "," base_range source strip "," base_range source "," base_range ","arg_node parent "," base_range source strip  lines reverse_each first "," base_range source strip  lines reverse_each "," base_range source strip  lines "," base_range source strip  !~ "]}," RuboCop Cop Layout IndentFirstArgument autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["AlignmentCorrector  correct "," column_delta "," processed_source "]}," RuboCop Cop Layout IndentFirstArgument on_send":{"type":"method","name":"on_send","children":[],"call":[" check_alignment ","node first_argument "," base_indentation + "," configured_indentation_width "," base_indentation ","node operator_method? ","node arguments? ! ","node arguments? "," base_ base_indentation + ation + "," configured_ base_indentation + ation_width "," base_ base_indentation + ation "]}," RuboCop Cop Layout HeredocArgumentClosingParenthesis space?":{"type":"method","name":"space?","children":[],"call":[" processed_source buffer source [] == "," processed_source buffer source [] "," processed_source buffer source "," processed_source buffer "," processed_source "]}," RuboCop Cop Layout HeredocArgumentClosingParenthesis external_trailing_comma_offset_from_loc_end":{"type":"method","name":"external_trailing_comma_offset_from_loc_end","children":[],"call":["offset + ","char == "," processed_source buffer source [] ","end_pos + "," processed_source buffer source "," processed_source buffer "," processed_source "," space? ","offset < ","node source_range end_pos ","node source_range "," processed_source buffer source []  == ","node source_range end_pos  + ","node source_range node source_range end_pos  "]}," RuboCop Cop Layout HeredocArgumentClosingParenthesis external_trailing_comma?":{"type":"method","name":"external_trailing_comma?","children":[],"call":[" external_trailing_comma_offset_from_loc_end nil? ! "," external_trailing_comma_offset_from_loc_end nil? "," external_trailing_comma_offset_from_loc_end "]}," RuboCop Cop Layout HeredocArgumentClosingParenthesis remove_incorrect_external_trailing_comma":{"type":"method","name":"remove_incorrect_external_trailing_comma","children":[],"call":["corrector remove "," range_between ","end_pos + "," external_trailing_comma_offset_from_loc_end "," external_trailing_comma? ","node source_range end_pos ","node source_range ","node source_range end_pos  + ","node source_range node source_range end_pos  "]}," RuboCop Cop Layout HeredocArgumentClosingParenthesis add_correct_external_trailing_comma":{"type":"method","name":"add_correct_external_trailing_comma","children":[],"call":["corrector insert_after ","node arguments last source_range ","node arguments last ","node arguments "," external_trailing_comma? "]}," RuboCop Cop Layout HeredocArgumentClosingParenthesis fix_external_trailing_comma":{"type":"method","name":"fix_external_trailing_comma","children":[],"call":[" add_correct_external_trailing_comma "," remove_incorrect_external_trailing_comma "]}," RuboCop Cop Layout HeredocArgumentClosingParenthesis internal_trailing_comma_offset_from_last_arg":{"type":"method","name":"internal_trailing_comma_offset_from_last_arg","children":[],"call":["first_comma_offset + ","first_comma_offset > ","first_new_line_offset nil? ","first_comma_offset nil? ","source_after_last_arg index "," range_between source "," range_between ","node loc end begin_pos ","node loc end ","node loc ","node children last source_range end_pos ","node children last source_range ","node children last ","node children ","source_after_last_arg index  + ","source_after_last_arg index  > ","source_after_last_arg index  nil? "," range_between source  index "]}," RuboCop Cop Layout HeredocArgumentClosingParenthesis internal_trailing_comma?":{"type":"method","name":"internal_trailing_comma?","children":[],"call":[" internal_trailing_comma_offset_from_last_arg nil? ! "," internal_trailing_comma_offset_from_last_arg nil? "," internal_trailing_comma_offset_from_last_arg "]}," RuboCop Cop Layout HeredocArgumentClosingParenthesis remove_internal_trailing_comma":{"type":"method","name":"remove_internal_trailing_comma","children":[],"call":["corrector remove "," range_between ","last_arg_end_pos + ","node children last source_range end_pos ","node children last source_range ","node children last ","node children "," internal_trailing_comma_offset_from_last_arg ","node children last source_range end_pos  + "," internal_trailing_comma_ internal_trailing_comma_offset_from_last_arg _from_last_arg "]}," RuboCop Cop Layout HeredocArgumentClosingParenthesis incorrect_parenthesis_removal_end":{"type":"method","name":"incorrect_parenthesis_removal_end","children":[],"call":["end_pos + "," processed_source buffer source [] == "," processed_source buffer source [] "," processed_source buffer source "," processed_source buffer "," processed_source ","node source_range end_pos ","node source_range ","node source_range end_pos  + ","node source_range node source_range end_pos  "]}," RuboCop Cop Layout HeredocArgumentClosingParenthesis safe_to_remove_line_containing_closing_paren?":{"type":"method","name":"safe_to_remove_line_containing_closing_paren?","children":[],"call":["last_line match "," processed_source [] ","node loc end line - ","node loc end line ","node loc end ","node loc "," processed_source ","last_line match? "," processed_source []  match "," processed_source []  match? "]}," RuboCop Cop Layout HeredocArgumentClosingParenthesis incorrect_parenthesis_removal_begin":{"type":"method","name":"incorrect_parenthesis_removal_begin","children":[],"call":["end_pos - ","end_pos - - ","node source scan last [] size ","node source scan last [] ","node source scan last ","node source scan ","node source "," safe_to_remove_line_containing_closing_paren? ","node source_range end_pos ","node source_range ","node source_range end_pos  - ","node source_range end_pos  - - ","node source_range node source_range end_pos  "]}," RuboCop Cop Layout HeredocArgumentClosingParenthesis remove_incorrect_closing_paren":{"type":"method","name":"remove_incorrect_closing_paren","children":[],"call":["corrector remove "," range_between "," incorrect_parenthesis_removal_end "," incorrect_parenthesis_removal_begin "]}," RuboCop Cop Layout HeredocArgumentClosingParenthesis add_correct_closing_paren":{"type":"method","name":"add_correct_closing_paren","children":[],"call":["corrector insert_after ","node arguments last source_range ","node arguments last ","node arguments "]}," RuboCop Cop Layout HeredocArgumentClosingParenthesis fix_closing_parenthesis":{"type":"method","name":"fix_closing_parenthesis","children":[],"call":[" add_correct_closing_paren "," remove_incorrect_closing_paren "]}," RuboCop Cop Layout HeredocArgumentClosingParenthesis single_line_send_with_heredoc_receiver?":{"type":"method","name":"single_line_send_with_heredoc_receiver?","children":[],"call":["node receiver location heredoc_end end_pos > ","node source_range end_pos ","node source_range ","node receiver location heredoc_end end_pos ","node receiver location heredoc_end ","node receiver location ","node receiver "," heredoc_node? ","node send_type? "]}," RuboCop Cop Layout HeredocArgumentClosingParenthesis heredoc_node?":{"type":"method","name":"heredoc_node?","children":[],"call":["node heredoc? ","STRING_TYPES  include? ","node type ","node respond_to? "]}," RuboCop Cop Layout HeredocArgumentClosingParenthesis extract_heredoc":{"type":"method","name":"extract_heredoc","children":[],"call":[" extract_heredoc ","node values find ","node values ","node hash_type? ","node receiver "," single_line_send_with_heredoc_receiver? "," heredoc_node? "," extract_ extract_heredoc  "," single_line_send_with_ extract_heredoc _receiver? ","  extract_heredoc _node? "]}," RuboCop Cop Layout HeredocArgumentClosingParenthesis extract_heredoc_argument":{"type":"method","name":"extract_heredoc_argument","children":[],"call":[" extract_heredoc ","node arguments find ","node arguments "]}," RuboCop Cop Layout HeredocArgumentClosingParenthesis send_node?":{"type":"method","name":"send_node?","children":[],"call":["node csend_type? ","node send_type? "]}," RuboCop Cop Layout HeredocArgumentClosingParenthesis send_missing_closing_parens?":{"type":"method","name":"send_missing_closing_parens?","children":[],"call":["parent loc end line != ","heredoc last_line ","parent loc end line ","parent loc end ","parent loc ","parent loc begin ","parent arguments include? ","parent arguments "," send_node? "]}," RuboCop Cop Layout HeredocArgumentClosingParenthesis outermost_send_on_same_line":{"type":"method","name":"outermost_send_on_same_line","children":[],"call":["current parent "," send_missing_closing_parens? ","previous parent ","current parent  parent ","previous parent  parent "]}," RuboCop Cop Layout HeredocArgumentClosingParenthesis autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" fix_external_trailing_comma "," external_trailing_comma? "," remove_internal_trailing_comma "," internal_trailing_comma? "," fix_closing_parenthesis "," lambda "]}," RuboCop Cop Layout HeredocArgumentClosingParenthesis on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","heredoc_arg first_line != ","outermost_send loc end line ","outermost_send loc end ","outermost_send loc ","heredoc_arg first_line "," outermost_send_on_same_line "," extract_heredoc_argument "," autocorrect "," exist_argument_between_heredoc_end_and_closing_parentheses? "," subsequent_closing_parentheses_in_same_line? "," end_keyword_before_closing_parentesis? "," end_keyword_before_closing_parenthesis? "," extract_heredoc_argument  first_line != "," outermost_send_on_same_line  loc end line "," outermost_send_on_same_line  loc end "," outermost_send_on_same_line  loc "," extract_heredoc_argument  first_line ","  outermost_send_on_same_line _on_same_line "," extract_ extract_heredoc_argument ument "]}," RuboCop Cop Layout AlignParameters on_def":{"type":"method","name":"on_def","children":[],"call":[" check_alignment "," base_column ","node arguments ","node arguments size < ","node arguments size "]}," RuboCop Cop Layout AlignArguments target_method_lineno":{"type":"method","name":"target_method_lineno","children":[],"call":["node loc begin line ","node loc begin ","node loc ","node loc selector line ","node loc selector "]}," RuboCop Cop Layout AlignArguments base_column":{"type":"method","name":"base_column","children":[],"call":[" display_column ","args first source_range ","args first ","indentation_of_line + "," configured_indentation_width ","(str \"\\\\S.*\") match begin ","(str \"\\\\S.*\") match ","node source_range source_buffer source_line ","node source_range source_buffer ","node source_range "," target_method_lineno "," fixed_indentation? ","(str \"\\S.*\") match begin  + ","indentation_of_node source_range source_buffer source_line  + ","node source_range source_buffer source_node source_range source_buffer source_line  "," target_method_node source_range source_buffer source_line no "," target_method_ target_method_lineno  "]}," RuboCop Cop Layout AlignArguments fixed_indentation?":{"type":"method","name":"fixed_indentation?","children":[],"call":[" cop_config [] == "," cop_config [] "," cop_config "]}," RuboCop Cop Layout AlignArguments message":{"type":"method","name":"message","children":[],"call":[" fixed_indentation? "]}," RuboCop Cop Layout AlignArguments autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["AlignmentCorrector  correct "," column_delta "," processed_source "]}," RuboCop Cop Layout AlignArguments on_send":{"type":"method","name":"on_send","children":[],"call":[" check_alignment "," base_column ","node arguments ","node method? ","node send_type? ","node arguments size < ","node arguments size "]}," RuboCop Cop UnusedArgCorrector correct_for_blockarg_type":{"type":"method","name":"correct_for_blockarg_type","children":[],"call":["corrector remove "," range_with_surrounding_comma "," range_with_surrounding_space ","node source_range "," lambda ","  range_with_surrounding_comma _with_surrounding_comma ","  range_with_surrounding_space _with_surrounding_comma ","  range_with_surrounding_comma _with_surrounding_space ","  range_with_surrounding_space _with_surrounding_space ","node source_ range_with_surrounding_comma  ","node source_ range_with_surrounding_space  "]}," RuboCop Cop Commissioner invoke_custom_post_walk_processing":{"type":"method","name":"invoke_custom_post_walk_processing","children":[],"call":["cop investigate_post_walk "," with_cop_error_handling ","cop respond_to? ","cops each "]}," RuboCop ConfigLoader expand_path":{"type":"method","name":"expand_path","children":[],"call":["File  expand_path "]}," RuboCop ConfigLoader find_user_xdg_config":{"type":"method","name":"find_user_xdg_config","children":[],"call":["File  exist? ","File  join "," expand_path ","ENV  fetch "]}," RuboCop ConfigLoader find_user_dotfile":{"type":"method","name":"find_user_dotfile","children":[],"call":["File  exist? ","File  join ","Dir  home ","ENV  key? "]}," RuboCop ConfigLoader find_project_dotfile":{"type":"method","name":"find_project_dotfile","children":[],"call":[" find_file_upwards "," project_root "]}," RuboCop CLI init_dotfile":{"type":"method","name":"init_dotfile","children":[],"call":[" puts ","f write ","File  open ","(str \"          # The behavior of RuboCop can be controlled via the .rubocop.yml\\n\") strip_indent "," warn "," Rainbow red "," Rainbow ","File  exist? ","File  expand_path ","File  expand_File  expand_path  "]}," RuboCop AST SelfClassNode body":{"type":"method","name":"body","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST SelfClassNode identifier":{"type":"method","name":"identifier","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST ResbodyNode exception_variable":{"type":"method","name":"exception_variable","children":[],"call":[" descendants [] "," descendants "," node_parts [] "," node_parts "]}," RuboCop AST RangeNode end":{"type":"method","name":"end","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST RangeNode begin":{"type":"method","name":"begin","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST ModuleNode body":{"type":"method","name":"body","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST ModuleNode identifier":{"type":"method","name":"identifier","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST ClassNode body":{"type":"method","name":"body","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST ClassNode parent_class":{"type":"method","name":"parent_class","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST ClassNode identifier":{"type":"method","name":"identifier","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST AliasNode new_identifier":{"type":"method","name":"new_identifier","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST AliasNode old_identifier":{"type":"method","name":"old_identifier","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop Cop Style Next autocorrect_incompatible_with":{"type":"method","name":"autocorrect_incompatible_with","children":[],"call":[]}," RuboCop Cop Style InverseMethods dot_range":{"type":"method","name":"dot_range","children":[],"call":[" range_between ","loc expression end_pos ","loc expression ","loc dot begin_pos ","loc dot "]}," RuboCop Cop Style NegatedUnless correct_style?":{"type":"method","name":"correct_style?","children":[],"call":["node modifier_form? ! ","node modifier_form? "," style == "," style "]}," RuboCop Cop Style NegatedUnless message":{"type":"method","name":"message","children":[],"call":[" format ","node keyword ","node inverse_keyword "]}," RuboCop Cop Style NegatedUnless autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["ConditionCorrector  correct_negative_condition "]}," RuboCop Cop Style NegatedUnless on_if":{"type":"method","name":"on_if","children":[],"call":[" check_negative_conditional "," correct_style? ","node ternary? ","node elsif? ","node if? ","ConditionCorrector  correct_negative_condition "," message ","  message  "]}," RuboCop Cop Rails TimeZone strict?":{"type":"method","name":"strict?","children":[],"call":[" style == "," style "]}," RuboCop Cop Rails TimeZone flexible?":{"type":"method","name":"flexible?","children":[],"call":[" style == "," style "]}," RuboCop Cop Rails TimeZone not_danger_chain?":{"type":"method","name":"not_danger_chain?","children":[],"call":["(send\n  (lvar :chain) :&\n  (send nil :good_methods)) empty? ! ","(send\n  (lvar :chain) :&\n  (send nil :good_methods)) empty? ","chain & "," good_methods ","(send\n  (lvar :chain) :&\n  (const nil :DANGEROUS_METHODS)) empty? "]}," RuboCop Cop Rails TimeZone remove_redundant_in_time_zone":{"type":"method","name":"remove_redundant_in_time_zone","children":[],"call":["node parent ","corrector remove ","node loc selector adjust ","node loc selector ","node loc ","node children last == ","node children last ","node children ","time_methods_called include? "," extract_method_chain ","node parent  parent ","node parent  loc selector adjust ","node parent  loc selector ","node parent  loc ","node parent  children last == ","node parent  children last ","node parent  children "," extract_method_chain  include? "]}," RuboCop Cop Lint NumberConversion date_time_object?":{"type":"method","name":"date_time_object?","children":[],"call":["child children [] ","child children "," datetime? ","child send_type? ","child children []  child children [] ren [] ","child children []  child children [] ren ","child children []  send_type? "]}," RuboCop Cop Lint InheritException on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," illegal_class_name? "," class_new_call? ","corrector replace "," preferred_base_class "," message ","node method? "," exception_class? ","  message  "]}," RuboCop AST Node call_type?":{"type":"method","name":"call_type?","children":[],"call":[" csend_type? "," send_type? "]}," Rubocop Cop WordArray complex_content?":{"type":"method","name":"complex_content?","children":[],"call":["non_empty_strings == ","arr_sexp size ","content [] =~ ","content [] "," each ","str_content =~ ","Util  strip_quotes ","s loc expression source ","s loc expression ","s loc ","arr_sexp each ","Util  strip_quotes  =~ "]}," Rubocop Cop WordArray inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence "," all_positions first lineno "," all_positions first "," all_positions "," complex_content? ! "," complex_content? ","e [] == ","e [] ","array_elems all? ","array_elems size > ","array_elems size ","s [] "," each ","s []  all? ","s []  size > ","s []  size "]}," Rubocop Cop TrivialAccessors has_only_one_assignment?":{"type":"method","name":"has_only_one_assignment?","children":[],"call":["sexp [] [] [] == ","sexp [] [] [] ","sexp [] [] ","sexp [] "]}," Rubocop Cop TrivialAccessors with_braces?":{"type":"method","name":"with_braces?","children":[],"call":["sexp [] == ","sexp [] ","sexp [] [] == ","sexp [] [] "]}," Rubocop Cop TrivialAccessors empty_params?":{"type":"method","name":"empty_params?","children":[],"call":["(send\n  (send\n    (send\n      (lvar :sexp) :[]\n      (int 1)) :[]\n    (irange\n      (int 1)\n      (int -1))) :reject) empty? ","x ! ","sexp [] [] reject ","sexp [] [] ","sexp [] ","sexp [] [] == ","sexp [] == "]}," Rubocop Cop TrivialAccessors accessor_shape?":{"type":"method","name":"accessor_shape?","children":[],"call":["NON_TRIVIAL_BODYSTMT  include? ! ","NON_TRIVIAL_BODYSTMT  include? ","sexp [] [] [] [] ","sexp [] [] [] ","sexp [] [] ","sexp [] ","sexp [] [] == ","(sym :@ident) include? "]}," Rubocop Cop TrivialAccessors writer_shape?":{"type":"method","name":"writer_shape?","children":[],"call":[" with_braces? ","sexp [] "," accessor_shape? "]}," Rubocop Cop TrivialAccessors reader_shape?":{"type":"method","name":"reader_shape?","children":[],"call":[" empty_params? ","sexp [] ","sexp [] [] == ","sexp [] [] "," accessor_shape? "]}," Rubocop Cop TrivialAccessors trivial_writer?":{"type":"method","name":"trivial_writer?","children":[],"call":["body_purpose == ","accessor_var == ","sexp [] [] [] [] [] ","sexp [] [] [] [] ","sexp [] [] [] ","sexp [] [] ","sexp [] ","sexp [] [] [] [] == ","accessor_body slice! ","accessor_body [] == ","accessor_body [] ","sexp [] [] [] [] [] [] ","accessor_var chop! "," has_only_one_assignment? "," writer_shape? ","accessor_var [] == ","accessor_var [] ","sexp [] [] [] [] []  == ","sexp [] [] [] [] [] []  slice! ","sexp [] [] [] [] [] []  [] == ","sexp [] [] [] [] [] []  [] "]}," Rubocop Cop TrivialAccessors trivial_reader?":{"type":"method","name":"trivial_reader?","children":[],"call":["accessor_var == ","accessor_body slice! ","accessor_body [] == ","accessor_body [] ","sexp [] [] [] [] [] ","sexp [] [] [] [] ","sexp [] [] [] ","sexp [] [] ","sexp [] "," reader_shape? ","sexp [] [] [] [] []  slice! ","sexp [] [] [] [] []  [] == ","sexp [] [] [] [] []  [] "]}," Rubocop Cop TrivialAccessors find_trivial_accessors":{"type":"method","name":"find_trivial_accessors","children":[],"call":[" add_offence "," trivial_writer? "," trivial_reader? ","sexp [] [] ","sexp [] ","sexp [] [] lineno ","sexp [] [] sexp [] [] lineno  "]}," Rubocop Cop TrivialAccessors inspect":{"type":"method","name":"inspect","children":[],"call":[" find_trivial_accessors "," each "]}," Rubocop Cop SymbolArray inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence "," all_positions first lineno "," all_positions first "," all_positions ","e [] == ","e [] ","array_elems all? ","array_elems size > ","array_elems size ","s [] "," each ","RUBY_VERSION  < ","s loc line ","s loc ","e type == ","e type ","s children ","s loc begin source == ","s loc begin source ","s loc begin "," on_node ","s []  all? ","s children  all? ","s []  size > ","s children  size > ","s []  size ","s children  size "]}," Rubocop Cop SpaceInsideHashLiteralBraces check_space":{"type":"method","name":"check_space","children":[],"call":[" add_offence ","tokens [] pos lineno ","tokens [] pos ","tokens [] ","ix - ","ix + ","tokens [] type ","grammar_path [] == ","grammar_path [] "]}," Rubocop Cop SpaceInsideHashLiteralBraces check_unwanted_space":{"type":"method","name":"check_unwanted_space","children":[],"call":[" whitespace? "," check_space ","@correlations [] "," class config [] "," class config "," class "]}," Rubocop Cop SpaceInsideHashLiteralBraces check_missing_space":{"type":"method","name":"check_missing_space","children":[],"call":["(or\n  (send nil :whitespace?\n    (lvar :t))\n  (send\n    (array\n      (sym :on_lbrace)\n      (sym :on_rbrace)) :include?\n    (send\n      (lvar :t) :type))) ! ","(sym :on_lbrace) include? ","t type "," whitespace? "," check_space "," class config [] "," class config "," class "]}," Rubocop Cop SpaceAfterControlKeyword inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","t1 pos lineno ","t1 pos ","t2 type != ","t2 type ","KEYWORDS  include? ","t1 text ","t1 type == ","t1 type ","prev type != ","prev type ","tokens each_cons ","Token  new ","Token  new  type != ","Token  new  type "]}," Rubocop Cop SingleLineMethods empty_methods":{"type":"method","name":"empty_methods","children":[],"call":["is_empty []= ","d [] == ","d [] ","offsets last ","d [] [] ","offsets first "," each ","(pair\n  (sym :def)\n  (array\n    (int 1)\n    (int 3))) each "]}," Rubocop Cop SingleLineMethods inspect":{"type":"method","name":"inspect","children":[],"call":["is_empty [] ! ","is_empty [] ","name_token pos ","SingleLineMethods  config [] ","SingleLineMethods  config ","(sym :on_ident) include? ","t type ","tokens [] find ","tokens [] ","token pos lineno ","token pos ","(send\n  (lvar :token) :type) == ","token text ","token type "," add_offence ","token pos lineno > ","tokens each_with_index "," empty_methods "," empty_methods  [] ! "," empty_methods  [] "]}," Rubocop Cop Semicolon next_state":{"type":"method","name":"next_state","children":[],"call":[" add_offence ","token pos lineno ","token pos ","Semicolon  config [] ! ","Semicolon  config [] ","Semicolon  config ","token text != ","token text ","token type == ","token type "," whitespace? "]}," Rubocop Cop Semicolon handle_exceptions_to_the_rule":{"type":"method","name":"handle_exceptions_to_the_rule","children":[],"call":["t text == ","t text "," next_state ","@tokens [] each ","@tokens [] ","@tokens [] text == ","@tokens [] text "]}," Rubocop Cop Semicolon index_of_first_token_on_line":{"type":"method","name":"index_of_first_token_on_line","children":[],"call":["prev_line_ix + "," whitespace? ! "," whitespace? ","@tokens [] index ","@tokens [] ","t pos lineno < ","t pos lineno ","t pos ","@tokens [] rindex ","first + ","prev_line_ix +  + "]}," Rubocop Cop Offence explode":{"type":"method","name":"explode","children":[],"call":[" message "," line_number "," severity "]}," Rubocop Cop Not inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","t pos lineno ","t pos "," each_keyword "]}," Rubocop Cop LineContinuation inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","t pos lineno ","t pos ","t text == ","t text ","t type == ","t type ","tokens [] ","tokens each_index ","line =~ ","source each_with_index ","index + ","tokens []  pos lineno ","tokens []  pos ","tokens []  tokens [] extokens []  == ","tokens []  tokens [] extokens []  ","tokens []  tokens [] ype == ","tokens []  tokens [] ype ","tokens [] okens [] ","tokens [] okens each_index ","source each_witokens [] h_index "]}," Rubocop Cop LeadingCommentSpace inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","t pos lineno ","t pos ","t pos lineno == ","t text start_with? ","t text ","t text =~ ","t type == ","t type ","tokens [] ","tokens each_index ","comment loc line ","comment loc ","comment loc line == ","comment text start_with? ","comment text ","comment text =~ ","comments each ","tokens []  pos lineno ","tokens []  pos ","tokens []  pos lineno == ","tokens []  tokens [] extokens []  stokens [] artokens [] _witokens [] h? ","tokens []  tokens [] extokens []  ","tokens []  tokens [] extokens []  =~ ","tokens []  tokens [] ype == ","tokens []  tokens [] ype ","tokens [] okens [] ","tokens [] okens each_index ","commentokens []  loc line ","commentokens []  loc ","commentokens []  loc line == ","commentokens []  tokens [] extokens []  stokens [] artokens [] _witokens [] h? ","commentokens []  tokens [] extokens []  ","commentokens []  tokens [] extokens []  =~ ","commentokens [] s each "]}," Rubocop Cop HashLiteral preliminary_scan":{"type":"method","name":"preliminary_scan","children":[],"call":["offences << ","Offence  new ","receiver [] lineno ","receiver [] ","s [] [] == ","s [] [] ","s [] ","receiver [] == "," each ","s [] []  [] lineno ","s [] []  [] ","s [] []  [] == "]}," Rubocop Cop FavorJoin matching?":{"type":"method","name":"matching?","children":[],"call":["op2 [] == ","op2 [] ","op1 [] == ","op1 [] ","operator == "]}," Rubocop Cop FavorJoin inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","pos lineno "," all_positions first "," all_positions ","s [] "," matching? "," each ","pos pos lineno  "," all_positions first  lineno "," all_ all_positions first itions first "," all_ all_positions first itions "]}," Rubocop Cop Eval process_ident":{"type":"method","name":"process_ident","children":[],"call":[" add_offence ","sexp [] lineno ","sexp [] ","sexp [] == "]}," Rubocop Cop Eval inspect":{"type":"method","name":"inspect","children":[],"call":[" process_ident ","s [] "," each "]}," Rubocop Cop EmptyLineBetweenDefs inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","next_row_ix + ","source [] grep empty? ","source [] grep ","source [] ","child [] [] lineno - ","child [] [] lineno ","child [] [] ","child [] ","defs [] each ","defs [] ","identifier_of_first_def [] lineno - ","identifier_of_first_def [] lineno ","identifier_of_first_def [] ","defs [] [] ","child [] == ","parent select "," each_parent_of ","child [] [] lineno -  + ","defs [] []  [] lineno - ","defs [] []  [] lineno ","defs [] []  [] "]}," Rubocop Cop Cop each_keyword":{"type":"method","name":"each_keyword","children":[],"call":["(send\n  (send nil :keywords\n    (lvar :tokens)) :select) each ","t text == ","t text "," keywords select "," keywords "]}," Rubocop Cop Cop keywords":{"type":"method","name":"keywords","children":[],"call":["keywords pop ","penultimate text == ","penultimate text ","keywords [] ","keywords << ","t type == ","t type ","prev type != ","prev type ","tokens each ","Token  new ","(send\n  (lvar :prev) :type) != ","prev text ","(send\n  (lvar :tokens) :reject) each "," whitespace? ","tokens reject ","keywords []  text == ","keywords []  text ","Token  new  type != ","Token  new  type ","(send\n  (lvar :Token  new ) :type) != ","Token  new  text "]}," Rubocop Cop ColonMethodCall inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","t pos lineno ","t pos ","t text == ","t text ","t type ","tokens each "]}," Rubocop Cop ClassMethods inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","s [] [] [] lineno ","s [] [] [] ","s [] [] ","s [] ","s [] [] [] == ","s [] [] == "," each "]}," Rubocop Cop CaseIndentation each_when":{"type":"method","name":"each_when","children":[],"call":[" each_when ","sexp grep each ","sexp grep ","sexp [] == ","sexp [] ","(or\n  (ivar :@total_case_ix)\n  (int -1)) + ","(or\n  (ivar :(or\n  (ivar :@total_case_ix)\n  (int -1)) + )\n  (int -1)) + "]}," Rubocop Cop CaseIndentation keyword?":{"type":"method","name":"keyword?","children":[],"call":["tokens [] type != ","tokens [] type ","tokens [] ","ix - ","(send\n  (send\n    (lvar :tokens) :[]\n    (lvar :ix)) :type) == ","tokens [] text "]}," Rubocop Cop CaseIndentation find_keywords":{"type":"method","name":"find_keywords","children":[],"call":["tokens values_at "," keyword? ","tokens each_index select ","tokens each_index "]}," Rubocop Cop CaseIndentation inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","when_pos lineno ","when_pos column != ","case_tokens [] pos column ","case_tokens [] pos ","case_tokens [] ","when_pos column ","when_tokens shift pos ","when_tokens shift "," each_when "," find_keywords ","when_tokens shift pos  lineno ","when_tokens shift pos  column != "," find_keywords  [] pos column "," find_keywords  [] pos "," find_keywords  [] ","when_tokens shift pos  column "," find_keywords  shift pos "," find_keywords  shift "]}," Rubocop Cop BlockComments inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","t pos lineno ","t pos ","t type == ","t type ","tokens each ","comment loc line ","comment loc ","comment text start_with? ","comment text ","comments each "]}," Rubocop Cop AvoidGlobalVars inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","s [] lineno ","s [] ","BUILT_IN_VARS  include? "," each "]}," Rubocop Cop ArrayLiteral preliminary_scan":{"type":"method","name":"preliminary_scan","children":[],"call":["offences << ","Offence  new ","receiver [] lineno ","receiver [] ","s [] [] == ","s [] [] ","s [] ","receiver [] == "," each ","s [] []  [] lineno ","s [] []  [] ","s [] []  [] == "]}," Rubocop ConfigStore prepare":{"type":"method","name":"prepare","children":[],"call":[]}," Rubocop Config validate!":{"type":"method","name":"validate!","children":[],"call":[" fail ","(str \"unrecognized parameter \") + "," loaded_path ","default_config [] has_key? ","default_config [] ","@hash [] each_key ","@hash [] ","valid_cop_names each ","invalid_cop_names each ","default_config has_key? ","@hash keys partition ","@hash keys ","Config  load_file ","@loaded_path start_with? ","Config  load_file  [] has_key? ","Config  load_file  [] ","Config  load_file  has_key? "]}," Rubocop CLI read_source":{"type":"method","name":"read_source","children":[],"call":[" get_rid_of_invalid_byte_sequences split "," get_rid_of_invalid_byte_sequences ","File  read "]}," Rubocop CLI handle_only_option":{"type":"method","name":"handle_only_option","children":[],"call":[" fail ","@options [] ","@cops empty? ","c cop_name == ","c cop_name ","@cops select "]}," Rubocop Cop OpMethod parameters":{"type":"method","name":"parameters","children":[],"call":["param_sexp [] "," parameters ","param_sexp [] == "]}," Rubocop Cop OpMethod binary_operator?":{"type":"method","name":"binary_operator?","children":[],"call":[" parameters size == "," parameters size "," parameters ","def_sexp [] ","def_sexp [] [] == ","def_sexp [] [] "]}," RuboCop Cop IgnoredMethodPatterns ignored_method_patterns":{"type":"method","name":"ignored_method_patterns","children":[],"call":[" cop_config fetch "," cop_config "]}," RuboCop Cop IgnoredMethodPatterns ignored_method_pattern?":{"type":"method","name":"ignored_method_pattern?","children":[],"call":["Regexp  new =~ ","Regexp  new "," ignored_method_patterns any? "," ignored_method_patterns "]}," RuboCop Cop Lint NumberConversion autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," correct_method ","node receiver ","node loc expression ","node loc "," lambda "]}," RuboCop Cop Lint HandleExceptions comment_lines?":{"type":"method","name":"comment_lines?","children":[],"call":[" comment_line? "," processed_source [] any? "," processed_source [] "," line_range "," processed_source "]}," RuboCop Cop Layout EmptyLinesAroundAccessModifier message_for_only_before_style":{"type":"method","name":"message_for_only_before_style","children":[],"call":[" format "," next_line_empty? ","node last_line ","node loc selector source ","node loc selector ","node loc "]}," RuboCop Cop Layout EmptyLinesAroundAccessModifier message_for_around_style":{"type":"method","name":"message_for_around_style","children":[],"call":[" format ","node loc selector source ","node loc selector ","node loc "," class_def? "," block_start? ","node first_line "]}," RuboCop Cop Layout EmptyLinesAroundAccessModifier next_empty_line_range":{"type":"method","name":"next_empty_line_range","children":[],"call":[" source_range ","node last_line + ","node last_line "," processed_source buffer "," processed_source "]}," RuboCop Cop Layout EmptyLinesAroundAccessModifier correct_next_line_if_denied_style":{"type":"method","name":"correct_next_line_if_denied_style","children":[],"call":["corrector remove "," next_empty_line_range "," next_line_empty? ","node last_line ","corrector insert_after "," style "," next_empty_line_ next_empty_line_range  "]}," RuboCop Cop Layout EmptyLinesAroundAccessModifier allowed_only_before_style?":{"type":"method","name":"allowed_only_before_style?","children":[],"call":[" previous_line_empty? ","node first_line "," next_line_empty? ","node last_line ","node special_modifier? "," processed_source [] == "," processed_source [] "," processed_source "]}," RuboCop Cop Layout AlignHash correct_node":{"type":"method","name":"correct_node","children":[],"call":[" correct_key_value ","node loc operator ","node loc ","node value source_range ","node value ","node key source_range ","node key "," correct_no_value ","node source_range ","delta [] ","node value ! "]}," RuboCop Cop Layout AlignHash check_delta":{"type":"method","name":"check_delta","children":[],"call":[" offences_by [] push "," offences_by [] ","alignment class "," offences_by "," column_deltas [] []= "," column_deltas [] "," column_deltas "," good_alignment? "]}," RuboCop Cop Layout AlignHash add_offences":{"type":"method","name":"add_offences","children":[],"call":[" add_offense ","(or\n  (lvar :offences)\n  (array)) each ","v length "," offences_by min_by "," offences_by "]}," RuboCop Config validate_support_and_has_list":{"type":"method","name":"validate_support_and_has_list","children":[],"call":["valid include? ","formats all? ","formats is_a? ","ConfigLoader  default_configuration [] [] ","ConfigLoader  default_configuration [] ","ConfigLoader  default_configuration "]}," RuboCop AST MethodDispatchNode special_modifier?":{"type":"method","name":"special_modifier?","children":[],"call":["SPECIAL_MODIFIERS  include? "," source "," bare_access_modifier? "]}," RuboCop NodePattern Compiler next_temp_variable":{"type":"method","name":"next_temp_variable","children":[],"call":[" next_temp_value "]}," RuboCop NodePattern Compiler Sequence variadic_term_min_arity":{"type":"method","name":"variadic_term_min_arity","children":[],"call":["@arities [] begin ","@arities [] "]}," RuboCop NodePattern Compiler parse_repetition_token":{"type":"method","name":"parse_repetition_token","children":[],"call":[" tokens shift "," tokens "," tokens first "]}," RuboCop NodePattern Compiler repeated_generator":{"type":"method","name":"repeated_generator","children":[],"call":["REPEATED_TEMPLATE  result "," binding "," fail_due_to ","range begin == ","range begin "," lambda "," with_temp_variables "]}," RuboCop NodePattern Compiler compile_repeated_expr":{"type":"method","name":"compile_repeated_expr","children":[],"call":[" repeated_generator "," next_temp_variable ","@captures != ","min nil? "," parse_repetition_token "," compile_expr "," compile_ compile_expr  "]}," RuboCop Cop Style TrailingCommaInArguments autocorrect_incompatible_with":{"type":"method","name":"autocorrect_incompatible_with","children":[],"call":[]}," RuboCop Cop HashAlignment TableAlignment initialize":{"type":"method","name":"initialize","children":[],"call":[" max_key_width= "]}," RuboCop Cop Layout HeredocArgumentClosingParenthesis autocorrect_incompatible_with":{"type":"method","name":"autocorrect_incompatible_with","children":[],"call":[]}," RuboCop ConfigLoaderResolver initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop ConfigLoader required_features":{"type":"method","name":"required_features","children":[],"call":[" resolver required_features "," resolver "]}," RuboCop Cop Style TernaryParentheses below_ternary_precedence?":{"type":"method","name":"below_ternary_precedence?","children":[],"call":["child prefix_not? ","child send_type? ","child semantic_operator? ","child and_type? ","child or_type? "]}," RuboCop Cop Style MethodCallWithArgsParentheses unary_literal?":{"type":"method","name":"unary_literal?","children":[],"call":["node parent ","node sign? ","node numeric_type? "]}," RuboCop Cop Style IfInsideElse allow_if_modifier?":{"type":"method","name":"allow_if_modifier?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style IfInsideElse allow_if_modifier_in_else_branch?":{"type":"method","name":"allow_if_modifier_in_else_branch?","children":[],"call":[" allow_if_modifier? "]}," RuboCop Cop Style FloatDivision message":{"type":"method","name":"message","children":[],"call":[" style ","MESSAGES  [] "]}," RuboCop Cop Style FloatDivision offense_condition?":{"type":"method","name":"offense_condition?","children":[],"call":[" any_coerce? "," both_coerce? "," left_coerce? "," right_coerce? "," style "]}," RuboCop Cop Style FloatDivision on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," offense_condition? "," correct_from_slash_to_fdiv ","node first_argument ","node receiver "," add_to_f_method "," remove_to_f_method "," style "]}," RuboCop Cop Layout IndentationWidth indented_internal_methods_style?":{"type":"method","name":"indented_internal_methods_style?","children":[],"call":[" indentation_consistency_style == "," indentation_consistency_style "]}," RuboCop Cop Layout IndentationWidth check_members_for_indented_internal_methods_style":{"type":"method","name":"check_members_for_indented_internal_methods_style","children":[],"call":[" check_indentation "," indentation_consistency_style "," each_member "]}," RuboCop Cop Layout IndentationConsistency check_indented_internal_methods_style":{"type":"method","name":"check_indented_internal_methods_style","children":[],"call":[" check_alignment ","children_to_check each ","children_to_check last << ","children_to_check last ","children_to_check << "," bare_access_modifier? ","node children each ","node children "]}," RuboCop Cop Gemspec RubyVersionGlobalsUsage gem_spec_with_ruby_version?":{"type":"method","name":"gem_spec_with_ruby_version?","children":[],"call":[" ruby_version? "," gem_specification? "," processed_source ast "," processed_source "," gem_specification "]}," RuboCop Cop Gemspec RubyVersionGlobalsUsage on_const":{"type":"method","name":"on_const","children":[],"call":[" add_offense "," gem_spec_with_ruby_version? "]}," RuboCop Config obsolete_enforced_style_message":{"type":"method","name":"obsolete_enforced_style_message","children":[],"call":[" smart_loaded_path ","style [] == ","style [] ","key start_with? "," [] "]}," RuboCop Config obsolete_enforced_style":{"type":"method","name":"obsolete_enforced_style","children":[],"call":[" obsolete_enforced_style_message ","params [] ","OBSOLETE_ENFORCED_STYLES  map "]}," RuboCop AST NumericNode sign?":{"type":"method","name":"sign?","children":[],"call":[" source match "," source "]}," RuboCop OptionsValidator validate_auto_correct":{"type":"method","name":"validate_auto_correct","children":[],"call":[" raise "," format ","@options key? "]}," RuboCop ErrorWithAnalyzedFileLocation message":{"type":"method","name":"message","children":[],"call":[" cause inspect "," cause "]}," RuboCop ErrorWithAnalyzedFileLocation column":{"type":"method","name":"column","children":[],"call":[]}," RuboCop ErrorWithAnalyzedFileLocation line":{"type":"method","name":"line","children":[],"call":[]}," RuboCop ErrorWithAnalyzedFileLocation initialize":{"type":"method","name":"initialize","children":[],"call":["node loc ","node is_a? "]}," RuboCop Cop Team process_errors":{"type":"method","name":"process_errors","children":[],"call":[" handle_error ","error cop "," handle_warning ","cause is_a? ","error cause ","error column ","error line ","errors each ","error cause  is_a? ","error error cause  "]}," RuboCop Cop Style MultilineWhenThen autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove "," range_with_surrounding_space ","node loc begin ","node loc "," lambda "]}," RuboCop Cop Style MultilineWhenThen on_when":{"type":"method","name":"on_when","children":[],"call":[" add_offense ","node children last ","node children ","node then? ","node multiline? ! ","node multiline? ","node children last nil? ! ","node children last nil? "," accept_node_type? ","node body "," require_then? ","corrector remove "," range_with_surrounding_space ","node loc begin ","node loc ","node then? ! "," node loc begin _with_surrounding_space "]}," RuboCop Cop Style DoubleCopDisableDirective autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","comment text [] ","comment text ","comment loc expression ","comment loc "," lambda ","comment text start_with? "]}," RuboCop Cop Style DoubleCopDisableDirective investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense ","comment text scan size > ","comment text scan size ","comment text scan ","comment text ","processed_source comments each ","processed_source comments "]}," RuboCop Cop Layout SpaceInsideBlockBraces aligned_braces?":{"type":"method","name":"aligned_braces?","children":[],"call":["left_brace first_line == ","right_brace last_column ","left_brace first_line ","column == "," inner_last_space_count ","right_brace column "]}," RuboCop Cop Layout SpaceInsideBlockBraces multiline_block?":{"type":"method","name":"multiline_block?","children":[],"call":["left_brace first_line != ","right_brace first_line ","left_brace first_line "]}," RuboCop Cop Layout RescueEnsureAlignment access_modifier?":{"type":"method","name":"access_modifier?","children":[],"call":["ALTERNATIVE_ACCESS_MODIFIERS  include? ","node method_name ","node respond_to? ","node access_modifier? "]}," RuboCop Cop Layout LeadingCommentSpace doxygen_comment_style?":{"type":"method","name":"doxygen_comment_style?","children":[],"call":["comment text start_with? ","comment text "," allow_doxygen_comment? "]}," RuboCop Cop Layout LeadingCommentSpace allow_doxygen_comment?":{"type":"method","name":"allow_doxygen_comment?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Cop disable_uncorrectable":{"type":"method","name":"disable_uncorrectable","children":[],"call":["@corrections << ","Correction  new "," disable_offense ","@disabled_lines []= ","@disabled_lines key? ","node location line ","node location ","@disabled_node location line s []= ","@disabled_node location line s key? ","node location node location line  "]}," RuboCop Cop Cop reason_to_not_correct":{"type":"method","name":"reason_to_not_correct","children":[],"call":["@corrected_nodes key? "," autocorrect? "," correctable? "]}," RuboCop Cop Cop call":{"type":"method","name":"call","children":[],"call":[" raise ","ErrorWithAnalyzedFileLocation  new "," cop "," node "," lambda call "," lambda "]}," RuboCop Cop AutocorrectLogic disable_offense_before_and_after":{"type":"method","name":"disable_offense_before_and_after","children":[],"call":["corrector insert_after "," cop_name ","corrector insert_before ","range_by_lines source_line [] ","range_by_lines source_line ","range_by_lines resize ","range_by_lines size + ","range_by_lines size "," lambda ","Corrector  new wrap ","Corrector  new "]}," RuboCop Cop AutocorrectLogic disable_offense_at_end_of_line":{"type":"method","name":"disable_offense_at_end_of_line","children":[],"call":["corrector insert_after "," lambda ","Corrector  new insert_after ","Corrector  new "]}," RuboCop Cop AutocorrectLogic max_line_length":{"type":"method","name":"max_line_length","children":[],"call":[" config for_cop [] "," config for_cop "," config "]}," RuboCop Cop AutocorrectLogic range_by_lines":{"type":"method","name":"range_by_lines","children":[],"call":["Parser Source Range  new ","range source_buffer ","range end_pos + ","range end_pos ","last_line length - ","range last_column ","last_line length ","range source_buffer source_line ","range last_line ","range begin_pos - ","range column ","range begin_pos ","range source_buffer source_line  length - ","range source_buffer source_line  length ","range range source_buffer source_line  "]}," RuboCop Cop AutocorrectLogic range_of_first_line":{"type":"method","name":"range_of_first_line","children":[],"call":["Parser Source Range  new ","range source_buffer ","begin_of_first_line + ","range source_line length ","range source_line ","range begin_pos - ","range column ","range begin_pos ","range begin_pos -  + "]}," RuboCop Cop AutocorrectLogic disable_offense":{"type":"method","name":"disable_offense","children":[],"call":[" disable_offense_before_and_after "," range_by_lines "," disable_offense_at_end_of_line "," range_of_first_line ","needed_line_length <= "," max_line_length ","range column + ","(send\n  (send\n    (lvar :range) :source_line) :+\n  (lvar :eol_comment)) length ","range source_line + ","range source_line ","range column "," cop_name ","node location expression ","node location "," surrounding_heredoc "," disable_offense_with_eol_or_surround_comment "," surrounding_percent_array "," node location expression _by_lines "," node location expression _of_first_line ","range column +  <= ","(send\n  (send\n    (lvar :range) :source_line) :+\n  (lvar :eol_comment)) length  <= ","node location expression  column + ","(send\n  (send\n    (lvar :node location expression ) :source_line) :+\n  (lvar :eol_comment)) length ","node location expression  source_line + ","node location expression  source_line ","node location expression  column "]}," RuboCop Cop AutocorrectLogic disable_uncorrectable?":{"type":"method","name":"disable_uncorrectable?","children":[],"call":["@options [] == ","@options [] "]}," RuboCop Cop AutocorrectLogic correctable?":{"type":"method","name":"correctable?","children":[],"call":[" disable_uncorrectable? "," support_autocorrect? "," class support_autocorrect? "," class "]}," RuboCop AST MethodDispatchNode ascend_macro_scope?":{"type":"method","name":"ascend_macro_scope?","children":[],"call":[" ascend_macro_scope? ","ancestor parent "," root_node? "," wrapped_macro_scope? "]}," RuboCop ProcessedSource current_line":{"type":"method","name":"current_line","children":[],"call":[" lines [] ","token line - ","token line "," lines "]}," RuboCop Cop Style VariableInterpolation on_node_with_interpolations":{"type":"method","name":"on_node_with_interpolations","children":[],"call":[" add_offense "," var_nodes each "," var_nodes ","node children ","corrector replace ","var_node source "]}," RuboCop Cop Style GuardClause too_long_for_single_line?":{"type":"method","name":"too_long_for_single_line?","children":[],"call":["node source_range column + > ","node source_range column + ","example length ","node source_range column ","node source_range "," max_line_length ","  max_line_length _line_length "]}," RuboCop Cop Style GuardClause register_offense":{"type":"method","name":"register_offense","children":[],"call":[" add_offense "," format ","condition source "," too_long_for_single_line? ","(lvar :scope_exiting_keyword) join ","node node_parts ","node loc keyword ","node loc "," trivial? "," autocorrect ","guard nil? ","node else? ","(begin\n  (lvar :conditional_keyword)) chomp "]}," RuboCop Cop Style GuardClause opposite_keyword":{"type":"method","name":"opposite_keyword","children":[],"call":["node if? "]}," RuboCop Cop Style ConstantVisibility match_name?":{"type":"method","name":"match_name?","children":[],"call":["name to_sym == ","constant_name to_sym ","name to_sym "]}," RuboCop Cop Style CommentedKeyword line":{"type":"method","name":"line","children":[],"call":["comment location expression source_line ","comment location expression ","comment location "]}," RuboCop Cop PrecedingFollowingAlignment remove_optarg_equals":{"type":"method","name":"remove_optarg_equals","children":[],"call":["optarg_eql include? ","t begin_pos ","asgn_tokens reject ","(send\n  (lvar :optargs) :map) to_set ","o loc operator begin_pos ","o loc operator ","o loc ","optargs map ","processed_source ast each_node ","processed_source ast ","optargs to_set ","(send\n  (lvar :optargs) :map) to_set  include? ","(send\n  (lvar :processed_source ast each_node ) :map) to_set ","processed_source ast each_node  map ","processed_source ast each_node  to_set "]}," RuboCop Cop PrecedingFollowingAlignment relevant_assignment_lines":{"type":"method","name":"relevant_assignment_lines","children":[],"call":["current_line_indent == ","result << "," assignment_lines include? "," assignment_lines ","blank_line ! ","current_line_indent < "," processed_source lines [] blank? "," processed_source lines [] ","line_number - "," processed_source lines "," processed_source "," processed_source line_indentation ","line_range each ","line_range first "," processed_source line_indentation  == "," processed_source lines [] blank?  ! "," processed_source line_indentation  < "]}," RuboCop Cop PrecedingFollowingAlignment assignment_tokens":{"type":"method","name":"assignment_tokens","children":[],"call":["Set  new ","tokens uniq "," remove_optarg_equals "," processed_source "," processed_source tokens select "," processed_source tokens "," remove_optarg_equals  uniq "," processed_source tokens select  uniq "," processed_source  remove_optarg_equals  select "," processed_source  processed_source tokens select  select "," processed_source  remove_optarg_equals  "," processed_source  processed_source tokens select  "]}," RuboCop Cop PrecedingFollowingAlignment assignment_lines":{"type":"method","name":"assignment_lines","children":[],"call":[" assignment_tokens map "," assignment_tokens "]}," RuboCop Cop PrecedingFollowingAlignment aligned_with_assignment":{"type":"method","name":"aligned_with_assignment","children":[],"call":[" aligned_assignment? ","token pos "," processed_source lines [] ","relevant_line_number - "," processed_source lines "," processed_source ","relevant_indent < "," processed_source line_indentation ","assignment_lines [] "," relevant_assignment_lines ","token line ","assignment_lines []  - "," processed_source line_indentation  < "," processed_source lines [] s [] "," relevant_assignment_lines  [] "," relevant_ processed_source lines [] s "," relevant_ relevant_assignment_lines  "]}," RuboCop Cop PrecedingFollowingAlignment aligned_with_subsequent_assignment":{"type":"method","name":"aligned_with_subsequent_assignment","children":[],"call":[" aligned_with_assignment ","token line upto "," processed_source lines length "," processed_source lines "," processed_source ","token line "]}," RuboCop Cop PrecedingFollowingAlignment aligned_with_preceding_assignment":{"type":"method","name":"aligned_with_preceding_assignment","children":[],"call":[" aligned_with_assignment ","token line downto ","token line "]}," RuboCop Cop Interpolation on_node_with_interpolations":{"type":"method","name":"on_node_with_interpolations","children":[],"call":[" on_interpolation ","node each_child_node "]}," RuboCop Cop Interpolation on_dstr":{"type":"method","name":"on_dstr","children":[],"call":[" on_node_with_interpolations "]}," RuboCop Cop Metrics LineLength shebang?":{"type":"method","name":"shebang?","children":[],"call":["line start_with? ","line_index zero? "]}," RuboCop Cop Lint StringConversionInInterpolation on_interpolation":{"type":"method","name":"on_interpolation","children":[],"call":[" add_offense "," to_s_without_args? ","begin_node children last ","begin_node children "]}," RuboCop Cop Lint LiteralInInterpolation on_interpolation":{"type":"method","name":"on_interpolation","children":[],"call":[" add_offense "," prints_as_self? "," special_keyword? ","begin_node children last ","begin_node children ","corrector replace ","final_node parent "," autocorrected_value ","final_node dstr_type? ","(str \"\\\\s\") match? "," in_array_percent_literal? "," offending? ","begin_node children last  parent "," autocorrected_ autocorrected_value  ","begin_node children last  dstr_type? "]}," RuboCop Cop Lint ErbNewArguments arguments_range":{"type":"method","name":"arguments_range","children":[],"call":[" range_between ","arguments last source_range end_pos ","arguments last source_range ","arguments last ","arguments first source_range begin_pos ","arguments first source_range ","arguments first ","node arguments ","node arguments  last source_range end_pos ","node arguments  last source_range ","node arguments  last ","node arguments  first source_range begin_pos ","node arguments  first source_range ","node arguments  first ","node node arguments  "]}," RuboCop Cop Lint ErbNewArguments override_by_legacy_args":{"type":"method","name":"override_by_legacy_args","children":[],"call":["overridden_kwargs []= ","node arguments [] source ","node arguments [] ","node arguments ","node arguments [] hash_type? ! ","node arguments [] hash_type? ","kwargs dup ","arguments [] source ","arguments [] ","arguments [] hash_type? ! ","arguments [] hash_type? ","kwargs dup  []= ","node node arguments  [] source ","node node arguments  [] ","node node arguments  ","node node arguments  [] hash_type? ! ","node node arguments  [] hash_type? ","node arguments  [] source ","node arguments  [] ","node arguments  [] hash_type? ! ","node arguments  [] hash_type? "]}," RuboCop Cop Lint ErbNewArguments build_kwargs":{"type":"method","name":"build_kwargs","children":[],"call":["pair value source ","pair value ","pair key source ","pair key ","node arguments last pairs each ","node arguments last pairs ","node arguments last ","node arguments ","node arguments last hash_type? "]}," RuboCop Cop Lint ErbNewArguments autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," arguments_range "," lambda ","(lvar :str_arg) flatten compact join ","(lvar :str_arg) flatten compact ","(lvar :str_arg) flatten "," override_by_legacy_args "," build_kwargs ","node arguments [] source ","node arguments [] ","node arguments ","(lvar :node arguments [] source ) flatten compact join ","(lvar :node arguments [] source ) flatten compact ","(lvar :node arguments [] source ) flatten "," build_ build_kwargs  "]}," RuboCop Cop Lint EmptyInterpolation on_interpolation":{"type":"method","name":"on_interpolation","children":[],"call":[" add_offense ","begin_node children empty? ","begin_node children ","corrector remove ","begin_node loc expression ","begin_node loc ","begin_node source_range "]}," RuboCop Cop Layout SpaceInsideStringInterpolation delimiters":{"type":"method","name":"delimiters","children":[],"call":[" processed_source tokens [] "," index_of_last_token "," processed_source tokens "," processed_source "," index_of_first_token "," processed_source last_token_of "," processed_source first_token_of "]}," RuboCop Cop Layout SpaceInsideStringInterpolation on_interpolation":{"type":"method","name":"on_interpolation","children":[],"call":[" space_offenses "," no_space_offenses "," style == "," style "," empty_brackets? "," delimiters ","begin_node multiline? "," processed_source tokens_within "," processed_source "," processed_source  processed_source tokens_within _within "]}," RuboCop Cop Layout SpaceAroundOperators on_assignment":{"type":"method","name":"on_assignment","children":[],"call":[" check_operator ","rhs source_range ","node loc operator ","node loc "]}," RuboCop Cop Layout IndentationWidth access_modifier_indentation_style":{"type":"method","name":"access_modifier_indentation_style","children":[],"call":[" config for_cop [] "," config for_cop "," config "]}," RuboCop Cop Layout IndentationWidth check_members_for_normal_style":{"type":"method","name":"check_members_for_normal_style","children":[],"call":[" check_indentation ","member access_modifier? ","member send_type? ","members first children each ","members first children ","members first "]}," RuboCop Cop Layout ExtraSpacing all_relevant_assignment_lines":{"type":"method","name":"all_relevant_assignment_lines","children":[],"call":["(send\n  (send nil :relevant_assignment_lines\n    (send\n      (lvar :line_number) :downto\n      (int 1))) :+\n  (send nil :relevant_assignment_lines\n    (send\n      (lvar :line_number) :upto\n      (lvar :last_line_number)))) uniq sort ","(send\n  (send nil :relevant_assignment_lines\n    (send\n      (lvar :line_number) :downto\n      (int 1))) :+\n  (send nil :relevant_assignment_lines\n    (send\n      (lvar :line_number) :upto\n      (lvar :last_line_number)))) uniq "," relevant_assignment_lines + "," relevant_assignment_lines ","line_number upto ","line_number downto "," processed_source lines size "," processed_source lines "," processed_source ","(send\n  (send nil :relevant_assignment_lines\n    (send\n      (lvar :line_number) :downto\n      (int 1))) :+\n  (send nil :relevant_assignment_lines\n    (send\n      (lvar :line_number) :upto\n      (lvar : processed_source lines size )))) uniq sort ","(send\n  (send nil :relevant_assignment_lines\n    (send\n      (lvar :line_number) :downto\n      (int 1))) :+\n  (send nil :relevant_assignment_lines\n    (send\n      (lvar :line_number) :upto\n      (lvar : processed_source lines size )))) uniq "]}," RuboCop ConfigValidator reject_mutually_exclusive_defaults":{"type":"method","name":"reject_mutually_exclusive_defaults","children":[],"call":[" raise "," for_all_cops [] "," for_all_cops "]}," RuboCop ConfigValidator read_ruby_version_from_bundler_lock_file":{"type":"method","name":"read_ruby_version_from_bundler_lock_file","children":[],"call":["result captures first to_f ","result captures first ","result captures ","line match ","File  foreach "," bundler_lock_file_path ","line match  captures first to_f ","line match  captures first ","line match  captures "," bundler_ bundler_lock_file_path  "]}," RuboCop ConfigValidator target_ruby_version_from_bundler_lock_file":{"type":"method","name":"target_ruby_version_from_bundler_lock_file","children":[],"call":[" read_ruby_version_from_bundler_lock_file "]}," RuboCop ConfigValidator target_ruby_version_from_version_file":{"type":"method","name":"target_ruby_version_from_version_file","children":[],"call":["md [] to_f ","md [] ","File  read match ","File  read ","File  file? "," ruby_version_file ","File   ruby_version_file ? "," ruby_version_ ruby_version_file  "]}," RuboCop ConfigValidator ruby_version_file":{"type":"method","name":"ruby_version_file","children":[],"call":[" find_file_upwards "," base_dir_for_path_parameters "]}," RuboCop ConfigValidator target_ruby_source":{"type":"method","name":"target_ruby_source","children":[],"call":[" smart_loaded_path "," bundler_lock_file_path "]}," RuboCop ConfigValidator validate_support_and_has_list":{"type":"method","name":"validate_support_and_has_list","children":[],"call":["valid include? ","formats all? ","formats is_a? ","ConfigLoader  default_configuration [] [] ","ConfigLoader  default_configuration [] ","ConfigLoader  default_configuration "]}," RuboCop ConfigValidator validate_enforced_styles":{"type":"method","name":"validate_enforced_styles","children":[],"call":[" raise ","valid join "," smart_loaded_path "," validate_support_and_has_list ","valid include? ","ConfigLoader  default_configuration [] [] ","ConfigLoader  default_configuration [] ","ConfigLoader  default_configuration ","RuboCop Cop Util  to_supported_styles ","styles each ","key start_with? ","@config [] select ","@config [] ","valid_cop_names each ","ConfigLoader  default_configuration [] []  join "," ConfigLoader  default_configuration [] [] ate_support_and_has_list ","ConfigLoader  default_configuration [] []  include? ","ConfigLoader  default_configuration [] [] _cop_names each "]}," RuboCop ConfigValidator validate_parameter_names":{"type":"method","name":"validate_parameter_names","children":[],"call":[" warn "," Rainbow yellow to_s "," Rainbow yellow "," Rainbow ","(send\n  (send\n    (lvar :default_config) :keys) :-\n  (const nil :INTERNAL_PARAMS)) join ","default_config keys - ","default_config keys ","default_config key? ","COMMON_PARAMS  include? ","@config [] each_key ","@config [] ","ConfigLoader  default_configuration [] ","ConfigLoader  default_configuration "," validate_section_presence ","valid_cop_names each ","supported_params join "," each_invalid_parameter ","(send\n  (send\n    (lvar :ConfigLoader  default_configuration [] ) :keys) :-\n  (const nil :INTERNAL_PARAMS)) join ","ConfigLoader  default_configuration []  keys - ","ConfigLoader  default_configuration []  keys ","ConfigLoader  default_configuration []  key? ","ConfigLoader  ConfigLoader  default_configuration [] uration [] ","ConfigLoader  ConfigLoader  default_configuration [] uration "]}," RuboCop ConfigValidator validate_syntax_cop":{"type":"method","name":"validate_syntax_cop","children":[],"call":[" raise "," smart_loaded_path ","default_config merge != ","default_config merge ","ConfigLoader  default_configuration [] ","ConfigLoader  default_configuration ","@config [] ","ConfigLoader  default_configuration []  merge != ","ConfigLoader  default_configuration []  merge ","ConfigLoader  ConfigLoader  default_configuration [] uration [] ","ConfigLoader  ConfigLoader  default_configuration [] uration "]}," RuboCop ConfigValidator warn_about_unrecognized_cops":{"type":"method","name":"warn_about_unrecognized_cops","children":[],"call":[" warn "," Rainbow yellow "," Rainbow "," smart_loaded_path ","name == ","Cop Cop  registry contains_cop_matching? ","Cop Cop  registry ","invalid_cop_names each "]}," RuboCop ConfigValidator check_target_ruby":{"type":"method","name":"check_target_ruby","children":[],"call":[" raise ","KNOWN_RUBIES  join "," target_ruby_source "," target_ruby_version inspect "," target_ruby_version ","OBSOLETE_RUBIES  [] ","OBSOLETE_RUBIES  include? ","KNOWN_RUBIES  include? ","TargetRuby  supported_versions join ","TargetRuby  supported_versions "," target_ruby rubocop_version_with_support "," target_ruby "," target_ruby source "," target_ruby supported? "," target_ruby_ target_ruby source  "," target_ruby  target_ruby source  "]}," RuboCop ConfigValidator validate_section_presence":{"type":"method","name":"validate_section_presence","children":[],"call":[" raise "," smart_loaded_path ","@config [] nil? ","@config [] ","@config key? "]}," RuboCop ConfigValidator target_ruby_version":{"type":"method","name":"target_ruby_version","children":[],"call":[" target_ruby_version_from_bundler_lock_file "," target_ruby_version_from_version_file "," for_all_cops [] to_f "," for_all_cops [] "," for_all_cops "," target_ruby version "," target_ruby "]}," RuboCop ConfigValidator validate":{"type":"method","name":"validate","children":[],"call":[" reject_mutually_exclusive_defaults "," validate_syntax_cop "," validate_enforced_styles "," validate_parameter_names "," check_target_ruby "," warn_about_unrecognized_cops ","@config_obsoletion reject_obsolete_cops_and_parameters ","ConfigLoader  default_configuration key? ","ConfigLoader  default_configuration ","@config keys partition ","@config keys ","File  expand_path start_with? ","File  expand_path ","@config loaded_path ","File  join ","@config internal? "," alert_about_unrecognized_cops "," reject_conflicting_safe_settings "," check_cop_config_value "," validate_new_cops_parameter "," check_obsoletions "]}," RuboCop ConfigValidator initialize":{"type":"method","name":"initialize","children":[],"call":["ConfigObsoletion  new ","TargetRuby  new "]}," RuboCop ConfigObsoletion smart_loaded_path":{"type":"method","name":"smart_loaded_path","children":[],"call":["PathUtil  smart_path ","@config loaded_path "]}," RuboCop ConfigObsoletion obsolete_parameter_message":{"type":"method","name":"obsolete_parameter_message","children":[],"call":[" smart_loaded_path ","obsolete_parameters map ","obsolete_parameters empty? ","@config [] "," Array select "," Array "," Array map "]}," RuboCop ConfigObsoletion obsolete_parameters":{"type":"method","name":"obsolete_parameters","children":[],"call":[" obsolete_parameter_message ","params [] ","OBSOLETE_PARAMETERS  map ","@warnings concat ","params fetch == ","params fetch ","OBSOLETE_PARAMETERS  collect "]}," RuboCop ConfigObsoletion obsolete_enforced_style_message":{"type":"method","name":"obsolete_enforced_style_message","children":[],"call":[" smart_loaded_path ","style [] == ","style [] ","key start_with? ","@config [] "]}," RuboCop ConfigObsoletion obsolete_enforced_style":{"type":"method","name":"obsolete_enforced_style","children":[],"call":[" obsolete_enforced_style_message ","params [] ","OBSOLETE_ENFORCED_STYLES  map "]}," RuboCop ConfigObsoletion obsolete_cops":{"type":"method","name":"obsolete_cops","children":[],"call":["message + "," smart_loaded_path ","@config key? ","Cop Badge  parse cop_name ","Cop Badge  parse ","OBSOLETE_COPS  map "]}," RuboCop ConfigObsoletion reject_obsolete_cops_and_parameters":{"type":"method","name":"reject_obsolete_cops_and_parameters","children":[],"call":[" raise ","messages join ","messages empty? ","(send nil :obsolete_cops) flatten compact ","(send nil :obsolete_cops) flatten "," obsolete_enforced_style "," obsolete_parameters "," obsolete_cops ","(send nil :obsolete_cops) flatten compact  join ","(send nil :obsolete_cops) flatten compact  empty? "]}," RuboCop ConfigObsoletion initialize":{"type":"method","name":"initialize","children":[],"call":[" load_rules "]}," RuboCop MagicComment valid_literal_value?":{"type":"method","name":"valid_literal_value?","children":[],"call":["(true) include? "," frozen_string_literal "]}," RuboCop Formatter PacmanFormatter step":{"type":"method","name":"step","children":[],"call":[" update_progress_line "," output puts "," output ","@progress_line [] =~ ","@progress_line [] "," output printf ","@progress_line sub ","Regexp  quote ","(str \"ᗣ|\\\\.\") match? ","@progress_line sub  [] =~ ","@progress_line sub  [] ","@progress_line sub  sub "]}," RuboCop Formatter PacmanFormatter pacdots":{"type":"method","name":"pacdots","children":[],"call":["PACDOT  * "]}," RuboCop Formatter PacmanFormatter update_progress_line":{"type":"method","name":"update_progress_line","children":[],"call":[" pacdots ","@total_files - "," cols * "," cols ","(send\n  (ivar :@total_files) :/\n  (send nil :cols)) eql? ","@total_files / ","@total_files > "]}," RuboCop Formatter PacmanFormatter cols":{"type":"method","name":"cols","children":[],"call":["width zero? ","width nil? ","(str \"tput cols\") chomp to_i ","(str \"tput cols\") chomp ","$stdout winsize ","(str \"tput cols\") chomp to_i  zero? ","(str \"tput cols\") chomp to_i  nil? "]}," RuboCop Formatter PacmanFormatter next_step":{"type":"method","name":"next_step","children":[],"call":[" step "," colorize ","COLOR_FOR_SEVERITY  [] ","offenses last severity name ","offenses last severity ","offenses last ","offenses empty? "]}," RuboCop Formatter PacmanFormatter file_finished":{"type":"method","name":"file_finished","children":[],"call":[" report_file "," next_step "," count_stats ","offenses empty? "]}," RuboCop Formatter PacmanFormatter file_started":{"type":"method","name":"file_started","children":[],"call":[" step "]}," RuboCop Formatter PacmanFormatter started":{"type":"method","name":"started","children":[],"call":[" update_progress_line "," output puts "," pluralize ","target_files size "," output "]}," RuboCop Formatter PacmanFormatter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop Cop VariableForce Variable in_modifier_if?":{"type":"method","name":"in_modifier_if?","children":[],"call":["parent parent ","assignment node parent ","assignment node ","parent parent  parent parent  ","assignment node parent  assignment node parent  ","assignment node parent parent  ","assignment node assignment node parent  "]}," RuboCop Cop Utils FormatString parse":{"type":"method","name":"parse","children":[],"call":["FormatSequence  new ","match [] ","match [] to_s + ","match [] to_s ","match end ","match begin ","Regexp  last_match ","@source to_enum map ","@source to_enum ","matches << ","@source scan ","Regexp  last_match  [] ","Regexp  last_match  [] to_s + ","Regexp  last_match  [] to_s ","Regexp  last_match  end ","Regexp  last_match  begin ","Regexp  last_Regexp  last_match  ","Regexp  last_match es << "]}," RuboCop Cop Utils FormatString max_digit_dollar_num":{"type":"method","name":"max_digit_dollar_num","children":[],"call":[" format_sequences map max "," format_sequences map "," format_sequences "]}," RuboCop Cop Utils FormatString named_interpolation?":{"type":"method","name":"named_interpolation?","children":[],"call":[" format_sequences any? "," format_sequences "]}," RuboCop Cop Utils FormatString format_sequences":{"type":"method","name":"format_sequences","children":[],"call":[" parse "]}," RuboCop Cop Utils FormatString initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop Cop Utils FormatString FormatSequence style":{"type":"method","name":"style","children":[],"call":[" template? "," annotated? "]}," RuboCop Cop Utils FormatString FormatSequence max_digit_dollar_num":{"type":"method","name":"max_digit_dollar_num","children":[],"call":["(send\n  (send\n    (ivar :@source) :scan\n    (const nil :DIGIT_DOLLAR)) :map) max ","digit_dollar_num to_i ","@source scan map ","@source scan "]}," RuboCop Cop Utils FormatString FormatSequence arity":{"type":"method","name":"arity","children":[],"call":["@source scan count + ","@source scan count ","@source scan "]}," RuboCop Cop Utils FormatString FormatSequence template?":{"type":"method","name":"template?","children":[],"call":["@source include? "," name "]}," RuboCop Cop Utils FormatString FormatSequence annotated?":{"type":"method","name":"annotated?","children":[],"call":["@source include? "," name "]}," RuboCop Cop Utils FormatString FormatSequence percent?":{"type":"method","name":"percent?","children":[],"call":[" type == "," type "]}," RuboCop Cop Utils FormatString FormatSequence initialize":{"type":"method","name":"initialize","children":[],"call":["opts [] ","match [] ","match [] to_s + ","match [] to_s ","match end ","match begin "]}," RuboCop Cop Style TernaryParentheses only_closing_parenthesis_is_last_line?":{"type":"method","name":"only_closing_parenthesis_is_last_line?","children":[],"call":["condition source split last == ","condition source split last ","condition source split ","condition source "]}," RuboCop Cop Style SafeNavigation handle_comments":{"type":"method","name":"handle_comments","children":[],"call":["corrector insert_before ","comments + ","method_call loc expression ","method_call loc "," processed_source comments map join "," processed_source comments map "," processed_source comments "," processed_source "," processed_source comments empty? "," comments join "," comments ","comments map join ","comments map ","comments empty? "," processed_source comments map join  + "," comments  + "," processed_source  processed_source comments map join  map join "," processed_source  comments  map join "," processed_source  processed_source comments map join  map "," processed_source  comments  map "," processed_source  processed_source comments map join  "," processed_source  comments  "," processed_source  processed_source comments map join  empty? "," processed_source  comments  empty? ","  processed_source comments map join  join ","  comments  join ","  processed_source comments map join  ","  comments  "," processed_source comments map join  map join "," comments  map join "," processed_source comments map join  map "," comments  map "," processed_source comments map join  empty? "," comments  empty? "]}," RuboCop Cop Style RedundantSelf add_lhs_to_local_variables_scopes":{"type":"method","name":"add_lhs_to_local_variables_scopes","children":[],"call":["@local_variables_scopes [] << ","@local_variables_scopes [] ","rhs arguments each ","rhs arguments ","rhs arguments empty? ! ","rhs arguments empty? "]}," RuboCop Cop Style RedundantSelf on_masgn":{"type":"method","name":"on_masgn","children":[],"call":[" add_lhs_to_local_variables_scopes ","child to_a first ","child to_a ","lhs children each ","lhs children "," add_masgn_lhs_variables "]}," RuboCop Cop Style RedundantParentheses method_chain_begins_with_hash_literal?":{"type":"method","name":"method_chain_begins_with_hash_literal?","children":[],"call":[" method_chain_begins_with_hash_literal? ","node children first ","node children ","node send_type? ","node hash_type? ","node nil? "]}," RuboCop Cop Style RedundantParentheses first_arg_begins_with_hash_literal?":{"type":"method","name":"first_arg_begins_with_hash_literal?","children":[],"call":[" parentheses? ! "," parentheses? ","node parent "," first_argument? "," method_chain_begins_with_hash_literal? ","node children first ","node children "]}," RuboCop Cop Style NestedModifier add_parentheses_to_method_arguments":{"type":"method","name":"add_parentheses_to_method_arguments","children":[],"call":["expr << ","send_node arguments map join ","send_node arguments map ","send_node arguments ","send_node method_name to_s ","send_node method_name ","send_node receiver source ","send_node receiver "," +@ "," +@  << "]}," RuboCop Cop Style MixinUsage ascend_macro_scope?":{"type":"method","name":"ascend_macro_scope?","children":[],"call":[" ascend_macro_scope? ","ancestor parent "," wrapped_macro_scope? "]}," RuboCop Cop Style IfUnlessModifier to_normal_form":{"type":"method","name":"to_normal_form","children":[],"call":["(begin\n  (send\n    (lvar :node) :keyword)) chomp ","node body source ","node body ","node condition source ","node condition ","node keyword ","  * ","node source_range column ","node source_range "]}," RuboCop Cop Style IfUnlessModifier too_long_single_line?":{"type":"method","name":"too_long_single_line?","children":[],"call":["range last_column > "," max_line_length ","range last_column ","range first_line == ","range last_line ","range first_line ","node source_range "," line_length_enabled_at_line? "," too_long_line_based_on_config? "," line_length <= "," line_length ","range source_line ","range single_line? ","node source_range  last_column > "," max_range source_line _length ","node source_range  last_column ","node source_range  first_line == ","range first_range source_line  == ","node source_range  last_line ","range last_range source_line  ","node source_range  first_line ","range first_range source_line  ","node source_node source_range  "," range source_line _length_enabled_at_range source_line ? "," too_long_range source_line _based_on_config? "," range source_line _length <= "," range source_line _length ","node source_range  source_line ","range source_range source_line  ","node source_range  single_line? ","range single_range source_line ? "]}," RuboCop Cop Style FrozenStringLiteralComment following_comment":{"type":"method","name":"following_comment","children":[],"call":[]}," RuboCop Cop Style FrozenStringLiteralComment line_range":{"type":"method","name":"line_range","children":[],"call":[" processed_source buffer line_range "," processed_source buffer "," processed_source "]}," RuboCop Cop Style BracesAroundHashParameters braces_needed_for_semantics?":{"type":"method","name":"braces_needed_for_semantics?","children":[],"call":["value braces? ! ","value braces? ","value block_type? ","arg each_pair "]}," RuboCop Cop Style BracesAroundHashParameters check_no_braces":{"type":"method","name":"check_no_braces","children":[],"call":[" add_arg_offense "," braces_needed_for_semantics? ! "," braces_needed_for_semantics? ","arg braces? "]}," RuboCop Cop Style BracesAroundHashParameters check_braces":{"type":"method","name":"check_braces","children":[],"call":[" add_arg_offense ","arg braces? "]}," RuboCop Cop Registry unqualified_cop_names":{"type":"method","name":"unqualified_cop_names","children":[],"call":["Set  new << ","Set  new ","File  basename ","@cops_by_cop_name keys map ","@cops_by_cop_name keys "," clear_enrollment_queue "]}," RuboCop Cop Registry print_warning":{"type":"method","name":"print_warning","children":[],"call":[" warn ","path end_with? "]}," RuboCop Cop Registry department_missing?":{"type":"method","name":"department_missing?","children":[],"call":[" unqualified_cop_names include? "," unqualified_cop_names ","badge qualified? ! ","badge qualified? "]}," RuboCop Cop Offense corrected_with_todo?":{"type":"method","name":"corrected_with_todo?","children":[],"call":["@status == "]}," RuboCop Cop Offense corrected?":{"type":"method","name":"corrected?","children":[],"call":["@status == "]}," RuboCop Cop Migration DepartmentName check_cop_name":{"type":"method","name":"check_cop_name","children":[],"call":[" add_offense "," range_between ","start + ","name length ","comment location expression begin_pos + ","comment location expression begin_pos ","comment location expression ","comment location ","name =~ ","name !~ ","corrector replace "," qualified_legacy_cop_name ","qualified_cop_name include? ","Cop  registry qualified_cop_name ","Cop  registry ","range source ","Registry  global qualified_cop_name ","Registry  global ","comment source_range begin_pos + ","comment source_range begin_pos ","comment source_range ","  range_between _between ","comment location expression begin_pos +  + ","comment source_range begin_pos +  + "," qualified_legacy_range source  "," qualified_legacy_cop_name  include? ","Cop  registry qualified_cop_name  include? ","Registry  global qualified_cop_name  include? ","qualified_range source  include? ","Cop  registry  qualified_legacy_cop_name  ","Cop  registry Cop  registry qualified_cop_name  ","Cop  registry Registry  global qualified_cop_name  ","Cop  registry qualified_range source  "," range_between  source ","Registry  global  qualified_legacy_cop_name  ","Registry  global Cop  registry qualified_cop_name  ","Registry  global Registry  global qualified_cop_name  ","Registry  global qualified_range source  ","comment source_ range_between  begin_pos + ","comment source_ range_between  begin_pos ","comment source_ range_between  "]}," RuboCop Cop Migration DepartmentName autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," lambda ","Cop  registry qualified_cop_name ","range source ","Cop  registry "," qualified_legacy_cop_name ","qualified_cop_name include? ","Cop  registry Cop  registry qualified_cop_name  ","Cop  registry  qualified_legacy_cop_name  ","Cop  registry qualified_range source  "," qualified_legacy_range source  ","Cop  registry qualified_cop_name  include? "," qualified_legacy_cop_name  include? ","qualified_range source  include? "]}," RuboCop Cop Migration DepartmentName investigate":{"type":"method","name":"investigate","children":[],"call":["name length "," check_cop_name ","Regexp  last_match scan ","Regexp  last_match ","Regexp  last_match length ","comment text !~ ","comment text ","processed_source each_comment "," valid_content_token? ","name strip "," contain_plain_comment? "," contain_unexpected_character_for_department_name? "]}," RuboCop Cop MessageAnnotator style_guide_base_url":{"type":"method","name":"style_guide_base_url","children":[],"call":[" config for_all_cops [] "," config for_all_cops "," config "," config for_department [] "," config for_department "," cop_name split first "," cop_name split "," cop_name "," cop_name split [] join "," cop_name split [] "]}," RuboCop Cop Lint SendWithMixinArgument mixin_method?":{"type":"method","name":"mixin_method?","children":[],"call":["MIXIN_METHODS  include? ","node to_sym "]}," RuboCop Cop Lint SendWithMixinArgument message":{"type":"method","name":"message","children":[],"call":[" format "]}," RuboCop Cop Lint SendWithMixinArgument bad_location":{"type":"method","name":"bad_location","children":[],"call":[" range_between ","loc expression end_pos ","loc expression ","loc selector begin_pos ","loc selector ","node loc ","node loc  expression end_pos ","node loc  expression ","node loc  selector begin_pos ","node loc  selector ","node node loc  "]}," RuboCop Cop Lint SendWithMixinArgument autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","module_name source "," bad_location "," lambda "," send_with_mixin_argument? "]}," RuboCop Cop Lint SendWithMixinArgument on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," bad_location "," message "," bad_location source ","module_name source "," send_with_mixin_argument? ","corrector replace ","module_names map join ","module_names map ","  bad_location  ","  message  ","  bad_location  source "]}," RuboCop Cop Layout MultilineBlockLayout line_break_necessary_in_args?":{"type":"method","name":"line_break_necessary_in_args?","children":[],"call":["needed_length > "," max_line_length ","node source_range column + + + ","node source_range column + + "," block_arg_string length "," block_arg_string ","node arguments ","node source_range column + ","node source lines first length ","node source lines first ","node source lines ","node source ","node source_range column ","node source_range "," needed_length_for_args > "," needed_length_for_args ","node source_range column + + +  > "," node source_range column + + + _for_args > "," node source_range column + + + _for_args "]}," RuboCop Cop Layout IndentAssignment leftmost_multiple_assignment":{"type":"method","name":"leftmost_multiple_assignment","children":[],"call":["node parent "," leftmost_multiple_assignment ","node parent assignment? "," same_line? "]}," RuboCop Cop AlignmentCorrector delimited_string_literal?":{"type":"method","name":"delimited_string_literal?","children":[],"call":["loc end ","loc respond_to? ","loc begin ","node location ","node location  end ","node location  respond_to? ","node location  begin ","node node location ation "]}," RuboCop Cop AlignmentCorrector inside_string_range":{"type":"method","name":"inside_string_range","children":[],"call":["loc begin end join ","loc end begin ","loc end ","loc begin end ","loc begin "," delimited_string_literal? ","loc heredoc_body join ","loc heredoc_end ","loc heredoc_body ","node heredoc? ","node location ","node location  begin end join ","node location  end begin ","node location  end ","node location  begin end ","node location  begin ","node location  heredoc_body join ","node location  heredoc_end ","node location  heredoc_body ","node node location ation "]}," RuboCop Cop AlignmentCorrector inside_string_ranges":{"type":"method","name":"inside_string_ranges","children":[],"call":["(send\n  (send\n    (lvar :node) :each_node\n    (sym :str)\n    (sym :dstr)\n    (sym :xstr)) :map) compact "," inside_string_range ","node each_node map ","node each_node ","node is_a? ","node each_node filter_map "]}," RuboCop ConfigLoader check_cop_config_value":{"type":"method","name":"check_cop_config_value","children":[],"call":[" abort "," Rainbow yellow "," Rainbow ","value is_a? ","(str \"Enabled\") include? "," check_cop_config_value ","hash each "]}," RuboCop Config for_department":{"type":"method","name":"for_department","children":[],"call":["@for_cop [] ","@for_department [] ","department_name to_s ","h []= "," [] ","Hash  new "]}," RuboCop Formatter EmacsStyleFormatter message":{"type":"method","name":"message","children":[],"call":["message tr ","offense message ","offense corrected? ","offense corrected_with_todo? ","offense correctable? "]}," RuboCop Cop Style SafeNavigation comments":{"type":"method","name":"comments","children":[],"call":["comments map ","comment loc last_line <= ","node loc last_line ","node loc ","comment loc last_line ","comment loc ","comment loc first_line >= ","node loc first_line ","comment loc first_line "," processed_source comments select "," processed_source comments "," processed_source ","comment loc last_line < ","comment loc first_line > "," processed_source each_comment_in_lines to_a "," processed_source each_comment_in_lines ","comments concat "," relevant_comment_ranges each with_object "," relevant_comment_ranges each "," relevant_comment_ranges "]}," RuboCop Cop Layout EmptyLineAfterGuardClause heredoc?":{"type":"method","name":"heredoc?","children":[],"call":["node heredoc? ","node respond_to? "]}," RuboCop Cop Layout EmptyLineAfterGuardClause last_heredoc_argument":{"type":"method","name":"last_heredoc_argument","children":[],"call":[" last_heredoc_argument ","n receiver ","n respond_to? ","n arguments each ","n arguments "," heredoc? ","node if_branch children last ","node if_branch children ","node if_branch ","node respond_to? "," last_heredoc_argument_node "," last_heredoc_argumenode if_branch children last t "," last_heredoc_argume last_heredoc_argument_node t ","node if_branch children last  receiver "," last_heredoc_argument_node  receiver ","node if_branch children last  responode if_branch children last d_to? "," last_heredoc_argument_node  respo last_heredoc_argument_node d_to? ","node if_branch children last  argumenode if_branch children last ts each "," last_heredoc_argument_node  argume last_heredoc_argument_node ts each ","node if_branch children last  argumenode if_branch children last ts "," last_heredoc_argument_node  argume last_heredoc_argument_node ts "," last_heredoc_argument  if_branch children last ","node if_branch children last ode if_branode if_branch children last ch childrenode if_branch children last  last "," last_heredoc_argument_node ode if_bra last_heredoc_argument_node ch childre last_heredoc_argument_node  last "," last_heredoc_argument  if_branch children ","node if_branch children last ode if_branode if_branch children last ch childrenode if_branch children last  "," last_heredoc_argument_node ode if_bra last_heredoc_argument_node ch childre last_heredoc_argument_node  "," last_heredoc_argument  if_branch ","node if_branch children last ode if_branode if_branch children last ch "," last_heredoc_argument_node ode if_bra last_heredoc_argument_node ch "," last_heredoc_argument  respond_to? ","node if_branch children last ode responode if_branch children last d_to? "," last_heredoc_argument_node ode respo last_heredoc_argument_node d_to? "," last_heredoc_argument_ last_heredoc_argument  "," last_heredoc_argumenode if_branch children last t_node if_branch children last ode "," last_heredoc_argume last_heredoc_argument_node t_ last_heredoc_argument_node ode "]}," RuboCop TargetFinder order":{"type":"method","name":"order","children":[],"call":[" Integer -@ "," Integer ","File  mtime "," lambda "," fail_fast? "]}," RuboCop Runner file_finished":{"type":"method","name":"file_finished","children":[],"call":[" formatter_set file_finished "," formatter_set "," considered_failure? ","offenses select ","@options [] "," offenses_to_report "," offenses_to_report  select ","  offenses_to_report _to_report "]}," RuboCop Runner autocorrect_redundant_disables":{"type":"method","name":"autocorrect_redundant_disables","children":[],"call":["new_offenses - "," do_inspection_loop "," get_processed_source ","team updated_source_file? ","team autocorrect ","source buffer ","Cop Team  new ","RuboCop Cop Registry  new ","cop processed_source= ","Cop Team  mobilize ","Cop Team  new  updated_source_file? ","Cop Team  mobilize  updated_source_file? ","Cop Team  new  autocorrect ","Cop Team  mobilize  autocorrect "]}," RuboCop Runner redundant_cop_disable_directive":{"type":"method","name":"redundant_cop_disable_directive","children":[],"call":["cop relevant_file? ","Cop Lint RedundantCopDisableDirective  new ","config for_cop fetch ","config for_cop ","@config_store for ","@config_store for_file ","Cop Lint RedundantCopDisableDirective  new  relevant_file? ","config for_Cop Lint RedundantCopDisableDirective  new  fetch ","@config_store for  for_cop fetch ","@config_store for_file  for_cop fetch ","config for_Cop Lint RedundantCopDisableDirective  new  ","@config_store for  for_cop ","@config_store for_file  for_cop ","@@config_store for _store for ","@@config_store for_file _store for ","@@config_store for _store for_file ","@@config_store for_file _store for_file "]}," RuboCop Runner check_for_redundant_disables?":{"type":"method","name":"check_for_redundant_disables?","children":[],"call":[" filtered_run? ! "," filtered_run? ","source disabled_line_ranges empty? ! ","source disabled_line_ranges empty? ","source disabled_line_ranges ","@options [] ! ","@options [] "," except_redundant_cop_disable_directive? "]}," RuboCop Runner add_redundant_disables":{"type":"method","name":"add_redundant_disables","children":[],"call":["offenses sort reject freeze ","offenses sort reject ","offenses sort "," autocorrect_redundant_disables ","cop offenses ","cop check ","source comments ","source disabled_line_ranges "," redundant_cop_disable_directive "," check_for_redundant_disables? "," do_inspection_loop "," get_processed_source "," inspect_file "," team_for_redundant_disables "]}," RuboCop OptionsValidator only_includes_redundant_disable?":{"type":"method","name":"only_includes_redundant_disable?","children":[],"call":["(send\n  (send\n    (ivar :@options) :[]\n    (sym :only)) :&\n  (array\n    (str \"Lint/RedundantCopDisableDirective\")\n    (str \"RedundantCopDisableDirective\"))) any? ","@options [] & ","@options [] ","@options key? "]}," RuboCop OptionsValidator validate_cop_options":{"type":"method","name":"validate_cop_options","children":[],"call":["OptionsValidator  validate_cop_list ","@options [] ","(sym :only) each "]}," RuboCop Cop VariableForce twisted_nodes":{"type":"method","name":"twisted_nodes","children":[],"call":["twisted_nodes compact ","twisted_nodes << ","node children [] ","node children ","node class_type? "]}," RuboCop Cop Style SafeNavigation method_call":{"type":"method","name":"method_call","children":[],"call":["matching_receiver parent "," extract_parts "]}," RuboCop Cop Style RedundantSort accessor_start":{"type":"method","name":"accessor_start","children":[],"call":["node loc selector begin_pos ","node loc selector ","node loc ","node loc dot begin_pos ","node loc dot "]}," RuboCop Cop Style RedundantSort arg_value":{"type":"method","name":"arg_value","children":[],"call":[" arg_node node_parts first "," arg_node node_parts "," arg_node "," arg_node nil? "]}," RuboCop Cop Style RedundantSort arg_node":{"type":"method","name":"arg_node","children":[],"call":["node arguments first ","node arguments "]}," RuboCop Cop Style RedundantSort suffix":{"type":"method","name":"suffix","children":[],"call":["sorter == "]}," RuboCop Cop Style RedundantSort base":{"type":"method","name":"base","children":[],"call":["arg == ","accessor == "]}," RuboCop Cop Style RedundantSort suggestion":{"type":"method","name":"suggestion","children":[],"call":[" base + "," suffix "," base "]}," RuboCop Cop Style RedundantSort message":{"type":"method","name":"message","children":[],"call":[" format "," suggestion "," arg_value "," range_between source "," range_between ","node loc expression end_pos ","node loc expression ","node loc ","node loc selector begin_pos ","node loc selector ","node source_range end_pos ","node source_range "]}," RuboCop Cop Style RedundantSort autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," suggestion "," arg_value ","sort_node loc selector ","sort_node loc ","corrector remove "," range_between ","node loc expression end_pos ","node loc expression ","node loc "," accessor_start "," lambda "," redundant_sort? "," replace_with_logical_operator "," with_logical_operator? ","node source_range end_pos ","node source_range "]}," RuboCop Cop Style RedundantSort on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," message "," range_between ","node loc expression end_pos ","node loc expression ","node loc ","sort_node loc selector begin_pos ","sort_node loc selector ","sort_node loc "," redundant_sort? "," offense_range ","node parent parent ","node parent "," sort_method? "," autocorrect "," register_offense "," use_size_method_in_block? "," find_redundant_sort ","  message  ","  range_between _between "," offense_ range_between  "]}," RuboCop Cop Style RedundantReturn hash_without_braces?":{"type":"method","name":"hash_without_braces?","children":[],"call":["node braces? ! ","node braces? ","node hash_type? "]}," RuboCop Cop Style RedundantReturn correct_with_arguments":{"type":"method","name":"correct_with_arguments","children":[],"call":["corrector remove "," range_with_surrounding_space ","return_node loc keyword ","return_node loc "," add_braces ","return_node first_argument "," hash_without_braces? "," add_brackets ","return_node arguments size > ","return_node arguments size ","return_node arguments ","return_node children size > ","return_node children size ","return_node children ","corrector replace ","first_argument source gsub ","first_argument source ","return_node splat_argument? ","first_argument source delete_prefix ","return_node loc  range_with_surrounding_space  ","return_node return_node first_argument  ","return_node first_argument  source gsub ","return_node first_argument  source ","return_node first_argument  source delete_prefix "]}," RuboCop Cop Style RedundantReturn correct_without_arguments":{"type":"method","name":"correct_without_arguments","children":[],"call":["corrector replace ","return_node source_range "]}," RuboCop Cop Style RedundantPercentQ acceptable_capital_q?":{"type":"method","name":"acceptable_capital_q?","children":[],"call":[" double_quotes_required? ","node str_type? ","src =~ ","src include? ","node source ","STRING_INTERPOLATION_REGEXP  match? ","node source  =~ ","node source  include? "]}," RuboCop Cop Style RedundantPercentQ acceptable_q?":{"type":"method","name":"acceptable_q?","children":[],"call":["s =~ ","src scan any? ","src scan ","src =~ ","node source ","STRING_INTERPOLATION_REGEXP  match? ","ESCAPED_NON_BACKSLASH  match? ","node source  scan any? ","node source  scan ","node source  =~ "]}," RuboCop Cop Style RedundantPercentQ start_with_percent_q_variant?":{"type":"method","name":"start_with_percent_q_variant?","children":[],"call":["string source start_with? ","string source "]}," RuboCop Cop Style RedundantPercentQ string_literal?":{"type":"method","name":"string_literal?","children":[],"call":["node loc end ","node loc ","node loc begin ","node loc respond_to? "]}," RuboCop Cop Style RedundantPercentQ message":{"type":"method","name":"message","children":[],"call":[" format ","src [] ","src start_with? ","node source ","node source  [] ","node source  start_with? "]}," RuboCop Cop Style RedundantPercentQ allowed_percent_q?":{"type":"method","name":"allowed_percent_q?","children":[],"call":[" acceptable_capital_q? ","node source start_with? ","node source "," acceptable_q? "]}," RuboCop Cop Style RedundantPercentQ interpolated_quotes?":{"type":"method","name":"interpolated_quotes?","children":[],"call":["node source include? ","node source "]}," RuboCop Cop Style RedundantPercentQ check":{"type":"method","name":"check","children":[],"call":[" add_offense "," allowed_percent_q? "," interpolated_quotes? "," start_with_percent_q_variant? ","corrector replace ","node loc end ","node loc ","node loc begin ","(str \"^%Q[^\\\"]+$|'\") match? ","node source "]}," RuboCop Cop Style RedundantPercentQ autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node loc end ","node loc ","node loc begin "," lambda ","node source =~ ","node source ","(str \"^%Q[^\\\"]+$|'\") match? "]}," RuboCop Cop Style RedundantPercentQ on_str":{"type":"method","name":"on_str","children":[],"call":[" check "," string_literal? "]}," RuboCop Cop Style RedundantPercentQ on_dstr":{"type":"method","name":"on_dstr","children":[],"call":[" check "," string_literal? "]}," RuboCop Cop Style RedundantInterpolation autocorrect_other":{"type":"method","name":"autocorrect_other","children":[],"call":["corrector replace ","embedded_loc end ","embedded_loc begin ","loc end ","loc begin "," lambda ","embedded_node loc ","node loc ","embedded_node loc  end ","embedded_node loc  begin ","node loc  end ","node loc  begin ","embedded_node node loc  ","node node loc  "]}," RuboCop Cop Style RedundantInterpolation autocorrect_single_variable_interpolation":{"type":"method","name":"autocorrect_single_variable_interpolation","children":[],"call":["corrector replace ","node loc expression ","node loc "," lambda ","variable_loc expression source ","variable_loc expression ","embedded_node children first loc ","embedded_node children first ","embedded_node children ","embedded_var source ","receiver source ","embedded_var arguments map join ","embedded_var arguments map ","embedded_var arguments "," range_between ","embedded_var loc selector end_pos ","embedded_var loc selector ","embedded_var loc ","embedded_var loc expression begin_pos ","embedded_var loc expression "," require_parentheses? ","embedded_var source_range begin_pos ","embedded_var source_range ","embedded_node children first loc  expression source ","variable_loc expression embedded_var source  ","embedded_node children first loc  expression ","embedded_var embedded_var source  ","embedded_node children first  source ","receiver embedded_var source  "," range_between  source ","embedded_var embedded_var arguments map join  map join ","embedded_node children first  arguments map join ","embedded_var embedded_var arguments map join  map ","embedded_node children first  arguments map ","embedded_var embedded_var arguments map join  ","embedded_node children first  arguments ","embedded_node children first  loc selector end_pos ","embedded_node children first  loc selector ","embedded_node children first  loc ","embedded_node children first  loc expression begin_pos ","embedded_node children first  loc expression ","embedded_var embedded_var source _range begin_pos ","embedded_node children first  source_range begin_pos ","embedded_var embedded_var source _range ","embedded_node children first  source_range "]}," RuboCop Cop Style RedundantInterpolation autocorrect_variable_interpolation":{"type":"method","name":"autocorrect_variable_interpolation","children":[],"call":["corrector replace ","node loc expression ","node loc "," lambda ","embedded_node loc expression source ","embedded_node loc expression ","embedded_node loc ","embedded_node source "]}," RuboCop Cop Style RedundantInterpolation embedded_in_percent_array?":{"type":"method","name":"embedded_in_percent_array?","children":[],"call":[" percent_literal? ","node parent "]}," RuboCop Cop Style RedundantInterpolation implicit_concatenation?":{"type":"method","name":"implicit_concatenation?","children":[],"call":["node parent "]}," RuboCop Cop Style RedundantInterpolation variable_interpolation?":{"type":"method","name":"variable_interpolation?","children":[],"call":["node reference? ","node variable? "]}," RuboCop Cop Style RedundantInterpolation interpolation?":{"type":"method","name":"interpolation?","children":[],"call":["node begin_type? "," variable_interpolation? "]}," RuboCop Cop Style RedundantInterpolation single_variable_interpolation?":{"type":"method","name":"single_variable_interpolation?","children":[],"call":[" variable_interpolation? ","node children first ","node children ","node children one? ","first_child operator_method? ! ","first_child operator_method? ","first_child send_type? ","node children first  operator_method? ! ","node children first  operator_method? ","node children first  send_type? "]}," RuboCop Cop Style RedundantInterpolation single_interpolation?":{"type":"method","name":"single_interpolation?","children":[],"call":[" embedded_in_percent_array? ! "," embedded_in_percent_array? "," implicit_concatenation? ! "," implicit_concatenation? "," interpolation? ","node children first ","node children ","node children one? "]}," RuboCop Cop Style RedundantInterpolation autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" autocorrect_other "," autocorrect_single_variable_interpolation "," single_variable_interpolation? "," autocorrect_variable_interpolation "," variable_interpolation? ","node children first ","node children "]}," RuboCop Cop Style RedundantInterpolation on_dstr":{"type":"method","name":"on_dstr","children":[],"call":[" add_offense "," single_interpolation? "," autocorrect_other "," autocorrect_single_variable_interpolation "," single_variable_interpolation? "," autocorrect_variable_interpolation "," variable_interpolation? ","node children first ","node children "]}," RuboCop Cop Style RedundantInterpolation autocorrect_incompatible_with":{"type":"method","name":"autocorrect_incompatible_with","children":[],"call":[]}," RuboCop Cop Style RedundantCondition make_ternary_form":{"type":"method","name":"make_ternary_form","children":[],"call":["node parent ","(send\n  (lvar :if_branch) :source) join "," else_source ","if_branch source ","if_branch parenthesized? "," branches_have_method? ","(send nil :if_source\n  (lvar :if_branch)) join "," if_source ","(send nil :if_source\n  (lvar :if_branch)\n  (lvar :arithmetic_operation)) join "," use_arithmetic_operation? ","(send nil :if_source\n  (lvar :if_branch)\n  (lvar : use_arithmetic_operation? )) join "," use_ use_arithmetic_operation? ? "]}," RuboCop Cop Style RedundantCondition else_source":{"type":"method","name":"else_source","children":[],"call":["else_branch source ","else_branch modifier_form? ","else_branch basic_conditional? ","else_branch range_type? ","else_branch arguments map join ","else_branch arguments map ","else_branch arguments ","else_branch method_name "," without_argument_parentheses_method? "," require_parentheses? "," else_source_if_has_assignment "," branches_have_assignment? ","else_branch parent "," else_source_if_has_method "," branches_have_method? ","else_branch first_argument source ","else_branch first_argument "]}," RuboCop Cop Style RedundantCondition use_if_branch?":{"type":"method","name":"use_if_branch?","children":[],"call":[]}," RuboCop Cop Style RedundantCondition offense?":{"type":"method","name":"offense?","children":[],"call":["else_branch single_line? ","else_branch instance_of? ! ","else_branch instance_of? ","node ternary? ","node elsif? ! ","node elsif? ","condition == "," use_if_branch? "," use_hash_key_assignment? "," synonymous_condition_and_branch? "]}," RuboCop Cop Style RedundantCondition range_of_offense":{"type":"method","name":"range_of_offense","children":[],"call":[" range_between ","node loc colon end_pos ","node loc colon ","node loc ","node loc question begin_pos ","node loc question ","node ternary? ","node loc expression "," branches_have_method? ","node source_range "]}," RuboCop Cop Style RedundantCondition message":{"type":"method","name":"message","children":[],"call":["node else_branch ! ","node else_branch ","node modifier_form? "," redudant_condition? "," redundant_condition? "]}," RuboCop Cop Style RedundantCondition autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node source_range "," make_ternary_form ","node if_branch source ","node if_branch ","node else_branch ! ","node else_branch ","node modifier_form? "," range_of_offense ","node ternary? "," lambda "," correct_ternary "]}," RuboCop Cop Style RedundantCondition on_if":{"type":"method","name":"on_if","children":[],"call":[" add_offense "," range_of_offense "," offense? ","node elsif_conditional? ","corrector replace "," make_ternary_form ","node if_branch source ","node if_branch ","node else_branch ! ","node else_branch ","node modifier_form? "," correct_ternary ","node ternary? "," message "," redudant_condition? "," branches_have_method? ! "," branches_have_method? "," redundant_condition? ","  message  "]}," RuboCop Cop Style RedundantCapitalW requires_interpolation?":{"type":"method","name":"requires_interpolation?","children":[],"call":[" double_quotes_required? ","string source ","string dstr_type? ","node child_nodes any? ","node child_nodes "]}," RuboCop Cop Style RedundantCapitalW on_percent_literal":{"type":"method","name":"on_percent_literal","children":[],"call":[" add_offense "," requires_interpolation? ","corrector replace ","src tr ","node loc begin ","node loc ","node loc begin source ","node loc begin source  tr "]}," RuboCop Cop Style RedundantCapitalW autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","src tr ","node loc begin ","node loc ","node loc begin source "," lambda ","node loc begin source  tr "]}," RuboCop Cop Style RedundantCapitalW on_array":{"type":"method","name":"on_array","children":[],"call":[" process "]}," RuboCop Cop Style MethodDefParentheses correct_definition":{"type":"method","name":"correct_definition","children":[],"call":["corrector insert_after ","corrector replace "," range_between ","arguments_range begin_pos ","args_with_space begin_pos "," range_with_surrounding_space ","def_node arguments source_range ","def_node arguments ","def_node arguments source_range  begin_pos "," range_with_surrounding_space  begin_pos "]}," RuboCop Cop Style MethodDefParentheses correct_arguments":{"type":"method","name":"correct_arguments","children":[],"call":["corrector remove ","arg_node loc end ","arg_node loc ","corrector replace ","arg_node loc begin "]}," RuboCop Cop Style LineEndConcatenation eligible_token_set?":{"type":"method","name":"eligible_token_set?","children":[],"call":[" eligible_predecessor? "," eligible_operator? "," eligible_successor? "]}," RuboCop Cop Style InverseMethods correct_inverse_method":{"type":"method","name":"correct_inverse_method","children":[],"call":["corrector remove "," end_parentheses ","EQUALITY_METHODS  include? ","corrector replace "," inverse_methods [] to_s "," inverse_methods [] "," inverse_methods ","method_call loc selector ","method_call loc "," not_to_receiver "," lambda "," inverse_candidate? "," remove_end_parenthesis "]}," RuboCop Cop Style IfUnlessModifier line_length_enabled_at_line?":{"type":"method","name":"line_length_enabled_at_line?","children":[],"call":[" processed_source comment_config cop_enabled_at_line? "," processed_source comment_config "," processed_source "]}," RuboCop Cop Style Copyright verify_autocorrect_notice!":{"type":"method","name":"verify_autocorrect_notice!","children":[],"call":[" raise "," notice "," autocorrect_notice "," autocorrect_notice =~ ","Regexp  new "," autocorrect_notice empty? "]}," RuboCop Cop Naming FileName bad_filename_allowed?":{"type":"method","name":"bad_filename_allowed?","children":[],"call":[" processed_source start_with? "," processed_source "," ignore_executable_scripts? "]}," RuboCop Cop Naming FileName matching_definition?":{"type":"method","name":"matching_definition?","children":[],"call":[" find_class_or_module "," to_namespace "," processed_source ast "," processed_source "," expect_matching_definition? "]}," RuboCop Cop TrailingComma comma_offset":{"type":"method","name":"comma_offset","children":[],"call":["range source index ","range source ","range source =~ "," any_heredoc? ","comma_regex match? "]}," RuboCop Cop Metrics Utils AbcSizeCalculator condition?":{"type":"method","name":"condition?","children":[],"call":["CONDITION_NODES  include? ","node type "," iterating_block? == "," iterating_block? "]}," RuboCop Cop Metrics Utils AbcSizeCalculator branch?":{"type":"method","name":"branch?","children":[],"call":["BRANCH_NODES  include? ","node type "]}," RuboCop Cop Metrics Utils AbcSizeCalculator else_branch?":{"type":"method","name":"else_branch?","children":[],"call":["node loc else is? ","node loc else ","node loc ","node else? ","(sym :case) include? ","node type "]}," RuboCop Cop Metrics Utils AbcSizeCalculator evaluate_condition_node":{"type":"method","name":"evaluate_condition_node","children":[],"call":[" else_branch? "]}," RuboCop Cop Lint RedundantSplatExpansion remove_brackets":{"type":"method","name":"remove_brackets","children":[],"call":["elements join ","array_start start_with? ","elements map ","array loc begin source ","array loc begin ","array loc ","elements map  join ","array loc begin source  start_with? ","elements map  map "]}," RuboCop Cop Lint RedundantSplatExpansion redundant_brackets?":{"type":"method","name":"redundant_brackets?","children":[],"call":[" part_of_an_array? ","parent send_type? ","parent when_type? ","node parent parent ","node parent ","node parent  send_type? ","node parent  when_type? ","node node parent  node parent  ","node node parent  "]}," RuboCop Cop Lint RedundantSplatExpansion part_of_an_array?":{"type":"method","name":"part_of_an_array?","children":[],"call":["parent loc end ","parent loc ","parent loc begin ","parent array_type? ","node parent ","node parent  loc end ","node parent  loc ","node parent  loc begin ","node parent  array_type? ","node node parent  "]}," RuboCop Cop Lint RedundantSplatExpansion method_argument?":{"type":"method","name":"method_argument?","children":[],"call":["node parent send_type? ","node parent "]}," RuboCop Cop Lint RedundantSplatExpansion array_splat?":{"type":"method","name":"array_splat?","children":[],"call":["node children first array_type? ","node children first ","node children "]}," RuboCop Cop Lint RedundantSplatExpansion replacement_range_and_content":{"type":"method","name":"replacement_range_and_content","children":[],"call":["loc operator "," remove_brackets ","loc expression "," redundant_brackets? ","variable source ","variable array_type? ! ","variable array_type? ","node parent loc expression ","node parent loc ","node parent "," array_new? ","node loc ","node parent array_type? ","node parent source_range ","node loc  operator ","node loc  expression ","loc node parent loc expression  ","loc loc expression  ","loc node parent source_range  ","node parent node loc  expression ","node parent loc node parent loc expression  ","node parent loc loc expression  ","node parent loc node parent source_range  ","node parent node loc  ","node node loc  "]}," RuboCop Cop Lint RedundantSplatExpansion array_new_inside_array_literal?":{"type":"method","name":"array_new_inside_array_literal?","children":[],"call":["grandparent children size > ","grandparent children size ","grandparent children ","grandparent array_type? ","array_new_node parent parent ","array_new_node parent "," array_new? ","array_new_node parent parent  children size > ","array_new_node parent parent  children size ","array_new_node parent parent  children ","array_new_node parent parent  array_type? "]}," RuboCop Cop Lint RedundantSplatExpansion redundant_splat_expansion":{"type":"method","name":"redundant_splat_expansion","children":[],"call":["ASSIGNMENT_TYPES  include? ! ","ASSIGNMENT_TYPES  include? ","grandparent type ","node parent parent ","node parent "," array_new_inside_array_literal? ","expanded_item send_type? "," literal_expansion ","node parent parent  type "]}," RuboCop Cop Lint RedundantSplatExpansion autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," lambda "," replacement_range_and_content "]}," RuboCop Cop Lint RedundantSplatExpansion on_splat":{"type":"method","name":"on_splat","children":[],"call":[" add_offense "," part_of_an_array? "," method_argument? "," array_splat? "," redundant_splat_expansion "," autocorrect "," use_percent_literal_array_argument? "," allow_percent_literal_array_argument? "]}," RuboCop Cop Lint RedundantRequireStatement autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove "," range_with_surrounding_space ","node loc expression ","node loc "," lambda ","  range_with_surrounding_space _with_surrounding_space "]}," RuboCop Cop Lint RedundantRequireStatement on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," unnecessary_require_statement? ","corrector remove "," range_with_surrounding_space ","node loc expression ","node loc "," redundant_require_statement? "," range_by_whole_lines ","node source_range ","corrector insert_after ","node parent ","node parent modifier_form? ","node parent respond_to? ","  range_with_surrounding_space _with_surrounding_space ","  range_by_whole_lines _with_surrounding_space ","  range_with_surrounding_space _by_whole_lines ","  range_by_whole_lines _by_whole_lines ","node source_ range_with_surrounding_space  ","node source_ range_by_whole_lines  "]}," RuboCop Cop Lint RedundantCopEnableDirective all_or_name":{"type":"method","name":"all_or_name","children":[],"call":["name == "]}," RuboCop Cop Lint RedundantCopEnableDirective range_to_remove":{"type":"method","name":"range_to_remove","children":[],"call":[" range_between ","comment loc expression end_pos ","comment loc expression ","comment loc ","start + + ","start + ","start + - "," comment_start "," range_with_comma_after ","source [] == ","source [] "," range_with_comma_before ","begin_pos - ","comment loc expression source ","comment source_range end_pos ","comment source_range ","comment source "," comment_start  + + "," comment_start  + "," comment_start  + - "," comment_ comment_start  ","comment loc expression source  [] == ","comment source  [] == ","comment loc expression source  [] ","comment source  [] ","comment loc expression comment loc expression source  ","comment loc expression comment source  ","comment comment loc expression source _range end_pos ","comment comment source _range end_pos ","comment comment loc expression source _range ","comment comment source _range ","comment comment loc expression source  ","comment comment source  "]}," RuboCop Cop Lint RedundantCopEnableDirective range_with_comma":{"type":"method","name":"range_with_comma","children":[],"call":[" range_to_remove ","source [] == ","source [] ","begin_pos - "," reposition ","begin_pos + ","name size "," cop_name_indention ","comment loc expression source ","comment loc expression ","comment loc ","comment source ","comment loc expression source  [] == ","comment source  [] == ","comment loc expression source  [] ","comment source  [] "," reposition  - "," cop_name_indention  - "," reposition  + "," cop_name_indention  + ","comment loc expression comment loc expression source  ","comment loc expression comment source  ","comment comment loc expression source  ","comment comment source  "]}," RuboCop Cop Lint RedundantCopEnableDirective cop_name_indention":{"type":"method","name":"cop_name_indention","children":[],"call":["comment text index ","comment text "]}," RuboCop Cop Lint RedundantCopEnableDirective comment_start":{"type":"method","name":"comment_start","children":[],"call":["comment loc expression begin_pos ","comment loc expression ","comment loc ","comment source_range begin_pos ","comment source_range "]}," RuboCop Cop Lint RedundantCopEnableDirective range_of_offense":{"type":"method","name":"range_of_offense","children":[],"call":[" range_between ","start_pos + ","name size "," comment_start + "," cop_name_indention "," comment_start "," comment_start +  + "]}," RuboCop Cop Lint RedundantCopEnableDirective autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove "," range_with_comma "," lambda "]}," RuboCop Cop Lint RedundantCopEnableDirective investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense "," format "," all_or_name "," range_of_offense ","offenses each ","processed_source comment_config extra_enabled_comments ","processed_source comment_config ","processed_source blank? ","processed_source comment_config extra_enabled_comments  each "]}," RuboCop Cop Lint RedundantCopDisableDirective ends_its_line?":{"type":"method","name":"ends_its_line?","children":[],"call":["(send\n  (lvar :line) :=~\n  (regexp\n    (str \"\\\\s*\\\\z\")\n    (regopt))) == ","range last_column ","line =~ ","range source_buffer source_line ","range last_line ","range source_buffer ","(send\n  (lvar :range source_buffer source_line ) :=~\n  (regexp\n    (str \"\\\\s*\\\\z\")\n    (regopt))) == ","range source_buffer source_line  =~ ","range source_buffer source_range source_buffer source_line  ","range last_range source_buffer source_line  "]}," RuboCop Cop Lint RedundantCopDisableDirective all_cop_names":{"type":"method","name":"all_cop_names","children":[],"call":["Cop  registry names ","Cop  registry ","Registry  global names ","Registry  global "]}," RuboCop Cop Lint RedundantCopDisableDirective collect_variable_like_names":{"type":"method","name":"collect_variable_like_names","children":[],"call":["scope << "," all_cop_names each "," all_cop_names "]}," RuboCop Cop Lint RedundantCopDisableDirective describe":{"type":"method","name":"describe","children":[],"call":[" find_similar_name "," all_cop_names include? "," all_cop_names ","cop == ","NameSimilarity  find_similar_name "," remove_department_marker "," department_marker? ","SIMILAR_COP_NAMES_CACHE  [] "," find_ find_similar_name _name "," find_NameSimilarity  find_similar_name _name "," find_SIMILAR_COP_NAMES_CACHE  [] _name ","NameSimilarity  find_ find_similar_name _name ","NameSimilarity  find_NameSimilarity  find_similar_name _name ","NameSimilarity  find_SIMILAR_COP_NAMES_CACHE  [] _name "]}," RuboCop Cop Lint RedundantCopDisableDirective trailing_range?":{"type":"method","name":"trailing_range?","children":[],"call":["intervening =~ ","(send\n  (send\n    (block\n      (send\n        (lvar :ranges) :drop_while)\n      (args\n        (arg :r))\n      (send\n        (send\n          (lvar :r) :equal?\n          (lvar :range)) :!)) :each_cons\n    (int 2)) :map) all? ","range1 end join source ","range1 end join ","range2 begin ","range1 end ","(send\n  (lvar :ranges) :drop_while) each_cons map ","(send\n  (lvar :ranges) :drop_while) each_cons ","r equal? ! ","r equal? ","ranges drop_while ","(str \"\\\\A\\\\s*,\\\\s*\\\\Z\") match? "]}," RuboCop Cop Lint RedundantCopDisableDirective matching_range":{"type":"method","name":"matching_range","children":[],"call":["Parser Source Range  new ","offset + ","needle size ","haystack source_buffer ","haystack begin_pos ","haystack source =~ ","Regexp  new ","Regexp  escape ","haystack source ","haystack source index ","haystack source index  + "]}," RuboCop Cop Lint RedundantCopDisableDirective cop_range":{"type":"method","name":"cop_range","children":[],"call":[" raise ","comment text "," matching_range ","Badge  parse cop_name ","Badge  parse ","comment loc expression ","comment loc "," remove_department_marker ","comment source_range ","Badge  parse  remove_department_marker _name "]}," RuboCop Cop Lint RedundantCopDisableDirective add_offense_for_some_cops":{"type":"method","name":"add_offense_for_some_cops","children":[],"call":[" add_offense "," describe ","cop_ranges each ","cop_ranges map ","r begin_pos ","cop_ranges sort_by! "," cop_range ","cops map ","corrector remove "," directive_range_in_list "," message ","cop_ directive_range_in_list s each ","cop_ directive_range_in_list s map ","cop_ directive_range_in_list s sort_by! "," cop_ directive_range_in_list  "," directive_ directive_range_in_list _in_list "]}," RuboCop Cop Lint RedundantCopDisableDirective add_offense_for_entire_comment":{"type":"method","name":"add_offense_for_entire_comment","children":[],"call":[" add_offense ","cop_list join "," describe ","cops sort map ","cops sort ","comment loc expression ","comment loc ","corrector remove "," comment_range_with_surrounding_space ","DirectiveComment  new range ","DirectiveComment  new "," message ","(send\n  (send\n    (lvar :cops) :sort) :map) join ","corrector replace "," leave_free_comment? ","comment source_range "," comment_ comment_range_with_surrounding_space _with_surrounding_space ","DirectiveComment  new  comment_range_with_surrounding_space  ","comment source_ comment_range_with_surrounding_space  "]}," RuboCop Cop Lint RedundantCopDisableDirective add_offenses":{"type":"method","name":"add_offenses","children":[],"call":[" add_offense_for_some_cops "," add_offense_for_entire_comment "," directive_count == ","cops size "," directive_count "," all_disabled? ","redundant_cops each "]}," RuboCop Cop Lint RedundantCopDisableDirective directive_count":{"type":"method","name":"directive_count","children":[],"call":["cops_string split size ","cops_string split ","match captures ","comment text match ","comment text ","DirectiveComment  new match_captures ","DirectiveComment  new ","DirectiveComment  new directive_count ","comment text match  captures ","comment text comment text match  ","DirectiveComment  new comment text match _captures "]}," RuboCop Cop Lint RedundantCopDisableDirective ignore_offense?":{"type":"method","name":"ignore_offense?","children":[],"call":["range cover? ","line_range max ","line_range min ","disabled_ranges any? "," disabled_ranges any? "," disabled_ranges ","line_range min == "]}," RuboCop Cop Lint RedundantCopDisableDirective all_disabled?":{"type":"method","name":"all_disabled?","children":[],"call":["comment text =~ ","comment text ","(str \"rubocop\\\\s*:\\\\s*(?:disable|todo)\\\\s+all\\\\b\") match? ","DirectiveComment  new disabled_all? ","DirectiveComment  new "]}," RuboCop Cop Lint RedundantCopDisableDirective find_redundant":{"type":"method","name":"find_redundant","children":[],"call":["line_range cover? ","o line ","cop_offenses none? ","o cop_name == ","o cop_name ","offenses select ","offenses none? ","line_range last != ","next_line_range first ","line_range last ","next_line_range nil? "," all_disabled? "]}," RuboCop Cop Lint RedundantCopDisableDirective each_already_disabled":{"type":"method","name":"each_already_disabled","children":[],"call":[" all_disabled? ! "," all_disabled? ","c loc line == ","range begin ","c loc line ","c loc ","comments find ","previous_range end != ","previous_range end "," ignore_offense? ","line_ranges each_cons "," processed_source comment_at_line "," processed_source "," followed_ranges? "," find_redundant_department "," department_disabled? "," processed_source comment_at_line s find "," processed_source  processed_source comment_at_line _at_line "," find_ find_redundant_department _department "]}," RuboCop Cop Lint RedundantCopDisableDirective each_line_range":{"type":"method","name":"each_line_range","children":[],"call":[" find_redundant ","line_ranges [] ","ix + "," ignore_offense? ","c loc line == ","line_range begin ","c loc line ","c loc ","comments find ","line_ranges each_with_index "," processed_source comment_at_line "," processed_source "," find_redundant_cop "," find_redundant_department "," department_disabled? "," find_redundant_all ","line_range_index + "," all_disabled? "," expected_final_disable? "," find_ find_redundant_all  "," processed_source comment_at_line s find "," processed_source  processed_source comment_at_line _at_line "," find_ find_redundant  "," find_ find_redundant_all _cop "," find_ find_redundant_all _department "," find_ find_redundant_all _all "]}," RuboCop Cop Lint RedundantCopDisableDirective each_redundant_disable":{"type":"method","name":"each_redundant_disable","children":[],"call":[" each_line_range "," each_already_disabled ","cop_disabled_line_ranges each ","cop_disabled_line_ranges [] "," cop_disabled_line_ranges each "," cop_disabled_line_ranges "]}," RuboCop Cop Lint RedundantCopDisableDirective directive_range_in_list":{"type":"method","name":"directive_range_in_list","children":[],"call":[" range_with_surrounding_space "," range_with_surrounding_comma "," trailing_range? "," ends_its_line? ","ranges last ","  range_with_surrounding_comma _with_surrounding_space ","  range_with_surrounding_space _with_surrounding_space ","  range_with_surrounding_comma _with_surrounding_comma ","  range_with_surrounding_space _with_surrounding_comma "," trailing_ range_with_surrounding_comma ? "," trailing_ range_with_surrounding_space ? "," range_with_surrounding_comma s last "," range_with_surrounding_space s last "]}," RuboCop Cop Lint RedundantCopDisableDirective comment_range_with_surrounding_space":{"type":"method","name":"comment_range_with_surrounding_space","children":[],"call":[" range_with_surrounding_space ","original_begin zero? ","range begin_pos "," previous_line_blank? "," processed_source comment_config comment_only_line? ","range line "," processed_source comment_config "," processed_source ","directive_comment_range begin_pos ","directive_comment_range begin_pos == ","line_comment_range begin_pos ","directive_comment_range line ","  range_with_surrounding_space _with_surrounding_space ","range begin_pos  zero? ","directive_comment_range begin_pos  zero? "," range_with_surrounding_space  begin_pos "," range_with_surrounding_space  line ","directive_comment_ range_with_surrounding_space  begin_pos ","directive_comment_ range_with_surrounding_space  begin_pos == ","line_comment_ range_with_surrounding_space  begin_pos ","directive_comment_ range_with_surrounding_space  line "]}," RuboCop Cop Lint RedundantCopDisableDirective autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove "," directive_range_in_list "," comment_range_with_surrounding_space ","range source start_with? ","range source "," lambda "," directive_ directive_range_in_list _in_list "," directive_ comment_range_with_surrounding_space _in_list "," comment_ directive_range_in_list _with_surrounding_space "," comment_ comment_range_with_surrounding_space _with_surrounding_space "," directive_range_in_list  source start_with? "," comment_range_with_surrounding_space  source start_with? "," directive_range_in_list  source "," comment_range_with_surrounding_space  source "]}," RuboCop Cop Lint RedundantCopDisableDirective check":{"type":"method","name":"check","children":[],"call":[" add_offenses ","redundant_cops [] add ","redundant_cops [] "," each_redundant_disable ","h []= ","Set  new ","Hash  new "]}," RuboCop Cop Layout SpaceInsideParens same_line?":{"type":"method","name":"same_line?","children":[],"call":["token1 line == ","token2 line ","token1 line "]}," RuboCop Cop Layout SpaceInsideArrayLiteralBrackets compact":{"type":"method","name":"compact","children":[],"call":["corrector remove "," side_space_range ","bracket pos "," side_space_ side_space_range  "]}," RuboCop Cop Layout SpaceInLambdaLiteral space_after_arrow":{"type":"method","name":"space_after_arrow","children":[],"call":["arrow end join ","parentheses begin ","arrow end ","lambda_node parent children [] source_range ","lambda_node parent children [] ","lambda_node parent children ","lambda_node parent ","lambda_node parent children [] source_range  end join ","lambda_node parent children [] source_range  begin ","lambda_node parent children [] source_range  end "]}," RuboCop Cop Layout IndentFirstArgument comment_lines":{"type":"method","name":"comment_lines","children":[],"call":["c loc line ","c loc ","(send\n  (send\n    (send nil :processed_source) :comments) :select) map "," begins_its_line? ","c loc expression "," processed_source comments select "," processed_source comments "," processed_source "]}," RuboCop Cop Layout EndOfLine last_line":{"type":"method","name":"last_line","children":[],"call":["processed_source lines length ","processed_source lines ","last_token line ","processed_source tokens last ","processed_source tokens ","processed_source tokens last  line "]}," RuboCop Cop Layout AlignHash reset!":{"type":"method","name":"reset!","children":[],"call":[" column_deltas= ","hash []= ","Hash  new "," offences_by= "]}," RuboCop Cop Cop find_severity":{"type":"method","name":"find_severity","children":[],"call":[" default_severity "," custom_severity "]}," RuboCop Cop Cop find_message":{"type":"method","name":"find_message","children":[],"call":[" annotate "," message "]}," RuboCop Cop Commissioner support_target_rails_version?":{"type":"method","name":"support_target_rails_version?","children":[],"call":["cop class support_target_rails_version? ","cop target_rails_version ","cop class ","cop class respond_to? "]}," RuboCop Cop Commissioner support_target_ruby_version?":{"type":"method","name":"support_target_ruby_version?","children":[],"call":["cop class support_target_ruby_version? ","cop target_ruby_version ","cop class ","cop class respond_to? "]}," RuboCop ConfigValidator each_invalid_parameter":{"type":"method","name":"each_invalid_parameter","children":[],"call":["default_config keys - ","default_config keys ","default_config key? ","COMMON_PARAMS  include? ","@config [] each_key ","@config [] ","ConfigLoader  default_configuration [] ","ConfigLoader  default_configuration ","ConfigLoader  default_configuration []  keys - ","ConfigLoader  default_configuration []  keys ","ConfigLoader  default_configuration []  key? ","ConfigLoader  ConfigLoader  default_configuration [] uration [] ","ConfigLoader  ConfigLoader  default_configuration [] uration "]}," RuboCop Config internal?":{"type":"method","name":"internal?","children":[],"call":["File  expand_path start_with? ","File  expand_path "," loaded_path ","File  join "]}," RuboCop CLI skip_line_length_cop":{"type":"method","name":"skip_line_length_cop","children":[],"call":[" puts "," Rainbow yellow "," Rainbow "]}," RuboCop AST Node boolean_type?":{"type":"method","name":"boolean_type?","children":[],"call":[" false_type? "," true_type? "]}," RuboCop AST ReturnNode arguments":{"type":"method","name":"arguments","children":[],"call":[" node_parts "," node_parts first children "," node_parts first "," node_parts first begin_type? "," node_parts one? "]}," RuboCop Runner standby_team":{"type":"method","name":"standby_team","children":[],"call":["Cop Team  new "," mobilized_cop_classes ","@team_by_config [] ","config object_id ","Cop Team  mobilize "," compare_by_identity "]}," RuboCop Runner cached_result":{"type":"method","name":"cached_result","children":[],"call":["ResultCache  new "]}," RuboCop ResultCache context_checksum":{"type":"method","name":"context_checksum","children":[],"call":["Digest SHA1  hexdigest ","(send nil :team_checksum\n  (lvar :team)) join "," relevant_options_digest "," team_checksum "]}," RuboCop ResultCache team_checksum":{"type":"method","name":"team_checksum","children":[],"call":["team external_dependency_checksum ","@checksum_by_team [] ","team object_id "," compare_by_identity "]}," RuboCop Cop Team external_dependency_checksum":{"type":"method","name":"external_dependency_checksum","children":[],"call":["Digest SHA1  hexdigest ","keys join "," cops map compact "," cops map "," cops "," cops filter_map "," cops map compact  join "," cops filter_map  join "]}," RuboCop Cop Style TrivialAccessors allowed_methods":{"type":"method","name":"allowed_methods","children":[],"call":[" Array map + "," Array map "," Array "," cop_config [] "," cop_config "]}," RuboCop Cop Style OptionHash allowlist":{"type":"method","name":"allowlist","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style NestedParenthesizedCalls allowed_methods":{"type":"method","name":"allowed_methods","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style NestedParenthesizedCalls allowed?":{"type":"method","name":"allowed?","children":[],"call":["send_node arguments one? ","send_node arguments "," allowed_methods include? ","send_node method_name to_s ","send_node method_name "," allowed_methods ","send_node parent arguments one? ","send_node parent arguments ","send_node parent "," allowed_method? "]}," RuboCop Cop Style IpAddresses allowed_addresses":{"type":"method","name":"allowed_addresses","children":[],"call":[" Array map "," Array "," cop_config [] "," cop_config "]}," RuboCop Cop Naming PredicateName allowed_methods":{"type":"method","name":"allowed_methods","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Naming PredicateName forbidden_prefixes":{"type":"method","name":"forbidden_prefixes","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Naming MethodParameterName on_def":{"type":"method","name":"on_def","children":[],"call":[" check ","node arguments ","node arguments? ","node arguments reject "]}," RuboCop Cop Naming HeredocDelimiterNaming forbidden_delimiters":{"type":"method","name":"forbidden_delimiters","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Naming BlockParameterName on_block":{"type":"method","name":"on_block","children":[],"call":[" check ","node arguments ","node arguments? "]}," RuboCop Cop NilMethods allowed_methods":{"type":"method","name":"allowed_methods","children":[],"call":[" cop_config [] map "," cop_config [] "," cop_config "]}," RuboCop Cop HashAlignmentStyles SeparatorAlignment value_delta":{"type":"method","name":"value_delta","children":[],"call":["first_pair value_delta ","current_pair value_omission? "]}," RuboCop Cop HashAlignmentStyles SeparatorAlignment hash_rocket_delta":{"type":"method","name":"hash_rocket_delta","children":[],"call":["first_pair delimiter_delta "]}," RuboCop Cop HashAlignmentStyles SeparatorAlignment key_delta":{"type":"method","name":"key_delta","children":[],"call":["first_pair key_delta "]}," RuboCop Cop HashAlignmentStyles SeparatorAlignment deltas_for_first_pair":{"type":"method","name":"deltas_for_first_pair","children":[],"call":[]}," RuboCop Cop HashAlignmentStyles TableAlignment value_delta":{"type":"method","name":"value_delta","children":[],"call":["correct_value_column - ","current_pair value loc column ","current_pair value loc ","current_pair value ","first_pair key loc column + + "," max_key_width ","first_pair key loc column + ","current_pair delimiter length ","current_pair delimiter ","first_pair key loc column ","first_pair key loc ","first_pair key ","current_pair kwsplat_type? ","current_pair value_omission? ","first_pair key loc column + +  - "]}," RuboCop Cop HashAlignmentStyles TableAlignment hash_rocket_delta":{"type":"method","name":"hash_rocket_delta","children":[],"call":["first_pair loc column + + - ","current_pair loc operator column ","current_pair loc operator ","current_pair loc ","first_pair loc column + + ","first_pair loc column + "," max_key_width ","first_pair loc column ","first_pair loc "]}," RuboCop Cop HashAlignmentStyles TableAlignment key_delta":{"type":"method","name":"key_delta","children":[],"call":["first_pair key_delta "]}," RuboCop Cop HashAlignmentStyles TableAlignment deltas_for_first_pair":{"type":"method","name":"deltas_for_first_pair","children":[],"call":[" value_delta - "," value_delta "," separator_delta "," max_key_width= ","(send\n  (send\n    (lvar :node) :keys) :map) max ","key source length ","key source ","node keys map ","node keys ","  separator_delta  "]}," RuboCop Cop HashAlignmentStyles TableAlignment initialize":{"type":"method","name":"initialize","children":[],"call":[" max_key_width= "]}," RuboCop Cop HashAlignmentStyles ValueAlignment separator_delta":{"type":"method","name":"separator_delta","children":[],"call":[" hash_rocket_delta - "," hash_rocket_delta ","current_pair hash_rocket? "]}," RuboCop Cop HashAlignmentStyles ValueAlignment deltas":{"type":"method","name":"deltas","children":[],"call":[" value_delta - - "," value_delta - "," value_delta "," separator_delta "," key_delta ","  value_delta - -  - - ","  value_delta - -  - ","  value_delta - -  ","  separator_delta  ","  key_delta  "]}," RuboCop Cop HashAlignmentStyles ValueAlignment checkable_layout?":{"type":"method","name":"checkable_layout?","children":[],"call":["node mixed_delimiters? ! ","node mixed_delimiters? ","node pairs_on_same_line? ! ","node pairs_on_same_line? "]}," RuboCop Cop HashAlignmentStyles KeyAlignment value_delta":{"type":"method","name":"value_delta","children":[],"call":["correct_value_column - ","pair value loc column ","pair value loc ","pair value ","pair loc operator end column + ","pair loc operator end column ","pair loc operator end ","pair loc operator ","pair loc ","pair value_on_new_line? ","pair kwsplat_type? ","pair value_omission? ","pair loc operator end column +  - "]}," RuboCop Cop HashAlignmentStyles KeyAlignment separator_delta":{"type":"method","name":"separator_delta","children":[],"call":["correct_separator_column - ","pair loc operator column ","pair loc operator ","pair loc ","pair key loc expression end column + ","pair key loc expression end column ","pair key loc expression end ","pair key loc expression ","pair key loc ","pair key ","pair hash_rocket? ","pair key source_range end column + ","pair key source_range end column ","pair key source_range end ","pair key source_range ","pair key loc expression end column +  - ","pair key source_range end column +  - "]}," RuboCop Cop HashAlignmentStyles KeyAlignment deltas":{"type":"method","name":"deltas","children":[],"call":[" value_delta "," separator_delta ","first_pair key_delta ","Util  begins_its_line? ","current_pair source_range ","  value_delta  ","  separator_delta  ","first_pair first_pair key_delta  "]}," RuboCop Cop HashAlignmentStyles KeyAlignment deltas_for_first_pair":{"type":"method","name":"deltas_for_first_pair","children":[],"call":[" value_delta "," separator_delta "]}," RuboCop Cop HashAlignmentStyles KeyAlignment checkable_layout?":{"type":"method","name":"checkable_layout?","children":[],"call":[]}," RuboCop Cop Metrics LineLength breakable_range_by_line_index":{"type":"method","name":"breakable_range_by_line_index","children":[],"call":[]}," RuboCop Cop Metrics LineLength breakable_range_after_semicolon":{"type":"method","name":"breakable_range_after_semicolon","children":[],"call":["next_char == ","next_range source ","next_range line == ","range line ","next_range line "," range_between ","end_pos + ","range end_pos ","semicolon_token pos ","next_range source  == "," range_between  source ","next_semicolon_token pos  source "," range_between  line == ","next_semicolon_token pos  line == ","semicolon_token pos  line "," range_between  line ","next_semicolon_token pos  line "," semicolon_token pos _between ","range end_pos  + ","range range end_pos  ","semicolon_token pos  end_pos "]}," RuboCop Cop Metrics LineLength check_for_breakable_semicolons":{"type":"method","name":"check_for_breakable_semicolons","children":[],"call":[" breakable_range_by_line_index []= ","range line - ","range line "," breakable_range_by_line_index "," breakable_range_after_semicolon ","tokens reverse_each ","t type == ","t type ","processed_source tokens select ","processed_source tokens "," breakable_ breakable_range_after_semicolon _by_line_index []= "," breakable_range_after_semicolon  line - "," breakable_range_after_semicolon  line "," breakable_ breakable_range_after_semicolon _by_line_index "," breakable_ breakable_range_after_semicolon _after_semicolon "]}," RuboCop Cop Lint SuppressedException comment_lines?":{"type":"method","name":"comment_lines?","children":[],"call":[" comment_line? "," processed_source [] any? "," processed_source [] "," line_range "," processed_source "]}," RuboCop Cop Lint SuppressedException on_resbody":{"type":"method","name":"on_resbody","children":[],"call":[" add_offense "," comment_lines? "," cop_config [] "," cop_config ","node body "," comment_between_rescue_and_end? "," nil_body? "," nil_body? ! "]}," RuboCop Cop Lint RedundantStringCoercion message":{"type":"method","name":"message","children":[],"call":["node receiver "]}," RuboCop Cop Lint RedundantStringCoercion autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","receiver source ","node source_range ","node receiver "," lambda ","node receiver  source ","node node receiver  "]}," RuboCop Cop Lint RedundantStringCoercion on_interpolation":{"type":"method","name":"on_interpolation","children":[],"call":[" add_offense "," to_s_without_args? ","begin_node children last ","begin_node children ","corrector replace ","receiver source ","final_node receiver ","final_node loc selector ","final_node loc "," register_offense ","final_node receiver  source ","begin_node children last  receiver ","final_node final_node receiver  ","begin_node children last  loc selector ","begin_node children last  loc "]}," RuboCop Cop Lint MultipleComparison autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","center source_range "," lambda ","center source "," multiple_compare? "," multiple_compare?  source_range "," multiple_compare?  source "]}," RuboCop Cop Lint MultipleComparison on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," multiple_compare? ","corrector replace ","center source ","SET_OPERATION_OPERATORS  include? ","center method_name ","center send_type? "," multiple_compare?  source "," multiple_compare?  method_name "," multiple_compare?  send_type? "]}," RuboCop Cop Lint DuplicateHashKey on_hash":{"type":"method","name":"on_hash","children":[],"call":[" add_offense "," consecutive_duplicates each "," consecutive_duplicates "," duplicates? ","node keys select ","node keys ","key const_type? ","key recursive_basic_literal? ","node node keys select  select ","node node keys select  "]}," RuboCop Cop Layout TrailingEmptyLines message":{"type":"method","name":"message","children":[],"call":[" format ","wanted_blank_lines zero? "]}," RuboCop Cop Layout TrailingEmptyLines ends_in_end?":{"type":"method","name":"ends_in_end?","children":[],"call":["buffer source [] ","processed_source tokens last end_pos ","processed_source tokens last ","processed_source tokens ","buffer source ","processed_source tokens empty? ","buffer source strip start_with? ","buffer source strip ","processed_source buffer ","buffer source match? ","processed_source buffer  source [] ","processed_source buffer  source ","processed_source buffer  source strip start_with? ","processed_source buffer  source strip ","processed_source processed_source buffer  ","processed_source buffer  source match? "]}," RuboCop Cop Layout TrailingEmptyLines offense_detected":{"type":"method","name":"offense_detected","children":[],"call":[" add_offense "," message "," range_between ","buffer source length ","buffer source ","whitespace_at_end empty? ","buffer source length - ","whitespace_at_end length ","corrector replace "," style == "," style "]}," RuboCop Cop Layout TrailingEmptyLines autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," style == "," style "," lambda "]}," RuboCop Cop Layout TrailingEmptyLines investigate":{"type":"method","name":"investigate","children":[],"call":[" offense_detected ","blank_lines != "," style == "," style ","whitespace_at_end count - ","whitespace_at_end count ","buffer source [] ","buffer source "," ends_in_end? ","buffer source empty? ","processed_source buffer ","whitespace_at_end count -  != ","buffer source []  count - ","buffer source []  count ","processed_source buffer  source [] ","processed_source buffer  source ","processed_source buffer  source empty? ","processed_source processed_source buffer  "]}," RuboCop Cop Layout SpaceAroundKeyword namespace_operator?":{"type":"method","name":"namespace_operator?","children":[],"call":["range source_buffer source [] start_with? ","range source_buffer source [] ","range source_buffer source ","range source_buffer "]}," RuboCop Cop Layout SpaceAroundKeyword accept_namespace_operator?":{"type":"method","name":"accept_namespace_operator?","children":[],"call":["ACCEPT_NAMESPACE_OPERATOR  == ","range source ","range source == "]}," RuboCop Cop Layout ParameterAlignment target_method_lineno":{"type":"method","name":"target_method_lineno","children":[],"call":["node loc keyword line ","node loc keyword ","node loc "]}," RuboCop Cop Layout ParameterAlignment base_column":{"type":"method","name":"base_column","children":[],"call":[" display_column ","args first source_range ","args first ","indentation_of_line + "," configured_indentation_width ","(str \"\\\\S.*\") match begin ","(str \"\\\\S.*\") match ","node source_range source_buffer source_line ","node source_range source_buffer ","node source_range "," target_method_lineno "," fixed_indentation? ","(str \"\\S.*\") match begin  + ","indentation_of_node source_range source_buffer source_line  + ","node source_range source_buffer source_node source_range source_buffer source_line  "," target_method_node source_range source_buffer source_line no "," target_method_ target_method_lineno  "]}," RuboCop Cop Layout ParameterAlignment fixed_indentation?":{"type":"method","name":"fixed_indentation?","children":[],"call":[" cop_config [] == "," cop_config [] "," cop_config "]}," RuboCop Cop Layout ParameterAlignment message":{"type":"method","name":"message","children":[],"call":[" fixed_indentation? "]}," RuboCop Cop Layout ParameterAlignment autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["AlignmentCorrector  correct "," column_delta "," processed_source "]}," RuboCop Cop Layout ParameterAlignment on_def":{"type":"method","name":"on_def","children":[],"call":[" check_alignment "," base_column ","node arguments ","node arguments size < ","node arguments size "]}," RuboCop Cop Layout LeadingEmptyLines autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove "," lambda ","Parser Source Range  new ","node begin_pos "," processed_source buffer "," processed_source "]}," RuboCop Cop Layout LeadingEmptyLines investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense ","processed_source tokens [] pos ","processed_source tokens [] ","processed_source tokens ","token line > ","token line ","processed_source processed_source tokens [] s [] pos ","processed_source processed_source tokens [] s [] ","processed_source processed_source tokens [] s ","processed_source tokens []  line > ","processed_source tokens []  line "]}," RuboCop Cop Layout HeredocIndentation heredoc_end":{"type":"method","name":"heredoc_end","children":[],"call":["node loc heredoc_end source scrub ","node loc heredoc_end source ","node loc heredoc_end ","node loc "]}," RuboCop Cop Layout HeredocIndentation heredoc_body":{"type":"method","name":"heredoc_body","children":[],"call":["node loc heredoc_body source scrub ","node loc heredoc_body source ","node loc heredoc_body ","node loc "]}," RuboCop Cop Layout HeredocIndentation indentation_width":{"type":"method","name":"indentation_width","children":[],"call":["@config for_cop [] ","@config for_cop "]}," RuboCop Cop Layout HeredocIndentation heredoc_indent_type":{"type":"method","name":"heredoc_indent_type","children":[],"call":["node source [] ","node source "]}," RuboCop Cop Layout HeredocIndentation indent_level":{"type":"method","name":"indent_level","children":[],"call":["indentations min_by size ","indentations min_by ","indentations empty? ","line == ","(send\n  (send\n    (lvar :str) :lines) :map) reject ","line [] ","str lines map ","str lines ","line end_with? "]}," RuboCop Cop Layout HeredocIndentation base_indent_level":{"type":"method","name":"base_indent_level","children":[],"call":[" indent_level "," processed_source lines [] ","base_line_num - "," processed_source lines "," processed_source ","node loc expression line ","node loc expression ","node loc ","node source_range line ","node source_range "," processed_source lines [] _num - ","node loc expression line  - ","node source_range line  - "]}," RuboCop Cop Layout HeredocIndentation indented_end":{"type":"method","name":"indented_end","children":[],"call":["end_ gsub ","  * ","end_indent_level < "," base_indent_level "," indent_level "," heredoc_end "," heredoc_end  gsub "," indent_level  < "," heredoc_end indent_level < "]}," RuboCop Cop Layout HeredocIndentation indented_body":{"type":"method","name":"indented_body","children":[],"call":["body gsub ","  * "," base_indent_level + "," indentation_width "," base_indent_level "," indent_level "," heredoc_body "," configured_indentation_width "," heredoc_body  gsub "," heredoc_ heredoc_body  "]}," RuboCop Cop Layout HeredocIndentation check_style!":{"type":"method","name":"check_style!","children":[],"call":[" raise "," cop_name "," style "]}," RuboCop Cop Layout HeredocIndentation correct_by_library":{"type":"method","name":"correct_by_library","children":[],"call":["corrector insert_after ","node loc expression ","node loc ","STRIP_METHODS  [] "," style ","corrector replace "," indented_body ","node loc heredoc_body "," lambda "]}," RuboCop Cop Layout HeredocIndentation adjust_minus":{"type":"method","name":"adjust_minus","children":[],"call":["corrector replace ","node loc expression ","node loc ","heredoc_beginning sub ","node loc expression source ","node source ","node loc expression source  sub ","node source  sub "]}," RuboCop Cop Layout HeredocIndentation adjust_squiggly":{"type":"method","name":"adjust_squiggly","children":[],"call":["corrector replace "," indented_end ","node loc heredoc_end ","node loc "," indented_body ","node loc heredoc_body "]}," RuboCop Cop Layout HeredocIndentation correct_by_squiggly":{"type":"method","name":"correct_by_squiggly","children":[],"call":[" adjust_minus "," adjust_squiggly "," heredoc_indent_type == "," heredoc_indent_type "," lambda "]}," RuboCop Cop Layout HeredocIndentation max_line_length":{"type":"method","name":"max_line_length","children":[],"call":[" config for_cop [] "," config for_cop "," config "]}," RuboCop Cop Layout HeredocIndentation unlimited_heredoc_length?":{"type":"method","name":"unlimited_heredoc_length?","children":[],"call":[" config for_cop [] "," config for_cop "," config "]}," RuboCop Cop Layout HeredocIndentation longest_line":{"type":"method","name":"longest_line","children":[],"call":["(send\n  (send\n    (lvar :lines) :each_line) :max_by) chomp ","line chomp size ","line chomp ","lines each_line max_by ","lines each_line "]}," RuboCop Cop Layout HeredocIndentation line_too_long?":{"type":"method","name":"line_too_long?","children":[],"call":[" longest_line size + >= "," max_line_length "," longest_line size + "," longest_line size "," longest_line ","expected_indent - "," indent_level "," base_indent_level + "," indentation_width "," base_indent_level "," heredoc_body "," unlimited_heredoc_length? "," configured_indentation_width "," base_indent_level +  - "," heredoc_ heredoc_body  "]}," RuboCop Cop Layout HeredocIndentation ruby23_width_message":{"type":"method","name":"ruby23_width_message","children":[],"call":[" format "]}," RuboCop Cop Layout HeredocIndentation ruby23_type_message":{"type":"method","name":"ruby23_type_message","children":[],"call":[" format "]}," RuboCop Cop Layout HeredocIndentation ruby23_message":{"type":"method","name":"ruby23_message","children":[],"call":[" ruby23_type_message "," ruby23_width_message ","current_indent_type == "]}," RuboCop Cop Layout HeredocIndentation library_message":{"type":"method","name":"library_message","children":[],"call":[" format "]}," RuboCop Cop Layout HeredocIndentation message":{"type":"method","name":"message","children":[],"call":[" library_message "," indentation_width ","STRIP_METHODS  [] "," style "," ruby23_message "," heredoc_indent_type "," type_message "," width_message ","current_indent_type == "," configured_indentation_width "]}," RuboCop Cop Layout HeredocIndentation autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" correct_by_library "," correct_by_squiggly "," style "," check_style! "," adjust_minus "," adjust_squiggly "," heredoc_indent_type == "," heredoc_indent_type "," lambda "]}," RuboCop Cop Layout HeredocIndentation on_heredoc":{"type":"method","name":"on_heredoc","children":[],"call":[" add_offense "," line_too_long? ","body_indent_level zero? ","expected_indent_level == "," base_indent_level + "," indentation_width "," base_indent_level "," heredoc_indent_type == "," heredoc_indent_type "," indent_level ","body strip empty? ","body strip "," heredoc_body "," register_offense ","heredoc_indent_type == "," configured_indentation_width "," indent_level  zero? "," heredoc_body _indent_level zero? "," base_indent_level +  == ","  heredoc_indent_type  == ","  heredoc_indent_type  "," heredoc_body  strip empty? "," heredoc_body  strip "," heredoc_ heredoc_body  "," heredoc_indent_type  == "]}," RuboCop Cop Layout HashAlignment good_alignment?":{"type":"method","name":"good_alignment?","children":[],"call":["column_deltas values all? ","column_deltas values "]}," RuboCop Cop Layout HashAlignment adjust":{"type":"method","name":"adjust","children":[],"call":["corrector remove "," range_between ","range begin_pos ","range begin_pos - ","delta abs ","delta negative? ","corrector insert_before ","  * ","delta positive? ","  range_between _between "," range_between  begin_pos "," range_between  begin_pos - "]}," RuboCop Cop Layout HashAlignment new_alignment":{"type":"method","name":"new_alignment","children":[],"call":[" raise ","SeparatorAlignment  new ","TableAlignment  new ","KeyAlignment  new ","formats uniq map ","formats uniq ","formats is_a? "," cop_config [] "," cop_config "," cop_config []  uniq map "," cop_config []  uniq "," cop_config []  is_a? "]}," RuboCop Cop Layout HashAlignment correct_key_value":{"type":"method","name":"correct_key_value","children":[],"call":[" adjust "," lambda ","key_column -@ ","key_delta < ","key column ","delta [] ","key column  -@ ","key_column -@  < "]}," RuboCop Cop Layout HashAlignment correct_no_value":{"type":"method","name":"correct_no_value","children":[],"call":[" adjust "," lambda "]}," RuboCop Cop Layout HashAlignment correct_node":{"type":"method","name":"correct_node","children":[],"call":[" correct_key_value ","node loc operator ","node loc ","node value source_range ","node value ","node key source_range ","node key "," correct_no_value ","node source_range ","delta [] ","node value ! ","node value_omission? ! ","node value_omission? ","node respond_to? "]}," RuboCop Cop Layout HashAlignment alignment_for_colons":{"type":"method","name":"alignment_for_colons","children":[],"call":[" new_alignment "]}," RuboCop Cop Layout HashAlignment alignment_for_hash_rockets":{"type":"method","name":"alignment_for_hash_rockets","children":[],"call":[" new_alignment "]}," RuboCop Cop Layout HashAlignment alignment_for":{"type":"method","name":"alignment_for","children":[],"call":[" alignment_for_colons "," alignment_for_hash_rockets ","pair hash_rocket? ","KeywordSplatAlignment  new ","pair kwsplat_type? "]}," RuboCop Cop Layout HashAlignment ignore_hash_argument?":{"type":"method","name":"ignore_hash_argument?","children":[],"call":["node braces? ! ","node braces? "," cop_config [] "," cop_config "]}," RuboCop Cop Layout HashAlignment check_delta":{"type":"method","name":"check_delta","children":[],"call":[" offences_by [] push "," offences_by [] ","alignment class "," offences_by "," column_deltas [] []= "," column_deltas [] "," column_deltas "," good_alignment? "," offenses_by [] push "," offenses_by [] "," offenses_by "]}," RuboCop Cop Layout HashAlignment add_offences":{"type":"method","name":"add_offences","children":[],"call":[" add_offense ","(or\n  (lvar :offences)\n  (array)) each ","v length "," offences_by min_by "," offences_by ","MESSAGES  [] "," correct_node ","delta nil? "," column_deltas [] [] "," column_deltas [] "," alignment_for first class "," alignment_for first "," alignment_for "," column_deltas "," register_offences_with_format "," offences_by delete "," column_deltas [] []  nil? "," column_ column_deltas [] [] s [] [] "," column_ column_deltas [] [] s [] "," column_ column_deltas [] [] s "]}," RuboCop Cop Layout HashAlignment check_pairs":{"type":"method","name":"check_pairs","children":[],"call":[" add_offences "," check_delta ","alignment deltas "," alignment_for each "," alignment_for ","node children each ","node children ","alignment deltas_for_first_pair "," reset! ","node pairs first ","node pairs "," add_offenses "," check_alignment deltas  "," check_alignment deltas_for_first_pair  ","alignment alignment deltas s ","alignment alignment deltas_for_first_pair s ","alignment alignment deltas s_for_first_pair ","alignment alignment deltas_for_first_pair s_for_first_pair ","alignment deltas_for_node pairs first  "]}," RuboCop Cop Layout HashAlignment double_splat?":{"type":"method","name":"double_splat?","children":[],"call":["node children last is_a? ","node children last ","node children "]}," RuboCop Cop Layout HashAlignment reset!":{"type":"method","name":"reset!","children":[],"call":[" column_deltas= ","hash []= ","Hash  new "," offences_by= "," offenses_by= "]}," RuboCop Cop Layout HashAlignment autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" correct_node ","delta nil? "," column_deltas [] [] "," column_deltas [] "," alignment_for first class "," alignment_for first "," alignment_for "," column_deltas "," column_deltas [] []  nil? "," column_ column_deltas [] [] s [] [] "," column_ column_deltas [] [] s [] "," column_ column_deltas [] [] s "]}," RuboCop Cop Layout HashAlignment on_hash":{"type":"method","name":"on_hash","children":[],"call":[" check_pairs ","a checkable_layout? "," alignment_for_colons any? "," alignment_for_colons "," alignment_for_hash_rockets any? "," alignment_for_hash_rockets ","node single_line? ","node pairs empty? ","node pairs "," ignored_node? "," lambda "," enforce_first_argument_with_fixed_indentation? "," autocorrect_incompatible_with_other_cops? "]}," RuboCop Cop Layout HashAlignment on_send":{"type":"method","name":"on_send","children":[],"call":[" ignore_node "," ignore_hash_argument? ","last_argument hash_type? ","node last_argument ","node arguments? "," double_splat? ","node last_argument  hash_type? ","node node last_argument  "]}," RuboCop Cop Layout FirstParameterIndentation base_description":{"type":"method","name":"base_description","children":[],"call":[" style == "," brace_alignment_style "," style "]}," RuboCop Cop Layout FirstParameterIndentation check":{"type":"method","name":"check","children":[],"call":[" check_first ","first_elem source_range line == ","left_parenthesis line ","first_elem source_range line ","first_elem source_range ","def_node arguments first ","def_node arguments ","def_node arguments loc begin ","def_node arguments loc "," ignored_node? "," same_line? ","def_node arguments first  source_range line == ","def_node arguments loc begin  line ","def_node arguments first  source_range line ","def_node arguments first  source_range "]}," RuboCop Cop Layout FirstParameterIndentation brace_alignment_style":{"type":"method","name":"brace_alignment_style","children":[],"call":[]}," RuboCop Cop Layout FirstParameterIndentation on_def":{"type":"method","name":"on_def","children":[],"call":[" check ","node arguments loc begin nil? ","node arguments loc begin ","node arguments loc ","node arguments ","node arguments empty? "]}," RuboCop Cop Layout FirstHashElementIndentation message":{"type":"method","name":"message","children":[],"call":[" format "," configured_indentation_width "]}," RuboCop Cop Layout FirstHashElementIndentation base_description":{"type":"method","name":"base_description","children":[],"call":[" style == "," style "]}," RuboCop Cop Layout FirstHashElementIndentation check_based_on_longest_key":{"type":"method","name":"check_based_on_longest_key","children":[],"call":[" check_first ","key_lengths max - ","key_lengths first ","key_lengths max ","hash_node pairs first ","hash_node pairs ","key source_range length ","key source_range ","hash_node keys map ","hash_node keys "]}," RuboCop Cop Layout FirstHashElementIndentation separator_style?":{"type":"method","name":"separator_style?","children":[],"call":[" config for_cop [] == "," config for_cop [] "," config for_cop "," config ","separator is? ","first_pair loc operator ","first_pair loc ","first_pair loc operator  is? "]}," RuboCop Cop Layout FirstHashElementIndentation check_right_brace":{"type":"method","name":"check_right_brace","children":[],"call":[" add_offense "," style == "," style ","@column_delta zero? ","expected_column - ","right_brace column "," base_column ","right_brace source_line [] =~ ","right_brace source_line [] ","right_brace source_line ","(str \"\\\\S\") match? "," autocorrect "," message_for_right_brace "," indent_base ","expected_column -  zero? "," base_column  - ","  message_for_right_brace _for_right_brace "]}," RuboCop Cop Layout FirstHashElementIndentation check":{"type":"method","name":"check","children":[],"call":[" check_right_brace ","hash_node loc end ","hash_node loc "," check_first "," check_based_on_longest_key "," separator_style? ","first_pair first_line == ","left_brace line ","first_pair first_line ","hash_node pairs first ","hash_node pairs ","hash_node loc begin "," ignored_node? "," same_line? ","hash_node pairs first  first_line == ","hash_node loc begin  line ","hash_node pairs first  first_line "]}," RuboCop Cop Layout FirstHashElementIndentation brace_alignment_style":{"type":"method","name":"brace_alignment_style","children":[],"call":[]}," RuboCop Cop Layout FirstHashElementIndentation autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["AlignmentCorrector  correct "," processed_source "]}," RuboCop Cop Layout FirstHashElementIndentation on_send":{"type":"method","name":"on_send","children":[],"call":[" check "," each_argument_node "," enforce_first_argument_with_fixed_indentation? "]}," RuboCop Cop Layout FirstHashElementIndentation on_hash":{"type":"method","name":"on_hash","children":[],"call":[" check ","node loc begin ","node loc "]}," RuboCop Cop Layout FirstArrayElementIndentation message":{"type":"method","name":"message","children":[],"call":[" format "," configured_indentation_width "]}," RuboCop Cop Layout FirstArrayElementIndentation base_description":{"type":"method","name":"base_description","children":[],"call":[" style == "," style "]}," RuboCop Cop Layout FirstArrayElementIndentation check_right_bracket":{"type":"method","name":"check_right_bracket","children":[],"call":[" add_offense "," style == "," style ","@column_delta zero? ","expected_column - ","right_bracket column "," base_column ","right_bracket source_line [] =~ ","right_bracket source_line [] ","right_bracket source_line "," msg ","(str \"\\\\S\") match? "," autocorrect "," message_for_right_bracket "," indent_base ","expected_column -  zero? "," base_column  - ","  msg  ","  message_for_right_bracket  "]}," RuboCop Cop Layout FirstArrayElementIndentation check":{"type":"method","name":"check","children":[],"call":[" check_right_bracket ","array_node loc end ","array_node loc "," check_first ","first_elem source_range line == ","left_bracket line ","first_elem source_range line ","first_elem source_range ","array_node values first ","array_node values ","array_node loc begin "," ignored_node? "," same_line? ","array_node values first  source_range line == ","array_node loc begin  line ","array_node values first  source_range line ","array_node values first  source_range "]}," RuboCop Cop Layout FirstArrayElementIndentation brace_alignment_style":{"type":"method","name":"brace_alignment_style","children":[],"call":[]}," RuboCop Cop Layout FirstArrayElementIndentation autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["AlignmentCorrector  correct "," processed_source "]}," RuboCop Cop Layout FirstArrayElementIndentation on_send":{"type":"method","name":"on_send","children":[],"call":[" check "," each_argument_node "]}," RuboCop Cop Layout FirstArrayElementIndentation on_array":{"type":"method","name":"on_array","children":[],"call":[" check ","node loc begin ","node loc "]}," RuboCop Cop Layout FirstArgumentIndentation comment_lines":{"type":"method","name":"comment_lines","children":[],"call":["c loc line ","c loc ","(send\n  (send\n    (send nil :processed_source) :comments) :select) map "," begins_its_line? ","c loc expression "," processed_source comments select "," processed_source comments "," processed_source ","c source_range "]}," RuboCop Cop Layout FirstArgumentIndentation previous_code_line":{"type":"method","name":"previous_code_line","children":[],"call":[" processed_source lines [] ","line_number - "," processed_source lines "," processed_source "," comment_lines include? "," comment_lines ","line blank? "," processed_source  processed_source lines [] s [] "," processed_source lines [] _number - "," processed_source  processed_source lines [] s "," comment_ processed_source lines [] s include? "," comment_ processed_source lines [] s "," processed_source lines []  blank? "]}," RuboCop Cop Layout FirstArgumentIndentation column_of":{"type":"method","name":"column_of","children":[],"call":[" display_column "," previous_code_line =~ "," previous_code_line ","range line + + ","range line + ","source count ","range line ","source include? ","range source strip ","range source ","range source strip  count ","range source strip  include? ","range range source strip  strip ","range range source strip  "]}," RuboCop Cop Layout FirstArgumentIndentation base_range":{"type":"method","name":"base_range","children":[],"call":[" range_between ","arg_node source_range begin_pos ","arg_node source_range ","send_node source_range begin_pos ","send_node source_range ","start_node source_range begin_pos ","start_node source_range ","send_node parent ","parent kwsplat_type? ","parent splat_type? ","send_node parent  source_range begin_pos ","send_node parent  source_range ","send_node send_node parent  ","send_node parent  kwsplat_type? ","send_node parent  splat_type? "]}," RuboCop Cop Layout FirstArgumentIndentation special_inner_call_indentation?":{"type":"method","name":"special_inner_call_indentation?","children":[],"call":["node source_range begin_pos > ","parent source_range begin_pos ","parent source_range ","node source_range begin_pos ","node source_range "," style == "," style ","parent parenthesized? ! ","parent parenthesized? "," eligible_method_call? ","node parent ","node parent  source_range begin_pos ","node parent  source_range ","node parent  node parent hesized? ! ","node parent  node parent hesized? ","node node parent  "]}," RuboCop Cop Layout FirstArgumentIndentation base_indentation":{"type":"method","name":"base_indentation","children":[],"call":[" previous_code_line =~ "," previous_code_line ","node first_argument first_line ","node first_argument "," column_of "," base_range "," special_inner_call_indentation? "]}," RuboCop Cop Layout FirstArgumentIndentation message":{"type":"method","name":"message","children":[],"call":[" format "," comment_line? ","text lines reverse_each first ","text lines reverse_each ","text lines "," special_inner_call_indentation? ","text !~ "," base_range source strip "," base_range source "," base_range ","arg_node parent ","(str \"\\\\n\") match? ! ","(str \"\\\\n\") match? ","text include? ! ","text include? "," base_range source strip  lines reverse_each first "," base_range source strip  lines reverse_each "," base_range source strip  lines "," base_range source strip  !~ "," base_range source strip  include? ! "," base_range source strip  include? "]}," RuboCop Cop Layout FirstArgumentIndentation autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["AlignmentCorrector  correct "," column_delta "," processed_source "]}," RuboCop Cop Layout FirstArgumentIndentation on_send":{"type":"method","name":"on_send","children":[],"call":[" check_alignment ","node first_argument "," base_indentation + "," configured_indentation_width "," base_indentation ","node operator_method? ","node arguments? ! ","node arguments? "," enforce_first_argument_with_fixed_indentation? "," style != "," style "," bare_operator? ","node setter_method? "," enable_layout_first_method_argument_line_break? ! "," enable_layout_first_method_argument_line_break? "," same_line? "," should_check? "," base_ base_indentation + ation + "," configured_ base_indentation + ation_width "," base_ base_indentation + ation "," enforce_first_argument_with_fixed_ base_indentation + ation? "]}," RuboCop Cop Layout AssignmentIndentation leftmost_multiple_assignment":{"type":"method","name":"leftmost_multiple_assignment","children":[],"call":["node parent "," leftmost_multiple_assignment ","node parent assignment? "," same_line? "]}," RuboCop Cop Layout AssignmentIndentation autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["AlignmentCorrector  correct "," column_delta "," processed_source "]}," RuboCop Cop Layout AssignmentIndentation check_assignment":{"type":"method","name":"check_assignment","children":[],"call":[" check_alignment ","base + "," configured_indentation_width "," display_column "," leftmost_multiple_assignment source_range "," leftmost_multiple_assignment ","node loc operator line == ","rhs first_line ","node loc operator line ","node loc operator ","node loc "," same_line? "," display_column  + "]}," RuboCop Cop Layout ArrayAlignment autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["AlignmentCorrector  correct "," column_delta "," processed_source "]}," RuboCop Cop Layout ArrayAlignment on_array":{"type":"method","name":"on_array","children":[],"call":[" check_alignment ","node children "," base_column ","node children size < ","node children size ","node parent "]}," RuboCop Cop Layout ArgumentAlignment target_method_lineno":{"type":"method","name":"target_method_lineno","children":[],"call":["node loc begin line ","node loc begin ","node loc ","node loc selector line ","node loc selector "]}," RuboCop Cop Layout ArgumentAlignment base_column":{"type":"method","name":"base_column","children":[],"call":[" display_column ","args first source_range ","args first ","indentation_of_line + "," configured_indentation_width ","(str \"\\\\S.*\") match begin ","(str \"\\\\S.*\") match ","node source_range source_buffer source_line ","node source_range source_buffer ","node source_range "," target_method_lineno "," fixed_indentation? ","first_argument source_range ","first_argument nil? ","(str \"\\S.*\") match begin  + ","indentation_of_node source_range source_buffer source_line  + ","node source_range source_buffer source_node source_range source_buffer source_line  "," target_method_node source_range source_buffer source_line no "," target_method_ target_method_lineno  "]}," RuboCop Cop Layout ArgumentAlignment fixed_indentation?":{"type":"method","name":"fixed_indentation?","children":[],"call":[" cop_config [] == "," cop_config [] "," cop_config "]}," RuboCop Cop Layout ArgumentAlignment message":{"type":"method","name":"message","children":[],"call":[" fixed_indentation? "]}," RuboCop Cop Layout ArgumentAlignment autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["AlignmentCorrector  correct "," column_delta "," processed_source "]}," RuboCop Cop Layout ArgumentAlignment on_send":{"type":"method","name":"on_send","children":[],"call":[" check_alignment "," base_column ","node arguments ","node method? ","node send_type? ","node arguments size < ","node arguments size ","first_arg pairs first ","first_arg pairs ","first_arg hash_type? "," multiple_arguments? ! "," multiple_arguments? ","node first_argument ","pairs first ","first_arg braces? ! ","first_arg braces? ","items first "," flattened_arguments "," autocorrect_incompatible_with_other_cops? ","node first_argument  pairs first ","first_arg first_arg pairs  first ","node first_argument  pairs ","first_arg first_arg pairs  ","node first_argument  hash_type? ","node node first_argument ument ","first_arg pairs  first ","node first_argument  braces? ! ","node first_argument  braces? "," flattened_arguments  first "]}," RuboCop Cop InternalAffairs MethodNameEqual range":{"type":"method","name":"range","children":[],"call":[" range_between ","node source_range end_pos ","node source_range ","method_name_node loc selector begin_pos ","method_name_node loc selector ","method_name_node loc "]}," RuboCop Cop InternalAffairs MethodNameEqual autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","method_name_arg first source ","method_name_arg first "," range "," method_name? "," lambda "]}," RuboCop Cop InternalAffairs MethodNameEqual on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," range "," format ","method_name_arg first source ","method_name_arg first "," method_name? ","corrector replace ","  range  "]}," RuboCop Cop Cop external_dependency_checksum":{"type":"method","name":"external_dependency_checksum","children":[],"call":[]}," RuboCop Cop Bundler GemComment ignored_gem?":{"type":"method","name":"ignored_gem?","children":[],"call":["ignored_gems include? ","node first_argument value ","node first_argument "," Array "," cop_config [] "," cop_config "," Array  include? "]}," RuboCop CLI run_command":{"type":"method","name":"run_command","children":[],"call":["@env run "]}," RuboCop CLI Environment run":{"type":"method","name":"run","children":[],"call":["Command  run "]}," RuboCop CLI Environment initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop CLI Command class_for":{"type":"method","name":"class_for","children":[],"call":["Base  by_command_name "]}," RuboCop CLI Command run":{"type":"method","name":"run","children":[],"call":[" class_for new run "," class_for new "," class_for "]}," RuboCop CLI Command Version run":{"type":"method","name":"run","children":[],"call":[" puts ","RuboCop Version  version ","@options [] "," env "]}," RuboCop CLI Command ShowCops config_lines":{"type":"method","name":"config_lines","children":[],"call":["   + ","cnf to_yaml lines to_a drop map ","cnf to_yaml lines to_a drop ","cnf to_yaml lines to_a ","cnf to_yaml lines ","cnf to_yaml ","@config_store for for_cop ","@config_store for ","Dir  pwd ","@config for_cop ","@config_store for for_cop  to_yaml lines to_a drop map ","@config for_cop  to_yaml lines to_a drop map ","@config_store for for_cop  to_yaml lines to_a drop ","@config for_cop  to_yaml lines to_a drop ","@config_store for for_cop  to_yaml lines to_a ","@config for_cop  to_yaml lines to_a ","@config_store for for_cop  to_yaml lines ","@config for_cop  to_yaml lines ","@config_store for for_cop  to_yaml ","@config for_cop  to_yaml "]}," RuboCop CLI Command ShowCops cops_of_department":{"type":"method","name":"cops_of_department","children":[],"call":["cops with_department sort! ","cops with_department "]}," RuboCop CLI Command ShowCops selected_cops_of_department":{"type":"method","name":"selected_cops_of_department","children":[],"call":["@options [] include? ","cop cop_name ","@options [] "," cops_of_department select "," cops_of_department "]}," RuboCop CLI Command ShowCops print_cop_details":{"type":"method","name":"print_cop_details","children":[],"call":[" puts "," config_lines ","cop cop_name ","cop new support_autocorrect? ","cop new ","cops each ","cop support_autocorrect? "]}," RuboCop CLI Command ShowCops print_cops_of_department":{"type":"method","name":"print_cops_of_department","children":[],"call":[" print_cop_details "," puts ","selected_cops length "," selected_cops_of_department "," cops_of_department "," selected_cops_of_department  length "," cops_of_department  length ","  selected_cops_of_department _of_department ","  cops_of_department _of_department "]}," RuboCop CLI Command ShowCops print_available_cops":{"type":"method","name":"print_available_cops","children":[],"call":[" print_cops_of_department ","registry departments sort! each ","registry departments sort! ","registry departments "," puts ","Dir  pwd ","registry length ","@options [] empty? ","@options [] ","Cop Cop  registry ","@config_store for ","Cop Registry  global ","Cop Cop  registry  departments sort! each ","Cop Registry  global  departments sort! each ","Cop Cop  registry  departments sort! ","Cop Registry  global  departments sort! ","Cop Cop  registry  departments ","Cop Registry  global  departments ","Cop Cop  registry  length ","Cop Registry  global  length ","Cop Cop  Cop Cop  registry  ","Cop Cop  Cop Registry  global  "]}," RuboCop CLI Command ShowCops run":{"type":"method","name":"run","children":[],"call":[" print_available_cops "]}," RuboCop CLI Command InitDotfile run":{"type":"method","name":"run","children":[],"call":[" puts ","f write ","File  open "," warn "," Rainbow red "," Rainbow ","File  exist? ","File  expand_path ","File  write ","File  expand_File  expand_path  "]}," RuboCop CLI Command ExecuteRunner maybe_print_corrected_source":{"type":"method","name":"maybe_print_corrected_source","children":[],"call":[" print ","@options [] "," puts ","= * ","INTEGRATION_FORMATTERS  include? ","(if\n  (send\n    (ivar :@options) :[]\n    (sym :stderr))\n  (gvar :$stderr)\n  (gvar :$stdout)) puts "]}," RuboCop CLI Command ExecuteRunner display_error_summary":{"type":"method","name":"display_error_summary","children":[],"call":[" warn ","RuboCop Version  version ","Gem  loaded_specs [] metadata [] ","Gem  loaded_specs [] metadata ","Gem  loaded_specs [] ","Gem  loaded_specs ","errors each "," Rainbow red "," Rainbow "," pluralize ","errors size ","errors empty? "," bug_tracker_uri "]}," RuboCop CLI Command ExecuteRunner display_warning_summary":{"type":"method","name":"display_warning_summary","children":[],"call":[" warn ","warnings each "," Rainbow yellow "," Rainbow "," pluralize ","warnings size ","warnings empty? "]}," RuboCop CLI Command ExecuteRunner execute_runner":{"type":"method","name":"execute_runner","children":[],"call":["runner errors empty? ","runner errors ","runner aborting? ","@options [] "," maybe_print_corrected_source "," display_error_summary "," display_warning_summary ","runner warnings ","runner run ","Runner  new "," display_summary "," with_redirect ","Runner  new  errors empty? ","Runner  new  errors ","Runner  new  aborting? ","Runner  new  warnings ","Runner  new  run "]}," RuboCop CLI Command ExecuteRunner run":{"type":"method","name":"run","children":[],"call":[" execute_runner "]}," RuboCop CLI Command Base initialize":{"type":"method","name":"initialize","children":[],"call":["env paths ","env config_store ","env options "]}," RuboCop CLI Command Base by_command_name":{"type":"method","name":"by_command_name","children":[],"call":["s command_name == ","s command_name ","@subclasses detect "]}," RuboCop CLI Command Base inherited":{"type":"method","name":"inherited","children":[],"call":["@subclasses << "]}," RuboCop CLI Command AutoGenerateConfig execute_runner":{"type":"method","name":"execute_runner","children":[],"call":["Environment  new run ","Environment  new "]}," RuboCop CLI Command AutoGenerateConfig add_formatter":{"type":"method","name":"add_formatter","children":[],"call":["@options [] << ","@options [] "]}," RuboCop CLI Command AutoGenerateConfig reset_config_and_auto_gen_file":{"type":"method","name":"reset_config_and_auto_gen_file","children":[],"call":["ConfigLoader  add_inheritance_from_auto_generated_file ","File  open ","@config_store options_config= ","@options [] ","ConfigStore  new "," add_inheritance_from_auto_generated_file ","ConfigStore  new  options_config= "]}," RuboCop CLI Command AutoGenerateConfig run_all_cops":{"type":"method","name":"run_all_cops","children":[],"call":["f write ","File  open "," execute_runner "," puts "," Rainbow yellow "," Rainbow "]}," RuboCop CLI Command AutoGenerateConfig run_line_length_cop":{"type":"method","name":"run_line_length_cop","children":[],"call":["(send\n  (send\n    (send\n      (const nil :IO) :read\n      (const\n        (const nil :ConfigLoader) :AUTO_GENERATED_FILE)) :lines) :drop_while) join ","line start_with? ","IO  read lines drop_while ","IO  read lines ","IO  read ","ConfigStore  new ","@options delete "," execute_runner ","@options []= "," puts "," Rainbow yellow "," Rainbow ","(send\n  (send\n    (send\n      (const nil :IO) :read\n      (const nil :AUTO_GENERATED_FILE)) :lines) :drop_while) join ","(send\n  (send\n    (send\n      (const nil :File) :read\n      (const nil :AUTO_GENERATED_FILE)) :lines) :drop_while) join ","File  read lines drop_while ","File  read lines ","File  read ","@config_store options_config= ","@options [] ","ConfigStore  new  options_config= "]}," RuboCop CLI Command AutoGenerateConfig line_length_cop":{"type":"method","name":"line_length_cop","children":[],"call":["config for_cop "]}," RuboCop CLI Command AutoGenerateConfig max_line_length":{"type":"method","name":"max_line_length","children":[],"call":[" line_length_cop [] "," line_length_cop "]}," RuboCop CLI Command AutoGenerateConfig same_max_line_length?":{"type":"method","name":"same_max_line_length?","children":[],"call":[" max_line_length == "," max_line_length "]}," RuboCop CLI Command AutoGenerateConfig line_length_enabled?":{"type":"method","name":"line_length_enabled?","children":[],"call":[" line_length_cop [] "," line_length_cop "]}," RuboCop CLI Command AutoGenerateConfig skip_line_length_cop":{"type":"method","name":"skip_line_length_cop","children":[],"call":[" puts "," Rainbow yellow "," Rainbow "]}," RuboCop CLI Command AutoGenerateConfig maybe_run_line_length_cop":{"type":"method","name":"maybe_run_line_length_cop","children":[],"call":[" run_line_length_cop "," skip_line_length_cop "," same_max_line_length? ! "," same_max_line_length? ","ConfigLoader  default_configuration ","@config_store for ","Dir  pwd "," line_length_enabled? ! "," line_length_enabled? ","@config_store for_dir ","@config_store for_pwd "," options_has_only_flag? "]}," RuboCop CLI Command AutoGenerateConfig run":{"type":"method","name":"run","children":[],"call":[" run_all_cops "," maybe_run_line_length_cop "," reset_config_and_auto_gen_file "," add_formatter "]}," RuboCop Cop Style IfUnlessModifier too_long_line_based_on_allow_uri?":{"type":"method","name":"too_long_line_based_on_allow_uri?","children":[],"call":[" allowed_uri_position? "," find_excessive_uri_range "," allow_uri? "," find_excessive_ find_excessive_uri_range  "]}," RuboCop Cop Style IfUnlessModifier too_long_line_based_on_ignore_cop_directives?":{"type":"method","name":"too_long_line_based_on_ignore_cop_directives?","children":[],"call":[" line_length_without_directive > "," max_line_length "," line_length_without_directive "," directive_on_source_line? ","range line - ","range line "," ignore_cop_directives? "]}," RuboCop Cop Style IfUnlessModifier too_long_line_based_on_config?":{"type":"method","name":"too_long_line_based_on_config?","children":[],"call":[" too_long_line_based_on_allow_uri? ","too_long == "," too_long_line_based_on_ignore_cop_directives? "," matches_ignored_pattern? "," matches_allowed_pattern? ","  too_long_line_based_on_ignore_cop_directives? _line_based_on_allow_uri? "," too_long_line_based_on_ignore_cop_directives?  == ","  too_long_line_based_on_ignore_cop_directives? _line_based_on_ignore_cop_directives? "]}," RuboCop Cop Style IfUnlessModifier ignored_patterns":{"type":"method","name":"ignored_patterns","children":[],"call":[" config for_cop [] "," config for_cop "," config "]}," RuboCop Cop Offense correctable?":{"type":"method","name":"correctable?","children":[],"call":["@status != "]}," RuboCop Cop LineLengthHelp line_length_without_directive":{"type":"method","name":"line_length_without_directive","children":[],"call":["before_comment rstrip length ","before_comment rstrip ","line split ","DirectiveComment  before_comment rstrip length ","DirectiveComment  before_comment rstrip ","DirectiveComment  before_comment "]}," RuboCop Cop LineLengthHelp valid_uri?":{"type":"method","name":"valid_uri?","children":[],"call":["URI  parse "]}," RuboCop Cop LineLengthHelp uri_regexp":{"type":"method","name":"uri_regexp","children":[],"call":["URI DEFAULT_PARSER  make_regexp "," config for_cop [] "," config for_cop "," config "]}," RuboCop Cop LineLengthHelp tab_indentation_width":{"type":"method","name":"tab_indentation_width","children":[],"call":[" config for_cop [] "," config for_cop "," config "," configured_indentation_width "]}," RuboCop Cop LineLengthHelp indentation_difference":{"type":"method","name":"indentation_difference","children":[],"call":["line match [] size * "," tab_indentation_width - "," tab_indentation_width ","line match [] size ","line match [] ","line match ","(or\n  (send\n    (lvar :line) :index\n    (regexp\n      (str \"[^\\\\t]\")\n      (regopt)))\n  (int 0)) * ","line index ","index * ","line match? "]}," RuboCop Cop LineLengthHelp match_uris":{"type":"method","name":"match_uris","children":[],"call":["matches << "," valid_uri? ","$LAST_MATCH_INFO [] ","string scan "," uri_regexp "]}," RuboCop Cop LineLengthHelp find_excessive_uri_range":{"type":"method","name":"find_excessive_uri_range","children":[],"call":["end_position < "," max_line_length ","begin_position < ","pos + "," indentation_difference ","last_uri_match offset map ","last_uri_match offset "," match_uris last "," match_uris ","match offset last ","match offset ","line [] "," line_length "," extend_uri_end_position "," extend_uri_end_position  < "," match_uris last  offset map "," match_uris last  offset "," extend_uri_ extend_uri_end_position  "]}," RuboCop Cop LineLengthHelp line_length":{"type":"method","name":"line_length","children":[],"call":["line length + "," indentation_difference ","line length "]}," RuboCop Cop LineLengthHelp allowed_uri_position?":{"type":"method","name":"allowed_uri_position?","children":[],"call":["uri_range end == "," line_length - "," line_length ","uri_range end ","uri_range begin < "," max_line_length ","uri_range begin "]}," RuboCop Cop LineLengthHelp allow_uri?":{"type":"method","name":"allow_uri?","children":[],"call":[" config for_cop [] "," config for_cop "," config "]}," RuboCop Cop LineLengthHelp directive_on_source_line?":{"type":"method","name":"directive_on_source_line?","children":[],"call":["comment text match ","comment text ","e location line == ","e location line ","e location "," processed_source comments detect "," processed_source comments "," processed_source ","line_index + "," processed_source buffer first_line "," processed_source buffer ","comment text match? "," processed_source comment_at_line ","DirectiveComment  new match_captures ! ! ","DirectiveComment  new match_captures ! ","DirectiveComment  new match_captures ","DirectiveComment  new "," processed_source comment_at_line  text match "," processed_source comment_at_line  text "," processed_source  processed_source comment_at_line s detect "," processed_source  processed_source comment_at_line s "," processed_source comment_at_line  text match? "," processed_source  processed_source comment_at_line _at_line "]}," RuboCop Cop LineLengthHelp ignore_cop_directives?":{"type":"method","name":"ignore_cop_directives?","children":[],"call":[" config for_cop [] "," config for_cop "," config "]}," RuboCop Cop Lint NonDeterministicRequireOrder unsorted_dir_loop?":{"type":"method","name":"unsorted_dir_loop?","children":[],"call":[" unsorted_dir_each? "," unsorted_dir_block? "]}," RuboCop Cop Lint NonDeterministicRequireOrder autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node loc expression ","node loc ","node receiver source ","node receiver "," lambda ","node source "," unsorted_dir_block? "," correct_block_pass ","node arguments last ","node arguments ","node receiver node receiver source  ","node node receiver source  "]}," RuboCop Cop Lint NonDeterministicRequireOrder on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense ","node send_node "," var_is_required? ","node body "," loop_variable ","node arguments "," unsorted_dir_loop? "," correct_block "," target_ruby_version >= "," target_ruby_version "]}," RuboCop Cop Layout SpaceBeforeBlockBraces block_delimiters_style":{"type":"method","name":"block_delimiters_style","children":[],"call":[" config for_cop [] "," config for_cop "," config "]}," RuboCop Cop Layout SpaceBeforeBlockBraces conflict_with_block_delimiters?":{"type":"method","name":"conflict_with_block_delimiters?","children":[],"call":[" node multiline? "," node "," style == "," style "," block_delimiters_style == "," block_delimiters_style ","node multiline? "]}," RuboCop Cop Layout SpaceAroundOperators should_not_have_surrounding_space?":{"type":"method","name":"should_not_have_surrounding_space?","children":[],"call":[" space_around_exponent_operator? ! "," space_around_exponent_operator? ","operator is? "]}," RuboCop Cop Layout SpaceAroundOperators space_around_exponent_operator?":{"type":"method","name":"space_around_exponent_operator?","children":[],"call":[" cop_config [] == "," cop_config [] "," cop_config "]}," RuboCop Cop Layout LineLength check_uri_line":{"type":"method","name":"check_uri_line","children":[],"call":[" register_offense "," excess_range "," allowed_uri_position? "," find_excessive_uri_range "," find_excessive_ find_excessive_uri_range  "]}," RuboCop Cop Layout LineLength check_directive_line":{"type":"method","name":"check_directive_line","children":[],"call":[" register_offense "," source_range ","line_index + "," processed_source buffer "," processed_source "," line_length_without_directive - "," line_length_without_directive "," max "," line_length_without_directive <= ","length_without_directive - ","length_without_directive <= "," line_ line_length_without_directive  - "," line_ line_length_without_directive  "," line_ line_length_without_directive  <= "," line_length_without_directive  - "," line_length_without_directive  <= "]}," RuboCop Cop Layout LineLength line_in_heredoc?":{"type":"method","name":"line_in_heredoc?","children":[],"call":["range cover? "," heredocs any? "," heredocs "]}," RuboCop Cop Layout LineLength line_in_permitted_heredoc?":{"type":"method","name":"line_in_permitted_heredoc?","children":[],"call":[" allowed_heredoc include? "," allowed_heredoc "," allowed_heredoc == ","range cover? "," heredocs any? "," heredocs "]}," RuboCop Cop Layout LineLength extract_heredocs":{"type":"method","name":"extract_heredocs","children":[],"call":["body last_line ","body first_line ","node location heredoc_end source strip ","node location heredoc_end source ","node location heredoc_end ","node location ","node location heredoc_body ","ast each_node select map ","ast each_node select ","ast each_node ","node location heredoc_body  last_line ","node location heredoc_body  first_line ","node location heredoc_node location heredoc_body  "]}," RuboCop Cop Layout LineLength allowed_heredoc":{"type":"method","name":"allowed_heredoc","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Layout LineLength allow_heredoc?":{"type":"method","name":"allow_heredoc?","children":[],"call":[" allowed_heredoc "]}," RuboCop Cop Layout LineLength max":{"type":"method","name":"max","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Layout LineLength excess_range":{"type":"method","name":"excess_range","children":[],"call":[" source_range "," line_length ","line_index + "," processed_source buffer "," processed_source "," highlight_start ","uri_range end ","uri_range begin < "," max ","uri_range begin "]}," RuboCop Cop Layout LineLength register_offense":{"type":"method","name":"register_offense","children":[],"call":[" max= "," line_length "," add_offense "," breakable_range_by_line_index [] "," breakable_range_by_line_index "," format "," max ","corrector insert_before "," breakable_range "," breakable_range nil? "," breakable_range= ","  breakable_range_by_line_index [] _by_line_index [] ","  breakable_range_by_line_index [] _by_line_index ","  breakable_range_by_line_index []  ","  breakable_range_by_line_index []  nil? ","  breakable_range_by_line_index [] = "]}," RuboCop Cop Layout LineLength shebang?":{"type":"method","name":"shebang?","children":[],"call":["line start_with? ","line_index zero? "]}," RuboCop Cop Layout LineLength ignored_line?":{"type":"method","name":"ignored_line?","children":[],"call":[" line_in_permitted_heredoc? ","line_index succ "," heredocs "," shebang? "," matches_ignored_pattern? "]}," RuboCop Cop Layout LineLength check_line":{"type":"method","name":"check_line","children":[],"call":[" register_offense "," excess_range "," check_uri_line "," allow_uri? "," check_directive_line "," directive_on_source_line? "," ignore_cop_directives? "," ignored_line? "," line_length <= "," max "," line_length "," allowed_line? "]}," RuboCop Cop Layout LineLength highlight_start":{"type":"method","name":"highlight_start","children":[],"call":[" max - "," indentation_difference "," max ","(send\n  (send nil :max) :-\n  (send nil :indentation_difference\n    (lvar :line))) max "]}," RuboCop Cop Layout LineLength heredocs":{"type":"method","name":"heredocs","children":[],"call":[" extract_heredocs "," processed_source ast "," processed_source "]}," RuboCop Cop Layout LineLength breakable_range_by_line_index":{"type":"method","name":"breakable_range_by_line_index","children":[],"call":[]}," RuboCop Cop Layout LineLength breakable_range_after_semicolon":{"type":"method","name":"breakable_range_after_semicolon","children":[],"call":["next_char == ","next_range source ","next_range line == ","range line ","next_range line "," range_between ","end_pos + ","range end_pos ","semicolon_token pos ","(str \"[\\\\r\\\\n]\") match? "," same_line? ","next_range source  == "," range_between  source ","next_semicolon_token pos  source "," range_between  line == ","next_semicolon_token pos  line == ","semicolon_token pos  line "," range_between  line ","next_semicolon_token pos  line "," semicolon_token pos _between ","range end_pos  + ","range range end_pos  ","semicolon_token pos  end_pos "]}," RuboCop Cop Layout LineLength check_for_breakable_semicolons":{"type":"method","name":"check_for_breakable_semicolons","children":[],"call":[" breakable_range_by_line_index []= ","range line - ","range line "," breakable_range_by_line_index "," breakable_range_after_semicolon ","tokens reverse_each ","t type == ","t type ","processed_source tokens select ","processed_source tokens "," breakable_ breakable_range_after_semicolon _by_line_index []= "," breakable_range_after_semicolon  line - "," breakable_range_after_semicolon  line "," breakable_ breakable_range_after_semicolon _by_line_index "," breakable_ breakable_range_after_semicolon _after_semicolon "]}," RuboCop Cop Layout LineLength check_for_breakable_node":{"type":"method","name":"check_for_breakable_node","children":[],"call":[" breakable_range_by_line_index []= "," breakable_range_by_line_index "," breakable_range_by_line_index [] ","breakable_node source_range ","breakable_node first_line - ","breakable_node first_line ","breakable_node nil? "," extract_breakable_node "," max "," breakable_breakable_node source_range _by_line_index []= "," breakable_range_by_breakable_node first_line -  []= "," breakable_breakable_node source_range _by_line_index "," breakable_range_by_breakable_node first_line -  "," breakable_breakable_node source_range _by_line_index [] "," breakable_range_by_breakable_node first_line -  [] ","breakable_node source_breakable_node source_range  "," extract_breakable_node  source_range "," extract_breakable_node  first_line - "," extract_breakable_node  first_line "," extract_breakable_node  nil? "," extract_ extract_breakable_node  "]}," RuboCop Cop Layout LineLength autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector insert_before "," lambda ","range nil? "]}," RuboCop Cop Layout LineLength investigate_post_walk":{"type":"method","name":"investigate_post_walk","children":[],"call":[" check_line ","processed_source lines each_with_index ","processed_source lines "]}," RuboCop Cop Layout LineLength investigate":{"type":"method","name":"investigate","children":[],"call":[" check_for_breakable_semicolons "]}," RuboCop Cop Layout LineLength on_potential_breakable_node":{"type":"method","name":"on_potential_breakable_node","children":[],"call":[" check_for_breakable_node "]}," RuboCop ConfigValidator alert_about_unrecognized_cops":{"type":"method","name":"alert_about_unrecognized_cops","children":[],"call":[" raise ","unknown_cops join ","unknown_cops any? ","unknown_cops << "," smart_loaded_path ","name == ","Cop Cop  registry contains_cop_matching? ","Cop Cop  registry ","invalid_cop_names each ","Cop Registry  global contains_cop_matching? ","Cop Registry  global ","(str \"unrecognized cop \") rstrip ","suggestions join ","suggestions any? ","NameSimilarity  find_similar_names ","Cop Registry  global map ","(str \"unrecognized cop or department \") rstrip "," suggestion "," warn "," Rainbow yellow "," Rainbow ","ConfigLoader  ignore_unrecognized_cops "," list_unknown_cops ","unknown_cops empty? "," list_unknown_cops  join "," list_unknown_cops  any? "," list_unknown_cops  << ","NameSimilarity  find_similar_names  join ","NameSimilarity  find_similar_names  any? "," list_ list_unknown_cops  "," list_unknown_cops  empty? "]}," RuboCop TargetRuby rubocop_version_with_support":{"type":"method","name":"rubocop_version_with_support","children":[],"call":["OBSOLETE_RUBIES  [] "," version ","RuboCop Version  version "," supported? "]}," RuboCop TargetRuby supported?":{"type":"method","name":"supported?","children":[],"call":["KNOWN_RUBIES  include? "," version "]}," RuboCop TargetRuby version":{"type":"method","name":"version","children":[],"call":[" source version "," source "]}," RuboCop TargetRuby source":{"type":"method","name":"source","children":[],"call":["(send\n  (send\n    (send\n      (const nil :SOURCES) :each) :lazy) :map) detect ","c new ","SOURCES  each lazy map ","SOURCES  each lazy ","SOURCES  each "]}," RuboCop TargetRuby initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop TargetRuby supported_versions":{"type":"method","name":"supported_versions","children":[],"call":[]}," RuboCop TargetRuby Default find_version":{"type":"method","name":"find_version","children":[],"call":[]}," RuboCop TargetRuby Default name":{"type":"method","name":"name","children":[],"call":[]}," RuboCop TargetRuby BundlerLockFile bundler_lock_file_path":{"type":"method","name":"bundler_lock_file_path","children":[],"call":["@config bundler_lock_file_path "]}," RuboCop TargetRuby BundlerLockFile find_version":{"type":"method","name":"find_version","children":[],"call":["result captures first to_f ","result captures first ","result captures ","line match ","File  foreach "," bundler_lock_file_path ","line match  captures first to_f ","line match  captures first ","line match  captures "," bundler_ bundler_lock_file_path  "]}," RuboCop TargetRuby BundlerLockFile name":{"type":"method","name":"name","children":[],"call":[" bundler_lock_file_path "]}," RuboCop TargetRuby RubyVersionFile ruby_version_file":{"type":"method","name":"ruby_version_file","children":[],"call":["@config find_file_upwards ","@config base_dir_for_path_parameters "]}," RuboCop TargetRuby RubyVersionFile find_version":{"type":"method","name":"find_version","children":[],"call":["md [] to_f ","md [] ","File  read match ","File  read ","File  file? "," ruby_version_file "," pattern "," version_file ","File   ruby_version_file ? ","File   version_file ? "," ruby_version_ ruby_version_file  "," ruby_version_ version_file  "," version_ ruby_version_file  "," version_ version_file  "]}," RuboCop TargetRuby RubyVersionFile name":{"type":"method","name":"name","children":[],"call":[]}," RuboCop TargetRuby RuboCopConfig find_version":{"type":"method","name":"find_version","children":[],"call":["@config for_all_cops [] ","@config for_all_cops "]}," RuboCop TargetRuby RuboCopConfig name":{"type":"method","name":"name","children":[],"call":["@config smart_loaded_path "]}," RuboCop TargetRuby Source to_s":{"type":"method","name":"to_s","children":[],"call":[" name "]}," RuboCop TargetRuby Source initialize":{"type":"method","name":"initialize","children":[],"call":[" find_version "]}," RuboCop Cop Style YodaCondition program_name?":{"type":"method","name":"program_name?","children":[],"call":["PROGRAM_NAMES  include? "]}," RuboCop Cop Style YodaCondition source_file_path_constant?":{"type":"method","name":"source_file_path_constant?","children":[],"call":["node source == ","node source "]}," RuboCop Cop Style PercentLiteralDelimiters contains_delimiter?":{"type":"method","name":"contains_delimiter?","children":[],"call":["delimiters_regexp =~ ","(send\n  (send\n    (lvar :node) :children) :map) compact any? ","(send\n  (send\n    (lvar :node) :children) :map) compact "," string_source ","node children map ","node children ","Regexp  union ","delimiters_regexp match? ","s scrub ","(send\n  (send\n    (lvar :node) :children) :filter_map) any? ","node children filter_map ","Regexp  union  =~ ","Regexp  union  match? "]}," RuboCop Cop Style MultilineWhenThen accept_node_type?":{"type":"method","name":"accept_node_type?","children":[],"call":[]}," RuboCop Cop Style MethodCallWithArgsParentheses initialize":{"type":"method","name":"initialize","children":[],"call":[" extend "," style "," style_configured? "]}," RuboCop Cop Style MethodCallWithArgsParentheses RequireParentheses ignored_macro?":{"type":"method","name":"ignored_macro?","children":[],"call":[" included_macros_list include? ! "," included_macros_list include? ","node method_name "," included_macros_list ","node macro? "," cop_config [] "," cop_config "]}," RuboCop Cop Style MethodCallWithArgsParentheses RequireParentheses included_macros_list":{"type":"method","name":"included_macros_list","children":[],"call":[" cop_config fetch map "," cop_config fetch "," cop_config "]}," RuboCop Cop Style MethodCallWithArgsParentheses RequireParentheses eligible_for_parentheses_omission?":{"type":"method","name":"eligible_for_parentheses_omission?","children":[],"call":[" ignored_macro? ","node setter_method? ","node operator_method? "]}," RuboCop Cop Style MethodCallWithArgsParentheses RequireParentheses message":{"type":"method","name":"message","children":[],"call":[]}," RuboCop Cop Style MethodCallWithArgsParentheses RequireParentheses autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector insert_after "," args_end "," args_parenthesized? ","corrector replace "," args_begin "," lambda "]}," RuboCop Cop Style MethodCallWithArgsParentheses RequireParentheses on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","node parenthesized? ! ","node parenthesized? ","node arguments? "," eligible_for_parentheses_omission? "," matches_ignored_pattern? ","node method_name "," ignored_method? ","corrector insert_after "," args_end "," args_parenthesized? ","corrector replace "," args_begin "]}," RuboCop Cop Style MethodCallWithArgsParentheses OmitParentheses assigned_before?":{"type":"method","name":"assigned_before?","children":[],"call":["node loc operator begin < ","target loc begin ","target loc ","node loc operator begin ","node loc operator ","node loc ","node assignment? "]}," RuboCop Cop Style MethodCallWithArgsParentheses OmitParentheses unary_literal?":{"type":"method","name":"unary_literal?","children":[],"call":["node parent ","node sign? ","node numeric_type? "]}," RuboCop Cop Style MethodCallWithArgsParentheses OmitParentheses regexp_slash_literal?":{"type":"method","name":"regexp_slash_literal?","children":[],"call":["node loc begin source == ","node loc begin source ","node loc begin ","node loc ","node regexp_type? "]}," RuboCop Cop Style MethodCallWithArgsParentheses OmitParentheses hash_literal?":{"type":"method","name":"hash_literal?","children":[],"call":["node braces? ","node hash_type? "]}," RuboCop Cop Style MethodCallWithArgsParentheses OmitParentheses logical_operator?":{"type":"method","name":"logical_operator?","children":[],"call":["node logical_operator? ","node or_type? ","node and_type? "]}," RuboCop Cop Style MethodCallWithArgsParentheses OmitParentheses ternary_if?":{"type":"method","name":"ternary_if?","children":[],"call":["node ternary? ","node if_type? "]}," RuboCop Cop Style MethodCallWithArgsParentheses OmitParentheses splat?":{"type":"method","name":"splat?","children":[],"call":["node block_pass_type? ","node kwsplat_type? ","node splat_type? "]}," RuboCop Cop Style MethodCallWithArgsParentheses OmitParentheses ambigious_literal?":{"type":"method","name":"ambigious_literal?","children":[],"call":[" unary_literal? "," regexp_slash_literal? "," ternary_if? "," splat? "]}," RuboCop Cop Style MethodCallWithArgsParentheses OmitParentheses allowed_chained_call_with_parentheses?":{"type":"method","name":"allowed_chained_call_with_parentheses?","children":[],"call":[" allowed_chained_call_with_parentheses? ","previous parenthesized? ","node descendants first ","node descendants "," cop_config [] "," cop_config ","node descendants first  parenthesized? "]}," RuboCop Cop Style MethodCallWithArgsParentheses OmitParentheses allowed_multiline_call_with_parentheses?":{"type":"method","name":"allowed_multiline_call_with_parentheses?","children":[],"call":["node multiline? "," cop_config [] "," cop_config "]}," RuboCop Cop Style MethodCallWithArgsParentheses OmitParentheses hash_literal_in_arguments?":{"type":"method","name":"hash_literal_in_arguments?","children":[],"call":["node descendants any? "," method ","node descendants ","n send_type? "," hash_literal? ","node arguments any? ","node arguments "]}," RuboCop Cop Style MethodCallWithArgsParentheses OmitParentheses call_as_argument_or_chain?":{"type":"method","name":"call_as_argument_or_chain?","children":[],"call":["node parent super_type? ","node parent ","node parent csend_type? "," assigned_before? ! "," assigned_before? ","node parent send_type? ","node parent yield_type? "]}," RuboCop Cop Style MethodCallWithArgsParentheses OmitParentheses call_with_braced_block?":{"type":"method","name":"call_with_braced_block?","children":[],"call":["node block_node braces? ","node block_node ","node super_type? ","node send_type? ","node parent "]}," RuboCop Cop Style MethodCallWithArgsParentheses OmitParentheses call_with_ambiguous_arguments?":{"type":"method","name":"call_with_ambiguous_arguments?","children":[],"call":[" call_with_braced_block? "," logical_operator? "," ambigious_literal? ","node descendants any? ","node descendants "," hash_literal_in_arguments? "," call_as_argument_or_chain? ","n forwarded_args_type? "," ambiguous_literal? "," call_in_match_pattern? "]}," RuboCop Cop Style MethodCallWithArgsParentheses OmitParentheses call_in_optional_arguments?":{"type":"method","name":"call_in_optional_arguments?","children":[],"call":["node parent kwoptarg_type? ","node parent ","node parent optarg_type? "]}," RuboCop Cop Style MethodCallWithArgsParentheses OmitParentheses call_in_logical_operators?":{"type":"method","name":"call_in_logical_operators?","children":[],"call":["node parent arguments any? "," method ","node parent arguments ","node parent ","node parent send_type? "," logical_operator? ","parent arguments any? ","parent arguments ","parent send_type? ","node parent parent ","node node parent  arguments any? ","node node parent parent  arguments any? ","node node parent  arguments ","node node parent parent  arguments ","node node parent  ","node node parent parent  ","node node parent  send_type? ","node node parent parent  send_type? ","node parent  arguments any? ","node parent parent  arguments any? ","node parent  arguments ","node parent parent  arguments ","node parent  send_type? ","node parent parent  send_type? ","node node parent  node parent  ","node node parent parent  node parent parent  "]}," RuboCop Cop Style MethodCallWithArgsParentheses OmitParentheses call_in_literals?":{"type":"method","name":"call_in_literals?","children":[],"call":[" ternary_if? ","node parent "," splat? ","node parent range_type? ","node parent array_type? ","node parent pair_type? ","parent range_type? ","parent array_type? ","parent pair_type? ","node parent parent ","node node parent  ","node node parent parent  ","node node parent  range_type? ","node node parent parent  range_type? ","node node parent  array_type? ","node node parent parent  array_type? ","node node parent  pair_type? ","node node parent parent  pair_type? ","node parent  range_type? ","node parent parent  range_type? ","node parent  array_type? ","node parent parent  array_type? ","node parent  pair_type? ","node parent parent  pair_type? ","node node parent  node parent  ","node node parent parent  node parent parent  "]}," RuboCop Cop Style MethodCallWithArgsParentheses OmitParentheses legitimate_call_with_parentheses?":{"type":"method","name":"legitimate_call_with_parentheses?","children":[],"call":[" allowed_chained_call_with_parentheses? "," allowed_multiline_call_with_parentheses? "," call_in_optional_arguments? "," call_in_logical_operators? "," call_with_ambiguous_arguments? "," call_in_literals? "," call_in_single_line_inheritance? "," assignment_in_condition? "," forwards_anonymous_rest_arguments? "]}," RuboCop Cop Style MethodCallWithArgsParentheses OmitParentheses parentheses_at_the_end_of_multiline_call?":{"type":"method","name":"parentheses_at_the_end_of_multiline_call?","children":[],"call":["node loc begin source_line gsub end_with? ","node loc begin source_line gsub ","node loc begin source_line ","node loc begin ","node loc ","node multiline? "]}," RuboCop Cop Style MethodCallWithArgsParentheses OmitParentheses allowed_camel_case_method_call?":{"type":"method","name":"allowed_camel_case_method_call?","children":[],"call":[" cop_config [] "," cop_config ","node arguments none? ","node arguments ","node camel_case_method? "]}," RuboCop Cop Style MethodCallWithArgsParentheses OmitParentheses super_call_without_arguments?":{"type":"method","name":"super_call_without_arguments?","children":[],"call":["node arguments none? ","node arguments ","node super_type? "]}," RuboCop Cop Style MethodCallWithArgsParentheses OmitParentheses message":{"type":"method","name":"message","children":[],"call":[]}," RuboCop Cop Style MethodCallWithArgsParentheses OmitParentheses autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove ","node loc end ","node loc ","corrector replace "," args_begin "," parentheses_at_the_end_of_multiline_call? "," lambda "]}," RuboCop Cop Style MethodCallWithArgsParentheses OmitParentheses on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","node loc begin join ","node loc end ","node loc ","node loc begin "," legitimate_call_with_parentheses? "," allowed_camel_case_method_call? "," super_call_without_arguments? ","node implicit_call? ","node parenthesized? ","corrector remove ","corrector replace "," args_begin "," parentheses_at_the_end_of_multiline_call? "," offense_range "]}," RuboCop Cop Migration DepartmentName valid_content_token?":{"type":"method","name":"valid_content_token?","children":[],"call":["DISABLING_COPS_CONTENT_TOKEN  match nil? ! ","DISABLING_COPS_CONTENT_TOKEN  match nil? ","DISABLING_COPS_CONTENT_TOKEN  match ","(str \"\\\\W+\") match nil? ! ","(str \"\\\\W+\") match nil? ","(str \"\\\\W+\") match ","DISABLING_COPS_CONTENT_TOKEN  match? ","(str \"\\\\W+\") match? ","Registry  global department? ","Registry  global "]}," RuboCop Cop Layout MultilineBlockLayout include_trailing_comma?":{"type":"method","name":"include_trailing_comma?","children":[],"call":["args source include? ","args source ","arg_count == ","args each_descendant to_a size ","args each_descendant to_a ","args each_descendant ","args each_descendant to_a size  == "]}," RuboCop Cop AutocorrectLogic safe_autocorrect?":{"type":"method","name":"safe_autocorrect?","children":[],"call":[" cop_config fetch "," cop_config "]}," RuboCop ConfigValidator msg_not_boolean":{"type":"method","name":"msg_not_boolean","children":[],"call":[" Rainbow yellow "," Rainbow "," Rainbow reset "]}," RuboCop ConfigValidator check_cop_config_value":{"type":"method","name":"check_cop_config_value","children":[],"call":[" raise "," msg_not_boolean ","value == ","key == ","value is_a? ","(str \"Enabled\") include? "," check_cop_config_value ","hash each ","(str \"pending\") include? ","CONFIG_CHECK_DEPARTMENTS  include? ","CONFIG_CHECK_KEYS  include? "]}," RuboCop ConfigValidator reject_conflicting_safe_settings":{"type":"method","name":"reject_conflicting_safe_settings","children":[],"call":[" raise "," smart_loaded_path ","cop_config [] == ","cop_config [] ","cop_config is_a? ","@config each "]}," RuboCop ConfigLoader warn_on_pending_cops":{"type":"method","name":"warn_on_pending_cops","children":[],"call":[" warn "," Rainbow yellow "," Rainbow ","pending_cops each ","pending_cops none? ","config [] [] == ","config [] [] ","config [] ","config keys select ","config keys ","cop metadata [] ","cop metadata ","cop name ","pending_cops empty? "," warn_pending_cop "]}," RuboCop CLI Command ShowCops initialize":{"type":"method","name":"initialize","children":[],"call":["@config_store for ","Dir  pwd ","@config_store for _store for "]}," RuboCop AST ForwardArgsNode to_a":{"type":"method","name":"to_a","children":[],"call":[]}," RuboCop AST DefNode argument_forwarding?":{"type":"method","name":"argument_forwarding?","children":[],"call":[" arguments any? "," arguments "]}," Rubocop Cop WordArray on_array":{"type":"method","name":"on_array","children":[],"call":[" add_offence ","node loc line ","node loc "," complex_content? ! "," complex_content? ","e type == ","e type ","array_elems all? ","array_elems size > ","array_elems size ","node children ","node loc begin source == ","node loc begin source ","node loc begin ","node children  all? ","node children  size > ","node children  size "]}," Rubocop Cop WhenThen on_when":{"type":"method","name":"on_when","children":[],"call":[" add_offence ","node loc line ","node loc ","node loc begin source == ","node loc begin source ","node loc begin "]}," Rubocop Cop VariableInterpolation var_nodes":{"type":"method","name":"var_nodes","children":[],"call":["(sym :ivar) include? ","n type ","nodes select "]}," Rubocop Cop VariableInterpolation on_dstr":{"type":"method","name":"on_dstr","children":[],"call":[" add_offence "," sprintf ","v loc line ","v loc ","node loc expression source include? ","node loc expression source ","node loc expression ","node loc ","(if\n  (send\n    (send\n      (lvar :v) :type) :==\n    (sym :nth_ref))\n  (str \"$\")\n  (str \"\")) + ","v to_a [] to_s ","v to_a [] ","v to_a ","v type == ","v type "," var_nodes each "," var_nodes ","node children ","(if\n  (send\n    (send\n      (l(if\n  (send\n    (send\n      (lvar :v) :type) :==\n    (sym :nth_ref))\n  (str \"$\")\n  (str \"\")) +  :v) :type) :==\n    (sym :nth_ref))\n  (str \"$\")\n  (str \"\")) + "," (if\n  (send\n    (send\n      (lvar :v) :type) :==\n    (sym :nth_ref))\n  (str \"$\")\n  (str \"\")) + _nodes each "," (if\n  (send\n    (send\n      (lvar :v) :type) :==\n    (sym :nth_ref))\n  (str \"$\")\n  (str \"\")) + _nodes "]}," Rubocop Cop UnlessElse on_if":{"type":"method","name":"on_if","children":[],"call":[" add_offence ","loc line ","loc else ","loc keyword source == ","loc keyword source ","loc keyword ","loc respond_to? ","node loc ","node loc  line ","node loc  else ","node loc  keyword source == ","node loc  keyword source ","node loc  keyword ","node loc  respond_to? ","node node loc  "]}," Rubocop Cop TrivialAccessors on_def":{"type":"method","name":"on_def","children":[],"call":[" add_offence "," sprintf ","node loc keyword line ","node loc keyword ","node loc ","body children [] type == ","body children [] type ","body children [] ","body children ","body type == ","body type ","args children size == ","args children size ","args children ","method_name != "]}," Rubocop Cop NestedTernaryOperator on_if":{"type":"method","name":"on_if","children":[],"call":[" add_offence ","c loc line ","c loc ","c loc respond_to? "," on_node ","node children each ","node children ","loc respond_to? ","node loc ","c node loc  line ","c node loc  ","c node loc  respond_to? ","node loc  respond_to? ","node node loc  "]}," Rubocop Cop MultilineTernaryOperator on_if":{"type":"method","name":"on_if","children":[],"call":[" add_offence ","loc line ","loc line != ","loc colon line ","loc colon ","loc respond_to? ","node loc ","node loc  line ","node loc  line != ","node loc  colon line ","node loc  colon ","node loc  respond_to? ","node node loc  "]}," Rubocop Cop Syntax inspect_file":{"type":"method","name":"inspect_file","children":[],"call":[" add_offence "," process_line ","line =~ ","stderr each_line ","Open3  capture3 ","Bundler  with_clean_env ","RUBY_ENGINE  == "]}," Rubocop Cop SymbolName on_sym":{"type":"method","name":"on_sym","children":[],"call":[" add_offence ","node loc line ","node loc ","sym_name =~ "," allow_camel_case? ","node to_a [] ","node to_a ","node to_a []  =~ "]}," Rubocop Cop SymbolName allow_camel_case?":{"type":"method","name":"allow_camel_case?","children":[],"call":[" class config [] "," class config "," class "]}," Rubocop Cop SpaceInsideHashLiteralBraces check":{"type":"method","name":"check","children":[],"call":[" add_offence ","MSG  % ","t1 pos line ","t1 pos ","has_space ! "," class config [] "," class config "," class "," space_between? ","(send\n  (lvar :braces) :-\n  (lvar :types)) size == ","(send\n  (lvar :braces) :-\n  (lvar :types)) size ","braces - ","types == ","(lvar :t1) map "," space_between?  ! ","(send\n  (lvar :braces) :-\n  (lvar :(lvar :t1) map )) size == ","(send\n  (lvar :braces) :-\n  (lvar :(lvar :t1) map )) size ","(lvar :t1) map  == "]}," Rubocop Cop SpaceInsideHashLiteralBraces inspect":{"type":"method","name":"inspect","children":[],"call":[" check ","tokens [] ","e_ix - ","b_ix + "," index_of_last_token "," index_of_first_token "," on_node ","tokens [] type == ","tokens [] type "," index_of_last_token  - "," index_of_first_token  + "]}," Rubocop Cop SpaceInsideBrackets specifics":{"type":"method","name":"specifics","children":[],"call":[]}," Rubocop Cop SpaceInsideParens specifics":{"type":"method","name":"specifics","children":[],"call":[]}," Rubocop Cop SpaceInside inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","MSG  % ","t1 pos line ","t1 pos "," space_between? ","t2 pos line == ","t2 pos line ","t2 pos ","t2 type == ","t2 type ","t1 type == ","t1 type ","tokens each_cons "," specifics "]}," Rubocop Cop SpaceAroundBraces check":{"type":"method","name":"check","children":[],"call":[" add_offence ","t1 pos line ","t1 pos "," space_between? "]}," Rubocop Cop SpaceAroundBraces get_positions_not_to_check":{"type":"method","name":"get_positions_not_to_check","children":[],"call":["positions_not_to_check << ","t pos ","t type == ","t type ","tokens [] each ","tokens [] "," index_of_last_token "," index_of_first_token "," on_node ","positions_not_to_check << << ","tokens [] pos "]}," Rubocop Cop SpaceAroundBraces inspect":{"type":"method","name":"inspect","children":[],"call":[" check ","type2 == ","type1 == ","(sym :tLCURLY) include? ","t2 type ","t1 type ","(send\n  (array\n    (send\n      (lvar :t1) :pos)\n    (send\n      (lvar :t2) :pos)) :-\n  (lvar :positions_not_to_check)) size < ","(send\n  (array\n    (send\n      (lvar :t1) :pos)\n    (send\n      (lvar :t2) :pos)) :-\n  (lvar :positions_not_to_check)) size ","(send\n  (lvar :t1) :pos) - ","t2 pos ","t1 pos ","tokens each_cons "," get_positions_not_to_check ","(send\n  (array\n    (send\n      (lvar :t1) :pos)\n    (send\n      (lvar :t2) :pos)) :-\n  (lvar : get_positions_not_to_check )) size < ","(send\n  (array\n    (send\n      (lvar :t1) :pos)\n    (send\n      (lvar :t2) :pos)) :-\n  (lvar : get_positions_not_to_check )) size "," get_ get_positions_not_to_check  "]}," Rubocop Cop SpaceAroundOperators has_space?":{"type":"method","name":"has_space?","children":[],"call":[" space_between? "]}," Rubocop Cop SpaceAroundOperators do_not_check_singleton_operator_defs":{"type":"method","name":"do_not_check_singleton_operator_defs","children":[],"call":["positions_not_to_check << ","name_token pos ","t text == ","name to_s ","t text ","tokens [] find ","tokens [] "," index_of_first_token "," on_node "]}," Rubocop Cop SpaceAroundOperators do_not_check_def_things":{"type":"method","name":"do_not_check_def_things","children":[],"call":["positions_not_to_check << ","tokens [] pos ","tokens [] "," index_of_first_token + "," index_of_first_token "," on_node "]}," Rubocop Cop SpaceAroundOperators do_not_check_class_lshift_self":{"type":"method","name":"do_not_check_class_lshift_self","children":[],"call":["positions_not_to_check << ","tokens [] pos ","tokens [] ","ix + ","tokens [] map == ","tokens [] map "," index_of_first_token "," on_node "," index_of_first_token  + "]}," Rubocop Cop SpaceAroundOperators do_not_check_param_default":{"type":"method","name":"do_not_check_param_default","children":[],"call":["positions_not_to_check << ","equals pos ","tokens [] "," index_of_first_token "," on_node "]}," Rubocop Cop SpaceAroundOperators do_not_check_block_arg_pipes":{"type":"method","name":"do_not_check_block_arg_pipes","children":[],"call":["positions_not_to_check << << ","a loc end ","a loc ","positions_not_to_check << ","a loc begin "," on_node "]}," Rubocop Cop SpaceAroundOperators get_positions_not_to_check":{"type":"method","name":"get_positions_not_to_check","children":[],"call":[" do_not_check_singleton_operator_defs "," do_not_check_def_things "," do_not_check_class_lshift_self "," do_not_check_param_default "," do_not_check_block_arg_pipes "]}," Rubocop Cop SpaceAroundOperators inspect":{"type":"method","name":"inspect","children":[],"call":[" check_missing_space "," add_offence ","token pos line ","token pos "," has_space? ","token type ","positions_not_to_check include? ","token_before type == ","token_before type ","tokens each_cons "," get_positions_not_to_check "," get_positions_not_to_check  include? "," get_ get_positions_not_to_check  "]}," Rubocop Cop SurroundingSpace build_token_table":{"type":"method","name":"build_token_table","children":[],"call":["table []= ","t pos column ","t pos ","t pos line ","tokens each_with_index "]}," Rubocop Cop SpaceAfterControlKeyword on_keyword":{"type":"method","name":"on_keyword","children":[],"call":[" add_offence ","kw line ","exp source [] start_with? ","kw source + ","kw source ","exp source [] ","exp source ","kw begin_pos - ","exp begin_pos ","kw begin_pos ","node loc keyword ","node loc ","node loc expression ","node loc is_a? ","node loc keyword  line ","node loc expression  source [] start_with? ","node loc keyword  source + ","node loc keyword  source ","node loc expression  source [] ","node loc expression  source ","node loc keyword  begin_pos - ","node loc expression  begin_pos ","node loc keyword  begin_pos ","node loc node loc expression ression "]}," Rubocop Cop SpaceAfterColon offset":{"type":"method","name":"offset","children":[],"call":["token text length + ","token text length ","token text ","token type "]}," Rubocop Cop SpaceAfterCommaEtc offset":{"type":"method","name":"offset","children":[],"call":[]}," Rubocop Cop SingleLineMethods check":{"type":"method","name":"check","children":[],"call":[" add_offence ","(and\n  (send nil :allow_empty?)\n  (lvar :empty_body)) ! "," allow_empty? ","start_line == ","node children [] type == ","node children [] type ","node children [] ","node children ","node type == ","node type ","node loc end line ","node loc end ","node loc ","node loc keyword line ","node loc keyword ","(and\n  (send nil :allow_empty?)\n  (lvar :node children [] type == )) ! ","node loc keyword line  == "]}," Rubocop Cop SingleLineMethods on_defs":{"type":"method","name":"on_defs","children":[],"call":[" check "]}," Rubocop Cop SingleLineMethods on_def":{"type":"method","name":"on_def","children":[],"call":[" check "]}," Rubocop Cop SingleLineMethods allow_empty?":{"type":"method","name":"allow_empty?","children":[],"call":["SingleLineMethods  config [] ","SingleLineMethods  config "]}," Rubocop Cop RescueException targets_exception?":{"type":"method","name":"targets_exception?","children":[],"call":["klass_name == ","namespace type == ","namespace type ","namespace nil? ","rescue_arg_node type == ","rescue_arg_node type "]}," Rubocop Cop RescueException on_resbody":{"type":"method","name":"on_resbody","children":[],"call":[" add_offence ","node location line ","node location "," targets_exception? ","rescue_args any? ","node children first children ","node children first ","node children ","node children first children  any? "]}," Rubocop Cop ReduceArguments on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offence ","node loc line ","node loc ","args_node == ","(sym :reduce) include? ","Util  block_length == ","Util  block_length "]}," Rubocop Cop PercentR on_regexp":{"type":"method","name":"on_regexp","children":[],"call":[" add_offence ","node loc line ","node loc ","node loc expression source [] scan size <= ","node loc expression source [] scan size ","node loc expression source [] scan ","node loc expression source [] ","node loc expression source ","node loc expression ","node loc begin source != ","node loc begin source ","node loc begin "]}," Rubocop Cop ParameterLists max_params":{"type":"method","name":"max_params","children":[],"call":["ParameterLists  config [] ","ParameterLists  config "]}," Rubocop Cop ParameterLists on_args":{"type":"method","name":"on_args","children":[],"call":[" add_offence "," sprintf "," max_params ","node loc line ","node loc ","args_count > ","node children size ","node children ","node children size  > "]}," Rubocop Cop OpMethod on_def":{"type":"method","name":"on_def","children":[],"call":[" add_offence "," sprintf ","node loc line ","node loc ","args != ","args children size == ","args children size ","args children ","BLACKLISTED  include? ! ","BLACKLISTED  include? ","name !~ ","args children [] loc expression ","args children [] loc ","args children [] "]}," Rubocop Cop NumericLiterals on_int":{"type":"method","name":"on_int","children":[],"call":[" add_offence ","node loc expression line ","node loc expression ","node loc ","node loc expression source split grep any? ","node loc expression source split grep ","node loc expression source split ","node loc expression source ","value > "]}," Rubocop Cop Not on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offence ","node loc line ","node loc ","node loc selector source == ","node loc selector source ","node loc selector ","method_name == ","args empty? "]}," Rubocop Cop NewLambdaLiteral on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offence ","node loc line ","node loc ","node loc selector source != ","node loc selector source ","node loc selector ","node == "]}," Rubocop Cop MethodLength check":{"type":"method","name":"check","children":[],"call":[" add_offence ","node loc keyword line ","node loc keyword ","node loc "," sprintf "," max_length ","method_length > "," calculate_length ","node loc expression source ","node loc expression "," calculate_length  > "]}," Rubocop Cop MethodLength max_length":{"type":"method","name":"max_length","children":[],"call":["MethodLength  config [] ","MethodLength  config "]}," Rubocop Cop MethodLength on_defs":{"type":"method","name":"on_defs","children":[],"call":[" check "]}," Rubocop Cop MethodLength on_def":{"type":"method","name":"on_def","children":[],"call":[" check "]}," Rubocop Cop MethodAndVariableSnakeCase name_of_setter":{"type":"method","name":"name_of_setter","children":[],"call":["method_name to_s end_with? ","method_name to_s ","receiver type == ","receiver type "]}," Rubocop Cop MethodAndVariableSnakeCase name_of_variable":{"type":"method","name":"name_of_variable","children":[],"call":["vasgn_node children first ","vasgn_node children "]}," Rubocop Cop MethodAndVariableSnakeCase name_of_singleton_method":{"type":"method","name":"name_of_singleton_method","children":[],"call":["defs_node children [] ","defs_node children "]}," Rubocop Cop MethodAndVariableSnakeCase name_of_instance_method":{"type":"method","name":"name_of_instance_method","children":[],"call":["def_node children first ","def_node children "]}," Rubocop Cop Loop check":{"type":"method","name":"check","children":[],"call":[" add_offence ","node loc keyword line ","node loc keyword ","node loc ","node loc expression source start_with? ! ","node loc expression source start_with? ","node loc expression source ","node loc expression ","body type == ","body type ","node type to_s ","node type ","body node type to_s  == ","body node type to_s  ","node node type to_s  to_s ","node node type to_s  "]}," Rubocop Cop Loop on_until":{"type":"method","name":"on_until","children":[],"call":[" check "]}," Rubocop Cop Loop on_while":{"type":"method","name":"on_while","children":[],"call":[" check "]}," Rubocop Cop LeadingCommentSpace on_comment":{"type":"method","name":"on_comment","children":[],"call":[" add_offence ","c loc line ","c loc ","c loc line == ","c text start_with? ","c text ","c text =~ "]}," Rubocop Cop OneLineConditional offending_line":{"type":"method","name":"offending_line","children":[],"call":["node loc expression line ","node loc expression ","node loc ","node loc expression source =~ ","node loc expression source "]}," Rubocop Cop MultilineIfThen offending_line":{"type":"method","name":"offending_line","children":[],"call":["node loc begin line ","node loc begin ","node loc ","node loc expression source =~ ","node loc expression source ","node loc expression ","node loc expression begin line ","node loc expression begin ","right_after_cond source =~ ","right_after_cond source ","Parser Source Range  new ","next_thing begin_pos ","condition loc expression end end_pos ","condition loc expression end ","condition loc expression ","condition loc ","next_thing source_buffer ","node loc end ","body loc expression begin ","body loc expression ","body loc ","Parser Source Range  new  source =~ ","Parser Source Range  new  source ","node loc end  begin_pos ","body loc expression begin  begin_pos ","node loc end  source_buffer ","body loc expression begin  source_buffer "]}," Rubocop Cop IfWithSemicolon offending_line":{"type":"method","name":"offending_line","children":[],"call":["node loc begin line ","node loc begin ","node loc ","node loc begin source == ","node loc begin source "]}," Rubocop Cop HashSyntax word_symbol_pair?":{"type":"method","name":"word_symbol_pair?","children":[],"call":["sym_name =~ ","key to_a [] ","key to_a ","key type == ","key type ","key to_a []  =~ "]}," Rubocop Cop HashSyntax on_hash":{"type":"method","name":"on_hash","children":[],"call":[" add_offence ","pair loc line ","pair loc ","pair loc operator source == ","pair loc operator source ","pair loc operator ","pairs each "," word_symbol_pair? ","pairs all? "]}," Rubocop Cop HandleExceptions on_resbody":{"type":"method","name":"on_resbody","children":[],"call":[" add_offence ","node loc line ","node loc ","body_node type == ","body_node type "]}," Rubocop Cop FavorUntilOverNegatedWhile on_while":{"type":"method","name":"on_while","children":[],"call":[" check "]}," Rubocop Cop FavorUnlessOverNegatedIf on_if":{"type":"method","name":"on_if","children":[],"call":[" check "]}," Rubocop Cop FavorSprintf on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offence ","node loc expression line ","node loc expression ","node loc ","arg_nodes [] type == ","arg_nodes [] type ","arg_nodes [] ","(sym :str) include? ","receiver_node type ","method_name == "]}," Rubocop Cop FavorPercentR on_regexp":{"type":"method","name":"on_regexp","children":[],"call":[" add_offence ","node loc line ","node loc ","node loc expression source [] scan size > ","node loc expression source [] scan size ","node loc expression source [] scan ","node loc expression source [] ","node loc expression source ","node loc expression ","node loc begin source == ","node loc begin source ","node loc begin "]}," Rubocop Cop IfUnlessModifier on_if":{"type":"method","name":"on_if","children":[],"call":[" add_offence "," error_message ","node loc line ","node loc "," check ","node loc respond_to? "," if_else? "," elsif? "," modifier_if? "," ternary_op? "]}," Rubocop Cop FavorModifier body_length":{"type":"method","name":"body_length","children":[],"call":["body loc expression column + ","body loc expression size ","body loc expression ","body loc ","body loc expression column "]}," Rubocop Cop FavorJoin on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offence ","node loc expression line ","node loc expression ","node loc ","arg_nodes [] type == ","arg_nodes [] type ","arg_nodes [] ","method_name == ","receiver_node type == ","receiver_node type "]}," Rubocop Cop Eval on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offence ","node loc line ","node loc ","method_name == ","receiver nil? "]}," Rubocop Cop EnsureReturn on_ensure":{"type":"method","name":"on_ensure","children":[],"call":[" add_offence ","e loc line ","e loc "," on_node "]}," Rubocop Cop EmptyLiteral inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","node loc line ","node loc ","node == "," on_node "]}," Rubocop Cop EmptyLineBetweenDefs on_def":{"type":"method","name":"on_def","children":[],"call":[" add_offence ","(send\n  (lvar :def_start) :-\n  (ivar :@prev_def_end)) < ","def_start - ","s loc end line ","s loc end ","s loc ","s loc keyword line ","s loc keyword ","(send\n  (lvar :def_start) :-\n  (ivar :@prev_s loc end line )) < ","(send\n  (lvar :s loc keyword line ) :-\n  (ivar :@prev_def_end)) < ","s loc keyword line  - "]}," Rubocop Cop DefWithoutParentheses on_defs":{"type":"method","name":"on_defs","children":[],"call":[" add_offence ","node loc line ","node loc ","args loc begin nil? ","args loc begin ","args loc ","args children size > ","args children size ","args children "]}," Rubocop Cop DefWithoutParentheses on_def":{"type":"method","name":"on_def","children":[],"call":[" add_offence ","node loc line ","node loc ","args loc begin nil? ","args loc begin ","args loc ","args children size > ","args children size ","args children "]}," Rubocop Cop DefWithParentheses on_defs":{"type":"method","name":"on_defs","children":[],"call":[" add_offence ","node loc line ","node loc ","args loc begin ","args loc ","args children == ","args children ","start_line == ","node loc end line ","node loc end ","node loc keyword line ","node loc keyword ","node loc keyword line  == "]}," Rubocop Cop DefWithParentheses on_def":{"type":"method","name":"on_def","children":[],"call":[" add_offence ","node loc line ","node loc ","args loc begin ","args loc ","args children == ","args children ","start_line == ","node loc end line ","node loc end ","node loc keyword line ","node loc keyword ","node loc keyword line  == "]}," Rubocop Cop Cop on_comment":{"type":"method","name":"on_comment","children":[],"call":[]}," Rubocop Cop Cop inspect":{"type":"method","name":"inspect","children":[],"call":[" on_comment ","comments each "," process ","source_buffer read ","source_buffer instance_variable_set ","f write ","File  open ","new_source == ","source_buffer source "," rewrite ","source_buffer instance_variable_get "," autocorrect "," rewrite  == "]}," Rubocop Cop ConstantName on_casgn":{"type":"method","name":"on_casgn","children":[],"call":[" add_offence ","node loc line ","node loc ","const_name !~ ","value type != ","value type "]}," Rubocop Cop ColonMethodCall on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offence ","node loc line ","node loc ","node loc dot source == ","node loc dot source ","node loc dot "]}," Rubocop Cop CollectionMethods on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offence "," sprintf ","PREFERRED_METHODS  [] ","node loc line ","node loc "]}," Rubocop Cop ClassMethods on_defs":{"type":"method","name":"on_defs","children":[],"call":[" add_offence ","node loc line ","node loc ","definee type == ","definee type "]}," Rubocop Cop ClassAndModuleCamelCase check_name":{"type":"method","name":"check_name","children":[],"call":[" add_offence ","node loc line ","node loc ","name =~ ","node loc name source ","node loc name ","node loc name source  =~ ","node loc node loc name source  source ","node loc node loc name source  "]}," Rubocop Cop ClassAndModuleCamelCase on_module":{"type":"method","name":"on_module","children":[],"call":[" check_name "]}," Rubocop Cop ClassAndModuleCamelCase on_class":{"type":"method","name":"on_class","children":[],"call":[" check_name "]}," Rubocop Cop CaseIndentation on_case":{"type":"method","name":"on_case","children":[],"call":[" add_offence ","pos line ","pos column != ","pos column ","when_node loc keyword ","when_node loc ","whens each ","case_node location keyword column ","case_node location keyword ","case_node location ","when_node loc keyword  line ","when_node loc keyword  column != ","when_node loc keyword  column "]}," Rubocop Cop Blocks on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offence ","node loc line ","node loc ","block_begin != ","block_length == ","block_begin == ","block_length > ","node loc begin source ","node loc begin ","Util  block_length ","node loc begin source  != ","Util  block_length  == ","node loc begin source  == ","Util  block_length  > ","Util  Util  block_length  "]}," Rubocop Cop BlockComments on_comment":{"type":"method","name":"on_comment","children":[],"call":[" add_offence ","comment loc line ","comment loc ","comment text start_with? ","comment text "]}," Rubocop Cop AvoidPerlisms on_gvar":{"type":"method","name":"on_gvar","children":[],"call":[" add_offence ","PREFERRED_VARS  [] ","node loc line ","node loc ","global_var to_s ","global_var to_s  to_s "]}," Rubocop Cop AvoidPerlBackrefs on_nth_ref":{"type":"method","name":"on_nth_ref","children":[],"call":[" add_offence ","node loc line ","node loc "]}," Rubocop Cop AvoidGlobalVars check":{"type":"method","name":"check","children":[],"call":[" add_offence ","node loc name line ","node loc name ","node loc ","BUILT_IN_VARS  include? ","global_var to_s "]}," Rubocop Cop AvoidGlobalVars on_gvasgn":{"type":"method","name":"on_gvasgn","children":[],"call":[" check "]}," Rubocop Cop AvoidGlobalVars on_gvar":{"type":"method","name":"on_gvar","children":[],"call":[" check "]}," Rubocop Cop AvoidFor on_for":{"type":"method","name":"on_for","children":[],"call":[" add_offence ","node loc keyword line ","node loc keyword ","node loc "]}," Rubocop Cop AvoidClassVars on_cvasgn":{"type":"method","name":"on_cvasgn","children":[],"call":[" add_offence "," sprintf ","node loc name line ","node loc name ","node loc "]}," Rubocop Cop AsciiComments on_comment":{"type":"method","name":"on_comment","children":[],"call":[" add_offence ","c loc line ","c loc ","c text =~ ","c text "]}," Rubocop Cop AndOr on_and":{"type":"method","name":"on_and","children":[],"call":[" add_offence "," sprintf ","OPS  [] ","node loc operator line ","node loc operator ","node loc ","op == ","node type to_s ","node type ","node loc operator source "," process_logical_op ","node loc node loc operator source erator line ","node loc node loc operator source erator ","node loc operator source  == ","node loc node loc operator source erator source "," process_logical_node loc operator source  "]}," Rubocop Cop AlignParameters on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offence ","cur_arg_col != ","cur_arg_line != ","arg loc expression column ","arg loc expression ","arg loc ","arg loc expression line ","args each ","args first loc expression line ","args first loc expression ","args first loc ","args first ","args first loc expression column ","args size > ","args size ","method != ","arg loc expression column  != ","arg loc expression line  != "]}," Rubocop Cop Alias on_alias":{"type":"method","name":"on_alias","children":[],"call":[" add_offence ","node loc keyword line ","node loc keyword ","node loc "]}," Rubocop Cop AccessControl inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","source [] empty? ","source [] ","send_line - ","send_node loc line ","send_node loc ","send_start_col - != ","send_start_col - ","send_node loc expression column ","send_node loc expression ","(const nil :PRIVATE_NODE) include? "," on_node ","class_node children compact each ","class_node children compact ","class_node children ","class_node loc expression column ","class_node loc expression ","class_node loc ","send_node loc line  - ","send_node loc expression column  - != ","send_node loc expression column  - "]}," Rubocop CLI parse":{"type":"method","name":"parse","children":[],"call":[]}," Rubocop Cop StringLiterals on_str":{"type":"method","name":"on_str","children":[],"call":[" add_offence ","node loc line ","node loc ","node loc begin source == ","node loc begin source ","node loc begin ","text !~ ","node loc respond_to? "]}," Rubocop Cop RescueModifier on_rescue":{"type":"method","name":"on_rescue","children":[],"call":[" add_offence ","node loc line ","node loc "]}," Rubocop Cop Proc on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offence ","block_method loc line ","block_method loc ","block_method == "]}," Rubocop Cop ParenthesesAroundCondition process_control_op":{"type":"method","name":"process_control_op","children":[],"call":[" add_offence ","cond loc line ","cond loc ","cond_source end_with? ","cond_source start_with? ","cond loc expression source ","cond loc expression ","cond loc expression source  end_with? ","cond loc expression source  start_with? "]}," Rubocop Cop ParenthesesAroundCondition on_until":{"type":"method","name":"on_until","children":[],"call":[" process_control_op "]}," Rubocop Cop ParenthesesAroundCondition on_while":{"type":"method","name":"on_while","children":[],"call":[" process_control_op "]}," Rubocop Cop ParenthesesAroundCondition on_if":{"type":"method","name":"on_if","children":[],"call":[" process_control_op "]}," Rubocop Cop Lambda lambda_length":{"type":"method","name":"lambda_length","children":[],"call":["end_line - ","block_node loc end line ","block_node loc end ","block_node loc ","block_node loc begin line ","block_node loc begin ","block_node loc end line  - "]}," Rubocop Cop Lambda on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offence ","block_method loc line ","block_method loc ","lambda_length > ","selector == ","lambda_length == ","selector != "," lambda_length ","block_method loc selector source ","block_method loc selector ","block_method == "," lambda_length  > ","block_method loc selector source  == "," lambda_length  == ","block_method loc selector source  != ","  lambda_length  ","block_method loc block_method loc selector source  source ","block_method loc block_method loc selector source  "]}," Rubocop Cop EmptyLiteral on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offence ","node loc line ","node loc "]}," Rubocop Cop AndOr process_logical_op":{"type":"method","name":"process_logical_op","children":[],"call":[" add_offence "," sprintf ","OPS  [] ","node loc operator line ","node loc operator ","node loc ","op == ","node type to_s ","node type ","node loc operator source ","node loc node loc operator source erator line ","node loc node loc operator source erator ","node loc operator source  == ","node loc node loc operator source erator source "]}," Rubocop Cop AndOr on_or":{"type":"method","name":"on_or","children":[],"call":[" process_logical_op "]}," Rubocop Cop IfUnlessModifier if_else?":{"type":"method","name":"if_else?","children":[],"call":["node loc else ","node loc ","node loc respond_to? "]}," Rubocop Cop IfUnlessModifier elsif?":{"type":"method","name":"elsif?","children":[],"call":["node loc keyword source == ","node loc keyword source ","node loc keyword ","node loc "]}," Rubocop Cop IfUnlessModifier modifier_if?":{"type":"method","name":"modifier_if?","children":[],"call":["node loc end nil? ","node loc end ","node loc "]}," Rubocop Cop IfUnlessModifier ternary_op?":{"type":"method","name":"ternary_op?","children":[],"call":["node loc respond_to? ","node loc "]}," Rubocop Cop BlockNesting message":{"type":"method","name":"message","children":[],"call":[]}," Rubocop Cop BlockNesting check_nesting_level":{"type":"method","name":"check_nesting_level","children":[],"call":[" check_nesting_level ","child is_a? ","node children each ","node children "," add_offence "," message ","node location line ","node location ","current_level == ","max + ","NESTING_BLOCKS  include? ","node type "]}," Rubocop Cop BlockNesting inspect":{"type":"method","name":"inspect","children":[],"call":[" check_nesting_level ","BlockNesting  config [] ","BlockNesting  config "]}," RuboCop NodePattern descend":{"type":"method","name":"descend","children":[],"call":[]}," RuboCop NodePattern Compiler compile_descend":{"type":"method","name":"compile_descend","children":[],"call":["(dstr\n  (str \"RuboCop::NodePattern.descend(\")\n  (begin\n    (const nil :CUR_ELEMENT))\n  (str \").\")) join "," with_context "," compile_expr "," with_temp_variables "]}," RuboCop NodePattern Compiler unify_in_union":{"type":"method","name":"unify_in_union","children":[],"call":[" forbid_unification ","union - ","new_unify_intersection | ","new_unify_intersection nil? ","@unify keys - ","unify_before keys ","@unify keys ","unify_before dup ","enum each ","@unify dup "," to_enum "," __method__ "," block_given? ","new_unify_intersection |  - ","@unify keys - _intersection | ","@unify keys - _intersection nil? ","unify_before dup  keys - ","@unify dup  keys ","unify_before dup  keys ","@unify dup  dup ","unify_before dup  dup "]}," RuboCop NodePattern Compiler forbid_unification":{"type":"method","name":"forbid_unification","children":[],"call":["@unify []= ","names each "]}," RuboCop NodePattern Compiler access_unify":{"type":"method","name":"access_unify","children":[],"call":[" fail_due_to ","var == ","@unify [] ","@unify []  == "]}," RuboCop Formatter JUnitFormatter add_failure_to":{"type":"method","name":"add_failure_to","children":[],"call":["failure add_text ","offense location to_s ","offense location ","failure attributes []= ","offense message ","failure attributes ","REXML Element  new tap ","REXML Element  new ","offenses each "]}," RuboCop Formatter JUnitFormatter finished":{"type":"method","name":"finished","children":[],"call":["@document write "," output ","@testsuite add_attributes "]}," RuboCop Formatter JUnitFormatter file_finished":{"type":"method","name":"file_finished","children":[],"call":[" add_failure_to ","testcase attributes []= ","testcase attributes ","file gsub gsub tr ","file gsub gsub ","Dir  pwd ","file gsub ","REXML Element  new tap ","REXML Element  new ","offenses group_by each ","offenses group_by ","cop cop_name ","offense cop_name == ","offense cop_name ","offenses select "," classname_attribute_value ","Cop Cop  all each ","Cop Cop  all "," relevant_for_output? "," options "," offenses_for_cop ","Cop Registry  all each ","Cop Registry  all "," add_testcase_element_to_testsuite_element ","target_offenses count "," offenses_for_cop  count "]}," RuboCop Formatter JUnitFormatter initialize":{"type":"method","name":"initialize","children":[],"call":["element add_attributes ","testsuite tap ","REXML Element  new ","document << ","REXML XMLDecl  new ","REXML Document  new tap ","REXML Document  new "," reset_count ","REXML Element  new  tap "]}," RuboCop Cop Style HashTransformValues new_method_name":{"type":"method","name":"new_method_name","children":[],"call":[]}," RuboCop Cop Style HashTransformValues extract_captures":{"type":"method","name":"extract_captures","children":[],"call":["Captures  new "]}," RuboCop Cop Style HashTransformKeys new_method_name":{"type":"method","name":"new_method_name","children":[],"call":[]}," RuboCop Cop Style HashTransformKeys extract_captures":{"type":"method","name":"extract_captures","children":[],"call":["Captures  new "]}," RuboCop Cop Style HashEachMethods kv_range":{"type":"method","name":"kv_range","children":[],"call":["outer_node receiver loc selector join ","outer_node loc selector ","outer_node loc ","outer_node receiver loc selector ","outer_node receiver loc ","outer_node receiver "]}," RuboCop Cop Style HashEachMethods correct_args":{"type":"method","name":"correct_args","children":[],"call":["corrector replace ","args source_range "," used? ","args children find ","args children ","node parent arguments ","node parent ","node parent arguments  source_range ","node parent arguments  children find ","node parent arguments  children "]}," RuboCop Cop Style HashEachMethods correct_key_value_each":{"type":"method","name":"correct_key_value_each","children":[],"call":["corrector replace ","node loc expression ","node loc ","receiver source + ","receiver source "," correct_implicit ","node receiver method_name to_s chop ","node receiver method_name to_s ","node receiver method_name ","node receiver ","node receiver receiver ","node receiver receiver  source + ","node receiver receiver  source ","node node receiver receiver  method_name to_s chop ","node node receiver receiver  method_name to_s ","node node receiver receiver  method_name ","node node receiver receiver  ","node node receiver receiver  node receiver receiver  "]}," RuboCop Cop Style HashEachMethods correct_implicit":{"type":"method","name":"correct_implicit","children":[],"call":[" correct_args ","corrector replace ","node loc expression ","node loc "]}," RuboCop Cop Style HashEachMethods used?":{"type":"method","name":"used?","children":[],"call":["(send\n  (ivar :@block_args) :find) used? ","var declaration_node loc == ","arg loc ","var declaration_node loc ","var declaration_node ","@block_args find "]}," RuboCop Cop Style HashEachMethods check_argument":{"type":"method","name":"check_argument","children":[],"call":["(or-asgn\n  (ivasgn :@block_args)\n  (array)) push ","variable block_argument? "]}," RuboCop Cop Style HashEachMethods register_kv_offense":{"type":"method","name":"register_kv_offense","children":[],"call":[" add_offense "," kv_range "," format ","method [] "," message "," kv_each ","target receiver receiver ","target receiver "," correct_key_value_each "," allowed_receiver? "," format_message "]}," RuboCop Cop Style HashEachMethods autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" correct_key_value_each "," lambda "]}," RuboCop Cop Style HashEachMethods on_block":{"type":"method","name":"on_block","children":[],"call":[" register_kv_offense "," kv_each "]}," RuboCop Cop Style FrozenStringLiteralComment enable_comment":{"type":"method","name":"enable_comment","children":[],"call":["corrector replace "," line_range ","comment line "," frozen_string_literal_comment "," processed_source "," frozen_string_literal_comment  line "," frozen_string_literal_ frozen_string_literal_comment  "]}," RuboCop Cop Style FrozenStringLiteralComment disabled_offense":{"type":"method","name":"disabled_offense","children":[],"call":[" add_offense ","frozen_string_literal_comment pos "," frozen_string_literal_comment "," enable_comment "," frozen_string_literal_comment  pos ","  frozen_string_literal_comment  "]}," RuboCop Cop Style FrozenStringLiteralComment missing_true_offense":{"type":"method","name":"missing_true_offense","children":[],"call":[" add_offense "," source_range ","processed_source buffer "," last_special_comment "," insert_comment "," source_ source_range  ","  last_special_comment  "]}," RuboCop Cop Style FrozenStringLiteralComment missing_offense":{"type":"method","name":"missing_offense","children":[],"call":[" add_offense "," source_range ","processed_source buffer "," last_special_comment "," insert_comment "," source_ source_range  ","  last_special_comment  "]}," RuboCop Cop Style FrozenStringLiteralComment ensure_enabled_comment":{"type":"method","name":"ensure_enabled_comment","children":[],"call":[" missing_true_offense "," disabled_offense "," frozen_string_literals_enabled? "," frozen_string_literal_specified? "]}," RuboCop Cop Style FrozenStringLiteralComment ensure_comment":{"type":"method","name":"ensure_comment","children":[],"call":[" missing_offense "," frozen_string_literal_comment_exists? "]}," RuboCop Cop Style FrozenStringLiteralComment ensure_no_comment":{"type":"method","name":"ensure_no_comment","children":[],"call":[" unnecessary_comment_offense "," frozen_string_literal_comment_exists? "]}," RuboCop Cop Style BlockDelimiters braces_required_methods":{"type":"method","name":"braces_required_methods","children":[],"call":[" cop_config fetch "," cop_config "]}," RuboCop Cop Style BlockDelimiters braces_required_method?":{"type":"method","name":"braces_required_method?","children":[],"call":[" braces_required_methods include? ","method_name to_s "," braces_required_methods "]}," RuboCop Cop Style BlockDelimiters special_method_proper_block_style?":{"type":"method","name":"special_method_proper_block_style?","children":[],"call":["node braces? "," braces_required_method? "," ignored_method? ","node method_name "," matches_allowed_pattern? "," allowed_method? ","node node method_name  "]}," RuboCop Cop Style BlockDelimiters special_method?":{"type":"method","name":"special_method?","children":[],"call":[" braces_required_method? "," ignored_method? "," matches_allowed_pattern? "," allowed_method? "]}," RuboCop Cop Style BlockDelimiters braces_required_message":{"type":"method","name":"braces_required_message","children":[],"call":[" format ","node method_name to_s ","node method_name "]}," RuboCop Cop HashTransformMethod set_new_body_expression":{"type":"method","name":"set_new_body_expression","children":[],"call":["corrector replace ","transforming_body_expr loc expression source ","transforming_body_expr loc expression ","transforming_body_expr loc "," block_node body loc expression "," block_node body loc "," block_node body "," block_node ","transforming_body_expr braces? ! ","transforming_body_expr braces? ","transforming_body_expr hash_type? ","transforming_body_expr source "]}," RuboCop Cop HashTransformMethod set_new_arg_name":{"type":"method","name":"set_new_arg_name","children":[],"call":["corrector replace "," block_node arguments loc expression "," block_node arguments loc "," block_node arguments "," block_node "," block_node arguments source_range "]}," RuboCop Cop HashTransformMethod set_new_method_name":{"type":"method","name":"set_new_method_name","children":[],"call":["corrector replace ","range begin join ","range begin "," block_node send_node loc end "," block_node send_node loc "," block_node send_node "," block_node "," block_node send_node loc selector ","range begin join  begin join "," block_node send_node loc selector  begin join ","range begin join  begin "," block_node send_node loc selector  begin "]}," RuboCop Cop HashTransformMethod strip_prefix_and_suffix":{"type":"method","name":"strip_prefix_and_suffix","children":[],"call":["corrector remove_trailing "," trailing ","corrector remove_leading "," leading ","node loc expression ","node loc ","node source_range ","node loc node loc expression  ","node loc node source_range  "]}," RuboCop Cop HashTransformMethod from_map_to_h":{"type":"method","name":"from_map_to_h","children":[],"call":[]}," RuboCop Cop HashTransformMethod from_hash_brackets_map":{"type":"method","name":"from_hash_brackets_map","children":[],"call":[]}," RuboCop Cop HashTransformMethod from_each_with_object":{"type":"method","name":"from_each_with_object","children":[],"call":[]}," RuboCop Cop HashTransformMethod transformation_uses_both_args?":{"type":"method","name":"transformation_uses_both_args?","children":[],"call":[" transforming_body_expr descendants include? "," unchanged_body_expr "," transforming_body_expr descendants "," transforming_body_expr "]}," RuboCop Cop HashTransformMethod noop_transformation?":{"type":"method","name":"noop_transformation?","children":[],"call":[" transforming_body_expr children == "," transformed_argname "," transforming_body_expr children "," transforming_body_expr "," transforming_body_expr lvar_type? "]}," RuboCop Cop HashTransformMethod execute_correction":{"type":"method","name":"execute_correction","children":[],"call":["correction set_new_body_expression ","captures transforming_body_expr ","correction set_new_arg_name ","captures transformed_argname "," extract_captures ","correction match ","correction set_new_method_name "," new_method_name ","correction strip_prefix_and_suffix "," extract_captures  transforming_body_expr "," extract_captures  transformed_argname "," extract_ extract_captures  "]}," RuboCop Cop HashTransformMethod prepare_correction":{"type":"method","name":"prepare_correction","children":[],"call":[" raise ","Autocorrection  from_map_to_h "," on_bad_map_to_h ","Autocorrection  from_hash_brackets_map "," on_bad_hash_brackets_map ","Autocorrection  from_each_with_object "," on_bad_each_with_object ","Autocorrection  from_to_h "," on_bad_to_h "]}," RuboCop Cop HashTransformMethod new_method_name":{"type":"method","name":"new_method_name","children":[],"call":[" raise "]}," RuboCop Cop HashTransformMethod extract_captures":{"type":"method","name":"extract_captures","children":[],"call":[" raise "]}," RuboCop Cop HashTransformMethod handle_possible_offense":{"type":"method","name":"handle_possible_offense","children":[],"call":[" add_offense "," new_method_name ","captures transformation_uses_both_args? ","captures noop_transformation? "," extract_captures "," puts ","node class "," execute_correction "," prepare_correction ","captures use_transformed_argname? "," extract_captures  transformation_uses_both_args? "," extract_captures  noop_transformation? "," extract_ extract_captures  "," execute_ prepare_correction  "," prepare_ prepare_correction  "," extract_captures  use_transformed_argname? "]}," RuboCop Cop HashTransformMethod on_bad_map_to_h":{"type":"method","name":"on_bad_map_to_h","children":[],"call":[" raise "]}," RuboCop Cop HashTransformMethod on_bad_hash_brackets_map":{"type":"method","name":"on_bad_hash_brackets_map","children":[],"call":[" raise "]}," RuboCop Cop HashTransformMethod on_bad_each_with_object":{"type":"method","name":"on_bad_each_with_object","children":[],"call":[" raise "]}," RuboCop Cop HashTransformMethod autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" execute_correction "," prepare_correction "," lambda "," execute_ prepare_correction  "," prepare_ prepare_correction  "]}," RuboCop Cop HashTransformMethod on_csend":{"type":"method","name":"on_csend","children":[],"call":[" handle_possible_offense "," on_bad_map_to_h "]}," RuboCop Cop HashTransformMethod on_send":{"type":"method","name":"on_send","children":[],"call":[" handle_possible_offense "," on_bad_map_to_h "," on_bad_hash_brackets_map "]}," RuboCop Cop HashTransformMethod on_block":{"type":"method","name":"on_block","children":[],"call":[" handle_possible_offense "," on_bad_each_with_object "," on_bad_to_h "," target_ruby_version < "," target_ruby_version "]}," RuboCop Cop FrozenStringLiteral frozen_string_literal_specified?":{"type":"method","name":"frozen_string_literal_specified?","children":[],"call":["MagicComment  parse frozen_string_literal_specified? ","MagicComment  parse "," leading_comment_lines any? "," leading_comment_lines "]}," RuboCop Cop ConfigurableEnforcedStyle style_configured?":{"type":"method","name":"style_configured?","children":[],"call":[" cop_config key? "," style_parameter_name "," cop_config "]}," RuboCop Cop Migration DepartmentName qualified_legacy_cop_name":{"type":"method","name":"qualified_legacy_cop_name","children":[],"call":["legacy_cop_name split [] == ","legacy_cop_name split [] ","legacy_cop_name split ","legacy_cop_names detect ","RuboCop ConfigObsoletion OBSOLETE_COPS  keys ","RuboCop ConfigObsoletion  legacy_cop_names ","RuboCop ConfigObsoletion OBSOLETE_COPS  keys  detect ","RuboCop ConfigObsoletion  legacy_cop_names  detect ","RuboCop ConfigObsoletion  RuboCop ConfigObsoletion OBSOLETE_COPS  keys  ","RuboCop ConfigObsoletion  RuboCop ConfigObsoletion  legacy_cop_names  "]}," RuboCop Cop Layout SpaceBeforeFirstArg no_space_between_method_name_and_first_argument?":{"type":"method","name":"no_space_between_method_name_and_first_argument?","children":[],"call":["end_pos_of_method_name == ","node first_argument source_range begin_pos ","node first_argument source_range ","node first_argument ","node loc selector end_pos ","node loc selector ","node loc ","node loc selector end_pos  == "]}," RuboCop Cop Layout LineLength breakable_block_range":{"type":"method","name":"breakable_block_range","children":[],"call":["block_node loc begin ","block_node loc ","block_node arguments loc end ","block_node arguments loc ","block_node arguments ","block_node arguments? ","block_node lambda? ! ","block_node lambda? ","block_node loc begin adjust ","block_node braces? "]}," RuboCop Cop Layout LineLength check_for_breakable_block":{"type":"method","name":"check_for_breakable_block","children":[],"call":[" breakable_range_by_line_index []= "," range_between ","pos + "," breakable_range_by_line_index ","range begin_pos + ","range begin_pos "," breakable_block_range ","block_node loc line - ","block_node loc line ","block_node loc ","block_node single_line? "," breakable_ breakable_block_range _by_line_index []= "," breakable_range_by_block_node loc line -  []= ","  breakable_block_range _between ","range begin_pos +  + "," breakable_ breakable_block_range _by_line_index "," breakable_range_by_block_node loc line -  ","range begin_range begin_pos +  + "," breakable_block_range  begin_pos + ","range begin_range begin_pos +  "," breakable_block_range  begin_pos "," breakable_block_ breakable_block_range  "]}," RuboCop Cop Layout LineLength on_block":{"type":"method","name":"on_block","children":[],"call":[" check_for_breakable_block "]}," RuboCop Cop Layout LeadingCommentSpace gemfile_ruby_comment?":{"type":"method","name":"gemfile_ruby_comment?","children":[],"call":[" ruby_comment_in_gemfile? "," allow_gemfile_ruby_comment? "]}," RuboCop Cop Layout LeadingCommentSpace ruby_comment_in_gemfile?":{"type":"method","name":"ruby_comment_in_gemfile?","children":[],"call":["comment text start_with? ","comment text "," gemfile? "]}," RuboCop Cop Layout LeadingCommentSpace gemfile?":{"type":"method","name":"gemfile?","children":[],"call":["File  basename eql? ","File  basename "," processed_source file_path "," processed_source "]}," RuboCop Cop Layout LeadingCommentSpace allow_gemfile_ruby_comment?":{"type":"method","name":"allow_gemfile_ruby_comment?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop CommentConfig directive_on_comment_line?":{"type":"method","name":"directive_on_comment_line?","children":[],"call":["comment text [] match ","comment text [] ","comment text ","comment text [] match? "]}," RuboCop AST Traversal on_numblock":{"type":"method","name":"on_numblock","children":[],"call":[" send ","child type ","children [] ","node children ","children []  type ","children [] ren [] ","node children  [] ","node children [] ren ","node node children  "]}," RuboCop Cop Style RedundantCondition correct_ternary":{"type":"method","name":"correct_ternary","children":[],"call":["corrector insert_after ","node else_branch loc expression ","node else_branch loc ","node else_branch ","corrector insert_before ","node else_branch range_type? ","corrector replace "," range_of_offense ","corrector wrap "]}," RuboCop Cop Style InverseMethods remove_end_parenthesis":{"type":"method","name":"remove_end_parenthesis","children":[],"call":["corrector remove "," end_parentheses ","method_call parent begin_type? ","method_call parent ","EQUALITY_METHODS  include? "]}," RuboCop Config department_of":{"type":"method","name":"department_of","children":[],"call":[" [] ","cop_name nil? ","qualified_cop_name split ","cop_department join ","cop_department empty? "]}," RuboCop Config pending_cops":{"type":"method","name":"pending_cops","children":[],"call":["pending_cops << ","CopConfig  new ","cop_metadata [] == ","cop_metadata [] "," [] ","department [] == ","department [] "," department_of "," keys each_with_object "," keys "," []  [] == "," []  [] "," department_of  [] == "," department_of  [] ","  department_of _of "]}," RuboCop Formatter JUnitFormatter classname_attribute_value":{"type":"method","name":"classname_attribute_value","children":[],"call":["file gsub gsub tr ","file gsub gsub ","Dir  pwd ","file gsub ","@classname_attribute_value_cache [] ","hash []= ","key gsub gsub tr ","key gsub gsub ","key gsub ","Hash  new ","key delete_suffix gsub tr ","key delete_suffix gsub ","key delete_suffix "]}," RuboCop Cop Style TrailingCommaInBlockArgs argument_tokens":{"type":"method","name":"argument_tokens","children":[],"call":[" tokens [] ","end_pos - ","begin_pos + "," tokens "," tokens index ","pipes map ","token type == ","token type "," tokens select ","tokens [] ","tokens index ","tokens select "," processed_source tokens_within "," processed_source ","  processed_source tokens_within  [] ","  processed_source tokens_within  ","  processed_source tokens_within  index ","  processed_source tokens_within  select "," processed_source tokens_within  [] "," processed_source tokens_within  index "," processed_source tokens_within  select "," processed_source  processed_source tokens_within _within "]}," RuboCop Cop Style TrailingCommaInBlockArgs last_comma":{"type":"method","name":"last_comma","children":[],"call":[" argument_tokens last "," argument_tokens "]}," RuboCop Cop Style TrailingCommaInBlockArgs trailing_comma?":{"type":"method","name":"trailing_comma?","children":[],"call":[" argument_tokens last comma? "," argument_tokens last "," argument_tokens "]}," RuboCop Cop Style TrailingCommaInBlockArgs arg_count":{"type":"method","name":"arg_count","children":[],"call":["node arguments each_descendant to_a size ","node arguments each_descendant to_a ","node arguments each_descendant ","node arguments "]}," RuboCop Cop Style TrailingCommaInBlockArgs useless_trailing_comma?":{"type":"method","name":"useless_trailing_comma?","children":[],"call":[" trailing_comma? "," arg_count > "," arg_count "]}," RuboCop Cop Style TrailingCommaInBlockArgs autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," last_comma pos "," last_comma "," lambda "]}," RuboCop Cop Style TrailingCommaInBlockArgs on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," last_comma pos "," last_comma "," useless_trailing_comma? ","node send_node lambda_literal? ","node send_node ","corrector replace "]}," RuboCop Cop Style ModuleFunction check_forbidden":{"type":"method","name":"check_forbidden","children":[],"call":[" module_function_node? "," extend_self_node? ","nodes each "]}," RuboCop Cop Style ModuleFunction check_extend_self":{"type":"method","name":"check_extend_self","children":[],"call":[" module_function_node? ","nodes each "]}," RuboCop Cop Style ModuleFunction check_module_function":{"type":"method","name":"check_module_function","children":[],"call":["private_directive ! "," extend_self_node? ","nodes each "," private_directive? ","nodes any? "]}," RuboCop Cop Style EndBlock autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node loc keyword ","node loc "," lambda "]}," RuboCop Cop Style Documentation constant_declaration?":{"type":"method","name":"constant_declaration?","children":[],"call":[" constant_visibility_declaration? "," constant_definition? "]}," RuboCop Cop Naming MethodName range_position":{"type":"method","name":"range_position","children":[],"call":[" range_between ","node loc expression end_pos ","node loc expression ","node loc ","node loc selector end_pos + ","node loc selector end_pos ","node loc selector ","node source_range end_pos ","node source_range "]}," RuboCop Cop Naming MethodName attr_name":{"type":"method","name":"attr_name","children":[],"call":[" str_name "," sym_name "]}," RuboCop Cop Naming MethodName on_send":{"type":"method","name":"on_send","children":[],"call":[" check_name "," range_position "," matches_ignored_pattern? ","name ! "," attr_name ","attrs last each ","attrs last "," attr? ","node attribute_accessor? "," matches_allowed_pattern? "," check_ attr_name  "," attr_name  ! "," attr_ attr_name  "," attr?  last each ","node attribute_accessor?  last each "," attr?  last ","node attribute_accessor?  last "]}," RuboCop Cop EndKeywordAlignment accept_end_kw_alignment?":{"type":"method","name":"accept_end_kw_alignment?","children":[],"call":[" processed_source lines [] !~ "," processed_source lines [] ","end_loc line - ","end_loc line "," processed_source lines "," processed_source ","end_loc nil? ","(str \"\\\\A[ \\\\t]*end\") match? ! ","(str \"\\\\A[ \\\\t]*end\") match? "]}," RuboCop Cop Migration DepartmentName contain_plain_comment?":{"type":"method","name":"contain_plain_comment?","children":[],"call":["name == "]}," RuboCop Cop Migration DepartmentName disable_comment_offset":{"type":"method","name":"disable_comment_offset","children":[],"call":["Regexp  last_match length ","Regexp  last_match "]}," RuboCop Cop Lint UnusedMethodArgument ignored_method?":{"type":"method","name":"ignored_method?","children":[],"call":[" not_implemented? "," cop_config [] "," cop_config ","body nil? "]}," RuboCop Cop Lint StructNewOverride on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format ","member_name to_s ","member_name inspect ","STRUCT_METHOD_NAMES  include? ","member_name to_sym ","arg value ","STRUCT_MEMBER_NAME_TYPES  include? ","arg type ","arg str_type? ","index zero? ","node arguments each_with_index ","node arguments "," struct_new ","arg value  to_s ","arg value  inspect ","arg value  to_sym "]}," RuboCop Cop Lint RaiseException raise_exception?":{"type":"method","name":"raise_exception?","children":[],"call":[" exception_new_with_message? "," exception? "]}," RuboCop Cop Lint RaiseException on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," raise_exception? "," exception_new_with_message? "," check "," exception? "]}," RuboCop Cop Lint BooleanSymbol autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node loc expression ","node loc ","node source ","corrector remove ","parent loc operator ","parent loc ","node parent ","node source delete "," lambda ","node equal? ","parent children [] ","parent children ","node parent  loc operator ","node parent  loc ","node node parent  ","node parent  children [] ","node parent  children "]}," RuboCop Cop Layout ElseAlignment on_case_match":{"type":"method","name":"on_case_match","children":[],"call":[" check_alignment ","node loc else ","node loc ","node in_pattern_branches last loc keyword ","node in_pattern_branches last loc ","node in_pattern_branches last ","node in_pattern_branches ","node else? "]}," RuboCop Cop Layout ArrayAlignment target_method_lineno":{"type":"method","name":"target_method_lineno","children":[],"call":["node loc line ","node loc ","node parent loc line ","node parent loc ","node parent ","node bracketed? "]}," RuboCop Cop Layout ArrayAlignment base_column":{"type":"method","name":"base_column","children":[],"call":[" display_column ","args first source_range ","args first ","indentation_of_line + "," configured_indentation_width ","(str \"\\\\S.*\") match begin ","(str \"\\\\S.*\") match ","node source_range source_buffer source_line ","node source_range source_buffer ","node source_range "," target_method_lineno "," fixed_indentation? ","(str \"\\S.*\") match begin  + ","indentation_of_node source_range source_buffer source_line  + ","node source_range source_buffer source_node source_range source_buffer source_line  "," target_method_node source_range source_buffer source_line no "," target_method_ target_method_lineno  "]}," RuboCop Cop Layout ArrayAlignment fixed_indentation?":{"type":"method","name":"fixed_indentation?","children":[],"call":[" cop_config [] == "," cop_config [] "," cop_config "]}," RuboCop Cop Layout ArrayAlignment message":{"type":"method","name":"message","children":[],"call":[" fixed_indentation? "]}," RuboCop AST Node guard_clause?":{"type":"method","name":"guard_clause?","children":[],"call":["node match_guard_clause? "," rhs "," or_type? "," and_type? "," rhs  match_guard_clause? "]}," RuboCop AST CaseMatchNode else?":{"type":"method","name":"else?","children":[],"call":[" loc else nil? ! "," loc else nil? "," loc else "," loc "]}," RuboCop AST CaseMatchNode else_branch":{"type":"method","name":"else_branch","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST CaseMatchNode in_pattern_branches":{"type":"method","name":"in_pattern_branches","children":[],"call":[" node_parts [] "," node_parts "]}," RuboCop AST CaseMatchNode each_in_pattern":{"type":"method","name":"each_in_pattern","children":[],"call":[" in_pattern_branches each "," in_pattern_branches "," in_pattern_branches to_enum "," __method__ "," block_given? "]}," RuboCop AST CaseMatchNode keyword":{"type":"method","name":"keyword","children":[],"call":[]}," RuboCop Cop Style IfUnlessModifier another_statement_on_same_line?":{"type":"method","name":"another_statement_on_same_line?","children":[],"call":["sibling source_range first_line == ","sibling source_range first_line ","sibling source_range ","node children [] ","index + ","node children ","node parent ","node sibling_index ","node begin_type? ! ","node begin_type? ","node source_range last_line ","node source_range ","node children []  source_range first_line == ","node children []  source_range first_line ","node children []  source_range ","node parent  children [] ","node sibling_index  + ","node parent  children ","node parent  parent ","node node children [] _index ","node parent  sibling_index ","node sibling_node sibling_index  ","node parent  begin_type? ! ","node parent  begin_type? ","node parent  source_range last_line ","node parent  source_range "]}," RuboCop Cop Style IfUnlessModifier too_long_due_to_modifier?":{"type":"method","name":"too_long_due_to_modifier?","children":[],"call":[" another_statement_on_same_line? ! "," another_statement_on_same_line? "," too_long_single_line? ","node modifier_form? "]}," RuboCop Cop Style ExponentialNotation message":{"type":"method","name":"message","children":[],"call":[" style ","MESSAGES  [] "]}," RuboCop Cop Style ExponentialNotation offense?":{"type":"method","name":"offense?","children":[],"call":[" integral ! "," integral "," engineering? ! "," engineering? "," scientific? ! "," scientific? "," style ","node source [] ","node source "]}," RuboCop Cop Style ExponentialNotation integral":{"type":"method","name":"integral","children":[],"call":["mantissa =~ ","node source split ","node source ","(str \"^-?[1-9](\\\\d*[1-9])?$\") match? "]}," RuboCop Cop Style ExponentialNotation engineering?":{"type":"method","name":"engineering?","children":[],"call":["(str \"^-?0.0\") match? ","(str \"^-?0\\\\d\") match? ","(str \"^-?\\\\d{4}\") match? ","(send\n  (send\n    (lvar :exponent) :to_i) :%\n  (int 3)) zero? ","exponent to_i % ","exponent to_i ","(str \"^-?\\\\d+$\") match? ","node source split ","node source "]}," RuboCop Cop Style ExponentialNotation scientific?":{"type":"method","name":"scientific?","children":[],"call":["mantissa =~ ","node source split ","node source ","(str \"^-?[1-9](\\\\.\\\\d*[0-9])?$\") match? "]}," RuboCop Cop Style ExponentialNotation on_float":{"type":"method","name":"on_float","children":[],"call":[" add_offense "," offense? "]}," RuboCop Cop Style DisableCopsWithinSourceCodeDirective rubocop_directive_comment?":{"type":"method","name":"rubocop_directive_comment?","children":[],"call":["comment text =~ ","comment text ","CommentConfig COMMENT_DIRECTIVE_REGEXP  match? "]}," RuboCop Cop Style DisableCopsWithinSourceCodeDirective autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," lambda "]}," RuboCop Cop Style DisableCopsWithinSourceCodeDirective investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense "," rubocop_directive_comment? ","processed_source comments each ","processed_source comments "]}," RuboCop Cop Style CaseEquality const?":{"type":"method","name":"const?","children":[],"call":["node const_type? ! ","node const_type? "," cop_config fetch "," cop_config ","(lvar :node) ! "]}," RuboCop Cop Registry enabled_pending_cop?":{"type":"method","name":"enabled_pending_cop?","children":[],"call":["config enabled_new_cops? ","@options [] ","cop_cfg fetch == ","cop_cfg fetch "]}," RuboCop Cop Lint RaiseException allow_implicit_namespaces":{"type":"method","name":"allow_implicit_namespaces","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Lint RaiseException implicit_namespace?":{"type":"method","name":"implicit_namespace?","children":[],"call":[" implicit_namespace? "," allow_implicit_namespaces include? "," allow_implicit_namespaces ","parent identifier source ","parent identifier ","parent module_type? ","node parent "," implicit_parent identifier source ? "," allow_implicit_parent identifier source s include? "," allow_implicit_parent identifier source s ","node parent  identifier source ","node parent  identifier ","node parent  module_type? ","node node parent  "]}," RuboCop Cop Lint RaiseException check":{"type":"method","name":"check","children":[],"call":[" add_offense "," implicit_namespace? ","cbase nil? "," lambda ","corrector replace ","exception_class children first ","exception_class children "]}," RuboCop Cop Layout SpaceAroundMethodCallOperator right_token_for_auto_correction":{"type":"method","name":"right_token_for_auto_correction","children":[],"call":[" valid_right_token? ","right_token comment? ! ","right_token comment? "," next_token "," valid_ next_token ? "," next_token  comment? ! "," next_token  comment? "]}," RuboCop Cop Layout SpaceAroundMethodCallOperator left_token_for_auto_correction":{"type":"method","name":"left_token_for_auto_correction","children":[],"call":[" valid_left_token? ","node const_type? "," previous_token "," valid_ previous_token ? "]}," RuboCop Cop Layout SpaceAroundMethodCallOperator valid_right_token?":{"type":"method","name":"valid_right_token?","children":[],"call":["right line == ","operator line ","right line "]}," RuboCop Cop Layout SpaceAroundMethodCallOperator valid_left_token?":{"type":"method","name":"valid_left_token?","children":[],"call":["left line == ","operator line ","left line "]}," RuboCop Cop Layout SpaceAroundMethodCallOperator dot_or_safe_navigation_operator?":{"type":"method","name":"dot_or_safe_navigation_operator?","children":[],"call":["node safe_navigation? ","node dot? "]}," RuboCop Cop Layout SpaceAroundMethodCallOperator next_token":{"type":"method","name":"next_token","children":[],"call":[" processed_source tokens [] ","index + "," processed_source tokens "," processed_source "," processed_source tokens index "," processed_source tokens index  + "," processed_source tokens  processed_source tokens index  "]}," RuboCop Cop Layout SpaceAroundMethodCallOperator previous_token":{"type":"method","name":"previous_token","children":[],"call":[" processed_source tokens [] ","index - "," processed_source tokens "," processed_source ","index zero? "," processed_source tokens index "," processed_source tokens index  - "," processed_source tokens index  zero? "," processed_source tokens  processed_source tokens index  "]}," RuboCop Cop Layout SpaceAroundMethodCallOperator operator_token":{"type":"method","name":"operator_token","children":[],"call":["token pos == ","token pos "," processed_source find_token "," processed_source ","node loc dot ","node loc ","node loc double_colon ","node const_type? "]}," RuboCop Cop Layout SpaceAroundMethodCallOperator check_and_add_offense":{"type":"method","name":"check_and_add_offense","children":[],"call":[" no_space_offenses "," valid_left_token? "," valid_right_token? ","right comment? ! ","right comment? "," next_token "," previous_token "," operator_token "," valid_ previous_token _token? "," valid_ next_token _token? "," next_token  comment? ! "," next_token  comment? ","  operator_token _token "]}," RuboCop Cop Layout SpaceAroundMethodCallOperator autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["SpaceCorrector  remove_space "," processed_source "," lambda "," right_token_for_auto_correction "," left_token_for_auto_correction "," operator_token ","  right_token_for_auto_correction _token_for_auto_correction ","  left_token_for_auto_correction _token_for_auto_correction ","  operator_token _token "]}," RuboCop Cop Layout SpaceAroundMethodCallOperator on_const":{"type":"method","name":"on_const","children":[],"call":[" check_and_add_offense ","node loc double_colon ","node loc "," check_space_after_double_colon ","node loc respond_to? "]}," RuboCop Cop Layout SpaceAroundMethodCallOperator on_send":{"type":"method","name":"on_send","children":[],"call":[" check_and_add_offense "," dot_or_safe_navigation_operator? "," check_space_after_dot "," check_space_before_dot ","node safe_navigation? ","node dot? "]}," RuboCop Cop Layout IndentationStyle message":{"type":"method","name":"message","children":[],"call":[" format "," style == "," style "]}," RuboCop Cop Layout IndentationStyle string_literal_ranges":{"type":"method","name":"string_literal_ranges","children":[],"call":["ranges << ","loc expression ","loc begin ","loc respond_to? ","loc heredoc_body ","str heredoc? ","str location ","ast each_node each_with_object ","Set  new ","ast each_node ","ast nil? ","ast each_node with_object ","Set  new  << ","str location  expression ","str location  begin ","str location  respond_to? ","str location  heredoc_body ","str str location ation "]}," RuboCop Cop Layout IndentationStyle in_string_literal?":{"type":"method","name":"in_string_literal?","children":[],"call":["range contains? ","ranges any? "]}," RuboCop Cop Layout IndentationStyle autocorrect_lambda_for_spaces":{"type":"method","name":"autocorrect_lambda_for_spaces","children":[],"call":["corrector replace ","\t * ","match size / "," configured_indentation_width ","match size ","range source gsub ","range source "," lambda "]}," RuboCop Cop Layout IndentationStyle autocorrect_lambda_for_tabs":{"type":"method","name":"autocorrect_lambda_for_tabs","children":[],"call":["corrector replace ","range source gsub ","range source ","  * "," configured_indentation_width "," lambda "]}," RuboCop Cop Layout IndentationStyle find_offence":{"type":"method","name":"find_offence","children":[],"call":["line match "," style == "," style "," source_range ","match end ","match begin "," processed_source buffer "," processed_source ","line line match  ","line match  end ","line match  begin "]}," RuboCop Cop Layout IndentationStyle autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" autocorrect_lambda_for_spaces "," autocorrect_lambda_for_tabs ","range source include? ","range source "]}," RuboCop Cop Layout IndentationStyle investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense "," in_string_literal? "," source_range ","match end ","match begin ","processed_source buffer "," find_offence ","processed_source lines each with_index ","processed_source lines each ","processed_source lines "," string_literal_ranges ","processed_source ast "," source_ source_range  "," find_offence  end "," find_offence  begin "," string_literal_ source_range s "]}," RuboCop Cop Layout FirstArrayElementIndentation msg":{"type":"method","name":"msg","children":[],"call":[" style == "," style "]}," RuboCop Cop Corrector validate_buffer":{"type":"method","name":"validate_buffer","children":[],"call":[" raise ","@source_buffer name inspect ","@source_buffer name ","@source_buffer object_id ","buffer name inspect ","buffer name ","buffer object_id ","buffer class ","buffer is_a? ","buffer == "," source_buffer "]}," RuboCop Cop Corrector to_range":{"type":"method","name":"to_range","children":[],"call":[" validate_buffer ","range source_buffer "," raise ","node_or_range class ","node_or_range loc expression ","node_or_range loc ","node_or_range source_range "]}," RuboCop Cop Corrector wrap":{"type":"method","name":"wrap","children":[],"call":["@source_rewriter wrap "," to_range "," to_ to_range  "]}," RuboCop ConfigValidator validate_new_cops_parameter":{"type":"method","name":"validate_new_cops_parameter","children":[],"call":[" raise ","NEW_COPS_VALUES  join "," smart_loaded_path ","NEW_COPS_VALUES  include? ","new_cop_parameter nil? ","@config for_all_cops [] ","@config for_all_cops ","@config for_all_cops []  nil? "]}," RuboCop ConfigLoader possible_new_cops?":{"type":"method","name":"possible_new_cops?","children":[],"call":["config enabled_new_cops? ","config disabled_new_cops? "," enable_pending_cops "," disable_pending_cops "]}," RuboCop Config enabled_new_cops?":{"type":"method","name":"enabled_new_cops?","children":[],"call":[" for_all_cops [] == "," for_all_cops [] "," for_all_cops "]}," RuboCop Config disabled_new_cops?":{"type":"method","name":"disabled_new_cops?","children":[],"call":[" for_all_cops [] == "," for_all_cops [] "," for_all_cops "]}," RuboCop CLI set_options_to_config_loader":{"type":"method","name":"set_options_to_config_loader","children":[],"call":["ConfigLoader  options_config= ","@options [] ","ConfigLoader  ignore_parent_exclusion= ","ConfigLoader  enable_pending_cops= ","ConfigLoader  disable_pending_cops= ","ConfigLoader  auto_gen_config= ","ConfigLoader  debug= ","ConfigLoader  ignore_unrecognized_cops= "]}," RuboCop AST MethodDispatchNode safe_navigation?":{"type":"method","name":"safe_navigation?","children":[],"call":[" loc dot is? "," loc dot "," loc "," loc respond_to? "]}," RuboCop AST ArrayNode each_value":{"type":"method","name":"each_value","children":[],"call":[" values each "," values "," to_enum "," __method__ "," block_given? "]}," RuboCop NameSimilarity find_similar_names":{"type":"method","name":"find_similar_names","children":[],"call":["spell_checker correct ","DidYouMean SpellChecker  new ","names delete ","names dup ","DidYouMean SpellChecker  new  correct ","names dup  delete ","names dup  dup "]}," RuboCop Cop Util args_end":{"type":"method","name":"args_end","children":[],"call":["node loc expression end ","node loc expression ","node loc ","node source_range end ","node source_range "]}," RuboCop Cop Util args_begin":{"type":"method","name":"args_begin","children":[],"call":["selector end resize ","selector end ","loc selector ","loc keyword ","node yield_type? ","node super_type? ","node loc ","loc name ","node defs_type? ","node def_type? ","loc selector  end resize ","loc keyword  end resize ","loc selector  end ","loc keyword  end ","loc loc selector  ","loc loc keyword  ","node loc  selector ","node loc  keyword ","node node loc  ","node loc  name "]}," RuboCop Cop Util add_parentheses":{"type":"method","name":"add_parentheses","children":[],"call":["corrector insert_after "," args_end ","corrector replace "," args_begin ","node arguments empty? ","node arguments ","corrector wrap ","node respond_to? ! ","node respond_to? ","corrector insert_before ","corrector remove "," range_between ","arguments_range begin_pos ","args_with_space begin_pos "," range_with_surrounding_space ","node source_range ","node args_type? ","  args_begin  ","node source_range  begin_pos "," range_with_surrounding_space  begin_pos "]}," RuboCop Cop Util comment_lines?":{"type":"method","name":"comment_lines?","children":[],"call":[" comment_line? "," processed_source [] any? "," processed_source [] "," line_range "," processed_source "]}," RuboCop Cop Style SlicingWithRange autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove ","node end "," lambda "]}," RuboCop Cop Style SlicingWithRange on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","node arguments first ","node arguments "," range_till_minus_one? ","node arguments count == ","node arguments count ","node method? ","corrector remove ","node first_argument end ","node first_argument "]}," RuboCop Cop Style MultilineWhenThen require_then?":{"type":"method","name":"require_then?","children":[],"call":["when_node loc line == ","when_node body loc line ","when_node body loc ","when_node body ","when_node loc line ","when_node loc ","when_node conditions count >= ","when_node conditions count ","when_node conditions ","when_node conditions first first_line == ","when_node conditions last last_line ","when_node conditions last ","when_node conditions first first_line ","when_node conditions first "," same_line? "]}," RuboCop Cop Style IfWithSemicolon correct_to_ternary":{"type":"method","name":"correct_to_ternary","children":[],"call":["node if_branch source ","node if_branch ","node condition source ","node condition ","node else_branch source ","node else_branch "]}," RuboCop Cop Style IfWithSemicolon autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," correct_to_ternary "," lambda ","node if_branch source ","node if_branch ","node condition source ","node condition ","node else_branch source ","node else_branch "," correct_elsif ","node else_branch if_type? "]}," RuboCop Cop Style GuardClause guard_clause_source":{"type":"method","name":"guard_clause_source","children":[],"call":["guard_clause source ","guard_clause parent source ","guard_clause parent ","parent or_type? ","parent and_type? "," and_or_guard_clause? ","guard_clause guard_clause parent  source ","guard_clause guard_clause parent  ","guard_clause parent  or_type? ","guard_clause parent  and_type? "]}," RuboCop Cop TargetRubyVersion required_minimum_ruby_version":{"type":"method","name":"required_minimum_ruby_version","children":[],"call":[]}," RuboCop Cop Lint UselessElseWithoutRescue find_offense_node_by":{"type":"method","name":"find_offense_node_by","children":[],"call":[]}," RuboCop Cop Lint UselessAccessModifier autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove "," range_by_whole_lines ","node source_range "," lambda ","  range_by_whole_lines _by_whole_lines ","node source_ range_by_whole_lines  "]}," RuboCop Cop Lint ParenthesesAsGroupedExpression grouped_parentheses?":{"type":"method","name":"grouped_parentheses?","children":[],"call":["first_argument receiver ","first_argument send_type? ","node first_argument ","node first_argument  receiver ","node first_argument  send_type? ","node node first_argument  "]}," RuboCop Cop Lint ParenthesesAsGroupedExpression autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove "," lambda "," space_range ","node first_argument source_range ","node first_argument "," spaces_before_left_parenthesis "," space_ space_range  ","node first_argument source_ space_range  "]}," RuboCop Cop Lint EnsureReturn autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove "," range_by_whole_lines ","node loc expression ","node loc ","corrector replace ","node source gsub ","node source ","node arguments? "," lambda ","  range_by_whole_lines _by_whole_lines "]}," RuboCop Cop Lint AmbiguousRegexpLiteral find_offense_node_by":{"type":"method","name":"find_offense_node_by","children":[],"call":["node parent ","regexp_node source_range begin_pos == ","diagnostic location begin_pos ","diagnostic location ","regexp_node source_range begin_pos ","regexp_node source_range "," processed_source ast each_node find "," processed_source ast each_node "," processed_source ast "," processed_source "," find_offense_node "]}," RuboCop Cop Lint AmbiguousRegexpLiteral autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" add_parentheses "," lambda "]}," RuboCop Cop Lint AmbiguousOperator unary_operator?":{"type":"method","name":"unary_operator?","children":[],"call":["node source start_with? ","diagnostic arguments [] ","diagnostic arguments ","node source "]}," RuboCop Cop Lint AmbiguousOperator offense_node":{"type":"method","name":"offense_node","children":[],"call":["node parent parent ","node parent ","node type "]}," RuboCop Cop Lint AmbiguousOperator offense_position?":{"type":"method","name":"offense_position?","children":[],"call":["node source_range begin_pos == ","diagnostic location begin_pos ","diagnostic location ","node source_range begin_pos ","node source_range "]}," RuboCop Cop Lint AmbiguousOperator find_offense_node_by":{"type":"method","name":"find_offense_node_by","children":[],"call":[" unary_operator? ","send_node first_argument "," offense_position? ","ast each_node find ","ast each_node "," offense_node "," processed_source ast "," processed_source ","send_node send_node first_argument  "," processed_source ast  each_node find "," processed_source ast  each_node ","  offense_node  "," processed_source  processed_source ast  "]}," RuboCop Cop Lint AmbiguousOperator autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" add_parentheses "," lambda "]}," RuboCop Cop Layout SpaceAroundOperators force_equal_sign_alignment?":{"type":"method","name":"force_equal_sign_alignment?","children":[],"call":[" config for_cop [] "," config for_cop "," config "]}," RuboCop Cop Layout SpaceAroundOperators enclose_operator_with_space":{"type":"method","name":"enclose_operator_with_space","children":[],"call":["corrector replace ","operator strip ","corrector insert_after ","operator end_with? "," force_equal_sign_alignment? ","range source ","operator end_with? ! ","range source  strip ","range source  end_with? ","range source  end_with? ! "]}," RuboCop Cop Layout EmptyLinesAroundAttributeAccessor attribute_accessor?":{"type":"method","name":"attribute_accessor?","children":[],"call":["node attribute_accessor? ","node send_type? "]}," RuboCop Cop Layout EmptyLinesAroundAttributeAccessor next_line_node":{"type":"method","name":"next_line_node","children":[],"call":["node parent children [] ","node sibling_index + ","node sibling_index ","node parent children ","node parent ","node parent if_type? ","node right_sibling "]}," RuboCop Cop Layout EmptyLinesAroundAttributeAccessor next_line_empty?":{"type":"method","name":"next_line_empty?","children":[],"call":[" processed_source [] blank? "," processed_source [] "," processed_source "," processed_source [] nil? "]}," RuboCop Cop Layout EmptyLinesAroundAttributeAccessor autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector insert_after "," range_by_whole_lines ","node source_range "," lambda "," processed_source comment_at_line "," processed_source "," next_line_enable_directive_comment? ","node_range last_line + ","node_range last_line ","  range_by_whole_lines _by_whole_lines ","node source_ range_by_whole_lines  "," node_range last_line + _enable_directive_comment? ","node_ range_by_whole_lines  last_line + "," processed_source comment_at_line  last_line + "," range_by_whole_lines  last_line + ","node_ range_by_whole_lines  last_line "," processed_source comment_at_line  last_line "," range_by_whole_lines  last_line "]}," RuboCop Cop Layout EmptyLinesAroundAttributeAccessor on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," attribute_accessor? ","next_line_node nil? "," next_line_node "," next_line_empty? ","node last_line ","node attribute_accessor? "," require_empty_line? ","corrector insert_after "," range_by_whole_lines ","node source_range "," autocorrect "," next_line_empty_or_enable_directive_comment? "," next_line_node  nil? ","  next_line_node  ","  range_by_whole_lines _by_whole_lines ","node source_ range_by_whole_lines  "]}," RuboCop Cop Layout ConditionPosition autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove ","corrector insert_after ","node source ","node parent loc keyword ","node parent loc ","node parent "," range_by_whole_lines ","node source_range "," lambda ","  range_by_whole_lines _by_whole_lines ","node source_ range_by_whole_lines  "]}," RuboCop ConfigLoaderResolver disabled?":{"type":"method","name":"disabled?","children":[],"call":["hash [] [] == ","hash [] [] ","hash [] ","hash [] is_a? "]}," RuboCop ConfigLoaderResolver override_department_setting_for_cops":{"type":"method","name":"override_department_setting_for_cops","children":[],"call":["derived_hash [] []= ","derived_hash [] ","derived_hash [] [] "," disabled? ","Regexp  last_match ","key =~ ","derived_hash each_key "]}," source_range":{"type":"method","name":"source_range","children":[],"call":["Parser Source Range  new ","range end + ","range end ","range exclude_end? ","range begin "]}," RuboCop Ext ProcessedSource disabled_line_ranges":{"type":"method","name":"disabled_line_ranges","children":[],"call":[" comment_config cop_disabled_line_ranges "," comment_config "]}," RuboCop Ext ProcessedSource comment_config":{"type":"method","name":"comment_config","children":[],"call":["CommentConfig  new "]}," RuboCop Cop Style HashSyntax range_for_autocorrect_ruby19":{"type":"method","name":"range_for_autocorrect_ruby19","children":[],"call":[" range_with_surrounding_space ","key join ","pair_node loc operator ","pair_node loc ","pair_node key source_range ","pair_node key "," key join _with_surrounding_space ","pair_node key source_range  join ","pair_node loc pair_node loc operator  ","pair_node key source_key join  ","pair_node pair_node key source_range  source_range ","pair_node pair_node key source_range  "]}," RuboCop Cop Style DoubleNegation find_def_node_from_ascendant":{"type":"method","name":"find_def_node_from_ascendant","children":[],"call":[" find_def_node_from_ascendant ","node parent ","parent defs_type? ","parent def_type? ","node parent child_nodes first ","node parent child_nodes "," define_mehod? "," define_method? ","node node parent  ","node parent  defs_type? ","node parent  def_type? ","node node parent  child_nodes first ","node node parent  child_nodes "]}," RuboCop Cop Style DoubleNegation end_of_method_definition?":{"type":"method","name":"end_of_method_definition?","children":[],"call":["last_child last_line == ","node last_line ","last_child last_line ","def_node child_nodes last ","def_node child_nodes "," find_def_node_from_ascendant "," find_last_child ","def_node body "," double_negative_condition_return_value? "," find_conditional_node_from_ascendant ","last_child last_line <= ","def_node send_type? ","last_child parent array_type? ","last_child parent ","last_child hash_type? ","last_child pair_type? ","def_node child_nodes last  last_line == "," find_last_child  last_line == ","def_node child_nodes last  last_line "," find_last_child  last_line "," find_def_node_from_ascendant  child_nodes last "," find_def_node_from_ascendant  child_nodes "," find_ find_def_node_from_ascendant _from_ascendant "," find_def_node child_nodes last  "," find_ find_last_child  "," find_def_node_from_ascendant  body "," find_ find_conditional_node_from_ascendant _from_ascendant ","def_node child_nodes last  last_line <= "," find_last_child  last_line <= "," find_def_node_from_ascendant  send_type? ","def_node child_nodes last  parent array_type? "," find_last_child  parent array_type? ","def_node child_nodes last  parent "," find_last_child  parent ","def_node child_nodes last  hash_type? "," find_last_child  hash_type? ","def_node child_nodes last  pair_type? "," find_last_child  pair_type? "]}," RuboCop Cop Style DoubleNegation allowed_in_returns?":{"type":"method","name":"allowed_in_returns?","children":[],"call":[" end_of_method_definition? ","node parent "]}," RuboCop Cop Migration DepartmentName contain_unexpected_character_for_department_name?":{"type":"method","name":"contain_unexpected_character_for_department_name?","children":[],"call":["name match? "]}," RuboCop Cop Lint SuppressedException comment_between_rescue_and_end?":{"type":"method","name":"comment_between_rescue_and_end?","children":[],"call":[" comment_line? "," processed_source [] any? "," processed_source [] ","node first_line "," processed_source ","ancestor loc end line ","ancestor loc end ","ancestor loc ","node each_ancestor ","node each_ancestor first ","ancestor loc last_line ","node each_ancestor first  loc end line ","node each_ancestor first  loc end ","node each_ancestor first  loc ","node each_node each_ancestor first  ","node each_node each_ancestor first  first ","node each_ancestor first  loc last_line "]}," RuboCop Cop Lint ParenthesesAsGroupedExpression first_argument_starts_with_left_parenthesis?":{"type":"method","name":"first_argument_starts_with_left_parenthesis?","children":[],"call":["node first_argument source start_with? ","node first_argument source ","node first_argument "]}," RuboCop Cop Lint ParenthesesAsGroupedExpression valid_context?":{"type":"method","name":"valid_context?","children":[],"call":[" grouped_parentheses? ","node setter_method? ","node operator_method? "," first_argument_starts_with_left_parenthesis? ","node arguments one? ","node arguments "," operator_keyword? "," chained_calls? ","node first_argument hash_type? ","node first_argument "," valid_first_argument? "," first_argument_block_type? "]}," RuboCop Cop Lint DeprecatedOpenSSLConstant build_cipher_arguments":{"type":"method","name":"build_cipher_arguments","children":[],"call":["(send\n  (send\n    (lvar :algorithm_parts) :+\n    (lvar :size_and_mode)) :+\n  (array\n    (str \"CBC\"))) take join ","(send\n  (send\n    (lvar :algorithm_parts) :+\n    (lvar :size_and_mode)) :+\n  (array\n    (str \"CBC\"))) take ","algorithm_parts + + ","algorithm_parts + "," sanitize_arguments ","node arguments ","algorithm_name split ","(send\n  (send\n    (lvar :algorithm_parts) :+\n    (lvar :size_and_mode)) :+\n  (array\n    (str \"cbc\"))) take join ","(send\n  (send\n    (lvar :algorithm_parts) :+\n    (lvar :size_and_mode)) :+\n  (array\n    (str \"cbc\"))) take "," sanitize_arguments map ","algorithm_name downcase split ","algorithm_name downcase ","(send\n  (send\n    (lvar :algorithm_parts) :+\n    (lvar :size_and_mode)) :+\n  (array\n    (lvar :mode))) compact take join ","(send\n  (send\n    (lvar :algorithm_parts) :+\n    (lvar :size_and_mode)) :+\n  (array\n    (lvar :mode))) compact take ","(send\n  (send\n    (lvar :algorithm_parts) :+\n    (lvar :size_and_mode)) :+\n  (array\n    (lvar :mode))) compact ","size_and_mode == ","algorithm_parts first ","NO_ARG_ALGORITHM  include? ","algorithm_parts first upcase ","(send\n  (send\n    (lvar :algorithm_parts) :+\n    (lvar : sanitize_arguments )) :+\n  (array\n    (str \"CBC\"))) take join ","(send\n  (send\n    (lvar :algorithm_parts) :+\n    (lvar : sanitize_arguments map )) :+\n  (array\n    (str \"CBC\"))) take join ","(send\n  (send\n    (lvar :algorithm_name split ) :+\n    (lvar :size_and_mode)) :+\n  (array\n    (str \"CBC\"))) take join ","(send\n  (send\n    (lvar :algorithm_name downcase split ) :+\n    (lvar :size_and_mode)) :+\n  (array\n    (str \"CBC\"))) take join ","(send\n  (send\n    (lvar :algorithm_parts) :+\n    (lvar : sanitize_arguments )) :+\n  (array\n    (str \"CBC\"))) take ","(send\n  (send\n    (lvar :algorithm_parts) :+\n    (lvar : sanitize_arguments map )) :+\n  (array\n    (str \"CBC\"))) take ","(send\n  (send\n    (lvar :algorithm_name split ) :+\n    (lvar :size_and_mode)) :+\n  (array\n    (str \"CBC\"))) take ","(send\n  (send\n    (lvar :algorithm_name downcase split ) :+\n    (lvar :size_and_mode)) :+\n  (array\n    (str \"CBC\"))) take ","algorithm_name split  + + ","algorithm_name downcase split  + + ","algorithm_name split  + ","algorithm_name downcase split  + ","(send\n  (send\n    (lvar :algorithm_parts) :+\n    (lvar : sanitize_arguments )) :+\n  (array\n    (str \"cbc\"))) take join ","(send\n  (send\n    (lvar :algorithm_parts) :+\n    (lvar : sanitize_arguments map )) :+\n  (array\n    (str \"cbc\"))) take join ","(send\n  (send\n    (lvar :algorithm_name split ) :+\n    (lvar :size_and_mode)) :+\n  (array\n    (str \"cbc\"))) take join ","(send\n  (send\n    (lvar :algorithm_name downcase split ) :+\n    (lvar :size_and_mode)) :+\n  (array\n    (str \"cbc\"))) take join ","(send\n  (send\n    (lvar :algorithm_parts) :+\n    (lvar : sanitize_arguments )) :+\n  (array\n    (str \"cbc\"))) take ","(send\n  (send\n    (lvar :algorithm_parts) :+\n    (lvar : sanitize_arguments map )) :+\n  (array\n    (str \"cbc\"))) take ","(send\n  (send\n    (lvar :algorithm_name split ) :+\n    (lvar :size_and_mode)) :+\n  (array\n    (str \"cbc\"))) take ","(send\n  (send\n    (lvar :algorithm_name downcase split ) :+\n    (lvar :size_and_mode)) :+\n  (array\n    (str \"cbc\"))) take ","(send\n  (send\n    (lvar :algorithm_parts) :+\n    (lvar : sanitize_arguments )) :+\n  (array\n    (lvar :mode))) compact take join ","(send\n  (send\n    (lvar :algorithm_parts) :+\n    (lvar : sanitize_arguments map )) :+\n  (array\n    (lvar :mode))) compact take join ","(send\n  (send\n    (lvar :algorithm_name split ) :+\n    (lvar :size_and_mode)) :+\n  (array\n    (lvar :mode))) compact take join ","(send\n  (send\n    (lvar :algorithm_name downcase split ) :+\n    (lvar :size_and_mode)) :+\n  (array\n    (lvar :mode))) compact take join ","(send\n  (send\n    (lvar :algorithm_parts) :+\n    (lvar : sanitize_arguments )) :+\n  (array\n    (lvar :mode))) compact take ","(send\n  (send\n    (lvar :algorithm_parts) :+\n    (lvar : sanitize_arguments map )) :+\n  (array\n    (lvar :mode))) compact take ","(send\n  (send\n    (lvar :algorithm_name split ) :+\n    (lvar :size_and_mode)) :+\n  (array\n    (lvar :mode))) compact take ","(send\n  (send\n    (lvar :algorithm_name downcase split ) :+\n    (lvar :size_and_mode)) :+\n  (array\n    (lvar :mode))) compact take ","(send\n  (send\n    (lvar :algorithm_parts) :+\n    (lvar : sanitize_arguments )) :+\n  (array\n    (lvar :mode))) compact ","(send\n  (send\n    (lvar :algorithm_parts) :+\n    (lvar : sanitize_arguments map )) :+\n  (array\n    (lvar :mode))) compact ","(send\n  (send\n    (lvar :algorithm_name split ) :+\n    (lvar :size_and_mode)) :+\n  (array\n    (lvar :mode))) compact ","(send\n  (send\n    (lvar :algorithm_name downcase split ) :+\n    (lvar :size_and_mode)) :+\n  (array\n    (lvar :mode))) compact "," sanitize_arguments  == "," sanitize_arguments map  == ","algorithm_name split  first ","algorithm_name downcase split  first ","algorithm_name split  first upcase ","algorithm_name downcase split  first upcase "]}," RuboCop Cop Lint DeprecatedOpenSSLConstant replacement_args":{"type":"method","name":"replacement_args","children":[],"call":["(send\n  (array\n    (dstr\n      (str \"'\")\n      (begin\n        (lvar :algorithm_name))\n      (str \"'\"))) :+\n  (send\n    (send\n      (lvar :node) :arguments) :map\n    (block-pass\n      (sym :source)))) join ","(dstr\n  (str \"'\")\n  (begin\n    (lvar :algorithm_name))\n  (str \"'\")) + ","node arguments map ","node arguments "," build_cipher_arguments "," openssl_class == "," openssl_class "," algorithm_name "," algorithm_const ","node arguments empty? ","(send\n  (array\n    (dstr\n      (str \"'\")\n      (begin\n        (lvar : algorithm_name ))\n      (str \"'\"))) :+\n  (send\n    (send\n      (lvar :node) :arguments) :map\n    (block-pass\n      (sym :source)))) join ","(dstr\n  (str \"'\")\n  (begin\n    (lvar : algorithm_name ))\n  (str \"'\")) + ","  algorithm_name  "]}," RuboCop Cop Lint DeprecatedOpenSSLConstant sanitize_arguments":{"type":"method","name":"sanitize_arguments","children":[],"call":["arg source tr split ","arg source tr ","arg source ","arguments flat_map ","argument tr split ","argument tr ","arg value ","arg str_type? ","arg source s flat_map ","arg value s flat_map ","arg source  tr split ","arg value  tr split ","arg source  tr ","arg value  tr "]}," RuboCop Cop Lint DeprecatedOpenSSLConstant algorithm_name":{"type":"method","name":"algorithm_name","children":[],"call":["name scan join ","name scan "," openssl_class == "," openssl_class ","node loc name source ","node loc name ","node loc ","NO_ARG_ALGORITHM  include? ! ","NO_ARG_ALGORITHM  include? ","node loc name source  scan join ","node loc name source  scan ","node loc node loc name source  source ","node loc node loc name source  "]}," RuboCop Cop Lint DeprecatedOpenSSLConstant openssl_class":{"type":"method","name":"openssl_class","children":[],"call":["node children first source ","node children first ","node children "]}," RuboCop Cop Lint DeprecatedOpenSSLConstant correction_range":{"type":"method","name":"correction_range","children":[],"call":[" range_between ","node loc expression last_column ","node loc expression ","node loc ","node loc selector column ","node loc selector ","node loc expression end_pos ","node loc dot end_pos ","node loc dot ","node source_range end_pos ","node source_range ","node loc expression node loc expression last_column  ","node loc dot node loc expression last_column  ","node source_range node loc expression last_column  "]}," RuboCop Cop Lint DeprecatedOpenSSLConstant message":{"type":"method","name":"message","children":[],"call":[" format ","node source ","node loc selector source ","node loc selector ","node loc "," replacement_args "," openssl_class "," algorithm_const ","  replacement_args  "]}," RuboCop Cop Lint DeprecatedOpenSSLConstant autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," replacement_args ","node loc selector source ","node loc selector ","node loc "," correction_range ","corrector remove ","algorithm_constant loc name ","algorithm_constant loc ","algorithm_constant loc double_colon "," lambda "," algorithm_const "]}," RuboCop Cop Lint DeprecatedOpenSSLConstant on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," algorithm_const ","arg const_type? ","arg send_type? ","arg variable? ","node arguments any? ","node arguments "," autocorrect "," message "," digest_const? ","node receiver ","  message  "]}," RuboCop Cop Layout EmptyLinesAroundAttributeAccessor allowed_methods":{"type":"method","name":"allowed_methods","children":[],"call":[" cop_config fetch "," cop_config "]}," RuboCop Cop Layout EmptyLinesAroundAttributeAccessor allowed_method?":{"type":"method","name":"allowed_method?","children":[],"call":[" allowed_methods include? ","name to_s "," allowed_methods "]}," RuboCop Cop Layout EmptyLinesAroundAttributeAccessor allow_alias_syntax?":{"type":"method","name":"allow_alias_syntax?","children":[],"call":[" cop_config fetch "," cop_config "]}," RuboCop Cop Layout EmptyLinesAroundAttributeAccessor attribute_or_allowed_method?":{"type":"method","name":"attribute_or_allowed_method?","children":[],"call":[" allowed_method? ","node method_name ","node attribute_accessor? ","node send_type? "]}," RuboCop Cop Layout EmptyLinesAroundAttributeAccessor allow_alias?":{"type":"method","name":"allow_alias?","children":[],"call":["node alias_type? "," allow_alias_syntax? "]}," RuboCop Cop Layout EmptyLinesAroundAttributeAccessor require_empty_line?":{"type":"method","name":"require_empty_line?","children":[],"call":[" attribute_or_allowed_method? ! "," attribute_or_allowed_method? "," allow_alias? ! "," allow_alias? ","node respond_to? "]}," RuboCop RSpec ExpectOffense format_offense":{"type":"method","name":"format_offense","children":[],"call":["source gsub gsub ","^ * ","value size ","source gsub ","replacements each ","source gsub gsub gsub ","  * ","value to_s ","source gsub gsub  gsub gsub ","source gsub gsub gsub  gsub gsub ","value to_s  size ","source gsub gsub  gsub ","source gsub gsub gsub  gsub ","source gsub gsub  gsub gsub gsub ","source gsub gsub gsub  gsub gsub gsub ","value to_s  to_s "]}," RuboCop OptionsValidator validate_display_only_failed":{"type":"method","name":"validate_display_only_failed","children":[],"call":[" raise "," format ","@options [] == ","@options [] ","@options key? "]}," RuboCop Formatter JUnitFormatter offenses_for_cop":{"type":"method","name":"offenses_for_cop","children":[],"call":["offense cop_name == ","cop cop_name ","offense cop_name ","all_offenses select "]}," RuboCop Formatter JUnitFormatter relevant_for_output?":{"type":"method","name":"relevant_for_output?","children":[],"call":["target_offenses any? ","options [] ! ","options [] "]}," RuboCop Cop Team support_target_rails_version?":{"type":"method","name":"support_target_rails_version?","children":[],"call":["cop class support_target_rails_version? ","cop target_rails_version ","cop class ","cop class respond_to? "]}," RuboCop Cop Team support_target_ruby_version?":{"type":"method","name":"support_target_ruby_version?","children":[],"call":["cop class support_target_ruby_version? ","cop target_ruby_version ","cop class ","cop class respond_to? "]}," RuboCop Cop Team roundup_relevant_cops":{"type":"method","name":"roundup_relevant_cops","children":[],"call":[" support_target_rails_version? ! "," support_target_rails_version? "," support_target_ruby_version? ! "," support_target_ruby_version? ","cop excluded_file? "," cops reject "," cops ","processed_source file_path ","@registry enabled? ","processed_source comment_config cop_opted_in? ","processed_source comment_config "," cops select "]}," RuboCop Cop Team mobilize_cops":{"type":"method","name":"mobilize_cops","children":[],"call":[]}," RuboCop Cop Team mobilize":{"type":"method","name":"mobilize","children":[],"call":[]}," RuboCop Cop Style RedundantRegexpEscape pattern_source":{"type":"method","name":"pattern_source","children":[],"call":["(send\n  (send\n    (send\n      (lvar :node) :children) :reject\n    (block-pass\n      (sym :regopt_type?))) :map) join ","source sub ","child source ","node children reject map ","node children reject ","node children "," freespace_mode_regexp? ","child source  sub ","child child source  ","  freespace_mode_regexp? _regexp? "]}," RuboCop Cop Style RedundantRegexpEscape escape_range_at_index":{"type":"method","name":"escape_range_at_index","children":[],"call":[" range_between ","start + ","regexp_begin + ","node loc begin end_pos ","node loc begin ","node loc ","regexp_begin +  + ","node loc begin end_pos  + "]}," RuboCop Cop Style RedundantRegexpEscape each_escape":{"type":"method","name":"each_escape","children":[],"call":["current == ","previous != ","current != ","previous == ","index - "," pattern_source each_char with_index reduce "," pattern_source each_char with_index "," pattern_source each_char "," pattern_source ","char_class_depth - ","char_class_depth + ","char_class_depth zero? ! ","char_class_depth zero? ","event == ","expr type == ","expr type ","expr ts ","expr text [] ","expr text ","node parsed_tree ","expr start_index "]}," RuboCop Cop Style RedundantRegexpEscape allowed_escape?":{"type":"method","name":"allowed_escape?","children":[],"call":["ALLOWED_OUTSIDE_CHAR_CLASS_METACHAR_ESCAPES  include? ","ALLOWED_WITHIN_CHAR_CLASS_METACHAR_ESCAPES  include? "," slash_literal? ","char == ","ALLOWED_ALWAYS_ESCAPES  include? ","(str \"[[:alnum:]]\") match? "," delimiter? "," char_class_begins_or_ends_with_escaped_hyphen? ! "," char_class_begins_or_ends_with_escaped_hyphen? "]}," RuboCop Cop Style RedundantRegexpEscape slash_literal?":{"type":"method","name":"slash_literal?","children":[],"call":["(str \"/\") include? ","node loc begin source ","node loc begin ","node loc "]}," RuboCop Cop Style RedundantRegexpEscape autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove_leading "," escape_range_at_index "," allowed_escape? "," each_escape "," lambda "]}," RuboCop Cop Style RedundantRegexpEscape on_regexp":{"type":"method","name":"on_regexp","children":[],"call":[" add_offense "," escape_range_at_index "," allowed_escape? "," each_escape ","corrector remove_leading ","char valid_encoding? "]}," RuboCop Cop Style RedundantRegexpCharacterClass whitespace_in_free_space_mode?":{"type":"method","name":"whitespace_in_free_space_mode?","children":[],"call":["(str \"\\\\[\\\\s\\\\]\") match? ","loc source "," freespace_mode_regexp? ","(str \"\\\\s\") match? ","node extended? "]}," RuboCop Cop Style RedundantRegexpCharacterClass without_character_class":{"type":"method","name":"without_character_class","children":[],"call":["loc source [] ","loc source ","loc source == "]}," RuboCop Cop Style RedundantRegexpCharacterClass each_redundant_character_class":{"type":"method","name":"each_redundant_character_class","children":[],"call":[" each_match_range ","node loc expression ","node loc "," match_range ","Regexp  last_match ","node loc begin end ","node loc begin "," pattern_source scan "," pattern_source ","node loc begin adjust ","char_class te ","1 + ","char_class ts "," redundant_single_element_character_class? "," each_single_element_character_class ","char_class loc body ","char_class loc "]}," RuboCop Cop Style RedundantRegexpCharacterClass autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," without_character_class "," each_redundant_character_class "," lambda "]}," RuboCop Cop Style RedundantRegexpCharacterClass on_regexp":{"type":"method","name":"on_regexp","children":[],"call":[" add_offense "," format "," without_character_class ","loc source "," whitespace_in_free_space_mode? "," each_redundant_character_class ","corrector replace "]}," RuboCop Cop Naming FileName check_definition_path_hierarchy?":{"type":"method","name":"check_definition_path_hierarchy?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Naming FileName matching_class?":{"type":"method","name":"matching_class?","children":[],"call":[" find_class_or_module "," to_namespace "," processed_source ast "," processed_source "]}," RuboCop Cop Naming FileName perform_class_and_module_naming_checks":{"type":"method","name":"perform_class_and_module_naming_checks","children":[],"call":[" no_definition_message "," matching_class? ! "," matching_class? "," matching_definition? ! "," matching_definition? "," check_definition_path_hierarchy? "," expect_matching_definition? "]}," RuboCop Cop RegexpLiteralHelp freespace_mode_regexp?":{"type":"method","name":"freespace_mode_regexp?","children":[],"call":["regopt children include? ","regopt children ","node children find ","node children ","node children find  children include? ","node children find  children "]}," RuboCop Cop Lint MixedRegexpCaptureTypes numbered_capture?":{"type":"method","name":"numbered_capture?","children":[],"call":["e instance_of? ","tree each_expression any? ","tree each_expression "]}," RuboCop Cop Lint MixedRegexpCaptureTypes named_capture?":{"type":"method","name":"named_capture?","children":[],"call":["e instance_of? ","tree each_expression any? ","tree each_expression "]}," RuboCop Cop Lint MixedRegexpCaptureTypes contain_non_literal?":{"type":"method","name":"contain_non_literal?","children":[],"call":[" contain_non_literal? ","node children any? ","node children ","node respond_to? ","node const_type? ","node send_type? ","node variable? "]}," RuboCop Cop Lint MixedRegexpCaptureTypes on_regexp":{"type":"method","name":"on_regexp","children":[],"call":[" add_offense "," numbered_capture? "," named_capture? ","Regexp Parser  parse ","node content "," contain_non_literal? ","node each_capture none? ","node each_capture ","node interpolation? "]}," RuboCop Cop Layout HeredocIndentation width_message":{"type":"method","name":"width_message","children":[],"call":[" format "]}," RuboCop Cop Layout HeredocIndentation type_message":{"type":"method","name":"type_message","children":[],"call":[" format "]}," RuboCop Cop Bundler GemComment gem_options":{"type":"method","name":"gem_options","children":[],"call":["node arguments last keys map ","node arguments last keys ","node arguments last ","node arguments ","(send\n  (send\n    (lvar :node) :arguments) :last) == "]}," RuboCop Cop Bundler GemComment contains_checked_options?":{"type":"method","name":"contains_checked_options?","children":[],"call":["(send\n  (send nil :Array\n    (send\n      (send nil :cop_config) :[]\n      (const nil :CHECKED_OPTIONS_CONFIG))) :&\n  (send\n    (send nil :gem_options\n      (lvar :node)) :map\n    (block-pass\n      (sym :to_s)))) any? "," Array & "," gem_options map "," gem_options "," Array "," cop_config [] "," cop_config "]}," RuboCop Cop Bundler GemComment version_specified_gem?":{"type":"method","name":"version_specified_gem?","children":[],"call":["node arguments [] ","node arguments "]}," RuboCop Cop Bundler GemComment checked_options_present?":{"type":"method","name":"checked_options_present?","children":[],"call":[" contains_checked_options? "," version_specified_gem? "," cop_config [] include? "," cop_config [] "," cop_config "," restrictive_version_specified_gem? "]}," RuboCop ConfigStore for_dir":{"type":"method","name":"for_dir","children":[],"call":["ConfigLoader  configuration_from_file "," print ","ConfigLoader  debug? ","@object_cache [] ","@path_cache [] ","ConfigLoader  configuration_file_for "," validated? ","@@path_cache [] _cache [] "]}," RuboCop ConfigStore for_file":{"type":"method","name":"for_file","children":[],"call":[" for_dir ","File  dirname "]}," RuboCop Cop Utils FormatString mixed_formats?":{"type":"method","name":"mixed_formats?","children":[],"call":["formats uniq size > ","formats uniq size ","formats uniq ","seq max_digit_dollar_num ","seq name "," format_sequences map "," format_sequences "," format_sequences reject map "," format_sequences reject "]}," RuboCop Cop Utils FormatString valid?":{"type":"method","name":"valid?","children":[],"call":[" mixed_formats? ! "," mixed_formats? "]}," RuboCop Cop Team new":{"type":"method","name":"new","children":[],"call":[]}," RuboCop Cop Registry clear_enrollment_queue":{"type":"method","name":"clear_enrollment_queue","children":[],"call":["@cops_by_cop_name [] << ","@cops_by_cop_name [] ","cop cop_name ","@departments [] << ","@departments [] ","cop department ","@registry []= ","cop badge ","@enrollment_queue each ","@enrollment_queue empty? "]}," RuboCop Cop Registry initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":[" initialize ","reg options ","reg cops "]}," RuboCop Cop Registry with_temporary_global":{"type":"method","name":"with_temporary_global","children":[],"call":[" global dup "," global "]}," RuboCop Cop Registry all":{"type":"method","name":"all","children":[],"call":[]}," RuboCop Cop Registry dismiss":{"type":"method","name":"dismiss","children":[],"call":[" raise ","@enrollment_queue delete "]}," RuboCop Cop Lint FormatParameterMismatch invalid_format_string?":{"type":"method","name":"invalid_format_string?","children":[],"call":["RuboCop Cop Utils FormatString  new valid? ! ","RuboCop Cop Utils FormatString  new valid? ","RuboCop Cop Utils FormatString  new ","node source ","node receiver source ","node receiver ","node first_argument source ","node first_argument "," format? "," sprintf? "]}," RuboCop Cop Lint FormatParameterMismatch format_string?":{"type":"method","name":"format_string?","children":[],"call":[" method_with_format_args? "," called_on_string? "]}," RuboCop Cop Cop registry":{"type":"method","name":"registry","children":[],"call":[]}," RuboCop Cop Cop exclude_from_registry":{"type":"method","name":"exclude_from_registry","children":[],"call":[]}," RuboCop Cop Style YodaCondition interpolation?":{"type":"method","name":"interpolation?","children":[],"call":["child begin_type? ","child respond_to? ","node children any? ","node children ","node regexp_type? ","node dstr_type? ","node interpolation? "]}," RuboCop Cop Style StructInheritance correct_parent":{"type":"method","name":"correct_parent","children":[],"call":["corrector insert_after ","parent loc expression ","parent loc ","corrector remove "," range_with_surrounding_space ","parent loc end ","parent block_type? "," range_by_whole_lines ","class_node loc end ","class_node loc ","(lvasgn :class_node\n  (send\n    (lvar :parent) :parent)) body nil? ","(lvasgn :class_node\n  (send\n    (lvar :parent) :parent)) body ","parent parent "," range_for_empty_class_body ","parent source_range ","parent parent  loc end ","parent parent  loc ","(lvasgn :parent parent \n  (send\n    (lvar :parent) :parent)) body nil? ","(lvasgn :parent parent \n  (send\n    (lvar :parent) :parent)) body "]}," RuboCop Cop Style StructInheritance autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" correct_parent ","node parent_class ","corrector replace ","node loc operator ","node loc ","corrector remove "," range_with_surrounding_space ","node loc keyword "," lambda "]}," RuboCop Cop Style RedundantRegexpEscape delimiter?":{"type":"method","name":"delimiter?","children":[],"call":["delimiters include? ","node loc end source chars first ","node loc end source chars ","node loc end source ","node loc end ","node loc ","node loc begin source chars last ","node loc begin source chars ","node loc begin source ","node loc begin ","node loc end source [] ","node loc begin source [] "]}," RuboCop Cop Style RedundantFetchBlock check_for_string?":{"type":"method","name":"check_for_string?","children":[],"call":[" frozen_string_literals_enabled? "]}," RuboCop Cop Style RedundantFetchBlock check_for_constant?":{"type":"method","name":"check_for_constant?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style RedundantFetchBlock build_bad_method":{"type":"method","name":"build_bad_method","children":[],"call":["body source ","send children [] source ","send children [] ","send children "]}," RuboCop Cop Style RedundantFetchBlock build_good_method":{"type":"method","name":"build_good_method","children":[],"call":["body source ","send children [] source ","send children [] ","send children "]}," RuboCop Cop Style RedundantFetchBlock fetch_range":{"type":"method","name":"fetch_range","children":[],"call":[" range_between ","node loc end end_pos ","node loc end ","node loc ","send loc selector begin_pos ","send loc selector ","send loc "]}," RuboCop Cop Style RedundantFetchBlock basic_literal?":{"type":"method","name":"basic_literal?","children":[],"call":["node basic_literal? "]}," RuboCop Cop Style RedundantFetchBlock autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","body source ","key source ","receiver source ","send children "," lambda "," redundant_fetch_block_candidate? "]}," RuboCop Cop Style RedundantFetchBlock on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," format "," build_bad_method "," build_good_method "," fetch_range "," check_for_string? ! "," check_for_string? ","body str_type? "," check_for_constant? ! "," check_for_constant? ","body const_type? "," redundant_fetch_block_candidate? "," should_not_check? ","corrector replace ","key source ","receiver source ","body source ","send children "," build_ build_bad_method _method "," build_ build_good_method _method "," fetch_ fetch_range  "]}," RuboCop Cop Style NestedTernaryOperator remove_parentheses":{"type":"method","name":"remove_parentheses","children":[],"call":["source gsub gsub ","source gsub ","source start_with? ","source delete_prefix delete_suffix ","source delete_prefix "]}," RuboCop Cop Style NestedTernaryOperator if_node":{"type":"method","name":"if_node","children":[],"call":[" if_node ","node if_type? ","node parent "," if_node parent  ","node parent  if_type? ","node parent  parent "]}," RuboCop Cop Style NestedTernaryOperator autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","(str \"if \") chop ","if_node else_branch source ","if_node else_branch "," remove_parentheses ","if_node if_branch source ","if_node if_branch ","if_node condition source ","if_node condition "," lambda "," if_node ","corrector wrap "," replace_loc_and_whitespace ","if_node loc colon ","if_node loc ","if_node loc question "," if_node  else_branch source "," if_node  else_branch "," if_node  if_branch source "," if_node  if_branch "," if_node  condition source "," if_node  condition ","  if_node  "," if_node  loc colon "," if_node  loc "," if_node  loc question "]}," RuboCop Cop Style MultilineTernaryOperator autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","(str \"if \") chop ","node else_branch source ","node else_branch ","node if_branch source ","node if_branch ","node condition source ","node condition "," lambda ","corrector insert_before "," comments_in_condition ","node parent "," replacement "," offense? ","  comments_in_condition  ","node node parent  "]}," RuboCop Cop RegexpLiteralHelp replace_match_with_spaces":{"type":"method","name":"replace_match_with_spaces","children":[],"call":["  * ","Regexp  last_match [] length ","Regexp  last_match [] ","Regexp  last_match ","source sub "]}," RuboCop Cop RegexpLiteralHelp source_with_comments_and_interpolations_blanked":{"type":"method","name":"source_with_comments_and_interpolations_blanked","children":[],"call":[" replace_match_with_spaces ","child begin_type? ","child source ","child child source  "]}," RuboCop Cop RegexpLiteralHelp pattern_source":{"type":"method","name":"pattern_source","children":[],"call":["(send\n  (send\n    (send\n      (lvar :node) :children) :reject\n    (block-pass\n      (sym :regopt_type?))) :map) join "," source_with_comments_and_interpolations_blanked ","node children reject map ","node children reject ","node children "," freespace_mode_regexp? ","  freespace_mode_regexp? _regexp? "]}," RuboCop Cop Metrics Utils IteratingBlock iterating_block?":{"type":"method","name":"iterating_block?","children":[],"call":[" iterating_method? "," block_method_name "," block_method_ block_method_name  "]}," RuboCop Cop Metrics Utils IteratingBlock iterating_method?":{"type":"method","name":"iterating_method?","children":[],"call":["KNOWN_ITERATING_METHODS  include? "]}," RuboCop Cop Metrics Utils IteratingBlock block_method_name":{"type":"method","name":"block_method_name","children":[],"call":["node parent method_name ","node parent ","node method_name ","node type "]}," RuboCop Cop Metrics CyclomaticComplexity count_block?":{"type":"method","name":"count_block?","children":[],"call":["KNOWN_ITERATING_METHODS  include? ","block method_name "]}," RuboCop Cop Metrics CyclomaticComplexity block_method":{"type":"method","name":"block_method","children":[],"call":["node parent method_name ","node parent ","node method_name ","node type "]}," RuboCop Cop Lint RegexpAsCondition autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node source "," lambda "]}," RuboCop Cop Lint RaiseException autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node children first ","node children "," lambda "]}," RuboCop Cop Lint ConstantResolution ignored_names":{"type":"method","name":"ignored_names","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Lint ConstantResolution allowed_names":{"type":"method","name":"allowed_names","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Lint ConstantResolution const_name?":{"type":"method","name":"const_name?","children":[],"call":[" ignored_names include? ! "," ignored_names include? "," ignored_names "," allowed_names include? "," allowed_names "," allowed_names empty? ","name to_s "," ignored_name to_s s include? ! "," ignored_name to_s s include? "," ignored_name to_s s "," allowed_name to_s s include? "," allowed_name to_s s "," allowed_name to_s s empty? ","name to_s  to_s "]}," RuboCop Cop Lint ConstantResolution on_const":{"type":"method","name":"on_const","children":[],"call":[" add_offense "," unqualified_const? ","node parent "," unqualified_const? ! ","node loc nil? ","node loc "]}," RuboCop Runner mobilize_team":{"type":"method","name":"mobilize_team","children":[],"call":["Cop Team  mobilize "," mobilized_cop_classes ","@config_store for_file ","processed_source path ","@@config_store for_file _store for_file "]}," RuboCop Runner team_for_redundant_disables":{"type":"method","name":"team_for_redundant_disables","children":[],"call":["team cops first offenses_to_check= ","team cops first ","team cops ","team cops empty? ","Cop Team  mobilize ","@config_store for_file "," check_for_redundant_disables? ","Cop Team  mobilize  cops first offenses_to_check= ","Cop Team  mobilize  cops first ","Cop Team  mobilize  cops ","Cop Team  mobilize  cops empty? ","@@config_store for_file _store for_file "]}," RuboCop Cop Team suppress_clobbering":{"type":"method","name":"suppress_clobbering","children":[],"call":[]}," RuboCop Cop Team each_corrector":{"type":"method","name":"each_corrector","children":[],"call":["skips merge ","cop class autocorrect_incompatible_with ","cop class ","skips include? ","corrector empty? ","corrector nil? ","cop_report corrector ","cop_report cop ","report cop_reports each ","report cop_reports ","Set  new ","Set  new  merge ","cop_report cop  class autocorrect_incompatible_with ","cop_report cop  class ","Set  new  include? ","cop_report corrector  empty? ","cop_report corrector  nil? ","cop_report cop_report corrector  ","cop_report cop _report corrector ","cop_report cop _report cop_report cop  ","report cop_report cop _reports each ","report cop_report cop _reports "]}," RuboCop Cop Team autocorrect_report":{"type":"method","name":"autocorrect_report","children":[],"call":["corrector rewrite ","corrector empty? "," collate_corrections "," collate_corrections  rewrite "," collate_corrections  empty? "]}," RuboCop Cop Team investigate_partial":{"type":"method","name":"investigate_partial","children":[],"call":["commissioner investigate ","Commissioner  new "," class forces_for "," class ","Commissioner  new  investigate "]}," RuboCop Cop Team reset":{"type":"method","name":"reset","children":[],"call":[]}," RuboCop Cop Team be_ready":{"type":"method","name":"be_ready","children":[],"call":["@cops map! "," reset "]}," RuboCop Cop Style TrivialAccessors allowed_method_name?":{"type":"method","name":"allowed_method_name?","children":[],"call":[" names_match? ! "," names_match? "," exact_name_match? "," allowed_method_names include? ","node method_name "," allowed_method_names "]}," RuboCop Cop Style TrivialAccessors allowed_method_names":{"type":"method","name":"allowed_method_names","children":[],"call":[" allowed_methods map + "," allowed_methods map "," allowed_methods "]}," RuboCop Cop Style RedundantFetchBlock should_not_check?":{"type":"method","name":"should_not_check?","children":[],"call":[" rails_cache? ","send receiver "," check_for_string? ! "," check_for_string? "," check_for_constant? ! "," check_for_constant? "]}," RuboCop Cop Style RedundantFetchBlock const_type?":{"type":"method","name":"const_type?","children":[],"call":[]}," RuboCop Cop Style RedundantException fix_compact":{"type":"method","name":"fix_compact","children":[],"call":["corrector replace ","message source "," add_offense "," compact? "]}," RuboCop Cop Style RedundantException fix_exploded":{"type":"method","name":"fix_exploded","children":[],"call":["corrector replace ","message source ","node parenthesized? "," add_offense "," exploded? "]}," RuboCop Cop Style RedundantAssignment siblings_of":{"type":"method","name":"siblings_of","children":[],"call":["node parent children ","node parent "]}," RuboCop Cop Style RedundantAssignment right_sibling_of":{"type":"method","name":"right_sibling_of","children":[],"call":[" siblings_of [] ","node sibling_index + ","node sibling_index "," siblings_of "]}," RuboCop Cop Style RedundantAssignment check_begin_node":{"type":"method","name":"check_begin_node","children":[],"call":[" check_branch ","node children last ","node children "," add_offense "," redundant_assignment? ","corrector remove "," right_sibling_of ","corrector replace ","expression source ","assignment children [] ","assignment children ","assignment right_sibling "," redundant_ redundant_assignment? ? ","assignment children []  source "," redundant_assignment?  children [] "," redundant_assignment?  children "," redundant_assignment?  right_sibling "]}," RuboCop Cop Style RedundantAssignment check_ensure_node":{"type":"method","name":"check_ensure_node","children":[],"call":[" check_branch ","node body "]}," RuboCop Cop Style RedundantAssignment check_rescue_node":{"type":"method","name":"check_rescue_node","children":[],"call":[" check_branch ","node child_nodes each ","node child_nodes "]}," RuboCop Cop Style RedundantAssignment check_if_node":{"type":"method","name":"check_if_node","children":[],"call":[" check_branch ","node else_branch ","node if_branch ","node ternary? ","node modifier_form? "]}," RuboCop Cop Style RedundantAssignment check_case_node":{"type":"method","name":"check_case_node","children":[],"call":[" check_branch ","node else_branch ","when_node body ","node when_branches each ","node when_branches "]}," RuboCop Cop Style RedundantAssignment check_branch":{"type":"method","name":"check_branch","children":[],"call":[" check_begin_node "," check_ensure_node "," check_rescue_node "," check_if_node "," check_case_node ","node type "]}," RuboCop Cop Style RedundantAssignment autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove "," right_sibling_of ","corrector replace ","expression source ","node children [] ","node children "," lambda ","node children []  source "]}," RuboCop Cop Style RedundantAssignment on_def":{"type":"method","name":"on_def","children":[],"call":[" check_branch ","node body "]}," RuboCop Cop Style IfUnlessModifierOfIfUnless autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","(begin\n  (lvar :keyword)) chop ","node if_branch source ","node if_branch ","node condition source ","node condition ","node if? "," lambda "]}," RuboCop Cop Style ClassVars on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","node first_argument ","node method? "," format ","node first_argument source "]}," RuboCop Cop Style BisectedAttrAccessor indent":{"type":"method","name":"indent","children":[],"call":["  * ","node loc column ","node loc "]}," RuboCop Cop Style BisectedAttrAccessor replacement":{"type":"method","name":"replacement","children":[],"call":["macro method_name "," indent ","args empty? ","node source "," attr_reader? ","rest_args map join ","rest_args map ","rest_args delete ","macro arguments ","rest_args empty? "," attr_reader_replacement "," rest_args "," accessor_names "," node_visibility ","macro each_ancestor first ","macro each_ancestor ","rest_args map join  empty? ","rest_rest_args map join  map join ","macro arguments  map join "," rest_args  map join ","rest_rest_args map join  map ","macro arguments  map "," rest_args  map ","rest_rest_args map join  delete ","macro arguments  delete "," rest_args  delete ","rest_rest_args map join  empty? ","macro arguments  empty? "," rest_args  empty? "," rest_rest_args map join  "," macro arguments  ","  rest_args  "]}," RuboCop Cop Style BisectedAttrAccessor check":{"type":"method","name":"check","children":[],"call":[" add_offense "," format ","reader_names include? "," attr_writer? ","writer_names include? "," attr_reader? ","arg_node value ","macro arguments each ","macro arguments ","arg_node source ","corrector replace "," replacement ","arg_node parent ","reader_arg_node value s include? ","reader_arg_node source s include? ","writer_arg_node value s include? ","writer_arg_node source s include? ","arg_node parent  arguments each ","arg_node parent  arguments "]}," RuboCop Cop Style BisectedAttrAccessor attr_writer?":{"type":"method","name":"attr_writer?","children":[],"call":["send_node method? "]}," RuboCop Cop Style BisectedAttrAccessor attr_reader?":{"type":"method","name":"attr_reader?","children":[],"call":["send_node method? "]}," RuboCop Cop Style BisectedAttrAccessor accessor_macroses":{"type":"method","name":"accessor_macroses","children":[],"call":[" attr_writer? "," attr_reader? ","node macro? ","send_nodes select ","class_def each_child_node ","class_def send_type? ","class_def def_type? ","class_def ! ","class_node body "," attr_within_visibility_scope? ","class_def each_child_node  select ","class_node body  each_child_node ","class_node body  send_type? ","class_node body  def_type? ","class_node body  ! "]}," RuboCop Cop Style BisectedAttrAccessor accessor_names":{"type":"method","name":"accessor_names","children":[],"call":["writer_names add ","reader_names add "," attr_reader? ","names each ","macro arguments map ","macro arguments "," accessor_macroses each "," accessor_macroses ","Set  new ","(or-asgn\n  (lvasgn :writer_names)\n  (send\n    (const nil :Set) :new)) add ","(or-asgn\n  (lvasgn :reader_names)\n  (send\n    (const nil :Set) :new)) add ","writer_macro arguments map  add ","Set  new  add ","reader_macro arguments map  add ","macro arguments map  each ","(or-asgn\n  (lvasgn :writer_macro arguments map )\n  (send\n    (const nil :Set) :new)) add ","(or-asgn\n  (lvasgn :Set  new )\n  (send\n    (const nil :Set) :new)) add ","(or-asgn\n  (lvasgn :reader_macro arguments map )\n  (send\n    (const nil :Set) :new)) add "]}," RuboCop Cop Style BisectedAttrAccessor autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," replacement "," lambda ","node parent "]}," RuboCop Cop Style BisectedAttrAccessor on_class":{"type":"method","name":"on_class","children":[],"call":[" check "," accessor_macroses each "," accessor_macroses "," accessor_names ","VISIBILITY_SCOPES  each "," register_offense ","attrs each ","@macros_to_rewrite [] << ","@macros_to_rewrite [] ","attrs none? ","macro bisect ","macros each ","bisected any? "," find_bisection "," find_macros each "," find_macros ","class_node body ","@macros_to_rewrite []= ","Set  new ","macro bisect  each ","macro bisect  none? "," find_bisection  any? "]}," RuboCop Cop Style AccessorGrouping separate_accessors":{"type":"method","name":"separate_accessors","children":[],"call":["(send\n  (send\n    (lvar :node) :arguments) :map) join ","arg source ","node method_name ","  * ","node loc column ","node loc ","arg == ","node arguments first ","node arguments ","node arguments map ","(send\n  (send\n    (lvar :node) :arguments) :flat_map) join ","lines map "," processed_source ast_with_comments [] map "," processed_source ast_with_comments [] "," processed_source ast_with_comments "," processed_source ","node arguments flat_map "]}," RuboCop Cop Style AccessorGrouping group_accessors":{"type":"method","name":"group_accessors","children":[],"call":["accessor_names join ","node method_name ","accessor arguments map ","accessor arguments ","accessors flat_map ","(send\n  (lvar :accessors) :flat_map) uniq ","(send\n  (lvar :accessors) :flat_map) uniq  join "]}," RuboCop Cop Style AccessorGrouping correction":{"type":"method","name":"correction","children":[],"call":[" separate_accessors "," group_accessors ","node == ","accessors first "," sibling_accessors "," grouped_style? "," separate_ sibling_accessors  "," group_ sibling_accessors  "," sibling_accessors  first "," sibling_ sibling_accessors  "]}," RuboCop Cop Style AccessorGrouping message":{"type":"method","name":"message","children":[],"call":[" format ","send_node method_name "," grouped_style? "]}," RuboCop Cop Style AccessorGrouping sibling_accessors":{"type":"method","name":"sibling_accessors","children":[],"call":["sibling method? ","send_node method_name ","sibling macro? ","send_node parent each_child_node select ","send_node parent each_child_node ","send_node parent "," node_visibility == "," node_visibility "," accessor? "," previous_line_comment? ! "," previous_line_comment? ","sibling attribute_accessor? "]}," RuboCop Cop Style AccessorGrouping separated_style?":{"type":"method","name":"separated_style?","children":[],"call":[" style == "," style "]}," RuboCop Cop Style AccessorGrouping grouped_style?":{"type":"method","name":"grouped_style?","children":[],"call":[" style == "," style "]}," RuboCop Cop Style AccessorGrouping check":{"type":"method","name":"check","children":[],"call":[" add_offense ","send_node arguments size > ","send_node arguments size ","send_node arguments "," separated_style? "," sibling_accessors size > "," sibling_accessors size "," sibling_accessors "," grouped_style? "," previous_line_comment? "," autocorrect "," message "," groupable_accessor? ! "," groupable_accessor? "," groupable_sibling_accessors size > "," groupable_sibling_accessors size "," groupable_sibling_accessors ","  message  "]}," RuboCop Cop Style AccessorGrouping accessor?":{"type":"method","name":"accessor?","children":[],"call":["ACCESSOR_METHODS  include? ","send_node method_name ","send_node macro? "]}," RuboCop Cop Style AccessorGrouping class_send_elements":{"type":"method","name":"class_send_elements","children":[],"call":["class_def each_child_node to_a ","class_def each_child_node ","class_def send_type? ","class_def def_type? ","class_def ! ","class_node body ","class_node body  each_child_node to_a ","class_node body  each_child_node ","class_node body  send_type? ","class_node body  def_type? ","class_node body  ! "]}," RuboCop Cop Style AccessorGrouping autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," correction "," lambda ","corrector remove "," range_with_surrounding_space ","node loc expression ","node loc "," preferred_accessors ","node source_range ","  range_with_surrounding_space _with_surrounding_space ","  preferred_accessors  ","node source_ range_with_surrounding_space  "]}," RuboCop Cop Style AccessorGrouping on_class":{"type":"method","name":"on_class","children":[],"call":[" check "," accessor? "," class_send_elements each "," class_send_elements ","macro attribute_accessor? "]}," RuboCop Cop Naming AsciiIdentifiers should_check?":{"type":"method","name":"should_check?","children":[],"call":[" cop_config [] "," cop_config ","token type == ","token type "]}," RuboCop Cop SurroundingSpace on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[]}," RuboCop Cop OrderedGemNode gem_canonical_name":{"type":"method","name":"gem_canonical_name","children":[],"call":["name downcase ","name tr "," cop_config [] "," cop_config ","name tr  downcase ","name tr  tr "]}," RuboCop Cop CodeLength count_as_one":{"type":"method","name":"count_as_one","children":[],"call":[" Array map "," Array "," cop_config [] "," cop_config "]}," RuboCop Cop AutoCorrector support_autocorrect?":{"type":"method","name":"support_autocorrect?","children":[],"call":[]}," RuboCop Cop AllowedMethods allowed_methods":{"type":"method","name":"allowed_methods","children":[],"call":[" cop_config fetch "," cop_config "," Array concat "," Array "," cop_config [] ","deprecated_values any? "," cop_config_deprecated_values "," cop_config_allowed_methods + "," cop_config_allowed_methods "," cop_config_deprecated_values any? "," cop_config_deprecated_values  any? "," cop_config_ cop_config_deprecated_values  "," cop_config_ cop_config_deprecated_values  any? "]}," RuboCop Cop AllowedMethods allowed_method?":{"type":"method","name":"allowed_method?","children":[],"call":[" allowed_methods include? ","name to_s "," allowed_methods "]}," RuboCop Cop Metrics Utils CodeLengthCalculator count_comments?":{"type":"method","name":"count_comments?","children":[],"call":[]}," RuboCop Cop Metrics Utils CodeLengthCalculator irrelevant_line?":{"type":"method","name":"irrelevant_line?","children":[],"call":[" comment_line? "," count_comments? ! "," count_comments? ","source_line blank? "]}," RuboCop Cop Metrics Utils CodeLengthCalculator extract_body":{"type":"method","name":"extract_body","children":[],"call":[" extract_body ","node body ","node type "]}," RuboCop Cop Metrics Utils CodeLengthCalculator foldable_node?":{"type":"method","name":"foldable_node?","children":[],"call":["check call ","@foldable_checks any? "]}," RuboCop Cop Metrics Utils CodeLengthCalculator classlike_node?":{"type":"method","name":"classlike_node?","children":[],"call":[" module_definition? "," class_definition? ","node casgn_type? ","CLASSISH_TYPES  include? ","node type ","CLASSLIKE_TYPES  include? "]}," RuboCop Cop Metrics Utils CodeLengthCalculator each_top_level_descendant":{"type":"method","name":"each_top_level_descendant","children":[],"call":[" each_top_level_descendant ","types include? ","child type ","node each_child_node "," classlike_node? "]}," RuboCop Cop Metrics Utils CodeLengthCalculator heredoc_length":{"type":"method","name":"heredoc_length","children":[],"call":["(send\n  (lvar :lines) :count) + "," irrelevant_line? ! "," irrelevant_line? ","lines count ","node loc heredoc_body source lines ","node loc heredoc_body source ","node loc heredoc_body ","node loc ","(send\n  (lvar :node loc heredoc_body source lines ) :count) + ","node loc heredoc_body source lines  count ","node loc heredoc_body source node loc heredoc_body source lines  "]}," RuboCop Cop Metrics Utils CodeLengthCalculator heredoc_node?":{"type":"method","name":"heredoc_node?","children":[],"call":["node heredoc? ","node respond_to? "]}," RuboCop Cop Metrics Utils CodeLengthCalculator code_length":{"type":"method","name":"code_length","children":[],"call":[" irrelevant_line? ! "," irrelevant_line? ","lines count "," extract_body "," heredoc_length "," heredoc_node? ","body source each_line count ","body source each_line ","body source "," classlike_code_length "," classlike_node? ","source count ","body source lines "," source_from_node_with_heredoc "," node_with_heredoc? "," extract_ extract_body  "," extract_body  source each_line count ","body body source lines  each_line count ","body  source_from_node_with_heredoc  each_line count "," extract_body  source each_line ","body body source lines  each_line ","body  source_from_node_with_heredoc  each_line "," extract_body  source ","body body source lines  ","body  source_from_node_with_heredoc  ","body source lines  count "," source_from_node_with_heredoc  count "," extract_body  source lines ","body body source lines  lines ","body  source_from_node_with_heredoc  lines "," body source lines _from_node_with_heredoc ","  source_from_node_with_heredoc _from_node_with_heredoc "]}," RuboCop Cop Metrics Utils CodeLengthCalculator normalize_foldable_types":{"type":"method","name":"normalize_foldable_types","children":[],"call":["types concat ","types delete ","types push "]}," RuboCop Cop Metrics Utils CodeLengthCalculator build_foldable_checks":{"type":"method","name":"build_foldable_checks","children":[],"call":[" raise ","FOLDABLE_TYPES  join ","type inspect "," heredoc_node? "," lambda ","node hash_type? ","node array_type? ","types map ","node call_type? "]}," RuboCop Cop Metrics Utils CodeLengthCalculator calculate":{"type":"method","name":"calculate","children":[],"call":["length - + ","length - "," foldable_node? ","descendant_length + "," classlike_node? "," code_length "," each_top_level_descendant ","@foldable_types empty? ","descendant braces? ! ","descendant braces? ","descendant hash_type? "," omit_length ","length - +  - + "," code_length  - + ","length - +  - "," code_length  - ","descendant_length - +  + ","descendant_ code_length  + "," code_length  + "," code_length - +  "," code_ code_length  "," omit_length - +  "," omit_ code_length  "]}," RuboCop Cop Metrics Utils CodeLengthCalculator initialize":{"type":"method","name":"initialize","children":[],"call":[" normalize_foldable_types "," build_foldable_checks "]}," RuboCop Cop Lint Syntax on_other_file":{"type":"method","name":"on_other_file","children":[],"call":[" add_offense_from_diagnostic "," processed_source ruby_version "," processed_source "," processed_source diagnostics each "," processed_source diagnostics "," add_offense_from_error "," processed_source parser_error "]}," RuboCop Cop Lint SafeNavigationWithEmpty autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node method_name ","node receiver source ","node receiver "," lambda ","node node receiver source  source ","node node receiver source  "]}," RuboCop Cop Lint RedundantCopDisableDirective on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[" add_offenses ","redundant_cops [] add ","redundant_cops [] "," each_redundant_disable "," offenses_to_check ","h []= ","Set  new ","Hash  new "," processed_source disabled_line_ranges "," processed_source "," processed_source comments "," processed_source  processed_source comments  "]}," RuboCop Cop Lint RedundantCopDisableDirective initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop Cop Lint ParenthesesAsGroupedExpression operator_keyword?":{"type":"method","name":"operator_keyword?","children":[],"call":["first_argument operator_keyword? ","node first_argument ","node first_argument  operator_keyword? ","node node first_argument  "]}," RuboCop Cop Lint ParenthesesAsGroupedExpression chained_calls?":{"type":"method","name":"chained_calls?","children":[],"call":["(or\n  (csend\n    (csend\n      (send\n        (send\n          (lvar :node) :children) :last) :children) :count)\n  (int 0)) > ","node children last ","node children ","first_argument send_type? ","node first_argument ","first_argument call_type? ","node first_argument  send_type? ","node node first_argument  ","node first_argument  call_type? "]}," RuboCop Cop Lint InterpolationCheck autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node loc end ","node loc ","node loc begin ","node source include? ","node source "," lambda "]}," RuboCop Cop Legacy Corrector corrections":{"type":"method","name":"corrections","children":[],"call":["CorrectionsProxy  new "]}," RuboCop Cop Legacy Corrector initialize":{"type":"method","name":"initialize","children":[],"call":[" corrections << "," corrections ","corr each "," merge! ","corr send ","corr is_a? "]}," RuboCop Cop Legacy CorrectionsProxy suppress_clobbering":{"type":"method","name":"suppress_clobbering","children":[],"call":[]}," RuboCop Cop Legacy CorrectionsProxy concat":{"type":"method","name":"concat","children":[],"call":[" << ","corrections each "," corrector merge! ","corrections corrector "," corrector "," suppress_clobbering ","corrections is_a? "]}," RuboCop Cop Legacy CorrectionsProxy empty?":{"type":"method","name":"empty?","children":[],"call":["@corrector empty? "]}," RuboCop Cop Legacy CorrectionsProxy <<":{"type":"method","name":"<<","children":[],"call":["callable call ","@corrector transaction "," suppress_clobbering "]}," RuboCop Cop Legacy CorrectionsProxy initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop Cop Layout FirstArgumentIndentation on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[]}," RuboCop Cop Layout CaseIndentation find_message":{"type":"method","name":"find_message","children":[],"call":[" format "," style "," indent_one_step? "]}," RuboCop Cop Layout CaseIndentation detect_incorrect_style":{"type":"method","name":"detect_incorrect_style","children":[],"call":[" unrecognized_style_detected "," opposite_style_detected ","when_column == "," base_column "," alternative_style ","when_node parent ","when_node loc keyword column ","when_node loc keyword ","when_node loc ","when_node loc keyword column  == ","  base_column  "]}," RuboCop Cop Corrector check_range_validity":{"type":"method","name":"check_range_validity","children":[],"call":[" to_range "]}," RuboCop Cop Corrector source_buffer":{"type":"method","name":"source_buffer","children":[],"call":[]}," RuboCop Cop Cop suppress_clobbering":{"type":"method","name":"suppress_clobbering","children":[],"call":[]}," RuboCop Cop Cop dedup_on_node":{"type":"method","name":"dedup_on_node","children":[],"call":["@corrected_nodes []= ","@corrected_nodes key? "," compare_by_identity "]}," RuboCop Cop Cop correction_lambda":{"type":"method","name":"correction_lambda","children":[],"call":[" autocorrect "," dedup_on_node "," support_autocorrect? "," correction_strategy == "," correction_strategy "," dedupe_on_node "]}," RuboCop Cop Cop emulate_v0_callsequence":{"type":"method","name":"emulate_v0_callsequence","children":[],"call":["lambda call "," suppress_clobbering "," raise ","corrector empty? "," block_given? "," correction_lambda "," correction_lambda  call "," correction_ correction_lambda  "]}," RuboCop Cop Cop apply_correction":{"type":"method","name":"apply_correction","children":[],"call":[" suppress_clobbering "]}," RuboCop Cop Cop callback_argument":{"type":"method","name":"callback_argument","children":[],"call":[]}," RuboCop Cop Cop begin_investigation":{"type":"method","name":"begin_investigation","children":[],"call":[" current_offenses "]}," RuboCop Cop Cop on_investigation_end":{"type":"method","name":"on_investigation_end","children":[],"call":[" investigate_post_walk "," processed_source "," respond_to? "]}," RuboCop Cop Cop on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[" investigate "," processed_source "," respond_to? "]}," RuboCop Cop Cop corrections":{"type":"method","name":"corrections","children":[],"call":["Legacy CorrectionsProxy  new "]}," RuboCop Cop Cop joining_forces":{"type":"method","name":"joining_forces","children":[],"call":[]}," RuboCop Cop Commissioner invoke":{"type":"method","name":"invoke","children":[],"call":["cop send "," with_cop_error_handling ","cops each "]}," RuboCop Cop Commissioner reset":{"type":"method","name":"reset","children":[],"call":[]}," RuboCop Cop Commissioner merge":{"type":"method","name":"merge","children":[],"call":["InvestigationReport  new "," errors + ","investigation errors "," errors "," cop_reports + ","investigation cop_reports "," cop_reports "," processed_source "]}," RuboCop Cop Commissioner offenses":{"type":"method","name":"offenses","children":[],"call":[" offenses_per_cop flatten "," offenses_per_cop "]}," RuboCop Cop Commissioner correctors":{"type":"method","name":"correctors","children":[],"call":[" cop_reports map "," cop_reports "]}," RuboCop Cop Commissioner offenses_per_cop":{"type":"method","name":"offenses_per_cop","children":[],"call":[" cop_reports map "," cop_reports "]}," RuboCop Cop Commissioner cops":{"type":"method","name":"cops","children":[],"call":[" cop_reports map "," cop_reports "]}," RuboCop Cop Base custom_severity":{"type":"method","name":"custom_severity","children":[],"call":[" warn "," Rainbow red "," Rainbow ","Severity NAMES  join ","severity to_sym ","Severity NAMES  include? "," cop_config [] "," cop_config "," cop_config []  to_sym "]}," RuboCop Cop Base default_severity":{"type":"method","name":"default_severity","children":[],"call":[" class lint? "," class "]}," RuboCop Cop Base find_severity":{"type":"method","name":"find_severity","children":[],"call":[" default_severity "," custom_severity "]}," RuboCop Cop Base enabled_line?":{"type":"method","name":"enabled_line?","children":[],"call":["@processed_source comment_config cop_enabled_at_line? ","@processed_source comment_config ","@processed_source ! ","@options [] "]}," RuboCop Cop Base file_name_matches_any?":{"type":"method","name":"file_name_matches_any?","children":[],"call":[" match_path? "," config path_relative_to_config "," config ","patterns any? "," cop_config [] "," cop_config ","patterns match? ","OptimizedPatterns  from ","FilePatterns  from "," cop_config []  any? ","OptimizedPatterns  from  any? ","FilePatterns  from  any? "," cop_config []  match? ","OptimizedPatterns  from  match? ","FilePatterns  from  match? "]}," RuboCop Cop Base annotate":{"type":"method","name":"annotate","children":[],"call":["RuboCop Cop MessageAnnotator  new annotate ","RuboCop Cop MessageAnnotator  new "," cop_config "," cop_name "," config "]}," RuboCop Cop Base find_message":{"type":"method","name":"find_message","children":[],"call":[" annotate "," message "]}," RuboCop Cop Base range_from_node_or_range":{"type":"method","name":"range_from_node_or_range","children":[],"call":[" raise ","node_or_range inspect ","node_or_range nil? ","node_or_range is_a? ","node_or_range loc expression ","node_or_range loc ","node_or_range respond_to? ","node_or_range source_range "]}," RuboCop Cop Base disable_uncorrectable":{"type":"method","name":"disable_uncorrectable","children":[],"call":[" disable_offense ","@currently_disabled_lines add? ","range line "," currently_disabled_lines add? "," currently_disabled_lines ","@currently_disabled_range line s add? ","range range line  "," currently_disabled_range line s add? "," currently_disabled_range line s "]}," RuboCop Cop Base attempt_correction":{"type":"method","name":"attempt_correction","children":[],"call":[" apply_correction "," disable_uncorrectable "," disable_uncorrectable? ","corrector empty? ! ","corrector empty? "," disable_uncorrectable  empty? ! "," disable_uncorrectable  empty? "]}," RuboCop Cop Base correct":{"type":"method","name":"correct","children":[],"call":[" attempt_correction ","status == "," raise "," name "," class support_autocorrect? ! "," class support_autocorrect? "," class ","corrector empty? ! ","corrector empty? ","Corrector  new "," block_given? "," correction_strategy "," use_corrector "," attempt_correction  == "," correction_strategy  == ","Corrector  new  empty? ! ","Corrector  new  empty? "," use_Corrector  new  "]}," RuboCop Cop Base reset_investigation":{"type":"method","name":"reset_investigation","children":[],"call":[]}," RuboCop Cop Base complete_investigation":{"type":"method","name":"complete_investigation","children":[],"call":[" reset_investigation ","InvestigationReport  new "," processed_source "]}," RuboCop Cop Base begin_investigation":{"type":"method","name":"begin_investigation","children":[],"call":["Corrector  new ","@processed_source valid_syntax? ","Set  [] "]}," RuboCop Cop Base correction_strategy":{"type":"method","name":"correction_strategy","children":[],"call":[" autocorrect? "," correctable? "]}," RuboCop Cop Base apply_correction":{"type":"method","name":"apply_correction","children":[],"call":[" current_corrector "]}," RuboCop Cop Base callback_argument":{"type":"method","name":"callback_argument","children":[],"call":[]}," RuboCop Cop Base offenses":{"type":"method","name":"offenses","children":[],"call":[" raise "]}," RuboCop Cop Base ready":{"type":"method","name":"ready","children":[],"call":[" class new "," class "," class support_multiple_source? "]}," RuboCop Cop Base support_multiple_source?":{"type":"method","name":"support_multiple_source?","children":[],"call":[]}," RuboCop Cop Base excluded_file?":{"type":"method","name":"excluded_file?","children":[],"call":[" relevant_file? ! "," relevant_file? "]}," RuboCop Cop Base relevant_file?":{"type":"method","name":"relevant_file?","children":[],"call":[" file_name_matches_any? ! "," file_name_matches_any? ","file == ","@config clusivity_config_for_badge? "," class badge "," class "]}," RuboCop Cop Base target_rails_version":{"type":"method","name":"target_rails_version","children":[],"call":["@config target_rails_version "]}," RuboCop Cop Base target_ruby_version":{"type":"method","name":"target_ruby_version","children":[],"call":["@config target_ruby_version "]}," RuboCop Cop Base config_to_allow_offenses=":{"type":"method","name":"config_to_allow_offenses=","children":[],"call":["Formatter DisabledConfigFormatter  config_to_allow_offenses []= "," cop_name ","Formatter DisabledConfigFormatter  config_to_allow_offenses "]}," RuboCop Cop Base config_to_allow_offenses":{"type":"method","name":"config_to_allow_offenses","children":[],"call":["Formatter DisabledConfigFormatter  config_to_allow_offenses [] "," cop_name ","Formatter DisabledConfigFormatter  config_to_allow_offenses "]}," RuboCop Cop Base cop_config":{"type":"method","name":"cop_config","children":[],"call":["@config for_cop merge ","@config for_cop "," class department to_s "," class department "," class ","@config for_badge "," class badge "]}," RuboCop Cop Base cop_name":{"type":"method","name":"cop_name","children":[],"call":[" class cop_name "," class "]}," RuboCop Cop Base match?":{"type":"method","name":"match?","children":[],"call":[]}," RuboCop Cop Base lint?":{"type":"method","name":"lint?","children":[],"call":[]}," RuboCop Cop Base department":{"type":"method","name":"department","children":[],"call":[]}," RuboCop Cop Base badge":{"type":"method","name":"badge","children":[],"call":[]}," RuboCop Cop Base support_autocorrect?":{"type":"method","name":"support_autocorrect?","children":[],"call":[]}," RuboCop Cop Base exclude_from_registry":{"type":"method","name":"exclude_from_registry","children":[],"call":[]}," RuboCop Cop Base inherited":{"type":"method","name":"inherited","children":[],"call":[]}," RuboCop Cop Base external_dependency_checksum":{"type":"method","name":"external_dependency_checksum","children":[],"call":[]}," RuboCop Cop Base add_offense":{"type":"method","name":"add_offense","children":[],"call":["@current_offenses << ","Offense  new "," name "," correct "," enabled_line? ","range line "," find_message "," find_severity "," callback_argument ","@current_offense_locations add? "," range_from_node_or_range "," current_offense_locations add? "," current_offense_locations "," current_offenses << "," current_offenses "," range_for_original "," range_from_node_or_range  line "," range_for_original  line "," find_ find_message  "," find_ find_severity  ","  range_from_node_or_range _from_node_or_ range_from_node_or_range  ","  range_for_original _from_node_or_ range_for_original  ","  range_from_node_or_range _for_original ","  range_for_original _for_original "]}," RuboCop Cop Base add_global_offense":{"type":"method","name":"add_global_offense","children":[],"call":["@current_offenses << ","Offense  new "," name "," find_message "," find_severity "," current_offenses << "," current_offenses "," find_ find_message  "," find_ find_severity  "]}," RuboCop Cop Base message":{"type":"method","name":"message","children":[],"call":[" class "]}," RuboCop Cop Base joining_forces":{"type":"method","name":"joining_forces","children":[],"call":[]}," RuboCop Cop Base on_other_file":{"type":"method","name":"on_other_file","children":[],"call":[]}," RuboCop Cop Base on_investigation_end":{"type":"method","name":"on_investigation_end","children":[],"call":[]}," RuboCop Cop Base on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[]}," RuboCop Cop Base initialize":{"type":"method","name":"initialize","children":[],"call":[" reset_investigation ","Config  new "]}," RuboCop Cop Base autocorrect_incompatible_with":{"type":"method","name":"autocorrect_incompatible_with","children":[],"call":[]}," RuboCop CLI Command AutoGenerateConfig write_config_file":{"type":"method","name":"write_config_file","children":[],"call":["f write ","(str \"\\\\S\") match? ","File  open ","lines join ","lines insert ","doc_start_index + ","YAML_OPTIONAL_DOC_START  match? ","lines index ","rubocop_yml_contents split ","File  write ","rubocop_yml_contents split  join ","rubocop_yml_contents split  insert ","rubocop_yml_contents split  index "]}," RuboCop CLI Command AutoGenerateConfig existing_configuration":{"type":"method","name":"existing_configuration","children":[],"call":["IO  read sub sub ","IO  read sub ","IO  read ","File  read sub sub ","File  read sub ","File  read "]}," RuboCop CLI Command AutoGenerateConfig add_inheritance_from_auto_generated_file":{"type":"method","name":"add_inheritance_from_auto_generated_file","children":[],"call":[" puts "," write_config_file "," existing_configuration ","\n  -  + ","files join ","files size > ","files size ","files unshift ","files include? "," Array ","ConfigLoader  load_yaml_configuration [] ","ConfigLoader  load_yaml_configuration ","File  exist? "," relative_path_to_todo_from_options_config "," Array  join "," Array  size > "," Array  size "," Array  unshift "," Array  include? "]}," RuboCop Cop Style BisectedAttrAccessor attr_reader_replacement":{"type":"method","name":"attr_reader_replacement","children":[],"call":["rest_args map join ","rest_args map ","macro method_name "," indent ","node source ","rest_args empty? "]}," RuboCop Cop Style BisectedAttrAccessor rest_args":{"type":"method","name":"rest_args","children":[],"call":["writer_names include? ","reader_names include? ","arg source ","args reject ","writer_arg source s include? ","reader_arg source s include? "]}," RuboCop Cop Style BisectedAttrAccessor attr_within_visibility_scope?":{"type":"method","name":"attr_within_visibility_scope?","children":[],"call":[" node_visibility == "," node_visibility "," attr_writer? "," attr_reader? ","node macro? "]}," RuboCop Cop VisibilityHelp siblings_of":{"type":"method","name":"siblings_of","children":[],"call":["node parent children ","node parent "]}," RuboCop Cop VisibilityHelp right_siblings_of":{"type":"method","name":"right_siblings_of","children":[],"call":[" siblings_of [] ","node sibling_index "," siblings_of "]}," RuboCop Cop VisibilityHelp left_siblings_of":{"type":"method","name":"left_siblings_of","children":[],"call":[" siblings_of [] ","node sibling_index "," siblings_of "]}," RuboCop Cop VisibilityHelp find_visibility_end":{"type":"method","name":"find_visibility_end","children":[],"call":["right last ","possible_visibilities include? "," node_visibility ","right find "," right_siblings_of ","VISIBILITY_SCOPES  - ","node right_siblings "," Set  [] "," right_siblings_of  last ","node right_siblings  last ","VISIBILITY_SCOPES  -  include? "," right_siblings_of  find ","node right_siblings  find ","  right_siblings_of _siblings_of "," node right_siblings _siblings_of ","node  right_siblings_of _siblings ","node node right_siblings _siblings "]}," RuboCop Cop VisibilityHelp find_visibility_start":{"type":"method","name":"find_visibility_start","children":[],"call":[" left_siblings_of reverse find "," method "," left_siblings_of reverse "," left_siblings_of ","node left_siblings reverse find ","node left_siblings reverse ","node left_siblings "," visibility_block? "]}," RuboCop Cop VisibilityHelp node_visibility":{"type":"method","name":"node_visibility","children":[],"call":[" find_visibility_start "," node_visibility_from_visibility_block "," node_visibility_from_visibility_inline "]}," RuboCop RSpec ExpectOffense AnnotatedSource match_annotations?":{"type":"method","name":"match_annotations?","children":[],"call":[" annotations == ","other annotations "," annotations ","expected_annotation replace ","actual_annotation start_with? ","expected_annotation [] ","ABBREV  length -@ ","ABBREV  length "," annotations zip "]}," RuboCop RSpec ExpectOffense AnnotatedSource ==":{"type":"method","name":"==","children":[],"call":[" match_annotations? ","other lines == "," lines ","other lines ","other is_a? "," class "]}," RuboCop FileFinder find_last_file_upwards":{"type":"method","name":"find_last_file_upwards","children":[],"call":[" traverse_files_upwards "]}," RuboCop Cop Style RedundantFileExtensionInRequire autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," lambda ","node value sub ","node value "]}," RuboCop Cop Style RedundantFileExtensionInRequire on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","name_node value end_with? ","name_node value "," require_call? ","corrector replace ","name_node value sub ","name_node value delete_suffix ","corrector remove "," extension_range ","  extension_range  "]}," RuboCop Cop Style IfUnlessModifier non_simple_if_unless?":{"type":"method","name":"non_simple_if_unless?","children":[],"call":["node else? ","node elsif? ","node ternary? "]}," RuboCop Cop Style IfUnlessModifier non_eligible_node?":{"type":"method","name":"non_eligible_node?","children":[],"call":["node nested_conditional? ","node chained? "," non_simple_if_unless? "]}," RuboCop Cop Style HashLikeCase min_branches_count":{"type":"method","name":"min_branches_count","children":[],"call":[" raise ","length positive? ","length is_a? "," cop_config [] "," cop_config "," exit! "," warn "," Rainbow red "," Rainbow "]}," RuboCop Cop Style HashLikeCase nodes_of_same_type?":{"type":"method","name":"nodes_of_same_type?","children":[],"call":["node type == ","nodes first type ","nodes first ","node type ","nodes all? "]}," RuboCop Cop Style HashLikeCase on_case":{"type":"method","name":"on_case","children":[],"call":[" add_offense "," nodes_of_same_type? "," hash_like_case? ","node when_branches size < "," min_branches_count ","node when_branches size ","node when_branches "," min_branches_count? "]}," RuboCop Cop Style HashAsLastArrayItem braces_style?":{"type":"method","name":"braces_style?","children":[],"call":[" style == "," style "]}," RuboCop Cop Style HashAsLastArrayItem check_no_braces":{"type":"method","name":"check_no_braces","children":[],"call":["corrector remove ","node loc end ","node loc ","node loc begin "," add_offense ","node braces? ","node children empty? ","node children "," remove_last_element_trailing_comma ","node parent "]}," RuboCop Cop Style HashAsLastArrayItem check_braces":{"type":"method","name":"check_braces","children":[],"call":["corrector wrap "," add_offense ","node braces? "]}," RuboCop Cop Style HashAsLastArrayItem on_hash":{"type":"method","name":"on_hash","children":[],"call":[" check_no_braces "," check_braces "," braces_style? ","node parent "," last_array_item? "," explicit_array? "," containing_array ","node children first ","node children "," last_ containing_array _item? "," explicit_ containing_array ? "," containing_ containing_array  "]}," RuboCop Cop Style CaseLikeIf indent":{"type":"method","name":"indent","children":[],"call":["  * ","node loc column ","node loc "]}," RuboCop Cop Style CaseLikeIf correction_range":{"type":"method","name":"correction_range","children":[],"call":[" range_between ","node loc expression end_pos ","node loc expression ","node loc ","node parent loc keyword begin_pos ","node parent loc keyword ","node parent loc ","node parent ","node source_range end_pos ","node source_range "]}," RuboCop Cop Style CaseLikeIf deparenthesize":{"type":"method","name":"deparenthesize","children":[],"call":["node children last ","node children ","node begin_type? ","node children last  children last ","node children last  children ","node children last  begin_type? "]}," RuboCop Cop Style CaseLikeIf const_reference?":{"type":"method","name":"const_reference?","children":[],"call":["name == ","name upcase ","name length > ","name length ","node children [] to_s ","node children [] ","node children ","node const_type? ","node children [] to_s  == ","node children [] to_s  upcase ","node children [] to_s  length > ","node children [] to_s  length "]}," RuboCop Cop Style CaseLikeIf branch_conditions":{"type":"method","name":"branch_conditions","children":[],"call":["node else_branch ","conditions << ","node condition ","node else_branch  else_branch ","node else_branch  condition "]}," RuboCop Cop Style CaseLikeIf condition_from_binary_op":{"type":"method","name":"condition_from_binary_op","children":[],"call":["rhs == ","lhs == "," deparenthesize "," deparenthesize  == "]}," RuboCop Cop Style CaseLikeIf condition_from_send_node":{"type":"method","name":"condition_from_send_node","children":[],"call":["node arguments first == ","node arguments first ","node arguments ","receiver range_type? "," deparenthesize ","node receiver ","rhs == "," condition_from_binary_op ","node receiver == ","node method_name "," condition_from_match_node "," condition_from_equality_node "," condition_from_include_or_cover_node "," deparenthesize  range_type? ","node  deparenthesize  ","node  deparenthesize  == "]}," RuboCop Cop Style CaseLikeIf collect_conditions":{"type":"method","name":"collect_conditions","children":[],"call":["conditions << "," condition_from_send_node "," condition_from_binary_op "," collect_conditions ","node rhs ","node lhs ","node children first ","node children ","node type "]}," RuboCop Cop Style CaseLikeIf find_target_in_match_node":{"type":"method","name":"find_target_in_match_node","children":[],"call":["argument regexp_type? ","receiver regexp_type? ","node receiver ","node arguments first ","node arguments ","node arguments first  regexp_type? ","node receiver  regexp_type? ","node node receiver  ","node node arguments first s first ","node node arguments first s "]}," RuboCop Cop Style CaseLikeIf find_target_in_equality_node":{"type":"method","name":"find_target_in_equality_node","children":[],"call":[" const_reference? ","receiver literal? ","argument literal? ","node receiver ","node arguments first ","node arguments ","node receiver  literal? ","node arguments first  literal? ","node node receiver  ","node node arguments first s first ","node node arguments first s "]}," RuboCop Cop Style CaseLikeIf find_target_in_send_node":{"type":"method","name":"find_target_in_send_node","children":[],"call":[" find_target_in_match_node ","node arguments first ","node arguments ","receiver range_type? "," deparenthesize ","node receiver "," find_target_in_equality_node ","node method_name "," find_target_in_include_or_cover_node "," deparenthesize  range_type? ","node  deparenthesize  "]}," RuboCop Cop Style CaseLikeIf find_target":{"type":"method","name":"find_target","children":[],"call":[" find_target_in_send_node ","rhs regexp_type? ","lhs regexp_type? "," find_target ","node lhs ","node children first ","node children ","node type "]}," RuboCop Cop Style CaseLikeIf should_check?":{"type":"method","name":"should_check?","children":[],"call":["node elsif_conditional? ","node ternary? ! ","node ternary? ","node modifier_form? ! ","node modifier_form? ","node elsif? ! ","node elsif? ","node unless? ! ","node unless? "," min_branches_count? "]}," RuboCop Cop Style CaseLikeIf autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","conditions map join ","conditions map "," correction_range "," collect_conditions "," branch_conditions each "," branch_conditions ","corrector insert_before "," indent ","target source "," lambda "," find_target ","node condition "," correction_ correction_range  "," find_target  source "," find_ find_target  "]}," RuboCop Cop Style CaseLikeIf on_if":{"type":"method","name":"on_if","children":[],"call":[" add_offense "," collect_conditions ","conditions last ","conditions << "," branch_conditions each "," branch_conditions "," find_target ","node condition "," should_check? "," autocorrect "," regexp_with_working_captures? "," find_ find_target  "]}," RuboCop Cop Style ArrayCoercion on_if":{"type":"method","name":"on_if","children":[],"call":["corrector replace "," add_offense "," format ","var_c == ","var_a == "," unless_array? "]}," RuboCop Cop Style ArrayCoercion on_array":{"type":"method","name":"on_array","children":[],"call":["corrector replace ","arg_node source "," add_offense "," format "," array_splat? ","node square_brackets? "]}," RuboCop Cop Style AccessorGrouping previous_line_comment?":{"type":"method","name":"previous_line_comment?","children":[],"call":[" comment_line? "," processed_source [] ","node first_line - ","node first_line "," processed_source "]}," RuboCop Cop Lint NonDeterministicRequireOrder unsorted_dir_pass?":{"type":"method","name":"unsorted_dir_pass?","children":[],"call":[" unsorted_dir_each_pass? "," unsorted_dir_glob_pass? "]}," RuboCop Cop Lint NonDeterministicRequireOrder last_arg_range":{"type":"method","name":"last_arg_range","children":[],"call":["node arguments last source_range with ","node arguments [] source_range end_pos ","node arguments [] source_range ","node arguments [] ","node arguments ","node arguments last source_range ","node arguments last "]}," RuboCop Cop Lint NonDeterministicRequireOrder correct_block_pass":{"type":"method","name":"correct_block_pass","children":[],"call":["corrector replace ","node loc selector ","node loc "," lambda ","corrector insert_after ","block_arg source ","corrector remove "," last_arg_range ","node arguments last ","node arguments "," unsorted_dir_glob_pass? ","node arguments last  source "]}," RuboCop Cop Lint NonDeterministicRequireOrder on_block_pass":{"type":"method","name":"on_block_pass","children":[],"call":[" add_offense ","node parent "," unsorted_dir_pass? "," method_require? "," correct_block "," correct_block_pass ","parent_node arguments last ","parent_node arguments "," target_ruby_version >= "," target_ruby_version ","node parent  arguments last ","node parent  arguments "]}," RuboCop Cop Lint LiteralAsCondition when_conditions_range":{"type":"method","name":"when_conditions_range","children":[],"call":[" range_between ","when_node conditions last source_range end_pos ","when_node conditions last source_range ","when_node conditions last ","when_node conditions ","when_node conditions first source_range begin_pos ","when_node conditions first source_range ","when_node conditions first "]}," RuboCop Cop Lint DuplicateElsifCondition on_if":{"type":"method","name":"on_if","children":[],"call":["node else_branch ","previous << "," add_offense ","previous include? ","node condition ","node elsif? ","node if? ","node else_branch  else_branch ","node else_branch  condition ","node node condition  ","node else_branch  elsif? ","node else_branch  if? "]}," RuboCop Cop Layout SpaceAroundMethodCallOperator check_space":{"type":"method","name":"check_space","children":[],"call":["corrector remove "," add_offense ","range source match? ","range source "," range_between ","end_pos <= "," range_between  source match? "," range_between  source ","  range_between _between "]}," RuboCop Cop Layout SpaceAroundMethodCallOperator check_space_after_double_colon":{"type":"method","name":"check_space_after_double_colon","children":[],"call":[" check_space ","node loc name begin_pos ","node loc name ","node loc ","node loc double_colon end_pos ","node loc double_colon "]}," RuboCop Cop Layout SpaceAroundMethodCallOperator check_space_after_dot":{"type":"method","name":"check_space_after_dot","children":[],"call":[" check_space ","node loc selector begin_pos ","node loc selector ","node loc ","node loc dot end_pos ","node loc dot ","node loc begin begin_pos ","node loc begin ","node loc selector ! ","node method? "]}," RuboCop Cop Layout SpaceAroundMethodCallOperator check_space_before_dot":{"type":"method","name":"check_space_before_dot","children":[],"call":[" check_space ","node loc dot begin_pos ","node loc dot ","node loc ","node receiver source_range end_pos ","node receiver source_range ","node receiver "]}," RuboCop Cop Layout MultilineBlockLayout characters_needed_for_space_and_pipes":{"type":"method","name":"characters_needed_for_space_and_pipes","children":[],"call":["1 + ","PIPE_SIZE  * ","node source lines first end_with? ","node source lines first ","node source lines ","node source ","(send\n  (const nil :PIPE_SIZE) :*\n  (int 2)) + "]}," RuboCop Cop Layout MultilineBlockLayout needed_length_for_args":{"type":"method","name":"needed_length_for_args","children":[],"call":["node source_range column + + + "," block_arg_string length "," block_arg_string ","node arguments ","node source_range column + + ","node source lines first chomp length ","node source lines first chomp ","node source lines first ","node source lines ","node source ","node source_range column + "," characters_needed_for_space_and_pipes ","node source_range column ","node source_range "]}," RuboCop Cop MultilineLiteralBraceCorrector remove_trailing_content_of_comment":{"type":"method","name":"remove_trailing_content_of_comment","children":[],"call":["corrector remove "]}," RuboCop Cop MultilineLiteralBraceCorrector select_content_to_be_inserted_after_last_element":{"type":"method","name":"select_content_to_be_inserted_after_last_element","children":[],"call":["range source "," remove_trailing_content_of_comment "," range_between "," range_by_whole_lines end end_pos "," range_by_whole_lines end "," range_by_whole_lines ","node loc expression ","node loc ","node loc end begin_pos ","node loc end ","node source_range "," range_between  source ","  range_between _between ","  range_between _by_whole_lines end end_pos ","  range_between _by_whole_lines end ","  range_between _by_whole_lines ","node source_ range_between  "]}," RuboCop Cop MultilineLiteralBraceCorrector content_if_comment_present":{"type":"method","name":"content_if_comment_present","children":[],"call":["node loc end source ","node loc end ","node loc "," select_content_to_be_inserted_after_last_element ","range source == ","range source "," range_with_surrounding_space end resize "," range_with_surrounding_space end "," range_with_surrounding_space "," children last source_range "," children last "," children "," range_with_surrounding_space end resize  source == "," range_with_surrounding_space end resize  source ","  range_with_surrounding_space end resize _with_surrounding_space end resize ","  range_with_surrounding_space end resize _with_surrounding_space end ","  range_with_surrounding_space end resize _with_surrounding_space "," children last source_ range_with_surrounding_space end resize  "]}," RuboCop Cop Base currently_disabled_lines":{"type":"method","name":"currently_disabled_lines","children":[],"call":["Set  new "]}," RuboCop Cop Base current_offense_locations":{"type":"method","name":"current_offense_locations","children":[],"call":["Set  new "]}," RuboCop ConfigStore for_pwd":{"type":"method","name":"for_pwd","children":[],"call":[" for_dir ","Dir  pwd "]}," RuboCop ConfigLoader find_project_root":{"type":"method","name":"find_project_root","children":[],"call":["File  dirname "," find_last_file_upwards ","Dir  pwd ","Dir  Dir  pwd  "]}," RuboCop ConfigLoader project_root":{"type":"method","name":"project_root","children":[],"call":[" find_project_root ","ConfigFinder  project_root "," warn "," Rainbow yellow "," Rainbow "]}," RuboCop PathUtil maybe_hidden_file?":{"type":"method","name":"maybe_hidden_file?","children":[],"call":["dot_index == ","separator_index + ","path index ","path rindex ","path include? ","path index  == ","path rindex  + "]}," RuboCop PathUtil hidden_file?":{"type":"method","name":"hidden_file?","children":[],"call":["File  basename start_with? ","File  basename "," maybe_hidden_file? "]}," CopsDocumentationGenerator cop_status":{"type":"method","name":"cop_status","children":[],"call":["status == "]}," CopsDocumentationGenerator table_contents":{"type":"method","name":"table_contents","children":[],"call":["(send\n  (send nil :departments) :map) join "," table_of_content_for_department "," departments map "," departments "]}," CopsDocumentationGenerator print_table_of_contents":{"type":"method","name":"print_table_of_contents","children":[],"call":["File  write ","original sub ","content << "," table_contents ","// START_COP_LIST\n\n +@ ","File  read ","Dir  pwd ","File  exist? "," docs_path ","File  read  sub ","original sub  << ","// START_COP_LIST\n\n +@  << "," table_original sub s "," table_// START_COP_LIST\n\n +@ s "]}," CopsDocumentationGenerator table_of_content_for_department":{"type":"method","name":"table_of_content_for_department","children":[],"call":["content << ","cop cop_name ","cop cop_name sub downcase ","cop cop_name sub "," cops_of_department each "," cops_of_department ","(str \"=== Department xref:\") +@ ","department downcase ","department [] upcase + ","department [] ","department [] upcase "," department_to_basename ","(str \"=== Department xref:\") +@  << "]}," CopsDocumentationGenerator cop_code":{"type":"method","name":"cop_code","children":[],"call":["RuboCop Cop Badge  for == ","cop badge ","RuboCop Cop Badge  for ","code_object to_s ","YARD Registry  all detect ","YARD Registry  all "]}," CopsDocumentationGenerator print_cop_with_doc":{"type":"method","name":"print_cop_with_doc","children":[],"call":[" cops_body ","code_object tags ","code_object docstring ","code_object docstring blank? "," cop_code ","non_display_keys include? ","cop_config reject "," config for_cop "," config "," config for_cop  reject "]}," CopsDocumentationGenerator print_cops_of_department":{"type":"method","name":"print_cops_of_department","children":[],"call":["file write ","content strip "," puts ","File  open ","department downcase ","Dir  pwd ","content << "," print_cop_with_doc ","selected_cops each ","(str \"= \") +@ "," cops_of_department "," department_to_basename "," footer_for_department "," docs_path ","(str \"= \") +@  strip ","(str \"= \") +@  << "," cops_of_department  each "]}," CopsDocumentationGenerator references":{"type":"method","name":"references","children":[],"call":["content << ","(send\n  (lvar :urls) :map) join ","urls map "," h3 ","urls empty? ","RuboCop Cop MessageAnnotator  new urls ","RuboCop Cop MessageAnnotator  new ","cop name "," config "," config for_cop ","see_objects empty? ","(send\n  (lvar :see_objects) :map) join ","see name ","see_objects map "," h3  << ","(send\n  (lvar :RuboCop Cop MessageAnnotator  new urls ) :map) join ","RuboCop Cop MessageAnnotator  new urls  map ","RuboCop Cop MessageAnnotator  new urls  empty? ","RuboCop Cop MessageAnnotator  new RuboCop Cop MessageAnnotator  new urls  "]}," CopsDocumentationGenerator wrap_backtick":{"type":"method","name":"wrap_backtick","children":[],"call":["value start_with? ","value is_a? ","value include? "]}," CopsDocumentationGenerator format_table_value":{"type":"method","name":"format_table_value","children":[],"call":["value gsub rstrip ","value gsub ","Dir  pwd "," wrap_backtick ","val nil? ","(send\n  (lvar :val) :map) join "," format_table_value ","val map ","val empty? "]}," CopsDocumentationGenerator to_table":{"type":"method","name":"to_table","children":[],"call":["table << ","marked_contents join ","(send\n  (lvar :plain_content) :map) join ","plain_content map ","content map ","(str \"|===\") join ","header join ","(str \"[separator=¦]\") join ","c gsub ","(str \"|===\") join  << ","(str \"[separator=¦]\") join  << "]}," CopsDocumentationGenerator configurable_values":{"type":"method","name":"configurable_values","children":[],"call":["pars [] "," format_table_value ","RuboCop Cop Util  to_supported_styles "]}," CopsDocumentationGenerator configurations":{"type":"method","name":"configurations","children":[],"call":[" h3 + "," to_table "," h3 "," format_table_value ","pars [] "," configurable_values ","configs map ","key start_with? ","(send\n  (send\n    (lvar :pars) :each_key) :reject) reject ","pars each_key reject ","pars each_key ","pars empty? "," configuration_name ","  configurable_values _values "]}," CopsDocumentationGenerator code_example":{"type":"method","name":"code_example","children":[],"call":["content << ","ruby_code text gsub gsub strip ","ruby_code text gsub gsub ","ruby_code text gsub ","ruby_code text ","[source,ruby]\n----\n +@ ","[source,ruby]\n----\n +@  << "]}," CopsDocumentationGenerator h4":{"type":"method","name":"h4","children":[],"call":["content << ","(str \"==== \") +@ ","(str \"==== \") +@  << "]}," CopsDocumentationGenerator h3":{"type":"method","name":"h3","children":[],"call":["content << ","\n +@ ","\n +@  << "]}," CopsDocumentationGenerator h2":{"type":"method","name":"h2","children":[],"call":["content << ","\n +@ ","\n +@  << "]}," CopsDocumentationGenerator properties":{"type":"method","name":"properties","children":[],"call":[" to_table ","cop_config fetch "," cop_status "," config for_cop "," config ","cop new safe_autocorrect? ","cop new ","cop support_autocorrect? "," config for_cop  fetch "]}," CopsDocumentationGenerator required_ruby_version":{"type":"method","name":"required_ruby_version","children":[],"call":["cop required_minimum_ruby_version ","cop respond_to? "]}," CopsDocumentationGenerator examples":{"type":"method","name":"examples","children":[],"call":["content << "," code_example "," h4 ","example name ","example name == ","content end_with? ","examples_object each_with_object "," h3 dup "," h3 "]}," CopsDocumentationGenerator cops_body":{"type":"method","name":"cops_body","children":[],"call":["content << "," references "," configurations "," examples ","examples_objects count positive? ","examples_objects count "," properties "," required_ruby_version "," h2 ","cop cop_name "," safety_object ","s text blank? ! ","s text blank? ","s text ","safety_objects any? ","examples_objects any? "," check_examples_to_have_the_default_enforced_style! ","cop department "," h2  << "]}," CopsDocumentationGenerator cops_of_department":{"type":"method","name":"cops_of_department","children":[],"call":[" cops with_department sort! "," cops with_department "," cops "]}," CopsDocumentationGenerator call":{"type":"method","name":"call","children":[],"call":["RuboCop ConfigLoader  default_configuration= "," print_table_of_contents "," print_cops_of_department "," departments each "," departments ","YARD Registry  load! "]}," CopsDocumentationGenerator initialize":{"type":"method","name":"initialize","children":[],"call":["RuboCop ConfigLoader  default_configuration ","RuboCop Cop Cop  registry ","departments map sort! ","departments map ","RuboCop Cop Registry  global ","FileUtils  mkdir_p ","Dir  pwd "]}," RuboCop TokensUtil sorted_tokens?":{"type":"method","name":"sorted_tokens?","children":[],"call":["token begin_pos ","token begin_pos < ","tokens each "]}," RuboCop TokensUtil fast_tokens":{"type":"method","name":"fast_tokens","children":[],"call":[" sorted_tokens? "," processed_source tokens [] "," processed_source tokens "," processed_source "," index_of_last_token "," index_of_first_token "," sorted_ processed_source tokens [] ? "," processed_source  processed_source tokens []  [] "," processed_source  processed_source tokens []  "]}," RuboCop TokensUtil fast_index_of_last_token":{"type":"method","name":"fast_index_of_last_token","children":[],"call":["tokens [] end_pos == ","tokens [] end_pos ","tokens [] ","token end_pos >= ","token end_pos ","tokens bsearch_index "," processed_source tokens "," processed_source ","node source_range end_pos ","node source_range "," processed_source tokens  [] end_pos == ","tokens [] node source_range end_pos  == "," processed_source tokens  [] end_pos ","tokens [] node source_range end_pos  "," processed_source tokens  [] ","token node source_range end_pos  >= ","token node source_range end_pos  "," processed_source tokens  bsearch_index "," processed_source  processed_source tokens  ","node source_range node source_range end_pos  "]}," RuboCop TokensUtil fast_index_of_first_token":{"type":"method","name":"fast_index_of_first_token","children":[],"call":["tokens [] begin_pos == ","tokens [] begin_pos ","tokens [] ","token begin_pos >= ","token begin_pos ","tokens bsearch_index "," processed_source tokens "," processed_source ","node source_range begin_pos ","node source_range "," processed_source tokens  [] begin_pos == ","tokens [] node source_range begin_pos  == "," processed_source tokens  [] begin_pos ","tokens [] node source_range begin_pos  "," processed_source tokens  [] ","token node source_range begin_pos  >= ","token node source_range begin_pos  "," processed_source tokens  bsearch_index "," processed_source  processed_source tokens  ","node source_range node source_range begin_pos  "]}," RuboCop TokensUtil index_of_last_token":{"type":"method","name":"index_of_last_token","children":[],"call":["token end_pos == ","token end_pos "," processed_source tokens index "," processed_source tokens "," processed_source ","node source_range end_pos ","node source_range "," fast_index_of_last_token ","token node source_range end_pos  == ","token node source_range end_pos  "," processed_source tokens  fast_index_of_last_token  ","node source_range node source_range end_pos  "," fast_ fast_index_of_last_token _of_last_token "]}," RuboCop TokensUtil index_of_first_token":{"type":"method","name":"index_of_first_token","children":[],"call":["token begin_pos == ","token begin_pos "," processed_source tokens index "," processed_source tokens "," processed_source ","node source_range begin_pos ","node source_range "," fast_index_of_first_token ","token node source_range begin_pos  == ","token node source_range begin_pos  "," processed_source tokens  fast_index_of_first_token  ","node source_range node source_range begin_pos  "," fast_ fast_index_of_first_token _of_first_token "]}," RuboCop TokensUtil tokens":{"type":"method","name":"tokens","children":[],"call":["@tokens []= ","token begin_pos >= ","token begin_pos ","token end_pos <= ","token end_pos "," processed_source tokens select "," processed_source tokens "," processed_source ","node source_range end_pos ","node source_range ","node source_range begin_pos "," fast_tokens ","node object_id ","@tokens [] ","@ fast_tokens  []= ","token node source_range begin_pos  >= ","token node source_range begin_pos  ","token node source_range end_pos  <= ","token node source_range end_pos  "," processed_source  fast_tokens  select "," processed_source  fast_tokens  ","node source_range node source_range end_pos  ","node source_range node source_range begin_pos  "," fast_ fast_tokens  ","@ fast_tokens  [] "]}," RuboCop Cop Style StringConcatenation single_quoted?":{"type":"method","name":"single_quoted?","children":[],"call":["str_node source start_with? ","str_node source "]}," RuboCop Cop Style StringConcatenation replacement":{"type":"method","name":"replacement","children":[],"call":["interpolated_parts join ","part source "," escape_string ","part value ","part value gsub "," single_quoted? ","part str_type? ","parts map ","part value inspect [] ","part value inspect "," handle_quotes join "," handle_quotes "," contents_range source "," contents_range ","value inspect [] ","value inspect ","value gsub ","part type ","part part value  ","part part value  gsub ","part part value  inspect [] ","part part value  inspect ","part value  inspect [] ","part value  inspect ","part value  gsub "]}," RuboCop Cop Style StringConcatenation plus_node?":{"type":"method","name":"plus_node?","children":[],"call":["node method? ","node send_type? "]}," RuboCop Cop Style StringConcatenation collect_parts":{"type":"method","name":"collect_parts","children":[],"call":["parts << "," collect_parts ","node first_argument ","node receiver "," plus_node? "]}," RuboCop Cop Style StringConcatenation find_topmost_plus_node":{"type":"method","name":"find_topmost_plus_node","children":[],"call":[" plus_node? ","current parent ","current current parent  "]}," RuboCop Cop Style StringConcatenation on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace "," replacement "," add_offense "," collect_parts "," find_topmost_plus_node "," string_concatenation? ","node method? "," uncorrectable? ","parts none? ","@corrected_nodes add ","Set  new compare_by_identity ","Set  new "," corrected_ancestor? ! "," corrected_ancestor? "," line_end_concatenation? "," register_offense "," offensive_for_mode? ","parts [] any? ","parts [] ","parts first str_type? ! ","parts first str_type? ","parts first "," mode == "," mode "," collect_ collect_parts  "," find_ find_topmost_plus_node  "," collect_parts  none? "," collect_parts  [] any? "," collect_parts  [] "," collect_parts  first str_type? ! "," collect_parts  first str_type? "," collect_parts  first "]}," RuboCop Cop Style SingleArgumentDig on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace "," add_offense "," format ","node source ","expression source ","node receiver source ","node receiver "," single_argument_dig? "," ignore_node "," part_of_ignored_node? ","expression forwarded_args_type? "," single_argument_dig?  source ","node node receiver source  source ","node node receiver source  "," single_expression source _dig? "," single_argument_dig?  forwarded_args_type? "]}," RuboCop Cop Style RedundantSort offense_range":{"type":"method","name":"offense_range","children":[],"call":[" range_between ","ancestor loc expression end_pos ","ancestor loc expression ","ancestor loc ","sort_node loc selector begin_pos ","sort_node loc selector ","sort_node loc ","node loc expression end_pos ","node loc expression ","node loc ","node source_range end_pos ","node source_range "]}," RuboCop Cop Style RedundantSort sort_method?":{"type":"method","name":"sort_method?","children":[],"call":["SORT_METHODS  include? ","node method_name "]}," RuboCop Cop Style RedundantCondition without_argument_parentheses_method?":{"type":"method","name":"without_argument_parentheses_method?","children":[],"call":["node parenthesized? ! ","node parenthesized? ","node arguments empty? ! ","node arguments empty? ","node arguments ","node send_type? ","node operator_method? ! ","node operator_method? ","node assignment_method? ! ","node assignment_method? "]}," RuboCop Cop Style RedundantCondition require_parentheses?":{"type":"method","name":"require_parentheses?","children":[],"call":["node semantic_operator? ","node respond_to? ","node rescue_type? ","node range_type? ","node modifier_form? ","node basic_conditional? "]}," RuboCop Cop Style OptionalBooleanParameter on_def":{"type":"method","name":"on_def","children":[],"call":[" add_offense ","BOOLEAN_TYPES  include? ","value type ","arg optarg_type? ","node arguments each ","node arguments ","METHODS_EXCLUDED  include? ","node method_name "," allowed_method? "," format_message ","arg default_value boolean_type? ","arg default_value "]}," RuboCop Cop Style MethodCallWithArgsParentheses OmitParentheses call_in_single_line_inheritance?":{"type":"method","name":"call_in_single_line_inheritance?","children":[],"call":["node parent "]}," RuboCop Cop Style HashAsLastArrayItem last_array_item?":{"type":"method","name":"last_array_item?","children":[],"call":["parent values last == ","parent values last ","parent values ","parent array_type? ","node parent ","parent children last equal? ","parent children last ","parent children ","parent child_nodes all? ","parent child_nodes ","array children last equal? ","array children last ","array children ","array child_nodes all? ","array child_nodes ","node parent  values last == ","node parent  values last ","node parent  values ","node parent  array_type? ","node node parent  ","node parent  children last equal? ","node parent  children last ","node parent  children ","node parent  child_nodes all? ","node parent  child_nodes "]}," RuboCop Cop Style GlobalStdStream gvar_name":{"type":"method","name":"gvar_name","children":[],"call":["const_name to_s downcase ","const_name to_s "]}," RuboCop Cop Style GlobalStdStream message":{"type":"method","name":"message","children":[],"call":[" format "," gvar_name "]}," RuboCop Cop Style GlobalStdStream on_const":{"type":"method","name":"on_const","children":[],"call":["corrector replace "," add_offense "," message "," const_to_gvar_assignment? ","node parent "," gvar_name to_sym "," gvar_name ","STD_STREAMS  include? ","node children [] ","node children ","  gvar_name to_sym  to_sym ","  gvar_name to_sym  "]}," RuboCop Cop Style ExplicitBlockArgument block_body_range":{"type":"method","name":"block_body_range","children":[],"call":[" range_between ","block_node loc end end_pos ","block_node loc end ","block_node loc ","send_node loc expression end_pos ","send_node loc expression ","send_node loc ","send_node source_range end_pos ","send_node source_range "]}," RuboCop Cop Style ExplicitBlockArgument add_block_argument":{"type":"method","name":"add_block_argument","children":[],"call":["corrector insert_after ","node loc name ","node loc ","node send_type? ","last_arg blockarg_type? ","arg_range source end_with? ","arg_range source "," range_with_surrounding_comma ","last_arg source_range ","node arguments last ","node arguments ","node arguments? ","node call_type? ","node zsuper_type? "," correct_call_node "," call_like? ","corrector replace "," empty_arguments? "," insert_argument ","node arguments last  blockarg_type? "," range_with_surrounding_comma  source end_with? "," range_with_surrounding_comma  source ","node arguments last  source_range "]}," RuboCop Cop Style ExplicitBlockArgument yielding_arguments?":{"type":"method","name":"yielding_arguments?","children":[],"call":["yield_arg children first == ","block_arg children first ","block_arg children ","yield_arg children first ","yield_arg children ","yield_args zip all? ","yield_args zip ","yield_args dup fill ","block_args length - ","yield_args length ","block_args length ","yield_args dup ","yield_args dup fill  zip all? ","yield_args dup fill  zip ","yield_args dup fill  dup fill ","yield_args dup fill  length ","yield_args dup fill  dup "]}," RuboCop Cop Style ExplicitBlockArgument on_yield":{"type":"method","name":"on_yield","children":[],"call":[" add_block_argument ","@def_nodes add? ","block_node each_ancestor first ","block_node each_ancestor ","corrector remove "," block_body_range "," add_offense "," yielding_arguments? "," yielding_block? ","node parent "," extract_block_name ","@block_node each_ancestor first s add? ","node parent  each_ancestor first ","node parent  each_ancestor "," extract_ extract_block_name  "]}," RuboCop Cop Style ExplicitBlockArgument initialize":{"type":"method","name":"initialize","children":[],"call":["Set  new "]}," RuboCop Cop Style ConditionalAssignmentHelper lhs_for_casgn":{"type":"method","name":"lhs_for_casgn","children":[],"call":["node children [] ","node children ","namespace source ","namespace cbase_type? ","namespace nil? ","node children []  source ","node children []  cbase_type? ","node children []  nil? "]}," RuboCop Cop Style CaseEquality replacement":{"type":"method","name":"replacement","children":[],"call":["lhs source ","rhs source ","lhs children first ","lhs children ","lhs type "," send_replacement "," const_replacement "," begin_replacement ","lhs lhs children first ren first ","lhs lhs children first ren "]}," RuboCop Cop Style AccessorGrouping preferred_accessors":{"type":"method","name":"preferred_accessors","children":[],"call":[" separate_accessors "," group_accessors ","node == ","accessors first "," sibling_accessors "," grouped_style? ","node loc == ","accessors first loc ","node loc "," groupable_sibling_accessors "," separate_ sibling_accessors  "," separate_ groupable_sibling_accessors  "," group_ sibling_accessors  "," group_ groupable_sibling_accessors  "," sibling_accessors  first "," groupable_sibling_accessors  first "," sibling_ sibling_accessors  "," sibling_ groupable_sibling_accessors  "," sibling_accessors  first loc "," groupable_sibling_accessors  first loc "," groupable_sibling_ sibling_accessors  "," groupable_sibling_ groupable_sibling_accessors  "]}," RuboCop Cop Style AccessModifierDeclarations maybe_access_modifier?":{"type":"method","name":"maybe_access_modifier?","children":[],"call":["ACCESS_MODIFIERS  include? ","node method_name ","node receiver ! ","node receiver "]}," RuboCop Cop Style AccessModifierDeclarations access_modifier?":{"type":"method","name":"access_modifier?","children":[],"call":["node access_modifier? "," maybe_access_modifier? "]}," RuboCop Cop Naming FileName on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[" add_offense "," for_bad_filename "," config allowed_camel_case_file? "," config "," config file_to_exclude? "," processed_source file_path "," processed_source "," processed_source  processed_source file_path  "]}," RuboCop Cop Naming AsciiIdentifiers on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[" add_offense "," first_offense_range ","token type == ","token type ","token text ascii_only? ","token text "," should_check? ! "," should_check? "," processed_source each_token "," processed_source "," processed_source tokens each "," processed_source tokens "]}," RuboCop Cop StatementModifier parenthesize?":{"type":"method","name":"parenthesize?","children":[],"call":["node parent parenthesized? ! ","node parent parenthesized? ","node parent ","node parent send_type? ","(sym :array) include? ","parent type ","parent operator_keyword? ","parent assignment? ","parent nil? ","node node parent  node parent hesized? ! ","node node parent  node parent hesized? ","node node parent  ","node node parent  send_type? ","node parent  type ","node parent  operator_keyword? ","node parent  assignment? ","node parent  nil? "]}," RuboCop Cop StatementModifier first_line_comment":{"type":"method","name":"first_line_comment","children":[],"call":["comment loc expression source ","comment loc expression ","comment loc ","c loc line == ","node loc line ","node loc ","c loc line ","c loc "," processed_source find_comment "," processed_source "," comment_disables_cop? "," same_line? ","comment source "," processed_source comments find "," processed_source comments "]}," RuboCop Cop StatementModifier to_modifier_form":{"type":"method","name":"to_modifier_form","children":[],"call":["(lvar :parenthesized) compact join ","(lvar :parenthesized) compact "," first_line_comment "," parenthesize? ","(send\n  (send\n    (lvar :node) :body) :source) compact join ","(send\n  (send\n    (lvar :node) :body) :source) compact ","node condition source ","node condition ","node keyword ","node body source ","node body ","(lvar :body) compact join ","(lvar :body) compact "," if_body_source ","(send\n  (send\n    (lvar :node) : if_body_source ) :source) compact join ","(send\n  (send\n    (lvar :node) : if_body_source ) :source) compact ","node  if_body_source  source ","node  if_body_source  ","(lvar : if_body_source ) compact join ","(lvar : if_body_source ) compact "," if_ if_body_source _source "]}," RuboCop Cop CodeLength build_code_length_calculator":{"type":"method","name":"build_code_length_calculator","children":[],"call":["Metrics Utils CodeLengthCalculator  new "," count_as_one "," count_comments? "," processed_source "]}," RuboCop Cop CodeLength message":{"type":"method","name":"message","children":[],"call":[" format "," cop_label "]}," RuboCop Cop Migration DepartmentName on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":["name length "," contain_unexpected_character_for_department_name? "," check_cop_name "," valid_content_token? ","name strip ","Regexp  last_match scan ","Regexp  last_match ","Regexp  last_match length ","comment text !~ ","comment text "," processed_source each_comment "," processed_source "," processed_source comments each "," processed_source comments "]}," RuboCop Cop Metrics Utils RepeatedCsendDiscount reset_on_lvasgn":{"type":"method","name":"reset_on_lvasgn","children":[],"call":["@repeated_csend delete ","node children first ","node children "]}," RuboCop Cop Metrics Utils RepeatedCsendDiscount discount_for_repeated_csend?":{"type":"method","name":"discount_for_repeated_csend?","children":[],"call":["seen equal? ! ","seen equal? ","@repeated_csend []= ","@repeated_csend fetch ","receiver children first ","receiver children ","receiver lvar_type? ","csend_node receiver ","csend_node receiver  children first ","csend_node receiver  children ","csend_node receiver  lvar_type? ","csend_node csend_node receiver  "]}," RuboCop Cop Metrics Utils RepeatedCsendDiscount reset_repeated_csend":{"type":"method","name":"reset_repeated_csend","children":[],"call":[]}," RuboCop Cop Metrics Utils CodeLengthCalculator line_numbers_of_inner_nodes":{"type":"method","name":"line_numbers_of_inner_nodes","children":[],"call":["line_numbers to_a ","line_numbers merge "," line_range ","node each_descendant ","Set  new ","Set  new  to_a ","Set  new  merge ","  line_range  "]}," RuboCop Cop Metrics Utils CodeLengthCalculator namespace_module?":{"type":"method","name":"namespace_module?","children":[],"call":[" classlike_node? ","node body "]}," RuboCop Cop Metrics Utils CodeLengthCalculator classlike_code_length":{"type":"method","name":"classlike_code_length","children":[],"call":["length + "," irrelevant_line? ","@processed_source [] ","target_line_numbers reduce ","body_line_numbers - "," line_numbers_of_inner_nodes "," line_range to_a [] "," line_range to_a "," line_range "," namespace_module? ","body_line_numbers -  reduce "," line_range to_a []  - "]}," RuboCop Cop Metrics Utils AbcSizeCalculator argument?":{"type":"method","name":"argument?","children":[],"call":["ARGUMENT_TYPES  include? ","node type "," capturing_variable? ","node children first ","node children ","node argument_type? "]}," RuboCop Cop Metrics Utils AbcSizeCalculator assignment_doubled_in_ast?":{"type":"method","name":"assignment_doubled_in_ast?","children":[],"call":["node and_asgn_type? ","node or_asgn_type? ","node masgn_type? "]}," RuboCop Cop Metrics Utils AbcSizeCalculator capturing_variable?":{"type":"method","name":"capturing_variable?","children":[],"call":["(str \"^_\") match? ! ","(str \"^_\") match? ","name to_s start_with? ! ","name to_s start_with? ","name to_s ","name start_with? ! ","name start_with? "]}," RuboCop Cop Metrics Utils AbcSizeCalculator simple_assignment?":{"type":"method","name":"simple_assignment?","children":[],"call":[" argument? "," reset_on_lvasgn ","node lvasgn_type? ","node equals_asgn? ","node masgn_type? "," capturing_variable? ","node children first ","node children ","node equals_asgn? ! "]}," RuboCop Cop Metrics Utils AbcSizeCalculator assignment?":{"type":"method","name":"assignment?","children":[],"call":[" capturing_variable? ","node children first ","node children "," simple_assignment? ","node setter_method? ","node respond_to? ","node op_asgn_type? ","node for_type? "," argument? "," compound_assignment ","node shorthand_asgn? ","node masgn_type? "]}," RuboCop Cop Metrics BlockNesting on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[" check_nesting_level "," processed_source ast "," processed_source "," cop_config [] "," cop_config "," processed_source blank? "]}," RuboCop Cop Lint UselessElseWithoutRescue on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[" add_offense ","diagnostic level ","diagnostic location ","diagnostic reason == ","diagnostic reason "," processed_source diagnostics each "," processed_source diagnostics "," processed_source "]}," RuboCop Cop Lint UselessAssignment joining_forces":{"type":"method","name":"joining_forces","children":[],"call":[]}," RuboCop Cop Lint UnusedMethodArgument joining_forces":{"type":"method","name":"joining_forces","children":[],"call":[]}," RuboCop Cop Lint UnusedBlockArgument joining_forces":{"type":"method","name":"joining_forces","children":[],"call":[]}," RuboCop Cop Lint UnreachableLoop left_siblings_of":{"type":"method","name":"left_siblings_of","children":[],"call":["node parent children [] ","node sibling_index ","node parent children ","node parent "]}," RuboCop Cop Lint UnreachableLoop preceded_by_continue_statement?":{"type":"method","name":"preceded_by_continue_statement?","children":[],"call":["sibling each_descendant any? ","sibling each_descendant "," loop_method? ","sibling loop_keyword? "," left_siblings_of any? "," left_siblings_of ","break_statement left_siblings any? ","break_statement left_siblings ","sibling is_a? "]}," RuboCop Cop Lint UnreachableLoop check_case":{"type":"method","name":"check_case","children":[],"call":[" break_statement? ","branch body ","node when_branches all? ","node when_branches ","node else_branch ","node node else_branch  "]}," RuboCop Cop Lint UnreachableLoop check_if":{"type":"method","name":"check_if","children":[],"call":[" break_statement? ","node else_branch ","node if_branch ","node node else_branch  ","node node if_branch  "]}," RuboCop Cop Lint UnreachableLoop break_statement?":{"type":"method","name":"break_statement?","children":[],"call":[" check_case "," check_if "," break_statement? ","statements any? ","node type "," break_command? "," preceded_by_continue_statement? ! "," preceded_by_continue_statement? ","statements find "]}," RuboCop Cop Lint UnreachableLoop statements":{"type":"method","name":"statements","children":[],"call":["body children ","body begin_type? ","body nil? ","node body ","node body  children ","node body  begin_type? ","node body  nil? ","node node body  "]}," RuboCop Cop Lint UnreachableLoop check":{"type":"method","name":"check","children":[],"call":[" add_offense "," preceded_by_continue_statement? "," break_statement? ","statements find "," statements "," conditional_continue_keyword? "," statements  find ","  statements  "]}," RuboCop Cop Lint UnreachableLoop loop_method?":{"type":"method","name":"loop_method?","children":[],"call":["send_node method? ","send_node enumerator_method? ","send_node enumerable_method? ","node send_node ","node block_type? "," matches_ignored_pattern? ","send_node source "," matches_allowed_pattern? ","node numblock_type? "," matches_allowed_pattern? ! ","node send_node  method? ","node send_node  enumerator_method? ","node send_node  enumerable_method? ","node node send_node  ","node send_node  source "]}," RuboCop Cop Lint UnreachableLoop on_block":{"type":"method","name":"on_block","children":[],"call":[" check "," loop_method? "]}," RuboCop Cop Lint UnreachableLoop on_while":{"type":"method","name":"on_while","children":[],"call":[" check "]}," RuboCop Cop Lint UnderscorePrefixedVariableName joining_forces":{"type":"method","name":"joining_forces","children":[],"call":[]}," RuboCop Cop Lint TopLevelReturnWithArgument ancestors_valid?":{"type":"method","name":"ancestors_valid?","children":[],"call":["prohibited_ancestors none? ","return_node each_ancestor ","return_node each_ancestor  none? "]}," RuboCop Cop Lint TopLevelReturnWithArgument on_return":{"type":"method","name":"on_return","children":[],"call":[" add_offense "," ancestors_valid? ","return_node arguments? "," remove_arguments "," top_level_return_with_any_argument? "]}," RuboCop Cop Lint ShadowingOuterLocalVariable joining_forces":{"type":"method","name":"joining_forces","children":[],"call":[]}," RuboCop Cop Lint ShadowedArgument joining_forces":{"type":"method","name":"joining_forces","children":[],"call":[]}," RuboCop Cop Lint SelfAssignment rhs_matches_lhs?":{"type":"method","name":"rhs_matches_lhs?","children":[],"call":["rhs children first == ","lhs children first ","lhs children ","rhs children first ","rhs children ","rhs type == ","ASSIGNMENT_TYPE_TO_RHS_TYPE  [] ","lhs type ","rhs type "]}," RuboCop Cop Lint SelfAssignment multiple_self_assignment?":{"type":"method","name":"multiple_self_assignment?","children":[],"call":[" rhs_matches_lhs? ","lhs children zip all? ","lhs children zip ","rhs children ","lhs children ","lhs children size == ","rhs children size ","lhs children size ","rhs array_type? "]}," RuboCop Cop Lint SelfAssignment on_or_asgn":{"type":"method","name":"on_or_asgn","children":[],"call":[" add_offense "," rhs_matches_lhs? "]}," RuboCop Cop Lint SelfAssignment on_masgn":{"type":"method","name":"on_masgn","children":[],"call":[" add_offense "," multiple_self_assignment? "]}," RuboCop Cop Lint SelfAssignment on_casgn":{"type":"method","name":"on_casgn","children":[],"call":[" add_offense ","lhs_name == ","lhs_scope == "]}," RuboCop Cop Lint SelfAssignment on_lvasgn":{"type":"method","name":"on_lvasgn","children":[],"call":[" add_offense ","rhs source == ","lhs to_s ","rhs source ","rhs type == ","rhs type ","ASSIGNMENT_TYPE_TO_RHS_TYPE  [] ","node type "]}," RuboCop Cop Lint ScriptPermission on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[" autocorrect "," autocorrect_requested? "," add_offense "," format_message_from "," processed_source "," processed_source comments [] "," processed_source comments "," executable? "," processed_source start_with? ","Platform  windows? ","@options key? "," format_ format_message_from _from "," processed_source  processed_source comments [] s [] "," processed_source  processed_source comments [] s "]}," RuboCop Cop Lint SafeNavigationConsistency location":{"type":"method","name":"location","children":[],"call":["node loc expression join ","unsafe_method_call loc expression ","unsafe_method_call loc ","node loc expression ","node loc ","node source_range join ","unsafe_method_call source_range ","node source_range "]}," RuboCop Cop Lint RedundantCopEnableDirective on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":["corrector remove "," range_with_comma "," add_offense "," format "," all_or_name "," range_of_offense ","offenses each "," processed_source comment_config extra_enabled_comments "," processed_source comment_config "," processed_source "," processed_source blank? "," register_offense "," processed_source raw_source include? ! "," processed_source raw_source include? "," processed_source raw_source "," processed_source comment_config extra_enabled_comments  each "]}," RuboCop Cop Lint OutOfRangeRegexpRef regexp_captures":{"type":"method","name":"regexp_captures","children":[],"call":["named_capture positive? ","e respond_to? ","e type? ","tree each_expression "]}," RuboCop Cop Lint OutOfRangeRegexpRef contain_non_literal?":{"type":"method","name":"contain_non_literal?","children":[],"call":["node children first str_type? ! ","node children first str_type? ","node children first ","node children ","node children size != ","node children size "]}," RuboCop Cop Lint OutOfRangeRegexpRef on_nth_ref":{"type":"method","name":"on_nth_ref","children":[],"call":[" add_offense ","backref > ","@valid_ref nil? "," format ","@valid_ref == ","@valid_ref zero? ","backref <= "]}," RuboCop Cop Lint OutOfRangeRegexpRef on_regexp":{"type":"method","name":"on_regexp","children":[],"call":[" regexp_captures ","Regexp Parser  parse ","node content "," contain_non_literal? "]}," RuboCop Cop Lint OutOfRangeRegexpRef on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[]}," RuboCop Cop Lint OrderedMagicComments on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[" autocorrect "," add_offense "," processed_source buffer line_range ","encoding_line + "," processed_source buffer "," processed_source ","encoding_line < "," magic_comment_lines "," processed_source buffer source empty? "," processed_source buffer source "," processed_source buffer line_ processed_source buffer line_range  "]}," RuboCop Cop Lint NonDeterministicRequireOrder correct_block":{"type":"method","name":"correct_block","children":[],"call":["corrector replace ","node receiver source ","node receiver ","node source "," unsorted_dir_block? ","node receiver node receiver source  ","node node receiver source  "]}," RuboCop Cop Lint MissingSuper stateless_class?":{"type":"method","name":"stateless_class?","children":[],"call":["STATELESS_CLASSES  include? ","node const_name "]}," RuboCop Cop Lint MissingSuper inside_class_with_stateful_parent?":{"type":"method","name":"inside_class_with_stateful_parent?","children":[],"call":[" stateless_class? ! "," stateless_class? ","class_node parent_class ","node each_ancestor first ","node each_ancestor "," class_new_block ","class_node class_type? ","node parent "," allowed_class? ! "," allowed_class? ","node each_ancestor first  parent_class ","node parent  parent_class ","node each_ancestor first  class_type? ","node parent  class_type? "]}," RuboCop Cop Lint MissingSuper contains_super?":{"type":"method","name":"contains_super?","children":[],"call":["node each_descendant any? ","node each_descendant "]}," RuboCop Cop Lint MissingSuper callback_method_def?":{"type":"method","name":"callback_method_def?","children":[],"call":["node each_ancestor first ","node each_ancestor ","MODULE_LIFECYCLE_CALLBACKS  include? ","CLASS_LIFECYCLE_CALLBACKS  include? ","OBJECT_LIFECYCLE_CALLBACKS  include? ","node method_name ","CALLBACKS  include? ","node node method_name  "]}," RuboCop Cop Lint MissingSuper offender?":{"type":"method","name":"offender?","children":[],"call":[" contains_super? ! "," contains_super? "," callback_method_def? ","node method? "]}," RuboCop Cop Lint MissingSuper on_defs":{"type":"method","name":"on_defs","children":[],"call":[" add_offense "," contains_super? "," callback_method_def? ! "," callback_method_def? "]}," RuboCop Cop Lint MissingSuper on_def":{"type":"method","name":"on_def","children":[],"call":[" add_offense "," callback_method_def? "," inside_class_with_stateful_parent? ","node method? "," offender? "]}," RuboCop Cop Lint MissingCopEnableDirective on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[" add_offense "," message "," source_range ","line_range min "," processed_source buffer "," processed_source ","line_range max - < ","max_range + ","line_range max - ","line_range max ","line_ranges each "," processed_source disabled_line_ranges each "," processed_source disabled_line_ranges "," cop_config [] "," cop_config "," processed_source comment_at_line ","line_range begin "," max_range + "," max_range "," each_missing_enable "," acceptable_range? "," source_ source_range  ","line_ source_range  min ","line_ source_range  max - < ","max_ source_range  + "," cop_config []  + ","line_ source_range  max - ","line_ source_range  max ","line_ source_range s each "," processed_source disabled_line_ source_range s each "," processed_source disabled_line_ source_range s "," processed_source  processed_source comment_at_line _at_line ","line_ source_range  begin "," max_ source_range  + ","  cop_config []  + "," max_ source_range  ","  cop_config []  "," acceptable_ source_range ? "]}," RuboCop Cop Lint Loop indent":{"type":"method","name":"indent","children":[],"call":["  * ","node loc column ","node loc "]}," RuboCop Cop Lint Loop build_break_line":{"type":"method","name":"build_break_line","children":[],"call":[" indent ","node condition source ","node condition ","node while_post_type? "]}," RuboCop Cop Lint Loop keyword_and_condition_range":{"type":"method","name":"keyword_and_condition_range","children":[],"call":["node body loc end end join ","node source_range end ","node source_range ","node body loc end end ","node body loc end ","node body loc ","node body "]}," RuboCop Cop Lint FloatComparison check_numeric_returning_method":{"type":"method","name":"check_numeric_returning_method","children":[],"call":[" Integer positive? "," Integer ","precision source ","node first_argument "," Float negative? "," Float ","node receiver source ","node receiver ","node method_name ","node first_argument  source "]}," RuboCop Cop Lint FloatComparison check_send":{"type":"method","name":"check_send","children":[],"call":[" check_numeric_returning_method ","FLOAT_INSTANCE_METHODS  include? ","node method_name ","node receiver ","FLOAT_RETURNING_METHODS  include? "," float? ","node arithmetic_operation? "]}," RuboCop Cop Lint FloatComparison float?":{"type":"method","name":"float?","children":[],"call":[" float? ","node children first ","node children "," check_send ","node type "]}," RuboCop Cop Lint FloatComparison on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," float? ","EQUALITY_METHODS  include? ","node method_name "]}," RuboCop Cop Lint EmptyConditionalBody on_if":{"type":"method","name":"on_if","children":[],"call":[" add_offense "," format ","node keyword "," comment_lines? "," cop_config [] "," cop_config ","node body "," contains_comments? "," autocorrect "," same_line? ","node loc end ","node loc ","node loc begin ","node parent "]}," RuboCop Cop Lint DuplicateRescueException rescued_exceptions":{"type":"method","name":"rescued_exceptions","children":[],"call":["rescue_group values "]}," RuboCop Cop Lint DuplicateRescueException on_rescue":{"type":"method","name":"on_rescue","children":[],"call":[" add_offense ","previous add? ","rescued_exceptions each "," rescued_exceptions ","resbodies each_with_object ","Set  new "," rescue_modifier? ","resbody exceptions ","node resbody_branches each_with_object ","node resbody_branches "," rescued_exceptions  each ","resbody exceptions  each ","  rescued_exceptions  "," resbody exceptions  "]}," RuboCop Cop Lint BinaryOperatorWithIdenticalOperands on_and":{"type":"method","name":"on_and","children":[],"call":[" add_offense "," format ","node operator ","node lhs == ","node rhs ","node lhs "]}," RuboCop Cop Lint BinaryOperatorWithIdenticalOperands on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format ","lhs == ","rhs basic_literal? ","lhs basic_literal? ","node arithmetic_operation? ","node binary_operation? ","MATH_OPERATORS  include? ","node method_name ","ALLOWED_MATH_OPERATORS  include? "]}," RuboCop Cop Lint AmbiguousRegexpLiteral on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[" add_parentheses "," add_offense ","diagnostic level ","diagnostic location "," find_offense_node_by ","diagnostic reason == ","diagnostic reason "," processed_source diagnostics each "," processed_source diagnostics "," processed_source "," target_ruby_version >= "," target_ruby_version "," find_ find_offense_node_by _by "]}," RuboCop Cop Lint AmbiguousOperator message":{"type":"method","name":"message","children":[],"call":[" format ","AMBIGUITIES  [] ","diagnostic location source ","diagnostic location "]}," RuboCop Cop Lint AmbiguousOperator on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[" add_parentheses "," add_offense ","diagnostic level ","diagnostic location "," message "," find_offense_node_by ","diagnostic reason == ","diagnostic reason "," processed_source diagnostics each "," processed_source diagnostics "," processed_source ","  message  "," find_ find_offense_node_by _by "]}," RuboCop Cop Layout ExtraSpacing on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[" check_tokens "," processed_source ast "," processed_source "," processed_source tokens each_cons "," processed_source tokens ","Set  new "," force_equal_sign_alignment? "," processed_source blank? "," aligned_locations "," processed_source comments map "," processed_source comments "]}," RuboCop Cop InternalAffairs UselessMessageAssertion on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[" add_offense "," assertions_using_described_class_msg each "," assertions_using_described_class_msg "]}," RuboCop Cop Gemspec RequiredRubyVersion not_equal_message":{"type":"method","name":"not_equal_message","children":[],"call":[" format ","File  basename "," processed_source file_path "," processed_source "]}," RuboCop Config for_badge":{"type":"method","name":"for_badge","children":[],"call":["(send nil :fetch\n  (send\n    (send\n      (lvar :badge) :department) :to_s)) merge "," fetch ","badge department to_s ","badge department "," for_cop ","badge to_s ","department_config merge "," [] ","badge department_name ","@badge_config_cache [] "," []  merge "]}," RuboCop Cop Style MultilineMemoization message":{"type":"method","name":"message","children":[],"call":[" style == "," style "]}," RuboCop Cop Style MissingElse message_template":{"type":"method","name":"message_template","children":[],"call":[" empty_else_style "]}," RuboCop Cop Style MethodCallWithoutArgsParentheses offense_range":{"type":"method","name":"offense_range","children":[],"call":["node loc begin join ","node loc end ","node loc ","node loc begin "]}," RuboCop Cop Style MethodCallWithArgsParentheses OmitParentheses offense_range":{"type":"method","name":"offense_range","children":[],"call":["node loc begin join ","node loc end ","node loc ","node loc begin "]}," RuboCop Cop Style LineEndConcatenation on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[" check_token_set "," processed_source tokens each_index "," processed_source tokens "," processed_source "]}," RuboCop Cop Style InverseMethods message":{"type":"method","name":"message","children":[],"call":[" format "]}," RuboCop Cop Style InlineComment on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[" add_offense ","comment text match? ","comment text "," comment_line? "," processed_source [] ","comment loc line - ","comment loc line ","comment loc "," processed_source "," processed_source comments each "," processed_source comments "]}," RuboCop Cop Style InfiniteLoop joining_forces":{"type":"method","name":"joining_forces","children":[],"call":[]}," RuboCop Cop Style FrozenStringLiteralComment on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[" ensure_comment "," processed_source "," ensure_enabled_comment "," ensure_no_comment "," style "," processed_source tokens empty? "," processed_source tokens "]}," RuboCop Cop Style Encoding on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":["corrector remove "," range_with_surrounding_space "," add_offense "," processed_source buffer line_range ","line_number + "," processed_source buffer "," processed_source "," offense "," encoding_line_number "," processed_source buffer source empty? "," processed_source buffer source "," register_offense "," offense? "," comments each "," comments ","  processed_source buffer line_range _with_surrounding_space "," processed_source buffer line_ processed_source buffer line_range  "," encoding_line_number  + "," encoding_ encoding_line_number  "]}," RuboCop Cop Style EmptyLiteral offense_message":{"type":"method","name":"offense_message","children":[],"call":[" format "," preferred_string_literal "," frozen_string_literals_enabled? ! "," frozen_string_literals_enabled? "," str_node "," offense_hash_node? "," offense_array_node? "," frozen_strings? ! "," frozen_strings? "]}," RuboCop Cop Style DoubleCopDisableDirective on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":["corrector replace ","comment text [] ","comment text ","comment text start_with? "," add_offense ","comment text scan size > ","comment text scan size ","comment text scan "," processed_source comments each "," processed_source comments "," processed_source ","comment text gsub "]}," RuboCop Cop Style DisableCopsWithinSourceCodeDirective on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":["corrector replace "," add_offense "," rubocop_directive_comment? "," processed_source comments each "," processed_source comments "," processed_source "," register_offense ","disallowed_cops any? ","directive_cops - "," allowed_cops "," directive_cops ","directive_cops -  any? "," directive_cops  - ","  directive_cops  "]}," RuboCop Cop Style Copyright offense_range":{"type":"method","name":"offense_range","children":[],"call":[" source_range "," processed_source buffer "," processed_source "]}," RuboCop Cop Style Copyright on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":["corrector insert_before "," autocorrect_notice ","token pos "," range_between ","token nil? "," insert_notice_before "," processed_source "," verify_autocorrect_notice! "," add_offense "," format "," notice "," offense_range "," notice_found? "," notice empty? "," insert_notice_before  pos "," token pos _between ","  range_between _between "," insert_notice_before  nil? "," offense_token pos  "," offense_ range_between  "]}," RuboCop Cop Style CommentAnnotation register_offense":{"type":"method","name":"register_offense","children":[],"call":["corrector replace ","first_word upcase ","note nil? "," add_offense "," format "," correct_offense "," requires_colon? ","annotation keyword ","annotation note nil? ","annotation note "," annotation_range "," annotation_ annotation_range  "]}," RuboCop Cop Style CommentAnnotation on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[" register_offense "," annotation_range "," correct_annotation? ! "," correct_annotation? "," annotation? "," split_comment "," inline_comment? "," first_comment_line? "," processed_source comments "," processed_source "," processed_source comments each_with_index ","annotation correct? ! ","annotation correct? "," requires_colon? ","annotation annotation? ","AnnotationComment  new "," keywords "," annotation_ annotation_range  "," AnnotationComment  new _range "," correct_AnnotationComment  new ? ! "," correct_AnnotationComment  new ? "," AnnotationComment  new ? ","AnnotationComment  new  correct? ! ","AnnotationComment  new  correct? ","AnnotationComment  new  AnnotationComment  new ? "]}," RuboCop Cop Style BlockComments on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":["corrector remove ","corrector replace ","contents source gsub gsub gsub ","contents source gsub gsub ","contents source gsub ","contents source ","contents length zero? ","contents length "," parts "," add_offense ","comment document? "," processed_source comments each "," processed_source comments "," processed_source ","contents empty? "]}," RuboCop Cop Style AsciiComments on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[" add_offense "," first_offense_range "," only_allowed_non_ascii_chars? ","comment text ","comment text ascii_only? "," processed_source comments each "," processed_source comments "," processed_source "]}," RuboCop Cop RangeHelp move_pos_str":{"type":"method","name":"move_pos_str","children":[],"call":["pos negative? ","size * ","src [] == ","src [] ","pos + ","size -@ ","step == ","needle length ","needle length  * ","needle length  -@ "]}," RuboCop Cop Lint OutOfRangeRegexpRef check_regexp":{"type":"method","name":"check_regexp","children":[],"call":[" regexp_captures ","Regexp Parser  parse ","regexp content "," contain_non_literal? ","node each_capture count ","node each_capture ","named_capture positive? ","node interpolation? ","node each_capture count  positive? "]}," RuboCop Cop Lint OutOfRangeRegexpRef on_when":{"type":"method","name":"on_when","children":[],"call":["(send\n  (lvar :regexp_conditions) :map) compact max ","(send\n  (lvar :regexp_conditions) :map) compact "," check_regexp ","regexp_conditions map ","node conditions select ","node conditions ","(send\n  (lvar :regexp_conditions) :filter_map) max ","regexp_conditions filter_map ","(send\n  (lvar :node conditions select ) :map) compact max ","(send\n  (lvar :node conditions select ) :map) compact ","node conditions select  map ","(send\n  (lvar :node conditions select ) :filter_map) max ","node conditions select  filter_map "]}," RuboCop Cop Lint OutOfRangeRegexpRef on_send":{"type":"method","name":"on_send","children":[],"call":[" check_regexp ","node first_argument ","REGEXP_ARGUMENT_METHODS  include? ","node method_name ","node receiver ","REGEXP_CAPTURE_METHODS  include? "]}," RuboCop Cop Lint OutOfRangeRegexpRef on_match_with_lvasgn":{"type":"method","name":"on_match_with_lvasgn","children":[],"call":[" check_regexp ","node children first ","node children "]}," RuboCop Cop Layout ExtraSpacing aligned_locations":{"type":"method","name":"aligned_locations","children":[],"call":["aligned << ","loc line ","col == ","after column ","before column ","loc column ","locs each_cons ","Set  [] ","locs last line ","locs last ","locs first line ","locs first ","locs empty? ","aligned size == ","aligned size ","locs size > ","locs size ","Set  []  << ","loc column  == ","after loc column umn ","before loc column umn ","loc loc column umn ","Set  []  size == ","Set  []  size "]}," Rubocop Cop Style TrailingWhitespace inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence "," source_range ","line length - ","line rstrip length ","line rstrip ","line length ","source [] ","line =~ ","source each_with_index "]}," Rubocop Cop Style Tab inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence "," source_range ","spaces length ","source [] ","match captures [] ","match captures ","line match ","source each_with_index ","match captures []  length ","line match  captures [] ","line match  captures ","line line match  "]}," Rubocop Cop Style SpaceAroundEqualsInParameterDefault inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","equals pos "," space_between? ","tokens [] "," index_of_first_token "," on_node ","  index_of_first_token _of_first_token "]}," Rubocop Cop Style SpaceInsideHashLiteralBraces inspect":{"type":"method","name":"inspect","children":[],"call":[" check ","tokens [] ","e_ix - ","b_ix + ","tokens [] type == ","tokens [] type "," index_of_last_token "," index_of_first_token "," on_node "," index_of_last_token  - "," index_of_first_token  + "]}," Rubocop Cop Style SpaceInside inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence "," format ","Parser Source Range  new ","t2 pos begin_pos ","t2 pos ","t1 pos end_pos ","t1 pos "," space_between? ","t2 pos line == ","t1 pos line ","t2 pos line ","t2 type == ","t2 type ","t1 type == ","t1 type ","tokens each_cons "," specifics "]}," Rubocop Cop Style SpaceAroundBraces get_positions_not_to_check":{"type":"method","name":"get_positions_not_to_check","children":[],"call":["positions_not_to_check << ","t pos ","t type == ","t type ","tokens [] each ","tokens [] "," index_of_last_token "," index_of_first_token "," on_node ","positions_not_to_check << << ","tokens [] pos "]}," Rubocop Cop Style SpaceAroundBraces inspect":{"type":"method","name":"inspect","children":[],"call":[" check ","type2 == ","type1 == ","(sym :tLCURLY) include? ","t2 type ","t1 type ","(send\n  (array\n    (send\n      (lvar :t1) :pos)\n    (send\n      (lvar :t2) :pos)) :-\n  (lvar :positions_not_to_check)) size < ","(send\n  (array\n    (send\n      (lvar :t1) :pos)\n    (send\n      (lvar :t2) :pos)) :-\n  (lvar :positions_not_to_check)) size ","(send\n  (lvar :t1) :pos) - ","t2 pos ","t1 pos ","tokens each_cons "," get_positions_not_to_check ","(send\n  (array\n    (send\n      (lvar :t1) :pos)\n    (send\n      (lvar :t2) :pos)) :-\n  (lvar : get_positions_not_to_check )) size < ","(send\n  (array\n    (send\n      (lvar :t1) :pos)\n    (send\n      (lvar :t2) :pos)) :-\n  (lvar : get_positions_not_to_check )) size "," get_ get_positions_not_to_check  "]}," Rubocop Cop Style SpaceAroundOperators get_positions_not_to_check":{"type":"method","name":"get_positions_not_to_check","children":[],"call":[" do_not_check_singleton_operator_defs "," do_not_check_def_things "," do_not_check_class_lshift_self "," do_not_check_param_default "," do_not_check_block_arg_pipes "]}," Rubocop Cop Style SpaceAroundOperators inspect":{"type":"method","name":"inspect","children":[],"call":[" check_missing_space "," add_offence ","token pos "," has_space? ","token type ","positions_not_to_check include? ","token_before type == ","token_before type ","tokens each_cons "," get_positions_not_to_check "," get_positions_not_to_check  include? "," get_ get_positions_not_to_check  "]}," Rubocop Cop Style SurroundingSpace build_token_table":{"type":"method","name":"build_token_table","children":[],"call":["table []= ","t pos column ","t pos ","t pos line ","tokens each_with_index "]}," Rubocop Cop Style SpaceAfterCommaEtc inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence "," sprintf "," kind ","t1 pos ","t2 pos column == ","t1 pos column + "," offset ","t1 pos column ","t2 pos column ","t2 pos ","t1 pos line == ","t2 pos line ","t1 pos line ","tokens each_cons "]}," Rubocop Cop Style Semicolon inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence "," source_range ","source [] ","line - ","line_tokens last pos column ","line_tokens last pos ","line_tokens last ","line_tokens last type == ","line_tokens last type ","(send\n  (lvar :tokens) :group_by) each ","t pos line ","t pos ","tokens group_by ","source [] index ","expr_on_line size > ","expr_on_line size ","lines each ","exprs_lines group_by ","e loc expression line ","e loc expression ","e loc ","exprs map ","exprs size < ","exprs size ","node children "," on_node ","line_tokens last pos line_tokens last pos column  ","line_tokens last pos source [] index  ","node children _lines group_by ","node children  map ","node children  size < ","node children  size "]}," Rubocop Cop Style RescueModifier normal_rescue?":{"type":"method","name":"normal_rescue?","children":[],"call":[" process_regular_node ","first_child type == ","first_child type ","node children first ","node children ","node type ","node children first  type == ","node children first  type "]}," Rubocop Cop Style MethodAndVariableSnakeCase inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","n location expression ","n location ","OPERATOR_METHODS  include? ","name =~ "," name_of_setter "," name_of_variable "," name_of_singleton_method "," name_of_instance_method ","n type "," on_node "]}," Rubocop Cop Style LineLength inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence "," source_range ","line length - ","line length ","source [] "," sprintf ","line length > ","LineLength  max ","source each_with_index ","LineLength  LineLength  max  "]}," Rubocop Cop Style LineContinuation inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence "," source_range ","line length - ","line length ","source [] ","line =~ ","source each_with_index "]}," Rubocop Cop Style LeadingCommentSpace inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","comment loc ","comment loc line == ","comment loc line ","comment text start_with? ","comment text ","comment text =~ ","comments each "]}," Rubocop Cop Style WhileUntilModifier inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","node loc expression ","node loc "," check ","node loc end "," on_node "]}," Rubocop Cop Style IfUnlessModifier inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence "," error_message ","node loc expression ","node loc "," check "," if_else? "," elsif? "," modifier_if? "," ternary_op? "," on_node "]}," Rubocop Cop Style EndOfLine inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence "," source_range ","line length - ","line length ","source [] ","line =~ ","source each_with_index "]}," Rubocop Cop Style Encoding inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence "," source_range ","source [] ","source [] =~ ","RUBY_VERSION  >= "]}," Rubocop Cop Style EmptyLines inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence "," source_range ","source [] ","line - ","source [] empty? ","(erange\n  (begin\n    (send\n      (lvar :prev_line) :+\n      (int 1)))\n  (lvar :cur_line)) each ","prev_line + ","line_diff > ","cur_line - ","token pos line ","token pos ","tokens each ","tokens empty? ","(erange\n  (begin\n    (send\n      (lvar :prev_line) :+\n      (int 1)))\n  (lvar :token pos line )) each ","cur_line -  > ","token pos line  - "]}," Rubocop Cop Style Documentation inspect":{"type":"method","name":"inspect","children":[],"call":[" check_modules "," check_classes ","Parser Source Comment  associate "]}," Rubocop Cop Style BlockNesting inspect":{"type":"method","name":"inspect","children":[],"call":[" check_nesting_level ","BlockNesting  config [] ","BlockNesting  config "]}," Rubocop Cop Style BlockComments inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","comment loc ","comment text start_with? ","comment text ","comments each "]}," Rubocop Cop Style AsciiIdentifiers inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","t pos ","t text =~ ","t text ","t type == ","t type ","tokens each "]}," Rubocop Cop Style AsciiComments inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence ","comment loc ","comment text =~ ","comment text ","comments each "]}," Rubocop Cop Style AccessControl inspect":{"type":"method","name":"inspect","children":[],"call":[" add_offence "," format ","send_node loc expression ","send_node loc ","source [] chomp empty? ","source [] chomp ","source [] ","send_line - ","send_node loc line ","send_start_col - != ","send_start_col - ","send_node loc selector source ","send_node loc selector ","send_node loc expression column "," modifier_node? "," on_node ","class_node children compact each ","class_node children compact ","class_node children ","class_node loc expression column ","class_node loc expression ","class_node loc ","send_node loc line  - ","send_node loc expression column  - != ","send_node loc expression column  - ","send_node loc send_node loc selector source  source ","send_node loc send_node loc selector source  "]}," Rubocop Cop Rails Validation rails?":{"type":"method","name":"rails?","children":[],"call":[]}," Rubocop Cop Lint UnusedLocalVariable inspect":{"type":"method","name":"inspect","children":[],"call":[" inspect_variables "]}," Rubocop Cop Lint ShadowingOuterLocalVariable inspect":{"type":"method","name":"inspect","children":[],"call":[" inspect_variables "]}," Rubocop Cop Lint EndAlignment align_with_start_of_assignment?":{"type":"method","name":"align_with_start_of_assignment?","children":[],"call":["EndAlignment  config [] == ","EndAlignment  config [] ","EndAlignment  config "]}," Rubocop Cop Lint EndAlignment attribute_writer?":{"type":"method","name":"attribute_writer?","children":[],"call":["method to_s [] == ","method to_s [] ","method to_s "]}," Rubocop Cop Lint EndAlignment already_processed_node?":{"type":"method","name":"already_processed_node?","children":[],"call":["@inspected_blocks include? "]}," Rubocop Cop Lint EndAlignment check_block_alignment":{"type":"method","name":"check_block_alignment","children":[],"call":[" add_offence "," sprintf ","start_loc column ","start_loc line ","start_loc source lines to_a first chomp ","start_loc source lines to_a first ","start_loc source lines to_a ","start_loc source lines ","start_loc source ","end_loc column ","end_loc line ","start_loc column != ","block_loc begin line != ","block_loc begin line ","block_loc begin ","block_loc end ","block_loc end  column ","block_loc end  line "]}," Rubocop Cop Lint EndAlignment process_block_assignment":{"type":"method","name":"process_block_assignment","children":[],"call":[" check_block_alignment ","block_node loc ","begin_node loc expression ","begin_node loc ","@inspected_blocks << ","block_node type == ","block_node type "," block_is_on_next_line? ","(sym :block) include? ","args type ","receiver type "," already_processed_node? "]}," Rubocop Cop Lint EndAlignment on_masgn":{"type":"method","name":"on_masgn","children":[],"call":[" process_block_assignment "," align_with_start_of_assignment? "]}," Rubocop Cop Lint EndAlignment on_op_asgn":{"type":"method","name":"on_op_asgn","children":[],"call":[" process_block_assignment "," align_with_start_of_assignment? "]}," Rubocop Cop Lint EndAlignment on_casgn":{"type":"method","name":"on_casgn","children":[],"call":[" process_block_assignment "," align_with_start_of_assignment? "]}," Rubocop Cop Lint EndAlignment on_lvasgn":{"type":"method","name":"on_lvasgn","children":[],"call":[" process_block_assignment "," align_with_start_of_assignment? "]}," Rubocop Cop Lint EndAlignment on_block":{"type":"method","name":"on_block","children":[],"call":[" check_block_alignment ","node loc ","node loc expression "," already_processed_node? "]}," Rubocop Cop Lint EndAlignment inspect":{"type":"method","name":"inspect","children":[],"call":[]}," Rubocop Cop Lint EndAlignment initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Rubocop Config correct_relative_excludes":{"type":"method","name":"correct_relative_excludes","children":[],"call":["rel_path to_s sub + ","rel_path to_s sub ","rel_path to_s "," relative_path ","File  dirname ","base_config loaded_path ","exclude_elem =~ ","exclude_elem is_a? ","all_cops [] map! ","all_cops [] "," relative_path  to_s sub + "," relative_path  to_s sub "," relative_path  to_s "]}," Rubocop CLI excluded_file?":{"type":"method","name":"excluded_file?","children":[],"call":["ConfigStore  for file_to_exclude? ","ConfigStore  for "]}," Rubocop Cop Util symbolize_keys":{"type":"method","name":"symbolize_keys","children":[],"call":["Hash  [] ","k to_sym ","hash map "]}," Rubocop Cop Lint EndAlignment block_is_on_next_line?":{"type":"method","name":"block_is_on_next_line?","children":[],"call":["begin_node loc line != ","block_node loc line ","block_node loc ","begin_node loc line ","begin_node loc "]}," Rubocop Cop Lint EndAlignment on_and":{"type":"method","name":"on_and","children":[],"call":["@inspected_blocks << "," check_block_alignment ","right loc ","node loc expression ","node loc ","right type == ","right type "," already_processed_node? "]}," stub_cop_class":{"type":"method","name":"stub_cop_class","children":[],"call":[" stub_const ","Class  new "]}," RuboCop Formatter SimpleTextFormatter Report correctable":{"type":"method","name":"correctable","children":[],"call":[" colorize "," pluralize "]}," RuboCop Ext RegexpNode each_capture":{"type":"method","name":"each_capture","children":[],"call":["exp capturing? ","exp respond_to? ","named == ","event == "," parsed_tree "," enum_for "," __method__ "," block_given? "]}," RuboCop Ext RegexpNode parsed_tree":{"type":"method","name":"parsed_tree","children":[],"call":["Regexp Parser  parse ","Ext RegexpNode  parsed_cache [] ","Ext RegexpNode  parsed_cache "," content "," interpolation? "," options "," with_interpolations_blanked "]}," RuboCop Ext RegexpNode ==":{"type":"method","name":"==","children":[],"call":[]}," RuboCop Cop Style SoleNestedConditional allow_modifier?":{"type":"method","name":"allow_modifier?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style SoleNestedConditional offending_branch?":{"type":"method","name":"offending_branch?","children":[],"call":["(and\n  (send\n    (lvar :branch) :modifier_form?)\n  (send nil :allow_modifier?)) ! "," allow_modifier? ","branch modifier_form? ","branch ternary? ! ","branch ternary? ","branch else? ! ","branch else? ","branch if_type? ","(and\n  (begin\n    (or\n      (send\n        (lvar :node) :modifier_form?)\n      (send\n        (lvar :branch) :modifier_form?)))\n  (send nil :allow_modifier?)) ! ","node modifier_form? "]}," RuboCop Cop Style SoleNestedConditional on_if":{"type":"method","name":"on_if","children":[],"call":[" add_offense ","branch loc keyword ","branch loc "," format ","node keyword "," offending_branch? ","node if_branch ","node elsif? ","node else? ","node ternary? "," autocorrect ","if_branch loc keyword ","if_branch loc "," use_variable_assignment_in_condition? ","node condition ","node if_branch  loc keyword ","node if_branch  loc "," offending_node if_branch ? ","node if_node if_branch  ","node node if_branch  ","if_node if_branch  loc keyword ","if_node if_branch  loc "]}," RuboCop Cop Style SignalException on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[" custom_fail_methods any? "," custom_fail_methods "," processed_source ast "," processed_source "," processed_source  processed_source ast  "]}," RuboCop Cop Style Semicolon on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[" check_for_line_terminator_or_opener "," processed_source "," processed_source blank? "," processed_source raw_source include? ! "," processed_source raw_source include? "," processed_source raw_source "]}," RuboCop Cop Style RescueModifier indentation_and_offset":{"type":"method","name":"indentation_and_offset","children":[],"call":["node_offset [] ","node_indentation [] "," offset "," indentation ","node_offset []  [] "," offset  [] ","node_indentation []  [] "," indentation  [] "]}," RuboCop Cop Style RescueModifier corrected_block":{"type":"method","name":"corrected_block","children":[],"call":["rescue_args source gsub ","rescue_args source ","operation source gsub ","operation source "," indentation_and_offset "]}," RuboCop Cop Style RescueModifier parenthesized?":{"type":"method","name":"parenthesized?","children":[],"call":[" parentheses? ","node parent "]}," RuboCop Cop Style RedundantSelfAssignment correction_range":{"type":"method","name":"correction_range","children":[],"call":[" range_between ","node first_argument source_range begin_pos ","node first_argument source_range ","node first_argument ","node source_range begin_pos ","node source_range "]}," RuboCop Cop Style RedundantSelfAssignment redundant_assignment?":{"type":"method","name":"redundant_assignment?","children":[],"call":[" redundant_nonself_assignment? ","node receiver "," redundant_self_assignment? ","node method_name to_s [] to_sym ","node method_name to_s [] ","node method_name to_s ","node method_name "]}," RuboCop Cop Style RedundantSelfAssignment method_returning_self?":{"type":"method","name":"method_returning_self?","children":[],"call":["METHODS_RETURNING_SELF  include? "]}," RuboCop Cop Style RedundantSelfAssignment on_send":{"type":"method","name":"on_send","children":[],"call":["corrector remove "," correction_range "," add_offense ","node loc operator ","node loc "," format ","node first_argument method_name ","node first_argument "," redundant_assignment? ","node method_name match? ","node method_name ","node method_name to_s end_with? ","node method_name to_s ","node assignment_method? "]}," RuboCop Cop Style RedundantSelfAssignment on_lvasgn":{"type":"method","name":"on_lvasgn","children":[],"call":["corrector replace ","rhs source "," add_offense ","node loc operator ","node loc "," format ","receiver children first == ","receiver children first ","receiver children ","receiver type == ","receiver type ","ASSIGNMENT_TYPE_TO_RECEIVER_TYPE  [] ","node type "," method_returning_self? "]}," RuboCop Cop Style OneLineConditional ternary_replacement":{"type":"method","name":"ternary_replacement","children":[],"call":[" expr_replacement "]}," RuboCop Cop Style OneLineConditional branch_body_indentation":{"type":"method","name":"branch_body_indentation","children":[],"call":["  * ","@config for_cop [] ","@config for_cop "]}," RuboCop Cop Style OneLineConditional else_branch_to_multiline":{"type":"method","name":"else_branch_to_multiline","children":[],"call":["(begin\n  (lvar :indentation)) chomp ","else_branch source "," branch_body_indentation "," multiline_replacement ","else_branch elsif? ","else_branch if_type? ","else_branch nil? "]}," RuboCop Cop Style OneLineConditional multiline_replacement":{"type":"method","name":"multiline_replacement","children":[],"call":["if_branch + "," else_branch_to_multiline ","node else_branch "," branch_body_indentation ","node condition source ","node condition ","node keyword ","node elsif? ","node respond_to? ","node if_branch ","  * ","node source_range column ","node source_range ","indentation nil? ","  else_branch_to_multiline _to_multiline ","node  else_branch_to_multiline  "," branch_body_  *  ","  *  nil? "]}," RuboCop Cop Style OneLineConditional cannot_replace_to_ternary?":{"type":"method","name":"cannot_replace_to_ternary?","children":[],"call":["node elsif_conditional? "]}," RuboCop Cop Style OneLineConditional always_multiline?":{"type":"method","name":"always_multiline?","children":[],"call":["@config for_cop [] ","@config for_cop "]}," RuboCop Cop Style NonNilCheck find_offense_node":{"type":"method","name":"find_offense_node","children":[],"call":[" unless_and_nil_check? "," not_and_nil_check? "," include_semantic_changes? ","node loc selector ","node loc "," not_equal_to_nil? "]}," RuboCop Cop Style Next on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":["Hash  new "]}," RuboCop Cop Style KeywordParametersOrder remove_kwargs":{"type":"method","name":"remove_kwargs","children":[],"call":["corrector remove "," range_with_surrounding_comma "," range_with_surrounding_space ","kwarg source_range ","kwarg_nodes each "]}," RuboCop Cop Style KeywordParametersOrder right_siblings_of":{"type":"method","name":"right_siblings_of","children":[],"call":["node parent children [] ","node sibling_index + ","node sibling_index ","node parent children ","node parent "]}," RuboCop Cop Style KeywordParametersOrder on_kwoptarg":{"type":"method","name":"on_kwoptarg","children":[],"call":[" remove_kwargs ","corrector insert_before ","kwarg_nodes map join ","kwarg_nodes map ","node parent find == ","node parent find ","node parent "," add_offense ","kwarg_nodes empty? "," right_siblings_of select "," right_siblings_of ","node right_siblings select ","node right_siblings "," append_newline_to_last_kwoptarg "," parentheses? ","node each_ancestor first arguments ","node each_ancestor first ","node each_ancestor "," right_siblings_of select  map join ","node right_siblings select  map join "," right_siblings_of select  map ","node right_siblings select  map "," right_siblings_of select  empty? ","node right_siblings select  empty? ","node each_ancestor first node each_ancestor first arguments  "]}," RuboCop Cop Style CombinableLoops same_collection_looping?":{"type":"method","name":"same_collection_looping?","children":[],"call":["sibling send_node receiver == ","node send_node receiver ","node send_node ","sibling send_node receiver ","sibling send_node ","sibling send_node method? ","node method_name ","sibling send_node arguments == ","node send_node arguments ","sibling send_node arguments ","sibling receiver == ","node receiver ","sibling receiver "]}," RuboCop Cop Style CombinableLoops left_sibling_of":{"type":"method","name":"left_sibling_of","children":[],"call":["node parent children [] ","node parent children ","node parent ","index >= ","node sibling_index - ","node sibling_index ","node sibling_index -  >= ","node sibling_node sibling_index -  - ","node sibling_node sibling_index -  "]}," RuboCop Cop Style CombinableLoops collection_looping_method?":{"type":"method","name":"collection_looping_method?","children":[],"call":["method_name match? ","node send_node method_name ","node send_node ","method_name end_with? ","method_name start_with? ","node send_node method_name to_s ","node method_name to_s ","node method_name ","node send_node method_name  match? ","node send_node method_name to_s  match? ","node method_name to_s  match? ","node method_name  match? ","node send_node node send_node method_name  ","node send_node node send_node method_name to_s  ","node send_node node method_name to_s  ","node send_node node method_name  ","node send_node method_name  end_with? ","node send_node method_name to_s  end_with? ","node method_name to_s  end_with? ","node method_name  end_with? ","node send_node method_name  start_with? ","node send_node method_name to_s  start_with? ","node method_name to_s  start_with? ","node method_name  start_with? ","node send_node node send_node method_name  to_s ","node send_node node send_node method_name to_s  to_s ","node send_node node method_name to_s  to_s ","node send_node node method_name  to_s ","node node send_node method_name  to_s ","node node send_node method_name to_s  to_s ","node node method_name to_s  to_s ","node node method_name  to_s ","node node send_node method_name  ","node node send_node method_name to_s  ","node node method_name to_s  ","node node method_name  "]}," RuboCop Cop Style CombinableLoops on_for":{"type":"method","name":"on_for","children":[],"call":[" add_offense ","node collection == ","sibling collection ","node collection "," left_sibling_of ","node left_sibling ","node parent "," combine_with_left_sibling "," same_collection_looping_for? "," left_sibling_of  collection ","node left_sibling  collection "," left_ left_sibling_of _of "," left_node left_sibling _of ","node left_ left_sibling_of  ","node left_node left_sibling  "," combine_with_left_ left_sibling_of  "," combine_with_left_node left_sibling  "]}," RuboCop Cop Style CombinableLoops on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," same_collection_looping? "," left_sibling_of "," collection_looping_method? ","node left_sibling ","node parent "," combine_with_left_sibling "," same_collection_looping_block? ","node left_sibling body ","node body "," left_ left_sibling_of _of ","node left_ left_sibling_of  "," combine_with_left_ left_sibling_of  ","node left_ left_sibling_of  body "]}," RuboCop Cop Style ClassMethodsDefinitions indent":{"type":"method","name":"indent","children":[],"call":["  * ","node loc column ","node loc "]}," RuboCop Cop Style ClassMethodsDefinitions extract_def_from_sclass":{"type":"method","name":"extract_def_from_sclass","children":[],"call":["corrector remove ","corrector insert_before "," indent ","range source sub! ","def_node method_name ","range source "," source_range_with_comment ","source chomp ","source gsub "," indentation_diff ","range range source sub!  sub! ","range source gsub  sub! "," source_range_with_comment  source sub! ","range range source sub!  ","range source gsub  "," source_range_with_comment  source "," range source sub! _range_with_comment "," source gsub _range_with_comment "," source_ source_range_with_comment _with_comment ","range source sub!  chomp ","source gsub  chomp ","range source sub!  gsub ","source gsub  gsub "]}," RuboCop Cop Style ClassMethodsDefinitions def_nodes":{"type":"method","name":"def_nodes","children":[],"call":["sclass_def each_child_node to_a ","sclass_def each_child_node ","sclass_def begin_type? ","sclass_def def_type? ","sclass_node body ","sclass_node body  each_child_node to_a ","sclass_node body  each_child_node ","sclass_node body  begin_type? ","sclass_node body  def_type? "]}," RuboCop Cop Style ClassMethodsDefinitions contains_non_public_methods?":{"type":"method","name":"contains_non_public_methods?","children":[],"call":[" node_visibility != "," node_visibility "," def_nodes any? "," def_nodes "]}," RuboCop Cop Style ClassMethodsDefinitions def_self_style?":{"type":"method","name":"def_self_style?","children":[],"call":[" style == "," style "]}," RuboCop Cop Style ClassMethodsDefinitions on_defs":{"type":"method","name":"on_defs","children":[],"call":[" add_offense "," format "," def_self_style? ","node receiver self_type? ","node receiver "]}," RuboCop Cop Style ClassMethodsDefinitions on_sclass":{"type":"method","name":"on_sclass","children":[],"call":[" extract_def_from_sclass "," add_offense "," format ","def_node method_name "," node_visibility == "," node_visibility "," def_nodes each "," def_nodes "," contains_non_public_methods? ","node identifier source == ","node identifier source ","node identifier "," def_self_style? "," autocorrect_sclass "," all_methods_public? ","node identifier self_type? "]}," RuboCop Cop Style CaseLikeIf class_reference?":{"type":"method","name":"class_reference?","children":[],"call":["node children [] match? ","node children [] ","node children ","node const_type? "]}," RuboCop Cop Style CaseLikeIf condition_from_match_node":{"type":"method","name":"condition_from_match_node","children":[],"call":[" condition_from_binary_op "]}," RuboCop Cop Style CaseLikeIf condition_from_equality_node":{"type":"method","name":"condition_from_equality_node","children":[],"call":[" class_reference? ! "," class_reference? "," condition_from_binary_op ","  condition_from_binary_op _from_binary_op "]}," RuboCop Cop SpaceBeforePunctuation on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":["PunctuationCorrector  remove_space "," add_offense "," format "," kind "," each_missing_space "," processed_source tokens "," processed_source "," processed_source sorted_tokens "]}," RuboCop Cop SpaceAfterPunctuation on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":["PunctuationCorrector  add_space "," add_offense "," format "," kind ","token pos "," each_missing_space "," processed_source tokens "," processed_source "]}," RuboCop Cop RescueNode rescued_exceptions":{"type":"method","name":"rescued_exceptions","children":[],"call":["rescue_group values "]}," RuboCop Cop RescueNode on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[" processed_source tokens select map "," processed_source tokens select "," processed_source tokens "," processed_source "]}," RuboCop Cop HashTransformMethod from_to_h":{"type":"method","name":"from_to_h","children":[],"call":[]}," RuboCop Cop HashTransformMethod on_bad_to_h":{"type":"method","name":"on_bad_to_h","children":[],"call":[" raise "]}," RuboCop Cop CommentsHelp buffer":{"type":"method","name":"buffer","children":[],"call":[" processed_source buffer "," processed_source "]}," RuboCop Cop CommentsHelp start_line_position":{"type":"method","name":"start_line_position","children":[],"call":[" buffer line_range begin_pos - "," buffer line_range begin_pos "," buffer line_range ","node loc line ","node loc "," buffer "]}," RuboCop Cop CommentsHelp begin_pos_with_comment":{"type":"method","name":"begin_pos_with_comment","children":[],"call":[" start_line_position ","comment location line == ","comment location line ","comment location "," processed_source comments_before_line reverse_each "," processed_source comments_before_line "," processed_source ","node first_line - ","node first_line "," processed_source ast_with_comments [] first "," processed_source ast_with_comments [] "," processed_source ast_with_comments ","first_comment loc line < ","node loc line ","node loc ","first_comment loc line ","first_comment loc "," processed_source ast_with_comments [] first  loc line < "," processed_source ast_with_comments [] first  loc line "," processed_source ast_with_comments [] first  loc "]}," RuboCop Cop CommentsHelp end_position_for":{"type":"method","name":"end_position_for","children":[],"call":[" buffer line_range end_pos "," buffer line_range "," buffer "," buffer line_for_position ","node loc expression end_pos ","node loc expression ","node loc ","node source_range end_pos ","node source_range "]}," RuboCop Cop CommentsHelp source_range_with_comment":{"type":"method","name":"source_range_with_comment","children":[],"call":["Parser Source Range  new "," buffer "," end_position_for "," begin_pos_with_comment "," end_position_for + "," find_visibility_end "," find_visibility_start ","node def_type? ","  end_position_for ition_for ","  begin_pos_with_comment _with_comment ","  end_position_for ition_for + "]}," RuboCop Cop Lint UselessMethodDefinition delegating?":{"type":"method","name":"delegating?","children":[],"call":["node arguments map == ","def_node arguments map ","def_node arguments ","node arguments map ","node arguments ","node arguments? ! ","node arguments? ","node super_type? ","node zsuper_type? ","node nil? "]}," RuboCop Cop Lint UselessMethodDefinition constructor?":{"type":"method","name":"constructor?","children":[],"call":["node method? ","node def_type? "]}," RuboCop Cop Lint UselessMethodDefinition empty_constructor?":{"type":"method","name":"empty_constructor?","children":[],"call":[" comment_lines? "," cop_config [] "," cop_config ","node body "]}," RuboCop Cop Lint UselessMethodDefinition on_def":{"type":"method","name":"on_def","children":[],"call":["corrector remove "," add_offense "," delegating? ","node body "," empty_constructor? "," constructor? "," optional_args? "," use_rest_or_optional_args? ","node parent "," method_definition_with_modifier? "]}," RuboCop Cop Lint TrailingCommaInAttributeDeclaration trailing_comma_range":{"type":"method","name":"trailing_comma_range","children":[],"call":[" range_with_surrounding_space end resize "," range_with_surrounding_space end "," range_with_surrounding_space ","node arguments [] source_range ","node arguments [] ","node arguments "]}," RuboCop Cop Lint TrailingCommaInAttributeDeclaration on_send":{"type":"method","name":"on_send","children":[],"call":["corrector remove "," add_offense "," trailing_comma_range ","node arguments last def_type? ","node arguments last ","node arguments ","node attribute_accessor? ","  trailing_comma_range _range "]}," RuboCop Cop Lint EmptyFile contains_only_comments?":{"type":"method","name":"contains_only_comments?","children":[],"call":[" comment_line? ","line blank? "," processed_source lines all? "," processed_source lines "," processed_source "]}," RuboCop Cop Lint EmptyFile empty_file?":{"type":"method","name":"empty_file?","children":[],"call":[" processed_source buffer source empty? "," processed_source buffer source "," processed_source buffer "," processed_source "]}," RuboCop Cop Lint EmptyFile offending?":{"type":"method","name":"offending?","children":[],"call":[" contains_only_comments? "," cop_config [] ! "," cop_config [] "," cop_config "," empty_file? "]}," RuboCop Cop Lint EmptyFile on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[" add_offense "," source_range "," processed_source buffer "," processed_source "," offending? "," add_global_offense "," source_ source_range  "]}," RuboCop Cop Lint DuplicateRequire on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format ","node method_name ","@required [] add? ","node first_argument ","@required [] ","node parent "," require_call? ","REQUIRE_METHODS  include? ","corrector remove "," range_by_whole_lines ","node source_range "]}," RuboCop Cop Lint DuplicateRequire on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":["(send\n  (const nil :Hash) :new) compare_by_identity ","h []= ","Set  new ","Hash  new "]}," RuboCop Cop Layout TrailingWhitespace offense_range":{"type":"method","name":"offense_range","children":[],"call":[" source_range ","line length ","line rstrip length ","line rstrip "," processed_source buffer "," processed_source "]}," RuboCop Cop Layout TrailingWhitespace on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":["corrector remove "," add_offense "," offense_range "," inside_heredoc? "," skip_heredoc? ","line end_with? ","index + "," processed_source lines each_with_index "," processed_source lines "," processed_source "," extract_heredoc_ranges "," processed_source ast "," process_line "," extract_heredocs "," offense_ offense_range  "," extract_heredoc_ offense_range s "," extract_ extract_heredoc_ranges  "]}," RuboCop Cop Layout TrailingEmptyLines on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[" offense_detected ","blank_lines != "," style == "," style ","whitespace_at_end count - ","whitespace_at_end count ","buffer source [] ","buffer source "," ends_in_end? "," processed_source ","buffer source empty? "," processed_source buffer "," end_with_percent_blank_string? ","whitespace_at_end count -  != ","buffer source []  count - ","buffer source []  count "," processed_source buffer  source [] "," processed_source buffer  source "," processed_source buffer  source empty? "," processed_source  processed_source buffer  "]}," RuboCop Cop Layout SpaceInsideParens on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":["corrector remove "," add_offense "," each_extraneous_space "," processed_source tokens "," processed_source ","corrector insert_before "," each_missing_space "," style == "," style "," process_with_space_style "," processed_source sorted_tokens "," correct_extraneous_space "," process_with_compact_style "," processed_source  processed_source sorted_tokens  "," processed_source sorted_ processed_source sorted_tokens  "]}," RuboCop Cop Layout SpaceBeforeComment on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":["corrector insert_before "," add_offense ","token2 pos ","token1 pos end == ","token2 pos begin ","token1 pos end ","token1 pos ","token1 line == ","token2 line ","token1 line ","token2 comment? "," processed_source tokens each_cons "," processed_source tokens "," processed_source "," processed_source sorted_tokens each_cons "," processed_source sorted_tokens "," same_line? "]}," RuboCop Cop Layout SpaceAfterColon register_offense":{"type":"method","name":"register_offense","children":[],"call":["corrector insert_after "," add_offense "]}," RuboCop Cop Layout RescueEnsureAlignment on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":["locations << ","token pos ","token rescue_modifier? "," processed_source tokens each_with_object "," processed_source tokens "," processed_source "]}," RuboCop Cop Layout LeadingEmptyLines on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":["corrector remove ","Parser Source Range  new ","token begin_pos "," processed_source buffer "," processed_source "," add_offense ","token pos ","token line > ","token line "," processed_source tokens [] "," processed_source tokens "," processed_source tokens []  begin_pos "," processed_source tokens []  pos "," processed_source tokens []  line > "," processed_source tokens []  line "," processed_source  processed_source tokens [] s [] "," processed_source  processed_source tokens [] s "]}," RuboCop Cop Layout LeadingCommentSpace hash_mark":{"type":"method","name":"hash_mark","children":[],"call":[" range_between ","expr begin_pos + ","expr begin_pos "]}," RuboCop Cop Layout LeadingCommentSpace on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":["corrector insert_after "," hash_mark ","comment loc expression ","comment loc "," add_offense "," gemfile_ruby_comment? "," doxygen_comment_style? "," allowed_on_first_line? ","comment loc line == ","comment loc line ","(str \"\\\\A#+[^#\\\\s=:+-]\") match? ","comment text "," processed_source comments each "," processed_source comments "," processed_source ","(str \"\\\\A#+[^#\\\\s=+-]\") match? ","comment source_range ","(str \"\\\\A(?!#\\\\+\\\\+|#--)(#+[^#\\\\s=])\") match? ","comment loc comment loc expression ession ","comment loc comment source_range ession "]}," RuboCop Cop Layout InitialIndentation on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":["corrector remove "," add_offense "," first_token pos "," first_token "," space_before "]}," RuboCop Cop Layout HeredocIndentation register_offense":{"type":"method","name":"register_offense","children":[],"call":[" adjust_minus "," adjust_squiggly ","heredoc_indent_type == "," add_offense ","node loc heredoc_body ","node loc "," message ","  message  "]}," RuboCop Cop Layout EmptyLines on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":["corrector remove "," add_offense "," each_extra_empty_line ","lines sort ","lines << ","token line "," processed_source each_token "," processed_source ","Set  new "," processed_source tokens empty? "," processed_source tokens "," processed_source raw_source include? "," processed_source raw_source "," processed_source tokens each ","Set  new  sort ","Set  new  << "]}," RuboCop Cop Layout EmptyLineAfterMultilineCondition autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector insert_after "," range_by_whole_lines ","node source_range "," lambda ","  range_by_whole_lines _by_whole_lines ","node source_ range_by_whole_lines  "]}," RuboCop Cop Layout EmptyLineAfterMultilineCondition multiline_rescue_exceptions?":{"type":"method","name":"multiline_rescue_exceptions?","children":[],"call":["first first_line != ","last last_line ","first first_line ","exception_nodes size <= ","exception_nodes size "]}," RuboCop Cop Layout EmptyLineAfterMultilineCondition multiline_when_condition?":{"type":"method","name":"multiline_when_condition?","children":[],"call":["when_node conditions first first_line != ","when_node conditions last last_line ","when_node conditions last ","when_node conditions ","when_node conditions first first_line ","when_node conditions first "]}," RuboCop Cop Layout EmptyLineAfterMultilineCondition next_sibling_empty?":{"type":"method","name":"next_sibling_empty?","children":[],"call":["next_sibling nil? ","node parent children [] ","node sibling_index + ","node sibling_index ","node parent children ","node parent ","node parent children []  nil? "]}," RuboCop Cop Layout EmptyLineAfterMultilineCondition next_line_empty?":{"type":"method","name":"next_line_empty?","children":[],"call":[" processed_source [] blank? "," processed_source [] "," processed_source "]}," RuboCop Cop Layout EmptyLineAfterMultilineCondition check_condition":{"type":"method","name":"check_condition","children":[],"call":[" add_offense "," autocorrect "," next_line_empty? ","condition last_line ","condition multiline? "]}," RuboCop Cop Layout EmptyLineAfterMultilineCondition on_rescue":{"type":"method","name":"on_rescue","children":[],"call":[" add_offense "," autocorrect ","rescued_exceptions last "," next_line_empty? ","rescued_exceptions last last_line "," multiline_rescue_exceptions? ! "," multiline_rescue_exceptions? "," rescued_exceptions ","resbodies each ","resbody exceptions ","node resbody_branches each ","node resbody_branches "," rescued_exceptions  last ","resbody exceptions  last "," rescued_exceptions  last last_line ","resbody exceptions  last last_line ","  rescued_exceptions  "," resbody exceptions  "]}," RuboCop Cop Layout EmptyLineAfterMultilineCondition on_case":{"type":"method","name":"on_case","children":[],"call":[" add_offense "," autocorrect "," next_line_empty? ","last_condition last_line "," multiline_when_condition? ! "," multiline_when_condition? ","when_node conditions last ","when_node conditions ","node each_when ","when_node conditions last  last_line "]}," RuboCop Cop Layout EmptyLineAfterMultilineCondition on_while_post":{"type":"method","name":"on_while_post","children":[],"call":[" check_condition ","node condition "," next_sibling_empty? "," right_sibling ","node right_sibling "]}," RuboCop Cop Layout EmptyLineAfterMultilineCondition on_while":{"type":"method","name":"on_while","children":[],"call":[" check_condition ","node condition "]}," RuboCop Cop Layout EmptyLineAfterMultilineCondition on_if":{"type":"method","name":"on_if","children":[],"call":[" check_condition ","node condition "," next_sibling_empty? ","node modifier_form? ","node ternary? "," right_sibling ","node right_sibling "]}," RuboCop Cop Layout EmptyLineAfterMagicComment offending_range":{"type":"method","name":"offending_range","children":[],"call":[" source_range ","last_magic_comment loc line + ","last_magic_comment loc line ","last_magic_comment loc "," processed_source buffer "," processed_source "]}," RuboCop Cop Layout EmptyLineAfterMagicComment on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":["corrector insert_before "," add_offense "," offending_range "," processed_source [] strip empty? "," processed_source [] strip "," processed_source [] ","last_magic_comment loc line ","last_magic_comment loc "," processed_source "," last_magic_comment "," processed_source ast ","  offending_range  "," last_magic_comment  loc line "," last_magic_comment  loc ","  last_magic_comment  "]}," RuboCop Cop Layout EmptyComment on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[" autocorrect "," add_offense "," empty_comment_only? "," comment_text "," processed_source comments each "," processed_source comments "," processed_source "," investigate "," concat_consecutive_comments "," allow_margin_comment? "," processed_source  concat_consecutive_comments  each "," processed_source  concat_consecutive_comments  "," concat_consecutive_ concat_consecutive_comments  "]}," RuboCop Cop Documentation url_for":{"type":"method","name":"url_for","children":[],"call":["cop_class cop_name downcase gsub ","cop_class cop_name downcase ","cop_class cop_name "," department_to_basename ","cop_class department "," base_url_for "," department_to_ department_to_basename name ","  department_to_basename _url_for ","  base_url_for _for "]}," RuboCop Cop Documentation department_to_basename":{"type":"method","name":"department_to_basename","children":[],"call":["department downcase ","department to_s downcase tr ","department to_s downcase ","department to_s "]}," RuboCop Cop Commissioner restricted_map":{"type":"method","name":"restricted_map","children":[],"call":["restrictions empty? ","(or-asgn\n  (send\n    (lvar :map) :[]\n    (lvar :name))\n  (array)) << ","map [] ","restrictions each ","cop class send ","cop class ","callbacks select! ","cop class send  empty? ","cop class send  each "]}," RuboCop Cop Commissioner trigger_restricted_cops":{"type":"method","name":"trigger_restricted_cops","children":[],"call":["cop send "," with_cop_error_handling ","@restricted_map fetch [] ","@restricted_map fetch ","node method_name ","@restricted_map [] [] ","@restricted_map [] ","cop public_send ","node method_node method_name  "]}," RuboCop Cop Commissioner cops_callbacks_for":{"type":"method","name":"cops_callbacks_for","children":[],"call":["@restricted_map []= "," restricted_map ","RESTRICTED_CALLBACKS  include? ","cop respond_to? ","@cops select "]}," RuboCop Cop Bundler GemComment commented_any_descendant?":{"type":"method","name":"commented_any_descendant?","children":[],"call":[" commented? ","node each_descendant any? ","node each_descendant "]}," RuboCop Cop Base builtin?":{"type":"method","name":"builtin?","children":[],"call":[]}," RuboCop Cop Base restrict_on_send":{"type":"method","name":"restrict_on_send","children":[],"call":[]}," RuboCop Cop Base documentation_url":{"type":"method","name":"documentation_url","children":[],"call":[]}," RuboCop ConfigLoader warn_pending_cop":{"type":"method","name":"warn_pending_cop","children":[],"call":[" warn "," Rainbow yellow "," Rainbow ","cop name ","cop metadata [] ","cop metadata "]}," RuboCop ResultCache rubocop_extra_features":{"type":"method","name":"rubocop_extra_features","children":[],"call":["ResultCache  rubocop_required_features ","$LOADED_FEATURES + ","Find  find to_a ","Find  find ","File  join ","File  dirname ","File  absolute_path "]}," RuboCop OptionsValidator validate_cache_enabled_for_cache_root":{"type":"method","name":"validate_cache_enabled_for_cache_root","children":[],"call":[" raise ","@options [] == ","@options [] "]}," RuboCop Options add_cache_options":{"type":"method","name":"add_cache_options","children":[],"call":["@validator validate_cache_enabled_for_cache_root "," option "," section "]}," RuboCop Cop Style StringConcatenation uncorrectable?":{"type":"method","name":"uncorrectable?","children":[],"call":["part each_descendant any? ","part each_descendant ","part heredoc? ","part str_type? ","part dstr_type? ","part multiline? "," heredoc? "]}," RuboCop Cop Style RedundantParentheses like_method_argument_parentheses?":{"type":"method","name":"like_method_argument_parentheses?","children":[],"call":["node arithmetic_operation? ! ","node arithmetic_operation? ","node arguments size == ","node arguments size ","node arguments ","node send_type? ","node first_argument begin_type? ","node first_argument ","node arguments one? ","node parenthesized? ! ","node parenthesized? ","node yield_type? ! ","node yield_type? ","node super_type? ! ","node super_type? ","node send_type? ! "]}," RuboCop Cop Style RedundantParentheses ignore_syntax?":{"type":"method","name":"ignore_syntax?","children":[],"call":[" like_method_argument_parentheses? ","parent until_post_type? ","parent while_post_type? ","node parent "," like_method_argument_node parent heses? ","node parent  until_post_type? ","node parent  while_post_type? ","node node parent  "]}," RuboCop Cop Style MultilineTernaryOperator offense?":{"type":"method","name":"offense?","children":[],"call":["node multiline? ","node ternary? "]}," RuboCop Cop Style ClassMethodsDefinitions indentation_diff":{"type":"method","name":"indentation_diff","children":[],"call":["node1 loc column - ","node2 loc column ","node2 loc ","node1 loc column ","node1 loc "]}," RuboCop Cop Style ClassMethodsDefinitions sclass_only_has_methods?":{"type":"method","name":"sclass_only_has_methods?","children":[],"call":["node body each_child_node all? ","node body each_child_node ","node body ","node body def_type? "]}," RuboCop Cop Style ClassMethodsDefinitions autocorrect_sclass":{"type":"method","name":"autocorrect_sclass","children":[],"call":["corrector insert_after ","rewritten_defs join ","rewritten_defs first ","corrector remove "," sclass_only_has_methods? ","rewritten_defs << "," extract_def_from_sclass "," node_visibility == "," node_visibility "," def_nodes each "," def_nodes "]}," RuboCop Cop Style ClassMethodsDefinitions all_methods_public?":{"type":"method","name":"all_methods_public?","children":[],"call":[" node_visibility == "," node_visibility ","def_nodes all? ","def_nodes empty? "," def_nodes "," def_nodes  all? "," def_nodes  empty? ","  def_nodes  "]}," RuboCop Cop EndKeywordAlignment start_line_range":{"type":"method","name":"start_line_range","children":[],"call":[" range_between ","range begin_pos + ","source =~ ","range begin_pos ","buffer line_range ","expr line ","buffer source_line ","expr source_buffer ","node source_range "," buffer line_range _between ","buffer line_range  begin_pos + ","buffer source_line  =~ ","buffer line_range  begin_pos ","buffer line_buffer line_range  ","expr source_buffer  line_range ","node source_range  line ","buffer buffer source_line _line ","expr source_buffer  source_line ","expr buffer source_line _buffer ","expr source_expr source_buffer  ","node source_range  source_buffer ","node source_buffer line_range  ","node buffer source_line _range "]}," RuboCop Cop Lint UselessTimes own_line?":{"type":"method","name":"own_line?","children":[],"call":[" processed_source buffer source_line [] !~ "," processed_source buffer source_line [] ","node loc column ","node loc "," processed_source buffer source_line ","node loc line "," processed_source buffer "," processed_source "]}," RuboCop Cop Lint UselessTimes fix_indentation":{"type":"method","name":"fix_indentation","children":[],"call":["source_lines join ","line []= ","source_lines [] each ","source_lines [] ","source split ","line empty? ","source split  join ","source split  [] each ","source split  [] "]}," RuboCop Cop Lint UselessTimes autocorrect_block":{"type":"method","name":"autocorrect_block","children":[],"call":["corrector replace "," fix_indentation ","node body loc column ","node body loc ","node body ","node loc column ","node loc ","source gsub! ","node body source "," block_reassigns_arg? "," block_arg ","node body source  gsub! ","node body node body source  ","  block_arg  "]}," RuboCop Cop Lint UselessTimes autocorrect_block_pass":{"type":"method","name":"autocorrect_block_pass","children":[],"call":["corrector replace "]}," RuboCop Cop Lint UselessTimes remove_node":{"type":"method","name":"remove_node","children":[],"call":["corrector remove "," range_by_whole_lines ","node loc expression ","node loc ","node source_range "]}," RuboCop Cop Lint UselessTimes on_send":{"type":"method","name":"on_send","children":[],"call":[" autocorrect_block "," autocorrect_block_pass ","proc_name empty? ! ","proc_name empty? "," remove_node ","count < "," own_line? "," add_offense "," format ","node block_node ","node block_literal? ","count > "," times_call? "," never_process? "," autocorrect ","node parent "," own_line? ! "," remove_node block_node  ","node block_node  block_node block_node  ","node block_node  block_literal? ","node block_node  parent "]}," RuboCop Cop Lint UselessMethodDefinition optional_args?":{"type":"method","name":"optional_args?","children":[],"call":["arg kwoptarg_type? ","arg optarg_type? ","node arguments any? ","node arguments "]}," RuboCop Cop Lint IdentityComparison object_id_method?":{"type":"method","name":"object_id_method?","children":[],"call":["node method? ","node send_type? "]}," RuboCop Cop Lint IdentityComparison compare_between_object_id_by_double_equal?":{"type":"method","name":"compare_between_object_id_by_double_equal?","children":[],"call":[" object_id_method? ","node first_argument ","node receiver "]}," RuboCop Cop Lint IdentityComparison on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace ","node first_argument receiver source ","node first_argument receiver ","node first_argument ","node receiver receiver source ","node receiver receiver ","node receiver "," add_offense "," compare_between_object_id_by_double_equal? ","argument source ","receiver source ","node first_node first_argument receiver source  receiver source ","node first_node first_argument receiver  receiver source ","node first_argument node receiver receiver source  source ","node first_argument node receiver receiver  source ","node first_node first_argument receiver source  receiver ","node first_node first_argument receiver  receiver ","node first_argument node receiver receiver source  ","node first_argument node receiver receiver  ","node first_node first_argument receiver source  ","node first_node first_argument receiver  ","node node receiver receiver source  node receiver receiver source  source ","node node receiver receiver  node receiver receiver  source ","node node receiver receiver source  node receiver receiver source  ","node node receiver receiver  node receiver receiver  ","node node receiver receiver source  ","node node receiver receiver  ","node first_argument receiver source  source ","node first_argument receiver  source ","node receiver receiver source  source ","node receiver receiver  source "]}," RuboCop Cop Lint ConstantDefinitionInBlock on_class":{"type":"method","name":"on_class","children":[],"call":[" add_offense "," module_defined_in_block? "," allowed_method? "," method_name "," module_defined_in_block? ! "]}," RuboCop Cop Lint ConstantDefinitionInBlock on_casgn":{"type":"method","name":"on_casgn","children":[],"call":[" add_offense "," constant_assigned_in_block? "," allowed_method? "," method_name "," constant_assigned_in_block? ! "]}," RuboCop Cop Layout RescueEnsureAlignment begin_end_alignment_style":{"type":"method","name":"begin_end_alignment_style","children":[],"call":[" config for_cop [] "," config for_cop "," config "," config for_cop [] != "," config for_all_cops [] == "," config for_all_cops [] "," config for_all_cops ","begin_end_alignment_conf [] "," config for_cop  [] "]}," RuboCop Cop Layout RescueEnsureAlignment alignment_location":{"type":"method","name":"alignment_location","children":[],"call":["alignment_node loc expression ","alignment_node loc "," start_line_range "," begin_end_alignment_style == "," begin_end_alignment_style ","alignment_node source_range "]}," RuboCop Cop Layout EmptyLineAfterMultilineCondition right_sibling":{"type":"method","name":"right_sibling","children":[],"call":["node parent children [] ","node sibling_index + ","node sibling_index ","node parent children ","node parent "]}," RuboCop Cop Layout BeginEndAlignment alignment_node":{"type":"method","name":"alignment_node","children":[],"call":[" start_line_range "," style "]}," RuboCop Cop Layout BeginEndAlignment autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["AlignmentCorrector  align_end "," alignment_node "," processed_source "]}," RuboCop Cop Layout BeginEndAlignment check_begin_alignment":{"type":"method","name":"check_begin_alignment","children":[],"call":[" check_end_kw_alignment "," start_line_range ","node loc begin ","node loc "]}," RuboCop Cop Layout BeginEndAlignment on_kwbegin":{"type":"method","name":"on_kwbegin","children":[],"call":[" check_begin_alignment "]}," RuboCop Cop Bundler DuplicatedGem condition?":{"type":"method","name":"condition?","children":[],"call":["nodes [] parent == ","nodes [] parent ","nodes [] "]}," RuboCop DirectiveComment range":{"type":"method","name":"range","children":[],"call":[" comment location expression "," comment location "," comment ","Parser Source Range  new ","begin_pos + ","match end ","match begin "," comment loc expression source_buffer "," comment loc expression "," comment loc "," comment loc expression begin_pos "," comment text match "," comment text "," comment source_range source_buffer "," comment source_range "," comment source_range begin_pos "," comment loc expression begin_pos  + "," comment source_range begin_pos  + "," comment text match  end "," comment text match  begin "," comment loc expression  comment loc expression begin_pos  "," comment loc expression  comment source_range begin_pos  "," comment text  comment text match  "," comment source_range  comment loc expression begin_pos  "," comment source_range  comment source_range begin_pos  "]}," RuboCop DirectiveComment match?":{"type":"method","name":"match?","children":[],"call":[" cops == ","cop_names uniq sort ","cop_names uniq "," cops "," parsed_cop_names uniq sort == "," parsed_cop_names uniq sort "," parsed_cop_names uniq "," parsed_cop_names "]}," RuboCop DirectiveComment cops":{"type":"method","name":"cops","children":[],"call":["cops_string split uniq sort ","cops_string split uniq ","cops_string split ","match captures [] ","match captures "," comment text match "," comment text "," comment ","match captures []  split uniq sort ","match captures []  split uniq ","match captures []  split "," comment text match  captures [] "," comment text match  captures "," comment text  comment text match  "]}," RuboCop DirectiveComment initialize":{"type":"method","name":"initialize","children":[],"call":[" match_captures "]}," RuboCop Cop Style RescueStandardError offense_for_exlicit_enforced_style":{"type":"method","name":"offense_for_exlicit_enforced_style","children":[],"call":["corrector insert_after ","node loc keyword ","node loc "," add_offense "]}," RuboCop Cop Style RescueStandardError offense_for_implicit_enforced_style":{"type":"method","name":"offense_for_implicit_enforced_style","children":[],"call":["corrector remove "," range_between ","error loc expression end_pos ","error loc expression ","error loc ","node loc keyword end_pos ","node loc keyword ","node loc "," rescue_standard_error? "," add_offense ","node loc keyword join ","error source_range end_pos ","error source_range ","  range_between _between "," node loc keyword join _between "," rescue_standard_error?  loc expression end_pos "," rescue_standard_error?  loc expression "," rescue_standard_error?  loc "," rescue_standard_ rescue_standard_error? ? ","error source_ range_between  end_pos ","error source_node loc keyword join  end_pos "," rescue_standard_error?  source_range end_pos ","error source_ range_between  ","error source_node loc keyword join  "," rescue_standard_error?  source_range "]}," RuboCop Cop Style RedundantReturn check_resbody_node":{"type":"method","name":"check_resbody_node","children":[],"call":[" check_branch ","node body "]}," RuboCop Cop Style HashAsLastArrayItem explicit_array?":{"type":"method","name":"explicit_array?","children":[],"call":["array square_brackets? "]}," RuboCop Cop Style HashAsLastArrayItem containing_array":{"type":"method","name":"containing_array","children":[],"call":["hash_node parent ","hash_node hash_node parent  "]}," RuboCop Cop Style CommentedKeyword on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[" add_offense "," format ","match [] "," offensive? "," line match "," line "," processed_source comments each "," processed_source comments "," processed_source "," register_offense "," source_line match "," source_line "," line match  [] "," source_line match  [] "," line  line match  "," line  source_line match  "," source_line  line match  "," source_line  source_line match  "]}," RuboCop Cop StatementModifier comment_disables_cop?":{"type":"method","name":"comment_disables_cop?","children":[],"call":["Regexp  new match? ","Regexp  new ","regexp_pattern gsub "," cop_name "]}," RuboCop Cop Metrics Utils AbcSizeCalculator compound_assignment":{"type":"method","name":"compound_assignment","children":[],"call":["child setter_method? ! ","child setter_method? ","child respond_to? ","children count ","node children ","node children [] children ","node children [] ","node masgn_type? ","node children  count ","node children [] children  count ","node node children  ","node node children [] children  ","node node children  [] node children  ","node node children [] children  [] node children [] children  ","node node children  [] ","node node children [] children  [] "]}," RuboCop Cop Lint UselessTimes never_process?":{"type":"method","name":"never_process?","children":[],"call":["node body nil? ","node body ","node block_type? ","count < "]}," RuboCop Cop Lint RedundantCopEnableDirective register_offense":{"type":"method","name":"register_offense","children":[],"call":["corrector remove "," range_with_comma "," range_with_surrounding_space ","directive range ","directive match? "," add_offense "," format "," all_or_name "," range_of_offense ","cop_names each ","DirectiveComment  new ","name split first ","name split "," department? ","DirectiveComment  new  range ","DirectiveComment  new  match? "," all_or_name split first  ","cop_name split first s each ","name split first  split first ","name split first  split "]}," RuboCop Cop Lint RedundantCopDisableDirective previous_line_blank?":{"type":"method","name":"previous_line_blank?","children":[],"call":[" processed_source buffer source_line blank? "," processed_source buffer source_line ","range line - ","range line "," processed_source buffer "," processed_source "]}," RuboCop Cop Layout EmptyLinesAroundAccessModifier register_offense?":{"type":"method","name":"register_offense?","children":[],"call":[" allowed_only_before_style? "," empty_lines_around? "," style ","node parent block_type? ! ","node parent block_type? ","node parent ","node bare_access_modifier? "]}," RuboCop Version document_version":{"type":"method","name":"document_version","children":[],"call":[]}," RuboCop Formatter DisabledConfigFormatter show_offense_counts?":{"type":"method","name":"show_offense_counts?","children":[],"call":["@options fetch "]}," RuboCop Formatter DisabledConfigFormatter show_timestamp?":{"type":"method","name":"show_timestamp?","children":[],"call":["@options fetch "]}," RuboCop Cop Style DateTime autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node receiver loc name ","node receiver loc ","node receiver "," to_datetime? "]}," RuboCop ConfigRegeneration generation_command":{"type":"method","name":"generation_command","children":[],"call":["File  foreach take last ","File  foreach take ","File  foreach "]}," RuboCop ConfigRegeneration todo_exists?":{"type":"method","name":"todo_exists?","children":[],"call":["File  empty? ! ","File  empty? ","File  exist? "]}," RuboCop ConfigRegeneration options":{"type":"method","name":"options","children":[],"call":["Options  new parse first ","Options  new parse ","Options  new ","match [] split ","match [] "," generation_command match "," generation_command "," todo_exists? "," generation_command match  [] split "," generation_command match  [] "," generation_command  generation_command match  "]}," RuboCop TargetFinder combined_exclude_glob_patterns":{"type":"method","name":"combined_exclude_glob_patterns","children":[],"call":["patterns join ","pattern sub ","(send\n  (lvar :exclude) :select) map ","pattern end_with? ","pattern is_a? ","exclude select ","@config_store for for_all_cops [] ","@config_store for for_all_cops ","@config_store for ","(send\n  (lvar :@config_store for for_all_cops [] ) :select) map ","@config_store for for_all_cops []  select "]}," RuboCop TargetFinder wanted_dir_patterns":{"type":"method","name":"wanted_dir_patterns","children":[],"call":["(send\n  (lvar :dirs) :flat_map) unshift "," wanted_dir_patterns ","dirs flat_map ","File  fnmatch? ","dir end_with? ","Dir  glob reject ","Dir  glob ","File  join ","base_dir gsub ","File  realpath ","File  symlink? ","dir chomp "," symlink_excluded_or_infinite_loop? ","base_dir gsub gsub ","base_dir gsub  gsub ","base_dir gsub  gsub gsub "]}," RuboCop ResultCache debug?":{"type":"method","name":"debug?","children":[],"call":[]}," RuboCop Ext RegexpNode with_interpolations_blanked":{"type":"method","name":"with_interpolations_blanked","children":[],"call":["(send\n  (send\n    (send nil :children) :[]\n    (erange\n      (int 0)\n      (int -1))) :map) join ","  * ","source length ","child begin_type? ","child source "," children [] map "," children [] "," children ","child source  length ","child child source  "]}," RuboCop Cop Style RedundantRegexpCharacterClass requires_escape_outside_char_class?":{"type":"method","name":"requires_escape_outside_char_class?","children":[],"call":["REQUIRES_ESCAPE_OUTSIDE_CHAR_CLASS_CHARS  include? "]}," RuboCop Cop Style RedundantRegexpCharacterClass backslash_b?":{"type":"method","name":"backslash_b?","children":[],"call":["elem == "]}," RuboCop Cop Style RedundantRegexpCharacterClass redundant_single_element_character_class?":{"type":"method","name":"redundant_single_element_character_class?","children":[],"call":["non_redundant ! "," requires_escape_outside_char_class? "," backslash_b? "," whitespace_in_free_space_mode? ","char_class expressions first text ","char_class expressions first ","char_class expressions "," backslash_zero? "," octal_requiring_char_class? "]}," RuboCop Cop Style RedundantRegexpCharacterClass each_single_element_character_class":{"type":"method","name":"each_single_element_character_class","children":[],"call":["(sym :set) include? ","expr expressions first type ","expr expressions first ","expr expressions ","expr negative? ","expr expressions size != ","expr expressions size ","expr type != ","expr type ","node parsed_tree "," multiple_codepoins? "," multiple_codepoints? "]}," RuboCop Cop Style RedundantCondition use_hash_key_assignment?":{"type":"method","name":"use_hash_key_assignment?","children":[],"call":[]}," RuboCop Cop Style RedundantBegin register_offense":{"type":"method","name":"register_offense","children":[],"call":["corrector remove ","node loc end ","node loc ","node loc begin "," add_offense "," replace_begin_with_statement "," any_ancestor_assignment_node? "," correct_modifier_form_after_multiline_begin_block "," use_modifier_form_after_multiline_begin_block? ","node parent "]}," RuboCop Cop Style RedundantBegin on_kwbegin":{"type":"method","name":"on_kwbegin","children":[],"call":[" register_offense ","first_child ensure_type? ","first_child rescue_type? ","node children first ","node children ","node parent "," valid_context_using_only_begin? "," contain_rescue_or_ensure? "," empty_begin? "," begin_block_has_multiline_statements? "," offensive_kwbegins to_a last "," offensive_kwbegins to_a "," offensive_kwbegins ","node children first  ensure_type? ","node children first  rescue_type? "]}," RuboCop Cop Style ClassEqualityComparison on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace ","class_node source "," add_offense "," range_between ","node source_range end_pos ","node source_range ","receiver_node loc selector begin_pos ","receiver_node loc selector ","receiver_node loc "," class_comparison_candidate? "," ignored_method? ","def_node method_name ","node each_ancestor first ","node each_ancestor "," format "," class_name "," offense_range "," matches_allowed_pattern? "," allowed_method? ","class_node dstr_type? ","  range_between _between ","  offense_range _between ","node source_ range_between  end_pos ","node source_ offense_range  end_pos ","node source_ range_between  ","node source_ offense_range  ","node each_ancestor first  method_name ","  class_name  "," offense_ range_between  "," offense_ offense_range  "]}," RuboCop Cop Style CaseLikeIf regexp_with_named_captures?":{"type":"method","name":"regexp_with_named_captures?","children":[],"call":["node each_capture count positive? ","node each_capture count ","node each_capture ","node regexp_type? "]}," RuboCop Cop Style CaseLikeIf regexp_with_working_captures?":{"type":"method","name":"regexp_with_working_captures?","children":[],"call":[" regexp_with_named_captures? ","(lvar :lhs) any? ","method == ","node loc selector source == ","node loc selector source ","node loc selector ","node loc ","node type "]}," RuboCop Cop Style AccessModifierDeclarations allow_modifiers_on_symbols?":{"type":"method","name":"allow_modifiers_on_symbols?","children":[],"call":[" access_modifier_with_symbol? "," cop_config [] "," cop_config "]}," RuboCop Cop Offense size":{"type":"method","name":"size","children":[],"call":[" end_pos - "," begin_pos "," end_pos "]}," RuboCop Cop Lint RedundantSafeNavigation check_method?":{"type":"method","name":"check_method?","children":[],"call":[" ignored_method? ! "," ignored_method? ","NIL_METHODS  include? "]}," RuboCop Cop Lint RedundantSafeNavigation on_csend":{"type":"method","name":"on_csend","children":[],"call":["corrector replace ","node loc dot ","node loc "," add_offense "," range_between ","node source_range end_pos ","node source_range ","node loc dot begin_pos "," check_method? ","node method_name "," respond_to_nil_specific_method? "," allowed_method? "," check? "," nil_methods include? "," nil_methods ","  range_between _between ","node source_ range_between  end_pos ","node source_ range_between  "]}," RuboCop Cop Lint HashCompareByIdentity on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," id_as_hash_key? "]}," RuboCop Cop Lint AmbiguousRegexpLiteral method_chain_to_regexp_receiver?":{"type":"method","name":"method_chain_to_regexp_receiver?","children":[],"call":["node parent receiver receiver == "," regexp_receiver ","node parent receiver receiver ","node parent receiver ","node parent ","node parent parent ","parent_receiver receiver == ","parent_receiver receiver ","parent parent ","parent receiver ","node node parent  receiver receiver == ","node node parent  receiver receiver ","node node parent  receiver ","node node parent  ","node node parent  node parent  ","parent receiver  receiver == ","node parent _receiver receiver == ","parent receiver  receiver ","node parent _receiver receiver ","node parent  node parent  ","node parent  receiver "]}," RuboCop Cop Lint AmbiguousRegexpLiteral find_offense_node":{"type":"method","name":"find_offense_node","children":[],"call":[" find_offense_node ","node parent "," method_chain_to_regexp_receiver? ","node parent send_type? ","node receiver ","node parent ! "," first_argument_is_regexp? "," find_offense_ find_offense_node  "," find_offense_node  parent "," find_offense_node  parent send_type? "," find_offense_node  receiver "," find_offense_node  parent ! "]}," RuboCop Cop Layout EmptyLinesAroundAccessModifier expected_empty_lines?":{"type":"method","name":"expected_empty_lines?","children":[],"call":[" allowed_only_before_style? "," empty_lines_around? "," style "]}," RuboCop Cop Style RedundantBegin valid_context_using_only_begin?":{"type":"method","name":"valid_context_using_only_begin?","children":[],"call":["node each_ancestor any? ","node each_ancestor ","node parent "," valid_begin_assignment? ","node node parent  "]}," RuboCop Cop Style RedundantBegin contain_rescue_or_ensure?":{"type":"method","name":"contain_rescue_or_ensure?","children":[],"call":["first_child ensure_type? ","first_child rescue_type? ","node children first ","node children ","node children first  ensure_type? ","node children first  rescue_type? "]}," RuboCop Cop Style ClassEqualityComparison offense_range":{"type":"method","name":"offense_range","children":[],"call":[" range_between ","node source_range end_pos ","node source_range ","receiver_node loc selector begin_pos ","receiver_node loc selector ","receiver_node loc "]}," RuboCop Cop Style ClassEqualityComparison class_name":{"type":"method","name":"class_name","children":[],"call":["class_node source ","class_node source delete delete ","class_node source delete ","node children first method? ","node children first ","node children ","class_node receiver source ","class_node receiver ","value prepend ","class_node each_ancestor any? ","class_node each_ancestor ","class_node str_type? "," class_name_method? ","node children first method_name "," unable_to_determine_type? "," require_cbase? "," trim_string_quotes ","receiver source ","class_node method_name ","class_node class_node receiver  source ","class_node class_node receiver  ","class_node source delete delete  prepend "," trim_string_quotes  prepend ","class_node receiver  source "]}," RuboCop Cop Lint RedundantSafeNavigation condition?":{"type":"method","name":"condition?","children":[],"call":["parent condition == ","parent condition ","parent post_condition_loop? ","parent conditional? "]}," RuboCop Cop Lint RedundantSafeNavigation check?":{"type":"method","name":"check?","children":[],"call":["parent negation_method? ","parent send_type? ","parent or_type? ","parent and_type? "," condition? ","node parent ","node parent  negation_method? ","node parent  send_type? ","node parent  or_type? ","node parent  and_type? ","node node parent  "]}," RuboCop Version feature_version":{"type":"method","name":"feature_version","children":[],"call":[]}," RuboCop Version extension_versions":{"type":"method","name":"extension_versions","children":[],"call":[]}," RuboCop Cop Style StringConcatenation corrected_ancestor?":{"type":"method","name":"corrected_ancestor?","children":[],"call":["node each_ancestor any? ","node each_ancestor "]}," RuboCop Cop Style StringConcatenation on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[]}," RuboCop Cop Style SafeNavigation relevant_comment_ranges":{"type":"method","name":"relevant_comment_ranges","children":[],"call":["(send\n  (send\n    (send\n      (lvar :node) :child_nodes) :each) :with_object\n  (array)) << ","child loc last_line ","child loc ","ranges << ","child loc first_line ","node child_nodes each with_object ","node child_nodes each ","node child_nodes ","node loc last_line ","node loc ","node loc first_line "]}," RuboCop Cop Style MethodCallWithArgsParentheses RequireParentheses require_parentheses":{"type":"method","name":"require_parentheses","children":[],"call":["corrector insert_after "," args_end "," args_parenthesized? ","corrector replace "," args_begin "," add_offense ","node parenthesized? ! ","node parenthesized? ","node arguments? "," eligible_for_parentheses_omission? "," matches_ignored_pattern? ","node method_name "," ignored_method? "," matches_allowed_pattern? "," allowed_method_name? "]}," RuboCop Cop Style MethodCallWithArgsParentheses OmitParentheses omit_parentheses":{"type":"method","name":"omit_parentheses","children":[],"call":["corrector remove ","node loc end ","node loc ","corrector replace "," args_begin "," parentheses_at_the_end_of_multiline_call? "," add_offense "," offense_range "," legitimate_call_with_parentheses? "," allowed_camel_case_method_call? "," super_call_without_arguments? ","node implicit_call? ","node parenthesized? "," auto_correct "," inside_endless_method_def? "," allowed_string_interpolation_method_call? "," syntax_like_method_call? "," require_parentheses_for_hash_value_omission? "," autocorrect "]}," RuboCop Cop Style FormatStringToken max_unannotated_placeholders_allowed":{"type":"method","name":"max_unannotated_placeholders_allowed","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style FormatStringToken allowed_unannotated?":{"type":"method","name":"allowed_unannotated?","children":[],"call":["detected_style == ","detections all? ","detections size > "," max_unannotated_placeholders_allowed ","detections size "," correctable_sequence? ! "," correctable_sequence? ","detected_sequence type ","detections any? ","detections size <= ","detected_sequence style == ","detected_sequence style "]}," RuboCop Cop Style FormatStringToken collect_detections":{"type":"method","name":"collect_detections","children":[],"call":["detections << "," unannotated_format? "," tokens ","detected_sequence style "]}," RuboCop Cop Layout TrailingWhitespace extract_heredocs":{"type":"method","name":"extract_heredocs","children":[],"call":["body last_line ","body first_line ","node location heredoc_body ","node location ","ast each_node select map ","ast each_node select ","ast each_node ","heredocs << ","node heredoc? ","node location heredoc_body  last_line ","node location heredoc_body  first_line ","node location heredoc_node location heredoc_body  "]}," RuboCop Cop Layout TrailingWhitespace find_heredoc":{"type":"method","name":"find_heredoc","children":[],"call":["r include? ","@heredocs each "," heredocs each "," heredocs "]}," RuboCop Cop Layout TrailingWhitespace static?":{"type":"method","name":"static?","children":[],"call":["heredoc loc expression source end_with? ","heredoc loc expression source ","heredoc loc expression ","heredoc loc ","heredoc source end_with? ","heredoc source "]}," RuboCop Cop Layout TrailingWhitespace process_line":{"type":"method","name":"process_line","children":[],"call":["corrector remove ","corrector insert_after "," static? "," add_offense "," offense_range "," skip_heredoc? "," find_heredoc ","corrector wrap "," process_line_in_heredoc "," offense_ offense_range  "," skip_ find_heredoc ? "," find_ find_heredoc  "," process_line_in_ find_heredoc  "]}," RuboCop Cop Layout ClassStructure find_heredoc":{"type":"method","name":"find_heredoc","children":[],"call":["node each_node find ","node each_node "]}," RuboCop Cop Commissioner restrict_callbacks":{"type":"method","name":"restrict_callbacks","children":[],"call":["restricted []= "," restricted_map ","callbacks [] ","RESTRICTED_CALLBACKS  each "]}," RuboCop Cop Commissioner build_callbacks":{"type":"method","name":"build_callbacks","children":[],"call":["(or-asgn\n  (send\n    (lvar :callbacks) :[]\n    (lvar :callback))\n  (array)) << ","callbacks [] ","cop callbacks_needed each ","cop callbacks_needed ","cops each "]}," RuboCop Cop Commissioner initialize_callbacks":{"type":"method","name":"initialize_callbacks","children":[],"call":[" restrict_callbacks "," build_callbacks "]}," RuboCop Cop Base callbacks_needed":{"type":"method","name":"callbacks_needed","children":[],"call":[" class callbacks_needed "," class "]}," RuboCop ConfigLoader add_loaded_features":{"type":"method","name":"add_loaded_features","children":[],"call":[" instance_variable_set "," instance_variable_get << "," instance_variable_get "," instance_variable_defined? ","@loaded_features merge "," Array "]}," RuboCop ConfigLoader file_path":{"type":"method","name":"file_path","children":[],"call":["File  absolute_path ","file file ","file is_a? "]}," RuboCop ConfigLoader loaded_features":{"type":"method","name":"loaded_features","children":[],"call":["@loaded_features flatten compact ","@loaded_features flatten ","@loaded_features flatten compact uniq "]}," RuboCop Config loaded_features":{"type":"method","name":"loaded_features","children":[],"call":["ConfigLoader  loaded_features "]}," RuboCop Ext RegexpParser Expression CharacterSet build_location":{"type":"method","name":"build_location","children":[],"call":["h merge! ","body with ","body end_pos - ","body end_pos ","body begin_pos + ","body begin_pos ","h [] ","h []  with ","h []  end_pos - ","h []  end_pos ","h []  begin_pos + ","h []  begin_pos "]}," RuboCop Ext RegexpParser Expression Base build_location":{"type":"method","name":"build_location","children":[],"call":[" expression with ","body end_pos "," expression "," expression adjust ","q text length -@ ","q text length ","q text "," quantifier ","q expression ","q source= "," source ","q respond_to? ","q origin= "," origin "," expression adjust  end_pos "," quantifier  text length -@ "," quantifier  text length "," quantifier  text ","  quantifier uantifier "," quantifier  expression "," quantifier  source= "," quantifier  respond_to? "," quantifier  origin= "]}," RuboCop Ext RegexpParser Expression Base loc":{"type":"method","name":"loc","children":[],"call":["Map  new "," build_location "," expression "]}," RuboCop Ext RegexpParser Expression Base expression":{"type":"method","name":"expression","children":[],"call":[" origin adjust "," ts + "," full_length "," ts "," origin "," start_index + "," start_index "]}," RuboCop Ext RegexpParser Map initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop Ext RegexpNode assign_properties":{"type":"method","name":"assign_properties","children":[],"call":["e origin= "," loc begin end "," loc begin "," loc ","Regexp Parser  parse "," options "," with_interpolations_blanked ","e source= ","@parsed_tree each_expression ","@parsed_tree to_s ","e  loc begin end = ","e @parsed_tree to_s = ","Regexp Parser  parse  each_expression ","Regexp Parser  parse  to_s "]}," RuboCop Cop Style SwapValues correction_range":{"type":"method","name":"correction_range","children":[],"call":[" range_by_whole_lines "," range_between ","y_assign source_range end_pos ","y_assign source_range ","tmp_assign source_range begin_pos ","tmp_assign source_range "]}," RuboCop Cop Style SwapValues rhs":{"type":"method","name":"rhs","children":[],"call":["node children [] source ","node children [] ","node children ","node type "]}," RuboCop Cop Style SwapValues lhs":{"type":"method","name":"lhs","children":[],"call":["node children [] to_s ","node children [] ","node children ","name to_s ","namespace const_name ","node type "]}," RuboCop Cop Style SwapValues replacement":{"type":"method","name":"replacement","children":[],"call":[" rhs "," lhs "]}," RuboCop Cop Style SwapValues message":{"type":"method","name":"message","children":[],"call":[" format "," replacement ","y_assign first_line ","x_assign first_line "]}," RuboCop Cop Style SwapValues simple_assignment?":{"type":"method","name":"simple_assignment?","children":[],"call":["SIMPLE_ASSIGNMENT_TYPES  include? ","node type ","node respond_to? "]}," RuboCop Cop Style SwapValues swapping_values?":{"type":"method","name":"swapping_values?","children":[],"call":[" rhs == "," lhs "," rhs "," lhs == "," simple_assignment? "]}," RuboCop Cop Style SwapValues allowed_assignment?":{"type":"method","name":"allowed_assignment?","children":[],"call":["node parent "]}," RuboCop Cop Style SwapValues on_asgn":{"type":"method","name":"on_asgn","children":[],"call":["corrector replace "," replacement "," correction_range "," add_offense "," message "," swapping_values? ","node right_siblings take ","node right_siblings "," allowed_assignment? "," correction_ correction_range  "]}," RuboCop Cop Style MultipleComparison allow_method_comparison?":{"type":"method","name":"allow_method_comparison?","children":[],"call":[" cop_config fetch "," cop_config "]}," RuboCop Cop Style MultipleComparison on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[]}," RuboCop Cop Style DocumentDynamicEvalDefinition comment_docs?":{"type":"method","name":"comment_docs?","children":[],"call":["source_line match? "," processed_source lines [] ","begin_node first_line - ","begin_node first_line "," processed_source lines "," processed_source ","node each_child_node all? ","node each_child_node "," processed_source lines []  match? "]}," RuboCop Cop Style DocumentDynamicEvalDefinition on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense ","node loc selector ","node loc "," comment_docs? ","node first_argument "," comment_block_docs? ","arg_node heredoc? "," inline_comment_docs? "," interpolated? ","node first_argument  heredoc? "]}," RuboCop Cop Style ArgumentsForwarding allow_only_rest_arguments?":{"type":"method","name":"allow_only_rest_arguments?","children":[],"call":[" cop_config fetch "," cop_config "]}," RuboCop Cop Style ArgumentsForwarding arguments_range":{"type":"method","name":"arguments_range","children":[],"call":[" range_between ","arguments last source_range end_pos ","arguments last source_range ","arguments last ","arguments first source_range begin_pos ","arguments first source_range ","arguments first ","node arguments ","start_node source_range begin_pos ","start_node source_range ","ADDITIONAL_ARG_TYPES  include? ","arg type ","node arguments reject ","node arguments  last source_range end_pos ","node arguments  last source_range ","node arguments  last ","node arguments  first source_range begin_pos ","node arguments  first source_range ","node arguments  first ","node node arguments  ","node node arguments  reject "]}," RuboCop Cop Style ArgumentsForwarding register_offense_to_method_definition_arguments":{"type":"method","name":"register_offense_to_method_definition_arguments","children":[],"call":["corrector replace "," range_with_surrounding_space ","method_definition arguments source_range ","method_definition arguments "," add_offense "," arguments_range ","  range_with_surrounding_space  "]}," RuboCop Cop Style ArgumentsForwarding register_offense_to_forwarding_method_arguments":{"type":"method","name":"register_offense_to_forwarding_method_arguments","children":[],"call":["corrector replace "," range_between ","forwarding_method source_range end_pos ","forwarding_method source_range ","forwarding_method loc selector end_pos ","forwarding_method loc selector ","forwarding_method loc "," add_offense "," arguments_range ","forwarding_method loc dot end_pos ","forwarding_method loc dot ","  range_between _between ","forwarding_method source_ range_between  end_pos ","forwarding_method source_ range_between  "," arguments_ range_between  "]}," RuboCop Cop Style ArgumentsForwarding all_lvars_as_forwarding_method_arguments?":{"type":"method","name":"all_lvars_as_forwarding_method_arguments?","children":[],"call":["lvar source_range begin_pos between? ","lvar source_range begin_pos ","lvar source_range ","lvars all? ","forwarding_method source_range end_pos ","forwarding_method source_range ","forwarding_method source_range begin_pos ","def_node body each_descendant ","def_node body ","lvar source_range forwarding_method source_range begin_pos  between? ","lvar source_range forwarding_method source_range begin_pos  ","def_node body each_descendant  all? ","forwarding_method source_range forwarding_method source_range end_pos  ","forwarding_method source_range forwarding_method source_range begin_pos  "]}," RuboCop Cop Style ArgumentsForwarding forwarding_method?":{"type":"method","name":"forwarding_method?","children":[],"call":[" forwarding_method_arguments? "," only_rest_arguments? "," allow_only_rest_arguments? "]}," RuboCop Cop Style ArgumentsForwarding extract_argument_names_from":{"type":"method","name":"extract_argument_names_from","children":[],"call":["(lvar :kwargs_name) map ","args last source delete ","args last source ","args last ","args first source delete ","args first source ","args first ","(lvar :args first source delete ) map "]}," RuboCop Cop Style ArgumentsForwarding on_def":{"type":"method","name":"on_def","children":[],"call":[" register_offense_to_method_definition_arguments "," register_offense_to_forwarding_method_arguments "," all_lvars_as_forwarding_method_arguments? "," forwarding_method? "," extract_argument_names_from ","node each_descendant "," use_rest_arguments? ","node arguments ","node body ","args any? "," add_post_ruby_32_offenses "," target_ruby_version >= "," target_ruby_version "," add_forward_all_offenses "," only_forwards_all? ","send_classifications empty? "," classify_send_nodes "," non_splat_or_block_pass_lvar_references ","node each_descendant to_a "," extract_forwardable_args "," classify_send_nodes  empty? "," extract_ extract_forwardable_args  "]}," RuboCop Cop Lint UnmodifiedReduceAccumulator allowed_type?":{"type":"method","name":"allowed_type?","children":[],"call":["parent_node dstr_type? ! ","parent_node dstr_type? "]}," RuboCop Cop Lint UnmodifiedReduceAccumulator acceptable_return?":{"type":"method","name":"acceptable_return?","children":[],"call":["(send\n  (lvar :vars) :-\n  (array\n    (lvar :element_name))) any? ","vars - ","vars none? "," expression_values uniq "," expression_values ","(send\n  (lvar : expression_values uniq ) :-\n  (array\n    (lvar :element_name))) any? "," expression_values uniq  - "," expression_values uniq  none? "]}," RuboCop Cop Lint UnmodifiedReduceAccumulator returns_accumulator_anywhere?":{"type":"method","name":"returns_accumulator_anywhere?","children":[],"call":[" lvar_used? ","return_values any? "]}," RuboCop Cop Lint UnmodifiedReduceAccumulator potential_offense?":{"type":"method","name":"potential_offense?","children":[],"call":["(or\n  (send nil :element_modified?\n    (lvar :block_body)\n    (lvar :element_name))\n  (send nil :returns_accumulator_anywhere?\n    (lvar :return_values)\n    (lvar :accumulator_name))) ! "," returns_accumulator_anywhere? "," element_modified? "]}," RuboCop Cop Lint UnmodifiedReduceAccumulator returned_accumulator_index":{"type":"method","name":"returned_accumulator_index","children":[],"call":[" accumulator_index? ","return_values detect "," lvar_used? ","val arguments none? ","val arguments ","val method? "]}," RuboCop Cop Lint UnmodifiedReduceAccumulator block_arg_name":{"type":"method","name":"block_arg_name","children":[],"call":["node arguments [] node_parts [] ","node arguments [] node_parts ","node arguments [] ","node arguments ","node argument_list [] name ","node argument_list [] ","node argument_list "]}," RuboCop Cop Lint UnmodifiedReduceAccumulator check_return_values":{"type":"method","name":"check_return_values","children":[],"call":[" add_offense "," format "," acceptable_return? ","return_values each "," potential_offense? ","block_node body "," returned_accumulator_index ","block_node method_name "," block_arg_name "," return_values "," return_values  each ","block_ returned_accumulator_index  body ","block_ returned_accumulator_index  method_name ","  return_values  "]}," RuboCop Cop Lint UnmodifiedReduceAccumulator return_values":{"type":"method","name":"return_values","children":[],"call":["nodes << ","n first_argument ","n each_ancestor first != ","block_body_node parent ","n each_ancestor first ","n each_ancestor ","block_body_node each_descendant ","block_body_node child_nodes last ","block_body_node child_nodes ","block_body_node begin_type? "]}," RuboCop Cop Lint UnmodifiedReduceAccumulator on_block":{"type":"method","name":"on_block","children":[],"call":[" check_return_values "," reduce_with_block? ","node argument_list length >= ","node argument_list length ","node argument_list ","node arguments length >= ","node arguments length ","node arguments "]}," RuboCop Cop Lint ToEnumArguments argument_match?":{"type":"method","name":"argument_match?","children":[],"call":["send_arg forwarded_args_type? ","child source == ","def_arg source ","child source ","send_arg each_child_node any? ","send_arg each_child_node "," passing_keyword_arg? ","send_arg pairs any? ","send_arg pairs ","send_arg hash_type? ","send_arg source == ","def_arg_name to_s ","send_arg source ","def_arg type ","def_arg children [] ","def_arg children ","def_arg children []  to_s "]}," RuboCop Cop Lint ToEnumArguments arguments_match?":{"type":"method","name":"arguments_match?","children":[],"call":[" argument_match? ","def_arg type ","arguments [] ","def_node arguments reject all? ","def_node arguments reject ","def_node arguments "]}," RuboCop Cop Lint ToEnumArguments on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," arguments_match? "," method_name? ","def_node method_name "," enum_conversion_call? ","node each_ancestor first ","node each_ancestor ","method_node method? ! ","method_node method? ","method_node call_type? ","node each_ancestor first  method_name "]}," RuboCop Cop Lint OutOfRangeRegexpRef nth_ref_receiver?":{"type":"method","name":"nth_ref_receiver?","children":[],"call":["send_node receiver "]}," RuboCop Cop Lint OutOfRangeRegexpRef regexp_receiver?":{"type":"method","name":"regexp_receiver?","children":[],"call":["send_node receiver "]}," RuboCop Cop Lint OutOfRangeRegexpRef regexp_first_argument?":{"type":"method","name":"regexp_first_argument?","children":[],"call":["REGEXP_ARGUMENT_METHODS  include? ","send_node method_name ","send_node first_argument "]}," RuboCop Cop Lint OutOfRangeRegexpRef after_send":{"type":"method","name":"after_send","children":[],"call":[" check_regexp ","node receiver "," regexp_receiver? ","node first_argument "," regexp_first_argument? "]}," RuboCop Cop Lint NumberConversion ignored_class?":{"type":"method","name":"ignored_class?","children":[],"call":[" ignored_classes include? ","name to_s "," ignored_classes "]}," RuboCop Cop Lint NumberConversion ignored_classes":{"type":"method","name":"ignored_classes","children":[],"call":[" cop_config fetch "," cop_config "]}," RuboCop Cop Lint NumberConversion top_receiver":{"type":"method","name":"top_receiver","children":[],"call":["receiver receiver ","receiver receiver nil? ","receiver receiver  receiver receiver  ","receiver receiver  receiver receiver  nil? "]}," RuboCop Cop Lint NumberConversion ignore_receiver?":{"type":"method","name":"ignore_receiver?","children":[],"call":[" ignored_class? ","receiver const_name ","receiver const_type? "," top_receiver "," ignored_method? ","receiver method_name ","receiver send_type? "," conversion_method? ","receiver numeric_type? "," top_receiver  const_name "," top_receiver  const_type? "," top_ top_receiver  "," top_receiver  method_name "," top_receiver  send_type? "," top_receiver  numeric_type? "]}," RuboCop Cop Lint LiteralInInterpolation in_array_percent_literal?":{"type":"method","name":"in_array_percent_literal?","children":[],"call":["parent parent ","parent dsym_type? ","parent dstr_type? ","node parent ","node parent  node parent  ","node parent  dsym_type? ","node parent  dstr_type? ","node node parent  "]}," RuboCop Cop Lint EmptyBlock on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," processed_source contains_comment? ","node source_range "," processed_source "," cop_config [] "," cop_config ","node body "," allow_comment? ","node lambda? "," allow_empty_lambdas? "," lambda_or_proc? ","node lambda_or_proc? "]}," RuboCop Cop Lint DuplicateRegexpCharacterClassElement interpolation_locs":{"type":"method","name":"interpolation_locs","children":[],"call":["interpolation loc expression ","interpolation loc ","node children select map ","node children select ","node children ","@interpolation_locs [] ","node loc "]}," RuboCop Cop Lint DuplicateRegexpCharacterClassElement within_interpolation?":{"type":"method","name":"within_interpolation?","children":[],"call":["il overlaps? "," interpolation_locs any? "," interpolation_locs ","child expression "]}," RuboCop Cop Lint DuplicateRegexpCharacterClassElement each_repeated_character_class_element_loc":{"type":"method","name":"each_repeated_character_class_element_loc","children":[],"call":["seen << ","child expression ","seen include? ","child to_s "," within_interpolation? ","expr expressions each ","expr expressions ","Set  new ","expr token == ","expr token ","expr type != ","expr type ","node parsed_tree ","current_child expression "," start_with_escaped_zero_number? ","next_child to_s ","enum peek ","current_number + < ","current_number + ","current_child to_s ","enum next ","expression_count times ","expr expressions count ","expr expressions to_enum "," skip_expression? "," source_range ","group map join ","group map "," group_expressions ","Set  new  << ","Set  new  include? ","enum next  expression ","enum peek  to_s ","expr expressions to_enum  peek ","enum next  to_s ","expr expressions to_enum  next ","expr expressions count  times ","expr expressions to_expr expressions to_enum  "]}," RuboCop Cop Lint DuplicateRegexpCharacterClassElement on_regexp":{"type":"method","name":"on_regexp","children":[],"call":["corrector remove "," add_offense "," each_repeated_character_class_element_loc "]}," RuboCop Cop Bundler DuplicatedGem within_conditional?":{"type":"method","name":"within_conditional?","children":[],"call":["branch child_nodes include? ","branch child_nodes ","branch == ","conditional_node branches any? ","conditional_node branches "]}," RuboCop Cop Bundler DuplicatedGem conditional_declaration?":{"type":"method","name":"conditional_declaration?","children":[],"call":[" within_conditional? ","nodes all? ","parent parent ","parent if_type? ","nodes [] parent ","nodes [] ","ancestor begin_type? ! ","ancestor begin_type? ","nodes [] each_ancestor find ","nodes [] each_ancestor ","nodes [] parent  nodes [] parent  ","nodes [] parent  if_type? ","nodes [] nodes [] parent  "]}," RuboCop Util silence_warnings":{"type":"method","name":"silence_warnings","children":[],"call":[]}," RuboCop TargetRuby GemspecFile version_from_str":{"type":"method","name":"version_from_str","children":[],"call":["md [] to_f ","md [] ","str match "]}," RuboCop TargetRuby GemspecFile version_from_array":{"type":"method","name":"version_from_array","children":[],"call":["versions compact min ","versions compact "," version_from_str ","v str_content ","v is_a? ","array children map ","array children "]}," RuboCop TargetRuby GemspecFile version_from_gemspec_file":{"type":"method","name":"version_from_gemspec_file","children":[],"call":[" required_ruby_version first "," required_ruby_version ","processed_source ast ","ProcessedSource  from_file ","ProcessedSource  from_file  ast "]}," RuboCop TargetRuby GemspecFile gemspec_filepath":{"type":"method","name":"gemspec_filepath","children":[],"call":["@config find_file_upwards ","@config base_dir_for_path_parameters "," gemspec_filename "]}," RuboCop TargetRuby GemspecFile gemspec_filename":{"type":"method","name":"gemspec_filename","children":[],"call":["Pathname  new basename to_s ","Pathname  new basename ","Pathname  new ","@config base_dir_for_path_parameters ","Pathname  new Pathname  new basename to_s  to_s ","Pathname  new Pathname  new basename to_s  "]}," RuboCop TargetRuby GemspecFile find_version":{"type":"method","name":"find_version","children":[],"call":[" version_from_str ","version str_content "," version_from_array "," gem_requirement? ","version array_type? ","version children last ","version children ","version nil? "," version_from_gemspec_file ","File  file? "," gemspec_filepath "," find_minimal_known_ruby ","right_hand_side nil? ","versions compact min ","versions compact ","v str_content ","version children map "," find_default_minimal_known_ruby ","  version_from_gemspec_file _from_str "," version_from_gemspec_file  str_content ","  version_from_gemspec_file _from_array "," gem_version children last ? "," version_from_gemspec_file  array_type? "," version_from_gemspec_file  children last "," version_from_gemspec_file  children "," version_from_gemspec_file  nil? ","  version_from_gemspec_file _from_gemspec_file "," version_from_gemspec_ gemspec_filepath  ","File   gemspec_filepath ? "," gemspec_ gemspec_filepath path "," version_from_gemspec_file s compact min "," version_from_gemspec_file s compact "," version_from_gemspec_file  children map "]}," RuboCop TargetRuby GemspecFile name":{"type":"method","name":"name","children":[],"call":[" gemspec_filename "]}," RuboCop TargetRuby ToolVersionsFile pattern":{"type":"method","name":"pattern","children":[],"call":[]}," RuboCop TargetRuby ToolVersionsFile filename":{"type":"method","name":"filename","children":[],"call":[]}," RuboCop TargetRuby ToolVersionsFile name":{"type":"method","name":"name","children":[],"call":[]}," RuboCop TargetRuby RubyVersionFile version_file":{"type":"method","name":"version_file","children":[],"call":["@config find_file_upwards ","@config base_dir_for_path_parameters "," filename "]}," RuboCop TargetRuby RubyVersionFile pattern":{"type":"method","name":"pattern","children":[],"call":[]}," RuboCop TargetRuby RubyVersionFile filename":{"type":"method","name":"filename","children":[],"call":[]}," RuboCop Runner qualify_option_cop_names":{"type":"method","name":"qualify_option_cop_names","children":[],"call":["Cop Registry  qualified_cop_name ","@options [] map! ","@options [] ","(sym :only) each "]}," RuboCop RSpec ExpectOffense set_formatter_options":{"type":"method","name":"set_formatter_options","children":[],"call":[" cop instance_variable_get []= "," cop instance_variable_get "," cop ","RuboCop Formatter DisabledConfigFormatter  detected_styles= ","RuboCop Formatter DisabledConfigFormatter  config_to_allow_offenses= "]}," RuboCop RSpec ExpectOffense parse_processed_source":{"type":"method","name":"parse_processed_source","children":[],"call":[" raise ","processed_source diagnostics map join ","processed_source diagnostics map ","processed_source diagnostics ","processed_source valid_syntax? "," parse_source "," parse_source  diagnostics map join "," parse_source  diagnostics map "," parse_source  diagnostics "," parse_source  valid_syntax? "]}," RuboCop RSpec ExpectOffense parse_annotations":{"type":"method","name":"parse_annotations","children":[],"call":[" raise ","annotations plain_source == ","annotations plain_source ","AnnotatedSource  parse "," format_offense "," set_formatter_options ","AnnotatedSource  parse  plain_source == ","annotations plain_ format_offense  == ","AnnotatedSource  parse  plain_source ","annotations plain_ format_offense  "]}," RuboCop Options require_feature":{"type":"method","name":"require_feature","children":[],"call":[" require ","ConfigLoader  add_loaded_features "]}," RuboCop MagicComment SimpleComment extract_shareable_constant_value":{"type":"method","name":"extract_shareable_constant_value","children":[],"call":[" extract ","KEYWORDS  [] "]}," RuboCop MagicComment VimComment shareable_constant_value":{"type":"method","name":"shareable_constant_value","children":[],"call":[]}," RuboCop MagicComment EmacsComment extract_shareable_constant_value":{"type":"method","name":"extract_shareable_constant_value","children":[],"call":[" match ","KEYWORDS  [] "]}," RuboCop MagicComment shareable_constant_value":{"type":"method","name":"shareable_constant_value","children":[],"call":[" extract_shareable_constant_value "]}," RuboCop MagicComment shareable_constant_value_specified?":{"type":"method","name":"shareable_constant_value_specified?","children":[],"call":[" specified? "," shareable_constant_value "]}," RuboCop MagicComment valid_shareable_constant_value?":{"type":"method","name":"valid_shareable_constant_value?","children":[],"call":["(str \"none\") include? "," shareable_constant_values "," shareable_constant_value "]}," RuboCop Lockfile parser":{"type":"method","name":"parser","children":[],"call":["Bundler LockfileParser  new ","Bundler  read_file ","Bundler  default_lockfile ","Bundler  default_Bundler  read_file  "]}," RuboCop Lockfile includes_gem?":{"type":"method","name":"includes_gem?","children":[],"call":["gem name == ","gem name "," gems any? "," gems "]}," RuboCop Lockfile gems":{"type":"method","name":"gems","children":[],"call":[" parser dependencies values concat "," parser specs flat_map "," parser specs "," parser "," parser dependencies values "," parser dependencies "]}," RuboCop Lockfile dependencies":{"type":"method","name":"dependencies","children":[],"call":[" parser dependencies values "," parser dependencies "," parser "]}," RuboCop Formatter GitHubActionsFormatter report_offense":{"type":"method","name":"report_offense","children":[],"call":[" output printf "," github_escape ","offense message ","offense real_column ","offense line "," github_severity "," output ","PathUtil  smart_path "]}," RuboCop Formatter GitHubActionsFormatter github_severity":{"type":"method","name":"github_severity","children":[],"call":["offense severity < "," minimum_severity_to_fail ","offense severity "]}," RuboCop Formatter GitHubActionsFormatter minimum_severity_to_fail":{"type":"method","name":"minimum_severity_to_fail","children":[],"call":["RuboCop Cop Severity  new "," options fetch "," options "]}," RuboCop Formatter GitHubActionsFormatter github_escape":{"type":"method","name":"github_escape","children":[],"call":["string gsub ","Regexp  union ","ESCAPE_MAP  keys "]}," RuboCop Formatter GitHubActionsFormatter file_finished":{"type":"method","name":"file_finished","children":[],"call":[" report_offense ","offenses each ","@offenses_for_files []= ","offenses empty? "]}," RuboCop Formatter DisabledConfigFormatter merge_mode_for_exclude?":{"type":"method","name":"merge_mode_for_exclude?","children":[],"call":[" Array include? "," Array ","cfg to_h dig ","cfg to_h "]}," RuboCop Ext RegexpParser Expression Base start_index":{"type":"method","name":"start_index","children":[],"call":[" source byteslice length "," source byteslice "," ts "," source "]}," Hash slice":{"type":"method","name":"slice","children":[],"call":["h []= "," [] "," key? ","keys each "]}," RuboCop Cop Util indent":{"type":"method","name":"indent","children":[],"call":["  * ","node loc column ","node loc ","node loc column + "]}," RuboCop Cop Style StringLiterals register_offense":{"type":"method","name":"register_offense","children":[],"call":[" autocorrect "," add_offense "," message "]}," RuboCop Cop Style StringConcatenation handle_quotes":{"type":"method","name":"handle_quotes","children":[],"call":["part == ","parts map "]}," RuboCop Cop Style StringConcatenation line_end_concatenation?":{"type":"method","name":"line_end_concatenation?","children":[],"call":["node source =~ ","node source ","node multiline? ","node first_argument str_type? ","node first_argument ","node receiver str_type? ","node receiver "]}," RuboCop Cop Style StaticClass class_elements":{"type":"method","name":"class_elements","children":[],"call":["class_def children ","class_def begin_type? ","class_def ! ","class_node body ","class_node body  children ","class_node body  begin_type? ","class_node body  ! "]}," RuboCop Cop Style StaticClass sclass_convertible_to_module?":{"type":"method","name":"sclass_convertible_to_module?","children":[],"call":["child equals_asgn? ","child def_type? "," node_visibility == "," node_visibility "," class_elements all? "," class_elements ","node sclass_type? "]}," RuboCop Cop Style StaticClass extend_call?":{"type":"method","name":"extend_call?","children":[],"call":["node method? ","node send_type? "]}," RuboCop Cop Style StaticClass class_convertible_to_module?":{"type":"method","name":"class_convertible_to_module?","children":[],"call":[" extend_call? ","node equals_asgn? "," sclass_convertible_to_module? ","node defs_type? "," node_visibility == "," node_visibility ","nodes all? ","nodes empty? "," class_elements "," class_elements  all? "," class_elements  empty? "]}," RuboCop Cop Style StaticClass on_class":{"type":"method","name":"on_class","children":[],"call":[" add_offense "," class_convertible_to_module? ","class_node parent_class "," autocorrect "]}," RuboCop Cop Style SoleNestedConditional replacement_condition":{"type":"method","name":"replacement_condition","children":[],"call":["condition source "," wrap_condition? ","condition or_type? "]}," RuboCop Cop Style SoleNestedConditional wrap_condition?":{"type":"method","name":"wrap_condition?","children":[],"call":["node parenthesized? ! ","node parenthesized? ","node arguments any? ","node arguments ","node send_type? ","node or_type? ","node and_type? ","node call_type? "]}," RuboCop Cop Style SoleNestedConditional arguments_range":{"type":"method","name":"arguments_range","children":[],"call":[" range_between ","node last_argument source_range end_pos ","node last_argument source_range ","node last_argument ","node first_argument source_range begin_pos ","node first_argument source_range ","node first_argument "]}," RuboCop Cop Style SoleNestedConditional requrie_parentheses?":{"type":"method","name":"requrie_parentheses?","children":[],"call":["condition parenthesized? ! ","condition parenthesized? ","condition arguments empty? ! ","condition arguments empty? ","condition arguments ","condition send_type? ","condition comparison_method? ! ","condition comparison_method? "]}," RuboCop Cop Style SoleNestedConditional correct_outer_condition":{"type":"method","name":"correct_outer_condition","children":[],"call":["corrector insert_after ","condition last_argument source_range ","condition last_argument ","corrector replace "," range_between ","end_pos > ","condition first_argument source_range begin_pos ","condition first_argument source_range ","condition first_argument ","condition loc selector end_pos ","condition loc selector ","condition loc "," requrie_parentheses? "," require_parentheses? ","corrector remove ","condition last_argument source_ range_between  ","  range_between _between ","condition loc selector end_pos  > ","condition first_argument source_range condition first_argument source_range begin_pos  ","condition first_argument source_ range_between  begin_pos ","condition first_argument source_ range_between  ","condition loc selector condition loc selector end_pos  "]}," RuboCop Cop Style SoleNestedConditional correct_for_comment":{"type":"method","name":"correct_for_comment","children":[],"call":["corrector insert_before ","node loc keyword ","node loc ","comments empty? ","comments map join << ","comments map join ","comments map "," processed_source ast_with_comments [] "," processed_source ast_with_comments "," processed_source "," config for_cop [] "," config for_cop "," config "," processed_source comments_before_line ","if_branch source_range line ","if_branch source_range ","comment loc line < ","if_branch condition first_line ","if_branch condition ","comment loc line ","comment loc "," processed_source ast_with_comments [] select "," processed_source ast_with_comments []  empty? "," processed_source comments_before_line  empty? "," processed_source ast_with_comments []  map join << "," processed_source comments_before_line  map join << "," processed_source ast_with_comments []  map join "," processed_source comments_before_line  map join "," processed_source ast_with_comments []  map "," processed_source comments_before_line  map "," processed_source ast_with_ processed_source ast_with_comments []  [] "," processed_source ast_with_ processed_source comments_before_line  [] "," processed_source ast_with_ processed_source ast_with_comments []  "," processed_source ast_with_ processed_source comments_before_line  "," processed_source  processed_source ast_with_comments [] _before_line "," processed_source  processed_source comments_before_line _before_line "," processed_source ast_with_ processed_source ast_with_comments []  [] select "," processed_source ast_with_ processed_source comments_before_line  [] select "]}," RuboCop Cop Style SoleNestedConditional correct_for_basic_condition_style":{"type":"method","name":"correct_for_basic_condition_style","children":[],"call":["corrector wrap ","if_branch condition "," wrap_condition? ","corrector remove "," range_by_whole_lines ","node loc end ","node loc ","corrector replace "," range_between ","if_branch condition source_range begin_pos ","if_branch condition source_range ","node condition source_range end_pos ","node condition source_range ","node condition "," wrap_condition ","if_branch condition or_type? ","  range_between _by_whole_lines ","  range_between _between ","if_branch condition source_ range_between  begin_pos ","if_branch condition source_ range_between  ","node condition source_ range_between  end_pos ","node condition source_ range_between  "]}," RuboCop Cop Style SoleNestedConditional correct_for_guard_condition_style":{"type":"method","name":"correct_for_guard_condition_style","children":[],"call":["corrector remove ","if_branch loc keyword ","if_branch loc "," range_with_surrounding_space "," range_between ","condition source_range end_pos ","condition source_range ","if_branch loc keyword begin_pos ","corrector insert_after "," replacement_condition ","if_branch condition "," correct_outer_condition ","node condition "," replace_condition ","  range_between _with_surrounding_space ","  range_between _between ","condition source_ range_between  end_pos ","if_branch condition  source_range end_pos ","condition source_ range_between  ","if_branch condition  source_range "," replacement_if_branch condition  ","if_branch if_branch condition  "," correct_outer_if_branch condition  "," correct_node condition  ","node if_branch condition  "," replace_if_branch condition  "]}," RuboCop Cop Style SoleNestedConditional autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" correct_for_comment "," correct_for_basic_condition_style "," correct_for_guard_condition_style ","if_branch modifier_form? ","if_branch unless? ","corrector insert_before ","node condition ","corrector replace ","node loc keyword ","node loc ","node unless? ","corrector wrap ","node condition or_type? "," correct_from_unless_to_if ","node condition assignment? "," autocorrect_outer_condition_basic "," autocorrect_outer_condition_modify_form "," outer_condition_modify_form? "," correct_for_gurad_condition_style "]}," RuboCop Cop Style SingleLineMethods correct_to_endless":{"type":"method","name":"correct_to_endless","children":[],"call":["corrector replace ","node body source ","node body ","node method_name ","node arguments source ","node arguments ","node arguments any? ","node self_receiver? "," method_body_source ","node node arguments source  source ","node node arguments source  ","node node arguments source  any? "," method_ method_body_source  "]}," RuboCop Cop Style SingleLineMethods correct_to_multiline":{"type":"method","name":"correct_to_multiline","children":[],"call":[" move_comment ","LineBreakCorrector  break_line_before "," configured_indentation_width ","node loc end ","node loc "," each_part ","node body "," break_line_before ","body parenthesized_call? ","body begin_type? ","node node body  ","node body  parenthesized_call? ","node body  begin_type? "]}," RuboCop Cop Style SingleLineMethods correct_to_endless?":{"type":"method","name":"correct_to_endless?","children":[],"call":["(or\n  (send\n    (lvar :body_node) :begin_type?)\n  (send\n    (lvar :body_node) :kwbegin_type?)) ! ","body_node kwbegin_type? ","body_node begin_type? ","endless_method_config [] == ","endless_method_config [] "," config for_cop "," config "," target_ruby_version < "," target_ruby_version ","body_node parent assignment_method? ","body_node parent ","NOT_SUPPORTED_ENDLESS_METHOD_BODY_TYPES  include? ","body_node type "," disallow_endless_method_style? "," config for_cop  [] == "," config for_cop  [] "]}," RuboCop Cop Style SingleLineBlockParams autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","preferred_block_arguments [] ","lvar source ","node each_descendant ","node arguments "]}," RuboCop Cop Style SingleLineBlockParams build_preferred_arguments_map":{"type":"method","name":"build_preferred_arguments_map","children":[],"call":["preferred_arguments_map []= ","current_argument start_with? ","current_lvar source ","preferred_arguments [] ","node arguments each_with_index ","node arguments ","preferred_arguments [] s_map []= ","current_lvar source  start_with? ","preferred_arguments [] s [] "]}," RuboCop Cop Style RedundantArgument argument_range":{"type":"method","name":"argument_range","children":[],"call":[" range_with_surrounding_space ","node first_argument source_range ","node first_argument "," range_between ","node loc end end_pos ","node loc end ","node loc ","node loc begin begin_pos ","node loc begin ","node parenthesized? "]}," RuboCop Cop Style RedundantArgument redundant_arg_for_method":{"type":"method","name":"redundant_arg_for_method","children":[],"call":["Parser CurrentRuby  new parse ","Parser CurrentRuby  new ","RuboCop AST Builder  new ","buffer source= ","arg inspect ","Parser Source Buffer  new "," cop_config [] fetch "," cop_config [] "," cop_config ","@mem [] "," cop_config [] key? "," parse ast "," parse ","Parser Source Buffer  new  source= "," cop_config [] fetch  inspect "]}," RuboCop Cop Style RedundantArgument redundant_argument?":{"type":"method","name":"redundant_argument?","children":[],"call":["node arguments first == ","node arguments first ","node arguments ","redundant_argument nil? "," redundant_arg_for_method ","node method_name to_s ","node method_name "," redundant_arg_for_method  nil? "]}," RuboCop Cop Style RedundantArgument on_send":{"type":"method","name":"on_send","children":[],"call":["corrector remove "," argument_range "," add_offense "," format ","node arguments first source ","node arguments first ","node arguments "," redundant_argument? ","node arguments count != ","node arguments count ","node receiver nil? ","node receiver ","NO_RECEIVER_METHODS  include? ! ","NO_RECEIVER_METHODS  include? ","node method_name "]}," RuboCop Cop Style RaiseArgs allowed_non_exploded_type?":{"type":"method","name":"allowed_non_exploded_type?","children":[],"call":[" Array include? "," Array "," cop_config [] "," cop_config ","arg receiver const_name ","arg receiver "]}," RuboCop Cop Style PerlBackrefs on_back_ref_or_gvar_or_nth_ref":{"type":"method","name":"on_back_ref_or_gvar_or_nth_ref","children":[],"call":["corrector replace "," derived_from_braceless_interpolation? "," add_offense "," format_message "," preferred_expression_to "," preferred_expression_to_node_with_constant_prefix ","  preferred_expression_to _to ","  preferred_expression_to_node_with_constant_prefix _to ","  preferred_expression_to _to_node_with_constant_prefix ","  preferred_expression_to_node_with_constant_prefix _to_node_with_constant_prefix "]}," RuboCop Cop Style PerlBackrefs preferred_expression_to":{"type":"method","name":"preferred_expression_to","children":[],"call":["node to_a first ","node to_a ","node to_a node to_a first  "]}," RuboCop Cop Style PerlBackrefs original_expression_of":{"type":"method","name":"original_expression_of","children":[],"call":["first to_s ","first is_a? ","node to_a first ","node to_a ","node to_a first  to_s ","node to_a first  is_a? ","node to_a node to_a first  "]}," RuboCop Cop Style PerlBackrefs format_message":{"type":"method","name":"format_message","children":[],"call":[" format "," original_expression_of ","  original_expression_of _of "]}," RuboCop Cop Style PerlBackrefs derived_from_braceless_interpolation?":{"type":"method","name":"derived_from_braceless_interpolation?","children":[],"call":["(sym :dstr) include? ","node parent "]}," RuboCop Cop Style PerlBackrefs on_gvar":{"type":"method","name":"on_gvar","children":[],"call":[" on_back_ref_or_gvar_or_nth_ref "]}," RuboCop Cop Style PerlBackrefs on_back_ref":{"type":"method","name":"on_back_ref","children":[],"call":[" on_back_ref_or_gvar_or_nth_ref "]}," RuboCop Cop Style NumericLiterals register_offense":{"type":"method","name":"register_offense","children":[],"call":["corrector replace "," format_number "," add_offense "]}," RuboCop Cop Style NonNilCheck nil_comparison_style":{"type":"method","name":"nil_comparison_style","children":[],"call":["nil_comparison_conf [] "," config for_cop "," config "," config for_cop  [] "]}," RuboCop Cop Style NonNilCheck register_offense?":{"type":"method","name":"register_offense?","children":[],"call":[" unless_and_nil_check? "," not_and_nil_check? "," include_semantic_changes? "," not_equal_to_nil? "]}," RuboCop Cop Style NilLambda on_block":{"type":"method","name":"on_block","children":[],"call":["corrector remove "," range_by_whole_lines ","node body loc expression ","node body loc ","node body "," range_with_surrounding_space ","node single_line? "," add_offense "," nil_return? ","node lambda? "," autocorrect "," format ","node proc? ","node lambda_or_proc? ","  range_by_whole_lines _by_whole_lines ","  range_with_surrounding_space _by_whole_lines ","  range_by_whole_lines _with_surrounding_space ","  range_with_surrounding_space _with_surrounding_space "]}," RuboCop Cop Style NestedParenthesizedCalls autocorrect_incompatible_with":{"type":"method","name":"autocorrect_incompatible_with","children":[],"call":[]}," RuboCop Cop Style NegatedIfElseCondition swap_branches":{"type":"method","name":"swap_branches","children":[],"call":["corrector replace ","node if_branch source ","node if_branch ","node else_branch ","node else_branch source ","corrector remove "," range_by_whole_lines ","node loc else ","node loc ","node if_branch nil? ","if_range source ","else_range source "," node_with_comments "," else_range "," if_range ","corrector swap "," node_with_comments  source "," if_range  source "," else_range  source ","  node_with_comments  ","  else_range  ","  if_range  "]}," RuboCop Cop Style NegatedIfElseCondition correct_negated_condition":{"type":"method","name":"correct_negated_condition","children":[],"call":["corrector replace ","rhs source ","receiver source ","method_name to_s sub ","method_name to_s ","node negation_method? "]}," RuboCop Cop Style NegatedIfElseCondition corrected_ancestor?":{"type":"method","name":"corrected_ancestor?","children":[],"call":["node each_ancestor any? ","node each_ancestor "]}," RuboCop Cop Style NegatedIfElseCondition negated_condition?":{"type":"method","name":"negated_condition?","children":[],"call":["NEGATED_EQUALITY_METHODS  include? ","node method_name ","node negation_method? ","node send_type? "]}," RuboCop Cop Style NegatedIfElseCondition if_else?":{"type":"method","name":"if_else?","children":[],"call":["else_branch elsif? ! ","else_branch elsif? ","else_branch if_type? ! ","else_branch if_type? ","node elsif? ! ","node elsif? ","node else_branch ","node else_branch  elsif? ! ","node else_branch  elsif? ","node else_branch  if_type? ! ","node else_branch  if_type? ","node node else_branch  "]}," RuboCop Cop Style NegatedIfElseCondition on_if":{"type":"method","name":"on_if","children":[],"call":["@corrected_nodes add ","Set  new compare_by_identity ","Set  new "," swap_branches "," correct_negated_condition "," corrected_ancestor? "," add_offense "," format ","node ternary? "," negated_condition? ! "," negated_condition? "," double_negation? ","node condition "," if_else? "," unwrap_begin_nodes "," message "," correct_negated_node condition  "," correct_negated_ unwrap_begin_nodes  "," negated_node condition ? ! "," negated_ unwrap_begin_nodes ? ! "," negated_node condition ? "," negated_ unwrap_begin_nodes ? ","node node condition  ","node  unwrap_begin_nodes  ","  message  "]}," RuboCop Cop Style NegatedIfElseCondition on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[]}," RuboCop Cop Style NegatedIfElseCondition autocorrect_incompatible_with":{"type":"method","name":"autocorrect_incompatible_with","children":[],"call":[]}," RuboCop Cop Style MutableConstant frozen_regexp_or_range_literals?":{"type":"method","name":"frozen_regexp_or_range_literals?","children":[],"call":["node range_type? ","node regexp_type? "," target_ruby_version >= "," target_ruby_version "]}," RuboCop Cop Style MultilineMethodSignature arguments_range":{"type":"method","name":"arguments_range","children":[],"call":[" range_between ","node last_argument source_range end_pos ","node last_argument source_range ","node last_argument ","node first_argument source_range begin_pos ","node first_argument source_range ","node first_argument "," range_with_surrounding_space ","  range_between _between ","node last_argument source_ range_between  end_pos ","node last_argument source_ range_between  ","node first_argument source_ range_between  begin_pos ","node first_argument source_ range_between  ","  range_between _with_surrounding_space "]}," RuboCop Cop Style MultilineMethodSignature autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," arguments_range ","corrector remove "," range_by_whole_lines ","arguments loc end ","arguments loc ","last_line_source_of_arguments start_with? "," processed_source [] strip "," processed_source [] ","arguments last_line - ","arguments last_line "," processed_source ","arguments map join ","arguments map ","node arguments ","corrector insert_after ","arguments loc begin "," last_line_source_of_arguments "," node arguments _range ","node arguments  loc end ","node arguments  loc "," processed_source [] strip  start_with? "," last_line_source_of_arguments  start_with? ","last_line_source_of_node arguments  start_with? ","node arguments  last_line - ","node arguments  last_line ","node arguments  map join ","node arguments  map ","node node arguments  ","node arguments  loc begin ","  processed_source [] strip  ","  last_line_source_of_arguments  "," last_line_source_of_node arguments  "]}," RuboCop Cop Style MethodCallWithoutArgsParentheses default_argument?":{"type":"method","name":"default_argument?","children":[],"call":["node parent "]}," RuboCop Cop Style MethodCallWithoutArgsParentheses register_offense":{"type":"method","name":"register_offense","children":[],"call":["corrector remove ","node loc end ","node loc ","node loc begin "," add_offense "," offense_range "]}," RuboCop Cop Style MethodCallWithArgsParentheses autocorrect_incompatible_with":{"type":"method","name":"autocorrect_incompatible_with","children":[],"call":[]}," RuboCop Cop Style MethodCallWithArgsParentheses OmitParentheses inside_endless_method_def?":{"type":"method","name":"inside_endless_method_def?","children":[],"call":["node arguments any? ","node arguments ","node each_ancestor any? ","node each_ancestor "]}," RuboCop Cop Style MethodCallWithArgsParentheses OmitParentheses auto_correct":{"type":"method","name":"auto_correct","children":[],"call":["corrector remove ","node loc end ","node loc ","corrector replace "," args_begin "," parentheses_at_the_end_of_multiline_call? "]}," RuboCop Cop Style KeywordParametersOrder append_newline_to_last_kwoptarg":{"type":"method","name":"append_newline_to_last_kwoptarg","children":[],"call":["corrector insert_after ","arguments parent block_type? ","arguments parent ","arguments reverse find ","arguments reverse ","last_argument blockarg_type? ","last_argument kwrestarg_type? ","arguments last ","arguments last  blockarg_type? ","arguments last  kwrestarg_type? "]}," RuboCop Cop Style IfWithSemicolon build_else_branch":{"type":"method","name":"build_else_branch","children":[],"call":["second_condition else_branch source ","second_condition else_branch "," build_else_branch ","second_condition else_branch if_type? ","second_condition if_branch source ","second_condition if_branch ","second_condition condition source ","second_condition condition "]}," RuboCop Cop Style IfWithSemicolon correct_elsif":{"type":"method","name":"correct_elsif","children":[],"call":["(str \"if \") chop "," build_else_branch chop "," build_else_branch ","node else_branch ","node if_branch source ","node if_branch ","node condition source ","node condition "]}," RuboCop Cop Style IfWithBooleanLiteralBranches require_parentheses?":{"type":"method","name":"require_parentheses?","children":[],"call":["condition comparison_method? ","condition send_type? ","condition or_type? ","condition and_type? "]}," RuboCop Cop Style IfWithBooleanLiteralBranches opposite_condition?":{"type":"method","name":"opposite_condition?","children":[],"call":["node if_branch true_type? ","node if_branch ","node unless? ","node if_branch false_type? ","node unless? ! "]}," RuboCop Cop Style IfWithBooleanLiteralBranches replacement_condition":{"type":"method","name":"replacement_condition","children":[],"call":["condition source "," require_parentheses? "," opposite_condition? "]}," RuboCop Cop Style IfWithBooleanLiteralBranches assume_boolean_value?":{"type":"method","name":"assume_boolean_value?","children":[],"call":[" double_negative? ","condition predicate_method? ","condition comparison_method? "," allowed_method? ","condition method_name ","condition send_type? "]}," RuboCop Cop Style IfWithBooleanLiteralBranches return_boolean_value?":{"type":"method","name":"return_boolean_value?","children":[],"call":[" assume_boolean_value? "," return_boolean_value? ","condition rhs ","condition and_type? ","condition lhs ","condition or_type? ","condition children first ","condition children ","condition begin_type? "]}," RuboCop Cop Style IfWithBooleanLiteralBranches message":{"type":"method","name":"message","children":[],"call":[" format ","node elsif? "]}," RuboCop Cop Style IfWithBooleanLiteralBranches offense_range_with_keyword":{"type":"method","name":"offense_range_with_keyword","children":[],"call":["keyword source ","node loc keyword ","node loc ","condition source_range end join ","node source_range end ","node source_range ","condition source_range end ","condition source_range ","node ternary? ","node loc keyword  source ","node loc node loc keyword  ","condition source_condition source_range end join  end join ","node source_condition source_range end join  end ","node source_condition source_range end join  ","condition source_condition source_range end join  end ","condition source_condition source_range end join  "]}," RuboCop Cop Style IfWithBooleanLiteralBranches on_if":{"type":"method","name":"on_if","children":[],"call":["corrector replace "," indent ","node if_branch ","corrector insert_before ","node elsif? "," replacement_condition "," add_offense "," message "," offense_range_with_keyword ","node condition "," if_with_boolean_literal_branches? "," multiple_elsif? "," if_with_boolean_literal_branches? ! "," format ","keyword source ","node loc keyword ","node loc ","condition source_range end join ","node source_range end ","node source_range ","condition source_range end ","condition source_range ","node ternary? ","  replacement_condition _condition "," replacement_node condition  "," offense_range_with_node loc keyword  "," offense_condition source_range end join _with_keyword ","node node condition  ","node loc keyword  source ","node loc node loc keyword  ","node condition  source_range end join ","condition source_condition source_range end join  end join ","node source_condition source_range end join  end ","node source_condition source_range end join  ","node condition  source_range end ","condition source_condition source_range end join  end ","node condition  source_range ","condition source_condition source_range end join  "]}," RuboCop Cop Style IfUnlessModifier autocorrect_incompatible_with":{"type":"method","name":"autocorrect_incompatible_with","children":[],"call":[]}," RuboCop Cop Style IfInsideElse if_condition_range":{"type":"method","name":"if_condition_range","children":[],"call":[" range_between ","condition source_range end_pos ","condition source_range ","node loc keyword begin_pos ","node loc keyword ","node loc "]}," RuboCop Cop Style IfInsideElse find_end_range":{"type":"method","name":"find_end_range","children":[],"call":[" find_end_range ","node parent ","node loc end ","node loc "," find_node loc end  "]}," RuboCop Cop Style IfInsideElse correct_to_elsif_from_if_inside_else_form":{"type":"method","name":"correct_to_elsif_from_if_inside_else_form","children":[],"call":["corrector remove "," range_by_whole_lines ","corrector replace ","if_branch source ","node if_branch "," if_condition_range ","condition source ","node parent loc else ","node parent loc ","node parent ","node if_branch source "," range_between ","condition source_range end_pos ","condition source_range ","node loc keyword begin_pos ","node loc keyword ","node loc ","node if_branch  source ","node node if_branch  ","  if_condition_range  ","  range_between  ","node node if_branch  source "]}," RuboCop Cop Style IfInsideElse correct_to_elsif_from_modifier_form":{"type":"method","name":"correct_to_elsif_from_modifier_form","children":[],"call":["corrector replace ","(str \"elsif \") chop ","node if_branch source ","node if_branch "," indent ","node condition source ","node condition ","node parent loc else ","node parent loc ","node parent "]}," RuboCop Cop Style IfInsideElse autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove "," range_by_whole_lines ","if_branch source_range ","node if_branch "," find_end_range "," correct_to_elsif_from_if_inside_else_form ","node condition "," correct_to_elsif_from_modifier_form ","node modifier_form? ","IfThenCorrector  new call ","IfThenCorrector  new "," then? ","node if_branch source_range ","node loc end ","node loc ","node parent loc end ","node parent loc ","node parent ","  range_by_whole_lines _by_whole_lines ","if_branch source_ range_by_whole_lines  ","node if_branch  source_range ","node node if_branch  "," find_end_ range_by_whole_lines  "," find_node loc end  "," find_node parent loc end  ","node if_branch source_ range_by_whole_lines  ","node node if_branch  source_range "]}," RuboCop Cop Style HashExcept offense_range":{"type":"method","name":"offense_range","children":[],"call":[" range_between ","node parent loc end end_pos ","node parent loc end ","node parent loc ","node parent ","node loc selector begin_pos ","node loc selector ","node loc "]}," RuboCop Cop Style HashExcept except_key":{"type":"method","name":"except_key","children":[],"call":["operand source != ","key_argument source ","operand source ","(lvar :lhs) find ","node body ","node argument_list first ","node argument_list ","(lvar :lhs) map none? ","(lvar :lhs) map ","node argument_list first source ","body method? "," extract_body_if_nagated "," extract_body_if_negated ","node argument_list first  source ","node argument_list first source  source ","node  extract_body_if_nagated  ","node  extract_body_if_negated  "," extract_body_if_nagated  method? "," extract_body_if_negated  method? "," extract_ extract_body_if_nagated _if_nagated "," extract_ extract_body_if_negated _if_nagated "," extract_ extract_body_if_nagated _if_negated "," extract_ extract_body_if_negated _if_negated "]}," RuboCop Cop Style HashExcept safe_to_register_offense?":{"type":"method","name":"safe_to_register_offense?","children":[],"call":["except_key str_type? ","except_key sym_type? ","block body method? ","block body ","extracted method? "," extract_body_if_nagated "," extract_body_if_negated "," extract_body_if_nagated  method? "," extract_body_if_negated  method? "]}," RuboCop Cop Style HashExcept semantically_except_method?":{"type":"method","name":"semantically_except_method?","children":[],"call":["body method? ","send method_name ","block body "," not_included? "," included? ","body receiver ","block body  method? ","body receiver  method? ","block block body  ","block body receiver  ","block body  receiver ","body receiver  receiver "]}," RuboCop Cop Style HashExcept on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace "," add_offense "," format ","except_key source "," offense_range "," safe_to_register_offense? "," except_key "," semantically_except_method? "," bad_method? ","node parent "," safe_to_register_offense? ! ","except_key nil? "," except_key_source "," except_key  source "," offense_ offense_range  ","  except_key  "," except_key  nil? ","  except_key _source "]}," RuboCop Cop Style HashConversion args_to_hash":{"type":"method","name":"args_to_hash","children":[],"call":["(send\n  (send\n    (lvar :args) :each_slice\n    (int 2)) :map) join ","arg2 source ","arg1 source ","args each_slice map ","args each_slice "]}," RuboCop Cop Style HashConversion multi_argument":{"type":"method","name":"multi_argument","children":[],"call":["corrector replace "," args_to_hash ","node arguments "," add_offense ","node arguments count odd? ","node arguments count "," add_parentheses ","parent parenthesized? ! ","parent parenthesized? ","node parent "," add_node parent heses ","node parent  node parent hesized? ! ","node parent  node parent hesized? ","node node parent  "]}," RuboCop Cop Style HashConversion single_argument":{"type":"method","name":"single_argument","children":[],"call":["corrector replace ","first_argument source "," add_offense ","first_argument splat_type? ","first_argument hash_type? ","node first_argument "," requires_parens? "," allowed_splat_argument? "," register_offense_for_zip_method "," use_zip_method_without_argument? "," register_offense_for_hash ","node first_argument  source ","node first_argument  splat_type? ","node first_argument  hash_type? ","node node first_argument  "]}," RuboCop Cop Style HashConversion on_send":{"type":"method","name":"on_send","children":[],"call":[" multi_argument "," single_argument ","node arguments count == ","node arguments count ","node arguments "," hash_from_array? "]}," RuboCop Cop Style FormatStringToken use_ignored_method?":{"type":"method","name":"use_ignored_method?","children":[],"call":[" ignored_method? ","parent method_name ","parent send_type? ","node parent ","send_parent method_name ","node each_ancestor first ","node each_ancestor ","node parent  method_name ","node parent  send_type? ","node node parent  ","send_node parent  method_name ","node each_ancestor first  method_name "]}," RuboCop Cop Style FormatStringToken format_string_token?":{"type":"method","name":"format_string_token?","children":[],"call":["node each_ancestor any? ","node each_ancestor ","node value include? ! ","node value include? ","node value "]}," RuboCop Cop Style FormatString format_single_parameter":{"type":"method","name":"format_single_parameter","children":[],"call":["arg parenthesized? ! ","arg parenthesized? ","arg operator_method? ","arg send_type? ","arg hash_type? ","arg source ","arg arg source  "]}," RuboCop Cop Style FloatDivision extract_receiver_source":{"type":"method","name":"extract_receiver_source","children":[],"call":["node source ","node receiver source ","node receiver ","node method? ","node send_type? "]}," RuboCop Cop Style FloatDivision correct_from_slash_to_fdiv":{"type":"method","name":"correct_from_slash_to_fdiv","children":[],"call":["corrector replace ","argument parenthesized? ! ","argument parenthesized? ","argument respond_to? "," extract_receiver_source "," extract_ extract_receiver_source  "]}," RuboCop Cop Style FloatDivision remove_to_f_method":{"type":"method","name":"remove_to_f_method","children":[],"call":["corrector remove ","send_node loc selector ","send_node loc ","send_node loc dot "]}," RuboCop Cop Style FloatDivision add_to_f_method":{"type":"method","name":"add_to_f_method","children":[],"call":["corrector insert_after ","node method? ","node send_type? "]}," RuboCop Cop Style EvalWithLocation missing_line":{"type":"method","name":"missing_line","children":[],"call":[" expected_line ","line_diff positive? "," line_difference ","node arguments last ","node arguments "," line_difference  positive? ","  line_difference erence "]}," RuboCop Cop Style EvalWithLocation add_offense_for_missing_location":{"type":"method","name":"add_offense_for_missing_location","children":[],"call":["corrector insert_after ","node loc expression end ","node loc expression ","node loc "," missing_line "," register_offense "," with_binding? ! "," with_binding? ","node method? ","node last_argument source_range end ","node last_argument source_range ","node last_argument "]}," RuboCop Cop Style EvalWithLocation add_offense_for_missing_line":{"type":"method","name":"add_offense_for_missing_line","children":[],"call":["corrector insert_after ","node loc expression end ","node loc expression ","node loc "," missing_line "," register_offense ","node source_range end ","node source_range ","node last_argument source_range end ","node last_argument source_range ","node last_argument "]}," RuboCop Cop Style EvalWithLocation expected_line":{"type":"method","name":"expected_line","children":[],"call":["line_diff abs ","line_diff zero? "]}," RuboCop Cop Style EvalWithLocation line_difference":{"type":"method","name":"line_difference","children":[],"call":[" string_first_line - ","line_node loc expression first_line ","line_node loc expression ","line_node loc "," string_first_line ","line_node source_range first_line ","line_node source_range "]}," RuboCop Cop Style EvalWithLocation check_line":{"type":"method","name":"check_line","children":[],"call":[" add_offense_for_different_line "," add_offense_for_same_line ","line_diff zero? "," line_difference ","node arguments last ","node arguments "," string_first_line - ","lineno_range first_line "," string_first_line ","line_node loc expression ","line_node loc "," line_difference  zero? "," string_first_line -  zero? ","  line_difference erence ","  string_first_line - erence ","line_node loc expression  first_line ","node arguments last  loc expression ","node arguments last  loc "]}," RuboCop Cop Style EvalWithLocation check_file":{"type":"method","name":"check_file","children":[],"call":["corrector replace "," add_offense "," format ","file_node source ","node method_name "," special_file_keyword? "]}," RuboCop Cop Style EvalWithLocation add_offense_for_incorrect_line":{"type":"method","name":"add_offense_for_incorrect_line","children":[],"call":["corrector replace "," add_offense ","line_node loc expression ","line_node loc "," format ","line_node source "," expected_line ","line_node source_range ","  expected_line _line "]}," RuboCop Cop Style EvalWithLocation with_binding?":{"type":"method","name":"with_binding?","children":[],"call":["node arguments size >= ","node arguments size ","node arguments ","node method? "]}," RuboCop Cop Style EvalWithLocation file_and_line":{"type":"method","name":"file_and_line","children":[],"call":["node arguments [] ","base + ","node arguments ","node method? "]}," RuboCop Cop Style EvalWithLocation register_offense":{"type":"method","name":"register_offense","children":[],"call":[" add_offense "," format ","node method_name ","node method? "]}," RuboCop Cop Style EvalWithLocation check_location":{"type":"method","name":"check_location","children":[],"call":[" add_offense_for_missing_location "," add_offense_for_missing_line "," check_file "," check_line "," file_and_line "]}," RuboCop Cop Style EndlessMethod arguments":{"type":"method","name":"arguments","children":[],"call":["node arguments source ","node arguments ","node arguments any? "]}," RuboCop Cop Style EndlessMethod correct_to_multiline":{"type":"method","name":"correct_to_multiline","children":[],"call":["corrector replace ","(str \"def \") strip ","node body source ","node body "," arguments ","node method_name "]}," RuboCop Cop Style EndlessMethod handle_disallow_style":{"type":"method","name":"handle_disallow_style","children":[],"call":[" correct_to_multiline "," add_offense ","node endless? "]}," RuboCop Cop Style EndlessMethod handle_allow_style":{"type":"method","name":"handle_allow_style","children":[],"call":[" correct_to_multiline "," add_offense "," style == "," style ","node single_line? ","node endless? "]}," RuboCop Cop Style EndlessMethod on_def":{"type":"method","name":"on_def","children":[],"call":[" handle_allow_style "," handle_disallow_style "," style == "," style "]}," RuboCop Cop Style Documentation macro_only?":{"type":"method","name":"macro_only?","children":[],"call":[" macro_only? ","body children ","body respond_to? ","body macro? "]}," RuboCop Cop Style DocumentDynamicEvalDefinition source_to_regexp":{"type":"method","name":"source_to_regexp","children":[],"call":["Regexp  escape ","source strip ","source blank? ","source gsub ","source gsub  strip ","source gsub  blank? ","source gsub  gsub "]}," RuboCop Cop Style DocumentDynamicEvalDefinition comment_regexp":{"type":"method","name":"comment_regexp","children":[],"call":["Regexp  new ","regexp_parts join "," source_to_regexp ","n source ","n begin_type? ","arg_node child_nodes map ","arg_node child_nodes "]}," RuboCop Cop Style DocumentDynamicEvalDefinition merge_adjacent_comments":{"type":"method","name":"merge_adjacent_comments","children":[],"call":["hash []= ","(send\n  (lvar :hash) :delete\n  (send\n    (lvar :index) :-\n    (int 1))) join ","hash delete ","index - ","hash keys last == ","hash keys last ","hash keys ","line dup gsub! ","line dup ","line dup gsub!  dup gsub! ","line dup gsub!  dup "]}," RuboCop Cop Style DocumentDynamicEvalDefinition heredoc_comment_blocks":{"type":"method","name":"heredoc_comment_blocks","children":[],"call":["(send\n  (send\n    (lvar :lines) :each_with_object\n    (hash)) :with_index\n  (send\n    (lvar :line_range) :begin)) values "," merge_adjacent_comments ","lines each_with_object with_index ","line_range begin ","lines each_with_object "," processed_source lines [] "," processed_source lines "," processed_source ","heredoc_body end - ","heredoc_body end ","heredoc_body begin - ","heredoc_body begin ","(send\n  (send\n    (lvar : processed_source lines [] ) :each_with_object\n    (hash)) :with_index\n  (send\n    (lvar :line_range) :begin)) values "," processed_source lines []  each_with_object with_index "," processed_source lines []  each_with_object "," processed_source  processed_source lines []  [] "," processed_source  processed_source lines []  "]}," RuboCop Cop Style DocumentDynamicEvalDefinition preceding_comment_blocks":{"type":"method","name":"preceding_comment_blocks","children":[],"call":["(send\n  (lvar :comments) :each_with_object\n  (hash)) values "," merge_adjacent_comments ","comment loc line ","comment loc ","comment text ","comments each_with_object "," processed_source each_comment_in_lines ","node loc expression line_span ","node loc expression ","node loc "," processed_source ","node source_range line_span ","node source_range ","(send\n  (lvar : processed_source each_comment_in_lines ) :each_with_object\n  (hash)) values "," merge_adjacent_ processed_source each_comment_in_lines  "," processed_source each_comment_in_lines  each_with_object "]}," RuboCop Cop Style DocumentDynamicEvalDefinition comment_block_docs?":{"type":"method","name":"comment_block_docs?","children":[],"call":["regexp match? ","comments join ","comments any? "," comment_regexp ","comments none? "," heredoc_comment_blocks concat "," preceding_comment_blocks ","arg_node parent "," heredoc_comment_blocks ","arg_node loc heredoc_body line_span ","arg_node loc heredoc_body ","arg_node loc "," comment_regexp  match? "," heredoc_comment_blocks concat  join "," heredoc_comment_blocks concat  any? "," comment_ comment_regexp  "," heredoc_comment_blocks concat  none? "]}," RuboCop Cop Style DocumentDynamicEvalDefinition inline_comment_docs?":{"type":"method","name":"inline_comment_docs?","children":[],"call":["source_line match? "," processed_source lines [] ","begin_node first_line - ","begin_node first_line "," processed_source lines "," processed_source ","node each_child_node all? ","node each_child_node "," processed_source lines []  match? "]}," RuboCop Cop Style DocumentDynamicEvalDefinition interpolated?":{"type":"method","name":"interpolated?","children":[],"call":["arg_node each_child_node any? ","arg_node each_child_node "]}," RuboCop Cop Style DisableCopsWithinSourceCodeDirective any_cops_allowed?":{"type":"method","name":"any_cops_allowed?","children":[],"call":[" allowed_cops any? "," allowed_cops "]}," RuboCop Cop Style DisableCopsWithinSourceCodeDirective allowed_cops":{"type":"method","name":"allowed_cops","children":[],"call":[" Array "," cop_config [] "," cop_config "]}," RuboCop Cop Style DisableCopsWithinSourceCodeDirective directive_cops":{"type":"method","name":"directive_cops","children":[],"call":["match [] split map ","match [] split ","match [] ","CommentConfig COMMENT_DIRECTIVE_REGEXP  match ","comment text ","match_captures [] split map ","match_captures [] split ","match_captures [] ","DirectiveComment  new match_captures ","DirectiveComment  new ","CommentConfig COMMENT_DIRECTIVE_REGEXP  match  [] split map ","CommentConfig COMMENT_DIRECTIVE_REGEXP  match  [] split ","CommentConfig COMMENT_DIRECTIVE_REGEXP  match  [] ","CommentConfig COMMENT_DIRECTIVE_REGEXP  CommentConfig COMMENT_DIRECTIVE_REGEXP  match  ","CommentConfig COMMENT_DIRECTIVE_REGEXP  match _captures [] split map ","DirectiveComment  new match_captures  [] split map ","CommentConfig COMMENT_DIRECTIVE_REGEXP  match _captures [] split ","DirectiveComment  new match_captures  [] split ","CommentConfig COMMENT_DIRECTIVE_REGEXP  match _captures [] ","DirectiveComment  new match_captures  [] ","DirectiveComment  new CommentConfig COMMENT_DIRECTIVE_REGEXP  match _captures ","DirectiveComment  new DirectiveComment  new match_captures  "]}," RuboCop Cop Style DisableCopsWithinSourceCodeDirective register_offense":{"type":"method","name":"register_offense","children":[],"call":["corrector replace ","comment text sub sub ","comment text sub ","Regexp  union ","comment text ","directive_cops length != ","disallowed_cops length ","directive_cops length "," add_offense "," format ","disallowed_cops join "," any_cops_allowed? "]}," RuboCop Cop Style ConstantVisibility module?":{"type":"method","name":"module?","children":[],"call":["node children last class_constructor? ","node children last ","node children "]}," RuboCop Cop Style ConstantVisibility ignore_modules?":{"type":"method","name":"ignore_modules?","children":[],"call":[" cop_config fetch "," cop_config "]}," RuboCop Cop Style CommentedKeyword register_offense":{"type":"method","name":"register_offense","children":[],"call":["corrector insert_before ","comment text ","range source_buffer line_range ","comment loc line ","comment loc ","range source_buffer ","matched_keyword == ","corrector remove "," range_with_surrounding_space ","comment loc expression "," add_offense "," format ","comment source_range "," range_with_surrounding_space  source_buffer line_ range_with_surrounding_space  "," range_with_surrounding_space  source_buffer ","  range_with_surrounding_space _with_surrounding_space ","comment source_ range_with_surrounding_space  "]}," RuboCop Cop Style CollectionMethods methods_accepting_symbol":{"type":"method","name":"methods_accepting_symbol","children":[],"call":[" Array "," cop_config [] "," cop_config "]}," RuboCop Cop Style CollectionMethods implicit_block?":{"type":"method","name":"implicit_block?","children":[],"call":[" methods_accepting_symbol include? ","node method_name to_s ","node method_name "," methods_accepting_symbol ","node last_argument sym_type? ","node last_argument ","node last_argument block_pass_type? ","node arguments any? ","node arguments "]}," RuboCop Cop Style CollectionCompact offense_range":{"type":"method","name":"offense_range","children":[],"call":[" range_between ","block_node loc end end_pos ","block_node loc end ","block_node loc ","send_node loc selector begin_pos ","send_node loc selector ","send_node loc "," range ","args last source == ","receiver source ","args last source ","args last "," select_method? "," reject_method? ","node parent "," reject_method_with_block_pass? ","node parent  loc end end_pos ","node parent  loc end ","node parent  loc "]}," RuboCop Cop Style CollectionCompact good_method_name":{"type":"method","name":"good_method_name","children":[],"call":["method_name to_s end_with? ","method_name to_s ","node bang_method? "]}," RuboCop Cop Style CollectionCompact on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace "," add_offense "," format ","range source "," good_method_name "," offense_range ","args last source == ","receiver source ","args last source ","args last "," select_method? "," reject_method? ","node parent ","node method_name "," to_enum_method? "," target_ruby_version <= "," target_ruby_version ","node method? "," allowed_receiver? ","node receiver "," offense_range  source ","  good_method_name _method_name "," offense_ offense_range  "]}," RuboCop Cop Style ClassAndModuleChildren replace_namespace_keyword":{"type":"method","name":"replace_namespace_keyword","children":[],"call":["corrector replace ","node loc keyword ","node loc ","class_node identifier == ","node identifier namespace ","node identifier ","class_node identifier ","node left_sibling "]}," RuboCop Cop Style AndOr keep_operator_precedence":{"type":"method","name":"keep_operator_precedence","children":[],"call":["corrector wrap ","node rhs ","node rhs or_type? ","node and_type? ","node parent ","node or_type? "]}," RuboCop Cop Registry reset!":{"type":"method","name":"reset!","children":[],"call":[]}," RuboCop Cop Registry freeze":{"type":"method","name":"freeze","children":[],"call":[" unqualified_cop_names "," clear_enrollment_queue "]}," RuboCop Cop Naming VariableNumber on_sym":{"type":"method","name":"on_sym","children":[],"call":[" check_name ","node value "," cop_config [] "," cop_config "," allowed_identifier? "]}," RuboCop Cop Naming VariableNumber on_def":{"type":"method","name":"on_def","children":[],"call":[" check_name ","node loc name ","node loc ","node method_name "," cop_config [] "," cop_config "," allowed_identifier? "]}," RuboCop Cop Naming RescuedExceptionsVariableName correct_reassignment":{"type":"method","name":"correct_reassignment","children":[],"call":[" correct_node ","node children last ","node children ","node masgn_type? ","node child_nodes first ","node child_nodes ","node lvasgn_type? "]}," RuboCop Cop Naming RescuedExceptionsVariableName correct_node":{"type":"method","name":"correct_node","children":[],"call":[" correct_reassignment ","child_node lvasgn_type? ","child_node masgn_type? ","corrector replace ","child_node lvar_type? "," variable_name_matches? ","node each_node "]}," RuboCop Cop Naming RescuedExceptionsVariableName variable_name_matches?":{"type":"method","name":"variable_name_matches?","children":[],"call":["node children first == ","node children first ","node children "," variable_name_matches? ","node each_descendant any? ","node each_descendant ","node masgn_type? "]}," RuboCop Cop Naming MemoizedInstanceVariableName find_definition":{"type":"method","name":"find_definition","children":[],"call":[" method_definition? ","node each_ancestor each ","node each_ancestor "]}," RuboCop Cop Naming MemoizedInstanceVariableName on_defined?":{"type":"method","name":"on_defined?","children":[],"call":[" add_offense ","ivar_assign loc name ","ivar_assign loc "," format "," suggested_var ","var_name to_s "," message "," matches? "," defined_memoized? ","method_node body ","arg children first ","arg children "," find_definition ","arg ivar_type? ","node arguments first ","node arguments ","method_node method_name ","node each_ancestor first ","node each_ancestor ","corrector replace ","  suggested_var  ","arg children first  to_s ","node each_ancestor first  body ","node arguments first  children first ","node arguments first  children ","node arguments first  ivar_type? ","node node arguments first uments first ","node node arguments first uments ","method_node method_node method_name  ","node each_ancestor first  method_name "]}," RuboCop Cop Naming MemoizedInstanceVariableName on_or_asgn":{"type":"method","name":"on_or_asgn","children":[],"call":[" add_offense "," format "," suggested_var ","lhs children first to_s ","lhs children first ","lhs children "," message "," matches? ","body children last == ","body children last ","body children ","body == ","method_node body "," find_definition ","lhs ivasgn_type? ","method_node method_name ","node each_ancestor first ","node each_ancestor ","corrector replace ","lhs loc name ","lhs loc ","  suggested_var  ","method_node body  children last == ","method_node body  children last ","method_node body  children ","method_node body  == ","method_node method_node body  ","node each_ancestor first  body ","method_node method_node method_name  ","node each_ancestor first  method_name "]}," RuboCop Cop StatementModifier code_after":{"type":"method","name":"code_after","children":[],"call":["code empty? ","end_element source_line [] ","end_element last_column ","end_element source_line ","node loc end ","node loc ","end_element source_line []  empty? ","node loc end  source_line [] ","node loc end  last_column ","node loc end  source_line "]}," RuboCop Cop MethodComplexity included":{"type":"method","name":"included","children":[],"call":[]}," RuboCop Cop IgnoredMethods deprecated_key":{"type":"method","name":"deprecated_key","children":[],"call":[" class deprecated_key "," class "," class respond_to? "]}," RuboCop Cop IgnoredMethods included":{"type":"method","name":"included","children":[],"call":[]}," RuboCop Cop IgnoredMethods Config ignored_methods":{"type":"method","name":"ignored_methods","children":[],"call":[" deprecated_key= ","config [] "]}," RuboCop Cop AllowedIdentifiers allowed_identifiers":{"type":"method","name":"allowed_identifiers","children":[],"call":[" cop_config fetch "," cop_config "]}," RuboCop Cop AllowedIdentifiers allowed_identifier?":{"type":"method","name":"allowed_identifier?","children":[],"call":[" allowed_identifiers include? ","name to_s delete ","name to_s "," allowed_identifiers "," allowed_identifiers empty? ! "," allowed_identifiers empty? "]}," RuboCop Cop Metrics Utils RepeatedAttributeDiscount setter_to_getter":{"type":"method","name":"setter_to_getter","children":[],"call":["node receiver ","node method_name [] to_sym ","node method_name [] ","node method_name ","node setter_method? ","node respond_to? ","node children first children ","node children first ","node children ","node shorthand_asgn? "," s ","VAR_SETTER_TO_GETTER  [] ","node type ","node node method_name [] to_sym  [] to_sym ","node node method_name [] to_sym  [] ","node node method_name [] to_sym  ","node VAR_SETTER_TO_GETTER  []  "]}," RuboCop Cop Metrics Utils RepeatedAttributeDiscount find_attributes":{"type":"method","name":"find_attributes","children":[],"call":["calls fetch "," root_node? ","node method_name "," find_attributes ","node receiver "," attribute_call? "," find_attributes  fetch "]}," RuboCop Cop Metrics Utils RepeatedAttributeDiscount update_repeated_attribute":{"type":"method","name":"update_repeated_attribute","children":[],"call":["calls clear ","calls delete "," find_attributes "," setter_to_getter "]}," RuboCop Cop Metrics Utils RepeatedAttributeDiscount discount_repeated_attribute?":{"type":"method","name":"discount_repeated_attribute?","children":[],"call":["hash []= ","hash nil? "," find_attributes "," attribute_call? "]}," RuboCop Cop Metrics Utils RepeatedAttributeDiscount calculate_node":{"type":"method","name":"calculate_node","children":[],"call":[" update_repeated_attribute "," discount_repeated_attributes? "]}," RuboCop Cop Metrics Utils RepeatedAttributeDiscount evaluate_branch_nodes":{"type":"method","name":"evaluate_branch_nodes","children":[],"call":[" discount_repeated_attribute? "," discount_repeated_attributes? "]}," RuboCop Cop Metrics Utils RepeatedAttributeDiscount discount_repeated_attributes?":{"type":"method","name":"discount_repeated_attributes?","children":[],"call":[]}," RuboCop Cop Metrics Utils RepeatedAttributeDiscount initialize":{"type":"method","name":"initialize","children":[],"call":[" s "]}," RuboCop Cop Metrics Utils AbcSizeCalculator calculate_node":{"type":"method","name":"calculate_node","children":[],"call":[" evaluate_condition_node "," condition? "," evaluate_branch_nodes "," branch? "," assignment? "]}," RuboCop Cop Metrics Utils AbcSizeCalculator visit_depth_last":{"type":"method","name":"visit_depth_last","children":[],"call":[" visit_depth_last ","node each_child_node "]}," RuboCop Cop Metrics ParameterLists max_optional_parameters":{"type":"method","name":"max_optional_parameters","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Metrics ParameterLists on_def":{"type":"method","name":"on_def","children":[],"call":[" max_optional_parameters= ","optargs count "," add_offense "," format "," max_optional_parameters ","optargs count <= ","node arguments select ","node arguments ","node arguments select  count ","node arguments select  count <= "]}," RuboCop Cop Metrics BlockLength method_receiver_excluded?":{"type":"method","name":"method_receiver_excluded?","children":[],"call":["receiver == ","method == ","config split ","config is_a? "," ignored_methods any? "," ignored_methods "," String ","node method_name ","node receiver "," allowed_methods any? "," allowed_methods "]}," RuboCop Cop Lint UnexpectedBlockArity arg_count":{"type":"method","name":"arg_count","children":[],"call":["arg mlhs_type? ","arg optarg_type? ","arg arg_type? ","arg restarg_type? ","node arguments count ","node arguments ","node children [] ","node children ","node numblock_type? "]}," RuboCop Cop Lint UnexpectedBlockArity expected_arity":{"type":"method","name":"expected_arity","children":[],"call":[" cop_config [] [] ","method to_s "," cop_config [] "," cop_config "]}," RuboCop Cop Lint UnexpectedBlockArity included_method?":{"type":"method","name":"included_method?","children":[],"call":[" methods key? ","name to_s "," methods "]}," RuboCop Cop Lint UnexpectedBlockArity acceptable?":{"type":"method","name":"acceptable?","children":[],"call":["(and\n  (send nil :included_method?\n    (send\n      (lvar :node) :method_name))\n  (send\n    (lvar :node) :receiver)) ! ","node receiver "," included_method? ","node method_name "]}," RuboCop Cop Lint UnexpectedBlockArity methods":{"type":"method","name":"methods","children":[],"call":[" cop_config fetch "," cop_config "]}," RuboCop Cop Lint UnexpectedBlockArity on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense "," format ","node method_name ","actual >= "," arg_count "," expected_arity "," acceptable? "," arg_count  >= ","  expected_arity _arity "]}," RuboCop Cop Lint TripleQuotes empty_str_nodes":{"type":"method","name":"empty_str_nodes","children":[],"call":["str value == ","str value ","node each_child_node select ","node each_child_node "]}," RuboCop Cop Lint TripleQuotes on_dstr":{"type":"method","name":"on_dstr","children":[],"call":["corrector remove ","empty_str_nodes each "," add_offense ","empty_str_nodes shift ","empty_str_nodes size == ","node child_nodes size ","node child_nodes ","empty_str_nodes size ","opening_quotes size < ","opening_quotes size ","node source scan [] ","node source scan ","node source ","(lvasgn :empty_str_nodes\n  (send nil :empty_str_nodes\n    (lvar :node))) none? "," empty_str_nodes "," empty_str_nodes  each "," empty_str_nodes  shift "," empty_str_nodes  size == "," empty_str_nodes  size ","node source scan []  size < ","node source scan []  size ","(lvasgn : empty_str_nodes \n  (send nil : empty_str_nodes \n    (lvar :node))) none? ","  empty_str_nodes  "]}," RuboCop Cop Lint SymbolConversion correct_hash_key":{"type":"method","name":"correct_hash_key","children":[],"call":[" register_offense "," format "," properly_quoted? ","node source ","node value inspect gsub ","node value inspect ","node value ","node value to_s match? ","node value to_s ","node value inspect delete_prefix ","node parent colon? ","node parent ","correction delete_prefix ","node value inspect delete ","node value inspect gsub  delete_prefix ","node value inspect delete_prefix  delete_prefix ","correction delete_prefix  delete_prefix ","node value inspect  delete_prefix ","node value inspect delete  delete_prefix "]}," RuboCop Cop Lint SymbolConversion hash_key?":{"type":"method","name":"hash_key?","children":[],"call":["node == ","node parent child_nodes first ","node parent child_nodes ","node parent "]}," RuboCop Cop Lint SymbolConversion in_percent_literal_array?":{"type":"method","name":"in_percent_literal_array?","children":[],"call":["node parent "]}," RuboCop Cop Lint SymbolConversion in_alias?":{"type":"method","name":"in_alias?","children":[],"call":["node parent "]}," RuboCop Cop Lint SymbolConversion properly_quoted?":{"type":"method","name":"properly_quoted?","children":[],"call":["source tr == ","source tr ","source == ","value end_with? ","source match? ! ","source match? "," style == "," style ","source gsub tr == ","source gsub tr ","source gsub "]}," RuboCop Cop Lint SymbolConversion register_offense":{"type":"method","name":"register_offense","children":[],"call":["corrector replace "," add_offense "]}," RuboCop Cop Lint SymbolConversion on_sym":{"type":"method","name":"on_sym","children":[],"call":[" register_offense ","node value inspect ","node value "," correct_hash_key "," hash_key? "," in_percent_literal_array? "," in_alias? "," properly_quoted? ","node source "," ignored_node? "]}," RuboCop Cop Lint SymbolConversion on_send":{"type":"method","name":"on_send","children":[],"call":[" register_offense ","node receiver value to_sym inspect ","node receiver value to_sym ","node receiver value ","node receiver ","node receiver sym_type? ","node receiver str_type? "]}," RuboCop Cop Lint RedundantSplatExpansion allow_percent_literal_array_argument?":{"type":"method","name":"allow_percent_literal_array_argument?","children":[],"call":[" cop_config fetch "," cop_config "]}," RuboCop Cop Lint RedundantSplatExpansion use_percent_literal_array_argument?":{"type":"method","name":"use_percent_literal_array_argument?","children":[],"call":["argument percent_literal? ","node parent send_type? ","node parent ","node children first ","node children ","node children first  percent_literal? "]}," RuboCop Cop Lint RedundantDirGlobSort on_send":{"type":"method","name":"on_send","children":[],"call":["corrector remove ","node loc dot ","node loc "," add_offense ","node loc selector ","GLOB_METHODS  include? ","receiver method_name ","receiver receiver short_name == ","receiver receiver short_name ","receiver receiver ","node receiver "," multiple_argument? ","receiver receiver const_type? ","node loc node loc selector  ","node receiver  method_name ","node receiver  node receiver  short_name == ","node receiver  node receiver  short_name ","node receiver  node receiver  ","node node receiver  ","node receiver  node receiver  const_type? "]}," RuboCop Cop Lint RedundantCopEnableDirective range_with_comma_after":{"type":"method","name":"range_with_comma_after","children":[],"call":[" range_between ","start + + ","start + ","comment loc expression source [] != ","comment loc expression source [] ","end_pos + ","comment loc expression source ","comment loc expression ","comment loc ","comment source [] != ","comment source [] ","comment source "]}," RuboCop Cop Lint RedundantCopEnableDirective range_with_comma_before":{"type":"method","name":"range_with_comma_before","children":[],"call":[" range_between ","start + ","start + - "]}," RuboCop Cop Lint OrAssignmentToConstant on_or_asgn":{"type":"method","name":"on_or_asgn","children":[],"call":["corrector replace ","node loc operator ","node loc "," add_offense ","node each_ancestor any? ","node each_ancestor "]}," RuboCop Cop Lint NumberedParameterAssignment on_lvasgn":{"type":"method","name":"on_lvasgn","children":[],"call":[" add_offense "," format ","NUMBERED_PARAMETER_RANGE  include? ","Regexp  last_match to_i ","Regexp  last_match "]}," RuboCop Cop Lint NumberConversion correct_sym_method":{"type":"method","name":"correct_sym_method","children":[],"call":[" format ","CONVERSION_METHOD_CLASS_MAPPING  [] "]}," RuboCop Cop Lint NumberConversion handle_as_symbol":{"type":"method","name":"handle_as_symbol","children":[],"call":["corrector replace "," correct_sym_method "," add_offense "," format ","sym_node source ","receiver nil? "," to_method_symbol "," remove_parentheses ","node parenthesized? ","node arguments one? ! ","node arguments one? ","node arguments "]}," RuboCop Cop Lint NumberConversion handle_conversion_method":{"type":"method","name":"handle_conversion_method","children":[],"call":["corrector replace "," correct_method ","node receiver "," add_offense "," format ","receiver source "," ignore_receiver? ","receiver nil? "," to_method "," allow_receiver? "," ignore_node "," part_of_ignored_node? "]}," RuboCop Cop Lint NoReturnInBeginEndBlocks on_lvasgn":{"type":"method","name":"on_lvasgn","children":[],"call":[" add_offense ","kwbegin_node each_node ","node each_node "]}," RuboCop Cop Lint LiteralInInterpolation ends_heredoc_line?":{"type":"method","name":"ends_heredoc_line?","children":[],"call":["line size == ","node loc last_column + ","node loc last_column ","node loc ","line size "," processed_source lines [] ","node last_line - ","node last_line "," processed_source lines "," processed_source ","node parent parent ","node parent "," processed_source lines []  size == "," processed_source lines []  size "," processed_source  processed_source lines [] s [] ","node last_ processed_source lines []  - ","node last_ processed_source lines []  "," processed_source  processed_source lines [] s "]}," RuboCop Cop Lint LiteralInInterpolation space_literal?":{"type":"method","name":"space_literal?","children":[],"call":["node value blank? ","node value ","node str_type? "]}," RuboCop Cop Lint LiteralInInterpolation offending?":{"type":"method","name":"offending?","children":[],"call":["(and\n  (send nil :space_literal?\n    (lvar :node))\n  (send nil :ends_heredoc_line?\n    (lvar :node))) ! "," ends_heredoc_line? "," space_literal? "," prints_as_self? "," special_keyword? ! "," special_keyword? "]}," RuboCop Cop Lint LambdaWithoutLiteralBlock on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace ","node first_argument source delete ","node first_argument source ","node first_argument "," add_offense ","node first_argument ! ","node parent "," lambda_with_symbol_proc? "]}," RuboCop Cop Lint InterpolationCheck string_or_regex?":{"type":"method","name":"string_or_regex?","children":[],"call":[]}," RuboCop Cop Lint EmptyClass body_or_allowed_comment_lines?":{"type":"method","name":"body_or_allowed_comment_lines?","children":[],"call":[" comment_lines? "," cop_config [] "," cop_config ","node body "," processed_source contains_comment? ","node source_range "," processed_source "]}," RuboCop Cop Lint EmptyClass on_sclass":{"type":"method","name":"on_sclass","children":[],"call":[" add_offense "," body_or_allowed_comment_lines? "]}," RuboCop Cop Lint EmptyClass on_class":{"type":"method","name":"on_class","children":[],"call":[" add_offense ","node parent_class "," body_or_allowed_comment_lines? "]}," RuboCop Cop Lint EmptyBlock comment_disables_cop?":{"type":"method","name":"comment_disables_cop?","children":[],"call":["Regexp  new match? ","Regexp  new ","regexp_pattern gsub "," cop_name "]}," RuboCop Cop Lint EmptyBlock allow_empty_lambdas?":{"type":"method","name":"allow_empty_lambdas?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Lint EmptyBlock allow_comment?":{"type":"method","name":"allow_comment?","children":[],"call":[" comment_disables_cop? ! "," comment_disables_cop? ","line_comment loc expression source ","line_comment loc expression ","line_comment loc ","line_comment ! "," processed_source comment_at_line ","node source_range line ","node source_range "," processed_source "," processed_source contains_comment? ","line_comment source "," processed_source comment_at_line  loc expression source "," processed_source comment_at_line  loc expression "," processed_source comment_at_line  loc "," processed_source comment_at_line  ! "," processed_source comment_at_line  source "]}," RuboCop Cop Lint ElseLayout autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," indent ","node else_branch children [] ","node else_branch children ","node else_branch "," range_between ","first_else loc expression begin_pos ","first_else loc expression ","first_else loc ","node loc else end_pos ","node loc else ","node loc ","corrector insert_after "," indentation_width "," indentation ","first_else source_range begin_pos ","first_else source_range ","  indent _width ","  indent  "]}," RuboCop Cop Lint DuplicateBranch const_branch?":{"type":"method","name":"const_branch?","children":[],"call":["branch const_type? "]}," RuboCop Cop Lint DuplicateBranch literal_branch?":{"type":"method","name":"literal_branch?","children":[],"call":[" ignore_constant_branches? ","node const_type? ","node pair_type? ","node basic_literal? ","branch each_descendant all? ","branch each_descendant ","branch basic_literal? ","branch xstr_type? ","branch literal? ! ","branch literal? "]}," RuboCop Cop Lint DuplicateBranch ignore_constant_branches?":{"type":"method","name":"ignore_constant_branches?","children":[],"call":[" cop_config fetch "," cop_config "]}," RuboCop Cop Lint DuplicateBranch ignore_literal_branches?":{"type":"method","name":"ignore_literal_branches?","children":[],"call":[" cop_config fetch "," cop_config "]}," RuboCop Cop Lint DuplicateBranch consider_branch?":{"type":"method","name":"consider_branch?","children":[],"call":[" const_branch? "," ignore_constant_branches? "," literal_branch? "," ignore_literal_branches? "]}," RuboCop Cop Lint DuplicateBranch branches":{"type":"method","name":"branches","children":[],"call":["node branches compact ","node branches "]}," RuboCop Cop Lint DuplicateBranch offense_range":{"type":"method","name":"offense_range","children":[],"call":["parent source_range ","parent loc else ","parent loc ","duplicate_branch source_range ","parent ternary? ","parent if_type? ","parent else_branch equal? ","parent else_branch ","parent respond_to? ","duplicate_branch parent ","duplicate_branch parent  source_range ","duplicate_branch parent  loc else ","duplicate_branch parent  loc ","duplicate_branch parent  ternary? ","duplicate_branch parent  if_type? ","duplicate_branch parent  else_branch equal? ","duplicate_branch parent  else_branch ","duplicate_branch parent  respond_to? ","duplicate_branch duplicate_branch parent  "]}," RuboCop Cop Lint DuplicateBranch on_branching_statement":{"type":"method","name":"on_branching_statement","children":[],"call":[" add_offense "," offense_range ","previous add? "," consider_branch? "," branches each_with_object ","Set  new "," branches ","branches each_with_object ","node branches compact ","node branches "," node branches compact  each_with_object "," node branches compact  ","node branches compact  each_with_object ","node node branches compact  compact ","node node branches compact  "]}," RuboCop Cop Lint DeprecatedConstants deprecated_constants":{"type":"method","name":"deprecated_constants","children":[],"call":[" cop_config fetch "," cop_config "]}," RuboCop Cop Lint DeprecatedConstants message":{"type":"method","name":"message","children":[],"call":[" format "]}," RuboCop Cop Lint DeprecatedConstants consntant_name":{"type":"method","name":"consntant_name","children":[],"call":[" consntant_name ","node namespace short_name ","node namespace ","node namespace const_type? "]}," RuboCop Cop Lint DeprecatedConstants on_const":{"type":"method","name":"on_const","children":[],"call":["corrector replace "," add_offense "," message ","node source ","deprecated_constant [] "," deprecated_constants [] "," deprecated_constants "," consntant_name ","node short_name to_s ","node short_name ","node absolute? ","node loc "," constant_name "," target_ruby_version < ","version to_f "," target_ruby_version "," deprecated_constants []  [] ","deprecated_node source  [] ","deprecated_ consntant_name  [] ","deprecated_ constant_name  [] ","  deprecated_constants [] s [] "," deprecated_node source s [] "," deprecated_ consntant_name s [] "," deprecated_ constant_name s [] ","  deprecated_constants [] s "," deprecated_node source s "," deprecated_ consntant_name s "," deprecated_ constant_name s "," node source _name ","  consntant_name _name ","  constant_name _name "," target_ruby_deprecated_constant []  < ","deprecated_constant []  to_f "," target_ruby_deprecated_constant []  "]}," RuboCop Cop Lint Debugger debugger_method?":{"type":"method","name":"debugger_method?","children":[],"call":[" valid_receiver? ","method [] ","send_node receiver ","send_node receiver nil? ","method [] nil? ","method [] == ","send_node method_name "," debugger_methods any? "," debugger_methods "," cop_config fetch include? ","name to_s "," cop_config fetch "," cop_config "," receiver_chain "," debugger_methods include? "," chained_method_name ","send_node parent receiver == ","send_node parent receiver ","send_node parent ","send_node send_node method_name  "," chained_send_node method_name  "]}," RuboCop Cop Lint Debugger debugger_methods":{"type":"method","name":"debugger_methods","children":[],"call":["(send\n  (lvar :values) :map) compact ","method_name to_sym ","receiver join to_sym ","receiver join ","receiver empty? ","v split ","values map ","config values flatten ","config values ","config is_a? "," cop_config fetch "," cop_config ","receiver map ","(send\n  (lvar :config values flatten ) :map) compact ","config values flatten  map ","config config values flatten  flatten "," cop_config fetch  values flatten ","config config values flatten  "," cop_config fetch  values "," cop_config fetch  is_a? "," cop_ cop_config fetch  fetch "," cop_ cop_config fetch  "]}," RuboCop Cop Lint ConstantDefinitionInBlock method_name":{"type":"method","name":"method_name","children":[],"call":["node ancestors find send_node method_name ","node ancestors find send_node ","node ancestors find ","node ancestors ","node ancestors find method_name "]}," RuboCop Cop Lint AmbiguousAssignment rhs":{"type":"method","name":"rhs","children":[],"call":["node children [] ","node children ","node casgn_type? "]}," RuboCop Cop Lint AmbiguousAssignment on_asgn":{"type":"method","name":"on_asgn","children":[],"call":[" add_offense "," format ","MISTAKES  [] ","MISTAKES  key? ","range source "," range_between ","rhs source_range begin_pos + ","rhs source_range begin_pos ","rhs source_range ","node loc operator end_pos - ","node loc operator end_pos ","node loc operator ","node loc "," rhs ","range range source  "," range_between  source ","  range_between _between ","rhs range source _range begin_pos + ","rhs source_ range_between  begin_pos + "," rhs  source_range begin_pos + ","rhs range source _range begin_pos ","rhs source_ range_between  begin_pos "," rhs  source_range begin_pos ","rhs range source _range ","rhs source_ range_between  "," rhs  source_range ","  rhs  "]}," RuboCop Cop Layout SpaceInsideParens each_extraneous_space_in_empty_parens":{"type":"method","name":"each_extraneous_space_in_empty_parens","children":[],"call":[" range_between ","token2 begin_pos ","token1 end_pos "," range_between source == "," range_between source ","token2 end_pos ","token1 begin_pos ","token2 right_parens? ","token1 left_parens? "]}," RuboCop Cop Layout SpaceInsideParens process_with_space_style":{"type":"method","name":"process_with_space_style","children":[],"call":["corrector insert_before "," add_offense "," each_missing_space ","corrector remove "," each_extraneous_space_in_empty_parens ","processed_source tokens each_cons ","processed_source tokens ","tokens each_cons "," correct_missing_space "," correct_extraneous_space_in_empty_parens "]}," RuboCop Cop Layout SpaceBeforeBrackets reference_variable_with_brackets?":{"type":"method","name":"reference_variable_with_brackets?","children":[],"call":["node arguments size == ","node arguments size ","node arguments ","node method? ","node receiver "]}," RuboCop Cop Layout SpaceBeforeBrackets register_offense":{"type":"method","name":"register_offense","children":[],"call":["corrector remove "," add_offense "]}," RuboCop Cop Layout SpaceBeforeBrackets offense_range_for_assignment":{"type":"method","name":"offense_range_for_assignment","children":[],"call":["(lvasgn :range\n  (send nil :range_between\n    (lvar :end_pos)\n    (send\n      (lvar :begin_pos) :-\n      (int 1)))) source start_with? ","(lvasgn :range\n  (send nil :range_between\n    (lvar :end_pos)\n    (send\n      (lvar :begin_pos) :-\n      (int 1)))) source "," range_between ","begin_pos - ","begin_pos - == ","node receiver source_range end_pos ","node receiver source_range ","node receiver ","(lvasgn :range\n  (send nil :range_between\n    (lvar :end_pos)\n    (send\n      (lvar :begin_pos) :-\n      (int 1)))) source == ","(lvasgn : range_between \n  (send nil : range_between _between\n    (lvar :end_pos)\n    (send\n      (lvar :begin_pos) :-\n      (int 1)))) source start_with? ","(lvasgn :range\n  (send nil :range_between\n    (lvar :node receiver source_range end_pos )\n    (send\n      (lvar :begin_pos) :-\n      (int 1)))) source start_with? ","(lvasgn : range_between \n  (send nil : range_between _between\n    (lvar :end_pos)\n    (send\n      (lvar :begin_pos) :-\n      (int 1)))) source ","(lvasgn :range\n  (send nil :range_between\n    (lvar :node receiver source_range end_pos )\n    (send\n      (lvar :begin_pos) :-\n      (int 1)))) source ","  range_between _between ","node receiver source_ range_between  end_pos ","node receiver source_range node receiver source_range end_pos  ","node receiver source_ range_between  ","(lvasgn : range_between \n  (send nil : range_between _between\n    (lvar :end_pos)\n    (send\n      (lvar :begin_pos) :-\n      (int 1)))) source == ","(lvasgn :range\n  (send nil :range_between\n    (lvar :node receiver source_range end_pos )\n    (send\n      (lvar :begin_pos) :-\n      (int 1)))) source == "]}," RuboCop Cop Layout SpaceBeforeBrackets offense_range":{"type":"method","name":"offense_range","children":[],"call":[" offense_range_for_assignment ","node method? "," range_between ","receiver_end_pos >= ","node loc selector begin_pos ","node loc selector ","node loc ","node receiver source_range end_pos ","node receiver source_range ","node receiver "," reference_variable_with_brackets? "," dot_before_brackets? ","begin_pos - ","begin_pos - == ","node loc selector end_pos "," space_before_brackets? ","node receiver source_range end_pos  >= ","receiver_node receiver source_range end_pos  >= ","node receiver source_range node receiver source_range end_pos  ","node loc selector node receiver source_range end_pos  "]}," RuboCop Cop Layout SpaceBeforeBrackets on_send":{"type":"method","name":"on_send","children":[],"call":[" register_offense "," offense_range ","first_argument source_range begin_pos ","first_argument source_range ","node first_argument ","node parent ","node parenthesized? "," offense_ offense_range  ","first_argument source_ offense_range  begin_pos ","first_argument source_range first_argument source_range begin_pos  ","node first_argument  source_range begin_pos ","first_argument source_ offense_range  ","node first_argument  source_range ","node node first_argument  "]}," RuboCop Cop Layout LineLength on_investigation_end":{"type":"method","name":"on_investigation_end","children":[],"call":[" check_line "," processed_source lines each_with_index "," processed_source lines "," processed_source "]}," RuboCop Cop Layout LineLength on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[" check_for_breakable_semicolons "," processed_source "," processed_source raw_source include? "," processed_source raw_source "]}," RuboCop Cop Layout HeredocArgumentClosingParenthesis find_most_bottom_of_heredoc_end":{"type":"method","name":"find_most_bottom_of_heredoc_end","children":[],"call":["(send\n  (lvar :arguments) :map) compact max ","(send\n  (lvar :arguments) :map) compact ","argument loc heredoc_end end_pos ","argument loc heredoc_end ","argument loc ","argument loc respond_to? ","arguments map ","(send\n  (lvar :arguments) :filter_map) max ","arguments filter_map "]}," RuboCop Cop Layout HeredocArgumentClosingParenthesis exist_argument_between_heredoc_end_and_closing_parentheses?":{"type":"method","name":"exist_argument_between_heredoc_end_and_closing_parentheses?","children":[],"call":[" range_between source strip != "," range_between source strip "," range_between source "," range_between ","node loc end begin_pos ","node loc end ","node loc ","heredoc_end < "," find_most_bottom_of_heredoc_end ","node arguments "," find_most_bottom_of_heredoc_end  < "," find_most_bottom_of_ find_most_bottom_of_heredoc_end  "]}," RuboCop Cop Layout HeredocArgumentClosingParenthesis subsequent_closing_parentheses_in_same_line?":{"type":"method","name":"subsequent_closing_parentheses_in_same_line?","children":[],"call":["end_of_outer_send column == ","end_of_last_arg_of_outer_send column + ","end_of_last_arg_of_outer_send column ","end_of_outer_send column ","end_of_outer_send line == ","end_of_last_arg_of_outer_send line ","end_of_outer_send line ","outermost_send loc end ","outermost_send loc ","last_arg_of_outer_send loc end ","last_arg_of_outer_send loc ","(lvar :last_arg_of_outer_send) respond_to? ","outermost_send last_argument "," same_line? ","outermost_send loc end  column == ","last_arg_of_outer_send loc end  column + ","end_of_outermost_send last_argument  column + ","last_arg_of_outer_send loc end  column ","end_of_outermost_send last_argument  column ","outermost_send loc end  column ","outermost_send loc end  line == ","last_arg_of_outer_send loc end  line ","end_of_outermost_send last_argument  line ","outermost_send loc end  line ","outermost_send last_argument  loc end ","outermost_send last_argument  loc ","(lvar :outermost_send last_argument ) respond_to? "]}," RuboCop Cop Layout FirstArgumentIndentation argument_alignment_config":{"type":"method","name":"argument_alignment_config","children":[],"call":[" config for_cop "," config "]}," RuboCop Cop Layout FirstArgumentIndentation enforce_first_argument_with_fixed_indentation?":{"type":"method","name":"enforce_first_argument_with_fixed_indentation?","children":[],"call":[" argument_alignment_config [] == "," argument_alignment_config [] "," argument_alignment_config "]}," RuboCop Cop Layout EndOfLine on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[" add_offense "," source_range ","line length ","index + "," processed_source buffer "," processed_source "," unimportant_missing_cr? "," offense_message ","index >= "," processed_source raw_source each_line with_index "," processed_source raw_source each_line "," processed_source raw_source "," last_line "," source_ source_range  ","  last_line  "]}," RuboCop Cop Layout EmptyLinesAroundArguments receiver_and_method_call_on_different_lines?":{"type":"method","name":"receiver_and_method_call_on_different_lines?","children":[],"call":["node receiver loc last_line != ","node loc selector ","node loc ","node receiver loc last_line ","node receiver loc ","node receiver ","node loc selector line "]}," RuboCop Cop Layout EmptyLineBetweenDefs allowance_range?":{"type":"method","name":"allowance_range?","children":[],"call":[" minimum_empty_lines != "," maximum_empty_lines "," minimum_empty_lines "]}," RuboCop Cop Layout EmptyLineBetweenDefs node_type":{"type":"method","name":"node_type","children":[],"call":["node type "]}," RuboCop Cop Layout EmptyLineBetweenDefs end_loc":{"type":"method","name":"end_loc","children":[],"call":["node loc end ","node loc ","node loc expression end ","node loc expression ","node endless? ","node defs_type? ","node def_type? ","node source_range end ","node source_range "]}," RuboCop Cop Layout EmptyLineBetweenDefs line_count_allowed?":{"type":"method","name":"line_count_allowed?","children":[],"call":["(irange\n  (send nil :minimum_empty_lines)\n  (send nil :maximum_empty_lines)) cover? "," maximum_empty_lines "," minimum_empty_lines "]}," RuboCop Cop Layout EmptyLineBetweenDefs expected_lines":{"type":"method","name":"expected_lines","children":[],"call":[" maximum_empty_lines "," maximum_empty_lines == "," minimum_empty_lines "," allowance_range? "]}," RuboCop Cop Layout EmptyLineBetweenDefs message":{"type":"method","name":"message","children":[],"call":[" format "," expected_lines "," node_type ","node type "," node_ node_type  ","node  node_type  "]}," RuboCop Cop Layout EmptyLineBetweenDefs module_candidate?":{"type":"method","name":"module_candidate?","children":[],"call":["node module_type? "," cop_config [] "," cop_config "]}," RuboCop Cop Layout EmptyLineBetweenDefs class_candidate?":{"type":"method","name":"class_candidate?","children":[],"call":["node class_type? "," cop_config [] "," cop_config "]}," RuboCop Cop Layout EmptyLineBetweenDefs method_candidate?":{"type":"method","name":"method_candidate?","children":[],"call":["node defs_type? ","node def_type? "," cop_config [] "," cop_config "]}," RuboCop Cop Layout EmptyLineBetweenDefs candidate?":{"type":"method","name":"candidate?","children":[],"call":[" module_candidate? "," class_candidate? "," method_candidate? "," macro_candidate? "]}," RuboCop Cop Layout ElseAlignment assignment_node":{"type":"method","name":"assignment_node","children":[],"call":["node ancestors first ","node ancestors "]}," RuboCop Cop Layout ClassStructure ignore_for_autocorrect?":{"type":"method","name":"ignore_for_autocorrect?","children":[],"call":[" dynamic_constant? ","classification == "," ignore? "," classify "," classify  == "]}," RuboCop Cop InternalAffairs StyleDetectedApiUse traverse_condition":{"type":"method","name":"traverse_condition","children":[],"call":[" traverse_condition ","condition each_child_node ","condition send_type? "]}," RuboCop Cop InternalAffairs StyleDetectedApiUse style_detected_api_used?":{"type":"method","name":"style_detected_api_used?","children":[],"call":[" style_detected_check "," no_acceptable_style_check "," negative_style_detected_method_check "," correct_style_detected_check "]}," RuboCop Cop InternalAffairs StyleDetectedApiUse negative_without_positive?":{"type":"method","name":"negative_without_positive?","children":[],"call":[" correct_style_detected_called ! "," correct_style_detected_called "," negative_style_detected_methods_called "]}," RuboCop Cop InternalAffairs StyleDetectedApiUse positive_without_negative?":{"type":"method","name":"positive_without_negative?","children":[],"call":[" negative_style_detected_methods_called ! "," negative_style_detected_methods_called "," correct_style_detected_called "]}," RuboCop Cop InternalAffairs StyleDetectedApiUse on_if":{"type":"method","name":"on_if","children":[],"call":[" add_offense "," style_detected_api_used? "," traverse_condition ","node condition "]}," RuboCop Cop InternalAffairs StyleDetectedApiUse on_send":{"type":"method","name":"on_send","children":[],"call":[" style_detected_check "," no_acceptable_style_check "," negative_style_detected_method_check "," correct_style_detected_check "]}," RuboCop Cop InternalAffairs StyleDetectedApiUse on_investigation_end":{"type":"method","name":"on_investigation_end","children":[],"call":[" add_global_offense "," negative_without_positive? "," positive_without_negative? "," correct_style_detected_called ^ "," negative_style_detected_methods_called "," correct_style_detected_called "," style_detected_called "]}," RuboCop Cop InternalAffairs StyleDetectedApiUse on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[]}," RuboCop Cop InternalAffairs RedundantLetRuboCopConfigNew find_describe_method_node":{"type":"method","name":"find_describe_method_node","children":[],"call":["(send\n  (send\n    (lvar :block_node) :ancestors) :find) send_node ","node method? ","node block_type? ","block_node ancestors find ","block_node ancestors "]}," RuboCop Cop InternalAffairs RedundantLetRuboCopConfigNew on_block":{"type":"method","name":"on_block","children":[],"call":["corrector insert_after ","describe last_argument ","corrector remove "," range_by_whole_lines ","node source_range "," add_offense "," format ","describe last_argument source == ","describe last_argument source "," find_describe_method_node "," let_rubocop_config_new? "," find_describe_method_node  last_argument "," find_describe_method_node  last_argument source == "," find_describe_method_node  last_argument source "," find_ find_describe_method_node _method_node "]}," RuboCop Cop InternalAffairs RedundantDescribedClassAsSubject find_describe_method_node":{"type":"method","name":"find_describe_method_node","children":[],"call":["(send\n  (send\n    (lvar :block_node) :ancestors) :find) send_node ","node method? ","node block_type? ","block_node ancestors find ","block_node ancestors "]}," RuboCop Cop InternalAffairs RedundantDescribedClassAsSubject on_block":{"type":"method","name":"on_block","children":[],"call":["corrector insert_after ","describe last_argument ","corrector remove "," range_by_whole_lines ","node source_range "," add_offense "," format ","describe last_argument source == ","describe last_argument source "," find_describe_method_node ","described_class_arguments count >= ","described_class_arguments count "," described_class_subject? "," find_describe_method_node  last_argument "," find_describe_method_node  last_argument source == "," find_describe_method_node  last_argument source "," find_ find_describe_method_node _method_node "," find_describe_method_node d_class_arguments count >= "," described_class_subject?  count >= "," find_describe_method_node d_class_arguments count "," described_class_subject?  count ","  find_describe_method_node d_class_subject? "]}," RuboCop Cop InternalAffairs ExampleDescription check_description":{"type":"method","name":"check_description","children":[],"call":[" add_offense ","regexp match? ","description value ","regexps any? "," string_contents "]}," RuboCop Cop InternalAffairs ExampleDescription on_send":{"type":"method","name":"on_send","children":[],"call":[" check_description "," class const_get ","(begin\n  (lvar :method_name)) upcase "," class "," format ","node method_name "," offense_example? ","node each_ancestor first ","node each_ancestor "," check_ offense_example?  ","(begin\n  (lvar :node method_name )) upcase ","node node method_name  "]}," RuboCop Cop InternalAffairs EmptyLineBetweenExpectOffenseAndCorrection offense_range":{"type":"method","name":"offense_range","children":[],"call":["first_argument loc heredoc_end ","first_argument loc ","first_argument heredoc? ","first_argument respond_to? ","node first_argument ","node first_argument  loc heredoc_end ","node first_argument  loc ","node first_argument  heredoc? ","node first_argument  respond_to? ","node node first_argument  "]}," RuboCop Cop InternalAffairs EmptyLineBetweenExpectOffenseAndCorrection on_send":{"type":"method","name":"on_send","children":[],"call":["corrector insert_after "," add_offense "," format ","range last_line + == ","next_sibling loc line ","next_sibling loc ","range last_line + ","range last_line "," offense_range ","CORRECTION_EXPECTATION_METHODS  include? ","next_sibling method_name ","next_sibling send_type? ","node right_sibling "," offense_range  last_line + == ","node right_sibling  loc line ","node right_sibling  loc "," offense_range  last_line + "," offense_range  last_line "," offense_ offense_range  ","next_sibling next_sibling method_name  ","node right_sibling  method_name ","node right_sibling  send_type? "]}," RuboCop Cop Gemspec RequiredRubyVersion on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[" add_offense "," source_range "," processed_source buffer "," processed_source "," not_equal_message "," target_ruby_version ","version_def loc expression ","version_def loc ","ruby_version == "," target_ruby_version to_s ","ruby_version ! "," extract_ruby_version "," defined_ruby_version "," required_ruby_version first "," required_ruby_version "," processed_source ast "," add_global_offense "," required_ruby_version? "," source_ source_range  "," target_ extract_ruby_version  "," required_ruby_version first  loc expression "," required_ruby_version first  loc "," extract_ruby_version  == "," target_ extract_ruby_version  to_s "," extract_ruby_version  ! "," extract_ extract_ruby_version  "," defined_ extract_ruby_version  "," required_ extract_ruby_version  first "," required_ extract_ruby_version  "," required_ extract_ruby_version ? "]}," RuboCop Cop Gemspec DuplicatedAssignment on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[" register_offense ","nodes first first_line ","nodes first ","node method_name ","nodes [] each ","nodes [] "," duplicated_assignment_method_nodes each "," duplicated_assignment_method_nodes "," processed_source blank? "," processed_source "]}," RuboCop Cop Gemspec DateAssignment on_block":{"type":"method","name":"on_block","children":[],"call":["corrector remove "," range_by_whole_lines ","date_assignment source_range "," add_offense ","node method? ","(send\n  (lvar :node) :receiver) == ","node receiver ","node send_type? ","block_node descendants detect ","block_node descendants ","block_node arguments first source ","block_node arguments first ","block_node arguments "," gem_specification "," gem_specification? ","  range_by_whole_lines _by_whole_lines ","date_assignment source_ range_by_whole_lines  "]}," RuboCop ExcludeLimit transform":{"type":"method","name":"transform","children":[],"call":["parameter_name gsub downcase ","parameter_name gsub "]}," RuboCop ExcludeLimit exclude_limit":{"type":"method","name":"exclude_limit","children":[],"call":["cfg [] []= ","cfg [] ","(lvar :current_max) max ","cfg [] [] "," config_to_allow_offenses "," define_method "," config_to_allow_offenses  [] []= "," config_to_allow_offenses  [] ","(lvar :cfg [] [] ) max "," config_to_allow_offenses  [] [] "]}," RuboCop Cop Bundler DuplicatedGem on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[" register_offense ","nodes first first_line ","nodes first ","node first_argument to_a first ","node first_argument to_a ","node first_argument ","nodes [] each ","nodes [] "," duplicated_gem_nodes each "," duplicated_gem_nodes "," processed_source blank? "," processed_source "]}," RuboCop Cop Base use_corrector":{"type":"method","name":"use_corrector","children":[],"call":[" cop_config fetch "," cop_config "," attempt_correction "," autocorrect? "]}," RuboCop Cop AutocorrectLogic surrounding_heredoc":{"type":"method","name":"surrounding_heredoc","children":[],"call":["range contains? ","(send\n  (lvar :heredoc_nodes) :map) find ","node loc expression join ","node loc heredoc_end ","node loc ","node loc expression ","heredoc_nodes map ","node heredoc? ","node respond_to? "," processed_source ast each_descendant select "," processed_source ast each_descendant "," processed_source ast "," processed_source ","offense_range empty? ","node source_range join ","node source_range "]}," RuboCop ConfigValidator check_obsoletions":{"type":"method","name":"check_obsoletions","children":[],"call":[" warn "," Rainbow yellow "," Rainbow ","@config_obsoletion warnings join ","@config_obsoletion warnings ","@config_obsoletion warnings any? ","@config_obsoletion reject_obsolete! ","@config_obsoletion reject_obsolete_cops_and_parameters "]}," RuboCop ConfigStore unvalidated":{"type":"method","name":"unvalidated","children":[],"call":[]}," RuboCop ConfigObsoletion obsoletions":{"type":"method","name":"obsoletions","children":[],"call":["rule message ","@warnings push ","rule warning? ","rule violated? "," rules map "," rules "]}," RuboCop ConfigObsoletion load_parameter_rules":{"type":"method","name":"load_parameter_rules","children":[],"call":["PARAMETER_RULE_CLASSES  [] new ","PARAMETER_RULE_CLASSES  [] ","cops product map ","cops product "," Array ","configuration [] ","data flat_map ","rules flat_map "," Array  product map "," Array  product "]}," RuboCop ConfigObsoletion load_cop_rules":{"type":"method","name":"load_cop_rules","children":[],"call":["(send\n  (lvar :data) :map) compact ","COP_RULE_CLASSES  [] new ","COP_RULE_CLASSES  [] ","data map ","rules flat_map ","data filter_map "]}," RuboCop ConfigObsoletion load_rules":{"type":"method","name":"load_rules","children":[],"call":[" load_cop_rules concat "," load_parameter_rules "," load_cop_rules ","rules slice ","PARAMETER_RULE_CLASSES  keys ","COP_RULE_CLASSES  keys ","first merge ","hash merge! ","YAML  safe_load ","File  read "," class files each_with_object "," class files "," class ","first concat "," load_rules slice  concat "," load_rules slice  "]}," RuboCop ConfigObsoletion reject_obsolete!":{"type":"method","name":"reject_obsolete!","children":[],"call":[" raise ","messages join ","messages empty? "," obsoletions flatten compact "," obsoletions flatten "," obsoletions "," obsoletions flatten compact  join "," obsoletions flatten compact  empty? "]}," RuboCop ConfigObsoletion legacy_cop_names":{"type":"method","name":"legacy_cop_names","children":[],"call":[" new rules select map "," new rules select "," new rules "," new ","Config  new "]}," RuboCop ConfigObsoletion SplitCop alternatives":{"type":"method","name":"alternatives","children":[],"call":[" Array map "," Array "," metadata [] "," metadata "]}," RuboCop ConfigObsoletion SplitCop rule_message":{"type":"method","name":"rule_message","children":[],"call":[" to_sentence "," alternatives "," old_name "]}," RuboCop ConfigObsoletion SplitCop initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop ConfigObsoletion Rule smart_loaded_path":{"type":"method","name":"smart_loaded_path","children":[],"call":["PathUtil  smart_path "," config loaded_path "," config "]}," RuboCop ConfigObsoletion Rule to_sentence":{"type":"method","name":"to_sentence","children":[],"call":["(send\n  (send\n    (lvar :collection) :[]\n    (irange\n      (int 0)\n      (int -2))) :join\n  (str \", \")) join ","collection [] ","collection [] join ","collection first ","collection size == ","collection size "]}," RuboCop ConfigObsoletion Rule violated?":{"type":"method","name":"violated?","children":[],"call":[" raise "]}," RuboCop ConfigObsoletion Rule parameter_rule?":{"type":"method","name":"parameter_rule?","children":[],"call":[]}," RuboCop ConfigObsoletion Rule cop_rule?":{"type":"method","name":"cop_rule?","children":[],"call":[]}," RuboCop ConfigObsoletion Rule initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop ConfigObsoletion RenamedCop verb":{"type":"method","name":"verb","children":[],"call":[" moved? "]}," RuboCop ConfigObsoletion RenamedCop moved?":{"type":"method","name":"moved?","children":[],"call":["old_badge cop_name == ","new_badge cop_name ","old_badge cop_name ","old_badge department != ","new_badge department ","old_badge department ","Cop Badge  parse "," new_name "," old_name ","Cop Badge  parse  cop_name == ","Cop Badge  parse  cop_name ","Cop Badge  parse  department != ","Cop Badge  parse  department "]}," RuboCop ConfigObsoletion RenamedCop rule_message":{"type":"method","name":"rule_message","children":[],"call":[" new_name "," verb "," old_name "]}," RuboCop ConfigObsoletion RenamedCop initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop ConfigObsoletion RemovedCop alternatives":{"type":"method","name":"alternatives","children":[],"call":[" Array map "," Array "," metadata [] "," metadata "]}," RuboCop ConfigObsoletion RemovedCop reason":{"type":"method","name":"reason","children":[],"call":[" metadata [] "," metadata "]}," RuboCop ConfigObsoletion RemovedCop rule_message":{"type":"method","name":"rule_message","children":[],"call":[" to_sentence "," alternatives "," reason chomp "," reason "," format "," old_name "]}," RuboCop ConfigObsoletion RemovedCop initialize":{"type":"method","name":"initialize","children":[],"call":["metadata is_a? "]}," RuboCop ConfigObsoletion ParameterRule severity":{"type":"method","name":"severity","children":[],"call":[" metadata [] "," metadata "]}," RuboCop ConfigObsoletion ParameterRule reason":{"type":"method","name":"reason","children":[],"call":[" metadata [] "," metadata "]}," RuboCop ConfigObsoletion ParameterRule alternative":{"type":"method","name":"alternative","children":[],"call":[" metadata [] "," metadata "]}," RuboCop ConfigObsoletion ParameterRule warning?":{"type":"method","name":"warning?","children":[],"call":[" severity == "," severity "]}," RuboCop ConfigObsoletion ParameterRule violated?":{"type":"method","name":"violated?","children":[],"call":[" parameter "," config [] "," cop "," config "," applies_to_current_ruby_version? "]}," RuboCop ConfigObsoletion ParameterRule parameter_rule?":{"type":"method","name":"parameter_rule?","children":[],"call":[]}," RuboCop ConfigObsoletion ParameterRule initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop ConfigObsoletion ExtractedCop feature_loaded?":{"type":"method","name":"feature_loaded?","children":[],"call":[" config loaded_features include? "," gem "," config loaded_features "," config "]}," RuboCop ConfigObsoletion ExtractedCop affected_cops":{"type":"method","name":"affected_cops","children":[],"call":[" config keys grep ","Regexp  new "," department "," config keys "," config "," old_name "," old_name end_with? ","key start_with? ","key == "," config keys select "]}," RuboCop ConfigObsoletion ExtractedCop rule_message":{"type":"method","name":"rule_message","children":[],"call":[" format "," gem "," old_name "," department "," affected_cops size > "," affected_cops size "," affected_cops "," affected_gems size > "," affected_gems size "," affected_gems "]}," RuboCop ConfigObsoletion ExtractedCop violated?":{"type":"method","name":"violated?","children":[],"call":[" affected_cops any? "," affected_cops "," feature_loaded? "," affected_gems any? "," affected_gems "," gem_installed? "]}," RuboCop ConfigObsoletion ExtractedCop initialize":{"type":"method","name":"initialize","children":[],"call":["old_name rpartition "]}," RuboCop ConfigObsoletion CopRule violated?":{"type":"method","name":"violated?","children":[],"call":[" config key? ","Cop Badge  parse cop_name ","Cop Badge  parse "," old_name "," config "]}," RuboCop ConfigObsoletion CopRule warning?":{"type":"method","name":"warning?","children":[],"call":[]}," RuboCop ConfigObsoletion CopRule message":{"type":"method","name":"message","children":[],"call":[" rule_message + "," smart_loaded_path "," rule_message "]}," RuboCop ConfigObsoletion CopRule cop_rule?":{"type":"method","name":"cop_rule?","children":[],"call":[]}," RuboCop ConfigObsoletion CopRule initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop ConfigObsoletion ChangedParameter message":{"type":"method","name":"message","children":[],"call":[" reason chomp "," reason "," alternative chomp "," alternative "," parameter "," format "," smart_loaded_path "," cop "," to_sentence "," alternatives map "," alternatives "]}," RuboCop ConfigObsoletion ChangedEnforcedStyles value":{"type":"method","name":"value","children":[],"call":[" metadata [] "," metadata "]}," RuboCop ConfigObsoletion ChangedEnforcedStyles message":{"type":"method","name":"message","children":[],"call":[" reason chomp "," reason "," alternative chomp "," alternative "," parameter "," value "," format "," smart_loaded_path "," cop "]}," RuboCop ConfigObsoletion ChangedEnforcedStyles violated?":{"type":"method","name":"violated?","children":[],"call":[" config [] [] == "," value "," config [] [] "," parameter "," config [] "," cop "," config "]}," RuboCop ConfigLoaderResolver merge_hashes?":{"type":"method","name":"merge_hashes?","children":[],"call":["derived_hash [] is_a? ","derived_hash [] ","base_hash [] is_a? ","base_hash [] "]}," RuboCop ConfigLoaderResolver override_enabled_for_disabled_departments":{"type":"method","name":"override_enabled_for_disabled_departments","children":[],"call":["derived_hash replace "," merge ","base_hash dig == ","base_hash dig ","cops_to_disable each ","cops concat ","base_hash keys grep ","Regexp  new ","base_hash keys "," disabled? ","derived_hash each_key with_object ","derived_hash each_key "]}," RuboCop ConfigLoader yaml_safe_load!":{"type":"method","name":"yaml_safe_load!","children":[],"call":["YAML  safe_load "]}," RuboCop CLI suggest_extensions":{"type":"method","name":"suggest_extensions","children":[],"call":[" run_command "]}," RuboCop CLI Command SuggestExtensions puts":{"type":"method","name":"puts","children":[],"call":["output puts ","@options [] "]}," RuboCop CLI Command SuggestExtensions installed_gems":{"type":"method","name":"installed_gems","children":[],"call":[" lockfile gems map "," lockfile gems "," lockfile "," class installed_gems "," class ","Bundler LockfileParser  new specs map ","Bundler LockfileParser  new specs ","Bundler LockfileParser  new ","Bundler  read_file ","Bundler  default_lockfile "," bundler "," Bundler  read_file  gems map "," Bundler  read_file  gems "," Bundler  read_file  ","Bundler  default_Bundler  read_file  "]}," RuboCop CLI Command SuggestExtensions dependent_gems":{"type":"method","name":"dependent_gems","children":[],"call":[" lockfile dependencies map "," lockfile dependencies "," lockfile ","Bundler  load dependencies map ","Bundler  load dependencies ","Bundler  load "," class dependent_gems "," class ","gems dependencies map ","gems dependencies "," bundler "]}," RuboCop CLI Command SuggestExtensions lockfile":{"type":"method","name":"lockfile","children":[],"call":["Lockfile  new "]}," RuboCop CLI Command SuggestExtensions extensions":{"type":"method","name":"extensions","children":[],"call":["(send\n  (lvar :extensions) :select) keys - "," installed_gems ","(send\n  (lvar :extensions) :select) keys ","(send\n  (send nil :Array\n    (lvar :v)) :&\n  (send nil :dependent_gems)) any? "," Array & "," dependent_gems "," Array ","extensions select ","@config_store for_pwd for_all_cops [] ","@config_store for_pwd for_all_cops ","@config_store for_pwd "," lockfile dependencies any? "," lockfile dependencies "," lockfile "," not_installed_extensions + "," installed_and_not_loaded_extensions "," not_installed_extensions ","(send\n  (lvar :v) :&\n  (send nil :dependent_gems)) any? ","v & "," dependent_gems any? ","(send\n  (lvar :@config_store for_pwd for_all_cops [] ) :select) keys - ","(send\n  (lvar :@config_store for_pwd for_all_cops [] ) :select) keys ","@config_store for_pwd for_all_cops []  select "," not_installed_@config_store for_pwd for_all_cops []  + "," installed_and_not_loaded_@config_store for_pwd for_all_cops []  "," not_installed_@config_store for_pwd for_all_cops []  "]}," RuboCop CLI Command SuggestExtensions current_formatter":{"type":"method","name":"current_formatter","children":[],"call":["@config_store for_pwd for_all_cops [] ","@config_store for_pwd for_all_cops ","@config_store for_pwd ","@options [] "]}," RuboCop CLI Command SuggestExtensions skip?":{"type":"method","name":"skip?","children":[],"call":["INCLUDED_FORMATTERS  include? ! ","INCLUDED_FORMATTERS  include? "," current_formatter ","@options [] ","ENV  [] ","ENV  fetch "]}," RuboCop CLI Command SuggestExtensions run":{"type":"method","name":"run","children":[],"call":[" puts ","@options [] "," extensions sort each "," extensions sort "," extensions "," extensions none? "," skip? "," print_opt_out_instruction "," print_load_suggestions "," installed_and_not_loaded_extensions any? "," installed_and_not_loaded_extensions "," print_install_suggestions "," not_installed_extensions any? "," not_installed_extensions "," extensions each "]}," RuboCop CLI Command ExecuteRunner display_summary":{"type":"method","name":"display_summary","children":[],"call":[" display_error_summary ","runner errors "," display_warning_summary ","runner warnings "]}," RuboCop CLI Command ExecuteRunner with_redirect":{"type":"method","name":"with_redirect","children":[],"call":["$stdout reopen ","$stdout dup ","@options [] "]}," RuboCop TargetRuby GemspecFile find_minimal_known_ruby":{"type":"method","name":"find_minimal_known_ruby","children":[],"call":["requirement satisfied_by? ","Gem Version  new ","KNOWN_RUBIES  detect ","Gem Requirement  new "," version_from_right_hand_side ","Gem Requirement  new  satisfied_by? ","  version_from_right_hand_side _from_right_hand_side "]}," RuboCop TargetRuby GemspecFile version_from_right_hand_side":{"type":"method","name":"version_from_right_hand_side","children":[],"call":["right_hand_side value ","right_hand_side children last value ","right_hand_side children last ","right_hand_side children "," gem_requirement? "," version_from_array ","right_hand_side array_type? ","gem_requirement_versions map "," gem_requirement_versions "," gem_requirement_versions  map ","  gem_requirement_versions  "]}," RuboCop Cop Style UnlessLogicalOperators mixed_precedence_or?":{"type":"method","name":"mixed_precedence_or?","children":[],"call":["node source include? ","node source ","(or\n  (block\n    (send\n      (lvar :or_sources) :all?)\n    (args\n      (arg :s))\n    (send\n      (lvar :s) :==\n      (str \"||\")))\n  (block\n    (send\n      (lvar :or_sources) :all?)\n    (args\n      (arg :s))\n    (send\n      (lvar :s) :==\n      (str \"or\")))) ! ","s == ","or_sources all? ","or_sources << ","node condition operator ","node condition ","node condition or_type? ","node condition each_descendant map ","node condition each_descendant ","(or\n  (send\n    (lvar :or_sources) :all?\n    (str \"||\"))\n  (send\n    (lvar :or_sources) :all?\n    (str \"or\"))) ! ","(or\n  (block\n    (send\n      (lvar :node condition each_descendant map ) :all?)\n    (args\n      (arg :s))\n    (send\n      (lvar :s) :==\n      (str \"||\")))\n  (block\n    (send\n      (lvar :node condition each_descendant map ) :all?)\n    (args\n      (arg :s))\n    (send\n      (lvar :s) :==\n      (str \"or\")))) ! ","node condition each_descendant map  all? ","node condition each_descendant map  << ","(or\n  (send\n    (lvar :node condition each_descendant map ) :all?\n    (str \"||\"))\n  (send\n    (lvar :node condition each_descendant map ) :all?\n    (str \"or\"))) ! "]}," RuboCop Cop Style UnlessLogicalOperators mixed_precedence_and?":{"type":"method","name":"mixed_precedence_and?","children":[],"call":["node source include? ","node source ","(or\n  (block\n    (send\n      (lvar :and_sources) :all?)\n    (args\n      (arg :s))\n    (send\n      (lvar :s) :==\n      (str \"&&\")))\n  (block\n    (send\n      (lvar :and_sources) :all?)\n    (args\n      (arg :s))\n    (send\n      (lvar :s) :==\n      (str \"and\")))) ! ","s == ","and_sources all? ","and_sources << ","node condition operator ","node condition ","node condition and_type? ","node condition each_descendant map ","node condition each_descendant ","(or\n  (send\n    (lvar :and_sources) :all?\n    (str \"&&\"))\n  (send\n    (lvar :and_sources) :all?\n    (str \"and\"))) ! ","(or\n  (block\n    (send\n      (lvar :node condition each_descendant map ) :all?)\n    (args\n      (arg :s))\n    (send\n      (lvar :s) :==\n      (str \"&&\")))\n  (block\n    (send\n      (lvar :node condition each_descendant map ) :all?)\n    (args\n      (arg :s))\n    (send\n      (lvar :s) :==\n      (str \"and\")))) ! ","node condition each_descendant map  all? ","node condition each_descendant map  << ","(or\n  (send\n    (lvar :node condition each_descendant map ) :all?\n    (str \"&&\"))\n  (send\n    (lvar :node condition each_descendant map ) :all?\n    (str \"and\"))) ! "]}," RuboCop Cop Style UnlessLogicalOperators mixed_logical_operator?":{"type":"method","name":"mixed_logical_operator?","children":[],"call":[" mixed_precedence_or? "," mixed_precedence_and? "," and_with_or? "," or_with_and? "]}," RuboCop Cop Style UnlessLogicalOperators on_if":{"type":"method","name":"on_if","children":[],"call":[" add_offense "," logical_operator? "," style == "," style "," mixed_logical_operator? ","node unless? "]}," RuboCop Cop Style SymbolProc allow_if_method_has_argument?":{"type":"method","name":"allow_if_method_has_argument?","children":[],"call":["node arguments count zero? ! ","node arguments count zero? ","node arguments count ","node arguments "," cop_config fetch ! ! "," cop_config fetch ! "," cop_config fetch "," cop_config ","send_node arguments count zero? ! ","send_node arguments count zero? ","send_node arguments count ","send_node arguments "]}," RuboCop Cop Style RedundantBegin empty_begin?":{"type":"method","name":"empty_begin?","children":[],"call":["node children empty? ","node children "]}," RuboCop Cop Style MultipleComparison reset_comparison":{"type":"method","name":"reset_comparison","children":[],"call":[]}," RuboCop Cop Style MultipleComparison switch_comparison?":{"type":"method","name":"switch_comparison?","children":[],"call":["descendant == ","@last_comparison descendants none? ","@last_comparison descendants ","@last_comparison nil? "]}," RuboCop Cop Style HashConversion allowed_splat_argument?":{"type":"method","name":"allowed_splat_argument?","children":[],"call":[" cop_config fetch "," cop_config "]}," RuboCop Cop Style HashConversion requires_parens?":{"type":"method","name":"requires_parens?","children":[],"call":["node parenthesized? ! ","node parenthesized? ","node arguments any? ","node arguments ","node call_type? ","node and_type? ","node or_type? "]}," RuboCop Cop Layout FirstArgumentIndentation bare_operator?":{"type":"method","name":"bare_operator?","children":[],"call":["node dot? ! ","node dot? ","node operator_method? "]}," RuboCop Cop InternalAffairs NodeMatcherDirective correct_directive":{"type":"method","name":"correct_directive","children":[],"call":["corrector replace ","directive [] ","directive [] text gsub ","directive [] text ","Regexp  escape "]}," RuboCop Cop InternalAffairs NodeMatcherDirective last_line":{"type":"method","name":"last_line","children":[],"call":["node loc last_line ","node loc ","node last_argument loc heredoc_end line ","node last_argument loc heredoc_end ","node last_argument loc ","node last_argument ","node last_argument heredoc? "]}," RuboCop Cop InternalAffairs NodeMatcherDirective add_newline?":{"type":"method","name":"add_newline?","children":[],"call":["node loc line == "," last_line + "," last_line ","node loc line ","node loc "," pattern_matcher? ","node parent child_nodes [] ","node sibling_index - ","node sibling_index ","node parent child_nodes ","node parent "]}," RuboCop Cop InternalAffairs NodeMatcherDirective pattern_arguments":{"type":"method","name":"pattern_arguments","children":[],"call":["arguments << ","i + ","pattern scan map max ","pattern scan map ","pattern scan "]}," RuboCop Cop InternalAffairs NodeMatcherDirective insert_directive":{"type":"method","name":"insert_directive","children":[],"call":["corrector insert_before "," add_newline? ","arguments join ","range source match [] ","range source match ","range source "," range_with_surrounding_space ","node loc expression ","node loc "," pattern_arguments ","node arguments [] source ","node arguments [] ","node arguments ","node source_range "," pattern_arguments  join "," range_with_surrounding_space  source match [] "," range_with_surrounding_space  source match "," range_with_surrounding_space  source ","  range_with_surrounding_space _with_surrounding_space "," pattern_ pattern_arguments  ","node  pattern_arguments  [] source ","node  pattern_arguments  [] ","node  pattern_arguments  ","node source_ range_with_surrounding_space  "]}," RuboCop Cop InternalAffairs NodeMatcherDirective formatted_message":{"type":"method","name":"formatted_message","children":[],"call":[" format ","directive [] "]}," RuboCop Cop InternalAffairs NodeMatcherDirective register_offense":{"type":"method","name":"register_offense","children":[],"call":[" insert_directive "," correct_directive "," add_offense "," formatted_message ","node method_name "," formatted_ formatted_message  "]}," RuboCop Cop InternalAffairs NodeMatcherDirective directive_correct?":{"type":"method","name":"directive_correct?","children":[],"call":["directive [] == ","actual_name to_s ","directive [] "]}," RuboCop Cop InternalAffairs NodeMatcherDirective too_many_directives":{"type":"method","name":"too_many_directives","children":[],"call":[" add_offense "]}," RuboCop Cop InternalAffairs NodeMatcherDirective method_directives":{"type":"method","name":"method_directives","children":[],"call":["(send\n  (lvar :comments) :map) compact ","match [] ","comment text match ","comment text ","comments map "," processed_source ast_with_comments [] "," processed_source ast_with_comments "," processed_source ","comments filter_map ","(send\n  (lvar : processed_source ast_with_comments [] ) :map) compact ","comment text match  [] ","comment text comment text match  "," processed_source ast_with_comments []  map "," processed_source ast_with_ processed_source ast_with_comments []  [] "," processed_source ast_with_ processed_source ast_with_comments []  "," processed_source ast_with_comments []  filter_map "]}," RuboCop Cop InternalAffairs NodeMatcherDirective valid_method_name?":{"type":"method","name":"valid_method_name?","children":[],"call":["node arguments first sym_type? ","node arguments first ","node arguments ","node arguments first str_type? "]}," RuboCop Cop InternalAffairs NodeMatcherDirective on_send":{"type":"method","name":"on_send","children":[],"call":[" register_offense "," directive_correct? ","directives first "," too_many_directives ","directives size > ","directives size "," method_directives ","node arguments first value ","node arguments first ","node arguments "," valid_method_name? ","node arguments none? "," directives first _correct? ","directives first s first "," method_directives  first "," too_many_directives first s "," too_many_ method_directives  ","directives first s size > "," method_directives  size > ","directives first s size "," method_directives  size "," method_directives first s "," method_ method_directives  "]}," RuboCop DirectiveComment all_cop_names":{"type":"method","name":"all_cop_names","children":[],"call":["Cop Registry  global names - ","Cop Registry  global names ","Cop Registry  global "," exclude_redundant_directive_cop "," cop_registry names "," cop_registry "]}," RuboCop DirectiveComment parsed_cop_names":{"type":"method","name":"parsed_cop_names","children":[],"call":["(or\n  (send nil :cops)\n  (str \"\")) split "," cops ","(send\n  (send nil :splitted_cops_string) :map) flatten "," cop_names_for_department "," department? "," splitted_cops_string map "," splitted_cops_string "]}," RuboCop DirectiveComment line_number":{"type":"method","name":"line_number","children":[],"call":[" comment loc expression line "," comment loc expression "," comment loc "," comment "," comment source_range line "," comment source_range "]}," RuboCop DirectiveComment cop_names":{"type":"method","name":"cop_names","children":[],"call":[" parsed_cop_names "," all_cop_names "," all_cops? "]}," RuboCop DirectiveComment all_cops?":{"type":"method","name":"all_cops?","children":[],"call":[" cops == "," cops "]}," RuboCop DirectiveComment enabled_all?":{"type":"method","name":"enabled_all?","children":[],"call":[" all_cops? "," disabled? ! "," disabled? "]}," RuboCop DirectiveComment disabled?":{"type":"method","name":"disabled?","children":[],"call":["(str \"disable\") include? "," mode "]}," RuboCop DirectiveComment match_captures":{"type":"method","name":"match_captures","children":[],"call":[" comment text match "," comment text "," comment "]}," RuboCop DirectiveComment single_line?":{"type":"method","name":"single_line?","children":[],"call":[" class before_comment empty? ! "," class before_comment empty? "," class before_comment "," comment text "," comment "," class "," comment text start_with? ! "," comment text start_with? "]}," RuboCop DirectiveComment before_comment":{"type":"method","name":"before_comment","children":[],"call":[]}," RuboCop Cop Style StringChars on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace "," add_offense "," format ","range source ","node loc selector begin join ","node loc end ","node loc ","node loc selector begin ","node loc selector ","BAD_ARGUMENTS  include? ","node first_argument source ","node first_argument ","node arguments one? ","node arguments "," range_between ","node source_range end_pos ","node source_range ","node loc selector begin_pos ","node loc selector begin join  source "," range_between  source "," node loc selector begin join _between ","  range_between _between ","node source_node loc selector begin join  end_pos ","node source_ range_between  end_pos ","node source_node loc selector begin join  ","node source_ range_between  "]}," RuboCop Cop Style SoleNestedConditional assigned_variables":{"type":"method","name":"assigned_variables","children":[],"call":["assigned_variables + ","node children first to_s ","node children first ","node children ","condition descendants select map ","condition descendants select ","condition descendants ","condition children first to_s ","condition children first ","condition children ","condition assignment? "]}," RuboCop Cop Style SoleNestedConditional use_variable_assignment_in_condition?":{"type":"method","name":"use_variable_assignment_in_condition?","children":[],"call":["assigned_variables include? ","if_branch condition source ","if_branch condition "," assigned_variables "," assigned_variables  include? ","  assigned_variables  "]}," RuboCop Cop Style RescueModifier correct_rescue_block":{"type":"method","name":"correct_rescue_block","children":[],"call":["corrector insert_after ","(str \"\\n\") chop ","rescue_args source ","corrector insert_before ","corrector remove "," range_between ","node source_range end_pos ","node source_range ","operation source_range end_pos ","operation source_range "," indentation_and_offset "]}," RuboCop Cop Style RedundantBegin any_ancestor_assignment_node?":{"type":"method","name":"any_ancestor_assignment_node?","children":[],"call":["node each_ancestor any? ","node each_ancestor "]}," RuboCop Cop Style RedundantBegin valid_begin_assignment?":{"type":"method","name":"valid_begin_assignment?","children":[],"call":["node children one? ! ","node children one? ","node children "," any_ancestor_assignment_node? ","node parent "]}," RuboCop Cop Style RedundantBegin replace_begin_with_statement":{"type":"method","name":"replace_begin_with_statement","children":[],"call":["corrector remove "," range_between ","first_child source_range end_pos ","first_child source_range ","offense_range end_pos ","corrector replace ","first_child source ","node children first ","node children "," restore_removed_comments ","first_child if_type? ","first_child modifier_form? ","node children first  source_range end_pos ","first_child first_child source _range end_pos ","node children first  source_range ","first_child first_child source _range ","node children first  source ","first_child first_child source  ","node children first  if_type? ","node children first  modifier_form? "]}," RuboCop Cop Style NegatedIfElseCondition node_with_comments":{"type":"method","name":"node_with_comments","children":[],"call":["Parser Source Range  new "," buffer ","node source_range end_pos ","node source_range "," source_range_with_comment begin_pos "," source_range_with_comment "," processed_source ast_with_comments [] empty? "," processed_source ast_with_comments [] "," processed_source ast_with_comments "," processed_source ","node children [] ","node children ","node begin_type? ","node source_range node source_range end_pos  "," source_range_with_comment  source_range_with_comment begin_pos  "]}," RuboCop Cop Style MethodCallWithArgsParentheses OmitParentheses inside_string_interpolation?":{"type":"method","name":"inside_string_interpolation?","children":[],"call":["(send\n  (send\n    (lvar :node) :ancestors) :drop_while) any? ","a begin_type? ! ","a begin_type? ","node ancestors drop_while ","node ancestors "]}," RuboCop Cop Style MethodCallWithArgsParentheses OmitParentheses allowed_string_interpolation_method_call?":{"type":"method","name":"allowed_string_interpolation_method_call?","children":[],"call":[" inside_string_interpolation? "," cop_config [] "," cop_config "]}," RuboCop Cop Style MethodCallWithArgsParentheses OmitParentheses syntax_like_method_call?":{"type":"method","name":"syntax_like_method_call?","children":[],"call":["node operator_method? ","node implicit_call? "]}," RuboCop Cop Style Documentation allowed_constants":{"type":"method","name":"allowed_constants","children":[],"call":[" cop_config fetch map "," cop_config fetch "," cop_config "]}," RuboCop Cop Style Documentation constant_allowed?":{"type":"method","name":"constant_allowed?","children":[],"call":[" allowed_constants include? ","node identifier short_name ","node identifier "," allowed_constants "]}," RuboCop Cop Style Documentation nodoc_self_or_outer_module?":{"type":"method","name":"nodoc_self_or_outer_module?","children":[],"call":[" nodoc_comment? "," outer_module first "," outer_module "," compact_namespace? "]}," RuboCop Cop Style CaseLikeIf condition_from_include_or_cover_node":{"type":"method","name":"condition_from_include_or_cover_node","children":[],"call":["node first_argument == ","node first_argument ","receiver range_type? "," deparenthesize ","node receiver "," deparenthesize  range_type? ","node receiver  range_type? ","node  deparenthesize  ","node node receiver  "]}," RuboCop Cop Style CaseLikeIf find_target_in_include_or_cover_node":{"type":"method","name":"find_target_in_include_or_cover_node","children":[],"call":["node first_argument "," deparenthesize range_type? "," deparenthesize ","node receiver ","node node receiver  "]}," RuboCop Cop Style BisectedAttrAccessor correct_writer":{"type":"method","name":"correct_writer","children":[],"call":["corrector replace ","macro rest join ","macro rest ","corrector remove ","macro all_bisected? "]}," RuboCop Cop Style BisectedAttrAccessor correct_reader":{"type":"method","name":"correct_reader","children":[],"call":["corrector replace ","corrector insert_before ","macro rest join ","macro rest "," indent ","macro all_bisected? ","macro bisected_names join ","macro bisected_names "]}," RuboCop Cop Style BisectedAttrAccessor register_offense":{"type":"method","name":"register_offense","children":[],"call":[" add_offense "," format ","attr source "]}," RuboCop Cop Style BisectedAttrAccessor find_bisection":{"type":"method","name":"find_bisection","children":[],"call":["readers flat_map & ","writers flat_map ","readers flat_map ","macros partition "]}," RuboCop Cop Style BisectedAttrAccessor find_macros":{"type":"method","name":"find_macros","children":[],"call":["(send\n  (lvar :send_nodes) :each_with_object\n  (array)) group_by ","macros << ","Macro  new ","Macro  macro? ","send_nodes each_with_object ","class_def each_child_node ","class_def send_type? ","class_def def_type? ","class_def ! ","(send\n  (lvar :class_def each_child_node ) :each_with_object\n  (array)) group_by ","class_def each_child_node  each_with_object "]}," RuboCop Cop Style BisectedAttrAccessor after_class":{"type":"method","name":"after_class","children":[],"call":[" correct_reader "," correct_writer ","macro writer? "," correct "," range_by_whole_lines ","node loc expression ","node loc ","macro node ","@macros_to_rewrite [] each ","@macros_to_rewrite [] ","node source_range ","  range_by_whole_lines _by_whole_lines ","macro node  loc expression ","macro node  loc ","macro macro node  ","node source_ range_by_whole_lines  ","macro node  source_range "]}," RuboCop Cop Style BisectedAttrAccessor on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[]}," RuboCop Cop Style BisectedAttrAccessor Macro rest":{"type":"method","name":"rest","children":[],"call":[" attr_names - "," bisected_names "," attr_names "]}," RuboCop Cop Style BisectedAttrAccessor Macro all_bisected?":{"type":"method","name":"all_bisected?","children":[],"call":[" rest none? "," rest "]}," RuboCop Cop Style BisectedAttrAccessor Macro writer?":{"type":"method","name":"writer?","children":[],"call":[" node method? "," node "]}," RuboCop Cop Style BisectedAttrAccessor Macro reader?":{"type":"method","name":"reader?","children":[],"call":[" node method? "," node "]}," RuboCop Cop Style BisectedAttrAccessor Macro visibility":{"type":"method","name":"visibility","children":[],"call":[" node_visibility "," node "]}," RuboCop Cop Style BisectedAttrAccessor Macro bisected_names":{"type":"method","name":"bisected_names","children":[],"call":[" bisection map "," bisection "]}," RuboCop Cop Style BisectedAttrAccessor Macro attr_names":{"type":"method","name":"attr_names","children":[],"call":[" attrs keys "," attrs "]}," RuboCop Cop Style BisectedAttrAccessor Macro bisect":{"type":"method","name":"bisect","children":[],"call":[" attrs slice values "," attrs slice "," attrs "]}," RuboCop Cop Style BisectedAttrAccessor Macro initialize":{"type":"method","name":"initialize","children":[],"call":["(send\n  (send\n    (lvar :node) :arguments) :map) to_h ","attr source ","node arguments map ","node arguments ","node arguments to_h "]}," RuboCop Cop Style BisectedAttrAccessor Macro macro?":{"type":"method","name":"macro?","children":[],"call":[]}," RuboCop Cop Registry names_for_department":{"type":"method","name":"names_for_department","children":[],"call":["(send\n  (send nil :cops) :select) map ","cop department == ","department to_sym ","cop department "," cops select "," cops "," cops_for_department map "," cops_for_department "]}," RuboCop Cop Registry department?":{"type":"method","name":"department?","children":[],"call":[" departments include? ","name to_sym "," departments "]}," RuboCop Cop Alignment register_offense":{"type":"method","name":"register_offense","children":[],"call":[" autocorrect "," add_offense "," message "]}," RuboCop Cop Lint SymbolConversion quote_type":{"type":"method","name":"quote_type","children":[],"call":[" config for_cop [] == "," config for_cop [] "," config for_cop "," config "]}," RuboCop Cop Lint SymbolConversion correct_inconsistent_hash_keys":{"type":"method","name":"correct_inconsistent_hash_keys","children":[],"call":[" register_offense "," format "," quote_type ","key value "," properly_quoted? ","key source "," requires_quotes? "," ignore_node ","keys each "]}," RuboCop Cop Lint SymbolConversion requires_quotes?":{"type":"method","name":"requires_quotes?","children":[],"call":["sym_node value inspect match? ","sym_node value inspect ","sym_node value "]}," RuboCop Cop Lint SymbolConversion on_hash":{"type":"method","name":"on_hash","children":[],"call":[" correct_hash_key ","keys each "," correct_inconsistent_hash_keys "," requires_quotes? ","keys any? ","node keys select ","node keys "," style == "," style ","node keys select  each "," correct_inconsistent_hash_node keys select  ","node keys select  any? ","node node keys select  select ","node node keys select  "]}," RuboCop Cop Lint SuppressedException nil_body?":{"type":"method","name":"nil_body?","children":[],"call":["node body "]}," RuboCop Cop Lint NumberConversion remove_parentheses":{"type":"method","name":"remove_parentheses","children":[],"call":["corrector remove ","node loc end ","node loc ","corrector replace ","node loc begin "]}," RuboCop Cop Layout IndentationWidth check_rescue?":{"type":"method","name":"check_rescue?","children":[],"call":["rescue_node body "]}," RuboCop Cop Layout IndentationStyle on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[" autocorrect "," add_offense "," in_string_literal? "," find_offence "," processed_source lines each with_index "," processed_source lines each "," processed_source lines "," processed_source "," string_literal_ranges "," processed_source ast "," find_offense "," string_literal_ find_offence s "," string_literal_ find_offense s "]}," RuboCop Cop Layout FirstHashElementIndentation message_for_right_brace":{"type":"method","name":"message_for_right_brace","children":[],"call":[" style == "," style "]}," RuboCop Cop Layout CommentIndentation on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[" check "," processed_source comments each "," processed_source comments "," processed_source "," processed_source comments each_with_index "]}," RuboCop DirectiveComment enabled?":{"type":"method","name":"enabled?","children":[],"call":[" mode == "," mode "]}," RuboCop Cop Style RedundantBegin restore_removed_comments":{"type":"method","name":"restore_removed_comments","children":[],"call":["corrector insert_before ","node parent ","comments blank? ","comments_range source "," range_between ","first_child source_range begin_pos ","first_child source_range ","offense_range end_pos ","comments_range source  blank? ","comments_range source _range source "," range_between  source "]}," RuboCop Cop Style MultilineMethodSignature last_line_source_of_arguments":{"type":"method","name":"last_line_source_of_arguments","children":[],"call":[" processed_source [] strip "," processed_source [] ","arguments last_line - ","arguments last_line "," processed_source "]}," RuboCop Cop Layout MultilineOperationIndentation right_hand_side":{"type":"method","name":"right_hand_side","children":[],"call":["send_node first_argument source_range ","send_node first_argument "]}," RuboCop Cop Layout MultilineMethodCallIndentation right_hand_side":{"type":"method","name":"right_hand_side","children":[],"call":["dot join ","send_node loc begin ","send_node loc ","send_node implicit_call? ","dot line == ","selector line ","dot line ","send_node dot? ","send_node loc selector ","send_node loc dot "," same_line? ","send_node loc dot  join ","send_node loc dot  line == ","send_node loc selector  line ","send_node loc dot  line ","send_node send_node loc dot ? ","send_node loc send_node loc selector  ","send_node loc send_node loc dot  "]}," RuboCop Cop Layout EmptyLineAfterGuardClause next_line_enable_directive_comment?":{"type":"method","name":"next_line_enable_directive_comment?","children":[],"call":["DirectiveComment  new enabled? ","DirectiveComment  new "," processed_source comment_at_line "," processed_source "," processed_source  processed_source comment_at_line _at_line "]}," RuboCop Cop Layout EmptyLineAfterGuardClause next_line_empty_or_enable_directive_comment?":{"type":"method","name":"next_line_empty_or_enable_directive_comment?","children":[],"call":[" next_line_empty? "," next_line_enable_directive_comment? ","line + "," line + _empty? "," line + _enable_directive_comment? "]}," RuboCop OptionsValidator disable_parallel_when_invalid_combo":{"type":"method","name":"disable_parallel_when_invalid_combo","children":[],"call":[" puts ","invalid_combos values join ","invalid_combos values ","@options delete ","invalid_combos empty? ","@options key? ","combos select "]}," RuboCop Cop Style StructInheritance range_for_empty_class_body":{"type":"method","name":"range_for_empty_class_body","children":[],"call":[" range_by_whole_lines ","class_node loc end ","class_node loc "," range_between ","class_node source_range end_pos ","class_node source_range ","struct_new source_range end_pos ","struct_new source_range ","class_node single_line? "]}," RuboCop Cop Style SingleLineMethods method_body_source":{"type":"method","name":"method_body_source","children":[],"call":["method_body receiver source ","method_body receiver ","method_body method_name ","method_body arguments map join ","method_body arguments map ","method_body arguments ","method_body source ","method_body parenthesized? ","method_body arguments empty? ","method_body send_type? ! ","method_body send_type? "," require_parentheses? "]}," RuboCop Cop Style RescueModifier autocorrect_incompatible_with":{"type":"method","name":"autocorrect_incompatible_with","children":[],"call":[]}," RuboCop Cop Style RedundantParentheses hash_or_array_element?":{"type":"method","name":"hash_or_array_element?","children":[],"call":["node each_ancestor any? ","node each_ancestor "]}," RuboCop Cop Style IfUnlessModifier remove_heredoc":{"type":"method","name":"remove_heredoc","children":[],"call":["corrector remove "," range_by_whole_lines ","heredoc each "]}," RuboCop Cop Style IfUnlessModifier extract_heredoc_from":{"type":"method","name":"extract_heredoc_from","children":[],"call":["last_argument loc heredoc_end ","last_argument loc ","last_argument loc heredoc_body ","last_argument loc last_argument loc heredoc_end  ","last_argument loc last_argument loc heredoc_body  "]}," RuboCop Cop Style IfUnlessModifier to_normal_form_with_heredoc":{"type":"method","name":"to_normal_form_with_heredoc","children":[],"call":["(begin\n  (send\n    (lvar :node) :keyword)) chomp ","heredoc_end source chomp ","heredoc_end source ","heredoc_body source chomp ","heredoc_body source ","node body source ","node body ","node condition source ","node condition ","node keyword "]}," RuboCop Cop Style HashConversion register_offense_for_zip_method":{"type":"method","name":"register_offense_for_zip_method","children":[],"call":["corrector insert_after ","corrector insert_before ","zip_method loc end ","zip_method loc ","zip_method parenthesized? "," add_offense "]}," RuboCop Cop Style HashConversion register_offense_for_hash":{"type":"method","name":"register_offense_for_hash","children":[],"call":[" add_parentheses ","parent parenthesized? ! ","parent parenthesized? ","node parent ","corrector replace ","hash_argument source "," add_offense "," add_node parent heses ","node parent  node parent hesized? ! ","node parent  node parent hesized? ","node node parent  "]}," RuboCop Cop Style HashConversion use_zip_method_without_argument?":{"type":"method","name":"use_zip_method_without_argument?","children":[],"call":["first_argument arguments empty? ","first_argument arguments ","first_argument method? "]}," RuboCop Cop RangeHelp contents_range":{"type":"method","name":"contents_range","children":[],"call":[" range_between ","node loc end begin_pos ","node loc end ","node loc ","node loc begin end_pos ","node loc begin "]}," RuboCop Cop Lint DeprecatedConstants constant_name":{"type":"method","name":"constant_name","children":[],"call":[" constant_name ","node namespace short_name ","node namespace ","node namespace const_type? ","nested_constant_name to_s "]}," RuboCop Cop Layout RedundantLineBreak max_line_length":{"type":"method","name":"max_line_length","children":[],"call":[" config for_cop [] "," config for_cop "," config "]}," RuboCop Cop Layout RedundantLineBreak to_single_line":{"type":"method","name":"to_single_line","children":[],"call":["source gsub gsub gsub gsub ","source gsub gsub gsub ","source gsub gsub ","source gsub ","source gsub gsub gsub gsub gsub "]}," RuboCop Cop Layout RedundantLineBreak too_long?":{"type":"method","name":"too_long?","children":[],"call":[" to_single_line length > "," max_line_length "," to_single_line length "," to_single_line ","lines join "," processed_source lines [] ","node last_line ","node first_line - ","node first_line "," processed_source lines "," processed_source "," processed_source lines []  join "," processed_source  processed_source lines []  [] "," processed_source  processed_source lines []  "]}," RuboCop Cop Layout RedundantLineBreak comment_within?":{"type":"method","name":"comment_within?","children":[],"call":["comment_line_number <= ","node last_line ","comment_line_number >= ","node first_line "," processed_source comments map map any? "," processed_source comments map map "," processed_source comments map "," processed_source comments "," processed_source ","comment_line_numbers any? ","comment loc line ","comment loc "]}," RuboCop Cop Layout RedundantLineBreak convertible_block?":{"type":"method","name":"convertible_block?","children":[],"call":["send_node arguments? ! ","send_node arguments? ","send_node parenthesized? ","node parent ","node arguments? ! ","node arguments? ","node parenthesized? ","node == ","parent send_node ","send_node node parent hesized? ","node node parent  ","node node parent hesized? ","node parent  send_node "]}," RuboCop Cop Layout RedundantLineBreak suitable_as_single_line?":{"type":"method","name":"suitable_as_single_line?","children":[],"call":["b first_line != ","b last_line ","b first_line ","node each_descendant none? ","node each_descendant "," comment_within? ! "," comment_within? ","b single_line? ! ","b single_line? ","n value include? ","n value ","n heredoc? "]}," RuboCop Cop Layout RedundantLineBreak configured_to_not_be_inspected?":{"type":"method","name":"configured_to_not_be_inspected?","children":[],"call":["node each_child_node any? ","node each_child_node ","node block_type? "," cop_config [] ! "," cop_config [] "," cop_config ","node each_descendant any? ","node each_descendant "," other_cop_takes_precedence? "," any_descendant? "]}," RuboCop Cop Layout RedundantLineBreak offense?":{"type":"method","name":"offense?","children":[],"call":[" suitable_as_single_line? "," too_long? ! "," too_long? ","node multiline? "," configured_to_not_be_inspected? "," configured_to_not_be_inspected? ! "]}," RuboCop Cop Layout RedundantLineBreak autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," to_single_line strip "," to_single_line ","node source ","node source_range "," lambda "]}," RuboCop Cop Layout RedundantLineBreak check_assignment":{"type":"method","name":"check_assignment","children":[],"call":[" ignore_node "," add_offense "," offense? "," register_offense "]}," RuboCop Cop Layout RedundantLineBreak on_send":{"type":"method","name":"on_send","children":[],"call":[" ignore_node "," add_offense "," part_of_ignored_node? ! "," part_of_ignored_node? "," offense? ","node parent ","node parent is_a? "," convertible_block? "," register_offense "," ignore_node parent  "," part_of_ignored_node parent ? ! "," part_of_ignored_node parent ? ","node parent  parent ","node parent  parent is_a? "]}," RuboCop Cop InternalAffairs ExampleDescription string_contents":{"type":"method","name":"string_contents","children":[],"call":["node source ","node value ","node str_type? "]}," RuboCop Cop Bundler GemComment restrictive_version_specified_gem?":{"type":"method","name":"restrictive_version_specified_gem?","children":[],"call":["RESTRICTIVE_VERSION_PATTERN  match? ","arg to_s ","node arguments any? ","node arguments "," version_specified_gem? ","arg value ","node arguments [] any? ","node arguments [] "]}," RuboCop Cop Base parse":{"type":"method","name":"parse","children":[],"call":["ProcessedSource  new "," target_ruby_version "]}," RuboCop ConfigLoaderResolver fix_include_paths":{"type":"method","name":"fix_include_paths","children":[],"call":["hash [] []= ","PathUtil  relative_path ","File  join ","value [] map ","value [] ","hash [] ","File  dirname ","File  basename start_with? ","File  basename ","Dir  pwd "]}," RuboCop TargetFinder symlink_excluded_or_infinite_loop?":{"type":"method","name":"symlink_excluded_or_infinite_loop?","children":[],"call":["File  realpath start_with? ","File  realpath ","File  fnmatch? ","File  symlink? ","current_dir chomp "]}," RuboCop Cop VariableForce Branch CaseMatch always_run?":{"type":"method","name":"always_run?","children":[],"call":[" target? "]}," RuboCop Cop Style SoleNestedConditional correct_from_unless_to_if":{"type":"method","name":"correct_from_unless_to_if","children":[],"call":["corrector insert_before ","node condition ","corrector wrap ","condition parenthesized? ! ","condition parenthesized? ","condition comparison_method? ","condition send_type? ","corrector replace ","node loc keyword ","node loc "," wrap_condition? "," insert_bang ","node node condition  ","node condition  parenthesized? ! ","node condition  parenthesized? ","node condition  comparison_method? ","node condition  send_type? "," wrap_node condition ? "]}," RuboCop Cop Style SingleLineMethods require_parentheses?":{"type":"method","name":"require_parentheses?","children":[],"call":["method_body comparison_method? ! ","method_body comparison_method? ","method_body arguments empty? ! ","method_body arguments empty? ","method_body arguments ","method_body send_type? "]}," RuboCop Cop Style NegatedIfElseCondition else_range":{"type":"method","name":"else_range","children":[],"call":[" range_between ","node loc end begin_pos ","node loc end ","node loc ","node loc else end_pos ","node loc else ","node else_branch ","node ternary? "]}," RuboCop Cop Style NegatedIfElseCondition if_range":{"type":"method","name":"if_range","children":[],"call":[" range_between ","node loc else begin_pos ","node loc else ","node loc ","node condition loc expression end_pos ","node condition loc expression ","node condition loc ","node condition ","node if_branch ","node ternary? ","node condition source_range end_pos ","node condition source_range "]}," RuboCop Cop Style ClassAndModuleChildren needs_compacting?":{"type":"method","name":"needs_compacting?","children":[],"call":["(sym :module) include? ","body type "]}," RuboCop Cop Lint UnusedBlockArgument used_block_local?":{"type":"method","name":"used_block_local?","children":[],"call":["variable assignments empty? ! ","variable assignments empty? ","variable assignments ","variable explicit_block_local_variable? "]}," RuboCop Cop Lint UnreachableLoop conditional_continue_keyword?":{"type":"method","name":"conditional_continue_keyword?","children":[],"call":["CONTINUE_KEYWORDS  include? ","or_node rhs type ","or_node rhs ","break_statement each_descendant to_a last ","break_statement each_descendant to_a ","break_statement each_descendant ","break_statement each_descendant to_a last  rhs type ","break_statement each_descendant to_a last  rhs "]}," RuboCop Cop Lint DeprecatedClassMethods replacement":{"type":"method","name":"replacement","children":[],"call":["DEPRECATED_METHODS_OBJECT  [] "]}," RuboCop Cop Lint DeprecatedClassMethods Replacement instance_method?":{"type":"method","name":"instance_method?","children":[],"call":[]}," RuboCop Cop Lint DeprecatedClassMethods Replacement delimeter":{"type":"method","name":"delimeter","children":[],"call":[" instance_method? "]}," RuboCop Cop Lint DeprecatedClassMethods Replacement to_s":{"type":"method","name":"to_s","children":[],"call":["(send nil :class_constant) compact join "," delimeter ","(send nil :class_constant) compact "," method "," class_constant "," delimiter "]}," RuboCop Cop Lint DeprecatedClassMethods Replacement initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop Cop Lint DeprecatedClassMethods DeprecatedClassMethod delimeter":{"type":"method","name":"delimeter","children":[],"call":[]}," RuboCop Cop Lint DeprecatedClassMethods DeprecatedClassMethod to_s":{"type":"method","name":"to_s","children":[],"call":["(send nil :class_constant) compact join "," delimeter ","(send nil :class_constant) compact "," method "," class_constant "," delimiter "]}," RuboCop Cop Lint DeprecatedClassMethods DeprecatedClassMethod correctable?":{"type":"method","name":"correctable?","children":[],"call":[]}," RuboCop Cop Layout SingleLineBlockChain offending_range":{"type":"method","name":"offending_range","children":[],"call":[" range_between ","node_location selector end_pos ","node_location selector ","dot_range begin_pos ","dot_range line > ","dot_range line ","node_location dot ","node loc ","receiver_location begin line < ","receiver_location begin line ","receiver_location begin ","receiver_location end line ","receiver_location end ","receiver loc ","node receiver "," selector_range end_pos "," selector_range "," call_method_after_block? ","node loc  selector end_pos ","node loc  selector ","node_location dot  begin_pos ","node_location dot  line > ","node_location dot  line ","node loc  dot ","receiver loc  begin line < ","node receiver _location begin line < ","receiver loc  begin line ","node receiver _location begin line ","receiver loc  begin ","node receiver _location begin ","receiver loc  end line ","node receiver _location end line ","receiver loc  end ","node receiver _location end ","node receiver  loc ","node node receiver  "]}," RuboCop Cop Layout SingleLineBlockChain on_send":{"type":"method","name":"on_send","children":[],"call":["corrector insert_before "," add_offense "," offending_range "," offending_ offending_range  "]}," RuboCop Cop Layout RedundantLineBreak single_line_block_chain_enabled?":{"type":"method","name":"single_line_block_chain_enabled?","children":[],"call":["@config for_cop [] ","@config for_cop "]}," RuboCop Cop Layout RedundantLineBreak other_cop_takes_precedence?":{"type":"method","name":"other_cop_takes_precedence?","children":[],"call":["block_node multiline? ! ","block_node multiline? ","block_node parent loc dot ","block_node parent loc ","block_node parent ","block_node parent send_type? ","node each_descendant any? ","node each_descendant "," single_line_block_chain_enabled? "," any_descendant? "]}," RuboCop Cop Bundler GemVersion version_specification?":{"type":"method","name":"version_specification?","children":[],"call":["expression match? "]}," RuboCop Cop Bundler GemVersion required_style?":{"type":"method","name":"required_style?","children":[],"call":[" style == "," style "]}," RuboCop Cop Bundler GemVersion forbidden_style?":{"type":"method","name":"forbidden_style?","children":[],"call":[" style == "," style "]}," RuboCop Cop Bundler GemVersion offense?":{"type":"method","name":"offense?","children":[],"call":[" includes_version_specification? "," forbidden_style? "," includes_version_specification? ! "," required_style? "," forbidden_offense? "," required_offense? "]}," RuboCop Cop Bundler GemVersion message":{"type":"method","name":"message","children":[],"call":[" format "," forbidden_style? "," required_style? ","range source "]}," RuboCop Cop Bundler GemVersion allowed_gems":{"type":"method","name":"allowed_gems","children":[],"call":[" Array "," cop_config [] "," cop_config "]}," RuboCop Cop Bundler GemVersion allowed_gem?":{"type":"method","name":"allowed_gem?","children":[],"call":[" allowed_gems include? ","node first_argument value ","node first_argument "," allowed_gems "]}," RuboCop Cop Bundler GemVersion on_send":{"type":"method","name":"on_send","children":[],"call":[" correct_style_detected "," opposite_style_detected "," add_offense "," offense? "," allowed_gem? "," gem_declaration? "]}," RuboCop OptionsValidator disable_parallel_when_invalid_option_combo":{"type":"method","name":"disable_parallel_when_invalid_option_combo","children":[],"call":[" puts ","invalid_flags join ","@options delete ","invalid_flags empty? ","flags << ","option [] ","@options > ","invalid_options each_with_object ","@options key? "," invalid_arguments_for_parallel "," invalid_arguments_for_parallel  join "," invalid_arguments_for_parallel  empty? "]}," RuboCop Formatter JUnitFormatter reset_count":{"type":"method","name":"reset_count","children":[],"call":[]}," RuboCop Formatter JUnitFormatter add_testcase_element_to_testsuite_element":{"type":"method","name":"add_testcase_element_to_testsuite_element","children":[],"call":[" add_failure_to ","cop cop_name ","testcase attributes []= ","testcase attributes "," classname_attribute_value ","REXML Element  new tap ","REXML Element  new "]}," RuboCop Cop Style TopLevelMethodDefinition on_block":{"type":"method","name":"on_block","children":[],"call":[" add_offense ","node root? "," define_method_block? "," top_level_method_definition? "]}," RuboCop Cop Style TopLevelMethodDefinition on_def":{"type":"method","name":"on_def","children":[],"call":[" add_offense ","node root? "," top_level_method_definition? "]}," RuboCop Cop Style NilLambda autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove "," range_by_whole_lines ","node body loc expression ","node body loc ","node body "," range_with_surrounding_space ","node single_line? ","node body source_range ","  range_by_whole_lines _by_whole_lines ","  range_with_surrounding_space _by_whole_lines ","  range_by_whole_lines _with_surrounding_space ","  range_with_surrounding_space _with_surrounding_space ","node body source_ range_by_whole_lines  ","node body source_ range_with_surrounding_space  "]}," RuboCop Cop Style EmptyLiteral frozen_strings?":{"type":"method","name":"frozen_strings?","children":[],"call":[" frozen_string_literals_disabled? ! "," frozen_string_literals_disabled? "," config for_cop [] "," config for_cop "," config "," frozen_string_literals_enabled? "]}," RuboCop Cop Style ClassAndModuleChildren compact_replacement":{"type":"method","name":"compact_replacement","children":[],"call":["body_comments map push join ","body_comments map push ","body_comments map ","body_comments empty? "," processed_source ast_with_comments [] ","node body "," processed_source ast_with_comments "," processed_source "," compact_identifier_name ","node body type "," processed_source ast_with_comments []  map push join "," processed_source ast_with_comments []  map push "," processed_source ast_with_comments []  map "," processed_source ast_with_comments []  empty? "]}," RuboCop Cop FrozenStringLiteral frozen_string_literals_disabled?":{"type":"method","name":"frozen_string_literals_disabled?","children":[],"call":["MagicComment  parse frozen_string_literal == ","MagicComment  parse frozen_string_literal ","MagicComment  parse "," leading_comment_lines any? "," leading_comment_lines "]}," RuboCop Cop CheckLineBreakable shift_elements_for_heredoc_arg":{"type":"method","name":"shift_elements_for_heredoc_arg","children":[],"call":["heredoc_index + ","heredoc_index >= ","heredoc_index zero? ","arg heredoc? ","arg dstr_type? ","arg str_type? ","elements index ","node send_type? ","arg respond_to? ","node array_type? "]}," RuboCop Cop Lint EmptyBlock lambda_or_proc?":{"type":"method","name":"lambda_or_proc?","children":[],"call":["node proc? ","node lambda? "]}," RuboCop Cop Layout HashAlignment argument_alignment_config":{"type":"method","name":"argument_alignment_config","children":[],"call":[" config for_cop "," config "]}," RuboCop Cop Layout HashAlignment enforce_first_argument_with_fixed_indentation?":{"type":"method","name":"enforce_first_argument_with_fixed_indentation?","children":[],"call":[" argument_alignment_config [] == "," argument_alignment_config [] "," argument_alignment_config "]}," RuboCop Cop Layout FirstHashElementIndentation argument_alignment_config":{"type":"method","name":"argument_alignment_config","children":[],"call":[" config for_cop "," config "]}," RuboCop Cop Layout FirstHashElementIndentation enforce_first_argument_with_fixed_indentation?":{"type":"method","name":"enforce_first_argument_with_fixed_indentation?","children":[],"call":[" argument_alignment_config [] == "," argument_alignment_config [] "," argument_alignment_config "]}," RuboCop Cop Layout ArgumentAlignment multiple_arguments?":{"type":"method","name":"multiple_arguments?","children":[],"call":["first_argument pairs count >= ","first_argument pairs count ","first_argument pairs ","node arguments size >= ","node arguments size ","node arguments ","node first_argument ","node first_argument  pairs count >= ","node first_argument  pairs count ","node first_argument  pairs ","node node first_argument  "]}," RuboCop Cop Style TopLevelMethodDefinition top_level_method_definition?":{"type":"method","name":"top_level_method_definition?","children":[],"call":["node root? ","node parent root? ","node parent "]}," RuboCop Cop Style QuotedSymbols wrong_quotes?":{"type":"method","name":"wrong_quotes?","children":[],"call":["node source [] ","node source "," hash_key? "]}," RuboCop Cop Style QuotedSymbols quoted?":{"type":"method","name":"quoted?","children":[],"call":["sym_node source match? ","sym_node source "]}," RuboCop Cop Style QuotedSymbols alternative_style":{"type":"method","name":"alternative_style","children":[],"call":["(send\n  (send nil :supported_styles) :-\n  (array\n    (send nil :style)\n    (sym :same_as_string_literals))) first "," supported_styles - "," style "," supported_styles "]}," RuboCop Cop Style QuotedSymbols style":{"type":"method","name":"style","children":[],"call":["string_literals_config [] to_sym ","string_literals_config [] "," config for_cop "," config "," == "," config for_cop  [] to_sym "," config for_cop  [] "]}," RuboCop Cop Style QuotedSymbols correct_quotes":{"type":"method","name":"correct_quotes","children":[],"call":["str inspect "," to_string_literal "," style == "," style ","correction gsub ","str gsub inspect ","str gsub ","correction gsub gsub ","str gsub inspect  gsub "," to_string_literal  gsub ","str gsub inspect  gsub gsub "," to_string_literal  gsub gsub "]}," RuboCop Cop Style QuotedSymbols autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," correct_quotes ","node source [] ","node source "," hash_key? "," hash_colon_key? "]}," RuboCop Cop Style QuotedSymbols on_sym":{"type":"method","name":"on_sym","children":[],"call":[" correct_style_detected "," autocorrect "," opposite_style_detected "," add_offense "," wrong_quotes? "," style == "," style "," quoted? "," invalid_double_quotes? ","node source "]}," RuboCop Cop Style MultilineInPatternThen require_then?":{"type":"method","name":"require_then?","children":[],"call":["in_pattern_node loc line == ","in_pattern_node body loc line ","in_pattern_node body loc ","in_pattern_node body ","in_pattern_node loc line ","in_pattern_node loc ","in_pattern_node pattern first_line != ","in_pattern_node pattern last_line ","in_pattern_node pattern ","in_pattern_node pattern first_line "," same_line? ","in_pattern_node pattern single_line? "]}," RuboCop Cop Style MultilineInPatternThen on_in_pattern":{"type":"method","name":"on_in_pattern","children":[],"call":["corrector remove "," range_with_surrounding_space "," add_offense ","node loc begin ","node loc "," require_then? ","node then? ! ","node then? "," node loc begin _with_surrounding_space "]}," RuboCop Cop Style InPatternThen alternative_pattern_source":{"type":"method","name":"alternative_pattern_source","children":[],"call":["(send\n  (lvar :pattern_sources) :<<\n  (send\n    (send\n      (send\n        (lvar :pattern) :children) :[]\n      (int 1)) :source)) join ","pattern_sources << ","pattern children [] source ","pattern children [] ","pattern children "," alternative_pattern_source ","pattern children first ","pattern children map ","pattern children first match_alt_type? ","(send\n  (lvar : alternative_pattern_source ) :<<\n  (send\n    (send\n      (send\n        (lvar :pattern) :children) :[]\n      (int 1)) :source)) join "," alternative_pattern_source  << "]}," RuboCop Cop Style InPatternThen on_in_pattern":{"type":"method","name":"on_in_pattern","children":[],"call":["corrector replace ","node loc begin ","node loc "," add_offense "," format ","pattern source "," alternative_pattern_source ","pattern match_alt_type? ","node pattern ","node body ! ","node body ","node then? ","node multiline? ","node pattern  source "," alternative_pattern source  "," alternative_ alternative_pattern_source  "," alternative_node pattern _source ","node pattern  match_alt_type? ","node node pattern  "]}," RuboCop Cop Style IdenticalConditionalBranches duplicated_expressions?":{"type":"method","name":"duplicated_expressions?","children":[],"call":["expressions uniq one? ","expressions uniq ","expressions size > ","expressions size ","n source == ","lhs source ","n source ","n variable? ","node condition child_nodes none? ","node condition child_nodes ","node condition ","unique_expression child_nodes first ","unique_expression child_nodes ","unique_expression assignment? ","unique_expressions first ","unique_expressions one? ","expressions size >= ","unique_expression child_nodes first  source ","unique_expressions first  child_nodes first ","unique_expressions first  child_nodes ","unique_expressions first  assignment? ","unique_expressions first s first ","expressions uniq  first ","unique_expressions first s one? ","expressions uniq  one? "]}," RuboCop Cop Style HashEachMethods allowed_receivers":{"type":"method","name":"allowed_receivers","children":[],"call":[" cop_config fetch "," cop_config "]}," RuboCop Cop Style HashEachMethods allowed_receiver?":{"type":"method","name":"allowed_receiver?","children":[],"call":[" allowed_receivers include? "," allowed_receivers ","receiver source ","receiver method_name to_s ","receiver method_name ","receiver send_type? "," receiver_name "," receiver source  "," receiver method_name to_s  ","  receiver_name  "]}," RuboCop Cop SymbolHelp hash_key?":{"type":"method","name":"hash_key?","children":[],"call":["node == ","node parent child_nodes first ","node parent child_nodes ","node parent "]}," RuboCop Cop HashAlignmentStyles KeywordSplatAlignment deltas":{"type":"method","name":"deltas","children":[],"call":["first_pair key_delta ","Util  begins_its_line? ","current_pair source_range "]}," RuboCop Cop Lint EmptyInPattern on_case_match":{"type":"method","name":"on_case_match","children":[],"call":[" add_offense "," comment_lines? "," cop_config [] "," cop_config ","branch body ","node in_pattern_branches each ","node in_pattern_branches "," contains_comments? "]}," RuboCop Cop Layout SpaceAroundKeyword on_unless_guard":{"type":"method","name":"on_unless_guard","children":[],"call":[" check ","(sym :keyword) freeze "]}," RuboCop Cop Layout SpaceAroundKeyword on_in_pattern":{"type":"method","name":"on_in_pattern","children":[],"call":[" check ","(sym :keyword) freeze "]}," RuboCop Cop Layout SpaceAroundKeyword on_if_guard":{"type":"method","name":"on_if_guard","children":[],"call":[" check ","(sym :keyword) freeze "]}," RuboCop Cop Layout SpaceAroundKeyword on_case_match":{"type":"method","name":"on_case_match","children":[],"call":[" check ","(sym :keyword) freeze "]}," RuboCop Cop Layout HashAlignment register_offences_with_format":{"type":"method","name":"register_offences_with_format","children":[],"call":[" correct_node ","delta nil? "," column_deltas [] [] "," column_deltas [] "," alignment_for first class "," alignment_for first "," alignment_for "," column_deltas "," add_offense ","MESSAGES  [] ","(or\n  (lvar :offences)\n  (array)) each "," column_deltas [] []  nil? "," column_ column_deltas [] [] s [] [] "," column_ column_deltas [] [] s [] "," column_ column_deltas [] [] s "]}," RuboCop Cop Layout HashAlignment autocorrect_incompatible_with_other_cops?":{"type":"method","name":"autocorrect_incompatible_with_other_cops?","children":[],"call":["node parent ","node braces? ! ","node braces? "," enforce_first_argument_with_fixed_indentation? ","node parent loc line == ","node pairs first loc line ","node pairs first loc ","node pairs first ","node pairs ","node parent loc line ","node parent loc ","node pairs any? ","node parent loc selector line == ","node parent loc selector line ","node parent loc selector ","(send\n  (send\n    (send\n      (lvar :node) :parent) :loc) :selector) == ","selector line == ","selector line ","parent_loc expression ","parent_loc selector "," same_line? "," argument_before_hash ","node parent loc  expression ","node parent loc  selector "]}," RuboCop Cop Layout CaseIndentation on_case_match":{"type":"method","name":"on_case_match","children":[],"call":[" check_when ","case_match_node each_in_pattern ","case_match_node single_line? "," end_and_last_conditional_same_line? "," enforced_style_end? "]}," RuboCop Cop Style RedundantSelf add_masgn_lhs_variables":{"type":"method","name":"add_masgn_lhs_variables","children":[],"call":[" add_lhs_to_local_variables_scopes ","child to_a first ","child to_a ","lhs children each ","lhs children "]}," RuboCop Cop Style RedundantSelf on_if":{"type":"method","name":"on_if","children":[],"call":[" add_masgn_lhs_variables ","node condition ","child_node masgn_type? "," add_lhs_to_local_variables_scopes ","child_node lvasgn_type? ","node child_nodes each ","node child_nodes "]}," RuboCop Cop Style QuotedSymbols hash_colon_key?":{"type":"method","name":"hash_colon_key?","children":[],"call":["node parent colon? ","node parent "," hash_key? "]}," RuboCop RemoteConfig cloned_url":{"type":"method","name":"cloned_url","children":[],"call":["uri password= ","uri password ","uri user= ","uri user ","@uri clone ","@uri clone  password= ","@uri clone  password ","@uri clone  user= ","@uri clone  user ","@@uri clone  clone "]}," RuboCop DirectiveComment exclude_redundant_directive_cop":{"type":"method","name":"exclude_redundant_directive_cop","children":[],"call":["cops - "]}," RuboCop DirectiveComment cop_names_for_department":{"type":"method","name":"cop_names_for_department","children":[],"call":[" exclude_redundant_directive_cop ","department == "," cop_registry names_for_department "," cop_registry "," cop_registry  cop_registry names_for_department _for_department "]}," RuboCop DirectiveComment department?":{"type":"method","name":"department?","children":[],"call":[" cop_registry department? "," cop_registry "]}," RuboCop DirectiveComment splitted_cops_string":{"type":"method","name":"splitted_cops_string","children":[],"call":["(or\n  (send nil :cops)\n  (str \"\")) split "," cops "]}," RuboCop DirectiveComment directive_count":{"type":"method","name":"directive_count","children":[],"call":[" splitted_cops_string count "," splitted_cops_string "]}," RuboCop DirectiveComment overridden_by_department?":{"type":"method","name":"overridden_by_department?","children":[],"call":[" splitted_cops_string include? "," splitted_cops_string "," in_directive_department? "]}," RuboCop DirectiveComment in_directive_department?":{"type":"method","name":"in_directive_department?","children":[],"call":["cop start_with? "," department_names any? "," department_names "]}," RuboCop DirectiveComment department_names":{"type":"method","name":"department_names","children":[],"call":[" department? "," splitted_cops_string select "," splitted_cops_string "]}," RuboCop DirectiveComment disabled_all?":{"type":"method","name":"disabled_all?","children":[],"call":[" all_cops? "," disabled? "]}," RuboCop Cop Style RegexpLiteral omit_parentheses_style?":{"type":"method","name":"omit_parentheses_style?","children":[],"call":["enforced_style == "," config for_cop [] "," config for_cop "," config ","node parent "," config for_cop []  == "]}," RuboCop Cop Style IdenticalConditionalBranches on_case_match":{"type":"method","name":"on_case_match","children":[],"call":[" check_branches ","node in_pattern_branches map push ","node else_branch ","node in_pattern_branches map ","node in_pattern_branches ","node else? "," check_node in_pattern_branches map push  ","node in_pattern_node in_pattern_branches map push  map push ","node in_pattern_node in_pattern_branches map push  map ","node in_pattern_node in_pattern_branches map push  "]}," RuboCop Cop Lint RedundantCopEnableDirective department?":{"type":"method","name":"department?","children":[],"call":["directive overridden_by_department? ! ","directive overridden_by_department? ","directive in_directive_department? "]}," RuboCop Cop Lint RedundantCopDisableDirective add_department_marker":{"type":"method","name":"add_department_marker","children":[],"call":["DEPARTMENT_MARKER  + "]}," RuboCop Cop Lint RedundantCopDisableDirective remove_department_marker":{"type":"method","name":"remove_department_marker","children":[],"call":["department gsub "]}," RuboCop Cop Lint RedundantCopDisableDirective department_marker?":{"type":"method","name":"department_marker?","children":[],"call":["department start_with? "]}," RuboCop Cop Lint RedundantCopDisableDirective message":{"type":"method","name":"message","children":[],"call":[]}," RuboCop Cop Lint RedundantCopDisableDirective department_disabled?":{"type":"method","name":"department_disabled?","children":[],"call":["directive overridden_by_department? ! ","directive overridden_by_department? ","directive in_directive_department? ","DirectiveComment  new ","DirectiveComment  new  overridden_by_department? ! ","DirectiveComment  new  overridden_by_department? ","DirectiveComment  new  in_DirectiveComment  new _department? "]}," RuboCop Cop Lint RedundantCopDisableDirective range_with_offense?":{"type":"method","name":"range_with_offense?","children":[],"call":["range cover? ","offense line ","offenses none? "]}," RuboCop Cop Lint RedundantCopDisableDirective followed_ranges?":{"type":"method","name":"followed_ranges?","children":[],"call":["range end == ","next_range begin ","range end "]}," RuboCop Cop Lint RedundantCopDisableDirective find_redundant_department":{"type":"method","name":"find_redundant_department","children":[],"call":[" add_department_marker "," range_with_offense? ","offense cop_name start_with? ","offense cop_name "," offenses_to_check select "," offenses_to_check ","cop split first ","cop split "," add_cop split first _marker "]}," RuboCop Cop Lint RedundantCopDisableDirective find_redundant_all":{"type":"method","name":"find_redundant_all","children":[],"call":[" range_with_offense? "," followed_ranges? ! "," followed_ranges? ","next_range nil? "]}," RuboCop Cop Lint RedundantCopDisableDirective find_redundant_cop":{"type":"method","name":"find_redundant_cop","children":[],"call":[" range_with_offense? ","offense cop_name == ","offense cop_name "," offenses_to_check select "," offenses_to_check "]}," RuboCop Cop Lint RedundantCopDisableDirective disabled_ranges":{"type":"method","name":"disabled_ranges","children":[],"call":[" cop_disabled_line_ranges [] "," cop_disabled_line_ranges "]}," RuboCop Cop Lint RedundantCopDisableDirective cop_disabled_line_ranges":{"type":"method","name":"cop_disabled_line_ranges","children":[],"call":[" processed_source disabled_line_ranges "," processed_source "]}," RuboCop Cop Lint MissingCopEnableDirective department_enabled?":{"type":"method","name":"department_enabled?","children":[],"call":["DirectiveComment  new in_directive_department? ","DirectiveComment  new "]}," RuboCop Cop Lint MissingCopEnableDirective max_range":{"type":"method","name":"max_range","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Lint MissingCopEnableDirective each_missing_enable":{"type":"method","name":"each_missing_enable","children":[],"call":["line_ranges each "," processed_source disabled_line_ranges each "," processed_source disabled_line_ranges "," processed_source "]}," RuboCop Cop Lint LiteralAsCondition on_case_match":{"type":"method","name":"on_case_match","children":[],"call":[" add_offense ","in_pattern_node condition literal? ","in_pattern_node condition ","case_match_node each_in_pattern "," check_case ","case_match_node condition ","case_match_node descendants any? ","case_match_node descendants "]}," RuboCop Cop Layout SpaceAroundOperators on_match_pattern":{"type":"method","name":"on_match_pattern","children":[],"call":[" check_operator ","node source_range ","node loc operator ","node loc "," target_ruby_version < "," target_ruby_version "]}," RuboCop Cop Layout SpaceAroundKeyword on_match_pattern_p":{"type":"method","name":"on_match_pattern_p","children":[],"call":[" check ","(sym :operator) freeze "]}," RuboCop Cop Layout SpaceAroundKeyword on_match_pattern":{"type":"method","name":"on_match_pattern","children":[],"call":[" check ","(sym :operator) freeze "," target_ruby_version >= "," target_ruby_version "]}," RuboCop Cop Layout RedundantLineBreak register_offense":{"type":"method","name":"register_offense","children":[],"call":[" ignore_node ","corrector replace "," to_single_line strip "," to_single_line ","node source ","node source_range "," add_offense "]}," RuboCop Cop Layout IndentationWidth on_case_match":{"type":"method","name":"on_case_match","children":[],"call":[" check_indentation ","case_match else_branch ","case_match in_pattern_branches last loc keyword ","case_match in_pattern_branches last loc ","case_match in_pattern_branches last ","case_match in_pattern_branches ","in_pattern_node body ","in_pattern_node loc keyword ","in_pattern_node loc ","case_match each_in_pattern ","case_match case_match else_branch  "]}," RuboCop Cop Layout EmptyLineAfterGuardClause last_heredoc_argument_node":{"type":"method","name":"last_heredoc_argument_node","children":[],"call":["node if_branch children last ","node if_branch children ","node if_branch ","node if_branch children first ","node if_branch and_type? ","node respond_to? "]}," RuboCop Cop Style StringConcatenation offensive_for_mode?":{"type":"method","name":"offensive_for_mode?","children":[],"call":["receiver_node str_type? ","mode == "," cop_config [] to_sym "," cop_config [] "," cop_config "," cop_config [] to_sym  == "]}," RuboCop Cop Style StringConcatenation register_offense":{"type":"method","name":"register_offense","children":[],"call":["@corrected_nodes add ","Set  new compare_by_identity ","Set  new ","corrector replace "," replacement "," corrected_ancestor? ! "," corrected_ancestor? "," uncorrectable? ","parts none? "," add_offense "]}," RuboCop Cop Style RegexpLiteral allowed_omit_parentheses_with_percent_r_literal?":{"type":"method","name":"allowed_omit_parentheses_with_percent_r_literal?","children":[],"call":["enforced_style == "," config for_cop [] "," config for_cop "," config ","node content start_with? ","node content ","node parent "," config for_cop []  == "]}," RuboCop Cop Style ClassAndModuleChildren unindent":{"type":"method","name":"unindent","children":[],"call":["AlignmentCorrector  correct "," processed_source ","column_delta zero? "," configured_indentation_width - "," leading_spaces size "," leading_spaces ","node body children last ","node body children ","node body "," configured_indentation_width ","node body children last nil? "," configured_indentation_width -  zero? "]}," RuboCop Cop Style ClassAndModuleChildren configured_indentation_width":{"type":"method","name":"configured_indentation_width","children":[],"call":[" config for_badge fetch "," config for_badge ","Layout IndentationWidth  badge "," config "]}," RuboCop Cop Naming InclusiveLanguage format_suggestions":{"type":"method","name":"format_suggestions","children":[],"call":["quoted_suggestions join ","quoted_suggestions << ","quoted_suggestions pop ","quoted_suggestions first ","quoted_suggestions size "," Array map "," Array "]}," RuboCop Cop Naming InclusiveLanguage preprocess_suggestions":{"type":"method","name":"preprocess_suggestions","children":[],"call":[" format_suggestions ","suggestions empty? ","suggestions strip empty? ","suggestions strip ","suggestions is_a? ","suggestions nil? "]}," RuboCop Cop Naming InclusiveLanguage create_message_for_file":{"type":"method","name":"create_message_for_file","children":[],"call":[" create_message sub "," create_message "]}," RuboCop Cop Naming InclusiveLanguage find_flagged_term":{"type":"method","name":"find_flagged_term","children":[],"call":["key match? ","@flagged_term_hash find "]}," RuboCop Cop Naming InclusiveLanguage create_message":{"type":"method","name":"create_message","children":[],"call":["flagged_term [] "," find_flagged_term "," format ","suggestions blank? "," find_flagged_term  [] "," find_ find_flagged_term  ","flagged_term []  blank? "]}," RuboCop Cop Naming InclusiveLanguage mask_input":{"type":"method","name":"mask_input","children":[],"call":["* * ","match size ","safe_str gsub ","str encode ","str valid_encoding? ","@allowed_regex nil? ","str encode  gsub "]}," RuboCop Cop Naming InclusiveLanguage scan_for_words":{"type":"method","name":"scan_for_words","children":[],"call":["WordLocation  new ","match offset first ","match offset ","match to_s ","Regexp  last_match "," mask_input enum_for map "," mask_input enum_for "," mask_input ","masked_input enum_for map ","masked_input enum_for ","masked_input match? ","Regexp  last_match  offset first ","Regexp  last_match  offset ","Regexp  last_match  to_s ","Regexp  last_Regexp  last_match  "," mask_input  enum_for map "," mask_input  enum_for ","masked_input Regexp  last_match ? "," mask_input  match? "]}," RuboCop Cop Naming InclusiveLanguage create_multiple_word_message_for_file":{"type":"method","name":"create_multiple_word_message_for_file","children":[],"call":["quoted_words join ","words map "," format ","words join "]}," RuboCop Cop Naming InclusiveLanguage create_single_word_message_for_file":{"type":"method","name":"create_single_word_message_for_file","children":[],"call":[" create_message sub "," create_message "]}," RuboCop Cop Naming InclusiveLanguage investigate_filepath":{"type":"method","name":"investigate_filepath","children":[],"call":[" add_offense "," source_range "," processed_source buffer "," processed_source "," create_multiple_word_message_for_file ","word_locations map "," create_single_word_message_for_file ","word_locations first word ","word_locations first ","word_locations length "," scan_for_words "," processed_source file_path "," source_ source_range  "," create_multiple_word_ create_multiple_word_message_for_file _for_file "," create_multiple_word_ create_single_word_message_for_file _for_file "," scan_for_words  map "," create_single_word_ create_multiple_word_message_for_file _for_file "," create_single_word_ create_single_word_message_for_file _for_file "," scan_for_words  first word "," scan_for_words  first "," scan_for_words  length "," scan_for_word_locations map  "]}," RuboCop Cop Naming InclusiveLanguage array_to_ignorecase_regex":{"type":"method","name":"array_to_ignorecase_regex","children":[],"call":["Regexp  new ","strings join "]}," RuboCop Cop Naming InclusiveLanguage ensure_regex_string":{"type":"method","name":"ensure_regex_string","children":[],"call":["regex source ","regex is_a? "]}," RuboCop Cop Naming InclusiveLanguage process_allowed_regex":{"type":"method","name":"process_allowed_regex","children":[],"call":[" ensure_regex_string ","allowed_term strip empty? ","allowed_term strip ","allowed_term is_a? "," Array map "," Array ","allowed nil? "]}," RuboCop Cop Naming InclusiveLanguage set_regexes":{"type":"method","name":"set_regexes","children":[],"call":[" array_to_ignorecase_regex ","allowed_strings empty? "]}," RuboCop Cop Naming InclusiveLanguage add_to_flagged_term_hash":{"type":"method","name":"add_to_flagged_term_hash","children":[],"call":["@flagged_term_hash []= ","term_definition merge "," preprocess_suggestions ","term_definition [] ","Regexp  new "]}," RuboCop Cop Naming InclusiveLanguage preprocess_flagged_terms":{"type":"method","name":"preprocess_flagged_terms","children":[],"call":[" set_regexes "," add_to_flagged_term_hash ","flagged_term_strings << "," ensure_regex_string ","term_definition [] ","allowed_strings concat "," process_allowed_regex ","term_definition nil? "," cop_config [] each "," cop_config [] "," cop_config "," extract_regexp "," ensure_ ensure_regex_string  "]}," RuboCop Cop Naming InclusiveLanguage preprocess_check_config":{"type":"method","name":"preprocess_check_config","children":[],"call":["(pair\n  (sym :tIDENTIFIER)\n  (send\n    (send nil :cop_config) :[]\n    (str \"CheckIdentifiers\"))) freeze "," cop_config [] "," cop_config "]}," RuboCop Cop Naming InclusiveLanguage check_token?":{"type":"method","name":"check_token?","children":[],"call":["@check_token [] ! ! ","@check_token [] ! ","@check_token [] "]}," RuboCop Cop Naming InclusiveLanguage add_offenses_for_token":{"type":"method","name":"add_offenses_for_token","children":[],"call":[" add_offense "," create_message ","word_location word "," range_between ","start_position + ","word_location word length ","token pos begin_pos + ","token pos source index ","token pos source ","token pos ","token pos begin_pos ","word_locations each ","corrector replace ","suggestions is_a? "," find_flagged_term [] "," find_flagged_term "," offense_range ","word_location word _location word_location word  ","  range_between _between ","  offense_range _between ","token pos begin_pos +  + ","word_location word _location word_location word  length ","word_location word _locations each "," find_flagged_term []  is_a? "," offense_ range_between  "," offense_ offense_range  "]}," RuboCop Cop Naming InclusiveLanguage investigate_tokens":{"type":"method","name":"investigate_tokens","children":[],"call":[" add_offenses_for_token ","word_locations empty? "," scan_for_words ","token text "," check_token? ","token type "," processed_source each_token "," processed_source "," processed_source tokens each "," processed_source tokens "," scan_for_words  empty? "]}," RuboCop Cop Naming InclusiveLanguage on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[" investigate_tokens "," investigate_filepath "," cop_config [] "," cop_config "]}," RuboCop Cop Naming InclusiveLanguage initialize":{"type":"method","name":"initialize","children":[],"call":[" preprocess_flagged_terms "," preprocess_check_config "]}," RuboCop Cop CheckLineBreakable first_argument_is_heredoc?":{"type":"method","name":"first_argument_is_heredoc?","children":[],"call":["first_argument heredoc? ","first_argument respond_to? ","node first_argument ","node first_argument  heredoc? ","node first_argument  respond_to? ","node node first_argument  "]}," RuboCop Cop Layout LineEndStringConcatenationIndentation add_offense_and_correction":{"type":"method","name":"add_offense_and_correction","children":[],"call":[" autocorrect "," add_offense "]}," RuboCop Cop Layout LineEndStringConcatenationIndentation check_indented":{"type":"method","name":"check_indented","children":[],"call":[" add_offense_and_correction ","children [] ","@column_delta != ","base_column + - ","children [] loc column ","children [] loc ","base_column + "," configured_indentation_width ","children [] source_range source_line =~ ","children [] source_range source_line ","children [] source_range "," base_column + - "," base_column + "," base_column ","base_column + -  != "," base_column + -  != ","children [] source_range source_line =~  + - ","children [] source_range source_line =~  + "," children [] source_range source_line =~  + - "," children [] source_range source_line =~  + "," children [] source_range source_line =~  "]}," RuboCop Cop Layout LineEndStringConcatenationIndentation check_aligned":{"type":"method","name":"check_aligned","children":[],"call":["child loc column ","child loc "," add_offense_and_correction ","@column_delta != ","base_column - ","children [] each ","children [] ","children [] loc column ","children [] loc ","start_index - ","base_column -  != ","child loc column  - ","children [] loc column  - "]}," RuboCop Cop Layout LineEndStringConcatenationIndentation always_aligned?":{"type":"method","name":"always_aligned?","children":[],"call":["dstr_node parent "]}," RuboCop Cop Layout LineEndStringConcatenationIndentation always_indented?":{"type":"method","name":"always_indented?","children":[],"call":["PARENT_TYPES_FOR_INDENTED  include? ","dstr_node parent "]}," RuboCop Cop Layout LineEndStringConcatenationIndentation strings_concatenated_with_backslash?":{"type":"method","name":"strings_concatenated_with_backslash?","children":[],"call":["c dstr_type? ","c str_type? ","dstr_node children all? ","dstr_node children ","dstr_node children length > ","dstr_node children length ","dstr_node heredoc? ! ","dstr_node heredoc? "," single_string_literal? ! "," single_string_literal? ","dstr_node children none? ","dstr_node multiline? "]}," RuboCop Cop Layout LineEndStringConcatenationIndentation autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["AlignmentCorrector  correct "," processed_source "]}," RuboCop Cop Layout LineEndStringConcatenationIndentation on_dstr":{"type":"method","name":"on_dstr","children":[],"call":[" check_aligned "," check_indented "," always_aligned? "," always_indented? ! "," always_indented? "," style == "," style ","node children "," strings_concatenated_with_backslash? ","children empty? ","node node children  ","node children  empty? "]}," RuboCop Cop Bundler GemVersion forbidden_offense?":{"type":"method","name":"forbidden_offense?","children":[],"call":[" includes_commit_reference? "," includes_version_specification? "," forbidden_style? "]}," RuboCop Cop Bundler GemVersion required_offense?":{"type":"method","name":"required_offense?","children":[],"call":[" includes_commit_reference? ! "," includes_commit_reference? "," includes_version_specification? ! "," includes_version_specification? "," required_style? "]}," RuboCop Cop Style CommentAnnotation requires_colon?":{"type":"method","name":"requires_colon?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style CommentAnnotation correct_offense":{"type":"method","name":"correct_offense","children":[],"call":["corrector replace ","first_word upcase "," requires_colon? ","keyword upcase "]}," RuboCop Cop Style CommentAnnotation correct_space_annotation?":{"type":"method","name":"correct_space_annotation?","children":[],"call":["note ! ","colon ! "," keyword? "]}," RuboCop Cop Style CommentAnnotation correct_colon_annotation?":{"type":"method","name":"correct_colon_annotation?","children":[],"call":["note ! ","colon ! "," keyword? "]}," RuboCop Cop Layout LineEndStringConcatenationIndentation single_string_literal?":{"type":"method","name":"single_string_literal?","children":[],"call":["dstr_node loc begin ","dstr_node loc ","dstr_node loc respond_to? "]}," RuboCop Cop Style SingleLineMethods disallow_endless_method_style?":{"type":"method","name":"disallow_endless_method_style?","children":[],"call":["endless_method_config [] == ","endless_method_config [] "," config for_cop "," config "," config for_cop  [] == "," config for_cop  [] "]}," RuboCop Cop Style BlockDelimiters move_comment_before_block":{"type":"method","name":"move_comment_before_block","children":[],"call":["corrector insert_before ","comment text ","corrector insert_after ","corrector remove "," range_with_surrounding_space "," range_between ","comment loc expression end_pos ","comment loc expression ","comment loc ","closing_brace end_pos ","range end_pos "," end_of_chain source_range "," end_of_chain ","block_node parent ","block_node chained? "," remove_trailing_whitespace ","comment source_range ","  range_between _with_surrounding_space ","  end_of_chain source_range _with_surrounding_space ","  range_between _between ","  end_of_chain source_range _between "," range_between  end_pos "," end_of_chain source_range  end_pos "," end_of_chain source_ range_between  "," end_of_chain source_ end_of_chain source_range  ","comment source_ range_between  ","comment source_ end_of_chain source_range  "]}," RuboCop Cop Layout SpaceAroundOperators on_sclass":{"type":"method","name":"on_sclass","children":[],"call":[" check_operator ","node source_range ","node loc operator ","node loc "]}," RuboCop Cop Layout IndentationStyle find_offense":{"type":"method","name":"find_offense","children":[],"call":[" source_range ","match end ","match begin "," processed_source buffer "," processed_source ","line match "," style == "," style ","line match  end ","line match  begin ","line line match  "]}," RuboCop Cop Layout HashAlignment register_offenses_with_format":{"type":"method","name":"register_offenses_with_format","children":[],"call":[" correct_node ","delta nil? "," column_deltas [] [] "," column_deltas [] "," alignment_for first class "," alignment_for first "," alignment_for "," column_deltas "," add_offense ","MESSAGES  [] ","(or\n  (lvar :offenses)\n  (array)) each "," column_deltas [] []  nil? "," column_ column_deltas [] [] s [] [] "," column_ column_deltas [] [] s [] "," column_ column_deltas [] [] s "]}," RuboCop Cop Layout HashAlignment add_offenses":{"type":"method","name":"add_offenses","children":[],"call":[" register_offenses_with_format ","v length "," offenses_by min_by "," offenses_by "," offenses_by delete "]}," RuboCop Cop Layout EndAlignment assignment_or_operator_method":{"type":"method","name":"assignment_or_operator_method","children":[],"call":["ancestor operator_method? ","ancestor send_type? ","ancestor assignment_or_similar? ","node ancestors find ","node ancestors "]}," RuboCop Cop Layout ClassStructure whole_line_comment_at_line?":{"type":"method","name":"whole_line_comment_at_line?","children":[],"call":["(str \"\\\\A\\\\s*#\") match? "," processed_source lines [] ","line - "," processed_source lines "," processed_source "]}," RuboCop ConfigValidator suggestion":{"type":"method","name":"suggestion","children":[],"call":["suggestions join ","suggestions any? ","department start_with? ","departments select ","NameSimilarity  find_similar_names ","departments + ","registry map ","registry departments map ","registry departments ","Cop Registry  global ","NameSimilarity  find_similar_names  join ","NameSimilarity  find_similar_names  any? ","registry departments map  select ","registry departments map  + ","Cop Registry  global  map ","registry registry departments map  map ","Cop Registry  global  departments map ","registry registry departments map  ","Cop Registry  global  departments "]}," RuboCop Cop Style WordArray invalid_percent_array_contents?":{"type":"method","name":"invalid_percent_array_contents?","children":[],"call":[" complex_content? ","node values "]}," RuboCop Cop Style SpecialGlobalVars should_require_english?":{"type":"method","name":"should_require_english?","children":[],"call":["NON_ENGLISH_VARS  include? ! ","NON_ENGLISH_VARS  include? "," preferred_names first "," preferred_names "," add_require_english? "," style == "," style ","@required_english ! "]}," RuboCop Cop Style SpecialGlobalVars add_require_english?":{"type":"method","name":"add_require_english?","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style Semicolon find_semicolon_positions":{"type":"method","name":"find_semicolon_positions","children":[],"call":["Regexp  last_match begin ","Regexp  last_match ","semicolons each "," processed_source [] enum_for "," processed_source [] ","line - "," processed_source "," processed_source [] enum_for  each "]}," RuboCop Cop Style Semicolon expressions_per_line":{"type":"method","name":"expressions_per_line","children":[],"call":["exprs_lines group_by ","exprs map ","exprs map  group_by "]}," RuboCop Cop Style Semicolon register_semicolon":{"type":"method","name":"register_semicolon","children":[],"call":["corrector remove ","corrector replace "," add_offense "," source_range "," processed_source buffer "," processed_source ","corrector wrap "," find_range_node "," source_ source_range  "," find_ source_range _node "," find_ find_range_node  "]}," RuboCop Cop Style Semicolon autocorrect_incompatible_with":{"type":"method","name":"autocorrect_incompatible_with","children":[],"call":[]}," RuboCop Cop Style RedundantSelfAssignmentBranch autocorrect_if_condition":{"type":"method","name":"autocorrect_if_condition","children":[],"call":["corrector replace ","if_node_loc keyword ","else_branch condition source ","else_branch condition ","if_node condition ","else_branch elsif? ","else_branch respond_to? ","if_node else_branch ","if_node else_branch  condition source ","if_node else_branch  condition ","if_node else_branch  elsif? ","if_node else_branch  respond_to? ","if_node if_node else_branch  "]}," RuboCop Cop Style RedundantSelfAssignmentBranch register_offense":{"type":"method","name":"register_offense","children":[],"call":[" autocorrect_if_condition ","corrector remove "," range_by_whole_lines ","if_node_loc else ","offense_branch source_range ","if_node loc ","corrector replace ","if_node condition source ","if_node condition ","opposite_branch source ","if_node ternary? "," add_offense ","opposite_branch loc heredoc_end with source ","opposite_branch loc heredoc_end with ","opposite_branch source_range end_pos ","opposite_branch source_range ","opposite_branch loc heredoc_end ","opposite_branch loc ","opposite_branch heredoc? ","opposite_branch respond_to? ","  range_by_whole_lines _by_whole_lines ","if_node loc  else ","offense_branch source_ range_by_whole_lines  ","opposite_branch source_ range_by_whole_lines  end_pos ","opposite_branch source_ range_by_whole_lines  "]}," RuboCop Cop Style RedundantSelfAssignmentBranch self_assign?":{"type":"method","name":"self_assign?","children":[],"call":["variable to_s == ","variable to_s "]}," RuboCop Cop Style RedundantSelfAssignmentBranch on_lvasgn":{"type":"method","name":"on_lvasgn","children":[],"call":[" register_offense "," self_assign? ","expression else_branch ","expression if_branch ","expression else? ","expression ternary? "," inconvertible_to_modifier? "," use_if_and_else_branch? ","expression expression else_branch  ","expression expression if_branch  "," use_if_and_expression else_branch ? "]}," RuboCop Cop Style MissingElse on_case_match":{"type":"method","name":"on_case_match","children":[],"call":[]}," RuboCop Cop Style MethodDefParentheses forced_parentheses?":{"type":"method","name":"forced_parentheses?","children":[],"call":["node arguments any? ","node arguments ","node endless? "," anonymous_block_arg? "," anonymous_arguments? "]}," RuboCop Cop Style ExplicitBlockArgument correct_call_node":{"type":"method","name":"correct_call_node","children":[],"call":["corrector remove "," range_between ","args_end end_pos ","args_begin begin_pos ","Util  args_end ","Util  args_begin ","node parenthesized? ","corrector insert_after ","  range_between _between ","Util  args_end  end_pos ","Util  args_begin  begin_pos ","Util  Util  args_end  ","Util  Util  args_begin  "]}," RuboCop Cop Style ExplicitBlockArgument insert_argument":{"type":"method","name":"insert_argument","children":[],"call":["corrector insert_after ","last_arg blockarg_type? ","arg_range source end_with? ","arg_range source "," range_with_surrounding_comma ","last_arg source_range ","node arguments last ","node arguments ","node arguments last  blockarg_type? "," range_with_surrounding_comma  source end_with? "," range_with_surrounding_comma  source ","node arguments last  source_range "]}," RuboCop Cop Style ExplicitBlockArgument call_like?":{"type":"method","name":"call_like?","children":[],"call":["node super_type? ","node zsuper_type? ","node call_type? "]}," RuboCop Cop Style ExplicitBlockArgument empty_arguments?":{"type":"method","name":"empty_arguments?","children":[],"call":["node arguments loc begin ","node arguments loc ","node arguments ","node arguments is_a? "]}," RuboCop Cop Style ConditionalAssignment on_case_match":{"type":"method","name":"on_case_match","children":[],"call":[" check_node ","node else_branch "," expand_when_branches ","node in_pattern_branches "," style == "," style ","node  expand_when_branches  "]}," RuboCop Cop Naming InclusiveLanguage extract_regexp":{"type":"method","name":"extract_regexp","children":[],"call":["term_definition [] "]}," RuboCop Cop RequireLibrary on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":["Set  new "]}," RuboCop Cop RequireLibrary on_send":{"type":"method","name":"on_send","children":[],"call":["@required_libs add ","name nil? "," require_any_library? ","node parent "," require_any_library?  nil? "]}," RuboCop Cop RequireLibrary remove_subsequent_requires":{"type":"method","name":"remove_subsequent_requires","children":[],"call":["corrector remove "," range_by_whole_lines ","sibling source_range "," require_library_name? ","node right_siblings each ","node right_siblings ","  range_by_whole_lines _by_whole_lines ","sibling source_ range_by_whole_lines  "]}," RuboCop Cop RequireLibrary ensure_required":{"type":"method","name":"ensure_required","children":[],"call":["RequireLibraryCorrector  correct "," remove_subsequent_requires ","@required_libs include? ","node parent ","node parent  parent "]}," RuboCop Cop PercentArray invalid_percent_array_contents?":{"type":"method","name":"invalid_percent_array_contents?","children":[],"call":[]}," RuboCop Cop Heredoc indent_level":{"type":"method","name":"indent_level","children":[],"call":["indentations min_by size ","indentations min_by ","indentations empty? ","line end_with? ","(send\n  (send\n    (lvar :str) :lines) :map) reject ","line [] ","str lines map ","str lines "]}," RuboCop Cop Lint AmbiguousRegexpLiteral first_argument_is_regexp?":{"type":"method","name":"first_argument_is_regexp?","children":[],"call":["node first_argument ","node send_type? "]}," RuboCop Cop Lint AmbiguousRange require_parentheses_for_method_chain?":{"type":"method","name":"require_parentheses_for_method_chain?","children":[],"call":[" cop_config [] ! "," cop_config [] "," cop_config "]}," RuboCop Cop Lint AmbiguousRange acceptable_call?":{"type":"method","name":"acceptable_call?","children":[],"call":["node receiver nil? ","node receiver "," require_parentheses_for_method_chain? ","node unary_operation? "]}," RuboCop Cop Lint AmbiguousRange acceptable?":{"type":"method","name":"acceptable?","children":[],"call":[" acceptable_call? ","node call_type? ","node const_type? ","node variable? ","node basic_literal? ","node begin_type? ","node self_type? ","node literal? "]}," RuboCop Cop Lint AmbiguousRange each_boundary":{"type":"method","name":"each_boundary","children":[],"call":["range end ","range begin "]}," RuboCop Cop Lint AmbiguousRange on_irange":{"type":"method","name":"on_irange","children":[],"call":["corrector wrap "," add_offense "," acceptable? "," each_boundary "]}," RuboCop Cop Layout TrailingWhitespace whitespace_only?":{"type":"method","name":"whitespace_only?","children":[],"call":["source end_with? ","source start_with? "," range_with_surrounding_space source "," range_with_surrounding_space "," range_with_surrounding_space source  end_with? "," range_with_surrounding_space source  start_with? "," range_with_surrounding_space  range_with_surrounding_space source  "]}," RuboCop Cop Layout TrailingWhitespace whitespace_is_indentation?":{"type":"method","name":"whitespace_is_indentation?","children":[],"call":["range source [] length <= ","range source [] length ","range source [] ","range source "]}," RuboCop Cop Layout TrailingWhitespace process_line_in_heredoc":{"type":"method","name":"process_line_in_heredoc","children":[],"call":["corrector wrap "," range_between ","range end_pos ","range begin_pos + ","range begin_pos "," static? ! "," static? ","corrector remove "," whitespace_is_indentation? "," whitespace_only? "," indent_level "," find_heredoc loc heredoc_body source "," find_heredoc loc heredoc_body "," find_heredoc loc "," find_heredoc ","range line ","  range_between _between "," range_between  end_pos "," range_between  begin_pos + "," range_between  begin_pos ","  whitespace_only? ? ","  indent_level  "," range_between  line "]}," RuboCop Cop Layout TrailingWhitespace on_heredoc":{"type":"method","name":"on_heredoc","children":[],"call":[]}," RuboCop Cop Layout SpaceAroundOperators on_casgn":{"type":"method","name":"on_casgn","children":[],"call":[" check_operator ","right source_range ","node loc operator ","node loc "]}," RuboCop Cop Layout RescueEnsureAlignment aligned_with_leading_dot?":{"type":"method","name":"aligned_with_leading_dot?","children":[],"call":["rescue_keyword_column == ","dot column ","do_keyword_line == ","dot line ","send_node_loc dot ","send_node_loc respond_to? ","send_node_loc dot  column ","send_node_loc dot  line ","send_node_loc send_node_loc dot  "]}," RuboCop Cop Layout RescueEnsureAlignment aligned_with_line_break_method?":{"type":"method","name":"aligned_with_line_break_method?","children":[],"call":["rescue_keyword_column == ","selector column ","do_keyword_line == ","selector line "," aligned_with_leading_dot? ","send_node_loc dot ","send_node_loc respond_to? ","send_node_loc selector ","node loc keyword column ","node loc keyword ","node loc ","ancestor_node loc begin line ","ancestor_node loc begin ","ancestor_node loc ","ancestor_node send_node loc ","ancestor_node send_node ","node loc keyword column  == ","send_node_loc selector  column ","ancestor_node loc begin line  == ","send_node_loc selector  line "," aligned_with_leading_send_node_loc dot ? ","send_node_loc send_node_loc dot  ","ancestor_node send_node loc  dot ","ancestor_node send_node loc  respond_to? ","send_node_loc send_node_loc selector  ","ancestor_node send_node loc  selector "]}," RuboCop Cop Layout LineEndStringConcatenationIndentation base_column":{"type":"method","name":"base_column","children":[],"call":["child source_range source_line =~ ","child source_range source_line ","child source_range ","grandparent loc column ","grandparent loc ","(lvar :grandparent) == ","child parent parent ","child parent ","child parent parent  loc column ","child parent parent  loc ","(lvar :child parent parent ) == "]}," RuboCop Cop Layout EmptyLineAfterGuardClause multiple_statements_on_line?":{"type":"method","name":"multiple_statements_on_line?","children":[],"call":["parent single_line? ","parent begin_type? ","node parent ","node parent  single_line? ","node parent  begin_type? ","node node parent  "]}," RuboCop Cop InternalAffairs UndefinedConfig configuration_key_defined?":{"type":"method","name":"configuration_key_defined?","children":[],"call":[" config_for_cop key? ","node value "," config_for_cop "]}," RuboCop Cop InternalAffairs UndefinedConfig always_allowed?":{"type":"method","name":"always_allowed?","children":[],"call":["ALLOWED_CONFIGURATIONS  include? ","node value "]}," RuboCop Cop InternalAffairs UndefinedConfig extract_cop_name":{"type":"method","name":"extract_cop_name","children":[],"call":["(send\n  (send\n    (lvar :segments) :reverse_each) :map) join ","s identifier short_name ","s identifier ","segments reverse_each map ","segments reverse_each ","(lvar :class_node) concat ","n identifier short_name != ","n identifier short_name ","n identifier ","class_node each_ancestor take_while ","class_node each_ancestor ","(send\n  (send\n    (lvar :(lvar :class_node) concat ) :reverse_each) :map) join ","(lvar :class_node) concat  reverse_each map ","(lvar :class_node) concat  reverse_each "]}," RuboCop Cop InternalAffairs UndefinedConfig on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format "," cop_class_name ","config_name_node value "," configuration_key_defined? "," always_allowed? "," cop_config_accessor? "," cop_config_accessor?  value "]}," RuboCop Cop InternalAffairs UndefinedConfig on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":["RuboCop ConfigLoader  default_configuration for_cop ","RuboCop ConfigLoader  default_configuration "," extract_cop_name "," cop_class_def first "," cop_class_def "," processed_source ast "," processed_source ","  cop_class_def first _def first ","  cop_class_def first _def "]}," RuboCop Cop InternalAffairs InheritDeprecatedCopClass on_class":{"type":"method","name":"on_class","children":[],"call":[" add_offense ","parent_class children last == ","parent_class children last ","parent_class children ","node parent_class ","node parent_class  children last == ","node parent_class  children last ","node parent_class  children ","node node parent_class  "]}," RuboCop Cop RequireLibraryCorrector require_statement":{"type":"method","name":"require_statement","children":[],"call":[]}," RuboCop Cop RequireLibraryCorrector correct":{"type":"method","name":"correct","children":[],"call":["corrector insert_before "," require_statement ","node children first ","node children ","node begin_type? ","node parent ","node parent? ","node children first  children first ","node parent  children first ","node children first  children ","node parent  children ","node children first  begin_type? ","node parent  begin_type? ","node children first  parent ","node parent  parent ","node children first  parent? ","node parent  parent? "]}," RuboCop ConfigLoaderResolver should_override?":{"type":"method","name":"should_override?","children":[],"call":["mode [] include? ","mode [] "]}," RuboCop ConfigLoaderResolver should_merge?":{"type":"method","name":"should_merge?","children":[],"call":["mode [] include? ","mode [] "]}," RuboCop CLI parallel_by_default!":{"type":"method","name":"parallel_by_default!","children":[],"call":["@options []= "," puts ","@options [] ","@config_store for_pwd for_all_cops [] != ","@config_store for_pwd for_all_cops [] ","@config_store for_pwd for_all_cops ","@config_store for_pwd ","(send\n  (send\n    (ivar :@options) :keys) :-\n  (const nil :DEFAULT_PARALLEL_OPTIONS)) empty? ","@options keys - ","@options keys ","RuboCop Platform  windows? ","RUBY_ENGINE  != "]}," RuboCop MagicComment SimpleComment without":{"type":"method","name":"without","children":[],"call":["@comment match? "," class KEYWORDS  [] ","type to_sym "," class "]}," RuboCop MagicComment EditorComment without":{"type":"method","name":"without","children":[],"call":[" class FORMAT  % ","remaining join "," class ","remaining empty? "," tokens grep_v "," class KEYWORDS  [] ","type to_sym "," tokens "," tokens grep_v  join "," tokens grep_v  empty? "]}," RuboCop MagicComment EditorComment encoding":{"type":"method","name":"encoding","children":[],"call":[" match "," class KEYWORDS  [] "," class "]}," RuboCop MagicComment valid?":{"type":"method","name":"valid?","children":[],"call":[" any? ","@comment start_with? "]}," RuboCop Cop Style WordArray build_bracketed_array":{"type":"method","name":"build_bracketed_array","children":[],"call":["words join "," to_string_literal ","word children [] ","word children "," trim_string_interporation_escape_character ","word source ","word dstr_type? ","node children map ","node children "," build_bracketed_array_with_appropriate_whitespace "," trim_string_interpolation_escape_character ","node children empty? "," to_ to_string_literal  "]}," RuboCop Cop Style SymbolArray build_bracketed_array":{"type":"method","name":"build_bracketed_array","children":[],"call":["syms join "," to_symbol_literal ","c value to_s ","c value "," trim_string_interporation_escape_character "," to_string_literal ","c source ","c dsym_type? ","node children map ","node children "," build_bracketed_array_with_appropriate_whitespace "," trim_string_interpolation_escape_character ","node children empty? "," to_ to_string_literal  "]}," RuboCop Cop Style SoleNestedConditional autocorrect_incompatible_with":{"type":"method","name":"autocorrect_incompatible_with","children":[],"call":[]}," RuboCop Cop Style RedundantSelfAssignmentBranch multiple_statements?":{"type":"method","name":"multiple_statements?","children":[],"call":["branch children compact count > ","branch children compact count ","branch children compact ","branch children ","branch children empty? ! ","branch children empty? "]}," RuboCop Cop Style RedundantSelfAssignmentBranch inconvertible_to_modifier?":{"type":"method","name":"inconvertible_to_modifier?","children":[],"call":["else_branch elsif? ","else_branch respond_to? "," multiple_statements? "]}," RuboCop Cop Style RedundantSelfAssignmentBranch use_if_and_else_branch?":{"type":"method","name":"use_if_and_else_branch?","children":[],"call":["expression else? ! ","expression else? ","expression ternary? ! ","expression ternary? "]}," RuboCop Cop Style RedundantBegin begin_block_has_multiline_statements?":{"type":"method","name":"begin_block_has_multiline_statements?","children":[],"call":["node children count >= ","node children count ","node children "]}," RuboCop Cop Style RedundantBegin condition_range":{"type":"method","name":"condition_range","children":[],"call":[" range_between ","node condition source_range end_pos ","node condition source_range ","node condition ","node loc keyword begin_pos ","node loc keyword ","node loc "]}," RuboCop Cop Style RedundantBegin correct_modifier_form_after_multiline_begin_block":{"type":"method","name":"correct_modifier_form_after_multiline_begin_block","children":[],"call":["corrector remove "," range_by_whole_lines ","corrector insert_after ","condition_range source ","node children first ","node children "," condition_range ","node parent "," condition_range  source ","  condition_range  "]}," RuboCop Cop Style RedundantBegin use_modifier_form_after_multiline_begin_block?":{"type":"method","name":"use_modifier_form_after_multiline_begin_block?","children":[],"call":["parent modifier_form? ","parent if_type? ","node multiline? ","node parent ","node parent  modifier_form? ","node parent  if_type? ","node node parent  "]}," RuboCop Cop Style HashAsLastArrayItem remove_last_element_trailing_comma":{"type":"method","name":"remove_last_element_trailing_comma","children":[],"call":["corrector remove ","range source == ","range source "," range_with_surrounding_space end resize "," range_with_surrounding_space end "," range_with_surrounding_space ","node children last source_range ","node children last ","node children "," range_with_surrounding_space end resize  source == "," range_with_surrounding_space end resize  source ","  range_with_surrounding_space end resize _with_surrounding_space end resize ","  range_with_surrounding_space end resize _with_surrounding_space end ","  range_with_surrounding_space end resize _with_surrounding_space ","node children last source_ range_with_surrounding_space end resize  "]}," RuboCop Cop Style Encoding register_offense":{"type":"method","name":"register_offense","children":[],"call":["corrector replace ","corrector remove "," range_with_surrounding_space ","text blank? ","comment without "," add_offense "," processed_source buffer line_range "," processed_source buffer "," processed_source ","  processed_source buffer line_range _with_surrounding_space ","comment without  blank? "," processed_source buffer line_ processed_source buffer line_range  "]}," RuboCop Cop Style Encoding offense?":{"type":"method","name":"offense?","children":[],"call":["comment encoding casecmp zero? ","comment encoding casecmp ","comment encoding ","comment encoding_specified? "]}," RuboCop Cop Style Encoding comments":{"type":"method","name":"comments","children":[],"call":["comments []= ","line_number + ","comment valid? ","MagicComment  parse ","line start_with? "," processed_source lines each with_index with_object "," processed_source lines each with_index "," processed_source lines each "," processed_source lines "," processed_source ","MagicComment  parse s []= ","MagicComment  parse  valid? "]}," RuboCop Cop Style DoubleNegation find_last_child":{"type":"method","name":"find_last_child","children":[],"call":["node child_nodes last ","node child_nodes "," find_last_child ","node child_nodes first ","node body ","node type "]}," RuboCop Cop Style MutableConstant shareable_constant_value?":{"type":"method","name":"shareable_constant_value?","children":[],"call":[" recent_shareable_value? "," target_ruby_version < "," target_ruby_version "]}," RuboCop Cop Style MutableConstant ShareableConstantValue shareable_constant_value_enabled?":{"type":"method","name":"shareable_constant_value_enabled?","children":[],"call":["(str \"literal\") include? "]}," RuboCop Cop Style MutableConstant ShareableConstantValue processed_source_till_node":{"type":"method","name":"processed_source_till_node","children":[],"call":[" processed_source lines [] ","node last_line - ","node last_line "," processed_source lines "," processed_source "]}," RuboCop Cop Style MutableConstant ShareableConstantValue magic_comment_in_scope":{"type":"method","name":"magic_comment_in_scope","children":[],"call":["MagicComment  parse valid_shareable_constant_value? ","MagicComment  parse "," processed_source_till_node reverse_each find "," processed_source_till_node reverse_each "," processed_source_till_node "]}," RuboCop Cop Style MutableConstant ShareableConstantValue recent_shareable_value?":{"type":"method","name":"recent_shareable_value?","children":[],"call":[" shareable_constant_value_enabled? ","MagicComment  parse shareable_constant_value ","MagicComment  parse ","shareable_constant_comment nil? "," magic_comment_in_scope "," MagicComment  parse shareable_constant_value _enabled? ","MagicComment  parse MagicComment  parse shareable_constant_value  "," magic_comment_in_scope  nil? "]}," RuboCop Cop Style CommentAnnotation keywords":{"type":"method","name":"keywords","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style BlockDelimiters begin_required?":{"type":"method","name":"begin_required?","children":[],"call":["block_node single_line? ! ","block_node single_line? ","block_node each_child_node any? ","block_node each_child_node "]}," RuboCop Cop Style BlockDelimiters end_of_chain":{"type":"method","name":"end_of_chain","children":[],"call":[" end_of_chain ","node parent ","node chained? ","node block_node "," with_block? "]}," RuboCop Cop FrozenStringLiteral frozen_string_literal?":{"type":"method","name":"frozen_string_literal?","children":[],"call":[" frozen_string_literals_enabled? ","literal_types include? ","node type "," target_ruby_version >= "," target_ruby_version ","FROZEN_STRING_LITERAL_TYPES_RUBY27  include? "," frozen_heredoc? ","node str_type? "," uninterpolated_string? "," FROZEN_STRING_LITERAL_TYPES_RUBY27  include? _literals_enabled? "]}," RuboCop Cop DocumentationComment annotation_keywords":{"type":"method","name":"annotation_keywords","children":[],"call":[" config for_cop [] "," config for_cop "," config "]}," RuboCop Cop AnnotationComment just_keyword_of_sentence?":{"type":"method","name":"just_keyword_of_sentence?","children":[],"call":[" note "," space "," colon ! "," colon "," keyword == "," keyword capitalize "," keyword "]}," RuboCop Cop AnnotationComment keyword_appearance?":{"type":"method","name":"keyword_appearance?","children":[],"call":[" space "," colon "," keyword "]}," RuboCop Cop AnnotationComment split_comment":{"type":"method","name":"split_comment","children":[],"call":["match captures ","comment text match ","comment text ","Regexp  new ","Regexp  union source ","Regexp  union ","w length -@ ","w length "," keywords sort_by "," keywords "," regex ","comment text match  captures ","comment text comment text match  "]}," RuboCop Cop AnnotationComment bounds":{"type":"method","name":"bounds","children":[],"call":["start + ","len + ","elem to_s length ","elem to_s ","(send nil :keyword) reduce "," space "," colon "," keyword "," comment loc expression begin_pos + "," margin length "," margin "," comment loc expression begin_pos "," comment loc expression "," comment loc "," comment "," comment source_range begin_pos + "," comment source_range begin_pos "," comment source_range "," comment loc expression begin_pos +  + "," comment source_range begin_pos +  + "]}," RuboCop Cop AnnotationComment correct?":{"type":"method","name":"correct?","children":[],"call":[" colon nil? == ","colon ! "," colon nil? "," colon "," keyword == "," keyword upcase "," keyword "," note "," space "]}," RuboCop Cop AnnotationComment annotation?":{"type":"method","name":"annotation?","children":[],"call":[" just_keyword_of_sentence? ! "," just_keyword_of_sentence? "," keyword_appearance? "]}," RuboCop Cop AnnotationComment initialize":{"type":"method","name":"initialize","children":[],"call":[" split_comment "]}," RuboCop Cop Bundler GemFilename gems_rb_required?":{"type":"method","name":"gems_rb_required?","children":[],"call":[" style == "," style "]}," RuboCop Cop Bundler GemFilename gemfile_required?":{"type":"method","name":"gemfile_required?","children":[],"call":[" style == "," style "]}," RuboCop Cop Bundler GemFilename expected_gemfile?":{"type":"method","name":"expected_gemfile?","children":[],"call":["GEMS_RB_FILES  include? "," gems_rb_required? ","GEMFILE_FILES  include? "," gemfile_required? "]}," RuboCop Cop Bundler GemFilename gems_rb_offense?":{"type":"method","name":"gems_rb_offense?","children":[],"call":["GEMFILE_FILES  include? "," gems_rb_required? "]}," RuboCop Cop Bundler GemFilename gemfile_offense?":{"type":"method","name":"gemfile_offense?","children":[],"call":["GEMS_RB_FILES  include? "," gemfile_required? "]}," RuboCop Cop Bundler GemFilename register_gems_rb_offense":{"type":"method","name":"register_gems_rb_offense","children":[],"call":[" add_global_offense "," format "]}," RuboCop Cop Bundler GemFilename register_gemfile_offense":{"type":"method","name":"register_gemfile_offense","children":[],"call":[" add_global_offense "," format "]}," RuboCop Cop Bundler GemFilename register_offense":{"type":"method","name":"register_offense","children":[],"call":[" register_gems_rb_offense "," gems_rb_offense? "," register_gemfile_offense "," gemfile_offense? "]}," RuboCop Cop Bundler GemFilename on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[" register_offense "," expected_gemfile? ","File  basename "," processed_source file_path "," processed_source ","File  File  basename  "," processed_source  processed_source file_path  "]}," RuboCop Cop Style RedundantSort register_offense":{"type":"method","name":"register_offense","children":[],"call":[" autocorrect "," add_offense "," offense_range "," message ","corrector replace "," suggestion "," arg_value ","sort_node loc selector ","sort_node loc ","corrector remove "," range_between ","node loc expression end_pos ","node loc expression ","node loc "," accessor_start ","  message  "]}," RuboCop Cop Style RedundantSort use_size_method_in_block?":{"type":"method","name":"use_size_method_in_block?","children":[],"call":["sort_node last_argument children first value == ","sort_node last_argument children first value ","sort_node last_argument children first ","sort_node last_argument children ","sort_node last_argument ","sort_node block_argument? ","sort_node block_node ","sort_node send_type? "]}," RuboCop Cop Style ExplicitBlockArgument extract_block_name":{"type":"method","name":"extract_block_name","children":[],"call":["def_node arguments last name ","def_node arguments last ","def_node arguments ","def_node block_argument? "]}," RuboCop Cop Style Documentation qualify_const":{"type":"method","name":"qualify_const","children":[],"call":["(send nil :qualify_const\n  (send\n    (lvar :node) :namespace)) compact ","node short_name "," qualify_const ","node namespace ","node nil? ","node cbase_type? ","node send_type? ","node self_type? ","node source ","node variable? ","node call_type? "]}," RuboCop Cop Style Documentation identifier":{"type":"method","name":"identifier","children":[],"call":["(send\n  (send\n    (lvar :nodes) :reverse_each) :flat_map) join "," qualify_const ","n identifier ","nodes reverse_each flat_map ","nodes reverse_each ","node each_ancestor ","identifier sub ","n (send\n  (send\n    (lvar :nodes) :reverse_each) :flat_map) join  ","(send\n  (send\n    (lvar :nodes) :reverse_each) :flat_map) join  sub "]}," RuboCop Cop PrecedingFollowingAlignment aligned_with_append_operator?":{"type":"method","name":"aligned_with_append_operator?","children":[],"call":["line [] == ","line [] ","last_column - ","range source [] == ","range source [] ","range source ","range source == ","range last_column ","range last_column  - ","range range last_column  "]}," RuboCop Cop FrozenStringLiteral frozen_heredoc?":{"type":"method","name":"frozen_heredoc?","children":[],"call":["node children all? ","node children ","node heredoc? ","node dstr_type? "]}," RuboCop Cop Lint NumberConversion conversion_method?":{"type":"method","name":"conversion_method?","children":[],"call":["CONVERSION_METHODS  include? "]}," RuboCop Cop Lint IncompatibleIoSelectWithFiberScheduler preferred_method":{"type":"method","name":"preferred_method","children":[],"call":["write values [] source ","write values [] ","write values ","read values [] source ","read values [] ","read values ","read array_type? ","timeout [] source ","timeout [] ","timeout empty? ","timeout source ","timeout nil? "]}," RuboCop Cop Lint IncompatibleIoSelectWithFiberScheduler scheduler_compatible?":{"type":"method","name":"scheduler_compatible?","children":[],"call":["io2 nil_type? ","io2 values empty? ","io2 values ","io2 array_type? ","io1 values size == ","io1 values size ","io1 values ","io1 array_type? ","io2 nil? "]}," RuboCop Cop Lint IncompatibleIoSelectWithFiberScheduler on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace "," add_offense "," format ","node source "," preferred_method "," scheduler_compatible? "," io_select ","node parent ","excepts children empty? ! ","excepts children empty? ","excepts children ","  preferred_method _method "]}," RuboCop Cop Lint AmbiguousOperatorPrecedence autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector wrap "]}," RuboCop Cop Lint AmbiguousOperatorPrecedence operator_name":{"type":"method","name":"operator_name","children":[],"call":["node operator to_sym ","node operator ","node method_name ","node send_type? "]}," RuboCop Cop Lint AmbiguousOperatorPrecedence greater_precedence?":{"type":"method","name":"greater_precedence?","children":[],"call":[" precedence > "," precedence ","node2_precedence > "," precedence  > "]}," RuboCop Cop Lint AmbiguousOperatorPrecedence operator?":{"type":"method","name":"operator?","children":[],"call":["node operator_keyword? ","RESTRICT_ON_SEND  include? ","node method_name ","node send_type? "]}," RuboCop Cop Lint AmbiguousOperatorPrecedence precedence":{"type":"method","name":"precedence","children":[],"call":["operators include? "," operator_name ","PRECEDENCE  index ","@node_precedences fetch "]}," RuboCop Cop Lint AmbiguousOperatorPrecedence on_send":{"type":"method","name":"on_send","children":[],"call":[" autocorrect "," add_offense "," greater_precedence? "," operator? ","node parent ","node parenthesized? ","node node parent  ","node node parent hesized? "]}," RuboCop Cop Lint AmbiguousOperatorPrecedence on_and":{"type":"method","name":"on_and","children":[],"call":[" autocorrect "," add_offense ","parent or_type? ","parent begin_type? ","node parent ","node parent  or_type? ","node parent  begin_type? ","node node parent  "]}," RuboCop Cop Lint AmbiguousOperatorPrecedence on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[]}," RuboCop Cop Layout SingleLineBlockChain selector_range":{"type":"method","name":"selector_range","children":[],"call":["node loc begin ","node loc ","node loc selector "]}," RuboCop Cop Layout SingleLineBlockChain call_method_after_block?":{"type":"method","name":"call_method_after_block?","children":[],"call":["dot_range column < "," selector_range column "," selector_range ","dot_range column ","dot_range line > ","dot_range line "]}," RuboCop Options section":{"type":"method","name":"section","children":[],"call":["opts separator "," rainbow wrap bright "," rainbow wrap "," rainbow "]}," RuboCop Options rainbow":{"type":"method","name":"rainbow","children":[],"call":["rainbow enabled= ","ARGV  include? ","Rainbow  new ","Rainbow  new  enabled= "]}," RuboCop Options add_general_options":{"type":"method","name":"add_general_options","children":[],"call":[" option "," require_feature "," section "]}," RuboCop Options add_additional_modes":{"type":"method","name":"add_additional_modes","children":[],"call":["@options []= ","list split ","list nil? "," option "," section "]}," RuboCop Options add_config_generation_options":{"type":"method","name":"add_config_generation_options","children":[],"call":[" option ","@validator validate_exclude_limit_option ","@options replace ","ConfigRegeneration  new options merge ","ConfigRegeneration  new options ","ConfigRegeneration  new "," section "]}," RuboCop Options add_autocorrection_options":{"type":"method","name":"add_autocorrection_options","children":[],"call":[" option ","@options []= "," warn "," section "," handle_deprecated_option "]}," RuboCop Options add_output_options":{"type":"method","name":"add_output_options","children":[],"call":[" option ","@options []= ","@options [] last << ","@options [] last ","@options [] ","@options [] << "," section "]}," RuboCop Options add_check_options":{"type":"method","name":"add_check_options","children":[],"call":[" add_severity_option "," option "," add_cop_selection_csv_option ","@options []= ","@options [] << ","@options [] "," section "]}," CopsDocumentationGenerator safety_object":{"type":"method","name":"safety_object","children":[],"call":["content << ","safety_object text ","content end_with? ","safety_object text blank? ","safety_object_objects each_with_object "," h3 dup "," h3 "]}," RuboCop Cop Style SelectByRegexp find_regexp":{"type":"method","name":"find_regexp","children":[],"call":["node receiver ","node first_argument lvar_type? ","node first_argument ","node receiver lvar_type? ","node child_nodes first ","node child_nodes ","node match_with_lvasgn_type? ","node receiver source == ","block arguments first source ","block arguments first ","block arguments ","node receiver source ","block numblock_type? "]}," RuboCop Cop Style SelectByRegexp extract_send_node":{"type":"method","name":"extract_send_node","children":[],"call":[" calls_lvar? ","block_node numblock_type? "," regexp_match? "]}," RuboCop Cop Style SelectByRegexp register_offense":{"type":"method","name":"register_offense","children":[],"call":["corrector replace ","regexp source "," range_between ","block_node loc end end_pos ","block_node loc end ","block_node loc ","node loc selector begin_pos ","node loc selector ","node loc "," add_offense "," format ","node method_name ","REPLACEMENTS  [] ","node method_name to_sym ","OPPOSITE_REPLACEMENTS  [] ","  range_between _between ","node node method_name to_sym  ","node node method_name to_sym  to_sym "]}," RuboCop Cop Style SelectByRegexp on_send":{"type":"method","name":"on_send","children":[],"call":[" register_offense "," find_regexp "," extract_send_node ","block_node body begin_type? ","block_node body ","node block_node "," receiver_allowed? ","block_node receiver "," match_predicate_without_receiver? ","regexp_method_send_node method? ","regexp_method_send_node send_type? "," opposite? ","replacement == "," target_ruby_version <= "," target_ruby_version "," replacement "," find_ find_regexp  ","node block_node  body begin_type? ","node block_node  body ","node node block_node  ","node block_node  receiver "," find_regexp _method_send_node method? "," extract_send_node  method? "," find_regexp _method_send_node send_type? "," extract_send_node  send_type? ","  opposite? ? "," replacement  == ","  replacement  "]}," RuboCop Cop Style RedundantSort find_redundant_sort":{"type":"method","name":"find_redundant_sort","children":[],"call":[" redundant_sort? ","nodes each "]}," RuboCop Cop Style RedundantSelf add_match_var_scopes":{"type":"method","name":"add_match_var_scopes","children":[],"call":["@local_variables_scopes [] << ","match_var_node children first ","match_var_node children ","@local_variables_scopes [] ","in_pattern_node each_descendant "]}," RuboCop Cop Style RedundantSelf on_in_pattern":{"type":"method","name":"on_in_pattern","children":[],"call":[" add_match_var_scopes "]}," RuboCop Cop Style RedundantFileExtensionInRequire extension_range":{"type":"method","name":"extension_range","children":[],"call":[" range_between ","end_of_path_string - ","name_node source_range end_pos ","name_node source_range ","name_node source_range end_pos  - "]}," RuboCop Cop Style OptionalBooleanParameter format_message":{"type":"method","name":"format_message","children":[],"call":[" format ","source sub ","argument source ","argument default_value source ","argument default_value ","argument name ","argument source  sub ","argument argument source  ","argument default_value argument source  "]}," RuboCop Cop Style NumberedParametersLimit max_count":{"type":"method","name":"max_count","children":[],"call":["(lvar :max) min "," cop_config fetch "," cop_config ","(lvar : cop_config fetch ) min "]}," RuboCop Cop Style NumberedParametersLimit on_numblock":{"type":"method","name":"on_numblock","children":[],"call":[" max= "," add_offense "," format "," max_count "," max_count > ","param_count <= "," numbered_parameter_nodes uniq count "," numbered_parameter_nodes uniq "," numbered_parameter_nodes "," numbered_parameter_nodes uniq count  <= "]}," RuboCop Cop Style NumberedParameters on_numblock":{"type":"method","name":"on_numblock","children":[],"call":[" add_offense ","node multiline? "," style == "," style "]}," RuboCop Cop Security IoMethods on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace "," add_offense "," format ","node method_name ","argument value strip start_with? ","argument value strip ","argument value ","argument respond_to? ","node first_argument ","receiver source == ","receiver source ","node receiver ","node first_argument  value strip start_with? ","node first_argument  value strip ","node first_argument  value ","node first_argument  respond_to? ","node first_node first_argument  ","node receiver  source == ","node receiver  source ","node node receiver  "]}," RuboCop Cop Naming RescuedExceptionsVariableName shadowed_variable_name?":{"type":"method","name":"shadowed_variable_name?","children":[],"call":["n children first to_s == "," preferred_name ","n children first to_s ","n children first ","n children ","node each_descendant any? ","node each_descendant "]}," RuboCop Cop FrozenStringLiteral uninterpolated_string?":{"type":"method","name":"uninterpolated_string?","children":[],"call":["node each_descendant none? ","node each_descendant ","node dstr_type? ","node str_type? "]}," RuboCop Cop Lint RequireRelativeSelfPath remove_ext":{"type":"method","name":"remove_ext","children":[],"call":["File  basename ","File  extname "]}," RuboCop Cop Lint RequireRelativeSelfPath same_file?":{"type":"method","name":"same_file?","children":[],"call":[" remove_ext == "," remove_ext ","file_path == "]}," RuboCop Cop Lint RequireRelativeSelfPath on_send":{"type":"method","name":"on_send","children":[],"call":["corrector remove "," range_by_whole_lines ","node source_range "," add_offense "," same_file? ","required_feature value "," processed_source file_path "," processed_source ","node first_argument ","required_feature respond_to? ","node first_argument  value ","node first_argument  respond_to? "]}," RuboCop Cop Lint ElseLayout indentation_width":{"type":"method","name":"indentation_width","children":[],"call":["@config for_cop [] ","@config for_cop "]}," RuboCop Cop Lint DeprecatedClassMethods Replacement delimiter":{"type":"method","name":"delimiter","children":[],"call":[" instance_method? "]}," RuboCop Cop Lint DeprecatedClassMethods DeprecatedClassMethod delimiter":{"type":"method","name":"delimiter","children":[],"call":[]}," RuboCop Cop Layout SpaceInsideParens right_parens?":{"type":"method","name":"right_parens?","children":[],"call":["token2 right_parens? ","token1 right_parens? "]}," RuboCop Cop Layout SpaceInsideParens left_parens?":{"type":"method","name":"left_parens?","children":[],"call":["token2 left_parens? ","token1 left_parens? "]}," RuboCop Cop Layout SpaceInsideParens correct_missing_space":{"type":"method","name":"correct_missing_space","children":[],"call":["corrector insert_before "," add_offense "," range_between ","token2 end_pos ","token2 begin_pos ","token2 right_parens? ","token2 begin_pos + ","token1 left_parens? "," can_be_ignored? ","  range_between _between "]}," RuboCop Cop Layout SpaceInsideParens correct_extraneous_space_in_empty_parens":{"type":"method","name":"correct_extraneous_space_in_empty_parens","children":[],"call":["corrector remove "," add_offense "," range_between ","token2 begin_pos ","token1 end_pos "," range_between source == "," range_between source ","token2 end_pos ","token1 begin_pos ","token2 right_parens? ","token1 left_parens? ","  range_between _between ","  range_between _between source == ","  range_between _between source "]}," RuboCop Cop Layout SpaceInsideParens correct_extaneus_space_between_consecutive_parens":{"type":"method","name":"correct_extaneus_space_between_consecutive_parens","children":[],"call":["corrector remove "," add_offense "," range_between ","token2 begin_pos ","token1 end_pos "," range_between source != "," range_between source ","  range_between _between ","  range_between _between source != ","  range_between _between source "]}," RuboCop Cop Layout SpaceInsideParens correct_extraneous_space":{"type":"method","name":"correct_extraneous_space","children":[],"call":["corrector remove "," add_offense "," range_between ","token2 begin_pos ","token1 end_pos ","token1 space_after? "," same_line? ","token2 comment? "," parens? ","tokens each_cons ","  range_between _between "]}," RuboCop Cop Layout SpaceInsideParens process_with_compact_style":{"type":"method","name":"process_with_compact_style","children":[],"call":[" correct_extaneus_space_between_consecutive_parens "," correct_missing_space "," right_parens? ! "," right_parens? "," left_parens? ! "," left_parens? "," correct_extraneous_space_in_empty_parens ","tokens each_cons "," correct_extraneous_space_between_consecutive_parens "]}," RuboCop Cop Layout DotPosition heredoc?":{"type":"method","name":"heredoc?","children":[],"call":["node heredoc? ","node dstr_type? ","node str_type? "]}," RuboCop Cop Layout DotPosition last_heredoc_line":{"type":"method","name":"last_heredoc_line","children":[],"call":["node loc heredoc_end line ","node loc heredoc_end ","node loc "," heredoc? ","(send\n  (block\n    (send\n      (send\n        (lvar :node) :arguments) :select)\n    (args\n      (arg :arg))\n    (send nil :heredoc?\n      (lvar :arg))) :map) max ","arg loc heredoc_end line ","arg loc heredoc_end ","arg loc ","(send\n  (send\n    (lvar :node) :arguments) :select) map ","node arguments select ","node arguments ","node send_type? "]}," RuboCop Cop Layout DotPosition receiver_end_line":{"type":"method","name":"receiver_end_line","children":[],"call":["node source_range end line ","node source_range end ","node source_range "," last_heredoc_line ","node source_range end  last_heredoc_line  "," last_heredoc_ last_heredoc_line  "]}," RuboCop Cop Gemspec OrderedDependencies on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[" register_offense "," get_dependency_name == "," get_dependency_name "," case_insensitive_out_of_order? "," gem_name "," consecutive_lines "," dependency_declarations each_cons "," dependency_declarations "," processed_source ast "," processed_source "," processed_source blank? "]}," RuboCop Cop Bundler OrderedGems on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[" register_offense "," case_insensitive_out_of_order? "," gem_name "," consecutive_lines "," gem_declarations each_cons "," gem_declarations "," processed_source ast "," processed_source "," processed_source blank? "]}," RuboCop Cop Bundler InsecureProtocolSource allow_http_protocol?":{"type":"method","name":"allow_http_protocol?","children":[],"call":[" cop_config fetch "," cop_config "]}," RuboCop ConfigValidator validate_after_resolution":{"type":"method","name":"validate_after_resolution","children":[],"call":[" check_target_ruby "]}," RuboCop Config validate_after_resolution":{"type":"method","name":"validate_after_resolution","children":[],"call":["@validator validate_after_resolution "]}," RuboCop Cop Style SelectByRegexp receiver_allowed?":{"type":"method","name":"receiver_allowed?","children":[],"call":[" creates_hash? ","node hash_type? "," env_const? "]}," RuboCop RSpec ParallelFormatter pluralize":{"type":"method","name":"pluralize","children":[],"call":[" RSpec Core Formatters Helpers  pluralize "]}," RuboCop RSpec ParallelFormatter totals":{"type":"method","name":"totals","children":[],"call":[" pluralize ","summary errors_outside_of_examples_count ","summary errors_outside_of_examples_count positive? ","summary failure_count ","summary pending_count ","summary pending_count positive? ","summary example_count "]}," RuboCop RSpec ParallelFormatter output_rerun_commands":{"type":"method","name":"output_rerun_commands","children":[],"call":[" output puts "," output ","summary colorized_rerun_commands lines [] join ","summary colorized_rerun_commands lines [] ","summary colorized_rerun_commands lines ","summary colorized_rerun_commands "]}," RuboCop RSpec ParallelFormatter colorize_summary":{"type":"method","name":"colorize_summary","children":[],"call":[" colorizer wrap "," RSpec  configuration success_color "," RSpec  configuration "," colorizer "," RSpec  configuration failure_color ","summary errors_outside_of_examples_count positive? ","summary errors_outside_of_examples_count ","summary failure_count positive? ","summary failure_count "," totals ","  totals  "]}," RuboCop RSpec ParallelFormatter output_summary":{"type":"method","name":"output_summary","children":[],"call":[" output puts "," output "," colorize_summary "]}," RuboCop RSpec ParallelFormatter colorizer":{"type":"method","name":"colorizer","children":[],"call":[]}," RuboCop RSpec ParallelFormatter dump_summary":{"type":"method","name":"dump_summary","children":[],"call":[" output_rerun_commands "," output_summary "]}," RuboCop RSpec ParallelFormatter dump_failures":{"type":"method","name":"dump_failures","children":[],"call":[" output puts "," output ","failure fully_formatted "," colorizer ","notification failure_notifications each ","notification failure_notifications ","notification failure_notifications empty? "]}," RuboCop RSpec ParallelFormatter dump_pending":{"type":"method","name":"dump_pending","children":[],"call":[]}," RuboCop Cop Util line":{"type":"method","name":"line","children":[],"call":["node_or_range loc line ","node_or_range loc ","node_or_range respond_to? ","node_or_range line "]}," RuboCop Cop Style SelectByRegexp match_predicate_without_receiver?":{"type":"method","name":"match_predicate_without_receiver?","children":[],"call":["node receiver nil? ","node receiver ","node method? ","node send_type? "]}," RuboCop Cop Style CommentedKeyword source_line":{"type":"method","name":"source_line","children":[],"call":["comment location expression source_line ","comment location expression ","comment location ","comment source_range source_line ","comment source_range "]}," RuboCop Cop InternalAffairs LocationLineEqualityComparison extract_receiver":{"type":"method","name":"extract_receiver","children":[],"call":["receiver source ","receiver receiver ","receiver method? ","node receiver ","receiver send_type? ","receiver receiver  source ","node receiver  source ","receiver receiver  receiver receiver  ","node receiver  node receiver  ","receiver receiver  method? ","node receiver  method? ","node receiver receiver  ","node node receiver  ","receiver receiver  send_type? ","node receiver  send_type? "]}," RuboCop Cop InternalAffairs LocationLineEqualityComparison on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace "," add_offense "," format "," extract_receiver "," location_line_equality_comparison? "]}," RuboCop Cop Gemspec RequiredRubyVersion dynamic_version?":{"type":"method","name":"dynamic_version?","children":[],"call":["node each_descendant any? ","node each_descendant ","node variable? ","node receiver ! ","node receiver ","node send_type? "]}," RuboCop Cop Gemspec RequiredRubyVersion on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," not_equal_message "," target_ruby_version ","ruby_version == "," target_ruby_version to_s "," extract_ruby_version "," defined_ruby_version "," dynamic_version? ","node first_argument "," target_ extract_ruby_version  "," extract_ruby_version  == "," target_ extract_ruby_version  to_s "," extract_ extract_ruby_version  "," defined_ extract_ruby_version  "]}," RuboCop Cop Layout DotPosition end_range":{"type":"method","name":"end_range","children":[],"call":["node source_range end ","node source_range "]}," RuboCop Cop Style QuotedSymbols invalid_double_quotes?":{"type":"method","name":"invalid_double_quotes?","children":[],"call":["(str \"\\\" | (?<!\\\\\\\\)\\\\\\\\[aAbcdefkMnprsStuUxzZ0-7] | \\\\#[@{$]\") match? ! ","(str \"\\\" | (?<!\\\\\\\\)\\\\\\\\[aAbcdefkMnprsStuUxzZ0-7] | \\\\#[@{$]\") match? "," style == "," style "]}," RuboCop Cop Style ParenthesesAroundCondition semicolon_separated_expressions?":{"type":"method","name":"semicolon_separated_expressions?","children":[],"call":["range source include? ","range source "," range_between ","second_exp source_range begin_pos ","second_exp source_range ","first_exp source_range end_pos ","first_exp source_range ","rest_exps first "," range_between  source include? "," range_between  source ","  range_between _between ","second_exp source_ range_between  begin_pos ","rest_exps first  source_range begin_pos ","second_exp source_ range_between  ","rest_exps first  source_range ","first_exp source_ range_between  end_pos ","first_exp source_ range_between  "]}," RuboCop Cop Style OpenStructUse custom_class_or_module_definition?":{"type":"method","name":"custom_class_or_module_definition?","children":[],"call":["node left_siblings empty? ","node left_siblings ","parent module_type? ","parent class_type? ","node parent ","node parent  module_type? ","node parent  class_type? ","node node parent  "]}," RuboCop Cop Style OpenStructUse on_const":{"type":"method","name":"on_const","children":[],"call":[" add_offense "," custom_class_or_module_definition? "," uses_open_struct? "]}," RuboCop Cop Naming FileName defined_struct":{"type":"method","name":"defined_struct","children":[],"call":[" s "," struct_definition "]}," RuboCop Cop Naming FileName find_definition":{"type":"method","name":"find_definition","children":[],"call":[" defined_struct ","node defined_module "]}," RuboCop Cop Naming FileName definition_path_hierarchy_roots":{"type":"method","name":"definition_path_hierarchy_roots","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Lint UselessRuby2Keywords allowed_arguments":{"type":"method","name":"allowed_arguments","children":[],"call":["arguments each_child_node none? ","arguments each_child_node ","arguments each_child_node any? ","arguments empty? "]}," RuboCop Cop Lint UselessRuby2Keywords inspect_sym":{"type":"method","name":"inspect_sym","children":[],"call":[" add_offense "," format "," allowed_arguments ","definition arguments "," method_definition ","node parent each_child_node detect ","node parent each_child_node ","node parent ","sym_node value "," find_method_definition "," find_method_definition  arguments "," method_ find_method_definition  "," find_method_ find_method_definition  "]}," RuboCop Cop Lint UselessRuby2Keywords inspect_def":{"type":"method","name":"inspect_def","children":[],"call":[" add_offense "," format ","def_node method_name ","node loc selector ","node loc "," allowed_arguments ","def_node arguments "]}," RuboCop Cop Lint UselessRuby2Keywords on_send":{"type":"method","name":"on_send","children":[],"call":[" inspect_sym ","node first_argument ","node first_argument sym_type? "," inspect_def ","node first_argument def_type? ","first_argument def_type? ","node node first_argument  ","node node first_argument  sym_type? ","node node first_argument  def_type? ","node first_argument  def_type? "]}," RuboCop Cop Layout SpaceInLambdaLiteral lambda_arguments":{"type":"method","name":"lambda_arguments","children":[],"call":["node parent children [] ","node parent children ","node parent "]}," RuboCop Cop Gemspec RequireMFA change_value":{"type":"method","name":"change_value","children":[],"call":["corrector replace "]}," RuboCop Cop Gemspec RequireMFA correct_missing_metadata":{"type":"method","name":"correct_missing_metadata","children":[],"call":["corrector insert_before ","node loc end ","node loc "]}," RuboCop Cop Gemspec RequireMFA correct_metadata":{"type":"method","name":"correct_metadata","children":[],"call":["corrector insert_before ","metadata loc end ","metadata loc ","corrector insert_after ","metadata pairs last ","metadata pairs ","metadata pairs any? "]}," RuboCop Cop Gemspec RequireMFA autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" correct_missing_metadata "," correct_metadata ","metadata hash_type? "," insert_mfa_required "]}," RuboCop Cop Gemspec RequireMFA mfa_value":{"type":"method","name":"mfa_value","children":[],"call":[" rubygems_mfa_required first "," rubygems_mfa_required ","metadata_value str_type? "]}," RuboCop Cop Gemspec RequireMFA on_block":{"type":"method","name":"on_block","children":[],"call":[" autocorrect "," add_offense "," change_value "," true_string? "," mfa_value "," metadata "," gem_specification ","  mfa_value  "]}," RuboCop Cop Style RedundantInterpolation require_parentheses?":{"type":"method","name":"require_parentheses?","children":[],"call":["node parenthesized_call? ! ","node parenthesized_call? ","node arguments count zero? ! ","node arguments count zero? ","node arguments count ","node arguments ","node send_type? "]}," RuboCop Cop Style OneLineConditional indentation_width":{"type":"method","name":"indentation_width","children":[],"call":["@config for_cop [] ","@config for_cop "]}," RuboCop Cop Style OneLineConditional ternary_correction":{"type":"method","name":"ternary_correction","children":[],"call":["node parent operator_method? ","node parent ","node parent send_type? ","(sym :and) include? ","node parent type "," ternary_replacement ","node parent operator_keyword? "]}," RuboCop Cop Style NumericLiterals allowed_numbers":{"type":"method","name":"allowed_numbers","children":[],"call":[" cop_config fetch map "," cop_config fetch "," cop_config "]}," RuboCop Cop Style MapToHash autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","map loc selector ","map loc ","corrector remove "," range_between ","to_h loc selector end_pos ","to_h loc selector ","to_h loc ","to_h loc dot begin_pos ","to_h loc dot "," range_with_surrounding_space "]}," RuboCop Cop Style MapToHash on_send":{"type":"method","name":"on_send","children":[],"call":[" autocorrect ","to_h_node block_node "," add_offense ","map_node loc selector ","map_node loc "," format ","map_node loc selector source "," map_to_h? "]}," RuboCop Cop Style IfInsideElse then?":{"type":"method","name":"then?","children":[],"call":["(send\n  (send\n    (lvar :node) :loc) :begin) == ","node loc begin ","node loc "]}," RuboCop Cop Style FileWrite write_method":{"type":"method","name":"write_method","children":[],"call":["mode end_with? "]}," RuboCop Cop Style FileWrite file_open_write?":{"type":"method","name":"file_open_write?","children":[],"call":["block_arg == "," block_write? "," send_write? "]}," RuboCop Cop Style FileWrite evidence":{"type":"method","name":"evidence","children":[],"call":["node parent "," file_open_write? "," file_open? "]}," RuboCop Cop Style FileWrite on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace ","content source ","filename source "," write_method "," range_between ","write_node loc expression end_pos ","write_node loc expression ","write_node loc ","node loc selector begin_pos ","node loc selector ","node loc "," add_offense "," format "," evidence "," replacement ","write_node source_range end_pos ","write_node source_range ","  range_between _between ","  replacement  ","write_node source_ range_between  end_pos ","write_node source_ range_between  "]}," RuboCop Cop Style FileRead read_method":{"type":"method","name":"read_method","children":[],"call":["mode end_with? "]}," RuboCop Cop Style FileRead file_open_read?":{"type":"method","name":"file_open_read?","children":[],"call":["block_arg == "," block_read? "," send_read? "]}," RuboCop Cop Style FileRead read_node?":{"type":"method","name":"read_node?","children":[],"call":["node parent "," file_open_read? ","block_pass any? "]}," RuboCop Cop Style FileRead evidence":{"type":"method","name":"evidence","children":[],"call":["mode_array first "," read_node? "," file_open? "]}," RuboCop Cop Style FileRead on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace ","filename source "," read_method "," range_between ","read_node loc expression end_pos ","read_node loc expression ","read_node loc ","node loc selector begin_pos ","node loc selector ","node loc "," add_offense "," format "," evidence ","read_node source_range end_pos ","read_node source_range ","  range_between _between ","read_node source_ range_between  end_pos ","read_node source_ range_between  "]}," RuboCop Cop Style EmptyCaseCondition replace_then_with_line_break":{"type":"method","name":"replace_then_with_line_break","children":[],"call":["corrector replace "," range_between ","when_node loc begin end_pos ","when_node loc begin ","when_node loc ","conditions last source_range end_pos ","conditions last source_range ","conditions last ","when_node then? ","when_node parent parent ","when_node parent ","  range_between _between ","conditions last source_ range_between  end_pos ","conditions last source_ range_between  "]}," RuboCop Cop Style CollectionCompact range":{"type":"method","name":"range","children":[],"call":[" range_between ","end_pos_node loc end end_pos ","end_pos_node loc end ","end_pos_node loc ","begin_pos_node loc selector begin_pos ","begin_pos_node loc selector ","begin_pos_node loc ","end_pos_node loc expression end_pos ","end_pos_node loc expression ","end_pos_node source_range end_pos ","end_pos_node source_range "]}," RuboCop Cop Naming BlockForwarding register_offense":{"type":"method","name":"register_offense","children":[],"call":["corrector replace "," add_offense "," format "," style "," add_parentheses ","arguments parenthesized_call? ","block_argument parent "," block_forwarding_name "," use_block_argument_as_local_variable? "," style == ","block_argument parent  parenthesized_call? "]}," RuboCop Cop Naming BlockForwarding use_block_argument_as_local_variable?":{"type":"method","name":"use_block_argument_as_local_variable?","children":[],"call":["lvar source == ","last_argument source [] ","last_argument source ","lvar source ","lvar parent block_pass_type? ! ","lvar parent block_pass_type? ","lvar parent ","node body each_descendant any? ","node body each_descendant ","node body ","node body nil? ","lvar node_parts [] to_s == ","lvar node_parts [] to_s ","lvar node_parts [] ","lvar node_parts "]}," RuboCop Cop Naming BlockForwarding explicit_block_argument?":{"type":"method","name":"explicit_block_argument?","children":[],"call":["node name nil? ! ","node name nil? ","node name ","node blockarg_type? "]}," RuboCop Cop Naming BlockForwarding anonymous_block_argument?":{"type":"method","name":"anonymous_block_argument?","children":[],"call":["node name nil? ","node name ","node blockarg_type? "]}," RuboCop Cop Naming BlockForwarding use_kwarg_in_method_definition?":{"type":"method","name":"use_kwarg_in_method_definition?","children":[],"call":["node arguments each_descendant any? ","node arguments each_descendant ","node arguments "]}," RuboCop Cop Naming BlockForwarding expected_block_forwarding_style?":{"type":"method","name":"expected_block_forwarding_style?","children":[],"call":[" anonymous_block_argument? ! "," anonymous_block_argument? "," use_block_argument_as_local_variable? "," use_kwarg_in_method_definition? "," explicit_block_argument? ! "," explicit_block_argument? "," style == "," style ","last_argument source [] ","last_argument source "]}," RuboCop Cop Naming BlockForwarding on_def":{"type":"method","name":"on_def","children":[],"call":[" register_offense ","block_pass_node children first ","block_pass_node children ","node each_descendant "," expected_block_forwarding_style? ","node arguments last ","node arguments ","node arguments empty? ","last_argument source != ","block_pass_node source ","last_argument source ","node arguments last  source != ","node arguments last  source "]}," RuboCop Cop HashShorthandSyntax without_parentheses_call_expr_follows?":{"type":"method","name":"without_parentheses_call_expr_follows?","children":[],"call":["right_sibling parenthesized? ! ","right_sibling parenthesized? ","right_sibling respond_to? ","ancestor parenthesized? ! ","ancestor parenthesized? ","ancestor respond_to? ","ancestor right_sibling ","node parent parent ","node parent "," without_parentheses? "," node_with_block_and_arguments? ","right_sibling nil? ","right_sibling ! ! ","right_sibling ! ","ancestor each_ancestor find ","ancestor each_ancestor ","node send_type? ","node assignment? ","ancestor right_sibling  parenthesized? ! ","ancestor right_sibling  parenthesized? ","ancestor right_sibling  respond_to? ","node parent parent  parenthesized? ! ","node parent parent  parenthesized? ","node parent parent  respond_to? ","ancestor ancestor right_sibling  ","node parent parent  right_sibling ","ancestor right_sibling  nil? ","ancestor right_sibling  ! ! ","ancestor right_sibling  ! ","node parent parent  each_node parent parent  find ","node parent parent  each_node parent parent  "]}," RuboCop Cop HashShorthandSyntax require_hash_value?":{"type":"method","name":"require_hash_value?","children":[],"call":["hash_key_source end_with? ","hash_key_source != ","hash_value source ","hash_value lvar_type? ","hash_value send_type? ","node value "," without_parentheses_call_expr_follows? "," require_hash_value_for_around_hash_literal? ","node key sym_type? ! ","node key sym_type? ","node key ","node value  source ","node value  lvar_type? ","node value  send_type? "," require_node value _for_around_hash_literal? "]}," RuboCop Cop HashShorthandSyntax enforced_shorthand_syntax":{"type":"method","name":"enforced_shorthand_syntax","children":[],"call":[" cop_config fetch "," cop_config "]}," RuboCop Cop HashShorthandSyntax on_pair":{"type":"method","name":"on_pair","children":[],"call":["corrector replace "," add_offense ","node value ","node value_omission? "," require_hash_value? "," enforced_shorthand_syntax == "," enforced_shorthand_syntax ","node key source ","node key "," target_ruby_version <= "," target_ruby_version "," ignore_hash_shorthand_syntax? "," register_offense "," config_to_allow_offenses= "]}," RuboCop Cop Layout SpaceBeforeFirstArg autocorrect_incompatible_with":{"type":"method","name":"autocorrect_incompatible_with","children":[],"call":[]}," RuboCop Cop Layout DotPosition autocorrect_incompatible_with":{"type":"method","name":"autocorrect_incompatible_with","children":[],"call":[]}," RuboCop Cop Layout CommentIndentation correctly_aligned_with_preceding_comment?":{"type":"method","name":"correctly_aligned_with_preceding_comment?","children":[],"call":["other_comment loc column == ","other_comment loc column ","other_comment loc "," own_line_comment? "," processed_source comments [] reverse_each "," processed_source comments [] "," processed_source comments "," processed_source "," cop_config [] "," cop_config "]}," RuboCop Cop InternalAffairs RedundantMethodDispatchNode on_send":{"type":"method","name":"on_send","children":[],"call":["corrector remove "," add_offense "," range_between ","dispatch_node loc selector end_pos ","dispatch_node loc selector ","dispatch_node loc ","dispatch_node loc dot begin_pos ","dispatch_node loc dot "," dispatch_method ","dot begin_pos ","  range_between _between "," dispatch_method  loc selector end_pos "," dispatch_method  loc selector "," dispatch_method  loc "," dispatch_method  loc dot begin_pos ","dispatch_node loc dispatch_node loc dot  begin_pos "," dispatch_method  loc dot ","dispatch_node loc dispatch_node loc dot  ","dispatch_node loc dot  begin_pos "]}," RuboCop Cop Documentation default_base_url":{"type":"method","name":"default_base_url","children":[],"call":[]}," RuboCop Cop Documentation base_url_for":{"type":"method","name":"base_url_for","children":[],"call":["config for_all_cops [] ","config for_all_cops ","config for_department [] ","config for_department ","cop_class department to_s ","cop_class department "," default_base_url "]}," RuboCop Cop IfThenCorrector branch_body_indentation":{"type":"method","name":"branch_body_indentation","children":[],"call":["(send\n  (str \" \") :*\n  (send nil :indentation)) freeze ","  * "," indentation "]}," RuboCop Cop IfThenCorrector rewrite_else_branch":{"type":"method","name":"rewrite_else_branch","children":[],"call":["(begin\n  (lvar :indentation)) chomp ","else_branch source "," branch_body_indentation "," replacement ","else_branch elsif? ","else_branch if_type? ","else_branch nil? "]}," RuboCop Cop IfThenCorrector replacement":{"type":"method","name":"replacement","children":[],"call":["if_branch + "," rewrite_else_branch ","node else_branch "," branch_body_indentation ","node condition source ","node condition ","node keyword ","node elsif? ","node respond_to? ","node if_branch ","  * ","node source_range column ","node source_range ","indentation nil? "," rewrite_ rewrite_else_branch  ","node  rewrite_else_branch  "," branch_body_  *  ","  *  nil? "]}," RuboCop Cop IfThenCorrector call":{"type":"method","name":"call","children":[],"call":["corrector replace "," replacement "," if_node "]}," RuboCop Cop IfThenCorrector initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop CLI Command ShowDocsUrl registry_hash":{"type":"method","name":"registry_hash","children":[],"call":["Cop Registry  global to_h ","Cop Registry  global "]}," RuboCop CLI Command ShowDocsUrl cops_array":{"type":"method","name":"cops_array","children":[],"call":["@options [] "]}," RuboCop CLI Command ShowDocsUrl print_documentation_url":{"type":"method","name":"print_documentation_url","children":[],"call":[" puts ","Cop Documentation  url_for ","cop first ","cop empty? "," registry_hash [] "," registry_hash "," cops_array each "," cops_array ","Cop Documentation  default_base_url "," cops_array empty? "," registry_hash []  first "," registry_hash []  empty? ","  registry_hash [] s_array each ","  registry_hash [] s_array ","  registry_hash [] s_array empty? "]}," RuboCop CLI Command ShowDocsUrl run":{"type":"method","name":"run","children":[],"call":[" print_documentation_url "]}," RuboCop CLI Command ShowDocsUrl initialize":{"type":"method","name":"initialize","children":[],"call":["@config_store for ","Dir  pwd ","@config_store for _store for "]}," RuboCop Cop Style MethodDefParentheses anonymous_block_arg?":{"type":"method","name":"anonymous_block_arg?","children":[],"call":["last_argument name nil? ","last_argument name ","last_argument blockarg_type? ","node arguments last ","node arguments ","node arguments last  name nil? ","node arguments last  name ","node arguments last  blockarg_type? "]}," RuboCop Cop Style MethodCallWithArgsParentheses OmitParentheses require_parentheses_for_hash_value_omission?":{"type":"method","name":"require_parentheses_for_hash_value_omission?","children":[],"call":["last_argument pairs last ","last_argument pairs ","last_argument hash_type? ","node right_sibling ","node last_argument ","node parent right_sibling ","node parent "," exist_next_line_expression? "," modifier_form? ","(send\n  (send\n    (lvar :last_argument) :pairs) :last) ! ","last_argument hash_type? ! "," last_expression? ! "," last_expression? ","node last_argument  pairs last ","node last_argument  pairs ","node last_argument  hash_type? ","node node right_sibling  ","node node last_argument  ","node parent node right_sibling  "," exist_node right_sibling _expression? "," exist_node parent right_sibling _expression? ","(send\n  (send\n    (lvar :node last_argument ) :pairs) :last) ! ","node last_argument  hash_type? ! "]}," RuboCop Cop Style FileWrite heredoc_range":{"type":"method","name":"heredoc_range","children":[],"call":[" range_between ","first_argument loc heredoc_end end_pos ","first_argument loc heredoc_end ","first_argument loc ","first_argument loc heredoc_body begin_pos ","first_argument loc heredoc_body "]}," RuboCop Cop Style FileWrite heredoc?":{"type":"method","name":"heredoc?","children":[],"call":["first_argument heredoc? ","first_argument respond_to? ","write_node body first_argument ","write_node body ","write_node block_type? ","write_node body first_argument  heredoc? ","write_node body first_argument  respond_to? ","write_node body write_node body first_argument  "]}," RuboCop Cop Style FileWrite replacement":{"type":"method","name":"replacement","children":[],"call":["(begin\n  (lvar :replacement)) chomp "," heredoc_range source "," heredoc_range ","write_node body first_argument ","write_node body "," heredoc? ","content source ","filename source "," write_method ","write_node body write_node body first_argument  "]}," RuboCop Cop Lint ParenthesesAsGroupedExpression ternary_expression?":{"type":"method","name":"ternary_expression?","children":[],"call":["node ternary? ","node if_type? "]}," RuboCop Cop Lint ParenthesesAsGroupedExpression valid_first_argument?":{"type":"method","name":"valid_first_argument?","children":[],"call":[" ternary_expression? ","first_arg hash_type? ","first_arg operator_keyword? "]}," RuboCop Cop Gemspec RequireMFA insert_mfa_required":{"type":"method","name":"insert_mfa_required","children":[],"call":["corrector insert_before ","node loc end ","node loc "]}," RuboCop Cop Style TernaryParentheses condition_as_parenthesized_one_line_pattern_matching?":{"type":"method","name":"condition_as_parenthesized_one_line_pattern_matching?","children":[],"call":["first_child match_pattern_type? ","first_child match_pattern_p_type? "," target_ruby_version >= "," target_ruby_version ","condition children first ","condition children ","condition parenthesized_call? ","condition children first  match_pattern_type? ","condition children first  match_pattern_p_type? "]}," RuboCop Cop Naming BlockForwarding block_forwarding_name":{"type":"method","name":"block_forwarding_name","children":[],"call":[" cop_config fetch "," cop_config "]}," RuboCop Cop HashShorthandSyntax node_with_block_and_arguments?":{"type":"method","name":"node_with_block_and_arguments?","children":[],"call":["node children ","node block_type? ","node respond_to? "]}," RuboCop Cop HashShorthandSyntax without_parentheses?":{"type":"method","name":"without_parentheses?","children":[],"call":["node parenthesized? ! ","node parenthesized? ","node respond_to? "]}," RuboCop Cop Layout ArgumentAlignment arguments_or_first_arg_pairs":{"type":"method","name":"arguments_or_first_arg_pairs","children":[],"call":["node arguments ","first_arg pairs ","first_arg braces? ! ","first_arg braces? ","first_arg hash_type? ","node first_argument ","node first_argument  pairs ","node first_argument  braces? ! ","node first_argument  braces? ","node first_argument  hash_type? ","node node first_argument ument "]}," RuboCop Cop Layout ArgumentAlignment arguments_with_last_arg_pairs":{"type":"method","name":"arguments_with_last_arg_pairs","children":[],"call":["items << ","last_arg pairs ","last_arg braces? ! ","last_arg braces? ","last_arg hash_type? ","node arguments last ","node arguments ","node arguments [] ","node arguments []  << ","node arguments last  pairs ","node arguments last  braces? ! ","node arguments last  braces? ","node arguments last  hash_type? "]}," RuboCop Cop Layout ArgumentAlignment flattened_arguments":{"type":"method","name":"flattened_arguments","children":[],"call":[" arguments_or_first_arg_pairs "," arguments_with_last_arg_pairs "," fixed_indentation? "]}," RuboCop Formatter DisabledConfigFormatter supports_unsafe_autocorrect?":{"type":"method","name":"supports_unsafe_autocorrect?","children":[],"call":["default_cfg [] == ","default_cfg [] ","default_cfg nil? ! ","default_cfg nil? "," safe_autocorrect? ! "," safe_autocorrect? "]}," RuboCop Formatter DisabledConfigFormatter supports_safe_auto_correct?":{"type":"method","name":"supports_safe_auto_correct?","children":[],"call":["default_cfg [] nil? ","default_cfg [] ","default_cfg nil? "]}," RuboCop Cop Style MethodCallWithArgsParentheses OmitParentheses exist_next_line_expression?":{"type":"method","name":"exist_next_line_expression?","children":[],"call":["node right_sibling ","node parent right_sibling ","node parent "]}," RuboCop Cop Style MethodCallWithArgsParentheses OmitParentheses modifier_form?":{"type":"method","name":"modifier_form?","children":[],"call":["node parent modifier_form? ","node parent ","node parent respond_to? "]}," RuboCop Cop HashShorthandSyntax use_modifier_form_without_parenthesized_method_call?":{"type":"method","name":"use_modifier_form_without_parenthesized_method_call?","children":[],"call":["parent modifier_form? ","parent respond_to? ","ancestor parent ","ancestor parenthesized? ","ancestor respond_to? ","node modifier_form? ","node respond_to? ","ancestor ancestors any? ","ancestor ancestors ","ancestor parent  modifier_form? ","ancestor parent  respond_to? ","ancestor ancestor parent  ","ancestor ancestor parent hesized? "]}," RuboCop Cop HashShorthandSyntax use_element_of_hash_literal_as_receiver?":{"type":"method","name":"use_element_of_hash_literal_as_receiver?","children":[],"call":["ancestor receiver == ","ancestor receiver ","ancestor send_type? "]}," RuboCop Cop HashShorthandSyntax require_hash_value_for_around_hash_literal?":{"type":"method","name":"require_hash_value_for_around_hash_literal?","children":[],"call":[" without_parentheses_call_expr_follows? "," use_modifier_form_without_parenthesized_method_call? "," use_element_of_hash_literal_as_receiver? ! "," use_element_of_hash_literal_as_receiver? ","node parent ","node parent braces? ! ","node parent braces? ","ancestor method? ","ancestor send_type? ","node parent parent "," find_ancestor_send_node "," find_ancestor_method_dispatch_node ","node parent parent  method? ","node parent parent  send_type? "," find_node parent parent _send_node "," find_ancestor_ find_ancestor_send_node  "," find_node parent parent _method_dispatch_node "," find_ancestor_ find_ancestor_method_dispatch_node  "]}," RuboCop Cop HashShorthandSyntax ignore_hash_shorthand_syntax?":{"type":"method","name":"ignore_hash_shorthand_syntax?","children":[],"call":["pair_node parent hash_type? ! ","pair_node parent hash_type? ","pair_node parent "," enforced_shorthand_syntax == "," enforced_shorthand_syntax "," target_ruby_version <= "," target_ruby_version "]}," RuboCop Cop Layout HashAlignment argument_before_hash":{"type":"method","name":"argument_before_hash","children":[],"call":["hash_node left_sibling ","hash_node left_sibling respond_to? "]}," RuboCop Cop Layout EmptyLinesAroundExceptionHandlingKeywords last_rescue_and_end_on_same_line":{"type":"method","name":"last_rescue_and_end_on_same_line","children":[],"call":["body resbody_branches last loc line == ","body parent loc end line ","body parent loc end ","body parent loc ","body parent ","body resbody_branches last loc line ","body resbody_branches last loc ","body resbody_branches last ","body resbody_branches ","body rescue_type? "]}," RuboCop Cop Style StringConcatenation heredoc?":{"type":"method","name":"heredoc?","children":[],"call":["node heredoc? ","node dstr_type? ","node str_type? "]}," RuboCop Cop Style NestedFileDirname offense_range":{"type":"method","name":"offense_range","children":[],"call":[" range_between ","node source_range end_pos ","node source_range ","node loc selector begin_pos ","node loc selector ","node loc "]}," RuboCop Cop Style NestedFileDirname path_with_dir_level":{"type":"method","name":"path_with_dir_level","children":[],"call":["first_argument source "," path_with_dir_level "," file_dirname? ","node first_argument ","node first_argument  source ","node node first_argument  "]}," RuboCop Cop Style NestedFileDirname on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace "," add_offense "," offense_range "," format ","level < "," path_with_dir_level "," file_dirname? ! "," file_dirname? ","node first_argument ","node parent "," offense_ offense_range  "]}," RuboCop Cop Style LambdaCall prefer":{"type":"method","name":"prefer","children":[],"call":[" explicit_style? ","node arguments map join ","node arguments map ","node arguments ","node receiver source ","node receiver ","node node arguments map join  map join ","node node arguments map join  map ","node node arguments map join  ","node node receiver source  source ","node node receiver source  "]}," RuboCop Cop Lint UselessTimes autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" autocorrect_block "," autocorrect_block_pass ","proc_name empty? ! ","proc_name empty? "," remove_node "," never_process? "]}," RuboCop Cop Lint InheritException exception_class?":{"type":"method","name":"exception_class?","children":[],"call":["class_node const_name == ","class_node const_name "]}," RuboCop Cop InternalAffairs RedundantContextConfigParameter offense_range":{"type":"method","name":"offense_range","children":[],"call":[" range_between ","arguments last source_range end_pos ","arguments last source_range ","arguments last ","arguments first source_range begin_pos ","arguments first source_range ","arguments first "]}," RuboCop Cop InternalAffairs RedundantContextConfigParameter on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace ","dup_arguments map join ","dup_arguments map "," offense_range ","dup_arguments delete ","arguments dup "," add_offense ","argument source == ","argument source ","arguments detect ","node arguments ","arguments dup  map join ","dup_node arguments  map join ","arguments dup  map ","dup_node arguments  map ","arguments dup  delete ","dup_node arguments  delete ","node arguments  dup ","node arguments  detect ","node node arguments  "]}," RuboCop Cop Badge camel_case":{"type":"method","name":"camel_case","children":[],"call":[]}," RuboCop Cop Style SoleNestedConditional outer_condition_modify_form?":{"type":"method","name":"outer_condition_modify_form?","children":[],"call":["node condition loc expression begin_pos > ","if_branch condition loc expression begin_pos ","if_branch condition loc expression ","if_branch condition loc ","if_branch condition ","node condition loc expression begin_pos ","node condition loc expression ","node condition loc ","node condition ","node condition source_range begin_pos > ","if_branch condition source_range begin_pos ","if_branch condition source_range ","node condition source_range begin_pos ","node condition source_range "]}," RuboCop Cop Style SoleNestedConditional replace_condition":{"type":"method","name":"replace_condition","children":[],"call":["condition source "," wrap_condition? "]}," RuboCop Cop Style SoleNestedConditional correct_for_outer_condition_modify_form_style":{"type":"method","name":"correct_for_outer_condition_modify_form_style","children":[],"call":["corrector replace ","if_branch loc keyword ","if_branch loc ","corrector remove "," range_with_surrounding_space ","node loc keyword ","node loc ","node condition loc expression ","node condition loc ","node condition ","corrector insert_before "," replace_condition ","node unless? ","if_branch condition ","node condition source_range ","node if_branch condition  loc expression ","node if_branch condition  loc ","node if_branch condition  "," replace_if_branch condition  ","if_branch if_branch condition  ","node if_branch condition  source_range "]}," RuboCop Cop Style SoleNestedConditional autocorrect_outer_condition_modify_form":{"type":"method","name":"autocorrect_outer_condition_modify_form","children":[],"call":[" correct_for_outer_condition_modify_form_style "," correct_from_unless_to_if ","if_branch unless? "]}," RuboCop Cop Style SoleNestedConditional autocorrect_outer_condition_basic":{"type":"method","name":"autocorrect_outer_condition_basic","children":[],"call":[" correct_for_comment "," correct_for_basic_condition_style "," correct_for_guard_condition_style ","if_branch modifier_form? ","if_branch unless? "," correct_from_unless_to_if ","node unless? "," correct_outer_condition ","node condition "," correct_node condition  "]}," RuboCop Cop LineLengthHelp extend_uri_end_position":{"type":"method","name":"extend_uri_end_position","children":[],"call":["match offset last ","match offset ","line [] "," line_length "]}," RuboCop Cop Style SafeNavigation max_chain_length":{"type":"method","name":"max_chain_length","children":[],"call":[" cop_config fetch "," cop_config "]}," RuboCop Cop Style SafeNavigation chain_length":{"type":"method","name":"chain_length","children":[],"call":["total + ","ancestor == ","method each_ancestor inject ","method each_ancestor "]}," RuboCop Cop Style RedundantInitialize same_args?":{"type":"method","name":"same_args?","children":[],"call":["args map == ","a children [] ","a children ","super_node arguments map ","super_node arguments ","args map ","super_node zsuper_type? "]}," RuboCop Cop Style RedundantInitialize forwards?":{"type":"method","name":"forwards?","children":[],"call":["node arguments each_child_node any? ","node arguments each_child_node ","node arguments "]}," RuboCop Cop Style RedundantInitialize on_def":{"type":"method","name":"on_def","children":[],"call":[" add_offense "," same_args? "," initialize_forwards? ","node body begin_type? ","node body ","node body nil? "," forwards? ","node method? "," register_offense "," acceptable? "]}," RuboCop Cop Style RaiseArgs use_new_method?":{"type":"method","name":"use_new_method?","children":[],"call":["first_arg method? ","first_arg receiver ","first_arg send_type? "]}," RuboCop Cop Style DoubleNegation find_parent_not_enumerable":{"type":"method","name":"find_parent_not_enumerable","children":[],"call":[" find_parent_not_enumerable ","parent array_type? ","parent hash_type? ","parent pair_type? ","node parent "," find_node parent _not_enumerable ","node parent  array_type? ","node parent  hash_type? ","node parent  pair_type? ","node node parent  "]}," RuboCop Cop Style DoubleNegation double_negative_condition_return_value?":{"type":"method","name":"double_negative_condition_return_value?","children":[],"call":["last_child last_line <= ","conditional_node last_line ","last_child last_line ","node loc line == ","parent loc last_line ","parent loc ","node loc line ","node loc ","parent begin_type? "," find_parent_not_enumerable "," find_parent_not_enumerable  loc last_line "," find_parent_not_enumerable  loc "," find_parent_not_enumerable  begin_type? "," find_ find_parent_not_enumerable _not_enumerable "]}," RuboCop Cop Style DoubleNegation find_conditional_node_from_ascendant":{"type":"method","name":"find_conditional_node_from_ascendant","children":[],"call":[" find_conditional_node_from_ascendant ","parent conditional? ","node parent ","node parent  conditional? ","node node parent  "]}," RuboCop Cop CommentsHelp find_end_line":{"type":"method","name":"find_end_line","children":[],"call":["node loc end line ","node loc end ","node loc ","parent loc end line ","parent loc end ","parent loc ","node parent ","next_sibling loc line ","next_sibling loc ","node right_sibling ","node loc else line ","node loc else ","node if_type? ","parent loc line ","node else_branch loc line ","node else_branch loc ","node else_branch ","node ternary? ","node else? ","next_sibling is_a? ","parent loc respond_to? ","node numblock_type? ","node block_type? ","node each_ancestor find loc end line ","node each_ancestor find loc end ","node each_ancestor find loc ","node each_ancestor find ","node each_ancestor ","node elsif? ","node parent  loc end line ","node parent  loc end ","node parent  loc ","node node parent  ","node right_sibling  loc line ","node right_sibling  loc ","node parent  loc line ","node right_sibling  is_a? ","node parent  loc respond_to? "]}," RuboCop Cop CommentsHelp contains_comments?":{"type":"method","name":"contains_comments?","children":[],"call":[" processed_source each_comment_in_lines any? "," processed_source each_comment_in_lines "," processed_source "," find_end_line ","node source_range line ","node source_range "," comments_in_range any? "," comments_in_range "," find_ find_end_line  "]}," RuboCop Cop Lint ShadowingOuterLocalVariable same_conditions_node_different_branch?":{"type":"method","name":"same_conditions_node_different_branch?","children":[],"call":["variable_node == ","outer_local_variable_node conditional? ","outer_local_variable scope node ","outer_local_variable scope ","variable_node conditional? ","variable scope node parent ","variable scope node ","variable scope "," find_conditional_node_from_ascendant ","outer_local_variable declaration_node ","outer_local_variable_node else_branch "," variable_node ","outer_local_variable_node if_type? "," node_or_its_ascendant_conditional? ","variable scope node parent  == "," variable_node  == ","outer_local_variable scope node  conditional? "," find_conditional_node_from_ascendant  conditional? ","outer_local_variable scope node parent  conditional? ","outer_local_ variable_node  conditional? ","variable scope node parent  conditional? "," variable_node  conditional? ","outer_local_variable scope node  else_branch "," find_conditional_node_from_ascendant  else_branch ","outer_local_variable scope node parent  else_branch ","outer_local_ variable_node  else_branch "," variable scope node parent  ","  variable_node  ","outer_local_variable scope node  if_type? "," find_conditional_node_from_ascendant  if_type? ","outer_local_variable scope node parent  if_type? ","outer_local_ variable_node  if_type? "]}," RuboCop Cop Lint RefinementImportMethods on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format ","node method_name ","node loc selector ","node loc ","node parent method? ","node parent ","node parent block_type? ","node receiver ","parent method? ","parent block_type? ","node node parent  method? ","node node parent  ","node node parent  block_type? ","node parent  method? ","node parent  block_type? "]}," RuboCop Cop AutocorrectLogic autocorrect_with_disable_uncorrectable?":{"type":"method","name":"autocorrect_with_disable_uncorrectable?","children":[],"call":[" autocorrect_enabled? "," disable_uncorrectable? "," autocorrect_requested? "]}," RuboCop Runner default_config":{"type":"method","name":"default_config","children":[],"call":["RuboCop ConfigLoader  default_configuration [] ","RuboCop ConfigLoader  default_configuration "]}," RuboCop Runner mark_as_safe_by_config?":{"type":"method","name":"mark_as_safe_by_config?","children":[],"call":["config fetch ","config nil? "]}," RuboCop Runner supports_safe_auto_correct?":{"type":"method","name":"supports_safe_auto_correct?","children":[],"call":[" mark_as_safe_by_config? ","offense correctable? "," default_config ","offense cop_name ","Cop Registry  global find_by_cop_name ","Cop Registry  global "]}," RuboCop Runner offenses_to_report":{"type":"method","name":"offenses_to_report","children":[],"call":["offenses select ","@options [] "," supports_safe_auto_correct? "," considered_failure? "," supports_safe_autocorrect? "]}," RuboCop OptionsValidator validate_display_only_failed_and_display_only_correctable":{"type":"method","name":"validate_display_only_failed_and_display_only_correctable","children":[],"call":[" raise "," format ","@options key? ! ","@options key? "]}," RuboCop OptionsValidator validate_display_only_correctable_and_auto_correct":{"type":"method","name":"validate_display_only_correctable_and_auto_correct","children":[],"call":[" raise ","@options key? ! ","@options key? "]}," RuboCop Cop Style SymbolProc allow_comments?":{"type":"method","name":"allow_comments?","children":[],"call":[" cop_config fetch "," cop_config "]}," RuboCop Cop Style SpecialGlobalVars matching_styles":{"type":"method","name":"matching_styles","children":[],"call":["(send\n  (const nil :STYLE_VARS_MAP) :map) compact ","vars values flatten include? ","vars values flatten ","vars values ","STYLE_VARS_MAP  map ","STYLE_VARS_MAP  filter_map "]}," RuboCop Cop Style SpecialGlobalVars on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[]}," RuboCop Cop Style SoleNestedConditional require_parentheses?":{"type":"method","name":"require_parentheses?","children":[],"call":["condition comparison_method? ! ","condition comparison_method? ","condition parenthesized? ! ","condition parenthesized? ","condition arguments empty? ! ","condition arguments empty? ","condition arguments ","condition send_type? ","condition call_type? "]}," RuboCop Cop Style RedundantRegexpCharacterClass multiple_codepoins?":{"type":"method","name":"multiple_codepoins?","children":[],"call":["expression codepoints count >= ","expression codepoints count ","expression codepoints ","expression respond_to? "]}," RuboCop Cop Style RedundantInitialize allow_comments?":{"type":"method","name":"allow_comments?","children":[],"call":[" contains_comments? "," cop_config [] "," cop_config "," comments_contain_disables? ! "," comments_contain_disables? "," name "]}," RuboCop Cop Style RedundantInitialize acceptable?":{"type":"method","name":"acceptable?","children":[],"call":[" allow_comments? "," forwards? ","node method? ! ","node method? "]}," RuboCop Cop Style RedundantInitialize register_offense":{"type":"method","name":"register_offense","children":[],"call":["corrector remove "," range_by_whole_lines ","node source_range "," add_offense "]}," RuboCop Cop Style ObjectThen message":{"type":"method","name":"message","children":[],"call":[" format ","node method_name "," style to_s "," style "]}," RuboCop Cop Style ObjectThen preferred_method":{"type":"method","name":"preferred_method","children":[],"call":["node method? "," style "]}," RuboCop Cop Style ObjectThen check_method_node":{"type":"method","name":"check_method_node","children":[],"call":["corrector replace "," style to_s "," style ","node loc selector ","node loc "," add_offense "," message "," preferred_method ","  message  "]}," RuboCop Cop Style ObjectThen on_send":{"type":"method","name":"on_send","children":[],"call":[" check_method_node ","node first_argument block_pass_type? ","node first_argument ","node arguments one? ","node arguments "]}," RuboCop Cop Style ObjectThen on_block":{"type":"method","name":"on_block","children":[],"call":[" check_method_node ","node send_node "]}," RuboCop Cop Style MultilineTernaryOperator enforce_single_line_ternary_operator?":{"type":"method","name":"enforce_single_line_ternary_operator?","children":[],"call":["SINGLE_LINE_TYPES  include? ","node parent type ","node parent "," use_assignment_method? ! "," use_assignment_method? "]}," RuboCop Cop Style MultilineTernaryOperator replacement":{"type":"method","name":"replacement","children":[],"call":["(str \"if \") chop ","node else_branch source ","node else_branch ","node if_branch source ","node if_branch ","node condition source ","node condition "," enforce_single_line_ternary_operator? "]}," RuboCop Cop Style IfUnlessModifier allowed_patterns":{"type":"method","name":"allowed_patterns","children":[],"call":["line_length_config [] "," config for_cop "," config "," config for_cop  [] "]}," RuboCop Cop Style GuardClause allowed_consecutive_conditionals?":{"type":"method","name":"allowed_consecutive_conditionals?","children":[],"call":[" cop_config fetch "," cop_config "]}," RuboCop Cop Style GuardClause consecutive_conditionals?":{"type":"method","name":"consecutive_conditionals?","children":[],"call":["child if_type? ","node == ","parent each_child_node inject ","parent each_child_node "]}," RuboCop Cop Style FetchEnvVar allowable_use?":{"type":"method","name":"allowable_use?","children":[],"call":[" message_chained_with_dot? "," used_as_flag? ","node parent "," assigned? "," or_lhs? "]}," RuboCop Cop Style FetchEnvVar message_chained_with_dot?":{"type":"method","name":"message_chained_with_dot?","children":[],"call":["node parent dot? ","node parent ","node parent children first == ","node parent children first ","node parent children ","node parent send_type? ","node root? ","parent safe_navigation? ","parent dot? ","parent children first != ","parent children first ","parent children ","parent call_type? ! ","parent call_type? ","node node parent  dot? ","node node parent  ","node node parent  children first == ","node node parent  children first ","node node parent  children ","node node parent  send_type? ","node parent  safe_navigation? ","node parent  dot? ","node parent  children first != ","node parent  children first ","node parent  children ","node parent  call_type? ! ","node parent  call_type? "]}," RuboCop Cop Style FetchEnvVar used_as_flag?":{"type":"method","name":"used_as_flag?","children":[],"call":["node parent prefix_bang? ","node parent ","node parent send_type? ","node parent if_type? ","node root? ","node parent comparison_method? ","(lvar :if_node) == ","node ancestors find ","node ancestors "," used_if_condition_in_body ","(lvar :node ancestors find ) == "]}," RuboCop Cop Style FetchEnvVar allowed_var?":{"type":"method","name":"allowed_var?","children":[],"call":[" cop_config [] include? ","expression value "," cop_config [] "," cop_config ","expression str_type? ","env_key_node value ","env_key_node str_type? ","node children last ","node children ","node children last  value ","node children last  str_type? "]}," RuboCop Cop Style FetchEnvVar on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace ","expression source "," add_offense "," format "," allowable_use? "," allowed_var? "," env_with_bracket? "," default_nil "," default_rhs "," default_to_rhs? "," lookahead_target_node "," operand_of_or? "," offensive? "," offensive_nodes to_a last "," offensive_nodes to_a "," offensive_nodes "," or_chain_root "," new_code ","name_node source "," lookahead_ lookahead_target_node  "," lookahead_ offensive_nodes to_a last  "]}," RuboCop Cop Security CompoundHash on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," redundant_hash? "," monuple_hash? "," contained_in_hash_method? "," outer_bad_hash_combinator? "]}," RuboCop Cop Security CompoundHash outer_bad_hash_combinator?":{"type":"method","name":"outer_bad_hash_combinator?","children":[],"call":[" bad_hash_combinator? ","node each_ancestor none? ","node each_ancestor "]}," RuboCop Cop Security CompoundHash contained_in_hash_method?":{"type":"method","name":"contained_in_hash_method?","children":[],"call":[" hash_method_definition? ","node each_ancestor any? ","node each_ancestor "]}," RuboCop Cop AllowedPattern allowed_patterns":{"type":"method","name":"allowed_patterns","children":[],"call":[" Array concat "," Array "," cop_config [] "," cop_config ","patterns concat ","deprecated_values any? "," cop_config_deprecated_methods_values "," cop_config_patterns_values "," cop_config_patterns_values + "," cop_config_deprecated_methods_values any? "," Array concat  concat "," cop_config_deprecated_methods_values  any? "," cop_config_ Array concat _values "," cop_config_ Array concat _values + "]}," RuboCop Cop AllowedPattern matches_allowed_pattern?":{"type":"method","name":"matches_allowed_pattern?","children":[],"call":["Regexp  new match? ","Regexp  new "," allowed_patterns any? "," allowed_patterns "]}," RuboCop Cop AllowedPattern allowed_line?":{"type":"method","name":"allowed_line?","children":[],"call":[" matches_allowed_pattern? ","line node source_range source_line ","line node source_range ","line node ","line respond_to? ","line source_line ","line source_line  node source_range source_line source_line  ","line source_line  node source_range ","line source_line  node ","line source_line  respond_to? ","line source_line  source_line source_line  "]}," RuboCop Cop Metrics Utils CodeLengthCalculator another_args?":{"type":"method","name":"another_args?","children":[],"call":["node arguments count > ","node arguments count ","node arguments ","node call_type? "]}," RuboCop Cop Metrics Utils CodeLengthCalculator omit_length":{"type":"method","name":"omit_length","children":[],"call":["(send\n  (send\n    (send\n      (send\n        (lvar :parent) :loc) :begin) :end_pos) :!=\n  (send\n    (send\n      (send\n        (lvar :descendant) :loc) :expression) :begin_pos)) count ","parent loc end begin_pos != ","descendant loc expression end_pos ","descendant loc expression ","descendant loc ","parent loc end begin_pos ","parent loc end ","parent loc ","parent loc begin end_pos != ","descendant loc expression begin_pos ","parent loc begin end_pos ","parent loc begin "," another_args? ","descendant parent "," parenthesized? ","(send\n  (send\n    (send\n      (send\n        (lvar :parent) :loc) :begin) :end_pos) :!=\n  (send\n    (send\n      (lvar :descendant) :source_range) :begin_pos)) count ","descendant source_range end_pos ","descendant source_range ","descendant source_range begin_pos ","(send\n  (send\n    (send\n      (send\n        (lvar :descendant parent ) :loc) :begin) :end_pos) :!=\n  (send\n    (send\n      (send\n        (lvar :descendant) :loc) :expression) :begin_pos)) count ","descendant parent  loc end begin_pos != ","descendant parent  loc end begin_pos ","descendant parent  loc end ","descendant parent  loc ","descendant parent  loc begin end_pos != ","descendant parent  loc begin end_pos ","descendant parent  loc begin ","descendant descendant parent  "," descendant parent hesized? ","(send\n  (send\n    (send\n      (send\n        (lvar :descendant parent ) :loc) :begin) :end_pos) :!=\n  (send\n    (send\n      (lvar :descendant) :source_range) :begin_pos)) count "]}," RuboCop Cop Layout MultilineMethodCallIndentation first_call_has_a_dot":{"type":"method","name":"first_call_has_a_dot","children":[],"call":["node parent ","node loc dot ","node loc ","node loc respond_to? ","node receiver ","node parent  parent ","node receiver  parent ","node parent  loc dot ","node receiver  loc dot ","node parent  loc ","node receiver  loc ","node parent  loc respond_to? ","node receiver  loc respond_to? ","node parent  receiver ","node receiver  receiver "]}," RuboCop Cop Layout MultilineMethodCallIndentation get_dot_right_above":{"type":"method","name":"get_dot_right_above","children":[],"call":["dot column == ","node loc dot column ","node loc dot ","node loc ","dot column ","dot line == ","node loc dot line - ","node loc dot line ","dot line ","a loc dot ","a loc ","a loc respond_to? ","node each_ancestor find ","node each_ancestor "]}," RuboCop Cop Layout LineLength allowed_line?":{"type":"method","name":"allowed_line?","children":[],"call":[" line_in_permitted_heredoc? ","line_index succ "," heredocs "," shebang? "," matches_allowed_pattern? "]}," RuboCop Cop Layout CaseIndentation enforced_style_end?":{"type":"method","name":"enforced_style_end?","children":[],"call":[" cop_config [] == "," cop_config [] "," style_parameter_name "," cop_config "]}," RuboCop Cop Layout CaseIndentation end_and_last_conditional_same_line?":{"type":"method","name":"end_and_last_conditional_same_line?","children":[],"call":["end_line == ","node child_nodes last loc begin ","node child_nodes last loc ","node child_nodes last ","node child_nodes ","node loc else line ","node loc else ","node loc ","node loc end "]}," RuboCop Cop Metrics Utils CodeLengthCalculator parenthesized?":{"type":"method","name":"parenthesized?","children":[],"call":["node parenthesized? ","node call_type? "]}," RuboCop Cop Style FetchEnvVar assigned?":{"type":"method","name":"assigned?","children":[],"call":["node == ","node parent ","node node parent  "]}," RuboCop Cop Style BlockDelimiters with_block?":{"type":"method","name":"with_block?","children":[],"call":["node block_node ","node respond_to? "]}," RuboCop Cop Layout SpaceBeforeBrackets dot_before_brackets?":{"type":"method","name":"dot_before_brackets?","children":[],"call":["dot end_pos == ","dot end_pos ","dot begin_pos == ","dot begin_pos ","node loc dot ","node loc ","node loc respond_to? ","node loc dot  end_pos == ","node loc dot  end_pos ","node loc dot  begin_pos == ","node loc dot  begin_pos ","node loc node loc dot  "]}," RuboCop Formatter MarkdownFormatter possible_ellipses":{"type":"method","name":"possible_ellipses","children":[],"call":["location first_line == ","location last_line ","location first_line ","location single_line? "]}," RuboCop Formatter MarkdownFormatter write_code":{"type":"method","name":"write_code","children":[],"call":[" output write "," output ","code blank? ","offense location source_line + "," possible_ellipses ","offense location ","offense location source_line ","offense location source_line +  blank? "]}," RuboCop Formatter MarkdownFormatter write_context":{"type":"method","name":"write_context","children":[],"call":[" output write ","offense message ","offense severity ","offense location line ","offense location "," output "]}," RuboCop Formatter MarkdownFormatter write_heading":{"type":"method","name":"write_heading","children":[],"call":[" output write "," output "," pluralize ","file offenses count ","file offenses "," relative_path ","file path "]}," RuboCop Formatter MarkdownFormatter write_file_messages":{"type":"method","name":"write_file_messages","children":[],"call":[" write_code "," write_context ","file offenses each ","file offenses "," write_heading "," files each "," files ","file offenses empty? "]}," RuboCop Formatter MarkdownFormatter render_markdown":{"type":"method","name":"render_markdown","children":[],"call":[" write_file_messages "," output write "," output "," pluralize "," summary offense_count "," summary "," summary inspected_files count "," summary inspected_files "]}," RuboCop Formatter MarkdownFormatter finished":{"type":"method","name":"finished","children":[],"call":[" render_markdown "," summary inspected_files= "," summary "]}," RuboCop Formatter MarkdownFormatter file_finished":{"type":"method","name":"file_finished","children":[],"call":["offenses count "," summary offense_count "," summary "," files << ","Struct  new new ","Struct  new "," files "]}," RuboCop Formatter MarkdownFormatter started":{"type":"method","name":"started","children":[],"call":[" summary target_files= "," summary "]}," RuboCop Formatter MarkdownFormatter initialize":{"type":"method","name":"initialize","children":[],"call":["Struct  new new ","Struct  new "]}," RuboCop Cop Style RedundantCondition else_source_if_has_assignment":{"type":"method","name":"else_source_if_has_assignment","children":[],"call":["else_branch expression source ","else_branch expression "," require_parentheses? "," require_braces? "]}," RuboCop Cop Style RedundantCondition else_source_if_has_method":{"type":"method","name":"else_source_if_has_method","children":[],"call":["else_branch first_argument source ","else_branch first_argument "," require_parentheses? "," require_braces? "]}," RuboCop Cop Style RedundantCondition branches_have_method?":{"type":"method","name":"branches_have_method?","children":[],"call":["if_branch method? ","else_branch method_name ","else_branch arguments count == ","else_branch arguments count ","else_branch arguments ","else_branch send_type? ","if_branch arguments count == ","if_branch arguments count ","if_branch arguments ","if_branch send_type? "," same_method? "," single_argument_method? "]}," RuboCop Cop Style RedundantCondition asgn_type?":{"type":"method","name":"asgn_type?","children":[],"call":["node gvasgn_type? ","node cvasgn_type? ","node ivasgn_type? ","node lvasgn_type? "]}," RuboCop Cop Style RedundantCondition branches_have_assignment?":{"type":"method","name":"branches_have_assignment?","children":[],"call":["if_branch_variable_name == ","else_branch name "," asgn_type? ","if_branch name ","if_branch name  == "]}," RuboCop Cop Style RedundantCondition synonymous_condition_and_branch?":{"type":"method","name":"synonymous_condition_and_branch?","children":[],"call":["condition == ","if_branch first_argument "," branches_have_method? ","if_branch expression "," branches_have_assignment? "," use_hash_key_access? ! "," use_hash_key_access? "]}," RuboCop Cop Style MultilineTernaryOperator use_assignment_method?":{"type":"method","name":"use_assignment_method?","children":[],"call":["node assignment_method? ","node send_type? "]}," RuboCop Cop Style FetchEnvVar first_line_of":{"type":"method","name":"first_line_of","children":[],"call":["source split first ","source split "]}," RuboCop Cop Style FetchEnvVar configured_indentation":{"type":"method","name":"configured_indentation","children":[],"call":["  * "," config for_cop [] "," config for_cop "," config "]}," RuboCop Cop Style FetchEnvVar message_template_for":{"type":"method","name":"message_template_for","children":[],"call":["rhs basic_literal? ","rhs multiline? "]}," RuboCop Cop Style FetchEnvVar default_rhs_in_outer_or":{"type":"method","name":"default_rhs_in_outer_or","children":[],"call":["corrector replace "," new_code_default_rhs ","parent lhs source ","parent lhs "," add_offense "," format "," first_line_of ","grand_parent rhs source ","grand_parent rhs ","expression source "," message_template_for ","parent parent ","node parent ","name_node source ","node parent  lhs source ","node parent  lhs ","parent parent  rhs source ","grand_node parent  rhs source ","parent parent  rhs ","grand_node parent  rhs ","  format _template_for "," message_ message_template_for _for ","node parent  node parent  ","node node parent  "]}," RuboCop Cop Style FetchEnvVar default_rhs_in_same_or":{"type":"method","name":"default_rhs_in_same_or","children":[],"call":["corrector replace "," new_code_default_rhs ","node parent "," add_offense "," format "," first_line_of ","node parent rhs source ","node parent rhs ","expression source "," message_template_for ","name_node source ","  format _template_for "," message_ message_template_for _for "]}," RuboCop Cop Style FetchEnvVar default_nil":{"type":"method","name":"default_nil","children":[],"call":["corrector replace "," new_code_default_nil "," add_offense "," format ","expression source ","name_node source "]}," RuboCop Cop Style FetchEnvVar default_rhs":{"type":"method","name":"default_rhs","children":[],"call":[" default_rhs_in_outer_or "," default_rhs_in_same_or "," left_end_of_or_chains? "]}," RuboCop Cop Style FetchEnvVar new_code_default_rhs":{"type":"method","name":"new_code_default_rhs","children":[],"call":[" new_code_default_rhs_multiline "," new_code_default_rhs_single_line ","node parent rhs single_line? ","node parent rhs ","node parent "]}," RuboCop Cop Style FetchEnvVar new_code_default_rhs_multiline":{"type":"method","name":"new_code_default_rhs_multiline","children":[],"call":["(str \"ENV.fetch(\") chomp "," configured_indentation ","expression source ","(send\n  (send\n    (send\n      (send\n        (send\n          (lvar :node) :parent) :rhs) :source) :split\n    (str \"\\n\")) :map) join ","node parent rhs source split map ","node parent rhs source split ","node parent rhs source ","node parent rhs ","node parent "," indent ","name_node source "]}," RuboCop Cop Style FetchEnvVar new_code_default_rhs_single_line":{"type":"method","name":"new_code_default_rhs_single_line","children":[],"call":["parent rhs source ","parent rhs ","expression source ","parent rhs basic_literal? ","node parent ","name_node source ","node parent  rhs source ","node parent  rhs ","node parent  rhs basic_literal? ","node node parent  "]}," RuboCop Cop Style FetchEnvVar new_code_default_nil":{"type":"method","name":"new_code_default_nil","children":[],"call":["expression source ","name_node source "]}," RuboCop Cop Style FetchEnvVar rhs_is_block_control?":{"type":"method","name":"rhs_is_block_control?","children":[],"call":[" block_control? "," conterpart_rhs_of "]}," RuboCop Cop Style FetchEnvVar rhs_can_be_default_value?":{"type":"method","name":"rhs_can_be_default_value?","children":[],"call":[" rhs_is_block_control? ! "," rhs_is_block_control? "]}," RuboCop Cop Style FetchEnvVar lookahead_target_node":{"type":"method","name":"lookahead_target_node","children":[],"call":[" lookahead_target_node "," offensive? "," env_with_bracket? ","counterpart_rhs each_descendant find ","counterpart_rhs each_descendant "," no_env_with_bracket_in_descendants? "," conterpart_rhs_of "," right_end_of_or_chains? "," rightmost_offense_in_or_chains "," operand_of_or? "," conterpart_rhs_of  each_descendant find "," conterpart_rhs_of  each_descendant "]}," RuboCop Cop Style FetchEnvVar conterpart_rhs_of":{"type":"method","name":"conterpart_rhs_of","children":[],"call":["node parent parent rhs ","node parent parent ","node parent ","node parent rhs "," left_end_of_or_chains? "]}," RuboCop Cop Style FetchEnvVar no_env_with_bracket_in_descendants?":{"type":"method","name":"no_env_with_bracket_in_descendants?","children":[],"call":[" env_with_bracket_in_descendants? ! "," env_with_bracket_in_descendants? "]}," RuboCop Cop Style FetchEnvVar rightmost_offense_in_or_chains":{"type":"method","name":"rightmost_offense_in_or_chains","children":[],"call":["or_node rhs "," env_with_bracket? ","n rhs ","or_nodes reverse find ","or_nodes reverse ","or_nodes << ","or_nodes last ","base_node parent "]}," RuboCop Cop Style FetchEnvVar right_end_of_or_chains?":{"type":"method","name":"right_end_of_or_chains?","children":[],"call":["(or\n  (send nil :left_end_of_or_chains?\n    (lvar :node))\n  (csend\n    (csend\n      (send\n        (lvar :node) :parent) :parent) :or_type?)) ! ","node parent "," left_end_of_or_chains? "]}," RuboCop Cop Style FetchEnvVar left_end_of_or_chains?":{"type":"method","name":"left_end_of_or_chains?","children":[],"call":["node parent lhs == ","node parent lhs ","node parent "," operand_of_or? "]}," RuboCop Cop Style FetchEnvVar default_to_rhs?":{"type":"method","name":"default_to_rhs?","children":[],"call":[" rhs_can_be_default_value? "," right_end_of_or_chains? ! "," right_end_of_or_chains? "," operand_of_or? "]}," RuboCop Cop Style FetchEnvVar offensive?":{"type":"method","name":"offensive?","children":[],"call":["(or\n  (send nil :allowed_var?\n    (lvar :node))\n  (send nil :allowable_use?\n    (lvar :node))) ! "," allowable_use? "," allowed_var? "]}," RuboCop Cop Style EnvHome on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace "," add_offense ","node arguments [] nil_type? ! ","node arguments [] nil_type? ","node arguments [] ","node arguments ","node arguments count == ","node arguments count "," env_home? "]}," RuboCop Cop Style DoubleNegation define_mehod?":{"type":"method","name":"define_mehod?","children":[],"call":["child method? ","child send_type? ","node child_nodes first ","node child_nodes ","node block_type? ","node child_nodes first  method? ","node child_nodes first  send_type? ","node node child_nodes first _nodes first ","node node child_nodes first _nodes "]}," RuboCop Cop Naming VariableNumber valid_name?":{"type":"method","name":"valid_name?","children":[],"call":[" matches_allowed_pattern? "]}," RuboCop Cop Naming VariableName valid_name?":{"type":"method","name":"valid_name?","children":[],"call":[" matches_allowed_pattern? "]}," RuboCop Cop InternalAffairs MethodNameEndWith range":{"type":"method","name":"range","children":[],"call":[" range_between ","node source_range end_pos ","node source_range ","range begin_pos ","method_name_node source_range ","method_name_node loc selector ","method_name_node loc ","method_name_node call_type? "," method_name_node source_range _between "," method_name_node loc selector _between ","node source_method_name_node source_range  end_pos ","node source_method_name_node loc selector  end_pos ","node source_method_name_node source_range  ","node source_method_name_node loc selector  ","method_name_node source_range  begin_pos ","method_name_node loc selector  begin_pos ","method_name_node source_method_name_node source_range  ","method_name_node source_method_name_node loc selector  "]}," RuboCop Cop InternalAffairs MethodNameEndWith on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," format ","range source ","SUGGEST_METHOD_FOR_SUFFIX  [] ","end_with_arg value "," range "," method_name_end_with? "," range  source ","  range  "]}," RuboCop Cop Gemspec DependencyVersion version_specification?":{"type":"method","name":"version_specification?","children":[],"call":["expression match? "]}," RuboCop Cop Gemspec DependencyVersion required_style?":{"type":"method","name":"required_style?","children":[],"call":[" style == "," style "]}," RuboCop Cop Gemspec DependencyVersion forbidden_style?":{"type":"method","name":"forbidden_style?","children":[],"call":[" style == "," style "]}," RuboCop Cop Gemspec DependencyVersion forbidden_offense?":{"type":"method","name":"forbidden_offense?","children":[],"call":[" includes_commit_reference? "," includes_version_specification? "," forbidden_style? "]}," RuboCop Cop Gemspec DependencyVersion required_offense?":{"type":"method","name":"required_offense?","children":[],"call":[" includes_commit_reference? ! "," includes_commit_reference? "," includes_version_specification? ! "," includes_version_specification? "," required_style? "]}," RuboCop Cop Gemspec DependencyVersion offense?":{"type":"method","name":"offense?","children":[],"call":[" forbidden_offense? "," required_offense? "]}," RuboCop Cop Gemspec DependencyVersion add_dependency_method_nodes":{"type":"method","name":"add_dependency_method_nodes","children":[],"call":[" add_dependency_method_declarations "," processed_source ast "," processed_source "]}," RuboCop Cop Gemspec DependencyVersion add_dependency_method?":{"type":"method","name":"add_dependency_method?","children":[],"call":["method_name to_s end_with? ","method_name to_s ","ADD_DEPENDENCY_METHODS  include? "]}," RuboCop Cop Gemspec DependencyVersion match_block_variable_name?":{"type":"method","name":"match_block_variable_name?","children":[],"call":["block_variable_name == "," gem_specification "," processed_source ast "," processed_source "]}," RuboCop Cop Gemspec DependencyVersion message":{"type":"method","name":"message","children":[],"call":[" format "," forbidden_style? "," required_style? ","range source "]}," RuboCop Cop Gemspec DependencyVersion allowed_gems":{"type":"method","name":"allowed_gems","children":[],"call":[" Array "," cop_config [] "," cop_config "]}," RuboCop Cop Gemspec DependencyVersion allowed_gem?":{"type":"method","name":"allowed_gem?","children":[],"call":[" allowed_gems include? ","node first_argument value ","node first_argument "," allowed_gems ","node first_argument str_content "]}," RuboCop Cop Gemspec DependencyVersion on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[" correct_style_detected "," opposite_style_detected "," add_offense "," offense? "," allowed_gem? "," add_dependency_method_nodes each "," add_dependency_method_nodes "," processed_source blank? "," processed_source "]}," RuboCop Cop Style RedundantCondition require_braces?":{"type":"method","name":"require_braces?","children":[],"call":["node braces? ! ","node braces? ","node hash_type? "]}," RuboCop Cop Style RedundantCondition if_source":{"type":"method","name":"if_source","children":[],"call":["if_branch source ","if_branch source delete_suffix ","if_branch parenthesized? "," branches_have_method? ","if_branch parent ","if_branch method_name ","if_branch receiver source ","if_branch receiver ","if_branch first_argument source ","if_branch first_argument "]}," RuboCop Cop Style RedundantCondition use_hash_key_access?":{"type":"method","name":"use_hash_key_access?","children":[],"call":["node method? ","node send_type? "]}," RuboCop Cop Style RedundantCondition redudant_condition?":{"type":"method","name":"redudant_condition?","children":[],"call":["node else_branch ! ","node else_branch ","node modifier_form? "]}," RuboCop Cop Naming VariableNumber allowed_identifiers":{"type":"method","name":"allowed_identifiers","children":[],"call":[" cop_config fetch "," cop_config "]}," RuboCop Cop Naming VariableNumber allowed_identifier?":{"type":"method","name":"allowed_identifier?","children":[],"call":[" allowed_identifiers include? ","name to_s "," allowed_identifiers ","name to_s delete "]}," RuboCop Cop Lint Debugger debugger_receiver?":{"type":"method","name":"debugger_receiver?","children":[],"call":[" cop_config fetch include? ","receiver to_s "," cop_config fetch "," cop_config ","node receiver const_name ","node receiver ","node receiver method_name "]}," RuboCop Cop Layout LineLength correctable?":{"type":"method","name":"correctable?","children":[],"call":[" breakable_range nil? ! "," breakable_range nil? "," breakable_range "]}," RuboCop TargetRuby GemspecFile find_default_minimal_known_ruby":{"type":"method","name":"find_default_minimal_known_ruby","children":[],"call":["requirement satisfied_by? ","Gem Version  new ","v >= ","KNOWN_RUBIES  detect ","Gem Requirement  new "," version_from_right_hand_side ","Gem Requirement  new  satisfied_by? ","  version_from_right_hand_side _from_right_hand_side "]}," RuboCop OptionsValidator invalid_arguments_for_parallel":{"type":"method","name":"invalid_arguments_for_parallel","children":[],"call":["(begin\n  (if\n    (send\n      (ivar :@options) :key?\n      (sym :auto_gen_config))\n    (str \"--auto-gen-config\") nil)) compact ","@options > ","@options key? ","@options [] "]}," RuboCop OptionsValidator validate_autocorrect":{"type":"method","name":"validate_autocorrect","children":[],"call":[" raise "," format ","@options key? "," Rainbow red "," Rainbow "]}," RuboCop OptionsValidator validate_display_only_correctable_and_autocorrect":{"type":"method","name":"validate_display_only_correctable_and_autocorrect","children":[],"call":[" raise ","@options key? ! ","@options key? "]}," RuboCop Options handle_deprecated_option":{"type":"method","name":"handle_deprecated_option","children":[],"call":["@options []= ","@options delete "," long_opt_symbol "," warn "," rainbow wrap yellow "," rainbow wrap "," rainbow "]}," RuboCop MagicComment SimpleComment extract_typed":{"type":"method","name":"extract_typed","children":[],"call":[" extract ","KEYWORDS  [] "]}," RuboCop MagicComment VimComment extract_typed":{"type":"method","name":"extract_typed","children":[],"call":[]}," RuboCop MagicComment EmacsComment extract_typed":{"type":"method","name":"extract_typed","children":[],"call":[]}," RuboCop MagicComment typed":{"type":"method","name":"typed","children":[],"call":[" extract_typed "]}," RuboCop MagicComment typed_specified?":{"type":"method","name":"typed_specified?","children":[],"call":[" specified? "," extract_typed "]}," RuboCop Cop Style SoleNestedConditional insert_bang_for_and":{"type":"method","name":"insert_bang_for_and","children":[],"call":["corrector insert_before "," insert_bang_for_and ","lhs and_type? "]}," RuboCop Cop Style SoleNestedConditional insert_bang":{"type":"method","name":"insert_bang","children":[],"call":["corrector insert_before "," insert_bang_for_and ","condition and_type? ","corrector wrap ","node condition "," wrap_condition? ","condition parenthesized? ! ","condition parenthesized? ","condition comparison_method? ","condition send_type? ","node condition  and_type? ","node node condition  "," wrap_node condition ? ","node condition  parenthesized? ! ","node condition  parenthesized? ","node condition  comparison_method? ","node condition  send_type? "]}," RuboCop Cop Style RescueStandardError offense_for_explicit_enforced_style":{"type":"method","name":"offense_for_explicit_enforced_style","children":[],"call":["corrector insert_after ","node loc keyword ","node loc "," add_offense "]}," RuboCop Cop Style RedundantCondition same_method?":{"type":"method","name":"same_method?","children":[],"call":["if_branch receiver == ","else_branch receiver ","if_branch receiver ","if_branch method? ","else_branch method_name "]}," RuboCop Cop Style RedundantCondition redundant_condition?":{"type":"method","name":"redundant_condition?","children":[],"call":["node else_branch ! ","node else_branch ","node modifier_form? "]}," RuboCop Cop Style RedundantBegin allowable_kwbegin?":{"type":"method","name":"allowable_kwbegin?","children":[],"call":[" valid_context_using_only_begin? "," contain_rescue_or_ensure? "," begin_block_has_multiline_statements? "," empty_begin? "]}," RuboCop Cop Style MapCompactWithConditionalBlock range":{"type":"method","name":"range","children":[],"call":["Parser Source Range  new ","node loc expression end_pos ","node loc expression ","node loc ","map_node loc selector begin_pos ","map_node loc selector ","map_node loc ","node receiver send_node ","node receiver ","node loc expression source_buffer ","node source_range end_pos ","node source_range ","node source_range source_buffer ","node loc expression node loc expression end_pos  ","node loc expression node source_range end_pos  ","map_node loc selector map_node loc selector begin_pos  ","node receiver send_node  loc selector begin_pos ","node receiver send_node  loc selector ","node receiver send_node  loc ","node loc expression source_node loc expression source_buffer  ","node loc expression source_node source_range source_buffer  ","node source_range node loc expression end_pos  ","node source_range node source_range end_pos  ","node source_range source_node loc expression source_buffer  ","node source_range source_node source_range source_buffer  "]}," RuboCop Cop Style MapCompactWithConditionalBlock truthy_branch_for_guard?":{"type":"method","name":"truthy_branch_for_guard?","children":[],"call":["if_node if_branch nil? ","if_node if_branch ","if_node unless? ","if_node else_branch nil? ","if_node else_branch ","if_node ternary? ","if_node if? ","node left_sibling ","node left_sibling  if_branch nil? ","node left_sibling  if_branch ","node left_sibling  unless? ","node left_sibling  else_branch nil? ","node left_sibling  else_branch ","node left_sibling  ternary? ","node left_sibling  if? "]}," RuboCop Cop Style MapCompactWithConditionalBlock truthy_branch_for_if?":{"type":"method","name":"truthy_branch_for_if?","children":[],"call":["if_node else_branch == ","if_node else_branch ","if_node unless? ","if_node if_branch == ","if_node if_branch ","if_node ternary? ","if_node if? ","node parent ","node parent  else_branch == ","node parent  else_branch ","node parent  unless? ","node parent  if_branch == ","node parent  if_branch ","node parent  ternary? ","node parent  if? "]}," RuboCop Cop Style MapCompactWithConditionalBlock truthy_branch?":{"type":"method","name":"truthy_branch?","children":[],"call":[" truthy_branch_for_if? ","node parent ","node parent next_type? "," truthy_branch_for_guard? ","node parent begin_type? "]}," RuboCop Cop Style MapCompactWithConditionalBlock returns_block_argument?":{"type":"method","name":"returns_block_argument?","children":[],"call":["block_argument_node name == ","return_value_node children first ","return_value_node children ","block_argument_node name "]}," RuboCop Cop Style MapCompactWithConditionalBlock on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace ","condition_node source ","block_argument_node source "," add_offense "," format "," range "," truthy_branch? ","condition_node parent elsif? ","condition_node parent "," returns_block_argument? "," map_and_compact? ","  range  "]}," RuboCop Cop Style FetchEnvVar or_chain_root":{"type":"method","name":"or_chain_root","children":[],"call":["ancestor_or parent "," operand_of_or? ","node parent ","ancestor_or parent  parent "]}," RuboCop Cop Style FetchEnvVar used_in_condition?":{"type":"method","name":"used_in_condition?","children":[],"call":["condition child_nodes any? ","condition child_nodes ","condition predicate_method? ! ","condition predicate_method? ","condition comparison_method? ! ","condition comparison_method? ","condition send_type? "," partial_matched? ","condition assignment_method? "]}," RuboCop Cop Style FetchEnvVar used_if_condition_in_body":{"type":"method","name":"used_if_condition_in_body","children":[],"call":[" used_in_condition? ","condition child_nodes == ","node child_nodes ","condition child_nodes ","condition send_type? ","node ancestors find ","node ancestors "]}," RuboCop Cop HashShorthandSyntax register_offense":{"type":"method","name":"register_offense","children":[],"call":["corrector replace "," add_offense ","node value ","corrector insert_after ","def_node arguments last ","def_node arguments "," range_between ","def_node first_argument source_range begin_pos ","def_node first_argument source_range ","def_node first_argument ","def_node loc selector end_pos ","def_node loc selector ","def_node loc "," def_node_that_require_parentheses ","node == ","last_argument pairs last ","last_argument pairs ","def_node selector end_pos ","def_node selector ","last_argument hash_type? ! ","last_argument hash_type? ","last_argument nil? ","def_node last_argument "," def_node_that_require_parentheses  arguments last "," def_node_that_require_parentheses  arguments "," def_node_that_require_parentheses  first_argument source_range begin_pos "," def_node_that_require_parentheses  first_argument source_range "," def_node_that_require_parentheses  first_argument "," def_node_that_require_parentheses  loc selector end_pos "," def_node_that_require_parentheses  loc selector "," def_node_that_require_parentheses  loc ","  def_node_that_require_parentheses _that_require_parentheses ","def_node arguments last  pairs last ","def_node last_argument  pairs last ","def_node arguments last  pairs ","def_node last_argument  pairs "," def_node_that_require_parentheses  selector end_pos "," def_node_that_require_parentheses  selector ","def_node arguments last  hash_type? ! ","def_node last_argument  hash_type? ! ","def_node arguments last  hash_type? ","def_node last_argument  hash_type? ","def_node arguments last  nil? ","def_node last_argument  nil? "," def_node_that_require_parentheses  last_argument ","def_node def_node arguments last  ","def_node def_node last_argument  "]}," RuboCop Cop Layout ArgumentAlignment hash_argument_config":{"type":"method","name":"hash_argument_config","children":[],"call":[" config for_cop "," config "]}," RuboCop Cop Layout ArgumentAlignment enforce_hash_argument_with_separator?":{"type":"method","name":"enforce_hash_argument_with_separator?","children":[],"call":[" hash_argument_config [] == "," hash_argument_config [] "," hash_argument_config ","RuboCop Cop Layout HashAlignment SEPARATOR_ALIGNMENT_STYLES  any? "]}," RuboCop Cop Layout ArgumentAlignment with_first_argument_style?":{"type":"method","name":"with_first_argument_style?","children":[],"call":[" cop_config [] == "," cop_config [] "," cop_config "]}," RuboCop Cop Layout ArgumentAlignment autocorrect_incompatible_with_other_cops?":{"type":"method","name":"autocorrect_incompatible_with_other_cops?","children":[],"call":[" enforce_hash_argument_with_separator? "," with_first_argument_style? "]}," RuboCop Cop InternalAffairs CopDescription relevant_file?":{"type":"method","name":"relevant_file?","children":[],"call":["file match? "]}," RuboCop Cop InternalAffairs CopDescription comment_index":{"type":"method","name":"comment_index","children":[],"call":["node loc expression source index ","node loc expression source ","node loc expression ","node loc "," comment_body ","node source index ","node source "," comment_ comment_body  "]}," RuboCop Cop InternalAffairs CopDescription comment_body":{"type":"method","name":"comment_body","children":[],"call":["comment_line gsub "]}," RuboCop Cop InternalAffairs CopDescription first_comment_line":{"type":"method","name":"first_comment_line","children":[],"call":[" comment_line? ","node loc expression source lines find ","node loc expression source lines ","node loc expression source ","node loc expression ","node loc ","node source lines find ","node source lines ","node source "]}," RuboCop Cop InternalAffairs CopDescription suggestion_for_message":{"type":"method","name":"suggestion_for_message","children":[],"call":["match_data [] ! ","match_data [] "]}," RuboCop Cop InternalAffairs CopDescription range":{"type":"method","name":"range","children":[],"call":["Parser Source Range  new ","begin_pos + "," comment_body length "," comment_body "," comment_index ","node loc expression begin_pos ","node loc expression ","node loc ","node loc expression source_buffer ","node source_range begin_pos ","node source_range ","node source_range source_buffer ","node loc expression begin_pos  + ","node source_range begin_pos  + ","node loc expression node loc expression begin_pos  ","node loc expression node source_range begin_pos  ","node loc expression node loc expression source_buffer  ","node loc expression node source_range source_buffer  ","node source_range node loc expression begin_pos  ","node source_range node source_range begin_pos  ","node source_range node loc expression source_buffer  ","node source_range node source_range source_buffer  "]}," RuboCop Cop InternalAffairs CopDescription replace_with_suggestion":{"type":"method","name":"replace_with_suggestion","children":[],"call":["corrector replace ","description_beginning gsub "]}," RuboCop Cop InternalAffairs CopDescription on_class":{"type":"method","name":"on_class","children":[],"call":[" replace_with_suggestion ","start_with_subject [] ! ","start_with_subject [] "," add_offense "," format "," suggestion_for_message "," range ","description_beginning match "," first_comment_line ","node parent ","node parent_class "," register_offense_for_wrong_word "," register_offense_for_empty_comment_line ","description_beginning match? ","description_beginning match  [] ! ","description_beginning match  [] "," suggestion_for_ format  ","  suggestion_for_message  ","  range  "," first_comment_line  match "," first_comment_line  match? "]}," RuboCop Cop Gemspec DeprecatedAttributeAssignment use_test_files?":{"type":"method","name":"use_test_files?","children":[],"call":["node method? ","(send\n  (lvar :node) :receiver) == ","node receiver ","node send_type? ","node op_asgn_type? "]}," RuboCop Cop Gemspec DeprecatedAttributeAssignment on_block":{"type":"method","name":"on_block","children":[],"call":["corrector remove "," range_by_whole_lines ","date_assignment source_range "," add_offense "," use_test_files? ","block_node descendants detect ","block_node descendants ","block_node arguments first source ","block_node arguments first ","block_node arguments "," gem_specification ","assignment source_range "," format_message_from "," use_deprecated_attributes? ","  range_by_whole_lines _by_whole_lines ","date_assignment source_ range_by_whole_lines  ","assignment source_ range_by_whole_lines  "," format_ format_message_from _from "]}," RuboCop Cop LineBreakCorrector trailing_class_definition?":{"type":"method","name":"trailing_class_definition?","children":[],"call":["token column < ","body loc column ","body loc ","token column "]}," RuboCop ConfigValidator list_unknown_cops":{"type":"method","name":"list_unknown_cops","children":[],"call":["unknown_cops << ","(str \"unrecognized cop or department \") rstrip "," suggestion "," smart_loaded_path ","name == ","Cop Registry  global contains_cop_matching? ","Cop Registry  global ","invalid_cop_names each "]}," RuboCop CLI Command AutoGenerateConfig options_config_in_root?":{"type":"method","name":"options_config_in_root?","children":[],"call":["File  dirname == ","File  dirname ","@options [] "]}," RuboCop CLI Command AutoGenerateConfig relative_path_to_todo_from_options_config":{"type":"method","name":"relative_path_to_todo_from_options_config","children":[],"call":["base relative_path_from ","Pathname  new ","File  dirname ","@options [] "," options_config_in_root? ","@options [] ! ","Pathname  new  relative_path_from "]}," RuboCop Runner supports_safe_autocorrect?":{"type":"method","name":"supports_safe_autocorrect?","children":[],"call":[" mark_as_safe_by_config? ","offense correctable? "," default_config ","offense cop_name ","Cop Registry  global find_by_cop_name ","Cop Registry  global "]}," RuboCop Formatter DisabledConfigFormatter safe_autocorrect?":{"type":"method","name":"safe_autocorrect?","children":[],"call":["config fetch "]}," RuboCop Formatter DisabledConfigFormatter supports_safe_autocorrect?":{"type":"method","name":"supports_safe_autocorrect?","children":[],"call":[" safe_autocorrect? ","default_cfg nil? "]}," CopsDocumentationGenerator check_examples_to_have_the_default_enforced_style!":{"type":"method","name":"check_examples_to_have_the_default_enforced_style!","children":[],"call":[" raise ","cop cop_name ","name match? ","examples_describing_enforced_style any? ","(send\n  (lvar :examples_describing_enforced_style) :index) nonzero? ","examples_describing_enforced_style index ","examples_describing_enforced_style none? ","examples_object map grep ","examples_object map ","examples_object none? ","examples_object map grep  any? ","(send\n  (lvar :examples_object map grep ) :index) nonzero? ","examples_object map grep  index ","examples_object map grep  none? "]}," RuboCop Cop Style StringConcatenation mode":{"type":"method","name":"mode","children":[],"call":[" cop_config [] to_sym "," cop_config [] "," cop_config "]}," RuboCop Cop Style FetchEnvVar partial_matched?":{"type":"method","name":"partial_matched?","children":[],"call":["node child_nodes == ","node child_nodes & ","condition child_nodes ","node child_nodes "]}," RuboCop Server wait_for_running_status!":{"type":"method","name":"wait_for_running_status!","children":[],"call":[" exit "," warn ","Time  now - > ","Time  now - ","Time  now "," sleep ","Server  running? != ","Server  running? "]}," RuboCop Server running?":{"type":"method","name":"running?","children":[],"call":["Cache  pid_running? ","Cache  pid_path file? ","Cache  pid_path ","Cache  dir exist? ","Cache  dir "," support_server? "]}," RuboCop Server support_server?":{"type":"method","name":"support_server?","children":[],"call":["RuboCop Platform  windows? ! ","RuboCop Platform  windows? ","RUBY_ENGINE  == "]}," RuboCop Server SocketReader find_command_class":{"type":"method","name":"find_command_class","children":[],"call":[" raise ","command inspect "]}," RuboCop Server SocketReader create_command_instance":{"type":"method","name":"create_command_instance","children":[],"call":["klass new ","request header cwd ","request header ","request header token ","request header args "," find_command_class ","request header command "," find_command_class  new "]}," RuboCop Server SocketReader parse_header":{"type":"method","name":"parse_header","children":[],"call":["Header  new ","header shellsplit "]}," RuboCop Server SocketReader parse_request":{"type":"method","name":"parse_request","children":[],"call":["Request  new ","body join "," parse_header ","content lines "]}," RuboCop Server SocketReader read!":{"type":"method","name":"read!","children":[],"call":[" create_command_instance run "," create_command_instance ","Helper  redirect ","StringIO  new ","request body "," parse_request ","@socket read ","@socket close ","Cache  stderr_path write ","stderr string ","Cache  stderr_path "," parse_request  body "," parse_ parse_request  ","Cache  StringIO  new _path write ","StringIO  new  string ","Cache  StringIO  new _path "]}," RuboCop Server SocketReader initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop Server ServerCommand Stop run":{"type":"method","name":"run","children":[],"call":[" raise "]}," RuboCop Server ServerCommand Exec run":{"type":"method","name":"run","children":[],"call":["Cache  write_status_file ","RuboCop CLI  new run ","RuboCop CLI  new ","@args unshift ","@args include? ","(str \"--color\") any? ","Cache  status_path delete ","Cache  status_path ","Cache  status_path file? ","Cache  write_RuboCop CLI  new run _file ","Cache  RuboCop CLI  new run _path delete ","Cache  RuboCop CLI  new run _path ","Cache  RuboCop CLI  new run _path file? "]}," RuboCop Server ServerCommand Base validate_token!":{"type":"method","name":"validate_token!","children":[],"call":[" raise ","Cache  token_path read == ","Cache  token_path read ","Cache  token_path "]}," RuboCop Server ServerCommand Base run":{"type":"method","name":"run","children":[],"call":[]}," RuboCop Server ServerCommand Base initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop Server ServerCommand Base inherited":{"type":"method","name":"inherited","children":[],"call":[]}," RuboCop Server ServerCommand Base Runner run":{"type":"method","name":"run","children":[],"call":["Dir  chdir "," validate_token! "]}," RuboCop Server Helper redirect":{"type":"method","name":"redirect","children":[],"call":[]}," RuboCop Server Core read_socket":{"type":"method","name":"read_socket","children":[],"call":["socket close ","socket puts ","e full_message "," warn ","e inspect ","e message ","@server close ","SocketReader  new read! ","SocketReader  new "]}," RuboCop Server Core start_server":{"type":"method","name":"start_server","children":[],"call":[" puts ","@server addr [] ","@server addr ","TCPServer  open ","output_stream puts ","ARGV  include? "," use_json_format? ","TCPServer  open  addr [] ","TCPServer  open  addr "]}," RuboCop Server Core server_mode?":{"type":"method","name":"server_mode?","children":[],"call":[]}," RuboCop Server Core demonize":{"type":"method","name":"demonize","children":[],"call":["Process  waitpid "," read_socket ","@server accept ","@server closed? ","Cache  write_pid_file ","Process  daemon "," fork ","Cache  write_port_and_token_files "," token ","@server addr [] ","@server addr ","$stderr reopen ","Cache  stderr_path "]}," RuboCop Server Core start":{"type":"method","name":"start","children":[],"call":[" demonize "," server_mode? "," start_server "," require ","Cache  project_dir "," run_server "," detach_server "," require_relative "]}," RuboCop Server Core token":{"type":"method","name":"token","children":[],"call":[" class token "," class "]}," RuboCop Server ClientCommand Stop run":{"type":"method","name":"run","children":[],"call":["Process  waitpid ","Server  wait_for_running_status! "," send_request "," fork "," check_running_server "]}," RuboCop Server ClientCommand Status run":{"type":"method","name":"run","children":[],"call":[" puts ","Cache  pid_path read ","Cache  pid_path ","Server  running? "]}," RuboCop Server ClientCommand Start run":{"type":"method","name":"run","children":[],"call":["Server Core  new start ","Server Core  new ","ENV  fetch ","Cache  write_version_file "," exit ","Server  wait_for_running_status! ","Cache  acquire_lock "," warn ","Cache  pid_path read ","Cache  pid_path ","Server  running? "]}," RuboCop Server ClientCommand Restart run":{"type":"method","name":"run","children":[],"call":["ClientCommand Start  new run ","ClientCommand Start  new ","ClientCommand Stop  new run ","ClientCommand Stop  new "]}," RuboCop Server ClientCommand Exec status":{"type":"method","name":"status","children":[],"call":["status to_i "," raise ","(send\n  (lvar :status) :=~\n  (regexp\n    (str \"^\\\\d+$\")\n    (regopt))) nil? ","status =~ ","Cache  status_path read ","Cache  status_path ","Cache  status_path file? ","Cache  status_path read  to_i ","(send\n  (lvar :Cache  status_path read ) :=~\n  (regexp\n    (str \"^\\\\d+$\")\n    (regopt))) nil? ","Cache  status_path read  =~ ","Cache  Cache  status_path read _path read ","Cache  Cache  status_path read _path ","Cache  Cache  status_path read _path file? "]}," RuboCop Server ClientCommand Exec incompatible_version?":{"type":"method","name":"incompatible_version?","children":[],"call":["RuboCop Version STRING  != ","Cache  version_path read ","Cache  version_path ","Cache  version_path read != "]}," RuboCop Server ClientCommand Exec ensure_server!":{"type":"method","name":"ensure_server!","children":[],"call":["ClientCommand Start  new run ","ClientCommand Start  new "," check_running_server ","ClientCommand Stop  new run ","ClientCommand Stop  new "," puts "," incompatible_version? "," warn "]}," RuboCop Server ClientCommand Exec run":{"type":"method","name":"run","children":[],"call":[" status "," send_request ","$stdin read ","$stdin tty? ","ARGV  dup ","Cache  status_path delete ","Cache  status_path ","Cache  status_path file? "," ensure_server! "," warn "," stderr "," stderr empty? ","ARGV  include? "]}," RuboCop Server ClientCommand Base check_running_server":{"type":"method","name":"check_running_server","children":[],"call":[" warn ","Server  running? tap ","Server  running? "]}," RuboCop Server ClientCommand Base send_request":{"type":"method","name":"send_request","children":[],"call":["$stdout write ","socket read ","socket eof? ","socket close_write ","socket write ","socket puts ","(send\n  (send\n    (const nil :Cache) :token_path) :read) shelljoin ","Dir  pwd ","Cache  token_path read ","Cache  token_path ","TCPSocket  open ","Cache  port_path read ","Cache  port_path ","socket readpartial "]}," RuboCop Server ClientCommand Base run":{"type":"method","name":"run","children":[],"call":[" raise "]}," RuboCop Server CLI error":{"type":"method","name":"error","children":[],"call":[" warn "," Rainbow red "," Rainbow "," require "]}," RuboCop Server CLI use_server_option?":{"type":"method","name":"use_server_option?","children":[],"call":["(send\n  (lvar :argv) :&\n  (const nil :SERVER_OPTIONS)) any? ","argv & "]}," RuboCop Server CLI delete_server_argument_from":{"type":"method","name":"delete_server_argument_from","children":[],"call":["(send\n  (const nil :SERVER_OPTIONS) :each_with_object\n  (array)) compact ","server_arguments << ","all_arguments delete ","SERVER_OPTIONS  each_with_object "]}," RuboCop Server CLI run_command":{"type":"method","name":"run_command","children":[],"call":["Server ClientCommand Status  new run ","Server ClientCommand Status  new ","Server ClientCommand Stop  new run ","Server ClientCommand Stop  new ","Server ClientCommand Start  new run ","Server ClientCommand Start  new ","Server ClientCommand Restart  new run ","Server ClientCommand Restart  new ","Server  running? "]}," RuboCop Server CLI exit?":{"type":"method","name":"exit?","children":[],"call":[]}," RuboCop Server CLI run":{"type":"method","name":"run","children":[],"call":[" run_command "," error ","argv count >= ","argv count ","EXCLUSIVE_OPTIONS  include? ","deleted_server_arguments first ","deleted_server_arguments join ","deleted_server_arguments size >= ","deleted_server_arguments size "," delete_server_argument_from "," use_server_option? ","Server  support_server? ","argv count > "," allowed_option_count ","Cache  cache_root_path= "," fetch_cache_root_path_from ","ArgumentsFile  read_as_arguments delete ","ArgumentsFile  read_as_arguments ","ArgumentsEnv  read_as_arguments delete ","ArgumentsEnv  read_as_arguments ","server_command nil? "," process_arguments "," delete_server_argument_from  first "," delete_server_argument_from  join "," delete_server_argument_from  size >= "," delete_server_argument_from  size ","deleted_server_arguments first  nil? "]}," RuboCop Server CLI initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop Server Cache write_version_file":{"type":"method","name":"write_version_file","children":[],"call":[" version_path write "," version_path "]}," RuboCop Server Cache write_status_file":{"type":"method","name":"write_status_file","children":[],"call":[" status_path write "," status_path "]}," RuboCop Server Cache write_pid_file":{"type":"method","name":"write_pid_file","children":[],"call":[" dir rmtree "," dir "," pid_path write ","Process  pid "," pid_path "]}," RuboCop Server Cache write_port_and_token_files":{"type":"method","name":"write_port_and_token_files","children":[],"call":[" token_path write "," token_path "," port_path write "," port_path "]}," RuboCop Server Cache acquire_lock":{"type":"method","name":"acquire_lock","children":[],"call":["lock_file close ","lock_file flock ","flock_result != ","File LOCK_EX  | ","File  open "," lock_path ","File  open  close ","File  open  flock ","lock_file flock  != "]}," RuboCop Server Cache pid_running?":{"type":"method","name":"pid_running?","children":[],"call":["Process  kill == ","Process  kill "," pid_path read to_i "," pid_path read "," pid_path "]}," RuboCop Server Cache version_path":{"type":"method","name":"version_path","children":[],"call":[" dir join "," dir "]}," RuboCop Server Cache status_path":{"type":"method","name":"status_path","children":[],"call":[" dir join "," dir "]}," RuboCop Server Cache lock_path":{"type":"method","name":"lock_path","children":[],"call":[" dir join "," dir "]}," RuboCop Server Cache pid_path":{"type":"method","name":"pid_path","children":[],"call":[" dir join "," dir "]}," RuboCop Server Cache token_path":{"type":"method","name":"token_path","children":[],"call":[" dir join "," dir "]}," RuboCop Server Cache port_path":{"type":"method","name":"port_path","children":[],"call":[" dir join "," dir "]}," RuboCop Server Cache dir":{"type":"method","name":"dir","children":[],"call":["d mkpath ","d exist? ","Pathname  new tap ","Pathname  new ","File  join "," project_dir_cache_key ","File  expand_path "," cache_path "," File  expand_path  "]}," RuboCop Server Cache project_dir_cache_key":{"type":"method","name":"project_dir_cache_key","children":[],"call":[" project_dir [] tr "," project_dir [] "," project_dir "]}," RuboCop Server Cache project_dir":{"type":"method","name":"project_dir","children":[],"call":["Dir  pwd ","File  expand_path ","File  exist? ","File  join ","GEMFILE_NAMES  any? ","current_dir != ","File  expand_path  != ","Dir  pwd  != "]}," RuboCop RakeTask perform":{"type":"method","name":"perform","children":[],"call":[" run_cli "," verbose ","options delete "," full_options unshift "," full_options "," full_options unshift  delete "," full_ full_options unshift  unshift "," full_ full_options unshift  "]}," RuboCop Options add_server_options":{"type":"method","name":"add_server_options","children":[],"call":[" option "," section "]}," RuboCop Formatter GitHubActionsFormatter finished":{"type":"method","name":"finished","children":[],"call":[" output puts "," output "," report_offense ","offenses each ","@offenses_for_files each "]}," RuboCop Formatter GitHubActionsFormatter started":{"type":"method","name":"started","children":[],"call":[]}," RuboCop Cop Style NestedTernaryOperator replace_loc_and_whitespace":{"type":"method","name":"replace_loc_and_whitespace","children":[],"call":["corrector replace "," range_with_surrounding_space "]}," RuboCop Cop Style HashExcept decorate_source":{"type":"method","name":"decorate_source","children":[],"call":["value source ","value sym_type? ","value dstr_type? ","value dsym_type? "]}," RuboCop Cop Style HashExcept except_key_source":{"type":"method","name":"except_key_source","children":[],"call":["key source ","key join ","key each_value map ","key each_value "," decorate_source ","key percent_literal? ","key array_type? ","key literal? ","key each_value map  source ","key each_value map  join ","key each_value map  each_value map ","key each_value map  each_value ","key each_value map  percent_literal? ","key each_value map  array_type? ","key each_value map  literal? "]}," RuboCop Cop Style HashExcept extract_body_if_nagated":{"type":"method","name":"extract_body_if_nagated","children":[],"call":["body receiver ","body method? "]}," RuboCop Cop Style HashExcept not_included?":{"type":"method","name":"not_included?","children":[],"call":["body method? "]}," RuboCop Cop Style HashExcept included?":{"type":"method","name":"included?","children":[],"call":["body method? "]}," RuboCop Cop Style HashExcept bad_method?":{"type":"method","name":"bad_method?","children":[],"call":[" bad_method_with_poro? "," bad_method_with_active_support? "," active_support_extensions_enabled? ","(send\n  (lvar :send_node) :first_argument) == ","key_arg source ","send_node first_argument ","send_node method? ! ","send_node method? ","(send\n  (lvar :send_node) :receiver) != ","send_node receiver "]}," RuboCop Cop Style GuardClause trivial?":{"type":"method","name":"trivial?","children":[],"call":["node if_branch begin_type? ! ","node if_branch begin_type? ","node if_branch ","node if_branch if_type? ! ","node if_branch if_type? ","node branches one? ","node branches "]}," RuboCop Cop Style FormatStringToken autocorrect_sequence":{"type":"method","name":"autocorrect_sequence","children":[],"call":["corrector replace "," style ","detected_sequence type ","detected_sequence style == ","detected_sequence style ","detected_sequence precision ","detected_sequence width ","detected_sequence flags ","name nil? ","detected_sequence name "," style == ","detected_sequence detected_sequence type  ","detected_sequence detected_sequence precision  ","detected_sequence detected_sequence width  ","detected_sequence detected_sequence flags  ","detected_sequence name  nil? ","detected_sequence detected_sequence name  "]}," RuboCop Cop Style FormatStringToken correctable_sequence?":{"type":"method","name":"correctable_sequence?","children":[],"call":[" style == "," style ","detected_type == "]}," RuboCop Cop Style FormatStringToken check_sequence":{"type":"method","name":"check_sequence","children":[],"call":[" autocorrect_sequence "," add_offense "," message ","detected_sequence style "," style_detected "," correctable_sequence? ","detected_sequence type "," correct_style_detected ","detected_sequence style == "," style "]}," RuboCop Cop Style EmptyMethod max_line_length":{"type":"method","name":"max_line_length","children":[],"call":[" config for_cop [] "," config for_cop "," config "]}," RuboCop Cop MultilineElementIndentation key_and_value_begin_on_same_line?":{"type":"method","name":"key_and_value_begin_on_same_line?","children":[],"call":[" same_line? ","pair value ","pair key "]}," RuboCop Cop MultilineElementIndentation node_beginning_with":{"type":"method","name":"node_beginning_with","children":[],"call":["node loc begin == ","node loc begin ","node loc ","node loc is_a? "," processed_source ast each_descendant "," processed_source ast "," processed_source "]}," RuboCop Cop MultilineElementIndentation hash_pair_where_value_beginning_with":{"type":"method","name":"hash_pair_where_value_beginning_with","children":[],"call":["node parent "," node_beginning_with ","first parent parent ","first parent ","first parent loc begin == ","first parent loc begin ","first parent loc "," node_beginning_with  parent ","  node_beginning_with _beginning_with "]}," RuboCop Cop MultilineElementIndentation indent_base":{"type":"method","name":"indent_base","children":[],"call":["left_brace source_line =~ ","left_brace source_line ","left_parenthesis column + ","left_parenthesis column "," style == "," style ","pair loc column ","pair loc ","pair right_sibling "," key_and_value_begin_on_same_line? "," hash_pair_where_value_beginning_with ","left_brace column "," brace_alignment_style "," right_sibling_begins_on_subsequent_line? "," hash_pair_where_value_beginning_with  loc column "," hash_pair_where_value_beginning_with  loc "," hash_pair_where_value_beginning_with  right_sibling "," hash_ hash_pair_where_value_beginning_with _where_value_beginning_with "]}," RuboCop Cop Lint NonAtomicFileOperation force_option?":{"type":"method","name":"force_option?","children":[],"call":[" force? ","node arguments any? ","node arguments "]}," RuboCop Cop Lint NonAtomicFileOperation replacement_method":{"type":"method","name":"replacement_method","children":[],"call":["REMOVE_METHODS  include? ","node method_name ","MAKE_METHODS  include? "," force_option? ","RECURSIVE_REMOVE_METHODS  include? "]}," RuboCop Cop Lint NonAtomicFileOperation autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove ","node parent loc end ","node parent loc ","node parent ","node parent multiline? ","corrector replace "," replacement_method ","node loc selector ","node loc ","node child_nodes first loc name ","node child_nodes first loc ","node child_nodes first ","node child_nodes "," autocorrect_replace_method ","node source_range end join ","node parent loc keyword begin ","node parent loc keyword ","node source_range end ","node source_range ","node parent modifier_form? "]}," RuboCop Cop Lint NonAtomicFileOperation message":{"type":"method","name":"message","children":[],"call":[" format "," receiver_and_method_name "]}," RuboCop Cop Lint NonAtomicFileOperation offense":{"type":"method","name":"offense","children":[],"call":[" autocorrect "," add_offense "," message "," range_between ","exist_node loc expression end_pos ","exist_node loc expression ","exist_node loc ","node parent loc keyword begin_pos ","node parent loc keyword ","node parent loc ","node parent ","  range_between _between "]}," RuboCop Cop Lint NonAtomicFileOperation on_send":{"type":"method","name":"on_send","children":[],"call":[" offense ","exist_node first_argument == ","node first_argument ","exist_node first_argument "," send_exist_node first "," send_exist_node ","node parent "," explicit_not_force? ","node parent else_branch "," register_offense "," allowable_use_with_if? ","parent if_type? "," if_node_child? "," send_exist_node first  first_argument == "," send_exist_node first  first_argument "," send_ send_exist_node first  first "," send_ send_exist_node first  ","node node parent  ","node node parent  else_branch ","node parent  if_type? "]}," RuboCop Cop Lint ConstantOverwrittenInRescue on_resbody":{"type":"method","name":"on_resbody","children":[],"call":["corrector remove "," range_between ","node loc assoc end_pos ","node loc assoc ","node loc ","node loc keyword end_pos ","node loc keyword "," add_offense "," format "," overwritten_constant "," overwritten_ overwritten_constant  "]}," RuboCop Cop Lint ConstantOverwrittenInRescue autocorrect_incompatible_with":{"type":"method","name":"autocorrect_incompatible_with","children":[],"call":[]}," RuboCop Cop Layout LineContinuationSpacing space_style?":{"type":"method","name":"space_style?","children":[],"call":[" cop_config [] == "," cop_config [] "," cop_config "]}," RuboCop Cop Layout LineContinuationSpacing no_space_style?":{"type":"method","name":"no_space_style?","children":[],"call":[" cop_config [] == "," cop_config [] "," cop_config "]}," RuboCop Cop Layout LineContinuationSpacing ignore_range?":{"type":"method","name":"ignore_range?","children":[],"call":["range contains? ","@ignored_ranges any? "," ignored_ranges any? "," ignored_ranges "]}," RuboCop Cop Layout LineContinuationSpacing comment_ranges":{"type":"method","name":"comment_ranges","children":[],"call":["comments map map ","comments map "]}," RuboCop Cop Layout LineContinuationSpacing string_literal_ranges":{"type":"method","name":"string_literal_ranges","children":[],"call":["ranges << ","loc expression ","loc begin ","loc respond_to? ","loc heredoc_body ","str heredoc? ","str location ","ast each_node each_with_object ","Set  new ","ast each_node ","ast nil? ","ast each_node with_object ","Set  new  << ","str location  expression ","str location  begin ","str location  respond_to? ","str location  heredoc_body ","str str location ation "]}," RuboCop Cop Layout LineContinuationSpacing autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," space_style? "," no_space_style? "]}," RuboCop Cop Layout LineContinuationSpacing message":{"type":"method","name":"message","children":[],"call":[" space_style? "," no_space_style? "]}," RuboCop Cop Layout LineContinuationSpacing find_offensive_spacing":{"type":"method","name":"find_offensive_spacing","children":[],"call":["line [] "," space_style? "," no_space_style? "]}," RuboCop Cop Layout LineContinuationSpacing investigate":{"type":"method","name":"investigate","children":[],"call":[" autocorrect "," add_offense "," ignore_range? "," source_range ","offensive_spacing length ","line length - - ","line length - ","line length "," processed_source buffer "," processed_source "," find_offensive_spacing "," ignore_ source_range ? "," source_ source_range  "," find_offensive_spacing  length "," find_ find_offensive_spacing  "]}," RuboCop Cop Layout LineContinuationSpacing on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[" investigate ","index + "," processed_source raw_source lines each_with_index "," processed_source raw_source lines "," processed_source raw_source "," processed_source "," string_literal_ranges + "," comment_ranges "," processed_source comments "," string_literal_ranges "," processed_source ast ","index >= "," last_line "," processed_source raw_source include? ","  last_line  "]}," RuboCop Cop Layout LineContinuationLeadingSpace offense_range":{"type":"method","name":"offense_range","children":[],"call":[" range_between ","begin_pos + ","matches [] length ","matches [] ","range_start + ","range_start +  + "]}," RuboCop Cop Layout LineContinuationLeadingSpace continuation?":{"type":"method","name":"continuation?","children":[],"call":["line end_with? ","c multiline? ","c first_line == ","c first_line ","node children none? ","node children "]}," RuboCop Cop Layout LineContinuationLeadingSpace investigate":{"type":"method","name":"investigate","children":[],"call":[" add_offense "," offense_range ","matches nil? ","second_line match "," continuation? "," investigate_trailing_style "," investigate_leading_style "," enforced_style_leading? ","second_line match  nil? "]}," RuboCop Cop Layout LineContinuationLeadingSpace raw_lines":{"type":"method","name":"raw_lines","children":[],"call":[" processed_source raw_source lines [] "," line_range size "," line_range ","node first_line - ","node first_line "," processed_source raw_source lines "," processed_source raw_source "," processed_source "]}," RuboCop Cop Layout LineContinuationLeadingSpace on_dstr":{"type":"method","name":"on_dstr","children":[],"call":[" investigate ","raw_line_one length "," raw_lines each_cons "," raw_lines ","node loc expression begin_pos - ","node loc expression column ","node loc expression ","node loc ","node loc expression begin_pos "," investigate_trailing_style "," investigate_leading_style "," enforced_style_leading? "," continuation? ","node source include? ","node source ","node source_range begin_pos - ","node source_range column ","node source_range ","node source_range begin_pos ","lines each_cons with_index ","node first_line ","lines each_cons "," raw_ raw_lines  each_cons "," raw_ raw_lines  "," raw_lines  each_cons with_index "," raw_lines  each_cons "]}," RuboCop Cop Layout FirstArrayElementIndentation message_for_right_bracket":{"type":"method","name":"message_for_right_bracket","children":[],"call":[]}," RuboCop Cop Layout EmptyLinesAroundAttributeAccessor next_line_enable_directive_comment?":{"type":"method","name":"next_line_enable_directive_comment?","children":[],"call":["DirectiveComment  new enabled? ","DirectiveComment  new "," processed_source comment_at_line "," processed_source "," processed_source  processed_source comment_at_line _at_line "]}," RuboCop Cop Layout EmptyLinesAroundAttributeAccessor next_line_empty_or_enable_directive_comment?":{"type":"method","name":"next_line_empty_or_enable_directive_comment?","children":[],"call":[" next_line_empty? "," next_line_enable_directive_comment? ","line + "," line + _empty? "," line + _enable_directive_comment? "]}," RuboCop Cop Gemspec DeprecatedAttributeAssignment format_message_from":{"type":"method","name":"format_message_from","children":[],"call":[" format "]}," RuboCop Cop Gemspec DeprecatedAttributeAssignment use_deprecated_attributes?":{"type":"method","name":"use_deprecated_attributes?","children":[],"call":["attribute to_s ","node method? ","(send\n  (lvar :node) :receiver) == ","node receiver ","node send_type? "," node_and_method_name ","(sym :test_files) each "]}," RuboCop Cop Gemspec DeprecatedAttributeAssignment node_and_method_name":{"type":"method","name":"node_and_method_name","children":[],"call":["(begin\n  (lvar :attribute)) to_sym ","node op_asgn_type? "]}," RuboCop Cop Base active_support_extensions_enabled?":{"type":"method","name":"active_support_extensions_enabled?","children":[],"call":["@config active_support_extensions_enabled? "]}," RuboCop Config active_support_extensions_enabled?":{"type":"method","name":"active_support_extensions_enabled?","children":[],"call":[" for_all_cops [] "," for_all_cops "]}," RuboCop Cop MultilineElementIndentation right_sibling_begins_on_subsequent_line?":{"type":"method","name":"right_sibling_begins_on_subsequent_line?","children":[],"call":["pair last_line < ","pair right_sibling first_line ","pair right_sibling ","pair last_line "]}," RuboCop Cop Layout LineContinuationSpacing last_line":{"type":"method","name":"last_line","children":[],"call":["processed_source lines length ","processed_source lines ","last_token line ","processed_source tokens last ","processed_source tokens ","processed_source tokens last  line "]}," RuboCop Cop Lint NonAtomicFileOperation register_offense":{"type":"method","name":"register_offense","children":[],"call":[" autocorrect "," add_offense "," message "," range_between ","exist_node loc expression end_pos ","exist_node loc expression ","exist_node loc ","node parent loc keyword begin_pos ","node parent loc keyword ","node parent loc ","node parent "," message_remove_file_exist_check "," format "," replacement_method "," force_method? ","node parent elsif? "," message_change_force_method ","parent elsif? ","parent loc keyword begin join ","parent condition source_range end ","parent condition source_range ","parent condition ","parent loc keyword begin ","parent loc keyword ","parent loc ","  range_between _between "," parent loc keyword begin join _between ","node node parent  loc keyword begin_pos ","node node parent  loc keyword ","node node parent  loc ","node node parent  ","node node parent  elsif? ","node parent  elsif? ","node parent  loc keyword begin join ","parent condition source_ range_between  end ","parent condition source_parent loc keyword begin join  end ","node parent  condition source_range end ","parent condition source_ range_between  ","parent condition source_parent loc keyword begin join  ","node parent  condition source_range ","node parent  condition ","node parent  loc keyword begin ","node parent  loc keyword ","node parent  loc "]}," RuboCop Cop Lint NonAtomicFileOperation allowable_use_with_if?":{"type":"method","name":"allowable_use_with_if?","children":[],"call":["if_node else_branch ","if_node condition or_type? ","if_node condition ","if_node condition and_type? "]}," RuboCop Cop InternalAffairs UselessRestrictOnSend restrict_on_send?":{"type":"method","name":"restrict_on_send?","children":[],"call":["node name == ","node name "]}," RuboCop Cop InternalAffairs UselessRestrictOnSend on_casgn":{"type":"method","name":"on_casgn","children":[],"call":["corrector remove "," add_offense "," defined_send_callback? ","node parent "," restrict_on_send? ! "," restrict_on_send? "]}," RuboCop Cop Style Semicolon range_nodes":{"type":"method","name":"range_nodes","children":[],"call":["@range_nodes concat ","ast each_descendant to_a ","ast each_descendant ","ast range_type? "," processed_source ast "," processed_source "," instance_variable_defined? "," processed_source ast  each_descendant to_a "," processed_source ast  each_descendant "," processed_source ast  range_type? "," processed_source  processed_source ast  "]}," RuboCop Cop Style Semicolon find_range_node":{"type":"method","name":"find_range_node","children":[],"call":["range_node source_range contains? ","token_before_semicolon pos ","range_node source_range "," range_nodes detect "," range_nodes "]}," RuboCop Cop Style FetchEnvVar new_code":{"type":"method","name":"new_code","children":[],"call":["name_node source "]}," RuboCop Cop Style FetchEnvVar or_lhs?":{"type":"method","name":"or_lhs?","children":[],"call":["parent parent ","parent lhs == ","parent lhs ","node parent ","node parent  node parent  ","node parent  lhs == ","node parent  lhs ","node node parent  "]}," RuboCop Cop Style EmptyHeredoc on_heredoc":{"type":"method","name":"on_heredoc","children":[],"call":["corrector remove "," range_by_whole_lines ","corrector replace ","node loc heredoc_end ","node loc "," add_offense ","heredoc_body source empty? ","heredoc_body source ","node loc heredoc_body "," preferred_string_literal ","node loc node loc heredoc_end  ","node loc heredoc_body  source empty? ","node loc heredoc_body  source ","node loc node loc heredoc_body  "]}," RuboCop Cop PercentArray whitespace_trailing":{"type":"method","name":"whitespace_trailing","children":[],"call":["node source [] ","node loc end begin_pos ","node loc end ","node loc ","node children [] loc expression end_pos ","node children [] loc expression ","node children [] loc ","node children [] ","node children ","node source ","node children [] source_range end join source ","node children [] source_range end join ","node loc end begin ","node children [] source_range end ","node children [] source_range "]}," RuboCop Cop PercentArray whitespace_leading":{"type":"method","name":"whitespace_leading","children":[],"call":["node source [] ","node children [] loc expression begin_pos ","node children [] loc expression ","node children [] loc ","node children [] ","node children ","node loc begin end_pos ","node loc begin ","node loc ","node source ","node loc begin end join source ","node loc begin end join ","node children [] source_range begin ","node children [] source_range ","node loc begin end "]}," RuboCop Cop PercentArray whitespace_between":{"type":"method","name":"whitespace_between","children":[],"call":["node source [] ","node children [] loc expression begin_pos ","node children [] loc expression ","node children [] loc ","node children [] ","node children ","node children [] loc expression end_pos ","node source ","node children length >= ","node children length ","node children [] source_range end join source ","node children [] source_range end join ","node children [] source_range begin ","node children [] source_range ","node children [] source_range end "]}," RuboCop Cop PercentArray build_bracketed_array_with_appropriate_whitespace":{"type":"method","name":"build_bracketed_array_with_appropriate_whitespace","children":[],"call":["(str \"[\") join "," whitespace_trailing ","elements join "," whitespace_between "," whitespace_leading "]}," RuboCop Cop PercentArray build_message_for_bracketed_array":{"type":"method","name":"build_message_for_bracketed_array","children":[],"call":[" format ","preferred_array_code include? "," class "]}," RuboCop Cop Lint SafeNavigationChain add_safe_navigation_operator":{"type":"method","name":"add_safe_navigation_operator","children":[],"call":["source prepend ","send_node dot? ","offense_range source dup ","offense_range source "," format ","send_node method_name ","send_node arguments map join ","send_node arguments map ","send_node arguments ","send_node method? ","source start_with? ","brackets source_range end join source ","brackets source_range end join ","send_node source_range end ","send_node source_range ","brackets source_range end ","brackets source_range ","brackets method_name ","brackets arguments map join ","brackets arguments map ","brackets arguments "," find_brackets ","send_node source_range end join source ","send_node source_range end join "," brackets? ","offense_range source dup  prepend "," format  prepend ","offense_range source  prepend ","offense_range offense_range source dup  dup ","offense_range  format  dup ","offense_range offense_range source  dup ","offense_range offense_range source dup  ","offense_range  format  ","offense_range offense_range source  ","offense_range source dup  start_with? "," format  start_with? ","offense_range source  start_with? ","brackets offense_range source dup _range end join offense_range source dup  ","brackets  format _range end join  format  ","brackets offense_range source _range end join offense_range source  "," find_brackets  source_range end join source ","brackets offense_range source dup _range end join ","brackets  format _range end join ","brackets offense_range source _range end join "," find_brackets  source_range end join ","send_node offense_range source dup _range end ","send_node  format _range end ","send_node offense_range source _range end ","send_node offense_range source dup _range ","send_node  format _range ","send_node offense_range source _range ","brackets offense_range source dup _range end ","brackets  format _range end ","brackets offense_range source _range end "," find_brackets  source_range end ","brackets offense_range source dup _range ","brackets  format _range ","brackets offense_range source _range "," find_brackets  source_range "," find_brackets  method_name "," find_brackets  arguments map join "," find_brackets  arguments map "," find_brackets  arguments "," find_ find_brackets  ","send_node offense_range source dup _range end join offense_range source dup  ","send_node  format _range end join  format  ","send_node offense_range source _range end join offense_range source  ","send_node offense_range source dup _range end join ","send_node  format _range end join ","send_node offense_range source _range end join ","  find_brackets ? "]}," RuboCop Cop Lint RequireRangeParentheses on_irange":{"type":"method","name":"on_irange","children":[],"call":[" add_offense "," format ","node loc operator source ","node loc operator ","node loc ","node begin source ","node begin "," same_line? ","node end ","node parent "]}," RuboCop Cop Lint NonAtomicFileOperation force_method_name?":{"type":"method","name":"force_method_name?","children":[],"call":["(send\n  (const nil :MAKE_FORCE_METHODS) :+\n  (const nil :REMOVE_FORCE_METHODS)) include? ","node method_name ","MAKE_FORCE_METHODS  + "]}," RuboCop Cop Lint NonAtomicFileOperation force_method?":{"type":"method","name":"force_method?","children":[],"call":[" force_option? "," force_method_name? "]}," RuboCop Cop Lint NonAtomicFileOperation autocorrect_replace_method":{"type":"method","name":"autocorrect_replace_method","children":[],"call":["corrector replace "," replacement_method ","node loc selector ","node loc ","node child_nodes first loc name ","node child_nodes first loc ","node child_nodes first ","node child_nodes "," force_method? "]}," RuboCop Cop Lint NonAtomicFileOperation message_remove_file_exist_check":{"type":"method","name":"message_remove_file_exist_check","children":[],"call":[" format "," receiver_and_method_name "]}," RuboCop Cop Lint NonAtomicFileOperation if_node_child?":{"type":"method","name":"if_node_child?","children":[],"call":[" allowable_use_with_if? ! "," allowable_use_with_if? ","parent if_type? ","node parent ","node parent  if_type? ","node node parent  "]}," RuboCop Cop Layout MultilineMethodParameterLineBreaks on_def":{"type":"method","name":"on_def","children":[],"call":[" check_line_breaks ","node arguments ","node arguments empty? "," ignore_last_element? "]}," RuboCop Cop Layout LineContinuationLeadingSpace enforced_style_leading?":{"type":"method","name":"enforced_style_leading?","children":[],"call":[" cop_config [] == "," cop_config [] "," cop_config "]}," RuboCop Cop Layout LineContinuationLeadingSpace message":{"type":"method","name":"message","children":[],"call":[" enforced_style_leading? "]}," RuboCop Cop Layout LineContinuationLeadingSpace trailing_offense_range":{"type":"method","name":"trailing_offense_range","children":[],"call":[" range_between ","begin_pos + ","matches [] length ","matches [] ","end_of_first_line + ","end_of_first_line +  + "]}," RuboCop Cop Layout LineContinuationLeadingSpace leading_offense_range":{"type":"method","name":"leading_offense_range","children":[],"call":[" range_between ","end_pos - ","matches [] length ","matches [] ","end_of_first_line - ","end_of_first_line -  - "]}," RuboCop Cop Layout LineContinuationLeadingSpace investigate_trailing_style":{"type":"method","name":"investigate_trailing_style","children":[],"call":[" add_offense "," trailing_offense_range ","matches nil? ","second_line match "," autocorrect ","matches [] ","end_of_first_line - ","first_line [] length ","first_line [] "," trailing_ trailing_offense_range  ","second_line match  nil? ","second_line match  [] "]}," RuboCop Cop Layout LineContinuationLeadingSpace investigate_leading_style":{"type":"method","name":"investigate_leading_style","children":[],"call":[" add_offense "," leading_offense_range ","matches nil? ","first_line match "," autocorrect ","matches [] ","end_of_first_line + ","second_line [] length ","second_line [] "," leading_ leading_offense_range  ","first_line match  nil? ","first_line match  [] "]}," RuboCop Server CLI allowed_option_count":{"type":"method","name":"allowed_option_count","children":[],"call":["Cache  cache_root_path "]}," RuboCop Server CLI fetch_cache_root_path_from":{"type":"method","name":"fetch_cache_root_path_from","children":[],"call":["arguments [] ","arguments index + ","arguments index ","cache_root split [] ","cache_root split ","cache_root start_with? ","argument start_with? ","arguments detect "]}," RuboCop Server Cache cache_root_dir_from_config":{"type":"method","name":"cache_root_dir_from_config","children":[],"call":["config_yaml dig ","YAML  load_file ","YAML  safe_load_file ","Gem Version  new >= ","Gem Version  new ","ConfigFinder  find_config_path ","Dir  pwd "," require ","CacheConfig  root_dir ","config == ","config_yaml == ","Gem Version  new < ","YAML  safe_load ","ERB  new result ","ERB  new ","File  read ","file_contents include? ","YAML  load_file  dig ","YAML  safe_load_file  dig ","YAML  safe_load  dig ","YAML  load_file _yaml dig ","ConfigFinder  find_ConfigFinder  find_config_path  ","ConfigFinder  find_YAML  load_file _path ","YAML  load_file  == ","YAML  safe_load_file  == ","YAML  safe_load  == ","YAML  load_file _yaml == ","File  read  include? "]}," RuboCop Server Cache cache_path":{"type":"method","name":"cache_path","children":[],"call":["File  expand_path ","File  join "," cache_root_dir_from_config "," cache_root_path ","  cache_root_dir_from_config _from_config "," File  join _from_config "]}," RuboCop ResultCache digest":{"type":"method","name":"digest","children":[],"call":["Zlib  crc32 to_s ","Zlib  crc32 ","File  binread ","File  basename ","path end_with? "]}," RuboCop Cop Style SymbolProc allowed_method_name?":{"type":"method","name":"allowed_method_name?","children":[],"call":[" matches_allowed_pattern? "," allowed_method? "]}," RuboCop Cop Style SymbolProc unsafe_hash_usage?":{"type":"method","name":"unsafe_hash_usage?","children":[],"call":["(sym :reject) include? ","node method_name ","node receiver "]}," RuboCop Cop Style RedundantSort with_logical_operator?":{"type":"method","name":"with_logical_operator?","children":[],"call":["parent and_type? ","parent or_type? ","node parent ","node parent  and_type? ","node parent  or_type? ","node node parent  "]}," RuboCop Cop Style RedundantSort replace_with_logical_operator":{"type":"method","name":"replace_with_logical_operator","children":[],"call":["corrector remove ","node parent loc operator ","node parent loc ","node parent ","corrector insert_after ","node parent loc operator source ","node child_nodes first ","node child_nodes "]}," RuboCop Cop Style RedundantCondition use_arithmetic_operation?":{"type":"method","name":"use_arithmetic_operation?","children":[],"call":["node arithmetic_operation? ","node respond_to? "]}," RuboCop Cop Style NumericPredicate allowed_method_name?":{"type":"method","name":"allowed_method_name?","children":[],"call":[" matches_allowed_pattern? "," allowed_method? "]}," RuboCop Cop Style MethodCallWithoutArgsParentheses allowed_method_name?":{"type":"method","name":"allowed_method_name?","children":[],"call":[" matches_allowed_pattern? "," allowed_method? "]}," RuboCop Cop Style MethodCallWithArgsParentheses RequireParentheses allowed_method_name?":{"type":"method","name":"allowed_method_name?","children":[],"call":[" matches_allowed_pattern? "," allowed_method? "]}," RuboCop Cop Style FormatStringToken use_allowed_method?":{"type":"method","name":"use_allowed_method?","children":[],"call":[" matches_allowed_pattern? ","send_parent method_name "," allowed_method? ","node each_ancestor first ","node each_ancestor ","node each_ancestor first  method_name "]}," RuboCop Cop Style EmptyHeredoc string_literals_config":{"type":"method","name":"string_literals_config","children":[],"call":[" config for_cop "," config "]}," RuboCop Cop Style EmptyHeredoc enforce_double_quotes?":{"type":"method","name":"enforce_double_quotes?","children":[],"call":[" string_literals_config [] == "," string_literals_config [] "," string_literals_config "]}," RuboCop Cop Style EmptyHeredoc preferred_string_literal":{"type":"method","name":"preferred_string_literal","children":[],"call":[" enforce_double_quotes? "]}," RuboCop Cop CommentsHelp comments_in_range":{"type":"method","name":"comments_in_range","children":[],"call":[" processed_source each_comment_in_lines "," processed_source "," find_end_line ","node source_range line ","node source_range "," find_ find_end_line  "]}," RuboCop Cop AllowedPattern cop_config_deprecated_methods_values":{"type":"method","name":"cop_config_deprecated_methods_values","children":[],"call":[" Array concat "," Array "," cop_config [] "," cop_config "," Array + "," cop_config fetch "]}," RuboCop Cop AllowedMethods cop_config_deprecated_values":{"type":"method","name":"cop_config_deprecated_values","children":[],"call":[" Array concat "," Array "," cop_config [] "," cop_config "," Array + "," cop_config fetch "]}," RuboCop Cop Lint NumberConversion allowed_method_name?":{"type":"method","name":"allowed_method_name?","children":[],"call":[" matches_allowed_pattern? "," allowed_method? "]}," RuboCop Cop Lint NumberConversion allow_receiver?":{"type":"method","name":"allow_receiver?","children":[],"call":[" ignored_class? ","receiver const_name ","receiver const_type? "," top_receiver "," allowed_method_name? ","receiver method_name "," conversion_method? ","receiver send_type? ","receiver numeric_type? "," top_receiver  const_name "," top_receiver  const_type? "," top_ top_receiver  "," top_receiver  method_name "," top_receiver  send_type? "," top_receiver  numeric_type? "]}," RuboCop Cop Lint EmptyConditionalBody deletion_range":{"type":"method","name":"deletion_range","children":[],"call":["range adjust intersect ","buffer source_range ","range adjust ","last_line length - + ","last_line length - ","range last_column ","last_line length ","buffer source_line ","range last_line ","@processed_source buffer ","@processed_source buffer  source_range ","buffer source_line  length - + ","buffer source_line  length - ","buffer source_line  length ","@processed_source buffer  source_line ","range buffer source_line  ","@processed_source @processed_source buffer  "]}," RuboCop Cop Lint EmptyConditionalBody branch_range":{"type":"method","name":"branch_range","children":[],"call":["node source_range ","node source_range with ","node loc else begin_pos - ","node loc else begin_pos ","node loc else ","node loc ","if_node loc end end_pos ","if_node loc end ","if_node loc ","node ancestors detect ","node ancestors "," all_branches_body_missing? "," else_branch? "," empty_if_branch? ","node condition loc expression end_pos ","node condition loc expression ","node condition loc ","node condition ","node condition source_range end_pos ","node condition source_range ","node ancestors detect  loc end end_pos ","node ancestors detect  loc end ","node ancestors detect  loc "]}," RuboCop Cop Lint EmptyConditionalBody correct_other_branches":{"type":"method","name":"correct_other_branches","children":[],"call":["corrector replace ","node condition source ","node condition ","node inverse_keyword ","node loc else ","node loc ","node else_branch loc keyword ","node else_branch loc ","node else_branch ","node else_branch if_type? ","node unless? ","node if? "," require_other_branches_correction? "]}," RuboCop Cop Lint EmptyConditionalBody remove_empty_branch":{"type":"method","name":"remove_empty_branch","children":[],"call":["corrector remove "," deletion_range "," branch_range "," else_branch? "," empty_if_branch? "]}," RuboCop Cop Lint EmptyConditionalBody remove_comments":{"type":"method","name":"remove_comments","children":[],"call":["corrector remove "," range_by_whole_lines ","comment loc expression ","comment loc "," comments_in_range each "," comments_in_range ","comment source_range ","  range_by_whole_lines _by_whole_lines "," comments_in_ range_by_whole_lines  each "," comments_in_ range_by_whole_lines  ","comment source_ range_by_whole_lines  "]}," RuboCop Cop Lint EmptyConditionalBody autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" correct_other_branches "," remove_empty_branch "," remove_comments "]}," RuboCop Cop Lint AmbiguousBlockAssociation allowed_method_pattern?":{"type":"method","name":"allowed_method_pattern?","children":[],"call":[" matches_allowed_pattern? ","node last_argument method_name ","node last_argument "," allowed_method? ","node method? ","node operator_method? ","node assignment? ","node last_argument send_node source ","node last_argument send_node "]}," RuboCop Cop Layout FirstArgumentIndentation enable_layout_first_method_argument_line_break?":{"type":"method","name":"enable_layout_first_method_argument_line_break?","children":[],"call":[" config for_cop [] "," config for_cop "," config "]}," RuboCop Cop Layout BlockEndNewline end_of_method_chain":{"type":"method","name":"end_of_method_chain","children":[],"call":[" end_of_method_chain ","node parent "]}," RuboCop Cop Layout BlockEndNewline offense_range":{"type":"method","name":"offense_range","children":[],"call":["Parser Source Range  new "," end_of_method_chain loc expression end_pos "," end_of_method_chain loc expression "," end_of_method_chain loc "," end_of_method_chain ","node children compact last loc expression end_pos ","node children compact last loc expression ","node children compact last loc ","node children compact last ","node children compact ","node children ","node loc expression source_buffer ","node loc expression ","node loc "," end_of_method_chain source_range end_pos "," end_of_method_chain source_range ","node children compact last source_range end_pos ","node children compact last source_range ","node source_range source_buffer ","node source_range ","node children compact last source_range end join ","node loc end ","node children compact last source_range end "]}," RuboCop Cop Layout BlockEndNewline last_heredoc_argument":{"type":"method","name":"last_heredoc_argument","children":[],"call":[" last_heredoc_argument ","node children first ","node children ","arguments reverse detect ","arguments reverse ","arg heredoc? ","arg str_type? "," last_arguments reverse detect _argument ","arg arguments reverse detect ? "]}," RuboCop Cop Layout BlockEndNewline register_offense":{"type":"method","name":"register_offense","children":[],"call":["corrector replace ","corrector insert_after ","heredoc loc heredoc_end ","heredoc loc ","corrector remove "," last_heredoc_argument ","node body ","offense_range source strip ","offense_range source "," offense_range "," add_offense "," message ","node loc end ","node loc "," replacement ","offense_range source lstrip "," last_heredoc_argument  loc  last_heredoc_argument _end "," last_heredoc_argument  loc "," last_ last_heredoc_argument _argument "," offense_range  source strip "," offense_range  source ","  offense_range  ","  replacement  "," offense_range  source lstrip "]}," RuboCop ConfigObsoletion ParameterRule alternatives":{"type":"method","name":"alternatives","children":[],"call":[" metadata [] "," metadata "]}," RuboCop ConfigFinder expand_path":{"type":"method","name":"expand_path","children":[],"call":["File  expand_path "]}," RuboCop ConfigFinder find_user_xdg_config":{"type":"method","name":"find_user_xdg_config","children":[],"call":["File  exist? ","File  join "," expand_path ","ENV  fetch "]}," RuboCop ConfigFinder find_user_dotfile":{"type":"method","name":"find_user_dotfile","children":[],"call":["File  exist? ","File  join ","Dir  home ","ENV  key? "]}," RuboCop ConfigFinder find_project_dotfile":{"type":"method","name":"find_project_dotfile","children":[],"call":[" find_file_upwards "," project_root "]}," RuboCop ConfigFinder find_project_root":{"type":"method","name":"find_project_root","children":[],"call":["File  dirname "," find_last_file_upwards ","Dir  pwd ","Dir  Dir  pwd  "]}," RuboCop ConfigFinder project_root":{"type":"method","name":"project_root","children":[],"call":[" find_project_root "]}," RuboCop ConfigFinder find_config_path":{"type":"method","name":"find_config_path","children":[],"call":[" find_user_xdg_config "," find_user_dotfile "," find_project_dotfile "]}," RuboCop CacheConfig root_dir":{"type":"method","name":"root_dir","children":[],"call":[]}," RuboCop FeatureLoader target":{"type":"method","name":"target","children":[],"call":[" relative "," relative? "]}," RuboCop FeatureLoader seems_cannot_load_such_file_error?":{"type":"method","name":"seems_cannot_load_such_file_error?","children":[],"call":["error path == "," target ","error path "]}," RuboCop FeatureLoader relative?":{"type":"method","name":"relative?","children":[],"call":["@feature start_with? "]}," RuboCop FeatureLoader relative":{"type":"method","name":"relative","children":[],"call":[" File  join "]}," RuboCop FeatureLoader namespaced_target":{"type":"method","name":"namespaced_target","children":[],"call":[" namespaced_feature "," relative "," relative? "]}," RuboCop FeatureLoader namespaced_feature":{"type":"method","name":"namespaced_feature","children":[],"call":["@feature tr "]}," RuboCop FeatureLoader load":{"type":"method","name":"load","children":[],"call":[" raise ","error_for_namespaced_target path == "," namespaced_target ","error_for_namespaced_target path "," Kernel  require ","e path != "," target ","e path "," new load "," new "," require "]}," RuboCop FeatureLoader initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop Ext Range single_line?":{"type":"method","name":"single_line?","children":[],"call":[" first_line == "," last_line "," first_line "]}," RuboCop Cop Style SymbolProc unsafe_array_usage?":{"type":"method","name":"unsafe_array_usage?","children":[],"call":["(sym :min) include? ","node method_name ","node receiver "]}," RuboCop Cop Style SoleNestedConditional wrap_condition":{"type":"method","name":"wrap_condition","children":[],"call":["corrector wrap "," wrap_condition? ","condition send_node "]}," RuboCop Cop Style RedundantParentheses ternary_parentheses_required?":{"type":"method","name":"ternary_parentheses_required?","children":[],"call":["allowed_styles include? ","config [] ","config fetch ","@config for_cop ","@config for_cop  [] ","@config for_cop  fetch ","@@config for_cop  for_cop "]}," RuboCop Cop Style RedundantParentheses allowed_ternary?":{"type":"method","name":"allowed_ternary?","children":[],"call":[" ternary_parentheses_required? ","node parent ternary? ","node parent "]}," RuboCop Cop Style NumericLiterals allowed_patterns":{"type":"method","name":"allowed_patterns","children":[],"call":["Regexp  new "," map "]}," RuboCop Cop Lint ShadowingOuterLocalVariable find_conditional_node_from_ascendant":{"type":"method","name":"find_conditional_node_from_ascendant","children":[],"call":[" find_conditional_node_from_ascendant ","parent conditional? ","node parent ","node parent  conditional? ","node node parent  "]}," RuboCop Cop Lint Debugger receiver_chain":{"type":"method","name":"receiver_chain","children":[],"call":["receiver receiver ","receivers unshift ","receiver const_name ","receiver method_name ","receiver send_type? ","send_node receiver ","receiver receiver  receiver receiver  ","send_node receiver  send_node receiver  ","receiver receiver s unshift ","send_node receiver s unshift ","receiver receiver  const_name ","send_node receiver  const_name ","receiver const_receiver method_name  ","receiver receiver  method_name ","send_node receiver  method_name ","receiver method_receiver method_name  ","receiver receiver  send_type? ","send_node receiver  send_type? ","send_node receiver receiver  ","send_node send_node receiver  "]}," RuboCop Cop InternalAffairs SingleLineComparison extract_receiver":{"type":"method","name":"extract_receiver","children":[],"call":["node source ","node receiver ","(sym :loc) include? ","node method_name ","node send_type? ","node receiver  source ","node receiver  receiver ","node receiver  method_name ","node receiver  send_type? "]}," RuboCop Cop InternalAffairs SingleLineComparison on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace "," add_offense "," format "," extract_receiver "," single_line_comparison ","node method? "," extract_ single_line_comparison  "]}," RuboCop Cop ParenthesesCorrector handle_orphaned_comma":{"type":"method","name":"handle_orphaned_comma","children":[],"call":["corrector remove "," range_with_surrounding_space ","node source_range source_buffer ","node source_range ","node loc end ","node loc "," only_closing_paren_before_comma? "," add_heredoc_comma "," extend_range_for_heredoc "," parens_range ","  range_with_surrounding_space _with_surrounding_space ","  extend_range_for_heredoc _with_surrounding_space ","node source_ range_with_surrounding_space  source_buffer ","node source_ extend_range_for_heredoc  source_buffer ","node source_ range_with_surrounding_space  ","node source_ extend_range_for_heredoc  "," extend_ range_with_surrounding_space _for_heredoc "," extend_ extend_range_for_heredoc _for_heredoc "," parens_ range_with_surrounding_space  "," parens_ extend_range_for_heredoc  "]}," RuboCop Cop ParenthesesCorrector only_closing_paren_before_comma?":{"type":"method","name":"only_closing_paren_before_comma?","children":[],"call":["line_range source start_with? ","line_range source ","source_buffer line_range ","node loc end line ","node loc end ","node loc ","node source_range source_buffer ","node source_range ","source_buffer line_range  source start_with? ","source_buffer line_range  source ","source_buffer source_buffer line_range  ","node source_range source_buffer  line_range ","node source_range node source_range source_buffer  "]}," RuboCop CLI Command SuggestExtensions installed_and_not_loaded_extensions":{"type":"method","name":"installed_and_not_loaded_extensions","children":[],"call":[" installed_extensions - "," loaded_extensions "," installed_extensions "]}," RuboCop CLI Command SuggestExtensions loaded_extensions":{"type":"method","name":"loaded_extensions","children":[],"call":["@config_store for_pwd loaded_features to_a ","@config_store for_pwd loaded_features ","@config_store for_pwd "]}," RuboCop CLI Command SuggestExtensions not_installed_extensions":{"type":"method","name":"not_installed_extensions","children":[],"call":[" all_extensions - "," installed_gems "," all_extensions "]}," RuboCop CLI Command SuggestExtensions installed_extensions":{"type":"method","name":"installed_extensions","children":[],"call":[" all_extensions & "," installed_gems "," all_extensions "]}," RuboCop CLI Command SuggestExtensions all_extensions":{"type":"method","name":"all_extensions","children":[],"call":["(send\n  (lvar :extensions) :select) keys ","(send\n  (send nil :Array\n    (lvar :v)) :&\n  (send nil :dependent_gems)) any? "," Array & "," dependent_gems "," Array ","extensions select ","@config_store for_pwd for_all_cops [] ","@config_store for_pwd for_all_cops ","@config_store for_pwd "," lockfile dependencies any? "," lockfile dependencies "," lockfile ","ConfigLoader  default_configuration for_all_cops [] ","ConfigLoader  default_configuration for_all_cops ","ConfigLoader  default_configuration ","(send\n  (lvar :ConfigLoader  default_configuration for_all_cops [] ) :select) keys ","(send\n  (lvar :@config_store for_pwd for_all_cops [] ) :select) keys ","ConfigLoader  default_configuration for_all_cops []  select ","@config_store for_pwd for_all_cops []  select "]}," RuboCop CLI Command SuggestExtensions print_opt_out_instruction":{"type":"method","name":"print_opt_out_instruction","children":[],"call":[" puts "]}," RuboCop CLI Command SuggestExtensions print_load_suggestions":{"type":"method","name":"print_load_suggestions","children":[],"call":[" puts "," installed_and_not_loaded_extensions sort each "," installed_and_not_loaded_extensions sort "," installed_and_not_loaded_extensions "]}," RuboCop CLI Command SuggestExtensions print_install_suggestions":{"type":"method","name":"print_install_suggestions","children":[],"call":[" puts "," not_installed_extensions sort each "," not_installed_extensions sort "," not_installed_extensions "]}," RuboCop Cop Style RedundantSortBy on_numblock":{"type":"method","name":"on_numblock","children":[],"call":["corrector replace "," add_offense "," format "," sort_by_range "," redundant_sort_by_numblock "," sort_by_ sort_by_range  "]}," RuboCop Cop Style MagicCommentFormat supported_capitalizations":{"type":"method","name":"supported_capitalizations","children":[],"call":[" cop_config [] map "," cop_config [] "," cop_config "]}," RuboCop Cop Style MagicCommentFormat valid_capitalization?":{"type":"method","name":"valid_capitalization?","children":[],"call":[" supported_capitalizations include? "," supported_capitalizations "]}," RuboCop Cop Style MagicCommentFormat value_capitalization":{"type":"method","name":"value_capitalization","children":[],"call":[" raise "," valid_capitalization? ","(send\n  (send nil :cop_config) :[]\n  (str \"ValueCapitalization\")) tap "," cop_config [] "," cop_config "]}," RuboCop Cop Style MagicCommentFormat directive_capitalization":{"type":"method","name":"directive_capitalization","children":[],"call":[" raise "," valid_capitalization? ","(send\n  (send nil :cop_config) :[]\n  (str \"DirectiveCapitalization\")) tap "," cop_config [] "," cop_config "]}," RuboCop Cop Style MagicCommentFormat line_range":{"type":"method","name":"line_range","children":[],"call":[" processed_source buffer line_range "," processed_source buffer "," processed_source "]}," RuboCop Cop Style MagicCommentFormat replace_capitalization":{"type":"method","name":"replace_capitalization","children":[],"call":["text upcase ","text downcase "]}," RuboCop Cop Style MagicCommentFormat replace_separator":{"type":"method","name":"replace_separator","children":[],"call":["text tr "," correct_separator "," wrong_separator "]}," RuboCop Cop Style MagicCommentFormat wrong_capitalization?":{"type":"method","name":"wrong_capitalization?","children":[],"call":["text != ","text upcase ","text downcase "]}," RuboCop Cop Style MagicCommentFormat incorrect_separator?":{"type":"method","name":"incorrect_separator?","children":[],"call":["text [] "," wrong_separator "]}," RuboCop Cop Style MagicCommentFormat correct_separator":{"type":"method","name":"correct_separator","children":[],"call":[" style == "," style "]}," RuboCop Cop Style MagicCommentFormat wrong_separator":{"type":"method","name":"wrong_separator","children":[],"call":[" style == "," style "]}," RuboCop Cop Style MagicCommentFormat expected_style":{"type":"method","name":"expected_style","children":[],"call":["(send nil :directive_capitalization) compact join gsub ","(send nil :directive_capitalization) compact join ","(send nil :directive_capitalization) compact "," style "," directive_capitalization "]}," RuboCop Cop Style MagicCommentFormat fix_values":{"type":"method","name":"fix_values","children":[],"call":["corrector replace "," replace_capitalization "," value_capitalization ","value source "," add_offense ","issues each "," format ","issues empty? "]}," RuboCop Cop Style MagicCommentFormat fix_directives":{"type":"method","name":"fix_directives","children":[],"call":["corrector replace "," replace_separator "," replace_capitalization "," directive_capitalization ","directive source "," add_offense ","issues each "," format "," expected_style ","issues empty? "]}," RuboCop Cop Style MagicCommentFormat register_offenses":{"type":"method","name":"register_offenses","children":[],"call":[" fix_values ","issues [] "," fix_directives "]}," RuboCop Cop Style MagicCommentFormat directive_offends?":{"type":"method","name":"directive_offends?","children":[],"call":[" wrong_capitalization? "," directive_capitalization ","directive source "," incorrect_separator? "]}," RuboCop Cop Style MagicCommentFormat find_issues":{"type":"method","name":"find_issues","children":[],"call":["issues [] << ","issues [] "," wrong_capitalization? "," value_capitalization ","value source ","comment values each ","comment values "," directive_offends? ","comment directives each ","comment directives "]}," RuboCop Cop Style MagicCommentFormat leading_comment_lines":{"type":"method","name":"leading_comment_lines","children":[],"call":["first_non_comment_token line ","token comment? ! ","token comment? "," processed_source tokens find "," processed_source tokens "," processed_source "]}," RuboCop Cop Style MagicCommentFormat magic_comments":{"type":"method","name":"magic_comments","children":[],"call":["CommentRange  new ","(send\n  (send\n    (send nil :processed_source) :each_comment_in_lines\n    (send nil :leading_comment_lines)) :select) map ","MagicComment  parse valid? ","MagicComment  parse ","comment text "," processed_source each_comment_in_lines select "," processed_source each_comment_in_lines "," leading_comment_lines "," processed_source "]}," RuboCop Cop Style MagicCommentFormat on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[" register_offenses ","issues any? "," find_issues "," magic_comments each "," magic_comments "," processed_source ast "," processed_source "," find_issues  any? "," find_ find_issues  "]}," RuboCop Cop Style MagicCommentFormat CommentRange values":{"type":"method","name":"values","children":[],"call":["matches << "," loc expression adjust with "," loc expression begin_pos + ","offset last "," loc expression begin_pos "," loc expression "," loc "," loc expression adjust ","offset first ","Regexp  last_match offset ","Regexp  last_match "," text scan "," text ","Regexp  last_match offset  last ","Regexp  last_match offset  first ","Regexp  last_match Regexp  last_match offset  "]}," RuboCop Cop Style MagicCommentFormat CommentRange directives":{"type":"method","name":"directives","children":[],"call":["matches << "," loc expression adjust with "," loc expression begin_pos + ","offset last "," loc expression begin_pos "," loc expression "," loc "," loc expression adjust ","offset first ","Regexp  last_match offset ","Regexp  last_match "," text scan "," text ","Regexp  last_match offset  last ","Regexp  last_match offset  first ","Regexp  last_match Regexp  last_match offset  "]}," RuboCop Cop Style MagicCommentFormat CommentRange initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop Cop Style EachWithObject autocorrect_numblock":{"type":"method","name":"autocorrect_numblock","children":[],"call":["corrector replace ","var source == ","var source ","var lvar_type? ","node body each_descendant ","node body ","node send_node loc selector ","node send_node loc ","node send_node "]}," RuboCop Cop Style EachWithObject autocorrect_block":{"type":"method","name":"autocorrect_block","children":[],"call":["corrector remove "," whole_line_expression "," return_value_occupies_whole_line? ","corrector replace ","first_arg source ","second_arg source ","node arguments ","node send_node loc selector ","node send_node loc ","node send_node "]}," RuboCop Cop Style EachWithObject on_numblock":{"type":"method","name":"on_numblock","children":[],"call":[" autocorrect_numblock "," add_offense ","method loc selector ","method loc "," format ","(send nil :return_value\n  (lvar :body)) == "," return_value "," simple_method_arg? "," each_with_object_numblock_candidate? "]}," RuboCop Cop HashShorthandSyntax no_mixed_shorthand_syntax_check":{"type":"method","name":"no_mixed_shorthand_syntax_check","children":[],"call":[" register_offense ","pair_node key source ","pair_node key "," each_omittable_value_pair "," hash_with_values_that_cant_be_omitted? "]}," RuboCop Cop HashShorthandSyntax mixed_shorthand_syntax_check":{"type":"method","name":"mixed_shorthand_syntax_check","children":[],"call":[" register_offense ","pair_node key source ","pair_node key "," each_omittable_value_pair "," each_omitted_value_pair "," hash_with_values_that_cant_be_omitted? "]}," RuboCop Cop HashShorthandSyntax each_omittable_value_pair":{"type":"method","name":"each_omittable_value_pair","children":[],"call":["hash_value_type_breakdown [] "]}," RuboCop Cop HashShorthandSyntax each_omitted_value_pair":{"type":"method","name":"each_omitted_value_pair","children":[],"call":["hash_value_type_breakdown [] "]}," RuboCop Cop HashShorthandSyntax hash_with_values_that_cant_be_omitted?":{"type":"method","name":"hash_with_values_that_cant_be_omitted?","children":[],"call":["hash_value_type_breakdown [] "]}," RuboCop Cop HashShorthandSyntax hash_with_mixed_shorthand_syntax?":{"type":"method","name":"hash_with_mixed_shorthand_syntax?","children":[],"call":["hash_value_type_breakdown keys size > ","hash_value_type_breakdown keys size ","hash_value_type_breakdown keys "]}," RuboCop Cop HashShorthandSyntax breakdown_value_types_of_hash":{"type":"method","name":"breakdown_value_types_of_hash","children":[],"call":[" require_hash_value? ","pair_node key source ","pair_node key ","pair_node value_omission? ","hash_node pairs group_by ","hash_node pairs "]}," RuboCop Cop HashShorthandSyntax ignore_mixed_hash_shorthand_syntax?":{"type":"method","name":"ignore_mixed_hash_shorthand_syntax?","children":[],"call":["hash_node hash_type? ! ","hash_node hash_type? "," enforced_shorthand_syntax != "," enforced_shorthand_syntax "," target_ruby_version <= "," target_ruby_version "]}," RuboCop Cop HashShorthandSyntax on_hash_for_mixed_shorthand":{"type":"method","name":"on_hash_for_mixed_shorthand","children":[],"call":[" no_mixed_shorthand_syntax_check "," mixed_shorthand_syntax_check "," hash_with_mixed_shorthand_syntax? "," breakdown_value_types_of_hash "," ignore_mixed_hash_shorthand_syntax? "]}," RuboCop Cop Lint UnreachableLoop on_numblock":{"type":"method","name":"on_numblock","children":[],"call":[" check "," loop_method? "]}," RuboCop Cop Lint NonDeterministicRequireOrder on_numblock":{"type":"method","name":"on_numblock","children":[],"call":[" correct_block ","node send_node "," add_offense ","(send\n  (send\n    (lvar :node) :argument_list) :filter) each "," var_is_required? ","argument name ","node body ","node argument_list filter ","node argument_list "," unsorted_dir_loop? "," target_ruby_version >= "," target_ruby_version "]}," RuboCop Cop Lint NextWithoutAccumulator parent_numblock_node":{"type":"method","name":"parent_numblock_node","children":[],"call":["node each_ancestor first ","node each_ancestor "]}," RuboCop Cop Lint NextWithoutAccumulator on_numblock":{"type":"method","name":"on_numblock","children":[],"call":[" add_offense "," parent_numblock_node == "," parent_numblock_node ","n children empty? ","n children ","body each_node find ","body each_node "," on_numblock_body_of_reduce "]}," RuboCop Cop InternalAffairs NumblockHandler on_def":{"type":"method","name":"on_def","children":[],"call":[" add_offense "," numblock_handler? ","node parent "," block_handler? "]}," RuboCop Cop ParenthesesCorrector heredoc?":{"type":"method","name":"heredoc?","children":[],"call":["node child_nodes last loc is_a? ","node child_nodes last loc ","node child_nodes last ","node child_nodes "]}," RuboCop Cop ParenthesesCorrector add_heredoc_comma":{"type":"method","name":"add_heredoc_comma","children":[],"call":["corrector insert_after ","node child_nodes last loc expression ","node child_nodes last loc ","node child_nodes last ","node child_nodes "," heredoc? ","node child_nodes last source_range "]}," RuboCop Cop ParenthesesCorrector extend_range_for_heredoc":{"type":"method","name":"extend_range_for_heredoc","children":[],"call":["range adjust ","comma_line source match [] ","comma_line source match ","comma_line source "," range_by_whole_lines ","node source_range source_buffer ","node source_range ","node loc end ","node loc "," heredoc? "," range_by_whole_lines  source match [] "," range_by_whole_lines  source match "," range_by_whole_lines  source "]}," RuboCop Cop ParenthesesCorrector parens_range":{"type":"method","name":"parens_range","children":[],"call":[" range_with_surrounding_space ","node source_range source_buffer ","node source_range ","node loc end ","node loc "]}," RuboCop Formatter HTMLFormatter ERBContext highlight_source_tag":{"type":"method","name":"highlight_source_tag","children":[],"call":[" escape ","offense highlighted_area source ","offense highlighted_area ","offense severity "]}," RuboCop Cop Util trim_string_interpolation_escape_character":{"type":"method","name":"trim_string_interpolation_escape_character","children":[],"call":["Regexp  last_match ","str gsub "]}," RuboCop Cop Style MethodCallWithArgsParentheses OmitParentheses ambiguous_literal?":{"type":"method","name":"ambiguous_literal?","children":[],"call":[" unary_literal? "," regexp_slash_literal? "," ternary_if? "," splat? "]}," RuboCop Cop Naming ConstantName contains_constant?":{"type":"method","name":"contains_constant?","children":[],"call":["node branches any? ","node branches ","node branches compact any? ","node branches compact "]}," RuboCop Cop Lint NonAtomicFileOperation message_change_force_method":{"type":"method","name":"message_change_force_method","children":[],"call":[" format "," replacement_method "]}," RuboCop Cop Style PerlBackrefs constant_prefix":{"type":"method","name":"constant_prefix","children":[],"call":["node each_ancestor any? ","node each_ancestor "]}," RuboCop Cop Style PerlBackrefs preferred_expression_to_node_with_constant_prefix":{"type":"method","name":"preferred_expression_to_node_with_constant_prefix","children":[],"call":[" constant_prefix "," preferred_expression_to "," preferred_ preferred_expression_to _to "]}," RuboCop Cop Style EachForSimpleLoop offending?":{"type":"method","name":"offending?","children":[],"call":[" each_range_without_block_argument? "," each_range_with_zero_origin? "]}," RuboCop Cop Style CaseEquality send_replacement":{"type":"method","name":"send_replacement","children":[],"call":["lhs source ","rhs source "," self_class? "]}," RuboCop Cop Style CaseEquality const_replacement":{"type":"method","name":"const_replacement","children":[],"call":["lhs source ","rhs source "]}," RuboCop Cop Style CaseEquality begin_replacement":{"type":"method","name":"begin_replacement","children":[],"call":["rhs source ","lhs source ","lhs children first ","lhs children "]}," RuboCop Cop Style CaseEquality offending_receiver?":{"type":"method","name":"offending_receiver?","children":[],"call":[" cop_config fetch "," cop_config "," self_class? "]}," RuboCop Cop Style AccessModifierDeclarations remove_node":{"type":"method","name":"remove_node","children":[],"call":["corrector remove "," range_by_whole_lines ","node location expression ","node location "," range_with_comments "," range_with_comments_and_lines "]}," RuboCop Cop Style AccessModifierDeclarations insert_inline_modifier":{"type":"method","name":"insert_inline_modifier","children":[],"call":["corrector insert_before "]}," RuboCop Cop Style AccessModifierDeclarations insert_def":{"type":"method","name":"insert_def","children":[],"call":["corrector insert_before ","node method_name ","node each_ancestor first location end ","node each_ancestor first location ","node each_ancestor first ","node each_ancestor ","corrector insert_after "," find_argument_less_modifier_node ","(splat\n  (send\n    (send\n      (send\n        (send nil :processed_source) :ast_with_comments) :[]\n      (lvar :node)) :map\n    (block-pass\n      (sym :text)))) join "," processed_source ast_with_comments [] map "," processed_source ast_with_comments [] "," processed_source ast_with_comments "," processed_source "," find_ find_argument_less_modifier_node  ","(splat\n  (send\n    (send\n      (send\n        (send nil :processed_(splat\n  (send\n    (send\n      (send\n        (send nil :processed_source) :ast_with_comments) :[]\n      (lvar :node)) :map\n    (block-pass\n      (sym :text)))) join ) :ast_with_comments) :[]\n      (lvar :node)) :map\n    (block-pass\n      (sym :text)))) join "," processed_(splat\n  (send\n    (send\n      (send\n        (send nil :processed_source) :ast_with_comments) :[]\n      (lvar :node)) :map\n    (block-pass\n      (sym :text)))) join  ast_with_comments [] map "," processed_(splat\n  (send\n    (send\n      (send\n        (send nil :processed_source) :ast_with_comments) :[]\n      (lvar :node)) :map\n    (block-pass\n      (sym :text)))) join  ast_with_comments [] "," processed_(splat\n  (send\n    (send\n      (send\n        (send nil :processed_source) :ast_with_comments) :[]\n      (lvar :node)) :map\n    (block-pass\n      (sym :text)))) join  ast_with_comments "," processed_(splat\n  (send\n    (send\n      (send\n        (send nil :processed_source) :ast_with_comments) :[]\n      (lvar :node)) :map\n    (block-pass\n      (sym :text)))) join  "]}," RuboCop Cop Style AccessModifierDeclarations select_grouped_def_nodes":{"type":"method","name":"select_grouped_def_nodes","children":[],"call":["(send\n  (send\n    (lvar :node) :right_siblings) :take_while) select ","(and\n  (send\n    (lvar :sibling) :send_type?)\n  (send\n    (lvar :sibling) :bare_access_modifier_declaration?)) ! ","sibling bare_access_modifier_declaration? ","sibling send_type? ","node right_siblings take_while ","node right_siblings "]}," RuboCop Cop Style AccessModifierDeclarations find_argument_less_modifier_node":{"type":"method","name":"find_argument_less_modifier_node","children":[],"call":["child arguments empty? ","child arguments ","child method? ","node method_name ","node parent each_child_node find ","node parent each_child_node ","node parent ","parent each_child_node find ","parent each_child_node ","node node parent  each_child_node find ","node node parent  each_child_node ","node node parent  ","node parent  each_child_node find ","node parent  each_child_node "]}," RuboCop Cop Style AccessModifierDeclarations find_corresponding_def_node":{"type":"method","name":"find_corresponding_def_node","children":[],"call":["node arguments first ","node arguments ","child method? ","node parent each_child_node find ","node parent each_child_node ","node parent ","node arguments first value "," access_modifier_with_symbol? "]}," RuboCop Cop Style AccessModifierDeclarations autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" insert_inline_modifier ","node method_name "," select_grouped_def_nodes each "," select_grouped_def_nodes "," remove_node "," insert_def ","def_node source "," find_corresponding_def_node "," style "," replace_def "," select_grouped_ find_corresponding_def_node s each "," select_grouped_ find_corresponding_def_node s "," find_corresponding_def_node  source "," find_corresponding_ find_corresponding_def_node  "]}," RuboCop Cop HashTransformMethod use_transformed_argname?":{"type":"method","name":"use_transformed_argname?","children":[],"call":["node source == "," transformed_argname to_s "," transformed_argname ","node source "," transforming_body_expr each_descendant any? "," transforming_body_expr each_descendant "," transforming_body_expr "]}," RuboCop Cop AllowedPattern cop_config_patterns_values":{"type":"method","name":"cop_config_patterns_values","children":[],"call":[" Array + "," Array "," cop_config fetch "," cop_config "]}," RuboCop Cop AllowedMethods cop_config_allowed_methods":{"type":"method","name":"cop_config_allowed_methods","children":[],"call":[" Array "," cop_config fetch "," cop_config "]}," RuboCop Cop Lint ShadowingOuterLocalVariable variable_node":{"type":"method","name":"variable_node","children":[],"call":["parent_node parent ","parent_node when_type? ","variable scope node parent ","variable scope node ","variable scope ","variable scope node parent  parent ","variable scope node parent  when_type? "]}," RuboCop Cop Lint EmptyConditionalBody all_branches_body_missing?":{"type":"method","name":"all_branches_body_missing?","children":[],"call":["node parent branches compact empty? ","node parent branches compact ","node parent branches ","node parent "]}," RuboCop Cop Lint EmptyConditionalBody empty_else_branch?":{"type":"method","name":"empty_else_branch?","children":[],"call":["node else_branch body ! ","node else_branch body ","node else_branch ","node else_branch if_type? "]}," RuboCop Cop Lint EmptyConditionalBody empty_if_branch?":{"type":"method","name":"empty_if_branch?","children":[],"call":["if_branch body ! ","if_branch body ","if_branch if_type? ","parent if_branch ","parent if_type? ","node parent ","parent if_branch  body ! ","parent if_branch  body ","parent if_branch  if_type? ","parent parent if_branch  ","node parent  if_branch ","node parent  if_type? ","node node parent  "]}," RuboCop Cop Lint EmptyConditionalBody require_other_branches_correction?":{"type":"method","name":"require_other_branches_correction?","children":[],"call":[" empty_else_branch? ! "," empty_else_branch? ","node elsif? "," empty_if_branch? ! "," empty_if_branch? ","node else_branch ","node if_type? "," empty_elsif_branch? ! "," empty_elsif_branch? ","node else? "]}," RuboCop Cop Layout SpaceInsideBlockBraces inner_last_space_count":{"type":"method","name":"inner_last_space_count","children":[],"call":["inner split last count ","inner split last ","inner split "]}," RuboCop Version server_mode":{"type":"method","name":"server_mode","children":[],"call":[]}," RuboCop Server ClientCommand Exec stderr":{"type":"method","name":"stderr","children":[],"call":["Cache  stderr_path read ","Cache  stderr_path "]}," RuboCop Server Cache stderr_path":{"type":"method","name":"stderr_path","children":[],"call":[" dir join "," dir "]}," RuboCop Formatter DisabledConfigFormatter no_exclude_limit?":{"type":"method","name":"no_exclude_limit?","children":[],"call":["@options [] == ","@options [] "]}," RuboCop Cop Style StaticClass autocorrect_sclass":{"type":"method","name":"autocorrect_sclass","children":[],"call":["corrector remove ","node loc end ","node loc "," range_between ","node identifier source_range end_pos ","node identifier source_range ","node identifier ","node loc keyword begin_pos ","node loc keyword "]}," RuboCop Cop Style StaticClass autocorrect_def":{"type":"method","name":"autocorrect_def","children":[],"call":["corrector remove "," range_between ","node loc name begin_pos ","node loc name ","node loc ","node receiver source_range begin_pos ","node receiver source_range ","node receiver "]}," RuboCop Cop Style StaticClass autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" autocorrect_sclass ","node sclass_type? "," autocorrect_def ","node defs_type? "," class_elements each "," class_elements ","corrector insert_after ","class_node loc name ","class_node loc ","corrector replace ","class_node loc keyword "]}," RuboCop Cop Style RedundantStringEscape literal_in_interpolated_or_multiline_string?":{"type":"method","name":"literal_in_interpolated_or_multiline_string?","children":[],"call":["node parent "," begin_loc_present? ! "," begin_loc_present? ","node str_type? "]}," RuboCop Cop Style RedundantStringEscape delimiter?":{"type":"method","name":"delimiter?","children":[],"call":["delimiters include? ","node loc end source [] ","node loc end source ","node loc end ","node loc ","node loc begin source [] ","node loc begin source ","node loc begin "," delimiter? ","node parent "," percent_array_literal? "," literal_in_interpolated_or_multiline_string? "," heredoc? "]}," RuboCop Cop Style RedundantStringEscape heredoc?":{"type":"method","name":"heredoc?","children":[],"call":["node heredoc? ","node dstr_type? ","node str_type? "]}," RuboCop Cop Style RedundantStringEscape heredoc_with_disabled_interpolation?":{"type":"method","name":"heredoc_with_disabled_interpolation?","children":[],"call":[" heredoc_with_disabled_interpolation? ","node parent ","node loc expression source end_with? ","node loc expression source ","node loc expression ","node loc "," heredoc? ","node source end_with? ","node source "]}," RuboCop Cop Style RedundantStringEscape percent_array_literal?":{"type":"method","name":"percent_array_literal?","children":[],"call":[" percent_w_upper_literal? "," percent_w_literal? "]}," RuboCop Cop Style RedundantStringEscape percent_w_upper_literal?":{"type":"method","name":"percent_w_upper_literal?","children":[],"call":[" array_literal? "]}," RuboCop Cop Style RedundantStringEscape percent_w_literal?":{"type":"method","name":"percent_w_literal?","children":[],"call":[" array_literal? "]}," RuboCop Cop Style RedundantStringEscape array_literal?":{"type":"method","name":"array_literal?","children":[],"call":["node parent source start_with? ","node parent source ","node parent "," array_literal? "," literal_in_interpolated_or_multiline_string? "]}," RuboCop Cop Style RedundantStringEscape percent_q_literal?":{"type":"method","name":"percent_q_literal?","children":[],"call":["node source start_with? ","node source "," percent_q_literal? ","node parent "," literal_in_interpolated_or_multiline_string? "]}," RuboCop Cop Style RedundantStringEscape single_quoted?":{"type":"method","name":"single_quoted?","children":[],"call":[" delimiter? "]}," RuboCop Cop Style RedundantStringEscape interpolation_not_enabled?":{"type":"method","name":"interpolation_not_enabled?","children":[],"call":[" heredoc_with_disabled_interpolation? "," percent_q_literal? "," percent_w_literal? "," single_quoted? "]}," RuboCop Cop Style RedundantStringEscape allowed_escape?":{"type":"method","name":"allowed_escape?","children":[],"call":[" delimiter? ","escaped [] ","(str \"\\\\A#[{$@]\") match? "," percent_array_literal? ","escaped [] == ","(str \"[\\\\n\\\\\\\\[[:alnum:]]]\") match? "," interpolation_not_enabled? ","range source [] ","range source "," disabling_interpolation? ","node heredoc? ","range source []  [] ","range source []  [] == "]}," RuboCop Cop Style RedundantStringEscape begin_loc_present?":{"type":"method","name":"begin_loc_present?","children":[],"call":["node loc begin nil? ! ","node loc begin nil? ","node loc begin ","node loc ","node loc to_hash key? ","node loc to_hash "]}," RuboCop Cop Style RedundantStringEscape str_contents_range":{"type":"method","name":"str_contents_range","children":[],"call":["node loc expression ","node loc "," contents_range "," begin_loc_present? ","node loc heredoc_body "," heredoc? ","node source_range ","node str_type? "]}," RuboCop Cop Style RedundantStringEscape message":{"type":"method","name":"message","children":[],"call":[" format ","range source chars last ","range source chars ","range source ","range source [] "]}," RuboCop Cop Style RedundantStringEscape on_str":{"type":"method","name":"on_str","children":[],"call":["corrector remove_leading "," add_offense "," allowed_escape? ","range resize "," each_match_range ","str_contents_range source include? ","str_contents_range source "," str_contents_range ","node parent ","node character_literal? "," str_contents_range  source include? "," str_contents_range  source ","  str_contents_range  "]}," RuboCop Cop Style RedundantRegexpCharacterClass backslash_zero?":{"type":"method","name":"backslash_zero?","children":[],"call":["elem == "]}," RuboCop Cop Style RedundantCondition single_argument_method?":{"type":"method","name":"single_argument_method?","children":[],"call":["node arguments one? ","node arguments ","node method? ! ","node method? ","node send_type? "," argument_with_operator? ! "," argument_with_operator? ","node first_argument ","node arguments one? ! ","node send_type? ! "]}," RuboCop Cop Style OperatorMethodCall on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace "," add_offense ","rhs children first ","rhs children ","node loc dot ","node loc ","rhs nil? ","node receiver const_type? ","node receiver "," wrap_in_parentheses_if_chained "," anonymous_forwarding? "," method_call_with_parenthesized_arg? ","rhs ! ","node arguments one? ! ","node arguments one? ","node arguments ","node loc node loc dot  "]}," RuboCop Cop Style NegatedIfElseCondition unwrap_begin_nodes":{"type":"method","name":"unwrap_begin_nodes","children":[],"call":["node children first ","node children ","node kwbegin_type? ","node begin_type? ","node children first  children first ","node children first  children ","node children first  kwbegin_type? ","node children first  begin_type? "]}," RuboCop Cop Style MethodCallWithArgsParentheses OmitParentheses assignment_in_condition?":{"type":"method","name":"assignment_in_condition?","children":[],"call":["grandparent when_type? ","grandparent conditional? ","parent assignment? ","parent parent ","node parent ","parent parent  when_type? ","grandnode parent  when_type? ","parent parent  conditional? ","grandnode parent  conditional? ","node parent  assignment? ","node parent  node parent  ","node node parent  "]}," RuboCop Cop Style ExplicitBlockArgument autocorrect_incompatible_with":{"type":"method","name":"autocorrect_incompatible_with","children":[],"call":[]}," RuboCop Cop Style CollectionCompact to_enum_method?":{"type":"method","name":"to_enum_method?","children":[],"call":["TO_ENUM_METHODS  include? ","node children first method_name ","node children first ","node children ","node receiver method_name ","node receiver ","node receiver send_type? "]}," RuboCop Cop Style AccessModifierDeclarations add_range":{"type":"method","name":"add_range","children":[],"call":["range1 with ","(send\n  (lvar :range1) :end_pos) max ","range2 end_pos ","range1 end_pos ","(send\n  (lvar :range1) :begin_pos) min ","range2 begin_pos ","range1 begin_pos "]}," RuboCop Cop Style AccessModifierDeclarations range_with_comments":{"type":"method","name":"range_with_comments","children":[],"call":[" add_range ","ranges reduce ","element location expression ","element location ","(lvar :node) map "," processed_source ast_with_comments [] "," processed_source ast_with_comments "," processed_source "]}," RuboCop Cop FrozenStringLiteral leading_magic_comments":{"type":"method","name":"leading_magic_comments","children":[],"call":["MagicComment  parse "," leading_comment_lines map "," leading_comment_lines "]}," RuboCop Cop CommentsHelp comments_contain_disables?":{"type":"method","name":"comments_contain_disables?","children":[],"call":["node_range cover? ","disable_range cover? ","disabled_ranges any? "," find_end_line ","node source_range line ","node source_range "," processed_source disabled_line_ranges [] "," processed_source disabled_line_ranges "," processed_source "," processed_source disabled_line_ranges []  any? "]}," RuboCop Cop Lint UnusedMethodArgument autocorrect_incompatible_with":{"type":"method","name":"autocorrect_incompatible_with","children":[],"call":[]}," RuboCop Cop Lint RedundantRequireStatement redundant_feature?":{"type":"method","name":"redundant_feature?","children":[],"call":["feature_name == "," target_ruby_version >= "," target_ruby_version ","RUBY_22_LOADED_FEATURES  include? "," use_pretty_print_method? ! "," use_pretty_print_method? "," need_to_require_pp? ! "," need_to_require_pp? "]}," RuboCop Cop Lint RedundantDirGlobSort multiple_argument?":{"type":"method","name":"multiple_argument?","children":[],"call":["glob_method first_argument ","glob_method arguments count >= ","glob_method arguments count ","glob_method arguments "]}," RuboCop Cop Lint RedundantCopDisableDirective leave_free_comment?":{"type":"method","name":"leave_free_comment?","children":[],"call":["free_comment start_with? ! ","free_comment start_with? ","free_comment empty? ! ","free_comment empty? ","comment text gsub ","range source strip ","range source ","comment text ","comment text gsub  start_with? ! ","comment text gsub  start_with? ","comment text gsub  empty? ! ","comment text gsub  empty? "]}," RuboCop Cop Lint NestedMethodDefinition allowed_method_name?":{"type":"method","name":"allowed_method_name?","children":[],"call":[" matches_allowed_pattern? "," allowed_method? ","node method_name ","node method_node method_name  "]}," RuboCop Cop Lint EmptyConditionalBody else_branch?":{"type":"method","name":"else_branch?","children":[],"call":["node else_branch if_type? ! ","node else_branch if_type? ","node else_branch "]}," RuboCop Cop Lint EmptyConditionalBody empty_elsif_branch?":{"type":"method","name":"empty_elsif_branch?","children":[],"call":["else_branch body ! ","else_branch body ","else_branch if_type? ","node else_branch ","node else_branch  body ! ","node else_branch  body ","node else_branch  if_type? ","node node else_branch  "]}," RuboCop Cop Lint DuplicateRegexpCharacterClassElement start_with_escaped_zero_number?":{"type":"method","name":"start_with_escaped_zero_number?","children":[],"call":["next_child match? ","current_child == "]}," RuboCop Cop Lint DuplicateRegexpCharacterClassElement skip_expression?":{"type":"method","name":"skip_expression?","children":[],"call":["expr token == ","expr token ","expr type != ","expr type "]}," RuboCop Cop Lint DuplicateMethods found_sclass_method":{"type":"method","name":"found_sclass_method","children":[],"call":[" found_method ","singleton_receiver_node method_name ","singleton_receiver_node send_type? ","singleton_ancestor children [] ","singleton_ancestor children ","node each_ancestor find ","node each_ancestor ","singleton_ancestor children []  method_name ","singleton_ancestor children []  send_type? ","node each_ancestor find  children [] ","node each_ancestor find  children "]}," RuboCop Cop Lint DuplicateMagicComment register_offense":{"type":"method","name":"register_offense","children":[],"call":["corrector remove "," range_by_whole_lines "," add_offense "]}," RuboCop Cop Lint DuplicateMagicComment magic_comment_lines":{"type":"method","name":"magic_comment_lines","children":[],"call":["comment_lines [] << ","comment_lines [] ","magic_comment frozen_string_literal_specified? ","magic_comment encoding_specified? "," leading_magic_comments each with_index "," leading_magic_comments each "," leading_magic_comments "]}," RuboCop Cop Lint DuplicateMagicComment on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[" register_offense "," processed_source buffer line_range ","comment_line + "," processed_source buffer "," processed_source ","comment_lines [] each ","comment_lines [] ","comment_lines count <= ","comment_lines count "," magic_comment_lines each_value "," magic_comment_lines "," processed_source buffer source empty? "," processed_source buffer source "," processed_source buffer line_ processed_source buffer line_range  "]}," RuboCop Cop Layout SpaceInsideHashLiteralBraces enforce_no_space_style_for_empty_braces?":{"type":"method","name":"enforce_no_space_style_for_empty_braces?","children":[],"call":[" cop_config [] == "," cop_config [] "," cop_config "]}," RuboCop Cop Layout SpaceInsideHashLiteralBraces range_inside_hash":{"type":"method","name":"range_inside_hash","children":[],"call":[" range_between ","node location end begin_pos ","node location end ","node location ","node location begin end_pos ","node location begin ","node source_range ","node location begin nil? "]}," RuboCop Cop Layout SpaceInsideHashLiteralBraces check_whitespace_only_hash":{"type":"method","name":"check_whitespace_only_hash","children":[],"call":["corrector remove "," add_offense "," format ","range source match? ","range source "," range_inside_hash "," range_inside_hash  source match? "," range_inside_hash  source ","  range_inside_hash _inside_hash "]}," RuboCop ArgumentsFile read_as_arguments":{"type":"method","name":"read_as_arguments","children":[],"call":[]}," RuboCop ArgumentsEnv read_as_arguments":{"type":"method","name":"read_as_arguments","children":[],"call":[]}," RuboCop Cop Style RedundantStringEscape disabling_interpolation?":{"type":"method","name":"disabling_interpolation?","children":[],"call":["range adjust source match? ","range adjust source ","range adjust ","range source match? ","range source ","range adjust source == "]}," RuboCop Cop InternalAffairs ExampleHeredocDelimiter heredoc_closing_delimiter_range_from":{"type":"method","name":"heredoc_closing_delimiter_range_from","children":[],"call":["node location heredoc_end end adjust "," heredoc_delimiter_string_from length -@ "," heredoc_delimiter_string_from length "," heredoc_delimiter_string_from ","node location heredoc_end end ","node location heredoc_end ","node location "]}," RuboCop Cop InternalAffairs ExampleHeredocDelimiter heredoc_openning_delimiter_range_from":{"type":"method","name":"heredoc_openning_delimiter_range_from","children":[],"call":["node location expression begin adjust ","match_data end ","match_data begin ","node location expression begin ","node location expression ","node location ","node source match ","node source ","node source_range begin adjust ","node source_range begin ","node source_range ","node source match  end ","node source match  begin "]}," RuboCop Cop InternalAffairs ExampleHeredocDelimiter heredoc_delimiter_string_from":{"type":"method","name":"heredoc_delimiter_string_from","children":[],"call":["node source [] ","node source "]}," RuboCop Cop InternalAffairs ExampleHeredocDelimiter heredoc_node_from":{"type":"method","name":"heredoc_node_from","children":[],"call":["node first_argument ","node first_argument heredoc? ","node first_argument respond_to? "]}," RuboCop Cop InternalAffairs ExampleHeredocDelimiter expected_heredoc_delimiter?":{"type":"method","name":"expected_heredoc_delimiter?","children":[],"call":[" heredoc_delimiter_string_from == "," heredoc_delimiter_string_from "]}," RuboCop Cop InternalAffairs ExampleHeredocDelimiter expected_heredoc_delimiter_in_body?":{"type":"method","name":"expected_heredoc_delimiter_in_body?","children":[],"call":["line strip == ","line strip ","node location heredoc_body source lines any? ","node location heredoc_body source lines ","node location heredoc_body source ","node location heredoc_body ","node location "]}," RuboCop Cop InternalAffairs ExampleHeredocDelimiter autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","(send nil :heredoc_openning_delimiter_range_from\n  (lvar :node)) each "," heredoc_closing_delimiter_range_from "," heredoc_openning_delimiter_range_from ","(send nil :heredoc_opening_delimiter_range_from\n  (lvar :node)) each "," heredoc_opening_delimiter_range_from "]}," RuboCop Cop InternalAffairs ExampleHeredocDelimiter on_send":{"type":"method","name":"on_send","children":[],"call":[" autocorrect "," add_offense "," expected_heredoc_delimiter_in_body? "," expected_heredoc_delimiter? "," heredoc_node_from ","  heredoc_node_from _from "]}," RuboCop Cop InternalAffairs CreateEmptyFile on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace "," add_offense "," format ","node first_argument source ","node first_argument ","argument value empty? ","argument value ","argument str_type? ","node arguments [] ","node arguments ","node receiver ","node first_node arguments []  source ","node first_node arguments []  ","node arguments []  value empty? ","node arguments []  value ","node arguments []  str_type? ","node node arguments [] s [] ","node node arguments [] s "]}," CopHelper registry":{"type":"method","name":"registry","children":[],"call":["RuboCop Cop Registry  new ","cops compact! ","cops << "," cop_class ","cops include? ! ","cops include? ","RuboCop Cop Registry  global find_by_cop_name ","RuboCop Cop Registry  global "," configuration keys map "," configuration keys "," configuration ","(send\n  (lvar :keys) :map) flatten ","RuboCop Cop Registry  global find_cops_by_directive ","keys map ","(send\n  (lvar :keys) :map) flatten  compact! ","(send\n  (lvar :keys) :map) flatten  << ","(send\n  (lvar :keys) :map) flatten  include? ! ","(send\n  (lvar :keys) :map) flatten  include? "," configuration  configuration keys  map "," configuration  configuration keys  ","(send\n  (lvar : configuration keys ) :map) flatten ","RuboCop Cop Registry  global find_(send\n  (lvar :keys) :map) flatten _by_directive "," configuration keys  map "]}," CopHelper configuration":{"type":"method","name":"configuration","children":[],"call":["RuboCop Config  new ","Dir  pwd "," config "]}," RuboCop Cop Style RedundantEach remove_redundant_each":{"type":"method","name":"remove_redundant_each","children":[],"call":["corrector replace ","redundant_node loc selector ","redundant_node loc ","redundant_node method? ","corrector remove "]}," RuboCop Cop Style RedundantEach message":{"type":"method","name":"message","children":[],"call":["node method_name "]}," RuboCop Cop Style RedundantEach range":{"type":"method","name":"range","children":[],"call":["node loc selector ","node loc ","node loc dot join ","node loc dot ","node method? "]}," RuboCop Cop Style RedundantEach redundant_each_method":{"type":"method","name":"redundant_each_method","children":[],"call":["descendant method? ","descendant method_name to_s start_with? ","descendant method_name to_s ","descendant method_name ","node method? ","descendant parent block_type? ","descendant parent ","node each_descendant detect ","node each_descendant ","ancestor method? ","RESTRICT_ON_SEND  include? ","ancestor method_name ","node each_ancestor detect ","node each_ancestor ","node parent block_type? ! ","node parent block_type? ","node parent ","prev_method method? ","prev_method method_name to_s start_with? ","prev_method method_name to_s ","prev_method method_name ","prev_method last_argument ","prev_method parent block_type? ","prev_method parent ","prev_method send_type? ! ","prev_method send_type? ","node children first ","node children ","ancestor receiver == ","ancestor receiver ","(send\n  (lvar :node) :parent) ! ","node last_argument ","node children first  method? ","node children first  method_name to_s start_with? ","node children first  method_name to_s ","node children first  method_name ","node children first  last_argument ","node children first  parent block_type? ","node children first  parent ","node children first  send_type? ! ","node children first  send_type? "]}," RuboCop Cop Style RedundantEach on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace ","node loc selector ","node loc "," remove_redundant_each ","node method_name "," add_offense "," message "," range "," redundant_each_method ","  range  "]}," RuboCop Cop Style IfWithBooleanLiteralBranches multiple_elsif?":{"type":"method","name":"multiple_elsif?","children":[],"call":["parent elsif? ","parent if_type? ","node parent ","node parent  elsif? ","node parent  if_type? ","node node parent  "]}," RuboCop Cop Style GuardClause and_or_guard_clause?":{"type":"method","name":"and_or_guard_clause?","children":[],"call":["parent or_type? ","parent and_type? ","guard_clause parent ","guard_clause parent  or_type? ","guard_clause parent  and_type? ","guard_clause guard_clause parent  "]}," RuboCop Cop Style GuardClause branch_to_remove":{"type":"method","name":"branch_to_remove","children":[],"call":["node else_branch ","node if_branch "]}," RuboCop Cop Style GuardClause autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector remove "," branch_to_remove ","node loc else ","node loc ","node else? ","node loc end ","corrector replace ","node loc keyword join ","condition loc expression ","condition loc ","node loc keyword "," autocorrect_heredoc_argument ","else_branch last_argument ","if_branch last_argument ","node else_branch ","node if_branch "," heredoc? "," range_of_branch_to_remove ","condition source_range ","node loc begin ","node else_branch  last_argument ","node if_branch  last_argument ","node node else_branch  ","node node if_branch  "]}," RuboCop Cop Style GuardClause check_ending_body":{"type":"method","name":"check_ending_body","children":[],"call":[" check_ending_if ","body children last ","body children ","body begin_type? ","body if_type? ","body nil? "]}," RuboCop Cop Registry disabled":{"type":"method","name":"disabled","children":[],"call":[" enabled? "," reject ","@disabled_cache [] "]}," RuboCop Cop SurroundingSpace no_character_between?":{"type":"method","name":"no_character_between?","children":[],"call":["left_bracket_token end_pos == ","right_bracket_token begin_pos ","left_bracket_token end_pos "]}," RuboCop Cop Lint RedundantCopDisableDirective expected_final_disable?":{"type":"method","name":"expected_final_disable?","children":[],"call":["line_range max == ","line_range max "," processed_source registry enabled? ! "," processed_source registry enabled? "," config "," processed_source registry "," processed_source ","RuboCop Cop Registry  global find_by_cop_name ","RuboCop Cop Registry  global "]}," RuboCop Cop Lint MissingCopEnableDirective acceptable_range?":{"type":"method","name":"acceptable_range?","children":[],"call":["line_range max == ","line_range max "," processed_source registry enabled? ! "," processed_source registry enabled? "," config "," processed_source registry "," processed_source ","RuboCop Cop Registry  global find_by_cop_name ","RuboCop Cop Registry  global ","line_range min == ","line_range min ","line_range max - < "," max_range + "," max_range ","line_range max - "]}," RuboCop CommentConfig inject_disabled_cops_directives":{"type":"method","name":"inject_disabled_cops_directives","children":[],"call":["analyses []= "," analyze_cop ","DirectiveComment  new ","ConfigDisabledCopDirectiveComment  new ","cop cop_name ","analyses [] "," registry disabled each "," registry disabled "," config "," registry "]}," RuboCop CommentConfig ConfigDisabledCopDirectiveComment initialize":{"type":"method","name":"initialize","children":[],"call":["Loc  new ","Expression  new "]}," RuboCop Server Core use_json_format?":{"type":"method","name":"use_json_format?","children":[],"call":["JSON_FORMATS  include? ","ARGV  [] ","index + ","ARGV  index ","ARGV  include? ","ARGV  index  + ","ARGV  ARGV  index  "]}," RuboCop Cop Style RedundantRegexpEscape char_class_begins_or_ends_with_escaped_hyphen?":{"type":"method","name":"char_class_begins_or_ends_with_escaped_hyphen?","children":[],"call":["node source [] == ","node source [] ","index + ","node source "," contents_range source [] == "," contents_range source [] "," contents_range source "," contents_range ","index - ","content [] != ","content [] ","index < ","content [] == ","  contents_range source s_range source [] == ","  contents_range source s_range source [] ","  contents_range source s_range source ","  contents_range source s_range "," contents_range source  [] != "," contents_range source  [] "," contents_range source  [] == "]}," RuboCop Cop Style OperatorMethodCall wrap_in_parentheses_if_chained":{"type":"method","name":"wrap_in_parentheses_if_chained","children":[],"call":["corrector wrap ","corrector insert_after ","ParenthesesCorrector  correct ","node loc selector ","node loc ","node parent "]}," RuboCop Cop Style HashEachMethods format_message":{"type":"method","name":"format_message","children":[],"call":[" format ","method_name [] "]}," RuboCop Cop Style HashEachMethods register_kv_with_block_pass_offense":{"type":"method","name":"register_kv_with_block_pass_offense","children":[],"call":["corrector replace ","method [] "," add_offense "," format_message ","target loc selector with ","node parent loc selector end_pos ","node parent loc selector ","node parent loc ","node parent ","target loc selector ","target loc "," allowed_receiver? ","node parent receiver receiver ","node parent receiver "]}," RuboCop Cop Style HashEachMethods on_block_pass":{"type":"method","name":"on_block_pass","children":[],"call":[" register_kv_with_block_pass_offense "," kv_each_with_block_pass ","node parent "]}," RuboCop Cop VisibilityHelp node_visibility_from_visibility_block":{"type":"method","name":"node_visibility_from_visibility_block","children":[],"call":[" find_visibility_start "]}," RuboCop Cop VisibilityHelp node_visibility_from_visibility_inline_on_method_name":{"type":"method","name":"node_visibility_from_visibility_inline_on_method_name","children":[],"call":[" visibility_inline_on_method_name? ","node method_name ","node right_siblings reverse find ","node right_siblings reverse ","node right_siblings "]}," RuboCop Cop VisibilityHelp node_visibility_from_visibility_inline_on_def":{"type":"method","name":"node_visibility_from_visibility_inline_on_def","children":[],"call":["parent method_name "," visibility_inline_on_def? ","node parent ","node parent  method_name ","node node parent  "]}," RuboCop Cop VisibilityHelp node_visibility_from_visibility_inline":{"type":"method","name":"node_visibility_from_visibility_inline","children":[],"call":[" node_visibility_from_visibility_inline_on_method_name "," node_visibility_from_visibility_inline_on_def ","node def_type? "]}," RuboCop Cop RangeHelp add_range":{"type":"method","name":"add_range","children":[],"call":["range1 with ","(send\n  (lvar :range1) :end_pos) max ","range2 end_pos ","range1 end_pos ","(send\n  (lvar :range1) :begin_pos) min ","range2 begin_pos ","range1 begin_pos "]}," RuboCop Cop RangeHelp range_with_comments":{"type":"method","name":"range_with_comments","children":[],"call":[" add_range ","ranges reduce ","element location expression ","element location ","(lvar :node) map ","@processed_source ast_with_comments [] ","@processed_source ast_with_comments ","(lvar :node) map  reduce "]}," RuboCop Cop RangeHelp range_with_comments_and_lines":{"type":"method","name":"range_with_comments_and_lines","children":[],"call":[" range_by_whole_lines "," range_with_comments "]}," RuboCop Cop Lint DuplicateMethods method_key":{"type":"method","name":"method_key","children":[],"call":["ancestor_def method_name ","node each_ancestor first ","node each_ancestor ","node each_ancestor first  method_name "]}," RuboCop Cop Layout SpaceInsidePercentLiteralDelimiters body_range":{"type":"method","name":"body_range","children":[],"call":["node location expression with ","node location end begin_pos ","node location end ","node location ","node location begin end_pos ","node location begin ","node location expression ","node source_range with ","node source_range "]}," RuboCop Cop Layout SpaceInsidePercentLiteralDelimiters add_offenses_for_blank_spaces":{"type":"method","name":"add_offenses_for_blank_spaces","children":[],"call":["corrector remove "," add_offense ","range source strip empty? ! ","range source strip empty? ","range source strip ","range source ","range source empty? "," body_range "," body_range  source strip empty? ! "," body_range  source strip empty? "," body_range  source strip "," body_range  source "," body_range  source empty? "," body_ body_range  "]}," RuboCop Cop Layout LineContinuationLeadingSpace autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," range_between ","corrector remove "]}," RuboCop OptimizedPatterns from":{"type":"method","name":"from","children":[],"call":[]}," RuboCop OptimizedPatterns PatternsSet partition_patterns":{"type":"method","name":"partition_patterns","children":[],"call":["@patterns << ","@strings << ","pattern match? ! ","pattern match? ","pattern is_a? ","patterns each "]}," RuboCop OptimizedPatterns PatternsSet match?":{"type":"method","name":"match?","children":[],"call":["PathUtil  match_path? ","@patterns any? ","@strings include? "]}," RuboCop OptimizedPatterns PatternsSet initialize":{"type":"method","name":"initialize","children":[],"call":[" partition_patterns ","Set  new "]}," RuboCop Formatter DisabledConfigFormatter filtered_config":{"type":"method","name":"filtered_config","children":[],"call":["rejected_keys include? ","cfg reject ","rejected_keys << "," auto_gen_enforced_style? "]}," RuboCop Formatter DisabledConfigFormatter auto_gen_enforced_style?":{"type":"method","name":"auto_gen_enforced_style?","children":[],"call":["@options fetch "]}," RuboCop Cop Style SafeNavigation extract_body":{"type":"method","name":"extract_body","children":[],"call":["node node_parts [] ","node node_parts ","branch nil_type? ! ","branch nil_type? ","node branches find ","node branches ","node ternary? ","node if_type? "]}," RuboCop Cop Style RequireOrder swap":{"type":"method","name":"swap","children":[],"call":["corrector remove ","corrector insert_before ","range2 source "]}," RuboCop Cop Style RequireOrder in_same_section?":{"type":"method","name":"in_same_section?","children":[],"call":["node1 location expression with source include? ! ","node1 location expression with source include? ","node1 location expression with source ","node1 location expression with ","node2 location expression end_pos ","node2 location expression ","node2 location ","node1 location expression ","node1 location ","node1 source_range with source include? ! ","node1 source_range with source include? ","node1 source_range with source ","node1 source_range with ","node2 source_range end_pos ","node2 source_range ","node1 source_range "]}," RuboCop Cop Style RequireOrder find_previous_older_sibling":{"type":"method","name":"find_previous_older_sibling","children":[],"call":["node first_argument source < ","sibling first_argument source ","sibling first_argument ","node first_argument source ","node first_argument "," in_same_section? ","sibling method? ","node method_name ","sibling send_type? ","node left_siblings reverse find ","node left_siblings reverse ","node left_siblings ","sibling receiver ! ","sibling receiver ","sibling arguments? "," sibling_node "," search_node left_siblings reverse find "," search_node left_siblings reverse "," search_node left_siblings "," search_node ","sibling is_a? ","node first_argument value < ","sibling first_argument value ","node first_argument value ","sibling first_argument str_type? ","node first_argument str_type? "," sibling_node  first_argument source "," sibling_node  first_argument "," sibling_node  method? "," sibling_node  send_type? ","node left_ sibling_node s reverse find ","node left_ sibling_node s reverse ","node left_ sibling_node s "," sibling_node  receiver ! "," sibling_node  receiver "," sibling_node  arguments? ","  sibling_node _node "," search_node left_ sibling_node s reverse find "," search_node left_ sibling_node s reverse "," search_node left_ sibling_node s "," sibling_node  is_a? "," sibling_node  first_argument value "," sibling_node  first_argument str_type? "]}," RuboCop Cop Style RequireOrder on_send":{"type":"method","name":"on_send","children":[],"call":[" swap "," range_with_comments_and_lines "," add_offense ","node method_name "," find_previous_older_sibling ","node parent ","node parent if_type? "," format "," not_modifier_form? ","node arguments? ","corrector swap "," autocorrect "," find_ find_previous_older_sibling  "]}," RuboCop Cop Style RedundantReturn on_send":{"type":"method","name":"on_send","children":[],"call":[" check_branch ","parent body ","parent block_type? ","node parent ","node parent  body ","node parent  block_type? ","node node parent  "]}," RuboCop Cop Style RedundantConstantBase used_in_super_class_part?":{"type":"method","name":"used_in_super_class_part?","children":[],"call":["descendant equal? ","class_node parent_class "]}," RuboCop Cop Style RedundantConstantBase module_nesting_ancestors_of":{"type":"method","name":"module_nesting_ancestors_of","children":[],"call":[" used_in_super_class_part? ","ancestor class_type? ","node each_ancestor reject ","node each_ancestor "]}," RuboCop Cop Style RedundantConstantBase bad?":{"type":"method","name":"bad?","children":[],"call":[" module_nesting_ancestors_of none? "," module_nesting_ancestors_of "]}," RuboCop Cop Style RedundantConstantBase on_cbase":{"type":"method","name":"on_cbase","children":[],"call":["corrector remove "," add_offense "," bad? "," lint_constant_resolution_cop_enabled? "]}," RuboCop Cop Style GuardClause remove_whole_lines":{"type":"method","name":"remove_whole_lines","children":[],"call":["corrector remove "," range_by_whole_lines "]}," RuboCop Cop Style GuardClause autocorrect_heredoc_argument":{"type":"method","name":"autocorrect_heredoc_argument","children":[],"call":["corrector insert_after ","leave_branch source ","heredoc_branch last_argument loc heredoc_end ","heredoc_branch last_argument loc ","heredoc_branch last_argument "," remove_whole_lines "," branch_to_remove source_range "," branch_to_remove ","node loc end ","node loc ","node loc else ","leave_branch source_range "," range_of_branch_to_remove ","node else? "]}," RuboCop Cop Style ArrayIntersect message":{"type":"method","name":"message","children":[],"call":[" format "," straight? "]}," RuboCop Cop Style ArrayIntersect straight?":{"type":"method","name":"straight?","children":[],"call":["STRAIGHT_METHODS  include? ","method_name to_sym "]}," RuboCop Cop Style ArrayIntersect bad_intersection_check?":{"type":"method","name":"bad_intersection_check?","children":[],"call":[" regular_bad_intersection_check? "," active_support_bad_intersection_check? "," active_support_extensions_enabled? "]}," RuboCop Cop Style ArrayIntersect on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace ","argument source ","receiver source "," straight? "," add_offense "," message "," bad_intersection_check? ","parent numblock_type? ","parent block_type? ","node parent ","  message  ","node parent  numblock_type? ","node parent  block_type? ","node node parent  "]}," RuboCop Cop Registry find_cops_by_directive":{"type":"method","name":"find_cops_by_directive","children":[],"call":[" cops_for_department "," find_by_cop_name ","  find_by_cop_name s_for_department "," find_by_ find_by_cop_name _name "]}," RuboCop Cop Registry cops_for_department":{"type":"method","name":"cops_for_department","children":[],"call":["cop department == ","department to_sym ","cop department "," cops select "," cops "]}," RuboCop Cop StatementModifier method_source":{"type":"method","name":"method_source","children":[],"call":[" range_between source "," range_between ","if_body loc selector end_pos ","if_body loc selector ","if_body loc ","if_body loc expression begin_pos ","if_body loc expression ","if_body source_range begin_pos ","if_body source_range "]}," RuboCop Cop StatementModifier if_body_source":{"type":"method","name":"if_body_source","children":[],"call":["if_body source ","if_body arguments map join ","if_body arguments map ","if_body arguments "," method_source ","if_body last_argument pairs last value_omission? ","if_body last_argument pairs last ","if_body last_argument pairs ","if_body last_argument ","if_body call_type? "]}," RuboCop Cop HashShorthandSyntax find_ancestor_send_node":{"type":"method","name":"find_ancestor_send_node","children":[],"call":["(lvar :ancestor) ! ","node parent parent ","node parent "," brackets? ! "," brackets? ","(lvar :node parent parent ) ! "]}," RuboCop Cop HashShorthandSyntax def_node_that_require_parentheses":{"type":"method","name":"def_node_that_require_parentheses","children":[],"call":["def_node arguments empty? ","def_node arguments ","node each_ancestor first ","node each_ancestor "," without_parentheses_call_expr_follows? "," find_ancestor_send_node ","last_pair key source == ","last_pair value source ","last_pair value ","last_pair key source ","last_pair key ","node parent pairs last ","node parent pairs ","node parent ","DefNode  new "," find_ancestor_method_dispatch_node "," method_dispatch_as_argument? "," last_expression? ","node parenthesized? ! ","node parenthesized? ","node respond_to? "," method_dispatch_as_argument? ! ","dispatch_node parenthesized? "," parentheses? ","dispatch_node parent ","dispatch_node assignment_method? ","node each_ancestor first  arguments empty? ","node each_ancestor first  arguments "," find_ancestor_ find_ancestor_send_node  ","node parent pairs last  key source == ","node parent pairs last  value source ","node parent pairs last  value ","node parent pairs last  key source ","node parent pairs last  key "," find_ancestor_ find_ancestor_method_dispatch_node  "," find_ancestor_method_ find_ancestor_method_dispatch_node  "," find_ancestor_method_dispatch_node  parenthesized? "," find_ancestor_method_dispatch_node  parent "," find_ancestor_method_dispatch_node  assignment_method? "]}," RuboCop Cop Lint Void check_void_expression":{"type":"method","name":"check_void_expression","children":[],"call":[" add_offense "," format ","node source ","node lambda_or_proc? ","node defined_type? "," autocorrect_void_expression "]}," RuboCop Cop Lint SafeNavigationChain find_brackets":{"type":"method","name":"find_brackets","children":[],"call":["node method? ","node send_type? ","send_node descendants detect ","send_node descendants ","send_node method? "]}," RuboCop Cop Lint ParenthesesAsGroupedExpression first_argument_block_type?":{"type":"method","name":"first_argument_block_type?","children":[],"call":["first_arg numblock_type? ","first_arg block_type? "]}," RuboCop Cop InternalAffairs LambdaOrProc on_or":{"type":"method","name":"on_or","children":[],"call":["corrector replace "," add_offense "," format ","lhs receiver source ","lhs receiver ","lhs receiver source_range join ","rhs source_range end ","rhs source_range ","lhs receiver source_range "," lambda_or_proc "," add_lhs receiver source_range join  "]}," RuboCop Cop MultilineLiteralBraceCorrector use_heredoc_argument_method_chain?":{"type":"method","name":"use_heredoc_argument_method_chain?","children":[],"call":["first_argument heredoc? ","first_argument str_type? ","parent call_type? "," node first_argument "," node "," node respond_to? "," node first_argument  heredoc? "," node first_argument  str_type? "," node  node first_argument  "]}," RuboCop Cop MultilineLiteralBraceCorrector correct_heredoc_argument_method_chain":{"type":"method","name":"correct_heredoc_argument_method_chain","children":[],"call":["corrector insert_after ","chained_method source ","corrector remove "," range_between ","parent loc expression end_pos ","parent loc expression ","parent loc ","parent loc dot begin_pos ","parent loc dot "," use_heredoc_argument_method_chain? "," node parent "," node ","parent source_range end_pos ","parent source_range "," range_between  source "," node parent  loc expression end_pos "," node parent  loc expression "," node parent  loc "," node parent  loc dot begin_pos "," node parent  loc dot "," node  node parent  "," node parent  source_range end_pos "," node parent  source_range "]}," RuboCop FilePatterns partition_patterns":{"type":"method","name":"partition_patterns","children":[],"call":["@patterns << ","@strings << ","pattern match? ! ","pattern match? ","pattern is_a? ","patterns each "]}," RuboCop FilePatterns match?":{"type":"method","name":"match?","children":[],"call":["PathUtil  match_path? ","@patterns any? ","@strings include? "]}," RuboCop FilePatterns initialize":{"type":"method","name":"initialize","children":[],"call":[" partition_patterns ","Set  new "]}," RuboCop FilePatterns from":{"type":"method","name":"from","children":[],"call":[]}," CopsDocumentationGenerator footer_for_department":{"type":"method","name":"footer_for_department","children":[],"call":["File  exist? ","Dir  pwd "," department_to_basename ","department == "]}," CopsDocumentationGenerator configuration_name":{"type":"method","name":"configuration_name","children":[],"call":[" department_to_basename ","name == "]}," RuboCop Cop Util include_or_equal?":{"type":"method","name":"include_or_equal?","children":[],"call":["source include? ","source is_a? ","source == "]}," RuboCop Cop Util any_descendant?":{"type":"method","name":"any_descendant?","children":[],"call":["node each_descendant "," block_given? "]}," RuboCop Cop Style RequireOrder sibling_node":{"type":"method","name":"sibling_node","children":[],"call":[" if_inside_only_require ","node if_type? "," not_modifier_form? "]}," RuboCop Cop Style RequireOrder search_node":{"type":"method","name":"search_node","children":[],"call":["node parent ","node parent if_type? "]}," RuboCop Cop Style RequireOrder not_modifier_form?":{"type":"method","name":"not_modifier_form?","children":[],"call":["node modifier_form? ! ","node modifier_form? ","node if_type? "]}," RuboCop Cop Style RedundantDoubleSplatHashBraces on_hash":{"type":"method","name":"on_hash","children":[],"call":["corrector replace ","node pairs map join ","node pairs map ","node pairs "," add_offense "," double_splat_hash_braces? ","node parent ","node pairs any? ","node pairs empty? ","node children map join ","node children map ","node children ","corrector remove "," closing_brace "," opening_brace ","parent loc operator ","parent loc ","parent kwsplat_type? ","node node parent  ","node parent  loc operator ","node parent  loc ","node parent  kwsplat_type? "]}," RuboCop Cop Style RedundantConstantBase lint_constant_resolution_config":{"type":"method","name":"lint_constant_resolution_config","children":[],"call":[" config for_cop "," config "]}," RuboCop Cop Style RedundantConstantBase lint_constant_resolution_cop_enabled?":{"type":"method","name":"lint_constant_resolution_cop_enabled?","children":[],"call":[" lint_constant_resolution_config fetch "," lint_constant_resolution_config "]}," RuboCop Cop Style GuardClause heredoc?":{"type":"method","name":"heredoc?","children":[],"call":["argument heredoc? ","argument respond_to? "]}," RuboCop Cop Style ConcatArrayLiterals preferred_method":{"type":"method","name":"preferred_method","children":[],"call":["(send\n  (send\n    (lvar :node) :arguments) :map) join ","arg children map ","arg children ","node arguments map ","node arguments ","arg children map map ","arg percent_literal? ","child value inspect ","child value "]}," RuboCop Cop Style ConcatArrayLiterals offense_range":{"type":"method","name":"offense_range","children":[],"call":["node loc selector join ","node source_range end ","node source_range ","node loc selector ","node loc "]}," RuboCop Cop Style ConcatArrayLiterals on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace "," add_offense "," format "," preferred_method ","node arguments any? ","node arguments ","offense source "," offense_range ","node arguments all? ","node arguments empty? "," percent_literals_includes_only_basic_literals? ","corrector remove ","argument loc end ","argument loc ","argument loc begin ","node arguments each ","node loc selector ","node loc "," add_ offense_range  ","  preferred_method red_method "," offense_range  source ","  offense_range _range "]}," RuboCop Cop RescueNode modifier_locations":{"type":"method","name":"modifier_locations","children":[],"call":[" processed_source tokens select map! "," processed_source tokens select "," processed_source tokens "," processed_source "]}," RuboCop Cop FirstElementLineBreak last_line":{"type":"method","name":"last_line","children":[],"call":["(lvar :ignore_last) max ","nodes map "]}," RuboCop Cop AnnotationComment regex":{"type":"method","name":"regex","children":[],"call":["Regexp  new ","Regexp  union source ","Regexp  union ","w length -@ ","w length "," keywords sort_by "," keywords ","KEYWORDS_REGEX_CACHE  [] "]}," RuboCop Cop Lint SafeNavigationChain brackets?":{"type":"method","name":"brackets?","children":[],"call":["send_node method? "]}," RuboCop Cop Lint DuplicateMethods location":{"type":"method","name":"location","children":[],"call":["node loc expression ","node loc ","node loc keyword join ","node loc name ","node loc keyword ","DEF_TYPES  include? ","node type ","node source_range "]}," RuboCop Cop Layout MultilineMethodParameterLineBreaks ignore_last_element?":{"type":"method","name":"ignore_last_element?","children":[],"call":[" cop_config [] ! ! "," cop_config [] ! "," cop_config [] "," cop_config "]}," RuboCop Cop Layout MultilineMethodArgumentLineBreaks ignore_last_element?":{"type":"method","name":"ignore_last_element?","children":[],"call":[" cop_config [] ! ! "," cop_config [] ! "," cop_config [] "," cop_config "]}," RuboCop Cop Layout MultilineHashKeyLineBreaks ignore_last_element?":{"type":"method","name":"ignore_last_element?","children":[],"call":[" cop_config [] ! ! "," cop_config [] ! "," cop_config [] "," cop_config "]}," RuboCop Cop Layout MultilineArrayLineBreaks ignore_last_element?":{"type":"method","name":"ignore_last_element?","children":[],"call":[" cop_config [] ! ! "," cop_config [] ! "," cop_config [] "," cop_config "]}," RuboCop Cop Layout FirstMethodParameterLineBreak ignore_last_element?":{"type":"method","name":"ignore_last_element?","children":[],"call":[" cop_config [] ! ! "," cop_config [] ! "," cop_config [] "," cop_config "]}," RuboCop Cop Layout FirstMethodArgumentLineBreak ignore_last_element?":{"type":"method","name":"ignore_last_element?","children":[],"call":[" cop_config [] ! ! "," cop_config [] ! "," cop_config [] "," cop_config "]}," RuboCop Cop Layout FirstHashElementLineBreak ignore_last_element?":{"type":"method","name":"ignore_last_element?","children":[],"call":[" cop_config [] ! ! "," cop_config [] ! "," cop_config [] "," cop_config "]}," RuboCop Cop Layout FirstArrayElementLineBreak ignore_last_element?":{"type":"method","name":"ignore_last_element?","children":[],"call":[" cop_config [] ! ! "," cop_config [] ! "," cop_config [] "," cop_config "]}," RuboCop Cop Commissioner invoke_with_argument":{"type":"method","name":"invoke_with_argument","children":[],"call":["cop send "," with_cop_error_handling ","cops each "]}," RuboCop Cop Base current_offenses":{"type":"method","name":"current_offenses","children":[],"call":[]}," RuboCop Cop Base current_corrector":{"type":"method","name":"current_corrector","children":[],"call":["Corrector  new ","@processed_source valid_syntax? "]}," RuboCop ConfigLoader inject_defaults!":{"type":"method","name":"inject_defaults!","children":[],"call":[" puts "," debug? ","ConfigLoader  merge_with_default "," load_file ","File  join "]}," RuboCop Config clusivity_config_for_badge?":{"type":"method","name":"clusivity_config_for_badge?","children":[],"call":["@clusivity_config_exists_cache []= ","cop_config [] ","badge to_s "," for_badge ","exists nil? ","@clusivity_config_exists_cache [] ","@clusivity_config_@clusivity_config_exists_cache [] _cache []= "," for_badge  [] ","@clusivity_config_exists_cache []  nil? ","@clusivity_config_@clusivity_config_exists_cache [] _cache [] "]}," RuboCop Cop Style Documentation include_statement_only?":{"type":"method","name":"include_statement_only?","children":[],"call":[" include_statement_only? ","body children all? ","body children ","body respond_to? "," include_statement? "]}," RuboCop Runner except_redundant_cop_disable_directive?":{"type":"method","name":"except_redundant_cop_disable_directive?","children":[],"call":["(send\n  (send\n    (ivar :@options) :[]\n    (sym :except)) :&\n  (const nil :REDUNDANT_COP_DISABLE_DIRECTIVE_RULES)) any? ","@options [] & ","@options [] "]}," RuboCop PathUtil glob?":{"type":"method","name":"glob?","children":[],"call":["path match? "]}," RuboCop Cop Style ZeroLengthPredicate check_nonzero_length_comparison":{"type":"method","name":"check_nonzero_length_comparison","children":[],"call":["corrector replace "," replacement ","node parent "," add_offense "," format "," non_polymorphic_collection? "," nonzero_length_comparison ","  nonzero_length_comparison  "]}," RuboCop Cop Style ZeroLengthPredicate check_zero_length_comparison":{"type":"method","name":"check_zero_length_comparison","children":[],"call":["corrector replace "," replacement ","node parent "," add_offense "," format "," non_polymorphic_collection? "," zero_length_comparison ","  zero_length_comparison  "]}," RuboCop Cop Style YodaExpression offended_nodes":{"type":"method","name":"offended_nodes","children":[],"call":["Set  new compare_by_identity ","Set  new "]}," RuboCop Cop Style YodaExpression offended_ancestor?":{"type":"method","name":"offended_ancestor?","children":[],"call":["node each_ancestor any? ","node each_ancestor "]}," RuboCop Cop Style YodaExpression supported_operators":{"type":"method","name":"supported_operators","children":[],"call":[" Array "," cop_config [] "," cop_config "]}," RuboCop Cop Style YodaExpression on_send":{"type":"method","name":"on_send","children":[],"call":[" offended_nodes add "," offended_nodes ","corrector swap "," add_offense "," format ","rhs source "," offended_ancestor? ","rhs numeric_type? ","lhs numeric_type? ! ","lhs numeric_type? ","node first_argument ","node receiver "," supported_operators include? ","node method_name to_s ","node method_name "," supported_operators "," yoda_expression_constant? ","node first_argument  source ","node first_argument  numeric_type? ","node receiver  numeric_type? ! ","node receiver  numeric_type? "]}," RuboCop Cop Style YodaExpression on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[]}," RuboCop Cop Style WordArray within_2d_array_of_complex_content?":{"type":"method","name":"within_2d_array_of_complex_content?","children":[],"call":[" complex_content? ","subarray values ","parent values any? ","parent values ","parent values all? ","parent array_type? ","node parent ","node parent  values any? ","node parent  values ","node parent  values all? ","node parent  array_type? ","node node parent  "]}," RuboCop Cop Style SignalException custom_fail_defined?":{"type":"method","name":"custom_fail_defined?","children":[],"call":[" custom_fail_methods any? "," custom_fail_methods "," processed_source ast "," processed_source "," processed_source  processed_source ast  "]}," RuboCop Cop Style SelectByRegexp opposite?":{"type":"method","name":"opposite?","children":[],"call":["regexp_method_send_node method? ","regexp_method_send_node send_type? "]}," RuboCop Cop Style MinMaxComparison preferred_method":{"type":"method","name":"preferred_method","children":[],"call":["LESS_OPERATORS  include? ","rhs == ","lhs == ","GRATER_OPERATORS  include? "]}," RuboCop Cop Style MinMaxComparison on_if":{"type":"method","name":"on_if","children":[],"call":["corrector replace "," add_offense "," format ","rhs source ","lhs source "," preferred_method ","node else_branch ","node if_branch ","COMPARISON_OPERATORS  include? ","node condition "," autocorrect ","  preferred_method  ","node node else_branch  ","node node if_branch  "]}," RuboCop Cop Style MethodDefParentheses anonymous_arguments?":{"type":"method","name":"anonymous_arguments?","children":[],"call":["last_argument name nil? ","last_argument name ","last_argument blockarg_type? ","node arguments last ","node arguments ","arg kwrestarg_type? ","arg restarg_type? ","arg forward_arg_type? ","node arguments any? ","node arguments last  name nil? ","node arguments last  name ","node arguments last  blockarg_type? "]}," RuboCop Cop Style MapToSet autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","map loc selector ","map loc ","corrector remove "," range_with_surrounding_space "," range_between ","to_set loc selector end_pos ","to_set loc selector ","to_set loc ","to_set loc dot begin_pos ","to_set loc dot "]}," RuboCop Cop Style MapToSet on_send":{"type":"method","name":"on_send","children":[],"call":[" autocorrect ","to_set_node block_node "," add_offense ","map_node loc selector ","map_node loc "," format ","map_node loc selector source "," map_to_set? "]}," RuboCop Cop Style IdenticalConditionalBranches single_child_branch?":{"type":"method","name":"single_child_branch?","children":[],"call":["branch_node children size == ","branch_node children size ","branch_node children ","branch_node begin_type? ! ","branch_node begin_type? "]}," RuboCop Cop Style IdenticalConditionalBranches last_child_of_parent?":{"type":"method","name":"last_child_of_parent?","children":[],"call":["parent child_nodes last == ","parent child_nodes last ","parent child_nodes ","node parent ","node parent  child_nodes last == ","node parent  child_nodes last ","node parent  child_nodes ","node node parent  "]}," RuboCop Cop Style GuardClause range_of_branch_to_remove":{"type":"method","name":"range_of_branch_to_remove","children":[],"call":["branch source_range ","node else_branch ","node if_branch "]}," RuboCop Cop Style ConcatArrayLiterals percent_literals_includes_only_basic_literals?":{"type":"method","name":"percent_literals_includes_only_basic_literals?","children":[],"call":["child sym_type? ","child str_type? ","arg children all? ","arg children ","node arguments select all? ","node arguments select ","node arguments "]}," RuboCop Cop Lint OutOfRangeRegexpRef patterns":{"type":"method","name":"patterns","children":[],"call":[" patterns ","pattern children ","pattern type ","pattern_node node_parts [] ","pattern_node node_parts "," pattern_node node_parts [] s ","pattern_node node_parts []  children ","pattern_node node_parts []  type ","pattern_node node_parts [] _node node_parts [] ","pattern_node node_parts [] _node node_parts "]}," RuboCop Cop Lint OutOfRangeRegexpRef on_in_pattern":{"type":"method","name":"on_in_pattern","children":[],"call":["(send\n  (lvar :regexp_patterns) :map) compact max ","(send\n  (lvar :regexp_patterns) :map) compact "," check_regexp ","regexp_patterns map "," patterns select "," patterns "," regexp_patterns ","(send\n  (lvar :regexp_patterns) :filter_map) max ","regexp_patterns filter_map ","(send\n  (lvar : patterns select ) :map) compact max ","(send\n  (lvar : regexp_patterns ) :map) compact max ","(send\n  (lvar : patterns select ) :map) compact ","(send\n  (lvar : regexp_patterns ) :map) compact "," patterns select  map "," regexp_patterns  map ","  patterns select  ","  regexp_patterns  ","(send\n  (lvar : patterns select ) :filter_map) max ","(send\n  (lvar : regexp_patterns ) :filter_map) max "," patterns select  filter_map "," regexp_patterns  filter_map "]}," RuboCop Cop Layout TrailingWhitespace heredocs":{"type":"method","name":"heredocs","children":[],"call":[" extract_heredocs "," processed_source ast "," processed_source "]}," RuboCop Cop Layout LineContinuationSpacing ignored_ranges":{"type":"method","name":"ignored_ranges","children":[],"call":[" string_literal_ranges + "," comment_ranges "," processed_source comments "," processed_source "," string_literal_ranges "," processed_source ast "," ignored_literal_ranges + "," ignored_literal_ranges "]}," RuboCop Cop Layout ClassStructure marked_as_private_constant?":{"type":"method","name":"marked_as_private_constant?","children":[],"call":["arg value == ","arg value ","arg str_type? ","arg sym_type? ","node arguments any? ","node arguments ","node method? "]}," RuboCop Cop Layout ClassStructure private_constant?":{"type":"method","name":"private_constant?","children":[],"call":[" marked_as_private_constant? ","node name ","parent each_child_node ","node parent ","node namespace nil? ","node namespace ","node casgn_type? ","node parent  each_child_node ","node node parent  "]}," RuboCop Cop Layout ClassStructure dynamic_constant?":{"type":"method","name":"dynamic_constant?","children":[],"call":["(and\n  (send\n    (lvar :expression) :method?\n    (sym :freeze))\n  (csend\n    (send\n      (lvar :expression) :receiver) :recursive_basic_literal?)) ! ","expression receiver ","expression method? ","expression send_type? ","node expression ","node namespace nil? ","node namespace ","node casgn_type? ","(and\n  (send\n    (lvar :node expression ) :method?\n    (sym :freeze))\n  (csend\n    (send\n      (lvar :node expression ) :receiver) :recursive_basic_literal?)) ! ","node expression  receiver ","node expression  method? ","node expression  send_type? ","node node expression  "]}," RuboCop Cop Gemspec DependencyVersion on_send":{"type":"method","name":"on_send","children":[],"call":[" correct_style_detected "," opposite_style_detected "," add_offense "," offense? "," allowed_gem? "," add_dependency_method_declaration? "]}," RuboCop Cop Corrector swap":{"type":"method","name":"swap","children":[],"call":[" replace ","range1 source ","range2 source "," to_range "," remove "," insert_before ","range2 end_pos == ","range1 begin_pos ","range2 end_pos ","range1 end_pos == ","range2 begin_pos ","range1 end_pos "," to_range  source "," to_range  end_pos == "," to_range  begin_pos "," to_range  end_pos "]}," RuboCop Cop Style OperatorMethodCall anonymous_forwarding?":{"type":"method","name":"anonymous_forwarding?","children":[],"call":["argument source == ","argument source ","argument block_pass_type? ","argument children first ","argument children ","argument forwarded_restarg_type? ","argument forwarded_args_type? ","argument hash_type? "]}," RuboCop Cop Style OperatorMethodCall method_call_with_parenthesized_arg?":{"type":"method","name":"method_call_with_parenthesized_arg?","children":[],"call":["argument parent parenthesized? ","argument parent ","argument children first ","argument children ","argument parent parent "]}," RuboCop Cop Style MissingElse autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector insert_before ","node loc end ","node loc "," empty_else_style "]}," RuboCop Cop Style HashEachMethods receiver_name":{"type":"method","name":"receiver_name","children":[],"call":["receiver source ","receiver method_name to_s ","receiver method_name "," receiver_name ","receiver receiver ","receiver send_type? "]}," RuboCop Cop HashShorthandSyntax brackets?":{"type":"method","name":"brackets?","children":[],"call":["send_node method? ","method_dispatch_node method? "]}," RuboCop Cop Lint UselessRescue only_reraising?":{"type":"method","name":"only_reraising?","children":[],"call":["(csend\n  (send\n    (lvar :resbody_node) :exception_variable) :source) include? ","resbody_node exception_variable ","body first_argument source ","body first_argument ","body arguments size > ","body arguments size ","body arguments ","body arguments? ","body method? ! ","body method? ","body send_type? ! ","body send_type? ","body nil? ","resbody_node body "," exception_objects include? "," exception_objects "," use_exception_variable_in_ensure? ","body receiver ","(csend\n  (send\n    (lvar :resresbody_node body _node) :exception_variable) :source) include? ","resresbody_node body _node exception_variable ","resbody_node body  first_argument source ","resbody_node body  first_argument ","resbody_node body  arguments size > ","resbody_node body  arguments size ","resbody_node body  arguments ","resbody_node body  arguments? ","resbody_node body  method? ! ","resbody_node body  method? ","resbody_node body  send_type? ! ","resbody_node body  send_type? ","resbody_node body  nil? ","resresbody_node body _node resbody_node body  ","resbody_node body  receiver "]}," RuboCop Cop Lint UselessRescue on_rescue":{"type":"method","name":"on_rescue","children":[],"call":[" add_offense "," only_reraising? ","node resbody_branches last ","node resbody_branches "]}," RuboCop Cop Style Semicolon exist_semicolon_after_left_curly_brace?":{"type":"method","name":"exist_semicolon_after_left_curly_brace?","children":[],"call":["tokens [] "]}," RuboCop Cop Style Semicolon exist_semicolon_before_right_curly_brace?":{"type":"method","name":"exist_semicolon_before_right_curly_brace?","children":[],"call":["tokens [] "]}," RuboCop Cop Style Semicolon semicolon_position":{"type":"method","name":"semicolon_position","children":[],"call":[" exist_semicolon_after_left_curly_brace? "," exist_semicolon_before_right_curly_brace? ","tokens first semicolon? ","tokens first ","tokens last semicolon? ","tokens last "," exist_semicolon_before_right_string_interpolation_brace? "," exist_semicolon_after_left_string_interpolation_brace? "]}," RuboCop Cop Style RedundantDoubleSplatHashBraces closing_brace":{"type":"method","name":"closing_brace","children":[],"call":["node children last loc expression end join ","node loc end ","node loc ","node children last loc expression end ","node children last loc expression ","node children last loc ","node children last ","node children ","node children last source_range end join ","node children last source_range end ","node children last source_range "]}," RuboCop Cop Style RedundantDoubleSplatHashBraces opening_brace":{"type":"method","name":"opening_brace","children":[],"call":["node loc begin join ","node children first loc expression begin ","node children first loc expression ","node children first loc ","node children first ","node children ","node loc begin ","node loc ","node children first source_range begin ","node children first source_range "]}," RuboCop Cop Style MinMaxComparison autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace ","node else_branch ","corrector remove "," range_between ","node loc else begin_pos ","node loc else ","node loc ","node parent loc else begin_pos ","node parent loc else ","node parent loc ","node parent ","node elsif? "]}," RuboCop Cop Style MethodCallWithArgsParentheses OmitParentheses forwards_anonymous_rest_arguments?":{"type":"method","name":"forwards_anonymous_rest_arguments?","children":[],"call":["last_argument children first ","last_argument children ","last_argument hash_type? ","last_argument forwarded_restarg_type? ","node last_argument ","node last_argument  children first ","node last_argument  children ","node last_argument  hash_type? ","node last_argument  forwarded_restarg_type? ","node node last_argument  "]}," RuboCop Cop Style InvertibleUnlessCondition inverse_methods":{"type":"method","name":"inverse_methods","children":[],"call":[" cop_config [] "," cop_config "]}," RuboCop Cop Style InvertibleUnlessCondition autocorrect_send_node":{"type":"method","name":"autocorrect_send_node","children":[],"call":["corrector replace "," inverse_methods [] ","node method_name "," inverse_methods ","node loc selector ","node loc ","corrector remove ","node method? "]}," RuboCop Cop Style InvertibleUnlessCondition autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" autocorrect ","node rhs ","node lhs ","corrector replace ","node inverse_operator ","node loc operator ","node loc "," autocorrect_send_node ","node children first ","node children ","node type "]}," RuboCop Cop Style InvertibleUnlessCondition inheritance_check?":{"type":"method","name":"inheritance_check?","children":[],"call":["argument short_name to_s upcase != ","argument short_name to_s ","argument short_name ","argument short_name to_s upcase ","argument const_type? ","node method? ","node first_argument ","node first_argument  short_name to_s upcase != ","node first_argument  short_name to_s ","node first_argument  short_name ","node first_argument  short_name to_s upcase ","node first_argument  const_type? ","node first_node first_argument  "]}," RuboCop Cop Style InvertibleUnlessCondition invertible?":{"type":"method","name":"invertible?","children":[],"call":[" invertible? ","node rhs ","node lhs "," inverse_methods key? ","node method_name "," inverse_methods ","node method? "," inheritance_check? ","node children first ","node children ","node type "]}," RuboCop Cop Style InvertibleUnlessCondition on_if":{"type":"method","name":"on_if","children":[],"call":[" autocorrect ","corrector replace ","node inverse_keyword ","node loc keyword ","node loc "," add_offense "," invertible? ","node condition ","node unless? ","node node condition  "]}," RuboCop Cop Style ComparableClamp min_condition?":{"type":"method","name":"min_condition?","children":[],"call":["op == ","rhs source == ","rhs source ","lhs source == ","lhs source "]}," RuboCop Cop Style ComparableClamp autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector replace "," indentation ","corrector insert_before ","node elsif? "]}," RuboCop Cop Style ComparableClamp on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," array_min_max? "]}," RuboCop Cop Style ComparableClamp on_if":{"type":"method","name":"on_if","children":[],"call":[" autocorrect "," add_offense "," format ","if_body source ","elsif_body source "," min_condition? ","node condition ","else_body source ","node branches "," if_elsif_else_condition? "," elsif_body source _condition? "," if_body source _condition? "]}," RuboCop Cop Style BlockDelimiters remove_trailing_whitespace":{"type":"method","name":"remove_trailing_whitespace","children":[],"call":["corrector remove ","range_of_trailing source match? ","range_of_trailing source ","range end join ","comment loc expression begin ","comment loc expression ","comment loc ","range end ","comment source_range begin ","comment source_range ","range end join  source match? ","range end join  source "]}," RuboCop Cop Style AccessModifierDeclarations def_source":{"type":"method","name":"def_source","children":[],"call":["(splat\n  (send\n    (send\n      (send\n        (send nil :processed_source) :ast_with_comments) :[]\n      (lvar :node)) :map\n    (block-pass\n      (sym :text)))) join ","def_node source "," processed_source ast_with_comments [] map "," processed_source ast_with_comments [] "," processed_source ast_with_comments "," processed_source "]}," RuboCop Cop Style AccessModifierDeclarations replace_def":{"type":"method","name":"replace_def","children":[],"call":[" remove_node ","corrector replace ","node method_name ","corrector insert_before ","ancestor loc end ","ancestor loc ","node each_ancestor first ","node each_ancestor ","corrector insert_after "," find_argument_less_modifier_node "," def_source ","node each_ancestor first  loc end ","node each_ancestor first  loc ","node each_node each_ancestor first  first ","node each_node each_ancestor first  "," find_ find_argument_less_modifier_node  "," def_ def_source  "]}," RuboCop Cop Registry qualified_cop?":{"type":"method","name":"qualified_cop?","children":[],"call":[]}," RuboCop Cop HashShorthandSyntax last_argument":{"type":"method","name":"last_argument","children":[],"call":[" node last_argument "," node "]}," RuboCop Cop HashShorthandSyntax first_argument":{"type":"method","name":"first_argument","children":[],"call":[" node first_argument "," node "]}," RuboCop Cop HashShorthandSyntax selector":{"type":"method","name":"selector","children":[],"call":[" node loc keyword "," node loc "," node "," node loc selector "," node loc respond_to? "]}," RuboCop Cop HashShorthandSyntax find_ancestor_method_dispatch_node":{"type":"method","name":"find_ancestor_method_dispatch_node","children":[],"call":[" brackets? ","ancestor yield_type? ","ancestor super_type? ","ancestor call_type? ","node parent parent ","node parent ","node parent parent  yield_type? ","node parent parent  super_type? ","node parent parent  call_type? "]}," RuboCop Cop Lint UselessRuby2Keywords find_method_definition":{"type":"method","name":"find_method_definition","children":[],"call":["(send\n  (send\n    (send\n      (lvar :node) :each_ancestor) :lazy) :map) find "," method_definition ","ancestor each_child_node find ","ancestor each_child_node ","node each_ancestor lazy map ","node each_ancestor lazy ","node each_ancestor "]}," RuboCop Cop Lint UselessRescue exception_objects":{"type":"method","name":"exception_objects","children":[],"call":["resbody_node exception_variable "]}," RuboCop Cop Lint UselessRescue use_exception_variable_in_ensure?":{"type":"method","name":"use_exception_variable_in_ensure?","children":[],"call":["ensure_node body each_descendant map include? ","exception_variable source ","ensure_node body each_descendant map ","ensure_node body each_descendant ","ensure_node body ","resbody_node each_ancestor first ","resbody_node each_ancestor ","resbody_node exception_variable ","ensure_body each_descendant map include? ","ensure_body each_descendant map ","ensure_body each_descendant ","resbody_node each_ancestor first  body each_descendant map include? ","resbody_node exception_variable  source ","resbody_node each_ancestor first  body each_descendant map ","resbody_node each_ancestor first  body each_descendant ","resbody_node each_ancestor first  body ","resbody_node resbody_node exception_variable  ","ensure_node body  each_descendant map include? ","ensure_node body  each_descendant map ","ensure_node body  each_descendant "]}," RuboCop Cop Lint UselessMethodDefinition use_rest_or_optional_args?":{"type":"method","name":"use_rest_or_optional_args?","children":[],"call":["arg kwoptarg_type? ","arg optarg_type? ","arg restarg_type? ","node arguments any? ","node arguments "]}," RuboCop Cop Lint RedundantRequireStatement use_pretty_print_method?":{"type":"method","name":"use_pretty_print_method?","children":[],"call":["PRETTY_PRINT_METHODS  include? ","node method_name "," processed_source ast each_descendant any? "," processed_source ast each_descendant "," processed_source ast "," processed_source "]}," RuboCop Cop Lint FormatParameterMismatch string_type?":{"type":"method","name":"string_type?","children":[],"call":["STRING_TYPES  include? ","node type "]}," RuboCop Cop Lint DeprecatedClassMethods dir_env_file_const?":{"type":"method","name":"dir_env_file_const?","children":[],"call":["DIR_ENV_FILE_CONSTANTS  include? "]}," RuboCop Cop Lint DeprecatedClassMethods socket_const?":{"type":"method","name":"socket_const?","children":[],"call":["(lvar :node) == "]}," RuboCop Cop Lint DeprecatedClassMethods preferred_method":{"type":"method","name":"preferred_method","children":[],"call":["PREFERRED_METHDOS  [] ","node method_name ","node receiver source ","node receiver "," dir_env_file_const? ","node first_argument source ","node first_argument ","boolean_argument == ","node arguments [] source ","node arguments [] ","node arguments ","node method? ","PREFERRED_METHODS  [] ","node arguments [] source  == "]}," RuboCop Cop Lint DeprecatedClassMethods offense_range":{"type":"method","name":"offense_range","children":[],"call":["node loc selector ","node loc ","node method? ","node loc expression begin join ","node loc selector end ","node loc expression begin ","node loc expression "," dir_env_file_const? ","node receiver "," socket_const? ","node source_range begin join ","node source_range begin ","node source_range "]}," RuboCop Cop Layout BlockEndNewline replacement":{"type":"method","name":"replacement","children":[],"call":["end_with_method_chain source strip ","end_with_method_chain source ","node loc end join "," end_of_method_chain loc expression end "," end_of_method_chain loc expression "," end_of_method_chain loc "," end_of_method_chain ","node loc end ","node loc "," end_of_method_chain source_range end "," end_of_method_chain source_range ","node loc end join  source strip ","node loc end join  source "]}," RuboCop Cop Gemspec DevelopmentDependencies message":{"type":"method","name":"message","children":[],"call":[" format "," style "]}," RuboCop Cop Gemspec DevelopmentDependencies forbidden_gem?":{"type":"method","name":"forbidden_gem?","children":[],"call":[" cop_config [] include? ! "," cop_config [] include? "," cop_config [] "," cop_config "]}," RuboCop Cop Gemspec DevelopmentDependencies on_send":{"type":"method","name":"on_send","children":[],"call":[" add_offense "," gem? "," add_development_dependency? "," style "]}," RuboCop ConfigLoader pending_cops_only_qualified":{"type":"method","name":"pending_cops_only_qualified","children":[],"call":["Cop Registry  qualified_cop? ","cop name ","pending_cops select "]}," RuboCop Cop Naming BlockForwarding autocorrect_incompatible_with":{"type":"method","name":"autocorrect_incompatible_with","children":[],"call":[]}," RuboCop Cop Lint AmbiguousOperator autocorrect_incompatible_with":{"type":"method","name":"autocorrect_incompatible_with","children":[],"call":[]}," RuboCop Server Core run_server":{"type":"method","name":"run_server","children":[],"call":[" process_input "," write_port_and_token_files "]}," RuboCop Server Core process_input":{"type":"method","name":"process_input","children":[],"call":[" read_socket ","@server accept ","@server closed? ","Cache  write_pid_file "]}," RuboCop Server Core write_port_and_token_files":{"type":"method","name":"write_port_and_token_files","children":[],"call":["Cache  write_port_and_token_files "," token ","@server addr [] ","@server addr "]}," RuboCop Server Core detach_server":{"type":"method","name":"detach_server","children":[],"call":["Process  waitpid "," process_input ","$stderr reopen ","Cache  stderr_path ","Process  daemon "," fork "," write_port_and_token_files "]}," RuboCop Server ClientCommand Start initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop Server CLI process_arguments":{"type":"method","name":"process_arguments","children":[],"call":[" run_command ","ArgumentsFile  read_as_arguments delete ","ArgumentsFile  read_as_arguments ","ArgumentsEnv  read_as_arguments delete ","ArgumentsEnv  read_as_arguments ","server_command nil? "," error ","argv [] ","argv count > "," allowed_option_count ","argv count ","EXCLUSIVE_OPTIONS  include? ","NO_DETACH_OPTIONS  include? ","server_arguments first ","server_arguments join ","server_arguments size >= ","server_arguments size ","server_arguments delete ! ","server_arguments delete "," delete_server_argument_from ","server_arguments first  nil? "," delete_server_argument_from  first "," delete_server_argument_from  join "," delete_server_argument_from  size >= "," delete_server_argument_from  size "," delete_server_argument_from  delete ! "," delete_server_argument_from  delete "]}," RuboCop Runner extract_ruby_sources":{"type":"method","name":"extract_ruby_sources","children":[],"call":["ruby_extractor call "," class ruby_extractors find "," class ruby_extractors "," class "]}," RuboCop Runner default_ruby_extractor":{"type":"method","name":"default_ruby_extractor","children":[],"call":[" lambda "]}," RuboCop Runner ruby_extractors":{"type":"method","name":"ruby_extractors","children":[],"call":[" default_ruby_extractor "]}," RuboCop Options add_profile_options":{"type":"method","name":"add_profile_options","children":[],"call":[" option ","@options []= ","@options key? "," section "]}," RuboCop Cop Style YodaExpression constant_portion?":{"type":"method","name":"constant_portion?","children":[],"call":["node const_type? ","node numeric_type? "]}," RuboCop Cop Style YodaExpression yoda_expression_constant?":{"type":"method","name":"yoda_expression_constant?","children":[],"call":[" constant_portion? ! "," constant_portion? "]}," RuboCop Cop Style YodaCondition constant_portion?":{"type":"method","name":"constant_portion?","children":[],"call":["node const_type? ","node literal? "]}," RuboCop Cop Style RedundantHeredocDelimiterQuotes need_heredoc_delimiter_quotes?":{"type":"method","name":"need_heredoc_delimiter_quotes?","children":[],"call":["node loc heredoc_body source match? ","node loc heredoc_body source ","node loc heredoc_body ","node loc ","node loc heredoc_end source strip match? ","node loc heredoc_end source strip ","node loc heredoc_end source ","node loc heredoc_end ","heredoc_delimiter start_with? ","node source delete "," heredoc_type ","node source ","node source delete  start_with? "]}," RuboCop Cop Style RedundantHeredocDelimiterQuotes on_heredoc":{"type":"method","name":"on_heredoc","children":[],"call":["corrector replace "," add_offense "," format "," delimiter_string "," heredoc_type "," need_heredoc_delimiter_quotes? "]}," RuboCop Cop Style RedundantCondition argument_with_operator?":{"type":"method","name":"argument_with_operator?","children":[],"call":["node forwarded_kwrestarg_type? ","node kwsplat_type? ","argument children first ","argument children ","argument hash_type? ","ARGUMENT_WITH_OPERATOR_TYPES  include? ","argument type ","argument children first  forwarded_kwrestarg_type? ","argument children first  kwsplat_type? "]}," RuboCop Cop Style NumberedParametersLimit numbered_parameter_nodes":{"type":"method","name":"numbered_parameter_nodes","children":[],"call":["lvar_node source match? ","lvar_node source ","node each_descendant select ","node each_descendant "]}," RuboCop Cop Style MultilineTernaryOperator comments_in_condition":{"type":"method","name":"comments_in_condition","children":[],"call":["(send\n  (send nil :comments_in_range\n    (lvar :node)) :map) join ","comment loc expression source ","comment loc expression ","comment loc "," comments_in_range map "," comments_in_range ","comment source "]}," RuboCop Cop Style AccessModifierDeclarations right_siblings_same_inline_method?":{"type":"method","name":"right_siblings_same_inline_method?","children":[],"call":["sibling arguments empty? ! ","sibling arguments empty? ","sibling arguments ","sibling method? ","node method_name ","node right_siblings any? ","node right_siblings ","sibling send_type? "]}," RuboCop Cop HashShorthandSyntax method_dispatch_as_argument?":{"type":"method","name":"method_dispatch_as_argument?","children":[],"call":["parent yield_type? ","parent super_type? ","parent call_type? ","method_dispatch_node parent ","method_dispatch_node parent  yield_type? ","method_dispatch_node parent  super_type? ","method_dispatch_node parent  call_type? ","method_dispatch_node method_dispatch_node parent  "]}," RuboCop Cop HashShorthandSyntax last_expression?":{"type":"method","name":"last_expression?","children":[],"call":["node send_type? ","node assignment? ","ancestor each_ancestor find ","ancestor each_ancestor ","ancestor right_sibling ","assignment_node right_sibling ! ","assignment_node right_sibling "," last_expression? ","assignment_node parent ","node each_ancestor find ","node each_ancestor ","node right_sibling ","node each_ancestor find  right_sibling ! ","node each_ancestor find  right_sibling ","node each_ancestor find  parent "]}," RuboCop Cop Commissioner begin_investigation":{"type":"method","name":"begin_investigation","children":[],"call":["cop begin_investigation ","@cops each "]}," RuboCop Cop Base range_for_original":{"type":"method","name":"range_for_original","children":[],"call":[" Parser Source Range  new ","range end_pos + ","range end_pos ","range begin_pos + ","range begin_pos ","@current_original buffer "]}," RuboCop CLI require_gem":{"type":"method","name":"require_gem","children":[],"call":[" warn "," require "]}," RuboCop CLI profile_if_needed":{"type":"method","name":"profile_if_needed","children":[],"call":["report pretty_print ","File  join ","MemoryProfiler  stop "," puts ","StackProf  run ","FileUtils  mkdir_p ","ConfigFinder  project_root ","MemoryProfiler  start "," require_gem ","@options [] ","MemoryProfiler  stop  pretty_print "]}," RuboCop Cop Lint Debugger chained_method_name":{"type":"method","name":"chained_method_name","children":[],"call":["receiver receiver ","receiver const_name ","receiver method_name ","receiver send_type? ","send_node receiver ","send_node method_name to_s ","send_node method_name ","receiver receiver  receiver receiver  ","send_node receiver  send_node receiver  ","receiver receiver  const_name ","send_node receiver  const_name ","receiver const_receiver const_name  ","receiver const_receiver method_name  ","receiver receiver  method_name ","send_node receiver  method_name ","receiver method_receiver const_name  ","receiver method_receiver method_name  ","receiver receiver  send_type? ","send_node receiver  send_type? ","send_node receiver receiver  ","send_node send_node receiver  ","send_node method_receiver const_name  to_s ","send_node method_receiver method_name  to_s ","send_node method_receiver const_name  ","send_node method_receiver method_name  "]}," RuboCop Cop Cop range_for_original":{"type":"method","name":"range_for_original","children":[],"call":[" Parser Source Range  new ","range end_pos + ","range end_pos ","range begin_pos + ","range begin_pos ","@current_original buffer "]}," RuboCop Cop Style WordArray matrix_of_complex_content?":{"type":"method","name":"matrix_of_complex_content?","children":[],"call":[" complex_content? ","subarray values ","array values any? ","array values ","array values all? "]}," RuboCop Cop Style WordArray within_matrix_of_complex_content?":{"type":"method","name":"within_matrix_of_complex_content?","children":[],"call":["@matrix_of_complex_content_cache [] ","parent array_type? ","node parent ","node parent  array_type? ","node node parent  "]}," RuboCop Cop Style WordArray on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":["cache []= "," matrix_of_complex_content? ","Hash  new "]}," RuboCop Cop Style RedundantRegexpCharacterClass octal_requiring_char_class?":{"type":"method","name":"octal_requiring_char_class?","children":[],"call":["elem match? "]}," RuboCop Cop Style AccessorGrouping groupable_accessor?":{"type":"method","name":"groupable_accessor?","children":[],"call":["previous_expression access_modifier? ","previous_expression attribute_accessor? ","previous_expression send_type? ","node left_siblings last ","node left_siblings ","child_node send_type? ","previous_expression child_nodes each ","previous_expression child_nodes ","previous_expression block_type? ","node first_line - > ","node first_line - ","previous_expression last_line ","node first_line ","node left_siblings last  access_modifier? ","node left_siblings last  attribute_accessor? ","node left_siblings last  send_type? ","node left_siblings last  child_nodes each ","node left_siblings last  child_nodes ","node left_siblings last  block_type? ","node left_siblings last  last_line "]}," RuboCop Cop Lint OutOfRangeRegexpRef regexp_patterns":{"type":"method","name":"regexp_patterns","children":[],"call":["pattern each_descendant to_a ","pattern each_descendant ","pattern regexp_type? ","in_node pattern ","in_node pattern  each_descendant to_a ","in_node pattern  each_descendant ","in_node pattern  regexp_type? ","in_node in_node pattern  "]}," RuboCop Cop Layout LineContinuationSpacing ignored_literal_ranges":{"type":"method","name":"ignored_literal_ranges","children":[],"call":["ranges << ","loc expression ","loc begin ","loc respond_to? ","loc heredoc_body ","literal heredoc? ","literal percent_literal? ","literal array_type? ","literal location ","ast each_node with_object ","Set  new ","ast each_node ","ast nil? ","literal location  expression ","literal location  begin ","literal location  respond_to? ","literal location  heredoc_body ","literal literal location ation "]}," RuboCop Cop Layout HeredocArgumentClosingParenthesis end_keyword_before_closing_parentesis?":{"type":"method","name":"end_keyword_before_closing_parentesis?","children":[],"call":["(send\n  (send\n    (lvar :ancestor) :loc) :end) == ","ancestor loc end ","ancestor loc ","ancestor loc respond_to? ","parenthesized_send_node ancestors any? ","parenthesized_send_node ancestors "]}," RuboCop Cop Layout EndAlignment on_sclass":{"type":"method","name":"on_sclass","children":[],"call":[" check_other_alignment "]}," RuboCop Cop InternalAffairs ProcessedSourceBufferName on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace "," add_offense ","node children first loc selector begin join ","node loc expression end ","node loc expression ","node loc ","node children first loc selector begin ","node children first loc selector ","node children first loc ","node children first ","node children "," processed_source_buffer_name? ","node source_range end ","node source_range "]}," RuboCop CommentConfig opt_in_cops":{"type":"method","name":"opt_in_cops","children":[],"call":["cops merge ","directive cop_names ","directive all_cops? ","directive enabled? "," each_directive ","Set  new ","Set  new  merge ","directive all_Set  new ? "]}," RuboCop CommentConfig cop_opted_in?":{"type":"method","name":"cop_opted_in?","children":[],"call":[" opt_in_cops include? ","cop cop_name "," opt_in_cops "]}," RuboCop Ext Comment source_range":{"type":"method","name":"source_range","children":[],"call":[" loc expression "," loc "]}," RuboCop Ext Comment source":{"type":"method","name":"source","children":[],"call":[" loc expression source "," loc expression "," loc "]}," RuboCop Cop VariableForce Variable in_modifier_conditional?":{"type":"method","name":"in_modifier_conditional?","children":[],"call":["parent modifier_form? ","parent until_type? ","parent while_type? ","parent if_type? ","parent nil? ","parent parent ","assignment node parent ","assignment node ","parent parent  modifier_form? ","assignment node parent  modifier_form? ","parent parent  until_type? ","assignment node parent  until_type? ","parent parent  while_type? ","assignment node parent  while_type? ","parent parent  if_type? ","assignment node parent  if_type? ","parent parent  nil? ","assignment node parent  nil? ","parent parent  parent parent  ","assignment node parent  assignment node parent  ","assignment node parent parent  ","assignment node assignment node parent  "]}," RuboCop Cop Style IfUnlessModifier defined_argument_is_undefined?":{"type":"method","name":"defined_argument_is_undefined?","children":[],"call":["sibling name == ","defined_argument node_parts [] ","defined_argument node_parts ","sibling name ","sibling lvasgn_type? ","sibling respond_to? ","if_node left_siblings none? ","if_node left_siblings ","defined_argument send_type? ","defined_argument lvar_type? ","defined_node first_argument ","defined_node first_argument  node_parts [] ","defined_node first_argument  node_parts ","defined_node first_argument  send_type? ","defined_node first_argument  lvar_type? "]}," RuboCop Cop Style IfUnlessModifier defined_nodes":{"type":"method","name":"defined_nodes","children":[],"call":["node condition each_descendant select ","node condition each_descendant ","node condition ","node condition defined_type? ","condition each_descendant select ","condition each_descendant ","condition defined_type? "]}," RuboCop Cop Metrics CollectionLiteralLength collection_threshold":{"type":"method","name":"collection_threshold","children":[],"call":[" cop_config fetch "," cop_config "]}," RuboCop Cop Metrics CollectionLiteralLength on_send":{"type":"method","name":"on_send","children":[],"call":[" on_index ","node method? "]}," RuboCop Cop Metrics CollectionLiteralLength on_index":{"type":"method","name":"on_index","children":[],"call":[" add_offense ","node arguments length >= "," collection_threshold ","node arguments length ","node arguments "]}," RuboCop Cop Metrics CollectionLiteralLength on_array":{"type":"method","name":"on_array","children":[],"call":[" add_offense ","node children length >= "," collection_threshold ","node children length ","node children "]}," RuboCop Cop Lint LiteralInInterpolation autocorrected_value_in_hash":{"type":"method","name":"autocorrected_value_in_hash","children":[],"call":["node source gsub ","node source "," autocorrected_value_for_hash "," autocorrected_value_for_array "," autocorrected_value_in_hash_for_symbol ","node value to_s gsub ","node value to_s ","node value ","node children last to_f to_s ","node children last to_f ","node children last ","node children ","node children last to_i to_s ","node children last to_i ","node type "]}," RuboCop Cop Lint LiteralInInterpolation autocorrected_value_for_hash":{"type":"method","name":"autocorrected_value_for_hash","children":[],"call":["(send\n  (send\n    (lvar :node) :children) :map) join "," autocorrected_value_in_hash ","child value ","child key ","node children map ","node children "," autocorrected_ autocorrected_value_in_hash _in_hash ","child  autocorrected_value_in_hash  "]}," RuboCop Cop Lint LiteralInInterpolation autocorrected_value_in_hash_for_symbol":{"type":"method","name":"autocorrected_value_in_hash_for_symbol","children":[],"call":["node value ","node value to_s gsub ","node value to_s ","(str \" |\\\"|'\") match? "]}," RuboCop Cop InternalAffairs RedundantSourceRange on_send":{"type":"method","name":"on_send","children":[],"call":["corrector remove ","source_range loc dot join ","source_range loc dot ","source_range loc "," add_offense ","source_range loc selector "," redundant_source_range ","source_range receiver method? ","source_range receiver ","source_range receiver send_type? "," redundant_source_range  loc dot join "," redundant_source_range  loc dot "," redundant_source_range  loc ","source_range loc source_range loc selector  "," redundant_source_range  loc selector "," redundant_ redundant_source_range  "," redundant_source_range  receiver method? "," redundant_source_range  receiver "," redundant_source_range  receiver send_type? "]}," RuboCop Cop InternalAffairs LocationExpression on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace "," add_offense ","node loc selector join ","parent source_range end ","parent source_range ","node loc selector ","node loc ","parent receiver receiver ","parent receiver ","parent method? ","parent send_type? ","node parent "," add_node loc selector join  ","node parent  source_range end ","node parent  source_range ","node parent  receiver receiver ","node parent  receiver ","node parent  method? ","node parent  send_type? ","node node parent  "]}," RuboCop CLI Command AutoGenerateConfig options_has_only_flag?":{"type":"method","name":"options_has_only_flag?","children":[],"call":["@options [] "]}," RuboCop Cop Style NegatedIfElseCondition message":{"type":"method","name":"message","children":[],"call":[" format ","node ternary? "]}," RuboCop Cop Style IfUnlessModifier remove_comment":{"type":"method","name":"remove_comment","children":[],"call":["corrector remove "," range_with_surrounding_space ","comment source_range "]}," RuboCop Cop Style IfUnlessModifier comment_on_node_line":{"type":"method","name":"comment_on_node_line","children":[],"call":[" same_line? "," processed_source comments find "," processed_source comments "," processed_source "]}," RuboCop Cop Style IfUnlessModifier to_modifier_form_with_move_comment":{"type":"method","name":"to_modifier_form_with_move_comment","children":[],"call":["(begin\n  (send\n    (lvar :comment) :source)) chomp ","node condition source ","node condition ","node keyword ","node body source ","node body ","comment source "]}," RuboCop Cop Style IfUnlessModifier too_long_due_to_comment_after_modifier?":{"type":"method","name":"too_long_due_to_comment_after_modifier?","children":[],"call":["source_length - <= "," max_line_length ","source_length - ","comment source_range length ","comment source_range ","source_length >= "," processed_source lines [] length "," processed_source lines [] ","node first_line - ","node first_line "," processed_source lines "," processed_source "," processed_source lines [] length  - <= "," processed_source lines [] length  - "," processed_source lines [] length  >= "]}," RuboCop Cop Style IfUnlessModifier replacement_for_modifier_form":{"type":"method","name":"replacement_for_modifier_form","children":[],"call":[" to_normal_form "," indent "," to_normal_form_with_heredoc "," remove_heredoc "," extract_heredoc_from ","last_argument heredoc? ","last_argument respond_to? ","node if_branch last_argument ","node if_branch ","node if_branch send_type? "," to_modifier_form_with_move_comment "," remove_comment "," too_long_due_to_comment_after_modifier? "," comment_on_node_line "," to_normal_form_with_ extract_heredoc_from  "," remove_ extract_heredoc_from  "," extract_ extract_heredoc_from _from ","last_argument  extract_heredoc_from ? ","node if_branch last_argument  heredoc? ","node if_branch last_argument  respond_to? ","node if_branch node if_branch last_argument  "," to_modifier_form_with_move_ comment_on_node_line  "," remove_ comment_on_node_line  "," too_long_due_to_ comment_on_node_line _after_modifier? ","  comment_on_node_line _on_node_line "]}," RuboCop Cop Style FileEmpty bang":{"type":"method","name":"bang","children":[],"call":["node child_nodes first method? ! ","node child_nodes first method? ","node child_nodes first ","node child_nodes ","(sym :>=) include? ","node method_name ","node method? "]}," RuboCop Cop Style FileEmpty on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace ","arg_node source ","const_node source "," bang "," add_offense "," format "," offensive? "]}," RuboCop Cop Style DirEmpty bang":{"type":"method","name":"bang","children":[],"call":["node child_nodes first method? ! ","node child_nodes first method? ","node child_nodes first ","node child_nodes ","node method? ","(sym :!=) include? ","node method_name "]}," RuboCop Cop Style DirEmpty on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace ","arg_node source ","const_node source "," bang "," add_offense "," format "," offensive? "]}," RuboCop Cop Style BlockDelimiters require_braces?":{"type":"method","name":"require_braces?","children":[],"call":["node source_range end_pos < ","send loc selector begin_pos ","send loc selector ","send loc ","node source_range end_pos ","node source_range ","send arithmetic_operation? ","node each_ancestor any? ","node each_ancestor ","node braces? "]}," RuboCop Cop MinBranchesCount if_conditional_branches":{"type":"method","name":"if_conditional_branches","children":[],"call":[" if_conditional_branches ","node else_branch ","branches << ","node if_branch ","node if_type? ! ","node if_type? ","node nil? ","node node else_branch  "]}," RuboCop Cop MinBranchesCount min_branches_count":{"type":"method","name":"min_branches_count","children":[],"call":[" raise ","length positive? ","length is_a? "," cop_config [] "," cop_config "]}," RuboCop Cop MinBranchesCount min_branches_count?":{"type":"method","name":"min_branches_count?","children":[],"call":["branches size >= "," min_branches_count ","branches size "," raise ","node type inspect ","node type "," if_conditional_branches ","node if_type? ","node when_branches ","node case_type? ","node when_branches  size >= "," min_node when_branches _count ","node when_branches  size "," if_conditional_node when_branches  ","node when_node when_branches  "]}," RuboCop Cop Lint UselessAccessModifier included_block?":{"type":"method","name":"included_block?","children":[],"call":["block_node method? "," active_support_extensions_enabled? "]}," RuboCop Cop Style AccessorGrouping groupable_sibling_accessors":{"type":"method","name":"groupable_sibling_accessors","children":[],"call":[" previous_line_comment? ! "," previous_line_comment? "," groupable_accessor? "," node_visibility == "," node_visibility ","sibling method? ","send_node method_name ","sibling attribute_accessor? ","send_node parent each_child_node select ","send_node parent each_child_node ","send_node parent "]}," RuboCop Cop Lint Syntax find_severity":{"type":"method","name":"find_severity","children":[],"call":[]}," RuboCop Cop Style RedundantRegexpCharacterClass multiple_codepoints?":{"type":"method","name":"multiple_codepoints?","children":[],"call":["expression codepoints count >= ","expression codepoints count ","expression codepoints ","expression respond_to? "]}," RuboCop Cop Style RedundantLineContinuation starts_with_plus_or_minus?":{"type":"method","name":"starts_with_plus_or_minus?","children":[],"call":["(str \"\\\\A\\\\s*[+\\\\-*/%]\") match? "]}," RuboCop Cop Style RedundantLineContinuation same_line?":{"type":"method","name":"same_line?","children":[],"call":["source_range line == ","source_range line ","(irange\n  (send\n    (lvar :source_range) :line)\n  (send\n    (lvar :source_range) :last_line)) cover? ","source_range last_line ","(irange\n  (send\n    (send\n      (send\n        (lvar :node) :loc) :heredoc_body) :line)\n  (send\n    (send\n      (send\n        (lvar :node) :loc) :heredoc_body) :last_line)) cover? ","node loc heredoc_body last_line ","node loc heredoc_body ","node loc ","node loc heredoc_body line ","node heredoc? ","node is_a? ","node source_range ","node source_range  line == ","node source_range  line ","(irange\n  (send\n    (lvar :node source_range ) :line)\n  (send\n    (lvar :node source_range ) :last_line)) cover? ","node source_range  last_line ","node node source_range  "]}," RuboCop Cop Style RedundantLineContinuation find_node_for_line":{"type":"method","name":"find_node_for_line","children":[],"call":[" same_line? "," processed_source ast each_node "," processed_source ast "," processed_source "]}," RuboCop Cop Style RedundantLineContinuation argument_newline?":{"type":"method","name":"argument_newline?","children":[],"call":["node loc selector line != ","node first_argument loc line ","node first_argument loc ","node first_argument ","node loc selector line ","node loc selector ","node loc ","node arguments empty? ","node arguments ","node send_type? ! ","node send_type? ","node children first ","node children ","node begin_type? ","node root? "," method_call_with_arguments? "," argument_newline? "," argument_is_method? ","node children first  loc selector line != ","node children first  first_argument loc line ","node children first  first_argument loc ","node children first  first_argument ","node children first  loc selector line ","node children first  loc selector ","node children first  loc ","node children first  arguments empty? ","node children first  arguments ","node children first  send_type? ! ","node children first  send_type? ","node children first  children first ","node children first  children ","node children first  begin_type? ","node children first  root? "]}," RuboCop Cop Style RedundantLineContinuation redundant_line_continuation?":{"type":"method","name":"redundant_line_continuation?","children":[],"call":[" parse valid_syntax? "," parse ","node source gsub ","node source "," argument_newline? "," find_node_for_line ","range line ","source gsub ","node parent source ","node parent "," find_node_for_line  source gsub ","node node source  gsub ","node node parent source  gsub "," find_node_for_line  source ","node node source  ","node node parent source  "," find_ find_node_for_line _for_line ","node source  gsub ","node parent source  gsub "," find_node_for_line  parent source ","node parent node source  ","node parent node parent source  "," find_node_for_line  parent "]}," RuboCop Cop Style RedundantLineContinuation string_concatenation?":{"type":"method","name":"string_concatenation?","children":[],"call":["(str \"[\\\"']\\\\s*\\\\\\\\\\\\z\") match? "]}," RuboCop Cop Style RedundantLineContinuation ends_with_backslash_without_comment?":{"type":"method","name":"ends_with_backslash_without_comment?","children":[],"call":["source_line gsub end_with? ","source_line gsub "]}," RuboCop Cop Style RedundantLineContinuation require_line_continuation?":{"type":"method","name":"require_line_continuation?","children":[],"call":[" starts_with_plus_or_minus? "," processed_source [] ","range line "," processed_source "," string_concatenation? ","range source_line "," ends_with_backslash_without_comment? ! "," ends_with_backslash_without_comment? "," inside_string_literal? "," start_with_arithmetic_operator? "," inside_string_literal_or_method_with_argument? "]}," RuboCop Cop Style RedundantLineContinuation on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":["corrector remove_leading "," add_offense "," redundant_line_continuation? "," require_line_continuation? "," each_match_range "," processed_source ast source_range "," processed_source ast "," processed_source "]}," RuboCop Cop Style MethodCallWithArgsParentheses OmitParentheses last_expression?":{"type":"method","name":"last_expression?","children":[],"call":["(if\n  (csend\n    (send\n      (lvar :node) :parent) :assignment?)\n  (send\n    (send\n      (lvar :node) :parent) :right_sibling)\n  (send\n    (lvar :node) :right_sibling)) ! ","node right_sibling ","node parent right_sibling ","node parent "]}," RuboCop Cop Style IfUnlessModifier pattern_matching_nodes":{"type":"method","name":"pattern_matching_nodes","children":[],"call":["node match_pattern_p_type? ","node match_pattern_type? ","condition each_descendant select ","condition each_descendant ","condition match_pattern_p_type? ","condition match_pattern_type? "]}," RuboCop Cop Style HashExcept extract_body_if_negated":{"type":"method","name":"extract_body_if_negated","children":[],"call":["body receiver ","body method? "]}," RuboCop Cop Style DoubleNegation define_method?":{"type":"method","name":"define_method?","children":[],"call":["child method? ","child send_type? ","node child_nodes first ","node child_nodes ","node block_type? ","node child_nodes first  method? ","node child_nodes first  send_type? ","node node child_nodes first _nodes first ","node node child_nodes first _nodes "]}," RuboCop Cop Style DataInheritance range_for_empty_class_body":{"type":"method","name":"range_for_empty_class_body","children":[],"call":[" range_by_whole_lines ","class_node loc end ","class_node loc "," range_between ","class_node source_range end_pos ","class_node source_range ","data_define source_range end_pos ","data_define source_range ","class_node single_line? "]}," RuboCop Cop Style DataInheritance correct_parent":{"type":"method","name":"correct_parent","children":[],"call":["corrector insert_after ","corrector remove "," range_for_empty_class_body ","(lvasgn :class_node\n  (send\n    (lvar :parent) :parent)) body nil? ","(lvasgn :class_node\n  (send\n    (lvar :parent) :parent)) body ","parent parent "," range_with_surrounding_space ","parent loc end ","parent loc ","parent block_type? ","(lvasgn :parent parent \n  (send\n    (lvar :parent) :parent)) body nil? ","(lvasgn :parent parent \n  (send\n    (lvar :parent) :parent)) body "]}," RuboCop Cop Style DataInheritance on_class":{"type":"method","name":"on_class","children":[],"call":[" correct_parent ","node parent_class ","corrector replace ","node loc operator ","node loc ","corrector remove "," range_with_surrounding_space ","node loc keyword "," add_offense ","node parent_class source_range "," data_define? "]}," RuboCop Cop Style ClassEqualityComparison class_name_method?":{"type":"method","name":"class_name_method?","children":[],"call":["CLASS_NAME_METHODS  include? "]}," RuboCop Cop Naming InclusiveLanguage offense_range":{"type":"method","name":"offense_range","children":[],"call":[" range_between ","start_position + ","word length ","token pos begin_pos + ","token pos source index ","token pos source ","token pos ","token pos begin_pos ","token pos begin_pos +  + "]}," RuboCop Cop Lint UselessMethodDefinition method_definition_with_modifier?":{"type":"method","name":"method_definition_with_modifier?","children":[],"call":["(send\n  (lvar :node) :parent) ! ","node parent "]}," RuboCop Cop Layout SpaceInsideParens correct_extraneous_space_between_consecutive_parens":{"type":"method","name":"correct_extraneous_space_between_consecutive_parens","children":[],"call":["corrector remove "," add_offense "," range_between ","token2 begin_pos ","token1 end_pos "," range_between source != "," range_between source ","  range_between _between ","  range_between _between source != ","  range_between _between source "]}," RuboCop Cop Layout HeredocArgumentClosingParenthesis end_keyword_before_closing_parenthesis?":{"type":"method","name":"end_keyword_before_closing_parenthesis?","children":[],"call":["(send\n  (send\n    (lvar :ancestor) :loc) :end) == ","ancestor loc end ","ancestor loc ","ancestor loc respond_to? ","parenthesized_send_node ancestors any? ","parenthesized_send_node ancestors "]}," RuboCop Cop Layout FirstArgumentIndentation should_check?":{"type":"method","name":"should_check?","children":[],"call":["node setter_method? ! ","node setter_method? "," bare_operator? ! "," bare_operator? ","node arguments? "]}," RuboCop Cop InternalAffairs ExampleHeredocDelimiter heredoc_opening_delimiter_range_from":{"type":"method","name":"heredoc_opening_delimiter_range_from","children":[],"call":["node source_range begin adjust ","match_data end ","match_data begin ","node source_range begin ","node source_range ","node source match ","node source ","node source match  end ","node source match  begin "]}," RuboCop Cop Cop dedupe_on_node":{"type":"method","name":"dedupe_on_node","children":[],"call":["@corrected_nodes []= ","@corrected_nodes key? "," compare_by_identity "]}," RuboCop Cop AutocorrectLogic surrounding_percent_array":{"type":"method","name":"surrounding_percent_array","children":[],"call":["range overlaps? ","percent_array map find ","percent_array map ","node percent_literal? ","node array_type? "," processed_source ast each_descendant select "," processed_source ast each_descendant "," processed_source ast "," processed_source ","offense_range empty? "]}," RuboCop Cop AutocorrectLogic disable_offense_with_eol_or_surround_comment":{"type":"method","name":"disable_offense_with_eol_or_surround_comment","children":[],"call":[" disable_offense_before_and_after "," range_by_lines "," disable_offense_at_end_of_line "," range_of_first_line ","needed_line_length <= "," max_line_length ","(send\n  (send\n    (lvar :range) :source_line) :+\n  (lvar :eol_comment)) length ","range source_line + ","range source_line "," cop_name ","(send\n  (send\n    (lvar :range) :source_line) :+\n  (lvar :eol_comment)) length  <= "]}," RuboCop CLI Command ExecuteRunner bug_tracker_uri":{"type":"method","name":"bug_tracker_uri","children":[],"call":["Gem  loaded_specs [] metadata [] ","Gem  loaded_specs [] metadata ","Gem  loaded_specs [] ","Gem  loaded_specs ","Gem  loaded_specs key? "]}," RuboCop Cop Style SoleNestedConditional correct_for_gurad_condition_style":{"type":"method","name":"correct_for_gurad_condition_style","children":[],"call":["corrector remove ","if_branch loc keyword ","if_branch loc "," range_with_surrounding_space "," range_between ","if_branch condition source_range end_pos ","if_branch condition source_range ","if_branch condition ","if_branch loc keyword begin_pos ","corrector insert_after ","if_branch condition source ","node condition ","condition source_range end_pos ","condition source_range "," replacement_condition ","  range_between _with_surrounding_space ","  range_between _between ","if_branch condition source_ range_between  end_pos ","if_branch if_branch condition  source_range end_pos ","if_branch condition source_ range_between  ","if_branch if_branch condition  source_range ","if_branch if_branch condition  ","if_branch if_branch condition  source ","node if_branch condition  ","condition source_ range_between  end_pos ","if_branch condition  source_range end_pos ","condition source_ range_between  ","if_branch condition  source_range "," replacement_if_branch condition  "]}," RuboCop CLI Command SuggestExtensions bundler":{"type":"method","name":"bundler","children":[],"call":["Bundler  load "]}," RuboCop Cop Style RedundantLineContinuation start_with_arithmetic_operator?":{"type":"method","name":"start_with_arithmetic_operator?","children":[],"call":["(str \"\\\\A\\\\s*[+\\\\-*/%]\") match? "]}," RuboCop Cop Style RedundantLineContinuation method_call_with_arguments?":{"type":"method","name":"method_call_with_arguments?","children":[],"call":["node arguments empty? ! ","node arguments empty? ","node arguments ","node call_type? "]}," RuboCop Cop Style RedundantLineContinuation argument_is_method?":{"type":"method","name":"argument_is_method?","children":[],"call":[" method_call_with_arguments? ","node first_argument ","node send_type? ","node node first_argument  "]}," RuboCop Cop Style RedundantLineContinuation inside_string_literal?":{"type":"method","name":"inside_string_literal?","children":[],"call":["token pos overlaps? ","token pos ","ALLOWED_STRING_TOKENS  include? ","token type "," processed_source tokens each any? "," processed_source tokens each "," processed_source tokens "," processed_source "]}," RuboCop Cop Style ClassEqualityComparison trim_string_quotes":{"type":"method","name":"trim_string_quotes","children":[],"call":["class_node source delete delete ","class_node source delete ","class_node source "]}," RuboCop Cop Style ClassEqualityComparison unable_to_determine_type?":{"type":"method","name":"unable_to_determine_type?","children":[],"call":["class_node call_type? ","class_node variable? "]}," RuboCop Cop Style ClassEqualityComparison require_cbase?":{"type":"method","name":"require_cbase?","children":[],"call":["class_node each_ancestor any? ","class_node each_ancestor "]}," RuboCop Cop Lint RedundantStringCoercion register_offense":{"type":"method","name":"register_offense","children":[],"call":["corrector replace ","receiver source "," add_offense ","node loc selector ","node loc "," format ","node receiver ","node receiver  source ","node node receiver  "]}," RuboCop Cop Lint RedundantStringCoercion on_send":{"type":"method","name":"on_send","children":[],"call":[" register_offense ","node method_name ","child method? ","node each_child_node ","node receiver ","child arguments any? ","child arguments ","child method? ! "]}," RuboCop Cop Lint DuplicateMatchPattern pattern_identity":{"type":"method","name":"pattern_identity","children":[],"call":["pattern source ","pattern children map sort ","pattern children map ","pattern children ","pattern match_alt_type? ","pattern hash_pattern_type? ","pattern_source + ","guard source ","pattern parent children [] ","pattern parent children ","pattern parent ","pattern children map sort to_s ","pattern source  + ","pattern children map sort  + ","pattern children map sort to_s  + ","pattern parent children []  source "]}," RuboCop Cop Lint DuplicateMatchPattern on_case_match":{"type":"method","name":"on_case_match","children":[],"call":[" add_offense ","previous add? "," pattern_identity ","in_pattern_node pattern ","case_node in_pattern_branches each_with_object ","Set  new ","case_node in_pattern_branches "," in_pattern_node pattern _identity ","in_in_pattern_node pattern _node in_pattern_node pattern  ","case_node in_in_pattern_node pattern _branches each_with_object ","case_node in_in_pattern_node pattern _branches "]}," RuboCop Cop Style RedundantLineContinuation method_with_argument?":{"type":"method","name":"method_with_argument?","children":[],"call":["next_token type == ","next_token type ","current_token type == ","current_token type ","ARGUMENT_TYPES  include? "]}," RuboCop Cop Style RedundantLineContinuation inside_string_literal_or_method_with_argument?":{"type":"method","name":"inside_string_literal_or_method_with_argument?","children":[],"call":[" method_with_argument? "," inside_string_literal? "," processed_source tokens each_cons any? "," processed_source tokens each_cons "," processed_source tokens "," processed_source "]}," RuboCop Cop VariableForce Assignment exception_assignment?":{"type":"method","name":"exception_assignment?","children":[],"call":[" node parent exception_variable == "," node "," node parent exception_variable "," node parent "]}," RuboCop Cop Style Semicolon exist_semicolon_after_left_string_interpolation_brace?":{"type":"method","name":"exist_semicolon_after_left_string_interpolation_brace?","children":[],"call":["tokens [] ","(send\n  (lvar :tokens) :[]\n  (int 1)) == "]}," RuboCop Cop Style Semicolon exist_semicolon_before_right_string_interpolation_brace?":{"type":"method","name":"exist_semicolon_before_right_string_interpolation_brace?","children":[],"call":["tokens [] ","(send\n  (lvar :tokens) :[]\n  (int -3)) == "]}," RuboCop Cop Style RequireOrder autocorrect":{"type":"method","name":"autocorrect","children":[],"call":["corrector insert_before ","range2 source ","corrector remove "," range_with_comments_and_lines ","node parent ","node parent if_type? "," range_with_comments_and_lines  source "]}," RuboCop Cop Style ExactRegexpMatch new_method":{"type":"method","name":"new_method","children":[],"call":["node method? "]}," RuboCop Cop Style ExactRegexpMatch on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace "," add_offense "," format ","parsed_regexp [] text ","parsed_regexp [] "," new_method ","node receiver source ","node receiver ","tokens [] == ","tokens [] ","parsed_regexp map ","Regexp Parser  parse "," exact_regexp_match "," exact_match_pattern? ","Regexp Parser  parse  [] text ","parsed_ exact_regexp_match  [] text ","Regexp Parser  parse  [] ","parsed_ exact_regexp_match  [] ","parsed_regexp map  [] == ","parsed_regexp map  [] ","Regexp Parser  parse  map ","parsed_ exact_regexp_match  map "," exact_ exact_regexp_match _match "]}," RuboCop Cop Style CombinableLoops combine_with_left_sibling":{"type":"method","name":"combine_with_left_sibling","children":[],"call":["corrector remove "," range_with_surrounding_space ","node source_range ","corrector replace ","node body source ","node body ","node left_sibling body source ","node left_sibling body ","node left_sibling "]}," RuboCop Cop Style CombinableLoops same_collection_looping_for?":{"type":"method","name":"same_collection_looping_for?","children":[],"call":["node collection == ","sibling collection ","node collection "]}," RuboCop Cop Style CombinableLoops same_collection_looping_block?":{"type":"method","name":"same_collection_looping_block?","children":[],"call":["sibling send_node arguments == ","node send_node arguments ","node send_node ","sibling send_node arguments ","sibling send_node ","sibling receiver == ","node receiver ","sibling receiver ","sibling send_node method? ","node method_name ","sibling method? ","sibling numblock_type? ! ","sibling numblock_type? ","sibling block_type? ! ","sibling block_type? ","sibling nil? "]}," RuboCop Cop Style Attr define_attr_method?":{"type":"method","name":"define_attr_method?","children":[],"call":["def_node method? ","node each_descendant any? ","node each_descendant "]}," RuboCop Cop Style Attr allowed_context?":{"type":"method","name":"allowed_context?","children":[],"call":[" define_attr_method? "," class_eval? ! "," class_eval? ","class_node class_type? ! ","class_node class_type? ","node each_ancestor first ","node each_ancestor ","node each_ancestor first  class_type? ! ","node each_ancestor first  class_type? "]}," RuboCop Cop Lint Void autocorrect_nonmutating_send":{"type":"method","name":"autocorrect_nonmutating_send","children":[],"call":["corrector replace ","send_node loc selector ","send_node loc ","node send_node ","node send_type? ","node send_node  loc selector ","node send_node  loc ","node node send_node  "]}," RuboCop Cop Lint Void autocorrect_void_expression":{"type":"method","name":"autocorrect_void_expression","children":[],"call":["corrector remove "," range_with_surrounding_space ","node source_range "]}," RuboCop Cop Lint Void autocorrect_void_self":{"type":"method","name":"autocorrect_void_self","children":[],"call":["corrector remove "," range_with_surrounding_space ","node source_range "]}," RuboCop Cop Lint Void autocorrect_void_literal":{"type":"method","name":"autocorrect_void_literal","children":[],"call":["corrector remove "," range_with_surrounding_space ","node source_range "]}," RuboCop Cop Lint Void autocorrect_void_var":{"type":"method","name":"autocorrect_void_var","children":[],"call":["corrector remove "," range_with_surrounding_space ","node loc name ","node loc "]}," RuboCop Cop Lint Void autocorrect_void_op":{"type":"method","name":"autocorrect_void_op","children":[],"call":["corrector replace "," range_with_surrounding_space ","node loc selector ","node loc ","node receiver source ","node receiver ","node arguments empty? ","node arguments "]}," RuboCop Cop Lint UselessAssignment remove_local_variable_assignment_part":{"type":"method","name":"remove_local_variable_assignment_part","children":[],"call":["corrector replace ","node expression source ","node expression "]}," RuboCop Cop Lint UselessAssignment replace_named_capture_group_with_non_capturing_group":{"type":"method","name":"replace_named_capture_group_with_non_capturing_group","children":[],"call":["corrector replace ","node children first source sub ","node children first source ","node children first ","node children "]}," RuboCop Cop Lint UselessAssignment remove_trailing_character_from_operator":{"type":"method","name":"remove_trailing_character_from_operator","children":[],"call":["corrector remove ","node parent location operator end adjust ","node parent location operator end ","node parent location operator ","node parent location ","node parent "]}," RuboCop Cop Lint UselessAssignment rename_variable_with_underscore":{"type":"method","name":"rename_variable_with_underscore","children":[],"call":["corrector replace "]}," RuboCop Cop Lint UselessAssignment remove_exception_assignment_part":{"type":"method","name":"remove_exception_assignment_part","children":[],"call":["corrector remove "," range_between ","node source_range end_pos ","node source_range ","(or\n  (csend\n    (send\n      (send\n        (send\n          (lvar :node) :parent) :children) :first) :source_range)\n  (send\n    (send\n      (send\n        (lvar :node) :parent) :location) :keyword)) end_pos ","node parent location keyword ","node parent location ","node parent ","node parent children first ","node parent children "]}," RuboCop Cop Lint UselessAssignment autocorrect":{"type":"method","name":"autocorrect","children":[],"call":[" remove_local_variable_assignment_part ","assignment node "," replace_named_capture_group_with_non_capturing_group ","assignment variable name ","assignment variable ","assignment regexp_named_capture? "," remove_trailing_character_from_operator ","assignment operator_assignment? "," rename_variable_with_underscore ","assignment multiple_assignment? "," remove_exception_assignment_part ","assignment exception_assignment? ","assignment rest_assignment? ","assignment for_assignment? "]}," RuboCop Cop Lint TopLevelReturnWithArgument top_level_return?":{"type":"method","name":"top_level_return?","children":[],"call":["return_node each_ancestor none? ","return_node each_ancestor "]}," RuboCop Cop Lint TopLevelReturnWithArgument remove_arguments":{"type":"method","name":"remove_arguments","children":[],"call":["corrector replace "]}," RuboCop Cop Lint TopLevelReturnWithArgument top_level_return_with_any_argument?":{"type":"method","name":"top_level_return_with_any_argument?","children":[],"call":["return_node arguments? "," top_level_return? "]}," RuboCop Cop Lint AmbiguousBlockAssociation wrap_in_parentheses":{"type":"method","name":"wrap_in_parentheses","children":[],"call":["corrector insert_after ","node last_argument ","corrector replace ","node loc selector end join ","node first_argument source_range begin ","node first_argument source_range ","node first_argument ","node loc selector end ","node loc selector ","node loc ","corrector insert_before ","corrector remove ","node first_argument source_node loc selector end join  begin ","node first_argument source_node loc selector end join  "]}," RuboCop Cop Base inspect":{"type":"method","name":"inspect","children":[],"call":[" object_id "," class name "," class "]}," RuboCop Config inspect":{"type":"method","name":"inspect","children":[],"call":[" loaded_path "," object_id "," class name "," class "]}," RuboCop Cop VariableForce Assignment rest_assignment_node":{"type":"method","name":"rest_assignment_node","children":[],"call":[" node parent "," node "," node parent type == "," node parent type "]}," RuboCop Cop VariableForce Assignment rest_assignment?":{"type":"method","name":"rest_assignment?","children":[],"call":[" meta_assignment_node type == "," meta_assignment_node type "," meta_assignment_node "]}," RuboCop Cop Style SelectByRegexp replacement":{"type":"method","name":"replacement","children":[],"call":["REPLACEMENTS  [] ","OPPOSITE_REPLACEMENTS  [] ","node method_name "," opposite? ","node node method_name  ","  opposite? ? "]}," RuboCop Cop Style RedundantRegexpConstructor on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace ","regopt join ","regexp map join ","regexp map "," add_offense "," format ","node method_name "," redundant_regexp_constructor ","regopt join  join "]}," RuboCop Cop Style RedundantFilterChain predicate_range":{"type":"method","name":"predicate_range","children":[],"call":["predicate_node receiver source_range end join ","predicate_node loc selector ","predicate_node loc ","predicate_node receiver source_range end ","predicate_node receiver source_range ","predicate_node receiver "]}," RuboCop Cop Style RedundantFilterChain offense_range":{"type":"method","name":"offense_range","children":[],"call":["select_node loc selector join ","predicate_node loc selector ","predicate_node loc ","select_node loc selector ","select_node loc "]}," RuboCop Cop Style RedundantFilterChain register_offense":{"type":"method","name":"register_offense","children":[],"call":["corrector replace ","select_node loc selector ","select_node loc ","corrector remove "," predicate_range "," add_offense "," offense_range "," format ","predicate_node method_name ","select_node method_name ","REPLACEMENT_METHODS  [] ","  offense_range  "]}," RuboCop Cop Style RedundantFilterChain on_send":{"type":"method","name":"on_send","children":[],"call":[" register_offense "," active_support_extensions_enabled? ! "," active_support_extensions_enabled? ","RAILS_METHODS  include? "," select_predicate? ","node block_node ","node arguments? "]}," RuboCop Cop Style RedundantArrayConstructor register_offense":{"type":"method","name":"register_offense","children":[],"call":["corrector replace ","replacement source "," add_offense "]}," RuboCop Cop Style RedundantArrayConstructor on_send":{"type":"method","name":"on_send","children":[],"call":[" register_offense ","selector begin join ","node source_range end ","node source_range ","selector begin ","node method? ","receiver source_range join ","receiver source_range ","node loc selector ","node loc ","node receiver "," redundant_array_constructor ","node loc selector  begin join ","node source_receiver source_range join  end ","node source_receiver source_range join  ","node loc selector  begin ","receiver source_receiver source_range join  join ","node receiver  source_range join ","receiver source_receiver source_range join  ","node receiver  source_range ","node loc node loc selector  ","node node receiver  "]}," RuboCop Cop Style MultipleComparison comparisons_threshold":{"type":"method","name":"comparisons_threshold","children":[],"call":[" cop_config fetch "," cop_config "]}," RuboCop Cop Style ExactRegexpMatch exact_match_pattern?":{"type":"method","name":"exact_match_pattern?","children":[],"call":["parsed_regexp [] quantifier ! ","parsed_regexp [] quantifier ","parsed_regexp [] ","tokens [] == ","tokens [] ","parsed_regexp map ","parsed_regexp map  [] == ","parsed_regexp map  [] "]}," RuboCop Cop AllowedReceivers allowed_receivers":{"type":"method","name":"allowed_receivers","children":[],"call":[" cop_config fetch "," cop_config "]}," RuboCop Cop AllowedReceivers receiver_name":{"type":"method","name":"receiver_name","children":[],"call":["receiver source ","receiver method_name to_s ","receiver method_name "," receiver_name ","receiver receiver ","receiver send_type? ","receiver receiver const_type? ! ","receiver receiver const_type? "]}," RuboCop Cop AllowedReceivers allowed_receiver?":{"type":"method","name":"allowed_receiver?","children":[],"call":[" allowed_receivers include? "," allowed_receivers "," receiver_name ","  receiver_name  "]}," RuboCop Cop Lint InheritException inherit_exception_class_with_omitted_namespace?":{"type":"method","name":"inherit_exception_class_with_omitted_namespace?","children":[],"call":[" exception_class? ","sibling identifier ","class_node left_siblings any? ","class_node left_siblings ","class_node parent_class namespace ","class_node parent_class ","sibling respond_to? "]}," RuboCop Cop VariableForce Assignment for_assignment_node":{"type":"method","name":"for_assignment_node","children":[],"call":[" node parent "," node "," node ancestors find "," node ancestors "]}," RuboCop Cop VariableForce Assignment for_assignment?":{"type":"method","name":"for_assignment?","children":[],"call":[" meta_assignment_node for_type? "," meta_assignment_node "]}," RuboCop Cop InternalAffairs CopDescription register_offense_for_wrong_word":{"type":"method","name":"register_offense_for_wrong_word","children":[],"call":[" replace_with_suggestion ","start_with_subject [] ! ","start_with_subject [] "," add_offense "," format "," suggestion_for_message "," range "," suggestion_for_ format  ","  suggestion_for_message  ","  range  "]}," RuboCop Cop InternalAffairs CopDescription register_offense_for_empty_comment_line":{"type":"method","name":"register_offense_for_empty_comment_line","children":[],"call":["corrector remove "," add_offense "," range ","  range  "]}," RuboCop Options add_lsp_option":{"type":"method","name":"add_lsp_option","children":[],"call":[" option "," section "]}," RuboCop Lsp Severity find_by":{"type":"method","name":"find_by","children":[],"call":[]}," RuboCop Lsp Server stop":{"type":"method","name":"stop","children":[],"call":[" exit "," at_exit "]}," RuboCop Lsp Server offenses":{"type":"method","name":"offenses","children":[],"call":["@runtime offenses "]}," RuboCop Lsp Server format":{"type":"method","name":"format","children":[],"call":["@runtime format "]}," RuboCop Lsp Server write":{"type":"method","name":"write","children":[],"call":["@writer write "]}," RuboCop Lsp Server start":{"type":"method","name":"start","children":[],"call":[" log ","e backtrace inspect ","e backtrace ","e message [] ","e message ","e class ","@routes handle_unsupported_method ","route call ","@routes for ","request [] ","@routes handle_method_missing ","request key? ! ","request key? ","@reader read ","Logger  log ","@@routes for s handle_unsupported_method ","@routes for  call ","@@routes for s for ","@@routes for s handle_method_missing "]}," RuboCop Lsp Server initialize":{"type":"method","name":"initialize","children":[],"call":["Routes  new ","RuboCop Lsp Runtime  new ","LanguageServer Protocol Transport Io Writer  new ","LanguageServer Protocol Transport Io Reader  new "]}," RuboCop Lsp Runtime run_rubocop":{"type":"method","name":"run_rubocop","children":[],"call":["runner run ","RuboCop Runner  new ","RuboCop Runner  new  run "]}," RuboCop Lsp Runtime redirect_stdout":{"type":"method","name":"redirect_stdout","children":[],"call":["stdout string ","RuboCop Server Helper  redirect ","StringIO  new ","StringIO  new  string "]}," RuboCop Lsp Runtime offenses":{"type":"method","name":"offenses","children":[],"call":["results dig ","@logged_paths << ","Logger  log ","@logged_paths include? ","results [] empty? ","results [] ","JSON  parse "," run_rubocop "," redirect_stdout ","diagnostic_options []= "," config_only_options ","JSON  parse  dig ","JSON  parse  [] empty? ","JSON  parse  [] "]}," RuboCop Lsp Runtime format":{"type":"method","name":"format","children":[],"call":["formatting_options [] "," run_rubocop "," redirect_stdout ","formatting_options []= "," config_only_options ","command == "]}," RuboCop Lsp Runtime initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop Lsp Routes to_range":{"type":"method","name":"to_range","children":[],"call":["location [] - ","location [] "]}," RuboCop Lsp Routes to_diagnostic":{"type":"method","name":"to_diagnostic","children":[],"call":[" to_range ","Severity  find_by ","offense [] "]}," RuboCop Lsp Routes remove_file_protocol_from":{"type":"method","name":"remove_file_protocol_from","children":[],"call":["uri delete_prefix "]}," RuboCop Lsp Routes diagnostic":{"type":"method","name":"diagnostic","children":[],"call":[" to_diagnostic ","offenses map ","@server offenses "," remove_file_protocol_from ","@text_cache []= ","@server offenses  map ","@server @server offenses  "]}," RuboCop Lsp Routes format_file":{"type":"method","name":"format_file","children":[],"call":["text count + ","text count ","new_text == ","@server format "," remove_file_protocol_from ","Logger  log ","@text_cache [] ","@text_cache []  count + ","@text_cache []  count ","@server format  == ","new_@text_cache []  == ","@@text_cache [] _cache [] "]}," RuboCop Lsp Routes handle_method_missing":{"type":"method","name":"handle_method_missing","children":[],"call":["@server write ","request [] ","request key? "]}," RuboCop Lsp Routes handle_unsupported_method":{"type":"method","name":"handle_unsupported_method","children":[],"call":["Logger  log ","@server write ","LanguageServer Protocol Interface ResponseError  new ","request [] "]}," RuboCop Lsp Routes for":{"type":"method","name":"for","children":[],"call":[" method "," respond_to? "]}," RuboCop Lsp Routes initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop Lsp Routes handle":{"type":"method","name":"handle","children":[],"call":[]}," RuboCop Lsp Logger log":{"type":"method","name":"log","children":[],"call":[]}," RuboCop Cop Utils RegexpRanges pop_octal_digits":{"type":"method","name":"pop_octal_digits","children":[],"call":["digits << ","expressions shift ","next_child text =~ ","next_child text ","next_child type == ","next_child type ","expressions first ","2 times ","expressions first  text =~ ","expressions first  text ","expressions first  type == ","expressions first  type "]}," RuboCop Cop Utils RegexpRanges octal_digit?":{"type":"method","name":"octal_digit?","children":[],"call":["(irange\n  (str \"0\")\n  (str \"7\")) cover? "]}," RuboCop Cop Utils RegexpRanges escaped_octal?":{"type":"method","name":"escaped_octal?","children":[],"call":["expr text =~ ","expr text "]}," RuboCop Cop Utils RegexpRanges compose_range":{"type":"method","name":"compose_range","children":[],"call":["range_end concat "," pop_octal_digits "," escaped_octal? ","range_end first "," compound_token dup << "," compound_token dup "," compound_token "," octal_digit? ","range_start text "," compound_token size between? "," compound_token size ","current expressions ","@compound_token dup << ","@compound_token dup ","@compound_token size between? ","@compound_token size "," compound_token dup <<  text ","@compound_token dup <<  text "]}," RuboCop Cop Utils RegexpRanges process_set":{"type":"method","name":"process_set","children":[],"call":[" populate ","current expressions each ","current expressions ","@pairs << "," compose_range ","current token "]}," RuboCop Cop Utils RegexpRanges populate":{"type":"method","name":"populate","children":[],"call":[" compound_token clear "," compound_token "," process_set ","current type == ","current type "," compound_token concat "," pop_octal_digits "," compound_token << "," escaped_octal? ","expressions shift ","expressions empty? ","expr expressions to_a ","expr expressions ","@compound_token clear ","@compound_token concat ","@compound_token << ","expressions shift  type == ","expressions shift  type ","expr expressions to_a  shift ","expr expressions to_a  empty? ","expr expr expressions to_a  to_a ","expr expr expressions to_a  "]}," RuboCop Cop Utils RegexpRanges pairs":{"type":"method","name":"pairs","children":[],"call":["pair map ","@pairs map "," populate "," root "," populate_all "]}," RuboCop Cop Utils RegexpRanges initialize":{"type":"method","name":"initialize","children":[],"call":[]}," RuboCop Cop Style YAMLFileRead offense_range":{"type":"method","name":"offense_range","children":[],"call":["node loc selector join ","node source_range end ","node source_range ","node loc selector ","node loc "]}," RuboCop Cop Style YAMLFileRead on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace "," add_offense "," format ","file_path source ","node method_name ","rest_arguments map join ","rest_arguments map ","rest_arguments empty? "," offense_range "," yaml_file_read? "," target_ruby_version <= "," target_ruby_version ","node method? "," offense_ offense_range  "]}," RuboCop Cop Style ReturnNilInPredicateMethodDefinition on_def":{"type":"method","name":"on_def","children":[],"call":["corrector replace "," add_offense "," format ","return_node source "," return_nil? ","body each_descendant ","node body "," matches_allowed_pattern? ","node method_name "," allowed_method? ","node predicate_method? "," register_offense "," nil_node_at_the_end_of_method_body ","node body  each_descendant ","node node body  "," nil_node_at_the_end_of_method_node body  ","  nil_node_at_the_end_of_method_body _at_the_end_of_method_body "]}," RuboCop Cop Style RedundantRegexpArgument replacement":{"type":"method","name":"replacement","children":[],"call":["(send\n  (lvar :chars) :map) join ","char delete! ","STR_SPECIAL_CHARS  include? ","char dup ","chars map ","strings << ","stack pop ","stack push ","char == ","stack empty? ","regexp_content chars each_with_object ","regexp_content chars ","regexp_node content ","(send\n  (lvar :char dup s) :map) join ","char dup  delete! ","char dup  dup ","char dup s map ","char dup  == ","regexp_content char dup s each_with_object ","regexp_node content  chars each_with_object ","regexp_content char dup s ","regexp_node content  chars "]}," RuboCop Cop Style RedundantRegexpArgument determinist_regexp?":{"type":"method","name":"determinist_regexp?","children":[],"call":["DETERMINISTIC_REGEX  match? ","regexp_node source "]}," RuboCop Cop Style RedundantRegexpArgument on_send":{"type":"method","name":"on_send","children":[],"call":["corrector replace "," add_offense "," format ","regexp_node source ","new_argument include? "," replacement "," determinist_regexp? ","regexp_node content == ","regexp_node content ","regexp_node regopt children empty? ! ","regexp_node regopt children empty? ","regexp_node regopt children ","regexp_node regopt ","regexp_node regexp_type? ","node first_argument "," preferred_argument ","node first_argument  source "," replacement  include? ","node first_argument  content == ","node first_argument  content ","node first_argument  regopt children empty? ! ","node first_argument  regopt children empty? ","node first_argument  regopt children ","node first_argument  regopt ","node first_argument  regexp_type? ","  preferred_argument red_argument "]}," RuboCop Cop Style RedundantCurrentDirectoryInPath on_send":{"type":"method","name":"on_send","children":[],"call":["corrector remove "," add_offense "," range_between ","begin_pos + ","node first_argument source_range begin begin_pos + ","node first_argument source_range begin begin_pos ","node first_argument source_range begin ","node first_argument source_range ","node first_argument ","node first_argument source index ","node first_argument source ","node first_argument str_content start_with? ","node first_argument str_content ","node method? ","  range_between _between ","node first_argument source_range begin begin_pos +  + ","node first_argument source_ range_between  begin begin_pos + ","node first_argument source_range begin node first_argument source_range begin begin_pos +  + ","node first_argument source_ range_between  begin begin_pos ","node first_argument source_range begin node first_argument source_range begin begin_pos +  ","node first_argument source_ range_between  begin ","node first_argument source_ range_between  ","node first_argument source node first_argument source index  "]}," RuboCop Cop Lint RedundantRequireStatement need_to_require_pp?":{"type":"method","name":"need_to_require_pp?","children":[],"call":["PRETTY_PRINT_METHODS  include? ","node method_name "," pp_const? ","node receiver "," processed_source ast each_descendant any? "," processed_source ast each_descendant "," processed_source ast "," processed_source "]}," RuboCop Cop Lint RedundantRegexpQuantifiers message":{"type":"method","name":"message","children":[],"call":[" format ","group quantifier to_s ","group quantifier ","child quantifier to_s ","child quantifier "]}," RuboCop Cop Lint RedundantRegexpQuantifiers quantifier_range":{"type":"method","name":"quantifier_range","children":[],"call":[" range_between ","group loc quantifier end_pos ","group loc quantifier ","group loc ","child loc quantifier begin_pos ","child loc quantifier ","child loc "]}," RuboCop Cop Lint RedundantRegexpQuantifiers merged_quantifier":{"type":"method","name":"merged_quantifier","children":[],"call":["quantifier1 == "," mergeable_quantifier "," mergeable_quantifier  == "]}," RuboCop Cop Lint RedundantRegexpQuantifiers mergeable_quantifier":{"type":"method","name":"mergeable_quantifier","children":[],"call":["expr quantity ","expr quantifier "]}," RuboCop Cop Lint RedundantRegexpQuantifiers character_set?":{"type":"method","name":"character_set?","children":[],"call":["expr is? "]}," RuboCop Cop Lint RedundantRegexpQuantifiers redundantly_quantifiable?":{"type":"method","name":"redundantly_quantifiable?","children":[],"call":["node terminal? "," character_set? "," redundant_group? "]}," RuboCop Cop Lint RedundantRegexpQuantifiers redundant_group?":{"type":"method","name":"redundant_group?","children":[],"call":["(send\n  (lvar :expr) :count) == ","child type != ","child type ","expr count ","expr is? "]}," RuboCop Cop Lint RedundantRegexpQuantifiers each_redundantly_quantified_pair":{"type":"method","name":"each_redundantly_quantified_pair","children":[],"call":[" mergeable_quantifier "," redundantly_quantifiable? ","seen << ","expr each_expression "," mergeable_quantifier ! "," redundant_group? ! "," redundant_group? ","seen include? ","node parsed_tree ","Set  new ","Set  new  << ","Set  new  include? "]}," RuboCop Cop Lint RedundantRegexpQuantifiers on_regexp":{"type":"method","name":"on_regexp","children":[],"call":["corrector replace ","child loc quantifier ","child loc ","group loc quantifier ","group loc "," add_offense "," message "," quantifier_range "," merged_quantifier "," each_redundantly_quantified_pair ","node interpolation? "]}," RuboCop Cop Lint MixedCaseRange rewrite_regexp_range":{"type":"method","name":"rewrite_regexp_range","children":[],"call":["second uniq join ","second uniq ","first uniq join ","first uniq "," range_for begin "," range_for "," range_for end ","source split "]}," RuboCop Cop Lint MixedCaseRange skip_range?":{"type":"method","name":"skip_range?","children":[],"call":["bound type == ","bound type ","(lvar :range_start) any? "]}," RuboCop Cop Lint MixedCaseRange skip_expression?":{"type":"method","name":"skip_expression?","children":[],"call":["(and\n  (send\n    (send\n      (lvar :expr) :type) :==\n    (sym :set))\n  (send\n    (send\n      (lvar :expr) :token) :==\n    (sym :character))) ! ","expr token == ","expr token ","expr type == ","expr type "]}," RuboCop Cop Lint MixedCaseRange unsafe_range?":{"type":"method","name":"unsafe_range?","children":[],"call":[" range_for != "," range_for ","range_end length != ","range_end length ","range_start length != ","range_start length "]}," RuboCop Cop Lint MixedCaseRange range_pairs":{"type":"method","name":"range_pairs","children":[],"call":["RuboCop Cop Utils RegexpRanges  new pairs ","RuboCop Cop Utils RegexpRanges  new "]}," RuboCop Cop Lint MixedCaseRange range_for":{"type":"method","name":"range_for","children":[],"call":["range include? ","RANGES  detect "]}," RuboCop Cop Lint MixedCaseRange build_source_range":{"type":"method","name":"build_source_range","children":[],"call":[" range_between ","range_end expression end_pos ","range_end expression ","range_start expression begin_pos ","range_start expression "]}," RuboCop Cop Lint MixedCaseRange each_unsafe_regexp_range":{"type":"method","name":"each_unsafe_regexp_range","children":[],"call":[" build_source_range "," unsafe_range? ","range_end text ","range_start text "," skip_range? "," range_pairs reject "," range_pairs "," skip_expression? ","node parsed_tree "]}," RuboCop Cop Lint MixedCaseRange on_regexp":{"type":"method","name":"on_regexp","children":[],"call":["corrector replace "," rewrite_regexp_range ","loc source "," add_offense "," each_unsafe_regexp_range "]}," RuboCop Cop Lint MixedCaseRange on_irange":{"type":"method","name":"on_irange","children":[],"call":[" add_offense "," unsafe_range? ","range_end value ","range_start value ","range_end nil? ","range_start nil? ","node children ","node children compact all? ","node children compact "]}," RuboCop Cop Lint MissingSuper allowed_classes":{"type":"method","name":"allowed_classes","children":[],"call":["STATELESS_CLASSES  + "," cop_config fetch "," cop_config "]}," RuboCop Cop Lint MissingSuper allowed_class?":{"type":"method","name":"allowed_class?","children":[],"call":[" allowed_classes include? ","node const_name "," allowed_classes "]}," RuboCop Cop Lint DuplicateRegexpCharacterClassElement octal?":{"type":"method","name":"octal?","children":[],"call":["(irange\n  (str \"0\")\n  (str \"7\")) cover? "]}," RuboCop Cop Lint DuplicateRegexpCharacterClassElement escaped_octal?":{"type":"method","name":"escaped_octal?","children":[],"call":[" octal? ","string [] ","string [] == ","string length == ","string length "]}," RuboCop Cop Lint DuplicateRegexpCharacterClassElement source_range":{"type":"method","name":"source_range","children":[],"call":[" range_between ","children last expression begin_pos + ","children last to_s length ","children last to_s ","children last ","children last expression begin_pos ","children last expression ","children first expression begin_pos ","children first expression ","children first ","children size == ","children size "]}," RuboCop Cop Lint DuplicateRegexpCharacterClassElement pop_octal_digits":{"type":"method","name":"pop_octal_digits","children":[],"call":["current_child << ","expressions shift "," octal? ","next_child to_s ","expressions first ","OCTAL_DIGITS_AFTER_ESCAPE  times ","expressions first  to_s "]}," RuboCop Cop Lint DuplicateRegexpCharacterClassElement group_expressions":{"type":"method","name":"group_expressions","children":[],"call":[" pop_octal_digits "," escaped_octal? ","group first to_s ","group first "," within_interpolation? ","expressions shift ","expressions empty? ","expressions to_a ","expressions to_a  shift ","expressions to_a  empty? ","expressions to_a  to_a "]}," RuboCop CLI Command Lsp run":{"type":"method","name":"run","children":[],"call":["RuboCop Lsp Server  new start ","RuboCop Lsp Server  new "]}," RuboCop Cop Style RedundantRegexpArgument preferred_argument":{"type":"method","name":"preferred_argument","children":[],"call":["new_argument gsub! ","new_argument include? "," replacement "," replacement  gsub! "," replacement  include? "]}," RuboCop Lsp Server configure":{"type":"method","name":"configure","children":[],"call":["@runtime safe_autocorrect= ","@runtime layout_mode= ","options [] ","@runtime lint_mode= "]}," RuboCop Lsp Routes safe_autocorrect?":{"type":"method","name":"safe_autocorrect?","children":[],"call":["safe_autocorrect == ","safe_autocorrect nil? ","request dig ","request dig  == ","request dig  nil? "]}," RuboCop Cop Metrics Utils CodeLengthCalculator source_from_node_with_heredoc":{"type":"method","name":"source_from_node_with_heredoc","children":[],"call":["@processed_source [] ","last_line - ","node first_line - ","node first_line ","(lvar :last_line) max ","descendant last_line ","descendant loc heredoc_end line ","descendant loc heredoc_end ","descendant loc "," heredoc_node? ","node each_descendant ","descendant source ","(lvar :last_line) max  - ","(lvar :(lvar :last_line) max ) max ","descendant (lvar :last_line) max  "]}," RuboCop Cop Metrics Utils CodeLengthCalculator node_with_heredoc?":{"type":"method","name":"node_with_heredoc?","children":[],"call":[" heredoc_node? ","node each_descendant any? ","node each_descendant "]}," RuboCop Cop Lint Debugger assumed_usage_context?":{"type":"method","name":"assumed_usage_context?","children":[],"call":["node each_ancestor none? ","node each_ancestor ","node each_ancestor any? ","node arguments empty? ","node arguments "]}," RuboCop Cop Layout EmptyLineBetweenDefs macro_candidate?":{"type":"method","name":"macro_candidate?","children":[],"call":[" empty_line_between_macros include? ","node children first method_name ","node children first ","node children "," empty_line_between_macros ","node children first macro? ","node block_type? "]}," RuboCop Cop Layout EmptyLineBetweenDefs empty_line_between_macros":{"type":"method","name":"empty_line_between_macros","children":[],"call":[" cop_config fetch map "," cop_config fetch "," cop_config "]}," RuboCop Cop Layout EmptyLineBetweenDefs def_location":{"type":"method","name":"def_location","children":[],"call":["correction_node loc keyword join ","correction_node loc name ","correction_node loc ","correction_node loc keyword ","correction_node source_range join ","correction_node children first source_range ","correction_node children first ","correction_node children ","correction_node source_range ","correction_node block_type? "]}," RuboCop Cop VariableForce Assignment find_multiple_assignment_node":{"type":"method","name":"find_multiple_assignment_node","children":[],"call":[" find_multiple_assignment_node ","parent type == ","parent type ","grandparent_node parent ","grandparent_node children any? ","grandparent_node children ","grandparent_node type == ","grandparent_node type ","grandparent_node parent  type == ","grandparent_node parent  type ","grandgrandparent_node parent _node grandparent_node parent  ","grandgrandparent_node parent _node children any? ","grandgrandparent_node parent _node children ","grandgrandparent_node parent _node type == ","grandgrandparent_node parent _node type "]}," RuboCop Cop Layout SpaceAfterComma before_semicolon?":{"type":"method","name":"before_semicolon?","children":[],"call":["tokens [] semicolon? ","tokens [] ","tokens index + ","tokens index "," processed_source tokens "," processed_source "," processed_source tokens  [] semicolon? "," processed_source tokens  [] "," processed_source tokens  index + "," processed_source tokens  index "," processed_source  processed_source tokens  "]}," RuboCop Cop PrecedingFollowingAlignment aligned_dot?":{"type":"method","name":"aligned_dot?","children":[],"call":["char == ","range source [] ","range source ","line [] ","range column ","line []  == "]}," RuboCop Cop Layout TrailingEmptyLines end_with_percent_blank_string?":{"type":"method","name":"end_with_percent_blank_string?","children":[],"call":["processed_source buffer source end_with? ","processed_source buffer source ","processed_source buffer "]}," RuboCop Lsp Runtime config_only_options":{"type":"method","name":"config_only_options","children":[],"call":["only_options << "]}," RuboCop Lsp Routes extract_initialization_options_from":{"type":"method","name":"extract_initialization_options_from","children":[],"call":["request dig == ","request dig ","safe_autocorrect == ","safe_autocorrect nil? ","request dig  == ","request dig  nil? "]}," RuboCop Cop Style SymbolArray invalid_percent_array_contents?":{"type":"method","name":"invalid_percent_array_contents?","children":[],"call":[" complex_content? "]}," RuboCop Cop Style SymbolArray complex_content?":{"type":"method","name":"complex_content?","children":[],"call":["content_without_delimiter_pairs include? ","DELIMITERS  any? ","content include? ","content gsub ","content to_s ","node children any? ","node children ","(send\n  (lvar :content) :map) join ","c source ","c is_a? ","content map ","DELIMITERS  include? ","sym source ","content gsub  include? ","content to_s _without_delimiter_pairs include? ","(send\n  (lvar :content) :map) join _without_delimiter_pairs include? ","content to_s  include? ","(send\n  (lvar :content) :map) join  include? ","content to_s  gsub ","(send\n  (lvar :content) :map) join  gsub ","content to_s  to_s ","(send\n  (lvar :content) :map) join  to_s ","(send\n  (lvar :content to_s ) :map) join ","(send\n  (lvar :(send\n  (lvar :content) :map) join ) :map) join ","content to_s  map ","(send\n  (lvar :content) :map) join  map "]}," RuboCop Cop Style ReturnNilInPredicateMethodDefinition register_offense":{"type":"method","name":"register_offense","children":[],"call":["corrector replace "," add_offense "]}," RuboCop Cop Style ReturnNilInPredicateMethodDefinition nil_node_at_the_end_of_method_body":{"type":"method","name":"nil_node_at_the_end_of_method_body","children":[],"call":["last_child nil_type? ","last_child is_a? ","body children last ","body children ","body begin_type? ","body nil_type? ","body children last  nil_type? ","body children last  is_a? "]}," RuboCop Cop Style MethodCallWithArgsParentheses OmitParentheses call_in_match_pattern?":{"type":"method","name":"call_in_match_pattern?","children":[],"call":["node parent ","parent match_pattern_p_type? ","parent match_pattern_type? ","node node parent  ","node parent  match_pattern_p_type? ","node parent  match_pattern_type? "]}," RuboCop Cop Style ArgumentsForwarding SendNodeClassifier pre_ruby_32_allow_forward_all?":{"type":"method","name":"pre_ruby_32_allow_forward_all?","children":[],"call":["@config fetch ! ","@config fetch "," forwarded_block_arg ","@def_node arguments none? ","@def_node arguments "," target_ruby_version < "," target_ruby_version "]}," RuboCop Cop Style ArgumentsForwarding SendNodeClassifier target_ruby_version":{"type":"method","name":"target_ruby_version","children":[],"call":["@config fetch "]}," RuboCop Cop Style ArgumentsForwarding SendNodeClassifier forwarded_exactly_all?":{"type":"method","name":"forwarded_exactly_all?","children":[],"call":[" forwarded_block_arg "," forwarded_kwrest_arg "," forwarded_rest_arg ","@send_node arguments size == ","@send_node arguments size ","@send_node arguments "]}," RuboCop Cop Style ArgumentsForwarding SendNodeClassifier referenced_none?":{"type":"method","name":"referenced_none?","children":[],"call":["(or\n  (or\n    (send nil :referenced_rest_arg?)\n    (send nil :referenced_kwrest_arg?))\n  (send nil :referenced_block_arg?)) ! "," referenced_block_arg? "," referenced_kwrest_arg? "," referenced_rest_arg? "]}," RuboCop Cop Style ArgumentsForwarding SendNodeClassifier referenced_block_arg?":{"type":"method","name":"referenced_block_arg?","children":[],"call":["@referenced_lvars include? "]}," RuboCop Cop Style ArgumentsForwarding SendNodeClassifier referenced_kwrest_arg?":{"type":"method","name":"referenced_kwrest_arg?","children":[],"call":["@referenced_lvars include? "]}," RuboCop Cop Style ArgumentsForwarding SendNodeClassifier referenced_rest_arg?":{"type":"method","name":"referenced_rest_arg?","children":[],"call":["@referenced_lvars include? "]}," RuboCop Cop Style ArgumentsForwarding SendNodeClassifier classification":{"type":"method","name":"classification","children":[],"call":[" target_ruby_version >= "," target_ruby_version "," pre_ruby_32_allow_forward_all? "," forwarded_exactly_all? "," referenced_none? "," forwarded_kwrest_arg "," forwarded_rest_arg "," can_forward_all? "]}," RuboCop Cop Style ArgumentsForwarding SendNodeClassifier forwarded_block_arg":{"type":"method","name":"forwarded_block_arg","children":[],"call":[" find_forwarded_block_arg first "," find_forwarded_block_arg "," referenced_block_arg? "," forwarded_block_arg? "," arguments find "," arguments "]}," RuboCop Cop Style ArgumentsForwarding SendNodeClassifier forwarded_kwrest_arg":{"type":"method","name":"forwarded_kwrest_arg","children":[],"call":[" find_forwarded_kwrest_arg first "," find_forwarded_kwrest_arg "," referenced_kwrest_arg? ","(send\n  (send nil :arguments) :filter_map) first "," extract_forwarded_kwrest_arg "," arguments filter_map "," arguments "]}," RuboCop Cop Style ArgumentsForwarding SendNodeClassifier forwarded_rest_arg":{"type":"method","name":"forwarded_rest_arg","children":[],"call":[" find_forwarded_rest_arg first "," find_forwarded_rest_arg "," referenced_rest_arg? "," forwarded_rest_arg? "," arguments find "," arguments "]}," RuboCop Cop Style ArgumentsForwarding SendNodeClassifier initialize":{"type":"method","name":"initialize","children":[],"call":["forwardable_args map "]}," RuboCop Cop Style ArgumentsForwarding use_anonymous_forwarding?":{"type":"method","name":"use_anonymous_forwarding?","children":[],"call":[" cop_config fetch "," cop_config "]}," RuboCop Cop Style ArgumentsForwarding register_forward_all_offense_on_method_def":{"type":"method","name":"register_forward_all_offense_on_method_def","children":[],"call":["corrector replace "," range_with_surrounding_space ","method_definition arguments source_range ","method_definition arguments "," add_offense "," arguments_range ","  range_with_surrounding_space  "]}," RuboCop Cop Style ArgumentsForwarding register_forward_all_offense_on_forwarding_method":{"type":"method","name":"register_forward_all_offense_on_forwarding_method","children":[],"call":["corrector replace "," range_between ","forwarding_method source_range end_pos ","forwarding_method source_range ","forwarding_method loc dot end_pos ","forwarding_method loc dot ","forwarding_method loc ","forwarding_method loc selector "," add_offense "," arguments_range ","  range_between _between ","forwarding_method source_ range_between  end_pos ","forwarding_method source_ range_between  "," arguments_ range_between  "]}," RuboCop Cop Style ArgumentsForwarding register_forward_kwargs_offense":{"type":"method","name":"register_forward_kwargs_offense","children":[],"call":["corrector replace "," add_parentheses "," parentheses? ! "," parentheses? "," add_offense "," add_parens_if_missing "]}," RuboCop Cop Style ArgumentsForwarding register_forward_args_offense":{"type":"method","name":"register_forward_args_offense","children":[],"call":["corrector replace "," add_parentheses "," parentheses? "," add_offense "," add_parens_if_missing "]}," RuboCop Cop Style ArgumentsForwarding classification_and_forwards":{"type":"method","name":"classification_and_forwards","children":[],"call":["classifier forwarded_kwrest_arg ","classifier forwarded_rest_arg ","classifier classification ","SendNodeClassifier  new "," allow_only_rest_arguments? "," target_ruby_version ","SendNodeClassifier  new  forwarded_kwrest_arg ","SendNodeClassifier  new  forwarded_rest_arg ","classifier classifier classification  ","SendNodeClassifier  new  classification "]}," RuboCop Cop Style ArgumentsForwarding classify_send_nodes":{"type":"method","name":"classify_send_nodes","children":[],"call":["(send\n  (lvar :send_nodes) :to_h) compact "," classification_and_forwards ","send_nodes to_h ","send_nodes filter_map ","  classification_and_forwards  "]}," RuboCop Cop Style ArgumentsForwarding non_splat_or_block_pass_lvar_references":{"type":"method","name":"non_splat_or_block_pass_lvar_references","children":[],"call":["(send\n  (send\n    (lvar :body) :each_descendant\n    (sym :lvar)\n    (sym :lvasgn)) :filter_map) uniq ","lvar children first ","lvar children ","FORWARDING_LVAR_TYPES  include? ","parent type ","lvar lvar_type? ","lvar parent ","body each_descendant filter_map ","body each_descendant ","lvar parent  type ","lvar lvar parent  "]}," RuboCop Cop Style ArgumentsForwarding add_post_ruby_32_offenses":{"type":"method","name":"add_post_ruby_32_offenses","children":[],"call":[" register_forward_kwargs_offense ","forward_rest ! ","def_node arguments "," register_forward_args_offense ","send_classifications each "," use_anonymous_forwarding? "]}," RuboCop Cop Style ArgumentsForwarding add_forward_all_offenses":{"type":"method","name":"add_forward_all_offenses","children":[],"call":[" register_forward_all_offense_on_method_def "," register_forward_all_offense_on_forwarding_method ","send_classifications each_key "," register_forward_all_offense ","node arguments ","send_classifications each "]}," RuboCop Cop Style ArgumentsForwarding only_forwards_all?":{"type":"method","name":"only_forwards_all?","children":[],"call":["c == ","send_classifications each_value all? ","send_classifications each_value ","send_classifications all? "]}," RuboCop Cop Style ArgumentsForwarding extract_forwardable_args":{"type":"method","name":"extract_forwardable_args","children":[],"call":["args find "]}," RuboCop Cop Lint ShadowingOuterLocalVariable node_or_its_ascendant_conditional?":{"type":"method","name":"node_or_its_ascendant_conditional?","children":[],"call":[" find_conditional_node_from_ascendant ! ! "," find_conditional_node_from_ascendant ! "," find_conditional_node_from_ascendant ","node conditional? "]}," RuboCop Cop Layout RedundantLineBreak end_with_percent_blank_string?":{"type":"method","name":"end_with_percent_blank_string?","children":[],"call":["processed_source buffer source end_with? ","processed_source buffer source ","processed_source buffer "]}," RuboCop Cop Layout RedundantLineBreak on_lvasgn":{"type":"method","name":"on_lvasgn","children":[],"call":[" end_with_percent_blank_string? "," processed_source "]}," RuboCop ConfigObsoletion ParameterRule applies_to_current_ruby_version?":{"type":"method","name":"applies_to_current_ruby_version?","children":[],"call":[" config target_ruby_version >= "," config target_ruby_version "," config "," metadata [] "," metadata "]}," RuboCop Cop Style ArgumentsForwarding SendNodeClassifier arguments":{"type":"method","name":"arguments","children":[],"call":["@send_node arguments "]}," RuboCop Cop Style StringLiteralsInInterpolation on_regexp":{"type":"method","name":"on_regexp","children":[],"call":[]}," RuboCop Cop Style ArgumentsForwarding SendNodeClassifier no_additional_args?":{"type":"method","name":"no_additional_args?","children":[],"call":["@send_node arguments size == ","@send_node arguments size ","@send_node arguments ","@def_node arguments size == ","@def_node arguments size ","@def_node arguments ","(ivar :@rest_arg) compact size ","(ivar :@rest_arg) compact "]}," RuboCop Cop Style ArgumentsForwarding SendNodeClassifier allow_offense_for_no_block?":{"type":"method","name":"allow_offense_for_no_block?","children":[],"call":["@config fetch ! ","@config fetch "]}," RuboCop Cop Style ArgumentsForwarding SendNodeClassifier forward_additional_kwargs?":{"type":"method","name":"forward_additional_kwargs?","children":[],"call":[" forwarded_kwrest_arg parent children one? ! "," forwarded_kwrest_arg parent children one? "," forwarded_kwrest_arg parent children "," forwarded_kwrest_arg parent "," forwarded_kwrest_arg "]}," RuboCop Cop Style ArgumentsForwarding SendNodeClassifier no_post_splat_args?":{"type":"method","name":"no_post_splat_args?","children":[],"call":["(nil) include? "," arguments [] ","splat_index + "," arguments "," arguments index "," forwarded_rest_arg "," arguments index  + "]}," RuboCop Cop Style ArgumentsForwarding SendNodeClassifier any_arg_referenced?":{"type":"method","name":"any_arg_referenced?","children":[],"call":[" referenced_block_arg? "," referenced_kwrest_arg? "," referenced_rest_arg? "]}," RuboCop Cop Style ArgumentsForwarding SendNodeClassifier forwarded_rest_and_kwrest_args":{"type":"method","name":"forwarded_rest_and_kwrest_args","children":[],"call":[" forwarded_kwrest_arg "," forwarded_rest_arg "]}," RuboCop Cop Style ArgumentsForwarding SendNodeClassifier offensive_block_forwarding?":{"type":"method","name":"offensive_block_forwarding?","children":[],"call":[" allow_offense_for_no_block? "," forwarded_block_arg "]}," RuboCop Cop Style ArgumentsForwarding SendNodeClassifier ruby_32_missing_rest_or_kwest?":{"type":"method","name":"ruby_32_missing_rest_or_kwest?","children":[],"call":[" forwarded_rest_and_kwrest_args ! "," forwarded_rest_and_kwrest_args "," target_ruby_version >= "," target_ruby_version "]}," RuboCop Cop Style ArgumentsForwarding SendNodeClassifier can_forward_all?":{"type":"method","name":"can_forward_all?","children":[],"call":[" no_post_splat_args? "," target_ruby_version >= "," target_ruby_version "," no_additional_args? "," forward_additional_kwargs? "," offensive_block_forwarding? "," ruby_32_missing_rest_or_kwest? "," any_arg_referenced? "," additional_kwargs_or_forwarded_kwargs? "]}," RuboCop Cop Style ArgumentsForwarding add_parens_if_missing":{"type":"method","name":"add_parens_if_missing","children":[],"call":[" add_parentheses "," parentheses? "]}," RuboCop Cop Style ArgumentsForwarding register_forward_all_offense":{"type":"method","name":"register_forward_all_offense","children":[],"call":["corrector replace "," add_parens_if_missing "," add_offense "," arguments_range "]}," RuboCop Cop Style Alias identifier":{"type":"method","name":"identifier","children":[],"call":["node source ","node children first ","node children ","node sym_type? "]}," RuboCop Cop Bundler DuplicatedGroup register_offense":{"type":"method","name":"register_offense","children":[],"call":[" add_offense "," format "," source_range ","node first_line "," processed_source buffer "," processed_source ","node loc last_column ","node loc ","node loc column "]}," RuboCop Cop Bundler DuplicatedGroup duplicated_group_nodes":{"type":"method","name":"duplicated_group_nodes","children":[],"call":["nodes size > ","nodes size ","(send\n  (send nil :group_declarations\n    (send\n      (send nil :processed_source) :ast)) :group_by) values select ","(send\n  (send nil :group_declarations\n    (send\n      (send nil :processed_source) :ast)) :group_by) values ","node arguments map map sort ","node arguments map map ","node arguments map ","node arguments "," group_declarations group_by "," group_declarations "," processed_source ast "," processed_source ","group_keys values select ","group_keys values "," group_attributes sort join "," group_attributes sort "," group_attributes "," find_source_key ","group_declarations group_by ","(send\n  (send nil : group_declarations \n    (send\n      (send nil :processed_source) :ast)) :group_by) values select ","(send\n  (send nil : group_declarations \n    (send\n      (send nil :processed_source) :ast)) :group_by) values ","  group_declarations  group_by ","  group_declarations  ","  group_attributes sort join  sort join ","  group_attributes sort join  sort ","  group_attributes sort join  "," find_ find_source_key  "," group_declarations  group_by "]}," RuboCop Cop Bundler DuplicatedGroup on_new_investigation":{"type":"method","name":"on_new_investigation","children":[],"call":[" register_offense ","nodes first first_line ","nodes first ","node arguments map join ","node arguments map ","node arguments ","nodes [] each ","nodes [] "," duplicated_group_nodes each "," duplicated_group_nodes "," processed_source blank? "," processed_source "]}," RuboCop Cop Utils RegexpRanges populate_all":{"type":"method","name":"populate_all","children":[],"call":["pair map ","@pairs map! "," populate "]}," RuboCop Cop Utils RegexpRanges compound_token":{"type":"method","name":"compound_token","children":[],"call":[" populate_all "]}," RuboCop Cop Bundler DuplicatedGroup group_attributes":{"type":"method","name":"group_attributes","children":[],"call":["argument value to_s ","argument value ","argument pairs map sort join ","argument pairs map sort ","argument pairs map ","argument pairs ","argument hash_type? ","node arguments map ","node arguments ","argument source ","argument respond_to? "]}," RuboCop Cop Bundler DuplicatedGroup find_source_key":{"type":"method","name":"find_source_key","children":[],"call":["source_block send_node first_argument ","source_block send_node ","source_block method_name ","SOURCE_BLOCK_NAMES  include? ","block_node method_name ","node each_ancestor find ","node each_ancestor "]}," RuboCop Cop Style ArgumentsForwarding SendNodeClassifier additional_kwargs?":{"type":"method","name":"additional_kwargs?","children":[],"call":["a kwoptarg_type? ","a kwarg_type? ","@def_node arguments any? ","@def_node arguments "]}," RuboCop Cop Style ArgumentsForwarding SendNodeClassifier additional_kwargs_or_forwarded_kwargs?":{"type":"method","name":"additional_kwargs_or_forwarded_kwargs?","children":[],"call":[" forward_additional_kwargs? "," additional_kwargs? "]}," RuboCop Cop Lint UselessAssignment chained_assignment?":{"type":"method","name":"chained_assignment?","children":[],"call":["node expression ","node respond_to? "]}," RuboCop Cop Lint UselessAssignment sequential_assignment?":{"type":"method","name":"sequential_assignment?","children":[],"call":[" sequential_assignment? ","node parent ","node each_descendant any? ","node each_descendant ","node expression ","node lvasgn_type? "]}," RuboCop Cop Lint UselessAssignment offense_range":{"type":"method","name":"offense_range","children":[],"call":["assignment node loc name ","assignment node loc ","assignment node ","assignment node children first source_range ","assignment node children first ","assignment node children ","assignment regexp_named_capture? "]}," RuboCop Cop Layout EmptyLineAfterGuardClause simplecov_directive_comment?":{"type":"method","name":"simplecov_directive_comment?","children":[],"call":["SIMPLE_DIRECTIVE_COMMENT_PATTERN  match? ","comment text "]}," RuboCop Cop Layout EmptyLineAfterGuardClause next_line_allowed_directive_comment?":{"type":"method","name":"next_line_allowed_directive_comment?","children":[],"call":[" simplecov_directive_comment? ","DirectiveComment  new enabled? ","DirectiveComment  new "," processed_source comment_at_line "," processed_source "," simplecov_directive_ processed_source comment_at_line ? "," processed_source  processed_source comment_at_line _at_line "]}," RuboCop Cop Layout EmptyLineAfterGuardClause next_line_empty_or_allowed_directive_comment?":{"type":"method","name":"next_line_empty_or_allowed_directive_comment?","children":[],"call":[" next_line_empty? "," next_line_allowed_directive_comment? ","line + "," line + _empty? "," line + _allowed_directive_comment? "]}," RuboCop ConfigObsoletion ExtractedCop gem_installed?":{"type":"method","name":"gem_installed?","children":[],"call":["Lockfile  new includes_gem? "," gem ","Lockfile  new "]}," RuboCop ConfigObsoletion ExtractedCop affected_gems":{"type":"method","name":"affected_gems","children":[],"call":[" config keys grep ","Regexp  new "," department "," config keys "," config "," old_name "," old_name end_with? "]}," RuboCop Cop Layout SpaceBeforeBrackets space_before_brackets?":{"type":"method","name":"space_before_brackets?","children":[],"call":["node arguments size == ","node arguments size ","node arguments ","first_argument array_type? ","node receiver nil? ","node receiver "]}}