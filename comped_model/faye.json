{" Faye random":{"type":"method","name":"random","children":[],"call":[]}," Faye Server destroy_client":{"type":"method","name":"destroy_client","children":[],"call":["@clients delete ","client id ","client delete_observer ","client disconnect! "]}," Faye Server connection":{"type":"method","name":"connection","children":[],"call":["@clients []= ","client add_observer ","Connection  new ","@clients [] ","@clients has_key? ","@connections []= ","connection add_observer ","@connections [] ","@connections has_key? ","connection add_subscriber "," method ","@Connection  new s []= ","Connection  new  add_observer ","@Connection  new s [] ","@Connection  new s has_key? ","Connection  new  add_subscriber "]}," Faye Server generate_id":{"type":"method","name":"generate_id","children":[],"call":[" connection id "," connection ","Faye  random ","@clients has_key? "," connection Faye  random  "]}," Faye Server client_ids":{"type":"method","name":"client_ids","children":[],"call":["@clients keys ","@connections keys "]}," Faye Server update":{"type":"method","name":"update","children":[],"call":[" destroy_client ","message == "," destroy_connection "]}," Faye Server unsubscribe":{"type":"method","name":"unsubscribe","children":[],"call":["response []= ","response [] nil? ","response [] ","client unsubscribe ","@channels [] ","Error  channel_invalid ","Channel  valid? ! ","Channel  valid? ","subscription each ","subscription compact ","Error  parameter_missing ","message [] nil? ","message [] ","client_id nil? ","Error  client_unknown ","client nil? ","(lvar :subscription) flatten ","@clients [] "," make_response ","connection unsubscribe "," info ","channel name ","connection nil? ","@connections [] ","(send\n  (lvar :message) :[]\n  (str \"subscription\")) flatten ","@channels remove ","channel unused? ","callback call ","@engine unsubscribe ","Error  channel_forbidden ","Channel  subscribable? ","@engine client_exists "," make_response  []= "," make_response  [] nil? "," make_response  [] ","@clients []  unsubscribe ","@@channels [] s [] ","Error  @channels [] _invalid ","(lvar :subscription) flatten  each ","message []  each ","(send\n  (lvar :message) :[]\n  (str \"subscription\")) flatten  each ","(lvar :subscription) flatten  compact ","message []  compact ","(send\n  (lvar :message) :[]\n  (str \"subscription\")) flatten  compact ","@clients [] _id nil? ","message []  nil? ","Error  @clients [] _unknown ","@clients []  nil? ","(lvar :(lvar :subscription) flatten ) flatten ","(lvar :message [] ) flatten ","(lvar :(send\n  (lvar :message) :[]\n  (str \"subscription\")) flatten ) flatten ","@@clients [] s [] "," make_ make_response  ","@connections []  unsubscribe ","@channels []  name ","@connections []  nil? ","@@connections [] s [] ","(send\n  (lvar :message) :[]\n  (str \"(lvar :subscription) flatten \")) flatten ","(send\n  (lvar :message) :[]\n  (str \"message [] \")) flatten ","(send\n  (lvar :message) :[]\n  (str \"(send\n  (lvar :message) :[]\n  (str \"subscription\")) flatten \")) flatten ","@@channels [] s remove ","@channels []  unused? ","Error  @channels [] _forbidden ","@engine @clients [] _exists "]}," Faye Server subscribe":{"type":"method","name":"subscribe","children":[],"call":["response []= ","response [] nil? ","response [] ","client subscribe ","Channel  new ","@channels [] ","Error  channel_invalid ","Channel  valid? ","Error  channel_forbidden ","Channel  subscribable? ","subscription each ","subscription compact ","Error  parameter_missing ","message [] nil? ","message [] ","client_id nil? ","Error  client_unknown ","client nil? ","(lvar :subscription) flatten ","@clients [] "," make_response ","connection subscribe "," info ","channel name ","connection nil? ","@connections [] ","(send\n  (lvar :message) :[]\n  (str \"subscription\")) flatten ","callback call ","@engine subscribe ","@engine client_exists "," make_response  []= "," make_response  [] nil? "," make_response  [] ","@clients []  subscribe ","(lvar :subscription) flatten  each ","message []  each ","(send\n  (lvar :message) :[]\n  (str \"subscription\")) flatten  each ","(lvar :subscription) flatten  compact ","message []  compact ","(send\n  (lvar :message) :[]\n  (str \"subscription\")) flatten  compact ","@clients [] _id nil? ","message []  nil? ","Error  @clients [] _unknown ","@clients []  nil? ","(lvar :(lvar :subscription) flatten ) flatten ","(lvar :message [] ) flatten ","(lvar :(send\n  (lvar :message) :[]\n  (str \"subscription\")) flatten ) flatten ","@@clients [] s [] "," make_ make_response  ","@connections []  subscribe ","@connections []  nil? ","@@connections [] s [] ","(send\n  (lvar :message) :[]\n  (str \"(lvar :subscription) flatten \")) flatten ","(send\n  (lvar :message) :[]\n  (str \"message [] \")) flatten ","(send\n  (lvar :message) :[]\n  (str \"(send\n  (lvar :message) :[]\n  (str \"subscription\")) flatten \")) flatten ","@engine @clients [] _exists "]}," Faye Server disconnect":{"type":"method","name":"disconnect","children":[],"call":["response []= "," destroy_client ","response [] ","response [] nil? ","Error  parameter_missing ","client_id nil? ","Error  client_unknown ","client nil? ","@clients [] ","message [] ","response delete "," make_response "," info "," destroy_connection ","connection nil? ","@connections [] ","callback call ","@engine destroy_client ","@engine client_exists "," make_response  []= "," destroy_@clients []  "," make_response  [] "," make_response  [] nil? ","@clients [] _id nil? ","message []  nil? ","Error  @clients [] _unknown ","@clients []  nil? ","@@clients [] s [] "," make_response  delete "," make_ make_response  "," destroy_@connections []  ","@connections []  nil? ","@@connections [] s [] ","@engine destroy_@clients []  ","@engine @clients [] _exists "]}," Faye Server connect":{"type":"method","name":"connect","children":[],"call":["response []= ","client id ","response [] ","response [] nil? ","Error  parameter_missing ","message [] nil? ","message [] ","client_id nil? ","Error  client_unknown ","client nil? ","@clients [] ","response delete "," make_response ","connection id ","connection_type nil? ","connection nil? ","@connections [] ","callback call ","(lvar :response) + ","@engine connect ","Error  conntype_mismatch ","CONNECTION_TYPES  include? ","@engine client_exists ","message [] []= ","message [] == ","response [] ! "," make_response  []= ","@clients []  id "," make_response  [] "," make_response  [] nil? ","@clients [] _id nil? ","message []  nil? ","Error  @clients [] _unknown ","@clients []  nil? ","@@clients [] s [] "," make_response  delete "," make_ make_response  ","@connections []  id ","@connections [] _type nil? ","@connections []  nil? ","@@connections [] s [] ","(lvar : make_response ) + ","@engine @clients [] _exists "," make_response  [] ! "]}," Faye Server handshake":{"type":"method","name":"handshake","children":[],"call":["response []= "," generate_id ","response [] ","response [] nil? ","Error  parameter_missing ","Error  conntype_mismatch ","common_conns empty? ","CONNECTION_TYPES  include? ","client_conns select ","message [] ","message [] nil? "," connection id "," connection ","@namespace generate "," make_response "," info ","callback call ","@engine create_client "," make_response  []= "," make_response  [] "," make_response  [] nil? ","message []  select "," make_ make_response  "]}," Faye Server handle":{"type":"method","name":"handle","children":[],"call":["callback [] ","message [] ","c << ","@channels glob each ","@channels glob ","Channel  service? ","message [] nil? ","(lvar :response) + "," connection connect "," connection ","response [] ","response [] == ","response []= ","Connection INTERVAL  * ","response [] [] ","@clients has_key? "," __send__ ","Channel  parse [] ","Channel  parse ","Channel  meta? "," make_response ","(send\n  (const\n    (const nil :Connection) :INTERVAL) :*\n  (int 1000)) floor ","callback call "," debug "," info ","@connections has_key? ","channel name ","channel << "," handle_meta "," distribute_message ","message ! ","response [] ! ","@engine publish ","Grammar CHANNEL_NAME  !~ ","Faye Error  channel_invalid ","message delete ","Faye Error  parameter_missing ","@message [] s glob each ","@message [] s glob ","(lvar : __send__ ) + ","(lvar : make_response ) + "," __send__  [] "," make_response  [] "," __send__  [] == "," make_response  [] == "," __send__  []= "," make_response  []= "," __send__  [] [] "," make_response  [] [] "," make_ __send__  "," make_ make_response  ","message []  name ","message []  << "," __send__  [] ! "," make_response  [] ! ","Faye Error  message [] _invalid "]}," Faye Server process":{"type":"method","name":"process","children":[],"call":["callback [] ","processed == ","messages size ","responses concat ","(lvar :reply) flatten "," handle ","messages each ","(lvar :messages) flatten "," debug "," pipe_through_extensions ","gather_replies call ","extended == ","replies []= ","replies each_with_index ","expected == ","replies size "," lambda ","callback call ","responses compact ","local_or_remote == ","local_or_remote is_a? "," info ","responses compact! ","messages size == ","env nil? ","(lvar :messages) flatten  size ","(lvar :(lvar :reply) flatten ) flatten ","(lvar :messages) flatten  each ","(lvar :(lvar :messages) flatten ) flatten ","env nil? _or_remote == ","env nil? _or_remote is_a? ","(lvar :messages) flatten  size == "]}," Faye Server initialize":{"type":"method","name":"initialize","children":[],"call":["EventMachine  run ","Thread  new ","EventMachine  reactor_running? ","Channel Tree  new ","Namespace  new "," info ","Faye Engine  get ","engine_opts []= ","@options [] "]}," Faye RackAdapter call":{"type":"method","name":"call","children":[],"call":["@app call ","env []= ","File  new "," sleep ","response nil? ","request get? ","JSON  unparse ","@server process ","request params [] ","request params ","JSON  parse ","request path_info ","Rack Request  new "," on_response ","@server flush_connection "," get_client ","request body read ","request body ","request post? ","request path_info =~ "," ensure_reactor_running! ","body succeed ","callback call ","DeferredBody  new ","env [] "," handle_upgrade ","env [] == ","Faye  ensure_reactor_running! "," message_from_request "," debug ","head []= ","request env [] ","request env ","TYPE_JSON  dup ","TYPE_SCRIPT  dup "," handle_request "," handle_options ","env [] =~ "," serve_client_script "," handle_eventsource ","Faye EventSource  eventsource? "," handle_websocket ","Faye WebSocket  websocket? ","@static call ","@static =~ ","JSON  unparse  nil? ","Rack Request  new  get? ","Rack Request  new  params [] ","Rack Request  new  params ","Rack Request  new  path_info "," on_JSON  unparse  ","Rack Request  new  body read ","request DeferredBody  new  read ","Rack Request  new  body ","request DeferredBody  new  ","Rack Request  new  post? ","Rack Request  new  path_info =~ ","DeferredBody  new  succeed ","env []  call "," JSON  parse _from_request "," message_from_Rack Request  new  ","TYPE_JSON  dup  []= ","TYPE_SCRIPT  dup  []= ","Rack Request  new  env [] ","Rack Request  new  env "," handle_Rack Request  new  "]}," Faye RackAdapter initialize":{"type":"method","name":"initialize","children":[],"call":["Server  new ","@endpoint + ","@options [] ","(lvar :app) grep first ","(lvar :app) grep ","app respond_to? ","Regexp  new ","^ + + ","^ + "," add_extension ","(splat\n  (lvar :extensions)) each ","@static map ","File  basename + ","File  basename ","StaticServer  new ","@endpoint gsub ","block call "," add_websocket_extension ","(splat\n  (lvar :websocket_extensions)) each "," WebSocket Driver  validate_options ","File  join ","(splat\n  (lvar :@options [] )) each ","StaticServer  new  map ","(splat\n  (lvar :websocket_@options [] )) each "]}," Faye Grammar string":{"type":"method","name":"string","children":[],"call":[]}," Faye Grammar oneormore":{"type":"method","name":"oneormore","children":[],"call":[]}," Faye Grammar repeat":{"type":"method","name":"repeat","children":[],"call":[]}," Faye Grammar choice":{"type":"method","name":"choice","children":[],"call":[]}," Faye Grammar rule":{"type":"method","name":"rule","children":[],"call":[]}," Faye Error to_s":{"type":"method","name":"to_s","children":[],"call":["@args * ","@params * "]}," Faye Error initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Faye Error method_missing":{"type":"method","name":"method_missing","children":[],"call":[]}," Faye Error parse":{"type":"method","name":"parse","children":[],"call":[]}," Faye Connection schedule_for_deletion!":{"type":"method","name":"schedule_for_deletion!","children":[],"call":[" notify_observers "," changed "," add_timer ","10 * "]}," Faye Connection release_connection!":{"type":"method","name":"release_connection!","children":[],"call":[" schedule_for_deletion! "," cancel_timer "," notify_observers "," changed "," add_timeout ","10 * "," remove_timeout "," begin_deletion_timeout "]}," Faye Connection begin_connection_timeout!":{"type":"method","name":"begin_connection_timeout!","children":[],"call":[" flush! "," add_timer "," timeout ","@connection_timeout nil? "," add_timeout "]}," Faye Connection begin_delivery_timeout!":{"type":"method","name":"begin_delivery_timeout!","children":[],"call":[" flush! "," add_timer ","@delivery_timeout nil? ","@inbox empty? ! ","@inbox empty? "," add_timeout "]}," Faye Connection disconnect!":{"type":"method","name":"disconnect!","children":[],"call":[" flush! "," unsubscribe "]}," Faye Connection flush!":{"type":"method","name":"flush!","children":[],"call":[" set_deferred_status ","Set  new ","@inbox entries "," release_connection! ","Set  new  entries "]}," Faye Connection connect":{"type":"method","name":"connect","children":[],"call":[" begin_connection_timeout! "," begin_delivery_timeout! ","@inbox empty? "," callback "," cancel_timer "," remove_timeout "," set_deferred_status "," begin_connection_timeout "," begin_delivery_timeout ","options [] / ","options [] "," begin_connection_options [] / ! "," begin_delivery_options [] / ! "," remove_options [] /  "," begin_connection_options [] /  "," begin_delivery_options [] /  "]}," Faye Connection update":{"type":"method","name":"update","children":[],"call":[" begin_delivery_timeout! ","@inbox add ","message == "]}," Faye Connection unsubscribe":{"type":"method","name":"unsubscribe","children":[],"call":["channel delete_observer ","@channels delete ","@channels member? ","@channels each "," method ","channel == ","channel remove_subscriber "]}," Faye Connection subscribe":{"type":"method","name":"subscribe","children":[],"call":["channel add_observer ","@channels add? ","channel add_subscriber "," method "]}," Faye Connection timeout":{"type":"method","name":"timeout","children":[],"call":["@options [] "]}," Faye Connection initialize":{"type":"method","name":"initialize","children":[],"call":["Set  new ","@options [] "," begin_deletion_timeout "]}," Faye Channel Tree glob":{"type":"method","name":"glob","children":[],"call":["list flatten ","list << ","@children [] value ","@children [] ","t glob ","path [] ","@children values_at compact map ","@children values_at compact ","@children values_at ","path first ","list pop "," map ","path == ","subtree value ","subtree value nil? ","@children inject ","@value nil? ","path empty? ","path nil? ","Channel  parse ","String  === ","Channel  parse  [] ","Channel  parse  first ","Channel  parse  == ","Channel  parse  empty? ","Channel  parse  nil? "]}," Faye Channel Tree traverse":{"type":"method","name":"traverse","children":[],"call":["subtree traverse ","path [] ","@children []= "," class new "," class ","path first ","subtree nil? ","create_if_absent ! ","@children [] ","path empty? ","path nil? ","Channel  parse ","String  === ","Tree  new ","@children []=  traverse ","@children []  traverse ","Channel  parse  [] ","Channel  parse  first ","@children []=  nil? ","@children []  nil? ","Channel  parse  empty? ","Channel  parse  nil? "]}," Faye Channel Tree []=":{"type":"method","name":"[]=","children":[],"call":["subtree value= ","subtree nil? "," traverse "," traverse  value= "," traverse  nil? "]}," Faye Channel Tree []":{"type":"method","name":"[]","children":[],"call":["subtree value "," traverse "," traverse  value "]}," Faye Channel Tree each":{"type":"method","name":"each","children":[],"call":["@value nil? ","subtree each ","prefix + "," each_child "]}," Faye Channel Tree each_child":{"type":"method","name":"each_child","children":[],"call":["@children each "]}," Faye Channel Tree initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Faye Channel <<":{"type":"method","name":"<<","children":[],"call":[" notify_observers "," changed "," publish_event "," trigger "]}," Faye Channel initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Faye Channel subscribable?":{"type":"method","name":"subscribable?","children":[],"call":[" service? ! "," service? "," meta? ! "," meta? "," valid? "]}," Faye Channel service?":{"type":"method","name":"service?","children":[],"call":["segments first == ","segments first "," parse "," parse  first == "," parse  first "]}," Faye Channel meta?":{"type":"method","name":"meta?","children":[],"call":["segments first == ","segments first "," parse "," parse  first == "," parse  first "]}," Faye Channel parse":{"type":"method","name":"parse","children":[],"call":["s to_sym ","name split [] map ","name split [] ","name split "," valid? "]}," Faye Channel valid?":{"type":"method","name":"valid?","children":[],"call":["Grammar CHANNEL_PATTERN  =~ ","Grammar CHANNEL_NAME  =~ "]}," Faye Server flush_connection":{"type":"method","name":"flush_connection","children":[],"call":["client flush! ","@clients [] ","message [] ","(lvar :messages) flatten each ","(lvar :messages) flatten ","connection flush! ","@connections [] ","@engine flush "," info ","(lvar :messages) flatten first [] ","(lvar :messages) flatten first ","Faye  client_id_from_messages ","@clients []  flush! ","@@clients [] s [] ","@connections []  flush! ","@@connections [] s [] ","Faye  @clients [] _id_from_messages ","Faye  message [] _from_messages ","Faye  (lvar :messages) flatten first [] _from_messages ","Faye  Faye  client_id_from_messages _from_messages "]}," Faye RackAdapter on_response":{"type":"method","name":"on_response","children":[],"call":[" sleep ","response nil? ","block call ","@server process ","body succeed ","callback call ","DeferredBody  new ","EM  run ","EM  reactor_running? ","env [] ","request get? ","Rack Request  new ","block call  nil? ","DeferredBody  new  succeed ","env []  call ","Rack Request  new  get? "]}," Faye LocalTransport request":{"type":"method","name":"request","children":[],"call":["block call ","@endpoint process "," method "," receive "]}," Faye LocalTransport usable?":{"type":"method","name":"usable?","children":[],"call":[]}," Faye HttpTransport request":{"type":"method","name":"request","children":[],"call":["block call ","JSON  parse ","request response ","request callback ","EventMachine HttpRequest  new post ","EventMachine HttpRequest  new ","JSON  unparse ","content length ","URI  parse host ","URI  parse ","retry_block call ","request errback "," receive "," retry_block ","EventMachine HttpRequest  new post  response ","EventMachine HttpRequest  new post  callback ","JSON  unparse  length "," retry_block  call ","EventMachine HttpRequest  new post  errback ","  retry_block  "]}," Faye HttpTransport usable?":{"type":"method","name":"usable?","children":[],"call":[]}," Faye Transport supported_connection_types":{"type":"method","name":"supported_connection_types","children":[],"call":["@transports keys ","t first ","@transports map "]}," Faye Transport register":{"type":"method","name":"register","children":[],"call":["klass connection_type= ","@transports []= ","@transports << "]}," Faye Transport get":{"type":"method","name":"get","children":[],"call":["candidate_class last new ","candidate_class last "," raise ","klass usable? ","connection_types include? ","@transports find "," supported_connection_types ","client endpoint ","Faye  async_each "," lambda ","resume call ","callback call ","klass new ","klass create ","klass respond_to? ","allowed include? ","disabled include? ","client endpoints [] ","client endpoints ","dispatcher endpoint_for ","dispatcher endpoint ","@klass new s find ","@klass create s find ","client client endpoint  ","client dispatcher endpoint  ","client client endpoint s [] ","client dispatcher endpoint s [] ","client client endpoint s ","client dispatcher endpoint s ","dispatcher client endpoint _for ","dispatcher dispatcher endpoint _for ","dispatcher client endpoint  ","dispatcher dispatcher endpoint  "]}," Faye Transport send":{"type":"method","name":"send","children":[],"call":["@client send_to_subscribers ","response [] ","@client handle_advice ","block call ","response [] == ","message [] ","message is_a? ","(lvar :responses) flatten each ","(lvar :responses) flatten "," block_given? "," request ","message []= ","@client namespace generate ","@client namespace ","message has_key? ! ","message has_key? ","@client deliver_messages ","messages << ","block call == "," debug ","@client client_id ","(lvar :messages) flatten "," flush "," add_timeout ","message [] == ","@outbox << "," batching? "," flush_large_batch ","@client instance_eval ","envelope message ","envelope message  [] ","envelope message  is_a? ","envelope message  []= ","envelope message  has_key? ! ","envelope message  has_key? ","@client deliver_(lvar :messages) flatten  ","@client deliver_envelope message s ","(lvar :messages) flatten  << ","envelope message s << ","(lvar :(lvar :messages) flatten ) flatten ","(lvar :envelope message s) flatten ","envelope message  [] == ","envelope envelope message  "]}," Faye Transport connection_type":{"type":"method","name":"connection_type","children":[],"call":[" class connection_type "," class "]}," Faye Transport initialize":{"type":"method","name":"initialize","children":[],"call":[" debug "," connection_type ","ENV  [] ","SECURE_PROTOCOLS  include? ","@endpoint scheme ","@proxy [] ","@dispatcher proxy dup ","@dispatcher proxy ","@endpoint respond_to? ","@endpoint find_proxy ","@endpoint @endpoint scheme  ","@dispatcher proxy dup  [] "]}," Faye RackAdapter run":{"type":"method","name":"run","children":[],"call":["handler run ","Rack Handler  get ","Rack Handler  get  run "]}," Faye RackAdapter get_client":{"type":"method","name":"get_client","children":[],"call":["Client  new "]}," Faye Namespace generate":{"type":"method","name":"generate","children":[],"call":["@used []= ","Faye  random ","@used has_key? ","Engine  random "]}," Faye Namespace initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Faye Client validate_channels":{"type":"method","name":"validate_channels","children":[],"call":[" raise ","Channel  subscribable? ","Channel  valid? ","channels each "]}," Faye Client flush!":{"type":"method","name":"flush!","children":[],"call":["@transport send ","@advice [] / ","@advice [] ","@connect_message []= ","@outbox size > ","@outbox size "," remove_timeout "]}," Faye Client enqueue":{"type":"method","name":"enqueue","children":[],"call":["@outbox << "]}," Faye Client send_to_subscribers":{"type":"method","name":"send_to_subscribers","children":[],"call":["callback call ","message [] ","channels each ","@channels glob ","@channels glob  each ","@@channels glob  glob "]}," Faye Client handle_advice":{"type":"method","name":"handle_advice","children":[],"call":["@advice [] == ","@advice [] ","@advice update "," cycle_connection ","@state != ","@dispatcher client_id= ","@dispatcher timeout= ","@advice [] / "]}," Faye Client publish":{"type":"method","name":"publish","children":[],"call":[" flush! "," add_timer "," enqueue "," validate_channels "," connect "," add_timeout "," info "," send "," validate_channel "," raise ","Grammar CHANNEL_NAME  =~ ","publication set_deferred_status ","Error  parse ","response [] ","Publication  new "," send_message ","@dispatcher client_id "," WebSocket Driver  validate_options ","Publication  new  set_deferred_status "]}," Faye Client unsubscribe":{"type":"method","name":"unsubscribe","children":[],"call":["@channels []= ","channels each ","(send\n  (lvar :response) :[]\n  (str \"subscription\")) flatten ","response [] ","@transport send "," validate_channels ","(lvar :channels) flatten "," connect "," verify_client_id "," info "," send ","@channels unsubscribe "," validate_channel "," unsubscribe ","Array  === ","channel each ","channel map ","@dispatcher client_id "," send_message ","@(send\n  (lvar :response) :[]\n  (str \"subscription\")) flatten  []= ","@(lvar :channels) flatten  []= ","(send\n  (lvar :response) :[]\n  (str \"subscription\")) flatten  each ","(lvar :channels) flatten  each "," validate_(send\n  (lvar :response) :[]\n  (str \"subscription\")) flatten  "," validate_(lvar :channels) flatten  ","(lvar :(send\n  (lvar :response) :[]\n  (str \"subscription\")) flatten ) flatten ","(lvar :(lvar :channels) flatten ) flatten ","@(send\n  (lvar :response) :[]\n  (str \"subscription\")) flatten  unsubscribe ","@(lvar :channels) flatten  unsubscribe "]}," Faye Client subscribe":{"type":"method","name":"subscribe","children":[],"call":["@channels []= ","channels each ","(send\n  (lvar :response) :[]\n  (str \"subscription\")) flatten ","response [] ","@transport send "," validate_channels ","(lvar :channels) flatten "," connect "," verify_client_id "," info ","Subscription  new ","@channels subscribe "," send "," validate_channel "," subscribe ","Array  === ","subscription set_deferred_status ","Error  parse ","@channels has_subscription? ","force ! ","@channels unsubscribe ","channel each ","channel map ","@dispatcher client_id "," send_message ","@(send\n  (lvar :response) :[]\n  (str \"subscription\")) flatten  []= ","@(lvar :channels) flatten  []= ","(send\n  (lvar :response) :[]\n  (str \"subscription\")) flatten  each ","(lvar :channels) flatten  each ","(send\n  (lvar :response) :[]\n  (str \"Subscription  new \")) flatten "," validate_(send\n  (lvar :response) :[]\n  (str \"subscription\")) flatten  "," validate_(lvar :channels) flatten  ","(lvar :(send\n  (lvar :response) :[]\n  (str \"subscription\")) flatten ) flatten ","(lvar :(lvar :channels) flatten ) flatten ","@(send\n  (lvar :response) :[]\n  (str \"subscription\")) flatten  subscribe ","@(lvar :channels) flatten  subscribe ","Subscription  new  set_deferred_status ","@(send\n  (lvar :response) :[]\n  (str \"subscription\")) flatten  has_subscription? ","@(lvar :channels) flatten  has_subscription? ","@channels has_Subscription  new ? ","@(send\n  (lvar :response) :[]\n  (str \"subscription\")) flatten  unsubscribe ","@(lvar :channels) flatten  unsubscribe "]}," Faye Client disconnect":{"type":"method","name":"disconnect","children":[],"call":["Channel Tree  new ","@transport send ","@state == "," remove_timeout "," info "," send ","Channel Set  new ","@transport close ","response [] ","@dispatcher client_id ","promise set_deferred_status ","Error  parse ","@dispatcher close "," send_message ","Publication  new ","Publication  new  set_deferred_status "]}," Faye Client connect":{"type":"method","name":"connect","children":[],"call":[" connect "," add_timer ","@advice [] / ","@advice [] ","@transport send ","@transport connection_type ","@namespace generate ","@connection_id nil? ","block call "," block_given? "," set_deferred_status ","@state == "," callback "," handshake ","@advice [] == "," begin_reconnect_timeout ","EventMachine  add_timer "," remove_timeout "," verify_client_id "," info "," cycle_connection "," send ","@connect_request nil? "," send_message ","@dispatcher connection_type ","@dispatcher client_id ","@namespace generate  nil? "]}," Faye Client handshake":{"type":"method","name":"handshake","children":[],"call":["block call "," block_given? ","Transport  get ","response [] "," handshake "," add_timer ","@advice [] / ","@advice [] ","@transport send ","Transport  supported_connection_types ","@state != ","@advice [] == ","EventMachine  add_timer "," info "," subscribe ","@channels keys "," send ","@transport connection_type "," select_transport ","response [] - ","@dispatcher retry ","@dispatcher client_id ","@dispatcher select_transport ","@dispatcher client_id= "," send_message ","@dispatcher connection_types ","@dispatcher endpoint to_s ","@dispatcher endpoint ","Transport  get  send ","Transport  supported_response [] -  ","Transport  get  connection_type ","@dispatcher response [] -  "]}," Faye Client initialize":{"type":"method","name":"initialize","children":[],"call":["Channel Tree  new ","Namespace  new ","Transport  get ","@options [] "," info ","1000.0 * ","Channel Set  new "," select_transport ","CookieJar Jar  new ","@endpoints []= ","Faye  parse_url ","@endpoints each ","@dispatcher bind "," method ","@dispatcher timeout= ","@advice [] / ","@advice [] ","options [] ","Dispatcher  new "," WebSocket Driver  validate_options ","Faye  parse_url s []= ","Faye  parse_url s each ","Dispatcher  new  bind ","Dispatcher  new  timeout= "]}," Faye Timeouts remove_timeout":{"type":"method","name":"remove_timeout","children":[],"call":["@timeouts delete ","EventMachine  cancel_timer ","timeout nil? ","@timeouts [] ","@@timeouts [] s delete ","@timeouts []  nil? ","@@timeouts [] s [] "]}," Faye Timeouts add_timeout":{"type":"method","name":"add_timeout","children":[],"call":["@timeouts []= ","block call ","@timeouts delete ","EventMachine  add_timer ","@timeouts has_key? ","Faye  ensure_reactor_running! ","Engine  ensure_reactor_running! "]}," Faye Server make_response":{"type":"method","name":"make_response","children":[],"call":["response []= ","message [] ","(str \"id\") each ","response [] ! ","response [] "]}," Faye RackAdapter ensure_reactor_running!":{"type":"method","name":"ensure_reactor_running!","children":[],"call":["EM  reactor_running? ! ","EM  reactor_running? ","EM  run ","Thread  new "]}," Faye Client verify_client_id":{"type":"method","name":"verify_client_id","children":[],"call":["block call ","response [] != ","response [] "," lambda "]}," Faye Client begin_reconnect_timeout":{"type":"method","name":"begin_reconnect_timeout","children":[],"call":[" subscribe ","@channels keys "," add_timeout "," info "]}," Faye Client deliver_messages":{"type":"method","name":"deliver_messages","children":[],"call":["callback call ","message [] ","channels each ","@channels glob ","messages each "," info ","@channels glob  each ","@@channels glob  glob "]}," Faye Channel Tree keys":{"type":"method","name":"keys","children":[],"call":["/ + ","key * "," map "]}," Faye to_json":{"type":"method","name":"to_json","children":[],"call":[]}," Faye Server destroy_connection":{"type":"method","name":"destroy_connection","children":[],"call":["@connections delete ","connection id ","connection delete_observer ","connection disconnect! ","connection remove_subscriber "," method "]}," Faye Logging log":{"type":"method","name":"log","children":[],"call":[" puts ","timestamp + + ","timestamp + "," class name "," class ","level to_s upcase ","level to_s ","Time  now strftime ","Time  now ","Faye  to_json ","message_args shift ","message_args shift gsub ","LOG_LEVELS  [] > ","LOG_LEVELS  [] "," log_level ","Faye  logger ","Faye  logger call ","Time  now strftime  + + ","Time  now strftime  + "]}," Faye Logging log_level":{"type":"method","name":"log_level","children":[],"call":["Logging  log_level "]}," Response each":{"type":"method","name":"each","children":[],"call":["@body each ","@body is_a? "," head "," websocket_upgrade_data "," websocket "]}," Request websocket_upgrade_data":{"type":"method","name":"websocket_upgrade_data","children":[],"call":["upgrade << "," websocket_url ","@env [] ","handler new handshake ","handler new ","parser handshake ","Faye WebSocket  parser ","Faye WebSocket  parser  handshake ","Faye WebSocket  Faye WebSocket  parser  "]}," Request websocket_url":{"type":"method","name":"websocket_url","children":[],"call":["@env []= ","@env [] ","@env [] =~ "," secure_websocket? "]}," Request websocket?":{"type":"method","name":"websocket?","children":[],"call":["@env [] == ","@env [] ","(str \"WebSocket\") include? ","@env [] split include? ","@env [] split "]}," Connection receive_data":{"type":"method","name":"receive_data","children":[],"call":[" close_connection "," log_error "," log "," process ","@response websocket_upgrade_data= ","@request websocket_upgrade_data ","@response persistent! ","@request websocket? ","@request parse ","callback call ","@request env [] ","@request env "," trace ","@response websocket= ","@request env []= ","@request env []  call "]}," Faye ensure_reactor_running!":{"type":"method","name":"ensure_reactor_running!","children":[],"call":[]}," Faye Subscription unsubscribe":{"type":"method","name":"unsubscribe","children":[],"call":[" cancel "]}," Faye Subscription cancel":{"type":"method","name":"cancel","children":[],"call":["@client unsubscribe "]}," Faye Subscription initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Faye Server advize":{"type":"method","name":"advize","children":[],"call":["advice [] ","(send\n  (send\n    (lvar :connection) :timeout) :*\n  (int 1000)) floor ","connection timeout * ","connection timeout ","(send\n  (send\n    (lvar :connection) :interval) :*\n  (int 1000)) floor ","connection interval * ","connection interval ","response [] ","@connections [] ","(send\n  (send\n    (ivar :@engine) :timeout) :*\n  (int 1000)) floor ","@engine timeout * ","@engine timeout ","(send\n  (send\n    (ivar :@engine) :interval) :*\n  (int 1000)) floor ","@engine interval * ","@engine interval ","(const\n  (const nil :Channel) :HANDSHAKE) include? ","connection_type == ","(send\n  (send\n    (lvar :@connections [] ) :timeout) :*\n  (int 1000)) floor ","(send\n  (send\n    (lvar :connection) :(send\n  (send\n    (ivar :@engine) :timeout) :*\n  (int 1000)) floor ) :*\n  (int 1000)) floor ","@connections []  timeout * ","connection (send\n  (send\n    (ivar :@engine) :timeout) :*\n  (int 1000)) floor  * ","@connections []  timeout ","connection (send\n  (send\n    (ivar :@engine) :timeout) :*\n  (int 1000)) floor  ","(send\n  (send\n    (lvar :@connections [] ) :interval) :*\n  (int 1000)) floor ","(send\n  (send\n    (lvar :connection) :(send\n  (send\n    (ivar :@engine) :interval) :*\n  (int 1000)) floor ) :*\n  (int 1000)) floor ","@connections []  interval * ","connection (send\n  (send\n    (ivar :@engine) :interval) :*\n  (int 1000)) floor  * ","@connections []  interval ","connection (send\n  (send\n    (ivar :@engine) :interval) :*\n  (int 1000)) floor  ","@@connections [] s [] ","(send\n  (send\n    (ivar :@engine) :(send\n  (send\n    (ivar :@engine) :timeout) :*\n  (int 1000)) floor ) :*\n  (int 1000)) floor ","@engine (send\n  (send\n    (ivar :@engine) :timeout) :*\n  (int 1000)) floor  * ","@engine (send\n  (send\n    (ivar :@engine) :timeout) :*\n  (int 1000)) floor  ","(send\n  (send\n    (ivar :@engine) :(send\n  (send\n    (ivar :@engine) :interval) :*\n  (int 1000)) floor ) :*\n  (int 1000)) floor ","@engine (send\n  (send\n    (ivar :@engine) :interval) :*\n  (int 1000)) floor  * ","@engine (send\n  (send\n    (ivar :@engine) :interval) :*\n  (int 1000)) floor  ","@connections [] _type == "]}," Faye Server accept_connection":{"type":"method","name":"accept_connection","children":[],"call":["callback call ","(lvar :response) + "," debug ","response [] "," info ","connection connect "," connection "," connection  connect ","  connection  "]}," Faye Server handle_meta":{"type":"method","name":"handle_meta","children":[],"call":["callback call "," accept_connection ","message [] ","response [] == ","response [] "," advize "," __send__ ","Channel  parse [] ","Channel  parse ","responses each "," method ","(lvar :responses) flatten ","response []= ","Faye Error  channel_forbidden "," make_response ","META_METHODS  include? "," method_for "," __send__  [] == "," make_response  [] == "," __send__  [] "," make_response  [] "," __send__ s each "," make_response s each ","(lvar :responses) flatten  each "," Channel  parse []  ","  method_for  ","(lvar : __send__ s) flatten ","(lvar : make_response s) flatten ","(lvar :(lvar :responses) flatten ) flatten "," __send__  []= "," make_response  []= "," make_ __send__  "," make_ make_response  "," Channel  parse [] _for ","  method_for _for "]}," Faye Server distribute_message":{"type":"method","name":"distribute_message","children":[],"call":[" info ","channel name ","message [] ","channel << ","@channels glob each ","@channels glob "]}," Faye Extensible pipe_through_extensions":{"type":"method","name":"pipe_through_extensions","children":[],"call":["pipe call ","extension __send__ ","extension respond_to? ","callback call ","extension ! ","extensions shift ","message ! "," lambda ","@extensions dup "," debug ","arity >= ","extension method arity ","extension method ","extensions shift  __send__ ","extensions shift  respond_to? ","extensions shift  ! ","extensions shift s shift ","@extensions dup  shift ","@extensions shift s dup ","@@extensions dup  dup ","extension method arity  >= ","extensions shift  method arity ","extension method extension method arity  ","extensions shift  method "]}," Faye Extensible remove_extension":{"type":"method","name":"remove_extension","children":[],"call":["extension removed ","extension respond_to? ","ext == ","@extensions delete_if "]}," Faye Extensible add_extension":{"type":"method","name":"add_extension","children":[],"call":["extension added ","extension respond_to? ","@extensions << "]}," Faye Connection begin_deletion_timeout":{"type":"method","name":"begin_deletion_timeout","children":[],"call":[" publish_event "," add_timeout ","TIMEOUT  + ","10 * "]}," Faye Connection begin_connection_timeout":{"type":"method","name":"begin_connection_timeout","children":[],"call":[" flush! "," add_timeout "]}," Faye Connection begin_delivery_timeout":{"type":"method","name":"begin_delivery_timeout","children":[],"call":[" flush! "," add_timeout ","@inbox empty? ! ","@inbox empty? "]}," Faye Connection on_message":{"type":"method","name":"on_message","children":[],"call":[" begin_delivery_timeout ","@socket send ","JSON  unparse ","@inbox add? "]}," Faye Connection socket=":{"type":"method","name":"socket=","children":[],"call":[]}," Faye Client validate_channel":{"type":"method","name":"validate_channel","children":[],"call":[" raise ","Channel  subscribable? ","Channel  valid? "]}," Faye Client send":{"type":"method","name":"send","children":[],"call":[" flush! "," add_timeout ","message [] == ","message [] ","@outbox << ","@transport send ","@advice [] / ","@advice [] "," pipe_through_extensions ","@response_callbacks []= ","message []= ","@namespace generate "," generate_message_id "," transport_send "]}," Faye Client cycle_connection":{"type":"method","name":"cycle_connection","children":[],"call":[" connect ","EventMachine  add_timer ","@advice [] / ","@advice [] "," teardown_connection "," info ","@dispatcher client_id "]}," Faye Client teardown_connection":{"type":"method","name":"teardown_connection","children":[],"call":[" info "]}," Faye Client deliver_message":{"type":"method","name":"deliver_message","children":[],"call":["@channels distribute_message "," info ","message [] ","message has_key? ","@dispatcher client_id "]}," Faye Client receive_message":{"type":"method","name":"receive_message","children":[],"call":[" deliver_message ","callback call ","@response_callbacks delete ","message [] ","@response_callbacks [] "," handle_advice "," pipe_through_extensions ","message has_key? "," trigger ","@transport_up == ","@response_callbacks []  call ","@response_callbacks delete  call ","@response_@response_callbacks [] s delete ","@response_@response_callbacks delete s delete ","@response_@response_callbacks [] s [] ","@response_@response_callbacks delete s [] "]}," Faye Channel Tree distribute_message":{"type":"method","name":"distribute_message","children":[],"call":["channel publish_event ","message [] "," glob each "," glob "]}," Faye Channel Tree unsubscribe":{"type":"method","name":"unsubscribe","children":[],"call":["channel count_subscribers zero? ","channel count_subscribers ","channel remove_subscriber "," [] "," remove ","channel unused? "," []  count_subscribers zero? "," []  count_subscribers "," []  remove_subscriber "," []  unused? "]}," Faye Channel Tree subscribe":{"type":"method","name":"subscribe","children":[],"call":["channel add_subscriber ","Channel  new "," [] ","names each "]}," Faye Transport retry_block":{"type":"method","name":"retry_block","children":[],"call":[" request ","2 * ","EventMachine  add_timer "," lambda ","@client retry "]}," Faye Transport receive":{"type":"method","name":"receive","children":[],"call":["@client receive_message ","responses each "," debug ","@client client_id ","@client instance_eval ","(lvar :responses) flatten ","e set_deferred_status ","envelopes each ","@dispatcher handle_response ","replies each "," connection_type ","@dispatcher client_id ","(lvar :replies) flatten ","(lvar :responses) flatten  each ","@client @dispatcher client_id  ","(lvar :(lvar :responses) flatten ) flatten ","(lvar :replies) flatten  each ","@dispatcher @dispatcher client_id  ","(lvar :(lvar :replies) flatten ) flatten "]}," Faye Publisher publish_event":{"type":"method","name":"publish_event","children":[],"call":["listener call ","@subscribers [] each ","@subscribers [] "]}," Faye Publisher remove_subscriber":{"type":"method","name":"remove_subscriber","children":[],"call":["@subscribers [] delete_if ","listener method ","@subscribers [] ","@subscribers delete "]}," Faye Publisher add_subscriber":{"type":"method","name":"add_subscriber","children":[],"call":["list << ","@subscribers [] "]}," Faye Publisher count_subscribers":{"type":"method","name":"count_subscribers","children":[],"call":["@subscribers [] size ","@subscribers [] "]}," Faye RackAdapter handle_upgrade":{"type":"method","name":"handle_upgrade","children":[],"call":["socket onmessage= ","socket send ","JSON  unparse ","@server process ","JSON  parse ","message data "," lambda ","Faye WebSocket  new "," debug ","socket version ","request env ","socket onJSON  parse = ","Faye WebSocket  new  onmessage= ","Faye WebSocket  new  send ","JSON  parse  data ","Faye WebSocket  new  version "]}," Faye RackAdapter listen":{"type":"method","name":"listen","children":[],"call":["handler run ","Rack Handler  get ","s ssl_options= ","ssl_options [] ","s ssl= ","Faye WebSocket  load_adapter "," raise ","Rack Handler  get  run "]}," Faye RackAdapter remove_extension":{"type":"method","name":"remove_extension","children":[],"call":["@server remove_extension "]}," Faye RackAdapter add_extension":{"type":"method","name":"add_extension","children":[],"call":["@server add_extension "]}," Request Protocol76 big_endian":{"type":"method","name":"big_endian","children":[],"call":["string << ","(send\n  (send\n    (lvar :number) :>>\n    (lvar :offset)) :&\n  (int 255)) chr ","number >> & ","number >> ","(int 24) each "]}," Request Protocol76 spaces_in_key":{"type":"method","name":"spaces_in_key","children":[],"call":["key scan size ","key scan "]}," Request Protocol76 number_from_key":{"type":"method","name":"number_from_key","children":[],"call":["key scan join to_i ","key scan join ","key scan "]}," Request Protocol76 handshake":{"type":"method","name":"handshake","children":[],"call":["upgrade << ","@request websocket_url ","@request env [] ","@request env ","Digest MD5  digest "," big_endian + + ","@request body read ","@request body "," big_endian + "," big_endian "," number_from_key / "," spaces_in_key "," number_from_key "]}," Request Protocol75 handshake":{"type":"method","name":"handshake","children":[],"call":["upgrade << ","@request websocket_url ","@request env [] ","@request env "]}," Request WebSocketHandler initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Faye Channel Tree remove_child":{"type":"method","name":"remove_child","children":[],"call":[" remove ","@value nil? ","@children empty? ","@children delete ","child == "," each_child "]}," Faye Channel Tree remove":{"type":"method","name":"remove","children":[],"call":["@parent remove_child ","subtree remove ","subtree nil? "," traverse "," traverse  remove "," traverse  nil? "]}," Faye Channel unused?":{"type":"method","name":"unused?","children":[],"call":[" count_subscribers zero? "," count_subscribers "," count_listeners zero? "," count_listeners "," listener_count zero? "," listener_count "]}," Faye RackAdapter message_from_request":{"type":"method","name":"message_from_request","children":[],"call":["request params [] ","request params ","request body read ","request body ","content_type == ","request env [] split first ","request env [] split ","request env [] ","request env ","request post? ","CGI  parse [] [] ","CGI  parse [] ","CGI  parse ","content_type split first ","content_type split ","content_type split first == ","request env [] split first  == ","request env [] split first  split first ","request env [] split first  split ","request env [] split first  split first == "]}," Request secure_websocket?":{"type":"method","name":"secure_websocket?","children":[],"call":["@env [] =~ ","@env [] ","@env [] == ","@env has_key? "]}," Faye Transport flush":{"type":"method","name":"flush","children":[],"call":[" request ","@connection_message []= ","@outbox size > ","@outbox size "," remove_timeout ","@promise succeed "]}," Faye Transport batching?":{"type":"method","name":"batching?","children":[],"call":[]}," Faye Local request":{"type":"method","name":"request","children":[],"call":[" receive ","@endpoint process ","Faye  copy_object ","e message ","envelopes map ","EventMachine  next_tick ","e Faye  copy_object  "]}," Faye Local usable?":{"type":"method","name":"usable?","children":[],"call":[]}," Faye Http request":{"type":"method","name":"request","children":[],"call":["retry_block call ","request errback "," receive ","JSON  parse ","request response ","request callback ","EventMachine HttpRequest  new post ","EventMachine HttpRequest  new ","EventMachine HttpRequest VERSION  split [] to_i >= ","EventMachine HttpRequest VERSION  split [] to_i ","EventMachine HttpRequest VERSION  split [] ","EventMachine HttpRequest VERSION  split ","content length ","URI  parse host ","URI  parse ","JSON  unparse "," retry_block "," trigger ","@client cookies set_cookie ","@client cookies ","cookies each ","request response_header [] ","request response_header ","cookies * ","@client cookies get_cookies ","CookieJar Jar  new "," store_cookies ","(splat\n  (send\n    (send\n      (lvar :request) :response_header) :[]\n    (str \"SET_COOKIE\"))) compact "," handle_response "," create_request "," build_params ","@cookies get_cookies ","Faye  to_json "," handle_error "," encode "," retry_block  call ","EventMachine HttpRequest  new post  errback "," create_request  errback ","EventMachine HttpRequest  new post  response "," create_request  response ","EventMachine HttpRequest  new post  callback "," create_request  callback ","JSON  unparse  length ","Faye  to_json  length "," encode  length ","  retry_block  ","@client @client cookies get_cookies  set_cookie ","@client @cookies get_cookies  set_cookie ","@client @client cookies get_cookies  ","@client @cookies get_cookies  ","@client cookies get_cookies  each ","@cookies get_cookies  each ","EventMachine HttpRequest  new post  response_header [] "," create_request  response_header [] ","EventMachine HttpRequest  new post  response_header "," create_request  response_header ","@client cookies get_cookies  * ","@cookies get_cookies  * ","@client @client cookies get_cookies  get_@client cookies get_cookies  ","@client @cookies get_cookies  get_@cookies get_cookies  "," store_@client cookies get_cookies  "," store_@cookies get_cookies  ","(splat\n  (send\n    (send\n      (lvar :EventMachine HttpRequest  new post ) :response_header) :[]\n    (str \"SET_COOKIE\"))) compact ","(splat\n  (send\n    (send\n      (lvar : create_request ) :response_header) :[]\n    (str \"SET_COOKIE\"))) compact "," create_EventMachine HttpRequest  new post  "," create_ create_request  "," build_ build_params  ","@@client cookies get_cookies  get_@client cookies get_cookies  ","@@cookies get_cookies  get_@cookies get_cookies  "]}," Faye Http usable?":{"type":"method","name":"usable?","children":[],"call":[]}," Faye Client state":{"type":"method","name":"state","children":[],"call":[]}," Faye Channel Set distribute_message":{"type":"method","name":"distribute_message","children":[],"call":["channel publish_event ","message [] ","@channels [] ","channels each ","Channel  expand ","channel trigger ","@channels []  publish_event ","@@channels [] s [] ","@Channel  expand  [] ","@channels [] s each ","Channel  expand  each ","@channels []  trigger "]}," Faye Channel Set unsubscribe":{"type":"method","name":"unsubscribe","children":[],"call":[" remove ","channel unused? ","channel remove_subscriber ","@channels [] ","channel unbind ","@channels []  unused? ","@channels []  remove_subscriber ","@@channels [] s [] ","@channels []  unbind "]}," Faye Channel Set subscribe":{"type":"method","name":"subscribe","children":[],"call":["channel add_subscriber ","Channel  new ","@channels [] ","names each ","channel bind "]}," Faye Channel Set has_subscription?":{"type":"method","name":"has_subscription?","children":[],"call":["@channels has_key? "]}," Faye Channel Set remove":{"type":"method","name":"remove","children":[],"call":["@channels delete "]}," Faye Channel Set keys":{"type":"method","name":"keys","children":[],"call":["@channels keys "]}," Faye Channel Set initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Faye Channel unparse":{"type":"method","name":"unparse","children":[],"call":["/ + ","segments join "]}," Faye Channel expand":{"type":"method","name":"expand","children":[],"call":["channels << "," unparse ","copy << ","segments [] ","1 upto ","segments size - ","segments size ","copy []= ","copy size - ","copy size ","segments dup "," parse ","segments []  << ","segments dup  << "," parse  [] "," parse  size - "," parse  size ","segments []  []= ","segments dup  []= ","segments []  size - ","segments dup  size - ","segments []  size ","segments dup  size "," parse  dup "]}," Faye Publisher remove_subscribers":{"type":"method","name":"remove_subscribers","children":[],"call":[]}," Faye Engine Redis empty_queue":{"type":"method","name":"empty_queue","children":[],"call":["conn deliver ","JSON  parse ","@redis srem ","json_messages each ","@redis smembers "," init "," connection ","@ns + ","@redis ltrim ","json_messages size ","@redis lrange ","@redis exec callback ","@redis exec ","@redis del ","@redis multi "," connection  deliver ","  connection ection "]}," Faye Engine Redis publish":{"type":"method","name":"publish","children":[],"call":["@redis publish ","@redis sadd "," debug ","clients each ","@redis smembers ","channels each ","Channel  expand ","message [] ","JSON  dump "," init ","@ns + ","@redis rpush ","@redis sunion ","channels map "," trigger ","Channel  expand  each ","Channel  expand  map "]}," Faye Engine Redis unsubscribe":{"type":"method","name":"unsubscribe","children":[],"call":["callback call "," debug ","@redis srem "," init ","@ns + "," trigger ","removed == "]}," Faye Engine Redis subscribe":{"type":"method","name":"subscribe","children":[],"call":["callback call "," debug ","@redis sadd "," init ","@ns + "," trigger ","added == "]}," Faye Engine Redis ping":{"type":"method","name":"ping","children":[],"call":[" destroy_client ","ping == ","@redis get "," add_timeout ","2 * ","@redis set "," remove_timeout "," debug ","Numeric  === ","Time  now to_i to_s ","Time  now to_i ","Time  now ","@options [] ","@ns + ","@redis zadd "," init "," get_current_time "," add_Time  now to_i to_s out "," add_Time  now to_i out "," add_ get_current_time out "," add_@options []  "," remove_Time  now to_i to_s out "," remove_Time  now to_i out "," remove_ get_current_time out "," remove_@options []  "," get_current_Time  now to_i to_s  "," get_current_Time  now to_i  "," get_current_ get_current_time  "]}," Faye Engine Redis client_exists":{"type":"method","name":"client_exists","children":[],"call":["callback call ","exists != ","@redis sismember "," init ","@ns + ","score != ","@redis zscore "]}," Faye Engine Redis destroy_client":{"type":"method","name":"destroy_client","children":[],"call":["callback call "," debug ","i == "," unsubscribe ","channels each ","n == ","channels size ","@redis smembers ","@redis del ","@redis srem "," init ","@ns + "," remove_timeout ","@redis zrem "," trigger "]}," Faye Engine Redis create_client":{"type":"method","name":"create_client","children":[],"call":["callback call "," ping "," debug "," create_client ","added == ","@redis sadd ","Faye  random "," init ","@ns + ","@redis zadd "," trigger "]}," Faye Engine Redis disconnect":{"type":"method","name":"disconnect","children":[],"call":["@subscriber unsubscribe ","@ns + ","EventMachine  cancel_timer "]}," Faye Engine Redis init":{"type":"method","name":"init","children":[],"call":[" empty_queue ","topic == ","@subscriber on ","@subscriber subscribe ","EventMachine Hiredis Client  connect ","@options [] "," require ","@ns + ","@subscriber select ","@redis select ","@subscriber auth ","@redis auth ","EventMachine  add_periodic_timer "," method ","EventMachine Hiredis Client  connect  on ","EventMachine Hiredis Client  connect  subscribe ","EventMachine Hiredis Client  connect  select ","EventMachine Hiredis Client  connect  auth ","@subscriber @options []  ","@redis @options []  "]}," Faye Engine Memory empty_queue":{"type":"method","name":"empty_queue","children":[],"call":["messages each ","conn method ","@messages delete "," connection ","@server deliver ","@messages [] ","@server has_connection? ","@messages delete  each "," connection  method ","@@messages delete  delete ","  connection ection ","@@messages delete  [] ","@server has_ connection ection? "]}," Faye Engine Memory publish":{"type":"method","name":"publish","children":[],"call":[" empty_queue ","@messages [] add ","@messages [] ","Set  new "," debug ","clients each ","@channels [] ","channels each ","Channel  expand ","message [] ","@messages [] << ","subs each ","clients method "," trigger ","Faye  copy_object ","@server trigger ","@server debug ","@channels []  each ","Set  new  each ","@Channel  expand  [] ","Channel  expand  each ","@channels []  method ","Set  new  method "]}," Faye Engine Memory unsubscribe":{"type":"method","name":"unsubscribe","children":[],"call":["callback call "," debug ","@channels [] delete ","@channels [] ","@channels has_key? ","@clients [] delete ","@clients [] ","@clients has_key? ","@channels delete ","@channels [] empty? ","@clients delete ","@clients [] empty? "," trigger ","@clients [] delete? ","@server trigger ","@server debug "]}," Faye Engine Memory subscribe":{"type":"method","name":"subscribe","children":[],"call":["callback call "," debug ","@channels [] add ","@channels [] ","@clients [] add ","@clients [] ","Set  new "," trigger ","@clients [] add? ","@server trigger ","@server debug "]}," Faye Engine Memory ping":{"type":"method","name":"ping","children":[],"call":[" destroy_client "," add_timeout ","2 * "," remove_timeout "," debug ","Numeric  === ","@options [] ","@server debug ","@server timeout "," add_@options []  "," add_@server timeout  "," remove_@options []  "," remove_@server timeout  ","@server @options []  ","@server @server timeout  "]}," Faye Engine Memory client_exists":{"type":"method","name":"client_exists","children":[],"call":["callback call ","@clients has_key? ","@namespace exists? "]}," Faye Engine Memory destroy_client":{"type":"method","name":"destroy_client","children":[],"call":["callback call "," debug ","@messages delete ","@clients delete "," remove_timeout "," unsubscribe ","@clients [] each ","@clients [] ","@clients has_key? ","@namespace release ","@namespace exists? "," trigger ","@server trigger ","@server debug "]}," Faye Engine Memory create_client":{"type":"method","name":"create_client","children":[],"call":["callback call "," ping ","@clients []= ","Set  new "," debug ","@namespace generate "," trigger ","@server trigger ","@server debug "]}," Faye Engine Memory initialize":{"type":"method","name":"initialize","children":[],"call":["Namespace  new "," reset "]}," Faye Engine Connection begin_connection_timeout":{"type":"method","name":"begin_connection_timeout","children":[],"call":[" flush! "," add_timeout "," flush "]}," Faye Engine Connection begin_delivery_timeout":{"type":"method","name":"begin_delivery_timeout","children":[],"call":[" flush! "," add_timeout ","@inbox empty? "," flush "]}," Faye Engine Connection release_connection!":{"type":"method","name":"release_connection!","children":[],"call":[" remove_timeout ","@engine close_connection "," socket nil? "," socket "]}," Faye Engine Connection flush!":{"type":"method","name":"flush!","children":[],"call":[" set_deferred_status ","@inbox entries "," release_connection! "," remove_timeout ","@engine close_connection "," socket nil? "," socket "]}," Faye Engine Connection connect":{"type":"method","name":"connect","children":[],"call":[" begin_connection_timeout "," begin_delivery_timeout "," callback "," set_deferred_status ","@engine timeout ","options [] / ","options [] "," begin_connection_@engine timeout  "," begin_connection_options [] /  "," begin_delivery_@engine timeout  "," begin_delivery_options [] /  ","@engine @engine timeout  ","@engine options [] /  "]}," Faye Engine Connection deliver":{"type":"method","name":"deliver","children":[],"call":[" begin_delivery_timeout ","@inbox add? "," socket send ","Faye  to_json "," socket ","@socket send ","message delete "]}," Faye Engine Connection initialize":{"type":"method","name":"initialize","children":[],"call":["Set  new "]}," Faye Engine Base flush":{"type":"method","name":"flush","children":[],"call":["conn flush! ","@connections [] "," debug ","@connections []  flush! ","@@connections [] ections [] "]}," Faye Engine Base close_connection":{"type":"method","name":"close_connection","children":[],"call":["@connections delete "," debug "]}," Faye Engine Base connection":{"type":"method","name":"connection","children":[],"call":["@connections []= ","Connection  new ","create ! ","@connections [] ","@@connections [] ections []= ","@@connections [] ections [] "]}," Faye Engine Base connect":{"type":"method","name":"connect","children":[],"call":[" empty_queue ","conn connect "," connection "," ping "," debug "," connection   connection ect ","  connection ection "]}," Faye Engine Base initialize":{"type":"method","name":"initialize","children":[],"call":[" debug ","@options [] "]}," Faye Engine get":{"type":"method","name":"get","children":[],"call":[]}," Faye Engine register":{"type":"method","name":"register","children":[],"call":[]}," Faye RackAdapter handle_options":{"type":"method","name":"handle_options","children":[],"call":["request env [] ","request env "]}," Faye RackAdapter handle_request":{"type":"method","name":"handle_request","children":[],"call":["body succeed "," debug ","request get? ","JSON  unparse ","@server process ","callback call ","head []= ","@server flush_connection ","request env [] ","request env ","DeferredBody  new ","TYPE_JSON  dup ","TYPE_SCRIPT  dup ","request params [] ","request params ","JSON  parse "," message_from_request ","headers []= "," error ","e backtrace * ","e backtrace ","e message ","Faye  to_json ","Yajl Parser  parse ","response bytesize to_s ","response bytesize ","jsonp !~ ","request request_method "," format_request "," send_response "," jsonp_escape ","EventMachine  next_tick ","request env [] call ","MultiJson  load ","json_msg force_encoding valid_encoding? ","json_msg force_encoding "," parse_json ","DeferredBody  new  succeed ","request env []  call ","TYPE_JSON  dup  []= ","TYPE_SCRIPT  dup  []= "," JSON  parse _from_request "," Yajl Parser  parse _from_request "," MultiJson  load _from_request ","  parse_json _from_request ","TYPE_JSON  dup ers []= ","TYPE_SCRIPT  dup ers []= ","e JSON  parse  ","e Yajl Parser  parse  ","e MultiJson  load  ","e  parse_json  ","JSON  unparse  bytesize to_s ","Faye  to_json  bytesize to_s ","JSON  unparse  bytesize ","Faye  to_json  bytesize "," send_JSON  unparse  "," send_Faye  to_json  "," message_from_request  force_encoding valid_encoding? "," message_from_request  force_encoding "]}," Faye Local batching?":{"type":"method","name":"batching?","children":[],"call":[]}," Faye Client generate_message_id":{"type":"method","name":"generate_message_id","children":[],"call":["@message_id to_s ","@message_id >= ","2 ** "]}," Faye Engine Redis with_lock":{"type":"method","name":"with_lock","children":[],"call":["block call ","old_value == ","@redis getset ","lock_timeout < ","timeout to_i ","@redis get ","set == ","@redis setnx ","@redis del ","Time  now to_i * < ","Time  now to_i * ","Time  now to_i ","Time  now "," lambda ","current_time + + ","current_time + ","LOCK_TIMEOUT  * ","@ns + + ","@ns + "," get_current_time < "," get_current_time ","timeout to_i  < ","Time  now to_i *  + + "," get_current_time  + + ","Time  now to_i *  + "," get_current_time  + "," get_Time  now to_i *  < "," get_ get_current_time  < "," get_Time  now to_i *  "," get_ get_current_time  "]}," Faye Engine Redis gc":{"type":"method","name":"gc","children":[],"call":["release_lock call ","i == "," destroy_client ","clients each ","clients size ","@redis zrangebyscore ","@ns + ","Time  now to_i - ","2 * ","Time  now to_i ","Time  now "," with_lock ","Numeric  === "," get_current_time - ","1000 * * ","1000 * "," get_current_time "]}," Faye Event prevent_default":{"type":"method","name":"prevent_default","children":[],"call":[]}," Faye Event stop_propagation":{"type":"method","name":"stop_propagation","children":[],"call":[]}," Faye Event init_event":{"type":"method","name":"init_event","children":[],"call":[]}," Faye Stream write":{"type":"method","name":"write","children":[],"call":["@data_callback call "]}," Faye Stream each":{"type":"method","name":"each","children":[],"call":[]}," Faye WebSocket encode":{"type":"method","name":"encode","children":[],"call":["string force_encoding ","string respond_to? "]}," Faye WebSocket dispatch_event":{"type":"method","name":"dispatch_event","children":[],"call":["callback call "," __send__ ","event type "," publish_event ","event event_phase= ","event target= ","event current_target= "," __send__  call "]}," Faye WebSocket remove_event_listener":{"type":"method","name":"remove_event_listener","children":[],"call":[" remove_subscriber "]}," Faye WebSocket add_event_listener":{"type":"method","name":"add_event_listener","children":[],"call":[" add_subscriber "]}," Faye WebSocket close":{"type":"method","name":"close","children":[],"call":["@socket close "," set_deferred_status ","@socket onclose= ","@socket onerror= "]}," Faye WebSocket send":{"type":"method","name":"send","children":[],"call":["@stream write ","@parser frame "," encode ","Faye  encode ","@parser @parser frame  "]}," Faye WebSocket receive":{"type":"method","name":"receive","children":[],"call":[" dispatch_event ","event data= "," encode ","event init_event ","Event  new ","Faye  encode "," dispatch_Event  new  ","Event  new  data= ","Event  new  init_Event  new  "]}," Faye WebSocket initialize":{"type":"method","name":"initialize","children":[],"call":["@request env []= ","@parser method ","@request env ","WebSocket  parser new ","WebSocket  parser "," dispatch_event ","event init_event ","Event  new ","@request env [] ","@callback call ","Stream  new ","@stream write ","@parser handshake_response "," determine_url ","@env []= ","@env [] ","WebSocket  parser new  method "," dispatch_Event  new  ","Event  new  init_Event  new  ","@request env []  call ","@env []  call ","Stream  new  write ","WebSocket  parser new  handshake_response "]}," Faye WebSocket parser":{"type":"method","name":"parser","children":[],"call":[]}," Faye WebSocket Protocol8Parser unmask":{"type":"method","name":"unmask","children":[],"call":["unmasked << ","(send\n  (send nil :getbyte\n    (lvar :payload)\n    (lvar :i)) :^\n  (send\n    (lvar :mask_octets) :[]\n    (send\n      (lvar :i) :%\n      (int 4)))) chr "," getbyte ^ ","mask_octets [] ","i % "," getbyte ","(erange\n  (int 0)\n  (send\n    (lvar :payload) :size)) each ","payload size ","mask_octets size > ","mask_octets size ","byte ^ ","mask [] ","mask size > ","mask size ","payload each_with_index ","(send\n  (send nil :getbyte ^ \n    (lvar :payload)\n    (lvar :i)) :^\n  (send\n    (lvar :mask_octets) :[]\n    (send\n      (lvar :i) :%\n      (int 4)))) chr "," getbyte ^  ^ "," getbyte ^  ","byte ^  ^ "]}," Faye WebSocket Protocol8Parser integer":{"type":"method","name":"integer","children":[],"call":[" getbyte << ","8 * ","length - - ","length - "," getbyte ","offset + ","(erange\n  (int 0)\n  (lvar :length)) each ","data << ","bytes size - - ","bytes size - ","bytes size ","bytes each_with_index "]}," Faye WebSocket Protocol8Parser getbyte":{"type":"method","name":"getbyte","children":[],"call":["data [] ","data getbyte ","data respond_to? "]}," Faye WebSocket Protocol8Parser close":{"type":"method","name":"close","children":[],"call":["@socket send ","ERRORS  [] "]}," Faye WebSocket Protocol8Parser reset":{"type":"method","name":"reset","children":[],"call":[]}," Faye WebSocket Protocol8Parser frame":{"type":"method","name":"frame","children":[],"call":["@socket encode + ","@socket encode ","frame << ","(send\n  (lvar :length) :>>\n  (int 32)) pack ","length & ","length >> ","127 chr ","(lvar :length) pack ","126 chr ","length chr ","data size ","(send\n  (const nil :FIN) :|\n  (lvar :opcode)) chr ","FIN  | ","OPCODES  [] ","(send\n  (const nil :ERRORS) :[]\n  (lvar :error_type)) pack + ","(send\n  (const nil :ERRORS) :[]\n  (lvar :error_type)) pack ","ERRORS  [] ","Faye  encode + ","Faye  encode ","data bytes count ","data bytes ","data respond_to? ","mask pack ","data []= ","byte ^ ","mask [] ","i % ","data each_with_index "," rand ","(irange\n  (int 1)\n  (int 4)) map ","(send\n  (lvar :masked) :|\n  (int 127)) chr ","masked | ","(send\n  (lvar :masked) :|\n  (int 126)) chr ","(send\n  (lvar :masked) :|\n  (lvar :length)) chr ","(send\n  (const nil :FIN) :|\n  (send\n    (const nil :OPCODES) :[]\n    (lvar :type))) chr ","(lvar :code) pack bytes to_a + ","(lvar :code) pack bytes to_a ","(lvar :code) pack bytes ","(lvar :code) pack ","data bytes to_a ","String  === ","(send\n  (const nil :FIN) :|\n  (lvar :opcode)) chr  << ","(send\n  (const nil :FIN) :|\n  (send\n    (const nil :OPCODES) :[]\n    (lvar :type))) chr  << ","(send\n  (lvar :data size ) :>>\n  (int 32)) pack ","(send\n  (lvar :data bytes count ) :>>\n  (int 32)) pack ","data size  & ","data bytes count  & ","data size  >> ","data bytes count  >> ","(lvar :data size ) pack ","(lvar :data bytes count ) pack ","data size  chr ","data bytes count  chr ","(send\n  (const nil :ERRORS) :[]\n  (lvar :error_type)) pack +  size ","(lvar :code) pack bytes to_a +  size ","data bytes to_a  size ","(send\n  (const nil :FIN) :|\n  (lvar :OPCODES  [] )) chr ","(send\n  (const nil :ERRORS) :[]\n  (lvar :error_type)) pack +  bytes count ","(lvar :code) pack bytes to_a +  bytes count ","data bytes to_a  bytes count ","(send\n  (const nil :ERRORS) :[]\n  (lvar :error_type)) pack +  bytes ","(lvar :code) pack bytes to_a +  bytes ","data bytes to_a  bytes ","(send\n  (const nil :ERRORS) :[]\n  (lvar :error_type)) pack +  respond_to? ","(lvar :code) pack bytes to_a +  respond_to? ","data bytes to_a  respond_to? ","(send\n  (const nil :ERRORS) :[]\n  (lvar :error_type)) pack +  []= ","(lvar :code) pack bytes to_a +  []= ","data bytes to_a  []= ","(send\n  (const nil :ERRORS) :[]\n  (lvar :error_type)) pack +  each_with_index ","(lvar :code) pack bytes to_a +  each_with_index ","data bytes to_a  each_with_index ","(send\n  (lvar :masked) :|\n  (lvar :data size )) chr ","(send\n  (lvar :masked) :|\n  (lvar :data bytes count )) chr ","(send\n  (const nil :ERRORS) :[]\n  (lvar :error_type)) pack +  bytes to_a ","(lvar :code) pack bytes to_a +  bytes to_a ","data bytes to_a  bytes to_a "]}," Faye WebSocket Protocol8Parser parse":{"type":"method","name":"parse","children":[],"call":["@socket send ","OPCODES  [] "," close ","@buffer << ","@socket receive "," reset ","@buffer * ","@mode == "," unmask ","data [] ","payload_offset + "," getbyte ","2 + ","2 + + ","(irange\n  (int 0)\n  (int 3)) map "," integer ","byte1 & ","(send\n  (lvar :byte1) :&\n  (const nil :MASK)) == ","opcode == ","OPCODES  values include? ","OPCODES  values ","byte0 & ","(send\n  (lvar :byte0) :&\n  (const nil :FIN)) == "," parse_payload "," parse_mask "," parse_extended_length "," parse_length "," parse_opcode ","data each_byte "," emit_frame ","@length == ","@stage == "," unmask _offset + ","2 +  + ","2 + +  + "," getbyte  & ","(send\n  (lvar : getbyte ) :&\n  (const nil :MASK)) == ","(send\n  (lvar : getbyte ) :&\n  (const nil :FIN)) == "," parse_ unmask  "," parse_extended_ integer  "," parse_ integer  ","@ integer  == "]}," Faye WebSocket Protocol8Parser version":{"type":"method","name":"version","children":[],"call":[]}," Faye WebSocket Protocol8Parser initialize":{"type":"method","name":"initialize","children":[],"call":[" reset ","options [] "]}," Faye WebSocket Protocol8Parser handshake":{"type":"method","name":"handshake","children":[],"call":[]}," Faye WebSocket Draft76Parser version":{"type":"method","name":"version","children":[],"call":[]}," Faye WebSocket Draft76Parser big_endian":{"type":"method","name":"big_endian","children":[],"call":["string << ","(send\n  (send\n    (lvar :number) :>>\n    (lvar :offset)) :&\n  (int 255)) chr ","number >> & ","number >> ","(int 24) each "]}," Faye WebSocket Draft76Parser spaces_in_key":{"type":"method","name":"spaces_in_key","children":[],"call":["key scan size ","key scan "]}," Faye WebSocket Draft76Parser number_from_key":{"type":"method","name":"number_from_key","children":[],"call":["key scan join to_i ","key scan join ","key scan "]}," Faye WebSocket Draft76Parser handshake":{"type":"method","name":"handshake","children":[],"call":["upgrade << ","request websocket_url ","request env [] ","request env ","Digest MD5  digest "," big_endian + + ","request body read ","request body "," big_endian + "," big_endian "," number_from_key / "," spaces_in_key "," number_from_key "]}," Faye encode":{"type":"method","name":"encode","children":[],"call":[]}," Faye WebSocket determine_url":{"type":"method","name":"determine_url","children":[],"call":["env [] ","env [] =~ ","env [] == ","env has_key? ","@request env ","@env [] ","@env [] =~ ","@env [] == ","@env has_key? ","@request env  [] ","@request env  [] =~ ","@request env  [] == ","@request env  has_key? ","@request @request env  ","@@request env  [] ","@@request env  [] =~ ","@@request env  [] == ","@@request env  has_key? "]}," Faye WebSocket Protocol8Parser emit_frame":{"type":"method","name":"emit_frame","children":[],"call":["@socket send ","OPCODES  [] ","@closing_callback call ","@socket close ","@buffer << ","@socket receive ","Faye  encode "," reset ","@buffer * ","@mode == "," unmask ","ERRORS  [] ","payload size > ","payload size ","payload [] ","Faye  valid_utf8? ! ","Faye  valid_utf8? ","ERROR_CODES  include? ","code < ","code >= ","payload size == ","256 * + ","256 * ","payload size >= ","Faye  enERRORS  []  ","Faye  en256 * +  "," unmask  size > "," unmask  size "," unmask  [] ","ERRORS  []  < ","256 * +  < ","ERRORS  []  >= ","256 * +  >= "," unmask  size == "," unmask  size >= "]}," Faye WebSocket Protocol8Parser parse_payload":{"type":"method","name":"parse_payload","children":[],"call":[" emit_frame ","@payload size < ","@payload size ","@payload << "]}," Faye WebSocket Protocol8Parser parse_mask":{"type":"method","name":"parse_mask","children":[],"call":["@mask size < ","@mask size ","@mask << "]}," Faye WebSocket Protocol8Parser parse_extended_length":{"type":"method","name":"parse_extended_length","children":[],"call":[" integer ","@length_buffer size == ","@length_buffer size ","@length_buffer << "," integer _buffer size == "," integer _buffer size "," integer _buffer << "]}," Faye WebSocket Protocol8Parser parse_length":{"type":"method","name":"parse_length","children":[],"call":["@length == ","(irange\n  (int 1)\n  (int 125)) include? ","data & ","(send\n  (lvar :data) :&\n  (const nil :MASK)) == ","@length <= "]}," Faye WebSocket Protocol8Parser parse_opcode":{"type":"method","name":"parse_opcode","children":[],"call":["@socket close ","OPCODES  values include? ","OPCODES  values ","data & ","(send\n  (lvar :data) :&\n  (const nil :FIN)) == ","ERRORS  [] ","OPENING_OPCODES  include? ","FRAGMENTED_OPCODES  include? ","(send\n  (lvar :data) :&\n  (lvar :rsv)) == ","(const nil :RSV1) any? "]}," Faye WebSocket Protocol8Parser create_handshake":{"type":"method","name":"create_handshake","children":[],"call":["Handshake  new ","@socket uri "]}," Faye WebSocket Protocol8Parser handshake_response":{"type":"method","name":"handshake_response","children":[],"call":["upgrade << ","Base64  encode64 strip ","Base64  encode64 ","Digest SHA1  digest ","sec_key + ","String  === ","@socket request env [] ","@socket request env ","@socket request ","@socket env [] ","@socket env ","@socket request env []  + ","@socket env []  + "]}," Faye WebSocket Protocol8Parser Handshake valid?":{"type":"method","name":"valid?","children":[],"call":["response [] == ","response [] ","connection split include? ","connection split ","upgrade =~ ","response code to_i == ","response code to_i ","response code ","Net HTTPResponse  read_new ","Net BufferedIO  new ","StringIO  new ","Faye  encode ","@buffer * ","Net HTTPResponse  read_new  [] == ","Net HTTPResponse  read_new  [] ","Net HTTPResponse  read_new  code to_i == ","Net HTTPResponse  read_new  code to_i ","Net HTTPResponse  read_new  code "]}," Faye WebSocket Protocol8Parser Handshake complete?":{"type":"method","name":"complete?","children":[],"call":["@buffer [] == ","@buffer [] "]}," Faye WebSocket Protocol8Parser Handshake parse":{"type":"method","name":"parse","children":[],"call":["@buffer << ","b chr ","data each_byte "," complete? ","message << "]}," Faye WebSocket Protocol8Parser Handshake request_data":{"type":"method","name":"request_data","children":[],"call":["handshake << ","@uri path ","@uri host + ","@uri port ","@uri host ","@uri query "]}," Faye WebSocket Protocol8Parser Handshake initialize":{"type":"method","name":"initialize","children":[],"call":["Base64  encode64 strip ","Base64  encode64 ","Digest SHA1  digest ","@key + ","(send\n  (begin\n    (irange\n      (int 1)\n      (int 16))) :map) * "," rand chr "," rand ","(irange\n  (int 1)\n  (int 16)) map ","Base64  encode64 strip  + "]}," Faye WebSocket Draft76Parser handshake_response":{"type":"method","name":"handshake_response","children":[],"call":["upgrade << ","@socket url ","request env [] ","request env ","Digest MD5  digest "," big_endian + + ","request body read ","request body "," big_endian + "," big_endian "," number_from_key / "," spaces_in_key "," number_from_key ","@socket request ","env [] ","env [] read ","@socket env ","@socket request  env [] ","request @socket env  [] ","@socket request  env ","request @socket env  ","@socket request  body read ","@socket request  body ","@socket @socket request  ","@socket env  [] ","@socket env  [] read ","@socket @socket env  "]}," Faye RackAdapter stop":{"type":"method","name":"stop","children":[],"call":["@thin_server stop "]}," Faye Engine Redis get_current_time":{"type":"method","name":"get_current_time","children":[],"call":["(send\n  (send\n    (send\n      (const nil :Time) :now) :to_f) :*\n  (int 1000)) to_i ","Time  now to_f * ","Time  now to_f ","Time  now "]}," Faye RackAdapter serve_client_script":{"type":"method","name":"serve_client_script","children":[],"call":["@client_mtime <= ","Time  httpdate ","env [] == ","env [] ","headers []= ","@client_mtime httpdate ","TYPE_SCRIPT  dup ","File  mtime ","Digest SHA1  hexdigest ","File  read ","@client_script bytesize to_s ","@client_script bytesize ","TYPE_SCRIPT  dup  []= "]}," Faye Stream fail":{"type":"method","name":"fail","children":[],"call":["@web_socket close "]}," Faye Stream initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Faye WebSocket Client Connection write":{"type":"method","name":"write","children":[],"call":[" send_data "]}," Faye WebSocket Client Connection unbind":{"type":"method","name":"unbind","children":[],"call":[" parent close "," parent "]}," Faye WebSocket Client Connection receive_data":{"type":"method","name":"receive_data","children":[],"call":[" parent __send__ "," parent "]}," Faye WebSocket Client Connection connection_completed":{"type":"method","name":"connection_completed","children":[],"call":[" parent __send__ "," parent "]}," Faye WebSocket Client receive_data":{"type":"method","name":"receive_data","children":[],"call":["@parser parse "," dispatch_event ","event init_event ","Event  new "," receive_data ","@handshake valid? ","@handshake complete? ","@handshake parse ","Faye  encode "," dispatch_Event  new  ","Event  new  init_Event  new  "," receive_Faye  encode  "]}," Faye WebSocket Client on_connect":{"type":"method","name":"on_connect","children":[],"call":["@stream write ","@handshake request_data ","@parser create_handshake ","@stream start_tls ","@uri scheme == ","@uri scheme ","@parser create_handshake  request_data "]}," Faye WebSocket Client initialize":{"type":"method","name":"initialize","children":[],"call":["conn parent= ","EventMachine  connect ","@uri host ","@uri scheme == ","@uri scheme ","@uri port ","URI  parse ","Protocol8Parser  new ","URI  parse  host ","URI  parse  scheme == ","URI  parse  scheme ","URI  parse  port "]}," Faye WebSocket Event prevent_default":{"type":"method","name":"prevent_default","children":[],"call":[]}," Faye WebSocket Event stop_propagation":{"type":"method","name":"stop_propagation","children":[],"call":[]}," Faye WebSocket Event init_event":{"type":"method","name":"init_event","children":[],"call":[]}," Faye WebSocket Event initialize":{"type":"method","name":"initialize","children":[],"call":["metaclass __send__ ","options each "]}," Faye WebSocket API dispatch_event":{"type":"method","name":"dispatch_event","children":[],"call":["callback call "," __send__ ","event type "," trigger ","event event_phase= ","event target= ","event current_target= "," __send__  call "]}," Faye WebSocket API remove_event_listener":{"type":"method","name":"remove_event_listener","children":[],"call":[" unbind "]}," Faye WebSocket API add_event_listener":{"type":"method","name":"add_event_listener","children":[],"call":[" bind "]}," Faye WebSocket API close":{"type":"method","name":"close","children":[],"call":["close call ","@parser close ","@parser respond_to? "," dispatch_event ","event init_event ","Event  new ","@stream close_connection_after_writing "," lambda ","(const nil :CLOSING) include? "," ready_state "," dispatch_Event  new  ","Event  new  init_Event  new  "]}," Faye WebSocket API send":{"type":"method","name":"send","children":[],"call":["@stream write ","@parser frame ","Faye  encode ","String  === "," ready_state == "," ready_state ","@parser @parser frame  "]}," Faye WebSocket API receive":{"type":"method","name":"receive","children":[],"call":[" dispatch_event ","event data= ","event init_event ","Event  new "," ready_state == "," ready_state "," dispatch_Event  new  ","Event  new  data= ","Event  new  init_Event  new  "]}," Faye WebSocket resend":{"type":"method","name":"resend","children":[],"call":[" request ","@messages values "]}," Faye WebSocket connect":{"type":"method","name":"connect","children":[],"call":["@socket onclose= "," trigger ","@timeout * "," connect ","EventMachine  add_timer "," resend "," set_deferred_status ","@state == "," lambda ","@socket onmessage= "," receive ","@messages delete ","message [] ","messages each ","(send\n  (const nil :JSON) :parse\n  (send\n    (lvar :event) :data)) flatten ","JSON  parse ","event data ","@socket onopen= ","Faye WebSocket Client  new ","@endpoint gsub ","@client retry ","(send\n  (const\n    (const nil :Yajl) :Parser) :parse\n  (send\n    (lvar :event) :data)) flatten ","Yajl Parser  parse ","@socket onerror= "," close ","(lvar :messages) flatten ","messages nil? ","socket onmessage= ","envelopes << ","@pending delete ","e id == ","e id ","@pending find ","message has_key? ","MultiJson  load ","socket onclose= ","socket onerror= "," handle_error ","@pending to_a "," remove_timeout ","socket onopen= "," ping ","Set  new "," store_cookies ","socket headers [] ","socket headers ","url to_s ","url scheme= ","PROTOCOLS  [] ","url scheme ","@endpoint dup ","headers []= "," get_cookies ","@client headers dup ","@client headers ","m [] == ","reply [] ","m [] ","reply has_key? ","replies each ","(lvar :replies) flatten ","replies nil? ","cookie == ","@dispatcher ws_extensions ","@dispatcher headers dup ","@dispatcher headers ","url hostname ","@dispatcher tls ","Faye WebSocket Client  new  onclose= ","@Faye WebSocket Client  new  onclose= ","@timeout *  * ","Faye WebSocket Client  new  onmessage= ","@Faye WebSocket Client  new  onmessage= ","@(send\n  (const nil :JSON) :parse\n  (send\n    (lvar :event) :data)) flatten  delete ","@(send\n  (const\n    (const nil :Yajl) :Parser) :parse\n  (send\n    (lvar :event) :data)) flatten  delete ","@(lvar :messages) flatten  delete ","@Yajl Parser  parse  delete ","@MultiJson  load  delete ","(send\n  (const nil :JSON) :parse\n  (send\n    (lvar :event) :data)) flatten  each ","(send\n  (const\n    (const nil :Yajl) :Parser) :parse\n  (send\n    (lvar :event) :data)) flatten  each ","(lvar :messages) flatten  each ","Yajl Parser  parse  each ","MultiJson  load  each ","Faye WebSocket Client  new  onopen= ","@Faye WebSocket Client  new  onopen= ","Faye WebSocket Client  new  onerror= ","@Faye WebSocket Client  new  onerror= ","(lvar :(send\n  (const nil :JSON) :parse\n  (send\n    (lvar :event) :data)) flatten ) flatten ","(lvar :(send\n  (const\n    (const nil :Yajl) :Parser) :parse\n  (send\n    (lvar :event) :data)) flatten ) flatten ","(lvar :(lvar :messages) flatten ) flatten ","(lvar :Yajl Parser  parse ) flatten ","(lvar :MultiJson  load ) flatten ","(send\n  (const nil :JSON) :parse\n  (send\n    (lvar :event) :data)) flatten  nil? ","(send\n  (const\n    (const nil :Yajl) :Parser) :parse\n  (send\n    (lvar :event) :data)) flatten  nil? ","(lvar :messages) flatten  nil? ","Yajl Parser  parse  nil? ","MultiJson  load  nil? ","@@pending to_a  delete ","Set  new  delete ","@@pending to_a  find ","Set  new  find ","@@pending to_a  to_a ","Set  new  to_a "," store_ get_cookies s ","Faye WebSocket Client  new  headers [] ","socket @client headers dup  [] ","socket @dispatcher headers dup  [] ","Faye WebSocket Client  new  headers ","socket @client headers dup  ","socket @dispatcher headers dup  ","@endpoint dup  to_s ","@endpoint dup  scheme= ","@endpoint dup  scheme ","@client headers dup  []= ","@dispatcher headers dup  []= "," get_ get_cookies s ","@client @client headers dup  dup ","@client @dispatcher headers dup  dup ","@client @client headers dup  ","@client @dispatcher headers dup  ","(lvar :replies) flatten  each ","(lvar :(lvar :replies) flatten ) flatten ","(lvar :replies) flatten  nil? "," get_cookies  == ","@dispatcher ws_@dispatcher ws_extensions  ","@dispatcher @client headers dup  dup ","@dispatcher @dispatcher headers dup  dup ","@dispatcher @client headers dup  ","@dispatcher @dispatcher headers dup  ","@endpoint dup  hostname "]}," Faye WebSocket with_socket":{"type":"method","name":"with_socket","children":[],"call":[" connect "," callback "]}," Faye WebSocket request":{"type":"method","name":"request","children":[],"call":["socket send ","JSON  unparse "," with_socket ","@messages []= ","message [] ","messages each ","Faye  to_json ","messages empty? "," connect "," callback ","e message ","envelopes map ","@pending add ","envelopes each ","Set  new ","promise succeed ","Request  new ","socket ready_state == ","socket ready_state ","Request  new  succeed "]}," Faye WebSocket batching?":{"type":"method","name":"batching?","children":[],"call":[]}," Faye WebSocket usable?":{"type":"method","name":"usable?","children":[],"call":[" connect ","callback call "," errback "," callback "]}," Faye Transport close":{"type":"method","name":"close","children":[],"call":[]}," Faye Client select_transport":{"type":"method","name":"select_transport","children":[],"call":[" trigger ","@transport_up ! ","@transport_up nil? ","transport bind ","Transport  get ","@transport headers= ","@transport cookies= "," debug ","transport endpoint ","transport connection_type ","@transport close ","transport == "]}," Faye Client disable":{"type":"method","name":"disable","children":[],"call":["@disabled << "]}," Faye Publisher trigger":{"type":"method","name":"trigger","children":[],"call":["listener call ","@subscribers [] each ","@subscribers [] ","listeners each ","@subscribers [] dup ","@subscribers [] dup  each "]}," Faye Publisher unbind":{"type":"method","name":"unbind","children":[],"call":["@subscribers [] delete_if ","listener method ","@subscribers [] ","@subscribers delete "," remove_all_listeners "," remove_listener "]}," Faye Publisher bind":{"type":"method","name":"bind","children":[],"call":["list << ","@subscribers [] "]}," Faye Publisher count_listeners":{"type":"method","name":"count_listeners","children":[],"call":["@subscribers [] size ","@subscribers [] "]}," Faye async_each":{"type":"method","name":"async_each","children":[],"call":[]}," Faye copy_object":{"type":"method","name":"copy_object","children":[],"call":[]}," Faye Http store_cookies":{"type":"method","name":"store_cookies","children":[],"call":["@cookies set_cookie ","cookies each "]}," Faye Http handle_response":{"type":"method","name":"handle_response","children":[],"call":[" trigger ","retry_block call "," receive ","Yajl Parser  parse "," handle_error "," messages ","MultiJson  load "]}," Faye Http create_request":{"type":"method","name":"create_request","children":[],"call":["client post ","EventMachine HttpRequest  new ","version >= ","EventMachine HttpRequest VERSION  split [] to_i ","EventMachine HttpRequest VERSION  split [] ","EventMachine HttpRequest VERSION  split ","@endpoint to_s ","options [] []= ","uri password ","uri user ","options [] ","options []= ","uri port ","uri host ","URI  parse ","@proxy [] ","@endpoint hostname "," URI ","@dispatcher tls ","EventMachine HttpRequest  new  post ","EventMachine HttpRequest VERSION  split [] to_i  >= ","URI  parse  password "," URI  password ","URI  parse  user "," URI  user ","URI  parse  port "," URI  port ","URI  parse  host "," URI  host "]}," Faye Http build_params":{"type":"method","name":"build_params","children":[],"call":["(pair\n  (str \"Content-Length\")\n  (send\n    (lvar :content) :bytesize)) merge ","uri host ","cookies * ","content bytesize ","@client headers "," get_cookies ","params [] []= ","params [] ","cookie == ","@dispatcher headers ","@endpoint host + ","@endpoint port ","@endpoint host ","headers merge "," get_cookies s * "," get_ get_cookies s "," get_cookies  == "]}," Faye Server close_socket":{"type":"method","name":"close_socket","children":[],"call":["@engine flush ","@engine flush_connection "]}," Faye Server open_socket":{"type":"method","name":"open_socket","children":[],"call":["@engine open_socket ","Socket  new "]}," Faye Client set_header":{"type":"method","name":"set_header","children":[],"call":["@headers []= ","value to_s ","name to_s "]}," Faye Engine Proxy publish":{"type":"method","name":"publish","children":[],"call":["@engine publish ","Channel  expand ","message [] "]}," Faye Engine Proxy disconnect":{"type":"method","name":"disconnect","children":[],"call":["@engine disconnect ","@engine respond_to? "]}," Faye Engine Proxy flush":{"type":"method","name":"flush","children":[],"call":["conn flush! "," connection "," debug "," connection  flush! ","  connection ection "]}," Faye Engine Proxy generate_id":{"type":"method","name":"generate_id","children":[],"call":["Engine  random "]}," Faye Engine Proxy deliver":{"type":"method","name":"deliver","children":[],"call":["messages each ","conn method "," connection ","messages empty? ","messages ! "," connection  method ","  connection ection "]}," Faye Engine Proxy open_socket":{"type":"method","name":"open_socket","children":[],"call":["conn socket= "," connection "," connection  socket= ","  connection ection "]}," Faye Engine Proxy close_connection":{"type":"method","name":"close_connection","children":[],"call":["@connections delete "," debug "," trigger ","conn socket close ","conn socket ","@connections [] ","@@connections [] ections delete ","@connections []  socket close ","@connections []  socket ","@@connections [] ections [] "]}," Faye Engine Proxy connection":{"type":"method","name":"connection","children":[],"call":["@connections []= ","Connection  new ","create ! ","@connections [] "," trigger ","@@connections [] ections []= ","@@connections [] ections [] "]}," Faye Engine Proxy has_connection?":{"type":"method","name":"has_connection?","children":[],"call":["@connections has_key? "]}," Faye Engine Proxy connect":{"type":"method","name":"connect","children":[],"call":["@engine empty_queue ","conn connect "," connection ","@engine ping "," debug "," connection   connection ect ","  connection ection "]}," Faye Engine Proxy initialize":{"type":"method","name":"initialize","children":[],"call":[" debug ","engine_class create ","@options [] "," close_connection ","EventMachine  next_tick "," bind ","EM  add_timer "," flush "," flush_connection "]}," Faye Engine random":{"type":"method","name":"random","children":[],"call":[]}," Faye Engine ensure_reactor_running!":{"type":"method","name":"ensure_reactor_running!","children":[],"call":[]}," Faye Engine Memory create":{"type":"method","name":"create","children":[],"call":[]}," Faye RackAdapter handle_eventsource":{"type":"method","name":"handle_eventsource","children":[],"call":["es rack_response ","es onclose= ","@server close_socket "," lambda ","@server open_socket "," debug ","es url split pop ","es url split ","es url ","Faye EventSource  new ","@options [] ","request env ","Faye EventSource  new  rack_rFaye EventSource  new ponse ","Faye EventSource  new  onclose= ","Faye EventSource  new  url split pop ","Faye EventSource  new  url split ","Faye EventSource  new  url ","requFaye EventSource  new t env "]}," Faye RackAdapter handle_websocket":{"type":"method","name":"handle_websocket","children":[],"call":["ws rack_response ","ws onclose= ","@server close_socket "," lambda ","ws onmessage= "," error ","e backtrace * ","e backtrace ","e message ","ws send ","Faye  to_json ","@server process ","@server open_socket "," debug ","ws version ","(lvar :message) flatten [] [] ","(lvar :message) flatten [] ","(lvar :message) flatten ","Yajl Parser  parse ","event data ","Faye WebSocket  new ","@options [] ","Faye  client_id_from_messages ","cid != ","MultiJson  load ","request env "," parse_json ","Faye WebSocket  new  rack_response ","Faye WebSocket  new  onclose= ","ws onYajl Parser  parse = ","ws onMultiJson  load = ","ws on parse_json = ","Faye WebSocket  new  onmessage= ","e Yajl Parser  parse  ","e MultiJson  load  ","e  parse_json  ","Faye WebSocket  new  send ","Faye WebSocket  new  version ","(lvar :Yajl Parser  parse ) flatten [] [] ","(lvar :MultiJson  load ) flatten [] [] ","(lvar : parse_json ) flatten [] [] ","(lvar :Yajl Parser  parse ) flatten [] ","(lvar :MultiJson  load ) flatten [] ","(lvar : parse_json ) flatten [] ","(lvar :Yajl Parser  parse ) flatten ","(lvar :MultiJson  load ) flatten ","(lvar : parse_json ) flatten ","Faye  (lvar :message) flatten [] [] _from_messages ","Faye  Faye  client_id_from_messages _from_messages ","Faye  client_id_from_Yajl Parser  parse s ","Faye  client_id_from_MultiJson  load s ","Faye  client_id_from_ parse_json s ","Faye  client_id_from_messages  != "]}," Faye client_id_from_messages":{"type":"method","name":"client_id_from_messages","children":[],"call":[]}," Faye WebSocket create":{"type":"method","name":"create","children":[],"call":[]}," Faye Server Socket close":{"type":"method","name":"close","children":[],"call":["@socket close "]}," Faye Server Socket send":{"type":"method","name":"send","children":[],"call":["@socket send ","Faye  to_json ","@server pipe_through_extensions "]}," Faye Server Socket initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Faye StaticServer call":{"type":"method","name":"call","children":[],"call":["cache [] ","headers update ","headers []= ","cache [] bytesize to_s ","cache [] bytesize ","cache [] <= ","Time  httpdate ","env [] == ","env [] ","cache [] httpdate ","File  mtime ","Digest SHA1  hexdigest ","File  read ","File  join ","@index [] ","@path_map [] ","File  basename ","type dup ","type dup  update ","type dup  []= "]}," Faye StaticServer =~":{"type":"method","name":"=~","children":[],"call":["@path_regex =~ "]}," Faye StaticServer map":{"type":"method","name":"map","children":[],"call":["@path_map []= "]}," Faye StaticServer initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Faye RackAdapter format_request":{"type":"method","name":"format_request","children":[],"call":["string << ","request body read ","request body ","request env [] ","request env ","request post? ","request url ","request request_method upcase ","request request_method ","request body rewind "]}," Faye parse_url":{"type":"method","name":"parse_url","children":[],"call":[]}," Faye WebSocket ping":{"type":"method","name":"ping","children":[],"call":[" ping "," add_timeout ","timeout / ","@advice [] ","@client instance_eval ","@socket send ","@dispatcher timeout / ","@dispatcher timeout ","@socket ready_state == ","@socket ready_state "]}," Faye Transport store_cookies":{"type":"method","name":"store_cookies","children":[],"call":["@client cookies set_cookie ","@endpoint to_s ","@client cookies ","(splat\n  (lvar :set_cookie)) compact each ","(splat\n  (lvar :set_cookie)) compact ","@dispatcher cookies set_cookie ","@dispatcher cookies "]}," Faye Transport get_cookies":{"type":"method","name":"get_cookies","children":[],"call":["@client cookies get_cookies * ","@client cookies get_cookies ","@endpoint to_s ","@client cookies ","@dispatcher cookies get_cookies * ","@dispatcher cookies get_cookies ","@dispatcher cookies "]}," Faye Transport handle_error":{"type":"method","name":"handle_error","children":[],"call":["e set_deferred_status ","envelopes each ","@dispatcher handle_error ","messages each "," debug "," connection_type ","@dispatcher client_id ","@dispatcher @dispatcher client_id  "]}," Faye Transport flush_large_batch":{"type":"method","name":"flush_large_batch","children":[],"call":["@outbox push "," flush ","@outbox pop ","string size < ","@client max_request_size ","string size "," encode ","@dispatcher max_request_size ","EventMachine DefaultDeferrable  new "," encode  size < "," encode  size "]}," Faye Transport encode":{"type":"method","name":"encode","children":[],"call":[]}," Faye Http encode":{"type":"method","name":"encode","children":[],"call":["Faye  to_json ","e message ","envelopes map "]}," Faye Envelope hash":{"type":"method","name":"hash","children":[],"call":["@id hash "]}," Faye Envelope eql?":{"type":"method","name":"eql?","children":[],"call":["@id == ","other id ","Envelope  === "]}," Faye Envelope initialize":{"type":"method","name":"initialize","children":[],"call":[" timeout ","message [] "]}," Faye Client transport_send":{"type":"method","name":"transport_send","children":[],"call":["@transport send "," message_error ","envelope errback ","Envelope  new ","1.2 * / ","1.2 * ","@advice [] ","(nil) include? ","Envelope  new  errback "]}," Faye Client message_error":{"type":"method","name":"message_error","children":[],"call":[" trigger ","@transport_up == "," transport_send ","EventMachine  add_timer ","message [] ","messages each "]}," Faye Logging write_log":{"type":"method","name":"write_log","children":[],"call":["Faye  logger call ","banner + ","Faye  logger ","Faye  logger respond_to? ","Faye  logger __send__ "," class name "," class ","Faye  to_json ","message_args shift ","message_args shift gsub "]}," Faye Deferrable set_deferred_status":{"type":"method","name":"set_deferred_status","children":[],"call":["status == "]}," Faye RackAdapter send_response":{"type":"method","name":"send_response","children":[],"call":["hijack close_write ","hijack flush ","hijack write ","buffer << ","response [] each ","response [] ","callback call "]}," Faye RackAdapter jsonp_escape":{"type":"method","name":"jsonp_escape","children":[],"call":["json gsub gsub ","json gsub "]}," Faye Server close":{"type":"method","name":"close","children":[],"call":["@engine close "]}," Faye Timeouts remove_all_timeouts":{"type":"method","name":"remove_all_timeouts","children":[],"call":[" remove_timeout ","@timeouts keys each ","@timeouts keys "]}," Faye Engine Proxy close":{"type":"method","name":"close","children":[],"call":["@engine disconnect "," flush ","@connections keys each ","@connections keys "," flush_connection "]}," Faye Engine Memory reset":{"type":"method","name":"reset","children":[],"call":["Namespace  new "]}," Faye Engine Memory disconnect":{"type":"method","name":"disconnect","children":[],"call":[" remove_all_timeouts "," reset "]}," Faye RackAdapter close":{"type":"method","name":"close","children":[],"call":["@server close "]}," Faye Server method_for":{"type":"method","name":"method_for","children":[],"call":["message [] "]}," Faye WebSocket Request close":{"type":"method","name":"close","children":[],"call":["socket close "," callback "]}," Faye Transport connection_types":{"type":"method","name":"connection_types","children":[],"call":["t [] ","@transports map "]}," Faye Transport send_message":{"type":"method","name":"send_message","children":[],"call":[" flush "," add_timeout ","message [] == ","message [] ","EventMachine DefaultDeferrable  new "," flush_large_batch ","@outbox << ","promise succeed "," request "," batching? "," debug "," connection_type ","@dispatcher client_id "," publish ","EventMachine DefaultDeferrable  new  succeed ","@dispatcher @dispatcher client_id  "]}," Faye Scheduler abort!":{"type":"method","name":"abort!","children":[],"call":[]}," Faye Scheduler fail!":{"type":"method","name":"fail!","children":[],"call":[]}," Faye Scheduler succeed!":{"type":"method","name":"succeed!","children":[],"call":[]}," Faye Scheduler send!":{"type":"method","name":"send!","children":[],"call":[]}," Faye Scheduler deliverable?":{"type":"method","name":"deliverable?","children":[],"call":["now > ","@attempts >= ","Time  now to_f ","Time  now ","@options [] ","Time  now to_f  > ","@@options []  >= ","Time  Time  now to_f  to_f ","Time  Time  now to_f  "]}," Faye Scheduler timeout":{"type":"method","name":"timeout","children":[],"call":["@options [] "]}," Faye Scheduler interval":{"type":"method","name":"interval","children":[],"call":["@options [] "]}," Faye Scheduler initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Faye Dispatcher handle_error":{"type":"method","name":"handle_error","children":[],"call":["@client trigger ","@state == ","envelope timer= "," send_envelope ","EventMachine  add_timer ","scheduler interval ","envelope request= ","EventMachine  cancel_timer ","envelope timer ","scheduler fail! ","envelope scheduler ","req close ","req respond_to? ","request callback ","envelope request ","@envelopes [] ","message [] ","@envelopes []  timer= "," send_@envelopes []  ","envelope scheduler  interval ","envelope envelope request = ","@envelopes []  request= ","@envelopes []  timer ","envelope scheduler  fail! ","envelope envelope scheduler  ","@envelopes []  scheduler ","envelope request  callback ","envelope envelope request  ","@envelopes []  request ","@@envelopes [] s [] "]}," Faye Dispatcher handle_response":{"type":"method","name":"handle_response","children":[],"call":["@client trigger ","@state == "," trigger ","EventMachine  cancel_timer ","envelope timer ","envelope scheduler succeed! ","envelope scheduler ","reply has_key? ","@envelopes delete ","reply [] ","@envelopes delete  timer ","@envelopes delete  scheduler succeed! ","@envelopes delete  scheduler ","@@envelopes delete s delete "]}," Faye Dispatcher send_envelope":{"type":"method","name":"send_envelope","children":[],"call":["envelope request= ","@transport send_message ","scheduler send! ","envelope timer= "," handle_error ","EventMachine  add_timer ","scheduler timeout ","@envelopes delete ","message [] ","scheduler abort! ","scheduler deliverable? ","envelope scheduler ","envelope message ","envelope timer ","envelope request ","@transport send_envelope message  ","envelope scheduler  send! ","envelope scheduler  timeout ","envelope message  [] ","envelope scheduler  abort! ","envelope scheduler  deliverable? ","envelope envelope scheduler  ","envelope envelope message  "]}," Faye Dispatcher send_message":{"type":"method","name":"send_message","children":[],"call":[" send_envelope ","@envelopes []= ","Envelope  new ","@scheduler new ","@envelopes [] ","Time  now to_f + ","options [] ","Time  now to_f ","Time  now ","message [] "," send_@envelopes []=  "," send_@envelopes []  ","@@envelopes []= s []= ","@@envelopes [] s []= ","@@scheduler new  new ","@@envelopes []= s [] ","@@envelopes [] s [] "]}," Faye Dispatcher select_transport":{"type":"method","name":"select_transport","children":[],"call":["@transport close ","transport == "," debug ","transport endpoint ","transport connection_type ","Transport  get "]}," Faye Dispatcher connection_types":{"type":"method","name":"connection_types","children":[],"call":["Transport  connection_types "]}," Faye Dispatcher close":{"type":"method","name":"close","children":[],"call":["transport close "]}," Faye Dispatcher set_header":{"type":"method","name":"set_header","children":[],"call":["@headers []= ","value to_s ","name to_s "]}," Faye Dispatcher disable":{"type":"method","name":"disable","children":[],"call":["@disabled << "]}," Faye Dispatcher add_websocket_extension":{"type":"method","name":"add_websocket_extension","children":[],"call":["@ws_extensions << "]}," Faye Dispatcher endpoint_for":{"type":"method","name":"endpoint_for","children":[],"call":["@alternates [] "]}," Faye Dispatcher initialize":{"type":"method","name":"initialize","children":[],"call":["@alternates []= ","Faye  parse_url ","@alternates each "," add_websocket_extension ","(splat\n  (send\n    (lvar :options) :[]\n    (sym :websocket_extensions))) each ","options [] ","String  === ","CookieJar Jar  new "," URI ","(pair\n  (sym :verify_peer)\n  (true)) merge "]}," Faye Client send_message":{"type":"method","name":"send_message","children":[],"call":["@dispatcher send_message ","@response_callbacks []= ","message [] "," pipe_through_extensions ","1.2 * / ","1.2 * ","@advice [] ","@dispatcher retry ","(nil) include? ","message []= "," generate_message_id "]}," Faye Engine Proxy flush_connection":{"type":"method","name":"flush_connection","children":[],"call":[" close_connection ","conn flush ","conn socket= "," connection "," debug "," close_ connection ection "," connection  flush "," connection  socket= ","  connection ection "]}," Faye Engine Connection flush":{"type":"method","name":"flush","children":[],"call":["@engine close_connection "," set_deferred_status ","@inbox entries "," remove_timeout "]}," Faye RackAdapter add_websocket_extension":{"type":"method","name":"add_websocket_extension","children":[],"call":["@extensions << "]}," Faye Transport publish":{"type":"method","name":"publish","children":[],"call":[" flush "," add_timeout ","EventMachine DefaultDeferrable  new "]}," Faye Subscription to_proc":{"type":"method","name":"to_proc","children":[],"call":[" call "," lambda "]}," Faye Subscription call":{"type":"method","name":"call","children":[],"call":["@with_channel call ","message [] ","@callback call ","args first ","args first  [] "]}," Faye Subscription with_channel":{"type":"method","name":"with_channel","children":[],"call":[]}," Faye RackAdapter parse_json":{"type":"method","name":"parse_json","children":[],"call":[" raise ","Hash  === ","Array  === ","MultiJson  load "]}}