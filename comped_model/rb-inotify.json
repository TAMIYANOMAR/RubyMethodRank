{" INotify Watcher initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","SystemCallError  new ","FFI  errno ","(str \"Failed to watch \") + ","path inspect ","@notifier watchers []= ","@notifier watchers ","@id < ","Native  inotify_add_watch ","Native Flags  to_mask ","@notifier fd ","flags freeze "," proc ","path dup ","Native  inotify_add_watch  < "]}," INotify Watcher close":{"type":"method","name":"close","children":[],"call":[" raise ","SystemCallError  new ","FFI  errno "," path inspect "," path ","Native  inotify_rm_watch == ","Native  inotify_rm_watch ","@notifier fd ","@notifier watchers delete ","@notifier watchers "]}," INotify Watcher callback!":{"type":"method","name":"callback!","children":[],"call":["@callback [] "]}," INotify Notifier read_events":{"type":"method","name":"read_events","children":[],"call":["events << ","Event  consume "," raise ","tries == ","er errno == ","er errno "," readpartial ","64 * ","Native Event  size ","ev related replace freeze ","ev related replace ","evs - ","ev related ","evs each ","cookies each ","cookies [] << ","cookies [] ","event cookie ","event cookie == ","data nil? ","tries < ","Native Event  size + + ","Native Event  size + ","Native  fpathconf "," fd ","ev cookie ","ev cookie == ","Event  consume ents << ","Event  consume s << ","Native Event  64 *  ","Native Event  Native Event  size + +  ","Event  consume  related replace freeze ","Event  consume  related replace ","Event  consume s - ","Event  consume  related ","Event  consume s each ","Event  consume ent cookie ","Event  consume  cookie ","Event  consume ent cookie == ","Event  consume  cookie == "," readpartial  nil? ","Native Event  64 *  + + ","Native Event  Native Event  size + +  + + ","Native Event  64 *  + ","Native Event  Native Event  size + +  + "]}," INotify Notifier process":{"type":"method","name":"process","children":[],"call":["event callback! "," read_events each "," read_events ","event notifier watchers delete ","event watcher_id ","event notifier watchers ","event notifier ","event flags include? ","event flags "]}," INotify Notifier run":{"type":"method","name":"run","children":[],"call":[" process "," loop ","@running synchronize ","Thread  current []= ","Thread  current "," closed? "]}," INotify Notifier watch":{"type":"method","name":"watch","children":[],"call":["Watcher  new "," watch ","event absolute_name ","event flags include? ! ","event flags include? ","event flags ","(send\n  (lvar :rec_flags) :&\n  (send\n    (lvar :event) :flags)) empty? ","rec_flags & ","callback call ","(send\n  (lvar :flags) :&\n  (send\n    (lvar :event) :flags)) empty? ! ","(send\n  (lvar :flags) :&\n  (send\n    (lvar :event) :flags)) empty? ","flags & ","flags include? ","(send\n  (lvar :flags) :-\n  (array\n    (sym :recursive))) | ","flags - ","dir close ","File  directory? ! ","File  directory? ","File  symlink? ","RECURSIVE_BLACKLIST  include? ","binary_d =~ ","d dup force_encoding ","d dup ","d respond_to? ","File  join ","dir each ","Dir  new ","Dir  [] each ","Dir  [] ","d == ","Dir  entries each ","Dir  entries ","RECURSIVE_BLACKLIST  include? ! ","d =~ ","Dir  glob each ","Dir  glob ","d dup force_encoding =~ ","Dir  new each ","event flags incluFile  join e? ! ","event flags incluFile  join e? ","(senFile  join \n  (lvar :rec_flags) :&\n  (senFile  join \n    (lvar :event) :flags)) empty? ","(senFile  join \n  (lvar :flags) :&\n  (senFile  join \n    (lvar :event) :flags)) empty? ! ","(senFile  join \n  (lvar :flags) :&\n  (senFile  join \n    (lvar :event) :flags)) empty? ","flags incluFile  join e? ","(senFile  join \n  (lvar :flags) :-\n  (array\n    (sym :recursive))) | ","File  join ir close ","Dir  new  close ","File  File  join irectory? ! ","File  Dir  new ectory? ! ","File  File  join irectory? ","File  Dir  new ectory? ","RECURSIVE_BLACKLIST  incluFile  join e? ","d dup force_encoding  =~ ","binary_File  join  =~ ","File  join  File  join up force_encoFile  join ing ","File  join  File  join up ","File  join  responFile  join _to? ","File  join ir each ","Dir  new  each ","File  join  == ","RECURSIVE_BLACKLIST  incluFile  join e? ! ","File  join  =~ ","File  join  File  join up force_encoFile  join ing =~ "]}," INotify Notifier initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","SystemCallError  new ","FFI  errno ","Failed to initialize inotify + ","@fd < ","Native  inotify_init ","IO  new ","fd < ","IO  pipe ","Mutex  new ","@handle autoclose= ","RUBY_ENGINE  == ","@pipe [] autoclose= ","@pipe [] ","Native  inotify_init  < ","@Native  inotify_init  < ","IO  new  autoclose= ","IO  pipe  [] autoclose= ","IO  pipe  [] "]}," INotify Native Flags from_mask":{"type":"method","name":"from_mask","children":[],"call":[]}," INotify Native Flags to_mask":{"type":"method","name":"to_mask","children":[],"call":[]}," INotify Event size":{"type":"method","name":"size","children":[],"call":["@native size + ","@native [] ","@native size "]}," INotify Event callback!":{"type":"method","name":"callback!","children":[],"call":[" watcher callback! "," watcher "]}," INotify Event initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","Exception  new ","@native [] & != ","@native [] & ","@native [] ","data [] gsub ","data [] ","@native size ","Native Event  new ","FFI MemoryPointer  from_string ","QueueOverflowError  new "," fix_encoding ","Native Event  new  [] & != ","Native Event  new  [] & ","Native Event  new  [] ","Native Event  new  size "]}," INotify Event consume":{"type":"method","name":"consume","children":[],"call":[]}," INotify Event flags":{"type":"method","name":"flags","children":[],"call":["Native Flags  from_mask ","@native [] "]}," INotify Event watcher":{"type":"method","name":"watcher","children":[],"call":["@notifier watchers [] ","@notifier watchers "]}," INotify Notifier readpartial":{"type":"method","name":"readpartial","children":[],"call":["@handle readpartial ","readable include? ","@pipe first "," select "," raise ","SystemCallError  new ","FFI  errno ","Error reading inotify events + ","buffer read_string ","size_read >= ","Native  read "," fd ","FFI MemoryPointer  new ","tries <= ","FFI  errno == "," to_io readpartial "," to_io "," class supports_ruby_io? "," class ","ex message =~ ","ex message ","FFI MemoryPointer  new  read_string ","Native  read  >= "]}," INotify Notifier close":{"type":"method","name":"close","children":[],"call":["@watchers clear ","@handle close "," stop "," raise ","SystemCallError  new ","FFI  errno ","Failed to properly close inotify socket + ","Native  close == ","Native  close "]}," INotify Notifier stop":{"type":"method","name":"stop","children":[],"call":["@running synchronize ","@pipe last write ","@pipe last ","Thread  current [] ","Thread  current "]}," INotify Notifier to_io":{"type":"method","name":"to_io","children":[],"call":["IO  new "," raise ","NotImplementedError  new ","RUBY_PLATFORM  =~ "," class supports_ruby_io? "," class "]}," INotify Notifier fd":{"type":"method","name":"fd","children":[],"call":["@handle fileno "]}," INotify Event fix_encoding":{"type":"method","name":"fix_encoding","children":[],"call":["name force_encoding ","name respond_to? "]}," INotify Event absolute_name":{"type":"method","name":"absolute_name","children":[],"call":["File  join "," name "," watcher path "," watcher "," name empty? "]}," INotify Notifier supports_ruby_io?":{"type":"method","name":"supports_ruby_io?","children":[],"call":[]}}