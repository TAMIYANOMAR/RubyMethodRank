{" Racc ParserClassGenerator define_actions":{"type":"method","name":"define_actions","children":[],"call":["c module_eval ","305 + ","rule ident ","c funcall ","rule action proc ","rule action ","rule action empty? ","@grammar each ","307 + ","306 + ","300 + ","c define_method ","c alias_method "]}," Racc ParserClassGenerator generate":{"type":"method","name":"generate","children":[],"call":[" define_actions ","c const_set ","table token_to_s_table ","table reduce_n ","table shift_n ","table token_value_table ","table reduce_table ","table nt_base ","table goto_pointer ","table goto_default ","table goto_check ","table goto_table ","table action_pointer ","table action_default ","table action_check ","table action_table ","Class  new ","@states state_transition_table "," define_aClass  new tions ","Class  new  Class  new onst_set ","@states state_transition_table  token_to_s_@states state_transition_table  ","table reduClass  new e_n ","@states state_transition_table  reduce_n ","@states state_transition_table  shift_n ","@states state_transition_table  token_value_@states state_transition_table  ","table reduClass  new e_table ","@states state_transition_table  reduce_@states state_transition_table  ","@states state_transition_table  nt_base ","@states state_transition_table  goto_pointer ","@states state_transition_table  goto_default ","table goto_Class  new heClass  new k ","@states state_transition_table  goto_check ","@states state_transition_table  goto_@states state_transition_table  ","table aClass  new tion_pointer ","@states state_transition_table  action_pointer ","table aClass  new tion_default ","@states state_transition_table  action_default ","table aClass  new tion_Class  new heClass  new k ","@states state_transition_table  action_check ","table aClass  new tion_table ","@states state_transition_table  action_@states state_transition_table  ","@states state_transition_@states state_transition_table  "]}," Racc ParserClassGenerator initialize":{"type":"method","name":"initialize","children":[],"call":["states grammar "]}," Racc StateTransitionTableGenerator act2actid":{"type":"method","name":"act2actid","children":[],"call":[" raise ","act class ","@states reduce_n * ","@states reduce_n ","@states shift_n ","act ruleid -@ ","act ruleid ","act goto_id "]}," Racc StateTransitionTableGenerator set_table":{"type":"method","name":"set_table","children":[],"call":["idx + ","arr size ","map []= ","chk []= ","tbl []= ","arr each_with_index ","ptr []= ","idx - ","map index ","map << ","- * ","arr size + ","upper + > ","map size ","upper + ","entries each ","b [] size <=> ","a [] size ","a [] ","b [] size ","b [] ","entries sort! ","a [] size -@ ","entries sort_by! with_index ","entries sort_by! ","map index  + ","- *  []= ","map index  - ","- *  index ","- *  << ","idx +  + > ","- *  size ","idx +  + "]}," Racc StateTransitionTableGenerator mkmapexp":{"type":"method","name":"mkmapexp","children":[],"call":["Regexp  compile ","map << ","offset > ","offset == ","ii - ","arr [] ! ","arr [] ","ii < ","i + ","i < ","arr size ","String  new ","String  new  << ","ii -  > ","ii -  == ","i +  - ","i +  < "]}," Racc StateTransitionTableGenerator addent":{"type":"method","name":"addent","children":[],"call":["all push ","ptr size - ","ptr size "," mkmapexp ","arr [] ","ptr push ","arr each_with_index ","arr size ","arr []  [] ","arr []  each_with_index ","arr []  size "]}," Racc StateTransitionTableGenerator gen_goto_tables":{"type":"method","name":"gen_goto_tables","children":[],"call":[" set_table "," addent ","tok ident - ","grammar nonterminal_base ","tok ident ","yypgoto push ","tmp compact empty? ","tmp compact ","tmp pop ","tmp empty? ","tmp last ","yydefgoto push ","default == ","tmp map! ","freq index ","max > ","freq max ","tmp []= ","state ident ","freq [] ","st ident ","state goto_table [] ","state goto_table ","@states each ","Array  new ","@states size ","grammar each_nonterminal ","t goto_default= ","t goto_pointer= ","t goto_check= ","t goto_table= ","tmp last ident  ","tmp lastate goto_table []  ","freq index  == ","Array  new  index ","freq max  > ","freq freq max  ","Array  new  max ","st ident ate ident ","state goto_table [] ate ident ","Array  new  [] ","st ident  ident ","state goto_table []  ident ","st ident ate goto_table [] ","state goto_table [] ate goto_table [] ","st ident ate goto_table ","state goto_table [] ate goto_table ","@st ident ates each ","@state goto_table [] ates each ","@st ident ates size ","@state goto_table [] ates size ","t goto_freq index = "]}," Racc StateTransitionTableGenerator gen_action_tables":{"type":"method","name":"gen_action_tables","children":[],"call":[" set_table "," addent ","state ident ","vector []= "," act2actid ","tok ident ","state action each ","state action ","yypact push ","state action empty? ","yydefact push ","state defact ","states each ","t action_pointer= ","t action_default= ","t action_check= ","t action_table= "]}," Racc StateTransitionTableGenerator token_table":{"type":"method","name":"token_table","children":[],"call":["h []= ","t ident ","grammar symboltable terminals each ","grammar symboltable terminals ","grammar symboltable "]}," Racc StateTransitionTableGenerator reduce_table":{"type":"method","name":"reduce_table","children":[],"call":["t push ","(str \"_reduce_\") intern ","rule action empty? ","rule action ","rule target ident ","rule target ","rule size ","idx == ","grammar each_with_index "]}," Racc StateTransitionTableGenerator generate":{"type":"method","name":"generate","children":[],"call":["t token_to_s_table= ","sym to_s ","@grammar symbols map ","@grammar symbols ","t nt_base= ","@grammar nonterminal_base ","t shift_n= ","@states shift_n ","t reduce_n= ","@states reduce_n ","t reduce_table= "," reduce_table ","t token_table= "," token_table "," gen_goto_tables "," gen_action_tables ","StateTransitionTable  new ","StateTransitionTable  new  StateTransitionTable  new oken_StateTransitionTable  new o_s_StateTransitionTable  new able= ","sym StateTransitionTable  new o_s ","StateTransitionTable  new  nStateTransitionTable  new _base= ","@grammar nonStateTransitionTable  new erminal_base ","StateTransitionTable  new  shifStateTransitionTable  new _n= ","@sStateTransitionTable  new aStateTransitionTable  new es shifStateTransitionTable  new _n ","StateTransitionTable  new  reduce_n= ","@sStateTransitionTable  new aStateTransitionTable  new es reduce_n ","StateTransitionTable  new  reduce_StateTransitionTable  new able= "," reduce_StateTransitionTable  new able ","StateTransitionTable  new  StateTransitionTable  new oken_StateTransitionTable  new able= "," StateTransitionTable  new oken_StateTransitionTable  new able "," gen_goStateTransitionTable  new o_StateTransitionTable  new ables "," gen_acStateTransitionTable  new ion_StateTransitionTable  new ables ","SStateTransitionTable  new aStateTransitionTable  new eTransiStateTransitionTable  new ionTable  new "]}," Racc StateTransitionTableGenerator initialize":{"type":"method","name":"initialize","children":[],"call":["states grammar "]}," Racc StateTransitionTable token_value_table":{"type":"method","name":"token_value_table","children":[],"call":["h []= ","sym value "," token_table each "," token_table "]}," Racc StateTransitionTable parser_class":{"type":"method","name":"parser_class","children":[],"call":["ParserClassGenerator  new generate ","ParserClassGenerator  new "]}," Racc StateTransitionTable initialize":{"type":"method","name":"initialize","children":[],"call":[" debug_parser= "," use_result_var= ","states grammar "]}," Racc StateTransitionTable generate":{"type":"method","name":"generate","children":[],"call":[]}," Racc RRconflict to_s":{"type":"method","name":"to_s","children":[],"call":[" sprintf ","@token to_s ","@low_prec ident ","@high_prec ident "]}," Racc RRconflict initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Racc SRconflict to_s":{"type":"method","name":"to_s","children":[],"call":[" sprintf ","@shift to_s ","@reduce ruleid "]}," Racc SRconflict initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Racc Error inspect":{"type":"method","name":"inspect","children":[],"call":[]}," Racc Accept inspect":{"type":"method","name":"inspect","children":[],"call":[]}," Racc Reduce decref":{"type":"method","name":"decref","children":[],"call":[" raise ","@refn < "]}," Racc Reduce incref":{"type":"method","name":"incref","children":[],"call":[]}," Racc Reduce inspect":{"type":"method","name":"inspect","children":[],"call":["@rule ident "]}," Racc Reduce ruleid":{"type":"method","name":"ruleid","children":[],"call":["@rule ident "]}," Racc Reduce initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Racc Shift inspect":{"type":"method","name":"inspect","children":[],"call":["@goto_state ident "]}," Racc Shift goto_id":{"type":"method","name":"goto_id","children":[],"call":["@goto_state ident "]}," Racc Shift initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Racc ActionTable each_shift":{"type":"method","name":"each_shift","children":[],"call":["@shift each "]}," Racc ActionTable shift":{"type":"method","name":"shift","children":[],"call":[" raise ","@shift [] ","i class ","i ident "," rai ident se ","@shi ident ft [] ","i ident  class ","i ident  i ident dent "]}," Racc ActionTable shift_n":{"type":"method","name":"shift_n","children":[],"call":["@shift size "]}," Racc ActionTable each_reduce":{"type":"method","name":"each_reduce","children":[],"call":["@reduce each "]}," Racc ActionTable reduce":{"type":"method","name":"reduce","children":[],"call":["r incref "," raise ","i inspect ","@reduce [] ","i class ","i ident ","@reduce []  inc@reduce [] ef ","r i ident ncref "," @reduce [] aise "," rai ident se ","i ident  i ident nspect ","@@reduce [] educe [] ","i ident  class ","i ident  i ident dent "]}," Racc ActionTable reduce_n":{"type":"method","name":"reduce_n","children":[],"call":["@reduce size "]}," Racc ActionTable init":{"type":"method","name":"init","children":[],"call":["Error  new ","Accept  new ","@shift push ","Shift  new ","@statetable each ","@reduce push ","Reduce  new ","@grammar each "]}," Racc ActionTable initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Racc Item each_la":{"type":"method","name":"each_la","children":[],"call":["tbl [] ","la [] == ","la [] ","i * + ","i * ","(irange\n  (int 0)\n  (int 7)) each ","0 upto ","la size - ","la size "]}," Racc Item initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Racc Goto inspect":{"type":"method","name":"inspect","children":[],"call":["@to_state ident ","@from_state ident "]}," Racc Goto initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Racc State n_rrconflicts":{"type":"method","name":"n_rrconflicts","children":[],"call":["@rrconf size "]}," Racc State n_srconflicts":{"type":"method","name":"n_srconflicts","children":[],"call":["@srconf size "]}," Racc State sr_conflict":{"type":"method","name":"sr_conflict","children":[],"call":["@srconf []= ","a push ","@srconf [] ","SRconflict  new ","@srSRconflict  new onf []= ","@srconf []  push ","@srSRconflict  new onf [] ","SRSRconflict  new onfliSRconflict  new t  new "]}," Racc State rr_conflict":{"type":"method","name":"rr_conflict","children":[],"call":["@rrconf []= ","a push ","@rrconf [] ","RRconflict  new ","@rrRRconflict  new onf []= ","@rrconf []  push ","@rrRRconflict  new onf [] ","RRRRconflict  new onfliRRconflict  new t  new "]}," Racc State la=":{"type":"method","name":"la=","children":[],"call":["r push ","Item  new ","la [] ","@rrules each "]}," Racc State rruleid":{"type":"method","name":"rruleid","children":[],"call":[" raise "," p "," puts ","@la_rules_i + ","@la_rules index ","rule ident "," ra@la_rules index se ","@la_rules_@la_rules index  + ","@la_rules @la_rules index ndex ","rule @la_rules index dent "]}," Racc State conflict?":{"type":"method","name":"conflict?","children":[],"call":[]}," Racc State check_la":{"type":"method","name":"check_la","children":[],"call":["la_rules concat ","i ident ","r map ","la_rules size ","s compact! ","r size > ","r size ","s empty? ! ","s empty? ","r empty? ","r push ","ptr rule ","t ident == ","t ident ","s []= ","t terminal? ","ptr dereference ","@closure each ","la_rules concaptr dereference  ","i idenptr dereference  ","s compacptr dereference ! ","s empptr dereference y? ! ","s empptr dereference y? ","r empptr dereference y? ","pptr dereference r rule ","ptr dereference  idenptr dereference  == ","ptr dereference  idenptr dereference  ","ptr dereference  ptr dereference erminal? ","pptr dereference r dereference "]}," Racc State make_closure":{"type":"method","name":"make_closure","children":[],"call":["set to_a ","set update_a ","t expand ","t nonterminal? ","ptr dereference ","set add ","core each ","ISet  new ","septr dereference  ptr dereference o_a ","ISet  new  to_a ","septr dereference  updaptr dereference e_a ","ISet  new  update_a ","ptr dereference  expand ","ptr dereference  nonptr dereference erminal? ","pptr dereference r dereference ","septr dereference  add ","ISet  new  add ","ISeptr dereference   new "]}," Racc State ==":{"type":"method","name":"==","children":[],"call":["@ident == ","oth ident "]}," Racc State inspect":{"type":"method","name":"inspect","children":[],"call":[]}," Racc State initialize":{"type":"method","name":"initialize","children":[],"call":[" make_closure "]}," Racc States check_useless":{"type":"method","name":"check_useless","children":[],"call":["@symboltable [] useless= ","@symboltable [] ","used [] ","@symboltable nt_base upto ","@symboltable nt_max - ","@symboltable nt_max ","@symboltable nt_base ","used []= ","t ident ","act rule target ","act rule ","act rule useless= ","act refn == ","act refn ","act ! ","@actions each_reduce ","@symbolact rule target able [] useless= ","@symbolact rule target able [] ","@symbolact rule target able nact rule target _base upact rule target o ","@symbolact rule target able nact rule target _max - ","@symbolact rule target able nact rule target _max ","@symbolact rule target able nact rule target _base ","act rule target  idenact rule target  ","acact rule target  rule act rule target argeact rule target  ","acact rule target  rule ","acact rule target  rule useless= ","acact rule target  refn == ","acact rule target  refn ","acact rule target  ! ","@acact rule target ions each_reduce "]}," Racc States pack":{"type":"method","name":"pack","children":[],"call":["@actions error ","state defact ","state defact= ","a == ","act delete_if ","state defact == ","state defact ! ","@actions reduce ","arr index ","i > ","arr max ","arr [] ","a ruleid ","a kind_of? ","act each ","Array  new ","@grammar size ","state action ","@actions e@actions reduce @actions reduce o@actions reduce  ","@actionarr index  error ","@actarr max ons error ","@state action ions error ","arr index tate defact ","state defstate action  ","arr index tate defact= ","state defstate action = ","act delete_arr max f ","state action  delete_if ","arr index tate defact == ","state defstate action  == ","arr index tate defact ! ","state defstate action  ! ","@actions @actions reduce educe ","@actionarr index  reduce ","@actarr max ons reduce ","@state action ions reduce ","a@actions reduce @actions reduce  index ","arr arr max ndex ","Array  new  index ","arr max  > ","a@actions reduce @actions reduce  max ","Array  new  max ","a@actions reduce @actions reduce  [] ","Array  new  [] ","a @actions reduce uleid ","a rulearr max d ","a karr max nd_of? ","state action  each ","A@actions reduce @actions reduce ay  new ","@g@actions reduce amma@actions reduce  size ","@grammar arr index ize ","@grammar sarr max ze ","arr index tate action ","state actarr max on ","state state action ion "]}," Racc States set_accept":{"type":"method","name":"set_accept","children":[],"call":["acc_state defact= ","@actions accept ","acc_state goto_table clear ","acc_state goto_table ","acc_state action clear ","acc_state action ","targ_state action [] goto_state ","targ_state action [] ","targ_state action ","init_state action [] goto_state ","init_state action [] ","init_state action ","@states [] goto_table [] ","@grammar start ","@states [] goto_table ","@states [] ","@symboltable anchor ","targ_state action [] goto_state  defact= ","targ_state action [] goto_state  goto_table clear ","targ_state action [] goto_state  goto_table ","targ_state action [] goto_state  action clear ","targ_state action [] goto_state  action ","init_state action [] goto_state  action [] goto_state ","init_state action [] goto_state  action [] ","init_state action [] goto_state  action ","@states [] goto_table []  action [] goto_state ","@states [] goto_table []  action [] ","@states [] goto_table []  action ","@symboltable @symboltable anchor or "]}," Racc States do_resolve_sr":{"type":"method","name":"do_resolve_sr","children":[],"call":[" puts ","ret id2name ","rprec > "," raise ","ASSOC  [] ","rtok assoc ","rprec == ","stok precedence ","rtok precedence ","rtok precedence  > ","rtok precedence  == "]}," Racc States resolve_sr":{"type":"method","name":"resolve_sr","children":[],"call":["state action []= ","@actions shift ","state action ","state sr_conflict ","act rule ","act decref ","@actions error "," do_resolve_sr ","act rule precedence "," raise ","act class "," print ","v inspect ","k inspect ","state action each "," p "," puts ","act kind_of? ","state action [] ","state goto_table [] ","state goto_table ","s each ","state state action [] ion []= ","@state action [] ions shift ","state state action [] ion ","state action []  rule ","state action []  decref ","@state action [] ions error ","state action []  rule precedence ","state action []  class ","state state action [] ion each ","state action []  kind_of? ","state state action [] ion [] ","state state goto_table [] _table [] ","state state goto_table [] _table "]}," Racc States resolve_rr":{"type":"method","name":"resolve_rr","children":[],"call":["state action []= ","@actions reduce ","item rule ","state action ","state rr_conflict ","act rule "," raise ","act class ","act kind_of? ","state action [] ","item each_la ","r each ","state state action [] ion []= ","@state action [] ions reduce ","state state action [] ion ","state action []  rule ","state action []  class ","state action []  kind_of? ","state state action [] ion [] "]}," Racc States resolve":{"type":"method","name":"resolve","children":[],"call":["state defact= ","@actions reduce ","state rrules [] ","state rrules ","state action []= ","@actions shift ","state goto_table [] ","state goto_table ","state action ","state stokens each ","state stokens ","state rrules empty? "," resolve_sr "," resolve_rr ","state ritems ","state conflict? "]}," Racc States each_t":{"type":"method","name":"each_t","children":[],"call":["tbl [] ","set [] == ","set [] ","i * + ","i * ","(irange\n  (int 0)\n  (int 7)) each ","0 upto ","set size "]}," Racc States printb":{"type":"method","name":"printb","children":[],"call":[" puts "," print "," each_t "]}," Racc States print_tab_i":{"type":"method","name":"print_tab_i","children":[],"call":[" print "," each_t "," p ","rel [] ","idx [] inspect ","idx [] ","tab [] "]}," Racc States print_tab":{"type":"method","name":"print_tab","children":[],"call":[" puts "," print "," each_t "," p ","rel [] ","idx [] inspect ","idx [] ","tab each_with_index "]}," Racc States print_atab":{"type":"method","name":"print_atab","children":[],"call":[" p "," printf ","idx [] inspect ","idx [] ","tab each_with_index "]}," Racc States traverse":{"type":"method","name":"traverse","children":[],"call":["map [] ","i == ","index []= ","vertices pop ","index [] == ","index [] ","index [] > "," traverse ","rp each ","relation [] ","vertices size ","vertices push ","relation []  each "]}," Racc States digraph":{"type":"method","name":"digraph","children":[],"call":[" traverse ","relation [] ","index [] ! ","index [] ","index each_index ","n + ","Array  new ","relation size ","relatiorelation size  [] ","Array  new  [] ! ","irelation size dex [] ! ","Array  new  [] ","irelation size dex [] ","Array  new  each_Array  new  ","irelation size dex each_irelation size dex ","relation size  + ","Array  relation size ew ","relatiorelation size  size "]}," Racc States transpose":{"type":"method","name":"transpose","children":[],"call":[" addrel ","arr each ","rel each_with_index ","Array  new ","rel size ","Array  Array  new  "]}," Racc States record_path":{"type":"method","name":"record_path","children":[],"call":["goto to_state ","path push ","st gotos [] ","st gotos ","rule symbols each ","rule symbols ","goto to_goto to_state ate ","st gotos []  to_state ","goto to_state  gotos [] ","st st gotos [] s [] ","goto to_state  gotos ","st st gotos [] s "]}," Racc States addrel":{"type":"method","name":"addrel","children":[],"call":["tbl []= ","a push ","tbl [] ","tbl []  push "]}," Racc States create_tmap":{"type":"method","name":"create_tmap","children":[],"call":["Array  new "]}," Racc States lookahead":{"type":"method","name":"lookahead","children":[],"call":[" print_tab "," puts ","f [] ","g ident ","la [] ","arr each ","lookback each_with_index "," create_tmap ","la_rules size "," digraph "," transpose ","includes push ","edge empty? ","g symbol nullable? ","g symbol ","edge push ","g symbol terminal? ","path reverse_each "," addrel ","st rruleid ","ptr rule ","st conflict? ","goto from_state ","lastgoto to_state ","path last "," record_path ","goto symbol heads each ","goto symbol heads ","goto symbol ","gotos each ","Array  new ","reads push ","goto to_state gotos [] ident ","goto to_state gotos [] ","goto to_state gotos ","goto to_state ","t nullable? ","1 << ","t ident ","goto ident ","t terminal? ","goto to_state goto_table each ","goto to_state goto_table ","gotos size ","state check_la ","@states each "," p "," print ","gotos each_with_index "," create_tmap  [] ","Array  new  each_with_index "," create_tmap _rules size "," transpose  push ","g symbol nul create_tmap ble? "," record_path  reverse_each ","goto from_state  rruleid ","lastgoto to_state  rruleid ","goto from_state  conflict? ","lastgoto to_state  conflict? ","st con create_tmap lict? ","goto from_goto from_state ate ","goto from_lastgoto to_state ate ","goto  create_tmap rom_state "," create_tmap stgoto to_state ","lagoto from_state goto to_goto from_state ate ","lalastgoto to_state goto to_lastgoto to_state ate ","path last  to_state ","path  create_tmap st ","path lagoto from_state  ","path lalastgoto to_state  "," record_path  last "," record_ record_path  ","goto to_goto from_state ate gotos [] ident ","goto to_lastgoto to_state ate gotos [] ident ","goto to_goto from_state ate gotos [] ","goto to_lastgoto to_state ate gotos [] ","goto to_goto from_state ate gotos ","goto to_lastgoto to_state ate gotos ","goto to_goto from_state ate ","goto to_lastgoto to_state ate ","t nul create_tmap ble? ","goto to_goto from_state ate goto_table each ","goto to_lastgoto to_state ate goto_table each ","goto to_goto from_state ate goto_table ","goto to_lastgoto to_state ate goto_table ","state check_ create_tmap  ","goto from_state ate check_la ","lastgoto to_state ate check_la ","@goto from_state ates each ","@lastgoto to_state ates each "]}," Racc States compute_dfa":{"type":"method","name":"compute_dfa","children":[],"call":[" check_useless "," pack ","@states each "," set_accept "," resolve ","state la= "," lookahead ","state  lookahead = "]}," Racc States dfa":{"type":"method","name":"dfa","children":[],"call":[" compute_dfa "," nfa "]}," Racc States fingerprint":{"type":"method","name":"fingerprint","children":[],"call":["(send\n  (lvar :arr) :map) pack ","i ident ","arr map "]}," Racc States core_to_state":{"type":"method","name":"core_to_state","children":[],"call":[" puts ","dest ident ","@statecache []= ","@states push ","State  new ","@states size ","dest core join ","dest core ","@statecache [] "," fingerprint ","State  new  ident ","@statecache []  ident ","State  new  core join ","@statecache []  core join ","State  new  core ","@statecache []  core "]}," Racc States addsym":{"type":"method","name":"addsym","children":[],"call":["s add ","table []= ","ISet  new ","table [] ","ISet  new  add ","table []  add "]}," Racc States generate_states":{"type":"method","name":"generate_states","children":[],"call":[" raise "," sprintf ","state ptrs [] rule ident ","state ptrs [] rule ","state ptrs [] ","state ptrs ","state ident ","state closure size == ","state closure size ","state closure ","state ident == ","dest ident "," puts ","state gotos []= ","state gotos ","@gotos push ","sym nonterminal? ","Goto  new ","@gotos size ","state goto_table []= ","state goto_table "," core_to_state ","core to_a ","table each "," addsym ","ptr next ","ptr dereference ","state closure each ","state ptrs [] rule @gotos size ent ","state @gotos size ent ","state @gotos size ent == ","dest @gotos size ent "," core_to_state  ident ","state Goto  new otos []= ","state Goto  new otos ","@Goto  new otos push ","ptr dereference  nonterminal? ","@Goto  new otos size ","state Goto  new oto_table []= ","state Goto  new oto_table "," addptr dereference  "]}," Racc States compute_nfa":{"type":"method","name":"compute_nfa","children":[],"call":["@actions init "," generate_states ","@states [] ","cur < ","@states size "," core_to_state ","@grammar [] ptrs [] ","@grammar [] ptrs ","@grammar [] ","@grammar init "]}," Racc States nfa":{"type":"method","name":"nfa","children":[],"call":[" compute_nfa "]}," Racc States state_transition_table":{"type":"method","name":"state_transition_table","children":[],"call":["StateTransitionTable  generate "," dfa "]}," Racc States n_rrconflicts":{"type":"method","name":"n_rrconflicts","children":[],"call":["sum + ","st n_rrconflicts "," inject "]}," Racc States rrconflict_exist?":{"type":"method","name":"rrconflict_exist?","children":[],"call":[" n_rrconflicts != "," n_rrconflicts "]}," Racc States n_srconflicts":{"type":"method","name":"n_srconflicts","children":[],"call":["sum + ","st n_srconflicts "," inject "]}," Racc States srconflict_exist?":{"type":"method","name":"srconflict_exist?","children":[],"call":[" n_srconflicts != "," n_srconflicts "]}," Racc States should_report_srconflict?":{"type":"method","name":"should_report_srconflict?","children":[],"call":[" n_srconflicts != ","@grammar n_expected_srconflicts "," n_srconflicts "," srconflict_exist? "]}," Racc States each_index":{"type":"method","name":"each_index","children":[],"call":["@states each_index "]}," Racc States each_state":{"type":"method","name":"each_state","children":[],"call":["@states each "]}," Racc States []":{"type":"method","name":"[]","children":[],"call":["@states [] "]}," Racc States inspect":{"type":"method","name":"inspect","children":[],"call":[]}," Racc States size":{"type":"method","name":"size","children":[],"call":["@states size "]}," Racc States initialize":{"type":"method","name":"initialize","children":[],"call":["ActionTable  new ","debug_flags prec ","debug_flags la ","debug_flags state ","grammar symboltable "]}," Racc SourceText location":{"type":"method","name":"location","children":[],"call":[]}," Racc SourceText to_s":{"type":"method","name":"to_s","children":[],"call":[" location "]}," Racc SourceText initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Racc ParserFileGenerator detab":{"type":"method","name":"detab","children":[],"call":["  * ","len - ","ts - ","(send\n  (send\n    (back-ref :$`) :size) :+\n  (lvar :add)) % ","$` size + ","$` size ","str gsub ","ts -  - "]}," Racc ParserFileGenerator indent_re":{"type":"method","name":"indent_re","children":[],"call":["RE_CACHE  [] "]}," Racc ParserFileGenerator n_indent":{"type":"method","name":"n_indent","children":[],"call":["line slice size ","line slice "]}," Racc ParserFileGenerator minimum_indent":{"type":"method","name":"minimum_indent","children":[],"call":["(send\n  (lvar :lines) :map) min "," n_indent ","lines map "]}," Racc ParserFileGenerator unindent_auto":{"type":"method","name":"unindent_auto","children":[],"call":["(send\n  (lvar :lines) :map) join "," detab sub rstrip + "," detab sub rstrip "," detab sub "," indent_re "," detab ","lines map "," minimum_indent ","str to_a ","str lines to_a ","str lines ","(se minimum_indent d\n  (lvar :li minimum_indent es) :map) joi minimum_indent  ","(send\n  (lvar :str to_a ) :map) join ","(send\n  (lvar :str lines to_a ) :map) join "," i minimum_indent de minimum_indent t_re ","li minimum_indent es map ","str to_a  map ","str lines to_a  map "," mi minimum_indent imum_i minimum_indent de minimum_indent t ","str li minimum_indent es to_a ","str str to_a  to_a ","str str lines to_a  to_a ","str li minimum_indent es ","str str to_a  ","str str lines to_a  "]}," Racc ParserFileGenerator make_delimiter":{"type":"method","name":"make_delimiter","children":[],"call":["body index "]}," Racc ParserFileGenerator remove_blank_lines":{"type":"method","name":"remove_blank_lines","children":[],"call":["SourceText  new ","src filename ","body slice! ","src lineno ","src text dup ","src text ","src filenabody slice! e ","src text dup  slice! ","src src lineno no "]}," Racc ParserFileGenerator actions":{"type":"method","name":"actions","children":[],"call":[" line ","@f printf "," unindent_auto ","src text ","rule ident "," remove_blank_lines ","src lineno - ","src lineno ","src filename "," make_delimiter ","@params convert_line? ","SourceText  new ","rule action source ","rule action ","@params omit_action_call? ","rule action empty? ","@grammar each ","@params result_var? "," raise ","rule action source? "," remove_blank_lines  text "," remove_blank_lines  lineno - "," remove_blank_lines  lineno "," remove_blank_lines  filename "," make_ make_delimiter iter "]}," Racc ParserFileGenerator string_list":{"type":"method","name":"string_list","children":[],"call":[" line ","@f print ","s dump ","list each "]}," Racc ParserFileGenerator sym_int_hash":{"type":"method","name":"sym_int_hash","children":[],"call":[" line ","@f printf ","sym serialize ","@f print ","(send\n  (send\n    (lvar :h) :to_a) :sort_by) each ","h to_a sort_by ","h to_a "]}," Racc ParserFileGenerator i_i_sym_list":{"type":"method","name":"i_i_sym_list","children":[],"call":[" line ","@f printf ","mid inspect ","@f print ","table each_slice "]}," Racc ParserFileGenerator serialize_integer_list_std":{"type":"method","name":"serialize_integer_list_std","children":[],"call":[" line ","@f print ","(send\n  (lvar :ns) :map) join "," sprintf ","n to_s ","ns map ","table each_slice "]}," Racc ParserFileGenerator serialize_integer_list_compressed":{"type":"method","name":"serialize_integer_list_compressed","children":[],"call":["@f print ","table size "," line ","buf empty? ","buf size > ","buf size ","buf << << ","i to_s ","buf << ","table each ","String  new ","String  new  empty? ","String  new  size > ","String  new  size ","String  new  << << ","String  new  << "]}," Racc ParserFileGenerator integer_list":{"type":"method","name":"integer_list","children":[],"call":[" serialize_integer_list_std "," serialize_integer_list_compressed ","table size > ","table size "," line ","@f print ","(send\n  (lvar :ns) :map) join "," sprintf ","n to_s ","ns map ","table each_slice "]}," Racc ParserFileGenerator state_transition_table":{"type":"method","name":"state_transition_table","children":[],"call":[" actions "," line ","table debug_parser "," string_list ","table token_to_s_table ","@f print "," unindent_auto ","table use_result_var ","table nt_base "," sym_int_hash ","table token_table ","table shift_n ","table reduce_n "," i_i_sym_list ","table reduce_table "," integer_list ","table goto_default ","table goto_pointer ","table goto_check ","table goto_table ","table action_default ","table action_pointer ","table action_check ","table action_table ","table debug_parser= ","@params debug_parser? ","table use_result_var= ","@params result_var? ","@states state_transition_table ","@states state_transition_table  debug_parser ","@states state_transition_table  token_to_s_@states state_transition_table  ","@states state_transition_table  use_result_var ","@states state_transition_table  nt_base ","@states state_transition_table  token_@states state_transition_table  ","@states state_transition_table  shift_n ","@states state_transition_table  reduce_n ","@states state_transition_table  reduce_@states state_transition_table  ","@states state_transition_table  goto_default ","@states state_transition_table  goto_pointer ","@states state_transition_table  goto_check ","@states state_transition_table  goto_@states state_transition_table  ","@states state_transition_table  action_default ","@states state_transition_table  action_pointer ","@states state_transition_table  action_check ","@states state_transition_table  action_@states state_transition_table  ","@states state_transition_table  debug_parser= ","@states state_transition_table  use_result_var= ","@states state_transition_@states state_transition_table  "]}," Racc ParserFileGenerator put_state_transition_table":{"type":"method","name":"put_state_transition_table","children":[],"call":[" state_transition_table "]}," Racc ParserFileGenerator unique_separator":{"type":"method","name":"unique_separator","children":[],"call":["@used_separator []= ","sep concat "," sprintf "," rand ","@used_separator key? ","String  new ","@used_String  new arator []= ","String  new  concat ","@used_String  new arator key? "]}," Racc ParserFileGenerator make_separator":{"type":"method","name":"make_separator","children":[],"call":["src text index ","src text "," unique_separator ","src filename "," unique_ unique_separator arator "]}," Racc ParserFileGenerator replace_location":{"type":"method","name":"replace_location","children":[],"call":["@f puts ","src lineno ","src filename ","@f print "," toplevel? "," make_separator "," make_ make_separator arator "]}," Racc ParserFileGenerator toplevel?":{"type":"method","name":"toplevel?","children":[],"call":["@cref empty? "]}," Racc ParserFileGenerator indent":{"type":"method","name":"indent","children":[],"call":["@f print ","   * ","@cref size "]}," Racc ParserFileGenerator cref_pop":{"type":"method","name":"cref_pop","children":[],"call":["@cref pop "]}," Racc ParserFileGenerator cref_push":{"type":"method","name":"cref_push","children":[],"call":["@cref push "]}," Racc ParserFileGenerator init_line_conversion_system":{"type":"method","name":"init_line_conversion_system","children":[],"call":[]}," Racc ParserFileGenerator line":{"type":"method","name":"line","children":[],"call":["@f puts "]}," Racc ParserFileGenerator put":{"type":"method","name":"put","children":[],"call":["@f puts ","src text "," replace_location "]}," Racc ParserFileGenerator footer":{"type":"method","name":"footer","children":[],"call":[" put ","@params convert_line_all? "," line ","@params footer each ","@params footer "]}," Racc ParserFileGenerator inner":{"type":"method","name":"inner","children":[],"call":[" put ","@params convert_line? "," line ","@params inner each ","@params inner "]}," Racc ParserFileGenerator header":{"type":"method","name":"header","children":[],"call":[" put ","@params convert_line_all? "," line ","@params header each ","@params header "]}," Racc ParserFileGenerator parser_class":{"type":"method","name":"parser_class","children":[],"call":[" cref_pop "," line "," indent ","mods reverse_each "," cref_push ","mods each ","mods pop ","classname split ","classname split  reverse_each ","classname split  each ","classname split  pop "]}," Racc ParserFileGenerator require":{"type":"method","name":"require","children":[],"call":[" line "]}," Racc ParserFileGenerator embed_library":{"type":"method","name":"embed_library","children":[],"call":[" line ","src filename "," put ","@params convert_line? "]}," Racc ParserFileGenerator runtime_source":{"type":"method","name":"runtime_source","children":[],"call":["SourceText  new "]}," Racc ParserFileGenerator notice":{"type":"method","name":"notice","children":[],"call":[" line ","@params filename ","@params frozen_strings? "]}," Racc ParserFileGenerator shebang":{"type":"method","name":"shebang","children":[],"call":[" line ","#! + ","path == "]}," Racc ParserFileGenerator parser_file":{"type":"method","name":"parser_file","children":[],"call":[" footer "," state_transition_table "," inner "," parser_class ","@params superclass ","@params classname "," header "," require "," embed_library "," runtime_source ","@params embed_runtime? "," line "," notice "," shebang ","@params interpreter ","@params make_executable? "]}," Racc ParserFileGenerator generate_parser_file":{"type":"method","name":"generate_parser_file","children":[],"call":["File  chmod ","@params make_executable? "," parser_file ","File  open "," init_line_conversion_system "]}," Racc ParserFileGenerator generate_parser":{"type":"method","name":"generate_parser","children":[],"call":["string_io read ","string_io rewind "," parser_file "," init_line_conversion_system ","StringIO  new ","StringIO  new  read ","StringIO  new  rewind "]}," Racc ParserFileGenerator initialize":{"type":"method","name":"initialize","children":[],"call":["states grammar "]}," Racc ParserFileGenerator Params initialize":{"type":"method","name":"initialize","children":[],"call":[" interpreter= "," make_executable= "," embed_runtime= "," convert_line_all= "," convert_line= "," debug_parser= "," footer= "," inner= "," header= "," result_var= "," omit_action_call= "," superclass= "," classname= "," filename= "," frozen_strings= "]}," Racc ParserFileGenerator Params bool_attr":{"type":"method","name":"bool_attr","children":[],"call":[]}," Racc Parser token_to_str":{"type":"method","name":"token_to_str","children":[],"call":[" class Racc_token_to_s_table  [] "," class "]}," Racc Parser racc_token2str":{"type":"method","name":"racc_token2str","children":[],"call":[" raise "," class Racc_token_to_s_table  [] "," class "]}," Racc Parser racc_print_states":{"type":"method","name":"racc_print_states","children":[],"call":["out puts ","out print ","s each "]}," Racc Parser racc_print_stacks":{"type":"method","name":"racc_print_stacks","children":[],"call":["out puts ","out print ","v [] inspect ","v [] "," racc_token2str ","t [] ","t each_index "]}," Racc Parser racc_next_state":{"type":"method","name":"racc_next_state","children":[],"call":["@racc_debug_out puts "," racc_print_states "]}," Racc Parser racc_e_pop":{"type":"method","name":"racc_e_pop","children":[],"call":["@racc_debug_out puts "," racc_print_stacks "," racc_print_states "]}," Racc Parser racc_accept":{"type":"method","name":"racc_accept","children":[],"call":["@racc_debug_out puts "]}," Racc Parser racc_reduce":{"type":"method","name":"racc_reduce","children":[],"call":["@racc_debug_out puts "," racc_print_stacks ","out puts "," racc_token2str ","out print ","toks each ","toks empty? "]}," Racc Parser racc_shift":{"type":"method","name":"racc_shift","children":[],"call":["@racc_debug_out puts "," racc_print_stacks "," racc_token2str "]}," Racc Parser racc_read_token":{"type":"method","name":"racc_read_token","children":[],"call":["@racc_debug_out puts ","val inspect ","@racc_debug_out print "," racc_token2str ","tok inspect "]}," Racc Parser yyerrok":{"type":"method","name":"yyerrok","children":[],"call":[]}," Racc Parser yyaccept":{"type":"method","name":"yyaccept","children":[],"call":[" throw "]}," Racc Parser yyerror":{"type":"method","name":"yyerror","children":[],"call":[" throw "]}," Racc Parser on_error":{"type":"method","name":"on_error","children":[],"call":[" raise "," sprintf "," token_to_str ","val inspect "]}," Racc Parser _racc_do_reduce":{"type":"method","name":"_racc_do_reduce","children":[],"call":["goto_default [] ","goto_check [] == ","goto_check [] ","goto_table [] ","i >= ","state [] ","goto_pointer [] ","reduce_to - "," racc_reduce ","tstack push ","vstack push "," __send__ ","tmp_v [] ","state []= ","len -@ ","vstack []= ","tstack []= ","vstack [] ","tstack [] ","reduce_table [] ","i + ","act * ","goto_pointer []  >= ","act *  >= ","goto_pogoto_pointer [] nter [] ","goto_poact * nter [] ","reduce_table []  - ","vstack []  [] ","reduce_table []  -@ ","goto_pointer []  + ","act *  + "]}," Racc Parser _racc_evalact":{"type":"method","name":"_racc_evalact","children":[],"call":[" racc_next_state ","@racc_state [] "," raise ","act inspect "," racc_e_pop ","@racc_tstack pop ","@racc_vstack pop ","@racc_state pop "," throw ","@racc_state size <= ","@racc_state size ","action_check [] == ","action_check [] ","action_table [] ","i >= ","action_pointer [] ","@racc_t == "," on_error ","arg [] ","act == ","reduce_n -@ ","@racc_vstack [] "," racc_accept ","@racc_state push "," _racc_do_reduce "," catch ","act > ","act < "," racc_shift ","@racc_tstack push ","@racc_vstack push ","@racc_error_status > ","@racc_t <= "," raaction_pointer [] se ","action_table []  inspect ","act action_pointer [] nspect ","@racc_state saction_pointer [] ze <= ","@racc_state saction_pointer [] ze ","action_table [] ion_check [] == ","actaction_pointer [] on_check [] == ","action_table [] ion_check [] ","actaction_pointer [] on_check [] ","action_table [] ion_table [] ","actaction_pointer [] on_table [] ","action_pointer []  >= ","action_table [] ion_pointer [] ","actaction_pointer [] on_poaction_pointer [] nter [] ","action_table []  == ","action_table []  > ","action_table []  < "," racc_shaction_pointer [] ft "]}," Racc Parser _racc_yyparse_rb":{"type":"method","name":"_racc_yyparse_rb","children":[],"call":[" _racc_evalact ","action_default [] ","@racc_state [] ","action_check [] == ","action_check [] ","action_table [] ","i >= ","@racc_t == ","@racc_read_next ! ","(lvasgn :i\n  (send\n    (lvar :action_pointer) :[]\n    (send\n      (ivar :@racc_state) :[]\n      (int -1)))) ! ","action_pointer [] ","token_table [] ","recv __send__ "," catch "," _racc_init_sysvars "," _racc_eval _racc_evalact  "," _racc_evalaction_default []  "," _racc_evalaction_table []  "," _racc_evalact ion_default [] ","action_default [] ion_default [] ","action_table [] ion_default [] ","actaction_pointer [] on_default [] "," _racc_evalact ion_check [] == ","action_default [] ion_check [] == ","action_table [] ion_check [] == ","actaction_pointer [] on_check [] == "," _racc_evalact ion_check [] ","action_default [] ion_check [] ","action_table [] ion_check [] ","actaction_pointer [] on_check [] "," _racc_evalact ion_table [] ","action_default [] ion_table [] ","action_table [] ion_table [] ","actaction_pointer [] on_table [] ","action_pointer []  >= ","(lvasgn :i\n  (send\n    (lvar : _racc_evalact ion_pointer) :[]\n    (send\n      (ivar :@racc_state) :[]\n      (int -1)))) ! ","(lvasgn :i\n  (send\n    (lvar :action_default [] ion_pointer) :[]\n    (send\n      (ivar :@racc_state) :[]\n      (int -1)))) ! ","(lvasgn :i\n  (send\n    (lvar :action_table [] ion_pointer) :[]\n    (send\n      (ivar :@racc_state) :[]\n      (int -1)))) ! ","(lvasgn :action_pointer [] \n  (send\n    (lvar :actaction_pointer [] on_poaction_pointer [] nter) :[]\n    (send\n      (action_pointer [] var :@racc_state) :[]\n      (action_pointer [] nt -1)))) ! "," _racc_evalact ion_pointer [] ","action_default [] ion_pointer [] ","action_table [] ion_pointer [] ","actaction_pointer [] on_poaction_pointer [] nter [] "," _racc_action_pointer [] naction_pointer [] t_sysvars "]}," Racc Parser yyparse":{"type":"method","name":"yyparse","children":[],"call":[" __send__ "," _racc_setup "]}," Racc Parser _racc_do_parse_rb":{"type":"method","name":"_racc_do_parse_rb","children":[],"call":[" _racc_evalact ","action_default [] ","@racc_state [] ","action_check [] == ","action_check [] ","action_table [] ","i >= "," racc_read_token ","token_table [] "," next_token ","@racc_t != ","action_pointer [] "," catch "," _racc_init_sysvars "," _racc_eval _racc_evalact  "," _racc_evalaction_default []  "," _racc_evalaction_table []  "," _racc_evalact ion_default [] ","action_default [] ion_default [] ","action_table [] ion_default [] ","actaction_pointer [] on_default [] "," _racc_evalact ion_check [] == ","action_default [] ion_check [] == ","action_table [] ion_check [] == ","actaction_pointer [] on_check [] == "," _racc_evalact ion_check [] ","action_default [] ion_check [] ","action_table [] ion_check [] ","actaction_pointer [] on_check [] "," _racc_evalact ion_table [] ","action_default [] ion_table [] ","action_table [] ion_table [] ","actaction_pointer [] on_table [] ","action_pointer []  >= "," _racc_evalact ion_pointer [] ","action_default [] ion_pointer [] ","action_table [] ion_pointer [] ","actaction_pointer [] on_poaction_pointer [] nter [] "," _racc_action_pointer [] naction_pointer [] t_sysvars "]}," Racc Parser next_token":{"type":"method","name":"next_token","children":[],"call":[" raise "," class "]}," Racc Parser do_parse":{"type":"method","name":"do_parse","children":[],"call":[" __send__ "," _racc_setup "]}," Racc Parser _racc_init_sysvars":{"type":"method","name":"_racc_init_sysvars","children":[],"call":[]}," Racc Parser _racc_setup":{"type":"method","name":"_racc_setup","children":[],"call":["arg []= ","arg size < ","arg size "," class "]}," Racc Parser racc_runtime_type":{"type":"method","name":"racc_runtime_type","children":[],"call":[]}," Racc LogFileGenerator symbol_locations":{"type":"method","name":"symbol_locations","children":[],"call":["(send\n  (block\n    (send\n      (lvar :locs) :map)\n    (args\n      (arg :loc))\n    (send\n      (send\n        (lvar :loc) :rule) :ident)) :reject) uniq ","n == ","(send\n  (lvar :locs) :map) reject ","loc rule ident ","loc rule ","locs map "]}," Racc LogFileGenerator output_token":{"type":"method","name":"output_token","children":[],"call":["out printf "," symbol_locations join "," symbol_locations ","t locate ","t ident ","t to_s ","@grammar each_terminal ","out print ","t heads ","@grammar each_nonterminal "]}," Racc LogFileGenerator output_rule":{"type":"method","name":"output_rule","children":[],"call":["out printf ","rl symbols join ","rl symbols ","rl target to_s ","rl target ","rl ident ","rl ident != ","@debug_flags any? ","@grammar each ","out print "]}," Racc LogFileGenerator outrrconf":{"type":"method","name":"outrrconf","children":[],"call":["f printf ","r target to_s ","r target ","r ident ","c token to_s ","c token ","c low_prec ","confs each ","f pc low_prec intf ","c low_prec  tac low_prec get to_s ","c low_prec  tac low_prec get ","c low_prec  ident ","c low_pc low_prec ec "]}," Racc LogFileGenerator outsrconf":{"type":"method","name":"outsrconf","children":[],"call":["f printf ","r target to_s ","r target ","r ident ","c shift to_s ","c shift ","c reduce ","confs each ","f pc reduce intf ","c reduce  tac reduce get to_s ","c reduce  tac reduce get ","c reduce  ident ","c c reduce educe "]}," Racc LogFileGenerator outact":{"type":"method","name":"outact","children":[],"call":[" raise ","act class ","f printf ","t to_s ","act rule target to_s ","act rule target ","act rule ","act ruleid ","act goto_id "]}," Racc LogFileGenerator action_out":{"type":"method","name":"action_out","children":[],"call":["f printf ","st ident ","t to_s ","t nonterminal? ","state goto_table each ","state goto_table ","f puts "," outact ","@debug_flags any? ","act kind_of? ! ","act kind_of? ","state defact "," outrrconf ","rr each "," outsrconf ","sr each ","rr delete ","sr delete ","acts [] ","keys delete_if ","(const nil :Shift) each ","a ident <=> ","b ident ","a ident ","keys sort! ","acts keys ","state action ","state rrconf dup ","state rrconf ","state srconf dup ","state srconf ","state goto_table earr delete h ","state goto_table easr delete h "," outstate defact  "," outacts []  "," outarr delete t "," outasr delete t ","state defact  kind_of? ! ","acts []  kind_of? ! ","arr delete t kind_of? ! ","asr delete t kind_of? ! ","state defact  kind_of? ","acts []  kind_of? ","arr delete t kind_of? ","asr delete t kind_of? ","state defstate defact  ","state defacts []  ","state defarr delete t ","state defasr delete t "," outrrrr delete onf "," outrrsr delete onf ","rr earr delete h ","rr easr delete h "," outsrrr delete onf "," outsrsr delete onf ","sr earr delete h ","sr easr delete h ","state defact s [] ","acts [] s [] ","arr delete ts [] ","asr delete ts [] ","state action  [] ","acts keys  delete_if ","(rr delete onst nil :Shift) earr delete h ","(sr delete onst nil :Shift) easr delete h ","acts keys  sort! ","state defact s keys ","acts [] s keys ","arr delete ts keys ","asr delete ts keys ","acts acts keys  ","state action  keys ","state state defact ion ","state acts [] ion ","state arr delete tion ","state asr delete tion ","state rrrr delete onf dup ","state rrsr delete onf dup ","state rrrr delete onf ","state rrsr delete onf ","state srrr delete onf dup ","state srsr delete onf dup ","state srrr delete onf ","state srsr delete onf "]}," Racc LogFileGenerator pointer_out":{"type":"method","name":"pointer_out","children":[],"call":["out puts ","buf << ","ptr reduce? ","buf << << ","tok to_s ","idx == ","ptr index ","ptr rule symbols each_with_index ","ptr rule symbols ","ptr rule "," sprintf ","ptr rule target to_s ","ptr rule target ","ptr rule ident "," sprintf  << "," sprintf  << << "]}," Racc LogFileGenerator output_state":{"type":"method","name":"output_state","children":[],"call":[" action_out ","out << "," pointer_out ","ptr rule ident != ","ptr rule ident ","ptr rule ","(if\n  (lvar :showall)\n  (send\n    (lvar :state) :closure)\n  (send\n    (lvar :state) :core)) each ","state core ","state closure ","state ident ","@states each ","@debug_flags state ","@debug_flags la "]}," Racc LogFileGenerator output_useless":{"type":"method","name":"output_useless","children":[],"call":["out printf ","t to_s ","t useless? ","@grammar each_nonterminal ","rl target to_s ","rl target ","rl ident ","rl useless? ","@grammar each "]}," Racc LogFileGenerator output_conflict":{"type":"method","name":"output_conflict","children":[],"call":["out printf ","state rrconf size ","state rrconf ","state stateid ","state srconf size ","state srconf ","@states each "]}," Racc LogFileGenerator output":{"type":"method","name":"output","children":[],"call":[" output_state ","out puts "," output_token "," output_rule "," output_useless "," output_conflict "]}," Racc LogFileGenerator initialize":{"type":"method","name":"initialize","children":[],"call":["states grammar "]}," Racc ISet dup":{"type":"method","name":"dup","children":[],"call":["ISet  new ","@set dup "]}," Racc ISet clear":{"type":"method","name":"clear","children":[],"call":["@set clear "]}," Racc ISet empty?":{"type":"method","name":"empty?","children":[],"call":["@set nitems == ","@set nitems "]}," Racc ISet size":{"type":"method","name":"size","children":[],"call":["@set nitems "]}," Racc ISet to_s":{"type":"method","name":"to_s","children":[],"call":["@set compact join ","@set compact "]}," Racc ISet to_a":{"type":"method","name":"to_a","children":[],"call":["@set compact "]}," Racc ISet each":{"type":"method","name":"each","children":[],"call":["@set compact each ","@set compact "]}," Racc ISet delete":{"type":"method","name":"delete","children":[],"call":["@set []= ","key ident ","@set [] ","key @set [] dent "]}," Racc ISet update_a":{"type":"method","name":"update_a","children":[],"call":["s []= ","i ident ","a each "]}," Racc ISet update":{"type":"method","name":"update","children":[],"call":["s []= ","o [] ","o each_index ","other set ","other set  [] ","other set  each_index ","oo [] her seo []  ","other set ther set "]}," Racc ISet []=":{"type":"method","name":"[]=","children":[],"call":["@set []= ","key ident "]}," Racc ISet []":{"type":"method","name":"[]","children":[],"call":["@set [] ","key ident "]}," Racc ISet add":{"type":"method","name":"add","children":[],"call":["@set []= ","i ident "]}," Racc ISet initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Racc GrammarFileScanner scan_error!":{"type":"method","name":"scan_error!","children":[],"call":[" raise "," lineno "]}," Racc GrammarFileScanner get_quoted_re":{"type":"method","name":"get_quoted_re","children":[],"call":["CACHE  [] ","Regexp  quote ","LEFT_TO_RIGHT  [] "]}," Racc GrammarFileScanner scan_quoted":{"type":"method","name":"scan_quoted","children":[],"call":["buf << "," reads "," next_line "," get_quoted_re ","(str \"||\") + ","left dup ","(str \"||\") +  << ","left dup  << "," read reads  ","  get_quoted_re ads "," get_quoted_ get_quoted_re  ","( reads tr \"||\") + "]}," Racc GrammarFileScanner reads":{"type":"method","name":"reads","children":[],"call":["m [] ","m post_match ","re match ","re match  [] ","re match  post_re match atch ","re re match atch "]}," Racc GrammarFileScanner read":{"type":"method","name":"read","children":[],"call":["@line [] ","@line []  [] "]}," Racc GrammarFileScanner literal_head?":{"type":"method","name":"literal_head?","children":[],"call":["(str \"\\\\A[\\\\s\\\\=]\") !~ ","post empty? ! ","post empty? ","(str \"[a-zA-Z_0-9]\") !~ ","pre [] ","pre ! "]}," Racc GrammarFileScanner scan_action":{"type":"method","name":"scan_action","children":[],"call":[" raise ","buf << ","buf << << "," read "," scan_quoted "," literal_head? "," scan_error! ","nest == "," reads ","@line empty? "," next_line ","buf sub! ","String  new "," rai reads e ","String  new  << ","String  new  << << ","  reads can_quoted ","  reads can_error! ","ne reads t == "," read reads  ","buf  reads ub! ","String  new  sub! "]}," Racc GrammarFileScanner skip_comment":{"type":"method","name":"skip_comment","children":[],"call":["m post_match "," next_line ","(str \"\\\\*/\") match ","(str \"\\*/\") match  post_(str \"\\*/\") match atch ","(str \"\\\\*/\") (str \"\\*/\") match atch "]}," Racc GrammarFileScanner atom_symbol":{"type":"method","name":"atom_symbol","children":[],"call":["ReservedWord  [] ","@in_rule_blk ! ","@in_conv_blk ! ","token == "]}," Racc GrammarFileScanner next_line":{"type":"method","name":"next_line","children":[],"call":["@line sub! "," scan_error! "," sprintf ","@lines clear ","@lines join ","@line ! ","@lines [] ","@lines []  sub! ","@lines [] s clear ","@lines [] s join ","@lines []  ! ","@lines [] s [] "]}," Racc GrammarFileScanner yylex0":{"type":"method","name":"yylex0","children":[],"call":["ch == ","SourceText  new "," scan_action "," lineno "," eval "," scan_quoted "," reads ","s to_i ","s intern "," atom_symbol "," skip_comment ","@line sub! ","@line empty? "," next_line "," reads  == ","  reads can_action ","  lineno  ","  reads can_quoted "," read reads  "," reads  to_i "," reads  intern "," atom_ reads ymbol ","  reads kip_comment ","@line  reads ub! "]}," Racc GrammarFileScanner yylex":{"type":"method","name":"yylex","children":[],"call":[" yylex0 ","$stderr printf ","tok inspect ","sym inspect "," lineno "]}," Racc GrammarFileScanner lineno":{"type":"method","name":"lineno","children":[],"call":["@lineno + "]}," Racc GrammarFileScanner initialize":{"type":"method","name":"initialize","children":[],"call":[" next_line ","str split ","str b split ","str b "]}," Racc GrammarFileParser add_user_code":{"type":"method","name":"add_user_code","children":[],"call":["@result params send push ","@result params send ","USER_CODE_LABELS  [] ","@result params ","@result params public_send push ","@result params public_send "]}," Racc GrammarFileParser canonical_label":{"type":"method","name":"canonical_label","children":[],"call":[" raise ","label inspect ","USER_CODE_LABELS  key? ","src to_s strip downcase slice ","src to_s strip downcase ","src to_s strip ","src to_s ","src to_s strip downcase slice  inspect "]}," Racc GrammarFileParser parse_user_code":{"type":"method","name":"parse_user_code","children":[],"call":["1 + ","body size "," add_user_code ","SourceText  new ","line + ","body join ","File  read ","(if\n  (lvar :pathes)\n  (send\n    (send\n      (lvar :pathes) :strip) :split\n    (str \" \"))\n  (array)) each ","pathes strip split ","pathes strip "," canonical_label ","header sub split ","header sub ","block to_a ","blocks each ","@scanner epilogue split ","@scanner epilogue ","@scanner lineno ","block lines to_a ","block lines ","(if\n  (lvar :paths)\n  (send\n    (send\n      (lvar :paths) :strip) :split\n    (str \" \"))\n  (array)) each ","paths strip split ","paths strip ","@scanner lineno  + "," canonical_ canonical_label  ","@scanner @scanner lineno no ","block @scanner lineno s to_a ","block @scanner lineno s "]}," Racc GrammarFileParser embedded_action":{"type":"method","name":"embedded_action","children":[],"call":["@grammar add ","Rule  new ","@grammar intern ","(str \"@\") intern "]}," Racc GrammarFileParser add_rule":{"type":"method","name":"add_rule","children":[],"call":["@grammar add ","rule specified_prec= ","Rule  new "," embedded_action ","s kind_of? ","list map! ","UserAction  empty ","list pop ","list last kind_of? ","list last ","Rule  new  specified_prec= "," embedded_UserAction  empty ion "," embedded_list pop ion "]}," Racc GrammarFileParser add_rule_block":{"type":"method","name":"add_rule_block","children":[],"call":[" add_rule ","curr push ","i symbol "," raise ","list each ","target name ","target lineno ","list shift ","list shift  name ","list shift  lineno "]}," Racc GrammarFileParser location":{"type":"method","name":"location","children":[],"call":["@lineno - + ","@scanner lineno ","@lineno - "]}," Racc GrammarFileParser on_error":{"type":"method","name":"on_error","children":[],"call":[" raise "," location ","val inspect ","val kind_of? ","val id2name ","val respond_to? ","val inspect al inspect ","val id2name al inspect ","val inspect al kind_of? ","val id2name al kind_of? ","val inspect al id2name ","val id2name al id2name ","val inspect al respond_to? ","val id2name al respond_to? "]}," Racc GrammarFileParser next_token":{"type":"method","name":"next_token","children":[],"call":["@scanner scan "]}," Racc GrammarFileParser parse":{"type":"method","name":"parse","children":[],"call":["@result grammar init ","@result grammar "," parse_user_code "," yyparse ","Result  new ","Grammar  new ","@scanner debug= ","GrammarFileScanner  new ","Result  new  grammar init ","Result  new  grammar ","GrammarFileScanner  new  debug= "]}," Racc GrammarFileParser initialize":{"type":"method","name":"initialize","children":[],"call":["debug_flags parse "]}," Racc GrammarFileParser parse_file":{"type":"method","name":"parse_file","children":[],"call":[]}," Racc GrammarFileParser Result initialize":{"type":"method","name":"initialize","children":[],"call":["ParserFileGenerator Params  new "]}," Racc Sym useless=":{"type":"method","name":"useless=","children":[],"call":[]}," Racc Sym useless?":{"type":"method","name":"useless?","children":[],"call":[]}," Racc Sym null=":{"type":"method","name":"null=","children":[],"call":[]}," Racc Sym nullable?":{"type":"method","name":"nullable?","children":[],"call":[]}," Racc Sym self_null?":{"type":"method","name":"self_null?","children":[],"call":[]}," Racc Sym rule":{"type":"method","name":"rule","children":[],"call":["Rule  new ","UserAction  empty "]}," Racc Sym |":{"type":"method","name":"|","children":[],"call":[" rule | ","x rule "," rule "]}," Racc Sym to_s":{"type":"method","name":"to_s","children":[],"call":["@to_s dup "]}," Racc Sym serialize":{"type":"method","name":"serialize","children":[],"call":[]}," Racc Sym string_symbol?":{"type":"method","name":"string_symbol?","children":[],"call":[]}," Racc Sym should_terminal?":{"type":"method","name":"should_terminal?","children":[],"call":[]}," Racc Sym should_terminal":{"type":"method","name":"should_terminal","children":[],"call":[]}," Racc Sym term=":{"type":"method","name":"term=","children":[],"call":["t ! "," raise ","@term nil? "]}," Racc Sym nonterminal?":{"type":"method","name":"nonterminal?","children":[],"call":[]}," Racc Sym terminal?":{"type":"method","name":"terminal?","children":[],"call":[]}," Racc Sym dummy?":{"type":"method","name":"dummy?","children":[],"call":[]}," Racc Sym once_writer":{"type":"method","name":"once_writer","children":[],"call":[" module_eval ","nm id2name ","nm id2name  id2name "]}," Racc Sym initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","value class ","value dump ","value inspect ","value to_s "]}," Racc SymbolTable check_terminals":{"type":"method","name":"check_terminals","children":[],"call":[" raise ","(send\n  (send nil :nonterminals) :select) each ","n should_terminal? "," nonterminals select "," nonterminals ","(send\n  (send nil :terminals) :reject) each ","t should_terminal? "," terminals reject "," terminals ","s should_terminal ","s assoc "," each ","t should_terminal ","t string_symbol? "," each_terminal ","@error should_terminal ","@anchor should_terminal ","s should_terminal? ","@symbols any? "]}," Racc SymbolTable fix_ident":{"type":"method","name":"fix_ident","children":[],"call":["t ident= ","@symbols each_with_index "]}," Racc SymbolTable fix":{"type":"method","name":"fix","children":[],"call":[" check_terminals "," fix_ident ","terms size ","terms + ","s terminal? ","@symbols partition ","terms +  partition "]}," Racc SymbolTable each_nonterminal":{"type":"method","name":"each_nonterminal","children":[],"call":["@nterms each "]}," Racc SymbolTable nonterminals":{"type":"method","name":"nonterminals","children":[],"call":["@symbols [] ","@symbols size - ","@symbols size "]}," Racc SymbolTable each_terminal":{"type":"method","name":"each_terminal","children":[],"call":["@terms each "]}," Racc SymbolTable terminals":{"type":"method","name":"terminals","children":[],"call":["@symbols [] "]}," Racc SymbolTable each":{"type":"method","name":"each","children":[],"call":["@symbols each "]}," Racc SymbolTable nt_max":{"type":"method","name":"nt_max","children":[],"call":["@symbols size "]}," Racc SymbolTable delete":{"type":"method","name":"delete","children":[],"call":["@cache delete ","sym value ","@symbols delete "]}," Racc SymbolTable intern":{"type":"method","name":"intern","children":[],"call":["@symbols push ","Sym  new ","@cache [] ","@Sym  new bols push "]}," Racc SymbolTable []":{"type":"method","name":"[]","children":[],"call":["@symbols [] "]}," Racc SymbolTable initialize":{"type":"method","name":"initialize","children":[],"call":[" intern "]}," Racc LocationPointer ptr_bug!":{"type":"method","name":"ptr_bug!","children":[],"call":[" raise "," to_s "]}," Racc LocationPointer before":{"type":"method","name":"before","children":[],"call":[" ptr_bug! ","@rule ptrs [] ","@index - ","@rule ptrs "]}," Racc LocationPointer next":{"type":"method","name":"next","children":[],"call":[" ptr_bug! ","@rule ptrs [] ","@index + ","@rule ptrs "]}," Racc LocationPointer head?":{"type":"method","name":"head?","children":[],"call":["@index == "]}," Racc LocationPointer eql?":{"type":"method","name":"eql?","children":[],"call":["@hash == ","ot hash "]}," Racc LocationPointer to_s":{"type":"method","name":"to_s","children":[],"call":[" sprintf ","@symbol to_s "," reduce? ","@rule ident "]}," Racc LocationPointer initialize":{"type":"method","name":"initialize","children":[],"call":["sym nil? ","@rule hash + ","@rule hash "]}," Racc Prec name":{"type":"method","name":"name","children":[],"call":[]}," Racc Prec initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Racc OrMark name":{"type":"method","name":"name","children":[],"call":[]}," Racc OrMark initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Racc UserAction name":{"type":"method","name":"name","children":[],"call":[]}," Racc UserAction empty?":{"type":"method","name":"empty?","children":[],"call":["@source ! ","@proc ! "]}," Racc UserAction proc?":{"type":"method","name":"proc?","children":[],"call":["@source ! "]}," Racc UserAction source?":{"type":"method","name":"source?","children":[],"call":["@proc ! "]}," Racc UserAction initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Racc UserAction empty":{"type":"method","name":"empty","children":[],"call":[]}," Racc UserAction proc":{"type":"method","name":"proc","children":[],"call":[]}," Racc UserAction source_text":{"type":"method","name":"source_text","children":[],"call":[]}," Racc Rule replace":{"type":"method","name":"replace","children":[],"call":["s == ","@symbols map "]}," Racc Rule each":{"type":"method","name":"each","children":[],"call":["@symbols each "]}," Racc Rule accept?":{"type":"method","name":"accept?","children":[],"call":["tok anchor? ","@symbols [] ","@symbols []  anchor? "]}," Racc Rule to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Racc Rule empty?":{"type":"method","name":"empty?","children":[],"call":["@symbols empty? "]}," Racc Rule size":{"type":"method","name":"size","children":[],"call":["@symbols size "]}," Racc Rule []":{"type":"method","name":"[]","children":[],"call":["@symbols [] "]}," Racc Rule ==":{"type":"method","name":"==","children":[],"call":["@ident == ","other ident ","other kind_of? "]}," Racc Rule inspect":{"type":"method","name":"inspect","children":[],"call":[]}," Racc Rule useless=":{"type":"method","name":"useless=","children":[],"call":[]}," Racc Rule useless?":{"type":"method","name":"useless?","children":[],"call":[]}," Racc Rule null=":{"type":"method","name":"null=","children":[],"call":[]}," Racc Rule nullable?":{"type":"method","name":"nullable?","children":[],"call":[]}," Racc Rule prec":{"type":"method","name":"prec","children":[],"call":["UserAction  proc "," raise ","@action empty? ","UserAction  proc  empty? "]}," Racc Rule precedence=":{"type":"method","name":"precedence=","children":[],"call":[]}," Racc Rule precedence":{"type":"method","name":"precedence","children":[],"call":[]}," Racc Rule hash=":{"type":"method","name":"hash=","children":[],"call":["ptrs push ","LocationPointer  new ","@symbols size ","@symbols each_with_index "]}," Racc Rule each_rule":{"type":"method","name":"each_rule","children":[],"call":["@alternatives each "]}," Racc Rule rule":{"type":"method","name":"rule","children":[],"call":[]}," Racc Rule |":{"type":"method","name":"|","children":[],"call":["@alternatives push ","x rule "]}," Racc Rule initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Racc Grammar check_symbols_useless":{"type":"method","name":"check_symbols_useless","children":[],"call":["t useless? ! ","t useless? ","t useless= ","ptr rule useless? ","ptr rule ","t heads each ","t heads ","s delete_if "]}," Racc Grammar check_rules_useless":{"type":"method","name":"check_rules_useless","children":[],"call":["rule useless? ! ","rule useless? ","rule useless= ","sym useless? ","rule symbols each ","rule symbols ","rules delete_if "]}," Racc Grammar compute_useless":{"type":"method","name":"compute_useless","children":[],"call":[" check_symbols_useless "," check_rules_useless ","s size ","r size ","s size == ","r size == ","@symboltable nonterminals ","@rules dup ","rule useless= ","@rules each ","sym useless= ","@symboltable each_nonterminal ","@symboltable each_terminal "," check_symbols_useles size  "," check_@symboltable nonterminals ymbol@symboltable nonterminals _u@symboltable nonterminals ele@symboltable nonterminals @symboltable nonterminals  "," check_rules_useles size  "," check_rule@symboltable nonterminals _u@symboltable nonterminals ele@symboltable nonterminals @symboltable nonterminals  "," check_@rules dup ules_useless ","@symboltable nonterminals  @symboltable nonterminals ize ","r @symboltable nonterminals ize ","@rules dup  size ","@symboltable nonterminals  @symboltable nonterminals ize == ","r @symboltable nonterminals ize == ","@rules dup  size == ","@@symboltable nonterminals ymboltable nonterminal@symboltable nonterminals  ","@symboltable nonte@rules dup minals ","@rule@symboltable nonterminals  dup ","@@rules dup ules dup ","rule useles size = ","rule u@symboltable nonterminals ele@symboltable nonterminals @symboltable nonterminals = ","@rules dup ule useless= ","@rule@symboltable nonterminals  each ","@@rules dup ules each ","sym useles size = ","@symboltable nonterminals ym u@symboltable nonterminals ele@symboltable nonterminals @symboltable nonterminals = ","@@symboltable nonterminals ymboltable each_nonterminal ","@symboltable each_nonte@rules dup minal ","@@symboltable nonterminals ymboltable each_terminal ","@symboltable each_te@rules dup minal "]}," Racc Grammar check_symbols_nullable":{"type":"method","name":"check_symbols_nullable","children":[],"call":["sym nullable? ","sym null= ","ptr rule nullable? ","ptr rule ","sym heads each ","sym heads ","symbols delete_if "]}," Racc Grammar check_rules_nullable":{"type":"method","name":"check_rules_nullable","children":[],"call":["rule nullable? ","rule null= ","t nullable? ","rule symbols each ","rule symbols ","rules delete_if "]}," Racc Grammar compute_nullable":{"type":"method","name":"compute_nullable","children":[],"call":[" check_symbols_nullable "," check_rules_nullable ","s size ","r size ","ss == ","rs == ","@symboltable nonterminals ","@rules dup ","t null= ","@symboltable each ","r null= ","@rules each "," check_@symboltable nonterminals ymbol@symboltable nonterminals _nullable "," check_rule@symboltable nonterminals _nullable "," check_@rules dup ules_nullable ","@symboltable nonterminals  @symboltable nonterminals ize ","r @symboltable nonterminals ize ","@rules dup  size ","s size  == ","@symboltable nonterminals @symboltable nonterminals  == ","r size  == ","r@symboltable nonterminals  == ","@rules dup s == ","@@symboltable nonterminals ymboltable nonterminal@symboltable nonterminals  ","@symboltable nonte@rules dup minals ","@rule@symboltable nonterminals  dup ","@@rules dup ules dup ","@@symboltable nonterminals ymboltable each ","@rules dup  null= ","@rule@symboltable nonterminals  each ","@@rules dup ules each "]}," Racc Grammar _compute_expand":{"type":"method","name":"_compute_expand","children":[],"call":[" _compute_expand ","lock []= ","tok ident ","lock [] ","tok nonterminal? ","ptr dereference ","t heads each ","t heads ","set update_a ","set update ","t expand ","ptr dereference  ident ","ptr dereference  nonterminal? "]}," Racc Grammar compute_expand":{"type":"method","name":"compute_expand","children":[],"call":[" puts ","t expand to_s ","t expand ","t to_s ","t expand= "," _compute_expand ","ISet  new "]}," Racc Grammar compute_locate":{"type":"method","name":"compute_locate","children":[],"call":["rule precedence= ","tok terminal? ","tok locate push ","tok locate ","ptr dereference ","ptr reduce? ","rule ptrs each ","rule ptrs ","@rules each ","ptr dereference  terminal? ","ptr dereference  locate push ","ptr dereference  locate "]}," Racc Grammar compute_nullable_0":{"type":"method","name":"compute_nullable_0","children":[],"call":["s snull= ","loc reduce? ","s heads any? ","s heads ","s terminal? ","@symboltable each "]}," Racc Grammar determine_terminals":{"type":"method","name":"determine_terminals","children":[],"call":["s term= ","s heads empty? ","s heads ","@symboltable each "]}," Racc Grammar compute_heads":{"type":"method","name":"compute_heads","children":[],"call":["rule target heads push ","rule ptrs [] ","rule ptrs ","rule target heads ","rule target ","@rules each "]}," Racc Grammar compute_hash":{"type":"method","name":"compute_hash","children":[],"call":["rule size + ","rule size ","rule hash= ","@rules each "]}," Racc Grammar fix_ident":{"type":"method","name":"fix_ident","children":[],"call":["rule ident= ","@rules each_with_index "]}," Racc Grammar add_start_rule":{"type":"method","name":"add_start_rule","children":[],"call":["@rules unshift ","r precedence= ","r hash= ","r ident= ","Rule  new ","UserAction  empty ","@symboltable anchor ","@symboltable dummy ","@Rule  new ules unshift ","Rule  new  pRule  new ecedence= ","Rule  new  hash= ","Rule  new  ident= ","UseRule  new Action  empty ","@symboltable anchoRule  new  "]}," Racc Grammar init":{"type":"method","name":"init","children":[],"call":[" compute_useless "," compute_nullable "," compute_expand ","@symboltable each_nonterminal "," compute_locate ","@symboltable fix "," compute_nullable_0 "," determine_terminals "," compute_heads "," compute_hash "," fix_ident ","@rules freeze "," add_start_rule "," raise ","@rules empty? ","sym dummy? ! ","sym dummy? ","(send\n  (ivar :@rules) :map) detect ","r target ","@rules map "]}," Racc Grammar PrecedenceDefinitionEnv nonassoc":{"type":"method","name":"nonassoc","children":[],"call":["@grammar declare_precedence ","@grammar intern ","syms map "]}," Racc Grammar PrecedenceDefinitionEnv right":{"type":"method","name":"right","children":[],"call":["@grammar declare_precedence ","@grammar intern ","syms map "]}," Racc Grammar PrecedenceDefinitionEnv left":{"type":"method","name":"left","children":[],"call":["@grammar declare_precedence ","@grammar intern ","syms map "]}," Racc Grammar PrecedenceDefinitionEnv lower":{"type":"method","name":"lower","children":[],"call":[" raise "]}," Racc Grammar PrecedenceDefinitionEnv higher":{"type":"method","name":"higher","children":[],"call":[" raise "]}," Racc Grammar PrecedenceDefinitionEnv initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Racc Grammar DefinitionEnv _wrap":{"type":"method","name":"_wrap","children":[],"call":[" _delayed_add ","Rule  new ","UserAction  proc ","@grammar intern ","sym intern ","target_name intern ","target_name intern _name intern "]}," Racc Grammar DefinitionEnv _regist":{"type":"method","name":"_regist","children":[],"call":[" _delayed_add ","rule target= ","@grammar intern ","(lvar :target) each_rule "," _added? ","target_name intern ","rule target_name intern = ","(lvar :target_name intern ) each_rule ","target_name intern _name intern "]}," Racc Grammar DefinitionEnv _defmetasyntax":{"type":"method","name":"_defmetasyntax","children":[],"call":["@grammar intern "," _regist "," _wrap ","@seqs [] "," _register "]}," Racc Grammar DefinitionEnv _intern":{"type":"method","name":"_intern","children":[],"call":[" raise ","x class ","@grammar intern "]}," Racc Grammar DefinitionEnv separated_by1":{"type":"method","name":"separated_by1","children":[],"call":["(send nil :seq\n  (lvar :sym)) | ","list push "," seq "," _defmetasyntax "," _intern "]}," Racc Grammar DefinitionEnv separated_by":{"type":"method","name":"separated_by","children":[],"call":[" option "," separated_by1 "]}," Racc Grammar DefinitionEnv many1":{"type":"method","name":"many1","children":[],"call":["(send nil :seq\n  (lvar :sym)) | ","list push "," seq "," _defmetasyntax "," _intern "]}," Racc Grammar DefinitionEnv many":{"type":"method","name":"many","children":[],"call":["(send nil :seq) | ","list push "," seq "," _defmetasyntax "," _intern "]}," Racc Grammar DefinitionEnv option":{"type":"method","name":"option","children":[],"call":["(send nil :seq) | "," seq "," _defmetasyntax "," _intern "]}," Racc Grammar DefinitionEnv action":{"type":"method","name":"action","children":[],"call":[" _delayed_add ","Rule  new ","UserAction  proc ","@grammar intern ","(str \"@\") intern ","@seqs [] "]}," Racc Grammar DefinitionEnv null":{"type":"method","name":"null","children":[],"call":[" seq "]}," Racc Grammar DefinitionEnv seq":{"type":"method","name":"seq","children":[],"call":["Rule  new ","UserAction  proc "," _intern ","list map "]}," Racc Grammar DefinitionEnv flush_delayed":{"type":"method","name":"flush_delayed","children":[],"call":["@delayed clear ","@grammar add ","@delayed each ","@delayed empty? "]}," Racc Grammar DefinitionEnv _added?":{"type":"method","name":"_added?","children":[],"call":["r target == ","r target ","@delayed detect ","@grammar added? "]}," Racc Grammar DefinitionEnv _delayed_add":{"type":"method","name":"_delayed_add","children":[],"call":["@delayed push "]}," Racc Grammar DefinitionEnv _add":{"type":"method","name":"_add","children":[],"call":[" flush_delayed ","@grammar add ","r target= ","x each_rule ","@grammar symboltable delete ","@grammar symboltable ","rule replace ","rule target == ","rule target ","@delayed each "]}," Racc Grammar DefinitionEnv method_missing":{"type":"method","name":"method_missing","children":[],"call":[" _add ","args first "," raise ","args size ","args size == ","@grammar intern ","mid to_s chop intern ","mid to_s chop ","mid to_s ","mid to_s [] == ","mid to_s [] "]}," Racc Grammar DefinitionEnv precedence_table":{"type":"method","name":"precedence_table","children":[],"call":["@grammar end_precedence_declaration ","env reverse ","env instance_eval ","PrecedenceDefinitionEnv  new ","PrecedenceDefinitionEnv  new  reverse ","PrecedenceDefinitionEnv  new  instance_eval "]}," Racc Grammar DefinitionEnv grammar":{"type":"method","name":"grammar","children":[],"call":["@grammar init ","rule specified_prec= ","@grammar intern ","rule specified_prec ","@grammar each "," flush_delayed "]}," Racc Grammar DefinitionEnv initialize":{"type":"method","name":"initialize","children":[],"call":["Hash  new ","Grammar  new "]}," Racc Grammar define":{"type":"method","name":"define","children":[],"call":[]}," Racc Grammar end_precedence_declaration":{"type":"method","name":"end_precedence_declaration","children":[],"call":["sym precedence= ","sym assoc= ","syms each ","table each_with_index ","@prec_table reverse ","@prec_table empty? ","@prec_table reverse  each_with_index ","@prec_@prec_table reverse  reverse ","@prec_@prec_table reverse  empty? "]}," Racc Grammar declare_precedence":{"type":"method","name":"declare_precedence","children":[],"call":["@prec_table push "," raise "]}," Racc Grammar start_symbol=":{"type":"method","name":"start_symbol=","children":[],"call":[" raise "]}," Racc Grammar added?":{"type":"method","name":"added?","children":[],"call":["r target == ","r target ","@rules detect "]}," Racc Grammar add":{"type":"method","name":"add","children":[],"call":["@rules push "," raise "]}," Racc Grammar write_log":{"type":"method","name":"write_log","children":[],"call":["LogFileGenerator  new output ","LogFileGenerator  new "," states ","File  open "]}," Racc Grammar parser_class":{"type":"method","name":"parser_class","children":[],"call":["states state_transition_table parser_class ","states state_transition_table ","report [] ","g n_useless_rules ","g useless_rule_exist? ","g n_useless_nonterminals ","g useless_nonterminal_exist? ","states grammar ","states n_rrconflicts ","states rrconflict_exist? ","states n_srconflicts ","states should_report_srconflict? ","$stderr puts "," lambda "," write_log ","srcfilename + "," caller first slice "," caller first "," caller "," states "," states  state_transition_table parser_class "," states  state_transition_table ","states grammar  n_useless_rules ","states grammar  useless_rule_exist? ","states grammar  n_useless_nonterminals ","states grammar  useless_nonterminal_exist? ","states states grammar rammar "," states  grammar "," states  n_rrconflicts "," states  rrconflict_exist? "," states  n_srconflicts "," states  should_report_srconflict? "," write_lostates grammar  "," caller first slice  + ","  states  "]}," Racc Grammar state_transition_table":{"type":"method","name":"state_transition_table","children":[],"call":[" states state_transition_table "," states "]}," Racc Grammar dfa":{"type":"method","name":"dfa","children":[],"call":["(or-asgn\n  (ivasgn :@states)\n  (send\n    (const nil :States) :new\n    (self))) dfa ","States  new "]}," Racc Grammar nfa":{"type":"method","name":"nfa","children":[],"call":["(or-asgn\n  (ivasgn :@states)\n  (send\n    (const nil :States) :new\n    (self))) nfa ","States  new "]}," Racc Grammar n_useless_rules":{"type":"method","name":"n_useless_rules","children":[],"call":["r useless? "," each "," each_useless_rule count "," each_useless_rule "]}," Racc Grammar useless_rule_exist?":{"type":"method","name":"useless_rule_exist?","children":[],"call":[" n_useless_rules != "," n_useless_rules "]}," Racc Grammar n_useless_nonterminals":{"type":"method","name":"n_useless_nonterminals","children":[],"call":["sym useless? ","@symboltable each_nonterminal "," each_useless_nonterminal count "," each_useless_nonterminal "]}," Racc Grammar useless_nonterminal_exist?":{"type":"method","name":"useless_nonterminal_exist?","children":[],"call":[" n_useless_nonterminals != "," n_useless_nonterminals "]}," Racc Grammar nonterminal_base":{"type":"method","name":"nonterminal_base","children":[],"call":["@symboltable nt_base "]}," Racc Grammar symbols":{"type":"method","name":"symbols","children":[],"call":["@symboltable symbols "]}," Racc Grammar intern":{"type":"method","name":"intern","children":[],"call":["@symboltable intern "]}," Racc Grammar to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Racc Grammar size":{"type":"method","name":"size","children":[],"call":["@rules size "]}," Racc Grammar each_with_index":{"type":"method","name":"each_with_index","children":[],"call":["@rules each_with_index "]}," Racc Grammar each_index":{"type":"method","name":"each_index","children":[],"call":["@rules each_index "]}," Racc Grammar each_rule":{"type":"method","name":"each_rule","children":[],"call":["@rules each "]}," Racc Grammar []":{"type":"method","name":"[]","children":[],"call":["@rules [] "]}," Racc Grammar initialize":{"type":"method","name":"initialize","children":[],"call":["debug_flags token ","SymbolTable  new "]}," Racc DebugFlags any?":{"type":"method","name":"any?","children":[],"call":[]}," Racc DebugFlags initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Racc DebugFlags parse_option_string":{"type":"method","name":"parse_option_string","children":[],"call":[]}," String to_a":{"type":"method","name":"to_a","children":[],"call":[" lines to_a "," lines "]}," Racc Grammar each_useless_rule":{"type":"method","name":"each_useless_rule","children":[],"call":["r useless? "," each "," to_enum "," __method__ "," block_given? "]}," Racc Grammar each_useless_nonterminal":{"type":"method","name":"each_useless_nonterminal","children":[],"call":["sym useless? ","@symboltable each_nonterminal "," to_enum "," __method__ "," block_given? "]}," Racc Grammar DefinitionEnv _register":{"type":"method","name":"_register","children":[],"call":[" _delayed_add ","rule target= ","@grammar intern ","(lvar :target) each_rule "," _added? ","target_name intern ","rule target_name intern = ","(lvar :target_name intern ) each_rule ","target_name intern _name intern "]}}