{" ActiveRecord Wrappings AbstractWrapper unwrap":{"type":"method","name":"unwrap","children":[],"call":[]}," ActiveRecord Wrappings AbstractWrapper wrap":{"type":"method","name":"wrap","children":[],"call":[]}," ActiveRecord Wrappings AbstractWrapper load_wrapped_attribute":{"type":"method","name":"load_wrapped_attribute","children":[],"call":["record send "," unwrap ","record attribute_present? "]}," ActiveRecord Wrappings AbstractWrapper save_wrapped_attribute":{"type":"method","name":"save_wrapped_attribute","children":[],"call":["record send "," wrap ","record attribute_present? "]}," ActiveRecord Wrappings AbstractWrapper initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Wrappings append_features":{"type":"method","name":"append_features","children":[],"call":[]}," ActiveRecord Wrappings ClassMethods wrap_with":{"type":"method","name":"wrap_with","children":[],"call":["wrapper wrap ","(lvar :attributes) flat each ","(lvar :attributes) flat "]}," ActiveRecord Wrappings ClassMethods wrap_in_yaml":{"type":"method","name":"wrap_in_yaml","children":[],"call":[" wrap_with "]}," ActiveRecord Wrappings YamlWrapper unwrap":{"type":"method","name":"unwrap","children":[],"call":["YAML  load "]}," ActiveRecord Wrappings YamlWrapper wrap":{"type":"method","name":"wrap","children":[],"call":["attribute to_yaml "]}," debug":{"type":"method","name":"debug","children":[],"call":[" raise "]}," get_client_info":{"type":"method","name":"get_client_info","children":[],"call":[]}," escape_string":{"type":"method","name":"escape_string","children":[],"call":["\\ + ","str gsub "]}," real_connect":{"type":"method","name":"real_connect","children":[],"call":["Mysql  new "]}," init":{"type":"method","name":"init","children":[],"call":["Mysql  new "]}," Mysql Random rnd":{"type":"method","name":"rnd","children":[],"call":["@seed1 to_f / ","@seed1 to_f ","(send\n  (send\n    (ivar :@seed1) :+\n    (ivar :@seed2)) :+\n  (int 33)) % ","@seed1 + + ","@seed1 + ","(send\n  (send\n    (ivar :@seed1) :*\n    (int 3)) :+\n  (ivar :@seed2)) % ","@seed1 * + ","@seed1 * ","(send\n  (send\n    (ivar :@seed1) :*\n    (int 3)) :+\n  (ivar :@seed2)) %  to_f / ","(send\n  (send\n    (ivar :@seed1) :*\n    (int 3)) :+\n  (ivar :@seed2)) %  to_f ","(send\n  (send\n    (ivar :@seed1) :+\n    (ivar :(send\n  (send\n    (ivar :@seed1) :+\n    (ivar :@seed2)) :+\n  (int 33)) % )) :+\n  (int 33)) % ","(send\n  (send\n    (ivar :(send\n  (send\n    (ivar :@seed1) :*\n    (int 3)) :+\n  (ivar :@seed2)) % ) :+\n    (ivar :@seed2)) :+\n  (int 33)) % ","(send\n  (send\n    (ivar :@seed1) :*\n    (int 3)) :+\n  (ivar :@seed2)) %  + + ","(send\n  (send\n    (ivar :@seed1) :*\n    (int 3)) :+\n  (ivar :@seed2)) %  + ","(send\n  (send\n    (ivar :@seed1) :*\n    (int 3)) :+\n  (ivar :(send\n  (send\n    (ivar :@seed1) :+\n    (ivar :@seed2)) :+\n  (int 33)) % )) % ","(send\n  (send\n    (ivar :(send\n  (send\n    (ivar :@seed1) :*\n    (int 3)) :+\n  (ivar :@seed2)) % ) :*\n    (int 3)) :+\n  (ivar :@seed2)) % ","(send\n  (send\n    (ivar :@seed1) :*\n    (int 3)) :+\n  (ivar :@seed2)) %  * + ","(send\n  (send\n    (ivar :@seed1) :*\n    (int 3)) :+\n  (ivar :@seed2)) %  * "]}," Mysql Random initialize":{"type":"method","name":"initialize","children":[],"call":["seed2 % ","seed1 % "]}," Mysql Net int4str":{"type":"method","name":"int4str","children":[],"call":[]}," Mysql Net int3str":{"type":"method","name":"int3str","children":[],"call":[]}," Mysql Net int2str":{"type":"method","name":"int2str","children":[],"call":[]}," Mysql Net close":{"type":"method","name":"close","children":[],"call":["@sock close "]}," Mysql Net write":{"type":"method","name":"write","children":[],"call":["@sock flush ","@sock sync= ","@pkt_nr + & ","@pkt_nr + ","@sock write ","Net  int3str + + ","data [] ","Net  int3str + ","@pkt_nr chr ","Net  int3str ","data length - ","data length ","data length >= ","data join ","data is_a? "," raise ","Error  new ","Error  err ","@pkt_nr + &  + & ","@pkt_nr + &  + ","data join  [] ","@pkt_nr + &  chr ","data join  length - ","data join  length ","data join  length >= ","data join  join ","data join  is_a? "]}," Mysql Net read":{"type":"method","name":"read","children":[],"call":["buf join ","@sock sync= ","buf << ","@sock read ","@pkt_nr + & ","@pkt_nr + "," raise ","@pkt_nr != ","a [] ","a [] + + ","a [] * * ","a [] * ","a [] + ","len == ","Error  new ","Error  err ","@sock re@sock read d ","@pkt_nr + &  + & ","@a []  + & ","@pkt_nr + &  + ","@a []  + "," r@sock read ise ","@pkt_nr + &  != ","@a []  != ","@sock read  [] ","@sock read  [] + + ","@sock read  [] * * ","@sock read  [] * ","@sock read  [] + ","a [] + +  == "]}," Mysql Net clear":{"type":"method","name":"clear","children":[],"call":[]}," Mysql Net initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Mysql Error err":{"type":"method","name":"err","children":[],"call":[]}," Mysql Error initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Mysql Field inspect":{"type":"method","name":"inspect","children":[],"call":[" class "]}," Mysql Field initialize":{"type":"method","name":"initialize","children":[],"call":["type == ","length == ","type != ","type <= "]}," Mysql Result inspect":{"type":"method","name":"inspect","children":[],"call":[" class "]}," Mysql Result each_hash":{"type":"method","name":"each_hash","children":[],"call":[" fetch_hash "," fetch_ fetch_hash  "]}," Mysql Result each":{"type":"method","name":"each","children":[],"call":[" fetch_row "," fetch_ fetch_row  "]}," Mysql Result row_tell":{"type":"method","name":"row_tell","children":[],"call":[]}," Mysql Result row_seek":{"type":"method","name":"row_seek","children":[],"call":[]}," Mysql Result num_rows":{"type":"method","name":"num_rows","children":[],"call":["@data length "]}," Mysql Result num_fields":{"type":"method","name":"num_fields","children":[],"call":[]}," Mysql Result free":{"type":"method","name":"free","children":[],"call":["GC  start ","@handle skip_result "]}," Mysql Result field_tell":{"type":"method","name":"field_tell","children":[],"call":[]}," Mysql Result field_seek":{"type":"method","name":"field_seek","children":[],"call":[]}," Mysql Result fetch_hash":{"type":"method","name":"fetch_hash","children":[],"call":["hash []= ","row [] ","@fields [] name ","@fields [] ","@fields [] table + + ","@fields [] table + ","@fields [] table ","@fields each_index ","row == "," fetch_row "," fetch_row  [] ","@@fields [] name ields [] name ","@@fields [] table + + ields [] name ","@@fields [] name ields [] ","@@fields [] table + + ields [] ","@@fields [] name ields [] table + + ","@@fields [] table + + ields [] table + + ","@@fields [] name ields [] table + ","@@fields [] table + + ields [] table + ","@@fields [] name ields [] table ","@@fields [] table + + ields [] table ","@@fields [] name ields each_index ","@@fields [] table + + ields each_index "," fetch_row  == "," @fields [] name etch_row "," @fields [] table + + etch_row "," fetch_ fetch_row  "]}," Mysql Result fetch_row":{"type":"method","name":"fetch_row","children":[],"call":["i length ","ret map ","ret == ","@handle read_one_row ","@data [] ","@handle status= ","@current_row >= ","@data length ","@handle read_one_row  map ","@data []  map ","@handle read_one_row  == ","@data []  == "]}," Mysql Result fetch_lengths":{"type":"method","name":"fetch_lengths","children":[],"call":["i length ","@data [] map ","@data [] "]}," Mysql Result fetch_field_direct":{"type":"method","name":"fetch_field_direct","children":[],"call":["@fields [] "]}," Mysql Result fetch_fields":{"type":"method","name":"fetch_fields","children":[],"call":[]}," Mysql Result fetch_field":{"type":"method","name":"fetch_field","children":[],"call":["@fields [] ","@current_field >= ","@@fields [] ields [] ","@current_@fields [] ield >= "]}," Mysql Result data_seek":{"type":"method","name":"data_seek","children":[],"call":[]}," Mysql Result initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Mysql error":{"type":"method","name":"error","children":[],"call":[" raise ","Error  new ","Error  err "]}," Mysql scramble":{"type":"method","name":"scramble","children":[],"call":["to join ","(send\n  (lvar :t) :^\n  (lvar :extra)) chr ","t ^ ","to map! ","(send\n  (send\n    (lvar :rnd) :rnd) :*\n  (int 31)) floor ","rnd rnd * ","rnd rnd ","to << ","(send\n  (begin\n    (send\n      (send\n        (lvar :rnd) :rnd) :*\n      (int 31))) :+\n  (int 64)) floor ","(send\n  (send\n    (lvar :rnd) :rnd) :*\n  (int 31)) + ","1 upto ","message length ","Random  new ","hash_pass [] ^ ","hash_message [] ","hash_pass [] "," hash_password "," raise ","password == ","message slice ","(send\n  (lvar :t) :^\n  (lvar :(send\n  (send\n    (lvar :rnd) :rnd) :*\n  (int 31)) floor )) chr ","(send\n  (send\n    (lvar :Random  new ) :Random  new ) :*\n  (int 31)) floor ","Random  new  Random  new  * ","Random  new  Random  new  ","(send\n  (begin\n    (send\n      (send\n        (lvar :Random  new ) :Random  new ) :*\n      (int 31))) :+\n  (int 64)) floor ","(send\n  (send\n    (lvar :Random  new ) :Random  new ) :*\n  (int 31)) + "," hash_password  [] ^ "," hash_password  [] ","  hash_password word "]}," Mysql hash_password":{"type":"method","name":"hash_password","children":[],"call":["nr2 & ","(send\n  (int 1) :<<\n  (int 31)) - ","1 << ","nr & ","(send\n  (lvar :nr2) :<<\n  (int 8)) ^ ","nr2 << ","(send\n  (begin\n    (send\n      (begin\n        (send\n          (lvar :nr) :&\n          (int 63))) :+\n      (lvar :add))) :*\n  (lvar :i)) + ","nr << ","(send\n  (begin\n    (send\n      (lvar :nr) :&\n      (int 63))) :+\n  (lvar :add)) * ","(send\n  (lvar :nr) :&\n  (int 63)) + ","i == ","password each_byte "]}," Mysql write":{"type":"method","name":"write","children":[],"call":["@net write "," error "]}," Mysql read":{"type":"method","name":"read","children":[],"call":[" raise ","Error  new ","Error  err ","a [] ","a [] + ","a [] * ","a length > ","a length ","a [] == ","@net read "," error "," r@net read ise ","@net read  [] ","@net read  [] + ","@net read  [] * ","@net read  length > ","@net read  length ","@net read  [] == ","@net re@net read d "]}," Mysql command":{"type":"method","name":"command","children":[],"call":[" read "," write ","cmd chr + ","cmd chr ","@net clear "," error ","@status != "]}," Mysql get_length":{"type":"method","name":"get_length","children":[],"call":["a [] + + + ","a [] * ","256 ** ","a [] ","a [] + + ","a [] + ","a [] + + + + + + + ","a [] + + + + + + ","a [] + + + + + ","a [] + + + + ","data slice! ","data length == ","data length ","data slice!  [] + + + ","data slice!  [] * ","data slice!  [] ","data slice!  [] + + ","data slice!  [] + ","data slice!  [] + + + + + + + ","data slice!  [] + + + + + + ","data slice!  [] + + + + + ","data slice!  [] + + + + ","ddata slice! tdata slice!  slice! ","data slidata slice! e! ","ddata slice! tdata slice!  length == ","ddata slice! tdata slice!  length "]}," Mysql read_rows":{"type":"method","name":"read_rows","children":[],"call":["ret << "," read_one_row "]}," Mysql unpack_fields":{"type":"method","name":"unpack_fields","children":[],"call":["ret << ","Field  new ","f [] ","f [] [] ","f [] [] + ","f [] [] * ","f [] [] + + ","f [] [] * * ","data each "," old_unpack_fields "," unpack_fields_41 "," version_meets_minimum? ","@server_capabilities ! & ","@server_capabilities ! "]}," Mysql read_query_result":{"type":"method","name":"read_query_result","children":[],"call":[" unpack_fields ","@server_capabilities & != ","@server_capabilities & "," read_rows "," get_length ","data size > ","data size ","a [] + ","a [] * ","a [] ","data slice! ","@field_count == "," read "," write ","f read ","File  open "," old_read_query_result "," read_query_result_41 "," version_meets_minimum? ","@server_capabilities ! & ","@server_capabilities ! "," unpack_ read_rows  "," unpdata slice! ck_fields ","@server_cdata slice! pdata slice! bilities & != ","@server_cdata slice! pdata slice! bilities & "," redata slice! d_rows ","ddata slice! tdata slice!  size > "," read  size > ","ddata slice! tdata slice!  size "," read  size ","data slice!  [] + ","data slice!  [] * ","data slice!  [] ","ddata slice! tdata slice!  slice! "," read  slice! "," get_length  == "," redata slice! d ","f redata slice! d "," old_redata slice! d_query_result "," redata slice! d_query_result_41 ","@server_cdata slice! pdata slice! bilities ! & ","@server_cdata slice! pdata slice! bilities ! "]}," Mysql inspect":{"type":"method","name":"inspect","children":[],"call":[" class "]}," Mysql skip_result":{"type":"method","name":"skip_result","children":[],"call":["data length == ","data length ","data [] == ","data [] "," read "," loop ","@status == "," old_skip_result "," skip_result_41 "," version_meets_minimum? "," read  length == "," read  length "," read  [] == "," read  [] "]}," Mysql read_one_row":{"type":"method","name":"read_one_row","children":[],"call":["rec << ","data slice! ","len == "," get_length ","field_count times ","data length == ","data length ","data [] == ","data [] "," read "," old_read_one_row "," read_one_row_41 "," version_meets_minimum? "," read  slice! "," get_length  == "," get_ get_length gth ","data  get_length gth == "," read  length == ","data  get_length gth "," read  length "," read  [] == "," read  [] "]}," Mysql stat":{"type":"method","name":"stat","children":[],"call":[" command "]}," Mysql shutdown":{"type":"method","name":"shutdown","children":[],"call":[" command "]}," Mysql select_db":{"type":"method","name":"select_db","children":[],"call":[" command "]}," Mysql reload":{"type":"method","name":"reload","children":[],"call":[" refresh "]}," Mysql refresh":{"type":"method","name":"refresh","children":[],"call":[" command ","r chr "]}," Mysql query":{"type":"method","name":"query","children":[],"call":[" store_result ","@field_count == ","@query_with_result ! "," real_query "]}," Mysql ping":{"type":"method","name":"ping","children":[],"call":[" command "]}," Mysql list_tables":{"type":"method","name":"list_tables","children":[],"call":[" read_rows flatten "," read_rows "," real_query "]}," Mysql list_processes":{"type":"method","name":"list_processes","children":[],"call":[" store_result "," unpack_fields ","@server_capabilities & != ","@server_capabilities & "," read_rows "," get_length "," command ","@server_capabilities ! & ","@server_capabilities ! "," unpack_ read_rows  "]}," Mysql list_fields":{"type":"method","name":"list_fields","children":[],"call":["res eof= ","Result  new ","f length "," unpack_fields ","@server_capabilities & != ","@server_capabilities & "," read_rows "," command ","@server_capabilities ! & ","@server_capabilities ! ","Result  new  eof= ","res eo read_rows = "," read_rows  length "," unpack_ unpack_fields  "," unpack_ read_rows ields "]}," Mysql list_dbs":{"type":"method","name":"list_dbs","children":[],"call":[" read_rows flatten "," read_rows "," real_query "]}," Mysql kill":{"type":"method","name":"kill","children":[],"call":[" command ","Net  int4str "]}," Mysql get_server_info":{"type":"method","name":"get_server_info","children":[],"call":[]}," Mysql get_proto_info":{"type":"method","name":"get_proto_info","children":[],"call":[]}," Mysql get_host_info":{"type":"method","name":"get_host_info","children":[],"call":[]}," Mysql dump_debug_info":{"type":"method","name":"dump_debug_info","children":[],"call":[" command "]}," Mysql drop_db":{"type":"method","name":"drop_db","children":[],"call":[" command "]}," Mysql create_db":{"type":"method","name":"create_db","children":[],"call":[" command "]}," Mysql close":{"type":"method","name":"close","children":[],"call":["@net close "," command "]}," Mysql character_set_name":{"type":"method","name":"character_set_name","children":[],"call":[" raise "]}," Mysql change_user":{"type":"method","name":"change_user","children":[],"call":[" command ","user + + + + ","user + + + ","user + + "," scramble ","@protocol_version == ","user + "," scramble411 "," version_meets_minimum? "," scramble41 ","@server_capabilities ! & ","@server_capabilities ! "," handle_auth_fallback "]}," Mysql store_result":{"type":"method","name":"store_result","children":[],"call":["data length ","Result  new "," read_rows "," error ","@status != "," read_rows  length "]}," Mysql use_result":{"type":"method","name":"use_result","children":[],"call":["Result  new "," error ","@status != "]}," Mysql real_query":{"type":"method","name":"real_query","children":[],"call":[" read_query_result "," command "]}," Mysql options":{"type":"method","name":"options","children":[],"call":[" raise ","CLIENT_LOCAL_FILES  ~ ","arg == ","option == "]}," Mysql get_client_info":{"type":"method","name":"get_client_info","children":[],"call":[]}," Mysql escape_string":{"type":"method","name":"escape_string","children":[],"call":["Mysql  escape_string "]}," Mysql real_connect":{"type":"method","name":"real_connect","children":[],"call":[" read "," write ","db dup ","data << ","\u0000 + ","@server_capabilities & != ","@server_capabilities & ","Net  int2str + + + + "," scramble ","@protocol_version == ","Net  int2str + + + ","Net  int2str + + ","Net  int2str + ","Net  int3str ","Net  int2str ","@client_flag | ","flag == ","a unpack ","a size >= ","a size ","a slice! unpack ","a slice! ","a split ","Net  new ","sock setsockopt ","host dup "," sprintf ","Error  err ","TCPSocket  new ","Socket  getservbyname ","ENV  [] ","UNIXSocket  new ","host == "," make_client_auth_packet_41 "," scramble411 ","@scramble_buff << "," version_meets_minimum? ","v to_i ","version split map ","version split ","@server_version split ","version strip >= ","version strip ","ObjectSpace  define_finalizer ","Mysql  finalizer ","db + ","Net  int4str + + + + + "," scramble41 ","Net  int4str + + + + ","Net  int4str + + + ","Net  int4str + + ","(send\n  (array\n    (int 8)) :+\n  (send\n    (const nil :Array) :new\n    (int 23)\n    (int 0))) pack ","(int 8) + ","Array  new ","Net  int4str + ","Net  int4str ","@server_capabilities ! & ","@server_capabilities ! ","0 == "," handle_auth_fallback "," re read d ","Net  int2str + + + +  << "," make_client_auth_packet_41  << ","Net  int4str + + + + +  << ","d read t read  << ","@server_c read p read bilities & != ","@server_c read p read bilities & "," scr read mble ","a slice!  == ","@client_fl read g | ","fl read g == "," read  unp read ck "," read  size >= "," read  size "," read  slice! unp read ck "," read  slice! "," read  split ","TCPSocket  new  setTCPSocket  new opt ","UNIXSocket  new  setUNIXSocket  new opt ","Socket  getservbyn read me "," m read ke_client_ read uth_p read cket_41 "," scr read mble411 ","@scr read mble_buff << ","version split m read p ","ObjectSp read ce  define_fin read lizer ","Mysql  fin read lizer "," scr read mble41 ","(send\n  ( read rr read y\n    (int 8)) :+\n  (send\n    (const nil :Arr read y) :new\n    (int 23)\n    (int 0))) p read ck ","Arr read y  new ","@server_c read p read bilities ! & ","@server_c read p read bilities ! "," h read ndle_ read uth_f read llb read ck "]}," Mysql initialize":{"type":"method","name":"initialize","children":[],"call":[" real_connect ","args [] != ","args [] "]}," ActiveRecord Errors count":{"type":"method","name":"count","children":[],"call":["attribute length ","@errors each_value "]}," ActiveRecord Errors clear":{"type":"method","name":"clear","children":[],"call":["ActiveSupport OrderedHash  new "]}," ActiveRecord Errors empty?":{"type":"method","name":"empty?","children":[],"call":["@errors empty? "]}," ActiveRecord Errors full_messages":{"type":"method","name":"full_messages","children":[],"call":["full_messages << ","@base class human_attribute_name + + ","@base class human_attribute_name + ","@base class human_attribute_name ","@base class ","attr == ","@errors [] each ","@errors [] ","@errors each_key ","msg nil? ","attr_name + + ","attr_name + ","full_messages + ","error full_message ","errors map ","@errors values inject ","@errors values ","I18n  t ","@base class human_attribute_name  + + ","@base class human_attribute_name  + "]}," ActiveRecord Errors each_full":{"type":"method","name":"each_full","children":[],"call":[" full_messages each "," full_messages "]}," ActiveRecord Errors each":{"type":"method","name":"each","children":[],"call":["@errors [] each ","@errors [] ","@errors each_key ","error message "]}," ActiveRecord Errors on_base":{"type":"method","name":"on_base","children":[],"call":[" on "]}," ActiveRecord Errors on":{"type":"method","name":"on","children":[],"call":["@errors [] ","@errors [] first ","@errors [] length == ","@errors [] length ","@errors [] nil? ","attribute to_s ","errors first ","errors size == ","errors size ","errors nil? ","@errors [] map ","@errors has_key? ","@@errors []  [] ","@@errors [] map  [] ","@@errors []  [] first ","@@errors [] map  [] first ","@@errors []  [] length == ","@@errors [] map  [] length == ","@@errors []  [] length ","@@errors [] map  [] length ","@@errors []  [] nil? ","@@errors [] map  [] nil? ","attribute to_s  to_s ","@errors []  first ","@errors [] map  first ","@errors []  size == ","@errors [] map  size == ","@errors []  size ","@errors [] map  size ","@errors []  nil? ","@errors [] map  nil? ","@@errors []  [] map ","@@errors [] map  [] map ","@@errors []  has_key? ","@@errors [] map  has_key? "]}," ActiveRecord Errors invalid?":{"type":"method","name":"invalid?","children":[],"call":["@errors [] nil? ! ","@errors [] nil? ","@errors [] ","attribute to_s "]}," ActiveRecord Errors add_on_boundary_breaking":{"type":"method","name":"add_on_boundary_breaking","children":[],"call":[" add ","too_long_msg % ","range end ","@base send length > ","@base send length ","@base send ","@base attribute_present? ","too_short_msg % ","range begin ","@base send length < ","(lvar :attributes) flatten ","value length > ","value length ","value length < ","@base [] ","attr to_s ","@base respond_to? ","@base []  length > ","@base send  length > ","@base []  length ","@base send  length ","@base []  length < ","@base send  length < "]}," ActiveRecord Errors add_on_empty":{"type":"method","name":"add_on_empty","children":[],"call":[" add ","@base attribute_present? ","(lvar :attributes) flatten each ","(lvar :attributes) flatten ","is_empty ! ","value nil? ! ","value nil? ","value empty? ","value respond_to? ","@base [] ","attr to_s ","@base send ","@base respond_to? ","value empty?  ! ","@base []  nil? ! ","@base send  nil? ! ","@base []  nil? ","@base send  nil? ","@base []  empty? ","@base send  empty? ","@base []  respond_to? ","@base send  respond_to? "]}," ActiveRecord Errors add":{"type":"method","name":"add","children":[],"call":["@errors [] << ","@errors [] ","@errors []= ","@errors [] nil? ","attribute to_s "," generate_message ","message is_a? ","Error  new ","options []= ","options delete ","options [] is_a? ","options [] ","options has_key? ","error_or_attr attribute ","error_or_attr is_a? "," generate_ generate_message  "," generate_message  is_a? "]}," ActiveRecord Errors add_to_base":{"type":"method","name":"add_to_base","children":[],"call":[" add "]}," ActiveRecord Errors initialize":{"type":"method","name":"initialize","children":[],"call":[" clear "]}," ActiveRecord Validations validate_on_update":{"type":"method","name":"validate_on_update","children":[],"call":[]}," ActiveRecord Validations validate_on_create":{"type":"method","name":"validate_on_create","children":[],"call":[]}," ActiveRecord Validations validate":{"type":"method","name":"validate","children":[],"call":[]}," ActiveRecord Validations errors":{"type":"method","name":"errors","children":[],"call":["Errors  new ","@errors nil? ","Errors  new  nil? "]}," ActiveRecord Validations valid?":{"type":"method","name":"valid?","children":[],"call":[" errors empty? "," errors "," validate_on_update "," validate_on_create "," new_record? "," validate "," errors clear "," run_validations "," run_callbacks "," deprecated_callback_method "," persisted? "," default_validation_context "]}," ActiveRecord Validations update_attribute_with_validation_skipping":{"type":"method","name":"update_attribute_with_validation_skipping","children":[],"call":[" save ","@attributes []= "," []= "," send ","name to_s + ","name to_s "]}," ActiveRecord Validations save_with_validation":{"type":"method","name":"save_with_validation","children":[],"call":[" save_without_validation ","perform_validation ! "," valid? "]}," ActiveRecord Validations append_features":{"type":"method","name":"append_features","children":[],"call":[]}," ActiveRecord Transactions save_with_transactions":{"type":"method","name":"save_with_transactions","children":[],"call":[" save_without_transactions ","ActiveRecord Base  transaction ","TRANSACTION_MUTEX  locked? "," transaction "," rollback_active_record_state! "," with_transaction_returning_status "]}," ActiveRecord Transactions destroy_with_transactions":{"type":"method","name":"destroy_with_transactions","children":[],"call":[" destroy_without_transactions ","ActiveRecord Base  transaction ","TRANSACTION_MUTEX  locked? "," transaction "," with_transaction_returning_status "]}," ActiveRecord Transactions ClassMethods transaction":{"type":"method","name":"transaction","children":[],"call":["TRANSACTION_MUTEX  unlock "," raise ","o abort_transaction ","objects each "," connection rollback_db_transaction "," connection ","o commit_transaction "," connection commit_db_transaction ","block call "," connection begin_db_transaction ","o start_transaction ","o extend ","TRANSACTION_MUTEX  lock "," connection transaction "," trap "," unlock_mutex ","Thread  current [] ","Thread  current "," lock_mutex "," decrement_open_transactions ","ActiveSupport Deprecation  warn "," caller ","objects empty? "," increment_open_transactions ","TRANSACTION_MUTEX  synchronize ","Thread  current []= ","Thread  current [] == "," connection decrement_open_transactions "," connection open_transactions == "," connection open_transactions "," connection increment_open_transactions "]}," ActiveRecord Transactions append_features":{"type":"method","name":"append_features","children":[],"call":[]}," Inflector singular_rules":{"type":"method","name":"singular_rules","children":[],"call":[]}," Inflector plural_rules":{"type":"method","name":"plural_rules","children":[],"call":[]}," Inflector foreign_key":{"type":"method","name":"foreign_key","children":[],"call":["Inflector  underscore + ","Inflector  underscore ","Inflector  demodulize "]}," Inflector demodulize":{"type":"method","name":"demodulize","children":[],"call":["class_name_in_module gsub ","class_name_in_module to_s gsub ","class_name_in_module to_s "]}," Inflector underscore":{"type":"method","name":"underscore","children":[],"call":["camel_cased_word gsub gsub downcase ","camel_cased_word gsub gsub ","camel_cased_word gsub ","camel_cased_word to_s gsub gsub downcase ","camel_cased_word to_s gsub gsub ","camel_cased_word to_s gsub ","camel_cased_word to_s "]}," Inflector camelize":{"type":"method","name":"camelize","children":[],"call":["2 upcase ","lower_case_and_underscored_word gsub ","lower_case_and_underscored_word to_s gsub ","lower_case_and_underscored_word to_s "]}," Inflector singularize":{"type":"method","name":"singularize","children":[],"call":["result gsub! "," singular_rules each "," singular_rules ","word dup ","word to_s dup ","word to_s ","word dup  gsub! ","word to_s dup  gsub! "]}," Inflector pluralize":{"type":"method","name":"pluralize","children":[],"call":["result gsub! "," plural_rules each "," plural_rules ","word dup ","word to_s dup ","word to_s ","word dup  gsub! ","word to_s dup  gsub! "]}," Logger format_message":{"type":"method","name":"format_message","children":[],"call":["Format  % "]}," ClassInheritableAttributes ClassMethods inherited":{"type":"method","name":"inherited","children":[],"call":["@@classes []= "," inheritable_attributes dup "," inheritable_attributes "]}," ClassInheritableAttributes ClassMethods read_inheritable_attribute":{"type":"method","name":"read_inheritable_attribute","children":[],"call":[" inheritable_attributes [] "," inheritable_attributes "]}," ClassInheritableAttributes ClassMethods write_inheritable_array":{"type":"method","name":"write_inheritable_array","children":[],"call":[" write_inheritable_attribute "," read_inheritable_attribute + "," read_inheritable_attribute "," read_inheritable_attribute nil? "]}," ClassInheritableAttributes ClassMethods write_inheritable_attribute":{"type":"method","name":"write_inheritable_attribute","children":[],"call":[" inheritable_attributes []= "," inheritable_attributes "]}," ClassInheritableAttributes ClassMethods inheritable_attributes":{"type":"method","name":"inheritable_attributes","children":[],"call":["@@classes [] "]}," ClassInheritableAttributes append_features":{"type":"method","name":"append_features","children":[],"call":[]}," Class cattr_accessor":{"type":"method","name":"cattr_accessor","children":[],"call":[" cattr_writer "," cattr_reader "]}," Class cattr_writer":{"type":"method","name":"cattr_writer","children":[],"call":[" class_eval ","sym id2name ","syms each "]}," Class cattr_reader":{"type":"method","name":"cattr_reader","children":[],"call":[" class_eval ","sym id2name ","syms each "]}," ActiveRecord Reflection AssociationReflection name_to_class_name":{"type":"method","name":"name_to_class_name","children":[],"call":[" active_record send "," active_record class_name "," active_record table_name_prefix + + "," active_record table_name_suffix "," active_record "," active_record table_name_prefix + "," active_record table_name_prefix "," options [] "," options ","name !~ ","class_name singularize ","(sym :has_many) include? "," macro ","name to_s camelize ","name to_s ","name =~ "," source_reflection class_name "," source_reflection "," through_reflection "," active_record  active_record send  "," active_record class_name singularize  "," active_record name to_s camelize  "," active_record  options []  "," active_record send  singularize ","class_name singularize  singularize ","name to_s camelize  singularize "," options []  singularize "," source_reflection  active_record send  "," source_reflection class_name singularize  "," source_reflection name to_s camelize  "," source_reflection  options []  "]}," ActiveRecord Reflection AssociationReflection klass":{"type":"method","name":"klass","children":[],"call":[" active_record send "," name_to_class_name "," name id2name "," name "," active_record "," class_name "," compute_class "]}," ActiveRecord Reflection AggregateReflection name_to_class_name":{"type":"method","name":"name_to_class_name","children":[],"call":["1 capitalize ","name capitalize gsub ","name capitalize "]}," ActiveRecord Reflection AggregateReflection klass":{"type":"method","name":"klass","children":[],"call":["Object  const_get "," name_to_class_name "," name id2name "," name "," options [] "," options "," class_name "]}," ActiveRecord Reflection MacroReflection ==":{"type":"method","name":"==","children":[],"call":[" active_record == ","other_aggregation active_record "," active_record ","other_aggregation options "," name == ","other_aggregation name "," name ","other_aggregation kind_of? "," class ","other_aggregation options nil? ! ","other_aggregation options nil? "]}," ActiveRecord Reflection MacroReflection klass":{"type":"method","name":"klass","children":[],"call":[" class_name constantize "," class_name "," compute_class "]}," ActiveRecord Reflection MacroReflection options":{"type":"method","name":"options","children":[],"call":[]}," ActiveRecord Reflection MacroReflection name":{"type":"method","name":"name","children":[],"call":[]}," ActiveRecord Reflection MacroReflection initialize":{"type":"method","name":"initialize","children":[],"call":["name to_s ","name to_s pluralize ","active_record pluralize_table_names ","options [] "]}," ActiveRecord Reflection ClassMethods reflect_on_association":{"type":"method","name":"reflect_on_association","children":[],"call":["reflection name == ","reflection name "," reflect_on_all_associations find "," reflect_on_all_associations "," reflect_on_all_associations nil? "," reflections [] "," reflections "," reflections [] is_a? ","reflection is_a? ","association to_sym ","association to_s "," reflections []  name == "," reflections []  name ","  reflections [] s [] ","  reflections [] s ","  reflections [] s [] is_a? "," reflections []  is_a? "]}," ActiveRecord Reflection ClassMethods reflect_on_all_associations":{"type":"method","name":"reflect_on_all_associations","children":[],"call":[" read_inheritable_attribute "," write_inheritable_attribute ","reflection macro == ","reflection macro ","association_reflections select ","reflection is_a? "," reflections values select "," reflections values "," reflections "," reflections values grep ","association_reflections select! "," reflections values grep  select "," reflections values  select "," reflections values grep  select! "," reflections values  select! "]}," ActiveRecord Reflection ClassMethods reflect_on_aggregation":{"type":"method","name":"reflect_on_aggregation","children":[],"call":["reflection name == ","reflection name "," reflect_on_all_aggregations find "," reflect_on_all_aggregations "," reflect_on_all_aggregations nil? "," reflections [] "," reflections "," reflections [] is_a? ","reflection is_a? "," aggregate_reflections [] "," aggregate_reflections ","aggregation to_sym ","aggregation to_s "," reflections []  name == "," reflections []  name ","  reflections [] s [] ","  reflections [] s ","  reflections [] s [] is_a? "," reflections []  is_a? "," aggregate_ reflections [] s [] "," aggregate_ reflections [] s "]}," ActiveRecord Reflection ClassMethods reflect_on_all_aggregations":{"type":"method","name":"reflect_on_all_aggregations","children":[],"call":[" read_inheritable_attribute "," write_inheritable_attribute ","reflection is_a? "," reflections values select "," reflections values "," reflections "," reflections values grep "," aggregate_reflections values "," aggregate_reflections "]}," ActiveRecord Reflection append_features":{"type":"method","name":"append_features","children":[{"type":"method","name":"composed_of_with_reflection","children":[],"asgn":[],"call":[" write_inheritable_array ","AggregateReflection  new "," composed_of_without_reflection "]}],"call":[]}," ActiveRecord Observer infer_observed_class_name":{"type":"method","name":"infer_observed_class_name","children":[],"call":[" class name scan [] [] "," class name scan [] "," class name scan "," class name "," class "]}," ActiveRecord Observer observed_class":{"type":"method","name":"observed_class","children":[],"call":["Object  const_get "," infer_observed_class_name "," class observed_class "," class "," class respond_to? "," name scan [] [] constantize "," name scan [] [] "," name scan [] "," name scan "," name ","observed_class_name [] constantize ","observed_class_name [] ","observed_class_name constantize "," name [] "," infer_ name scan []  "," infer_ name []  "," name scan []  [] constantize "," name []  [] constantize "," name scan []  [] "," name []  [] "," name scan []  constantize "," name []  constantize "]}," ActiveRecord Observer update":{"type":"method","name":"update","children":[],"call":[" send "," respond_to? "]}," ActiveRecord Observer initialize":{"type":"method","name":"initialize","children":[],"call":["klass send ","klass respond_to? ","klass add_observer ","(send nil :observed_class) flatten each ","(send nil :observed_class) flatten "," observed_class ","(send\n  (lvar :observed_classes) :+\n  (lvar :observed_subclasses_class)) each ","observed_classes + ","(send\n  (lvar :observed_classes) :collect) flatten! ","c send ","observed_classes collect "," add_observer! ","Set  new each ","Set  new "," observed_classes + "," observed_subclasses "," observed_classes "," observed_descendants each "," observed_descendants "," observed_subclasses each ","(send\n  (lvar :observed_classes) :+\n  (lvar :(send\n  (lvar :observed_classes) :collect) flatten! )) each ","(send\n  (lvar :(send nil :observed_class) flatten ) :+\n  (lvar :observed_subclasses_class)) each ","(send nil :observed_class) flatten  + ","(send\n  (lvar :(send nil :observed_class) flatten ) :collect) flatten! ","(send nil :observed_class) flatten  collect "," (send nil :observed_class) flatten  + "," (send nil :observed_class) flatten  "]}," YamlFixture produce":{"type":"method","name":"produce","children":[],"call":["YamlFixture  produce "]}," YamlFixture initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Fixture read_fixture":{"type":"method","name":"read_fixture","children":[],"call":["fixture []= ","value strip ","key strip ","line split ","IO  readlines inject ","IO  readlines "]}," Fixture value_list":{"type":"method","name":"value_list","children":[],"call":["(send\n  (send\n    (ivar :@fixture) :values) :map) join ","@fixture values map ","@fixture values ","ActiveRecord Base  connection quote gsub gsub ","ActiveRecord Base  connection quote gsub ","ActiveRecord Base  connection quote ","ActiveRecord Base  connection ","list * ","fixtures << ","klass columns_hash [] ","klass columns_hash ","klass kind_of? ","@fixture inject ","@class_name constantize ","klass ancestors include? ","klass ancestors ","klass respond_to? "," model_class columns_hash [] "," model_class columns_hash "," model_class "," model_class ancestors include? "," model_class ancestors "," model_class respond_to? ","@connection quote gsub gsub ","@connection quote gsub ","@connection quote ","(send\n  (ivar :@fixture) :map) join ","cols [] ","@fixture map "," model_class < ","klass klass columns_hash [] umns_hash [] ","klass  model_class columns_hash [] umns_hash [] ","klass klass columns_hash [] umns_hash ","klass  model_class columns_hash [] umns_hash "," model_class klass columns_hash [] umns_hash [] "," model_class  model_class columns_hash [] umns_hash [] "," model_class klass columns_hash [] umns_hash "," model_class  model_class columns_hash [] umns_hash ","klass columns_hash [] s [] "," model_class columns_hash [] s [] "," model_class columns_hash  [] "]}," Fixture key_list":{"type":"method","name":"key_list","children":[],"call":["@fixture keys join ","@fixture keys ","columns join ","ActiveRecord Base  connection quote_column_name ","ActiveRecord Base  connection ","@fixture keys collect ","@connection quote_column_name ","(send\n  (send\n    (ivar :@fixture) :keys) :map) join ","@fixture keys map "]}," Fixture to_hash":{"type":"method","name":"to_hash","children":[],"call":[]}," Fixture []":{"type":"method","name":"[]","children":[],"call":["@fixture [] "," fixture [] "," fixture "]}," Fixture initialize":{"type":"method","name":"initialize","children":[],"call":[" read_fixture "," read_fixture_file ","fixture is_a? "," raise ","fixture inspect ","model_class constantize ","model_class is_a? "," class_name "]}," Fixtures []=":{"type":"method","name":"[]=","children":[],"call":["@fixtures []= "," fixtures []= "," fixtures "]}," Fixtures insert_fixtures":{"type":"method","name":"insert_fixtures","children":[],"call":["@connection execute ","fixture value_list ","fixture key_list ","@fixtures values each ","@fixtures values "," values each "," values "," allow_identity_inserts "," table_name "," original_insert_fixtures ","@connection enable_identity_insert ","@connection instance_of? ","fixture insert_fixtures ","fixture delete_existing_fixtures ","habtm_fixtures values each ","habtm_fixtures values ","@connection insert_fixture ","join_fixtures []= ","Fixture  new ","Fixtures  identify ","association association_foreign_key ","row [] "," primary_key_name ","association primary_key_name ","targets each ","habtm_fixtures [] ","targets split ","targets is_a? ","row delete ","association name to_s ","association name ","row []= ","(or\n  (send\n    (send\n      (lvar :association) :options) :[]\n    (sym :foreign_type))\n  (dstr\n    (begin\n      (send\n        (lvar :association) :name))\n    (str \"_type\"))) to_s ","association options [] ","association options ","value sub! ","association name to_s != ","(or\n  (send\n    (send\n      (lvar :association) :options) :[]\n    (sym :foreign_key))\n  (dstr\n    (begin\n      (send\n        (lvar :association) :name))\n    (str \"_id\"))) to_s ","association macro ","reflection_class reflect_on_all_associations each ","reflection_class reflect_on_all_associations "," model_class ","row [] constantize "," inheritance_column_name ","row include? ","row include? ! "," has_primary_key_column? ","value == ","row each ","row key? "," timestamp_column_names each "," timestamp_column_names "," model_class record_timestamps "," model_class < ","fixture to_hash "," each ","h []= ","HabtmFixtures  new ","habtm options [] ","habtm options ","Hash  new "," delete "," assoc ","now to_s ","Time  now ","Time  now utc ","ActiveRecord Base  default_timezone == ","ActiveRecord Base  default_timezone "," is_a? ","fixture row delete _list ","@fixtures row delete s each ","@fixtures row delete s "," row delete s each "," row delete s ","habtm_fixtures row delete s each ","habtm_fixtures row delete s ","habtm_fixtures []  []= ","fixture to_hash  [] ","targets split  each ","row delete  each ","targets split  split ","row delete  split ","targets split  is_a? ","row delete  is_a? ","fixture to_hash  delete ","fixture to_hash  []= ","row delete  sub! "," model_class  reflect_on_all_associations each "," model_class  reflect_on_all_associations ","fixture to_hash  [] constantize ","fixture to_hash  include? ","fixture to_hash  include? ! ","row delete  == ","fixture to_hash  each ","fixture to_hash  key? ","now to_s  to_s ","Time  now  to_s ","Time  now utc  to_s ","Time  now to_s  ","Time  Time  now  ","Time  Time  now utc  ","Time  now to_s  utc ","Time  Time  now  utc ","Time  Time  now utc  utc "]}," Fixtures delete_existing_fixtures":{"type":"method","name":"delete_existing_fixtures","children":[],"call":["@connection delete ","@connection quote_table_name "," table_name "]}," Fixtures read_fixtures":{"type":"method","name":"read_fixtures","children":[],"call":["fixtures []= ","fix yaml_name ","YamlFixture  produce each ","YamlFixture  produce ","file =~ ","Fixture  new ","Dir  entries inject ","Dir  entries "]}," Fixtures length":{"type":"method","name":"length","children":[],"call":["@fixtures length "]}," Fixtures []":{"type":"method","name":"[]","children":[],"call":["@fixtures [] "," fixtures [] "," fixtures "]}," Fixtures initialize":{"type":"method","name":"initialize","children":[],"call":[" insert_fixtures "," delete_existing_fixtures "," read_fixtures "," read_fixture_files ","Inflector  classify ","ActiveRecord Base  table_name_prefix + + ","ActiveRecord Base  table_name_suffix ","ActiveRecord Base  table_name_prefix + ","ActiveRecord Base  table_name_prefix ","@table_name camelize ","@table_name singularize camelize ","@table_name singularize ","ActiveRecord Base  pluralize_table_names ","class_name connection ","class_name respond_to? ","class_name table_name ","class_name constantize ","class_name is_a? ","ActiveSupport OrderedHash  new ","ActiveRecord Base  table_name_prefix + +  camelize ","class_name table_name  camelize ","ActiveRecord Base  table_name_prefix + +  singularize camelize ","class_name table_name  singularize camelize ","ActiveRecord Base  table_name_prefix + +  singularize ","class_name table_name  singularize "]}," Fixtures create_fixtures":{"type":"method","name":"create_fixtures","children":[],"call":[]}," ActiveRecord Associations ClassMethods deprecated_build_method":{"type":"method","name":"deprecated_build_method","children":[],"call":[" module_eval ","method_prefix + "]}," ActiveRecord Associations ClassMethods deprecated_create_method":{"type":"method","name":"deprecated_create_method","children":[],"call":[" module_eval ","method_prefix + "]}," ActiveRecord Associations ClassMethods deprecated_find_all_in_collection_method":{"type":"method","name":"deprecated_find_all_in_collection_method","children":[],"call":[" module_eval "]}," ActiveRecord Associations ClassMethods deprecated_find_in_collection_method":{"type":"method","name":"deprecated_find_in_collection_method","children":[],"call":[" module_eval "]}," ActiveRecord Associations ClassMethods deprecated_has_collection_method":{"type":"method","name":"deprecated_has_collection_method","children":[],"call":[" module_eval "]}," ActiveRecord Associations ClassMethods deprecated_remove_association_relation":{"type":"method","name":"deprecated_remove_association_relation","children":[],"call":[" module_eval "]}," ActiveRecord Associations ClassMethods deprecated_add_association_relation":{"type":"method","name":"deprecated_add_association_relation","children":[],"call":[" module_eval "]}," ActiveRecord Associations ClassMethods deprecated_collection_count_method":{"type":"method","name":"deprecated_collection_count_method","children":[],"call":[" module_eval "]}," ActiveRecord ConnectionAdapters SQLiteAdapter table_structure":{"type":"method","name":"table_structure","children":[],"call":["connection execute "," log "," execute "," raise ","structure empty? "," returning "," quote_table_name "," execute tap ","@connection table_info "," exec_query to_hash "," exec_query "," execute  empty? ","@connection table_info  empty? "," exec_query to_hash  empty? "]}," ActiveRecord ConnectionAdapters SQLiteAdapter select":{"type":"method","name":"select","children":[],"call":["rows << ","hash_only_row []= ","row [] ","key gsub ","key class == ","key class ","row each_key ","results each ","connection execute "," log ","key sub ","record []= ","key is_a? "," execute map "," execute ","row each "," exec_query to_a "," exec_query ","connection execute  each "]}," ActiveRecord ConnectionAdapters SQLiteAdapter quote_column_name":{"type":"method","name":"quote_column_name","children":[],"call":["name to_s gsub ","name to_s "]}," ActiveRecord ConnectionAdapters SQLiteAdapter rollback_db_transaction":{"type":"method","name":"rollback_db_transaction","children":[],"call":[" execute ","@connection rollback "," catch_schema_changes "," log "]}," ActiveRecord ConnectionAdapters SQLiteAdapter commit_db_transaction":{"type":"method","name":"commit_db_transaction","children":[],"call":[" execute ","@connection commit "," catch_schema_changes "," log "]}," ActiveRecord ConnectionAdapters SQLiteAdapter begin_db_transaction":{"type":"method","name":"begin_db_transaction","children":[],"call":[" execute ","@connection transaction "," catch_schema_changes "," log "]}," ActiveRecord ConnectionAdapters SQLiteAdapter execute":{"type":"method","name":"execute","children":[],"call":["connection execute ","connection rollback ","connection commit ","connection transaction "," log ","@connection execute "," catch_schema_changes "]}," ActiveRecord ConnectionAdapters SQLiteAdapter insert":{"type":"method","name":"insert","children":[],"call":["@connection send "," execute ","@connection last_insert_row_id "]}," ActiveRecord ConnectionAdapters SQLiteAdapter columns":{"type":"method","name":"columns","children":[],"call":["columns << ","Column  new ","field [] "," table_structure inject "," table_structure ","SQLiteColumn  new "," table_structure map ","field [] == ","field [] to_i == ","field [] to_i ","field []= ","1 gsub "]}," ActiveRecord ConnectionAdapters SQLiteAdapter select_one":{"type":"method","name":"select_one","children":[],"call":["result first ","result nil? "," select "," select_all "," select  first "," select_all  first "," select  nil? "," select_all  nil? "]}," ActiveRecord ConnectionAdapters SQLiteAdapter select_all":{"type":"method","name":"select_all","children":[],"call":[" select ","record []= ","row [] ","key sub ","key is_a? ","row each_key "," execute map "," execute "]}," ActiveRecord Base sqlite_connection":{"type":"method","name":"sqlite_connection","children":[],"call":["ConnectionAdapters DeprecatedSQLiteAdapter  new "," logger ","ConnectionAdapters SQLiteAdapter  new ","SQLite  const_defined? ","db type_translation= ","db results_as_hash= ","db show_datatypes= ","(const\n  (const nil :SQLite) :Version) ! ","SQLite Database  new ","config [] "," require_library_or_gem "," class const_defined? "," class "," parse_config! ","ConnectionAdapters SQLite2Adapter  new "," parse_sqlite_config! ","ActiveSupport Deprecation  warn ","message << ","SQLite Database  new  type_translation= ","SQLite Database  new  results_as_hash= ","SQLite Database  new  show_datatypes= "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter default_value":{"type":"method","name":"default_value","children":[],"call":["value =~ ","Time  now to_s ","Time  now "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter type_as_string":{"type":"method","name":"type_as_string","children":[],"call":["type + ","field_length nil? "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter table_structure":{"type":"method","name":"table_structure","children":[],"call":["row [] "," default_value "," type_as_string ","column_defaults collect ","connection query "," log ","sql << "," split_table_schema ","@connection db ","  default_value _value ","  type_as_string _as_string ","column_ default_value s collect ","connection query  collect "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter split_table_schema":{"type":"method","name":"split_table_schema","children":[],"call":["schema_split last strip ","schema_split last ","schema_split first strip ","schema_split first ","schema_split length > ","schema_split length ","table_name split ","table_name split  last strip ","table_name split  last ","table_name split  first strip ","table_name split  first ","table_name split  length > ","table_name split  length ","schema_split last strip  split "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter select":{"type":"method","name":"select","children":[],"call":["rows << ","hashed_row []= ","row [] ","fields [] ","row each_index ","results each ","res fields ","results length > ","results length ","res result ","connection exec "," log "," unescape_bytea ","res type == ","res type "," execute "," cast_to_time ","res clear ","column to_d ","column respond_to? ","result << ","row_hash []= ","fields each_with_index "," select_raw ","Hash  [] ","fields zip flatten ","fields zip ","rows map "," exec_query to_a "," exec_query ","res fields  [] ","res result  each ","connection exec ults each "," execute ults each ","res res fields  ","connection exec  fields "," execute  fields ","res result  length > ","connection exec ults length > "," execute ults length > ","res result  length ","connection exec ults length "," execute ults length ","connection exec  connection exec ult "," execute   execute ult ","connection exec  type == "," execute  type == ","connection exec  type "," execute  type ","connection exec  clear "," execute  clear "," unescape_bytea  to_d ","row []  to_d "," cast_to_time  to_d ","column to_d  to_d ","column connection exec pond_to? ","column  execute pond_to? "," unescape_bytea  respond_to? ","row []  respond_to? "," cast_to_time  respond_to? ","column to_d  respond_to? ","connection exec ult << "," execute ult << ","res fields  each_with_index ","res fields  zip flatten ","res fields  zip "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter last_insert_id":{"type":"method","name":"last_insert_id","children":[],"call":["@connection exec [] [] to_i ","@connection exec [] [] ","@connection exec [] ","@connection exec "," Integer "," select_value ","r rows first first ","r rows first ","r rows "," exec_query "," last_insert_id_value "," Intege exec_query  "," exec_query   exec_query ows fi exec_query st fi exec_query st "," exec_query   exec_query ows fi exec_query st "," exec_query   exec_query ows "," exec_que exec_query y "," last_inse exec_query t_id_value "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter quote_column_name":{"type":"method","name":"quote_column_name","children":[],"call":["PGconn  quote_ident ","name to_s "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter rollback_db_transaction":{"type":"method","name":"rollback_db_transaction","children":[],"call":[" execute "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter commit_db_transaction":{"type":"method","name":"commit_db_transaction","children":[],"call":[" execute "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter begin_db_transaction":{"type":"method","name":"begin_db_transaction","children":[],"call":[" execute "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter execute":{"type":"method","name":"execute","children":[],"call":["connection query "," log ","@connection exec ","@connection async_exec "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter insert":{"type":"method","name":"insert","children":[],"call":[" last_insert_id ","sql split [] ","sql split "," execute "," default_sequence_name ","sql split [] gsub "," pk_and_sequence_for "," clear_query_cache "," select_value "," quote_column_name "," supports_insert_with_returning? "," last_insert_ select_value  "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter columns":{"type":"method","name":"columns","children":[],"call":["columns << ","Column  new ","field [] "," table_structure inject "," table_structure "," translate_field_type "," default_value "," column_definitions collect "," column_definitions ","notnull == ","PostgreSQLColumn  new "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter select_one":{"type":"method","name":"select_one","children":[],"call":["result first ","result nil? "," select "," select  first "," select  nil? "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter select_all":{"type":"method","name":"select_all","children":[],"call":[" select "]}," ActiveRecord Base postgresql_connection":{"type":"method","name":"postgresql_connection","children":[],"call":[]}," ActiveRecord ConnectionAdapters MysqlAdapter select":{"type":"method","name":"select","children":[],"call":["rows << ","all_fields_initialized dup update ","all_fields_initialized dup ","result each_hash ","all_fields []= ","f name ","result fetch_fields inject ","result fetch_fields ","connection query ","connection query_with_result= "," log "," execute ","@connection query_with_result= ","result free ","all_fields dup update ","all_fields dup ","fields []= ","result all_hashes ","@connection next_result ","@connection more_results "," exec_query to_a "," exec_query ","result all_hashes  << "," exec_query to_a  << "," exec_query  << ","connection query  each_hash "," execute  each_hash ","connection query  fetch_fields inject "," execute  fetch_fields inject ","connection query  fetch_fields "," execute  fetch_fields ","connection query_with_connection query = ","connection query_with_ execute = ","@connection query_with_connection query = ","@connection query_with_ execute = ","connection query  free "," execute  free ","connection query  all_hashes "," execute  all_hashes ","@connection next_connection query  ","@connection next_ execute  ","@connection more_connection query s ","@connection more_ execute s "]}," ActiveRecord ConnectionAdapters MysqlAdapter create_database":{"type":"method","name":"create_database","children":[],"call":[" execute ","options [] "]}," ActiveRecord ConnectionAdapters MysqlAdapter drop_database":{"type":"method","name":"drop_database","children":[],"call":[" execute "]}," ActiveRecord ConnectionAdapters MysqlAdapter recreate_database":{"type":"method","name":"recreate_database","children":[],"call":[" create_database "," drop_database "]}," ActiveRecord ConnectionAdapters MysqlAdapter structure_dump":{"type":"method","name":"structure_dump","children":[],"call":[" select_one [] + "," select_one [] "," select_one ","table to_a first last ","table to_a first ","table to_a "," select_all inject "," select_all ","table delete "," supports_views? "," quote_table_name ","(send\n  (send nil :select_all\n    (lvar :sql)) :map) join "," select_all map "," exec_without_stmt first [] + "," exec_without_stmt first [] "," exec_without_stmt first "," exec_without_stmt "]}," ActiveRecord ConnectionAdapters MysqlAdapter quote_column_name":{"type":"method","name":"quote_column_name","children":[],"call":["@quoted_column_names [] ","name to_s gsub ","name to_s "]}," ActiveRecord ConnectionAdapters MysqlAdapter rollback_db_transaction":{"type":"method","name":"rollback_db_transaction","children":[],"call":[" execute "]}," ActiveRecord ConnectionAdapters MysqlAdapter commit_db_transaction":{"type":"method","name":"commit_db_transaction","children":[],"call":[" execute "]}," ActiveRecord ConnectionAdapters MysqlAdapter begin_db_transaction":{"type":"method","name":"begin_db_transaction","children":[],"call":[" execute "," exec_without_stmt "," exec_query "]}," ActiveRecord ConnectionAdapters MysqlAdapter execute":{"type":"method","name":"execute","children":[],"call":["connection query "," log "," raise ","@logger info ","@connection real_connect ","exception message split first =~ ","exception message split first ","exception message split ","exception message ","LOST_CONNECTION_ERROR_MESSAGES  any? ","@connection query ","name == "]}," ActiveRecord ConnectionAdapters MysqlAdapter insert":{"type":"method","name":"insert","children":[],"call":["@connection insert_id "," execute "]}," ActiveRecord ConnectionAdapters MysqlAdapter columns":{"type":"method","name":"columns","children":[],"call":["columns << ","Column  new ","field [] ","result each ","connection query "," log "," execute each "," execute ","MysqlColumn  new ","field [] == "," quote_table_name ","result free ","result collect ","connection query  each "," execute  each ","connection query  free "," execute  free ","connection query  collect "," execute  collect "]}," ActiveRecord ConnectionAdapters MysqlAdapter select_one":{"type":"method","name":"select_one","children":[],"call":["result first ","result nil? "," select "," select  first "," select  nil? "]}," ActiveRecord ConnectionAdapters MysqlAdapter select_all":{"type":"method","name":"select_all","children":[],"call":[" select "]}," ActiveRecord Base mysql_connection":{"type":"method","name":"mysql_connection","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter format_log_entry":{"type":"method","name":"format_log_entry","children":[],"call":["log_entry << ","(str \"   \\e[\") % ","dump nil? ! ","dump nil? ","dump kind_of? ! ","dump kind_of? ","%s  %s % ","ActiveRecord Base  colorize_logging ","(str \"\\e[\") % ","String  === "]}," ActiveRecord ConnectionAdapters AbstractAdapter log_info":{"type":"method","name":"log_info","children":[],"call":["@logger info "," format_log_entry ","sql gsub "," sprintf ","name nil? ","@logger nil? ","@logger debug ","sql squeeze ","@logger debug? ","seconds * ","%s (%.1fms) % ","%s (%.1fms) %  nil? "]}," ActiveRecord ConnectionAdapters AbstractAdapter log":{"type":"method","name":"log","children":[],"call":[" raise ","e message "," log_info ","bm real ","action call "," measure ","@logger nil? "," block_given? ","@logger level > ","@logger level ","Benchmark  realtime ","@logger level <= ","e class name ","e class ","@logger debug? ","Benchmark  ms "," translate_exception ","@logger debug ","@instrumenter instrument "," object_id ","ActiveSupport Notifications  instrument ","ex set_backtrace ","e backtrace ","exception set_backtrace ","@logger error "," translate_exception_class ","@lock synchronize ","ex set_query "," translate_ translate_exception ception "," translate_ translate_exception  "," translate_exception  set_backtrace "," translate_exception ception set_backtrace "," translate_ translate_exception ception_class "," translate_ translate_exception _class "," translate_exception  set_query "]}," ActiveRecord ConnectionAdapters AbstractAdapter structure_dump":{"type":"method","name":"structure_dump","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter quote_column_name":{"type":"method","name":"quote_column_name","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter quote":{"type":"method","name":"quote","children":[],"call":["value to_yaml gsub ","value to_yaml ","value strftime ","value to_s ","column type == ","column type ","value gsub gsub ","value gsub "," quote_string ","column string_to_binary "]}," ActiveRecord ConnectionAdapters AbstractAdapter rollback_db_transaction":{"type":"method","name":"rollback_db_transaction","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter commit_db_transaction":{"type":"method","name":"commit_db_transaction","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter begin_db_transaction":{"type":"method","name":"begin_db_transaction","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter reset_runtime":{"type":"method","name":"reset_runtime","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter delete":{"type":"method","name":"delete","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter update":{"type":"method","name":"update","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter insert":{"type":"method","name":"insert","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter columns":{"type":"method","name":"columns","children":[],"call":[" new_column_from_field "," column_definitions map "," column_definitions ","table_name to_s ","table_name to_s  to_s "]}," ActiveRecord ConnectionAdapters AbstractAdapter select_one":{"type":"method","name":"select_one","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter select_all":{"type":"method","name":"select_all","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter initialize":{"type":"method","name":"initialize","children":[],"call":["ActiveSupport Notifications  instrumenter ","h []= ","Hash  new ","SchemaCache  new ","@visitor extend "," class type_cast_config_to_boolean ","config fetch "," class "," arel_visitor ","Monitor  new ","ActiveSupport Concurrency LoadInterlockAwareMonitor  new ","Concurrent  monotonic_time ","Concurrent ThreadLocalVar  new "," build_statement_pool ","ActiveRecord ConnectionAdapters NullPool  new "," check_version ","Process  clock_gettime "," class validate_default_timezone ","@config [] ","@config fetch "," default_prepared_statements ","ActiveRecord  disable_prepared_statements ! ","ActiveRecord  disable_prepared_statements "," lock_thread= ","(or\n  (lvar :deprecated_connection_options)\n  (hash)) symbolize_keys ","(or\n  (lvar :deprecated_config)\n  (hash)) symbolize_keys ","ActiveRecord Base  logger "," raise ","config_or_deprecated_connection symbolize_keys ","config_or_deprecated_connection is_a? "," arel_visitor  extend ","(or\n  (lvar :deprecated_connection_options)\n  (hash)) symbolize_keys  [] ","(or\n  (lvar :deprecated_config)\n  (hash)) symbolize_keys  [] ","config_or_deprecated_connection symbolize_keys  [] ","(or\n  (lvar :deprecated_connection_options)\n  (hash)) symbolize_keys  fetch ","(or\n  (lvar :deprecated_config)\n  (hash)) symbolize_keys  fetch ","config_or_deprecated_connection symbolize_keys  fetch "]}," ActiveRecord ConnectionAdapters Column simplified_type":{"type":"method","name":"simplified_type","children":[],"call":[" extract_scale == "," extract_scale "]}," ActiveRecord ConnectionAdapters Column extract_limit":{"type":"method","name":"extract_limit","children":[],"call":["1 to_i ","sql_type =~ "]}," ActiveRecord ConnectionAdapters Column string_to_time":{"type":"method","name":"string_to_time","children":[],"call":["Time  local ","ParseDate  parsedate compact ","ParseDate  parsedate ","Time  === ","Time  send ","Base  default_timezone ","string to_s ","string is_a? "," fallback_string_to_time "," fast_string_to_time ","string empty? ","string blank? "]}," ActiveRecord ConnectionAdapters Column string_to_date":{"type":"method","name":"string_to_date","children":[],"call":["Date  new ","date_array [] ","ParseDate  parsedate ","Date  === ","string to_s ","string is_a? "," fallback_string_to_date "," fast_string_to_date ","string empty? ","ParseDate  parsedate  [] "]}," ActiveRecord ConnectionAdapters Column human_name":{"type":"method","name":"human_name","children":[],"call":["Base  human_attribute_name "]}," ActiveRecord ConnectionAdapters Column type_cast":{"type":"method","name":"type_cast","children":[],"call":["value == "," string_to_date "," string_to_time ","value to_f ","value to_i "," type ","value nil? ","value to_s == ","value to_s ","(send\n  (lvar :value) :=~\n  (regexp\n    (str \"^t(rue)?$\")\n    (regopt :i))) == ","value =~ "," binary_to_string "," string_to_dummy_time "," class binary_to_string "," class "," class string_to_date "," class string_to_dummy_time "," class string_to_time "," class value_to_boolean "," class value_to_decimal ","klass value_to_boolean ","klass binary_to_string ","klass string_to_date ","klass string_to_dummy_time ","klass string_to_time ","klass value_to_decimal "," coder load "," coder "," encoded? ","klass value_to_integer ","klass value_to_date "," class  value_to_boolean "," class  binary_to_string "," class  string_to_date "," class  string_to_dummy_time "," class  string_to_time "," class  value_to_decimal "," class  value_to_integer "," class  value_to_date "]}," ActiveRecord ConnectionAdapters Column klass":{"type":"method","name":"klass","children":[],"call":[" type "]}," ActiveRecord ConnectionAdapters Column default":{"type":"method","name":"default","children":[],"call":[" type_cast "]}," ActiveRecord ConnectionAdapters Column initialize":{"type":"method","name":"initialize","children":[],"call":[" extract_limit ","sql_type nil? "," simplified_type "," type_cast ","(sym :float) include? ","(sym :string) include? "," extract_scale "," extract_precision "," extract_default ","name freeze "]}," ActiveRecord Base symbolize_strings_in_hash":{"type":"method","name":"symbolize_strings_in_hash","children":[],"call":[]}," ActiveRecord Base connection=":{"type":"method","name":"connection=","children":[],"call":[" connection_without_query_cache= ","QueryCache  new "," send ","spec config ","spec adapter_method ","spec config [] ","spec is_a? ","QueryCache  new  config ","QueryCache  new  adapter_method ","QueryCache  new  config [] ","QueryCache  new  is_a? "]}," ActiveRecord Base remove_connection":{"type":"method","name":"remove_connection","children":[],"call":[" connection_handler remove_connection "," connection_handler "]}," ActiveRecord Base connected?":{"type":"method","name":"connected?","children":[],"call":[" connection_handler connected? "," connection_handler "]}," ActiveRecord Base retrieve_connection":{"type":"method","name":"retrieve_connection","children":[],"call":[" connection_handler retrieve_connection "," connection_handler "]}," ActiveRecord Base establish_connection":{"type":"method","name":"establish_connection","children":[],"call":["ENV  [] "]}," ActiveRecord Base ConnectionSpecification initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Callbacks notify":{"type":"method","name":"notify","children":[],"call":[" class notify_observers "," class "," class changed "]}," ActiveRecord Callbacks filter_class?":{"type":"method","name":"filter_class?","children":[],"call":["filter respond_to? "]}," ActiveRecord Callbacks filter_block?":{"type":"method","name":"filter_block?","children":[],"call":["filter arity == ","filter arity ","filter respond_to? "]}," ActiveRecord Callbacks run_callbacks":{"type":"method","name":"run_callbacks","children":[],"call":[" raise ","Filters need to be either a symbol, string (to be eval'ed), proc/method, or  + ","filter send "," filter_class? ","filter call "," filter_block? "," eval "," binding ","String  === "," send ","Symbol  === ","filters each ","filters nil? "," class read_inheritable_attribute ","callback_method to_s "," class "," class read_inheritable_attribute  each "," class read_inheritable_attribute  nil? "]}," ActiveRecord Callbacks callback":{"type":"method","name":"callback","children":[],"call":[" notify "," send "," run_callbacks "," invoke_and_notify ","result == "," raise ","callback send ","callback respond_to? ","callback call "," eval "," binding "," callbacks_for each "," callbacks_for "," respond_to_without_attributes? ","result != "," == "," send  == "," send  != "]}," ActiveRecord Callbacks destroy_with_callbacks":{"type":"method","name":"destroy_with_callbacks","children":[],"call":[" callback "," destroy_without_callbacks "," callback == "," _run_destroy_callbacks "]}," ActiveRecord Callbacks after_destroy":{"type":"method","name":"after_destroy","children":[],"call":[]}," ActiveRecord Callbacks before_destroy":{"type":"method","name":"before_destroy","children":[],"call":[]}," ActiveRecord Callbacks valid_with_callbacks":{"type":"method","name":"valid_with_callbacks","children":[],"call":[" callback "," new_record? "," valid_without_callbacks ","result == "," callback == "," valid_without_callbacks  == "," callback  == "]}," ActiveRecord Callbacks after_validation_on_update":{"type":"method","name":"after_validation_on_update","children":[],"call":[]}," ActiveRecord Callbacks before_validation_on_update":{"type":"method","name":"before_validation_on_update","children":[],"call":[]}," ActiveRecord Callbacks after_validation_on_create":{"type":"method","name":"after_validation_on_create","children":[],"call":[]}," ActiveRecord Callbacks before_validation_on_create":{"type":"method","name":"before_validation_on_create","children":[],"call":[]}," ActiveRecord Callbacks after_validation":{"type":"method","name":"after_validation","children":[],"call":[]}," ActiveRecord Callbacks before_validation":{"type":"method","name":"before_validation","children":[],"call":[]}," ActiveRecord Callbacks update_with_callbacks":{"type":"method","name":"update_with_callbacks","children":[],"call":[" callback "," update_without_callbacks "," callback == "," _run_update_callbacks "]}," ActiveRecord Callbacks after_update":{"type":"method","name":"after_update","children":[],"call":[]}," ActiveRecord Callbacks before_update":{"type":"method","name":"before_update","children":[],"call":[]}," ActiveRecord Callbacks create_with_callbacks":{"type":"method","name":"create_with_callbacks","children":[],"call":[" callback "," create_without_callbacks "," callback == "," _run_create_callbacks "]}," ActiveRecord Callbacks after_create":{"type":"method","name":"after_create","children":[],"call":[]}," ActiveRecord Callbacks before_create":{"type":"method","name":"before_create","children":[],"call":[]}," ActiveRecord Callbacks create_or_update_with_callbacks":{"type":"method","name":"create_or_update_with_callbacks","children":[],"call":[" callback "," create_or_update_without_callbacks "," callback == "," _run_save_callbacks "]}," ActiveRecord Callbacks after_save":{"type":"method","name":"after_save","children":[],"call":[]}," ActiveRecord Callbacks before_save":{"type":"method","name":"before_save","children":[],"call":[]}," ActiveRecord Callbacks initialize_with_callbacks":{"type":"method","name":"initialize_with_callbacks","children":[],"call":[" after_initialize "," respond_to_without_attributes? "," block_given? "," initialize_without_callbacks "," invoke_and_notify "," callback "]}," ActiveRecord Callbacks ClassMethods instantiate_with_callbacks":{"type":"method","name":"instantiate_with_callbacks","children":[],"call":["object callback ","object respond_to_without_attributes? "," instantiate_without_callbacks ","object send "," instantiate_without_callbacks  callback "," instantiate_without_callbacks  respond_to_without_attributes? "," instantiate_without_callbacks  send "]}," ActiveRecord Callbacks append_features":{"type":"method","name":"append_features","children":[],"call":[]}," ActiveRecord Associations ClassMethods create_method":{"type":"method","name":"create_method","children":[],"call":[" module_eval ","method_prefix + "]}," ActiveRecord Associations ClassMethods build_method":{"type":"method","name":"build_method","children":[],"call":[" module_eval ","method_prefix + "]}," ActiveRecord Associations ClassMethods has_association_method":{"type":"method","name":"has_association_method","children":[],"call":[" module_eval "]}," ActiveRecord Associations ClassMethods belongs_to_writer_method":{"type":"method","name":"belongs_to_writer_method","children":[],"call":[" module_eval "]}," ActiveRecord Associations ClassMethods has_one_writer_method":{"type":"method","name":"has_one_writer_method","children":[],"call":[" module_eval "]}," ActiveRecord Associations ClassMethods association_reader_method":{"type":"method","name":"association_reader_method","children":[],"call":[" module_eval "]}," ActiveRecord Associations ClassMethods association_comparison_method":{"type":"method","name":"association_comparison_method","children":[],"call":[" module_eval "]}," ActiveRecord Associations ClassMethods associate_identification":{"type":"method","name":"associate_identification","children":[],"call":["association_id id2name ","Inflector  underscore + ","Inflector  underscore ","Inflector  demodulize "," name "," type_name_with_module ","Inflector  camelize ","Inflector  singularize ","association_class_name !~ "," name foreign_key "," type_name_with_module  !~ "]}," ActiveRecord Associations ClassMethods join_table_name":{"type":"method","name":"join_table_name","children":[],"call":[" table_name_prefix + + "," table_name_suffix "," table_name_prefix + "," table_name_prefix ","first_table_name < "]}," ActiveRecord Associations ClassMethods validate_options":{"type":"method","name":"validate_options","children":[],"call":[" raise ","unknown_option_keys empty? ","supplied_option_keys - ","supplied_option_keys -  empty? "]}," ActiveRecord Associations ClassMethods has_and_belongs_to_many":{"type":"method","name":"has_and_belongs_to_many","children":[],"call":[" deprecated_has_collection_method "," deprecated_remove_association_relation "," deprecated_add_association_relation "," deprecated_collection_count_method "," module_eval ","Inflector  foreign_key "," class_name ","options inspect "," join_table_name "," undecorated_table_name "," to_s ","options [] "," associate_identification "," validate_options ","options keys ","association reload "," instance_variable_set ","HasAndBelongsToManyAssociation  new ","association nil? "," instance_variable_get ","params first ","params empty? "," define_method "," collection_accessor_methods "," add_multiple_associated_save_callbacks "," require_association_class "," add_association_callbacks ","options assert_valid_keys ","options []= "," create_extension_module "," block_given? "," class_eval ","reflection name "," create_has_and_belongs_to_many_reflection "," method_defined? "," association_accessor_methods "," add_multiple_associated_validation_callbacks ","options [] == "," include ","1417 + ","Module  new ","1310 + ","1330 + "," configure_destroy_hook_for_has_and_belongs_to_many "," configure_after_destroy_method_for_has_and_belongs_to_many ","Builder HasAndBelongsToMany  build "," has_many ","hm_options []= ","options key? ","(sym :before_add) each ","join_model right_reflection name ","join_model right_reflection ","middle_reflection name ","1574 + ","Reflection  add_reflection ","Builder HasMany  define_callbacks ","builder middle_reflection ","builder through_model ","Builder HasAndBelongsToMany  new ","scope is_a? ","1571 + "," _reflections [] parent_reflection= ","name to_sym "," _reflections [] "," _reflections ","1594 + ","middle_reflection parent_reflection= "," const_set ","join_model name ","ActiveRecord Reflection AssociationReflection  new ","name to_s ","1702 + ","ActiveRecord Reflection HasAndBelongsToManyReflection  new ","1619 + ","1684 + ","1690 + ","1703 + ","1811 + "," private_constant ","1804 + ","1807 + ","1816 + ","1832 + ","ActiveSupport Deprecation  silence ","1846 + ","1842 + ","1845 + ","1861 + ","1838 + ","1843 + ","1946 + ","1950 + ","1958 + ","1945 + ","1978 + ","1979 + ","1988 + ","2084 + "," deprecated_remove_HasAndBelongsToManyAssociation  new _relation "," deprecated_remove_ instance_variable_get _relation "," deprecated_add_HasAndBelongsToManyAssociation  new _relation "," deprecated_add_ instance_variable_get _relation ","HasAndBelongsToManyAssociation  new  reload "," instance_variable_get  reload ","HasAndBelongsToManyAssociation  new  nil? "," instance_variable_get  nil? "," require_HasAndBelongsToManyAssociation  new _class "," require_ instance_variable_get _class "," add_HasAndBelongsToManyAssociation  new _callbacks "," add_ instance_variable_get _callbacks "," create_has_and_belongs_to_many_reflection  name "," create_has_and_belongs_to_many_ create_has_and_belongs_to_many_reflection  "," HasAndBelongsToManyAssociation  new _accessor_methods ","  instance_variable_get _accessor_methods ","join_model right_ create_has_and_belongs_to_many_reflection  name ","builder through_model  right_reflection name ","join_model right_ create_has_and_belongs_to_many_reflection  ","builder through_model  right_reflection ","middle_ create_has_and_belongs_to_many_reflection  name ","builder middle_reflection  name ","Reflection  add_ create_has_and_belongs_to_many_reflection  ","builder middle_ create_has_and_belongs_to_many_reflection  ","builder builder middle_reflection  ","Builder HasAndBelongsToMany  new  middle_reflection ","Builder HasAndBelongsToMany  new  through_model "," _ create_has_and_belongs_to_many_reflection s [] parent_ create_has_and_belongs_to_many_reflection = "," _ create_has_and_belongs_to_many_reflection s [] "," _ create_has_and_belongs_to_many_reflection s ","middle_ create_has_and_belongs_to_many_reflection  parent_ create_has_and_belongs_to_many_reflection = ","builder middle_reflection  parent_reflection= ","builder through_model  name "]}," ActiveRecord Associations ClassMethods belongs_to":{"type":"method","name":"belongs_to","children":[],"call":[" module_eval ","(str \"before_destroy '\") + ","Inflector  pluralize + ","Inflector  pluralize "," to_s downcase "," to_s ","(str \"after_create '\") + ","options [] "," association_comparison_method "," belongs_to_writer_method "," association_reader_method "," has_association_method ","\" + + ","\" + "," AND  + ","Inflector  underscore + ","Inflector  underscore ","Inflector  demodulize "," associate_identification "," validate_options ","options keys "," deprecated_association_comparison_method "," deprecated_has_association_method "," to_s underscore pluralize + "," to_s underscore pluralize "," to_s underscore "," before_save "," association_constructor_method "," association_accessor_methods "," require_association_class ","association_class_name foreign_key ","options assert_valid_keys ","reflection name ","reflection primary_key_name ","options [] == ","reflection class_name ","reflection options [] ","reflection options "," create_belongs_to_reflection "," ActiveSupport Deprecation  warn "," caller ","options include? ! ","options include? "," configure_dependency_for_belongs_to "," before_destroy ","association class decrement_counter "," send ","association class ","association nil? "," define_method ","(str \"belongs_to_counter_cache_before_destroy_for_\") to_sym "," after_create ","association class increment_counter ","(str \"belongs_to_counter_cache_after_create_for_\") to_sym "," []= ","association id ","association updated? ","association save ","association new_record? ","association nil? ! "," instance_variable_get "," instance_variable_defined? ","(str \"belongs_to_before_save_for_\") to_sym ","association class base_class name to_s ","association class base_class name ","association class base_class ","association target ","(str \"polymorphic_belongs_to_before_save_for_\") to_sym "," add_single_associated_validation_callbacks "," to_s demodulize underscore pluralize "," to_s demodulize underscore "," to_s demodulize "," add_touch_callbacks "," add_counter_cache_callbacks ","reflection counter_cache_column ","Builder BelongsTo  build ","Reflection  add_reflection ","  send _comparison_method ","  instance_variable_get _comparison_method ","  send _reader_method ","  instance_variable_get _reader_method "," has_ send _method "," has_ instance_variable_get _method "," deprecated_ send _comparison_method "," deprecated_ instance_variable_get _comparison_method "," deprecated_has_ send _method "," deprecated_has_ instance_variable_get _method ","  send _constructor_method ","  instance_variable_get _constructor_method ","  send _accessor_methods ","  instance_variable_get _accessor_methods "," require_ send _class "," require_ instance_variable_get _class "," send _class_name foreign_key "," instance_variable_get _class_name foreign_key "," create_belongs_to_reflection  name ","Builder BelongsTo  build  name "," create_belongs_to_reflection  primary_key_name ","Builder BelongsTo  build  primary_key_name "," create_belongs_to_reflection  class_name ","Builder BelongsTo  build  class_name "," create_belongs_to_reflection  options [] ","Builder BelongsTo  build  options [] "," create_belongs_to_reflection  options ","Builder BelongsTo  build  options "," create_belongs_to_ create_belongs_to_reflection  "," create_belongs_to_Builder BelongsTo  build  "," send  class decrement_counter "," instance_variable_get  class decrement_counter "," send  class "," instance_variable_get  class "," send  nil? "," instance_variable_get  nil? "," send  class increment_counter "," instance_variable_get  class increment_counter "," send  id "," instance_variable_get  id "," send  updated? "," instance_variable_get  updated? "," send  save "," instance_variable_get  save "," send  new_record? "," instance_variable_get  new_record? "," send  nil? ! "," instance_variable_get  nil? ! "," send  class base_class name to_s "," instance_variable_get  class base_class name to_s "," send  class base_class name "," instance_variable_get  class base_class name "," send  class base_class "," instance_variable_get  class base_class "," send  target "," instance_variable_get  target ","reflection counter_options []  ","reflection counter_reflection counter_cache_column  "," create_belongs_to_reflection  counter_cache_column ","Builder BelongsTo  build  counter_cache_column ","Reflection  add_ create_belongs_to_reflection  ","Reflection  add_Builder BelongsTo  build  "]}," ActiveRecord Associations ClassMethods has_one":{"type":"method","name":"has_one","children":[],"call":[" module_eval ","options [] "," create_method "," build_method "," has_one_writer_method "," associate_identification "," belongs_to ","options merge! "," deprecated_association_comparison_method "," deprecated_has_association_method "," association_constructor_method "," association_accessor_methods "," after_save "," require_association_class "," validate_options ","options keys "," raise ","options assert_valid_keys ","reflection class_name ","reflection name "," configure_dependency_for_has_one ","reflection primary_key_name "," create_has_one_reflection "," deprecated_create_method "," deprecated_build_method "," add_single_associated_save_callbacks ","association save ","association []= "," id ","association [] != ","association [] ","association new_record? "," new_record? ","association nil? ! ","association nil? "," instance_variable_get "," instance_variable_defined? "," define_method ","(str \"has_one_after_save_for_\") to_sym "," create_has_one_through_reflection "," add_single_associated_validation_callbacks ","options [] == ","Builder HasOne  build ","Reflection  add_reflection "," deprecated_ instance_variable_get _comparison_method "," deprecated_has_ instance_variable_get _method ","  instance_variable_get _constructor_method ","  instance_variable_get _accessor_methods "," require_ instance_variable_get _class "," create_has_one_reflection  class_name "," create_has_one_through_reflection  class_name ","Builder HasOne  build  class_name "," create_has_one_reflection  name "," create_has_one_through_reflection  name ","Builder HasOne  build  name "," create_has_one_reflection  primary_key_name "," create_has_one_through_reflection  primary_key_name ","Builder HasOne  build  primary_key_name "," create_has_one_ create_has_one_reflection  "," create_has_one_ create_has_one_through_reflection  "," create_has_one_Builder HasOne  build  "," instance_variable_get  save "," instance_variable_get  []= "," instance_variable_get  [] != "," instance_variable_get  [] "," instance_variable_get  new_record? "," instance_variable_get  nil? ! "," instance_variable_get  nil? "," create_has_one_through_ create_has_one_reflection  "," create_has_one_through_ create_has_one_through_reflection  "," create_has_one_through_Builder HasOne  build  ","Reflection  add_ create_has_one_reflection  ","Reflection  add_ create_has_one_through_reflection  ","Reflection  add_Builder HasOne  build  "]}," ActiveRecord Associations ClassMethods has_many":{"type":"method","name":"has_many","children":[],"call":[" deprecated_build_method "," deprecated_create_method "," deprecated_find_all_in_collection_method "," deprecated_find_in_collection_method "," deprecated_has_collection_method "," deprecated_remove_association_relation "," deprecated_add_association_relation "," deprecated_collection_count_method "," module_eval ","options inspect ","options [] "," associate_identification "," validate_options ","options keys ","association reload "," instance_variable_set ","HasManyAssociation  new ","association nil? "," instance_variable_get ","params first ","params empty? "," define_method "," raise "," deprecated_collection_build_method "," deprecated_collection_create_method "," collection_accessor_methods "," add_multiple_associated_save_callbacks "," require_association_class "," add_association_callbacks ","options assert_valid_keys ","options []= "," create_extension_module "," block_given? "," add_deprecated_api_for_has_many ","reflection name ","reflection options "," collection_reader_method "," configure_dependency_for_has_many "," create_has_many_reflection "," association_accessor_methods "," add_multiple_associated_validation_callbacks ","options [] == ","Builder HasMany  build ","Reflection  add_reflection "," deprecated_remove_HasManyAssociation  new _relation "," deprecated_remove_ instance_variable_get _relation "," deprecated_add_HasManyAssociation  new _relation "," deprecated_add_ instance_variable_get _relation ","HasManyAssociation  new  reload "," instance_variable_get  reload ","HasManyAssociation  new  nil? "," instance_variable_get  nil? "," require_HasManyAssociation  new _class "," require_ instance_variable_get _class "," add_HasManyAssociation  new _callbacks "," add_ instance_variable_get _callbacks "," create_has_many_reflection  name ","Builder HasMany  build  name "," create_has_many_reflection  options ","Builder HasMany  build  options "," create_has_many_ create_has_many_reflection  "," create_has_many_Builder HasMany  build  "," HasManyAssociation  new _accessor_methods ","  instance_variable_get _accessor_methods ","Reflection  add_ create_has_many_reflection  ","Reflection  add_Builder HasMany  build  "]}," ActiveRecord Associations append_features":{"type":"method","name":"append_features","children":[],"call":[]}," ActiveRecord Associations HasManyAssociation cached_counter_attribute_name":{"type":"method","name":"cached_counter_attribute_name","children":[],"call":["@association_name + ","@reflection name ","reflection name "," options [] "," options ","reflection options [] to_s ","reflection options [] ","reflection options "]}," ActiveRecord Associations HasManyAssociation has_cached_counter?":{"type":"method","name":"has_cached_counter?","children":[],"call":["@owner attribute_present? "," cached_counter_attribute_name "," owner attribute_present? "," owner ","inverse options [] ","inverse options "," inverse_which_updates_counter_cache ","reflection options [] ","reflection options "," inverse_which_updates_counter_cache  options [] "," inverse_which_updates_counter_cache  options ","  inverse_which_updates_counter_cache _which_updates_counter_cache "]}," ActiveRecord Associations HasManyAssociation count_records":{"type":"method","name":"count_records","children":[],"call":["@association_class count ","@association_class count_by_sql ","@options [] ","@owner send "," cached_counter_attribute_name "," has_cached_counter? "," loaded ","count == ","(send\n  (send\n    (ivar :@reflection) :options) :[]\n  (sym :limit)) min ","@reflection options [] ","@reflection options ","@reflection klass count ","@reflection klass ","@reflection klass count_by_sql ","(send\n  (send nil :options) :[]\n  (sym :limit)) compact min ","(send\n  (send nil :options) :[]\n  (sym :limit)) compact "," options [] "," options "," loaded! "," scoped count "," scoped "," reflection klass count_by_sql "," custom_counter_sql "," reflection klass "," reflection "," owner send "," owner ","(send\n  (send nil :association_scope) :limit_value) compact min ","(send\n  (send nil :association_scope) :limit_value) compact "," association_scope limit_value "," association_scope "," scope count "," scope "," owner _read_attribute "," owner read_attribute "," reflection counter_cache_column "," reflection has_cached_counter? "," owner _read_attribute to_i "," owner read_attribute to_i "," target select! "," target ","@association_class @owner send  ","@association_class (send\n  (send\n    (ivar :@reflection) :options) :[]\n  (sym :limit)) min  ","@association_class  owner send  ","@association_class  scope count  ","@association_class  owner _read_attribute  ","@association_class  owner read_attribute  ","@association_class  owner _read_attribute to_i  ","@association_class  owner read_attribute to_i  ","@association_class @owner send _by_sql ","@association_class (send\n  (send\n    (ivar :@reflection) :options) :[]\n  (sym :limit)) min _by_sql ","@association_class  owner send _by_sql ","@association_class  scope count _by_sql ","@association_class  owner _read_attribute _by_sql ","@association_class  owner read_attribute _by_sql ","@association_class  owner _read_attribute to_i _by_sql ","@association_class  owner read_attribute to_i _by_sql "," cached_@owner send er_attribute_name "," cached_(send\n  (send\n    (ivar :@reflection) :options) :[]\n  (sym :limit)) min er_attribute_name "," cached_ owner send er_attribute_name "," cached_ scope count er_attribute_name "," cached_ owner _read_attribute er_attribute_name "," cached_ owner read_attribute er_attribute_name "," cached_ owner _read_attribute to_i er_attribute_name "," cached_ owner read_attribute to_i er_attribute_name "," has_cached_@owner send er? "," has_cached_(send\n  (send\n    (ivar :@reflection) :options) :[]\n  (sym :limit)) min er? "," has_cached_ owner send er? "," has_cached_ scope count er? "," has_cached_ owner _read_attribute er? "," has_cached_ owner read_attribute er? "," has_cached_ owner _read_attribute to_i er? "," has_cached_ owner read_attribute to_i er? ","@owner send  == ","(send\n  (send\n    (ivar :@reflection) :options) :[]\n  (sym :limit)) min  == "," owner send  == "," scope count  == "," owner _read_attribute  == "," owner read_attribute  == "," owner _read_attribute to_i  == "," owner read_attribute to_i  == ","@reflection klass @owner send  ","@reflection klass (send\n  (send\n    (ivar :@reflection) :options) :[]\n  (sym :limit)) min  ","@reflection klass  owner send  ","@reflection klass  scope count  ","@reflection klass  owner _read_attribute  ","@reflection klass  owner read_attribute  ","@reflection klass  owner _read_attribute to_i  ","@reflection klass  owner read_attribute to_i  ","@reflection klass @owner send _by_sql ","@reflection klass (send\n  (send\n    (ivar :@reflection) :options) :[]\n  (sym :limit)) min _by_sql ","@reflection klass  owner send _by_sql ","@reflection klass  scope count _by_sql ","@reflection klass  owner _read_attribute _by_sql ","@reflection klass  owner read_attribute _by_sql ","@reflection klass  owner _read_attribute to_i _by_sql ","@reflection klass  owner read_attribute to_i _by_sql "," scoped @owner send  "," scoped (send\n  (send\n    (ivar :@reflection) :options) :[]\n  (sym :limit)) min  "," scoped  owner send  "," scoped  scope count  "," scoped  owner _read_attribute  "," scoped  owner read_attribute  "," scoped  owner _read_attribute to_i  "," scoped  owner read_attribute to_i  "," reflection klass @owner send _by_sql "," reflection klass (send\n  (send\n    (ivar :@reflection) :options) :[]\n  (sym :limit)) min _by_sql "," reflection klass  owner send _by_sql "," reflection klass  scope count _by_sql "," reflection klass  owner _read_attribute _by_sql "," reflection klass  owner read_attribute _by_sql "," reflection klass  owner _read_attribute to_i _by_sql "," reflection klass  owner read_attribute to_i _by_sql "," custom_@owner send er_sql "," custom_(send\n  (send\n    (ivar :@reflection) :options) :[]\n  (sym :limit)) min er_sql "," custom_ owner send er_sql "," custom_ scope count er_sql "," custom_ owner _read_attribute er_sql "," custom_ owner read_attribute er_sql "," custom_ owner _read_attribute to_i er_sql "," custom_ owner read_attribute to_i er_sql "," scope @owner send  "," scope (send\n  (send\n    (ivar :@reflection) :options) :[]\n  (sym :limit)) min  "," scope  owner send  "," scope  scope count  "," scope  owner _read_attribute  "," scope  owner read_attribute  "," scope  owner _read_attribute to_i  "," scope  owner read_attribute to_i  "," reflection @owner send er_cache_column "," reflection (send\n  (send\n    (ivar :@reflection) :options) :[]\n  (sym :limit)) min er_cache_column "," reflection  owner send er_cache_column "," reflection  scope count er_cache_column "," reflection  owner _read_attribute er_cache_column "," reflection  owner read_attribute er_cache_column "," reflection  owner _read_attribute to_i er_cache_column "," reflection  owner read_attribute to_i er_cache_column "," reflection has_cached_@owner send er? "," reflection has_cached_(send\n  (send\n    (ivar :@reflection) :options) :[]\n  (sym :limit)) min er? "," reflection has_cached_ owner send er? "," reflection has_cached_ scope count er? "," reflection has_cached_ owner _read_attribute er? "," reflection has_cached_ owner read_attribute er? "," reflection has_cached_ owner _read_attribute to_i er? "," reflection has_cached_ owner read_attribute to_i er? "]}," ActiveRecord Associations HasManyAssociation find_all_records":{"type":"method","name":"find_all_records","children":[],"call":["@association_class find_all ","@options [] ","@association_class find_by_sql "," find_all "]}," ActiveRecord Associations HasManyAssociation find":{"type":"method","name":"find","children":[],"call":["@association_class find_on_conditions "," AND  + ","@owner id ","@collection_array send "," load_collection_to_array ","@options [] "," block_given? ","@collection find "," load_collection ","@association_class find ","args first ","args size == ","args size ","options []= ","options [] ","@finder_sql + ","ids include? ","record id "," load_target select "," load_target "," expects_array? ","id == "," load_target detect ","ids first ","ids size == ","ids size ","args flatten compact uniq ","args flatten compact ","args flatten ","args first kind_of? ","Base  send ","args << ","conditions << "," sanitize_sql ","@reflection klass find ","@reflection klass "," merge_options_from_reflection! ","@reflection options [] ","@reflection options ","@owner quoted_id "," load_collection select "," load_collection detect "," raise ","@association_class name ","ids empty? ","args flatten compact uniq map ","args extract_options! ","r id ","@owner ids first  ","@Base  send  [] ","@args extract_options!  [] ","Base  send  []= ","args extract_options!  []= ","Base  send  [] ","args extract_options!  [] ","ids first s include? ","args flatten compact uniq  include? ","args flatten compact uniq map  include? ","record ids first  "," args first kind_of? ? ","ids first  == ","ids first s first ","args flatten compact uniq  first ","args flatten compact uniq map  first ","ids first s size == ","args flatten compact uniq  size == ","args flatten compact uniq map  size == ","ids first s size ","args flatten compact uniq  size ","args flatten compact uniq map  size "," merge_Base  send _from_reflection! "," merge_args extract_options! _from_reflection! ","@reflection Base  send  [] ","@reflection args extract_options!  [] ","@reflection Base  send  ","@reflection args extract_options!  ","@owner quoted_ids first  ","ids first s empty? ","args flatten compact uniq  empty? ","args flatten compact uniq map  empty? ","args extract_Base  send ! ","args extract_args extract_options! ! ","r ids first  "]}," ActiveRecord Associations HasManyAssociation find_all":{"type":"method","name":"find_all","children":[],"call":["@association_class find_all ","(begin\n  (ivar :@association_class_primary_key_name)) + "," AND  + ","@owner id ","@collection_array send "," load_collection_to_array ","@options [] "," block_given? ","@association_class send ","@collection find_all "," load_collection "," sanitize_sql ","@association_class find_by_sql ","@reflection klass find_all ","@reflection klass ","@reflection options [] ","@reflection options ","@reflection klass find_by_sql ","@owner quoted_id ","sql << ","@finder_sql dup "," sanitize_@finder_sql dup  ","@association_class find_by_@finder_sql dup  ","@reflection klass find_by_@finder_sql dup  ","@finder_sql dup  << ","@finder_@finder_sql dup  dup "]}," ActiveRecord Associations HasManyAssociation build":{"type":"method","name":"build","children":[],"call":["association attributes= ","attributes merge ","@owner id ","@association_class new ","record []= ","@target << ","@owner new_record? "," load_target "," create ","attributes collect ","attributes is_a? "," set_belongs_to_association_for ","@reflection klass new ","@reflection klass "," build "," loaded? "," build_record ","@association_class new  attributes= ","@@association_class new _class new ","@association_class new  []= ","@reflection klass new  []= ","@owner new_@association_class new ? ","@owner new_@reflection klass new ? "," set_belongs_to_@association_class new _for "," build_@association_class new  "," build_@reflection klass new  "]}," ActiveRecord Associations HasManyAssociation create":{"type":"method","name":"create","children":[],"call":["@collection_array << ","@collection_array nil? ","record save ","record send ","@owner id ","@association_class_primary_key_name + ","@association_class new ","@collection << "," loaded? "," build ","@association_class new  save "," build  save ","@association_class new  send "," build  send "]}," ActiveRecord Associations HasManyAssociation delete":{"type":"method","name":"delete","children":[],"call":["@collection_array delete ","@collection_array nil? ","record save ","record send ","@association_class_primary_key_name + ","record send != ","@owner id "," duplicated_records_array each "," duplicated_records_array "]}," ActiveRecord Associations HasManyAssociation <<":{"type":"method","name":"<<","children":[],"call":["@collection_array << ","@collection_array nil? ","record save ","record send ","@owner id ","@association_class_primary_key_name + "," raise ","@association_class === "]}," ActiveRecord Associations HasManyAssociation initialize":{"type":"method","name":"initialize","children":[],"call":[" AND  + ","@owner id ","options [] ","options [] gsub "," interpolate_sql ","@finder_sql gsub ","@association_class send "," construct_sql "," sanitize_sql ","@owner quoted_id ","options []= ","@finder_sql << ","options []  gsub "," interpolate_sql  gsub ","options []  << "," interpolate_sql  << "]}," ActiveRecord Associations HasAndBelongsToManyCollection count_records":{"type":"method","name":"count_records","children":[],"call":["@collection_array size "," load_collection_to_array "]}," ActiveRecord Associations HasAndBelongsToManyCollection find_all_records":{"type":"method","name":"find_all_records","children":[],"call":["@association_class find_by_sql "]}," ActiveRecord Associations HasAndBelongsToManyCollection delete":{"type":"method","name":"delete","children":[],"call":["@collection_array delete ","records each ","@collection_array nil? ","@owner connection delete ","@owner connection ","(send\n  (lvar :records) :map) join ","' + + ","' + ","record id to_s ","record id ","records map ","@owner id ","@options [] "," duplicated_records_array "," duplicated_records_array  each ","(send\n  (lvar : duplicated_records_array ) :map) join "," duplicated_records_array  map "," duplicated_ duplicated_records_array _array "]}," ActiveRecord Associations HasAndBelongsToManyCollection <<":{"type":"method","name":"<<","children":[],"call":["@collection_array << ","@collection_array nil? ","@owner connection execute ","@owner connection ","(str \"INSERT INTO \") + ","record id ","@owner id ","@options [] "," raise ","@association_class === "]}," ActiveRecord Associations HasAndBelongsToManyCollection initialize":{"type":"method","name":"initialize","children":[],"call":["(str \"SELECT t.* FROM \") + + ","@owner id ","(str \"SELECT t.* FROM \") + ","@owner class primary_key ","@owner class ","options [] ","@association_class table_name ","association_class_name downcase + ","association_class_name downcase "]}," ActiveRecord Associations AssociationCollection duplicated_records_array":{"type":"method","name":"duplicated_records_array","children":[],"call":["records dup ","records is_a? "]}," ActiveRecord Associations AssociationCollection load_collection_to_array":{"type":"method","name":"load_collection_to_array","children":[],"call":[" find_all_records ","@collection_array nil? "," find_all_records  nil? "]}," ActiveRecord Associations AssociationCollection empty?":{"type":"method","name":"empty?","children":[],"call":[" size == "," size "," size zero? "]}," ActiveRecord Associations AssociationCollection size":{"type":"method","name":"size","children":[],"call":["@collection_array size "," count_records ","@collection_array nil? ","@collection size "," loaded? ","@target size ","unsaved_records size + ","unsaved_records size "," Array ","r new_record? ","@target detect ","@target is_a? ","@reflection options [] ! ","@reflection options [] ","@reflection options "," loaded? ! ","@owner new_record? ","@target select "," load_target size "," load_target ","r persisted? ","@target reject ","@owner persisted? ! ","@owner persisted? "," Array  size + "," Array  size "]}," ActiveRecord Associations AssociationCollection destroy_all":{"type":"method","name":"destroy_all","children":[],"call":["object destroy ","@collection_array each "," load_collection_to_array ","record destroy "," each ","@owner transaction "," reset_target! "," transaction "," destroy tap "," destroy "," load_target "," reset_named_scopes_cache! "]}," ActiveRecord Associations AssociationCollection concat":{"type":"method","name":"concat","children":[],"call":[" << ","records each ","records flatten! "]}," ActiveRecord Associations AssociationCollection reload":{"type":"method","name":"reload","children":[],"call":[" reset "]}," ActiveRecord Associations AssociationCollection respond_to?":{"type":"method","name":"respond_to?","children":[],"call":[" respond_to? "," proxy_respond_to? "]}," ActiveRecord Associations AssociationCollection to_ary":{"type":"method","name":"to_ary","children":[],"call":["@collection_array to_ary "," load_collection_to_array ","@collection to_ary "," load_collection ","@target to_ary "," load_target "," Array ","@target is_a? ","Array  wrap "]}," ActiveRecord Associations AssociationCollection method_missing":{"type":"method","name":"method_missing","children":[],"call":["@collection_array send "," load_collection_to_array ","@collection send "," load_collection ","@association_class send ","@association_class constrain ","Class  respond_to? ","@association_class respond_to? ! ","@association_class respond_to? ","@target respond_to? ","@reflection klass send ","@reflection klass "," construct_scope ","@reflection klass respond_to? ! ","@reflection klass respond_to? "," block_given? "," with_scope ","@reflection klass scopes [] call ","@reflection klass scopes [] ","@reflection klass scopes ","@reflection klass scopes include? "," create ","h []= ","1 split zip inject ","1 split zip ","1 split "," method_missing "," send ","args first "," find ","method to_s "," pull_finder_args_from ","DynamicFinderMatch  match attribute_names ","DynamicFinderMatch  match ","Hash  [] ","@_named_scopes_cache [] [] ","@_named_scopes_cache [] ","attributes zip ","attributes join ","match attribute_names ","match creator? ","DynamicFinderMatch  DynamicFinderMatch  match  attribute_names ","DynamicFinderMatch  DynamicFinderMatch  match  ","match attribute_names  zip ","match attribute_names  join ","DynamicFinderMatch  match  attribute_names ","DynamicFinderMatch  match  creator? "]}," ActiveRecord Associations AssociationCollection initialize":{"type":"method","name":"initialize","children":[],"call":[" eval "," construct_sql "]}," ActiveRecord Aggregations ClassMethods writer_method":{"type":"method","name":"writer_method","children":[],"call":[" module_eval ","(send\n  (begin\n    (if\n      (send\n        (const nil :Array) :===\n        (send\n          (lvar :mapping) :first))\n      (lvar :mapping)\n      (array\n        (lvar :mapping)))) :collect) join ","pair last ","pair first ","(if\n  (send\n    (const nil :Array) :===\n    (send\n      (lvar :mapping) :first))\n  (lvar :mapping)\n  (array\n    (lvar :mapping))) collect ","Array  === ","mapping first ","(send\n  (lvar :mapping) :collect) join ","mapping collect "," instance_variable_set ","part freeze ","@attributes []= ","part send ","mapping each ","conversion call ","conversion nil? ","part is_a? ","class_name constantize ","part nil? "," define_method "," []= "," raise ","converter call ","class_name constantize send ","converter nil? ","@aggregation_cache []= ","converter respond_to? ","klass send ","klass new ","part values ","k is_a? ","part each_key all? ","part each_key ","part sort map ","part sort ","part size == ","part keys max ","part keys ","part size ","part each_key max "," write_attribute ","part keys all? ","part dup freeze ","part dup ","conversion call  freeze ","class_name constantize send  freeze ","converter call  freeze ","klass send  freeze ","klass new  freeze ","conversion call  send ","class_name constantize send  send ","converter call  send ","klass send  send ","klass new  send ","conversion call  is_a? ","class_name constantize send  is_a? ","converter call  is_a? ","klass send  is_a? ","klass new  is_a? ","conversion call  nil? ","class_name constantize send  nil? ","converter call  nil? ","klass send  nil? ","klass new  nil? ","class_name constantize  send ","class_name constantize  new ","conversion call  values ","class_name constantize send  values ","converter call  values ","klass send  values ","klass new  values ","conversion call  each_key all? ","class_name constantize send  each_key all? ","converter call  each_key all? ","klass send  each_key all? ","klass new  each_key all? ","conversion call  each_key ","class_name constantize send  each_key ","converter call  each_key ","klass send  each_key ","klass new  each_key ","conversion call  sort map ","class_name constantize send  sort map ","converter call  sort map ","klass send  sort map ","klass new  sort map ","conversion call  sort ","class_name constantize send  sort ","converter call  sort ","klass send  sort ","klass new  sort ","conversion call  size == ","class_name constantize send  size == ","converter call  size == ","klass send  size == ","klass new  size == ","conversion call  keys max ","class_name constantize send  keys max ","converter call  keys max ","klass send  keys max ","klass new  keys max ","conversion call  keys ","class_name constantize send  keys ","converter call  keys ","klass send  keys ","klass new  keys ","conversion call  size ","class_name constantize send  size ","converter call  size ","klass send  size ","klass new  size ","conversion call  each_key max ","class_name constantize send  each_key max ","converter call  each_key max ","klass send  each_key max ","klass new  each_key max ","conversion call  keys all? ","class_name constantize send  keys all? ","converter call  keys all? ","klass send  keys all? ","klass new  keys all? ","conversion call  dup freeze ","class_name constantize send  dup freeze ","converter call  dup freeze ","klass send  dup freeze ","klass new  dup freeze ","conversion call  dup ","class_name constantize send  dup ","converter call  dup ","klass send  dup ","klass new  dup "]}," ActiveRecord Aggregations ClassMethods reader_method":{"type":"method","name":"reader_method","children":[],"call":[" module_eval ","(send\n  (begin\n    (if\n      (send\n        (const nil :Array) :===\n        (send\n          (lvar :mapping) :first))\n      (lvar :mapping)\n      (array\n        (lvar :mapping)))) :collect) join ","pair first ","(if\n  (send\n    (const nil :Array) :===\n    (send\n      (lvar :mapping) :first))\n  (lvar :mapping)\n  (array\n    (lvar :mapping))) collect ","Array  === ","mapping first ","(send\n  (lvar :mapping) :collect) join ","mapping collect "," instance_variable_get "," instance_variable_set ","class_name constantize new "," read_attribute ","class_name constantize "," read_attribute nil? ! "," read_attribute nil? ","mapping any? ","allow_nil ! "," instance_variable_get nil? ","args first "," define_method "," raise ","constructor call ","class_name constantize send "," instance_variable_defined? ","@aggregation_cache [] ","@aggregation_cache []= ","constructor respond_to? ","@aggregation_cache [] nil? "," _read_attribute "," _read_attribute nil? ! "," _read_attribute nil? ","object freeze ","class_name constantize send  freeze ","constructor call  freeze "]}," ActiveRecord Aggregations ClassMethods name_to_class_name":{"type":"method","name":"name_to_class_name","children":[],"call":["1 capitalize ","name capitalize gsub ","name capitalize "]}," ActiveRecord Aggregations ClassMethods validate_options":{"type":"method","name":"validate_options","children":[],"call":[" raise ","unknown_option_keys empty? ","supplied_option_keys - ","supplied_option_keys -  empty? "]}," ActiveRecord Aggregations ClassMethods composed_of":{"type":"method","name":"composed_of","children":[],"call":[" writer_method "," reader_method ","options [] "," name_to_class_name ","part_id id2name "," validate_options ","options keys ","options assert_valid_keys "," create_reflection ","name camelize ","mapping first is_a? ","mapping first ","ActiveSupport Deprecation  warn "," caller "," block_given? ","Reflection  add_aggregate_reflection ","ActiveRecord Reflection  create "," include "," < "," part_id id2name _to_class_part_id id2name  ","part_id id2part_id id2name  "," create_ActiveRecord Reflection  create  ","part_id id2name  camelize ","options []  first is_a? ","options []  first ","Reflection  add_aggregate_ActiveRecord Reflection  create  "]}," ActiveRecord Aggregations append_features":{"type":"method","name":"append_features","children":[],"call":[]}," ActiveRecord Transactions transaction":{"type":"method","name":"transaction","children":[],"call":[" class transaction "," class "]}," Inflector classify":{"type":"method","name":"classify","children":[],"call":[" camelize "," singularize "]}," Inflector tableize":{"type":"method","name":"tableize","children":[],"call":[" pluralize "," underscore "]}," TestCase fixture_table_names":{"type":"method","name":"fixture_table_names","children":[],"call":[" class read_inheritable_attribute "," class "]}," TestCase instantiate_fixtures":{"type":"method","name":"instantiate_fixtures","children":[],"call":["Fixtures  instantiate_fixtures "," fixture_path "]}," TestCase method_added":{"type":"method","name":"method_added","children":[],"call":[]}," TestCase setup":{"type":"method","name":"setup","children":[],"call":[" instantiate_fixtures "," fixture_table_names "]}," TestCase fixtures":{"type":"method","name":"fixtures","children":[],"call":[]}," Fixture read_fixture_file":{"type":"method","name":"read_fixture_file","children":[],"call":["fixture []= ","value strip "," raise ","fixture [] ","md captures ","(str \"^\\\\s*([a-zA-Z][-_\\\\w]*)\\\\s*=>\\\\s*(.+)\\\\s*$\") match ","line empty? ","IO  readlines inject ","IO  readlines ","File  join ","line =~ ","(str \"^\\s*([a-zA-Z][-_\\w]*)\\s*=>\\s*(.+)\\s*$\") match  captures "]}," Fixture find":{"type":"method","name":"find","children":[],"call":["Object  const_get find "," [] ","Object  const_get ","klass find ","klass primary_key ","Object  const_defined? "," raise ","@class_name inspect ","@class_name is_a? ","Object  const_get primary_key "," model_class find "," model_class primary_key "," model_class "," fixture [] "," fixture ","Object  const_get  find ","Object  const_get  primary_key "]}," Fixture each":{"type":"method","name":"each","children":[],"call":["@fixture each "," fixture each "," fixture "]}," Fixtures read_fixture_files":{"type":"method","name":"read_fixture_files","children":[],"call":[" []= ","Fixture  new ","fixture yaml_name ","YamlFixture  produce each ","YamlFixture  produce ","File  join ","Dir  entries each ","Dir  entries ","file !~ ","File  file? "," raise "," yaml_file_path "," deprecated_yaml_file_path ","Inflector  underscore ","data []= ","cell to_s strip ","cell to_s ","header [] to_s strip ","header [] to_s ","header [] ","row each_with_index ","reader each ","reader shift ","CSV Reader  create "," erb_render ","IO  read "," csv_file_path ","yaml each ","YAML  load ","boom class ","yaml value ","yaml respond_to? ","yaml_string << ","(send\n  (send\n    (const nil :Dir) :[]\n    (dstr\n      (begin\n        (ivar :@fixture_path))\n      (str \"/**/*.yml\"))) :select) each "," test ","Dir  [] select ","Dir  [] ","fixture each ","yaml_value each "," read_csv_fixture_files "," read_yaml_fixture_files "," model_class ","fixture YAML  load _name ","fixture yaml value _name "," yaml_file_File  join  "," YAML  load _file_path "," yaml value _file_path "," deprecated_yaml_file_File  join  "," deprecated_YAML  load _file_path "," deprecated_yaml value _file_path ","reader shift  [] to_s strip ","reader shift  [] to_s ","reader shift  [] ","CSV Reader  create  each ","CSV Reader  create  shift "," csv_file_File  join  ","YAML  load  each ","yaml value  each ","YAML  load  value ","yaml value  value ","YAML  load  respond_to? ","yaml value  respond_to? ","YAML  load _string << ","yaml value _string << ","(send\n  (send\n    (const nil :Dir) :[]\n    (dstr\n      (begin\n        (ivar :@fixture_File  join ))\n      (str \"/**/*.yml\"))) :select) each ","YAML  load _value each ","yaml value _value each "," read_YAML  load _fixture_files "," read_yaml value _fixture_files "]}," Fixtures instantiate_fixtures":{"type":"method","name":"instantiate_fixtures","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLiteAdapter quote_string":{"type":"method","name":"quote_string","children":[],"call":["SQLite Database  quote ","@connection class quote ","@connection class "]}," ActiveRecord ConnectionAdapters AbstractAdapter quote_string":{"type":"method","name":"quote_string","children":[],"call":["s gsub gsub ","s gsub "]}," ActiveRecord ConnectionAdapters AbstractAdapter transaction":{"type":"method","name":"transaction","children":[],"call":[" raise "," rollback_db_transaction "," commit_db_transaction "," begin_db_transaction "," block_given? "]}," require_library_or_gem":{"type":"method","name":"require_library_or_gem","children":[],"call":[" raise "," require "]}," ActiveRecord Associations HasManyAssociation delete_records":{"type":"method","name":"delete_records","children":[],"call":["@association_class update_all ","@association_class primary_key ","@owner id "," quoted_record_ids ","@owner quoted_id ","r destroy ","records each ","@options [] ","@reflection klass update_all ","@reflection klass primary_key ","@reflection klass ","@reflection primary_key_name ","@reflection options [] ","@reflection options ","@reflection klass delete ","records map "," owner_quoted_id ","record id ","@owner class update_counters ","records size -@ ","records size "," cached_counter_attribute_name ","@owner class "," has_cached_counter? ","relation where update ","relation [] ","relation where ","relation [] eq and ","relation [] in ","r id ","relation [] eq ","Arel Table  new ","@reflection table_name ","Arel Predicates In  new "," update_counter ","scope update_all -@ ","scope update_all "," reflection foreign_key "," reflection ","scope delete_all -@ ","scope delete_all ","method == "," scoped where "," reflection klass primary_key "," reflection klass "," scoped ","records length -@ ","records length "," inverse_updates_counter_cache? "," scope where "," scope ","records == "," reflection klass primary_key ! "," delete_count -@ "," delete_count "," reflection inverse_updates_counter_cache? ","r _read_attribute ","query_constraints map "," reflection klass composite_query_constraints_list "," quoted_record_ quoted_record_ids  ","Arel Table  new  where update ","Arel Table  new  [] ","Arel Table  new  where ","Arel Table  new  [] eq and ","Arel Table  new  [] in ","Arel Table  new  [] eq "," scoped where  update_all -@ "," scope where  update_all -@ "," scope  update_all -@ "," scoped where  update_all "," scope where  update_all "," scope  update_all "," scoped where  delete_all -@ "," scope where  delete_all -@ "," scope  delete_all -@ "," scoped where  delete_all "," scope where  delete_all "," scope  delete_all ","  scoped where d where ","  scope where d where ","  scope d where ","  scoped where d ","  scope where d ","  scope d ","  scoped where  where ","  scope where  where ","  scope  where ","  scoped where  ","  scope where  ","  scope  "," reflection klass composite_query_constraints_list  map "," reflection klass composite_ reflection klass composite_query_constraints_list _list "]}," ActiveRecord Associations HasManyAssociation insert_record":{"type":"method","name":"insert_record","children":[],"call":["record update_attribute ","@owner id ","record save ","record []= "," set_belongs_to_association_for ","record save! "," set_inverse_instance "," set_owner_attributes "]}," ActiveRecord Associations HasManyAssociation clear":{"type":"method","name":"clear","children":[],"call":["@association_class update_all ","@owner id ","@owner quoted_id "]}," ActiveRecord Associations HasAndBelongsToManyAssociation delete_records":{"type":"method","name":"delete_records","children":[],"call":["@owner connection execute ","@owner connection ","@owner id "," quoted_record_ids ","records each ","@options [] ","@owner quoted_id "," interpolate_sql ","@reflection association_foreign_key ","@reflection primary_key_name ","@reflection options [] ","@reflection options ","@owner connection delete ","@owner connection quote_table_name "," owner_quoted_id ","relation where delete ","relation where ","relation [] eq and ","relation [] in ","x id ","records map ","relation [] ","relation [] eq ","Arel Table  new ","Arel Predicates In  new ","(send\n  (lvar :records) :map) compact "," interpolate_and_sanitize_sql "," owner connection delete "," owner connection "," owner ","relation where compile_delete "," reflection association_foreign_key "," reflection "," owner id "," reflection foreign_key "," join_table "," interpolate "," options [] "," options ","stmt to_sql "," load_target ","records == ","condition and "," owner class connection delete "," owner class connection "," owner class "," quoted_record_ quoted_record_ids  "," load_target  each "," interpolate_@options []  "," interpolate_@reflection options []  "," interpolate_ options []  ","Arel Table  new  where delete "," join_table  where delete ","Arel Table  new  where "," join_table  where ","Arel Table  new  [] eq and "," join_table  [] eq and ","Arel Table  new  [] in "," join_table  [] in "," load_target  map ","Arel Table  new  [] "," join_table  [] ","Arel Table  new  [] eq "," join_table  [] eq ","(send\n  (lvar : load_target ) :map) compact "," interpolate_and_sanitize_@options []  "," interpolate_and_sanitize_@reflection options []  "," interpolate_and_sanitize_ options []  ","Arel Table  new  where compile_delete "," join_table  where compile_delete ","stmt to_@options []  ","stmt to_@reflection options []  ","stmt to_ options []  ","relation where compile_delete  to_sql "," load_target  == ","condition and  and ","relation [] eq  and "]}," ActiveRecord Associations HasAndBelongsToManyAssociation insert_record_with_join_attributes":{"type":"method","name":"insert_record_with_join_attributes","children":[],"call":["@owner connection execute ","@owner connection ","(str \"INSERT INTO \") + ","(send\n  (send\n    (lvar :attributes) :values) :collect) join ","@owner send ","attributes values collect ","attributes values ","@owner send join ","(pair\n  (ivar :@association_class_primary_key_name)\n  (send\n    (ivar :@owner) :id)) update ","record id ","@owner id ","(send\n  (send\n    (lvar :(pair\n  (ivar :@association_class_primary_key_name)\n  (send\n    (ivar :@owner) :id)) update ) :values) :collect) join ","(pair\n  (ivar :@association_class_primary_key_name)\n  (send\n    (ivar :@owner) :id)) update  values collect ","(pair\n  (ivar :@association_class_primary_key_name)\n  (send\n    (ivar :@owner) :id)) update  values "]}," ActiveRecord Associations HasAndBelongsToManyAssociation insert_record":{"type":"method","name":"insert_record","children":[],"call":["@owner connection execute ","@owner connection ","record id ","@owner id "," interpolate_sql ","@options [] ","(str \"INSERT INTO \") + ","(send\n  (send\n    (lvar :attributes) :values) :collect) join ","@owner send ","attributes values collect ","attributes values ","@owner send join ","attributes []= ","column name ","value nil? ","record [] ","record quoted_id ","@owner quoted_id ","columns inject ","@owner connection columns ","record save ","record new_record? ","attributes values join ","record attributes has_key? ","record attributes ","@reflection options [] ","@reflection options ","@reflection association_foreign_key ","@reflection primary_key_name ","record save! ","@owner connection insert ","attrs []= ","record has_attribute? ","@owner connection quote_table_name ","@reflection association_foreign_key to_s ","@reflection primary_key_name to_s ","column name to_s "," owner_quoted_id "," columns inject "," columns "," raise "," has_primary_key? ","relation insert ","relation [] ","name to_s ","record send ","timestamps any? "," record_timestamp_columns ","Arel Table  new ","Hash  [] "," columns map "," interpolate_and_sanitize_sql ","record persisted? "," owner connection insert "," owner connection "," owner "," join_table compile_insert "," join_table [] "," reflection association_foreign_key "," reflection "," join_table "," owner id "," reflection foreign_key "," interpolate "," options [] "," options ","stmt to_sql ","record save ! "," owner class connection insert "," owner class connection "," owner class "," interpolate_(str \"INSERT INTO \") +  ","(send\n  (send\n    (lvar :attributes) :record [] s) :collect) join ","(send\n  (send\n    (lvar :attributes) :@owner send s) :collect) join ","(send\n  (send\n    (lvar :Hash  [] ) :values) :collect) join ","attributes record [] s collect ","attributes @owner send s collect ","Hash  []  values collect ","attributes record [] s ","attributes @owner send s ","Hash  []  values ","Hash  []  []= ","column column name  ","record []  nil? ","@owner send  nil? ","@owner connection columns  inject ","@owner connection @owner connection columns  ","attributes record [] s join ","attributes @owner send s join ","Hash  []  values join ","record Hash  []  has_key? ","record Hash  []  ","@reflection primary_key_column name  ","@owner connection quote_table_column name  ","@reflection primary_key_column name  to_s ","column column name  to_s "," @owner connection columns  inject "," @owner connection columns  ","Arel Table  new  insert ","Arel Table  new  [] ","column name  to_s "," record_timestamp_columns  any? "," record_timestamp_@owner connection columns  "," @owner connection columns  map "," interpolate_and_sanitize_(str \"INSERT INTO \") +  ","stmt to_(str \"INSERT INTO \") +  "," join_table compile_insert  to_sql "]}," ActiveRecord Associations HasAndBelongsToManyAssociation count_records":{"type":"method","name":"count_records","children":[],"call":["@collection size "," load_collection "," load_target size "," load_target "," load_collection size ","(send\n  (send nil :load_target) :reject) size ","r new_record? "," load_target reject "]}," ActiveRecord Associations HasAndBelongsToManyAssociation find_all_records":{"type":"method","name":"find_all_records","children":[],"call":[" uniq ","@options [] ","@association_class find_by_sql "]}," ActiveRecord Associations HasAndBelongsToManyAssociation size":{"type":"method","name":"size","children":[],"call":[" count_records ","@options [] ","@reflection options [] ","@reflection options "]}," ActiveRecord Associations HasAndBelongsToManyAssociation push_with_attributes":{"type":"method","name":"push_with_attributes","children":[],"call":["@collection << "," loaded? ","record send ","join_attributes each "," insert_record_with_join_attributes "," raise_on_type_mismatch ","@target << "," insert_record ","@owner new_record? ","record []= ","key to_s "," callback "]}," ActiveRecord Associations HasAndBelongsToManyAssociation find":{"type":"method","name":"find","children":[],"call":[" find_all_records first "," find_all_records ","@finder_sql sub ","(send nil :find_all) first ","record id == ","association_id to_i ","record id "," find_all "," loaded? ","@collection find "," load_collection ","@options [] "," block_given? "," raise ","@association_class name ","records first ","expects_array ! ","ids size == ","ids size ","records size == ","records size "," find_target ","(send\n  (lvar :ids) :map) join ","@owner send ","ids map ","ids include? "," load_target select "," load_target "," expects_array? ","id == "," load_target detect ","ids first ","ids empty? ","args flatten compact uniq ","args flatten compact ","args flatten ","args first kind_of? ","args first ","@association_class find ","args << ","options []= ","options [] ","conditions << "," sanitize_sql ","ids first to_i ","Base  send ","@reflection klass find ","@reflection klass "," merge_options_from_reflection! ","@reflection options [] ","@reflection options "," finding_with_ambigious_select? "," load_collection select "," load_collection detect "," conditions "," finding_with_ambiguous_select? ","args extract_options! ","r id "," find_all_ find_target  first "," find_all_ find_all_records  first "," find_all_ find_target  "," find_all_ find_all_records  ","record ids first  == ","record ids first to_i  == ","association_ids first  to_i ","association_ids first to_i  to_i ","record ids first  ","record ids first to_i  ","@Base  send  [] ","@args extract_options!  [] "," find_target  first "," find_all_records  first ","args first kind_of?  ! ","ids first s size == ","ids first to_i s size == ","args flatten compact uniq  size == ","ids first s size ","ids first to_i s size ","args flatten compact uniq  size "," find_target  size == "," find_all_records  size == "," find_target  size "," find_all_records  size ","(send\n  (lvar :ids first s) :map) join ","(send\n  (lvar :ids first to_i s) :map) join ","(send\n  (lvar :args flatten compact uniq ) :map) join ","ids first s map ","ids first to_i s map ","args flatten compact uniq  map ","ids first s include? ","ids first to_i s include? ","args flatten compact uniq  include? "," args first kind_of? ? ","ids first  == ","ids first to_i  == ","ids first s first ","ids first to_i s first ","args flatten compact uniq  first ","ids first s empty? ","ids first to_i s empty? ","args flatten compact uniq  empty? ","Base  send  []= ","args extract_options!  []= ","Base  send  [] ","args extract_options!  [] ","ids first s first to_i ","ids first to_i s first to_i ","args flatten compact uniq  first to_i "," merge_Base  send _from_reflection! "," merge_args extract_options! _from_reflection! ","@reflection Base  send  [] ","@reflection args extract_options!  [] ","@reflection Base  send  ","@reflection args extract_options!  ","args extract_Base  send ! ","args extract_args extract_options! ! ","r ids first  ","r ids first to_i  "]}," ActiveRecord Associations HasAndBelongsToManyAssociation clear":{"type":"method","name":"clear","children":[],"call":["@owner connection execute ","@owner connection ","@owner id ","(str \"DELETE FROM \") + ","(send nil :collect) join ","record id "," collect ","@options [] "," each "," size == "," size ","@owner quoted_id "]}," ActiveRecord Associations HasAndBelongsToManyAssociation initialize":{"type":"method","name":"initialize","children":[],"call":["(str \"SELECT t.*, j.* FROM \") + + + + + ","(str \"SELECT t.*, j.* FROM \") + + + + ","(str \"SELECT t.*, j.* FROM \") + + + "," AND  + ","options [] ","(str \"SELECT t.*, j.* FROM \") + + ","@owner id ","(str \"SELECT t.*, j.* FROM \") + ","@owner class primary_key ","@owner class "," interpolate_sql_options! ","@association_class table_name ","Inflector  underscore + ","Inflector  underscore ","Inflector  demodulize ","association_class_name downcase "," construct_sql ","association_class_name foreign_key ","@owner quoted_id ","@association_class primary_key ","ActiveSupport Deprecation  warn "," columns size > "," columns size "," columns ","Arel Table  new ","reflection options [] ","reflection options ","reflection join_table "]}," ActiveRecord Associations AssociationCollection flatten_deeper":{"type":"method","name":"flatten_deeper","children":[],"call":["(send\n  (lvar :array) :collect) flatten ","element flatten ","element respond_to? ","array collect "]}," ActiveRecord Associations AssociationCollection raise_on_type_mismatch":{"type":"method","name":"raise_on_type_mismatch","children":[],"call":[" raise ","record class ","record is_a? "]}," ActiveRecord Associations AssociationCollection load_collection":{"type":"method","name":"load_collection","children":[],"call":[" find_all_records "," loaded? "]}," ActiveRecord Associations AssociationCollection interpolate_sql":{"type":"method","name":"interpolate_sql","children":[],"call":["@owner send "]}," ActiveRecord Associations AssociationCollection interpolate_sql_options!":{"type":"method","name":"interpolate_sql_options!","children":[],"call":[" interpolate_sql ","options [] ","keys each "]}," ActiveRecord Associations AssociationCollection quoted_record_ids":{"type":"method","name":"quoted_record_ids","children":[],"call":["(send\n  (lvar :records) :map) join ","@association_class send ","record id ","records map ","record quoted_id "]}," ActiveRecord Associations AssociationCollection loaded?":{"type":"method","name":"loaded?","children":[],"call":["@collection nil? ! ","@collection nil? "]}," ActiveRecord Associations AssociationCollection uniq":{"type":"method","name":"uniq","children":[],"call":["uniq_records << ","uniq_records include? ","collection inject ","seen << ","record id ","kept << ","seen include? ","Set  new ","(send\n  (lvar :collection) :map) compact ","collection map ","Set  new  << ","Set  new  include? "]}," ActiveRecord Associations AssociationCollection delete":{"type":"method","name":"delete","children":[],"call":["@collection delete ","records each "," loaded? "," delete_records "," raise_on_type_mismatch "," flatten_deeper ","@target delete ","@owner transaction ","records empty? ","record new_record? ","records reject! "," callback ","old_records any? ","r new_record? ","records reject "," transaction "," remove_records ","_records each "," flatten_deeper  each "," delete_ flatten_deeper  "," flatten_deeper  empty? "," flatten_deeper  reject! ","old_ flatten_deeper  any? "," flatten_deeper  reject "," remove_ flatten_deeper  ","_ flatten_deeper  each "]}," ActiveRecord Associations AssociationCollection <<":{"type":"method","name":"<<","children":[],"call":["@collection << "," loaded? "," insert_record "," raise_on_type_mismatch "," flatten_deeper each "," flatten_deeper ","@target << ","@owner new_record? ","@owner transaction "," load_target "," callback "," add_record_to_target_with_callbacks "," transaction ","@owner persisted? "]}," Mysql read_query_result_41":{"type":"method","name":"read_query_result_41","children":[],"call":[" unpack_fields ","@server_capabilities & != ","@server_capabilities & "," read_rows "," get_length ","data size > ","data size ","a [] + ","a [] * ","a [] ","data slice! ","@field_count == "," read "," write ","f read ","File  open "," unpack_ read_rows  "," unpdata slice! ck_fields ","@server_cdata slice! pdata slice! bilities & != ","@server_cdata slice! pdata slice! bilities & "," redata slice! d_rows ","ddata slice! tdata slice!  size > "," read  size > ","ddata slice! tdata slice!  size "," read  size ","data slice!  [] + ","data slice!  [] * ","data slice!  [] ","ddata slice! tdata slice!  slice! "," read  slice! "," get_length  == "," redata slice! d ","f redata slice! d "]}," Mysql unpack_fields_41":{"type":"method","name":"unpack_fields_41","children":[],"call":["ret << ","Field  new ","f [] ","f [] [] ","f [] [] + ","f [] [] * ","f [] [] + + + ","f [] [] * * * ","f [] [] * * ","f [] [] + + ","data each "]}," Mysql skip_result_41":{"type":"method","name":"skip_result_41","children":[],"call":["data length == ","data length ","data [] == ","data [] "," read "," loop ","@status == "," read  length == "," read  length "," read  [] == "," read  [] "]}," Mysql read_one_row_41":{"type":"method","name":"read_one_row_41","children":[],"call":["rec << ","data slice! ","len == "," get_length ","field_count times ","data length < ","data length ","data [] == ","data [] "," read "," read  slice! "," get_length  == "," get_ get_length gth ","data  get_length gth < "," read  length < ","data  get_length gth "," read  length "," read  [] == "," read  [] "]}," Mysql scramble411":{"type":"method","name":"scramble411","children":[],"call":["scrambled join ","x chr ","scrambled map ","stage3 [] ^ ","stage1 [] ","stage3 [] ","(erange\n  (int 0)\n  (send\n    (lvar :stage3) :size)) map ","stage3 size ","dgst digest ","dgst << ","Digest SHA1  new ","Digest SHA1  digest "," raise ","password == ","dgst digest  [] ^ ","Digest SHA1  digest  [] ","dgst digest  [] ","(erange\n  (int 0)\n  (send\n    (lvar :dgst digest ) :size)) map ","dgst digest  size ","Digest SHA1  new  digest ","Digest SHA1  new  << "]}," Mysql version_meets_minimum?":{"type":"method","name":"version_meets_minimum?","children":[],"call":["@revision_num >= ","@minor_ver >= ","@major_ver >= "]}," Mysql make_client_auth_packet_41":{"type":"method","name":"make_client_auth_packet_41","children":[],"call":["(lvar :flag) pack ","password size ","user size + ","user size ","db size + ","db size ","@server_capabilities & != ","@server_capabilities & "]}," DB2 Parameter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," DB2 Statement adjust_content":{"type":"method","name":"adjust_content","children":[],"call":["%04d-%02d-%02d %02d:%02d:%02d % ","c second ","c minute ","c hour ","c day ","c month ","c year ","%04d-%02d-%02d % ","%02d:%02d:%02d % ","c class to_s ","c class "]}," DB2 Statement get_col_desc":{"type":"method","name":"get_col_desc","children":[],"call":["name downcase "," SQLDescribeCol ","(irange\n  (int 1)\n  (lvar :nr_cols)) collect "," SQLNumResultCols "]}," DB2 Statement fetch_as_hash":{"type":"method","name":"fetch_as_hash","children":[],"call":["retval []= "," adjust_content ","c [] "," SQLGetData ","c [] + ","i + ","cols each_with_index "," raise ","rc == "," SQLFreeStmt "," SQLFetch "," get_col_desc "," get_col_desc  each_with_index "," SQLFetch  == "]}," DB2 Statement fetch":{"type":"method","name":"fetch","children":[],"call":["retval << "," adjust_content "," SQLGetData ","c [] + ","c [] ","i + ","cols each_with_index "," raise ","rc == "," SQLFreeStmt "," SQLFetch "," get_col_desc "," get_col_desc  each_with_index "," SQLFetch  == "]}," DB2 Statement fetch_all":{"type":"method","name":"fetch_all","children":[],"call":["res << "," fetch "," block_given? "]}," DB2 Statement num_result_cols":{"type":"method","name":"num_result_cols","children":[],"call":[" check_rc "," SQLNumResultCols "]}," DB2 Statement row_count":{"type":"method","name":"row_count","children":[],"call":[" check_rc "," SQLRowCount "]}," DB2 Statement get_cursor_name":{"type":"method","name":"get_cursor_name","children":[],"call":[" check_rc "," SQLGetCursorName "]}," DB2 Statement set_cursor_name":{"type":"method","name":"set_cursor_name","children":[],"call":[" check_rc "," SQLSetCursorName "]}," DB2 Statement exec_direct":{"type":"method","name":"exec_direct","children":[],"call":[" check_rc "," SQLExecDirect "]}," DB2 Statement tokens":{"type":"method","name":"tokens","children":[],"call":["t [] ","toks collect ","sql scan ","sql scan  collect "]}," DB2 Statement bind":{"type":"method","name":"bind","children":[],"call":[" raise ","arg_index > ","args size ","arg_index < ","result << ","' + + ","' + ","args [] "," tokens each "," tokens "]}," DB2 Statement bindParms":{"type":"method","name":"bindParms","children":[],"call":[" check_rc "," SQLBindParameter ","parms [] to_s ","parms [] ","i - ","parms [] class == ","parms [] class "," SQLDescribeParam ","1 upto "," check_ SQLBindParameter  "]}," DB2 Statement execute":{"type":"method","name":"execute","children":[],"call":[" check_rc "," SQLFreeStmt ","@numParms != "," SQLExecute "," SQLBindParameter ","valueArray [] ","i - ","valueArray << ","parms [] to_s ","parms [] ","parms [] class == ","parms [] class ","@parmArray [] decimalDigits ","@parmArray [] ","@parmArray [] size ","@parmArray [] class ","1 upto ","@numParms > "," raise ","parms size ","parms size == ","@prepared == "," check_ SQLBindParameter  ","parms []  [] to_s ","parms []  [] ","parms []  [] class == ","parms []  [] class ","@parmArray [] @parmArray [] decimalDigits  ","@parmArray [] @parmArray [] size  ","parms @parmArray [] size  ","parms []  size ","parms @parmArray [] size  == ","parms []  size == "]}," DB2 Statement prepare":{"type":"method","name":"prepare","children":[],"call":["@parmArray << ","Parameter  new "," check_rc "," SQLDescribeParam ","1 upto ","@numParms > "," SQLNumParams "," SQLPrepare "]}," DB2 Statement tables":{"type":"method","name":"tables","children":[],"call":[" fetch_all "," check_rc "," SQLTables ","schema_name upcase "]}," DB2 Statement columns":{"type":"method","name":"columns","children":[],"call":[" fetch_all "," check_rc "," SQLColumns ","table_name upcase ","schema_name upcase "]}," DB2 Statement initialize":{"type":"method","name":"initialize","children":[],"call":[" check_rc "," SQLAllocHandle ","@conn handle "]}," DB2 Connection commit":{"type":"method","name":"commit","children":[],"call":[" check_rc "," SQLEndTran "]}," DB2 Connection rollback":{"type":"method","name":"rollback","children":[],"call":[" check_rc "," SQLEndTran "]}," DB2 Connection disconnect":{"type":"method","name":"disconnect","children":[],"call":[" check_rc "," SQLDisconnect "]}," DB2 Connection set_auto_commit_off":{"type":"method","name":"set_auto_commit_off","children":[],"call":[" set_connect_attr "]}," DB2 Connection set_auto_commit_on":{"type":"method","name":"set_auto_commit_on","children":[],"call":[" set_connect_attr "]}," DB2 Connection set_connect_attr":{"type":"method","name":"set_connect_attr","children":[],"call":[" check_rc "," SQLSetConnectAttr ","value class == ","value class "]}," DB2 Connection connect":{"type":"method","name":"connect","children":[],"call":[" check_rc "," SQLConnect ","auth to_s ","user_name to_s "]}," DB2 Connection initialize":{"type":"method","name":"initialize","children":[],"call":[" check_rc "," SQLAllocHandle ","@env handle "]}," DB2 Environment data_sources":{"type":"method","name":"data_sources","children":[],"call":[" get_data_sources ","max_buffer_length > ","(lvar :max_buffer_length) max ","a [] ","retval << ","a [] == "," SQLDataSources ","SQL_MAX_DSN_LENGTH  + "," loop "," get_d SQLDataSources t SQLDataSources _sources ","(lvar :max_buffer_length) max  > ","m SQLDataSources x_buffer_length > ","(lvar :(lvar :max_buffer_length) max ) max ","(lv SQLDataSources r :m SQLDataSources x_buffer_length) m SQLDataSources x "," SQLDataSources  [] ","retv SQLDataSources l << "," SQLDataSources  [] == "," SQLD SQLDataSources t SQLDataSources Sources "]}," DB2 Environment initialize":{"type":"method","name":"initialize","children":[],"call":[" check_rc "," SQLAllocHandle "]}," DB2 DB2Util check_rc":{"type":"method","name":"check_rc","children":[],"call":[" raise ","msg << ","a [] ","a [] != ","a [] nil? ! ","a [] nil? "," SQLGetDiagRec "," loop ","(const nil :SQL_SUCCESS) include? ! ","(const nil :SQL_SUCCESS) include? "," r SQLGetDiagRec ise "," SQLGetDiagRec  [] "," SQLGetDiagRec  [] != "," SQLGetDiagRec  [] nil? ! "," SQLGetDiagRec  [] nil? "," SQLGetDi SQLGetDiagRec gRec "]}," DB2 DB2Util handle":{"type":"method","name":"handle","children":[],"call":[]}," DB2 DB2Util free":{"type":"method","name":"free","children":[],"call":[" SQLFreeHandle "]}," ActiveRecord Validations validation_class?":{"type":"method","name":"validation_class?","children":[],"call":["validation respond_to? "]}," ActiveRecord Validations validation_block?":{"type":"method","name":"validation_block?","children":[],"call":["validation arity == ","validation arity ","validation respond_to? "]}," ActiveRecord Validations run_validations":{"type":"method","name":"run_validations","children":[],"call":[" raise ","Validations need to be either a symbol, string (to be eval'ed), proc/method, or  + ","validation send "," validation_class? ","validation call "," validation_block? "," eval "," binding ","validation is_a? "," send ","validations each ","validations nil? "," class read_inheritable_attribute ","validation_method to_sym "," class "," filter_class? ","String  === ","Symbol  === ","validation_method to_s "," class read_inheritable_attribute  each "," class read_inheritable_attribute  nil? "]}," ActiveRecord Validations save!":{"type":"method","name":"save!","children":[],"call":[" raise "," save_without_validation "," valid? ","RecordInvalid  new "," perform_validations "," raise_record_invalid "," raise_validation_error "]}," ActiveRecord Validations ClassMethods validation_method":{"type":"method","name":"validation_method","children":[],"call":[]}," ActiveRecord Validations ClassMethods write_inheritable_set":{"type":"method","name":"write_inheritable_set","children":[],"call":[" write_inheritable_attribute ","methods | "," read_inheritable_attribute ","existing_methods | "]}," ActiveRecord Validations ClassMethods validates_numericality_of":{"type":"method","name":"validates_numericality_of","children":[],"call":["record errors add ","configuration [] ","record errors ","Kernel  Float ","record send to_s ","record send "," validates_each ","record send to_s =~ ","configuration update ","attr_names pop ","attr_names last is_a? ","attr_names last ","ActiveRecord Errors  default_error_messages [] ","ActiveRecord Errors  default_error_messages "," class_eval "," validation_method ","ActiveRecord Errors  default_error_messages [] % ","raw_value method [] ","raw_value method ","ALL_NUMERICALITY_CHECKS  [] ","raw_value to_i method [] ","raw_value to_i method ","raw_value to_i ","numericality_options each ","raw_value to_s ","raw_value to_s =~ ","raw_value nil? "," raise ","configuration [] is_a? ","(send\n  (lvar :numericality_options) :-\n  (array\n    (sym :odd)\n    (sym :even))) each ","numericality_options - ","ALL_NUMERICALITY_CHECKS  keys & ","configuration keys ","ALL_NUMERICALITY_CHECKS  keys ","attr_names extract_options! ","message % "," validates_with "," _merge_attributes ","ActiveRecord Errors  default_error_message % s [] ","ActiveRecord Errors  default_error_message % s ","ActiveRecord Errors  default_error_message % s [] % ","Kernel  Float  method [] ","raw_value to_i  method [] ","Kernel  Float  method ","raw_value to_i  method ","Kernel  Float  to_i method [] ","raw_value to_i  to_i method [] ","Kernel  Float  to_i method ","raw_value to_i  to_i method ","Kernel  Float  to_i ","raw_value to_i  to_i ","ALL_NUMERICALITY_CHECKS  keys &  each ","Kernel  Float  to_s ","raw_value to_i  to_s ","Kernel  Float  to_s =~ ","raw_value to_i  to_s =~ ","Kernel  Float  nil? ","raw_value to_i  nil? ","(send\n  (lvar :ALL_NUMERICALITY_CHECKS  keys & ) :-\n  (array\n    (sym :odd)\n    (sym :even))) each ","ALL_NUMERICALITY_CHECKS  keys &  - ","message %  % "]}," ActiveRecord Validations ClassMethods validates_associated":{"type":"method","name":"validates_associated","children":[],"call":["record errors add ","configuration [] ","record errors ","r valid? ","r nil? ","(if\n  (send\n    (lvar :value) :is_a?\n    (const nil :Array))\n  (lvar :value)\n  (array\n    (lvar :value))) inject ","value is_a? "," validates_each ","configuration update ","attr_names pop ","attr_names last is_a? ","attr_names last ","ActiveRecord Errors  default_error_messages [] ","ActiveRecord Errors  default_error_messages "," class_eval "," validation_method ","configuration [] gsub! ","attr_names extract_options! ","(send\n  (begin\n    (if\n      (send\n        (lvar :value) :is_a?\n        (const nil :Array))\n      (lvar :value)\n      (array\n        (lvar :value)))) :collect) all? ","(if\n  (send\n    (lvar :value) :is_a?\n    (const nil :Array))\n  (lvar :value)\n  (array\n    (lvar :value))) collect "," validates_with "," _merge_attributes "]}," ActiveRecord Validations ClassMethods validates_inclusion_of":{"type":"method","name":"validates_inclusion_of","children":[],"call":["record errors add ","configuration [] ","record errors ","enum include? "," validates_each "," raise ","enum respond_to? ","configuration update ","attr_names pop ","attr_names last is_a? ","attr_names last ","ActiveRecord Errors  default_error_messages [] ","ActiveRecord Errors  default_error_messages "," class_eval ","enum inspect "," validation_method ","configuration [] gsub! ","configuration [] % ","attr_names extract_options! "]}," ActiveRecord Validations ClassMethods validates_format_of":{"type":"method","name":"validates_format_of","children":[],"call":["record errors add ","configuration [] ","record errors ","value to_s =~ ","value to_s "," validates_each "," raise ","configuration [] is_a? ","configuration update ","attr_names pop ","attr_names last is_a? ","attr_names last ","ActiveRecord Errors  default_error_messages [] ","ActiveRecord Errors  default_error_messages "," class_eval "," validation_method ","Regexp  quote ","configuration [] source ","configuration [] gsub! ","attr_names extract_options! ","configuration [] % "]}," ActiveRecord Validations ClassMethods validates_uniqueness_of":{"type":"method","name":"validates_uniqueness_of","children":[],"call":["record errors add ","configuration [] ","record errors ","record class find_first ","record send ","record class primary_key ","record class ","record new_record? "," validates_each ","configuration update ","attr_names pop ","attr_names last is_a? ","attr_names last ","ActiveRecord Errors  default_error_messages [] ","ActiveRecord Errors  default_error_messages "," class_eval ","configuration [] gsub! ","finder_class find ","klass abstract_class? ! ","klass abstract_class? ","class_hierarchy detect ","class_hierarchy insert ","class_hierarchy first superclass ","class_hierarchy first ","class_hierarchy first != ","condition_params << ","condition_sql << ","record class table_name "," attribute_condition "," Array map "," Array ","value downcase "," columns_hash [] text? ! "," columns_hash [] text? "," columns_hash [] ","attr_name to_s "," columns_hash ","value nil? ","attr_names extract_options! ","a [] == ","a [] ","results any? ","finder_class columns_hash [] text? ","finder_class columns_hash [] ","finder_class columns_hash ","results length zero? ","results length "," connection select_all "," construct_finder_sql ","finder_class quoted_table_name "," connection quote_column_name "," connection ","finder_class with_exclusive_scope ","record class quoted_table_name ","finder_class columns_hash [] text? ! ","value chars downcase ","value chars ","is_text_column ! ","value to_s ","value nil? ! ","value chars downcase to_s ","finder_class exists? ","value mb_chars downcase ","value mb_chars "," connection case_sensitive_equality_operator ","condition_sql << << ","column text? ! ","column text? ","value to_s mb_chars [] ","column limit ","value to_s mb_chars ","value to_s [] "," validates_with "," _merge_attributes ","value to_s  downcase ","value to_s mb_chars []  downcase ","value to_s []  downcase "," finder_class columns_hash [] s_hash [] text? ! "," finder_class columns_hash [] s_hash [] text? "," finder_class columns_hash [] s_hash [] "," finder_class columns_hash [] s_hash ","value to_s  nil? ","value to_s mb_chars []  nil? ","value to_s []  nil? ","finder_class finder_class columns_hash [] s_hash [] text? ","finder_class finder_class columns_hash [] s_hash [] ","finder_class finder_class columns_hash [] s_hash "," connection quote_finder_class columns_hash [] _name ","finder_class with_exclusive_configuration []  ","finder_class finder_class columns_hash [] s_hash [] text? ! ","value to_s  chars downcase ","value to_s mb_chars []  chars downcase ","value to_s []  chars downcase ","value to_s  chars ","value to_s mb_chars []  chars ","value to_s []  chars ","finder_class columns_hash [] text?  ! ","is_text_finder_class columns_hash []  ! ","value to_s  to_s ","value to_s mb_chars []  to_s ","value to_s []  to_s ","value to_s  nil? ! ","value to_s mb_chars []  nil? ! ","value to_s []  nil? ! ","value to_s  chars downcase to_s ","value to_s mb_chars []  chars downcase to_s ","value to_s []  chars downcase to_s ","value to_s  mb_chars downcase ","value to_s mb_chars []  mb_chars downcase ","value to_s []  mb_chars downcase ","value to_s  mb_chars ","value to_s mb_chars []  mb_chars ","value to_s []  mb_chars ","finder_class columns_hash []  text? ! ","finder_class columns_hash []  text? ","value to_s  to_s mb_chars [] ","value to_s mb_chars []  to_s mb_chars [] ","value to_s []  to_s mb_chars [] ","finder_class columns_hash []  limit ","value to_s  to_s mb_chars ","value to_s mb_chars []  to_s mb_chars ","value to_s []  to_s mb_chars ","value to_s  to_s [] ","value to_s mb_chars []  to_s [] ","value to_s []  to_s [] "]}," ActiveRecord Validations ClassMethods validates_length_of":{"type":"method","name":"validates_length_of","children":[],"call":["record errors add ","record errors ","value size method [] ! ","value size method [] ","value size method ","validity_checks [] ","value size ","value nil? "," validates_each ","message % ","options [] ","message_options [] "," raise ","option_value >= ","option_value is_a? "," validates_length_of ","option_value end ","option_value begin ","range_options first ","range_options size ","ALL_RANGE_OPTIONS  & ","options keys ","options update ","attrs pop symbolize_keys ","attrs pop ","attrs last is_a? ","attrs last ","DEFAULT_SIZE_VALIDATION_OPTIONS  dup "," class_eval "," validation_method ","configuration [] ","msg % ","is kind_of? ","minimum kind_of? ","maximum kind_of? ","within kind_of? ","options_used > ","configuration update ","attr_names pop ","attr_names last is_a? ","attr_names last ","ActiveRecord Errors  default_error_messages [] ","ActiveRecord Errors  default_error_messages ","value size > ","value size < ","value size != ","record errors add_on_boundary_breaking ","record send nil? ","record send ","value nil? ! ","value split size method [] ","value split size method ","value split size ","value split ","value kind_of? ","(or\n  (send\n    (lvar :options) :[]\n    (sym :message))\n  (send\n    (lvar :options) :[]\n    (send\n      (lvar :message_options) :[]\n      (lvar :option)))) % ","value split size > ","value split size < ","options [] % ","attrs extract_options! symbolize_keys ","attrs extract_options! ","(pair\n  (sym :too_long)\n  (send\n    (send\n      (const\n        (const nil :ActiveRecord) :Errors) :default_error_messages) :[]\n    (sym :too_long))) merge ","options [] call "," lambda ","(pair\n  (sym :tokenizer)\n  (block\n    (send nil :lambda)\n    (args\n      (arg :value))\n    (send\n      (lvar :value) :split\n      (regexp\n        (regopt))))) merge ","(pair\n  (sym :is)\n  (sym :wrong_length)) [] "," validates_with "," _merge_attributes ","value split  size method [] ! ","options [] call  size method [] ! ","value split  size method [] ","options [] call  size method [] ","value split  size method ","options [] call  size method ","value split  size ","options [] call  size ","value split  nil? ","options [] call  nil? ","(or\n  (send\n    (lvar :options) :[]\n    (sym :message))\n  (send\n    (lvar :options) :[]\n    (send\n      (lvar :message_options) :[]\n      (lvar :option)))) %  % ","range_options first s [] ","DEFAULT_SIZE_VALIDATION_OPTIONS  dup  [] ","(pair\n  (sym :too_long)\n  (send\n    (send\n      (const\n        (const nil :ActiveRecord) :Errors) :default_error_messages) :[]\n    (sym :too_long))) merge  [] ","(pair\n  (sym :tokenizer)\n  (block\n    (send nil :lambda)\n    (args\n      (arg :value))\n    (send\n      (lvar :value) :split\n      (regexp\n        (regopt))))) merge  [] ","message_range_options first s [] ","message_DEFAULT_SIZE_VALIDATION_OPTIONS  dup  [] ","message_(pair\n  (sym :too_long)\n  (send\n    (send\n      (const\n        (const nil :ActiveRecord) :Errors) :default_error_messages) :[]\n    (sym :too_long))) merge  [] ","message_(pair\n  (sym :tokenizer)\n  (block\n    (send nil :lambda)\n    (args\n      (arg :value))\n    (send\n      (lvar :value) :split\n      (regexp\n        (regopt))))) merge  [] ","(or\n  (send\n    (lvar :options) :[]\n    (sym :message))\n  (send\n    (lvar :options) :[]\n    (send\n      (lvar :message_options) :[]\n      (lvar :option)))) % _options [] "," raconfiguration [] e ","options []  >= ","range_options first _value >= ","option_value split  >= ","option_options [] call  >= ","options []  is_a? ","range_options first _value is_a? ","option_value configuration [] _a? ","option_value split  is_a? ","option_options [] call  is_a? ","options []  end ","range_options first _value end ","option_value split  end ","option_options [] call  end ","options []  begin ","range_options first _value begin ","option_value split  begin ","option_options [] call  begin ","range_range_options first s first ","ALL_RANGE_OPTIONS  &  first ","range_DEFAULT_SIZE_VALIDATION_OPTIONS  dup  first ","range_(pair\n  (sym :too_long)\n  (send\n    (send\n      (const\n        (const nil :ActiveRecord) :Errors) :default_error_messages) :[]\n    (sym :too_long))) merge  first ","range_(pair\n  (sym :tokenizer)\n  (block\n    (send nil :lambda)\n    (args\n      (arg :value))\n    (send\n      (lvar :value) :split\n      (regexp\n        (regopt))))) merge  first ","range_range_options first s size ","ALL_RANGE_OPTIONS  &  size ","range_DEFAULT_SIZE_VALIDATION_OPTIONS  dup  size ","range_(pair\n  (sym :too_long)\n  (send\n    (send\n      (const\n        (const nil :ActiveRecord) :Errors) :default_error_messages) :[]\n    (sym :too_long))) merge  size ","range_(pair\n  (sym :tokenizer)\n  (block\n    (send nil :lambda)\n    (args\n      (arg :value))\n    (send\n      (lvar :value) :split\n      (regexp\n        (regopt))))) merge  size ","range_options first s keys ","DEFAULT_SIZE_VALIDATION_OPTIONS  dup  keys ","(pair\n  (sym :too_long)\n  (send\n    (send\n      (const\n        (const nil :ActiveRecord) :Errors) :default_error_messages) :[]\n    (sym :too_long))) merge  keys ","(pair\n  (sym :tokenizer)\n  (block\n    (send nil :lambda)\n    (args\n      (arg :value))\n    (send\n      (lvar :value) :split\n      (regexp\n        (regopt))))) merge  keys ","options message_options [] s ","options (pair\n  (sym :is)\n  (sym :wrong_length)) [] s ","range_options first s update ","DEFAULT_SIZE_VALIDATION_OPTIONS  dup  update ","(pair\n  (sym :too_long)\n  (send\n    (send\n      (const\n        (const nil :ActiveRecord) :Errors) :default_error_messages) :[]\n    (sym :too_long))) merge  update ","(pair\n  (sym :tokenizer)\n  (block\n    (send nil :lambda)\n    (args\n      (arg :value))\n    (send\n      (lvar :value) :split\n      (regexp\n        (regopt))))) merge  update ","attrs pop symbolize_message_options [] s ","attrs pop symbolize_(pair\n  (sym :is)\n  (sym :wrong_length)) [] s ","attrs last configuration [] _a? ","configuration []  kind_of? ","range_options first s_used > ","DEFAULT_SIZE_VALIDATION_OPTIONS  dup _used > ","(pair\n  (sym :too_long)\n  (send\n    (send\n      (const\n        (const nil :ActiveRecord) :Errors) :default_error_messages) :[]\n    (sym :too_long))) merge _used > ","(pair\n  (sym :tokenizer)\n  (block\n    (send nil :lambda)\n    (args\n      (arg :value))\n    (send\n      (lvar :value) :split\n      (regexp\n        (regopt))))) merge _used > ","attr_names last configuration [] _a? ","ActiveRecord Errors  default_error_(or\n  (send\n    (lvar :options) :[]\n    (sym :message))\n  (send\n    (lvar :options) :[]\n    (send\n      (lvar :message_options) :[]\n      (lvar :option)))) % s [] ","ActiveRecord Errors  default_error_(or\n  (send\n    (lvar :options) :[]\n    (sym :message))\n  (send\n    (lvar :options) :[]\n    (send\n      (lvar :message_options) :[]\n      (lvar :option)))) % s ","value split  size > ","options [] call  size > ","value split  size < ","options [] call  size < ","value split  size != ","options [] call  size != ","value split  nil? ! ","options [] call  nil? ! ","value split  split size method [] ","options [] call  split size method [] ","value split  split size method ","options [] call  split size method ","value split  split size ","options [] call  split size ","value split  split ","options [] call  split ","value split  kind_of? ","options [] call  kind_of? ","(or\n  (send\n    (lvar :range_options first s) :[]\n    (sym :message))\n  (send\n    (lvar :range_options first s) :[]\n    (send\n      (lvar :message_range_options first s) :[]\n      (lvar :range_options first )))) % ","(or\n  (send\n    (lvar :DEFAULT_SIZE_VALIDATION_OPTIONS  dup ) :[]\n    (sym :message))\n  (send\n    (lvar :DEFAULT_SIZE_VALIDATION_OPTIONS  dup ) :[]\n    (send\n      (lvar :message_DEFAULT_SIZE_VALIDATION_OPTIONS  dup ) :[]\n      (lvar :option)))) % ","(or\n  (send\n    (lvar :(pair\n  (sym :too_long)\n  (send\n    (send\n      (const\n        (const nil :ActiveRecord) :Errors) :default_error_messages) :[]\n    (sym :too_long))) merge ) :[]\n    (sym :message))\n  (send\n    (lvar :(pair\n  (sym :too_long)\n  (send\n    (send\n      (const\n        (const nil :ActiveRecord) :Errors) :default_error_messages) :[]\n    (sym :too_long))) merge ) :[]\n    (send\n      (lvar :message_(pair\n  (sym :too_long)\n  (send\n    (send\n      (const\n        (const nil :ActiveRecord) :Errors) :default_error_messages) :[]\n    (sym :too_long))) merge ) :[]\n      (lvar :option)))) % ","(or\n  (send\n    (lvar :(pair\n  (sym :tokenizer)\n  (block\n    (send nil :lambda)\n    (args\n      (arg :value))\n    (send\n      (lvar :value) :split\n      (regexp\n        (regopt))))) merge ) :[]\n    (sym :message))\n  (send\n    (lvar :(pair\n  (sym :tokenizer)\n  (block\n    (send nil :lambda)\n    (args\n      (arg :value))\n    (send\n      (lvar :value) :split\n      (regexp\n        (regopt))))) merge ) :[]\n    (send\n      (lvar :message_(pair\n  (sym :tokenizer)\n  (block\n    (send nil :lambda)\n    (args\n      (arg :value))\n    (send\n      (lvar :value) :split\n      (regexp\n        (regopt))))) merge ) :[]\n      (lvar :option)))) % ","(or\n  (send\n    (lvar :options) :[]\n    (sym :(or\n  (send\n    (lvar :options) :[]\n    (sym :message))\n  (send\n    (lvar :options) :[]\n    (send\n      (lvar :message_options) :[]\n      (lvar :option)))) % ))\n  (send\n    (lvar :options) :[]\n    (send\n      (lvar :(or\n  (send\n    (lvar :options) :[]\n    (sym :message))\n  (send\n    (lvar :options) :[]\n    (send\n      (lvar :message_options) :[]\n      (lvar :option)))) % _options) :[]\n      (lvar :option)))) % ","value split  split size > ","options [] call  split size > ","value split  split size < ","options [] call  split size < ","range_options first s [] % ","DEFAULT_SIZE_VALIDATION_OPTIONS  dup  [] % ","(pair\n  (sym :too_long)\n  (send\n    (send\n      (const\n        (const nil :ActiveRecord) :Errors) :default_error_messages) :[]\n    (sym :too_long))) merge  [] % ","(pair\n  (sym :tokenizer)\n  (block\n    (send nil :lambda)\n    (args\n      (arg :value))\n    (send\n      (lvar :value) :split\n      (regexp\n        (regopt))))) merge  [] % ","attrs extract_range_options first s! symbolize_keys ","attrs extract_DEFAULT_SIZE_VALIDATION_OPTIONS  dup ! symbolize_keys ","attrs extract_(pair\n  (sym :too_long)\n  (send\n    (send\n      (const\n        (const nil :ActiveRecord) :Errors) :default_error_messages) :[]\n    (sym :too_long))) merge ! symbolize_keys ","attrs extract_(pair\n  (sym :tokenizer)\n  (block\n    (send nil :lambda)\n    (args\n      (arg :value))\n    (send\n      (lvar :value) :split\n      (regexp\n        (regopt))))) merge ! symbolize_keys ","attrs extract_options! symbolize_message_options [] s ","attrs extract_options! symbolize_(pair\n  (sym :is)\n  (sym :wrong_length)) [] s ","attrs extract_range_options first s! ","attrs extract_DEFAULT_SIZE_VALIDATION_OPTIONS  dup ! ","attrs extract_(pair\n  (sym :too_long)\n  (send\n    (send\n      (const\n        (const nil :ActiveRecord) :Errors) :default_error_messages) :[]\n    (sym :too_long))) merge ! ","attrs extract_(pair\n  (sym :tokenizer)\n  (block\n    (send nil :lambda)\n    (args\n      (arg :value))\n    (send\n      (lvar :value) :split\n      (regexp\n        (regopt))))) merge ! ","(pair\n  (sym :too_long)\n  (send\n    (send\n      (const\n        (const nil :ActiveRecord) :Errors) :default_error_(or\n  (send\n    (lvar :options) :[]\n    (sym :message))\n  (send\n    (lvar :options) :[]\n    (send\n      (lvar :message_options) :[]\n      (lvar :option)))) % s) :[]\n    (sym :too_long))) merge ","(pair\n  (sym :options [] % )\n  (send\n    (send\n      (const\n        (const nil :ActiveRecord) :Errors) :default_error_messages) :[]\n    (sym :options [] % ))) merge ","range_options first s [] call ","DEFAULT_SIZE_VALIDATION_OPTIONS  dup  [] call ","(pair\n  (sym :too_long)\n  (send\n    (send\n      (const\n        (const nil :ActiveRecord) :Errors) :default_error_messages) :[]\n    (sym :too_long))) merge  [] call ","(pair\n  (sym :tokenizer)\n  (block\n    (send nil :lambda)\n    (args\n      (arg :value))\n    (send\n      (lvar :value) :split\n      (regexp\n        (regopt))))) merge  [] call ","(pair\n  (sym :tokenizer)\n  (block\n    (send nil :lambda)\n    (args\n      (arg :value split ))\n    (send\n      (lvar :value split ) :split\n      (regexp\n        (regopt))))) merge ","(pair\n  (sym :tokenizer)\n  (block\n    (send nil :lambda)\n    (args\n      (arg :options [] call ))\n    (send\n      (lvar :options [] call ) :split\n      (regexp\n        (regopt))))) merge ","(pair\n  (sym :configuration [] )\n  (sym :wrong_length)) [] "]}," ActiveRecord Validations ClassMethods validates_presence_of":{"type":"method","name":"validates_presence_of","children":[],"call":["record errors add_on_empty ","configuration [] ","record errors "," send "," validation_method ","attr_names each ","configuration update ","attr_names pop ","attr_names last is_a? ","attr_names last ","ActiveRecord Errors  default_error_messages [] ","ActiveRecord Errors  default_error_messages "," class_eval ","configuration [] gsub! ","record errors add_on_blank "," evaluate_condition "," evaluate_condition ! ","attr_names extract_options! "," validates_with "," _merge_attributes "]}," ActiveRecord Validations ClassMethods validates_acceptance_of":{"type":"method","name":"validates_acceptance_of","children":[],"call":["record errors add ","configuration [] ","record errors ","value == "," validates_each "," attr_accessor ","configuration update ","attr_names pop ","attr_names last is_a? ","attr_names last ","ActiveRecord Errors  default_error_messages [] ","ActiveRecord Errors  default_error_messages "," class_eval "," validation_method ","configuration [] gsub! "," column_names include? ","name to_s "," column_names ","attr_names reject ","attr_names extract_options! ","db_cols include? "]}," ActiveRecord Validations ClassMethods validates_confirmation_of":{"type":"method","name":"validates_confirmation_of","children":[],"call":["record errors add ","configuration [] ","record errors ","value == ","record send ","record send nil? "," validates_each "," attr_accessor ","attr_names map ","configuration update ","attr_names pop ","attr_names last is_a? ","attr_names last ","ActiveRecord Errors  default_error_messages [] ","ActiveRecord Errors  default_error_messages "," class_eval "," validation_method ","configuration [] gsub! ","attr_names extract_options! "]}," ActiveRecord Validations ClassMethods validates_each":{"type":"method","name":"validates_each","children":[],"call":["options [] ","value nil? ","record send ","attrs each "," send "," validation_method ","attrs flatten ","attrs pop symbolize_keys ","attrs pop ","attrs last is_a? ","attrs last ","value blank? "," evaluate_condition "," evaluate_condition ! ","attrs extract_options! symbolize_keys ","attrs extract_options! ","attrs pop symbolize_keys  [] ","attrs extract_options! symbolize_keys  [] ","record send  nil? ","attrs flatten  each ","attrs flatten  flatten ","attrs flatten  pop symbolize_keys ","attrs flatten  pop ","attrs flatten  last is_a? ","attrs flatten  last ","record send  blank? ","attrs flatten  extract_options! symbolize_keys ","attrs extract_attrs pop symbolize_keys ! symbolize_keys ","attrs extract_attrs extract_options! symbolize_keys ! symbolize_keys ","attrs flatten  extract_options! ","attrs extract_attrs pop symbolize_keys ! ","attrs extract_attrs extract_options! symbolize_keys ! "]}," ActiveRecord Validations ClassMethods validate_on_update":{"type":"method","name":"validate_on_update","children":[],"call":[" write_inheritable_set ","methods << "," block_given? "]}," ActiveRecord Validations ClassMethods validate_on_create":{"type":"method","name":"validate_on_create","children":[],"call":[" write_inheritable_set ","methods << "," block_given? "]}," ActiveRecord Validations ClassMethods validate":{"type":"method","name":"validate","children":[],"call":[" write_inheritable_set ","methods << "," block_given? "]}," ActiveRecord Transactions ClassMethods unlock_mutex":{"type":"method","name":"unlock_mutex","children":[],"call":["TRANSACTION_MUTEX  unlock ","Thread  current [] == ","Thread  current [] ","Thread  current "]}," ActiveRecord Transactions ClassMethods lock_mutex":{"type":"method","name":"lock_mutex","children":[],"call":["Thread  current [] ","Thread  current ","Thread  current []= ","Thread  current [] == ","TRANSACTION_MUTEX  lock "]}," ActiveRecord Base timestamps_gmt":{"type":"method","name":"timestamps_gmt","children":[],"call":[]}," ActiveRecord Base timestamps_gmt=":{"type":"method","name":"timestamps_gmt=","children":[],"call":[]}," ActiveRecord Timestamp update_with_timestamps":{"type":"method","name":"update_with_timestamps","children":[],"call":[" update_without_timestamps "," write_attribute "," respond_to? "," record_timestamps ","Time  now ","Time  now utc "," class default_timezone == "," class default_timezone "," class ","Time  now gmtime "," timestamps_gmt "," changed? "," partial_updates? ! "," partial_updates? "," current_time_from_proper_timezone "," updaTime  now e_wiTime  now houTime  now _Time  now imesTime  now amps "," updaTime  now utc e_wiTime  now utc houTime  now utc _Time  now utc imesTime  now utc amps "," updaTime  now gmtime e_wiTime  now gmtime houTime  now gmtime _Time  now gmtime imesTime  now gmtime amps "," wriTime  now e_aTime  now Time  now ribuTime  now e "," wriTime  now utc e_aTime  now utc Time  now utc ribuTime  now utc e "," wriTime  now gmtime e_aTime  now gmtime Time  now gmtime ribuTime  now gmtime e "," respond_Time  now o? "," respond_Time  now utc o? "," respond_Time  now gmtime o? "," record_Time  now imesTime  now amps "," record_Time  now utc imesTime  now utc amps "," record_Time  now gmtime imesTime  now gmtime amps ","Time  now uTime  now c ","Time  now uTime  now utc c ","Time  now uTime  now gmtime c "," class defaulTime  now _Time  now imezone == "," class defaulTime  now utc _Time  now utc imezone == "," class defaulTime  now gmtime _Time  now gmtime imezone == "," class defaulTime  now _Time  now imezone "," class defaulTime  now utc _Time  now utc imezone "," class defaulTime  now gmtime _Time  now gmtime imezone ","Time  now gmTime  now ime ","Time  now gmTime  now utc ime ","Time  now gmTime  now gmtime ime "," Time  now imesTime  now amps_gmTime  now  "," Time  now utc imesTime  now utc amps_gmTime  now utc  "," Time  now gmtime imesTime  now gmtime amps_gmTime  now gmtime  "," parTime  now ial_updaTime  now es? ! "," parTime  now utc ial_updaTime  now utc es? ! "," parTime  now gmtime ial_updaTime  now gmtime es? ! "," parTime  now ial_updaTime  now es? "," parTime  now utc ial_updaTime  now utc es? "," parTime  now gmtime ial_updaTime  now gmtime es? "," currenTime  now _Time  now ime_from_proper_Time  now imezone "," currenTime  now utc _Time  now utc ime_from_proper_Time  now utc imezone "," currenTime  now gmtime _Time  now gmtime ime_from_proper_Time  now gmtime imezone ","  current_time_from_proper_timezone _from_proper_timezone "]}," ActiveRecord Timestamp create_with_timestamps":{"type":"method","name":"create_with_timestamps","children":[],"call":[" create_without_timestamps "," write_attribute "," respond_to? "," record_timestamps "," created_on nil? "," created_on "," created_at nil? "," created_at ","Time  now ","Time  now utc "," class default_timezone == "," class default_timezone "," class ","Time  now gmtime "," timestamps_gmt "," updated_on nil? "," updated_on "," updated_at nil? "," updated_at "," current_time_from_proper_timezone "," creaTime  now e_wiTime  now houTime  now _Time  now imesTime  now amps "," creaTime  now utc e_wiTime  now utc houTime  now utc _Time  now utc imesTime  now utc amps "," creaTime  now gmtime e_wiTime  now gmtime houTime  now gmtime _Time  now gmtime imesTime  now gmtime amps "," wriTime  now e_aTime  now Time  now ribuTime  now e "," wriTime  now utc e_aTime  now utc Time  now utc ribuTime  now utc e "," wriTime  now gmtime e_aTime  now gmtime Time  now gmtime ribuTime  now gmtime e "," respond_Time  now o? "," respond_Time  now utc o? "," respond_Time  now gmtime o? "," record_Time  now imesTime  now amps "," record_Time  now utc imesTime  now utc amps "," record_Time  now gmtime imesTime  now gmtime amps "," creaTime  now ed_on nil? "," creaTime  now utc ed_on nil? "," creaTime  now gmtime ed_on nil? "," creaTime  now ed_on "," creaTime  now utc ed_on "," creaTime  now gmtime ed_on "," creaTime  now ed_aTime  now  nil? "," creaTime  now utc ed_aTime  now utc  nil? "," creaTime  now gmtime ed_aTime  now gmtime  nil? "," creaTime  now ed_aTime  now  "," creaTime  now utc ed_aTime  now utc  "," creaTime  now gmtime ed_aTime  now gmtime  ","Time  now uTime  now c ","Time  now uTime  now utc c ","Time  now uTime  now gmtime c "," class defaulTime  now _Time  now imezone == "," class defaulTime  now utc _Time  now utc imezone == "," class defaulTime  now gmtime _Time  now gmtime imezone == "," class defaulTime  now _Time  now imezone "," class defaulTime  now utc _Time  now utc imezone "," class defaulTime  now gmtime _Time  now gmtime imezone ","Time  now gmTime  now ime ","Time  now gmTime  now utc ime ","Time  now gmTime  now gmtime ime "," Time  now imesTime  now amps_gmTime  now  "," Time  now utc imesTime  now utc amps_gmTime  now utc  "," Time  now gmtime imesTime  now gmtime amps_gmTime  now gmtime  "," updaTime  now ed_on nil? "," updaTime  now utc ed_on nil? "," updaTime  now gmtime ed_on nil? "," updaTime  now ed_on "," updaTime  now utc ed_on "," updaTime  now gmtime ed_on "," updaTime  now ed_aTime  now  nil? "," updaTime  now utc ed_aTime  now utc  nil? "," updaTime  now gmtime ed_aTime  now gmtime  nil? "," updaTime  now ed_aTime  now  "," updaTime  now utc ed_aTime  now utc  "," updaTime  now gmtime ed_aTime  now gmtime  "," currenTime  now _Time  now ime_from_proper_Time  now imezone "," currenTime  now utc _Time  now utc ime_from_proper_Time  now utc imezone "," currenTime  now gmtime _Time  now gmtime ime_from_proper_Time  now gmtime imezone ","  current_time_from_proper_timezone _from_proper_timezone "]}," ActiveRecord Timestamp append_features":{"type":"method","name":"append_features","children":[],"call":[]}," ActiveRecord Reflection AssociationReflection table_name":{"type":"method","name":"table_name","children":[],"call":[" klass table_name "," klass "]}," ActiveRecord Reflection MacroReflection macro":{"type":"method","name":"macro","children":[],"call":[]}," ActiveRecord Observer observe":{"type":"method","name":"observe","children":[],"call":["Set  new "," define_method ","model to_s camelize constantize ","model to_s camelize ","model to_s ","model is_a? ","models collect! ","models flatten! "]}," ActiveRecord Migrator irrelevant_migration?":{"type":"method","name":"irrelevant_migration?","children":[],"call":["version to_i > "," current_version ","version to_i "," down? ","version to_i <= "," up? "]}," ActiveRecord Migrator reached_target_version?":{"type":"method","name":"reached_target_version?","children":[],"call":["version to_i == ","version to_i "," down? ","version to_i - == ","version to_i - "," up? ","version to_i <= ","version to_i - >= ","@target_version == "]}," ActiveRecord Migrator down?":{"type":"method","name":"down?","children":[],"call":["@direction == "]}," ActiveRecord Migrator up?":{"type":"method","name":"up?","children":[],"call":["@direction == "]}," ActiveRecord Migrator set_schema_version":{"type":"method","name":"set_schema_version","children":[],"call":["Base  connection update ","version to_i ","version to_i - "," down? ","Base  connection "," class schema_info_table_name "," class "]}," ActiveRecord Migrator migration_version_and_name":{"type":"method","name":"migration_version_and_name","children":[],"call":["migration_file scan first ","migration_file scan "]}," ActiveRecord Migrator migration_class":{"type":"method","name":"migration_class","children":[],"call":["migration_name camelize constantize ","migration_name camelize ","klass version= "," attr_accessor ","migration_name camelize constantize  version= "]}," ActiveRecord Migrator migration_files":{"type":"method","name":"migration_files","children":[],"call":["files reverse "," down? ","Dir  [] ","Dir  [] sort "," migration_version_and_name first to_i "," migration_version_and_name first "," migration_version_and_name ","Dir  [] sort_by ","m first to_i ","m first "," raise ","IllegalMigrationNameError  new ","paths flat_map ","Dir  []  reverse ","Dir  [] sort  reverse ","  migration_version_and_name igration_version_and_na migration_version_and_name e first to_i ","  migration_version_and_name igration_version_and_na migration_version_and_name e first ","  migration_version_and_name igration_version_and_na migration_version_and_name e "," migration_version_and_name  first to_i "," migration_version_and_name  first ","IllegalMigrationNa migration_version_and_name eError  new ","paths flat_ migration_version_and_name ap "]}," ActiveRecord Migrator migration_classes":{"type":"method","name":"migration_classes","children":[],"call":[" migration_class "," migration_version_and_name "," load "," migration_files ","migrations sort ","migrations sort reverse "," down? ","version to_i "," migration_files collect ","migrations << "," assert_unique_migration_version "," migration_files inject ","sorted reverse ","m version ","migrations sort_by ","classes reverse ","(send\n  (send nil :migration_files) :inject\n  (array)) sort_by ","(send\n  (send nil :migration_files) :inject\n  (array)) sort_by  reverse "]}," ActiveRecord Migrator migrate":{"type":"method","name":"migrate","children":[],"call":[" set_schema_version ","migration_class send ","Base  logger info ","Base  logger "," irrelevant_migration? "," reached_target_version? "," migration_classes "," migration_classes each "," current_version == "," current_version "," down "," current_version > "," up "," current_version < ","target_version nil? ","Base  connection initialize_schema_information ","Base  connection ","migration_class migrate ","migration_class version "," record_version_state_after_migrating ","migration version ","migration migrate ","migration write ","migration announce "," migrated include? ! "," migrated include? ","migration version to_i "," migrated "," down? "," up? ","runnable each ","runnable pop ","target nil? ! ","target nil? "," migrations [] "," migrations "," migrations size - "," migrations size "," migrations index "," raise ","UnknownMigrationVersionError  new ","@target_version > ","@target_version nil? ! ","@target_version nil? ","m version == ","m version "," migrations detect ","e backtrace ","Base  connection supports_ddl_transactions? "," ddl_transaction ","migration name ","target_version == ","ran << ","seen ! ","block call ! ","block call "," use_transaction? "," execute_migration_in_transaction ","running each ","running select! ","ActiveSupport Deprecation  warn "," block_given? "," runnable "," target ! "," target "," runnable each "," migrate_without_lock "," with_advisory_lock "," use_advisory_lock? "," migrations []  each "," migrations []  pop "," migrated include?  ! "," runnable  each "," runnable  select! ","  migrations []  ","  migrations []  each "]}," ActiveRecord Migrator current_version":{"type":"method","name":"current_version","children":[],"call":[" class current_version "," class ","Base  connection select_one [] to_i ","Base  connection select_one [] ","Base  connection select_one ","Base  connection ","(or\n  (send\n    (send\n      (const nil :Base) :connection) :select_one\n    (dstr\n      (str \"SELECT version FROM \")\n      (begin\n        (send nil :schema_info_table_name))))\n  (hash\n    (pair\n      (str \"version\")\n      (int 0)))) [] to_i ","(or\n  (send\n    (send\n      (const nil :Base) :connection) :select_one\n    (dstr\n      (str \"SELECT version FROM \")\n      (begin\n        (send nil :schema_info_table_name))))\n  (hash\n    (pair\n      (str \"version\")\n      (int 0)))) [] "," schema_info_table_name ","Base  connection select_value to_i ","Base  connection select_value ","Base  connection select_values map max ","Base  connection select_values map ","Base  connection select_values "," schema_migrations_table_name "," migrated last "," migrated "," get_all_versions max "," get_all_versions ","Base  connection table_exists? "," migrated max "," migrated sort last "," migrated sort ","connection table_exists? ","MigrationContext  new current_version ","MigrationContext  new "," migrations_paths ","InternalMetadata  new ","SchemaMigration  new ","ActiveRecord Tasks DatabaseTasks  migration_connection ","Base  ActiveRecord Tasks DatabaseTasks  migration_connection  select_one [] to_i ","Base  ActiveRecord Tasks DatabaseTasks  migration_connection  select_one [] ","Base  ActiveRecord Tasks DatabaseTasks  migration_connection  select_one ","Base  ActiveRecord Tasks DatabaseTasks  migration_connection  ","(or\n  (send\n    (send\n      (const nil :Base) :ActiveRecord Tasks DatabaseTasks  migration_connection ) :select_one\n    (dstr\n      (str \"SELECT version FROM \")\n      (begin\n        (send nil :schema_info_table_name))))\n  (hash\n    (pair\n      (str \"version\")\n      (int 0)))) [] to_i ","(or\n  (send\n    (send\n      (const nil :Base) :ActiveRecord Tasks DatabaseTasks  migration_connection ) :select_one\n    (dstr\n      (str \"SELECT version FROM \")\n      (begin\n        (send nil :schema_info_table_name))))\n  (hash\n    (pair\n      (str \"version\")\n      (int 0)))) [] ","Base  ActiveRecord Tasks DatabaseTasks  migration_connection  select_value to_i ","Base  ActiveRecord Tasks DatabaseTasks  migration_connection  select_value ","Base  ActiveRecord Tasks DatabaseTasks  migration_connection  select_values map max ","Base  ActiveRecord Tasks DatabaseTasks  migration_connection  select_values map ","Base  ActiveRecord Tasks DatabaseTasks  migration_connection  select_values "," SchemaMigration  new s_table_name ","Base  ActiveRecord Tasks DatabaseTasks  migration_connection  table_exists? ","ActiveRecord Tasks DatabaseTasks  migration_connection  table_exists? ","ActiveRecord Tasks DatabaseTasks  migration_ActiveRecord Tasks DatabaseTasks  migration_connection  "]}," ActiveRecord Migrator initialize":{"type":"method","name":"initialize","children":[],"call":["Base  connection initialize_schema_information ","Base  connection "," raise ","StandardError  new ","Base  connection supports_migrations? ","Base  connection initialize_schema_migrations_table ","ActiveRecord SchemaMigration  create_table "," validate "," class migrations "," class ","ActiveSupport Deprecation  warn "," Array grep empty? "," Array grep "," Array ","Base  connection initialize_internal_metadata_table ","ActiveRecord InternalMetadata  create_table ","@schema_migration create_table ","@internal_metadata create_table "]}," ActiveRecord Migrator down":{"type":"method","name":"down","children":[],"call":[" new migrate "," new ","migrations select! "," block_given? "," migrations "," migrations  select! ","  migrations  "]}," ActiveRecord Migrator up":{"type":"method","name":"up","children":[],"call":[" new migrate "," new ","migrations select! "," block_given? "," migrations "," migrations  select! ","  migrations  "]}," ActiveRecord Migration method_missing":{"type":"method","name":"method_missing","children":[],"call":["ActiveRecord Base  connection send ","ActiveRecord Base  connection ","arguments []= ","Migrator  proper_table_name ","arguments first ","arguments empty? ","method == "," say_with_time ","(send\n  (lvar :arguments) :map) join ","a inspect ","arguments map ","arguments map * "," connection send "," connection ","(send\n  (lvar :arguments) :map) * "," connection respond_to? ","arguments second "," reverting? ","@connection respond_to? ","(sym :execute) include? "," proper_table_name "," table_name_options ","(or\n  (send nil :delegate)\n  (send\n    (send nil :superclass) :delegate)) send "," superclass delegate "," superclass "," delegate ","(sym :rename_table) include? ","arguments second is_a? ! ","arguments second is_a? "," nearest_delegate send "," nearest_delegate "," format_arguments "," execution_strategy send "," execution_strategy "," execution_strategy respond_to? "]}," ActiveRecord Migration down":{"type":"method","name":"down","children":[],"call":[" class down "," class "," class respond_to? "," class delegate= "," reverting "]}," ActiveRecord Migration up":{"type":"method","name":"up","children":[],"call":[" class up "," class "," class respond_to? "," class delegate= "," reverting "]}," ActiveRecord Base locking_enabled?":{"type":"method","name":"locking_enabled?","children":[],"call":[" respond_to? "," lock_optimistically "," class locking_column "," class "]}," ActiveRecord Locking update_with_lock":{"type":"method","name":"update_with_lock","children":[],"call":[" update_without_lock "," raise ","affected_rows == "," connection update "," class name "," class ","(str \"UPDATE \") + + "," quote "," id "," class primary_key ","(str \"UPDATE \") + "," quoted_comma_pair_list "," attributes_with_quotes "," connection "," class table_name "," lock_version= ","previous_value + "," lock_version "," locking_enabled? "," send ","lock_col + "," class locking_column "," connection update  == "," lock_version  + "," send  + "," class locking_column  + "]}," ActiveRecord Locking append_features":{"type":"method","name":"append_features","children":[],"call":[]}," Test Unit TestCase load_instances?":{"type":"method","name":"load_instances?","children":[],"call":[" use_instantiated_fixtures != "," use_instantiated_fixtures "]}," Test Unit TestCase instantiate_fixtures":{"type":"method","name":"instantiate_fixtures","children":[],"call":["Fixtures  instantiate_fixtures "," load_instances? ","@loaded_fixtures each "," raise ","@loaded_fixtures nil? ","Fixtures  instantiate_all_loaded_fixtures "," class require_fixture_classes ","Fixtures  all_loaded_fixtures keys ","Fixtures  all_loaded_fixtures "," class ","Fixtures  all_loaded_fixtures empty? "," pre_loaded_fixtures "," fixture_path "]}," Test Unit TestCase load_fixtures":{"type":"method","name":"load_fixtures","children":[],"call":["@loaded_fixtures []= ","f table_name ","fixtures each ","fixtures table_name ","fixtures instance_of? ","fixtures nil? ","Fixtures  create_fixtures "," fixture_table_names "," fixture_path "," fixture_class_names "," fixture_table_names each ","f name ","fixtures name ","@loaded_Fixtures  create_fixtures  []= ","Fixtures  create_fixtures  each ","Fixtures  create_fixtures  table_name ","Fixtures  create_fixtures  instance_of? ","Fixtures  create_fixtures  nil? ","Fixtures  create_Fixtures  create_fixtures  ","Fixtures  create_fixtures  name "]}," Test Unit TestCase method_added":{"type":"method","name":"method_added","children":[],"call":[]}," Test Unit TestCase teardown_with_fixtures":{"type":"method","name":"teardown_with_fixtures","children":[],"call":["ActiveRecord Base  unlock_mutex ","ActiveRecord Base  connection rollback_db_transaction ","ActiveRecord Base  connection "," use_transactional_fixtures "," use_transactional_fixtures? ","ActiveRecord Base  clear_connection_cache! ","ActiveRecord Base  verify_active_connections! ","Thread  current []= ","Thread  current ","Thread  current [] != ","Thread  current [] ","ActiveRecord Base  configurations blank? ! ","ActiveRecord Base  configurations blank? ","ActiveRecord Base  configurations ","Fixtures  reset_cache "]}," Test Unit TestCase setup_with_fixtures":{"type":"method","name":"setup_with_fixtures","children":[],"call":[" instantiate_fixtures "," use_instantiated_fixtures "," load_fixtures ","ActiveRecord Base  connection begin_db_transaction ","ActiveRecord Base  connection ","ActiveRecord Base  lock_mutex "," use_transactional_fixtures "," raise "," use_transactional_fixtures ! "," pre_loaded_fixtures ","@@already_loaded_fixtures []= "," class ","@@already_loaded_fixtures [] "," use_transactional_fixtures? ","Hash  new ","ActiveRecord Base  send ","ActiveRecord Base  configurations blank? ! ","ActiveRecord Base  configurations blank? ","ActiveRecord Base  configurations ","Fixtures  reset_cache "]}," Test Unit TestCase require_fixture_classes":{"type":"method","name":"require_fixture_classes","children":[],"call":[" try_to_load_dependency ","file_name singularize ","ActiveRecord Base  pluralize_table_names ","table_name to_s ","(or\n  (lvar :table_names)\n  (send nil :fixture_table_names)) each "," fixture_table_names ","file_name singularize  singularize ","table_name to_s  singularize "]}," Test Unit TestCase fixtures":{"type":"method","name":"fixtures","children":[],"call":[" setup_fixture_accessors "," require_fixture_classes "," fixture_table_names ","n to_s ","table_names flatten map ","table_names flatten ","File  basename split [] join ","File  basename split [] ","File  basename split ","File  basename ","table_names map! ","Dir  [] + ","Dir  [] "," fixture_path ","table_names first == ","table_names first "," fixture_Dir  [] +  ","Dir  [] +  flatten map ","Dir  [] +  flatten ","Dir  [] +  map! ","Dir  [] +  first == ","Dir  [] +  first "]}," Fixtures erb_render":{"type":"method","name":"erb_render","children":[],"call":["ERB  new result ","ERB  new "]}," Fixtures yaml_fixtures_key":{"type":"method","name":"yaml_fixtures_key","children":[],"call":["File  basename split first ","File  basename split ","File  basename "]}," Fixtures csv_file_path":{"type":"method","name":"csv_file_path","children":[],"call":["@fixture_path + "]}," Fixtures deprecated_yaml_file_path":{"type":"method","name":"deprecated_yaml_file_path","children":[],"call":[]}," Fixtures yaml_file_path":{"type":"method","name":"yaml_file_path","children":[],"call":[]}," Fixtures reset_sequences":{"type":"method","name":"reset_sequences","children":[],"call":[]}," Fixtures instantiate_all_loaded_fixtures":{"type":"method","name":"instantiate_all_loaded_fixtures","children":[],"call":[]}," ActiveRecord Base find_all":{"type":"method","name":"find_all","children":[],"call":[" find ","limit is_a? "]}," ActiveRecord Base find_first":{"type":"method","name":"find_first","children":[],"call":[" find "]}," ActiveRecord Base find_on_conditions":{"type":"method","name":"find_on_conditions","children":[],"call":[" find "]}," ActiveRecord Associations ClassMethods deprecated_has_association_method":{"type":"method","name":"deprecated_has_association_method","children":[],"call":[" module_eval "]}," ActiveRecord Associations ClassMethods deprecated_association_comparison_method":{"type":"method","name":"deprecated_association_comparison_method","children":[],"call":[" module_eval "]}," ActiveRecord Associations ClassMethods deprecated_collection_build_method":{"type":"method","name":"deprecated_collection_build_method","children":[],"call":[" module_eval "]}," ActiveRecord Associations ClassMethods deprecated_collection_create_method":{"type":"method","name":"deprecated_collection_create_method","children":[],"call":[" module_eval "]}," ActiveRecord ConnectionAdapters DeprecatedSQLiteAdapter insert":{"type":"method","name":"insert","children":[],"call":["@connection last_insert_rowid "," execute "]}," ActiveRecord ConnectionAdapters SQLiteAdapter adapter_name":{"type":"method","name":"adapter_name","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLiteAdapter tables":{"type":"method","name":"tables","children":[],"call":["Table  new "," execute map "," execute ","row [] "," exec_query map "," exec_query ","sql << "," quote_table_name "]}," ActiveRecord ConnectionAdapters SQLiteAdapter delete":{"type":"method","name":"delete","children":[],"call":["@connection changes "," execute ","sql =~ "]}," ActiveRecord ConnectionAdapters SQLiteAdapter update":{"type":"method","name":"update","children":[],"call":["@connection changes "," execute "]}," ActiveRecord ConnectionAdapters SQLiteAdapter native_database_types":{"type":"method","name":"native_database_types","children":[],"call":[" default_primary_key_type "]}," ActiveRecord ConnectionAdapters SQLiteColumn binary_to_string":{"type":"method","name":"binary_to_string","children":[],"call":["value gsub ","value dup force_encoding ","value dup ","value respond_to? ","value force_encoding ","value encoding != ","value encoding ","value dup force_encoding  gsub ","value force_encoding  gsub ","value dup force_encoding  dup force_encoding ","value force_encoding  dup force_encoding ","value dup force_encoding  dup ","value force_encoding  dup ","value dup force_encoding  respond_to? ","value force_encoding  respond_to? ","value dup force_encoding  force_encoding ","value force_encoding  force_encoding ","value dup force_encoding  encoding != ","value force_encoding  encoding != ","value dup force_encoding  encoding ","value force_encoding  encoding "]}," ActiveRecord ConnectionAdapters SQLiteColumn string_to_binary":{"type":"method","name":"string_to_binary","children":[],"call":["value gsub ","value dup force_encoding ","value dup ","value respond_to? ","value dup force_encoding  gsub ","value dup force_encoding  dup force_encoding ","value dup force_encoding  dup ","value dup force_encoding  respond_to? "]}," ActiveRecord Base parse_config!":{"type":"method","name":"parse_config!","children":[],"call":["config []= ","File  expand_path ","config [] ","Object  const_defined? "," raise ","config has_key? "]}," ActiveRecord Base sqlite3_connection":{"type":"method","name":"sqlite3_connection","children":[],"call":["ConnectionAdapters SQLiteAdapter  new "," logger ","SQLite3 Database  new ","config [] "," require_library_or_gem "," class const_defined? "," class "," parse_config! "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter unescape_bytea":{"type":"method","name":"unescape_bytea","children":[],"call":["(send\n  (lvar :s) :gsub\n  (regexp\n    (str \"\\\\\\\\([0-9][0-9][0-9])\")\n    (regopt))) gsub ","1 oct chr ","1 oct ","s gsub ","s nil? "," unescape_bytea ","result << ","s [] oct ","s [] ","i + ","s [] == ","char == ","i < ","s size "," class send "," class ","PGconn  unescape_bytea ","PGconn  respond_to? ","value [] oct ","value [] ","value [] == ","value size ","value =~ "," define_method "," class instance_eval "," raise ","@connection unescape_bytea ","@connection respond_to? ","s [] oct  == ","s []  == ","value [] oct  == ","value []  == "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter escape_bytea":{"type":"method","name":"escape_bytea","children":[],"call":[" sprintf ","c [] to_i ","c [] ","(send\n  (lvar :s) :gsub\n  (regexp\n    (str \"\\\\\\\\\")\n    (regopt))) gsub ","s gsub ","s nil? "," escape_bytea ","result << ","s each_byte "," class send "," class ","PGconn  escape_bytea ","PGconn  respond_to? ","value each_byte "," define_method "," class instance_eval ","@connection escape_bytea ","@connection respond_to? "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter quote_bytea":{"type":"method","name":"quote_bytea","children":[],"call":[" escape_bytea "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter adapter_name":{"type":"method","name":"adapter_name","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter quote":{"type":"method","name":"quote","children":[],"call":[" quote_bytea ","column type == ","column type ","value class == ","value class "," escape_bytea ","value kind_of? ","column sql_type =~ ","column sql_type ","value to_s "," quote_string ","column class string_to_binary ","column class "," quoted_string_prefix ","column sql_type == ","value to_s downcase ","value infinite? ","Float  === "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter update":{"type":"method","name":"update","children":[],"call":["result cmdtuples ","connection exec "," log "," execute cmdtuples "," execute ","connection exec  cmdtuples "]}," ActiveRecord ConnectionAdapters MysqlAdapter create_table":{"type":"method","name":"create_table","children":[],"call":["(pair\n  (sym :options)\n  (str \"ENGINE=InnoDB\")) merge ","options reverse_merge "]}," ActiveRecord ConnectionAdapters MysqlAdapter add_limit_with_offset!":{"type":"method","name":"add_limit_with_offset!","children":[],"call":["sql << "]}," ActiveRecord ConnectionAdapters MysqlAdapter quote_string":{"type":"method","name":"quote_string","children":[],"call":["Mysql  quote ","@mysql quote ","@connection quote "]}," ActiveRecord ConnectionAdapters MysqlAdapter update":{"type":"method","name":"update","children":[],"call":["@connection affected_rows "," execute "]}," ActiveRecord ConnectionAdapters MysqlAdapter adapter_name":{"type":"method","name":"adapter_name","children":[],"call":[]}," ActiveRecord ConnectionAdapters MysqlAdapter initialize":{"type":"method","name":"initialize","children":[],"call":["Mysql  const_defined? "," connect ","StatementPool  new ","config fetch "," class type_cast_config_to_integer "," class "]}," ActiveRecord ConnectionAdapters MysqlAdapter native_database_types":{"type":"method","name":"native_database_types","children":[],"call":["int(11) DEFAULT NULL auto_increment PRIMARY KEY freeze "]}," ActiveRecord ConnectionAdapters DB2Adapter select":{"type":"method","name":"select","children":[],"call":["stmt free ","rows << ","stmt fetch_as_hash ","stmt exec_direct ","sql + ","DB2 Statement  new "," log ","sql gsub ","row delete "," with_statement ","DB2 Statement  new  free ","stmt fetch_as_hash s << ","DB2 Statement  new  fetch_as_hash ","DB2 Statement  new  exec_direct ","stmt fetch_as_hash  delete "]}," ActiveRecord ConnectionAdapters DB2Adapter last_insert_id":{"type":"method","name":"last_insert_id","children":[],"call":["row [] to_i ","row [] "," select_one ","          with temp(id) as (values (identity_val_local())) select * from temp\n strip ","            with temp(id) as (values (identity_val_local())) select * from temp\n strip "," select_one  [] to_i "," select_one  [] "]}," ActiveRecord ConnectionAdapters DB2Adapter columns":{"type":"method","name":"columns","children":[],"call":["stmt free ","result << ","Column  new ","c [] ","c [] != ","c [] nil? ! ","c [] nil? ","c [] downcase ","c [] == ","stmt columns each ","stmt columns ","table_name upcase ","DB2 Statement  new ","c_default gsub! ","c_default nil? ! ","c_default nil? "," with_statement ","@connection_options [] ","DB2 Statement  new  free ","DB2 Statement  new  columns each ","DB2 Statement  new  columns ","c []  gsub! ","c []  nil? ! ","c []  nil? "]}," ActiveRecord ConnectionAdapters DB2Adapter add_limit_without_offset!":{"type":"method","name":"add_limit_without_offset!","children":[],"call":["sql << "]}," ActiveRecord ConnectionAdapters DB2Adapter add_limit_with_offset!":{"type":"method","name":"add_limit_with_offset!","children":[],"call":[" raise "]}," ActiveRecord ConnectionAdapters DB2Adapter quote_string":{"type":"method","name":"quote_string","children":[],"call":["s gsub ","string gsub "]}," ActiveRecord ConnectionAdapters DB2Adapter adapter_name":{"type":"method","name":"adapter_name","children":[],"call":[]}," ActiveRecord ConnectionAdapters DB2Adapter quote_column_name":{"type":"method","name":"quote_column_name","children":[],"call":[]}," ActiveRecord ConnectionAdapters DB2Adapter rollback_db_transaction":{"type":"method","name":"rollback_db_transaction","children":[],"call":["@connection set_auto_commit_on ","@connection rollback "]}," ActiveRecord ConnectionAdapters DB2Adapter commit_db_transaction":{"type":"method","name":"commit_db_transaction","children":[],"call":["@connection set_auto_commit_on ","@connection commit "]}," ActiveRecord ConnectionAdapters DB2Adapter begin_db_transaction":{"type":"method","name":"begin_db_transaction","children":[],"call":["@connection set_auto_commit_off "]}," ActiveRecord ConnectionAdapters DB2Adapter execute":{"type":"method","name":"execute","children":[],"call":["stmt free ","stmt row_count ","stmt exec_direct ","DB2 Statement  new "," log "," with_statement ","DB2 Statement  new  free ","DB2 Statement  new  row_count ","DB2 Statement  new  exec_direct "]}," ActiveRecord ConnectionAdapters DB2Adapter insert":{"type":"method","name":"insert","children":[],"call":[" last_insert_id "," execute "]}," ActiveRecord ConnectionAdapters DB2Adapter select_one":{"type":"method","name":"select_one","children":[],"call":[" select first "," select "]}," ActiveRecord ConnectionAdapters DB2Adapter select_all":{"type":"method","name":"select_all","children":[],"call":[" select "]}," ActiveRecord Base db2_connection":{"type":"method","name":"db2_connection","children":[],"call":[]}," ActiveRecord ConnectionAdapters TableDefinition column":{"type":"method","name":"column","children":[],"call":["@columns << ","column_sql << ","options [] "," type_to_sql ","type to_sym "," native [] [] "," native [] "," native ","@columns include? ","column null= ","column default= ","column limit= ","ColumnDefinition  new "," [] ","column scale= ","column precision= "," native [] is_a? ","options fetch "," new_column_definition ","name to_s ","@columns_hash []= "," raise "," primary_key_column_name == "," primary_key_column_name "," index ","index_options is_a? ","options delete ","@columns_hash [] primary_key? ","@columns_hash [] ","options dup ","index is_a? ","options []= ","options key? ! ","options key? ","type == ","@conn supports_datetime_with_precision? "," raise_on_duplicate_column ","options dup  [] "," type to_sym _to_sql ","type to_sym  to_sym ","options dup  fetch ","name to_s  to_s "," primary_key_column_name to_s  == "," primary_key_column_name to_s  ","options delete  is_a? ","index_options dup  is_a? ","options dup  delete ","options dup  dup ","options dup  []= ","options dup  key? ! ","options dup  key? ","type to_sym  == "]}," ActiveRecord ConnectionAdapters TableDefinition initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter remove_column":{"type":"method","name":"remove_column","children":[],"call":[" execute "]}," ActiveRecord ConnectionAdapters AbstractAdapter add_column":{"type":"method","name":"add_column","children":[],"call":[" execute ","add_column_sql << ","options [] ","native_type [] "," native_database_types [] "," native_database_types "," add_column_options! "," type_to_sql "," limit "," native_database_types []  [] "]}," ActiveRecord ConnectionAdapters AbstractAdapter drop_table":{"type":"method","name":"drop_table","children":[],"call":[" execute "]}," ActiveRecord ConnectionAdapters AbstractAdapter create_table":{"type":"method","name":"create_table","children":[],"call":[" add_column ","table_definition columns each ","table_definition columns ","TableDefinition  new "," execute "," native_database_types [] "," native_database_types ","create_sql << ","options [] ","table_definition to_sql ","table_definition primary_key ","options [] == ","TableDefinition  new  columns each ","TableDefinition  new  columns ","TableDefinition  new  to_sql ","TableDefinition  new  primary_key "]}," ActiveRecord ConnectionAdapters AbstractAdapter initialize_schema_information":{"type":"method","name":"initialize_schema_information","children":[],"call":[" insert "," execute "," native_database_types [] [] "," native_database_types [] "," native_database_types "," type_to_sql "]}," ActiveRecord ConnectionAdapters AbstractAdapter add_limit_without_offset!":{"type":"method","name":"add_limit_without_offset!","children":[],"call":["sql << "]}," ActiveRecord ConnectionAdapters AbstractAdapter add_limit_with_offset!":{"type":"method","name":"add_limit_with_offset!","children":[],"call":["sql << "]}," ActiveRecord ConnectionAdapters AbstractAdapter add_limit!":{"type":"method","name":"add_limit!","children":[],"call":[" add_limit_without_offset! "," add_limit_with_offset! ","offset to_i ","limit to_i ","limit is_a? "," add_limit_offset! ","sql << "]}," ActiveRecord ConnectionAdapters AbstractAdapter adapter_name":{"type":"method","name":"adapter_name","children":[],"call":[" class "]}," ActiveRecord ConnectionAdapters Column string_to_dummy_time":{"type":"method","name":"string_to_dummy_time","children":[],"call":["Time  send ","Base  default_timezone ","time_array []= ","ParseDate  parsedate ","string to_s ","string is_a? ","Time  local ","Time  === "," string_to_time ","string empty? "," new_time ","time_hash values_at ","time_hash [] nil? ","time_hash [] ","Date  _parse "," fast_string_to_time ","string blank? ","ParseDate  parsedate  []= ","Date  _parse  values_at ","Date  _parse  [] nil? ","Date  _parse  [] "]}," ActiveRecord ConnectionAdapters Column binary_to_string":{"type":"method","name":"binary_to_string","children":[],"call":[]}," ActiveRecord ConnectionAdapters Column string_to_binary":{"type":"method","name":"string_to_binary","children":[],"call":[" class string_to_binary "," class "]}," ActiveRecord Callbacks invoke_and_notify":{"type":"method","name":"invoke_and_notify","children":[],"call":[" notify "," send "," respond_to_without_attributes? "]}," ActiveRecord Callbacks callbacks_for":{"type":"method","name":"callbacks_for","children":[],"call":[" class read_inheritable_attribute ","method to_sym "," class "]}," ActiveRecord Associations ClassMethods extract_record":{"type":"method","name":"extract_record","children":[],"call":["record []= ","prefix == ","schema_abbreviations [] ","row each "]}," ActiveRecord Associations ClassMethods association_join":{"type":"method","name":"association_join","children":[],"call":["(str \" LEFT OUTER JOIN \") + + ","reflection klass table_name classify foreign_key ","reflection klass table_name classify ","reflection klass table_name ","reflection klass ","reflection options [] ","reflection options "," table_name ","(str \" LEFT OUTER JOIN \") + ","reflection klass primary_key "," primary_key "," table_name classify foreign_key "," table_name classify ","(str \" LEFT OUTER JOIN \") + + + + + ","(str \" LEFT OUTER JOIN \") + + + + ","(str \" LEFT OUTER JOIN \") + + + ","reflection macro "]}," ActiveRecord Associations ClassMethods column_aliases":{"type":"method","name":"column_aliases","children":[],"call":["(send\n  (lvar :schema_abbreviations) :collect) join ","tc join ","schema_abbreviations collect "," connection quote_column_name ","tc [] "," connection ","(send\n  (send\n    (lvar :join_dependency) :joins) :collect) flatten join ","(send\n  (send\n    (lvar :join_dependency) :joins) :collect) flatten ","join aliased_table_name ","join column_names_with_alias collect ","join column_names_with_alias ","join_dependency joins collect ","join_dependency joins "," connection quote_table_name "]}," ActiveRecord Associations ClassMethods construct_finder_sql_with_included_associations":{"type":"method","name":"construct_finder_sql_with_included_associations","children":[],"call":[" sanitize_sql ","sql << ","options [] "," add_conditions! ","(send\n  (lvar :reflections) :collect) to_s "," association_join ","reflections collect "," table_name "," column_aliases "," add_sti_conditions! "," add_limit! "," using_limitable_reflections? "," add_limited_ids_condition! "," using_limitable_reflections? ! ","join_dependency reflections "," add_joins! ","(send\n  (send\n    (lvar :join_dependency) :join_associations) :collect) join ","join association_join ","join_dependency join_associations collect ","join_dependency join_associations ","scope [] "," scope "," add_lock! "," add_order! "," add_group! "," quoted_table_name "," scope  [] ","  scope  "]}," ActiveRecord Associations ClassMethods select_all_rows":{"type":"method","name":"select_all_rows","children":[],"call":[" connection select_all "," name "," construct_finder_sql_with_included_associations "," connection "]}," ActiveRecord Associations ClassMethods generate_primary_key_table":{"type":"method","name":"generate_primary_key_table","children":[],"call":["primary_key_lookup_table []= ","(send\n  (lvar :schema_abbreviations) :find) first ","tc == ","reflection klass primary_key ","reflection klass ","reflection klass table_name ","schema_abbreviations find ","reflections collect "," primary_key "," table_name "]}," ActiveRecord Associations ClassMethods generate_schema_abbreviations":{"type":"method","name":"generate_schema_abbreviations","children":[],"call":["schema_abbreviations []= ","columns each_with_index ","schema each_with_index ","r klass column_names ","r klass ","r table_name ","reflections collect "," column_names "," table_name "]}," ActiveRecord Associations ClassMethods reflect_on_included_associations":{"type":"method","name":"reflect_on_included_associations","children":[],"call":[" reflect_on_association ","(lvar :associations) flatten collect ","(lvar :associations) flatten ","association to_s intern ","association to_s "]}," ActiveRecord Associations ClassMethods find_with_associations":{"type":"method","name":"find_with_associations","children":[],"call":["records values ","records [] send ","reflection klass send "," extract_record ","reflection table_name ","reflection klass ","reflection name ","records [] ","records [] instance_variable_get target push ","records [] instance_variable_get target ","records [] instance_variable_get ","reflection macro ","row [] ","primary_key_table [] ","reflections each "," instantiate "," table_name "," select_all_rows "," generate_primary_key_table "," generate_schema_abbreviations "," reflect_on_included_associations ","options [] ","record send ","collection target push ","collection target ","collection target include? ","collection loaded ","records_in_order << ","records []= "," guard_against_unlimitable_reflections "," guard_against_missing_reflections ","join_dependency instantiate ","JoinDependency  new "," merge_includes "," scope "," catch ","records [] s values ","records [] s [] send "," extract_records []  ","records [] s [] ","records [] s [] instance_variable_get target push ","records [] s [] instance_variable_get target ","records [] s [] instance_variable_get ","primary_key_table [] _table [] "," generate_primary_key_table  [] "," reflect_on_included_associations  each "," select_all_ select_all_rows  "," generate_primary_key_table [] _table "," generate_ generate_primary_key_table  "," generate_ generate_schema_abbreviations  "," reflect_on_included_reflection klass send s ","records []  send ","record send  target push ","record send  target ","record send  target include? ","record send  loaded ","records [] s_in_order << ","records [] s []= "," guard_against_unlimitable_ reflect_on_included_associations  "," guard_against_missing_ reflect_on_included_associations  ","JoinDependency  new  instantiate "]}," ActiveRecord Associations ClassMethods association_constructor_method":{"type":"method","name":"association_constructor_method","children":[],"call":["association send "," instance_variable_set ","association_proxy_class new ","association nil? "," instance_variable_get ","params first ","params empty? "," define_method ","association_proxy_class == ","params [] ","params [] nil? ","reflection name "," instance_variable_defined? "," association_instance_set "," association_instance_get "," redefine_method ","association_proxy_class new  send "," instance_variable_get  send "," association_instance_get  send ","association_proxy_class new _proxy_class new "," instance_variable_get _proxy_class new "," association_instance_get _proxy_class new ","association_proxy_class new  nil? "," instance_variable_get  nil? "," association_instance_get  nil? ","association_proxy_class new _proxy_class == "," instance_variable_get _proxy_class == "," association_instance_get _proxy_class == "," association_proxy_class new _instance_set ","  instance_variable_get _instance_set ","  association_instance_get _instance_set "," association_proxy_class new _instance_get ","  instance_variable_get _instance_get ","  association_instance_get _instance_get "]}," ActiveRecord Associations ClassMethods add_multiple_associated_save_callbacks":{"type":"method","name":"add_multiple_associated_save_callbacks","children":[],"call":[" after_save "," module_eval "," before_save "," after_update "," after_create "," validate "," errors add "," errors ","record valid? ","(send nil :new_record?) each ","record new_record? ","association select "," new_record? ","association respond_to? "," instance_variable_get "," define_method ","(str \"validate_associated_records_for_\") to_sym ","association target select ","association target ","association loaded? "," instance_variable_defined? ","association send ","records_to_save each ","records_to_save blank? ","association loaded? ! ","(str \"after_create_or_update_associated_records_for_\") to_sym ","(str \"before_save_associated_records_for_\") to_sym "," instance_variable_get  select "," instance_variable_get  respond_to? "," instance_variable_get  target select "," instance_variable_get  target "," instance_variable_get  loaded? "," instance_variable_get  send "," instance_variable_get  loaded? ! "]}," ActiveRecord Associations ClassMethods require_association_class":{"type":"method","name":"require_association_class","children":[],"call":[" require_association ","Inflector  underscore "]}," ActiveRecord Associations ClassMethods collection_accessor_methods":{"type":"method","name":"collection_accessor_methods","children":[],"call":["association replace "," instance_variable_set ","association_proxy_class new ","association respond_to? "," instance_variable_get "," define_method ","association reload ","params first ","params empty? "," send ","association_class_name constantize find ","association_class_name constantize ","Inflector  singularize ","reflection class_name constantize find ","reflection class_name constantize ","reflection class_name ","reflection name ","reflection name to_s singularize ","reflection name to_s "," collection_reader_method ","nid blank? ","(or\n  (lvar :new_value)\n  (array)) reject "," send map ","reflection klass find index_by values_at ","reflection klass find index_by ","reflection klass find ","reflection klass ","(send\n  (begin\n    (or\n      (lvar :new_value)\n      (array))) :reject) map ","(send\n  (send\n    (send\n      (lvar :reflection) :klass) :find\n    (lvar :ids)) :index_by) values_at ","r id ","pk_column type_cast ","ids map! ","reflection primary_key_column "," redefine_method ","association_proxy_class new  replace "," instance_variable_get  replace "," send  replace ","association_proxy_class new _proxy_class new "," instance_variable_get _proxy_class new "," send _proxy_class new ","association_proxy_class new  respond_to? "," instance_variable_get  respond_to? "," send  respond_to? ","association_proxy_class new  reload "," instance_variable_get  reload "," send  reload ","association_proxy_class new _class_name constantize find "," instance_variable_get _class_name constantize find "," send _class_name constantize find ","association_proxy_class new _class_name constantize "," instance_variable_get _class_name constantize "," send _class_name constantize ","(send\n  (send\n    (send\n      (lvar :reflection) :klass) :find\n    (lvar :(send\n  (begin\n    (or\n      (lvar :new_value)\n      (array))) :reject) map )) :index_by) values_at ","reflection primary_key_column  type_cast ","(send\n  (begin\n    (or\n      (lvar :new_value)\n      (array))) :reject) map  map! "]}," ActiveRecord Associations ClassMethods association_accessor_methods":{"type":"method","name":"association_accessor_methods","children":[],"call":[" instance_variable_set ","association target= ","association_proxy_class new ","target nil? "," define_method ","new_value nil? ","association replace ","association nil? "," instance_variable_get ","retval nil? ","association reload ","params first ","params empty? ","reflection name ","association_proxy_class == ","association target nil? ","association target ","association target != ","association respond_to? "," instance_variable_defined? "," send ","association create_through_record ","association loaded? "," association_instance_set "," new_record? "," association_instance_get ","reflection klass uncached ","reflection klass "," redefine_method ","association load ","association _load ","association_proxy_class new  target= "," instance_variable_get  target= "," association_instance_get  target= ","association_proxy_class new _proxy_class new "," instance_variable_get _proxy_class new "," association_instance_get _proxy_class new ","association_proxy_class new  replace "," instance_variable_get  replace "," association_instance_get  replace ","association_proxy_class new  nil? "," instance_variable_get  nil? "," association_instance_get  nil? ","association reload  nil? ","association load  nil? ","association _load  nil? ","association_proxy_class new  reload "," instance_variable_get  reload "," association_instance_get  reload ","association_proxy_class new _proxy_class == "," instance_variable_get _proxy_class == "," association_instance_get _proxy_class == ","association_proxy_class new  target nil? "," instance_variable_get  target nil? "," association_instance_get  target nil? ","association_proxy_class new  target "," instance_variable_get  target "," association_instance_get  target ","association_proxy_class new  target != "," instance_variable_get  target != "," association_instance_get  target != ","association_proxy_class new  respond_to? "," instance_variable_get  respond_to? "," association_instance_get  respond_to? ","association_proxy_class new  create_through_record "," instance_variable_get  create_through_record "," association_instance_get  create_through_record ","association_proxy_class new  loaded? "," instance_variable_get  loaded? "," association_instance_get  loaded? "," association_proxy_class new _instance_set ","  instance_variable_get _instance_set ","  association_instance_get _instance_set "," association_proxy_class new _instance_get ","  instance_variable_get _instance_get ","  association_instance_get _instance_get ","association_proxy_class new  load "," instance_variable_get  load "," association_instance_get  load ","association_proxy_class new  _load "," instance_variable_get  _load "," association_instance_get  _load "]}," ActiveRecord Associations clear_association_cache":{"type":"method","name":"clear_association_cache","children":[],"call":[" instance_variable_set ","assoc name "," class reflect_on_all_associations to_a each "," class reflect_on_all_associations to_a "," class reflect_on_all_associations "," class "," new_record? "," persisted? ","@association_cache clear "]}," ActiveRecord Associations HasOneAssociation construct_sql":{"type":"method","name":"construct_sql","children":[],"call":[" AND  + ","@options [] ","@owner quoted_id ","@association_class table_name ","@finder_sql << "," sanitize_sql "," conditions ","@reflection primary_key_name ","@reflection table_name ","(begin\n  (send\n    (send\n      (ivar :@reflection) :klass) :table_name)) + ","@owner class quote ","@owner class base_class name to_s ","@owner class base_class name ","@owner class base_class ","@owner class ","@reflection options [] ","@reflection options ","@reflection klass table_name ","@reflection klass ","@owner class quote_value ","@reflection quoted_table_name ","(begin\n  (send\n    (ivar :@reflection) :quoted_table_name)) + "," owner_quoted_id ","(begin\n  (send\n    (send\n      (ivar :@reflection) :klass) :table_name)) +  << ","(begin\n  (send\n    (ivar :@reflection) :quoted_table_name)) +  << "]}," ActiveRecord Associations HasOneAssociation target_obsolete?":{"type":"method","name":"target_obsolete?","children":[],"call":[]}," ActiveRecord Associations HasOneAssociation find_target":{"type":"method","name":"find_target","children":[],"call":["@association_class find ","@options [] ","@reflection klass find ","@reflection options [] ","@reflection options ","@reflection klass ","@association_class find_first "," set_inverse_instance ","options []= ","options delete ","(send\n  (send\n    (lvar :options) :keys) :-\n  (array\n    (sym :select)\n    (sym :order)\n    (sym :include)\n    (sym :readonly))) each ","options keys - ","options keys ","@reflection options dup ","@@reflection options dup  [] ","@reflection @reflection options dup  [] ","@reflection @reflection options dup  ","@reflection options dup  []= ","@reflection options dup  delete ","(send\n  (send\n    (lvar :@reflection options dup ) :keys) :-\n  (array\n    (sym :select)\n    (sym :order)\n    (sym :include)\n    (sym :readonly))) each ","@reflection options dup  keys - ","@reflection options dup  keys ","@reflection @reflection options dup  dup "]}," ActiveRecord Associations HasOneAssociation replace":{"type":"method","name":"replace","children":[],"call":["obj save ","obj nil? ","@owner new_record? ","obj []= ","@owner id "," raise_on_type_mismatch ","@target save ","@target []= ","@owner clear_association_cache ","@target destroy ","@target new_record? ","dont_save ! "," dependent? ","@target nil? "," load_target ","obj target ","AssociationProxy  === ","@target != "," set_belongs_to_association_for ","@reflection primary_key_name ","@target == "," set_inverse_instance ","@target delete ","@reflection options [] ","@reflection options ","@owner persisted? ! ","@owner persisted? ","@target persisted? "," target= "," raise "," reflection name "," reflection "," set_owner_attributes "," target "," nullify_owner_attributes ","record save ! ","record save "," owner persisted? "," owner "," remove_target! "," options [] "," options "," target destroyed? "," target != "," reflection klass transaction "," reflection klass "," target destroyed? ! "," transaction_if ","record changed? ","(or\n  (send nil :target)\n  (lvar :record)) ! "," raise_on_type_mismatch! ","record has_changes_to_save? ","RecordNotSaved  new "]}," ActiveRecord Associations HasOneAssociation initialize":{"type":"method","name":"initialize","children":[],"call":[" construct_sql "]}," ActiveRecord Associations HasManyAssociation construct_sql":{"type":"method","name":"construct_sql","children":[],"call":["@counter_sql << "," interpolate_sql ","@owner quoted_id ","@association_class table_name ","@options [] ","@options []= ","@options [] gsub ","@finder_sql << ","@reflection options [] ","@reflection options ","@reflection options []= ","@reflection options [] sub "," conditions ","@reflection primary_key_name ","@reflection klass table_name ","@reflection klass ","(begin\n  (send\n    (send\n      (ivar :@reflection) :klass) :table_name)) + ","@owner class quote ","@owner class base_class name to_s ","@owner class base_class name ","@owner class base_class ","@owner class ","@owner class quote_value ","@reflection quoted_table_name ","(begin\n  (send\n    (ivar :@reflection) :quoted_table_name)) + "," owner_quoted_id "," construct_counter_sql "," interpolate_and_sanitize_sql "," interpolate_sql  << ","(begin\n  (send\n    (send\n      (ivar :@reflection) :klass) :table_name)) +  << ","(begin\n  (send\n    (ivar :@reflection) :quoted_table_name)) +  << "," interpolate_and_sanitize_sql  << "]}," ActiveRecord Associations HasManyAssociation target_obsolete?":{"type":"method","name":"target_obsolete?","children":[],"call":[]}," ActiveRecord Associations HasManyAssociation find_target":{"type":"method","name":"find_target","children":[],"call":[" find_all ","@association_class find ","@options [] ","@association_class find_by_sql "," find ","@reflection klass find_by_sql ","@reflection klass ","@reflection options [] ","@reflection options "]}," ActiveRecord Associations HasManyAssociation count":{"type":"method","name":"count","children":[],"call":["@association_class count "," sanitize_sql ","@association_class count_by_sql ","@options [] ","@reflection klass count ","@reflection klass ","@reflection klass count_by_sql ","@reflection options [] ","@reflection options ","options []= ","@finder_sql + ","options [] ","options [] nil? ","@reflection klass send ","sql << ","options [] blank? ","(send\n  (array\n    (send\n      (lvar :value) :-\n      (send\n        (lvar :offset) :to_i))\n    (int 0)) :max) min ","limit to_i ","(send\n  (lvar :value) :-\n  (send\n    (lvar :offset) :to_i)) max ","value - ","offset to_i ","(send\n  (array\n    (send\n      (lvar :value) :-\n      (send\n        (lvar :@reflection options [] ) :to_i))\n    (int 0)) :max) min ","(send\n  (array\n    (send\n      (lvar :@reflection klass count ) :-\n      (send\n        (lvar :offset) :to_i))\n    (int 0)) :max) min ","@reflection options []  to_i ","(send\n  (lvar :value) :-\n  (send\n    (lvar :@reflection options [] ) :to_i)) max ","(send\n  (lvar :@reflection klass count ) :-\n  (send\n    (lvar :offset) :to_i)) max ","@reflection klass count  - "]}," ActiveRecord Associations HasManyAssociation find_first":{"type":"method","name":"find_first","children":[],"call":[" find_all first "," find_all "]}," ActiveRecord Associations HasAndBelongsToManyAssociation construct_sql":{"type":"method","name":"construct_sql","children":[],"call":["@finder_sql << "," interpolate_sql ","@options [] ","(str \"SELECT t.*, j.* FROM \") + + ","@owner quoted_id ","(str \"SELECT t.*, j.* FROM \") + ","@association_class primary_key "," interpolate_sql_options! ","condition << ","subclass name demodulize ","subclass name ","@association_class inheritance_column ","@association_class send inject ","@association_class name demodulize ","@association_class name ","@association_class send ","@association_class descends_from_active_record? ","@association_class table_name ","@reflection association_foreign_key ","@reflection options [] ","@reflection options ","@reflection klass primary_key ","@reflection klass ","@reflection klass table_name "," conditions ","@reflection primary_key_name ","(str \"SELECT t.*, j.* FROM \") + + + + + ","(str \"SELECT t.*, j.* FROM \") + + + + ","(str \"SELECT t.*, j.* FROM \") + + + "," AND  + ","@owner connection quote_table_name ","@owner connection ","@reflection quoted_table_name ","@reflection options []= ","@reflection options [] sub "," owner_quoted_id "," construct_counter_sql "," interpolate_and_sanitize_sql ","(str \"SELECT t.*, j.* FROM \") + +  << ","@options []  << ","@reflection options []  << "," interpolate_sql  << "," interpolate_and_sanitize_sql  << "]}," ActiveRecord Associations HasAndBelongsToManyAssociation find_target":{"type":"method","name":"find_target","children":[],"call":[" uniq ","@options [] ","@association_class find_by_sql "," find ","@reflection options [] ","@reflection options ","@reflection klass find_by_sql ","@reflection klass "]}," ActiveRecord Associations HasAndBelongsToManyAssociation find_first":{"type":"method","name":"find_first","children":[],"call":[" load_target first "," load_target "," load_collection first "," load_collection "]}," ActiveRecord Associations HasAndBelongsToManyAssociation build":{"type":"method","name":"build","children":[],"call":["@target << ","@association_class new "," load_target ","@reflection klass new ","@reflection klass "," build_record "," build_@association_class new  "," build_@reflection klass new  "]}," ActiveRecord Associations BelongsToAssociation construct_sql":{"type":"method","name":"construct_sql","children":[],"call":["@owner id ","@association_class primary_key ","@association_class table_name "]}," ActiveRecord Associations BelongsToAssociation target_obsolete?":{"type":"method","name":"target_obsolete?","children":[],"call":["@owner [] != ","@target id ","@owner [] "]}," ActiveRecord Associations BelongsToAssociation foreign_key_present":{"type":"method","name":"foreign_key_present","children":[],"call":["@owner [] nil? ! ","@owner [] nil? ","@owner [] ","@reflection primary_key_name "]}," ActiveRecord Associations BelongsToAssociation find_target":{"type":"method","name":"find_target","children":[],"call":["@association_class find ","@owner [] ","@association_class find_on_conditions "," interpolate_sql ","@options [] ","@reflection klass find ","@reflection options [] ","@reflection options "," conditions ","@reflection primary_key_name ","@reflection klass "," set_inverse_instance ","@reflection klass send ","options []= ","options delete ","(send\n  (send\n    (lvar :options) :keys) :-\n  (array\n    (sym :select)\n    (sym :include)\n    (sym :readonly))) each ","options keys - ","options keys ","@reflection options dup ","@@reflection options dup  [] ","@reflection @reflection options dup  [] ","@reflection @reflection options dup  ","@reflection options dup  []= ","@reflection options dup  delete ","(send\n  (send\n    (lvar :@reflection options dup ) :keys) :-\n  (array\n    (sym :select)\n    (sym :include)\n    (sym :readonly))) each ","@reflection options dup  keys - ","@reflection options dup  keys ","@reflection @reflection options dup  dup "]}," ActiveRecord Associations BelongsToAssociation replace":{"type":"method","name":"replace","children":[],"call":["@target nil? ","@owner []= ","obj id ","obj new_record? "," raise_on_type_mismatch ","obj nil? ","obj target ","AssociationProxy  === "," loaded ","record id ","@reflection primary_key_name ","record new_record? ","record target ","@reflection klass decrement_counter ","@owner [] ","@reflection klass ","@reflection klass increment_counter ","@owner new_record? ! ","@owner new_record? ","record nil? ","@reflection counter_cache_column "," set_inverse_instance "," record_id "," previous_record_id ","record id != ","record persisted? ","@owner persisted? "," target= "," replace_keys "," update_counters "," raise_on_type_mismatch! "," remove_keys "," decrement_counters "," update_counters_on_replace "," remove_inverse_instance "," target ","@owner []=  nil? "]}," ActiveRecord Associations BelongsToAssociation build":{"type":"method","name":"build","children":[],"call":[" replace ","@association_class new ","@reflection klass new ","@reflection klass ","@reflection build_association "]}," ActiveRecord Associations BelongsToAssociation create":{"type":"method","name":"create","children":[],"call":["record save "," build "," replace ","@association_class create ","@reflection klass create ","@reflection klass ","@reflection create_association "," build  save ","@association_class create  save "]}," ActiveRecord Associations BelongsToAssociation reset":{"type":"method","name":"reset","children":[],"call":[]}," ActiveRecord Associations AssociationProxy raise_on_type_mismatch":{"type":"method","name":"raise_on_type_mismatch","children":[],"call":[" raise ","record class ","record is_a? ","@reflection class_name ","@reflection klass ","record class object_id ","@reflection klass object_id ","@reflection class_name constantize "]}," ActiveRecord Associations AssociationProxy foreign_key_present":{"type":"method","name":"foreign_key_present","children":[],"call":[]}," ActiveRecord Associations AssociationProxy load_target":{"type":"method","name":"load_target","children":[],"call":[" reset "," find_target "," loaded? ! "," loaded? "," foreign_key_present ","@owner new_record? ! ","@owner new_record? "," target "," loaded ","@owner persisted? "]}," ActiveRecord Associations AssociationProxy extract_options_from_args!":{"type":"method","name":"extract_options_from_args!","children":[],"call":["@owner send "]}," ActiveRecord Associations AssociationProxy sanitize_sql":{"type":"method","name":"sanitize_sql","children":[],"call":["@association_class send ","@reflection klass send ","@reflection klass "]}," ActiveRecord Associations AssociationProxy interpolate_sql":{"type":"method","name":"interpolate_sql","children":[],"call":["@owner send "]}," ActiveRecord Associations AssociationProxy interpolate_sql_options!":{"type":"method","name":"interpolate_sql_options!","children":[],"call":[" interpolate_sql ","options [] ","keys each "]}," ActiveRecord Associations AssociationProxy quoted_record_ids":{"type":"method","name":"quoted_record_ids","children":[],"call":["(send\n  (lvar :records) :map) join ","record quoted_id ","records map "]}," ActiveRecord Associations AssociationProxy dependent?":{"type":"method","name":"dependent?","children":[],"call":["@options [] ","@reflection options [] ","@reflection options "]}," ActiveRecord Associations AssociationProxy target=":{"type":"method","name":"target=","children":[],"call":[" loaded "]}," ActiveRecord Associations AssociationProxy target":{"type":"method","name":"target","children":[],"call":[]}," ActiveRecord Associations AssociationProxy loaded?":{"type":"method","name":"loaded?","children":[],"call":[]}," ActiveRecord Associations AssociationProxy respond_to?":{"type":"method","name":"respond_to?","children":[],"call":["@target respond_to? "," load_target "," proxy_respond_to? "]}," ActiveRecord Associations AssociationProxy method_missing":{"type":"method","name":"method_missing","children":[],"call":["@target send "," load_target "," block_given? "," raise ","@target respond_to? ","@target class to_s ","@target class ","method to_s "]}," ActiveRecord Associations AssociationProxy reload":{"type":"method","name":"reload","children":[],"call":[" load_target "," reset ","@target nil? "," load "," _load "]}," ActiveRecord Associations AssociationProxy initialize":{"type":"method","name":"initialize","children":[],"call":[" reset "," eval "," proxy_extend ","options [] ","reflection options [] ","reflection options "," Array each "," Array ","reflection check_validity! ","Array  wrap each ","Array  wrap "]}," ActiveRecord Associations AssociationCollection target_obsolete?":{"type":"method","name":"target_obsolete?","children":[],"call":[]}," ActiveRecord Associations AssociationCollection replace":{"type":"method","name":"replace","children":[],"call":[" raise_on_type_mismatch ","other_array each "," concat ","current include? ! ","current include? ","other_array select "," delete ","other include? ! ","other include? ","@target select ","@owner transaction ","@target to_set ","@target size < ","@target size ","other_array to_set ","other_array size < ","other_array size "," load_target "," transaction ","other_array to_set _array each ","@target to_set  include? ! ","@target to_set  include? ","other_array to_set _array select ","other_array to_set  include? ! ","other_array to_set  include? ","other_array to_set _array to_set ","other_array to_set _array size < ","other_array to_set _array size "]}," ActiveRecord Associations AssociationCollection length":{"type":"method","name":"length","children":[],"call":[" load_target size "," load_target "]}," ActiveRecord Associations AssociationCollection create":{"type":"method","name":"create","children":[],"call":["record save ","@owner new_record? "," build "," create ","attributes collect ","attributes is_a? ","ActiveSupport Deprecation  warn "," create_record ","attrs collect ","attrs is_a? "," block_given? "," build  save ","@owner new_ build ? "," create_ build  "]}," ActiveRecord Associations AssociationCollection reset":{"type":"method","name":"reset","children":[],"call":[" reset_target! "," reset_named_scopes_cache! "]}," ActiveRecord Acts Tree ClassMethods acts_as_tree":{"type":"method","name":"acts_as_tree","children":[],"call":[" has_many ","configuration [] "," name "," belongs_to ","configuration update ","options is_a? "," class roots "," class "," class find "," parent id "," parent "," define_method "," module_eval "," parent children "," has_parent? "," self_and_siblings - "," self_and_siblings ","node parent ","node has_parent? ! ","node has_parent? ","nodes << ","configuration [] nil? "," class_eval ","node parent  parent ","node parent  has_parent? ! ","node parent  has_parent? ","node parent s << "]}," ActiveRecord Acts Tree append_features":{"type":"method","name":"append_features","children":[],"call":[]}," ActiveRecord Acts NestedSet InstanceMethods before_destroy":{"type":"method","name":"before_destroy","children":[],"call":[" class update_all "," [] "," right_col_name "," scope_condition "," class "," left_col_name "," class delete_all "," class transaction "," [] - + "," [] - "," [] nil? "," class base_class update_all "," class base_class "," class base_class delete_all "," class base_class transaction "]}," ActiveRecord Acts NestedSet InstanceMethods direct_children":{"type":"method","name":"direct_children","children":[],"call":[" class find_all "," id "," parent_column "," scope_condition "," class "," class find "," class base_class find "," class base_class "]}," ActiveRecord Acts NestedSet InstanceMethods all_children":{"type":"method","name":"all_children","children":[],"call":[" class find_all "," [] "," right_col_name "," left_col_name "," scope_condition "," class "," class find "," class base_class find "," class base_class "]}," ActiveRecord Acts NestedSet InstanceMethods full_set":{"type":"method","name":"full_set","children":[],"call":[" class find_all "," [] "," right_col_name "," left_col_name "," scope_condition "," class "," class find "," class base_class find "," class base_class "]}," ActiveRecord Acts NestedSet InstanceMethods children_count":{"type":"method","name":"children_count","children":[],"call":["(send\n  (send\n    (send\n      (self) :[]\n      (send nil :right_col_name)) :-\n    (send\n      (self) :[]\n      (send nil :left_col_name))) :-\n  (int 1)) / "," [] - - "," [] - "," [] "," left_col_name "," right_col_name "]}," ActiveRecord Acts NestedSet InstanceMethods add_child":{"type":"method","name":"add_child","children":[],"call":["child save "," save "," class update_all "," right_col_name "," scope_condition "," class "," left_col_name "," class transaction "," [] ","child []= ","right_bound + "," id "," parent_column "," []= "," [] == "," raise ","child root? ","child reload "," reload "," class base_class update_all "," class base_class "," class base_class transaction "," []  + "]}," ActiveRecord Acts NestedSet InstanceMethods unknown?":{"type":"method","name":"unknown?","children":[],"call":[" child? ! "," child? "," root? ! "," root? "]}," ActiveRecord Acts NestedSet InstanceMethods child?":{"type":"method","name":"child?","children":[],"call":[" [] > "," [] "," left_col_name "," right_col_name ","(or\n  (send\n    (lvar :parent_id) :==\n    (int 0))\n  (send\n    (lvar :parent_id) :nil?)) ! ","parent_id nil? ","parent_id == "," parent_column ","(or\n  (send\n    (lvar : [] ) :==\n    (int 0))\n  (send\n    (lvar : [] ) :nil?)) ! "," []  nil? "," []  == "]}," ActiveRecord Acts NestedSet InstanceMethods root?":{"type":"method","name":"root?","children":[],"call":[" [] > "," [] "," left_col_name "," right_col_name "," [] == ","parent_id nil? ","parent_id == "," parent_column "," []  nil? "," []  == "]}," ActiveRecord Acts NestedSet ClassMethods acts_as_nested_set":{"type":"method","name":"acts_as_nested_set","children":[],"call":[" class_eval ","configuration [] ","configuration [] to_s ","configuration [] is_a? ","configuration []= ","(begin\n  (send\n    (lvar :configuration) :[]\n    (sym :scope))) intern ","configuration [] to_s !~ ","configuration update ","options is_a? "]}," ActiveRecord Acts NestedSet append_features":{"type":"method","name":"append_features","children":[],"call":[]}," ActiveRecord Acts List InstanceMethods insert_at_position":{"type":"method","name":"insert_at_position","children":[],"call":[" update_attribute "," position_column "," increment_positions_on_lower_items "," remove_from_list "]}," ActiveRecord Acts List InstanceMethods increment_positions_on_all_items":{"type":"method","name":"increment_positions_on_all_items","children":[],"call":[" class update_all "," scope_condition "," position_column "," class "," acts_as_list_class update_all "," acts_as_list_class "]}," ActiveRecord Acts List InstanceMethods increment_positions_on_lower_items":{"type":"method","name":"increment_positions_on_lower_items","children":[],"call":[" class update_all "," position_column "," scope_condition "," class "," acts_as_list_class update_all "," acts_as_list_class "]}," ActiveRecord Acts List InstanceMethods increment_positions_on_higher_items":{"type":"method","name":"increment_positions_on_higher_items","children":[],"call":[" class update_all "," send to_i "," send "," position_column "," scope_condition "," class "," in_list? "," acts_as_list_class update_all "," acts_as_list_class "]}," ActiveRecord Acts List InstanceMethods decrement_positions_on_lower_items":{"type":"method","name":"decrement_positions_on_lower_items","children":[],"call":[" class update_all "," send to_i "," send "," position_column "," scope_condition "," class "," in_list? "," acts_as_list_class update_all "," acts_as_list_class "]}," ActiveRecord Acts List InstanceMethods decrement_positions_on_higher_items":{"type":"method","name":"decrement_positions_on_higher_items","children":[],"call":[" class update_all "," position_column "," scope_condition "," class "," acts_as_list_class update_all "," acts_as_list_class "]}," ActiveRecord Acts List InstanceMethods assume_top_position":{"type":"method","name":"assume_top_position","children":[],"call":[" update_attribute "," position_column "]}," ActiveRecord Acts List InstanceMethods assume_bottom_position":{"type":"method","name":"assume_bottom_position","children":[],"call":[" update_attribute "," bottom_position_in_list to_i + "," bottom_position_in_list to_i "," bottom_position_in_list "," position_column "," last? "]}," ActiveRecord Acts List InstanceMethods bottom_item":{"type":"method","name":"bottom_item","children":[],"call":[" class find_first "," position_column "," scope_condition "," class "," class find ","except id "," acts_as_list_class find "," acts_as_list_class "," class primary_key "]}," ActiveRecord Acts List InstanceMethods bottom_position_in_list":{"type":"method","name":"bottom_position_in_list","children":[],"call":["item send "," position_column "," bottom_item "," bottom_item  send "," bottom_ bottom_item  "]}," ActiveRecord Acts List InstanceMethods scope_condition":{"type":"method","name":"scope_condition","children":[],"call":[]}," ActiveRecord Acts List InstanceMethods add_to_list_bottom":{"type":"method","name":"add_to_list_bottom","children":[],"call":[" []= "," bottom_position_in_list to_i + "," bottom_position_in_list to_i "," bottom_position_in_list "," position_column "," write_attribute "]}," ActiveRecord Acts List InstanceMethods add_to_list_top":{"type":"method","name":"add_to_list_top","children":[],"call":[" increment_positions_on_all_items "]}," ActiveRecord Acts List InstanceMethods lower_item":{"type":"method","name":"lower_item","children":[],"call":[" class find_first ","(send\n  (send\n    (send nil :send\n      (send nil :position_column)) :to_i) :+\n  (int 1)) to_s "," send to_i + "," send to_i "," send "," position_column "," scope_condition "," class "," class find "," in_list? "," acts_as_list_class find "," acts_as_list_class "]}," ActiveRecord Acts List InstanceMethods higher_item":{"type":"method","name":"higher_item","children":[],"call":[" class find_first ","(send\n  (send\n    (send nil :send\n      (send nil :position_column)) :to_i) :-\n  (int 1)) to_s "," send to_i - "," send to_i "," send "," position_column "," scope_condition "," class "," class find "," in_list? "," acts_as_list_class find "," acts_as_list_class "]}," ActiveRecord Acts List InstanceMethods last?":{"type":"method","name":"last?","children":[],"call":[" send == "," bottom_position_in_list "," send "," position_column "," in_list? "]}," ActiveRecord Acts List InstanceMethods first?":{"type":"method","name":"first?","children":[],"call":[" send == "," send "," position_column "," in_list? "]}," ActiveRecord Acts List InstanceMethods decrement_position":{"type":"method","name":"decrement_position","children":[],"call":[" update_attribute "," send to_i - "," send to_i "," send "," position_column "," in_list? "]}," ActiveRecord Acts List InstanceMethods increment_position":{"type":"method","name":"increment_position","children":[],"call":[" update_attribute "," send to_i + "," send to_i "," send "," position_column "," in_list? "]}," ActiveRecord Acts List InstanceMethods remove_from_list":{"type":"method","name":"remove_from_list","children":[],"call":[" decrement_positions_on_lower_items "," in_list? "," update_attribute "," position_column "]}," ActiveRecord Acts List InstanceMethods move_to_top":{"type":"method","name":"move_to_top","children":[],"call":[" assume_top_position "," increment_positions_on_higher_items "," class transaction "," class "," in_list? "," acts_as_list_class transaction "," acts_as_list_class "]}," ActiveRecord Acts List InstanceMethods move_to_bottom":{"type":"method","name":"move_to_bottom","children":[],"call":[" assume_bottom_position "," decrement_positions_on_lower_items "," class transaction "," class "," in_list? "," acts_as_list_class transaction "," acts_as_list_class "]}," ActiveRecord Acts List InstanceMethods move_higher":{"type":"method","name":"move_higher","children":[],"call":[" decrement_position "," higher_item increment_position "," higher_item "," class transaction "," class "," acts_as_list_class transaction "," acts_as_list_class "]}," ActiveRecord Acts List InstanceMethods move_lower":{"type":"method","name":"move_lower","children":[],"call":[" increment_position "," lower_item decrement_position "," lower_item "," class transaction "," class "," acts_as_list_class transaction "," acts_as_list_class "]}," ActiveRecord Acts List InstanceMethods insert_at":{"type":"method","name":"insert_at","children":[],"call":[" insert_at_position "," add_to_list_top ","position == "]}," ActiveRecord Acts List ClassMethods acts_as_list":{"type":"method","name":"acts_as_list","children":[],"call":[" class_eval ","configuration [] ","configuration [] to_s ","configuration [] is_a? ","configuration []= ","(begin\n  (send\n    (lvar :configuration) :[]\n    (sym :scope))) intern ","configuration [] to_s !~ ","configuration update ","options is_a? "," name ","configuration [] to_s + + + ","configuration [] to_s + + ","configuration [] to_s + "]}," ActiveRecord Acts List append_features":{"type":"method","name":"append_features","children":[],"call":[]}," ActiveRecord Associations AssociationProxy loaded":{"type":"method","name":"loaded","children":[],"call":[]}," ActiveRecord AbstractAdapter clear_query_cache":{"type":"method","name":"clear_query_cache","children":[],"call":[]}," ActiveRecord QueryCache method_missing":{"type":"method","name":"method_missing","children":[],"call":["@connection send "]}," ActiveRecord QueryCache delete":{"type":"method","name":"delete","children":[],"call":["@connection delete "," clear_query_cache "]}," ActiveRecord QueryCache update":{"type":"method","name":"update","children":[],"call":["@connection update "," clear_query_cache "]}," ActiveRecord QueryCache insert":{"type":"method","name":"insert","children":[],"call":["@connection insert "," clear_query_cache "]}," ActiveRecord QueryCache columns":{"type":"method","name":"columns","children":[],"call":["@connection columns ","@query_cache [] "]}," ActiveRecord QueryCache select_one":{"type":"method","name":"select_one","children":[],"call":["@connection select_one ","@query_cache [] "]}," ActiveRecord QueryCache select_all":{"type":"method","name":"select_all","children":[],"call":["@connection select_all ","@query_cache [] ","(or-asgn\n  (send\n    (ivar :@query_cache) :[]\n    (lvar :sql))\n  (send\n    (ivar :@connection) :select_all\n    (lvar :sql)\n    (lvar :name))) dup "]}," ActiveRecord QueryCache clear_query_cache":{"type":"method","name":"clear_query_cache","children":[],"call":[]}," ActiveRecord QueryCache initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Test Unit TestCase use_transactional_fixtures?":{"type":"method","name":"use_transactional_fixtures?","children":[],"call":[" class uses_transaction? ! "," class uses_transaction? "," method_name "," class "," use_transactional_fixtures "]}," Test Unit TestCase uses_transaction?":{"type":"method","name":"uses_transaction?","children":[],"call":["@uses_transaction include? ","method to_s "]}," Test Unit TestCase uses_transaction":{"type":"method","name":"uses_transaction","children":[],"call":["@uses_transaction concat ","methods map "]}," Test Unit TestCase setup_fixture_accessors":{"type":"method","name":"setup_fixture_accessors","children":[],"call":["instances first ","instances size == ","instances size "," raise ","@loaded_fixtures [] [] find ","@loaded_fixtures [] [] ","fixture to_s ","@loaded_fixtures [] ","@fixture_cache [] [] ","@fixture_cache [] ","@fixture_cache [] delete ","fixtures map ","fixtures pop ","fixtures last == ","fixtures last "," define_method ","table_name to_s tr ","table_name to_s ","(or\n  (lvar :table_names)\n  (send nil :fixture_table_names)) each "," fixture_table_names ","table_names respond_to? ! ","table_names respond_to? ","table_name to_s tr  to_s tr ","table_name to_s tr  to_s ","(or\n  (lvar :table_name to_s tr s)\n  (send nil :fixture_table_name to_s tr s)) each "," fixture_table_name to_s tr s ","table_name to_s tr s respond_to? ! ","table_name to_s tr s respond_to? "]}," ActiveRecord ConnectionAdapters SQLServerAdapter repair_special_columns":{"type":"method","name":"repair_special_columns","children":[],"call":["sql gsub! ","col to_s ","Regexp  new ","special_cols to_a "," get_special_columns "," get_table_name "," get_special_columns  to_a "]}," ActiveRecord ConnectionAdapters SQLServerAdapter get_special_columns":{"type":"method","name":"get_special_columns","children":[],"call":["special << ","col name ","col is_special ","@table_columns [] each ","@table_columns [] ","@table_columns []= "," columns ","@table_columns [] == "]}," ActiveRecord ConnectionAdapters SQLServerAdapter change_order_direction":{"type":"method","name":"change_order_direction","children":[],"call":["String  new insert ","String  new ","order gsub ","String  new split join + ","String  new split join ","String  new split ","(send\n  (send\n    (lvar :order) :split\n    (str \",\")) :collect) join ","fragment gsub ","order split collect ","order split "]}," ActiveRecord ConnectionAdapters SQLServerAdapter query_contains_identity_column":{"type":"method","name":"query_contains_identity_column","children":[],"call":["sql =~ "]}," ActiveRecord ConnectionAdapters SQLServerAdapter get_identity_column":{"type":"method","name":"get_identity_column","children":[],"call":["col name ","col identity ","@table_columns [] each ","@table_columns [] ","@table_columns []= "," columns ","@table_columns [] == ","@table_columns ! "]}," ActiveRecord ConnectionAdapters SQLServerAdapter has_identity_column":{"type":"method","name":"has_identity_column","children":[],"call":[" get_identity_column nil? ! "," get_identity_column nil? "," get_identity_column "," get_identity_column != "]}," ActiveRecord ConnectionAdapters SQLServerAdapter get_table_name":{"type":"method","name":"get_table_name","children":[],"call":["sql =~ "]}," ActiveRecord ConnectionAdapters SQLServerAdapter enable_identity_insert":{"type":"method","name":"enable_identity_insert","children":[],"call":[" has_identity_column "]}," ActiveRecord ConnectionAdapters SQLServerAdapter select":{"type":"method","name":"select","children":[],"call":["rows << ","record []= ","row [] ","row column_names each ","row column_names ","@connection select_all "," log "," repair_special_columns ","record [] to_time ","record [] ","record [] is_a? ","result << ","row_hash []= ","handle column_names [] ","handle column_names ","DateTime  new ","value sec ","value minute ","value hour ","value day ","value month ","value year ","value is_a? ","row each_with_index ","handle each "," execute ","conn select_all ","DateTime  new  sec ","DateTime  new  minute ","DateTime  new  hour ","DateTime  new  day ","DateTime  new  month ","DateTime  new  year ","DateTime  new  is_a? "]}," ActiveRecord ConnectionAdapters SQLServerAdapter create_database":{"type":"method","name":"create_database","children":[],"call":[" execute "]}," ActiveRecord ConnectionAdapters SQLServerAdapter drop_database":{"type":"method","name":"drop_database","children":[],"call":[" execute "]}," ActiveRecord ConnectionAdapters SQLServerAdapter recreate_database":{"type":"method","name":"recreate_database","children":[],"call":[" create_database "," drop_database "]}," ActiveRecord ConnectionAdapters SQLServerAdapter add_limit_offset!":{"type":"method","name":"add_limit_offset!","children":[],"call":["sql gsub! ","options [] ","options [] nil? ","sql gsub! << "," change_order_direction ","options [] + ","options []= ","total_rows - ","total_rows - > ","(send\n  (send\n    (lvar :options) :[]\n    (sym :limit)) :+\n  (send\n    (lvar :options) :[]\n    (sym :offset))) > ","@connection select_all [] [] to_i ","@connection select_all [] [] ","@connection select_all [] ","@connection select_all "," get_table_name ","options [] nil? ! ","options has_key? ","sql sub! ","sql !~ ","sql << ","(send\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :order)) :split\n    (str \",\")) :map) join ","parts join ","parts []= ","sql =~ ","parts [] ","field split ","options [] split map ","options [] split ","total_rows - >= ","(send\n  (send\n    (lvar :options) :[]\n    (sym :limit)) :+\n  (send\n    (lvar :options) :[]\n    (sym :offset))) >= ","sql gsub ","tc << ","tc gsub! ","tc =~ ","parts [] =~ ","@connection select_all [] [] to_i  - ","@connection select_all [] [] to_i  - > ","field split  join ","field split  []= ","field split  [] ","@connection select_all [] [] to_i  - >= ","parts []  << ","parts []  gsub! ","parts []  =~ ","field split  [] =~ "]}," ActiveRecord ConnectionAdapters SQLServerAdapter quote_column_name":{"type":"method","name":"quote_column_name","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerAdapter quote_string":{"type":"method","name":"quote_string","children":[],"call":["string gsub ","s gsub "]}," ActiveRecord ConnectionAdapters SQLServerAdapter quote":{"type":"method","name":"quote","children":[],"call":[" quote_string ","value to_yaml ","value strftime ","value to_s ","column string_to_binary ","column type == ","column type ","column class string_to_binary ","column class ","column class respond_to? ","value quoted_id ","value respond_to? "]}," ActiveRecord ConnectionAdapters SQLServerAdapter rollback_db_transaction":{"type":"method","name":"rollback_db_transaction","children":[],"call":["@connection []= ","@connection rollback "]}," ActiveRecord ConnectionAdapters SQLServerAdapter commit_db_transaction":{"type":"method","name":"commit_db_transaction","children":[],"call":["@connection []= ","@connection commit "]}," ActiveRecord ConnectionAdapters SQLServerAdapter begin_db_transaction":{"type":"method","name":"begin_db_transaction","children":[],"call":["@connection []= "]}," ActiveRecord ConnectionAdapters SQLServerAdapter update":{"type":"method","name":"update","children":[],"call":[" execute "," select_one [] "," select_one ","handle rows "," affected_rows "]}," ActiveRecord ConnectionAdapters SQLServerAdapter execute":{"type":"method","name":"execute","children":[],"call":["@connection execute "," log "," select_one [] "," select_one ","sql =~ "," insert "," block_given? "," with_identity_insert_enabled "," query_requires_identity_insert? ","conn execute "]}," ActiveRecord ConnectionAdapters SQLServerAdapter insert":{"type":"method","name":"insert","children":[],"call":[" raise "," execute "," enable_identity_insert "," select_one [] "," select_one ","@connection execute "," log "," query_contains_identity_column ","col != "," get_identity_column "," get_table_name ","conn execute "," query_contains_identity_ get_identity_column umn "," get_identity_column  != "," get_identity_ get_identity_column umn "," get_ get_table_name  "]}," ActiveRecord ConnectionAdapters SQLServerAdapter columns":{"type":"method","name":"columns","children":[],"call":["columns << ","ColumnWithIdentity  new ","field [] ","field [] == ","field [] to_s gsub! =~ ","field [] to_s gsub! ","field [] to_s ","result each ","@connection select_all "," log ","table_name split [] ","table_name split ","table_name nil? ","table_name to_s ","table_name is_a? ","table_name blank? ","SQLServerColumn  new ","field [] =~ ","table_name gsub ","row [] != ","row [] ","default_value =~ ","conn select_all ","ColumnWithIdentity  new umns << ","conn select_all  each ","table_name split []  split [] ","table_name to_s  split [] ","table_name gsub  split [] ","table_name split []  split ","table_name to_s  split ","table_name gsub  split ","table_name split []  nil? ","table_name to_s  nil? ","table_name gsub  nil? ","table_name split []  to_s ","table_name to_s  to_s ","table_name gsub  to_s ","table_name split []  is_a? ","table_name to_s  is_a? ","table_name gsub  is_a? ","table_name split []  blank? ","table_name to_s  blank? ","table_name gsub  blank? ","table_name split []  gsub ","table_name to_s  gsub ","table_name gsub  gsub ","field [] _value =~ ","row []  =~ "]}," ActiveRecord ConnectionAdapters SQLServerAdapter select_one":{"type":"method","name":"select_one","children":[],"call":["result first ","result nil? "," select "," add_limit! "," select  first "," select  nil? "]}," ActiveRecord ConnectionAdapters SQLServerAdapter select_all":{"type":"method","name":"select_all","children":[],"call":[" select "," add_limit! "]}," ActiveRecord ConnectionAdapters SQLServerAdapter adapter_name":{"type":"method","name":"adapter_name","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerAdapter native_database_types":{"type":"method","name":"native_database_types","children":[],"call":[]}," ActiveRecord ConnectionAdapters ColumnWithIdentity binary_to_string":{"type":"method","name":"binary_to_string","children":[],"call":["value gsub "]}," ActiveRecord ConnectionAdapters ColumnWithIdentity string_to_binary":{"type":"method","name":"string_to_binary","children":[],"call":["value gsub "]}," ActiveRecord ConnectionAdapters ColumnWithIdentity cast_to_datetime":{"type":"method","name":"cast_to_datetime","children":[],"call":[" cast_to_time ","value is_a? ","Time  mktime ","value sec ","value min ","value hour ","value day != ","value day ","value month != ","value month ","value year != ","value year "]}," ActiveRecord ConnectionAdapters ColumnWithIdentity cast_to_time":{"type":"method","name":"cast_to_time","children":[],"call":["Time  send ","Base  default_timezone ","time_array [] ","ParseDate  parsedate ","value is_a? ","ParseDate  parsedate  [] "]}," ActiveRecord ConnectionAdapters ColumnWithIdentity type_cast":{"type":"method","name":"type_cast","children":[],"call":[" cast_to_time "," cast_to_datetime ","value to_f ","value to_i ","value == "," type ","value =~ ","value nil? ","value to_s == ","value to_s ","(send\n  (lvar :value) :=~\n  (regexp\n    (str \"^t(rue)?$\")\n    (regopt :i))) == "]}," ActiveRecord ConnectionAdapters ColumnWithIdentity simplified_type":{"type":"method","name":"simplified_type","children":[],"call":["@scale == "]}," ActiveRecord ConnectionAdapters ColumnWithIdentity initialize":{"type":"method","name":"initialize","children":[],"call":["sql_type =~ ","@type == "]}," ActiveRecord Base sqlserver_connection":{"type":"method","name":"sqlserver_connection","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter translate_field_type":{"type":"method","name":"translate_field_type","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter column_definitions":{"type":"method","name":"column_definitions","children":[],"call":[" query "," quote_table_name "," exec_query rows "," exec_query "," quote "," supports_virtual_columns? "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter remove_index":{"type":"method","name":"remove_index","children":[],"call":[" execute ","options [] ","Hash  === "," index_name "," quote_table_name "," options []  "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter rename_column":{"type":"method","name":"rename_column","children":[],"call":[" execute "," quote_column_name "," quote_table_name "," clear_cache! "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter change_column_default":{"type":"method","name":"change_column_default","children":[],"call":[" execute "," quote "," quote_column_name "," quote_table_name "," clear_cache! "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter change_column":{"type":"method","name":"change_column","children":[],"call":[" change_column_default ","options [] ","options [] nil? "," commit_db_transaction "," rename_column "," remove_column "," execute "," type_to_sql "," add_column "," begin_db_transaction "," options_include_default? "," change_column_null ","options key? "," quote_column_name "," rollback_db_transaction "," quote_table_name "," raise "," postgresql_version > "," postgresql_version "," clear_cache! "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter schema_search_path":{"type":"method","name":"schema_search_path","children":[],"call":[" query [] [] "," query [] "," query "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter schema_search_path=":{"type":"method","name":"schema_search_path=","children":[],"call":[" execute "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter query":{"type":"method","name":"query","children":[],"call":["@connection query "," log ","@connection async_query "," result_as_array ","@connection exec ","@connection async_exec "," @connection exec ult_as_array "," @connection async_exec ult_as_array "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter supports_migrations?":{"type":"method","name":"supports_migrations?","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter native_database_types":{"type":"method","name":"native_database_types","children":[],"call":[" class native_database_types "," class "]}," ActiveRecord ConnectionAdapters MysqlAdapter rename_column":{"type":"method","name":"rename_column","children":[],"call":[" execute "," select_one [] "," select_one "," quote_column_name "," quote_table_name "," add_column_options! "," raise ","options []= ","column null ","column default ","c name == ","column_name to_s ","c name "," columns find "," columns "," rename_column_sql "]}," ActiveRecord ConnectionAdapters MysqlAdapter change_column":{"type":"method","name":"change_column","children":[],"call":[" execute "," add_column_options! "," type_to_sql ","options [] "," select_one [] "," select_one ","options []= "," options_include_default? "," quote_column_name "," quote_table_name "," raise ","column default ","c name == ","column_name to_s ","c name "," columns find "," columns ","column null ","options has_key? "," column_for "," add_column_position! "," change_column_sql "," add_ column_for _options! "," quote_ column_for _name "," column_for  default "," column_for _name to_s ","  column_for s find ","  column_for s "," column_for  null ","  column_for _for "," add_ column_for _position! "," change_ column_for _sql "]}," ActiveRecord ConnectionAdapters MysqlAdapter change_column_default":{"type":"method","name":"change_column_default","children":[],"call":[" change_column "," select_one [] "," select_one "," execute "," quote "," quote_column_name "," quote_table_name ","column sql_type "," column_for "," change_ column_for  "," quote_ column_for _name "," column_for  sql_type ","  column_for _for "]}," ActiveRecord ConnectionAdapters MysqlAdapter add_limit_offset!":{"type":"method","name":"add_limit_offset!","children":[],"call":["sql << ","options [] ","options [] blank? ","offset to_i "," sanitize_limit ","options []  to_i "," sanitize_options []  "," sanitize_ sanitize_limit  "]}," ActiveRecord ConnectionAdapters MysqlAdapter supports_migrations?":{"type":"method","name":"supports_migrations?","children":[],"call":[]}," ActiveRecord ConnectionAdapters TableDefinition native":{"type":"method","name":"native","children":[],"call":["@base native_database_types "]}," ActiveRecord ConnectionAdapters TableDefinition type_to_sql":{"type":"method","name":"type_to_sql","children":[],"call":["@base type_to_sql "]}," ActiveRecord ConnectionAdapters TableDefinition to_sql":{"type":"method","name":"to_sql","children":[],"call":["@columns join ","@columns * ","@columns map * ","@columns map ","(send\n  (ivar :@columns) :map) * ","c to_sql "]}," ActiveRecord ConnectionAdapters TableDefinition primary_key":{"type":"method","name":"primary_key","children":[],"call":["@columns << "," native [] "," native "," column ","options merge ","options []= "]}," ActiveRecord ConnectionAdapters AbstractAdapter add_column_options!":{"type":"method","name":"add_column_options!","children":[],"call":["sql << ","options [] ","options [] nil? "]}," ActiveRecord ConnectionAdapters AbstractAdapter type_to_sql":{"type":"method","name":"type_to_sql","children":[],"call":["column_type_sql << ","native [] "," native_database_types [] "," native_database_types ","native []  << "," native_database_types []  [] ","  native_database_types [] _database_types [] ","  native_database_types [] _database_types "]}," ActiveRecord ConnectionAdapters AbstractAdapter native_database_types":{"type":"method","name":"native_database_types","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter supports_migrations?":{"type":"method","name":"supports_migrations?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter remove_index":{"type":"method","name":"remove_index","children":[],"call":[" execute "]}," ActiveRecord ConnectionAdapters AbstractAdapter add_index":{"type":"method","name":"add_index","children":[],"call":[" execute ","column_name to_a join ","column_name to_a ","column_name to_a first "]}," ActiveRecord ConnectionAdapters AbstractAdapter rename_column":{"type":"method","name":"rename_column","children":[],"call":[" raise "]}," ActiveRecord ConnectionAdapters AbstractAdapter change_column_default":{"type":"method","name":"change_column_default","children":[],"call":[" raise "]}," ActiveRecord ConnectionAdapters AbstractAdapter change_column":{"type":"method","name":"change_column","children":[],"call":[" raise "]}," ActiveRecord ConnectionAdapters AbstractAdapter add_limit_offset!":{"type":"method","name":"add_limit_offset!","children":[],"call":["sql << ","options [] ","options [] nil? ! ","options [] nil? ","options has_key? "]}," ActiveRecord Associations ClassMethods add_association_callbacks":{"type":"method","name":"add_association_callbacks","children":[],"call":[" write_inheritable_array ","full_callback_name to_sym "," class_inheritable_reader ","defined_callbacks kind_of? ","options has_key? ","callback_name to_sym ","options [] ","association_name to_s ","callback_name to_s ","callbacks each ","(lvar :defined_callbacks) flatten "," write_inheritable_attribute ","options []  kind_of? ","(lvar :options [] ) flatten "]}," ActiveRecord Associations ClassMethods add_sti_conditions!":{"type":"method","name":"add_sti_conditions!","children":[],"call":["sql << ","sti_sql sub! ","sql =~ ","sti_sql << ","reflection klass send ","reflection klass ","reflection klass descends_from_active_record? ","reflections each "," condition_word + ","sti_conditions join "," condition_word ","sti_conditions empty? ","(send\n  (lvar :reflections) :collect) compact ","reflections collect ","(send\n  (lvar :reflections) :collect) compact  join ","(send\n  (lvar :reflections) :collect) compact  empty? "]}," ActiveRecord Associations HasOneAssociation build":{"type":"method","name":"build","children":[],"call":[" target= ","record []= ","@owner id ","@owner new_record? "," replace ","@association_class new ","@reflection primary_key_name ","@reflection klass new ","@reflection klass ","klass new "," new_record ","reflection build_association "," merge_with_conditions ","@association_class new  []= ","@reflection klass new  []= ","@owner new_@association_class new ? ","@owner new_@reflection klass new ? "," new_@association_class new  "," new_@reflection klass new  "]}," ActiveRecord Associations HasOneAssociation create":{"type":"method","name":"create","children":[],"call":["record save "," build ","klass create "," new_record ","reflection create_association "," merge_with_conditions "," build  save "," new_ build  "]}," ActiveRecord Associations AssociationCollection callbacks_for":{"type":"method","name":"callbacks_for","children":[],"call":["@owner class read_inheritable_attribute ","full_callback_name to_sym ","@owner class ","@association_name to_s ","callback_name to_s ","@reflection name "]}," ActiveRecord Associations AssociationCollection callback":{"type":"method","name":"callback","children":[],"call":[" raise ","callback send ","callback respond_to? ","callback call ","@owner send "," callbacks_for each "," callbacks_for ","ActiveSupport Callbacks Callback  new call ","ActiveSupport Callbacks Callback  new "]}," ActiveRecord Acts List InstanceMethods in_list?":{"type":"method","name":"in_list?","children":[],"call":[" send nil? ! "," send nil? "," send "," position_column "]}," ActiveRecord Base active_connections":{"type":"method","name":"active_connections","children":[],"call":[]}," ActiveRecord Associations ClassMethods using_limitable_reflections?":{"type":"method","name":"using_limitable_reflections?","children":[],"call":["(send\n  (lvar :reflections) :reject) length zero? ","(send\n  (lvar :reflections) :reject) length ","(sym :belongs_to) include? ","r macro ","reflections reject ","reflections none? ","reflections collect length zero? ","reflections collect length ","reflections collect "]}," ActiveRecord Associations ClassMethods guard_against_unlimitable_reflections":{"type":"method","name":"guard_against_unlimitable_reflections","children":[],"call":[" raise "," using_limitable_reflections? ! "," using_limitable_reflections? ","options [] "]}," ActiveRecord Associations ClassMethods guard_against_missing_reflections":{"type":"method","name":"guard_against_missing_reflections","children":[],"call":[" raise ","options [] join ","options [] ","r nil? ","reflections each ","Association was not found; perhaps you misspelled it?   + ","(send\n  (lvar :options) :[]\n  (sym :include)) flatten join ","(send\n  (lvar :options) :[]\n  (sym :include)) flatten "]}," ActiveRecord SchemaDumper indexes":{"type":"method","name":"indexes","children":[],"call":["stream puts ","indexes empty? ","stream print ","index unique ","index name inspect ","index name ","index columns inspect ","index columns ","index table inspect ","index table ","indexes each ","@connection indexes ","add_index_statements sort join ","add_index_statements sort ","   + ","statment_parts join ","statment_parts << ",":name =>  + ","add_index  + ","indexes map ","(lvasgn :indexes\n  (send\n    (ivar :@connection) :indexes\n    (lvar :table))) any? ",":length =>  + ","Hash  [] inspect ","Hash  [] ","index columns zip flatten ","index columns zip ","index lengths ","index_lengths present? ","index lengths compact ","index lengths is_a? ","statement_parts join ","statement_parts << ","index_lengths empty? ","(or\n  (send\n    (lvar :index) :lengths)\n  (array)) compact ",":order =>  + ","index orders inspect ","index orders ","index_orders empty? "," remove_prefix_and_suffix inspect "," remove_prefix_and_suffix ","type:  + ","index type inspect ","index type ","using:  + ","index using inspect ","index using ","where:  + ","index where inspect ","index where ","order:  + ","length:  + ","name:  + ","index_orders any? ","index_lengths any? ","(send\n  (array\n    (lvar :table_name)) :+\n  (send nil :index_parts\n    (lvar :index))) join ","(lvar :table_name) + "," index_parts ","@connection indexes  empty? ","@connection indexes  each ","@connection @connection indexes  ","@connection indexes  map ","(lvasgn :@connection indexes \n  (send\n    (ivar :@connection) :@connection indexes \n    (lvar :table))) any? ","index lengths compact  present? ","(or\n  (send\n    (lvar :index) :lengths)\n  (array)) compact  present? ","index lengths compact  empty? ","(or\n  (send\n    (lvar :index) :lengths)\n  (array)) compact  empty? ","index lengths compact  any? ","(or\n  (send\n    (lvar :index) :lengths)\n  (array)) compact  any? ","(send\n  (array\n    (lvar : remove_prefix_and_suffix inspect )) :+\n  (send nil :index_parts\n    (lvar :index))) join ","(lvar : remove_prefix_and_suffix inspect ) + "]}," ActiveRecord SchemaDumper table":{"type":"method","name":"table","children":[],"call":[" indexes ","stream puts ","stream print ","column null ! ","column null ","column default inspect ","column default ","column default nil? ! ","column default nil? ","column limit inspect ","column limit ","column limit != ","@types [] [] ","@types [] ","column type ","column type inspect ","column name inspect ","column name ","column name == ","columns each ","(send\n  (lvar :columns) :detect) ! ","c name == ","c name ","columns detect ","table inspect ","@connection columns ","e message ","e class ","tbl read ","tbl rewind ","tbl puts ","tbl print ","(send\n  (lvar :format_string) :%\n  (lvar :values)) gsub ","format_string % ","values unshift ","colspec [] ","  * ","colspec [] + ","colspec key? ","keys zip map ","keys zip ","column_specs each ","format_string unshift ","(send\n  (lvar :column_specs) :map) max ","column [] length ","column [] ","column_specs map ","lengths map ","spec [] length + ","spec [] length ","spec [] ","keys map ","(sym :name) & ","column_specs map flatten ","(send\n  (lvar :columns) :map) compact ","spec [] insert ","k inspect ","(send\n  (send\n    (lvar :spec) :keys) :-\n  (array\n    (sym :name)\n    (sym :type))) each ","spec keys - ","spec keys ","spec []= "," default_string ","column scale inspect ","column scale ","column scale nil? ! ","column scale nil? ","column precision inspect ","column precision ","column precision nil? ! ","column precision nil? ","column type != ","column type to_s "," raise ","column sql_type ","@types [] nil? ","columns map ","pk != ","@connection pk_and_sequence_for ","@connection respond_to? ","StringIO  new ","column has_default? ","@connection primary_key ","(send\n  (lvar :column_specs) :map) flatten ","k keys ","spec [] != ","e match ","(regexp\n  (str \"^numeric\")\n  (regopt)) any? ","column type == "," remove_prefix_and_suffix inspect "," remove_prefix_and_suffix ","@connection migration_keys ","@connection column_spec ","@connection valid_type? ","pkcol default_function ","pkcol sql_type == ","pkcol sql_type ","pk ! ","pkcol default_function inspect "," indexes_in_create ","comment inspect ","@connection table_comment presence ","@connection table_comment ","table_options inspect ","table_options blank? ","@connection table_options ","pk inspect ","pkcolspec each ","pkcolspec present? ","@connection column_spec_for_primary_key ","pk == ","pk first ","pk size > ","pk size ","@connection primary_keys ","column instance_variable_set ","@connection columns map "," format_options ","table_options present? "," format_colspec ","colspec present? "," column_spec "," column_spec_for_primary_key "," table_name= ","type inspect ","type is_a? "," check_constraints_in_create ","@connection supports_check_constraints? ","(pair\n  (sym :type)\n  (send\n    (lvar :pkcolspec) :delete\n    (sym :id))) compact ","pkcolspec delete ","pkcolspec != ","pkcolspec slice ","pkcolspec empty? ","tbl string "," unique_keys_in_create ","@connection supports_unique_keys? "," exclusion_constraints_in_create ","@connection supports_exclusion_constraints? ","@connection columns  each ","(send\n  (lvar :@connection columns ) :detect) ! ","@connection columns  detect ","@connection @connection columns  ","StringIO  new  read ","StringIO  new  rewind ","StringIO  new  puts ","StringIO  new  print ","(sym :name) &  zip map ","@connection migration_keys  zip map ","(sym :name) &  zip ","@connection migration_keys  zip ","(send\n  (lvar :columns) :map) compact  each ","(send\n  (lvar :(send\n  (lvar :columns) :map) compact ) :map) max ","(send\n  (lvar :columns) :map) compact  map ","(sym :name) &  map ","@connection migration_keys  map ","(send\n  (lvar :columns) :map) compact  map flatten ","(send\n  (lvar :@connection columns ) :map) compact ","(send\n  (send\n    (lvar :spec) :(sym :name) & ) :-\n  (array\n    (sym :name)\n    (sym :type))) each ","(send\n  (send\n    (lvar :spec) :@connection migration_keys ) :-\n  (array\n    (sym :name)\n    (sym :type))) each ","spec (sym :name) &  - ","spec @connection migration_keys  - ","spec (sym :name) &  ","spec @connection migration_keys  ","@connection columns  map ","@connection primary_key  != ","pk first  != ","@connection primary_keys  != ","@connection @connection primary_key _and_sequence_for ","@connection pk first _and_sequence_for ","@connection @connection primary_keys _and_sequence_for ","(send\n  (lvar :(send\n  (lvar :columns) :map) compact ) :map) flatten ","k (sym :name) &  ","k @connection migration_keys  ","@connection migration_(sym :name) &  ","@connection migration_@connection migration_keys  ","@connection primary_key col default_function ","pk first col default_function ","@connection primary_keys col default_function ","@connection primary_key col sql_type == ","pk first col sql_type == ","@connection primary_keys col sql_type == ","@connection primary_key col sql_type ","pk first col sql_type ","@connection primary_keys col sql_type ","@connection primary_key  ! ","pk first  ! ","@connection primary_keys  ! ","@connection primary_key col default_function inspect ","pk first col default_function inspect ","@connection primary_keys col default_function inspect ","@connection table_comment presence  inspect ","@connection table_@connection table_comment presence  presence ","@connection table_@connection table_comment presence  ","@connection table_options  inspect ","@connection table_options  blank? ","@connection @connection table_options  ","@connection primary_key  inspect ","pk first  inspect ","@connection primary_keys  inspect ","@connection primary_key colspec each ","pk first colspec each ","@connection primary_keys colspec each ","@connection column_spec_for_primary_key  each "," column_spec_for_primary_key  each ","@connection primary_key colspec present? ","pk first colspec present? ","@connection primary_keys colspec present? ","@connection column_spec_for_primary_key  present? "," column_spec_for_primary_key  present? ","@connection primary_key  == ","pk first  == ","@connection primary_keys  == ","@connection primary_key  first ","pk first  first ","@connection primary_keys  first ","@connection primary_key  size > ","pk first  size > ","@connection primary_keys  size > ","@connection primary_key  size ","pk first  size ","@connection primary_keys  size ","@connection primary_(sym :name) &  ","@connection primary_@connection migration_keys  ","@connection @connection columns  map ","@connection table_options  present? ","(pair\n  (sym :type)\n  (send\n    (lvar :@connection primary_key colspec) :delete\n    (sym :id))) compact ","(pair\n  (sym :type)\n  (send\n    (lvar :pk first colspec) :delete\n    (sym :id))) compact ","(pair\n  (sym :type)\n  (send\n    (lvar :@connection primary_keys colspec) :delete\n    (sym :id))) compact ","(pair\n  (sym :type)\n  (send\n    (lvar :@connection column_spec_for_primary_key ) :delete\n    (sym :id))) compact ","(pair\n  (sym :type)\n  (send\n    (lvar : column_spec_for_primary_key ) :delete\n    (sym :id))) compact ","@connection primary_key colspec delete ","pk first colspec delete ","@connection primary_keys colspec delete ","@connection column_spec_for_primary_key  delete "," column_spec_for_primary_key  delete ","@connection primary_key colspec != ","pk first colspec != ","@connection primary_keys colspec != ","@connection column_spec_for_primary_key  != "," column_spec_for_primary_key  != ","@connection primary_key colspec slice ","pk first colspec slice ","@connection primary_keys colspec slice ","@connection column_spec_for_primary_key  slice "," column_spec_for_primary_key  slice ","@connection primary_key colspec empty? ","pk first colspec empty? ","@connection primary_keys colspec empty? ","@connection column_spec_for_primary_key  empty? "," column_spec_for_primary_key  empty? ","StringIO  new  string "," unique_(sym :name) & _in_create "," unique_@connection migration_keys _in_create ","@connection supports_unique_(sym :name) & ? ","@connection supports_unique_@connection migration_keys ? "]}," ActiveRecord SchemaDumper tables":{"type":"method","name":"tables","children":[],"call":[" table ","tbl == ","@connection tables sort each ","@connection tables sort ","@connection tables "," raise ","tbl =~ ","(str \"schema_info\") flatten any? ","(str \"schema_info\") flatten "," ignore_tables ","(str \"schema_migrations\") flatten any? ","(str \"schema_migrations\") flatten "," remove_prefix_and_suffix =~ "," remove_prefix_and_suffix "," remove_prefix_and_suffix == "," foreign_keys "," ignored? ","sorted_tables each ","@connection supports_foreign_keys? ","@connection data_sources sort - ","@connection views ","@connection data_sources sort ","@connection data_sources ","@connection use_foreign_keys? ","@connection tables sort  each ","@connection data_sources sort -  each "]}," ActiveRecord SchemaDumper trailer":{"type":"method","name":"trailer","children":[],"call":["stream puts "]}," ActiveRecord SchemaDumper header":{"type":"method","name":"header","children":[],"call":["stream puts ","@info [] ","stream external_encoding name ","stream external_encoding ","stream respond_to? "," define_params ","ActiveRecord Migration  current_version "]}," ActiveRecord SchemaDumper initialize":{"type":"method","name":"initialize","children":[],"call":["@connection select_one ","@connection native_database_types ","Migrator  current_version ","connection migration_context current_version ","connection migration_context ","(send\n  (const\n    (const nil :ActiveRecord) :Base) :schema_migrations_table_name) flatten "," class ignore_tables "," class ","ActiveRecord Base  internal_metadata_table_name ","ActiveRecord Base  schema_migrations_table_name "]}," ActiveRecord SchemaDumper dump":{"type":"method","name":"dump","children":[],"call":[" trailer "," tables "," header ","ActiveRecord Base  connection "," extensions "," new dump "," new "," generate_options ","connection create_schema_dumper dump ","connection create_schema_dumper "," types "]}," ActiveRecord Schema define":{"type":"method","name":"define","children":[],"call":[" connection assume_migrated_upto_version "," migrations_paths ","info [] "," connection "," initialize_schema_migrations_table ","info [] blank? "," instance_eval "," assume_migrated_upto_version ","ActiveRecord InternalMetadata  []= ","ActiveRecord Migrator  current_environment ","ActiveRecord InternalMetadata  create_table ","info [] present? ","ActiveRecord SchemaMigration  create_table "," connection migration_context current_environment "," connection migration_context "," connection schema_migration create_table "," connection schema_migration "]}," ActiveRecord Observing ClassMethods observers=":{"type":"method","name":"observers=","children":[],"call":["observer instance ","observer to_s camelize constantize instance ","observer to_s camelize constantize ","observer to_s camelize ","observer to_s ","observer is_a? ","(lvar :observers) flatten each ","(lvar :observers) flatten ","observers flatten "]}," ActiveRecord Observing append_features":{"type":"method","name":"append_features","children":[],"call":[]}," ActiveRecord Migrator proper_table_name":{"type":"method","name":"proper_table_name","children":[],"call":["ActiveRecord Base  table_name_suffix ","ActiveRecord Base  table_name_prefix ","name table_name ","name respond_to? ","options [] ","(pair\n  (sym :table_name_prefix)\n  (send\n    (const\n      (const nil :ActiveRecord) :Base) :table_name_prefix)) merge ","ActiveSupport Deprecation  warn ","(pair\n  (sym :table_name_prefix)\n  (send\n    (const\n      (const nil :ActiveRecord) :Base) :table_name_prefix)) merge  [] "]}," ActiveRecord Migrator schema_info_table_name":{"type":"method","name":"schema_info_table_name","children":[],"call":["Base  table_name_prefix + + ","Base  table_name_suffix ","Base  table_name_prefix + ","Base  table_name_prefix "]}," YAML Omap values":{"type":"method","name":"values","children":[],"call":[" map "]}," YAML Omap keys":{"type":"method","name":"keys","children":[],"call":[" map "]}," ActiveRecord ConnectionAdapters SQLServerAdapter quoted_false":{"type":"method","name":"quoted_false","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerAdapter quoted_true":{"type":"method","name":"quoted_true","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter add_column":{"type":"method","name":"add_column","children":[],"call":[" execute ","sql_commands each ","sql_commands << ","options [] == ","options [] "," type_to_sql "," native_database_types [] "," native_database_types "," change_column_default ","options [] nil? "," quote "," options_include_default? "," change_column_null "," quote_column_name "," quote_table_name "," add_column_options! "," clear_cache! "," change_column_options []  "," options_include_options [] ? "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter rename_table":{"type":"method","name":"rename_table","children":[],"call":[" execute "," quote_table_name "," clear_cache! ","seq == "," pk_and_sequence_for "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter pk_and_sequence_for":{"type":"method","name":"pk_and_sequence_for","children":[],"call":[" execute [] "," execute ","result [] ","result first ","result last ","result last [] ","result empty? ","result nil? "," query [] "," query "," quote_table_name "," exec_query rows first "," exec_query rows "," exec_query ","result second + + ","result second + ","result second ","result second == "," execute []  [] "," query []  [] "," exec_query rows first  [] "," execute []  first "," query []  first "," exec_query rows first  first "," execute []  last "," query []  last "," exec_query rows first  last "," execute []  last [] "," query []  last [] "," exec_query rows first  last [] "," execute []  empty? "," query []  empty? "," exec_query rows first  empty? "," execute []  nil? "," query []  nil? "," exec_query rows first  nil? "," execute []  second + + "," query []  second + + "," exec_query rows first  second + + "," execute []  second + "," query []  second + "," exec_query rows first  second + "," execute []  second "," query []  second "," exec_query rows first  second "," execute []  second == "," query []  second == "," exec_query rows first  second == "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter reset_pk_sequence!":{"type":"method","name":"reset_pk_sequence!","children":[],"call":[" select_value "," pk_and_sequence_for ","@logger warn "," quote_table_name "," quote_column_name ","sequence ! "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter default_sequence_name":{"type":"method","name":"default_sequence_name","children":[],"call":[" pk_and_sequence_for "," serial_sequence split last "," serial_sequence split "," serial_sequence "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter indexes":{"type":"method","name":"indexes","children":[],"call":["indexes last columns << ","row [] ","indexes last columns ","indexes last ","indexes << ","IndexDefinition  new ","row [] == ","current_index != ","result each "," query ","(send\n  (send\n    (send nil :schema_search_path) :split\n    (regexp\n      (str \",\")\n      (regopt))) :map) join "," quote "," schema_search_path split map "," schema_search_path split "," schema_search_path ","columns [] ","indkey map ","attlist []= ","r [] "," query inject ","indkey join ","row [] split ","result map ","(send\n  (lvar :result) :map) compact ","column_names empty? ","columns values_at compact ","columns values_at ","Hash  [] ","desc_order_columns map ","desc_order_columns any? ","inddef scan flatten ","inddef scan ","indexes last Hash  []  << ","indexes last Hash  []  ","row []  != "," query  each ","Hash  []  [] ","row [] split  map ","row [] split  join "," query  map ","(send\n  (lvar : query ) :map) compact ","columns values_at compact  empty? ","Hash  []  values_at compact ","Hash  []  values_at ","desc_order_Hash  []  map ","inddef scan flatten  map ","desc_order_Hash  []  any? ","inddef scan flatten  any? ","row []  scan flatten ","row []  scan "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter tables":{"type":"method","name":"tables","children":[],"call":["row [] "," query map "," query ","(send\n  (send\n    (send nil :schema_search_path) :split\n    (regexp\n      (str \",\")\n      (regopt))) :map) join "," quote "," schema_search_path split map "," schema_search_path split "," schema_search_path "]}," ActiveRecord ConnectionAdapters MysqlAdapter rename_table":{"type":"method","name":"rename_table","children":[],"call":[" execute "," quote_table_name "]}," ActiveRecord ConnectionAdapters MysqlAdapter indexes":{"type":"method","name":"indexes","children":[],"call":["indexes last columns << ","row [] ","indexes last columns ","indexes last ","indexes << ","IndexDefinition  new ","row [] == ","current_index != "," execute each "," execute "," quote_table_name ","result free ","indexes last lengths << ","indexes last lengths ","result each ","row []  != "," execute  free "," execute  each "]}," ActiveRecord ConnectionAdapters MysqlAdapter tables":{"type":"method","name":"tables","children":[],"call":["tables << ","field [] "," execute each "," execute ","result free ","result each ","(str \"SHOW TABLES\") compact join ","(str \"SHOW TABLES\") compact ","result collect ","sql << "," quote_table_name "," execute  free "," execute  each "," execute  collect "]}," ActiveRecord ConnectionAdapters MysqlAdapter quoted_false":{"type":"method","name":"quoted_false","children":[],"call":[]}," ActiveRecord ConnectionAdapters MysqlAdapter quoted_true":{"type":"method","name":"quoted_true","children":[],"call":[]}," ActiveRecord ConnectionAdapters MysqlColumn simplified_type":{"type":"method","name":"simplified_type","children":[],"call":["field_type downcase == ","field_type downcase ","MysqlAdapter  emulate_booleans ","field_type =~ ","field_type downcase index "]}," ActiveRecord ConnectionAdapters DB2Adapter native_database_types":{"type":"method","name":"native_database_types","children":[],"call":[]}," ActiveRecord ConnectionAdapters DB2Adapter add_limit_offset!":{"type":"method","name":"add_limit_offset!","children":[],"call":[" raise ","options [] nil? ! ","options [] nil? ","options [] ","sql << ","sql sub! ","sql =~ ","options [] == ","limit + ","sql gsub! ","options []  + "]}," ActiveRecord ConnectionAdapters SchemaStatements add_column_options!":{"type":"method","name":"add_column_options!","children":[],"call":["sql << "," quote ","options [] ","options [] nil? ","options [] == "," options_include_default? ","options has_key? "]}," ActiveRecord ConnectionAdapters SchemaStatements type_to_sql":{"type":"method","name":"type_to_sql","children":[],"call":["column_type_sql << ","native [] "," native_database_types [] "," native_database_types "," raise ","type == ","native is_a? ","type != ","(if\n  (send\n    (lvar :native) :is_a?\n    (const nil :Hash))\n  (send\n    (lvar :native) :[]\n    (sym :name))\n  (lvar :native)) dup ","type to_sym ","type to_s ","(irange\n  (int 0)\n  (int 6)) === ","(sym :datetime) include? ","native []  << ","(if\n  (send\n    (lvar :native) :is_a?\n    (const nil :Hash))\n  (send\n    (lvar :native) :[]\n    (sym :name))\n  (lvar :native)) dup  << ","column_type to_sym _sql << "," native_database_types []  [] ","  native_database_types [] _database_types [] "," native_database_type to_sym s [] ","  native_database_types [] _database_types "," native_database_type to_sym s ","type to_sym  == "," native_database_types []  is_a? ","type to_sym  != ","(if\n  (send\n    (lvar : native_database_types [] ) :is_a?\n    (const nil :Hash))\n  (send\n    (lvar : native_database_types [] ) :[]\n    (sym :name))\n  (lvar : native_database_types [] )) dup ","type to_sym  to_sym ","type to_sym  to_s "]}," ActiveRecord ConnectionAdapters SchemaStatements dump_schema_information":{"type":"method","name":"dump_schema_information","children":[],"call":["ActiveRecord Migrator  schema_info_table_name ","(lvasgn :current_schema\n  (send\n    (const\n      (const nil :ActiveRecord) :Migrator) :current_version)) > ","ActiveRecord Migrator  current_version "," quote_table_name ","(send\n  (lvar :migrated) :map) join ","migrated map "," select_values ","ActiveRecord Migrator  schema_migrations_table_name ","(send\n  (send\n    (const\n      (const nil :ActiveRecord) :SchemaMigration) :order\n    (str \"version\")) :map) join ","sm version ","ActiveRecord SchemaMigration  order map ","ActiveRecord SchemaMigration  order "," insert_versions_sql ","ActiveRecord SchemaMigration  order pluck ","sql << ","(send\n  (send\n    (send\n      (const\n        (const nil :ActiveRecord) :SchemaMigration) :order\n      (str \"version\")) :pluck\n    (sym :version)) :map) join ","ActiveRecord SchemaMigration  order pluck map ","versions any? ","ActiveRecord SchemaMigration  all_versions "," schema_migration all_versions "," schema_migration "," schema_migration versions ","(lvasgn :ActiveRecord Migrator  current_version \n  (send\n    (const\n      (const nil :ActiveRecord) :Migrator) :current_version)) > ","(send\n  (lvar : select_values ) :map) join "," select_values  map "," insert_ActiveRecord SchemaMigration  order pluck _sql "," insert_ActiveRecord SchemaMigration  all_versions _sql "," insert_ schema_migration all_versions _sql "," insert_ schema_migration versions _sql ","ActiveRecord SchemaMigration  order pluck  any? ","ActiveRecord SchemaMigration  all_versions  any? "," schema_migration all_versions  any? "," schema_migration versions  any? ","ActiveRecord SchemaMigration  all_ActiveRecord SchemaMigration  order pluck  ","ActiveRecord SchemaMigration  all_ActiveRecord SchemaMigration  all_versions  ","ActiveRecord SchemaMigration  all_ schema_migration all_versions  ","ActiveRecord SchemaMigration  all_ schema_migration versions  "," schema_migration all_ActiveRecord SchemaMigration  order pluck  "," schema_migration all_ActiveRecord SchemaMigration  all_versions  "," schema_migration all_ schema_migration all_versions  "," schema_migration all_ schema_migration versions  "," schema_migration ActiveRecord SchemaMigration  order pluck  "," schema_migration ActiveRecord SchemaMigration  all_versions  "," schema_migration  schema_migration all_versions  "," schema_migration  schema_migration versions  "]}," ActiveRecord ConnectionAdapters SchemaStatements initialize_schema_information":{"type":"method","name":"initialize_schema_information","children":[],"call":[" execute ","ActiveRecord Migrator  schema_info_table_name "," type_to_sql "," quote_table_name "]}," ActiveRecord ConnectionAdapters SchemaStatements structure_dump":{"type":"method","name":"structure_dump","children":[],"call":[]}," ActiveRecord ConnectionAdapters SchemaStatements remove_index":{"type":"method","name":"remove_index","children":[],"call":[" execute "," raise ","options [] ","Hash  === "," index_name "," quote_column_name "," remove_index! ","@logger warn "," index_exists? "," index_name_exists? "," quote_table_name "," index_name_for_remove "," index_exists? ! "," options []  ","  index_name  ","  index_name_for_remove  "," options [] _exists? ","  index_name _exists? ","  index_name_for_remove _exists? "," options [] _for_remove ","  index_name _for_remove ","  index_name_for_remove _for_remove "]}," ActiveRecord ConnectionAdapters SchemaStatements add_index":{"type":"method","name":"add_index","children":[],"call":[" execute "," Array join "," Array ","options [] ","Hash  === "," Array first "," quote_column_name ","(send\n  (lvar :column_names) :map) join ","column_names map "," index_name ","column_names first "," quote_table_name "," quoted_columns_for_index join "," quoted_columns_for_index ","@logger warn "," index_exists? "," index_name_length ","index_name length > ","index_name length ","options [] to_s "," index_name_exists? ","Array  wrap ","options []= ","options key? "," raise "," add_index_options "," schema_creation accept "," schema_creation ","CreateIndexDefinition  new "," build_create_index_definition ","(send\n  (lvar : Array ) :map) join ","(send\n  (lvar :Array  wrap ) :map) join "," Array  map ","Array  wrap  map ","  index_name  "," options [] to_s  "," Array  first ","Array  wrap  first ","  index_name _length "," options [] to_s _length "," index_name  length > ","options [] to_s  length > "," index_name  length ","options [] to_s  length ","  index_name _exists? "," options [] to_s _exists? "," build_CreateIndexDefinition  new _definition "," build_ build_create_index_definition _definition "]}," ActiveRecord ConnectionAdapters SchemaStatements rename_column":{"type":"method","name":"rename_column","children":[],"call":[" raise "]}," ActiveRecord ConnectionAdapters SchemaStatements change_column_default":{"type":"method","name":"change_column_default","children":[],"call":[" raise "]}," ActiveRecord ConnectionAdapters SchemaStatements change_column":{"type":"method","name":"change_column","children":[],"call":[" raise "]}," ActiveRecord ConnectionAdapters SchemaStatements remove_column":{"type":"method","name":"remove_column","children":[],"call":[" execute "," quote_column_name "," quote_table_name ","column_names flatten each ","column_names flatten "," raise ","ArgumentError  new ","column_names empty? "," columns_for_remove each "," columns_for_remove ","ActiveSupport Deprecation  warn "," caller ","Passing array to remove_columns is deprecated, please use  + ","column_names flatten! "," remove_column_for_alter "," column_exists? ! "," column_exists? ","options [] == ","options [] "]}," ActiveRecord ConnectionAdapters SchemaStatements add_column":{"type":"method","name":"add_column","children":[],"call":[" execute "," add_column_options! "," type_to_sql ","options [] "," quote_column_name "," quote_table_name "," schema_creation accept "," schema_creation ","at add_column "," create_alter_table "," column_exists? ","options [] == ","options []= ","options key? ! ","options key? ","type == "," supports_datetime_with_precision? "," build_add_column_definition "," schema_cre create_alter_table ion accept "," schema_cre create_alter_table ion "," create_alter_table  add_column "," cre create_alter_table e_alter_table "," supports_d create_alter_table etime_with_precision? "," build_ build_add_column_definition inition "]}," ActiveRecord ConnectionAdapters SchemaStatements drop_table":{"type":"method","name":"drop_table","children":[],"call":[" execute "," quote_table_name ","options [] "," schema_cache clear_data_source_cache! ","table_name to_s "," schema_cache "]}," ActiveRecord ConnectionAdapters SchemaStatements rename_table":{"type":"method","name":"rename_table","children":[],"call":[" raise "]}," ActiveRecord ConnectionAdapters SchemaStatements create_table":{"type":"method","name":"create_table","children":[],"call":[" execute ","create_sql << ","options [] ","table_definition to_sql "," drop_table ","table_definition primary_key ","options [] == ","TableDefinition  new "," quote_table_name ","Base  get_primary_key "," table_exists? "," block_given? ","table_name to_s singularize ","table_name to_s ","td to_sql ","td primary_key "," table_definition "," add_index ","td indexes each_pair ","td indexes "," schema_creation accept "," schema_creation ","options fetch "," create_table_definition ","options [] ! "," supports_indexes_in_create? ","options [] != "," add_foreign_key ","td foreign_keys each_pair ","td foreign_keys ","td foreign_keys each "," change_column_comment ","column comment ","column name ","td columns each ","td columns "," change_table_comment "," supports_comments_in_create? ! "," supports_comments_in_create? "," supports_comments? "," data_source_exists? ","td primary_keys ","pk is_a? ","column comment present? ","comment present? ","td indexes each ","options merge ","options [] presence ","options except ","td comment presence ","td comment ","td if_not_exists "," schema_cache clear_data_source_cache! "," schema_cache ","id fetch ","options merge! ","id except ","id is_a? ","td as ! ","td as "," extract_table_options! "," build_create_table_definition "," validate_table_length! "," validate_create_table_options! ","TableDefinition  new  to_sql ","TableDefinition  new  primary_key "," table_definition  to_sql "," create_table_definition  to_sql "," build_create_table_definition  to_sql "," table_definition  primary_key "," create_table_definition  primary_key "," build_create_table_definition  primary_key "," TableDefinition  new  "," table_definition  indexes each_pair "," create_table_definition  indexes each_pair "," build_create_table_definition  indexes each_pair "," table_definition  indexes "," create_table_definition  indexes "," build_create_table_definition  indexes "," create_TableDefinition  new  "," table_definition  foreign_keys each_pair "," create_table_definition  foreign_keys each_pair "," build_create_table_definition  foreign_keys each_pair "," table_definition  foreign_keys "," create_table_definition  foreign_keys "," build_create_table_definition  foreign_keys "," table_definition  foreign_keys each "," create_table_definition  foreign_keys each "," build_create_table_definition  foreign_keys each "," table_definition  columns each "," create_table_definition  columns each "," build_create_table_definition  columns each "," table_definition  columns "," create_table_definition  columns "," build_create_table_definition  columns "," change_options [] presence  "," change_td comment presence  "," table_definition  primary_keys "," create_table_definition  primary_keys "," build_create_table_definition  primary_keys "," table_definition  indexes each "," create_table_definition  indexes each "," build_create_table_definition  indexes each "," table_definition  comment presence "," create_table_definition  comment presence "," build_create_table_definition  comment presence "," table_definition  comment "," create_table_definition  comment "," build_create_table_definition  comment "," table_definition  if_not_exists "," create_table_definition  if_not_exists "," build_create_table_definition  if_not_exists ","id fetch  fetch ","id fetch  except ","id fetch  is_a? "," table_definition  as ! "," create_table_definition  as ! "," build_create_table_definition  as ! "," table_definition  as "," create_table_definition  as "," build_create_table_definition  as "," build_create_TableDefinition  new  "," valid fetch ate_table_length! "," valid fetch ate_create_table_options! "]}," ActiveRecord ConnectionAdapters SchemaStatements columns":{"type":"method","name":"columns","children":[],"call":[" raise "," new_column_from_field "," column_definitions map "," column_definitions ","table_name to_s ","definitions map "," column_ column_definitions  map "," column_ column_definitions  ","table_name to_s  to_s "," column_definitions  map "]}," ActiveRecord ConnectionAdapters SchemaStatements native_database_types":{"type":"method","name":"native_database_types","children":[],"call":[]}," ActiveRecord ConnectionAdapters TableDefinition []":{"type":"method","name":"[]","children":[],"call":["column name to_s == ","name to_s ","column name to_s ","column name ","@columns find ","@columns_hash [] "]}," ActiveRecord ConnectionAdapters ColumnDefinition add_column_options!":{"type":"method","name":"add_column_options!","children":[],"call":[" base add_column_options! ","options merge "," base "]}," ActiveRecord ConnectionAdapters ColumnDefinition type_to_sql":{"type":"method","name":"type_to_sql","children":[],"call":[" base type_to_sql "," base "]}," ActiveRecord ConnectionAdapters ColumnDefinition to_sql":{"type":"method","name":"to_sql","children":[],"call":[" add_column_options! "," default "," null "," type_to_sql "," limit "," type to_sym "," type "," name "," base quote_column_name "," base "," type to_sym == "," sql_type ","column_options []= "," default nil? "," null nil? "]}," ActiveRecord ConnectionAdapters Column type_cast_code":{"type":"method","name":"type_cast_code","children":[],"call":[" class name "," class "," type ","ActiveSupport Deprecation  warn "]}," ActiveRecord ConnectionAdapters Column number?":{"type":"method","name":"number?","children":[],"call":["(sym :float) include? "," type "," type == "]}," ActiveRecord ConnectionAdapters Column text?":{"type":"method","name":"text?","children":[],"call":["(sym :string) include? "," type "," type == "]}," ActiveRecord ConnectionAdapters Quoting quoted_date":{"type":"method","name":"quoted_date","children":[],"call":["value strftime ","value to_s ","(send\n  (lvar :value) :acts_like?\n  (sym :time)) to_s ","value send ","value respond_to? ","ActiveRecord Base  default_timezone == ","ActiveRecord Base  default_timezone ","value acts_like? "," sprintf ","value usec ","value usec > ","result << << ","result << ","value getlocal ","value getutc ","value utc? ! ","value utc? ","value to_formatted_s ","ActiveRecord  default_timezone == ","ActiveRecord  default_timezone ","value to_fs "," default_timezone == "," default_timezone ","value send  strftime ","value getlocal  strftime ","value getutc  strftime ","value send  to_s ","value getlocal  to_s ","value getutc  to_s ","(send\n  (lvar :value send ) :acts_like?\n  (sym :time)) to_s ","(send\n  (lvar :value getlocal ) :acts_like?\n  (sym :time)) to_s ","(send\n  (lvar :value getutc ) :acts_like?\n  (sym :time)) to_s ","value send  send ","value getlocal  send ","value getutc  send ","value send  respond_to? ","value getlocal  respond_to? ","value getutc  respond_to? ","value send  acts_like? ","value getlocal  acts_like? ","value getutc  acts_like? ","value send  usec ","value getlocal  usec ","value getutc  usec ","value send  usec > ","value getlocal  usec > ","value getutc  usec > ","value to_s  << << ","value to_formatted_s  << << ","value to_fs  << << ","value to_s  << ","value to_formatted_s  << ","value to_fs  << ","value send  getlocal ","value getlocal  getlocal ","value getutc  getlocal ","value send  getutc ","value getlocal  getutc ","value getutc  getutc ","value send  utc? ! ","value getlocal  utc? ! ","value getutc  utc? ! ","value send  utc? ","value getlocal  utc? ","value getutc  utc? ","value send  to_formatted_s ","value getlocal  to_formatted_s ","value getutc  to_formatted_s ","value send  to_fs ","value getlocal  to_fs ","value getutc  to_fs "]}," ActiveRecord ConnectionAdapters Quoting quoted_false":{"type":"method","name":"quoted_false","children":[],"call":["'f' freeze ","FALSE freeze "]}," ActiveRecord ConnectionAdapters Quoting quoted_true":{"type":"method","name":"quoted_true","children":[],"call":["'t' freeze ","TRUE freeze "]}," ActiveRecord ConnectionAdapters Quoting quote_column_name":{"type":"method","name":"quote_column_name","children":[],"call":["column_name to_s "]}," ActiveRecord ConnectionAdapters Quoting quote_string":{"type":"method","name":"quote_string","children":[],"call":["s gsub gsub ","s gsub ","'' freeze ","' freeze ","\\&\\& freeze ","\\ freeze "]}," ActiveRecord ConnectionAdapters Quoting quote":{"type":"method","name":"quote","children":[],"call":[" quote_string ","value to_yaml "," quoted_date ","value to_s "," quoted_false ","column type == ","column type "," quoted_true ","(sym :integer) include? ","column class string_to_binary ","column class ","column class respond_to? ","value to_f ","value to_i ","value quoted_id ","value respond_to? "," quoted_string_prefix ","value acts_like? ","YAML  dump ","value to_f to_s ","value to_i to_s ","column string_to_binary ","(sym :integer) include? ! ","BigDecimal  === ","(sym :text) include? "," quote ","column try == ","column try "," _quote ","column cast_type type_cast_for_database ","column cast_type "," type_cast_from_column ","ActiveSupport Deprecation  warn ","(str \"            Passing a column to `quote` has been deprecated. It is only used\\n\") squish "," id_value_for_database ","value is_a? ","owner == ","value class to_s ","value class ","value method owner to_s ","value method owner ","value method "," at %s:%d % ","value method source_location ","value value_for_database ","value id_for_database "," raise ","value class name "," quoted_time "," quoted_binary "," warn_quote_duration_deprecated ","value to_f  to_yaml ","value to_i  to_yaml ","value to_s  to_yaml ","column cast_type type_cast_for_database  to_yaml "," type_cast_from_column  to_yaml "," id_value_for_database  to_yaml ","value value_for_database  to_yaml ","value id_for_database  to_yaml "," quoted_dvalue method source_location e ","value to_f  to_s ","value to_i  to_s ","value to_s  to_s ","column cast_type type_cast_for_database  to_s "," type_cast_from_column  to_s "," id_value_for_database  to_s ","value value_for_database  to_s ","value id_for_database  to_s ","value to_f  to_f ","value to_i  to_f ","value to_s  to_f ","column cast_type type_cast_for_database  to_f "," type_cast_from_column  to_f "," id_value_for_database  to_f ","value value_for_database  to_f ","value id_for_database  to_f ","value to_f  to_i ","value to_i  to_i ","value to_s  to_i ","column cast_type type_cast_for_database  to_i "," type_cast_from_column  to_i "," id_value_for_database  to_i ","value value_for_database  to_i ","value id_for_database  to_i ","value to_f  quoted_id ","value to_i  quoted_id ","value to_s  quoted_id ","column cast_type type_cast_for_database  quoted_id "," type_cast_from_column  quoted_id "," id_value_for_database  quoted_id ","value value_for_database  quoted_id ","value id_for_database  quoted_id ","value to_f  respond_to? ","value to_i  respond_to? ","value to_s  respond_to? ","column cast_type type_cast_for_database  respond_to? "," type_cast_from_column  respond_to? "," id_value_for_database  respond_to? ","value value_for_database  respond_to? ","value id_for_database  respond_to? ","value to_f  acts_like? ","value to_i  acts_like? ","value to_s  acts_like? ","column cast_type type_cast_for_database  acts_like? "," type_cast_from_column  acts_like? "," id_value_for_database  acts_like? ","value value_for_database  acts_like? ","value id_for_database  acts_like? ","value to_f  to_f to_s ","value to_i  to_f to_s ","value to_s  to_f to_s ","column cast_type type_cast_for_database  to_f to_s "," type_cast_from_column  to_f to_s "," id_value_for_database  to_f to_s ","value value_for_database  to_f to_s ","value id_for_database  to_f to_s ","value to_f  to_i to_s ","value to_i  to_i to_s ","value to_s  to_i to_s ","column cast_type type_cast_for_database  to_i to_s "," type_cast_from_column  to_i to_s "," id_value_for_database  to_i to_s ","value value_for_database  to_i to_s ","value id_for_database  to_i to_s ","column cast_type type_cast_for_dvalue method source_location abase ","ActiveSupport Deprecvalue method source_location ion  warn ","(str \"            Passing a column to `quote` has been deprecvalue method source_location ed. It is only used\\n\") squish "," id_value to_f _for_database "," id_value to_i _for_database "," id_value to_s _for_database "," id_column cast_type type_cast_for_database _for_database "," id_ type_cast_from_column _for_database "," id_ id_value_for_database _for_database "," id_value value_for_database _for_database "," id_value id_for_database _for_database "," id_value_for_dvalue method source_location abase ","value to_f  is_a? ","value to_i  is_a? ","value to_s  is_a? ","column cast_type type_cast_for_database  is_a? "," type_cast_from_column  is_a? "," id_value_for_database  is_a? ","value value_for_database  is_a? ","value id_for_database  is_a? ","value method owner to_s  == ","value to_f  class to_s ","value to_i  class to_s ","value to_s  class to_s ","column cast_type type_cast_for_database  class to_s "," type_cast_from_column  class to_s "," id_value_for_database  class to_s ","value value_for_database  class to_s ","value id_for_database  class to_s ","value to_f  class ","value to_i  class ","value to_s  class ","column cast_type type_cast_for_database  class "," type_cast_from_column  class "," id_value_for_database  class ","value value_for_database  class ","value id_for_database  class ","value to_f  method owner to_s ","value to_i  method owner to_s ","value to_s  method owner to_s ","column cast_type type_cast_for_database  method owner to_s "," type_cast_from_column  method owner to_s "," id_value_for_database  method owner to_s ","value value_for_database  method owner to_s ","value id_for_database  method owner to_s ","value method value method owner to_s  to_s ","value to_f  method owner ","value to_i  method owner ","value to_s  method owner ","column cast_type type_cast_for_database  method owner "," type_cast_from_column  method owner "," id_value_for_database  method owner ","value value_for_database  method owner ","value id_for_database  method owner ","value method value method owner to_s  ","value to_f  method ","value to_i  method ","value to_s  method ","column cast_type type_cast_for_database  method "," type_cast_from_column  method "," id_value_for_database  method ","value value_for_database  method ","value id_for_database  method "," value method source_location  %s:%d % ","value to_f  method source_location ","value to_i  method source_location ","value to_s  method source_location ","column cast_type type_cast_for_database  method source_location "," type_cast_from_column  method source_location "," id_value_for_database  method source_location ","value value_for_database  method source_location ","value id_for_database  method source_location ","value method source_locvalue method source_location ion ","value to_f  value to_f _for_database ","value to_i  value to_i _for_database ","value to_s  value to_s _for_database ","column cast_type type_cast_for_database  column cast_type type_cast_for_database _for_database "," type_cast_from_column   type_cast_from_column _for_database "," id_value_for_database   id_value_for_database _for_database ","value value_for_database  value value_for_database _for_database ","value id_for_database  value id_for_database _for_database ","value value_for_dvalue method source_location abase ","value to_f  id_for_database ","value to_i  id_for_database ","value to_s  id_for_database ","column cast_type type_cast_for_database  id_for_database "," type_cast_from_column  id_for_database "," id_value_for_database  id_for_database ","value value_for_database  id_for_database ","value id_for_database  id_for_database ","value id_for_dvalue method source_location abase ","value to_f  class name ","value to_i  class name ","value to_s  class name ","column cast_type type_cast_for_database  class name "," type_cast_from_column  class name "," id_value_for_database  class name ","value value_for_database  class name ","value id_for_database  class name "," warn_quote_durvalue method source_location ion_deprecvalue method source_location ed "]}," ActiveRecord ConnectionAdapters DatabaseStatements reset_sequence!":{"type":"method","name":"reset_sequence!","children":[],"call":[]}," ActiveRecord ConnectionAdapters DatabaseStatements default_sequence_name":{"type":"method","name":"default_sequence_name","children":[],"call":[]}," ActiveRecord ConnectionAdapters DatabaseStatements add_limit_offset!":{"type":"method","name":"add_limit_offset!","children":[],"call":["sql << ","options [] ","offset to_i "," sanitize_limit ","options []  to_i "," sanitize_options []  "]}," ActiveRecord ConnectionAdapters DatabaseStatements add_limit!":{"type":"method","name":"add_limit!","children":[],"call":[" add_limit_offset! "]}," ActiveRecord ConnectionAdapters DatabaseStatements rollback_db_transaction":{"type":"method","name":"rollback_db_transaction","children":[],"call":[" exec_rollback_db_transaction "]}," ActiveRecord ConnectionAdapters DatabaseStatements commit_db_transaction":{"type":"method","name":"commit_db_transaction","children":[],"call":[]}," ActiveRecord ConnectionAdapters DatabaseStatements begin_db_transaction":{"type":"method","name":"begin_db_transaction","children":[],"call":[]}," ActiveRecord ConnectionAdapters DatabaseStatements transaction":{"type":"method","name":"transaction","children":[],"call":[" commit_db_transaction "," raise "," rollback_db_transaction "," begin_db_transaction "," block_given? ","database_transaction_rollback is_a? "," rollback_to_savepoint "," open_transactions == "," open_transactions "," release_savepoint "," decrement_open_transactions "," outside_transaction? "," outside_transaction? ! "," increment_open_transactions "," create_savepoint ","last_transaction_joinable ! ","options [] ","options has_key? ","options assert_valid_keys "," rollback_transaction_records ","@_current_transaction_records last concat ","@_current_transaction_records last ","@_current_transaction_records push ","@_current_transaction_records empty? ","save_point_records blank? ","@_current_transaction_records pop "," commit_transaction_records "," within_new_transaction "," current_transaction joinable? "," current_transaction ","options [] ! "," transaction_manager within_new_transaction "," transaction_manager ","requires_new ! ","@_current_transaction_records pop  blank? "]}," ActiveRecord ConnectionAdapters DatabaseStatements delete":{"type":"method","name":"delete","children":[],"call":[" delete_sql "," exec_delete "," to_sql "," to_sql_and_binds "]}," ActiveRecord ConnectionAdapters DatabaseStatements update":{"type":"method","name":"update","children":[],"call":[" update_sql "," exec_update "," to_sql "," to_sql_and_binds "]}," ActiveRecord ConnectionAdapters DatabaseStatements insert":{"type":"method","name":"insert","children":[],"call":[" insert_sql "," last_inserted_id "," exec_insert "," sql_for_insert "," to_sql "," to_sql_and_binds "," returning_column_values ","returning nil? "," returning_column_ exec_insert s "]}," ActiveRecord ConnectionAdapters DatabaseStatements execute":{"type":"method","name":"execute","children":[],"call":[" raise "," internal_execute "]}," ActiveRecord ConnectionAdapters DatabaseStatements select_values":{"type":"method","name":"select_values","children":[],"call":["v values first ","v values ","result map "," select_all ","v [] "," select_rows "," to_sql "," select_rows map "," binds_from_relation ","arel bind_values ","arel arel ","arel is_a? "," select_all  map "," select_rows  map "]}," ActiveRecord ConnectionAdapters DatabaseStatements select_value":{"type":"method","name":"select_value","children":[],"call":["result values first ","result values ","result nil? "," select_one ","result first "," select_rows first "," select_rows "," to_sql "," binds_from_relation "," single_value_from_rows "," select_rows then "," select_one  values first "," select_rows first  values first "," select_one  values "," select_rows first  values "," select_one  nil? "," select_rows first  nil? "," select_one  first "," select_rows first  first "]}," ActiveRecord ConnectionAdapters DatabaseStatements select_one":{"type":"method","name":"select_one","children":[],"call":["result first "," select_all "," select_all first "," select_all then "," select_all  first "]}," ActiveRecord ConnectionAdapters DatabaseStatements select_all":{"type":"method","name":"select_all","children":[],"call":[" select "," to_sql "," quote ","binds shift reverse ","binds shift ","sql gsub ","binds dup ","binds empty? "," supports_statement_cache? "," binds_from_relation ","relation bind_values ","binds ! ","relation arel ","arel is_a? "," select_prepared "," prepared_statements "," visitor preparable "," visitor ","preparable nil? "," prepared_statements ! "," to_sql_and_binds "," arel_from_relation "," unprepared_statement ","binds length > "," bind_params_length ","binds length ","ActiveRecord Result  new ","ActiveRecord Result  empty "," to_ to_sql  ","binds dup  shift reverse ","relation bind_values  shift reverse ","binds dup  shift ","relation bind_values  shift "," to_sql  gsub ","binds dup  dup ","relation bind_values  dup ","binds dup  empty? ","relation bind_values  empty? "," binds dup _from_relation "," relation bind_values _from_relation ","binds dup  ! ","relation bind_values  ! ","relation relation arel  ","relation  arel_from_relation  ","relation arel  is_a? "," arel_from_relation  is_a? "," visitor  visitor preparable  "," visitor preparable  nil? "," to_sql_and_binds dup  "," to_sql_and_relation bind_values  "," to_ to_sql _and_binds "," relation arel _from_relation ","  arel_from_relation _from_relation ","binds dup  length > ","relation bind_values  length > ","binds dup  length ","relation bind_values  length "]}," ActiveRecord Associations ClassMethods condition_word":{"type":"method","name":"condition_word","children":[],"call":["sql =~ "]}," ActiveRecord Associations ClassMethods include_eager_conditions?":{"type":"method","name":"include_eager_conditions?","children":[],"call":["condition_table_name != "," table_name ","options [] scan flatten any? ","options [] scan flatten ","options [] scan ","options [] ","conditions scan flatten any? ","conditions scan flatten ","conditions scan ","conditions first ","conditions is_a? "," scope ","conditions join scan flatten any? ","conditions join scan flatten ","conditions join scan ","conditions join ","conditions any? ","all << ","cond first ","(send nil :scope\n  (sym :find)\n  (sym :conditions)) inject ","(send\n  (begin\n    (or\n      (lvar :tables)\n      (send nil :conditions_tables\n        (lvar :options)))) :-\n  (array\n    (send nil :table_name))) any? ","(or\n  (lvar :tables)\n  (send nil :conditions_tables\n    (lvar :options))) - "," conditions_tables ","(send\n  (begin\n    (or\n      (lvar :tables)\n      (send nil :conditions_tables\n        (lvar :options)))) :-\n  (begin\n    (or\n      (lvar :joined_tables)\n      (send nil :joined_tables\n        (lvar :options))))) any? "," joined_tables ","conditions first  scan flatten any? ","options []  scan flatten any? ","conditions first  scan flatten ","options []  scan flatten ","conditions first  scan ","options []  scan ","conditions first  first ","options []  first ","conditions first  is_a? ","options []  is_a? ","conditions first  join scan flatten any? ","options []  join scan flatten any? ","conditions first  join scan flatten ","options []  join scan flatten ","conditions first  join scan ","options []  join scan ","conditions first  join ","options []  join ","conditions first  any? ","options []  any? ","(send nil :scope\n  (sym :find)\n  (sym :conditions first )) inject ","(send nil :scope\n  (sym :find)\n  (sym :options [] )) inject ","(send\n  (begin\n    (or\n      (lvar :tables)\n      (send nil :conditions first _tables\n        (lvar :options)))) :-\n  (array\n    (send nil :table_name))) any? ","(send\n  (begin\n    (or\n      (lvar :tables)\n      (send nil :options [] _tables\n        (lvar :options)))) :-\n  (array\n    (send nil :table_name))) any? ","(or\n  (lvar :tables)\n  (send nil :conditions first _tables\n    (lvar :options))) - ","(or\n  (lvar :tables)\n  (send nil :options [] _tables\n    (lvar :options))) - "," conditions first _tables "," options [] _tables ","(send\n  (begin\n    (or\n      (lvar :tables)\n      (send nil :conditions first _tables\n        (lvar :options)))) :-\n  (begin\n    (or\n      (lvar :joined_tables)\n      (send nil :joined_tables\n        (lvar :options))))) any? ","(send\n  (begin\n    (or\n      (lvar :tables)\n      (send nil :options [] _tables\n        (lvar :options)))) :-\n  (begin\n    (or\n      (lvar :joined_tables)\n      (send nil :joined_tables\n        (lvar :options))))) any? "]}," ActiveRecord Associations ClassMethods construct_finder_sql_for_association_limiting":{"type":"method","name":"construct_finder_sql_for_association_limiting","children":[],"call":[" sanitize_sql "," add_limit! ","sql << ","options [] "," add_conditions! "," table_name "," primary_key "," raise "," include_eager_conditions? "," add_joins! ","(send\n  (send\n    (lvar :join_dependency) :join_associations) :collect) join ","join association_join ","join_dependency join_associations collect ","join_dependency join_associations "," include_eager_order? "," scope ","(send\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :order)) :split\n    (str \",\")) :collect) * ","s split first ","s split ","options [] split collect ","options [] split "," connection add_order_by_for_association_limiting! "," connection ","join_dependency join_associations collect join "," connection distinct "," add_order! "," add_group! "," connection quote_table_name ","options [] blank? ! ","options [] blank? ","distinct_join_associations collect join ","distinct_join_associations collect ","(send\n  (send\n    (lvar :all_tables) :uniq) :map) flatten compact uniq ","(send\n  (send\n    (lvar :all_tables) :uniq) :map) flatten compact ","(send\n  (send\n    (lvar :all_tables) :uniq) :map) flatten ","join_dependency joins_for_table_name ","all_tables uniq map ","all_tables uniq ","tables_from_conditions + "," order_tables "," conditions_tables ","scope [] ","(send\n  (lvar :distinct_join_associations) :collect) join ","assoc association_join "," include_eager_options [] ? ","  scope  ","(send\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :options [] )) :split\n    (str \",\")) :collect) * "," connection add_options [] _by_for_association_limiting! "," add_options [] ! ","(send\n  (send\n    (lvar :all_tables) :uniq) :map) flatten compact uniq  collect join ","(send\n  (send\n    (lvar :all_tables) :uniq) :map) flatten compact uniq  collect ","(send\n  (send\n    (lvar :tables_from_conditions + ) :uniq) :map) flatten compact uniq ","(send\n  (send\n    (lvar :tables_from_conditions + ) :uniq) :map) flatten compact ","(send\n  (send\n    (lvar :tables_from_conditions + ) :uniq) :map) flatten ","tables_from_conditions +  uniq map ","tables_from_conditions +  uniq "," conditions_tables  + "," options [] _tables "," scope  [] ","(send\n  (lvar :(send\n  (send\n    (lvar :all_tables) :uniq) :map) flatten compact uniq ) :collect) join "]}," ActiveRecord Associations ClassMethods select_limited_ids_list":{"type":"method","name":"select_limited_ids_list","children":[],"call":["(send\n  (send\n    (send nil :connection) :select_values\n    (send nil :construct_finder_sql_for_association_limiting\n      (lvar :options))\n    (dstr\n      (begin\n        (send nil :name))\n      (str \" Load IDs For Limited Eager Loading\"))) :collect) join "," connection select_values collect "," connection select_values "," name "," construct_finder_sql_for_association_limiting "," connection "," connection quote ","(send\n  (send\n    (send nil :connection) :select_values\n    (send nil :construct_finder_sql_for_association_limiting\n      (lvar :options)\n      (lvar :join_dependency))\n    (dstr\n      (begin\n        (send nil :name))\n      (str \" Load IDs For Limited Eager Loading\"))) :collect) join ","(send\n  (send\n    (send nil :connection) :select_all\n    (send nil :construct_finder_sql_for_association_limiting\n      (lvar :options)\n      (lvar :join_dependency))\n    (dstr\n      (begin\n        (send nil :name))\n      (str \" Load IDs For Limited Eager Loading\"))) :collect) join ","row [] "," primary_key "," connection select_all collect "," connection select_all "," columns_hash [] "," columns_hash "]}," ActiveRecord Associations ClassMethods add_limited_ids_condition!":{"type":"method","name":"add_limited_ids_condition!","children":[],"call":["sql << "," primary_key "," table_name "," condition_word ","(lvasgn :id_list\n  (send nil :select_limited_ids_list\n    (lvar :options))) empty? "," select_limited_ids_list ","(lvasgn :id_list\n  (send nil :select_limited_ids_list\n    (lvar :options)\n    (lvar :join_dependency))) empty? "," throw "," connection quote_table_name "," connection ","(lvasgn : select_limited_ids_list \n  (send nil :select_limited_ids_list\n    (lvar :options))) empty? ","(lvasgn : select_limited_ids_list \n  (send nil :select_limited_ids_list\n    (lvar :options)\n    (lvar :join_dependency))) empty? "]}," ActiveRecord Associations BelongsToAssociation updated?":{"type":"method","name":"updated?","children":[],"call":[]}," ActiveRecord Associations BelongsToAssociation initialize":{"type":"method","name":"initialize","children":[],"call":[" construct_sql "]}," ActiveRecord Associations AssociationCollection clear":{"type":"method","name":"clear","children":[],"call":[" delete_all "," destroy_all ","@options [] "," empty? "," length zero? "," length ","@reflection options [] == ","@reflection options [] ","@reflection options "]}," ActiveRecord Associations AssociationCollection delete_all":{"type":"method","name":"delete_all","children":[],"call":[" delete "," load_target "," reset_target! "," reset_named_scopes_cache! "]}," ActiveRecord Migrator assert_unique_migration_version":{"type":"method","name":"assert_unique_migration_version","children":[],"call":[" raise ","DuplicateMigrationVersionError  new ","migrations transpose first include? ","migrations transpose first ","migrations transpose ","migrations empty? ! ","migrations empty? ","m version == ","m version ","migrations find "]}," ActiveRecord DuplicateMigrationVersionError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerAdapter type_to_sql":{"type":"method","name":"type_to_sql","children":[],"call":["column_type_sql << ","native [] "," native_database_types [] "," native_database_types ","limit < ","limit == ","limit nil? ","type to_s == ","type to_s ","native []  << "," native_database_types []  [] ","  native_database_types [] _database_types [] ","  native_database_types [] _database_types "]}," ActiveRecord ConnectionAdapters SQLServerAdapter remove_index":{"type":"method","name":"remove_index","children":[],"call":[" execute "," index_name "," quote_column_name "]}," ActiveRecord ConnectionAdapters SQLServerAdapter remove_default_constraint":{"type":"method","name":"remove_default_constraint","children":[],"call":[" execute ","constraint [] ","defaults each "," select ","constraints each "," select  each "]}," ActiveRecord ConnectionAdapters SQLServerAdapter remove_column":{"type":"method","name":"remove_column","children":[],"call":[" execute "," remove_default_constraint "," remove_check_constraints "]}," ActiveRecord ConnectionAdapters SQLServerAdapter change_column":{"type":"method","name":"change_column","children":[],"call":[" execute ","sql_commands each ","sql_commands << ","options [] "," remove_default_constraint "," type_to_sql "," quote "," options_include_default? "]}," ActiveRecord ConnectionAdapters SQLServerAdapter rename_column":{"type":"method","name":"rename_column","children":[],"call":[" execute "]}," ActiveRecord ConnectionAdapters SQLServerAdapter rename_table":{"type":"method","name":"rename_table","children":[],"call":[" execute "]}," ActiveRecord ConnectionAdapters SQLServerAdapter indexes":{"type":"method","name":"indexes","children":[],"call":["indexes << ","IndexDefinition  new ","index [] split ","index [] ","primary ! ","index [] =~ "," execute each "," execute ","ActiveRecord Base  connection instance_variable_get []= ","ActiveRecord Base  connection instance_variable_get ","ActiveRecord Base  connection ","sth each ","index [] =~  ! "]}," ActiveRecord ConnectionAdapters SQLServerAdapter tables":{"type":"method","name":"tables","children":[],"call":["tables << ","table_name == ","field [] "," execute inject "," execute ","sth inject ","field []  == "]}," ActiveRecord ConnectionAdapters SQLServerAdapter supports_migrations?":{"type":"method","name":"supports_migrations?","children":[],"call":[]}," ActiveRecord ConnectionAdapters DB2Adapter quoted_false":{"type":"method","name":"quoted_false","children":[],"call":[]}," ActiveRecord ConnectionAdapters DB2Adapter quoted_true":{"type":"method","name":"quoted_true","children":[],"call":[]}," ActiveRecord ConnectionAdapters DB2Adapter tables":{"type":"method","name":"tables","children":[],"call":["stmt free ","result << ","t [] downcase ","t [] ","stmt tables each ","stmt tables ","DB2 Statement  new "," with_statement ","@connection_options [] ","DB2 Statement  new  free ","DB2 Statement  new  tables each ","DB2 Statement  new  tables "]}," ActiveRecord ConnectionAdapters SchemaStatements index_name":{"type":"method","name":"index_name","children":[],"call":[" raise ","options [] ","Hash  === "," index_name "," Array * "," Array ","Array  wrap * ","Array  wrap "," index_name_options "," generate_index_name "]}," ActiveRecord Associations ClassMethods create_extension_module":{"type":"method","name":"create_extension_module","children":[],"call":["extension_module_name constantize ","Object  const_set ","Module  new "," silence_warnings ","association_id to_s camelize ","association_id to_s "," to_s "]}," ActiveRecord Associations HasManyAssociation method_missing":{"type":"method","name":"method_missing","children":[],"call":["@association_class send ","@association_class with_scope ","@owner id ","Class  respond_to? ","@association_class respond_to? ! ","@association_class respond_to? ","@target respond_to? ","@reflection klass send ","@reflection klass ","@reflection klass with_scope ","@reflection primary_key_name ","@reflection klass respond_to? ! ","@reflection klass respond_to? "," set_belongs_to_association_for "]}," ActiveRecord Associations HasAndBelongsToManyAssociation method_missing":{"type":"method","name":"method_missing","children":[],"call":["@association_class send ","@association_class with_scope ","Class  respond_to? ","@association_class respond_to? ! ","@association_class respond_to? ","@target respond_to? ","@reflection klass send ","@reflection klass ","@reflection klass with_scope ","@reflection klass respond_to? ! ","@reflection klass respond_to? "]}," finalizer":{"type":"method","name":"finalizer","children":[],"call":["net write ","Mysql COM_QUIT  chr ","net clear "," proc ","net close "]}," Mysql scramble41":{"type":"method","name":"scramble41","children":[],"call":["0 chr ","buf pack ","buf push ","s1 [] ^ ","x [] ","s1 [] ","(irange\n  (int 0)\n  (send\n    (send\n      (lvar :s1) :length) :-\n    (int 1))) each ","s1 length - ","s1 length ","Digest SHA1  new digest ","Digest SHA1  new ","message + ","password length != ","password length ","password empty? ","password nil? ","Digest SHA1  digest ","Digest SHA1  new digest  [] ^ ","Digest SHA1  digest  [] ^ ","Digest SHA1  new digest  [] ","Digest SHA1  digest  [] ","(irange\n  (int 0)\n  (send\n    (send\n      (lvar :Digest SHA1  new digest ) :length) :-\n    (int 1))) each ","(irange\n  (int 0)\n  (send\n    (send\n      (lvar :Digest SHA1  digest ) :length) :-\n    (int 1))) each ","Digest SHA1  new digest  length - ","Digest SHA1  digest  length - ","Digest SHA1  new digest  length ","Digest SHA1  digest  length "]}," ActiveRecord ConnectionAdapters SQLServerAdapter reconnect!":{"type":"method","name":"reconnect!","children":[],"call":["@logger warn ","e message "," adapter_name ","DBI  connect ","@connection disconnect "," disconnect! ","DBI  connect  disconnect "]}," ActiveRecord ConnectionAdapters SQLServerAdapter active?":{"type":"method","name":"active?","children":[],"call":["@connection execute ","@connection execute finish "]}," ActiveRecord ConnectionAdapters SQLServerAdapter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter configure_connection":{"type":"method","name":"configure_connection","children":[],"call":[" execute ","@config [] "," schema_search_path= "," client_min_messages= ","@connection set_client_encoding ","@connection respond_to? "," set_standard_conforming_strings ","ActiveRecord Base  default_timezone == ","ActiveRecord Base  default_timezone "," quote ","k to_s ","v nil? ! ","v nil? ","v == ","variables map ","variables []= ","variables [] ","@config fetch stringify_keys ","@config fetch ","ActiveRecord  default_timezone == ","ActiveRecord  default_timezone "," reload_type_map "," add_pg_decoders "," add_pg_encoders "," internal_execute ","@notice_receiver_sql_warnings << ","SQLWarning  new ","result error_field ","@raw_connection set_notice_receiver ","ActiveRecord  db_warnings_action nil? ","ActiveRecord  db_warnings_action ","@raw_connection set_client_encoding "," client_min_result error_field s= ","@config fetch stringify_keys  map ","@config fetch stringify_keys  []= ","@config fetch stringify_keys  [] "," add_pg_deresult error_field rs "," add_pg_enresult error_field rs "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter reconnect!":{"type":"method","name":"reconnect!","children":[],"call":[" configure_connection ","@connection reset ","@connection respond_to? "," connect "," disconnect! "," clear_cache! ","@lock synchronize "," reload_type_map "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter active?":{"type":"method","name":"active?","children":[],"call":["@connection query ","@connection status == ","@connection status ","@connection respond_to? ","@connection connect_poll != ","@connection connect_poll ","@lock synchronize ","@raw_connection query "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter initialize":{"type":"method","name":"initialize","children":[],"call":[" configure_connection ","config [] "," connect "," execute first [] "," execute first "," execute "," raise "," postgresql_version "," postgresql_version < ","StatementPool  new ","config fetch ","connection_parameters delete ","Arel Visitors PostgreSQL  new ","BindSubstitution  new "," class type_cast_config_to_boolean ","@config [] "," class ","@config key? "," initialize_type_map "," class type_cast_config_to_integer "," unprepared_visitor "," type_map ","OID TypeMap  new ","Type HashLookupTypeMap  new "," add_pg_decoders "," add_pg_encoders ","@visitor extend ","conn_params slice! ","PG Connection  conndefaults_hash keys + ","PG Connection  conndefaults_hash keys ","PG Connection  conndefaults_hash ","conn_params []= ","conn_params delete ","conn_params [] ","@config compact ","Arel Visitors PostgreSQL  new  extend ","BindSubstitution  new  extend "," unprepared_visitor  extend ","@config compact  slice! ","@config compact  []= ","@config compact  delete ","@config compact  [] "]}," ActiveRecord ConnectionAdapters MysqlAdapter connect":{"type":"method","name":"connect","children":[],"call":[" execute ","@connection real_connect "," raise ","@connection options ","@config [] ","@connection ssl_set "," configure_connection ","@connection reconnect= ","@connection respond_to? ","@config [] ! ! ","@config [] ! "]}," ActiveRecord ConnectionAdapters MysqlAdapter reconnect!":{"type":"method","name":"reconnect!","children":[],"call":[" connect ","@connection close "," disconnect! "," clear_cache! "]}," ActiveRecord ConnectionAdapters MysqlAdapter active?":{"type":"method","name":"active?","children":[],"call":["@connection errno zero? ","@connection errno ","@connection respond_to? ","@connection query ","@connection stat "]}," ActiveRecord ConnectionAdapters MysqlAdapter quote":{"type":"method","name":"quote","children":[],"call":["column class string_to_binary unpack [] ","column class string_to_binary unpack ","column class string_to_binary ","column class ","column type == ","column type ","value kind_of? ","column class respond_to? ","value to_s ","column clacolumn class string_to_binary unpack [] column class string_to_binary unpack []  column class string_to_binary unpack [] tring_to_binary unpack [] ","column clacolumn class string_to_binary unpack [] column class string_to_binary unpack []  column class string_to_binary unpack [] tring_to_binary unpack ","column clacolumn class string_to_binary unpack [] column class string_to_binary unpack []  column class string_to_binary unpack [] tring_to_binary ","column clacolumn class string_to_binary unpack [] column class string_to_binary unpack []  ","column clacolumn class string_to_binary unpack [] column class string_to_binary unpack []  recolumn class string_to_binary unpack [] pond_to? ","value to_column class string_to_binary unpack []  "]}," ActiveRecord ConnectionAdapters FirebirdAdapter ar_to_fb_case":{"type":"method","name":"ar_to_fb_case","children":[],"call":["column_name upcase ","column_name =~ "]}," ActiveRecord ConnectionAdapters FirebirdAdapter fb_to_ar_case":{"type":"method","name":"fb_to_ar_case","children":[],"call":["column_name downcase ","column_name =~ "]}," ActiveRecord ConnectionAdapters FirebirdAdapter select":{"type":"method","name":"select","children":[],"call":["hashed_row []= "," fb_to_ar_case ","value to_s ","FireRuby Blob  === ","row each "," execute collect "," execute ","value to_s  to_s "]}," ActiveRecord ConnectionAdapters FirebirdAdapter columns":{"type":"method","name":"columns","children":[],"call":["FirebirdColumn  new ","value to_s ","value rstrip ","field values collect ","field values "," execute collect "," execute ","table_name to_s upcase ","table_name to_s "]}," ActiveRecord ConnectionAdapters FirebirdAdapter next_sequence_value":{"type":"method","name":"next_sequence_value","children":[],"call":["FireRuby Generator  new next ","FireRuby Generator  new "]}," ActiveRecord ConnectionAdapters FirebirdAdapter add_limit_offset!":{"type":"method","name":"add_limit_offset!","children":[],"call":["sql sub! ","\\& + + ","\\& + ","limit_string << ","options [] "]}," ActiveRecord ConnectionAdapters FirebirdAdapter rollback_db_transaction":{"type":"method","name":"rollback_db_transaction","children":[],"call":["@transaction rollback "]}," ActiveRecord ConnectionAdapters FirebirdAdapter commit_db_transaction":{"type":"method","name":"commit_db_transaction","children":[],"call":["@transaction commit "]}," ActiveRecord ConnectionAdapters FirebirdAdapter begin_db_transaction":{"type":"method","name":"begin_db_transaction","children":[],"call":["@connection start_transaction "]}," ActiveRecord ConnectionAdapters FirebirdAdapter insert":{"type":"method","name":"insert","children":[],"call":[" execute "]}," ActiveRecord ConnectionAdapters FirebirdAdapter execute":{"type":"method","name":"execute","children":[],"call":["@connection execute_immediate ","@connection execute "," log "]}," ActiveRecord ConnectionAdapters FirebirdAdapter select_one":{"type":"method","name":"select_one","children":[],"call":["result first ","result nil? "," select "," select first "," select  first "," select  nil? "]}," ActiveRecord ConnectionAdapters FirebirdAdapter select_all":{"type":"method","name":"select_all","children":[],"call":[" select "]}," ActiveRecord ConnectionAdapters FirebirdAdapter reconnect!":{"type":"method","name":"reconnect!","children":[],"call":["@connection database connect ","@connection database ","@connection close "," disconnect! ","@connection database connect  database connect ","@connection database connect  database ","@connection database connect  close "]}," ActiveRecord ConnectionAdapters FirebirdAdapter active?":{"type":"method","name":"active?","children":[],"call":["@connection closed? ! ","@connection closed? "]}," ActiveRecord ConnectionAdapters FirebirdAdapter quoted_false":{"type":"method","name":"quoted_false","children":[],"call":[" quote "," boolean_domain [] "," boolean_domain "]}," ActiveRecord ConnectionAdapters FirebirdAdapter quoted_true":{"type":"method","name":"quoted_true","children":[],"call":[" quote "," boolean_domain [] "," boolean_domain "]}," ActiveRecord ConnectionAdapters FirebirdAdapter quote_column_name":{"type":"method","name":"quote_column_name","children":[],"call":[" ar_to_fb_case ","column_name to_s "]}," ActiveRecord ConnectionAdapters FirebirdAdapter quote_string":{"type":"method","name":"quote_string","children":[],"call":["string gsub "]}," ActiveRecord ConnectionAdapters FirebirdAdapter quote":{"type":"method","name":"quote","children":[],"call":["value strftime ","(const nil :Time) include? ","value class "]}," ActiveRecord ConnectionAdapters FirebirdAdapter default_sequence_name":{"type":"method","name":"default_sequence_name","children":[],"call":[]}," ActiveRecord ConnectionAdapters FirebirdAdapter prefetch_primary_key?":{"type":"method","name":"prefetch_primary_key?","children":[],"call":[]}," ActiveRecord ConnectionAdapters FirebirdAdapter adapter_name":{"type":"method","name":"adapter_name","children":[],"call":[]}," ActiveRecord ConnectionAdapters FirebirdAdapter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters FirebirdColumn simplified_type":{"type":"method","name":"simplified_type","children":[],"call":["field_type == "]}," ActiveRecord ConnectionAdapters FirebirdColumn column_def":{"type":"method","name":"column_def","children":[],"call":["@scale abs "]}," ActiveRecord ConnectionAdapters FirebirdColumn parse_default":{"type":"method","name":"parse_default","children":[],"call":["1 upcase == ","1 upcase ","default_source =~ "]}," ActiveRecord ConnectionAdapters FirebirdColumn type_cast":{"type":"method","name":"type_cast","children":[],"call":["value == ","ActiveRecord ConnectionAdapters FirebirdAdapter  boolean_domain [] ","ActiveRecord ConnectionAdapters FirebirdAdapter  boolean_domain "," type == "," type "]}," ActiveRecord ConnectionAdapters FirebirdColumn default":{"type":"method","name":"default","children":[],"call":[" raise "," type_cast ","connection execute to_a first [] ","connection execute to_a first ","connection execute to_a ","connection execute ","conn adapter_name == ","conn adapter_name ","ActiveRecord Base  active_connections values detect ","ActiveRecord Base  active_connections values ","ActiveRecord Base  active_connections "," column_def "," decide_default "]}," ActiveRecord ConnectionAdapters FirebirdColumn type":{"type":"method","name":"type","children":[],"call":["@sub_type == ","@type == ","@domain =~ "]}," ActiveRecord ConnectionAdapters FirebirdColumn initialize":{"type":"method","name":"initialize","children":[],"call":["type == "," parse_default ","null_flag ! ","name downcase ","FireRuby SQLType  to_base_type to_s ","FireRuby SQLType  to_base_type ","scale abs "," decide_limit "]}," ActiveRecord firebird_connection":{"type":"method","name":"firebird_connection","children":[],"call":["ConnectionAdapters FirebirdAdapter  new "," logger ","db connect ","FireRuby Database  new_from_params ","config values_at ","config [] "," raise ","config has_key? ","config symbolize_keys ","The Firebird adapter requires FireRuby version 0.4.0 or greater; you appear  << "," require_library_or_gem ","FireRuby Database  new_from_config ","config symbolize_keys! ","FireRuby Database  new_from_params  connect ","FireRuby Database  new_from_config  connect ","config symbolize_keys  values_at ","config symbolize_keys  [] ","config symbolize_keys  has_key? ","config symbolize_keys  symbolize_keys ","FireRuby Database  new_from_config symbolize_keys  ","config symbolize_keys  symbolize_keys! "]}," FireRuby Database new_from_params":{"type":"method","name":"new_from_params","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter reconnect!":{"type":"method","name":"reconnect!","children":[],"call":[" reset_transaction "," clear_cache! "," raise "," backoff "," connection_retries - "," connection_retries "," retryable_connection_error? ","retries_available > ","retry_deadline_exceeded ! ","deadline < ","Process  clock_gettime "," translate_exception_class "," configure_connection "," enable_lazy_transactions! "," reconnect ","@lock synchronize ","Process  clock_gettime + "," retry_deadline "," connection_retries  > "]}," ActiveRecord ConnectionAdapters AbstractAdapter active?":{"type":"method","name":"active?","children":[],"call":["@active != "]}," ActiveRecord ConnectionAdapters AbstractAdapter prefetch_primary_key?":{"type":"method","name":"prefetch_primary_key?","children":[],"call":[]}," ActiveRecord ConnectionAdapters Column value_to_boolean":{"type":"method","name":"value_to_boolean","children":[],"call":["(str \"true\") include? ","value to_s downcase ","value to_s ","value == ","TRUE_VALUES  include? ","value blank? ","value is_a? ","value empty? "]}," ActiveRecord Base connection":{"type":"method","name":"connection","children":[],"call":[" class connection "," class "," active_connections []= "," active_connections "," retrieve_connection "," active_connections [] "," class  retrieve_connection ection "," class  active_connections [] ection "," active_ retrieve_connection ections []= "," active_ active_connections [] ections []= "," active_ retrieve_connection ections "," active_ active_connections [] ections "," retrieve_ retrieve_connection ection "," retrieve_ active_connections [] ection "," active_ retrieve_connection ections [] "," active_ active_connections [] ections [] "]}," ActiveRecord Base clear_connection_cache!":{"type":"method","name":"clear_connection_cache!","children":[],"call":[]}," ActiveRecord Aggregations clear_aggregation_cache":{"type":"method","name":"clear_aggregation_cache","children":[],"call":[" instance_variable_set ","assoc name "," class reflect_on_all_aggregations to_a each "," class reflect_on_all_aggregations to_a "," class reflect_on_all_aggregations "," class "," new_record? "," persisted? ","@aggregation_cache clear "]}," DB2 Statement indexes":{"type":"method","name":"indexes","children":[],"call":[" fetch_all "," check_rc "," SQLStatistics ","table_name upcase ","schema_name upcase "]}," ActiveRecord Reflection AssociationReflection check_validity!":{"type":"method","name":"check_validity!","children":[],"call":[" raise ","HasManyThroughAssociationPolymorphicError  new "," source_reflection "," class_name "," source_reflection options [] "," source_reflection options ","HasManyThroughSourceAssociationNotFoundError  new "," source_reflection nil? ","HasManyThroughAssociationNotFoundError  new "," through_reflection nil? "," through_reflection "," options [] "," options ","HasManyThroughSourceAssociationMacroError  new "," source_reflection options [] nil? ","(sym :belongs_to) include? "," source_reflection macro "," active_record name "," active_record "," options [] nil? ","HasManyThroughAssociationPointlessSourceTypeError  new "," check_validity_of_inverse! ","HasAndBelongsToManyAssociationForeignKeyNeeded  new "," association_foreign_key == "," foreign_key "," association_foreign_key "," has_and_belongs_to_many? ","CompositePrimaryKeyMismatchError  new "," Array length != "," Array length "," Array "," association_primary_key "," belongs_to? "," active_record_primary_key "," collection? "," has_one? "," active_record composite_primary_key? "," klass composite_primary_key? "," klass "," polymorphic? ! "," polymorphic? "]}," ActiveRecord Reflection AssociationReflection source_reflection":{"type":"method","name":"source_reflection","children":[],"call":["(send\n  (send nil :source_reflection_names) :collect) compact first ","(send\n  (send nil :source_reflection_names) :collect) compact "," through_reflection klass reflect_on_association "," through_reflection klass "," through_reflection "," source_reflection_names collect "," source_reflection_names "]}," ActiveRecord Reflection AssociationReflection source_reflection_names":{"type":"method","name":"source_reflection_names","children":[],"call":["n to_sym ","(if\n  (send\n    (send nil :options) :[]\n    (sym :source))\n  (array\n    (send\n      (send nil :options) :[]\n      (sym :source)))\n  (array\n    (send\n      (send\n        (send nil :name) :to_s) :singularize)\n    (send nil :name))) collect "," name "," name to_s singularize "," name to_s "," options [] "," options "]}," ActiveRecord Reflection AssociationReflection through_reflection":{"type":"method","name":"through_reflection","children":[],"call":[" active_record reflect_on_association "," options [] "," options "," active_record "]}," ActiveRecord Reflection AssociationReflection counter_cache_column":{"type":"method","name":"counter_cache_column","children":[],"call":[" options [] "," options "," active_record name underscore pluralize "," active_record name underscore "," active_record name "," active_record "," options [] == "," active_record name demodulize underscore pluralize "," active_record name demodulize underscore "," active_record name demodulize "," options [] to_s "]}," ActiveRecord Reflection AssociationReflection association_foreign_key":{"type":"method","name":"association_foreign_key","children":[],"call":[" class_name foreign_key "," class_name ","@options [] "," options [] "," options ","(or\n  (csend\n    (send\n      (send nil :options) :[]\n      (sym :association_foreign_key)) :to_s)\n  (send\n    (send nil :class_name) :foreign_key)) -@ "]}," ActiveRecord Reflection AssociationReflection primary_key_name":{"type":"method","name":"primary_key_name","children":[],"call":[" active_record name foreign_key "," active_record name "," active_record "," options [] "," options "," class_name foreign_key "," class_name "," macro == "," macro "," derive_primary_key_name "," foreign_key "]}," ActiveRecord Reflection MacroReflection class_name":{"type":"method","name":"class_name","children":[],"call":[" name_to_class_name "," name id2name "," name "," derive_class_name "," options [] "," options ","(or\n  (send\n    (send nil :options) :[]\n    (sym :class_name))\n  (send nil :derive_class_name)) to_s "]}," ActiveRecord Reflection ClassMethods reflections":{"type":"method","name":"reflections","children":[],"call":[" write_inheritable_attribute "," read_inheritable_attribute ","ref []= ","reflection parent_reflection "," _reflections each "," _reflections ","parent_name to_s ","parent_reflection name ","reflection reflection parent_reflection  ","parent_reflection name  to_s ","reflection parent_reflection  name "]}," ActiveRecord Reflection ClassMethods create_reflection":{"type":"method","name":"create_reflection","children":[],"call":[" write_inheritable_hash ","AggregateReflection  new ","AssociationReflection  new ","klass new ","options [] "," write_inheritable_hiwa "," reflections= "," reflections merge "," reflections "," AggregateReflection  new s= "," AssociationReflection  new s= "," klass new s= "," AggregateReflection  new s merge "," AssociationReflection  new s merge "," klass new s merge "," AggregateReflection  new s "," AssociationReflection  new s "," klass new s "]}," ActiveRecord Reflection included":{"type":"method","name":"included","children":[],"call":[]}," ActiveRecord Migration suppress_messages":{"type":"method","name":"suppress_messages","children":[],"call":[" verbose= "," verbose "]}," ActiveRecord Migration say_with_time":{"type":"method","name":"say_with_time","children":[],"call":[" say ","%.4fs % ","time real ","Benchmark  measure ","result is_a? "]}," ActiveRecord Migration say":{"type":"method","name":"say","children":[],"call":[" write "]}," ActiveRecord Migration announce":{"type":"method","name":"announce","children":[],"call":[" write ","== %s %s % ","= * ","75 - ","text length "," name ","(int 0) max "," version ","text (int 0) max  "]}," ActiveRecord Migration write":{"type":"method","name":"write","children":[],"call":[" puts "," verbose "]}," ActiveRecord Migration singleton_method_added":{"type":"method","name":"singleton_method_added","children":[],"call":["klass send "," singleton_class send "," singleton_class "," metaclass send "," metaclass "]}," ActiveRecord Migration migrate":{"type":"method","name":"migrate","children":[],"call":[" write "," announce ","reverted (%.4fs) % ","time real ","migrated (%.4fs) % "," send ","Benchmark  measure "," respond_to? "," change ","recorder inverse each ","recorder inverse "," suppress_messages ","CommandRecorder  new ","direction == ","ActiveRecord Base  connection_pool with_connection ","ActiveRecord Base  connection_pool "," revert "," exec_migration "," new migrate "," new ","ActiveRecord Tasks DatabaseTasks  migration_connection pool with_connection ","ActiveRecord Tasks DatabaseTasks  migration_connection pool ","ActiveRecord Tasks DatabaseTasks  migration_connection ","CommandRecorder  new  inverse each ","CommandRecorder  new  inverse "]}," ActiveRecord Migration down_using_benchmarks":{"type":"method","name":"down_using_benchmarks","children":[],"call":[" migrate "]}," ActiveRecord Migration up_using_benchmarks":{"type":"method","name":"up_using_benchmarks","children":[],"call":[" migrate "]}," ActiveRecord Base reset_locking_column":{"type":"method","name":"reset_locking_column","children":[],"call":[" set_locking_column "]}," ActiveRecord Base locking_column":{"type":"method","name":"locking_column","children":[],"call":[" reset_locking_column "]}," ActiveRecord Base set_locking_column":{"type":"method","name":"set_locking_column","children":[],"call":[" define_attr_method "]}," Test Unit TestCase set_fixture_class":{"type":"method","name":"set_fixture_class","children":[],"call":[" fixture_class_names= "," fixture_class_names merge "," fixture_class_names "]}," Fixtures allow_identity_inserts":{"type":"method","name":"allow_identity_inserts","children":[],"call":["@connection execute "]}," ActiveRecord ConnectionAdapters SybaseAdapterContext cltmsgCB":{"type":"method","name":"cltmsgCB","children":[],"call":["msg [] == ","msg [] ","@logger error ","msg kind_of? "]}," ActiveRecord ConnectionAdapters SybaseAdapterContext reset":{"type":"method","name":"reset","children":[],"call":[]}," ActiveRecord ConnectionAdapters SybaseAdapterContext failed?":{"type":"method","name":"failed?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SybaseAdapterContext deadlocked?":{"type":"method","name":"deadlocked?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SybaseAdapterContext srvmsgCB":{"type":"method","name":"srvmsgCB","children":[],"call":["msg [] ","@logger error ","@logger info ","msg [] == "]}," ActiveRecord ConnectionAdapters SybaseAdapterContext init":{"type":"method","name":"init","children":[],"call":[]}," ActiveRecord ConnectionAdapters SybaseAdapter default_value":{"type":"method","name":"default_value","children":[],"call":[]}," ActiveRecord ConnectionAdapters SybaseAdapter normalize_type":{"type":"method","name":"normalize_type","children":[],"call":["type + ","field_type =~ ","scale == ","scale nil? ","(send\n  (lvar :type) :=~\n  (regexp\n    (str \"date|time|text\")\n    (regopt))) ! ","type =~ "," resolve_type ","field_type strip ","has_scale ! ","scale > ","scale nil? ! "]}," ActiveRecord ConnectionAdapters SybaseAdapter table_structure":{"type":"method","name":"table_structure","children":[],"call":["columns << ","(send\n  (lvar :sysstat2) :&\n  (int 8)) == ","sysstat2 & ","status >= ","(send\n  (lvar :status) :&\n  (int 8)) == ","status & ","default_value [] ","default_value =~ ","1 strip ","default =~ ","name sub! "," normalize_type ","results rows each ","results rows ","@connection top_row_result ","@connection cmd_fail? ! ","@connection cmd_fail? "," raise ","@connection context message ","@connection context ","@connection context failed? ","@connection sql ","@connection set_rowcount "," log ","default_value []  [] ","1 strip  [] ","default_value []  =~ ","1 strip  =~ "," normalize_ normalize_type  ","@connection top_row_result  rows each ","@connection top_row_result  rows "]}," ActiveRecord ConnectionAdapters SybaseAdapter fixup_column_names":{"type":"method","name":"fixup_column_names","children":[],"call":["column sub ","columns map "]}," ActiveRecord ConnectionAdapters SybaseAdapter query_contains_identity_column":{"type":"method","name":"query_contains_identity_column","children":[],"call":["sql =~ "]}," ActiveRecord ConnectionAdapters SybaseAdapter get_identity_column":{"type":"method","name":"get_identity_column","children":[],"call":["col name ","col identity ","@table_columns [] each ","@table_columns [] ","@table_columns []= "," columns ","@table_columns [] == ","@id_columns [] ","@id_columns []= ","col nil? "," columns detect ","@logger debug ","@id_columns has_key? ! ","@id_columns has_key? "]}," ActiveRecord ConnectionAdapters SybaseAdapter has_identity_column":{"type":"method","name":"has_identity_column","children":[],"call":[" get_identity_column nil? ! "," get_identity_column nil? "," get_identity_column "]}," ActiveRecord ConnectionAdapters SybaseAdapter get_table_name":{"type":"method","name":"get_table_name","children":[],"call":["sql =~ "]}," ActiveRecord ConnectionAdapters SybaseAdapter enable_identity_insert":{"type":"method","name":"enable_identity_insert","children":[],"call":[" has_identity_column "," execute "]}," ActiveRecord ConnectionAdapters SybaseAdapter select":{"type":"method","name":"select","children":[],"call":["@connection sql_norow "," normal_select? ! "," normal_select? ","rows << ","hashed_row []= ","row zip ","results rows each ","results rows "," fixup_column_names ","results columns ","results rows length > ","results rows length ","@connection top_row_result "," raise ","@connection context message ","@connection context ","@connection cmd_fail? ","@connection context failed? ","@connection sql ","@connection set_rowcount ","@logger debug ","@limit + "," log ","@connection context reset "," use_temp_table? ","column sub ","results columns map "," execute "," use_temp_table? ! ","@connection top_row_result  rows each ","@connection top_row_result  rows ","@connection top_row_result  columns ","@connection top_row_result  rows length > ","@connection top_row_result  rows length ","@connection top_row_result  columns map "]}," ActiveRecord ConnectionAdapters SybaseAdapter zero_limit?":{"type":"method","name":"zero_limit?","children":[],"call":["@limit == ","@limit nil? ! ","@limit nil? "]}," ActiveRecord ConnectionAdapters SybaseAdapter normal_select?":{"type":"method","name":"normal_select?","children":[],"call":["has_offset ! ","has_limit ! ","@offset > ","@offset nil? ! ","@offset nil? ","@limit nil? ! ","@limit nil? ","@limit nil? !  ! "]}," ActiveRecord ConnectionAdapters SybaseAdapter affected_rows":{"type":"method","name":"affected_rows","children":[],"call":["count to_i ","@connection top_row_result rows first first ","@connection top_row_result rows first ","@connection top_row_result rows ","@connection top_row_result ","@connection cmd_fail? ","@connection sql ","count to_i  to_i ","@connection top_row_result rows first first  to_i "]}," ActiveRecord ConnectionAdapters SybaseAdapter last_insert_id":{"type":"method","name":"last_insert_id","children":[],"call":["id == ","id to_i ","@connection top_row_result rows first first ","@connection top_row_result rows first ","@connection top_row_result rows ","@connection top_row_result ","@connection cmd_fail? ","@connection sql ","id to_i  == ","@connection top_row_result rows first first  == ","id to_i  to_i ","@connection top_row_result rows first first  to_i "]}," ActiveRecord ConnectionAdapters SybaseAdapter check_null_for_column?":{"type":"method","name":"check_null_for_column?","children":[],"call":["sql << ","1 nil? ","type == ","sql =~ ","type =~ ","col [] ","col nil? ","col []  == ","col []  =~ "]}," ActiveRecord ConnectionAdapters SybaseAdapter add_column_options!":{"type":"method","name":"add_column_options!","children":[],"call":["sql << ","options [] == ","options [] "," check_null_for_column? "," quote ","options [] nil? "," options_include_default? "]}," ActiveRecord ConnectionAdapters SybaseAdapter remove_index":{"type":"method","name":"remove_index","children":[],"call":[" execute "," index_name "]}," ActiveRecord ConnectionAdapters SybaseAdapter remove_default_constraint":{"type":"method","name":"remove_default_constraint","children":[],"call":[" execute ","constraint [] ","defaults each "," select "," select each "," select  each "]}," ActiveRecord ConnectionAdapters SybaseAdapter remove_column":{"type":"method","name":"remove_column","children":[],"call":[" execute "," remove_default_constraint "]}," ActiveRecord ConnectionAdapters SybaseAdapter change_column":{"type":"method","name":"change_column","children":[],"call":[" execute ","sql_commands each ","sql_commands << ","options [] "," remove_default_constraint "," type_to_sql "," quote ","options has_key? ","@connection context reset ","@connection context "," raise ","e message =~ ","e message "]}," ActiveRecord ConnectionAdapters SybaseAdapter rename_column":{"type":"method","name":"rename_column","children":[],"call":[" execute "]}," ActiveRecord ConnectionAdapters SybaseAdapter rename_table":{"type":"method","name":"rename_table","children":[],"call":[" execute "]}," ActiveRecord ConnectionAdapters SybaseAdapter supports_migrations?":{"type":"method","name":"supports_migrations?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SybaseAdapter add_limit_offset!":{"type":"method","name":"add_limit_offset!","children":[],"call":["sql << ","sql sub! ","sql =~ "," zero_limit? "," normal_select? ! "," normal_select? ","options [] "," use_temp_table? "]}," ActiveRecord ConnectionAdapters SybaseAdapter quote_column_name":{"type":"method","name":"quote_column_name","children":[],"call":["name to_s ","(send\n  (send\n    (send\n      (lvar :name) :to_s) :length) :+\n  (int 2)) <= "," table_alias_length ","name to_s length + ","name to_s length "]}," ActiveRecord ConnectionAdapters SybaseAdapter quote_string":{"type":"method","name":"quote_string","children":[],"call":["s gsub "]}," ActiveRecord ConnectionAdapters SybaseAdapter quote_column":{"type":"method","name":"quote_column","children":[],"call":[" quote_string ","value to_yaml ","value to_s ","value strftime ","value to_f ","value to_i ","value =~ "]}," ActiveRecord ConnectionAdapters SybaseAdapter quote":{"type":"method","name":"quote","children":[],"call":[" quote_string ","value to_yaml ","value strftime ","value to_s ","column type == ","column type ","value =~ ","column class string_to_binary ","column class ","column class respond_to? "," force_numeric? ","value quoted_id ","value respond_to? "]}," ActiveRecord ConnectionAdapters SybaseAdapter quoted_false":{"type":"method","name":"quoted_false","children":[],"call":[]}," ActiveRecord ConnectionAdapters SybaseAdapter quoted_true":{"type":"method","name":"quoted_true","children":[],"call":[]}," ActiveRecord ConnectionAdapters SybaseAdapter indexes":{"type":"method","name":"indexes","children":[],"call":["indexes << ","IndexDefinition  new ","index [] ","col strip! ","index [] split each ","index [] split ","primary ! ","index [] =~ "," select each "," select ","(send\n  (send nil :select\n    (dstr\n      (str \"exec sp_helpindex \")\n      (begin\n        (lvar :table_name)))\n    (lvar :name)) :map) compact "," select map ","index [] =~  ! "]}," ActiveRecord ConnectionAdapters SybaseAdapter tables":{"type":"method","name":"tables","children":[],"call":["tables << ","row [] "," select each "," select "," select map "]}," ActiveRecord ConnectionAdapters SybaseAdapter rollback_db_transaction":{"type":"method","name":"rollback_db_transaction","children":[],"call":[" execute "," raw_execute "]}," ActiveRecord ConnectionAdapters SybaseAdapter commit_db_transaction":{"type":"method","name":"commit_db_transaction","children":[],"call":[" execute "," raw_execute "]}," ActiveRecord ConnectionAdapters SybaseAdapter begin_db_transaction":{"type":"method","name":"begin_db_transaction","children":[],"call":[" execute "," raw_execute "]}," ActiveRecord ConnectionAdapters SybaseAdapter execute":{"type":"method","name":"execute","children":[],"call":["@connection results [] row_count ","@connection results [] ","@connection results "," raise ","@connection context message ","@connection context ","@connection context failed? ","@connection cmd_fail? ","@connection sql_norow ","@connection set_rowcount ","@connection context reset "," log "," raw_execute "]}," ActiveRecord ConnectionAdapters SybaseAdapter insert":{"type":"method","name":"insert","children":[],"call":[" raise "," execute "," enable_identity_insert "," select_one [] "," select_one "," log "," query_contains_identity_column ","col != "," get_identity_column "," get_table_name "," enable_ select_one [] ity_insert "," query_contains_ select_one [] ity_column "," query_contains_identity_ get_identity_column umn "," get_identity_column  != "," get_ select_one [] ity_column "," get_identity_ get_identity_column umn "," get_ get_table_name  "]}," ActiveRecord ConnectionAdapters SybaseAdapter columns":{"type":"method","name":"columns","children":[],"call":["columns << ","ColumnWithIdentity  new "," table_structure inject "," table_structure ","(send\n  (lvar :sysstat2) :&\n  (int 8)) == ","sysstat2 & ","status >= ","(send\n  (lvar :status) :&\n  (int 8)) == ","status & ","default_value [] ","default_value =~ ","1 strip ","default =~ "," normalize_type ","name sub! ","@connection top_row_result rows map ","@connection top_row_result rows ","@connection top_row_result ","@connection cmd_fail? "," raise ","@connection context message ","@connection context ","@connection context failed? ","@connection sql ","@connection set_rowcount ","@logger debug ","default_value []  [] ","1 strip  [] ","default_value []  =~ ","1 strip  =~ "," normalize_ normalize_type  "]}," ActiveRecord ConnectionAdapters SybaseAdapter select_one":{"type":"method","name":"select_one","children":[],"call":["result first ","result nil? "," select "," select  first "," select  nil? "]}," ActiveRecord ConnectionAdapters SybaseAdapter select_all":{"type":"method","name":"select_all","children":[],"call":[" select "]}," ActiveRecord ConnectionAdapters SybaseAdapter table_alias_length":{"type":"method","name":"table_alias_length","children":[],"call":[]}," ActiveRecord ConnectionAdapters SybaseAdapter reconnect!":{"type":"method","name":"reconnect!","children":[],"call":[" raise "]}," ActiveRecord ConnectionAdapters SybaseAdapter disconnect!":{"type":"method","name":"disconnect!","children":[],"call":["@connection close "]}," ActiveRecord ConnectionAdapters SybaseAdapter active?":{"type":"method","name":"active?","children":[],"call":["(or\n  (send\n    (send\n      (ivar :@connection) :connection) :nil?)\n  (send\n    (ivar :@connection) :connection_dead?)) ! ","@connection connection_dead? ","@connection connection nil? ","@connection connection "]}," ActiveRecord ConnectionAdapters SybaseAdapter adapter_name":{"type":"method","name":"adapter_name","children":[],"call":[]}," ActiveRecord ConnectionAdapters SybaseAdapter native_database_types":{"type":"method","name":"native_database_types","children":[],"call":[]}," ActiveRecord ConnectionAdapters SybaseAdapter initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","connection sql_norow ","context init ","connection context ","config [] ","config has_key? ","connection context  init ","connection connection context  "]}," ActiveRecord ConnectionAdapters SybaseAdapter ColumnWithIdentity binary_to_string":{"type":"method","name":"binary_to_string","children":[],"call":[]}," ActiveRecord ConnectionAdapters SybaseAdapter ColumnWithIdentity string_to_binary":{"type":"method","name":"string_to_binary","children":[],"call":[]}," ActiveRecord ConnectionAdapters SybaseAdapter ColumnWithIdentity simplified_type":{"type":"method","name":"simplified_type","children":[],"call":[]}," ActiveRecord ConnectionAdapters SybaseAdapter ColumnWithIdentity initialize":{"type":"method","name":"initialize","children":[],"call":[" type_cast "]}," ActiveRecord Base sybase_connection":{"type":"method","name":"sybase_connection","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerAdapter current_database":{"type":"method","name":"current_database","children":[],"call":["@connection select_one [] ","@connection select_one "]}," ActiveRecord ConnectionAdapters SQLServerAdapter disconnect!":{"type":"method","name":"disconnect!","children":[],"call":["@connection disconnect "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter table_alias_length":{"type":"method","name":"table_alias_length","children":[],"call":[" query [] [] to_i "," query [] [] "," query [] "," query "," postgresql_version >= "," postgresql_version "," select_value to_i "," select_value "," query_value to_i "," query_value "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter disconnect!":{"type":"method","name":"disconnect!","children":[],"call":["@connection close "," clear_cache! ","@lock synchronize "]}," ActiveRecord ConnectionAdapters OpenBaseAdapter update_nulls_after_insert":{"type":"method","name":"update_nulls_after_insert","children":[],"call":[" execute ","name + ","update_cols size > ","update_cols size ","update_sql << "," quote ","update_sql chop! ","col empty? ","update_cols each ","update_cols << ","cols [] ","values [] =~ ","values [] ","values each_index ","values split ","values gsub! ","cols split ","sql =~ ","update_cols split  size > ","update_cols split  size ","update_cols split  each ","update_cols split  << ","cols split  [] ","values split  [] =~ ","values split  [] ","values split  each_index ","values split  split ","values split  gsub! ","cols split  split "]}," ActiveRecord ConnectionAdapters OpenBaseAdapter translate_sql":{"type":"method","name":"translate_sql","children":[],"call":["sql << ","sql sub! ","sql =~ ","sql !~ ","sql gsub! ","join_condition gsub! ","1 + ","select_columns join ","table + ","select_columns << ","table + + ","col name ","cols each "," columns ","1 =~ ","cols size == ","cols size "," columns  each "," columns  size == "," columns  size "]}," ActiveRecord ConnectionAdapters OpenBaseAdapter index_name":{"type":"method","name":"index_name","children":[],"call":["name << ","row [] "]}," ActiveRecord ConnectionAdapters OpenBaseAdapter sql_type_name":{"type":"method","name":"sql_type_name","children":[],"call":["type_name =~ "]}," ActiveRecord ConnectionAdapters OpenBaseAdapter default_value":{"type":"method","name":"default_value","children":[],"call":["value empty? ","Time  now to_s ","Time  now ","value =~ "]}," ActiveRecord ConnectionAdapters OpenBaseAdapter select":{"type":"method","name":"select","children":[],"call":["rows << ","hashed_row []= ","Date  parse to_s ","Date  parse ","hashed_row [] ","hashed_row [] empty? ","hashed_row [] nil? ","date_cols each ","row [] ","col_names [] ","col_names [] == ","row each_index ","results each ","results rows_affected ","date_cols << ","info name ","info type == ","info type ","col_names << ","results column_infos each ","results column_infos "," execute "," translate_sql "," execute  each "," execute  rows_affected "," execute  column_infos each "," execute  column_infos "," translate_ translate_sql  "]}," ActiveRecord ConnectionAdapters OpenBaseAdapter indexes":{"type":"method","name":"indexes","children":[],"call":["indexes << ","IndexDefinition  new ","row [] ","row [] == "," index_name "," execute each "," execute ","sql << "]}," ActiveRecord ConnectionAdapters OpenBaseAdapter columns":{"type":"method","name":"columns","children":[],"call":["columns << ","OpenBaseColumn  new ","row [] "," sql_type_name "," default_value "," select_all each "," select_all ","sql << "]}," ActiveRecord ConnectionAdapters OpenBaseAdapter tables":{"type":"method","name":"tables","children":[],"call":["(str \"\\\\A_SYS_\") === ","tables reject! ","@connection tables ","@connection tables  reject! ","@connection @connection tables  "]}," ActiveRecord ConnectionAdapters OpenBaseAdapter rollback_db_transaction":{"type":"method","name":"rollback_db_transaction","children":[],"call":[" execute "]}," ActiveRecord ConnectionAdapters OpenBaseAdapter commit_db_transaction":{"type":"method","name":"commit_db_transaction","children":[],"call":[" execute "]}," ActiveRecord ConnectionAdapters OpenBaseAdapter begin_db_transaction":{"type":"method","name":"begin_db_transaction","children":[],"call":[" execute "]}," ActiveRecord ConnectionAdapters OpenBaseAdapter update":{"type":"method","name":"update","children":[],"call":[" execute rows_affected "," execute "]}," ActiveRecord ConnectionAdapters OpenBaseAdapter execute":{"type":"method","name":"execute","children":[],"call":["@connection execute "," log "]}," ActiveRecord ConnectionAdapters OpenBaseAdapter insert":{"type":"method","name":"insert","children":[],"call":[" update_nulls_after_insert "," execute "]}," ActiveRecord ConnectionAdapters OpenBaseAdapter select_one":{"type":"method","name":"select_one","children":[],"call":["results first "," select "," add_limit_offset! "," select  first "]}," ActiveRecord ConnectionAdapters OpenBaseAdapter select_all":{"type":"method","name":"select_all","children":[],"call":[" select "]}," ActiveRecord ConnectionAdapters OpenBaseAdapter add_limit_offset!":{"type":"method","name":"add_limit_offset!","children":[],"call":["sql << ","limit + ","options [] ","limit +  + ","options []  + "]}," ActiveRecord ConnectionAdapters OpenBaseAdapter quoted_false":{"type":"method","name":"quoted_false","children":[],"call":[]}," ActiveRecord ConnectionAdapters OpenBaseAdapter quoted_true":{"type":"method","name":"quoted_true","children":[],"call":[]}," ActiveRecord ConnectionAdapters OpenBaseAdapter quote":{"type":"method","name":"quote","children":[],"call":["@connection insert_binary ","column type == ","column type ","value kind_of? "]}," ActiveRecord ConnectionAdapters OpenBaseAdapter next_sequence_value":{"type":"method","name":"next_sequence_value","children":[],"call":["@connection unique_row_id ","ary [] ","ary []= ","ary [] =~ ","ary [] ! ","sequence_name split ","sequence_name split  [] ","sequence_name split  []= ","sequence_name split  [] =~ ","sequence_name split  [] ! "]}," ActiveRecord ConnectionAdapters OpenBaseAdapter default_sequence_name":{"type":"method","name":"default_sequence_name","children":[],"call":[]}," ActiveRecord ConnectionAdapters OpenBaseAdapter prefetch_primary_key?":{"type":"method","name":"prefetch_primary_key?","children":[],"call":[]}," ActiveRecord ConnectionAdapters OpenBaseAdapter supports_migrations?":{"type":"method","name":"supports_migrations?","children":[],"call":[]}," ActiveRecord ConnectionAdapters OpenBaseAdapter native_database_types":{"type":"method","name":"native_database_types","children":[],"call":[]}," ActiveRecord ConnectionAdapters OpenBaseAdapter adapter_name":{"type":"method","name":"adapter_name","children":[],"call":[]}," ActiveRecord ConnectionAdapters OpenBaseColumn simplified_type":{"type":"method","name":"simplified_type","children":[],"call":["field_type downcase == ","field_type downcase ","field_type downcase =~ "]}," ActiveRecord Base openbase_connection":{"type":"method","name":"openbase_connection","children":[],"call":[]}," ActiveRecord ConnectionAdapters MysqlAdapter version":{"type":"method","name":"version","children":[],"call":["v to_i ","@connection server_info scan flatten map ","@connection server_info scan flatten ","@connection server_info scan ","@connection server_info "]}," ActiveRecord ConnectionAdapters MysqlAdapter supports_views?":{"type":"method","name":"supports_views?","children":[],"call":[" version [] >= "," version [] "," version "]}," ActiveRecord ConnectionAdapters MysqlAdapter current_database":{"type":"method","name":"current_database","children":[],"call":[" select_one [] "," select_one "," select_value "]}," ActiveRecord ConnectionAdapters MysqlAdapter disconnect!":{"type":"method","name":"disconnect!","children":[],"call":["@connection close "]}," ActiveRecord ConnectionAdapters DB2Adapter with_statement":{"type":"method","name":"with_statement","children":[],"call":["stmt free ","DB2 Statement  new ","DB2 Statement  new  free "]}," ActiveRecord ConnectionAdapters DB2Adapter table_alias_length":{"type":"method","name":"table_alias_length","children":[],"call":[]}," ActiveRecord ConnectionAdapters DB2Adapter reconnect!":{"type":"method","name":"reconnect!","children":[],"call":[]}," ActiveRecord ConnectionAdapters DB2Adapter active?":{"type":"method","name":"active?","children":[],"call":["@connection select_one "]}," ActiveRecord ConnectionAdapters DB2Adapter indexes":{"type":"method","name":"indexes","children":[],"call":["tmp values ","tmp []= ","IndexDefinition  new ","t [] == ","t [] ","tmp [] columns << ","tmp [] columns ","tmp [] ","tmp has_key? ","t [] downcase ","stmt indexes each ","stmt indexes "," with_statement ","@connection_options [] "]}," ActiveRecord ConnectionAdapters DB2Adapter initialize":{"type":"method","name":"initialize","children":[],"call":["stmt exec_direct "," with_statement ","@connection_options [] "]}," ActiveRecord ConnectionAdapters AbstractAdapter raw_connection":{"type":"method","name":"raw_connection","children":[],"call":[" disable_lazy_transactions! "," with_raw_connection "]}," ActiveRecord ConnectionAdapters AbstractAdapter verify!":{"type":"method","name":"verify!","children":[],"call":[" reconnect! "," active? ","(send\n  (lvar :now) :-\n  (ivar :@last_verification)) > ","now - ","Time  now to_i ","Time  now ","ActiveSupport Deprecation  warn ","ignored size > ","ignored size "," configure_connection ","@lock synchronize ","(send\n  (lvar :Time  now to_i ) :-\n  (ivar :@last_verification)) > ","Time  now to_i  - ","Time  Time  now to_i  to_i ","Time  Time  now to_i  "]}," ActiveRecord ConnectionAdapters AbstractAdapter disconnect!":{"type":"method","name":"disconnect!","children":[],"call":[" reset_transaction "," clear_cache! "]}," ActiveRecord ConnectionAdapters AbstractAdapter supports_count_distinct?":{"type":"method","name":"supports_count_distinct?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SchemaStatements table_alias_for":{"type":"method","name":"table_alias_for","children":[],"call":["table_name [] gsub ","table_name [] "," table_alias_length - "," table_alias_length ","table_name [] tr "]}," ActiveRecord ConnectionAdapters SchemaStatements table_alias_length":{"type":"method","name":"table_alias_length","children":[],"call":[]}," ActiveRecord Base log_connections":{"type":"method","name":"log_connections","children":[],"call":[]}," ActiveRecord Base clear_all_cached_connections!":{"type":"method","name":"clear_all_cached_connections!","children":[],"call":["@@active_connections clear ","conn disconnect! ","@@active_connections each_value ","connection_hash_for_thread clear ","connection_hash_for_thread each_value "]}," ActiveRecord Base remove_stale_cached_threads!":{"type":"method","name":"remove_stale_cached_threads!","children":[],"call":[" clear_cache! ","stale each ","stale delete ","thread object_id ","thread alive? ","Thread  list each ","Thread  list ","Set  new ","cache keys ","Set  new  each ","Set  new  delete "]}," ActiveRecord Base clear_cache!":{"type":"method","name":"clear_cache!","children":[],"call":["thread_cache delete ","cache clear ","cache each "," block_given? ","cache [] ","Thread  current object_id ","Thread  current "," connection_pool clear_cache! "," connection_pool "]}," ActiveRecord Base verify_active_connections!":{"type":"method","name":"verify_active_connections!","children":[],"call":["connection verify! "," active_connections each_value "," active_connections ","conn disconnect! "," remove_stale_cached_threads! "]}," ActiveRecord Base clear_active_connections!":{"type":"method","name":"clear_active_connections!","children":[],"call":["conn disconnect! "," clear_cache! "," connection_handler clear_active_connections! "," connection_handler "]}," ActiveRecord Base clear_active_connection_name":{"type":"method","name":"clear_active_connection_name","children":[],"call":["klass clear_active_connection_name "," subclasses each "," subclasses "]}," ActiveRecord Base active_connection_name":{"type":"method","name":"active_connection_name","children":[],"call":[" superclass active_connection_name "," superclass "," == "," name ","@@defined_connections [] "," active_connections [] "," active_connections "]}," ActiveRecord Base allow_concurrency=":{"type":"method","name":"allow_concurrency=","children":[],"call":[" log_connections "," logger ","sing send ","(sym :active_connections) each "," clear_all_cached_connections! ","@@allow_concurrency == "," logger debug ","ActiveSupport Deprecation  warn "]}," ActiveRecord Base single_threaded_active_connections":{"type":"method","name":"single_threaded_active_connections","children":[],"call":[]}," ActiveRecord Base thread_safe_active_connections":{"type":"method","name":"thread_safe_active_connections","children":[],"call":["@@active_connections [] ","Thread  current object_id ","Thread  current "]}," ActiveRecord Calculations ClassMethods type_cast_calculated_value":{"type":"method","name":"type_cast_calculated_value","children":[],"call":["column type_cast ","value to_f ","value to_i ","operation to_s downcase ","operation to_s ","value =~ "," type_cast_using_column ","value to_d ","(if\n  (send\n    (lvar :value) :is_a?\n    (const nil :Fixnum))\n  (send\n    (lvar :value) :to_f)\n  (lvar :value)) to_d ","value is_a? ","value try ","value nil? ","operation to_s downcase  to_s downcase ","operation to_s downcase  to_s "]}," ActiveRecord Calculations ClassMethods column_for":{"type":"method","name":"column_for","children":[],"call":["c name to_s == ","c name to_s ","c name "," columns detect "," columns ","field to_s split last ","field to_s split ","field to_s "]}," ActiveRecord Calculations ClassMethods column_alias_for":{"type":"method","name":"column_alias_for","children":[],"call":["keys join downcase gsub gsub strip gsub ","keys join downcase gsub gsub strip ","keys join downcase gsub gsub ","keys join downcase gsub ","keys join downcase ","keys join "," connection table_alias_for "," connection ","table_name gsub! ","table_name strip! ","table_name downcase! ","keys join  gsub! ","keys join  strip! ","keys join  downcase! "]}," ActiveRecord Calculations ClassMethods select_aggregate":{"type":"method","name":"select_aggregate","children":[],"call":["options [] "]}," ActiveRecord Calculations ClassMethods validate_calculation_options":{"type":"method","name":"validate_calculation_options","children":[],"call":["options assert_valid_keys ","CALCULATIONS_OPTIONS  + ","operation to_s == ","operation to_s "]}," ActiveRecord Calculations ClassMethods execute_grouped_calculation":{"type":"method","name":"execute_grouped_calculation","children":[],"call":["all << "," type_cast_calculated_value ","row [] ","key_records [] ","row [] to_i ","calculated_data inject ","OrderedHash  new ","hsh merge ","r id ","key_records inject ","association klass base_class find ","association klass base_class ","association klass ","calculated_data collect "," connection select_all "," connection "," construct_calculation_sql ","options merge "," column_for "," column_alias_for ","(if\n  (lvar :associated)\n  (dstr\n    (begin\n      (send\n        (lvar :options) :[]\n        (sym :group)))\n    (str \"_id\"))\n  (send\n    (lvar :options) :[]\n    (sym :group))) to_s ","options [] ","association macro == ","association macro "," reflect_on_association ","group_attr to_sym ","options [] to_s ","ActiveSupport OrderedHash  new ","association primary_key_name ","all []= ","key first ","key size == ","key size ","group_columns [] ","group_aliases map ","group_aliases first ","group_columns []= ","group_aliases << ","group_fields each "," Array ","group_attr to_s to_sym ","group_attr to_s "," type_cast_calculated_row []  "," type_cast_calculated_value _records [] ","key_records [] _records [] ","key first _records [] ","association klass base_class find  [] "," connection select_all  inject "," type_cast_calculated_value _records inject ","key_records [] _records inject ","key first _records inject ","association klass base_class find  inject "," reflect_on_association  klass base_class find "," reflect_on_association  klass base_class "," reflect_on_association  klass "," connection select_all  collect "," construct_calculation_ construct_calculation_sql  "," reflect_on_association  macro == "," reflect_on_association  macro "," reflect_on_ reflect_on_association  ","options [] to_s  to_sym ","options []  to_sym ","association primary_ type_cast_calculated_value _name ","association primary_key_records [] _name ","association primary_key first _name "," reflect_on_association  primary_key_name "," type_cast_calculated_value  first ","key_records []  first ","key first  first "," type_cast_calculated_value  size == ","key_records []  size == ","key first  size == "," type_cast_calculated_value  size ","key_records []  size ","key first  size "," column_for s [] "," column_alias_for es map "," column_alias_for es first "," column_for s []= "," column_alias_for es << ","(if\n  (lvar :associated)\n  (dstr\n    (begin\n      (send\n        (lvar :options) :[]\n        (sym :group)))\n    (str \"_id\"))\n  (send\n    (lvar :options) :[]\n    (sym :group))) to_s s each ","association primary_key_name s each "," Array  each ","options [] to_s  to_s to_sym ","options []  to_s to_sym ","options [] to_s  to_s ","options []  to_s "]}," ActiveRecord Calculations ClassMethods execute_simple_calculation":{"type":"method","name":"execute_simple_calculation","children":[],"call":[" type_cast_calculated_value "," connection select_value "," construct_calculation_sql "," connection "," type_cast_calculated_ connection select_value  "," connection select_ connection select_value  "]}," ActiveRecord Calculations ClassMethods construct_calculation_sql":{"type":"method","name":"construct_calculation_sql","children":[],"call":["sql join ","sql << ","options [] "," add_conditions! "," add_joins! "," table_name "," scope "," add_limit! ","options [] gsub! ","options [] downcase! ","Base  connection adapter_name == ","Base  connection adapter_name ","Base  connection "," add_limited_ids_condition! ","scope [] "," using_limitable_reflections? ! "," using_limitable_reflections? ","join_dependency reflections ","(send\n  (send\n    (lvar :join_dependency) :join_associations) :collect) join ","join association_join ","join_dependency join_associations collect ","join_dependency join_associations ","ActiveRecord Associations ClassMethods JoinDependency  new ","merged_includes any? ","(send nil :table_name) * "," primary_key ","options []= ","operation to_s downcase == ","operation to_s downcase ","operation to_s ","Base  connection supports_count_distinct? ! ","Base  connection supports_count_distinct? "," column_alias_for "," merge_includes ","options symbolize_keys "," connection adapter_name == "," connection adapter_name "," connection "," connection quote_table_name "," connection supports_count_distinct? ! "," connection supports_count_distinct? ","(send\n  (send nil :connection) :quote_table_name\n  (send nil :table_name)) * ","operation == ","column_name to_s include? ","column_name to_s ","column_name == ","column_name to_s !~ "," column_names include? "," column_names ","joins blank? ","having gsub! ","having downcase! "," sanitize_sql_for_conditions ","use_workaround ! ","options [] join ","options [] [] ","options [] each_index ","options symbolize_keys  [] ","  scope  ","options symbolize_keys  [] gsub! ","options symbolize_keys  [] downcase! "," scope  [] ","ActiveRecord Associations ClassMethods JoinDependency  new  reflections ","(send\n  (send\n    (lvar :ActiveRecord Associations ClassMethods JoinDependency  new ) :join_associations) :collect) join ","ActiveRecord Associations ClassMethods JoinDependency  new  join_associations collect ","ActiveRecord Associations ClassMethods JoinDependency  new  join_associations "," merge_includes  any? ","options symbolize_keys  []= ","operation to_s downcase  to_s downcase == ","operation to_s downcase  to_s downcase ","operation to_s downcase  to_s ","options symbolize_keys  symbolize_keys ","operation to_s downcase  == "," sanitize_sql_for_conditions  gsub! "," sanitize_sql_for_conditions  downcase! "," connection supports_count_distinct? !  ! ","options symbolize_keys  [] join ","options symbolize_keys  [] [] ","options symbolize_keys  [] each_index "]}," ActiveRecord Calculations ClassMethods calculate":{"type":"method","name":"calculate","children":[],"call":[" execute_simple_calculation "," execute_grouped_calculation ","options [] "," column_alias_for "," select_aggregate "," column_for ","column_name == "," validate_calculation_options "," catch ","  column_for _alias_for "," select_ select_aggregate  ","  column_for _for "," column_for _name == ","options []  == "]}," ActiveRecord Calculations ClassMethods sum":{"type":"method","name":"sum","children":[],"call":[" calculate "]}," ActiveRecord Calculations ClassMethods maximum":{"type":"method","name":"maximum","children":[],"call":[" calculate "]}," ActiveRecord Calculations ClassMethods minimum":{"type":"method","name":"minimum","children":[],"call":[" calculate "]}," ActiveRecord Calculations ClassMethods average":{"type":"method","name":"average","children":[],"call":[" calculate "]}," ActiveRecord Calculations ClassMethods count":{"type":"method","name":"count","children":[],"call":[" calculate "," count_with_associations ","options [] "," scope "," raise ","options merge! ","args [] ","args length > ","args length ","args first ","args [] is_a? ","args first is_a? ","args size <= ","args size ","args size >= "," construct_count_options_from_legacy_args "," construct_count_options_from_args ","args []  [] ","args first  [] ","args []  merge! ","args first  merge! "," construct_count_args [] _from_legacy_args "," construct_count_args first _from_legacy_args "," construct_count_args [] _from_args "," construct_count_args first _from_args "]}," ActiveRecord Calculations included":{"type":"method","name":"included","children":[],"call":[]}," ActiveRecord Associations ClassMethods JoinDependency JoinAssociation interpolate_sql":{"type":"method","name":"interpolate_sql","children":[],"call":[" instance_eval ","sql gsub "]}," ActiveRecord Associations ClassMethods JoinDependency JoinAssociation table_name_and_alias":{"type":"method","name":"table_name_and_alias","children":[],"call":[" table_alias_for "," table_name "]}," ActiveRecord Associations ClassMethods JoinDependency JoinAssociation table_alias_for":{"type":"method","name":"table_alias_for","children":[],"call":["(begin\n  (lvar :table_name)) strip ","table_name != ","(begin\n  (send\n    (send\n      (send\n        (send nil :reflection) :active_record) :connection) :quote_table_name\n    (lvar :table_name))) strip "," reflection active_record connection quote_table_name "," reflection active_record connection "," reflection active_record "," reflection "]}," ActiveRecord Associations ClassMethods JoinDependency JoinAssociation pluralize":{"type":"method","name":"pluralize","children":[],"call":["table_name to_s pluralize ","table_name to_s ","ActiveRecord Base  pluralize_table_names "]}," ActiveRecord Associations ClassMethods JoinDependency JoinAssociation association_join":{"type":"method","name":"association_join","children":[],"call":["join << "," interpolate_sql "," sanitize_sql "," reflection options [] "," reflection options "," reflection ","AND %s.%s = %s  % "," klass quote "," klass name "," klass "," reflection active_record connection quote_column_name "," reflection active_record inheritance_column "," reflection active_record "," reflection active_record connection "," aliased_table_name "," klass descends_from_active_record? "," LEFT OUTER JOIN %s ON %s.%s = %s.%s  % "," klass to_s foreign_key "," klass to_s "," options [] "," options "," parent aliased_table_name "," parent "," reflection klass primary_key "," reflection klass "," table_name_and_alias "," parent primary_key ","(send\n  (send nil :reflection) :macro) foreign_key "," reflection active_record to_s "," reflection active_record to_s classify "," reflection macro "," LEFT OUTER JOIN %s ON %s.%s = %s.%s AND %s.%s = %s % "," parent active_record base_class name "," parent active_record base_class "," parent active_record "," reflection macro == "," LEFT OUTER JOIN %s ON %s.%s = %s.%s  % + "," aliased_join_table_name "," through_reflection primary_key_name "," through_reflection "," table_alias_for "," through_reflection klass table_name "," through_reflection klass "," primary_key "," through_reflection klass to_s classify foreign_key "," through_reflection klass to_s classify "," through_reflection klass to_s "," klass to_s classify foreign_key "," klass to_s classify "," source_reflection macro "," source_reflection "," LEFT OUTER JOIN %s ON (%s.%s = %s.%s AND %s.%s = %s)  % + "," reflection klass to_s classify foreign_key "," reflection klass to_s classify "," reflection klass to_s "," LEFT OUTER JOIN %s ON (%s.%s = %s.%s AND %s.%s = %s)  % "," through_reflection options [] to_s + "," through_reflection options [] to_s "," through_reflection options [] "," through_reflection options "," klass table_name classify foreign_key "," klass table_name classify "," klass table_name "," klass primary_key "," reflection active_record primary_key "," reflection active_record table_name "," reflection active_record to_s classify foreign_key "," reflection active_record name foreign_key "," reflection active_record name "," LEFT OUTER JOIN %s ON %s.%s = %s.%s AND %s.%s = %s  % "," reflection active_record base_class name "," reflection active_record base_class "," source_reflection active_record base_class name "," source_reflection active_record base_class "," source_reflection active_record "," source_reflection options [] "," source_reflection options "," source_reflection macro == ","ref options [] ","ref options ","(send nil :through_reflection) each "," klass quote_value "," klass name demodulize "," klass inheritance_column "," LEFT OUTER JOIN %s ON (%s.%s = %s.%s%s)  % + "," LEFT OUTER JOIN %s ON (%s.%s = %s.%s)  % "," LEFT OUTER JOIN %s ON (%s.%s = %s.%s%s)  % "," AND %s.%s = %s % "," through_reflection klass quote_value "," through_reflection klass name demodulize "," through_reflection klass name "," through_reflection active_record inheritance_column "," through_reflection active_record "," through_reflection klass descends_from_active_record? "," through_reflection klass base_class to_s classify foreign_key "," through_reflection klass base_class to_s classify "," through_reflection klass base_class to_s "," through_reflection klass base_class "," LEFT OUTER JOIN %s ON (%s.%s = %s.%s%s%s%s)  % + "," LEFT OUTER JOIN %s ON (%s.%s = %s.%s%s%s%s)  % "," reflection source_reflection options [] "," reflection source_reflection options "," reflection source_reflection "," source_reflection association_foreign_key ","connection quote_column_name ","connection quote_table_name ","(str \" \") % "," join_type ","(sym :has_many) include? ","(str \" \") % + "," source_reflection primary_key_name "," through_reflection klass base_class to_s foreign_key "," reflection active_record to_s foreign_key "," reflection primary_key_name ","AND %s % "," klass send "," through_reflection klass sti_name ","@join << ","sti_condition or ","sti_column eq ","subclass sti_name "," klass descendants each "," klass descendants "," klass sti_name ","aliased_table [] ","aliased_table [] eq ","parent_table [] ","join_table [] ","x blank? ","(send\n  (send\n    (lvar :parent_table) :[]\n    (send\n      (send nil :parent) :primary_key)) :eq\n  (send\n    (lvar :join_table) :[]\n    (lvar :jt_foreign_key))) reject ","parent_table [] eq ","join_table [] eq ","Arel Table  new "," arel_engine "," parent table_name "," table_name "," klass send each ","(send\n  (send\n    (lvar :aliased_table) :[]\n    (or\n      (send\n        (send nil :options) :[]\n        (sym :primary_key))\n      (send\n        (send\n          (send nil :reflection) :klass) :primary_key))) :eq\n  (send\n    (lvar :parent_table) :[]\n    (or\n      (send\n        (send nil :options) :[]\n        (sym :foreign_key))\n      (send\n        (send nil :reflection) :primary_key_name)))) reject ","(send\n  (send\n    (lvar :aliased_table) :[]\n    (lvar :foreign_key)) :eq\n  (send\n    (lvar :parent_table) :[]\n    (or\n      (send\n        (send\n          (send nil :reflection) :options) :[]\n        (sym :primary_key))\n      (send\n        (send nil :parent) :primary_key)))) reject ","(lvar :id_rel) reject ","(send\n  (send\n    (lvar :aliased_table) :[]\n    (lvar :first_key)) :eq\n  (send\n    (lvar :join_table) :[]\n    (lvar :second_key))) reject ","(send\n  (send\n    (lvar :parent_table) :[]\n    (lvar :jt_primary_key)) :eq\n  (send\n    (lvar :join_table) :[]\n    (lvar :jt_foreign_key))) reject "," through_reflection active_record_primary_key "," through_reflection association_primary_key "," through_reflection macro == "," through_reflection macro "," process_conditions ","(send\n  (send\n    (lvar :aliased_table) :[]\n    (send\n      (send nil :klass) :primary_key)) :eq\n  (send\n    (lvar :join_table) :[]\n    (lvar :klass_fk))) reject "," parent active_record columns "," klass columns "," reflection active_record  reflection active_record connection  quote_column_name "," reflection active_record  reflection active_record connection  "," Arel Table  new _name "," parent Arel Table  new _name "," aliased_Arel Table  new _name "," reflection active_record connection  quote_column_name "," reflection active_record connection  quote_table_name ","sti_condition or  or ","sti_column eq  or ","aliased_table []  eq ","Arel Table  new  [] ","Arel Table  new  [] eq ","(send\n  (send\n    (lvar :parent_table) :[]\n    (send\n      (send nil :parent) :primary_key)) :eq\n  (send\n    (lvar :join_table) :[]\n    (lvar : through_reflection primary_key_name ))) reject ","(send\n  (send\n    (lvar :parent_table) :[]\n    (send\n      (send nil :parent) :primary_key)) :eq\n  (send\n    (lvar :join_table) :[]\n    (lvar : through_reflection options [] to_s + ))) reject ","(send\n  (send\n    (lvar :parent_table) :[]\n    (send\n      (send nil :parent) :primary_key)) :eq\n  (send\n    (lvar :join_table) :[]\n    (lvar : through_reflection association_primary_key ))) reject ","(send\n  (send\n    (lvar :parent_table) :[]\n    (send\n      (send nil :parent) :primary_key)) :eq\n  (send\n    (lvar :Arel Table  new ) :[]\n    (lvar :jt_foreign_key))) reject ","(send\n  (send\n    (lvar :Arel Table  new ) :[]\n    (send\n      (send nil :parent) :primary_key)) :eq\n  (send\n    (lvar :join_table) :[]\n    (lvar :jt_foreign_key))) reject ","(send\n  (send\n    (lvar :aliased_table) :[]\n    (or\n      (send\n        (send nil :options) :[]\n        (sym :primary_key))\n      (send\n        (send\n          (send nil :reflection) :klass) :primary_key))) :eq\n  (send\n    (lvar :Arel Table  new ) :[]\n    (or\n      (send\n        (send nil :options) :[]\n        (sym :foreign_key))\n      (send\n        (send nil :reflection) :primary_key_name)))) reject ","(send\n  (send\n    (lvar :Arel Table  new ) :[]\n    (or\n      (send\n        (send nil :options) :[]\n        (sym :primary_key))\n      (send\n        (send\n          (send nil :reflection) :klass) :primary_key))) :eq\n  (send\n    (lvar :parent_table) :[]\n    (or\n      (send\n        (send nil :options) :[]\n        (sym :foreign_key))\n      (send\n        (send nil :reflection) :primary_key_name)))) reject ","(send\n  (send\n    (lvar :aliased_table) :[]\n    (lvar :foreign_key)) :eq\n  (send\n    (lvar :Arel Table  new ) :[]\n    (or\n      (send\n        (send\n          (send nil :reflection) :options) :[]\n        (sym :primary_key))\n      (send\n        (send nil :parent) :primary_key)))) reject ","(send\n  (send\n    (lvar :Arel Table  new ) :[]\n    (lvar :foreign_key)) :eq\n  (send\n    (lvar :parent_table) :[]\n    (or\n      (send\n        (send\n          (send nil :reflection) :options) :[]\n        (sym :primary_key))\n      (send\n        (send nil :parent) :primary_key)))) reject ","(lvar :aliased_table [] eq ) reject ","(send\n  (send\n    (lvar :aliased_table) :[]\n    (lvar : through_reflection klass to_s classify foreign_key )) :eq\n  (send\n    (lvar :join_table) :[]\n    (lvar :second_key))) reject ","(send\n  (send\n    (lvar :aliased_table) :[]\n    (lvar : primary_key )) :eq\n  (send\n    (lvar :join_table) :[]\n    (lvar :second_key))) reject ","(send\n  (send\n    (lvar :aliased_table) :[]\n    (lvar : through_reflection klass base_class to_s classify foreign_key )) :eq\n  (send\n    (lvar :join_table) :[]\n    (lvar :second_key))) reject ","(send\n  (send\n    (lvar :aliased_table) :[]\n    (lvar : through_reflection klass base_class to_s foreign_key )) :eq\n  (send\n    (lvar :join_table) :[]\n    (lvar :second_key))) reject ","(send\n  (send\n    (lvar :aliased_table) :[]\n    (lvar :first_key)) :eq\n  (send\n    (lvar :join_table) :[]\n    (lvar : source_reflection association_foreign_key ))) reject ","(send\n  (send\n    (lvar :aliased_table) :[]\n    (lvar :first_key)) :eq\n  (send\n    (lvar :join_table) :[]\n    (lvar : source_reflection primary_key_name ))) reject ","(send\n  (send\n    (lvar :aliased_table) :[]\n    (lvar :first_key)) :eq\n  (send\n    (lvar :Arel Table  new ) :[]\n    (lvar :second_key))) reject ","(send\n  (send\n    (lvar :Arel Table  new ) :[]\n    (lvar :first_key)) :eq\n  (send\n    (lvar :join_table) :[]\n    (lvar :second_key))) reject ","(send\n  (send\n    (lvar :parent_table) :[]\n    (lvar :jt_primary_key)) :eq\n  (send\n    (lvar :join_table) :[]\n    (lvar : through_reflection primary_key_name ))) reject ","(send\n  (send\n    (lvar :parent_table) :[]\n    (lvar :jt_primary_key)) :eq\n  (send\n    (lvar :join_table) :[]\n    (lvar : through_reflection options [] to_s + ))) reject ","(send\n  (send\n    (lvar :parent_table) :[]\n    (lvar :jt_primary_key)) :eq\n  (send\n    (lvar :join_table) :[]\n    (lvar : through_reflection association_primary_key ))) reject ","(send\n  (send\n    (lvar :parent_table) :[]\n    (lvar :jt_primary_key)) :eq\n  (send\n    (lvar :Arel Table  new ) :[]\n    (lvar :jt_foreign_key))) reject ","(send\n  (send\n    (lvar :Arel Table  new ) :[]\n    (lvar :jt_primary_key)) :eq\n  (send\n    (lvar :join_table) :[]\n    (lvar :jt_foreign_key))) reject ","(send\n  (send\n    (lvar :parent_table) :[]\n    (lvar : through_reflection active_record_primary_key )) :eq\n  (send\n    (lvar :join_table) :[]\n    (lvar :jt_foreign_key))) reject ","(send\n  (send\n    (lvar :parent_table) :[]\n    (lvar : through_reflection primary_key_name )) :eq\n  (send\n    (lvar :join_table) :[]\n    (lvar :jt_foreign_key))) reject ","(send\n  (send\n    (lvar :aliased_table) :[]\n    (send\n      (send nil :klass) :primary_key)) :eq\n  (send\n    (lvar :Arel Table  new ) :[]\n    (lvar :klass_fk))) reject ","(send\n  (send\n    (lvar :Arel Table  new ) :[]\n    (send\n      (send nil :klass) :primary_key)) :eq\n  (send\n    (lvar :join_table) :[]\n    (lvar :klass_fk))) reject "]}," ActiveRecord Associations ClassMethods JoinDependency JoinAssociation initialize":{"type":"method","name":"initialize","children":[],"call":["join_dependency table_aliases [] "," aliased_join_table_name ","join_dependency table_aliases ","@aliased_join_table_name [] + ","table_index + ","@aliased_join_table_name [] "," active_record connection table_alias_length - "," active_record connection table_alias_length "," active_record connection "," active_record ","table_index > "," active_record connection table_alias_for "," parent_table_name "," pluralize ","reflection name ","join_dependency table_aliases [] zero? ","reflection through_reflection klass table_name ","reflection through_reflection klass ","reflection through_reflection ","reflection options [] ","reflection options ","reflection macro == ","reflection macro "," aliased_table_name ","@aliased_table_name [] + ","@aliased_table_name [] ","parent table_joins to_s downcase =~ "," aliased_table_name downcase ","parent table_joins to_s downcase ","parent table_joins to_s ","parent table_joins ","parent table_joins blank? ! ","parent table_joins blank? ","parent active_record table_name ","parent active_record "," table_name ","join_dependency joins size ","join_dependency joins ","reflection klass "," raise ","EagerLoadPolymorphicError  new ","reflection check_validity! "," aliased_table_name_for ","(sym :has_many) include? ","@aliased_join_table_name [] +  [] + "," active_record connection table_alias_for  [] + ","reflection through_reflection klass table_name  [] + ","reflection options []  [] + "," aliased_table_name_for  [] + ","join_dependency table_aliases []  + ","@aliased_join_table_name [] +  [] "," active_record connection table_alias_for  [] ","reflection through_reflection klass table_name  [] ","reflection options []  [] "," aliased_table_name_for  [] ","join_dependency table_aliases []  > ","@aliased_table_name [] +  [] + "," table_name  [] + ","@aliased_table_name [] +  [] "," table_name  [] "]}," ActiveRecord Associations ClassMethods JoinDependency JoinBase instantiate":{"type":"method","name":"instantiate","children":[],"call":[" active_record instantiate "," extract_record "," active_record ","@cached_record [] "," record_id "," active_record send "]}," ActiveRecord Associations ClassMethods JoinDependency JoinBase record_id":{"type":"method","name":"record_id","children":[],"call":["row [] "," aliased_primary_key "]}," ActiveRecord Associations ClassMethods JoinDependency JoinBase extract_record":{"type":"method","name":"extract_record","children":[],"call":["record []= ","row [] "," column_names_with_alias inject "," column_names_with_alias ","Hash  [] "," column_names_with_alias map "]}," ActiveRecord Associations ClassMethods JoinDependency JoinBase column_names_with_alias":{"type":"method","name":"column_names_with_alias","children":[],"call":["@column_names_with_alias << "," aliased_prefix ","(send\n  (array\n    (send nil :primary_key)) :+\n  (begin\n    (send\n      (send nil :column_names) :-\n      (array\n        (send nil :primary_key))))) each_with_index ","(send nil :primary_key) + "," column_names - "," primary_key "," column_names "]}," ActiveRecord Associations ClassMethods JoinDependency JoinBase aliased_table_name":{"type":"method","name":"aliased_table_name","children":[],"call":[" active_record table_name "," active_record "]}," ActiveRecord Associations ClassMethods JoinDependency JoinBase aliased_primary_key":{"type":"method","name":"aliased_primary_key","children":[],"call":[" aliased_prefix "]}," ActiveRecord Associations ClassMethods JoinDependency JoinBase aliased_prefix":{"type":"method","name":"aliased_prefix","children":[],"call":[]}," ActiveRecord Associations ClassMethods JoinDependency JoinBase initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Associations ClassMethods JoinDependency construct_association":{"type":"method","name":"construct_association","children":[],"call":[" raise ","join reflection macro ","join reflection ","record send ","join reflection name ","join instantiate ","row [] nil? ","row [] ","join aliased_primary_key ","record id to_s != ","join parent record_id to_s ","join parent record_id ","join parent ","record id to_s ","record id ","collection target push ","collection target ","collection target include? ","collection loaded ","record instance_variable_defined? "," set_target_and_inverse ","collection __send__ ","record send  target push ","record send  target ","record send  target include? ","record send  loaded ","record send  __send__ "]}," ActiveRecord Associations ClassMethods JoinDependency construct":{"type":"method","name":"construct","children":[],"call":[" raise ","associations inspect "," construct ","associations [] "," construct_association ","joins shift ","(send\n  (send\n    (lvar :associations) :keys) :sort) each ","a to_s <=> ","b to_s ","a to_s ","associations keys sort ","associations keys ","associations each ","joins empty? ","(lvasgn :join\n  (send\n    (lvar :joins) :shift)) reflection name to_s != ","associations to_s ","(lvasgn :join\n  (send\n    (lvar :joins) :shift)) reflection name to_s ","(lvasgn :join\n  (send\n    (lvar :joins) :shift)) reflection name ","(lvasgn :join\n  (send\n    (lvar :joins) :shift)) reflection ","joins delete ","join nil? ","j parent_table_name == ","parent class table_name ","parent class ","j parent_table_name ","j reflection name to_s == ","name to_s ","j reflection name to_s ","j reflection name ","j reflection ","joins detect "," construct_association s inspect "," construct_association s [] "," construct_ construct_association  ","joins shift s shift ","(send\n  (send\n    (lvar : construct_association s) :keys) :sort) each "," construct_association s keys sort "," construct_association s keys "," construct_association s each ","joins shift s empty? ","(lvasgn :joins shift \n  (send\n    (lvar :joins shift s) :shift)) reflection name to_s != "," construct_association s to_s ","(lvasgn :joins shift \n  (send\n    (lvar :joins shift s) :shift)) reflection name to_s ","(lvasgn :joins shift \n  (send\n    (lvar :joins shift s) :shift)) reflection name ","(lvasgn :joins shift \n  (send\n    (lvar :joins shift s) :shift)) reflection ","joins shift s delete ","joins shift  nil? ","joins shift s detect "]}," ActiveRecord Associations ClassMethods JoinDependency build":{"type":"method","name":"build","children":[],"call":[" raise ","associations inspect "," build ","associations [] ","(send\n  (send\n    (lvar :associations) :keys) :sort) each ","a to_s <=> ","b to_s ","a to_s ","associations keys sort ","associations keys ","associations each ","@joins << ","JoinAssociation  new ","@reflections << ","parent reflections [] ","associations to_s intern ","associations to_s ","parent reflections ","@joins last "," build_join_association "," build_join_association with_join_class "," cache_joined_association ","join_association join_type= "," find_join_association ","@parent reflections [] s << ","parent parent reflections [] s [] ","parent parent reflections [] s "," build_ build  "," build_ build_join_association  "," build_ find_join_association  "," build_ build  with_join_class "," build_ build_join_association  with_join_class "," build_ find_join_association  with_join_class "," build  join_type= "," build_join_association  join_type= "," find_join_association  join_type= "," find_ build  "," find_ build_join_association  "," find_ find_join_association  "]}," ActiveRecord Associations ClassMethods JoinDependency aliased_table_names_for":{"type":"method","name":"aliased_table_names_for","children":[],"call":["join aliased_table_name ","(send\n  (send nil :joins) :select) collect ","join table_name == ","join table_name "," joins select "," joins "]}," ActiveRecord Associations ClassMethods JoinDependency instantiate":{"type":"method","name":"instantiate","children":[],"call":[" construct "," join_associations dup "," join_associations ","@base_records_hash [] ","@base_records_in_order << ","@base_records_hash []= "," join_base instantiate "," join_base "," join_base record_id ","rows each_with_index "," remove_duplicate_results! "," join_base active_record "]}," ActiveRecord Associations ClassMethods JoinDependency join_base":{"type":"method","name":"join_base","children":[],"call":["@joins [] "]}," ActiveRecord Associations ClassMethods JoinDependency join_associations":{"type":"method","name":"join_associations","children":[],"call":["@joins [] to_a ","@joins [] "]}," ActiveRecord Associations ClassMethods JoinDependency initialize":{"type":"method","name":"initialize","children":[],"call":[" build ","@table_aliases []= ","base table_name ","aliases []= ","Hash  new ","JoinBase  new "]}," ActiveRecord Associations ClassMethods include_eager_order?":{"type":"method","name":"include_eager_order?","children":[],"call":["order_table_name != "," table_name ","order scan flatten any? ","order scan flatten ","order scan ","options [] ","(send\n  (begin\n    (or\n      (lvar :tables)\n      (send nil :order_tables\n        (lvar :options)))) :-\n  (array\n    (send nil :table_name))) any? ","(or\n  (lvar :tables)\n  (send nil :order_tables\n    (lvar :options))) - "," order_tables ","(send\n  (begin\n    (or\n      (lvar :tables)\n      (send nil :order_tables\n        (lvar :options)))) :-\n  (begin\n    (or\n      (lvar :joined_tables)\n      (send nil :joined_tables\n        (lvar :options))))) any? "," joined_tables ","options [] _table_name != ","options []  scan flatten any? ","options []  scan flatten ","options []  scan ","(send\n  (begin\n    (or\n      (lvar :tables)\n      (send nil :options [] _tables\n        (lvar :options)))) :-\n  (array\n    (send nil :table_name))) any? ","(or\n  (lvar :tables)\n  (send nil :options [] _tables\n    (lvar :options))) - "," options [] _tables ","(send\n  (begin\n    (or\n      (lvar :tables)\n      (send nil :options [] _tables\n        (lvar :options)))) :-\n  (begin\n    (or\n      (lvar :joined_tables)\n      (send nil :joined_tables\n        (lvar :options))))) any? "]}," ActiveRecord Associations ClassMethods construct_counter_sql_with_included_associations":{"type":"method","name":"construct_counter_sql_with_included_associations","children":[],"call":[" sanitize_sql ","sql << ","Base  connection supports_count_distinct? ! ","Base  connection supports_count_distinct? ","Base  connection "," add_limit! "," using_limitable_reflections? ","join_dependency reflections "," add_limited_ids_condition! ","options [] ","scope [] "," using_limitable_reflections? ! "," add_conditions! "," add_joins! ","(send\n  (send\n    (lvar :join_dependency) :join_associations) :collect) join ","join association_join ","join_dependency join_associations collect ","join_dependency join_associations "," table_name "," primary_key "," scope "," scope  [] ","  scope  "]}," ActiveRecord Associations ClassMethods create_has_and_belongs_to_many_reflection":{"type":"method","name":"create_has_and_belongs_to_many_reflection","children":[],"call":[" join_table_name "," undecorated_table_name ","reflection class_name "," to_s ","reflection options [] ","reflection options "," create_reflection ","options []= "," create_extension_module "," block_given? ","options assert_valid_keys "," create_extension_modules ","options [] "," valid_keys_for_has_and_belongs_to_many_association "," raise ","HasAndBelongsToManyAssociationForeignKeyNeeded  new ","reflection association_foreign_key == ","reflection primary_key_name ","reflection association_foreign_key ","HasAndBelongsToManyAssociationWithPrimaryKeyError  new "," connection primary_key "," connection "," connection supports_primary_key? "," create_reflection  class_name "," create_reflection  options [] "," create_reflection  options "," create_ create_reflection  "," create_reflection  association_foreign_key == "," create_reflection  primary_key_name "," create_reflection  association_foreign_key "]}," ActiveRecord Associations ClassMethods create_belongs_to_reflection":{"type":"method","name":"create_belongs_to_reflection","children":[],"call":["reflection class_name underscore + ","reflection class_name underscore ","reflection class_name ","reflection options [] ","reflection options ","options [] "," create_reflection ","options assert_valid_keys "," valid_keys_for_belongs_to_association "," create_reflection  class_name underscore + "," create_reflection  class_name underscore "," create_reflection  class_name "," create_reflection  options [] "," create_reflection  options "," create_ create_reflection  "]}," ActiveRecord Associations ClassMethods create_has_one_reflection":{"type":"method","name":"create_has_one_reflection","children":[],"call":[" create_reflection ","options assert_valid_keys "," valid_keys_for_has_one_association "]}," ActiveRecord Associations ClassMethods create_has_many_reflection":{"type":"method","name":"create_has_many_reflection","children":[],"call":[" create_reflection ","options []= "," create_extension_module "," block_given? ","options assert_valid_keys "," create_extension_modules ","options [] "," valid_keys_for_has_many_association "]}," ActiveRecord Associations ClassMethods add_deprecated_api_for_has_many":{"type":"method","name":"add_deprecated_api_for_has_many","children":[],"call":[" deprecated_collection_build_method "," deprecated_collection_create_method "," deprecated_find_all_in_collection_method "," deprecated_find_in_collection_method "," deprecated_has_collection_method "," deprecated_remove_association_relation "," deprecated_add_association_relation "," deprecated_collection_count_method "]}," ActiveRecord Associations ClassMethods configure_dependency_for_has_one":{"type":"method","name":"configure_dependency_for_has_one","children":[],"call":[" raise "," module_eval ","reflection primary_key_name ","reflection name ","reflection options [] ","reflection options ","reflection class_name ","reflection options [] inspect ","reflection options include? "," before_destroy ","association update_attribute ","association nil? "," send "," define_method ","(str \"has_one_dependent_nullify_for_\") to_sym ","association class delete ","association id ","association class ","(str \"has_one_dependent_delete_for_\") to_sym ","association destroy ","(str \"has_one_dependent_destroy_for_\") to_sym ","association delete ","DeleteRestrictionError  new "," send nil? ","(str \"has_one_dependent_restrict_for_\") to_sym "," class_eval ","1676 + ","reflection primary_key_name inspect ","1669 + ","1583 + ","1576 + ","1555 + ","1548 + ","1566 + ","1559 + ","1586 + ","1579 + ","1667 + ","1660 + ","reflection primary_key_reflection options []  ","reflection reflection options []  ","reflection class_reflection options []  "," send  update_attribute "," send  nil? "," send  class delete "," send  id "," send  class "," send  destroy "," send  delete ","reflection primary_key_reflection options []  inspect "]}," ActiveRecord Associations ClassMethods configure_dependency_for_has_many":{"type":"method","name":"configure_dependency_for_has_many","children":[],"call":[" raise "," module_eval ","reflection primary_key_name ","reflection class_name ","reflection name ","reflection options [] ","reflection options "," base_class name "," base_class ","reflection options []= "," ActiveSupport Deprecation  warn "," caller ","reflection options [] == ","reflection options [] inspect ","(send\n  (lvar :dependent_conditions) :collect) join ","dependent_conditions collect ","dependent_conditions << "," sanitize_sql ","reflection options include? "," before_destroy ","o destroy "," send each "," send "," define_method ","(str \"has_many_dependent_destroy_for_\") to_sym ","record class send ","reflection dependent_conditions ","record class ","reflection klass ","(lvar :o) send ","Proc  new ","o respond_to? ","(send\n  (str \"belongs_to_counter_cache_before_destroy_for_\") :+\n  (send\n    (send\n      (send\n        (self) :class) :name) :downcase)) to_sym ","belongs_to_counter_cache_before_destroy_for_ + "," class name downcase "," class name "," class ","dependent_conditions gsub ","reflection quoted_table_name ","DeleteRestrictionError  new "," send empty? ","(str \"has_many_dependent_restrict_for_\") to_sym "," class send ","reflection table_name ","(send\n  (lvar :(send\n  (lvar :dependent_conditions) :collect) join ) :collect) join ","(send\n  (lvar :dependent_conditions gsub ) :collect) join ","(send\n  (lvar :dependent_conditions) :collect) join  collect ","dependent_conditions gsub  collect ","(send\n  (lvar :dependent_conditions) :collect) join  << ","dependent_conditions gsub  << ","reflection (send\n  (lvar :dependent_conditions) :collect) join  ","reflection dependent_conditions gsub  ","(send\n  (lvar :dependent_conditions) :collect) join  gsub ","dependent_conditions gsub  gsub "]}," ActiveRecord Associations ClassMethods count_with_associations":{"type":"method","name":"count_with_associations","children":[],"call":[" count_by_sql "," construct_counter_sql_with_included_associations ","JoinDependency  new ","options [] "," merge_includes "," scope "," catch "]}," ActiveRecord Associations ClassMethods collection_reader_method":{"type":"method","name":"collection_reader_method","children":[],"call":["association reload "," instance_variable_set ","reflection name ","association_proxy_class new ","association respond_to? "," instance_variable_get ","params first ","params empty? "," define_method "," send map "," send ","reflection name to_s singularize ","reflection name to_s "," instance_variable_defined? "," send all map "," send all ","reflection klass primary_key ","reflection klass ","reflection quoted_table_name ","reflection options [] ","reflection options "," send loaded? ","reflection klass uncached "," association_instance_set "," association_instance_get ","r id "," send select except map! "," send select except "," send select ","r send "," send select map! ","through quoted_table_name ","through name ","reflection source_reflection primary_key_name ","reflection source_reflection ","reflection through_reflection ","reflection source_reflection belongs_to? "," redefine_method ","association_proxy_class new  reload "," instance_variable_get  reload "," association_instance_get  reload ","association_proxy_class new _proxy_class new "," instance_variable_get _proxy_class new "," association_instance_get _proxy_class new ","association_proxy_class new  respond_to? "," instance_variable_get  respond_to? "," association_instance_get  respond_to? ","reflection klass reflection source_reflection primary_key_name  "," association_proxy_class new _instance_set ","  instance_variable_get _instance_set ","  association_instance_get _instance_set "," association_proxy_class new _instance_get ","  instance_variable_get _instance_get ","  association_instance_get _instance_get ","reflection through_reflection  quoted_table_name ","reflection through_reflection  name ","reflection source_reflection reflection source_reflection primary_key_name _name ","reflection reflection through_reflection _reflection "]}," ActiveRecord EagerLoadPolymorphicError message":{"type":"method","name":"message","children":[],"call":["@reflection name inspect ","@reflection name "]}," ActiveRecord EagerLoadPolymorphicError initialize":{"type":"method","name":"initialize","children":[],"call":["reflection name inspect ","reflection name "]}," ActiveRecord HasManyThroughSourceAssociationNotFoundError message":{"type":"method","name":"message","children":[],"call":["@source_associations to_sentence ","@through_reflection name inspect ","@through_reflection name ","@reflection name inspect ","@reflection name ","@through_reflection klass ","@source_reflection_names collect to_sentence ","@source_reflection_names collect "]}," ActiveRecord HasManyThroughSourceAssociationNotFoundError initialize":{"type":"method","name":"initialize","children":[],"call":["a name inspect ","a name ","reflection through_reflection klass reflect_on_all_associations collect ","reflection through_reflection klass reflect_on_all_associations ","reflection through_reflection klass ","reflection through_reflection ","reflection source_reflection_names ","source_associations to_sentence ","through_reflection name inspect ","through_reflection name ","reflection name inspect ","reflection name ","through_reflection klass ","source_reflection_names collect to_sentence ","source_reflection_names collect ","(send\n  (lvar :source_reflection_names) :collect) to_sentence ","a inspect ","reflection through_reflection klass _reflections keys ","reflection through_reflection klass _reflections ","reflection reflection through_reflection  klass reflect_on_all_associations collect ","reflection reflection through_reflection  klass reflect_on_all_associations ","reflection reflection through_reflection  klass ","reflection reflection through_reflection  ","reflection reflection source_reflection_names  ","reflection through_reflection klass _reflections keys  to_sentence ","reflection through_reflection  name inspect ","reflection through_reflection  name ","reflection through_reflection  klass ","reflection source_reflection_names  collect to_sentence ","reflection source_reflection_names  collect ","(send\n  (lvar :reflection source_reflection_names ) :collect) to_sentence ","reflection reflection through_reflection  klass _reflections keys ","reflection reflection through_reflection  klass _reflections "]}," ActiveRecord HasManyThroughAssociationPolymorphicError message":{"type":"method","name":"message","children":[],"call":["@source_reflection name ","@source_reflection class_name ","@reflection name "]}," ActiveRecord HasManyThroughAssociationPolymorphicError initialize":{"type":"method","name":"initialize","children":[],"call":["source_reflection name ","source_reflection class_name ","reflection name "]}," ActiveRecord HasManyThroughAssociationNotFoundError message":{"type":"method","name":"message","children":[],"call":["@reflection klass ","@reflection options [] inspect ","@reflection options [] ","@reflection options "]}," ActiveRecord HasManyThroughAssociationNotFoundError initialize":{"type":"method","name":"initialize","children":[],"call":["reflection options [] inspect ","reflection options [] ","reflection options ","owner_class name "]}," ActiveRecord Associations HasManyThroughAssociation conditions":{"type":"method","name":"conditions","children":[],"call":["(send\n  (send\n    (array\n      (begin\n        (if\n          (send\n            (send\n              (ivar :@reflection) :options) :[]\n            (sym :conditions))\n          (send nil :interpolate_sql\n            (send\n              (send\n                (ivar :@reflection) :active_record) :send\n              (sym :sanitize_sql)\n              (send\n                (send\n                  (ivar :@reflection) :options) :[]\n                (sym :conditions)))) nil))\n      (begin\n        (if\n          (send\n            (send\n              (send\n                (ivar :@reflection) :through_reflection) :options) :[]\n            (sym :conditions))\n          (send nil :interpolate_sql\n            (send\n              (send\n                (ivar :@reflection) :active_record) :send\n              (sym :sanitize_sql)\n              (send\n                (send\n                  (send\n                    (ivar :@reflection) :through_reflection) :options) :[]\n                (sym :conditions)))) nil))) :compact) :collect) join ","(begin\n  (if\n    (send\n      (send\n        (ivar :@reflection) :options) :[]\n      (sym :conditions))\n    (send nil :interpolate_sql\n      (send\n        (send\n          (ivar :@reflection) :active_record) :send\n        (sym :sanitize_sql)\n        (send\n          (send\n            (ivar :@reflection) :options) :[]\n          (sym :conditions)))) nil)) compact collect ","(begin\n  (if\n    (send\n      (send\n        (ivar :@reflection) :options) :[]\n      (sym :conditions))\n    (send nil :interpolate_sql\n      (send\n        (send\n          (ivar :@reflection) :active_record) :send\n        (sym :sanitize_sql)\n        (send\n          (send\n            (ivar :@reflection) :options) :[]\n          (sym :conditions)))) nil)) compact "," interpolate_sql ","@reflection active_record send ","@reflection through_reflection options [] ","@reflection through_reflection options ","@reflection through_reflection ","@reflection active_record ","@reflection options [] ","@reflection options ","@reflection through_reflection options [] ! ","@reflection options [] ! ","(send\n  (send\n    (array\n      (begin\n        (if\n          (send\n            (send\n              (ivar :@reflection) :options) :[]\n            (sym :conditions))\n          (send nil :interpolate_sql\n            (send\n              (send\n                (ivar :@reflection) :klass) :send\n              (sym :sanitize_sql)\n              (send\n                (send\n                  (ivar :@reflection) :options) :[]\n                (sym :conditions)))) nil))\n      (begin\n        (if\n          (send\n            (send\n              (send\n                (ivar :@reflection) :through_reflection) :options) :[]\n            (sym :conditions))\n          (send nil :interpolate_sql\n            (send\n              (send\n                (ivar :@reflection) :active_record) :send\n              (sym :sanitize_sql)\n              (send\n                (send\n                  (send\n                    (ivar :@reflection) :through_reflection) :options) :[]\n                (sym :conditions)))) nil))\n      (begin\n        (if\n          (send\n            (send\n              (send\n                (ivar :@reflection) :through_reflection) :klass) :descends_from_active_record?) nil\n          (dstr\n            (begin\n              (send\n                (send\n                  (ivar :@reflection) :through_reflection) :table_name))\n            (str \".\")\n            (begin\n              (send\n                (send\n                  (send\n                    (ivar :@reflection) :through_reflection) :klass) :inheritance_column))\n            (str \" = \")\n            (begin\n              (send\n                (send\n                  (ivar :@reflection) :klass) :quote_value\n                (send\n                  (send\n                    (send\n                      (send\n                        (ivar :@reflection) :through_reflection) :klass) :name) :demodulize))))))) :compact) :collect) join ","(begin\n  (if\n    (send\n      (send\n        (ivar :@reflection) :options) :[]\n      (sym :conditions))\n    (send nil :interpolate_sql\n      (send\n        (send\n          (ivar :@reflection) :klass) :send\n        (sym :sanitize_sql)\n        (send\n          (send\n            (ivar :@reflection) :options) :[]\n          (sym :conditions)))) nil)) compact collect ","(begin\n  (if\n    (send\n      (send\n        (ivar :@reflection) :options) :[]\n      (sym :conditions))\n    (send nil :interpolate_sql\n      (send\n        (send\n          (ivar :@reflection) :klass) :send\n        (sym :sanitize_sql)\n        (send\n          (send\n            (ivar :@reflection) :options) :[]\n          (sym :conditions)))) nil)) compact ","@reflection klass quote_value ","@reflection through_reflection klass name demodulize ","@reflection through_reflection klass name ","@reflection through_reflection klass ","@reflection klass ","@reflection through_reflection klass inheritance_column ","@reflection through_reflection table_name ","@reflection through_reflection klass descends_from_active_record? ","@reflection klass send ","(send\n  (send\n    (array\n      (begin\n        (if\n          (send\n            (send\n              (ivar :@reflection) :options) :[]\n            (sym :conditions))\n          (send nil :interpolate_sql\n            (send\n              (send\n                (ivar :@reflection) :klass) :send\n              (sym :sanitize_sql)\n              (send\n                (send\n                  (ivar :@reflection) :options) :[]\n                (sym :conditions)))) nil))\n      (begin\n        (if\n          (send\n            (send\n              (send\n                (ivar :@reflection) :through_reflection) :options) :[]\n            (sym :conditions))\n          (send nil :interpolate_sql\n            (send\n              (send\n                (ivar :@reflection) :active_record) :send\n              (sym :sanitize_sql)\n              (send\n                (send\n                  (send\n                    (ivar :@reflection) :through_reflection) :options) :[]\n                (sym :conditions)))) nil))\n      (begin\n        (if\n          (send\n            (send\n              (send\n                (ivar :@reflection) :source_reflection) :options) :[]\n            (sym :conditions))\n          (send nil :interpolate_sql\n            (send\n              (send\n                (ivar :@reflection) :active_record) :send\n              (sym :sanitize_sql)\n              (send\n                (send\n                  (send\n                    (ivar :@reflection) :source_reflection) :options) :[]\n                (sym :conditions)))) nil))\n      (begin\n        (if\n          (send\n            (send\n              (send\n                (ivar :@reflection) :through_reflection) :klass) :descends_from_active_record?) nil\n          (dstr\n            (begin\n              (send\n                (send\n                  (ivar :@reflection) :through_reflection) :table_name))\n            (str \".\")\n            (begin\n              (send\n                (send\n                  (send\n                    (ivar :@reflection) :through_reflection) :klass) :inheritance_column))\n            (str \" = \")\n            (begin\n              (send\n                (send\n                  (ivar :@reflection) :klass) :quote_value\n                (send\n                  (send\n                    (send\n                      (send\n                        (ivar :@reflection) :through_reflection) :klass) :name) :demodulize))))))) :compact) :collect) join ","@reflection source_reflection options [] ","@reflection source_reflection options ","@reflection source_reflection ","@reflection source_reflection options [] ! "," build_conditions "]}," ActiveRecord Associations HasManyThroughAssociation construct_sql":{"type":"method","name":"construct_sql","children":[],"call":[" interpolate_sql ","@reflection options [] ","@reflection options ","@reflection options []= ","@reflection options [] sub ","@finder_sql << "," conditions ","@owner quoted_id ","@reflection primary_key_name ","@reflection klass table_name ","@reflection klass "," construct_conditions ","@reflection quoted_table_name "," owner_quoted_id "," construct_counter_sql "," interpolate_and_sanitize_sql "," interpolate_sql  << "," construct_conditions  << "," interpolate_and_sanitize_sql  << "]}," ActiveRecord Associations HasManyThroughAssociation construct_scope":{"type":"method","name":"construct_scope","children":[],"call":["@owner id ","@reflection primary_key_name "," construct_select "," construct_joins "," construct_conditions "," construct_from "," construct_owner_attributes ","@reflection options [] ","@reflection options "]}," ActiveRecord Associations HasManyThroughAssociation construct_joins":{"type":"method","name":"construct_joins","children":[],"call":["(str \"INNER JOIN %s ON %s.%s = %s.%s \") % ","@reflection through_reflection table_name ","@reflection through_reflection ","@reflection table_name ","@reflection options [] ","@reflection options ","@reflection klass primary_key ","@reflection klass ","@reflection source_reflection primary_key_name ","@reflection source_reflection ","@reflection source_reflection macro == ","@reflection source_reflection macro ","@reflection through_reflection options [] ","@reflection through_reflection options ","(str \"INNER JOIN %s ON %s.%s = %s.%s %s \") % ","AND %s.%s = %s % ","@owner class quote ","@reflection through_reflection klass name ","@reflection through_reflection klass ","@owner class ","@reflection source_reflection options [] ","@reflection source_reflection options ","@owner class quote_value ","@reflection quoted_table_name ","@reflection through_reflection quoted_table_name ","@reflection through_reflection klass primary_key "]}," ActiveRecord Associations HasManyThroughAssociation construct_select":{"type":"method","name":"construct_select","children":[],"call":["@reflection table_name ","@reflection options [] ","@reflection options ","@reflection quoted_table_name "]}," ActiveRecord Associations HasManyThroughAssociation construct_from":{"type":"method","name":"construct_from","children":[],"call":["@reflection table_name ","@reflection quoted_table_name "]}," ActiveRecord Associations HasManyThroughAssociation construct_conditions":{"type":"method","name":"construct_conditions","children":[],"call":["conditions << "," sql_conditions "," raise ","@reflection through_reflection name ","@reflection through_reflection ","@reflection name ","@reflection source_reflection macro ","@reflection source_reflection ","@owner quoted_id ","@reflection through_reflection primary_key_name ","@reflection through_reflection table_name ","(begin\n  (send\n    (send\n      (ivar :@reflection) :through_reflection) :table_name)) + ","@owner class quote ","@owner class base_class name to_s ","@owner class base_class name ","@owner class base_class ","@owner class ","@reflection through_reflection options [] ","@reflection through_reflection options ","( + + ","( + ","conditions join "," construct_quoted_owner_attributes map "," construct_quoted_owner_attributes ","@reflection through_reflection quoted_table_name ","(begin\n  (send\n    (send\n      (ivar :@reflection) :through_reflection) :table_name)) +  << "," sql_(begin\n  (send\n    (send\n      (ivar :@reflection) :through_reflection) :table_name)) +  ","@reflection through_reflection @reflection through_reflection table_name  ","@reflection through_reflection @reflection through_reflection quoted_table_name  ","(begin\n  (send\n    (send\n      (ivar :@reflection) :through_reflection) :@reflection through_reflection table_name )) + ","(begin\n  (send\n    (send\n      (ivar :@reflection) :through_reflection) :@reflection through_reflection quoted_table_name )) + ","(begin\n  (send\n    (send\n      (ivar :@reflection) :through_reflection) :table_name)) +  join ","@reflection through_reflection quoted_@reflection through_reflection table_name  ","@reflection through_reflection quoted_@reflection through_reflection quoted_table_name  "]}," ActiveRecord Associations HasManyThroughAssociation find_target":{"type":"method","name":"find_target","children":[],"call":["@reflection klass find ","@reflection source_reflection options [] ","@reflection source_reflection options ","@reflection source_reflection ","@reflection options [] ","@reflection options "," construct_joins "," construct_from "," construct_conditions "," construct_select ","@reflection klass ","records to_set to_a ","records to_set ","records uniq! "," target_reflection_has_associated_record? "," with_scope "," construct_scope "," scoped all "," scoped "," scope to_a "," scope "," get_records "," disable_joins ","@reflection klass find  to_set to_a ","@reflection klass find  to_set ","@reflection klass find  uniq! "," get_@reflection klass find  "]}," ActiveRecord Associations HasManyThroughAssociation method_missing":{"type":"method","name":"method_missing","children":[],"call":["@reflection klass send ","@reflection klass ","@reflection klass with_scope "," construct_scope ","Class  respond_to? ","@reflection klass respond_to? ! ","@reflection klass respond_to? ","@target respond_to? "]}," ActiveRecord Associations HasManyThroughAssociation reset":{"type":"method","name":"reset","children":[],"call":[]}," ActiveRecord Associations HasManyThroughAssociation find":{"type":"method","name":"find","children":[],"call":["@reflection klass find ","@reflection klass ","args << "," merge_options_from_reflection! ","options []= ","@reflection source_reflection options [] ","@reflection source_reflection options ","@reflection source_reflection ","options [] nil? ","options [] "," construct_joins "," construct_from "," construct_select ","@reflection options [] ","@reflection options ","conditions << "," sanitize_sql ","Base  send ","args extract_options! "," merge_Base  send _from_reflection! "," merge_args extract_options! _from_reflection! ","Base  send  []= ","args extract_options!  []= ","@reflection source_reflection Base  send  [] ","@reflection source_reflection args extract_options!  [] ","@reflection source_reflection Base  send  ","@reflection source_reflection args extract_options!  ","Base  send  [] nil? ","args extract_options!  [] nil? ","Base  send  [] ","args extract_options!  [] ","@reflection Base  send  [] ","@reflection args extract_options!  [] ","@reflection Base  send  ","@reflection args extract_options!  ","args extract_Base  send ! ","args extract_args extract_options! ! "]}," ActiveRecord Associations HasManyThroughAssociation initialize":{"type":"method","name":"initialize","children":[],"call":[" construct_sql "," construct_conditions ","reflection check_validity! "," compare_by_identity "]}," ActiveRecord Associations BelongsToPolymorphicAssociation association_class":{"type":"method","name":"association_class","children":[],"call":["@owner [] constantize ","@owner [] ","@reflection options [] ","@reflection options ","@owner [] present? "]}," ActiveRecord Associations BelongsToPolymorphicAssociation foreign_key_present":{"type":"method","name":"foreign_key_present","children":[],"call":["@owner [] nil? ! ","@owner [] nil? ","@owner [] ","@reflection primary_key_name "]}," ActiveRecord Associations BelongsToPolymorphicAssociation find_target":{"type":"method","name":"find_target","children":[],"call":[" association_class find ","@reflection options [] ","@reflection options ","@owner [] ","@reflection primary_key_name "," association_class "," conditions "," association_class nil? "," set_inverse_instance "]}," ActiveRecord Associations BelongsToPolymorphicAssociation updated?":{"type":"method","name":"updated?","children":[],"call":[]}," ActiveRecord Associations BelongsToPolymorphicAssociation replace":{"type":"method","name":"replace","children":[],"call":[" loaded ","@owner []= ","record class base_class name to_s ","record class base_class name ","record class base_class ","record class ","@reflection options [] ","@reflection options ","record id ","@reflection primary_key_name ","record new_record? ","record target ","AssociationProxy  === ","record nil? "," set_inverse_instance "," record_id "]}," ActiveRecord Associations AssociationProxy merge_options_from_reflection!":{"type":"method","name":"merge_options_from_reflection!","children":[],"call":["options reverse_merge! ","@reflection options [] ","@reflection options "]}," ActiveRecord Associations AssociationProxy set_belongs_to_association_for":{"type":"method","name":"set_belongs_to_association_for","children":[],"call":["record []= ","@owner id ","@reflection primary_key_name ","@owner new_record? ","@owner class base_class name to_s ","@owner class base_class name ","@owner class base_class ","@owner class ","@reflection options [] ","@reflection options ","@owner send ","@owner persisted? "]}," ActiveRecord Associations AssociationProxy reset":{"type":"method","name":"reset","children":[],"call":[]}," ActiveRecord Associations AssociationProxy conditions":{"type":"method","name":"conditions","children":[],"call":[" eval ","@reflection active_record send ","@reflection options [] ","@reflection options ","@reflection active_record "," interpolate_sql "," sanitize_sql ","@reflection sanitized_conditions "," interpolate_sanitized_sql "," interpolate_and_sanitize_sql "]}," ActiveRecord Associations AssociationProxy aliased_table_name":{"type":"method","name":"aliased_table_name","children":[],"call":["@reflection klass table_name ","@reflection klass "]}," ActiveRecord Associations AssociationProxy ===":{"type":"method","name":"===","children":[],"call":["other === "," load_target "]}," ActiveRecord Aggregations included":{"type":"method","name":"included","children":[],"call":[]}," ActiveRecord Acts Tree InstanceMethods self_and_siblings":{"type":"method","name":"self_and_siblings","children":[],"call":[" class roots "," class "," parent children "," parent "," has_parent? "]}," ActiveRecord Acts Tree InstanceMethods siblings":{"type":"method","name":"siblings","children":[],"call":[" self_and_siblings - "," self_and_siblings "]}," ActiveRecord Acts Tree InstanceMethods root":{"type":"method","name":"root","children":[],"call":["node parent ","node has_parent? ! ","node has_parent? ","node parent  parent ","node parent  has_parent? ! ","node parent  has_parent? "]}," ActiveRecord Acts Tree InstanceMethods ancestors":{"type":"method","name":"ancestors","children":[],"call":["nodes << ","node parent ","node has_parent? ! ","node has_parent? ","node parent s << ","node parent  parent ","node parent  has_parent? ! ","node parent  has_parent? "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter cast_to_time":{"type":"method","name":"cast_to_time","children":[],"call":["Time  send ","Base  default_timezone ","v sec ","v min ","v hour ","v day ","v month ","v year ","value class == ","value class ","v usec "]}," ActiveRecord HasManyThroughSourceAssociationMacroError message":{"type":"method","name":"message","children":[],"call":["@through_reflection name inspect ","@through_reflection name ","@reflection name inspect ","@reflection name ","@source_reflection options [] ","@source_reflection options ","@source_reflection macro "]}," ActiveRecord HasManyThroughSourceAssociationMacroError initialize":{"type":"method","name":"initialize","children":[],"call":["reflection source_reflection ","reflection through_reflection ","through_reflection name inspect ","through_reflection name ","reflection name inspect ","reflection name ","source_reflection options [] ","source_reflection options ","source_reflection macro ","reflection reflection source_reflection  ","reflection reflection through_reflection  ","reflection through_reflection  name inspect ","reflection through_reflection  name ","reflection source_reflection  options [] ","reflection source_reflection  options ","reflection source_reflection  macro "]}," ActiveRecord Associations HasAndBelongsToManyAssociation finding_with_ambigious_select?":{"type":"method","name":"finding_with_ambigious_select?","children":[],"call":["@owner connection columns size != ","@owner connection columns size ","@owner connection columns ","@reflection options [] ","@reflection options ","@owner connection ","select_clause ! "]}," ActiveRecord XmlSerializer MethodAttribute compute_type":{"type":"method","name":"compute_type","children":[],"call":["Hash XML_TYPE_NAMES  [] ","@record send class name ","@record send class ","@record send "," name ","@serializable send class name ","@serializable send class ","@serializable send "]}," ActiveRecord XmlSerializer Attribute compute_value":{"type":"method","name":"compute_value","children":[],"call":["formatter call ","Hash XML_FORMATTING  [] "," type to_s "," type ","@record send "," name ","Hash XML_FORMATTING  []  call "]}," ActiveRecord XmlSerializer Attribute compute_type":{"type":"method","name":"compute_type","children":[],"call":["@record class columns_hash [] type ","@record class columns_hash [] "," name ","@record class columns_hash ","@record class ","@record class serialized_attributes has_key? ","@record class serialized_attributes ","@record class columns_hash [] try ","@serializable class columns_hash [] type ","@serializable class columns_hash [] ","@serializable class columns_hash ","@serializable class ","@serializable class serialized_attributes has_key? ","@serializable class serialized_attributes ","(pair\n  (sym :text)\n  (sym :string)) [] ","klass columns_hash [] type ","klass columns_hash [] ","klass columns_hash ","klass columns_hash key? ","klass serialized_attributes key? ","klass serialized_attributes ","column type ","ActiveSupport XmlMini TYPE_NAMES  [] "," value class name "," value class "," value ","Type Value  new ","@record class columns_hash [] @record class columns_hash [] type  ","@record class columns_hash [] @record class columns_hash [] try  ","@record class columns_hash [] @serializable class columns_hash [] type  ","@serializable class columns_hash [] @record class columns_hash [] type  ","@serializable class columns_hash [] @record class columns_hash [] try  ","@serializable class columns_hash [] @serializable class columns_hash [] type  ","klass columns_hash [] @record class columns_hash [] type  ","klass columns_hash [] @record class columns_hash [] try  ","klass columns_hash [] @serializable class columns_hash [] type  ","@serializable class  columns_hash [] type ","@serializable class  columns_hash [] ","@serializable class  columns_hash ","@serializable class  columns_hash key? ","@serializable class  serialized_attributes key? ","@serializable class  serialized_attributes ","column @record class columns_hash [] type  ","column @record class columns_hash [] try  ","column @serializable class columns_hash [] type  "]}," ActiveRecord XmlSerializer Attribute decorations":{"type":"method","name":"decorations","children":[],"call":["decorations []= "," type "," type != "," type == "," value nil? "," value "]}," ActiveRecord XmlSerializer Attribute needs_encoding?":{"type":"method","name":"needs_encoding?","children":[],"call":["(sym :binary) include? ! ","(sym :binary) include? "," type "]}," ActiveRecord XmlSerializer Attribute initialize":{"type":"method","name":"initialize","children":[],"call":[" compute_value "," compute_type "]}," ActiveRecord XmlSerializer serialize":{"type":"method","name":"serialize","children":[],"call":[" add_procs "," add_includes "," add_attributes "," builder tag! "," builder ","args << "," options [] "," options "," root "," block_given? "," options []= "," add_associations "," options delete ","@serializable send "," add_ options delete  "]}," ActiveRecord XmlSerializer add_tag":{"type":"method","name":"add_tag","children":[],"call":[" builder tag! ","attribute decorations "," options [] ! "," options [] "," options ","attribute value to_s ","attribute value ","attribute name ","attribute name dasherize "," dasherize? "," builder "," reformat_name "]}," ActiveRecord XmlSerializer add_procs":{"type":"method","name":"add_procs","children":[],"call":["proc call "," options ","(splat\n  (lvar :procs)) each "," options delete ","(splat\n  (lvar : options delete )) each "]}," ActiveRecord XmlSerializer add_includes":{"type":"method","name":"add_includes","children":[],"call":[" options []= "," options ","record to_xml ","opts merge ","@record send ","r to_xml ","association to_s singularize ","association to_s ","records each "," builder tag! "," builder ","tag dasherize "," dasherize? ","records first class to_s underscore pluralize ","records first class to_s underscore ","records first class to_s ","records first class ","records first ","records empty? ","@record send to_a ","@record class reflect_on_association macro ","@record class reflect_on_association ","@record class "," options merge ","include_associations [] "," Array ","include_associations keys ","include_associations is_a? "," options [] "," options delete "," add_associations ","@serializable send ","@record send  to_xml "," options merge  merge ","@@record send  send ","@record send s each ","@record send to_a  each "," builder tag dasherize ! "," builder records first class to_s underscore pluralize ! ","tag dasherize  dasherize ","records first class to_s underscore pluralize  dasherize ","@record send s first class to_s underscore pluralize ","@record send to_a  first class to_s underscore pluralize ","@record send s first class to_s underscore ","@record send to_a  first class to_s underscore ","@record send s first class to_s ","@record send to_a  first class to_s ","@record send s first class ","@record send to_a  first class ","@record send s first ","@record send to_a  first ","@record send s empty? ","@record send to_a  empty? ","@@record send  send to_a ","@@record send  class reflect_on_association macro ","@@record send  class reflect_on_association ","@@record send  class "," options delete  [] "," options delete  keys "," options delete  is_a? "]}," ActiveRecord XmlSerializer add_attributes":{"type":"method","name":"add_attributes","children":[],"call":[" add_tag ","(send\n  (send nil :serializable_attributes) :+\n  (send nil :serializable_method_attributes)) each "," serializable_attributes + "," serializable_method_attributes "," serializable_attributes "]}," ActiveRecord XmlSerializer serializable_method_attributes":{"type":"method","name":"serializable_method_attributes","children":[],"call":["MethodAttribute  new ","name to_s "," Array collect "," Array "," options [] "," options ","method_attributes << ","@record respond_to? "," Array inject ","@serializable respond_to? ","Array  wrap inject ","Array  wrap "]}," ActiveRecord XmlSerializer serializable_attributes":{"type":"method","name":"serializable_attributes","children":[],"call":["Attribute  new ","attribute_names collect ","attribute_names - ","n to_s "," options [] collect "," options [] "," options "," options []= "," Array | "," Array ","@record class inheritance_column ","@record class ","attribute_names & "," Array collect "," options delete ","@record attribute_names "," serializable_attribute_names collect "," serializable_attribute_names ","attribute_names -  collect ","attribute_names &  collect ","@record attribute_names  collect ","attribute_names -  - ","attribute_names &  - ","@record attribute_names  - ","attribute_names -  & ","attribute_names &  & ","@record attribute_names  & ","@record attribute_names -  ","@record attribute_names &  ","@record @record attribute_names  "," serializable_attribute_names -  collect "," serializable_attribute_names &  collect "," serializable_@record attribute_names  collect "," serializable_attribute_names -  "," serializable_attribute_names &  "," serializable_@record attribute_names  "]}," ActiveRecord XmlSerializer dasherize?":{"type":"method","name":"dasherize?","children":[],"call":[" options [] "," options "," options has_key? ! "," options has_key? "]}," ActiveRecord XmlSerializer root":{"type":"method","name":"root","children":[],"call":["root dasherize "," dasherize? ","(or\n  (send\n    (send nil :options) :[]\n    (sym :root))\n  (send\n    (send\n      (send\n        (ivar :@record) :class) :to_s) :underscore)) to_s ","@record class to_s underscore ","@record class to_s ","@record class "," options [] "," options "," reformat_name ","(or\n  (send\n    (send nil :options) :[]\n    (sym :root))\n  (send\n    (send\n      (send\n        (ivar :@record) :class) :model_name) :singular)) to_s ","@record class model_name singular ","@record class model_name ","(or\n  (send\n    (send nil :options) :[]\n    (sym :root))\n  (send\n    (send\n      (send\n        (ivar :@record) :class) :to_s) :underscore)) to_s  dasherize ","(or\n  (send\n    (send nil :options) :[]\n    (sym :root))\n  (send\n    (send\n      (send\n        (ivar :@record) :class) :model_name) :singular)) to_s  dasherize ","(or\n  (send\n    (send nil :options) :[]\n    (sym :(or\n  (send\n    (send nil :options) :[]\n    (sym :root))\n  (send\n    (send\n      (send\n        (ivar :@record) :class) :to_s) :underscore)) to_s ))\n  (send\n    (send\n      (send\n        (ivar :@record) :class) :to_s) :underscore)) to_s ","(or\n  (send\n    (send nil :options) :[]\n    (sym :(or\n  (send\n    (send nil :options) :[]\n    (sym :root))\n  (send\n    (send\n      (send\n        (ivar :@record) :class) :model_name) :singular)) to_s ))\n  (send\n    (send\n      (send\n        (ivar :@record) :class) :to_s) :underscore)) to_s ","(or\n  (send\n    (send nil :options) :[]\n    (sym :(or\n  (send\n    (send nil :options) :[]\n    (sym :root))\n  (send\n    (send\n      (send\n        (ivar :@record) :class) :to_s) :underscore)) to_s ))\n  (send\n    (send\n      (send\n        (ivar :@record) :class) :model_name) :singular)) to_s ","(or\n  (send\n    (send nil :options) :[]\n    (sym :(or\n  (send\n    (send nil :options) :[]\n    (sym :root))\n  (send\n    (send\n      (send\n        (ivar :@record) :class) :model_name) :singular)) to_s ))\n  (send\n    (send\n      (send\n        (ivar :@record) :class) :model_name) :singular)) to_s "]}," ActiveRecord XmlSerializer builder":{"type":"method","name":"builder","children":[],"call":[" options []= "," options ","builder instruct! "," options [] ","Builder XmlMarkup  new "]}," ActiveRecord XmlSerializer initialize":{"type":"method","name":"initialize","children":[],"call":["options dup ","Array  wrap ","@serializable class inheritance_column ","@serializable class "," options [] "," options "," options []= ","Array  wrap | "]}," ActiveRecord XmlSerialization to_xml":{"type":"method","name":"to_xml","children":[],"call":["XmlSerializer  new to_s ","XmlSerializer  new "]}," ActiveRecord Wrappings included":{"type":"method","name":"included","children":[],"call":[]}," Mysql handle_auth_fallback":{"type":"method","name":"handle_auth_fallback","children":[],"call":[" read "," write ","data + "," scramble ","@protocol_version == ","@server_capabilities & != ","@server_capabilities & ","pkt [] == ","pkt [] ","pkt size == ","pkt size "," scramble  + "]}," ActiveRecord Transactions save_with_transactions!":{"type":"method","name":"save_with_transactions!","children":[],"call":[" save_without_transactions! "," transaction "," rollback_active_record_state! "," class transaction "," class "]}," ActiveRecord Transactions ClassMethods decrement_open_transactions":{"type":"method","name":"decrement_open_transactions","children":[],"call":["Thread  current [] ","Thread  current "]}," ActiveRecord Transactions ClassMethods increment_open_transactions":{"type":"method","name":"increment_open_transactions","children":[],"call":["Thread  current []= ","open + ","Thread  current ","open zero? ","Thread  current [] "]}," ActiveRecord Transactions included":{"type":"method","name":"included","children":[],"call":[]}," ActiveRecord Timestamp included":{"type":"method","name":"included","children":[],"call":[]}," ActiveRecord Observer add_observer!":{"type":"method","name":"add_observer!","children":[],"call":["klass class_eval ","klass respond_to? ","klass add_observer ","klass method_defined? ! ","klass method_defined? "," respond_to? "," define_callbacks "," observe_callbacks? ","klass send ","(send\n  (send\n    (lvar :klass) :instance_methods) :&\n  (array\n    (lvar :callback)\n    (send\n      (lvar :callback) :to_s))) empty? ","klass instance_methods & ","callback to_s ","klass instance_methods "," class observed_methods each "," class observed_methods "," class "]}," ActiveRecord Observer observed_subclasses":{"type":"method","name":"observed_subclasses","children":[],"call":[" observed_classes sum "," observed_classes "," observed_classes collect flatten "," observed_classes collect ","klass send "]}," ActiveRecord Observer observed_classes":{"type":"method","name":"observed_classes","children":[],"call":["Set  new ","(send\n  (send\n    (self) :class) :observed_class) flatten "," class observed_class "," class ","(send\n  (send\n    (self) :class) :observed_class) compact flatten ","(send\n  (send\n    (self) :class) :observed_class) compact ","klasses + ","(send\n  (lvar :klasses) :map) flatten ","klass descendants ","klasses map "]}," ActiveRecord Observer observed_class_inherited":{"type":"method","name":"observed_class_inherited","children":[],"call":[" add_observer! "," class observe "," observed_classes + "," observed_classes "," class "]}," ActiveRecord Observing ClassMethods inherited":{"type":"method","name":"inherited","children":[],"call":[" notify_observers "," changed "]}," ActiveRecord Observing ClassMethods instantiate_observers":{"type":"method","name":"instantiate_observers","children":[],"call":[" raise ","observer instance ","observer respond_to? ","observer to_s camelize constantize instance ","observer to_s camelize constantize ","observer to_s camelize ","observer to_s ","@observers each ","@observers blank? "]}," ActiveRecord Observing ClassMethods observers":{"type":"method","name":"observers","children":[],"call":[]}," ActiveRecord Observing included":{"type":"method","name":"included","children":[],"call":[]}," ActiveRecord Locking Pessimistic lock!":{"type":"method","name":"lock!","children":[],"call":[" reload "," new_record? "," persisted? ","ActiveSupport Deprecation  warn ","(str \"              Locking a record with unpersisted changes is deprecated and will raise an\\n\") squish "," changed? "," has_changes_to_save? "," raise ","(str \"              Locking a record with unpersisted changes is not supported. Use\\n\") squish "," changed map join "," changed map "," changed "]}," ActiveRecord Locking Optimistic ClassMethods reset_locking_column":{"type":"method","name":"reset_locking_column","children":[],"call":[" set_locking_column "," locking_column= "]}," ActiveRecord Locking Optimistic ClassMethods quoted_locking_column":{"type":"method","name":"quoted_locking_column","children":[],"call":[" connection quote_column_name "," locking_column "," connection ","ActiveSupport Deprecation  warn "]}," ActiveRecord Locking Optimistic ClassMethods locking_column":{"type":"method","name":"locking_column","children":[],"call":[" reset_locking_column "]}," ActiveRecord Locking Optimistic ClassMethods set_locking_column":{"type":"method","name":"set_locking_column","children":[],"call":[" define_attr_method "," deprecated_property_setter "]}," ActiveRecord Locking Optimistic update_with_lock":{"type":"method","name":"update_with_lock","children":[],"call":[" raise ","affected_rows == "," connection update "," class name "," class "," quote_value "," class quoted_locking_column "," id "," class primary_key "," quoted_comma_pair_list "," attributes_with_quotes "," connection "," class table_name "," send ","previous_value + ","lock_col + "," class locking_column "," update_without_lock "," locking_enabled? "," send to_i "," class quoted_table_name ","attribute_names uniq! ","attribute_names empty? ","relation where arel update "," arel_attributes_values ","relation where arel ","relation where ","relation table [] eq and ","relation table [] eq ","relation table [] ","relation table "," quoted_id "," class unscoped "," connection update  == ","relation where arel update  == "," send  + "," send to_i  + "," class locking_column  + "," class unscoped  where arel update "," class unscoped  where arel "," class unscoped  where "," class unscoped  table [] eq and "," class unscoped  table [] eq "," class unscoped  table [] "," class unscoped  table "]}," ActiveRecord Locking Optimistic attributes_from_column_definition_with_lock":{"type":"method","name":"attributes_from_column_definition_with_lock","children":[],"call":["result [] "," class locking_column "," class ","result include? "," lock_optimistically "," attributes_from_column_definition_without_lock "," attributes_from_column_definition_without_lock  [] "," attributes_from_column_definition_without_lock  include? "]}," ActiveRecord Locking Optimistic locking_enabled?":{"type":"method","name":"locking_enabled?","children":[],"call":[" respond_to? "," class locking_column "," class "," lock_optimistically "," class locking_enabled? "]}," ActiveRecord Locking Optimistic included":{"type":"method","name":"included","children":[],"call":[]}," ActiveRecord ConnectionAdapters SybaseAdapter resolve_type":{"type":"method","name":"resolve_type","children":[],"call":[" select_one [] strip "," select_one [] "," select_one ","(or-asgn\n  (ivasgn :@udts)\n  (hash)) [] "]}," ActiveRecord ConnectionAdapters SybaseAdapter raw_execute":{"type":"method","name":"raw_execute","children":[],"call":[" raise ","@connection context message ","@connection context ","@connection context failed? ","@connection cmd_fail? ","@connection sql_norow ","@connection sql ","sql =~ ","@connection set_rowcount ","@logger debug ","@connection context reset "," log "]}," ActiveRecord ConnectionAdapters SybaseAdapter use_temp_table?":{"type":"method","name":"use_temp_table?","children":[],"call":["@offset > ","@offset nil? ! ","@offset nil? ","@limit nil? ! ","@limit nil? "]}," ActiveRecord ConnectionAdapters SybaseAdapter add_lock!":{"type":"method","name":"add_lock!","children":[],"call":["@logger info ","options [] inspect ","options [] ","options has_key? "]}," ActiveRecord ConnectionAdapters SybaseAdapter force_numeric?":{"type":"method","name":"force_numeric?","children":[],"call":["(sym :integer) include? ","column type ","column nil? "]}," ActiveRecord ConnectionAdapters SybaseAdapter current_database":{"type":"method","name":"current_database","children":[],"call":[" select_one [] "," select_one "]}," ActiveRecord ConnectionAdapters SybaseAdapter type_to_sql":{"type":"method","name":"type_to_sql","children":[],"call":["limit < ","limit nil? ! ","limit nil? ","type to_s == ","type to_s "]}," ActiveRecord ConnectionAdapters SQLServerAdapter query_requires_identity_insert?":{"type":"method","name":"query_requires_identity_insert?","children":[],"call":["sql =~ "," identity_column "," get_table_name "," get_ get_table_name  "]}," ActiveRecord ConnectionAdapters SQLServerAdapter identity_column":{"type":"method","name":"identity_column","children":[],"call":["col name ","col identity ","@table_columns [] each ","@table_columns [] ","@table_columns []= "," columns ","@table_columns [] == "]}," ActiveRecord ConnectionAdapters SQLServerAdapter set_identity_insert":{"type":"method","name":"set_identity_insert","children":[],"call":[" raise "," execute "]}," ActiveRecord ConnectionAdapters SQLServerAdapter with_identity_insert_enabled":{"type":"method","name":"with_identity_insert_enabled","children":[],"call":[" set_identity_insert "]}," ActiveRecord ConnectionAdapters SQLServerAdapter remove_check_constraints":{"type":"method","name":"remove_check_constraints","children":[],"call":[" execute ","constraint [] ","constraints each "," select "," select  each "]}," ActiveRecord ConnectionAdapters SQLServerAdapter add_column":{"type":"method","name":"add_column","children":[],"call":[" execute "," add_column_options! "," type_to_sql ","options [] "," quote_column_name "]}," ActiveRecord ConnectionAdapters SQLServerColumn binary_to_string":{"type":"method","name":"binary_to_string","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerColumn string_to_binary":{"type":"method","name":"string_to_binary","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerColumn string_to_time":{"type":"method","name":"string_to_time","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerColumn cast_to_datetime":{"type":"method","name":"cast_to_datetime","children":[],"call":[" cast_to_time ","value is_a? ","Time  mktime ","value sec ","value min ","value hour ","value day ","value mon ","value year ","value day != ","value month != ","value month ","value year != ","value to_time "]}," ActiveRecord ConnectionAdapters SQLServerColumn cast_to_time":{"type":"method","name":"cast_to_time","children":[],"call":["Time  send ","Base  default_timezone ","ParseDate  parsedate ","value is_a? "]}," ActiveRecord ConnectionAdapters SQLServerColumn type_cast":{"type":"method","name":"type_cast","children":[],"call":["value to_s == ","value to_s ","(send\n  (lvar :value) :=~\n  (regexp\n    (str \"^t(rue)?$\")\n    (regopt :i))) == ","value =~ ","value == "," cast_to_datetime "," cast_to_time "," type ","value nil? "]}," ActiveRecord ConnectionAdapters SQLServerColumn simplified_type":{"type":"method","name":"simplified_type","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLServerColumn initialize":{"type":"method","name":"initialize","children":[],"call":["@type == ","sql_type =~ "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter add_order_by_for_association_limiting!":{"type":"method","name":"add_order_by_for_association_limiting!","children":[],"call":["sql replace ","(send\n  (send\n    (lvar :order) :zip\n    (send\n      (begin\n        (erange\n          (int 0)\n          (send\n            (lvar :order) :size))) :to_a)) :map) join ","order zip map ","order zip ","(erange\n  (int 0)\n  (send\n    (lvar :order) :size)) to_a ","order size ","s =~ ","order map! ","(send\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :order)) :split\n    (str \",\")) :collect) reject ","s strip ","options [] split collect ","options [] split ","options [] ","options [] blank? ","(send\n  (send\n    (lvar :(send\n  (send\n    (lvar :order) :zip\n    (send\n      (begin\n        (erange\n          (int 0)\n          (send\n            (lvar :order) :size))) :to_a)) :map) join ) :zip\n    (send\n      (begin\n        (erange\n          (int 0)\n          (send\n            (lvar :(send\n  (send\n    (lvar :order) :zip\n    (send\n      (begin\n        (erange\n          (int 0)\n          (send\n            (lvar :order) :size))) :to_a)) :map) join ) :size))) :to_a)) :map) join ","(send\n  (send\n    (lvar :(send\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :order)) :split\n    (str \",\")) :collect) reject ) :zip\n    (send\n      (begin\n        (erange\n          (int 0)\n          (send\n            (lvar :(send\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :order)) :split\n    (str \",\")) :collect) reject ) :size))) :to_a)) :map) join ","(send\n  (send\n    (lvar :order) :zip\n    (send\n      (begin\n        (erange\n          (int 0)\n          (send\n            (lvar :order) :size))) :to_a)) :map) join  zip map ","(send\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :order)) :split\n    (str \",\")) :collect) reject  zip map ","(send\n  (send\n    (lvar :order) :zip\n    (send\n      (begin\n        (erange\n          (int 0)\n          (send\n            (lvar :order) :size))) :to_a)) :map) join  zip ","(send\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :order)) :split\n    (str \",\")) :collect) reject  zip ","(erange\n  (int 0)\n  (send\n    (lvar :(send\n  (send\n    (lvar :order) :zip\n    (send\n      (begin\n        (erange\n          (int 0)\n          (send\n            (lvar :order) :size))) :to_a)) :map) join ) :size)) to_a ","(erange\n  (int 0)\n  (send\n    (lvar :(send\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :order)) :split\n    (str \",\")) :collect) reject ) :size)) to_a ","(send\n  (send\n    (lvar :order) :zip\n    (send\n      (begin\n        (erange\n          (int 0)\n          (send\n            (lvar :order) :size))) :to_a)) :map) join  size ","(send\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :order)) :split\n    (str \",\")) :collect) reject  size ","(send\n  (send\n    (lvar :order) :zip\n    (send\n      (begin\n        (erange\n          (int 0)\n          (send\n            (lvar :order) :size))) :to_a)) :map) join  map! ","(send\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :order)) :split\n    (str \",\")) :collect) reject  map! ","(send\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :(send\n  (send\n    (lvar :order) :zip\n    (send\n      (begin\n        (erange\n          (int 0)\n          (send\n            (lvar :order) :size))) :to_a)) :map) join )) :split\n    (str \",\")) :collect) reject ","(send\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :(send\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :order)) :split\n    (str \",\")) :collect) reject )) :split\n    (str \",\")) :collect) reject "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter distinct":{"type":"method","name":"distinct","children":[],"call":["sql << ","order_columns * ","order_columns zip map ","order_columns zip ","(erange\n  (int 0)\n  (send\n    (lvar :order_columns) :size)) to_a ","order_columns size ","order_columns delete_if ","s split first ","s split ","order_by split collect ","order_by split ","order_by blank? ","c blank? ","s gsub ","orders collect ","orders empty? ","s =~ "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter type_to_sql":{"type":"method","name":"type_to_sql","children":[],"call":["limit < ","limit == ","limit nil? ","type to_s == ","type to_s "," raise "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter quoted_date":{"type":"method","name":"quoted_date","children":[],"call":["value strftime "," sprintf ","value usec ","value respond_to? ","value acts_like? "]}," ActiveRecord ConnectionAdapters MysqlColumn missing_default_forged_as_empty_string?":{"type":"method","name":"missing_default_forged_as_empty_string?","children":[],"call":["TYPES_ALLOWING_EMPTY_STRING_DEFAULT  include? ! ","TYPES_ALLOWING_EMPTY_STRING_DEFAULT  include? "," type ","@original_default == "," null ! "," null ","default == "," type != "]}," ActiveRecord ConnectionAdapters MysqlColumn initialize":{"type":"method","name":"initialize","children":[],"call":[" missing_default_forged_as_empty_string? "]}," ActiveRecord Base require_mysql":{"type":"method","name":"require_mysql","children":[],"call":[]}," MysqlCompat define_all_hashes_method!":{"type":"method","name":"define_all_hashes_method!","children":[],"call":[]}," ActiveRecord ConnectionAdapters FrontBaseAdapter cleanup_fb_sql":{"type":"method","name":"cleanup_fb_sql","children":[],"call":["(send\n  (send\n    (lvar :cleansql) :split\n    (str \"\\n\")) :reject) * ","line match ","cleansql split reject ","cleansql split ","sql gsub ","(send\n  (send\n    (lvar :sql gsub ) :split\n    (str \"\\n\")) :reject) * ","sql gsub  split reject ","sql gsub  split "]}," ActiveRecord ConnectionAdapters FrontBaseAdapter rename_column":{"type":"method","name":"rename_column","children":[],"call":[" execute "]}," ActiveRecord ConnectionAdapters FrontBaseAdapter change_column":{"type":"method","name":"change_column","children":[],"call":[" execute ","change_column_sql << "," quoted_true "," quoted_false ","options [] == ","options [] ","type == "," quote "," options_include_default? "," type_to_sql "]}," ActiveRecord ConnectionAdapters FrontBaseAdapter change_column_default":{"type":"method","name":"change_column_default","children":[],"call":[" execute ","default != "]}," ActiveRecord ConnectionAdapters FrontBaseAdapter remove_index":{"type":"method","name":"remove_index","children":[],"call":[" execute "," quote_column_name "," index_name ","options [] "]}," ActiveRecord ConnectionAdapters FrontBaseAdapter remove_column":{"type":"method","name":"remove_column","children":[],"call":[" execute "]}," ActiveRecord ConnectionAdapters FrontBaseAdapter add_column_options!":{"type":"method","name":"add_column_options!","children":[],"call":["sql << ","options [] == ","options [] "," quoted_true "," quoted_false "," options_include_default? "," quote "]}," ActiveRecord ConnectionAdapters FrontBaseAdapter add_column":{"type":"method","name":"add_column","children":[],"call":[" execute "," add_column_options! ","options []= "," type_to_sql ","options [] "]}," ActiveRecord ConnectionAdapters FrontBaseAdapter drop_table":{"type":"method","name":"drop_table","children":[],"call":[" raise ","e message match ","e message "," execute "]}," ActiveRecord ConnectionAdapters FrontBaseAdapter rename_table":{"type":"method","name":"rename_table","children":[],"call":[" commit_db_transaction "," execute ","mpk nil? "," select_value ","pkcol name "," begin_db_transaction "," change_column_default ","c fb_autogen ","columns find "," columns "," select_value  nil? "," columns  find ","  columns  "]}," ActiveRecord ConnectionAdapters FrontBaseAdapter create_table":{"type":"method","name":"create_table","children":[],"call":[" raise ","e message match ","e message "," commit_db_transaction "," execute "," begin_db_transaction ","create_sql << ","options [] ","table_definition to_sql "," drop_table ","table_definition primary_key ","options [] == ","TableDefinition  new ","TableDefinition  new  to_sql ","TableDefinition  new  primary_key "]}," ActiveRecord ConnectionAdapters FrontBaseAdapter columns":{"type":"method","name":"columns","children":[],"call":["columns << ","FrontBaseColumn  new ","field [] ","rawresults each "," query "," query  each "]}," ActiveRecord ConnectionAdapters FrontBaseAdapter indexes":{"type":"method","name":"indexes","children":[],"call":["indexes << ","IndexDefinition  new ","ord_position == ","columns << ","index_type == ","row [] "," query each "," query ","row []  == "]}," ActiveRecord ConnectionAdapters FrontBaseAdapter tables":{"type":"method","name":"tables","children":[],"call":[" select_values "]}," ActiveRecord ConnectionAdapters FrontBaseAdapter current_database":{"type":"method","name":"current_database","children":[],"call":[" select_value downcase "," select_value "]}," ActiveRecord ConnectionAdapters FrontBaseAdapter drop_database":{"type":"method","name":"drop_database","children":[],"call":[" execute "]}," ActiveRecord ConnectionAdapters FrontBaseAdapter create_database":{"type":"method","name":"create_database","children":[],"call":[" execute "]}," ActiveRecord ConnectionAdapters FrontBaseAdapter recreate_database":{"type":"method","name":"recreate_database","children":[],"call":[" create_database "," drop_database "]}," ActiveRecord ConnectionAdapters FrontBaseAdapter structure_dump":{"type":"method","name":"structure_dump","children":[],"call":["structure << << ","structure << "," select_one [] "," select_one ","table to_a first last ","table to_a first ","table to_a "," select_all inject "," select_all "]}," ActiveRecord ConnectionAdapters FrontBaseAdapter reset_pk_sequence!":{"type":"method","name":"reset_pk_sequence!","children":[],"call":[" execute ","klass table_name "," select_value ","klass columns_hash [] type == ","klass columns_hash [] type ","klass columns_hash [] ","klass columns_hash ","klass primary_key ","klass nil? ","klasses first ","klasses nil? "," classes_for_table_name ","klasses first  table_name ","klasses first  columns_hash [] type == ","klasses first  columns_hash [] type ","klasses first  columns_hash [] ","klasses first  columns_hash ","klasses first  primary_key ","klasses first  nil? ","klasses first es first "," classes_for_table_name  first ","klasses first es nil? "," classes_for_table_name  nil? "]}," ActiveRecord ConnectionAdapters FrontBaseAdapter classes_for_table_name":{"type":"method","name":"classes_for_table_name","children":[],"call":["klass table_name == ","klass table_name ","ActiveRecord Base  send select ","ActiveRecord Base  send "]}," ActiveRecord ConnectionAdapters FrontBaseAdapter reset_sequence!":{"type":"method","name":"reset_sequence!","children":[],"call":[" execute ","klass table_name ","klass columns_hash [] type == ","klass columns_hash [] type ","klass columns_hash [] ","klass columns_hash ","klass primary_key ","klass nil? ","klasses first ","klasses nil? "," classes_for_table_name ","klasses first  table_name ","klasses first  columns_hash [] type == ","klasses first  columns_hash [] type ","klasses first  columns_hash [] ","klasses first  columns_hash ","klasses first  primary_key ","klasses first  nil? ","klasses first es first "," classes_for_table_name  first ","klasses first es nil? "," classes_for_table_name  nil? "]}," ActiveRecord ConnectionAdapters FrontBaseAdapter default_sequence_name":{"type":"method","name":"default_sequence_name","children":[],"call":[]}," ActiveRecord ConnectionAdapters FrontBaseAdapter next_sequence_value":{"type":"method","name":"next_sequence_value","children":[],"call":[" select_value ","unique zero? "," select_value  zero? "]}," ActiveRecord ConnectionAdapters FrontBaseAdapter prefetch_primary_key?":{"type":"method","name":"prefetch_primary_key?","children":[],"call":[]}," ActiveRecord ConnectionAdapters FrontBaseAdapter add_limit_offset!":{"type":"method","name":"add_limit_offset!","children":[],"call":["sql replace ","sql gsub ","offset zero? ","sql << ","sql sub! ","limit zero? ","options [] ","options []  zero? "]}," ActiveRecord ConnectionAdapters FrontBaseAdapter rollback_db_transaction":{"type":"method","name":"rollback_db_transaction","children":[],"call":[" execute "]}," ActiveRecord ConnectionAdapters FrontBaseAdapter commit_db_transaction":{"type":"method","name":"commit_db_transaction","children":[],"call":[" execute "]}," ActiveRecord ConnectionAdapters FrontBaseAdapter begin_db_transaction":{"type":"method","name":"begin_db_transaction","children":[],"call":[" execute "]}," ActiveRecord ConnectionAdapters FrontBaseAdapter set_optimistic_transactions":{"type":"method","name":"set_optimistic_transactions","children":[],"call":[" execute ","@transaction_mode == "]}," ActiveRecord ConnectionAdapters FrontBaseAdapter set_pessimistic_transactions":{"type":"method","name":"set_pessimistic_transactions","children":[],"call":[" execute ","@transaction_mode == "]}," ActiveRecord ConnectionAdapters FrontBaseAdapter update":{"type":"method","name":"update","children":[],"call":[" execute num_rows "," execute "," puts ","sql inspect "]}," ActiveRecord ConnectionAdapters FrontBaseAdapter insert":{"type":"method","name":"insert","children":[],"call":[" execute "," puts ","sql inspect "]}," ActiveRecord ConnectionAdapters FrontBaseAdapter execute":{"type":"method","name":"execute","children":[],"call":[" raise "," puts ","e inspect ","e message scan empty? ","e message scan ","e message ","@connection query "," log "," cleanup_fb_sql "]}," ActiveRecord ConnectionAdapters FrontBaseAdapter query":{"type":"method","name":"query","children":[],"call":[" raise "," puts ","e inspect ","@connection query "," log "," cleanup_fb_sql "]}," ActiveRecord ConnectionAdapters FrontBaseAdapter select_one":{"type":"method","name":"select_one","children":[],"call":["return_value first ","fbresult clear ","return_value << ","hashed_row []= ","col read ","columns [] ","col kind_of? ","row each "," puts ","row inspect ","fbresult each ","fbresult columns "," execute "," cleanup_fb_sql "," execute  clear ","fbresult columns  [] "," execute  each ","fbresult fbresult columns  "," execute  columns "]}," ActiveRecord ConnectionAdapters FrontBaseAdapter select_all":{"type":"method","name":"select_all","children":[],"call":["return_value << "," puts ","hashed_row inspect ","hashed_row []= ","col read ","columns [] ","col kind_of? ","row each ","row inspect ","fbresult each ","fbresult columns "," execute "," cleanup_fb_sql ","fbresult columns  [] "," execute  each ","fbresult fbresult columns  "," execute  columns "]}," ActiveRecord ConnectionAdapters FrontBaseAdapter disconnect!":{"type":"method","name":"disconnect!","children":[],"call":["@connection close "]}," ActiveRecord ConnectionAdapters FrontBaseAdapter reconnect!":{"type":"method","name":"reconnect!","children":[],"call":["FBSQL_Connect  connect ","@connection_options first ","@connection close ","FBSQL_Connect  connect _options first ","FBSQL_Connect  connect  close "]}," ActiveRecord ConnectionAdapters FrontBaseAdapter active?":{"type":"method","name":"active?","children":[],"call":["@connection status == ","@connection status "]}," ActiveRecord ConnectionAdapters FrontBaseAdapter quoted_false":{"type":"method","name":"quoted_false","children":[],"call":[]}," ActiveRecord ConnectionAdapters FrontBaseAdapter quoted_true":{"type":"method","name":"quoted_true","children":[],"call":[]}," ActiveRecord ConnectionAdapters FrontBaseAdapter quote_column_name":{"type":"method","name":"quote_column_name","children":[],"call":[]}," ActiveRecord ConnectionAdapters FrontBaseAdapter quote_string":{"type":"method","name":"quote_string","children":[],"call":["s gsub "]}," ActiveRecord ConnectionAdapters FrontBaseAdapter quote":{"type":"method","name":"quote","children":[],"call":[" quote_string ","value to_yaml "," quoted_date ","value strftime ","value send zero? ","value send ","(sym :hour) all? ","value kind_of? "," raise ","column type ","value to_s "," quoted_false ","column type == "," quoted_true ","(sym :integer) include? ","value unpack first ","value unpack ","column type inspect ","clob_handle handle "," puts ","value to_s length ","@connection create_clob ","blob_handle handle ","@connection create_blob ","value to_s unpack first ","value to_s unpack ","value to_d to_s ","value to_d ","value to_f to_s ","value to_f ","value to_i to_s ","value to_i ","value nil? ","value class ","value inspect ","value quoted_id ","value respond_to? "," quote_value unpack first tring "," quoted_false  to_yaml "," quoted_true  to_yaml ","value to_s unpack first  to_yaml ","value value unpack first trftime "," quoted_false  strftime "," quoted_true  strftime ","value to_s unpack first  strftime ","value value unpack first end zero? "," quoted_false  send zero? "," quoted_true  send zero? ","value to_s unpack first  send zero? ","value value unpack first end "," quoted_false  send "," quoted_true  send ","value to_s unpack first  send ","(value unpack first ym :hour) all? "," quoted_false  kind_of? "," quoted_true  kind_of? ","value to_s unpack first  kind_of? "," raivalue unpack first e ","value to_value unpack first  "," quoted_false  to_s "," quoted_true  to_s ","value to_s unpack first  to_s "," quoted_falvalue unpack first e ","(value unpack first ym :integer) include? ","value unpack firvalue unpack first t "," quoted_false  unpack first "," quoted_true  unpack first ","value to_s unpack first  unpack first "," quoted_false  unpack "," quoted_true  unpack ","value to_s unpack first  unpack ","column type invalue unpack first pect ","@connection create_clob  handle "," putvalue unpack first  ","value to_value unpack first  length "," quoted_false  to_s length "," quoted_true  to_s length ","value to_s unpack first  to_s length ","@connection create_blob  handle ","value to_value unpack first  unpack firvalue unpack first t "," quoted_false  to_s unpack first "," quoted_true  to_s unpack first ","value to_s unpack first  to_s unpack first ","value to_value unpack first  unpack "," quoted_false  to_s unpack "," quoted_true  to_s unpack ","value to_s unpack first  to_s unpack ","value to_d to_value unpack first  "," quoted_false  to_d to_s "," quoted_true  to_d to_s ","value to_s unpack first  to_d to_s "," quoted_false  to_d "," quoted_true  to_d ","value to_s unpack first  to_d ","value to_f to_value unpack first  "," quoted_false  to_f to_s "," quoted_true  to_f to_s ","value to_s unpack first  to_f to_s "," quoted_false  to_f "," quoted_true  to_f ","value to_s unpack first  to_f ","value to_i to_value unpack first  "," quoted_false  to_i to_s "," quoted_true  to_i to_s ","value to_s unpack first  to_i to_s "," quoted_false  to_i "," quoted_true  to_i ","value to_s unpack first  to_i "," quoted_false  nil? "," quoted_true  nil? ","value to_s unpack first  nil? ","value clavalue unpack first value unpack first  "," quoted_false  class "," quoted_true  class ","value to_s unpack first  class ","value invalue unpack first pect "," quoted_false  inspect "," quoted_true  inspect ","value to_s unpack first  inspect "," quoted_false  quoted_id "," quoted_true  quoted_id ","value to_s unpack first  quoted_id ","value revalue unpack first pond_to? "," quoted_false  respond_to? "," quoted_true  respond_to? ","value to_s unpack first  respond_to? "]}," ActiveRecord ConnectionAdapters FrontBaseAdapter native_database_types":{"type":"method","name":"native_database_types","children":[],"call":[]}," ActiveRecord ConnectionAdapters FrontBaseAdapter supports_migrations?":{"type":"method","name":"supports_migrations?","children":[],"call":[]}," ActiveRecord ConnectionAdapters FrontBaseAdapter adapter_name":{"type":"method","name":"adapter_name","children":[],"call":[]}," ActiveRecord ConnectionAdapters FrontBaseAdapter initialize":{"type":"method","name":"initialize","children":[],"call":[" rollback_db_transaction "]}," ActiveRecord ConnectionAdapters FrontBaseAdapter compare_versions":{"type":"method","name":"compare_versions","children":[],"call":["v1_seg length <=> ","v2_seg length ","v1_seg length ","step == ","v1_seg [] to_i <=> ","v2_seg [] to_i ","v2_seg [] ","v1_seg [] to_i ","v1_seg [] ","0 upto ","(send\n  (lvar :v1_seg) :length) min ","v2 split ","v1 split ","v1 split  length <=> ","v2 split  length ","v1 split  length ","v1 split  [] to_i <=> ","v2 split  [] to_i ","v2 split  [] ","v1 split  [] to_i ","v1 split  [] ","(send\n  (lvar :v1 split ) :length) min "]}," ActiveRecord ConnectionAdapters FrontBaseColumn simplified_type":{"type":"method","name":"simplified_type","children":[],"call":[" puts ","ret_type inspect ","limit == ","field_type == "]}," ActiveRecord ConnectionAdapters FrontBaseColumn type_cast_code":{"type":"method","name":"type_cast_code","children":[],"call":[" type == "," type "]}," ActiveRecord ConnectionAdapters FrontBaseColumn type_cast":{"type":"method","name":"type_cast","children":[],"call":["ActiveRecord ConnectionAdapters TwelveByteKey  new "," type == "," type "]}," ActiveRecord ConnectionAdapters FrontBaseColumn initialize":{"type":"method","name":"initialize","children":[],"call":[" type_cast ","buffer << ","h hex chr ","h hex ","@default scan ","@default != ","@default == ","@default include? ","@default gsub! ","(sym :float) include? ","(sym :string) include? ","nullable == "," simplified_type "," type_cast  scan ","@default ==  scan "," type_cast  != ","@default ==  != "," type_cast  == ","@default ==  == "," type_cast  include? ","@default ==  include? "," type_cast  gsub! ","@default ==  gsub! "]}," ActiveRecord ConnectionAdapters TwelveByteKey key_ip_component":{"type":"method","name":"key_ip_component","children":[],"call":["ip_component []= ","ip & ","(send\n  (lvar :ip) :&\n  (int 65280)) >> ","(send\n  (lvar :ip) :&\n  (int 16711680)) >> ","(send\n  (lvar :ip) :&\n  (int 4278190080)) >> ","addr_subset [] << | | | ","addr_subset [] ","addr_subset [] << | | ","addr_subset [] << ","addr_subset [] << | ","packed [] ","Socket  pack_sockaddr_in ","BasicSocket  do_not_reverse_lookup= ","udpsocket addr [] ","udpsocket addr ","udpsocket connect ","UDPSocket  new ","BasicSocket  do_not_reverse_lookup ","@@mutex synchronize ","@@key_cached_ip_component nil? ","addr_subset [] << | | | _component []= ","addr_subset [] << | | |  & ","(send\n  (lvar :addr_subset [] << | | | ) :&\n  (int 65280)) >> ","(send\n  (lvar :addr_subset [] << | | | ) :&\n  (int 16711680)) >> ","(send\n  (lvar :addr_subset [] << | | | ) :&\n  (int 4278190080)) >> ","packed []  [] << | | | ","packed []  [] ","packed []  [] << | | ","packed []  [] << ","packed []  [] << | ","Socket  pack_sockaddr_in  [] ","UDPSocket  new  addr [] ","UDPSocket  new  addr ","UDPSocket  new  connect ","@@key_cached_addr_subset [] << | | | _component nil? "]}," ActiveRecord ConnectionAdapters TwelveByteKey key_time_component":{"type":"method","name":"key_time_component","children":[],"call":["time_component []= ","time & ","(send\n  (lvar :time) :&\n  (int 65280)) >> ","(send\n  (lvar :time) :&\n  (int 16711680)) >> ","(send\n  (lvar :time) :&\n  (int 4278190080)) >> ","Time  new to_i ","Time  new ","Time  new to_i _component []= ","Time  new to_i  & ","(send\n  (lvar :Time  new to_i ) :&\n  (int 65280)) >> ","(send\n  (lvar :Time  new to_i ) :&\n  (int 16711680)) >> ","(send\n  (lvar :Time  new to_i ) :&\n  (int 4278190080)) >> "]}," ActiveRecord ConnectionAdapters TwelveByteKey key_pid_component":{"type":"method","name":"key_pid_component","children":[],"call":["pid_component []= ","pid >> ","@@mutex synchronize ","@@key_cached_pid_component nil? "]}," ActiveRecord ConnectionAdapters TwelveByteKey key_sequence_component":{"type":"method","name":"key_sequence_component","children":[],"call":["sequence_component []= ","seq >> ","(send\n  (cvar :@@sequence_number) :+\n  (int 1)) % ","@@sequence_number + ","@@mutex synchronize ","(send\n  (cvar :(send\n  (cvar :@@sequence_number) :+\n  (int 1)) % ) :+\n  (int 1)) % ","(send\n  (cvar :@@sequence_number) :+\n  (int 1)) %  + "]}," ActiveRecord ConnectionAdapters TwelveByteKey inspect":{"type":"method","name":"inspect","children":[],"call":[" unpack first upcase "," unpack first "," unpack "]}," ActiveRecord ConnectionAdapters TwelveByteKey initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","string size == ","string size ","x hex chr ","x hex ","string gsub! ","new_key []= "," class key_ip_component "," class "," class key_time_component "," class key_pid_component "," class key_sequence_component "," replace ","_ * ","string nil? "," replace  []= "]}," ActiveRecord Base frontbase_connection":{"type":"method","name":"frontbase_connection","children":[],"call":["ConnectionAdapters FrontBaseAdapter  new "," logger ","FBSQL_Connect  connect "," raise ","The FrontBase adapter requires ruby-frontbase version 1.0.0 or greater; you appear  << ","ActiveRecord ConnectionAdapters FrontBaseAdapter  compare_versions == ","ActiveRecord ConnectionAdapters FrontBaseAdapter  compare_versions "," require_library_or_gem "," class const_defined? "," class "," colorize_logging= ","dbpassword nil? ","config [] ","config symbolize_keys "," define_attr_method ","Proc  new ","config []  nil? ","dbconfig []  nil? ","config symbolize_keys  [] ","config symbolize_keys  symbolize_keys "]}," ActiveRecord ConnectionAdapters FirebirdAdapter non_existent_domain_error?":{"type":"method","name":"non_existent_domain_error?","children":[],"call":["$! message include? ","$! message "]}," ActiveRecord ConnectionAdapters FirebirdAdapter table_has_constraints_or_dependencies?":{"type":"method","name":"table_has_constraints_or_dependencies?","children":[],"call":[" select empty? ! "," select empty? "," select ","table_name to_s upcase ","table_name to_s ","table_name to_s upcase  to_s upcase ","table_name to_s upcase  to_s "]}," ActiveRecord ConnectionAdapters FirebirdAdapter create_boolean_domain":{"type":"method","name":"create_boolean_domain","children":[],"call":[" execute "," quoted_false "," quoted_true "," boolean_domain [] "," boolean_domain "]}," ActiveRecord ConnectionAdapters FirebirdAdapter drop_sequence":{"type":"method","name":"drop_sequence","children":[],"call":["FireRuby Generator  new drop ","FireRuby Generator  new ","sequence_name to_s "]}," ActiveRecord ConnectionAdapters FirebirdAdapter create_sequence":{"type":"method","name":"create_sequence","children":[],"call":["FireRuby Generator  create ","sequence_name to_s "]}," ActiveRecord ConnectionAdapters FirebirdAdapter sequence_exists?":{"type":"method","name":"sequence_exists?","children":[],"call":["FireRuby Generator  exists? "]}," ActiveRecord ConnectionAdapters FirebirdAdapter copy_sequence_value":{"type":"method","name":"copy_sequence_value","children":[],"call":[" execute "," default_sequence_name ","FireRuby Generator  new last ","FireRuby Generator  new "]}," ActiveRecord ConnectionAdapters FirebirdAdapter copy_table_data":{"type":"method","name":"copy_table_data","children":[],"call":[" execute "]}," ActiveRecord ConnectionAdapters FirebirdAdapter copy_table_indexes":{"type":"method","name":"copy_table_indexes","children":[],"call":[" add_index ","index columns ","options []= ","index unique ","index name gsub ","to to_s ","from to_s ","index name "," raise ","(str \"Cannot rename index \") << << ","(str \"Cannot rename index \") << ","index name [] "," indexes each "," indexes "]}," ActiveRecord ConnectionAdapters FirebirdAdapter copy_table":{"type":"method","name":"copy_table","children":[],"call":["table column ","column type ","column name ","opts merge ","column send ","(sym :limit) inject ","from_columns each ","col name == ","table_opts [] ","col name "," columns reject "," columns "," create_table ","table_opts []= "," primary_key "]}," ActiveRecord ConnectionAdapters FirebirdAdapter change_column_position":{"type":"method","name":"change_column_position","children":[],"call":[" execute "]}," ActiveRecord ConnectionAdapters FirebirdAdapter change_column_type":{"type":"method","name":"change_column_type","children":[],"call":[" execute "," create_boolean_domain "," raise "," non_existent_domain_error? "," type_to_sql ","options [] "]}," ActiveRecord ConnectionAdapters FirebirdAdapter index_metadata":{"type":"method","name":"index_metadata","children":[],"call":[" execute ","sql << ","table_name to_s upcase ","table_name to_s "]}," ActiveRecord ConnectionAdapters FirebirdAdapter primary_key":{"type":"method","name":"primary_key","children":[],"call":["pk_row [] rstrip downcase ","pk_row [] rstrip ","pk_row [] "," index_metadata to_a first "," index_metadata to_a "," index_metadata "," index_metadata to_a first  [] rstrip downcase "," index_metadata to_a first  [] rstrip "," index_metadata to_a first  [] "]}," ActiveRecord ConnectionAdapters FirebirdAdapter float_sql_type":{"type":"method","name":"float_sql_type","children":[],"call":["limit to_i <= ","limit to_i "]}," ActiveRecord ConnectionAdapters FirebirdAdapter integer_sql_type":{"type":"method","name":"integer_sql_type","children":[],"call":[]}," ActiveRecord ConnectionAdapters FirebirdAdapter type_to_sql":{"type":"method","name":"type_to_sql","children":[],"call":[" float_sql_type "," integer_sql_type "]}," ActiveRecord ConnectionAdapters FirebirdAdapter dump_schema_information":{"type":"method","name":"dump_schema_information","children":[],"call":[" << "]}," ActiveRecord ConnectionAdapters FirebirdAdapter rename_table":{"type":"method","name":"rename_table","children":[],"call":[" drop_table "," raise "," copy_sequence_value "," copy_table_data "," copy_table_indexes "," copy_table "," transaction ","(str \"Table \") << << ","(str \"Table \") << "," table_has_constraints_or_dependencies? "]}," ActiveRecord ConnectionAdapters FirebirdAdapter remove_index":{"type":"method","name":"remove_index","children":[],"call":[" execute "," quote_column_name "," index_name "]}," ActiveRecord ConnectionAdapters FirebirdAdapter rename_column":{"type":"method","name":"rename_column","children":[],"call":[" execute "]}," ActiveRecord ConnectionAdapters FirebirdAdapter change_column_default":{"type":"method","name":"change_column_default","children":[],"call":[" remove_column "," execute "," add_column "," transaction "," ar_to_fb_case ","column_name to_s ","table_name to_s upcase ","table_name to_s ","table_name to_s upcase  to_s upcase ","table_name to_s upcase  to_s "]}," ActiveRecord ConnectionAdapters FirebirdAdapter change_column":{"type":"method","name":"change_column","children":[],"call":[" change_column_default ","options [] "," options_include_default? "," change_column_position ","options include? "," change_column_type "]}," ActiveRecord ConnectionAdapters FirebirdAdapter add_column":{"type":"method","name":"add_column","children":[],"call":[" create_boolean_domain "," raise "," non_existent_domain_error? "]}," ActiveRecord ConnectionAdapters FirebirdAdapter drop_table":{"type":"method","name":"drop_table","children":[],"call":[" drop_sequence "," sequence_exists? "," default_sequence_name ","options [] ","options [] == "]}," ActiveRecord ConnectionAdapters FirebirdAdapter create_table":{"type":"method","name":"create_table","children":[],"call":[" create_sequence "," default_sequence_name ","options [] ","options [] == "," create_boolean_domain "," raise "," non_existent_domain_error? "]}," ActiveRecord ConnectionAdapters FirebirdAdapter indexes":{"type":"method","name":"indexes","children":[],"call":["indexes last columns << ","row [] rstrip downcase ","row [] rstrip ","row [] ","indexes last columns ","indexes last ","indexes << ","IndexDefinition  new ","row [] == ","indexes last name != ","indexes last name ","indexes empty? "," index_metadata inject "," index_metadata "]}," ActiveRecord ConnectionAdapters FirebirdAdapter tables":{"type":"method","name":"tables","children":[],"call":["row [] rstrip downcase ","row [] rstrip ","row [] "," execute collect "," execute "]}," ActiveRecord ConnectionAdapters FirebirdAdapter recreate_database!":{"type":"method","name":"recreate_database!","children":[],"call":["FireRuby Database  create ","@connection_params [] ","@connection database file ","@connection database ","@connection database drop "," disconnect! "," execute to_a first [] rstrip "," execute to_a first [] "," execute to_a first "," execute to_a "," execute "]}," ActiveRecord ConnectionAdapters FirebirdAdapter current_database":{"type":"method","name":"current_database","children":[],"call":["File  basename ","@connection database file split last ","@connection database file split ","@connection database file ","@connection database ","@connection database @connection database file split last  split last ","@connection database @connection database file split last  split ","@connection database @connection database file split last  "]}," ActiveRecord ConnectionAdapters FirebirdAdapter disconnect!":{"type":"method","name":"disconnect!","children":[],"call":["@connection close "]}," ActiveRecord ConnectionAdapters FirebirdAdapter native_database_types":{"type":"method","name":"native_database_types","children":[],"call":[" boolean_domain "]}," ActiveRecord ConnectionAdapters FirebirdAdapter supports_migrations?":{"type":"method","name":"supports_migrations?","children":[],"call":[]}," ActiveRecord ConnectionAdapters FirebirdColumn decide_limit":{"type":"method","name":"decide_limit","children":[],"call":["@firebird_type == "," number? "," text? "]}," ActiveRecord ConnectionAdapters FirebirdColumn firebird_cast_default":{"type":"method","name":"firebird_cast_default","children":[],"call":[" raise ","connection execute to_a first [] ","connection execute to_a first ","connection execute to_a ","connection execute ","conn adapter_name == ","conn adapter_name ","Base  active_connections values detect ","Base  active_connections values ","Base  active_connections "," column_def "]}," ActiveRecord ConnectionAdapters FirebirdColumn decide_default":{"type":"method","name":"decide_default","children":[],"call":[" firebird_cast_default ","(sym :text) include? "," type ","@default =~ "]}," ActiveRecord ConnectionAdapters FirebirdColumn value_to_boolean":{"type":"method","name":"value_to_boolean","children":[],"call":[]}," FireRuby Database new_from_config":{"type":"method","name":"new_from_config","children":[],"call":[]}," FireRuby Database db_string_for":{"type":"method","name":"db_string_for","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter requires_reloading?":{"type":"method","name":"requires_reloading?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SchemaStatements options_include_default?":{"type":"method","name":"options_include_default?","children":[],"call":["(and\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :null)) :==\n    (false))\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :default)) :nil?)) ! ","options [] nil? ","options [] ","options [] == ","options include? "]}," ActiveRecord ConnectionAdapters SchemaStatements add_order_by_for_association_limiting!":{"type":"method","name":"add_order_by_for_association_limiting!","children":[],"call":["sql << ","options [] "]}," ActiveRecord ConnectionAdapters SchemaStatements distinct":{"type":"method","name":"distinct","children":[],"call":[" columns_for_distinct ","ActiveSupport Deprecation  warn "]}," ActiveRecord ConnectionAdapters ColumnDefinition sql_type":{"type":"method","name":"sql_type","children":[],"call":[" type "," base type_to_sql "," scale "," precision "," limit "," type to_sym "," base "]}," ActiveRecord ConnectionAdapters Column extract_scale":{"type":"method","name":"extract_scale","children":[],"call":["4 to_i "]}," ActiveRecord ConnectionAdapters Column extract_precision":{"type":"method","name":"extract_precision","children":[],"call":["2 to_i ","sql_type =~ "]}," ActiveRecord ConnectionAdapters Column microseconds":{"type":"method","name":"microseconds","children":[],"call":["(send\n  (begin\n    (send\n      (send\n        (send\n          (lvar :time) :[]\n          (sym :sec_fraction)) :to_f) :%\n      (int 1))) :*\n  (int 1000000)) to_i ","(send\n  (send\n    (send\n      (lvar :time) :[]\n      (sym :sec_fraction)) :to_f) :%\n  (int 1)) * ","time [] to_f % ","time [] to_f ","time [] ","(send\n  (send\n    (lvar :time) :[]\n    (sym :sec_fraction)) :*\n  (int 1000000)) to_i ","time [] * "]}," ActiveRecord ConnectionAdapters Column value_to_decimal":{"type":"method","name":"value_to_decimal","children":[],"call":["value to_s to_d ","value to_s ","value to_d ","value respond_to? ","value is_a? ","value class == ","value class "]}," ActiveRecord Base clear_reloadable_connections!":{"type":"method","name":"clear_reloadable_connections!","children":[],"call":["@@active_connections delete ","conn disconnect! ","conn requires_reloading? ","@@active_connections each ","@@active_connections [] delete ","@@active_connections [] ","conns each "]}," ActiveRecord Callbacks valid_with_callbacks?":{"type":"method","name":"valid_with_callbacks?","children":[],"call":[" callback "," new_record? "," valid_without_callbacks? ","result == "," callback == "," == "," _run_validation_callbacks "," valid_without_callbacks?  == "," callback  == "]}," ActiveRecord Callbacks included":{"type":"method","name":"included","children":[],"call":[]}," ActiveRecord Calculations ClassMethods construct_count_options_from_legacy_args":{"type":"method","name":"construct_count_options_from_legacy_args","children":[],"call":["options merge! ","args [] ","ActiveSupport Deprecation  warn "," caller ","(str \"You called count(\") + + ","(str \"You called count(\") + ","args [] inspect ","args [] is_a? ","args size > ","args size "," raise ","args inspect ","args []  merge! "]}," ActiveRecord AttributeMethods attribute_before_type_cast":{"type":"method","name":"attribute_before_type_cast","children":[],"call":[" read_attribute_before_type_cast "]}," ActiveRecord AttributeMethods attribute=":{"type":"method","name":"attribute=","children":[],"call":[" write_attribute "]}," ActiveRecord AttributeMethods attribute?":{"type":"method","name":"attribute?","children":[],"call":[" query_attribute "]}," ActiveRecord AttributeMethods ClassMethods attribute_method_suffixes":{"type":"method","name":"attribute_method_suffixes","children":[],"call":[]}," ActiveRecord AttributeMethods ClassMethods rebuild_attribute_method_regexp":{"type":"method","name":"rebuild_attribute_method_regexp","children":[],"call":["(str \"(\") freeze ","suffixes join ","Regexp  escape "," attribute_method_suffixes map "," attribute_method_suffixes "]}," ActiveRecord AttributeMethods ClassMethods match_attribute_method?":{"type":"method","name":"match_attribute_method?","children":[],"call":["@@attribute_method_regexp match "," rebuild_attribute_method_regexp "]}," ActiveRecord AttributeMethods ClassMethods attribute_method_suffix":{"type":"method","name":"attribute_method_suffix","children":[],"call":[" rebuild_attribute_method_regexp "," attribute_method_suffixes concat "," attribute_method_suffixes "]}," ActiveRecord AttributeMethods included":{"type":"method","name":"included","children":[],"call":[]}," ActiveRecord Associations included":{"type":"method","name":"included","children":[],"call":[]}," ActiveRecord ReadOnlyAssociation initialize":{"type":"method","name":"initialize","children":[],"call":["reflection through_reflection name inspect ","reflection through_reflection name ","reflection through_reflection "]}," ActiveRecord HasManyThroughCantAssociateNewRecords initialize":{"type":"method","name":"initialize","children":[],"call":["reflection source_reflection name ","reflection source_reflection ","reflection source_reflection class_name ","reflection name ","owner class name ","owner class "]}," ActiveRecord Associations HasManyThroughAssociation construct_quoted_owner_attributes":{"type":"method","name":"construct_quoted_owner_attributes","children":[],"call":["@owner quoted_id ","reflection primary_key_name ","reflection klass quote_value ","reflection klass columns_hash [] ","reflection klass columns_hash ","reflection klass ","@owner class base_class name to_s ","@owner class base_class name ","@owner class base_class ","@owner class ","reflection options [] ","reflection options "," owner_quoted_id ","@owner [] ","reflection klass primary_key ","reflection macro == ","reflection macro ","reflection klreflection options [] s quote_value ","reflection klreflection options [] s columns_hreflection options [] h [] ","reflection klreflection options [] s columns_hreflection options [] h ","reflection klreflection options [] s ","@owner clreflection options [] s breflection options [] e_clreflection options [] s name to_s ","@owner clreflection options [] s breflection options [] e_clreflection options [] s name ","@owner clreflection options [] s breflection options [] e_clreflection options [] s ","@owner clreflection options [] s ","reflection klreflection options [] s primary_key "]}," ActiveRecord Associations HasManyThroughAssociation construct_join_attributes":{"type":"method","name":"construct_join_attributes","children":[],"call":[" construct_owner_attributes merge ","associate id ","@reflection source_reflection association_foreign_key ","@reflection source_reflection "," construct_owner_attributes ","@reflection through_reflection ","join_attributes merge! ","associate class base_class name to_s ","associate class base_class name ","associate class base_class ","associate class ","@reflection source_reflection options [] ","@reflection source_reflection options ","@reflection options [] ","@reflection options "," returning ","@reflection source_reflection primary_key_name "," raise ","ActiveRecord HasManyThroughCantAssociateThroughHasManyReflection  new ","@reflection source_reflection macro == ","@reflection source_reflection macro ","ActiveRecord HasManyThroughCantAssociateThroughHasOneOrManyReflection  new ","(sym :has_one) include? "," construct_owner_attributes merge  merge! "]}," ActiveRecord Associations HasManyThroughAssociation construct_owner_attributes":{"type":"method","name":"construct_owner_attributes","children":[],"call":["@owner id ","reflection primary_key_name ","@owner class base_class name to_s ","@owner class base_class name ","@owner class base_class ","@owner class ","reflection options [] ","reflection options ","@owner clreflection options [] s breflection options [] e_clreflection options [] s name to_s ","@owner clreflection options [] s breflection options [] e_clreflection options [] s name ","@owner clreflection options [] s breflection options [] e_clreflection options [] s ","@owner clreflection options [] s "]}," ActiveRecord Associations HasManyThroughAssociation sum":{"type":"method","name":"sum","children":[],"call":[" calculate "]}," ActiveRecord Associations HasManyThroughAssociation create!":{"type":"method","name":"create!","children":[],"call":[" << ","@reflection klass create! ","@reflection klass ","@reflection klass with_scope ","@reflection klass transaction ","@reflection klass send ","@reflection create_association! "," transaction "," create_record "]}," ActiveRecord Associations HasManyThroughAssociation build":{"type":"method","name":"build","children":[],"call":[" raise ","ActiveRecord HasManyThroughCantAssociateNewRecords  new ","@reflection through_reflection "]}," ActiveRecord Associations HasManyThroughAssociation delete":{"type":"method","name":"delete","children":[],"call":["@target delete ","@owner send delete ","@owner send ","through name ","@owner send send ","associate id ","records each ","through klass transaction ","through klass ","@reflection through_reflection ","@reflection source_reflection association_foreign_key ","@reflection source_reflection ","records empty? ","associate new_record? ","records reject! "," raise_on_type_mismatch "," flatten_deeper ","@owner send proxy_target delete ","klass delete_all "," construct_join_attributes ","@owner send proxy_target ","@reflection through_reflection name "," raise ","ActiveRecord HasManyThroughCantDissociateNewRecords  new ","associate new_record? ! ","associate respond_to? "," flatten_deeper each ","klass transaction "," load_target ","@owner new_record? ","@reflection through_reflection  name "," flatten_deeper  each ","@reflection through_reflection  klass transaction ","through through klass  transaction ","@reflection through_reflection  klass ","through through klass  ","@reflection @reflection through_reflection _reflection "," flatten_deeper  empty? "," flatten_deeper  reject! ","through klass  delete_all ","@reflection @reflection through_reflection _reflection name ","through klass  transaction "]}," ActiveRecord Associations HasManyThroughAssociation <<":{"type":"method","name":"<<","children":[],"call":["@target << ","@owner send proxy_target << ","klass create! ","klass with_scope "," construct_join_attributes ","@owner send proxy_target ","@owner send ","@reflection through_reflection name ","@reflection through_reflection "," raise ","ActiveRecord HasManyThroughCantAssociateNewRecords  new ","associate new_record? ! ","associate new_record? ","associate respond_to? "," raise_on_type_mismatch "," flatten_deeper each "," flatten_deeper ","klass transaction ","through klass "," load_target ","@owner new_record? ","records empty? "," loaded? ","klass send ","through klass  create! ","through klass  with_scope ","@reflection @reflection through_reflection _reflection name ","@reflection @reflection through_reflection _reflection ","through klass  transaction ","through through klass  ","@reflection through_reflection  klass ","through klass  send "]}," ActiveRecord Associations HasManyAssociation load_target":{"type":"method","name":"load_target","children":[],"call":[" target "," loaded "," reset "," find_target ","(send\n  (send nil :find_target) :+\n  (ivar :@target)) uniq "," find_target + ","@target any? ","@target is_a? "," loaded? ! "," loaded? "," foreign_key_present ","@owner new_record? ! ","@owner new_record? ","(send\n  (send nil :find_target) :+\n  (ivar : find_target )) uniq ","(send\n  (send nil :find_target) :+\n  (ivar :(send\n  (send nil :find_target) :+\n  (ivar :@target)) uniq )) uniq "," find_target  any? ","(send\n  (send nil :find_target) :+\n  (ivar :@target)) uniq  any? "," find_target  is_a? ","(send\n  (send nil :find_target) :+\n  (ivar :@target)) uniq  is_a? "]}," ActiveRecord Associations HasAndBelongsToManyAssociation create":{"type":"method","name":"create","children":[],"call":[" insert_record ","@owner new_record? "," build "," create ","attributes collect ","attributes is_a? "," create_record "," insert_ build  ","@owner new_ build ? "," create_ build  "]}," ActiveRecord Associations AssociationProxy flatten_deeper":{"type":"method","name":"flatten_deeper","children":[],"call":["(send\n  (lvar :array) :collect) flatten ","element flatten ","element respond_to? ","array collect ","element is_a? ! ","element is_a? ","array flatten "]}," ActiveRecord Associations AssociationProxy proxy_target":{"type":"method","name":"proxy_target","children":[],"call":[]}," ActiveRecord Associations AssociationProxy proxy_reflection":{"type":"method","name":"proxy_reflection","children":[],"call":[]}," ActiveRecord Associations AssociationProxy proxy_owner":{"type":"method","name":"proxy_owner","children":[],"call":[]}," ActiveRecord Associations AssociationCollection find_target":{"type":"method","name":"find_target","children":[],"call":[" uniq ","@reflection options [] ","@reflection options "," find ","@reflection klass find_by_sql ","@reflection klass "," set_inverse_instance ","records each "," find  each ","@reflection klass find_by_sql  each "," uniq  each "]}," ActiveRecord Associations AssociationCollection reset_target!":{"type":"method","name":"reset_target!","children":[],"call":["Array  new "]}," ActiveRecord Associations AssociationCollection sum":{"type":"method","name":"sum","children":[],"call":[" calculate "," block_given? "]}," ActiveRecord Acts Tree included":{"type":"method","name":"included","children":[],"call":[]}," ActiveRecord Acts NestedSet included":{"type":"method","name":"included","children":[],"call":[]}," ActiveRecord Acts List included":{"type":"method","name":"included","children":[],"call":[]}," ActiveRecord HasManyThroughAssociationPointlessSourceTypeError initialize":{"type":"method","name":"initialize","children":[],"call":["source_reflection name ","reflection through_reflection class_name ","reflection through_reflection ","reflection name "]}," ActiveRecord Associations HasManyThroughAssociation count":{"type":"method","name":"count","children":[],"call":["@reflection klass count ","@reflection klass ","@reflection klass send "," construct_scope ","options merge! ","@reflection klass primary_key ","@reflection klass table_name ","column_name == ","@reflection options [] ","@reflection options ","@reflection quoted_table_name "]}," ActiveRecord HasManyThroughCantDissociateNewRecords initialize":{"type":"method","name":"initialize","children":[],"call":["reflection source_reflection name ","reflection source_reflection ","reflection source_reflection class_name ","reflection name ","owner class name ","owner class "]}," ActiveRecord Timestamp timestamp_before_update":{"type":"method","name":"timestamp_before_update","children":[],"call":[" write_attribute ","Time  now "," respond_to? "," record_timestamps "]}," ActiveRecord Timestamp timestamp_before_create":{"type":"method","name":"timestamp_before_create","children":[],"call":[" timestamp_before_update "," write_attribute ","Time  now "," created_on nil? "," created_on "," respond_to? "," record_timestamps "," created_at nil? "," created_at "]}," silence_warnings":{"type":"method","name":"silence_warnings","children":[],"call":[]}," ClassInheritableAttributes ClassMethods reset_inheritable_attributes":{"type":"method","name":"reset_inheritable_attributes","children":[],"call":[" inheritable_attributes clear "," inheritable_attributes "]}," Test Unit TestCase fixture_table_names":{"type":"method","name":"fixture_table_names","children":[],"call":[" class read_inheritable_attribute "," class "]}," Test Unit TestCase setup":{"type":"method","name":"setup","children":[],"call":[" instantiate_fixtures "," fixture_table_names "]}," ActiveRecord SQLServerBaseExtensions attributes_with_quotes":{"type":"method","name":"attributes_with_quotes","children":[],"call":["attrs_quoted []= "," quote ","columns_hash [] ","pair first ","pair last ","attrs inject ","columns_hash [] identity ","attrs reject ","@attributes dup "," class columns_hash "," class ","@attributes dup _quoted []= "," class columns_hash  [] ","@attributes dup  inject "," class columns_hash  [] identity ","@attributes dup  reject "," class  class columns_hash  "]}," ActiveRecord SQLServerBaseExtensions ClassMethods find_all":{"type":"method","name":"find_all","children":[],"call":[" find_by_sql ","sql << ","orderings nil? "," add_conditions! "," table_name ","limit nil? "]}," ActiveRecord SQLServerBaseExtensions ClassMethods find_first":{"type":"method","name":"find_first","children":[],"call":[" instantiate ","record nil? "," connection select_one "," name "," connection ","sql << ","orderings nil? "," add_conditions! "," table_name "," connection select_one  nil? "]}," ActiveRecord SQLServerBaseExtensions append_features":{"type":"method","name":"append_features","children":[],"call":[]}," ActiveRecord Associations ClassMethods reset_associations_loaded":{"type":"method","name":"reset_associations_loaded","children":[],"call":[" associations_loaded= "]}," ActiveRecord Associations ClassMethods require_association":{"type":"method","name":"require_association","children":[],"call":[" require "," load "," silence_warnings "," reload_associations "," associations_loaded << "," associations_loaded "," associations_loaded include? ! "," associations_loaded include? "]}," assert":{"type":"method","name":"assert","children":[],"call":["Breakpoint  assert ","Binding  of_caller "]}," breakpoint":{"type":"method","name":"breakpoint","children":[],"call":["Breakpoint  breakpoint ","Binding  of_caller "]}," IRB InputCompletor eval":{"type":"method","name":"eval","children":[],"call":[]}," IRB WorkSpace evaluate":{"type":"method","name":"evaluate","children":[],"call":[" old_evaluate ","result extend ","(true) include? ! ","(true) include? ","args [] != ","args [] ","Breakpoint  use_drb? "," old_evaluate  extend "]}," IRB Context evaluate":{"type":"method","name":"evaluate","children":[],"call":[" old_evaluate "," exit ","line chomp == ","line chomp "]}," IRB CurrentContext":{"type":"method","name":"CurrentContext","children":[{"type":"method","name":"last_value","children":[],"asgn":[],"call":[]}],"call":[]}," IRB start":{"type":"method","name":"start","children":[],"call":[]}," Breakpoint use_drb?":{"type":"method","name":"use_drb?","children":[],"call":["@use_drb == "]}," Breakpoint deactivate_drb":{"type":"method","name":"deactivate_drb","children":[],"call":["@service stop_service ","@service nil? "]}," Breakpoint activate_drb":{"type":"method","name":"activate_drb","children":[],"call":[" sleep ","DRbObject  new collision ","DRbObject  new ","DRb  start_service ","DRbService  new ","DRb  install_acl ","ACL  new "," Array each "," Array "]}," Breakpoint DRbService unregister_collision_handler":{"type":"method","name":"unregister_collision_handler","children":[],"call":[" lambda "]}," Breakpoint DRbService register_collision_handler":{"type":"method","name":"register_collision_handler","children":[],"call":[]}," Breakpoint DRbService unregister_eval_handler":{"type":"method","name":"unregister_eval_handler","children":[],"call":[" lambda "]}," Breakpoint DRbService register_eval_handler":{"type":"method","name":"register_eval_handler","children":[],"call":[]}," Breakpoint DRbService unregister_handler":{"type":"method","name":"unregister_handler","children":[],"call":[]}," Breakpoint DRbService register_handler":{"type":"method","name":"register_handler","children":[],"call":[]}," Breakpoint DRbService add_breakpoint":{"type":"method","name":"add_breakpoint","children":[],"call":["@handler call "," sleep ","workspace extend ","IRB WorkSpace  new ","IRB WorkSpace  new  extend "]}," Breakpoint DRbService ping":{"type":"method","name":"ping","children":[],"call":[]}," Breakpoint DRbService collision":{"type":"method","name":"collision","children":[],"call":["@collision_handler call "," sleep "]}," Breakpoint DRbService initialize":{"type":"method","name":"initialize","children":[],"call":["IRB  run_config ","@CONF []= ","IRB  instance_eval "]}," Breakpoint assert":{"type":"method","name":"assert","children":[],"call":[" handle_breakpoint ","Binding  of_caller "," raise ","$DEBUG ! ","Breakpoint  asserts_cause_exceptions ","callstack first match captures ","callstack first match ","callstack first ","callstack slice! ","callstack first [] "," caller ","Breakpoint  optimize_asserts "," caller  first match captures "," caller  first match "," caller  first "," caller  slice! "," caller  first [] "]}," Breakpoint handle_breakpoint":{"type":"method","name":"handle_breakpoint","children":[],"call":["block call ","@drb_service add_breakpoint ","IRB  start ","IRB WorkSpace  new "," puts "," use_drb? ! "," use_drb? "," eval ","file inspect "," catch "]}," Breakpoint CommandBundle client":{"type":"method","name":"client","children":[],"call":["Client  new "," eval "," lambda ","Breakpoint  drb_service eval_handler ","Breakpoint  drb_service ","Breakpoint  use_drb? "," sleep "]}," Breakpoint CommandBundle source_lines":{"type":"method","name":"source_lines","children":[],"call":["lines [] ","end_line - ","start_line - ","break_line + ","(send\n  (lvar :break_line) :-\n  (lvar :context)) max ","break_line - ","line chomp ","File  readlines map ","File  readlines ","break_line +  - ","(send\n  (lvar :break_line) :-\n  (lvar :context)) max  - "]}," Breakpoint CommandBundle Client method_missing":{"type":"method","name":"method_missing","children":[],"call":["result extend ","(true) include? "," eval ","Marshal  dump inspect ","Marshal  dump ","args empty? ","remote call_with_block ","block ! "," eval  extend "," eval  call_with_block "]}," Breakpoint CommandBundle Client eval":{"type":"method","name":"eval","children":[],"call":["@eval_handler call "]}," Breakpoint CommandBundle Client initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Breakpoint breakpoint":{"type":"method","name":"breakpoint","children":[],"call":[" handle_breakpoint ","Binding  of_caller ","Executing break point  + + + ","Executing break point  + + ","Executing break point  + ","id inspect ","callstack first match captures ","callstack first match ","callstack first ","callstack slice! ","callstack first [] "," caller "," caller  first match captures "," caller  first match "," caller  first "," caller  slice! "," caller  first [] "]}," of_caller":{"type":"method","name":"of_caller","children":[],"call":[]}," create":{"type":"method","name":"create","children":[],"call":[]}," ActiveRecord Associations ClassMethods reload_associations_loaded":{"type":"method","name":"reload_associations_loaded","children":[],"call":[" load "," silence_warnings "," associations_loaded each "," associations_loaded "]}," Object const_missing":{"type":"method","name":"const_missing","children":[],"call":[" pre_association_const_missing ","Object  const_get ","Object  const_get ancestors include? ","Object  const_get ancestors "," require_association ","Inflector  underscore ","Inflector  demodulize ","class_id to_s "," pre_dependency_const_missing ","Object  const_defined? "," require_dependency "," raise "," require_or_load ","class_id to_s demodulize underscore ","class_id to_s demodulize "]}," Module mattr_accessor":{"type":"method","name":"mattr_accessor","children":[],"call":[" mattr_writer "," mattr_reader "]}," Module mattr_writer":{"type":"method","name":"mattr_writer","children":[],"call":[" class_eval ","sym id2name ","syms each "]}," Module mattr_reader":{"type":"method","name":"mattr_reader","children":[],"call":[" class_eval ","sym id2name ","syms each "]}," Hash symbolize_keys!":{"type":"method","name":"symbolize_keys!","children":[],"call":[" delete "," []= "," [] ","key to_sym ","key is_a? "," keys each "," keys "]}," Hash symbolize_keys":{"type":"method","name":"symbolize_keys","children":[],"call":["options []= ","key to_sym "," inject "]}," Dependencies require_or_load":{"type":"method","name":"require_or_load","children":[],"call":[" require "," load "," silence_warnings "," mechanism == "," mechanism "," load? "]}," Dependencies clear":{"type":"method","name":"clear","children":[],"call":[" loaded= "]}," Dependencies reload":{"type":"method","name":"reload","children":[],"call":[" load "," silence_warnings ","old_loaded each "," clear "," loaded "," loaded  each "]}," Dependencies associate_with":{"type":"method","name":"associate_with","children":[],"call":[" depend_on "]}," Dependencies depend_on":{"type":"method","name":"depend_on","children":[],"call":[" raise "," require_or_load "," loaded << "," loaded "," loaded include? ! "," loaded include? ","e message "]}," ActiveRecord ConnectionAdapters SQLServerAdapter affected_rows":{"type":"method","name":"affected_rows","children":[],"call":["row [] to_i ","row [] ","conn select_all "," log "]}," ActiveRecord ConnectionAdapters SQLServerAdapter get_offset_amount":{"type":"method","name":"get_offset_amount","children":[],"call":["limit [] to_i + ","limit [] to_i ","limit [] ","limit gsub! split ","limit gsub! ","limit gsub! split  [] to_i + ","limit gsub! split  [] to_i ","limit gsub! split  [] ","limit gsub! split  gsub! split ","limit gsub! split  gsub! "]}," ActiveRecord ConnectionAdapters SQLServerAdapter get_order_by":{"type":"method","name":"get_order_by","children":[],"call":["sql gsub gsub ","sql gsub "]}," ActiveRecord ConnectionAdapters SQLServerAdapter add_limit!":{"type":"method","name":"add_limit!","children":[],"call":["sql gsub! ","limit_amount [] ","sql gsub! << ","order_by [] ","limit_amount size == ","limit_amount size "," get_order_by ","sql sub ","sql include? ","Array  new "," get_offset_amount ","limit to_s include? ","limit to_s ","limit nil? ! ","limit nil? ","sql slice! gsub ","sql slice! ","sql =~ ","Array  new  [] "," get_offset_amount  [] ","sql slice! gsub _amount [] "," get_order_by  [] ","Array  new  size == "," get_offset_amount  size == ","sql slice! gsub _amount size == ","Array  new  size "," get_offset_amount  size ","sql slice! gsub _amount size "," get_ get_order_by  ","sql slice! gsub  to_s include? ","sql slice! gsub  to_s ","sql slice! gsub  nil? ! ","sql slice! gsub  nil? "]}," ActiveRecord ConnectionAdapters DB2Adapter add_limit!":{"type":"method","name":"add_limit!","children":[],"call":["sql << "]}," ActiveRecord Associations AssociationCollection extract_options_from_args!":{"type":"method","name":"extract_options_from_args!","children":[],"call":["@owner send "]}," ActiveRecord Associations AssociationCollection sanitize_sql":{"type":"method","name":"sanitize_sql","children":[],"call":["@association_class send "]}," ActiveSupport CoreExtensions String Inflections foreign_key":{"type":"method","name":"foreign_key","children":[],"call":["Inflector  foreign_key "]}," ActiveSupport CoreExtensions String Inflections classify":{"type":"method","name":"classify","children":[],"call":["Inflector  classify "]}," ActiveSupport CoreExtensions String Inflections tableize":{"type":"method","name":"tableize","children":[],"call":["Inflector  tableize "]}," ActiveSupport CoreExtensions String Inflections demodulize":{"type":"method","name":"demodulize","children":[],"call":["Inflector  demodulize "]}," ActiveSupport CoreExtensions String Inflections underscore":{"type":"method","name":"underscore","children":[],"call":["Inflector  underscore "]}," ActiveSupport CoreExtensions String Inflections camelize":{"type":"method","name":"camelize","children":[],"call":["Inflector  camelize "]}," ActiveSupport CoreExtensions String Inflections singularize":{"type":"method","name":"singularize","children":[],"call":["Inflector  singularize "]}," ActiveSupport CoreExtensions String Inflections pluralize":{"type":"method","name":"pluralize","children":[],"call":["Inflector  pluralize "]}," ActiveSupport CoreExtensions Numeric Time since":{"type":"method","name":"since","children":[],"call":["time + "]}," ActiveSupport CoreExtensions Numeric Time ago":{"type":"method","name":"ago","children":[],"call":["time - "]}," ActiveSupport CoreExtensions Numeric Time years":{"type":"method","name":"years","children":[],"call":[" * ","365 days "]}," ActiveSupport CoreExtensions Numeric Time months":{"type":"method","name":"months","children":[],"call":[" * ","30 days "]}," ActiveSupport CoreExtensions Numeric Time fortnights":{"type":"method","name":"fortnights","children":[],"call":[" * ","2 weeks "]}," ActiveSupport CoreExtensions Numeric Time weeks":{"type":"method","name":"weeks","children":[],"call":[" * ","7 days "]}," ActiveSupport CoreExtensions Numeric Time days":{"type":"method","name":"days","children":[],"call":[" * ","24 hours "]}," ActiveSupport CoreExtensions Numeric Time hours":{"type":"method","name":"hours","children":[],"call":[" * ","60 minutes "]}," ActiveSupport CoreExtensions Numeric Time minutes":{"type":"method","name":"minutes","children":[],"call":[" * "]}," ActiveSupport CoreExtensions Numeric Bytes terabytes":{"type":"method","name":"terabytes","children":[],"call":[" * ","1024 gigabytes "]}," ActiveSupport CoreExtensions Numeric Bytes gigabytes":{"type":"method","name":"gigabytes","children":[],"call":[" * ","1024 megabytes "]}," ActiveSupport CoreExtensions Numeric Bytes megabytes":{"type":"method","name":"megabytes","children":[],"call":[" * ","1024 kilobytes "]}," ActiveSupport CoreExtensions Numeric Bytes kilobytes":{"type":"method","name":"kilobytes","children":[],"call":[" * "]}," ActiveSupport CoreExtensions Numeric Bytes bytes":{"type":"method","name":"bytes","children":[],"call":[]}," ActiveSupport CoreExtensions Hash Keys assert_valid_keys":{"type":"method","name":"assert_valid_keys","children":[],"call":[" raise ","unknown_keys join ","unknown_keys empty? "," keys - "," keys "," keys -  join "," keys -  empty? "]}," ActiveSupport CoreExtensions Hash Keys symbolize_keys!":{"type":"method","name":"symbolize_keys!","children":[],"call":[" delete "," []= "," [] ","key to_sym ","key is_a? "," keys each "," keys "]}," ActiveSupport CoreExtensions Hash Keys symbolize_keys":{"type":"method","name":"symbolize_keys","children":[],"call":["options []= ","key to_sym "," inject "]}," Class inherited_with_inheritable_attributes":{"type":"method","name":"inherited_with_inheritable_attributes","children":[],"call":["child instance_variable_set "," inheritable_attributes dup "," inheritable_attributes "," inherited_without_inheritable_attributes "," respond_to? "]}," Class reset_inheritable_attributes":{"type":"method","name":"reset_inheritable_attributes","children":[],"call":[" inheritable_attributes clear "," inheritable_attributes "]}," Class read_inheritable_attribute":{"type":"method","name":"read_inheritable_attribute","children":[],"call":[" inheritable_attributes [] "," inheritable_attributes "]}," Class write_inheritable_hash":{"type":"method","name":"write_inheritable_hash","children":[],"call":[" write_inheritable_attribute "," read_inheritable_attribute merge "," read_inheritable_attribute "," read_inheritable_attribute nil? "]}," Class write_inheritable_array":{"type":"method","name":"write_inheritable_array","children":[],"call":[" write_inheritable_attribute "," read_inheritable_attribute + "," read_inheritable_attribute "," read_inheritable_attribute nil? "]}," Class write_inheritable_attribute":{"type":"method","name":"write_inheritable_attribute","children":[],"call":[" inheritable_attributes []= "," inheritable_attributes "]}," Class inheritable_attributes":{"type":"method","name":"inheritable_attributes","children":[],"call":[]}," Class class_inheritable_hash":{"type":"method","name":"class_inheritable_hash","children":[],"call":[" class_inheritable_hash_writer "," class_inheritable_reader "]}," Class class_inheritable_array":{"type":"method","name":"class_inheritable_array","children":[],"call":[" class_inheritable_array_writer "," class_inheritable_reader "]}," Class class_inheritable_accessor":{"type":"method","name":"class_inheritable_accessor","children":[],"call":[" class_inheritable_writer "," class_inheritable_reader "]}," Class class_inheritable_hash_writer":{"type":"method","name":"class_inheritable_hash_writer","children":[],"call":[" class_eval ","syms each "]}," Class class_inheritable_array_writer":{"type":"method","name":"class_inheritable_array_writer","children":[],"call":[" class_eval ","syms each "]}," Class class_inheritable_writer":{"type":"method","name":"class_inheritable_writer","children":[],"call":[" class_eval ","syms each "]}," Class class_inheritable_reader":{"type":"method","name":"class_inheritable_reader","children":[],"call":[" class_eval ","syms each "]}," IRB parse_opts":{"type":"method","name":"parse_opts","children":[],"call":[]}," Binding of_caller":{"type":"method","name":"of_caller","children":[],"call":[" set_trace_func ","block arity ","Thread  critical= ","cc call "," raise "," lambda ","Binding.of_caller used in non-method context or  + ","extra_data [] == ","extra_data [] ","type == "," eval ","count == ","args [] ","error call ","Continuation  create ","Thread  critical "]}," Continuation create":{"type":"method","name":"create","children":[],"call":["block call ","args empty? "," callcc "]}," NilClass ==":{"type":"method","name":"==","children":[],"call":["other nil? "]}," ActiveRecord Associations BelongsToAssociation nil?":{"type":"method","name":"nil?","children":[],"call":["@target nil? "," load_target "]}," ActiveRecord Associations BelongsToAssociation reload":{"type":"method","name":"reload","children":[],"call":[" load_target "," reset "]}," Inflector humanize":{"type":"method","name":"humanize","children":[],"call":["lower_case_and_underscored_word to_s gsub capitalize ","lower_case_and_underscored_word to_s gsub ","lower_case_and_underscored_word to_s "]}," ActiveSupport CoreExtensions String Inflections humanize":{"type":"method","name":"humanize","children":[],"call":["Inflector  humanize "]}," Dependencies remove_subclasses_for":{"type":"method","name":"remove_subclasses_for","children":[],"call":["klass remove_subclasses ","classes each "]}," Dependencies load?":{"type":"method","name":"load?","children":[],"call":[" mechanism == "," mechanism "]}," Class subclasses":{"type":"method","name":"subclasses","children":[],"call":["Object  subclasses_of "]}," Class remove_subclasses":{"type":"method","name":"remove_subclasses","children":[],"call":["Object  remove_subclasses_of "]}," Object subclasses_of":{"type":"method","name":"subclasses_of","children":[],"call":["subclasses << ","k to_s ","subclasses include? ","k to_s include? ","superclass == ","k ancestors include? ! ","k ancestors include? ","k ancestors ","ObjectSpace  each_object "]}," Object remove_subclasses_of":{"type":"method","name":"remove_subclasses_of","children":[],"call":["Object  send "," subclasses_of each "," subclasses_of "]}," ActiveRecord ConnectionAdapters SQLServerAdapter query_contains_text_column":{"type":"method","name":"query_contains_text_column","children":[],"call":[]}," ActiveRecord ConnectionAdapters ColumnWithIdentity string_to_time":{"type":"method","name":"string_to_time","children":[],"call":["Time  send ","Base  default_timezone ","time_array []= ","time_array [] to_s ","time_array [] ","time_array [] nil? ","time_array each_index ","ParseDate  parsedate ","string is_a? ","ParseDate  parsedate  []= ","ParseDate  parsedate  [] to_s ","ParseDate  parsedate  [] ","ParseDate  parsedate  [] nil? ","ParseDate  parsedate  each_index "]}," ActiveRecord ConnectionAdapters SQLServerAdapter add_limit_without_offset!":{"type":"method","name":"add_limit_without_offset!","children":[],"call":[" raise "]}," ActiveRecord ConnectionAdapters SQLServerAdapter add_limit_with_offset!":{"type":"method","name":"add_limit_with_offset!","children":[],"call":[" raise "]}," ActiveRecord Validations save_with_validation!":{"type":"method","name":"save_with_validation!","children":[],"call":[" raise ","RecordInvalid  new "," save_without_validation! "," valid? "]}," ActiveRecord Validations ClassMethods create!":{"type":"method","name":"create!","children":[],"call":["object save! "," new "," create! ","attributes collect ","attributes is_a? "," block_given? "," new  save! "]}," ActiveRecord Validations ClassMethods validates_exclusion_of":{"type":"method","name":"validates_exclusion_of","children":[],"call":["record errors add ","configuration [] % ","configuration [] ","record errors ","enum include? "," validates_each "," raise ","enum respond_to? ","configuration update ","attr_names extract_options! ","ActiveRecord Errors  default_error_messages [] ","ActiveRecord Errors  default_error_messages "]}," ActiveRecord Validations ClassMethods evaluate_condition":{"type":"method","name":"evaluate_condition","children":[],"call":[" raise ","Validations need to be either a symbol, string (to be eval'ed), proc/method, or  + ","condition call "," condition_block? "," eval ","record send "]}," ActiveRecord Validations ClassMethods condition_block?":{"type":"method","name":"condition_block?","children":[],"call":["condition arity == ","condition arity ","condition respond_to? "]}," ActiveRecord Validations included":{"type":"method","name":"included","children":[],"call":[]}," ActiveRecord Errors to_xml":{"type":"method","name":"to_xml","children":[],"call":["e error "," full_messages each "," full_messages ","options [] errors ","options [] ","options [] instruct! ","options delete ","Builder XmlMarkup  new "]}," ActiveRecord Errors size":{"type":"method","name":"size","children":[],"call":["error_count + ","attribute size ","@errors values inject ","@errors values "]}," ActiveRecord Errors add_on_blank":{"type":"method","name":"add_on_blank","children":[],"call":[" add ","value blank? ","@base [] ","attr to_s ","@base send ","@base respond_to? ","(lvar :attributes) flatten ","@base []  blank? ","@base send  blank? "]}," ActiveRecord RecordInvalid initialize":{"type":"method","name":"initialize","children":[],"call":["@record errors full_messages join ","@record errors full_messages ","@record errors ","I18n  t ","@record class i18n_scope ","@record class ","@record @record errors full_messages join  full_messages join ","@record errors full_I18n  t s join ","@record @record errors full_messages join  full_messages ","@record errors full_I18n  t s ","@record @record errors full_messages join  "]}," ActiveRecord Transactions rollback_active_record_state!":{"type":"method","name":"rollback_active_record_state!","children":[],"call":[" raise ","@attributes_cache delete "," class primary_key "," class ","@attributes delete "," id= "," id "," has_attribute? "," new_record? "," clear_transaction_record_state "," restore_transaction_record_state "," remember_transaction_record_state ","IdentityMap  remove ","IdentityMap  enabled? "]}," ActiveRecord XmlSerializer add_associations":{"type":"method","name":"add_associations","children":[],"call":["record to_xml ","opts merge ","@record send ","record class name ","record class ","record class to_s underscore == ","record class to_s underscore ","record class to_s ","records each ","association to_s singularize ","association to_s "," builder tag! "," builder ","records empty? ","tag dasherize "," dasherize? ","records is_a? ","opts merge merge "," options [] "," options "," reformat_name ","@serializable send ","merged_options merge ","@builder tag! ","ActiveSupport XmlMini  rename_key "," options merge merge! "," options merge ","@record send  to_xml ","@serializable send  to_xml ","@@record send  send ","@@serializable send  send ","@record send  class name ","@serializable send  class name ","@record send  class ","@serializable send  class ","@record send  class to_s underscore == ","@serializable send  class to_s underscore == ","@record send  class to_s underscore ","@serializable send  class to_s underscore ","@record send  class to_s ","@serializable send  class to_s ","@record send s each ","@serializable send s each "," builder tag dasherize ! "," builder association to_s ! "," builder  reformat_name ! "," builder ActiveSupport XmlMini  rename_key ! ","@record send s empty? ","@serializable send s empty? ","tag dasherize  dasherize ","association to_s  dasherize "," reformat_name  dasherize ","ActiveSupport XmlMini  rename_key  dasherize ","@record send s is_a? ","@serializable send s is_a? "," options merge merge!  merge ","@builder tag dasherize ! ","@builder association to_s ! ","@builder  reformat_name ! ","@builder ActiveSupport XmlMini  rename_key ! "]}," ActiveRecord Serialization from_xml":{"type":"method","name":"from_xml","children":[],"call":[" attributes= ","Hash  from_xml values first ","Hash  from_xml values ","Hash  from_xml "]}," ActiveRecord Serialization to_xml":{"type":"method","name":"to_xml","children":[],"call":["serializer to_s "," block_given? ","XmlSerializer  new ","XmlSerializer  new serialize ","XmlSerializer  new  to_s "]}," ActiveRecord Serialization JsonSerializer serialize":{"type":"method","name":"serialize","children":[],"call":[" serializable_record to_json "," serializable_record "]}," ActiveRecord Serialization from_json":{"type":"method","name":"from_json","children":[],"call":[" attributes= ","ActiveSupport JSON  decode "]}," ActiveRecord Serialization to_json":{"type":"method","name":"to_json","children":[],"call":["JsonSerializer  new to_s ","JsonSerializer  new "," class json_class_name "," class "," include_root_in_json ","ActiveSupport JSON  encode "," class model_name element "," class model_name ","Serializer  new serializable_record ","Serializer  new "]}," ActiveRecord Serialization Serializer to_s":{"type":"method","name":"to_s","children":[],"call":[" serialize "]}," ActiveRecord Serialization Serializer serialize":{"type":"method","name":"serialize","children":[],"call":[]}," ActiveRecord Serialization Serializer serializable_record":{"type":"method","name":"serializable_record","children":[],"call":["serializable_record []= "," class new serializable_record "," class new "," class ","records collect ","records is_a? "," add_includes ","@record send "," serializable_names each "," serializable_names "," returning "," tap "]}," ActiveRecord Serialization Serializer add_includes":{"type":"method","name":"add_includes","children":[],"call":[" options []= "," options "," options merge ","include_associations [] ","records nil? ","@record send ","@record send to_a ","@record class reflect_on_association macro ","@record class reflect_on_association ","@record class "," Array ","include_associations keys ","include_associations is_a? "," options [] "," options delete ","include_ Array  [] ","include_include_associations keys  [] "," options delete  [] ","include_ Array  keys ","include_include_associations keys  keys "," options delete  keys ","include_ Array  is_a? ","include_include_associations keys  is_a? "," options delete  is_a? "]}," ActiveRecord Serialization Serializer serializable_names":{"type":"method","name":"serializable_names","children":[],"call":[" serializable_attribute_names + "," serializable_method_names "," serializable_attribute_names "]}," ActiveRecord Serialization Serializer serializable_method_names":{"type":"method","name":"serializable_method_names","children":[],"call":["method_attributes << ","@record respond_to? ","name to_s "," Array inject "," Array "," options [] "," options "]}," ActiveRecord Serialization Serializer serializable_attribute_names":{"type":"method","name":"serializable_attribute_names","children":[],"call":["attribute_names - ","n to_s "," options [] collect "," options [] "," options "," options []= "," Array | "," Array ","@record class inheritance_column ","@record class ","attribute_names & "," Array collect "," options delete ","@record attribute_names ","attribute_names -  - ","attribute_names &  - ","@record attribute_names  - ","attribute_names -  & ","attribute_names &  & ","@record attribute_names  & ","@record attribute_names -  ","@record attribute_names &  ","@record @record attribute_names  "]}," ActiveRecord Serialization Serializer initialize":{"type":"method","name":"initialize","children":[],"call":["options dup "]}," ActiveRecord SchemaDumper default_string":{"type":"method","name":"default_string","children":[],"call":["value inspect ","' + + ","' + ","value to_s "]}," ActiveRecord Reflection AssociationReflection derive_primary_key_name":{"type":"method","name":"derive_primary_key_name","children":[],"call":[" active_record name foreign_key "," active_record name "," active_record "," options [] "," options "," name "," macro == "," macro "," belongs_to? "]}," ActiveRecord Reflection AssociationReflection derive_class_name":{"type":"method","name":"derive_class_name","children":[],"call":["class_name singularize ","(sym :has_many) include? "," macro "," name to_s camelize "," name to_s "," name "," source_reflection class_name "," source_reflection "," options [] "," options "," through_reflection "," collection? ","class_name camelize ","class_name singularize  singularize "," name to_s camelize  singularize "," name to_s  singularize "," source_reflection class_name singularize  "," source_reflection  name to_s camelize  "," source_reflection  name to_s  ","class_name singularize  camelize "," name to_s camelize  camelize "," name to_s  camelize "]}," ActiveRecord Reflection MacroReflection derive_class_name":{"type":"method","name":"derive_class_name","children":[],"call":[" name to_s camelize "," name to_s "," name "]}," ActiveRecord QueryCache uncached":{"type":"method","name":"uncached","children":[],"call":[" connection uncached "," connection ","ActiveRecord Base  configurations blank? ","ActiveRecord Base  configurations "]}," ActiveRecord QueryCache cache":{"type":"method","name":"cache","children":[],"call":[" connection cache "," connection ","ActiveRecord Base  configurations blank? ","ActiveRecord Base  configurations "]}," ActiveRecord Migrator pending_migrations":{"type":"method","name":"pending_migrations","children":[],"call":["m version > "," current_version ","m version "," migration_classes select "," migration_classes ","already_migrated include? ","m version to_i "," migrations reject "," migrations "," migrated "," migrated  include? "]}," ActiveRecord Migration down_with_benchmarks":{"type":"method","name":"down_with_benchmarks","children":[],"call":[" migrate "]}," ActiveRecord Migration up_with_benchmarks":{"type":"method","name":"up_with_benchmarks","children":[],"call":[" migrate "]}," ActiveRecord IllegalMigrationNameError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Locking Optimistic ClassMethods update_counters_with_lock":{"type":"method","name":"update_counters_with_lock","children":[],"call":[" update_counters_without_lock ","counters merge "," locking_column "," locking_enabled? "," update_counters merge _without_lock ","counters merge  merge "]}," ActiveRecord Locking Optimistic ClassMethods locking_enabled?":{"type":"method","name":"locking_enabled?","children":[],"call":[" columns_hash [] "," locking_column "," columns_hash "," lock_optimistically "]}," ActiveRecord Locking Optimistic ClassMethods extended":{"type":"method","name":"extended","children":[],"call":[]}," Fixtures parse_yaml_string":{"type":"method","name":"parse_yaml_string","children":[],"call":[" raise ","error class "," yaml_file_path ","YAML  load "," erb_render ","error backtrace "]}," Fixtures read_csv_fixture_files":{"type":"method","name":"read_csv_fixture_files","children":[],"call":[" []= ","Fixture  new ","Inflector  underscore ","data []= ","cell to_s strip ","cell to_s ","header [] to_s strip ","header [] to_s ","header [] ","row each_with_index ","reader each ","reader shift ","CSV Reader  create "," erb_render ","IO  read "," csv_file_path "," model_class ","CSV  parse ","@class_name to_s underscore ","@class_name to_s "," fixtures []= "," fixtures ","reader shift  [] to_s strip ","reader shift  [] to_s ","reader shift  [] ","CSV Reader  create  each ","CSV  parse  each ","CSV Reader  create  shift ","CSV  parse  shift "]}," Fixtures read_yaml_fixture_files":{"type":"method","name":"read_yaml_fixture_files","children":[],"call":[" []= ","Fixture  new "," raise ","fixture each ","yaml_value each ","yaml value ","yaml respond_to? "," parse_yaml_string ","yaml_string << ","IO  read "," yaml_file_path ","(send\n  (send\n    (const nil :Dir) :[]\n    (dstr\n      (begin\n        (ivar :@fixture_path))\n      (str \"/**/*.yml\"))) :select) each "," test ","Dir  [] select ","Dir  [] "," model_class ","fixture respond_to? ","(send\n  (begin\n    (send\n      (block\n        (send\n          (send\n            (const nil :Dir) :[]\n            (dstr\n              (begin\n                (ivar :@fixture_path))\n              (str \"/**/*.yml\"))) :select)\n        (args\n          (arg :f))\n        (send\n          (const nil :File) :file?\n          (lvar :f))) :+\n      (array\n        (send nil :yaml_file_path)))) :map) join ","(send\n  (block\n    (send\n      (send\n        (const nil :Dir) :[]\n        (dstr\n          (begin\n            (ivar :@fixture_path))\n          (str \"/**/*.yml\"))) :select)\n    (args\n      (arg :f))\n    (send\n      (const nil :File) :file?\n      (lvar :f))) :+\n  (array\n    (send nil :yaml_file_path))) map ","(send\n  (send\n    (const nil :Dir) :[]\n    (dstr\n      (begin\n        (ivar :@fixture_path))\n      (str \"/**/*.yml\"))) :select) + ","File  file? "," fixtures []= "," fixtures ","yaml value  each "," parse_yaml_string _value each "," parse_yaml_string  value "," parse_yaml_string  respond_to? "," parse_ parse_yaml_string _string "," parse_(send\n  (begin\n    (send\n      (block\n        (send\n          (send\n            (const nil :Dir) :[]\n            (dstr\n              (begin\n                (ivar :@fixture_path))\n              (str \"/**/*.yml\"))) :select)\n        (args\n          (arg :f))\n        (send\n          (const nil :File) :file?\n          (lvar :f))) :+\n      (array\n        (send nil :yaml_file_path)))) :map) join  "," parse_yaml_string _string << ","(send\n  (begin\n    (send\n      (block\n        (send\n          (send\n            (const nil :Dir) :[]\n            (dstr\n              (begin\n                (ivar :@fixture_path))\n              (str \"/**/*.yml\"))) :select)\n        (args\n          (arg :f))\n        (send\n          (const nil :File) :file?\n          (lvar :f))) :+\n      (array\n        (send nil :yaml_file_path)))) :map) join  << ","  parse_yaml_string _file_path ","(send\n  (begin\n    (send\n      (block\n        (send\n          (send\n            (const nil :Dir) :[]\n            (dstr\n              (begin\n                (ivar :@fixture_path))\n              (str \"/**/*.yml\"))) :select)\n        (args\n          (arg :f))\n        (send\n          (const nil :File) :file?\n          (lvar :f))) :+\n      (array\n        (send nil : parse_yaml_string _file_path)))) :map) join ","(send\n  (block\n    (send\n      (send\n        (const nil :Dir) :[]\n        (dstr\n          (begin\n            (ivar :@fixture_path))\n          (str \"/**/*.yml\"))) :select)\n    (args\n      (arg :f))\n    (send\n      (const nil :File) :file?\n      (lvar :f))) :+\n  (array\n    (send nil : parse_yaml_string _file_path))) map "]}," Fixtures column_names":{"type":"method","name":"column_names","children":[],"call":["@connection columns collect ","@connection columns ","c name "]}," Fixtures inheritance_column_name":{"type":"method","name":"inheritance_column_name","children":[],"call":[" model_class inheritance_column "," model_class "]}," Fixtures timestamp_column_names":{"type":"method","name":"timestamp_column_names","children":[],"call":[" column_names include? "," column_names ","(str \"created_at\") select ","(str \"created_at\") & "]}," Fixtures has_primary_key_column?":{"type":"method","name":"has_primary_key_column?","children":[],"call":["c name == "," primary_key_name ","c name "," model_class columns find "," model_class columns "," model_class "," model_class columns any? "]}," Fixtures primary_key_name":{"type":"method","name":"primary_key_name","children":[],"call":[" model_class primary_key "," model_class "]}," Fixtures model_class":{"type":"method","name":"model_class","children":[],"call":["@class_name constantize ","@class_name is_a? ","@class_name nil? "]}," Fixtures HabtmFixtures read_fixture_files":{"type":"method","name":"read_fixture_files","children":[],"call":[]}," Fixtures identify":{"type":"method","name":"identify","children":[],"call":[]}," Fixtures cache_fixtures":{"type":"method","name":"cache_fixtures","children":[],"call":[]}," Fixtures cached_fixtures":{"type":"method","name":"cached_fixtures","children":[],"call":[]}," Fixtures fixture_is_cached?":{"type":"method","name":"fixture_is_cached?","children":[],"call":[]}," Fixtures cache_for_connection":{"type":"method","name":"cache_for_connection","children":[],"call":[]}," Fixtures reset_cache":{"type":"method","name":"reset_cache","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLite2Adapter add_column":{"type":"method","name":"add_column","children":[],"call":["definition column "," alter_table "]}," ActiveRecord ConnectionAdapters SQLite2Adapter rename_table":{"type":"method","name":"rename_table","children":[],"call":[" move_table "]}," ActiveRecord ConnectionAdapters SQLite2Adapter supports_count_distinct?":{"type":"method","name":"supports_count_distinct?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLiteAdapter default_primary_key_type":{"type":"method","name":"default_primary_key_type","children":[],"call":["INTEGER PRIMARY KEY NOT NULL freeze ","INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL freeze "," supports_autoincrement? "]}," ActiveRecord ConnectionAdapters SQLiteAdapter sqlite_version":{"type":"method","name":"sqlite_version","children":[],"call":[" select_value ","SQLiteAdapter Version  new "]}," ActiveRecord ConnectionAdapters SQLiteAdapter catch_schema_changes":{"type":"method","name":"catch_schema_changes","children":[],"call":[" raise "," reconnect! ","exception message =~ ","exception message "]}," ActiveRecord ConnectionAdapters SQLiteAdapter copy_table_contents":{"type":"method","name":"copy_table_contents","children":[],"call":["@connection execute ","sql << ","(send\n  (lvar :columns) :map) * "," quote ","row [] ","column_mappings [] ","columns map "," quote_column_name ","from_columns include? ","columns find_all ","col name "," columns collect "," columns ","map []= ","a first ","a last ","rename inject ","Hash  [] ","(send\n  (lvar :columns) :map) flatten "," quote_table_name ","column_mappings []= ","rename each "," exec_query "," exec_query each ","Hash  []  [] ","Hash  []  []= "]}," ActiveRecord ConnectionAdapters SQLiteAdapter copy_table_indexes":{"type":"method","name":"copy_table_indexes","children":[],"call":[" add_index ","index columns ","opts []= ","index unique ","name gsub ","name [] ","from == ","to == ","index name "," indexes each "," indexes ","columns empty? ","to_column_names include? ","(send\n  (send\n    (lvar :index) :columns) :map) select ","rename [] ","index columns map "," columns map "," columns ","c name ","name []  gsub ","index name  gsub ","name []  [] ","index name  [] ","index name []  ","index index name  ","to_column_name [] s include? ","to_column_index name s include? "," columns map  include? ","rename []  [] ","reindex name  [] ","c name []  ","c index name  "]}," ActiveRecord ConnectionAdapters SQLiteAdapter copy_table":{"type":"method","name":"copy_table","children":[],"call":[" copy_table_contents ","options [] ","column name ","@definition columns map ","@definition columns "," copy_table_indexes "," block_given? ","@definition primary_key "," primary_key ","@definition column ","column null ","column default ","column limit ","column type ","options [] [] ","column name to_sym "," columns each "," columns "," create_table ","options merge ","(send\n  (send nil :columns\n    (lvar :from)) :detect) nil? ! ","(send\n  (send nil :columns\n    (lvar :from)) :detect) nil? ","c name == ","c name "," columns detect ","id == "," primary_key to_s ","column scale ","column precision ","options []= ","from_primary_key != ","options merge  [] ","options merge  [] [] ","options merge  merge ","options merge  []= "," primary_key  != "]}," ActiveRecord ConnectionAdapters SQLiteAdapter move_table":{"type":"method","name":"move_table","children":[],"call":[" drop_table "," copy_table "]}," ActiveRecord ConnectionAdapters SQLiteAdapter alter_table":{"type":"method","name":"alter_table","children":[],"call":[" move_table ","options merge "," transaction "," block_given? "," lambda "]}," ActiveRecord ConnectionAdapters SQLiteAdapter empty_insert_statement":{"type":"method","name":"empty_insert_statement","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLiteAdapter rename_column":{"type":"method","name":"rename_column","children":[],"call":[" alter_table ","new_column_name to_s ","column_name to_s "," raise ","c name == ","c name "," columns detect "," columns "]}," ActiveRecord ConnectionAdapters SQLiteAdapter change_column":{"type":"method","name":"change_column","children":[],"call":[" null= ","options [] ","options include? "," default= "," limit= "," type= ","definition [] instance_eval ","definition [] "," options_include_default? "," alter_table "," scale= "," precision= "," options_ options_include_default? ? "]}," ActiveRecord ConnectionAdapters SQLiteAdapter change_column_default":{"type":"method","name":"change_column_default","children":[],"call":["definition [] default= ","definition [] "," alter_table "]}," ActiveRecord ConnectionAdapters SQLiteAdapter remove_column":{"type":"method","name":"remove_column","children":[],"call":["definition columns delete ","definition [] ","definition columns "," alter_table ","column_names flatten each ","column_names flatten "," raise ","ArgumentError  new ","column_names empty? ","column_names each ","ActiveSupport Deprecation  warn "," caller ","Passing array to remove_columns is deprecated, please use  + ","column_names flatten! "]}," ActiveRecord ConnectionAdapters SQLiteAdapter add_column":{"type":"method","name":"add_column","children":[],"call":[" execute "," raise ","@connection transaction_active? ","@connection respond_to? ","definition column "," alter_table "," valid_alter_table_options "," supports_add_column? "]}," ActiveRecord ConnectionAdapters SQLiteAdapter rename_table":{"type":"method","name":"rename_table","children":[],"call":[" execute "," quote_table_name "," exec_query "]}," ActiveRecord ConnectionAdapters SQLiteAdapter remove_index":{"type":"method","name":"remove_index","children":[],"call":[" execute "," quote_column_name "," index_name "]}," ActiveRecord ConnectionAdapters SQLiteAdapter primary_key":{"type":"method","name":"primary_key","children":[],"call":["column [] ","field [] to_i == ","field [] to_i ","field [] "," table_structure find "," table_structure ","field [] == "]}," ActiveRecord ConnectionAdapters SQLiteAdapter indexes":{"type":"method","name":"indexes","children":[],"call":["index columns= ","col [] "," execute map "," execute ","index name ","index unique= ","row [] != ","row [] ","IndexDefinition  new "," quote_table_name ","row [] to_i != ","row [] to_i "," exec_query map "," exec_query ","IndexDefinition  new  columns= ","IndexDefinition  new  name ","IndexDefinition  new  unique= "]}," ActiveRecord ConnectionAdapters SQLiteAdapter add_lock!":{"type":"method","name":"add_lock!","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLiteAdapter select_rows":{"type":"method","name":"select_rows","children":[],"call":["row [] ","(erange\n  (int 0)\n  (begin\n    (send\n      (send\n        (lvar :row) :size) :/\n      (int 2)))) map ","row size / ","row size "," execute map "," execute "," exec_query rows "," exec_query "]}," ActiveRecord ConnectionAdapters SQLiteAdapter insert_sql":{"type":"method","name":"insert_sql","children":[],"call":["@connection last_insert_row_id "]}," ActiveRecord ConnectionAdapters SQLiteAdapter delete_sql":{"type":"method","name":"delete_sql","children":[],"call":["sql =~ "]}," ActiveRecord ConnectionAdapters SQLiteAdapter update_sql":{"type":"method","name":"update_sql","children":[],"call":["@connection changes "]}," ActiveRecord ConnectionAdapters SQLiteAdapter supports_autoincrement?":{"type":"method","name":"supports_autoincrement?","children":[],"call":[" sqlite_version >= "," sqlite_version "]}," ActiveRecord ConnectionAdapters SQLiteAdapter supports_count_distinct?":{"type":"method","name":"supports_count_distinct?","children":[],"call":[" sqlite_version >= "," sqlite_version "]}," ActiveRecord ConnectionAdapters SQLiteAdapter disconnect!":{"type":"method","name":"disconnect!","children":[],"call":["@connection close "," clear_cache! "]}," ActiveRecord ConnectionAdapters SQLiteAdapter requires_reloading?":{"type":"method","name":"requires_reloading?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLiteAdapter supports_migrations?":{"type":"method","name":"supports_migrations?","children":[],"call":[]}," ActiveRecord Base parse_sqlite_config!":{"type":"method","name":"parse_sqlite_config!","children":[],"call":["config []= ","File  expand_path ","config [] ",":memory: != ","Object  const_defined? "," raise ","ActiveSupport Deprecation  warn ","config include? ","Rails  root "]}," ActiveRecord ConnectionAdapters SQLite3Adapter table_structure":{"type":"method","name":"table_structure","children":[],"call":[" raise ","structure empty? "," returning ","@connection table_info "," quote_table_name ","@connection table_info tap "," exec_query to_hash "," exec_query "," table_structure_with_collation "," internal_exec_query ","@connection table_info  empty? "," exec_query to_hash  empty? "," exec_query  empty? "," internal_exec_query  empty? "," table_@connection table_info _with_collation "," table_ exec_query to_hash _with_collation "," table_ exec_query _with_collation "," table_ internal_exec_query _with_collation "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter select_raw":{"type":"method","name":"select_raw","children":[],"call":["res clear ","rows << ","hashed_row []= ","fields [] ","row []= ","column gsub sub ","column gsub ","row [] ","res type == ","res type ","row each_index ","results each ","res fields ","results length > ","results length ","res result "," execute ","res ftype == ","res ftype ","res ntuples > ","res ntuples "," result_as_array "," execute  clear ","res fields  [] ","row []  gsub sub ","row []  gsub "," execute  type == "," execute  type ","res result  each "," result_as_array  each "," execute ults each ","res res fields  "," execute  fields ","res result  length > "," result_as_array  length > "," execute ults length > ","res result  length "," result_as_array  length "," execute ults length "," execute   execute ult "," execute  ftype == "," execute  ftype "," execute  ntuples > "," execute  ntuples ","  execute ult_as_array "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter connect":{"type":"method","name":"connect","children":[],"call":[" configure_connection ","PostgreSQLColumn  module_eval "," postgresql_version >= "," postgresql_version "," define_method "," class instance_eval "," class "," supports_standard_conforming_strings? ","@connection respond_to? ","@config [] ","PGconn  translate_results= ","PGconn  respond_to? ","PGconn  connect ","PostgreSQLColumn  money_precision= "," raise ","ActiveRecord NoDatabaseError  new ","error message ","error message include? ","OID Money  precision= ","PG  connect "," add_pg_decoders "," add_pg_encoders "," class new_client ","ex set_pool ","PGconn  connect  respond_to? ","PG  connect  respond_to? "," class new_client  respond_to? "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter postgresql_version":{"type":"method","name":"postgresql_version","children":[],"call":["(send\n  (send\n    (nth-ref 1) :to_i) :*\n  (int 10000)) + + ","3 to_i ","(send\n  (send\n    (nth-ref 1) :to_i) :*\n  (int 10000)) + ","2 to_i * ","2 to_i ","1 to_i * ","1 to_i "," query [] [] =~ "," query [] [] "," query [] "," query ","@connection server_version ","@connection respond_to? ","(send\n  (send\n    (lvar :major) :to_i) :*\n  (int 10000)) + + ","tiny to_i ","(send\n  (send\n    (lvar :major) :to_i) :*\n  (int 10000)) + ","minor to_i * ","minor to_i ","major to_i * ","major to_i ","1 split "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter change_column_null":{"type":"method","name":"change_column_null","children":[],"call":[" execute "," quote_column_name "," quote ","default nil? "," quote_table_name "," clear_cache! "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter client_min_messages=":{"type":"method","name":"client_min_messages=","children":[],"call":[" execute "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter client_min_messages":{"type":"method","name":"client_min_messages","children":[],"call":[" query [] [] "," query [] "," query "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter update_sql":{"type":"method","name":"update_sql","children":[],"call":[" cmdtuples "," cmd_tuples "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter select_rows":{"type":"method","name":"select_rows","children":[],"call":[" select_raw last "," select_raw "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter disable_referential_integrity":{"type":"method","name":"disable_referential_integrity","children":[],"call":[" execute ","(send\n  (send nil :tables) :collect) join "," quote_table_name "," tables collect "," tables "," supports_disable_referential_integrity? "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter quote_string":{"type":"method","name":"quote_string","children":[],"call":[" quote_string "," undef_method "," class instance_eval "," class ","PGconn  escape "," define_method ","PGconn  respond_to? "," remove_method ","@connection escape ","@connection respond_to? "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter supports_standard_conforming_strings?":{"type":"method","name":"supports_standard_conforming_strings?","children":[],"call":[" client_min_messages= "," execute [] [] "," execute [] "," execute "," client_min_messages "," query [] [] "," query [] "," query "]}," ActiveRecord ConnectionAdapters PostgreSQLColumn extract_value_from_default":{"type":"method","name":"extract_value_from_default","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLColumn simplified_type":{"type":"method","name":"simplified_type","children":[],"call":["field_type to_sym "]}," ActiveRecord ConnectionAdapters PostgreSQLColumn binary_to_string":{"type":"method","name":"binary_to_string","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLColumn string_to_binary":{"type":"method","name":"string_to_binary","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLColumn extract_precision":{"type":"method","name":"extract_precision","children":[],"call":[" class money_precision "," class ","sql_type == ","1 to_i ","sql_type =~ "]}," ActiveRecord ConnectionAdapters PostgreSQLColumn extract_scale":{"type":"method","name":"extract_scale","children":[],"call":["sql_type =~ "]}," ActiveRecord ConnectionAdapters PostgreSQLColumn initialize":{"type":"method","name":"initialize","children":[],"call":[" class extract_value_from_default "," class ","sql_type [] ","sql_type length - ","sql_type length ","sql_type =~ "," has_default_function? "]}," ActiveRecord ConnectionAdapters MysqlAdapter pk_and_sequence_for":{"type":"method","name":"pk_and_sequence_for","children":[],"call":["keys first ","keys length == ","keys length ","keys << ","h [] ","h [] == "," execute each_hash "," execute "," quote_table_name ","result free ","result each_hash ","key gsub ","1 split map ","1 split ","create_table to_s =~ ","create_table to_s ","result fetch_hash [] ","result fetch_hash "," execute  free "," execute  each_hash ","result fetch_hash []  to_s =~ ","result fetch_hash []  to_s "," execute  fetch_hash [] "," execute  fetch_hash "]}," ActiveRecord ConnectionAdapters MysqlAdapter show_variable":{"type":"method","name":"show_variable","children":[],"call":["variables first [] ","variables first ","variables empty? "," select_all "," select_all  first [] "," select_all  first "," select_all  empty? "]}," ActiveRecord ConnectionAdapters MysqlAdapter drop_table":{"type":"method","name":"drop_table","children":[],"call":[]}," ActiveRecord ConnectionAdapters MysqlAdapter collation":{"type":"method","name":"collation","children":[],"call":[" show_variable "]}," ActiveRecord ConnectionAdapters MysqlAdapter charset":{"type":"method","name":"charset","children":[],"call":[" show_variable "]}," ActiveRecord ConnectionAdapters MysqlAdapter update_sql":{"type":"method","name":"update_sql","children":[],"call":["@connection affected_rows "]}," ActiveRecord ConnectionAdapters MysqlAdapter insert_sql":{"type":"method","name":"insert_sql","children":[],"call":["@connection insert_id "]}," ActiveRecord ConnectionAdapters MysqlAdapter select_rows":{"type":"method","name":"select_rows","children":[],"call":["result free ","rows << ","result each "," execute ","@connection query_with_result= ","@connection next_result ","@connection more_results "," exec_without_stmt rows "," exec_without_stmt "," exec_query rows "," exec_query "," execute  free "," exec_without_stmt rows  << "," exec_query rows  << "," execute  each ","@connection query_with_ execute = ","@connection next_ execute  ","@connection more_ execute s "," exec_without_stmt  exec_without_stmt rows  "," exec_without_stmt  exec_query rows  "," exec_query  exec_without_stmt rows  "," exec_query  exec_query rows  "]}," ActiveRecord ConnectionAdapters MysqlAdapter disable_referential_integrity":{"type":"method","name":"disable_referential_integrity","children":[],"call":[" update "," select_value "]}," ActiveRecord ConnectionAdapters MysqlAdapter quote_table_name":{"type":"method","name":"quote_table_name","children":[],"call":[" quote_column_name gsub "," quote_column_name ","@quoted_table_names [] "]}," ActiveRecord ConnectionAdapters MysqlColumn extract_default":{"type":"method","name":"extract_default","children":[],"call":[" missing_default_forged_as_empty_string? "," raise ","default inspect "," type ","default blank? "," type == "," null "," sql_type =~ "," sql_type "]}," ActiveRecord ConnectionAdapters AbstractAdapter disable_referential_integrity":{"type":"method","name":"disable_referential_integrity","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter quote_table_name":{"type":"method","name":"quote_table_name","children":[],"call":[" quote_column_name "]}," ActiveRecord ConnectionAdapters TableDefinition references":{"type":"method","name":"references","children":[],"call":[" column ","polymorphic is_a? ","polymorphic nil? ","args each ","options delete ","args extract_options! "," index ","index_options is_a? ","(str \"id\") map ","(str \"type\") map "," foreign_key ","foreign_key_options is_a? ","col to_s pluralize ","col to_s "," raise ","Base  pluralize_table_names ","ReferenceDefinition  new add_to ","ReferenceDefinition  new ","options delete  is_a? ","options delete  nil? ","args extract_options!  delete ","args extract_args extract_options! ! ","index_args extract_options!  is_a? ","foreign_key_args extract_options!  is_a? "]}," ActiveRecord ConnectionAdapters TableDefinition timestamps":{"type":"method","name":"timestamps","children":[],"call":[" column ","args extract_options! ","(pair\n  (sym :null)\n  (false)) merge "," emit_warning_if_null_unspecified ","options []= ","options [] nil? ","options [] ","@conn supports_datetime_with_precision? ","options key? ! ","options key? ","args extract_args extract_options! ! ","args extract_(pair\n  (sym :null)\n  (false)) merge ! ","args extract_options!  []= ","(pair\n  (sym :null)\n  (false)) merge  []= ","args extract_options!  [] nil? ","(pair\n  (sym :null)\n  (false)) merge  [] nil? ","args extract_options!  [] ","(pair\n  (sym :null)\n  (false)) merge  [] ","args extract_options!  key? ! ","(pair\n  (sym :null)\n  (false)) merge  key? ! ","args extract_options!  key? ","(pair\n  (sym :null)\n  (false)) merge  key? "]}," ActiveRecord ConnectionAdapters Column fallback_string_to_time":{"type":"method","name":"fallback_string_to_time","children":[],"call":[" new_time ","time_hash values_at ","time_hash []= "," microseconds ","Date  _parse ","Date  _parse  values_at ","Date  _parse  []= "]}," ActiveRecord ConnectionAdapters Column fallback_string_to_date":{"type":"method","name":"fallback_string_to_date","children":[],"call":[" new_date ","ParseDate  parsedate [] ","ParseDate  parsedate "," Date  _parse values_at "," Date  _parse "]}," ActiveRecord ConnectionAdapters Column fast_string_to_time":{"type":"method","name":"fast_string_to_time","children":[],"call":[" new_time ","6 to_i ","5 to_i ","4 to_i ","3 to_i ","2 to_i ","1 to_i ","(send\n  (send\n    (nth-ref 7) :to_f) :*\n  (int 1000000)) to_i ","7 to_f * ","7 to_f ","string =~ ","(send\n  (send\n    (nth-ref 7) :to_f) :*\n  (int 1000000)) round to_i ","(send\n  (send\n    (nth-ref 7) :to_f) :*\n  (int 1000000)) round ","(send\n  (send\n    (nth-ref 7) :to_r) :*\n  (int 1000000)) to_i ","7 to_r * ","7 to_r "]}," ActiveRecord ConnectionAdapters Column fast_string_to_date":{"type":"method","name":"fast_string_to_date","children":[],"call":[" new_date ","3 to_i ","2 to_i ","1 to_i ","string =~ "]}," ActiveRecord ConnectionAdapters Column new_time":{"type":"method","name":"new_time","children":[],"call":["DateTime  civil ","DateTime  local_offset ","Base  default_timezone == ","Base  default_timezone ","Time  send ","year == ","year nil? ","Time  time_with_datetime_fallback ","mday == ","mon == ","Time  public_send ","time getlocal ","Time  utc "]}," ActiveRecord ConnectionAdapters Column new_date":{"type":"method","name":"new_date","children":[],"call":["Date  new ","year != "]}," ActiveRecord ConnectionAdapters Column extract_default":{"type":"method","name":"extract_default","children":[],"call":[" type_cast "]}," ActiveRecord ConnectionAdapters Quoting quoted_string_prefix":{"type":"method","name":"quoted_string_prefix","children":[],"call":[]}," ActiveRecord ConnectionAdapters Quoting quote_table_name":{"type":"method","name":"quote_table_name","children":[],"call":[" quote_column_name "]}," ActiveRecord ConnectionAdapters QueryCache cache_sql":{"type":"method","name":"cache_sql","children":[],"call":["result dup ","result duplicable? ","row dup ","result collect ","Array  === ","@query_cache []= ","@query_cache [] "," log_info ","@query_cache has_key? ","ActiveSupport Notifications  instrument "," object_id ","@query_cache [] []= ","@query_cache [] [] ","@query_cache [] key? ","ActiveRecord Result  === "," type_casted_binds "," lambda ","@lock synchronize "," cache_notification_info ","@query_cache shift ","@query_cache size > ","@query_cache size ","@query_cache delete ","binds empty? ","@query_cache []=  dup ","@query_cache [] []=  dup ","@query_cache delete  dup ","@query_cache []=  duplicable? ","@query_cache [] []=  duplicable? ","@query_cache delete  duplicable? ","@query_cache []=  collect ","@query_cache [] []=  collect ","@query_cache delete  collect "]}," ActiveRecord ConnectionAdapters QueryCache columns_with_query_cache":{"type":"method","name":"columns_with_query_cache","children":[],"call":[" columns_without_query_cache ","@query_cache [] ","args first "]}," ActiveRecord ConnectionAdapters QueryCache select_all_with_query_cache":{"type":"method","name":"select_all_with_query_cache","children":[],"call":[" select_all_without_query_cache "," cache_sql ","args first "]}," ActiveRecord ConnectionAdapters QueryCache clear_query_cache":{"type":"method","name":"clear_query_cache","children":[],"call":["@query_cache clear ","@lock synchronize "]}," ActiveRecord ConnectionAdapters QueryCache uncached":{"type":"method","name":"uncached","children":[],"call":[]}," ActiveRecord ConnectionAdapters QueryCache cache":{"type":"method","name":"cache","children":[],"call":[" clear_query_cache "]}," ActiveRecord ConnectionAdapters QueryCache dirties_query_cache":{"type":"method","name":"dirties_query_cache","children":[],"call":["base class_eval ","method_names each ","16 + ","13 + ","18 + ","11 + ","14 + ","19 + ","22 + "]}," ActiveRecord ConnectionAdapters QueryCache included":{"type":"method","name":"included","children":[],"call":[" dirties_query_cache "," alias_method_chain "," attr_accessor ","base class_eval ","base set_callback "]}," ActiveRecord ConnectionAdapters DatabaseStatements delete_sql":{"type":"method","name":"delete_sql","children":[],"call":[" update_sql "]}," ActiveRecord ConnectionAdapters DatabaseStatements update_sql":{"type":"method","name":"update_sql","children":[],"call":[" execute "]}," ActiveRecord ConnectionAdapters DatabaseStatements insert_sql":{"type":"method","name":"insert_sql","children":[],"call":[" execute "]}," ActiveRecord ConnectionAdapters DatabaseStatements select":{"type":"method","name":"select","children":[],"call":[" raise "," exec_query ","future_result execute! ","future_result schedule! ","ActiveRecord Base  asynchronous_queries_session "," current_transaction closed? "," current_transaction "," supports_concurrent_connections? ","async new "," pool "," current_transaction joinable? "," async_enabled? ","FutureResult Complete  new "," internal_exec_query ","async new  execute! ","future_ internal_exec_query  execute! ","async new  schedule! ","future_ internal_exec_query  schedule! "]}," ActiveRecord ConnectionAdapters DatabaseStatements empty_insert_statement":{"type":"method","name":"empty_insert_statement","children":[],"call":[" quote_table_name "]}," ActiveRecord ConnectionAdapters DatabaseStatements insert_fixture":{"type":"method","name":"insert_fixture","children":[],"call":[" execute ","fixture value_list ","fixture key_list "," quote_table_name ","value_list join ","key_list join "," quote ","columns [] ","key_list << "," quote_column_name ","fixture map ","Hash  [] ","c name "," columns map "," columns "," schema_cache columns_hash "," schema_cache "," fixture_sql "," raise ","name inspect ","fixture stringify_keys ","YAML  dump "," prepare_binds_for_database map "," prepare_binds_for_database ","fixture keys map ","fixture keys ","Relation QueryAttribute  new "," lookup_cast_type_from_column ","binds map map ","binds map ","manager to_sql ","manager insert ","manager into ","Arel InsertManager  new ","table [] ","bind name "," with_yaml_fallback ","bind value_for_database ","Arel Table  new "," build_fixture_sql ","Array  wrap ","fixture stringify_keys  value_list ","fixture  with_yaml_fallback _list ","fixture stringify_keys  key_list "," quote_Arel Table  new _name "," with_yaml_fallback _list join ","Hash  []  [] "," schema_cache columns_hash  [] ","columns [] s [] "," quote_columns [] _name ","fixture stringify_keys  map "," Hash  []  map ","  schema_cache columns_hash  map "," columns [] s map "," Hash  []  ","  schema_cache columns_hash  "," columns [] s "," schema_cache Hash  [] _hash "," schema_cache  schema_cache columns_hash _hash "," schema_cache columns [] s_hash "," fixture stringify_keys _sql ","fixture stringify_keys  stringify_keys ","fixture stringify_keys  keys map ","fixture stringify_keys  keys "," lookup_cast_type_from_columns []  "," lookup_cast_ lookup_cast_type_from_column _from_column ","Arel InsertManager  new  to_sql ","Arel InsertManager  new  insert ","Arel InsertManager  new  into ","Arel Table  new  [] ","bind  with_yaml_fallback _for_database "," build_fixture stringify_keys _sql "]}," ActiveRecord ConnectionAdapters DatabaseStatements add_lock!":{"type":"method","name":"add_lock!","children":[],"call":["sql << ","options [] "]}," ActiveRecord ConnectionAdapters DatabaseStatements select_rows":{"type":"method","name":"select_rows","children":[],"call":[" raise "," exec_query rows "," exec_query "," select_all rows "," select_all "," select_all then "]}," ActiveRecord Calculations ClassMethods construct_count_options_from_args":{"type":"method","name":"construct_count_options_from_args","children":[],"call":[" raise ","args inspect ","args [] ","args [] is_a? ","args size ","args size > "," scope [] "," scope "]}," ActiveRecord AttributeMethods missing_attribute":{"type":"method","name":"missing_attribute","children":[],"call":[" raise "]}," ActiveRecord AttributeMethods respond_to?":{"type":"method","name":"respond_to?","children":[],"call":["@attributes include? ","md pre_match "," class match_attribute_method? "," class ","@attributes nil? "," class generated_methods include? "," class generated_methods "," class define_attribute_methods "," class generated_methods? ! "," class generated_methods? ","method to_s ","include_private_methods ! "," class attribute_methods_generated? "," has_attribute? "," class column_names include? "," class column_names ","@attributes present? ","name to_s ","@attributes any? ","to_model freeze ","to_partial_path freeze "," class symbol_column_to_string ","name to_sym "," _has_attribute? "," class match_attribute_method?  pre_match "," class column_name to_s s include? "," class column_to_model freeze s include? "," class column_to_partial_path freeze s include? "," class column_ class symbol_column_to_string s include? "," class column_name to_s s "," class column_to_model freeze s "," class column_to_partial_path freeze s "," class column_ class symbol_column_to_string s ","name to_s  to_s ","to_model freeze  to_s ","to_partial_path freeze  to_s "," class symbol_column_to_string  to_s ","name to_s  to_sym ","to_model freeze  to_sym ","to_partial_path freeze  to_sym "," class symbol_column_to_string  to_sym "]}," ActiveRecord AttributeMethods query_attribute":{"type":"method","name":"query_attribute","children":[],"call":["value blank? ! ","value blank? ","value zero? ! ","value zero? ","column number? ","value to_i zero? ! ","value to_i zero? ","value to_i ","value !~ ","Numeric  === ","column nil? "," class columns_hash [] "," class columns_hash "," class "," read_attribute ","ActiveRecord ConnectionAdapters Column FALSE_VALUES  include? "," read_attribute  blank? ! "," read_attribute  blank? "," read_attribute  zero? ! "," read_attribute  zero? "," class columns_hash []  number? "," read_attribute  to_i zero? ! "," read_attribute  to_i zero? "," read_attribute  to_i "," read_attribute  !~ "," class columns_hash []  nil? "," class  class columns_hash [] s_hash [] "," class  class columns_hash [] s_hash "]}," ActiveRecord AttributeMethods write_attribute":{"type":"method","name":"write_attribute","children":[],"call":["@attributes []= "," convert_number_column_value ","column number? "," column_for_attribute ","@attributes_cache delete ","attr_name to_s "," convert_number_ column_for_attribute _value "," column_for_attribute  number? ","  column_for_attribute _for_attribute ","attr_name to_s  to_s "]}," ActiveRecord AttributeMethods unserialize_attribute":{"type":"method","name":"unserialize_attribute","children":[],"call":[" raise ","unserialized_object class to_s ","unserialized_object class "," class serialized_attributes [] "," class serialized_attributes "," class ","@attributes []= ","@attributes frozen? ","unserialized_object nil? ","unserialized_object is_a? "," object_from_yaml ","@attributes [] "," object_from_yaml  class to_s "," object_from_yaml  class "," object_from_yaml  nil? "," object_from_yaml  is_a? "]}," ActiveRecord AttributeMethods unserializable_attribute?":{"type":"method","name":"unserializable_attribute?","children":[],"call":[" class serialized_attributes [] "," class serialized_attributes "," class ","column text? "]}," ActiveRecord AttributeMethods read_attribute_before_type_cast":{"type":"method","name":"read_attribute_before_type_cast","children":[],"call":["@attributes [] "]}," ActiveRecord AttributeMethods read_attribute":{"type":"method","name":"read_attribute","children":[],"call":["column type_cast "," unserialize_attribute "," unserializable_attribute? "," column_for_attribute ","(lvasgn :value\n  (send\n    (ivar :@attributes) :[]\n    (lvar :attr_name))) nil? ! ","(lvasgn :value\n  (send\n    (ivar :@attributes) :[]\n    (lvar :attr_name))) nil? ","@attributes [] ","attr_name to_s "," column_for_attribute  type_cast ","  column_for_attribute _for_attribute ","(lvasgn :@attributes [] \n  (send\n    (ivar :@attributes) :[]\n    (lvar :attr_name))) nil? ! ","(lvasgn :value\n  (send\n    (ivar :@attributes) :[]\n    (lvar :attr_name to_s ))) nil? ! ","(lvasgn :@attributes [] \n  (send\n    (ivar :@attributes) :[]\n    (lvar :attr_name))) nil? ","(lvasgn :value\n  (send\n    (ivar :@attributes) :[]\n    (lvar :attr_name to_s ))) nil? ","attr_name to_s  to_s "]}," ActiveRecord AttributeMethods method_missing":{"type":"method","name":"method_missing","children":[],"call":[" read_attribute ","@attributes include? "," __send__ ","md to_s ","md pre_match "," class match_attribute_method? "," class "," id "," class primary_key to_s == "," class primary_key to_s "," class primary_key "," send "," class generated_methods include? "," class generated_methods "," class define_attribute_methods "," class generated_methods? ! "," class generated_methods? ","method_id to_s "," raise ","NoMethodError  new "," class private_method_defined? "," inspect ","method_id == "," guard_private_attribute_method! "," class attribute_methods_generated? ! "," class attribute_methods_generated? "," respond_to_without_attributes? "," respond_to_missing? ","attribute_method bind call ","attribute_method bind "," class find_generated_attribute_method "," class match_attribute_method?  to_s "," class match_attribute_method?  pre_match "," class match_ class find_generated_attribute_method ? "," class define_ class find_generated_attribute_method s "," guard_private_ class find_generated_attribute_method ! "," class  class find_generated_attribute_method s_generated? ! "," class  class find_generated_attribute_method s_generated? "," class find_generated_attribute_method  bind call "," class find_generated_attribute_method  bind "," class find_generated_ class find_generated_attribute_method  "]}," ActiveRecord AttributeMethods ClassMethods evaluate_attribute_method":{"type":"method","name":"evaluate_attribute_method","children":[],"call":[" logger warn ","err message "," logger "," generated_methods delete "," generated_methods "," class_eval "," generated_methods << ","method_name to_s == "," primary_key to_s "," primary_key ","method_name to_s "]}," ActiveRecord AttributeMethods ClassMethods define_write_method":{"type":"method","name":"define_write_method","children":[],"call":[" evaluate_attribute_method "]}," ActiveRecord AttributeMethods ClassMethods define_question_method":{"type":"method","name":"define_question_method","children":[],"call":[" evaluate_attribute_method "]}," ActiveRecord AttributeMethods ClassMethods define_read_method_for_serialized_attribute":{"type":"method","name":"define_read_method_for_serialized_attribute","children":[],"call":[" evaluate_attribute_method "]}," ActiveRecord AttributeMethods ClassMethods define_read_method":{"type":"method","name":"define_read_method","children":[],"call":[" evaluate_attribute_method "," cache_attribute? ","access_code insert ","attr_name to_s == "," primary_key to_s "," primary_key ","attr_name to_s ","column type_cast_code ","access_code insert  insert ","column type_column type_cast_code  "]}," ActiveRecord AttributeMethods ClassMethods cache_attribute?":{"type":"method","name":"cache_attribute?","children":[],"call":[" cached_attributes include? "," cached_attributes "]}," ActiveRecord AttributeMethods ClassMethods cached_attributes":{"type":"method","name":"cached_attributes","children":[],"call":["(send\n  (send nil :columns) :select) map to_set ","(send\n  (send nil :columns) :select) map "," attribute_types_cached_by_default include? ","c type "," attribute_types_cached_by_default "," columns select "," columns "]}," ActiveRecord AttributeMethods ClassMethods cache_attributes":{"type":"method","name":"cache_attributes","children":[],"call":[" cached_attributes << ","attr to_s "," cached_attributes ","attribute_names each "]}," ActiveRecord AttributeMethods ClassMethods instance_method_already_implemented?":{"type":"method","name":"instance_method_already_implemented?","children":[],"call":["@_defined_class_methods include? "," raise ","@@_defined_activerecord_methods include? ","Set  new ","ActiveRecord Base  public_instance_methods | | ","ActiveRecord Base  protected_instance_methods ","ActiveRecord Base  public_instance_methods | ","ActiveRecord Base  private_instance_methods ","ActiveRecord Base  public_instance_methods ","(send\n  (send\n    (send nil :ancestors) :first\n    (send\n      (send nil :ancestors) :index\n      (const\n        (const nil :ActiveRecord) :Base))) :collect!) flatten ","m public_instance_methods | | ","m protected_instance_methods ","m public_instance_methods | ","m private_instance_methods ","m public_instance_methods "," ancestors first collect! "," ancestors first "," ancestors index "," ancestors ","method_name =~ ","(send\n  (send\n    (send\n      (const\n        (const nil :ActiveRecord) :Base) :public_instance_methods\n      (false)) :|\n    (send\n      (const\n        (const nil :ActiveRecord) :Base) :private_instance_methods\n      (false))) :|\n  (send\n    (const\n      (const nil :ActiveRecord) :Base) :protected_instance_methods\n    (false))) map to_set ","(send\n  (send\n    (send\n      (const\n        (const nil :ActiveRecord) :Base) :public_instance_methods\n      (false)) :|\n    (send\n      (const\n        (const nil :ActiveRecord) :Base) :private_instance_methods\n      (false))) :|\n  (send\n    (const\n      (const nil :ActiveRecord) :Base) :protected_instance_methods\n    (false))) map ","(send\n  (send\n    (send nil :ancestors) :first\n    (send\n      (send nil :ancestors) :index\n      (const\n        (const nil :ActiveRecord) :Base))) :sum\n  (array)) map to_set ","(send\n  (send\n    (send nil :ancestors) :first\n    (send\n      (send nil :ancestors) :index\n      (const\n        (const nil :ActiveRecord) :Base))) :sum\n  (array)) map "," ancestors first sum ","method_name to_s "," defined_activerecord_methods ","(send\n  (block\n    (send\n      (send\n        (send nil :ancestors) :first\n        (send\n          (send nil :ancestors) :index\n          (const\n            (const nil :ActiveRecord) :Base))) :sum\n      (array))\n    (args\n      (arg :m))\n    (send\n      (send\n        (send\n          (lvar :m) :public_instance_methods\n          (false)) :|\n        (send\n          (lvar :m) :private_instance_methods\n          (false))) :|\n      (send\n        (lvar :m) :protected_instance_methods\n        (false)))) :map) to_set ","m to_s ","(send\n  (begin\n    (send\n      (send\n        (send\n          (const\n            (const nil :ActiveRecord) :Base) :public_instance_methods\n          (false)) :|\n        (send\n          (const\n            (const nil :ActiveRecord) :Base) :private_instance_methods\n          (false))) :|\n      (send\n        (const\n          (const nil :ActiveRecord) :Base) :protected_instance_methods\n        (false)))) :map) to_set ","(send\n  (send\n    (block\n      (send\n        (send\n          (send nil :ancestors) :first\n          (lvar :index)) :map)\n      (args\n        (arg :m))\n      (send\n        (send\n          (lvar :m) :instance_methods\n          (false)) :|\n        (send\n          (lvar :m) :private_instance_methods\n          (false)))) :flatten) :map) to_set ","(send\n  (send\n    (send nil :ancestors) :first\n    (lvar :index)) :map) flatten map ","(send\n  (send\n    (send nil :ancestors) :first\n    (lvar :index)) :map) flatten ","m instance_methods | ","m instance_methods "," ancestors first map "," ancestors length ","ActiveRecord Base  method_defined? ! ","ActiveRecord Base  method_defined? "," method_defined_within? "," superclass generated_attribute_methods "," superclass "," superclass == "," dangerous_attribute_method? ","base_defined ! ","Base  private_method_defined? ","Base  method_defined? "," superclass instance_method owner is_a? ! "," superclass instance_method owner is_a? "," superclass instance_method owner "," superclass instance_method ","@_ method_defined_within? _class_methods include? ","@@_ method_defined_within? _activerecord_methods include? ","method_name to_s  =~ ","method_name to_s  to_s ","  method_defined_within? _activerecord_methods ","ActiveRecord Base  method_ method_defined_within? ? ! ","ActiveRecord Base  method_ method_defined_within? ? "," method_ method_defined_within? _within? ","base_ method_defined_within?  ! ","Base  private_method_ method_defined_within? ? ","Base  method_ method_defined_within? ? "]}," ActiveRecord AttributeMethods ClassMethods define_attribute_methods":{"type":"method","name":"define_attribute_methods","children":[],"call":[" define_question_method "," instance_method_already_implemented? "," define_write_method ","name to_sym "," define_read_method "," define_read_method_for_serialized_attribute "," serialized_attributes [] "," serialized_attributes "," columns_hash each "," columns_hash "," generated_methods? "," define_write_method_for_time_zone_conversion "," create_time_zone_conversion_attribute? "," define_read_method_for_time_zone_conversion "," define_write_method_for_serialized_attribute "," columns_hash keys "," column_names "," attribute_methods_generated? "," superclass define_attribute_methods "," superclass "," == "," base_class ","@attribute_methods_mutex synchronize ","Mutex  new "," base_class define_attribute_methods "," base_class == "," define_external_attribute_method "," column_names each ","ActiveSupport Deprecation  warn ","msg << ","meth inspect ","meth source_location inspect ","meth source_location ","meth respond_to? "," method "," generated_attribute_methods synchronize "," generated_attribute_methods "," attribute_names "," base_class? "," define_question_ method od "," instance_ method od_already_implemented? "," define_write_ method od "," define_read_ method od "," define_read_ method od_for_serialized_attribute "," generated_ method ods? "," define_write_ method od_for_time_zone_conversion "," define_read_ method od_for_time_zone_conversion "," define_write_ method od_for_serialized_attribute "," attribute_ method ods_generated? "," superclass define_attribute_ method ods ","Mutex  new  synchronize ","@attribute_ method ods_mutex synchronize "," base_class define_attribute_ method ods "," define_external_attribute_ method od "," method  inspect "," method  source_location inspect "," method  source_location "," method  respond_to? ","  method od "," generated_attribute_ method ods synchronize "," generated_attribute_ method ods "]}," ActiveRecord AttributeMethods ClassMethods generated_methods?":{"type":"method","name":"generated_methods?","children":[],"call":[" generated_methods empty? ! "," generated_methods empty? "," generated_methods "]}," ActiveRecord AttributeMethods ClassMethods generated_methods":{"type":"method","name":"generated_methods","children":[],"call":["Set  new "]}," ActiveRecord Associations ClassMethods InnerJoinDependency InnerJoinAssociation join_type":{"type":"method","name":"join_type","children":[],"call":[]}," ActiveRecord Associations ClassMethods InnerJoinDependency build_join_association":{"type":"method","name":"build_join_association","children":[],"call":["InnerJoinAssociation  new "]}," ActiveRecord Associations ClassMethods JoinDependency JoinAssociation join_type":{"type":"method","name":"join_type","children":[],"call":[]}," ActiveRecord Associations ClassMethods JoinDependency build_join_association":{"type":"method","name":"build_join_association","children":[],"call":["JoinAssociation  new "]}," ActiveRecord Associations ClassMethods JoinDependency remove_duplicate_results!":{"type":"method","name":"remove_duplicate_results!","children":[],"call":[" remove_duplicate_results! ","associations [] ","reflection class_name constantize ","reflection class_name ","parent_records empty? ","(send\n  (lvar :records) :map) flatten compact ","(send\n  (lvar :records) :map) flatten ","record send ","reflection name ","record send target uniq! ","record send target ","records map ","(sym :has_many) include? ","reflection macro ","base reflections [] ","base reflections ","associations keys each ","associations keys ","associations each ","records each ","descendant target uniq! ","descendant target ","reflection klass ","reflection collection? ","parent_records << ","parent_records concat ","descendant target uniq "," remove_uniq_by_reflection ","base reflections []  class_name constantize ","base reflections []  class_name ","(send\n  (lvar :records) :map) flatten compact  empty? ","base reflections []  name ","base reflections []  macro ","base base reflections [] s [] ","base base reflections [] s ","record send  target uniq! ","record send  target ","base reflections []  klass ","base reflections []  collection? ","(send\n  (lvar :records) :map) flatten compact  << ","(send\n  (lvar :records) :map) flatten compact  concat ","record send  target uniq "," remove_uniq_by_base reflections []  "]}," ActiveRecord Associations ClassMethods create_extension_modules":{"type":"method","name":"create_extension_modules","children":[],"call":[" Array push ","extension_module_name constantize "," Array ","Object  const_set ","Module  new "," silence_warnings ","association_id to_s camelize ","association_id to_s "," to_s ","(begin\n  (send\n    (self) :parent)) constantize "," parent "," parent const_set "," to_s demodulize ","Array  wrap ","Array  wrap push "]}," ActiveRecord Associations HasOneAssociation new_record":{"type":"method","name":"new_record","children":[],"call":[" target= ","record []= ","@owner id ","@reflection primary_key_name ","@owner new_record? "," replace ","@reflection klass ","@reflection klass send "," construct_scope [] "," construct_scope "," load_target "," set_inverse_instance ","@owner persisted? "]}," ActiveRecord Associations HasOneAssociation construct_scope":{"type":"method","name":"construct_scope","children":[],"call":[" set_belongs_to_association_for "]}," ActiveRecord Associations HasOneAssociation create!":{"type":"method","name":"create!","children":[],"call":["klass create! "," new_record ","reflection create_association! "," merge_with_conditions "]}," ActiveRecord Associations HasManyThroughAssociation cached_counter_attribute_name":{"type":"method","name":"cached_counter_attribute_name","children":[],"call":["@reflection name "]}," ActiveRecord Associations HasManyThroughAssociation has_cached_counter?":{"type":"method","name":"has_cached_counter?","children":[],"call":["@owner attribute_present? "," cached_counter_attribute_name "," owner attribute_present? "," owner "]}," ActiveRecord Associations HasManyThroughAssociation size":{"type":"method","name":"size","children":[],"call":[" count ","@target size "," loaded? ","@owner send "," cached_counter_attribute_name "," has_cached_counter? "," target size "," target "," owner send "," owner "," owner _read_attribute "," reflection "," owner read_attribute "]}," ActiveRecord Associations HasManyAssociation construct_scope":{"type":"method","name":"construct_scope","children":[],"call":["@reflection options [] ","@reflection options "," set_belongs_to_association_for "]}," ActiveRecord Associations HasAndBelongsToManyAssociation create_record":{"type":"method","name":"create_record","children":[],"call":[" build "," create ","attributes collect ","attributes is_a? "," ensure_owner_is_not_new "," build_record "," build_ build  "]}," ActiveRecord Associations HasAndBelongsToManyAssociation finding_with_ambiguous_select?":{"type":"method","name":"finding_with_ambiguous_select?","children":[],"call":["@owner connection columns size != ","@owner connection columns size ","@owner connection columns ","@reflection options [] ","@reflection options ","@owner connection ","select_clause ! "," columns size != "," columns size "," columns "]}," ActiveRecord Associations HasAndBelongsToManyAssociation construct_scope":{"type":"method","name":"construct_scope","children":[],"call":["@reflection options [] ","@reflection options "]}," ActiveRecord Associations HasAndBelongsToManyAssociation create!":{"type":"method","name":"create!","children":[],"call":[" insert_record "," create_record "]}," ActiveRecord Associations AssociationProxy inspect":{"type":"method","name":"inspect","children":[],"call":["@target inspect "," reload "," loaded? "," load_target "]}," ActiveRecord Associations AssociationCollection ensure_owner_is_not_new":{"type":"method","name":"ensure_owner_is_not_new","children":[],"call":[" raise ","@owner new_record? ","@owner persisted? "]}," ActiveRecord Associations AssociationCollection add_record_to_target_with_callbacks":{"type":"method","name":"add_record_to_target_with_callbacks","children":[],"call":[" callback ","@target << "," loaded? "," block_given? ","@target include? ","@reflection options [] ","@reflection options "," set_inverse_instance ","@target []= ","@target index ","@target @target index  "]}," ActiveRecord Associations AssociationCollection build_record":{"type":"method","name":"build_record","children":[],"call":[" add_record_to_target_with_callbacks ","@reflection klass new ","@reflection klass "," block_given? ","attrs update ","@reflection options [] ","@reflection options ","@reflection options [] is_a? ","@reflection build_association "," add_@reflection klass new _to_target_with_callbacks "," add_@reflection build_association _to_target_with_callbacks "]}," ActiveRecord Associations AssociationCollection create_record":{"type":"method","name":"create_record","children":[],"call":[" add_record_to_target_with_callbacks ","@reflection klass new ","@reflection klass ","@reflection klass send "," construct_scope [] "," construct_scope "," ensure_owner_is_not_new "," block_given? ","attrs update ","@reflection options [] ","@reflection options ","@reflection options [] is_a? ","@reflection build_association ","_scope merge ","csm where_values_hash ","_scope is_a? ! ","_scope is_a? ","csm blank? "," construct_scope [] merge "," scoped where_values_hash "," scoped "," construct construct_scope []  [] "," construct construct_scope []  ","@reflection _scope merge  [] ","@reflection _scope merge  ","@reflection _scope merge  [] is_a? "," construct_scope []  merge ","@reflection klass send  where_values_hash "," construct_scope []  is_a? ! "," construct_scope []  is_a? ","@reflection klass send  blank? "," construct construct_scope []  [] merge "]}," ActiveRecord Associations AssociationCollection construct_scope":{"type":"method","name":"construct_scope","children":[],"call":[]}," ActiveRecord Associations AssociationCollection any?":{"type":"method","name":"any?","children":[],"call":[" empty? ! "," empty? "," method_missing "," block_given? "]}," ActiveRecord Associations AssociationCollection create!":{"type":"method","name":"create!","children":[],"call":["record save! "," create_record "," block_given? "]}," Fixture class_name":{"type":"method","name":"class_name","children":[],"call":["@model_class name "," model_class name "," model_class "]}," ActiveRecord Associations HasManyThroughAssociation build_sti_condition":{"type":"method","name":"build_sti_condition","children":[],"call":["@reflection klass quote_value ","@reflection through_reflection klass name demodulize ","@reflection through_reflection klass name ","@reflection through_reflection klass ","@reflection through_reflection ","@reflection klass ","@reflection through_reflection klass inheritance_column ","@reflection through_reflection table_name ","@reflection through_reflection klass sti_name ","@reflection through_reflection quoted_table_name ","@reflection through_reflection klass send "]}," ActiveRecord Associations HasManyThroughAssociation build_conditions":{"type":"method","name":"build_conditions","children":[],"call":["(send\n  (lvar :all) :map) * ","all map ","all << "," build_sti_condition "," interpolate_sql "," sanitize_sql ","(lvar :association_conditions) each ","@reflection through_reflection klass descends_from_active_record? ! ","@reflection through_reflection klass descends_from_active_record? ","@reflection through_reflection klass ","@reflection through_reflection ","@reflection source_reflection options [] ","@reflection source_reflection options ","@reflection source_reflection ","@reflection through_reflection options [] ","@reflection through_reflection options ","@reflection options [] ","@reflection options "," build_through_conditions ","(lvar :@reflection options [] ) each "," build_@reflection through_reflection options []  "," build_ build_through_conditions  "]}," ActiveRecord ConnectionAdapters DatabaseStatements sanitize_limit":{"type":"method","name":"sanitize_limit","children":[],"call":["limit to_i ","(send\n  (send\n    (lvar :limit) :split\n    (str \",\")) :map) join ","i to_i ","limit split map ","limit split ","limit to_s [] ","limit to_s ","(send\n  (send\n    (send\n      (lvar :limit) :to_s) :split\n    (str \",\")) :map) join ","limit to_s split map ","limit to_s split ","limit to_s =~ "," Integer ","Arel  sql ","limit is_a? ","limit to_s include? "]}," ActiveRecord TestCase assert_no_queries":{"type":"method","name":"assert_no_queries","children":[],"call":[" assert_queries ","ActiveRecord SQLCounter  ignored_sql= ","ActiveRecord SQLCounter  ignored_sql "]}," ActiveRecord TestCase assert_queries":{"type":"method","name":"assert_queries","children":[],"call":[" assert_equal ","$queries_executed size ","$queries_executed join ","$queries_executed size == ","$queries_executed delete ","(str \"BEGIN\") each ","ActiveRecord SQLCounter  log join ","ActiveRecord SQLCounter  log ","ActiveRecord SQLCounter  log size == ","ActiveRecord SQLCounter  log size ","ActiveRecord SQLCounter  log= ","the_log size ","the_log join ","the_log size == "," assert_operator ","num == ","SQLCounter  log ","SQLCounter  log_all ","SQLCounter  clear_log ","options fetch ","SQLCounter  log  size ","SQLCounter  log_all  size ","SQLCounter  log  join ","SQLCounter  log_all  join ","SQLCounter  log  size == ","SQLCounter  log_all  size == "]}," ActiveRecord TestCase assert_date_from_db":{"type":"method","name":"assert_date_from_db","children":[],"call":[" assert_equal ","actual to_s ","expected to_s ","actual to_date to_s ","actual to_date "," current_adapter? ","actual strftime ","expected strftime "]}," ActiveRecord TestCase create_fixtures":{"type":"method","name":"create_fixtures","children":[],"call":["Fixtures  create_fixtures "]}," ActiveRecord Serialization ClassMethods json_class_name":{"type":"method","name":"json_class_name","children":[],"call":[" name demodulize underscore inspect "," name demodulize underscore "," name demodulize "," name "]}," ActiveRecord Serialization included":{"type":"method","name":"included","children":[],"call":[]}," ActiveRecord Reflection AssociationReflection quoted_table_name":{"type":"method","name":"quoted_table_name","children":[],"call":[" klass quoted_table_name "," klass "]}," ActiveRecord NamedScope Scope load_found":{"type":"method","name":"load_found","children":[],"call":[" find "]}," ActiveRecord NamedScope Scope method_missing":{"type":"method","name":"method_missing","children":[],"call":[" proxy_scope send "," proxy_scope "," with_scope "," proxy_options "," scopes [] call "," scopes [] "," scopes "," scopes include? ","method == "," proxy_options [] "," proxy_options [] is_a? "," current_scoped_methods_when_defined "," scoped_methods include? ! "," scoped_methods include? "," scoped_methods "," klass send "," klass "," scopes include? ! "," klass respond_to? "]}," ActiveRecord NamedScope Scope proxy_found":{"type":"method","name":"proxy_found","children":[],"call":[" load_found "]}," ActiveRecord NamedScope Scope empty?":{"type":"method","name":"empty?","children":[],"call":[" count zero? "," count ","@found empty? "]}," ActiveRecord NamedScope Scope last":{"type":"method","name":"last","children":[],"call":[" find "," proxy_found last "," proxy_found ","args first kind_of? ! ","args first kind_of? ","args first "," apply_finder_options last "," apply_finder_options ","args first present? "," to_a last "," to_a "," loaded? "]}," ActiveRecord NamedScope Scope first":{"type":"method","name":"first","children":[],"call":[" find "," proxy_found first "," proxy_found ","args first kind_of? ! ","args first kind_of? ","args first "," apply_finder_options first "," apply_finder_options ","args first present? "," to_a first "," to_a "," loaded? "]}," ActiveRecord NamedScope Scope reload":{"type":"method","name":"reload","children":[],"call":[" load_found "]}," ActiveRecord NamedScope Scope initialize":{"type":"method","name":"initialize","children":[],"call":["options except "," extend ","Module  new "," block_given? ","(send\n  (lvar :options) :[]\n  (sym :extend)) flatten each ","(send\n  (lvar :options) :[]\n  (sym :extend)) flatten ","options [] ","proxy_scope send ","Scope  === ","ActiveRecord Associations AssociationCollection  === "]}," ActiveRecord NamedScope ClassMethods named_scope":{"type":"method","name":"named_scope","children":[],"call":[" scopes [] call "," scopes [] "," scopes "," define_method ","(sclass\n  (self)\n  (self)) instance_eval "," scopes []= ","Scope  new ","options call "," lambda ","name to_sym "," singleton_class send "," singleton_class ","options bind call ","options bind "," model_name != ","parent_scope model_name "," model_name "," with_scope ","parent_scope proxy_options "," scope ","ActiveSupport Deprecation  warn "," caller ","name to_sym  to_sym "," model_name to_sym  != ","parent_scope model_name to_sym  "," model_name to_sym  "]}," ActiveRecord NamedScope ClassMethods scopes":{"type":"method","name":"scopes","children":[],"call":[" write_inheritable_attribute "," read_inheritable_attribute "]}," ActiveRecord NamedScope included":{"type":"method","name":"included","children":[],"call":[]}," ActiveRecord Migrator record_version_state_after_migrating":{"type":"method","name":"record_version_state_after_migrating","children":[],"call":["Base  connection insert ","Base  connection ","Base  connection update "," down? "," class schema_migrations_table_name "," class ","@migrated_versions push sort! ","@migrated_versions push ","version to_i ","@migrated_versions delete ","table insert ","version to_s ","table [] ","table where delete ","table where ","table [] eq ","Arel Table  new ","table compile_insert ","Base  connection delete ","table where compile_delete ","stmt to_sql ","ActiveRecord SchemaMigration  create! "," migrated << "," migrated ","ActiveRecord SchemaMigration  where delete_all ","ActiveRecord SchemaMigration  where "," migrated delete ","@schema_migration create! ","@schema_migration delete_by ","ActiveRecord SchemaMigration  delete_by ","@schema_migration create_version ","@schema_migration delete_version "," class schema_migrations_Arel Table  new _name ","Arel Table  new  insert ","Arel Table  new  [] ","Arel Table  new  where delete ","Arel Table  new  where ","Arel Table  new  [] eq ","Arel Table  new  compile_insert ","Arel Table  new  where compile_delete ","table compile_insert  to_sql ","table where compile_delete  to_sql "]}," ActiveRecord Migrator migrated":{"type":"method","name":"migrated","children":[],"call":["Base  connection select_values map sort ","Base  connection select_values map ","Base  connection select_values ","Base  connection "," class schema_migrations_table_name "," class "," class get_all_versions ","Set  new "," load_migrated "]}," ActiveRecord Migrator migrations":{"type":"method","name":"migrations","children":[],"call":["migrations reverse "," down? ","migrations sort_by ","klasses << ","klass version= "," attr_accessor "," returning ","name camelize constantize ","name camelize "," load "," raise ","DuplicateMigrationNameError  new ","m name == ","m name ","klasses detect ","DuplicateMigrationVersionError  new ","m version == ","m version ","version to_i ","IllegalMigrationNameError  new ","file scan first ","file scan ","files inject ","Dir  [] ","migration filename= ","migration version= ","migration name= ","MigrationProxy  new ","(send\n  (const nil :MigrationProxy) :new) tap "," class migrations "," class ","seen []= ","seen [] ","files map ","Hash  new ","paths map ","Array  wrap ","ActiveSupport Deprecation  warn ","args first ","args empty? ","@migrations sort_by ","@migrations reverse "," Array "," parse_migration_filename "," migration_files map "," migration_files ","migrations sort_by  reverse "," class migrations  reverse ","MigrationProxy  new s reverse ","migrations sort_by  sort_by "," class migrations  sort_by ","MigrationProxy  new s sort_by ","klass version to_i = ","name camelize  camelize constantize ","name camelize  camelize ","m name camelize  == ","m name camelize  ","m version to_i  == ","m version to_i  ","version to_i  to_i ","Dir  []  inject ","MigrationProxy  new  filename= ","migration filename camelize = ","migration version to_i = ","MigrationProxy  new  version= ","MigrationProxy  new  name= ","migration name camelize = "," class migrations sort_by  "," class  class migrations  "," class MigrationProxy  new s ","Hash  new  []= ","Hash  new  [] ","Dir  []  map ","Array  wrap  map "," Array  map ","@migrations sort_by  sort_by ","@ class migrations  sort_by ","@MigrationProxy  new s sort_by ","@migrations sort_by  reverse ","@ class migrations  reverse ","@MigrationProxy  new s reverse "," parse_MigrationProxy  new _filename "," parse_migration_filename camelize  "," migration_Dir  []  map "," MigrationProxy  new _files map "," migration_Dir  []  "," MigrationProxy  new _files "]}," ActiveRecord Migrator run":{"type":"method","name":"run","children":[],"call":["target migrate "," raise ","UnknownMigrationVersionError  new ","target nil? ","m version == ","m version "," migrations detect "," migrations "," new run "," new "," record_version_state_after_migrating ","target version "," migrated include? ! "," migrated include? ","target version to_i "," migrated "," down? "," up? ","e backtrace "," use_transaction? "," execute_migration_in_transaction ","migration version to_i ","migration version ","migration nil? "," run_without_lock "," with_advisory_lock "," use_advisory_lock? "]}," ActiveRecord Migrator current_migration":{"type":"method","name":"current_migration","children":[],"call":["m version == "," current_version ","m version "," migrations detect "," migrations "]}," ActiveRecord Migrator schema_migrations_table_name":{"type":"method","name":"schema_migrations_table_name","children":[],"call":["Base  table_name_prefix + + ","Base  table_name_suffix ","Base  table_name_prefix + ","Base  table_name_prefix ","SchemaMigration  table_name "]}," ActiveRecord Migrator rollback":{"type":"method","name":"rollback","children":[],"call":[" down ","finish version ","migrator migrations [] ","start_index + ","migrator migrations ","migrator migrations index ","migrator current_migration "," new "," move ","migrator migrations []  version "," new  migrations [] ","migrator migrations index  + "," new  migrations "," new  migrations index "," new  current_migration "]}," ActiveRecord UnknownMigrationVersionError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord DuplicateMigrationNameError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Test Unit TestCase teardown_fixtures":{"type":"method","name":"teardown_fixtures","children":[],"call":["ActiveRecord Base  verify_active_connections! ","Thread  current []= ","Thread  current ","ActiveRecord Base  connection rollback_db_transaction ","ActiveRecord Base  connection ","Thread  current [] != ","Thread  current [] "," use_transactional_fixtures? ","Fixtures  reset_cache ","ActiveRecord Base  configurations blank? ! ","ActiveRecord Base  configurations blank? ","ActiveRecord Base  configurations ","ActiveRecord Base  clear_active_connections! ","ActiveRecord Base  connection decrement_open_transactions ","ActiveRecord Base  connection open_transactions != ","ActiveRecord Base  connection open_transactions "]}," Test Unit TestCase setup_fixtures":{"type":"method","name":"setup_fixtures","children":[],"call":[" instantiate_fixtures "," use_instantiated_fixtures "," load_fixtures ","@@already_loaded_fixtures []= "," class ","Fixtures  reset_cache ","ActiveRecord Base  connection begin_db_transaction ","ActiveRecord Base  connection ","ActiveRecord Base  send ","@@already_loaded_fixtures [] "," use_transactional_fixtures? "," raise "," use_transactional_fixtures ! "," use_transactional_fixtures "," pre_loaded_fixtures ","ActiveRecord Base  configurations blank? ! ","ActiveRecord Base  configurations blank? ","ActiveRecord Base  configurations ","ActiveRecord Base  connection increment_open_transactions "]}," Test Unit TestCase try_to_load_dependency":{"type":"method","name":"try_to_load_dependency","children":[],"call":["ActiveRecord Base  logger warn ","e backtrace join ","e backtrace ","e message ","ActiveRecord Base  logger "," require_dependency "]}," ActiveRecord Dirty field_changed?":{"type":"method","name":"field_changed?","children":[],"call":["old != ","column type_cast ","value blank? ","old nil? ","column null ","column type == ","column type "," column_for_attribute ","old == ","column number? "," column_for_attribute  type_cast ","column type_cast  blank? "," column_for_attribute  null "," column_for_attribute  type == "," column_for_attribute  type ","  column_for_attribute _for_attribute "," column_for_attribute  number? "]}," ActiveRecord Dirty update_with_dirty":{"type":"method","name":"update_with_dirty","children":[],"call":[" update_without_dirty "," changed "," partial_updates? "," changed | "," class serialized_attributes keys "," class serialized_attributes "," class "," attributes keys & "," attributes keys "," attributes "]}," ActiveRecord Dirty write_attribute_with_dirty":{"type":"method","name":"write_attribute_with_dirty","children":[],"call":[" write_attribute_without_dirty "," changed_attributes []= "," changed_attributes "," field_changed? "," clone_attribute_value "," changed_attributes include? ","attr to_s "," changed_attributes delete "," changed_attributes [] "," write_attr to_s ibute_without_dirty "," changed_attr to_s ibutes []= "," changed_attr to_s ibutes "," clone_attr to_s ibute_value "," changed_attr to_s ibutes include? ","attr to_s  to_s "," changed_attr to_s ibutes delete "," changed_attr to_s ibutes [] "]}," ActiveRecord Dirty attribute_will_change!":{"type":"method","name":"attribute_will_change!","children":[],"call":[" changed_attributes []= "," clone_attribute_value "," changed_attributes "]}," ActiveRecord Dirty attribute_was":{"type":"method","name":"attribute_was","children":[],"call":[" __send__ "," changed_attributes [] "," changed_attributes "," attribute_changed? "]}," ActiveRecord Dirty attribute_change":{"type":"method","name":"attribute_change","children":[],"call":[" __send__ "," changed_attributes [] "," changed_attributes "," attribute_changed? "]}," ActiveRecord Dirty attribute_changed?":{"type":"method","name":"attribute_changed?","children":[],"call":[" changed_attributes include? "," changed_attributes "]}," ActiveRecord Dirty changed_attributes":{"type":"method","name":"changed_attributes","children":[],"call":[]}," ActiveRecord Dirty reload_with_dirty":{"type":"method","name":"reload_with_dirty","children":[],"call":[" changed_attributes clear "," changed_attributes "," reload_without_dirty "]}," ActiveRecord Dirty save_with_dirty!":{"type":"method","name":"save_with_dirty!","children":[],"call":[" changed_attributes clear "," changed_attributes "," save_without_dirty! "]}," ActiveRecord Dirty save_with_dirty":{"type":"method","name":"save_with_dirty","children":[],"call":[" changed_attributes clear "," changed_attributes "," save_without_dirty "]}," ActiveRecord Dirty changes":{"type":"method","name":"changes","children":[],"call":["h []= "," attribute_change "," changed inject "," changed "]}," ActiveRecord Dirty changed":{"type":"method","name":"changed","children":[],"call":[" changed_attributes keys "," changed_attributes "]}," ActiveRecord Dirty changed?":{"type":"method","name":"changed?","children":[],"call":[" changed_attributes empty? ! "," changed_attributes empty? "," changed_attributes "]}," ActiveRecord Dirty included":{"type":"method","name":"included","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter drop_database":{"type":"method","name":"drop_database","children":[],"call":[" execute ","@logger warn "," quote_table_name "," postgresql_version >= "," postgresql_version "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter create_database":{"type":"method","name":"create_database","children":[],"call":[" execute ","options symbolize_keys sum ","options symbolize_keys ","options reverse_merge "," quote_table_name ","options reverse_merge  symbolize_keys sum ","options reverse_merge  symbolize_keys ","options reverse_merge  reverse_merge "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter recreate_database":{"type":"method","name":"recreate_database","children":[],"call":[" create_database "," drop_database "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter result_as_array":{"type":"method","name":"result_as_array","children":[],"call":["ary [] << ","res getvalue ","ary [] ","res nfields ","ary << ","res ntuples "," unescape_bytea ","data is_a? ","unescape_col [] ","unescape_col << ","res ftype == ","res ftype ","data gsub! sub! ","data gsub! ","String  === ","res nfields times ","res ntuples times ","row [] ","monies each ","row []= ","binaries each ","rows each ","typehash [] ","ftypes group_by ","x == ","ftypes any? ","res values ","Array  new "," unescape_bytea  is_a? ","res getvalue  is_a? ","row []  is_a? "," unescape_bytea  gsub! sub! ","res getvalue  gsub! sub! ","row []  gsub! sub! "," unescape_bytea  gsub! ","res getvalue  gsub! ","row []  gsub! ","res values  each "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter supports_disable_referential_integrity?":{"type":"method","name":"supports_disable_referential_integrity?","children":[],"call":["version [] to_i >= ","version [] to_i ","version [] "," query [] [] split "," query [] [] "," query [] "," query "," postgresql_version >= "," postgresql_version "," query [] [] split  [] to_i >= "," query [] [] split  [] to_i "," query [] [] split  [] "," postgresql_ query [] [] split  >= "," postgresql_ query [] [] split  "]}," ActiveRecord ConnectionAdapters MysqlAdapter type_to_sql":{"type":"method","name":"type_to_sql","children":[],"call":["type to_s == ","type to_s "," raise "]}," ActiveRecord ConnectionAdapters MysqlColumn extract_limit":{"type":"method","name":"extract_limit","children":[],"call":["sql_type =~ "]}," ActiveRecord ConnectionAdapters SchemaStatements remove_timestamps":{"type":"method","name":"remove_timestamps","children":[],"call":[" remove_column "," remove_columns "]}," ActiveRecord ConnectionAdapters SchemaStatements add_timestamps":{"type":"method","name":"add_timestamps","children":[],"call":[" add_column "," emit_warning_if_null_unspecified ","options []= ","options [] nil? ","options [] "," supports_datetime_with_precision? ","options key? ! ","options key? "," execute ","fragments join "," quote_table_name "," add_timestamps_for_alter "," add_timestamps_for_alter  join "]}," ActiveRecord ConnectionAdapters SchemaStatements assume_migrated_upto_version":{"type":"method","name":"assume_migrated_upto_version","children":[],"call":[" execute ","(send\n  (begin\n    (send\n      (lvar :versions) :-\n      (lvar :migrated))) :select) each ","v < ","version to_i ","(send\n  (lvar :versions) :-\n  (lvar :migrated)) select ","versions - ","migrated include? ","filename split last split first to_i ","filename split last split first ","filename split last split ","filename split last ","filename split ","Dir  [] map ","Dir  [] "," select_values map "," select_values "," quote_table_name ","ActiveRecord Migrator  schema_migrations_table_name ","inserted << "," raise ","inserted include? ","(send\n  (lvar :versions) :-\n  (lvar :migrated)) each ","Set  new ","v to_i ","migrations_paths map ","Array  wrap "," Array ","ActiveRecord Migrator  parse_migration_filename first to_i ","ActiveRecord Migrator  parse_migration_filename first ","ActiveRecord Migrator  parse_migration_filename ","ActiveRecord Migrator  migration_files map ","ActiveRecord Migrator  migration_files "," insert_versions_sql ","inserting count > ","inserting count ","inserting detect ","inserting any? ","(send\n  (lvar :inserting) :map) join ","inserting map ","inserting each "," supports_multi_insert? "," quote ","ActiveRecord SchemaMigration  all_versions map ","ActiveRecord SchemaMigration  all_versions ","ActiveRecord SchemaMigration  table_name "," migration_context parse_migration_filename first to_i "," migration_context parse_migration_filename first "," migration_context parse_migration_filename "," migration_context "," migration_context migration_files map "," migration_context migration_files "," migration_context migrations map "," migration_context migrations "," migration_context get_all_versions "," schema_migration table_name "," schema_migration ","ActiveSupport Deprecation  warn ","Passing migrations_paths to #assume_migrated_upto_version is deprecated and will be removed in Rails 6.1.\n squish ","migrations_paths nil? ","(send\n  (begin\n    (send\n      (lvar :versions) :-\n      (lvar : select_values map ))) :select) each ","(send\n  (begin\n    (send\n      (lvar :versions) :-\n      (lvar :ActiveRecord SchemaMigration  all_versions map ))) :select) each ","(send\n  (begin\n    (send\n      (lvar :versions) :-\n      (lvar : migration_context get_all_versions ))) :select) each ","(send\n  (begin\n    (send\n      (lvar :version to_i s) :-\n      (lvar :migrated))) :select) each ","(send\n  (begin\n    (send\n      (lvar : migration_context migrations map ) :-\n      (lvar :migrated))) :select) each ","version to_i  to_i ","(send\n  (lvar :versions) :-\n  (lvar : select_values map )) select ","(send\n  (lvar :versions) :-\n  (lvar :ActiveRecord SchemaMigration  all_versions map )) select ","(send\n  (lvar :versions) :-\n  (lvar : migration_context get_all_versions )) select ","(send\n  (lvar :version to_i s) :-\n  (lvar :migrated)) select ","(send\n  (lvar : migration_context migrations map ) :-\n  (lvar :migrated)) select ","version to_i s - "," migration_context migrations map  - "," select_values map  include? ","ActiveRecord SchemaMigration  all_versions map  include? "," migration_context get_all_versions  include? ","Set  new  << ","Set  new  include? ","(send\n  (lvar :versions) :-\n  (lvar : select_values map )) each ","(send\n  (lvar :versions) :-\n  (lvar :ActiveRecord SchemaMigration  all_versions map )) each ","(send\n  (lvar :versions) :-\n  (lvar : migration_context get_all_versions )) each ","(send\n  (lvar :version to_i s) :-\n  (lvar :migrated)) each ","(send\n  (lvar : migration_context migrations map ) :-\n  (lvar :migrated)) each ","Array  wrap  map "," Array  map "," insert_version to_i s_sql "," insert_ migration_context migrations map _sql ","ActiveRecord SchemaMigration  all_version to_i s map ","ActiveRecord SchemaMigration  all_ migration_context migrations map  map ","ActiveRecord SchemaMigration  all_version to_i s ","ActiveRecord SchemaMigration  all_ migration_context migrations map  "," migration_context get_all_version to_i s "," migration_context get_all_ migration_context migrations map  ","Passing migrations_paths to #assume_ select_values map _upto_version is deprecated and will be removed in Rails 6.1.\n squish ","Passing migrations_paths to #assume_ActiveRecord SchemaMigration  all_versions map _upto_version is deprecated and will be removed in Rails 6.1.\n squish ","Passing migrations_paths to #assume_ migration_context get_all_versions _upto_version is deprecated and will be removed in Rails 6.1.\n squish ","Passing migrations_paths to #assume_migrated_upto_version to_i  is deprecated and will be removed in Rails 6.1.\n squish ","Passing Array  wrap  to #assume_migrated_upto_version is deprecated and will be removed in Rails 6.1.\n squish ","Passing  Array  to #assume_migrated_upto_version is deprecated and will be removed in Rails 6.1.\n squish ","Array  wrap  nil? "," Array  nil? "]}," ActiveRecord ConnectionAdapters SchemaStatements initialize_schema_migrations_table":{"type":"method","name":"initialize_schema_migrations_table","children":[],"call":[" drop_table "," assume_migrated_upto_version "," select_value to_i "," select_value "," quote_table_name ","t == "," tables detect "," tables ","Base  table_name_prefix + + ","Base  table_name_suffix ","Base  table_name_prefix + ","Base  table_name_prefix "," add_index ","schema_migrations_table column "," create_table ","ActiveRecord Migrator  schema_migrations_table_name "," table_exists? ","ActiveRecord Deprecation  warn ","ActiveSupport Deprecation  warn ","ActiveRecord SchemaMigration  create_table "]}," ActiveRecord ConnectionAdapters SchemaStatements change_table":{"type":"method","name":"change_table","children":[],"call":["Table  new "," bulk_change_table ","recorder commands ","ActiveRecord Migration CommandRecorder  new ","options [] "," supports_bulk_alter? "," update_table_definition ","ActiveRecord Migration CommandRecorder  new  commands "]}," ActiveRecord ConnectionAdapters SchemaStatements table_exists?":{"type":"method","name":"table_exists?","children":[],"call":[" tables include? ","table_name to_s "," tables "," select_values any? "," select_values "," data_source_sql ","table_name present? "," query_values any? "," query_values "]}," ActiveRecord ConnectionAdapters Table native":{"type":"method","name":"native","children":[],"call":["@base native_database_types "]}," ActiveRecord ConnectionAdapters Table remove_references":{"type":"method","name":"remove_references","children":[],"call":["@base remove_column ","polymorphic nil? ","args each ","options delete ","args extract_options! ","@base remove_reference "," name "," raise_on_if_exist_options ","options delete  nil? ","args extract_options!  delete ","args extract_args extract_options! ! "," raise_on_if_exist_args extract_options!  "]}," ActiveRecord ConnectionAdapters Table references":{"type":"method","name":"references","children":[],"call":["@base add_column ","polymorphic is_a? ","polymorphic nil? ","args each ","options delete ","args extract_options! ","@base add_reference "," name "," raise_on_if_exist_options ","options delete  is_a? ","options delete  nil? ","args extract_options!  delete ","args extract_args extract_options! ! "," raise_on_if_exist_args extract_options!  "]}," ActiveRecord ConnectionAdapters Table rename":{"type":"method","name":"rename","children":[],"call":["@base rename_column "," name "]}," ActiveRecord ConnectionAdapters Table remove_timestamps":{"type":"method","name":"remove_timestamps","children":[],"call":["@base remove_timestamps "," name "]}," ActiveRecord ConnectionAdapters Table remove_index":{"type":"method","name":"remove_index","children":[],"call":["@base remove_index "," name "," raise_on_if_exist_options "]}," ActiveRecord ConnectionAdapters Table remove":{"type":"method","name":"remove","children":[],"call":["@base remove_column ","@base remove_columns "," name "," raise_on_if_exist_options "]}," ActiveRecord ConnectionAdapters Table change_default":{"type":"method","name":"change_default","children":[],"call":["@base change_column_default "," name "]}," ActiveRecord ConnectionAdapters Table change":{"type":"method","name":"change","children":[],"call":["@base change_column "," name "," raise_on_if_exist_options "]}," ActiveRecord ConnectionAdapters Table timestamps":{"type":"method","name":"timestamps","children":[],"call":["@base add_timestamps "," name "," emit_warning_if_null_unspecified "," raise_on_if_exist_options "]}," ActiveRecord ConnectionAdapters Table index":{"type":"method","name":"index","children":[],"call":["@base add_index "," name "," raise_on_if_exist_options "]}," ActiveRecord ConnectionAdapters Table column":{"type":"method","name":"column","children":[],"call":["@base add_column "," name "," index ","index_options is_a? ","options delete ","index is_a? "," raise_on_if_exist_options ","options delete  is_a? "]}," ActiveRecord ConnectionAdapters Table initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord AttributeMethods ClassMethods define_write_method_for_time_zone_conversion":{"type":"method","name":"define_write_method_for_time_zone_conversion","children":[],"call":[" evaluate_attribute_method "]}," ActiveRecord AttributeMethods ClassMethods define_read_method_for_time_zone_conversion":{"type":"method","name":"define_read_method_for_time_zone_conversion","children":[],"call":[" evaluate_attribute_method "]}," ActiveRecord AttributeMethods ClassMethods create_time_zone_conversion_attribute?":{"type":"method","name":"create_time_zone_conversion_attribute?","children":[],"call":["(sym :datetime) include? ","column type "," skip_time_zone_conversion_for_attributes include? ! "," skip_time_zone_conversion_for_attributes include? ","name to_sym "," skip_time_zone_conversion_for_attributes "," time_zone_aware_attributes "]}," ActiveRecord Associations ClassMethods JoinDependency JoinAssociation aliased_table_name_for":{"type":"method","name":"aliased_table_name_for","children":[],"call":["name [] + ","table_index + ","name [] "," active_record connection table_alias_length - "," active_record connection table_alias_length "," active_record connection "," active_record ","table_index > ","@join_dependency table_aliases [] ","@join_dependency table_aliases "," active_record connection table_alias_for "," parent_table_name "," pluralize "," reflection name "," reflection ","@join_dependency table_aliases [] zero? "," parent table_joins to_s downcase =~ ","name downcase "," parent table_joins to_s downcase "," parent table_joins to_s "," parent table_joins "," parent "," parent table_joins blank? ! "," parent table_joins blank? "," active_record connection quote_table_name ","@join_dependency count_aliases_from_table_joins ","@join_dependency table_aliases [] == ","@join_dependency table_aliases [] zero? ! ","@join_dependency table_aliases []= ","name [] +  [] + "," active_record connection table_alias_for  [] + ","@join_dependency table_aliases []  + ","name [] +  [] "," active_record connection table_alias_for  [] ","@join_dependency table_aliases []  > "," parent_table_name [] +  "," parent_table_ active_record connection table_alias_for  "," reflection name [] +  "," reflection  active_record connection table_alias_for  ","name [] +  downcase "," active_record connection table_alias_for  downcase "," active_record connection quote_table_name [] +  "," active_record connection quote_table_ active_record connection table_alias_for  "]}," ActiveRecord Associations ClassMethods JoinDependency joins_for_table_name":{"type":"method","name":"joins_for_table_name","children":[],"call":[" joins_for_table_name + "," joins_for_table_name ","join parent aliased_table_name ","join parent ","join parent is_a? ","join is_a? "," join_for_table_name ","  join_for_table_name s_for_table_name + ","  join_for_table_name s_for_table_name "," join_for_table_name  parent aliased_table_name "," join_for_table_name  parent "," join_for_table_name  parent is_a? "," join_for_table_name  is_a? ","  join_for_table_name _for_table_name "]}," ActiveRecord Associations ClassMethods JoinDependency join_for_table_name":{"type":"method","name":"join_for_table_name","children":[],"call":["(send\n  (ivar :@joins) :select) first ","j aliased_table_name == ","table_name gsub ","j aliased_table_name ","@joins select ","j aliased_join_table_name == ","j aliased_join_table_name ","j is_a? ","join nil? "]}," ActiveRecord Associations ClassMethods references_eager_loaded_tables?":{"type":"method","name":"references_eager_loaded_tables?","children":[],"call":[" include_eager_select? "," include_eager_conditions? "," include_eager_order? "," joined_tables ","  joined_tables  "]}," ActiveRecord Associations ClassMethods include_eager_select?":{"type":"method","name":"include_eager_select?","children":[],"call":["(send\n  (send nil :selects_tables\n    (lvar :options)) :-\n  (array\n    (send nil :table_name))) any? "," selects_tables - "," table_name "," selects_tables ","(send\n  (send nil :selects_tables\n    (lvar :options)) :-\n  (begin\n    (or\n      (lvar :joined_tables)\n      (send nil :joined_tables\n        (lvar :options))))) any? "," joined_tables "]}," ActiveRecord Associations ClassMethods selects_tables":{"type":"method","name":"selects_tables","children":[],"call":["select scan flatten ","select scan ","select is_a? ","options [] "," tables_in_string ","options []  scan flatten ","options []  scan ","options []  is_a? "]}," ActiveRecord Associations ClassMethods order_tables":{"type":"method","name":"order_tables","children":[],"call":["order scan flatten ","order scan ","order is_a? ","options [] ","(send\n  (lvar :options) :[]\n  (sym :order)) join "," scope "," tables_in_string ","options []  scan flatten ","(send\n  (lvar :options) :[]\n  (sym :order)) join  scan flatten ","options []  scan ","(send\n  (lvar :options) :[]\n  (sym :order)) join  scan ","options []  is_a? ","(send\n  (lvar :options) :[]\n  (sym :order)) join  is_a? ","(send\n  (lvar :options) :[]\n  (sym :options [] )) join ","(send\n  (lvar :options) :[]\n  (sym :(send\n  (lvar :options) :[]\n  (sym :order)) join )) join "]}," ActiveRecord Associations ClassMethods conditions_tables":{"type":"method","name":"conditions_tables","children":[],"call":["conditions join scan flatten ","conditions join scan ","conditions join ","all << ","cond first ","(send nil :scope\n  (sym :find)\n  (sym :conditions)) inject ","options [] "," scope ","conditions flatten "," tables_in_string "," tables_in_hash ","cond keys "]}," ActiveRecord Associations ClassMethods create_has_one_through_reflection":{"type":"method","name":"create_has_one_through_reflection","children":[],"call":[" create_reflection ","options assert_valid_keys "]}," ActiveRecord Associations ClassMethods configure_dependency_for_belongs_to":{"type":"method","name":"configure_dependency_for_belongs_to","children":[],"call":[" raise ","reflection options [] inspect ","reflection options [] ","reflection options "," before_destroy ","association class delete ","association id ","association class ","association nil? "," send ","reflection name "," define_method ","(str \"belongs_to_dependent_delete_for_\") to_sym ","association destroy ","(str \"belongs_to_dependent_destroy_for_\") to_sym ","reflection options include? ","association delete "," after_destroy "," class_eval ","1707 + ","(sym :destroy) include? ","1614 + ","1586 + ","1597 + ","1617 + ","1698 + "," send  class delete "," send  id "," send  class "," send  nil? ","reflection reflection options []  "," send  destroy "," send  delete "]}," ActiveRecord Associations ClassMethods add_single_associated_save_callbacks":{"type":"method","name":"add_single_associated_save_callbacks","children":[],"call":[" validate "," errors add "," errors ","association valid? ","association target nil? ","association target ","association nil? ! ","association nil? "," instance_variable_get "," define_method ","(str \"validate_associated_records_for_\") to_sym "," instance_variable_get  valid? "," instance_variable_get  target nil? "," instance_variable_get  target "," instance_variable_get  nil? ! "," instance_variable_get  nil? "]}," ActiveRecord HasManyThroughCantAssociateThroughHasManyReflection initialize":{"type":"method","name":"initialize","children":[],"call":["reflection source_reflection macro ","reflection source_reflection ","reflection through_reflection class_name ","reflection through_reflection ","reflection source_reflection class_name ","reflection name ","owner class name ","owner class "]}," ActiveRecord Associations HasOneThroughAssociation find_target":{"type":"method","name":"find_target","children":[],"call":[" first ","@reflection klass find ","@reflection klass "," with_scope "," construct_scope "]}," ActiveRecord Associations HasOneThroughAssociation find":{"type":"method","name":"find","children":[],"call":["args merge "]}," ActiveRecord Associations HasOneThroughAssociation create_through_record":{"type":"method","name":"create_through_record","children":[],"call":["@owner send ","klass send "," construct_join_attributes ","@reflection through_reflection name ","@reflection through_reflection ","@owner clear_association_cache ","klass destroy ","@reflection through_reflection klass ","current_object update_attributes ","klass create ","through_association build "," target= ","@owner new_record? ","current_object destroy ","@owner persisted? ","through_proxy create ","through_proxy build "," owner new_record? "," owner ","through_record update_attributes ","through_record destroy ","record ! ","through_proxy send "," owner association "," through_reflection name "," through_reflection "," ensure_not_nested ","through_record update ","through_proxy tap target ","through_proxy tap ","through_record destroyed? ","through_proxy load_target ","save ! "," through_association ","through_record assign_attributes ","through_record new_record? ","@reflection through_reflection klass  send "," construct_join_ construct_join_attributes  ","@reflection through_reflection klass  destroy ","@reflection through_reflection @reflection through_reflection klass  ","@owner send  update_attributes ","current_object update_ construct_join_attributes  ","@reflection through_reflection klass  create ","@owner send  build ","@owner send  destroy "," owner association  create "," through_association  create "," owner association  build "," through_association  build ","through_record update_ construct_join_attributes  ","through_proxy send  update_attributes ","through_proxy tap target  update_attributes ","through_proxy load_target  update_attributes ","through_proxy send  destroy ","through_proxy tap target  destroy ","through_proxy load_target  destroy "," owner association  send "," through_association  send ","through_proxy send  update ","through_proxy tap target  update ","through_proxy load_target  update "," owner association  tap target "," through_association  tap target "," owner association  tap "," through_association  tap ","through_proxy send  destroyed? ","through_proxy tap target  destroyed? ","through_proxy load_target  destroyed? "," owner association  load_target "," through_association  load_target "," @owner send  ","through_record assign_ construct_join_attributes  ","through_proxy send  assign_attributes ","through_proxy tap target  assign_attributes ","through_proxy load_target  assign_attributes ","through_proxy send  new_record? ","through_proxy tap target  new_record? ","through_proxy load_target  new_record? "]}," ActiveRecord Associations HasManyThroughAssociation build_through_conditions":{"type":"method","name":"build_through_conditions","children":[],"call":[" interpolate_sql "," sanitize_sql "," interpolate_sql gsub ","@reflection through_reflection quoted_table_name ","@reflection through_reflection ","@reflection quoted_table_name ","conditions is_a? ","@reflection through_reflection options [] ","@reflection through_reflection options ","@reflection through_reflection options []  is_a? "]}," ActiveRecord Associations HasManyThroughAssociation delete_records":{"type":"method","name":"delete_records","children":[],"call":["klass delete_all "," construct_join_attributes ","records each ","@reflection through_reflection klass ","@reflection through_reflection "," update_counter ","count -@ "," through_reflection "," update_through_counter? "," through_reflection macro == "," through_reflection macro "," delete_through_records ","scope delete_all ","scope update_all "," source_reflection foreign_key "," source_reflection ","scope destroy_all length ","scope destroy_all ","through scoped where ","through scoped "," owner association "," through_reflection name "," owner "," ensure_not_nested "," through_association "," through_association scoped where "," through_association scoped "," klass decrement_counter ","records map "," klass "," source_reflection counter_cache_column "," source_reflection options [] "," source_reflection options "," load_target ","records == ","scope where! "," through_association scope ","method != ","scope klass connection delete ","scope bind_values ","scope klass connection ","scope klass ","stmt wheres= ","arel constraints ","stmt from ","scope klass arel_table ","Arel DeleteManager  new ","arel engine ","scope arel ","record run_callbacks ","scope to_a each ","scope to_a ","scope klass primary_key "," through_reflection collection? ","record _run_destroy_callbacks ","scope each ","scope bound_attributes ","scope destroy_all count ","scope where "," through_scope_attributes ","@reflection through_reflection klass  delete_all "," load_target  each ","@reflection through_reflection @reflection through_reflection klass  ","@reflection  owner association _reflection klass ","@reflection  through_association _reflection klass ","@reflection  owner association _reflection ","@reflection  through_association _reflection "," update_scope delete_all er "," update_scope update_all er "," update_scope destroy_all length er "," update_scope klass connection delete er "," update_scope destroy_all count er "," update_ source_reflection counter_cache_column  ","scope delete_all  -@ ","scope update_all  -@ ","scope destroy_all length  -@ ","scope klass connection delete  -@ ","scope destroy_all count  -@ ","  owner association _reflection ","  through_association _reflection "," update_through_scope delete_all er? "," update_through_scope update_all er? "," update_through_scope destroy_all length er? "," update_through_scope klass connection delete er? "," update_through_scope destroy_all count er? "," update_ owner association _counter? "," update_ through_association _counter? "," update_through_ source_reflection counter_cache_column ? ","  owner association _reflection macro == ","  through_association _reflection macro == ","  owner association _reflection macro ","  through_association _reflection macro "," delete_ owner association _records "," delete_ through_association _records "," delete_through_ load_target  ","through scoped where  delete_all "," through_association scoped where  delete_all "," through_association scope  delete_all ","scope where  delete_all ","through scoped where  update_all "," through_association scoped where  update_all "," through_association scope  update_all ","scope where  update_all ","through scoped where  destroy_all length "," through_association scoped where  destroy_all length "," through_association scope  destroy_all length ","scope where  destroy_all length ","through scoped where  destroy_all "," through_association scoped where  destroy_all "," through_association scope  destroy_all ","scope where  destroy_all ","through through scoped where d where ","through  through_association scoped where d where ","through  through_association scope d where ","through scope where d where "," owner association  scoped where "," through_association  scoped where ","through through scoped where d ","through  through_association scoped where d ","through  through_association scope d ","through scope where d "," owner association  scoped "," through_association  scoped ","  owner association _reflection name ","  through_association _reflection name ","  owner association _association ","  through_association _association "," through_association through scoped where d where "," through_association  through_association scoped where d where "," through_association  through_association scope d where "," through_association scope where d where ","  owner association _association scoped where ","  through_association _association scoped where "," through_association through scoped where d "," through_association  through_association scoped where d "," through_association  through_association scope d "," through_association scope where d ","  owner association _association scoped ","  through_association _association scoped "," @reflection through_reflection klass  decrement_counter "," klass decrement_scope delete_all er "," klass decrement_scope update_all er "," klass decrement_scope destroy_all length er "," klass decrement_scope klass connection delete er "," klass decrement_scope destroy_all count er "," klass decrement_ source_reflection counter_cache_column  "," load_target  map "," @reflection through_reflection klass  "," source_reflection scope delete_all er_cache_column "," source_reflection scope update_all er_cache_column "," source_reflection scope destroy_all length er_cache_column "," source_reflection scope klass connection delete er_cache_column "," source_reflection scope destroy_all count er_cache_column "," source_reflection  source_reflection counter_cache_column _cache_column "," load_target  == ","through scoped where  where! "," through_association scoped where  where! "," through_association scope  where! ","scope where  where! "," through_association through scoped where  "," through_association  through_association scoped where  "," through_association  through_association scope  "," through_association scope where  ","  owner association _association scope ","  through_association _association scope ","scope @reflection through_reflection klass  connection delete ","through scoped where  klass connection delete "," through_association scoped where  klass connection delete "," through_association scope  klass connection delete ","scope where  klass connection delete ","through scoped where  bind_values "," through_association scoped where  bind_values "," through_association scope  bind_values ","scope where  bind_values ","scope @reflection through_reflection klass  connection ","through scoped where  klass connection "," through_association scoped where  klass connection "," through_association scope  klass connection ","scope where  klass connection ","scope @reflection through_reflection klass  ","through scoped where  klass "," through_association scoped where  klass "," through_association scope  klass ","scope where  klass ","Arel DeleteManager  new  wheres= ","scope arel  constraints ","Arel DeleteManager  new  from ","scope @reflection through_reflection klass  arel_table ","through scoped where  klass arel_table "," through_association scoped where  klass arel_table "," through_association scope  klass arel_table ","scope where  klass arel_table ","scope klass scope arel _table ","scope arel  engine ","through scoped where  arel "," through_association scoped where  arel "," through_association scope  arel ","scope where  arel ","scope scope arel  ","through scoped where  to_a each "," through_association scoped where  to_a each "," through_association scope  to_a each ","scope where  to_a each ","through scoped where  to_a "," through_association scoped where  to_a "," through_association scope  to_a ","scope where  to_a ","scope @reflection through_reflection klass  primary_key ","through scoped where  klass primary_key "," through_association scoped where  klass primary_key "," through_association scope  klass primary_key ","scope where  klass primary_key ","  owner association _reflection collection? ","  through_association _reflection collection? ","through scoped where  each "," through_association scoped where  each "," through_association scope  each ","scope where  each ","through scoped where  bound_attributes "," through_association scoped where  bound_attributes "," through_association scope  bound_attributes ","scope where  bound_attributes ","scope destroy_all scope delete_all  ","scope destroy_all scope update_all  ","scope destroy_all scope destroy_all length  ","scope destroy_all scope klass connection delete  ","scope destroy_all scope destroy_all count  ","through scoped where  destroy_all count "," through_association scoped where  destroy_all count "," through_association scope  destroy_all count ","scope where  destroy_all count ","through scoped where  where "," through_association scoped where  where "," through_association scope  where ","scope where  where "," through_through scoped where _attributes "," through_ through_association scoped where _attributes "," through_ through_association scope _attributes "," through_scope where _attributes ","  owner association _scope_attributes ","  through_association _scope_attributes "]}," ActiveRecord Associations HasManyThroughAssociation insert_record":{"type":"method","name":"insert_record","children":[],"call":["@owner send proxy_target << ","klass create! ","klass send "," construct_join_attributes ","@owner send proxy_target ","@owner send ","@reflection through_reflection name ","@reflection through_reflection ","@reflection through_reflection klass ","record save ","record save! ","record new_record? ","through_reflection create_association! ","through_reflection klass ","through_association proxy_target << ","through_association proxy_target ","through_association create! ","record persisted? "," update_counter "," through_record save! "," through_record "," ensure_not_nested ","record save ! "," save_through_record "," update_counter_in_database ","ActiveSupport Deprecation  warn ","(str \"            Automatic updating of counter caches on through associations has been\\n\") squish "," through_reflection name "," through_reflection "," through_reflection_updates_counter_cache? ! "," through_reflection_updates_counter_cache? "," has_cached_counter? ","(str \"            Automatic updating of counter caches on through associations has been\\n\") strip_heredoc ","record changed? ","record has_changes_to_save? ","@reflection through_reflection klass  create! ","through_reflection klass  create! ","@reflection through_reflection klass  send ","through_reflection klass  send ","@reflection @reflection through_reflection  name ","@reflection @reflection through_reflection  ","@reflection through_reflection @reflection through_reflection klass  ","@reflection through_reflection through_reflection klass  ","@reflection @reflection through_reflection  klass ","@reflection through_reflection  create_association! ","through_reflection @reflection through_reflection klass  ","through_reflection through_reflection klass  ","@reflection through_reflection  klass ","@owner send  proxy_target << ","@owner send  proxy_target ","@owner send  create! "," through_association create!  save! "," through_association create!  "," save_through_association create!  "," @reflection through_reflection  name "," @reflection through_reflection  "," @reflection through_reflection _updates_counter_cache? ! "," @reflection through_reflection _updates_counter_cache? "]}," ActiveRecord Associations HasManyThroughAssociation construct_find_options!":{"type":"method","name":"construct_find_options!","children":[],"call":["options []= ","@reflection source_reflection options [] ","@reflection source_reflection options ","@reflection source_reflection ","options [] nil? ","options [] "," construct_joins "," construct_from "," construct_select "]}," ActiveRecord Associations HasManyThroughAssociation create":{"type":"method","name":"create","children":[],"call":[" << ","@reflection klass create ","@reflection klass ","@reflection klass send ","@reflection klass transaction ","@reflection create_association "," transaction "," insert_record "," add_record_to_target_with_callbacks "," raise_on_type_mismatch "," create_record "]}," ActiveRecord Associations HasAndBelongsToManyAssociation construct_find_options!":{"type":"method","name":"construct_find_options!","children":[],"call":["@reflection options [] ","@reflection options ","options [] ","options []= "," finding_with_ambiguous_select? ","Arel SqlLiteral  new "]}," ActiveRecord Associations AssociationProxy with_scope":{"type":"method","name":"with_scope","children":[],"call":["@reflection klass send ","@reflection klass "]}," ActiveRecord Associations AssociationCollection fetch_first_or_last_using_find?":{"type":"method","name":"fetch_first_or_last_using_find?","children":[],"call":["(or\n  (or\n    (or\n      (or\n        (send nil :loaded?)\n        (send\n          (ivar :@owner) :new_record?))\n      (send\n        (send\n          (ivar :@reflection) :options) :[]\n        (sym :finder_sql)))\n    (send\n      (send\n        (ivar :@target) :blank?) :!))\n  (send\n    (send\n      (lvar :args) :first) :kind_of?\n    (const nil :Integer))) ! ","args first kind_of? ","args first ","@target blank? ! ","@target blank? ","@reflection options [] ","@reflection options ","@owner new_record? "," loaded? ","(or\n  (or\n    (or\n      (or\n        (send nil :loaded?)\n        (send\n          (ivar :@owner) :new_record?))\n      (send\n        (send\n          (ivar :@reflection) :options) :[]\n        (sym :finder_sql)))\n    (block\n      (send\n        (ivar :@target) :any?)\n      (args\n        (arg :record))\n      (send\n        (lvar :record) :new_record?)))\n  (send\n    (send\n      (lvar :args) :first) :kind_of?\n    (const nil :Integer))) ! ","record new_record? ","@target any? ","(or\n  (or\n    (or\n      (or\n        (send nil :loaded?)\n        (send\n          (send\n            (ivar :@owner) :persisted?) :!))\n      (send\n        (send\n          (ivar :@reflection) :options) :[]\n        (sym :finder_sql)))\n    (send\n      (block\n        (send\n          (ivar :@target) :all?)\n        (args\n          (arg :record))\n        (send\n          (lvar :record) :persisted?)) :!))\n  (send\n    (send\n      (lvar :args) :first) :kind_of?\n    (const nil :Integer))) ! ","(send\n  (ivar :@target) :all?) ! ","record persisted? ","@target all? ","@owner persisted? ! ","@owner persisted? "]}," ActiveRecord Associations AssociationCollection load_target":{"type":"method","name":"load_target","children":[],"call":[" target "," loaded "," reset "," find_target "," find_target + ","t new_record? ","@target find_all ","@target any? ","@target is_a? "," loaded? ! "," loaded? "," foreign_key_present ","@owner new_record? ! ","@owner new_record? ","(send\n  (send nil :find_target) :map) + ","t attributes= ","f attributes except ","f attributes ","(str \"id\") + + ","f attribute_names - ","t attribute_names ","f attribute_names ","(str \"id\") + ","t changes keys ","t changes ","@target delete_at tap ","@target delete_at ","@target index "," find_target map ","f mark_for_destruction ","t marked_for_destruction? ","t changed? ","@owner persisted? "," @target delete_at arge@target delete_at  "," rese@target delete_at  "," f@target index nd_target "," find_@target delete_at arge@target delete_at  "," f@target index nd_target + "," find_@target delete_at arge@target delete_at  + ","@target delete_at  new_record? "," find_target  find_all "," find_target +  find_all ","(send\n  (send nil :find_target) :map) +  find_all ","@target f@target index nd_all ","@@target delete_at arge@target delete_at  find_all "," find_target  any? "," find_target +  any? ","(send\n  (send nil :find_target) :map) +  any? ","@@target delete_at arge@target delete_at  any? "," find_target  is_a? "," find_target +  is_a? ","(send\n  (send nil :find_target) :map) +  is_a? ","@target @target index s_a? ","@@target delete_at arge@target delete_at  is_a? "," fore@target index gn_key_present "," foreign_key_presen@target delete_at  ","(send\n  (send n@target index l :f@target index nd_target) :map) + ","(send\n  (send nil :find_@target delete_at arge@target delete_at ) :map) + ","t attr@target index butes= ","@target delete_at  a@target delete_at @target delete_at ribu@target delete_at es= ","f attr@target index butes except ","f a@target delete_at @target delete_at ribu@target delete_at es excep@target delete_at  ","f attr@target index butes ","f a@target delete_at @target delete_at ribu@target delete_at es ","(str \"@target index d\") + + ","(s@target delete_at r \"id\") + + ","f attr@target index bute_names - ","f a@target delete_at @target delete_at ribu@target delete_at e_names - ","t attr@target index bute_names ","@target delete_at  a@target delete_at @target delete_at ribu@target delete_at e_names ","f attr@target index bute_names ","f a@target delete_at @target delete_at ribu@target delete_at e_names ","(str \"@target index d\") + ","(s@target delete_at r \"id\") + ","t changes (str \"id\") + +  ","@target delete_at  changes keys ","@target delete_at  changes "," find_target  delete_at tap "," find_target +  delete_at tap ","(send\n  (send nil :find_target) :map) +  delete_at tap ","@@target delete_at arge@target delete_at  dele@target delete_at e_a@target delete_at  @target delete_at ap "," find_target  delete_at "," find_target +  delete_at ","(send\n  (send nil :find_target) :map) +  delete_at ","@@target delete_at arge@target delete_at  dele@target delete_at e_a@target delete_at  "," find_target  index "," find_target +  index ","(send\n  (send nil :find_target) :map) +  index ","@target @target index ndex ","@@target delete_at arge@target delete_at  index "," f@target index nd_target map "," find_@target delete_at arge@target delete_at  map ","f mark_for_destruct@target index on ","f mark_for_des@target delete_at ruc@target delete_at ion ","t marked_for_destruct@target index on? ","@target delete_at  marked_for_des@target delete_at ruc@target delete_at ion? ","@target delete_at  changed? ","@owner pers@target index sted? ","@owner persis@target delete_at ed? "]}," ActiveRecord Associations AssociationCollection construct_find_options!":{"type":"method","name":"construct_find_options!","children":[],"call":[]}," ActiveRecord Associations AssociationCollection include?":{"type":"method","name":"include?","children":[],"call":[" exists? ","@target include? "," loaded? "," load_target "," loaded? ! ","@reflection options [] ","@reflection options ","record is_a? ","@reflection klass "," include_in_memory? ","record new_record? ","record persisted? "]}," ActiveRecord Associations AssociationCollection build":{"type":"method","name":"build","children":[],"call":[" set_belongs_to_association_for "," build_record "," build ","attributes collect ","attributes is_a? ","block call "," block_given? "]}," ActiveRecord Associations AssociationCollection last":{"type":"method","name":"last","children":[],"call":["@target last "," load_target "," loaded? "," find "," fetch_first_or_last_using_find? "]}," ActiveRecord Associations AssociationCollection first":{"type":"method","name":"first","children":[],"call":["@target first "," load_target "," loaded? "," find "," fetch_first_or_last_using_find? "]}," ActiveRecord Associations AssociationCollection find":{"type":"method","name":"find","children":[],"call":["@reflection klass find ","@reflection klass ","args << "," merge_options_from_reflection! "," construct_find_options! ","options []= ","@reflection options [] ","@reflection options ","options [] ","conditions << "," sanitize_sql ","ids include? ","r id "," load_target select "," load_target ","id == "," load_target detect ","ids first ","ids size == ","ids size ","args flatten compact uniq map ","args flatten compact uniq ","args flatten compact ","args flatten ","args first kind_of? ","args first ","args extract_options! ","arg to_i ","relation find "," uniq ","relation all ","relation send ","@reflection klass send "," with_scope "," construct_scope [] slice "," construct_scope [] "," construct_scope "," merge_args extract_options! _from_reflection! "," construct_find_args extract_options! ! ","args extract_options!  []= ","@reflection args extract_options!  [] ","@reflection args extract_options!  ","args extract_options!  [] ","ids first s include? ","args flatten compact uniq map  include? ","r ids first  ","ids first  == ","ids first s first ","args flatten compact uniq map  first ","ids first s size == ","args flatten compact uniq map  size == ","ids first s size ","args flatten compact uniq map  size ","args extract_args extract_options! ! ","@reflection klass send  find ","@reflection klass send  all ","@reflection klass send  send "]}," ActiveRecord AssociationPreload ClassMethods append_conditions":{"type":"method","name":"append_conditions","children":[],"call":["sql << "," sanitize_sql ","preload_options [] "," interpolate_sql_for_preload ","options [] ","reflection sanitized_conditions "," process_conditions_for_preload ","reflection klass ","reflection options [] ","reflection options "]}," ActiveRecord AssociationPreload ClassMethods interpolate_sql_for_preload":{"type":"method","name":"interpolate_sql_for_preload","children":[],"call":[" instance_eval ","sql gsub "]}," ActiveRecord AssociationPreload ClassMethods find_associated_records":{"type":"method","name":"find_associated_records","children":[],"call":["reflection klass find ","options [] ","preload_options [] ","reflection klass ","conditions << "," append_conditions ","reflection klass quoted_table_name ","reflection primary_key_name "," base_class name demodulize "," base_class name "," base_class "," connection quote_column_name "," connection ","reflection options [] ","reflection options "," base_class sti_name "," in_or_equals_for_ids ","reflection klass with_exclusive_scope ","reflection active_record sti_name ","reflection active_record ","reflection active_record abstract_class? ","reflection klass scoped apply_finder_options to_a ","reflection klass scoped apply_finder_options ","reflection klass scoped ","Arel SqlLiteral  new ","reflection klass unscoped apply_finder_options to_a ","reflection klass unscoped apply_finder_options ","reflection klass unscoped ","find_options merge "," associated_records ","reflection options  [] ","preload_reflection options  [] ","reflection klass quoted_reflection klass quoted_table_name  ","reflection reflection options  [] ","reflection reflection options  ","reflection klass scoped apply_finder_reflection options  to_a ","reflection klass scoped apply_finder_reflection options  ","reflection klass unscoped apply_finder_reflection options  to_a ","reflection klass unscoped apply_finder_reflection options  ","find_reflection options  merge "]}," ActiveRecord AssociationPreload ClassMethods preload_belongs_to_association":{"type":"method","name":"preload_belongs_to_association","children":[],"call":[" set_association_single_records ","reflection name ","klass find ","options [] ","id_map keys uniq ","id_map keys ","conditions << "," append_conditions ","klass primary_key ","klass quoted_table_name ","klass_name constantize ","klasses_and_ids each ","reflection klass name ","reflection klass ","mapped_records << ","id_map [] ","key to_s ","record send ","records each ","klasses_and_ids to_a ","id_list_for_klass_id << ","klass_id to_s ","klasses_and_ids [] ","reflection primary_key_name ","reflection options ","id to_f ","column_type == ","id to_i ","id_map keys uniq map ","(send\n  (send\n    (lvar :klass) :columns) :detect) type ","c name == ","c name ","klass columns detect ","klass columns "," connection quote_column_name "," connection "," in_or_equals_for_ids ","id_map keys map ","records first send ","records first ","klass with_exclusive_scope ","reflection options [] ","id_map empty? ","klass unscoped where apply_finder_options to_a ","klass unscoped where apply_finder_options ","options slice ","klass unscoped where ","klass unscoped ","(or\n  (send\n    (send\n      (lvar :reflection) :options) :[]\n    (sym :primary_key))\n  (send\n    (lvar :klass) :primary_key)) to_s ","klass_name constantize  find ","record send  find ","reflection options  [] ","id_map record send s uniq ","id_map record send s ","klass klass primary_key  ","klass (or\n  (send\n    (send\n      (lvar :reflection) :options) :[]\n    (sym :primary_key))\n  (send\n    (lvar :klass) :primary_key)) to_s  ","klass_name constantize  primary_key ","record send  primary_key ","klass primary_record send  ","klass quoted_klass quoted_table_name  ","klass_name constantize  quoted_table_name ","record send  quoted_table_name ","klass_name constantize _name constantize ","record send _name constantize ","klass_name constantize es_and_ids each ","record send es_and_ids each ","klasses_and_ids to_a  each ","reflection klass_name constantize  name ","reflection record send  name ","reflection klass_name constantize  ","reflection record send  ","record send  to_s ","klass_name constantize es_and_ids to_a ","record send es_and_ids to_a ","klasses_and_ids to_a  to_a ","id_list_for_klass_name constantize _id << ","id_list_for_record send _id << ","id_list_for_record send  << ","klass_name constantize _id to_s ","record send _id to_s ","klass_name constantize es_and_ids [] ","record send es_and_ids [] ","klasses_and_ids to_a  [] ","reflection klass primary_key _name ","reflection (or\n  (send\n    (send\n      (lvar :reflection) :options) :[]\n    (sym :primary_key))\n  (send\n    (lvar :klass) :primary_key)) to_s _name ","reflection primary_record send _name ","reflection reflection primary_key_name  ","reflection reflection options  ","(send\n  (send\n    (lvar :klass) :columns) :detect) type  == ","id_map record send s uniq map ","(send\n  (send\n    (lvar :klass_name constantize ) :columns) :detect) type ","(send\n  (send\n    (lvar :record send ) :columns) :detect) type ","klass_name constantize  columns detect ","record send  columns detect ","klass_name constantize  columns ","record send  columns ","id_map record send s map ","klass_name constantize  with_exclusive_scope ","record send  with_exclusive_scope ","reflection reflection options  [] ","klass_name constantize  unscoped where apply_finder_options to_a ","record send  unscoped where apply_finder_options to_a ","klass unscoped where apply_finder_reflection options  to_a ","klass_name constantize  unscoped where apply_finder_options ","record send  unscoped where apply_finder_options ","klass unscoped where apply_finder_reflection options  ","reflection options  slice ","klass_name constantize  unscoped where ","record send  unscoped where ","klass_name constantize  unscoped ","record send  unscoped ","(or\n  (send\n    (send\n      (lvar :reflection) :options) :[]\n    (sym :klass primary_key ))\n  (send\n    (lvar :klass) :klass primary_key )) to_s ","(or\n  (send\n    (send\n      (lvar :reflection) :options) :[]\n    (sym :(or\n  (send\n    (send\n      (lvar :reflection) :options) :[]\n    (sym :primary_key))\n  (send\n    (lvar :klass) :primary_key)) to_s ))\n  (send\n    (lvar :klass) :(or\n  (send\n    (send\n      (lvar :reflection) :options) :[]\n    (sym :primary_key))\n  (send\n    (lvar :klass) :primary_key)) to_s )) to_s ","(or\n  (send\n    (send\n      (lvar :reflection) :options) :[]\n    (sym :primary_key))\n  (send\n    (lvar :klass_name constantize ) :primary_key)) to_s ","(or\n  (send\n    (send\n      (lvar :reflection) :options) :[]\n    (sym :primary_key))\n  (send\n    (lvar :record send ) :primary_key)) to_s ","(or\n  (send\n    (send\n      (lvar :reflection) :options) :[]\n    (sym :primary_record send ))\n  (send\n    (lvar :klass) :primary_record send )) to_s ","(or\n  (send\n    (send\n      (lvar :reflection) :reflection options ) :[]\n    (sym :primary_key))\n  (send\n    (lvar :klass) :primary_key)) to_s "]}," ActiveRecord AssociationPreload ClassMethods preload_through_records":{"type":"method","name":"preload_through_records","children":[],"call":["through_records compact! ","(send\n  (lvar :records) :map) flatten ","record send ","records map ","records first class preload_associations ","records first class ","records first ","through_records flatten! ","through_records << ","proxy reset ","proxy target ","proxy respond_to? ","records each ","records compact! ","reflection options [] ","reflection options "," connection quote_column_name "," connection ","reflection source_reflection options [] ","reflection source_reflection options ","reflection source_reflection ","through_reflection primary_key_name "," reflections [] "," reflections ","options []= ","through_records concat ","Array  wrap ","(send\n  (lvar :records) :map) flatten  compact! ","(send\n  (lvar :records) :map) flatten  flatten! ","(send\n  (lvar :records) :map) flatten  << ","record send  reset ","record send  target ","record send  respond_to? "," reflections []  primary_key_name ","(send\n  (lvar :records) :map) flatten  concat "]}," ActiveRecord AssociationPreload ClassMethods preload_has_many_association":{"type":"method","name":"preload_has_many_association","children":[],"call":[" set_association_collection_records ","reflection primary_key_name "," find_associated_records ","reflection name "," add_preloaded_records_to_collection ","through_record send ","id_to_record_map [] ","through_record [] to_s ","through_record [] ","through_records each ","through_records first class preload_associations ","reflection options ","through_records first class ","through_records first ","reflection source_reflection name ","reflection source_reflection ","through_records empty? ","through_reflection primary_key_name "," reflections [] ","options [] "," reflections "," preload_through_records ","record send loaded ","record send ","records each "," construct_id_map ","reflection through_reflection_primary_key ","reflection through_reflection_primary_key_name ","records first send loaded? ","records first send ","records first ","reflection options [] ","reflection reflection through_reflection_primary_key_name  "," preload_through_records  each "," preload_through_records  first class preload_associations ","reflection reflection options  "," preload_through_records  first class "," preload_through_records  first ","reflection reflection source_reflection name _reflection name ","reflection reflection source_reflection name _reflection "," preload_through_records  empty? "," reflections []  primary_key_name ","through_reflection reflection through_reflection_primary_key_name  ","reflection options  [] "," preload_ preload_through_records  ","reflection  reflections [] _primary_key ","reflection  reflections [] _primary_key_name ","reflection through_reflection_reflection through_reflection_primary_key_name  ","reflection reflection options  [] "]}," ActiveRecord AssociationPreload ClassMethods preload_has_one_association":{"type":"method","name":"preload_has_one_association","children":[],"call":[" set_association_single_records ","reflection primary_key_name "," find_associated_records ","reflection name ","record send ","records each "," add_preloaded_record_to_collection ","through_record send ","id_to_record_map [] ","through_record [] to_s ","through_record [] ","through_records each ","through_records first class preload_associations ","through_records first class ","through_records first ","reflection source_reflection name ","reflection source_reflection ","through_records empty? ","through_reflection primary_key_name "," reflections [] ","options [] "," reflections "," preload_through_records ","record send loaded ","reflection options "," construct_id_map ","records first send ","records first ","rev_id_to_record_map [] ","through_reflection klass primary_key ","through_reflection klass ","through_reflection macro == ","through_reflection macro ","reflection options [] "," preload_through_records  each "," preload_through_records  first class preload_associations "," preload_through_records  first class "," preload_through_records  first ","reflection reflection source_reflection name _reflection name ","reflection reflection source_reflection name _reflection "," preload_through_records  empty? "," reflections []  primary_key_name ","reflection options  [] "," preload_ preload_through_records  ","reflection reflection options  "," reflections []  klass primary_key "," reflections []  klass "," reflections []  macro == "," reflections []  macro ","reflection reflection options  [] "]}," ActiveRecord AssociationPreload ClassMethods preload_has_and_belongs_to_many_association":{"type":"method","name":"preload_has_and_belongs_to_many_association","children":[],"call":[" set_association_collection_records ","reflection name ","reflection klass find ","options [] ","reflection primary_key_name ","table_name + ","reflection association_foreign_key ","reflection klass primary_key ","reflection klass ","reflection klass quoted_table_name "," connection quote_table_name "," connection ","conditions << "," append_conditions ","reflection options ","record send loaded ","record send ","records each "," construct_id_map "," in_or_equals_for_ids ","reflection klass with_exclusive_scope ","reflection klass unscoped where includes joins select order to_a ","reflection klass unscoped where includes joins select order ","reflection klass unscoped where includes joins select ","reflection klass unscoped where includes joins ","reflection klass unscoped where includes ","reflection klass unscoped where ","reflection klass unscoped ","associated_records_proxy where to_a ","associated_records_proxy where "," associated_records ","reflection klass unscoped includes joins select order ","reflection klass unscoped includes joins select ","reflection klass unscoped includes joins ","reflection klass unscoped includes ","reflection options  [] ","reflection klass quoted_table_name  + ","reflection klass quoted_reflection klass quoted_table_name  "," connection quote_reflection klass quoted_table_name  ","reflection reflection options  ","reflection klass find _proxy where to_a ","reflection klass unscoped where includes joins select order to_a _proxy where to_a ","reflection klass unscoped includes joins select order  where to_a ","reflection klass find _proxy where ","reflection klass unscoped where includes joins select order to_a _proxy where ","reflection klass unscoped includes joins select order  where "," reflection klass find  "," reflection klass unscoped where includes joins select order to_a  "]}," ActiveRecord AssociationPreload ClassMethods construct_id_map":{"type":"method","name":"construct_id_map","children":[],"call":["ids uniq! ","mapped_records << ","id_to_record_map [] ","record id to_s ","record id ","ids << ","records each ","ids last to_s ","ids last ","record [] ","record class primary_key ","record class "]}," ActiveRecord AssociationPreload ClassMethods set_association_single_records":{"type":"method","name":"set_association_single_records","children":[],"call":["mapped_record send ","mapped_records each ","id_to_record_map [] ","associated_record [] to_s ","associated_record [] ","seen_keys []= ","seen_keys [] ","associated_records each ","record send ","records each ","seen_keys include? ","id to_s ","id_to_record_map each ","association_proxy __send__ ","id_to_record_map []  each ","mapped_record send  __send__ "]}," ActiveRecord AssociationPreload ClassMethods set_association_collection_records":{"type":"method","name":"set_association_collection_records","children":[],"call":[" add_preloaded_records_to_collection ","id_to_record_map [] ","associated_record [] to_s ","associated_record [] ","associated_records each "]}," ActiveRecord AssociationPreload ClassMethods add_preloaded_record_to_collection":{"type":"method","name":"add_preloaded_record_to_collection","children":[],"call":["association_proxy target= ","association_proxy loaded ","parent_record send ","parent_records each ","parent_record send  target= ","parent_record send  loaded "]}," ActiveRecord AssociationPreload ClassMethods add_preloaded_records_to_collection":{"type":"method","name":"add_preloaded_records_to_collection","children":[],"call":["association_proxy target push ","(lvar :associated_record) flatten ","association_proxy target ","association_proxy loaded ","parent_record send ","parent_records each ","association_proxy __send__ ","Array  wrap ","parent_record send  target push ","parent_record send  target ","parent_record send  loaded ","parent_record send  __send__ "]}," ActiveRecord AssociationPreload ClassMethods preload_one_association":{"type":"method","name":"preload_one_association","children":[],"call":[" send ","reflection macro "," raise ","(send\n  (lvar :records) :group_by) each ","record class reflections [] ","record class reflections ","record class ","class_to_reflection [] ","records group_by "]}," ActiveRecord AssociationPreload ClassMethods preload_associations":{"type":"method","name":"preload_associations","children":[],"call":["parents first class preload_associations ","parents first class ","parents first ","parents first nil? ","parents empty? ","(send\n  (lvar :records) :map) flatten ","record send ","reflection name ","records map "," reflections [] "," reflections "," preload_associations "," raise ","parent is_a? ","associations each "," preload_one_association ","associations to_sym ","records empty? ","(lvar :records) flatten compact uniq ","(lvar :records) flatten compact ","(lvar :records) flatten ","(send\n  (lvar :records) :map) flatten compact ","Array  wrap ","records sum ","Array  wrap compact uniq ","Array  wrap compact ","parents uniq ","reflection macro == ","reflection macro ","(send\n  (lvar :records) :map) flatten  first class preload_associations ","(send\n  (lvar :records) :map) flatten compact  first class preload_associations ","parents uniq  first class preload_associations ","(send\n  (lvar :records) :map) flatten  first class ","(send\n  (lvar :records) :map) flatten compact  first class ","parents uniq  first class ","(send\n  (lvar :records) :map) flatten  first ","(send\n  (lvar :records) :map) flatten compact  first ","parents uniq  first ","(send\n  (lvar :records) :map) flatten  first nil? ","(send\n  (lvar :records) :map) flatten compact  first nil? ","parents uniq  first nil? ","(send\n  (lvar :records) :map) flatten  empty? ","(send\n  (lvar :records) :map) flatten compact  empty? ","parents uniq  empty? ","(send\n  (lvar :(lvar :records) flatten compact uniq ) :map) flatten ","(send\n  (lvar :Array  wrap compact uniq ) :map) flatten ","(send\n  (lvar :Array  wrap compact ) :map) flatten "," reflections []  name ","(lvar :records) flatten compact uniq  map ","Array  wrap compact uniq  map ","Array  wrap compact  map ","  reflections [] s [] ","  reflections [] s ","(lvar :records) flatten compact uniq  empty? ","Array  wrap compact uniq  empty? ","Array  wrap compact  empty? ","(lvar :(lvar :records) flatten compact uniq ) flatten compact uniq ","(lvar :Array  wrap compact uniq ) flatten compact uniq ","(lvar :Array  wrap compact ) flatten compact uniq ","(lvar :(lvar :records) flatten compact uniq ) flatten compact ","(lvar :Array  wrap compact uniq ) flatten compact ","(lvar :Array  wrap compact ) flatten compact ","(lvar :(lvar :records) flatten compact uniq ) flatten ","(lvar :Array  wrap compact uniq ) flatten ","(lvar :Array  wrap compact ) flatten ","(send\n  (lvar :(lvar :records) flatten compact uniq ) :map) flatten compact ","(send\n  (lvar :Array  wrap compact uniq ) :map) flatten compact ","(send\n  (lvar :Array  wrap compact ) :map) flatten compact ","(lvar :records) flatten compact uniq  sum ","Array  wrap compact uniq  sum ","Array  wrap compact  sum ","(send\n  (lvar :records) :map) flatten  uniq ","(send\n  (lvar :records) :map) flatten compact  uniq ","parents uniq  uniq "," reflections []  macro == "," reflections []  macro "]}," ActiveRecord AssociationPreload included":{"type":"method","name":"included","children":[],"call":[]}," ActiveRecord TestCase assert_sql":{"type":"method","name":"assert_sql","children":[],"call":[" assert ","failed_patterns map join ","failed_patterns map ","failed_patterns empty? ","failed_patterns << ","pattern === ","$queries_executed any? ","patterns_to_match each ","$queries_executed join ","$queries_executed size == ","$queries_executed size ","(send\n  (lvar :failed_patterns) :map) join ","p inspect ","ActiveRecord SQLCounter  log join ","ActiveRecord SQLCounter  log ","ActiveRecord SQLCounter  log size == ","ActiveRecord SQLCounter  log size ","ActiveRecord SQLCounter  log any? ","ActiveRecord SQLCounter  log= ","SQLCounter  log join ","SQLCounter  log ","SQLCounter  log size == ","SQLCounter  log size ","SQLCounter  log_all any? ","SQLCounter  log_all ","SQLCounter  clear_log "]}," ActiveRecord NamedScope Scope respond_to?":{"type":"method","name":"respond_to?","children":[],"call":["@proxy_scope respond_to? "]}," ActiveRecord Migrator get_all_versions":{"type":"method","name":"get_all_versions","children":[],"call":["Base  connection select_values map sort ","Base  connection select_values map ","Base  connection select_values "," schema_migrations_table_name ","Base  connection ","(send\n  (send\n    (send\n      (const nil :Base) :connection) :select_values\n    (send\n      (send\n        (lvar :table) :project\n        (send\n          (lvar :table) :[]\n          (str \"version\"))) :to_sql)) :map) sort ","v to_i ","table project to_sql ","table project ","table [] ","Arel Table  new ","(send\n  (send\n    (send\n      (const nil :Base) :connection) :select_values\n    (send\n      (lvar :table) :project\n      (send\n        (lvar :table) :[]\n        (str \"version\")))) :map) sort ","(send\n  (send\n    (const nil :SchemaMigration) :all) :map) sort ","x version to_i ","x version ","SchemaMigration  all map ","SchemaMigration  all ","connection table_exists? ","ActiveSupport Deprecation  silence ","SchemaMigration  all_versions map ","SchemaMigration  all_versions ","SchemaMigration  table_exists? "," schema_migrations_Arel Table  new _name ","(send\n  (send\n    (send\n      (const nil :Base) :connection) :select_values\n    (send\n      (send\n        (lvar :Arel Table  new ) :project\n        (send\n          (lvar :Arel Table  new ) :[]\n          (str \"version\"))) :to_sql)) :map) sort ","Arel Table  new  project to_sql ","Arel Table  new  project ","Arel Table  new  [] ","(send\n  (send\n    (send\n      (const nil :Base) :connection) :select_values\n    (send\n      (lvar :Arel Table  new ) :project\n      (send\n        (lvar :Arel Table  new ) :[]\n        (str \"version\")))) :map) sort ","connection Arel Table  new _exists? ","SchemaMigration  Arel Table  new _exists? "]}," ActiveRecord ConnectionAdapters SQLiteAdapter change_column_null":{"type":"method","name":"change_column_null","children":[],"call":["definition [] null= ","definition [] "," alter_table "," execute "," quote_column_name "," quote "," quote_table_name ","default nil? "," exec_query "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter supports_insert_with_returning?":{"type":"method","name":"supports_insert_with_returning?","children":[],"call":[" postgresql_version >= "," postgresql_version "]}," ActiveRecord ConnectionAdapters PostgreSQLColumn extract_limit":{"type":"method","name":"extract_limit","children":[],"call":[]}," ActiveRecord ConnectionAdapters MysqlAdapter column_for":{"type":"method","name":"column_for","children":[],"call":[" raise ","c name == ","column_name to_s ","c name "," columns find "," columns "]}," ActiveRecord ConnectionAdapters MysqlAdapter change_column_null":{"type":"method","name":"change_column_null","children":[],"call":[" change_column ","column sql_type "," execute "," quote_column_name "," quote "," quote_table_name ","default nil? "," column_for "," change_ column_for  "," column_for  sql_type "," quote_ column_for _name ","  column_for _for "]}," ActiveRecord Associations ClassMethods add_multiple_associated_validation_callbacks":{"type":"method","name":"add_multiple_associated_validation_callbacks","children":[],"call":[" validate "," errors add "," errors ","record valid? ","(send nil :new_record?) each ","record new_record? ","association target select ","association target ","association select ","association loaded? "," new_record? ","association respond_to? "," instance_variable_get "," instance_variable_defined? "," define_method ","(str \"validate_associated_records_for_\") to_sym "," instance_variable_get  target select "," instance_variable_get  target "," instance_variable_get  select "," instance_variable_get  loaded? "," instance_variable_get  respond_to? "]}," ActiveRecord Associations ClassMethods add_single_associated_validation_callbacks":{"type":"method","name":"add_single_associated_validation_callbacks","children":[],"call":[" validate "," errors add "," errors ","association valid? ","association target nil? ","association target ","association nil? ! ","association nil? "," instance_variable_get "," define_method ","(str \"validate_associated_records_for_\") to_sym "," instance_variable_get  valid? "," instance_variable_get  target nil? "," instance_variable_get  target "," instance_variable_get  nil? ! "," instance_variable_get  nil? "]}," ActiveRecord Associations HasOneThroughAssociation reset_target!":{"type":"method","name":"reset_target!","children":[],"call":[]}," ActiveRecord Reflection MacroReflection sanitized_conditions":{"type":"method","name":"sanitized_conditions","children":[],"call":[" klass send "," options [] "," options "," klass "]}," ActiveRecord Calculations ClassMethods type_cast_using_column":{"type":"method","name":"type_cast_using_column","children":[],"call":["column type_cast "]}," ActiveRecord AssociationPreload ClassMethods in_or_equals_for_ids":{"type":"method","name":"in_or_equals_for_ids","children":[],"call":["ids size > ","ids size "]}," ActiveRecord Errors generate_message":{"type":"method","name":"generate_message","children":[],"call":["I18n  translate ","(pair\n  (sym :default)\n  (lvar :defaults)) merge ","@base class human_attribute_name ","attribute to_s ","@base class ","@base class human_name ","@base send ","@base respond_to? ","defaults shift ","defaults compact flatten << ","defaults compact flatten ","defaults compact ","defaults << ","options delete ","klass name underscore ","klass name ","@base class self_and_descendents_from_active_record map ","@base class self_and_descendents_from_active_record ","options [] ","options []= ","options [] is_a? ","Error  new to_s ","Error  new ","ActiveSupport Deprecation  warn ","@base class self_and_descendants_from_active_record map ","@base class self_and_descendants_from_active_record ","(pair\n  (sym :default)\n  (lvar :defaults compact flatten << )) merge ","defaults compact flatten <<  shift ","defaults compact flatten <<  compact flatten << ","defaults compact flatten <<  compact flatten ","defaults compact flatten <<  compact ","defaults compact flatten <<  << ","(pair\n  (sym :default)\n  (lvar :defaults)) merge  delete ","(pair\n  (sym :default)\n  (lvar :defaults)) merge  [] ","(pair\n  (sym :default)\n  (lvar :defaults)) merge  []= ","(pair\n  (sym :default)\n  (lvar :defaults)) merge  [] is_a? "]}," ActiveRecord Errors default_error_messages":{"type":"method","name":"default_error_messages","children":[],"call":["I18n  translate ","ActiveSupport Deprecation  warn "]}," ActiveRecord Transactions with_transaction_returning_status":{"type":"method","name":"with_transaction_returning_status","children":[],"call":[" raise "," send "," transaction "," class transaction "," class "," add_to_transaction ","@_start_transaction_state []= ","(or\n  (send\n    (ivar :@_start_transaction_state) :[]\n    (sym :level))\n  (int 0)) - ","@_start_transaction_state [] "," clear_transaction_record_state ","@transaction_state committed? "," remember_transaction_record_state "," class connection transaction_state "," class connection "," sync_with_transaction_state "," has_transactional_callbacks? "," _trigger_destroy_callback "," _trigger_update_callback "," new_record? ! "," new_record? ","connection transaction ","connection transaction_open? ! ","connection transaction_open? "," class connection transaction_state  committed? "," class  class connection  transaction_state "," class  class connection  "," class connection  transaction "," class connection  transaction_open? ! "," class connection  transaction_open? "]}," ActiveRecord TestCase connection_allow_concurrency_teardown":{"type":"method","name":"connection_allow_concurrency_teardown","children":[],"call":["ActiveRecord Base  establish_connection ","ActiveRecord Base  clear_all_connections! "]}," ActiveRecord TestCase connection_allow_concurrency_setup":{"type":"method","name":"connection_allow_concurrency_setup","children":[],"call":["ActiveRecord Base  establish_connection ","@connection merge ","ActiveRecord Base  remove_connection ","ActiveRecord Base  remove_connection  merge "]}," ActiveRecord TestCase use_concurrent_connections":{"type":"method","name":"use_concurrent_connections","children":[],"call":[]}," ActiveRecord Reflection ThroughReflection derive_class_name":{"type":"method","name":"derive_class_name","children":[],"call":[" source_reflection class_name "," source_reflection "," options [] "," options "]}," ActiveRecord Reflection ThroughReflection through_reflection_primary_key_name":{"type":"method","name":"through_reflection_primary_key_name","children":[],"call":[" through_reflection primary_key_name "," through_reflection "," through_reflection belongs_to? "]}," ActiveRecord Reflection ThroughReflection through_reflection_primary_key":{"type":"method","name":"through_reflection_primary_key","children":[],"call":[" through_reflection primary_key_name "," through_reflection "," through_reflection klass primary_key "," through_reflection klass "," through_reflection belongs_to? "]}," ActiveRecord Reflection ThroughReflection check_validity!":{"type":"method","name":"check_validity!","children":[],"call":[" raise ","HasManyThroughSourceAssociationMacroError  new "," source_reflection options [] nil? "," source_reflection options [] "," source_reflection options "," source_reflection ","(sym :belongs_to) include? "," source_reflection macro ","HasManyThroughAssociationPolymorphicError  new "," active_record name "," active_record "," options [] nil? "," options [] "," options ","HasManyThroughAssociationPointlessSourceTypeError  new ","HasManyThroughSourceAssociationNotFoundError  new "," source_reflection nil? ","HasManyThroughAssociationNotFoundError  new "," through_reflection nil? "," through_reflection "," check_validity_of_inverse! ","HasOneThroughCantAssociateThroughCollection  new "," through_reflection collection? "," macro == "," macro ","HasManyThroughAssociationPolymorphicSourceError  new ","HasManyThroughAssociationPolymorphicThroughError  new "," through_reflection options [] "," through_reflection options "," has_one? "," source_reflection polymorphic? "," source_reflection polymorphic? ! ","HasOneAssociationPolymorphicThroughError  new "," through_reflection polymorphic? ","HasManyThroughOrderError  new ","reflections index > ","reflections index "," name "," through_reflection name "," active_record reflections keys map "," active_record reflections keys "," active_record reflections "," parent_reflection nil? "," parent_reflection "," active_record reflections keys map  index > "," active_record reflections keys map  index "," active_record  active_record reflections keys map  keys map "," active_record  active_record reflections keys map  keys "," active_record  active_record reflections keys map  "]}," ActiveRecord Reflection ThroughReflection source_reflection_names":{"type":"method","name":"source_reflection_names","children":[],"call":["n to_sym ","(if\n  (send\n    (send nil :options) :[]\n    (sym :source))\n  (array\n    (send\n      (send nil :options) :[]\n      (sym :source)))\n  (array\n    (send\n      (send\n        (send nil :name) :to_s) :singularize)\n    (send nil :name))) collect "," name "," name to_s singularize "," name to_s "," options [] "," options ","(send\n  (begin\n    (if\n      (send\n        (send nil :options) :[]\n        (sym :source))\n      (array\n        (send\n          (send nil :options) :[]\n          (sym :source)))\n      (array\n        (send\n          (send\n            (send nil :name) :to_s) :singularize)\n        (send nil :name)))) :collect) uniq ","(send\n  (send\n    (send nil :name) :to_s) :singularize) uniq "]}," ActiveRecord Reflection ThroughReflection through_reflection":{"type":"method","name":"through_reflection","children":[],"call":[" active_record reflect_on_association "," options [] "," options "," active_record "," active_record _reflect_on_association "]}," ActiveRecord Reflection ThroughReflection source_reflection":{"type":"method","name":"source_reflection","children":[],"call":["(send\n  (send nil :source_reflection_names) :collect) compact first ","(send\n  (send nil :source_reflection_names) :collect) compact "," through_reflection klass reflect_on_association "," through_reflection klass "," through_reflection "," source_reflection_names collect "," source_reflection_names "," source_reflection_name "," through_reflection klass _reflect_on_association "]}," ActiveRecord Reflection AssociationReflection through_reflection_primary_key_name":{"type":"method","name":"through_reflection_primary_key_name","children":[],"call":[]}," ActiveRecord Reflection AssociationReflection create_association!":{"type":"method","name":"create_association!","children":[],"call":[" klass create! "," klass "]}," ActiveRecord Reflection AssociationReflection create_association":{"type":"method","name":"create_association","children":[],"call":[" klass create "," klass "]}," ActiveRecord Reflection AssociationReflection build_association":{"type":"method","name":"build_association","children":[],"call":[" klass new "," klass "]}," ActiveRecord Reflection MacroReflection belongs_to?":{"type":"method","name":"belongs_to?","children":[],"call":[" macro == "," macro "]}," ActiveRecord NamedScope Scope any?":{"type":"method","name":"any?","children":[],"call":[" empty? ! "," empty? "," proxy_found any? "," proxy_found "," block_given? "]}," ActiveRecord NamedScope Scope size":{"type":"method","name":"size","children":[],"call":[" count ","@found length "]}," ActiveRecord Migrator ddl_transaction":{"type":"method","name":"ddl_transaction","children":[],"call":["block call ","Base  transaction ","Base  connection supports_ddl_transactions? ","Base  connection "," use_transaction? "," connection transaction "," connection "]}," ActiveRecord MigrationProxy load_migration":{"type":"method","name":"load_migration","children":[],"call":[" name constantize "," name "," load "," filename "," require ","File  expand_path "," name constantize new "," version "]}," ActiveRecord MigrationProxy migration":{"type":"method","name":"migration","children":[],"call":[" load_migration "]}," I18n Backend Simple interpolate_with_deprecated_syntax":{"type":"method","name":"interpolate_with_deprecated_syntax","children":[],"call":[" interpolate_without_deprecated_syntax ","ActiveSupport Deprecation  warn ","DEPRECATED_INTERPOLATORS  [] ","string gsub ","string is_a? ","values empty? ! ","values empty? "]}," ActiveRecord DynamicFinderMatch bang?":{"type":"method","name":"bang?","children":[],"call":[]}," ActiveRecord DynamicFinderMatch instantiator?":{"type":"method","name":"instantiator?","children":[],"call":["@instantiator nil? ! ","@instantiator nil? ","@finder == "]}," ActiveRecord DynamicFinderMatch finder?":{"type":"method","name":"finder?","children":[],"call":["@instantiator nil? ","@finder nil? ! ","@finder nil? ","@instantiator ! "]}," ActiveRecord DynamicFinderMatch initialize":{"type":"method","name":"initialize","children":[],"call":["names split ","1 == ","method to_s "]}," ActiveRecord DynamicFinderMatch match":{"type":"method","name":"match","children":[],"call":[]}," ActiveRecord Dirty ClassMethods alias_attribute_with_dirty":{"type":"method","name":"alias_attribute_with_dirty","children":[],"call":[" module_eval ","176 + ","DIRTY_SUFFIXES  each "," alias_attribute_without_dirty "]}," ActiveRecord Dirty ClassMethods extended":{"type":"method","name":"extended","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter encoding":{"type":"method","name":"encoding","children":[],"call":[" query [] [] "," query [] "," query "," current_database "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter current_database":{"type":"method","name":"current_database","children":[],"call":[" query [] [] "," query [] "," query "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter transaction":{"type":"method","name":"transaction","children":[],"call":[" raise "," rollback_db_transaction "," commit_db_transaction "," transaction_active? ","database_transaction_rollback is_a? "," begin_db_transaction "," block_given? "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter transaction_active?":{"type":"method","name":"transaction_active?","children":[],"call":["@connection transaction_status != ","@connection transaction_status "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter supports_ddl_transactions?":{"type":"method","name":"supports_ddl_transactions?","children":[],"call":[]}," ActiveRecord ConnectionAdapters MysqlAdapter configure_connection":{"type":"method","name":"configure_connection","children":[],"call":[" execute ","@config [] "]}," ActiveRecord ConnectionAdapters MysqlAdapter limited_update_conditions":{"type":"method","name":"limited_update_conditions","children":[],"call":[]}," ActiveRecord ConnectionAdapters MysqlAdapter case_sensitive_equality_operator":{"type":"method","name":"case_sensitive_equality_operator","children":[],"call":[]}," ActiveRecord ConnectionAdapters MysqlAdapter reset!":{"type":"method","name":"reset!","children":[],"call":[" configure_connection ","@connection change_user ","@config [] ","@connection respond_to? "]}," ActiveRecord ConnectionAdapters MysqlColumn has_default?":{"type":"method","name":"has_default?","children":[],"call":[" type == "," type "," sql_type =~ "," sql_type "]}," ActiveRecord ConnectionAdapters AbstractAdapter decrement_open_transactions":{"type":"method","name":"decrement_open_transactions","children":[],"call":["ActiveSupport Deprecation  warn "]}," ActiveRecord ConnectionAdapters AbstractAdapter increment_open_transactions":{"type":"method","name":"increment_open_transactions","children":[],"call":["ActiveSupport Deprecation  warn "]}," ActiveRecord ConnectionAdapters AbstractAdapter open_transactions":{"type":"method","name":"open_transactions","children":[],"call":["@transaction number "]}," ActiveRecord ConnectionAdapters AbstractAdapter reset!":{"type":"method","name":"reset!","children":[],"call":[" configure_connection "," reset_transaction "," clear_cache! "]}," ActiveRecord ConnectionAdapters AbstractAdapter supports_ddl_transactions?":{"type":"method","name":"supports_ddl_transactions?","children":[],"call":[]}," ActiveRecord ConnectionAdapters Column has_default?":{"type":"method","name":"has_default?","children":[],"call":[" default nil? ! "," default nil? "," default "," default_function "]}," ActiveRecord ConnectionAdapters DatabaseStatements limited_update_conditions":{"type":"method","name":"limited_update_conditions","children":[],"call":[]}," ActiveRecord ConnectionAdapters DatabaseStatements case_sensitive_equality_operator":{"type":"method","name":"case_sensitive_equality_operator","children":[],"call":[]}," ActiveRecord Base connection_pool":{"type":"method","name":"connection_pool","children":[],"call":[" connection_handler retrieve_connection_pool "," connection_handler "," raise "]}," ActiveRecord Base verification_timeout=":{"type":"method","name":"verification_timeout=","children":[],"call":["ActiveSupport Deprecation  warn "]}," ActiveRecord Base verification_timeout":{"type":"method","name":"verification_timeout","children":[],"call":["ActiveSupport Deprecation  warn "]}," ActiveRecord Base allow_concurrency":{"type":"method","name":"allow_concurrency","children":[],"call":["ActiveSupport Deprecation  warn "]}," ActiveRecord ConnectionAdapters ConnectionHandler retrieve_connection_pool":{"type":"method","name":"retrieve_connection_pool","children":[],"call":[" retrieve_connection_pool ","klass superclass ","ActiveRecord Base  == ","@connection_pools [] ","klass name ","@class_to_pool [] "," class_to_pool []= "," class_to_pool ","klass <= "," pool_for "," class_to_pool [] "," owner_to_pool []= "," owner_to_pool ","pool schema_cache= ","ancestor_pool schema_cache "," establish_connection tap "," establish_connection ","ancestor_pool spec "," pool_from_any_process_for "," owner_to_pool fetch ","ancestor_pool spec to_hash "," get_pool_manager "," retrieve_connection_@connection_pools []  "," retrieve_connection_@class_to_pool []  "," retrieve_connection_ pool_for  ","klass superclass  superclass ","@connection_@connection_pools [] s [] ","@connection_@class_to_pool [] s [] ","@connection_ pool_for s [] ","klass superclass  name ","@class_to_@connection_pools []  [] ","@class_to_@class_to_pool []  [] ","@class_to_ pool_for  [] "," class_to_@connection_pools []  []= "," class_to_@class_to_pool []  []= "," class_to_ pool_for  []= "," class_to_@connection_pools []  "," class_to_@class_to_pool []  "," class_to_ pool_for  ","klass superclass  <= "," @connection_pools [] _for "," @class_to_pool [] _for ","  pool_for _for "," class_to_@connection_pools []  [] "," class_to_@class_to_pool []  [] "," class_to_ pool_for  [] "," owner_to_@connection_pools []  []= "," owner_to_@class_to_pool []  []= "," owner_to_ pool_for  []= "," owner_to_@connection_pools []  "," owner_to_@class_to_pool []  "," owner_to_ pool_for  ","@connection_pools []  schema_cache= ","@class_to_pool []  schema_cache= "," pool_for  schema_cache= ","ancestor_@connection_pools []  schema_cache ","ancestor_@class_to_pool []  schema_cache ","ancestor_ pool_for  schema_cache "," pool_from_any_process_for  schema_cache ","ancestor_@connection_pools []  spec ","ancestor_@class_to_pool []  spec ","ancestor_ pool_for  spec "," pool_from_any_process_for  spec "," @connection_pools [] _from_any_process_for "," @class_to_pool [] _from_any_process_for ","  pool_for _from_any_process_for "," owner_to_@connection_pools []  fetch "," owner_to_@class_to_pool []  fetch "," owner_to_ pool_for  fetch ","ancestor_@connection_pools []  spec to_hash ","ancestor_@class_to_pool []  spec to_hash ","ancestor_ pool_for  spec to_hash "," pool_from_any_process_for  spec to_hash "," get_@connection_pools [] _manager "," get_@class_to_pool [] _manager "," get_ pool_for _manager "]}," ActiveRecord ConnectionAdapters ConnectionHandler remove_connection":{"type":"method","name":"remove_connection","children":[],"call":["pool spec config ","pool spec ","pool disconnect! ","value == ","@connection_pools delete_if ","@connection_pools [] ","klass name ","pool automatic_reconnect= ","@connection_pools delete ","@class_to_pool delete ","@class_to_pool clear "," owner_to_pool delete ","owner name "," owner_to_pool "," remove_connection_pool ","@connection_pools []  spec config ","@connection_pools delete  spec config ","@class_to_pool delete  spec config "," owner_to_pool delete  spec config ","@connection_pools []  spec ","@connection_pools delete  spec ","@class_to_pool delete  spec "," owner_to_pool delete  spec ","@connection_pools []  disconnect! ","@connection_pools delete  disconnect! ","@class_to_pool delete  disconnect! "," owner_to_pool delete  disconnect! ","@connection_@connection_pools [] s delete_if ","@connection_@connection_pools delete s delete_if ","@connection_@class_to_pool delete s delete_if ","@connection_ owner_to_pool delete s delete_if ","@connection_@connection_pools [] s [] ","@connection_@connection_pools delete s [] ","@connection_@class_to_pool delete s [] ","@connection_ owner_to_pool delete s [] ","@connection_pools []  automatic_reconnect= ","@connection_pools delete  automatic_reconnect= ","@class_to_pool delete  automatic_reconnect= "," owner_to_pool delete  automatic_reconnect= ","@connection_@connection_pools [] s delete ","@connection_@connection_pools delete s delete ","@connection_@class_to_pool delete s delete ","@connection_ owner_to_pool delete s delete ","@class_to_@connection_pools []  delete ","@class_to_@connection_pools delete  delete ","@class_to_@class_to_pool delete  delete ","@class_to_ owner_to_pool delete  delete ","@class_to_@connection_pools []  clear ","@class_to_@connection_pools delete  clear ","@class_to_@class_to_pool delete  clear ","@class_to_ owner_to_pool delete  clear "," owner_to_@connection_pools []  delete "," owner_to_@connection_pools delete  delete "," owner_to_@class_to_pool delete  delete "," owner_to_ owner_to_pool delete  delete "," owner_to_@connection_pools []  "," owner_to_@connection_pools delete  "," owner_to_@class_to_pool delete  "," owner_to_ owner_to_pool delete  "," remove_connection_@connection_pools []  "," remove_connection_@connection_pools delete  "," remove_connection_@class_to_pool delete  "," remove_connection_ owner_to_pool delete  "]}," ActiveRecord ConnectionAdapters ConnectionHandler connected?":{"type":"method","name":"connected?","children":[],"call":["conn connected? "," retrieve_connection_pool ","pool connected? "," retrieve_connection_pool   retrieve_connection_pool ected? "," retrieve_ retrieve_connection_pool ection_pool "," retrieve_connection_ retrieve_connection_pool  ","pool  retrieve_connection_pool ected? "," retrieve_connection_pool  connected? "]}," ActiveRecord ConnectionAdapters ConnectionHandler retrieve_connection":{"type":"method","name":"retrieve_connection","children":[],"call":[" raise ","pool connection "," retrieve_connection_pool ","ActiveRecord Base  current_role ","ActiveRecord Base  connection_handler != ","ActiveRecord Base  default_connection_handler ","ActiveRecord Base  connection_handler ","role != ","ActiveRecord Base  default_role ","shard != ","ActiveRecord Base  default_shard "," retrieve_connection_pool  connection ","pool pool connection ection "," retrieve_connection_ retrieve_connection_pool  "," retrieve_pool connection ection_pool ","ActiveRecord Base  pool connection ection_handler != ","ActiveRecord Base  default_pool connection ection_handler ","ActiveRecord Base  pool connection ection_handler "]}," ActiveRecord ConnectionAdapters ConnectionHandler verify_active_connections!":{"type":"method","name":"verify_active_connections!","children":[],"call":["pool verify_active_connections! ","@connection_pools each_value "]}," ActiveRecord ConnectionAdapters ConnectionHandler clear_all_connections!":{"type":"method","name":"clear_all_connections!","children":[],"call":["pool disconnect! ","@connection_pools each_value "," connection_pool_list each "," connection_pool_list "," each_connection_pool each "," each_connection_pool ","ActiveRecord Base  current_role "," deprecation_for_pool_handling "," __method__ ","role nil? ","ActiveRecord Base  current_ActiveRecord Base  current_role  ","ActiveRecord Base  current_role  nil? "]}," ActiveRecord ConnectionAdapters ConnectionHandler clear_reloadable_connections!":{"type":"method","name":"clear_reloadable_connections!","children":[],"call":["pool clear_reloadable_connections! ","@connection_pools each_value "," connection_pool_list each "," connection_pool_list "," each_connection_pool each "," each_connection_pool ","ActiveRecord Base  current_role "," deprecation_for_pool_handling "," __method__ ","role nil? ","ActiveRecord Base  current_ActiveRecord Base  current_role  ","ActiveRecord Base  current_role  nil? "]}," ActiveRecord ConnectionAdapters ConnectionHandler clear_active_connections!":{"type":"method","name":"clear_active_connections!","children":[],"call":["pool release_connection ","@connection_pools each_value "," connection_pool_list each "," connection_pool_list "," each_connection_pool each "," each_connection_pool ","ActiveRecord Base  current_role "," deprecation_for_pool_handling "," __method__ ","role nil? ","ActiveRecord Base  current_ActiveRecord Base  current_role  ","ActiveRecord Base  current_role  nil? "]}," ActiveRecord ConnectionAdapters ConnectionHandler establish_connection":{"type":"method","name":"establish_connection","children":[],"call":["@connection_pools []= ","ConnectionAdapters ConnectionPool  new ","@class_to_pool []= ","@connection_pools [] "," owner_to_pool []= ","owner name "," owner_to_pool "," raise ","@class_to_pool clear ","spec name "," owner_to_pool [] ","message_bus instrument ","payload []= ","spec config "," object_id ","ActiveSupport Notifications  instrumenter "," remove_connection ","resolver spec ","ConnectionSpecification Resolver  new ","Base  configurations ","pool_config pool ","pool_manager set_pool_config "," get_pool_manager ","pool_config connection_specification_name ","PoolManager  new "," owner_to_pool_manager [] "," owner_to_pool_manager ","LegacyPoolManager  new ","ActiveRecord Base  legacy_connection_handling ","db_config configuration_hash "," remove_connection_pool "," owner_to_pool_manager key? ","pool_config db_config "," resolve_pool_config ","config to_s ","config is_a? ","ActiveRecord  legacy_connection_handling ","StringConnectionOwner  new ","ActiveSupport Notifications  instrumenter instrument ","pool_config connection_name "," disconnect_pool_from_pool_manager ","existing_pool_config pool ","existing_pool_config connection_class= ","existing_pool_config connection_class != ","existing_pool_config connection_class ","owner_name primary_class? ","existing_pool_config db_config == ","existing_pool_config db_config ","clobber ! ","pool_manager get_pool_config "," set_pool_manager "," determine_owner_name ","resolver spec  name ","ActiveSupport Notifications  instrumenter  instrument ","resolver spec  config ","resolver resolver spec  ","ConnectionSpecification Resolver  new  spec "," resolve_pool_config  pool "," get_pool_manager  set_pool_config "," set_pool_manager  set_pool_config ","pool_manager set_ resolve_pool_config  "," get_ get_pool_manager  "," get_ set_pool_manager  ","pool_config connection_resolver spec ification_name "," resolve_pool_config  connection_specification_name "," owner_to_ get_pool_manager  [] "," owner_to_ set_pool_manager  [] "," owner_to_ get_pool_manager  "," owner_to_ set_pool_manager  ","pool_config db_config  configuration_hash "," owner_to_ get_pool_manager  key? "," owner_to_ set_pool_manager  key? ","pool_config pool_config db_config  "," resolve_pool_config  db_config "," resolve_ resolve_pool_config  "," resolve_pool_config  connection_name "," disconnect_pool_from_ get_pool_manager  "," disconnect_pool_from_ set_pool_manager  ","existing_ resolve_pool_config  pool ","pool_manager get_pool_config  pool ","existing_ resolve_pool_config  connection_class= ","pool_manager get_pool_config  connection_class= ","existing_ resolve_pool_config  connection_class != ","pool_manager get_pool_config  connection_class != ","existing_ resolve_pool_config  connection_class ","pool_manager get_pool_config  connection_class ","config to_s  primary_class? ","StringConnectionOwner  new  primary_class? "," determine_owner_name  primary_class? ","existing_pool_config pool_config db_config  == ","existing_ resolve_pool_config  db_config == ","pool_manager get_pool_config  db_config == ","existing_pool_config pool_config db_config  ","existing_ resolve_pool_config  db_config ","pool_manager get_pool_config  db_config "," get_pool_manager  get_pool_config "," set_pool_manager  get_pool_config ","pool_manager get_ resolve_pool_config  "," set_ get_pool_manager  "," set_ set_pool_manager  "," determine_config to_s  "," determine_StringConnectionOwner  new  "," determine_ determine_owner_name  "]}," ActiveRecord ConnectionAdapters ConnectionHandler connection_pools":{"type":"method","name":"connection_pools","children":[],"call":["Hash  [] ","pool spec "," connection_pool_list map "," connection_pool_list ","ActiveSupport Deprecation  warn ","(str \"          In the next release, this will return the same as `#connection_pool_list`.\\n\") squish "]}," ActiveRecord ConnectionAdapters ConnectionHandler initialize":{"type":"method","name":"initialize","children":[],"call":["h []= ","ThreadSafe Cache  new ","Concurrent Map  new ","ObjectSpace  define_finalizer ","ConnectionHandler  unowned_pool_finalizer ","ConnectionHandler  discard_unowned_pools ","ConnectionHandler  create_owner_to_pool "]}," ActiveRecord ConnectionAdapters ConnectionPool checkout_and_verify":{"type":"method","name":"checkout_and_verify","children":[],"call":["@checked_out << ","c run_callbacks ","c verify! ","c _run_checkout_callbacks "," raise ","c disconnect! "," remove ","c clean! "]}," ActiveRecord ConnectionAdapters ConnectionPool checkout_existing_connection":{"type":"method","name":"checkout_existing_connection","children":[],"call":[" checkout_and_verify ","(send\n  (ivar :@connections) :-\n  (ivar :@checked_out)) first ","@connections - "," (send\n  (ivar :@connections) :-\n  (ivar :@checked_out)) first he(send\n  (ivar :@connections) :-\n  (ivar :@checked_out)) first kout_and_verify ","(send\n  (ivar :@(send\n  (ivar :@connections) :-\n  (ivar :@checked_out)) first onne(send\n  (ivar :@connections) :-\n  (ivar :@checked_out)) first tions) :-\n  (ivar :@(send\n  (ivar :@connections) :-\n  (ivar :@checked_out)) first he(send\n  (ivar :@connections) :-\n  (ivar :@checked_out)) first ked_out)) first ","@(send\n  (ivar :@connections) :-\n  (ivar :@checked_out)) first onne(send\n  (ivar :@connections) :-\n  (ivar :@checked_out)) first tions - "]}," ActiveRecord ConnectionAdapters ConnectionPool checkout_new_connection":{"type":"method","name":"checkout_new_connection","children":[],"call":[" checkout_and_verify ","@connections << "," new_connection "," raise ","c pool= ","  new_connection he new_connection kout_and_verify ","@ new_connection onne new_connection tions << "," new_ new_connection onne new_connection tion "," new_connection  pool= "]}," ActiveRecord ConnectionAdapters ConnectionPool remove_stale_cached_threads!":{"type":"method","name":"remove_stale_cached_threads!","children":[],"call":["cache delete ","block call ","cache [] ","cache has_key? ","keys each ","keys delete ","thread object_id ","thread alive? ","Thread  list each ","Thread  list ","Set  new ","cache keys ","Set  new  each ","Set  new  delete ","cache Set  new  "]}," ActiveRecord ConnectionAdapters ConnectionPool current_connection_id":{"type":"method","name":"current_connection_id","children":[],"call":["Thread  current object_id ","Thread  current ","ActiveRecord Base  connection_id ","Base  connection_id "]}," ActiveRecord ConnectionAdapters ConnectionPool new_connection":{"type":"method","name":"new_connection","children":[],"call":["ActiveRecord Base  send "," spec config "," spec "," spec adapter_method ","connection visitor= ","connection class visitor_for ","connection class ","Base  send ","conn schema_cache= "," schema_cache dup "," schema_cache ","Base  send tap ","conn check_version ","Base  public_send tap ","Base  public_send "," db_config configuration_hash "," db_config "," db_config adapter_method "," raise ","ex set_pool ","connection check_version ","connection pool= ","ActiveRecord Base  send  visitor= ","Base  public_send  visitor= ","ActiveRecord Base  send  class visitor_for ","Base  public_send  class visitor_for ","ActiveRecord Base  send  class ","Base  public_send  class ","ActiveRecord Base  send  check_version ","Base  public_send  check_version ","ActiveRecord Base  send  pool= ","Base  public_send  pool= "]}," ActiveRecord ConnectionAdapters ConnectionPool checkin":{"type":"method","name":"checkin","children":[],"call":["@queue signal ","@checked_out delete ","conn run_callbacks ","@connection_mutex synchronize ","conn send ","conn expire "," synchronize "," release ","@available add ","conn _run_checkin_callbacks ","conn owner "," remove_connection_from_thread_cache ","conn lock synchronize ","conn lock ","conn lock_thread= ","conn conn owner  "]}," ActiveRecord ConnectionAdapters ConnectionPool checkout":{"type":"method","name":"checkout","children":[],"call":[" raise ","@size == ","@checked_out size "," clear_stale_cached_connections! ","@queue wait "," checkout_new_connection ","@connections size < ","@connections size "," checkout_existing_connection ","@checked_out size < "," loop ","@connection_mutex synchronize "," active_connections size "," active_connections "," active_connections size < "," checkout_and_verify ","conn lease ","c lease ","@connections find "," synchronize "," active_connections size >= ","Time  now - ","Time  now ","(send\n  (ivar :@timeout) :-\n  (lvar :waited_time)) max ","@timeout - ","waited_time >= "," acquire_connection ","connection lock_thread= "," clear_stale_cached_ checkout_existing_connection ections! "," clear_stale_cached_ checkout_new_connection ections! "," clear_stale_cached_ acquire_connection ections! "," clear_stale_cached_ checkout_and_verify s! "," checkout_new_ checkout_existing_connection ection "," checkout_new_ checkout_new_connection ection "," checkout_new_ acquire_connection ection "," checkout_new_ checkout_and_verify  ","@ checkout_existing_connection ections size < ","@ checkout_new_connection ections size < ","@ acquire_connection ections size < ","@ checkout_and_verify s size < ","@ checkout_existing_connection ections size ","@ checkout_new_connection ections size ","@ acquire_connection ections size ","@ checkout_and_verify s size "," checkout_existing_ checkout_existing_connection ection "," checkout_existing_ checkout_new_connection ection "," checkout_existing_ acquire_connection ection "," checkout_existing_ checkout_and_verify  ","@ checkout_existing_connection ection_mutex synchronize ","@ checkout_new_connection ection_mutex synchronize ","@ acquire_connection ection_mutex synchronize ","@ checkout_and_verify _mutex synchronize "," active_ checkout_existing_connection ections size "," active_ checkout_new_connection ections size "," active_ acquire_connection ections size "," active_ checkout_and_verify s size "," active_ checkout_existing_connection ections "," active_ checkout_new_connection ections "," active_ acquire_connection ections "," active_ checkout_and_verify s "," active_ checkout_existing_connection ections size < "," active_ checkout_new_connection ections size < "," active_ acquire_connection ections size < "," active_ checkout_and_verify s size < "," checkout_existing_connection  lease "," checkout_new_connection  lease "," acquire_connection  lease ","@ checkout_existing_connection ections find ","@ checkout_new_connection ections find ","@ acquire_connection ections find ","@ checkout_and_verify s find "," active_ checkout_existing_connection ections size >= "," active_ checkout_new_connection ections size >= "," active_ acquire_connection ections size >= "," active_ checkout_and_verify s size >= "," acquire_ checkout_existing_connection ection "," acquire_ checkout_new_connection ection "," acquire_ acquire_connection ection "," acquire_ checkout_and_verify  "," checkout_existing_connection ection lock_thread= "," checkout_new_connection ection lock_thread= "," acquire_connection ection lock_thread= "," checkout_and_verify  lock_thread= "]}," ActiveRecord ConnectionAdapters ConnectionPool clear_stale_cached_connections!":{"type":"method","name":"clear_stale_cached_connections!","children":[],"call":[" checkin "," remove_stale_cached_threads! ","@reserved_connections delete ","@reserved_connections [] ","keys each ","@reserved_connections keys - ","thread object_id ","(send\n  (send\n    (const nil :Thread) :list) :find_all) map ","t alive? ","Thread  list find_all ","Thread  list ","@reserved_connections keys ","ActiveSupport Deprecation  warn ","conn in_use? "," reap ","@reserved_@reserved_connections [] ections delete ","@reserved_@reserved_connections [] ections [] ","@reserved_connections keys -  each ","@reserved_connections @reserved_connections keys -  - ","@reserved_@reserved_connections [] ections keys - ","@reserved_connections @reserved_connections keys -  ","@reserved_@reserved_connections [] ections keys ","@reserved_connections []  in_use? "]}," ActiveRecord ConnectionAdapters ConnectionPool verify_active_connections!":{"type":"method","name":"verify_active_connections!","children":[],"call":["connection verify! ","@connections each "," clear_stale_cached_connections! "," synchronize "]}," ActiveRecord ConnectionAdapters ConnectionPool clear_reloadable_connections!":{"type":"method","name":"clear_reloadable_connections!","children":[],"call":["conn disconnect! ","conn requires_reloading? ","@connections each "," checkin ","@reserved_connections each ","@connections delete_if "," synchronize ","@available add ","@available clear ","@reserved_connections clear "," clear_reloadable_connections "]}," ActiveRecord ConnectionAdapters ConnectionPool disconnect!":{"type":"method","name":"disconnect!","children":[],"call":["conn disconnect! ","@connections each "," checkin ","@reserved_connections each "," synchronize ","@available clear ","@reserved_connections clear "," disconnect "]}," ActiveRecord ConnectionAdapters ConnectionPool connected?":{"type":"method","name":"connected?","children":[],"call":["@connections empty? ! ","@connections empty? ","@connections any? "," synchronize "]}," ActiveRecord ConnectionAdapters ConnectionPool with_connection":{"type":"method","name":"with_connection","children":[],"call":[" checkin "," checkout "," release_connection "," connection ","@reserved_connections [] "," current_connection_id "," active_connection? ","@thread_cached_conns [] "," connection_cache_key ","Thread  current ","ActiveSupport IsolatedExecutionState  context "," release_ checkout ection "," release_ connection ection "," release_@thread_cached_conns [] ection ","  checkout ection ","  connection ection "," @thread_cached_conns [] ection ","@reserved_ checkout ections [] ","@reserved_ connection ections [] ","@reserved_@thread_cached_conns [] ections [] "," current_ checkout ection_id "," current_ connection ection_id "," current_@thread_cached_conns [] ection_id "," current_ current_connection_id  "," active_ checkout ection? "," active_ connection ection? "," active_@thread_cached_conns [] ection? ","@thread_cached_ checkout s [] ","@thread_cached_ connection s [] ","@thread_cached_@thread_cached_conns [] s [] ","  checkout ection_cache_key ","  connection ection_cache_key "," @thread_cached_conns [] ection_cache_key "]}," ActiveRecord ConnectionAdapters ConnectionPool release_connection":{"type":"method","name":"release_connection","children":[],"call":[" checkin ","@reserved_connections delete "," current_connection_id "," synchronize ","@thread_cached_conns delete "," connection_cache_key ","@reserved_@reserved_connections delete ections delete ","@reserved_@thread_cached_conns delete ections delete "," current_@reserved_connections delete ection_id "," current_@thread_cached_conns delete ection_id ","@thread_cached_@reserved_connections delete s delete ","@thread_cached_@thread_cached_conns delete s delete "," @reserved_connections delete ection_cache_key "," @thread_cached_conns delete ection_cache_key "]}," ActiveRecord ConnectionAdapters ConnectionPool connection":{"type":"method","name":"connection","children":[],"call":["@reserved_connections []= "," checkout "," current_connection_id ","@reserved_connections [] "," synchronize ","@thread_cached_conns [] "," connection_cache_key ","Thread  current "," current_thread ","@reserved_@reserved_connections [] ections []= "," current_@reserved_connections [] ection_id ","@reserved_@reserved_connections [] ections [] ","@thread_cached_@reserved_connections [] s [] "," @reserved_connections [] ection_cache_key "]}," ActiveRecord ConnectionAdapters ConnectionPool initialize":{"type":"method","name":"initialize","children":[],"call":["spec config [] to_i ","spec config [] ","spec config ","RUBY_VERSION  < ","@connection_mutex new_cond ","Monitor  new ","h []= ","conn primary_key "," table_exists? "," with_connection ","Hash  new ","Hash  [] ","col default ","col name "," columns [] map "," columns [] "," columns ","column primary= ","column name == "," primary_keys [] "," primary_keys ","column name ","columns each ","conn columns tap ","conn columns "," new_cond ","Queue  new ","ThreadSafe Cache  new ","@reaper run ","Reaper  new ","spec config [] to_f ","ConnectionLeasingQueue  new ","Concurrent Map  new ","reaping_frequency to_f ","spec config fetch ","@idle_timeout <= ","@idle_timeout to_f "," db_config reaping_frequency "," db_config "," db_config pool "," db_config idle_timeout "," db_config checkout_timeout ","pool_config connection_specification_name ","pool_config db_config ","pool_config connection_klass "," lazily_set_schema_cache "," build_async_executor ","pool_config shard ","pool_config role ","pool_config connection_class ","Monitor  new  new_cond ","Reaper  new  run ","spec config fetch  to_f ","@idle_timeout to_f  <= ","spec config fetch  <= "," db_config idle_timeout  <= ","@idle_timeout to_f  to_f "," db_config idle_timeout  to_f "," db_config spec config fetch  "]}," ActiveRecord Associations ClassMethods nullify_has_many_dependencies":{"type":"method","name":"nullify_has_many_dependencies","children":[],"call":["association_class update_all "]}," ActiveRecord Associations ClassMethods delete_all_has_many_dependencies":{"type":"method","name":"delete_all_has_many_dependencies","children":[],"call":["association_class delete_all "]}," ActiveRecord Associations HasOneAssociation owner_quoted_id":{"type":"method","name":"owner_quoted_id","children":[],"call":["@owner quoted_id ","@owner class quote_value ","@owner send ","@reflection options [] ","@reflection options ","@owner class "]}," ActiveRecord Associations HasManyThroughAssociation target_reflection_has_associated_record?":{"type":"method","name":"target_reflection_has_associated_record?","children":[],"call":["@owner [] blank? ","@owner [] ","@reflection through_reflection primary_key_name ","@reflection through_reflection ","@reflection through_reflection macro == ","@reflection through_reflection macro "," owner [] blank? "," owner [] "," through_reflection foreign_key "," through_reflection "," owner "," through_reflection macro == "," through_reflection macro ","(and\n  (send\n    (send\n      (send nil :through_reflection) :macro) :==\n    (sym :belongs_to))\n  (send\n    (send\n      (send nil :owner) :[]\n      (send\n        (send nil :through_reflection) :foreign_key)) :blank?)) ! ","(and\n  (send\n    (send nil :through_reflection) :belongs_to?)\n  (send\n    (send\n      (send nil :owner) :[]\n      (send\n        (send nil :through_reflection) :foreign_key)) :blank?)) ! "," through_reflection belongs_to? ","(and\n  (send\n    (send nil :through_reflection) :belongs_to?)\n  (block\n    (send\n      (send nil :Array\n        (send\n          (send nil :through_reflection) :foreign_key)) :all?)\n    (args\n      (arg :foreign_key_column))\n    (send\n      (send\n        (send nil :owner) :[]\n        (lvar :foreign_key_column)) :blank?))) ! "," Array all? "," Array "]}," ActiveRecord Associations HasManyAssociation owner_quoted_id":{"type":"method","name":"owner_quoted_id","children":[],"call":["@owner quoted_id "," quote_value ","@owner send ","@reflection options [] ","@reflection options "]}," ActiveRecord Associations AssociationProxy owner_quoted_id":{"type":"method","name":"owner_quoted_id","children":[],"call":["@owner quoted_id "]}," ActiveRecord Associations AssociationProxy send":{"type":"method","name":"send","children":[],"call":["@target send "," load_target "," proxy_respond_to? "]}," ActiveRecord Associations AssociationCollection proxy_respond_to?":{"type":"method","name":"proxy_respond_to?","children":[],"call":["@reflection klass respond_to? ","@reflection klass "]}," ActiveRecord Associations AssociationCollection count":{"type":"method","name":"count","children":[],"call":["(send\n  (array\n    (send\n      (lvar :value) :-\n      (send\n        (lvar :offset) :to_i))\n    (int 0)) :max) min ","limit to_i ","(send\n  (lvar :value) :-\n  (send\n    (lvar :offset) :to_i)) max ","value - ","offset to_i ","@reflection options [] ","@reflection options ","@reflection klass count ","@reflection klass ","@reflection klass send "," construct_scope ","options merge! ","@reflection klass primary_key ","@reflection quoted_table_name ","column_name == ","@reflection klass count_by_sql "," raise ","options blank? ! ","options blank? ","column_name is_a? ","(send\n  (array\n    (send\n      (lvar :value) :-\n      (send\n        (lvar :@reflection options [] ) :to_i))\n    (int 0)) :max) min ","@reflection options []  to_i ","(send\n  (lvar :value) :-\n  (send\n    (lvar :@reflection options [] ) :to_i)) max "]}," ActiveRecord Associations AssociationCollection transaction":{"type":"method","name":"transaction","children":[],"call":["@reflection klass transaction ","@reflection klass "]}," ActiveRecord Reflection AssociationReflection reset_column_information":{"type":"method","name":"reset_column_information","children":[],"call":[]}," ActiveRecord Reflection AssociationReflection columns":{"type":"method","name":"columns","children":[],"call":[" klass connection columns "," klass connection "," klass "]}," ActiveRecord Associations HasAndBelongsToManyAssociation reset_column_information":{"type":"method","name":"reset_column_information","children":[],"call":["@reflection reset_column_information "]}," ActiveRecord Associations HasAndBelongsToManyAssociation columns":{"type":"method","name":"columns","children":[],"call":["@reflection columns ","@reflection options [] ","@reflection options "]}," ActiveRecord load_all!":{"type":"method","name":"load_all!","children":[],"call":[]}," ActiveRecord Validations invalid?":{"type":"method","name":"invalid?","children":[],"call":[" valid? ! "," valid? "]}," ActiveRecord Errors each_error":{"type":"method","name":"each_error","children":[],"call":["@errors [] each ","@errors [] ","@errors each_key "]}," ActiveRecord Error default_options":{"type":"method","name":"default_options","children":[],"call":[" options reverse_merge "," value ","@base class human_attribute_name "," attribute to_s "," attribute ","@base class ","@base class human_name "," options "]}," ActiveRecord Error generate_full_message":{"type":"method","name":"generate_full_message","children":[],"call":["I18n  translate ","keys shift ","options merge! "," message ","I18n  t ","options merge ","options reverse_merge! "," value ","@base class human_attribute_name "," attribute to_s "," attribute ","@base class ","@base class human_name "]}," ActiveRecord Error generate_message":{"type":"method","name":"generate_message","children":[],"call":["I18n  translate ","keys shift ","options merge! ","keys compact! ","keys << ","@type == ","@message is_a? ","options delete ","(send\n  (send\n    (send\n      (ivar :@base) :class) :self_and_descendants_from_active_record) :map) flatten ","klass name underscore ","klass name "," attribute ","@base class self_and_descendants_from_active_record map ","@base class self_and_descendants_from_active_record ","@base class ","options reverse_merge! "," value ","@base class human_attribute_name "," attribute to_s ","@base class human_name ","message is_a? ","(send\n  (send\n    (send\n      (ivar :@base) :class) :self_and_descendants_from_active_record) :map) flatten  shift ","(send\n  (send\n    (send\n      (ivar :@base) :class) :self_and_descendants_from_active_record) :map) flatten  compact! ","(send\n  (send\n    (send\n      (ivar :@base) :class) :self_and_descendants_from_active_record) :map) flatten  << "]}," ActiveRecord Error value":{"type":"method","name":"value","children":[],"call":["@base send "," attribute ","@base respond_to? "]}," ActiveRecord Error full_message":{"type":"method","name":"full_message","children":[],"call":[" generate_full_message "," default_options "," message "," attribute to_s == "," attribute to_s "," attribute "," options dup "," options "]}," ActiveRecord Error message":{"type":"method","name":"message","children":[],"call":[" generate_message "," default_options "," type "," type is_a? "," options dup "," options "]}," ActiveRecord Error initialize":{"type":"method","name":"initialize","children":[],"call":[" message= "," type ","options delete "," options= "," type= "," attribute= "," base= "]}," ActiveRecord Timestamp current_time_from_proper_timezone":{"type":"method","name":"current_time_from_proper_timezone","children":[],"call":["Time  now ","Time  now utc "," class default_timezone == "," class default_timezone "," class "," class send "," default_timezone == "," default_timezone "," class current_time_from_proper_timezone "]}," ActiveRecord Timestamp touch":{"type":"method","name":"touch","children":[],"call":[" save! "," write_attribute "," respond_to? "," current_time_from_proper_timezone "," update_attribute ","  current_time_from_proper_timezone _from_proper_timezone "]}," ActiveRecord TestCase with_kcode":{"type":"method","name":"with_kcode","children":[],"call":["RUBY_VERSION  < "]}," ActiveRecord SessionStore find_session":{"type":"method","name":"find_session","children":[],"call":["@@session_class new ","@@session_class find_by_session_id "]}," ActiveRecord SessionStore get_session_model":{"type":"method","name":"get_session_model","children":[],"call":[" find_session ","env [] ","env []= ","env [] [] nil? ","env [] [] "]}," ActiveRecord SessionStore destroy":{"type":"method","name":"destroy","children":[],"call":[" get_session_model destroy "," get_session_model ","Base  silence "," current_session_id "]}," ActiveRecord SessionStore set_session":{"type":"method","name":"set_session","children":[],"call":["obj clear_association_cache ","obj respond_to? ","session_data each_value ","session_data respond_to? ","record data ","record save ","record data= "," get_session_model ","Base  silence "," find_session ","env [] ","record data  each_value ","record data  respond_to? "," get_session_model  data "," get_session_model  save "," get_session_model  data= "]}," ActiveRecord SessionStore get_session":{"type":"method","name":"get_session","children":[],"call":["session data ","env []= "," find_session "," generate_sid ","Base  silence ","@@session_class new ","@@session_class find_by_session_id "," find_session  data ","@@session_class new  data ","@@session_class find_by_session_id  data "," find_ find_session  "," find_@@session_class new  "," find_@@session_class find_by_session_id  "," generate_ generate_sid  ","@@ find_session _class new ","@@@@session_class new _class new ","@@@@session_class find_by_session_id _class new ","@@ find_session _class find_by_ find_session _id ","@@@@session_class new _class find_by_@@session_class new _id ","@@@@session_class find_by_session_id _class find_by_@@session_class find_by_session_id _id "]}," ActiveRecord SessionStore SqlBypass destroy":{"type":"method","name":"destroy","children":[],"call":["@@connection delete ","@@connection quote "," session_id ","@@connection quote_column_name ","connect delete ","connect quote ","connect quote_column_name "," session_id_column "," table_name "," connection ","@@ connection ion delete ","@@ connection ion quote ","@@ connection ion quote_column_name "," connection  delete "," connection  quote "," connection  quote_column_name ","  connection ion "]}," ActiveRecord SessionStore SqlBypass save":{"type":"method","name":"save","children":[],"call":["@@connection update ","@@connection quote "," session_id ","@@connection quote_column_name "," class marshal "," data "," class "," loaded? ! "," loaded? ","connect update ","connect quote ","connect quote_column_name "," session_id_column "," data_column "," table_name "," connection ","@@ connection ion update ","@@ connection ion quote ","@@ connection ion quote_column_name "," connection  update "," connection  quote "," connection  quote_column_name ","  connection ion "]}," ActiveRecord SessionStore SqlBypass loaded?":{"type":"method","name":"loaded?","children":[],"call":["@data ! ! ","@data ! "]}," ActiveRecord SessionStore SqlBypass data":{"type":"method","name":"data","children":[],"call":[" class unmarshal "," class "]}," ActiveRecord SessionStore SqlBypass new_record?":{"type":"method","name":"new_record?","children":[],"call":[]}," ActiveRecord SessionStore SqlBypass initialize":{"type":"method","name":"initialize","children":[],"call":["@marshaled_data nil? ","attributes [] ","@marshaled_data nil? ! ","attributes []  nil? ","attributes []  nil? ! "]}," ActiveRecord SessionStore SqlBypass drop_table!":{"type":"method","name":"drop_table!","children":[],"call":["@@connection execute "," table_name "]}," ActiveRecord SessionStore SqlBypass create_table!":{"type":"method","name":"create_table!","children":[],"call":["@@connection execute ","@@connection quote_column_name "," data_column "," session_id_column "," table_name "]}," ActiveRecord SessionStore SqlBypass unmarshal":{"type":"method","name":"unmarshal","children":[],"call":["Marshal  load ","ActiveSupport Base64  decode64 "]}," ActiveRecord SessionStore SqlBypass marshal":{"type":"method","name":"marshal","children":[],"call":["ActiveSupport Base64  encode64 ","Marshal  dump "]}," ActiveRecord SessionStore SqlBypass find_by_session_id":{"type":"method","name":"find_by_session_id","children":[],"call":[" new ","record [] "," connection select_one "," connection quote "," connection ","@@connection select_one ","@@connection quote "," connection select_one  [] ","@@connection select_one  [] "]}," ActiveRecord SessionStore SqlBypass connection":{"type":"method","name":"connection","children":[],"call":["ActiveRecord Base  connection "]}," ActiveRecord SessionStore Session raise_on_session_data_overflow!":{"type":"method","name":"raise_on_session_data_overflow!","children":[],"call":[" raise "," read_attribute size > "," read_attribute size "," read_attribute "," loaded? "," class data_column_size_limit "," class "," loaded? ! "," class data_column_size_ class data_column_size_limit  "]}," ActiveRecord SessionStore Session marshal_data!":{"type":"method","name":"marshal_data!","children":[],"call":[" write_attribute "," class marshal "," data "," class "," loaded? ! "," loaded? "]}," ActiveRecord SessionStore Session loaded?":{"type":"method","name":"loaded?","children":[],"call":["@data ! ! ","@data ! "]}," ActiveRecord SessionStore Session data":{"type":"method","name":"data","children":[],"call":[" class unmarshal "," read_attribute "," class "]}," ActiveRecord SessionStore Session setup_sessid_compatibility!":{"type":"method","name":"setup_sessid_compatibility!","children":[{"type":"method","name":"find_by_session_id","children":[],"asgn":[],"call":[]},{"type":"method","name":"find_by_session_id","children":[],"asgn":[],"call":[]}],"call":[" find "," sessid= "," define_method "," sessid "," find_by_sessid "," columns_hash [] "," columns_hash "," reset_column_information "," remove_method "]}," ActiveRecord SessionStore Session drop_table!":{"type":"method","name":"drop_table!","children":[],"call":[" connection execute "," table_name "," connection "]}," ActiveRecord SessionStore Session create_table!":{"type":"method","name":"create_table!","children":[],"call":[" connection execute "," connection quote_column_name "," connection "," table_name "]}," ActiveRecord SessionStore Session unmarshal":{"type":"method","name":"unmarshal","children":[],"call":["Marshal  load ","ActiveSupport Base64  decode64 "]}," ActiveRecord SessionStore Session marshal":{"type":"method","name":"marshal","children":[],"call":["ActiveSupport Base64  encode64 ","Marshal  dump "]}," ActiveRecord SessionStore Session find_by_session_id":{"type":"method","name":"find_by_session_id","children":[],"call":[" find_by_session_id "," setup_sessid_compatibility! "]}," ActiveRecord SessionStore Session data_column_size_limit":{"type":"method","name":"data_column_size_limit","children":[],"call":[" columns_hash [] limit "," columns_hash [] "," columns_hash "," data_column_name "]}," ActiveRecord XmlSerializer reformat_name":{"type":"method","name":"reformat_name","children":[],"call":["name dasherize "," dasherize? ","name camelize "," camelize? ","name camelize  dasherize ","name camelize  camelize "]}," ActiveRecord XmlSerializer camelize?":{"type":"method","name":"camelize?","children":[],"call":[" options [] "," options "," options has_key? "]}," ActiveRecord Serialization as_json":{"type":"method","name":"as_json","children":[],"call":[" class model_name element "," class model_name "," class ","options [] "," include_root_in_json ","Serializer  new serializable_record ","Serializer  new "]}," ActiveRecord Schema migrations_path":{"type":"method","name":"migrations_path","children":[],"call":[]}," ActiveRecord Reflection AssociationReflection dependent_conditions":{"type":"method","name":"dependent_conditions","children":[],"call":["dependent_conditions gsub ","dependent_conditions << ","(send\n  (lvar :dependent_conditions) :collect) join ","dependent_conditions collect "," klass send "," options [] "," options "," klass ","base_class name ","record send send ","record send "," name "," primary_key_name ","dependent_conditions gsub  gsub ","(send\n  (lvar :dependent_conditions) :collect) join  gsub ","dependent_conditions gsub  << ","(send\n  (lvar :dependent_conditions) :collect) join  << ","(send\n  (lvar :dependent_conditions gsub ) :collect) join ","(send\n  (lvar :(send\n  (lvar :dependent_conditions) :collect) join ) :collect) join ","dependent_conditions gsub  collect ","(send\n  (lvar :dependent_conditions) :collect) join  collect "]}," ActiveRecord Reflection AssociationReflection validate?":{"type":"method","name":"validate?","children":[],"call":[" macro == "," macro "," options [] == "," options [] "," options "," options [] nil? ! "," options [] nil? "," collection? "]}," ActiveRecord Reflection AssociationReflection collection?":{"type":"method","name":"collection?","children":[],"call":["(sym :has_many) include? "," macro ","@collection nil? ","(sym :has_many) include?  nil? "]}," ActiveRecord Reflection AssociationReflection polymorphic_inverse_of":{"type":"method","name":"polymorphic_inverse_of","children":[],"call":[" raise ","InverseOfAssociationNotFoundError  new ","associated_class reflect_on_association "," options [] "," options "," has_inverse? ","associated_class _reflect_on_association "]}," ActiveRecord Reflection AssociationReflection inverse_of":{"type":"method","name":"inverse_of","children":[],"call":[" klass reflect_on_association "," options [] "," options "," klass "," has_inverse? "," inverse_name "," klass _reflect_on_association "]}," ActiveRecord Reflection AssociationReflection has_inverse?":{"type":"method","name":"has_inverse?","children":[],"call":["@options [] nil? ! ","@options [] nil? ","@options [] "," inverse_name "]}," ActiveRecord Reflection AssociationReflection check_validity_of_inverse!":{"type":"method","name":"check_validity_of_inverse!","children":[],"call":[" raise ","InverseOfAssociationNotFoundError  new "," inverse_of nil? "," inverse_of "," has_inverse? "," options [] "," options "," polymorphic? "]}," ActiveRecord Reflection ClassMethods reflect_on_all_autosave_associations":{"type":"method","name":"reflect_on_all_autosave_associations","children":[],"call":["reflection options [] ","reflection options "," reflections values select "," reflections values "," reflections "]}," ActiveRecord QueryCache call":{"type":"method","name":"call","children":[],"call":["@app call ","ActiveRecord Base  cache "," raise ","ActiveRecord Base  connection disable_query_cache! ","ActiveRecord Base  connection ","ActiveRecord Base  connection clear_query_cache ","BodyProxy  new ","ActiveRecord Base  connection enable_query_cache! ","ActiveRecord Base  connection query_cache_enabled ","ActiveRecord Base  connection_id "," restore_query_cache_settings ","response []= ","Rack BodyProxy  new ","response [] ","connection enable_query_cache! ","connection query_cache_enabled ","ActiveRecord Base  ActiveRecord Base  connection  disable_query_cache! ","ActiveRecord Base  ActiveRecord Base  connection  ","ActiveRecord Base  ActiveRecord Base  connection  clear_query_cache ","ActiveRecord Base  ActiveRecord Base  connection  enable_query_cache! ","ActiveRecord Base  connection query_cache_ActiveRecord Base  connection query_cache_enabled  ","ActiveRecord Base  connection query_cache_connection query_cache_enabled  ","ActiveRecord Base  ActiveRecord Base  connection  query_cache_enabled ","ActiveRecord Base  ActiveRecord Base  connection_id  ","ActiveRecord Base  ActiveRecord Base  connection _id ","@app call  []= ","@app call  [] ","ActiveRecord Base  connection  enable_query_cache! ","connection query_cache_ActiveRecord Base  connection query_cache_enabled  ","connection query_cache_connection query_cache_enabled  ","ActiveRecord Base  connection  query_cache_enabled "]}," ActiveRecord QueryCache ClassMethods uncached":{"type":"method","name":"uncached","children":[],"call":[" connection uncached "," connection ","ActiveRecord Base  configurations blank? ","ActiveRecord Base  configurations ","ActiveRecord Base  connected? "," connected? "," configurations empty? ! "," configurations empty? "," configurations "]}," ActiveRecord QueryCache ClassMethods cache":{"type":"method","name":"cache","children":[],"call":[" connection cache "," connection ","ActiveRecord Base  configurations blank? ","ActiveRecord Base  configurations ","ActiveRecord Base  connected? "," connected? "," configurations empty? ! "," configurations empty? "," configurations "]}," ActiveRecord NestedAttributes raise_nested_attributes_record_not_found":{"type":"method","name":"raise_nested_attributes_record_not_found","children":[],"call":[" raise "," id "," class name "," class ","reflection klass name ","reflection klass "," class reflect_on_association "," class reflect_on_association klass name "," class reflect_on_association klass "," class reflect_on_association  klass name "," class reflect_on_association  klass "]}," ActiveRecord NestedAttributes call_reject_if":{"type":"method","name":"call_reject_if","children":[],"call":["callback call "," send "," method arity == "," method arity "," method "," nested_attributes_options [] [] "," nested_attributes_options [] "," nested_attributes_options ","callback try "," has_destroy_flag? "," will_be_destroyed? "," nested_attributes_options [] []  call "," nested_attributes_options [] []  try "]}," ActiveRecord NestedAttributes reject_new_record?":{"type":"method","name":"reject_new_record?","children":[],"call":[" call_reject_if "," has_destroy_flag? "," class reject_new_nested_attributes_procs [] try "," class reject_new_nested_attributes_procs [] "," class reject_new_nested_attributes_procs "," class "," has_delete_flag? "," will_be_destroyed? "]}," ActiveRecord NestedAttributes has_destroy_flag?":{"type":"method","name":"has_destroy_flag?","children":[],"call":["ConnectionAdapters Column  value_to_boolean ","hash [] ","Type Boolean  new type_cast_from_user ","Type Boolean  new ","Type Boolean  new cast "]}," ActiveRecord NestedAttributes assign_to_or_mark_for_destruction":{"type":"method","name":"assign_to_or_mark_for_destruction","children":[],"call":["record attributes= ","attributes except ","record mark_for_destruction "," has_destroy_flag? "," has_delete_flag? ","record assign_attributes "," unassignable_keys "]}," ActiveRecord NestedAttributes assign_nested_attributes_for_collection_association":{"type":"method","name":"assign_nested_attributes_for_collection_association","children":[],"call":[" raise_nested_attributes_record_not_found ","attributes [] "," assign_to_or_mark_for_destruction ","options [] ","association send ","association loaded? ","record id to_s == ","attributes [] to_s ","record id to_s ","record id ","existing_records detect ","association build ","attributes except "," reject_new_record? ","attributes [] blank? ","attributes with_indifferent_access ","attributes_collection each ","association all ","association primary_key ","attribute_ids present? ","(send\n  (lvar :attributes_collection) :map) compact ","a [] ","attributes_collection map ","association to_a "," send ","(send\n  (lvar :attributes_collection) :sort_by) map ","index to_i ","attributes_collection sort_by ","attributes_collection is_a? "," raise ","attributes_collection size ","attributes_collection size > ","attributes_collection inspect ","attributes_collection class name ","attributes_collection class "," nested_attributes_options [] "," nested_attributes_options "," send detect "," send build ","attributes stringify_keys "," class reflect_on_association klass find "," class reflect_on_association klass "," class reflect_on_association "," class ","existing_records size == ","existing_records size ","existing_records count == ","existing_records count "," call_reject_if ! "," call_reject_if ","association loaded? ! ","i to_i ","Array  wrap ","keys include? ","attributes_collection keys "," unassignable_keys ","assignment_opts [] ","association add_to_target ","record == ","association target detect ","association target ","association scoped where ","association klass primary_key ","association klass ","association scoped ","attribute_ids empty? "," association ","attributes_collection values "," raise_nested_attributes_record_not_found! ","association scope where ","association scope "," check_record_limit! ","limit call ","attributes to_h ","attributes respond_to? ","attributes_collection to_h ","attributes_collection respond_to? ","association reader build ","association reader ","attributes_collection filter_map "," raise_nested_attributes with_indifferent_access _record_not_found "," raise_nested_attributes stringify_keys _record_not_found "," raise_nested_attributes to_h _record_not_found ","attributes with_indifferent_access  [] ","attributes stringify_keys  [] ","attributes to_h  [] "," nested_attributes_options []  [] "," send  send "," association  send "," send  loaded? "," association  loaded? ","attributes with_indifferent_access  [] to_s ","attributes stringify_keys  [] to_s ","attributes to_h  [] to_s ","association to_a  detect ","association target  detect "," class reflect_on_association klass find s detect "," send  build "," association  build ","attributes with_indifferent_access  except ","attributes stringify_keys  except ","attributes to_h  except ","attributes with_indifferent_access  [] blank? ","attributes stringify_keys  [] blank? ","attributes to_h  [] blank? ","attributes with_indifferent_access  with_indifferent_access ","attributes stringify_keys  with_indifferent_access ","attributes to_h  with_indifferent_access ","attributes with_indifferent_access _collection each ","attributes stringify_keys _collection each ","attributes to_h _collection each ","Array  wrap  each ","attributes_collection values  each ","attributes_collection to_h  each "," send  all "," association  all "," send  primary_key "," association  primary_key ","(send\n  (lvar :attributes_collection) :map) compact  present? ","(send\n  (lvar :attributes with_indifferent_access _collection) :map) compact ","(send\n  (lvar :attributes stringify_keys _collection) :map) compact ","(send\n  (lvar :attributes to_h _collection) :map) compact ","(send\n  (lvar :Array  wrap ) :map) compact ","(send\n  (lvar :attributes_collection values ) :map) compact ","(send\n  (lvar :attributes_collection to_h ) :map) compact ","attributes with_indifferent_access _collection map ","attributes stringify_keys _collection map ","attributes to_h _collection map ","Array  wrap  map ","attributes_collection values  map ","attributes_collection to_h  map "," send  to_a "," association  to_a ","(send\n  (lvar :attributes with_indifferent_access _collection) :sort_by) map ","(send\n  (lvar :attributes stringify_keys _collection) :sort_by) map ","(send\n  (lvar :attributes to_h _collection) :sort_by) map ","(send\n  (lvar :Array  wrap ) :sort_by) map ","(send\n  (lvar :attributes_collection values ) :sort_by) map ","(send\n  (lvar :attributes_collection to_h ) :sort_by) map ","attributes with_indifferent_access _collection sort_by ","attributes stringify_keys _collection sort_by ","attributes to_h _collection sort_by ","Array  wrap  sort_by ","attributes_collection values  sort_by ","attributes_collection to_h  sort_by ","attributes with_indifferent_access _collection is_a? ","attributes stringify_keys _collection is_a? ","attributes to_h _collection is_a? ","Array  wrap  is_a? ","attributes_collection values  is_a? ","attributes_collection to_h  is_a? ","attributes with_indifferent_access _collection size ","attributes stringify_keys _collection size ","attributes to_h _collection size ","Array  wrap  size ","attributes_collection values  size ","attributes_collection to_h  size ","attributes with_indifferent_access _collection size > ","attributes stringify_keys _collection size > ","attributes to_h _collection size > ","Array  wrap  size > ","attributes_collection values  size > ","attributes_collection to_h  size > ","attributes with_indifferent_access _collection inspect ","attributes stringify_keys _collection inspect ","attributes to_h _collection inspect ","Array  wrap  inspect ","attributes_collection values  inspect ","attributes_collection to_h  inspect ","attributes with_indifferent_access _collection class name ","attributes stringify_keys _collection class name ","attributes to_h _collection class name ","Array  wrap  class name ","attributes_collection values  class name ","attributes_collection to_h  class name ","attributes with_indifferent_access _collection class ","attributes stringify_keys _collection class ","attributes to_h _collection class ","Array  wrap  class ","attributes_collection values  class ","attributes_collection to_h  class "," nested_attributes with_indifferent_access _options [] "," nested_attributes stringify_keys _options [] "," nested_attributes to_h _options [] "," nested_attributes_ nested_attributes_options []  [] "," nested_attributes with_indifferent_access _options "," nested_attributes stringify_keys _options "," nested_attributes to_h _options "," nested_attributes_ nested_attributes_options []  ","attributes with_indifferent_access  stringify_keys ","attributes stringify_keys  stringify_keys ","attributes to_h  stringify_keys ","attributes stringify_attributes_collection keys  "," class reflect_on_ send  klass find "," class reflect_on_ association  klass find "," class reflect_on_ send  klass "," class reflect_on_ association  klass "," class reflect_on_ send  "," class reflect_on_ association  ","association to_a  size == ","association target  size == "," class reflect_on_association klass find s size == ","association to_a  size ","association target  size "," class reflect_on_association klass find s size ","association to_a  count == ","association target  count == "," class reflect_on_association klass find s count == ","association to_a  count ","association target  count "," class reflect_on_association klass find s count "," send  loaded? ! "," association  loaded? ! ","attributes_collection keys  include? ","attributes with_indifferent_access _collection keys ","attributes stringify_keys _collection keys ","attributes to_h _collection keys ","Array  wrap  keys ","attributes_collection values  keys ","attributes_collection to_h  keys ","attributes_collection attributes_collection keys  "," unassignable_attributes_collection keys  "," send  add_to_target "," association  add_to_target "," send  target detect "," association  target detect "," send  target "," association  target "," send  scoped where "," association  scoped where "," send  klass primary_key "," association  klass primary_key "," send  klass "," association  klass "," send  scoped "," association  scoped ","(send\n  (lvar :attributes_collection) :map) compact  empty? ","  send  ","  association  ","attributes with_indifferent_access _collection values ","attributes stringify_keys _collection values ","attributes to_h _collection values ","Array  wrap  values ","attributes_collection values  values ","attributes_collection to_h  values "," raise_nested_attributes with_indifferent_access _record_not_found! "," raise_nested_attributes stringify_keys _record_not_found! "," raise_nested_attributes to_h _record_not_found! "," send  scope where "," association  scope where "," send  scope "," association  scope "," check_record_options [] ! ","options []  call ","attributes with_indifferent_access  to_h ","attributes stringify_keys  to_h ","attributes to_h  to_h ","attributes with_indifferent_access  respond_to? ","attributes stringify_keys  respond_to? ","attributes to_h  respond_to? ","attributes with_indifferent_access _collection to_h ","attributes stringify_keys _collection to_h ","attributes to_h _collection to_h ","Array  wrap  to_h ","attributes_collection values  to_h ","attributes_collection to_h  to_h ","attributes with_indifferent_access _collection respond_to? ","attributes stringify_keys _collection respond_to? ","attributes to_h _collection respond_to? ","Array  wrap  respond_to? ","attributes_collection values  respond_to? ","attributes_collection to_h  respond_to? "," send  reader build "," association  reader build "," send  reader "," association  reader ","attributes with_indifferent_access _collection filter_map ","attributes stringify_keys _collection filter_map ","attributes to_h _collection filter_map ","Array  wrap  filter_map ","attributes_collection values  filter_map ","attributes_collection to_h  filter_map "]}," ActiveRecord NestedAttributes assign_nested_attributes_for_one_to_one_association":{"type":"method","name":"assign_nested_attributes_for_one_to_one_association","children":[],"call":[" raise "," send ","attributes except "," respond_to? "," reject_new_record? ! "," reject_new_record? "," raise_nested_attributes_record_not_found ","attributes [] "," assign_to_or_mark_for_destruction ","options [] ","record id to_s == ","attributes [] to_s ","record id to_s ","record id ","attributes [] blank? ! ","attributes [] blank? ","attributes with_indifferent_access "," nested_attributes_options [] "," nested_attributes_options ","existing_record id to_s == ","existing_record id to_s ","existing_record id ","attributes stringify_keys ","association_name to_s + ","association_name to_s "," class reflect_on_association klass find "," class reflect_on_association klass "," class reflect_on_association "," class "," call_reject_if "," unassignable_keys ","assignment_opts [] ! ","assignment_opts [] ","attributes [] present? "," association initialize_attributes "," association ","existing_record assign_attributes ","existing_record new_record? "," raise_nested_attributes_record_not_found! ","attributes to_h ","attributes respond_to? ","attributes with_indifferent_access  except ","attributes stringify_keys  except ","attributes to_h  except "," reject_new_ send ? ! "," reject_new_ send ? "," raise_nested_attributes_ send _not_found "," raise_nested_attributes with_indifferent_access _record_not_found "," raise_nested_attributes stringify_keys _record_not_found "," raise_nested_attributes to_h _record_not_found ","attributes with_indifferent_access  [] ","attributes stringify_keys  [] ","attributes to_h  [] "," nested_attributes_options []  [] "," send  id to_s == ","attributes with_indifferent_access  [] to_s ","attributes stringify_keys  [] to_s ","attributes to_h  [] to_s "," send  id to_s "," send  id ","attributes with_indifferent_access  [] blank? ! ","attributes stringify_keys  [] blank? ! ","attributes to_h  [] blank? ! ","attributes with_indifferent_access  [] blank? ","attributes stringify_keys  [] blank? ","attributes to_h  [] blank? ","attributes with_indifferent_access  with_indifferent_access ","attributes stringify_keys  with_indifferent_access ","attributes to_h  with_indifferent_access "," nested_attributes with_indifferent_access _options [] "," nested_attributes stringify_keys _options [] "," nested_attributes to_h _options [] "," nested_attributes_ nested_attributes_options []  [] "," nested_attributes with_indifferent_access _options "," nested_attributes stringify_keys _options "," nested_attributes to_h _options "," nested_attributes_ nested_attributes_options []  ","existing_ send  id to_s == "," class reflect_on_association klass find  id to_s == ","existing_ send  id to_s "," class reflect_on_association klass find  id to_s ","existing_ send  id "," class reflect_on_association klass find  id ","attributes with_indifferent_access  stringify_keys ","attributes stringify_keys  stringify_keys ","attributes to_h  stringify_keys ","attributes with_indifferent_access  [] present? ","attributes stringify_keys  [] present? ","attributes to_h  [] present? "," association initialize_attributes with_indifferent_access  "," association initialize_attributes stringify_keys  "," association initialize_attributes to_h  ","existing_ send  assign_attributes ","existing_record assign_attributes with_indifferent_access  ","existing_record assign_attributes stringify_keys  ","existing_record assign_attributes to_h  "," send  assign_attributes "," class reflect_on_association klass find  assign_attributes ","existing_ send  new_ send ? "," send  new_record? "," class reflect_on_association klass find  new_record? "," raise_nested_attributes_ send _not_found! "," raise_nested_attributes with_indifferent_access _record_not_found! "," raise_nested_attributes stringify_keys _record_not_found! "," raise_nested_attributes to_h _record_not_found! ","attributes with_indifferent_access  to_h ","attributes stringify_keys  to_h ","attributes to_h  to_h ","attributes with_indifferent_access  respond_to? ","attributes stringify_keys  respond_to? ","attributes to_h  respond_to? "]}," ActiveRecord NestedAttributes _destroy":{"type":"method","name":"_destroy","children":[],"call":[" marked_for_destruction? "]}," ActiveRecord NestedAttributes ClassMethods accepts_nested_attributes_for":{"type":"method","name":"accepts_nested_attributes_for","children":[],"call":[" raise "," class_eval ","242 + ","reflection collection? "," nested_attributes_options []= ","association_name to_sym "," nested_attributes_options "," add_autosave_association_callbacks ","reflection options []= ","reflection options "," reflect_on_association ","attr_names each ","options []= ","options [] == ","options [] ","options assert_valid_keys ","options update ","attr_names extract_options! "," reject_new_nested_attributes_procs []= "," reject_new_nested_attributes_procs ","reflection macro ","249 + ","247 + ","248 + ","282 + "," nested_attributes_options= ","nested_attributes_options []= "," nested_attributes_options dup ","283 + ","285 + ","309 + "," generate_association_writer "," generated_feature_methods module_eval ","276 + "," generated_feature_methods ","reflection autosave= "," _reflect_on_association "," define_autosave_validation_callbacks "," nested_attributes_options dig == "," nested_attributes_options dig "," reflect_on_association  collection? "," _reflect_on_association  collection? ","  nested_attributes_options dup  []= ","  nested_attributes_options dup  "," reflect_on_association  options []= "," _reflect_on_association  options []= "," reflect_on_association  options "," _reflect_on_association  options "," reflect_on_association  macro "," _reflect_on_association  macro ","  nested_attributes_options dup = "," nested_attributes_options dup  []= ","  nested_attributes_options dup  dup "," reflect_on_association  autosave= "," _reflect_on_association  autosave= ","  nested_attributes_options dup  dig == ","  nested_attributes_options dup  dig "]}," ActiveRecord NestedAttributes included":{"type":"method","name":"included","children":[],"call":[]}," ActiveRecord NamedScope ClassMethods scoped":{"type":"method","name":"scoped","children":[],"call":["Scope  new "," relation clone "," relation "," relation merge "," current_scoped_methods "," scoped apply_finder_options "," scoped "," unscoped spawn "," unscoped "," unscoped merge ","Scope  init ","options present? "," unscoped clone ","relation extending ","Module  new "," block_given? ","scope default_scoped= "," current_scope clone "," current_scope ","  scoped apply_finder_options  clone ","  scoped apply_finder_options  ","  scoped apply_finder_options  merge "," current_ relation clone d_methods ","  relation clone d apply_finder_options ","  relation clone d "," un relation clone d spawn "," un relation clone d "," un relation clone d merge "," un relation clone d clone "," scoped apply_finder_options  extending "," relation clone  default_ relation clone d= "," current_ relation clone  clone "," current_ relation clone  "]}," ActiveRecord Migrator migrations_path":{"type":"method","name":"migrations_path","children":[],"call":[" migrations_paths first "," migrations_paths "]}," ActiveRecord Migration connection":{"type":"method","name":"connection","children":[],"call":["ActiveRecord Base  connection ","ActiveRecord Tasks DatabaseTasks  migration_connection "]}," ActiveRecord Locking Optimistic destroy_with_lock":{"type":"method","name":"destroy_with_lock","children":[],"call":[" freeze "," raise "," class name "," class ","affected_rows == "," connection delete ","(str \"DELETE FROM \") + + "," quote_value "," class quoted_locking_column ","(str \"DELETE FROM \") + "," quoted_id "," connection quote_column_name "," class primary_key "," connection "," class quoted_table_name "," send to_i "," send "," class locking_column "," new_record? "," destroy_without_lock "," locking_enabled? "," connection delete  == "]}," ActiveRecord TestFixtures load_instances?":{"type":"method","name":"load_instances?","children":[],"call":[" use_instantiated_fixtures != "," use_instantiated_fixtures "]}," ActiveRecord TestFixtures instantiate_fixtures":{"type":"method","name":"instantiate_fixtures","children":[],"call":["Fixtures  instantiate_fixtures "," load_instances? ","@loaded_fixtures each "," raise ","@loaded_fixtures nil? ","Fixtures  instantiate_all_loaded_fixtures "," class require_fixture_classes ","Fixtures  all_loaded_fixtures keys ","Fixtures  all_loaded_fixtures "," class ","Fixtures  all_loaded_fixtures empty? "," pre_loaded_fixtures ","ActiveRecord Fixtures  instantiate_fixtures ","ActiveRecord Fixtures  instantiate_all_loaded_fixtures ","ActiveRecord Fixtures  all_loaded_fixtures keys ","ActiveRecord Fixtures  all_loaded_fixtures ","ActiveRecord Fixtures  all_loaded_fixtures empty? ","@loaded_fixtures each_value ","ActiveRecord FixtureSet  instantiate_fixtures ","ActiveRecord FixtureSet  instantiate_all_loaded_fixtures ","ActiveRecord FixtureSet  all_loaded_fixtures keys ","ActiveRecord FixtureSet  all_loaded_fixtures ","ActiveRecord FixtureSet  all_loaded_fixtures empty? "]}," ActiveRecord TestFixtures load_fixtures":{"type":"method","name":"load_fixtures","children":[],"call":["@loaded_fixtures []= ","f name ","fixtures each ","fixtures name ","fixtures instance_of? ","fixtures nil? ","Fixtures  create_fixtures "," fixture_class_names "," fixture_table_names "," fixture_path ","Hash  [] ","fixtures map ","ActiveRecord Fixtures  create_fixtures ","ActiveRecord FixtureSet  create_fixtures ","ActiveRecord FixtureSet  create_fixtures index_by "," fixture_paths ","@loaded_Fixtures  create_fixtures  []= ","@loaded_ActiveRecord Fixtures  create_fixtures  []= ","@loaded_ActiveRecord FixtureSet  create_fixtures  []= ","Fixtures  create_fixtures  each ","ActiveRecord Fixtures  create_fixtures  each ","ActiveRecord FixtureSet  create_fixtures  each ","Fixtures  create_fixtures  name ","ActiveRecord Fixtures  create_fixtures  name ","ActiveRecord FixtureSet  create_fixtures  name ","Fixtures  create_fixtures  instance_of? ","ActiveRecord Fixtures  create_fixtures  instance_of? ","ActiveRecord FixtureSet  create_fixtures  instance_of? ","Fixtures  create_fixtures  nil? ","ActiveRecord Fixtures  create_fixtures  nil? ","ActiveRecord FixtureSet  create_fixtures  nil? ","Fixtures  create_Fixtures  create_fixtures  ","Fixtures  create_ActiveRecord Fixtures  create_fixtures  ","Fixtures  create_ActiveRecord FixtureSet  create_fixtures  ","Fixtures  create_fixtures  map ","ActiveRecord Fixtures  create_fixtures  map ","ActiveRecord FixtureSet  create_fixtures  map ","ActiveRecord Fixtures  create_Fixtures  create_fixtures  ","ActiveRecord Fixtures  create_ActiveRecord Fixtures  create_fixtures  ","ActiveRecord Fixtures  create_ActiveRecord FixtureSet  create_fixtures  ","ActiveRecord FixtureSet  create_Fixtures  create_fixtures  ","ActiveRecord FixtureSet  create_ActiveRecord Fixtures  create_fixtures  ","ActiveRecord FixtureSet  create_ActiveRecord FixtureSet  create_fixtures  ","ActiveRecord FixtureSet  create_Fixtures  create_fixtures  index_by ","ActiveRecord FixtureSet  create_ActiveRecord Fixtures  create_fixtures  index_by ","ActiveRecord FixtureSet  create_ActiveRecord FixtureSet  create_fixtures  index_by "]}," ActiveRecord TestFixtures teardown_fixtures":{"type":"method","name":"teardown_fixtures","children":[],"call":["ActiveRecord Base  clear_active_connections! ","ActiveRecord Base  connection decrement_open_transactions ","ActiveRecord Base  connection ","ActiveRecord Base  connection rollback_db_transaction ","ActiveRecord Base  connection open_transactions != ","ActiveRecord Base  connection open_transactions "," run_in_transaction? ","Fixtures  reset_cache ","ActiveRecord Base  configurations blank? ! ","ActiveRecord Base  configurations blank? ","ActiveRecord Base  configurations ","ActiveRecord Fixtures  reset_cache ","@fixture_connections clear ","connection decrement_open_transactions ","connection rollback_db_transaction ","connection open_transactions != ","connection open_transactions ","@fixture_connections each ","ActiveRecord FixtureSet  reset_cache ","connection rollback_transaction ","connection transaction_open? ","connection pool lock_thread= ","connection pool ","ActiveSupport Notifications  unsubscribe "," teardown_shared_connection_pool ","ActiveRecord Base  connection_handler clear_active_connections! ","ActiveRecord Base  connection_handler "]}," ActiveRecord TestFixtures setup_fixtures":{"type":"method","name":"setup_fixtures","children":[],"call":[" instantiate_fixtures "," use_instantiated_fixtures "," load_fixtures ","@@already_loaded_fixtures []= "," class ","Fixtures  reset_cache ","ActiveRecord Base  connection begin_db_transaction ","ActiveRecord Base  connection ","ActiveRecord Base  connection transaction_joinable= ","ActiveRecord Base  connection increment_open_transactions ","@@already_loaded_fixtures [] "," run_in_transaction? "," raise "," use_transactional_fixtures ! "," use_transactional_fixtures "," pre_loaded_fixtures ","ActiveRecord Base  configurations blank? ! ","ActiveRecord Base  configurations blank? ","ActiveRecord Base  configurations ","ActiveRecord Fixtures  reset_cache ","connection begin_db_transaction ","connection transaction_joinable= ","connection increment_open_transactions ","@fixture_connections each "," enlist_fixture_connections ","ActiveRecord FixtureSet  reset_cache ","connection begin_transaction "," use_transactional_tests ! "," use_transactional_tests ","@fixture_connections << ","connection pool lock_thread= ","connection pool ","@fixture_connections include? ! ","@fixture_connections include? ","ActiveRecord Base  connection_handler retrieve_connection ","ActiveRecord Base  connection_handler ","payload [] ","payload key? ","ActiveSupport Notifications  subscribe "," lock_threads "," setup_shared_connection_pool ","hash []= ","Hash  new ","ActiveRecord Base  legacy_connection_handling ","ActiveRecord  legacy_connection_handling ","ActiveRecord Base  ActiveRecord Base  connection_handler retrieve_connection  begin_db_transaction ","ActiveRecord Base  ActiveRecord Base  connection_handler retrieve_connection  ","ActiveRecord Base  ActiveRecord Base  connection_handler retrieve_connection  transaction_joinable= ","ActiveRecord Base  ActiveRecord Base  connection_handler retrieve_connection  increment_open_transactions ","ActiveRecord Base  connection_handler retrieve_connection  begin_db_transaction ","ActiveRecord Base  connection_handler retrieve_connection  transaction_joinable= ","ActiveRecord Base  connection_handler retrieve_connection  increment_open_transactions "," enlist_fixture_connections  each ","@fixture_ActiveRecord Base  connection_handler retrieve_connection s each "," enlist_fixture_ActiveRecord Base  connection_handler retrieve_connection s ","ActiveRecord Base  connection_handler retrieve_connection  begin_transaction "," enlist_fixture_connections  << ","@fixture_ActiveRecord Base  connection_handler retrieve_connection s << ","ActiveRecord Base  connection_handler retrieve_connection  pool lock_thread= ","ActiveRecord Base  connection_handler retrieve_connection  pool "," enlist_fixture_connections  include? ! ","@fixture_ActiveRecord Base  connection_handler retrieve_connection s include? ! "," enlist_fixture_connections  include? ","@fixture_ActiveRecord Base  connection_handler retrieve_connection s include? ","ActiveRecord Base  ActiveRecord Base  connection_handler retrieve_connection _handler retrieve_ActiveRecord Base  connection_handler retrieve_connection  ","ActiveRecord Base  ActiveRecord Base  connection_handler retrieve_connection _handler "," setup_shared_ActiveRecord Base  connection_handler retrieve_connection _pool ","ActiveRecord Base  legacy_ActiveRecord Base  connection_handler retrieve_connection _handling ","ActiveRecord  legacy_ActiveRecord Base  connection_handler retrieve_connection _handling "]}," ActiveRecord TestFixtures run_in_transaction?":{"type":"method","name":"run_in_transaction?","children":[],"call":[" class uses_transaction? ! "," class uses_transaction? "," method_name "," class "," use_transactional_fixtures "," use_transactional_tests "," name "]}," ActiveRecord TestFixtures ClassMethods uses_transaction?":{"type":"method","name":"uses_transaction?","children":[],"call":["@uses_transaction include? ","method to_s "]}," ActiveRecord TestFixtures ClassMethods uses_transaction":{"type":"method","name":"uses_transaction","children":[],"call":["@uses_transaction concat ","methods map ","m to_s "]}," ActiveRecord TestFixtures ClassMethods setup_fixture_accessors":{"type":"method","name":"setup_fixture_accessors","children":[],"call":[" private ","instances first ","instances size == ","instances size "," raise ","@loaded_fixtures [] [] find ","@loaded_fixtures [] [] ","fixture to_s ","@loaded_fixtures [] ","@fixture_cache [] [] ","@fixture_cache [] ","@fixture_cache [] delete ","fixtures map ","fixtures pop ","fixtures last == ","fixtures last "," define_method ","table_name to_s tr ","table_name to_s ","(or\n  (lvar :table_names)\n  (send nil :fixture_table_names)) each "," fixture_table_names ","table_names respond_to? ! ","table_names respond_to? "," redefine_method ","table_names each ","Array  wrap "," include ","ActiveRecord IdentityMap  without ","fixture_name to_s tr ","fixture_name to_s ","fixture_names each ","Module  new ","f_name to_s ","fixture_names map ","fixture_names pop ","fixture_names last == ","fixture_names last ","fs_name tr to_sym ","fs_name tr ","fs_name to_s ","fixture_set_names each "," Array ","f_name is_a? ","@loaded_fixtures [] fixtures keys ","@loaded_fixtures [] fixtures ","fixture_names empty? ","fixture_names size == ","fixture_names size "," fixture_sets []= "," fixture_sets ","fs_name to_s -@ ","fs_name is_a? ","key to_s -@ ","key to_s ","key is_a? ","fs_name to_s tr -@ ","fs_name to_s tr ","fs_name to_s include? "," fixture_sets= "," fixture_sets dup ","fixture_set_names empty? ","table_name to_s tr  to_s tr ","table_name to_s tr  to_s ","(or\n  (lvar :table_name to_s tr s)\n  (send nil :fixture_table_name to_s tr s)) each ","(or\n  (lvar :Array  wrap )\n  (send nil :fixture_Array  wrap )) each "," fixture_table_name to_s tr s "," fixture_Array  wrap  ","table_name to_s tr s respond_to? ! ","Array  wrap  respond_to? ! ","table_name to_s tr s respond_to? ","Array  wrap  respond_to? ","table_name to_s tr s each ","Array  wrap  each ","fixture_name to_s tr  to_s tr ","fixture_name to_s tr  to_s ","fixture_name to_s tr s each ","@loaded_fixtures [] fixtures keys  each ","f_name to_s  to_s ","fixture_name to_s tr s map ","Array  wrap  map ","@loaded_fixtures [] fixtures keys  map ","fixture_name to_s tr s pop ","Array  wrap  pop ","@loaded_fixtures [] fixtures keys  pop ","fixture_name to_s tr s last == ","Array  wrap  last == ","@loaded_fixtures [] fixtures keys  last == ","fixture_name to_s tr s last ","Array  wrap  last ","@loaded_fixtures [] fixtures keys  last ","fs_name to_s  tr to_sym ","fs_name to_s -@  tr to_sym ","fs_name to_s  tr ","fs_name to_s -@  tr ","fs_name to_s  to_s ","fs_name to_s -@  to_s "," Array  each ","f_name to_s  is_a? ","@loaded_fixtures [] fixtures key to_s -@ s ","@loaded_fixtures [] fixtures fs_name to_s tr -@ s ","fixture_name to_s tr s empty? ","Array  wrap  empty? ","@loaded_fixtures [] fixtures keys  empty? ","fixture_name to_s tr s size == ","Array  wrap  size == ","@loaded_fixtures [] fixtures keys  size == ","fixture_name to_s tr s size ","Array  wrap  size ","@loaded_fixtures [] fixtures keys  size ","fs_name to_s  to_s -@ ","fs_name to_s -@  to_s -@ ","fs_name to_s  is_a? ","fs_name to_s -@  is_a? ","key to_s -@  to_s -@ ","fs_name to_s tr -@  to_s -@ ","key to_s -@  to_s ","fs_name to_s tr -@  to_s ","key to_s -@  is_a? ","fs_name to_s tr -@  is_a? ","fs_name to_s  to_s tr -@ ","fs_name to_s -@  to_s tr -@ ","fs_name to_s  to_s tr ","fs_name to_s -@  to_s tr ","fs_name to_s  to_s include? ","fs_name to_s -@  to_s include? "," Array  empty? "]}," ActiveRecord TestFixtures ClassMethods require_fixture_classes":{"type":"method","name":"require_fixture_classes","children":[],"call":[" try_to_load_dependency ","file_name singularize ","ActiveRecord Base  pluralize_table_names ","table_name to_s ","(or\n  (lvar :table_names)\n  (send nil :fixture_table_names)) each "," fixture_table_names ","fixture_name to_s ","(or\n  (lvar :fixture_names)\n  (send nil :fixture_table_names)) each ","fixture_set_names each ","n to_s ","fixture_set_names map ","config pluralize_table_names ","file_name singularize  singularize ","table_name to_s  singularize ","fixture_name to_s  singularize "," fixture_table_names  each "," fixture_table_names  map "]}," ActiveRecord TestFixtures ClassMethods try_to_load_dependency":{"type":"method","name":"try_to_load_dependency","children":[],"call":["ActiveRecord Base  logger warn ","e backtrace join ","e backtrace ","e message ","ActiveRecord Base  logger "," require_dependency "," fixture_class_names key? ","file_name pluralize "," fixture_class_names "]}," ActiveRecord TestFixtures ClassMethods fixtures":{"type":"method","name":"fixtures","children":[],"call":[" setup_fixture_accessors "," require_fixture_classes "," fixture_table_names ","n to_s ","table_names flatten map ","table_names flatten ","File  basename split [] join ","File  basename split [] ","File  basename split ","File  basename ","table_names map! ","Dir  [] + ","Dir  [] "," fixture_path ","table_names first == ","table_names first ","f [] "," fixture_path size + "," fixture_path size ","fixture_names flatten map ","fixture_names flatten ","fixture_names map! ","fixture_names first == ","fixture_names first ","fixture_set_names flatten map ","fixture_set_names flatten "," fixture_path to_s size + "," fixture_path to_s size "," fixture_path to_s ","fixture_set_names map! ","fixture_set_names first == ","fixture_set_names first "," config ","Dir  [] uniq "," raise "," fixture_path blank? ","f [] delete_prefix ","f start_with? "," file_fixture_path to_s "," file_fixture_path ","fixture_set_names reject! "," File  join ","(send\n  (send nil :fixture_paths) :flat_map) uniq ","path to_s size ","path to_s ","names map! ","names reject! "," fixture_paths flat_map "," fixture_paths "," fixture_paths blank? "," fixture_Dir  [] +  "," fixture_Dir  []  "," fixture_table_Dir  [] uniq  ","Dir  [] +  flatten map ","Dir  []  flatten map ","table_Dir  [] uniq  flatten map ","Dir  [] +  flatten ","Dir  []  flatten ","table_Dir  [] uniq  flatten ","Dir  [] +  map! ","Dir  []  map! ","table_Dir  [] uniq  map! ","Dir  [] +  first == ","Dir  []  first == ","table_Dir  [] uniq  first == ","Dir  [] +  first ","Dir  []  first ","table_Dir  [] uniq  first ","fixture_Dir  [] uniq  flatten map ","fixture_Dir  [] uniq  flatten ","fixture_Dir  [] uniq  map! ","fixture_Dir  [] uniq  first == ","fixture_Dir  [] uniq  first ","fixture_set_names flatten map  flatten map ","Dir  [] uniq  flatten map ","(send\n  (send nil :fixture_paths) :flat_map) uniq  flatten map ","fixture_set_Dir  [] uniq  flatten map ","fixture_set_names flatten map  flatten ","Dir  [] uniq  flatten ","(send\n  (send nil :fixture_paths) :flat_map) uniq  flatten ","fixture_set_Dir  [] uniq  flatten ","fixture_set_names flatten map  map! ","Dir  [] uniq  map! ","(send\n  (send nil :fixture_paths) :flat_map) uniq  map! ","fixture_set_Dir  [] uniq  map! ","fixture_set_names flatten map  first == ","Dir  [] uniq  first == ","(send\n  (send nil :fixture_paths) :flat_map) uniq  first == ","fixture_set_Dir  [] uniq  first == ","fixture_set_names flatten map  first ","Dir  [] uniq  first ","(send\n  (send nil :fixture_paths) :flat_map) uniq  first ","fixture_set_Dir  [] uniq  first ","Dir  []  reject! ","fixture_set_names flatten map  reject! ","Dir  [] uniq  reject! ","(send\n  (send nil :fixture_paths) :flat_map) uniq  reject! ","fixture_set_Dir  [] uniq  reject! "]}," ActiveRecord TestFixtures ClassMethods set_fixture_class":{"type":"method","name":"set_fixture_class","children":[],"call":[" fixture_class_names= "," fixture_class_names merge "," fixture_class_names ","class_names stringify_keys "]}," ActiveRecord TestFixtures included":{"type":"method","name":"included","children":[],"call":[]}," ActiveRecord DynamicScopeMatch scope?":{"type":"method","name":"scope?","children":[],"call":["@scope nil? ! ","@scope nil? "]}," ActiveRecord DynamicScopeMatch initialize":{"type":"method","name":"initialize","children":[],"call":["names split ","method to_s "]}," ActiveRecord DynamicScopeMatch match":{"type":"method","name":"match","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLiteAdapter valid_alter_table_options":{"type":"method","name":"valid_alter_table_options","children":[],"call":["type to_sym != ","type to_sym "]}," ActiveRecord ConnectionAdapters SQLiteAdapter remove_index!":{"type":"method","name":"remove_index!","children":[],"call":[" execute "," quote_column_name "," exec_query "]}," ActiveRecord ConnectionAdapters SQLiteAdapter supports_add_column?":{"type":"method","name":"supports_add_column?","children":[],"call":[" sqlite_version >= "," sqlite_version "]}," ActiveRecord ConnectionAdapters SQLiteAdapter supports_primary_key?":{"type":"method","name":"supports_primary_key?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLiteAdapter supports_ddl_transactions?":{"type":"method","name":"supports_ddl_transactions?","children":[],"call":[" sqlite_version >= "," sqlite_version "]}," ActiveRecord ConnectionAdapters SQLiteAdapter initialize":{"type":"method","name":"initialize","children":[],"call":["StatementPool  new ","config fetch ","Arel Visitors SQLite  new ","BindSubstitution  new "]}," ActiveRecord ConnectionAdapters SQLiteAdapter Version <=>":{"type":"method","name":"<=>","children":[],"call":["@version <=> ","version_string split map ","version_string split ","v to_i "]}," ActiveRecord ConnectionAdapters SQLiteAdapter Version initialize":{"type":"method","name":"initialize","children":[],"call":["version_string split map ","version_string split ","v to_i "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter extract_pg_identifier_from_name":{"type":"method","name":"extract_pg_identifier_from_name","children":[],"call":["rest length > ","rest length ","match_data [] ","rest [] ","rest [] == ","name [] ","match_data [] length ","name match ","name [] == ","rest start_with? ","name length ","name start_with? ","rest []  length > ","name []  length > ","rest []  length ","name []  length ","name match  [] ","rest []  [] ","name []  [] ","rest []  [] == ","name []  [] == ","name match  [] length ","rest []  start_with? ","name []  start_with? "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter index_name_length":{"type":"method","name":"index_name_length","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter remove_index!":{"type":"method","name":"remove_index!","children":[],"call":[" execute "," quote_table_name "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter primary_key":{"type":"method","name":"primary_key","children":[],"call":["pk_and_sequence first "," pk_and_sequence_for ","row first "," exec_query rows first "," exec_query rows "," exec_query "," quote_table_name "," pk_and_sequence_for  first ","  pk_and_sequence_for _for "," exec_query rows first  first "," exec_query  exec_query rows first s first "," exec_query  exec_query rows first s "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter release_savepoint":{"type":"method","name":"release_savepoint","children":[],"call":[" execute "," current_savepoint_name "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter rollback_to_savepoint":{"type":"method","name":"rollback_to_savepoint","children":[],"call":[" execute "," current_savepoint_name "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter create_savepoint":{"type":"method","name":"create_savepoint","children":[],"call":[" execute "," current_savepoint_name "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter outside_transaction?":{"type":"method","name":"outside_transaction?","children":[],"call":["@connection transaction_status == ","@connection transaction_status "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter quote_table_name":{"type":"method","name":"quote_table_name","children":[],"call":[" quote_column_name "," extract_pg_identifier_from_name ","name to_s "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter supports_savepoints?":{"type":"method","name":"supports_savepoints?","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter set_standard_conforming_strings":{"type":"method","name":"set_standard_conforming_strings","children":[],"call":[" client_min_messages= "," execute "," client_min_messages "," internal_execute "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter supports_primary_key?":{"type":"method","name":"supports_primary_key?","children":[],"call":[]}," ActiveRecord ConnectionAdapters TableDefinition xml":{"type":"method","name":"xml","children":[],"call":[" column ","args [] ","args extract_options! "," raise ","(str \"sqlite\") include? ","@base adapter_name downcase ","@base adapter_name ","args extract_args extract_options! ! "]}," ActiveRecord ConnectionAdapters MysqlAdapter quoted_columns_for_index":{"type":"method","name":"quoted_columns_for_index","children":[],"call":[" quote_column_name ","column_names map ","length [] ","options [] ","options is_a? ","options []  [] "]}," ActiveRecord ConnectionAdapters MysqlAdapter primary_key":{"type":"method","name":"primary_key","children":[],"call":["pk_and_sequence first "," pk_and_sequence_for "," pk_and_sequence_for  first ","  pk_and_sequence_for _for "]}," ActiveRecord ConnectionAdapters MysqlAdapter add_column_position!":{"type":"method","name":"add_column_position!","children":[],"call":["sql << "," quote_column_name ","options [] "]}," ActiveRecord ConnectionAdapters MysqlAdapter add_column":{"type":"method","name":"add_column","children":[],"call":[" execute "," add_column_position! "," add_column_options! "," type_to_sql ","options [] "," quote_column_name "," quote_table_name "," add_column_sql "]}," ActiveRecord ConnectionAdapters MysqlAdapter release_savepoint":{"type":"method","name":"release_savepoint","children":[],"call":[" execute "," current_savepoint_name "]}," ActiveRecord ConnectionAdapters MysqlAdapter rollback_to_savepoint":{"type":"method","name":"rollback_to_savepoint","children":[],"call":[" execute "," current_savepoint_name "]}," ActiveRecord ConnectionAdapters MysqlAdapter create_savepoint":{"type":"method","name":"create_savepoint","children":[],"call":[" execute "," current_savepoint_name "]}," ActiveRecord ConnectionAdapters MysqlAdapter supports_savepoints?":{"type":"method","name":"supports_savepoints?","children":[],"call":[]}," ActiveRecord ConnectionAdapters MysqlAdapter supports_primary_key?":{"type":"method","name":"supports_primary_key?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter current_savepoint_name":{"type":"method","name":"current_savepoint_name","children":[],"call":[" open_transactions "," current_transaction savepoint_name "," current_transaction "]}," ActiveRecord ConnectionAdapters AbstractAdapter release_savepoint":{"type":"method","name":"release_savepoint","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter rollback_to_savepoint":{"type":"method","name":"rollback_to_savepoint","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter create_savepoint":{"type":"method","name":"create_savepoint","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter transaction_joinable=":{"type":"method","name":"transaction_joinable=","children":[],"call":["@transaction joinable= ","ActiveSupport Deprecation  warn "]}," ActiveRecord ConnectionAdapters AbstractAdapter supports_savepoints?":{"type":"method","name":"supports_savepoints?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter supports_primary_key?":{"type":"method","name":"supports_primary_key?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SchemaStatements quoted_columns_for_index":{"type":"method","name":"quoted_columns_for_index","children":[],"call":[" quote_column_name ","column_names map "," quote_column_name + ","option_strings [] "," add_index_sort_order "," supports_index_sort_order? ","Hash  [] ","column_names is_a? "," add_options_for_index_columns values "," add_options_for_index_columns "," quote_column_name dup ","name to_sym "," add_options_for_index_columns values join ","result []= ","column_names each_with_object "," add_index_sort_order  [] ","Hash  []  [] "]}," ActiveRecord ConnectionAdapters SchemaStatements index_exists?":{"type":"method","name":"index_exists?","children":[],"call":["i name == ","i name "," indexes detect "," indexes ","index_name to_s "," respond_to? "," indexes any? ","i unique ","options [] "," index_name ","options [] to_s ","options key? ","Array  wrap "," Array ","check [] ","checks all? ","checks << "," lambda ","i columns == ","i columns "," Array map "," Array == ","column_name present? ","column_name nil? ","i defined_for? ","index_name to_s  to_s "," index_name  to_s ","options [] to_s  to_s "," index_name to_s  ","  index_name  "," options [] to_s  ","options []  present? ","options []  nil? "]}," ActiveRecord ConnectionAdapters SchemaStatements rename_index":{"type":"method","name":"rename_index","children":[],"call":[" add_index ","old_index_def unique ","old_index_def columns "," remove_index ","i name == ","i name "," indexes detect "," indexes "," raise "," allowed_index_name_length ","new_name length > ","new_name length "," validate_index_length! ","new_name to_s ","old_name to_s ","new_name to_s  length > ","new_name to_s  length ","new_name to_s  to_s ","old_name to_s  to_s "]}," ActiveRecord ConnectionAdapters SchemaStatements remove_index!":{"type":"method","name":"remove_index!","children":[],"call":[" execute "," quote_column_name "," quote_table_name "]}," ActiveRecord ConnectionAdapters TableDefinition xml_column_fallback":{"type":"method","name":"xml_column_fallback","children":[],"call":[" column ","args [] ","args extract_options! ","@base adapter_name downcase ","@base adapter_name ","args extract_args extract_options! ! "]}," ActiveRecord ConnectionAdapters TableDefinition method_missing":{"type":"method","name":"method_missing","children":[],"call":[" xml_column_fallback ","symbol to_s == ","symbol to_s "]}," ActiveRecord ConnectionAdapters DatabaseStatements outside_transaction?":{"type":"method","name":"outside_transaction?","children":[],"call":[]}," ActiveRecord ConnectionAdapters DatabaseLimits joins_per_query":{"type":"method","name":"joins_per_query","children":[],"call":[]}," ActiveRecord ConnectionAdapters DatabaseLimits sql_query_length":{"type":"method","name":"sql_query_length","children":[],"call":[]}," ActiveRecord ConnectionAdapters DatabaseLimits in_clause_length":{"type":"method","name":"in_clause_length","children":[],"call":[]}," ActiveRecord ConnectionAdapters DatabaseLimits columns_per_multicolumn_index":{"type":"method","name":"columns_per_multicolumn_index","children":[],"call":[]}," ActiveRecord ConnectionAdapters DatabaseLimits indexes_per_table":{"type":"method","name":"indexes_per_table","children":[],"call":[]}," ActiveRecord ConnectionAdapters DatabaseLimits columns_per_table":{"type":"method","name":"columns_per_table","children":[],"call":[]}," ActiveRecord ConnectionAdapters DatabaseLimits index_name_length":{"type":"method","name":"index_name_length","children":[],"call":[" max_identifier_length "]}," ActiveRecord ConnectionAdapters DatabaseLimits table_name_length":{"type":"method","name":"table_name_length","children":[],"call":[" max_identifier_length "]}," ActiveRecord ConnectionAdapters DatabaseLimits column_name_length":{"type":"method","name":"column_name_length","children":[],"call":[" max_identifier_length "]}," ActiveRecord ConnectionAdapters DatabaseLimits table_alias_length":{"type":"method","name":"table_alias_length","children":[],"call":[" max_identifier_length "]}," ActiveRecord ConnectionAdapters ConnectionManagement call":{"type":"method","name":"call","children":[],"call":["ActiveRecord Base  clear_active_connections! ","env key? ","@app call "," raise ","Proxy  new ","response []= "," Rack BodyProxy  new ","response [] ","env [] ","@app call  []= ","@app call  [] "]}," ActiveRecord ConnectionAdapters ConnectionManagement initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Batches ClassMethods batch_order":{"type":"method","name":"batch_order","children":[],"call":[" primary_key "," table_name "]}," ActiveRecord Batches ClassMethods find_in_batches":{"type":"method","name":"find_in_batches","children":[],"call":["proxy find "," primary_key "," table_name "," raise ","last_value present? ","records last id ","records last ","records size < ","records size ","records any? "," scoped ","options merge "," batch_order ","options delete ","options delete to_i ","options [] "," find "," with_scope "," scoped  find ","records last id  present? ","proxy find  last id "," find  last id ","proxy find  last "," find  last ","proxy find  size < "," find  size < ","proxy find  size "," find  size ","proxy find  any? "," find  any? "]}," ActiveRecord Batches ClassMethods find_each":{"type":"method","name":"find_each","children":[],"call":["records each "," find_in_batches "]}," ActiveRecord Batches included":{"type":"method","name":"included","children":[],"call":[]}," ActiveRecord AutosaveAssociation save_belongs_to_association":{"type":"method","name":"save_belongs_to_association","children":[],"call":[" []= ","association class base_class name to_s ","association class base_class name ","association class base_class ","association class ","reflection options [] ","reflection options ","reflection primary_key_name ","association send ","association updated? ","association save ","autosave ! ","association new_record? ","autosave != ","association destroy ","association marked_for_destruction? ","association destroyed? ! ","association destroyed? "," association_instance_get ","reflection name ","association id ","association persisted? ! ","association persisted? ","association loaded! ","reflection foreign_key ","record send ","record save ","record changed_for_autosave? ","record new_record? ","record destroy ","record marked_for_destruction? ","record destroyed? ! ","record destroyed? ","association load_target ","association stale_target? ! ","association stale_target? ","association loaded? ","record public_send "," [] == "," [] ","record _read_attribute ","primary_key_foreign_key_pairs each ","primary_key zip "," Array "," Array map "," compute_primary_key ","foreign_key each "," association_instance_get  class base_class name to_s "," association_instance_get  class base_class name "," association_instance_get  class base_class "," association_instance_get  class ","reflection  Array map _name "," association_instance_get  send "," association_instance_get  updated? "," association_instance_get  save ","reflection options []  ! "," association_instance_get  new_record? ","association new_association load_target ? ","reflection options []  != "," association_instance_get  destroy "," association_instance_get  marked_for_destruction? "," association_instance_get  destroyed? ! "," association_instance_get  destroyed? ","  association_instance_get _instance_get "," association_instance_get  id "," association_instance_get  persisted? ! "," association_instance_get  persisted? "," association_instance_get  loaded! ","reflection  Array  ","association load_target  send ","association load_target  save ","record changed_for_reflection options [] ? ","association load_target  changed_for_autosave? ","association load_target  new_association load_target ? ","association load_target  destroy ","association load_target  marked_for_destruction? ","association load_target  destroyed? ! ","association load_target  destroyed? "," association_instance_get  load_target "," association_instance_get  stale_target? ! "," association_instance_get  stale_target? "," association_instance_get  loaded? ","association load_target  public_send ","association load_target  _read_attribute ","primary_key zip  each ","primary_key_ Array _pairs each "," Array map _foreign_key_pairs each "," Array map  zip "," compute_ Array map  "," Array  each "]}," ActiveRecord AutosaveAssociation save_has_one_association":{"type":"method","name":"save_has_one_association","children":[],"call":[" raise ","saved ! ","association save ","autosave ! ","association []= ","reflection primary_key_name ","association [] != ","association [] ","association new_record? "," new_record? ","autosave != "," id "," send ","reflection options [] ","reflection options ","association destroy ","association marked_for_destruction? ","association destroyed? ! ","association destroyed? ","association target nil? ! ","association target nil? ","association target "," association_instance_get ","reflection name ","association persisted? ! ","association persisted? "," persisted? ! "," persisted? ","record save ","record []= ","reflection foreign_key ","record [] != ","record [] ","record new_record? ","record destroy ","record marked_for_destruction? ","record destroyed? ! ","record destroyed? ","association load_target ","reflection through_reflection "," record_changed? ","record changed_for_autosave? ","record association loaded! ","record association ","inverse_reflection name ","reflection inverse_of ","record association inversed_from "," public_send ","association set_inverse_instance "," _record_changed? "," _read_attribute ","primary_key_foreign_key_pairs each ","primary_key zip "," Array ","primary_key map "," Array map "," compute_primary_key ","association save  ! ","record save  ! "," association_instance_get  save ","reflection options []  ! "," association_instance_get  []= ","reflection primary_ id _name ","reflection primary_ send _name ","reflection primary_ public_send _name ","reflection  Array map _name "," association_instance_get  [] != "," association_instance_get  [] "," association_instance_get  new_record? ","reflection options []  != "," association_instance_get  destroy "," association_instance_get  marked_for_destruction? "," association_instance_get  destroyed? ! "," association_instance_get  destroyed? "," association_instance_get  target nil? ! "," association_instance_get  target nil? "," association_instance_get  target ","  association_instance_get _instance_get "," association_instance_get  persisted? ! "," association_instance_get  persisted? ","reflection foreign_ id  ","reflection foreign_ send  ","reflection foreign_ public_send  ","reflection  Array  "," association_instance_get  load_target ","record changed_for_reflection options [] ? ","record  association_instance_get  loaded! ","record  association_instance_get  ","reflection inverse_of  name ","record  association_instance_get  inversed_from "," association_instance_get  set_inverse_instance ","primary_ id _foreign_ id _pairs each ","primary_ send _foreign_ send _pairs each ","primary_ public_send _foreign_ public_send _pairs each ","primary_key zip  each ","primary_key_ Array _pairs each "," Array map _foreign_key_pairs each ","primary_ id  zip ","primary_ send  zip ","primary_ public_send  zip "," Array map  zip ","primary_ id  map ","primary_ send  map ","primary_ public_send  map "," Array map  map "," compute_primary_ id  "," compute_primary_ send  "," compute_primary_ public_send  "," compute_ Array map  "]}," ActiveRecord AutosaveAssociation save_collection_association":{"type":"method","name":"save_collection_association","children":[],"call":["association send ","association respond_to? "," raise ","saved == ","record save ","record new_record? ","autosave != ","association destroy ","record marked_for_destruction? ","record destroyed? ","records each "," associated_records_to_validate_or_save ","reflection options [] ","reflection options "," association_instance_get ","reflection name ","record persisted? ! ","record persisted? ","IdentityMap  remove ","IdentityMap  enabled? ","association insert_record ","association proxy destroy ","association proxy ","reflection nested? ","records_to_destroy each ","records_to_destroy << ","association reset_scope ","records select ","reflection macro == ","reflection macro "," association_valid? ","reflection validate? ","reflection nested? ! ","records each_with_index "," errors add "," errors ","RecordInvalid  new ","association owner ","association set_inverse_instance "," association_instance_get  send "," association_instance_get  respond_to? ","record save  == ","association send  == ","association insert_record  == ","reflection options []  != "," association_instance_get  destroy "," associated_records_to_validate_or_save  each "," associated_ associated_records_to_validate_or_save _to_validate_or_save "," associated_records_to_ association_valid? ate_or_save ","  association_instance_get _instance_get "," association_instance_get  insert_record "," association_instance_get  proxy destroy "," association_instance_get  proxy "," associated_records_to_validate_or_save _to_destroy each ","records select  each "," associated_records_to_validate_or_save _to_destroy << ","records select  << "," association_instance_get  reset_scope "," associated_records_to_validate_or_save  select ","  association_instance_get _valid? "," association_ association_valid? ? ","reflection  association_valid? ate? "," associated_records_to_validate_or_save  each_with_index ","RecordIn association_valid?   new "," association_instance_get  owner "," association_instance_get  set_inverse_instance "]}," ActiveRecord AutosaveAssociation before_save_collection_association":{"type":"method","name":"before_save_collection_association","children":[],"call":[" new_record? "," persisted? ! "," persisted? "]}," ActiveRecord AutosaveAssociation association_valid?":{"type":"method","name":"association_valid?","children":[],"call":[" errors add ","reflection name "," errors ","error dup "," errors on ","association errors each_error ","association errors ","reflection options [] ","reflection options ","association valid? ","association marked_for_destruction? ","association destroyed? ","association errors each ","error attribute ","error attribute= "," errors [] uniq! "," errors [] "," errors [] << ","record errors each ","record errors ","record valid? ","record marked_for_destruction? ","record destroyed? "," validation_context ","(sym :create) include? "," errors details [] uniq! "," errors details [] "," errors details "," errors details [] << ","record errors details [] each ","record errors details [] ","record errors details ","record errors details each_key ","ActiveRecord Base  index_nested_attribute_errors ","index nil? ! ","index nil? ","ActiveRecord Base  index_nested_attribute_errors ! ","reflection options [] ! "," normalize_reflection_attribute to_sym "," normalize_reflection_attribute "," custom_validation_context? "," errors import ","errors each ","record errors group_by_attribute each ","record errors group_by_attribute ","ActiveRecord  index_nested_attribute_errors "," error dup s add "," error dup s ","error dup  dup "," error dup s on ","association error dup s each_error dup  ","association error dup s ","association association valid? ? ","association record valid? ? ","association error dup s each ","error dup  attribute ","error  normalize_reflection_attribute  ","error dup  attribute= ","error  normalize_reflection_attribute = "," error dup s [] uniq! "," error dup s [] "," error dup s [] << ","record error dup s each ","record error dup s ","record association valid? ? ","record record valid? ? "," association valid? ation_context "," record valid? ation_context ","  validation_context  "," validation_ validation_context  "," error dup s details [] uniq! "," error dup s details [] "," error dup s details "," error dup s details [] << ","record error dup s details [] each ","record error dup s details [] ","record error dup s details ","record error dup s details each_key ","ActiveRecord Base  index_nested_attribute_error dup s ","ActiveRecord Base  index_nested_ normalize_reflection_attribute _errors ","ActiveRecord Base  index_nested_attribute_error dup s ! ","ActiveRecord Base  index_nested_ normalize_reflection_attribute _errors ! "," normalize_ normalize_reflection_attribute to_sym  to_sym "," normalize_reflection_ normalize_reflection_attribute  to_sym "," normalize_ normalize_reflection_attribute to_sym  "," normalize_reflection_ normalize_reflection_attribute  "," custom_association valid? ation_context? "," custom_record valid? ation_context? "," custom_ validation_context ? "," custom_validation_ validation_context ? "," error dup s import ","error dup s each ","record error dup s group_by_attribute each ","record errors group_by_ normalize_reflection_attribute  each ","record error dup s group_by_attribute ","record errors group_by_ normalize_reflection_attribute  ","ActiveRecord  index_nested_attribute_error dup s ","ActiveRecord  index_nested_ normalize_reflection_attribute _errors "]}," ActiveRecord AutosaveAssociation validate_collection_association":{"type":"method","name":"validate_collection_association","children":[],"call":[" association_valid? ","records each "," associated_records_to_validate_or_save ","reflection options [] ","reflection options "," new_record? "," association_instance_get ","reflection name ","reflection options [] != "," persisted? ! "," persisted? ","records each_with_index ","  association_instance_get _valid? "," associated_records_to_validate_or_save  each "," associated_ associated_records_to_validate_or_save _to_validate_or_save ","  association_instance_get _instance_get "," associated_records_to_validate_or_save  each_with_index "]}," ActiveRecord AutosaveAssociation validate_single_association":{"type":"method","name":"validate_single_association","children":[],"call":[" association_valid? ","association target nil? ! ","association target nil? ","association target "," association_instance_get ","reflection name ","reflection options [] == ","reflection options [] ","reflection options ","association reader "," custom_validation_context? ","record changed_for_autosave? ","  association_instance_get _valid? "," association_instance_get  target nil? ! "," association_instance_get  target nil? "," association_instance_get  target ","  association_instance_get _instance_get "," association_instance_get  reader "]}," ActiveRecord AutosaveAssociation nested_records_changed_for_autosave?":{"type":"method","name":"nested_records_changed_for_autosave?","children":[],"call":["record changed_for_autosave? ","association target each ","association target ","association target changed_for_autosave? ","(sym :belongs_to) include? ","reflection macro "," association_instance_get ","reflection name "," class reflect_on_all_autosave_associations each "," class reflect_on_all_autosave_associations "," class ","a changed_for_autosave? ","Array  wrap any? ","Array  wrap "," class reflect_on_all_autosave_associations any? ","reflection options [] ","reflection options "," class _reflections values any? "," class _reflections values "," class _reflections "," association_instance_get  target each "," association_instance_get  target "," association_instance_get  target changed_for_autosave? ","  association_instance_get _instance_get "," class reflect_on_all_autosave_ association_instance_get s each "," class reflect_on_all_autosave_ association_instance_get s "," class reflect_on_all_autosave_ association_instance_get s any? "]}," ActiveRecord AutosaveAssociation associated_records_to_validate_or_save":{"type":"method","name":"associated_records_to_validate_or_save","children":[],"call":["record new_record? ","association target select ","association target ","record changed_for_autosave? ","association select ","association loaded? ","association target find_all ","record marked_for_destruction? ","record changed? ","record persisted? ! ","record persisted? "," custom_validation_context? "]}," ActiveRecord AutosaveAssociation changed_for_autosave?":{"type":"method","name":"changed_for_autosave?","children":[],"call":[" nested_records_changed_for_autosave? "," marked_for_destruction? "," changed? "," new_record? "," persisted? ! "," persisted? "," has_changes_to_save? "]}," ActiveRecord AutosaveAssociation marked_for_destruction?":{"type":"method","name":"marked_for_destruction?","children":[],"call":[]}," ActiveRecord AutosaveAssociation mark_for_destruction":{"type":"method","name":"mark_for_destruction","children":[],"call":[]}," ActiveRecord AutosaveAssociation reload_with_autosave_associations":{"type":"method","name":"reload_with_autosave_associations","children":[],"call":[" reload_without_autosave_associations "]}," ActiveRecord AutosaveAssociation ClassMethods add_autosave_association_callbacks":{"type":"method","name":"add_autosave_association_callbacks","children":[],"call":[" validate "," send "," define_method "," method_defined? ! "," method_defined? ","reflection validate? "," before_save "," save_belongs_to_association "," after_save "," save_has_one_association ","reflection macro == ","reflection macro "," after_update "," after_create "," save_collection_association ","reflection collection? ","reflection name "," validate_single_association "," validate_collection_association ","reflection options [] != ","reflection options [] ","reflection options ","reflection options [] == "," define_non_cyclic_method "," define_autosave_validation_callbacks ","reflection has_one? "," throw "," save_belongs_to_association == "," around_save "," save_reflection collection? _association ","reflection reflection collection? ? "," validate_reflection collection? _association "]}," ActiveRecord AutosaveAssociation included":{"type":"method","name":"included","children":[],"call":[]}," ActiveRecord Associations ClassMethods JoinDependency set_target_and_inverse":{"type":"method","name":"set_target_and_inverse","children":[],"call":["association_proxy __send__ ","record send ","join reflection name ","join reflection ","record send  __send__ "]}," ActiveRecord Associations ClassMethods joined_tables":{"type":"method","name":"joined_tables","children":[],"call":["(send nil :table_name) + "," tables_in_string ","(send\n  (send\n    (lvar :join_dependency) :join_associations) :collect) flatten compact ","(send\n  (send\n    (lvar :join_dependency) :join_associations) :collect) flatten ","join_association aliased_table_name ","join_association aliased_join_table_name ","join_dependency join_associations collect ","join_dependency join_associations ","ActiveRecord Associations ClassMethods InnerJoinDependency  new ","merged_joins join "," array_of_strings? "," table_name ","scope [] "," merge_joins ","options [] "," scope ","(send\n  (send\n    (lvar :ActiveRecord Associations ClassMethods InnerJoinDependency  new ) :join_associations) :collect) flatten compact ","(send\n  (send\n    (lvar :ActiveRecord Associations ClassMethods InnerJoinDependency  new ) :join_associations) :collect) flatten ","ActiveRecord Associations ClassMethods InnerJoinDependency  new  join_associations collect ","ActiveRecord Associations ClassMethods InnerJoinDependency  new  join_associations "," merge_joins  join ","merged_options []  join "," scope  [] "," merge_options []  ","  scope  "]}," ActiveRecord Associations ClassMethods tables_in_hash":{"type":"method","name":"tables_in_hash","children":[],"call":["tables flatten compact ","tables flatten "," tables_in_string ","key is_a? ","key to_s ","value is_a? ","hash map ","hash blank? "]}," ActiveRecord Associations ClassMethods tables_in_string":{"type":"method","name":"tables_in_string","children":[],"call":["string scan flatten ","string scan ","string blank? "]}," ActiveRecord Associations ClassMethods add_touch_callbacks":{"type":"method","name":"add_touch_callbacks","children":[],"call":[" after_destroy "," after_save ","association touch ","association nil? ","touch_attribute == "," send ","reflection name "," define_method ","(str \"belongs_to_touch_after_save_or_destroy_for_\") to_sym "," after_touch "," redefine_method "," send  touch "," send  nil? "]}," ActiveRecord Associations ClassMethods add_counter_cache_callbacks":{"type":"method","name":"add_counter_cache_callbacks","children":[],"call":[" module_eval ","reflection class_name "," before_destroy ","association class decrement_counter ","association id ","association class ","association nil? "," send ","reflection name "," define_method ","(str \"belongs_to_counter_cache_before_destroy_for_\") to_sym "," after_create ","association class increment_counter ","(str \"belongs_to_counter_cache_after_create_for_\") to_sym ","reflection counter_cache_column "," send  class decrement_counter "," send  id "," send  class "," send  nil? "," send  class increment_counter ","reflection counter_reflection counter_cache_column  "]}," ActiveRecord Associations association_instance_set":{"type":"method","name":"association_instance_set","children":[],"call":[" instance_variable_set ","@association_cache []= "]}," ActiveRecord Associations association_instance_get":{"type":"method","name":"association_instance_get","children":[],"call":["association respond_to? "," instance_variable_get "," instance_variable_defined? ","@association_cache [] ","name to_sym "," instance_variable_get  respond_to? ","@ instance_variable_get _cache [] "]}," ActiveRecord HasAndBelongsToManyAssociationForeignKeyNeeded initialize":{"type":"method","name":"initialize","children":[],"call":["reflection name ","reflection class_name "]}," ActiveRecord HasManyThroughCantAssociateThroughHasOneOrManyReflection initialize":{"type":"method","name":"initialize","children":[],"call":["reflection source_reflection macro ","reflection source_reflection ","reflection through_reflection class_name ","reflection through_reflection ","reflection source_reflection class_name ","reflection name ","owner class name ","owner class "]}," ActiveRecord InverseOfAssociationNotFoundError initialize":{"type":"method","name":"initialize","children":[],"call":["associated_class name ","reflection class_name ","associated_class nil? ","reflection options [] inspect ","reflection options [] ","reflection options ","reflection name ","reflection klass "]}," ActiveRecord Associations HasOneAssociation we_can_set_the_inverse_on_this?":{"type":"method","name":"we_can_set_the_inverse_on_this?","children":[],"call":["inverse nil? ! ","inverse nil? ","@reflection inverse_of ","@reflection inverse_of  nil? ! ","@reflection inverse_of  nil? ","@reflection @reflection inverse_of _of "]}," ActiveRecord Associations HasOneAssociation merge_with_conditions":{"type":"method","name":"merge_with_conditions","children":[],"call":["attrs update ","@reflection options [] ","@reflection options ","@reflection options [] is_a? "]}," ActiveRecord Associations HasManyThroughAssociation we_can_set_the_inverse_on_this?":{"type":"method","name":"we_can_set_the_inverse_on_this?","children":[],"call":[]}," ActiveRecord Associations HasManyAssociation we_can_set_the_inverse_on_this?":{"type":"method","name":"we_can_set_the_inverse_on_this?","children":[],"call":["inverse nil? ! ","inverse nil? ","@reflection inverse_of ","@reflection inverse_of  nil? ! ","@reflection inverse_of  nil? ","@reflection @reflection inverse_of _of "]}," ActiveRecord Associations HasAndBelongsToManyAssociation has_primary_key?":{"type":"method","name":"has_primary_key?","children":[],"call":["@owner connection primary_key ","@reflection options [] ","@reflection options ","@owner connection ","@owner connection supports_primary_key? ","@has_primary_key nil? ","ActiveRecord Base  connection primary_key ","ActiveRecord Base  connection ","ActiveRecord Base  connection supports_primary_key? "]}," ActiveRecord Associations BelongsToPolymorphicAssociation record_id":{"type":"method","name":"record_id","children":[],"call":["record send ","@reflection options [] ","@reflection options "]}," ActiveRecord Associations BelongsToPolymorphicAssociation set_inverse_instance":{"type":"method","name":"set_inverse_instance","children":[],"call":["record send ","inverse_relationship name ","inverse_relationship nil? ","@reflection polymorphic_inverse_of ","record class "," we_can_set_the_inverse_on_this? ! "," we_can_set_the_inverse_on_this? ","record nil? ","@reflection polymorphic_inverse_of  name ","@reflection polymorphic_inverse_of  nil? "]}," ActiveRecord Associations BelongsToPolymorphicAssociation we_can_set_the_inverse_on_this?":{"type":"method","name":"we_can_set_the_inverse_on_this?","children":[],"call":["inverse_association macro == ","inverse_association macro ","@reflection polymorphic_inverse_of ","record class ","@reflection has_inverse? ","@reflection polymorphic_inverse_of  macro == ","@reflection polymorphic_inverse_of  macro "]}," ActiveRecord Associations BelongsToAssociation we_can_set_the_inverse_on_this?":{"type":"method","name":"we_can_set_the_inverse_on_this?","children":[],"call":["@reflection inverse_of macro == ","@reflection inverse_of macro ","@reflection inverse_of ","@reflection has_inverse? "]}," ActiveRecord Associations BelongsToAssociation previous_record_id":{"type":"method","name":"previous_record_id","children":[],"call":["@owner [] ","@reflection primary_key_name ","previous_record id ","previous_record nil? ","@owner send ","@reflection name ","@reflection options [] ","@reflection options ","@owner send  id ","@owner send  nil? "]}," ActiveRecord Associations BelongsToAssociation record_id":{"type":"method","name":"record_id","children":[],"call":["record send ","@reflection options [] ","@reflection options "]}," ActiveRecord Associations AssociationProxy we_can_set_the_inverse_on_this?":{"type":"method","name":"we_can_set_the_inverse_on_this?","children":[],"call":[]}," ActiveRecord Associations AssociationProxy set_inverse_instance":{"type":"method","name":"set_inverse_instance","children":[],"call":["record send ","inverse_relationship name ","inverse_relationship nil? ","@reflection inverse_of "," we_can_set_the_inverse_on_this? ! "," we_can_set_the_inverse_on_this? ","record nil? ","@reflection inverse_of  name ","@reflection inverse_of  nil? "]}," ActiveRecord Associations AssociationCollection include_in_memory?":{"type":"method","name":"include_in_memory?","children":[],"call":["@target include? ","source_reflection_target == ","source_reflection_target include? ","source_reflection_target respond_to? ","source send "," proxy_reflection source_reflection name "," proxy_reflection source_reflection "," proxy_reflection ","@owner send each ","@owner send "," proxy_reflection through_reflection name to_sym "," proxy_reflection through_reflection name "," proxy_reflection through_reflection ","@reflection is_a? ","target == ","target include? ","target respond_to? ","@owner send any? ","@owner send map ","@source send  include? ","source send  == ","source_reflection_source send  == ","source send  include? ","source_reflection_source send  include? ","source send  respond_to? ","source_reflection_source send  respond_to? "]}," ActiveRecord Associations AssociationCollection remove_records":{"type":"method","name":"remove_records","children":[],"call":[" callback ","records each ","r new_record? ","records reject "," transaction "," raise_on_type_mismatch "," flatten_deeper ","r persisted? ","records select "," flatten_deeper  each "," flatten_deeper  reject "," flatten_deeper  select "]}," ActiveRecord Associations AssociationCollection destroy":{"type":"method","name":"destroy","children":[],"call":[" load_target ","record destroy ","old_records each "," remove_records "," find ","record kind_of? ","records any? ","old_ find  each "," remove_ find  "," find  any? "]}," ActiveRecord Associations AssociationCollection pull_finder_args_from":{"type":"method","name":"pull_finder_args_from","children":[],"call":["attribute_hash [] ","attributes collect ","attribute_hash with_indifferent_access ","attribute_hash []= ","attributes [] ","attribute_hash merge! ","arg is_a? ","args each_with_index ","name intern ","names collect ","attribute_hash with_indifferent_access  [] ","attribute_hash with_indifferent_access  with_indifferent_access ","attribute_hash with_indifferent_access  []= ","attribute_hash with_indifferent_access  merge! "]}," ActiveRecord AttributeMethods ClassMethods define_write_method_for_serialized_attribute":{"type":"method","name":"define_write_method_for_serialized_attribute","children":[],"call":[" evaluate_attribute_method "]}," ActiveRecord NestedAttributes has_delete_flag?":{"type":"method","name":"has_delete_flag?","children":[],"call":["ConnectionAdapters Column  value_to_boolean ","hash [] "]}," ActiveRecord NestedAttributes _delete":{"type":"method","name":"_delete","children":[],"call":[" marked_for_destruction? "," _destroy ","ActiveSupport Deprecation  warn "]}," ActiveRecord Generators Base next_migration_number":{"type":"method","name":"next_migration_number","children":[],"call":[]}," ActiveRecord Generators Base base_root":{"type":"method","name":"base_root","children":[],"call":[]}," ActiveRecord Generators SessionMigrationGenerator session_table_name":{"type":"method","name":"session_table_name","children":[],"call":["session pluralize ","ActiveRecord Base  pluralize_table_names ","(str \"sessions\") include? ","ActiveRecord SessionStore Session  table_name ","current_table_name in? ","ActiveRecord SessionStore Session  table_name  in? "]}," ActiveRecord Generators SessionMigrationGenerator create_migration_file":{"type":"method","name":"create_migration_file","children":[],"call":[" migration_template "," file_name "]}," ActiveRecord Generators ObserverGenerator create_observer_file":{"type":"method","name":"create_observer_file","children":[],"call":[" template ","File  join "," file_name "," class_path "]}," ActiveRecord Generators ModelGenerator parent_class_name":{"type":"method","name":"parent_class_name","children":[],"call":[" options [] "," options "," determine_default_parent_class "," abstract_class_name "," database "," parent "," custom_parent? "]}," ActiveRecord Generators ModelGenerator create_module_file":{"type":"method","name":"create_module_file","children":[],"call":[" template ","File  join "," class_path join "," class_path "," behavior == "," behavior "," class_path empty? "," regular_class_path empty? "," regular_class_path "," generate_application_record "]}," ActiveRecord Generators ModelGenerator create_model_file":{"type":"method","name":"create_model_file","children":[],"call":[" template ","File  join "," file_name "," class_path "," generate_application_record "," generate_abstract_class "," parent ! "," parent "," database "," custom_parent? ! "," custom_parent? "]}," ActiveRecord Generators ModelGenerator create_migration_file":{"type":"method","name":"create_migration_file","children":[],"call":[" migration_template "," table_name "," options [] nil? "," options [] "," options ","a attr_options delete ","a attr_options ","a has_index? ! ","a has_index? ","a reference? "," attributes each "," attributes "," options [] == ","File  join "," db_migrate_path "," skip_migration_creation? "]}," ActiveRecord Generators MigrationGenerator set_local_assigns!":{"type":"method","name":"set_local_assigns!","children":[],"call":["2 pluralize "," file_name =~ "," file_name ","1 pluralize "," set_index_names "," attributes map "," attributes "," attributes length == "," attributes length "," normalize_table_name "," pluralize_table_names? "]}," ActiveRecord Generators MigrationGenerator create_migration_file":{"type":"method","name":"create_migration_file","children":[],"call":[" migration_template "," file_name "," set_local_assigns! "," validate_file_name! ","File  join "," db_migrate_path "]}," ActiveRecord Validations perform_validations":{"type":"method","name":"perform_validations","children":[],"call":[" valid? ","options [] ","options is_a? ","ActiveSupport Deprecation  warn "," caller ","options [] != ","options [] == "]}," ActiveRecord Validations save":{"type":"method","name":"save","children":[],"call":[" perform_validations "]}," ActiveRecord Validations UniquenessValidator mount_sql_and_params":{"type":"method","name":"mount_sql_and_params","children":[],"call":["column text? ! ","column text? "," options [] "," options ","value nil? ","klass connection quote_column_name ","klass connection ","klass connection case_sensitive_equality_operator ","value to_s ","value to_s mb_chars [] ","column limit ","value to_s mb_chars ","klass columns_hash [] ","attribute to_s ","klass columns_hash ","value mb_chars downcase ","value mb_chars ","klass columns_hash []  text? ! ","klass columns_hash []  text? ","value to_s  nil? ","value to_s mb_chars []  nil? ","klass connection quote_klass columns_hash [] _name ","value to_s  to_s ","value to_s mb_chars []  to_s ","value to_s  to_s mb_chars [] ","value to_s mb_chars []  to_s mb_chars [] ","klass columns_hash []  limit ","value to_s  to_s mb_chars ","value to_s mb_chars []  to_s mb_chars ","klass klass columns_hash [] s_hash [] ","klass klass columns_hash [] s_hash ","value to_s  mb_chars downcase ","value to_s mb_chars []  mb_chars downcase ","value to_s  mb_chars ","value to_s mb_chars []  mb_chars "]}," ActiveRecord Validations UniquenessValidator find_finder_class_for":{"type":"method","name":"find_finder_class_for","children":[],"call":["klass abstract_class? ! ","klass abstract_class? ","class_hierarchy detect ","class_hierarchy insert ","class_hierarchy first superclass ","class_hierarchy first ","class_hierarchy first != ","record class ","class_hierarchy unshift "]}," ActiveRecord Validations UniquenessValidator validate_each":{"type":"method","name":"validate_each","children":[],"call":["record errors add "," options except merge "," options except "," options ","record errors ","relation exists? ","relation where ","record send ","record class primary_key ","record class ","record class quoted_table_name ","record new_record? ","Array  wrap each ","Array  wrap "," options [] ","table where "," mount_sql_and_params ","finder_class unscoped "," find_finder_class_for "," Array each "," Array ","YAML  dump ","record class serialized_attributes key? ","attribute to_s ","record class serialized_attributes ","record persisted? ","finder_class unscoped where exists? ","finder_class unscoped where ","relation and ","table [] eq ","table [] ","table [] not_eq ","finder_class primary_key to_sym ","finder_class primary_key "," build_relation ","coder dump ","record class serialized_attributes [] ","finder_class arel_table ","record read_attribute ","error_options []= ","relation merge "," scope_relation ","record id "," deserialize_attribute ","relation merge! "," map_enum_attribute ","finder_class none "," raise ","UnknownPrimaryKey  new ","relation where not ","record id_was ","finder_class primary_key to_s != ","finder_class primary_key to_s "," should_validate? ","record id_in_database ","relation instance_exec ","conditions arity zero? ","conditions arity "," validation_needed? ! "," validation_needed? ","relation where  exists? ","table where  exists? ","relation and  exists? "," build_relation  exists? ","relation merge  exists? ","finder_class unscoped where  exists? "," scope_relation  exists? ","finder_class none  exists? ","relation where not  exists? ","relation instance_exec  exists? ","relation where  where ","table where  where ","relation and  where "," build_relation  where ","relation merge  where ","finder_class unscoped where  where "," scope_relation  where ","finder_class none  where ","relation where not  where ","relation instance_exec  where ","record class quoted_record class quoted_table_name  ","record class quoted_finder_class unscoped _name ","record class quoted_finder_class arel_table _name ","finder_class unscoped  where ","finder_class arel_table  where "," find_finder_class_for  unscoped "," find_ find_finder_class_for _for "," find_finder_class_for  unscoped where exists? "," find_finder_class_for  unscoped where ","relation where  and ","table where  and ","relation and  and "," build_relation  and ","relation merge  and ","finder_class unscoped where  and "," scope_relation  and ","finder_class none  and ","relation where not  and ","relation instance_exec  and ","finder_class unscoped  [] eq ","finder_class arel_table  [] eq ","finder_class unscoped  [] ","finder_class arel_table  [] ","finder_class unscoped  [] not_eq ","finder_class arel_table  [] not_eq "," find_finder_class_for  primary_key to_sym "," find_finder_class_for  primary_key "," build_relation where  "," build_table where  "," build_relation and  "," build_ build_relation  "," build_relation merge  "," build_finder_class unscoped where  "," build_ scope_relation  "," build_finder_class none  "," build_relation where not  "," build_relation instance_exec  ","record class serialized_attributes []  dump ","finder_class arel_finder_class unscoped  ","finder_class arel_finder_class arel_table  "," find_finder_class_for  arel_table "," options except  []= ","relation where  merge ","table where  merge ","relation and  merge "," build_relation  merge ","relation merge  merge ","finder_class unscoped where  merge "," scope_relation  merge ","finder_class none  merge ","relation where not  merge ","relation instance_exec  merge "," scope_relation where  "," scope_table where  "," scope_relation and  "," scope_ build_relation  "," scope_relation merge  "," scope_finder_class unscoped where  "," scope_ scope_relation  "," scope_finder_class none  "," scope_relation where not  "," scope_relation instance_exec  ","relation where  merge! ","table where  merge! ","relation and  merge! "," build_relation  merge! ","relation merge  merge! ","finder_class unscoped where  merge! "," scope_relation  merge! ","finder_class none  merge! ","relation where not  merge! ","relation instance_exec  merge! "," find_finder_class_for  none ","relation where  where not ","table where  where not ","relation and  where not "," build_relation  where not ","relation merge  where not ","finder_class unscoped where  where not "," scope_relation  where not ","finder_class none  where not ","relation where not  where not ","relation instance_exec  where not "," find_finder_class_for  primary_key to_s != "," find_finder_class_for  primary_key to_s ","relation where  instance_exec ","table where  instance_exec ","relation and  instance_exec "," build_relation  instance_exec ","relation merge  instance_exec ","finder_class unscoped where  instance_exec "," scope_relation  instance_exec ","finder_class none  instance_exec ","relation where not  instance_exec ","relation instance_exec  instance_exec "," options []  arity zero? "," options []  arity "]}," ActiveRecord Validations UniquenessValidator setup":{"type":"method","name":"setup","children":[],"call":[]}," ActiveRecord Validations UniquenessValidator initialize":{"type":"method","name":"initialize","children":[],"call":["options reverse_merge ","(pair\n  (sym :case_sensitive)\n  (true)) merge! "," raise ","options [] ","options [] respond_to? ! ","options [] respond_to? ","scope respond_to? "," Array all? "," Array "]}," ActiveRecord Validations AssociatedValidator validate_each":{"type":"method","name":"validate_each","children":[],"call":["record errors add "," options merge "," options ","record errors ","(send\n  (begin\n    (if\n      (send\n        (lvar :value) :is_a?\n        (const nil :Array))\n      (lvar :value)\n      (array\n        (lvar :value)))) :collect) all? ","r valid? ","r nil? ","(if\n  (send\n    (lvar :value) :is_a?\n    (const nil :Array))\n  (lvar :value)\n  (array\n    (lvar :value))) collect ","value is_a? "," options [] ","(send\n  (send\n    (const nil :Array) :wrap\n    (lvar :value)) :reject) any? ","r marked_for_destruction? ","Array  wrap reject ","Array  wrap ","record validation_context ","(send\n  (send nil :Array\n    (lvar :value)) :reject) any? "," valid_object? "," Array reject "," Array "]}," ActiveRecord Transactions transaction_include_action?":{"type":"method","name":"transaction_include_action?","children":[],"call":["(or\n  (send nil :transaction_record_state\n    (sym :new_record))\n  (send nil :destroyed?)) ! "," destroyed? "," transaction_record_state ","(or\n  (or\n    (send nil :transaction_record_state\n      (sym :new_record))\n    (send\n      (send nil :transaction_record_state\n        (sym :persisted)) :!))\n  (send nil :destroyed?)) ! "," transaction_record_state ! "]}," ActiveRecord Transactions transaction_record_state":{"type":"method","name":"transaction_record_state","children":[],"call":["@_start_transaction_state [] "]}," ActiveRecord Transactions restore_transaction_record_state":{"type":"method","name":"restore_transaction_record_state","children":[],"call":["@attributes_cache delete "," class primary_key "," class ","@attributes delete "," id= ","restore_state [] ","@attributes dup ","@attributes frozen? "," remove_instance_variable ","@_start_transaction_state [] < ","@_start_transaction_state [] ","@_start_transaction_state []= ","(or\n  (send\n    (ivar :@_start_transaction_state) :[]\n    (sym :level))\n  (int 0)) - ","restore_state has_key? ","@attributes freeze ","@_start_transaction_state clear ","@_start_transaction_state empty? "," write_attribute ","transaction_level < "," thaw "," freeze "," read_attribute != "," read_attribute "," _write_attribute "," _read_attribute != "," _read_attribute ","@attributes write_from_user ","@attributes fetch_value != ","@attributes fetch_value ","attr with_value_from_user ","attr value != ","attr value ","attr name ","restore_state [] map ","restore_state [] <= ","@primary_key zip each ","@primary_key zip ","restore_state [] != ","@primary_key map "," class composite_primary_key? ","@attributes dup _cache delete ","@attr with_value_from_user ibutes_cache delete ","@attributes dup  delete ","@attr with_value_from_user ibutes delete "," remove_instance_variable  [] ","@attributes dup  dup ","@attr with_value_from_user ibutes dup ","@attributes dup  frozen? ","@attr with_value_from_user ibutes frozen? "," remove_instance_variable  has_key? ","@attributes dup  freeze ","@attr with_value_from_user ibutes freeze "," write_attr with_value_from_user ibute ","(or\n  (send\n    (ivar :@_start_transaction_state) :[]\n    (sym :level))\n  (int 0)) -  < "," read_attr with_value_from_user ibute != "," read_attr with_value_from_user ibute "," _write_attr with_value_from_user ibute "," _read_attr with_value_from_user ibute != "," _read_attr with_value_from_user ibute ","@attributes dup  write_from_user ","@attr with_value_from_user ibutes write_from_user ","@attributes dup  fetch_value != ","@attr with_value_from_user ibutes fetch_value != ","@attributes fetch_@attributes fetch_value  != ","@attributes dup  fetch_value ","@attr with_value_from_user ibutes fetch_value ","@attributes fetch_@attributes fetch_value  ","attr with_value_from_user  with_value_from_user ","attr with_@attributes fetch_value _from_user ","attr with_value_from_user  value != ","attr @attributes fetch_value  != ","attr with_value_from_user  value ","attr @attributes fetch_value  ","attr with_value_from_user  name "," remove_instance_variable  [] map "," remove_instance_variable  [] <= "," remove_instance_variable  [] != "]}," ActiveRecord Transactions clear_transaction_record_state":{"type":"method","name":"clear_transaction_record_state","children":[],"call":[" remove_instance_variable ","@_start_transaction_state [] < ","@_start_transaction_state [] ","@_start_transaction_state []= ","(or\n  (send\n    (ivar :@_start_transaction_state) :[]\n    (sym :level))\n  (int 0)) - ","@_start_transaction_state clear "," force_clear_transaction_record_state "]}," ActiveRecord Transactions remember_transaction_record_state":{"type":"method","name":"remember_transaction_record_state","children":[],"call":["@_start_transaction_state []= ","(or\n  (send\n    (ivar :@_start_transaction_state) :[]\n    (sym :level))\n  (int 0)) + ","@_start_transaction_state [] ","@_start_transaction_state include? "," id "," has_attribute? "," class primary_key "," class ","@attributes frozen? "," frozen? ","@_start_transaction_state reverse_merge! "," remember_new_record_before_last_commit "," _committed_already_called "]}," ActiveRecord Transactions add_to_transaction":{"type":"method","name":"add_to_transaction","children":[],"call":[" remember_transaction_record_state "," class connection add_transaction_record "," class connection "," class "," set_transaction_state "," class connection transaction_state "," sync_with_transaction_state "," has_transactional_callbacks? "]}," ActiveRecord Transactions rolledback!":{"type":"method","name":"rolledback!","children":[],"call":[" restore_transaction_record_state "," _run_rollback_callbacks ","IdentityMap  remove ","IdentityMap  enabled? "," run_callbacks "," clear_transaction_record_state "," _run_rollback_without_transaction_enrollment_callbacks "]}," ActiveRecord Transactions committed!":{"type":"method","name":"committed!","children":[],"call":[" clear_transaction_record_state "," _run_commit_callbacks "," run_callbacks "," persisted? "," destroyed? ","@_start_transaction_state clear "," force_clear_transaction_record_state "," _run_commit_without_transaction_enrollment_callbacks "]}," ActiveRecord Transactions save!":{"type":"method","name":"save!","children":[],"call":[" with_transaction_returning_status "]}," ActiveRecord Transactions save":{"type":"method","name":"save","children":[],"call":[" with_transaction_returning_status "," rollback_active_record_state! "]}," ActiveRecord Transactions destroy":{"type":"method","name":"destroy","children":[],"call":[" with_transaction_returning_status "]}," ActiveRecord Transactions ClassMethods after_rollback":{"type":"method","name":"after_rollback","children":[],"call":[" set_callback ","options [] << ","options [] ","options []= ","Array  wrap ","options is_a? ","args last "," set_options_for_callbacks! ","ActiveSupport Deprecation  warn ","ActiveRecord Base  raise_in_transactional_callbacks "," prepend_option ","args last  [] << ","args last  [] ","args last  []= ","args last  is_a? "," set_args last _for_callbacks! "]}," ActiveRecord Transactions ClassMethods after_commit":{"type":"method","name":"after_commit","children":[],"call":[" set_callback ","options [] << ","options [] ","options []= ","Array  wrap ","options is_a? ","args last "," set_options_for_callbacks! ","ActiveSupport Deprecation  warn ","ActiveRecord Base  raise_in_transactional_callbacks "," prepend_option ","args last  [] << ","args last  [] ","args last  []= ","args last  is_a? "," set_args last _for_callbacks! "]}," ActiveRecord Timestamp all_timestamp_attributes":{"type":"method","name":"all_timestamp_attributes","children":[],"call":[" timestamp_attributes_for_create + "," timestamp_attributes_for_update "," timestamp_attributes_for_create "," timestamp_attributes_for_update + "]}," ActiveRecord Timestamp timestamp_attributes_for_create":{"type":"method","name":"timestamp_attributes_for_create","children":[],"call":[]}," ActiveRecord Timestamp timestamp_attributes_for_update":{"type":"method","name":"timestamp_attributes_for_update","children":[],"call":[]}," ActiveRecord Timestamp timestamp_attributes_for_update_in_model":{"type":"method","name":"timestamp_attributes_for_update_in_model","children":[],"call":[" respond_to? "," timestamp_attributes_for_update select "," timestamp_attributes_for_update "," class column_names include? ","c to_s "," class column_names "," class "," class send "," column_names include? "," column_names "," class timestamp_attributes_for_update_in_model "]}," ActiveRecord Timestamp should_record_timestamps?":{"type":"method","name":"should_record_timestamps?","children":[],"call":[" changed? "," partial_updates? ! "," partial_updates? "," record_timestamps ","(send\n  (send\n    (send nil :attributes) :keys) :&\n  (send\n    (send\n      (send\n        (self) :class) :serialized_attributes) :keys)) present? "," attributes keys & "," class serialized_attributes keys "," class serialized_attributes "," class "," attributes keys "," attributes "," partial_writes? ! "," partial_writes? "," has_changes_to_save? "]}," ActiveRecord Timestamp update":{"type":"method","name":"update","children":[],"call":[" write_attribute "," attribute_changed? ","column to_s "," timestamp_attributes_for_update_in_model each "," timestamp_attributes_for_update_in_model "," current_time_from_proper_timezone "," should_record_timestamps? "," respond_to? "," changed? "," partial_updates? ! "," partial_updates? "," record_timestamps "," record_update_timestamps ","column to_s  to_s ","  current_time_from_proper_timezone _from_proper_timezone "]}," ActiveRecord Timestamp create":{"type":"method","name":"create","children":[],"call":[" write_attribute ","column to_s "," send nil? "," send "," respond_to? "," all_timestamp_attributes each "," all_timestamp_attributes "," current_time_from_proper_timezone "," record_timestamps "," updated_on nil? "," updated_on "," updated_at nil? "," updated_at "," created_on nil? "," created_on "," created_at nil? "," created_at "," timestamp_attributes_for_update_in_model each "," timestamp_attributes_for_update_in_model "," timestamp_attributes_for_create each "," timestamp_attributes_for_create ","  current_time_from_proper_timezone _from_proper_timezone "]}," ActiveRecord SessionStore Session initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord SessionStore Session session_id_column":{"type":"method","name":"session_id_column","children":[],"call":[]}," ActiveRecord SessionStore ClassMethods create_table!":{"type":"method","name":"create_table!","children":[],"call":[" connection add_index "," session_id_column "," table_name "," connection ","t text "," data_column_name ","t string "," connection create_table "," connection execute "," connection quote_column_name "," connection type_to_sql "," connection_pool clear_table_cache! "," connection_pool "," connection schema_cache clear_table_cache! "," connection schema_cache "]}," ActiveRecord SessionStore ClassMethods drop_table!":{"type":"method","name":"drop_table!","children":[],"call":[" connection drop_table "," table_name "," connection "," connection execute "," connection_pool clear_table_cache! "," connection_pool "," connection schema_cache clear_table_cache! "," connection schema_cache "]}," ActiveRecord SessionStore ClassMethods unmarshal":{"type":"method","name":"unmarshal","children":[],"call":["Marshal  load ","ActiveSupport Base64  decode64 "," Base64  decode64 "]}," ActiveRecord SessionStore ClassMethods marshal":{"type":"method","name":"marshal","children":[],"call":["ActiveSupport Base64  encode64 ","Marshal  dump "," Base64  encode64 "]}," ActiveRecord XmlSerializer add_extra_behavior":{"type":"method","name":"add_extra_behavior","children":[],"call":[" add_includes "]}," ActiveRecord Serialization serializable_add_includes":{"type":"method","name":"serializable_add_includes","children":[],"call":["options []= ","options merge ","include_associations [] ","records nil? "," send "," send to_a "," class reflect_on_association macro "," class reflect_on_association "," class ","Array  wrap ","include_associations keys ","include_associations is_a? ","options [] ","options delete ","associations each ","include_Array  wrap  [] ","include_include_associations keys  [] ","options delete  [] ","include_Array  wrap  keys ","include_include_associations keys  keys ","options delete  keys ","include_Array  wrap  is_a? ","include_include_associations keys  is_a? ","options delete  is_a? ","Array  wrap  each ","include_associations keys  each "]}," ActiveRecord Serialization serializable_hash":{"type":"method","name":"serializable_hash","children":[],"call":["hash []= ","records serializable_hash ","r serializable_hash ","records map ","records is_a? "," serializable_add_includes ","Array  wrap "," class inheritance_column "," class ","options [] ","options []= ","n to_s ","Array  wrap map ","options try "," Array "," Array map ","options dup "," class _has_attribute? ","options dup  [] ","options dup  []= ","options dup  try ","options dup  dup "]}," ActiveRecord Relation tables_in_string":{"type":"method","name":"tables_in_string","children":[],"call":["(send\n  (send\n    (send\n      (lvar :string) :scan\n      (regexp\n        (str \"([a-zA-Z_][\\\\.\\\\w]+).?\\\\.\")\n        (regopt))) :flatten) :map) uniq - ","(send\n  (send\n    (send\n      (lvar :string) :scan\n      (regexp\n        (str \"([a-zA-Z_][\\\\.\\\\w]+).?\\\\.\")\n        (regopt))) :flatten) :map) uniq ","s downcase ","string scan flatten map ","string scan flatten ","string scan ","string blank? ","string scan flatten uniq ","string scan flatten map uniq - ","string scan flatten map uniq ","(send\n  (send\n    (send\n      (lvar :string) :scan\n      (regexp\n        (str \"([a-zA-Z_][.\\\\w]+).?\\\\.\")\n        (regopt))) :flatten) :map) uniq - ","(send\n  (send\n    (send\n      (lvar :string) :scan\n      (regexp\n        (str \"([a-zA-Z_][.\\\\w]+).?\\\\.\")\n        (regopt))) :flatten) :map) uniq ","string scan map! - ","string scan map! "]}," ActiveRecord Relation references_eager_loaded_tables?":{"type":"method","name":"references_eager_loaded_tables?","children":[],"call":["(send\n  (send nil :tables_in_string\n    (send nil :to_sql)) :-\n  (lvar :joined_tables)) any? "," tables_in_string - "," tables_in_string "," to_sql ","(send\n  (send\n    (begin\n      (send\n        (send nil :tables_in_string\n          (send\n            (send nil :arel) :joins\n            (send nil :arel))) :+\n        (array\n          (send\n            (send nil :table) :name)\n          (send\n            (send nil :table) :table_alias)))) :compact) :map) uniq ","t downcase ","(send\n  (send nil :tables_in_string\n    (send\n      (send nil :arel) :joins\n      (send nil :arel))) :+\n  (array\n    (send\n      (send nil :table) :name)\n    (send\n      (send nil :table) :table_alias))) compact map ","(send\n  (send nil :tables_in_string\n    (send\n      (send nil :arel) :joins\n      (send nil :arel))) :+\n  (array\n    (send\n      (send nil :table) :name)\n    (send\n      (send nil :table) :table_alias))) compact "," tables_in_string + "," table table_alias "," table "," table name "," arel joins "," arel ","(send\n  (send nil :tables_in_string\n    (send\n      (send nil :arel) :joins\n      (send nil :arel))) :+\n  (array\n    (send\n      (send nil :table) :name)\n    (send\n      (send nil :table) :table_alias))) compact uniq ","(send\n  (send nil :tables_in_string\n    (send\n      (send nil :arel) :joins\n      (send nil :arel))) :+\n  (array\n    (send\n      (send nil :table) :name)\n    (send\n      (send nil :table) :table_alias))) compact map uniq ","(send\n  (send\n    (begin\n      (send\n        (send nil :tables_in_string\n          (send\n            (send nil :arel) :join_sql)) :+\n        (array\n          (send\n            (send nil :table) :name)\n          (send\n            (send nil :table) :table_alias)))) :compact) :map) uniq ","(send\n  (send nil :tables_in_string\n    (send\n      (send nil :arel) :join_sql)) :+\n  (array\n    (send\n      (send nil :table) :name)\n    (send\n      (send nil :table) :table_alias))) compact map ","(send\n  (send nil :tables_in_string\n    (send\n      (send nil :arel) :join_sql)) :+\n  (array\n    (send\n      (send nil :table) :name)\n    (send\n      (send nil :table) :table_alias))) compact "," arel join_sql ","(send\n  (send\n    (send\n      (lvar :joined_tables) :flatten) :compact) :map) uniq ","joined_tables flatten compact map ","joined_tables flatten compact ","joined_tables flatten ","join left table_alias ","join left ","join left table_name ","join is_a? "," arel join_sources map "," arel join_sources ","ActiveSupport Deprecation  warn ","string_tables join ","(send\n  (lvar :string_tables) :-\n  (lvar :joined_tables)) any? ","string_tables - ","ActiveRecord Base  disable_implicit_join_references ! ","ActiveRecord Base  disable_implicit_join_references ","(send\n  (send nil :references_values) :-\n  (lvar :joined_tables)) any? "," references_values - "," references_values ","joined_tables flatten compact map uniq ","(send\n  (send\n    (send nil :references_values) :map\n    (block-pass\n      (sym :to_s))) :-\n  (lvar :joined_tables)) empty? ! ","(send\n  (send\n    (send nil :references_values) :map\n    (block-pass\n      (sym :to_s))) :-\n  (lvar :joined_tables)) empty? "," references_values map - "," references_values map ","joined_tables map! ","joined_tables << ","join left name "," build_joins flat_map "," build_joins ","(send\n  (send nil :tables_in_string\n    (send nil :to_sql)) :-\n  (lvar :(send\n  (send\n    (begin\n      (send\n        (send nil :tables_in_string\n          (send\n            (send nil :arel) :joins\n            (send nil :arel))) :+\n        (array\n          (send\n            (send nil :table) :name)\n          (send\n            (send nil :table) :table_alias)))) :compact) :map) uniq )) any? ","(send\n  (send nil :tables_in_string\n    (send nil :to_sql)) :-\n  (lvar :(send\n  (send nil :tables_in_string\n    (send\n      (send nil :arel) :joins\n      (send nil :arel))) :+\n  (array\n    (send\n      (send nil :table) :name)\n    (send\n      (send nil :table) :table_alias))) compact uniq )) any? ","(send\n  (send nil :tables_in_string\n    (send nil :to_sql)) :-\n  (lvar :(send\n  (send nil :tables_in_string\n    (send\n      (send nil :arel) :joins\n      (send nil :arel))) :+\n  (array\n    (send\n      (send nil :table) :name)\n    (send\n      (send nil :table) :table_alias))) compact map uniq )) any? ","(send\n  (send nil :tables_in_string\n    (send nil :to_sql)) :-\n  (lvar :(send\n  (send\n    (begin\n      (send\n        (send nil :tables_in_string\n          (send\n            (send nil :arel) :join_sql)) :+\n        (array\n          (send\n            (send nil :table) :name)\n          (send\n            (send nil :table) :table_alias)))) :compact) :map) uniq )) any? ","(send\n  (send nil :tables_in_string\n    (send nil :to_sql)) :-\n  (lvar :(send\n  (send\n    (send\n      (lvar :joined_tables) :flatten) :compact) :map) uniq )) any? ","(send\n  (send nil :tables_in_string\n    (send nil :to_sql)) :-\n  (lvar :joined_tables flatten compact map uniq )) any? ","(send\n  (send\n    (send\n      (lvar :(send\n  (send\n    (begin\n      (send\n        (send nil :tables_in_string\n          (send\n            (send nil :arel) :joins\n            (send nil :arel))) :+\n        (array\n          (send\n            (send nil :table) :name)\n          (send\n            (send nil :table) :table_alias)))) :compact) :map) uniq ) :flatten) :compact) :map) uniq ","(send\n  (send\n    (send\n      (lvar :(send\n  (send nil :tables_in_string\n    (send\n      (send nil :arel) :joins\n      (send nil :arel))) :+\n  (array\n    (send\n      (send nil :table) :name)\n    (send\n      (send nil :table) :table_alias))) compact uniq ) :flatten) :compact) :map) uniq ","(send\n  (send\n    (send\n      (lvar :(send\n  (send nil :tables_in_string\n    (send\n      (send nil :arel) :joins\n      (send nil :arel))) :+\n  (array\n    (send\n      (send nil :table) :name)\n    (send\n      (send nil :table) :table_alias))) compact map uniq ) :flatten) :compact) :map) uniq ","(send\n  (send\n    (send\n      (lvar :(send\n  (send\n    (begin\n      (send\n        (send nil :tables_in_string\n          (send\n            (send nil :arel) :join_sql)) :+\n        (array\n          (send\n            (send nil :table) :name)\n          (send\n            (send nil :table) :table_alias)))) :compact) :map) uniq ) :flatten) :compact) :map) uniq ","(send\n  (send\n    (send\n      (lvar :(send\n  (send\n    (send\n      (lvar :joined_tables) :flatten) :compact) :map) uniq ) :flatten) :compact) :map) uniq ","(send\n  (send\n    (send\n      (lvar :joined_tables flatten compact map uniq ) :flatten) :compact) :map) uniq ","(send\n  (send\n    (begin\n      (send\n        (send nil :tables_in_string\n          (send\n            (send nil :arel) :joins\n            (send nil :arel))) :+\n        (array\n          (send\n            (send nil :table) :name)\n          (send\n            (send nil :table) :table_alias)))) :compact) :map) uniq  flatten compact map ","(send\n  (send nil :tables_in_string\n    (send\n      (send nil :arel) :joins\n      (send nil :arel))) :+\n  (array\n    (send\n      (send nil :table) :name)\n    (send\n      (send nil :table) :table_alias))) compact uniq  flatten compact map ","(send\n  (send nil :tables_in_string\n    (send\n      (send nil :arel) :joins\n      (send nil :arel))) :+\n  (array\n    (send\n      (send nil :table) :name)\n    (send\n      (send nil :table) :table_alias))) compact map uniq  flatten compact map ","(send\n  (send\n    (begin\n      (send\n        (send nil :tables_in_string\n          (send\n            (send nil :arel) :join_sql)) :+\n        (array\n          (send\n            (send nil :table) :name)\n          (send\n            (send nil :table) :table_alias)))) :compact) :map) uniq  flatten compact map ","(send\n  (send\n    (send\n      (lvar :joined_tables) :flatten) :compact) :map) uniq  flatten compact map ","joined_tables flatten compact map uniq  flatten compact map ","(send\n  (send\n    (begin\n      (send\n        (send nil :tables_in_string\n          (send\n            (send nil :arel) :joins\n            (send nil :arel))) :+\n        (array\n          (send\n            (send nil :table) :name)\n          (send\n            (send nil :table) :table_alias)))) :compact) :map) uniq  flatten compact ","(send\n  (send nil :tables_in_string\n    (send\n      (send nil :arel) :joins\n      (send nil :arel))) :+\n  (array\n    (send\n      (send nil :table) :name)\n    (send\n      (send nil :table) :table_alias))) compact uniq  flatten compact ","(send\n  (send nil :tables_in_string\n    (send\n      (send nil :arel) :joins\n      (send nil :arel))) :+\n  (array\n    (send\n      (send nil :table) :name)\n    (send\n      (send nil :table) :table_alias))) compact map uniq  flatten compact ","(send\n  (send\n    (begin\n      (send\n        (send nil :tables_in_string\n          (send\n            (send nil :arel) :join_sql)) :+\n        (array\n          (send\n            (send nil :table) :name)\n          (send\n            (send nil :table) :table_alias)))) :compact) :map) uniq  flatten compact ","(send\n  (send\n    (send\n      (lvar :joined_tables) :flatten) :compact) :map) uniq  flatten compact ","joined_tables flatten compact map uniq  flatten compact ","(send\n  (send\n    (begin\n      (send\n        (send nil :tables_in_string\n          (send\n            (send nil :arel) :joins\n            (send nil :arel))) :+\n        (array\n          (send\n            (send nil :table) :name)\n          (send\n            (send nil :table) :table_alias)))) :compact) :map) uniq  flatten ","(send\n  (send nil :tables_in_string\n    (send\n      (send nil :arel) :joins\n      (send nil :arel))) :+\n  (array\n    (send\n      (send nil :table) :name)\n    (send\n      (send nil :table) :table_alias))) compact uniq  flatten ","(send\n  (send nil :tables_in_string\n    (send\n      (send nil :arel) :joins\n      (send nil :arel))) :+\n  (array\n    (send\n      (send nil :table) :name)\n    (send\n      (send nil :table) :table_alias))) compact map uniq  flatten ","(send\n  (send\n    (begin\n      (send\n        (send nil :tables_in_string\n          (send\n            (send nil :arel) :join_sql)) :+\n        (array\n          (send\n            (send nil :table) :name)\n          (send\n            (send nil :table) :table_alias)))) :compact) :map) uniq  flatten ","(send\n  (send\n    (send\n      (lvar :joined_tables) :flatten) :compact) :map) uniq  flatten ","joined_tables flatten compact map uniq  flatten "," tables_in_string  join ","(send\n  (lvar :string_tables) :-\n  (lvar :(send\n  (send\n    (begin\n      (send\n        (send nil :tables_in_string\n          (send\n            (send nil :arel) :joins\n            (send nil :arel))) :+\n        (array\n          (send\n            (send nil :table) :name)\n          (send\n            (send nil :table) :table_alias)))) :compact) :map) uniq )) any? ","(send\n  (lvar :string_tables) :-\n  (lvar :(send\n  (send nil :tables_in_string\n    (send\n      (send nil :arel) :joins\n      (send nil :arel))) :+\n  (array\n    (send\n      (send nil :table) :name)\n    (send\n      (send nil :table) :table_alias))) compact uniq )) any? ","(send\n  (lvar :string_tables) :-\n  (lvar :(send\n  (send nil :tables_in_string\n    (send\n      (send nil :arel) :joins\n      (send nil :arel))) :+\n  (array\n    (send\n      (send nil :table) :name)\n    (send\n      (send nil :table) :table_alias))) compact map uniq )) any? ","(send\n  (lvar :string_tables) :-\n  (lvar :(send\n  (send\n    (begin\n      (send\n        (send nil :tables_in_string\n          (send\n            (send nil :arel) :join_sql)) :+\n        (array\n          (send\n            (send nil :table) :name)\n          (send\n            (send nil :table) :table_alias)))) :compact) :map) uniq )) any? ","(send\n  (lvar :string_tables) :-\n  (lvar :(send\n  (send\n    (send\n      (lvar :joined_tables) :flatten) :compact) :map) uniq )) any? ","(send\n  (lvar :string_tables) :-\n  (lvar :joined_tables flatten compact map uniq )) any? ","(send\n  (lvar : tables_in_string ) :-\n  (lvar :joined_tables)) any? "," tables_in_string  - ","(send\n  (send nil :references_values) :-\n  (lvar :(send\n  (send\n    (begin\n      (send\n        (send nil :tables_in_string\n          (send\n            (send nil :arel) :joins\n            (send nil :arel))) :+\n        (array\n          (send\n            (send nil :table) :name)\n          (send\n            (send nil :table) :table_alias)))) :compact) :map) uniq )) any? ","(send\n  (send nil :references_values) :-\n  (lvar :(send\n  (send nil :tables_in_string\n    (send\n      (send nil :arel) :joins\n      (send nil :arel))) :+\n  (array\n    (send\n      (send nil :table) :name)\n    (send\n      (send nil :table) :table_alias))) compact uniq )) any? ","(send\n  (send nil :references_values) :-\n  (lvar :(send\n  (send nil :tables_in_string\n    (send\n      (send nil :arel) :joins\n      (send nil :arel))) :+\n  (array\n    (send\n      (send nil :table) :name)\n    (send\n      (send nil :table) :table_alias))) compact map uniq )) any? ","(send\n  (send nil :references_values) :-\n  (lvar :(send\n  (send\n    (begin\n      (send\n        (send nil :tables_in_string\n          (send\n            (send nil :arel) :join_sql)) :+\n        (array\n          (send\n            (send nil :table) :name)\n          (send\n            (send nil :table) :table_alias)))) :compact) :map) uniq )) any? ","(send\n  (send nil :references_values) :-\n  (lvar :(send\n  (send\n    (send\n      (lvar :joined_tables) :flatten) :compact) :map) uniq )) any? ","(send\n  (send nil :references_values) :-\n  (lvar :joined_tables flatten compact map uniq )) any? ","(send\n  (send\n    (begin\n      (send\n        (send nil :tables_in_string\n          (send\n            (send nil :arel) :joins\n            (send nil :arel))) :+\n        (array\n          (send\n            (send nil :table) :name)\n          (send\n            (send nil :table) :table_alias)))) :compact) :map) uniq  flatten compact map uniq ","(send\n  (send nil :tables_in_string\n    (send\n      (send nil :arel) :joins\n      (send nil :arel))) :+\n  (array\n    (send\n      (send nil :table) :name)\n    (send\n      (send nil :table) :table_alias))) compact uniq  flatten compact map uniq ","(send\n  (send nil :tables_in_string\n    (send\n      (send nil :arel) :joins\n      (send nil :arel))) :+\n  (array\n    (send\n      (send nil :table) :name)\n    (send\n      (send nil :table) :table_alias))) compact map uniq  flatten compact map uniq ","(send\n  (send\n    (begin\n      (send\n        (send nil :tables_in_string\n          (send\n            (send nil :arel) :join_sql)) :+\n        (array\n          (send\n            (send nil :table) :name)\n          (send\n            (send nil :table) :table_alias)))) :compact) :map) uniq  flatten compact map uniq ","(send\n  (send\n    (send\n      (lvar :joined_tables) :flatten) :compact) :map) uniq  flatten compact map uniq ","joined_tables flatten compact map uniq  flatten compact map uniq ","(send\n  (send\n    (send nil :references_values) :map\n    (block-pass\n      (sym :to_s))) :-\n  (lvar :(send\n  (send\n    (begin\n      (send\n        (send nil :tables_in_string\n          (send\n            (send nil :arel) :joins\n            (send nil :arel))) :+\n        (array\n          (send\n            (send nil :table) :name)\n          (send\n            (send nil :table) :table_alias)))) :compact) :map) uniq )) empty? ! ","(send\n  (send\n    (send nil :references_values) :map\n    (block-pass\n      (sym :to_s))) :-\n  (lvar :(send\n  (send nil :tables_in_string\n    (send\n      (send nil :arel) :joins\n      (send nil :arel))) :+\n  (array\n    (send\n      (send nil :table) :name)\n    (send\n      (send nil :table) :table_alias))) compact uniq )) empty? ! ","(send\n  (send\n    (send nil :references_values) :map\n    (block-pass\n      (sym :to_s))) :-\n  (lvar :(send\n  (send nil :tables_in_string\n    (send\n      (send nil :arel) :joins\n      (send nil :arel))) :+\n  (array\n    (send\n      (send nil :table) :name)\n    (send\n      (send nil :table) :table_alias))) compact map uniq )) empty? ! ","(send\n  (send\n    (send nil :references_values) :map\n    (block-pass\n      (sym :to_s))) :-\n  (lvar :(send\n  (send\n    (begin\n      (send\n        (send nil :tables_in_string\n          (send\n            (send nil :arel) :join_sql)) :+\n        (array\n          (send\n            (send nil :table) :name)\n          (send\n            (send nil :table) :table_alias)))) :compact) :map) uniq )) empty? ! ","(send\n  (send\n    (send nil :references_values) :map\n    (block-pass\n      (sym :to_s))) :-\n  (lvar :(send\n  (send\n    (send\n      (lvar :joined_tables) :flatten) :compact) :map) uniq )) empty? ! ","(send\n  (send\n    (send nil :references_values) :map\n    (block-pass\n      (sym :to_s))) :-\n  (lvar :joined_tables flatten compact map uniq )) empty? ! ","(send\n  (send\n    (send nil :references_values) :map\n    (block-pass\n      (sym :to_s))) :-\n  (lvar :(send\n  (send\n    (begin\n      (send\n        (send nil :tables_in_string\n          (send\n            (send nil :arel) :joins\n            (send nil :arel))) :+\n        (array\n          (send\n            (send nil :table) :name)\n          (send\n            (send nil :table) :table_alias)))) :compact) :map) uniq )) empty? ","(send\n  (send\n    (send nil :references_values) :map\n    (block-pass\n      (sym :to_s))) :-\n  (lvar :(send\n  (send nil :tables_in_string\n    (send\n      (send nil :arel) :joins\n      (send nil :arel))) :+\n  (array\n    (send\n      (send nil :table) :name)\n    (send\n      (send nil :table) :table_alias))) compact uniq )) empty? ","(send\n  (send\n    (send nil :references_values) :map\n    (block-pass\n      (sym :to_s))) :-\n  (lvar :(send\n  (send nil :tables_in_string\n    (send\n      (send nil :arel) :joins\n      (send nil :arel))) :+\n  (array\n    (send\n      (send nil :table) :name)\n    (send\n      (send nil :table) :table_alias))) compact map uniq )) empty? ","(send\n  (send\n    (send nil :references_values) :map\n    (block-pass\n      (sym :to_s))) :-\n  (lvar :(send\n  (send\n    (begin\n      (send\n        (send nil :tables_in_string\n          (send\n            (send nil :arel) :join_sql)) :+\n        (array\n          (send\n            (send nil :table) :name)\n          (send\n            (send nil :table) :table_alias)))) :compact) :map) uniq )) empty? ","(send\n  (send\n    (send nil :references_values) :map\n    (block-pass\n      (sym :to_s))) :-\n  (lvar :(send\n  (send\n    (send\n      (lvar :joined_tables) :flatten) :compact) :map) uniq )) empty? ","(send\n  (send\n    (send nil :references_values) :map\n    (block-pass\n      (sym :to_s))) :-\n  (lvar :joined_tables flatten compact map uniq )) empty? ","(send\n  (send\n    (begin\n      (send\n        (send nil :tables_in_string\n          (send\n            (send nil :arel) :joins\n            (send nil :arel))) :+\n        (array\n          (send\n            (send nil :table) :name)\n          (send\n            (send nil :table) :table_alias)))) :compact) :map) uniq  map! ","(send\n  (send nil :tables_in_string\n    (send\n      (send nil :arel) :joins\n      (send nil :arel))) :+\n  (array\n    (send\n      (send nil :table) :name)\n    (send\n      (send nil :table) :table_alias))) compact uniq  map! ","(send\n  (send nil :tables_in_string\n    (send\n      (send nil :arel) :joins\n      (send nil :arel))) :+\n  (array\n    (send\n      (send nil :table) :name)\n    (send\n      (send nil :table) :table_alias))) compact map uniq  map! ","(send\n  (send\n    (begin\n      (send\n        (send nil :tables_in_string\n          (send\n            (send nil :arel) :join_sql)) :+\n        (array\n          (send\n            (send nil :table) :name)\n          (send\n            (send nil :table) :table_alias)))) :compact) :map) uniq  map! ","(send\n  (send\n    (send\n      (lvar :joined_tables) :flatten) :compact) :map) uniq  map! ","joined_tables flatten compact map uniq  map! ","(send\n  (send\n    (begin\n      (send\n        (send nil :tables_in_string\n          (send\n            (send nil :arel) :joins\n            (send nil :arel))) :+\n        (array\n          (send\n            (send nil :table) :name)\n          (send\n            (send nil :table) :table_alias)))) :compact) :map) uniq  << ","(send\n  (send nil :tables_in_string\n    (send\n      (send nil :arel) :joins\n      (send nil :arel))) :+\n  (array\n    (send\n      (send nil :table) :name)\n    (send\n      (send nil :table) :table_alias))) compact uniq  << ","(send\n  (send nil :tables_in_string\n    (send\n      (send nil :arel) :joins\n      (send nil :arel))) :+\n  (array\n    (send\n      (send nil :table) :name)\n    (send\n      (send nil :table) :table_alias))) compact map uniq  << ","(send\n  (send\n    (begin\n      (send\n        (send nil :tables_in_string\n          (send\n            (send nil :arel) :join_sql)) :+\n        (array\n          (send\n            (send nil :table) :name)\n          (send\n            (send nil :table) :table_alias)))) :compact) :map) uniq  << ","(send\n  (send\n    (send\n      (lvar :joined_tables) :flatten) :compact) :map) uniq  << ","joined_tables flatten compact map uniq  << "]}," ActiveRecord Relation method_missing":{"type":"method","name":"method_missing","children":[],"call":[" find_or_instantiator_by_attributes ","match instantiator? "," find_by_attributes ","match finder? ","@klass send ","match attribute_names ","DynamicFinderMatch  match "," arel send "," arel "," arel respond_to? "," scoping ","@klass respond_to? "," merge ","@klass scopes [] ","@klass scopes "," to_a send "," to_a ","Array  method_defined? "," find_or_instantiator_by_match attribute_names  ","DynamicFinderMatch  match  instantiator? "," find_by_match attribute_names  ","DynamicFinderMatch  match  finder? ","DynamicFinderMatch  match  attribute_names ","DynamicFinderMatch  DynamicFinderMatch  match  "]}," ActiveRecord Relation inspect":{"type":"method","name":"inspect","children":[],"call":[" to_a inspect "," to_a ","entries join "," class name "," class ","entries []= ","entries size == ","entries size "," to_a take map! "," to_a take ","(send nil :limit_value) compact min ","(send nil :limit_value) compact "," limit_value "," records take map! "," records take "," records ","subject take map! ","subject take "," loaded? "," annotate "," to_a take map!  join "," records take map!  join ","subject take map!  join "," to_a take map!  []= "," records take map!  []= ","subject take map!  []= "," to_a take map!  size == "," records take map!  size == ","subject take map!  size == "," to_a take map!  size "," records take map!  size ","subject take map!  size "," records  take map! "," annotate  take map! "," records  take "," annotate  take "]}," ActiveRecord Relation ==":{"type":"method","name":"==","children":[],"call":[" to_a == ","other to_a "," to_a ","other to_sql == "," to_sql ","other to_sql "," == "," records == "," records ","other records "]}," ActiveRecord Relation eager_loading?":{"type":"method","name":"eager_loading?","children":[],"call":[" references_eager_loaded_tables? ","@includes_values any? ","@eager_load_values any? "," joined_includes_values any? "," joined_includes_values "," includes_values any? "," includes_values "," eager_load_values any? "," eager_load_values "]}," ActiveRecord Relation scope_for_create":{"type":"method","name":"scope_for_create","children":[],"call":[" where_values_hash ","hash []= ","where operand2 ","where operand2 value ","where operand2 respond_to? ","where operand1 name ","where operand1 ","where is_a? ","@where_values inject ","@create_with_value reverse_merge "," where_values_hash merge "," create_with_value ","scope merge! "," where_values_hash merge! "," create_with_value stringify_keys ","k to_s "," create_with_value each "," create_with_value empty? ","hash delete "," klass inheritance_column "," klass "," klass finder_needs_type_condition? "," where_clause to_h "," klass table_name "," where_clause "," where_values_ where_values_hash  "," where_values_ where_clause to_h  "," where_values_hash  []= "," where_clause to_h  []= "," where_values_ where_values_hash  merge "," where_values_ where_clause to_h  merge "," where_values_hash merge!  merge! "," where_values_ where_values_hash  merge! "," where_values_ where_clause to_h  merge! "," where_values_hash  delete "," where_clause to_h  delete "]}," ActiveRecord Relation where_values_hash":{"type":"method","name":"where_values_hash","children":[],"call":["Hash  [] ","where operand2 ","where operand2 value ","where operand2 respond_to? ","where operand1 name ","where operand1 ","(send\n  (ivar :@where_values) :find_all) map ","w operator == ","w operator ","w respond_to? ","@where_values find_all ","where right ","where right value ","where right respond_to? ","where left name ","where left ","w left relation name == "," table_name ","w left relation name ","w left relation ","w left ","equalities map ","node left relation name == ","node left relation name ","node left relation ","node left "," with_default_scope where_values grep find_all "," with_default_scope where_values grep "," with_default_scope where_values "," with_default_scope ","Hash  [] with_indifferent_access ","binds fetch ","name to_s ","column name "," bind_values find_all map "," bind_values find_all "," bind_values "," where_values grep find_all "," where_values grep "," where_values ","binds merge! ","where right val ","where right map "," where_clause to_h "," where_clause ","where operand1 where left name  ","where left where left name  ","w left relation where left name  == "," table_where left name  ","w left relation where left name  ","node left relation where left name  == ","node left relation where left name  ","Hash  []  fetch ","where left name  to_s ","column where left name  ","Hash  []  merge! "]}," ActiveRecord Relation to_sql":{"type":"method","name":"to_sql","children":[],"call":[" arel to_sql "," arel "," klass connection to_sql "," klass connection "," klass ","@bind_values dup "," bind_values dup "," bind_values ","connection quote ","binds shift reverse ","binds shift ","visitor accept ","relation bind_values dup ","relation bind_values ","relation arel ast ","relation arel "," find_with_associations "," eager_loading? ","connection visitor ","collect substitute_binds join ","collect substitute_binds ","Arel Collectors Bind  new ","arel ast ","bv reverse ","binds map! ","(send\n  (send\n    (lvar :arel) :bind_values) :+\n  (send\n    (lvar :relation) :bind_values)) dup ","arel bind_values + ","arel bind_values ","connection prepare_binds_for_database ","relation bound_attributes ","conn to_sql ","conn unprepared_statement "," apply_join_dependency ","relation to_sql ","join_dependency apply_column_aliases "," relation arel  to_sql "," relation arel  "," klass  klass connection  to_sql "," klass  klass connection ection to_sql "," klass  klass connection  "," klass  klass connection ection "," klass connection  quote "," klass connection ection quote ","relation bind_values dup  shift reverse ","(send\n  (send\n    (lvar :arel) :bind_values) :+\n  (send\n    (lvar :relation) :bind_values)) dup  shift reverse ","connection prepare_binds_for_database  shift reverse ","relation bound_attributes  shift reverse ","relation bind_values dup  shift ","(send\n  (send\n    (lvar :arel) :bind_values) :+\n  (send\n    (lvar :relation) :bind_values)) dup  shift ","connection prepare_binds_for_database  shift ","relation bound_attributes  shift ","connection visitor  accept ","join_dependency apply_column_aliases  bind_values dup ","join_dependency apply_column_aliases  bind_values ","relation arel relation arel ast  ","relation relation arel  ast ","join_dependency apply_column_aliases  arel ast ","relation relation arel  ","join_dependency apply_column_aliases  arel ","connection connection visitor  "," klass connection  visitor "," klass connection ection visitor ","collect substitute_relation bind_values dup  join ","collect substitute_(send\n  (send\n    (lvar :arel) :bind_values) :+\n  (send\n    (lvar :relation) :bind_values)) dup  join ","collect substitute_connection prepare_binds_for_database  join ","collect substitute_relation bound_attributes  join ","visitor accept  substitute_binds join ","collect substitute_relation bind_values dup  ","collect substitute_(send\n  (send\n    (lvar :arel) :bind_values) :+\n  (send\n    (lvar :relation) :bind_values)) dup  ","collect substitute_connection prepare_binds_for_database  ","collect substitute_relation bound_attributes  ","visitor accept  substitute_binds ","arel relation arel ast  ","relation arel  ast ","relation bind_values dup  map! ","(send\n  (send\n    (lvar :arel) :bind_values) :+\n  (send\n    (lvar :relation) :bind_values)) dup  map! ","connection prepare_binds_for_database  map! ","relation bound_attributes  map! ","(send\n  (send\n    (lvar :relation arel ) :bind_values) :+\n  (send\n    (lvar :relation) :bind_values)) dup ","(send\n  (send\n    (lvar :arel) :bind_values) :+\n  (send\n    (lvar :join_dependency apply_column_aliases ) :bind_values)) dup ","relation arel  bind_values + ","relation arel  bind_values ","connection prepare_relation bind_values dup _for_database ","connection prepare_(send\n  (send\n    (lvar :arel) :bind_values) :+\n  (send\n    (lvar :relation) :bind_values)) dup _for_database ","connection prepare_connection prepare_binds_for_database _for_database ","connection prepare_relation bound_attributes _for_database "," klass connection  prepare_binds_for_database "," klass connection ection prepare_binds_for_database ","join_dependency apply_column_aliases  bound_attributes "," klass connection  to_sql "," klass connection  unprepared_statement ","join_dependency apply_column_aliases  to_sql "]}," ActiveRecord Relation primary_key":{"type":"method","name":"primary_key","children":[],"call":[" table [] ","@klass primary_key "," table "]}," ActiveRecord Relation reset":{"type":"method","name":"reset","children":[],"call":[" freeze "]}," ActiveRecord Relation reload":{"type":"method","name":"reload","children":[],"call":[" to_a "," reset "," load "]}," ActiveRecord Relation delete":{"type":"method","name":"delete","children":[],"call":[" where delete_all "," where ","@klass primary_key "," primary_key ","IdentityMap  remove_by_id "," symbolized_base_class ","IdentityMap  enabled? "]}," ActiveRecord Relation delete_all":{"type":"method","name":"delete_all","children":[],"call":[" reset "," arel delete tap "," arel delete "," arel "," where delete_all "," where ","@klass connection delete "," bind_values ","@klass connection "," arel compile_delete ","IdentityMap  repository []= "," symbolized_base_class ","IdentityMap  repository ","IdentityMap  enabled? ","statement to_sql "," raise ","ActiveRecordError  new "," limit_value ","stmt wheres= "," arel constraints ","@klass connection join_to_delete "," table [] "," primary_key "," table "," with_default_scope joins_values any? "," with_default_scope joins_values "," with_default_scope ","stmt from ","Arel DeleteManager  new "," arel engine "," joins_values any? "," joins_values ","invalid_methods join ","invalid_methods any? "," send "," send any? ","MULTI_VALUE_METHODS  include? ","INVALID_METHODS_FOR_DELETE_ALL  select "," arel bind_values + "," arel bind_values "," bound_attributes "," arel_attribute ","ActiveSupport Deprecation  warn ","(str \"          Passing conditions to delete_all is deprecated and will be removed in Rails 5.1.\\n\") squish ","CLAUSE_METHODS  include? ","SINGLE_VALUE_METHODS  include? "," has_join_values? ","value any? "," get_value "," has_limit_or_offset? ","relation delete_all "," apply_join_dependency "," eager_loading? ","stmt order "," arel orders ","stmt offset "," arel offset ","stmt take "," arel limit ","stmt key= "," arel source "," arel join_sources empty? "," arel join_sources ","method == ","@values [] "," klass connection delete tap "," klass connection delete "," klass "," klass connection ","arel constraints ","arel orders ","arel offset ","arel limit ","arel source ","arel source left= "," build_arel "," apply_join_dependency arel ","arel compile_delete "," having_clause ast "," having_clause "," having_clause empty? "," arel_columns "," group_values uniq "," group_values ","  build_arel  delete tap ","  apply_join_dependency arel  delete tap ","  build_arel  delete ","  apply_join_dependency arel  delete ","  build_arel  ","  apply_join_dependency arel  "," bind_ get_value s "," bind_@values [] s ","  build_arel  compile_delete ","  apply_join_dependency arel  compile_delete "," arel compile_delete  to_sql "," limit_ get_value  "," limit_@values []  ","Arel DeleteManager  new  wheres= ","arel compile_delete  wheres= ","  build_arel  constraints ","  apply_join_dependency arel  constraints "," with_default_scope joins_ get_value s any? "," with_default_scope joins_@values [] s any? "," with_default_scope joins_ get_value s "," with_default_scope joins_@values [] s ","Arel DeleteManager  new  from ","arel compile_delete  from ","  build_arel  engine ","  apply_join_dependency arel  engine "," joins_ get_value s any? "," joins_@values [] s any? "," joins_ get_value s "," joins_@values [] s "," arel bind_ get_value s + "," arel bind_@values [] s + ","  build_arel  bind_values + ","  apply_join_dependency arel  bind_values + "," arel bind_ get_value s "," arel bind_@values [] s ","  build_arel  bind_values ","  apply_join_dependency arel  bind_values ","  build_arel _attribute ","  apply_join_dependency arel _attribute "," has_join_ get_value s? "," has_join_@values [] s? "," get_value  any? ","@values []  any? "," get_ get_value  "," get_@values []  "," apply_join_dependency  delete_all ","Arel DeleteManager  new  order ","arel compile_delete  order ","  build_arel  orders ","  apply_join_dependency arel  orders ","Arel DeleteManager  new  offset ","arel compile_delete  offset ","  build_arel  offset ","  apply_join_dependency arel  offset ","Arel DeleteManager  new  take ","arel compile_delete  take ","  build_arel  limit ","  apply_join_dependency arel  limit ","Arel DeleteManager  new  key= ","arel compile_delete  key= ","  build_arel  source ","  apply_join_dependency arel  source ","  build_arel  join_sources empty? ","  apply_join_dependency arel  join_sources empty? ","  build_arel  join_sources ","  apply_join_dependency arel  join_sources ","@ get_value s [] ","@@values [] s [] "," build_arel  constraints "," apply_join_dependency arel  constraints "," build_arel  orders "," apply_join_dependency arel  orders "," build_arel  offset "," apply_join_dependency arel  offset "," build_arel  limit "," apply_join_dependency arel  limit "," build_arel  source "," apply_join_dependency arel  source "," build_arel  source left= "," apply_join_dependency arel  source left= "," build_ build_arel  "," build_ apply_join_dependency arel  "," apply_join_dependency  build_arel  "," apply_join_dependency  apply_join_dependency arel  "," build_arel  compile_delete "," apply_join_dependency arel  compile_delete ","  build_arel _columns ","  apply_join_dependency arel _columns "," group_ get_value s uniq "," group_@values [] s uniq "," group_ get_value s "," group_@values [] s "]}," ActiveRecord Relation destroy":{"type":"method","name":"destroy","children":[],"call":[" find destroy "," find "," destroy ","id map ","id is_a? "]}," ActiveRecord Relation destroy_all":{"type":"method","name":"destroy_all","children":[],"call":[" reset ","(send\n  (send nil :to_a) :each) tap ","object destroy "," to_a each "," to_a "," where destroy_all "," where "," records each tap "," records each "," records ","ActiveSupport Deprecation  warn ","(str \"          Passing conditions to destroy_all is deprecated and will be removed in Rails 5.1.\\n\") squish "," to_a each tap "]}," ActiveRecord Relation update":{"type":"method","name":"update","children":[],"call":["object update_attributes "," find "," update ","attributes [] ","id collect ","id is_a? ","id each with_index map ","id each with_index ","id each ","object update ","id map with_index ","id map ","ActiveSupport Deprecation  warn ","(str \"            You are passing an instance of ActiveRecord::Base to `update`.\\n\") squish ","id id ","ActiveRecord Base  === ","record update "," records each "," records ","id == "," to_a each "," to_a "," raise "," klass update "," klass "," each "," find  update_attributes ","id id  collect ","id id  is_a? ","id id  each with_index map ","id id  each with_index ","id id  each "," find  update ","id id  map with_index ","id id  map ","id id  id id  ","id id  == "]}," ActiveRecord Relation update_all":{"type":"method","name":"update_all","children":[],"call":[" except update_all "," except "," arel update ","Arel SqlLiteral  new ","@klass send "," arel ","@limit_value present? == ","@order_values present? ","@limit_value present? "," where apply_finder_options update_all "," where apply_finder_options ","options slice "," where ","options present? ","@klass connection update "," bind_values ","@klass connection ","stmt wheres= "," arel constraints ","stmt order "," arel orders ","stmt take "," arel limit ","@klass connection join_to_update "," joins_values any? "," joins_values ","stmt key= "," table [] "," primary_key "," table ","stmt table ","stmt set ","Arel  sql ","Arel UpdateManager  new "," arel engine ","IdentityMap  repository [] clear ","IdentityMap  repository [] "," symbolized_base_class ","IdentityMap  repository ","IdentityMap  enabled? ","stmt to_sql "," arel compile_update "," with_default_scope joins_values any? "," with_default_scope joins_values "," with_default_scope "," raise ","updates blank? "," arel bind_values + "," arel bind_values "," bind_values + "," bound_attributes "," arel_attribute "," has_join_values? "," offset_value ","@klass sanitize_sql_for_assignment ","relation update_all "," apply_join_dependency "," eager_loading? "," klass sanitize_sql_for_assignment "," table name "," klass "," _substitute_values ","updates []= "," _increment_attribute ","attr name "," klass locking_column ","updates key? ! ","updates key? "," klass locking_column to_sym "," klass locking_enabled? ","updates is_a? ","stmt offset "," arel offset "," arel source "," arel join_sources empty? "," arel join_sources "," reset "," klass connection update tap "," klass connection update "," klass connection ","arel constraints ","arel orders ","arel offset ","arel limit ","arel source ","arel source left= "," build_arel "," apply_join_dependency arel ","arel compile_update "," having_clause ast "," having_clause "," having_clause empty? "," arel_columns "," group_values uniq "," group_values ","  build_arel  update ","  apply_join_dependency arel  update ","  build_arel  ","  apply_join_dependency arel  ","@ arel limit _value present? == ","@ arel orders _values present? ","@order_Arel  sql  present? ","@order_ _substitute_values  present? ","@ arel limit _value present? "," bind_Arel  sql  "," bind_ _substitute_values  ","Arel UpdateManager  new  wheres= "," arel compile_update  wheres= ","arel compile_update  wheres= ","  build_arel  constraints ","  apply_join_dependency arel  constraints ","Arel UpdateManager  new  order "," arel compile_update  order ","arel compile_update  order ","stmt  arel orders  "," arel  arel orders s ","  build_arel  orders ","  apply_join_dependency arel  orders ","Arel UpdateManager  new  take "," arel compile_update  take ","arel compile_update  take "," arel  arel limit  ","  build_arel  limit ","  apply_join_dependency arel  limit "," joins_Arel  sql  any? "," joins_ _substitute_values  any? "," joins_Arel  sql  "," joins_ _substitute_values  ","Arel UpdateManager  new  key= "," arel compile_update  key= ","arel compile_update  key= ","Arel UpdateManager  new  table "," arel compile_update  table ","arel compile_update  table ","Arel UpdateManager  new  set "," arel compile_update  set ","arel compile_update  set ","  build_arel  engine ","  apply_join_dependency arel  engine ","Arel UpdateManager  new  to_sql "," arel compile_update  to_sql ","arel compile_update  to_sql ","  build_arel  compile_update ","  apply_join_dependency arel  compile_update "," with_default_scope joins_Arel  sql  any? "," with_default_scope joins_ _substitute_values  any? "," with_default_scope joins_Arel  sql  "," with_default_scope joins_ _substitute_values  ","  build_arel  bind_values + ","  apply_join_dependency arel  bind_values + "," arel bind_Arel  sql  + "," arel bind_ _substitute_values  + ","  build_arel  bind_values ","  apply_join_dependency arel  bind_values "," arel bind_Arel  sql  "," arel bind_ _substitute_values  "," bind_Arel  sql  + "," bind_ _substitute_values  + "," bound_ arel_attribute ibutes "," bound_ table [] ibutes "," arel_ arel_attribute ibute "," arel_ table [] ibute ","  build_arel _attribute ","  apply_join_dependency arel _attribute "," has_join_Arel  sql ? "," has_join_ _substitute_values ? "," apply_join_dependency  update_all "," _substitute_Arel  sql  "," _substitute_ _substitute_values  "," _increment_ arel_attribute ibute "," _increment_ table [] ibute "," arel_attribute  name "," table []  name ","Arel UpdateManager  new  offset "," arel compile_update  offset ","arel compile_update  offset ","  build_arel  offset ","  apply_join_dependency arel  offset ","  build_arel  source ","  apply_join_dependency arel  source ","  build_arel  join_sources empty? ","  apply_join_dependency arel  join_sources empty? ","  build_arel  join_sources ","  apply_join_dependency arel  join_sources "," build_arel  constraints "," apply_join_dependency arel  constraints ","arel  arel orders s "," build_arel  orders "," apply_join_dependency arel  orders "," build_arel  offset "," apply_join_dependency arel  offset ","arel  arel limit  "," build_arel  limit "," apply_join_dependency arel  limit "," build_arel  source "," apply_join_dependency arel  source "," build_arel  source left= "," apply_join_dependency arel  source left= "," build_ build_arel  "," build_ apply_join_dependency arel  "," apply_join_dependency  build_arel  "," apply_join_dependency  apply_join_dependency arel  "," build_arel  compile_update "," apply_join_dependency arel  compile_update ","  build_arel _columns ","  apply_join_dependency arel _columns "," group_Arel  sql  uniq "," group_ _substitute_values  uniq "," group_Arel  sql  "," group_ _substitute_values  "]}," ActiveRecord Relation scoping":{"type":"method","name":"scoping","children":[],"call":["@klass scoped_methods pop ","@klass scoped_methods ","@klass scoped_methods << ","@klass send ","@klass with_scope "," klass current_scope= "," klass "," klass current_scope "," _scoping "," already_in_scope? "," klass _scoping "," raise ","all_queries == "," global_scope? "," klass scope_registry "," klass scope_ klass scope_registry  "]}," ActiveRecord Relation many?":{"type":"method","name":"many?","children":[],"call":[" size > "," size "," to_a many? "," to_a "," block_given? ","@limit_value present? "," limit_value "," records many? "," records "," limited_count > "," limited_count "," loaded? "]}," ActiveRecord Relation any?":{"type":"method","name":"any?","children":[],"call":[" empty? ! "," empty? "," to_a any? "," to_a "," block_given? ","args present? "]}," ActiveRecord Relation empty?":{"type":"method","name":"empty?","children":[],"call":[" count zero? "," count ","@records empty? "," loaded? ","c empty? ","c zero? ","c respond_to? "," limit_value == "," limit_value "," exists? ! "," exists? "," records empty? "," records ","  count ount zero? ","  count ount ","@re count ords empty? "," count  empty? "," count  zero? "," count  respond_to? "," re count ords empty? "," re count ords "]}," ActiveRecord Relation size":{"type":"method","name":"size","children":[],"call":[" count ","@records length "," loaded? "," records length "," records "]}," ActiveRecord Relation as_json":{"type":"method","name":"as_json","children":[],"call":[" to_a "," to_a as_json "," records as_json "," records "]}," ActiveRecord Relation to_a":{"type":"method","name":"to_a","children":[],"call":["record readonly! ","@records each ","@readonly_value nil? ","@klass send ","preload each "," eager_loading? ","@klass find_by_sql "," arel to_sql "," arel "," find_with_associations "," loaded? ","default_scoped to_a ","ActiveRecord Associations Preloader  new run ","ActiveRecord Associations Preloader  new ","IdentityMap  without ","@klass locking_enabled? ! ","@klass locking_enabled? ","default_scoped equal? "," with_default_scope "," exec_queries "," logging_query_plan "," load "," records dup "," records ","@klass find_by_sql  each "," find_with_associations  each ","default_scoped to_a  each "," with_default_scope  to_a "," with_default_scope  equal? "]}," ActiveRecord Relation respond_to?":{"type":"method","name":"respond_to?","children":[],"call":["@klass send ","match attribute_names ","DynamicScopeMatch  match ","DynamicFinderMatch  match ","@klass respond_to? ","Array  method_defined? "," arel respond_to? "," arel ","DynamicScopeMatch  match  attribute_names ","DynamicFinderMatch  match  attribute_names ","DynamicScopeMatch  DynamicScopeMatch  match  ","DynamicScopeMatch  DynamicFinderMatch  match  ","DynamicFinderMatch  DynamicScopeMatch  match  ","DynamicFinderMatch  DynamicFinderMatch  match  "]}," ActiveRecord Relation create!":{"type":"method","name":"create!","children":[],"call":["@klass create! "," scoping "," with_create_scope "," klass create! "," scope_for_create "," klass "," create! ","attributes collect ","attributes is_a? "," values_for_create "," _deprecated_scope_block "," _create! "," current_scope_restoring_block "," _deprecated_scope_ _deprecated_scope_block  "," _deprecated_scope_ current_scope_restoring_block  "," current_scope_restoring_ _deprecated_scope_block  "," current_scope_restoring_ current_scope_restoring_block  "]}," ActiveRecord Relation create":{"type":"method","name":"create","children":[],"call":["@klass create "," scoping "," with_create_scope "," klass create "," scope_for_create "," klass "," create ","attributes collect ","attributes is_a? "," values_for_create "," _deprecated_scope_block "," _create "," current_scope_restoring_block "," _deprecated_scope_ _deprecated_scope_block  "," _deprecated_scope_ current_scope_restoring_block  "," current_scope_restoring_ _deprecated_scope_block  "," current_scope_restoring_ current_scope_restoring_block  "]}," ActiveRecord Relation initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":[" reset ","@bind_values dup ","@values []= ","@values [] dup ","@values [] ","@values key? ","Hash  [] ","@values dup ","@bind_values dup  dup ","Hash  []  []= ","@values dup  []= ","Hash  []  [] dup ","@values dup  [] dup ","Hash  []  [] ","@values dup  [] ","Hash  []  key? ","@values dup  key? ","Hash  []  dup ","@values dup  dup "]}," ActiveRecord Relation new":{"type":"method","name":"new","children":[],"call":["@klass new "," scoping "," with_create_scope "," klass new "," scope_for_create "," klass "," values_for_create "," _deprecated_scope_block "," _new "," current_scope_restoring_block "," new ","attributes collect ","attributes is_a? "," _deprecated_scope_ _deprecated_scope_block  "," _deprecated_scope_ current_scope_restoring_block  "," current_scope_restoring_ _deprecated_scope_block  "," current_scope_restoring_ current_scope_restoring_block  "]}," ActiveRecord Relation initialize":{"type":"method","name":"initialize","children":[],"call":[" instance_variable_set ","(send\n  (const nil :ASSOCIATION_METHODS) :+\n  (const nil :MULTI_VALUE_METHODS)) each ","ASSOCIATION_METHODS  + ","SINGLE_VALUE_METHODS  each "," apply_modules ","Module  new "," block_given? "]}," ActiveRecord SpawnMethods apply_finder_options":{"type":"method","name":"apply_finder_options","children":[],"call":["relation extending ","options [] ","options has_key? ","relation includes ","relation where ","relation send ","Array  wrap + ","Array  wrap ","(sym :group) each ","relation readonly ","options key? ","(sym :joins) each ","options assert_valid_keys "," clone "," spawn ","finders [] ","(send\n  (array\n    (sym :joins)\n    (sym :select)\n    (sym :group)\n    (sym :order)\n    (sym :having)\n    (sym :limit)\n    (sym :offset)\n    (sym :from)\n    (sym :lock)\n    (sym :readonly)) :&\n  (send\n    (lvar :finders) :keys)) each ","(sym :joins) & ","finders keys ","value nil? ","finders delete_if ","options dup ","key != ","relation extending  extending ","relation includes  extending ","relation where  extending ","relation readonly  extending ","relation send  extending "," clone  extending "," spawn  extending ","relation extending  includes ","relation includes  includes ","relation where  includes ","relation readonly  includes ","relation send  includes "," clone  includes "," spawn  includes ","relation extending  where ","relation includes  where ","relation where  where ","relation readonly  where ","relation send  where "," clone  where "," spawn  where ","relation extending  send ","relation includes  send ","relation where  send ","relation readonly  send ","relation send  send "," clone  send "," spawn  send ","relation extending  readonly ","relation includes  readonly ","relation where  readonly ","relation readonly  readonly ","relation send  readonly "," clone  readonly "," spawn  readonly ","options dup  [] ","(send\n  (array\n    (sym :joins)\n    (sym :select)\n    (sym :group)\n    (sym :order)\n    (sym :having)\n    (sym :limit)\n    (sym :offset)\n    (sym :from)\n    (sym :lock)\n    (sym :readonly)) :&\n  (send\n    (lvar :options dup ) :keys)) each ","options dup  keys ","options []  nil? ","options dup  delete_if "]}," ActiveRecord SpawnMethods only":{"type":"method","name":"only","children":[],"call":[" raise ","result send "," send ","Relation SINGLE_VALUE_METHODS  include? ","(send\n  (const\n    (const nil :Relation) :ASSOCIATION_METHODS) :+\n  (const\n    (const nil :Relation) :MULTI_VALUE_METHODS)) include? ","Relation ASSOCIATION_METHODS  + ","onlies each "," class new "," table "," class "," extensions ","(send\n  (const\n    (const nil :Relation) :SINGLE_VALUE_METHODS) :&\n  (lvar :onlies)) each ","Relation SINGLE_VALUE_METHODS  & ","(send\n  (begin\n    (send\n      (const\n        (const nil :Relation) :ASSOCIATION_METHODS) :+\n      (const\n        (const nil :Relation) :MULTI_VALUE_METHODS))) :&\n  (lvar :onlies)) each ","(send\n  (const\n    (const nil :Relation) :ASSOCIATION_METHODS) :+\n  (const\n    (const nil :Relation) :MULTI_VALUE_METHODS)) & ","result default_scoped= "," default_scoped "," relation_with "," values slice "," values ","onlies << ","o == ","onlies any? "," class new  send "," class new  default_scoped= "]}," ActiveRecord SpawnMethods except":{"type":"method","name":"except","children":[],"call":["result send "," send ","skips include? ","Relation SINGLE_VALUE_METHODS  each ","(send\n  (const\n    (const nil :Relation) :ASSOCIATION_METHODS) :+\n  (const\n    (const nil :Relation) :MULTI_VALUE_METHODS)) each ","Relation ASSOCIATION_METHODS  + "," class new "," table "," class "," extensions ","(send\n  (const\n    (const nil :Relation) :SINGLE_VALUE_METHODS) :-\n  (lvar :skips)) each ","Relation SINGLE_VALUE_METHODS  - ","(send\n  (begin\n    (send\n      (const\n        (const nil :Relation) :ASSOCIATION_METHODS) :+\n      (const\n        (const nil :Relation) :MULTI_VALUE_METHODS))) :-\n  (lvar :skips)) each ","(send\n  (const\n    (const nil :Relation) :ASSOCIATION_METHODS) :+\n  (const\n    (const nil :Relation) :MULTI_VALUE_METHODS)) - ","result default_scoped= "," default_scoped "," relation_with "," values except "," values "," class new  send "," class new  default_scoped= "]}," ActiveRecord SpawnMethods merge":{"type":"method","name":"merge","children":[],"call":["merged_relation send ","r extensions ","merged_relation lock_value= ","r lock_value ","merged_relation lock_value ","(lvasgn :value\n  (send\n    (lvar :r) :send\n    (dsym\n      (begin\n        (lvar :method))\n      (str \"_value\")))) nil? ","r send ","(send\n  (const\n    (const nil :Relation) :SINGLE_VALUE_METHODS) :reject) each ","m == ","Relation SINGLE_VALUE_METHODS  reject ","merged_relation where_values= ","p operand1 name == ","w operand1 name ","w operand1 ","p operand1 name ","p operand1 ","p operator == ","p operator ","p respond_to? ","merged_wheres reject ","w operator == ","w operator ","w respond_to? ","r where_values each ","r where_values ","merged_relation joins ","r joins_values ","merged_relation includes ","method == ","value empty? ","(send\n  (begin\n    (send\n      (const\n        (const nil :Relation) :ASSOCIATION_METHODS) :+\n      (const\n        (const nil :Relation) :MULTI_VALUE_METHODS))) :-\n  (array\n    (sym :joins)\n    (sym :where))) each ","(send\n  (const\n    (const nil :Relation) :ASSOCIATION_METHODS) :+\n  (const\n    (const nil :Relation) :MULTI_VALUE_METHODS)) - ","Relation ASSOCIATION_METHODS  + "," clone ","p is_a? ","w is_a? ","merged_relation create_with_value= ","r create_with_value ","@create_with_value merge ","merged_relation order_values= ","r order_values ","r order_values present? ","merged_relation joins group select from having ","r having_values ","merged_relation joins group select from ","r from_value ","merged_relation joins group select ","r select_values ","merged_relation joins group ","r group_values ","merged_relation offset_value= ","r offset_value ","r offset_value present? ","merged_relation limit_value= ","r limit_value ","r limit_value present? ","merged_relation readonly_value= ","r readonly_value ","r readonly_value nil? ","merged_relation eager_load preload includes ","r includes_values ","merged_relation eager_load preload ","r preload_values ","merged_relation eager_load ","r eager_load_values "," spawn ","(send\n  (const\n    (const\n      (const nil :ActiveRecord) :Relation) :SINGLE_VALUE_METHODS) :reject) each ","ActiveRecord Relation SINGLE_VALUE_METHODS  reject ","(lvasgn :value\n  (send\n    (lvar :r) :send\n    (dsym\n      (begin\n        (lvar :method))\n      (str \"_values\")))) blank? ","(send\n  (begin\n    (send\n      (const\n        (const\n          (const nil :ActiveRecord) :Relation) :ASSOCIATION_METHODS) :+\n      (const\n        (const\n          (const nil :ActiveRecord) :Relation) :MULTI_VALUE_METHODS))) :reject) each ","(sym :joins) include? ","(send\n  (const\n    (const\n      (const nil :ActiveRecord) :Relation) :ASSOCIATION_METHODS) :+\n  (const\n    (const\n      (const nil :ActiveRecord) :Relation) :MULTI_VALUE_METHODS)) reject ","ActiveRecord Relation ASSOCIATION_METHODS  + ","value present? ","(send\n  (begin\n    (send\n      (const\n        (const nil :Relation) :ASSOCIATION_METHODS) :+\n      (const\n        (const nil :Relation) :MULTI_VALUE_METHODS))) :reject) each ","(send\n  (const\n    (const nil :Relation) :ASSOCIATION_METHODS) :+\n  (const\n    (const nil :Relation) :MULTI_VALUE_METHODS)) reject ","value nil? ","(send\n  (send\n    (lvar :merged_wheres) :reverse) :reject) reverse ","seen [] []= ","seen [] ","seen [] [] ","w left relation name ","w left relation ","w left ","w left name ","merged_wheres reverse reject ","merged_wheres reverse ","h []= ","Hash  new ","@where_values empty? ","@where_values + ","merged_relation order_values + ","merged_relation order_values ","r reorder_flag ","order_value present? ","merged_relation send + ","(send\n  (const\n    (const nil :Relation) :MULTI_VALUE_METHODS) :-\n  (array\n    (sym :joins)\n    (sym :where)\n    (sym :order))) each ","Relation MULTI_VALUE_METHODS  - ","Relation ASSOCIATION_METHODS  each "," to_a & "," to_a ","r is_a? ","merged_relation create_with ","r create_with_value empty? ","(send\n  (const\n    (const nil :Relation) :SINGLE_VALUE_METHODS) :-\n  (array\n    (sym :lock)\n    (sym :create_with))) each ","Relation SINGLE_VALUE_METHODS  - ","merged_relation joins_values ","(send\n  (const\n    (const nil :Relation) :MULTI_VALUE_METHODS) :-\n  (array\n    (sym :joins)\n    (sym :where))) each ","r with_default_scope ","r klass != "," klass ","r klass ","r default_scoped? ","merged_relation reordering_value= ","r reordering_value ","(send\n  (const\n    (const nil :Relation) :SINGLE_VALUE_METHODS) :-\n  (array\n    (sym :lock)\n    (sym :create_with)\n    (sym :reordering))) each "," merge_joins "," merge_relation_method ","w left respond_to? "," spawn merge! ","other is_a? "," raise ","other inspect "," records & "," records ","merged_relation joins  send ","merged_relation includes  send "," clone  send ","merged_relation joins group select from having  send ","merged_relation eager_load preload includes  send "," spawn  send ","merged_relation create_with  send ","mer with_default_scope ged_r with_default_scope elation send ","r with_default_scope  extensions ","merged_relation lock_r send = ","merged_relation joins  lock_value= ","merged_relation includes  lock_value= "," clone  lock_value= ","merged_relation joins group select from having  lock_value= ","merged_relation eager_load preload includes  lock_value= "," spawn  lock_value= ","merged_relation create_with  lock_value= ","mer with_default_scope ged_r with_default_scope elation lock_value= ","r lock_r send  ","r with_default_scope  lock_value ","merged_relation lock_r send  ","merged_relation joins  lock_value ","merged_relation includes  lock_value "," clone  lock_value ","merged_relation joins group select from having  lock_value ","merged_relation eager_load preload includes  lock_value "," spawn  lock_value ","merged_relation create_with  lock_value ","mer with_default_scope ged_r with_default_scope elation lock_value ","(lvasgn :r send \n  (send\n    (lvar :r) :send\n    (dsym\n      (begin\n        (lvar :method))\n      (str \"_r send \")))) nil? ","(lvasgn :value\n  (send\n    (lvar with_default_scope  :r with_default_scope ) :send\n    (dsym\n      (begin\n        (lvar with_default_scope  :method))\n      (str with_default_scope  \"_value\")))) nil? ","r with_default_scope  send ","(send\n  (const\n    (const nil :Relation) :SINGLE_VALUE_METHODS) :r with_default_scope eject) each ","Relation SINGLE_VALUE_METHODS  r with_default_scope eject ","merged_relation where_r send s= ","merged_relation joins  where_values= ","merged_relation includes  where_values= "," clone  where_values= ","merged_relation joins group select from having  where_values= ","merged_relation eager_load preload includes  where_values= "," spawn  where_values= ","merged_relation create_with  where_values= ","mer with_default_scope ged_r with_default_scope elation wher with_default_scope e_values= ","p operand1 w left name  == ","p oper with_default_scope and1 name == ","w operand1 w left name  ","w oper with_default_scope and1 name ","w oper with_default_scope and1 ","p operand1 w left name  ","p oper with_default_scope and1 name ","p oper with_default_scope and1 ","p oper with_default_scope ator with_default_scope  == ","p oper with_default_scope ator with_default_scope  ","p r with_default_scope espond_to? ","(send\n  (send\n    (lvar :merged_wheres) :reverse) :reject) reverse  reject ","@where_values +  reject ","mer with_default_scope ged_wher with_default_scope es r with_default_scope eject ","w oper with_default_scope ator with_default_scope  == ","w oper with_default_scope ator with_default_scope  ","w r with_default_scope espond_to? ","r where_r send s each ","r with_default_scope  wher with_default_scope e_values each ","r where_r send s ","r with_default_scope  wher with_default_scope e_values ","merged_relation joins  joins ","merged_relation includes  joins "," clone  joins ","merged_relation joins group select from having  joins ","merged_relation eager_load preload includes  joins "," spawn  joins ","merged_relation create_with  joins ","mer with_default_scope ged_r with_default_scope elation joins ","r joins_r send s ","r with_default_scope  joins_values ","merged_relation joins  includes ","merged_relation includes  includes "," clone  includes ","merged_relation joins group select from having  includes ","merged_relation eager_load preload includes  includes "," spawn  includes ","merged_relation create_with  includes ","mer with_default_scope ged_r with_default_scope elation includes ","r send  empty? ","(send\n  (begin\n    (send\n      (const\n        (const nil :Relation) :ASSOCIATION_METHODS) :+\n      (const\n        (const nil :Relation) :MULTI_VALUE_METHODS))) :-\n  (ar with_default_scope r with_default_scope ay\n    (sym :joins)\n    (sym :wher with_default_scope e))) each ","merged_relation create_with_r send = ","merged_relation joins  create_with_value= ","merged_relation includes  create_with_value= "," clone  create_with_value= ","merged_relation joins group select from having  create_with_value= ","merged_relation eager_load preload includes  create_with_value= "," spawn  create_with_value= ","merged_relation create_with  create_with_value= ","mer with_default_scope ged_r with_default_scope elation cr with_default_scope eate_with_value= ","r create_with_r send  ","r with_default_scope  cr with_default_scope eate_with_value ","@create_with_r send  merge ","@cr with_default_scope eate_with_value mer with_default_scope ge ","merged_relation order_r send s= ","merged_relation joins  order_values= ","merged_relation includes  order_values= "," clone  order_values= ","merged_relation joins group select from having  order_values= ","merged_relation eager_load preload includes  order_values= "," spawn  order_values= ","merged_relation create_with  order_values= ","merged_relation r order_values s= ","mer with_default_scope ged_r with_default_scope elation or with_default_scope der with_default_scope _values= ","r order_r send s ","r r order_values s ","r with_default_scope  or with_default_scope der with_default_scope _values ","r order_r send s present? ","r r order_values s present? ","r with_default_scope  or with_default_scope der with_default_scope _values pr with_default_scope esent? ","merged_relation joins  joins group select from having ","merged_relation includes  joins group select from having "," clone  joins group select from having ","merged_relation joins group select from having  joins group select from having ","merged_relation eager_load preload includes  joins group select from having "," spawn  joins group select from having ","merged_relation create_with  joins group select from having ","mer with_default_scope ged_r with_default_scope elation joins gr with_default_scope oup select fr with_default_scope om having ","r having_r send s ","r with_default_scope  having_values ","merged_relation joins  joins group select from ","merged_relation includes  joins group select from "," clone  joins group select from ","merged_relation joins group select from having  joins group select from ","merged_relation eager_load preload includes  joins group select from "," spawn  joins group select from ","merged_relation create_with  joins group select from ","mer with_default_scope ged_r with_default_scope elation joins gr with_default_scope oup select fr with_default_scope om ","r from_r send  ","r with_default_scope  fr with_default_scope om_value ","merged_relation joins  joins group select ","merged_relation includes  joins group select "," clone  joins group select ","merged_relation joins group select from having  joins group select ","merged_relation eager_load preload includes  joins group select "," spawn  joins group select ","merged_relation create_with  joins group select ","mer with_default_scope ged_r with_default_scope elation joins gr with_default_scope oup select ","r select_r send s ","r with_default_scope  select_values ","merged_relation joins  joins group ","merged_relation includes  joins group "," clone  joins group ","merged_relation joins group select from having  joins group ","merged_relation eager_load preload includes  joins group "," spawn  joins group ","merged_relation create_with  joins group ","mer with_default_scope ged_r with_default_scope elation joins gr with_default_scope oup ","r group_r send s ","r with_default_scope  gr with_default_scope oup_values ","merged_relation offset_r send = ","merged_relation joins  offset_value= ","merged_relation includes  offset_value= "," clone  offset_value= ","merged_relation joins group select from having  offset_value= ","merged_relation eager_load preload includes  offset_value= "," spawn  offset_value= ","merged_relation create_with  offset_value= ","mer with_default_scope ged_r with_default_scope elation offset_value= ","r offset_r send  ","r with_default_scope  offset_value ","r offset_r send  present? ","r with_default_scope  offset_value pr with_default_scope esent? ","merged_relation limit_r send = ","merged_relation joins  limit_value= ","merged_relation includes  limit_value= "," clone  limit_value= ","merged_relation joins group select from having  limit_value= ","merged_relation eager_load preload includes  limit_value= "," spawn  limit_value= ","merged_relation create_with  limit_value= ","mer with_default_scope ged_r with_default_scope elation limit_value= ","r limit_r send  ","r with_default_scope  limit_value ","r limit_r send  present? ","r with_default_scope  limit_value pr with_default_scope esent? ","merged_relation readonly_r send = ","merged_relation joins  readonly_value= ","merged_relation includes  readonly_value= "," clone  readonly_value= ","merged_relation joins group select from having  readonly_value= ","merged_relation eager_load preload includes  readonly_value= "," spawn  readonly_value= ","merged_relation create_with  readonly_value= ","mer with_default_scope ged_r with_default_scope elation r with_default_scope eadonly_value= ","r readonly_r send  ","r with_default_scope  r with_default_scope eadonly_value ","r readonly_r send  nil? ","r with_default_scope  r with_default_scope eadonly_value nil? ","merged_relation joins  eager_load preload includes ","merged_relation includes  eager_load preload includes "," clone  eager_load preload includes ","merged_relation joins group select from having  eager_load preload includes ","merged_relation eager_load preload includes  eager_load preload includes "," spawn  eager_load preload includes ","merged_relation create_with  eager_load preload includes ","mer with_default_scope ged_r with_default_scope elation eager with_default_scope _load pr with_default_scope eload includes ","r includes_r send s ","r with_default_scope  includes_values ","merged_relation joins  eager_load preload ","merged_relation includes  eager_load preload "," clone  eager_load preload ","merged_relation joins group select from having  eager_load preload ","merged_relation eager_load preload includes  eager_load preload "," spawn  eager_load preload ","merged_relation create_with  eager_load preload ","mer with_default_scope ged_r with_default_scope elation eager with_default_scope _load pr with_default_scope eload ","r preload_r send s ","r with_default_scope  pr with_default_scope eload_values ","merged_relation joins  eager_load ","merged_relation includes  eager_load "," clone  eager_load ","merged_relation joins group select from having  eager_load ","merged_relation eager_load preload includes  eager_load "," spawn  eager_load ","merged_relation create_with  eager_load ","mer with_default_scope ged_r with_default_scope elation eager with_default_scope _load ","r eager_load_r send s ","r with_default_scope  eager with_default_scope _load_values ","(send\n  (const\n    (const\n      (const nil :ActiveRecor with_default_scope d) :Relation) :SINGLE_VALUE_METHODS) :r with_default_scope eject) each ","ActiveRecor with_default_scope d Relation SINGLE_VALUE_METHODS  r with_default_scope eject ","(lvasgn :r send \n  (send\n    (lvar :r) :send\n    (dsym\n      (begin\n        (lvar :method))\n      (str \"_r send s\")))) blank? ","(lvasgn :value\n  (send\n    (lvar with_default_scope  :r with_default_scope ) :send\n    (dsym\n      (begin\n        (lvar with_default_scope  :method))\n      (str with_default_scope  \"_values\")))) blank? ","(send\n  (begin\n    (send\n      (const\n        (const\n          (const nil :ActiveRecor with_default_scope d) :Relation) :ASSOCIATION_METHODS) :+\n      (const\n        (const\n          (const nil :ActiveRecor with_default_scope d) :Relation) :MULTI_VALUE_METHODS))) :r with_default_scope eject) each ","(send\n  (const\n    (const\n      (const nil :ActiveRecor with_default_scope d) :Relation) :ASSOCIATION_METHODS) :+\n  (const\n    (const\n      (const nil :ActiveRecor with_default_scope d) :Relation) :MULTI_VALUE_METHODS)) r with_default_scope eject ","ActiveRecor with_default_scope d Relation ASSOCIATION_METHODS  + ","r send  present? ","value pr with_default_scope esent? ","(send\n  (begin\n    (send\n      (const\n        (const nil :Relation) :ASSOCIATION_METHODS) :+\n      (const\n        (const nil :Relation) :MULTI_VALUE_METHODS))) :r with_default_scope eject) each ","(send\n  (const\n    (const nil :Relation) :ASSOCIATION_METHODS) :+\n  (const\n    (const nil :Relation) :MULTI_VALUE_METHODS)) r with_default_scope eject ","r send  nil? ","(send\n  (send\n    (lvar :(send\n  (send\n    (lvar :merged_wheres) :reverse) :reject) reverse ) :reverse) :reject) reverse ","(send\n  (send\n    (lvar :@where_values + ) :reverse) :reject) reverse ","(send\n  (send\n    (lvar with_default_scope  :mer with_default_scope ged_wher with_default_scope es) :r with_default_scope ever with_default_scope se) :r with_default_scope eject) r with_default_scope ever with_default_scope se ","w left relation w left name  ","w left r with_default_scope elation name ","w left r with_default_scope elation ","w left w left name  ","(send\n  (send\n    (lvar :merged_wheres) :reverse) :reject) reverse  reverse reject ","@where_values +  reverse reject ","mer with_default_scope ged_wher with_default_scope es r with_default_scope ever with_default_scope se r with_default_scope eject ","(send\n  (send\n    (lvar :merged_wheres) :reverse) :reject) reverse  reverse ","@where_values +  reverse ","mer with_default_scope ged_wher with_default_scope es r with_default_scope ever with_default_scope se ","@where_r send s empty? ","@wher with_default_scope e_values empty? ","@where_r send s + ","@wher with_default_scope e_values + ","merged_relation order_r send s + ","merged_relation joins  order_values + ","merged_relation includes  order_values + "," clone  order_values + ","merged_relation joins group select from having  order_values + ","merged_relation eager_load preload includes  order_values + "," spawn  order_values + ","merged_relation create_with  order_values + ","merged_relation r order_values s + ","mer with_default_scope ged_r with_default_scope elation or with_default_scope der with_default_scope _values + ","merged_relation order_r send s ","merged_relation joins  order_values ","merged_relation includes  order_values "," clone  order_values ","merged_relation joins group select from having  order_values ","merged_relation eager_load preload includes  order_values "," spawn  order_values ","merged_relation create_with  order_values ","merged_relation r order_values s ","mer with_default_scope ged_r with_default_scope elation or with_default_scope der with_default_scope _values ","r with_default_scope  r with_default_scope eor with_default_scope der with_default_scope _flag ","order_r send  present? ","r order_values  present? ","or with_default_scope der with_default_scope _value pr with_default_scope esent? ","merged_relation joins  send + ","merged_relation includes  send + "," clone  send + ","merged_relation joins group select from having  send + ","merged_relation eager_load preload includes  send + "," spawn  send + ","merged_relation create_with  send + ","mer with_default_scope ged_r with_default_scope elation send + ","(send\n  (const\n    (const nil :Relation) :MULTI_VALUE_METHODS) :-\n  (ar with_default_scope r with_default_scope ay\n    (sym :joins)\n    (sym :wher with_default_scope e)\n    (sym :or with_default_scope der with_default_scope ))) each ","r with_default_scope  is_a? ","merged_relation joins  create_with ","merged_relation includes  create_with "," clone  create_with ","merged_relation joins group select from having  create_with ","merged_relation eager_load preload includes  create_with "," spawn  create_with ","merged_relation create_with  create_with ","mer with_default_scope ged_r with_default_scope elation cr with_default_scope eate_with ","r create_with_r send  empty? ","r with_default_scope  cr with_default_scope eate_with_value empty? ","(send\n  (const\n    (const nil :Relation) :SINGLE_VALUE_METHODS) :-\n  (ar with_default_scope r with_default_scope ay\n    (sym :lock)\n    (sym :cr with_default_scope eate_with))) each ","merged_relation joins_r send s ","merged_relation joins  joins_values ","merged_relation includes  joins_values "," clone  joins_values ","merged_relation joins group select from having  joins_values ","merged_relation eager_load preload includes  joins_values "," spawn  joins_values ","merged_relation create_with  joins_values ","mer with_default_scope ged_r with_default_scope elation joins_values ","(send\n  (const\n    (const nil :Relation) :MULTI_VALUE_METHODS) :-\n  (ar with_default_scope r with_default_scope ay\n    (sym :joins)\n    (sym :wher with_default_scope e))) each ","r with_default_scope  with_default_scope ","r with_default_scope  klass != ","r with_default_scope  klass ","r with_default_scope  default_scoped? ","merged_relation reordering_r send = ","merged_relation joins  reordering_value= ","merged_relation includes  reordering_value= "," clone  reordering_value= ","merged_relation joins group select from having  reordering_value= ","merged_relation eager_load preload includes  reordering_value= "," spawn  reordering_value= ","merged_relation create_with  reordering_value= ","mer with_default_scope ged_r with_default_scope elation r with_default_scope eor with_default_scope der with_default_scope ing_value= ","r reordering_r send  ","r with_default_scope  r with_default_scope eor with_default_scope der with_default_scope ing_value ","(send\n  (const\n    (const nil :Relation) :SINGLE_VALUE_METHODS) :-\n  (ar with_default_scope r with_default_scope ay\n    (sym :lock)\n    (sym :cr with_default_scope eate_with)\n    (sym :r with_default_scope eor with_default_scope der with_default_scope ing))) each "," mer with_default_scope ge_joins "," mer with_default_scope ge_r with_default_scope elation_method ","w left r with_default_scope espond_to? "," spawn mer with_default_scope ge! ","other with_default_scope  is_a? "," r with_default_scope aise ","other with_default_scope  inspect "," r with_default_scope ecor with_default_scope ds & "," r with_default_scope ecor with_default_scope ds "]}," ActiveRecord QueryMethods array_of_strings?":{"type":"method","name":"array_of_strings?","children":[],"call":["obj is_a? ","o all? ","o is_a? "]}," ActiveRecord QueryMethods reverse_sql_order":{"type":"method","name":"reverse_sql_order","children":[],"call":["(send\n  (send\n    (send\n      (lvar :order_query) :to_s) :split\n    (regexp\n      (str \",\")\n      (regopt))) :each) join ","s concat ","s gsub! ","s match ","order_query to_s split each ","order_query to_s split ","order_query to_s ","(send\n  (lvar :order_query) :map) flatten ","o to_s split collect ","o to_s split ","o to_s ","o reverse ","order_query map "," quoted_primary_key "," quoted_table_name ","order_query empty? ","order_query join split collect ","order_query join split ","order_query join ","s strip! ","memo []= ","dir == ","o each_with_object ","order_query flat_map ","o to_s split map! ","o split map! ","o split "," raise ","o inspect "," does_not_support_reverse? ","o desc "," arel_attribute desc "," arel_attribute "," primary_key "," table [] desc "," table [] "," table ","s << "]}," ActiveRecord QueryMethods apply_modules":{"type":"method","name":"apply_modules","children":[],"call":[" extend ","values each ","values present? ","Array  wrap ","modules each ","modules empty? ","Array  wrap  each ","Array  wrap  present? "]}," ActiveRecord QueryMethods build_select":{"type":"method","name":"build_select","children":[],"call":["arel project ","selects last ","(send\n  (send\n    (lvar :selects) :last) :=~\n  (regexp\n    (str \"^COUNT\\\\(\")\n    (regopt))) ! ","selects last =~ ","s is_a? ! ","s is_a? ","selects all? ","Arel SqlLiteral  new ","@klass quoted_table_name + ","@klass quoted_table_name ","selects empty? ","selects present? ","@klass arel_table [] ","Arel  star ","@klass arel_table "," arel_table [] "," arel_table "," columns_hash key? ","field to_s "," columns_hash ","selects map ","selects empty? ! "," arel_columns "," select_values uniq "," select_values "," select_values any? ","String  === ","Symbol  === "," arel_attribute "," klass column_names map "," klass column_names "," klass "," klass ignored_columns any? "," klass ignored_columns "," table [] "," table ","@klass column_names ","@klass ignored_columns any? ","@klass ignored_columns "," klass enumerate_columns_in_select_statements "]}," ActiveRecord QueryMethods build_joins":{"type":"method","name":"build_joins","children":[],"call":["relation join ","relation join on ","tj [] ","joined_associations << ","ja [] == ","ja [] ","joined_associations detect ","to_join each ","to_join << ","association association_join ","association join_class ","association association_join last ","association_relation last ","association association_join first ","association_relation first ","(lvasgn :association_relation\n  (send\n    (lvar :association) :relation)) is_a? ","association relation ","join_dependency join_associations each ","join_dependency join_associations ","stashed_association_joins empty? ","association_joins empty? ","join_dependency graft ","ActiveRecord Associations ClassMethods JoinDependency  new "," custom_join_sql ","joins - - ","joins - ","joins grep ","association_joins << "," array_of_strings? ! "," array_of_strings? ","(const nil :Hash) include? ","join class ","joins each ","(send\n  (ivar :@joins_values) :map) uniq ","j strip ","j respond_to? ","@joins_values map ","j is_a? ","joins select ","to_join uniq each ","to_join uniq ","association join_type ","manager join_sources concat ","manager join_sources ","join_nodes uniq ","association join_to ","join_dependency alias_tracker aliased_name_for ","join left name downcase ","join left name ","join left ","join_dependency alias_tracker ","join_nodes each ","ActiveRecord Associations JoinDependency  new "," custom_join_ast ","(send\n  (begin\n    (or\n      (send\n        (lvar :buckets) :[]\n        (str \"string_join\"))\n      (array))) :map) uniq ","x strip ","(or\n  (send\n    (lvar :buckets) :[]\n    (str \"string_join\"))\n  (array)) map ","buckets [] "," raise ","unknown class: %s % ","join class name ","joins group_by ","join_nodes + ","(or\n  (send\n    (lvar :buckets) :[]\n    (str \"join_node\"))\n  (array)) uniq ","(send\n  (begin\n    (or\n      (send\n        (lvar :buckets) :[]\n        (sym :string_join))\n      (array))) :map) uniq ","(or\n  (send\n    (lvar :buckets) :[]\n    (sym :string_join))\n  (array)) map ","(or\n  (send\n    (lvar :buckets) :[]\n    (sym :join_node))\n  (array)) uniq ","manager from ","join_dependency join_constraints ","(or\n  (send\n    (lvar :buckets) :[]\n    (sym :string_join))\n  (array)) map uniq ","manager bind_values concat ","info binds ","manager bind_values ","info joins each ","info joins ","join_infos each "," build_join_query ","buckets [] << ","buckets [] empty? ! ","buckets [] empty? ","join_node is_a? ","joins shift ","joins first is_a? ","joins first ","(send\n  (lvar :joins) :map!) delete_if uniq! ","(send\n  (lvar :joins) :map!) delete_if "," table create_string_join ","Arel  sql ","join strip "," table ","join blank? ","join is_a? ","joins map! "," construct_join_dependency "," valid_association_list "," left_outer_joins_values flatten "," left_outer_joins_values "," left_outer_joins_values empty? ","h []= ","Hash  new ","joins << ","joins unshift ","joins pop ","joins last base_klass == "," klass ","joins last base_klass ","joins last ","joins last is_a? ","buckets [] concat ","join_node is_a? ! ","stashed_left_joins unshift ","join_sources concat ","join_nodes empty? "," references_values "," alias_tracker ","leading_joins + ","stashed_joins empty? ","leading_joins empty? "," build_join_buckets "," joins_values empty? "," joins_values ","named_joins empty? ","relation join on  join ","relation join on  join on ","association_relation join on  last ","association relation  last ","association_relation join on  first ","association relation  first ","(lvasgn :association_relation join on \n  (send\n    (lvar :association) :relation join on )) is_a? ","(lvasgn :association relation \n  (send\n    (lvar :association) :relation)) is_a? ","association relation join on  ","ActiveRecord Associations ClassMethods JoinDependency  new  join_associations each ","ActiveRecord Associations JoinDependency  new  join_associations each "," construct_join_dependency  join_associations each ","ActiveRecord Associations ClassMethods JoinDependency  new  join_associations ","ActiveRecord Associations JoinDependency  new  join_associations "," construct_join_dependency  join_associations ","joins grep  empty? ","stashed_association_(send\n  (ivar :@joins_values) :map) uniq  empty? ","stashed_association_join_dependency join_constraints  empty? ","stashed_buckets []  empty? ","association_(send\n  (ivar :@joins_values) :map) uniq  empty? ","association_join_dependency join_constraints  empty? ","buckets []  empty? ","ActiveRecord Associations ClassMethods JoinDependency  new  graft ","ActiveRecord Associations JoinDependency  new  graft "," construct_join_dependency  graft ","(send\n  (ivar :@joins_values) :map) uniq  - - ","join_dependency join_constraints  - - ","(send\n  (ivar :@joins_values) :map) uniq  - ","join_dependency join_constraints  - ","(send\n  (ivar :@joins_values) :map) uniq  grep ","join_dependency join_constraints  grep ","association_(send\n  (ivar :@joins_values) :map) uniq  << ","association_join_dependency join_constraints  << ","buckets []  << ","(send\n  (ivar :@joins_values) :map) uniq  each ","join_dependency join_constraints  each ","(send\n  (ivar :@(send\n  (ivar :@joins_values) :map) uniq _values) :map) uniq ","(send\n  (ivar :@join_dependency join_constraints _values) :map) uniq ","@(send\n  (ivar :@joins_values) :map) uniq _values map ","@join_dependency join_constraints _values map ","(send\n  (ivar :@joins_values) :map) uniq  select ","join_dependency join_constraints  select ","(or\n  (send\n    (lvar :buckets) :[]\n    (str \"join_node\"))\n  (array)) uniq  uniq ","(or\n  (send\n    (lvar :buckets) :[]\n    (sym :join_node))\n  (array)) uniq  uniq ","buckets []  uniq ","joins shift s uniq ","ActiveRecord Associations ClassMethods JoinDependency  new  alias_tracker aliased_name_for ","ActiveRecord Associations JoinDependency  new  alias_tracker aliased_name_for "," construct_join_dependency  alias_tracker aliased_name_for ","join_dependency  alias_tracker  aliased_name_for ","ActiveRecord Associations ClassMethods JoinDependency  new  alias_tracker ","ActiveRecord Associations JoinDependency  new  alias_tracker "," construct_join_dependency  alias_tracker ","join_dependency  alias_tracker  ","(or\n  (send\n    (lvar :buckets) :[]\n    (str \"join_node\"))\n  (array)) uniq  each ","(or\n  (send\n    (lvar :buckets) :[]\n    (sym :join_node))\n  (array)) uniq  each ","buckets []  each ","joins shift s each ","(send\n  (ivar :@joins_values) :map) uniq  group_by ","join_dependency join_constraints  group_by ","(or\n  (send\n    (lvar :buckets) :[]\n    (str \"join_node\"))\n  (array)) uniq  + ","(or\n  (send\n    (lvar :buckets) :[]\n    (sym :join_node))\n  (array)) uniq  + ","buckets []  + ","joins shift s + ","(or\n  (send\n    (lvar :buckets) :[]\n    (str \"joins shift \"))\n  (array)) uniq ","(or\n  (send\n    (lvar :buckets) :[]\n    (sym :joins shift ))\n  (array)) uniq ","ActiveRecord Associations ClassMethods JoinDependency  new  join_constraints ","ActiveRecord Associations JoinDependency  new  join_constraints "," construct_join_dependency  join_constraints ","info (send\n  (ivar :@joins_values) :map) uniq  each ","info join_dependency join_constraints  each ","info (send\n  (ivar :@joins_values) :map) uniq  ","info join_dependency join_constraints  ","joins shift  is_a? ","(send\n  (ivar :@joins_values) :map) uniq  shift ","join_dependency join_constraints  shift ","(send\n  (ivar :@joins_values) :map) uniq  first is_a? ","join_dependency join_constraints  first is_a? ","(send\n  (ivar :@joins_values) :map) uniq  first ","join_dependency join_constraints  first ","(send\n  (lvar :(send\n  (ivar :@joins_values) :map) uniq ) :map!) delete_if uniq! ","(send\n  (lvar :join_dependency join_constraints ) :map!) delete_if uniq! ","(send\n  (lvar :(send\n  (ivar :@joins_values) :map) uniq ) :map!) delete_if ","(send\n  (lvar :join_dependency join_constraints ) :map!) delete_if ","(send\n  (ivar :@joins_values) :map) uniq  map! ","join_dependency join_constraints  map! "," construct_ActiveRecord Associations ClassMethods JoinDependency  new  "," construct_ActiveRecord Associations JoinDependency  new  "," construct_ construct_join_dependency  "," left_outer_(send\n  (ivar :@joins_values) :map) uniq _values flatten "," left_outer_join_dependency join_constraints _values flatten "," left_outer_(send\n  (ivar :@joins_values) :map) uniq _values "," left_outer_join_dependency join_constraints _values "," left_outer_(send\n  (ivar :@joins_values) :map) uniq _values empty? "," left_outer_join_dependency join_constraints _values empty? ","(send\n  (ivar :@joins_values) :map) uniq  << ","join_dependency join_constraints  << ","(send\n  (ivar :@joins_values) :map) uniq  unshift ","join_dependency join_constraints  unshift ","(send\n  (ivar :@joins_values) :map) uniq  pop ","join_dependency join_constraints  pop ","(send\n  (ivar :@joins_values) :map) uniq  last base_klass == ","join_dependency join_constraints  last base_klass == ","(send\n  (ivar :@joins_values) :map) uniq  last base_klass ","join_dependency join_constraints  last base_klass ","(send\n  (ivar :@joins_values) :map) uniq  last ","join_dependency join_constraints  last ","(send\n  (ivar :@joins_values) :map) uniq  last is_a? ","join_dependency join_constraints  last is_a? ","joins shift  is_a? ! ","stashed_left_(send\n  (ivar :@joins_values) :map) uniq  unshift ","stashed_left_join_dependency join_constraints  unshift ","stashed_ valid_association_list  unshift ","(or\n  (send\n    (lvar :buckets) :[]\n    (str \"join_node\"))\n  (array)) uniq  empty? ","(or\n  (send\n    (lvar :buckets) :[]\n    (sym :join_node))\n  (array)) uniq  empty? ","joins shift s empty? ","  alias_tracker  ","leading_(send\n  (ivar :@joins_values) :map) uniq  + ","leading_join_dependency join_constraints  + ","stashed_(send\n  (ivar :@joins_values) :map) uniq  empty? ","stashed_join_dependency join_constraints  empty? ","leading_(send\n  (ivar :@joins_values) :map) uniq  empty? ","leading_join_dependency join_constraints  empty? "," (send\n  (ivar :@joins_values) :map) uniq _values empty? "," join_dependency join_constraints _values empty? "," (send\n  (ivar :@joins_values) :map) uniq _values "," join_dependency join_constraints _values ","named_(send\n  (ivar :@joins_values) :map) uniq  empty? ","named_join_dependency join_constraints  empty? "]}," ActiveRecord QueryMethods build_where":{"type":"method","name":"build_where","children":[],"call":["PredicateBuilder  new build_from_hash "," table ","PredicateBuilder  new "," table engine ","@klass send ","(lvar :opts) + ","other empty? ","args first ","builder build_from_hash ","args first is_a? ","args size > ","args size ","(const nil :String) include? ","args first class ","args blank? ","PredicateBuilder  build_from_hash "," klass ","rel bind_values "," bind_values ","attributes values grep ","attributes values ","values grep ","other first values ","other first ","Hash  === ","PredicateBuilder  resolve_column_aliases "," add_relations_to_bind_values "," create_binds "," bind_values length ","(lvar :args first ) + ","(lvar :PredicateBuilder  resolve_column_aliases ) + ","PredicateBuilder  new  build_from_hash ","rel bind_other first values  "," bind_other first values  ","@klass send  values grep ","attributes other first values  grep ","@klass send  values ","attributes other first values  ","other first values  grep ","other first other first values  "," add_relations_to_bind_other first values  "," bind_other first values  length "]}," ActiveRecord QueryMethods build_arel":{"type":"method","name":"build_arel","children":[],"call":["arel lock ","arel from "," build_select ","@select_values uniq ","arel order ","o present? ","@order_values uniq select ","@order_values uniq ","@order_values empty? ","arel group ","g present? ","@group_values uniq select ","@group_values uniq ","@group_values empty? ","arel skip ","arel take ","arel having ","h present? ","@having_values uniq select ","@having_values uniq ","@having_values empty? ","arel where ","Arel SqlLiteral  new ","where to_sql ","where is_a? ","(send\n  (ivar :@where_values) :-\n  (array\n    (str \"\"))) uniq each ","(send\n  (ivar :@where_values) :-\n  (array\n    (str \"\"))) uniq ","@where_values - "," build_joins ","@joins_values empty? "," table ","@from_value present? ","arel project ","quoted_table_name + ","s present? ","selects each ","selects present? ","@klass quoted_table_name ","o to_s ","@order_values uniq each ","@group_values uniq each ","@offset_value present? ","@limit_value present? ","h is_a? ","@having_values uniq each ","where blank? ","@where_values uniq each ","@where_values uniq ","arel join ","join join "," array_of_strings? ","arel join on ","join on ","join join_class ","join relation ","join blank? ","joins each ","tj [] ","joined_associations << ","ja [] == ","ja [] ","joined_associations detect ","to_join each ","to_join << ","association association_join ","association association_join last ","association_relation last ","association association_join first ","association_relation first ","(lvasgn :association_relation\n  (send\n    (lvar :association) :relation)) is_a? ","association relation ","join_dependency join_associations each ","join_dependency join_associations ","ActiveRecord Associations ClassMethods JoinDependency  new ","association_joins uniq ","association_joins any? ","association_joins << "," array_of_strings? ! ","(const nil :Hash) include? ","join class ","(send\n  (ivar :@joins_values) :map) uniq ","j strip ","j respond_to? ","@joins_values map ","@lock_value present? ","(send\n  (send\n    (ivar :@order_values) :uniq) :select) map ","association join_class ","stashed_association_joins empty? ","association_joins empty? ","join_dependency graft "," custom_join_sql ","j blank? ","(send\n  (send\n    (lvar :joins) :-\n    (lvar :association_joins)) :-\n  (lvar :stashed_association_joins)) reject ","joins - - ","joins - ","j is_a? ","joins select ","@order_values present? ","@group_values present? ","@having_values present? ","@joins_values present? ","o blank? ","@order_values uniq reject ","g blank? ","@group_values uniq reject "," connection sanitize_limit "," connection ","h blank? ","@having_values uniq reject "," collapse_wheres ","Arel Nodes Grouping  new ","Arel  sql ","String  === ","order uniq reject ","order uniq ","order empty? "," reverse_sql_order "," table from ","@offset_value to_i ","arel distinct "," lock_value "," build_from "," from_value "," distinct_value "," select_values uniq "," select_values "," build_order "," group_values uniq reject "," group_values uniq "," group_values "," group_values empty? "," offset_value to_i "," offset_value "," limit_value "," having_values uniq reject "," having_values uniq "," having_values "," having_values empty? ","(send\n  (send nil :where_values) :-\n  (array\n    (str \"\"))) uniq "," where_values - "," where_values "," joins_values "," joins_values empty? ","Arel SelectManager  new "," table engine "," uniq_value "," joins_values flatten ","bp replace "," connection substitute_at ","bvs [] first ","bvs [] ","arel ast grep each_with_index ","arel ast grep ","arel ast ","arel bind_values + "," bind_values ","arel bind_values "," arel_columns ","bvs any? ","arel bind_values any? "," from_clause empty? "," from_clause ","Arel Nodes BindParam  new "," string_containing_comma? "," having_clause ast "," having_clause "," having_clause empty? "," where_clause ast "," where_clause "," where_clause empty? "," build_left_outer_joins "," left_outer_joins_values flatten "," left_outer_joins_values "," left_outer_joins_values empty? ","ActiveModel Attribute  with_cast_value ","Type  default_value ","OFFSET freeze ","LIMIT freeze ","arel comment "," annotate_values "," annotate_values empty? ","arel optimizer_hints "," optimizer_hints_values "," optimizer_hints_values empty? "," left_outer_joins_values empty? ! "," joins_values empty? ! ","ActiveSupport Deprecation  warn ","(str \"              Duplicated query annotations are no longer shown in queries in Rails 6.2.\\n\") squish "," klass table_name "," klass "," klass name ","annotates == ","annotates uniq ","annotates size > ","annotates size "," build_cast_value ","arel join_sources ","(str \"              Duplicated query annotations are no longer shown in queries in Rails 7.0.\\n\") squish "," build_with ","arel lock  lock ","arel from  lock "," build_select  lock ","arel order  lock ","arel group  lock ","arel skip  lock ","arel take  lock ","arel having  lock ","arel where  lock "," build_joins  lock "," table  lock ","arel project  lock ","arel join  lock ","arel join on  lock "," collapse_wheres  lock "," table from  lock ","Arel SelectManager  new  lock ","arel lock  from ","arel from  from "," build_select  from ","arel order  from ","arel group  from ","arel skip  from ","arel take  from ","arel having  from ","arel where  from "," build_joins  from "," table  from ","arel project  from ","arel join  from ","arel join on  from "," collapse_wheres  from "," table from  from ","Arel SelectManager  new  from ","arel lock  order ","arel from  order "," build_select  order ","arel order  order ","arel group  order ","arel skip  order ","arel take  order ","arel having  order ","arel where  order "," build_joins  order "," table  order ","arel project  order ","arel join  order ","arel join on  order "," collapse_wheres  order "," table from  order ","Arel SelectManager  new  order ","arel  reverse_sql_order  ","@ reverse_sql_order _values uniq select ","@ reverse_sql_order _values uniq ","@ reverse_sql_order _values empty? ","arel lock  group ","arel from  group "," build_select  group ","arel order  group ","arel group  group ","arel skip  group ","arel take  group ","arel having  group ","arel where  group "," build_joins  group "," table  group ","arel project  group ","arel join  group ","arel join on  group "," collapse_wheres  group "," table from  group ","Arel SelectManager  new  group ","arel lock  skip ","arel from  skip "," build_select  skip ","arel order  skip ","arel group  skip ","arel skip  skip ","arel take  skip ","arel having  skip ","arel where  skip "," build_joins  skip "," table  skip ","arel project  skip ","arel join  skip ","arel join on  skip "," collapse_wheres  skip "," table from  skip ","Arel SelectManager  new  skip ","arel lock  take ","arel from  take "," build_select  take ","arel order  take ","arel group  take ","arel skip  take ","arel take  take ","arel having  take ","arel where  take "," build_joins  take "," table  take ","arel project  take ","arel join  take ","arel join on  take "," collapse_wheres  take "," table from  take ","Arel SelectManager  new  take ","arel lock  having ","arel from  having "," build_select  having ","arel order  having ","arel group  having ","arel skip  having ","arel take  having ","arel having  having ","arel where  having "," build_joins  having "," table  having ","arel project  having ","arel join  having ","arel join on  having "," collapse_wheres  having "," table from  having ","Arel SelectManager  new  having ","arel lock  where ","arel from  where "," build_select  where ","arel order  where ","arel group  where ","arel skip  where ","arel take  where ","arel having  where ","arel where  where "," build_joins  where "," table  where ","arel project  where ","arel join  where ","arel join on  where "," collapse_wheres  where "," table from  where ","Arel SelectManager  new  where ","arel Arel  sql  ","where to_where to_sql  ","Arel  sql  to_sql ","Arel  sql  is_a? ","(send\n  (ivar :@Arel  sql _values) :-\n  (array\n    (str \"\"))) uniq each ","(send\n  (ivar :@Arel  sql _values) :-\n  (array\n    (str \"\"))) uniq ","@Arel  sql _values - "," build_(send\n  (ivar :@joins_values) :map) uniq  ","@(send\n  (ivar :@joins_values) :map) uniq _values empty? ","arel lock  project ","arel from  project "," build_select  project ","arel order  project ","arel group  project ","arel skip  project ","arel take  project ","arel having  project ","arel where  project "," build_joins  project "," table  project ","arel project  project ","arel join  project ","arel join on  project "," collapse_wheres  project "," table from  project ","Arel SelectManager  new  project ","@klass quoted_table_name  + ","@select_values uniq  each ","@select_values uniq  present? ","@klass @klass quoted_table_name  ","@ reverse_sql_order _values uniq each ","Arel  sql  blank? ","@Arel  sql _values uniq each ","@Arel  sql _values uniq ","arel lock  join ","arel from  join "," build_select  join ","arel order  join ","arel group  join ","arel skip  join ","arel take  join ","arel having  join ","arel where  join "," build_joins  join "," table  join ","arel project  join ","arel join  join ","arel join on  join "," collapse_wheres  join "," table from  join ","Arel SelectManager  new  join ","arel lock  join on ","arel from  join on "," build_select  join on ","arel order  join on ","arel group  join on ","arel skip  join on ","arel take  join on ","arel having  join on ","arel where  join on "," build_joins  join on "," table  join on ","arel project  join on ","arel join  join on ","arel join on  join on "," collapse_wheres  join on "," table from  join on ","Arel SelectManager  new  join on ","(send\n  (ivar :@joins_values) :map) uniq  each ","association relation  last ","association relation  first ","(lvasgn :association relation \n  (send\n    (lvar :association) :relation)) is_a? ","ActiveRecord Associations ClassMethods JoinDependency  new  join_associations each ","ActiveRecord Associations ClassMethods JoinDependency  new  join_associations ","association_(send\n  (ivar :@joins_values) :map) uniq  uniq ","association_(send\n  (ivar :@joins_values) :map) uniq  any? ","association_(send\n  (ivar :@joins_values) :map) uniq  << ","(send\n  (ivar :@(send\n  (ivar :@joins_values) :map) uniq _values) :map) uniq ","@(send\n  (ivar :@joins_values) :map) uniq _values map ","(send\n  (send\n    (ivar :@ reverse_sql_order _values) :uniq) :select) map ","stashed_association_(send\n  (ivar :@joins_values) :map) uniq  empty? ","association_(send\n  (ivar :@joins_values) :map) uniq  empty? ","ActiveRecord Associations ClassMethods JoinDependency  new  graft "," custom_join_where to_sql  ","(send\n  (send\n    (lvar :(send\n  (ivar :@joins_values) :map) uniq ) :-\n    (lvar :association_(send\n  (ivar :@joins_values) :map) uniq )) :-\n  (lvar :stashed_association_(send\n  (ivar :@joins_values) :map) uniq )) reject ","(send\n  (ivar :@joins_values) :map) uniq  - - ","(send\n  (ivar :@joins_values) :map) uniq  - ","(send\n  (ivar :@joins_values) :map) uniq  select ","@ reverse_sql_order _values present? ","@(send\n  (ivar :@joins_values) :map) uniq _values present? ","@ reverse_sql_order _values uniq reject "," collapse_Arel  sql s ","Arel  where to_sql  "," reverse_sql_order  uniq reject "," reverse_sql_order  uniq "," reverse_sql_order  empty? "," reverse_where to_sql _order "," reverse_sql_ reverse_sql_order  ","arel lock  distinct ","arel from  distinct "," build_select  distinct ","arel order  distinct ","arel group  distinct ","arel skip  distinct ","arel take  distinct ","arel having  distinct ","arel where  distinct "," build_joins  distinct "," table  distinct ","arel project  distinct ","arel join  distinct ","arel join on  distinct "," collapse_wheres  distinct "," table from  distinct ","Arel SelectManager  new  distinct "," build_ reverse_sql_order  ","(send\n  (send nil :Arel  sql _values) :-\n  (array\n    (str \"\"))) uniq "," Arel  sql _values - "," Arel  sql _values "," (send\n  (ivar :@joins_values) :map) uniq _values "," (send\n  (ivar :@joins_values) :map) uniq _values empty? "," (send\n  (ivar :@joins_values) :map) uniq _values flatten ","arel bind_values +  [] first ","arel bind_values +  [] ","arel lock  ast grep each_with_index ","arel from  ast grep each_with_index "," build_select  ast grep each_with_index ","arel order  ast grep each_with_index ","arel group  ast grep each_with_index ","arel skip  ast grep each_with_index ","arel take  ast grep each_with_index ","arel having  ast grep each_with_index ","arel where  ast grep each_with_index "," build_joins  ast grep each_with_index "," table  ast grep each_with_index ","arel project  ast grep each_with_index ","arel join  ast grep each_with_index ","arel join on  ast grep each_with_index "," collapse_wheres  ast grep each_with_index "," table from  ast grep each_with_index ","Arel SelectManager  new  ast grep each_with_index ","arel lock  ast grep ","arel from  ast grep "," build_select  ast grep ","arel order  ast grep ","arel group  ast grep ","arel skip  ast grep ","arel take  ast grep ","arel having  ast grep ","arel where  ast grep "," build_joins  ast grep "," table  ast grep ","arel project  ast grep ","arel join  ast grep ","arel join on  ast grep "," collapse_wheres  ast grep "," table from  ast grep ","Arel SelectManager  new  ast grep ","arel lock  ast ","arel from  ast "," build_select  ast ","arel order  ast ","arel group  ast ","arel skip  ast ","arel take  ast ","arel having  ast ","arel where  ast "," build_joins  ast "," table  ast ","arel project  ast ","arel join  ast ","arel join on  ast "," collapse_wheres  ast "," table from  ast ","Arel SelectManager  new  ast ","arel lock  bind_values + ","arel from  bind_values + "," build_select  bind_values + ","arel order  bind_values + ","arel group  bind_values + ","arel skip  bind_values + ","arel take  bind_values + ","arel having  bind_values + ","arel where  bind_values + "," build_joins  bind_values + "," table  bind_values + ","arel project  bind_values + ","arel join  bind_values + ","arel join on  bind_values + "," collapse_wheres  bind_values + "," table from  bind_values + ","Arel SelectManager  new  bind_values + ","arel lock  bind_values ","arel from  bind_values "," build_select  bind_values ","arel order  bind_values ","arel group  bind_values ","arel skip  bind_values ","arel take  bind_values ","arel having  bind_values ","arel where  bind_values "," build_joins  bind_values "," table  bind_values ","arel project  bind_values ","arel join  bind_values ","arel join on  bind_values "," collapse_wheres  bind_values "," table from  bind_values ","Arel SelectManager  new  bind_values "," arel lock _columns "," arel from _columns ","  build_select _columns "," arel order _columns "," arel group _columns "," arel skip _columns "," arel take _columns "," arel having _columns "," arel where _columns ","  build_joins _columns ","  table _columns "," arel project _columns "," arel join _columns "," arel join on _columns ","  collapse_wheres _columns ","  table from _columns "," Arel SelectManager  new _columns "," arel_bvs [] first s ","arel bind_values +  any? ","arel lock  bind_values any? ","arel from  bind_values any? "," build_select  bind_values any? ","arel order  bind_values any? ","arel group  bind_values any? ","arel skip  bind_values any? ","arel take  bind_values any? ","arel having  bind_values any? ","arel where  bind_values any? "," build_joins  bind_values any? "," table  bind_values any? ","arel project  bind_values any? ","arel join  bind_values any? ","arel join on  bind_values any? "," collapse_wheres  bind_values any? "," table from  bind_values any? ","Arel SelectManager  new  bind_values any? "," Arel  sql _clause ast "," Arel  sql _clause "," Arel  sql _clause empty? "," build_left_outer_(send\n  (ivar :@joins_values) :map) uniq  "," left_outer_(send\n  (ivar :@joins_values) :map) uniq _values flatten "," left_outer_(send\n  (ivar :@joins_values) :map) uniq _values "," left_outer_(send\n  (ivar :@joins_values) :map) uniq _values empty? ","arel lock  comment ","arel from  comment "," build_select  comment ","arel order  comment ","arel group  comment ","arel skip  comment ","arel take  comment ","arel having  comment ","arel where  comment "," build_joins  comment "," table  comment ","arel project  comment ","arel join  comment ","arel join on  comment "," collapse_wheres  comment "," table from  comment ","Arel SelectManager  new  comment ","arel lock  optimizer_hints ","arel from  optimizer_hints "," build_select  optimizer_hints ","arel order  optimizer_hints ","arel group  optimizer_hints ","arel skip  optimizer_hints ","arel take  optimizer_hints ","arel having  optimizer_hints ","arel where  optimizer_hints "," build_joins  optimizer_hints "," table  optimizer_hints ","arel project  optimizer_hints ","arel join  optimizer_hints ","arel join on  optimizer_hints "," collapse_wheres  optimizer_hints "," table from  optimizer_hints ","Arel SelectManager  new  optimizer_hints "," left_outer_(send\n  (ivar :@joins_values) :map) uniq _values empty? ! "," (send\n  (ivar :@joins_values) :map) uniq _values empty? ! "," annotate_values  == ","annotates uniq  == "," annotate_values  uniq ","annotates uniq  uniq "," annotate_values  size > ","annotates uniq  size > "," annotate_values  size ","annotates uniq  size ","arel lock  join_sources ","arel from  join_sources "," build_select  join_sources ","arel order  join_sources ","arel group  join_sources ","arel skip  join_sources ","arel take  join_sources ","arel having  join_sources ","arel where  join_sources "," build_joins  join_sources "," table  join_sources ","arel project  join_sources ","arel join  join_sources ","arel join on  join_sources "," collapse_wheres  join_sources "," table from  join_sources ","Arel SelectManager  new  join_sources "]}," ActiveRecord QueryMethods custom_join_sql":{"type":"method","name":"custom_join_sql","children":[],"call":["arel joins ","arel join ","Arel SqlLiteral  new ","join join "," array_of_strings? ","join blank? ","joins each "," table ","arel join_sql ","Arel  sql "," table select_manager ","arel join  joins "," table  joins "," table select_manager  joins ","arel Arel  sql s ","arel join  join "," table  join "," table select_manager  join ","arel Arel  sql  ","Arel  sql  Arel  sql  ","Arel  sql  blank? ","Arel  sql s each ","arel join  join_sql "," table  join_sql "," table select_manager  join_sql ","arel Arel  sql _sql "]}," ActiveRecord QueryMethods arel":{"type":"method","name":"arel","children":[],"call":[" build_arel "," with_default_scope build_arel "," with_default_scope "]}," ActiveRecord QueryMethods reverse_order":{"type":"method","name":"reverse_order","children":[],"call":["relation order ","Arel SqlLiteral  new "," reverse_sql_order ","@klass primary_key ","@klass table_name ","order_clause blank? "," except "," arel order_clauses join "," arel order_clauses "," arel ","order_clause present? "," arel send join "," arel send ","Arel  sql ","relation reverse_order_value= ","relation reverse_order_value ! ","relation reverse_order_value "," clone "," except order "," reverse_sql_order join "," primary_key "," table_name ","order_clause empty? "," spawn reverse_order! "," spawn ","relation  reverse_sql_order  ","relation  reverse_sql_order join  "," except  order "," clone  order "," reverse_sql_ reverse_sql_order  "," reverse_sql_ reverse_sql_order join  "," reverse_sql_order _clause blank? "," reverse_sql_order join _clause blank? "," arel order_clauses join  blank? "," arel send join  blank? "," arel order_clauses  blank? "," arel  reverse_sql_order _clauses join "," arel  reverse_sql_order join _clauses join "," arel  arel order_clauses join s join "," arel  arel send join s join "," arel  arel order_clauses s join "," arel  reverse_sql_order _clauses "," arel  reverse_sql_order join _clauses "," arel  arel order_clauses join s "," arel  arel send join s "," arel  arel order_clauses s "," reverse_sql_order _clause present? "," reverse_sql_order join _clause present? "," arel order_clauses join  present? "," arel send join  present? "," arel order_clauses  present? ","relation reverse_ reverse_sql_order _value= ","relation reverse_ reverse_sql_order join _value= "," except  reverse_order_value= "," clone  reverse_order_value= ","relation reverse_ reverse_sql_order _value ! ","relation reverse_ reverse_sql_order join _value ! "," except  reverse_order_value ! "," clone  reverse_order_value ! ","relation reverse_ reverse_sql_order _value ","relation reverse_ reverse_sql_order join _value "," except  reverse_order_value "," clone  reverse_order_value "," except  reverse_sql_order  "," except  reverse_sql_order join  "," reverse_sql_ reverse_sql_order  join "," reverse_sql_ reverse_sql_order join  join "," reverse_sql_order _clause empty? "," reverse_sql_order join _clause empty? "," arel order_clauses join  empty? "," arel send join  empty? "," arel order_clauses  empty? "," spawn reverse_ reverse_sql_order ! "," spawn reverse_ reverse_sql_order join ! "]}," ActiveRecord QueryMethods extending":{"type":"method","name":"extending","children":[],"call":["r send "," clone tap "," clone ","modules << ","Module  new "," block_given? ","new_relation send ","relation send ","modules flatten ","modules empty? ","Proc  new "," spawn extending! "," spawn ","modules any? "," clone  send ","new_ clone  send "]}," ActiveRecord QueryMethods from":{"type":"method","name":"from","children":[],"call":["r from_value= "," clone tap "," clone ","relation from_value= "," spawn from! "," spawn "," clone  from_value= "]}," ActiveRecord QueryMethods create_with":{"type":"method","name":"create_with","children":[],"call":["r create_with_value= "," clone tap "," clone ","relation create_with_value= "," create_with_value merge "," create_with_value ","(or\n  (ivar :@create_with_value)\n  (hash)) merge "," spawn create_with! "," spawn "," clone  create_with_value= "]}," ActiveRecord QueryMethods readonly":{"type":"method","name":"readonly","children":[],"call":["r readonly_value= "," clone tap "," clone ","relation readonly_value= "," spawn readonly! "," spawn "," clone  readonly_value= "]}," ActiveRecord QueryMethods lock":{"type":"method","name":"lock","children":[],"call":["r lock_value= "," clone tap "," clone ","new_relation lock_value= "," spawn tap "," spawn ","relation send ","Module  new "," block_given? ","relation lock_value= "," spawn lock! ","new_ spawn  lock_value= ","new_ clone  lock_value= "," spawn  send "," clone  send "," spawn  lock_value= "," clone  lock_value= "]}," ActiveRecord QueryMethods offset":{"type":"method","name":"offset","children":[],"call":["r offset_value= "," clone tap "," clone ","relation offset_value= "," spawn offset! "," spawn "," clone  offset_value= "]}," ActiveRecord QueryMethods limit":{"type":"method","name":"limit","children":[],"call":["copy limit_value= "," clone ","r limit_value= "," clone tap ","relation limit_value= "," spawn limit! "," spawn "," clone  limit_value= "]}," ActiveRecord QueryMethods having":{"type":"method","name":"having","children":[],"call":["Array  wrap ","r having_values ","value present? "," clone tap "," clone "," build_where ","relation having_values ","args blank? ","opts blank? "," spawn having! "," spawn ","r having_ build_where s "," build_where  present? ","relation having_ build_where s "," clone  having_values "]}," ActiveRecord QueryMethods where":{"type":"method","name":"where","children":[],"call":["Array  wrap ","copy where_values "," clone "," build_where ","r where_values ","value present? "," clone tap ","relation where_values ","opts blank? "," spawn where! "," spawn ","WhereChain  new ","opts == ","chain == ","args first blank? ","args first ","args length == ","args length ","args empty? "," clone  where_values ","copy where_ build_where s ","r where_ build_where s "," build_where  present? ","relation where_ build_where s "]}," ActiveRecord QueryMethods joins":{"type":"method","name":"joins","children":[],"call":["r joins_values ","args present? "," clone tap "," clone ","args flatten! ","relation joins_values ","args blank? ","args compact blank? ","args compact "," spawn joins! ","args compact flatten "," spawn "," check_if_method_has_arguments! ","args compact! "," __callee__ "," clone  joins_values "]}," ActiveRecord QueryMethods reorder":{"type":"method","name":"reorder","children":[],"call":["r order_values= ","args present? "," clone tap "," clone ","relation reorder_flag= ","relation order_values= ","args blank? ","ActiveSupport Deprecation  warn "," caller ","relation reorder_value= ","args flatten ","relation reordering_value= "," spawn reorder! "," spawn "," check_if_method_has_arguments! "," sanitize_order_arguments ","args all? "," __callee__ "," clone  reorder_flag= "," clone  order_values= "," clone  reorder_value= "," clone  reordering_value= "]}," ActiveRecord QueryMethods order":{"type":"method","name":"order","children":[],"call":["r order_values ","args present? "," clone tap "," clone ","args flatten ","relation order_values ","args blank? "," spawn order! "," spawn "," check_if_method_has_arguments! "," sanitize_order_arguments "," __callee__ "," clone  order_values "]}," ActiveRecord QueryMethods group":{"type":"method","name":"group","children":[],"call":["args flatten ","r group_values ","args present? "," clone tap "," clone ","relation group_values ","args blank? "," spawn group! "," spawn "," check_if_method_has_arguments! "," __callee__ "," clone  group_values "]}," ActiveRecord QueryMethods select":{"type":"method","name":"select","children":[],"call":["r select_values ","args present? "," clone tap "," clone "," to_a select "," to_a "," block_given? ","Array  wrap ","relation select_values ","value call "," spawn select! "," spawn "," raise ","fields empty? "," spawn _select! ","fields any? "," check_if_method_has_arguments! "," __callee__ "," process_select_args "," clone  select_values "," process_select_args  empty? "," process_select_args  any? "]}," ActiveRecord QueryMethods preload":{"type":"method","name":"preload","children":[],"call":["r preload_values ","args present? "," clone tap "," clone ","relation preload_values ","args blank? "," spawn preload! "," spawn "," check_if_method_has_arguments! "," __callee__ "," clone  preload_values "]}," ActiveRecord QueryMethods eager_load":{"type":"method","name":"eager_load","children":[],"call":["r eager_load_values ","args present? "," clone tap "," clone ","relation eager_load_values ","args blank? "," spawn eager_load! "," spawn "," check_if_method_has_arguments! "," __callee__ "," clone  eager_load_values "]}," ActiveRecord QueryMethods includes":{"type":"method","name":"includes","children":[],"call":["r includes_values= ","(send\n  (send\n    (lvar :r) :includes_values) :+\n  (lvar :args)) flatten uniq ","(send\n  (send\n    (lvar :r) :includes_values) :+\n  (lvar :args)) flatten ","r includes_values + ","r includes_values ","args present? "," clone tap "," clone ","a blank? ","args reject! ","relation includes_values= ","(send\n  (send\n    (lvar :relation) :includes_values) :+\n  (lvar :args)) flatten uniq ","(send\n  (send\n    (lvar :relation) :includes_values) :+\n  (lvar :args)) flatten ","relation includes_values + ","relation includes_values ","args empty? "," spawn includes! "," spawn "," check_if_method_has_arguments! "," __callee__ "," clone  includes_values= ","(send\n  (send\n    (lvar : clone ) :includes_values) :+\n  (lvar :args)) flatten uniq ","(send\n  (send\n    (lvar : clone ) :includes_values) :+\n  (lvar :args)) flatten "," clone  includes_values + "," clone  includes_values "]}," ActiveRecord PredicateBuilder build_from_hash":{"type":"method","name":"build_from_hash","children":[],"call":["predicates flatten ","attribute eq ","attribute in ","value to_a ","Arel Attribute  new ","table [] ","Arel Table  new ","column split ","column include? ","column to_s "," build_from_hash ","value is_a? ","attributes map ","attribute lt ","value end ","attribute gteq ","value begin ","value exclude_end? ","column to_sym "," raise ","table name ","value name ","value id ","x id ","x is_a? ","value to_a map ","value empty? ","x quoted_id ","x respond_to? ","value quoted_id "," expand_from_hash "," convert_dot_notation_to_hash ","table []  eq ","table []  in ","Arel Table  new  [] ","column to_s  split ","column to_s  include? ","column to_s  to_s ","table [] s map "," convert_dot_notation_to_hash  map ","table []  lt ","table []  gteq ","column to_s  to_sym ","Arel Table  new  name "]}," ActiveRecord PredicateBuilder initialize":{"type":"method","name":"initialize","children":[],"call":[" register_handler ","PolymorphicArrayHandler  new ","AssociationQueryHandler  new ","ArrayHandler  new ","RelationHandler  new ","RangeHandler  new ","BaseHandler  new ","ClassHandler  new ","BasicObjectHandler  new "]}," ActiveRecord FinderMethods using_limitable_reflections?":{"type":"method","name":"using_limitable_reflections?","children":[],"call":["r collection? ","reflections none? ","reflections collect length zero? ","reflections collect length ","reflections collect "]}," ActiveRecord FinderMethods column_aliases":{"type":"method","name":"column_aliases","children":[],"call":["(send\n  (send\n    (lvar :join_dependency) :joins) :collect) flatten join ","(send\n  (send\n    (lvar :join_dependency) :joins) :collect) flatten "," connection quote_column_name "," connection "," connection quote_table_name ","join aliased_table_name ","join column_names_with_alias collect ","join column_names_with_alias ","join_dependency joins collect ","join_dependency joins "]}," ActiveRecord FinderMethods find_last":{"type":"method","name":"find_last","children":[],"call":[" reverse_order limit to_a [] "," reverse_order limit to_a "," reverse_order limit "," reverse_order ","@records last "," loaded? "," to_a last "," to_a "," limit_value "," offset_value "," reverse_order limit to_a first "," records last "," records "]}," ActiveRecord FinderMethods find_first":{"type":"method","name":"find_first","children":[],"call":[" limit to_a [] "," limit to_a "," limit ","@records first "," loaded? "," limit to_a first "," order limit to_a first "," order limit to_a "," order limit "," order "," arel_table [] asc "," arel_table [] "," primary_key "," arel_table "," with_default_scope order_values empty? "," with_default_scope order_values "," with_default_scope "," find_first_with_limit first "," find_first_with_limit "]}," ActiveRecord FinderMethods find_some":{"type":"method","name":"find_some","children":[],"call":[" raise ","error << ","result size ","ids join ","@klass name pluralize ","@klass name ","conditions present? ","(send\n  (send\n    (send nil :arel) :wheres) :map) join ","x value "," arel wheres map "," arel wheres "," arel ","result size == ","ids size - ","ids size ","ids size - < ","ids size > "," where all "," where "," primary_key in "," primary_key "," arel send join "," arel send "," arel where_sql "," table [] in "," table [] "," table "," raise_record_not_found_exception! "," offset_value "," limit_value "," where to_a "," find_some_ordered "," order_values present? "," order_values ","relation to_a ","relation select "," select_values empty? "," select_values ","(send\n  (lvar :ids) :map) inject "," primary_key zip to_h "," primary_key zip ","ids map "," klass composite_primary_key? "," klass "," where all  size "," where to_a  size ","relation to_a  size ","(send\n  (send\n    (send nil :arel) :wheres) :map) join  present? "," arel send join  present? "," arel where_sql  present? "," where all  size == "," where to_a  size == ","relation to_a  size == ","relation select  to_a "," where  to_a ","(send\n  (lvar :ids) :map) inject  to_a ","relation select  select "," where  select ","(send\n  (lvar :ids) :map) inject  select "]}," ActiveRecord FinderMethods find_one":{"type":"method","name":"find_one","children":[],"call":[" raise ","@klass name ","conditions present? ","(send\n  (send\n    (send nil :arel) :wheres) :map) join ","x value "," arel wheres map "," arel wheres "," arel "," where first "," where "," primary_key eq "," primary_key ","id id ","ActiveRecord Base  === "," arel send join "," arel send "," arel where_sql ","relation first ","relation bind_values= "," table [] eq "," table [] "," table "," connection substitute_at ","@bind_values length "," connection "," columns_hash [] "," columns_hash ","IdentityMap  get ","@klass locking_enabled? ! ","@klass locking_enabled? "," joins_values blank? "," joins_values "," readonly_value nil? "," readonly_value "," preload_values blank? "," preload_values "," includes_values blank? "," includes_values "," order_values blank? "," order_values "," limit_value blank? "," limit_value "," where_values blank? "," where_values ","IdentityMap  enabled? "," raise_record_not_found_exception! ","relation take ","relation bind_values "," bind_values length "," bind_values ","ActiveSupport Deprecation  warn ","(str \"          You are passing an instance of ActiveRecord::Base to `find`.\\n\") squish ","(str \"            You are passing an instance of ActiveRecord::Base to `find`.\\n\") squish ","(str \"              You are passing an instance of ActiveRecord::Base to `find`.\\n\") squish "," primary_key zip to_h "," primary_key zip "," klass composite_primary_key? "," klass ","(send\n  (send\n    (send nil :arel) :wheres) :map) join  present? "," arel send join  present? "," arel where_sql  present? ","id id  id id  "," where  first "," where  bind_values= "," connection  connection substitute_at _at ","  columns_hash [] s_hash [] ","  columns_hash [] s_hash "," raise_ where first _not_found_exception! "," raise_relation first _not_found_exception! "," raise_IdentityMap  get _not_found_exception! "," raise_relation take _not_found_exception! "," where  take "," where  bind_values "]}," ActiveRecord FinderMethods find_with_ids":{"type":"method","name":"find_with_ids","children":[],"call":[" find_some "," find_one ","ids first "," raise ","@klass name ","ids size ","ids flatten compact uniq ","ids flatten compact ","ids flatten ","ids first empty? ","ids first kind_of? "," to_a find "," to_a "," block_given? ","UnknownPrimaryKey  new "," primary_key nil? "," primary_key ","RecordNotFound  new ","ids compact uniq ","ids compact ","ids first is_a? ","ids first first is_a? ","ids first first "," klass composite_primary_key? "," klass ","ids flatten compact uniq  first ","ids compact uniq  first ","ids first  first ","ids flatten compact uniq  size ","ids compact uniq  size ","ids first  size ","ids flatten compact uniq  flatten compact uniq ","ids compact uniq  flatten compact uniq ","ids first  flatten compact uniq ","ids flatten compact uniq  flatten compact ","ids compact uniq  flatten compact ","ids first  flatten compact ","ids flatten compact uniq  flatten ","ids compact uniq  flatten ","ids first  flatten ","ids flatten compact uniq  first empty? ","ids compact uniq  first empty? ","ids first  first empty? ","ids flatten compact uniq  first kind_of? ","ids compact uniq  first kind_of? ","ids first  first kind_of? ","ids flatten compact uniq  compact uniq ","ids compact uniq  compact uniq ","ids first  compact uniq ","ids flatten compact uniq  compact ","ids compact uniq  compact ","ids first  compact ","ids flatten compact uniq  first is_a? ","ids compact uniq  first is_a? ","ids first  first is_a? ","ids flatten compact uniq  first first is_a? ","ids compact uniq  first first is_a? ","ids first  first first is_a? ","ids flatten compact uniq  first first ","ids compact uniq  first first ","ids first  first first "]}," ActiveRecord FinderMethods find_or_instantiator_by_attributes":{"type":"method","name":"find_or_instantiator_by_attributes","children":[],"call":["record save ","match instantiator == ","match instantiator "," block_given? ","r send ","unprotected_attributes_for_create empty? ","protected_attributes_for_create empty? ","@klass new "," where first "," where ","(send\n  (lvar :protected_attributes_for_create) :merge\n  (lvar :unprotected_attributes_for_create)) slice symbolize_keys ","(send\n  (lvar :protected_attributes_for_create) :merge\n  (lvar :unprotected_attributes_for_create)) slice ","protected_attributes_for_create merge ","unprotected_attributes_for_create []= ","args [] ","attributes [] ","args [] with_indifferent_access ","arg is_a? ","args each_with_index ","h []= ","attributes index ","attributes inject ","attributes_for_create slice symbolize_keys ","attributes_for_create slice ","args [] is_a? ","r assign_attributes ","args extract_options! ","a is_a? ","args last all? ","args last ","args size > ","args size ","record send ","match save_method ","match save_record? "," where first  save ","unargs [] with_indifferent_access  empty? ","unprotected_args [] with_indifferent_access  empty? ","args [] with_indifferent_access  empty? ","protected_args [] with_indifferent_access  empty? ","(send\n  (lvar :args [] with_indifferent_access ) :merge\n  (lvar :unargs [] with_indifferent_access )) slice symbolize_keys ","(send\n  (lvar :protected_args [] with_indifferent_access ) :merge\n  (lvar :unprotected_args [] with_indifferent_access )) slice symbolize_keys ","(send\n  (lvar :args [] with_indifferent_access ) :merge\n  (lvar :unargs [] with_indifferent_access )) slice ","(send\n  (lvar :protected_args [] with_indifferent_access ) :merge\n  (lvar :unprotected_args [] with_indifferent_access )) slice ","args [] with_indifferent_access  merge ","protected_args [] with_indifferent_access  merge ","unargs [] with_indifferent_access  []= ","unprotected_args [] with_indifferent_access  []= ","args [] with_indifferent_access  slice symbolize_keys ","args [] with_indifferent_access  slice ","args extract_args extract_options! ! "," where first  send ","match save_ where first ? "]}," ActiveRecord FinderMethods find_by_attributes":{"type":"method","name":"find_by_attributes","children":[],"call":[" raise ","(send\n  (send\n    (lvar :conditions) :to_a) :collect) join ","p join ","conditions to_a collect ","conditions to_a ","@klass name ","result blank? ","match bang? "," where send ","match finder "," where ","h []= ","args [] ","attributes index ","attributes inject ","Hash  [] ","attributes map "," block_given? ","result nil? ","(send\n  (send\n    (lvar :Hash  [] ) :to_a) :collect) join ","Hash  []  to_a collect ","Hash  []  to_a "," where send  blank? "," where send  nil? "]}," ActiveRecord FinderMethods construct_limited_ids_condition":{"type":"method","name":"construct_limited_ids_condition","children":[],"call":[" primary_key in "," primary_key "," raise ","ids_array empty? ","row [] ","@klass primary_key ","relation select collect ","relation select ","@klass connection distinct ","@klass connection quote_table_name ","@klass table_name ","@klass connection ","relation order_values join ","relation order_values "," table [] in "," table [] "," table ","relation dup "," table_name ","(send\n  (send\n    (lvar :relation) :order_values) :map) compact ","val presence ","relation order_values map ","id_rows map ","@klass connection select_all ","relation bind_values ","relation arel ","relation dup select ","relation uniq_value= "," quoted_table_name ","relation dup select distinct! ","@klass connection columns_for_distinct "," quoted_primary_key ","relation dup  select collect ","relation dup select  select collect ","relation dup select distinct!  select collect ","relation dup  select ","relation dup select  select ","relation dup select distinct!  select ","relation order_@klass connection distinct  join ","relation order_@klass connection columns_for_distinct  join ","relation dup  order_values join ","relation dup select  order_values join ","relation dup select distinct!  order_values join ","relation order_@klass connection distinct  ","relation order_@klass connection columns_for_distinct  ","relation dup  order_values ","relation dup select  order_values ","relation dup select distinct!  order_values ","relation dup  dup ","relation dup select  dup ","relation dup select distinct!  dup ","(send\n  (send\n    (lvar :relation) :order_@klass connection distinct ) :map) compact ","(send\n  (send\n    (lvar :relation) :order_@klass connection columns_for_distinct ) :map) compact ","(send\n  (send\n    (lvar :relation dup ) :order_values) :map) compact ","(send\n  (send\n    (lvar :relation dup select ) :order_values) :map) compact ","(send\n  (send\n    (lvar :relation dup select distinct! ) :order_values) :map) compact ","relation order_@klass connection distinct  map ","relation order_@klass connection columns_for_distinct  map ","relation dup  order_values map ","relation dup select  order_values map ","relation dup select distinct!  order_values map ","@klass connection select_all  map ","relation bind_@klass connection distinct  ","relation bind_@klass connection columns_for_distinct  ","relation dup  bind_values ","relation dup select  bind_values ","relation dup select distinct!  bind_values ","relation dup  arel ","relation dup select  arel ","relation dup select distinct!  arel ","relation dup  dup select ","relation dup select  dup select ","relation dup select distinct!  dup select ","relation dup  uniq_value= ","relation dup select  uniq_value= ","relation dup select distinct!  uniq_value= ","relation dup  dup select distinct! ","relation dup select  dup select distinct! ","relation dup select distinct!  dup select distinct! "]}," ActiveRecord FinderMethods apply_join_dependency":{"type":"method","name":"apply_join_dependency","children":[],"call":["relation except ","relation where "," construct_limited_ids_condition ","relation limit_value ","limitable_reflections ! "," using_limitable_reflections? ","join_dependency reflections ","association join_relation ","join_dependency join_associations ","@klass send ","join_dependency join_associations each ","relation where! "," table [] in "," table [] "," primary_key "," table ","relation none! ","limited_ids empty? "," limited_ids_for ","relation joins ","relation except joins! ","relation _select! ","join_dependency aliases columns ","join_dependency aliases "," block_given? ","relation limit_value= ","relation offset_value= "," has_limit_or_offset? "," using_limitable_reflections? ! "," except joins! "," except "," construct_join_dependency "," eager_load_values + "," includes_values "," eager_load_values ","(and\n  (send nil :using_limitable_reflections?\n    (send\n      (lvar :join_dependency) :reflections))\n  (send nil :using_limitable_reflections?\n    (send\n      (send nil :construct_join_dependency\n        (send\n          (send nil :select_association_list\n            (send nil :joins_values)) :concat\n          (send nil :select_association_list\n            (send nil :left_outer_joins_values)))\n        (nil)) :reflections))) ! "," construct_join_dependency reflections "," select_association_list concat "," select_association_list "," left_outer_joins_values "," joins_values "," eager_load_values | "," klass connection distinct_relation_for_primary_key "," klass connection "," klass "," skip_query_cache_if_necessary ","relation except  except ","relation where  except ","association join_relation  except ","relation joins  except ","relation except joins!  except "," except joins!  except ","relation except  where ","relation where  where ","association join_relation  where ","relation joins  where ","relation except joins!  where "," except joins!  where "," construct_ limited_ids_for _condition ","relation except  limit_value ","relation where  limit_value ","association join_relation  limit_value ","relation joins  limit_value ","relation except joins!  limit_value "," except joins!  limit_value "," using_limitable_reflections?  ! ","@klass send  ! "," using_ using_limitable_reflections? ? "," using_@klass send ? "," construct_join_dependency  reflections ","association join_relation except  ","association join_relation where  ","association join_association join_relation  ","association join_relation joins  ","association join_relation except joins!  ","association join_ except joins!  "," construct_join_dependency  join_associations "," construct_join_dependency  join_associations each ","relation except  where! ","relation where  where! ","association join_relation  where! ","relation joins  where! ","relation except joins!  where! "," except joins!  where! ","relation except  none! ","relation where  none! ","association join_relation  none! ","relation joins  none! ","relation except joins!  none! "," except joins!  none! "," limited_ids_for  empty? ","  limited_ids_for _for ","relation except  joins ","relation where  joins ","association join_relation  joins ","relation joins  joins ","relation except joins!  joins "," except joins!  joins ","relation except  except joins! ","relation where  except joins! ","association join_relation  except joins! ","relation joins  except joins! ","relation except joins!  except joins! "," except joins!  except joins! ","relation except  _select! ","relation where  _select! ","association join_relation  _select! ","relation joins  _select! ","relation except joins!  _select! "," except joins!  _select! "," construct_join_dependency  aliases columns "," construct_join_dependency  aliases ","relation except  limit_value= ","relation where  limit_value= ","association join_relation  limit_value= ","relation joins  limit_value= ","relation except joins!  limit_value= "," except joins!  limit_value= ","relation except  offset_value= ","relation where  offset_value= ","association join_relation  offset_value= ","relation joins  offset_value= ","relation except joins!  offset_value= "," except joins!  offset_value= "," using_ using_limitable_reflections? ? ! "," using_@klass send ? ! "," construct_ construct_join_dependency  ","(and\n  (send nil :using_ using_limitable_reflections? ?\n    (send\n      (lvar :join_dependency) :reflections))\n  (send nil :using_ using_limitable_reflections? ?\n    (send\n      (send nil :construct_join_dependency\n        (send\n          (send nil :select_association_list\n            (send nil :joins_values)) :concat\n          (send nil :select_association_list\n            (send nil :left_outer_joins_values)))\n        (nil)) :reflections))) ! ","(and\n  (send nil :using_@klass send ?\n    (send\n      (lvar :join_dependency) :reflections))\n  (send nil :using_@klass send ?\n    (send\n      (send nil :construct_join_dependency\n        (send\n          (send nil :select_association_list\n            (send nil :joins_values)) :concat\n          (send nil :select_association_list\n            (send nil :left_outer_joins_values)))\n        (nil)) :reflections))) ! ","(and\n  (send nil :using_limitable_reflections?\n    (send\n      (lvar : construct_join_dependency ) :reflections))\n  (send nil :using_limitable_reflections?\n    (send\n      (send nil :construct_ construct_join_dependency \n        (send\n          (send nil :select_association_list\n            (send nil :joins_values)) :concat\n          (send nil :select_association_list\n            (send nil :left_outer_joins_values)))\n        (nil)) :reflections))) ! "," construct_ construct_join_dependency  reflections "," klass connection distinct_relation except _for_primary_key "," klass connection distinct_relation where _for_primary_key "," klass connection distinct_association join_relation _for_primary_key "," klass connection distinct_relation joins _for_primary_key "," klass connection distinct_relation except joins! _for_primary_key "," klass connection distinct_ except joins! _for_primary_key "]}," ActiveRecord FinderMethods construct_relation_for_association_find":{"type":"method","name":"construct_relation_for_association_find","children":[],"call":[" apply_join_dependency "," except select "," column_aliases "," except ","@klass send ","join_dependency columns ","join_dependency columns + "," select_values "]}," ActiveRecord FinderMethods construct_relation_for_association_calculations":{"type":"method","name":"construct_relation_for_association_calculations","children":[],"call":[" apply_join_dependency "," except ","ActiveRecord Associations ClassMethods JoinDependency  new "," arel joins "," arel ","(send\n  (ivar :@eager_load_values) :+\n  (ivar :@includes_values)) uniq ","@eager_load_values + "," arel join_sql ","ActiveRecord Associations JoinDependency  new "," arel froms first "," arel froms ","(send\n  (send nil :eager_load_values) :+\n  (send nil :includes_values)) uniq "," eager_load_values + "," includes_values "," eager_load_values "," construct_join_dependency ","Arel Table  === "," joins_values "," apply_ActiveRecord Associations ClassMethods JoinDependency  new  "," apply_ActiveRecord Associations JoinDependency  new  "," arel  arel froms first s first "," arel  arel froms first s "," construct_ActiveRecord Associations ClassMethods JoinDependency  new  "," construct_ActiveRecord Associations JoinDependency  new  "]}," ActiveRecord FinderMethods find_with_associations":{"type":"method","name":"find_with_associations","children":[],"call":["join_dependency instantiate "," construct_relation_for_association_find to_a "," construct_relation_for_association_find ","ActiveRecord Associations ClassMethods JoinDependency  new ","(send\n  (ivar :@eager_load_values) :+\n  (ivar :@includes_values)) uniq ","@eager_load_values + "," construct_join_dependency_for_association_find "," connection select_all ","relation bind_values "," connection ","relation to_sql ","relation bind_values dup ","relation arel ","ActiveRecord NullRelation  === "," block_given? "," apply_join_dependency "," select ","aliases columns ","join_dependency aliases "," construct_join_dependency "," joins_values ","arel bind_values + ","arel bind_values ","relation bound_attributes ","relation _select! ","join_dependency aliases columns ","ActiveRecord Associations ClassMethods JoinDependency  new  instantiate "," construct_join_dependency_for_association_find  instantiate "," construct_join_dependency  instantiate "," construct_ construct_relation_for_association_find _for_association_find to_a "," construct_ apply_join_dependency _for_association_find to_a "," construct_ select _for_association_find to_a "," construct_ construct_relation_for_association_find _for_association_find "," construct_ apply_join_dependency _for_association_find "," construct_ select _for_association_find "," construct_ActiveRecord Associations ClassMethods JoinDependency  new _for_association_find "," construct_ construct_join_dependency_for_association_find _for_association_find "," construct_ construct_join_dependency _for_association_find "," construct_relation_for_association_find  bind_values "," apply_join_dependency  bind_values "," select  bind_values "," construct_relation_for_association_find  to_sql "," apply_join_dependency  to_sql "," select  to_sql "," construct_relation_for_association_find  bind_values dup "," apply_join_dependency  bind_values dup "," select  bind_values dup "," construct_relation_for_association_find  arel "," apply_join_dependency  arel "," select  arel ","relation relation arel  "," apply_ActiveRecord Associations ClassMethods JoinDependency  new  "," apply_ construct_join_dependency_for_association_find  "," apply_ construct_join_dependency  ","join_dependency aliases  columns ","ActiveRecord Associations ClassMethods JoinDependency  new  aliases "," construct_join_dependency_for_association_find  aliases "," construct_join_dependency  aliases ","join_dependency join_dependency aliases  "," construct_ActiveRecord Associations ClassMethods JoinDependency  new  "," construct_ construct_join_dependency_for_association_find  "," construct_ construct_join_dependency  ","relation arel  bind_values + ","relation arel  bind_values "," construct_relation_for_association_find  bound_attributes "," apply_join_dependency  bound_attributes "," select  bound_attributes "," construct_relation_for_association_find  _select! "," apply_join_dependency  _select! "," select  _select! ","ActiveRecord Associations ClassMethods JoinDependency  new  aliases columns "," construct_join_dependency_for_association_find  aliases columns "," construct_join_dependency  aliases columns ","join_dependency join_dependency aliases  columns "]}," ActiveRecord FinderMethods exists?":{"type":"method","name":"exists?","children":[],"call":["relation first ","relation where "," primary_key eq "," primary_key "," select limit "," select "," where exists? "," where ","id id ","ActiveRecord Base  === "," connection select_value ","relation to_sql "," connection "," table [] eq "," table [] "," primary_key name "," table ","relation except select limit ","relation except select ","relation except "," construct_relation_for_association_find "," construct_join_dependency_for_association_find ","id nil? "," name ","relation bind_values ","conditions != ","conditions ! ","conditions id ","Base  === ","ActiveRecord NullRelation  === "," apply_join_dependency "," construct_join_dependency ","relation arel bind_values + ","relation arel bind_values ","relation arel ","conditions == ","ActiveSupport Deprecation  warn ","(str \"          You are passing an instance of ActiveRecord::Base to `exists?`.\\n\") squish ","relation bound_attributes "," construct_relation_for_exists "," raise "," eager_loading? "," limit_value == "," limit_value "," skip_query_cache_if_necessary ","relation exists? "," connection select_one "," sanitize_forbidden_attributes "," connection select_rows size == "," connection select_rows size "," connection select_rows ","relation where_clause contradiction? ","relation where_clause ","relation where  first "," select limit  first ","relation except select limit  first "," construct_relation_for_association_find  first "," apply_join_dependency  first "," where  first "," construct_relation_for_exists  first ","relation where  where "," select limit  where ","relation except select limit  where "," construct_relation_for_association_find  where "," apply_join_dependency  where "," where  where "," construct_relation_for_exists  where ","id id  id id  ","relation where  to_sql "," select limit  to_sql ","relation except select limit  to_sql "," construct_relation_for_association_find  to_sql "," apply_join_dependency  to_sql "," where  to_sql "," construct_relation_for_exists  to_sql ","relation where  except select limit "," select limit  except select limit ","relation except select limit  except select limit "," construct_relation_for_association_find  except select limit "," apply_join_dependency  except select limit "," where  except select limit "," construct_relation_for_exists  except select limit ","relation where  except select "," select limit  except select ","relation except select limit  except select "," construct_relation_for_association_find  except select "," apply_join_dependency  except select "," where  except select "," construct_relation_for_exists  except select ","relation where  except "," select limit  except ","relation except select limit  except "," construct_relation_for_association_find  except "," apply_join_dependency  except "," where  except "," construct_relation_for_exists  except "," construct_relation where _for_association_find "," construct_ select limit _for_association_find "," construct_relation except select limit _for_association_find "," construct_ construct_relation_for_association_find _for_association_find "," construct_ apply_join_dependency _for_association_find "," construct_ where _for_association_find "," construct_ construct_relation_for_exists _for_association_find "," construct_ construct_join_dependency_for_association_find _for_association_find ","id id  nil? ","relation where  bind_values "," select limit  bind_values ","relation except select limit  bind_values "," construct_relation_for_association_find  bind_values "," apply_join_dependency  bind_values "," where  bind_values "," construct_relation_for_exists  bind_values ","conditions id  != "," sanitize_forbidden_attributes  != ","conditions id  ! "," sanitize_forbidden_attributes  ! ","conditions id id  ","conditions id  id "," sanitize_forbidden_attributes  id "," apply_ construct_join_dependency_for_association_find  "," construct_ construct_join_dependency_for_association_find  ","relation where  arel bind_values + "," select limit  arel bind_values + ","relation except select limit  arel bind_values + "," construct_relation_for_association_find  arel bind_values + "," apply_join_dependency  arel bind_values + "," where  arel bind_values + "," construct_relation_for_exists  arel bind_values + ","relation where  arel bind_values "," select limit  arel bind_values ","relation except select limit  arel bind_values "," construct_relation_for_association_find  arel bind_values "," apply_join_dependency  arel bind_values "," where  arel bind_values "," construct_relation_for_exists  arel bind_values ","relation where  arel "," select limit  arel ","relation except select limit  arel "," construct_relation_for_association_find  arel "," apply_join_dependency  arel "," where  arel "," construct_relation_for_exists  arel ","conditions id  == "," sanitize_forbidden_attributes  == ","relation where  bound_attributes "," select limit  bound_attributes ","relation except select limit  bound_attributes "," construct_relation_for_association_find  bound_attributes "," apply_join_dependency  bound_attributes "," where  bound_attributes "," construct_relation_for_exists  bound_attributes "," construct_relation where _for_exists "," construct_ select limit _for_exists "," construct_relation except select limit _for_exists "," construct_ construct_relation_for_association_find _for_exists "," construct_ apply_join_dependency _for_exists "," construct_ where _for_exists "," construct_ construct_relation_for_exists _for_exists ","relation where  exists? "," select limit  exists? ","relation except select limit  exists? "," construct_relation_for_association_find  exists? "," apply_join_dependency  exists? "," where  exists? "," construct_relation_for_exists  exists? "," sanitize_forbid id den_attributes ","relation where  where_clause contradiction? "," select limit  where_clause contradiction? ","relation except select limit  where_clause contradiction? "," construct_relation_for_association_find  where_clause contradiction? "," apply_join_dependency  where_clause contradiction? "," where  where_clause contradiction? "," construct_relation_for_exists  where_clause contradiction? ","relation where  where_clause "," select limit  where_clause ","relation except select limit  where_clause "," construct_relation_for_association_find  where_clause "," apply_join_dependency  where_clause "," where  where_clause "," construct_relation_for_exists  where_clause "]}," ActiveRecord FinderMethods all":{"type":"method","name":"all","children":[],"call":[" to_a "," apply_finder_options to_a "," apply_finder_options ","args first ","args any? "]}," ActiveRecord FinderMethods last":{"type":"method","name":"last","children":[],"call":[" find_last "," apply_finder_options last "," apply_finder_options ","args first "," to_a last "," to_a ","args first kind_of? ! ","args first kind_of? "," loaded? ","args any? "," order limit reverse "," order limit "," order "," primary_key "," reorder_value nil? "," reorder_value "," order_values empty? "," order_values "," quoted_primary_key "," quoted_table_name "," arel_table [] desc "," arel_table [] "," arel_table ","ActiveSupport Deprecation  warn ","(str \"          Finding a last element by loading the relation when SQL ORDER\\n\") squish ","result first ","result reverse ","result reverse_order! ","result order! "," arel_attribute "," limit "," limit_value "," ordered_relation limit "," ordered_relation "," has_limit_or_offset? ","result reverse_order!  first "," limit  first "," ordered_relation limit  first ","result reverse_order!  reverse "," limit  reverse "," ordered_relation limit  reverse ","result reverse_order!  reverse_order! "," limit  reverse_order! "," ordered_relation limit  reverse_order! ","result reverse_order!  order! "," limit  order! "," ordered_relation limit  order! "]}," ActiveRecord FinderMethods first":{"type":"method","name":"first","children":[],"call":[" find_first "," apply_finder_options first "," apply_finder_options ","args first "," to_a first "," to_a ","args first kind_of? ! ","args first kind_of? "," loaded? ","args any? "," limit to_a "," limit "," order limit to_a "," order limit "," order "," arel_table [] asc "," arel_table [] "," primary_key "," arel_table "," order_values empty? "," order_values "," find_nth "," offset_value "," find_nth_with_limit "," find_first_with_limit "," offset_index "," find_nth_with_limit_and_offset "," check_reorder_deprecation "]}," ActiveRecord FinderMethods find":{"type":"method","name":"find","children":[],"call":[" find_with_ids "," send ","args first "," apply_finder_options find "," apply_finder_options ","options present? ","args extract_options! "," to_a find "," to_a "," block_given? "," apply_finder_args extract_options!  find "," apply_finder_args extract_options!  ","args extract_options!  present? ","args extract_args extract_options! ! "]}," ActiveRecord Calculations select_for_count":{"type":"method","name":"select_for_count","children":[],"call":["select !~ ","@select_values join ","@select_values present? "," select_values join "," select_values "," select_values present? "," select_values first "," select_values one? ","@select_values join  !~ "," select_values join  !~ ","@@select_values join _values join ","@ select_values join _values join ","@@select_values join _values present? ","@ select_values join _values present? "," @select_values join _values join ","  select_values join _values join "," @select_values join _values ","  select_values join _values "," @select_values join _values present? ","  select_values join _values present? "," @select_values join _values first ","  select_values join _values first "," @select_values join _values one? ","  select_values join _values one? "]}," ActiveRecord Calculations type_cast_using_column":{"type":"method","name":"type_cast_using_column","children":[],"call":["column type_cast "]}," ActiveRecord Calculations type_cast_calculated_value":{"type":"method","name":"type_cast_calculated_value","children":[],"call":[" type_cast_using_column ","value try ","value to_i ","value nil? ","value is_a? ","(if\n  (send\n    (lvar :value) :is_a?\n    (const nil :Fixnum))\n  (send\n    (lvar :value) :to_f)\n  (lvar :value)) to_d ","value to_f ","value to_d ","value respond_to? ","type type_cast_from_database ","type deserialize ","type type "]}," ActiveRecord Calculations column_for":{"type":"method","name":"column_for","children":[],"call":["c name to_s == ","c name to_s ","c name ","@klass columns detect ","@klass columns ","field to_s split last ","field to_s split ","field to_s ","field name to_s ","field name ","field respond_to? ","@klass columns_hash [] ","@klass columns_hash "]}," ActiveRecord Calculations column_alias_for":{"type":"method","name":"column_alias_for","children":[],"call":["@klass connection table_alias_for ","@klass connection ","table_name gsub! ","table_name strip! ","table_name downcase! ","keys join ","k to_sql ","k respond_to? ","keys map! ","keys to_s downcase ","keys to_s ","keys name ","keys relation name ","keys relation ","keys respond_to? "," connection table_alias_for "," connection ","column_alias gsub! ","column_alias strip! ","field +@ ","field match? "," connection table_alias_length ","keys join  gsub! ","keys to_s downcase  gsub! ","keys join  strip! ","keys to_s downcase  strip! ","keys join  downcase! ","keys to_s downcase  downcase! ","field +@  gsub! ","field +@  strip! "]}," ActiveRecord Calculations execute_grouped_calculation":{"type":"method","name":"execute_grouped_calculation","children":[],"call":["all []= "," type_cast_calculated_value "," column_for ","row [] ","key_records [] ","calculated_data inject ","ActiveSupport OrderedHash  new ","hsh merge ","r id ","key_records inject ","association klass base_class find ","association klass base_class ","association klass ","calculated_data collect ","@klass connection select_all ","relation to_sql ","@klass connection "," except select group "," except select "," except ","select_statement << ","Arel Attribute  new send as to_sql ","Arel Attribute  new send as ","Arel Attribute  new send ","Arel Attribute  new ","@klass unscoped ","column_name == ","operation == "," column_alias_for ","@klass connection adapter_name == ","@klass connection adapter_name ","association primary_key_name ","association macro == ","association macro ","@klass reflect_on_association ","group_attr to_sym ","@group_values first "," select group "," select ","ActiveSupport OrderedHash  [] ","key first ","key size == ","key size ","group_columns [] ","group_aliases map ","calculated_data map ","Hash  [] ","key_records map ","group_aliases first ","relation select_values << ","group_aliases [] ","group_fields [] ","relation select_values ","group_fields each_index ","relation select_values= "," operation_over_aggregate_column as "," operation_over_aggregate_column "," aggregate_column "," except group ","group join ","group_columns []= ","group_aliases << ","group_fields each "," Array ","group_attr size == ","group_attr size ","group_attr first to_sym ","group_attr first ","group_columns map ","select_values concat ","group_fields zip map ","group_fields zip ","group_aliases zip map ","group_aliases zip ","group_fields map ","association foreign_key "," with_default_scope except group "," with_default_scope except "," with_default_scope ","@having_values empty? ","field as ","field respond_to? ","group_attrs size == ","group_attrs size ","group_attrs first to_sym ","group_attrs first ","group_attrs first respond_to? ","calculated_data column_types fetch ","calculated_data column_types "," bind_values ","relation group_values= "," having_values empty? "," having_values ","(lvar :operation) join "," group_values ","@klass _reflect_on_association "," type_for ","relation arel bind_values + ","relation arel bind_values ","relation arel ","association belongs_to? "," select_values "," arel_columns ","association klass base_class where ","association klass base_class primary_key ","relation bound_attributes "," having_clause empty? "," having_clause ","Type Value  new ","Type  default_value "," except distinct! "," skip_query_cache_if_necessary ","column_name to_s downcase ","column_name to_s ","field to_s downcase ","field to_s "," connection visitor compile "," connection visitor "," connection ","Arel  arel_node? "," klass _reflect_on_association ","group_fields first "," klass ","group_fields first respond_to? ","group_fields size == ","group_fields size ","result []= ","type deserialize "," lookup_cast_type_from_join_dependencies ","column try ","hash_rows each_with_object ","hash []= ","calculated_data columns each_with_object with_index ","calculated_data columns each_with_object ","calculated_data columns ","calculated_data cast_values map! ","calculated_data cast_values ","types []= ","group_columns each_with_object ","key_records index_by ","select_value as ","ActiveSupport Deprecation  warn ","(str \"            `\") squish ","column_name inspect "," klass table_name "," klass name ","group_fields == ","group_fields uniq ","group_fields size > ","type subtype ","Enum EnumType  === ","operation != ","operation capitalize ","@klass name "," connection quote_column_name ","col_name try ","column_alias_tracker alias_for ","ColumnAliasTracker  new ","result then "," type_cast_calculated_row []  "," type subtype _cast_calculated_value ","  aggregate_column _for ","key_records [] _records [] "," type_cast_calculated_value _records [] ","key first _records [] ","association klass base_class find  [] ","Hash  []  [] ","association klass base_class where  [] ","key_records index_by  [] ","@klass connection select_all  inject ","key_records [] _records inject "," type_cast_calculated_value _records inject ","key first _records inject ","association klass base_class find  inject ","Hash  []  inject ","association klass base_class where  inject ","key_records index_by  inject ","@klass reflect_on_association  klass base_class find ","@klass _reflect_on_association  klass base_class find "," klass _reflect_on_association  klass base_class find ","@klass reflect_on_association  klass base_class ","@klass _reflect_on_association  klass base_class "," klass _reflect_on_association  klass base_class ","@klass reflect_on_association  klass ","@klass _reflect_on_association  klass "," klass _reflect_on_association  klass ","@klass connection select_all  collect "," except select group  to_sql "," select group  to_sql "," except group  to_sql "," with_default_scope except group  to_sql "," except  to_sql "," except distinct!  to_sql ","Arel Attribute  new send as to_sql  << "," aggregate_column _name == ","  column_alias_for _for "," column_alias_tracker alias_for _for ","  aggregate_column _alias_for ","association primary_key_records [] _name ","association primary_ type_cast_calculated_value _name ","association primary_key first _name ","@klass reflect_on_association  primary_key_name ","@klass _reflect_on_association  primary_key_name "," klass _reflect_on_association  primary_key_name ","@klass reflect_on_association  macro == ","@klass _reflect_on_association  macro == "," klass _reflect_on_association  macro == ","@klass reflect_on_association  macro ","@klass _reflect_on_association  macro "," klass _reflect_on_association  macro ","@klass reflect_on_@klass reflect_on_association  ","@klass reflect_on_@klass _reflect_on_association  ","@klass reflect_on_ klass _reflect_on_association  ","@group_values first  to_sym ","@group_row [] s first ","key_records []  first "," type_cast_calculated_value  first ","key first  first ","key_records []  size == "," type_cast_calculated_value  size == ","key first  size == ","key_records []  size "," type_cast_calculated_value  size ","key first  size "," column_for s [] ","group_aliases zip  [] ","group_ aggregate_column s [] "," column_alias_for es map ","@klass connection select_all  map ","key_records [] _records map "," type_cast_calculated_value _records map ","key first _records map ","association klass base_class find  map ","Hash  []  map ","association klass base_class where  map ","key_records index_by  map "," column_alias_for es first ","relation select_row [] s << "," except select group  select_values << "," select group  select_values << "," except group  select_values << "," with_default_scope except group  select_values << "," except  select_values << "," except distinct!  select_values << ","relation  operation_over_aggregate_column s << "," column_alias_for es [] ","association primary_key_name s [] "," Array  [] "," arel_columns  [] "," group_values  [] ","group_fields uniq  [] ","group_ connection visitor compile s [] ","relation select_row [] s "," except select group  select_values "," select group  select_values "," except group  select_values "," with_default_scope except group  select_values "," except  select_values "," except distinct!  select_values ","relation  operation_over_aggregate_column s ","association primary_key_name s each_index "," Array  each_index "," arel_columns  each_index "," group_values  each_index ","group_fields uniq  each_index ","group_ connection visitor compile s each_index ","relation select_row [] s= "," except select group  select_values= "," select group  select_values= "," except group  select_values= "," with_default_scope except group  select_values= "," except  select_values= "," except distinct!  select_values= ","relation  operation_over_aggregate_column s= "," operation_over_aggregate_ aggregate_column  as "," operation_over_aggregate_ aggregate_column  "," aggregate_ aggregate_column  "," column_for s []= ","group_aliases zip  []= ","group_ aggregate_column s []= "," column_alias_for es << ","association primary_key_name s each "," Array  each "," arel_columns  each "," group_values  each ","group_fields uniq  each ","group_ connection visitor compile s each ","@group_values first  size == ","@group_values first  size ","@group_values first  first to_sym ","@group_values first  first "," column_for s map ","group_aliases zip  map ","group_ aggregate_column s map ","select_row [] s concat "," operation_over_aggregate_column s concat ","association primary_key_name s zip map "," Array  zip map "," arel_columns  zip map "," group_values  zip map ","group_fields uniq  zip map ","group_ connection visitor compile s zip map ","association primary_key_name s zip "," Array  zip "," arel_columns  zip "," group_values  zip ","group_fields uniq  zip ","group_ connection visitor compile s zip "," column_alias_for es zip map "," column_alias_for es zip ","association primary_key_name s map "," Array  map "," arel_columns  map "," group_values  map ","group_fields uniq  map ","group_ connection visitor compile s map ","association foreign_key_records []  ","association foreign_ type_cast_calculated_value  ","association foreign_key first  ","@klass reflect_on_association  foreign_key ","@klass _reflect_on_association  foreign_key "," klass _reflect_on_association  foreign_key ","@having_row [] s empty? "," connection visitor compile  as "," connection visitor compile  respond_to? ","@group_values first s size == "," group_values  size == ","@group_values first s size "," group_values  size ","@group_values first s first to_sym "," group_values  first to_sym ","@group_values first s first "," group_values  first ","@group_values first s first respond_to? "," group_values  first respond_to? ","@klass connection select_all  column_types fetch ","calculated_data  aggregate_column _types fetch ","calculated_data column_type subtype s fetch ","@klass connection select_all  column_types ","calculated_data  aggregate_column _types ","calculated_data column_type subtype s "," bind_row [] s ","relation group_row [] s= "," except select group  group_values= "," select group  group_values= "," except group  group_values= "," with_default_scope except group  group_values= "," except  group_values= "," except distinct!  group_values= "," having_row [] s empty? "," having_row [] s "," group_row [] s ","@klass _reflect_on_@klass reflect_on_association  ","@klass _reflect_on_@klass _reflect_on_association  ","@klass _reflect_on_ klass _reflect_on_association  "," type subtype _for ","relation arel bind_row [] s + "," except select group  arel bind_values + "," select group  arel bind_values + "," except group  arel bind_values + "," with_default_scope except group  arel bind_values + "," except  arel bind_values + "," except distinct!  arel bind_values + ","relation arel bind_row [] s "," except select group  arel bind_values "," select group  arel bind_values "," except group  arel bind_values "," with_default_scope except group  arel bind_values "," except  arel bind_values "," except distinct!  arel bind_values "," except select group  arel "," select group  arel "," except group  arel "," with_default_scope except group  arel "," except  arel "," except distinct!  arel ","@klass reflect_on_association  belongs_to? ","@klass _reflect_on_association  belongs_to? "," klass _reflect_on_association  belongs_to? "," select_row [] s ","  operation_over_aggregate_column s "," arel_ aggregate_column s ","@klass reflect_on_association  klass base_class where ","@klass _reflect_on_association  klass base_class where "," klass _reflect_on_association  klass base_class where ","association klass base_class primary_key_records []  ","association klass base_class primary_ type_cast_calculated_value  ","association klass base_class primary_key first  ","@klass reflect_on_association  klass base_class primary_key ","@klass _reflect_on_association  klass base_class primary_key "," klass _reflect_on_association  klass base_class primary_key "," except select group  bound_attributes "," select group  bound_attributes "," except group  bound_attributes "," with_default_scope except group  bound_attributes "," except  bound_attributes "," except distinct!  bound_attributes ","Type  default_row []  "," aggregate_column _name to_s downcase "," aggregate_column _name to_s "," connection visitor compile  to_s downcase "," connection visitor compile  to_s "," klass _reflect_on_@klass reflect_on_association  "," klass _reflect_on_@klass _reflect_on_association  "," klass _reflect_on_ klass _reflect_on_association  ","association primary_key_name s first "," Array  first "," arel_columns  first ","group_fields uniq  first ","group_ connection visitor compile s first ","association primary_key_name s first respond_to? "," Array  first respond_to? "," arel_columns  first respond_to? ","group_fields uniq  first respond_to? ","group_ connection visitor compile s first respond_to? ","association primary_key_name s size == "," Array  size == "," arel_columns  size == ","group_fields uniq  size == ","group_ connection visitor compile s size == ","association primary_key_name s size "," Array  size "," arel_columns  size ","group_fields uniq  size ","group_ connection visitor compile s size ","type subtype  deserialize "," lookup_cast_type subtype _from_join_dependencies "," aggregate_column  try ","@klass connection select_all  columns each_with_object with_index ","calculated_data  aggregate_column s each_with_object with_index ","@klass connection select_all  columns each_with_object ","calculated_data  aggregate_column s each_with_object ","@klass connection select_all  columns ","calculated_data  aggregate_column s ","calculated_data cast_row [] s map! ","@klass connection select_all  cast_values map! ","calculated_data cast_row [] s ","@klass connection select_all  cast_values ","type subtype s []= "," column_for s each_with_object ","group_aliases zip  each_with_object ","group_ aggregate_column s each_with_object ","key_records [] _records index_by "," type_cast_calculated_value _records index_by ","key first _records index_by ","association klass base_class find  index_by ","Hash  []  index_by ","association klass base_class where  index_by ","key_records index_by  index_by ","select_row []  as "," operation_over_aggregate_column  as "," aggregate_column _name inspect ","association primary_key_name s == "," Array  == "," arel_columns  == "," group_values  == ","group_fields uniq  == ","group_ connection visitor compile s == ","association primary_key_name s uniq "," Array  uniq "," arel_columns  uniq "," group_values  uniq ","group_fields uniq  uniq ","group_ connection visitor compile s uniq ","association primary_key_name s size > "," Array  size > "," arel_columns  size > "," group_values  size > ","group_fields uniq  size > ","group_ connection visitor compile s size > ","type subtype  subtype subtype  "," connection quote_ aggregate_column _name "," column_alias_for _tracker alias_for ","column_alias_tracker alias_for _tracker alias_for "," aggregate_column _alias_tracker alias_for ","ColumnAliasTracker  new  alias_for "]}," ActiveRecord Calculations execute_simple_calculation":{"type":"method","name":"execute_simple_calculation","children":[],"call":[" type_cast_calculated_value "," column_for ","@klass connection select_value ","relation to_sql ","@klass connection "," except select ","column send ","column count ","operation == "," except ","Arel SqlLiteral  new ","column_name to_s ","column_name == ","Arel Attribute  new ","@klass unscoped ","@klass column_names include? ","@klass column_names ","relation select_values= "," operation_over_aggregate_column "," aggregate_column ","relation arel "," build_count_subquery ","relation limit_value == ","relation limit_value ","relation offset_value "," reorder ","query_builder to_sql "," with_default_scope reorder "," with_default_scope ","result column_types fetch ","result column_types ","row values first ","row values ","result first ","@klass connection select_all ","relation bind_values ","select_value alias "," unscope "," type_for ","query_builder bind_values + ","query_builder bind_values ","@klass connection column_name_for_operation "," bound_attributes ","select_value distinct= "," unscope distinct! "," spawn "," limit_value == "," limit_value "," offset_value "," has_limit_or_offset? "," skip_query_cache_if_necessary ","type deserialize ","Type  default_value "," lookup_cast_type_from_join_dependencies ","column try ","result cast_values first ","result cast_values ","type subtype ","Enum EnumType  === ","operation != ","operation capitalize ","@klass name ","query_result then ","ActiveRecord Result  empty ","relation where_clause contradiction? ","relation where_clause "," type subtype _cast_calculated_value "," Arel SqlLiteral  new _for "," Arel Attribute  new _for ","  aggregate_column _for ","@klass connection  operation_over_aggregate_column  "," except select  to_sql "," except  to_sql "," reorder  to_sql "," with_default_scope reorder  to_sql "," unscope  to_sql "," unscope distinct!  to_sql ","Arel SqlLiteral  new  send ","Arel Attribute  new  send "," aggregate_column  send ","Arel SqlLiteral  new  count ","Arel Attribute  new  count "," aggregate_column  count ","Arel SqlLiteral  new _name to_s ","Arel Attribute  new _name to_s "," aggregate_column _name to_s ","Arel SqlLiteral  new _name == ","Arel Attribute  new _name == "," aggregate_column _name == ","@klass Arel SqlLiteral  new _names include? ","@klass Arel Attribute  new _names include? ","@klass  aggregate_column _names include? ","@klass Arel SqlLiteral  new _names ","@klass Arel Attribute  new _names ","@klass  aggregate_column _names "," except select  select_values= "," except  select_values= "," reorder  select_values= "," with_default_scope reorder  select_values= "," unscope  select_values= "," unscope distinct!  select_values= ","relation  operation_over_aggregate_column s= "," operation_over_aggregate_Arel SqlLiteral  new  "," operation_over_aggregate_Arel Attribute  new  "," operation_over_aggregate_ aggregate_column  "," aggregate_Arel SqlLiteral  new  "," aggregate_Arel Attribute  new  "," aggregate_ aggregate_column  "," except select  arel "," except  arel "," reorder  arel "," with_default_scope reorder  arel "," unscope  arel "," unscope distinct!  arel "," except select  limit_value == "," except  limit_value == "," reorder  limit_value == "," with_default_scope reorder  limit_value == "," unscope  limit_value == "," unscope distinct!  limit_value == "," except select  limit_value "," except  limit_value "," reorder  limit_value "," with_default_scope reorder  limit_value "," unscope  limit_value "," unscope distinct!  limit_value "," except select  offset_value "," except  offset_value "," reorder  offset_value "," with_default_scope reorder  offset_value "," unscope  offset_value "," unscope distinct!  offset_value ","relation arel  to_sql "," build_count_subquery  to_sql ","result Arel SqlLiteral  new _types fetch ","result Arel Attribute  new _types fetch ","result  aggregate_column _types fetch ","@klass connection select_all  column_types fetch ","result column_type subtype s fetch ","result Arel SqlLiteral  new _types ","result Arel Attribute  new _types ","result  aggregate_column _types ","@klass connection select_all  column_types ","result column_type subtype s ","result first  values first ","result first  values ","@klass connection select_all  first "," except select  bind_values "," except  bind_values "," reorder  bind_values "," with_default_scope reorder  bind_values "," unscope  bind_values "," unscope distinct!  bind_values ","relation query_builder bind_values +  "," operation_over_aggregate_column  alias "," type subtype _for ","relation arel  bind_values + "," build_count_subquery  bind_values + ","query_builder query_builder bind_values +  + ","relation arel  bind_values "," build_count_subquery  bind_values ","query_builder query_builder bind_values +  ","@klass connection Arel SqlLiteral  new _name_for_operation ","@klass connection Arel Attribute  new _name_for_operation ","@klass connection  aggregate_column _name_for_operation "," operation_over_aggregate_column  distinct= ","type subtype  deserialize "," lookup_cast_type subtype _from_join_dependencies ","Arel SqlLiteral  new  try ","Arel Attribute  new  try "," aggregate_column  try ","@klass connection select_all  cast_values first ","@klass connection select_all  cast_values ","type subtype  subtype subtype  ","query_@klass connection select_all  then ","ActiveRecord Result  empty  then "," except select  where_clause contradiction? "," except  where_clause contradiction? "," reorder  where_clause contradiction? "," with_default_scope reorder  where_clause contradiction? "," unscope  where_clause contradiction? "," unscope distinct!  where_clause contradiction? "," except select  where_clause "," except  where_clause "," reorder  where_clause "," with_default_scope reorder  where_clause "," unscope  where_clause "," unscope distinct!  where_clause "]}," ActiveRecord Calculations perform_calculation":{"type":"method","name":"perform_calculation","children":[],"call":[" execute_simple_calculation "," execute_grouped_calculation ","@group_values any? ","operation == ","column_name blank? ","options [] ","column_name =~ ","@klass primary_key ","column_name == "," arel joins =~ "," arel joins "," arel "," select_for_count ","operation to_s downcase ","operation to_s ","column_name to_s =~ ","column_name to_s ","joins =~ ","joins present? "," arel join_sql =~ "," arel join_sql "," primary_key "," arel ast grep empty? "," arel ast grep "," arel ast "," uniq_value "," group_values any? "," group_values ","ActiveSupport Deprecation  warn ","options has_key? "," distinct_value ","(and\n  (send nil :has_limit_or_offset?)\n  (send\n    (send nil :order_values) :any?)) ! "," order_values any? "," order_values "," has_limit_or_offset? "," order_values empty? "," select_values empty? "," select_values "," distinct_select? "," group_values empty? ","distinct ! ","(str \"\\\\bDISTINCT[\\\\s(]\") match? ","column_name is_a? ","operation to_s downcase  == ","@klass primary_key  blank? "," primary_key  blank? ","@klass primary_key  =~ "," primary_key  =~ ","@klass primary_key  == "," primary_key  == "," arel  arel joins  =~ "," arel  arel joins  ","operation to_s downcase  to_s downcase ","operation to_s downcase  to_s ","@klass primary_key  to_s =~ "," primary_key  to_s =~ ","@klass primary_key  to_s "," primary_key  to_s "," arel joins  =~ "," arel joins  present? "," options [] _value ","  distinct_value _value ","  distinct_select? _value "," options [] _select? ","  distinct_value _select? ","  distinct_select? _select? ","options []  ! "," distinct_value  ! "," distinct_select?  ! ","@klass primary_key  is_a? "," primary_key  is_a? "]}," ActiveRecord Calculations calculate":{"type":"method","name":"calculate","children":[],"call":[" perform_calculation "," construct_relation_for_association_calculations calculate "," construct_relation_for_association_calculations "," includes_values present? "," includes_values "," eager_loading? "," apply_finder_options calculate ","options [] "," apply_finder_options ","options except ","options except present? ","relation calculate "," references_eager_loaded_tables? ","relation equal? "," with_default_scope "," has_include? "," attribute_alias "," attribute_alias? ","column_name is_a? ","relation distinct ","operation to_s downcase == ","operation to_s downcase ","operation to_s ","relation distinct! ","relation order_values= "," select_values empty? "," select_values ","column_name nil? ","column_name == "," distinct_value ! "," distinct_value "," apply_join_dependency ","relation select_values= "," table [] ","Arel  star "," table "," klass primary_key "," klass "," distinct_select? "," select_for_count "," group_values empty? "," group_values ","operation == ","Promise Complete  new ","Hash  new "," group_values any? "," construct_ with_default_scope _for_association_calculations calculate "," construct_relation distinct _for_association_calculations calculate "," construct_ construct_relation_for_association_calculations _for_association_calculations calculate "," construct_ apply_join_dependency _for_association_calculations calculate "," construct_ with_default_scope _for_association_calculations "," construct_relation distinct _for_association_calculations "," construct_ construct_relation_for_association_calculations _for_association_calculations "," construct_ apply_join_dependency _for_association_calculations "," with_default_scope  calculate ","relation distinct  calculate "," construct_relation_for_association_calculations  calculate "," apply_join_dependency  calculate "," with_default_scope  equal? ","relation distinct  equal? "," construct_relation_for_association_calculations  equal? "," apply_join_dependency  equal? "," attribute_alias  is_a? "," with_default_scope  distinct ","relation distinct  distinct "," construct_relation_for_association_calculations  distinct "," apply_join_dependency  distinct ","operation to_s downcase  to_s downcase == ","operation to_s downcase  to_s downcase ","operation to_s downcase  to_s "," with_default_scope  distinct! ","relation distinct  distinct! "," construct_relation_for_association_calculations  distinct! "," apply_join_dependency  distinct! "," with_default_scope  order_values= ","relation distinct  order_values= "," construct_relation_for_association_calculations  order_values= "," apply_join_dependency  order_values= "," attribute_alias  nil? "," attribute_alias  == "," with_default_scope  select_values= ","relation distinct  select_values= "," construct_relation_for_association_calculations  select_values= "," apply_join_dependency  select_values= ","operation to_s downcase  == "]}," ActiveRecord Calculations sum":{"type":"method","name":"sum","children":[],"call":[" calculate "," to_a sum "," to_a "," block_given? ","ActiveSupport Deprecation  warn ","column_name nil? "," raise ","values sum ","values inject ","(str \"            Rails 7.0 has deprecated Enumerable.sum in favor of Ruby's native implementation available since 2.4.\\n\") squish ","identity_or_column nil? ","values first == ","values first ","values first is_a? "," map ","values first respond_to? "," map sum "," map  sum "," map  inject "," map  first == "," map  first "," map  first is_a? "," map  first respond_to? "]}," ActiveRecord Calculations maximum":{"type":"method","name":"maximum","children":[],"call":[" calculate "]}," ActiveRecord Calculations minimum":{"type":"method","name":"minimum","children":[],"call":[" calculate "]}," ActiveRecord Calculations average":{"type":"method","name":"average","children":[],"call":[" calculate "]}," ActiveRecord Calculations count":{"type":"method","name":"count","children":[],"call":[" calculate ","column_name is_a? "," raise ","ActiveRecord  const_defined? ! ","ActiveRecord  const_defined? ","options present? "," block_given? "," to_a count "," to_a ","ActiveSupport Deprecation  warn ","column_name nil? "]}," ActiveRecord Batches batch_order":{"type":"method","name":"batch_order","children":[],"call":["@klass primary_key ","@klass table_name ","@klass quoted_primary_key ","@klass quoted_table_name "," quoted_primary_key "," quoted_table_name "," arel_attribute asc "," arel_attribute "," primary_key "," table [] public_send "," table [] "," table "]}," ActiveRecord Batches find_in_batches":{"type":"method","name":"find_in_batches","children":[],"call":[" raise ","relation where to_a ","relation where "," primary_key gt "," primary_key ","records last id ","records last ","records size < ","records size ","records any? ","relation where all "," primary_key gteq ","relation except order limit ","relation except order "," batch_order ","relation except ","options delete ","options delete to_i "," apply_finder_options ","options [] present? ","options [] ","(lvasgn :finder_options\n  (send\n    (lvar :options) :except\n    (sym :start)\n    (sym :batch_size))) present? ","options except ","ActiveRecord Base  logger warn ","ActiveRecord Base  logger "," taken present? "," taken "," orders present? "," orders "," arel taken blank? "," arel taken "," arel "," arel orders blank? "," arel orders "," table [] gt "," table [] "," table "," table [] gteq ","relation reorder limit ","relation reorder ","records_size < ","relation to_a ","options assert_valid_keys "," logger warn "," logger "," arel taken present? "," arel orders present? ","(send\n  (lvar :total) :-\n  (int 1)) div + ","(send\n  (lvar :total) :-\n  (int 1)) div ","total - "," size "," where size "," where "," to_enum "," block_given? ","relation reverse_order_value= ","batch to_a "," in_batches "," apply_limits size "," apply_limits ","ActiveSupport Deprecation  warn ","(str \"            Passing `start` value to find_in_batches is deprecated, and will be removed in Rails 5.1.\\n\") squish "," build_batch_orders ","relation except order limit  where to_a "," apply_finder_options  where to_a ","relation reorder limit  where to_a ","relation except order limit  where "," apply_finder_options  where ","relation reorder limit  where ","relation where to_a  last id ","relation where all  last id ","relation to_a  last id ","relation where to_a  last ","relation where all  last ","relation to_a  last ","relation where to_a  size < ","relation where all  size < ","relation to_a  size < ","relation where to_a  size ","relation where all  size ","relation to_a  size ","relation where to_a  any? ","relation where all  any? ","relation to_a  any? ","relation except order limit  where all "," apply_finder_options  where all ","relation reorder limit  where all ","relation except order limit  except order limit "," apply_finder_options  except order limit ","relation reorder limit  except order limit ","relation except order limit  except order "," apply_finder_options  except order ","relation reorder limit  except order ","relation except order limit  except "," apply_finder_options  except ","relation reorder limit  except "," apply_options except  ","(lvasgn :finder_options\n  (send\n    (lvar :options) :except\n    (sym :options delete to_i )\n    (sym :batch_size))) present? ","(lvasgn :finder_options\n  (send\n    (lvar :options) :except\n    (sym :options delete )\n    (sym :batch_size))) present? ","(lvasgn :finder_options\n  (send\n    (lvar :options) :except\n    (sym :options [] )\n    (sym :batch_size))) present? ","(lvasgn :options except \n  (send\n    (lvar :options) :except\n    (sym :start)\n    (sym :batch_size))) present? ","relation except order limit  reorder limit "," apply_finder_options  reorder limit ","relation reorder limit  reorder limit ","relation except order limit  reorder "," apply_finder_options  reorder ","relation reorder limit  reorder ","relation where to_a _size < ","relation where all _size < ","relation to_a _size < ","records size  < ","relation except order limit  to_a "," apply_finder_options  to_a ","relation reorder limit  to_a ","(send\n  (lvar : size ) :-\n  (int 1)) div + ","(send\n  (lvar : where size ) :-\n  (int 1)) div + ","(send\n  (lvar : apply_limits size ) :-\n  (int 1)) div + ","(send\n  (lvar : size ) :-\n  (int 1)) div ","(send\n  (lvar : where size ) :-\n  (int 1)) div ","(send\n  (lvar : apply_limits size ) :-\n  (int 1)) div "," size  - "," where size  - "," apply_limits size  - ","relation except order limit  reverse_order_value= "," apply_finder_options  reverse_order_value= ","relation reorder limit  reverse_order_value= ","(str \"            Passing `options delete to_i ` value to find_in_batches is deprecated, and will be removed in Rails 5.1.\\n\") squish ","(str \"            Passing `options delete ` value to find_in_batches is deprecated, and will be removed in Rails 5.1.\\n\") squish ","(str \"            Passing `options [] ` value to find_in_batches is deprecated, and will be removed in Rails 5.1.\\n\") squish "]}," ActiveRecord Batches find_each":{"type":"method","name":"find_each","children":[],"call":["records each "," find_in_batches "," size "," where size "," where "," table [] gteq ","options [] "," table [] "," primary_key "," table "," enum_for "," block_given? "," apply_limits size "," apply_limits ","ActiveSupport Deprecation  warn ","(str \"            Passing `start` value to find_each is deprecated, and will be removed in Rails 5.1.\\n\") squish "," build_batch_orders "]}," ActiveRecord Reflection AssociationReflection belongs_to?":{"type":"method","name":"belongs_to?","children":[],"call":[" macro == "," macro "]}," ActiveRecord Reflection AssociationReflection primary_key_column":{"type":"method","name":"primary_key_column","children":[],"call":["c name == "," klass primary_key "," klass ","c name "," klass columns find "," klass columns "," klass columns_hash [] "," klass columns_hash "]}," ActiveRecord Reflection AssociationReflection initialize":{"type":"method","name":"initialize","children":[],"call":["(sym :has_many) include? ","macro in? "," macro "," calculate_constructable ","options [] ","has_many == ","Mutex  new ","ActiveSupport Deprecation  warn ","(str \"            Passing a class to the `class_name` is deprecated and will raise\\n\") squish ","options [] class == ","options [] class "," raise ","Concurrent Map  new ","(or\n  (csend\n    (send\n      (lvar :options) :[]\n      (sym :foreign_type)) :to_s)\n  (dstr\n    (begin\n      (lvar :name))\n    (str \"_type\"))) -@ ","(or\n  (csend\n    (send\n      (lvar :options) :[]\n      (sym :foreign_type)) :to_s)\n  (dstr\n    (begin\n      (send\n        (lvar :options) :[]\n        (sym :as)))\n    (str \"_type\"))) -@ "," ensure_option_not_given_as_class! "]}," ActiveRecord Railties ControllerRuntime ClassMethods log_process_action":{"type":"method","name":"log_process_action","children":[],"call":["messages << ","ActiveRecord: %.1fms % ","db_runtime to_f ","payload [] "]}," ActiveRecord Railties ControllerRuntime append_info_to_payload":{"type":"method","name":"append_info_to_payload","children":[],"call":["payload []= "," db_runtime ","(or\n  (send nil :db_runtime)\n  (int 0)) + ","ActiveRecord LogSubscriber  reset_runtime ","ActiveRecord Base  connected? ","ActiveRecord RuntimeRegistry  reset "]}," ActiveRecord Railties ControllerRuntime cleanup_view_runtime":{"type":"method","name":"cleanup_view_runtime","children":[],"call":["runtime - "," db_runtime= ","db_rt_before_render + ","ActiveRecord LogSubscriber  reset_runtime ","ActiveRecord Base  connected? ","ActiveRecord Base  connection reset_runtime ","ActiveRecord Base  connection "," db_runtime ","(or\n  (send nil :db_runtime)\n  (int 0)) + "," logger info? "," logger ","ActiveRecord RuntimeRegistry  reset ","ActiveRecord LogSubscriber  reset_runtime  + ","ActiveRecord Base  connection reset_runtime  + ","ActiveRecord RuntimeRegistry  reset  + "]}," ActiveRecord Persistence attributes_from_column_definition":{"type":"method","name":"attributes_from_column_definition","children":[],"call":["attributes []= ","column default ","column name ","column name == "," class primary_key "," class "," class columns inject "," class columns "," class column_defaults dup "," class column_defaults ","Hash  [] "," class columns map "]}," ActiveRecord Persistence create":{"type":"method","name":"create","children":[],"call":[" id "," class unscoped insert "," class unscoped "," class "," connection empty_insert_statement_value "," connection ","attributes_values empty? "," arel_attributes_values "," id= "," connection next_sequence_value "," class sequence_name "," connection prefetch_primary_key? "," class table_name "," id nil? ","IdentityMap  add ","IdentityMap  enabled? "," id nil? ! "," class primary_key "," arel_attributes_values  empty? "," arel_ arel_attributes_values  "]}," ActiveRecord Persistence update":{"type":"method","name":"update","children":[],"call":[" class unscoped where arel update "," class unscoped where arel "," class unscoped where "," class arel_table [] eq "," id "," class arel_table [] "," class primary_key "," class "," class arel_table "," class unscoped ","attributes_with_values empty? "," arel_attributes_values ","klass connection update ","klass connection ","klass unscoped where arel compile_update ","klass unscoped where arel ","klass unscoped where ","klass arel_table [] eq ","klass arel_table [] ","klass primary_key ","klass arel_table ","klass unscoped ","stmt to_sql "," save "," assign_attributes "," with_transaction_returning_status "," arel_attributes_values  empty? "," class  connection update "," class  connection "," class  unscoped where arel compile_update "," class  unscoped where arel "," class  unscoped where "," class  arel_table [] eq "," class  arel_table [] "," class  primary_key "," class  arel_table "," class  unscoped ","klass unscoped where arel compile_update  to_sql "]}," ActiveRecord Persistence create_or_update":{"type":"method","name":"create_or_update","children":[],"call":["result != "," update "," create "," new_record? "," raise "," readonly? "," persisted? "," update_record "," create_record "," _update_record "," _create_record "," class "," _raise_readonly_record_error "," destroyed? "," update  != "," create  != "," update_record  != "," create_record  != "," _update_record  != "," _create_record  != "]}," ActiveRecord Persistence touch":{"type":"method","name":"touch","children":[],"call":[" class update_all == "," class update_all "," [] "," class "," class primary_key ","@changed_attributes except! ","changes keys ","changes []= "," write_attribute ","column to_s ","attributes each "," current_time_from_proper_timezone ","attributes << ","attributes blank? "," timestamp_attributes_for_update_in_model ","attributes empty? "," class unscoped update_all == "," class unscoped update_all "," class unscoped "," increment_lock "," class locking_column "," locking_enabled? "," class unscoped where update_all == "," class unscoped where update_all "," class unscoped where "," raise "," persisted? "," changed_attributes except! "," changed_attributes "," clear_attribute_changes ","attributes concat ","ActiveRecord StaleObjectError  new ","result ! ","scope update_all == ","scope update_all ","scope where "," _read_attribute ","(str \"          cannot touch on a new or destroyed record object. Consider using\\n\") squish ","affected_rows == "," _touch_row ","attribute_names empty? ","attribute_names concat ","names map "," read_attribute_before_type_cast "," _relation_for_itself "," class attribute_aliases [] "," class attribute_aliases ","names map! map! ","names map! ","name to_s ","names empty? "," _raise_record_not_touched_error "," _raise_readonly_record_error "," readonly? "," verify_readonly_attribute ","(send\n  (lvar :attribute_names) :|\n  (lvar :names)) map! ","attribute_names | "," class  class primary_key  ","@changed_ timestamp_attributes_for_update_in_model  except! ","column to_s  to_s "," timestamp_attributes_for_update_in_model  each ","  current_time_from_proper_timezone _from_proper_timezone "," timestamp_attributes_for_update_in_model  << "," timestamp_attributes_for_update_in_model  blank? "," timestamp_ timestamp_attributes_for_update_in_model _for_update_in_model "," timestamp_attributes_for_update_in_model  empty? "," class unscope where d update_all == "," class un class unscoped where d update_all == "," class un _relation_for_itself d update_all == "," class unscope where d update_all "," class un class unscoped where d update_all "," class un _relation_for_itself d update_all "," class unscope where d "," class un class unscoped where d "," class un _relation_for_itself d "," class locking_column to_s  "," class  class locking_column  "," class unscope where d where update_all == "," class un class unscoped where d where update_all == "," class un _relation_for_itself d where update_all == "," class unscope where d where update_all "," class un class unscoped where d where update_all "," class un _relation_for_itself d where update_all "," class unscope where d where "," class un class unscoped where d where "," class un _relation_for_itself d where "," changed_ timestamp_attributes_for_update_in_model  except! "," changed_ timestamp_attributes_for_update_in_model  "," timestamp_attributes_for_update_in_model  concat ","scope update_all ==  ! ","scope where  update_all == "," class unscoped where  update_all == "," _relation_for_itself  update_all == ","scope where  update_all "," class unscoped where  update_all "," _relation_for_itself  update_all ","scope where  where "," class unscoped where  where "," _relation_for_itself  where "," _touch_row  == ","attribute_name to_s s empty? ","attribute_name to_s s concat ","name to_s s map ","name to_s s map! map! ","name to_s s map! ","name to_s  to_s ","name to_s s empty? ","(send\n  (lvar : timestamp_attributes_for_update_in_model ) :|\n  (lvar :names)) map! ","(send\n  (lvar :attribute_name to_s s) :|\n  (lvar :name to_s s)) map! "," timestamp_attributes_for_update_in_model  | ","attribute_name to_s s | "]}," ActiveRecord Persistence reload":{"type":"method","name":"reload","children":[],"call":["@attributes update ","(send\n  (send\n    (self) :class) :unscoped) instance_variable_get "," class find "," id "," class "," class unscoped "," clear_association_cache "," clear_aggregation_cache ","(send\n  (send\n    (self) :class) :send\n  (sym :with_exclusive_scope)) instance_variable_get "," class send ","fresh_object instance_variable_get ","IdentityMap  without "," class lock find "," class lock ","options [] "," class column_types "," class connection clear_query_cache "," class connection "," _find_record "," apply_scoping? ","(or\n  (lvar :options)\n  (hash)) merge ","fresh_object instance_variable_get  update "," _find_record  instance_variable_get "]}," ActiveRecord Persistence toggle!":{"type":"method","name":"toggle!","children":[],"call":[" toggle update_attribute "," [] "," toggle "," toggle update_column "]}," ActiveRecord Persistence toggle":{"type":"method","name":"toggle","children":[],"call":[" []= "," send ! "," send "," public_send ! "," public_send "]}," ActiveRecord Persistence decrement!":{"type":"method","name":"decrement!","children":[],"call":[" decrement update_attribute "," [] "," decrement "," decrement update_column "," increment! ","by -@ "]}," ActiveRecord Persistence decrement":{"type":"method","name":"decrement","children":[],"call":[" [] "," increment ","by -@ "]}," ActiveRecord Persistence increment!":{"type":"method","name":"increment!","children":[],"call":[" increment update_attribute "," [] "," increment "," increment update_column "," clear_attribute_change "," class update_counters "," id "," class "," public_send - "," attribute_was ","attribute to_s "," public_send "," attribute_in_database "," clear_attribute_ public_send -  "]}," ActiveRecord Persistence increment":{"type":"method","name":"increment","children":[],"call":[" [] "]}," ActiveRecord Persistence update_attributes!":{"type":"method","name":"update_attributes!","children":[],"call":[" save! "," attributes= "," with_transaction_returning_status "," assign_attributes "]}," ActiveRecord Persistence update_attributes":{"type":"method","name":"update_attributes","children":[],"call":[" save "," attributes= "," with_transaction_returning_status "," assign_attributes "]}," ActiveRecord Persistence update_attribute":{"type":"method","name":"update_attribute","children":[],"call":[" save "," send "," raise "," class readonly_attributes include? "," class readonly_attributes "," class ","name to_s "," class update_all == "," class update_all "," [] "," class primary_key ","@changed_attributes except! ","changes keys ","changes []= "," read_attribute "," record_update_timestamps ","ActiveSupport Deprecation  warn "," verify_readonly_attribute "," changed? "," public_send "," has_changes_to_save? ","name to_s  to_s "," class  class primary_key  "]}," ActiveRecord Persistence becomes":{"type":"method","name":"becomes","children":[],"call":["became instance_variable_set "," destroyed? "," new_record? ","klass new "," persisted? ","became type= ","klass name "," class descends_from_active_record? "," class "," errors ","became send ","klass inheritance_column ","became errors copy! ","became errors "," attributes_changed_by_setter ","klass allocate ","becoming errors copy! ","becoming errors ","becoming instance_variable_set ","@attributes reverse_merge! ","becoming instance_variable_get ","klass new  instance_variable_set ","klass allocate  instance_variable_set ","klass new  type= ","klass allocate  type= ","klass new  send ","klass allocate  send ","klass new  errors copy! ","klass allocate  errors copy! ","klass new  errors ","klass allocate  errors "]}," ActiveRecord Persistence destroy":{"type":"method","name":"destroy","children":[],"call":[" freeze "," class unscoped where delete_all "," class unscoped where "," class arel_table [] eq "," id "," class arel_table [] "," class primary_key "," class "," class arel_table "," class unscoped "," persisted? "," destroy_associations ","relation delete_all ","relation bind_values= "," connection substitute_at "," connection "," class columns_hash [] "," class columns_hash ","IdentityMap  remove ","IdentityMap  enabled? "," destroy_row "," raise "," readonly? "," class connection add_transaction_record "," class connection "," destroy_row > "," _raise_readonly_record_error "," class unscoped where  delete_all "," class unscoped where  bind_values= "," connection  connection substitute_at _at "," class  class columns_hash [] s_hash [] "," class  class columns_hash [] s_hash "]}," ActiveRecord Persistence delete":{"type":"method","name":"delete","children":[],"call":[" freeze "," class delete "," id "," class "," persisted? ","IdentityMap  remove ","IdentityMap  enabled? "," _delete_row "," _relation_for_itself delete_all "," _relation_for_itself "]}," ActiveRecord Persistence save!":{"type":"method","name":"save!","children":[],"call":[" raise "," create_or_update ","RecordNotSaved  new "]}," ActiveRecord Persistence save":{"type":"method","name":"save","children":[],"call":[" create_or_update "]}," ActiveRecord Persistence persisted?":{"type":"method","name":"persisted?","children":[],"call":["(or\n  (send nil :new_record?)\n  (send nil :destroyed?)) ! "," destroyed? "," new_record? "," destroyed? ! ","(or\n  (ivar :@new_record)\n  (ivar :@destroyed)) ! "," sync_with_transaction_state "]}," ActiveRecord Persistence destroyed?":{"type":"method","name":"destroyed?","children":[],"call":[" sync_with_transaction_state "]}," ActiveRecord Persistence new_record?":{"type":"method","name":"new_record?","children":[],"call":["@persisted ! "," sync_with_transaction_state "]}," ActiveRecord Observer define_callbacks":{"type":"method","name":"define_callbacks","children":[],"call":["klass send ","observer update ","existing_methods include? "," class observed_methods each "," class observed_methods "," class ","observer class name underscore gsub ","observer class name underscore ","observer class name ","observer class ","m to_sym ","klass instance_methods map ","klass instance_methods ","observer send ","klass respond_to? "," respond_to? ","ActiveRecord Callbacks CALLBACKS  each ","klass instance_methods map  include? "]}," ActiveRecord Observer observe_callbacks?":{"type":"method","name":"observe_callbacks?","children":[],"call":[" class observed_methods any? "," class observed_methods "," class "]}," ActiveRecord Observer observed_descendants":{"type":"method","name":"observed_descendants","children":[],"call":["klass descendants "," observed_classes sum "," observed_classes "]}," ActiveRecord Observer method_added":{"type":"method","name":"method_added","children":[],"call":[]}," ActiveRecord NamedScope ClassMethods valid_scope_name?":{"type":"method","name":"valid_scope_name?","children":[],"call":[" logger warn "," name "," logger "," respond_to? "," scopes [] ! "," scopes [] "," scopes "]}," ActiveRecord NamedScope ClassMethods scope":{"type":"method","name":"scope","children":[],"call":[" singleton_class send "," scopes [] "," scopes "," singleton_class "," scopes []= ","relation extending "," scoped "," scoped merge "," scoped apply_finder_options ","options is_a? ","scope_options call ","scope_options is_a? "," lambda ","Module  new "," block_given? "," valid_scope_name? ","name to_sym "," scopes [] call "," define_method "," metaclass instance_eval "," metaclass ","Scope  init ","options call "," raise "," name "," respond_to? "," scopes [] ! "," singleton_class instance_eval "," logger warn "," logger ","relation apply_finder_options ","scope_options respond_to? ","Proc  new "," unscoped "," scoped apply_finder_options  extending "," scoped merge  extending ","relation apply_finder_options  extending "," scoped  extending "," scoped apply_finder_scope_options call  "," scoped apply_finder_ scoped apply_finder_options  ","scope_options call  is_a? "," scoped apply_finder_options  is_a? ","scope_scope_options call  call ","scope_ scoped apply_finder_options  call ","scope_scope_options call  is_a? ","scope_ scoped apply_finder_options  is_a? "," valid_scope_name to_sym ? ","name to_sym  to_sym ","scope_options call  call "," scoped apply_finder_options  call "," name to_sym  "," scoped apply_finder_options  apply_finder_options "," scoped merge  apply_finder_options ","relation apply_finder_options  apply_finder_options "," scoped  apply_finder_options ","relation apply_finder_scope_options call  ","relation apply_finder_ scoped apply_finder_options  ","scope_scope_options call  respond_to? ","scope_ scoped apply_finder_options  respond_to? "]}," ActiveRecord Migrator move":{"type":"method","name":"move","children":[],"call":[" send ","finish version ","migrator migrations [] ","start_index + ","migrator migrations ","migrator migrations index ","migrator current_migration "," new "," migrations "," current_version == "," current_version "," raise ","UnknownMigrationVersionError  new ","migrator current_migration ! "," current_version != ","finish finish version  ","migrator migrations []  version "," new  migrations [] ","migrator migrations index  + "," new  migrations "," new  migrations index "," new  current_migration "," current_finish version  == "," current_finish version  "," new  current_migration ! "," current_finish version  != "]}," ActiveRecord Migrator forward":{"type":"method","name":"forward","children":[],"call":[" move "]}," ActiveRecord LogSubscriber logger":{"type":"method","name":"logger","children":[],"call":["ActiveRecord Base  logger "]}," ActiveRecord LogSubscriber odd?":{"type":"method","name":"odd?","children":[],"call":["@odd_or_even ! ","@odd ! ","@odd_or_even !  ! ","@odd ! _or_even ! ","@odd !  ! "]}," ActiveRecord LogSubscriber sql":{"type":"method","name":"sql","children":[],"call":[" debug "," color "," odd? ","event payload [] squeeze ","event payload [] ","event payload ","%s (%.1fms) % ","event duration "," logger debug? "," logger "," class runtime "," class ","   + ","(send\n  (send\n    (lvar :payload) :[]\n    (sym :binds)) :map) inspect ","col name ","payload [] map ","payload [] ","(or\n  (send\n    (lvar :payload) :[]\n    (sym :binds))\n  (array)) empty? ","payload [] squeeze ","SCHEMA == "," render_bind ","event duration round ","IGNORE_PAYLOAD_NAMES  include? "," sql_color "," colorize_payload_name ","(send\n  (send\n    (send\n      (lvar :payload) :[]\n      (sym :binds)) :zip\n    (lvar :casted_params)) :map) inspect ","payload [] zip map ","payload [] zip "," type_casted_binds "," colorize_logging ","binds prepend ","binds inspect ","binds << ","casted_params [] ","payload [] each_with_index "," filter ","attr [] name ","attr [] ","attr name ","attr respond_to? ","payload [] round ","attr [] respond_to? ","event event payload  [] squeeze ","event event payload  [] ","event event payload  ","(send\n  (send\n    (lvar :payload) :[]\n    (sym :   + )) :map) inspect ","(send\n  (send\n    (lvar :payload) :[]\n    (sym :binds inspect )) :map) inspect ","(send\n  (send\n    (lvar :event payload ) :[]\n    (sym :binds)) :map) inspect ","col  color  ","col %s (%.1fms) %  ","col  colorize_payload_name  ","event payload  [] map ","event payload  [] ","(or\n  (send\n    (lvar :payload) :[]\n    (sym :   + ))\n  (array)) empty? ","(or\n  (send\n    (lvar :payload) :[]\n    (sym :binds inspect ))\n  (array)) empty? ","(or\n  (send\n    (lvar :event payload ) :[]\n    (sym :binds))\n  (array)) empty? ","event payload  [] squeeze ","  color _color "," event payload [] squeeze _color "," payload [] squeeze _color "," payload [] _color "," colorize_payload_ color  "," colorize_payload_%s (%.1fms) %  "," colorize_payload_ colorize_payload_name  "," colorize_event payload _name ","(send\n  (send\n    (send\n      (lvar :payload) :[]\n      (sym :   + )) :zip\n    (lvar :casted_params)) :map) inspect ","(send\n  (send\n    (send\n      (lvar :payload) :[]\n      (sym :binds inspect )) :zip\n    (lvar :casted_params)) :map) inspect ","(send\n  (send\n    (send\n      (lvar :event payload ) :[]\n      (sym :binds)) :zip\n    (lvar :casted_params)) :map) inspect ","(send\n  (send\n    (send\n      (lvar :payload) :[]\n      (sym :binds)) :zip\n    (lvar : type_casted_binds )) :map) inspect ","event payload  [] zip map ","event payload  [] zip "," type_casted_   +  "," type_casted_binds inspect  ","   +  prepend ","binds inspect  prepend ","   +  inspect ","binds inspect  inspect ","   +  << ","binds inspect  << "," type_casted_binds  [] ","event payload  [] each_with_index ","attr []  color  ","attr [] %s (%.1fms) %  ","attr []  colorize_payload_name  ","attr  color  ","attr %s (%.1fms) %  ","attr  colorize_payload_name  ","event payload  [] round "]}," ActiveRecord LogSubscriber initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord LogSubscriber reset_runtime":{"type":"method","name":"reset_runtime","children":[],"call":[]}," ActiveRecord LogSubscriber runtime":{"type":"method","name":"runtime","children":[],"call":[]}," ActiveRecord LogSubscriber runtime=":{"type":"method","name":"runtime=","children":[],"call":[]}," ActiveRecord Locking Optimistic ClassMethods update_counters":{"type":"method","name":"update_counters","children":[],"call":["counters merge "," locking_column "," locking_enabled? ","counters merge  merge "]}," ActiveRecord Locking Optimistic destroy":{"type":"method","name":"destroy","children":[],"call":[" freeze "," raise "," class name "," class ","affected_rows == "," class unscoped where delete_all "," class unscoped where "," class unscoped ","predicate and ","table [] eq ","table [] "," class locking_column "," id "," class primary_key "," class arel_table "," send to_i "," send "," new_record? "," locking_enabled? "," persisted? ","table [] eq and ","ActiveRecord StaleObjectError  new "," destroy_associations "," class unscoped where delete_all  == ","predicate and  and ","table [] eq  and ","table [] eq and  and "," class arel_table  [] eq "," class arel_table  [] "," class arel_ class arel_table  "," class arel_table  [] eq and "]}," ActiveRecord Locking Optimistic update":{"type":"method","name":"update","children":[],"call":[" raise "," send ","lock_col + "," class name "," class ","affected_rows == ","relation where arel update "," arel_attributes_values ","relation where arel ","relation where ","relation table [] eq and ","relation table [] eq "," quote_value ","relation table [] "," class locking_column ","relation table "," quoted_id "," class primary_key "," class unscoped ","attribute_names uniq! ","previous_value + "," send to_i ","attribute_names empty? "," locking_enabled? "," connection update "," connection ","relation where arel compile_update "," id "," increment_lock ","stmt to_sql ","ActiveRecord StaleObjectError  new "," class columns_hash [] "," class columns_hash "," class locking_column  + ","relation where arel update  == "," connection update  == "," class unscoped  where arel update "," class unscoped  where arel "," class unscoped  where "," class unscoped  table [] eq and "," class unscoped  table [] eq "," class unscoped  table [] "," class unscoped  table "," send to_i  + "," class unscoped  where arel compile_update ","relation where arel compile_update  to_sql "]}," ActiveRecord Locking Optimistic attributes_from_column_definition":{"type":"method","name":"attributes_from_column_definition","children":[],"call":["result [] "," class locking_column "," class ","result include? "," lock_optimistically ","result key? "," class column_defaults dup "," class column_defaults "," class column_defaults dup  [] "," class column_defaults dup  include? "," class column_defaults dup  key? "]}," ActiveRecord MultiparameterAssignmentErrors initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord AttributeAssignmentError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord WrappedDatabaseException initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord DynamicFinderMatch creator?":{"type":"method","name":"creator?","children":[],"call":["@instantiator == ","@finder == "]}," ActiveRecord CounterCache decrement_counter":{"type":"method","name":"decrement_counter","children":[],"call":[" update_counters "]}," ActiveRecord CounterCache increment_counter":{"type":"method","name":"increment_counter","children":[],"call":[" update_counters "]}," ActiveRecord CounterCache update_counters":{"type":"method","name":"update_counters","children":[],"call":[" update_all "," primary_key ","updates join ","value abs "," connection quote_column_name "," connection ","value < ","counters map ","IdentityMap  remove_by_id "," symbolized_base_class ","IdentityMap  enabled? "]}," ActiveRecord CounterCache reset_counters":{"type":"method","name":"reset_counters","children":[],"call":[" unscoped where arel update ","object send count ","object send "," arel_table [] "," arel_table "," unscoped where arel "," unscoped where "," arel_table [] eq ","object id "," primary_key "," unscoped ","reflection counter_cache_column ","e class_name == ","e class_name ","belongs_to find ","child_class reflect_on_all_associations ","has_many_association klass "," name ","has_many_association options [] to_s classify ","has_many_association options [] to_s ","has_many_association options [] ","has_many_association options "," reflect_on_association ","association to_sym ","counters each "," find ","child_class reflect_on_association counter_cache_column ","child_class reflect_on_association "," name demodulize underscore to_sym "," name demodulize underscore "," name demodulize "," reflect_on_association klass "," connection update "," connection "," unscoped where arel compile_update ","stmt to_sql ","e foreign_key to_s == ","e foreign_key to_s ","e foreign_key ","has_many_association foreign_key to_s ","has_many_association foreign_key ","e options [] present? ","e options [] ","e options ","has_many_association through_reflection ","has_many_association is_a? "," find  send count "," find  send "," find  id ","child_class reflect_on_all_associations  find ","has_many_association klass  reflect_on_all_associations "," reflect_on_association klass  reflect_on_all_associations "," reflect_on_association  klass ","has_many_association through_reflection  klass "," reflect_on_association  options [] to_s classify ","has_many_association through_reflection  options [] to_s classify "," reflect_on_association  options [] to_s ","has_many_association through_reflection  options [] to_s "," reflect_on_association  options [] ","has_many_association through_reflection  options [] "," reflect_on_association  options ","has_many_association through_reflection  options ","has_many_association klass  reflect_on_association counter_cache_column "," reflect_on_association klass  reflect_on_association counter_cache_column ","has_many_association klass  reflect_on_association "," reflect_on_association klass  reflect_on_association "," unscoped where arel compile_update  to_sql ","e has_many_association foreign_key to_s  to_s == ","e has_many_association foreign_key to_s  to_s ","e has_many_association foreign_key to_s  "," reflect_on_association  foreign_key to_s ","has_many_association through_reflection  foreign_key to_s ","has_many_association has_many_association foreign_key to_s  to_s "," reflect_on_association  foreign_key ","has_many_association through_reflection  foreign_key ","has_many_association has_many_association foreign_key to_s  "," reflect_on_association  through_reflection ","has_many_association through_reflection  through_reflection "," reflect_on_association  is_a? ","has_many_association through_reflection  is_a? "]}," ActiveRecord ConnectionAdapters SQLiteAdapter translate_exception":{"type":"method","name":"translate_exception","children":[],"call":["RecordNotUnique  new ","exception message "]}," ActiveRecord ConnectionAdapters SQLiteAdapter empty_insert_statement_value":{"type":"method","name":"empty_insert_statement_value","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLiteAdapter quoted_date":{"type":"method","name":"quoted_date","children":[],"call":[" sprintf ","value usec ","value respond_to? ","value acts_like? "]}," ActiveRecord ConnectionAdapters SQLite3Adapter encoding":{"type":"method","name":"encoding","children":[],"call":["encoding [] [] ","encoding [] ","@connection execute ","@connection encoding to_s ","@connection encoding ","@connection respond_to? ","@connection send ","@connection encoding [] [] ","@connection encoding [] ","@connection execute [] [] ","@connection execute [] "," any_raw_connection encoding to_s "," any_raw_connection encoding "," any_raw_connection ","@connection execute  [] [] ","@connection send  [] [] ","@connection execute  [] ","@connection send  [] ","@connection @connection execute  to_s ","@connection @connection send  to_s ","@connection @connection execute  ","@connection @connection send  ","@connection @connection execute  [] [] ","@connection @connection send  [] [] ","@connection @connection execute  [] ","@connection @connection send  [] "," any_raw_connection @connection execute  to_s "," any_raw_connection @connection send  to_s "," any_raw_connection @connection execute  "," any_raw_connection @connection send  "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter translate_exception":{"type":"method","name":"translate_exception","children":[],"call":["InvalidForeignKey  new ","RecordNotUnique  new ","exception message ","exception result error_field ","exception result ","exception result try ","exception respond_to? ","ValueTooLong  new ","Deadlocked  new ","SerializationFailure  new ","NotNullViolation  new ","RangeError  new ","QueryCanceled  new ","LockWaitTimeout  new ","DatabaseAlreadyExists  new ","ConnectionNotEstablished  new ","exception message match? ","ConnectionFailed  new ","exception message end_with? ","exception is_a? "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter table_exists?":{"type":"method","name":"table_exists?","children":[],"call":[" query first [] to_i > "," query first [] to_i "," query first [] "," query first "," query ","table gsub ","name =~ ","name split ","name to_s "," exec_query rows first [] to_i > "," exec_query rows first [] to_i "," exec_query rows first [] "," exec_query rows first "," exec_query rows "," exec_query ","binds << "," extract_schema_and_table ","Utils  extract_schema_and_table ","name to_s  =~ ","name to_s  split ","name to_s  to_s "]}," ActiveRecord ConnectionAdapters MysqlAdapter translate_exception":{"type":"method","name":"translate_exception","children":[],"call":["InvalidForeignKey  new ","RecordNotUnique  new ","exception errno ","exception respond_to? "]}," ActiveRecord ConnectionAdapters AbstractAdapter translate_exception":{"type":"method","name":"translate_exception","children":[],"call":["ActiveRecord StatementInvalid  new "]}," ActiveRecord ConnectionAdapters SchemaStatements index_name_exists?":{"type":"method","name":"index_name_exists?","children":[],"call":["i name == ","i name "," indexes detect "," indexes "," respond_to? ","index_name to_s ","ActiveSupport Deprecation  warn ","            Passing default to #index_name_exists? is deprecated without replacement.\n squish ","default nil? ","index_name to_s  to_s ","            Passing default to #index_name to_s _exists? is deprecated without replacement.\n squish "]}," ActiveRecord ConnectionAdapters SchemaStatements column_exists?":{"type":"method","name":"column_exists?","children":[],"call":["c scale == ","options [] ","c scale ","options [] ! ","c precision == ","c precision ","c limit == ","c limit ","c type == ","c type ","type ! ","c name == ","column_name to_s ","c name "," columns any? "," columns ","c null == ","c null ","options key? ! ","options key? ","c default == ","c default ","check [] ","checks all? ","checks << ","c send == ","c send "," lambda ","(send\n  (send nil :migration_keys) :-\n  (array\n    (sym :name))) each "," migration_keys - "," migration_keys "," column_options_keys each "," column_options_keys ","type to_sym ","column_name to_s  to_s "]}," ActiveRecord ConnectionAdapters Table index_exists?":{"type":"method","name":"index_exists?","children":[],"call":["@base index_exists? "," name "]}," ActiveRecord ConnectionAdapters Table column_exists?":{"type":"method","name":"column_exists?","children":[],"call":["@base column_exists? "," name "]}," ActiveRecord ConnectionAdapters QueryCache select_all":{"type":"method","name":"select_all","children":[],"call":[" cache_sql ","args first "," to_sql "," locked? ! "," locked? "," binds_from_relation "," visitor preparable "," visitor "," to_sql_and_binds "," arel_from_relation "," prepared_statements ","preparable nil? "," lookup_sql_cache ","(and\n  (send\n    (lvar :arel) :respond_to?\n    (sym :locked))\n  (send\n    (lvar :arel) :locked)) ! ","arel locked ","arel respond_to? "," cache_ to_sql  "," to_ to_sql  "," visitor  visitor preparable  "," to_ to_sql _and_binds ","  arel_from_relation _from_relation "," visitor preparable  nil? "," lookup_ to_sql _cache ","(and\n  (send\n    (lvar : arel_from_relation ) :respond_to?\n    (sym :locked))\n  (send\n    (lvar : arel_from_relation ) :locked)) ! "," arel_from_relation  locked "," arel_from_relation  respond_to? "]}," ActiveRecord ConnectionAdapters DatabaseStatements commit_transaction_records":{"type":"method","name":"commit_transaction_records","children":[],"call":["record logger error ","record logger ","record respond_to? ","record committed! ","records uniq each ","records uniq ","records blank? ","@_current_transaction_records clear ","@_current_transaction_records flatten ","@_current_transaction_records flatten  uniq each ","@_current_transaction_records flatten  uniq ","@_current_transaction_records flatten  blank? ","@_current_transaction_@_current_transaction_records flatten  clear ","@_current_transaction_@_current_transaction_records flatten  flatten "]}," ActiveRecord ConnectionAdapters DatabaseStatements rollback_transaction_records":{"type":"method","name":"rollback_transaction_records","children":[],"call":["record logger error ","record logger ","record respond_to? ","record rolledback! ","records uniq each ","records uniq ","records blank? ","@_current_transaction_records pop ","@_current_transaction_records clear ","@_current_transaction_records flatten ","@_current_transaction_records pop  uniq each ","@_current_transaction_records flatten  uniq each ","@_current_transaction_records pop  uniq ","@_current_transaction_records flatten  uniq ","@_current_transaction_records pop  blank? ","@_current_transaction_records flatten  blank? ","@_current_transaction_@_current_transaction_records pop  pop ","@_current_transaction_@_current_transaction_records flatten  pop ","@_current_transaction_@_current_transaction_records pop  clear ","@_current_transaction_@_current_transaction_records flatten  clear ","@_current_transaction_@_current_transaction_records pop  flatten ","@_current_transaction_@_current_transaction_records flatten  flatten "]}," ActiveRecord ConnectionAdapters DatabaseStatements empty_insert_statement_value":{"type":"method","name":"empty_insert_statement_value","children":[],"call":[]}," ActiveRecord ConnectionAdapters DatabaseStatements add_transaction_record":{"type":"method","name":"add_transaction_record","children":[],"call":["last_batch << ","@_current_transaction_records last ","@transaction add_record "," current_transaction add_record "," current_transaction ","@_current_transaction_records last  << "]}," ActiveRecord Callbacks update":{"type":"method","name":"update","children":[],"call":[" _run_update_callbacks "," run_callbacks "]}," ActiveRecord Callbacks create":{"type":"method","name":"create","children":[],"call":[" _run_create_callbacks "," run_callbacks "]}," ActiveRecord Callbacks create_or_update":{"type":"method","name":"create_or_update","children":[],"call":[" _run_save_callbacks "," run_callbacks "]}," ActiveRecord Callbacks deprecated_callback_method":{"type":"method","name":"deprecated_callback_method","children":[],"call":[" send ","ActiveSupport Deprecation  warn "," respond_to? "]}," ActiveRecord Callbacks touch":{"type":"method","name":"touch","children":[],"call":[" _run_touch_callbacks "," run_callbacks "]}," ActiveRecord Callbacks destroy":{"type":"method","name":"destroy","children":[],"call":[" _run_destroy_callbacks "," run_callbacks "]}," ActiveRecord Callbacks ClassMethods method_added":{"type":"method","name":"method_added","children":[],"call":[" send ","meth to_sym ","ActiveSupport Deprecation  warn "," caller [] "," caller ","CALLBACKS  include? "]}," ActiveRecord Base object_from_yaml":{"type":"method","name":"object_from_yaml","children":[],"call":["YAML  load ","string =~ ","string is_a? "]}," ActiveRecord Base convert_number_column_value":{"type":"method","name":"convert_number_column_value","children":[],"call":["value blank? ","value is_a? ","value == "]}," ActiveRecord Base quoted_comma_pair_list":{"type":"method","name":"quoted_comma_pair_list","children":[],"call":[" comma_pair_list "," quote_columns "]}," ActiveRecord Base quote_columns":{"type":"method","name":"quote_columns","children":[],"call":["quoted []= ","quoter quote_column_name ","hash inject ","Hash  [] ","hash map "]}," ActiveRecord Base comma_pair_list":{"type":"method","name":"comma_pair_list","children":[],"call":["(send\n  (lvar :hash) :map) join ","hash map "]}," ActiveRecord Base find_parameter_position":{"type":"method","name":"find_parameter_position","children":[],"call":["multiparameter_name scan first first ","multiparameter_name scan first ","multiparameter_name scan ","multiparameter_name scan first first to_i "]}," ActiveRecord Base type_cast_attribute_value":{"type":"method","name":"type_cast_attribute_value","children":[],"call":["value send ","to_ + ","multiparameter_name =~ "]}," ActiveRecord Base extract_callstack_for_multiparameter_attributes":{"type":"method","name":"extract_callstack_for_multiparameter_attributes","children":[],"call":["attributes []= ","v last ","(send\n  (lvar :values) :sort_by) collect ","v first ","values sort_by ","attributes each ","attributes [] << "," find_parameter_position ","attributes [] "," type_cast_attribute_value ","value empty? ","attributes include? ","multiparameter_name split first ","multiparameter_name split ","attributes [] [] ","pairs each "]}," ActiveRecord Base execute_callstack_for_multiparameter_attributes":{"type":"method","name":"execute_callstack_for_multiparameter_attributes","children":[],"call":[" raise ","errors size ","MultiparameterAssignmentErrors  new ","errors empty? ","errors << ","AttributeAssignmentError  new ","values inspect "," send ","name + ","klass new "," instantiate_time_object to_date "," instantiate_time_object ","Date  new ","v nil? ","values_with_empty_parameters collect ","Date  == ","Time  == ","values empty? ","values_with_empty_parameters reject ","(or\n  (send\n    (send\n      (self) :class) :reflect_on_aggregation\n    (send\n      (lvar :name) :to_sym))\n  (send nil :column_for_attribute\n    (lvar :name))) klass "," column_for_attribute "," class reflect_on_aggregation ","name to_sym "," class ","callstack each ","values_with_empty_parameters values inspect ","values_with_empty_parameters values "," read_value_from_parameter "," instantiate_time_object s inspect ","values_with_empty_parameters reject  inspect ","(or\n  (send\n    (send\n      (self) :class) :reflect_on_aggregation\n    (send\n      (lvar :name) :to_sym))\n  (send nil :column_for_attribute\n    (lvar :name))) klass  new "," instantiate_time_object s_with_empty_parameters collect ","values_with_empty_parameters reject _with_empty_parameters collect "," instantiate_time_object s empty? ","values_with_empty_parameters reject  empty? "," instantiate_time_object s_with_empty_parameters reject ","values_with_empty_parameters reject _with_empty_parameters reject ","(or\n  (send\n    (send\n      (self) :class) :reflect_on_aggregation\n    (send\n      (lvar :name) :to_sym))\n  (send nil :column_for_attribute\n    (lvar :name))) (or\n  (send\n    (send\n      (self) :class) :reflect_on_aggregation\n    (send\n      (lvar :name) :to_sym))\n  (send nil :column_for_attribute\n    (lvar :name))) klass  "," instantiate_time_object s_with_empty_parameters  instantiate_time_object s inspect ","values_with_empty_parameters reject _with_empty_parameters values_with_empty_parameters reject  inspect "," instantiate_time_object s_with_empty_parameters  instantiate_time_object s ","values_with_empty_parameters reject _with_empty_parameters values_with_empty_parameters reject  "," read_ instantiate_time_object _from_parameter "]}," ActiveRecord Base instantiate_time_object":{"type":"method","name":"instantiate_time_object","children":[],"call":["Time  time_with_datetime_fallback ","Time  zone local ","Time  zone "," class send "," column_for_attribute "," class "]}," ActiveRecord Base assign_multiparameter_attributes":{"type":"method","name":"assign_multiparameter_attributes","children":[],"call":[" execute_callstack_for_multiparameter_attributes "," extract_callstack_for_multiparameter_attributes "]}," ActiveRecord Base interpolate_sql":{"type":"method","name":"interpolate_sql","children":[],"call":[" instance_eval ","sql gsub "]}," ActiveRecord Base quote_value":{"type":"method","name":"quote_value","children":[],"call":[" class connection quote "," class connection "," class "," connection quote "," connection "]}," ActiveRecord Base arel_attributes_values":{"type":"method","name":"arel_attributes_values","children":[],"call":["attrs []= "," class arel_table [] "," class arel_table "," class ","value to_yaml ","value is_a? ","value acts_like? "," class serialized_attributes has_key? "," class serialized_attributes "," read_attribute "," class readonly_attributes include? ! "," class readonly_attributes include? "," class readonly_attributes ","include_readonly_attributes ! ","column primary ! ","column primary "," column_for_attribute ","attribute_names each ","YAML  dump "," class serialized_attributes key? ","value nil? ! ","value nil? ","arel_table [] ","coder dump ","@attributes [] ","klass serialized_attributes [] ","klass serialized_attributes ","klass arel_table "," class klass arel_table  [] "," class klass arel_table  ","value to_yaml  to_yaml "," read_attribute  to_yaml ","YAML  dump  to_yaml ","coder dump  to_yaml ","value to_yaml  is_a? "," read_attribute  is_a? ","YAML  dump  is_a? ","coder dump  is_a? ","value to_yaml  acts_like? "," read_attribute  acts_like? ","YAML  dump  acts_like? ","coder dump  acts_like? "," column_for_attribute  primary ! "," column_for_attribute  primary ","  column_for_attribute _for_attribute ","value to_yaml  nil? ! "," read_attribute  nil? ! ","YAML  dump  nil? ! ","coder dump  nil? ! ","value to_yaml  nil? "," read_attribute  nil? ","YAML  dump  nil? ","coder dump  nil? ","klass arel_table  [] ","klass serialized_attributes []  dump "," class  serialized_attributes [] "," class  serialized_attributes ","klass klass arel_table  "," class  arel_table "]}," ActiveRecord Base attributes_protected_by_default":{"type":"method","name":"attributes_protected_by_default","children":[],"call":[]}," ActiveRecord Base ensure_proper_type":{"type":"method","name":"ensure_proper_type","children":[],"call":[" write_attribute "," class sti_name "," class "," class inheritance_column "," class descends_from_active_record? ","klass sti_name ","klass inheritance_column ","klass finder_needs_type_condition? "," class  sti_name "," class  inheritance_column "," class  finder_needs_type_condition? "]}," ActiveRecord Base clone_attribute_value":{"type":"method","name":"clone_attribute_value","children":[],"call":["value clone ","value duplicable? "," send "," send  clone "," send  duplicable? "]}," ActiveRecord Base clone_attributes":{"type":"method","name":"clone_attributes","children":[],"call":["attributes []= "," clone_attribute_value "," attribute_names each "," attribute_names "]}," ActiveRecord Base inspect":{"type":"method","name":"inspect","children":[],"call":[" class ","(send\n  (send\n    (send\n      (self) :class) :column_names) :collect) compact join ","(send\n  (send\n    (send\n      (self) :class) :column_names) :collect) compact "," attribute_for_inspect "," new_record? "," has_attribute? "," class column_names collect "," class column_names ","(send\n  (send nil :columns) :map) * ","c type ","c name "," columns map "," columns "," table_exists? "," abstract_class? "," == "," persisted? ! "," persisted? "]}," ActiveRecord Base readonly!":{"type":"method","name":"readonly!","children":[],"call":[]}," ActiveRecord Base readonly?":{"type":"method","name":"readonly?","children":[],"call":[]}," ActiveRecord Base dup":{"type":"method","name":"dup","children":[],"call":["obj instance_variable_set ","@attributes dup ","copy initialize_dup "]}," ActiveRecord Base frozen?":{"type":"method","name":"frozen?","children":[],"call":["@attributes frozen? "]}," ActiveRecord Base freeze":{"type":"method","name":"freeze","children":[],"call":["@attributes freeze "]}," ActiveRecord Base hash":{"type":"method","name":"hash","children":[],"call":[" id hash "," id "]}," ActiveRecord Base eql?":{"type":"method","name":"eql?","children":[],"call":[" == "]}," ActiveRecord Base ==":{"type":"method","name":"==","children":[],"call":["comparison_object new_record? ! ","comparison_object new_record? ","comparison_object id == "," id ","comparison_object id ","comparison_object instance_of? "," class ","comparison_object equal? "," persisted? "," id present? "]}," ActiveRecord Base column_for_attribute":{"type":"method","name":"column_for_attribute","children":[],"call":[" class columns_hash [] ","name to_s "," class columns_hash "," class "]}," ActiveRecord Base attribute_present?":{"type":"method","name":"attribute_present?","children":[],"call":["value blank? ! ","value blank? "," read_attribute "," _read_attribute blank? ! "," _read_attribute blank? "," _read_attribute "," read_attribute  blank? ! "," read_attribute  blank? "]}," ActiveRecord Base attribute_for_inspect":{"type":"method","name":"attribute_for_inspect","children":[],"call":["value inspect ","value to_s ","value is_a? ","(begin\n  (send\n    (lvar :value) :[]\n    (irange\n      (int 0)\n      (int 50)))) inspect ","value [] ","value length > ","value length "," read_attribute "," read_attribute  inspect "," read_attribute  to_s "," read_attribute  is_a? ","(begin\n  (send\n    (lvar : read_attribute ) :[]\n    (irange\n      (int 0)\n      (int 50)))) inspect "," read_attribute  [] "," read_attribute  length > "," read_attribute  length "]}," ActiveRecord Base attributes":{"type":"method","name":"attributes","children":[],"call":["attrs []= "," read_attribute "," attribute_names each "," attribute_names ","Hash  [] ","@attributes map "]}," ActiveRecord Base attributes=":{"type":"method","name":"attributes=","children":[],"call":[" assign_multiparameter_attributes "," raise "," send "," respond_to? ","multi_parameter_attributes << ","k include? ","attributes each "," sanitize_for_mass_assignment ","new_attributes stringify_keys ","new_attributes is_a? "," assign_attributes ","guard_protected_attributes == ","ActiveSupport Deprecation  warn ","the use of 'guard_protected_attributes' will be removed from the next minor release of rails,  + ","guard_protected_attributes nil? ","the use of 'guard_protected_attributes' will be removed from the next major release of rails,  + "," assign_multiparameter_ sanitize_for_mass_assignment  "," assign_multiparameter_new_attributes stringify_keys  ","multi_parameter_ sanitize_for_mass_assignment  << ","multi_parameter_new_attributes stringify_keys  << "," sanitize_for_mass_assignment  each ","new_attributes stringify_keys  each ","new_ sanitize_for_mass_assignment  stringify_keys ","new_new_attributes stringify_keys  stringify_keys ","new_ sanitize_for_mass_assignment  is_a? ","new_new_attributes stringify_keys  is_a? "," assign_ sanitize_for_mass_assignment  "," assign_new_attributes stringify_keys  ","guard_protected_ sanitize_for_mass_assignment  == ","guard_protected_new_attributes stringify_keys  == ","the use of 'guard_protected_ sanitize_for_mass_assignment ' will be removed from the next minor release of rails,  + ","the use of 'guard_protected_new_attributes stringify_keys ' will be removed from the next minor release of rails,  + ","guard_protected_ sanitize_for_mass_assignment  nil? ","guard_protected_new_attributes stringify_keys  nil? ","the use of 'guard_protected_ sanitize_for_mass_assignment ' will be removed from the next major release of rails,  + ","the use of 'guard_protected_new_attributes stringify_keys ' will be removed from the next major release of rails,  + "]}," ActiveRecord Base []=":{"type":"method","name":"[]=","children":[],"call":[" write_attribute "]}," ActiveRecord Base []":{"type":"method","name":"[]","children":[],"call":[" read_attribute "]}," ActiveRecord Base attribute_names":{"type":"method","name":"attribute_names","children":[],"call":["@attributes keys sort ","@attributes keys "," column_names "," table_exists? "," abstract_class? ! "," abstract_class? "]}," ActiveRecord Base has_attribute?":{"type":"method","name":"has_attribute?","children":[],"call":["@attributes has_key? ","attr_name to_s "]}," ActiveRecord Base quoted_id":{"type":"method","name":"quoted_id","children":[],"call":[" quote_value "," column_for_attribute "," class primary_key "," class "," id "]}," ActiveRecord Base cache_key":{"type":"method","name":"cache_key","children":[],"call":[" id "," class model_name cache_key "," class model_name "," class ","timestamp to_s "," [] "," new_record? ","timestamp utc to_s ","timestamp utc "," persisted? ! "," persisted? "," []  to_s ","timestamp utc to_s  to_s "," []  utc to_s ","timestamp utc to_s  utc to_s "," []  utc ","timestamp utc to_s  utc "]}," ActiveRecord Base to_param":{"type":"method","name":"to_param","children":[],"call":[" id to_s "," id "]}," ActiveRecord Base initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":[" send ","create_with each ","scope scope_for_create "," class send "," class "," ensure_proper_type "," clear_association_cache "," clear_aggregation_cache ","@changed_attributes []= "," field_changed? ","@attributes [] "," attributes_from_column_definition each "," attributes_from_column_definition ","cloned_attributes delete "," class primary_key ","other clone_attributes "," _run_after_initialize_callbacks "," respond_to? "," callback "," respond_to_without_attributes? "," populate_with_current_scope_attributes ","scope scope_for_create  each "," class send   class send _for_create ","other clone_attributes  delete "," populate_with_current_ class send _attributes "]}," ActiveRecord Base initialize":{"type":"method","name":"initialize","children":[],"call":[" _run_initialize_callbacks "," block_given? "," attributes= ","attributes nil? "," send ","create_with each ","scope scope_for_create "," class send "," class "," ensure_proper_type "," attributes_from_column_definition "," populate_with_current_scope_attributes "," run_callbacks "," assign_attributes "," set_serialized_attributes "," class initialize_attributes "," class column_defaults dup "," class column_defaults ","Hash  [] ","v dup ","v duplicable? "," class column_defaults map ","scope scope_for_create  each "," class send   class send _for_create "," populate_with_current_ class send _attributes "," class column_Hash  []  dup "," class column_Hash  []  "," class column_Hash  []  map "]}," ActiveRecord Base encode_quoted_value":{"type":"method","name":"encode_quoted_value","children":[],"call":["quoted_value [] gsub ","quoted_value [] ","quoted_value include? "," connection quote "," connection "," connection quote  [] gsub "," connection quote  [] "," connection quote  include? "]}," ActiveRecord Base raise_if_bind_arity_mismatch":{"type":"method","name":"raise_if_bind_arity_mismatch","children":[],"call":[" raise ","expected == "]}," ActiveRecord Base quote_bound_value":{"type":"method","name":"quote_bound_value","children":[],"call":["c quote ","(send\n  (lvar :value) :map) join ","value map ","value empty? ","value respond_to? ","value acts_like? ! ","value acts_like? "]}," ActiveRecord Base expand_range_bind_variables":{"type":"method","name":"expand_range_bind_variables","children":[],"call":["expanded << ","var last ","var first ","var is_a? ","bind_vars each "]}," ActiveRecord Base replace_named_bind_variables":{"type":"method","name":"replace_named_bind_variables","children":[],"call":[" raise "," quote_bound_value ","bind_vars [] ","bind_vars include? ","2 to_sym ","1 == ","statement gsub "]}," ActiveRecord Base replace_bind_variables":{"type":"method","name":"replace_bind_variables","children":[],"call":[" quote_bound_value ","bound shift ","statement gsub "," connection ","values dup "," raise_if_bind_arity_mismatch ","values size ","statement count "," quote_values dup _value ","values dup  shift ","  connection onne connection tion "," raise_if_bind_arity_mismat connection h ","statement  connection ount "]}," ActiveRecord Base sanitize_sql_array":{"type":"method","name":"sanitize_sql_array","children":[],"call":["statement % "," connection quote_string ","value to_s "," connection ","values collect ","statement blank? "," replace_bind_variables ","statement include? "," replace_named_bind_variables ","values first ","statement =~ ","values first is_a? "]}," ActiveRecord Base sanitize_sql_hash_for_assignment":{"type":"method","name":"sanitize_sql_hash_for_assignment","children":[],"call":["(send\n  (lvar :attrs) :map) join "," quote_bound_value "," connection quote_column_name "," connection ","attrs map "]}," ActiveRecord Base sanitize_sql_hash_for_conditions":{"type":"method","name":"sanitize_sql_hash_for_conditions","children":[],"call":["(send\n  (send\n    (lvar :builder) :build_from_hash\n    (lvar :attrs)\n    (lvar :table)) :map) join ","b to_sql ","builder build_from_hash map ","builder build_from_hash ","PredicateBuilder  new "," arel_engine ","Arel Table  new "," table_name "," expand_hash_conditions_for_aggregates ","builder build_from_hash map join ","(send\n  (send\n    (const nil :PredicateBuilder) :build_from_hash\n    (send nil :arel_engine)\n    (lvar :attrs)\n    (lvar :table)) :map) join "," connection visitor accept "," connection visitor "," connection ","PredicateBuilder  build_from_hash map ","PredicateBuilder  build_from_hash ","Arel Table  new alias ","viz accept ","Arel Visitors  for ","(send\n  (send\n    (lvar :PredicateBuilder  new ) :build_from_hash\n    (lvar :attrs)\n    (lvar :table)) :map) join ","(send\n  (send\n    (lvar :builder) :build_from_hash\n    (lvar :attrs)\n    (lvar :Arel Table  new )) :map) join ","(send\n  (send\n    (lvar :builder) :build_from_hash\n    (lvar :attrs)\n    (lvar :Arel Table  new alias )) :map) join ","(send\n  (send\n    (lvar :builder) :build_from_hash\n    (lvar : expand_hash_conditions_for_aggregates )\n    (lvar :table)) :map) join ","PredicateBuilder  new  build_from_hash map ","PredicateBuilder  new  build_from_hash "," Arel Table  new _name "," Arel Table  new alias _name ","PredicateBuilder  new  build_from_hash map join ","(send\n  (send\n    (const nil :PredicateBuilder) :build_from_hash\n    (send nil :arel_engine)\n    (lvar :attrs)\n    (lvar :Arel Table  new )) :map) join ","(send\n  (send\n    (const nil :PredicateBuilder) :build_from_hash\n    (send nil :arel_engine)\n    (lvar :attrs)\n    (lvar :Arel Table  new alias )) :map) join ","(send\n  (send\n    (const nil :PredicateBuilder) :build_from_hash\n    (send nil :arel_engine)\n    (lvar : expand_hash_conditions_for_aggregates )\n    (lvar :table)) :map) join ","Arel Visitors  for  accept "]}," ActiveRecord Base expand_hash_conditions_for_aggregates":{"type":"method","name":"expand_hash_conditions_for_aggregates","children":[],"call":["expanded_attrs []= ","value send ","value respond_to? ! ","value respond_to? ","mapping size == ","mapping size ","mapping each "," aggregate_mapping ","(lvasgn :aggregation\n  (send nil :reflect_on_aggregation\n    (send\n      (lvar :attr) :to_sym))) nil? "," reflect_on_aggregation ","attr to_sym ","attrs each "," aggregate_mapping  size == "," aggregate_mapping  size "," aggregate_mapping  each "," aggregate_ aggregate_mapping  ","(lvasgn : reflect_on_aggregation \n  (send nil :reflect_on_ reflect_on_aggregation \n    (send\n      (lvar :attr) :to_sym))) nil? "," reflect_on_ reflect_on_aggregation  "]}," ActiveRecord Base aggregate_mapping":{"type":"method","name":"aggregate_mapping","children":[],"call":["mapping first is_a? ","mapping first ","reflection name ","reflection options [] ","reflection options "]}," ActiveRecord Base sanitize_sql_for_assignment":{"type":"method","name":"sanitize_sql_for_assignment","children":[],"call":[" sanitize_sql_hash_for_assignment "," sanitize_sql_array "]}," ActiveRecord Base sanitize_sql_for_conditions":{"type":"method","name":"sanitize_sql_for_conditions","children":[],"call":[" sanitize_sql_hash_for_conditions "," sanitize_sql_array ","condition blank? "]}," ActiveRecord Base class_of_active_record_descendant":{"type":"method","name":"class_of_active_record_descendant","children":[],"call":[" class_of_active_record_descendant ","klass superclass "," raise "," name ","klass superclass nil? ","klass superclass abstract_class? ","klass superclass == "]}," ActiveRecord Base compute_type":{"type":"method","name":"compute_type","children":[],"call":[" raise ","candidates first ","e instance_of? ","candidate == ","constant to_s ","ActiveSupport Dependencies  constantize ","candidates each ","candidates << ","candidates unshift "," name scan "," name ","type_name match ","candidate constantize ","type_name constantize ","ActiveSupport Dependencies  constantize  to_s ","candidate constantize  to_s ","ActiveSupport Dependencies  ActiveSupport Dependencies  constantize ize ","ActiveSupport Dependencies  candidate constantize ize ","candidate ActiveSupport Dependencies  constantize ize ","candidate candidate constantize ize ","type_name ActiveSupport Dependencies  constantize ize ","type_name candidate constantize ize "]}," ActiveRecord Base current_scoped_methods":{"type":"method","name":"current_scoped_methods","children":[],"call":[" scoped_methods last "," scoped_methods "]}," ActiveRecord Base default_scope":{"type":"method","name":"default_scope","children":[],"call":[" default_scoping << "," construct_finder_arel "," default_scoping pop "," default_scoping "," reset_scoped_methods "," default_scopes= "," default_scopes + "," default_scopes ","Proc  new "," block_given? "," reset_Proc  new d_methods "," default_Proc  new s= "," default_Proc  new s + "," default_Proc  new s "]}," ActiveRecord Base with_exclusive_scope":{"type":"method","name":"with_exclusive_scope","children":[],"call":[" with_scope "," raise ","e is_a? ","method_scoping values any? ","method_scoping values "]}," ActiveRecord Base with_scope":{"type":"method","name":"with_scope","children":[],"call":[" scoped_methods pop "," scoped_methods "," scoped_methods << "," current_scoped_methods merge "," current_scoped_methods ","action == ","relation create_with "," current_scoped_methods create_with_value ","method_scoping [] "," current_scoped_methods create_with_value merge "," construct_finder_arel ","method_scoping assert_valid_keys ","hash []= ","params dup ","params == ","method_scoping inject ","method_scoping is_a? ","method_scoping method_scoping ","method_scoping respond_to? ","method_scoping []= ","method_scoping each ","method_scoping dup "," current_scope= ","previous_scope merge ","previous_scope create_with_value ","scope [] ","previous_scope create_with_value merge ","relation default_scoped= ","scope assert_valid_keys ","scope []= ","scope each ","scope dup ","scope is_a? "," current_scope ","scope current_scope ","scope respond_to? ","scope is_a? ! "," previous_scope merge d_methods pop "," scope dup d_methods pop "," scope current_scope d_methods pop "," previous_scope merge d_methods "," scope dup d_methods "," scope current_scope d_methods "," previous_scope merge d_methods << "," scope dup d_methods << "," scope current_scope d_methods << "," current_previous_scope merge d_methods merge "," current_scope dup d_methods merge "," current_scope current_scope d_methods merge "," current_previous_scope merge d_methods "," current_scope dup d_methods "," current_scope current_scope d_methods ","relation create_with  create_with "," construct_finder_arel  create_with "," current_previous_scope merge d_methods create_with_value "," current_scope dup d_methods create_with_value "," current_scope current_scope d_methods create_with_value "," current_scoped_methods merge  [] ","method_scoping method_scoping  [] ","method_scoping dup  [] "," current_previous_scope merge d_methods create_with_value merge "," current_scope dup d_methods create_with_value merge "," current_scope current_scope d_methods create_with_value merge "," current_scoped_methods merge  assert_valid_keys ","method_scoping method_scoping  assert_valid_keys ","method_scoping dup  assert_valid_keys "," current_scoped_methods merge  inject ","method_scoping method_scoping  inject ","method_scoping dup  inject "," current_scoped_methods merge  is_a? ","method_scoping method_scoping  is_a? ","method_scoping dup  is_a? "," current_scoped_methods merge   current_scoped_methods merge  ","method_scoping method_scoping  method_scoping method_scoping  ","method_scoping dup  method_scoping dup  "," current_scoped_methods merge  respond_to? ","method_scoping method_scoping  respond_to? ","method_scoping dup  respond_to? "," current_scoped_methods merge  []= ","method_scoping method_scoping  []= ","method_scoping dup  []= "," current_scoped_methods merge  each ","method_scoping method_scoping  each ","method_scoping dup  each "," current_scoped_methods merge  dup ","method_scoping method_scoping  dup ","method_scoping dup  dup "," current_previous_scope merge = "," current_scope dup = "," current_scope current_scope = ","previous_previous_scope merge  merge ","previous_scope dup  merge ","previous_scope current_scope  merge "," current_scope  merge ","previous_previous_scope merge  create_with_value ","previous_scope dup  create_with_value ","previous_scope current_scope  create_with_value "," current_scope  create_with_value ","previous_scope merge  [] ","scope dup  [] ","scope current_scope  [] ","previous_previous_scope merge  create_with_value merge ","previous_scope dup  create_with_value merge ","previous_scope current_scope  create_with_value merge "," current_scope  create_with_value merge ","relation create_with  default_scoped= "," construct_finder_arel  default_scoped= ","relation default_previous_scope merge d= ","relation default_scope dup d= ","relation default_scope current_scope d= ","previous_scope merge  assert_valid_keys ","scope dup  assert_valid_keys ","scope current_scope  assert_valid_keys ","previous_scope merge  []= ","scope dup  []= ","scope current_scope  []= ","previous_scope merge  each ","scope dup  each ","scope current_scope  each ","previous_scope merge  dup ","scope dup  dup ","scope current_scope  dup ","previous_scope merge  is_a? ","scope dup  is_a? ","scope current_scope  is_a? "," current_previous_scope merge  "," current_scope dup  "," current_scope current_scope  ","previous_scope merge  current_previous_scope merge  ","scope dup  current_scope dup  ","scope current_scope  current_scope current_scope  ","previous_scope merge  respond_to? ","scope dup  respond_to? ","scope current_scope  respond_to? ","previous_scope merge  is_a? ! ","scope dup  is_a? ! ","scope current_scope  is_a? ! "]}," ActiveRecord Base all_attributes_exists?":{"type":"method","name":"all_attributes_exists?","children":[],"call":[" column_methods_hash include? ","name to_sym "," column_methods_hash ","attribute_names all? "," expand_attribute_names_for_aggregates "," expand_attribute_names_for_aggregates all? ","(send\n  (send nil :expand_attribute_names_for_aggregates\n    (lvar :attribute_names)) :-\n  (send\n    (send nil :column_methods_hash) :keys)) empty? "," expand_attribute_names_for_aggregates - "," column_methods_hash keys "," expand_attribute_names_for_aggregates  all? "," expand_ expand_attribute_names_for_aggregates _for_aggregates "," expand_ expand_attribute_names_for_aggregates _for_aggregates all? ","(send\n  (send nil :expand_ expand_attribute_names_for_aggregates _for_aggregates\n    (lvar : expand_attribute_names_for_aggregates )) :-\n  (send\n    (send nil :column_methods_hash) :keys)) empty? "," expand_ expand_attribute_names_for_aggregates _for_aggregates - "]}," ActiveRecord Base expand_attribute_names_for_aggregates":{"type":"method","name":"expand_attribute_names_for_aggregates","children":[],"call":["expanded_attribute_names << "," aggregate_mapping each "," aggregate_mapping ","(lvasgn :aggregation\n  (send nil :reflect_on_aggregation\n    (send\n      (lvar :attribute_name) :to_sym))) nil? "," reflect_on_aggregation ","attribute_name to_sym ","attribute_names each ","(send\n  (lvar :attribute_names) :map) flatten ","field_attr to_sym "," aggregate_mapping map ","attribute_names map ","(lvasgn : reflect_on_aggregation \n  (send nil :reflect_on_ reflect_on_aggregation \n    (send\n      (lvar :attribute_name) :to_sym))) nil? "," reflect_on_ reflect_on_aggregation  "]}," ActiveRecord Base construct_attributes_from_arguments":{"type":"method","name":"construct_attributes_from_arguments","children":[],"call":["attributes []= ","arguments [] ","attribute_names each_with_index "]}," ActiveRecord Base method_missing":{"type":"method","name":"method_missing","children":[],"call":[" send "," class_eval ","1003 + ","attribute_names join ","match scope? "," all_attributes_exists? ","match attribute_names ","DynamicScopeMatch  match "," scoped send "," scoped ","match instantiator? ","relation send "," construct_finder_arel "," current_scoped_methods ","options any? ","arguments extract_options! ","match finder? ","DynamicFinderMatch  match ","950 + ","998 + ","1001 + ","1005 + ","arguments length > ","attribute_names size ","arguments length ","995 + ","996 + ","1072 + ","ActiveSupport Deprecation  warn ","arguments size < ","arguments size ","arguments first is_a? ! ","arguments first is_a? ","arguments first ","1038 + ","1063 + ","1067 + ","1068 + ","1085 + ","1078 + ","1074 + ","1089 + ","match attribute_names  join ","DynamicScopeMatch  match  scope? ","DynamicFinderMatch  match  scope? ","match match attribute_names  ","DynamicScopeMatch  match  attribute_names ","DynamicFinderMatch  match  attribute_names ","DynamicScopeMatch  DynamicScopeMatch  match  ","DynamicScopeMatch  DynamicFinderMatch  match  ","DynamicScopeMatch  match  instantiator? ","DynamicFinderMatch  match  instantiator? "," scoped  send "," construct_finder_arel  send ","arguments extract_options!  any? ","arguments extract_arguments extract_options! ! ","DynamicScopeMatch  match  finder? ","DynamicFinderMatch  match  finder? ","DynamicFinderMatch  DynamicScopeMatch  match  ","DynamicFinderMatch  DynamicFinderMatch  match  ","match attribute_names  size "]}," ActiveRecord Base compute_table_name":{"type":"method","name":"compute_table_name","children":[],"call":["base table_name "," table_name_suffix "," undecorated_table_name "," name "," full_table_name_prefix ","contained << ","contained singularize "," parent pluralize_table_names "," parent "," parent table_name "," parent abstract_class? ! "," parent abstract_class? "," parent < "," == "," base_class "," base_class  table_name ","contained singularize  << "," parent table_name  << ","contained singularize  singularize "," parent table_name  singularize ","  base_class _class "]}," ActiveRecord Base undecorated_table_name":{"type":"method","name":"undecorated_table_name","children":[],"call":["table_name pluralize "," pluralize_table_names ","class_name to_s demodulize underscore ","class_name to_s demodulize ","class_name to_s ","table_name pluralize  pluralize ","class_name to_s demodulize underscore  pluralize "," pluralize_table_name pluralize s "," pluralize_class_name to_s demodulize underscore s "]}," ActiveRecord Base type_condition":{"type":"method","name":"type_condition","children":[],"call":["condition or ","sti_column eq ","subclass sti_name "," descendants each "," descendants "," sti_name "," arel_table [] "," inheritance_column "," arel_table ","sti_column in ","model sti_name ","(send\n  (array\n    (self)) :+\n  (send nil :descendants)) map ","(self) + ","table [] "," inheritance_column to_sym ","condition or  or ","sti_column eq  or "," arel_table []  eq ","table []  eq "," arel_table []  in ","table []  in "]}," ActiveRecord Base construct_finder_arel":{"type":"method","name":"construct_finder_arel","children":[],"call":["scope merge "," unscoped merge "," unscoped "," unscoped apply_finder_options ","options is_a? "]}," ActiveRecord Base find_sti_class":{"type":"method","name":"find_sti_class","children":[],"call":[" raise ","(str \"The single-table inheritance mechanism failed to locate the subclass: '\") + + + "," name ","(str \"The single-table inheritance mechanism failed to locate the subclass: '\") + + ","(str \"The single-table inheritance mechanism failed to locate the subclass: '\") + "," inheritance_column "," compute_type ","ActiveSupport Dependencies  constantize "," store_full_sti_class "," columns_hash include? ! "," columns_hash include? "," columns_hash ","type_name blank? "]}," ActiveRecord Base instantiate":{"type":"method","name":"instantiate","children":[],"call":["object send ","object instance_variable_set "," find_sti_class allocate "," find_sti_class ","record [] "," inheritance_column ","model init_with ","sti_class allocate init_with ","sti_class allocate ","IdentityMap  add ","instance reinit_with ","IdentityMap  get ","record_id to_i ","column number? ","sti_class columns_hash [] ","sti_class primary_key ","sti_class columns_hash ","ActiveRecord IdentityMap  enabled? "," use_identity_map "," find_sti_class allocate  send "," find_sti_class allocate  instance_variable_set ","object sti_class allocate init_with _variable_set ","object IdentityMap  get _variable_set ","object  use_identity_map _variable_set "," find_ find_sti_class  allocate "," find_ find_sti_class  "," inheritance_sti_class columns_hash []  "," find_sti_class allocate  init_with "," find_sti_class  allocate init_with "," find_sti_class  allocate ","sti_class allocate init_with  reinit_with ","IdentityMap  get  reinit_with "," use_identity_map  reinit_with ","record_id to_i  to_i ","sti_class columns_hash []  number? ","sti_class sti_class columns_hash [] s_hash [] "," find_sti_class  columns_hash [] "," find_sti_class  primary_key ","sti_class sti_class columns_hash [] s_hash "," find_sti_class  columns_hash "]}," ActiveRecord Base relation":{"type":"method","name":"relation","children":[],"call":["@relation where "," type_condition "," finder_needs_type_condition? ","Relation  new "," arel_table ","@relation where create_with "," sti_name "," inheritance_column to_sym "," inheritance_column ","relation where create_with ","relation where ","@Relation  new  where ","@Relation  new  where create_with ","Relation  new  where create_with ","Relation  new  where "]}," ActiveRecord Base scoped_methods":{"type":"method","name":"scoped_methods","children":[],"call":["Thread  current []= "," default_scoping dup "," default_scoping ","Thread  current [] presence ","Thread  current [] ","Thread  current "]}," ActiveRecord Base unscoped":{"type":"method","name":"unscoped","children":[],"call":[" relation "," relation scoping "," block_given? "]}," ActiveRecord Base arel_engine":{"type":"method","name":"arel_engine","children":[],"call":[" superclass arel_engine "," superclass ","Arel Sql Engine  new "," connection_handler connection_pools [] "," name "," connection_handler connection_pools "," connection_handler ","Arel Table  engine "," == "," connection_handler retrieve_connection_pool "]}," ActiveRecord Base arel_table":{"type":"method","name":"arel_table","children":[],"call":["Arel Table  new "," arel_engine "," table_name "]}," ActiveRecord Base sti_name":{"type":"method","name":"sti_name","children":[],"call":[" name demodulize "," name "," store_full_sti_class "]}," ActiveRecord Base respond_to?":{"type":"method","name":"respond_to?","children":[],"call":[" all_attributes_exists? ","match attribute_names ","DynamicScopeMatch  match ","DynamicFinderMatch  match ","DynamicScopeMatch  match  attribute_names ","DynamicFinderMatch  match  attribute_names ","DynamicScopeMatch  DynamicScopeMatch  match  ","DynamicScopeMatch  DynamicFinderMatch  match  ","DynamicFinderMatch  DynamicScopeMatch  match  ","DynamicFinderMatch  DynamicFinderMatch  match  "]}," ActiveRecord Base abstract_class?":{"type":"method","name":"abstract_class?","children":[],"call":["@abstract_class == "]}," ActiveRecord Base base_class":{"type":"method","name":"base_class","children":[],"call":[" class_of_active_record_descendant "]}," ActiveRecord Base ===":{"type":"method","name":"===","children":[],"call":["object is_a? "]}," ActiveRecord Base sanitize":{"type":"method","name":"sanitize","children":[],"call":[" connection quote "," connection "]}," ActiveRecord Base finder_needs_type_condition?":{"type":"method","name":"finder_needs_type_condition?","children":[],"call":["true == "," descends_from_active_record? "]}," ActiveRecord Base descends_from_active_record?":{"type":"method","name":"descends_from_active_record?","children":[],"call":[" columns_hash include? ! "," columns_hash include? "," inheritance_column "," columns_hash "," superclass == "," superclass "," superclass descends_from_active_record? "," superclass abstract_class? "]}," ActiveRecord Base i18n_scope":{"type":"method","name":"i18n_scope","children":[],"call":[]}," ActiveRecord Base lookup_ancestors":{"type":"method","name":"lookup_ancestors","children":[],"call":["classes << ","klass superclass ","klass != ","klass base_class ","klass == ","klass superclass  superclass ","klass superclass  != ","klass superclass  base_class ","klass superclass  == "]}," ActiveRecord Base attribute_method?":{"type":"method","name":"attribute_method?","children":[],"call":[" column_names include? ","attribute to_s sub ","attribute to_s "," column_names "," table_exists? "]}," ActiveRecord Base reset_column_information_and_inheritable_attributes_for_all_subclasses":{"type":"method","name":"reset_column_information_and_inheritable_attributes_for_all_subclasses","children":[],"call":["klass reset_column_information ","klass reset_inheritable_attributes "," descendants each "," descendants "]}," ActiveRecord Base reset_column_information":{"type":"method","name":"reset_column_information","children":[],"call":[" undefine_attribute_methods "," connection_pool clear_table_cache! "," table_name "," connection_pool "," table_exists? "," connection clear_cache! "," connection "]}," ActiveRecord Base column_methods_hash":{"type":"method","name":"column_methods_hash","children":[],"call":["methods []= ","(begin\n  (lvar :attr)) to_sym ","attr to_sym ","attr to_s "," column_names inject ","Hash  new "," column_names "]}," ActiveRecord Base content_columns":{"type":"method","name":"content_columns","children":[],"call":["c name == "," inheritance_column ","c name ","c name =~ ","c primary "," columns reject "," columns "]}," ActiveRecord Base column_names":{"type":"method","name":"column_names","children":[],"call":["column name "," columns map "," columns "]}," ActiveRecord Base columns_hash":{"type":"method","name":"columns_hash","children":[],"call":["hash []= ","column name "," columns inject "," columns ","Hash  [] "," columns map "," connection_pool columns_hash [] "," table_name "," connection_pool columns_hash "," connection_pool "]}," ActiveRecord Base columns":{"type":"method","name":"columns","children":[],"call":["column primary= ","column name == "," primary_key ","column name ","@columns each "," connection columns "," name "," table_name "," connection "," connection_pool columns [] "," connection_pool columns "," connection_pool "," connection_pool primary_keys [] "," connection_pool primary_keys "," connection columns  each "]}," ActiveRecord Base table_exists?":{"type":"method","name":"table_exists?","children":[],"call":[" connection table_exists? "," table_name "," connection "]}," ActiveRecord Base set_sequence_name":{"type":"method","name":"set_sequence_name","children":[],"call":[" define_attr_method "]}," ActiveRecord Base set_inheritance_column":{"type":"method","name":"set_inheritance_column","children":[],"call":[" define_attr_method "]}," ActiveRecord Base set_table_name":{"type":"method","name":"set_table_name","children":[],"call":[" define_attr_method ","Relation  new "," arel_table ","Arel Table  new "," arel_engine "," table_name "]}," ActiveRecord Base reset_sequence_name":{"type":"method","name":"reset_sequence_name","children":[],"call":[" set_sequence_name "," connection default_sequence_name "," primary_key "," table_name "," connection "," connection  connection default_sequence_name _sequence_name "]}," ActiveRecord Base sequence_name":{"type":"method","name":"sequence_name","children":[],"call":[" reset_sequence_name "]}," ActiveRecord Base inheritance_column":{"type":"method","name":"inheritance_column","children":[],"call":["type freeze "]}," ActiveRecord Base full_table_name_prefix":{"type":"method","name":"full_table_name_prefix","children":[],"call":["(or\n  (block\n    (send\n      (send nil :parents) :detect)\n    (args\n      (arg :p))\n    (send\n      (lvar :p) :respond_to?\n      (sym :table_name_prefix)))\n  (self)) table_name_prefix ","p respond_to? "," parents detect "," parents "]}," ActiveRecord Base reset_table_name":{"type":"method","name":"reset_table_name","children":[],"call":[" table_name= "," compute_table_name "," abstract_class? "]}," ActiveRecord Base quoted_table_name":{"type":"method","name":"quoted_table_name","children":[],"call":[" connection quote_table_name "," table_name "," connection "]}," ActiveRecord Base table_name":{"type":"method","name":"table_name","children":[],"call":[" reset_table_name "]}," ActiveRecord Base serialized_attributes":{"type":"method","name":"serialized_attributes","children":[],"call":[" write_inheritable_attribute "," read_inheritable_attribute "]}," ActiveRecord Base serialize":{"type":"method","name":"serialize","children":[],"call":[" serialized_attributes []= ","attr_name to_s "," serialized_attributes "," serialized_attributes= "," serialized_attributes merge ","Coders YAMLColumn  new ","class_name respond_to? ","(sym :load) all? "]}," ActiveRecord Base readonly_attributes":{"type":"method","name":"readonly_attributes","children":[],"call":[" read_inheritable_attribute "," _attr_readonly "]}," ActiveRecord Base attr_readonly":{"type":"method","name":"attr_readonly","children":[],"call":[" write_inheritable_attribute ","Set  new + "," readonly_attributes ","Set  new ","a to_s ","attributes map "," _attr_readonly= "," _attr_readonly "]}," ActiveRecord Base count_by_sql":{"type":"method","name":"count_by_sql","children":[],"call":[" connection select_value to_i "," connection select_value "," name "," connection "," sanitize_conditions "]}," ActiveRecord Base create":{"type":"method","name":"create","children":[],"call":["object save "," block_given? "," new "," create ","attributes collect ","attributes is_a? "," new  save "]}," ActiveRecord Base find_by_sql":{"type":"method","name":"find_by_sql","children":[],"call":[" instantiate "," connection select_all collect! "," connection select_all "," name "," sanitize_sql "," connection "]}," ActiveRecord Base colorize_logging":{"type":"method","name":"colorize_logging","children":[],"call":["ActiveSupport Deprecation  warn "," caller ","ActiveRecord::Base.colorize_logging and  << << ","ActiveRecord::Base.colorize_logging and  << "]}," ActiveRecord Base subclasses":{"type":"method","name":"subclasses","children":[],"call":[" descendants "]}," ActiveRecord Base reset_subclasses":{"type":"method","name":"reset_subclasses","children":[],"call":["ActiveSupport Deprecation  warn "," caller "]}," ActiveRecord AutosaveAssociation reload":{"type":"method","name":"reload","children":[],"call":[]}," ActiveRecord AttributeMethods attribute_method?":{"type":"method","name":"attribute_method?","children":[],"call":[" attributes include? "," attributes ","attr_name == ","@attributes include? ","@attributes key? "]}," ActiveRecord AttributeMethods ClassMethods defined_activerecord_methods":{"type":"method","name":"defined_activerecord_methods","children":[],"call":["(send\n  (lvar :methods) :map) to_set ","m to_s ","methods map ","active_record protected_instance_methods - ","super_klass protected_instance_methods ","active_record protected_instance_methods ","active_record private_instance_methods - ","super_klass private_instance_methods ","active_record private_instance_methods ","active_record public_instance_methods - ","super_klass public_instance_methods ","active_record public_instance_methods ","ActiveRecord Base  superclass ","(send\n  (send\n    (lvar :active_record) :instance_methods) :-\n  (send\n    (lvar :super_klass) :instance_methods)) + ","active_record instance_methods - ","super_klass instance_methods ","active_record instance_methods ","(send\n  (lvar :active_record public_instance_methods - ) :map) to_set ","(send\n  (lvar :(send\n  (send\n    (lvar :active_record) :instance_methods) :-\n  (send\n    (lvar :super_klass) :instance_methods)) + ) :map) to_set ","active_record public_instance_methods -  map ","(send\n  (send\n    (lvar :active_record) :instance_methods) :-\n  (send\n    (lvar :super_klass) :instance_methods)) +  map ","active_record protected_instance_active_record public_instance_methods -  - ","active_record protected_instance_(send\n  (send\n    (lvar :active_record) :instance_methods) :-\n  (send\n    (lvar :super_klass) :instance_methods)) +  - ","super_klass protected_instance_active_record public_instance_methods -  ","super_klass protected_instance_(send\n  (send\n    (lvar :active_record) :instance_methods) :-\n  (send\n    (lvar :super_klass) :instance_methods)) +  ","ActiveRecord Base  superclass  protected_instance_methods ","active_record protected_instance_active_record public_instance_methods -  ","active_record protected_instance_(send\n  (send\n    (lvar :active_record) :instance_methods) :-\n  (send\n    (lvar :super_klass) :instance_methods)) +  ","active_record private_instance_active_record public_instance_methods -  - ","active_record private_instance_(send\n  (send\n    (lvar :active_record) :instance_methods) :-\n  (send\n    (lvar :super_klass) :instance_methods)) +  - ","super_klass private_instance_active_record public_instance_methods -  ","super_klass private_instance_(send\n  (send\n    (lvar :active_record) :instance_methods) :-\n  (send\n    (lvar :super_klass) :instance_methods)) +  ","ActiveRecord Base  superclass  private_instance_methods ","active_record private_instance_active_record public_instance_methods -  ","active_record private_instance_(send\n  (send\n    (lvar :active_record) :instance_methods) :-\n  (send\n    (lvar :super_klass) :instance_methods)) +  ","active_record public_instance_active_record public_instance_methods -  - ","active_record public_instance_(send\n  (send\n    (lvar :active_record) :instance_methods) :-\n  (send\n    (lvar :super_klass) :instance_methods)) +  - ","super_klass public_instance_active_record public_instance_methods -  ","super_klass public_instance_(send\n  (send\n    (lvar :active_record) :instance_methods) :-\n  (send\n    (lvar :super_klass) :instance_methods)) +  ","ActiveRecord Base  superclass  public_instance_methods ","active_record public_instance_active_record public_instance_methods -  ","active_record public_instance_(send\n  (send\n    (lvar :active_record) :instance_methods) :-\n  (send\n    (lvar :super_klass) :instance_methods)) +  ","(send\n  (send\n    (lvar :active_record) :instance_active_record public_instance_methods - ) :-\n  (send\n    (lvar :super_klass) :instance_active_record public_instance_methods - )) + ","(send\n  (send\n    (lvar :active_record) :instance_(send\n  (send\n    (lvar :active_record) :instance_methods) :-\n  (send\n    (lvar :super_klass) :instance_methods)) + ) :-\n  (send\n    (lvar :super_klass) :instance_(send\n  (send\n    (lvar :active_record) :instance_methods) :-\n  (send\n    (lvar :super_klass) :instance_methods)) + )) + ","(send\n  (send\n    (lvar :active_record) :instance_methods) :-\n  (send\n    (lvar :ActiveRecord Base  superclass ) :instance_methods)) + ","active_record instance_active_record public_instance_methods -  - ","active_record instance_(send\n  (send\n    (lvar :active_record) :instance_methods) :-\n  (send\n    (lvar :super_klass) :instance_methods)) +  - ","super_klass instance_active_record public_instance_methods -  ","super_klass instance_(send\n  (send\n    (lvar :active_record) :instance_methods) :-\n  (send\n    (lvar :super_klass) :instance_methods)) +  ","ActiveRecord Base  superclass  instance_methods ","active_record instance_active_record public_instance_methods -  ","active_record instance_(send\n  (send\n    (lvar :active_record) :instance_methods) :-\n  (send\n    (lvar :super_klass) :instance_methods)) +  "]}," ActiveRecord AttributeMethods Write attribute=":{"type":"method","name":"attribute=","children":[],"call":[" write_attribute "," _write_attribute "]}," ActiveRecord AttributeMethods Write write_attribute":{"type":"method","name":"write_attribute","children":[],"call":["@attributes []= "," convert_number_column_value ","column number? "," column_for_attribute ","@attributes_cache delete "," class primary_key "," class ","attr_name == ","attr_name to_s "," raise "," type_cast_attribute_for_write ","@attributes has_key? ","ActiveSupport Deprecation  warn ","@attributes_cache []= ","column binary? "," write_attribute_with_type_cast "," class attribute_alias to_s "," class attribute_alias "," class attribute_alias? ","@attributes write_from_user ","name == ","id freeze "," _write_attribute "," sync_with_transaction_state "," class attribute_aliases [] "," class attribute_aliases "," convert_number_ column_for_attribute _value "," column_for_attribute  number? ","  column_for_attribute _for_attribute "," class  class primary_key  "," class primary_key  == ","attr_name to_s  == ","attr_attr_name to_s  == ","attr_ class attribute_alias to_s  == ","attr_ class primary_key  == ","attr_ class attribute_alias  == "," class primary_key  to_s ","attr_name to_s  to_s ","attr_attr_name to_s  to_s ","attr_ class attribute_alias to_s  to_s ","attr_ class primary_key  to_s ","attr_ class attribute_alias  to_s "," column_for_attribute  binary? "," class attribute_alias to_s  == "," class attribute_alias  == "]}," ActiveRecord AttributeMethods Write ClassMethods define_method_attribute=":{"type":"method","name":"define_method_attribute=","children":[],"call":[" generated_attribute_methods module_eval "," generated_attribute_methods "," write_attribute "," generated_attribute_methods send ","attr_name =~ ","17 + ","(send\n  (lvar :name) :+\n  (str \"=\")) inspect ","name + ","name unpack first ","name unpack ","19 + ","generated_attribute_methods AttrNames  set_name_cache ","42 + ","ActiveRecord AttributeMethods AttrNames  set_name_cache "," define_method ","WriterMethodCache  [] ","40 + ","h* freeze ","30 + ","20 + ","name == "," primary_key ","ActiveModel AttributeMethods AttrNames  define_attribute_accessor_method ","21 + ","18 + ","owner << << << ","owner << << ","owner << ","batch << << << ","batch << << ","batch << ","owner define_cached_method "," generated_attribute_WriterMethodCache  [] s module_eval "," generated_attribute_WriterMethodCache  [] s "," generated_attribute_WriterMethodCache  [] s send ","generated_attribute_WriterMethodCache  [] s AttrNames  set_name_cache "," define_WriterMethodCache  []  ","ActiveModel AttributeMethods AttrNames  define_attribute_accessor_WriterMethodCache  []  ","owner define_cached_WriterMethodCache  []  "]}," ActiveRecord AttributeMethods TimeZoneConversion ClassMethods create_time_zone_conversion_attribute?":{"type":"method","name":"create_time_zone_conversion_attribute?","children":[],"call":["(sym :datetime) include? ","column type "," skip_time_zone_conversion_for_attributes include? ! "," skip_time_zone_conversion_for_attributes include? ","name to_sym "," skip_time_zone_conversion_for_attributes "," time_zone_aware_attributes ","column type in? ","timestamp == ","datetime == ","cast_type type ","ActiveSupport Deprecation  warn ","(str \"              Time columns will become time zone aware in Rails 5.1. This\\n\") strip_heredoc "," time_zone_aware_types include? "," time_zone_aware_types ","cast_type type == ","result ! "]}," ActiveRecord AttributeMethods TimeZoneConversion ClassMethods define_method_attribute=":{"type":"method","name":"define_method_attribute=","children":[],"call":[" generated_attribute_methods module_eval "," generated_attribute_methods ","39 + "," create_time_zone_conversion_attribute? "," columns_hash [] "," columns_hash ","38 + ","40 + ","43 + ","35 + "]}," ActiveRecord AttributeMethods TimeZoneConversion ClassMethods define_method_attribute":{"type":"method","name":"define_method_attribute","children":[],"call":[" generated_attribute_methods module_eval "," generated_attribute_methods ","21 + "," create_time_zone_conversion_attribute? "," columns_hash [] "," columns_hash ","20 + ","24 + "]}," ActiveRecord AttributeMethods Read attribute":{"type":"method","name":"attribute","children":[],"call":[" read_attribute "," _read_attribute "]}," ActiveRecord AttributeMethods Read unserialize_attribute":{"type":"method","name":"unserialize_attribute","children":[],"call":[" raise ","unserialized_object class to_s ","unserialized_object class "," class serialized_attributes [] "," class serialized_attributes "," class ","@attributes []= ","@attributes frozen? ","unserialized_object nil? ","unserialized_object is_a? "," object_from_yaml ","@attributes [] ","coder load "," object_from_yaml  class to_s ","coder load  class to_s "," object_from_yaml  class ","coder load  class "," object_from_yaml  nil? ","coder load  nil? "," object_from_yaml  is_a? ","coder load  is_a? "," class serialized_attributes []  load "]}," ActiveRecord AttributeMethods Read unserializable_attribute?":{"type":"method","name":"unserializable_attribute?","children":[],"call":[" class serialized_attributes [] "," class serialized_attributes "," class ","column text? "," class serialized_attributes include? "]}," ActiveRecord AttributeMethods Read read_attribute":{"type":"method","name":"read_attribute","children":[],"call":["column type_cast "," unserialize_attribute "," unserializable_attribute? "," column_for_attribute ","(lvasgn :value\n  (send\n    (ivar :@attributes) :[]\n    (lvar :attr_name))) nil? ! ","(lvasgn :value\n  (send\n    (ivar :@attributes) :[]\n    (lvar :attr_name))) nil? ","@attributes [] "," class primary_key "," class ","attr_name == ","attr_name to_s "," _read_attribute "," send ","@attributes has_key? "," respond_to? ","value nil? "," class type_cast_attribute "," read_attribute "," class define_attribute_methods "," class attribute_methods_generated? ! "," class attribute_methods_generated? ","methods send ","methods method_defined? "," class generated_external_attribute_methods ","@attributes_cache []= "," class cache_attribute? "," block_given? ","@attributes fetch "," class primary_key != ","name == ","@columns_hash fetch ","@attributes_cache fetch ","@attributes_cache [] ","@column_types [] ","@column_types_override [] ","@attributes fetch_value ","id freeze "," class attribute_alias to_s "," class attribute_alias "," class attribute_alias? "," sync_with_transaction_state "," class attribute_aliases [] "," class attribute_aliases ","ActiveRecord  deprecator warn ","(str \"              Using read_attribute(:id) to read the primary key value is deprecated.\\n\") squish ","ActiveRecord  deprecator ","@primary_key != "," class composite_primary_key? "," column_for_attribute  type_cast ","@column_types_override []  type_cast ","  column_for_attribute _for_attribute "," @column_types_override [] _for_attribute ","(lvasgn :@attributes [] \n  (send\n    (ivar :@attributes) :[]\n    (lvar :attr_name))) nil? ! ","(lvasgn :value\n  (send\n    (ivar :@attributes) :[]\n    (lvar : class primary_key ))) nil? ! ","(lvasgn :value\n  (send\n    (ivar :@attributes) :[]\n    (lvar :attr_name to_s ))) nil? ! ","(lvasgn :value\n  (send\n    (ivar :@attributes) :[]\n    (lvar :attr_attr_name to_s ))) nil? ! ","(lvasgn :value\n  (send\n    (ivar :@attributes) :[]\n    (lvar :attr_ class primary_key ))) nil? ! ","(lvasgn :value\n  (send\n    (ivar :@attributes) :[]\n    (lvar :attr_ class attribute_alias to_s ))) nil? ! ","(lvasgn :value\n  (send\n    (ivar :@attributes) :[]\n    (lvar :attr_ class attribute_alias ))) nil? ! ","(lvasgn :@attributes [] \n  (send\n    (ivar :@attributes) :[]\n    (lvar :attr_name))) nil? ","(lvasgn :value\n  (send\n    (ivar :@attributes) :[]\n    (lvar : class primary_key ))) nil? ","(lvasgn :value\n  (send\n    (ivar :@attributes) :[]\n    (lvar :attr_name to_s ))) nil? ","(lvasgn :value\n  (send\n    (ivar :@attributes) :[]\n    (lvar :attr_attr_name to_s ))) nil? ","(lvasgn :value\n  (send\n    (ivar :@attributes) :[]\n    (lvar :attr_ class primary_key ))) nil? ","(lvasgn :value\n  (send\n    (ivar :@attributes) :[]\n    (lvar :attr_ class attribute_alias to_s ))) nil? ","(lvasgn :value\n  (send\n    (ivar :@attributes) :[]\n    (lvar :attr_ class attribute_alias ))) nil? "," class  class primary_key  "," class primary_key  == ","attr_name to_s  == ","attr_attr_name to_s  == ","attr_ class primary_key  == ","attr_ class attribute_alias to_s  == ","attr_ class attribute_alias  == "," class primary_key  to_s ","attr_name to_s  to_s ","attr_attr_name to_s  to_s ","attr_ class primary_key  to_s ","attr_ class attribute_alias to_s  to_s ","attr_ class attribute_alias  to_s ","@attributes []  nil? "," class define_attribute_ class generated_external_attribute_methods  "," class attribute_ class generated_external_attribute_methods _generated? ! "," class attribute_ class generated_external_attribute_methods _generated? "," class generated_external_attribute_methods  send "," class generated_external_attribute_methods  method_defined? "," class generated_external_attribute_ class generated_external_attribute_methods  "," class  class primary_key  != "," class attribute_alias to_s  == "," class attribute_alias  == ","@ column_for_attribute s_hash fetch ","@@column_types_override [] s_hash fetch ","@ column_for_attribute _types [] ","@@column_types_override [] _types [] ","@ column_for_attribute _types_override [] ","@@column_types_override [] _types_override [] ","@attributes fetch_@attributes []  ","(str \"              Using read_attribute(:id) to read the primary key @attributes []  is deprecated.\\n\") squish ","@ class primary_key  != "," class composite_ class primary_key ? "]}," ActiveRecord AttributeMethods Read ClassMethods define_read_method":{"type":"method","name":"define_read_method","children":[],"call":[" generated_attribute_methods module_eval "," generated_attribute_methods "," cache_attribute? ","access_code insert ","attr_name to_s == "," primary_key to_s "," primary_key ","attr_name to_s ","column type_cast_code "," alias_method "," eval "," define_method ","method_name =~ "," generated_attribute_methods send ","symbol =~ ","access_code insert  insert ","column type_column type_cast_code  "]}," ActiveRecord AttributeMethods Read ClassMethods define_read_method_for_serialized_attribute":{"type":"method","name":"define_read_method_for_serialized_attribute","children":[],"call":[" generated_attribute_methods module_eval "," generated_attribute_methods "]}," ActiveRecord AttributeMethods Read ClassMethods define_method_attribute":{"type":"method","name":"define_method_attribute","children":[],"call":[" define_read_method "," columns_hash [] "," columns_hash ","attr_name != ","attr_name == "," primary_key ","attr_name to_sym "," define_read_method_for_serialized_attribute "," serialized_attributes [] "," serialized_attributes "," serialized_attributes include? "," generated_external_attribute_methods module_eval ","80 + "," external_attribute_access_code "," generated_external_attribute_methods "," generated_attribute_methods module_eval ","72 + "," internal_attribute_access_code "," generated_attribute_methods "," attribute_cast_code ","62 + ","54 + ","70 + ","52 + ","name inspect ","name unpack first ","name unpack ","57 + ","generated_attribute_methods AttrNames  set_name_cache "," undef_method "," alias_method ","79 + ","ActiveRecord AttributeMethods AttrNames  set_name_cache "," define_method ","ReaderMethodCache  [] ","64 + ","66 + ","33 + ","h* freeze ","45 + ","36 + ","name == ","15 + ","ActiveModel AttributeMethods AttrNames  define_attribute_accessor_method ","17 + ","14 + ","owner << << << ","owner << << ","owner << ","batch << << << ","batch << << ","batch << ","owner define_cached_method "," define_read_ReaderMethodCache  []  "," define_read_ReaderMethodCache  [] _for_serialized_attribute "," generated_external_attribute_ReaderMethodCache  [] s module_eval "," generated_external_attribute_ReaderMethodCache  [] s "," generated_attribute_ReaderMethodCache  [] s module_eval "," generated_attribute_ReaderMethodCache  [] s "," attribute_ attribute_cast_code  ","generated_attribute_ReaderMethodCache  [] s AttrNames  set_name_cache "," undef_ReaderMethodCache  []  "," alias_ReaderMethodCache  []  "," define_ReaderMethodCache  []  ","ActiveModel AttributeMethods AttrNames  define_attribute_accessor_ReaderMethodCache  []  ","owner define_cached_ReaderMethodCache  []  "]}," ActiveRecord AttributeMethods Read ClassMethods cache_attribute?":{"type":"method","name":"cache_attribute?","children":[],"call":[" cached_attributes include? "," cached_attributes "]}," ActiveRecord AttributeMethods Read ClassMethods cached_attributes":{"type":"method","name":"cached_attributes","children":[],"call":["(send\n  (block\n    (send\n      (send nil :columns) :select)\n    (args\n      (arg :c))\n    (send\n      (send nil :attribute_types_cached_by_default) :include?\n      (send\n        (lvar :c) :type))) :map) to_set ","col name ","(send\n  (send nil :columns) :select) map "," attribute_types_cached_by_default include? ","c type "," attribute_types_cached_by_default "," columns select "," columns ","(send\n  (block\n    (send\n      (send nil :columns) :select)\n    (args\n      (arg :c))\n    (send nil :cacheable_column?\n      (lvar :c))) :map) to_set "," cacheable_column? "]}," ActiveRecord AttributeMethods Read ClassMethods cache_attributes":{"type":"method","name":"cache_attributes","children":[],"call":[" cached_attributes << ","attr to_s "," cached_attributes ","attribute_names each "," cached_attributes merge ","attribute_names map "]}," ActiveRecord AttributeMethods Query attribute?":{"type":"method","name":"attribute?","children":[],"call":[" query_attribute "]}," ActiveRecord AttributeMethods Query query_attribute":{"type":"method","name":"query_attribute","children":[],"call":["value blank? ! ","value blank? ","value zero? ! ","value zero? ","column number? ","ActiveRecord ConnectionAdapters Column FALSE_VALUES  include? ","value to_i zero? ! ","value to_i zero? ","value to_i ","value !~ ","Numeric  === ","column nil? "," class columns_hash [] "," class columns_hash "," class "," read_attribute "," missing_attribute "," caller "," [] ","value respond_to? ","ActiveModel Type Boolean FALSE_VALUES  include? ","(send nil :type_for_attribute\n  (lvar :attr_name)) ! "," type_for_attribute ","value match? ! ","value match? "," public_send "," query_cast_attribute "," read_attribute  blank? ! "," []  blank? ! "," public_send  blank? ! "," read_attribute  blank? "," []  blank? "," public_send  blank? "," read_attribute  zero? ! "," []  zero? ! "," public_send  zero? ! "," read_attribute  zero? "," []  zero? "," public_send  zero? "," class columns_hash []  number? "," read_attribute  to_i zero? ! "," []  to_i zero? ! "," public_send  to_i zero? ! "," read_attribute  to_i zero? "," []  to_i zero? "," public_send  to_i zero? "," read_attribute  to_i "," []  to_i "," public_send  to_i "," read_attribute  !~ "," []  !~ "," public_send  !~ "," class columns_hash []  nil? "," class  class columns_hash [] s_hash [] "," class  class columns_hash [] s_hash "," read_attribute  respond_to? "," []  respond_to? "," public_send  respond_to? "," read_attribute  match? ! "," []  match? ! "," public_send  match? ! "," read_attribute  match? "," []  match? "," public_send  match? "]}," ActiveRecord AttributeMethods PrimaryKey ClassMethods set_primary_key":{"type":"method","name":"set_primary_key","children":[],"call":[" define_attr_method "," primary_key= "," instance_eval "," block_given? "," connection_pool primary_keys []= "," table_name "," connection_pool primary_keys "," connection_pool ","value to_s "," original_primary_key= "," deprecated_property_setter "]}," ActiveRecord AttributeMethods PrimaryKey ClassMethods get_primary_key":{"type":"method","name":"get_primary_key","children":[],"call":["base_name to_s foreign_key ","base_name to_s "," primary_key_prefix_type "," connection primary_key "," table_name "," connection "," connection table_exists? ","ActiveRecord Base  != ","base_name foreign_key ","base_name blank? ! ","base_name blank? "," connection schema_cache primary_keys [] "," connection schema_cache primary_keys "," connection schema_cache "," table_exists? "," primary_key_prefix_type == "," suppress_composite_primary_key ","base_name to_s foreign_base_name to_s foreign_key  "," primary_base_name to_s foreign_key _prefix_type "," connection primary_base_name to_s foreign_key  ","base_name foreign_base_name to_s foreign_key  "," connection schema_cache primary_base_name to_s foreign_key s [] "," connection schema_cache primary_base_name to_s foreign_key s "," primary_base_name to_s foreign_key _prefix_type == "," suppress_composite_primary_base_name to_s foreign_key  "]}," ActiveRecord AttributeMethods PrimaryKey ClassMethods reset_primary_key":{"type":"method","name":"reset_primary_key","children":[],"call":[" set_primary_key "," get_primary_key "," base_class name "," base_class "," base_class primary_key "," == "," primary_key= "," base_class? "," set_primary_ get_primary_key  "," set_primary_ base_class primary_key  "," get_primary_ get_primary_key  "," get_primary_ base_class primary_key  "," base_class primary_ get_primary_key  "," base_class primary_ base_class primary_key  "," primary_ get_primary_key = "," primary_ base_class primary_key = "]}," ActiveRecord AttributeMethods PrimaryKey ClassMethods primary_key":{"type":"method","name":"primary_key","children":[],"call":[" reset_primary_key ","PRIMARY_KEY_NOT_SET  equal? "]}," ActiveRecord AttributeMethods PrimaryKey to_key":{"type":"method","name":"to_key","children":[],"call":[" id "," new_record? "," send "," class primary_key "," class "," persisted? "," sync_with_transaction_state "," Array "," class primary_ send  "," class primary_ id  "]}," ActiveRecord AttributeMethods Dirty clone_with_time_zone_conversion_attribute?":{"type":"method","name":"clone_with_time_zone_conversion_attribute?","children":[],"call":[" skip_time_zone_conversion_for_attributes include? ! "," skip_time_zone_conversion_for_attributes include? ","attr to_sym "," skip_time_zone_conversion_for_attributes "," time_zone_aware_attributes ","old class name == ","old class name ","old class "]}," ActiveRecord AttributeMethods Dirty field_changed?":{"type":"method","name":"field_changed?","children":[],"call":["old != ","column type_cast ","value blank? ","old == ","old nil? ","column null ","column number? "," column_for_attribute "," changes_from_zero_to_string? "," changes_from_nil_to_empty_string? "," column_for_attribute  type_cast ","column type_cast  blank? "," column_for_attribute  null "," column_for_attribute  number? ","  column_for_attribute _for_attribute "]}," ActiveRecord AttributeMethods Dirty update":{"type":"method","name":"update","children":[],"call":[" changed | "," attributes keys & "," class serialized_attributes keys "," class serialized_attributes "," class "," attributes keys "," attributes "," changed "," partial_updates? "]}," ActiveRecord AttributeMethods Dirty write_attribute":{"type":"method","name":"write_attribute","children":[],"call":["@changed_attributes []= "," field_changed? ","old in_time_zone "," clone_with_time_zone_conversion_attribute? "," clone_attribute_value ","@changed_attributes delete ","@changed_attributes [] "," attribute_changed? ","attr to_s "," changed_attributes []= "," changed_attributes "," changed_attributes delete "," changed_attributes [] "," changed_attributes include? "," _field_changed? "," save_changed_attribute "," store_original_raw_attribute "," old_attribute_value ","@changed_attr to_s ibutes []= ","old in_time_zone  in_time_zone "," clone_attribute_value  in_time_zone ","@changed_attributes []  in_time_zone "," changed_attributes []  in_time_zone "," clone_with_time_zone_conversion_attr to_s ibute? "," clone_attr to_s ibute_value ","@changed_attr to_s ibutes delete ","@changed_attr to_s ibutes [] "," attr to_s ibute_changed? ","attr to_s  to_s "," changed_attr to_s ibutes []= "," changed_attr to_s ibutes "," changed_attr to_s ibutes delete "," changed_attr to_s ibutes [] "," changed_attr to_s ibutes include? "," save_changed_attr to_s ibute "," store_original_raw_attr to_s ibute "," old in_time_zone _attribute_value ","  clone_attribute_value _attribute_value "," @changed_attributes [] _attribute_value ","  changed_attributes [] _attribute_value "," old_attr to_s ibute_value "]}," ActiveRecord AttributeMethods Dirty reload":{"type":"method","name":"reload","children":[],"call":["@changed_attributes clear ","@previously_changed clear "," tap "," reset_changes "," clear_changes_information ","HashWithIndifferentAccess  new ","ActiveSupport HashWithIndifferentAccess  new "," clear_mutation_trackers ","HashWithIndifferentAccess  new  clear ","ActiveSupport HashWithIndifferentAccess  new  clear "]}," ActiveRecord AttributeMethods Dirty save!":{"type":"method","name":"save!","children":[],"call":["@changed_attributes clear "," changes "," tap "," raise ","IdentityMap  remove ","IdentityMap  enabled? "," changes_applied "]}," ActiveRecord AttributeMethods Dirty save":{"type":"method","name":"save","children":[],"call":["@changed_attributes clear "," changes ","IdentityMap  remove ","IdentityMap  enabled? "," changes_applied "]}," ActiveRecord AttributeMethods BeforeTypeCast attribute_before_type_cast":{"type":"method","name":"attribute_before_type_cast","children":[],"call":[" read_attribute_before_type_cast "," class primary_key "," class ","attribute_name == ","@attributes [] value_before_type_cast ","@attributes [] "]}," ActiveRecord AttributeMethods BeforeTypeCast attributes_before_type_cast":{"type":"method","name":"attributes_before_type_cast","children":[],"call":["attrs []= "," read_attribute_before_type_cast "," attribute_names inject "," attribute_names ","Hash  [] "," attribute_names map ","@attributes values_before_type_cast "," sync_with_transaction_state "]}," ActiveRecord AttributeMethods BeforeTypeCast read_attribute_before_type_cast":{"type":"method","name":"read_attribute_before_type_cast","children":[],"call":["@attributes [] ","attr_name to_s ","@attributes [] value_before_type_cast "," sync_with_transaction_state "," attribute_before_type_cast "," class attribute_aliases [] "," class attribute_aliases "," class ","attr_attr_name to_s  to_s "]}," ActiveRecord Associations ClassMethods JoinDependency JoinAssociation join_relation":{"type":"method","name":"join_relation","children":[],"call":["joining_relation joins "," with_join_class ","Relation JoinOperation  new "," association_join ","joining_relation joins joins "," association_join last ","relations last "," association_join first ","relations first ","(lvasgn :relations\n  (send nil :relation)) is_a? "," relation "," join_type= "," relation  last "," relation  first ","(lvasgn : relation \n  (send nil :relation)) is_a? "]}," ActiveRecord Associations ClassMethods JoinDependency JoinAssociation relation":{"type":"method","name":"relation","children":[],"call":["Arel Table  new "," arel_engine "," aliased_join_table_name "," through_reflection klass table_name "," through_reflection klass "," through_reflection "," reflection options [] "," reflection options "," reflection "," options [] "," options "," reflection macro == "," reflection macro "," table_name "," klass columns "," klass "," Arel Table  new _join_table_name "]}," ActiveRecord Associations ClassMethods JoinDependency JoinAssociation with_join_class":{"type":"method","name":"with_join_class","children":[],"call":[]}," ActiveRecord Associations ClassMethods JoinDependency JoinAssociation find_parent_in":{"type":"method","name":"find_parent_in","children":[],"call":[" parent == "," parent ","other_join_dependency joins detect ","other_join_dependency joins "]}," ActiveRecord Associations ClassMethods JoinDependency JoinAssociation ==":{"type":"method","name":"==","children":[],"call":["other parent == "," parent ","other parent ","other reflection == "," reflection ","other reflection ","other class == "," class ","other class "]}," ActiveRecord Associations ClassMethods JoinDependency JoinBase ==":{"type":"method","name":"==","children":[],"call":["other table_joins == "," table_joins ","other table_joins ","other active_record == "," active_record ","other active_record ","other class == "," class ","other class "]}," ActiveRecord Associations ClassMethods JoinDependency remove_uniq_by_reflection":{"type":"method","name":"remove_uniq_by_reflection","children":[],"call":["record send target uniq! ","record send target ","record send ","reflection name ","records each ","reflection collection? "]}," ActiveRecord Associations ClassMethods JoinDependency count_aliases_from_table_joins":{"type":"method","name":"count_aliases_from_table_joins","children":[],"call":["join_sql scan size + ","join_sql scan size ","join_sql scan ","join_sql blank? "," join_base table_joins to_s downcase "," join_base table_joins to_s "," join_base table_joins "," join_base "," join_base active_record connection quote_table_name downcase "," join_base active_record connection quote_table_name ","name downcase "," join_base active_record connection "," join_base active_record "," join_base table_joins to_s downcase  scan size + "," join_base table_joins to_s downcase  scan size "," join_base table_joins to_s downcase  scan "," join_base table_joins to_s downcase  blank? "]}," ActiveRecord Associations ClassMethods JoinDependency graft":{"type":"method","name":"graft","children":[],"call":[" build ","association join_class "," join_base ","association find_parent_in ","association reflection name ","association reflection ","association == "," join_associations detect "," join_associations ","associations each ","association join_type "]}," ActiveRecord DeleteRestrictionError initialize":{"type":"method","name":"initialize","children":[],"call":["reflection name "]}," ActiveRecord HasAndBelongsToManyAssociationWithPrimaryKeyError initialize":{"type":"method","name":"initialize","children":[],"call":["reflection options [] ","reflection options "]}," ActiveRecord Associations ThroughAssociationScope build_sti_condition":{"type":"method","name":"build_sti_condition","children":[],"call":["@reflection through_reflection klass send to_sql ","@reflection through_reflection klass send ","@reflection through_reflection klass ","@reflection through_reflection "]}," ActiveRecord Associations ThroughAssociationScope build_through_conditions":{"type":"method","name":"build_through_conditions","children":[],"call":[" interpolate_sql "," sanitize_sql "," interpolate_sql gsub ","@reflection through_reflection quoted_table_name ","@reflection through_reflection ","@reflection quoted_table_name ","@reflection through_reflection klass send ","@reflection through_reflection klass ","conditions is_a? ","@reflection through_reflection options [] ","@reflection through_reflection options "," interpolate_and_sanitize_sql "," interpolate_and_sanitize_sql gsub ","@reflection through_reflection options []  is_a? "]}," ActiveRecord Associations ThroughAssociationScope build_conditions":{"type":"method","name":"build_conditions","children":[],"call":["(send\n  (lvar :all) :map) * ","all map ","all << "," build_sti_condition "," interpolate_sql "," sanitize_sql ","(lvar :association_conditions) each ","@reflection through_reflection klass descends_from_active_record? ! ","@reflection through_reflection klass descends_from_active_record? ","@reflection through_reflection klass ","@reflection through_reflection ","@reflection source_reflection options [] ","@reflection source_reflection options ","@reflection source_reflection "," build_through_conditions ","@reflection options [] ","@reflection options "," interpolate_and_sanitize_sql ","(lvar :@reflection options [] ) each "," build_ build_through_conditions  "]}," ActiveRecord Associations ThroughAssociationScope conditions":{"type":"method","name":"conditions","children":[],"call":[" build_conditions "]}," ActiveRecord Associations ThroughAssociationScope construct_join_attributes":{"type":"method","name":"construct_join_attributes","children":[],"call":["join_attributes merge! ","@reflection through_reflection options [] ","@reflection through_reflection options ","@reflection through_reflection ","@reflection through_reflection options [] is_a? ","associate class base_class name to_s ","associate class base_class name ","associate class base_class ","associate class ","@reflection source_reflection options [] ","@reflection source_reflection options ","@reflection source_reflection ","@reflection options [] ","@reflection options "," construct_owner_attributes merge ","associate id ","@reflection source_reflection primary_key_name "," construct_owner_attributes "," raise ","ActiveRecord HasManyThroughCantAssociateThroughHasOneOrManyReflection  new ","(sym :has_one) include? ","@reflection source_reflection macro "," construct_owner_attributes merge  merge! "]}," ActiveRecord Associations ThroughAssociationScope construct_owner_attributes":{"type":"method","name":"construct_owner_attributes","children":[],"call":["@owner id ","reflection primary_key_name ","@owner class base_class name to_s ","@owner class base_class name ","@owner class base_class ","@owner class ","reflection options [] ","reflection options ","@owner clreflection options [] s breflection options [] e_clreflection options [] s name to_s ","@owner clreflection options [] s breflection options [] e_clreflection options [] s name ","@owner clreflection options [] s breflection options [] e_clreflection options [] s ","@owner clreflection options [] s "]}," ActiveRecord Associations ThroughAssociationScope construct_joins":{"type":"method","name":"construct_joins","children":[],"call":["(str \"INNER JOIN %s ON %s.%s = %s.%s %s \") % ","@reflection through_reflection quoted_table_name ","@reflection through_reflection ","@reflection quoted_table_name ","@reflection options [] ","@reflection options ","AND %s.%s = %s % ","@owner class quote_value ","@reflection through_reflection klass name ","@reflection through_reflection klass ","@owner class ","@reflection source_reflection options [] ","@reflection source_reflection options ","@reflection source_reflection ","@reflection through_reflection klass primary_key ","@reflection source_reflection primary_key_name ","@reflection klass primary_key ","@reflection klass ","@reflection source_reflection macro == ","@reflection source_reflection macro "]}," ActiveRecord Associations ThroughAssociationScope construct_select":{"type":"method","name":"construct_select","children":[],"call":["@reflection quoted_table_name ","@reflection options [] ","@reflection options "]}," ActiveRecord Associations ThroughAssociationScope construct_from":{"type":"method","name":"construct_from","children":[],"call":["@reflection table_name "]}," ActiveRecord Associations ThroughAssociationScope construct_quoted_owner_attributes":{"type":"method","name":"construct_quoted_owner_attributes","children":[],"call":[" owner_quoted_id ","reflection primary_key_name ","@owner class quote_value ","@owner [] ","@owner class ","reflection klass primary_key ","reflection klass ","reflection macro == ","reflection macro ","reflection klass quote_value ","reflection klass columns_hash [] ","reflection klass columns_hash ","@owner class base_class name to_s ","@owner class base_class name ","@owner class base_class ","reflection options [] ","reflection options ","reflection active_record_primary_key ","@owner class columns_hash [] ","@owner class columns_hash ","@owner clreflection options [] s quote_value ","@owner clreflection options [] s ","reflection klreflection options [] s primary_key ","reflection klreflection options [] s ","reflection klreflection options [] s quote_value ","reflection klreflection options [] s columns_hreflection options [] h [] ","reflection klass @owner class columns_hash [] s_hash [] ","reflection klreflection options [] s columns_hreflection options [] h ","reflection klass @owner class columns_hash [] s_hash ","@owner clreflection options [] s breflection options [] e_clreflection options [] s name to_s ","@owner clreflection options [] s breflection options [] e_clreflection options [] s name ","@owner clreflection options [] s breflection options [] e_clreflection options [] s ","@owner clreflection options [] s columns_hreflection options [] h [] ","@owner class @owner class columns_hash [] s_hash [] ","@owner clreflection options [] s columns_hreflection options [] h ","@owner class @owner class columns_hash [] s_hash "]}," ActiveRecord Associations ThroughAssociationScope construct_conditions":{"type":"method","name":"construct_conditions","children":[],"call":["( + + ","( + ","conditions join ","conditions << "," sql_conditions "," construct_quoted_owner_attributes map "," construct_quoted_owner_attributes ","@reflection through_reflection ","@reflection through_reflection quoted_table_name ","@reflection through_reflection quoted_@reflection through_reflection quoted_table_name  "]}," ActiveRecord Associations ThroughAssociationScope construct_scope":{"type":"method","name":"construct_scope","children":[],"call":["@reflection options [] ","@reflection options "," construct_select ","@reflection source_reflection options [] ","@reflection source_reflection options ","@reflection source_reflection "," construct_joins "," construct_conditions "," construct_owner_attributes "]}," ActiveRecord Associations HasOneThroughAssociation replace":{"type":"method","name":"replace","children":[],"call":[" create_through_record "," target= "]}," ActiveRecord Associations HasManyThroughAssociation create_record":{"type":"method","name":"create_record","children":[],"call":[" insert_record "," add_record_to_target_with_callbacks ","@reflection klass new ","@reflection klass "," transaction "," ensure_owner_is_not_new "]}," ActiveRecord Associations HasManyThroughAssociation destroy":{"type":"method","name":"destroy","children":[],"call":[" delete_records "," flatten_deeper "," transaction "]}," ActiveRecord Associations HasAndBelongsToManyAssociation record_timestamp_columns":{"type":"method","name":"record_timestamp_columns","children":[],"call":["x to_s ","record send map ","record send ","record record_timestamps "]}," ActiveRecord Associations AssociationCollection reset_named_scopes_cache!":{"type":"method","name":"reset_named_scopes_cache!","children":[],"call":[]}," ActiveRecord Associations AssociationCollection construct_counter_sql":{"type":"method","name":"construct_counter_sql","children":[],"call":[" interpolate_sql ","@reflection options [] ","@reflection options ","@reflection options []= ","@reflection options [] sub "," interpolate_and_sanitize_sql sub "," interpolate_and_sanitize_sql "]}," ActiveRecord Associations AssociationCollection many?":{"type":"method","name":"many?","children":[],"call":[" size > "," size "," method_missing "," block_given? "]}," ActiveRecord Associations AssociationCollection scoped":{"type":"method","name":"scoped","children":[],"call":["@reflection klass scoped ","@reflection klass "," with_scope "," construct_scope "]}," ActiveRecord Associations AssociationCollection select":{"type":"method","name":"select","children":[],"call":[" scoped select "," scoped ","@target select each ","@target select "," load_target "," block_given? "]}," ActiveRecord Generators Base source_root":{"type":"method","name":"source_root","children":[],"call":[]}," ActiveRecord Validations InstanceMethods valid?":{"type":"method","name":"valid?","children":[],"call":[" errors empty? "," errors "," deprecated_callback_method "," new_record? "," _run_validate_callbacks "," errors clear "]}," ActiveRecord Validations InstanceMethods save_with_validation!":{"type":"method","name":"save_with_validation!","children":[],"call":[" raise ","RecordInvalid  new "," save_without_validation! "," valid? "]}," ActiveRecord Validations InstanceMethods save_with_validation":{"type":"method","name":"save_with_validation","children":[],"call":[" save_without_validation ","perform_validation ! "," valid? ","ActiveSupport Deprecation  warn "," caller ","options [] != ","options [] "]}," ActiveRecord Relation with_create_scope":{"type":"method","name":"with_create_scope","children":[],"call":["@klass send "," scope_for_create "]}," ActiveRecord Relation loaded?":{"type":"method","name":"loaded?","children":[],"call":[]}," ActiveRecord SpawnMethods spawn":{"type":"method","name":"spawn","children":[],"call":[" clone reset "," clone "," klass all "," klass "," already_in_scope? "," klass scope_registry "]}," ActiveRecord Railties Subscriber logger":{"type":"method","name":"logger","children":[],"call":["ActiveRecord Base  logger "]}," ActiveRecord Railties Subscriber odd?":{"type":"method","name":"odd?","children":[],"call":["@odd_or_even ! ","@odd_or_even !  ! "]}," ActiveRecord Railties Subscriber sql":{"type":"method","name":"sql","children":[],"call":[" debug "," color "," odd? ","event payload [] squeeze ","event payload [] ","event payload ","%s (%.1fms) % ","event duration "]}," ActiveRecord NamedScope Scope ==":{"type":"method","name":"==","children":[],"call":[" to_a == ","other to_a "," to_a ","other respond_to? ","other == "," to_sql == ","other to_sql "," to_sql "]}," ActiveRecord NamedScope Scope init":{"type":"method","name":"init","children":[],"call":[]}," ActiveRecord Callbacks ClassMethods after_validation":{"type":"method","name":"after_validation","children":[],"call":[" set_callback ","args << ","options [] << ","options [] ","options []= "," Array ","args extract_options! ","Array  wrap ","args extract_options!  [] << ","args extract_options!  [] ","args extract_options!  []= ","args extract_args extract_options! ! "]}," ActiveRecord Callbacks ClassMethods before_validation":{"type":"method","name":"before_validation","children":[],"call":[" set_callback ","options [] << ","options [] ","options []= "," Array ","options is_a? ","args last ","Array  wrap ","args last  [] << ","args last  [] ","args last  []= ","args last  is_a? "]}," ActiveRecord AttributeMethods Dirty update_with_dirty":{"type":"method","name":"update_with_dirty","children":[],"call":[" update_without_dirty "," changed | "," attributes keys & "," class serialized_attributes keys "," class serialized_attributes "," class "," attributes keys "," attributes "," changed "," partial_updates? "]}," ActiveRecord AttributeMethods Dirty reload_with_dirty":{"type":"method","name":"reload_with_dirty","children":[],"call":[" changed_attributes clear "," changed_attributes "," previously_changed_attributes clear "," previously_changed_attributes "," reload_without_dirty tap "," reload_without_dirty ","@changed_attributes clear ","@previously_changed clear "]}," ActiveRecord AttributeMethods Dirty save_with_dirty!":{"type":"method","name":"save_with_dirty!","children":[],"call":[" changed_attributes clear "," changed_attributes "," changes "," save_without_dirty! tap "," save_without_dirty! ","@changed_attributes clear "]}," ActiveRecord AttributeMethods Dirty save_with_dirty":{"type":"method","name":"save_with_dirty","children":[],"call":[" changed_attributes clear "," changed_attributes "," changes "," save_without_dirty ","@changed_attributes clear "]}," ActiveRecord Railties LogSubscriber logger":{"type":"method","name":"logger","children":[],"call":["ActiveRecord Base  logger "]}," ActiveRecord Railties LogSubscriber odd?":{"type":"method","name":"odd?","children":[],"call":["@odd_or_even ! ","@odd_or_even !  ! "]}," ActiveRecord Railties LogSubscriber sql":{"type":"method","name":"sql","children":[],"call":[" debug "," color "," odd? ","event payload [] squeeze ","event payload [] ","event payload ","%s (%.1fms) % ","event duration "]}," ActiveRecord Railties LogSubscriber initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter all_schemas":{"type":"method","name":"all_schemas","children":[],"call":[" query flatten "," query "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter drop_schema":{"type":"method","name":"drop_schema","children":[],"call":[" execute "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter create_schema":{"type":"method","name":"create_schema","children":[],"call":[" execute "]}," ActiveRecord ConnectionAdapters QueryCache columns":{"type":"method","name":"columns","children":[],"call":["@query_cache [] "," args first "," args "]}," ActiveRecord Callbacks valid?":{"type":"method","name":"valid?","children":[],"call":[" _run_validation_callbacks "," new_record? "]}," ActiveRecord Associations ClassMethods JoinDependency JoinAssociation join_class":{"type":"method","name":"join_class","children":[],"call":[]}," ActiveRecord Timestamp record_update_timestamps":{"type":"method","name":"record_update_timestamps","children":[],"call":["hash []= "," write_attribute ","column to_s "," timestamp_attributes_for_update_in_model inject "," timestamp_attributes_for_update_in_model "," current_time_from_proper_timezone "," record_timestamps "," block_given? "," _write_attribute "," will_save_change_to_attribute? "," timestamp_attributes_for_update_in_model each "," should_record_timestamps? ","  current_time_from_proper_timezone _from_proper_timezone "]}," ActiveRecord Generators Migration next_migration_number":{"type":"method","name":"next_migration_number","children":[],"call":["%.3d % ","(send\n  (send\n    (send\n      (const nil :Time) :now) :utc) :strftime\n  (str \"%Y%m%d%H%M%S\")) max ","%.14d % ","Time  now utc strftime ","Time  now utc ","Time  now ","ActiveRecord Base  timestamped_migrations "," current_migration_number + "," current_migration_number "]}," ActiveRecord TestCase skip":{"type":"method","name":"skip","children":[],"call":[]}," ActiveRecord SpawnMethods &":{"type":"method","name":"&","children":[],"call":[" merge ","ActiveSupport Deprecation  warn "]}," ActiveRecord QueryMethods collapse_wheres":{"type":"method","name":"collapse_wheres","children":[],"call":["arel where ","Arel Nodes Grouping  new ","Arel  sql ","String  === ","(send\n  (lvar :wheres) :-\n  (lvar :equalities)) each ","wheres - ","memo and ","eqls inject ","eqls shift ","groups each ","equality left ","equalities group_by ","wheres grep ","memo or ","Arel Nodes And  new ","equalities empty? ","predicates present? "," Arel Nodes Equality  === ","wheres map ","arel where  where ","arel Arel  sql  ","(send\n  (lvar :Arel  sql s) :-\n  (lvar :equalities)) each ","(send\n  (lvar :wheres) :-\n  (lvar :wheres grep )) each ","Arel  sql s - ","wheres grep  group_by ","Arel  sql s grep ","wheres grep  empty? ","Arel  sql s map "]}," ActiveRecord FinderMethods construct_join_dependency_for_association_find":{"type":"method","name":"construct_join_dependency_for_association_find","children":[],"call":["ActiveRecord Associations ClassMethods JoinDependency  new ","(send\n  (ivar :@eager_load_values) :+\n  (ivar :@includes_values)) uniq ","@eager_load_values + ","ActiveRecord Associations JoinDependency  new ","(send\n  (send nil :eager_load_values) :+\n  (send nil :includes_values)) uniq "," eager_load_values + "," includes_values "," eager_load_values "," joins_values "]}," ActiveRecord Calculations operation_over_aggregate_column":{"type":"method","name":"operation_over_aggregate_column","children":[],"call":["column send ","column count ","operation == ","column public_send "]}," ActiveRecord Calculations aggregate_column":{"type":"method","name":"aggregate_column","children":[],"call":["Arel  sql ","column_name to_s ","column_name == ","Arel Attribute  new ","@klass unscoped table ","@klass unscoped ","@klass column_names include? ","@klass column_names ","Arel Expressions  === ","@klass arel_attribute ","@klass attribute_alias? ","@klass has_attribute? "," arel_column "]}," ActiveRecord Reflection AssociationReflection active_record_primary_key":{"type":"method","name":"active_record_primary_key","children":[],"call":[" active_record primary_key "," active_record "," options [] "," options "," primary_key ","(or\n  (csend\n    (send\n      (send nil :options) :[]\n      (sym :primary_key)) :to_s)\n  (send nil :primary_key\n    (send nil :active_record))) -@ "," primary_key freeze ","primary_key freeze ","primary_key include? "," active_record composite_primary_key? "," active_record query_constraints_list "," active_record has_query_constraints? ","custom_primary_key to_s freeze ","custom_primary_key to_s ","(send\n  (lvar :custom_primary_key) :map) freeze ","pk to_s freeze ","pk to_s ","custom_primary_key map ","custom_primary_key is_a? "," active_record  primary_key  ","  primary_key  ","(or\n  (csend\n    (send\n      (send nil :options) :[]\n      (sym : primary_key )) :to_s)\n  (send nil : primary_key \n    (send nil :active_record))) -@ ","  primary_key  freeze "," primary_key  freeze "," primary_key  include? "," active_record composite_ primary_key ? ","custom_ primary_key  to_s freeze "," options []  to_s freeze ","custom_ primary_key  to_s "," options []  to_s ","(send\n  (lvar :custom_ primary_key ) :map) freeze ","(send\n  (lvar : options [] ) :map) freeze ","custom_ primary_key  map "," options []  map ","custom_ primary_key  is_a? "," options []  is_a? "]}," ActiveRecord Reflection AssociationReflection association_primary_key":{"type":"method","name":"association_primary_key","children":[],"call":[" klass primary_key "," klass "," options [] "," options "," options [] ! "," primary_key ","(or\n  (lvar :klass)\n  (send\n    (self) :klass)) primary_key "]}," ArJdbcMySQL Error initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Persistence destroy_associations":{"type":"method","name":"destroy_associations","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLite3Adapter quote":{"type":"method","name":"quote","children":[],"call":["column class string_to_binary unpack [] ","column class string_to_binary unpack ","column class string_to_binary ","column class ","column class respond_to? ","column type == ","column type ","value kind_of? ","value unpack [] ","value unpack ","column clacolumn class string_to_binary unpack [] column class string_to_binary unpack []  column class string_to_binary unpack [] tring_to_binary unpack [] ","column clavalue unpack [] value unpack []  value unpack [] tring_to_binary unpack [] ","column clacolumn class string_to_binary unpack [] column class string_to_binary unpack []  column class string_to_binary unpack [] tring_to_binary unpack ","column clavalue unpack [] value unpack []  value unpack [] tring_to_binary unpack ","column clacolumn class string_to_binary unpack [] column class string_to_binary unpack []  column class string_to_binary unpack [] tring_to_binary ","column clavalue unpack [] value unpack []  value unpack [] tring_to_binary ","column clacolumn class string_to_binary unpack [] column class string_to_binary unpack []  ","column clavalue unpack [] value unpack []  ","column clacolumn class string_to_binary unpack [] column class string_to_binary unpack []  recolumn class string_to_binary unpack [] pond_to? ","column clavalue unpack [] value unpack []  revalue unpack [] pond_to? "]}," ActiveRecord ConnectionAdapters PostgreSQLColumn string_to_time":{"type":"method","name":"string_to_time","children":[],"call":["-1.0 / ","1.0 / ","String  === "]}," ActiveRecord ConnectionAdapters MysqlAdapter table_exists?":{"type":"method","name":"table_exists?","children":[],"call":[" tables include? "," tables ","name split ","name to_s ","name to_s  split ","name to_s  to_s "]}," ActiveRecord ConnectionAdapters AbstractAdapter ids_in_list_limit":{"type":"method","name":"ids_in_list_limit","children":[],"call":[]}," ActiveRecord Base populate_with_current_scope_attributes":{"type":"method","name":"populate_with_current_scope_attributes","children":[],"call":[" send "," respond_to? ","create_with each ","scope scope_for_create "," class send "," class "," class scope_attributes each "," class scope_attributes "," class scope_attributes? "," class scoped scope_for_create each "," class scoped scope_for_create "," class scoped ","scope scope_for_create  each "," class send   class send _for_create "," class  class send _attributes each "," class  class send _attributes "," class  class send _attributes? "," class  class send d  class send _for_create each "," class  class send d  class send _for_create "," class  class send d "]}," ActiveRecord Base interpolate_sanitized_sql":{"type":"method","name":"interpolate_sanitized_sql","children":[],"call":["sanitize_klass send "," instance_exec ","sanitized respond_to? "," instance_eval ","sanitized gsub ","ActiveSupport Deprecation  warn ","sanitized =~ "]}," ActiveRecord Base interpolate_and_sanitize_sql":{"type":"method","name":"interpolate_and_sanitize_sql","children":[],"call":[" interpolate_sanitized_sql ","sanitize_klass send "," instance_exec ","sql respond_to? "," instance_eval ","sanitized gsub ","ActiveSupport Deprecation  warn ","sanitized =~ "," interpolate_sanitize_klass send _sql ","sanitize_klass send  gsub ","sanitize_klass send  =~ "]}," ActiveRecord Base init_with":{"type":"method","name":"init_with","children":[],"call":[" _run_initialize_callbacks "," _run_find_callbacks ","coder [] "," run_callbacks "," set_serialized_attributes "," class initialize_attributes "," class "]}," ActiveRecord Base reset_scoped_methods":{"type":"method","name":"reset_scoped_methods","children":[],"call":["Thread  current []= ","Thread  current "]}," ActiveRecord Base before_remove_const":{"type":"method","name":"before_remove_const","children":[],"call":[" reset_scoped_methods "," current_scope= "]}," ActiveRecord AttributeMethods Read _read_attribute":{"type":"method","name":"_read_attribute","children":[],"call":["column type_cast "," unserialize_attribute "," unserializable_attribute? "," column_for_attribute ","value nil? ","@attributes [] "," class primary_key "," class ","attr_name == ","attr_name to_s "," block_given? ","@attributes fetch_value "," sync_with_transaction_state "," column_for_attribute  type_cast ","  column_for_attribute _for_attribute ","@attributes []  nil? "," class primary_key  == ","attr_name to_s  == "," class primary_key  to_s ","attr_name to_s  to_s ","@attributes fetch_@attributes []  "]}," ActiveRecord AttributeMethods PrimaryKey ClassMethods quoted_primary_key":{"type":"method","name":"quoted_primary_key","children":[],"call":[" connection quote_column_name "," primary_key "," connection "]}," ActiveRecord Associations ClassMethods JoinDependency JoinAssociation process_conditions":{"type":"method","name":"process_conditions","children":[],"call":[" sanitize_sql "," instance_eval ","conditions respond_to? ","sanitized gsub ","ActiveSupport Deprecation  warn ","sanitized =~ "," sanitize_sql  respond_to? "," sanitize_sql  gsub "," sanitize_sql  =~ "]}," ActiveRecord Associations ClassMethods JoinDependency find_join_association":{"type":"method","name":"find_join_association","children":[],"call":["j parent == ","j parent ","j reflection == ","j reflection "," join_associations detect "," join_associations ","j reflection name == ","name_or_reflection to_s intern ","name_or_reflection to_s ","j reflection name "]}," ActiveRecord Associations ClassMethods JoinDependency cache_joined_association":{"type":"method","name":"cache_joined_association","children":[],"call":["ref [] ","association reflection name ","association reflection ","associations each ","parent parent ","associations unshift ","parent reflection name ","parent reflection ","parent != "," join_base ","association parent ","ref []  [] ","association ref [] lection name ","association ref [] lection ","parent parent  parent parent  ","association parent  association parent  ","parent ref [] lection name ","parent parent  reflection name ","association parent  reflection name ","parent ref [] lection ","parent parent  reflection ","association parent  reflection ","parent parent  != ","association parent  != ","association parent parent  ","association association parent  "]}," ActiveRecord Associations ClassMethods configure_destroy_hook_for_has_and_belongs_to_many":{"type":"method","name":"configure_destroy_hook_for_has_and_belongs_to_many","children":[],"call":[" include "," class_eval ","1710 + ","reflection name ","Module  new "]}," ActiveRecord Associations BelongsToPolymorphicAssociation conditions":{"type":"method","name":"conditions","children":[],"call":[" interpolate_and_sanitize_sql "," association_class ","@reflection options [] ","@reflection options "," interpolate_sql "," association_class send "]}," ActiveRecord Associations AssociationProxy interpolate_and_sanitize_sql":{"type":"method","name":"interpolate_and_sanitize_sql","children":[],"call":["@owner send "]}," ActiveRecord Associations AssociationProxy interpolate_sanitized_sql":{"type":"method","name":"interpolate_sanitized_sql","children":[],"call":["@owner send "]}," ActiveRecord AssociationPreload ClassMethods associated_records":{"type":"method","name":"associated_records","children":[],"call":["ids each_slice ","ids size "," connection ids_in_list_limit "," connection "]}," ActiveRecord AssociationPreload ClassMethods process_conditions_for_preload":{"type":"method","name":"process_conditions_for_preload","children":[],"call":["klass send "," instance_eval ","conditions respond_to? ","sanitized gsub ","ActiveSupport Deprecation  warn ","sanitized =~ ","klass send  gsub ","klass send  =~ "]}," ActiveRecord Associations AssociationProxy load":{"type":"method","name":"load","children":[],"call":["@target nil? "," load_target "," loaded? "]}," ActiveRecord Associations AssociationProxy _load":{"type":"method","name":"_load","children":[],"call":["@target nil? "," load_target "," loaded? "]}," ActiveRecord AutosaveAssociation ClassMethods define_non_cyclic_method":{"type":"method","name":"define_non_cyclic_method","children":[],"call":["@_already_called []= ","reflection name "," instance_eval ","@_already_called [] "," define_method "," method_defined? "," instance_methods include? "," instance_methods "]}," ActiveRecord Associations ClassMethods configure_after_destroy_method_for_has_and_belongs_to_many":{"type":"method","name":"configure_after_destroy_method_for_has_and_belongs_to_many","children":[],"call":[" after_destroy "," class_eval ","1710 + ","reflection name "]}," ActiveRecord Validations UniquenessValidator build_relation":{"type":"method","name":"build_relation","children":[],"call":["table [] eq ","table [] ","klass connection case_sensitive_modifier ","klass connection ","table [] lower eq ","table lower ","table [] lower ","column text? "," options [] ! "," options [] "," options ","value to_s ","value to_s mb_chars [] ","column limit ","value to_s mb_chars ","klass columns_hash [] ","attribute to_s ","klass columns_hash ","klass connection case_insensitive_comparison ","value nil? ","value to_s [] ","klass connection type_cast ","value attributes [] ","reflection primary_key_column name ","reflection primary_key_column ","value attributes ","reflection foreign_key ","klass reflect_on_association ","klass attribute_aliases [] ","klass attribute_aliases ","klass _reflect_on_association ","klass connection case_sensitive_comparison ","value is_a? ","reflection klass primary_key ","reflection klass ","klass none ","klass unscoped where ","klass unscoped ","Relation QueryAttribute  new ","Type Value  new ","value nil? ! ","cast_type serialize ","klass type_for_attribute ","klass attribute_alias ","klass attribute_alias? ","Arel Nodes Quoted  new ","klass unscoped where! ","klass arel_table ","klass predicate_builder build_bind_attribute ","klass predicate_builder ","relation where! ","klass connection default_uniqueness_comparison ","bind nil? "," options key? ! "," options key? ","relation none! ","bind unboundable? ","relation bind_attribute ","attr eq ","klass arel_table  [] eq ","klass arel_table  [] ","klass arel_table  [] lower eq ","klass arel_table  lower ","klass arel_table  [] lower ","klass columns_hash []  text? ","klass connection case_sensitive_modifier  to_s ","value to_s  to_s ","value to_s mb_chars []  to_s ","value to_s []  to_s ","klass connection type_cast  to_s ","value attributes []  to_s ","cast_type serialize  to_s ","Arel Nodes Quoted  new  to_s ","klass predicate_builder build_bind_attribute  to_s ","klass connection case_sensitive_modifier  to_s mb_chars [] ","value to_s  to_s mb_chars [] ","value to_s mb_chars []  to_s mb_chars [] ","value to_s []  to_s mb_chars [] ","klass connection type_cast  to_s mb_chars [] ","value attributes []  to_s mb_chars [] ","cast_type serialize  to_s mb_chars [] ","Arel Nodes Quoted  new  to_s mb_chars [] ","klass predicate_builder build_bind_attribute  to_s mb_chars [] ","klass columns_hash []  limit ","klass connection case_sensitive_modifier  to_s mb_chars ","value to_s  to_s mb_chars ","value to_s mb_chars []  to_s mb_chars ","value to_s []  to_s mb_chars ","klass connection type_cast  to_s mb_chars ","value attributes []  to_s mb_chars ","cast_type serialize  to_s mb_chars ","Arel Nodes Quoted  new  to_s mb_chars ","klass predicate_builder build_bind_attribute  to_s mb_chars ","klass klass columns_hash [] s_hash [] ","reflection foreign_key  to_s ","klass attribute_aliases []  to_s ","klass attribute_alias  to_s ","klass klass columns_hash [] s_hash ","klass connection case_insensitive_klass connection case_sensitive_comparison  ","klass connection case_insensitive_klass connection case_insensitive_comparison  ","klass connection case_sensitive_modifier  nil? ","value to_s  nil? ","value to_s mb_chars []  nil? ","value to_s []  nil? ","klass connection type_cast  nil? ","value attributes []  nil? ","cast_type serialize  nil? ","Arel Nodes Quoted  new  nil? ","klass predicate_builder build_bind_attribute  nil? ","klass connection case_sensitive_modifier  to_s [] ","value to_s  to_s [] ","value to_s mb_chars []  to_s [] ","value to_s []  to_s [] ","klass connection type_cast  to_s [] ","value attributes []  to_s [] ","cast_type serialize  to_s [] ","Arel Nodes Quoted  new  to_s [] ","klass predicate_builder build_bind_attribute  to_s [] ","klass connection case_sensitive_modifier  attributes [] ","value to_s  attributes [] ","value to_s mb_chars []  attributes [] ","value to_s []  attributes [] ","klass connection type_cast  attributes [] ","value attributes []  attributes [] ","cast_type serialize  attributes [] ","Arel Nodes Quoted  new  attributes [] ","klass predicate_builder build_bind_attribute  attributes [] ","value reflection foreign_key s [] ","value klass attribute_aliases [] s [] ","value klass attribute_alias s [] ","reflection primary_key_klass columns_hash []  name ","klass reflect_on_association  primary_key_column name ","klass _reflect_on_association  primary_key_column name ","reflection primary_key_klass columns_hash []  ","klass reflect_on_association  primary_key_column ","klass _reflect_on_association  primary_key_column ","klass connection case_sensitive_modifier  attributes ","value to_s  attributes ","value to_s mb_chars []  attributes ","value to_s []  attributes ","klass connection type_cast  attributes ","value attributes []  attributes ","cast_type serialize  attributes ","Arel Nodes Quoted  new  attributes ","klass predicate_builder build_bind_attribute  attributes ","value reflection foreign_key s ","value klass attribute_aliases [] s ","value klass attribute_alias s ","klass reflect_on_association  foreign_key ","klass _reflect_on_association  foreign_key ","klass reflection foreign_key _aliases [] ","klass klass attribute_aliases [] _aliases [] ","klass klass attribute_alias _aliases [] ","klass reflection foreign_key _aliases ","klass klass attribute_aliases [] _aliases ","klass klass attribute_alias _aliases ","klass connection case_sensitive_klass connection case_sensitive_comparison  ","klass connection case_sensitive_klass connection case_insensitive_comparison  ","klass connection case_sensitive_modifier  is_a? ","value to_s  is_a? ","value to_s mb_chars []  is_a? ","value to_s []  is_a? ","klass connection type_cast  is_a? ","value attributes []  is_a? ","cast_type serialize  is_a? ","Arel Nodes Quoted  new  is_a? ","klass predicate_builder build_bind_attribute  is_a? ","klass reflect_on_association  klass primary_key ","klass _reflect_on_association  klass primary_key ","klass reflect_on_association  klass ","klass _reflect_on_association  klass ","klass connection case_sensitive_modifier  nil? ! ","value to_s  nil? ! ","value to_s mb_chars []  nil? ! ","value to_s []  nil? ! ","klass connection type_cast  nil? ! ","value attributes []  nil? ! ","cast_type serialize  nil? ! ","Arel Nodes Quoted  new  nil? ! ","klass predicate_builder build_bind_attribute  nil? ! ","klass type_for_attribute  serialize ","klass type_for_reflection foreign_key  ","klass type_for_klass attribute_aliases []  ","klass type_for_klass attribute_alias  ","klass reflection foreign_key _alias ","klass klass attribute_aliases [] _alias ","klass klass attribute_alias _alias ","klass reflection foreign_key _alias? ","klass klass attribute_aliases [] _alias? ","klass klass attribute_alias _alias? ","klass arel_klass arel_table  ","klass predicate_builder build_bind_reflection foreign_key  ","klass predicate_builder build_bind_klass attribute_aliases []  ","klass predicate_builder build_bind_klass attribute_alias  ","klass predicate_builder build_Relation QueryAttribute  new _attribute ","table [] eq  where! ","table [] lower eq  where! ","klass connection case_insensitive_comparison  where! ","klass unscoped  where! ","klass connection default_uniqueness_klass connection case_sensitive_comparison  ","klass connection default_uniqueness_klass connection case_insensitive_comparison  ","Relation QueryAttribute  new  nil? ","table [] eq  none! ","table [] lower eq  none! ","klass connection case_insensitive_comparison  none! ","klass unscoped  none! ","Relation QueryAttribute  new  unboundable? ","table [] eq  bind_attribute ","table [] lower eq  bind_attribute ","klass connection case_insensitive_comparison  bind_attribute ","klass unscoped  bind_attribute ","relation bind_reflection foreign_key  ","relation bind_klass attribute_aliases []  ","relation bind_klass attribute_alias  ","relation Relation QueryAttribute  new _attribute "]}," ActiveRecord Timestamp all_timestamp_attributes_in_model":{"type":"method","name":"all_timestamp_attributes_in_model","children":[],"call":[" timestamp_attributes_for_create_in_model + "," timestamp_attributes_for_update_in_model "," timestamp_attributes_for_create_in_model "," class send "," class "," class all_timestamp_attributes_in_model "]}," ActiveRecord Timestamp timestamp_attributes_for_create_in_model":{"type":"method","name":"timestamp_attributes_for_create_in_model","children":[],"call":[" class column_names include? ","c to_s "," class column_names "," class "," timestamp_attributes_for_create select "," timestamp_attributes_for_create "," class send "," column_names include? "," column_names "," class timestamp_attributes_for_create_in_model "]}," ActiveRecord TestCase cleanup_identity_map":{"type":"method","name":"cleanup_identity_map","children":[],"call":["ActiveRecord IdentityMap  clear "]}," ActiveRecord TestCase setup":{"type":"method","name":"setup","children":[],"call":[" cleanup_identity_map "]}," ActiveRecord SessionStore destroy_session":{"type":"method","name":"destroy_session","children":[],"call":[" generate_sid ","options [] ","env []= "," get_session_model destroy "," get_session_model ","Base  silence "," current_session_id "," generate_ current_session_id  "]}," ActiveRecord SessionStore SqlBypass connection_pool":{"type":"method","name":"connection_pool","children":[],"call":["ActiveRecord Base  connection_pool "]}," ActiveRecord Schema migrations_paths":{"type":"method","name":"migrations_paths","children":[],"call":["ActiveRecord Migrator  migrations_paths "]}," ActiveRecord Result hash_rows":{"type":"method","name":"hash_rows","children":[],"call":["Hash  [] ","@columns zip ","@rows map ","columns zip ","c dup freeze ","c dup ","@columns map ","hash []= ","row [] ","columns [] ","index < ","columns length ","hash length == ","hash length ","template transform_values ","@@columns map  zip ","@columns map  zip ","@@columns map  map ","@columns map  [] ","columns columns length  ","@columns map  length ","hash columns length  == ","hash columns length  "]}," ActiveRecord Result to_hash":{"type":"method","name":"to_hash","children":[],"call":[" hash_rows "," to_a ","ActiveSupport Deprecation  warn ","(str \"        `ActiveRecord::Result#to_hash` has been renamed to `to_a`.\\n\") squish "]}," ActiveRecord Result each":{"type":"method","name":"each","children":[],"call":[" hash_rows each "," hash_rows ","@rows size "," hash_rows to_enum "," block_given? "]}," ActiveRecord Result initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Relation with_default_scope":{"type":"method","name":"with_default_scope","children":[],"call":["default_scope default_scoped= ","default_scope merge "," klass send "," klass "," default_scoped? ","@klass send ","default_scope merge  default_scope merge d= "," klass send   klass send d= ","@klass send  @klass send d= ","default_scope merge  merge "," klass send  merge ","@klass send  merge "," default_scope merge d? ","  klass send d? "," @klass send d? "]}," ActiveRecord Relation joined_includes_values":{"type":"method","name":"joined_includes_values","children":[],"call":["@includes_values & "," includes_values & "," joins_values "," includes_values "]}," ActiveRecord Relation insert":{"type":"method","name":"insert","children":[],"call":["conn insert "," primary_key ","im insert ","im values= ","Arel  sql "," connection empty_insert_statement_value "," connection ","values empty? ","tuple []= ","conn substitute_at ","binds [] [] ","binds [] ","substitutes each_with_index ","@klass columns_hash [] ","arel_attr name ","@klass columns_hash ","substitutes map ","values sort_by ","@klass connection ","im into "," arel create_insert "," arel ","values []= "," klass arel_table [] "," klass primary_key "," klass "," klass arel_table "," connection next_sequence_value "," klass sequence_name "," connection prefetch_primary_key? "," klass table_name ","primary_key_value ! ","values [] ","k name == ","k name ","values keys find ","values keys ","Hash  === ","im to_sql ","@klass connection insert "," substitute_values "," arel_attribute "," klass next_sequence_value "," klass prefetch_primary_key? ","@klass connection  insert "," pr arel create_insert ary_key "," arel create_insert  insert "," arel create_insert  values= "," @klass connection ection empty_insert_statement_value "," @klass connection ection ","@klass connection  substitute_at ","@klass @klass connection ection "," arel create_insert  into "," klass pr arel create_insert ary_key "," @klass connection ection next_sequence_value "," @klass connection ection prefetch_primary_key? "," connection prefetch_pr arel create_insert ary_key? ","pr arel create_insert ary_key_value ! "," connection next_sequence_value  ! ","values []  ! "," klass next_sequence_value  ! "," arel create_insert  to_sql ","@klass @klass connection ection insert "," klass prefetch_pr arel create_insert ary_key? "]}," ActiveRecord QueryMethods custom_join_ast":{"type":"method","name":"custom_join_ast","children":[],"call":["table create_string_join ","Arel  sql ","join join "," array_of_strings? ","joins map ","joins empty? ","join blank? ","joins reject ","joins map! ","table create_string_Arel  sql  ","Arel  sql  Arel  sql  ","Arel  sql s map ","joins reject  map ","Arel  sql s empty? ","joins reject  empty? ","Arel  sql  blank? ","Arel  sql s reject ","joins reject  reject ","Arel  sql s map! ","joins reject  map! "]}," ActiveRecord QueryMethods bind":{"type":"method","name":"bind","children":[],"call":["relation bind_values "," clone "," spawn bind! "," spawn "," clone  bind_values "]}," ActiveRecord FinderMethods last!":{"type":"method","name":"last!","children":[],"call":[" raise "," last ","RecordNotFound  new "," arel where_sql "," arel ","@klass name ","@klass arel_engine "," raise_record_not_found_exception! "]}," ActiveRecord FinderMethods first!":{"type":"method","name":"first!","children":[],"call":[" raise "," first "," find_nth! ","RecordNotFound  new "," arel where_sql "," arel ","@klass name "," raise_record_not_found_exception! "]}," ActiveRecord Calculations build_count_subquery":{"type":"method","name":"build_count_subquery","children":[],"call":["sm project from ","sm project "," operation_over_aggregate_column ","Arel SelectManager  new ","relation engine ","relation arel as ","relation arel ","relation select_values= "," aggregate_column as "," aggregate_column ","column_name == ","Arel  sql ","sm bind_values= ","arel bind_values ","arel as ","Arel SelectManager  new project ","Arel  star "," table [] "," table ","relation build_subquery ","Arel SelectManager  new  project from ","Arel SelectManager  new  project ","relation relation arel  as ","relation relation arel  ","relation  operation_over_aggregate_column s= ","Arel SelectManager  new  bind_values= ","relation arel  bind_values ","relation arel  as ","relation build_relation arel as  ","relation build_arel as  "]}," ActiveRecord Reflection ThroughReflection through_options":{"type":"method","name":"through_options","children":[],"call":[" through_reflection options "," through_reflection "]}," ActiveRecord Reflection ThroughReflection source_options":{"type":"method","name":"source_options","children":[],"call":[" source_reflection options "," source_reflection "]}," ActiveRecord Reflection ThroughReflection association_primary_key":{"type":"method","name":"association_primary_key","children":[],"call":[" klass primary_key "," klass ","source_reflection options [] ","source_reflection options ","source_reflection source_reflection "," source_reflection "," primary_key ","klass primary_key "," actual_source_reflection options [] "," actual_source_reflection options "," actual_source_reflection ","primary_key to_s -@ ","primary_key to_s "," klass  actual_source_reflection options []  ","source_reflection source_reflection  options [] "," source_reflection  options [] ","source_reflection source_reflection  options "," source_reflection  options ","source_reflection source_reflection  source_reflection source_reflection  "," source_reflection   source_reflection  "," source_reflection source_reflection  ","  source_reflection  ","  actual_source_reflection options []  ","klass  actual_source_reflection options []  "," actual_source_reflection source_reflection  options [] "," actual_ source_reflection  options [] "," actual_source_reflection source_reflection  options "," actual_ source_reflection  options "," actual_source_reflection source_reflection  "," actual_ source_reflection  "," actual_source_reflection options []  to_s -@ "," actual_source_reflection options []  to_s "]}," ActiveRecord Reflection ThroughReflection nested?":{"type":"method","name":"nested?","children":[],"call":[" through_reflection macro == "," through_reflection macro "," through_reflection "," chain length > "," chain length "," chain "," through_reflection through_reflection? "," source_reflection through_reflection? "," source_reflection "]}," ActiveRecord Reflection ThroughReflection source_macro":{"type":"method","name":"source_macro","children":[],"call":[" source_reflection source_macro "," source_reflection ","ActiveSupport Deprecation  warn ","(str \"          ActiveRecord::Base.source_macro is deprecated and will be removed\\n\") squish "]}," ActiveRecord Reflection ThroughReflection conditions":{"type":"method","name":"conditions","children":[],"call":["through_conditions first << "," options [] "," options "," foreign_type ","through_conditions first "," through_reflection conditions "," through_reflection ","conditions first << ","conditions first "," source_reflection conditions "," source_reflection ","c dup "," source_reflection conditions map "," through_reflection conditions  first << ","through_ source_reflection conditions  first << "," through_reflection conditions  first ","through_ source_reflection conditions  first "," through_reflection  source_reflection conditions  "," source_reflection conditions  first << "," source_reflection conditions  first "," source_reflection  source_reflection conditions  "," source_reflection  source_reflection conditions  map "]}," ActiveRecord Reflection ThroughReflection chain":{"type":"method","name":"chain","children":[],"call":["chain []= "," source_reflection chain + "," through_reflection chain "," through_reflection "," source_reflection chain "," source_reflection ","a + ","b []= ","PolymorphicReflection  new ","b [] "," options [] "," options "," through_reflection chain map "," source_reflection chain +  []= ","a +  []= ","ch source_reflection chain in []= "," source_reflection  source_reflection chain +  + "," source_reflection a +  + "," source_reflection ch source_reflection chain in + "," through_reflection  source_reflection chain +  "," through_reflection a +  "," through_reflection ch source_reflection chain in "," source_reflection  source_reflection chain +  "," source_reflection a +  "," source_reflection ch source_reflection chain in "," source_reflection chain  + "," through_reflection chain  []= "," through_reflection chain map  []= "," through_reflection chain  [] "," through_reflection chain map  [] "," through_reflection  source_reflection chain +  map "," through_reflection a +  map "," through_reflection ch source_reflection chain in m source_reflection chain p "]}," ActiveRecord Reflection AssociationReflection derive_foreign_key":{"type":"method","name":"derive_foreign_key","children":[],"call":[" active_record name foreign_key "," active_record name "," active_record "," options [] "," options "," name "," belongs_to? "," active_record model_name to_s foreign_key "," active_record model_name to_s "," active_record model_name "," inverse_of foreign_key "," inverse_of "]}," ActiveRecord Reflection AssociationReflection association_class":{"type":"method","name":"association_class","children":[],"call":[" options [] "," options "," macro "," polymorphic? "," raise "]}," ActiveRecord Reflection AssociationReflection conditions":{"type":"method","name":"conditions","children":[],"call":["(send\n  (send nil :options) :[]\n  (sym :conditions)) compact "," options [] "," options ","conditions << "," active_record base_class name "," active_record base_class "," active_record "," type ","(send\n  (send nil :options) :[]\n  (sym :(send\n  (send nil :options) :[]\n  (sym :conditions)) compact )) compact ","(send\n  (send nil :options) :[]\n  (sym :conditions)) compact  << "]}," ActiveRecord Reflection AssociationReflection chain":{"type":"method","name":"chain","children":[],"call":[]}," ActiveRecord Reflection AssociationReflection type":{"type":"method","name":"type","children":[],"call":[" options [] "," options "]}," ActiveRecord Reflection AssociationReflection foreign_type":{"type":"method","name":"foreign_type","children":[],"call":[" name "," options [] "," options "]}," ActiveRecord Reflection AssociationReflection foreign_key":{"type":"method","name":"foreign_key","children":[],"call":[" derive_foreign_key "," options [] "," options "," derive_foreign_key freeze ","(or\n  (csend\n    (send\n      (send nil :options) :[]\n      (sym :foreign_key)) :to_s)\n  (send nil :derive_foreign_key)) -@ "," derive_fk_query_constraints "," active_record "," active_record has_query_constraints? "," options [] to_s ","(send\n  (send\n    (send nil :options) :[]\n    (sym :query_constraints)) :map) freeze ","fk to_s freeze ","fk to_s "," options [] map "]}," ActiveRecord Railties ControllerRuntime process_action":{"type":"method","name":"process_action","children":[],"call":["ActiveRecord LogSubscriber  reset_runtime ","ActiveRecord RuntimeRegistry  reset "]}," ActiveRecord QueryCache BodyProxy close":{"type":"method","name":"close","children":[],"call":["ActiveRecord Base  connection disable_query_cache! ","ActiveRecord Base  connection ","ActiveRecord Base  connection clear_query_cache ","@target close ","@target respond_to? ","ActiveRecord Base  connection_id= "]}," ActiveRecord QueryCache BodyProxy each":{"type":"method","name":"each","children":[],"call":["@target each "]}," ActiveRecord QueryCache BodyProxy respond_to?":{"type":"method","name":"respond_to?","children":[],"call":["@target respond_to? "]}," ActiveRecord QueryCache BodyProxy method_missing":{"type":"method","name":"method_missing","children":[],"call":["@target send "]}," ActiveRecord QueryCache BodyProxy initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Persistence update_column":{"type":"method","name":"update_column","children":[],"call":[" class update_all == "," class update_all "," id "," class primary_key "," class "," raw_write_attribute "," raise "," persisted? "," class readonly_attributes include? "," class readonly_attributes ","name to_s ","updated_count == "," class unscoped update_all "," class unscoped "," update_columns ","name to_s  to_s "," class update_all  == "," class unscoped update_all  == "," class update_all ==  == "]}," ActiveRecord NestedAttributes unassignable_keys":{"type":"method","name":"unassignable_keys","children":[],"call":["UNASSIGNABLE_KEYS  - ","assignment_opts [] "]}," ActiveRecord NamedScope ClassMethods scope_attributes?":{"type":"method","name":"scope_attributes?","children":[],"call":[" default_scopes any? "," default_scopes "," current_scope "]}," ActiveRecord NamedScope ClassMethods scope_attributes":{"type":"method","name":"scope_attributes","children":[],"call":["scope scope_for_create ","scope default_scoped= "," relation clone "," relation "," current_scope scope_for_create "," current_scope "," relation clone   relation clone _for_create "," relation clone  default_ relation clone d= "," current_ relation clone   relation clone _for_create "," current_ relation clone  "]}," ActiveRecord Migrator migrations_paths":{"type":"method","name":"migrations_paths","children":[],"call":["Array  wrap "," Array "]}," ActiveRecord MigrationProxy basename":{"type":"method","name":"basename","children":[],"call":["File  basename "," filename "]}," ActiveRecord MigrationProxy initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Migration next_migration_number":{"type":"method","name":"next_migration_number","children":[],"call":["%.3d % ","(send\n  (send\n    (send\n      (const nil :Time) :now) :utc) :strftime\n  (str \"%Y%m%d%H%M%S\")) max ","%.14d % ","Time  now utc strftime ","Time  now utc ","Time  now ","ActiveRecord Base  timestamped_migrations ","SchemaMigration  normalize_migration_number ","(send\n  (send\n    (send\n      (send\n        (const nil :Time) :now) :utc) :strftime\n    (str \"%Y%m%d%H%M%S\")) :to_i) max ","(send\n  (str \"%.14d\") :%\n  (lvar :number)) to_i ","Time  now utc strftime to_i ","ActiveRecord  timestamped_migrations ","number to_i "]}," ActiveRecord Migration copy":{"type":"method","name":"copy","children":[],"call":["destination_migrations << ","options [] call ","options [] ","copied << ","FileUtils  cp ","migration filename ","migration filename= ","File  join ","migration name underscore ","migration name ","migration version ","migration version= "," next_migration_number to_i "," next_migration_number ","last version + ","last version ","File  read != ","File  read ","duplicate filename ","m name == ","m name ","destination_migrations detect ","source_migrations each ","ActiveRecord Migrator  migrations ","sources each ","destination_migrations last ","FileUtils  mkdir_p ","File  exists? ","f write ","File  open ","duplicate scope != ","scope to_s ","duplicate scope ","File  binwrite ","source []= ","File  binread ","File  exist? ","magic_comments << ","source sub! "," loop "," dup ","ActiveRecord MigrationContext  new migrations ","ActiveRecord MigrationContext  new "," +@ ","source [] ","source start_with? ","magic_comments empty? ! ","magic_comments empty? ","InternalMetadata NullInternalMetadata  new ","SchemaMigration NullSchemaMigration  new ","ActiveRecord Migrator  migrations  << ","ActiveRecord MigrationContext  new migrations  << ","destination_migrations last  version + ","destination_migrations last  version ","ActiveRecord Migrator  migrations  detect ","ActiveRecord MigrationContext  new migrations  detect ","File  read _migrations each ","File  binread _migrations each ","source [] _migrations each ","ActiveRecord Migrator  migrations  each ","ActiveRecord MigrationContext  new migrations  each ","File  read s each ","File  binread s each ","source [] s each ","destination_migrations destination_migrations last  ","ActiveRecord Migrator  migrations  last ","ActiveRecord MigrationContext  new migrations  last ","File  read  []= ","File  binread  []= ","source []  []= "," dup  << "," +@  << ","File  read  sub! ","File  binread  sub! ","source []  sub! ","File  read  [] ","File  binread  [] ","source []  [] ","File  read  start_with? ","File  binread  start_with? ","source []  start_with? "," dup  empty? ! "," +@  empty? ! "," dup  empty? "," +@  empty? "]}," ActiveRecord Migration initialize":{"type":"method","name":"initialize","children":[],"call":[" class name "," class "]}," ActiveRecord Migration CommandRecorder method_missing":{"type":"method","name":"method_missing","children":[],"call":[" raise ","e message sub ","e message ","@delegate send ","@delegate respond_to? "," delegate public_send "," delegate "," delegate respond_to? "]}," ActiveRecord Migration CommandRecorder invert_add_timestamps":{"type":"method","name":"invert_add_timestamps","children":[],"call":[]}," ActiveRecord Migration CommandRecorder invert_remove_timestamps":{"type":"method","name":"invert_remove_timestamps","children":[],"call":[]}," ActiveRecord Migration CommandRecorder invert_add_index":{"type":"method","name":"invert_add_index","children":[],"call":["options try ","(or\n  (lvar :options)\n  (hash)) merge ","options [] ","options_hash []= ","options_hash [] ! ","options_hash [] ","options slice ","options slice  []= ","options slice  [] ! ","options slice  [] "]}," ActiveRecord Migration CommandRecorder invert_rename_column":{"type":"method","name":"invert_rename_column","children":[],"call":["(send\n  (lvar :args) :first) + ","args last reverse ","args last ","args first "]}," ActiveRecord Migration CommandRecorder invert_rename_index":{"type":"method","name":"invert_rename_index","children":[],"call":["args reverse ","(send\n  (lvar :args) :first) + ","args last reverse ","args last ","args first "]}," ActiveRecord Migration CommandRecorder invert_add_column":{"type":"method","name":"invert_add_column","children":[],"call":["args first "]}," ActiveRecord Migration CommandRecorder invert_rename_table":{"type":"method","name":"invert_rename_table","children":[],"call":["args reverse "]}," ActiveRecord Migration CommandRecorder invert_create_table":{"type":"method","name":"invert_create_table","children":[],"call":["args first ","args last delete ","args last ","args last is_a? "]}," ActiveRecord Migration CommandRecorder respond_to?":{"type":"method","name":"respond_to?","children":[],"call":[" delegate respond_to? "," delegate "]}," ActiveRecord Migration CommandRecorder inverse":{"type":"method","name":"inverse","children":[],"call":[" send "," raise "," respond_to? ","@commands reverse map ","@commands reverse "]}," ActiveRecord Migration CommandRecorder record":{"type":"method","name":"record","children":[],"call":["@commands << ","command << "," inverse_of "]}," ActiveRecord Migration CommandRecorder initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord LogSubscriber identity":{"type":"method","name":"identity","children":[],"call":[" debug ","event payload [] ","event payload "," color "," odd? "," logger debug? "," logger "]}," ActiveRecord Locking Optimistic increment_lock":{"type":"method","name":"increment_lock","children":[],"call":[" send ","previous_lock_value + ","lock_col + "," send to_i "," class locking_column "," class "," send to_i  + "," send  + "," class locking_column  + "]}," ActiveRecord IdentityMap Middleware call":{"type":"method","name":"call","children":[],"call":["Body  new ","@app call ","IdentityMap  enabled= ","IdentityMap  enabled ","IdentityMap  IdentityMap  enabled = ","IdentityMap  IdentityMap  enabled  "]}," ActiveRecord IdentityMap Middleware initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord IdentityMap Middleware Body close":{"type":"method","name":"close","children":[],"call":["IdentityMap  clear ","IdentityMap  enabled= ","@target close ","@target respond_to? "]}," ActiveRecord IdentityMap Middleware Body each":{"type":"method","name":"each","children":[],"call":["@target each "]}," ActiveRecord IdentityMap Middleware Body initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord IdentityMap reinit_with":{"type":"method","name":"reinit_with","children":[],"call":[" run_callbacks "," set_serialized_attributes ","v eql? ","@attributes [] ","@changed_attributes delete_if ","@changed_attributes update ","coder [] slice ","coder [] ","@attributes update ","coder [] except ","@changed_attributes keys "," class initialize_attributes "," class "," set_serialized_ class initialize_attributes  ","@ class initialize_attributes  [] ","@changed_ class initialize_attributes  delete_if ","@changed_ class initialize_attributes  update ","@ class initialize_attributes  update ","@changed_ class initialize_attributes  keys "," class initialize_ class initialize_attributes  "]}," ActiveRecord IdentityMap clear":{"type":"method","name":"clear","children":[],"call":[" repository clear "," repository "]}," ActiveRecord IdentityMap remove_by_id":{"type":"method","name":"remove_by_id","children":[],"call":[" repository [] delete "," repository [] "," repository "]}," ActiveRecord IdentityMap remove":{"type":"method","name":"remove","children":[],"call":[" repository [] delete ","record id "," repository [] ","record class symbolized_sti_name ","record class "," repository ","record class symbolized_base_class "]}," ActiveRecord IdentityMap add":{"type":"method","name":"add","children":[],"call":[" repository [] []= ","record id "," repository [] ","record class symbolized_sti_name ","record class "," repository ","record class symbolized_base_class "," contain_all_columns? "]}," ActiveRecord IdentityMap get":{"type":"method","name":"get","children":[],"call":["ActiveSupport Notifications  instrument "," object_id ","record is_a? "," repository [] [] "," repository [] ","klass symbolized_sti_name "," repository ","klass symbolized_base_class "," repository [] []  is_a? "]}," ActiveRecord IdentityMap without":{"type":"method","name":"without","children":[],"call":[" enabled= "," block_given? "," enabled "]}," ActiveRecord IdentityMap use":{"type":"method","name":"use","children":[],"call":[" clear "," enabled= "," block_given? "," enabled "]}," ActiveRecord IdentityMap repository":{"type":"method","name":"repository","children":[],"call":["h []= ","Hash  new ","Thread  current [] ","Thread  current "]}," ActiveRecord IdentityMap enabled":{"type":"method","name":"enabled","children":[],"call":["Thread  current [] ","Thread  current "]}," ActiveRecord IdentityMap enabled=":{"type":"method","name":"enabled=","children":[],"call":["Thread  current []= ","Thread  current "]}," ActiveRecord Fixture find":{"type":"method","name":"find","children":[],"call":[" raise "," model_class find "," fixture [] "," model_class primary_key "," model_class "," fixture "," model_class unscoped find "," model_class unscoped ","object instance_variable_set "," model_class find_by! "," fixture slice "," Array "]}," ActiveRecord Fixture []":{"type":"method","name":"[]","children":[],"call":[" fixture [] "," fixture "]}," ActiveRecord Fixture each":{"type":"method","name":"each","children":[],"call":[" fixture each "," fixture "]}," ActiveRecord Fixture class_name":{"type":"method","name":"class_name","children":[],"call":[" model_class name "," model_class "]}," ActiveRecord Fixture initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Fixtures erb_render":{"type":"method","name":"erb_render","children":[],"call":["ERB  new result ","ERB  new "]}," ActiveRecord Fixtures parse_yaml_string":{"type":"method","name":"parse_yaml_string","children":[],"call":[" raise ","error class "," yaml_file_path ","YAML  load "," erb_render ","error backtrace "]}," ActiveRecord Fixtures yaml_fixtures_key":{"type":"method","name":"yaml_fixtures_key","children":[],"call":["File  basename split first ","File  basename split ","File  basename "," File  basename split first "," File  basename split "," File  basename "]}," ActiveRecord Fixtures csv_file_path":{"type":"method","name":"csv_file_path","children":[],"call":["@fixture_path + "]}," ActiveRecord Fixtures yaml_file_path":{"type":"method","name":"yaml_file_path","children":[],"call":[]}," ActiveRecord Fixtures read_csv_fixture_files":{"type":"method","name":"read_csv_fixture_files","children":[],"call":[" fixtures []= ","ActiveRecord Fixture  new "," model_class ","@class_name to_s underscore ","@class_name to_s "," fixtures ","data []= ","cell to_s strip ","cell to_s ","header [] to_s strip ","header [] to_s ","header [] ","row each_with_index ","reader each ","reader shift ","CSV  parse "," erb_render ","IO  read "," csv_file_path ","reader shift  [] to_s strip ","reader shift  [] to_s ","reader shift  [] ","CSV  parse  each ","CSV  parse  shift "]}," ActiveRecord Fixtures read_yaml_fixture_files":{"type":"method","name":"read_yaml_fixture_files","children":[],"call":[" fixtures []= ","ActiveRecord Fixture  new "," model_class "," fixtures "," raise ","fixture each ","fixture respond_to? ","yaml_value each ","yaml value ","yaml respond_to? "," parse_yaml_string ","(send\n  (begin\n    (send\n      (block\n        (send\n          (send\n            (const nil :Dir) :[]\n            (dstr\n              (begin\n                (ivar :@fixture_path))\n              (str \"/**/*.yml\"))) :select)\n        (args\n          (arg :f))\n        (send\n          (const nil :File) :file?\n          (lvar :f))) :+\n      (array\n        (send nil :yaml_file_path)))) :map) join ","IO  read ","(send\n  (block\n    (send\n      (send\n        (const nil :Dir) :[]\n        (dstr\n          (begin\n            (ivar :@fixture_path))\n          (str \"/**/*.yml\"))) :select)\n    (args\n      (arg :f))\n    (send\n      (const nil :File) :file?\n      (lvar :f))) :+\n  (array\n    (send nil :yaml_file_path))) map ","(send\n  (send\n    (const nil :Dir) :[]\n    (dstr\n      (begin\n        (ivar :@fixture_path))\n      (str \"/**/*.yml\"))) :select) + "," yaml_file_path ","File  file? ","Dir  [] select ","Dir  [] ","yaml value  each "," parse_yaml_string _value each "," parse_yaml_string  value "," parse_yaml_string  respond_to? "," parse_ parse_yaml_string _string "," parse_(send\n  (begin\n    (send\n      (block\n        (send\n          (send\n            (const nil :Dir) :[]\n            (dstr\n              (begin\n                (ivar :@fixture_path))\n              (str \"/**/*.yml\"))) :select)\n        (args\n          (arg :f))\n        (send\n          (const nil :File) :file?\n          (lvar :f))) :+\n      (array\n        (send nil :yaml_file_path)))) :map) join  ","(send\n  (begin\n    (send\n      (block\n        (send\n          (send\n            (const nil :Dir) :[]\n            (dstr\n              (begin\n                (ivar :@fixture_path))\n              (str \"/**/*.yml\"))) :select)\n        (args\n          (arg :f))\n        (send\n          (const nil :File) :file?\n          (lvar :f))) :+\n      (array\n        (send nil : parse_yaml_string _file_path)))) :map) join ","(send\n  (block\n    (send\n      (send\n        (const nil :Dir) :[]\n        (dstr\n          (begin\n            (ivar :@fixture_path))\n          (str \"/**/*.yml\"))) :select)\n    (args\n      (arg :f))\n    (send\n      (const nil :File) :file?\n      (lvar :f))) :+\n  (array\n    (send nil : parse_yaml_string _file_path))) map ","  parse_yaml_string _file_path "]}," ActiveRecord Fixtures read_fixture_files":{"type":"method","name":"read_fixture_files","children":[],"call":[" raise "," csv_file_path "," yaml_file_path "," read_csv_fixture_files ","File  file? "," read_yaml_fixture_files "," fixtures []= ","ActiveRecord Fixture  new "," model_class "," fixtures ","fh each ","Fixtures File  open ","yaml_files each ","(send\n  (send\n    (const nil :Dir) :[]\n    (dstr\n      (begin\n        (ivar :@fixture_path))\n      (str \"/**/*.yml\"))) :select) + "," File  file? ","Dir  [] select ","Dir  [] ","(send\n  (send\n    (const nil :Dir) :[]\n    (dstr\n      (begin\n        (ivar :@fixture_path))\n      (str \"/{**,*}/*.yml\"))) :select) + ","(send\n  (send\n    (const nil :Dir) :[]\n    (dstr\n      (begin\n        (ivar :@fixture_path))\n      (str \"/**/*.yml\"))) :select) +  each ","(send\n  (send\n    (const nil :Dir) :[]\n    (dstr\n      (begin\n        (ivar :@fixture_path))\n      (str \"/{**,*}/*.yml\"))) :select) +  each "]}," ActiveRecord Fixtures column_names":{"type":"method","name":"column_names","children":[],"call":["c name ","@connection columns collect ","@connection columns "]}," ActiveRecord Fixtures inheritance_column_name":{"type":"method","name":"inheritance_column_name","children":[],"call":[" model_class inheritance_column "," model_class "]}," ActiveRecord Fixtures timestamp_column_names":{"type":"method","name":"timestamp_column_names","children":[],"call":["(str \"created_at\") & "," column_names "]}," ActiveRecord Fixtures has_primary_key_column?":{"type":"method","name":"has_primary_key_column?","children":[],"call":["c name == "," primary_key_name ","c name "," model_class columns any? "," model_class columns "," model_class "]}," ActiveRecord Fixtures primary_key_name":{"type":"method","name":"primary_key_name","children":[],"call":[" model_class primary_key "," model_class "]}," ActiveRecord Fixtures table_rows":{"type":"method","name":"table_rows","children":[],"call":["rows []= ","rows [] concat ","ActiveRecord Fixtures  identify ","association association_foreign_key ","row [] "," primary_key_name ","association foreign_key ","targets map ","rows [] ","association options [] ","association options ","targets split ","targets is_a? ","row delete ","association name to_s ","association name ","row []= ","association foreign_type ","value sub! ","association name to_s != ","(or\n  (send\n    (send\n      (lvar :association) :options) :[]\n    (sym :foreign_key))\n  (dstr\n    (begin\n      (send\n        (lvar :association) :name))\n    (str \"_id\"))) to_s ","association macro ","reflection_class reflect_on_all_associations each ","reflection_class reflect_on_all_associations "," model_class ","row [] constantize "," inheritance_column_name ","row include? ","row include? ! "," has_primary_key_column? ","value == ","row each ","row key? "," timestamp_column_names each "," timestamp_column_names "," model_class record_timestamps "," model_class < ","fixture to_hash "," fixtures map "," fixtures "," table_name ","h []= ","Hash  new "," fixtures delete ","now to_s ","Time  now ","Time  now utc ","ActiveRecord Base  default_timezone == ","ActiveRecord Base  default_timezone ","value is_a? ","fixture to_hash s []= ","fixture to_hash s [] concat ","fixture to_hash  [] ","targets split  map ","row delete  map ","fixture to_hash s [] ","targets split  split ","row delete  split ","targets split  is_a? ","row delete  is_a? ","fixture to_hash  delete ","fixture to_hash  []= ","row delete  sub! "," model_class  reflect_on_all_associations each "," model_class  reflect_on_all_associations ","fixture to_hash  [] constantize ","fixture to_hash  include? ","fixture to_hash  include? ! ","row delete  == ","fixture to_hash  each ","fixture to_hash  key? "," association options []  ","now to_s  to_s ","Time  now  to_s ","Time  now utc  to_s ","Time  now to_s  ","Time  Time  now  ","Time  Time  now utc  ","Time  now to_s  utc ","Time  Time  now  utc ","Time  Time  now utc  utc "]}," ActiveRecord Fixtures size":{"type":"method","name":"size","children":[],"call":[" fixtures size "," fixtures "]}," ActiveRecord Fixtures each":{"type":"method","name":"each","children":[],"call":[" fixtures each "," fixtures "]}," ActiveRecord Fixtures []=":{"type":"method","name":"[]=","children":[],"call":[" fixtures []= "," fixtures "]}," ActiveRecord Fixtures []":{"type":"method","name":"[]","children":[],"call":[" fixtures [] "," fixtures "]}," ActiveRecord Fixtures initialize":{"type":"method","name":"initialize","children":[],"call":[" read_fixture_files ","class_name constantize ","class_name connection ","class_name table_name ","class_name is_a? ","ActiveRecord Base  table_name_suffix ","ActiveRecord Base  table_name_prefix ","ActiveSupport OrderedHash  new "]}," ActiveRecord Fixtures identify":{"type":"method","name":"identify","children":[],"call":[]}," ActiveRecord Fixtures create_fixtures":{"type":"method","name":"create_fixtures","children":[],"call":[]}," ActiveRecord Fixtures instantiate_all_loaded_fixtures":{"type":"method","name":"instantiate_all_loaded_fixtures","children":[],"call":[]}," ActiveRecord Fixtures instantiate_fixtures":{"type":"method","name":"instantiate_fixtures","children":[],"call":[]}," ActiveRecord Fixtures cache_fixtures":{"type":"method","name":"cache_fixtures","children":[],"call":[]}," ActiveRecord Fixtures cached_fixtures":{"type":"method","name":"cached_fixtures","children":[],"call":[]}," ActiveRecord Fixtures fixture_is_cached?":{"type":"method","name":"fixture_is_cached?","children":[],"call":[]}," ActiveRecord Fixtures cache_for_connection":{"type":"method","name":"cache_for_connection","children":[],"call":[]}," ActiveRecord Fixtures reset_cache":{"type":"method","name":"reset_cache","children":[],"call":[]}," ActiveRecord Fixtures find_table_name":{"type":"method","name":"find_table_name","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLiteAdapter release_savepoint":{"type":"method","name":"release_savepoint","children":[],"call":[" execute "," current_savepoint_name "]}," ActiveRecord ConnectionAdapters SQLiteAdapter rollback_to_savepoint":{"type":"method","name":"rollback_to_savepoint","children":[],"call":[" execute "," current_savepoint_name "]}," ActiveRecord ConnectionAdapters SQLiteAdapter create_savepoint":{"type":"method","name":"create_savepoint","children":[],"call":[" execute "," current_savepoint_name "]}," ActiveRecord ConnectionAdapters SQLiteAdapter last_inserted_id":{"type":"method","name":"last_inserted_id","children":[],"call":["@connection last_insert_row_id "]}," ActiveRecord ConnectionAdapters SQLiteAdapter exec_delete":{"type":"method","name":"exec_delete","children":[],"call":["@connection changes "," exec_query "]}," ActiveRecord ConnectionAdapters SQLiteAdapter exec_query":{"type":"method","name":"exec_query","children":[],"call":["ActiveRecord Result  new ","stmt to_a ","stmt bind_params "," type_cast ","binds map ","stmt reset! ","stmt columns ","cache [] ","@connection prepare ","@statements [] ","stmt close ","binds empty? "," log ","cache []  to_a ","@connection prepare  to_a ","cache []  bind_params ","@connection prepare  bind_params ","cache []  reset! ","@connection prepare  reset! ","cache []  columns ","@connection prepare  columns ","cache []  close ","@connection prepare  close "]}," ActiveRecord ConnectionAdapters SQLiteAdapter type_cast":{"type":"method","name":"type_cast","children":[],"call":["value to_f ","BigDecimal  === ","value encode! ","@logger error ","column name ","value encoding == ","value encoding ","column type == ","column type ","String  === "," logger error "," logger ","value encode ","value encode  to_f ","value encode  encode! ","value encode  encoding == ","value encode  encoding ","value encode  encode "]}," ActiveRecord ConnectionAdapters SQLiteAdapter clear_cache!":{"type":"method","name":"clear_cache!","children":[],"call":["@statements clear ","hash [] close ","hash [] ","@statements values each ","@statements values "]}," ActiveRecord ConnectionAdapters SQLiteAdapter supports_statement_cache?":{"type":"method","name":"supports_statement_cache?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLiteAdapter supports_savepoints?":{"type":"method","name":"supports_savepoints?","children":[],"call":[" sqlite_version >= "," sqlite_version "]}," ActiveRecord ConnectionAdapters SQLiteAdapter visitor_for":{"type":"method","name":"visitor_for","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter table_definition":{"type":"method","name":"table_definition","children":[],"call":["TableDefinition  new "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter exec_cache":{"type":"method","name":"exec_cache","children":[],"call":["@connection get_last_result ","@connection block ","@connection send_query_prepared "," type_cast ","binds map ","@statements [] ","@statements []= ","@connection prepare ","@statements length + ","@statements length ","@statements key? ","@statements next_key "," raise ","@statements delete "," sql_key ","FEATURE_NOT_SUPPORTED  == ","e result result_error_field ","e result "," prepare_statement ","pgerror result result_error_field ","pgerror result ","e original_exception ","type_casted_binds map "," log ","@connection exec_prepared ","ActiveRecord PreparedStatementCacheExpired  new ","e cause message ","e cause "," in_transaction? "," is_cached_plan_failure? ","attr value_for_database "," type_casted_binds ","@lock synchronize ","ActiveSupport Dependencies  interlock permit_concurrent_loads ","ActiveSupport Dependencies  interlock "," update_typemap_for_default_timezone "," materialize_transactions "," mark_transaction_written_if_write ","conn exec_prepared "," with_raw_connection ","@statements @statements [] ? ","@statements next_@statements []  "," sql_@statements []  ","e original_exception  result result_error_field ","e cause  result result_error_field ","e original_exception  result ","e cause  result "," type_casted_binds  map ","  type_casted_binds  "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter exec_no_cache":{"type":"method","name":"exec_no_cache","children":[],"call":["@connection async_exec "," log "," type_cast ","attr value_for_database ","binds map "," type_casted_binds ","ActiveSupport Dependencies  interlock permit_concurrent_loads ","ActiveSupport Dependencies  interlock ","@connection exec_params "," update_typemap_for_default_timezone "," materialize_transactions "," mark_transaction_written_if_write ","conn exec_params "," with_raw_connection ","  type_casted_binds  "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter rename_index":{"type":"method","name":"rename_index","children":[],"call":[" execute "," quote_table_name "," quote_column_name "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter serial_sequence":{"type":"method","name":"serial_sequence","children":[],"call":["result rows first first ","result rows first ","result rows "," exec_query "," exec_query  rows first first "," exec_query  rows first "," exec_query  rows "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter extract_schema_and_table":{"type":"method","name":"extract_schema_and_table","children":[],"call":["name =~ ","name split "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter sql_for_insert":{"type":"method","name":"sql_for_insert","children":[],"call":[" quote_column_name "," primary_key "," extract_schema_and_table ","sql split [] ","sql split "," extract_table_ref_from_insert_sql "," extract_ extract_table_ref_from_insert_sql _from_insert_sql "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter exec_delete":{"type":"method","name":"exec_delete","children":[],"call":["result clear ","result cmd_tuples "," exec_cache "," exec_no_cache ","binds empty? "," log "," exec_cache  clear "," exec_no_cache  clear "," exec_cache  cmd_tuples "," exec_no_cache  cmd_tuples "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter exec_query":{"type":"method","name":"exec_query","children":[],"call":["result clear ","ActiveRecord Result  new "," result_as_array ","result fields "," exec_cache "," exec_no_cache ","binds empty? "," log "," exec_cache  clear "," exec_no_cache  clear ","  exec_cache _as_array ","  exec_no_cache _as_array "," exec_cache  fields "," exec_no_cache  fields "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter substitute_at":{"type":"method","name":"substitute_at","children":[],"call":["Arel  sql ","index + ","Arel Nodes BindParam  new "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter insert_sql":{"type":"method","name":"insert_sql","children":[],"call":[" select_value "," quote_column_name "," primary_key "," extract_schema_and_table ","sql split [] ","sql split "," extract_table_ref_from_insert_sql "," extract_ extract_table_ref_from_insert_sql _from_insert_sql "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter session_auth=":{"type":"method","name":"session_auth=","children":[],"call":[" exec_query "," clear_cache! "," execute "," internal_execute "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter type_cast":{"type":"method","name":"type_cast","children":[],"call":["bytea == ","column sql_type "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter reset!":{"type":"method","name":"reset!","children":[],"call":[" clear_cache! "," configure_connection ","@connection query ","@connection transaction_status == ","@connection transaction_status "," reset_transaction ","@lock synchronize ","@raw_connection query ","@raw_connection transaction_status == ","@raw_connection transaction_status "," connect! "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter clear_cache!":{"type":"method","name":"clear_cache!","children":[],"call":["@statements clear ","@connection query ","@statements each_value ","@lock synchronize "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter visitor_for":{"type":"method","name":"visitor_for","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter supports_statement_cache?":{"type":"method","name":"supports_statement_cache?","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter TableDefinition tsvector":{"type":"method","name":"tsvector","children":[],"call":[" column ","args [] ","args extract_options! ","args extract_args extract_options! ! "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter TableDefinition xml":{"type":"method","name":"xml","children":[],"call":[" column ","args [] ","args extract_options! "," args [] "," args ","args extract_args extract_options! ! "]}," ActiveRecord ConnectionAdapters MysqlAdapter exec_stmt":{"type":"method","name":"exec_stmt","children":[],"call":["stmt close ","binds empty? ","stmt free_result ","stmt result_metadata free ","stmt result_metadata ","field name ","metadata fetch_fields map ","metadata fetch_fields ","cache [] "," raise ","@statements delete ","stmt execute "," type_cast ","binds map ","@connection prepare ","@statements [] ","stmt affected_rows ","ActiveRecord Result  new ","stmt to_a "," log ","metadata free ","type_casted_binds map ","cache []  close ","@connection prepare  close ","cache []  free_result ","@connection prepare  free_result ","stmt result_stmt result_metadata  free ","cache []  result_metadata free ","@connection prepare  result_metadata free ","stmt result_stmt result_metadata  ","cache []  result_metadata ","@connection prepare  result_metadata ","stmt result_metadata  fetch_fields map ","stmt result_metadata  fetch_fields ","cache []  execute ","@connection prepare  execute ","cache []  affected_rows ","@connection prepare  affected_rows ","stmt stmt affected_rows  ","cache []  to_a ","@connection prepare  to_a ","stmt result_metadata  free "]}," ActiveRecord ConnectionAdapters MysqlAdapter remove_timestamps_sql":{"type":"method","name":"remove_timestamps_sql","children":[],"call":[" remove_column_sql "]}," ActiveRecord ConnectionAdapters MysqlAdapter add_timestamps_sql":{"type":"method","name":"add_timestamps_sql","children":[],"call":[" add_column_sql "]}," ActiveRecord ConnectionAdapters MysqlAdapter remove_index_sql":{"type":"method","name":"remove_index_sql","children":[],"call":[" index_name_for_remove ","  index_name_for_remove _for_remove "]}," ActiveRecord ConnectionAdapters MysqlAdapter add_index_sql":{"type":"method","name":"add_index_sql","children":[],"call":[" add_index_options "]}," ActiveRecord ConnectionAdapters MysqlAdapter rename_column_sql":{"type":"method","name":"rename_column_sql","children":[],"call":[" add_column_options! "," quote_column_name "," select_one [] "," select_one "," quote_table_name "," raise ","options []= ","column null ","column default ","c name == ","column_name to_s ","c name "," columns find "," columns "]}," ActiveRecord ConnectionAdapters MysqlAdapter change_column_sql":{"type":"method","name":"change_column_sql","children":[],"call":[" add_column_position! "," add_column_options! "," type_to_sql ","options [] "," quote_column_name ","options []= ","column null ","options has_key? ","column default "," options_include_default? "," column_for "," add_ column_for _position! "," add_ column_for _options! "," quote_ column_for _name "," column_for  null "," column_for  default ","  column_for _for "]}," ActiveRecord ConnectionAdapters MysqlAdapter remove_column_sql":{"type":"method","name":"remove_column_sql","children":[],"call":[" columns_for_remove map "," columns_for_remove "]}," ActiveRecord ConnectionAdapters MysqlAdapter add_column_sql":{"type":"method","name":"add_column_sql","children":[],"call":[" add_column_position! "," add_column_options! "," type_to_sql ","options [] "," quote_column_name "]}," ActiveRecord ConnectionAdapters MysqlAdapter case_sensitive_modifier":{"type":"method","name":"case_sensitive_modifier","children":[],"call":["Arel Nodes Bin  new "]}," ActiveRecord ConnectionAdapters MysqlAdapter bulk_change_table":{"type":"method","name":"bulk_change_table","children":[],"call":[" execute "," quote_table_name ","(send\n  (lvar :operations) :map) flatten join ","(send\n  (lvar :operations) :map) flatten "," raise ","arguments inspect "," send "," respond_to? ","args shift ","operations map "]}," ActiveRecord ConnectionAdapters MysqlAdapter join_to_update":{"type":"method","name":"join_to_update","children":[],"call":["update wheres= ","select constraints ","update table ","select source ","update where ","update key in ","update key ","subselect from ","subsubselect as ","subselect project ","Arel  sql ","update key name ","Arel SelectManager  new ","select engine ","subsubselect projections= ","select clone ","select orders any? ","select orders ","select offset ","select limit ","Arel SelectManager  new  from ","subArel SelectManager  new  as ","select clone  as ","Arel SelectManager  new  project ","subArel SelectManager  new  projections= ","select clone  projections= "]}," ActiveRecord ConnectionAdapters MysqlAdapter exec_delete":{"type":"method","name":"exec_delete","children":[],"call":["stmt affected_rows "," exec_stmt "," log "," exec_query "]}," ActiveRecord ConnectionAdapters MysqlAdapter exec_without_stmt":{"type":"method","name":"exec_without_stmt","children":[],"call":["ActiveRecord Result  new ","result free ","result to_a ","field name ","result fetch_fields map ","result fetch_fields ","@connection query "," log ","@connection affected_rows ","types keys ","types []= ","Fields Identity  new ","Fields TYPES  fetch ","field type ","Fields Decimal  new ","field decimals > ","field decimals ","result fetch_fields each ","Fields  find_type ","fields << ","Type Decimal  new ","@connection query  free ","@connection query  to_a ","@connection query  fetch_fields map ","@connection query  fetch_fields ","@connection affected_result to_a  ","@connection @connection affected_rows  ","@connection query  fetch_fields each "]}," ActiveRecord ConnectionAdapters MysqlAdapter last_inserted_id":{"type":"method","name":"last_inserted_id","children":[],"call":["@connection insert_id "]}," ActiveRecord ConnectionAdapters MysqlAdapter exec_query":{"type":"method","name":"exec_query","children":[],"call":["ActiveRecord Result  new ","stmt to_a "," exec_stmt "," log "," block_given? "," exec_without_stmt ","binds empty? "," without_prepared_statement? "]}," ActiveRecord ConnectionAdapters MysqlAdapter client_encoding":{"type":"method","name":"client_encoding","children":[],"call":["ENCODINGS  [] ","result rows last last ","result rows last ","result rows "," exec_query "," exec_query  rows last last "," exec_query  rows last "," exec_query  rows "]}," ActiveRecord ConnectionAdapters MysqlAdapter clear_cache!":{"type":"method","name":"clear_cache!","children":[],"call":["@statements clear ","cache [] close ","cache [] ","@statements values each ","@statements values "]}," ActiveRecord ConnectionAdapters MysqlAdapter type_cast":{"type":"method","name":"type_cast","children":[],"call":["value == "]}," ActiveRecord ConnectionAdapters MysqlAdapter supports_statement_cache?":{"type":"method","name":"supports_statement_cache?","children":[],"call":[]}," ActiveRecord ConnectionAdapters MysqlAdapter supports_bulk_alter?":{"type":"method","name":"supports_bulk_alter?","children":[],"call":[]}," ActiveRecord ConnectionAdapters MysqlAdapter visitor_for":{"type":"method","name":"visitor_for","children":[],"call":[]}," ActiveRecord ConnectionAdapters MysqlColumn string_to_date":{"type":"method","name":"string_to_date","children":[],"call":[" new_date ","v day ","v month ","v year ","Mysql Time  === "]}," ActiveRecord ConnectionAdapters MysqlColumn string_to_dummy_time":{"type":"method","name":"string_to_dummy_time","children":[],"call":[" new_time ","v second_part ","v second ","v minute ","v hour ","Mysql Time  === "]}," ActiveRecord ConnectionAdapters MysqlColumn string_to_time":{"type":"method","name":"string_to_time","children":[],"call":[" new_time ","value second_part ","value second ","value minute ","value hour ","value day ","value month ","value year ","Mysql Time  === "]}," Mysql Time to_date":{"type":"method","name":"to_date","children":[],"call":["Date  new "," day "," month "," year "]}," ActiveRecord ConnectionAdapters Mysql2Adapter column_for":{"type":"method","name":"column_for","children":[],"call":[" raise ","c name == ","column_name to_s ","c name "," columns find "," columns "]}," ActiveRecord ConnectionAdapters Mysql2Adapter version":{"type":"method","name":"version","children":[],"call":["v to_i ","@connection info [] scan flatten map ","@connection info [] scan flatten ","@connection info [] scan ","@connection info [] ","@connection info "]}," ActiveRecord ConnectionAdapters Mysql2Adapter supports_views?":{"type":"method","name":"supports_views?","children":[],"call":[" version [] >= "," version [] "," version "]}," ActiveRecord ConnectionAdapters Mysql2Adapter exec_query":{"type":"method","name":"exec_query","children":[],"call":["ActiveRecord Result  new ","result to_a ","result fields "," raise ","exception message split first =~ ","exception message split first ","exception message split ","exception message ","@connection query "," log ","@connection query_options []= ","ActiveRecord Base  default_timezone ","@connection query_options "," execute ","@connection next_result ","@connection more_results? ","@connection query  to_a "," execute  to_a ","@connection query  fields "," execute  fields ","@connection next_@connection query  ","@connection next_ execute  ","@connection more_@connection query s? ","@connection more_ execute s? "]}," ActiveRecord ConnectionAdapters Mysql2Adapter select":{"type":"method","name":"select","children":[],"call":[" exec_query to_a "," exec_query "," quote ","binds shift reverse ","binds shift ","sql gsub ","binds dup ","binds dup  shift reverse ","binds dup  shift ","binds dup  dup "]}," ActiveRecord ConnectionAdapters Mysql2Adapter configure_connection":{"type":"method","name":"configure_connection","children":[],"call":[" execute ","variable_assignments join ","variable_assignments << ","wait_timeout is_a? ","@config [] ","@connection query_options merge! ","@connection query_options ","@connection query_options []= ","@raw_connection query_options []= "," default_timezone ","@raw_connection query_options ","@config []  is_a? "]}," ActiveRecord ConnectionAdapters Mysql2Adapter connect":{"type":"method","name":"connect","children":[],"call":[" configure_connection ","Mysql2 Client  new "," class new_client "," class "," raise ","ex set_pool "]}," ActiveRecord ConnectionAdapters Mysql2Adapter translate_exception":{"type":"method","name":"translate_exception","children":[],"call":["InvalidForeignKey  new ","RecordNotUnique  new ","exception error_number ","exception respond_to? ","ActiveRecord AdapterTimeout  new ","exception error_number ! ","exception is_a? ","ActiveRecord ConnectionFailed  new ","ActiveRecord ConnectionNotEstablished  new ","exception message match? ","exception message "]}," ActiveRecord ConnectionAdapters Mysql2Adapter quoted_columns_for_index":{"type":"method","name":"quoted_columns_for_index","children":[],"call":[" quote_column_name ","column_names map ","length [] ","options [] ","options is_a? ","options []  [] "]}," ActiveRecord ConnectionAdapters Mysql2Adapter join_to_update":{"type":"method","name":"join_to_update","children":[],"call":["update wheres= ","select constraints ","update table ","select source ","update where ","update key in ","update key ","subselect from ","subsubselect as ","subselect project ","Arel  sql ","update key name ","Arel SelectManager  new ","select engine ","subsubselect projections= ","select clone ","select orders any? ","select orders ","select offset ","select limit ","Arel SelectManager  new  from ","subArel SelectManager  new  as ","select clone  as ","Arel SelectManager  new  project ","subArel SelectManager  new  projections= ","select clone  projections= "]}," ActiveRecord ConnectionAdapters Mysql2Adapter limited_update_conditions":{"type":"method","name":"limited_update_conditions","children":[],"call":[]}," ActiveRecord ConnectionAdapters Mysql2Adapter case_sensitive_modifier":{"type":"method","name":"case_sensitive_modifier","children":[],"call":["Arel Nodes Bin  new "]}," ActiveRecord ConnectionAdapters Mysql2Adapter case_sensitive_equality_operator":{"type":"method","name":"case_sensitive_equality_operator","children":[],"call":[]}," ActiveRecord ConnectionAdapters Mysql2Adapter primary_key":{"type":"method","name":"primary_key","children":[],"call":["pk_and_sequence first "," pk_and_sequence_for "," pk_and_sequence_for  first ","  pk_and_sequence_for _for "]}," ActiveRecord ConnectionAdapters Mysql2Adapter pk_and_sequence_for":{"type":"method","name":"pk_and_sequence_for","children":[],"call":["keys first ","keys length == ","keys length ","keys << ","row [] ","row [] == ","result each "," execute "," quote_table_name ","key gsub ","1 split map ","1 split ","create_table to_s =~ ","create_table to_s ","result first [] ","result first "," execute  each ","result first []  to_s =~ ","result first []  to_s "," execute  first [] "," execute  first "]}," ActiveRecord ConnectionAdapters Mysql2Adapter show_variable":{"type":"method","name":"show_variable","children":[],"call":["variables first [] ","variables first ","variables empty? "," select_all "," select_all  first [] "," select_all  first "," select_all  empty? "]}," ActiveRecord ConnectionAdapters Mysql2Adapter add_column_position!":{"type":"method","name":"add_column_position!","children":[],"call":["sql << "," quote_column_name ","options [] "]}," ActiveRecord ConnectionAdapters Mysql2Adapter type_to_sql":{"type":"method","name":"type_to_sql","children":[],"call":[" raise ","type to_s == ","type to_s "]}," ActiveRecord ConnectionAdapters Mysql2Adapter rename_column":{"type":"method","name":"rename_column","children":[],"call":[" execute "," add_column_options! "," quote_column_name "," quote_table_name "," select_one [] "," select_one "," raise ","options []= ","column null ","column default ","c name == ","column_name to_s ","c name "," columns find "," columns "]}," ActiveRecord ConnectionAdapters Mysql2Adapter change_column":{"type":"method","name":"change_column","children":[],"call":[" execute "," add_column_position! "," add_column_options! "," type_to_sql ","options [] "," quote_column_name "," quote_table_name ","options []= ","column null ","options has_key? ","column default "," options_include_default? "," column_for "," add_ column_for _position! "," add_ column_for _options! "," quote_ column_for _name "," column_for  null "," column_for  default ","  column_for _for "]}," ActiveRecord ConnectionAdapters Mysql2Adapter change_column_null":{"type":"method","name":"change_column_null","children":[],"call":[" change_column ","column sql_type "," execute "," quote_column_name "," quote "," quote_table_name ","default nil? "," column_for "," change_ column_for  "," column_for  sql_type "," quote_ column_for _name ","  column_for _for "]}," ActiveRecord ConnectionAdapters Mysql2Adapter change_column_default":{"type":"method","name":"change_column_default","children":[],"call":[" change_column ","column sql_type "," column_for "," change_ column_for  "," column_for  sql_type ","  column_for _for "]}," ActiveRecord ConnectionAdapters Mysql2Adapter add_column":{"type":"method","name":"add_column","children":[],"call":[" execute "," add_column_position! "," add_column_options! "," type_to_sql ","options [] "," quote_column_name "," quote_table_name "]}," ActiveRecord ConnectionAdapters Mysql2Adapter rename_table":{"type":"method","name":"rename_table","children":[],"call":[" execute "," quote_table_name "]}," ActiveRecord ConnectionAdapters Mysql2Adapter create_table":{"type":"method","name":"create_table","children":[],"call":["options reverse_merge "]}," ActiveRecord ConnectionAdapters Mysql2Adapter columns":{"type":"method","name":"columns","children":[],"call":["columns << ","Mysql2Column  new ","field [] == ","field [] ","result each "," execute "," quote_table_name "," execute  each "]}," ActiveRecord ConnectionAdapters Mysql2Adapter indexes":{"type":"method","name":"indexes","children":[],"call":["indexes last lengths << ","row [] ","indexes last lengths ","indexes last ","indexes last columns << ","indexes last columns ","indexes << ","Mysql2IndexDefinition  new ","row [] == ","current_index != ","result each "," execute "," quote_table_name ","row []  != "," execute  each "]}," ActiveRecord ConnectionAdapters Mysql2Adapter drop_table":{"type":"method","name":"drop_table","children":[],"call":[]}," ActiveRecord ConnectionAdapters Mysql2Adapter table_exists?":{"type":"method","name":"table_exists?","children":[],"call":[" tables include? "," tables ","name split ","name to_s ","name to_s  split ","name to_s  to_s "]}," ActiveRecord ConnectionAdapters Mysql2Adapter tables":{"type":"method","name":"tables","children":[],"call":["field first "," execute collect "," execute ","(str \"SHOW TABLES\") compact join ","(str \"SHOW TABLES\") compact ","sql << "," quote_table_name ","(str \"SHOW TABLES\") compact join  << "]}," ActiveRecord ConnectionAdapters Mysql2Adapter collation":{"type":"method","name":"collation","children":[],"call":[" show_variable "]}," ActiveRecord ConnectionAdapters Mysql2Adapter charset":{"type":"method","name":"charset","children":[],"call":[" show_variable "]}," ActiveRecord ConnectionAdapters Mysql2Adapter current_database":{"type":"method","name":"current_database","children":[],"call":[" select_value "]}," ActiveRecord ConnectionAdapters Mysql2Adapter drop_database":{"type":"method","name":"drop_database","children":[],"call":[" execute "]}," ActiveRecord ConnectionAdapters Mysql2Adapter create_database":{"type":"method","name":"create_database","children":[],"call":[" execute ","options [] "]}," ActiveRecord ConnectionAdapters Mysql2Adapter recreate_database":{"type":"method","name":"recreate_database","children":[],"call":[" create_database "," drop_database "]}," ActiveRecord ConnectionAdapters Mysql2Adapter structure_dump":{"type":"method","name":"structure_dump","children":[],"call":[" select_one [] + "," select_one [] "," select_one "," quote_table_name ","table to_a first last ","table to_a first ","table to_a ","table delete "," select_all inject "," select_all "," supports_views? "]}," ActiveRecord ConnectionAdapters Mysql2Adapter add_limit_offset!":{"type":"method","name":"add_limit_offset!","children":[],"call":["sql << ","offset to_i "," sanitize_limit ","options [] "]}," ActiveRecord ConnectionAdapters Mysql2Adapter release_savepoint":{"type":"method","name":"release_savepoint","children":[],"call":[" execute "," current_savepoint_name "]}," ActiveRecord ConnectionAdapters Mysql2Adapter rollback_to_savepoint":{"type":"method","name":"rollback_to_savepoint","children":[],"call":[" execute "," current_savepoint_name "]}," ActiveRecord ConnectionAdapters Mysql2Adapter create_savepoint":{"type":"method","name":"create_savepoint","children":[],"call":[" execute "," current_savepoint_name "]}," ActiveRecord ConnectionAdapters Mysql2Adapter rollback_db_transaction":{"type":"method","name":"rollback_db_transaction","children":[],"call":[" execute "]}," ActiveRecord ConnectionAdapters Mysql2Adapter commit_db_transaction":{"type":"method","name":"commit_db_transaction","children":[],"call":[" execute "]}," ActiveRecord ConnectionAdapters Mysql2Adapter begin_db_transaction":{"type":"method","name":"begin_db_transaction","children":[],"call":[" execute "]}," ActiveRecord ConnectionAdapters Mysql2Adapter update_sql":{"type":"method","name":"update_sql","children":[],"call":["@connection affected_rows "]}," ActiveRecord ConnectionAdapters Mysql2Adapter last_inserted_id":{"type":"method","name":"last_inserted_id","children":[],"call":["@connection last_id "]}," ActiveRecord ConnectionAdapters Mysql2Adapter exec_delete":{"type":"method","name":"exec_delete","children":[],"call":["@connection affected_rows "," execute "," quote ","binds shift reverse ","binds shift ","sql gsub ","binds dup "," to_sql ","binds dup  shift reverse ","binds dup  shift ","binds dup  dup "]}," ActiveRecord ConnectionAdapters Mysql2Adapter exec_insert":{"type":"method","name":"exec_insert","children":[],"call":[" execute "," quote ","binds shift reverse ","binds shift ","sql gsub ","binds dup "," to_sql ","binds dup  shift reverse ","binds dup  shift ","binds dup  dup "]}," ActiveRecord ConnectionAdapters Mysql2Adapter insert_sql":{"type":"method","name":"insert_sql","children":[],"call":["@connection last_id "]}," ActiveRecord ConnectionAdapters Mysql2Adapter execute":{"type":"method","name":"execute","children":[],"call":[" raise ","exception message split first =~ ","exception message split first ","exception message split ","exception message ","@connection query "," log ","name == ","@connection query_options []= ","ActiveRecord Base  default_timezone ","@connection query_options "]}," ActiveRecord ConnectionAdapters Mysql2Adapter select_rows":{"type":"method","name":"select_rows","children":[],"call":[" execute to_a "," execute ","result to_a ","@connection next_result ","@connection more_results? "," execute  to_a ","@connection next_ execute  ","@connection more_ execute s? "]}," ActiveRecord ConnectionAdapters Mysql2Adapter reset!":{"type":"method","name":"reset!","children":[],"call":[" connect "," disconnect! "]}," ActiveRecord ConnectionAdapters Mysql2Adapter disconnect!":{"type":"method","name":"disconnect!","children":[],"call":["@connection close ","@connection nil? "]}," ActiveRecord ConnectionAdapters Mysql2Adapter requires_reloading?":{"type":"method","name":"requires_reloading?","children":[],"call":[]}," ActiveRecord ConnectionAdapters Mysql2Adapter reconnect!":{"type":"method","name":"reconnect!","children":[],"call":[" connect "," disconnect! "]}," ActiveRecord ConnectionAdapters Mysql2Adapter active?":{"type":"method","name":"active?","children":[],"call":["@connection ping ","(ivar :@raw_connection) ! ! ","(ivar :@raw_connection) ! "]}," ActiveRecord ConnectionAdapters Mysql2Adapter disable_referential_integrity":{"type":"method","name":"disable_referential_integrity","children":[],"call":[" update "," select_value "]}," ActiveRecord ConnectionAdapters Mysql2Adapter substitute_at":{"type":"method","name":"substitute_at","children":[],"call":["Arel  sql ","Arel Nodes BindParam  new "]}," ActiveRecord ConnectionAdapters Mysql2Adapter quoted_false":{"type":"method","name":"quoted_false","children":[],"call":[]}," ActiveRecord ConnectionAdapters Mysql2Adapter quoted_true":{"type":"method","name":"quoted_true","children":[],"call":[]}," ActiveRecord ConnectionAdapters Mysql2Adapter quote_string":{"type":"method","name":"quote_string","children":[],"call":["@connection escape "," raise "," translate_exception ","error message ","connection escape "," with_raw_connection "]}," ActiveRecord ConnectionAdapters Mysql2Adapter quote_table_name":{"type":"method","name":"quote_table_name","children":[],"call":[" quote_column_name gsub "," quote_column_name ","@quoted_table_names [] "]}," ActiveRecord ConnectionAdapters Mysql2Adapter quote_column_name":{"type":"method","name":"quote_column_name","children":[],"call":["name to_s gsub ","name to_s ","@quoted_column_names [] "]}," ActiveRecord ConnectionAdapters Mysql2Adapter quote":{"type":"method","name":"quote","children":[],"call":["value to_s ","value kind_of? ","column class string_to_binary unpack [] ","column class string_to_binary unpack ","column class string_to_binary ","column class ","column class respond_to? ","column type == ","column type ","value to_column class string_to_binary unpack []  ","column clacolumn class string_to_binary unpack [] column class string_to_binary unpack []  column class string_to_binary unpack [] tring_to_binary unpack [] ","column clacolumn class string_to_binary unpack [] column class string_to_binary unpack []  column class string_to_binary unpack [] tring_to_binary unpack ","column clacolumn class string_to_binary unpack [] column class string_to_binary unpack []  column class string_to_binary unpack [] tring_to_binary ","column clacolumn class string_to_binary unpack [] column class string_to_binary unpack []  ","column clacolumn class string_to_binary unpack [] column class string_to_binary unpack []  recolumn class string_to_binary unpack [] pond_to? "]}," ActiveRecord ConnectionAdapters Mysql2Adapter native_database_types":{"type":"method","name":"native_database_types","children":[],"call":[]}," ActiveRecord ConnectionAdapters Mysql2Adapter supports_savepoints?":{"type":"method","name":"supports_savepoints?","children":[],"call":[]}," ActiveRecord ConnectionAdapters Mysql2Adapter supports_primary_key?":{"type":"method","name":"supports_primary_key?","children":[],"call":[]}," ActiveRecord ConnectionAdapters Mysql2Adapter supports_migrations?":{"type":"method","name":"supports_migrations?","children":[],"call":[]}," ActiveRecord ConnectionAdapters Mysql2Adapter adapter_name":{"type":"method","name":"adapter_name","children":[],"call":[]}," ActiveRecord ConnectionAdapters Mysql2Adapter visitor_for":{"type":"method","name":"visitor_for","children":[],"call":[]}," ActiveRecord ConnectionAdapters Mysql2Adapter initialize":{"type":"method","name":"initialize","children":[],"call":[" configure_connection ","BindSubstitution  new ","config key? ","config reverse_merge ","@config [] ","@config [] push ","@config [] kind_of? "]}," ActiveRecord ConnectionAdapters Mysql2Column missing_default_forged_as_empty_string?":{"type":"method","name":"missing_default_forged_as_empty_string?","children":[],"call":["default == "," null ! "," null "," type != "," type "]}," ActiveRecord ConnectionAdapters Mysql2Column extract_limit":{"type":"method","name":"extract_limit","children":[],"call":[]}," ActiveRecord ConnectionAdapters Mysql2Column simplified_type":{"type":"method","name":"simplified_type","children":[],"call":["field_type downcase index ","field_type downcase ","Mysql2Adapter  emulate_booleans "]}," ActiveRecord ConnectionAdapters Mysql2Column has_default?":{"type":"method","name":"has_default?","children":[],"call":[" type == "," type "," sql_type =~ "," sql_type "]}," ActiveRecord ConnectionAdapters Mysql2Column extract_default":{"type":"method","name":"extract_default","children":[],"call":[" missing_default_forged_as_empty_string? "," raise ","default inspect "," type "," null ","default blank? "," type == "," sql_type =~ "," sql_type "]}," ActiveRecord Base mysql2_connection":{"type":"method","name":"mysql2_connection","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter case_sensitive_modifier":{"type":"method","name":"case_sensitive_modifier","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter clear_cache!":{"type":"method","name":"clear_cache!","children":[],"call":["@statements clear ","@lock synchronize ","@statements reset "]}," ActiveRecord ConnectionAdapters AbstractAdapter substitute_at":{"type":"method","name":"substitute_at","children":[],"call":["Arel  sql ","Arel Nodes BindParam  new "]}," ActiveRecord ConnectionAdapters AbstractAdapter supports_bulk_alter?":{"type":"method","name":"supports_bulk_alter?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter visitor_for":{"type":"method","name":"visitor_for","children":[],"call":[]}," ActiveRecord ConnectionAdapters SchemaStatements table_definition":{"type":"method","name":"table_definition","children":[],"call":["TableDefinition  new "]}," ActiveRecord ConnectionAdapters SchemaStatements columns_for_remove":{"type":"method","name":"columns_for_remove","children":[],"call":[" quote_column_name ","column_names map "," raise ","ArgumentError  new ","column_names blank? ","column_names flatten ","ActiveSupport Deprecation  warn ","column_names flatten  map ","column_names flatten  blank? ","column_names flatten  flatten "]}," ActiveRecord ConnectionAdapters SchemaStatements index_name_for_remove":{"type":"method","name":"index_name_for_remove","children":[],"call":[" raise "," index_name_exists? "," index_name ","options_without_column delete ","options dup ","options has_key? ","options is_a? ","matching_indexes first name ","matching_indexes first ","matching_indexes none? ","matching_indexes map join ","matching_indexes map ","matching_indexes count > ","matching_indexes count ","check [] ","checks all? "," indexes select "," indexes "," ArgumentError ","checks none? ","checks << ","i columns join == ","column_names join ","i columns join ","i columns "," lambda ","column_names any? "," Array map "," Array ","options [] ","i name == ","options [] to_s ","i name ","options key? "," respond_to? "," can_remove_index_by_name? "," index_name == ","column_names present? "," index_column_names ","options []= ","(str \"\\\\W\") match? ","column_name is_a? ","options key? ! ","(and\n  (send\n    (lvar :options) :key?\n    (sym :name))\n  (send nil :expression_column_name?\n    (lvar :column_names))) ! "," expression_column_name? ","  index_name _exists? ","  index_name  ","options dup  delete "," Array map  join "," index_column_names  join "," Array map  any? "," index_column_names  any? ","  index_name  == "," Array map  present? "," index_column_names  present? "," index_ Array map  "," index_ index_column_names  ","(and\n  (send\n    (lvar :options) :key?\n    (sym :name))\n  (send nil :expression_column_name?\n    (lvar : Array map ))) ! ","(and\n  (send\n    (lvar :options) :key?\n    (sym :name))\n  (send nil :expression_column_name?\n    (lvar : index_column_names ))) ! "]}," ActiveRecord ConnectionAdapters SchemaStatements add_index_options":{"type":"method","name":"add_index_options","children":[],"call":[" quoted_columns_for_index join "," quoted_columns_for_index "," raise "," index_name_exists? "," index_name_length ","index_name length > ","index_name length ","options [] to_s ","options [] ","options key? ","Hash  === "," index_name ","Array  wrap "," allowed_index_name_length ","ActiveSupport Deprecation  warn ","Passing a string as third argument of `add_index` is deprecated and will + + ","column_name inspect ","table_name inspect ","Passing a string as third argument of `add_index` is deprecated and will + "," supports_partial_index? ","options [] present? ","ArgumentError  new "," index_algorithms keys map join "," index_algorithms keys map "," index_algorithms keys "," index_algorithms "," index_algorithms fetch ","options fetch ","options assert_valid_keys "," Array "," table_exists? "," data_source_exists? "," index_name_options ","(str \"\\\\W\") === ","column_name is_a? "," index_column_names "," validate_index_length! "," index_algorithm ","IndexDefinition  new "," quoted_columns_for_IndexDefinition  new  join "," quoted_columns_for_IndexDefinition  new  "," options [] to_s _exists? ","  index_name _exists? "," IndexDefinition  new _name_exists? "," options [] to_s _length ","  index_name _length "," IndexDefinition  new _name_length ","options [] to_s  length > "," index_name  length > ","IndexDefinition  new _name length > ","options [] to_s  length "," index_name  length ","IndexDefinition  new _name length "," options [] to_s  ","  index_name  "," IndexDefinition  new _name "," allowed_options [] to_s _length "," allowed_ index_name _length "," allowed_IndexDefinition  new _name_length ","Passing a string as third argument of `add_IndexDefinition  new ` is deprecated and will + + ","Passing a string as third argument of `add_IndexDefinition  new ` is deprecated and will + "," supports_partial_IndexDefinition  new ? "," IndexDefinition  new _algorithms keys map join "," IndexDefinition  new _algorithms keys map "," IndexDefinition  new _algorithms keys "," IndexDefinition  new _algorithms "," IndexDefinition  new _algorithms fetch "," options [] to_s _options ","  index_name _options "," IndexDefinition  new _name_options "," index_Array  wrap  "," index_ Array  "," index_ index_column_names  "," IndexDefinition  new _column_names "," validate_IndexDefinition  new _length! "," IndexDefinition  new _algorithm "]}," ActiveRecord ConnectionAdapters ColumnDefinition string_to_binary":{"type":"method","name":"string_to_binary","children":[],"call":[]}," ActiveRecord ConnectionAdapters Quoting type_cast":{"type":"method","name":"type_cast","children":[],"call":["YAML  dump ","value to_s "," quoted_date ","column type == ","column type ","value to_f ","value to_i ","value id ","value respond_to? "," raise ","value class "," _type_cast ","column cast_type type_cast_for_database ","column cast_type "," type_cast_from_column "," id_value_for_database ","value is_a? ","type serialize "," lookup_cast_type_from_column ","ActiveSupport Deprecation  warn ","value id_for_database ","value class name "," quoted_time "," unquoted_false "," unquoted_true ","value to_s  to_s ","column cast_type type_cast_for_database  to_s "," type_cast_from_column  to_s "," id_value_for_database  to_s ","type serialize  to_s ","value id_for_database  to_s ","column  lookup_cast_type_from_column  == ","column  lookup_cast_type_from_column  ","value to_s  to_f ","column cast_type type_cast_for_database  to_f "," type_cast_from_column  to_f "," id_value_for_database  to_f ","type serialize  to_f ","value id_for_database  to_f ","value to_s  to_i ","column cast_type type_cast_for_database  to_i "," type_cast_from_column  to_i "," id_value_for_database  to_i ","type serialize  to_i ","value id_for_database  to_i ","value to_s  id ","column cast_type type_cast_for_database  id "," type_cast_from_column  id "," id_value_for_database  id ","type serialize  id ","value id_for_database  id ","value to_s  respond_to? ","column cast_type type_cast_for_database  respond_to? "," type_cast_from_column  respond_to? "," id_value_for_database  respond_to? ","type serialize  respond_to? ","value id_for_database  respond_to? ","value to_s  class ","column cast_type type_cast_for_database  class "," type_cast_from_column  class "," id_value_for_database  class ","type serialize  class ","value id_for_database  class "," _ lookup_cast_type_from_column _cast ","column cast_ lookup_cast_type_from_column   lookup_cast_type_from_column _cast_for_database ","column cast_ lookup_cast_type_from_column  ","  lookup_cast_type_from_column _cast_from_column "," id_value to_s _for_database "," id_column cast_type type_cast_for_database _for_database "," id_ type_cast_from_column _for_database "," id_ id_value_for_database _for_database "," id_type serialize _for_database "," id_value id_for_database _for_database ","value to_s  is_a? ","column cast_type type_cast_for_database  is_a? "," type_cast_from_column  is_a? "," id_value_for_database  is_a? ","type serialize  is_a? ","value id_for_database  is_a? "," lookup_cast_type_from_column  serialize "," lookup_cast_ lookup_cast_type_from_column _from_column ","value to_s  id_for_database ","column cast_type type_cast_for_database  id_for_database "," type_cast_from_column  id_for_database "," id_value_for_database  id_for_database ","type serialize  id_for_database ","value id_for_database  id_for_database ","value to_s  class name ","column cast_type type_cast_for_database  class name "," type_cast_from_column  class name "," id_value_for_database  class name ","type serialize  class name ","value id_for_database  class name "]}," ActiveRecord ConnectionAdapters QueryCache disable_query_cache!":{"type":"method","name":"disable_query_cache!","children":[],"call":[" clear_query_cache "]}," ActiveRecord ConnectionAdapters QueryCache enable_query_cache!":{"type":"method","name":"enable_query_cache!","children":[],"call":[]}," ActiveRecord ConnectionAdapters DatabaseStatements last_inserted_id":{"type":"method","name":"last_inserted_id","children":[],"call":["row first ","result rows first ","result rows "," single_value_from_rows ","result rows first  first ","result result rows first s first ","result result rows first s "," single_value_from_result rows first s "]}," ActiveRecord ConnectionAdapters DatabaseStatements sql_for_insert":{"type":"method","name":"sql_for_insert","children":[],"call":[]}," ActiveRecord ConnectionAdapters DatabaseStatements join_to_update":{"type":"method","name":"join_to_update","children":[],"call":["update where ","update key in ","update key ","subselect projections= ","select clone ","key in "," subquery_for ","update update key  in ","update update key  ","select clone  projections= "," subquery_for  projections= ","update key  in "]}," ActiveRecord ConnectionAdapters DatabaseStatements supports_statement_cache?":{"type":"method","name":"supports_statement_cache?","children":[],"call":[]}," ActiveRecord ConnectionAdapters DatabaseStatements exec_update":{"type":"method","name":"exec_update","children":[],"call":[" exec_query "," internal_exec_query "]}," ActiveRecord ConnectionAdapters DatabaseStatements exec_delete":{"type":"method","name":"exec_delete","children":[],"call":[" exec_query "," internal_exec_query "]}," ActiveRecord ConnectionAdapters DatabaseStatements exec_insert":{"type":"method","name":"exec_insert","children":[],"call":[" exec_query "," sql_for_insert "," internal_exec_query "]}," ActiveRecord ConnectionAdapters DatabaseStatements exec_query":{"type":"method","name":"exec_query","children":[],"call":[" raise "," internal_exec_query "]}," ActiveRecord ConnectionAdapters DatabaseStatements to_sql":{"type":"method","name":"to_sql","children":[],"call":[" visitor accept ","arel ast "," visitor ","arel respond_to? "," quote ","binds shift reverse ","binds shift ","binds dup ","collected compile "," collector ","arel dup freeze ","arel dup ","collected compile freeze "," to_sql_and_binds ","binds dup  shift reverse ","binds dup  shift ","binds dup  dup "," visitor accept  compile "," visitor accept  compile freeze "," to_sql_and_binds dup  "]}," ActiveRecord Base connection_config":{"type":"method","name":"connection_config","children":[],"call":[" connection_pool spec config "," connection_pool spec "," connection_pool "]}," ActiveRecord ConnectionAdapters ConnectionManagement Proxy close":{"type":"method","name":"close","children":[],"call":["ActiveRecord Base  clear_active_connections! "," testing "," body close "," body "," body respond_to? "]}," ActiveRecord ConnectionAdapters ConnectionManagement Proxy each":{"type":"method","name":"each","children":[],"call":[" body each "," body "]}," ActiveRecord ConnectionAdapters ConnectionManagement Proxy respond_to?":{"type":"method","name":"respond_to?","children":[],"call":["@body respond_to? "]}," ActiveRecord ConnectionAdapters ConnectionManagement Proxy method_missing":{"type":"method","name":"method_missing","children":[],"call":["@body send "]}," ActiveRecord ConnectionAdapters ConnectionManagement Proxy initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters ConnectionHandler active_connections?":{"type":"method","name":"active_connections?","children":[],"call":["pool active_connection? "," connection_pools values any? "," connection_pools values "," connection_pools "," connection_pool_list any? "," connection_pool_list "," each_connection_pool any? "," each_connection_pool ","ActiveRecord Base  current_role "," deprecation_for_pool_handling "," __method__ ","role nil? ","ActiveRecord Base  current_ActiveRecord Base  current_role  ","ActiveRecord Base  current_role  nil? "]}," ActiveRecord ConnectionAdapters ConnectionPool active_connection?":{"type":"method","name":"active_connection?","children":[],"call":["@reserved_connections key? "," current_connection_id "," active_connections any? "," active_connections ","(send\n  (ivar :@reserved_connections) :fetch\n  (send nil :current_connection_id)) in_use? ","@reserved_connections fetch "," synchronize ","@thread_cached_conns [] "," connection_cache_key ","Thread  current "," current_thread "]}," ActiveRecord ConnectionAdapters ConnectionPool clear_table_cache!":{"type":"method","name":"clear_table_cache!","children":[],"call":["@primary_keys delete ","@column_defaults delete ","@columns_hash delete ","@columns delete "]}," ActiveRecord ConnectionAdapters ConnectionPool clear_cache!":{"type":"method","name":"clear_cache!","children":[],"call":["@tables clear ","@column_defaults clear ","@columns_hash clear ","@columns clear ","c schema_cache clear! ","c schema_cache "," with_connection "]}," ActiveRecord ConnectionAdapters ConnectionPool table_exists?":{"type":"method","name":"table_exists?","children":[],"call":["@tables key? ","@tables []= ","conn table_exists? ","@tables key? ! ","conn tables each ","conn tables "," with_connection "]}," ActiveRecord Coders YAMLColumn load":{"type":"method","name":"load","children":[],"call":[" object_class new "," object_class "," object_class != "," raise ","obj class ","obj nil? ","obj is_a? ","YAML  load ","yaml =~ ","yaml is_a? ","yaml nil? "," assert_valid_value ","(str \"^---\") match? "," yaml_load ","yaml start_with? "," YAML  load ect_class new ","  yaml_load ect_class new "," YAML  load ect_class ","  yaml_load ect_class "," YAML  load ect_class != ","  yaml_load ect_class != ","YAML  load  class "," yaml_load  class ","YAML  load  nil? "," yaml_load  nil? ","YAML  load  is_a? "," yaml_load  is_a? "]}," ActiveRecord Coders YAMLColumn dump":{"type":"method","name":"dump","children":[],"call":["YAML  dump "," raise ","obj inspect ","obj class "," object_class ","obj is_a? ","obj nil? "," assert_valid_value "]}," ActiveRecord Coders YAMLColumn initialize":{"type":"method","name":"initialize","children":[],"call":[" check_arity_of_constructor ","SafeCoder  new "]}," ActiveRecord Base clear_timestamp_attributes":{"type":"method","name":"clear_timestamp_attributes","children":[],"call":[" changed_attributes delete "," changed_attributes "," []= "," all_timestamp_attributes_in_model each "," all_timestamp_attributes_in_model "]}," ActiveRecord Base extract_max_param_for_multiparameter_attributes":{"type":"method","name":"extract_max_param_for_multiparameter_attributes","children":[],"call":["(send\n  (send\n    (lvar :values_hash_from_param) :keys) :max) min ","values_hash_from_param keys max ","values_hash_from_param keys "]}," ActiveRecord Base read_other_parameter_value":{"type":"method","name":"read_other_parameter_value","children":[],"call":["klass new ","values_hash_from_param [] "," raise ","values_hash_from_param has_key? ! ","values_hash_from_param has_key? ","(irange\n  (int 1)\n  (lvar :max_position)) collect "," extract_max_param_for_multiparameter_attributes ","(irange\n  (int 1)\n  (lvar : extract_max_param_for_multiparameter_attributes )) collect "]}," ActiveRecord Base read_date_parameter_value":{"type":"method","name":"read_date_parameter_value","children":[],"call":[" instantiate_time_object to_date "," instantiate_time_object ","Date  new ","values_hash_from_param [] ","values_hash_from_param [] blank? ","(irange\n  (int 1)\n  (int 3)) collect "]}," ActiveRecord Base read_time_parameter_value":{"type":"method","name":"read_time_parameter_value","children":[],"call":[" instantiate_time_object ","set_values []= ","set_values [] ","set_values [] blank? ","(int 1) each_with_index ","values_hash_from_param [] ","(irange\n  (int 1)\n  (lvar :max_position)) collect "," extract_max_param_for_multiparameter_attributes "," raise ","values_hash_from_param has_key? ! ","values_hash_from_param has_key? ","(int 1) any? ","(irange\n  (int 1)\n  (lvar : extract_max_param_for_multiparameter_attributes )) collect "]}," ActiveRecord Base read_value_from_parameter":{"type":"method","name":"read_value_from_parameter","children":[],"call":[" read_other_parameter_value "," read_date_parameter_value ","klass == "," read_time_parameter_value ","v nil? ","values_hash_from_param values all? ","values_hash_from_param values ","(or\n  (send\n    (send\n      (self) :class) :reflect_on_aggregation\n    (send\n      (lvar :name) :to_sym))\n  (send nil :column_for_attribute\n    (lvar :name))) klass "," column_for_attribute "," class reflect_on_aggregation ","name to_sym "," class ","(or\n  (send\n    (send\n      (self) :class) :reflect_on_aggregation\n    (send\n      (lvar :name) :to_sym))\n  (send nil :column_for_attribute\n    (lvar :name))) klass  == ","(or\n  (send\n    (send\n      (self) :class) :reflect_on_aggregation\n    (send\n      (lvar :name) :to_sym))\n  (send nil :column_for_attribute\n    (lvar :name))) (or\n  (send\n    (send\n      (self) :class) :reflect_on_aggregation\n    (send\n      (lvar :name) :to_sym))\n  (send nil :column_for_attribute\n    (lvar :name))) klass  "]}," ActiveRecord Base set_serialized_attributes":{"type":"method","name":"set_serialized_attributes","children":[],"call":["@attributes []= ","coder load ","@attributes [] ","@attributes key? ","sattrs each "," class serialized_attributes "," class "," class serialized_attributes [] ","(send\n  (send\n    (ivar :@attributes) :keys) :&\n  (send\n    (send\n      (send\n        (self) :class) :serialized_attributes) :keys)) each ","@attributes keys & "," class serialized_attributes keys ","@attributes keys "," class serialized_attributes []  load "," class serialized_attributes  each "]}," ActiveRecord Base to_ary":{"type":"method","name":"to_ary","children":[],"call":[]}," ActiveRecord Base mass_assignment_role":{"type":"method","name":"mass_assignment_role","children":[],"call":[" mass_assignment_options [] "," mass_assignment_options "]}," ActiveRecord Base mass_assignment_options":{"type":"method","name":"mass_assignment_options","children":[],"call":[]}," ActiveRecord Base initialize_dup":{"type":"method","name":"initialize_dup","children":[],"call":[" clear_timestamp_attributes "," populate_with_current_scope_attributes "," ensure_proper_type ","@changed_attributes []= "," field_changed? ","@attributes [] "," attributes_from_column_definition each "," attributes_from_column_definition "," _run_after_initialize_callbacks "," respond_to? ","cloned_attributes delete "," class primary_key "," class ","other clone_attributes "," class column_defaults each "," class column_defaults "," _field_changed? "," class initialize_attributes ","other clone_attributes  delete "]}," ActiveRecord Base <=>":{"type":"method","name":"<=>","children":[],"call":[" to_key <=> ","other_object to_key "," to_key ","other_object is_a? "," class "]}," ActiveRecord Base assign_attributes":{"type":"method","name":"assign_attributes","children":[],"call":[" assign_multiparameter_attributes "," raise "," send "," respond_to? ","multi_parameter_attributes << ","k include? ","attributes each "," sanitize_for_mass_assignment "," mass_assignment_role ","options [] ","new_attributes stringify_keys "," assign_multiparameter_ sanitize_for_mass_assignment  "," assign_multiparameter_new_attributes stringify_keys  ","multi_parameter_ sanitize_for_mass_assignment  << ","multi_parameter_new_attributes stringify_keys  << "," sanitize_for_mass_assignment  each ","new_attributes stringify_keys  each ","new_ sanitize_for_mass_assignment  stringify_keys ","new_new_attributes stringify_keys  stringify_keys "]}," ActiveRecord Base encode_with":{"type":"method","name":"encode_with","children":[],"call":["coder []= "," attributes "]}," ActiveRecord Base evaluate_default_scope":{"type":"method","name":"evaluate_default_scope","children":[],"call":[" ignore_default_scope= "," ignore_default_scope? "]}," ActiveRecord Base ignore_default_scope=":{"type":"method","name":"ignore_default_scope=","children":[],"call":["Thread  current []= ","Thread  current "]}," ActiveRecord Base ignore_default_scope?":{"type":"method","name":"ignore_default_scope?","children":[],"call":["Thread  current [] ","Thread  current "]}," ActiveRecord Base build_default_scope":{"type":"method","name":"build_default_scope","children":[],"call":["default_scope merge ","scope call ","scope respond_to? ","scope is_a? ! ","scope is_a? ","default_scope apply_finder_options "," default_scopes inject "," relation "," default_scopes "," evaluate_default_scope "," default_scopes any? "," default_scope "," method owner != ","Base  singleton_class "," method owner "," method "," relation scoping "," apply_default_scope= "," apply_default_scope "]}," ActiveRecord Base current_scope=":{"type":"method","name":"current_scope=","children":[],"call":["Thread  current []= ","Thread  current "]}," ActiveRecord Base current_scope":{"type":"method","name":"current_scope","children":[],"call":["Thread  current [] ","Thread  current "]}," ActiveRecord Base symbolized_sti_name":{"type":"method","name":"symbolized_sti_name","children":[],"call":[" symbolized_base_class "," sti_name to_sym "," sti_name "," sti_name present? "]}," ActiveRecord Base symbolized_base_class":{"type":"method","name":"symbolized_base_class","children":[],"call":[" base_class to_s to_sym "," base_class to_s "," base_class "]}," ActiveRecord Base column_defaults":{"type":"method","name":"column_defaults","children":[],"call":[" connection_pool column_defaults [] "," table_name "," connection_pool column_defaults "," connection_pool "]}," ActiveRecord AutosaveAssociation AssociationBuilderExtension build":{"type":"method","name":"build","children":[],"call":[" model send "," model "," reflection "]}," ActiveRecord AutosaveAssociation AssociationBuilderExtension included":{"type":"method","name":"included","children":[],"call":[]}," ActiveRecord AttributeMethods ClassMethods undefine_attribute_methods":{"type":"method","name":"undefine_attribute_methods","children":[],"call":[" base_class undefine_attribute_methods "," base_class "," base_class == "," attribute_methods_generated? "," generated_attribute_methods synchronize "," generated_attribute_methods "]}," ActiveRecord AttributeMethods ClassMethods attribute_methods_generated?":{"type":"method","name":"attribute_methods_generated?","children":[],"call":[" base_class attribute_methods_generated? "," base_class "," base_class == "]}," ActiveRecord AttributeMethods Read ClassMethods cacheable_column?":{"type":"method","name":"cacheable_column?","children":[],"call":[" attribute_types_cached_by_default include? ","column type "," attribute_types_cached_by_default "," serialized_attributes include? ","column name "," serialized_attributes "," serialized_attributes include? ! "," attribute_types_cached_by_default == "]}," ActiveRecord AttributeMethods PrimaryKey ClassMethods primary_key=":{"type":"method","name":"primary_key=","children":[],"call":[" connection_pool primary_keys []= "," table_name "," connection_pool primary_keys "," connection_pool "," connected? ","value to_s ","value to_s -@ "," derive_primary_key "]}," ActiveRecord Associations association":{"type":"method","name":"association","children":[],"call":[" association_instance_set ","reflection association_class new ","reflection association_class "," class reflect_on_association "," class ","association nil? "," association_instance_get "," raise ","AssociationNotFoundError  new "," class _reflect_on_association "," reflection association_class new _instance_set ","  association_instance_get _instance_set ","reflection reflection association_class new _class new ","reflection  association_instance_get _class new "," class reflect_on_association  association_class new "," class _reflect_on_association  association_class new ","reflection reflection association_class new _class ","reflection  association_instance_get _class "," class reflect_on_association  association_class "," class _reflect_on_association  association_class "," class reflect_on_reflection association_class new  "," class reflect_on_ association_instance_get  ","reflection association_class new  nil? "," association_instance_get  nil? "," reflection association_class new _instance_get ","  association_instance_get _instance_get "," class _reflect_on_reflection association_class new  "," class _reflect_on_ association_instance_get  "]}," ActiveRecord HasManyThroughNestedAssociationsAreReadonly initialize":{"type":"method","name":"initialize","children":[],"call":["reflection name ","owner class name ","owner class "]}," ActiveRecord HasOneThroughCantAssociateThroughCollection initialize":{"type":"method","name":"initialize","children":[],"call":["through_reflection name ","reflection name "]}," ActiveRecord HasManyThroughAssociationPolymorphicThroughError initialize":{"type":"method","name":"initialize","children":[],"call":["reflection through_reflection name ","reflection through_reflection ","reflection name "]}," ActiveRecord HasManyThroughAssociationPolymorphicSourceError initialize":{"type":"method","name":"initialize","children":[],"call":["source_reflection name ","source_reflection class_name ","reflection name ","reflection name to_s classify ","reflection name to_s "]}," ActiveRecord Associations ThroughAssociation ensure_not_nested":{"type":"method","name":"ensure_not_nested","children":[],"call":[" raise ","HasManyThroughNestedAssociationsAreReadonly  new "," reflection "," owner "," reflection nested? ","HasOneThroughNestedAssociationsAreReadonly  new "," reflection has_one? "]}," ActiveRecord Associations ThroughAssociation foreign_key_present?":{"type":"method","name":"foreign_key_present?","children":[],"call":[" owner [] nil? ! "," owner [] nil? "," owner [] "," through_reflection foreign_key "," through_reflection "," owner "," through_reflection macro == "," through_reflection macro "," through_reflection belongs_to? "," Array all? "," Array "]}," ActiveRecord Associations ThroughAssociation stale_state":{"type":"method","name":"stale_state","children":[],"call":[" owner [] to_s "," owner [] "," through_reflection foreign_key "," through_reflection "," owner "," through_reflection macro == "," through_reflection macro "," through_reflection belongs_to? ","(send\n  (send nil :Array\n    (send\n      (send nil :through_reflection) :foreign_key)) :filter_map) presence "," Array filter_map "," Array "]}," ActiveRecord Associations ThroughAssociation construct_join_attributes":{"type":"method","name":"construct_join_attributes","children":[],"call":["Hash  [] ","v first ","join_attributes map ","records count == ","records count ","join_attributes []= ","record class base_class name ","record class base_class ","record class ","records map "," source_reflection foreign_type "," source_reflection "," options [] "," options ","record send "," source_reflection association_primary_key "," source_reflection foreign_key "," raise ","HasManyThroughCantAssociateThroughHasOneOrManyReflection  new "," reflection "," owner "," source_reflection macro != "," source_reflection macro "," reflection klass "," ensure_mutable "," source_reflection name "," source_reflection association_primary_key == "," reflection klass primary_key ","join_attributes transform_values! ","association_primary_key to_sym "," options [] ! ","association_primary_key == ","record _read_attribute "," Array == "," reflection klass composite_query_constraints_list "," Array "," source_reflection  source_reflection association_primary_key  "," source_reflection  source_reflection association_primary_key  == "," source_reflection association_primary_key  to_sym "," source_reflection association_primary_key  == "]}," ActiveRecord Associations ThroughAssociation target_scope":{"type":"method","name":"target_scope","children":[],"call":["scope merge ","reflection klass scoped with_default_scope except ","reflection klass scoped with_default_scope ","reflection klass scoped ","reflection klass "," chain [] each "," chain [] "," chain ","scope merge! ","reflection klass all with_default_scope except ","reflection klass all with_default_scope ","reflection klass all ","reflection klass all except "," chain drop each "," chain drop ","relation except ","relation merge! ","reflection_scope arity zero? ","reflection_scope arity ","reflection scope "," reflection chain drop each "," reflection chain drop "," reflection chain "," reflection ","relation merge ","reflection klass scope_for_association ","scope merge  merge ","reflection klass scope merge d with_default_scope merge  except ","reflection klass scope merge d with_default_scope merge  ","reflection klass scope merge d ","scope merge  merge! ","reflection klass all with_default_scope merge  except ","reflection klass all with_default_scope merge  ","reflection klass all  except ","relation merge  except ","reflection klass scope_for_association  except ","reflection klass all  merge! ","relation merge  merge! ","reflection klass scope_for_association  merge! ","reflection_scope merge  arity zero? ","reflection scope  arity zero? ","reflection_scope merge  arity ","reflection scope  arity ","reflection scope merge  ","reflection klass all  merge ","relation merge  merge ","reflection klass scope_for_association  merge ","reflection klass scope merge _for_association "]}," ActiveRecord Associations SingularAssociation create_record":{"type":"method","name":"create_record","children":[],"call":[" raise ","RecordInvalid  new ","saved ! "," set_new_record ","record save "," block_given? "," build_record ","record save  ! "," set_new_ build_record  "," build_record  save "," build_ build_record  "]}," ActiveRecord Associations SingularAssociation set_new_record":{"type":"method","name":"set_new_record","children":[],"call":[" replace "]}," ActiveRecord Associations SingularAssociation replace":{"type":"method","name":"replace","children":[],"call":[" raise "]}," ActiveRecord Associations SingularAssociation find_target":{"type":"method","name":"find_target","children":[],"call":[" set_inverse_instance "," scoped first tap "," scoped first "," scoped "," scope first tap "," scope first "," scope "," scope take tap "," scope take "," get_records first "," get_records ","(send\n  (lvar :sc) :execute\n  (lvar :binds)\n  (send nil :klass)\n  (lvar :conn)) first ","sc execute "," klass ","AssociationScope  get_bind_values "," reflection chain "," reflection "," owner "," target_scope merge limit "," target_scope merge ","as scope "," target_scope ","params bind ","AssociationScope  create ","StatementCache  create "," reflection association_scope_cache "," klass connection "," skip_statement_cache? ","(send\n  (lvar :sc) :execute\n  (lvar :binds)\n  (lvar :conn)) first "," target_scope merge! limit "," target_scope merge! ","scope take "," first "," disable_joins ","  scope d first tap ","  scope d first ","  scope d ","  scope  first tap ","  scope  first ","  scope  ","  scope  take tap ","  scope  take "," get_ scope take s first "," get_ scope first s first "," get_ get_records first s first "," get_ scope take s "," get_ scope first s "," get_ get_records first s ","(send\n  (lvar :sc) :execute\n  (lvar :AssociationScope  get_bind_values )\n  (send nil :klass)\n  (lvar :conn)) first ","(send\n  (lvar :sc) :execute\n  (lvar :binds)\n  (send nil :klass)\n  (lvar : klass connection )) first "," target_ scope  merge limit "," target_ scope  merge ","as  scope  "," target_ scope  "," reflection association_ scope _cache "," klass  klass connection ection ","(send\n  (lvar :sc) :execute\n  (lvar :AssociationScope  get_bind_values )\n  (lvar :conn)) first ","(send\n  (lvar :sc) :execute\n  (lvar :binds)\n  (lvar : klass connection )) first "," target_ scope  merge! limit "," target_ scope  merge! "," scope  take "]}," ActiveRecord Associations SingularAssociation create_scope":{"type":"method","name":"create_scope","children":[],"call":[" scoped scope_for_create stringify_keys except "," klass primary_key "," klass "," scoped scope_for_create stringify_keys "," scoped scope_for_create "," scoped "," scope scope_for_create stringify_keys except "," scope scope_for_create stringify_keys "," scope scope_for_create "," scope "]}," ActiveRecord Associations SingularAssociation build":{"type":"method","name":"build","children":[],"call":[" set_new_record "," block_given? "," build_record "," new_record ","record assign_attributes "," create_scope except ","record changed "," create_scope "," reflection build_association "," reflection "," set_new_ build_record  "," set_new_ reflection build_association  "," build_ build_record  "," build_ reflection build_association  "," new_ build_record  "," new_ reflection build_association  "," build_record  assign_attributes "," reflection build_association  assign_attributes "," build_record  changed "," reflection build_association  changed "]}," ActiveRecord Associations SingularAssociation create!":{"type":"method","name":"create!","children":[],"call":[" create_record ","record save! "," build tap "," build "," _create_record "]}," ActiveRecord Associations SingularAssociation create":{"type":"method","name":"create","children":[],"call":[" create_record "," new_record ","record save "," build tap "," build "," _create_record "]}," ActiveRecord Associations SingularAssociation writer":{"type":"method","name":"writer","children":[],"call":[" replace "]}," ActiveRecord Associations SingularAssociation reader":{"type":"method","name":"reader","children":[],"call":[" target "," reload "," stale_target? "," loaded? ! "," loaded? "," klass uncached "," klass ","ActiveSupport Deprecation  warn ","(str \"            Passing an argument to force an association to reload is now\\n\") squish "," reflection name "," reflection "," ensure_klass_exists! "]}," ActiveRecord Associations Preloader preloader_for":{"type":"method","name":"preloader_for","children":[],"call":["reflection options [] ","reflection options ","reflection macro ","owners first association loaded? ","owners first association ","reflection name ","owners first ","reflection check_preloadable! ","o association loaded? ","o association ","owners all? "]}," ActiveRecord Associations Preloader association_klass":{"type":"method","name":"association_klass","children":[],"call":["reflection klass ","klass constantize ","record send ","reflection foreign_type ","reflection options [] ","reflection options ","reflection macro == ","reflection macro ","record read_attribute ","reflection foreign_type to_s ","reflection record send  ","reflection record read_attribute  ","record send  constantize ","record read_attribute  constantize "]}," ActiveRecord Associations Preloader records_by_reflection":{"type":"method","name":"records_by_reflection","children":[],"call":[" raise ","record class reflections [] ","record class reflections ","record class "," records group_by "," records ","record_class name ","record_class reflections [] ","record_class reflections "," raise_config_error ","record class reflect_on_association ","records group_by ","record class record class reflections [] s [] ","record class record_class reflections [] s [] ","record class record class reflect_on_association s [] ","record class record class reflections [] s ","record class record_class reflections [] s ","record class record class reflect_on_association s ","record class  name ","record_class record class reflections [] s [] ","record_class record_class reflections [] s [] ","record_class record class reflect_on_association s [] ","record class  reflections [] ","record_class record class reflections [] s ","record_class record_class reflections [] s ","record_class record class reflect_on_association s ","record class  reflections "]}," ActiveRecord Associations Preloader grouped_records":{"type":"method","name":"grouped_records","children":[],"call":["Hash  [] "," association_klass ","records group_by "," records_by_reflection map "," records_by_reflection ","(or-asgn\n  (send\n    (lvar :klasses) :[]\n    (send\n      (lvar :assoc) :klass))\n  (array)) << ","klasses [] ","assoc klass ","h [] ","assoc reflection ","record association "," records each "," records ","h []= ","r_records group_by ","reflection_records each_with_object ","records each ","(or-asgn\n  (send\n    (lvar :h) :[]\n    (lvar :reflection))\n  (array)) << ","record association klass ! ","record association klass ","reflection ! ","record class _reflect_on_association ","record class "," record association iation_klass "," records_by_record class _reflect_on_association  map "," records_by_record class _reflect_on_association  ","(or-asgn\n  (send\n    (lvar :klasses) :[]\n    (send\n      (lvar :record association ) :klass))\n  (array)) << ","record association  klass ","record association  reflection ","assoc record class _reflect_on_association  ","record record association iation "," records_by_reflection  each_with_object ","record class _reflect_on_association _records each_with_object ","(or-asgn\n  (send\n    (lvar :h) :[]\n    (lvar :record class _reflect_on_association ))\n  (array)) << ","record record association iation klass ! ","record record association iation klass ","record class _reflect_on_association  ! ","record class _reflect_on_record association iation "]}," ActiveRecord Associations Preloader preload_one":{"type":"method","name":"preload_one","children":[],"call":[" preloader_for new run "," preloader_for new "," options "," preloader_for ","klasses each "," grouped_records each "," grouped_records "," preload_scope "]}," ActiveRecord Associations Preloader preload_hash":{"type":"method","name":"preload_hash","children":[],"call":["Preloader  new run ","Preloader  new ","(send\n  (send nil :records) :map) flatten ","record send "," records map "," records "," options ","association each "," preload_scope "]}," ActiveRecord Associations Preloader preload":{"type":"method","name":"preload","children":[],"call":[" raise ","association inspect "," preload_one ","association to_sym "," preload_hash "," preloaders_on ","associations flat_map ","records empty? ","Array  wrap ","Array  wrap compact uniq ","Array  wrap compact ","Array  wrap flat_map ","records uniq! ","records compact ","Preloader  new call ","Preloader  new ","ActiveSupport Deprecation  warn ","Array  wrap  flat_map ","Array  wrap compact uniq  empty? ","Array  wrap compact  empty? ","records compact  empty? ","Array  wrap compact uniq  uniq! ","Array  wrap compact  uniq! ","records compact  uniq! ","Array  wrap compact uniq  compact ","Array  wrap compact  compact ","records compact  compact "]}," ActiveRecord Associations Preloader run":{"type":"method","name":"run","children":[],"call":[" preload "," associations each "," associations "," records empty? "," records "]}," ActiveRecord Associations Preloader initialize":{"type":"method","name":"initialize","children":[],"call":["Array  wrap ","Array  wrap compact uniq ","Array  wrap compact ","Relation  new ","@tree preloaded_records= ","Branch  new "," records "," associations ","kwargs [] ","ActiveSupport Deprecation  warn ","kwargs empty? ","Branch  new  preloaded_records= "]}," ActiveRecord Associations Preloader ThroughAssociation through_options":{"type":"method","name":"through_options","children":[],"call":["through_options []= "," options [] "," options "," reflection foreign_type "," reflection "," options has_key? "]}," ActiveRecord Associations Preloader ThroughAssociation through_records_by_owner":{"type":"method","name":"through_records_by_owner","children":[],"call":["Hash  [] ","owner association reset ","owner association "," through_reflection name "," through_reflection "," through_reflection collection? "," reflection options [] "," reflection options "," reflection ","Array  wrap ","owner send "," owners map "," owners ","ActiveRecord Associations Preloader  new run ","ActiveRecord Associations Preloader  new "," through_options "," preload_options != "," preload_options "," through_scope != "," through_reflection klass unscoped "," through_reflection klass "," through_scope ","Preloader  new run ","Preloader  new "," through_preloaders map reduce "," through_preloaders map "," through_preloaders "]}," ActiveRecord Associations Preloader ThroughAssociation associated_records_by_owner":{"type":"method","name":"associated_records_by_owner","children":[],"call":["records compact! ","(send\n  (lvar :records) :map!) flatten! ","r send "," source_reflection name "," source_reflection ","records map! ","through_records each ","ActiveRecord Associations Preloader  new run ","ActiveRecord Associations Preloader  new "," options ","through_records values flatten ","through_records values "," through_records_by_owner ","Preloader  new run ","Preloader  new "," reflection_scope ","records_by_owner []= ","record_offset [] ","rhs_records sort_by ","(send\n  (lvar :middles) :flat_map) compact ","association reader ","r association ","middles flat_map ","pl_to_middle flat_map ","middle_to_pl [] ","center group_by ","through_records each_with_object ","record_offset []= ","@preloaded_records each_with_index ","h []= ","pl owners each ","pl owners ","preloaders each_with_object ","preloaders flat_map ","preloader preload ","(send\n  (lvar :through_records) :map) flatten ","through_records map "," reset_association "," through_reflection name "," through_reflection "," owners "," Array ","owner association "," owners map "," through_scope ","through_records flat_map ","@id_map [] "," id_to_index_map "," reflection_scope values [] present? "," reflection_scope values [] "," reflection_scope values "," target_records_from_association "," through_records_by_owner  each "," through_records_by_owner  values flatten "," through_records_by_owner  values ","  through_records_by_owner _by_owner ","(send\n  (lvar :middles) :flat_map) compact  sort_by ","r association  reader ","owner association  reader ","r r association  ","r owner association  "," target_records_from_association  group_by "," through_records_by_owner  each_with_object ","preloaders flat_map  each_with_index ","preloader preload  each_with_object ","preloader preload  flat_map ","(send\n  (lvar : through_records_by_owner ) :map) flatten "," through_records_by_owner  map "," reset_r association  "," reset_owner association  ","owner r association  ","owner owner association  "," through_records_by_owner  flat_map "," target_records_from_r association  "," target_records_from_owner association  "]}," ActiveRecord Associations Preloader ThroughAssociation source_reflection":{"type":"method","name":"source_reflection","children":[],"call":[" reflection source_reflection "," reflection "]}," ActiveRecord Associations Preloader ThroughAssociation through_reflection":{"type":"method","name":"through_reflection","children":[],"call":[" reflection through_reflection "," reflection "]}," ActiveRecord Associations Preloader SingularAssociation preload":{"type":"method","name":"preload","children":[],"call":["association set_inverse_instance ","association target= ","owner association "," reflection name "," reflection ","associated_records first "," associated_records_by_owner each "," associated_records_by_owner ","owner association  set_inverse_instance ","owner association  target= ","owner owner association  ","associated_associated_records first s first "," associated_associated_records first s_by_owner each "," associated_associated_records first s_by_owner "]}," ActiveRecord Associations Preloader HasOne build_scope":{"type":"method","name":"build_scope","children":[],"call":[" order "," options [] "," options "," preload_options [] "," preload_options "," reflection_scope values [] "," reflection_scope values "," reflection_scope "," preload_scope values [] "," preload_scope values "," preload_scope "]}," ActiveRecord Associations Preloader HasOne owner_key_name":{"type":"method","name":"owner_key_name","children":[],"call":[" reflection active_record_primary_key "," reflection "]}," ActiveRecord Associations Preloader HasOne association_key_name":{"type":"method","name":"association_key_name","children":[],"call":[" reflection foreign_key "," reflection "]}," ActiveRecord Associations Preloader HasManyThrough associated_records_by_owner":{"type":"method","name":"associated_records_by_owner","children":[],"call":["records uniq! "," options [] "," options "," each ","records_by_owner each_value "," reflection_scope distinct_value "," reflection_scope "," reflection_scope uniq_value "]}," ActiveRecord Associations Preloader HasMany owner_key_name":{"type":"method","name":"owner_key_name","children":[],"call":[" reflection active_record_primary_key "," reflection "]}," ActiveRecord Associations Preloader HasMany association_key_name":{"type":"method","name":"association_key_name","children":[],"call":[" reflection foreign_key "," reflection "]}," ActiveRecord Associations Preloader HasAndBelongsToMany join":{"type":"method","name":"join","children":[],"call":[" table create_join "," table create_on "," table "," join_table "," table [] eq "," join_table [] "," reflection association_foreign_key "," reflection "," table [] "," reflection association_primary_key "]}," ActiveRecord Associations Preloader HasAndBelongsToMany join_select":{"type":"method","name":"join_select","children":[],"call":[" association_key as ","Arel  sql "," association_key_name "," association_key "]}," ActiveRecord Associations Preloader HasAndBelongsToMany build_scope":{"type":"method","name":"build_scope","children":[],"call":[" joins select "," join_select "," joins "," join "]}," ActiveRecord Associations Preloader HasAndBelongsToMany associated_records_by_owner":{"type":"method","name":"associated_records_by_owner","children":[],"call":[" klass instantiate "," klass ","records [] ","row [] "," klass primary_key ","rows map! "," each "," each_value "]}," ActiveRecord Associations Preloader HasAndBelongsToMany association_key":{"type":"method","name":"association_key","children":[],"call":[" join_table [] "," reflection foreign_key "," reflection "," join_table "]}," ActiveRecord Associations Preloader HasAndBelongsToMany association_key_name":{"type":"method","name":"association_key_name","children":[],"call":[]}," ActiveRecord Associations Preloader HasAndBelongsToMany owner_key_name":{"type":"method","name":"owner_key_name","children":[],"call":[" reflection active_record_primary_key "," reflection "]}," ActiveRecord Associations Preloader HasAndBelongsToMany records_for":{"type":"method","name":"records_for","children":[],"call":[" klass connection select_all ","scope bind_values ","scope arel "," klass connection "," klass ","scope arel to_sql "]}," ActiveRecord Associations Preloader HasAndBelongsToMany initialize":{"type":"method","name":"initialize","children":[],"call":["Arel Table  new alias ","Arel Table  new "," options [] "," options ","reflection join_table "]}," ActiveRecord Associations Preloader CollectionAssociation preload":{"type":"method","name":"preload","children":[],"call":["association set_inverse_instance ","records each ","association target concat ","association target ","association loaded! ","owner association "," reflection name "," reflection "," associated_records_by_owner each "," associated_records_by_owner ","owner association  set_inverse_instance ","owner association  target concat ","owner association  target ","owner association  loaded! ","owner owner association  "]}," ActiveRecord Associations Preloader CollectionAssociation build_scope":{"type":"method","name":"build_scope","children":[],"call":[" order "," options [] "," options "," preload_options [] "," preload_options "," reflection_scope values [] "," reflection_scope values "," reflection_scope "," preload_scope values [] "," preload_scope values "," preload_scope "]}," ActiveRecord Associations Preloader BelongsTo owner_key_name":{"type":"method","name":"owner_key_name","children":[],"call":[" reflection foreign_key "," reflection "]}," ActiveRecord Associations Preloader BelongsTo association_key_name":{"type":"method","name":"association_key_name","children":[],"call":[" klass primary_key "," klass "," reflection options [] "," reflection options "," reflection "]}," ActiveRecord Associations Preloader Association process_conditions":{"type":"method","name":"process_conditions","children":[],"call":[" klass send "," klass ","conditions respond_to? ","conditions is_a? ! ","conditions is_a? "," klass send  respond_to? "," klass send  is_a? ! "," klass send  is_a? "]}," ActiveRecord Associations Preloader Association build_scope":{"type":"method","name":"build_scope","children":[],"call":["scope where "," model base_class sti_name "," model base_class "," model "," reflection type "," reflection "," klass table_name "," klass "," options [] "," options ","scope includes "," preload_options [] "," preload_options ","scope select "," table [] ","Arel  star "," table "," process_conditions "," klass scoped ","scope default_scoped= "," klass unscoped ","scope where! ","scope includes! ","values [] ","preload_values [] ","scope select! ","scope references_values= "," Array + "," Array ","scope where_values= "," preload_scope values "," preload_scope "," reflection_scope values "," reflection_scope ","scope _select! "," klass default_scoped merge "," klass default_scoped ","scope order! ","values key? ","preload_values key? ","scope unscope_values= ","scope readonly! ","scope joins! ","scope bind_values= ","reflection_binds + "," preload_scope bind_values "," reflection_scope bind_values ","scope reordering_value= "," reflection_scope joins_values "," preload_scope joins_values "," preload_scope joins_values any? ","scope where_clause= "," reflection_scope where_clause + "," preload_scope where_clause "," reflection_scope where_clause "," klass scope_for_association merge "," klass scope_for_association ","scope merge! "," preload_scope != "," reflection scope "," model polymorphic_name "," reflection through_reflection? ! "," reflection through_reflection? "," reflection_scope empty_scope? ","scope strict_loading "," preload_scope strict_loading_value "," preload_scope empty_scope? ! "," preload_scope empty_scope? "," cascade_strict_loading ","scope where  where ","scope includes  where ","scope select  where "," klass scoped  where "," klass unscoped  where "," klass scope_for_association  where ","scope where  includes ","scope includes  includes ","scope select  includes "," klass scoped  includes "," klass unscoped  includes "," klass scope_for_association  includes ","scope where  select ","scope includes  select ","scope select  select "," klass scoped  select "," klass unscoped  select "," klass scope_for_association  select "," klass scope where d "," klass scope includes d "," klass scope select d "," klass  klass scoped d "," klass  klass unscoped d "," klass  klass scope_for_association d ","scope where  default_scope where d= ","scope includes  default_scope includes d= ","scope select  default_scope select d= "," klass scoped  default_ klass scoped d= "," klass unscoped  default_ klass unscoped d= "," klass scope_for_association  default_ klass scope_for_association d= "," klass unscope where d "," klass unscope includes d "," klass unscope select d "," klass un klass scoped d "," klass un klass unscoped d "," klass un klass scope_for_association d ","scope where  where! ","scope includes  where! ","scope select  where! "," klass scoped  where! "," klass unscoped  where! "," klass scope_for_association  where! ","scope where  includes! ","scope includes  includes! ","scope select  includes! "," klass scoped  includes! "," klass unscoped  includes! "," klass scope_for_association  includes! "," reflection_scope values  [] "," preload_scope values  [] ","preload_ reflection_scope values  [] ","scope where  select! ","scope includes  select! ","scope select  select! "," klass scoped  select! "," klass unscoped  select! "," klass scope_for_association  select! ","scope where  references_values= ","scope includes  references_values= ","scope select  references_values= "," klass scoped  references_values= "," klass unscoped  references_values= "," klass scope_for_association  references_values= ","scope references_ reflection_scope values = ","scope where  where_values= ","scope includes  where_values= ","scope select  where_values= "," klass scoped  where_values= "," klass unscoped  where_values= "," klass scope_for_association  where_values= ","scope where_ reflection_scope values = "," preload_scope where  values "," preload_scope includes  values "," preload_scope select  values "," preload_ klass scoped  values "," preload_ klass unscoped  values "," preload_ klass scope_for_association  values "," preload_scope  reflection_scope values  "," preload_scope where  "," preload_scope includes  "," preload_scope select  "," preload_ klass scoped  "," preload_ klass unscoped  "," preload_ klass scope_for_association  "," reflection_scope where  values "," reflection_scope includes  values "," reflection_scope select  values "," reflection_ klass scoped  values "," reflection_ klass unscoped  values "," reflection_ klass scope_for_association  values "," reflection_scope  reflection_scope values  "," reflection_scope where  "," reflection_scope includes  "," reflection_scope select  "," reflection_ klass scoped  "," reflection_ klass unscoped  "," reflection_ klass scope_for_association  ","scope where  _select! ","scope includes  _select! ","scope select  _select! "," klass scoped  _select! "," klass unscoped  _select! "," klass scope_for_association  _select! "," klass default_scope where d merge "," klass default_scope includes d merge "," klass default_scope select d merge "," klass default_ klass scoped d merge "," klass default_ klass unscoped d merge "," klass default_ klass scope_for_association d merge "," klass default_scope where d "," klass default_scope includes d "," klass default_scope select d "," klass default_ klass scoped d "," klass default_ klass unscoped d "," klass default_ klass scope_for_association d ","scope where  order! ","scope includes  order! ","scope select  order! "," klass scoped  order! "," klass unscoped  order! "," klass scope_for_association  order! "," reflection_scope values  key? "," preload_scope values  key? ","preload_ reflection_scope values  key? ","scope where  unscope where _values= ","scope includes  unscope includes _values= ","scope select  unscope select _values= "," klass scoped  un klass scoped _values= "," klass unscoped  un klass unscoped _values= "," klass scope_for_association  un klass scope_for_association _values= ","scope unscope_ reflection_scope values = ","scope where  readonly! ","scope includes  readonly! ","scope select  readonly! "," klass scoped  readonly! "," klass unscoped  readonly! "," klass scope_for_association  readonly! ","scope where  joins! ","scope includes  joins! ","scope select  joins! "," klass scoped  joins! "," klass unscoped  joins! "," klass scope_for_association  joins! ","scope where  bind_values= ","scope includes  bind_values= ","scope select  bind_values= "," klass scoped  bind_values= "," klass unscoped  bind_values= "," klass scope_for_association  bind_values= ","scope bind_ reflection_scope values = "," reflection_scope bind_values  + "," preload_scope where  bind_values "," preload_scope includes  bind_values "," preload_scope select  bind_values "," preload_ klass scoped  bind_values "," preload_ klass unscoped  bind_values "," preload_ klass scope_for_association  bind_values "," preload_scope bind_ reflection_scope values  "," reflection_scope where  bind_values "," reflection_scope includes  bind_values "," reflection_scope select  bind_values "," reflection_ klass scoped  bind_values "," reflection_ klass unscoped  bind_values "," reflection_ klass scope_for_association  bind_values "," reflection_scope bind_ reflection_scope values  ","scope where  reordering_value= ","scope includes  reordering_value= ","scope select  reordering_value= "," klass scoped  reordering_value= "," klass unscoped  reordering_value= "," klass scope_for_association  reordering_value= "," reflection_scope where  joins_values "," reflection_scope includes  joins_values "," reflection_scope select  joins_values "," reflection_ klass scoped  joins_values "," reflection_ klass unscoped  joins_values "," reflection_ klass scope_for_association  joins_values "," reflection_scope joins_ reflection_scope values  "," preload_scope where  joins_values "," preload_scope includes  joins_values "," preload_scope select  joins_values "," preload_ klass scoped  joins_values "," preload_ klass unscoped  joins_values "," preload_ klass scope_for_association  joins_values "," preload_scope joins_ reflection_scope values  "," preload_scope where  joins_values any? "," preload_scope includes  joins_values any? "," preload_scope select  joins_values any? "," preload_ klass scoped  joins_values any? "," preload_ klass unscoped  joins_values any? "," preload_ klass scope_for_association  joins_values any? "," preload_scope joins_ reflection_scope values  any? ","scope where  where_clause= ","scope includes  where_clause= ","scope select  where_clause= "," klass scoped  where_clause= "," klass unscoped  where_clause= "," klass scope_for_association  where_clause= "," reflection_scope where  where_clause + "," reflection_scope includes  where_clause + "," reflection_scope select  where_clause + "," reflection_ klass scoped  where_clause + "," reflection_ klass unscoped  where_clause + "," reflection_ klass scope_for_association  where_clause + "," preload_scope where  where_clause "," preload_scope includes  where_clause "," preload_scope select  where_clause "," preload_ klass scoped  where_clause "," preload_ klass unscoped  where_clause "," preload_ klass scope_for_association  where_clause "," reflection_scope where  where_clause "," reflection_scope includes  where_clause "," reflection_scope select  where_clause "," reflection_ klass scoped  where_clause "," reflection_ klass unscoped  where_clause "," reflection_ klass scope_for_association  where_clause "," klass scope where _for_association merge "," klass scope includes _for_association merge "," klass scope select _for_association merge "," klass  klass scoped _for_association merge "," klass  klass unscoped _for_association merge "," klass  klass scope_for_association _for_association merge "," klass scope where _for_association "," klass scope includes _for_association "," klass scope select _for_association "," klass  klass scoped _for_association "," klass  klass unscoped _for_association "," klass  klass scope_for_association _for_association ","scope where  merge! ","scope includes  merge! ","scope select  merge! "," klass scoped  merge! "," klass unscoped  merge! "," klass scope_for_association  merge! "," preload_scope where  != "," preload_scope includes  != "," preload_scope select  != "," preload_ klass scoped  != "," preload_ klass unscoped  != "," preload_ klass scope_for_association  != "," reflection scope where  "," reflection scope includes  "," reflection scope select  "," reflection  klass scoped  "," reflection  klass unscoped  "," reflection  klass scope_for_association  "," reflection_scope where  empty_scope where ? "," reflection_scope includes  empty_scope includes ? "," reflection_scope select  empty_scope select ? "," reflection_ klass scoped  empty_ klass scoped ? "," reflection_ klass unscoped  empty_ klass unscoped ? "," reflection_ klass scope_for_association  empty_ klass scope_for_association ? ","scope where  strict_loading ","scope includes  strict_loading ","scope select  strict_loading "," klass scoped  strict_loading "," klass unscoped  strict_loading "," klass scope_for_association  strict_loading "," preload_scope where  strict_loading_value "," preload_scope includes  strict_loading_value "," preload_scope select  strict_loading_value "," preload_ klass scoped  strict_loading_value "," preload_ klass unscoped  strict_loading_value "," preload_ klass scope_for_association  strict_loading_value "," preload_scope where  empty_scope where ? ! "," preload_scope includes  empty_scope includes ? ! "," preload_scope select  empty_scope select ? ! "," preload_ klass scoped  empty_ klass scoped ? ! "," preload_ klass unscoped  empty_ klass unscoped ? ! "," preload_ klass scope_for_association  empty_ klass scope_for_association ? ! "," preload_scope where  empty_scope where ? "," preload_scope includes  empty_scope includes ? "," preload_scope select  empty_scope select ? "," preload_ klass scoped  empty_ klass scoped ? "," preload_ klass unscoped  empty_ klass unscoped ? "," preload_ klass scope_for_association  empty_ klass scope_for_association ? "]}," ActiveRecord Associations Preloader Association associated_records_by_owner":{"type":"method","name":"associated_records_by_owner","children":[],"call":["records_by_owner [] << ","records_by_owner [] ","owners_map [] each ","owners_map [] ","record [] to_s ","record [] "," association_key_name ","records each ","Hash  [] "," owners map "," owners ","(send\n  (lvar :sliced) :map) flatten "," records_for ","sliced map ","owner_keys each_slice ","owner_keys size "," model connection in_clause_length "," model connection "," model ","owner_keys empty? "," klass nil? "," klass ","owners_map keys compact ","owners_map keys "," owners_by_key "," owners_by_key [] each "," owners_by_key [] ","(send\n  (send nil :owners) :map) compact uniq ","(send\n  (send nil :owners) :map) compact ","owner [] "," owner_key_name "," records_for to_a "," klass connection in_clause_length "," klass connection "," load_slices ","owner_keys any? ","h []= "," owners each_with_object ","result []= ","records [] "," convert_key "," load_records ","association set_inverse_instance ","owner association "," reflection name "," reflection ","Hash  []  [] << ","(send\n  (lvar :sliced) :map) flatten _by_owner [] << "," load_slices _by_owner [] << "," load_records _by_owner [] << ","records_by_ owners_by_key []  [] << ","Hash  []  [] ","(send\n  (lvar :sliced) :map) flatten _by_owner [] "," load_slices _by_owner [] "," load_records _by_owner [] ","records_by_ owners_by_key []  [] "," owners_by_key  [] each "," owners_by_key [] s_map [] each "," owners_by_key  [] "," owners_by_key [] s_map [] "," owner association _key_name ","(send\n  (lvar :sliced) :map) flatten  each "," load_slices  each "," load_records  each ","  owners_by_key [] s map ","  owners_by_key [] s ","(send\n  (lvar :owner_keys each_slice ) :map) flatten "," (send\n  (lvar :sliced) :map) flatten _for ","  load_slices _for ","  load_records _for ","owner_keys each_slice  map ","record [] to_s s each_slice ","owners_map keys compact  each_slice ","(send\n  (send nil :owners) :map) compact uniq  each_slice "," owners_by_key [] _keys each_slice ","record [] to_s s size ","owners_map keys compact  size ","(send\n  (send nil :owners) :map) compact uniq  size "," owners_by_key [] _keys size ","record [] to_s s empty? ","owners_map keys compact  empty? ","(send\n  (send nil :owners) :map) compact uniq  empty? "," owners_by_key [] _keys empty? "," owners_by_key  keys compact "," owners_by_key [] s_map keys compact "," owners_by_key  keys "," owners_by_key [] s_map keys ","  owners_by_key [] s_by_key ","  owners_by_key [] s_by_key [] each ","  owners_by_key [] s_by_key [] ","(send\n  (send nil : owners_by_key [] s) :map) compact uniq ","(send\n  (send nil : owners_by_key [] s) :map) compact "," owners_by_key []  [] "," record [] to_s _name ","  owners_by_key [] _key_name "," (send\n  (lvar :sliced) :map) flatten _for to_a ","  load_slices _for to_a ","  load_records _for to_a ","record [] to_s s any? ","owners_map keys compact  any? ","(send\n  (send nil :owners) :map) compact uniq  any? "," owners_by_key [] _keys any? ","  owners_by_key [] s each_with_object ","(send\n  (lvar :sliced) :map) flatten  [] "," load_slices  [] "," load_records  [] "," load_(send\n  (lvar :sliced) :map) flatten  "," load_ load_slices  "," load_ load_records  ","owner association  set_inverse_instance ","owner owner association  "," owners_by_key []  association "]}," ActiveRecord Associations Preloader Association options":{"type":"method","name":"options","children":[],"call":[" reflection options "," reflection "]}," ActiveRecord Associations Preloader Association owners_by_key":{"type":"method","name":"owners_by_key","children":[],"call":["key to_s ","owner [] "," owner_key_name "," owners group_by "," owners ","owner [] to_s "," key_conversion_required? ","h []= "," convert_key "," owners each_with_object ","(or-asgn\n  (send\n    (lvar :result) :[]\n    (lvar :key))\n  (array)) << ","result [] "," derive_key ","owner []  to_s "," convert_key  to_s "," derive_key  to_s "," owner_owner [] _name "," owner_ convert_key _name "," owner_ derive_key _name "," owner [] _conversion_required? ","  convert_key _conversion_required? ","  derive_key _conversion_required? "," convert_owner []  "," convert_ convert_key  "," convert_ derive_key  ","(or-asgn\n  (send\n    (lvar :result) :[]\n    (lvar :owner [] ))\n  (array)) << ","(or-asgn\n  (send\n    (lvar :result) :[]\n    (lvar : convert_key ))\n  (array)) << ","(or-asgn\n  (send\n    (lvar :result) :[]\n    (lvar : derive_key ))\n  (array)) << "," derive_owner []  "," derive_ convert_key  "," derive_ derive_key  "]}," ActiveRecord Associations Preloader Association owner_key_name":{"type":"method","name":"owner_key_name","children":[],"call":[" raise "," reflection join_foreign_key "," reflection "]}," ActiveRecord Associations Preloader Association association_key":{"type":"method","name":"association_key","children":[],"call":[" table [] "," association_key_name "," table "," klass arel_attribute "," klass "]}," ActiveRecord Associations Preloader Association association_key_name":{"type":"method","name":"association_key_name","children":[],"call":[" raise "," reflection join_primary_key "," klass "," reflection "]}," ActiveRecord Associations Preloader Association table":{"type":"method","name":"table","children":[],"call":[" klass arel_table "," klass "]}," ActiveRecord Associations Preloader Association records_for":{"type":"method","name":"records_for","children":[],"call":[" scoped where "," association_key in "," association_key "," scoped "," scope where "," scope "," query_scope "," association_key_name "," scope where load ","association set_inverse_instance ","owner association "," reflection name "," reflection "," owners_by_key [] first "," owners_by_key [] "," convert_key ","record [] "," owners_by_key "," owner association _key in "," owner association _key "," owner association _key_name ","owner association  set_inverse_instance ","owner owner association  "," owners_by_key [] first  association ","  owners_by_key [] first s_by_key [] first ","  owners_by_key [] first s_by_key [] ","  owners_by_key [] first s_by_key "]}," ActiveRecord Associations Preloader Association scoped":{"type":"method","name":"scoped","children":[],"call":[" build_scope "]}," ActiveRecord Associations Preloader Association preload":{"type":"method","name":"preload","children":[],"call":[" raise "]}," ActiveRecord Associations Preloader Association run":{"type":"method","name":"run","children":[],"call":[" preload "," owners first association loaded? "," owners first association "," reflection name "," reflection "," owners first "," owners "," associate_records_to_owner ","records [] "," convert_key ","owner [] "," owner_key_name "," owners each ","association set_inverse_instance ","owner association "," owners_by_key [] ","record [] "," association_key_name "," owners_by_key "," load_records "," records_by_owner "," records_by_owner [] "," preload_scope empty_scope? "," preload_scope "," preload_scope ! "," run? "," fetch_from_preloaded_records "," already_loaded? "," owners first owner association  loaded? ","  owners_by_key [] s first association loaded? "," owners first owner association  ","  owners_by_key [] s first association ","  owners_by_key [] s first ","  owners_by_key [] s "," associate_records_to_ owners_by_key []  "," associate_ records_by_owner _to_owner "," records_by_owner  [] "," owners_by_key []  [] ","  owners_by_key [] _key_name ","  owners_by_key [] s each ","owner association  set_inverse_instance ","owner owner association  "," owners_by_key []  association ","  owners_by_key [] s_by_key [] "," owner association _key_name ","  owners_by_key [] s_by_key "," load_ records_by_owner  "," records_by_ owners_by_key []  ","  records_by_owner _by_owner "," records_by_ owners_by_key []  [] ","  records_by_owner _by_owner [] "," fetch_from_preloaded_ records_by_owner  "]}," ActiveRecord Associations Preloader Association initialize":{"type":"method","name":"initialize","children":[],"call":["owners first class ","owners first ","preload_scope empty_scope? ","preload_scope ! ","owners uniq "]}," ActiveRecord Associations JoinHelper sanitize":{"type":"method","name":"sanitize","children":[],"call":["Arel Nodes And  new ","conditions first ","conditions length == ","conditions length ","Arel  sql ","condition is_a? "," active_record send ","table name ","table table_alias "," interpolate "," active_record ","conditions map ","Arel  sql s first "," active_record send s first ","Arel  sql s length == "," active_record send s length == ","Arel  sql s length "," active_record send s length ","Arel  sql  is_a? "," active_record send  is_a? ","Arel  sql s map "," active_record send s map "]}," ActiveRecord Associations JoinHelper join":{"type":"method","name":"join","children":[],"call":["table create_join "," join_type ","table create_on "]}," ActiveRecord Associations JoinHelper table_alias_for":{"type":"method","name":"table_alias_for","children":[],"call":["name << "," alias_suffix ","reflection plural_name "," alias_tracker pluralize ","reflection name "," alias_tracker ","reflection active_record "," alias_tracker pluralize  << ","reflection plural_ alias_tracker pluralize  ","reflection  alias_tracker pluralize  "]}," ActiveRecord Associations JoinHelper table_name_for":{"type":"method","name":"table_name_for","children":[],"call":["reflection table_name "]}," ActiveRecord Associations JoinHelper construct_tables":{"type":"method","name":"construct_tables","children":[],"call":["tables << "," alias_tracker aliased_table_for "," table_alias_for ","(or\n  (send\n    (lvar :reflection) :source_reflection)\n  (lvar :reflection)) options [] ","(or\n  (send\n    (lvar :reflection) :source_reflection)\n  (lvar :reflection)) options ","reflection source_reflection "," alias_tracker ","reflection source_macro == ","reflection source_macro ","reflection != "," reflection "," table_name_for "," chain each "," chain ","(or\n  (send\n    (lvar :reflection) :source_reflection)\n  (lvar :reflection)) join_table "," chain map "]}," ActiveRecord Associations JoinHelper join_type":{"type":"method","name":"join_type","children":[],"call":[]}," ActiveRecord Associations JoinDependency set_target_and_inverse":{"type":"method","name":"set_target_and_inverse","children":[],"call":["other set_inverse_instance ","other target= ","record association ","join_part reflection name ","join_part reflection ","record association  set_inverse_instance ","record association  target= "]}," ActiveRecord Associations JoinDependency construct_association":{"type":"method","name":"construct_association","children":[],"call":[" raise ","join_part reflection macro ","join_part reflection "," set_target_and_inverse ","other set_inverse_instance ","other target push ","other target ","other loaded! ","record association ","join_part reflection name ","join_part instantiate ","row [] nil? ","row [] ","join_part aliased_primary_key ","record association_cache key? ","record association_cache ","macro == ","record id to_s != ","join_part parent record_id to_s ","join_part parent record_id ","join_part parent ","record id to_s ","record id ","record association target ","join_part reflection join_part reflection macro  ","record association  set_inverse_instance ","record association  target push ","record association  target ","record association  loaded! ","record join_part instantiate  ","record join_part instantiate _cache key? ","record join_part instantiate _cache ","join_part reflection macro  == ","record join_part instantiate  target "]}," ActiveRecord Associations JoinDependency construct":{"type":"method","name":"construct","children":[],"call":[" raise ","associations inspect "," construct ","(send\n  (lvar :associations) :sort_by) each ","k to_s ","associations sort_by ","associations each "," construct_association ","join_parts delete ","j parent_table_name == ","parent class table_name ","parent class ","j parent_table_name ","j reflection name to_s == ","j reflection name to_s ","j reflection name ","j reflection ","join_parts detect ","associations to_s ","seen [] [] [] []= ","seen [] [] [] ","node base_klass ","seen [] [] ","seen [] ","parent base_klass "," construct_model ","seen [] [] [] [] ","id nil? ","row [] ","aliases column_alias ","node primary_key ","ar_parent association target ","ar_parent association ","node reflection name ","node reflection ","ar_parent association_cache key? ","ar_parent association_cache ","other loaded! ","node reflection collection? ","parent children each ","parent children ","ar_parent id ","nil_association loaded! ","ar_parent nil? ","seen [] [] []= ","ar_parent object_id ","model readonly! ","ar_parent association_cached? ","node reflection scope_for readonly_value ","node reflection scope_for ","node base_klass unscoped ","node reflection scope "," aliases column_alias "," aliases ","row [] nil? ","node reflection join_primary_key to_s ","node reflection join_primary_key ","ids each ","keys any? ","keys map ","column to_s "," Array map "," Array "," construct s inspect ","(send\n  (lvar : construct s) :sort_by) each "," construct s sort_by "," construct s each "," construct_ construct  ","j parent_table_associations to_s  == ","parent class table_associations to_s  ","j parent_table_associations to_s  ","j reflection associations to_s  to_s == ","j reflection associations to_s  to_s ","j reflection associations to_s  "," construct s to_s "," construct_ construct_model  "," construct_seen [] [] [] []  "," construct_ar_parent association target  "," construct_seen [] [] []  ","row []  nil? ","node primary_aliases column_alias  ","node primary_ aliases column_alias  ","ar_parent  construct  target ","ar_parent  construct  ","node reflection associations to_s  ","ar_parent  construct _cache key? ","ar_parent association_cache aliases column_alias ? ","ar_parent association_cache  aliases column_alias ? ","ar_parent  construct _cache ","ar_parent association  loaded! ","ar_parent row []  ","nil_ construct  loaded! ","ar_parent object_row []  "," construct_model  readonly! ","seen [] [] [] []  readonly! ","ar_parent association target  readonly! ","seen [] [] []  readonly! ","ar_parent  construct _cached? ","node reflection join_primary_aliases column_alias  to_s ","node reflection join_primary_ aliases column_alias  to_s ","node reflection join_primary_aliases column_alias  ","node reflection join_primary_ aliases column_alias  ","row [] s each ","aliases column_alias s any? "," aliases column_alias s any? ","aliases column_alias s map "," aliases column_alias s map "]}," ActiveRecord Associations JoinDependency build_join_association":{"type":"method","name":"build_join_association","children":[],"call":["JoinAssociation  new "]}," ActiveRecord Associations JoinDependency remove_uniq_by_reflection":{"type":"method","name":"remove_uniq_by_reflection","children":[],"call":["record send target uniq! ","record send target ","record send ","reflection name ","records each ","reflection collection? "]}," ActiveRecord Associations JoinDependency find_join_association":{"type":"method","name":"find_join_association","children":[],"call":["j parent == ","j parent ","j reflection == ","j reflection "," join_associations detect "," join_associations ","name_or_reflection to_sym ","String  === ","name_or_reflection to_sym  to_sym "]}," ActiveRecord Associations JoinDependency build":{"type":"method","name":"build","children":[],"call":[" raise ","associations inspect "," build ","associations [] ","(send\n  (send\n    (lvar :associations) :keys) :sort_by) each ","a to_s ","associations keys sort_by ","associations keys ","associations each "," cache_joined_association ","@join_parts << ","join_association join_type= "," build_join_association ","@reflections << "," find_join_association ","parent reflections [] ","associations to_s intern ","associations to_s ","parent reflections "," join_parts last "," join_parts ","parent active_record name ","parent active_record ","parent base_klass name ","parent base_klass ","associations intern ","JoinAssociation  new ","reflection klass ","EagerLoadPolymorphicError  new ","reflection options [] ","reflection options ","reflection check_validity! "," find_reflection ","associations map ","reflection polymorphic? ","reflection check_eager_loadable! ","(send\n  (lvar :associations) :map) compact "," alias_tracker "," build  join_type= "," build_join_association  join_type= "," find_join_association  join_type= "," build_ build  "," build_ build_join_association  "," build_ find_join_association  ","@parent reflections [] s << ","@ find_reflection s << "," find_ build  "," find_ build_join_association  "," find_ find_join_association  ","parent parent reflections [] s [] ","parent  find_reflection s [] ","parent parent reflections [] s ","parent  find_reflection s ","parent reflections []  klass "," find_reflection  klass ","parent reflections []  options [] "," find_reflection  options [] ","parent reflections []  options "," find_reflection  options ","parent reflections []  check_validity! "," find_reflection  check_validity! "," find_parent reflections []  "," find_ find_reflection  ","parent reflections []  polymorphic? "," find_reflection  polymorphic? ","parent reflections []  check_eager_loadable! "," find_reflection  check_eager_loadable! "]}," ActiveRecord Associations JoinDependency cache_joined_association":{"type":"method","name":"cache_joined_association","children":[],"call":["ref [] ","association reflection name ","association reflection ","associations each ","parent parent ","associations unshift ","parent reflection name ","parent reflection ","parent != "," join_base ","association parent ","ref []  [] ","association ref [] lection name ","association ref [] lection ","parent parent  parent parent  ","association parent  association parent  ","parent ref [] lection name ","parent parent  reflection name ","association parent  reflection name ","parent ref [] lection ","parent parent  reflection ","association parent  reflection ","parent parent  != ","association parent  != ","association parent parent  ","association association parent  "]}," ActiveRecord Associations JoinDependency remove_duplicate_results!":{"type":"method","name":"remove_duplicate_results!","children":[],"call":[" remove_duplicate_results! ","associations [] ","reflection klass ","parent_records empty? ","parent_records << ","parent_records concat ","descendant target uniq ","descendant target ","reflection collection? ","record send ","reflection name ","records each "," remove_uniq_by_reflection ","base reflections [] ","base reflections ","associations keys each ","associations keys ","associations each ","associations each_key ","base reflections []  klass ","record send  target uniq ","record send  target ","base reflections []  collection? ","base reflections []  name "," remove_uniq_by_base reflections []  ","base base reflections [] s [] ","base base reflections [] s "]}," ActiveRecord Associations JoinDependency instantiate":{"type":"method","name":"instantiate","children":[],"call":[" remove_duplicate_results! "," active_record ","(send\n  (lvar :rows) :map) uniq "," construct "," join_associations "," join_base instantiate "," join_base ","parents [] ","model [] ","rows map "," join_base aliased_primary_key "," base_klass ","parents values "," join_root "," join_root instantiate ","type_caster type_cast ","row_hash [] ","result_set each ","aliases column_aliases ","model_cache [] ","h []= ","Hash  new ","i []= ","j []= ","result_set column_type ","aliases column_alias "," join_root primary_key ","message_bus instrument "," join_root base_klass name "," join_root base_klass ","result_set length ","ActiveSupport Notifications  instrumenter "," aliases "," aliases column_aliases "," aliases column_alias "," explicit_selections ","Aliases Column  new ","column_names map! ","column_types slice ","column_types empty? ","result_set column_types ","column_names empty? ","attribute_types key? ","column_types slice delete_if "," join_root attribute_types ","column_names << ","(str \"\\\\At\\\\d+_r\\\\d+\\\\z\") match? ","result_set columns each ","result_set columns ","(send\n  (const nil :Hash) :new) compare_by_identity ","model_cache []  [] "," join_base aliased_ join_base aliased_primary_key  "," join_base aliased_aliases column_alias  "," join_base aliased_ aliases column_alias  ","model_cache []  values ","result_set column_type  type_cast ","aliases aliases column_aliases  ","aliases  aliases column_aliases  "," join_root  join_base aliased_primary_key  "," join_root aliases column_alias  "," join_root  aliases column_alias  ","ActiveSupport Notifications  instrumenter  instrument "," aliases aliases column_aliases  "," aliases  aliases column_aliases  "," explicit_selections  map! ","column_types slice  slice ","result_set column_types  slice ","column_types slice  empty? ","result_set column_types  empty? ","result_set column_types slice  ","result_set result_set column_types  "," explicit_selections  empty? "," join_root attribute_types  key? ","column_types slice  slice delete_if ","result_set column_types  slice delete_if "," join_root  join_root attribute_types  "," explicit_selections  << "]}," ActiveRecord Associations JoinDependency columns":{"type":"method","name":"columns","children":[],"call":["(send\n  (send nil :join_parts) :collect) flatten ","table [] as ","Arel  sql ","table [] ","join_part column_names_with_alias collect ","join_part column_names_with_alias ","join_part aliased_table "," join_parts collect "," join_parts ","join_part aliased_table  [] as ","join_part aliased_table  [] ","join_part aliased_join_part aliased_table  "]}," ActiveRecord Associations JoinDependency join_base":{"type":"method","name":"join_base","children":[],"call":[" join_parts first "," join_parts "]}," ActiveRecord Associations JoinDependency join_associations":{"type":"method","name":"join_associations","children":[],"call":[" join_parts last "," join_parts length - "," join_parts length "," join_parts "]}," ActiveRecord Associations JoinDependency graft":{"type":"method","name":"graft","children":[],"call":[" build ","association join_type "," join_base ","association find_parent_in ","association reflection name ","association reflection ","association == "," join_associations detect "," join_associations ","associations each "]}," ActiveRecord Associations JoinDependency initialize":{"type":"method","name":"initialize","children":[],"call":[" build ","@alias_tracker aliased_name_for ","base table_name ","AliasTracker  new ","JoinBase  new ","base connection "," construct_tables! ","@join_root children each ","@join_root children "," class make_tree "," class ","AliasTracker  create ","@alias_tracker aliased_table_for ","AliasTracker  create_with_joins ","base type_caster ","AliasTracker  new  aliased_name_for ","AliasTracker  create  aliased_name_for ","AliasTracker  create_with_joins  aliased_name_for ","JoinBase  new  children each ","JoinBase  new  children "," class make_ class make_tree  ","AliasTracker  new  aliased_table_for ","AliasTracker  create  aliased_table_for ","AliasTracker  create_with_joins  aliased_table_for "]}," ActiveRecord Associations JoinDependency JoinPart instantiate":{"type":"method","name":"instantiate","children":[],"call":[" active_record send "," extract_record "," active_record ","@cached_record [] "," record_id "," base_klass instantiate "," base_klass "]}," ActiveRecord Associations JoinDependency JoinPart record_id":{"type":"method","name":"record_id","children":[],"call":["row [] "," aliased_primary_key "]}," ActiveRecord Associations JoinDependency JoinPart extract_record":{"type":"method","name":"extract_record","children":[],"call":["Hash  [] ","row [] "," column_names_with_alias map "," column_names_with_alias ","hash []= "," column_names_with_alias [] ","index < "," column_names_with_alias length ","column_names_with_alias [] ","column_names_with_alias length ","column alias ","column name "," column_names_with_alias [] _names_with_alias map "," column_names_with_alias [] _names_with_alias "," column_names_with_alias [] _names_with_alias [] "," column_names_with_alias  column_names_with_alias length  "," column_names_with_alias column_names_with_alias length  "," column_names_with_alias [] _names_with_alias length ","column_names_with_alias [] _names_with_alias [] ","column_names_with_alias  column_names_with_alias length  ","column_names_with_alias column_names_with_alias length  ","column_names_with_alias [] _names_with_alias length ","column_names_with_alias []  alias ","column_names_with_alias []  name "]}," ActiveRecord Associations JoinDependency JoinPart column_names_with_alias":{"type":"method","name":"column_names_with_alias","children":[],"call":["@column_names_with_alias << "," aliased_prefix ","(send\n  (array\n    (send nil :primary_key)) :+\n  (begin\n    (send\n      (send nil :column_names) :-\n      (array\n        (send nil :primary_key))))) each_with_index ","(send nil :primary_key) + "," column_names - "," primary_key "," column_names ","(send\n  (array\n    (send nil :primary_key)) :+\n  (begin\n    (send\n      (send nil :column_names) :-\n      (array\n        (send nil :primary_key))))) compact each_with_index ","(send\n  (array\n    (send nil :primary_key)) :+\n  (begin\n    (send\n      (send nil :column_names) :-\n      (array\n        (send nil :primary_key))))) compact "]}," ActiveRecord Associations JoinDependency JoinPart aliased_primary_key":{"type":"method","name":"aliased_primary_key","children":[],"call":[" aliased_prefix "]}," ActiveRecord Associations JoinDependency JoinPart aliased_table_name":{"type":"method","name":"aliased_table_name","children":[],"call":[" raise "]}," ActiveRecord Associations JoinDependency JoinPart aliased_prefix":{"type":"method","name":"aliased_prefix","children":[],"call":[" raise "]}," ActiveRecord Associations JoinDependency JoinPart table":{"type":"method","name":"table","children":[],"call":[" raise "]}," ActiveRecord Associations JoinDependency JoinPart ==":{"type":"method","name":"==","children":[],"call":[" raise "]}," ActiveRecord Associations JoinDependency JoinPart aliased_table":{"type":"method","name":"aliased_table","children":[],"call":["Arel Nodes TableAlias  new "," aliased_table_name "," table "]}," ActiveRecord Associations JoinDependency JoinPart initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Associations JoinDependency JoinBase aliased_table_name":{"type":"method","name":"aliased_table_name","children":[],"call":[" active_record table_name "," active_record "," base_klass table_name "," base_klass "]}," ActiveRecord Associations JoinDependency JoinBase table":{"type":"method","name":"table","children":[],"call":["Arel Table  new "," arel_engine "," table_name "," base_klass arel_table "," base_klass "]}," ActiveRecord Associations JoinDependency JoinBase aliased_prefix":{"type":"method","name":"aliased_prefix","children":[],"call":[]}," ActiveRecord Associations JoinDependency JoinBase ==":{"type":"method","name":"==","children":[],"call":["other active_record == "," active_record ","other active_record ","other class == "," class ","other class ","other base_klass == "," base_klass ","other base_klass "]}," ActiveRecord Associations JoinDependency JoinAssociation interpolate":{"type":"method","name":"interpolate","children":[],"call":[" instance_eval ","conditions respond_to? ","conditions is_a? ! ","conditions is_a? "]}," ActiveRecord Associations JoinDependency JoinAssociation conditions":{"type":"method","name":"conditions","children":[],"call":[" reflection conditions reverse "," reflection conditions "," reflection "]}," ActiveRecord Associations JoinDependency JoinAssociation aliased_table_name":{"type":"method","name":"aliased_table_name","children":[],"call":[" table name "," table "," table table_alias "]}," ActiveRecord Associations JoinDependency JoinAssociation table":{"type":"method","name":"table","children":[],"call":[" tables last "," tables "," tables first "]}," ActiveRecord Associations JoinDependency JoinAssociation join_relation":{"type":"method","name":"join_relation","children":[],"call":["joining_relation joins "," join_type= "]}," ActiveRecord Associations JoinDependency JoinAssociation build_constraint":{"type":"method","name":"build_constraint","children":[],"call":["table create_and ","reflection klass send ","reflection klass ","reflection klass finder_needs_type_condition? ","table [] eq ","foreign_table [] ","table [] ","klass send ","klass finder_needs_type_condition? "]}," ActiveRecord Associations JoinDependency JoinAssociation join_to":{"type":"method","name":"join_to","children":[],"call":["reflection klass ","relation from "," join ","constraint and "," sanitize ","conditions empty? ","conditions << ","foreign_klass base_class name ","foreign_klass base_class ","reflection type "," conditions [] dup "," conditions [] "," conditions "," build_constraint ","reflection active_record_primary_key ","reflection foreign_key ","reflection association_foreign_key ","reflection association_primary_key ","tables shift ","table [] eq ","foreign_table [] ","table [] ","reflection source_macro "," chain reverse each_with_index "," chain reverse "," chain "," parent active_record "," parent "," parent_table ","@tables dup ","relation where "," conditions [] empty? ","manager from ","item arel constraints ","item arel ","item arel constraints empty? ","ActiveRecord Relation  new instance_exec ","ActiveRecord Relation  new ","item is_a? ","scope_chain_items each ","ActiveRecord Relation  new where "," scope_chain [] "," scope_chain "," parent base_klass ","(send\n  (send\n    (lvar :reflection) :klass) :send\n  (sym :build_default_scope)) compact ","reflection klass send ","(send\n  (send\n    (lvar :reflection) :klass) :send\n  (sym :build_default_scope)\n  (send\n    (const\n      (const nil :ActiveRecord) :Relation) :new\n    (send\n      (lvar :reflection) :klass)\n    (lvar :table))) compact ","constraint and  and "," build_constraint  and "," conditions [] dup  empty? "," conditions [] dup  << "," parent active_record  base_class name "," parent base_klass  base_class name "," parent active_record  base_class "," parent base_klass  base_class ","  conditions [] dup  [] dup ","  conditions [] dup  [] ","  conditions [] dup  "," build_constraint and  "," build_ build_constraint  ","reflection active_record_primary_reflection foreign_key  ","reflection active_record_primary_reflection association_primary_key  ","reflection reflection active_record_primary_key  ","reflection reflection association_foreign_key  ","reflection reflection foreign_key  ","reflection foreign_reflection foreign_key  ","reflection foreign_reflection association_primary_key  ","reflection association_reflection active_record_primary_key  ","reflection association_reflection association_foreign_key  ","reflection association_reflection foreign_key  ","reflection association_foreign_reflection foreign_key  ","reflection association_foreign_reflection association_primary_key  ","reflection association_primary_reflection foreign_key  ","reflection association_primary_reflection association_primary_key  ","tables shift s shift ","@tables dup  shift ","tables shift  [] eq ","foreign_tables shift  [] "," parent_table  [] ","tables shift  [] "," parent_tables shift  ","@tables shift s dup ","@@tables dup  dup ","  conditions [] dup  [] empty? ","item arel constraint and s ","item arel  build_constraint s ","ActiveRecord Relation  new instance_exec  arel constraints ","ActiveRecord Relation  new instance_exec  arel ","item arel constraint and s empty? ","item arel  build_constraint s empty? ","ActiveRecord Relation  new instance_exec  arel constraints empty? ","ActiveRecord Relation  new instance_exec  is_a? ","scope_chain_ActiveRecord Relation  new instance_exec s each "," scope_chain []  each ","(send\n  (send\n    (lvar :reflection) :klass) :send\n  (sym :build_default_scope)\n  (send\n    (const\n      (const nil :ActiveRecord) :Relation) :new\n    (send\n      (lvar :reflection) :klass)\n    (lvar :tables shift ))) compact "]}," ActiveRecord Associations JoinDependency JoinAssociation find_parent_in":{"type":"method","name":"find_parent_in","children":[],"call":[" parent == "," parent ","other_join_dependency join_parts detect ","other_join_dependency join_parts "," parent active_record == ","join_part active_record "," parent active_record "," parent base_klass == ","join_part base_klass "," parent base_klass "]}," ActiveRecord Associations JoinDependency JoinAssociation ==":{"type":"method","name":"==","children":[],"call":["other parent == "," parent ","other parent ","other reflection == "," reflection ","other reflection ","other class == "," class ","other class "]}," ActiveRecord Associations JoinDependency JoinAssociation initialize":{"type":"method","name":"initialize","children":[],"call":[" construct_tables reverse "," construct_tables ","join_dependency join_parts size ","join_dependency join_parts ","reflection klass "," raise ","EagerLoadPolymorphicError  new ","reflection options [] ","reflection options ","reflection check_validity! "]}," ActiveRecord Associations HasOneAssociation nullify_owner_attributes":{"type":"method","name":"nullify_owner_attributes","children":[],"call":["record []= "," reflection foreign_key "," reflection ","foreign_key_column in? "," Array ","record class primary_key ","record class "," Array each "]}," ActiveRecord Associations HasOneAssociation remove_target!":{"type":"method","name":"remove_target!","children":[],"call":[" raise ","(str \"Failed to remove the existing associated \") + "," reflection name "," reflection "," set_owner_attributes "," target "," target save ! "," target save "," owner persisted? "," owner "," target persisted? "," nullify_owner_attributes "," target send ","method in? "," target destroy "," target delete "," remove_inverse_instance "," target destroyed_by_association= ","RecordNotSaved  new "]}," ActiveRecord Associations HasOneAssociation set_new_record":{"type":"method","name":"set_new_record","children":[],"call":[" replace "]}," ActiveRecord Associations HasOneAssociation delete":{"type":"method","name":"delete","children":[],"call":[" target update_attribute "," reflection foreign_key "," reflection "," target "," target destroy "," target delete "," load_target "," target update_column "," target update_columns "," target persisted? "," target destroyed_by_association= "," throw "," target destroyed? "," nullified_owner_attributes "," enqueue_destroy_association "," options fetch "," options "," reflection klass to_s "," reflection klass "," owner id "," owner "," owner class to_s "," owner class "," target public_send "," target class primary_key to_sym "," target class primary_key "," target class ","primary_key_column map "," target class query_constraints_list map "," target class query_constraints_list "," owner  target public_send  "," target class primary_key to_sym  map "," target class query_constraints_list map  map "]}," ActiveRecord Associations HasManyThroughAssociation invertible_for?":{"type":"method","name":"invertible_for?","children":[],"call":[]}," ActiveRecord Associations HasManyThroughAssociation delete_through_records":{"type":"method","name":"delete_through_records","children":[],"call":["through target= ","through target == "," through_record ","through target ","records each ","through target delete "," through_reflection macro == "," through_reflection macro "," through_reflection ","@through_records delete ","record object_id ","through_records include? ","through_records each "," through_records_for "," through_association target= "," through_association "," through_association target "," through_association target delete "," through_reflection collection? ","@ through_records_for  delete "," through_records_for  include? "," through_records_for  each ","  through_records_for _for "]}," ActiveRecord Associations HasManyThroughAssociation update_through_counter?":{"type":"method","name":"update_through_counter?","children":[],"call":[" inverse_updates_counter_cache? ! "," inverse_updates_counter_cache? "," through_reflection "," through_reflection inverse_updates_counter_cache? ! "," through_reflection inverse_updates_counter_cache? "]}," ActiveRecord Associations HasManyThroughAssociation build_record":{"type":"method","name":"build_record","children":[],"call":["record send "," through_record ","inverse name ","inverse macro == ","inverse macro ","record send << "," source_reflection inverse_of "," source_reflection "," ensure_not_nested "," build_through_record ","inverse has_one? ","inverse collection? "," scope "," source_reflection inverse_of  name "," source_reflection inverse_of  macro == "," source_reflection inverse_of  macro "," source_reflection  source_reflection inverse_of _of "," source_reflection inverse_of  has_one? "," source_reflection inverse_of  collection? "]}," ActiveRecord Associations HasManyThroughAssociation through_record":{"type":"method","name":"through_record","children":[],"call":["through_record send "," source_reflection name "," source_reflection ","through_association build ","candidate attributes slice == ","candidate attributes slice ","attributes keys ","candidate attributes ","Array  wrap find ","Array  wrap ","through_association target "," construct_join_attributes "," owner association "," through_reflection name "," through_reflection "," owner ","through_association build  send "," owner association  build ","candidate  construct_join_attributes  slice == ","candidate  construct_join_attributes  slice "," construct_join_attributes  keys ","candidate  construct_join_attributes  "," owner association  target "," construct_join_ construct_join_attributes  "]}," ActiveRecord Associations HasManyThroughAssociation concat":{"type":"method","name":"concat","children":[],"call":["record save! ","record new_record? "," raise_on_type_mismatch ","records flatten each ","records flatten "," owner new_record? "," owner "," raise_on_type_mismatch! "]}," ActiveRecord Associations HasAndBelongsToManyAssociation invertible_for?":{"type":"method","name":"invertible_for?","children":[],"call":[]}," ActiveRecord Associations CollectionProxy proxy_reflection":{"type":"method","name":"proxy_reflection","children":[],"call":[" proxy_association reflection "," proxy_association ","ActiveSupport Deprecation  warn ","@association reflection name ","@association reflection "]}," ActiveRecord Associations CollectionProxy proxy_target":{"type":"method","name":"proxy_target","children":[],"call":[" proxy_association target "," proxy_association ","ActiveSupport Deprecation  warn ","@association reflection name ","@association reflection ","@association target "]}," ActiveRecord Associations CollectionProxy proxy_owner":{"type":"method","name":"proxy_owner","children":[],"call":[" proxy_association owner "," proxy_association ","ActiveSupport Deprecation  warn ","@association reflection name ","@association reflection ","@association owner "]}," ActiveRecord Associations CollectionProxy reload":{"type":"method","name":"reload","children":[],"call":[" proxy_association reload "," proxy_association ","@association reload "," reset_scope "]}," ActiveRecord Associations CollectionProxy clear":{"type":"method","name":"clear","children":[],"call":[" delete_all "]}," ActiveRecord Associations CollectionProxy <<":{"type":"method","name":"<<","children":[],"call":[" proxy_association concat "," proxy_association ","@association concat "]}," ActiveRecord Associations CollectionProxy to_ary":{"type":"method","name":"to_ary","children":[],"call":[" load_target dup "," load_target "]}," ActiveRecord Associations CollectionProxy ===":{"type":"method","name":"===","children":[],"call":["other === "," load_target "]}," ActiveRecord Associations CollectionProxy method_missing":{"type":"method","name":"method_missing","children":[],"call":[" scoped readonly send "," scoped readonly "," scoped "," raise ","e message sub "," target ","e message "," target send "," target respond_to? "," load_target ","Class  respond_to? "," proxy_association klass respond_to? ! "," proxy_association klass respond_to? "," proxy_association klass "," proxy_association "," block_given? "," proxy_association send "," send ","match attribute_names ","match instantiator? ","DynamicFinderMatch  match ","@association klass respond_to? ! ","@association klass respond_to? ","@association klass "," create ","Hash  [] ","attributes zip ","attributes join ","match creator? ","@association send ","(send nil :send\n  (sym :find_or_instantiator_by_attributes)\n  (lvar :match)\n  (send\n    (lvar :match) :attribute_names)\n  (splat\n    (lvar :args))) tap "," scope public_send "," scope "," scope respond_to? "," public_send "," extend "," scope extending_values "," scope extending_values any? ","DynamicFinderMatch  match  attribute_names ","DynamicFinderMatch  match  instantiator? ","DynamicFinderMatch  DynamicFinderMatch  match  ","match attribute_names  zip ","match attribute_names  join ","DynamicFinderMatch  match  creator? ","(send nil :send\n  (sym :find_or_instantiator_by_attributes)\n  (lvar :DynamicFinderMatch  match )\n  (send\n    (lvar :DynamicFinderMatch  match ) :attribute_names)\n  (splat\n    (lvar :args))) tap ","(send nil :send\n  (sym :find_or_instantiator_by_match attribute_names )\n  (lvar :match)\n  (send\n    (lvar :match) :attribute_names)\n  (splat\n    (lvar :args))) tap "]}," ActiveRecord Associations CollectionProxy respond_to?":{"type":"method","name":"respond_to?","children":[],"call":[" proxy_association klass respond_to? "," proxy_association klass "," proxy_association "," target respond_to? "," target "," load_target ","@association klass respond_to? ","@association klass "]}," ActiveRecord Associations CollectionProxy proxy_association":{"type":"method","name":"proxy_association","children":[],"call":[]}," ActiveRecord Associations CollectionProxy initialize":{"type":"method","name":"initialize","children":[],"call":[" proxy_extend ","Array  wrap each ","Array  wrap ","association options [] ","association options "," merge! ","association scope "," default_scoped= ","klass arel_table ","klass predicate_builder "," extend ","extensions any? ","association extensions ","association extensions  any? ","association association extensions  "]}," ActiveRecord Associations CollectionAssociation first_or_last":{"type":"method","name":"first_or_last","children":[],"call":["collection send "," load_target "," scoped "," fetch_first_or_last_using_find? ","args shift ","args first empty? ","args first ","args first is_a? "," set_inverse_instance ","record is_a? ","collection send tap "," scope "," load_target  send "," scoped  send "," scope  send "," load_target  send tap "," scoped  send tap "," scope  send tap "]}," ActiveRecord Associations CollectionAssociation find_by_scan":{"type":"method","name":"find_by_scan","children":[],"call":["ids include? ","r id "," load_target select "," load_target ","id == "," load_target detect ","ids first ","ids size == ","ids size ","arg to_i ","args flatten compact uniq map ","args flatten compact uniq ","args flatten compact ","args flatten ","args first kind_of? ","args first ","(send\n  (send\n    (send\n      (lvar :args) :flatten) :compact) :map) uniq ","args flatten compact map ","r id to_s ","arg to_s ","args flatten compact map uniq ","ids first s include? ","(send\n  (send\n    (send\n      (lvar :args) :flatten) :compact) :map) uniq  include? ","args flatten compact map uniq  include? ","r ids first  ","ids first  == ","ids first s first ","(send\n  (send\n    (send\n      (lvar :args) :flatten) :compact) :map) uniq  first ","args flatten compact map uniq  first ","ids first s size == ","(send\n  (send\n    (send\n      (lvar :args) :flatten) :compact) :map) uniq  size == ","args flatten compact map uniq  size == ","ids first s size ","(send\n  (send\n    (send\n      (lvar :args) :flatten) :compact) :map) uniq  size ","args flatten compact map uniq  size ","r ids first  to_s "]}," ActiveRecord Associations CollectionAssociation include_in_memory?":{"type":"method","name":"include_in_memory?","children":[],"call":[" target include? "," target ","target == ","target include? ","target respond_to? ","source send "," reflection source_reflection name "," reflection source_reflection "," reflection "," owner send any? "," owner send "," reflection through_reflection name "," reflection through_reflection "," owner "," reflection is_a? ","assoc reader any? ","assoc reader "," owner association ","target_association == ","target_association include? ","target_association respond_to? ","target_reflection == ","target_reflection include? ","target_reflection respond_to? "," source send  include? "," source send  ","source send  == ","source send  include? ","source send  respond_to? "," owner association  reader any? "," owner association  reader "," owner  owner association iation ","source send _association == ","target_ owner association iation == ","source send _association include? ","target_ owner association iation include? ","source send _association respond_to? ","target_ owner association iation respond_to? ","source send _reflection == ","source send _reflection include? ","source send _reflection respond_to? "]}," ActiveRecord Associations CollectionAssociation fetch_first_or_last_using_find?":{"type":"method","name":"fetch_first_or_last_using_find?","children":[],"call":["(or\n  (or\n    (or\n      (or\n        (send nil :loaded?)\n        (send\n          (send nil :owner) :new_record?))\n      (send\n        (send nil :options) :[]\n        (sym :finder_sql)))\n    (block\n      (send\n        (send nil :target) :any?)\n      (args\n        (arg :record))\n      (or\n        (send\n          (lvar :record) :new_record?)\n        (send\n          (lvar :record) :changed?))))\n  (send\n    (send\n      (lvar :args) :first) :kind_of?\n    (const nil :Integer))) ! ","args first kind_of? ","args first ","record changed? ","record new_record? "," target any? "," target "," options [] "," options "," owner new_record? "," owner "," loaded? ","args first is_a? ","(or\n  (or\n    (send nil :loaded?)\n    (send\n      (send nil :owner) :new_record?))\n  (block\n    (send\n      (send nil :target) :any?)\n    (args\n      (arg :record))\n    (or\n      (send\n        (lvar :record) :new_record?)\n      (send\n        (lvar :record) :changed?)))) ! "]}," ActiveRecord Associations CollectionAssociation callbacks_for":{"type":"method","name":"callbacks_for","children":[],"call":[" owner class send ","full_callback_name to_sym "," owner class "," owner "," reflection name "," reflection "," owner class respond_to? "]}," ActiveRecord Associations CollectionAssociation callback":{"type":"method","name":"callback","children":[],"call":["callback send "," owner ","callback call "," owner send "," callbacks_for each "," callbacks_for "]}," ActiveRecord Associations CollectionAssociation delete_records":{"type":"method","name":"delete_records","children":[],"call":[" raise "]}," ActiveRecord Associations CollectionAssociation delete_or_destroy":{"type":"method","name":"delete_or_destroy","children":[],"call":[" callback ","records each "," target delete "," target "," delete_records ","existing_records any? "," transaction ","r new_record? ","records reject "," raise_on_type_mismatch ","records flatten "," remove_records ","existing_records empty? "," raise_on_type_mismatch! "," find ","record kind_of? ","records any? ","records empty? ","records flatten  each "," find  each "," delete_records flatten  "," delete_ find  ","existing_records flatten  any? ","existing_ find  any? ","records reject  any? ","records flatten  reject "," find  reject ","records flatten  flatten "," find  flatten "," remove_records flatten  "," remove_ find  ","existing_records flatten  empty? ","existing_ find  empty? ","records reject  empty? ","records flatten  any? "," find  any? ","records flatten  empty? "," find  empty? "]}," ActiveRecord Associations CollectionAssociation create_scope":{"type":"method","name":"create_scope","children":[],"call":[" scoped scope_for_create stringify_keys "," scoped scope_for_create "," scoped "," scope scope_for_create stringify_keys "," scope scope_for_create "," scope "]}," ActiveRecord Associations CollectionAssociation insert_record":{"type":"method","name":"insert_record","children":[],"call":[" raise ","record save ","record save! "]}," ActiveRecord Associations CollectionAssociation create_record":{"type":"method","name":"create_record","children":[],"call":[" insert_record "," block_given? "," add_to_target "," build_record "," transaction "," create_record ","attributes collect ","attributes is_a? "," raise "," owner persisted? "," owner "]}," ActiveRecord Associations CollectionAssociation merge_target_lists":{"type":"method","name":"merge_target_lists","children":[],"call":["persisted + ","mem_record []= ","record [] ","(send\n  (send\n    (lvar :record) :attribute_names) :-\n  (send\n    (send\n      (lvar :mem_record) :changes) :keys)) each ","record attribute_names - ","mem_record changes keys ","mem_record changes ","record attribute_names ","memory delete_at ","memory index ","persisted map! ","persisted empty? ","memory empty? ","(send\n  (lvar :loaded) :map) + ","t send ","attributes [] ","(send\n  (send\n    (lvar :attributes) :keys) :-\n  (lvar :keys)) each ","attributes keys - ","attributes keys ","f attributes ","(str \"id\") + + ","f attribute_names - ","t attribute_names ","f attribute_names ","(str \"id\") + ","t changes keys ","t changes ","existing delete_at tap ","existing delete_at ","existing index ","loaded map ","loaded empty? ","existing empty? ","memory delete ","(send\n  (begin\n    (send\n      (send\n        (lvar :record) :attribute_names) :&\n      (send\n        (lvar :mem_record) :attribute_names))) :-\n  (send\n    (send\n      (lvar :mem_record) :changes) :keys)) each ","(send\n  (send\n    (lvar :record) :attribute_names) :&\n  (send\n    (lvar :mem_record) :attribute_names)) - ","record attribute_names & ","mem_record attribute_names ","(send\n  (begin\n    (send\n      (send\n        (lvar :record) :attribute_names) :&\n      (send\n        (lvar :mem_record) :attribute_names))) :-\n  (send\n    (lvar :mem_record) :changed_attribute_names_to_save)) each ","mem_record changed_attribute_names_to_save ","memory reject ","mem_record _write_attribute ","(send\n  (send\n    (begin\n      (send\n        (send\n          (lvar :record) :attribute_names) :&\n        (send\n          (lvar :mem_record) :attribute_names))) :-\n    (send\n      (lvar :mem_record) :changed_attribute_names_to_save)) :-\n  (send\n    (send\n      (lvar :mem_record) :class) :_attr_readonly)) each ","(send\n  (send\n    (lvar :record) :attribute_names) :&\n  (send\n    (lvar :mem_record) :attribute_names)) - - ","mem_record class _attr_readonly ","mem_record class ","persexisting index sted + ","memory delete_at  []= ","memory delete  []= ","(send\n  (send\n    (lvar :record) :attribute_names) :-\n  (send\n    (send\n      (lvar :memory delete_at ) :changes) :keys)) each ","(send\n  (send\n    (lvar :record) :attribute_names) :-\n  (send\n    (send\n      (lvar :memory delete ) :changes) :keys)) each ","(send\n  (send\n    (lvar :record) :attribute_names) :-\n  (send\n    (send\n      (lvar :mem_record) :changes) :(str \"id\") + + )) each ","(send\n  (send\n    (lvar :record) :attrexisting index bute_names) :-\n  (send\n    (send\n      (lvar :mem_record) :changes) :keys)) each ","record attrexisting index bute_names - ","memory delete_at  changes keys ","memory delete  changes keys ","mem_record changes (str \"id\") + +  ","memory delete_at  changes ","memory delete  changes ","record attrexisting index bute_names ","memory existing index ndex ","persexisting index sted map! ","persexisting index sted empty? ","f attributes  [] ","attrexisting index butes [] ","(send\n  (send\n    (lvar :f attributes ) :keys) :-\n  (lvar :keys)) each ","(send\n  (send\n    (lvar :attributes) :(str \"id\") + + ) :-\n  (lvar :(str \"id\") + + )) each ","(send\n  (send\n    (lvar :attrexisting index butes) :keys) :-\n  (lvar :keys)) each ","f attributes  keys - ","attributes (str \"id\") + +  - ","attrexisting index butes keys - ","f attributes  keys ","attributes (str \"id\") + +  ","attrexisting index butes keys ","f f attributes  ","f attrexisting index butes ","(str \"existing index d\") + + ","f attrexisting index bute_names - ","t attrexisting index bute_names ","f attrexisting index bute_names ","(str \"existing index d\") + ","t changes (str \"id\") + +  ","exexisting index stexisting index ng delete_at tap ","exexisting index stexisting index ng delete_at ","exexisting index stexisting index ng existing index ndex ","exexisting index stexisting index ng empty? ","(send\n  (begin\n    (send\n      (send\n        (lvar :record) :attribute_names) :&\n      (send\n        (lvar :memory delete_at ) :attribute_names))) :-\n  (send\n    (send\n      (lvar :memory delete_at ) :changes) :keys)) each ","(send\n  (begin\n    (send\n      (send\n        (lvar :record) :attribute_names) :&\n      (send\n        (lvar :memory delete ) :attribute_names))) :-\n  (send\n    (send\n      (lvar :memory delete ) :changes) :keys)) each ","(send\n  (begin\n    (send\n      (send\n        (lvar :record) :attribute_names) :&\n      (send\n        (lvar :mem_record) :attribute_names))) :-\n  (send\n    (send\n      (lvar :mem_record) :changes) :(str \"id\") + + )) each ","(send\n  (begexisting index n\n    (send\n      (send\n        (lvar :record) :attrexisting index bute_names) :&\n      (send\n        (lvar :mem_record) :attrexisting index bute_names))) :-\n  (send\n    (send\n      (lvar :mem_record) :changes) :keys)) each ","(send\n  (send\n    (lvar :record) :attribute_names) :&\n  (send\n    (lvar :memory delete_at ) :attribute_names)) - ","(send\n  (send\n    (lvar :record) :attribute_names) :&\n  (send\n    (lvar :memory delete ) :attribute_names)) - ","(send\n  (send\n    (lvar :record) :attrexisting index bute_names) :&\n  (send\n    (lvar :mem_record) :attrexisting index bute_names)) - ","record attrexisting index bute_names & ","memory delete_at  attribute_names ","memory delete  attribute_names ","mem_record attrexisting index bute_names ","(send\n  (begin\n    (send\n      (send\n        (lvar :record) :attribute_names) :&\n      (send\n        (lvar :memory delete_at ) :attribute_names))) :-\n  (send\n    (lvar :memory delete_at ) :changed_attribute_names_to_save)) each ","(send\n  (begin\n    (send\n      (send\n        (lvar :record) :attribute_names) :&\n      (send\n        (lvar :memory delete ) :attribute_names))) :-\n  (send\n    (lvar :memory delete ) :changed_attribute_names_to_save)) each ","(send\n  (begexisting index n\n    (send\n      (send\n        (lvar :record) :attrexisting index bute_names) :&\n      (send\n        (lvar :mem_record) :attrexisting index bute_names))) :-\n  (send\n    (lvar :mem_record) :changed_attrexisting index bute_names_to_save)) each ","memory delete_at  changed_attribute_names_to_save ","memory delete  changed_attribute_names_to_save ","mem_record changed_attrexisting index bute_names_to_save ","memory delete_at  _write_attribute ","memory delete  _write_attribute ","mem_record _wrexisting index te_attrexisting index bute ","(send\n  (send\n    (begin\n      (send\n        (send\n          (lvar :record) :attribute_names) :&\n        (send\n          (lvar :memory delete_at ) :attribute_names))) :-\n    (send\n      (lvar :memory delete_at ) :changed_attribute_names_to_save)) :-\n  (send\n    (send\n      (lvar :memory delete_at ) :class) :_attr_readonly)) each ","(send\n  (send\n    (begin\n      (send\n        (send\n          (lvar :record) :attribute_names) :&\n        (send\n          (lvar :memory delete ) :attribute_names))) :-\n    (send\n      (lvar :memory delete ) :changed_attribute_names_to_save)) :-\n  (send\n    (send\n      (lvar :memory delete ) :class) :_attr_readonly)) each ","(send\n  (send\n    (begexisting index n\n      (send\n        (send\n          (lvar :record) :attrexisting index bute_names) :&\n        (send\n          (lvar :mem_record) :attrexisting index bute_names))) :-\n    (send\n      (lvar :mem_record) :changed_attrexisting index bute_names_to_save)) :-\n  (send\n    (send\n      (lvar :mem_record) :class) :_attr_readonly)) each ","(send\n  (send\n    (lvar :record) :attribute_names) :&\n  (send\n    (lvar :memory delete_at ) :attribute_names)) - - ","(send\n  (send\n    (lvar :record) :attribute_names) :&\n  (send\n    (lvar :memory delete ) :attribute_names)) - - ","(send\n  (send\n    (lvar :record) :attrexisting index bute_names) :&\n  (send\n    (lvar :mem_record) :attrexisting index bute_names)) - - ","memory delete_at  class _attr_readonly ","memory delete  class _attr_readonly ","memory delete_at  class ","memory delete  class "]}," ActiveRecord Associations CollectionAssociation find_target":{"type":"method","name":"find_target","children":[],"call":[" set_inverse_instance ","records each "," uniq "," options [] "," options "," scoped all "," scoped "," reflection klass find_by_sql "," custom_finder_sql "," reflection klass "," reflection "," find "," scope to_a "," scope "," get_records ","sc execute "," klass ","AssociationScope  get_bind_values "," reflection chain "," owner "," target_scope merge ","as scope "," target_scope ","params bind ","AssociationScope  create ","StatementCache  create "," reflection association_scope_cache "," klass connection "," skip_statement_cache? "," target_scope merge! ","scope to_a "," uniq  each "," scoped all  each "," reflection klass find_by_sql  each "," find  each "," scope to_a  each "," get_records  each ","  scope d all ","  scope d ","  scope  to_a ","  scope  "," get_ uniq  "," get_ scoped all  "," get_ reflection klass find_by_sql  "," get_ find  "," get_ scope to_a  "," get_ get_records  "," target_ scope  merge ","as  scope  "," target_ scope  "," reflection association_ scope _cache "," klass  klass connection ection "," target_ scope  merge! "," scope  to_a "]}," ActiveRecord Associations CollectionAssociation custom_finder_sql":{"type":"method","name":"custom_finder_sql","children":[],"call":[" interpolate "," options [] "," options "]}," ActiveRecord Associations CollectionAssociation custom_counter_sql":{"type":"method","name":"custom_counter_sql","children":[],"call":[" interpolate sub "," interpolate "," options [] "," options ","count_with =~ ","count_with blank? ","2 to_s ","2 to_s  =~ ","2 to_s  blank? "]}," ActiveRecord Associations CollectionAssociation add_to_target":{"type":"method","name":"add_to_target","children":[],"call":[" set_inverse_instance "," callback ","@target << ","@target []= ","@target index "," options [] "," options "," block_given? "," transaction "," association_scope distinct_value "," association_scope "," association_scope uniq_value "," replace_on_target ","@target @target index  "]}," ActiveRecord Associations CollectionAssociation load_target":{"type":"method","name":"load_target","children":[],"call":[" target "," loaded! "," merge_target_lists "," find_target "," find_target? "," reset "]}," ActiveRecord Associations CollectionAssociation include?":{"type":"method","name":"include?","children":[],"call":[" scoped exists? "," scoped "," target include? "," target "," loaded? "," load_target "," options [] "," options "," include_in_memory? ","record new_record? ","record is_a? "," reflection klass "," reflection "," scope exists? "," scope ","record id "]}," ActiveRecord Associations CollectionAssociation replace":{"type":"method","name":"replace","children":[],"call":[" raise "," reflection name "," reflection "," concat ","other_array - "," target "," delete "," target - "," transaction "," load_target dup "," load_target "," raise_on_type_mismatch ","other_array each "," replace_records "," owner new_record? "," owner "," raise_on_type_mismatch! ","other_array != "," replace_common_records_in_memory ","(send nil :skip_strict_loading) dup "," skip_strict_loading "]}," ActiveRecord Associations CollectionAssociation uniq":{"type":"method","name":"uniq","children":[],"call":["seen []= ","record id ","seen key? ","collection find_all "," load_target find_all "," load_target "]}," ActiveRecord Associations CollectionAssociation many?":{"type":"method","name":"many?","children":[],"call":[" size > "," size "," load_target many? "," load_target "," block_given? "]}," ActiveRecord Associations CollectionAssociation any?":{"type":"method","name":"any?","children":[],"call":[" empty? ! "," empty? "," load_target any? "," load_target "," block_given? "]}," ActiveRecord Associations CollectionAssociation empty?":{"type":"method","name":"empty?","children":[],"call":[" size zero? "," size "," scope exists? ! "," scope exists? "," scope ","@target blank? "," options [] "," options "," loaded? "," target empty? "," target "," reflection has_cached_counter? "," reflection "]}," ActiveRecord Associations CollectionAssociation length":{"type":"method","name":"length","children":[],"call":[" load_target size "," load_target "]}," ActiveRecord Associations CollectionAssociation size":{"type":"method","name":"size","children":[],"call":[" count_records ","unsaved_records size + ","unsaved_records size ","r new_record? "," target select "," target "," target is_a? "," options [] ! "," options [] "," options "," loaded? ! "," loaded? "," load_target size "," load_target "," target size "," owner new_record? "," owner "," find_target? ! "," find_target? "," association_scope distinct_value ! "," association_scope distinct_value "," association_scope "," association_scope group_values empty? ! "," association_scope group_values empty? "," association_scope group_values "," target uniq size "," target uniq "," association_scope uniq_value ! "," association_scope uniq_value "," target empty? ! "," target empty? ","@association_ids size "," target select  size + "," target select  size "]}," ActiveRecord Associations CollectionAssociation destroy":{"type":"method","name":"destroy","children":[],"call":[" delete_or_destroy "," find ","record kind_of? ","records any? ","records empty? "," find  any? "," find  empty? "]}," ActiveRecord Associations CollectionAssociation delete":{"type":"method","name":"delete","children":[],"call":[" delete_or_destroy "," options [] "," options "," delete_records "," load_target ","dependent == "," loaded? ","records first == ","records first "," find ","record kind_of? ","records any? ","$stderr puts ","ActiveRecord Base  logger warn ","ActiveRecord Base  logger ","dependent != ","_options [] ","records extract_options! ","records empty? "," delete_ find  "," options []  == "," find  first == "," find  first "," find  any? "," options []  != ","records extract_options!  [] "," find  extract_options! ","records extractrecords extract_options! ! "," find  empty? "]}," ActiveRecord Associations CollectionAssociation count":{"type":"method","name":"count","children":[],"call":["(send\n  (array\n    (send\n      (lvar :value) :-\n      (send\n        (lvar :offset) :to_i))\n    (int 0)) :max) min ","limit to_i ","(send\n  (lvar :value) :-\n  (send\n    (lvar :offset) :to_i)) max ","value - ","offset to_i "," options [] "," options "," scoped count "," scoped ","count_options merge! "," reflection klass primary_key "," reflection klass "," reflection "," reflection klass count_by_sql "," custom_counter_sql "," raise ","count_options blank? ","column_name is_a? "," owner new_record? "," owner ","relation count ","relation distinct "," association_scope distinct_value "," association_scope "," scope "," scope count ","count_options []= "," association_scope uniq_value ","(send\n  (array\n    (send\n      (lvar :value) :-\n      (send\n        (lvar : options [] ) :to_i))\n    (int 0)) :max) min ","(send\n  (array\n    (send\n      (lvar : scoped count ) :-\n      (send\n        (lvar :offset) :to_i))\n    (int 0)) :max) min ","(send\n  (array\n    (send\n      (lvar :relation count ) :-\n      (send\n        (lvar :offset) :to_i))\n    (int 0)) :max) min ","(send\n  (array\n    (send\n      (lvar : scope count ) :-\n      (send\n        (lvar :offset) :to_i))\n    (int 0)) :max) min "," options []  to_i ","(send\n  (lvar :value) :-\n  (send\n    (lvar : options [] ) :to_i)) max ","(send\n  (lvar : scoped count ) :-\n  (send\n    (lvar :offset) :to_i)) max ","(send\n  (lvar :relation count ) :-\n  (send\n    (lvar :offset) :to_i)) max ","(send\n  (lvar : scope count ) :-\n  (send\n    (lvar :offset) :to_i)) max "," scoped count  - ","relation count  - "," scope count  - ","relation distinct  count "," scope  count ","relation distinct  distinct "," scope  distinct "," association_scope distinct_ scoped count  "," association_scope distinct_relation count  "," association_scope distinct_ scope count  "," association_scope uniq_ scoped count  "," association_scope uniq_relation count  "," association_scope uniq_ scope count  "]}," ActiveRecord Associations CollectionAssociation sum":{"type":"method","name":"sum","children":[],"call":[" scoped sum "," scoped "," block_given? "]}," ActiveRecord Associations CollectionAssociation destroy_all":{"type":"method","name":"destroy_all","children":[],"call":[" loaded! "," reset "," destroy tap "," destroy "," load_target "]}," ActiveRecord Associations CollectionAssociation delete_all":{"type":"method","name":"delete_all","children":[],"call":[" loaded! "," reset "," delete tap "," delete "," load_target "," options [] "," options "," options [] == ","dependent present? "," raise ","(sym :nullify) include? ! ","(sym :nullify) include? "," delete_or_nullify_all_records tap "," delete_or_nullify_all_records "]}," ActiveRecord Associations CollectionAssociation transaction":{"type":"method","name":"transaction","children":[],"call":[" reflection klass transaction "," reflection klass "," reflection "]}," ActiveRecord Associations CollectionAssociation concat":{"type":"method","name":"concat","children":[],"call":[" insert_record "," owner new_record? "," owner "," add_to_target "," raise_on_type_mismatch ","records flatten each ","records flatten "," transaction "," load_target "," concat_records "," skip_strict_loading ","records flatten  flatten each ","records flatten  flatten "," concat_records flatten  "]}," ActiveRecord Associations CollectionAssociation create!":{"type":"method","name":"create!","children":[],"call":[" create_record ","Array  wrap each ","Array  wrap "," create "," _create_record "," create_ create  "," _create_ create  "]}," ActiveRecord Associations CollectionAssociation create":{"type":"method","name":"create","children":[],"call":[" create_record "," build_or_create "," raise "," owner persisted? "," owner "," insert_record "," block_given? "," add_to_target "," build_record "," transaction "," create ","attributes collect ","attributes is_a? "," _create_record "]}," ActiveRecord Associations CollectionAssociation build":{"type":"method","name":"build","children":[],"call":[" block_given? "," add_to_target "," build_record "," build ","attributes collect ","attributes is_a? "," build_or_create "]}," ActiveRecord Associations CollectionAssociation last":{"type":"method","name":"last","children":[],"call":[" first_or_last "," first_nth_or_last "]}," ActiveRecord Associations CollectionAssociation first":{"type":"method","name":"first","children":[],"call":[" first_or_last "," first_nth_or_last "]}," ActiveRecord Associations CollectionAssociation find":{"type":"method","name":"find","children":[],"call":[" scoped find "," scoped "," find_by_scan "," options [] "," options "," load_target find "," load_target "," block_given? "," scope find "," scope "," scope raise_record_not_found_exception! ","args size ","result_size != ","result ! "," Array size "," Array "," raise "," scope klass name "," scope klass ","args blank? ","args flatten ","args_flatten size ","args_flatten blank? "," loaded? ","RecordNotFound  new ","model primary_key ","model name ","args flatten  size "," Array size  != "," find_by_scan _size != "," find_by_scan  ! ","args flatten  blank? ","args flatten  flatten ","args flatten _flatten size ","args flatten _flatten blank? "," scope klass  primary_key "," scope klass  name "]}," ActiveRecord Associations CollectionAssociation select":{"type":"method","name":"select","children":[],"call":[" scoped select "," scoped "," load_target select each "," load_target select "," load_target "," block_given? "," scope select "," scope "]}," ActiveRecord Associations CollectionAssociation reset":{"type":"method","name":"reset","children":[],"call":["Set  new ","Set  new compare_by_identity "]}," ActiveRecord Associations CollectionAssociation ids_writer":{"type":"method","name":"ids_writer","children":[],"call":[" replace ","(send\n  (send\n    (send nil :klass) :find\n    (lvar :ids)) :index_by) values_at ","r id "," klass find index_by "," klass find "," klass ","pk_column type_cast ","ids map! ","id blank? ","Array  wrap reject ","Array  wrap "," reflection primary_key_column "," reflection "," Array reject "," Array ","pk_type type_cast_from_user "," reflection primary_key_type "," klass all raise_record_not_found_exception! ","ids size ","objs size "," klass all ","(send\n  (lvar :objs) :index_by) values_at ","r send ","objs index_by ","objs size == ","(send\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (lvar :pk_column)\n        (lvar :ids)))) :index_by) values_at compact ","(send\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (lvar :pk_column)\n        (lvar :ids)))) :index_by) values_at "," klass where index_by "," klass where "," Array reject map "," klass type_for_attribute "," reflection association_primary_key ","objs raise_record_not_found_exception! ","(lvasgn :objs\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (lvar :pk_column)\n        (lvar :ids))))) size == ","(lvasgn :objs\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (lvar :pk_column)\n        (lvar :ids))))) size ","(send\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (send\n          (send nil :reflection) :association_primary_key)\n        (lvar :ids)))) :index_by) values_at ","pk_type cast "," klass find index_by values_at ","records size ","records size != ","(send\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (send\n          (send nil :reflection) :association_primary_key)\n        (lvar :ids)))) :index_by) values_at compact "," reflection association_primary_key_type "," scope raise_record_not_found_exception! "," scope ","(send\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (lvar :primary_key)\n        (lvar :ids)))) :index_by) values_at compact ","(send\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (lvar :primary_key)\n        (lvar :ids)))) :index_by) values_at ","r public_send ","ids - ","record public_send ","records map "," Array compact_blank ","record _read_attribute ","(send\n  (send nil :klass) :composite_primary_key?) values_at compact ","(send\n  (send nil :klass) :composite_primary_key?) values_at ","primary_key map ","query_records index_by ","(send\n  (lvar :ids) :map) inject ","primary_key zip to_h ","primary_key zip ","ids map "," klass composite_primary_key? ","(send\n  (send\n    (send nil :klass) :find\n    (lvar : Array reject )) :index_by) values_at ","(send\n  (send\n    (send nil :klass) :find\n    (lvar : Array compact_blank )) :index_by) values_at "," reflection primary_key_column  type_cast "," reflection association_primary_key  type_cast "," Array reject  map! "," Array compact_blank  map! "," reflection  reflection association_primary_key _column "," reflection primary_key_type  type_cast_from_user "," klass type_for_attribute  type_cast_from_user "," reflection association_primary_key_type  type_cast_from_user "," reflection  reflection association_primary_key _type "," Array reject  size "," Array compact_blank  size ","(send\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (lvar :pk_column)\n        (lvar :ids)))) :index_by) values_at compact  size "," klass where  size ","(send\n  (lvar :(send\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (lvar :pk_column)\n        (lvar :ids)))) :index_by) values_at compact ) :index_by) values_at ","(send\n  (lvar : klass where ) :index_by) values_at ","(send\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (lvar :pk_column)\n        (lvar :ids)))) :index_by) values_at compact  index_by "," klass where  index_by ","(send\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (lvar :pk_column)\n        (lvar :ids)))) :index_by) values_at compact  size == "," klass where  size == ","(send\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (lvar : reflection primary_key_column )\n        (lvar :ids)))) :index_by) values_at compact ","(send\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (lvar : reflection association_primary_key )\n        (lvar :ids)))) :index_by) values_at compact ","(send\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (lvar :pk_column)\n        (lvar : Array reject )))) :index_by) values_at compact ","(send\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (lvar :pk_column)\n        (lvar : Array compact_blank )))) :index_by) values_at compact ","(send\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (lvar : reflection primary_key_column )\n        (lvar :ids)))) :index_by) values_at ","(send\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (lvar : reflection association_primary_key )\n        (lvar :ids)))) :index_by) values_at ","(send\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (lvar :pk_column)\n        (lvar : Array reject )))) :index_by) values_at ","(send\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (lvar :pk_column)\n        (lvar : Array compact_blank )))) :index_by) values_at "," reflection association_ reflection association_primary_key  ","(send\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (lvar :pk_column)\n        (lvar :ids)))) :index_by) values_at compact  raise_record_not_found_exception! "," klass where  raise_record_not_found_exception! ","(lvasgn :objs\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (lvar : reflection primary_key_column )\n        (lvar :ids))))) size == ","(lvasgn :objs\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (lvar : reflection association_primary_key )\n        (lvar :ids))))) size == ","(lvasgn :(send\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (lvar :pk_column)\n        (lvar :ids)))) :index_by) values_at compact \n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (lvar :pk_column)\n        (lvar :ids))))) size == ","(lvasgn : klass where \n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (lvar :pk_column)\n        (lvar :ids))))) size == ","(lvasgn :objs\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (lvar :pk_column)\n        (lvar : Array reject ))))) size == ","(lvasgn :objs\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (lvar :pk_column)\n        (lvar : Array compact_blank ))))) size == ","(lvasgn :objs\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (lvar : reflection primary_key_column )\n        (lvar :ids))))) size ","(lvasgn :objs\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (lvar : reflection association_primary_key )\n        (lvar :ids))))) size ","(lvasgn :(send\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (lvar :pk_column)\n        (lvar :ids)))) :index_by) values_at compact \n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (lvar :pk_column)\n        (lvar :ids))))) size ","(lvasgn : klass where \n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (lvar :pk_column)\n        (lvar :ids))))) size ","(lvasgn :objs\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (lvar :pk_column)\n        (lvar : Array reject ))))) size ","(lvasgn :objs\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (lvar :pk_column)\n        (lvar : Array compact_blank ))))) size ","(send\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (send\n          (send nil :reflection) :association_primary_key)\n        (lvar : Array reject )))) :index_by) values_at ","(send\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (send\n          (send nil :reflection) :association_primary_key)\n        (lvar : Array compact_blank )))) :index_by) values_at ","(send\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (send\n          (send nil :reflection) :association_ reflection association_primary_key )\n        (lvar :ids)))) :index_by) values_at "," reflection primary_key_type  cast "," klass type_for_attribute  cast "," reflection association_primary_key_type  cast ","(send\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (send\n          (send nil :reflection) :association_primary_key)\n        (lvar :ids)))) :index_by) values_at  size ","(send\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (send\n          (send nil :reflection) :association_primary_key)\n        (lvar :ids)))) :index_by) values_at compact  size ","(send\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (lvar :primary_key)\n        (lvar :ids)))) :index_by) values_at compact  size ","(send\n  (send nil :klass) :composite_primary_key?) values_at compact  size ","(send\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (send\n          (send nil :reflection) :association_primary_key)\n        (lvar :ids)))) :index_by) values_at  size != ","(send\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (send\n          (send nil :reflection) :association_primary_key)\n        (lvar :ids)))) :index_by) values_at compact  size != ","(send\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (lvar :primary_key)\n        (lvar :ids)))) :index_by) values_at compact  size != ","(send\n  (send nil :klass) :composite_primary_key?) values_at compact  size != ","(send\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (send\n          (send nil :reflection) :association_primary_key)\n        (lvar : Array reject )))) :index_by) values_at compact ","(send\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (send\n          (send nil :reflection) :association_primary_key)\n        (lvar : Array compact_blank )))) :index_by) values_at compact ","(send\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (send\n          (send nil :reflection) :association_ reflection association_primary_key )\n        (lvar :ids)))) :index_by) values_at compact "," reflection association_ reflection association_primary_key _type ","(send\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (lvar :primary_key)\n        (lvar : Array reject )))) :index_by) values_at compact ","(send\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (lvar :primary_key)\n        (lvar : Array compact_blank )))) :index_by) values_at compact ","(send\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (lvar :primary_key)\n        (lvar : Array reject )))) :index_by) values_at ","(send\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (lvar :primary_key)\n        (lvar : Array compact_blank )))) :index_by) values_at "," Array reject  - "," Array compact_blank  - ","(send\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (send\n          (send nil :reflection) :association_primary_key)\n        (lvar :ids)))) :index_by) values_at  map ","(send\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (send\n          (send nil :reflection) :association_primary_key)\n        (lvar :ids)))) :index_by) values_at compact  map ","(send\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (lvar :primary_key)\n        (lvar :ids)))) :index_by) values_at compact  map ","(send\n  (send nil :klass) :composite_primary_key?) values_at compact  map ","(send\n  (send nil :klass) :composite_ reflection association_primary_key ?) values_at compact ","(send\n  (send nil :klass) :composite_ reflection association_primary_key ?) values_at "," reflection association_primary_key  map ","query_(send\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (send\n          (send nil :reflection) :association_primary_key)\n        (lvar :ids)))) :index_by) values_at  index_by ","query_(send\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (send\n          (send nil :reflection) :association_primary_key)\n        (lvar :ids)))) :index_by) values_at compact  index_by ","query_(send\n  (send\n    (send nil :klass) :where\n    (hash\n      (pair\n        (lvar :primary_key)\n        (lvar :ids)))) :index_by) values_at compact  index_by ","query_(send\n  (send nil :klass) :composite_primary_key?) values_at compact  index_by ","(send\n  (lvar :ids) :map) inject  index_by ","(send\n  (lvar : Array reject ) :map) inject ","(send\n  (lvar : Array compact_blank ) :map) inject "," reflection association_primary_key  zip to_h "," reflection association_primary_key  zip "," Array reject  map "," Array compact_blank  map "," klass composite_ reflection association_primary_key ? "]}," ActiveRecord Associations CollectionAssociation ids_reader":{"type":"method","name":"ids_reader","children":[],"call":["record send "," reflection association_primary_key "," reflection "," scoped select except map! "," scoped select except "," scoped select "," scoped "," reflection quoted_table_name "," load_target map "," load_target "," options [] "," options "," loaded? ","relation uniq pluck ","relation uniq ","association join_relation ","join_dependency join_associations inject ","join_dependency join_associations ","ActiveRecord Associations JoinDependency  new "," reflection klass ","including any? ","(send\n  (send\n    (lvar :relation) :eager_load_values) :+\n  (send\n    (lvar :relation) :includes_values)) uniq ","relation eager_load_values + ","relation includes_values ","relation eager_load_values ","relation pluck "," owner new_record? "," owner "," scope pluck "," scope "," target pluck "," target "," load_target pluck "," target empty? ! "," target empty? "," scoped  uniq pluck "," scoped  uniq ","association join_ scoped  ","ActiveRecord Associations JoinDependency  new  join_associations inject ","ActiveRecord Associations JoinDependency  new  join_associations ","(send\n  (send\n    (lvar :relation) :eager_load_values) :+\n  (send\n    (lvar :relation) :includes_values)) uniq  any? ","(send\n  (send\n    (lvar : scoped ) :eager_load_values) :+\n  (send\n    (lvar : scoped ) :includes_values)) uniq "," scoped  eager_load_values + "," scoped  includes_values "," scoped  eager_load_values "," scoped  pluck "]}," ActiveRecord Associations CollectionAssociation writer":{"type":"method","name":"writer","children":[],"call":[" replace "]}," ActiveRecord Associations CollectionAssociation reader":{"type":"method","name":"reader","children":[],"call":[" proxy "," reload "," stale_target? "," klass uncached "," klass ","CollectionProxy  new "," owner new_record? "," owner ","CollectionProxy  create "," null_scope? ","ActiveSupport Deprecation  warn ","(str \"            Passing an argument to force an association to reload is now\\n\") squish ","@proxy reset_scope "," ensure_klass_exists! "]}," ActiveRecord Associations CollectionAssociation initialize":{"type":"method","name":"initialize","children":[],"call":["CollectionProxy  new ","CollectionProxy  create "," klass "]}," Builder SingularAssociation define_constructors":{"type":"method","name":"define_constructors","children":[],"call":[" association create! "," association "," model redefine_method "," model "," association create "," association build "," name "," mixin redefine_method "," mixin "," mixin class_eval ","17 + ","  name  "]}," Builder SingularAssociation define_readers":{"type":"method","name":"define_readers","children":[],"call":[" association loaded? "," association ","ActiveSupport Deprecation  warn "," model redefine_method "," model "," name ","  name  "]}," Builder SingularAssociation define_accessors":{"type":"method","name":"define_accessors","children":[],"call":[" define_constructors "," constructable? "]}," Builder SingularAssociation constructable?":{"type":"method","name":"constructable?","children":[],"call":[]}," Builder HasOne define_restrict_dependency_method":{"type":"method","name":"define_restrict_dependency_method","children":[],"call":[" raise ","ActiveRecord DeleteRestrictionError  new "," send nil? "," send "," model redefine_method "," dependency_method_name "," model "," name "," mixin redefine_method "," mixin "," dependency_method_ name  ","  name  "]}," Builder HasOne define_destroy_dependency_method":{"type":"method","name":"define_destroy_dependency_method","children":[],"call":[" model send ","47 + "," name to_sym inspect "," name to_sym "," name "," dependency_method_name "," model "," association delete "," association "," mixin redefine_method "," mixin ","  name  to_sym inspect ","  name  to_sym ","  name  "," dependency_method_ name  "]}," Builder HasOne dependency_method_name":{"type":"method","name":"dependency_method_name","children":[],"call":[" name "," options [] "," options "]}," Builder HasOne configure_dependency":{"type":"method","name":"configure_dependency","children":[],"call":[" model before_destroy "," dependency_method_name "," model "," send "," options [] "," options "," raise "," options [] inspect "," options [] in? "]}," Builder HasOne validate_options":{"type":"method","name":"validate_options","children":[],"call":[" options assert_valid_keys "," options "," class through_options "," class "," options [] "," class valid_options "," class  class valid_options  "]}," Builder HasOne build":{"type":"method","name":"build","children":[],"call":[" configure_dependency "," options [] "," options "]}," Builder HasOne constructable?":{"type":"method","name":"constructable?","children":[],"call":[" options [] ! "," options [] "," options "]}," Builder HasMany dependency_method_name":{"type":"method","name":"dependency_method_name","children":[],"call":[" name "]}," Builder HasMany define_restrict_dependency_method":{"type":"method","name":"define_restrict_dependency_method","children":[],"call":[" raise ","ActiveRecord DeleteRestrictionError  new "," send empty? "," send "," model send "," dependency_method_name "," model "," name "," mixin redefine_method "," mixin "," dependency_method_ name  ","  name  "]}," Builder HasMany define_delete_all_dependency_method":{"type":"method","name":"define_delete_all_dependency_method","children":[],"call":[" send delete_all "," send "," model send "," dependency_method_name "," model "," name "," association delete_all_on_destroy "," association "," mixin redefine_method "," mixin "," dependency_method_ name  ","  name  "]}," Builder HasMany define_destroy_dependency_method":{"type":"method","name":"define_destroy_dependency_method","children":[],"call":[" send delete_all "," send ","(lvar :o) send ","Proc  new ","o respond_to? ","(send\n  (str \"belongs_to_counter_cache_before_destroy_for_\") :+\n  (send\n    (send\n      (send\n        (self) :class) :name) :downcase)) to_sym ","belongs_to_counter_cache_before_destroy_for_ + "," class name downcase "," class name "," class "," send each "," model send "," dependency_method_name "," model "," name "," mixin redefine_method "," mixin ","(send\n  (str \"belongs_to_counter_cache_before_destroy_for_\") :+\n  (send\n    (send\n      (send\n        (self) :class) : name ) :downcase)) to_sym "," class  name  downcase "," class  name  "," dependency_method_ name  ","  name  "]}," Builder HasMany configure_dependency":{"type":"method","name":"configure_dependency","children":[],"call":[" model before_destroy "," dependency_method_name "," model "," send "," options [] "," options "," raise "," options [] inspect "," options [] in? "]}," Builder HasMany build":{"type":"method","name":"build","children":[],"call":[" configure_dependency "]}," Builder HasAndBelongsToMany join_table_name":{"type":"method","name":"join_table_name","children":[],"call":[" model table_name_prefix + + "," model table_name_suffix "," model "," model table_name_prefix + "," model table_name_prefix ","first_table_name < "]}," Builder HasAndBelongsToMany check_validity":{"type":"method","name":"check_validity","children":[],"call":[" raise ","ActiveRecord HasAndBelongsToManyAssociationWithPrimaryKeyError  new "," model connection primary_key ","reflection options [] ","reflection options "," model connection "," model "," model connection supports_primary_key? "," join_table_name "," model send ","reflection class_name "," model to_s ","ActiveRecord HasAndBelongsToManyAssociationForeignKeyNeeded  new ","reflection association_foreign_key == ","reflection foreign_key ","reflection association_foreign_key "]}," Builder HasAndBelongsToMany define_destroy_hook":{"type":"method","name":"define_destroy_hook","children":[],"call":[" model send "," class_eval ","19 + ","name to_sym inspect ","name to_sym ","Module  new "," model "," name ","29 + ","30 + "," name  to_sym inspect "," name  to_sym ","  name  "]}," Builder HasAndBelongsToMany build":{"type":"method","name":"build","children":[],"call":[" define_destroy_hook "," check_validity "," define_after_destroy_method "]}," Builder CollectionAssociation define_writers":{"type":"method","name":"define_writers","children":[],"call":[" association ids_writer "," association "," model redefine_method ","name to_s singularize ","name to_s "," model "," name "," mixin redefine_method "," mixin "," mixin class_eval ","82 + "," name to_s singularize "," name to_s "," name  to_s singularize "," name  to_s ","  name  ","  name  to_s singularize ","  name  to_s "]}," Builder CollectionAssociation define_readers":{"type":"method","name":"define_readers","children":[],"call":[" association ids_reader "," association "," model redefine_method ","name to_s singularize ","name to_s "," model "," name "," mixin redefine_method "," mixin "," mixin class_eval ","72 + "," name to_s singularize "," name to_s "," name  to_s singularize "," name  to_s ","  name  ","  name  to_s singularize ","  name  to_s "]}," Builder CollectionAssociation define_callback":{"type":"method","name":"define_callback","children":[],"call":[" model send ","Array  wrap "," options [] ","callback_name to_sym "," options "," model "," model class_attribute ","full_callback_name to_sym "," model method_defined? "," name "," Array "]}," Builder CollectionAssociation extension_module_name":{"type":"method","name":"extension_module_name","children":[],"call":[" name to_s camelize "," name to_s "," name "," model to_s demodulize "," model to_s "," model "," model name demodulize "," model name "]}," Builder CollectionAssociation wrap_block_extension":{"type":"method","name":"wrap_block_extension","children":[],"call":[" options [] push ","(begin\n  (send\n    (send nil :model) :parent)) constantize "," extension_module_name "," model parent "," model "," options [] "," options "," model parent const_set ","Module  new "," block_extension "," silence_warnings "," options []= ","Array  wrap "," extending "," proc "," instance_exec extending "," instance_exec ","(begin\n  (send\n    (send nil :Module  new el) :parent)) constantize "," extension_Module  new ule_name "," Module  new el parent "," Module  new el "," Module  new el parent const_set "]}," Builder CollectionAssociation writable?":{"type":"method","name":"writable?","children":[],"call":[]}," Builder CollectionAssociation build":{"type":"method","name":"build","children":[],"call":[" define_callback ","CALLBACKS  each "," wrap_block_extension "," show_deprecation_warnings "]}," Builder CollectionAssociation initialize":{"type":"method","name":"initialize","children":[],"call":[" wrap_scope ","Module  new ","Proc  new "," block_given? "]}," Builder BelongsTo configure_dependency":{"type":"method","name":"configure_dependency","children":[],"call":[" model after_destroy "," model "," model send ","75 + "," options [] "," options "," name "," raise "," options [] inspect "," options [] in? ","78 + "]}," Builder BelongsTo add_touch_callbacks":{"type":"method","name":"add_touch_callbacks","children":[],"call":[" model after_destroy "," model "," model after_touch "," model after_save ","record touch ","touch == ","record nil? "," send "," model redefine_method "," options [] "," options "," name "," mixin redefine_method "," mixin "," mixin class_eval ","68 + "," options [] inspect "," options [] != "," name inspect ","reflection foreign_key inspect ","reflection foreign_key ","47 + ","70 + ","69 + ","reflection foreign_type "," model after_ options []  "," send  touch ","record  options []  "," options []  == "," send  nil? ","  name  ","  name  inspect "]}," Builder BelongsTo add_counter_cache_callbacks":{"type":"method","name":"add_counter_cache_callbacks","children":[],"call":[" model send ","reflection class_name "," model "," model before_destroy ","record class decrement_counter ","record id ","record class ","record nil? "," send "," model redefine_method "," model after_create ","record class increment_counter "," name ","reflection counter_cache_column "," mixin redefine_method "," mixin "," destroyed? ! "," destroyed? ","klass attr_readonly ","klass respond_to? ","reflection class_name safe_constantize "," model after_update "," mixin class_eval ","26 + "," name to_s camelize "," name to_s ","foreign_key to_sym inspect ","foreign_key to_sym ","reflection foreign_key ","25 + ","27 + "," constructable? ","reflection class_ name  "," send  class decrement_counter "," send  id "," send  class "," send  nil? "," send  class increment_counter ","  name  ","reflection counter_reflection counter_cache_column  ","reflection class_name safe_constantize  attr_readonly ","reflection class_name safe_constantize  respond_to? ","reflection class_ name  safe_constantize ","  name  to_s camelize ","  name  to_s ","reflection foreign_key  to_sym inspect ","reflection foreign_key  to_sym ","reflection reflection foreign_key  "]}," Builder BelongsTo build":{"type":"method","name":"build","children":[],"call":[" configure_dependency "," add_touch_callbacks "," options [] "," options "," add_counter_cache_callbacks "]}," Builder BelongsTo constructable?":{"type":"method","name":"constructable?","children":[],"call":[" options [] ! "," options [] "," options "]}," Builder Association define_writers":{"type":"method","name":"define_writers","children":[],"call":[" association writer "," association "," model redefine_method "," model "," name "," mixin redefine_method "," mixin "," mixin class_eval ","76 + ","  name  "]}," Builder Association define_readers":{"type":"method","name":"define_readers","children":[],"call":[" association reader "," association "," model redefine_method "," model "," name "," mixin redefine_method "," mixin "," mixin class_eval ","68 + ","  name  "]}," Builder Association define_accessors":{"type":"method","name":"define_accessors","children":[],"call":[" define_writers "," define_readers "]}," Builder Association validate_options":{"type":"method","name":"validate_options","children":[],"call":[" options assert_valid_keys "," class valid_options "," class "," options "," valid_options "]}," Builder Association build":{"type":"method","name":"build","children":[],"call":[" define_accessors "," model create_reflection "," model "," options "," name "," class macro "," class "," validate_options "," scope "," macro "," configure_dependency "," options [] ","ActiveRecord Reflection  create "," model create_ model create_reflection  "]}," Builder Association initialize":{"type":"method","name":"initialize","children":[],"call":[" instance_exec "," proc ","@scope arity == ","@scope arity ","scope is_a? "," raise ","name kind_of? ","scope arity == ","scope arity "," validate_options "]}," ActiveRecord Associations BelongsToPolymorphicAssociation stale_state":{"type":"method","name":"stale_state","children":[],"call":[" owner [] to_s "," owner [] "," reflection foreign_type "," reflection "," owner ","foreign_key to_s "]}," ActiveRecord Associations BelongsToPolymorphicAssociation raise_on_type_mismatch":{"type":"method","name":"raise_on_type_mismatch","children":[],"call":[]}," ActiveRecord Associations BelongsToPolymorphicAssociation inverse_reflection_for":{"type":"method","name":"inverse_reflection_for","children":[],"call":[" reflection polymorphic_inverse_of ","record class "," reflection "]}," ActiveRecord Associations BelongsToPolymorphicAssociation different_target?":{"type":"method","name":"different_target?","children":[],"call":["record class != "," klass ","record class "]}," ActiveRecord Associations BelongsToPolymorphicAssociation replace_keys":{"type":"method","name":"replace_keys","children":[],"call":[" owner []= ","record class base_class name ","record class base_class ","record class "," reflection foreign_type "," reflection "," owner ","record class polymorphic_name "," owner [] != "," owner [] "," owner _read_attribute != "," owner _read_attribute "]}," ActiveRecord Associations BelongsToPolymorphicAssociation klass":{"type":"method","name":"klass","children":[],"call":["type constantize ","type presence "," owner [] "," reflection foreign_type "," reflection "," owner "," owner class polymorphic_class_for "," owner class "," owner []  constantize "," owner []  presence "," reflection foreign_ owner []  "]}," ActiveRecord Associations BelongsToAssociation stale_state":{"type":"method","name":"stale_state","children":[],"call":[" owner [] to_s "," owner [] "," reflection foreign_key "," reflection "," owner ","result to_s "," owner _read_attribute "," owner send "," caller "," owner _read_attribute  to_s "]}," ActiveRecord Associations BelongsToAssociation target_id":{"type":"method","name":"target_id","children":[],"call":[" owner [] "," reflection foreign_key "," reflection "," owner "," owner send try "," owner send "," reflection name "," options [] "," options "," owner _read_attribute "]}," ActiveRecord Associations BelongsToAssociation invertible_for?":{"type":"method","name":"invertible_for?","children":[],"call":["inverse macro == ","inverse macro "," inverse_reflection_for ","inverse has_one? ","ActiveRecord Base  has_many_inversing ","inverse klass has_many_inversing ","inverse klass "," inverse_reflection_for  macro == "," inverse_reflection_for  macro ","  inverse_reflection_for _reflection_for "," inverse_reflection_for  has_one? "," inverse_reflection_for  klass has_many_inversing "," inverse_reflection_for  klass "]}," ActiveRecord Associations BelongsToAssociation foreign_key_present?":{"type":"method","name":"foreign_key_present?","children":[],"call":[" owner [] "," reflection foreign_key "," reflection "," owner "," owner _read_attribute "," Array all? "," Array "]}," ActiveRecord Associations BelongsToAssociation replace_keys":{"type":"method","name":"replace_keys","children":[],"call":[" owner []= ","record [] "," reflection association_primary_key "," reflection "," reflection foreign_key "," owner ","record class ","record _read_attribute "," primary_key "," owner [] != "," owner [] "," owner _read_attribute != "," owner _read_attribute ","reflection_fk zip each ","reflection_fk zip ","(send\n  (lvar :reflection_fk) :map) != ","reflection_fk map "," Array "," Array map "," Array  zip each "," Array  zip ","(send\n  (lvar : Array ) :map) != "," Array  map "]}," ActiveRecord Associations BelongsToAssociation different_target?":{"type":"method","name":"different_target?","children":[],"call":["record id != "," owner [] "," reflection foreign_key "," reflection "," owner ","record id ","record nil? "," owner _read_attribute ","record _read_attribute != ","record _read_attribute "," primary_key "]}," ActiveRecord Associations BelongsToAssociation update_counters":{"type":"method","name":"update_counters","children":[],"call":[" klass decrement_counter "," target_id "," klass "," foreign_key_present? ","record class increment_counter ","record id ","record class "," different_target? "," owner persisted? "," owner "," reflection counter_cache_column "," reflection "," decrement_counter "," with_cache_name "," klass update_counters "," target increment! "," target "," stale_target? ! "," stale_target? "," require_counter_update? "," reflection options [] "," reflection options "," update_counters_via_scope "," owner _read_attribute "," reflection foreign_key "]}," ActiveRecord Associations AssociationScope table_name_for":{"type":"method","name":"table_name_for","children":[],"call":["reflection table_name "," klass table_name "," klass ","reflection == "," reflection ","klass table_name "]}," ActiveRecord Associations AssociationScope alias_suffix":{"type":"method","name":"alias_suffix","children":[],"call":[" reflection name "," reflection ","refl name "]}," ActiveRecord Associations AssociationScope add_constraints":{"type":"method","name":"add_constraints","children":[],"call":["scope where "," sanitize ","conditions empty? ","scope joins "," join ","constraint and ","table [] eq ","table [] ","reflection type "," chain [] klass base_class name "," chain [] klass base_class "," chain [] klass "," chain [] ","i + "," chain ","foreign_table [] "," interpolate ","table name ","condition is_a? "," options [] "," options ","conditions each "," owner class base_class name "," owner class base_class "," owner class "," owner "," owner [] ","reflection == "," chain last "," conditions [] "," conditions ","reflection active_record_primary_key ","reflection foreign_key ","reflection association_primary_key ","reflection source_macro == ","reflection source_macro ","tables first ","join_table [] ","reflection association_foreign_key ","tables shift "," chain each_with_index "," construct_tables "," conditions [] empty? "," conditions [] each "," klass ","reflection options [] ","reflection options "," disambiguate_condition ","item order_values ","scope order_values ","item where_values ","scope where_values ","scope includes! ","item includes_values ","scope merge! ","item except ","scope_chain_item == "," reflection scope "," reflection "," eval_scope ","reflection klass ","i == "," scope_chain [] each "," scope_chain [] "," scope_chain "," bind ","reflection type to_s ","table table_name ","key to_s ","refl scope ","scope_chain [] each ","scope_chain [] ","chain [] klass base_class name ","chain [] klass base_class ","chain [] klass ","chain [] ","owner class base_class name ","owner class base_class ","owner class ","owner [] ","chain last ","chain each_with_index ","refl scope_chain ","refl chain ","item bind_values ","scope bind_values "," next_chain_scope "," last_chain_scope ","tables last ","join_keys foreign_key ","join_keys key ","reflection join_keys ","scope unscope! ","item unscope_values ","reflection next ","item where_clause ","scope where_clause ","reflection all_includes ","reflection constraints each ","reflection constraints ","next_reflection alias_name ","reflection alias_name "," loop ","owner_reflection alias_name ","scope order_values= ","item order_values | ","chain_head scope ","chain reverse_each ","chain first ","chain each_cons ","scope left_outer_joins! ","item left_outer_joins_values ","scope joins! ","item joins_values ","item construct_join_dependency ","item eager_load_values | ","item eager_load_values ","item references_values empty? ! ","item references_values empty? ","item references_values ","scope includes_values ","associations empty? ","item only ","scope where  where ","scope joins  where "," next_chain_scope  where "," last_chain_scope  where "," conditions []  empty? "," disambiguate_condition s empty? ","scope where  joins ","scope joins  joins "," next_chain_scope  joins "," last_chain_scope  joins ","scope  join s ","  join  ","constraint and  and ","table [] eq  and ","tables last  [] eq ","reflection alias_name  [] eq ","owner_reflection alias_name  [] eq ","tables last  [] ","reflection alias_name  [] ","owner_reflection alias_name  [] ","reflection  chain [] klass base_class name  ","reflection next  type "," chain [] reflection klass  base_class name "," chain []  klass  base_class name "," refl chain  [] klass base_class name "," chain [] reflection klass  base_class "," chain []  klass  base_class "," refl chain  [] klass base_class "," chain [] reflection klass  "," chain []  klass  "," refl chain  [] klass "," refl chain  [] "," refl chain  ","foreign_tables last  [] ","foreign_reflection alias_name  [] ","foreign_owner_reflection alias_name  [] ","next_reflection alias_name  [] ","tables last  name ","reflection alias_name  name ","owner_reflection alias_name  name "," disambiguate_condition  is_a? "," conditions []  each "," disambiguate_condition s each ","reflection next  == "," refl chain  last ","  conditions []  [] ","  disambiguate_condition s [] ","  conditions []  ","  disambiguate_condition s ","reflection active_record_primary_reflection foreign_key  ","reflection active_record_primary_reflection association_primary_key  ","reflection active_record_primary_join_keys key  ","reflection next  active_record_primary_key ","reflection reflection active_record_primary_key  ","reflection reflection foreign_key  ","reflection join_keys foreign_key  ","reflection foreign_reflection foreign_key  ","reflection foreign_reflection association_primary_key  ","reflection foreign_join_keys key  ","reflection next  foreign_key ","reflection association_primary_reflection foreign_key  ","reflection association_primary_reflection association_primary_key  ","reflection association_primary_join_keys key  ","reflection next  association_primary_key ","reflection next  source_macro == ","reflection next  source_macro "," construct_tables  first ","tables last s first ","reflection alias_name s first ","owner_reflection alias_name s first ","tables shift  [] "," join _table [] ","join_tables last  [] ","join_reflection alias_name  [] ","join_owner_reflection alias_name  [] ","reflection association_reflection active_record_primary_key  ","reflection association_reflection foreign_key  ","reflection association_join_keys foreign_key  ","reflection association_foreign_reflection foreign_key  ","reflection association_foreign_reflection association_primary_key  ","reflection association_foreign_join_keys key  ","reflection next  association_foreign_key "," construct_tables  shift ","tables last s shift ","reflection alias_name s shift ","owner_reflection alias_name s shift "," refl chain  each_with_index "," construct_ construct_tables  "," construct_tables last s "," construct_reflection alias_name s "," construct_owner_reflection alias_name s ","  conditions []  [] empty? ","  disambiguate_condition s [] empty? ","  conditions []  [] each ","  disambiguate_condition s [] each "," reflection klass  ","  klass  ","reflection next  options [] ","reflection next  options "," disambiguate_ disambiguate_condition  "," eval_scope  order_values ","item order_ owner class base_class name s ","item order_chain [] klass base_class name s ","item order_owner class base_class name s ","item order_ chain [] klass base_class name s ","scope where  order_values ","scope joins  order_values "," next_chain_scope  order_values "," last_chain_scope  order_values ","scope order_ owner class base_class name s ","scope order_chain [] klass base_class name s ","scope order_owner class base_class name s ","scope order_ chain [] klass base_class name s "," eval_scope  where_values ","item where_ owner class base_class name s ","item where_chain [] klass base_class name s ","item where_owner class base_class name s ","item where_ chain [] klass base_class name s ","scope where  where_values ","scope joins  where_values "," next_chain_scope  where_values "," last_chain_scope  where_values ","scope where_ owner class base_class name s ","scope where_chain [] klass base_class name s ","scope where_owner class base_class name s ","scope where_ chain [] klass base_class name s ","scope where  includes! ","scope joins  includes! "," next_chain_scope  includes! "," last_chain_scope  includes! "," eval_scope  includes_values ","item includes_ owner class base_class name s ","item includes_chain [] klass base_class name s ","item includes_owner class base_class name s ","item includes_ chain [] klass base_class name s ","scope where  merge! ","scope joins  merge! "," next_chain_scope  merge! "," last_chain_scope  merge! "," eval_scope  except ","scope where _chain_item == ","scope joins _chain_item == "," next_chain_scope _chain_item == "," last_chain_scope _chain_item == ","scope_chain_ eval_scope  == ","refl scope_chain _item == ","scope_refl chain _item == "," reflection scope where  "," reflection scope joins  "," reflection  next_chain_scope  "," reflection  last_chain_scope  "," reflection next  scope "," reflection next  "," eval_scope where  "," eval_scope joins  "," eval_ next_chain_scope  "," eval_ last_chain_scope  ","reflection reflection klass  ","reflection  klass  ","reflection next  klass "," scope where _chain [] each "," scope joins _chain [] each ","  next_chain_scope _chain [] each ","  last_chain_scope _chain [] each "," refl scope_chain  [] each "," scope_refl chain  [] each "," scope where _chain [] "," scope joins _chain [] ","  next_chain_scope _chain [] ","  last_chain_scope _chain [] "," refl scope_chain  [] "," scope_refl chain  [] "," scope where _chain "," scope joins _chain ","  next_chain_scope _chain ","  last_chain_scope _chain "," refl scope_chain  "," scope_refl chain  ","reflection  chain [] klass base_class name  to_s ","reflection next  type to_s ","tables last  tables last _name ","reflection alias_name  reflection alias_name _name ","owner_reflection alias_name  owner_reflection alias_name _name ","reflection foreign_key  to_s ","reflection association_primary_key  to_s ","join_keys key  to_s ","refl scope where  ","refl scope joins  ","refl  next_chain_scope  ","refl  last_chain_scope  ","scope where _chain [] each ","scope joins _chain [] each "," next_chain_scope _chain [] each "," last_chain_scope _chain [] each ","refl scope_chain  [] each ","scope_refl chain  [] each ","scope where _chain [] ","scope joins _chain [] "," next_chain_scope _chain [] "," last_chain_scope _chain [] ","refl scope_chain  [] ","scope_refl chain  [] ","chain [] reflection klass  base_class name ","chain []  klass  base_class name ","refl chain  [] klass base_class name ","chain [] reflection klass  base_class ","chain []  klass  base_class ","refl chain  [] klass base_class ","chain [] reflection klass  ","chain []  klass  ","refl chain  [] klass ","refl chain  [] ","refl chain  last ","refl chain  each_with_index ","refl scope where _chain ","refl scope joins _chain ","refl  next_chain_scope _chain ","refl  last_chain_scope _chain ","refl refl scope_chain  ","refl scope_refl chain  ","refl refl chain  "," eval_scope  bind_values ","item  bind ues ","item bind_ owner class base_class name s ","item bind_chain [] klass base_class name s ","item bind_owner class base_class name s ","item bind_ chain [] klass base_class name s ","scope where  bind_values ","scope joins  bind_values "," next_chain_scope  bind_values "," last_chain_scope  bind_values ","scope  bind ues ","scope bind_ owner class base_class name s ","scope bind_chain [] klass base_class name s ","scope bind_owner class base_class name s ","scope bind_ chain [] klass base_class name s "," next_chain_scope where  "," next_chain_scope joins  "," next_chain_ next_chain_scope  "," next_chain_ last_chain_scope  "," next_refl chain _scope "," last_chain_scope where  "," last_chain_scope joins  "," last_chain_ next_chain_scope  "," last_chain_ last_chain_scope  "," last_refl chain _scope "," construct_tables  last ","tables last s last ","reflection alias_name s last ","owner_reflection alias_name s last ","join_keys reflection active_record_primary_key  ","join_keys reflection foreign_key  ","join_keys join_keys foreign_key  ","join_reflection foreign_key s foreign_reflection foreign_key  ","join_reflection association_primary_key s foreign_reflection association_primary_key  ","join_join_keys key s foreign_join_keys key  "," join _keys foreign_key ","reflection join_keys  foreign_key ","join_reflection foreign_key s reflection foreign_key  ","join_reflection association_primary_key s reflection association_primary_key  ","join_join_keys key s join_keys key  "," join _keys key ","reflection join_keys  key ","reflection join_reflection foreign_key s ","reflection join_reflection association_primary_key s ","reflection join_join_keys key s ","reflection  join _keys ","reflection reflection join_keys  ","reflection next  join_keys ","scope where  unscope where ! ","scope joins  unscope joins ! "," next_chain_scope  un next_chain_scope ! "," last_chain_scope  un last_chain_scope ! ","item unscope where _values ","item unscope joins _values ","item un next_chain_scope _values ","item un last_chain_scope _values "," eval_scope  unscope_values ","item unscope_ owner class base_class name s ","item unscope_chain [] klass base_class name s ","item unscope_owner class base_class name s ","item unscope_ chain [] klass base_class name s ","reflection next  next "," eval_scope  where_clause ","scope where  where_clause ","scope joins  where_clause "," next_chain_scope  where_clause "," last_chain_scope  where_clause ","reflection next  all_includes ","reflection constraint and s each ","reflection table [] eq s each ","reflection next  constraints each ","reflection constraint and s ","reflection table [] eq s ","reflection next  constraints ","chain []  alias_name ","reflection next  alias_name ","next_reflection next  alias_name ","chain last  alias_name ","owner_reflection next  alias_name ","scope where  order_values= ","scope joins  order_values= "," next_chain_scope  order_values= "," last_chain_scope  order_values= ","scope order_ owner class base_class name s= ","scope order_chain [] klass base_class name s= ","scope order_owner class base_class name s= ","scope order_ chain [] klass base_class name s= "," eval_scope  order_values | ","item order_ owner class base_class name s | ","item order_chain [] klass base_class name s | ","item order_owner class base_class name s | ","item order_ chain [] klass base_class name s | ","chain_head scope where  ","chain_head scope joins  ","chain_head  next_chain_scope  ","chain_head  last_chain_scope  ","refl chain _head scope ","chain first  scope ","refl chain  reverse_each ","refl chain  first ","refl chain  each_cons ","scope where  left_outer_joins! ","scope joins  left_outer_joins! "," next_chain_scope  left_outer_joins! "," last_chain_scope  left_outer_joins! ","scope left_outer_ join s! ","item left_outer_ join s_values "," eval_scope  left_outer_joins_values ","item left_outer_joins_ owner class base_class name s ","item left_outer_joins_chain [] klass base_class name s ","item left_outer_joins_owner class base_class name s ","item left_outer_joins_ chain [] klass base_class name s ","scope where  joins! ","scope joins  joins! "," next_chain_scope  joins! "," last_chain_scope  joins! ","scope  join s! ","item  join s_values "," eval_scope  joins_values ","item joins_ owner class base_class name s ","item joins_chain [] klass base_class name s ","item joins_owner class base_class name s ","item joins_ chain [] klass base_class name s ","item construct_ join _dependency "," eval_scope  construct_join_dependency ","item construct_item construct_join_dependency  "," eval_scope  eager_load_values | ","item eager_load_ owner class base_class name s | ","item eager_load_chain [] klass base_class name s | ","item eager_load_owner class base_class name s | ","item eager_load_ chain [] klass base_class name s | "," eval_scope  eager_load_values ","item eager_load_ owner class base_class name s ","item eager_load_chain [] klass base_class name s ","item eager_load_owner class base_class name s ","item eager_load_ chain [] klass base_class name s "," eval_scope  references_values empty? ! ","item references_ owner class base_class name s empty? ! ","item references_chain [] klass base_class name s empty? ! ","item references_owner class base_class name s empty? ! ","item references_ chain [] klass base_class name s empty? ! "," eval_scope  references_values empty? ","item references_ owner class base_class name s empty? ","item references_chain [] klass base_class name s empty? ","item references_owner class base_class name s empty? ","item references_ chain [] klass base_class name s empty? "," eval_scope  references_values ","item references_ owner class base_class name s ","item references_chain [] klass base_class name s ","item references_owner class base_class name s ","item references_ chain [] klass base_class name s ","scope where  includes_values ","scope joins  includes_values "," next_chain_scope  includes_values "," last_chain_scope  includes_values ","scope includes_ owner class base_class name s ","scope includes_chain [] klass base_class name s ","scope includes_owner class base_class name s ","scope includes_ chain [] klass base_class name s ","item eager_load_values |  empty? "," eval_scope  only "]}," ActiveRecord Associations AssociationScope select_value":{"type":"method","name":"select_value","children":[],"call":[" reflection klass arel_table [] ","Arel  star "," reflection klass arel_table "," reflection klass "," reflection "," reflection macro == "," reflection macro "," reflection quoted_table_name "," options [] "," options "," reflection collection? "]}," ActiveRecord Associations AssociationScope scope":{"type":"method","name":"scope","children":[],"call":[" add_constraints ","scope select "," select_value ","scope includes "," source_options [] "," source_options "," options [] ! "," options [] "," options ","scope apply_finder_options "," options slice ","scope extending ","Array  wrap "," klass unscoped "," klass ","scope uniq ","scope extending! "," Array ","reflection options [] ","reflection options ","AliasTracker  empty ","association owner ","klass unscoped ","association reflection ","association klass "," get_chain ","AliasTracker  create ","klass type_caster ","association klass table_name ","reflection extensions ","scope alias_tracker ","scope limit! ","reflection collection? ","scope select  select ","scope includes  select ","scope apply_finder_options  select ","scope extending  select "," klass unscoped  select ","scope uniq  select ","klass unscoped  select "," add_constraints  select ","scope  select_value  ","  select_value _value ","scope select  includes ","scope includes  includes ","scope apply_finder_options  includes ","scope extending  includes "," klass unscoped  includes ","scope uniq  includes ","klass unscoped  includes "," add_constraints  includes ","scope select  apply_finder_options ","scope includes  apply_finder_options ","scope apply_finder_options  apply_finder_options ","scope extending  apply_finder_options "," klass unscoped  apply_finder_options ","scope uniq  apply_finder_options ","klass unscoped  apply_finder_options "," add_constraints  apply_finder_options ","scope select  extending ","scope includes  extending ","scope apply_finder_options  extending ","scope extending  extending "," klass unscoped  extending ","scope uniq  extending ","klass unscoped  extending "," add_constraints  extending "," klass unscope select d "," klass unscope includes d "," klass unscope apply_finder_options d "," klass unscope extending d "," klass un klass unscoped d "," klass unscope uniq d "," klass unklass unscoped d "," klass un add_constraints d "," association klass  unscoped "," association klass  ","scope select  uniq ","scope includes  uniq ","scope apply_finder_options  uniq ","scope extending  uniq "," klass unscoped  uniq ","scope uniq  uniq ","klass unscoped  uniq "," add_constraints  uniq ","scope select  extending! ","scope includes  extending! ","scope apply_finder_options  extending! ","scope extending  extending! "," klass unscoped  extending! ","scope uniq  extending! ","klass unscoped  extending! "," add_constraints  extending! ","association reflection  options [] ","association reflection  options ","association association owner  ","klass unscope select d ","klass unscope includes d ","klass unscope apply_finder_options d ","klass unscope extending d ","klass un klass unscoped d ","klass unscope uniq d ","klass unklass unscoped d ","klass un add_constraints d ","association klass  unscoped ","association association reflection  ","association association klass  "," get_ get_chain  ","association klass  type_caster ","association association klass  table_name ","association reflection  extensions ","scope select  alias_tracker ","scope includes  alias_tracker ","scope apply_finder_options  alias_tracker ","scope extending  alias_tracker "," klass unscoped  alias_tracker ","scope uniq  alias_tracker ","klass unscoped  alias_tracker "," add_constraints  alias_tracker ","scope AliasTracker  empty  ","scope AliasTracker  create  ","scope select  limit! ","scope includes  limit! ","scope apply_finder_options  limit! ","scope extending  limit! "," klass unscoped  limit! ","scope uniq  limit! ","klass unscoped  limit! "," add_constraints  limit! ","association reflection  collection? "]}," ActiveRecord Associations AssociationScope initialize":{"type":"method","name":"initialize","children":[],"call":["AliasTracker  new "," klass connection "," klass "]}," ActiveRecord Associations Association build_record":{"type":"method","name":"build_record","children":[],"call":["ActiveSupport Deprecation  warn ","source [] ","method source_location ","RUBY_VERSION  >= "," reflection method "," reflection ","record assign_attributes "," create_scope except ","record changed "," create_scope ","(send\n  (send\n    (lvar :record) :changed) :&\n  (send\n    (send nil :create_scope) :keys)) != "," create_scope keys ","record changed & "," reflection original_build_association_called ! "," reflection original_build_association_called ","r assign_attributes ","r changed "," reflection build_association "," reflection original_build_association_called= ","(or\n  (lvar :attributes)\n  (hash)) reverse_merge "," creation_attributes ","record changed - "," reflection foreign_key ","(send\n  (send nil :reflection) :foreign_key) compact "," reflection type "," set_inverse_instance "," initialize_attributes "," block_given? ","method source_location  [] ","method method source_location _location "," reflection method  source_location "," reflection  reflection method  ","record assign_(or\n  (lvar :attributes)\n  (hash)) reverse_merge  ","record assign_ create_scope except  ","r assign_(or\n  (lvar :attributes)\n  (hash)) reverse_merge  ","r assign_ create_scope except  ","(or\n  (lvar :(or\n  (lvar :attributes)\n  (hash)) reverse_merge )\n  (hash)) reverse_merge ","(or\n  (lvar : create_scope except )\n  (hash)) reverse_merge "," creation_(or\n  (lvar :attributes)\n  (hash)) reverse_merge  "," creation_ create_scope except  "," initialize_(or\n  (lvar :attributes)\n  (hash)) reverse_merge  "," initialize_ create_scope except  "]}," ActiveRecord Associations Association association_class":{"type":"method","name":"association_class","children":[],"call":["@reflection klass "]}," ActiveRecord Associations Association stale_state":{"type":"method","name":"stale_state","children":[],"call":[]}," ActiveRecord Associations Association invertible_for?":{"type":"method","name":"invertible_for?","children":[],"call":[" inverse_reflection_for "," foreign_key_for? "]}," ActiveRecord Associations Association inverse_reflection_for":{"type":"method","name":"inverse_reflection_for","children":[],"call":[" reflection inverse_of "," reflection "]}," ActiveRecord Associations Association raise_on_type_mismatch":{"type":"method","name":"raise_on_type_mismatch","children":[],"call":[" raise ","record class object_id ","record class "," reflection klass object_id "," reflection klass "," reflection "," reflection class_name ","record is_a? "," reflection class_name constantize "]}," ActiveRecord Associations Association foreign_key_present?":{"type":"method","name":"foreign_key_present?","children":[],"call":[]}," ActiveRecord Associations Association set_owner_attributes":{"type":"method","name":"set_owner_attributes","children":[],"call":["record []= "," creation_attributes each "," creation_attributes "," owner persisted? "," owner "]}," ActiveRecord Associations Association creation_attributes":{"type":"method","name":"creation_attributes","children":[],"call":["attributes []= "," owner class base_class name "," owner class base_class "," owner class "," owner "," reflection type "," reflection "," reflection options [] "," reflection options "," owner [] "," reflection active_record_primary_key "," reflection foreign_key "," options [] ! "," options [] "," options "," reflection macro in? "," reflection macro "," reflection macro == "," reflection collection? "," reflection has_one? "," owner class polymorphic_name "]}," ActiveRecord Associations Association find_target?":{"type":"method","name":"find_target?","children":[],"call":[" klass "," foreign_key_present? "," owner new_record? ! "," owner new_record? "," owner "," loaded? ! "," loaded? "]}," ActiveRecord Associations Association interpolate":{"type":"method","name":"interpolate","children":[],"call":[" owner send "," owner ","sql respond_to? ","sql is_a? ! ","sql is_a? "," owner instance_exec "]}," ActiveRecord Associations Association load_target":{"type":"method","name":"load_target","children":[],"call":[" reset "," target "," loaded! "," loaded? "," find_target ","IdentityMap  get "," owner [] "," reflection foreign_key "," reflection "," owner "," association_class "," association_class respond_to? ","IdentityMap  enabled? "," find_target? "," stale_target? "]}," ActiveRecord Associations Association target_scope":{"type":"method","name":"target_scope","children":[],"call":[" klass scoped "," klass "," klass all ","scope default_scoped= ","all default_scoped? ","scope merge! ","AssociationRelation  new "," klass arel_table ","AssociationRelation  create merge! ","AssociationRelation  create "," klass predicate_builder "," klass scope_for_association "," klass AssociationRelation  new d "," klass  klass all  ","AssociationRelation  new  default_AssociationRelation  new d= ","all default_AssociationRelation  new d? "," klass all  default_scoped? ","AssociationRelation  new  merge! "," klass AssociationRelation  new _for_association "]}," ActiveRecord Associations Association klass":{"type":"method","name":"klass","children":[],"call":[" reflection klass "," reflection "]}," ActiveRecord Associations Association set_inverse_instance":{"type":"method","name":"set_inverse_instance","children":[],"call":["inverse target= "," owner ","record association "," inverse_reflection_for name "," inverse_reflection_for "," invertible_for? ","inverse inversed= ","inverse inversed_from "," inverse_association_for ","record association  target= "," inverse_association_for  target= "," record association _reflection_for name ","  inverse_association_for _reflection_for name "," record association _reflection_for ","  inverse_association_for _reflection_for ","record association  record association d= "," inverse_association_for   inverse_association_for d= ","record association  record association d_from "," inverse_association_for   inverse_association_for d_from "," record association _association_for ","  inverse_association_for _association_for "]}," ActiveRecord Associations Association reset_scope":{"type":"method","name":"reset_scope","children":[],"call":[]}," ActiveRecord Associations Association association_scope":{"type":"method","name":"association_scope","children":[],"call":["AssociationScope  new scope ","AssociationScope  new "," klass ","AssociationScope  scope "," klass connection ","DisableJoinsAssociationScope  scope "," disable_joins "]}," ActiveRecord Associations Association scoped":{"type":"method","name":"scoped","children":[],"call":[" target_scope merge "," association_scope "," target_scope "," scope ","ActiveSupport Deprecation  warn "]}," ActiveRecord Associations Association target=":{"type":"method","name":"target=","children":[],"call":[" loaded! "]}," ActiveRecord Associations Association stale_target?":{"type":"method","name":"stale_target?","children":[],"call":["@stale_state != "," stale_state "," loaded? "," inversed ! "," inversed ","@inversed ! "]}," ActiveRecord Associations Association loaded!":{"type":"method","name":"loaded!","children":[],"call":[" stale_state "]}," ActiveRecord Associations Association loaded?":{"type":"method","name":"loaded?","children":[],"call":[]}," ActiveRecord Associations Association reload":{"type":"method","name":"reload","children":[],"call":[" target nil? "," target "," load_target "," reset_scope "," reset "," construct_scope "," klass connection clear_query_cache "," klass connection "," klass "]}," ActiveRecord Associations Association reset":{"type":"method","name":"reset","children":[],"call":["IdentityMap  remove "," target ","IdentityMap  enabled? "]}," ActiveRecord Associations Association aliased_table_name":{"type":"method","name":"aliased_table_name","children":[],"call":[" reflection klass table_name "," reflection klass "," reflection "," klass table_name "," klass "]}," ActiveRecord Associations Association initialize":{"type":"method","name":"initialize","children":[],"call":[" reset_scope "," reset ","reflection check_validity! "," construct_scope ","@reflection options [] ","@reflection options "]}," ActiveRecord Associations AliasTracker connection":{"type":"method","name":"connection","children":[],"call":["ActiveRecord Base  connection "]}," ActiveRecord Associations AliasTracker truncate":{"type":"method","name":"truncate","children":[],"call":["name slice "," connection table_alias_length - "," connection table_alias_length "," connection ","name [] ","@connection table_alias_length - ","@connection table_alias_length "]}," ActiveRecord Associations AliasTracker initial_count_for":{"type":"method","name":"initial_count_for","children":[],"call":["(send\n  (send nil :table_joins) :map) sum ","join left downcase scan size ","join left downcase scan ","join left downcase ","join left "," table_joins map "," table_joins "," connection quote_table_name downcase "," connection quote_table_name "," connection ","Arel Table  === ","counts sum ","join left table_name == ","join left table_name ","join is_a? ","join respond_to? "]}," ActiveRecord Associations AliasTracker aliased_name_for":{"type":"method","name":"aliased_name_for","children":[],"call":[" aliases [] "," aliases "," truncate "," aliases [] > "," connection table_alias_for "," connection "," aliases []= "," aliases [] zero? "," initialize_count_for "," aliases [] nil? "]}," ActiveRecord Associations AliasTracker aliased_table_for":{"type":"method","name":"aliased_table_for","children":[],"call":["Arel Table  new alias ","Arel Table  new ","table_alias == "," aliased_name_for "," aliases [] "," aliases "," truncate "," aliases [] > "," connection table_alias_for "," connection "," aliases []= "," aliases [] zero? ","@connection table_alias_for ","arel_table alias ","count > ","arel_table name != ","arel_table name "," aliases [] == "," aliased_name_for  == ","  connection table_alias_for _for "," @connection table_alias_for _for "," connection  aliased_name_for _for ","@connection  aliased_name_for _for ","arel_table alias  alias ","arel_table alias  name != ","arel_table alias  name "]}," ActiveRecord Associations AliasTracker initialize":{"type":"method","name":"initialize","children":[],"call":["h []= "," initial_count_for ","Hash  new "]}," Fixtures table_rows":{"type":"method","name":"table_rows","children":[],"call":["rows []= ","rows [] concat ","Fixtures  identify ","association association_foreign_key ","row [] "," primary_key_name ","association foreign_key ","targets map ","rows [] ","association options [] ","association options ","targets split ","targets is_a? ","row delete ","association name to_s ","association name ","row []= ","association foreign_type ","value sub! ","association name to_s != ","(or\n  (send\n    (send\n      (lvar :association) :options) :[]\n    (sym :foreign_key))\n  (dstr\n    (begin\n      (send\n        (lvar :association) :name))\n    (str \"_id\"))) to_s ","association macro ","reflection_class reflect_on_all_associations each ","reflection_class reflect_on_all_associations "," model_class ","row [] constantize "," inheritance_column_name ","row include? ","row include? ! "," has_primary_key_column? ","value == ","row each ","row key? "," timestamp_column_names each "," timestamp_column_names "," model_class record_timestamps "," model_class < ","fixture to_hash "," fixtures map "," fixtures "," table_name ","h []= ","Hash  new "," fixtures delete ","now to_s ","Time  now ","Time  now utc ","ActiveRecord Base  default_timezone == ","ActiveRecord Base  default_timezone ","fixture to_hash s []= ","fixture to_hash s [] concat ","fixture to_hash  [] ","targets split  map ","row delete  map ","fixture to_hash s [] ","targets split  split ","row delete  split ","targets split  is_a? ","row delete  is_a? ","fixture to_hash  delete ","fixture to_hash  []= ","row delete  sub! "," model_class  reflect_on_all_associations each "," model_class  reflect_on_all_associations ","fixture to_hash  [] constantize ","fixture to_hash  include? ","fixture to_hash  include? ! ","row delete  == ","fixture to_hash  each ","fixture to_hash  key? "," association options []  ","now to_s  to_s ","Time  now  to_s ","Time  now utc  to_s ","Time  now to_s  ","Time  Time  now  ","Time  Time  now utc  ","Time  now to_s  utc ","Time  Time  now  utc ","Time  Time  now utc  utc "]}," Fixtures size":{"type":"method","name":"size","children":[],"call":[" fixtures size "," fixtures "]}," Fixtures each":{"type":"method","name":"each","children":[],"call":[" fixtures each "," fixtures "]}," Fixtures find_table_name":{"type":"method","name":"find_table_name","children":[],"call":[]}," ActiveRecord Base _dump":{"type":"method","name":"_dump","children":[],"call":["Marshal  dump "," encode_with "]}," ActiveRecord Base _load":{"type":"method","name":"_load","children":[],"call":["record init_with ","Marshal  load "," allocate "," allocate  init_with "]}," ActiveRecord Associations SingularAssociation new_record":{"type":"method","name":"new_record","children":[],"call":[" set_new_record "," reflection send "," reflection "," scoped scope_for_create merge "," scoped scope_for_create "," scoped "," set_new_ reflection send  "]}," ActiveRecord Associations CollectionProxy new":{"type":"method","name":"new","children":[],"call":[" method_missing ","@association build ","@association is_a? "]}," ActiveRecord Associations CollectionAssociation build_record":{"type":"method","name":"build_record","children":[],"call":[" reflection build_association "," scoped scope_for_create merge "," scoped scope_for_create "," scoped "," reflection ","record assign_attributes "," create_scope except ","record changed "," create_scope "," klass current_scope= "," klass "," klass current_scope "," block_given? "," reflection build_association  assign_attributes "," reflection build_association  changed "]}," ActiveRecord Associations CollectionAssociation build_or_create":{"type":"method","name":"build_or_create","children":[],"call":["records first ","attributes is_a? "," insert_record ","method == "," block_given? "," add_to_target "," build_record ","Array  wrap map ","Array  wrap "," build_record s first "," insert_ build_record  "," build_ build_record  "]}," Builder HasAndBelongsToMany after_destroy_method_name":{"type":"method","name":"after_destroy_method_name","children":[],"call":[" name "]}," Builder HasAndBelongsToMany define_after_destroy_method":{"type":"method","name":"define_after_destroy_method","children":[],"call":[" model after_destroy "," after_destroy_method_name "," model "," model send ","18 + ","name to_sym inspect ","name to_sym "," name "," after_destroy_method_ name  "," name  to_sym inspect "," name  to_sym ","  name  "]}," ActiveRecord Associations Association construct_scope":{"type":"method","name":"construct_scope","children":[],"call":["AssociationScope  new scope ","AssociationScope  new "," klass "]}," ActiveRecord Associations AliasTracker initialize_count_for":{"type":"method","name":"initialize_count_for","children":[],"call":[" aliases [] "," aliases ","(send\n  (send nil :table_joins) :map) sum ","join left downcase scan size ","join left downcase scan ","join left downcase ","join left "," table_joins map "," table_joins "," connection quote_table_name downcase "," connection quote_table_name "," connection ","Arel Table  === "," aliases []= "]}," ActiveRecord Associations AliasTracker pluralize":{"type":"method","name":"pluralize","children":[],"call":["table_name to_s pluralize ","table_name to_s ","ActiveRecord Base  pluralize_table_names ","base pluralize_table_names "]}," ActiveRecord Associations CollectionAssociation concat_records":{"type":"method","name":"concat_records","children":[],"call":[" insert_record "," owner new_record? "," owner "," add_to_target "," raise_on_type_mismatch ","records flatten each ","records flatten "," raise_on_type_mismatch! ","records each "," loaded? "," raise "]}," ActiveRecord Associations CollectionAssociation replace_records":{"type":"method","name":"replace_records","children":[],"call":[" raise "," reflection name "," reflection "," concat ","new_target - "," target "," delete "," target - "," difference "]}," ActiveRecord Associations CollectionAssociation remove_records":{"type":"method","name":"remove_records","children":[],"call":[" callback ","records each "," target delete "," target "," delete_records ","existing_records any? "," catch "]}," ActiveRecord Reflection AssociationReflection primary_key":{"type":"method","name":"primary_key","children":[],"call":[" raise ","UnknownPrimaryKey  new ","klass primary_key "]}," ActiveRecord UnknownPrimaryKey message":{"type":"method","name":"message","children":[],"call":[" model "," model table_name "]}," ActiveRecord UnknownPrimaryKey initialize":{"type":"method","name":"initialize","children":[],"call":["model table_name "]}," ActiveRecord ConnectionAdapters StatementPool delete":{"type":"method","name":"delete","children":[],"call":[" raise "," cache delete "," cache "," dealloc "," cache [] "]}," ActiveRecord ConnectionAdapters StatementPool clear":{"type":"method","name":"clear","children":[],"call":[" raise "," cache clear "," cache "," dealloc "," cache each_value "]}," ActiveRecord ConnectionAdapters StatementPool []=":{"type":"method","name":"[]=","children":[],"call":[" raise "," cache []= "," cache "," dealloc "," cache shift last "," cache shift ","@statement_limit <= "," cache size ","@max <= "]}," ActiveRecord ConnectionAdapters StatementPool length":{"type":"method","name":"length","children":[],"call":[" raise "," cache length "," cache "]}," ActiveRecord ConnectionAdapters StatementPool []":{"type":"method","name":"[]","children":[],"call":[" raise "," cache [] "," cache "]}," ActiveRecord ConnectionAdapters StatementPool key?":{"type":"method","name":"key?","children":[],"call":[" raise "," cache key? "," cache "]}," ActiveRecord ConnectionAdapters StatementPool each":{"type":"method","name":"each","children":[],"call":[" raise "," cache each "," cache "]}," ActiveRecord ConnectionAdapters StatementPool initialize":{"type":"method","name":"initialize","children":[],"call":["h []= ","Hash  new "]}," ActiveRecord ConnectionAdapters SQLiteAdapter StatementPool dealloc":{"type":"method","name":"dealloc","children":[],"call":["stmt close ","stmt closed? "]}," ActiveRecord ConnectionAdapters SQLiteAdapter StatementPool cache":{"type":"method","name":"cache","children":[],"call":["@cache [] "]}," ActiveRecord ConnectionAdapters SQLiteAdapter StatementPool clear":{"type":"method","name":"clear","children":[],"call":[" cache clear "," cache "," dealloc ","hash [] "," cache values each "," cache values "]}," ActiveRecord ConnectionAdapters SQLiteAdapter StatementPool []=":{"type":"method","name":"[]=","children":[],"call":[" cache []= "," cache "," dealloc "," cache shift last [] "," cache shift last "," cache shift ","@max <= "," cache size "]}," ActiveRecord ConnectionAdapters SQLiteAdapter StatementPool length":{"type":"method","name":"length","children":[],"call":[" cache length "," cache "]}," ActiveRecord ConnectionAdapters SQLiteAdapter StatementPool []":{"type":"method","name":"[]","children":[],"call":[" cache [] "," cache "]}," ActiveRecord ConnectionAdapters SQLiteAdapter StatementPool key?":{"type":"method","name":"key?","children":[],"call":[" cache key? "," cache "]}," ActiveRecord ConnectionAdapters SQLiteAdapter StatementPool each":{"type":"method","name":"each","children":[],"call":[" cache each "," cache "]}," ActiveRecord ConnectionAdapters SQLiteAdapter StatementPool initialize":{"type":"method","name":"initialize","children":[],"call":["h []= ","Hash  new "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter StatementPool dealloc":{"type":"method","name":"dealloc","children":[],"call":["@connection query "," connection_active? ","conn query ","conn status == ","conn status ","@connection instance_variable_get ","@@connection instance_variable_get ection query "," @connection instance_variable_get ection_active? ","@connection instance_variable_get  query ","@connection instance_variable_get  status == ","@connection instance_variable_get  status ","@@connection instance_variable_get ection instance_variable_get "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter StatementPool cache":{"type":"method","name":"cache","children":[],"call":["@cache [] ","Process  pid "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter StatementPool clear":{"type":"method","name":"clear","children":[],"call":[" cache clear "," cache "," dealloc "," cache each_value "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter StatementPool []=":{"type":"method","name":"[]=","children":[],"call":[" cache []= "," cache "," dealloc "," cache shift last "," cache shift ","@max <= "," cache size "," tap "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter StatementPool next_key":{"type":"method","name":"next_key","children":[],"call":["@counter + "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter StatementPool length":{"type":"method","name":"length","children":[],"call":[" cache length "," cache "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter StatementPool []":{"type":"method","name":"[]","children":[],"call":[" cache [] "," cache "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter StatementPool key?":{"type":"method","name":"key?","children":[],"call":[" cache key? "," cache "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter StatementPool each":{"type":"method","name":"each","children":[],"call":[" cache each "," cache "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter StatementPool initialize":{"type":"method","name":"initialize","children":[],"call":["h []= ","Hash  new "]}," ActiveRecord ConnectionAdapters MysqlAdapter StatementPool cache":{"type":"method","name":"cache","children":[],"call":["@cache [] ","Process  pid "]}," ActiveRecord ConnectionAdapters MysqlAdapter StatementPool clear":{"type":"method","name":"clear","children":[],"call":[" cache clear "," cache ","hash [] close ","hash [] "," cache values each "," cache values "," cache each_value "]}," ActiveRecord ConnectionAdapters MysqlAdapter StatementPool []=":{"type":"method","name":"[]=","children":[],"call":[" cache []= "," cache "," cache shift last [] close "," cache shift last [] "," cache shift last "," cache shift ","@max <= "," cache size "]}," ActiveRecord ConnectionAdapters MysqlAdapter StatementPool delete":{"type":"method","name":"delete","children":[],"call":[" cache delete "," cache "]}," ActiveRecord ConnectionAdapters MysqlAdapter StatementPool length":{"type":"method","name":"length","children":[],"call":[" cache length "," cache "]}," ActiveRecord ConnectionAdapters MysqlAdapter StatementPool []":{"type":"method","name":"[]","children":[],"call":[" cache [] "," cache "]}," ActiveRecord ConnectionAdapters MysqlAdapter StatementPool key?":{"type":"method","name":"key?","children":[],"call":[" cache key? "," cache "]}," ActiveRecord ConnectionAdapters MysqlAdapter StatementPool each":{"type":"method","name":"each","children":[],"call":[" cache each "," cache "]}," ActiveRecord ConnectionAdapters MysqlAdapter StatementPool initialize":{"type":"method","name":"initialize","children":[],"call":["h []= ","Hash  new "]}," ActiveRecord Associations ClassMethods preload_associations":{"type":"method","name":"preload_associations","children":[],"call":["Preloader  new run ","Preloader  new ","ActiveSupport Deprecation  warn "]}," ActiveRecord Associations BelongsToAssociation find_target?":{"type":"method","name":"find_target?","children":[],"call":[" klass "," foreign_key_present? "," loaded? ! "," loaded? "]}," ActiveRecord IdentityMap contain_all_columns?":{"type":"method","name":"contain_all_columns?","children":[],"call":["(send\n  (send\n    (send\n      (lvar :record) :class) :column_names) :-\n  (send\n    (lvar :record) :attribute_names)) empty? ","record class column_names - ","record attribute_names ","record class column_names ","record class "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter prepare_statement":{"type":"method","name":"prepare_statement","children":[],"call":["@statements [] ","@statements []= ","@connection prepare ","@statements next_key ","@statements key? "," sql_key ","@connection get_last_result "," raise "," translate_exception_class ","@lock synchronize ","conn get_last_result ","conn prepare "," with_raw_connection ","  sql_key  "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter sql_key":{"type":"method","name":"sql_key","children":[],"call":[" schema_search_path "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter StatementPool connection_active?":{"type":"method","name":"connection_active?","children":[],"call":["@connection status == ","@connection status "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter StatementPool delete":{"type":"method","name":"delete","children":[],"call":[" cache delete "," cache "," dealloc "," cache [] "]}," ActiveRecord Base connection_id=":{"type":"method","name":"connection_id=","children":[],"call":["Thread  current []= ","Thread  current "]}," ActiveRecord Base connection_id":{"type":"method","name":"connection_id","children":[],"call":["Thread  current [] ","Thread  current "]}," ActiveRecord []=":{"type":"method","name":"[]=","children":[],"call":[" write_attribute "]}," ActiveRecord []":{"type":"method","name":"[]","children":[],"call":[" read_attribute "]}," ActiveRecord Base use_identity_map":{"type":"method","name":"use_identity_map","children":[],"call":["IdentityMap  add ","sti_class allocate init_with ","sti_class allocate ","instance reinit_with ","IdentityMap  get ","record_id to_i ","column number? ","sti_class columns_hash [] ","sti_class primary_key ","sti_class columns_hash ","sti_class allocate init_with  reinit_with ","IdentityMap  get  reinit_with ","record_id to_i  to_i ","sti_class columns_hash []  number? ","sti_class sti_class columns_hash [] s_hash [] ","sti_class sti_class columns_hash [] s_hash "]}," ActiveRecord Associations HasManyThroughAssociation through_records_for":{"type":"method","name":"through_records_for","children":[],"call":["c attributes slice == ","c attributes slice ","attributes keys ","c attributes ","candidates find_all ","Array  wrap "," through_association target "," through_association "," construct_join_attributes ","c public_send == ","c public_send ","attributes all? ","c  construct_join_attributes  slice == ","c  construct_join_attributes  slice "," construct_join_attributes  keys ","c  construct_join_attributes  ","Array  wrap  find_all "," construct_join_ construct_join_attributes  "," construct_join_attributes  all? "]}," ActiveRecord Associations HasManyThroughAssociation save_through_record":{"type":"method","name":"save_through_record","children":[],"call":["@through_records delete ","record object_id "," build_through_record save! "," build_through_record ","association save! ","association changed? "," build_through_record  save! "," build_through_record  changed? "]}," ActiveRecord Associations HasManyThroughAssociation build_through_record":{"type":"method","name":"build_through_record","children":[],"call":["through_record send "," source_reflection name "," source_reflection "," through_association build "," construct_join_attributes "," through_association ","@through_records [] ","record object_id "," ensure_mutable "," options_for_through_record "," through_scope_attributes "," options [] "," options "," source_reflection foreign_type ","attributes []= ","new_record send "," through_association build tap "," through_association build  send "," construct_join_ through_scope_attributes  ","@ through_association build s [] "," options_for_ through_association build  "," through_scope_ through_scope_attributes  "," through_scope_attributes  []= "]}," ActiveRecord Associations HasManyThroughAssociation through_association":{"type":"method","name":"through_association","children":[],"call":[" owner association "," through_reflection name "," through_reflection "," owner "]}," ActiveRecord Associations CollectionProxy scoped":{"type":"method","name":"scoped","children":[],"call":[" define_method ","association scoped extending ","association scoped "]}," ActiveRecord Associations CollectionAssociation delete_all_on_destroy":{"type":"method","name":"delete_all_on_destroy","children":[],"call":[" scoped delete_all "," scoped "]}," Builder HasMany define_nullify_dependency_method":{"type":"method","name":"define_nullify_dependency_method","children":[],"call":[" send delete_all "," send "," model send "," dependency_method_name "," model "," name "," mixin redefine_method "," mixin "," dependency_method_ name  ","  name  "]}," ActiveRecord Associations AssociationScope disambiguate_condition":{"type":"method","name":"disambiguate_condition","children":[],"call":["Hash  [] ","table name ","table table_alias ","v is_a? ","condition map ","condition is_a? "]}," ActiveRecord Generators ModelGenerator attributes_with_index":{"type":"method","name":"attributes_with_index","children":[],"call":[" options [] "," options ","a reference? ","a has_index? "," attributes select "," attributes ","a reference? ! "]}," ActiveRecord Translation i18n_scope":{"type":"method","name":"i18n_scope","children":[],"call":[]}," ActiveRecord Translation lookup_ancestors":{"type":"method","name":"lookup_ancestors","children":[],"call":["classes << ","klass superclass ","klass != ","klass base_class ","klass == ","klass base_class? ! ","klass base_class? ","klass superclass  superclass ","klass superclass  != ","klass superclass  base_class ","klass superclass  == ","klass superclass  base_class? ! ","klass superclass  base_class? "]}," ActiveRecord Timestamp clear_timestamp_attributes":{"type":"method","name":"clear_timestamp_attributes","children":[],"call":[" changed_attributes delete "," changed_attributes "," []= "," all_timestamp_attributes_in_model each "," all_timestamp_attributes_in_model "," clear_attribute_changes "," clear_attribute_change "]}," ActiveRecord Timestamp initialize_dup":{"type":"method","name":"initialize_dup","children":[],"call":[" clear_timestamp_attributes "]}," ActiveRecord Store ClassMethods store_accessor":{"type":"method","name":"store_accessor","children":[],"call":[" send [] "," send "," define_method "," send []= "," Array flatten each "," Array flatten "," Array "," send is_a? "," stored_attributes [] "," stored_attributes "," read_store_attribute "," write_store_attribute ","keys each "," _store_accessors_module module_eval "," _store_accessors_module ","keys flatten "," local_stored_attributes [] "," local_stored_attributes "," stored_attributes= "," stored_attributes blank? "," saved_change_to_attribute "," saved_change_to_attribute? ","(lvar :prev_store) != "," changes [] "," changes "," attribute_changed? "," saved_changes [] "," saved_changes ","keys flatten  each ","keys flatten  flatten "]}," ActiveRecord Store ClassMethods store":{"type":"method","name":"store","children":[],"call":[" store_accessor ","options [] ","options has_key? "," serialize ","IndifferentCoder  new ","options slice "," build_column_serializer "]}," ActiveRecord Scoping populate_with_current_scope_attributes":{"type":"method","name":"populate_with_current_scope_attributes","children":[],"call":[" send "," respond_to? "," class scope_attributes each "," class scope_attributes "," class "," class scope_attributes? "," _assign_attributes ","attributes any? "," class scope_ class scope_attributes  each "," class scope_ class scope_attributes  "," class scope_ class scope_attributes ? "," _assign_ class scope_attributes  "," class scope_attributes  any? "]}," ActiveRecord Scoping ClassMethods construct_finder_arel":{"type":"method","name":"construct_finder_arel","children":[],"call":["scope merge "," unscoped apply_finder_options "," unscoped ","options is_a? "]}," ActiveRecord Scoping ClassMethods current_scope=":{"type":"method","name":"current_scope=","children":[],"call":["Thread  current []= ","Thread  current ","ScopeRegistry  set_value_for "," base_class to_s "," base_class "," to_s ","ScopeRegistry  set_current_scope "]}," ActiveRecord Scoping ClassMethods current_scope":{"type":"method","name":"current_scope","children":[],"call":["Thread  current [] ","Thread  current ","ScopeRegistry  value_for "," base_class to_s "," base_class "," to_s ","ScopeRegistry  current_scope "]}," ActiveRecord Scoping ClassMethods with_exclusive_scope":{"type":"method","name":"with_exclusive_scope","children":[],"call":[" with_scope "," raise ","e is_a? ","method_scoping values any? ","method_scoping values "]}," ActiveRecord Scoping ClassMethods with_scope":{"type":"method","name":"with_scope","children":[],"call":[" current_scope= ","previous_scope merge ","action == ","relation create_with ","previous_scope create_with_value ","scope [] ","previous_scope create_with_value merge ","relation default_scoped= "," construct_finder_arel ","scope assert_valid_keys ","scope []= ","params dup ","params == ","scope each ","scope dup ","scope is_a? "," current_scope ","scope current_scope ","scope respond_to? ","scope is_a? ! "," current_previous_scope merge = "," current_scope dup = "," current_scope current_scope = ","previous_previous_scope merge  merge ","previous_scope dup  merge ","previous_scope current_scope  merge "," current_scope  merge ","relation create_with  create_with "," construct_finder_arel  create_with ","previous_previous_scope merge  create_with_value ","previous_scope dup  create_with_value ","previous_scope current_scope  create_with_value "," current_scope  create_with_value ","previous_scope merge  [] ","scope dup  [] ","scope current_scope  [] ","previous_previous_scope merge  create_with_value merge ","previous_scope dup  create_with_value merge ","previous_scope current_scope  create_with_value merge "," current_scope  create_with_value merge ","relation default_previous_scope merge d= ","relation default_scope dup d= ","relation default_scope current_scope d= ","relation create_with  default_scoped= "," construct_finder_arel  default_scoped= ","previous_scope merge  assert_valid_keys ","scope dup  assert_valid_keys ","scope current_scope  assert_valid_keys ","previous_scope merge  []= ","scope dup  []= ","scope current_scope  []= ","previous_scope merge  each ","scope dup  each ","scope current_scope  each ","previous_scope merge  dup ","scope dup  dup ","scope current_scope  dup ","previous_scope merge  is_a? ","scope dup  is_a? ","scope current_scope  is_a? "," current_previous_scope merge  "," current_scope dup  "," current_scope current_scope  ","previous_scope merge  current_previous_scope merge  ","scope dup  current_scope dup  ","scope current_scope  current_scope current_scope  ","previous_scope merge  respond_to? ","scope dup  respond_to? ","scope current_scope  respond_to? ","previous_scope merge  is_a? ! ","scope dup  is_a? ! ","scope current_scope  is_a? ! "]}," ActiveRecord Scoping Named ClassMethods valid_scope_name?":{"type":"method","name":"valid_scope_name?","children":[],"call":[" logger warn "," name "," logger "," respond_to? "]}," ActiveRecord Scoping Named ClassMethods scope":{"type":"method","name":"scope","children":[],"call":[" singleton_class send "," singleton_class ","relation extending "," scoped merge "," scoped "," scoped apply_finder_options ","options is_a? ","scope_options call "," unscoped ","scope_options respond_to? "," lambda ","Module  new ","Proc  new "," block_given? "," valid_scope_name? ","name to_sym "," all ","scope extending ","body call "," all scoping ","body respond_to? ","ActiveSupport Deprecation  warn ","body respond_to? ! ","body is_a? "," all merge "," raise "," name "," dangerous_class_method? "," instance_exec ","scope scoping ","scope _exec_scope "," method_defined_within? ","scope instance_exec "," generate_relation_method "," singleton_class define_method "," all _exec_scope "," respond_to? "," scoped merge  extending "," all merge  extending "," scope extending d merge ","  all d merge "," scope _exec_scope d merge ","  all _exec_scope d merge "," scope extending d ","  all d "," scope _exec_scope d ","  all _exec_scope d "," scoped apply_finder_ scoped apply_finder_options  "," scope extending d apply_finder_options ","  all d apply_finder_options "," scope _exec_scope d apply_finder_options ","  all _exec_scope d apply_finder_options "," scoped apply_finder_options  is_a? ","scope_ scoped apply_finder_options  call ","scope extending _options call "," all _options call ","scope _exec_scope _options call "," all _exec_scope _options call "," unscope extending d "," un all d "," unscope _exec_scope d "," un all _exec_scope d ","scope_ scoped apply_finder_options  respond_to? ","scope extending _options respond_to? "," all _options respond_to? ","scope _exec_scope _options respond_to? "," all _exec_scope _options respond_to? "," valid_scope_name to_sym ? "," valid_scope extending _name? "," valid_ all _name? "," valid_scope _exec_scope _name? "," valid_ all _exec_scope _name? ","name to_sym  to_sym ","scope extending  extending "," all  extending ","scope _exec_scope  extending "," all _exec_scope  extending "," name to_sym  ","scope extending  scoping "," all  scoping ","scope _exec_scope  scoping "," all _exec_scope  scoping ","scope extending  _exec_scope extending  "," all  _exec_ all  ","scope _exec_scope  _exec_scope _exec_scope  "," all _exec_scope  _exec_ all _exec_scope  ","scope extending  instance_exec "," all  instance_exec ","scope _exec_scope  instance_exec "," all _exec_scope  instance_exec "," generate_ scoped merge _method "," generate_ all merge _method "," all _exec_scope extending  "," all _exec_ all  "," all _exec_scope _exec_scope  "," all _exec_ all _exec_scope  "]}," ActiveRecord Scoping Named ClassMethods scope_attributes?":{"type":"method","name":"scope_attributes?","children":[],"call":[" default_scopes any? "," default_scopes "," current_scope "]}," ActiveRecord Scoping Named ClassMethods scope_attributes":{"type":"method","name":"scope_attributes","children":[],"call":["scope scope_for_create ","scope default_scoped= "," relation clone "," relation "," current_scope scope_for_create "," current_scope "," all scope_for_create "," all "," relation clone   relation clone _for_create "," relation   relation _for_create "," relation clone  default_ relation clone d= "," relation  default_ relation d= "," current_ relation clone   relation clone _for_create "," current_ relation   relation _for_create "," current_ relation clone  "," current_ relation  "," all  relation clone _for_create "," all  relation _for_create "]}," ActiveRecord Scoping Named ClassMethods scoped":{"type":"method","name":"scoped","children":[],"call":["scope default_scoped= "," relation clone "," relation "," current_scope clone "," current_scope "," scoped apply_finder_options "," scoped "," relation clone  default_ relation clone d= "," relation  default_ relation d= "," current_ relation clone  clone "," current_ relation  clone "," current_ relation clone  "," current_ relation  ","  relation clone d apply_finder_options ","  relation d apply_finder_options ","  relation clone d ","  relation d "]}," ActiveRecord Scoping Default ClassMethods evaluate_default_scope":{"type":"method","name":"evaluate_default_scope","children":[],"call":[" ignore_default_scope= "," ignore_default_scope? "]}," ActiveRecord Scoping Default ClassMethods ignore_default_scope=":{"type":"method","name":"ignore_default_scope=","children":[],"call":["Thread  current []= ","Thread  current ","ScopeRegistry  set_value_for "," base_class ","ScopeRegistry  set_ignore_default_scope "]}," ActiveRecord Scoping Default ClassMethods ignore_default_scope?":{"type":"method","name":"ignore_default_scope?","children":[],"call":["Thread  current [] ","Thread  current ","ScopeRegistry  value_for "," base_class ","ScopeRegistry  ignore_default_scope "]}," ActiveRecord Scoping Default ClassMethods build_default_scope":{"type":"method","name":"build_default_scope","children":[],"call":["default_scope merge ","scope call ","scope respond_to? ","scope is_a? ! ","scope is_a? ","default_scope apply_finder_options "," default_scopes inject "," relation "," default_scopes "," evaluate_default_scope "," default_scopes any? "," default_scope "," method owner != "," method owner "," method "," unscoped ","Base  is_a? ! ","Base  is_a? ","base_rel scoping "," abstract_class? ","base_rel instance_exec ","scope method "," default_scope_override "," default_scope_override= "," default_scope_override nil? ","(or-asgn\n  (lvasgn :base_rel)\n  (send nil :relation)) merge ","default_scope merge! ","(or-asgn\n  (lvasgn :base_rel)\n  (send nil :relation)) merge! ","default_scope instance_exec ","relation merge! ","relation scoping ","scope_obj scope method ","scope_obj scope ","scope_obj scope respond_to? "," execute_scope? ","combined_scope instance_exec ","default_scope method  merge ","default_ default_scope  merge ","default_scope_obj scope method  merge ","default_scope_obj scope  merge ","scope method  call "," default_scope  call ","scope_obj scope method  call ","scope_obj scope  call ","scope method  respond_to? "," default_scope  respond_to? ","scope_obj scope method  respond_to? ","scope_obj scope  respond_to? ","scope method  is_a? ! "," default_scope  is_a? ! ","scope_obj scope method  is_a? ! ","scope_obj scope  is_a? ! ","scope method  is_a? "," default_scope  is_a? ","scope_obj scope method  is_a? ","scope_obj scope  is_a? ","default_scope method  apply_finder_options ","default_ default_scope  apply_finder_options ","default_scope_obj scope method  apply_finder_options ","default_scope_obj scope  apply_finder_options "," default_scope method s inject "," default_ default_scope s inject "," default_scope_obj scope method s inject "," default_scope_obj scope s inject "," default_scope method s "," default_ default_scope s "," default_scope_obj scope method s "," default_scope_obj scope s "," evaluate_default_scope method  "," evaluate_default_ default_scope  "," evaluate_default_scope_obj scope method  "," evaluate_default_scope_obj scope  "," default_scope method s any? "," default_ default_scope s any? "," default_scope_obj scope method s any? "," default_scope_obj scope s any? "," default_scope method  "," default_ default_scope  "," default_scope_obj scope method  "," default_scope_obj scope  "," unscope method d "," un default_scope d "," unscope_obj scope method d "," unscope_obj scope d ","scope method  method "," default_scope  method ","scope_obj scope method  method ","scope_obj scope  method "," default_scope method _override "," default_ default_scope _override "," default_scope_obj scope method _override "," default_scope_obj scope _override "," default_scope method _override= "," default_ default_scope _override= "," default_scope_obj scope method _override= "," default_scope_obj scope _override= "," default_scope method _override nil? "," default_ default_scope _override nil? "," default_scope_obj scope method _override nil? "," default_scope_obj scope _override nil? ","default_scope method  merge! ","default_ default_scope  merge! ","default_scope_obj scope method  merge! ","default_scope_obj scope  merge! ","default_scope method  instance_exec ","default_ default_scope  instance_exec ","default_scope_obj scope method  instance_exec ","default_scope_obj scope  instance_exec ","scope method _obj scope method  method "," default_scope _obj  default_scope  method ","scope_obj scope method _obj scope_obj scope method  method ","scope_obj scope _obj scope_obj scope  method ","scope method _obj scope method  "," default_scope _obj  default_scope  ","scope_obj scope method _obj scope_obj scope method  ","scope_obj scope _obj scope_obj scope  ","scope method _obj scope method  respond_to? "," default_scope _obj  default_scope  respond_to? ","scope_obj scope method _obj scope_obj scope method  respond_to? ","scope_obj scope _obj scope_obj scope  respond_to? "," execute_scope method ? "," execute_ default_scope ? "," execute_scope_obj scope method ? "," execute_scope_obj scope ? ","combined_scope method  instance_exec ","combined_ default_scope  instance_exec ","combined_scope_obj scope method  instance_exec ","combined_scope_obj scope  instance_exec "]}," ActiveRecord Scoping Default ClassMethods default_scope":{"type":"method","name":"default_scope","children":[],"call":[" default_scopes= "," default_scopes + "," default_scopes ","Proc  new "," block_given? ","ActiveSupport Deprecation  warn ","scope respond_to? ! ","scope respond_to? ","scope is_a? "," raise ","DefaultScope  new "," default_Proc  new s= "," DefaultScope  new s= "," default_Proc  new s + "," DefaultScope  new s + "," default_Proc  new s "," DefaultScope  new s ","Proc  new  respond_to? ! ","Proc  new  respond_to? ","Proc  new  is_a? "]}," ActiveRecord Scoping Default ClassMethods before_remove_const":{"type":"method","name":"before_remove_const","children":[],"call":[" current_scope= "]}," ActiveRecord Scoping Default ClassMethods unscoped":{"type":"method","name":"unscoped","children":[],"call":[" relation "," relation scoping "," block_given? "," _scoping "]}," ActiveRecord Sanitization quote_value":{"type":"method","name":"quote_value","children":[],"call":[" class connection quote "," class connection "," class "]}," ActiveRecord Sanitization quoted_id":{"type":"method","name":"quoted_id","children":[],"call":[" quote_value "," column_for_attribute "," class primary_key "," class "," id "," class quote_value ","@attributes [] value_for_database ","@attributes [] "," class connection quote "," class connection "]}," ActiveRecord Sanitization ClassMethods raise_if_bind_arity_mismatch":{"type":"method","name":"raise_if_bind_arity_mismatch","children":[],"call":[" raise ","expected == "]}," ActiveRecord Sanitization ClassMethods quote_bound_value":{"type":"method","name":"quote_bound_value","children":[],"call":["c quote ","(send\n  (lvar :value) :map) join ","value map ","value empty? ","value respond_to? ","value acts_like? ! ","value acts_like? ","quoted join ","quoted empty? ","value id_for_database ","(send\n  (lvar :values) :map!) join ","values map! ","values empty? ","v id_for_database ","v respond_to? ","c quote_bound_value ","c cast_bound_value ","(send\n  (lvar :value id_for_database ) :map) join ","value id_for_database  map ","value id_for_database  empty? ","value id_for_database  respond_to? ","value id_for_database  acts_like? ! ","value id_for_database  acts_like? ","value id_for_database  id_for_database ","(send\n  (lvar :value id_for_database s) :map!) join ","value id_for_database s map! ","value id_for_database s empty? ","c quote_bound_value id_for_database  ","c cast_bound_value id_for_database  "]}," ActiveRecord Sanitization ClassMethods expand_range_bind_variables":{"type":"method","name":"expand_range_bind_variables","children":[],"call":["expanded << ","var last ","var first ","var is_a? ","bind_vars each "]}," ActiveRecord Sanitization ClassMethods replace_named_bind_variables":{"type":"method","name":"replace_named_bind_variables","children":[],"call":[" raise "," quote_bound_value ","bind_vars [] ","bind_vars include? ","2 to_sym ","1 == ","statement gsub "," replace_bind_variable ","match [] ","2 to_sym  [] "]}," ActiveRecord Sanitization ClassMethods replace_bind_variables":{"type":"method","name":"replace_bind_variables","children":[],"call":[" quote_bound_value ","bound shift ","statement gsub "," connection ","values dup "," raise_if_bind_arity_mismatch ","values size ","statement count "," replace_bind_variable "," quote_values dup _value ","values dup  shift ","  connection onne connection tion "," raise_if_bind_arity_mismat connection h ","statement  connection ount "," repla connection e_bind_variable "]}," ActiveRecord Sanitization ClassMethods sanitize_sql_array":{"type":"method","name":"sanitize_sql_array","children":[],"call":["statement % "," connection quote_string ","value to_s "," connection ","values collect ","statement blank? "," replace_bind_variables ","statement include? "," replace_named_bind_variables ","values first ","statement =~ ","values first is_a? ","(str \":\\\\w+\") match? "]}," ActiveRecord Sanitization ClassMethods sanitize_sql_hash_for_assignment":{"type":"method","name":"sanitize_sql_hash_for_assignment","children":[],"call":["(send\n  (lvar :attrs) :map) join "," quote_bound_value "," connection quote_column_name "," connection ","attrs map "," connection quote_table_name_for_assignment "," columns_hash [] ","attr to_s "," columns_hash ","c quote_table_name_for_assignment ","c quote "," type_for_attribute serialize "," type_for_attribute ","ActiveSupport Deprecation  warn ","(str \"              Passing `ActiveRecord::Base` objects to\\n\") squish "," require ","value is_a? ","type serialize ","type cast "," quote_bound_ type_for_attribute serialize  "," quote_bound_type serialize  ","  connection onne connection tion quote_ connection olumn_name ","  connection onne connection tion ","  connection onne connection tion quote_table_name_for_assignment ","  connection olumns_hash [] ","  connection olumns_hash "," connection  quote_table_name_for_assignment "," connection  quote ","  type_for_attribute _for_attribute serialize ","  type_for_attribute _for_attribute ","A connection tiveSupport Depre connection ation  warn ","(str \"              Passing `A connection tiveRe connection ord::Base` obje connection ts to\\n\") squish "," type_for_attribute serialize  is_a? ","type serialize  is_a? "," type_for_attribute  serialize ","type  connection ast "," type_for_attribute  cast "]}," ActiveRecord Sanitization ClassMethods sanitize_sql_hash_for_conditions":{"type":"method","name":"sanitize_sql_hash_for_conditions","children":[],"call":["(send\n  (send\n    (const nil :PredicateBuilder) :build_from_hash\n    (send nil :arel_engine)\n    (lvar :attrs)\n    (lvar :table)) :map) join "," connection visitor accept "," connection visitor "," connection ","PredicateBuilder  build_from_hash map ","PredicateBuilder  build_from_hash "," arel_engine ","Arel Table  new alias ","Arel Table  new "," table_name "," expand_hash_conditions_for_aggregates ","(send\n  (send\n    (const nil :PredicateBuilder) :build_from_hash\n    (send\n      (self) :class)\n    (lvar :attrs)\n    (lvar :table)) :map) join "," class ","(send\n  (send\n    (const nil :PredicateBuilder) :build_from_hash\n    (self)\n    (lvar :attrs)\n    (lvar :table)) :map) join ","PredicateBuilder  resolve_column_aliases "," connection visitor compile ","ActiveSupport Deprecation  warn ","(send\n  (send\n    (const nil :PredicateBuilder) :build_from_hash\n    (send nil :arel_engine)\n    (lvar :attrs)\n    (lvar :Arel Table  new alias )) :map) join ","(send\n  (send\n    (const nil :PredicateBuilder) :build_from_hash\n    (send nil :arel_engine)\n    (lvar : expand_hash_conditions_for_aggregates )\n    (lvar :table)) :map) join ","(send\n  (send\n    (const nil :PredicateBuilder) :build_from_hash\n    (send nil :arel_engine)\n    (lvar :PredicateBuilder  resolve_column_aliases )\n    (lvar :table)) :map) join "," Arel Table  new alias _name ","(send\n  (send\n    (const nil :PredicateBuilder) :build_from_hash\n    (send\n      (self) :class)\n    (lvar :attrs)\n    (lvar :Arel Table  new alias )) :map) join ","(send\n  (send\n    (const nil :PredicateBuilder) :build_from_hash\n    (send\n      (self) :class)\n    (lvar : expand_hash_conditions_for_aggregates )\n    (lvar :table)) :map) join ","(send\n  (send\n    (const nil :PredicateBuilder) :build_from_hash\n    (send\n      (self) :class)\n    (lvar :PredicateBuilder  resolve_column_aliases )\n    (lvar :table)) :map) join ","(send\n  (send\n    (const nil :PredicateBuilder) :build_from_hash\n    (self)\n    (lvar :attrs)\n    (lvar :Arel Table  new alias )) :map) join ","(send\n  (send\n    (const nil :PredicateBuilder) :build_from_hash\n    (self)\n    (lvar : expand_hash_conditions_for_aggregates )\n    (lvar :table)) :map) join ","(send\n  (send\n    (const nil :PredicateBuilder) :build_from_hash\n    (self)\n    (lvar :PredicateBuilder  resolve_column_aliases )\n    (lvar :table)) :map) join "]}," ActiveRecord Sanitization ClassMethods expand_hash_conditions_for_aggregates":{"type":"method","name":"expand_hash_conditions_for_aggregates","children":[],"call":["expanded_attrs []= ","value send ","value respond_to? ! ","value respond_to? ","mapping size == ","mapping size ","mapping each "," aggregate_mapping ","(lvasgn :aggregation\n  (send nil :reflect_on_aggregation\n    (send\n      (lvar :attr) :to_sym))) nil? "," reflect_on_aggregation ","attr to_sym ","attrs each ","aggregation mapping ","it send ","value map ","value is_a? "," aggregate_mapping  size == ","aggregation mapping  size == "," aggregate_mapping  size ","aggregation mapping  size "," aggregate_mapping  each ","aggregation mapping  each "," aggregate_ aggregate_mapping  "," aggregate_aggregation mapping  ","(lvasgn : reflect_on_aggregation \n  (send nil :reflect_on_ reflect_on_aggregation \n    (send\n      (lvar :attr) :to_sym))) nil? "," reflect_on_ reflect_on_aggregation  ","aggregation  aggregate_mapping  ","aggregation aggregation mapping  "," reflect_on_aggregation  mapping "]}," ActiveRecord Sanitization ClassMethods sanitize_sql_for_assignment":{"type":"method","name":"sanitize_sql_for_assignment","children":[],"call":[" sanitize_sql_hash_for_assignment "," sanitize_sql_array "]}," ActiveRecord Sanitization ClassMethods sanitize_sql_for_conditions":{"type":"method","name":"sanitize_sql_for_conditions","children":[],"call":[" sanitize_sql_hash_for_conditions "," sanitize_sql_array ","condition blank? "]}," ActiveRecord Sanitization ClassMethods sanitize":{"type":"method","name":"sanitize","children":[],"call":[" connection quote "," connection "]}," ActiveRecord Sanitization ClassMethods quote_value":{"type":"method","name":"quote_value","children":[],"call":[" connection quote "," connection "]}," ActiveRecord Relation exec_queries":{"type":"method","name":"exec_queries","children":[],"call":["default_scoped to_a ","record readonly! ","@records each ","@readonly_value nil? ","ActiveRecord Associations Preloader  new run ","ActiveRecord Associations Preloader  new ","preload each "," eager_loading? ","@klass find_by_sql "," arel "," find_with_associations ","IdentityMap  without ","@klass locking_enabled? ! ","@klass locking_enabled? ","default_scoped equal? "," with_default_scope "," loaded? "," readonly_value "," readonly_value nil? "," includes_values "," preload_values "," bind_values ","preloader preload "," build_preloader "," arel bind_values + "," arel bind_values ","@klass find_by_sql freeze "," bound_attributes "," find_with_associations freeze "," klass find_by_sql freeze "," klass find_by_sql "," klass ","(send\n  (const\n    (const nil :ActiveRecord) :NullRelation) :===\n  (lvar :relation)) freeze ","join_dependency instantiate "," connection select_all ","relation bound_attributes ","relation arel "," connection ","ActiveRecord NullRelation  === "," apply_join_dependency "," skip_query_cache_if_necessary ","join_dependency apply_column_aliases "," preload_associations "," skip_preloading_value ","(send\n  (lvar :relation) :null_relation?) freeze ","relation null_relation? ","records each "," strict_loading_value "," where_clause contradiction? "," where_clause "," instantiate_records "," exec_main_query ","future result "," scheduled? ","record strict_loading! "," strict_loading_value nil? "," with_default_scope  to_a ","record  readonly_value ! ","default_scoped to_a  each ","@klass find_by_sql  each "," find_with_associations  each ","@klass find_by_sql freeze  each "," find_with_associations freeze  each "," klass find_by_sql freeze  each ","@ instantiate_records  each ","@ readonly_value _value nil? "," preload_values  each "," with_default_scope  equal? ","  readonly_value _value ","  readonly_value _value nil? ","  preload_values _values "," preload_values er  preload_values  ","ActiveRecord Associations Preloader  new  preload "," build_preloader  preload "," build_ preload_values er "," build_ActiveRecord Associations Preloader  new  "," build_ build_preloader  ","(send\n  (const\n    (const nil :ActiveRecord) :NullRelation) :===\n  (lvar :join_dependency apply_column_aliases )) freeze ","join_dependency apply_column_aliases  bound_attributes ","join_dependency apply_column_aliases  arel ","  preload_values _associations "," skip_ preload_values ing_value ","(send\n  (lvar :join_dependency apply_column_aliases ) :null_join_dependency apply_column_aliases ?) freeze ","join_dependency apply_column_aliases  null_join_dependency apply_column_aliases ? "," instantiate_records  each "," instantiate_ instantiate_records  "]}," ActiveRecord Relation explain":{"type":"method","name":"explain","children":[],"call":[" exec_explain "," exec_queries "," collecting_queries_for_explain "]}," ActiveRecord Relation first_or_initialize":{"type":"method","name":"first_or_initialize","children":[],"call":[" new "," first "]}," ActiveRecord Relation first_or_create!":{"type":"method","name":"first_or_create!","children":[],"call":[" create! "," first "]}," ActiveRecord Relation first_or_create":{"type":"method","name":"first_or_create","children":[],"call":[" create "," first "]}," ActiveRecord QueryMethods uniq":{"type":"method","name":"uniq","children":[],"call":["relation uniq_value= "," clone "," spawn uniq! "," spawn "," clone  uniq_value= "]}," ActiveRecord Delegation method_missing":{"type":"method","name":"method_missing","children":[],"call":[" arel send "," arel "," ActiveRecord Delegation  delegate "," arel respond_to? ","@klass send "," scoping "," ActiveRecord Delegation  delegate_to_scoped_klass ","@klass respond_to? "," to_a send "," to_a ","Array  method_defined? "," arel public_send "," to_a public_send "," array_delegable? ","@klass public_send "]}," ActiveRecord Delegation respond_to?":{"type":"method","name":"respond_to?","children":[],"call":[" arel respond_to? "," arel ","@klass respond_to? ","Array  method_defined? "," array_delegable? "]}," ActiveRecord Delegation delegate_to_scoped_klass":{"type":"method","name":"delegate_to_scoped_klass","children":[],"call":[]}," ActiveRecord Calculations pluck":{"type":"method","name":"pluck","children":[],"call":[" klass type_cast_attribute "," klass initialize_attributes "," klass ","attributes keys first ","attributes keys "," klass connection select_all map! "," klass connection select_all "," select arel "," select "," klass connection ","column_name to_s "," type_cast_using_column "," column_for "," connection select_values map! "," connection select_values ","scope to_sql "," connection ","relation arel ","relation select_values= "," clone "," connection quote_column_name "," connection quote_table_name "," table_name "," column_names include? "," column_names ","column_name is_a? ","result map ","result columns last ","result columns "," klass connection exec_query "," select to_sql ","result map! ","columns one? ","column type_cast ","columns zip map ","columns zip "," klass initialize_attributes values ","(send\n  (const nil :Class) :new) new ","Class  new ","result column_types fetch ","result column_types "," klass column_types fetch "," klass column_types ","result columns map "," bind_values "," spawn "," construct_relation_for_association_calculations pluck "," construct_relation_for_association_calculations "," has_include? ","column_names first ","column_names map! ","result identity_type "," arel_table [] "," arel_table "," columns_hash key? "," columns_hash ","column_names map "," attribute_alias "," attribute_alias? "," klass initialize_attributes values first ","result columns zip map ","result columns zip ","result rows map ","result rows ","result cast_values ","relation arel bind_values + ","relation arel bind_values "," klass attribute_types "," bound_attributes "," arel_attribute ","@klass attribute_alias? ","@klass has_attribute? ","@records pluck ","(send\n  (send\n    (send\n      (lvar :column_names) :map\n      (block-pass\n        (sym :to_s))) :-\n    (send\n      (ivar :@klass) :attribute_names)) :-\n  (send\n    (send\n      (ivar :@klass) :attribute_aliases) :keys)) empty? ","column_names map - - ","@klass attribute_aliases keys ","@klass attribute_aliases ","column_names map - ","@klass attribute_names "," loaded? ","(send\n  (lvar :column_names) :-\n  (send\n    (ivar :@klass) :column_names)) empty? ","column_names - ","@klass column_names "," records pluck "," records "," skip_query_cache_if_necessary "," enforce_raw_sql_whitelist ","relation pluck "," apply_join_dependency "," klass enforce_raw_sql_whitelist "," klass disallow_raw_sql! "," disallow_raw_sql! "," type_cast_pluck_values ","ActiveRecord Result  new "," where_clause contradiction? "," where_clause "," arel_columns "," all_attributes? "," klass name ","ActiveRecord Result  empty ","result then ","column_names flatten ","Promise Complete  new ","column_name to_s  to_s "," connection select_ klass initialize_attributes values  map! "," connection select_ klass initialize_attributes values  "," select  to_sql "," clone  arel "," spawn  arel "," apply_join_dependency  arel "," clone  select_values= "," spawn  select_values= "," apply_join_dependency  select_values= ","relation select_ klass initialize_attributes values = "," connection quote_column_name to_s  "," column_name to_s s include? "," column_name to_s s ","column_name to_s  is_a? "," klass connection exec_query  map "," klass connection select_all  map "," records pluck  map "," klass connection exec_query  columns last "," klass connection select_all  columns last "," records pluck  columns last ","result  arel_columns  last "," klass connection exec_query  columns "," klass connection select_all  columns "," records pluck  columns ","result  arel_columns  "," klass connection exec_query  map! "," klass connection select_all  map! "," records pluck  map! "," arel_columns  one? "," arel_columns  zip map "," arel_columns  zip "," klass initialize_attributes  klass initialize_attributes values  "," klass connection exec_query  column_types fetch "," klass connection select_all  column_types fetch "," records pluck  column_types fetch "," klass connection exec_query  column_types "," klass connection select_all  column_types "," records pluck  column_types "," klass connection exec_query  columns map "," klass connection select_all  columns map "," records pluck  columns map ","result  arel_columns  map "," bind_ klass initialize_attributes values  "," construct_ clone _for_association_calculations pluck "," construct_ spawn _for_association_calculations pluck "," construct_ apply_join_dependency _for_association_calculations pluck "," construct_ clone _for_association_calculations "," construct_ spawn _for_association_calculations "," construct_ apply_join_dependency _for_association_calculations ","column_name to_s s first ","column_name to_s s map! "," klass connection exec_query  identity_type "," klass connection select_all  identity_type "," records pluck  identity_type ","  arel_columns _hash key? ","  arel_columns _hash ","column_name to_s s map "," klass initialize_attributes  klass initialize_attributes values  first "," klass connection exec_query  columns zip map "," klass connection select_all  columns zip map "," records pluck  columns zip map ","result  arel_columns  zip map "," klass connection exec_query  columns zip "," klass connection select_all  columns zip "," records pluck  columns zip ","result  arel_columns  zip "," klass connection exec_query  rows map "," klass connection select_all  rows map "," records pluck  rows map "," klass connection exec_query  rows "," klass connection select_all  rows "," records pluck  rows "," klass connection exec_query  cast_values "," klass connection select_all  cast_values "," records pluck  cast_values ","result cast_ klass initialize_attributes values  "," clone  arel bind_values + "," spawn  arel bind_values + "," apply_join_dependency  arel bind_values + ","relation arel bind_ klass initialize_attributes values  + "," clone  arel bind_values "," spawn  arel bind_values "," apply_join_dependency  arel bind_values ","relation arel bind_ klass initialize_attributes values  ","(send\n  (send\n    (send\n      (lvar :column_name to_s s) :map\n      (block-pass\n        (sym :to_s))) :-\n    (send\n      (ivar :@klass) :attribute_names)) :-\n  (send\n    (send\n      (ivar :@klass) :attribute_aliases) :keys)) empty? ","column_name to_s s map - - ","column_name to_s s map - ","(send\n  (lvar :column_name to_s s) :-\n  (send\n    (ivar :@klass) :column_name to_s s)) empty? ","column_name to_s s - ","@klass column_name to_s s "," clone  pluck "," spawn  pluck "," apply_join_dependency  pluck "," type_cast_pluck_ klass initialize_attributes values  "," arel_ arel_columns  "," klass connection exec_query  then "," klass connection select_all  then "," records pluck  then ","column_name to_s s flatten "]}," ActiveRecord Reflection AssociationReflection nested?":{"type":"method","name":"nested?","children":[],"call":[]}," ActiveRecord ReadonlyAttributes ClassMethods readonly_attributes":{"type":"method","name":"readonly_attributes","children":[],"call":[" _attr_readonly "]}," ActiveRecord ReadonlyAttributes ClassMethods attr_readonly":{"type":"method","name":"attr_readonly","children":[],"call":[" _attr_readonly= ","Set  new + "," _attr_readonly ","Set  new ","a to_s ","attributes map "," include ","ActiveRecord  raise_on_assign_to_attr_readonly "]}," ActiveRecord Querying count_by_sql":{"type":"method","name":"count_by_sql","children":[],"call":[" connection select_value to_i "," connection select_value "," name "," connection "," sanitize_conditions "," sanitize_sql "," sanitize_ sanitize_conditions  "]}," ActiveRecord Querying find_by_sql":{"type":"method","name":"find_by_sql","children":[],"call":[" instantiate "," connection select_all collect! "," connection select_all "," name "," sanitize_sql "," connection "," logging_query_plan ","result_set map ","ActiveSupport Deprecation  warn ","result_set column_types ","result_set respond_to? ","message_bus instrument ","result_set length ","ActiveSupport Notifications  instrumenter ","column_types delete "," columns_hash each_key "," columns_hash ","result_set column_types dup ","result_set column_types except "," columns_hash keys ","cached_columns_hash each_key "," connection schema_cache columns_hash "," table_name "," connection schema_cache "," attribute_types each_key "," attribute_types "," instantiate_instance_of ","result_set includes_column? "," inheritance_column "," attribute_types key? ","column_types reject ","column_types empty? "," _load_from_sql "," _query_by_sql "," connection select_all  map ","result_set result_set column_types  ","result_set result_set column_types dup  ","result_set result_set column_types except  "," connection select_all  column_types "," connection select_all  respond_to? ","ActiveSupport Notifications  instrumenter  instrument "," connection select_all  length ","result_set column_types  delete ","result_set column_types dup  delete ","result_set column_types except  delete ","result_set result_set column_types  dup ","result_set result_set column_types dup  dup ","result_set result_set column_types except  dup "," connection select_all  column_types dup ","result_set result_set column_types  except ","result_set result_set column_types dup  except ","result_set result_set column_types except  except "," connection select_all  column_types except "," connection schema_cache columns_hash  each_key "," connection select_all  includes_column? ","result_set column_types  reject ","result_set column_types dup  reject ","result_set column_types except  reject ","result_set column_types  empty? ","result_set column_types dup  empty? ","result_set column_types except  empty? "]}," ActiveRecord Persistence ClassMethods create":{"type":"method","name":"create","children":[],"call":["object save "," new "," create ","attributes collect ","attributes is_a? "," new  save "]}," ActiveRecord ModelSchema ClassMethods deprecated_original_property_getter":{"type":"method","name":"deprecated_original_property_getter","children":[],"call":[" instance_variable_get "," send "," respond_to? "," instance_variable_defined? ! "," instance_variable_defined? ","ActiveSupport Deprecation  warn "]}," ActiveRecord ModelSchema ClassMethods deprecated_property_setter":{"type":"method","name":"deprecated_property_setter","children":[],"call":[" define_attr_method ","ActiveSupport Deprecation  warn "]}," ActiveRecord ModelSchema ClassMethods compute_table_name":{"type":"method","name":"compute_table_name","children":[],"call":["base table_name "," table_name_suffix "," undecorated_table_name "," name "," full_table_name_prefix ","contained singularize "," parent pluralize_table_names "," parent "," parent table_name "," parent abstract_class? ! "," parent abstract_class? "," parent < "," == "," base_class "," full_table_name_suffix "," base_class table_name "," module_parent pluralize_table_names "," module_parent "," module_parent table_name "," module_parent abstract_class? ! "," module_parent abstract_class? "," module_parent < "," base_class? "," model_name "," base_class  table_name ","contained singularize  singularize "," parent table_name  singularize "," module_parent table_name  singularize ","  base_class _class ","  base_class _class table_name ","  base_class _class? "]}," ActiveRecord ModelSchema ClassMethods undecorated_table_name":{"type":"method","name":"undecorated_table_name","children":[],"call":["table_name pluralize "," pluralize_table_names ","class_name to_s demodulize underscore ","class_name to_s demodulize ","class_name to_s ","model_name to_s demodulize underscore ","model_name to_s demodulize ","model_name to_s ","table_name pluralize  pluralize ","class_name to_s demodulize underscore  pluralize ","model_name to_s demodulize underscore  pluralize "," pluralize_table_name pluralize s "," pluralize_class_name to_s demodulize underscore s "," pluralize_model_name to_s demodulize underscore s "]}," ActiveRecord ModelSchema ClassMethods clear_cache!":{"type":"method","name":"clear_cache!","children":[],"call":[" connection schema_cache clear! "," connection schema_cache "," connection "]}," ActiveRecord ModelSchema ClassMethods reset_column_information":{"type":"method","name":"reset_column_information","children":[],"call":[" connection schema_cache clear_table_cache! "," table_name "," connection schema_cache "," connection "," table_exists? "," undefine_attribute_methods "," connection clear_cache! "," initialize_find_by_cache "," reload_schema_from_cache "," connection schema_cache clear_data_source_cache! ","(send\n  (array\n    (self)) :+\n  (send nil :descendants)) each ","(self) + "," descendants "]}," ActiveRecord ModelSchema ClassMethods column_methods_hash":{"type":"method","name":"column_methods_hash","children":[],"call":["methods []= ","(begin\n  (lvar :attr)) to_sym ","attr to_sym ","attr to_s "," column_names inject ","Hash  new "," column_names "," column_names each_with_object "]}," ActiveRecord ModelSchema ClassMethods content_columns":{"type":"method","name":"content_columns","children":[],"call":["c name == "," inheritance_column ","c name ","c name =~ ","c primary "," columns reject "," columns "," primary_key ","c name end_with? ","(send\n  (send nil :columns) :reject) freeze "]}," ActiveRecord ModelSchema ClassMethods column_names":{"type":"method","name":"column_names","children":[],"call":["column name "," columns map "," columns "," columns map freeze "]}," ActiveRecord ModelSchema ClassMethods column_defaults":{"type":"method","name":"column_defaults","children":[],"call":["Hash  [] ","c default ","c name "," columns map "," columns "," _default_attributes to_hash "," _default_attributes "," default_attributes to_hash "," default_attributes "," _default_attributes dup to_hash "," _default_attributes dup "," load_schema "," _default_attributes deep_dup to_hash "," _default_attributes deep_dup "," _default_attributes deep_dup to_hash freeze "]}," ActiveRecord ModelSchema ClassMethods columns_hash":{"type":"method","name":"columns_hash","children":[],"call":["Hash  [] ","c name "," columns map "," columns "," load_schema "]}," ActiveRecord ModelSchema ClassMethods columns":{"type":"method","name":"columns","children":[],"call":["col primary= ","col name == "," primary_key ","col name ","col dup "," connection schema_cache columns [] map "," connection schema_cache columns [] "," table_name "," connection schema_cache columns "," connection schema_cache "," connection "," connection schema_cache columns map "," columns_hash values "," columns_hash "," load_schema "," columns_hash values freeze ","col dup  primary= ","col dup  name == ","col dup  name ","col dup  dup "," connection schema_cache col dup umns [] map "," connection schema_cache col dup umns [] "," connection schema_cache col dup umns "," connection schema_cache col dup umns map "," col dup umns_hash values "," col dup umns_hash "," col dup umns_hash values freeze "]}," ActiveRecord ModelSchema ClassMethods table_exists?":{"type":"method","name":"table_exists?","children":[],"call":[" connection schema_cache table_exists? "," table_name "," connection schema_cache "," connection "," connection schema_cache data_source_exists? "]}," ActiveRecord ModelSchema ClassMethods set_sequence_name":{"type":"method","name":"set_sequence_name","children":[],"call":[" deprecated_property_setter "]}," ActiveRecord ModelSchema ClassMethods sequence_name=":{"type":"method","name":"sequence_name=","children":[],"call":["value to_s "]}," ActiveRecord ModelSchema ClassMethods reset_sequence_name":{"type":"method","name":"reset_sequence_name","children":[],"call":[" sequence_name= "," connection default_sequence_name "," primary_key "," table_name "," connection "]}," ActiveRecord ModelSchema ClassMethods original_sequence_name":{"type":"method","name":"original_sequence_name","children":[],"call":[" deprecated_original_property_getter "]}," ActiveRecord ModelSchema ClassMethods sequence_name":{"type":"method","name":"sequence_name","children":[],"call":[" base_class sequence_name "," base_class "," reset_sequence_name "," base_class == "," base_class? "]}," ActiveRecord ModelSchema ClassMethods set_inheritance_column":{"type":"method","name":"set_inheritance_column","children":[],"call":[" deprecated_property_setter "]}," ActiveRecord ModelSchema ClassMethods inheritance_column=":{"type":"method","name":"inheritance_column=","children":[],"call":["value to_s "," inheritance_column "]}," ActiveRecord ModelSchema ClassMethods original_inheritance_column":{"type":"method","name":"original_inheritance_column","children":[],"call":[" deprecated_original_property_getter "]}," ActiveRecord ModelSchema ClassMethods inheritance_column":{"type":"method","name":"inheritance_column","children":[],"call":[" superclass inheritance_column "," superclass "," == "]}," ActiveRecord ModelSchema ClassMethods full_table_name_prefix":{"type":"method","name":"full_table_name_prefix","children":[],"call":["(or\n  (block\n    (send\n      (send nil :parents) :detect)\n    (args\n      (arg :p))\n    (send\n      (lvar :p) :respond_to?\n      (sym :table_name_prefix)))\n  (self)) table_name_prefix ","p respond_to? "," parents detect "," parents ","(or\n  (block\n    (send\n      (send nil :module_parents) :detect)\n    (args\n      (arg :p))\n    (send\n      (lvar :p) :respond_to?\n      (sym :table_name_prefix)))\n  (self)) table_name_prefix "," module_parents detect "," module_parents "]}," ActiveRecord ModelSchema ClassMethods reset_table_name":{"type":"method","name":"reset_table_name","children":[],"call":[" table_name= "," compute_table_name "," superclass table_name "," superclass "," superclass abstract_class? "," superclass == "," abstract_class? "]}," ActiveRecord ModelSchema ClassMethods quoted_table_name":{"type":"method","name":"quoted_table_name","children":[],"call":[" connection quote_table_name "," table_name "," connection "]}," ActiveRecord ModelSchema ClassMethods set_table_name":{"type":"method","name":"set_table_name","children":[],"call":["Relation  new "," arel_table "," deprecated_property_setter "]}," ActiveRecord ModelSchema ClassMethods table_name=":{"type":"method","name":"table_name=","children":[],"call":["Relation  new "," arel_table ","value to_s "," reset_column_information "," connected? ","value == ","Relation  create "]}," ActiveRecord ModelSchema ClassMethods original_table_name":{"type":"method","name":"original_table_name","children":[],"call":[" deprecated_original_property_getter "]}," ActiveRecord ModelSchema ClassMethods table_name":{"type":"method","name":"table_name","children":[],"call":[" reset_table_name "]}," ActiveRecord Locking Pessimistic with_lock":{"type":"method","name":"with_lock","children":[],"call":[" lock! "," transaction ","args first ","args present? ","args extract_options! "," args first ! "]}," ActiveRecord Locking Optimistic ClassMethods initialize_attributes":{"type":"method","name":"initialize_attributes","children":[],"call":["attributes [] "," locking_column "," lock_optimistically ","attributes key? "]}," ActiveRecord Locking Optimistic ClassMethods original_locking_column":{"type":"method","name":"original_locking_column","children":[],"call":[" deprecated_original_property_getter "]}," ActiveRecord Locking Optimistic ClassMethods locking_column=":{"type":"method","name":"locking_column=","children":[],"call":["value to_s "," clear_caches_calculated_from_columns "," reload_schema_from_cache "]}," ActiveRecord Integration cache_key":{"type":"method","name":"cache_key","children":[],"call":[" id "," class model_name cache_key "," class model_name "," class ","timestamp utc to_s ","timestamp utc "," [] "," new_record? "," cache_timestamp_format "," max_updated_column_timestamp ","timestamp_names any? "," model_name cache_key "," model_name ","ActiveSupport Deprecation  warn ","(str \"              Specifying a timestamp name for #cache_key has been deprecated in favor of\\n\") squish ","timestamp_names none? "," cache_version ","timestamp utc to_formatted_s ","timestamp utc to_fs ","timestamp utc to_s  utc to_s "," []  utc to_s "," max_updated_column_timestamp  utc to_s ","timestamp utc to_formatted_s  utc to_s ","timestamp utc to_fs  utc to_s ","timestamp utc to_s  utc "," []  utc "," max_updated_column_timestamp  utc ","timestamp utc to_formatted_s  utc ","timestamp utc to_fs  utc "," cache_timestamp utc to_s _format "," cache_ [] _format "," cache_ max_updated_column_timestamp _format "," cache_timestamp utc to_formatted_s _format "," cache_timestamp utc to_fs _format "," max_updated_column_timestamp utc to_s  "," max_updated_column_ []  "," max_updated_column_ max_updated_column_timestamp  "," max_updated_column_timestamp utc to_formatted_s  "," max_updated_column_timestamp utc to_fs  ","timestamp utc to_s _names any? "," [] _names any? "," max_updated_column_timestamp _names any? ","timestamp utc to_formatted_s _names any? ","timestamp utc to_fs _names any? ","(str \"              Specifying a timestamp utc to_s  name for #cache_key has been deprecated in favor of\\n\") squish ","(str \"              Specifying a  []  name for #cache_key has been deprecated in favor of\\n\") squish ","(str \"              Specifying a  max_updated_column_timestamp  name for #cache_key has been deprecated in favor of\\n\") squish ","(str \"              Specifying a timestamp utc to_formatted_s  name for #cache_key has been deprecated in favor of\\n\") squish ","(str \"              Specifying a timestamp utc to_fs  name for #cache_key has been deprecated in favor of\\n\") squish ","timestamp utc to_s _names none? "," [] _names none? "," max_updated_column_timestamp _names none? ","timestamp utc to_formatted_s _names none? ","timestamp utc to_fs _names none? ","timestamp utc to_s  utc to_formatted_s "," []  utc to_formatted_s "," max_updated_column_timestamp  utc to_formatted_s ","timestamp utc to_formatted_s  utc to_formatted_s ","timestamp utc to_fs  utc to_formatted_s ","timestamp utc to_s  utc to_fs "," []  utc to_fs "," max_updated_column_timestamp  utc to_fs ","timestamp utc to_formatted_s  utc to_fs ","timestamp utc to_fs  utc to_fs "]}," ActiveRecord Integration to_param":{"type":"method","name":"to_param","children":[],"call":[" id to_s "," id "," Array join "," class param_delimiter "," class "," Array "]}," ActiveRecord Inheritance ensure_proper_type":{"type":"method","name":"ensure_proper_type","children":[],"call":[" write_attribute ","klass sti_name ","klass inheritance_column ","klass finder_needs_type_condition? "," class "," _write_attribute "," class  sti_name "," class  inheritance_column "," class  finder_needs_type_condition? "]}," ActiveRecord Inheritance ClassMethods type_condition":{"type":"method","name":"type_condition","children":[],"call":["sti_column in ","model sti_name ","(send\n  (array\n    (self)) :+\n  (send nil :descendants)) map ","(self) + "," descendants ","table [] "," inheritance_column to_sym "," inheritance_column "," arel_attribute "," predicate_builder build "," predicate_builder ","table []  in "," arel_attribute  in "]}," ActiveRecord Inheritance ClassMethods find_sti_class":{"type":"method","name":"find_sti_class","children":[],"call":[" raise ","(str \"The single-table inheritance mechanism failed to locate the subclass: '\") + + + "," name ","(str \"The single-table inheritance mechanism failed to locate the subclass: '\") + + ","(str \"The single-table inheritance mechanism failed to locate the subclass: '\") + "," inheritance_column "," compute_type ","ActiveSupport Dependencies  constantize "," store_full_sti_class "," columns_hash include? ! "," columns_hash include? "," columns_hash ","type_name blank? ","subclass name "," descendants include? "," descendants ","subclass == "," base_class type_for_attribute cast "," base_class type_for_attribute "," base_class "," sti_class_for ","(str \"The single-table inheritance mechanism failed to locate the  sti_class_for : '\") + + + ","(str \"The single-table inheritance mechanism failed to locate the  sti_class_for : '\") + + ","(str \"The single-table inheritance mechanism failed to locate the  sti_class_for : '\") + "," base_class type_for_attribute cast  blank? "," sti_class_for  name "," sti_class_for  == "]}," ActiveRecord Inheritance ClassMethods compute_type":{"type":"method","name":"compute_type","children":[],"call":[" raise ","candidates first ","e instance_of? ","candidate == ","constant to_s ","ActiveSupport Dependencies  constantize ","candidates each ","candidates << ","candidates unshift "," name scan "," name ","type_name match ","NameError  new ","ActiveSupport Dependencies  safe_constantize ","@_type_candidates_cache []= ","@_type_candidates_cache [] ","type_name start_with? ",":: freeze ","candidate safe_constantize ","type_candidate safe_constantize ","type_name constantize ","ActiveSupport Dependencies  constantize  to_s ","ActiveSupport Dependencies  safe_constantize  to_s ","candidate safe_constantize  to_s ","ActiveSupport Dependencies  ActiveSupport Dependencies  constantize ize ","ActiveSupport Dependencies  ActiveSupport Dependencies  safe_constantize ize ","ActiveSupport Dependencies  candidate safe_constantize ize ","ActiveSupport Dependencies  safe_ActiveSupport Dependencies  constantize ize ","ActiveSupport Dependencies  safe_ActiveSupport Dependencies  safe_constantize ize ","ActiveSupport Dependencies  safe_candidate safe_constantize ize ","@_@_type_candidates_cache [] s_cache []= ","@_@_type_candidates_cache [] s_cache [] ","candidate safe_ActiveSupport Dependencies  constantize ize ","candidate safe_ActiveSupport Dependencies  safe_constantize ize ","candidate safe_candidate safe_constantize ize ","type_candidate safe_ActiveSupport Dependencies  constantize ize ","type_candidate safe_ActiveSupport Dependencies  safe_constantize ize ","type_candidate safe_candidate safe_constantize ize ","@_type_candidates_cache []  safe_constantize ","type_name ActiveSupport Dependencies  constantize ize ","type_name ActiveSupport Dependencies  safe_constantize ize ","type_name candidate safe_constantize ize "]}," ActiveRecord Inheritance ClassMethods class_of_active_record_descendant":{"type":"method","name":"class_of_active_record_descendant","children":[],"call":[" class_of_active_record_descendant ","klass superclass "," raise "," name ","klass superclass nil? ","klass superclass abstract_class? ","klass superclass == ","klass == "]}," ActiveRecord Inheritance ClassMethods instantiate":{"type":"method","name":"instantiate","children":[],"call":["sti_class allocate init_with ","sti_class allocate ","IdentityMap  add ","instance reinit_with ","IdentityMap  get ","record_id to_i ","column number? ","sti_class columns_hash [] ","sti_class primary_key ","sti_class columns_hash ","ActiveRecord IdentityMap  enabled? ","record [] "," find_sti_class "," inheritance_column "," use_identity_map "," find_sti_class  allocate init_with "," find_sti_class  allocate ","sti_class allocate init_with  reinit_with ","IdentityMap  get  reinit_with "," use_identity_map  reinit_with ","record_id to_i  to_i ","sti_class columns_hash []  number? ","sti_class sti_class columns_hash [] s_hash [] "," find_sti_class  columns_hash [] "," find_sti_class  primary_key ","sti_class sti_class columns_hash [] s_hash "," find_sti_class  columns_hash "," find_ find_sti_class  "," inheritance_sti_class columns_hash []  "]}," ActiveRecord Inheritance ClassMethods sti_name":{"type":"method","name":"sti_name","children":[],"call":[" name demodulize "," name "," store_full_sti_class "," store_full_class_name "]}," ActiveRecord Inheritance ClassMethods abstract_class?":{"type":"method","name":"abstract_class?","children":[],"call":["@abstract_class == "]}," ActiveRecord Inheritance ClassMethods base_class":{"type":"method","name":"base_class","children":[],"call":[" class_of_active_record_descendant "," superclass base_class "," superclass "," superclass abstract_class? "," superclass == "," raise "," name "," < "]}," ActiveRecord Inheritance ClassMethods symbolized_sti_name":{"type":"method","name":"symbolized_sti_name","children":[],"call":[" symbolized_base_class "," sti_name to_sym "," sti_name "," sti_name present? ","ActiveSupport Deprecation  warn "]}," ActiveRecord Inheritance ClassMethods symbolized_base_class":{"type":"method","name":"symbolized_base_class","children":[],"call":[" base_class to_s to_sym "," base_class to_s "," base_class ","ActiveSupport Deprecation  warn "]}," ActiveRecord Inheritance ClassMethods finder_needs_type_condition?":{"type":"method","name":"finder_needs_type_condition?","children":[],"call":["true == "," descends_from_active_record? "]}," ActiveRecord Inheritance ClassMethods descends_from_active_record?":{"type":"method","name":"descends_from_active_record?","children":[],"call":[" columns_hash include? ! "," columns_hash include? "," inheritance_column "," columns_hash "," superclass == "," superclass "," superclass descends_from_active_record? "," superclass abstract_class? "," == "]}," ActiveRecord TestFixtures enlist_fixture_connections":{"type":"method","name":"enlist_fixture_connections","children":[],"call":["ActiveRecord Base  connection_handler connection_pools values map ","ActiveRecord Base  connection_handler connection_pools values ","ActiveRecord Base  connection_handler connection_pools ","ActiveRecord Base  connection_handler ","ActiveRecord Base  connection_handler connection_pool_list map ","ActiveRecord Base  connection_handler connection_pool_list "," setup_shared_connection_pool "]}," ActiveRecord Fixtures File validate":{"type":"method","name":"validate","children":[],"call":[" raise ","Hash  === ","data all? ","YAML Omap  === "]}," ActiveRecord Fixtures File render":{"type":"method","name":"render","children":[],"call":["ERB  new result ","ERB  new "]}," ActiveRecord Fixtures File rows":{"type":"method","name":"rows","children":[],"call":[" validate to_a "," validate "," raise ","error backtrace ","error class ","YAML  load "," render ","IO  read "]}," ActiveRecord Fixtures File each":{"type":"method","name":"each","children":[],"call":[" rows each "," rows "]}," ActiveRecord Fixtures File initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Fixtures File open":{"type":"method","name":"open","children":[],"call":[]}," ActiveRecord ExplainSubscriber ignore_payload?":{"type":"method","name":"ignore_payload?","children":[],"call":["IGNORED_PAYLOADS  include? ","payload [] ","payload [] !~ ","payload [] match? ! ","payload [] match? "]}," ActiveRecord ExplainSubscriber call":{"type":"method","name":"call","children":[],"call":["queries << ","payload values_at "," ignore_payload? ","args last ","Thread  current [] ","Thread  current ","Thread  current []  << ","args last  values_at "," ignore_args last ? "]}," ActiveRecord Explain silence_auto_explain":{"type":"method","name":"silence_auto_explain","children":[],"call":["current []= ","current [] ","Thread  current ","Thread  current  []= ","Thread  current  [] ","Thread  Thread  current  "]}," ActiveRecord Explain exec_explain":{"type":"method","name":"exec_explain","children":[],"call":["(send\n  (lvar :queries) :map) join ","(send\n  (array) :tap) join ","msg << "," connection explain "," connection ","msg last << ","msg last ","(send\n  (lvar :bind) :map) inspect ","col name ","bind map ","bind empty? "," tap ","queries map ","(send\n  (lvar :binds) :map) inspect "," render_bind ","binds map ","binds empty? ","(str \"EXPLAIN for: \") dup ","(str \"EXPLAIN for: \") +@ "," connection_explain ","(begin\n  (send nil :build_explain_clause\n    (lvar :options))) +@ "," build_explain_clause ","(str \"EXPLAIN for: \") dup  << ","(str \"EXPLAIN for: \") +@  << ","(begin\n  (send nil :build_explain_clause\n    (lvar :options))) +@  << ","(str \"EXPLAIN for: \") dup  last << ","(str \"EXPLAIN for: \") +@  last << ","(begin\n  (send nil :build_explain_clause\n    (lvar :options))) +@  last << ","(str \"EXPLAIN for: \") dup  last ","(str \"EXPLAIN for: \") +@  last ","(begin\n  (send nil :build_explain_clause\n    (lvar :options))) +@  last ","((send\n  (lvar :queries) :map) join  \"EXPLAIN for: \") dup ","((send\n  (lvar :queries) :map) join  \"EXPLAIN for: \") +@ "]}," ActiveRecord Explain collecting_queries_for_explain":{"type":"method","name":"collecting_queries_for_explain","children":[],"call":["current []= ","current [] ","Thread  current ","ExplainRegistry  reset ","ExplainRegistry  queries ","ExplainRegistry  collect= ","Thread  current  []= ","Thread  current  [] ","Thread  Thread  current  "]}," ActiveRecord Explain logging_query_plan":{"type":"method","name":"logging_query_plan","children":[],"call":["current []= "," logger warn "," exec_explain "," logger ","Time  now - > ","Time  now - ","Time  now ","current [] nil? ","current [] ","Thread  current "," auto_explain_threshold_in_seconds "," connection supports_explain? "," connection ","Thread  current  []= ","Thread  current  [] nil? ","Thread  current  [] ","Thread  Thread  current  "," auto_explain_ auto_explain_threshold_in_seconds _in_seconds "]}," ActiveRecord Explain extended":{"type":"method","name":"extended","children":[],"call":[]}," ActiveRecord StaleObjectError message":{"type":"method","name":"message","children":[],"call":[" record class name "," record class "," record "," attempted_action "]}," ActiveRecord StaleObjectError initialize":{"type":"method","name":"initialize","children":[],"call":["record class name ","record class "]}," ActiveRecord DynamicMatchers aggregate_mapping":{"type":"method","name":"aggregate_mapping","children":[],"call":["mapping first is_a? ","mapping first ","reflection name ","reflection options [] ","reflection options "]}," ActiveRecord DynamicMatchers all_attributes_exists?":{"type":"method","name":"all_attributes_exists?","children":[],"call":["(send\n  (send nil :expand_attribute_names_for_aggregates\n    (lvar :attribute_names)) :-\n  (send\n    (send nil :column_methods_hash) :keys)) empty? "," expand_attribute_names_for_aggregates - "," column_methods_hash keys "," column_methods_hash "," expand_attribute_names_for_aggregates "]}," ActiveRecord DynamicMatchers expand_attribute_names_for_aggregates":{"type":"method","name":"expand_attribute_names_for_aggregates","children":[],"call":["(send\n  (lvar :attribute_names) :map) flatten ","field_attr to_sym "," aggregate_mapping map "," aggregate_mapping ","attribute_name to_sym ","(lvasgn :aggregation\n  (send nil :reflect_on_aggregation\n    (send\n      (lvar :attribute_name) :to_sym))) nil? "," reflect_on_aggregation ","attribute_names map ","(lvasgn : reflect_on_aggregation \n  (send nil :reflect_on_ reflect_on_aggregation \n    (send\n      (lvar :attribute_name) :to_sym))) nil? "," reflect_on_ reflect_on_aggregation  "]}," ActiveRecord DynamicMatchers method_missing":{"type":"method","name":"method_missing","children":[],"call":[" scoped send "," scoped ","match instantiator? ","relation send ","options any? ","arguments extract_options! ","match finder? "," send "," class_eval ","34 + ","attribute_names join ","match scope? ","match respond_to? "," raise ","attribute_names size ","arguments size ","(lvar :method_trace) + "," caller ","arguments size < "," all_attributes_exists? ","match attribute_names ","DynamicScopeMatch  match ","DynamicFinderMatch  match ","arguments length > ","arguments length ","(and\n  (and\n    (send\n      (lvar :match) :is_a?\n      (const nil :DynamicFinderMatch))\n    (send\n      (lvar :match) :instantiator?))\n  (send\n    (send\n      (lvar :arguments) :first) :is_a?\n    (const nil :Hash))) ! ","arguments first is_a? ","arguments first ","match is_a? ","match define ","match valid? ","Method  match ","Method  match  instantiator? "," scoped  send ","arguments extract_options!  any? ","arguments extract_arguments extract_options! ! ","Method  match  finder? ","match attribute_names  join ","Method  match  scope? ","Method  match  respond_to? ","match attribute_names  size ","match match attribute_names  ","Method  match  attribute_names ","DynamicScopeMatch  Method  match  ","DynamicFinderMatch  Method  match  ","(and\n  (and\n    (send\n      (lvar :Method  match ) :is_a?\n      (const nil :DynamicFinderMatch))\n    (send\n      (lvar :Method  match ) :instantiator?))\n  (send\n    (send\n      (lvar :arguments) :first) :is_a?\n    (const nil :Hash))) ! ","Method  match  is_a? ","Method  match  define ","Method  match  valid? ","Method  Method  match  "]}," ActiveRecord DynamicMatchers respond_to?":{"type":"method","name":"respond_to?","children":[],"call":[" all_attributes_exists? ","match attribute_names ","DynamicScopeMatch  match ","DynamicFinderMatch  match ","match valid? ","Method  match "," == ","DynamicScopeMatch  match  attribute_names ","DynamicFinderMatch  match  attribute_names ","Method  match  attribute_names ","DynamicScopeMatch  DynamicScopeMatch  match  ","DynamicScopeMatch  DynamicFinderMatch  match  ","DynamicScopeMatch  Method  match  ","DynamicFinderMatch  DynamicScopeMatch  match  ","DynamicFinderMatch  DynamicFinderMatch  match  ","DynamicFinderMatch  Method  match  ","DynamicScopeMatch  match  valid? ","DynamicFinderMatch  match  valid? ","Method  match  valid? ","Method  DynamicScopeMatch  match  ","Method  DynamicFinderMatch  match  ","Method  Method  match  "]}," ActiveRecord ConnectionAdapters SQLiteAdapter table_exists?":{"type":"method","name":"table_exists?","children":[],"call":[" tables any? "," tables "]}," ActiveRecord ConnectionAdapters SQLiteAdapter ExplainPrettyPrinter pp":{"type":"method","name":"pp","children":[],"call":["(send\n  (send\n    (lvar :result) :rows) :map) join + ","(send\n  (send\n    (lvar :result) :rows) :map) join ","row join ","result rows map ","result rows "]}," ActiveRecord ConnectionAdapters SQLiteAdapter explain":{"type":"method","name":"explain","children":[],"call":["ExplainPrettyPrinter  new pp "," exec_query ","ExplainPrettyPrinter  new "," to_sql "]}," ActiveRecord ConnectionAdapters SQLiteAdapter supports_index_sort_order?":{"type":"method","name":"supports_index_sort_order?","children":[],"call":[" sqlite_version >= "," sqlite_version "]}," ActiveRecord ConnectionAdapters SQLiteAdapter supports_explain?":{"type":"method","name":"supports_explain?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SchemaCache clear_table_cache!":{"type":"method","name":"clear_table_cache!","children":[],"call":["@tables delete ","@primary_keys delete ","@columns_hash delete ","@columns delete "]}," ActiveRecord ConnectionAdapters SchemaCache clear!":{"type":"method","name":"clear!","children":[],"call":["@tables clear ","@primary_keys clear ","@columns_hash clear ","@columns clear ","@data_sources clear ","@indexes clear "]}," ActiveRecord ConnectionAdapters SchemaCache table_exists?":{"type":"method","name":"table_exists?","children":[],"call":["@tables []= "," connection table_exists? "," connection ","@tables [] ","@tables key? "," prepare_tables ","@tables empty? "]}," ActiveRecord ConnectionAdapters SchemaCache initialize":{"type":"method","name":"initialize","children":[],"call":["h []= ","conn primary_key "," table_exists? ","Hash  new ","Hash  [] ","col name "," columns [] map "," columns [] "," columns ","conn columns "," connection primary_key "," connection "," connection columns "," prepare_default_proc "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter extract_table_ref_from_insert_sql":{"type":"method","name":"extract_table_ref_from_insert_sql","children":[],"call":["1 strip ","sql [] "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter Utils extract_schema_and_table":{"type":"method","name":"extract_schema_and_table","children":[],"call":["(send\n  (send\n    (send\n      (lvar :name) :scan\n      (regexp\n        (str \"[^\\\".\\\\s]+|\\\"[^\\\"]*\\\"\")\n        (regopt))) :[]\n    (irange\n      (int 0)\n      (int 1))) :collect) reverse ","m gsub ","name scan [] collect ","name scan [] ","name scan "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter current_schema":{"type":"method","name":"current_schema","children":[],"call":[" query [] [] "," query [] "," query "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter schema_exists?":{"type":"method","name":"schema_exists?","children":[],"call":[" exec_query rows first [] to_i > "," exec_query rows first [] to_i "," exec_query rows first [] "," exec_query rows first "," exec_query rows "," exec_query "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter ExplainPrettyPrinter pp":{"type":"method","name":"pp","children":[],"call":["pp join + ","pp join ","pp << ","nrows == ","result rows length ","result rows ","lines map ","- * ","header center rstrip ","header center ","(lvar :header) map max + ","(lvar :header) map max ","(lvar :header) map ","result rows map ","result columns first ","result columns ","result rows length  == ","result rows map  map ","result columns first  center rstrip ","result columns first  center ","(lvar :result columns first ) map max + ","(lvar :result columns first ) map max ","(lvar :result columns first ) map "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter explain":{"type":"method","name":"explain","children":[],"call":["ExplainPrettyPrinter  new pp "," exec_query ","ExplainPrettyPrinter  new "," to_sql "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter supports_explain?":{"type":"method","name":"supports_explain?","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter supports_index_sort_order?":{"type":"method","name":"supports_index_sort_order?","children":[],"call":[]}," ActiveRecord ConnectionAdapters MysqlAdapter execute_and_free":{"type":"method","name":"execute_and_free","children":[],"call":["result free "," execute "," execute  free "]}," ActiveRecord ConnectionAdapters MysqlAdapter error_number":{"type":"method","name":"error_number","children":[],"call":["exception errno ","exception respond_to? "]}," ActiveRecord ConnectionAdapters MysqlAdapter new_column":{"type":"method","name":"new_column","children":[],"call":["Column  new "," strict_mode? "]}," ActiveRecord ConnectionAdapters MysqlAdapter each_hash":{"type":"method","name":"each_hash","children":[],"call":[" to_enum ","row symbolize_keys! ","result each_hash "," block_given? "]}," ActiveRecord ConnectionAdapters MysqlAdapter Column adapter":{"type":"method","name":"adapter","children":[],"call":[]}," ActiveRecord ConnectionAdapters MysqlAdapter Column string_to_date":{"type":"method","name":"string_to_date","children":[],"call":[]}," ActiveRecord ConnectionAdapters MysqlAdapter Column string_to_dummy_time":{"type":"method","name":"string_to_dummy_time","children":[],"call":[]}," ActiveRecord ConnectionAdapters MysqlAdapter Column string_to_time":{"type":"method","name":"string_to_time","children":[],"call":[]}," ActiveRecord ConnectionAdapters Mysql2Adapter ExplainPrettyPrinter build_footer":{"type":"method","name":"build_footer","children":[],"call":["(begin\n  (lvar :nrows)) % ","nrows == "]}," ActiveRecord ConnectionAdapters Mysql2Adapter ExplainPrettyPrinter build_cells":{"type":"method","name":"build_cells","children":[],"call":["|  + + ","|  + ","cells join ","cells << ","item to_s send ","widths [] ","item to_s ","item is_a? ","item nil? ","items each_with_index "]}," ActiveRecord ConnectionAdapters Mysql2Adapter ExplainPrettyPrinter build_separator":{"type":"method","name":"build_separator","children":[],"call":["+ + + ","+ + ","(send\n  (lvar :widths) :map) join ","- * ","w + ","padding * ","widths map "]}," ActiveRecord ConnectionAdapters Mysql2Adapter ExplainPrettyPrinter compute_column_widths":{"type":"method","name":"compute_column_widths","children":[],"call":["widths << ","cells_in_column map max ","cells_in_column map ","(lvar :column) + ","r [] to_s ","r [] ","r [] nil? ","result rows map ","result rows ","result columns each_with_index ","result columns "," tap ","(lvar :column) +  map max ","(lvar :column) +  map "]}," ActiveRecord ConnectionAdapters Mysql2Adapter ExplainPrettyPrinter pp":{"type":"method","name":"pp","children":[],"call":["pp join + ","pp join ","pp << "," build_footer ","result rows length ","result rows "," build_cells ","result rows each ","result columns "," build_separator "," compute_column_widths "," build_ build_separator  "," compute_column_ compute_column_widths  "]}," ActiveRecord ConnectionAdapters Mysql2Adapter explain":{"type":"method","name":"explain","children":[],"call":["ExplainPrettyPrinter  new pp ","ExplainPrettyPrinter  new ","Time  now - ","Time  now "," exec_query "," to_sql ","binds dup "]}," ActiveRecord ConnectionAdapters Mysql2Adapter error_number":{"type":"method","name":"error_number","children":[],"call":["exception error_number ","exception respond_to? "]}," ActiveRecord ConnectionAdapters Mysql2Adapter new_column":{"type":"method","name":"new_column","children":[],"call":["Column  new "," strict_mode? "]}," ActiveRecord ConnectionAdapters Mysql2Adapter each_hash":{"type":"method","name":"each_hash","children":[],"call":[" to_enum ","result each "," block_given? "]}," ActiveRecord ConnectionAdapters Mysql2Adapter supports_explain?":{"type":"method","name":"supports_explain?","children":[],"call":[]}," ActiveRecord ConnectionAdapters Mysql2Adapter Column adapter":{"type":"method","name":"adapter","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter column_for":{"type":"method","name":"column_for","children":[],"call":[" raise ","c name == ","column_name to_s ","c name "," columns find "," columns "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter supports_views?":{"type":"method","name":"supports_views?","children":[],"call":[" version [] >= "," version [] "," version "," version >= "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter remove_timestamps_sql":{"type":"method","name":"remove_timestamps_sql","children":[],"call":[" remove_column_sql "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter add_timestamps_sql":{"type":"method","name":"add_timestamps_sql","children":[],"call":[" add_column_sql "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter remove_index_sql":{"type":"method","name":"remove_index_sql","children":[],"call":[" index_name_for_remove "," quote_column_name ","  index_name_for_remove _for_remove "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter add_index_sql":{"type":"method","name":"add_index_sql","children":[],"call":[" add_index_options "," quote_column_name ","index_algorithm []= ","index_algorithm present? "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter remove_column_sql":{"type":"method","name":"remove_column_sql","children":[],"call":[" columns_for_remove map "," columns_for_remove "," quote_column_name "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter rename_column_sql":{"type":"method","name":"rename_column_sql","children":[],"call":[" add_column_options! "," quote_column_name "," select_one [] "," select_one "," quote_table_name "," raise ","options []= ","column null ","column default ","c name == ","column_name to_s ","c name "," columns find "," columns ","column extra == ","column extra "," schema_creation accept ","ChangeColumnDefinition  new "," schema_creation "," column_for ","column name ","td new_column_definition "," create_table_definition ","column auto_increment? "," exec_query first [] "," exec_query first "," exec_query "," quote "," add_ column_for _options! "," quote_ column_for _name "," column_for  null "," column_for  default "," column_for _name to_s ","  column_for s find ","  column_for s "," column_for  extra == "," column_for  extra ","  column_for _for "," column_for  name ","td new_ column_for _definition "," create_table_definition  new_column_definition "," column_for  auto_increment? "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter change_column_sql":{"type":"method","name":"change_column_sql","children":[],"call":[" add_column_position! "," add_column_options! "," type_to_sql ","options [] "," quote_column_name ","options []= ","column null ","options has_key? ","column default "," options_include_default? "," column_for "," schema_creation accept ","ChangeColumnDefinition  new "," schema_creation ","column name ","td new_column_definition "," create_table_definition ","column comment ","options key? ","column sql_type "," add_ column_for _position! "," add_ column_for _options! "," quote_ column_for _name "," column_for  null "," column_for  default ","  column_for _for "," column_for  name ","td new_ column_for _definition "," create_table_definition  new_column_definition "," column_for  comment "," column_for  sql_type "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter add_column_sql":{"type":"method","name":"add_column_sql","children":[],"call":[" add_column_position! "," add_column_options! "," type_to_sql ","options [] "," quote_column_name "," schema_creation visit_AddColumn "," schema_creation ","td new_column_definition "," create_table_definition "," schema_creation accept ","AddColumnDefinition  new "," create_table_definition  new_column_definition "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter translate_exception":{"type":"method","name":"translate_exception","children":[],"call":["InvalidForeignKey  new ","RecordNotUnique  new "," error_number ","ValueTooLong  new ","Deadlocked  new ","NotNullViolation  new ","RangeError  new "," mismatched_foreign_key ","message include? ","QueryCanceled  new ","StatementTimeout  new ","LockWaitTimeout  new ","DatabaseAlreadyExists  new ","ConnectionNotEstablished  new ","exception message match? ","exception message ","ConnectionFailed  new "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter quoted_columns_for_index":{"type":"method","name":"quoted_columns_for_index","children":[],"call":[" quote_column_name + ","option_strings [] "," quote_column_name ","column_names map "," add_index_sort_order "," add_index_length ","Hash  [] "," add_index_sort_order  [] "," add_index_length  [] ","Hash  []  [] "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter add_index_length":{"type":"method","name":"add_index_length","children":[],"call":["option_strings [] ","column_names each ","length [] ","length has_key? ","options [] ","options is_a? ","length [] present? ","column << ","quoted_columns each ","length symbolize_keys ","options []  [] ","length symbolize_keys  [] ","options []  has_key? ","length symbolize_keys  has_key? ","options []  [] present? ","length symbolize_keys  [] present? ","options []  symbolize_keys ","length symbolize_keys  symbolize_keys "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter limited_update_conditions":{"type":"method","name":"limited_update_conditions","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter case_insensitive_comparison":{"type":"method","name":"case_insensitive_comparison","children":[],"call":["table [] eq ","table [] ","column case_sensitive? ","Arel Nodes BindParam  new "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter case_sensitive_modifier":{"type":"method","name":"case_sensitive_modifier","children":[],"call":["Arel Nodes Bin  new ","Arel Nodes  build_quoted "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter primary_key":{"type":"method","name":"primary_key","children":[],"call":["pk_and_sequence first "," pk_and_sequence_for "," pk_and_sequence_for  first ","  pk_and_sequence_for _for "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter pk_and_sequence_for":{"type":"method","name":"pk_and_sequence_for","children":[],"call":["keys first ","keys length == ","keys length ","key gsub ","1 split map ","1 split ","create_table to_s =~ ","create_table to_s "," each_hash first [] "," each_hash first "," each_hash "," execute_and_free "," quote_table_name ","key delete "," each_hash first []  to_s =~ "," each_hash first []  to_s "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter show_variable":{"type":"method","name":"show_variable","children":[],"call":["variables first [] ","variables first ","variables empty? "," select_all "," select_value "," query_value "," select_all  first [] "," select_all  first "," select_all  empty? "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter add_column_position!":{"type":"method","name":"add_column_position!","children":[],"call":["sql << "," quote_column_name ","options [] "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter type_to_sql":{"type":"method","name":"type_to_sql","children":[],"call":[" raise ","type to_s == ","type to_s ","sql << ","type != "," binary_to_sql ","(irange\n  (int 0)\n  (int 4095)) === "," text_to_sql "," integer_to_sql "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter rename_column":{"type":"method","name":"rename_column","children":[],"call":[" execute "," rename_column_sql "," quote_table_name "," rename_column_indexes "," rename_column_for_alter "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter change_column":{"type":"method","name":"change_column","children":[],"call":[" execute "," change_column_sql "," quote_table_name "," change_column_for_alter "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter change_column_null":{"type":"method","name":"change_column_null","children":[],"call":[" change_column ","column sql_type "," execute "," quote_column_name "," quote "," quote_table_name ","default nil? "," column_for "," validate_change_column_null_argument! "," change_ column_for  "," column_for  sql_type "," quote_ column_for _name ","  column_for _for "," validate_change_ column_for _null_argument! "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter change_column_default":{"type":"method","name":"change_column_default","children":[],"call":[" change_column ","column sql_type "," column_for "," extract_new_default_value "," execute "," change_column_default_for_alter "," quote_table_name "," change_ column_for  "," column_for  sql_type ","  column_for _for "," extract_new_ extract_new_default_value _value "," change_ column_for _default_for_alter "," change_column_ extract_new_default_value _for_alter "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter add_column":{"type":"method","name":"add_column","children":[],"call":[" execute "," add_column_sql "," quote_table_name "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter rename_table":{"type":"method","name":"rename_table","children":[],"call":[" execute "," quote_table_name "," rename_table_indexes "," schema_cache clear_data_source_cache! ","new_name to_s "," schema_cache ","table_name to_s "," validate_table_length! ","options [] "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter bulk_change_table":{"type":"method","name":"bulk_change_table","children":[],"call":[" execute "," quote_table_name ","(send\n  (lvar :operations) :map) flatten join ","(send\n  (lvar :operations) :map) flatten "," raise ","arguments inspect "," send "," respond_to? ","args shift ","operations map ","(send\n  (lvar :operations) :flat_map) join ","operations flat_map "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter create_table":{"type":"method","name":"create_table","children":[],"call":["options reverse_merge "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter columns":{"type":"method","name":"columns","children":[],"call":[" new_column ","field [] ","field [] == "," each_hash map "," each_hash "," execute_and_free "," quote_table_name "," set_field_encoding "," lookup_cast_type ","field [] presence ","type_metadata type == ","type_metadata type "," fetch_type_metadata "," column_definitions map "," column_definitions ","table_name to_s ","field [] =~ "," quote_table_name to_s  "," lookup_ lookup_cast_type  "," fetch_type_metadata  type == "," fetch_type_metadata  type "," fetch_ fetch_type_metadata  ","table_name to_s  to_s "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter indexes":{"type":"method","name":"indexes","children":[],"call":["indexes last lengths << ","row [] ","indexes last lengths ","indexes last ","indexes last columns << ","indexes last columns ","indexes << ","IndexDefinition  new ","row [] to_i == ","row [] to_i ","row [] == ","current_index != "," each_hash "," execute_and_free "," quote_table_name ","INDEX_USINGS  include? ","INDEX_TYPES  include? ","row [] downcase to_sym ","row [] downcase ","row [] presence ","indexes last lengths merge! ","ActiveSupport Deprecation  warn ","            Passing name to #indexes is deprecated without replacement.\n squish ","row []  != "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter table_exists?":{"type":"method","name":"table_exists?","children":[],"call":[" tables any? "," tables ","name split ","name to_s ","name present? "," data_source_exists? ","ActiveSupport Deprecation  warn ","(str \"          #table_exists? currently checks both tables and views.\\n\") squish "," select_values any? "," select_values ","sql << "," quote "," extract_schema_qualified_name ","table_name present? ","name to_s  split ","name to_s  to_s ","name to_s  present? "," extract_schema_qualified_name to_s  ","table_name to_s  present? "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter tables":{"type":"method","name":"tables","children":[],"call":["field first ","result collect "," execute_and_free ","sql << "," quote "," quote_table_name "," data_sources ","ActiveSupport Deprecation  warn ","            Passing arguments to #tables is deprecated without replacement.\n squish ","(str \"          #tables currently returns both tables and views.\\n\") squish "," select_values ","@config [] "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter collation":{"type":"method","name":"collation","children":[],"call":[" show_variable "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter charset":{"type":"method","name":"charset","children":[],"call":[" show_variable "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter current_database":{"type":"method","name":"current_database","children":[],"call":[" select_value "," query_value "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter drop_database":{"type":"method","name":"drop_database","children":[],"call":[" execute "," quote_table_name "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter create_database":{"type":"method","name":"create_database","children":[],"call":[" execute ","options [] "," quote_table_name "," raise "," row_format_dynamic_by_default? "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter recreate_database":{"type":"method","name":"recreate_database","children":[],"call":[" create_database "," drop_database "," reconnect! "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter structure_dump":{"type":"method","name":"structure_dump","children":[],"call":["(send\n  (send nil :select_all\n    (lvar :sql)) :map) join "," exec_without_stmt first [] + "," exec_without_stmt first [] "," exec_without_stmt first "," exec_without_stmt "," quote_table_name ","table to_a first last ","table to_a first ","table to_a ","table delete "," select_all map "," select_all "," supports_views? "," exec_query first [] + "," exec_query first [] "," exec_query first "," exec_query ","(send\n  (send nil :select_all\n    (lvar :sql)\n    (str \"SCHEMA\")) :map) join "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter join_to_update":{"type":"method","name":"join_to_update","children":[],"call":["update wheres= ","select constraints ","update table ","select source ","update where ","update key in ","update key ","subselect from ","subsubselect as ","subselect project ","Arel  sql ","update key name ","Arel SelectManager  new ","select engine ","subsubselect projections= ","select clone ","select orders any? ","select orders ","select offset ","select limit ","Arel SelectManager  new  from ","subArel SelectManager  new  as ","select clone  as ","Arel SelectManager  new  project ","subArel SelectManager  new  projections= ","select clone  projections= "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter release_savepoint":{"type":"method","name":"release_savepoint","children":[],"call":[" execute "," current_savepoint_name "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter rollback_to_savepoint":{"type":"method","name":"rollback_to_savepoint","children":[],"call":[" execute "," current_savepoint_name "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter create_savepoint":{"type":"method","name":"create_savepoint","children":[],"call":[" execute "," current_savepoint_name "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter rollback_db_transaction":{"type":"method","name":"rollback_db_transaction","children":[],"call":[" execute "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter commit_db_transaction":{"type":"method","name":"commit_db_transaction","children":[],"call":[" execute "," internal_execute "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter begin_db_transaction":{"type":"method","name":"begin_db_transaction","children":[],"call":[" execute "," internal_execute "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter update_sql":{"type":"method","name":"update_sql","children":[],"call":["@connection affected_rows "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter execute_and_free":{"type":"method","name":"execute_and_free","children":[],"call":[" execute "," raw_execute "," mark_transaction_written_if_write "," check_if_write_query "," transform_query "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter execute":{"type":"method","name":"execute","children":[],"call":[" raise ","exception message split first =~ ","exception message split first ","exception message split ","exception message ","@connection query "," log ","name == ","ActiveRecord StatementInvalid  new ","exception original_exception ","ActiveSupport Dependencies  interlock permit_concurrent_loads ","ActiveSupport Dependencies  interlock "," materialize_transactions "," mark_transaction_written_if_write "," raw_execute "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter disable_referential_integrity":{"type":"method","name":"disable_referential_integrity","children":[],"call":[" update "," select_value "," query_value "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter quoted_false":{"type":"method","name":"quoted_false","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter quoted_true":{"type":"method","name":"quoted_true","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter quote_table_name":{"type":"method","name":"quote_table_name","children":[],"call":[" quote_column_name gsub "," quote_column_name ","@quoted_table_names [] "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter quote_column_name":{"type":"method","name":"quote_column_name","children":[],"call":["name to_s gsub ","name to_s ","@quoted_column_names [] "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter quote":{"type":"method","name":"quote","children":[],"call":["value to_s ","value kind_of? ","column class string_to_binary unpack [] ","column class string_to_binary unpack ","column class string_to_binary ","column class ","column class respond_to? ","column type == ","column type ","value unpack [] ","value unpack ","value to_column class string_to_binary unpack []  ","value to_value unpack []  ","column clacolumn class string_to_binary unpack [] column class string_to_binary unpack []  column class string_to_binary unpack [] tring_to_binary unpack [] ","column clavalue unpack [] value unpack []  value unpack [] tring_to_binary unpack [] ","column clacolumn class string_to_binary unpack [] column class string_to_binary unpack []  column class string_to_binary unpack [] tring_to_binary unpack ","column clavalue unpack [] value unpack []  value unpack [] tring_to_binary unpack ","column clacolumn class string_to_binary unpack [] column class string_to_binary unpack []  column class string_to_binary unpack [] tring_to_binary ","column clavalue unpack [] value unpack []  value unpack [] tring_to_binary ","column clacolumn class string_to_binary unpack [] column class string_to_binary unpack []  ","column clavalue unpack [] value unpack []  ","column clacolumn class string_to_binary unpack [] column class string_to_binary unpack []  recolumn class string_to_binary unpack [] pond_to? ","column clavalue unpack [] value unpack []  revalue unpack [] pond_to? "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter error_number":{"type":"method","name":"error_number","children":[],"call":[" raise "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter new_column":{"type":"method","name":"new_column","children":[],"call":["Column  new "," strict_mode? ","MySQL Column  new "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter each_hash":{"type":"method","name":"each_hash","children":[],"call":[" raise "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter native_database_types":{"type":"method","name":"native_database_types","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter supports_index_sort_order?":{"type":"method","name":"supports_index_sort_order?","children":[],"call":[" version >= "," version "," mariadb? ! "," mariadb? "," database_version >= "," database_version "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter supports_bulk_alter?":{"type":"method","name":"supports_bulk_alter?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter supports_savepoints?":{"type":"method","name":"supports_savepoints?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter supports_primary_key?":{"type":"method","name":"supports_primary_key?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter supports_migrations?":{"type":"method","name":"supports_migrations?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter adapter_name":{"type":"method","name":"adapter_name","children":[],"call":[" class "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter initialize":{"type":"method","name":"initialize","children":[],"call":["Arel Visitors MySQL  new ","BindSubstitution  new ","config fetch "," unprepared_visitor "," class type_cast_config_to_boolean "," class "," raise "," full_version match [] "," full_version match "," full_version "," version < "," version ","StatementPool  new "," class type_cast_config_to_integer ","config [] ","@visitor extend "," version_string ","Arel Visitors MySQL  new  extend ","BindSubstitution  new  extend "," unprepared_visitor  extend "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter Column missing_default_forged_as_empty_string?":{"type":"method","name":"missing_default_forged_as_empty_string?","children":[],"call":["default == "," null ! "," null "," type != "," type "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter Column extract_limit":{"type":"method","name":"extract_limit","children":[],"call":["(send\n  (send\n    (nth-ref 1) :split\n    (str \",\")) :map) max ","enum strip length - ","enum strip length ","enum strip ","1 split map ","1 split "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter Column simplified_type":{"type":"method","name":"simplified_type","children":[],"call":["field_type downcase index ","field_type downcase "," adapter emulate_booleans "," adapter "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter Column case_sensitive?":{"type":"method","name":"case_sensitive?","children":[],"call":[" collation match ! "," collation match "," collation "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter Column adapter":{"type":"method","name":"adapter","children":[],"call":[" raise "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter Column has_default?":{"type":"method","name":"has_default?","children":[],"call":[" type == "," type "," sql_type =~ "," sql_type "," blob_or_text_column? "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter Column extract_default":{"type":"method","name":"extract_default","children":[],"call":[" missing_default_forged_as_empty_string? "," raise ","default inspect "," type "," null ","default blank? "," type == "," sql_type =~ "," sql_type "," strict "," blob_or_text_column? "," default "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter Column initialize":{"type":"method","name":"initialize","children":[],"call":[" extract_default "," assert_valid_default "," default "]}," ActiveRecord ConnectionAdapters AbstractAdapter close":{"type":"method","name":"close","children":[],"call":[" pool checkin "," pool "]}," ActiveRecord ConnectionAdapters AbstractAdapter case_insensitive_comparison":{"type":"method","name":"case_insensitive_comparison","children":[],"call":["table [] lower eq ","table lower ","table [] lower ","table [] ","table [] eq ","Arel Nodes BindParam  new "," can_perform_case_insensitive_comparison_for? "," case_sensitive_comparison ","attribute eq ","attribute lower eq ","attribute relation lower ","attribute relation ","attribute lower "," column_for_attribute ","  column_for_attribute _for_attribute "]}," ActiveRecord ConnectionAdapters AbstractAdapter supports_explain?":{"type":"method","name":"supports_explain?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter supports_index_sort_order?":{"type":"method","name":"supports_index_sort_order?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter expire":{"type":"method","name":"expire","children":[],"call":[" raise ","Cannot expire connection,  << << ","Thread  current ","Cannot expire connection,  << ","@owner != "," in_use? ","Concurrent  monotonic_time ","Process  clock_gettime ","ActiveSupport IsolatedExecutionState  context "]}," ActiveRecord ConnectionAdapters AbstractAdapter lease":{"type":"method","name":"lease","children":[],"call":["Time  now "," in_use "," synchronize ","Thread  current "," in_use? "," raise ","msg << << ","msg << ","@owner == ","Cannot lease connection,  dup ","Cannot lease connection,  +@ ","ActiveSupport IsolatedExecutionState  context ","Cannot lease connection,  dup  << << ","Cannot lease connection,  +@  << << ","Cannot lease connection,  dup  << ","Cannot lease connection,  +@  << ","Thread  current  == ","ActiveSupport IsolatedExecutionState  context  == "]}," ActiveRecord ConnectionAdapters SchemaStatements add_index_sort_order":{"type":"method","name":"add_index_sort_order","children":[],"call":["order upcase ","option_strings [] ","column_names each ","order [] to_s upcase ","order [] to_s ","order [] ","order has_key? ","options [] ","options is_a? ","order [] upcase ","column << ","order present? ","quoted_columns each ","order [] present? ","order symbolize_keys ","orders [] upcase ","orders [] ","orders [] present? "," options_for_index_columns ","options []  upcase ","order symbolize_keys  upcase ","options []  [] to_s upcase ","order symbolize_keys  [] to_s upcase ","options []  [] to_s ","order symbolize_keys  [] to_s ","options []  [] ","order symbolize_keys  [] ","options []  has_key? ","order symbolize_keys  has_key? ","options []  [] upcase ","order symbolize_keys  [] upcase ","options []  present? ","order symbolize_keys  present? ","options []  [] present? ","order symbolize_keys  [] present? ","options []  symbolize_keys ","order symbolize_keys  symbolize_keys ","options [] s [] upcase ","order symbolize_keys s [] upcase "," options_for_index_columns  [] upcase ","options [] s [] ","order symbolize_keys s [] "," options_for_index_columns  [] ","options [] s [] present? ","order symbolize_keys s [] present? "," options_for_index_columns  [] present? "]}," ActiveRecord ConnectionAdapters TableDefinition new_column_definition":{"type":"method","name":"new_column_definition","children":[],"call":["@columns_hash []= ","@columns << ","ColumnDefinition  new ","column primary_key= ","options [] ","type == ","column after= ","column first= ","column null= ","column default= ","column scale= ","column precision= ","column array= ","column respond_to? ","column limit= "," native [] [] "," native [] "," native "," native [] is_a? ","options fetch "," create_column_definition "," aliased_types ","type to_s "," aliased_types [] ","column comment= ","column collation= ","column auto_increment= ","options []= "," integer_like_primary_key_type "," integer_like_primary_key? ","options key? ! ","options key? ","@conn supports_datetime_with_precision? ","@ create_column_definition s_hash []= ","@ create_column_definition s << "," create_column_definition  primary_key= "," aliased_types  == "," integer_like_primary_key_type  == "," create_column_definition  after= "," create_column_definition  first= "," create_column_definition  null= "," create_column_definition  default= "," create_column_definition  scale= "," create_column_definition  precision= "," create_column_definition  array= "," create_column_definition  respond_to? "," create_column_definition  limit= "," create_column_ColumnDefinition  new  "," create_ create_column_definition _definition "," aliased_ aliased_types s "," aliased_ integer_like_primary_key_type s "," aliased_types  to_s "," integer_like_primary_key_type  to_s "," aliased_ aliased_types s [] "," aliased_ integer_like_primary_key_type s [] "," create_column_definition  comment= "," create_column_definition  collation= "," create_column_definition  auto_increment= "," integer_like_primary_key_ aliased_types  "," integer_like_primary_key_ integer_like_primary_key_type  "]}," ActiveRecord Base ConnectionSpecification Resolver connection_url_to_hash":{"type":"method","name":"connection_url_to_hash","children":[],"call":["spec merge! ","Hash  [] symbolize_keys ","Hash  [] ","pair split ","config query split map ","config query split ","config query ","value ! ","spec reject! ","config host ","config path sub ","config path ","config port ","config password ","config user ","adapter == ","config scheme ","URI  parse ","spec []= ","URI  unescape ","value is_a? ","spec map ","value blank? ","URI  parse  query split map ","URI  parse  query split ","URI  parse  query ","URI  parse  host ","URI  parse  path sub ","URI  parse  path ","URI  parse  port ","URI  parse  password ","URI  parse  user ","config scheme  == ","URI  parse  scheme "]}," ActiveRecord Base ConnectionSpecification Resolver resolve_hash_connection":{"type":"method","name":"resolve_hash_connection","children":[],"call":["ConnectionSpecification  new ","spec [] "," raise ","e backtrace ","e message "," require ","spec key? ","spec symbolize_keys ","spec symbolize_keys  [] ","spec symbolize_keys  key? ","spec symbolize_keys  symbolize_keys "]}," ActiveRecord Base ConnectionSpecification Resolver resolve_string_connection":{"type":"method","name":"resolve_string_connection","children":[],"call":[" resolve_hash_connection "," raise "," connection_url_to_hash "," configurations fetch "," configurations "]}," ActiveRecord Base ConnectionSpecification Resolver spec":{"type":"method","name":"spec","children":[],"call":[" resolve_hash_connection "," config "," resolve_string_connection "," config to_s ","Rails  env "," raise "]}," ActiveRecord Base ConnectionSpecification Resolver initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters ConnectionPool active_connections":{"type":"method","name":"active_connections","children":[],"call":["c in_use? ","@connections find_all "]}," ActiveRecord ConnectionAdapters ConnectionPool primary_keys":{"type":"method","name":"primary_keys","children":[],"call":["c schema_cache primary_keys ","c schema_cache "," with_connection "]}," ActiveRecord ConnectionAdapters ConnectionPool columns_hash":{"type":"method","name":"columns_hash","children":[],"call":["c schema_cache columns_hash ","c schema_cache "," with_connection "]}," ActiveRecord ConnectionAdapters ConnectionPool columns":{"type":"method","name":"columns","children":[],"call":["c schema_cache columns ","c schema_cache "," with_connection "]}," ActiveRecord Base yaml_initialize":{"type":"method","name":"yaml_initialize","children":[],"call":[" init_with "]}," ActiveRecord Base to_yaml":{"type":"method","name":"to_yaml","children":[],"call":["map add ","coder each ","out map "," to_yaml_style "," taguri ","YAML  quick_emit "," encode_with ","YAML ENGINE  syck? ! ","YAML ENGINE  syck? ","YAML  const_defined? "]}," ActiveRecord Base generated_feature_methods":{"type":"method","name":"generated_feature_methods","children":[],"call":[" include "," const_set ","Module  new "]}," ActiveRecord Base inherited":{"type":"method","name":"inherited","children":[],"call":["child_class generated_feature_methods ","child_class generated_attribute_methods ","child_class initialize_generated_modules "]}," ActiveRecord AttributeMethods arel_attributes_values":{"type":"method","name":"arel_attributes_values","children":[],"call":["attrs []= ","arel_table [] "," read_attribute ","@attributes [] serialized_value ","@attributes [] ","klass serialized_attributes include? ","klass serialized_attributes "," class readonly_attributes include? ! "," class readonly_attributes include? "," class readonly_attributes "," class ","column primary ! ","column primary "," column_for_attribute ","attribute_names each ","klass arel_table ","klass arel_table  [] ","@attributes [] serialized_ read_attribute  ","@attributes [] serialized_@attributes [] serialized_value  "," class  serialized_attributes include? "," class  serialized_attributes "," column_for_attribute  primary ! "," column_for_attribute  primary ","  column_for_attribute _for_attribute ","klass klass arel_table  "," class  arel_table "]}," ActiveRecord AttributeMethods clone_attribute_value":{"type":"method","name":"clone_attribute_value","children":[],"call":["value clone ","value duplicable? "," send "," send  clone "," send  duplicable? "]}," ActiveRecord AttributeMethods clone_attributes":{"type":"method","name":"clone_attributes","children":[],"call":["attributes []= "," clone_attribute_value "," attribute_names each "," attribute_names "]}," ActiveRecord AttributeMethods column_for_attribute":{"type":"method","name":"column_for_attribute","children":[],"call":[" class columns_hash [] ","name to_s "," class columns_hash "," class "]}," ActiveRecord AttributeMethods attribute_present?":{"type":"method","name":"attribute_present?","children":[],"call":["value empty? ! ","value empty? ","value respond_to? ","value nil? ! ","value nil? "," read_attribute ","(and\n  (send\n    (lvar :value) :respond_to?\n    (sym :empty?))\n  (send\n    (lvar :value) :empty?)) ! "," _read_attribute "," class attribute_aliases [] "," class attribute_aliases "," class ","attr_name to_s "," read_attribute  empty? ! "," _read_attribute  empty? ! "," read_attribute  empty? "," _read_attribute  empty? "," read_attribute  respond_to? "," _read_attribute  respond_to? "," read_attribute  nil? ! "," _read_attribute  nil? ! "," read_attribute  nil? "," _read_attribute  nil? ","(and\n  (send\n    (lvar : read_attribute ) :respond_to?\n    (sym :empty?))\n  (send\n    (lvar : read_attribute ) :empty?)) ! ","(and\n  (send\n    (lvar : _read_attribute ) :respond_to?\n    (sym :empty?))\n  (send\n    (lvar : _read_attribute ) :empty?)) ! ","attr_name to_s  to_s "]}," ActiveRecord AttributeMethods attribute_for_inspect":{"type":"method","name":"attribute_for_inspect","children":[],"call":["value inspect ","value to_s ","value is_a? ","(begin\n  (send\n    (lvar :value) :[]\n    (irange\n      (int 0)\n      (int 50)))) inspect ","value [] ","value length > ","value length "," read_attribute ","inspected [] ","value first inspect ","value first ","value size > ","value size ","(begin\n  (send\n    (lvar :value) :[]\n    (int 0)\n    (int 50))) inspect "," format_for_inspect "," _read_attribute "," class attribute_aliases [] "," class attribute_aliases "," class ","attr_name to_s "," read_attribute  inspect "," _read_attribute  inspect "," read_attribute  to_s "," _read_attribute  to_s "," read_attribute  is_a? "," _read_attribute  is_a? ","(begin\n  (send\n    (lvar : read_attribute ) :[]\n    (irange\n      (int 0)\n      (int 50)))) inspect ","(begin\n  (send\n    (lvar : _read_attribute ) :[]\n    (irange\n      (int 0)\n      (int 50)))) inspect "," read_attribute  [] "," _read_attribute  [] "," read_attribute  length > "," _read_attribute  length > "," read_attribute  length "," _read_attribute  length ","value first inspect  [] "," read_attribute  first inspect "," _read_attribute  first inspect "," read_attribute  first "," _read_attribute  first "," read_attribute  size > "," _read_attribute  size > "," read_attribute  size "," _read_attribute  size ","(begin\n  (send\n    (lvar : read_attribute ) :[]\n    (int 0)\n    (int 50))) inspect ","(begin\n  (send\n    (lvar : _read_attribute ) :[]\n    (int 0)\n    (int 50))) inspect ","attr_name to_s  to_s "]}," ActiveRecord AttributeMethods attributes":{"type":"method","name":"attributes","children":[],"call":["Hash  [] "," read_attribute ","@attributes map ","attrs []= "," attribute_names each "," attribute_names "," attribute_names each_with_object ","@attributes to_hash "]}," ActiveRecord AttributeMethods attribute_names":{"type":"method","name":"attribute_names","children":[],"call":["@attributes keys "]}," ActiveRecord AttributeMethods has_attribute?":{"type":"method","name":"has_attribute?","children":[],"call":["@attributes has_key? ","attr_name to_s ","@attributes key? "," class attribute_aliases [] "," class attribute_aliases "," class ","attr_name to_s  to_s "]}," ActiveRecord AttributeMethods attribute_missing":{"type":"method","name":"attribute_missing","children":[],"call":["ActiveSupport Deprecation  warn ","match attr_name ","match method_name "," class columns_hash [] "," class columns_hash "," class "]}," ActiveRecord AttributeMethods ClassMethods attribute_names":{"type":"method","name":"attribute_names","children":[],"call":[" column_names "," table_exists? "," abstract_class? ! "," abstract_class? "," attribute_types keys "," attribute_types ","(and\n  (send\n    (send nil :abstract_class?) :!)\n  (send nil :table_exists?)) freeze "]}," ActiveRecord AttributeMethods ClassMethods attribute_method?":{"type":"method","name":"attribute_method?","children":[],"call":[" column_names include? ","attribute to_s sub ","attribute to_s "," column_names "," table_exists? ","attribute to_s delete_suffix "]}," ActiveRecord AttributeMethods ClassMethods method_defined_within?":{"type":"method","name":"method_defined_within?","children":[],"call":["klass instance_method owner != ","sup instance_method owner ","sup instance_method ","klass instance_method owner ","klass instance_method ","sup private_method_defined? ","sup method_defined? ","klass private_method_defined? ","klass method_defined? ","superklass instance_method owner ","superklass instance_method ","superklass private_method_defined? ","superklass method_defined? "]}," ActiveRecord AttributeMethods ClassMethods dangerous_attribute_method?":{"type":"method","name":"dangerous_attribute_method?","children":[],"call":[" method_defined_within? ","superclass private_method_defined? ! ","superclass private_method_defined? ","superclass method_defined? ! ","superclass method_defined? ","active_record private_method_defined? ","active_record method_defined? ","ActiveRecord Base  superclass "," ActiveRecord AttributeMethods  dangerous_attribute_methods include? ","name to_s "," ActiveRecord AttributeMethods  dangerous_attribute_methods ","ActiveRecord Base  superclass  private_method_defined? ! ","ActiveRecord Base  superclass  private_method_defined? ","ActiveRecord Base  superclass  method_defined? ! ","ActiveRecord Base  superclass  method_defined? ","ActiveRecord Base  ActiveRecord Base  superclass  "]}," ActiveRecord AttributeMethods ClassMethods generated_external_attribute_methods":{"type":"method","name":"generated_external_attribute_methods","children":[],"call":[" extend ","Module  new "," base_class generated_external_attribute_methods "," base_class "," base_class == "]}," ActiveRecord AttributeMethods []=":{"type":"method","name":"[]=","children":[],"call":[" write_attribute "]}," ActiveRecord AttributeMethods []":{"type":"method","name":"[]","children":[],"call":[" read_attribute "," missing_attribute "," caller "]}," ActiveRecord AttributeMethods Write convert_number_column_value":{"type":"method","name":"convert_number_column_value","children":[],"call":["value blank? ","value is_a? ","value == ","value presence "]}," ActiveRecord AttributeMethods Write type_cast_attribute_for_write":{"type":"method","name":"type_cast_attribute_for_write","children":[],"call":[" convert_number_column_value ","column number? ","column type_cast_for_write "]}," ActiveRecord AttributeMethods TimeZoneConversion ClassMethods attribute_cast_code":{"type":"method","name":"attribute_cast_code","children":[],"call":[" create_time_zone_conversion_attribute? "," columns_hash [] "," columns_hash ","  columns_hash [] s_hash [] ","  columns_hash [] s_hash "]}," ActiveRecord AttributeMethods Serialization type_cast_attribute_for_write":{"type":"method","name":"type_cast_attribute_for_write","children":[],"call":["Attribute  new "," class serialized_attributes [] ","column name "," class serialized_attributes "," class "]}," ActiveRecord AttributeMethods Serialization ClassMethods attribute_cast_code":{"type":"method","name":"attribute_cast_code","children":[],"call":[" serialized_attributes include? "," serialized_attributes "]}," ActiveRecord AttributeMethods Serialization ClassMethods initialize_attributes":{"type":"method","name":"initialize_attributes","children":[],"call":["attributes []= ","Attribute  new ","attributes [] ","attributes key? "," serialized_attributes each "," serialized_attributes ","options delete "]}," ActiveRecord AttributeMethods Serialization ClassMethods serialize":{"type":"method","name":"serialize","children":[],"call":[" serialized_attributes= "," serialized_attributes merge ","attr_name to_s "," serialized_attributes ","Coders YAMLColumn  new ","class_name respond_to? ","(sym :load) all? "," include ","class_name_or_coder respond_to? ","class_name_or_coder == ","Type Serialized  new "," decorate_attribute_type "," raise ","ColumnNotSerializableError  new "," type_incompatible_with_serialize? ","cast_type subtype ","Type Serialized  === "," attribute "," build_column_serializer ","(str \"missing keyword: :coder\\n\") squish "," default_column_serializer ","ActiveRecord  deprecator warn ","class_name_or_coder name ","attr_name inspect ","ActiveRecord  deprecator ","class_name_or_coder nil? ","class_name_or_Coders YAMLColumn  new  respond_to? ","class_name_or_Coders YAMLColumn  new  == ","cast_type subtype  subtype "," build_ build_column_serializer  ","(str \"missing keyword: :Coders YAMLColumn  new \\n\") squish "," default_ build_column_serializer  ","class_name_or_Coders YAMLColumn  new  name ","class_name_or_Coders YAMLColumn  new  nil? "]}," ActiveRecord AttributeMethods Serialization Attribute serialize":{"type":"method","name":"serialize","children":[],"call":[" value= "," coder dump "," value "," coder "," state= "]}," ActiveRecord AttributeMethods Serialization Attribute unserialize":{"type":"method","name":"unserialize","children":[],"call":[" value= "," coder load "," value "," coder "," state= "]}," ActiveRecord AttributeMethods Serialization Attribute serialized_value":{"type":"method","name":"serialized_value","children":[],"call":[" value "," serialize "," state == "," state "]}," ActiveRecord AttributeMethods Serialization Attribute unserialized_value":{"type":"method","name":"unserialized_value","children":[],"call":[" value "," unserialize "," state == "," state "]}," ActiveRecord AttributeMethods Read ClassMethods attribute_cast_code":{"type":"method","name":"attribute_cast_code","children":[],"call":[" columns_hash [] type_cast_code "," columns_hash [] "," columns_hash "]}," ActiveRecord AttributeMethods Read ClassMethods external_attribute_access_code":{"type":"method","name":"external_attribute_access_code","children":[],"call":[" cache_attribute? "]}," ActiveRecord AttributeMethods Read ClassMethods internal_attribute_access_code":{"type":"method","name":"internal_attribute_access_code","children":[],"call":[" cache_attribute? ","access_code insert ","attr_name == "," primary_key "]}," ActiveRecord AttributeMethods Read ClassMethods type_cast_attribute":{"type":"method","name":"type_cast_attribute","children":[],"call":["attributes [] "," type_cast_attribute "," define_attribute_methods "," attribute_methods_generated? ! "," attribute_methods_generated? "," generated_external_attribute_methods send "," generated_external_attribute_methods ","attr_name == ","attributes has_key? "," generated_external_attribute_methods method_defined? ","attr_name to_s ","attr_name to_s  == ","attr_name to_s  to_s "]}," ActiveRecord AttributeMethods Read ClassMethods undefine_attribute_methods":{"type":"method","name":"undefine_attribute_methods","children":[],"call":[" undef_method "," instance_methods each "," instance_methods "," generated_external_attribute_methods module_eval "," generated_external_attribute_methods "," base_class == "," base_class "]}," ActiveRecord AttributeMethods PrimaryKey ClassMethods original_primary_key":{"type":"method","name":"original_primary_key","children":[],"call":[" deprecated_original_property_getter "]}," ActiveRecord AttributeMethods PrimaryKey ClassMethods dangerous_attribute_method?":{"type":"method","name":"dangerous_attribute_method?","children":[],"call":["(str \"id\") include? ! ","(str \"id\") include? ","ID_ATTRIBUTE_METHODS  include? ! ","ID_ATTRIBUTE_METHODS  include? "]}," ActiveRecord AttributeMethods PrimaryKey ClassMethods define_method_attribute":{"type":"method","name":"define_method_attribute","children":[],"call":[" generated_external_attribute_methods module_eval "," primary_key "," generated_external_attribute_methods "," generated_attribute_methods send "," generated_attribute_methods ","attr_name != ","attr_name == "]}," ActiveRecord AttributeMethods PrimaryKey id?":{"type":"method","name":"id?","children":[],"call":[" query_attribute "," class primary_key "," class "," sync_with_transaction_state "," _query_attribute ","@primary_key all? "," class composite_primary_key? "]}," ActiveRecord AttributeMethods PrimaryKey id=":{"type":"method","name":"id=","children":[],"call":[" write_attribute "," class primary_key "," class "," sync_with_transaction_state "," _write_attribute ","@primary_key zip "," raise ","value inspect "," class primary_key inspect ","value is_a? "," class composite_primary_key? "," class  class primary_key  ","@ class primary_key  zip "," class  class primary_key  inspect "," class composite_ class primary_key ? "]}," ActiveRecord AttributeMethods PrimaryKey id":{"type":"method","name":"id","children":[],"call":[" read_attribute "," class primary_key "," class "," sync_with_transaction_state "," _read_attribute ","@primary_key map ","@primary_key is_a? "," class  class primary_key  ","@ class primary_key  map ","@ class primary_key  is_a? "]}," ActiveRecord AttributeMethods DeprecatedUnderscoreRead _attribute":{"type":"method","name":"_attribute","children":[],"call":[" read_attribute ","ActiveSupport Deprecation  warn "]}," ActiveRecord AttributeMethods DeprecatedUnderscoreRead ClassMethods define_method__attribute":{"type":"method","name":"define_method__attribute","children":[],"call":[]}," ActiveRecord AttributeAssignment find_parameter_position":{"type":"method","name":"find_parameter_position","children":[],"call":["multiparameter_name scan first first to_i ","multiparameter_name scan first first ","multiparameter_name scan first ","multiparameter_name scan "]}," ActiveRecord AttributeAssignment type_cast_attribute_value":{"type":"method","name":"type_cast_attribute_value","children":[],"call":["value send ","to_ + ","multiparameter_name =~ "]}," ActiveRecord AttributeAssignment extract_callstack_for_multiparameter_attributes":{"type":"method","name":"extract_callstack_for_multiparameter_attributes","children":[],"call":["attributes [] [] "," find_parameter_position ","attributes [] "," type_cast_attribute_value ","value empty? ","attributes []= ","attributes include? ","multiparameter_name split first ","multiparameter_name split ","pairs each "]}," ActiveRecord AttributeAssignment extract_max_param_for_multiparameter_attributes":{"type":"method","name":"extract_max_param_for_multiparameter_attributes","children":[],"call":["(send\n  (send\n    (lvar :values_hash_from_param) :keys) :max) min ","values_hash_from_param keys max ","values_hash_from_param keys "]}," ActiveRecord AttributeAssignment read_other_parameter_value":{"type":"method","name":"read_other_parameter_value","children":[],"call":["klass new ","values_hash_from_param [] "," raise ","values_hash_from_param has_key? ! ","values_hash_from_param has_key? ","(irange\n  (int 1)\n  (lvar :max_position)) collect "," extract_max_param_for_multiparameter_attributes ","(irange\n  (int 1)\n  (lvar : extract_max_param_for_multiparameter_attributes )) collect "]}," ActiveRecord AttributeAssignment read_date_parameter_value":{"type":"method","name":"read_date_parameter_value","children":[],"call":[" instantiate_time_object to_date "," instantiate_time_object ","Date  new ","values_hash_from_param [] ","values_hash_from_param [] blank? ","(irange\n  (int 1)\n  (int 3)) any? "]}," ActiveRecord AttributeAssignment read_time_parameter_value":{"type":"method","name":"read_time_parameter_value","children":[],"call":[" instantiate_time_object ","set_values []= ","set_values [] ","set_values [] blank? ","(irange\n  (int 3)\n  (int 5)) each ","values_hash_from_param [] ","(irange\n  (int 1)\n  (lvar :max_position)) collect ","values_hash_from_param [] blank? ","(irange\n  (int 1)\n  (int 3)) any? "," extract_max_param_for_multiparameter_attributes "," raise ","values_hash_from_param has_key? ! ","values_hash_from_param has_key? ","(int 1) any? ","(irange\n  (int 1)\n  (lvar : extract_max_param_for_multiparameter_attributes )) collect "]}," ActiveRecord AttributeAssignment read_value_from_parameter":{"type":"method","name":"read_value_from_parameter","children":[],"call":[" read_other_parameter_value "," read_date_parameter_value ","klass == "," read_time_parameter_value ","v nil? ","values_hash_from_param values all? ","values_hash_from_param values ","(or\n  (send\n    (send\n      (self) :class) :reflect_on_aggregation\n    (send\n      (lvar :name) :to_sym))\n  (send nil :column_for_attribute\n    (lvar :name))) klass "," column_for_attribute "," class reflect_on_aggregation ","name to_sym "," class ","(or\n  (send\n    (send\n      (self) :class) :reflect_on_aggregation\n    (send\n      (lvar :name) :to_sym))\n  (send nil :column_for_attribute\n    (lvar :name))) klass  == ","(or\n  (send\n    (send\n      (self) :class) :reflect_on_aggregation\n    (send\n      (lvar :name) :to_sym))\n  (send nil :column_for_attribute\n    (lvar :name))) (or\n  (send\n    (send\n      (self) :class) :reflect_on_aggregation\n    (send\n      (lvar :name) :to_sym))\n  (send nil :column_for_attribute\n    (lvar :name))) klass  "]}," ActiveRecord AttributeAssignment execute_callstack_for_multiparameter_attributes":{"type":"method","name":"execute_callstack_for_multiparameter_attributes","children":[],"call":[" raise ","errors size ","MultiparameterAssignmentErrors  new ","errors empty? ","errors << ","AttributeAssignmentError  new ","values_with_empty_parameters values inspect ","values_with_empty_parameters values "," send "," read_value_from_parameter ","name + ","callstack each ","(send\n  (lvar :errors) :map) join ","ex message ","errors map ","MultiparameterAttribute  new read_value ","MultiparameterAttribute  new ","errors map join ","values_with_empty_parameters each_value all? ","values_with_empty_parameters each_value "]}," ActiveRecord AttributeAssignment instantiate_time_object":{"type":"method","name":"instantiate_time_object","children":[],"call":["Time  time_with_datetime_fallback "," class default_timezone "," class ","Time  zone local ","Time  zone "," class send "," column_for_attribute "]}," ActiveRecord AttributeAssignment assign_multiparameter_attributes":{"type":"method","name":"assign_multiparameter_attributes","children":[],"call":[" execute_callstack_for_multiparameter_attributes "," extract_callstack_for_multiparameter_attributes "]}," ActiveRecord AttributeAssignment mass_assignment_role":{"type":"method","name":"mass_assignment_role","children":[],"call":[" mass_assignment_options [] "," mass_assignment_options "]}," ActiveRecord AttributeAssignment mass_assignment_options":{"type":"method","name":"mass_assignment_options","children":[],"call":[]}," ActiveRecord AttributeAssignment assign_attributes":{"type":"method","name":"assign_attributes","children":[],"call":[" assign_multiparameter_attributes "," send ","nested_parameter_attributes each "," raise ","nested_parameter_attributes << ","v is_a? "," respond_to? ","multi_parameter_attributes << ","k include? ","attributes each "," sanitize_for_mass_assignment "," mass_assignment_role ","options [] ","new_attributes stringify_keys ","new_attributes blank? ","multi_parameter_attributes empty? "," assign_nested_parameter_attributes ","nested_parameter_attributes empty? "," _assign_attribute ","new_attributes respond_to? ! ","new_attributes respond_to? "," assign_multiparameter_ sanitize_for_mass_assignment  "," assign_multiparameter_new_attributes stringify_keys  ","nested_parameter_ sanitize_for_mass_assignment  each ","nested_parameter_new_attributes stringify_keys  each ","nested_parameter_ sanitize_for_mass_assignment  << ","nested_parameter_new_attributes stringify_keys  << ","multi_parameter_ sanitize_for_mass_assignment  << ","multi_parameter_new_attributes stringify_keys  << "," sanitize_for_mass_assignment  each ","new_attributes stringify_keys  each ","new_ sanitize_for_mass_assignment  stringify_keys ","new_new_attributes stringify_keys  stringify_keys ","new_ sanitize_for_mass_assignment  blank? ","new_new_attributes stringify_keys  blank? ","multi_parameter_ sanitize_for_mass_assignment  empty? ","multi_parameter_new_attributes stringify_keys  empty? "," assign_nested_parameter_ sanitize_for_mass_assignment  "," assign_nested_parameter_new_attributes stringify_keys  ","nested_parameter_ sanitize_for_mass_assignment  empty? ","nested_parameter_new_attributes stringify_keys  empty? ","new_ sanitize_for_mass_assignment  respond_to? ! ","new_new_attributes stringify_keys  respond_to? ! ","new_ sanitize_for_mass_assignment  respond_to? ","new_new_attributes stringify_keys  respond_to? "]}," ActiveRecord AttributeAssignment attributes=":{"type":"method","name":"attributes=","children":[],"call":[" assign_attributes ","new_attributes is_a? "]}," ActiveRecord AttributeAssignment ClassMethods attributes_protected_by_default":{"type":"method","name":"attributes_protected_by_default","children":[],"call":["default << "," primary_key eql? "," primary_key "," inheritance_column "]}," Builder Association mixin":{"type":"method","name":"mixin","children":[],"call":["@model generated_feature_methods "]}," ActiveRecord AttributeMethods ClassMethods generated_attribute_methods":{"type":"method","name":"generated_attribute_methods","children":[],"call":[" base_class generated_attribute_methods "," base_class "," base_class == "]}," ActiveRecord AttributeMethods Serialization set_serialized_attributes":{"type":"method","name":"set_serialized_attributes","children":[],"call":["@attributes []= ","Attribute  new ","@attributes [] ","@attributes key? "," class serialized_attributes each "," class serialized_attributes "," class "]}," ActiveRecord Base initialize_generated_modules":{"type":"method","name":"initialize_generated_modules","children":[],"call":[" generated_feature_methods "," generated_attribute_methods ","Mutex  new "]}," ActiveRecord Generators ModelGenerator accessible_attributes":{"type":"method","name":"accessible_attributes","children":[],"call":[" attributes reject "," attributes "]}," ActiveRecord SchemaDumper remove_prefix_and_suffix":{"type":"method","name":"remove_prefix_and_suffix","children":[],"call":["table gsub ","ActiveRecord Base  table_name_suffix ","ActiveRecord Base  table_name_prefix ","@options [] ","table sub ","Regexp  escape ","@options [] to_s ","@options [] blank? ","ActiveRecord Base  table_name_Regexp  escape  "]}," ActiveRecord Migration reverting?":{"type":"method","name":"reverting?","children":[],"call":["@connection reverting ","@connection respond_to? "," connection reverting "," connection "," connection respond_to? "]}," ActiveRecord Migration revert":{"type":"method","name":"revert","children":[],"call":[" send ","recorder commands each ","recorder commands ","recorder delegate ","@connection revert "," suppress_messages ","CommandRecorder  new ","@connection respond_to? "," block_given? "," run ","migration_classes reverse ","migration_classes empty? "," connection revert "," connection "," connection respond_to? ","recorder replay "," command_recorder ","CommandRecorder  new  commands each "," command_recorder  commands each ","CommandRecorder  new  commands "," command_recorder  commands ","CommandRecorder  new  delegate "," command_recorder  delegate ","recorder delegate  revert ","recorder delegate  respond_to? ","CommandRecorder  new  replay "," command_recorder  replay "," command_CommandRecorder  new  "," command_ command_recorder  "]}," ActiveRecord Inheritance ClassMethods use_identity_map":{"type":"method","name":"use_identity_map","children":[],"call":["IdentityMap  add ","sti_class allocate init_with ","sti_class allocate ","instance reinit_with ","IdentityMap  get ","record_id to_i ","column number? ","sti_class columns_hash [] ","sti_class primary_key ","sti_class columns_hash ","sti_class allocate init_with  reinit_with ","IdentityMap  get  reinit_with ","record_id to_i  to_i ","sti_class columns_hash []  number? ","sti_class sti_class columns_hash [] s_hash [] ","sti_class sti_class columns_hash [] s_hash "]}," ActiveRecord Fixtures instantiate_fixtures__with_new_arity":{"type":"method","name":"instantiate_fixtures__with_new_arity","children":[],"call":[]}," ActiveRecord DynamicFinderMatch save_method":{"type":"method","name":"save_method","children":[],"call":[" bang? "]}," ActiveRecord DynamicFinderMatch save_record?":{"type":"method","name":"save_record?","children":[],"call":["@instantiator == "]}," ActiveRecord ConnectionAdapters Column value_to_integer":{"type":"method","name":"value_to_integer","children":[],"call":["value to_i "]}," ActiveRecord ConnectionAdapters QueryCache locked?":{"type":"method","name":"locked?","children":[],"call":["arel locked ","arel respond_to? ","arel arel ","arel is_a? ","arel arel  locked ","arel arel  respond_to? ","arel arel  arel arel  ","arel arel  is_a? "]}," ActiveRecord ConnectionAdapters ConnectionPool release":{"type":"method","name":"release","children":[],"call":["@reserved_connections delete ","@reserved_connections [] == ","@reserved_connections [] ","@reserved_connections keys find ","@reserved_connections keys "," current_connection_id "," synchronize ","owner object_id "]}," ActiveRecord AttributeMethods TimeZoneConversion round_usec":{"type":"method","name":"round_usec","children":[],"call":["value change "]}," ActiveRecord AttributeMethods Serialization read_attribute_before_type_cast":{"type":"method","name":"read_attribute_before_type_cast","children":[],"call":[" unserialized_value "," serialized_attributes include? "," serialized_attributes "]}," ActiveRecord AttributeMethods Read ClassMethods define_external_attribute_method":{"type":"method","name":"define_external_attribute_method","children":[],"call":[" generated_external_attribute_methods module_eval ","82 + "," external_attribute_access_code "," attribute_cast_code "," generated_external_attribute_methods "]}," ActiveRecord AttributeMethods Dirty changes_from_zero_to_string?":{"type":"method","name":"changes_from_zero_to_string?","children":[],"call":["value != ","value present? ","value is_a? ","old == "," non_zero? "]}," ActiveRecord AttributeMethods Dirty changes_from_nil_to_empty_string?":{"type":"method","name":"changes_from_nil_to_empty_string?","children":[],"call":["value blank? ","old == ","old nil? ","column null "]}," ActiveRecord AttributeMethods Dirty _field_changed?":{"type":"method","name":"_field_changed?","children":[],"call":["old != ","column type_cast "," changes_from_zero_to_string? "," changes_from_nil_to_empty_string? ","column number? "," column_for_attribute ","@attributes [] changed_from? ","@attributes [] "," column_for_attribute  type_cast "," column_for_attribute  number? ","  column_for_attribute _for_attribute "]}," ActiveRecord Associations ThroughAssociation ensure_mutable":{"type":"method","name":"ensure_mutable","children":[],"call":[" raise ","HasManyThroughCantAssociateThroughHasOneOrManyReflection  new "," reflection "," owner "," source_reflection macro != "," source_reflection macro "," source_reflection "," source_reflection belongs_to? ","HasOneThroughCantAssociateThroughHasOneOrManyReflection  new "," reflection has_one? "]}," ActiveRecord Associations HasManyThroughAssociation concat_records":{"type":"method","name":"concat_records","children":[],"call":[" build_through_record ","records flatten each ","records flatten "," owner new_record? "," owner "," ensure_not_nested "]}," ActiveRecord ConnectionAdapters SchemaCache columns_hash":{"type":"method","name":"columns_hash","children":[],"call":["@columns_hash [] ","@columns_hash dup ","ActiveSupport Deprecation  warn ","Hash  [] ","col name "," columns map "," columns ","@columns_hash []= "," columns index_by freeze "," columns index_by "," deep_deduplicate ","@columns_hash fetch "]}," ActiveRecord ConnectionAdapters SchemaCache columns":{"type":"method","name":"columns","children":[],"call":["@columns [] ","@columns dup ","ActiveSupport Deprecation  warn "," connection columns "," connection ","@columns []= "," deep_deduplicate ","@columns fetch "," raise "," ignored_table? ","connection columns "]}," ActiveRecord AttributeMethods Serialization attributes_before_type_cast":{"type":"method","name":"attributes_before_type_cast","children":[],"call":["attributes []= ","attributes [] unserialized_value ","attributes [] ","attributes key? "," class serialized_attributes each_key "," class serialized_attributes "," class "," dup tap "," dup "]}," ActiveRecord AttributeMethods Serialization _field_changed?":{"type":"method","name":"_field_changed?","children":[],"call":["old != "," class serialized_attributes include? "," class serialized_attributes "," class "]}," ActiveRecord Associations HasOneAssociation transaction_if":{"type":"method","name":"transaction_if","children":[],"call":[" reflection klass transaction "," reflection klass "," reflection "]}," ActiveRecord SpawnMethods merge_relation_method":{"type":"method","name":"merge_relation_method","children":[],"call":["relation send ","relation send + "]}," ActiveRecord SpawnMethods merge_joins":{"type":"method","name":"merge_joins","children":[],"call":["join_dependency join_associations + ","join_dependency join_associations ","relation joins_values ","ActiveRecord Associations JoinDependency  new ","other klass ","values partition ","other klass == ","relation klass ","values blank? ","other joins_values ","other klass >= ","ActiveRecord Associations JoinDependency  new  join_associations + ","ActiveRecord Associations JoinDependency  new  join_associations ","relation joins_other joins_values  ","other joins_values  partition ","other joins_values  blank? ","other joins_other joins_values  "]}," ActiveRecord Associations HasManyAssociation foreign_key_present?":{"type":"method","name":"foreign_key_present?","children":[],"call":[" owner attribute_present? "," reflection association_primary_key "," reflection "," owner "," reflection klass primary_key "," reflection klass "]}," ActiveRecord Associations HasManyAssociation inverse_updates_counter_cache?":{"type":"method","name":"inverse_updates_counter_cache?","children":[],"call":["inverse_reflection counter_cache_column == ","inverse_reflection counter_cache_column ","reflection klass reflect_on_all_associations any? ","reflection klass reflect_on_all_associations ","reflection klass "," cached_counter_attribute_name ","belongs_to == ","inverse_reflection macro ","reflection klass _reflections values any? ","reflection klass _reflections values ","reflection klass _reflections "," inverse_updates_counter_named? "," inverse_updates_ cached_counter_attribute_name d? "]}," ActiveRecord Associations HasManyAssociation update_counter":{"type":"method","name":"update_counter","children":[],"call":[" owner changed_attributes delete "," owner changed_attributes "," owner "," owner [] "," owner class update_counters "," owner id "," owner class "," cached_counter_attribute_name "," has_cached_counter? "," update_counter_in_memory "," update_counter_in_database "," owner increment! ","reflection counter_cache_column ","reflection has_cached_counter? "," owner class update_ cached_counter_attribute_name s "," cached_ cached_counter_attribute_name _attribute_name "," has_cached_ cached_counter_attribute_name ? "," update_ cached_counter_attribute_name _in_memory "," update_ cached_counter_attribute_name _in_database ","reflection  cached_counter_attribute_name _cache_column ","reflection has_cached_ cached_counter_attribute_name ? "]}," ActiveRecord NestedAttributes allow_destroy?":{"type":"method","name":"allow_destroy?","children":[],"call":[" nested_attributes_options [] [] "," nested_attributes_options [] "," nested_attributes_options "]}," ActiveRecord NestedAttributes will_be_destroyed?":{"type":"method","name":"will_be_destroyed?","children":[],"call":[" has_destroy_flag? "," allow_destroy? "]}," Builder HasAndBelongsToMany show_deprecation_warnings":{"type":"method","name":"show_deprecation_warnings","children":[],"call":["ActiveSupport Deprecation  warn "," options include? "," options ","(sym :delete_sql) each "]}," Builder CollectionAssociation show_deprecation_warnings":{"type":"method","name":"show_deprecation_warnings","children":[],"call":["ActiveSupport Deprecation  warn "," options include? "," options ","(sym :finder_sql) each "]}," ActiveRecord Generators MigrationGenerator validate_file_name!":{"type":"method","name":"validate_file_name!","children":[],"call":[" raise ","IllegalMigrationNameError  new "," file_name "," file_name =~ ","(str \"^[_a-z0-9]+$\") match? "]}," ActiveRecord Generators MigrationGenerator attributes_with_index":{"type":"method","name":"attributes_with_index","children":[],"call":["a has_index? ","a reference? ! ","a reference? "," attributes select "," attributes "]}," ActiveRecord Generators MigrationGenerator index_name_for":{"type":"method","name":"index_name_for","children":[],"call":["(send\n  (lvar :attribute) :foreign_key?) to_sym ","attribute name singularize foreign_key ","attribute name singularize ","attribute name ","attribute foreign_key? "]}," ActiveRecord Generators MigrationGenerator set_index_names":{"type":"method","name":"set_index_names","children":[],"call":["attr index_name= "," index_name_for ","(lvar :attr) map "," attributes [] ","i - "," attributes "," attributes each_with_index "]}," ActiveRecord eager_load!":{"type":"method","name":"eager_load!","children":[],"call":[]}," ActiveRecord version":{"type":"method","name":"version","children":[],"call":[]}," ActiveRecord Validations UniquenessValidator deserialize_attribute":{"type":"method","name":"deserialize_attribute","children":[],"call":["coder dump ","record class serialized_attributes [] ","attribute to_s ","record class serialized_attributes ","record class ","record class serialized_attributes []  dump "]}," ActiveRecord Validations UniquenessValidator scope_relation":{"type":"method","name":"scope_relation","children":[],"call":["relation and ","table [] eq ","table [] ","record read_attribute ","reflection foreign_key ","record send ","record class reflect_on_association ","record class "," Array each "," Array "," options [] "," options ","Arel Nodes SqlLiteral  new ","scope_value nil? ","record class connection quote ","record class connection ","record class columns_hash [] ","scope_item to_s ","record class columns_hash ","record class _reflect_on_association ","record _read_attribute ","relation where ","record association reader ","record association ","relation and  and ","relation where  and ","record class reflect_on_association  foreign_key ","record class _reflect_on_association  foreign_key ","record read_attribute  nil? ","record send  nil? ","record _read_attribute  nil? ","record association reader  nil? ","record class record class columns_hash [] s_hash [] ","reflection foreign_key  to_s ","record class record class columns_hash [] s_hash ","relation and  where ","relation where  where "]}," ActiveRecord Validations PresenceValidator validate":{"type":"method","name":"validate","children":[],"call":["record errors add "," options ","record errors ","r marked_for_destruction? ","associated_records all? ","associated_records present? "," Array ","record send ","record class reflect_on_association ","record class "," attributes each "," attributes ","Array  wrap ","record class _reflect_on_association "," Array  all? ","Array  wrap  all? "," Array  present? ","Array  wrap  present? "]}," ActiveRecord Transactions transaction_include_any_action?":{"type":"method","name":"transaction_include_any_action?","children":[],"call":["(or\n  (send nil :transaction_record_state\n    (sym :new_record))\n  (send nil :destroyed?)) ! "," destroyed? "," transaction_record_state ","actions any? "," _trigger_destroy_callback "," _trigger_update_callback ","(or\n  (ivar :@_new_record_before_last_commit)\n  (send nil :destroyed?)) ! "," persisted? "]}," ActiveRecord Transactions ClassMethods assert_valid_transaction_action":{"type":"method","name":"assert_valid_transaction_action","children":[],"call":[" raise ","ACTIONS  join ","(send\n  (lvar :actions) :-\n  (const nil :ACTIONS)) any? ","actions - "," Array ","(send\n  (lvar : Array ) :-\n  (const nil :ACTIONS)) any? "," Array  - "]}," ActiveRecord Transactions ClassMethods set_options_for_callbacks!":{"type":"method","name":"set_options_for_callbacks!","children":[],"call":["options [] << ","options [] "," Array map "," Array ","options []= "," assert_valid_transaction_action ","options is_a? ","args last ","args << ","args extract_options! merge! ","args extract_options! ","options [] unshift "," transaction_include_any_action? "," lambda ","args last  [] << ","args extract_options! merge!  [] << ","args last  [] ","args extract_options! merge!  [] ","args last  []= ","args extract_options! merge!  []= ","args last  is_a? ","args extract_options! merge!  is_a? ","args extract_args last ! merge! ","args extract_args extract_options! merge! ! merge! ","args extract_args last ! ","args extract_args extract_options! merge! ! ","args last  [] unshift ","args extract_options! merge!  [] unshift "]}," ActiveRecord Timestamp max_updated_column_timestamp":{"type":"method","name":"max_updated_column_timestamp","children":[],"call":["(send\n  (lvar :timestamps) :map) max ","ts to_time ","timestamps map ","(lvasgn :timestamps\n  (send\n    (block\n      (send\n        (send nil :timestamp_attributes_for_update) :map)\n      (args\n        (arg :attr))\n      (send\n        (self) :[]\n        (lvar :attr))) :compact)) present? ","(send\n  (send nil :timestamp_attributes_for_update) :map) compact "," [] "," timestamp_attributes_for_update map "," timestamp_attributes_for_update ","(lvasgn :timestamps\n  (send\n    (block\n      (send\n        (lvar :timestamp_names) :map)\n      (args\n        (arg :attr))\n      (send\n        (self) :[]\n        (lvar :attr))) :compact)) present? ","(send\n  (lvar :timestamp_names) :map) compact ","timestamp_names map ","(send\n  (lvar :timestamp_names) :map) compact map max ","(send\n  (lvar :timestamp_names) :map) compact map ","(send\n  (send nil :timestamp_attributes_for_update_in_model) :map) compact max ","(send\n  (send nil :timestamp_attributes_for_update_in_model) :map) compact "," timestamp_attributes_for_update_in_model map "," timestamp_attributes_for_update_in_model ","(send\n  (send nil :timestamp_attributes_for_update_in_model) :filter_map) max "," timestamp_attributes_for_update_in_model filter_map ","(send\n  (lvar :(send\n  (send nil :timestamp_attributes_for_update) :map) compact ) :map) max ","(send\n  (lvar :(send\n  (lvar :timestamp_names) :map) compact ) :map) max ","(send\n  (send nil :timestamp_attributes_for_update) :map) compact  map ","(send\n  (lvar :timestamp_names) :map) compact  map ","(lvasgn :(send\n  (send nil :timestamp_attributes_for_update) :map) compact \n  (send\n    (block\n      (send\n        (send nil :timestamp_attributes_for_update) :map)\n      (args\n        (arg :attr))\n      (send\n        (self) :[]\n        (lvar :attr))) :compact)) present? ","(lvasgn :(send\n  (lvar :timestamp_names) :map) compact \n  (send\n    (block\n      (send\n        (send nil :timestamp_attributes_for_update) :map)\n      (args\n        (arg :attr))\n      (send\n        (self) :[]\n        (lvar :attr))) :compact)) present? ","(lvasgn :(send\n  (send nil :timestamp_attributes_for_update) :map) compact \n  (send\n    (block\n      (send\n        (lvar :timestamp_names) :map)\n      (args\n        (arg :attr))\n      (send\n        (self) :[]\n        (lvar :attr))) :compact)) present? ","(lvasgn :(send\n  (lvar :timestamp_names) :map) compact \n  (send\n    (block\n      (send\n        (lvar :timestamp_names) :map)\n      (args\n        (arg :attr))\n      (send\n        (self) :[]\n        (lvar :attr))) :compact)) present? "]}," ActiveRecord Timestamp update_record":{"type":"method","name":"update_record","children":[],"call":[" write_attribute "," attribute_changed? ","column to_s "," timestamp_attributes_for_update_in_model each "," timestamp_attributes_for_update_in_model "," current_time_from_proper_timezone "," should_record_timestamps? ","column to_s  to_s ","  current_time_from_proper_timezone _from_proper_timezone "]}," ActiveRecord Timestamp create_record":{"type":"method","name":"create_record","children":[],"call":[" write_attribute ","column to_s "," send nil? "," send "," respond_to? "," all_timestamp_attributes each "," all_timestamp_attributes "," current_time_from_proper_timezone "," record_timestamps ","  current_time_from_proper_timezone _from_proper_timezone "]}," ActiveRecord SQLCounter call":{"type":"method","name":"call","children":[],"call":[" class log << "," class log "," class "," ignore =~ "," ignore "," class log_all << "," class log_all ","CACHE == ","values [] "]}," ActiveRecord SQLCounter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord SQLCounter clear_log":{"type":"method","name":"clear_log","children":[],"call":[" log_all= "," log= "]}," ActiveRecord TestCase teardown":{"type":"method","name":"teardown","children":[],"call":["SQLCounter  clear_log "]}," ActiveRecord Tasks SqlserverDatabaseTasks configuration":{"type":"method","name":"configuration","children":[],"call":[]}," ActiveRecord Tasks SqlserverDatabaseTasks structure_load":{"type":"method","name":"structure_load","children":[],"call":["Kernel  system "," configuration [] "," configuration "]}," ActiveRecord Tasks SqlserverDatabaseTasks structure_dump":{"type":"method","name":"structure_dump","children":[],"call":["Kernel  system "," configuration [] "," configuration "]}," ActiveRecord Tasks SqlserverDatabaseTasks charset":{"type":"method","name":"charset","children":[],"call":["$stderr puts "]}," ActiveRecord Tasks SqlserverDatabaseTasks purge":{"type":"method","name":"purge","children":[],"call":[" connection recreate_database! "," connection "," establish_connection ","test []= ","test [] "," configuration deep_dup "," configuration "," configuration deep_dup  []= "," configuration deep_dup  [] "]}," ActiveRecord Tasks SqlserverDatabaseTasks drop":{"type":"method","name":"drop","children":[],"call":["$stderr puts "]}," ActiveRecord Tasks SqlserverDatabaseTasks create":{"type":"method","name":"create","children":[],"call":["$stderr puts "]}," ActiveRecord Tasks SqlserverDatabaseTasks initialize":{"type":"method","name":"initialize","children":[],"call":["ActiveSupport Deprecation  warn "]}," ActiveRecord Tasks SQLiteDatabaseTasks root":{"type":"method","name":"root","children":[],"call":[]}," ActiveRecord Tasks SQLiteDatabaseTasks configuration":{"type":"method","name":"configuration","children":[],"call":[]}," ActiveRecord Tasks SQLiteDatabaseTasks structure_load":{"type":"method","name":"structure_load","children":[],"call":[" configuration [] "," configuration ","extra_flags join "," db_config database "," db_config ","extra_extra_flags join  join "]}," ActiveRecord Tasks SQLiteDatabaseTasks structure_dump":{"type":"method","name":"structure_dump","children":[],"call":[" configuration [] "," configuration ","extra_flags join "," run_cmd ","args << ","(send\n  (lvar :ignore_tables) :map) join "," connection quote "," connection ","ignore_tables map ","ignore_tables any? ","ActiveRecord SchemaDumper  ignore_tables ","args concat "," Array "," db_config database "," db_config ","pattern === "," connection data_sources select "," connection data_sources ","extra_extra_flags join  join ","(send\n  (lvar :ActiveRecord SchemaDumper  ignore_tables ) :map) join ","ActiveRecord SchemaDumper  ignore_tables  map ","ActiveRecord SchemaDumper  ignore_tables  any? ","ActiveRecord SchemaDumper  ActiveRecord SchemaDumper  ignore_tables  "]}," ActiveRecord Tasks SQLiteDatabaseTasks charset":{"type":"method","name":"charset","children":[],"call":[" connection encoding "," connection "]}," ActiveRecord Tasks SQLiteDatabaseTasks drop":{"type":"method","name":"drop","children":[],"call":["FileUtils  rm ","File  exist? ","File  join "," root ","path to_s ","path absolute? ","Pathname  new "," configuration [] "," configuration "," require "," raise ","NoDatabaseError  new ","error message "," db_config database "," db_config ","File  absolute_path? ","Pathname  new  to_s ","Pathname  new  absolute? ","File  absolute_Pathname  new ? "]}," ActiveRecord Tasks SQLiteDatabaseTasks create":{"type":"method","name":"create","children":[],"call":[" connection "," establish_connection "," configuration "," raise ","File  exist? "," configuration [] "," db_config "," db_config database "]}," ActiveRecord Tasks SQLiteDatabaseTasks initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Tasks PostgreSQLDatabaseTasks set_psql_env":{"type":"method","name":"set_psql_env","children":[],"call":["ENV  []= "," configuration [] to_s "," configuration [] "," configuration "," configuration_hash [] to_s "," configuration_hash [] "," configuration_hash "," db_config host "," db_config "]}," ActiveRecord Tasks PostgreSQLDatabaseTasks establish_master_connection":{"type":"method","name":"establish_master_connection","children":[],"call":[" establish_connection "," configuration merge "," configuration "," configuration_hash merge "," configuration_hash "]}," ActiveRecord Tasks PostgreSQLDatabaseTasks encoding":{"type":"method","name":"encoding","children":[],"call":[" configuration [] "," configuration "," configuration_hash [] "," configuration_hash "]}," ActiveRecord Tasks PostgreSQLDatabaseTasks configuration":{"type":"method","name":"configuration","children":[],"call":[]}," ActiveRecord Tasks PostgreSQLDatabaseTasks structure_load":{"type":"method","name":"structure_load","children":[],"call":["Kernel  system "," configuration [] "," configuration "," set_psql_env ","Shellwords  escape "," run_cmd ","args << ","args concat "," Array "," db_config database "," db_config "]}," ActiveRecord Tasks PostgreSQLDatabaseTasks structure_dump":{"type":"method","name":"structure_dump","children":[],"call":["f << ","ActiveRecord Base  connection schema_search_path ","ActiveRecord Base  connection ","File  open "," raise ","Kernel  system ","Shellwords  escape "," configuration [] "," configuration ","(send\n  (send\n    (lvar :search_path) :split\n    (str \",\")) :map) join ","search_path_part strip ","search_path split map ","search_path split ","search_path blank? "," set_psql_env "," connection schema_search_path "," connection "," run_cmd ","args << ","part strip ","ActiveRecord Base  dump_schemas "," remove_sql_header_comments ","args concat "," Array ","ignore_tables flat_map ","ignore_tables any? ","ActiveRecord SchemaDumper  ignore_tables "," db_config database "," db_config "," configuration_hash [] "," configuration_hash "," connection database_version >= "," connection database_version ","ActiveRecord  dump_schemas ","pattern === "," connection data_sources select "," connection data_sources ","ActiveRecord Base  connection schema_(send\n  (send\n    (lvar :search_path) :split\n    (str \",\")) :map) join  ","ActiveRecord Base  connection schema_ configuration []  ","(send\n  (send\n    (lvar :(send\n  (send\n    (lvar :search_path) :split\n    (str \",\")) :map) join ) :split\n    (str \",\")) :map) join ","(send\n  (send\n    (lvar : configuration [] ) :split\n    (str \",\")) :map) join ","(send\n  (send\n    (lvar :search_path) :split\n    (str \",\")) :map) join _part strip "," configuration [] _part strip ","(send\n  (send\n    (lvar :search_path) :split\n    (str \",\")) :map) join  split map "," configuration []  split map ","(send\n  (send\n    (lvar :search_path) :split\n    (str \",\")) :map) join  split "," configuration []  split ","(send\n  (send\n    (lvar :search_path) :split\n    (str \",\")) :map) join  blank? "," configuration []  blank? "," connection schema_(send\n  (send\n    (lvar :search_path) :split\n    (str \",\")) :map) join  "," connection schema_ configuration []  ","ActiveRecord SchemaDumper  ignore_tables  flat_map ","ActiveRecord SchemaDumper  ignore_tables  any? ","ActiveRecord SchemaDumper  ActiveRecord SchemaDumper  ignore_tables  "]}," ActiveRecord Tasks PostgreSQLDatabaseTasks purge":{"type":"method","name":"purge","children":[],"call":[" create "," drop "," clear_active_connections! ","ActiveRecord Base  connection_handler clear_active_connections! ","ActiveRecord Base  connection_handler "]}," ActiveRecord Tasks PostgreSQLDatabaseTasks collation":{"type":"method","name":"collation","children":[],"call":[" connection collation "," connection "]}," ActiveRecord Tasks PostgreSQLDatabaseTasks charset":{"type":"method","name":"charset","children":[],"call":[" connection encoding "," connection "]}," ActiveRecord Tasks PostgreSQLDatabaseTasks drop":{"type":"method","name":"drop","children":[],"call":[" connection drop_database "," configuration [] "," configuration "," connection "," establish_master_connection "," db_config database "," db_config "," establish_connection "," public_schema_config "]}," ActiveRecord Tasks PostgreSQLDatabaseTasks create":{"type":"method","name":"create","children":[],"call":[" raise ","(str \"database .* already exists\") === ","error message "," establish_connection "," configuration "," connection create_database "," configuration merge "," encoding "," configuration [] "," connection "," establish_master_connection ","error cause is_a? ","error cause ","(str \"database .* already exists\") match? "," db_config "," configuration_hash merge "," configuration_hash "," db_config database "," public_schema_config "]}," ActiveRecord Tasks PostgreSQLDatabaseTasks initialize":{"type":"method","name":"initialize","children":[],"call":["db_config configuration_hash "]}," ActiveRecord Tasks OracleDatabaseTasks configuration":{"type":"method","name":"configuration","children":[],"call":[]}," ActiveRecord Tasks OracleDatabaseTasks structure_load":{"type":"method","name":"structure_load","children":[],"call":[" connection execute "," connection ","IO  read split each ","IO  read split ","IO  read "," establish_connection "," configuration "]}," ActiveRecord Tasks OracleDatabaseTasks structure_dump":{"type":"method","name":"structure_dump","children":[],"call":["f << "," connection structure_dump "," connection ","File  open "," establish_connection "," configuration "]}," ActiveRecord Tasks OracleDatabaseTasks charset":{"type":"method","name":"charset","children":[],"call":["$stderr puts "]}," ActiveRecord Tasks OracleDatabaseTasks purge":{"type":"method","name":"purge","children":[],"call":[" connection execute "," connection "," connection structure_drop split each "," connection structure_drop split "," connection structure_drop "," establish_connection "]}," ActiveRecord Tasks OracleDatabaseTasks drop":{"type":"method","name":"drop","children":[],"call":["$stderr puts "]}," ActiveRecord Tasks OracleDatabaseTasks create":{"type":"method","name":"create","children":[],"call":["$stderr puts "]}," ActiveRecord Tasks OracleDatabaseTasks initialize":{"type":"method","name":"initialize","children":[],"call":["ActiveSupport Deprecation  warn "]}," ActiveRecord Tasks MySQLDatabaseTasks prepare_command_options":{"type":"method","name":"prepare_command_options","children":[],"call":["args concat "," configuration slice each "," configuration slice "," configuration "," configuration [] ","args << ","v to_s ","(send\n  (hash\n    (pair\n      (str \"host\")\n      (str \"--host\"))\n    (pair\n      (str \"port\")\n      (str \"--port\"))\n    (pair\n      (str \"socket\")\n      (str \"--socket\"))\n    (pair\n      (str \"username\")\n      (str \"--user\"))\n    (pair\n      (str \"password\")\n      (str \"--password\"))\n    (pair\n      (str \"encoding\")\n      (str \"--default-character-set\"))\n    (pair\n      (str \"sslca\")\n      (str \"--ssl-ca\"))\n    (pair\n      (str \"sslcert\")\n      (str \"--ssl-cert\"))\n    (pair\n      (str \"sslcapath\")\n      (str \"--ssl-capath\"))\n    (pair\n      (str \"sslcipher\")\n      (str \"--ssl-cipher\"))\n    (pair\n      (str \"sslkey\")\n      (str \"--ssl-key\"))) :map) compact ","(pair\n  (str \"host\")\n  (str \"--host\")) map ","(send\n  (hash\n    (pair\n      (str \"host\")\n      (str \"--host\"))\n    (pair\n      (str \"port\")\n      (str \"--port\"))\n    (pair\n      (str \"socket\")\n      (str \"--socket\"))\n    (pair\n      (str \"username\")\n      (str \"--user\"))\n    (pair\n      (str \"password\")\n      (str \"--password\"))\n    (pair\n      (str \"encoding\")\n      (str \"--default-character-set\"))\n    (pair\n      (str \"sslca\")\n      (str \"--ssl-ca\"))\n    (pair\n      (str \"sslcert\")\n      (str \"--ssl-cert\"))\n    (pair\n      (str \"sslcapath\")\n      (str \"--ssl-capath\"))\n    (pair\n      (str \"sslcipher\")\n      (str \"--ssh-cipher\"))\n    (pair\n      (str \"sslkey\")\n      (str \"--ssl-key\"))) :map) compact ","(send\n  (hash\n    (pair\n      (sym :host)\n      (str \"--host\"))\n    (pair\n      (sym :port)\n      (str \"--port\"))\n    (pair\n      (sym :socket)\n      (str \"--socket\"))\n    (pair\n      (sym :username)\n      (str \"--user\"))\n    (pair\n      (sym :password)\n      (str \"--password\"))\n    (pair\n      (sym :encoding)\n      (str \"--default-character-set\"))\n    (pair\n      (sym :sslca)\n      (str \"--ssl-ca\"))\n    (pair\n      (sym :sslcert)\n      (str \"--ssl-cert\"))\n    (pair\n      (sym :sslcapath)\n      (str \"--ssl-capath\"))\n    (pair\n      (sym :sslcipher)\n      (str \"--ssl-cipher\"))\n    (pair\n      (sym :sslkey)\n      (str \"--ssl-key\"))) :map) compact "," configuration_hash [] "," configuration_hash ","(pair\n  (sym :host)\n  (str \"--host\")) map ","(pair\n  (sym :host)\n  (str \"--host\")) filter_map ","(send\n  (hash\n    (pair\n      (str \"host\")\n      (str \"--host\"))\n    (pair\n      (str \"port\")\n      (str \"--port\"))\n    (pair\n      (str \"socket\")\n      (str \"--socket\"))\n    (pair\n      (str \"username\")\n      (str \"--user\"))\n    (pair\n      (str \"password\")\n      (str \"--password\"))\n    (pair\n      (str \"encoding\")\n      (str \"--default-character-set\"))\n    (pair\n      (str \"sslca\")\n      (str \"--ssl-ca\"))\n    (pair\n      (str \"sslcert\")\n      (str \"--ssl-cert\"))\n    (pair\n      (str \"sslcapath\")\n      (str \"--ssl-capath\"))\n    (pair\n      (str \"sslcipher\")\n      (str \"--ssl-cipher\"))\n    (pair\n      (str \"sslkey\")\n      (str \"--ssl-key\"))) :map) compact  concat ","(send\n  (hash\n    (pair\n      (str \"host\")\n      (str \"--host\"))\n    (pair\n      (str \"port\")\n      (str \"--port\"))\n    (pair\n      (str \"socket\")\n      (str \"--socket\"))\n    (pair\n      (str \"username\")\n      (str \"--user\"))\n    (pair\n      (str \"password\")\n      (str \"--password\"))\n    (pair\n      (str \"encoding\")\n      (str \"--default-character-set\"))\n    (pair\n      (str \"sslca\")\n      (str \"--ssl-ca\"))\n    (pair\n      (str \"sslcert\")\n      (str \"--ssl-cert\"))\n    (pair\n      (str \"sslcapath\")\n      (str \"--ssl-capath\"))\n    (pair\n      (str \"sslcipher\")\n      (str \"--ssh-cipher\"))\n    (pair\n      (str \"sslkey\")\n      (str \"--ssl-key\"))) :map) compact  concat ","(send\n  (hash\n    (pair\n      (sym :host)\n      (str \"--host\"))\n    (pair\n      (sym :port)\n      (str \"--port\"))\n    (pair\n      (sym :socket)\n      (str \"--socket\"))\n    (pair\n      (sym :username)\n      (str \"--user\"))\n    (pair\n      (sym :password)\n      (str \"--password\"))\n    (pair\n      (sym :encoding)\n      (str \"--default-character-set\"))\n    (pair\n      (sym :sslca)\n      (str \"--ssl-ca\"))\n    (pair\n      (sym :sslcert)\n      (str \"--ssl-cert\"))\n    (pair\n      (sym :sslcapath)\n      (str \"--ssl-capath\"))\n    (pair\n      (sym :sslcipher)\n      (str \"--ssl-cipher\"))\n    (pair\n      (sym :sslkey)\n      (str \"--ssl-key\"))) :map) compact  concat ","(send\n  (hash\n    (pair\n      (str \"host\")\n      (str \"--host\"))\n    (pair\n      (str \"port\")\n      (str \"--port\"))\n    (pair\n      (str \"socket\")\n      (str \"--socket\"))\n    (pair\n      (str \"username\")\n      (str \"--user\"))\n    (pair\n      (str \"password\")\n      (str \"--password\"))\n    (pair\n      (str \"encoding\")\n      (str \"--default-character-set\"))\n    (pair\n      (str \"sslca\")\n      (str \"--ssl-ca\"))\n    (pair\n      (str \"sslcert\")\n      (str \"--ssl-cert\"))\n    (pair\n      (str \"sslcapath\")\n      (str \"--ssl-capath\"))\n    (pair\n      (str \"sslcipher\")\n      (str \"--ssl-cipher\"))\n    (pair\n      (str \"sslkey\")\n      (str \"--ssl-key\"))) :map) compact  << ","(send\n  (hash\n    (pair\n      (str \"host\")\n      (str \"--host\"))\n    (pair\n      (str \"port\")\n      (str \"--port\"))\n    (pair\n      (str \"socket\")\n      (str \"--socket\"))\n    (pair\n      (str \"username\")\n      (str \"--user\"))\n    (pair\n      (str \"password\")\n      (str \"--password\"))\n    (pair\n      (str \"encoding\")\n      (str \"--default-character-set\"))\n    (pair\n      (str \"sslca\")\n      (str \"--ssl-ca\"))\n    (pair\n      (str \"sslcert\")\n      (str \"--ssl-cert\"))\n    (pair\n      (str \"sslcapath\")\n      (str \"--ssl-capath\"))\n    (pair\n      (str \"sslcipher\")\n      (str \"--ssh-cipher\"))\n    (pair\n      (str \"sslkey\")\n      (str \"--ssl-key\"))) :map) compact  << ","(send\n  (hash\n    (pair\n      (sym :host)\n      (str \"--host\"))\n    (pair\n      (sym :port)\n      (str \"--port\"))\n    (pair\n      (sym :socket)\n      (str \"--socket\"))\n    (pair\n      (sym :username)\n      (str \"--user\"))\n    (pair\n      (sym :password)\n      (str \"--password\"))\n    (pair\n      (sym :encoding)\n      (str \"--default-character-set\"))\n    (pair\n      (sym :sslca)\n      (str \"--ssl-ca\"))\n    (pair\n      (sym :sslcert)\n      (str \"--ssl-cert\"))\n    (pair\n      (sym :sslcapath)\n      (str \"--ssl-capath\"))\n    (pair\n      (sym :sslcipher)\n      (str \"--ssl-cipher\"))\n    (pair\n      (sym :sslkey)\n      (str \"--ssl-key\"))) :map) compact  << "]}," ActiveRecord Tasks MySQLDatabaseTasks root_password":{"type":"method","name":"root_password","children":[],"call":["$stdin gets strip ","$stdin gets ","$stdout print "]}," ActiveRecord Tasks MySQLDatabaseTasks root_configuration_without_database":{"type":"method","name":"root_configuration_without_database","children":[],"call":[" configuration_without_database merge "," root_password "," configuration_without_database "]}," ActiveRecord Tasks MySQLDatabaseTasks grant_statement":{"type":"method","name":"grant_statement","children":[],"call":[" configuration [] "," configuration "]}," ActiveRecord Tasks MySQLDatabaseTasks error_class":{"type":"method","name":"error_class","children":[],"call":[" require "," configuration [] =~ "," configuration [] "," configuration "," configuration [] include? "]}," ActiveRecord Tasks MySQLDatabaseTasks creation_options":{"type":"method","name":"creation_options","children":[],"call":["options [] ","options [] == ","options []= "," configuration [] "," configuration "," configuration include? ","Hash  new tap ","Hash  new "," configuration_hash [] "," configuration_hash "," configuration_hash include? "]}," ActiveRecord Tasks MySQLDatabaseTasks configuration_without_database":{"type":"method","name":"configuration_without_database","children":[],"call":[" configuration merge "," configuration "]}," ActiveRecord Tasks MySQLDatabaseTasks configuration":{"type":"method","name":"configuration","children":[],"call":[]}," ActiveRecord Tasks MySQLDatabaseTasks structure_load":{"type":"method","name":"structure_load","children":[],"call":["Kernel  system ","args concat "," configuration [] "," configuration "," prepare_command_options "," run_cmd "," Array ","args unshift "," db_config database to_s "," db_config database "," db_config "," prepare_command_options  concat "," prepare_command_options  unshift "]}," ActiveRecord Tasks MySQLDatabaseTasks structure_dump":{"type":"method","name":"structure_dump","children":[],"call":["$stderr puts ","Kernel  system ","args concat "," configuration [] "," configuration "," prepare_command_options "," run_cmd "," Array ","args unshift ","ignore_tables map ","ignore_tables any? ","ActiveRecord SchemaDumper  ignore_tables "," db_config database to_s "," db_config database "," db_config ","pattern === "," connection data_sources select "," connection data_sources "," connection "," prepare_command_options  concat "," prepare_command_options  unshift ","ActiveRecord SchemaDumper  ignore_tables  map ","ActiveRecord SchemaDumper  ignore_tables  any? ","ActiveRecord SchemaDumper  ActiveRecord SchemaDumper  ignore_tables  "]}," ActiveRecord Tasks MySQLDatabaseTasks collation":{"type":"method","name":"collation","children":[],"call":[" connection collation "," connection "]}," ActiveRecord Tasks MySQLDatabaseTasks charset":{"type":"method","name":"charset","children":[],"call":[" connection charset "," connection "]}," ActiveRecord Tasks MySQLDatabaseTasks purge":{"type":"method","name":"purge","children":[],"call":[" connection recreate_database "," creation_options "," configuration [] "," configuration "," connection "," establish_connection "," db_config database "," db_config "," configuration_hash_without_database "]}," ActiveRecord Tasks MySQLDatabaseTasks drop":{"type":"method","name":"drop","children":[],"call":[" connection drop_database "," configuration [] "," configuration "," connection "," establish_connection "," db_config database "," db_config "]}," ActiveRecord Tasks MySQLDatabaseTasks create":{"type":"method","name":"create","children":[],"call":["$stderr puts "," configuration [] "," configuration "," creation_options inspect "," creation_options "," configuration inspect "," establish_connection "," connection execute "," grant_statement gsub strip "," grant_statement gsub "," grant_statement "," connection "," configuration [] != "," connection create_database "," root_configuration_without_database ","$stdout print ","error error ","error errno == ","error errno ","error respond_to? "," error_class "," raise ","(str \"database exists\") === ","error message "," configuration_without_database ","error inspect ","error message include? "," connection error_number == "," connection error_number ","error cause ","error cause error_number == ","error cause error_number "," db_config "," db_config database "," configuration_hash_without_database "]}," ActiveRecord Tasks MySQLDatabaseTasks initialize":{"type":"method","name":"initialize","children":[],"call":["db_config configuration_hash "]}," ActiveRecord Tasks FirebirdDatabaseTasks configuration":{"type":"method","name":"configuration","children":[],"call":[]}," ActiveRecord Tasks FirebirdDatabaseTasks firebird_db_string":{"type":"method","name":"firebird_db_string","children":[],"call":["FireRuby Database  db_string_for ","config symbolize_keys "]}," ActiveRecord Tasks FirebirdDatabaseTasks set_firebird_env":{"type":"method","name":"set_firebird_env","children":[],"call":["ENV  []= ","config [] to_s ","config [] "]}," ActiveRecord Tasks FirebirdDatabaseTasks structure_load":{"type":"method","name":"structure_load","children":[],"call":["Kernel  system "," firebird_db_string "," configuration "," set_firebird_env "," firebird_ firebird_db_string  "]}," ActiveRecord Tasks FirebirdDatabaseTasks structure_dump":{"type":"method","name":"structure_dump","children":[],"call":["Kernel  system "," firebird_db_string "," configuration "," set_firebird_env "," firebird_ firebird_db_string  "]}," ActiveRecord Tasks FirebirdDatabaseTasks charset":{"type":"method","name":"charset","children":[],"call":["$stderr puts "]}," ActiveRecord Tasks FirebirdDatabaseTasks purge":{"type":"method","name":"purge","children":[],"call":[" connection recreate_database! "," connection "," establish_connection "]}," ActiveRecord Tasks FirebirdDatabaseTasks drop":{"type":"method","name":"drop","children":[],"call":["$stderr puts "]}," ActiveRecord Tasks FirebirdDatabaseTasks create":{"type":"method","name":"create","children":[],"call":["$stderr puts "]}," ActiveRecord Tasks FirebirdDatabaseTasks initialize":{"type":"method","name":"initialize","children":[],"call":["ActiveSupport Deprecation  warn "]}," ActiveRecord Tasks DatabaseTasks local_database?":{"type":"method","name":"local_database?","children":[],"call":["LOCAL_HOSTS  include? ","configuration [] ","configuration [] blank? ","host blank? ","db_config host ","db_config host  blank? ","db_config db_config host  "]}," ActiveRecord Tasks DatabaseTasks each_local_configuration":{"type":"method","name":"each_local_configuration","children":[],"call":["$stderr puts ","configuration [] "," local_database? ","ActiveRecord Base  configurations each_value ","ActiveRecord Base  configurations ","db_config config ","ActiveRecord Base  configurations configs_for each ","ActiveRecord Base  configurations configs_for ","db_config database "," configs_for each "," configs_for ","db_config config  [] ","ActiveRecord Base  db_config config s each_value ","ActiveRecord Base  db_config config s ","ActiveRecord Base  db_config config s configs_for each ","ActiveRecord Base  db_config config s configs_for "]}," ActiveRecord Tasks DatabaseTasks each_current_configuration":{"type":"method","name":"each_current_configuration","children":[],"call":["configuration [] blank? ","configuration [] ","configurations compact each ","configurations compact ","ActiveRecord Base  configurations values_at ","ActiveRecord Base  configurations ","environments << ","environment == ","environment development? ","ENV  [] nil? ","ENV  [] ","ActiveRecord Base  configurations slice each ","ActiveRecord Base  configurations slice ","db_config spec_name ","db_config config ","spec_name != ","ActiveRecord Base  configurations configs_for each ","ActiveRecord Base  configurations configs_for ","environments each ","name != ","db_config name ","ENV  [] ! "," configs_for each "," configs_for ","ActiveRecord Base  configurations values_at  compact each ","ActiveRecord Base  configurations values_at  compact ","ActiveRecord Base  ActiveRecord Base  configurations values_at  values_at ","ActiveRecord Base  ActiveRecord Base  configurations values_at  ","ActiveRecord Base  ActiveRecord Base  configurations values_at  slice each ","ActiveRecord Base  ActiveRecord Base  configurations values_at  slice ","ActiveRecord Base  ActiveRecord Base  configurations values_at  configs_for each ","ActiveRecord Base  ActiveRecord Base  configurations values_at  configs_for "]}," ActiveRecord Tasks DatabaseTasks class_for_adapter":{"type":"method","name":"class_for_adapter","children":[],"call":["@tasks [] "," raise ","adapter [] ","@tasks keys detect ","@tasks keys ","task constantize ","task is_a? ","@tasks each_pair detect ","@tasks each_pair ","@tasks reverse_each detect ","@tasks reverse_each "]}," ActiveRecord Tasks DatabaseTasks database_url_config":{"type":"method","name":"database_url_config","children":[],"call":["ConnectionAdapters ConnectionSpecification Resolver  new spec config stringify_keys ","ConnectionAdapters ConnectionSpecification Resolver  new spec config ","ConnectionAdapters ConnectionSpecification Resolver  new spec ","ConnectionAdapters ConnectionSpecification Resolver  new ","ENV  [] "]}," ActiveRecord Tasks DatabaseTasks load_seed":{"type":"method","name":"load_seed","children":[],"call":[" raise ","You tried to load seed data, but no seed loader is specified. Please specify seed  + + ","You tried to load seed data, but no seed loader is specified. Please specify seed  + "," seed_loader load_seed "," seed_loader "]}," ActiveRecord Tasks DatabaseTasks structure_load":{"type":"method","name":"structure_load","children":[],"call":[" class_for_adapter new structure_load "," class_for_adapter new "," class_for_adapter ","configuration [] ","arguments delete_at ","arguments first "," structure_load_flags "," database_adapter_for structure_load "," database_adapter_for "," resolve_configuration "," structure_load_flags_for ","db_config adapter ","arguments first  [] "," structure_load_ structure_load_flags_for  "," resolve_arguments first  "," structure_load_ structure_load_flags_for _for "," resolve_configuration  adapter "]}," ActiveRecord Tasks DatabaseTasks structure_dump":{"type":"method","name":"structure_dump","children":[],"call":[" class_for_adapter new structure_dump "," class_for_adapter new "," class_for_adapter ","configuration [] ","arguments delete_at ","arguments first "," structure_dump_flags "," database_adapter_for structure_dump "," database_adapter_for "," resolve_configuration "," structure_dump_flags_for ","db_config adapter ","arguments first  [] "," structure_dump_ structure_dump_flags_for  "," resolve_arguments first  "," structure_dump_ structure_dump_flags_for _for "," resolve_configuration  adapter "]}," ActiveRecord Tasks DatabaseTasks purge":{"type":"method","name":"purge","children":[],"call":[" class_for_adapter new purge "," class_for_adapter new "," class_for_adapter ","configuration [] "," database_adapter_for purge "," database_adapter_for "," resolve_configuration "]}," ActiveRecord Tasks DatabaseTasks collation":{"type":"method","name":"collation","children":[],"call":[" class_for_adapter new collation "," class_for_adapter new "," class_for_adapter ","configuration [] ","arguments first "," database_adapter_for collation "," database_adapter_for "," resolve_configuration ","arguments first  [] "," resolve_arguments first  "]}," ActiveRecord Tasks DatabaseTasks collation_current":{"type":"method","name":"collation_current","children":[],"call":[" collation ","ActiveRecord Base  configurations [] ","ActiveRecord Base  configurations ","ActiveRecord Base  configurations configs_for config ","ActiveRecord Base  configurations configs_for "," configs_for "]}," ActiveRecord Tasks DatabaseTasks charset":{"type":"method","name":"charset","children":[],"call":[" class_for_adapter new charset "," class_for_adapter new "," class_for_adapter ","configuration [] ","arguments first "," database_adapter_for charset "," database_adapter_for "," resolve_configuration ","arguments first  [] "," resolve_arguments first  "]}," ActiveRecord Tasks DatabaseTasks charset_current":{"type":"method","name":"charset_current","children":[],"call":[" charset ","ActiveRecord Base  configurations [] ","ActiveRecord Base  configurations ","ActiveRecord Base  configurations configs_for config ","ActiveRecord Base  configurations configs_for "," configs_for "]}," ActiveRecord Tasks DatabaseTasks drop_database_url":{"type":"method","name":"drop_database_url","children":[],"call":[" drop "," database_url_config "]}," ActiveRecord Tasks DatabaseTasks drop_current":{"type":"method","name":"drop_current","children":[],"call":[" drop "," each_current_configuration "]}," ActiveRecord Tasks DatabaseTasks drop_all":{"type":"method","name":"drop_all","children":[],"call":[" drop "," each_local_configuration "]}," ActiveRecord Tasks DatabaseTasks drop":{"type":"method","name":"drop","children":[],"call":["$stderr puts ","configuration [] ","error backtrace "," class_for_adapter new drop "," class_for_adapter new "," class_for_adapter ","arguments first "," raise ","$stdout puts "," verbose? ","db_config database "," database_adapter_for drop "," database_adapter_for "," resolve_configuration ","arguments first  [] "," resolve_configuration  database "," resolve_arguments first  "]}," ActiveRecord Tasks DatabaseTasks create_database_url":{"type":"method","name":"create_database_url","children":[],"call":[" create "," database_url_config "]}," ActiveRecord Tasks DatabaseTasks create_current":{"type":"method","name":"create_current","children":[],"call":["ActiveRecord Base  establish_connection "," create "," each_current_configuration ","environment to_sym "," migration_class establish_connection "," migration_class "]}," ActiveRecord Tasks DatabaseTasks create_all":{"type":"method","name":"create_all","children":[],"call":[" create "," each_local_configuration ","ActiveRecord Base  connection_handler establish_connection ","old_pool spec ","ActiveRecord Base  connection_handler ","ActiveRecord Base  connection_handler retrieve_connection_pool ","ActiveRecord Base  connection_specification_name ","old_pool spec to_hash ","old_pool db_config "," migration_class establish_connection "," migration_class "," migration_connection pool db_config "," migration_connection pool "," migration_connection ","ActiveRecord Base  connection_handler retrieve_connection_pool  spec ","ActiveRecord Base  connection_handler retrieve_connection_pool  spec to_hash ","ActiveRecord Base  connection_handler retrieve_connection_pool  db_config ","old_pool  migration_connection pool db_config  "," migration_connection pool  migration_connection pool db_config  "]}," ActiveRecord Tasks DatabaseTasks create":{"type":"method","name":"create","children":[],"call":["$stderr puts ","configuration inspect ","error backtrace ","configuration [] "," class_for_adapter new create "," class_for_adapter new "," class_for_adapter ","arguments first "," raise ","$stdout puts "," verbose? ","db_config database "," database_adapter_for create "," database_adapter_for "," resolve_configuration ","arguments first  inspect ","arguments first  [] "," resolve_configuration  database "," resolve_arguments first  "]}," ActiveRecord Tasks DatabaseTasks current_config":{"type":"method","name":"current_config","children":[],"call":["ActiveRecord Base  configurations [] ","options [] ","ActiveRecord Base  configurations "," database_url_config ","ENV  [] ","options has_key? ","options reverse_merge! "," env ","Rails  env ","ActiveRecord Base  configurations configs_for config ","ActiveRecord Base  configurations configs_for "," configs_for "]}," ActiveRecord Tasks DatabaseTasks register_task":{"type":"method","name":"register_task","children":[],"call":["@tasks []= "]}," ActiveRecord Store IndifferentCoder as_indifferent_hash":{"type":"method","name":"as_indifferent_hash","children":[],"call":[]}," ActiveRecord Store IndifferentCoder load":{"type":"method","name":"load","children":[],"call":[" class as_indifferent_hash ","@coder load "," class "]}," ActiveRecord Store IndifferentCoder dump":{"type":"method","name":"dump","children":[],"call":["@coder dump "," class as_indifferent_hash "," class "," as_regular_hash "]}," ActiveRecord Store IndifferentCoder initialize":{"type":"method","name":"initialize","children":[],"call":["ActiveRecord Coders YAMLColumn  new ","coder_or_class_name respond_to? "]}," ActiveRecord Store initialize_store_attribute":{"type":"method","name":"initialize_store_attribute","children":[],"call":[" send ","IndifferentCoder  as_indifferent_hash ","attribute is_a? ","IndifferentCoder  as_indifferent_hash  is_a? "," send  is_a? "]}," ActiveRecord Store write_store_attribute":{"type":"method","name":"write_store_attribute","children":[],"call":["attribute []= "," send ","value != ","attribute [] "," initialize_store_attribute ","accessor write "," store_accessor_for "," initialize_store_attribute  []= "," initialize_store_attribute  [] "," initialize_store_ initialize_store_attribute  "," store_accessor_for  write "," store_ store_accessor_for _for "]}," ActiveRecord Store read_store_attribute":{"type":"method","name":"read_store_attribute","children":[],"call":["attribute [] "," initialize_store_attribute ","accessor read "," store_accessor_for "," initialize_store_attribute  [] "," initialize_store_ initialize_store_attribute  "," store_accessor_for  read "," store_ store_accessor_for _for "]}," ActiveRecord Store ClassMethods _store_accessors_module":{"type":"method","name":"_store_accessors_module","children":[],"call":[" include ","Module  new "]}," ActiveRecord StatementCache execute":{"type":"method","name":"execute","children":[],"call":["@relation dup to_a ","@relation dup ","klass find_by_sql "," query_builder sql_for "," query_builder "," bind_map bind "," bind_map "," klass find_by_sql "," klass ","klass find_by_ query_builder sql_for  "," query_builder  query_builder sql_for _for "," klass find_by_ query_builder sql_for  "]}," ActiveRecord StatementCache initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","ArgumentError  new ","@relation nil? "]}," ActiveRecord Scoping ScopeRegistry raise_invalid_scope_type!":{"type":"method","name":"raise_invalid_scope_type!","children":[],"call":[" raise ","VALID_SCOPE_TYPES  include? ! ","VALID_SCOPE_TYPES  include? "]}," ActiveRecord Scoping ScopeRegistry set_value_for":{"type":"method","name":"set_value_for","children":[],"call":["@registry [] []= ","@registry [] "," raise_invalid_scope_type! ","model name ","scope_type []= "]}," ActiveRecord Scoping ScopeRegistry value_for":{"type":"method","name":"value_for","children":[],"call":["@registry [] [] ","@registry [] "," raise_invalid_scope_type! ","klass superclass ","klass name ","klass <= ","model base_class ","model name ","scope_type [] ","klass != ","klass superclass  superclass ","klass superclass  name ","klass superclass  <= ","model model base_class _class ","klass superclass  != "]}," ActiveRecord Scoping ScopeRegistry initialize":{"type":"method","name":"initialize","children":[],"call":["hash []= ","Hash  new "]}," ActiveRecord Scoping Named ClassMethods all":{"type":"method","name":"all","children":[],"call":["scope default_scoped= "," relation "," current_scope clone "," current_scope "," default_scoped "," relation merge! ","current_scope clone "," == ","current_scope klass ","scope clone ","scope klass ","ActiveSupport Deprecation  warn ","(str \"Class level methods will no longer inherit scoping from `\") squish "," name ","scope _deprecated_scope_source "," relation  default_ relation d= "," current_scope  default_ current_scope d= "," current_ relation  clone "," current_ current_scope  clone ","  current_scope  clone "," current_ relation  "," current_ current_scope  ","  current_scope  "," default_ relation d "," default_ current_scope d ","current_ relation  clone ","current_ current_scope  clone "," current_scope  clone ","current_ relation  klass ","current_ current_scope  klass "," current_scope  klass "," relation  clone "," relation  klass "," relation  _deprecated_ relation _source "," current_scope  _deprecated_ current_scope _source "]}," ActiveRecord Scoping Default default_scopes?":{"type":"method","name":"default_scopes?","children":[],"call":[]}," ActiveRecord SchemaMigration version":{"type":"method","name":"version","children":[],"call":[" to_i "]}," ActiveRecord SchemaMigration drop_table":{"type":"method","name":"drop_table","children":[],"call":[" connection drop_table "," table_name "," connection "," connection remove_index "," index_name "," table_exists? "]}," ActiveRecord SchemaMigration create_table":{"type":"method","name":"create_table","children":[],"call":[" connection add_index "," index_name "," table_name "," connection ","t column "," connection create_table ","version_options []= "," table_exists? ","t string "," connection internal_string_options_for_primary_key "," connection table_exists? "," connection internal_string_options_for_primary_key  []= "]}," ActiveRecord SchemaMigration index_name":{"type":"method","name":"index_name","children":[],"call":[" table_name_suffix ","ActiveRecord Base  schema_migrations_table_name "," table_name_prefix "]}," ActiveRecord SchemaMigration table_name":{"type":"method","name":"table_name","children":[],"call":[" table_name_suffix ","ActiveRecord Base  schema_migrations_table_name "," table_name_prefix "," schema_migrations_table_name ","ActiveRecord Base  table_name_suffix ","ActiveRecord Base  table_name_prefix "]}," ActiveRecord SchemaDumper extensions":{"type":"method","name":"extensions","children":[],"call":["stream puts ","extension inspect ","extensions each ","extensions any? ","@connection extensions ","@connection supports_extensions? ","@connection extensions  each ","@connection extensions  any? ","@connection @connection extensions  ","@connection supports_@connection extensions ? "]}," ActiveRecord Result initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":[" rows dup "," rows "," columns dup "," columns "," column_types dup "," column_types "]}," ActiveRecord Result last":{"type":"method","name":"last","children":[],"call":[" hash_rows last "," hash_rows ","Hash  [] ","@columns zip ","@rows last ","@rows empty? "]}," ActiveRecord Result []":{"type":"method","name":"[]","children":[],"call":[" hash_rows [] "," hash_rows "]}," ActiveRecord Result to_ary":{"type":"method","name":"to_ary","children":[],"call":[" hash_rows "]}," ActiveRecord Result empty?":{"type":"method","name":"empty?","children":[],"call":[" rows empty? "," rows "]}," ActiveRecord Relation values":{"type":"method","name":"values","children":[],"call":["Hash  [] ","@values dup "]}," ActiveRecord Relation blank?":{"type":"method","name":"blank?","children":[],"call":[" to_a blank? "," to_a "," records blank? "," records "]}," ActiveRecord Relation pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q pp "," to_a "," records ","pp pp ","entries []= ","entries size == ","entries size ","subject take ","(send nil :limit_value) compact min ","(send nil :limit_value) compact "," limit_value "," annotate "," loaded? ","subject take  []= ","subject take  size == ","subject take  size "," annotate  take "," records  take "]}," ActiveRecord Relation uniq_value":{"type":"method","name":"uniq_value","children":[],"call":[" distinct_value "]}," ActiveRecord Relation load":{"type":"method","name":"load","children":[],"call":[" exec_queries "," loaded? "," scheduled? "," loaded? ! "]}," ActiveRecord Relation find_or_initialize_by":{"type":"method","name":"find_or_initialize_by","children":[],"call":[" new "," find_by "]}," ActiveRecord Relation find_or_create_by!":{"type":"method","name":"find_or_create_by!","children":[],"call":[" create! "," find_by "," create_or_find_by! "]}," ActiveRecord Relation find_or_create_by":{"type":"method","name":"find_or_create_by","children":[],"call":[" create "," find_by "," create_or_find_by "]}," ActiveRecord SpawnMethods relation_with":{"type":"method","name":"relation_with","children":[],"call":["result extend "," extending_values "," extending_values any? ","result default_scoped= "," default_scoped ","Relation  new "," table "," klass ","Relation  create "," predicate_builder ","result instance_variable_set "," spawn ","Relation  new  extend ","Relation  create  extend "," spawn  extend ","Relation  new  default_scoped= ","Relation  create  default_scoped= "," spawn  default_scoped= ","Relation  new  instance_variable_set ","Relation  create  instance_variable_set "," spawn  instance_variable_set "]}," ActiveRecord SpawnMethods merge!":{"type":"method","name":"merge!","children":[],"call":["klass new merge ","klass new ","other is_a? "," instance_exec ","other respond_to? ","other is_a? ! "," raise ","other inspect ","Relation Merger  new merge ","Relation Merger  new ","Relation HashMerger  new merge ","Relation HashMerger  new ","options [] ","rest extract_options! ","ActiveRecord  deprecator warn ","(str \"            `Relation#merge(rewhere: false)` is deprecated without replacement,\\n\") squish ","ActiveRecord  deprecator ","(str \"            Specifying `Relation#merge(rewhere: true)` is deprecated, as that has now been\\n\") squish ","options key? ","rest extract_options!  [] ","rest extract_rest extract_options! ! ","rest extract_options!  key? "]}," ActiveRecord QueryMethods check_if_method_has_arguments!":{"type":"method","name":"check_if_method_has_arguments!","children":[],"call":[" raise ","args blank? ","args compact_blank! ","args flatten! "," block_given? "]}," ActiveRecord QueryMethods validate_order_args":{"type":"method","name":"validate_order_args","children":[],"call":[" raise ","(send\n  (send\n    (lvar :h) :values) :-\n  (array\n    (sym :asc)\n    (sym :desc))) empty? ","h values - ","h values ","(send\n  (lvar :args) :select) each ","Hash  === ","args select ","args grep ","VALID_DIRECTIONS  inspect ","VALID_DIRECTIONS  include? ","arg each ","arg is_a? ","args each ","VALID_DIRECTIONS  to_a inspect ","VALID_DIRECTIONS  to_a "]}," ActiveRecord QueryMethods build_order":{"type":"method","name":"build_order","children":[],"call":["arel order ","orders empty? "," table [] send "," table [] "," table ","order map "," table [] asc ","orders uniq reject flat_map ","orders uniq reject ","orders uniq "," reverse_sql_order "," reverse_order_value "," order_values ","orders reject! "," order_values uniq "," order_values compact_blank "," reverse_sql_order  empty? "," order_values  empty? "," order_values uniq  empty? "," order_values compact_blank  empty? "," reverse_sql_order  uniq reject flat_map "," order_values  uniq reject flat_map "," order_values uniq  uniq reject flat_map "," order_values compact_blank  uniq reject flat_map "," reverse_sql_order  uniq reject "," order_values  uniq reject "," order_values uniq  uniq reject "," order_values compact_blank  uniq reject "," reverse_sql_order  uniq "," order_values  uniq "," order_values uniq  uniq "," order_values compact_blank  uniq "," reverse_sql_order  reject! "," order_values  reject! "," order_values uniq  reject! "," order_values compact_blank  reject! "]}," ActiveRecord QueryMethods build_from":{"type":"method","name":"build_from","children":[],"call":["opts arel as ","name to_s ","opts arel "," from_value "," bind_values= ","opts bind_values + "," bind_values ","opts bind_values "," from_clause name "," from_clause "," from_clause value ","opts send ","opts eager_loading? "," from_clause value  arel as ","opts send  arel as "," from_clause name  to_s "," from_clause value  arel ","opts send  arel "," from_clause value  bind_values + ","opts send  bind_values + "," from_clause value  bind_values ","opts send  bind_values "," from_clause  from_clause name  "," from_clause value  send ","opts send  send "," from_clause value  eager_loading? ","opts send  eager_loading? "]}," ActiveRecord QueryMethods where_unscoping":{"type":"method","name":"where_unscoping","children":[],"call":[" raise ","rel class ","target_value inspect ","subrelation name to_sym == ","subrelation name to_sym ","subrelation name ","rel right ","rel left ","rel left kind_of? "," where_values reject! "," where_values ","target_value to_sym ","col name == ","col name "," bind_values reject! "," bind_values ","subrelation name == ","target_value to_s "," where_values= "," where_values reject ","target_value to_s  inspect ","target_value to_s  to_sym ","target_value to_s  to_s "]}," ActiveRecord QueryMethods symbol_unscoping":{"type":"method","name":"symbol_unscoping","children":[],"call":[" send ","Relation SINGLE_VALUE_METHODS  include? "," raise ","VALID_UNSCOPING_VALUES  to_a join ","VALID_UNSCOPING_VALUES  to_a ","VALID_UNSCOPING_VALUES  include? ! ","VALID_UNSCOPING_VALUES  include? "," reverse_order_value= "," bind_values= ","Relation MULTI_VALUE_METHODS  include? ","Relation CLAUSE_METHODS  include? "]}," ActiveRecord QueryMethods reverse_order!":{"type":"method","name":"reverse_order!","children":[],"call":[" reverse_order_value= "," reverse_order_value ! "," reverse_order_value "," order_values= "," reverse_sql_order ","orders reject! "," order_values uniq "," order_values "," order_values compact_blank "," order_values uniq  reject! "," order_values compact_blank  reject! "]}," ActiveRecord QueryMethods extending!":{"type":"method","name":"extending!","children":[],"call":[" extend "," extending_values "," extending_values any? ","modules flatten ","modules << ","Module  new "," block_given? ","modules flatten! "]}," ActiveRecord QueryMethods distinct!":{"type":"method","name":"distinct!","children":[],"call":[" distinct_value= "]}," ActiveRecord QueryMethods distinct":{"type":"method","name":"distinct","children":[],"call":[" spawn distinct! "," spawn "]}," ActiveRecord QueryMethods from!":{"type":"method","name":"from!","children":[],"call":[" from_value= "," bind_values= ","value arel bind_values + + "," bind_values ","value arel bind_values + ","value bind_values ","value arel bind_values ","value arel ","value is_a? "," from_clause= ","Relation FromClause  new "]}," ActiveRecord QueryMethods create_with!":{"type":"method","name":"create_with!","children":[],"call":[" create_with_value= "," create_with_value merge "," create_with_value "," sanitize_forbidden_attributes "," create_with_ sanitize_forbidden_attributes = "," create_with_ sanitize_forbidden_attributes  merge "," create_with_ sanitize_forbidden_attributes  "]}," ActiveRecord QueryMethods readonly!":{"type":"method","name":"readonly!","children":[],"call":[" readonly_value= "]}," ActiveRecord QueryMethods none!":{"type":"method","name":"none!","children":[],"call":[" extending! "," where! extending! "," where! "]}," ActiveRecord QueryMethods none":{"type":"method","name":"none","children":[],"call":[" extending "," where extending! "," where "," spawn none! "," spawn "]}," ActiveRecord QueryMethods lock!":{"type":"method","name":"lock!","children":[],"call":[" lock_value= "]}," ActiveRecord QueryMethods offset!":{"type":"method","name":"offset!","children":[],"call":[" offset_value= "]}," ActiveRecord QueryMethods limit!":{"type":"method","name":"limit!","children":[],"call":[" limit_value= ","ActiveSupport Deprecation  warn ","(str \"          Passing a string to limit in the form \\\"1,2\\\" is deprecated and will be\\n\") squish "," string_containing_comma? "]}," ActiveRecord QueryMethods having!":{"type":"method","name":"having!","children":[],"call":[" build_where "," having_values "," references! ","PredicateBuilder  references ","Hash  === "," having_clause_factory build "," having_clause_factory "," having_clause "," sanitize_forbidden_attributes "," build_having_clause "]}," ActiveRecord QueryMethods where!":{"type":"method","name":"where!","children":[],"call":[" build_where "," where_values "," references! ","PredicateBuilder  references ","Hash  === ","WhereChain  new ","opts == "," sanitize_forbidden_attributes "," where_clause_factory build "," where_clause_factory "," where_clause "," build_where_clause "," sanitize_forbidden_attributes  == "]}," ActiveRecord QueryMethods bind!":{"type":"method","name":"bind!","children":[],"call":[" bind_values "]}," ActiveRecord QueryMethods joins!":{"type":"method","name":"joins!","children":[],"call":[" joins_values ","args flatten! ","args compact! "]}," ActiveRecord QueryMethods unscope!":{"type":"method","name":"unscope!","children":[],"call":[" raise ","args inspect "," where_unscoping "," Array each "," Array ","key != ","scope each "," symbol_unscoping ","args each ","args flatten! "," unscope_values "," where_clause= "," where_clause except "," where_clause "," Array map "," set_value ","VALID_UNSCOPING_VALUES  to_a join ","VALID_UNSCOPING_VALUES  to_a ","VALID_UNSCOPING_VALUES  include? ! ","VALID_UNSCOPING_VALUES  include? ","DEFAULT_VALUES  [] ","scope == ","@values []= "," assert_mutability! "," resolve_arel_attributes ","Array  wrap ","@values delete "]}," ActiveRecord QueryMethods unscope":{"type":"method","name":"unscope","children":[],"call":[" spawn unscope! "," spawn "," check_if_method_has_arguments! "," __callee__ "]}," ActiveRecord QueryMethods reorder!":{"type":"method","name":"reorder!","children":[],"call":[" order_values= "," reordering_value= "," validate_order_args ","args flatten! "," preprocess_order_args ","args all? ","args uniq! "]}," ActiveRecord QueryMethods order!":{"type":"method","name":"order!","children":[],"call":[" order_values= ","args + "," order_values "," quoted_table_name ","arg is_a? ","args map "," references! ","references any? ","(send\n  (lvar :references) :map!) compact! ","arg =~ ","references map! ","Arel Node  === ","args reject "," validate_order_args ","args flatten! ","Arel Nodes Ascending  new "," klass arel_table [] "," klass arel_table "," klass ","args map! "," preprocess_order_args ","args empty? "]}," ActiveRecord QueryMethods group!":{"type":"method","name":"group!","children":[],"call":[" group_values ","args flatten! "]}," ActiveRecord QueryMethods select!":{"type":"method","name":"select!","children":[],"call":["fields flatten "," select_values "," klass attribute_alias "," klass "," klass attribute_alias? ","fields map! ","fields flatten! "]}," ActiveRecord QueryMethods references!":{"type":"method","name":"references!","children":[],"call":[" references_values= ","(send\n  (send nil :references_values) :+\n  (send\n    (lvar :args) :map!\n    (block-pass\n      (sym :to_s)))) uniq "," references_values + ","args map! "," references_values ","args flatten! ","table_names map! ","table_names flatten! "]}," ActiveRecord QueryMethods references":{"type":"method","name":"references","children":[],"call":[" spawn references! "," spawn "," check_if_method_has_arguments! "," __callee__ "]}," ActiveRecord QueryMethods preload!":{"type":"method","name":"preload!","children":[],"call":[" preload_values "]}," ActiveRecord QueryMethods eager_load!":{"type":"method","name":"eager_load!","children":[],"call":[" eager_load_values "]}," ActiveRecord QueryMethods includes!":{"type":"method","name":"includes!","children":[],"call":[" includes_values= ","(send\n  (send nil :includes_values) :+\n  (lvar :args)) flatten uniq ","(send\n  (send nil :includes_values) :+\n  (lvar :args)) flatten "," includes_values + "," includes_values ","a blank? ","args reject! ","args flatten! "]}," ActiveRecord QueryMethods create_with_value":{"type":"method","name":"create_with_value","children":[],"call":["@values [] "]}," ActiveRecord QueryMethods WhereChain not":{"type":"method","name":"not","children":[],"call":["@scope where_values ","Arel Nodes Not  new ","Arel Nodes SqlLiteral  new ","Arel Nodes NotEqual  new ","rel right ","rel left ","Arel Nodes NotIn  new ","@scope send map ","@scope send ","@scope references! ","PredicateBuilder  references ","Hash  === "," raise ","where_clause invert ","@scope where_clause ","@scope send build "," sanitize_forbidden_attributes ","ActiveSupport Deprecation  warn ","(str \"NOT conditions will no longer behave as NOR in Rails 6.1.\\n\") squish ","(send\n  (send\n    (lvar :opts) :keys) :map) join ","key inspect ","opts keys map ","opts keys "," not_behaves_as_nor? ","(send\n  (lvar :opts) :flat_map) join ","k inspect ","value map ","value size > ","value size ","value is_a? ","opts flat_map ","@scope send build  invert ","@scope send  invert ","@scope @scope send build  ","@scope @scope send  ","(send\n  (send\n    (lvar : sanitize_forbidden_attributes ) :keys) :map) join "," sanitize_forbidden_attributes  keys map "," sanitize_forbidden_attributes  keys ","(send\n  (lvar : sanitize_forbidden_attributes ) :flat_map) join "," sanitize_forbidden_attributes  flat_map "]}," ActiveRecord QueryMethods WhereChain initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord PredicateBuilder build":{"type":"method","name":"build","children":[],"call":[" handler_for call "," handler_for ","attribute eq "," build_bind_attribute ","attribute name "," table type force_equality? "," table type "," table ","attribute public_send ","value id ","value respond_to? ","value is_a? "," build_ build_bind_attribute _attribute ","value id  id ","value id  respond_to? ","value id  is_a? "]}," ActiveRecord PredicateBuilder references":{"type":"method","name":"references","children":[],"call":[]}," ActiveRecord PredicateBuilder expand":{"type":"method","name":"expand","children":[],"call":[" build "," table arel_attribute "," table ","AssociationQueryHandler  value_for "," table associated_with? ","AssociationQueryValue  new "," table associated_table ","AssociationQueryHandler  AssociationQueryHandler  value_for _for ","AssociationQueryHandler  AssociationQueryValue  new _for "]}," ActiveRecord Relation Merger merged_wheres":{"type":"method","name":"merged_wheres","children":[],"call":["(send\n  (send\n    (send nil :relation) :where_values) :reject) + "," values [] "," values ","seen include? ","w left ","w operator == ","w operator ","w respond_to? "," relation where_values reject "," relation where_values "," relation ","seen << "," values [] each ","Set  new "," relation where_values + "," relation where_values empty? "," values [] empty? ","Set  new  include? ","Set  new  << "]}," ActiveRecord Relation Merger merged_binds":{"type":"method","name":"merged_binds","children":[],"call":[" relation bind_values "," relation ","(send\n  (send\n    (send nil :relation) :bind_values) :+\n  (send\n    (send nil :values) :[]\n    (sym :bind))) uniq "," relation bind_values + "," values [] "," values "]}," ActiveRecord Relation Merger merge_single_values":{"type":"method","name":"merge_single_values","children":[],"call":[" relation create_with_value= ","(or\n  (send\n    (send nil :relation) :create_with_value)\n  (hash)) merge "," values [] "," values "," relation create_with_value "," relation "," values [] blank? "," relation reverse_order_value= "," relation lock_value= "," relation lock_value "," relation from_value= "," relation from_value "," other create_with_value "," other "," other create_with_value blank? "," other lock_value "," other from_value "," relation from_clause= "," other from_clause "," relation from_clause empty? "," relation from_clause "]}," ActiveRecord Relation Merger merge_multi_values":{"type":"method","name":"merge_multi_values","children":[],"call":[" relation extend "," values [] "," values "," relation "," values [] blank? "," relation order! "," relation reorder! "," relation bind_values= "," merged_binds "," relation where_values= "," merged_wheres "," filter_binds + "," filter_binds ","kept + "," partition_overwrites "," relation bind_values "," relation where_values ","Arel Nodes Equality  new ","node left ","conn substitute_at ","bind_values [] first ","bind_values [] ","Arel Nodes BindParam  === ","node right ","Arel Nodes Equality  === ","where_values map! "," relation klass connection "," relation klass "," other extending_values "," other "," other extending_values blank? "," other order_values "," other reordering_value "," other bind_values "," other where_values "," relation extending! ","extensions any? "," other extensions - "," relation extensions "," other extensions "," other order_values any? "," relation  filter_binds + = "," relation kept + = "," relation  filter_binds +  "," relation kept +  ","conn conn substitute_at _at "," relation klass connection  substitute_at "," filter_binds +  [] first "," filter_binds +  [] ","kept +  map! "," relation klass  relation klass connection ection "," other  filter_binds +  "," other kept +  "," other extensions -  any? "," other  other extensions -  - "," relation  other extensions -  "," other  other extensions -  "]}," ActiveRecord Relation Merger merge_joins":{"type":"method","name":"merge_joins","children":[],"call":["association join_relation "," relation ","join_dependency join_associations each ","join_dependency join_associations "," relation joins! ","ActiveRecord Associations JoinDependency  new "," other klass "," other "," values [] partition "," values [] "," values "," other klass == "," relation klass "," values [] blank? "," relation joins "," other joins_values partition "," other joins_values "," other joins_values blank? "," other table "," other alias_tracker "," other joins_values map "," other construct_join_dependency "," other send "," relation joins_values "," other joins_values empty? ","ActiveRecord Associations JoinDependency  new  join_associations each "," other construct_join_dependency  join_associations each ","ActiveRecord Associations JoinDependency  new  join_associations "," other construct_join_dependency  join_associations "," other construct_ActiveRecord Associations JoinDependency  new  "," other construct_ other construct_join_dependency  "]}," ActiveRecord Relation Merger merge":{"type":"method","name":"merge","children":[],"call":[" relation "," merge_joins "," merge_single_values "," merge_multi_values "," relation send ","value blank? "," values [] "," values "," normal_values each "," normal_values "," != ","value nil? "," relation _select! ","name == "," merge_preloads "," merge_clauses "," merge_outer_joins "," relation public_send "," merge_select_values ","NORMAL_VALUES  each "," relation none! "," other null_relation? "," other "," merge_single_ values [] s "," merge_multi_ values [] s "," values []  blank? ","  values [] s [] ","  values [] s "," normal_ values [] s each "," normal_ values [] s "," values []  nil? "," merge_select_ values [] s "]}," ActiveRecord Relation Merger normal_values":{"type":"method","name":"normal_values","children":[],"call":[]}," ActiveRecord Relation Merger initialize":{"type":"method","name":"initialize","children":[],"call":["other values ","other with_default_scope ","other klass != ","relation klass ","other klass ","other default_scoped? ","other with_default_scope  values ","other with_default_scope  with_default_scope ","other with_default_scope  klass != ","other with_default_scope  klass ","other with_default_scope  default_scoped? "]}," ActiveRecord Relation HashMerger other":{"type":"method","name":"other","children":[],"call":["other send ","other joins! ","Hash  === ","k == "," hash each "," hash ","Relation  new "," relation table "," relation "," relation klass ","other _select! ","Relation  create "," relation predicate_builder ","other public_send ","Array  === ","Relation  new  send ","Relation  create  send ","Relation  new  joins! ","Relation  create  joins! ","Relation  new  _select! ","Relation  create  _select! ","Relation  new  public_send ","Relation  create  public_send "]}," ActiveRecord Relation HashMerger merge":{"type":"method","name":"merge","children":[],"call":["Merger  new merge ","Merger  new "," other "," relation "]}," ActiveRecord Relation HashMerger initialize":{"type":"method","name":"initialize","children":[],"call":["hash assert_valid_keys "]}," ActiveRecord FinderMethods find_take":{"type":"method","name":"find_take","children":[],"call":[" limit to_a first "," limit to_a "," limit ","@records first "," loaded? "," limit records first "," limit records "," records first "," records "]}," ActiveRecord FinderMethods raise_record_not_found_exception!":{"type":"method","name":"raise_record_not_found_exception!","children":[],"call":[" raise ","error << ","ids join ","@klass name pluralize ","@klass name "," primary_key "," Array size == "," Array size "," Array "," arel where_sql "," arel ","@klass arel_engine ","name pluralize ","RecordNotFound  new ","ids nil? ","not_found_ids join ","key to_s pluralize ","not_found_ids size ","key to_s ","(str \"Couldn't find all \") dup ","(str \"Couldn't find \") dup ","(str \"Couldn't find all \") +@ ","(str \"Couldn't find \") +@ ","Array  wrap size == ","Array  wrap size ","Array  wrap "," klass "," where_clause empty? "," where_clause ","(str \"Couldn't find all \") dup  << ","(str \"Couldn't find \") dup  << ","(str \"Couldn't find all \") +@  << ","(str \"Couldn't find \") +@  << ","@klass @klass name  pluralize ","@klass @klass name  ","@klass name  pluralize "]}," ActiveRecord FinderMethods take!":{"type":"method","name":"take!","children":[],"call":[" raise "," take ","RecordNotFound  new "," arel where_sql "," arel ","@klass name ","@klass arel_engine "," raise_record_not_found_exception! "]}," ActiveRecord FinderMethods take":{"type":"method","name":"take","children":[],"call":[" find_take "," limit to_a "," limit "," find_take_with_limit "]}," ActiveRecord FinderMethods find_by!":{"type":"method","name":"find_by!","children":[],"call":[" where take! "," where "," raise ","@klass name ","RecordNotFound  new ","@klass primary_key "]}," ActiveRecord FinderMethods find_by":{"type":"method","name":"find_by","children":[],"call":[" where take "," where "]}," ActiveRecord Delegation ClassMethods relation_class_for":{"type":"method","name":"relation_class_for","children":[],"call":[" const_get ","klass_name gsub "," name gsub "," name ","my_cache compute_if_absent ","ThreadSafe Cache  new ","@@subclasses compute_if_absent ","klass name ","klass relation_delegate_class ","klass name  gsub "]}," ActiveRecord Delegation ClassMethods const_missing":{"type":"method","name":"const_missing","children":[],"call":[" const_set "," include ","Class  new "]}," ActiveRecord Delegation ClassMethods new":{"type":"method","name":"new","children":[],"call":["relation __send__ "," relation_class_for allocate "," relation_class_for "," relation_class_for allocate  __send__ ","  relation_class_for allocate _class_for allocate ","  relation_class_for allocate _class_for "]}," ActiveRecord Delegation ClassSpecificRelation method_missing":{"type":"method","name":"method_missing","children":[],"call":[" arel send "," arel "," class delegate "," class "," arel respond_to? "," to_a send "," to_a ","Array  method_defined? ","@klass send "," scoping "," class delegate_to_scoped_klass ","@klass respond_to? "," arel public_send ","@klass public_send ","ActiveSupport Deprecation  warn ","@klass generate_relation_method ","Delegation  uncacheable_methods include? ","Delegation  uncacheable_methods "]}," ActiveRecord Delegation ClassSpecificRelation ClassMethods delegate":{"type":"method","name":"delegate","children":[],"call":[" method_defined? ","@delegation_mutex synchronize "]}," ActiveRecord Delegation ClassSpecificRelation ClassMethods delegate_to_scoped_klass":{"type":"method","name":"delegate_to_scoped_klass","children":[],"call":["@klass send "," scoping "," define_method "," module_eval ","34 + ","method to_s =~ ","method to_s "," method_defined? ","@delegation_mutex synchronize ","40 + ","method inspect ","@klass public_send ","68 + ","62 + ","63 + ","65 + ","66 + ","(str \"\\\\A[a-zA-Z_]\\\\w*[!?]?\\\\z\") match? ","64 + ","95 + "]}," ActiveRecord Delegation ClassSpecificRelation ClassMethods name":{"type":"method","name":"name","children":[],"call":[" superclass name "," superclass "]}," ActiveRecord Calculations has_include?":{"type":"method","name":"has_include?","children":[],"call":[" references_eager_loaded_tables? "," includes_values present? "," includes_values "," eager_loading? ","column_name != "]}," ActiveRecord Calculations ids":{"type":"method","name":"ids","children":[],"call":[" pluck "," primary_key "," type_cast_pluck_values ","result then "," klass connection select_all "," klass name "," klass "," klass connection "," skip_query_cache_if_necessary ","ActiveRecord Result  empty ","relation where_clause contradiction? ","relation where_clause ","relation select_values= "," spawn "," arel_columns ","relation ids "," apply_join_dependency group "," apply_join_dependency "," has_include? ","Promise Complete  new ","record _read_attribute ","primary_key_array map ","primary_key_array first ","primary_key_array one? "," records map "," records "," loaded? "," Array ","ActiveRecord Result  empty  then "," spawn  where_clause contradiction? "," apply_join_dependency group  where_clause contradiction? "," spawn  where_clause "," apply_join_dependency group  where_clause "," spawn  select_values= "," apply_join_dependency group  select_values= "," arel_ arel_columns  "," spawn  ids "," apply_join_dependency group  ids "," Array  map "," Array  first "," Array  one? "]}," ActiveRecord Reflection ThroughReflection scope_chain":{"type":"method","name":"scope_chain","children":[],"call":["scope_chain + ","through_scope_chain first << "," through_reflection klass where "," options [] "," options "," foreign_type "," through_reflection klass "," through_reflection ","through_scope_chain first "," through_reflection scope_chain ","scope_chain first << "," scope ","scope_chain first "," source_reflection scope_chain map "," source_reflection scope_chain "," source_reflection "," through_reflection scope_chain map "," where "," lambda "," source_reflection scope_chain map  + "," through_reflection scope_chain  first << "," through_reflection scope_chain map  first << ","through_ source_reflection scope_chain map  first << "," foreign_ foreign_type  "," through_reflection scope_chain  first "," through_reflection scope_chain map  first ","through_ source_reflection scope_chain map  first "," through_reflection  source_reflection scope_chain map  "," source_reflection scope_chain map  first << "," source_reflection scope_chain map  first "," source_reflection  source_reflection scope_chain map  map "," source_reflection  source_reflection scope_chain map  "," through_reflection  source_reflection scope_chain map  map "]}," ActiveRecord Reflection AssociationReflection derive_join_table":{"type":"method","name":"derive_join_table","children":[],"call":["(send\n  (send nil :active_record) :table_name) sort join gsub gsub ","(send\n  (send nil :active_record) :table_name) sort join gsub ","(send\n  (send nil :active_record) :table_name) sort join ","(send\n  (send nil :active_record) :table_name) sort "," klass table_name "," klass "," active_record table_name "," active_record ","ModelSchema  derive_join_table_name "]}," ActiveRecord Reflection AssociationReflection polymorphic?":{"type":"method","name":"polymorphic?","children":[],"call":[" options key? "," options "," options [] "]}," ActiveRecord Reflection AssociationReflection has_and_belongs_to_many?":{"type":"method","name":"has_and_belongs_to_many?","children":[],"call":[" macro == "," macro "]}," ActiveRecord Reflection AssociationReflection scope_chain":{"type":"method","name":"scope_chain","children":[],"call":[" scope "]}," ActiveRecord Reflection AssociationReflection join_table":{"type":"method","name":"join_table","children":[],"call":[" derive_join_table "," options [] "," options ","(or\n  (csend\n    (send\n      (send nil :options) :[]\n      (sym :join_table)) :to_s)\n  (send nil :derive_join_table)) -@ "]}," ActiveRecord Reflection AggregateReflection mapping":{"type":"method","name":"mapping","children":[],"call":["mapping first is_a? ","mapping first "," name "," options [] "," options "]}," ActiveRecord ReadonlyAttributes _attr_readonly":{"type":"method","name":"_attr_readonly","children":[],"call":[" class _attr_readonly "," class ","ActiveSupport Deprecation  warn "]}," ActiveRecord QueryCache restore_query_cache_settings":{"type":"method","name":"restore_query_cache_settings","children":[],"call":["ActiveRecord Base  connection disable_query_cache! ","ActiveRecord Base  connection ","ActiveRecord Base  connection clear_query_cache ","ActiveRecord Base  connection_id= "]}," ActiveRecord Persistence verify_readonly_attribute":{"type":"method","name":"verify_readonly_attribute","children":[],"call":[" raise "," class readonly_attributes include? "," class readonly_attributes "," class "," class readonly_attribute? "]}," ActiveRecord Persistence create_record":{"type":"method","name":"create_record","children":[],"call":[" id "," class primary_key "," class "," class unscoped insert "," class unscoped "," arel_attributes_with_values_for_create "]}," ActiveRecord Persistence update_record":{"type":"method","name":"update_record","children":[],"call":["klass connection update ","klass connection ","klass unscoped where arel compile_update ","klass unscoped where arel ","klass unscoped where ","klass arel_table [] eq "," id "," id_was ","klass arel_table [] ","klass primary_key ","klass arel_table ","klass unscoped ","bind_attrs []= ","klass connection substitute_at ","db_columns_with_values [] first ","db_columns_with_values [] ","bind_attrs keys each_with_index ","bind_attrs keys ","attributes_with_values dup ","column_hash [] ","attr name ","attributes_with_values map ","klass connection schema_cache columns_hash ","klass table_name ","klass connection schema_cache "," class ","attributes_with_values empty? "," arel_attributes_with_values_for_update "," class unscoped update_record "," class unscoped ","attributes_values empty? "," class  connection update "," class  connection "," class  unscoped where arel compile_update "," class  unscoped where arel "," class  unscoped where "," class  arel_table [] eq "," class  arel_table [] "," class  primary_key "," class  arel_table "," class  unscoped ","attributes_with_values dup  []= "," class  connection substitute_at ","attributes_with_values dup  keys each_with_index ","attributes_with_values dup  keys "," arel_attributes_with_values_for_update  dup ","klass connection schema_cache columns_hash  [] "," arel_attributes_with_values_for_update  map "," class  connection schema_cache columns_hash "," class  table_name "," class  connection schema_cache "," arel_attributes_with_values_for_update  empty? "," arel_ arel_attributes_with_values_for_update _for_update "]}," ActiveRecord Persistence relation_for_destroy":{"type":"method","name":"relation_for_destroy","children":[],"call":["relation bind_values= "," id "," class unscoped where "," class arel_table [] eq "," class arel_table [] "," class arel_table "," class "," class unscoped "," class connection substitute_at "," class connection "," class columns_hash [] "," class columns_hash "," class primary_key "," connection substitute_at "," connection "," _relation_for_itself "," class unscoped where  bind_values= "," class connection  class connection substitute_at _at "," class connection  connection substitute_at _at "," class  class columns_hash [] s_hash [] "," class  class columns_hash [] s_hash "," connection  class connection substitute_at _at "," connection  connection substitute_at _at "," _ class unscoped where _for_itself "]}," ActiveRecord Persistence destroy_row":{"type":"method","name":"destroy_row","children":[],"call":[" relation_for_destroy delete_all "," relation_for_destroy "," _delete_row "]}," ActiveRecord Persistence update_columns":{"type":"method","name":"update_columns","children":[],"call":["updated_count == "," raw_write_attribute ","attributes each "," class unscoped where update_all "," class unscoped where "," id "," class primary_key "," class "," class unscoped "," verify_readonly_attribute ","key to_s ","attributes each_key "," raise "," persisted? "," destroyed? "," new_record? ","affected_rows == "," write_attribute_without_type_cast "," class _update_record "," id_in_database "," _relation_for_itself update_all "," _relation_for_itself "," class attribute_aliases [] "," class attribute_aliases ","attributes transform_keys "," clear_attribute_change ","h []= ","@attributes write_cast_value ","attributes each_with_object "," _primary_key_constraints_hash "," _raise_readonly_record_error "," readonly? "," _query_constraints_hash "," class unscoped where update_all  == "," _relation_for_itself update_all  == "," class _update_record  == ","  id_in_database  "]}," ActiveRecord Persistence update!":{"type":"method","name":"update!","children":[],"call":[" save! "," assign_attributes "," with_transaction_returning_status "]}," ActiveRecord Persistence becomes!":{"type":"method","name":"becomes!","children":[],"call":["became public_send ","klass sti_name ","klass inheritance_column "," class descends_from_active_record? "," class "," becomes ","klass descends_from_active_record? ! ","klass descends_from_active_record? "," becomes  public_send "]}," ActiveRecord Persistence destroy!":{"type":"method","name":"destroy!","children":[],"call":[" raise "," destroy ","RecordNotDestroyed  new "," _raise_record_not_destroyed "]}," ActiveRecord Persistence ClassMethods discriminate_class_for_record":{"type":"method","name":"discriminate_class_for_record","children":[],"call":[]}," ActiveRecord Persistence ClassMethods instantiate":{"type":"method","name":"instantiate","children":[],"call":["klass allocate init_with ","klass allocate ","klass decorate_columns ","column_types dup "," discriminate_class_for_record ","klass attributes_builder build_from_database ","klass attributes_builder "," instantiate_instance_of "," discriminate_class_for_record  allocate init_with "," discriminate_class_for_record  allocate "," discriminate_class_for_record  decorate_columns ","klass decorate_columns  dup "," discriminate_class_for_record  attributes_builder build_from_database ","klass klass attributes_builder build_from_database _builder build_from_database "," discriminate_class_for_record  attributes_builder ","klass klass attributes_builder build_from_database _builder "]}," ActiveRecord NullRelation exists?":{"type":"method","name":"exists?","children":[],"call":[]}," ActiveRecord NullRelation calculate":{"type":"method","name":"calculate","children":[],"call":["Hash  new "," group_values any? "," group_values ","operation == ","(sym :average) include? ","(sym :count) include? "]}," ActiveRecord NullRelation sum":{"type":"method","name":"sum","children":[],"call":[" calculate "]}," ActiveRecord NullRelation count":{"type":"method","name":"count","children":[],"call":[" calculate "]}," ActiveRecord NullRelation where_values_hash":{"type":"method","name":"where_values_hash","children":[],"call":[]}," ActiveRecord NullRelation to_sql":{"type":"method","name":"to_sql","children":[],"call":[]}," ActiveRecord NullRelation many?":{"type":"method","name":"many?","children":[],"call":[]}," ActiveRecord NullRelation any?":{"type":"method","name":"any?","children":[],"call":[]}," ActiveRecord NullRelation empty?":{"type":"method","name":"empty?","children":[],"call":[]}," ActiveRecord NullRelation size":{"type":"method","name":"size","children":[],"call":[" calculate "]}," ActiveRecord NullRelation delete":{"type":"method","name":"delete","children":[],"call":[]}," ActiveRecord NullRelation update_all":{"type":"method","name":"update_all","children":[],"call":[]}," ActiveRecord NullRelation delete_all":{"type":"method","name":"delete_all","children":[],"call":[]}," ActiveRecord NullRelation pluck":{"type":"method","name":"pluck","children":[],"call":[]}," ActiveRecord NullRelation exec_queries":{"type":"method","name":"exec_queries","children":[],"call":[" freeze "]}," ActiveRecord NestedAttributes raise_nested_attributes_record_not_found!":{"type":"method","name":"raise_nested_attributes_record_not_found!","children":[],"call":[" raise "," id "," class name "," class "," class reflect_on_association klass name "," class reflect_on_association klass "," class reflect_on_association "," class _reflect_on_association klass name "," class _reflect_on_association klass "," class _reflect_on_association ","RecordNotFound  new "]}," ActiveRecord NestedAttributes check_record_limit!":{"type":"method","name":"check_record_limit!","children":[],"call":[" raise ","attributes_collection size ","attributes_collection size > ","limit call "," send "]}," ActiveRecord NestedAttributes ClassMethods generate_association_writer":{"type":"method","name":"generate_association_writer","children":[],"call":[" generated_feature_methods module_eval ","334 + "," generated_feature_methods ","317 + "," generated_association_methods module_eval ","338 + "," generated_association_methods ","356 + ","348 + ","370 + ","369 + ","368 + ","394 + "]}," ActiveRecord ModelSchema ClassMethods initialize_attributes":{"type":"method","name":"initialize_attributes","children":[],"call":[]}," ActiveRecord ModelSchema ClassMethods decorate_columns":{"type":"method","name":"decorate_columns","children":[],"call":["columns_hash []= ","AttributeMethods TimeZoneConversion Type  new "," create_time_zone_conversion_attribute? ","AttributeMethods Serialization Type  new "," serialized_attributes key? "," serialized_attributes ","columns_hash each ","columns_hash empty? ","columns_hash [] ","@time_zone_column_names each ","(send\n  (send\n    (self) :columns_hash) :find_all) map! "," columns_hash find_all "," columns_hash ","@serialized_column_names each "," columns_hash keys find_all "," columns_hash keys "]}," ActiveRecord ModelSchema ClassMethods column_types":{"type":"method","name":"column_types","children":[],"call":[" decorate_columns "," columns_hash dup "," columns_hash ","h default= ","Type Value  new "," columns_hash transform_values tap "," columns_hash transform_values "]}," ActiveRecord Migrator use_transaction?":{"type":"method","name":"use_transaction?","children":[],"call":["Base  connection supports_ddl_transactions? ","Base  connection ","migration disable_ddl_transaction ! ","migration disable_ddl_transaction "," connection supports_ddl_transactions? "," connection "]}," ActiveRecord Migrator validate":{"type":"method","name":"validate","children":[],"call":[" raise ","DuplicateMigrationVersionError  new ","v length > ","v length ","migrations group_by find ","migrations group_by ","DuplicateMigrationNameError  new "]}," ActiveRecord Migrator start":{"type":"method","name":"start","children":[],"call":[" migrations index "," current "," migrations "," up? "]}," ActiveRecord Migrator finish":{"type":"method","name":"finish","children":[],"call":[" migrations size - "," migrations size "," migrations "," migrations index "," target "]}," ActiveRecord Migrator target":{"type":"method","name":"target","children":[],"call":["m version == ","m version "," migrations detect "," migrations "]}," ActiveRecord Migrator execute_migration_in_transaction":{"type":"method","name":"execute_migration_in_transaction","children":[],"call":[" record_version_state_after_migrating ","migration version ","migration migrate "," ddl_transaction "," raise ","e backtrace ","msg << "," use_transaction? ","Base  logger info ","migration name ","Base  logger "," migrated include? ","migration version to_i "," migrated "," up? "," migrated include? ! "," down? ","An error has occurred,  dup ","An error has occurred,  +@ ","An error has occurred,  dup  << ","An error has occurred,  +@  << "]}," ActiveRecord Migrator ran?":{"type":"method","name":"ran?","children":[],"call":[" migrated include? ","migration version to_i ","migration version "," migrated "]}," ActiveRecord Migrator runnable":{"type":"method","name":"runnable","children":[],"call":[" ran? ","runnable find_all ","runnable pop "," target ","runnable reject "," up? "," migrations [] "," finish "," start "," migrations "," migrations []  find_all "," migrations []  pop "," migrations []  reject "]}," ActiveRecord Migrator last_migration":{"type":"method","name":"last_migration","children":[],"call":["NullMigration  new "," migrations last "," migrations "," migrations_paths "]}," ActiveRecord Migrator last_version":{"type":"method","name":"last_version","children":[],"call":[" last_migration version "," last_migration "," migrations last try "," migrations last "," migrations "," migrations_paths "]}," ActiveRecord Migrator needs_migration?":{"type":"method","name":"needs_migration?","children":[],"call":[" current_version < "," last_version "," current_version ","(send\n  (send\n    (send nil :migrations\n      (send nil :migrations_paths)) :collect\n    (block-pass\n      (sym :version))) :-\n  (send nil :get_all_versions\n    (lvar :connection))) size > ","(send\n  (send\n    (send nil :migrations\n      (send nil :migrations_paths)) :collect\n    (block-pass\n      (sym :version))) :-\n  (send nil :get_all_versions\n    (lvar :connection))) size "," migrations collect - "," get_all_versions "," migrations collect "," migrations "," migrations_paths "]}," ActiveRecord Migrator open":{"type":"method","name":"open","children":[],"call":[" new "," migrations "]}," ActiveRecord NullMigration mtime":{"type":"method","name":"mtime","children":[],"call":[]}," ActiveRecord NullMigration initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord MigrationProxy mtime":{"type":"method","name":"mtime","children":[],"call":["File  mtime "," filename "]}," ActiveRecord Migration execute_block":{"type":"method","name":"execute_block","children":[],"call":[" connection respond_to? "," connection "]}," ActiveRecord Migration exec_migration":{"type":"method","name":"exec_migration","children":[],"call":[" send "," change "," revert ","direction == "," respond_to? "," public_send "]}," ActiveRecord Migration run":{"type":"method","name":"run","children":[],"call":["migration_class new exec_migration ","migration_class new ","migration_classes each "," run "," revert "," reverting? ","dir == ","opts [] ","migration_classes extract_options! "," connection ","migration_classes extract_options!  [] "]}," ActiveRecord Migration reversible":{"type":"method","name":"reversible","children":[],"call":[" execute_block ","ReversibleBlockHelper  new "," reverting? "]}," ActiveRecord Migration ReversibleBlockHelper down":{"type":"method","name":"down","children":[],"call":[" reverting "]}," ActiveRecord Migration ReversibleBlockHelper up":{"type":"method","name":"up","children":[],"call":[" reverting "]}," ActiveRecord Migration disable_ddl_transaction":{"type":"method","name":"disable_ddl_transaction","children":[],"call":[" class disable_ddl_transaction "," class "]}," ActiveRecord Migration disable_ddl_transaction!":{"type":"method","name":"disable_ddl_transaction!","children":[],"call":[]}," ActiveRecord Migration check_pending!":{"type":"method","name":"check_pending!","children":[],"call":[" raise ","ActiveRecord Migrator  needs_migration? ","connection migration_context needs_migration? ","connection migration_context ","ActiveRecord PendingMigrationError  new ","pending_migrations any? ","connection migration_context open pending_migrations ","connection migration_context open ","ActiveRecord  deprecator warn ","(str \"          The `check_pending!` method is deprecated in favor of `check_all_pending!`. The\\n\") squish ","ActiveRecord  deprecator ","connection migration_context open pending_migrations  any? ","connection migration_context open connection migration_context open pending_migrations  "]}," ActiveRecord Migration CheckPending call":{"type":"method","name":"call","children":[],"call":["@app call ","ActiveRecord Migration  check_pending! ","@last_check < ","ActiveRecord Migrator  last_migration mtime to_i ","ActiveRecord Migrator  last_migration mtime ","ActiveRecord Migrator  last_migration ","ActiveRecord Base  logger silence ","ActiveRecord Base  logger "," connection "," connection supports_migrations? ","ActiveRecord Base  connection migration_context last_migration mtime to_i ","ActiveRecord Base  connection migration_context last_migration mtime ","ActiveRecord Base  connection migration_context last_migration ","ActiveRecord Base  connection migration_context ","ActiveRecord Base  connection ","@watcher execute_if_updated ","@watcher execute "," build_watcher ","@mutex synchronize ","ActiveRecord Migration  check_pending_migrations ","ActiveRecord Migrator  last_migration ActiveRecord Migrator  last_migration mtime to_i  to_i ","ActiveRecord Migrator  last_migration ActiveRecord Base  connection migration_context last_migration mtime to_i  to_i ","ActiveRecord Migrator  last_migration ActiveRecord Migrator  last_migration mtime to_i  ","ActiveRecord Migrator  last_migration ActiveRecord Base  connection migration_context last_migration mtime to_i  ","ActiveRecord Base  connection migration_context last_migration ActiveRecord Migrator  last_migration mtime to_i  to_i ","ActiveRecord Base  connection migration_context last_migration ActiveRecord Base  connection migration_context last_migration mtime to_i  to_i ","ActiveRecord Base  connection migration_context last_migration ActiveRecord Migrator  last_migration mtime to_i  ","ActiveRecord Base  connection migration_context last_migration ActiveRecord Base  connection migration_context last_migration mtime to_i  "]}," ActiveRecord Migration CheckPending initialize":{"type":"method","name":"initialize","children":[],"call":["Mutex  new "]}," ActiveRecord PendingMigrationError initialize":{"type":"method","name":"initialize","children":[],"call":["Rails  env "," Rails  env ","message ! "," detailed_migration_message ","connection migration_context open pending_migrations ","connection migration_context open ","connection migration_context ","ActiveRecord Tasks DatabaseTasks  migration_connection ","pending_migrations nil? ","connection migration_context open connection migration_context open pending_migrations  ","ActiveRecord Tasks DatabaseTasks  migration_connection  migration_context open pending_migrations ","ActiveRecord Tasks DatabaseTasks  migration_connection  migration_context open ","ActiveRecord Tasks DatabaseTasks  migration_connection  migration_context ","ActiveRecord Tasks DatabaseTasks  migration_ActiveRecord Tasks DatabaseTasks  migration_connection  ","connection migration_context open pending_migrations  nil? "]}," ActiveRecord Migration JoinTable join_table_name":{"type":"method","name":"join_table_name","children":[],"call":["(send\n  (lvar :table_1) :to_s) sort join to_sym ","(send\n  (lvar :table_1) :to_s) sort join ","(send\n  (lvar :table_1) :to_s) sort ","table_2 to_s ","table_1 to_s ","ModelSchema  derive_join_table_name to_sym ","ModelSchema  derive_join_table_name "]}," ActiveRecord Migration JoinTable find_join_table_name":{"type":"method","name":"find_join_table_name","children":[],"call":[" join_table_name ","options delete "]}," ActiveRecord Migration CommandRecorder invert_remove_index":{"type":"method","name":"invert_remove_index","children":[],"call":["options delete ","options dup "," raise ","options [] ","options is_a? ","(lvasgn :column\n  (lvar :options_or_column)) present? ","(lvasgn :options\n  (lvar :options_or_column)) is_a? ","args << ","options empty? ","args extract_options! ","options dup  delete ","args extract_options!  delete ","options dup  dup ","args extract_options!  dup ","options dup  [] ","args extract_options!  [] ","options dup  is_a? ","args extract_options!  is_a? ","(lvasgn :column\n  (lvar :options dup _or_column)) present? ","(lvasgn :column\n  (lvar :args extract_options! _or_column)) present? ","(lvasgn :options dup \n  (lvar :options dup _or_column)) is_a? ","(lvasgn :args extract_options! \n  (lvar :args extract_options! _or_column)) is_a? ","options dup  empty? ","args extract_options!  empty? ","args extract_options dup ! ","args extract_args extract_options! ! "]}," ActiveRecord Migration CommandRecorder invert_remove_column":{"type":"method","name":"invert_remove_column","children":[],"call":[" raise ","args size <= ","args size "]}," ActiveRecord Migration CommandRecorder invert_drop_table":{"type":"method","name":"invert_drop_table","children":[],"call":[" raise ","block == ","args size == ","args size ","args last delete ","args last ","args last is_a? "]}," ActiveRecord Migration CommandRecorder change_table":{"type":"method","name":"change_table","children":[],"call":["ConnectionAdapters Table  new "," delegate update_table_definition "," delegate ","@commands << "," bulk_change_table "," lambda ","recorder commands ","recorder delegate update_table_definition ","recorder delegate ","recorder reverting= "," class new "," class ","options [] "," delegate supports_bulk_alter? ","@recorder commands  << ","recorder recorder commands  "," class new  commands "," class new  delegate update_table_definition "," class new  delegate "," class new  reverting= "]}," ActiveRecord Migration CommandRecorder inverse_of":{"type":"method","name":"inverse_of","children":[],"call":[" send "," raise "," respond_to? ","(str \"          This migration uses \") strip_heredoc "]}," ActiveRecord Migration CommandRecorder revert":{"type":"method","name":"revert","children":[],"call":["@reverting ! ","previous concat ","@commands reverse ","@reverting !  ! ","previous concat  reverse "]}," ActiveRecord LogSubscriber render_bind":{"type":"method","name":"render_bind","children":[],"call":["column name ","value bytesize ","column binary? ","value [] ","value is_a? ","attribute name ","attribute value_for_database ","attribute value bytesize ","attribute value ","attribute value_for_database to_s bytesize ","attribute value_for_database to_s ","attribute value is_a? ","attribute type binary? ","attribute type ","attr name ","attr value_for_database to_s bytesize ","attr value_for_database to_s ","attr value_for_database ","attr value ","attr type binary? ","attr type ","attr first ","attr is_a? ","value []  bytesize ","attribute value_for_database  bytesize ","value []  [] ","attribute value_for_database  [] ","value []  is_a? ","attribute value_for_database  is_a? ","attr first ibute name ","attribute value [] _for_database ","attribute attribute value_for_database _for_database ","attr first ibute value_for_database ","attribute value []  bytesize ","attribute attribute value_for_database  bytesize ","attr first ibute value bytesize ","attribute value []  ","attribute attribute value_for_database  ","attr first ibute value ","attribute value [] _for_database to_s bytesize ","attribute attribute value_for_database _for_database to_s bytesize ","attr first ibute value_for_database to_s bytesize ","attribute value [] _for_database to_s ","attribute attribute value_for_database _for_database to_s ","attr first ibute value_for_database to_s ","attribute value []  is_a? ","attribute attribute value_for_database  is_a? ","attr first ibute value is_a? ","attr first ibute type binary? ","attr first ibute type ","attr first  name ","attr value [] _for_database to_s bytesize ","attr attribute value_for_database _for_database to_s bytesize ","attr first  value_for_database to_s bytesize ","attr value [] _for_database to_s ","attr attribute value_for_database _for_database to_s ","attr first  value_for_database to_s ","attr value [] _for_database ","attr attribute value_for_database _for_database ","attr first  value_for_database ","attr value []  ","attr attribute value_for_database  ","attr first  value ","attr first  type binary? ","attr first  type ","attr first  first ","attr first  is_a? "]}," ActiveRecord Locking Optimistic ClassMethods column_defaults":{"type":"method","name":"column_defaults","children":[],"call":["defaults [] "," locking_column "," lock_optimistically ","defaults key? "]}," ActiveRecord Locking Optimistic relation_for_destroy":{"type":"method","name":"relation_for_destroy","children":[],"call":["relation bind_values << "," [] to_i "," [] ","relation bind_values ","relation where "," class arel_table [] eq "," class arel_table [] "," class arel_table "," class "," class connection substitute_at ","relation bind_values length "," class connection "," class columns_hash [] "," class columns_hash "," class locking_column "," locking_enabled? "," connection substitute_at "," connection "," _read_attribute "," read_attribute_before_type_cast ","relation where  bind_values << ","relation where  bind_values ","relation where  where "," class connection  class connection substitute_at _at "," class connection  connection substitute_at _at ","relation where  bind_values length "," class  class columns_hash [] s_hash [] "," class  class columns_hash [] s_hash "," class locking_ class columns_hash []  "," class  class locking_column  "," connection  class connection substitute_at _at "," connection  connection substitute_at _at "]}," ActiveRecord Locking Optimistic destroy_row":{"type":"method","name":"destroy_row","children":[],"call":[" raise ","ActiveRecord StaleObjectError  new ","affected_rows != "," locking_enabled? "," class _delete_record "," read_attribute_before_type_cast "," id_in_database "," class primary_key "," class "," class locking_column "," attribute_before_type_cast "," _lock_value_for_database ","delete_constraints []= "," _primary_key_constraints_hash "," class _delete_record  != "," class  class locking_column  "," _primary_key_constraints_hash  []= "]}," ActiveRecord Locking Optimistic update_record":{"type":"method","name":"update_record","children":[],"call":[" raise "," send ","lock_col + ","ActiveRecord StaleObjectError  new ","affected_rows == "," class connection update "," class connection "," class ","relation where arel compile_update "," arel_attributes_with_values_for_update ","relation where arel ","relation where ","relation table [] eq and ","relation table [] eq "," class quote_value ","relation table [] ","relation table "," id "," class primary_key "," class unscoped ","attribute_names uniq! "," increment_lock "," send to_i "," class locking_column ","attribute_names empty? "," locking_enabled? "," connection update "," connection "," column_for_attribute "," class locking_column  + "," class connection update  == "," connection update  == "," class unscoped  where arel compile_update "," class unscoped  where arel "," class unscoped  where "," class unscoped  table [] eq and "," class unscoped  table [] eq "," class unscoped  table [] "," class unscoped  table "]}," ActiveRecord Inheritance ClassMethods subclass_from_attrs":{"type":"method","name":"subclass_from_attrs","children":[],"call":[" raise ","ActiveRecord SubclassNotFound  new "," name "," descendants include? "," descendants ","subclass_name safe_constantize ","subclass_name != ","subclass_name present? ","attrs with_indifferent_access [] "," inheritance_column ","attrs with_indifferent_access ","sub name == ","sub name "," subclasses detect "," subclasses ","subclass_name == ","subclass_name blank? ","subclass_name safe_constantize _name safe_constantize ","attrs with_indifferent_access []  safe_constantize ","subclass_name safe_constantize _name != ","attrs with_indifferent_access []  != ","subclass_name safe_constantize _name present? ","attrs with_indifferent_access []  present? "," subclass_name safe_constantize es detect "," subclass_name safe_constantize es ","subclass_name safe_constantize _name == ","attrs with_indifferent_access []  == ","subclass_name safe_constantize _name blank? ","attrs with_indifferent_access []  blank? "]}," ActiveRecord Inheritance ClassMethods using_single_table_inheritance?":{"type":"method","name":"using_single_table_inheritance?","children":[],"call":[" columns_hash include? "," inheritance_column "," columns_hash ","record [] present? ","record [] "," has_attribute? "," _has_attribute? "]}," ActiveRecord Inheritance ClassMethods discriminate_class_for_record":{"type":"method","name":"discriminate_class_for_record","children":[],"call":[" find_sti_class ","record [] "," inheritance_column "," using_single_table_inheritance? "]}," ActiveRecord Inheritance ClassMethods new":{"type":"method","name":"new","children":[],"call":["subclass new "," subclass_from_attrs ","(lvasgn :attrs\n  (send\n    (lvar :args) :first)) is_a? ","args first "," raise "," == "," abstract_class? "," subclass_from_attributes "," subclass_from_attributes? ","subclass != "," column_defaults "," base_class == "," base_class ","subclass nil? "," has_attribute? "," inheritance_column "," base_class? "," current_scope "," _has_attribute? "," subclass_from_attrs  new "," subclass_from_attributes  new ","  subclass_from_attrs _from_attrs ","  subclass_from_attributes _from_attrs "," subclass_from_args first  ","(lvasgn :args first \n  (send\n    (lvar :args) :first)) is_a? ","  subclass_from_attrs _from_attributes ","  subclass_from_attributes _from_attributes ","  subclass_from_attrs _from_attributes? ","  subclass_from_attributes _from_attributes? "," subclass_from_attrs  != "," subclass_from_attributes  != "," subclass_from_attrs  nil? "," subclass_from_attributes  nil? "]}," ActiveRecord TestFixtures after_teardown":{"type":"method","name":"after_teardown","children":[],"call":[" teardown_fixtures "]}," ActiveRecord TestFixtures before_setup":{"type":"method","name":"before_setup","children":[],"call":[" setup_fixtures "]}," ActiveRecord FixtureSet yaml_file_path":{"type":"method","name":"yaml_file_path","children":[],"call":[]}," ActiveRecord FixtureSet read_fixture_files":{"type":"method","name":"read_fixture_files","children":[],"call":[" fixtures []= ","ActiveRecord Fixture  new "," model_class "," fixtures ","fh each ","FixtureSet File  open ","yaml_files each ","(send\n  (send\n    (const nil :Dir) :[]\n    (dstr\n      (begin\n        (ivar :@path))\n      (str \"/**/*.yml\"))) :select) + "," yaml_file_path "," File  file? ","Dir  [] select ","Dir  [] ","(send\n  (send\n    (const nil :Dir) :[]\n    (dstr\n      (begin\n        (ivar :@path))\n      (str \"/{**,*}/*.yml\"))) :select) + ","fixtures []= ","yaml_files each_with_object ","(send\n  (send\n    (const nil :Dir) :[]\n    (dstr\n      (begin\n        (lvar :path))\n      (str \"/{**,*}/*.yml\"))) :select) + ","fh model_class ","fh ignored_fixtures "," ignored_fixtures "," default_fixture_model_class "," raise ","yaml_files empty? ","(send\n  (send\n    (const nil :Dir) :[]\n    (dstr\n      (begin\n        (ivar :@path))\n      (str \"/**/*.yml\"))) :select) +  each ","(send\n  (send\n    (const nil :Dir) :[]\n    (dstr\n      (begin\n        (ivar :@path))\n      (str \"/{**,*}/*.yml\"))) :select) +  each ","(send\n  (send\n    (const nil :Dir) :[]\n    (dstr\n      (begin\n        (lvar :path))\n      (str \"/{**,*}/*.yml\"))) :select) +  each ","(send\n  (send\n    (const nil :Dir) :[]\n    (dstr\n      (begin\n        (ivar :@path))\n      (str \"/**/*.yml\"))) :select) +  each_with_object ","(send\n  (send\n    (const nil :Dir) :[]\n    (dstr\n      (begin\n        (ivar :@path))\n      (str \"/{**,*}/*.yml\"))) :select) +  each_with_object ","(send\n  (send\n    (const nil :Dir) :[]\n    (dstr\n      (begin\n        (lvar :path))\n      (str \"/{**,*}/*.yml\"))) :select) +  each_with_object ","(send\n  (send\n    (const nil :Dir) :[]\n    (dstr\n      (begin\n        (ivar :@path))\n      (str \"/**/*.yml\"))) :select) +  empty? ","(send\n  (send\n    (const nil :Dir) :[]\n    (dstr\n      (begin\n        (ivar :@path))\n      (str \"/{**,*}/*.yml\"))) :select) +  empty? ","(send\n  (send\n    (const nil :Dir) :[]\n    (dstr\n      (begin\n        (lvar :path))\n      (str \"/{**,*}/*.yml\"))) :select) +  empty? "]}," ActiveRecord FixtureSet column_names":{"type":"method","name":"column_names","children":[],"call":["c name ","@connection columns collect ","@connection columns "]}," ActiveRecord FixtureSet inheritance_column_name":{"type":"method","name":"inheritance_column_name","children":[],"call":[" model_class inheritance_column "," model_class "]}," ActiveRecord FixtureSet timestamp_column_names":{"type":"method","name":"timestamp_column_names","children":[],"call":["(str \"created_at\") & "," column_names "]}," ActiveRecord FixtureSet has_primary_key_column?":{"type":"method","name":"has_primary_key_column?","children":[],"call":["c name == "," primary_key_name ","c name "," model_class columns any? "," model_class columns "," model_class "]}," ActiveRecord FixtureSet primary_key_name":{"type":"method","name":"primary_key_name","children":[],"call":[" model_class primary_key "," model_class "]}," ActiveRecord FixtureSet table_rows":{"type":"method","name":"table_rows","children":[],"call":["rows []= ","rows [] concat ","ActiveRecord FixtureSet  identify ","association association_foreign_key ","row [] "," primary_key_name ","association foreign_key ","targets map ","rows [] ","association join_table ","targets split ","targets is_a? ","row delete ","association name to_s ","association name ","row []= ","association foreign_type ","value sub! ","association options [] ","association options ","association name to_s != ","(or\n  (send\n    (send\n      (lvar :association) :options) :[]\n    (sym :foreign_key))\n  (dstr\n    (begin\n      (send\n        (lvar :association) :name))\n    (str \"_id\"))) to_s ","association macro ","reflection_class reflect_on_all_associations each ","reflection_class reflect_on_all_associations "," model_class ","row [] constantize "," inheritance_column_name ","row include? ","row include? ! "," has_primary_key_column? ","value == ","row each ","row key? "," timestamp_column_names each "," timestamp_column_names "," model_class record_timestamps "," model_class < ","fixture to_hash "," fixtures map "," fixtures "," table_name ","h []= ","Hash  new "," fixtures delete ","now to_s ","Time  now ","Time  now utc ","ActiveRecord Base  default_timezone == ","ActiveRecord Base  default_timezone "," add_join_records ","HasManyThroughProxy  new ","$LABEL == "," config default_timezone == "," config default_timezone "," config ","reflection_class _reflections values each ","reflection_class _reflections values ","reflection_class _reflections ","association active_record columns_hash [] type ","association active_record columns_hash [] ","association active_record columns_hash ","association active_record ","association polymorphic? ","reflection_class _reflections each_value "," primary_key_type ","value gsub ","value is_a? ","label to_s ","reflection_class columns_hash [] type ","reflection_class columns_hash [] ","reflection_class columns_hash ","reflection_class type_for_attribute type ","reflection_class type_for_attribute ","values fetch "," model_class defined_enums each "," model_class defined_enums ","TableRows  new to_hash ","TableRows  new "," fixtures except! "," ignored_fixtures ","fixture to_hash s []= ","fixture to_hash s [] concat ","fixture to_hash  [] ","targets split  map ","row delete  map ","fixture to_hash s [] ","targets split  split ","row delete  split ","targets split  is_a? ","row delete  is_a? ","fixture to_hash  delete ","fixture to_hash  []= ","row delete  sub! "," model_class  reflect_on_all_associations each "," model_class  reflect_on_all_associations ","fixture to_hash  [] constantize ","fixture to_hash  include? ","fixture to_hash  include? ! ","row delete  == ","fixture to_hash  each ","fixture to_hash  key? "," association join_table  ","now to_s  to_s ","Time  now  to_s ","Time  now utc  to_s ","Time  now to_s  ","Time  Time  now  ","Time  Time  now utc  ","Time  now to_s  utc ","Time  Time  now  utc ","Time  Time  now utc  utc ","reflection_class _reflections row delete s each "," model_class  _reflections values each ","reflection_class _reflections row delete s "," model_class  _reflections values "," model_class  _reflections ","reflection_class _reflections each_row delete  "," model_class  _reflections each_value ","row delete  gsub "," model_class  columns_hash [] type "," model_class  columns_hash [] "," model_class  columns_hash "," model_class  type_for_attribute type "," model_class  type_for_attribute ","row delete s fetch "]}," ActiveRecord FixtureSet size":{"type":"method","name":"size","children":[],"call":[" fixtures size "," fixtures "]}," ActiveRecord FixtureSet each":{"type":"method","name":"each","children":[],"call":[" fixtures each "," fixtures "]}," ActiveRecord FixtureSet []=":{"type":"method","name":"[]=","children":[],"call":[" fixtures []= "," fixtures "]}," ActiveRecord FixtureSet []":{"type":"method","name":"[]","children":[],"call":[" fixtures [] "," fixtures "]}," ActiveRecord FixtureSet initialize":{"type":"method","name":"initialize","children":[],"call":[" read_fixture_files "," class default_fixture_table_name "," class "," model_class table_name "," model_class "," model_class respond_to? "," model_class connection ","class_name constantize ","class_name is_a? ","class_name safe_constantize ","ActiveSupport Deprecation  warn "," model_class= "]}," ActiveRecord FixtureSet identify":{"type":"method","name":"identify","children":[],"call":["Zlib  crc32 % ","Zlib  crc32 ","label to_s ","Digest UUID  uuid_v5 ","column_type == "]}," ActiveRecord FixtureSet create_fixtures":{"type":"method","name":"create_fixtures","children":[],"call":[" cached_fixtures ","connection call "," cache_fixtures "," read_and_insert ","fixture_files_to_read any? "," fixture_is_cached? ","fixture_set_names reject ","ActiveRecord Base  connection "," lambda "," block_given? ","ClassCache  new "," Array map "," Array ","class_names stringify_keys! ","ActiveRecord Base  connection  call "," Array map  reject ","ActiveRecord Base  ActiveRecord Base  connection  ","ClassCache  new  stringify_keys! "]}," ActiveRecord FixtureSet instantiate_all_loaded_fixtures":{"type":"method","name":"instantiate_all_loaded_fixtures","children":[],"call":[" instantiate_fixtures "," all_loaded_fixtures each_value "," all_loaded_fixtures "]}," ActiveRecord FixtureSet instantiate_fixtures":{"type":"method","name":"instantiate_fixtures","children":[],"call":["object instance_variable_set ","fixture find ","fixture_set each "]}," ActiveRecord FixtureSet cache_fixtures":{"type":"method","name":"cache_fixtures","children":[],"call":[" cache_for_connection update "," cache_for_connection "]}," ActiveRecord FixtureSet cached_fixtures":{"type":"method","name":"cached_fixtures","children":[],"call":[" cache_for_connection values "," cache_for_connection "," cache_for_connection values_at "]}," ActiveRecord FixtureSet fixture_is_cached?":{"type":"method","name":"fixture_is_cached?","children":[],"call":[" cache_for_connection [] "," cache_for_connection "]}," ActiveRecord FixtureSet cache_for_connection":{"type":"method","name":"cache_for_connection","children":[],"call":["@@all_cached_fixtures [] "]}," ActiveRecord FixtureSet reset_cache":{"type":"method","name":"reset_cache","children":[],"call":["@@all_cached_fixtures clear "]}," ActiveRecord FixtureSet default_fixture_table_name":{"type":"method","name":"default_fixture_table_name","children":[],"call":["(dstr\n  (begin\n    (send\n      (lvar :config) :table_name_prefix))) to_sym ","config table_name_suffix ","fixture_set_name tr ","config table_name_prefix "]}," ActiveRecord FixtureSet default_fixture_model_name":{"type":"method","name":"default_fixture_model_name","children":[],"call":["fixture_set_name camelize ","fixture_set_name singularize camelize ","fixture_set_name singularize ","config pluralize_table_names "]}," ActiveRecord FixtureSet find_table_name":{"type":"method","name":"find_table_name","children":[],"call":[]}," ActiveRecord FixtureSet File validate":{"type":"method","name":"validate","children":[],"call":[" raise ","Hash  === ","data all? ","YAML Omap  === ","invalid keys inspect ","invalid keys ","invalid any? ","data reject "]}," ActiveRecord FixtureSet File render":{"type":"method","name":"render","children":[],"call":["ERB  new result ","ERB  new ","context get_binding ","ActiveRecord FixtureSet RenderContext  create_subclass new ","ActiveRecord FixtureSet RenderContext  create_subclass "," prepare_erb result "," prepare_erb ","ActiveRecord FixtureSet RenderContext  create_subclass new  get_binding "]}," ActiveRecord FixtureSet File rows":{"type":"method","name":"rows","children":[],"call":[" validate to_a "," validate "," raise ","error backtrace ","error class ","YAML  load "," render ","IO  read ","fixture_name == "," raw_rows reject "," raw_rows "]}," ActiveRecord FixtureSet File each":{"type":"method","name":"each","children":[],"call":[" rows each "," rows "]}," ActiveRecord FixtureSet File initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord FixtureSet File open":{"type":"method","name":"open","children":[],"call":[]}," ActiveRecord ExplainSubscriber finish":{"type":"method","name":"finish","children":[],"call":["ExplainRegistry  queries << ","payload values_at ","ExplainRegistry  queries "," ignore_payload? ! "," ignore_payload? ","ExplainRegistry  collect? ","queries << ","Thread  current [] ","Thread  current ","ExplainRegistry  Thread  current []  << ","ExplainRegistry  Thread  current []  ","Thread  current []  << "]}," ActiveRecord ExplainSubscriber start":{"type":"method","name":"start","children":[],"call":[]}," ActiveRecord ExplainRegistry reset":{"type":"method","name":"reset","children":[],"call":[]}," ActiveRecord ExplainRegistry collect?":{"type":"method","name":"collect?","children":[],"call":[]}," ActiveRecord ExplainRegistry initialize":{"type":"method","name":"initialize","children":[],"call":[" reset "]}," ActiveRecord StatementInvalid initialize":{"type":"method","name":"initialize","children":[],"call":["$! try ","ActiveSupport Deprecation  warn "," caller "]}," ActiveRecord DynamicMatchers FindByBang finder":{"type":"method","name":"finder","children":[],"call":[]}," ActiveRecord DynamicMatchers FindByBang suffix":{"type":"method","name":"suffix","children":[],"call":[]}," ActiveRecord DynamicMatchers FindByBang prefix":{"type":"method","name":"prefix","children":[],"call":[]}," ActiveRecord DynamicMatchers FindBy finder":{"type":"method","name":"finder","children":[],"call":[]}," ActiveRecord DynamicMatchers FindBy prefix":{"type":"method","name":"prefix","children":[],"call":[]}," ActiveRecord DynamicMatchers Finder finder":{"type":"method","name":"finder","children":[],"call":[" raise "]}," ActiveRecord DynamicMatchers Finder attributes_hash":{"type":"method","name":"attributes_hash","children":[],"call":["{ + + ","{ + ","(send\n  (send nil :attribute_names) :map) join "," attribute_names map "," attribute_names "]}," ActiveRecord DynamicMatchers Finder signature":{"type":"method","name":"signature","children":[],"call":[" attribute_names join "," attribute_names ","(send\n  (send nil :attribute_names) :map) join "," attribute_names map "]}," ActiveRecord DynamicMatchers Finder result":{"type":"method","name":"result","children":[],"call":[" attributes_hash "," finder "]}," ActiveRecord DynamicMatchers Finder body":{"type":"method","name":"body","children":[],"call":[" result "]}," ActiveRecord DynamicMatchers Method body":{"type":"method","name":"body","children":[],"call":[" raise "," attributes_hash "," finder "]}," ActiveRecord DynamicMatchers Method define":{"type":"method","name":"define","children":[],"call":[" model class_eval ","64 + "," body "," signature "," name "," model ","68 + ","63 + "]}," ActiveRecord DynamicMatchers Method valid?":{"type":"method","name":"valid?","children":[],"call":[" model reflect_on_aggregation ","name to_sym "," model "," model columns_hash [] "," model columns_hash "," attribute_names all? "," attribute_names "]}," ActiveRecord DynamicMatchers Method initialize":{"type":"method","name":"initialize","children":[],"call":["@model attribute_aliases [] ","@model attribute_aliases ","@attribute_names map! ","@name match [] split ","@name match [] ","@name match "," class pattern "," class ","name to_s ","method_name to_s ","@name match [] split  map! ","name to_s  match [] split ","method_name to_s  match [] split ","name to_s  match [] ","method_name to_s  match [] ","name to_s  match ","method_name to_s  match "]}," ActiveRecord DynamicMatchers Method suffix":{"type":"method","name":"suffix","children":[],"call":[]}," ActiveRecord DynamicMatchers Method prefix":{"type":"method","name":"prefix","children":[],"call":[" raise "]}," ActiveRecord DynamicMatchers Method pattern":{"type":"method","name":"pattern","children":[],"call":[" suffix "," prefix "]}," ActiveRecord DynamicMatchers Method match":{"type":"method","name":"match","children":[],"call":["klass new ","name =~ ","k pattern "," matchers find "," matchers ","k pattern match? "]}," ActiveRecord CounterCache ClassMethods decrement_counter":{"type":"method","name":"decrement_counter","children":[],"call":[" update_counters ","by -@ "]}," ActiveRecord CounterCache ClassMethods increment_counter":{"type":"method","name":"increment_counter","children":[],"call":[" update_counters "]}," ActiveRecord CounterCache ClassMethods update_counters":{"type":"method","name":"update_counters","children":[],"call":[" where update_all ","updates join "," where "," primary_key ","value abs "," connection quote_column_name "," connection ","value < ","counters map "," unscoped where update_all "," unscoped where "," unscoped ","updates << "," sanitize_sql_for_assignment ","touch_updates empty? "," touch_updates ","counters delete "," touch_attributes_with_time ","touch != ","relation update_all "," unscoped where! "," == ","id klass ","id is_a? "," unscoped where! update_counters "," touch_updates  empty? "," touch_attributes_with_time  empty? ","counters delete _updates empty? ","  touch_updates  ","  touch_attributes_with_time  "," counters delete _updates "," counters delete _attributes_with_time ","counters delete  != "," unscoped where!  update_all "]}," ActiveRecord CounterCache ClassMethods reset_counters":{"type":"method","name":"reset_counters","children":[],"call":[" connection update "," connection "," unscoped where arel compile_update ","object send count ","object send "," arel_table [] "," arel_table "," unscoped where arel "," unscoped where "," arel_table [] eq ","object id "," primary_key "," unscoped ","reflection counter_cache_column ","e options [] present? ","e options [] ","e options ","e foreign_key to_s == ","e foreign_key to_s ","e foreign_key ","belongs_to find ","child_class reflect_on_all_associations ","has_many_association klass ","has_many_association foreign_key to_s ","has_many_association foreign_key ","has_many_association through_reflection ","has_many_association is_a? "," raise "," name "," reflect_on_association ","association to_sym ","counters each "," find ","belongs_to == ","e macro ","child_class _reflections values find ","child_class _reflections values ","child_class _reflections "," _reflect_on_association ","e belongs_to? ","has_many_association plural_name ","association counter_cache_column to_sym == ","counter_association to_sym ","association counter_cache_column to_sym ","association counter_cache_column ","has_many find "," reflect_on_all_associations "," unscoped where update_all ","updates merge! "," touch_updates ","counter_name to_sym "," touch_attributes_with_time ","touch != ","names extract_options! ","Array  wrap ","updates any? ","updates []= ","count != "," find  send count ","object send object send count  "," find  send "," find  id ","reflection object send count er_cache_column ","e names extract_options!  [] present? ","e names extract_options!  [] ","e names extract_options!  ","e has_many_association foreign_key to_s  to_s == ","e has_many_association foreign_key to_s  to_s ","e has_many_association foreign_key to_s  ","child_class reflect_on_all_associations  find ","has_many_association klass  reflect_on_all_associations ","has_many_association through_reflection  klass "," reflect_on_association  klass "," _reflect_on_association  klass "," reflect_on_all_associations _association klass ","has_many_association has_many_association foreign_key to_s  to_s ","has_many_association through_reflection  foreign_key to_s "," reflect_on_association  foreign_key to_s "," _reflect_on_association  foreign_key to_s "," reflect_on_all_associations _association foreign_key to_s ","has_many_association has_many_association foreign_key to_s  ","has_many_association through_reflection  foreign_key "," reflect_on_association  foreign_key "," _reflect_on_association  foreign_key "," reflect_on_all_associations _association foreign_key ","has_many_association through_reflection  through_reflection "," reflect_on_association  through_reflection "," _reflect_on_association  through_reflection "," reflect_on_all_associations _association through_reflection ","has_many_association through_reflection  is_a? "," reflect_on_association  is_a? "," _reflect_on_association  is_a? "," reflect_on_all_associations _association is_a? ","object send count ers each ","child_class reflect_on_all_associations  == ","has_many_association klass  _reflections values find ","has_many_association klass  _reflections values ","has_many_association klass  _reflections ","e child_class reflect_on_all_associations ? ","has_many_association through_reflection  plural_name "," reflect_on_association  plural_name "," _reflect_on_association  plural_name "," reflect_on_all_associations _association plural_name ","association object send count er_cache_column to_sym == ","has_many_association plural_name  to_sym ","object send count er_association to_sym ","association object send count er_cache_column to_sym ","association object send count er_cache_column "," reflect_on_all_associations  find ","  touch_attributes_with_time  ","reflection counter_cache_column  to_sym ","object send count er_name to_sym ","names extract_names extract_options! ! ","Array  wrap  extract_options! ","object send count  != "]}," ActiveRecord Core init_changed_attributes":{"type":"method","name":"init_changed_attributes","children":[],"call":["@changed_attributes []= "," _field_changed? ","@attributes [] ","c default ","c name "," class columns each "," class columns "," class "," changed_attributes []= "," changed_attributes "]}," ActiveRecord Core init_internals":{"type":"method","name":"init_internals","children":[],"call":["@attributes []= ","@attributes key? "," class primary_key "," class ","@attributes ensure_initialized "," class define_attribute_methods "," class strict_loading_by_default ","klass define_attribute_methods ","klass strict_loading_by_default ","klass primary_key ","klass generate_alias_attributes "," class  define_attribute_methods "," class  strict_loading_by_default "," class  primary_key "," class  generate_alias_attributes "]}," ActiveRecord Core to_ary":{"type":"method","name":"to_ary","children":[],"call":[]}," ActiveRecord Core update_attributes_from_transaction_state":{"type":"method","name":"update_attributes_from_transaction_state","children":[],"call":[" update_attributes_from_transaction_state ","depth + ","transaction_state parent ","@reflects_state [] ! ","@reflects_state [] ","@reflects_state []= "," rolledback! ","transaction_state rolledback? "," committed! ","transaction_state committed? "," has_transactional_callbacks? ! "," has_transactional_callbacks? "," clear_transaction_record_state "," restore_transaction_record_state ","transaction_state finalized? ","depth == "]}," ActiveRecord Core sync_with_transaction_state":{"type":"method","name":"sync_with_transaction_state","children":[],"call":[" update_attributes_from_transaction_state "]}," ActiveRecord Core has_transactional_callbacks?":{"type":"method","name":"has_transactional_callbacks?","children":[],"call":[" _create_callbacks empty? ! "," _create_callbacks empty? "," _create_callbacks "," _commit_callbacks empty? ! "," _commit_callbacks empty? "," _commit_callbacks "," _rollback_callbacks empty? ! "," _rollback_callbacks empty? "," _rollback_callbacks "]}," ActiveRecord Core set_transaction_state":{"type":"method","name":"set_transaction_state","children":[],"call":[]}," ActiveRecord Core slice":{"type":"method","name":"slice","children":[],"call":["Hash  [] with_indifferent_access ","Hash  [] "," public_send ","methods map ","methods map! ","methods flatten map! ","methods flatten ","(send\n  (send\n    (lvar :methods) :flatten) :index_with) with_indifferent_access ","methods flatten index_with "]}," ActiveRecord Core inspect":{"type":"method","name":"inspect","children":[],"call":[" class ","(send\n  (send\n    (send\n      (self) :class) :column_names) :collect) compact join ","(send\n  (send\n    (send\n      (self) :class) :column_names) :collect) compact "," attribute_for_inspect "," has_attribute? "," class column_names collect "," class column_names ","(send\n  (send\n    (send\n      (self) :class) :attribute_names) :collect) compact join ","(send\n  (send\n    (send\n      (self) :class) :attribute_names) :collect) compact "," class attribute_names collect "," class attribute_names "," inspection_filter filter_param "," inspection_filter "," format_for_inspect ","attr inspect ","attr nil? "," _read_attribute "," _has_attribute? ","(send\n  (send\n    (send\n      (self) :class) :attribute_names) :filter_map) join "," class attribute_names filter_map ","(send\n  (send nil :attribute_names) :filter_map) join "," attribute_names filter_map "," attribute_names ","  format_for_inspect ibute_for_inspect ","  _read_attribute ibute_for_inspect "," has_ format_for_inspect ibute? "," has_ _read_attribute ibute? ","(send\n  (send\n    (send\n      (self) :class) : format_for_inspect ibute_names) :collect) compact join ","(send\n  (send\n    (send\n      (self) :class) : _read_attribute ibute_names) :collect) compact join ","(send\n  (send\n    (send\n      (self) :class) : format_for_inspect ibute_names) :collect) compact ","(send\n  (send\n    (send\n      (self) :class) : _read_attribute ibute_names) :collect) compact "," class  format_for_inspect ibute_names collect "," class  _read_attribute ibute_names collect "," class  format_for_inspect ibute_names "," class  _read_attribute ibute_names "," (send\n  (send\n    (send\n      (self) :class) :column_names) :collect) compact join _filter filter_param "," (send\n  (send\n    (send\n      (self) :class) :attribute_names) :collect) compact join _filter filter_param "," (send\n  (send\n    (send\n      (self) :class) :attribute_names) :filter_map) join _filter filter_param "," (send\n  (send nil :attribute_names) :filter_map) join _filter filter_param "," (send\n  (send\n    (send\n      (self) :class) :column_names) :collect) compact join _filter "," (send\n  (send\n    (send\n      (self) :class) :attribute_names) :collect) compact join _filter "," (send\n  (send\n    (send\n      (self) :class) :attribute_names) :filter_map) join _filter "," (send\n  (send nil :attribute_names) :filter_map) join _filter "," format_for_inspect  inspect "," _read_attribute  inspect "," format_for_inspect  nil? "," _read_attribute  nil? "," _read_ format_for_inspect ibute "," _read_ _read_attribute ibute "," _has_ format_for_inspect ibute? "," _has_ _read_attribute ibute? ","(send\n  (send\n    (send\n      (self) :class) : format_for_inspect ibute_names) :filter_map) join ","(send\n  (send\n    (send\n      (self) :class) : _read_attribute ibute_names) :filter_map) join "," class  format_for_inspect ibute_names filter_map "," class  _read_attribute ibute_names filter_map ","(send\n  (send nil : format_for_inspect ibute_names) :filter_map) join ","(send\n  (send nil : _read_attribute ibute_names) :filter_map) join ","  format_for_inspect ibute_names filter_map ","  _read_attribute ibute_names filter_map ","  format_for_inspect ibute_names ","  _read_attribute ibute_names "]}," ActiveRecord Core connection_handler":{"type":"method","name":"connection_handler","children":[],"call":[" class connection_handler "," class "]}," ActiveRecord Core connection":{"type":"method","name":"connection","children":[],"call":[" class connection "," class ","ActiveSupport Deprecation  warn "]}," ActiveRecord Core readonly!":{"type":"method","name":"readonly!","children":[],"call":[]}," ActiveRecord Core readonly?":{"type":"method","name":"readonly?","children":[],"call":[]}," ActiveRecord Core <=>":{"type":"method","name":"<=>","children":[],"call":[" to_key <=> ","other_object to_key "," to_key ","other_object is_a? "," class "]}," ActiveRecord Core frozen?":{"type":"method","name":"frozen?","children":[],"call":["@attributes frozen? "," sync_with_transaction_state "]}," ActiveRecord Core freeze":{"type":"method","name":"freeze","children":[],"call":["@attributes clone freeze ","@attributes clone ","@attributes freeze ","@attributes clone freeze  clone freeze ","@attributes clone freeze  clone ","@attributes clone freeze  freeze "]}," ActiveRecord Core hash":{"type":"method","name":"hash","children":[],"call":[" id hash "," id "," class hash ^ "," class hash "," class ","id hash "," primary_key_values_present? ","  id  hash ","  id  "," id  hash "]}," ActiveRecord Core ==":{"type":"method","name":"==","children":[],"call":["comparison_object id == "," id ","comparison_object id "," id present? ","comparison_object instance_of? "," class "," id nil? ! "," id nil? "," primary_key_values_present? "]}," ActiveRecord Core encode_with":{"type":"method","name":"encode_with","children":[],"call":["coder []= "," attributes "," attributes_for_coder "," new_record? "," attributes_before_type_cast "," class yaml_encoder encode "," class yaml_encoder "," class "]}," ActiveRecord Core initialize_dup":{"type":"method","name":"initialize_dup","children":[],"call":[" ensure_proper_type "," init_changed_attributes "," run_callbacks "," _initialize_callbacks empty? "," _initialize_callbacks ","@attributes []= "," class primary_key "," class "," class initialize_attributes ","other clone_attributes ","@changed_attributes []= "," _field_changed? ","@attributes [] "," class column_defaults each "," class column_defaults "," _run_initialize_callbacks ","@attributes reset ","@attributes dup ","@attributes deep_dup ","@primary_key each "," class composite_primary_key? ","@attributes dup  []= ","@attributes deep_dup  []= ","@attributes dup  [] ","@attributes deep_dup  [] ","@attributes dup  reset ","@attributes deep_dup  reset ","@attributes dup  dup ","@attributes deep_dup  dup ","@attributes dup  deep_dup ","@attributes deep_dup  deep_dup "]}," ActiveRecord Core init_with":{"type":"method","name":"init_with","children":[],"call":[" run_callbacks "," init_internals "," class column_types merge ","coder [] "," class column_types "," class "," class initialize_attributes "," class define_attribute_methods "," _run_initialize_callbacks "," _run_find_callbacks ","LegacyYamlAdapter  convert "," block_given? "," class yaml_encoder decode "," class yaml_encoder "," init_with_attributes ","LegacyYamlAdapter  convert  [] "," class initialize_ class yaml_encoder decode  "," class yaml_enLegacyYamlAdapter  convert  decode "," class yaml_enLegacyYamlAdapter  convert  "," init_with_ class yaml_encoder decode  "]}," ActiveRecord Core initialize":{"type":"method","name":"initialize","children":[],"call":[" run_callbacks "," _initialize_callbacks empty? "," _initialize_callbacks "," block_given? "," assign_attributes "," populate_with_current_scope_attributes "," ensure_proper_type "," init_changed_attributes "," init_internals "," class column_types dup "," class column_types "," class "," class initialize_attributes ","defaults []= ","v dup ","v duplicable? ","defaults each "," class column_defaults dup "," class column_defaults "," init_attributes "," initialize_internals_callback "," _run_initialize_callbacks "," class define_attribute_methods "," class _default_attributes dup "," class _default_attributes "," class default_attributes dup "," class default_attributes "," class _default_attributes deep_dup "," class column_defaults dup  []= "," class column_defaults dup  each "," class column_ class column_defaults dup  dup "," class column_ class column_defaults dup  "]}," ActiveRecord Core ClassMethods relation":{"type":"method","name":"relation","children":[],"call":["relation where create_with "," sti_name "," inheritance_column to_sym "," inheritance_column ","relation where "," type_condition "," finder_needs_type_condition? ","Relation  new "," arel_table ","Relation  create "," ignore_default_scope? ! "," ignore_default_scope? "," predicate_builder "," inheritance_column to_s ","relation create_with! ","relation where! ","Relation  new  where create_with ","Relation  create  where create_with ","Relation  new  where ","Relation  create  where ","Relation  new  create_with! ","Relation  create  create_with! ","Relation  new  where! ","Relation  create  where! "]}," ActiveRecord Core ClassMethods arel_engine":{"type":"method","name":"arel_engine","children":[],"call":[" superclass arel_engine "," superclass "," connection_handler retrieve_connection_pool "," connection_handler ","Base  == "," connection_specification_name "]}," ActiveRecord Core ClassMethods arel_table":{"type":"method","name":"arel_table","children":[],"call":["Arel Table  new "," arel_engine "," table_name "," type_caster "]}," ActiveRecord Core ClassMethods ===":{"type":"method","name":"===","children":[],"call":["object is_a? "]}," ActiveRecord Core ClassMethods inspect":{"type":"method","name":"inspect","children":[],"call":["(send\n  (send nil :columns) :map) * ","c type ","c name "," columns map "," columns "," table_exists? "," abstract_class? "," == "," connected? ! "," connected? ","(send\n  (send nil :attribute_types) :map) * ","type type "," attribute_types map "," attribute_types "]}," ActiveRecord Core ClassMethods generated_feature_methods":{"type":"method","name":"generated_feature_methods","children":[],"call":[" include "," const_set ","Module  new "]}," ActiveRecord Core ClassMethods initialize_generated_modules":{"type":"method","name":"initialize_generated_modules","children":[{"type":"method","name":"const_missing","children":[],"asgn":[],"call":[]}],"call":[" generated_feature_methods "," generated_attribute_methods const_set "," const_set ","(send\n  (send\n    (lvar :name) :to_s) :sub\n  (regexp\n    (str \"ATTR_\")\n    (regopt))\n  (str \"\")) pack freeze ","(send\n  (send\n    (lvar :name) :to_s) :sub\n  (regexp\n    (str \"ATTR_\")\n    (regopt))\n  (str \"\")) pack ","name to_s sub ","name to_s ","Module  new "," generated_attribute_methods ","Mutex  new "," generated_association_methods "]}," ActiveRecord Core ClassMethods inherited":{"type":"method","name":"inherited","children":[],"call":["child_class initialize_generated_modules ","child_class initialize_find_by_cache ","klass superclass ","klass initialize_find_by_cache ","klass base_class? ","child_class base_class? ","subclass class_eval ","subclass base_class? ","subclass initialize_find_by_cache ","klass superclass  superclass ","klass superclass  initialize_find_by_cache ","klass superclass  base_class? "]}," ActiveRecord Core connection_handler=":{"type":"method","name":"connection_handler=","children":[],"call":[]}," ActiveRecord ConnectionHandling clear_cache!":{"type":"method","name":"clear_cache!","children":[],"call":[" connection schema_cache clear! "," connection schema_cache "," connection "]}," ActiveRecord ConnectionHandling remove_connection":{"type":"method","name":"remove_connection","children":[],"call":[" connection_handler remove_connection "," connection_handler "," connection_specification_name= "," connection_handler retrieve_connection_pool "," connection_handler remove_connection_pool "," current_shard "," current_role ","ActiveRecord  deprecator warn ","(str \"          The name argument for `#remove_connection` is deprecated without replacement\\n\") squish ","ActiveRecord  deprecator "]}," ActiveRecord ConnectionHandling connected?":{"type":"method","name":"connected?","children":[],"call":[" connection_handler connected? "," connection_handler "," connection_specification_name "," current_shard "," current_role "]}," ActiveRecord ConnectionHandling retrieve_connection":{"type":"method","name":"retrieve_connection","children":[],"call":[" connection_handler retrieve_connection "," connection_handler "," connection_specification_name "," current_shard "," current_role "]}," ActiveRecord ConnectionHandling connection_pool":{"type":"method","name":"connection_pool","children":[],"call":[" raise "," connection_handler retrieve_connection_pool "," connection_handler "," connection_specification_name "," current_shard "," current_role "]}," ActiveRecord ConnectionHandling connection_config":{"type":"method","name":"connection_config","children":[],"call":[" connection_pool spec config "," connection_pool spec "," connection_pool "," connection_pool db_config configuration_hash "," connection_pool db_config "]}," ActiveRecord ConnectionHandling connection_id=":{"type":"method","name":"connection_id=","children":[],"call":["ActiveRecord RuntimeRegistry  connection_id= ","Thread  current []= ","Thread  current "]}," ActiveRecord ConnectionHandling connection_id":{"type":"method","name":"connection_id","children":[],"call":["ActiveRecord RuntimeRegistry  connection_id ","Thread  current [] ","Thread  current ","Thread  current object_id "]}," ActiveRecord ConnectionHandling connection":{"type":"method","name":"connection","children":[],"call":[" retrieve_connection "]}," ActiveRecord ConnectionHandling establish_connection":{"type":"method","name":"establish_connection","children":[],"call":[" connection_handler establish_connection "," connection_handler "," remove_connection "," raise ","spec config [] ","spec config "," respond_to? ","spec adapter_method ","resolver spec ","ConnectionAdapters ConnectionSpecification Resolver  new "," configurations ","DEFAULT_ENV  call to_sym ","DEFAULT_ENV  call "," connection_specification_name= ","spec name "," name "," == ","spec []= ","resolver resolve symbolize_keys ","resolver resolve ","Base  configurations "," resolve_config_for_connection "," current_shard "," current_role ","resolver spec  config [] ","resolver resolve symbolize_keys  config [] ","resolver spec  config ","resolver resolve symbolize_keys  config ","resolver spec  adapter_method ","resolver resolve symbolize_keys  adapter_method ","resolver resolver spec  ","resolver resolver resolve symbolize_keys  ","ConnectionAdapters ConnectionSpecification Resolver  new  spec "," connection_resolver spec ification_name= "," connection_resolver resolve symbolize_keys ification_name= ","resolver spec  name ","resolver resolve symbolize_keys  name ","resolver spec  []= ","resolver resolve symbolize_keys  []= ","ConnectionAdapters ConnectionSpecification Resolver  new  resolve symbolize_keys ","ConnectionAdapters ConnectionSpecification Resolver  new  resolve "]}," ActiveRecord ConnectionAdapters SQLite3Adapter translate_exception":{"type":"method","name":"translate_exception","children":[],"call":["RecordNotUnique  new ","exception message ","InvalidForeignKey  new ","NotNullViolation  new ","ConnectionNotEstablished  new ","exception message match? "]}," ActiveRecord ConnectionAdapters SQLite3Adapter default_primary_key_type":{"type":"method","name":"default_primary_key_type","children":[],"call":[" supports_autoincrement? "]}," ActiveRecord ConnectionAdapters SQLite3Adapter sqlite_version":{"type":"method","name":"sqlite_version","children":[],"call":["SQLite3Adapter Version  new "," select_value "," query_value "]}," ActiveRecord ConnectionAdapters SQLite3Adapter copy_table_contents":{"type":"method","name":"copy_table_contents","children":[],"call":[" exec_query ","sql << ","column_values * "," quote ","raw_column_mappings [] ","row [] ","column_mappings [] ","columns map "," exec_query each "," quote_table_name ","Hash  [] ","c name "," columns map "," columns ","(send\n  (lvar :columns) :map) * "," quote_column_name ","from_columns include? ","columns find_all ","col name "," columns collect ","column_mappings []= ","a first ","a last ","rename each ","(send\n  (lvar :from_columns_to_copy) :map) * ","from_columns_to_copy map "," internal_exec_query ","Hash  []  [] ","raw_Hash  []  [] "," columns collect  include? ","Hash  []  []= ","(send\n  (lvar : columns collect _to_copy) :map) * "," columns collect _to_copy map "]}," ActiveRecord ConnectionAdapters SQLite3Adapter copy_table_indexes":{"type":"method","name":"copy_table_indexes","children":[],"call":[" add_index ","opts []= ","index unique ","name gsub ","columns empty? ","to_column_names include? ","(send\n  (send\n    (lvar :index) :columns) :map) select ","rename [] ","index columns map ","index columns ","c name "," columns map "," columns ","name [] ","from == ","to == ","index name "," indexes each "," indexes ","index where ","name starts_with? ","(send\n  (lvar :columns) :map) select ","columns map ","columns is_a? ","options []= ","index orders ","name []  gsub ","index name  gsub ","index columns  empty? ","to_column_name [] s include? ","to_column_index name s include? "," columns map  include? ","(send\n  (send\n    (lvar :index) :index columns ) :map) select ","rename []  [] ","reindex name  [] ","index index columns  map ","index index columns  ","c name []  ","c index name  "," index columns  map "," index columns  ","name []  [] ","index name  [] ","index name []  ","index index name  ","name []  starts_with? ","index name  starts_with? ","(send\n  (lvar :index columns ) :map) select ","index columns  map ","index columns  is_a? "]}," ActiveRecord ConnectionAdapters SQLite3Adapter copy_table":{"type":"method","name":"copy_table","children":[],"call":[" copy_table_contents ","options [] ","column name ","@definition columns map ","@definition columns "," copy_table_indexes "," block_given? ","@definition column ","column null ","column scale ","column precision ","column default ","column limit ","column type ","column_name == ","options [] [] ","column name to_sym "," columns each "," columns ","@definition primary_key ","from_primary_key present? "," create_table ","options []= "," primary_key ","column collation ","@definition primary_keys ","from_primary_key is_a? ","type deserialize "," lookup_cast_type_from_column ","column has_default? ","column default_function "," lambda ","default nil? ","column bigint? ","column_options []= ","column auto_increment? ","column type deserialize  ","column  lookup_cast_type_from_column  ","column name  == "," primary_key  present? "," primary_key  is_a? "," lookup_cast_type_from_column  deserialize "," lookup_cast_ lookup_cast_type_from_column _from_column ","column has_type deserialize ? ","column type deserialize _function ","type deserialize  nil? "]}," ActiveRecord ConnectionAdapters SQLite3Adapter move_table":{"type":"method","name":"move_table","children":[],"call":[" drop_table "," copy_table "]}," ActiveRecord ConnectionAdapters SQLite3Adapter alter_table":{"type":"method","name":"alter_table","children":[],"call":[" move_table ","options merge "," transaction "," block_given? "," lambda "," disable_referential_integrity ","definition foreign_key ","fk options "," strip_table_name_prefix_and_suffix ","fk to_table ","fk options []= ","rename [] ","fk options [] ","foreign_keys each ","options [] "," foreign_keys ","definition check_constraint ","chk options ","chk expression ","check_constraints each ","fk  strip_table_name_prefix_and_suffix  "," foreign_keys  each ","  foreign_keys  "]}," ActiveRecord ConnectionAdapters SQLite3Adapter select":{"type":"method","name":"select","children":[],"call":[" exec_query "]}," ActiveRecord ConnectionAdapters SQLite3Adapter rename_column":{"type":"method","name":"rename_column","children":[],"call":[" rename_column_indexes "," alter_table ","new_column_name to_s ","column_name to_s "," raise ","c name == ","c name "," columns detect "," columns ","column name "," column_for "," rename_ column_for _indexes ","new_ column_for _name to_s "," column_for _name to_s ","  column_for s detect ","  column_for s "," column_for  name ","  column_for _for "]}," ActiveRecord ConnectionAdapters SQLite3Adapter change_column":{"type":"method","name":"change_column","children":[],"call":[" scale= ","options [] ","options include? "," precision= "," null= "," default= "," limit= "," type= ","definition [] instance_eval ","definition [] "," options_include_default? "," alter_table "," collation= "," options merge! "," options "," aliased_types ","type to_s ","definition change_column "," options_ options_include_default? ? "]}," ActiveRecord ConnectionAdapters SQLite3Adapter change_column_null":{"type":"method","name":"change_column_null","children":[],"call":["definition [] null= ","definition [] "," alter_table "," exec_query "," quote_column_name "," quote "," quote_table_name ","default nil? "," internal_exec_query "," validate_change_column_null_argument! "]}," ActiveRecord ConnectionAdapters SQLite3Adapter change_column_default":{"type":"method","name":"change_column_default","children":[],"call":["definition [] default= ","definition [] "," alter_table "," extract_new_default_value ","definition []  extract_new_default_value = "," extract_new_ extract_new_default_value _value "]}," ActiveRecord ConnectionAdapters SQLite3Adapter remove_column":{"type":"method","name":"remove_column","children":[],"call":["definition remove_column "," alter_table ","definition columns delete ","definition [] ","definition columns ","fk_options [] == ","column_name to_s ","fk_options [] ","definition foreign_keys delete_if ","definition foreign_keys ","fk column == ","fk column "]}," ActiveRecord ConnectionAdapters SQLite3Adapter add_column":{"type":"method","name":"add_column","children":[],"call":["definition column "," alter_table "," valid_alter_table_options "," supports_add_column? "," valid_alter_table_type? ","options [] ! ","options [] "," invalid_alter_table_type? "]}," ActiveRecord ConnectionAdapters SQLite3Adapter valid_alter_table_options":{"type":"method","name":"valid_alter_table_options","children":[],"call":["type to_sym != ","type to_sym "]}," ActiveRecord ConnectionAdapters SQLite3Adapter rename_table":{"type":"method","name":"rename_table","children":[],"call":[" rename_table_indexes "," exec_query "," quote_table_name "," schema_cache clear_data_source_cache! ","new_name to_s "," schema_cache ","table_name to_s "," validate_table_length! ","options [] "]}," ActiveRecord ConnectionAdapters SQLite3Adapter remove_index!":{"type":"method","name":"remove_index!","children":[],"call":[" exec_query "," quote_column_name "]}," ActiveRecord ConnectionAdapters SQLite3Adapter primary_key":{"type":"method","name":"primary_key","children":[],"call":["column [] ","field [] == ","field [] "," table_structure find "," table_structure ","pks [] [] ","pks [] ","pks count == ","pks count ","f [] > ","f [] "," table_structure select "]}," ActiveRecord ConnectionAdapters SQLite3Adapter indexes":{"type":"method","name":"indexes","children":[],"call":["IndexDefinition  new ","col [] "," exec_query map "," exec_query ","row [] ","row [] != "," quote_table_name ","match [] ","(str \"\\\\sWHERE\\\\s+(.+)$\") match "," exec_query first [] "," exec_query first "," quote ","ActiveSupport Deprecation  warn ","            Passing name to #indexes is deprecated without replacement.\n squish ","(str \"\\sWHERE\\s+(.+)$\") match  [] ","(str \"\\\\sWHERE\\\\s+(.+)$\") (str \"\\sWHERE\\s+(.+)$\") match  "]}," ActiveRecord ConnectionAdapters SQLite3Adapter columns":{"type":"method","name":"columns","children":[],"call":["SQLite3Column  new ","field [] to_i == ","field [] to_i ","field [] ","field []= ","1 gsub "," table_structure map "," table_structure "," new_column "," lookup_cast_type "," fetch_type_metadata ","table_name to_s "," lookup_ lookup_cast_type  "," fetch_ fetch_type_metadata  ","table_name to_s  to_s "]}," ActiveRecord ConnectionAdapters SQLite3Adapter table_exists?":{"type":"method","name":"table_exists?","children":[],"call":[" tables any? "," tables "," data_source_exists? ","ActiveSupport Deprecation  warn ","(str \"          #table_exists? currently checks both tables and views.\\n\") squish "," select_values any? "," select_values ","sql << "," quote ","table_name present? "]}," ActiveRecord ConnectionAdapters SQLite3Adapter tables":{"type":"method","name":"tables","children":[],"call":["row [] "," exec_query map "," exec_query ","sql << "," quote_table_name "," data_sources ","ActiveSupport Deprecation  warn ","            Passing arguments to #tables is deprecated without replacement.\n squish ","(str \"          #tables currently returns both tables and views.\\n\") squish "," select_values "]}," ActiveRecord ConnectionAdapters SQLite3Adapter rollback_db_transaction":{"type":"method","name":"rollback_db_transaction","children":[],"call":["@connection rollback "," log "]}," ActiveRecord ConnectionAdapters SQLite3Adapter commit_db_transaction":{"type":"method","name":"commit_db_transaction","children":[],"call":["@connection commit "," log "]}," ActiveRecord ConnectionAdapters SQLite3Adapter begin_db_transaction":{"type":"method","name":"begin_db_transaction","children":[],"call":["@connection transaction "," log "]}," ActiveRecord ConnectionAdapters SQLite3Adapter release_savepoint":{"type":"method","name":"release_savepoint","children":[],"call":[" execute "," current_savepoint_name "]}," ActiveRecord ConnectionAdapters SQLite3Adapter rollback_to_savepoint":{"type":"method","name":"rollback_to_savepoint","children":[],"call":[" execute "," current_savepoint_name "]}," ActiveRecord ConnectionAdapters SQLite3Adapter create_savepoint":{"type":"method","name":"create_savepoint","children":[],"call":[" execute "," current_savepoint_name "]}," ActiveRecord ConnectionAdapters SQLite3Adapter select_rows":{"type":"method","name":"select_rows","children":[],"call":[" exec_query rows "," exec_query "]}," ActiveRecord ConnectionAdapters SQLite3Adapter insert_sql":{"type":"method","name":"insert_sql","children":[],"call":["@connection last_insert_row_id "]}," ActiveRecord ConnectionAdapters SQLite3Adapter delete_sql":{"type":"method","name":"delete_sql","children":[],"call":["sql =~ "]}," ActiveRecord ConnectionAdapters SQLite3Adapter update_sql":{"type":"method","name":"update_sql","children":[],"call":["@connection changes "]}," ActiveRecord ConnectionAdapters SQLite3Adapter execute":{"type":"method","name":"execute","children":[],"call":["@connection execute "," log ","ActiveSupport Dependencies  interlock permit_concurrent_loads ","ActiveSupport Dependencies  interlock "," materialize_transactions "," raise "," write_query? "," preventing_writes? "]}," ActiveRecord ConnectionAdapters SQLite3Adapter last_inserted_id":{"type":"method","name":"last_inserted_id","children":[],"call":["@connection last_insert_row_id "]}," ActiveRecord ConnectionAdapters SQLite3Adapter exec_delete":{"type":"method","name":"exec_delete","children":[],"call":["@connection changes "," exec_query "]}," ActiveRecord ConnectionAdapters SQLite3Adapter exec_query":{"type":"method","name":"exec_query","children":[],"call":["ActiveRecord Result  new ","stmt to_a ","stmt bind_params "," type_cast ","binds map ","stmt reset! ","stmt columns ","cache [] ","@connection prepare ","@statements [] ","stmt close ","binds empty? "," log "," without_prepared_statement? ","type_casted_binds map ","attr value_for_database "," type_casted_binds ","ActiveSupport Dependencies  interlock permit_concurrent_loads ","ActiveSupport Dependencies  interlock "," materialize_transactions "," raise "," write_query? "," preventing_writes? ","cache []  to_a ","@connection prepare  to_a ","cache []  bind_params ","@connection prepare  bind_params ","cache []  reset! ","@connection prepare  reset! ","cache []  columns ","@connection prepare  columns ","cache []  close ","@connection prepare  close "," type_casted_binds  map ","  type_casted_binds  "]}," ActiveRecord ConnectionAdapters SQLite3Adapter ExplainPrettyPrinter pp":{"type":"method","name":"pp","children":[],"call":["(send\n  (send\n    (lvar :result) :rows) :map) join + ","(send\n  (send\n    (lvar :result) :rows) :map) join ","row join ","result rows map ","result rows "]}," ActiveRecord ConnectionAdapters SQLite3Adapter explain":{"type":"method","name":"explain","children":[],"call":["ExplainPrettyPrinter  new pp "," exec_query ","ExplainPrettyPrinter  new "," to_sql ","SQLite3 ExplainPrettyPrinter  new pp ","SQLite3 ExplainPrettyPrinter  new "]}," ActiveRecord ConnectionAdapters SQLite3Adapter type_cast":{"type":"method","name":"type_cast","children":[],"call":["value encode "," logger error ","column name "," logger ","value encoding == ","value encoding ","column type == ","column type ","String  === ","value to_f ","BigDecimal  === ","value encode  encode ","value encode  encoding == ","value encode  encoding ","value encode  to_f "]}," ActiveRecord ConnectionAdapters SQLite3Adapter quoted_date":{"type":"method","name":"quoted_date","children":[],"call":[" sprintf ","value usec ","value respond_to? "]}," ActiveRecord ConnectionAdapters SQLite3Adapter quote_column_name":{"type":"method","name":"quote_column_name","children":[],"call":["name to_s gsub ","name to_s ","@quoted_column_names [] "]}," ActiveRecord ConnectionAdapters SQLite3Adapter quote_table_name_for_assignment":{"type":"method","name":"quote_table_name_for_assignment","children":[],"call":[" quote_column_name "]}," ActiveRecord ConnectionAdapters SQLite3Adapter quote_string":{"type":"method","name":"quote_string","children":[],"call":["@connection class quote ","@connection class "]}," ActiveRecord ConnectionAdapters SQLite3Adapter supports_explain?":{"type":"method","name":"supports_explain?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLite3Adapter native_database_types":{"type":"method","name":"native_database_types","children":[],"call":[" default_primary_key_type "]}," ActiveRecord ConnectionAdapters SQLite3Adapter allowed_index_name_length":{"type":"method","name":"allowed_index_name_length","children":[],"call":[" index_name_length - "," index_name_length "]}," ActiveRecord ConnectionAdapters SQLite3Adapter supports_index_sort_order?":{"type":"method","name":"supports_index_sort_order?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLite3Adapter supports_autoincrement?":{"type":"method","name":"supports_autoincrement?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLite3Adapter supports_count_distinct?":{"type":"method","name":"supports_count_distinct?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLite3Adapter clear_cache!":{"type":"method","name":"clear_cache!","children":[],"call":["@statements clear "]}," ActiveRecord ConnectionAdapters SQLite3Adapter disconnect!":{"type":"method","name":"disconnect!","children":[],"call":["@connection close "]}," ActiveRecord ConnectionAdapters SQLite3Adapter active?":{"type":"method","name":"active?","children":[],"call":["@active != ","@connection closed? ! ","@connection closed? ","@raw_connection closed? ! ","@raw_connection closed? "]}," ActiveRecord ConnectionAdapters SQLite3Adapter supports_add_column?":{"type":"method","name":"supports_add_column?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLite3Adapter requires_reloading?":{"type":"method","name":"requires_reloading?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLite3Adapter supports_primary_key?":{"type":"method","name":"supports_primary_key?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLite3Adapter supports_migrations?":{"type":"method","name":"supports_migrations?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLite3Adapter supports_statement_cache?":{"type":"method","name":"supports_statement_cache?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLite3Adapter supports_savepoints?":{"type":"method","name":"supports_savepoints?","children":[],"call":[" sqlite_version >= "," sqlite_version "]}," ActiveRecord ConnectionAdapters SQLite3Adapter supports_ddl_transactions?":{"type":"method","name":"supports_ddl_transactions?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLite3Adapter adapter_name":{"type":"method","name":"adapter_name","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLite3Adapter initialize":{"type":"method","name":"initialize","children":[],"call":[" unprepared_visitor ","Arel Visitors SQLite  new "," class type_cast_config_to_boolean ","config fetch "," class ","StatementPool  new "," class type_cast_config_to_integer ","BindSubstitution  new ","config [] ","@visitor extend "," configure_connection ","config [] == ","@config merge ","@config [] to_s ","@config [] ","@config []= ","ConnectionAdapters SQLite3Adapter  strict_strings_by_default ","@config key? "," raise ","ActiveRecord NoDatabaseError  new ","error message include? ","error message ","Dir  mkdir ","File  directory? ","File  dirname ","File  expand_path ","Rails  root "," unprepared_visitor  extend ","Arel Visitors SQLite  new  extend ","BindSubstitution  new  extend ","File  File  dirname  "]}," ActiveRecord ConnectionAdapters SQLite3Adapter StatementPool dealloc":{"type":"method","name":"dealloc","children":[],"call":["stmt close ","stmt closed? ","stmt [] close ","stmt [] ","stmt [] closed? "]}," ActiveRecord ConnectionAdapters SQLite3Adapter StatementPool cache":{"type":"method","name":"cache","children":[],"call":["@cache [] "]}," ActiveRecord ConnectionAdapters SQLite3Adapter StatementPool clear":{"type":"method","name":"clear","children":[],"call":[" cache clear "," cache "," dealloc ","hash [] "," cache values each "," cache values "," cache each_value "]}," ActiveRecord ConnectionAdapters SQLite3Adapter StatementPool []=":{"type":"method","name":"[]=","children":[],"call":[" cache []= "," cache "," dealloc "," cache shift last [] "," cache shift last "," cache shift ","@max <= "," cache size "]}," ActiveRecord ConnectionAdapters SQLite3Adapter StatementPool length":{"type":"method","name":"length","children":[],"call":[" cache length "," cache "]}," ActiveRecord ConnectionAdapters SQLite3Adapter StatementPool []":{"type":"method","name":"[]","children":[],"call":[" cache [] "," cache "]}," ActiveRecord ConnectionAdapters SQLite3Adapter StatementPool key?":{"type":"method","name":"key?","children":[],"call":[" cache key? "," cache "]}," ActiveRecord ConnectionAdapters SQLite3Adapter StatementPool each":{"type":"method","name":"each","children":[],"call":[" cache each "," cache "]}," ActiveRecord ConnectionAdapters SQLite3Adapter StatementPool initialize":{"type":"method","name":"initialize","children":[],"call":["h []= ","Hash  new "]}," ActiveRecord ConnectionAdapters SQLite3Adapter Version <=>":{"type":"method","name":"<=>","children":[],"call":["@version <=> ","v to_i ","version_string split map ","version_string split "]}," ActiveRecord ConnectionAdapters SQLite3Adapter Version initialize":{"type":"method","name":"initialize","children":[],"call":["v to_i ","version_string split map ","version_string split "]}," ActiveRecord ConnectionAdapters SQLite3Column binary_to_string":{"type":"method","name":"binary_to_string","children":[],"call":["value force_encoding ","value encoding != ","value encoding ","value force_encoding  force_encoding ","value force_encoding  encoding != ","value force_encoding  encoding "]}," ActiveRecord ConnectionHandling sqlite3_connection":{"type":"method","name":"sqlite3_connection","children":[],"call":["ConnectionAdapters SQLite3Adapter  new "," logger ","db busy_timeout ","ConnectionAdapters SQLite3Adapter  type_cast_config_to_integer ","config [] ","SQLite3 Database  new ","config []= ","File  expand_path ","Rails  root ",":memory: != "," raise ","config [] to_s ","Dir  mkdir ","File  directory? ","File  dirname ","ActiveRecord NoDatabaseError  new ","error message ","error message include? ","config merge ","config symbolize_keys ","config [] to_s start_with? ! ","config [] to_s start_with? "," sqlite3_adapter_class new "," sqlite3_adapter_class ","SQLite3 Database  new  busy_timeout ","ConnectionAdapters SQLite3Adapter  type_cast_config symbolize_keys _to_integer ","config symbolize_keys  [] ","config symbolize_keys  []= ","config symbolize_keys  [] to_s ","File  File  dirname  ","config symbolize_keys  merge ","config symbolize_keys  symbolize_keys ","config symbolize_keys  [] to_s start_with? ! ","config symbolize_keys  [] to_s start_with? "]}," ActiveRecord ConnectionAdapters SchemaCache prepare_default_proc":{"type":"method","name":"prepare_default_proc","children":[],"call":["@primary_keys default_proc= ","h []= "," connection primary_key "," connection "," table_exists? ","Proc  new ","@columns_hash default_proc= ","Hash  [] ","col name "," columns map "," columns ","@columns default_proc= "," connection columns "," columns [] map "," columns [] "]}," ActiveRecord ConnectionAdapters SchemaCache marshal_load":{"type":"method","name":"marshal_load","children":[],"call":[" prepare_default_proc "," derive_columns_hash_and_deduplicate_values "]}," ActiveRecord ConnectionAdapters SchemaCache marshal_dump":{"type":"method","name":"marshal_dump","children":[],"call":["(ivar :@version) + ","Hash  [] ","(ivar :@columns) map ","ActiveRecord Migrator  current_version ","h []= ","v [] "," instance_variable_get inject "," instance_variable_get ","(sym :@columns) map "," connection migration_context current_version "," connection migration_context "," connection "," database_version "," reset_version! ","(ivar :ActiveRecord Migrator  current_version ) + ","(ivar : connection migration_context current_version ) + "]}," ActiveRecord ConnectionAdapters SchemaCache size":{"type":"method","name":"size","children":[],"call":["(send\n  (array\n    (ivar :@columns)\n    (ivar :@columns_hash)\n    (ivar :@primary_keys)\n    (ivar :@tables)) :map) inject ","x size ","(ivar :@columns) map ","(ivar :@columns) map inject ","(ivar :@columns) sum "]}," ActiveRecord ConnectionAdapters SchemaCache tables":{"type":"method","name":"tables","children":[],"call":["@tables dup ","ActiveSupport Deprecation  warn ","@tables [] "]}," ActiveRecord ConnectionAdapters SchemaCache add":{"type":"method","name":"add","children":[],"call":["@columns_hash [] ","@columns [] ","@primary_keys [] "," table_exists? "," columns_hash "," columns "," primary_keys "," data_source_exists? "," indexes "]}," ActiveRecord ConnectionAdapters SchemaCache primary_keys":{"type":"method","name":"primary_keys","children":[],"call":["@primary_keys dup ","ActiveSupport Deprecation  warn ","@primary_keys [] "," connection primary_key "," connection "," table_exists? "," data_source_exists? ","@primary_keys []= "," deep_deduplicate ","@primary_keys fetch ","connection primary_key "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter update_table_definition":{"type":"method","name":"update_table_definition","children":[],"call":["Table  new ","PostgreSQL Table  new "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter create_table_definition":{"type":"method","name":"create_table_definition","children":[],"call":["TableDefinition  new "," native_database_types ","PostgreSQL TableDefinition  new "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter last_insert_id_result":{"type":"method","name":"last_insert_id_result","children":[],"call":[" exec_query "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter last_insert_id_value":{"type":"method","name":"last_insert_id_value","children":[],"call":[" last_insert_id_result rows first first "," last_insert_id_result rows first "," last_insert_id_result rows "," last_insert_id_result "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter initialize_type_map":{"type":"method","name":"initialize_type_map","children":[],"call":["OID TYPE_MAP  []= ","row [] to_i ","row [] ","OID Array  new ","OID TYPE_MAP  [] ","(send\n  (lvar :arrays) :find_all) each ","OID TYPE_MAP  key? ","arrays find_all ","OID Vector  new ","OID NAMES  [] ","OID  registered_type? ","(send\n  (lvar :nodes) :find_all) each ","nodes find_all ","row [] == ","nodes partition ","(send\n  (lvar :leaves) :find_all) each ","leaves find_all ","result partition "," execute ","type_map []= ","type_map [] ","type_map key? "," add_oid ","nodes each ","result group_by "," load_additional_types ","OID Decimal  new ","Type DecimalWithoutScale  new ","(send\n  (send\n    (lvar :fmod) :-\n    (int 4)) :&\n  (int 65535)) zero? ","fmod - & ","fmod - "," extract_scale "," extract_precision ","m register_type ","OID DateTime  new ","m alias_type ","OID SpecializedString  new ","OID Xml  new ","OID Uuid  new ","OID Inet  new ","OID Cidr  new ","OID Jsonb  new ","OID Json  new ","OID Hstore  new ","OID Point  new ","OID Bytea  new ","OID Money  new ","OID Time  new ","OID Date  new "," register_class_with_limit ","Type Boolean  new ","Type Text  new ","OID Float  new "," register_class_with_precision ","Type Date  new ","Type Float  new ","OID Oid  new ","Type Json  new ","Type Integer  new ","OID Interval  new ","OID Macaddr  new "," class initialize_type_map "," class "," class register_class_with_precision ","(send\n  (lvar :OID Array  new s) :find_all) each ","OID Array  new s find_all "," execute  partition "," execute  group_by "," extract_ extract_scale  "," extract_ extract_precision  "," register_class_with_ extract_precision  "," class register_class_with_ extract_precision  "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter reload_type_map":{"type":"method","name":"reload_type_map","children":[],"call":[" initialize_type_map ","OID TYPE_MAP  clear "," type_map "," type_map clear ","Type HashLookupTypeMap  new ","@lock synchronize "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter valid_type?":{"type":"method","name":"valid_type?","children":[],"call":[" native_database_types [] nil? ! "," native_database_types [] nil? "," native_database_types [] "," native_database_types "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter use_insert_returning?":{"type":"method","name":"use_insert_returning?","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter extensions":{"type":"method","name":"extensions","children":[],"call":["res column_types [] type_cast ","r first ","res column_types [] ","res column_types ","res rows map ","res rows "," exec_query "," supports_extensions? "," exec_query cast_values "," internal_exec_query cast_values "," internal_exec_query "," exec_query  column_types [] type_cast "," exec_query  column_types [] "," exec_query  column_types "," exec_query  rows map "," exec_query  rows "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter extension_enabled?":{"type":"method","name":"extension_enabled?","children":[],"call":["res column_types [] type_cast ","res rows first first ","res rows first ","res rows ","res column_types [] ","res column_types "," exec_query "," supports_extensions? ","res cast_values first ","res cast_values "," query_value "," quote "," exec_query  column_types [] type_cast "," exec_query  rows first first "," exec_query  rows first "," exec_query  rows "," exec_query  column_types [] "," exec_query  column_types "," exec_query  cast_values first "," exec_query  cast_values "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter disable_extension":{"type":"method","name":"disable_extension","children":[],"call":[" reload_type_map "," exec_query tap "," exec_query "," internal_exec_query tap "," internal_exec_query ","force == "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter enable_extension":{"type":"method","name":"enable_extension","children":[],"call":[" reload_type_map "," exec_query tap "," exec_query "," internal_exec_query tap "," internal_exec_query ","sql << ","(str \"CREATE EXTENSION IF NOT EXISTS \\\"\") +@ ","name to_s split values_at ","name to_s split ","name to_s ","(str \"CREATE EXTENSION IF NOT EXISTS \\\"\") +@  << "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter supports_ranges?":{"type":"method","name":"supports_ranges?","children":[],"call":[" postgresql_version >= "," postgresql_version "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter supports_extensions?":{"type":"method","name":"supports_extensions?","children":[],"call":[" postgresql_version >= "," postgresql_version "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter index_algorithms":{"type":"method","name":"index_algorithms","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter supports_transaction_isolation?":{"type":"method","name":"supports_transaction_isolation?","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter supports_partial_index?":{"type":"method","name":"supports_partial_index?","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter migration_keys":{"type":"method","name":"migration_keys","children":[],"call":[" + "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter prepare_column_options":{"type":"method","name":"prepare_column_options","children":[],"call":["spec []= ","column array ","column respond_to? ","column default_function "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter TableDefinition create_column_definition":{"type":"method","name":"create_column_definition","children":[],"call":["ColumnDefinition  new "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter TableDefinition column":{"type":"method","name":"column","children":[],"call":["column array= ","options [] "," [] "," []  array= "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter TableDefinition primary_key":{"type":"method","name":"primary_key","children":[],"call":[" column ","options []= ","options fetch ","type == ","options [] "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter ColumnMethods json":{"type":"method","name":"json","children":[],"call":[" column "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter ColumnMethods uuid":{"type":"method","name":"uuid","children":[],"call":[" column "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter ColumnMethods macaddr":{"type":"method","name":"macaddr","children":[],"call":[" column "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter ColumnMethods cidr":{"type":"method","name":"cidr","children":[],"call":[" column "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter ColumnMethods inet":{"type":"method","name":"inet","children":[],"call":[" column "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter ColumnMethods ltree":{"type":"method","name":"ltree","children":[],"call":[" column "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter ColumnMethods hstore":{"type":"method","name":"hstore","children":[],"call":[" column "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter ColumnMethods daterange":{"type":"method","name":"daterange","children":[],"call":[" column "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter ColumnMethods numrange":{"type":"method","name":"numrange","children":[],"call":[" column "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter ColumnMethods tstzrange":{"type":"method","name":"tstzrange","children":[],"call":[" column "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter ColumnMethods tsrange":{"type":"method","name":"tsrange","children":[],"call":[" column "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter ColumnMethods int8range":{"type":"method","name":"int8range","children":[],"call":[" column "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter ColumnMethods int4range":{"type":"method","name":"int4range","children":[],"call":[" column "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter ColumnMethods tsvector":{"type":"method","name":"tsvector","children":[],"call":[" column ","args [] ","args extract_options! ","args extract_args extract_options! ! "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter ColumnMethods xml":{"type":"method","name":"xml","children":[],"call":[" column ","args [] ","args extract_options! ","args extract_args extract_options! ! "]}," ActiveRecord ConnectionAdapters PostgreSQLColumn type_cast":{"type":"method","name":"type_cast","children":[],"call":["@oid_type type_cast "," encoded? ","value nil? "]}," ActiveRecord ConnectionHandling postgresql_connection":{"type":"method","name":"postgresql_connection","children":[],"call":["ConnectionAdapters PostgreSQLAdapter  new "," logger ","VALID_CONN_PARAMS  include? ","conn_params keep_if ","conn_params []= ","conn_params delete ","conn_params [] ","v nil? ","conn_params delete_if ","config symbolize_keys ","conn_params slice! ","PGconn  conndefaults_hash keys + ","PGconn  conndefaults_hash keys ","PGconn  conndefaults_hash ","PG Connection  conndefaults_hash keys + ","PG Connection  conndefaults_hash keys ","PG Connection  conndefaults_hash "," raise ","error message include? ","error message ","PG  connect ","ConnectionAdapters PostgreSQLAdapter  new_client ","config symbolize_keys compact "," postgresql_adapter_class new "," postgresql_adapter_class ","config symbolize_keys  keep_if ","config symbolize_keys compact  keep_if ","PG  connect _params keep_if ","config symbolize_keys  []= ","config symbolize_keys compact  []= ","PG  connect _params []= ","config symbolize_keys  delete ","config symbolize_keys compact  delete ","PG  connect _params delete ","config symbolize_keys  [] ","config symbolize_keys compact  [] ","PG  connect _params [] ","config symbolize_keys  delete_if ","config symbolize_keys compact  delete_if ","PG  connect _params delete_if ","config symbolize_keys  slice! ","config symbolize_keys compact  slice! ","PG  connect _params slice! ","PGPG  connect   PG  connect defaults_hash keys + ","PGPG  connect   PG  connect defaults_hash keys ","PGPG  connect   PG  connect defaults_hash ","PG Connection  PG  connect defaults_hash keys + ","PG Connection  PG  connect defaults_hash keys ","PG Connection  PG  connect defaults_hash ","PG  PG  connect ect "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter SchemaStatements distinct":{"type":"method","name":"distinct","children":[],"call":["(zsuper) concat join ","(zsuper) concat ","(send\n  (lvar :orders) :map) reject map with_index ","(send\n  (lvar :orders) :map) reject map ","(send\n  (lvar :orders) :map) reject ","s gsub ","s to_sql ","s is_a? ","orders map ","(zs to_sql uper) concat join ","(zs to_sql uper) concat ","(s to_sql end\n  (lvar :orders to_sql ) :map) reject map with_index ","(s to_sql end\n  (lvar :orders to_sql ) :map) reject map ","(s to_sql end\n  (lvar :orders to_sql ) :map) reject ","s to_sql  gs to_sql ub ","s to_sql  to_s to_sql ql ","s to_sql  is to_sql _a? ","orders to_sql  map "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter SchemaStatements type_to_sql":{"type":"method","name":"type_to_sql","children":[],"call":[" raise ","type to_s "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter SchemaStatements index_name_length":{"type":"method","name":"index_name_length","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter SchemaStatements rename_index":{"type":"method","name":"rename_index","children":[],"call":[" execute "," quote_table_name "," quote_column_name "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter SchemaStatements remove_index!":{"type":"method","name":"remove_index!","children":[],"call":[" execute "," quote_table_name "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter SchemaStatements add_index":{"type":"method","name":"add_index","children":[],"call":[" execute "," quote_table_name "," quote_column_name "," add_index_options "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter SchemaStatements rename_column":{"type":"method","name":"rename_column","children":[],"call":[" rename_column_indexes "," execute "," quote_column_name "," quote_table_name "," clear_cache! "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter SchemaStatements change_column_null":{"type":"method","name":"change_column_null","children":[],"call":[" execute "," quote_column_name "," quote_table_name "," quote ","default nil? "," clear_cache! "," quote_default_value "," column_for "," quote_ column_for _name ","  column_for _for "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter SchemaStatements change_column_default":{"type":"method","name":"change_column_default","children":[],"call":[" execute "," quote "," quote_column_name "," quote_table_name "," clear_cache! "," quote_default_value "," column_for "," quote_ column_for _name ","  column_for _for "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter SchemaStatements change_column":{"type":"method","name":"change_column","children":[],"call":[" change_column_null ","options [] ","options key? "," change_column_default "," options_include_default? "," execute "," type_to_sql "," quote_column_name "," quote_table_name "," clear_cache! ","sql_type << "," type_to_sql  << "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter SchemaStatements add_column":{"type":"method","name":"add_column","children":[],"call":[" clear_cache! "," execute "," add_column_options! "," type_to_sql ","options [] "," quote_column_name "," quote_table_name "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter SchemaStatements rename_table":{"type":"method","name":"rename_table","children":[],"call":[" rename_table_indexes "," execute "," quote_table_name ","seq == "," pk_and_sequence_for "," clear_cache! "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter SchemaStatements primary_key":{"type":"method","name":"primary_key","children":[],"call":["row first "," exec_query rows first "," exec_query rows "," exec_query "," quote_table_name "," exec_query rows first  first "," exec_query  exec_query rows first s first "," exec_query  exec_query rows first s "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter SchemaStatements pk_and_sequence_for":{"type":"method","name":"pk_and_sequence_for","children":[],"call":["result last ","result first "," query [] "," query "," quote_table_name ","result empty? ","result nil? "," query []  last "," query []  first "," query []  empty? "," query []  nil? "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter SchemaStatements reset_pk_sequence!":{"type":"method","name":"reset_pk_sequence!","children":[],"call":[" select_value "," quote_table_name "," quote_column_name ","@logger warn ","sequence ! "," pk_and_sequence_for "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter SchemaStatements serial_sequence":{"type":"method","name":"serial_sequence","children":[],"call":["result rows first first ","result rows first ","result rows "," exec_query "," exec_query  rows first first "," exec_query  rows first "," exec_query  rows "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter SchemaStatements default_sequence_name":{"type":"method","name":"default_sequence_name","children":[],"call":["result split last ","result split "," serial_sequence "," serial_sequence  split last "," serial_sequence  split "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter SchemaStatements client_min_messages=":{"type":"method","name":"client_min_messages=","children":[],"call":[" execute "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter SchemaStatements client_min_messages":{"type":"method","name":"client_min_messages","children":[],"call":[" query [] [] "," query [] "," query "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter SchemaStatements schema_search_path":{"type":"method","name":"schema_search_path","children":[],"call":[" query [] [] "," query [] "," query "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter SchemaStatements schema_search_path=":{"type":"method","name":"schema_search_path=","children":[],"call":[" execute "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter SchemaStatements drop_schema":{"type":"method","name":"drop_schema","children":[],"call":[" execute "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter SchemaStatements create_schema":{"type":"method","name":"create_schema","children":[],"call":[" execute "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter SchemaStatements schema_names":{"type":"method","name":"schema_names","children":[],"call":[" query flatten "," query "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter SchemaStatements ctype":{"type":"method","name":"ctype","children":[],"call":[" query [] [] "," query [] "," query "," current_database "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter SchemaStatements collation":{"type":"method","name":"collation","children":[],"call":[" query [] [] "," query [] "," query "," current_database "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter SchemaStatements encoding":{"type":"method","name":"encoding","children":[],"call":[" query [] [] "," query [] "," query "," current_database "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter SchemaStatements current_schema":{"type":"method","name":"current_schema","children":[],"call":[" query [] [] "," query [] "," query "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter SchemaStatements current_database":{"type":"method","name":"current_database","children":[],"call":[" query [] [] "," query [] "," query "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter SchemaStatements columns":{"type":"method","name":"columns","children":[],"call":["PostgreSQLColumn  new ","notnull == ","OID Identity  new ","OID TYPE_MAP  fetch ","fmod to_i ","oid to_i "," column_definitions map "," column_definitions "," get_oid_type "," type_map fetch "," type_map "," get_oid_type  to_i "," get_ get_oid_type _type "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter SchemaStatements indexes":{"type":"method","name":"indexes","children":[],"call":["(send\n  (lvar :result) :map) compact ","IndexDefinition  new ","inddef scan flatten [] to_sym ","inddef scan flatten [] ","inddef scan flatten ","inddef scan ","Hash  [] ","desc_order_columns map ","desc_order_columns any? ","column_names empty? ","columns values_at compact ","columns values_at "," query ","indkey join ","row [] ","row [] split ","row [] == ","result map ","(send\n  (lvar : query ) :map) compact ","row []  scan flatten [] to_sym ","row []  scan flatten [] ","row []  scan flatten ","row []  scan ","inddef scan flatten  map ","desc_order_Hash  []  map ","inddef scan flatten  any? ","desc_order_Hash  []  any? ","columns values_at compact  empty? ","Hash  []  values_at compact ","Hash  []  values_at ","row [] split  join "," query  map "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter SchemaStatements schema_exists?":{"type":"method","name":"schema_exists?","children":[],"call":[" exec_query rows first [] to_i > "," exec_query rows first [] to_i "," exec_query rows first [] "," exec_query rows first "," exec_query rows "," exec_query "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter SchemaStatements table_exists?":{"type":"method","name":"table_exists?","children":[],"call":[" exec_query rows first [] to_i > "," exec_query rows first [] to_i "," exec_query rows first [] "," exec_query rows first "," exec_query rows "," exec_query ","table gsub ","binds << ","Utils  extract_schema_and_table ","name to_s "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter SchemaStatements tables":{"type":"method","name":"tables","children":[],"call":["row [] "," query map "," query "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter SchemaStatements drop_database":{"type":"method","name":"drop_database","children":[],"call":[" execute "," quote_table_name "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter SchemaStatements create_database":{"type":"method","name":"create_database","children":[],"call":[" execute "," quote_table_name ","options sum ","(pair\n  (sym :encoding)\n  (str \"utf8\")) merge! ","options symbolize_keys ","options inject ","(pair\n  (sym :encoding)\n  (str \"utf8\")) merge!  sum ","(pair\n  (sym :encoding)\n  (str \"utf8\")) merge!  symbolize_keys ","(pair\n  (sym :encoding)\n  (str \"utf8\")) merge!  inject "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter SchemaStatements recreate_database":{"type":"method","name":"recreate_database","children":[],"call":[" create_database "," drop_database "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter schema_creation":{"type":"method","name":"schema_creation","children":[],"call":["SchemaCreation  new ","PostgreSQL SchemaCreation  new "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter SchemaCreation add_column_options!":{"type":"method","name":"add_column_options!","children":[],"call":["sql << ","options [] ","options [] =~ ","column type == ","column type ","options fetch ","options [] try "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter SchemaCreation visit_ColumnDefinition":{"type":"method","name":"visit_ColumnDefinition","children":[],"call":[" add_column_options! "," column_options ","sql << ","o type == ","o type ","o primary_key? ","o type != "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter SchemaCreation visit_AddColumn":{"type":"method","name":"visit_AddColumn","children":[],"call":[" add_column_options! "," column_options "," quote_column_name ","o name "," type_to_sql ","o scale ","o precision ","o limit ","o type to_sym ","o type "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter ReferentialIntegrity disable_referential_integrity":{"type":"method","name":"disable_referential_integrity","children":[],"call":[" execute ","(send\n  (send nil :tables) :collect) join "," quote_table_name "," tables collect "," tables "," supports_disable_referential_integrity? "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter ReferentialIntegrity supports_disable_referential_integrity?":{"type":"method","name":"supports_disable_referential_integrity?","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter Quoting quoted_date":{"type":"method","name":"quoted_date","children":[],"call":["result sub + ","result sub ","value year < ","value year "," sprintf ","value usec ","value respond_to? ","value acts_like? ","result sub +  sub + ","result sub +  sub "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter Quoting quote_column_name":{"type":"method","name":"quote_column_name","children":[],"call":["PGconn  quote_ident ","name to_s "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter Quoting quote_table_name_for_assignment":{"type":"method","name":"quote_table_name_for_assignment","children":[],"call":[" quote_column_name "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter Quoting quote_table_name":{"type":"method","name":"quote_table_name","children":[],"call":[" quote_column_name "," extract_pg_identifier_from_name ","name to_s "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter Quoting quote_string":{"type":"method","name":"quote_string","children":[],"call":["@connection escape "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter Quoting type_cast":{"type":"method","name":"type_cast","children":[],"call":["PostgreSQLColumn  cidr_to_string ","(str \"inet\") include? ","column sql_type ","PostgreSQLColumn  json_to_string ","PostgreSQLColumn  hstore_to_string ","bytea == ","PostgreSQLColumn  array_to_string ","column array ","PostgreSQLColumn  point_to_string ","PostgreSQLColumn  range_to_string "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter Quoting quote":{"type":"method","name":"quote","children":[],"call":[" quote_string "," escape_bytea ","(sym :string) include? ","column type ","sql_type == ","value to_s ","value nan? ","value infinite? ","value to_s downcase ","column type == ","PostgreSQLColumn  cidr_to_string ","PostgreSQLColumn  json_to_string ","PostgreSQLColumn  hstore_to_string ","PostgreSQLColumn  array_to_string gsub ","PostgreSQLColumn  array_to_string ","column array ","PostgreSQLColumn  point_to_string ","PostgreSQLColumn  range_to_string "," type_to_sql ","column scale ","column precision ","column limit ","column sql_type ","column sql_type == "," type_to_sql  == ","column  type_to_sql  ","column  type_to_sql  == "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter Quoting unescape_bytea":{"type":"method","name":"unescape_bytea","children":[],"call":["PGconn  unescape_bytea "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter Quoting escape_bytea":{"type":"method","name":"escape_bytea","children":[],"call":["PGconn  escape_bytea "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter OID registered_type?":{"type":"method","name":"registered_type?","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter OID alias_type":{"type":"method","name":"alias_type","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter OID register_type":{"type":"method","name":"register_type","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter OID TypeMap fetch":{"type":"method","name":"fetch","children":[],"call":["@mapping fetch ","(send\n  (send\n    (lvar :fmod) :-\n    (int 4)) :&\n  (int 65535)) zero? ","fmod - & ","fmod - ","ftype == "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter OID TypeMap key?":{"type":"method","name":"key?","children":[],"call":["@mapping key? "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter OID TypeMap clear":{"type":"method","name":"clear","children":[],"call":["@mapping clear "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter OID TypeMap []":{"type":"method","name":"[]","children":[],"call":["@mapping [] "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter OID TypeMap []=":{"type":"method","name":"[]=","children":[],"call":["@mapping []= "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter OID TypeMap initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter OID Json type_cast":{"type":"method","name":"type_cast","children":[],"call":["ConnectionAdapters PostgreSQLColumn  string_to_json ","value nil? "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter OID Cidr type_cast":{"type":"method","name":"type_cast","children":[],"call":["ConnectionAdapters PostgreSQLColumn  string_to_cidr ","value nil? "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter OID Hstore type_cast":{"type":"method","name":"type_cast","children":[],"call":["ConnectionAdapters PostgreSQLColumn  string_to_hstore ","value nil? "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter OID Decimal type_cast":{"type":"method","name":"type_cast","children":[],"call":["ConnectionAdapters Column  value_to_decimal ","value nil? "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter OID Float type_cast":{"type":"method","name":"type_cast","children":[],"call":["value to_f ","value nil? "," Float INFINITY  -@ "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter OID Time type_cast":{"type":"method","name":"type_cast","children":[],"call":["ConnectionAdapters Column  string_to_dummy_time ","value nil? "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter OID Date type_cast":{"type":"method","name":"type_cast","children":[],"call":["ConnectionAdapters Column  value_to_date ","value nil? "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter OID Date type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter OID Timestamp type_cast":{"type":"method","name":"type_cast","children":[],"call":["ConnectionAdapters PostgreSQLColumn  string_to_time ","value nil? "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter OID Timestamp type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter OID Boolean type_cast":{"type":"method","name":"type_cast","children":[],"call":["ConnectionAdapters Column  value_to_boolean ","value nil? "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter OID Integer type_cast":{"type":"method","name":"type_cast","children":[],"call":["ConnectionAdapters Column  value_to_integer ","value nil? "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter OID Range type_cast":{"type":"method","name":"type_cast","children":[],"call":[" Range  new ","extracted [] "," to_integer ","ConnectionAdapters Column  string_to_time ","BigDecimal  new ","extracted [] to_s ","ConnectionAdapters Column  value_to_date ","1 day "," extract_bounds ","value is_a? ","value == ","value nil? "," extract_bounds  [] "," ConnectionAdapters Column  string_to_time _integer "," BigDecimal  new _integer "," ConnectionAdapters Column  value_to_date _integer ","ConnectionAdapters Column  string_ConnectionAdapters Column  string_to_time _time ","ConnectionAdapters Column  string_BigDecimal  new _time ","ConnectionAdapters Column  string_ConnectionAdapters Column  value_to_date _time ","extracted [] ConnectionAdapters Column  string_to_time _s ","extracted [] BigDecimal  new _s ","extracted [] ConnectionAdapters Column  value_to_date _s "," extract_bounds  [] to_s ","ConnectionAdapters Column  value_ConnectionAdapters Column  string_to_time _date ","ConnectionAdapters Column  value_BigDecimal  new _date ","ConnectionAdapters Column  value_ConnectionAdapters Column  value_to_date _date "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter OID Range to_integer":{"type":"method","name":"to_integer","children":[],"call":["value to_i "," infinity? "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter OID Range infinity?":{"type":"method","name":"infinity?","children":[],"call":["value infinite? ","value respond_to? "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter OID Range infinity":{"type":"method","name":"infinity","children":[],"call":[" Float INFINITY  * ","options [] "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter OID Range extract_bounds":{"type":"method","name":"extract_bounds","children":[],"call":["value [] == ","value [] "," infinity ","to == ","from == ","value [] split "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter OID Range initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter OID Array type_cast":{"type":"method","name":"type_cast","children":[],"call":["ConnectionAdapters PostgreSQLColumn  string_to_array ","String  === "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter OID Array initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter OID Point type_cast":{"type":"method","name":"type_cast","children":[],"call":["ConnectionAdapters PostgreSQLColumn  string_to_point ","String  === "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter OID Vector type_cast":{"type":"method","name":"type_cast","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter OID Vector initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter OID Money type_cast":{"type":"method","name":"type_cast","children":[],"call":["ConnectionAdapters Column  value_to_decimal ","value gsub! sub! ","value gsub! ","value nil? ","value sub! ","String  === "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter OID Bytea type_cast":{"type":"method","name":"type_cast","children":[],"call":["PGconn  unescape_bytea ","value nil? ","value dup force_encoding =~ ","value dup force_encoding ","value dup "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter OID Bit type_cast":{"type":"method","name":"type_cast","children":[],"call":["ConnectionAdapters PostgreSQLColumn  string_to_bit ","String  === "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter OID Identity type_cast":{"type":"method","name":"type_cast","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter OID Type type_cast_for_write":{"type":"method","name":"type_cast_for_write","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter OID Type type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter DatabaseStatements release_savepoint":{"type":"method","name":"release_savepoint","children":[],"call":[" execute "," current_savepoint_name "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter DatabaseStatements rollback_to_savepoint":{"type":"method","name":"rollback_to_savepoint","children":[],"call":[" execute "," current_savepoint_name "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter DatabaseStatements create_savepoint":{"type":"method","name":"create_savepoint","children":[],"call":[" execute "," current_savepoint_name "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter DatabaseStatements outside_transaction?":{"type":"method","name":"outside_transaction?","children":[],"call":["@connection transaction_status == ","@connection transaction_status ","ActiveSupport Deprecation  warn "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter DatabaseStatements rollback_db_transaction":{"type":"method","name":"rollback_db_transaction","children":[],"call":[" execute "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter DatabaseStatements commit_db_transaction":{"type":"method","name":"commit_db_transaction","children":[],"call":[" execute "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter DatabaseStatements begin_isolated_db_transaction":{"type":"method","name":"begin_isolated_db_transaction","children":[],"call":[" execute "," transaction_isolation_levels fetch "," transaction_isolation_levels "," begin_db_transaction "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter DatabaseStatements begin_db_transaction":{"type":"method","name":"begin_db_transaction","children":[],"call":[" execute "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter DatabaseStatements update_sql":{"type":"method","name":"update_sql","children":[],"call":[" cmd_tuples "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter DatabaseStatements exec_insert":{"type":"method","name":"exec_insert","children":[],"call":[" last_insert_id_result "," default_sequence_name "," extract_table_ref_from_insert_sql "," use_insert_returning? ! "," use_insert_returning? "," exec_query "," default_ default_sequence_name  "," extract_ extract_table_ref_from_insert_sql _from_insert_sql "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter DatabaseStatements sql_for_insert":{"type":"method","name":"sql_for_insert","children":[],"call":[" quote_column_name "," use_insert_returning? "," primary_key "," extract_table_ref_from_insert_sql "," extract_ extract_table_ref_from_insert_sql _from_insert_sql "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter DatabaseStatements exec_delete":{"type":"method","name":"exec_delete","children":[],"call":["result clear ","result cmd_tuples "," exec_cache "," exec_no_cache ","binds empty? "," log "," without_prepared_statement? "," exec_cache  clear "," exec_no_cache  clear "," exec_cache  cmd_tuples "," exec_no_cache  cmd_tuples "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter DatabaseStatements exec_query":{"type":"method","name":"exec_query","children":[],"call":["result clear ","ActiveRecord Result  new ","result values ","result fields ","types []= ","OID Identity  new "," warn ","OID TYPE_MAP  fetch ","result fmod ","result ftype ","result fields each_with_index "," exec_cache "," exec_no_cache ","binds empty? "," log ","fields each_with_index "," without_prepared_statement? "," get_oid_type "," type_map fetch "," type_map "," exec_cache  clear "," exec_no_cache  clear "," exec_cache  values "," exec_no_cache  values "," exec_cache  fields "," exec_no_cache  fields ","result result fields  ","result result fmod  "," exec_cache  fmod "," exec_no_cache  fmod ","result result ftype  "," exec_cache  ftype "," exec_no_cache  ftype "," exec_cache  fields each_with_index "," exec_no_cache  fields each_with_index ","result result fields  each_with_index ","result fields  each_with_index "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter DatabaseStatements substitute_at":{"type":"method","name":"substitute_at","children":[],"call":["Arel Nodes BindParam  new ","index + "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter DatabaseStatements execute":{"type":"method","name":"execute","children":[],"call":["@connection async_exec "," log "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter DatabaseStatements query":{"type":"method","name":"query","children":[],"call":[" result_as_array ","@connection async_exec "," log "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter DatabaseStatements result_as_array":{"type":"method","name":"result_as_array","children":[],"call":["data gsub! sub! ","data gsub! ","row [] ","monies each ","row []= "," unescape_bytea ","binaries each ","rows each ","typehash [] ","ftypes group_by ","x == ","ftypes any? ","res values ","res ftype ","Array  new ","res nfields ","row []  gsub! sub! ","row []  gsub! ","res values  each "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter DatabaseStatements create":{"type":"method","name":"create","children":[],"call":[" insert "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter DatabaseStatements insert_sql":{"type":"method","name":"insert_sql","children":[],"call":[" last_insert_id_value "," default_sequence_name "," select_value "," quote_column_name "," use_insert_returning? "," primary_key "," extract_table_ref_from_insert_sql "," extract_ extract_table_ref_from_insert_sql _from_insert_sql "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter DatabaseStatements select_rows":{"type":"method","name":"select_rows","children":[],"call":[" select_raw last "," select_raw "," exec_query rows "," exec_query "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter DatabaseStatements ExplainPrettyPrinter pp":{"type":"method","name":"pp","children":[],"call":["pp join + ","pp join ","pp << ","nrows == ","result rows length ","result rows ","lines map ","- * ","header center rstrip ","header center ","(lvar :header) map max + ","(lvar :header) map max ","(lvar :header) map ","result rows map ","result columns first ","result columns ","result rows length  == ","result rows map  map ","result columns first  center rstrip ","result columns first  center ","(lvar :result columns first ) map max + ","(lvar :result columns first ) map max ","(lvar :result columns first ) map "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter DatabaseStatements explain":{"type":"method","name":"explain","children":[],"call":["ExplainPrettyPrinter  new pp "," exec_query ","ExplainPrettyPrinter  new "," to_sql "]}," ActiveRecord ConnectionAdapters PostgreSQLColumn Cast quote_and_escape":{"type":"method","name":"quote_and_escape","children":[],"call":["value gsub ","value gsub! ","value gsub  gsub ","value gsub  gsub! "]}," ActiveRecord ConnectionAdapters PostgreSQLColumn Cast escape_hstore":{"type":"method","name":"escape_hstore","children":[],"call":["\"%s\" % ","value to_s gsub ","value to_s ","value == ","value nil? "]}," ActiveRecord ConnectionAdapters PostgreSQLColumn Cast string_to_array":{"type":"method","name":"string_to_array","children":[],"call":["oid type_cast "," parse_pg_array map "," parse_pg_array "," type_cast_array "]}," ActiveRecord ConnectionAdapters PostgreSQLColumn Cast cidr_to_string":{"type":"method","name":"cidr_to_string","children":[],"call":["object instance_variable_get to_s count ","object instance_variable_get to_s ","object instance_variable_get ","object to_s ","IPAddr  === "]}," ActiveRecord ConnectionAdapters PostgreSQLColumn Cast string_to_cidr":{"type":"method","name":"string_to_cidr","children":[],"call":["IPAddr  new ","String  === ","string nil? "]}," ActiveRecord ConnectionAdapters PostgreSQLColumn Cast string_to_json":{"type":"method","name":"string_to_json","children":[],"call":["ActiveSupport JSON  decode ","String  === "]}," ActiveRecord ConnectionAdapters PostgreSQLColumn Cast range_to_string":{"type":"method","name":"range_to_string","children":[],"call":["object exclude_end? ","object end ","object end infinite? ","object end respond_to? ","object begin ","object begin infinite? ","object begin respond_to? ","object end respond_object end ? ","object begin respond_object end ? "]}," ActiveRecord ConnectionAdapters PostgreSQLColumn Cast array_to_string":{"type":"method","name":"array_to_string","children":[],"call":["casted_values join ","adapter type_cast "," quote_and_escape ","val == ","String  === ","value map "]}," ActiveRecord ConnectionAdapters PostgreSQLColumn Cast json_to_string":{"type":"method","name":"json_to_string","children":[],"call":["ActiveSupport JSON  encode ","Hash  === ","Array  === "]}," ActiveRecord ConnectionAdapters PostgreSQLColumn Cast string_to_hstore":{"type":"method","name":"string_to_hstore","children":[],"call":["Hash  [] ","k gsub gsub ","k gsub ","v gsub gsub ","v gsub ","v upcase == ","v upcase ","string scan map ","string scan ","String  === ","string nil? ","k gsub gsub  gsub gsub ","k gsub gsub  gsub ","v gsub gsub  gsub gsub ","v gsub gsub  gsub ","v gsub gsub  upcase == ","v gsub gsub  upcase "]}," ActiveRecord ConnectionAdapters PostgreSQLColumn Cast hstore_to_string":{"type":"method","name":"hstore_to_string","children":[],"call":["(send\n  (lvar :object) :map) join "," escape_hstore ","object map ","Hash  === "]}," ActiveRecord ConnectionAdapters PostgreSQLColumn Cast string_to_bit":{"type":"method","name":"string_to_bit","children":[],"call":["value [] hex to_s ","value [] hex ","value [] "]}," ActiveRecord ConnectionAdapters PostgreSQLColumn Cast string_to_time":{"type":"method","name":"string_to_time","children":[],"call":["- + ","string sub ","-1.0 / ","1.0 / ","String  === ","Float INFINITY  -@ "]}," ActiveRecord ConnectionAdapters PostgreSQLColumn Cast string_to_point":{"type":"method","name":"string_to_point","children":[],"call":[" Float ","string split map ","string split ","string [] ","string [] == ","string []  split map ","string []  split ","string []  [] ","string []  [] == "]}," ActiveRecord ConnectionAdapters PostgreSQLColumn Cast point_to_string":{"type":"method","name":"point_to_string","children":[],"call":["point [] "]}," ActiveRecord ConnectionAdapters PostgreSQLColumn ArrayParser add_item_to_array":{"type":"method","name":"add_item_to_array","children":[],"call":["array push ","current_item == ","quoted ! ","current_item length == ","current_item length "]}," ActiveRecord ConnectionAdapters PostgreSQLColumn ArrayParser parse_array_contents":{"type":"method","name":"parse_array_contents","children":[],"call":["current_item << "," add_item_to_array ","array push "," parse_array_contents ","local_index + ","string [] "]}," ActiveRecord ConnectionAdapters PostgreSQLColumn ArrayParser parse_data":{"type":"method","name":"parse_data","children":[],"call":[" parse_array_contents ","local_index + ","string [] ","local_index < ","string length "]}," ActiveRecord ConnectionAdapters PostgreSQLColumn ArrayParser parse_pg_array":{"type":"method","name":"parse_pg_array","children":[],"call":[" parse_data "]}," ActiveRecord ConnectionAdapters MysqlAdapter Fields alias_type":{"type":"method","name":"alias_type","children":[],"call":[]}," ActiveRecord ConnectionAdapters MysqlAdapter Fields register_type":{"type":"method","name":"register_type","children":[],"call":[]}," ActiveRecord ConnectionAdapters MysqlAdapter Fields Boolean type_cast":{"type":"method","name":"type_cast","children":[],"call":["ConnectionAdapters Column  value_to_boolean ","value nil? "]}," ActiveRecord ConnectionAdapters MysqlAdapter Fields Decimal type_cast":{"type":"method","name":"type_cast","children":[],"call":["ConnectionAdapters Column  value_to_decimal ","value nil? "]}," ActiveRecord ConnectionAdapters MysqlAdapter Fields Float type_cast":{"type":"method","name":"type_cast","children":[],"call":["value to_f ","value nil? "]}," ActiveRecord ConnectionAdapters MysqlAdapter Fields Float type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord ConnectionAdapters MysqlAdapter Fields Time type_cast":{"type":"method","name":"type_cast","children":[],"call":["ConnectionAdapters Column  string_to_dummy_time ","value nil? "]}," ActiveRecord ConnectionAdapters MysqlAdapter Fields Time type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord ConnectionAdapters MysqlAdapter Fields DateTime type_cast":{"type":"method","name":"type_cast","children":[],"call":["ConnectionAdapters Column  string_to_time ","value nil? "]}," ActiveRecord ConnectionAdapters MysqlAdapter Fields DateTime type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord ConnectionAdapters MysqlAdapter Fields Date type_cast":{"type":"method","name":"type_cast","children":[],"call":["ConnectionAdapters Column  value_to_date ","value nil? "]}," ActiveRecord ConnectionAdapters MysqlAdapter Fields Date type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord ConnectionAdapters MysqlAdapter Fields Integer type_cast":{"type":"method","name":"type_cast","children":[],"call":["value to_i ","value nil? "]}," ActiveRecord ConnectionAdapters MysqlAdapter Fields Identity type_cast":{"type":"method","name":"type_cast","children":[],"call":[]}," ActiveRecord ConnectionAdapters MysqlAdapter Fields Type type_cast_for_write":{"type":"method","name":"type_cast_for_write","children":[],"call":[]}," ActiveRecord ConnectionAdapters MysqlAdapter Fields Type type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord ConnectionHandling mysql_connection":{"type":"method","name":"mysql_connection","children":[],"call":["ConnectionAdapters MysqlAdapter  new "," logger ","Mysql  const_defined? ","mysql ssl_set ","config [] ","Mysql  init ","config [] to_s ","config symbolize_keys "," raise ","ActiveRecord NoDatabaseError  new ","error message ","error message include? ","Mysql  init  ssl_set ","config symbolize_keys  [] ","config symbolize_keys  [] to_s ","config symbolize_keys  symbolize_keys "]}," ActiveRecord ConnectionAdapters Mysql2Adapter initialize_schema_migrations_table":{"type":"method","name":"initialize_schema_migrations_table","children":[],"call":["ActiveRecord SchemaMigration  create_table ","@config [] == ","@config [] "," charset == "," charset "]}," ActiveRecord ConnectionHandling mysql2_connection":{"type":"method","name":"mysql2_connection","children":[],"call":["ConnectionAdapters Mysql2Adapter  new "," logger ","config [] ","Mysql2 Client  new ","config []= ","Mysql2 Client  const_defined? ","config [] nil? ","config symbolize_keys "," raise ","ActiveRecord NoDatabaseError  new ","error message ","error message include? ","config [] push ","FOUND_ROWS freeze ","config [] kind_of? ","error error_number == ","error error_number ","ConnectionAdapters Mysql2Adapter  new_client "," mysql2_adapter_class new "," mysql2_adapter_class ","config symbolize_keys  [] ","config symbolize_keys  []= ","config symbolize_keys  [] nil? ","config symbolize_keys  symbolize_keys ","config symbolize_keys  [] push ","config symbolize_keys  [] kind_of? ","ConnectionAdapters Mysql2Adapter  new_Mysql2 Client  new  "]}," ActiveRecord ConnectionAdapters ConnectionSpecification Resolver connection_url_to_hash":{"type":"method","name":"connection_url_to_hash","children":[],"call":["spec merge! ","Hash  [] symbolize_keys ","Hash  [] ","pair split ","config query split map ","config query split ","config query ","spec []= ","uri_parser unescape ","value is_a? ","spec map ","URI Parser  new ","value blank? ","spec reject! ","config host ","config path sub ","config path ","config port ","config password ","config user ","adapter == ","config scheme ","URI  parse ","config hostname ","URI  parse  query split map ","URI  parse  query split ","URI  parse  query ","URI Parser  new  unescape ","URI  parse  host ","URI  parse  path sub ","URI  parse  path ","URI  parse  port ","URI  parse  password ","URI  parse  user ","config scheme  == ","URI  parse  scheme ","URI  parse  hostname "]}," ActiveRecord ConnectionAdapters ConnectionSpecification Resolver resolve_hash_connection":{"type":"method","name":"resolve_hash_connection","children":[],"call":["ConnectionSpecification  new ","spec [] "," raise ","e backtrace ","e name "," require ","spec key? ","spec symbolize_keys ","spec merge! "," resolve_string_connection ","spec delete ","spec [] !~ "," resolve_url_connection ","spec symbolize_keys  [] ","spec symbolize_keys  key? ","spec symbolize_keys  symbolize_keys ","spec symbolize_keys  merge! ","spec symbolize_keys  delete ","spec symbolize_keys  [] !~ "," resolve_spec delete _connection "]}," ActiveRecord ConnectionAdapters ConnectionSpecification Resolver resolve_string_connection":{"type":"method","name":"resolve_string_connection","children":[],"call":[" resolve_hash_connection "," raise "," connection_url_to_hash "," configurations fetch "," configurations "," class connection_url_to_hash "," class "," resolve_url_connection "," resolve_symbol_connection ","ActiveSupport Deprecation  warn ","spec to_sym inspect ","spec to_sym ","spec !~ "," configurations key? ","ConnectionUrlResolver  new to_hash ","ConnectionUrlResolver  new ","(str \"              Passing a string to ActiveRecord::Base.establish_connection for a\\n\") squish "]}," ActiveRecord ConnectionAdapters ConnectionSpecification Resolver spec":{"type":"method","name":"spec","children":[],"call":[" resolve_hash_connection "," config "," resolve_string_connection "," config to_s ","Rails  env "," raise ","ConnectionSpecification  new ","spec [] ","e backtrace ","e name "," require ","spec key? "," resolve symbolize_keys "," resolve ","config to_s ","config is_a? ","spec delete ","spec config [] ","spec config ","ActiveRecord Base  respond_to? ","e message ","e class ","e path == ","e path "," resolve symbolize_keys  [] "," resolve symbolize_keys  key? "," resolve symbolize_keys  delete "," resolve symbolize_keys  config [] "," resolve symbolize_keys  config "]}," ActiveRecord ConnectionAdapters ConnectionSpecification Resolver initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters ConnectionSpecification initialize_dup":{"type":"method","name":"initialize_dup","children":[],"call":["original config dup ","original config "]}," ActiveRecord ConnectionAdapters ConnectionSpecification initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters Column value_to_date":{"type":"method","name":"value_to_date","children":[],"call":["value to_date ","value respond_to? "," fallback_string_to_date "," fast_string_to_date ","value empty? ","value is_a? ","value blank? "]}," ActiveRecord ConnectionAdapters Column type_cast_for_write":{"type":"method","name":"type_cast_for_write","children":[],"call":["value presence "," number? "]}," ActiveRecord ConnectionAdapters Column binary?":{"type":"method","name":"binary?","children":[],"call":[" type == "," type "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter configure_connection":{"type":"method","name":"configure_connection","children":[],"call":[" execute ","(send\n  (lvar :variables) :map) compact join ","(send\n  (lvar :variables) :map) compact "," quote ","k to_s ","v nil? ! ","v nil? ","v == ","variables map ","@config [] ","variables []= ","variables has_key? ! ","variables has_key? "," strict_mode? "," class type_cast_config_to_integer "," class ","wait_timeout is_a? ","@config fetch stringify_keys ","@config fetch ","@connection query ","encoding << ","defaults include? ","defaults include? ! ","variables delete ","(str \":default\") to_set ","(str \"NAMES \") dup ","(str \"NAMES \") +@ ","(send\n  (lvar :variables) :filter_map) join ","variables filter_map "," internal_execute ","(send\n  (lvar :@config fetch stringify_keys ) :map) compact join ","(send\n  (lvar :@config fetch stringify_keys ) :map) compact ","@config fetch stringify_keys  map ","@config fetch stringify_keys  []= ","@config fetch stringify_keys  has_key? ! ","@config fetch stringify_keys  has_key? ","@config []  is_a? "," class type_cast_config_to_integer  is_a? ","(str \"NAMES \") dup  << ","(str \"NAMES \") +@  << ","(str \":default\") to_set  include? ","(str \":default\") to_set  include? ! ","@config fetch stringify_keys  delete ","(send\n  (lvar :@config fetch stringify_keys ) :filter_map) join ","@config fetch stringify_keys  filter_map "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter remove_columns_sql":{"type":"method","name":"remove_columns_sql","children":[],"call":[" remove_column_sql ","column_names map "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter subquery_for":{"type":"method","name":"subquery_for","children":[],"call":["subselect from ","subsubselect as ","subselect project ","Arel  sql ","key name ","Arel SelectManager  new ","select engine ","subsubselect projections= ","select clone ","subsubselect distinct ","select orders any? ","select orders ","select offset ","select limit ","subsubselect distinct as ","Arel SelectManager  new project ","subselect as "," quote_column_name ","subselect distinct ","subselect projections= ","Arel SelectManager  new  from ","select clone  from ","subArel SelectManager  new  as ","subselect clone  as ","select clone  as ","Arel SelectManager  new  project ","select clone  project ","subArel SelectManager  new  projections= ","subselect clone  projections= ","select clone  projections= ","subArel SelectManager  new  distinct ","subselect clone  distinct ","select clone  distinct ","subArel SelectManager  new  distinct as ","subselect clone  distinct as ","select clone  distinct as ","Arel SelectManager  new  as ","Arel SelectManager  new  distinct ","Arel SelectManager  new  projections= "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter valid_type?":{"type":"method","name":"valid_type?","children":[],"call":[" native_database_types [] nil? ! "," native_database_types [] nil? "," native_database_types [] "," native_database_types "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter strict_mode?":{"type":"method","name":"strict_mode?","children":[],"call":[" class type_cast_config_to_boolean ","@config fetch "," class "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter add_index":{"type":"method","name":"add_index","children":[],"call":[" execute "," quote_table_name "," quote_column_name "," add_index_options "," add_sql_comment! ","sql << "," quote ","(str \"CREATE \") dup ","(str \"CREATE \") +@ "," schema_creation accept "," schema_creation ","CreateIndexDefinition  new "," index_exists? ","index name "," build_create_index_definition "," add_(str \"CREATE \") dup _comment! "," add_(str \"CREATE \") +@ _comment! ","(str \"CREATE \") dup  << ","(str \"CREATE \") +@  << "," build_CreateIndexDefinition  new _definition "," build_ build_create_index_definition _definition "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter empty_insert_statement_value":{"type":"method","name":"empty_insert_statement_value","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter begin_isolated_db_transaction":{"type":"method","name":"begin_isolated_db_transaction","children":[],"call":[" begin_db_transaction "," execute "," transaction_isolation_levels fetch "," transaction_isolation_levels "," internal_execute "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter index_algorithms":{"type":"method","name":"index_algorithms","children":[],"call":["ALGORITHM = INPLACE dup ","ALGORITHM = COPY dup ","ALGORITHM = DEFAULT dup ","ALGORITHM = INPLACE +@ ","ALGORITHM = COPY +@ ","ALGORITHM = DEFAULT +@ "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter supports_transaction_isolation?":{"type":"method","name":"supports_transaction_isolation?","children":[],"call":[" version [] >= "," version [] "," version "," version >= "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter Column blob_or_text_column?":{"type":"method","name":"blob_or_text_column?","children":[],"call":[" type == "," type "," sql_type =~ "," sql_type "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter schema_creation":{"type":"method","name":"schema_creation","children":[],"call":["SchemaCreation  new ","MySQL SchemaCreation  new "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter SchemaCreation add_column_position!":{"type":"method","name":"add_column_position!","children":[],"call":["sql << "," quote_column_name ","column after ","column first ","options [] "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter SchemaCreation visit_AddColumn":{"type":"method","name":"visit_AddColumn","children":[],"call":[" add_column_position! "," column_options "]}," ActiveRecord ConnectionAdapters AbstractAdapter index_algorithms":{"type":"method","name":"index_algorithms","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter extensions":{"type":"method","name":"extensions","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter supports_extensions?":{"type":"method","name":"supports_extensions?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter supports_transaction_isolation?":{"type":"method","name":"supports_transaction_isolation?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter supports_partial_index?":{"type":"method","name":"supports_partial_index?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter unprepared_statement":{"type":"method","name":"unprepared_statement","children":[],"call":[" unprepared_visitor ","@prepared_statement_status bind "," object_id "," prepared_statements_disabled_cache add "," prepared_statements_disabled_cache "," prepared_statements_disabled_cache add? "," prepared_statements_disabled_ prepared_statements_disabled_cache add  add "," prepared_statements_disabled_ prepared_statements_disabled_cache add?  add "," prepared_statements_disabled_ prepared_statements_disabled_cache add  "," prepared_statements_disabled_ prepared_statements_disabled_cache add?  "," prepared_statements_disabled_ prepared_statements_disabled_cache add  add? "," prepared_statements_disabled_ prepared_statements_disabled_cache add?  add? "]}," ActiveRecord ConnectionAdapters AbstractAdapter unprepared_visitor":{"type":"method","name":"unprepared_visitor","children":[],"call":[" class BindSubstitution  new "," class "]}," ActiveRecord ConnectionAdapters AbstractAdapter schema_cache=":{"type":"method","name":"schema_cache=","children":[],"call":["cache connection= ","@pool set_schema_cache "]}," ActiveRecord ConnectionAdapters AbstractAdapter schema_creation":{"type":"method","name":"schema_creation","children":[],"call":["SchemaCreation  new "]}," ActiveRecord ConnectionAdapters AbstractAdapter SchemaCreation add_column_options!":{"type":"method","name":"add_column_options!","children":[],"call":["@conn add_column_options! ","sql << ","options [] == ","options [] ","@conn quote "," options_include_default? "," quote_value "," quote_default_expression "]}," ActiveRecord ConnectionAdapters AbstractAdapter SchemaCreation type_to_sql":{"type":"method","name":"type_to_sql","children":[],"call":["@conn type_to_sql ","type to_sym "]}," ActiveRecord ConnectionAdapters AbstractAdapter SchemaCreation quote_table_name":{"type":"method","name":"quote_table_name","children":[],"call":["@conn quote_table_name "]}," ActiveRecord ConnectionAdapters AbstractAdapter SchemaCreation quote_column_name":{"type":"method","name":"quote_column_name","children":[],"call":["@conn quote_column_name "]}," ActiveRecord ConnectionAdapters AbstractAdapter SchemaCreation column_options":{"type":"method","name":"column_options","children":[],"call":["column_options []= ","o default ","o default nil? ","o null ","o null nil? ","o after ","o first ","o comment ","o collation ","o primary_key ","o auto_increment ","o options merge ","o options "]}," ActiveRecord ConnectionAdapters AbstractAdapter SchemaCreation visit_TableDefinition":{"type":"method","name":"visit_TableDefinition","children":[],"call":["create_sql << ","o options ","(send\n  (send\n    (lvar :o) :columns) :map) join "," accept ","o columns map ","o columns "," quote_table_name ","o name ","o temporary ","@conn to_sql ","o as "," add_table_options! "," table_options ","statements join ","statements present? ","statements concat "," foreign_key_in_create ","o foreign_keys map ","o foreign_keys "," supports_foreign_keys? "," index_in_create ","o indexes map ","o indexes "," supports_indexes_in_create? ","statements << ","o primary_keys "," supports_foreign_keys_in_create? "," to_sql ","(str \"CREATE\") dup ","o if_not_exists ","(str \"CREATE\") +@ "," table_modifier_in_create ","(str \"CREATE\") dup  << ","(str \"CREATE\") +@  << "]}," ActiveRecord ConnectionAdapters AbstractAdapter SchemaCreation visit_ColumnDefinition":{"type":"method","name":"visit_ColumnDefinition","children":[],"call":[" add_column_options! "," column_options ","o primary_key? "," quote_column_name ","o name "," type_to_sql ","o scale ","o precision ","o limit ","o type to_sym ","o type ","o type == ","o sql_type ","o sql_type= ","o options ","(begin\n  (send nil :quote_column_name\n    (send\n      (lvar :o) :name))) dup ","(begin\n  (send nil :quote_column_name\n    (send\n      (lvar :o) :name))) +@ ","o  type_to_sql  ","o  type_to_sql = "]}," ActiveRecord ConnectionAdapters AbstractAdapter SchemaCreation visit_AddColumn":{"type":"method","name":"visit_AddColumn","children":[],"call":[" add_column_options! "," column_options "," quote_column_name ","o name "," type_to_sql ","o scale ","o precision ","o limit ","o type to_sym ","o type "," accept "]}," ActiveRecord ConnectionAdapters AbstractAdapter SchemaCreation visit_AlterTable":{"type":"method","name":"visit_AlterTable","children":[],"call":["sql << ","(send\n  (send\n    (lvar :o) :adds) :map) join "," visit_AddColumn ","o adds map ","o adds "," quote_table_name ","o name ","(send\n  (send\n    (lvar :o) :foreign_key_drops) :map) join "," visit_DropForeignKey ","o foreign_key_drops map ","o foreign_key_drops ","(send\n  (send\n    (lvar :o) :foreign_key_adds) :map) join "," visit_AddForeignKey ","o foreign_key_adds map ","o foreign_key_adds "," accept ","(str \"ALTER TABLE \") dup ","(str \"ALTER TABLE \") +@ ","(str \"ALTER TABLE \") dup  << ","(str \"ALTER TABLE \") +@  << "]}," ActiveRecord ConnectionAdapters AbstractAdapter SchemaCreation accept":{"type":"method","name":"accept","children":[],"call":[" send ","o class name split last ","o class name split ","o class name ","o class ","@cache [] "]}," ActiveRecord ConnectionAdapters AbstractAdapter SchemaCreation initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter valid_type?":{"type":"method","name":"valid_type?","children":[],"call":[" native_database_types [] nil? ! "," native_database_types [] nil? "," native_database_types [] "," native_database_types "]}," ActiveRecord ConnectionAdapters AbstractAdapter type_cast_config_to_boolean":{"type":"method","name":"type_cast_config_to_boolean","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter type_cast_config_to_integer":{"type":"method","name":"type_cast_config_to_integer","children":[],"call":[]}," ActiveRecord ConnectionAdapters SavepointTransaction perform_commit":{"type":"method","name":"perform_commit","children":[],"call":[" connection release_savepoint "," connection ","@state parent= "," parent state "," parent ","@state set_state "," parent add_record "," records each "," records "]}," ActiveRecord ConnectionAdapters SavepointTransaction perform_rollback":{"type":"method","name":"perform_rollback","children":[],"call":[" rollback_records "," connection rollback_to_savepoint "," connection "]}," ActiveRecord ConnectionAdapters SavepointTransaction initialize":{"type":"method","name":"initialize","children":[],"call":["connection create_savepoint "," raise ","options [] ","parent_transaction state add_child ","parent_transaction state "," isolation_level "]}," ActiveRecord ConnectionAdapters RealTransaction perform_commit":{"type":"method","name":"perform_commit","children":[],"call":[" commit_records "," connection commit_db_transaction "," connection "]}," ActiveRecord ConnectionAdapters RealTransaction perform_rollback":{"type":"method","name":"perform_rollback","children":[],"call":[" rollback_records "," connection rollback_db_transaction "," connection "]}," ActiveRecord ConnectionAdapters RealTransaction initialize":{"type":"method","name":"initialize","children":[],"call":["connection begin_db_transaction ","connection begin_isolated_db_transaction ","options [] "]}," ActiveRecord ConnectionAdapters OpenTransaction open?":{"type":"method","name":"open?","children":[],"call":[]}," ActiveRecord ConnectionAdapters OpenTransaction closed?":{"type":"method","name":"closed?","children":[],"call":[]}," ActiveRecord ConnectionAdapters OpenTransaction commit_records":{"type":"method","name":"commit_records","children":[],"call":["record logger error ","record logger ","record respond_to? ","record committed! "," records uniq each "," records uniq "," records ","@state set_state "]}," ActiveRecord ConnectionAdapters OpenTransaction rollback_records":{"type":"method","name":"rollback_records","children":[],"call":["record logger error ","record logger ","record respond_to? ","record rolledback! "," parent closed? "," parent "," records uniq each "," records uniq "," records ","@state set_state "]}," ActiveRecord ConnectionAdapters OpenTransaction add_record":{"type":"method","name":"add_record","children":[],"call":["record set_transaction_state "," records << "," records ","record has_transactional_callbacks? "]}," ActiveRecord ConnectionAdapters OpenTransaction commit":{"type":"method","name":"commit","children":[],"call":[" parent "," perform_commit "]}," ActiveRecord ConnectionAdapters OpenTransaction rollback":{"type":"method","name":"rollback","children":[],"call":[" parent "," perform_rollback "]}," ActiveRecord ConnectionAdapters OpenTransaction begin":{"type":"method","name":"begin","children":[],"call":["SavepointTransaction  new "," connection "," parent begin "," parent "," finishing? "]}," ActiveRecord ConnectionAdapters OpenTransaction number":{"type":"method","name":"number","children":[],"call":[" parent number + "," parent number "," parent "," finishing? "]}," ActiveRecord ConnectionAdapters OpenTransaction joinable?":{"type":"method","name":"joinable?","children":[],"call":[" finishing? ! "," finishing? "]}," ActiveRecord ConnectionAdapters OpenTransaction finishing?":{"type":"method","name":"finishing?","children":[],"call":[]}," ActiveRecord ConnectionAdapters OpenTransaction initialize":{"type":"method","name":"initialize","children":[],"call":["options fetch "]}," ActiveRecord ConnectionAdapters ClosedTransaction add_record":{"type":"method","name":"add_record","children":[],"call":[]}," ActiveRecord ConnectionAdapters ClosedTransaction joinable?":{"type":"method","name":"joinable?","children":[],"call":[]}," ActiveRecord ConnectionAdapters ClosedTransaction open?":{"type":"method","name":"open?","children":[],"call":[]}," ActiveRecord ConnectionAdapters ClosedTransaction closed?":{"type":"method","name":"closed?","children":[],"call":[]}," ActiveRecord ConnectionAdapters ClosedTransaction begin":{"type":"method","name":"begin","children":[],"call":["RealTransaction  new "," connection "]}," ActiveRecord ConnectionAdapters ClosedTransaction number":{"type":"method","name":"number","children":[],"call":[]}," ActiveRecord ConnectionAdapters TransactionState set_state":{"type":"method","name":"set_state","children":[],"call":[" raise ","VALID_STATES  include? ! ","VALID_STATES  include? "," nullify! "," commit! "," rollback! ","ActiveSupport Deprecation  warn ","(str \"          The set_state method is deprecated and will be removed in\\n\") squish "]}," ActiveRecord ConnectionAdapters TransactionState rolledback?":{"type":"method","name":"rolledback?","children":[],"call":["@state == "]}," ActiveRecord ConnectionAdapters TransactionState committed?":{"type":"method","name":"committed?","children":[],"call":["@state == "]}," ActiveRecord ConnectionAdapters TransactionState initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters Transaction state":{"type":"method","name":"state","children":[],"call":[]}," ActiveRecord ConnectionAdapters Transaction initialize":{"type":"method","name":"initialize","children":[],"call":["TransactionState  new ","options fetch ","options [] ","TransactionInstrumenter  new "]}," ActiveRecord ConnectionAdapters SchemaStatements update_table_definition":{"type":"method","name":"update_table_definition","children":[],"call":["Table  new "]}," ActiveRecord ConnectionAdapters SchemaStatements create_alter_table":{"type":"method","name":"create_alter_table","children":[],"call":["AlterTable  new "," create_table_definition "]}," ActiveRecord ConnectionAdapters SchemaStatements create_table_definition":{"type":"method","name":"create_table_definition","children":[],"call":["TableDefinition  new "," native_database_types "]}," ActiveRecord ConnectionAdapters SchemaStatements rename_column_indexes":{"type":"method","name":"rename_column_indexes","children":[],"call":[" rename_index "," index_name ","index columns ","generated_index_name == ","index name ","old_columns []= ","old_columns index ","index columns dup ","index columns include? "," indexes each "," indexes ","new_column_name to_s ","column_name to_s "," index_name  == ","index columns dup  []= ","index columns dup  index "]}," ActiveRecord ConnectionAdapters SchemaStatements rename_table_indexes":{"type":"method","name":"rename_table_indexes","children":[],"call":[" rename_index "," index_name ","index columns ","generated_index_name == ","index name "," indexes each "," indexes "," index_name  == "]}," ActiveRecord ConnectionAdapters SchemaStatements remove_reference":{"type":"method","name":"remove_reference","children":[],"call":[" remove_column ","options [] "," remove_foreign_key ","ref_name to_s pluralize ","ref_name to_s ","Base  pluralize_table_names ","foreign_key is_a? ","foreign_key_options [] ","foreign_key merge ","options slice ","foreign_key merge  [] "]}," ActiveRecord ConnectionAdapters SchemaStatements add_reference":{"type":"method","name":"add_reference","children":[],"call":[" add_index ","index_options is_a? ","(str \"id\") map "," add_column ","polymorphic is_a? ","options delete ","(str \"type\") map "," add_foreign_key ","foreign_key_options is_a? ","ref_name to_s pluralize ","ref_name to_s "," raise ","Base  pluralize_table_names ","ReferenceDefinition  new add_to "," update_table_definition ","ReferenceDefinition  new ","ReferenceDefinition  new add ","options delete  is_a? "]}," ActiveRecord ConnectionAdapters SchemaStatements change_column_null":{"type":"method","name":"change_column_null","children":[],"call":[" raise "]}," ActiveRecord ConnectionAdapters SchemaStatements remove_columns":{"type":"method","name":"remove_columns","children":[],"call":[" remove_column ","column_names each "," raise ","ArgumentError  new ","column_names empty? "," execute ","remove_column_fragments join "," quote_table_name "," remove_columns_for_alter "," remove_columns_for_alter  join "]}," ActiveRecord ConnectionAdapters SchemaStatements drop_join_table":{"type":"method","name":"drop_join_table","children":[],"call":[" drop_table "," find_join_table_name "," find_ find_join_table_name  "]}," ActiveRecord ConnectionAdapters SchemaStatements create_join_table":{"type":"method","name":"create_join_table","children":[],"call":[" block_given? ","td integer "," create_table ","options merge! ","t to_s singularize foreign_key ","t to_s singularize ","t to_s ","(lvar :table_1) map ","column_options reverse_merge! ","options delete "," find_join_table_name ","td send ","column_options delete ","td references "," reference_name_for_table "," find_ find_join_table_name  "]}," ActiveRecord ConnectionAdapters ColumnDumper default_string":{"type":"method","name":"default_string","children":[],"call":["value inspect ","subnet_mask to_s count ","subnet_mask to_s ","value to_s ","subnet_mask == ","2 ** - ","2 ** ","value instance_variable_get ","value inspect gsub ","value instance_variable_get  to_s count ","value instance_variable_get  to_s ","value instance_variable_get  == "]}," ActiveRecord ConnectionAdapters ColumnDumper migration_keys":{"type":"method","name":"migration_keys","children":[],"call":[" column_options_keys "]}," ActiveRecord ConnectionAdapters ColumnDumper prepare_column_options":{"type":"method","name":"prepare_column_options","children":[],"call":["spec []= "," default_string ","column default ","column has_default? ","column null ","column scale inspect ","column scale ","column precision inspect ","column precision ","column limit inspect ","column limit ","spec [] != ","spec [] ","column limit != ","types [] [] ","types [] ","column type ","column type to_s ","column sql_type ","column type == ","column name inspect ","column name ","default nil? "," schema_default ","limit inspect ","spec delete ","spec [] nil? ","column comment inspect ","column comment ","column comment present? "," schema_collation "," schema_scale "," schema_precision "," schema_limit "," schema_type "," schema_type to_s ","  schema_default _string ","column  schema_default  ","column has_ schema_default ? ","column  schema_scale  inspect ","column  schema_scale  ","column  schema_precision  inspect ","column  schema_precision  ","column  schema_limit  inspect ","column  schema_limit  ","column  schema_limit  != "," schema_default  nil? "," schema_ schema_default  "," schema_limit  inspect "," schema_ schema_collation  "," schema_ schema_scale  "," schema_ schema_precision  "," schema_ schema_limit  "]}," ActiveRecord ConnectionAdapters ColumnDumper column_spec":{"type":"method","name":"column_spec","children":[],"call":["spec [] insert ","k to_s ","spec [] ","(send\n  (send\n    (lvar :spec) :keys) :-\n  (array\n    (sym :name)\n    (sym :type))) each ","spec keys - ","spec keys "," prepare_column_options ","spec []= "," schema_type to_s "," schema_type ","column name inspect ","column name ","Hash  [] "," prepare_column_options map "," schema_type_with_virtual "," prepare_column_options  [] insert ","Hash  []  [] insert "," prepare_column_options  [] ","Hash  []  [] ","(send\n  (send\n    (lvar : prepare_column_options ) :keys) :-\n  (array\n    (sym :name)\n    (sym :type))) each ","(send\n  (send\n    (lvar :Hash  [] ) :keys) :-\n  (array\n    (sym :name)\n    (sym :type))) each "," prepare_column_options  keys - ","Hash  []  keys - "," prepare_column_options  keys ","Hash  []  keys "," prepare_column_options  []= ","Hash  []  []= ","column name in prepare_column_options t ","column name inHash  [] t "]}," ActiveRecord ConnectionAdapters Table rename_index":{"type":"method","name":"rename_index","children":[],"call":["@base rename_index "," name "]}," ActiveRecord ConnectionAdapters AlterTable add_column":{"type":"method","name":"add_column","children":[],"call":["@adds << ","@td new_column_definition ","type to_sym ","name to_s ","AddColumnDefinition  new ","type to_sym  to_sym ","name to_s  to_s "]}," ActiveRecord ConnectionAdapters AlterTable name":{"type":"method","name":"name","children":[],"call":["@td name "]}," ActiveRecord ConnectionAdapters AlterTable initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters TableDefinition primary_key_column_name":{"type":"method","name":"primary_key_column_name","children":[],"call":["primary_key_column name ","c primary_key? "," columns detect "," columns ","c type == ","c type "]}," ActiveRecord ConnectionAdapters TableDefinition create_column_definition":{"type":"method","name":"create_column_definition","children":[],"call":["ColumnDefinition  new ","options except assert_valid_keys "," valid_column_definition_options ","options except ","options [] "]}," ActiveRecord ConnectionAdapters TableDefinition index":{"type":"method","name":"index","children":[],"call":[" indexes []= "," indexes "," indexes << "]}," ActiveRecord ConnectionAdapters TableDefinition remove_column":{"type":"method","name":"remove_column","children":[],"call":["@columns_hash delete ","name to_s "]}," ActiveRecord ConnectionAdapters TableDefinition columns":{"type":"method","name":"columns","children":[],"call":["@columns_hash values "]}," ActiveRecord ConnectionAdapters ColumnDefinition primary_key?":{"type":"method","name":"primary_key?","children":[],"call":[" type to_sym == "," type to_sym "," type "," primary_key "]}," ActiveRecord ConnectionAdapters Quoting quote_table_name_for_assignment":{"type":"method","name":"quote_table_name_for_assignment","children":[],"call":[" quote_table_name "]}," ActiveRecord ConnectionAdapters DatabaseStatements subquery_for":{"type":"method","name":"subquery_for","children":[],"call":["subselect projections= ","select clone ","select clone  projections= "]}," ActiveRecord ConnectionAdapters DatabaseStatements join_to_delete":{"type":"method","name":"join_to_delete","children":[],"call":["delete where ","key in "," subquery_for "]}," ActiveRecord ConnectionAdapters DatabaseStatements begin_isolated_db_transaction":{"type":"method","name":"begin_isolated_db_transaction","children":[],"call":[" raise "]}," ActiveRecord ConnectionAdapters DatabaseStatements transaction_isolation_levels":{"type":"method","name":"transaction_isolation_levels","children":[],"call":[]}," ActiveRecord ConnectionAdapters DatabaseStatements reset_transaction":{"type":"method","name":"reset_transaction","children":[],"call":["ClosedTransaction  new ","TransactionManager  new ","ConnectionAdapters TransactionManager  new ","@transaction_manager restore_transactions "," block_given? ","ClosedTransaction  new _manager restore_transactions ","TransactionManager  new  restore_transactions ","ConnectionAdapters TransactionManager  new  restore_transactions "]}," ActiveRecord ConnectionAdapters DatabaseStatements rollback_transaction":{"type":"method","name":"rollback_transaction","children":[],"call":["@transaction rollback ","@transaction rollback  rollback "]}," ActiveRecord ConnectionAdapters DatabaseStatements commit_transaction":{"type":"method","name":"commit_transaction","children":[],"call":["@transaction commit ","@transaction commit  commit "]}," ActiveRecord ConnectionAdapters DatabaseStatements begin_transaction":{"type":"method","name":"begin_transaction","children":[],"call":["@transaction begin ","@transaction begin  begin "]}," ActiveRecord ConnectionAdapters DatabaseStatements transaction_open?":{"type":"method","name":"transaction_open?","children":[],"call":["@transaction open? "," current_transaction open? "," current_transaction "]}," ActiveRecord ConnectionAdapters DatabaseStatements current_transaction":{"type":"method","name":"current_transaction","children":[],"call":[]}," ActiveRecord ConnectionAdapters DatabaseStatements within_new_transaction":{"type":"method","name":"within_new_transaction","children":[],"call":[" raise "," rollback_transaction "," commit_transaction "," begin_transaction "," rollback_ begin_transaction  "," commit_ begin_transaction  "," begin_ begin_transaction  "]}," ActiveRecord ConnectionAdapters DatabaseStatements initialize":{"type":"method","name":"initialize","children":[],"call":[" reset_transaction "]}," ActiveRecord ConnectionAdapters DatabaseLimits allowed_index_name_length":{"type":"method","name":"allowed_index_name_length","children":[],"call":[" index_name_length "]}," ActiveRecord ConnectionAdapters ConnectionHandler pool_from_any_process_for":{"type":"method","name":"pool_from_any_process_for","children":[],"call":["owner_to_pool [] ","owner name ","v [] ","@owner_to_pool values find ","@owner_to_pool values ","@owner_to_pool values reverse find ","@owner_to_pool values reverse "]}," ActiveRecord ConnectionAdapters ConnectionHandler pool_for":{"type":"method","name":"pool_for","children":[],"call":[" owner_to_pool []= ","owner name "," owner_to_pool "," establish_connection ","ancestor_pool spec "," pool_from_any_process_for "," owner_to_pool fetch ","pool schema_cache= ","ancestor_pool schema_cache "," establish_connection tap "," pool_from_any_process_for  spec "," pool_from_any_process_for  schema_cache "]}," ActiveRecord ConnectionAdapters ConnectionHandler class_to_pool":{"type":"method","name":"class_to_pool","children":[],"call":["@class_to_pool [] ","Process  pid "]}," ActiveRecord ConnectionAdapters ConnectionHandler owner_to_pool":{"type":"method","name":"owner_to_pool","children":[],"call":["@owner_to_pool [] ","Process  pid "]}," ActiveRecord ConnectionAdapters ConnectionHandler connection_pool_list":{"type":"method","name":"connection_pool_list","children":[],"call":[" owner_to_pool values compact "," owner_to_pool values "," owner_to_pool ","m pool_configs map ","m pool_configs "," owner_to_pool_manager values flat_map "," owner_to_pool_manager values "," owner_to_pool_manager "," connection_name_to_pool_manager values flat_map "," connection_name_to_pool_manager values "," connection_name_to_pool_manager ","role == ","ActiveRecord Base  current_role "," deprecation_for_pool_handling "," __method__ ","role nil? ","ActiveRecord Base  current_role  == ","ActiveRecord Base  current_ActiveRecord Base  current_role  ","ActiveRecord Base  current_role  nil? "]}," ActiveRecord ConnectionAdapters ConnectionPool acquire_connection":{"type":"method","name":"acquire_connection","children":[],"call":["@available poll "," checkout_new_connection ","@connections size < ","@connections size "," reap "," try_to_checkout_new_connection "," checkout_new_@available poll ection ","@@available poll ections size < ","@@available poll ections size "," try_to_checkout_new_@available poll ection "]}," ActiveRecord ConnectionAdapters ConnectionPool reap":{"type":"method","name":"reap","children":[],"call":[" remove ","conn active? ! ","conn active? ","stale > ","conn last_use ","conn in_use? "," connections dup each "," connections dup "," connections ","Time  now - ","Time  now "," synchronize ","conn active_threadsafe? ! ","conn active_threadsafe? "," checkin ","conn reset! ","stale_connections each ","conn owner alive? ! ","conn owner alive? ","conn owner ","@connections select ","conn steal! ","(send\n  (ivar :@connections) :select) each "," discarded? ","Time  now -  > ","Time  now - _connections each "]}," ActiveRecord ConnectionAdapters ConnectionPool remove":{"type":"method","name":"remove","children":[],"call":["@available add "," checkout_new_connection ","@available any_waiting? "," release ","@available delete ","@connections delete "," synchronize ","conn owner "," bulk_make_new_connections "," remove_connection_from_thread_cache "]}," ActiveRecord ConnectionAdapters ConnectionPool Reaper run":{"type":"method","name":"run","children":[],"call":["p reap "," sleep ","Thread  new "," pool "," frequency "," loop ","p flush "," frequency > "," class register_pool "," class "]}," ActiveRecord ConnectionAdapters ConnectionPool Reaper initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters ConnectionPool Queue wait_poll":{"type":"method","name":"wait_poll","children":[],"call":[" raise ","could not obtain a database connection within %0.3f seconds (waited %0.3f seconds) % ","elapsed >= ","Time  now - ","Time  now "," remove "," any? ","@cond wait ","timeout - "," loop ","could not obtain a connection from the pool within %0.3f seconds (waited %0.3f seconds); all pooled connections were in use % ","ActiveSupport Dependencies  interlock permit_concurrent_loads ","ActiveSupport Dependencies  interlock ","Concurrent  monotonic_time - ","Concurrent  monotonic_time ","Process  clock_gettime - ","Process  clock_gettime ","Time  now -  >= ","Concurrent  monotonic_time -  >= ","Process  clock_gettime -  >= "]}," ActiveRecord ConnectionAdapters ConnectionPool Queue no_wait_poll":{"type":"method","name":"no_wait_poll","children":[],"call":[" remove "," can_remove_no_wait? "]}," ActiveRecord ConnectionAdapters ConnectionPool Queue remove":{"type":"method","name":"remove","children":[],"call":["@queue shift ","@queue pop "]}," ActiveRecord ConnectionAdapters ConnectionPool Queue can_remove_no_wait?":{"type":"method","name":"can_remove_no_wait?","children":[],"call":["@queue size > ","@queue size "]}," ActiveRecord ConnectionAdapters ConnectionPool Queue any?":{"type":"method","name":"any?","children":[],"call":["@queue empty? ! ","@queue empty? "]}," ActiveRecord ConnectionAdapters ConnectionPool Queue synchronize":{"type":"method","name":"synchronize","children":[],"call":["@lock synchronize "]}," ActiveRecord ConnectionAdapters ConnectionPool Queue poll":{"type":"method","name":"poll","children":[],"call":[" no_wait_poll "," wait_poll "," synchronize "," internal_poll "]}," ActiveRecord ConnectionAdapters ConnectionPool Queue clear":{"type":"method","name":"clear","children":[],"call":["@queue clear "," synchronize "]}," ActiveRecord ConnectionAdapters ConnectionPool Queue delete":{"type":"method","name":"delete","children":[],"call":["@queue delete "," synchronize "]}," ActiveRecord ConnectionAdapters ConnectionPool Queue add":{"type":"method","name":"add","children":[],"call":["@cond signal ","@queue push "," synchronize "]}," ActiveRecord ConnectionAdapters ConnectionPool Queue num_waiting":{"type":"method","name":"num_waiting","children":[],"call":[" synchronize "]}," ActiveRecord ConnectionAdapters ConnectionPool Queue any_waiting?":{"type":"method","name":"any_waiting?","children":[],"call":["@num_waiting > "," synchronize "]}," ActiveRecord ConnectionAdapters ConnectionPool Queue initialize":{"type":"method","name":"initialize","children":[],"call":["@lock new_cond "]}," ActiveRecord Callbacks update_record":{"type":"method","name":"update_record","children":[],"call":[" run_callbacks "]}," ActiveRecord Callbacks create_record":{"type":"method","name":"create_record","children":[],"call":[" run_callbacks "]}," ActiveRecord AutosaveAssociation destroyed_by_association":{"type":"method","name":"destroyed_by_association","children":[],"call":[]}," ActiveRecord AutosaveAssociation destroyed_by_association=":{"type":"method","name":"destroyed_by_association=","children":[],"call":[]}," ActiveRecord AttributeMethods typecasted_attribute_value":{"type":"method","name":"typecasted_attribute_value","children":[],"call":[" read_attribute "," _read_attribute "]}," ActiveRecord AttributeMethods pk_attribute?":{"type":"method","name":"pk_attribute?","children":[],"call":[" column_for_attribute primary "," column_for_attribute ","name == "," class primary_key "," class "]}," ActiveRecord AttributeMethods readonly_attribute?":{"type":"method","name":"readonly_attribute?","children":[],"call":[" class readonly_attributes include? "," class readonly_attributes "," class "]}," ActiveRecord AttributeMethods attributes_for_create":{"type":"method","name":"attributes_for_create","children":[],"call":["(and\n  (send nil :pk_attribute?\n    (lvar :name))\n  (send\n    (send nil :id) :nil?)) ! "," id nil? "," id "," pk_attribute? "," column_for_attribute ","attribute_names select ","attribute_names reject ","attribute_names delete_if "," class column_names "," class "," column_for_attribute virtual? "]}," ActiveRecord AttributeMethods attributes_for_update":{"type":"method","name":"attributes_for_update","children":[],"call":[" readonly_attribute? ! "," readonly_attribute? "," column_for_attribute ","attribute_names select "," pk_attribute? ! "," pk_attribute? ","attribute_names reject ","attribute_names delete_if "," class column_names "," class "," class readonly_attribute? "," column_for_attribute virtual? "," class counter_cache_column? "]}," ActiveRecord AttributeMethods arel_attributes_with_values":{"type":"method","name":"arel_attributes_with_values","children":[],"call":["attrs []= "," typecasted_attribute_value ","arel_table [] ","attribute_names each "," class arel_table "," class "," _read_attribute "," class arel_table  [] "," class  class arel_table  "]}," ActiveRecord AttributeMethods arel_attributes_with_values_for_update":{"type":"method","name":"arel_attributes_with_values_for_update","children":[],"call":[" arel_attributes_with_values "," attributes_for_update "]}," ActiveRecord AttributeMethods arel_attributes_with_values_for_create":{"type":"method","name":"arel_attributes_with_values_for_create","children":[],"call":[" arel_attributes_with_values "," attributes_for_create "]}," ActiveRecord AttributeMethods TimeZoneConversion Type type":{"type":"method","name":"type","children":[],"call":["@column type "]}," ActiveRecord AttributeMethods TimeZoneConversion Type type_cast":{"type":"method","name":"type_cast","children":[],"call":["value in_time_zone ","value acts_like? ","@column type_cast ","@column type_cast  in_time_zone ","@column type_cast  acts_like? "]}," ActiveRecord AttributeMethods TimeZoneConversion Type initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord AttributeMethods Serialization Behavior typecasted_attribute_value":{"type":"method","name":"typecasted_attribute_value","children":[],"call":["@attributes [] serialized_value ","@attributes [] "," class serialized_attributes include? "," class serialized_attributes "," class "]}," ActiveRecord AttributeMethods Serialization Behavior attributes_before_type_cast":{"type":"method","name":"attributes_before_type_cast","children":[],"call":["attributes []= ","attributes [] unserialized_value ","attributes [] ","attributes key? "," class serialized_attributes each_key "," class serialized_attributes "," class "," dup tap "," dup "]}," ActiveRecord AttributeMethods Serialization Behavior read_attribute_before_type_cast":{"type":"method","name":"read_attribute_before_type_cast","children":[],"call":[" unserialized_value "," class serialized_attributes include? "," class serialized_attributes "," class "]}," ActiveRecord AttributeMethods Serialization Behavior _field_changed?":{"type":"method","name":"_field_changed?","children":[],"call":["old != "," class serialized_attributes include? "," class serialized_attributes "," class "]}," ActiveRecord AttributeMethods Serialization Behavior type_cast_attribute_for_write":{"type":"method","name":"type_cast_attribute_for_write","children":[],"call":["Attribute  new "," class serialized_attributes [] ","column name "," class serialized_attributes "," class "]}," ActiveRecord AttributeMethods Serialization Behavior ClassMethods initialize_attributes":{"type":"method","name":"initialize_attributes","children":[],"call":["attributes []= ","Attribute  new ","attributes [] ","attributes key? "," serialized_attributes each "," serialized_attributes ","options delete "]}," ActiveRecord AttributeMethods Serialization Type type":{"type":"method","name":"type","children":[],"call":["@column type "]}," ActiveRecord AttributeMethods Serialization Type type_cast":{"type":"method","name":"type_cast","children":[],"call":["value unserialized_value ","@column type_cast ","value value ","value state == ","value state "]}," ActiveRecord AttributeMethods Serialization Type initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord AttributeMethods Serialization serialized_attributes":{"type":"method","name":"serialized_attributes","children":[],"call":[" class serialized_attributes "," class ","ActiveSupport Deprecation  warn "]}," ActiveRecord AttributeMethods PrimaryKey attribute_method?":{"type":"method","name":"attribute_method?","children":[],"call":["attr_name == "]}," ActiveRecord AttributeMethods PrimaryKey id_before_type_cast":{"type":"method","name":"id_before_type_cast","children":[],"call":[" read_attribute_before_type_cast "," class primary_key "," class "," sync_with_transaction_state "," attribute_before_type_cast ","@primary_key map "," class composite_primary_key? "]}," ActiveRecord AttributeMethods Dirty non_zero?":{"type":"method","name":"non_zero?","children":[],"call":["value !~ "]}," ActiveRecord AttributeMethods Dirty keys_for_partial_write":{"type":"method","name":"keys_for_partial_write","children":[],"call":[" changed | "," attributes keys & "," class serialized_attributes keys "," class serialized_attributes "," class "," attributes keys "," attributes "," changed "," changed & "," persistable_attribute_names "," class column_names "," changed_attribute_names_to_save & "," changed_attribute_names_to_save "]}," ActiveRecord AttributeMethods Dirty create_record":{"type":"method","name":"create_record","children":[],"call":[" keys_for_partial_write "," partial_writes? "]}," ActiveRecord AttributeMethods Dirty update_record":{"type":"method","name":"update_record","children":[],"call":[" keys_for_partial_write "," partial_writes? "]}," ActiveRecord AttributeMethods Dirty partial_updates":{"type":"method","name":"partial_updates","children":[],"call":[]}," ActiveRecord AttributeMethods Dirty partial_updates?":{"type":"method","name":"partial_updates?","children":[],"call":[]}," ActiveRecord AttributeMethods Dirty partial_updates=":{"type":"method","name":"partial_updates=","children":[],"call":[]}," ActiveRecord AttributeAssignment MultiparameterAttribute extract_max_param":{"type":"method","name":"extract_max_param","children":[],"call":["(send\n  (send\n    (send nil :values) :keys) :max) min "," values keys max "," values keys "," values "]}," ActiveRecord AttributeAssignment MultiparameterAttribute validate_required_parameters!":{"type":"method","name":"validate_required_parameters!","children":[],"call":[" raise ","ArgumentError  new "," name "," values key? ! "," values key? "," values ","positions detect "]}," ActiveRecord AttributeAssignment MultiparameterAttribute blank_date_parameter?":{"type":"method","name":"blank_date_parameter?","children":[],"call":[" values [] blank? "," values [] "," values ","(irange\n  (int 1)\n  (int 3)) any? "]}," ActiveRecord AttributeAssignment MultiparameterAttribute read_other":{"type":"method","name":"read_other","children":[],"call":["klass new "," values values_at "," values "," validate_required_parameters! "," extract_max_param "," validate_missing_parameters! "," values slice "]}," ActiveRecord AttributeAssignment MultiparameterAttribute read_date":{"type":"method","name":"read_date","children":[],"call":[" instantiate_time_object to_date "," instantiate_time_object ","Date  new "," values values_at "," values "," blank_date_parameter? "]}," ActiveRecord AttributeAssignment MultiparameterAttribute read_time":{"type":"method","name":"read_time","children":[],"call":[" instantiate_time_object ","set_values []= ","set_values [] presence ","set_values [] ","(irange\n  (int 3)\n  (int 5)) each "," values values_at "," values "," extract_max_param "," blank_date_parameter? "," validate_required_parameters! "," values [] ","(pair\n  (int 1)\n  (int 1970)) each "," column type == "," column type "," column "," validate_missing_parameters! "," cast_type type == "," cast_type type "," cast_type "," values values_at  []= "," values values_at  [] presence "," values values_at  [] "]}," ActiveRecord AttributeAssignment MultiparameterAttribute instantiate_time_object":{"type":"method","name":"instantiate_time_object","children":[],"call":["Time  send "," object class default_timezone "," object class "," object ","Time  zone local ","Time  zone "," object class send "," column "," name "," cast_type "]}," ActiveRecord AttributeAssignment MultiparameterAttribute read_value":{"type":"method","name":"read_value","children":[],"call":[" read_other "," read_date ","klass == "," read_time "," column klass "," column "," object column_for_attribute "," name "," object "," object class reflect_on_aggregation "," name to_sym "," object class "," values values compact empty? "," values values compact "," values values "," values "," cast_type klass "," cast_type "," object type_for_attribute "," column klass  == "," cast_type klass  == "," column  column klass  "," column  cast_type klass  "," cast_type  column klass  "," cast_type  cast_type klass  "]}," ActiveRecord AttributeAssignment MultiparameterAttribute initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord AttributeAssignment assign_nested_parameter_attributes":{"type":"method","name":"assign_nested_parameter_attributes","children":[],"call":[" _assign_attribute ","pairs each "]}," ActiveRecord AttributeAssignment _assign_attribute":{"type":"method","name":"_assign_attribute","children":[],"call":[" raise "," respond_to? "," public_send ","UnknownAttributeError  new "]}," ActiveRecord Associations Preloader ThroughAssociation through_scope":{"type":"method","name":"through_scope","children":[],"call":["through_scope order! "," reflection_scope values [] "," reflection_scope values "," reflection_scope ","through_scope eager_loading? ","through_scope references! ","through_scope where_values= ","through_scope includes_values= "," Array "," options [] "," options "," reflection_scope where_values empty? "," reflection_scope where_values ","through_scope where! "," reflection foreign_type "," reflection "," through_reflection klass unscoped "," through_reflection klass "," through_reflection ","scope order! ","scope eager_loading? ","scope references! ","scope where_values= ","scope includes_values= ","scope where! ","scope order ","scope bind_values= "," reflection_scope bind_values ","scope where_clause= "," reflection_scope where_clause "," reflection_scope where_clause empty? ","values [] ","scope left_outer_joins! "," source_reflection name "," source_reflection ","scope joins! ","scope empty_scope? "," source_reflection table_name ","values [] empty? ! ","values [] empty? ","scope includes! "," reflection_scope where_clause empty? ! ","options [] "," reflection options ","scope annotate! ","scope references_values "," cascade_strict_loading "," through_reflection klass unscoped  order! ","through_ through_reflection klass unscoped  order! ","through_scope order  order! "," reflection_ through_reflection klass unscoped  values [] "," reflection_scope order  values [] "," reflection_scope  reflection_scope values  [] "," reflection_ through_reflection klass unscoped  values "," reflection_scope order  values "," reflection_scope  reflection_scope values  "," reflection_ through_reflection klass unscoped  "," reflection_scope order  "," through_reflection klass unscoped  eager_loading? ","through_ through_reflection klass unscoped  eager_loading? ","through_scope order  eager_loading? "," through_reflection klass unscoped  references! ","through_ through_reflection klass unscoped  references! ","through_scope order  references! "," through_reflection klass unscoped  where_values= ","through_ through_reflection klass unscoped  where_values= ","through_scope order  where_values= ","through_scope where_ reflection_scope values = "," through_reflection klass unscoped  includes_values= ","through_ through_reflection klass unscoped  includes_values= ","through_scope order  includes_values= ","through_scope includes_ reflection_scope values = ","through_scope values [] _values= ","  reflection options  [] ","  reflection options  "," reflection_ through_reflection klass unscoped  where_values empty? "," reflection_scope order  where_values empty? "," reflection_scope where_ reflection_scope values  empty? "," reflection_ through_reflection klass unscoped  where_values "," reflection_scope order  where_values "," reflection_scope where_ reflection_scope values  "," through_reflection klass unscoped  where! ","through_ through_reflection klass unscoped  where! ","through_scope order  where! "," through_reflection klass un through_reflection klass unscoped d "," through_reflection klass unscope order d ","scope order  order! ","scope order  eager_loading? ","scope order  references! ","scope order  where_values= ","scope where_ reflection_scope values = ","scope order  includes_values= ","scope includes_ reflection_scope values = ","scope values [] _values= ","scope order  where! "," through_reflection klass unscoped  order ","scope order  order "," through_reflection klass unscoped  bind_values= ","scope order  bind_values= ","scope bind_ reflection_scope values = "," reflection_ through_reflection klass unscoped  bind_values "," reflection_scope order  bind_values "," reflection_scope bind_ reflection_scope values  "," through_reflection klass unscoped  where_clause= ","scope order  where_clause= "," reflection_ through_reflection klass unscoped  where_clause "," reflection_scope order  where_clause "," reflection_ through_reflection klass unscoped  where_clause empty? "," reflection_scope order  where_clause empty? "," reflection_scope values  [] "," through_reflection klass unscoped  left_outer_joins! ","scope order  left_outer_joins! ","scope values [] ! ","scope left_outer_values [] ! "," through_reflection klass unscoped  joins! ","scope order  joins! "," through_reflection klass unscoped  empty_ through_reflection klass unscoped ? ","scope order  empty_scope order ? "," reflection_scope values  [] empty? ! "," reflection_scope values  [] empty? "," through_reflection klass unscoped  includes! ","scope order  includes! "," reflection_ through_reflection klass unscoped  where_clause empty? ! "," reflection_scope order  where_clause empty? ! "," reflection options  [] "," reflection  reflection options  "," through_reflection klass unscoped  annotate! ","scope order  annotate! "," through_reflection klass unscoped  references_values ","scope order  references_values ","scope references_ reflection_scope values  "]}," ActiveRecord Associations Preloader Association reflection_scope":{"type":"method","name":"reflection_scope","children":[],"call":[" klass unscoped "," klass "," klass unscoped instance_exec "," reflection scope "," reflection "," reflection scope_for "," reflection join_scopes inject "," reflection join_scopes "," klass predicate_builder "," klass arel_table "]}," ActiveRecord Associations Preloader Association scope":{"type":"method","name":"scope","children":[],"call":[" build_scope "]}," ActiveRecord Associations JoinDependency JoinAssociation scope_chain":{"type":"method","name":"scope_chain","children":[],"call":[" reflection scope_chain reverse "," reflection scope_chain "," reflection "]}," ActiveRecord Associations HasOneAssociation handle_dependency":{"type":"method","name":"handle_dependency","children":[],"call":[" delete "," owner errors add "," owner errors "," owner "," klass human_attribute_name downcase "," klass human_attribute_name "," reflection name "," reflection "," klass "," load_target "," raise ","ActiveRecord DeleteRestrictionError  new "," options [] "," options "," throw ","ActiveSupport Deprecation  warn ","(str \"                The error key `:'restrict_dependent_destroy.one'` has been deprecated and will be removed in Rails 5.1.\\n\") squish "," owner errors generate_message "," owner class human_attribute_name downcase "," owner class human_attribute_name "," owner class "]}," ActiveRecord Associations CollectionProxy prepend":{"type":"method","name":"prepend","children":[],"call":[" raise "]}," ActiveRecord Associations CollectionProxy ==":{"type":"method","name":"==","children":[],"call":[" load_target == "," load_target "]}," ActiveRecord Associations CollectionProxy scope":{"type":"method","name":"scope","children":[],"call":["scope proxy_association= ","@association scope tap ","@association scope "," define_method ","@association scope extending! "]}," ActiveRecord Associations CollectionProxy scoping":{"type":"method","name":"scoping","children":[],"call":["@association scope scoping ","@association scope "]}," ActiveRecord Associations CollectionProxy include?":{"type":"method","name":"include?","children":[],"call":["@association include? ","@association include? ! ! ","@association include? ! "]}," ActiveRecord Associations CollectionProxy many?":{"type":"method","name":"many?","children":[],"call":["@association many? "]}," ActiveRecord Associations CollectionProxy any?":{"type":"method","name":"any?","children":[],"call":["@association any? "]}," ActiveRecord Associations CollectionProxy empty?":{"type":"method","name":"empty?","children":[],"call":["@association empty? "]}," ActiveRecord Associations CollectionProxy length":{"type":"method","name":"length","children":[],"call":["@association length "]}," ActiveRecord Associations CollectionProxy size":{"type":"method","name":"size","children":[],"call":["@association size "]}," ActiveRecord Associations CollectionProxy count":{"type":"method","name":"count","children":[],"call":["@association count "]}," ActiveRecord Associations CollectionProxy distinct":{"type":"method","name":"distinct","children":[],"call":["@association distinct "]}," ActiveRecord Associations CollectionProxy destroy":{"type":"method","name":"destroy","children":[],"call":["@association destroy "," reset_scope ","@association destroy tap "]}," ActiveRecord Associations CollectionProxy delete":{"type":"method","name":"delete","children":[],"call":["@association delete "," reset_scope ","@association delete tap "]}," ActiveRecord Associations CollectionProxy destroy_all":{"type":"method","name":"destroy_all","children":[],"call":["@association destroy_all "," reset_scope ","@association destroy_all tap "]}," ActiveRecord Associations CollectionProxy delete_all":{"type":"method","name":"delete_all","children":[],"call":["@association delete_all "," reset_scope ","@association delete_all tap "]}," ActiveRecord Associations CollectionProxy replace":{"type":"method","name":"replace","children":[],"call":["@association replace "]}," ActiveRecord Associations CollectionProxy concat":{"type":"method","name":"concat","children":[],"call":["@association concat "]}," ActiveRecord Associations CollectionProxy create!":{"type":"method","name":"create!","children":[],"call":["@association create! "]}," ActiveRecord Associations CollectionProxy create":{"type":"method","name":"create","children":[],"call":["@association create "]}," ActiveRecord Associations CollectionProxy build":{"type":"method","name":"build","children":[],"call":["@association build "]}," ActiveRecord Associations CollectionProxy last":{"type":"method","name":"last","children":[],"call":["@association last "," load_target "," find_from_target? "]}," ActiveRecord Associations CollectionProxy first":{"type":"method","name":"first","children":[],"call":["@association first "]}," ActiveRecord Associations CollectionProxy find":{"type":"method","name":"find","children":[],"call":["@association find "," block_given? "]}," ActiveRecord Associations CollectionProxy select":{"type":"method","name":"select","children":[],"call":["@association select "]}," ActiveRecord Associations CollectionProxy loaded?":{"type":"method","name":"loaded?","children":[],"call":["@association loaded? "]}," ActiveRecord Associations CollectionProxy load_target":{"type":"method","name":"load_target","children":[],"call":["@association load_target "]}," ActiveRecord Associations CollectionProxy target":{"type":"method","name":"target","children":[],"call":["@association target "]}," ActiveRecord Associations CollectionAssociation null_scope?":{"type":"method","name":"null_scope?","children":[],"call":[" foreign_key_present? ! "," foreign_key_present? "," owner new_record? "," owner "]}," ActiveRecord Associations CollectionAssociation scope":{"type":"method","name":"scope","children":[],"call":["scope none! "," null_scope? ","opts fetch "]}," ActiveRecord Associations CollectionAssociation distinct":{"type":"method","name":"distinct","children":[],"call":["seen []= ","record id ","seen key? "," load_target find_all "," load_target "]}," Builder SingularAssociation valid_options":{"type":"method","name":"valid_options","children":[],"call":[" + "]}," Builder HasOne valid_dependent_options":{"type":"method","name":"valid_dependent_options","children":[],"call":[]}," Builder HasOne valid_options":{"type":"method","name":"valid_options","children":[],"call":[" options [] "," options "," + "]}," Builder HasOne macro":{"type":"method","name":"macro","children":[],"call":[]}," Builder HasMany valid_dependent_options":{"type":"method","name":"valid_dependent_options","children":[],"call":[]}," Builder HasMany valid_options":{"type":"method","name":"valid_options","children":[],"call":[" + "]}," Builder HasMany macro":{"type":"method","name":"macro","children":[],"call":[]}," Builder HasAndBelongsToMany valid_options":{"type":"method","name":"valid_options","children":[],"call":[" + "]}," Builder HasAndBelongsToMany macro":{"type":"method","name":"macro","children":[],"call":[]}," Builder CollectionAssociation valid_options":{"type":"method","name":"valid_options","children":[],"call":[" + "]}," Builder BelongsTo valid_dependent_options":{"type":"method","name":"valid_dependent_options","children":[],"call":[]}," Builder BelongsTo valid_options":{"type":"method","name":"valid_options","children":[],"call":[" + "]}," Builder BelongsTo macro":{"type":"method","name":"macro","children":[],"call":[]}," Builder Association valid_dependent_options":{"type":"method","name":"valid_dependent_options","children":[],"call":[" raise "]}," Builder Association configure_dependency":{"type":"method","name":"configure_dependency","children":[],"call":[" model before_destroy "," name "," macro "," model "," mixin class_eval ","95 + "," mixin ","ActiveSupport Deprecation  warn "," options [] == "," options [] "," options "," raise "," valid_dependent_options "," valid_dependent_options include? "]}," Builder Association valid_options":{"type":"method","name":"valid_options","children":[],"call":["Association  valid_options ","Association  valid_options + ","Association  extensions flat_map ","Association  extensions "]}," Builder Association macro":{"type":"method","name":"macro","children":[],"call":[" raise "]}," ActiveRecord Associations BelongsToPolymorphicAssociation raise_on_type_mismatch!":{"type":"method","name":"raise_on_type_mismatch!","children":[],"call":[]}," ActiveRecord Associations BelongsToAssociation handle_dependency":{"type":"method","name":"handle_dependency","children":[],"call":[" target send "," options [] "," options "," target "," load_target "," raise "," target destroyed? "," target destroy "," target public_send "," enqueue_destroy_association "," options fetch "," reflection klass to_s "," reflection klass "," reflection "," owner id "," owner "," owner class to_s "," owner class "," reflection active_record_primary_key to_sym "," reflection active_record_primary_key "," owner public_send "," reflection foreign_key to_sym "," reflection foreign_key ","col to_sym "," reflection foreign_key map "," reflection active_record_primary_key map "," reflection foreign_key is_a? "," owner  owner public_send  "]}," ActiveRecord Associations AssociationScope eval_scope":{"type":"method","name":"eval_scope","children":[],"call":["klass unscoped instance_exec "," owner ","klass unscoped ","scope is_a? ","ActiveRecord Relation  create instance_exec ","ActiveRecord Relation  create ","PredicateBuilder  new ","TableMetadata  new ","relation instance_exec ","reflection build_scope ","reflection aliased_table ","reflection build_scope  instance_exec "]}," ActiveRecord Associations AssociationScope bind":{"type":"method","name":"bind","children":[],"call":[" bind_value "," column_for ","  column_for _for "]}," ActiveRecord Associations AssociationScope bind_value":{"type":"method","name":"bind_value","children":[],"call":["scope bind_values "," alias_tracker connection substitute_at ","scope bind_values length "," alias_tracker connection "," alias_tracker ","alias_tracker connection substitute_at ","alias_tracker connection ","@bind_substitution bind_value "," alias_tracker connection  alias_tracker connection substitute_at _at "," alias_tracker connection alias_tracker connection substitute_at _at ","alias_tracker connection  alias_tracker connection substitute_at _at ","alias_tracker connection alias_tracker connection substitute_at _at "]}," ActiveRecord Associations AssociationScope column_for":{"type":"method","name":"column_for","children":[],"call":["columns [] "," alias_tracker connection schema_cache columns_hash "," alias_tracker connection schema_cache "," alias_tracker connection "," alias_tracker "," alias_tracker connection schema_cache columns_hash [] ","alias_tracker connection schema_cache columns_hash ","alias_tracker connection schema_cache ","alias_tracker connection "," alias_tracker connection schema_cache columns_hash  [] "," alias_tracker connection schema_cache columns_hash []  [] ","alias_tracker connection schema_cache columns_hash  [] "," alias_tracker connection schema_cache  alias_tracker connection schema_cache columns_hash _hash "," alias_tracker connection schema_cache  alias_tracker connection schema_cache columns_hash [] _hash "," alias_tracker connection schema_cache alias_tracker connection schema_cache columns_hash _hash "," alias_tracker connection schema_cache  alias_tracker connection schema_cache columns_hash _hash [] "," alias_tracker connection schema_cache  alias_tracker connection schema_cache columns_hash [] _hash [] "," alias_tracker connection schema_cache alias_tracker connection schema_cache columns_hash _hash [] ","alias_tracker connection schema_cache  alias_tracker connection schema_cache columns_hash _hash ","alias_tracker connection schema_cache  alias_tracker connection schema_cache columns_hash [] _hash ","alias_tracker connection schema_cache alias_tracker connection schema_cache columns_hash _hash "]}," ActiveRecord Associations Association raise_on_type_mismatch!":{"type":"method","name":"raise_on_type_mismatch!","children":[],"call":[" raise ","record class object_id ","record class "," reflection klass object_id "," reflection klass "," reflection "," reflection class_name ","record is_a? "," reflection class_name constantize "," reflection class_name safe_constantize ","record inspect "]}," ActiveRecord Associations Association initialize_attributes":{"type":"method","name":"initialize_attributes","children":[],"call":[" set_inverse_instance ","record assign_attributes "," create_scope except ","record changed - ","record changed "," create_scope ","(send\n  (send nil :reflection) :foreign_key) compact "," reflection type "," reflection "," reflection foreign_key ","assigned_keys - ","except_from_scope_attributes keys map ","except_from_scope_attributes keys ","record changed_attribute_names_to_save ","record send ","attributes any? "," scope_for_create except! "," scope_for_create ","record assign_ create_scope except  ","record assign_ scope_for_create except!  ","record changed  - ","record changed_attribute_names_to_save  - ","except_from_scope_ create_scope except  keys map ","except_from_scope_ scope_for_create except!  keys map ","except_from_scope_ create_scope except  keys ","except_from_scope_ scope_for_create except!  keys "," create_scope except  any? "," scope_for_create except!  any? "]}," ActiveRecord Associations Association marshal_load":{"type":"method","name":"marshal_load","children":[],"call":["@owner class reflect_on_association ","@owner class "," instance_variable_set ","ivars each ","@owner class _reflect_on_association "]}," ActiveRecord Associations Association marshal_dump":{"type":"method","name":"marshal_dump","children":[],"call":["@reflection name "," instance_variable_get ","(send\n  (send nil :instance_variables) :-\n  (array\n    (sym :@reflection))) map "," instance_variables - "," instance_variables ","(send\n  (send nil :instance_variables) :-\n  (array\n    (sym :@reflection)\n    (sym :@through_reflection))) map "]}," ActiveRecord Associations Association scope":{"type":"method","name":"scope","children":[],"call":[" target_scope merge "," association_scope "," target_scope "," target_scope merge! ","scope spawn ","scope try == ","scope try "," klass current_scope "," klass "," target_scope merge! merge! "," klass global_current_scope ","DisableJoinsAssociationScope  create scope ","DisableJoinsAssociationScope  create "," disable_joins "," target_ klass current_scope  merge "," target_ klass global_current_scope  merge "," association_ klass current_scope  "," association_ klass global_current_scope  "," target_ klass current_scope  "," target_ klass global_current_scope  "," target_ klass current_scope  merge! "," target_ klass global_current_scope  merge! "," klass current_scope  spawn "," klass global_current_scope  spawn "," klass current_scope  try == "," klass global_current_scope  try == "," klass current_scope  try "," klass global_current_scope  try "," klass current_ klass current_scope  "," klass current_ klass global_current_scope  "," target_ klass current_scope  merge! merge! "," target_ klass global_current_scope  merge! merge! "," klass global_current_ klass current_scope  "," klass global_current_ klass global_current_scope  ","DisableJoinsAssociationScope  create  klass current_scope  ","DisableJoinsAssociationScope  create  klass global_current_scope  "]}," ActiveRecord QueryMethods uniq!":{"type":"method","name":"uniq!","children":[],"call":[" uniq_value= ","values uniq! ","values empty? ! ","values empty? ","values is_a? ","@values [] ","@values []  uniq! ","@values []  empty? ! ","@values []  empty? ","@values []  is_a? ","@@values []  [] "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter add_column_options!":{"type":"method","name":"add_column_options!","children":[],"call":["sql << ","options [] try ","options [] "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter TableDefinition new_column_definition":{"type":"method","name":"new_column_definition","children":[],"call":["@columns_hash []= ","@columns << ","ColumnDefinition  new "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter TableDefinition json":{"type":"method","name":"json","children":[],"call":[" column "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter TableDefinition uuid":{"type":"method","name":"uuid","children":[],"call":[" column "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter TableDefinition macaddr":{"type":"method","name":"macaddr","children":[],"call":[" column "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter TableDefinition cidr":{"type":"method","name":"cidr","children":[],"call":[" column "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter TableDefinition inet":{"type":"method","name":"inet","children":[],"call":[" column "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter TableDefinition ltree":{"type":"method","name":"ltree","children":[],"call":[" column "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter TableDefinition hstore":{"type":"method","name":"hstore","children":[],"call":[" column "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter TableDefinition daterange":{"type":"method","name":"daterange","children":[],"call":[" column "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter TableDefinition numrange":{"type":"method","name":"numrange","children":[],"call":[" column "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter TableDefinition tstzrange":{"type":"method","name":"tstzrange","children":[],"call":[" column "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter TableDefinition tsrange":{"type":"method","name":"tsrange","children":[],"call":[" column "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter TableDefinition int8range":{"type":"method","name":"int8range","children":[],"call":[" column "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter TableDefinition int4range":{"type":"method","name":"int4range","children":[],"call":[" column "]}," ActiveRecord ConnectionAdapters ConnectionPool insert_connection_for_test!":{"type":"method","name":"insert_connection_for_test!","children":[],"call":["@available add ","@connections << "," synchronize "]}," ActiveRecord AttributeAssignment MultiparameterAttribute validate_missing_parameters!":{"type":"method","name":"validate_missing_parameters!","children":[],"call":[" raise ","ArgumentError  new "," name "," values key? ! "," values key? "," values ","positions detect "]}," ActiveRecord Associations CollectionProxy uniq":{"type":"method","name":"uniq","children":[],"call":["@association uniq "," load_target uniq "," load_target "]}," ActiveRecord Sanitization ClassMethods replace_bind_variable":{"type":"method","name":"replace_bind_variable","children":[],"call":[" quote_bound_value ","value to_sql ","ActiveRecord Relation  === "]}," ActiveRecord Relation Merger partition_overwrites":{"type":"method","name":"partition_overwrites","children":[],"call":["seen include? ","w left ","w operator == ","w operator ","w respond_to? ","lhs_wheres partition ","node left ","Set  new ","rhs_wheres find_all ","rhs_wheres empty? ","lhs_wheres empty? "]}," ActiveRecord Relation Merger filter_binds":{"type":"method","name":"filter_binds","children":[],"call":["set include? ","col name ","lhs_binds dup delete_if ","lhs_binds dup ","Set  new ","x left name ","x left ","removed_wheres map ","x left name to_s ","removed_wheres empty? ","Set  new  include? "]}," ActiveRecord Core init_attributes":{"type":"method","name":"init_attributes","children":[],"call":[" assign_attributes "]}," ActiveRecord ConnectionAdapters PostgreSQLColumn has_default_function?":{"type":"method","name":"has_default_function?","children":[],"call":["(str \"\\\\w+\\\\(.*\\\\)\") === ","default_value ! ","(str \"\\\\w+(.*)\") === "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter SchemaStatements columns_for_distinct":{"type":"method","name":"columns_for_distinct","children":[],"call":["(zsuper) join ","(send\n  (lvar :orders) :map) reject map with_index ","(send\n  (lvar :orders) :map) reject map ","(send\n  (lvar :orders) :map) reject ","s gsub ","s to_sql ","s is_a? ","orders map ","s gsub gsub ","(send\n  (send\n    (lvar :orders) :reject\n    (block-pass\n      (sym :blank?))) :map) reject map with_index ","(send\n  (send\n    (lvar :orders) :reject\n    (block-pass\n      (sym :blank?))) :map) reject map ","(send\n  (send\n    (lvar :orders) :reject\n    (block-pass\n      (sym :blank?))) :map) reject ","orders reject map ","orders reject ","(zs to_sql uper) join ","(s to_sql end\n  (lvar :orders to_sql ) :map) reject map with_index ","(s to_sql end\n  (lvar :orders to_sql ) :map) reject map ","(s to_sql end\n  (lvar :orders to_sql ) :map) reject ","s to_sql  gs to_sql ub ","s to_sql  to_s to_sql ql ","s to_sql  is to_sql _a? ","orders to_sql  map ","s to_sql  gs to_sql ub gs to_sql ub ","(s to_sql end\n  (s to_sql end\n    (lvar :orders to_sql ) :reject\n    (block-pas to_sql s to_sql \n      (s to_sql ym :blank?))) :map) reject map with_index ","(s to_sql end\n  (s to_sql end\n    (lvar :orders to_sql ) :reject\n    (block-pas to_sql s to_sql \n      (s to_sql ym :blank?))) :map) reject map ","(s to_sql end\n  (s to_sql end\n    (lvar :orders to_sql ) :reject\n    (block-pas to_sql s to_sql \n      (s to_sql ym :blank?))) :map) reject ","orders to_sql  reject map ","orders to_sql  reject "]}," ActiveRecord ConnectionAdapters MysqlAdapter set_field_encoding":{"type":"method","name":"set_field_encoding","children":[],"call":["field_name encode! ","Encoding  default_internal ","field_name force_encoding "," client_encoding ","field_name encoding ","field_name encode!  encode! ","field_name encoding  encode! ","field_name encode!  force_encoding ","field_name encoding  force_encoding ","field_name encode!  encoding ","field_name encoding  encoding "]}," ActiveRecord ConnectionAdapters MysqlAdapter Fields find_type":{"type":"method","name":"find_type","children":[],"call":["TYPES  lookup ","field type ","field length > ","field length ","field type == "]}," ActiveRecord ConnectionAdapters Mysql2Adapter set_field_encoding":{"type":"method","name":"set_field_encoding","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter without_prepared_statement?":{"type":"method","name":"without_prepared_statement?","children":[],"call":["binds empty? ","@prepared_statements ! "," prepared_statements ! "," prepared_statements "]}," ActiveRecord ConnectionAdapters AbstractAdapter enable_extension":{"type":"method","name":"enable_extension","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter disable_extension":{"type":"method","name":"disable_extension","children":[],"call":[]}," ActiveRecord ConnectionAdapters SchemaStatements columns_for_distinct":{"type":"method","name":"columns_for_distinct","children":[],"call":[]}," ActiveRecord AttributeMethods ClassMethods initialize_generated_modules":{"type":"method","name":"initialize_generated_modules","children":[{"type":"method","name":"set_name_cache","children":[],"asgn":[],"call":[]}],"call":[" include "," const_set ","value dup freeze ","value dup "," const_defined? ","Module  new "," extend ","GeneratedAttributeMethods  new "," private_constant "]}," ActiveRecord AttributeMethods ClassMethods inherited":{"type":"method","name":"inherited","children":[],"call":["child_class initialize_generated_modules ","child_class class_eval "]}," ActiveRecord AssociationRelation exec_queries":{"type":"method","name":"exec_queries","children":[],"call":["@association set_inverse_instance "," each "," block_given? ","@association set_inverse_instance_from_queries "]}," ActiveRecord AssociationRelation proxy_association":{"type":"method","name":"proxy_association","children":[],"call":[]}," ActiveRecord AssociationRelation initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Transactions touch":{"type":"method","name":"touch","children":[],"call":[" with_transaction_returning_status "]}," ActiveRecord Timestamp _update_record":{"type":"method","name":"_update_record","children":[],"call":[" write_attribute "," attribute_changed? ","column to_s "," timestamp_attributes_for_update_in_model each "," timestamp_attributes_for_update_in_model "," current_time_from_proper_timezone "," should_record_timestamps? "," will_save_change_to_attribute? "," _write_attribute "," record_update_timestamps ","column to_s  to_s ","  current_time_from_proper_timezone _from_proper_timezone "]}," ActiveRecord Timestamp _create_record":{"type":"method","name":"_create_record","children":[],"call":[" write_attribute ","column to_s "," send nil? "," send "," respond_to? "," all_timestamp_attributes each "," all_timestamp_attributes "," current_time_from_proper_timezone "," record_timestamps "," attribute_present? ! "," attribute_present? "," has_attribute? "," all_timestamp_attributes_in_model each "," all_timestamp_attributes_in_model "," _write_attribute "," _read_attribute ","column to_s  to_s ","  current_time_from_proper_timezone _from_proper_timezone "]}," ActiveRecord TestCase capture_sql":{"type":"method","name":"capture_sql","children":[],"call":["SQLCounter  log_all dup ","SQLCounter  log_all ","SQLCounter  clear_log "]}," ActiveRecord Store ClassMethods stored_attributes":{"type":"method","name":"stored_attributes","children":[],"call":["a | ","parent merge! "," local_stored_attributes "," superclass stored_attributes "," superclass "," superclass respond_to? "," superclass stored_attributes  merge! "]}," ActiveRecord SchemaMigration normalize_migration_number":{"type":"method","name":"normalize_migration_number","children":[],"call":["%.3d % ","number to_i "]}," ActiveRecord SchemaMigration primary_key":{"type":"method","name":"primary_key","children":[],"call":[]}," ActiveRecord QueryMethods _select!":{"type":"method","name":"_select!","children":[],"call":["fields flatten "," select_values "," klass attribute_alias "," klass "," klass attribute_alias? ","fields map! ","fields flatten! "," klass attribute_alias to_sym ","fields reject! "]}," ActiveRecord Persistence _create_record":{"type":"method","name":"_create_record","children":[],"call":[" id "," class primary_key "," class "," class unscoped insert "," class unscoped "," arel_attributes_with_values_for_create "," block_given? "," class column_names "," class _insert_record "," attributes_with_values_for_create "," attributes_with_values "," attributes_for_create "," _write_attribute "," _read_attribute ! "," _read_attribute ","returning_columns zip each ","returning_columns zip "," class _returning_columns_for_insert "," class _returning_columns_for_insert  zip each "," class _returning_columns_for_insert  zip "," class _ class _returning_columns_for_insert _for_insert "]}," ActiveRecord Persistence _update_record":{"type":"method","name":"_update_record","children":[],"call":["klass connection update ","klass connection ","klass unscoped where arel compile_update ","klass unscoped where arel ","klass unscoped where ","klass arel_table [] eq "," id "," id_was ","klass arel_table [] ","klass primary_key ","klass arel_table ","klass unscoped ","bind_attrs []= ","klass connection substitute_at ","db_columns_with_values [] first ","db_columns_with_values [] ","bind_attrs keys each_with_index ","bind_attrs keys ","attributes_with_values dup ","column_hash [] ","attr name ","attributes_with_values map ","klass connection schema_cache columns_hash ","klass table_name ","klass connection schema_cache "," class ","attributes_with_values empty? "," arel_attributes_with_values_for_update "," class unscoped _update_record "," class unscoped ","attributes_values empty? "," block_given? ","rows_affected > "," id_in_database ","affected_rows == "," _update_row ","attribute_names empty? "," attributes_for_update "," class column_names "," class _update_record "," class  connection update "," class  connection "," class  unscoped where arel compile_update "," class  unscoped where arel "," class  unscoped where "," class  arel_table [] eq "," class  arel_table [] "," class  primary_key "," class  arel_table "," class  unscoped ","attributes_with_values dup  []= "," class  connection substitute_at ","attributes_with_values dup  keys each_with_index ","attributes_with_values dup  keys "," arel_attributes_with_values_for_update  dup ","klass connection schema_cache columns_hash  [] "," arel_attributes_with_values_for_update  map "," class  connection schema_cache columns_hash "," class  table_name "," class  connection schema_cache "," arel_attributes_with_values_for_update  empty? "," arel_ arel_attributes_with_values_for_update _for_update "," class unscoped _update_record  > "," class _update_record  > "," _update_row  == "," attributes_for_update  empty? "]}," ActiveRecord Locking Optimistic _update_record":{"type":"method","name":"_update_record","children":[],"call":[" raise "," send ","lock_col + ","ActiveRecord StaleObjectError  new ","affected_rows == "," class connection update "," class connection "," class ","relation where arel compile_update "," arel_attributes_with_values_for_update ","relation where arel ","relation where ","relation table [] eq and ","relation table [] eq "," class quote_value "," column_for_attribute ","relation table [] ","relation table "," id "," class primary_key "," class unscoped ","attribute_names uniq! "," increment_lock "," send to_i "," class locking_column ","attribute_names empty? "," locking_enabled? ","relation where update_all ","Hash  [] "," _read_attribute "," attributes_for_update map "," attributes_for_update ","attribute_names map ","(send\n  (send nil :attributes_for_update\n    (lvar :attribute_names)) :map) to_h ","previous_lock_value to_i ","attribute_names push "," read_attribute_before_type_cast ","attribute_names include? "," class locking_column  + "," class connection update  == ","relation where update_all  == "," class unscoped  where arel compile_update "," class unscoped  where arel "," class unscoped  where "," class unscoped  table [] eq and "," class unscoped  table [] eq "," class unscoped  table [] "," class unscoped  table "," class unscoped  where update_all "," send to_i  to_i "," read_attribute_before_type_cast  to_i "]}," ActiveRecord Inheritance ClassMethods subclass_from_attributes":{"type":"method","name":"subclass_from_attributes","children":[],"call":[" raise ","ActiveRecord SubclassNotFound  new "," name "," descendants include? "," descendants ","subclass_name safe_constantize ","subclass_name != ","subclass_name present? ","attrs with_indifferent_access [] "," inheritance_column ","attrs with_indifferent_access "," find_sti_class ","attrs is_a? ","attrs to_h ","attrs respond_to? ","attrs [] "," inheritance_column to_sym ","subclass_name safe_constantize _name safe_constantize ","attrs with_indifferent_access []  safe_constantize ","subclass_name safe_constantize _name != ","attrs with_indifferent_access []  != ","subclass_name safe_constantize _name present? ","attrs with_indifferent_access []  present? ","attrs to_h  with_indifferent_access [] ","attrs to_h  with_indifferent_access ","attrs to_h  is_a? ","attrs to_h  to_h ","attrs to_h  respond_to? ","attrs to_h  [] "]}," ActiveRecord Inheritance ClassMethods subclass_from_attributes?":{"type":"method","name":"subclass_from_attributes?","children":[],"call":["attrs is_a? "," columns_hash include? "," inheritance_column "," columns_hash "]}," ActiveRecord Core yaml_initialize":{"type":"method","name":"yaml_initialize","children":[],"call":[" init_with "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter get_oid_type":{"type":"method","name":"get_oid_type","children":[],"call":["OID TYPE_MAP  []= ","OID Identity  new "," warn ","OID TYPE_MAP  fetch "," type_map []= "," type_map "," type_map fetch "," type_map register_type ","Type Value  new tap ","Type Value  new "," load_additional_types "," type_map key? ! "," type_map key? ","Type  default_value tap ","Type  default_value "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter active_threadsafe?":{"type":"method","name":"active_threadsafe?","children":[],"call":["@connection connect_poll != ","@connection connect_poll "]}," ActiveRecord ConnectionAdapters PostgreSQLColumn text?":{"type":"method","name":"text?","children":[],"call":[" array ! "," array "]}," ActiveRecord ConnectionAdapters PostgreSQLColumn number?":{"type":"method","name":"number?","children":[],"call":[" array ! "," array "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter SchemaStatements column_for":{"type":"method","name":"column_for","children":[],"call":["c name == ","column_name to_s ","c name "," columns detect "," columns "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter SchemaStatements index_name_exists?":{"type":"method","name":"index_name_exists?","children":[],"call":[" exec_query rows first [] to_i > "," exec_query rows first [] to_i "," exec_query rows first [] "," exec_query rows first "," exec_query rows "," exec_query "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter Quoting quote_default_value":{"type":"method","name":"quote_default_value","children":[],"call":[" quote ","value =~ ","column type == ","column type "]}," ActiveRecord ConnectionAdapters AbstractAdapter active_threadsafe?":{"type":"method","name":"active_threadsafe?","children":[],"call":[" active? "]}," ActiveRecord ConnectionAdapters TransactionState finalized?":{"type":"method","name":"finalized?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SchemaStatements quote_value":{"type":"method","name":"quote_value","children":[],"call":[" quote "," type_to_sql ","column scale ","column precision ","column limit ","column type ","column sql_type "]}," ActiveRecord ConnectionAdapters DatabaseStatements binds_from_relation":{"type":"method","name":"binds_from_relation","children":[],"call":["relation bind_values ","relation arel ","binds blank? ","relation is_a? ","binds empty? ","relation bound_attributes "]}," ActiveRecord Callbacks _update_record":{"type":"method","name":"_update_record","children":[],"call":[" run_callbacks "," _run_update_callbacks "," record_update_timestamps "]}," ActiveRecord Callbacks _create_record":{"type":"method","name":"_create_record","children":[],"call":[" run_callbacks "," _run_create_callbacks "]}," ActiveRecord AutosaveAssociation record_changed?":{"type":"method","name":"record_changed?","children":[],"call":["record changed_attributes include? ","reflection foreign_key ","record changed_attributes ","record [] != ","record [] ","record new_record? ","record attribute_changed? ","record has_attribute? ","record will_save_change_to_attribute? "," association_foreign_key_changed? "]}," ActiveRecord AttributeMethods attributes_for_coder":{"type":"method","name":"attributes_for_coder","children":[],"call":[" attributes "]}," ActiveRecord AttributeMethods ClassMethods find_generated_attribute_method":{"type":"method","name":"find_generated_attribute_method","children":[],"call":["klass superclass ","gen_methods instance_method "," method_defined_within? ","klass generated_attribute_methods ","klass == ","klass superclass  superclass ","klass generated_attribute_methods  instance_method ","klass superclass  generated_attribute_methods ","klass superclass  == "]}," ActiveRecord AttributeMethods Serialization Behavior attributes_for_coder":{"type":"method","name":"attributes_for_coder","children":[],"call":["attrs []= "," read_attribute ","@attributes [] serialized_value ","@attributes [] "," class serialized_attributes include? "," class serialized_attributes "," class "," attribute_names each_with_object "," attribute_names "]}," ActiveRecord AttributeMethods PrimaryKey id_was":{"type":"method","name":"id_was","children":[],"call":[" attribute_was "," class primary_key "," class "," sync_with_transaction_state ","@primary_key map "," class composite_primary_key? "]}," ActiveRecord AttributeMethods Dirty _create_record":{"type":"method","name":"_create_record","children":[],"call":[" keys_for_partial_write "," partial_writes? "," changes_applied "]}," ActiveRecord AttributeMethods Dirty _update_record":{"type":"method","name":"_update_record","children":[],"call":[" keys_for_partial_write "," partial_writes? "," changes_applied "]}," ActiveRecord AssociationNotFoundError initialize":{"type":"method","name":"initialize","children":[],"call":["record class name ","record class "]}," ActiveRecord Associations SingularAssociation _create_record":{"type":"method","name":"_create_record","children":[],"call":[" raise ","RecordInvalid  new ","saved ! "," set_new_record ","record save "," block_given? "," build_record "," owner persisted? "," owner "," replace_keys "," build "," reflection klass transaction "," reflection klass "," reflection ","record save  ! "," set_new_ build_record  "," set_new_ build  "," build_record  save "," build  save "," build_ build_record  "," build_ build  "]}," ActiveRecord Associations HasManyThroughAssociation through_scope_attributes":{"type":"method","name":"through_scope_attributes","children":[],"call":[" scope where_values_hash except! "," through_association reflection klass inheritance_column to_sym "," through_association reflection klass inheritance_column "," through_association reflection klass "," through_association reflection "," through_association "," through_association reflection foreign_key "," scope where_values_hash "," through_association reflection name to_s "," through_association reflection name "," scope ","scope where_values_hash except! ","scope where_values_hash "," through_scope ","attributes except! "," Array "," through_association reflection klass table_name ","scope where_values_hash  except! "]}," ActiveRecord Associations HasManyThroughAssociation options_for_through_record":{"type":"method","name":"options_for_through_record","children":[],"call":[" through_scope_attributes "]}," ActiveRecord Associations HasManyAssociation handle_dependency":{"type":"method","name":"handle_dependency","children":[],"call":[" delete_all "," destroy_all ","t destroyed_by_association= "," reflection "," load_target each "," load_target "," options [] == "," options [] "," options "," owner errors add "," owner errors "," owner "," klass human_attribute_name downcase "," klass human_attribute_name "," reflection name "," klass "," empty? "," raise ","ActiveRecord DeleteRestrictionError  new "," throw ","ActiveSupport Deprecation  warn ","(str \"                The error key `:'restrict_dependent_destroy.many'` has been deprecated and will be removed in Rails 5.1.\\n\") squish "," owner errors generate_message "," owner class human_attribute_name downcase "," owner class human_attribute_name "," owner class "," enqueue_destroy_association "," options fetch ","association_class to_s "," owner id "," owner class to_s ","assoc public_send "," target collect "," target ","association_class primary_key to_sym ","association_class primary_key "," target first class "," target first "," target empty? "," reflection klass to_s "," reflection klass ","ids each_slice ","ids size "," owner class destroy_association_async_batch_size ","primary_key_column map ","association_class query_constraints_list map ","association_class query_constraints_list "," target first class  to_s "," target first class  primary_key to_sym "," target first class  primary_key ","association_class primary_key to_sym  map ","association_class query_constraints_list map  map "," target first class  query_constraints_list map "," target first class  query_constraints_list "]}," ActiveRecord Associations CollectionProxy arel":{"type":"method","name":"arel","children":[],"call":[" scope arel "," scope "]}," ActiveRecord Associations CollectionAssociation _create_record":{"type":"method","name":"_create_record","children":[],"call":[" insert_record "," block_given? "," add_to_target "," build_record "," transaction "," _create_record ","attributes collect ","attributes is_a? "," raise "," owner persisted? "," owner "," loaded? ","ActiveRecord RecordNotSaved  new "," insert_ build_record  "," build_ build_record  "," _create_ build_record  "]}," ActiveRecord Associations Association foreign_key_for?":{"type":"method","name":"foreign_key_for?","children":[],"call":["record has_attribute? "," reflection foreign_key "," reflection ","record attributes has_key? ","record attributes ","record _has_attribute? ","foreign_key all? "," Array "," reflection  Array  "," Array  all? "]}," ActiveRecord AssociationRelation ==":{"type":"method","name":"==","children":[],"call":["other == "," to_a "," records "]}," ActiveRecord AttributeMethods TimeZoneConversion convert_value_to_time_zone":{"type":"method","name":"convert_value_to_time_zone","children":[],"call":["value in_time_zone ","value respond_to? "," convert_value_to_time_zone ","value map ","value is_a? "," class columns_hash [] type_cast "," class columns_hash [] "," class columns_hash "," class "]}," ActiveRecord Generators Migration ClassMethods next_migration_number":{"type":"method","name":"next_migration_number","children":[],"call":["ActiveRecord Migration  next_migration_number "," current_migration_number + "," current_migration_number ","ActiveRecord Migration   current_migration_number +  "]}," ActiveRecord Validations UniquenessValidator map_enum_attribute":{"type":"method","name":"map_enum_attribute","children":[],"call":["mapping [] ","klass defined_enums [] ","attribute to_s ","klass defined_enums ","klass enum_mapping_for ","klass defined_enums []  [] ","klass enum_mapping_for  [] ","klass enum_klass defined_enums [] _for ","klass enum_klass enum_mapping_for _for "]}," ActiveRecord Tasks DatabaseTasks check_schema_file":{"type":"method","name":"check_schema_file","children":[],"call":["Kernel  abort ","message << ","Rails  root ","File  exist? "," Rails  root ","(begin\n  (lvar :filename)) dup ","(begin\n  (lvar :filename)) +@ ","(begin\n  (lvar :filename)) dup  << ","(begin\n  (lvar :filename)) +@  << "]}," ActiveRecord Tasks DatabaseTasks load_schema":{"type":"method","name":"load_schema","children":[],"call":[" raise ","format inspect "," structure_load "," current_config "," check_schema_file ","File  join "," db_dir "," load "," load_schema_current ","ActiveSupport Deprecation  warn ","(str \"          This method will act on a specific connection in the future.\\n\") squish ","(str \"          This method will act on a specific connection in the future.\\n\") strip_heredoc ","ActiveRecord InternalMetadata  []= ","ActiveRecord Migrator  current_environment ","ActiveRecord InternalMetadata  create_table ","ActiveRecord Base  establish_connection "," schema_file ","Migration  verbose= "," schema_sha1 ","ENV  [] "," verbose? ","Migration  verbose "," dump_filename ","db_config env_name ","db_config name "," schema_dump_path "," migration_connection internal_metadata create_table_and_set_flags "," migration_connection internal_metadata "," migration_connection "]}," ActiveRecord Tasks DatabaseTasks seed_loader":{"type":"method","name":"seed_loader","children":[],"call":["Rails  application "]}," ActiveRecord Tasks DatabaseTasks env":{"type":"method","name":"env","children":[],"call":["Rails  env "]}," ActiveRecord Tasks DatabaseTasks root":{"type":"method","name":"root","children":[],"call":["Rails  root "]}," ActiveRecord Tasks DatabaseTasks fixtures_path":{"type":"method","name":"fixtures_path","children":[],"call":["File  join "," root ","ENV  [] "]}," ActiveRecord Tasks DatabaseTasks migrations_paths":{"type":"method","name":"migrations_paths","children":[],"call":["Rails  application paths [] to_a ","Rails  application paths [] ","Rails  application paths ","Rails  application "]}," ActiveRecord Tasks DatabaseTasks db_dir":{"type":"method","name":"db_dir","children":[],"call":["Rails  application config paths [] first ","Rails  application config paths [] ","Rails  application config paths ","Rails  application config ","Rails  application "]}," ActiveRecord Store IndifferentHashAccessor prepare":{"type":"method","name":"prepare","children":[],"call":[]}," ActiveRecord Store StringKeyedHashAccessor write":{"type":"method","name":"write","children":[],"call":[]}," ActiveRecord Store StringKeyedHashAccessor read":{"type":"method","name":"read","children":[],"call":[]}," ActiveRecord Store HashAccessor prepare":{"type":"method","name":"prepare","children":[],"call":[]}," ActiveRecord Store HashAccessor write":{"type":"method","name":"write","children":[],"call":[]}," ActiveRecord Store HashAccessor read":{"type":"method","name":"read","children":[],"call":[]}," ActiveRecord Store store_accessor_for":{"type":"method","name":"store_accessor_for","children":[],"call":["@column_types [] accessor ","@column_types [] ","store_attribute to_s "," type_for_attribute accessor "," type_for_attribute "]}," ActiveRecord Scoping initialize_internals_callback":{"type":"method","name":"initialize_internals_callback","children":[],"call":[" populate_with_current_scope_attributes "]}," ActiveRecord Scoping Named ClassMethods default_scoped":{"type":"method","name":"default_scoped","children":[],"call":[" relation merge "," build_default_scope "," relation "," relation spawn merge! "," relation spawn "," build_default_ build_default_scope  "," build_default_ relation  "]}," ActiveRecord SchemaMigration table_exists?":{"type":"method","name":"table_exists?","children":[],"call":[" connection table_exists? "," table_name "," connection ","ActiveSupport Deprecation  silence "," connection data_source_exists? "]}," ActiveRecord SchemaDumper generate_options":{"type":"method","name":"generate_options","children":[],"call":["config table_name_suffix ","config table_name_prefix "]}," ActiveRecord Result column_type":{"type":"method","name":"column_type","children":[],"call":[" identity_type ","@column_types [] "," column_types fetch "," column_types ","type_overrides fetch ","Type  default_value "]}," ActiveRecord Result identity_type":{"type":"method","name":"identity_type","children":[],"call":[]}," ActiveRecord Result type_cast":{"type":"method","name":"type_cast","children":[],"call":[]}," ActiveRecord Relation substitute_values":{"type":"method","name":"substitute_values","children":[],"call":["tuple []= ","@klass connection substitute_at ","binds [] [] ","binds [] ","@klass connection ","substitutes each_with_index ","@klass columns_hash [] ","arel_attr name ","@klass columns_hash ","substitutes map ","values sort_by ","values each_with_index map ","values each_with_index ","values map ","substitutes push ","Arel Nodes BindParam  new ","binds push ","QueryAttribute  new "," klass type_for_attribute "," klass ","values each "," connection substitute_at "," klass columns_hash [] "," klass columns_hash "," connection "]}," ActiveRecord Relation update_record":{"type":"method","name":"update_record","children":[],"call":["@klass connection update ","@klass connection ","@klass unscoped where arel compile_update ","@klass primary_key ","@klass unscoped where arel ","@klass unscoped where ","@klass arel_table [] eq ","@klass arel_table [] ","@klass arel_table ","@klass unscoped "," substitute_values "]}," ActiveRecord QueryMethods preprocess_order_args":{"type":"method","name":"preprocess_order_args","children":[],"call":["(send\n  (lvar :order_args) :map!) flatten! "," table [] send "," table [] "," table "," klass attribute_alias "," klass "," klass attribute_alias? ","arg map "," table [] asc ","order_args map! "," references! ","references any? ","(send\n  (lvar :references) :map!) compact! ","arg =~ ","references map! ","order_args grep "," validate_order_args ","order_args flatten! ","dir downcase "," arel_attribute send "," arel_attribute "," arel_attribute asc "," klass send ","field send ","@klass enforce_raw_sql_whitelist ","a keys ","a is_a? ","order_args flat_map "," klass sanitize_sql_for_order ","(send nil :arel_column\n  (lvar :field)) send ","Arel  sql "," connection quote_table_name "," connection "," arel_column ","field to_s ","(send nil :arel_column\n  (lvar :arg)) asc ","arg to_s "," order_column send "," order_column "," order_column asc ","@klass disallow_raw_sql! "," connection column_name_with_order_matcher ","order_args reject! "," order_column public_send ","field public_send "," references_values ","references empty? "," column_references ","(send\n  (lvar :order_ klass attribute_alias s) :map!) flatten! ","(send\n  (lvar :order_arg to_s s) :map!) flatten! "," klass attribute_alias  map ","arg to_s  map ","order_ klass attribute_alias s map! ","order_arg to_s s map! "," order_args grep ! ","  column_references ! ","order_args grep  any? "," column_references  any? ","(send\n  (lvar :order_args grep ) :map!) compact! ","(send\n  (lvar : column_references ) :map!) compact! "," klass attribute_alias  =~ ","arg to_s  =~ ","order_args grep  map! "," column_references  map! ","order_ klass attribute_alias s grep ","order_arg to_s s grep "," validate_order_ klass attribute_alias s "," validate_order_arg to_s s ","order_ klass attribute_alias s flatten! ","order_arg to_s s flatten! "," klass attribute_alias  send ","field to_s  send ","order_ klass attribute_alias s flat_map ","order_arg to_s s flat_map ","(send nil :arel_column\n  (lvar : klass attribute_alias )) send ","(send nil :arel_column\n  (lvar :field to_s )) send "," klass attribute_alias  to_s ","field to_s  to_s ","(send nil :arel_column\n  (lvar : klass attribute_alias )) asc ","(send nil :arel_column\n  (lvar :arg to_s )) asc ","arg to_s  to_s ","order_ klass attribute_alias s reject! ","order_arg to_s s reject! "," klass attribute_alias  public_send ","field to_s  public_send "," order_args grep _values ","  column_references _values ","order_args grep  empty? "," column_references  empty? "," column_order_args grep  "," column_ column_references  "]}," ActiveRecord QueryMethods rewhere":{"type":"method","name":"rewhere","children":[],"call":[" unscope where "," unscope ","conditions keys ","scope where_clause ","scope unscope! ","where_clause extract_attributes ","scope build_where_clause "," spawn ","conditions nil? "," un spawn  where "," un spawn  ","scope scope build_where_clause  "," spawn  where_clause "," spawn  un spawn ! ","scope build_where_clause  extract_attributes ","scope build_scope build_where_clause  "," spawn  build_where_clause "]}," ActiveRecord PredicateBuilder handler_for":{"type":"method","name":"handler_for","children":[],"call":["(send\n  (ivar :@handlers) :detect) last ","klass === ","@handlers detect "]}," ActiveRecord PredicateBuilder register_handler":{"type":"method","name":"register_handler","children":[],"call":["@handlers unshift "]}," ActiveRecord PredicateBuilder polymorphic_base_class_from_value":{"type":"method","name":"polymorphic_base_class_from_value","children":[],"call":[]}," ActiveRecord PredicateBuilder resolve_column_aliases":{"type":"method","name":"resolve_column_aliases","children":[],"call":[]}," ActiveRecord PredicateBuilder RelationHandler call":{"type":"method","name":"call","children":[],"call":["attribute in ","value arel ast ","value arel ","value select ","value klass arel_table [] ","value klass primary_key ","value klass ","value klass arel_table ","value select_values empty? ","value select_values ","value where_values= ","node dup ","value where_values map ","value where_values ","value dup ","value arel_attribute ","value send ","value eager_loading? ","value table [] ","value table "," raise ","attribute name ","value klass composite_primary_key? ","value select  arel ast ","value dup  arel ast ","value send  arel ast ","value select  arel ","value dup  arel ","value send  arel ","value select  select ","value dup  select ","value send  select ","value select  klass arel_table [] ","value dup  klass arel_table [] ","value send  klass arel_table [] ","value select  klass primary_key ","value dup  klass primary_key ","value send  klass primary_key ","value select  klass ","value dup  klass ","value send  klass ","value select  klass arel_table ","value dup  klass arel_table ","value send  klass arel_table ","value select  select_value select s empty? ","value dup  select_value dup s empty? ","value send  select_value send s empty? ","value select  select_value select s ","value dup  select_value dup s ","value send  select_value send s ","value select  where_value select s= ","value dup  where_value dup s= ","value send  where_value send s= ","value select  where_value select s map ","value dup  where_value dup s map ","value send  where_value send s map ","value select  where_value select s ","value dup  where_value dup s ","value send  where_value send s ","value select  dup ","value dup  dup ","value send  dup ","value select  arel_attribute ","value dup  arel_attribute ","value send  arel_attribute ","value select  send ","value dup  send ","value send  send ","value select  eager_loading? ","value dup  eager_loading? ","value send  eager_loading? ","value select  table [] ","value dup  table [] ","value send  table [] ","value select  table ","value dup  table ","value send  table ","value select  klass composite_primary_key? ","value dup  klass composite_primary_key? ","value send  klass composite_primary_key? "]}," ActiveRecord PredicateBuilder ArrayHandler call":{"type":"method","name":"call","children":[],"call":["composite or ","array_predicates inject ","array_predicates << ","attribute in ","ranges map ","attribute in or ","attribute eq ","attribute eq or ","values first ","values length ","values compact ","values include? ","v is_a? ","values partition ","x id ","x is_a? ","value map ","array_predicates unshift ","attribute between ","values_predicate or ","nils empty? ","values empty? ","values flatten ","ActiveSupport Deprecation  warn ","(str \"            Passing a nested array to Active Record finder methods is\\n\") squish ","val is_a? ","values any? ","value empty? ","flat_values include? "," predicate_builder build "," predicate_builder "," predicate_builder build_bind_attribute ","attribute name ","values map ","values map! ","values extract! ","ranges map! ","ranges empty? ","Arel Nodes HomogeneousIn  new ","values compact  first ","values flatten  first ","values compact  length ","values flatten  length ","values compact  compact ","values flatten  compact ","values compact  include? ","values flatten  include? ","values compact  partition ","values flatten  partition ","attribute in  or ","values_predicate or  or ","values compact _predicate or ","values flatten _predicate or ","values extract!  empty? ","values compact  empty? ","values flatten  empty? ","values compact  flatten ","values flatten  flatten ","values compact  any? ","values flatten  any? ","flat_values compact  include? ","flat_values flatten  include? ","values compact  map ","values flatten  map ","values compact  map! ","values flatten  map! ","values compact  extract! ","values flatten  extract! "]}," ActiveRecord FinderMethods find_nth_with_limit":{"type":"method","name":"find_nth_with_limit","children":[],"call":[" limit offset to_a "," limit offset "," limit "," order limit offset to_a "," order limit offset "," order limit "," order "," arel_table [] asc "," arel_table [] "," primary_key "," arel_table "," order_values empty? "," order_values ","relation limit to_a ","relation limit ","relation offset ","offset zero? ","index zero? "," arel_attribute asc "," arel_attribute "," offset_index + "," offset_index ","index < "," limit_value "," limit_value nil? "," records [] "," records "," loaded? ","limit > ","(send\n  (send nil :limit_value) :-\n  (lvar :index)) min "," limit_value - "," ordered_relation ","(or\n  (send nil :offset_value)\n  (int 0)) + "," offset_value "," (send\n  (send nil :limit_value) :-\n  (lvar :index)) min  offset to_a "," (send\n  (send nil :limit_value) :-\n  (lvar :index)) min  offset "," (send\n  (send nil :limit_value) :-\n  (lvar :index)) min  "," order (send\n  (send nil :limit_value) :-\n  (lvar :index)) min  offset to_a "," order (send\n  (send nil :limit_value) :-\n  (lvar :index)) min  offset "," order (send\n  (send nil :limit_value) :-\n  (lvar :index)) min  ","relation offset  limit to_a "," order  limit to_a "," ordered_relation  limit to_a ","relation (send\n  (send nil :limit_value) :-\n  (lvar :index)) min  to_a ","relation offset  limit "," order  limit "," ordered_relation  limit ","relation (send\n  (send nil :limit_value) :-\n  (lvar :index)) min  ","relation offset  offset "," order  offset "," ordered_relation  offset "," (send\n  (send nil :limit_value) :-\n  (lvar :index)) min _value "," (send\n  (send nil :limit_value) :-\n  (lvar :index)) min _value nil? ","(send\n  (send nil :limit_value) :-\n  (lvar :index)) min  > ","(send\n  (send nil :(send\n  (send nil :limit_value) :-\n  (lvar :index)) min _value) :-\n  (lvar :index)) min "," (send\n  (send nil :limit_value) :-\n  (lvar :index)) min _value - "," ordered_relation offset  "," ordered_ order  "," ordered_ ordered_relation  "]}," ActiveRecord FinderMethods find_nth":{"type":"method","name":"find_nth","children":[],"call":[" find_nth_with_limit first "," find_nth_with_limit ","@offsets [] ","@records send "," loaded? ","@records [] "," find_nth_with_limit_and_offset first "," find_nth_with_limit_and_offset ","offset + "," offset_index ","ActiveSupport Deprecation  warn ","(str \"          Passing an offset argument to find_nth is deprecated,\\n\") squish "," records [] "," records "," offset_index + "]}," ActiveRecord FinderMethods limited_ids_for":{"type":"method","name":"limited_ids_for","children":[],"call":["row [] "," primary_key ","id_rows map ","@klass connection select_all ","relation bind_values ","relation arel ","@klass connection ","relation except select distinct! ","relation except select ","relation except ","@klass connection columns_for_distinct ","relation order_values "," quoted_primary_key "," quoted_table_name ","arel bind_values + ","arel bind_values ","relation bound_attributes "," skip_query_cache_if_necessary "," connection column_name_from_arel_node "," arel_attribute "," connection "," connection visitor compile "," connection visitor ","@klass connection select_rows "," table [] "," table ","@klass connection select_all  map ","relation except select distinct!  bind_values ","relation bind_@klass connection columns_for_distinct  ","relation except select distinct!  arel ","relation relation arel  ","relation except select distinct!  except select distinct! ","relation except select distinct!  except select ","relation except select distinct!  except ","relation except select distinct!  order_values ","relation order_@klass connection columns_for_distinct  ","arel bind_@klass connection columns_for_distinct  + ","relation arel  bind_values + ","arel bind_@klass connection columns_for_distinct  ","relation arel  bind_values ","relation except select distinct!  bound_attributes "," connection column_name_from_relation arel _node "," relation arel _attribute "]}," ActiveRecord FinderMethods construct_join_dependency":{"type":"method","name":"construct_join_dependency","children":[],"call":["ActiveRecord Associations JoinDependency  new "," eager_load_values + "," includes_values "," eager_load_values "," alias_tracker "," table "," klass ","join is_a? "," joins_values select "," joins_values "]}," ActiveRecord FinderMethods forty_two!":{"type":"method","name":"forty_two!","children":[],"call":[" raise "," forty_two "," find_nth! ","RecordNotFound  new "," arel where_sql "," arel ","@klass name "," raise_record_not_found_exception! "]}," ActiveRecord FinderMethods forty_two":{"type":"method","name":"forty_two","children":[],"call":[" find_nth "," offset_value + "," offset_value "," offset_index "]}," ActiveRecord FinderMethods fifth!":{"type":"method","name":"fifth!","children":[],"call":[" raise "," fifth "," find_nth! ","RecordNotFound  new "," arel where_sql "," arel ","@klass name "," raise_record_not_found_exception! "]}," ActiveRecord FinderMethods fifth":{"type":"method","name":"fifth","children":[],"call":[" find_nth "," offset_value + "," offset_value "," offset_index "]}," ActiveRecord FinderMethods fourth!":{"type":"method","name":"fourth!","children":[],"call":[" raise "," fourth "," find_nth! ","RecordNotFound  new "," arel where_sql "," arel ","@klass name "," raise_record_not_found_exception! "]}," ActiveRecord FinderMethods fourth":{"type":"method","name":"fourth","children":[],"call":[" find_nth "," offset_value + "," offset_value "," offset_index "]}," ActiveRecord FinderMethods third!":{"type":"method","name":"third!","children":[],"call":[" raise "," third "," find_nth! ","RecordNotFound  new "," arel where_sql "," arel ","@klass name "," raise_record_not_found_exception! "]}," ActiveRecord FinderMethods third":{"type":"method","name":"third","children":[],"call":[" find_nth "," offset_value + "," offset_value "," offset_index "]}," ActiveRecord FinderMethods second!":{"type":"method","name":"second!","children":[],"call":[" raise "," second "," find_nth! ","RecordNotFound  new "," arel where_sql "," arel ","@klass name "," raise_record_not_found_exception! "]}," ActiveRecord FinderMethods second":{"type":"method","name":"second","children":[],"call":[" find_nth "," offset_value + "," offset_value "," offset_index "]}," ActiveRecord Delegation array_delegable?":{"type":"method","name":"array_delegable?","children":[],"call":["BLACKLISTED_ARRAY_METHODS  exclude? ","Array  method_defined? "]}," ActiveRecord Delegation ClassMethods create":{"type":"method","name":"create","children":[],"call":[" relation_class_for new "," relation_class_for "]}," ActiveRecord Delegation DelegateCache inherited":{"type":"method","name":"inherited","children":[],"call":["child_class initialize_relation_delegate_cache ","delegate include ","child_class relation_delegate_class ","child_class initialize_relation_child_class relation_delegate_class _cache ","child_class relation_delegate_class  include ","child_class relation_child_class relation_delegate_class _class "]}," ActiveRecord Delegation DelegateCache initialize_relation_delegate_cache":{"type":"method","name":"initialize_relation_delegate_cache","children":[],"call":["cache []= "," const_set ","klass name gsub ","klass name "," include ","Class  new ","(const\n  (const nil :ActiveRecord) :Relation) each ","_ freeze ",":: freeze "," private_constant "," include_relation_methods ","Delegation  delegated_classes each ","Delegation  delegated_classes "]}," ActiveRecord Delegation DelegateCache relation_delegate_class":{"type":"method","name":"relation_delegate_class","children":[],"call":["@relation_delegate_cache [] "]}," ActiveRecord Reflection ThroughReflection actual_source_reflection":{"type":"method","name":"actual_source_reflection","children":[],"call":[" source_reflection actual_source_reflection "," source_reflection "," source_reflection send "]}," ActiveRecord Reflection ThroughReflection source_reflection_name":{"type":"method","name":"source_reflection_name","children":[],"call":["names first ","ActiveSupport Deprecation  warn "," name "," macro "," active_record name "," active_record ","example_options []= "," source_reflection_names first "," source_reflection_names "," options dup "," options ","names length > ","names length "," through_reflection klass reflect_on_association "," through_reflection klass "," through_reflection ","names find_all ","(send\n  (array\n    (send\n      (send\n        (send nil :name) :to_s) :singularize)\n    (send nil :name)) :collect) uniq ","n to_sym ","(send\n  (send\n    (send nil :name) :to_s) :singularize) collect "," name to_s singularize "," name to_s "," through_reflection klass _reflect_on_association ","@source_reflection_name to_sym ","(send\n  (send\n    (send nil :name) :to_s) :singularize) collect uniq "," raise ","AmbiguousSourceReflectionForThroughAssociation  new ","(send\n  (array\n    (send\n      (send\n        (send nil :name) :to_s) :singularize)\n    (send nil :name)) :collect) uniq  first ","(send\n  (send\n    (send nil :name) :to_s) :singularize) collect uniq  first "," options dup  []= "," source_reflection_(send\n  (array\n    (send\n      (send\n        (send nil :name) :to_s) :singularize)\n    (send nil :name)) :collect) uniq  first "," source_reflection_(send\n  (send\n    (send nil :name) :to_s) :singularize) collect uniq  first "," source_reflection_(send\n  (array\n    (send\n      (send\n        (send nil :name) :to_s) :singularize)\n    (send nil :name)) :collect) uniq  "," source_reflection_(send\n  (send\n    (send nil :name) :to_s) :singularize) collect uniq  ","(send\n  (array\n    (send\n      (send\n        (send nil :name) :to_s) :singularize)\n    (send nil :name)) :collect) uniq  length > ","(send\n  (send\n    (send nil :name) :to_s) :singularize) collect uniq  length > ","(send\n  (array\n    (send\n      (send\n        (send nil :name) :to_s) :singularize)\n    (send nil :name)) :collect) uniq  length ","(send\n  (send\n    (send nil :name) :to_s) :singularize) collect uniq  length ","(send\n  (array\n    (send\n      (send\n        (send nil :name) :to_s) :singularize)\n    (send nil :name)) :collect) uniq  find_all ","(send\n  (send\n    (send nil :name) :to_s) :singularize) collect uniq  find_all ","names first  to_sym "]}," ActiveRecord Reflection ThroughReflection initialize":{"type":"method","name":"initialize","children":[],"call":["options [] ","delegate_reflection options [] ","delegate_reflection options "," ensure_option_not_given_as_class! "]}," ActiveRecord Reflection AssociationReflection can_find_inverse_of_automatically?":{"type":"method","name":"can_find_inverse_of_automatically?","children":[],"call":["reflection scope ! ","reflection scope ","(send\n  (const nil :INVALID_AUTOMATIC_INVERSE_OPTIONS) :any?) ! ","reflection options [] ","reflection options ","INVALID_AUTOMATIC_INVERSE_OPTIONS  any? ","VALID_AUTOMATIC_INVERSE_MACROS  include? ","reflection macro ","reflection options [] != "," scope_allows_automatic_inverse_of? ","reflection options [] ! "]}," ActiveRecord Reflection AssociationReflection valid_inverse_reflection?":{"type":"method","name":"valid_inverse_reflection?","children":[],"call":[" can_find_inverse_of_automatically? "," klass name == ","reflection active_record name ","reflection active_record "," klass name "," klass "," klass <= "," foreign_key == ","reflection foreign_key "," foreign_key ","reflection != "]}," ActiveRecord Reflection AssociationReflection automatic_inverse_of":{"type":"method","name":"automatic_inverse_of","children":[],"call":[" valid_inverse_reflection? "," klass reflect_on_association "," klass ","ActiveSupport Inflector  underscore to_sym ","ActiveSupport Inflector  underscore "," active_record name "," active_record "," can_find_inverse_of_automatically? "," klass _reflect_on_association "," active_record name demodulize "," options [] "," options ","inverse_name_candidates detect ","inverse_name_candidates map! ","ActiveSupport Inflector  pluralize "," raise ","error name to_s == "," class_name ","error name to_s ","error name "," valid_inverse_ klass reflect_on_association ? "," valid_inverse_ klass _reflect_on_association ? ","ActiveSupport Inflector  underscore to_sym _candidates detect ","ActiveSupport Inflector  underscore to_sym _candidates map! "]}," ActiveRecord Reflection AssociationReflection inverse_name":{"type":"method","name":"inverse_name","children":[],"call":[" automatic_inverse_of ","@automatic_inverse_of == "," options fetch "," options "]}," ActiveRecord Reflection AssociationReflection calculate_constructable":{"type":"method","name":"calculate_constructable","children":[],"call":["options [] ! ","options [] "," polymorphic? ! "," polymorphic? "]}," ActiveRecord Reflection AssociationReflection actual_source_reflection":{"type":"method","name":"actual_source_reflection","children":[],"call":[]}," ActiveRecord Reflection AssociationReflection constructable?":{"type":"method","name":"constructable?","children":[],"call":[]}," ActiveRecord Reflection MacroReflection autosave=":{"type":"method","name":"autosave=","children":[],"call":["@options []= ","parent_reflection autosave= "," parent_reflection "," parent_reflection  autosave= ","  parent_reflection  "]}," ActiveRecord Reflection add_aggregate_reflection":{"type":"method","name":"add_aggregate_reflection","children":[],"call":["ar aggregate_reflections= ","ar aggregate_reflections merge ","name to_s -@ ","name to_s ","ar aggregate_reflections "]}," ActiveRecord Reflection add_reflection":{"type":"method","name":"add_reflection","children":[],"call":["ar _reflections= ","ar _reflections except merge! ","ar _reflections except ","ar _reflections ","name to_s -@ ","name to_s ","ar clear_reflections_cache ","name to_s -@  to_s -@ ","name to_s  to_s -@ ","name to_s -@  to_s ","name to_s  to_s "]}," ActiveRecord Reflection create":{"type":"method","name":"create","children":[],"call":["ThroughReflection  new ","options [] "," reflection_class_for new "," reflection_class_for ","  reflection_class_for new _class_for new ","  reflection_class_for new _class_for "]}," ActiveRecord Railtie NoDatabaseError extend_message":{"type":"method","name":"extend_message","children":[],"call":["message << "]}," ActiveRecord NoTouching touch":{"type":"method","name":"touch","children":[],"call":[" no_touching? "]}," ActiveRecord NoTouching no_touching?":{"type":"method","name":"no_touching?","children":[],"call":["NoTouching  applied_to? "," class "]}," ActiveRecord NoTouching klasses":{"type":"method","name":"klasses","children":[],"call":["Thread  current [] ","Thread  current ","ActiveSupport IsolatedExecutionState  [] "]}," ActiveRecord NoTouching applied_to?":{"type":"method","name":"applied_to?","children":[],"call":["k >= "," klasses any? "," klasses "]}," ActiveRecord NoTouching apply_to":{"type":"method","name":"apply_to","children":[],"call":[" klasses pop "," klasses "," klasses push "]}," ActiveRecord NoTouching ClassMethods no_touching":{"type":"method","name":"no_touching","children":[],"call":["NoTouching  apply_to "]}," ActiveRecord Migration table_name_options":{"type":"method","name":"table_name_options","children":[],"call":["config table_name_suffix ","config table_name_prefix "]}," ActiveRecord Migration proper_table_name":{"type":"method","name":"proper_table_name","children":[],"call":["options [] ","name table_name ","name respond_to? "]}," ActiveRecord Migration maintain_test_schema!":{"type":"method","name":"maintain_test_schema!","children":[],"call":[" load_schema_if_pending! "," suppress_messages ","ActiveRecord Base  maintain_test_schema ","ActiveRecord  maintain_test_schema "]}," ActiveRecord Migration load_schema_if_pending!":{"type":"method","name":"load_schema_if_pending!","children":[],"call":[" check_pending! ","ActiveRecord Tasks DatabaseTasks  load_schema ","ActiveRecord Migrator  needs_migration? ","Base  establish_connection "," system ","Base  clear_all_connections! ","Base  connection_config ","FileUtils  cd ","Rails  root ","ActiveRecord Tasks DatabaseTasks  load_schema_current ","ActiveRecord Migrator  any_migrations? ! ","ActiveRecord Migrator  any_migrations? ","Base  connection migration_context any_migrations? ! ","Base  connection migration_context any_migrations? ","Base  connection migration_context ","Base  connection ","Base  connection migration_context needs_migration? ","(send\n  (lvar :all_configs) :all?) ! ","Tasks DatabaseTasks  schema_up_to_date? ","db_config spec_name ","Rails  env ","ActiveRecord Base  schema_format ","db_config config ","all_configs all? ","ActiveRecord Base  configurations configs_for ","ActiveRecord Base  configurations ","Base  connection_db_config ","ActiveRecord  schema_format "," check_pending_migrations ","Base  connection_handler clear_all_connections! ","Base  connection_handler "," any_schema_needs_update? ","Rails  Rails  root  ","(send\n  (lvar :ActiveRecord Base  configurations configs_for ) :all?) ! ","ActiveRecord Base  configurations configs_for  all? "," any_schema_(send\n  (lvar :all_configs) :all?) ! ? "]}," ActiveRecord MigrationError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Migration CommandRecorder invert_change_column_null":{"type":"method","name":"invert_change_column_null","children":[],"call":["args []= ","args [] ! ","args [] "]}," ActiveRecord Integration ClassMethods to_param":{"type":"method","name":"to_param","children":[],"call":["(lvasgn :param\n  (send\n    (send\n      (send\n        (lvar :result) :squish) :truncate\n      (int 20)\n      (hash\n        (pair\n          (sym :separator)\n          (regexp\n            (str \"\\\\s\")\n            (regopt)))\n        (pair\n          (sym :omission)\n          (nil)))) :parameterize)) present? ","result squish truncate parameterize ","result squish truncate ","result squish ","(lvasgn :result\n  (send\n    (send nil :send\n      (lvar :method_name)) :to_s)) present? "," send to_s "," send "," define_method ","method_name nil? ","(lvasgn :param\n  (send\n    (send\n      (send\n        (lvar :result) :squish) :parameterize) :truncate\n    (int 20)\n    (hash\n      (pair\n        (sym :separator)\n        (regexp\n          (str \"-\")\n          (regopt)))\n      (pair\n        (sym :omission)\n        (str \"\"))))) present? ","result squish parameterize truncate ","result squish parameterize ","(lvasgn :result squish truncate parameterize \n  (send\n    (send\n      (send\n        (lvar :result) :squish) :truncate\n      (int 20)\n      (hash\n        (pair\n          (sym :separator)\n          (regexp\n            (str \"\\\\s\")\n            (regopt)))\n        (pair\n          (sym :omission)\n          (nil)))) :result squish truncate parameterize eterize)) present? ","(lvasgn :result squish parameterize truncate \n  (send\n    (send\n      (send\n        (lvar :result) :squish) :truncate\n      (int 20)\n      (hash\n        (pair\n          (sym :separator)\n          (regexp\n            (str \"\\\\s\")\n            (regopt)))\n        (pair\n          (sym :omission)\n          (nil)))) :result squish parameterize truncate eterize)) present? ","(lvasgn :param\n  (send\n    (send\n      (send\n        (lvar : send to_s ) :squish) :truncate\n      (int 20)\n      (hash\n        (pair\n          (sym :separator)\n          (regexp\n            (str \"\\\\s\")\n            (regopt)))\n        (pair\n          (sym :omission)\n          (nil)))) :parameterize)) present? ","result squish truncate result squish truncate parameterize eterize ","result squish truncate result squish parameterize truncate eterize "," send to_s  squish truncate parameterize "," send to_s  squish truncate "," send to_s  squish ","(lvasgn : send to_s \n  (send\n    (send nil :send\n      (lvar :method_name)) :to_s)) present? ","(lvasgn :result squish truncate parameterize \n  (send\n    (send\n      (send\n        (lvar :result) :squish) :result squish truncate parameterize eterize) :truncate\n    (int 20)\n    (hash\n      (pair\n        (sym :separator)\n        (regexp\n          (str \"-\")\n          (regopt)))\n      (pair\n        (sym :omission)\n        (str \"\"))))) present? ","(lvasgn :result squish parameterize truncate \n  (send\n    (send\n      (send\n        (lvar :result) :squish) :result squish parameterize truncate eterize) :truncate\n    (int 20)\n    (hash\n      (pair\n        (sym :separator)\n        (regexp\n          (str \"-\")\n          (regopt)))\n      (pair\n        (sym :omission)\n        (str \"\"))))) present? ","(lvasgn :param\n  (send\n    (send\n      (send\n        (lvar : send to_s ) :squish) :parameterize) :truncate\n    (int 20)\n    (hash\n      (pair\n        (sym :separator)\n        (regexp\n          (str \"-\")\n          (regopt)))\n      (pair\n        (sym :omission)\n        (str \"\"))))) present? ","result squish result squish truncate parameterize eterize truncate ","result squish result squish parameterize truncate eterize truncate "," send to_s  squish parameterize truncate ","result squish result squish truncate parameterize eterize ","result squish result squish parameterize truncate eterize "," send to_s  squish parameterize "]}," ActiveRecord Inheritance initialize_internals_callback":{"type":"method","name":"initialize_internals_callback","children":[],"call":[" ensure_proper_type "]}," ActiveRecord Inheritance initialize_dup":{"type":"method","name":"initialize_dup","children":[],"call":[" ensure_proper_type "]}," ActiveRecord gem_version":{"type":"method","name":"gem_version","children":[],"call":[]}," RenderContext create_subclass":{"type":"method","name":"create_subclass","children":[{"type":"method","name":"get_binding","children":[],"asgn":[],"call":[" binding "]}],"call":[]}," ActiveRecord FixtureSet add_join_records":{"type":"method","name":"add_join_records","children":[],"call":["rows [] concat ","ActiveRecord FixtureSet  identify ","row [] "," primary_key_name ","targets map ","rows [] ","targets split ","targets is_a? ","association rhs_key ","association lhs_key ","association join_table ","row delete ","association name to_s ","association name ","association primary_key_type ","targets split  map ","row delete  map ","targets split  split ","row delete  split ","targets split  is_a? ","row delete  is_a? ","association association rhs_key  ","association association lhs_key  "]}," ActiveRecord FixtureSet HasManyThroughProxy lhs_key":{"type":"method","name":"lhs_key","children":[],"call":["@association through_reflection foreign_key ","@association through_reflection "]}," ActiveRecord FixtureSet HasManyThroughProxy rhs_key":{"type":"method","name":"rhs_key","children":[],"call":["@association foreign_key "]}," ActiveRecord FixtureSet ReflectionProxy name":{"type":"method","name":"name","children":[],"call":["@association name "]}," ActiveRecord FixtureSet ReflectionProxy join_table":{"type":"method","name":"join_table","children":[],"call":["@association join_table "]}," ActiveRecord FixtureSet ReflectionProxy initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord FixtureSet context_class":{"type":"method","name":"context_class","children":[],"call":["Class  new "]}," ActiveRecord FixtureSet ClassCache default_fixture_model":{"type":"method","name":"default_fixture_model","children":[],"call":["ActiveRecord FixtureSet  default_fixture_model_name "]}," ActiveRecord FixtureSet ClassCache insert_class":{"type":"method","name":"insert_class","children":[],"call":["class_names []= ","klass < "]}," ActiveRecord FixtureSet ClassCache []":{"type":"method","name":"[]","children":[],"call":[" insert_class "," default_fixture_model safe_constantize "," default_fixture_model ","@class_names fetch "]}," ActiveRecord FixtureSet ClassCache initialize":{"type":"method","name":"initialize","children":[],"call":[" insert_class ! "," insert_class ","ActiveSupport Deprecation  warn ","klass safe_constantize ","klass is_a? ","@class_names delete_if ","class_names stringify_keys ","klass safe_constantize  safe_constantize ","klass safe_constantize  is_a? ","class_names stringify_keys  delete_if "]}," ActiveRecord UnknownAttributeError initialize":{"type":"method","name":"initialize","children":[],"call":["attribute to_s ","@record class "]}," ActiveRecord NoDatabaseError extend_message":{"type":"method","name":"extend_message","children":[],"call":[]}," ActiveRecord NoDatabaseError initialize":{"type":"method","name":"initialize","children":[],"call":[" extend_message "]}," ActiveRecord Enum detect_enum_conflict!":{"type":"method","name":"detect_enum_conflict!","children":[],"call":[" raise ","ENUM_CONFLICT_MESSAGE  % "," name "," method_defined_within? "," _enum_methods_module ","klass_method ! "," dangerous_attribute_method? "," dangerous_class_method? "," raise_conflict_error ","Relation  name ","method_name to_sym == ","method_name to_sym "]}," ActiveRecord Enum _enum_methods_module":{"type":"method","name":"_enum_methods_module","children":[{"type":"method","name":"save_changed_attribute","children":[],"asgn":[{"type":"local","name":"old","value":" clone_attribute_value "},[" clone_attribute_value "],{"type":"local","name":"old","value":" changed_attributes [] "},[" changed_attributes [] "],{"type":"local","name":"mapping","value":" class defined_enums [] "},[" class defined_enums [] "]],"call":[" changed_attributes []= ","mapping key "," changed_attributes ","old != "," clone_attribute_value "," changed_attributes delete "," changed_attributes ","mapping [] == ","mapping [] "," changed_attributes [] "," changed_attributes "," attribute_changed? "," class defined_enums [] ","attr_name to_s "," class defined_enums "," class "]}],"call":[" include "," changed_attributes []= ","mapping key "," changed_attributes ","old != "," clone_attribute_value "," changed_attributes delete ","mapping [] == ","mapping [] "," changed_attributes [] "," attribute_changed? "," class defined_enums [] ","attr_name to_s "," class defined_enums "," class "," private ","Module  new "," class enum_mapping_for "," set_attribute_was "," clear_attribute_changes "," _read_attribute "," read_attribute ","EnumMethods  new "," class defined_enums []  key "," class enum_mapping_for  key "," clone_attribute_value  != "," changed_attributes []  != "," clone_attribute_ _read_attribute  "," clone_attribute_ read_attribute  "," class defined_enums []  [] == "," class enum_mapping_for  [] == "," class defined_enums []  [] "," class enum_mapping_for  [] "," class enum_ class defined_enums [] _for "," class enum_ class enum_mapping_for _for "]}," ActiveRecord Enum enum":{"type":"method","name":"enum","children":[],"call":[" defined_enums []= ","name to_s "," defined_enums ","klass scope ","klass where "," lambda ","klass send "," update! "," define_method "," [] == "," [] ","enum_values []= ","pairs each ","values each_with_index ","values each_pair ","values respond_to? ","enum_values key "," raise "," []= ","enum_values has_value? ","enum_values [] ","value blank? ","enum_values has_key? "," _enum_methods_module module_eval "," _enum_methods_module ","klass singleton_class send ","name to_s pluralize ","klass singleton_class "," detect_enum_conflict! ","name to_sym ","ActiveSupport HashWithIndifferentAccess  new ","definitions each "," _enum_methods_module const_set ","name to_s upcase ","DEFINED_ENUMS  []= "," where ","value to_s ","enum_suffix == ","enum_prefix == ","EnumType  new "," decorate_attribute_type ","definitions delete "," attribute "," attribute_alias "," attribute_alias? ","label to_s "," singleton_class send ","name pluralize "," singleton_class ","enum_values freeze "," where not ","enum_scopes != "," singleton_class define_method "," assert_valid_enum_definition_values ","value_method_names << ","label to_s gsub ","default []= ","definitions key? "," detect_negative_enum_conditions! "," define_enum_methods ","value_method_names include? ! ","value_method_names include? ","value_method_alias != ","label gsub "," _enum ","key [] ","options transform_keys! ","options slice! ","name to_sym  to_s ","name to_s  to_s ","ActiveSupport HashWithIndifferentAccess  new  []= "," _enum_methods_module const_set  []= ","values each_with_index  each ","values each_pair  each ","ActiveSupport HashWithIndifferentAccess  new  key "," _enum_methods_module const_set  key ","ActiveSupport HashWithIndifferentAccess  new  has_value? "," _enum_methods_module const_set  has_value? ","ActiveSupport HashWithIndifferentAccess  new  [] "," _enum_methods_module const_set  [] ","ActiveSupport HashWithIndifferentAccess  new  has_key? "," _enum_methods_module const_set  has_key? ","name to_sym  to_s pluralize ","name to_s  to_s pluralize ","name to_sym  to_sym ","name to_s  to_sym ","options slice!  each ","name to_sym  to_s upcase ","name to_s  to_s upcase ","definitions delete  == "," decorate_ attribute_alias ibute_type ","options slice!  delete ","  attribute_alias ibute ","  attribute_alias ibute_alias ","  attribute_alias ibute_alias? ","label to_s  to_s ","name to_sym  pluralize ","name to_s  pluralize ","ActiveSupport HashWithIndifferentAccess  new  freeze "," _enum_methods_module const_set  freeze ","definitions delete  != ","value_method_name to_sym s << ","value_method_name to_s s << ","label to_s  to_s gsub ","options slice!  key? ","value_method_name to_sym s include? ! ","value_method_name to_s s include? ! ","value_method_name to_sym s include? ","value_method_name to_s s include? ","label to_s  gsub "]}," ActiveRecord Enum inherited":{"type":"method","name":"inherited","children":[],"call":["base defined_enums= "," defined_enums deep_dup "," defined_enums "]}," ActiveRecord Enum extended":{"type":"method","name":"extended","children":[],"call":[]}," ActiveRecord Core initialize_internals_callback":{"type":"method","name":"initialize_internals_callback","children":[],"call":[]}," ActiveRecord Core ClassMethods generated_association_methods":{"type":"method","name":"generated_association_methods","children":[],"call":[" include "," const_set ","Module  new "," private_constant "]}," ActiveRecord Core disable_implicit_join_references=":{"type":"method","name":"disable_implicit_join_references=","children":[],"call":[]}," ActiveRecord Core configurations":{"type":"method","name":"configurations","children":[],"call":[]}," ActiveRecord Core configurations=":{"type":"method","name":"configurations=","children":[],"call":[]}," ActiveRecord ConnectionHandling MergeAndResolveDefaultUrlConfig config":{"type":"method","name":"config","children":[],"call":["cfg [] [] ","cfg [] ","ENV  [] ","@raw_config dup tap ","@raw_config dup "," raw_merged_into_default "]}," ActiveRecord ConnectionHandling MergeAndResolveDefaultUrlConfig resolve":{"type":"method","name":"resolve","children":[],"call":["ConnectionAdapters ConnectionSpecification Resolver  new resolve_all ","ConnectionAdapters ConnectionSpecification Resolver  new "," config "]}," ActiveRecord ConnectionHandling MergeAndResolveDefaultUrlConfig initialize":{"type":"method","name":"initialize","children":[],"call":["DEFAULT_ENV  call to_s ","DEFAULT_ENV  call ","raw_configurations dup "]}," ActiveRecord ConnectionAdapters SQLite3Adapter supports_partial_index?":{"type":"method","name":"supports_partial_index?","children":[],"call":[" sqlite_version >= "," sqlite_version "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter add_oid":{"type":"method","name":"add_oid","children":[],"call":["type_map []= ","row [] to_i ","row [] ","OID Vector  new ","type_map [] "," add_oid ","records_by_oid [] ","type_map key? ","OID NAMES  [] ","OID  registered_type? "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter type_map":{"type":"method","name":"type_map","children":[],"call":["Type HashLookupTypeMap  new "]}," ActiveRecord ConnectionAdapters PostgreSQLColumn accessor":{"type":"method","name":"accessor","children":[],"call":["@oid_type accessor "]}," ActiveRecord ConnectionAdapters PostgreSQLColumn type_cast_for_write":{"type":"method","name":"type_cast_for_write","children":[],"call":["@oid_type type_cast_for_write ","@oid_type respond_to? "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter OID Json accessor":{"type":"method","name":"accessor","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter OID Json type_cast_for_write":{"type":"method","name":"type_cast_for_write","children":[],"call":["ConnectionAdapters PostgreSQLColumn  json_to_string "," type_cast "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter OID Hstore accessor":{"type":"method","name":"accessor","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter OID Hstore type_cast_for_write":{"type":"method","name":"type_cast_for_write","children":[],"call":["ConnectionAdapters PostgreSQLColumn  hstore_to_string "," type_cast "]}," ActiveRecord ConnectionAdapters PostgreSQLColumn Cast type_cast_array":{"type":"method","name":"type_cast_array","children":[],"call":["oid type_cast "," type_cast_array ","value map "," Array  === "]}," ActiveRecord ConnectionAdapters ConnectionSpecification Resolver resolve_url_connection":{"type":"method","name":"resolve_url_connection","children":[],"call":["ConnectionUrlResolver  new to_hash ","ConnectionUrlResolver  new "]}," ActiveRecord ConnectionAdapters ConnectionSpecification Resolver resolve_symbol_connection":{"type":"method","name":"resolve_symbol_connection","children":[],"call":[" raise "," configurations keys inspect "," configurations keys "," configurations "," resolve_connection "," configurations [] ","spec to_s "," resolve_connection merge "," build_configuration_sentence ","ActiveRecord ConnectionHandling DEFAULT_ENV  call ","pool_name to_s ","db_config config "," configurations find_db_config ","  configurations [] urations keys inspect ","  configurations [] urations keys ","  configurations [] urations ","  configurations [] urations [] "," build_ configurations [] uration_sentence ","db_ configurations []   configurations []  "," configurations find_db_config  config ","  configurations [] urations find_db_ configurations []  "," configurations find_ configurations find_db_config  "]}," ActiveRecord ConnectionAdapters ConnectionSpecification Resolver resolve_connection":{"type":"method","name":"resolve_connection","children":[],"call":[" resolve_hash_connection "," resolve_string_connection "," resolve_symbol_connection "," resolve_env_connection "," resolve_url_connection "," raise ","config_or_env inspect "," resolve_connection "]}," ActiveRecord ConnectionAdapters ConnectionSpecification Resolver resolve_all":{"type":"method","name":"resolve_all","children":[],"call":["config []= "," resolve ","config each "," configurations dup "," configurations ","config merge! ","(or\n  (send\n    (lvar :v) :key?\n    (str \"adapter\"))\n  (send\n    (lvar :v) :key?\n    (str \"url\"))) ! ","v key? ","v is_a? ","config reject! ","config [] ","(or\n  (send\n    (send\n      (lvar :config) :[]\n      (lvar :env)) :key?\n    (str \"adapter\"))\n  (send\n    (send\n      (lvar :config) :[]\n      (lvar :env)) :key?\n    (str \"url\"))) ! ","config [] key? ","config [] is_a? ","ActiveRecord ConnectionHandling DEFAULT_ENV  call "," configurations dup  []= "," configurations dup  each ","  configurations dup urations dup ","  configurations dup urations "," configurations dup  merge! "," configurations dup  reject! "," configurations dup  [] ","(or\n  (send\n    (send\n      (lvar : configurations dup ) :[]\n      (lvar :env)) :key?\n    (str \"adapter\"))\n  (send\n    (send\n      (lvar : configurations dup ) :[]\n      (lvar :env)) :key?\n    (str \"url\"))) ! ","(or\n  (send\n    (send\n      (lvar :config) :[]\n      (lvar :ActiveRecord ConnectionHandling DEFAULT_ENV  call )) :key?\n    (str \"adapter\"))\n  (send\n    (send\n      (lvar :config) :[]\n      (lvar :ActiveRecord ConnectionHandling DEFAULT_ENV  call )) :key?\n    (str \"url\"))) ! "," configurations dup  [] key? "," configurations dup  [] is_a? "]}," ActiveRecord ConnectionAdapters ConnectionSpecification Resolver resolve":{"type":"method","name":"resolve","children":[],"call":[" raise "," resolve_symbol_connection ","env to_sym ","ActiveRecord ConnectionHandling RAILS_ENV  call "," resolve_connection "," resolve_env_connection ","ActiveRecord ConnectionHandling RAILS_ENV  call  to_sym "," resolve_ActiveRecord ConnectionHandling RAILS_ENV  call _connection "]}," ActiveRecord ConnectionAdapters ConnectionSpecification ConnectionUrlResolver database_from_path":{"type":"method","name":"database_from_path","children":[],"call":[" uri path sub "," uri path "," uri ","@adapter == ","ActiveSupport Deprecation  warn "]}," ActiveRecord ConnectionAdapters ConnectionSpecification ConnectionUrlResolver raw_config":{"type":"method","name":"raw_config","children":[],"call":[" query_hash merge "," uri host "," uri "," database_from_path "," uri port "," uri password "," uri user "," query_hash "," uri opaque "," database "," uri hostname "]}," ActiveRecord ConnectionAdapters ConnectionSpecification ConnectionUrlResolver query_hash":{"type":"method","name":"query_hash","children":[],"call":["Hash  [] ","pair split ","(or\n  (ivar :@query)\n  (str \"\")) split map ","(or\n  (ivar :@query)\n  (str \"\")) split ","@query split map ","@query split "]}," ActiveRecord ConnectionAdapters ConnectionSpecification ConnectionUrlResolver uri_parser":{"type":"method","name":"uri_parser","children":[],"call":["URI Parser  new "]}," ActiveRecord ConnectionAdapters ConnectionSpecification ConnectionUrlResolver uri":{"type":"method","name":"uri","children":[],"call":[]}," ActiveRecord ConnectionAdapters ConnectionSpecification ConnectionUrlResolver to_hash":{"type":"method","name":"to_hash","children":[],"call":["config []= "," uri_parser unescape "," uri_parser ","value is_a? ","config map ","value blank? "," raw_config reject "," raw_config "]}," ActiveRecord ConnectionAdapters ConnectionSpecification ConnectionUrlResolver initialize":{"type":"method","name":"initialize","children":[],"call":["url =~ ","@uri query ","@uri opaque split ","@uri opaque ","@uri opaque= ","@adapter == ","@uri scheme gsub ","@uri scheme ","URI  parse "," raise ","url blank? ","@uri scheme tr "," uri_parser parse "," uri_parser ","URI  parse  query "," uri_parser parse  query ","URI  parse  opaque split "," uri_parser parse  opaque split ","URI  parse  opaque "," uri_parser parse  opaque ","URI  parse  opaque= "," uri_parser parse  opaque= ","@uri scheme gsub  == ","@uri scheme  == ","@uri scheme tr  == ","URI  parse  scheme gsub "," uri_parser parse  scheme gsub ","URI  parse  scheme "," uri_parser parse  scheme ","URI  parse  scheme tr "," uri_parser parse  scheme tr "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter rename_index":{"type":"method","name":"rename_index","children":[],"call":[" execute "," quote_table_name "," version [] >= "," version [] "," version "," version [] == "," supports_rename_index? "," validate_index_length! "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter drop_table":{"type":"method","name":"drop_table","children":[],"call":[" execute "," quote_table_name ","options [] ","options [] == "," create_table_info_cache delete "," create_table_info_cache "," create_table_info_cache key? "," schema_cache clear_data_source_cache! ","table_name to_s "," schema_cache "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter type_cast":{"type":"method","name":"type_cast","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter SchemaCreation visit_ChangeColumnDefinition":{"type":"method","name":"visit_ChangeColumnDefinition","children":[],"call":[" add_column_position! "," add_column_options! "," quote_column_name ","options [] ","column name "," type_to_sql ","o type ","o options ","o column ","options merge "," add_o column _position! "," add_column_o options ! "," add_o column _options! "," quote_o column _name ","o options  [] ","o column  name ","o o options  ","o o column  ","o options  merge "]}," ActiveRecord ConnectionAdapters AbstractAdapter translate_exception_class":{"type":"method","name":"translate_exception_class","children":[],"call":["exception set_backtrace ","e backtrace "," translate_exception ","@logger error ","e message ","e class name ","e class ","e message force_encoding ","sql encoding "," translate_exception  set_backtrace "," translate_ translate_exception  "]}," ActiveRecord ConnectionAdapters AbstractAdapter SchemaCreation options_include_default?":{"type":"method","name":"options_include_default?","children":[],"call":["(and\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :null)) :==\n    (false))\n  (send\n    (send\n      (lvar :options) :[]\n      (sym :default)) :nil?)) ! ","options [] nil? ","options [] ","options [] == ","options include? "]}," ActiveRecord ConnectionAdapters Savepoints release_savepoint":{"type":"method","name":"release_savepoint","children":[],"call":[" execute "," internal_execute "]}," ActiveRecord ConnectionAdapters Savepoints rollback_to_savepoint":{"type":"method","name":"rollback_to_savepoint","children":[],"call":[" execute "]}," ActiveRecord ConnectionAdapters Savepoints create_savepoint":{"type":"method","name":"create_savepoint","children":[],"call":[" execute "," internal_execute "]}," ActiveRecord ConnectionAdapters Savepoints supports_savepoints?":{"type":"method","name":"supports_savepoints?","children":[],"call":[]}," ActiveRecord ConnectionAdapters QueryCache initialize":{"type":"method","name":"initialize","children":[],"call":["h []= ","Hash  new "]}," ActiveRecord AutosaveAssociation AssociationBuilderExtension valid_options":{"type":"method","name":"valid_options","children":[],"call":[]}," ActiveRecord AttributeMethods ClassMethods class_method_defined_within?":{"type":"method","name":"class_method_defined_within?","children":[],"call":["klass method owner != ","superklass method owner ","superklass method ","klass method owner ","klass method ","superklass respond_to? ","klass respond_to? "]}," ActiveRecord AttributeMethods ClassMethods dangerous_class_method?":{"type":"method","name":"dangerous_class_method?","children":[],"call":[" class_method_defined_within? ","BLACKLISTED_CLASS_METHODS  include? ","method_name to_s ","RESTRICTED_CLASS_METHODS  include? ","Base  method owner != ","Object  method owner ","Object  method ","Base  method owner ","Base  method ","Object  respond_to? ","Base  respond_to? "]}," ActiveRecord AttributeMethods AttributeMethodCache method_body":{"type":"method","name":"method_body","children":[],"call":[" raise "]}," ActiveRecord AttributeMethods AttributeMethodCache []":{"type":"method","name":"[]","children":[],"call":["@module instance_method ","@module module_eval "," method_body ","ActiveRecord AttributeMethods AttrNames  set_name_cache ","name unpack first ","name unpack ","@method_cache compute_if_absent ","h* freeze "]}," ActiveRecord AttributeMethods AttributeMethodCache initialize":{"type":"method","name":"initialize","children":[],"call":["ThreadSafe Cache  new ","Module  new ","Concurrent Map  new "]}," ActiveRecord AttributeMethods set_name_cache":{"type":"method","name":"set_name_cache","children":[],"call":[]}," ActiveRecord AttributeMethods Write method_body":{"type":"method","name":"method_body","children":[],"call":[]}," ActiveRecord AttributeMethods Serialization Behavior keys_for_partial_write":{"type":"method","name":"keys_for_partial_write","children":[],"call":[" | "," attributes keys & "," class serialized_attributes keys "," class serialized_attributes "," class "," attributes keys "," attributes "]}," ActiveRecord AttributeMethods Serialization Behavior should_record_timestamps?":{"type":"method","name":"should_record_timestamps?","children":[],"call":["(send\n  (send\n    (send nil :attributes) :keys) :&\n  (send\n    (send\n      (send\n        (self) :class) :serialized_attributes) :keys)) present? "," attributes keys & "," class serialized_attributes keys "," class serialized_attributes "," class "," attributes keys "," attributes "," record_timestamps "]}," ActiveRecord AttributeMethods Serialization Type accessor":{"type":"method","name":"accessor","children":[],"call":[]}," ActiveRecord AttributeMethods Read method_body":{"type":"method","name":"method_body","children":[],"call":[]}," ActiveRecord AttributeMethods Dirty save_changed_attribute":{"type":"method","name":"save_changed_attribute","children":[],"call":[" changed_attributes []= "," changed_attributes "," _field_changed? "," clone_attribute_value "," changed_attributes delete "," changed_attributes [] "," attribute_changed? "," set_attribute_was "," clear_attribute_changes "," attribute_changed_by_setter? "," clear_changed_attributes_cache "]}," ActiveRecord AttributeMethods Dirty init_changed_attributes":{"type":"method","name":"init_changed_attributes","children":[],"call":[" changed_attributes []= "," changed_attributes "," _field_changed? ","@attributes [] ","c default ","c name "," class columns each "," class columns "," class "]}," ActiveRecord AttributeMethods Dirty initialize_internals_callback":{"type":"method","name":"initialize_internals_callback","children":[],"call":[" init_changed_attributes "]}," ActiveRecord AttributeMethods Dirty initialize_dup":{"type":"method","name":"initialize_dup","children":[],"call":[" init_changed_attributes "," calculate_changes_from_defaults ","attr with_value_from_user ","@attributes fetch_value ","attr name "," class _default_attributes map "," class _default_attributes "," class "," clear_mutation_trackers "]}," ActiveRecord Associations Preloader NullPreloader run":{"type":"method","name":"run","children":[],"call":[]}," ActiveRecord Associations Preloader NullPreloader new":{"type":"method","name":"new","children":[],"call":[]}," ActiveRecord Associations Preloader AlreadyLoaded preloaded_records":{"type":"method","name":"preloaded_records","children":[],"call":["owner association target ","owner association "," reflection name "," reflection "," owners flat_map "," owners ","owner read_attribute "," records_by_owner flat_map "," records_by_owner "]}," ActiveRecord Associations Preloader AlreadyLoaded run":{"type":"method","name":"run","children":[],"call":[]}," ActiveRecord Associations Preloader AlreadyLoaded initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Associations Preloader raise_config_error":{"type":"method","name":"raise_config_error","children":[],"call":[" raise ","record class name ","record class "]}," ActiveRecord Associations Preloader preloaders_for_one":{"type":"method","name":"preloaders_for_one","children":[],"call":["loader run "," preloader_for new "," preloader_for ","klasses map "," grouped_records flat_map "," grouped_records "," preloaders_for_reflection "," preloader_for new  run "," pre preloader_for new _for new "," pre preloader_for new _for "," pre preloader_for new s_for_reflection "]}," ActiveRecord Associations Preloader preloaders_for_hash":{"type":"method","name":"preloaders_for_hash","children":[],"call":["loaders concat "," preloaders_on ","Array  wrap flat_map ","Array  wrap ","loaders flat_map uniq ","loaders flat_map "," preloaders_for_one ","association to_a first ","association to_a ","association flat_map ","reflection options [] ","reflection options "," preloaders_for_reflection "," grouped_records flat_map "," grouped_records "," preloaders_for_one  concat "," preloaders_for_reflection  concat "," pre preloaders_for_one _on "," pre preloaders_for_reflection _on "," preloaders_for_one  flat_map uniq "," preloaders_for_reflection  flat_map uniq "," preloaders_for_one  flat_map "," preloaders_for_reflection  flat_map "," pre preloaders_for_one _for_one "," pre preloaders_for_reflection _for_one "," pre preloaders_for_one _for_reflection "," pre preloaders_for_reflection _for_reflection "]}," ActiveRecord Associations Preloader preloaders_on":{"type":"method","name":"preloaders_on","children":[],"call":[" raise ","association inspect "," preloaders_for_one ","association to_sym "," preloaders_for_hash "]}," ActiveRecord Associations Preloader ThroughAssociation reset_association":{"type":"method","name":"reset_association","children":[],"call":["owner association reset ","owner association ","owners each "," through_reflection collection? "," through_reflection "," reflection options [] "," reflection options "," reflection "," through_scope != "," through_reflection klass unscoped "," through_reflection klass "," through_scope "]}," ActiveRecord Associations Preloader Association load_slices":{"type":"method","name":"load_slices","children":[],"call":["record [] "," association_key_name ","@preloaded_records map "," records_for ","slices flat_map ","key to_s "," key_conversion_required? "," association_key to_s _name "," association_record [] _name ","key to_s  to_s ","record []  to_s "," key to_s _conversion_required? "," record [] _conversion_required? "]}," ActiveRecord Associations Preloader Association query_scope":{"type":"method","name":"query_scope","children":[],"call":[" scope where "," association_key in "," association_key "," scope "," association_key_name "]}," ActiveRecord Associations JoinDependency construct_model":{"type":"method","name":"construct_model","children":[],"call":["other set_inverse_instance ","other target= ","other target push ","other target ","node reflection collection? ","node reflection ","record association ","node reflection name ","node instantiate ","aliases column_aliases ","model_cache [] [] ","model_cache [] ","model readonly! ","node readonly? "," aliases column_aliases "," aliases ","model strict_loading! ","node strict_loading? ","m strict_loading! ","model_cache [] []= ","record association  set_inverse_instance ","record association  target= ","record association  target push ","record association  target ","model_cache [] [] _cache [] [] ","model_cache [] [] _cache [] ","model_cache [] []  readonly! ","model_cache [] []  strict_loading! ","model_cache [] [] _cache [] []= "]}," ActiveRecord Associations JoinDependency find_reflection":{"type":"method","name":"find_reflection","children":[],"call":[" raise ","klass name ","klass reflect_on_association ","klass _reflect_on_association "]}," ActiveRecord Associations JoinDependency walk":{"type":"method","name":"walk","children":[],"call":["(send\n  (lvar :intersection) :flat_map) concat "," walk ","intersection flat_map "," make_outer_joins ","missing flat_map ","(send\n  (send\n    (lvar :right) :children) :map) partition ","node1 match? ","left children find ","left children ","right children map ","right children ","joins concat "," make_constraints ","r table= ","l table "]}," ActiveRecord Associations JoinDependency table_alias_for":{"type":"method","name":"table_alias_for","children":[],"call":["name << ","parent table_name ","reflection plural_name ","reflection alias_candidate ","reflection alias_candidate  << ","parent table_reflection alias_candidate  ","reflection plural_reflection alias_candidate  "]}," ActiveRecord Associations JoinDependency construct_tables!":{"type":"method","name":"construct_tables!","children":[],"call":[" construct_tables! ","node children each ","node children ","node tables= "," table_aliases_for ","child tables= ","join_root each_children "]}," ActiveRecord Associations JoinDependency table_aliases_for":{"type":"method","name":"table_aliases_for","children":[],"call":[" alias_tracker aliased_table_for "," table_alias_for ","reflection != ","node reflection ","reflection table_name "," alias_tracker ","node reflection chain map ","node reflection chain ","reflection klass type_caster ","reflection klass "]}," ActiveRecord Associations JoinDependency make_inner_joins":{"type":"method","name":"make_inner_joins","children":[],"call":["joins concat "," make_inner_joins ","child children flat_map ","child children "," make_constraints ","child tables ","(lvar :info) + "," make_constraints  concat "," make_inner_ make_constraints  ","child child tables  ","(lvar : make_constraints ) + "]}," ActiveRecord Associations JoinDependency make_outer_joins":{"type":"method","name":"make_outer_joins","children":[],"call":["joins concat "," make_outer_joins ","child children flat_map ","child children "," make_constraints "," table_aliases_for ","(lvar :info) + "," make_join_constraints "," make_constraints  concat "," make_outer_ make_constraints  ","(lvar : make_constraints ) + "]}," ActiveRecord Associations JoinDependency make_constraints":{"type":"method","name":"make_constraints","children":[],"call":["child join_constraints ","child reflection scope_chain ","child reflection ","parent base_klass ","parent table ","child reflection chain ","joins concat "," make_constraints ","child children flat_map ","child children "," alias_tracker ","(send\n  (lvar :child) :join_constraints\n  (lvar :foreign_table)\n  (lvar :foreign_klass)\n  (lvar :join_type)\n  (send nil :alias_tracker)) concat ","@joined_tables [] ","join_type == ","reflection alias_candidate ","parent table_name "," alias_tracker aliased_table_for ","reflection klass arel_table ","reflection klass ","@references [] ","reflection name to_sym ","reflection name ","@joined_tables []= ","terminated ! ","root ! ","reflection == ","child reflection scope_child reflection chain  ","child reflection child reflection chain  ","child join_constraints  concat ","(send\n  (lvar :child) :join_constraints\n  (lvar :foreign_table)\n  (lvar :parent base_klass )\n  (lvar :join_type)\n  (send nil :alias_tracker)) concat ","(send\n  (lvar :child) :join_constraints\n  (lvar :parent table )\n  (lvar :foreign_klass)\n  (lvar :join_type)\n  (send nil :alias_tracker)) concat ","parent table_reflection alias_candidate  ","parent @references []  ","reflection reflection alias_candidate  to_sym ","reflection reflection alias_candidate  ","reflection ==  ! "]}," ActiveRecord Associations JoinDependency aliases":{"type":"method","name":"aliases","children":[],"call":["Aliases  new ","Aliases Table  new ","Aliases Column  new ","join_part column_names each_with_index map ","join_part column_names each_with_index ","join_part column_names "," join_root each_with_index map "," join_root each_with_index "," join_root ","column_names each_with_index map ","column_names each_with_index "," join_root primary_key "," join_root_alias ! "," join_root_alias ","join_part == ","join_part join_part column_names  each_with_index map ","join_part join_part column_names  each_with_index ","join_part join_part column_names  ","join_part column_names  each_with_index map ","join_part column_names  each_with_index "," join_root  join_root primary_key  "]}," ActiveRecord Associations JoinDependency join_constraints":{"type":"method","name":"join_constraints","children":[],"call":["joins concat "," make_outer_joins ","oj join_root ","oj join_root children flat_map ","oj join_root children "," walk "," join_root "," join_root match? ","outer_joins flat_map "," make_inner_joins "," join_root children flat_map "," join_root children "," make_left_outer_joins ","join_type == "," make_join_constraints ","joins_to_add flat_map "," construct_tables! ","oj join_type "," join_type ","@references []= ","table_name to_sym ","table_name is_a? ","references each ","references empty? "," make_join_constraints  concat "," make_outer_ make_join_constraints  ","outer_ make_join_constraints  flat_map "," make_inner_ make_join_constraints  "," make_left_outer_ make_join_constraints  "," make_join_constraints _to_add flat_map "]}," ActiveRecord Associations JoinDependency reflections":{"type":"method","name":"reflections","children":[],"call":[" join_root drop map! "," join_root drop "," join_root "]}," ActiveRecord Associations JoinDependency walk_tree":{"type":"method","name":"walk_tree","children":[],"call":[]}," ActiveRecord Associations JoinDependency make_tree":{"type":"method","name":"make_tree","children":[],"call":[]}," ActiveRecord Associations JoinDependency Aliases Table column_aliases":{"type":"method","name":"column_aliases","children":[],"call":["t [] as ","Arel  sql ","column alias ","t [] ","column name "," columns map "," columns "," table "," table  [] as "," table  [] ","  table able "]}," ActiveRecord Associations JoinDependency Aliases Table table":{"type":"method","name":"table","children":[],"call":["Arel Nodes TableAlias  new "," node aliased_table_name "," node "," node table "]}," ActiveRecord Associations JoinDependency Aliases column_alias":{"type":"method","name":"column_alias","children":[],"call":["@alias_cache [] [] ","@alias_cache [] "]}," ActiveRecord Associations JoinDependency Aliases column_aliases":{"type":"method","name":"column_aliases","children":[],"call":["@name_and_alias_cache [] ","t [] as ","Arel  sql ","column alias ","t [] ","column name "," columns map "," columns "," table "," node table "," node ","@columns_cache [] "," table  [] as "," node table  [] as "," table  [] "," node table  [] ","  table able ","  node table able "," node  table able "," node  node table able "]}," ActiveRecord Associations JoinDependency Aliases columns":{"type":"method","name":"columns","children":[],"call":["t column_aliases ","@tables flat_map "]}," ActiveRecord Associations JoinDependency Aliases initialize":{"type":"method","name":"initialize","children":[],"call":["h []= ","column alias ","column name ","table columns map ","table columns ","table node ","tables each_with_object ","i []= ","table columns each_with_object "]}," ActiveRecord Associations JoinDependency JoinPart each":{"type":"method","name":"each","children":[],"call":["child each "," children each "," children "]}," ActiveRecord Associations JoinDependency JoinPart match?":{"type":"method","name":"match?","children":[],"call":[" class == ","other class "," class "]}," ActiveRecord Associations JoinDependency JoinPart name":{"type":"method","name":"name","children":[],"call":[" reflection name "," reflection "]}," ActiveRecord Associations JoinDependency JoinBase match?":{"type":"method","name":"match?","children":[],"call":[" base_klass == ","other base_klass "," base_klass "," == "]}," ActiveRecord Associations JoinDependency JoinAssociation join_constraints":{"type":"method","name":"join_constraints","children":[],"call":["joins << ","table create_join ","table create_on ","constraint and ","rel arel constraints ","rel arel ","rel arel constraints empty? ! ","rel arel constraints empty? ","table [] eq ","foreign_klass base_class name ","foreign_klass base_class ","table [] ","reflection type ","left merge ","scope_chain_items inject ","scope_chain_items shift ","scope_chain_items concat ","(send\n  (lvar :klass) :send\n  (sym :build_default_scope)) compact ","klass send ","ActiveRecord Relation  create instance_exec ","ActiveRecord Relation  create ","item is_a? ","scope_chain [] map ","scope_chain [] "," build_constraint ","reflection active_record_primary_key ","reflection foreign_key ","reflection association_primary_key ","reflection source_macro ","reflection klass ","tables shift ","chain reverse_each ","scope_chain reverse ","tables reverse ","scope_chain_items << ","ActiveRecord Relation  create where ","scope_chain_iter next map ","scope_chain_iter next ","scope_chain reverse_each ","(send\n  (lvar :klass) :send\n  (sym :build_default_scope)\n  (send\n    (const\n      (const nil :ActiveRecord) :Relation) :create\n    (lvar :klass)\n    (lvar :table))) compact ","JoinInformation  new ","bind_values push ","klass connection substitute_at ","klass connection ","klass columns_hash [] ","reflection type to_s ","klass columns_hash ","bind_values concat ","rel bind_values ","join_keys foreign_key ","join_keys key ","reflection join_keys ","bind_values length ","column to_s ","(lvar :klass_scope) compact ","klass unscoped ","klass current_scope values blank? ","klass current_scope values ","klass current_scope ","scope joins_values= ","klass current_scope clone tap ","klass current_scope clone ","klass arel_attribute eq ","Arel Nodes BindParam  new ","klass arel_attribute ","binds << ","Relation QueryAttribute  new ","klass type_for_attribute ","column name ","rel bound_attributes ","PredicateBuilder  new ","TableMetadata  new ","(send\n  (lvar :klass) :send\n  (sym :build_default_scope)\n  (lvar :relation)) compact ","klass current_scope values empty? ","current_scope empty_scope? ","reflection klass_join_scope ","reflection join_scopes ","reflection scopes map ","reflection scopes ","reflection join_scope ","right expr= ","right expr and ","arel constraints ","right expr ","joins last right ","joins last ","joins concat ","arel join_sources ","arel constraints any? ","join_scope arel "," alias_tracker aliases "," alias_tracker ","reflection build_join_constraint ","alias_tracker aliases "," tables [] ","i -@ "," tables "," reflection chain reverse_each with_index "," reflection chain reverse_each "," reflection chain "," reflection "," append_constraints ","others empty? ","table create_and ","(send nil :fetch_arel_attribute\n  (lvar :node)) ! ","attr relation name == ","table name ","attr relation name ","attr relation "," fetch_arel_attribute ","nodes children partition ","nodes children ","arel constraints first ","attr relation name != ","Arel  fetch_attribute ","nodes children extract! ","right expr children concat ","right expr children ","(send\n  (const nil :Arel) :fetch_attribute\n  (lvar :node)) ! ","join_scope joins! ","join_scope construct_join_dependency ","join_scope eager_load_values | ","join_scope includes_values ","join_scope eager_load_values ","join_scope references_values empty? ","join_scope references_values ","others empty? ! ","join_type new ","Arel Nodes On  new ","nodes is_a? ","chain << "," reflection chain each ","scope arel ","scope joins! ","scope construct_join_dependency ","associations empty? ","scope eager_load_values | ","scope includes_values ","scope eager_load_values ","scope references_values empty? ","scope references_values ","tables shift  create_join "," tables []  create_join ","tables shift  create_on "," tables []  create_on ","constraint and  and "," build_constraint  and ","reflection build_join_constraint  and ","rel arel constraint and s ","rel arel  build_constraint s ","rel arel reflection build_join_constraint s ","scope_chain_items inject  ascope_chain_items inject  constraints ","reflection join_scope  areflection join_scope  constraints ","rel join_scope arel  constraints ","rel scope arel  constraints ","scope_chain_items inject  ascope_chain_items inject  ","reflection join_scope  areflection join_scope  ","rel join_scope arel  ","rel scope arel  ","rel arel constraint and s empty? ! ","rel arel  build_constraint s empty? ! ","rel arel reflection build_join_constraint s empty? ! ","scope_chain_items inject  ascope_chain_items inject  constraints empty? ! ","reflection join_scope  areflection join_scope  constraints empty? ! ","rel join_scope arel  constraints empty? ! ","rel scope arel  constraints empty? ! ","rel arel constraint and s empty? ","rel arel  build_constraint s empty? ","rel arel reflection build_join_constraint s empty? ","scope_chain_items inject  ascope_chain_items inject  constraints empty? ","reflection join_scope  areflection join_scope  constraints empty? ","rel join_scope arel  constraints empty? ","rel scope arel  constraints empty? ","tables shift  [] eq "," tables []  [] eq ","foreign_reflection klass  base_class name ","foreign_reflection klass  base_class ","tables shift  [] "," tables []  [] ","scope_chain reverse _items inject ","reflection join_scopes  inject ","reflection join_scope _chain_items inject ","scope_chain reverse _items shift ","reflection join_scopes  shift ","reflection join_scope _chain_items shift ","scope_chain reverse _items concat ","reflection join_scopes  concat ","reflection join_scope _chain_items concat ","(send\n  (lvar :reflection klass ) :send\n  (sym :build_default_scope)) compact ","(send\n  (lvar :klass) :send\n  (sym :build_default_reflection join_scope )) compact ","reflection klass  send ","scope_chain reverse  [] map ","reflection join_scope _chain [] map ","scope_chain reverse  [] ","reflection join_scope _chain [] "," build_constraint and  "," build_ build_constraint  "," build_reflection build_join_constraint  ","reflection active_record_primary_reflection foreign_key  ","reflection active_record_primary_reflection association_primary_key  ","reflection active_record_primary_join_keys key  ","reflection reflection active_record_primary_key  ","reflection reflection foreign_key  ","reflection join_keys foreign_key  ","reflection foreign_reflection foreign_key  ","reflection foreign_reflection association_primary_key  ","reflection foreign_join_keys key  ","reflection association_primary_reflection foreign_key  ","reflection association_primary_reflection association_primary_key  ","reflection association_primary_join_keys key  ","reflection reflection klass  ","tables shift s shift "," tables [] s shift ","tables reverse  shift ","scope_chain reverse  reverse ","reflection join_scope _chain reverse ","tables shift s reverse "," tables [] s reverse ","tables reverse  reverse ","scope_chain reverse _items << ","reflection join_scopes  << ","reflection join_scope _chain_items << ","scope_chain reverse _iter next map ","scope_chain reverse_each  next map ","reflection join_scope _chain_iter next map ","scope_chain reverse _iter next ","scope_chain reverse_each  next ","reflection join_scope _chain_iter next ","scope_chain reverse  reverse_each ","reflection join_scope _chain reverse_each ","(send\n  (lvar :reflection klass ) :send\n  (sym :build_default_scope)\n  (send\n    (const\n      (const nil :ActiveRecord) :Relation) :create\n    (lvar :reflection klass )\n    (lvar :table))) compact ","(send\n  (lvar :klass) :send\n  (sym :build_default_scope)\n  (send\n    (const\n      (const nil :ActiveRecord) :Relation) :create\n    (lvar :klass)\n    (lvar :tables shift ))) compact ","(send\n  (lvar :klass) :send\n  (sym :build_default_scope)\n  (send\n    (const\n      (const nil :ActiveRecord) :Relation) :create\n    (lvar :klass)\n    (lvar : tables [] ))) compact ","(send\n  (lvar :klass) :send\n  (sym :build_default_reflection join_scope )\n  (send\n    (const\n      (const nil :ActiveRecord) :Relation) :create\n    (lvar :klass)\n    (lvar :table))) compact ","bind_foreign_klass base_class name s push ","reflection klass  connection substitute_at ","klass connection klass connection substitute_at _at ","reflection klass  connection ","reflection klass  columns_hash [] ","klass klass columns_hash [] s_hash [] ","reflection klass  columns_hash ","klass klass columns_hash [] s_hash ","bind_foreign_klass base_class name s concat ","rel bind_foreign_klass base_class name s ","scope_chain_items inject  bind_values ","reflection join_scope  bind_values ","join_keys reflection active_record_primary_key  ","join_keys reflection foreign_key  ","join_keys join_keys foreign_key  ","join_reflection foreign_key s foreign_reflection foreign_key  ","join_reflection association_primary_key s foreign_reflection association_primary_key  ","join_join_keys key s foreign_join_keys key  ","reflection join_keys  foreign_key ","join_reflection foreign_key s reflection foreign_key  ","join_reflection association_primary_key s reflection association_primary_key  ","join_join_keys key s join_keys key  ","reflection join_keys  key ","reflection join_reflection foreign_key s ","reflection join_reflection association_primary_key s ","reflection join_join_keys key s ","reflection reflection join_keys  ","bind_foreign_klass base_class name s length ","klass columns_hash []  to_s ","(lvar :reflection klass _scope) compact ","(lvar :klass send ) compact ","(lvar :klass unscoped ) compact ","(lvar :klass current_scope clone ) compact ","(lvar :reflection klass_join_scope ) compact ","(lvar :klass_reflection join_scope ) compact ","reflection klass  unscoped ","klass unreflection join_scope d ","reflection klass  current_scope values blank? ","klass current_scope foreign_klass base_class name s blank? ","klass klass current_scope  values blank? ","klass current_reflection join_scope  values blank? ","reflection klass  current_scope values ","klass current_scope foreign_klass base_class name s ","klass klass current_scope  values ","klass current_reflection join_scope  values ","reflection klass  current_scope ","klass klass current_scope  ","klass current_reflection join_scope  ","scope joins_foreign_klass base_class name s= ","reflection join_scope  joins_values= ","reflection klass  current_scope clone tap ","klass klass current_scope  clone tap ","klass current_reflection join_scope  clone tap ","reflection klass  current_scope clone ","klass klass current_scope  clone ","klass current_reflection join_scope  clone ","reflection klass  arel_attribute eq ","klass ascope_chain_items inject _attribute eq ","klass areflection join_scope _attribute eq ","klass join_scope arel _attribute eq ","klass scope arel _attribute eq ","Ascope_chain_items inject  Nodes BindParam  new ","Areflection join_scope  Nodes BindParam  new ","reflection klass  arel_attribute ","klass ascope_chain_items inject _attribute ","klass areflection join_scope _attribute ","klass join_scope arel _attribute ","klass scope arel _attribute ","reflection klass  type_for_attribute ","klass columns_hash []  name ","scope_chain_items inject  bound_attributes ","reflection join_scope  bound_attributes ","(send\n  (lvar :reflection klass ) :send\n  (sym :build_default_scope)\n  (lvar :relation)) compact ","(send\n  (lvar :klass) :send\n  (sym :build_default_scope)\n  (lvar :ActiveRecord Relation  create )) compact ","(send\n  (lvar :klass) :send\n  (sym :build_default_scope)\n  (lvar :scope_chain_items inject ation)) compact ","(send\n  (lvar :klass) :send\n  (sym :build_default_scope)\n  (lvar :reflection join_scope ation)) compact ","(send\n  (lvar :klass) :send\n  (sym :build_default_reflection join_scope )\n  (lvar :relation)) compact ","reflection klass  current_scope values empty? ","klass current_scope foreign_klass base_class name s empty? ","klass klass current_scope  values empty? ","klass current_reflection join_scope  values empty? ","klass current_scope  empty_scope? ","current_reflection join_scope  empty_reflection join_scope ? ","reflection reflection klass _join_scope ","reflection klass_reflection join_scope  ","reflection klass_join_reflection join_scope  ","reflection reflection join_scope s ","reflection join_reflection join_scope s ","reflection reflection join_scope s map ","reflection reflection join_scope  ","reflection join_reflection join_scope  ","joins last right  expr= ","joins last right  expr and ","arel constraint and s ","arel  build_constraint s ","arel reflection build_join_constraint s ","ascope_chain_items inject  constraints ","areflection join_scope  constraints ","join_scope arel  constraints ","scope arel  constraints ","joins last right  expr ","joins last joins last right  ","ascope_chain_items inject  join_sources ","areflection join_scope  join_sources ","join_scope arel  join_sources ","scope arel  join_sources ","arel constraint and s any? ","arel  build_constraint s any? ","arel reflection build_join_constraint s any? ","ascope_chain_items inject  constraints any? ","areflection join_scope  constraints any? ","join_scope arel  constraints any? ","scope arel  constraints any? ","join_scope ascope_chain_items inject  ","join_scope areflection join_scope  ","join_scope join_scope arel  ","join_scope scope arel  ","reflection join_scope  arel ","join_reflection join_scope  arel ","reflection build_join_constraint and  ","reflection build_join_ build_constraint  ","reflection build_join_reflection build_join_constraint  "," tables shift s [] ","  tables [] s [] "," tables reverse  [] "," tables shift s ","  tables [] s "," tables reverse  "," append_constraint and s "," append_ build_constraint s "," append_reflection build_join_constraint s ","tables shift  create_and "," tables []  create_and ","(send nil :fetch_ascope_chain_items inject _attribute\n  (lvar :node)) ! ","(send nil :fetch_areflection join_scope _attribute\n  (lvar :node)) ! ","(send nil :fetch_join_scope arel _attribute\n  (lvar :node)) ! ","(send nil :fetch_scope arel _attribute\n  (lvar :node)) ! ","attr ActiveRecord Relation  create  name == ","attr scope_chain_items inject ation name == ","attr reflection join_scope ation name == ","tables shift  name "," tables []  name ","attr ActiveRecord Relation  create  name ","attr scope_chain_items inject ation name ","attr reflection join_scope ation name ","attr ActiveRecord Relation  create  ","attr scope_chain_items inject ation ","attr reflection join_scope ation "," fetch_ascope_chain_items inject _attribute "," fetch_areflection join_scope _attribute "," fetch_join_scope arel _attribute "," fetch_scope arel _attribute ","table create_and  children partition ","arel constraints first  children partition ","table create_and  children ","arel constraints first  children ","arel constraint and s first ","arel  build_constraint s first ","arel reflection build_join_constraint s first ","ascope_chain_items inject  constraints first ","areflection join_scope  constraints first ","join_scope arel  constraints first ","scope arel  constraints first ","attr ActiveRecord Relation  create  name != ","attr scope_chain_items inject ation name != ","attr reflection join_scope ation name != ","Ascope_chain_items inject   fetch_attribute ","Areflection join_scope   fetch_attribute ","table create_and  children extract! ","arel constraints first  children extract! ","joins last right  expr children concat ","joins last right  expr children ","(send\n  (const nil :Ascope_chain_items inject ) :fetch_attribute\n  (lvar :node)) ! ","(send\n  (const nil :Areflection join_scope ) :fetch_attribute\n  (lvar :node)) ! ","reflection join_scope  joins! ","join_reflection join_scope  joins! ","reflection join_scope  construct_join_dependency ","join_scope construct_join_scope construct_join_dependency  ","join_reflection join_scope  construct_join_dependency ","join_scope eager_load_foreign_klass base_class name s | ","reflection join_scope  eager_load_values | ","join_reflection join_scope  eager_load_values | ","join_scope includes_foreign_klass base_class name s ","reflection join_scope  includes_values ","join_reflection join_scope  includes_values ","join_scope eager_load_foreign_klass base_class name s ","reflection join_scope  eager_load_values ","join_reflection join_scope  eager_load_values ","join_scope references_foreign_klass base_class name s empty? ","reflection join_scope  references_values empty? ","join_reflection join_scope  references_values empty? ","join_scope references_foreign_klass base_class name s ","reflection join_scope  references_values ","join_reflection join_scope  references_values ","Ascope_chain_items inject  Nodes On  new ","Areflection join_scope  Nodes On  new ","table create_and  is_a? ","arel constraints first  is_a? ","scope ascope_chain_items inject  ","scope areflection join_scope  ","scope join_scope arel  ","scope scope arel  ","scope construct_join_scope construct_join_dependency  ","scope eager_load_values |  empty? ","scope eager_load_foreign_klass base_class name s | ","scope includes_foreign_klass base_class name s ","scope eager_load_foreign_klass base_class name s ","scope references_foreign_klass base_class name s empty? ","scope references_foreign_klass base_class name s "]}," ActiveRecord Associations JoinDependency JoinAssociation match?":{"type":"method","name":"match?","children":[],"call":[" reflection == ","other reflection "," reflection "," == "]}," ActiveRecord Associations CollectionProxy reset":{"type":"method","name":"reset","children":[],"call":[" proxy_association reset_scope "," proxy_association "," proxy_association reset "," reset_scope "]}," ActiveRecord Associations CollectionProxy forty_two":{"type":"method","name":"forty_two","children":[],"call":["@association forty_two "]}," ActiveRecord Associations CollectionProxy fifth":{"type":"method","name":"fifth","children":[],"call":["@association fifth "]}," ActiveRecord Associations CollectionProxy fourth":{"type":"method","name":"fourth","children":[],"call":["@association fourth "]}," ActiveRecord Associations CollectionProxy third":{"type":"method","name":"third","children":[],"call":["@association third "]}," ActiveRecord Associations CollectionProxy second":{"type":"method","name":"second","children":[],"call":["@association second "]}," ActiveRecord Associations CollectionAssociation first_nth_or_last":{"type":"method","name":"first_nth_or_last","children":[],"call":[" set_inverse_instance ","record is_a? ","collection send tap ","collection send "," load_target "," scope "," fetch_first_nth_or_last_using_find? ","args shift ","args first empty? ","args first ","args first is_a? "," load_target  send tap "," scope  send tap "," load_target  send "," scope  send "]}," ActiveRecord Associations CollectionAssociation fetch_first_nth_or_last_using_find?":{"type":"method","name":"fetch_first_nth_or_last_using_find?","children":[],"call":["(or\n  (or\n    (send nil :loaded?)\n    (send\n      (send nil :owner) :new_record?))\n  (block\n    (send\n      (send nil :target) :any?)\n    (args\n      (arg :record))\n    (or\n      (send\n        (lvar :record) :new_record?)\n      (send\n        (lvar :record) :changed?)))) ! ","record changed? ","record new_record? "," target any? "," target "," owner new_record? "," owner "," loaded? ","args first is_a? ","args first "]}," ActiveRecord Associations CollectionAssociation forty_two":{"type":"method","name":"forty_two","children":[],"call":[" first_nth_or_last "]}," ActiveRecord Associations CollectionAssociation fifth":{"type":"method","name":"fifth","children":[],"call":[" first_nth_or_last "]}," ActiveRecord Associations CollectionAssociation fourth":{"type":"method","name":"fourth","children":[],"call":[" first_nth_or_last "]}," ActiveRecord Associations CollectionAssociation third":{"type":"method","name":"third","children":[],"call":[" first_nth_or_last "]}," ActiveRecord Associations CollectionAssociation second":{"type":"method","name":"second","children":[],"call":[" first_nth_or_last "]}," Builder HasOne add_before_destroy_callbacks":{"type":"method","name":"add_before_destroy_callbacks","children":[],"call":[]}," Builder HasAndBelongsToMany belongs_to_options":{"type":"method","name":"belongs_to_options","children":[],"call":["rhs_options []= ","options [] ","options key? ","options [] foreign_key ","options [] to_s foreign_key ","options [] to_s "]}," Builder HasAndBelongsToMany middle_options":{"type":"method","name":"middle_options","children":[],"call":["middle_options []= "," options [] "," options "," options key? ","join_model left_reflection name ","join_model left_reflection ","join_model name "," lhs_model name "," lhs_model "]}," Builder HasAndBelongsToMany middle_reflection":{"type":"method","name":"middle_reflection","children":[],"call":["hm_builder build "," lhs_model ","HasMany  create_builder "," middle_options ","(send\n  (send\n    (send\n      (send nil :lhs_model) :name) :downcase) :pluralize) join gsub to_sym ","(send\n  (send\n    (send\n      (send nil :lhs_model) :name) :downcase) :pluralize) join gsub ","(send\n  (send\n    (send\n      (send nil :lhs_model) :name) :downcase) :pluralize) join "," association_name "," lhs_model name downcase pluralize "," lhs_model name downcase "," lhs_model name ","HasMany  create_reflection ","_ freeze ",":: freeze ","(send\n  (send\n    (send\n      (send nil :lhs_model) :name) :downcase) :pluralize) sort join gsub to_sym ","(send\n  (send\n    (send\n      (send nil :lhs_model) :name) :downcase) :pluralize) sort join gsub ","(send\n  (send\n    (send\n      (send nil :lhs_model) :name) :downcase) :pluralize) sort join ","(send\n  (send\n    (send\n      (send nil :lhs_model) :name) :downcase) :pluralize) sort "," association_name to_s ","HasMany  create_builder  build ","  middle_options  "]}," Builder HasAndBelongsToMany through_model":{"type":"method","name":"through_model","children":[{"type":"method","name":"table_name","children":[],"asgn":[],"call":[]},{"type":"method","name":"compute_type","children":[],"asgn":[],"call":[]},{"type":"method","name":"add_left_association","children":[],"asgn":[],"call":[]},{"type":"method","name":"add_right_association","children":[],"asgn":[],"call":[]}],"call":["join_model add_right_association "," belongs_to_options "," options "," association_name ","join_model add_left_association "," lhs_model ","join_model class_resolver= ","join_model table_name_resolver= ","join_model name= "," association_name to_s camelize "," association_name to_s "," right_reflection= "," reflect_on_association "," belongs_to ","name to_s singularize to_sym ","name to_s singularize ","name to_s "," left_reflection= "," class_resolver compute_type "," class_resolver "," table_name_resolver join_table "," table_name_resolver "," attr_accessor ","Class  new ","JoinTableResolver  build "," equal? "," object_id hash "," object_id "," _reflect_on_association ","join_model left_model= "," left_model retrieve_connection "," left_model "," left_model compute_type ","pk is_a? "," private "," table_name "," lambda "," table_name_resolver call "]}," Builder HasAndBelongsToMany initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Builder HasAndBelongsToMany JoinTableResolver build":{"type":"method","name":"build","children":[],"call":[]}," Builder HasAndBelongsToMany JoinTableResolver KnownClass klass":{"type":"method","name":"klass","children":[],"call":["@rhs_class_name constantize ","@lhs_class send "]}," Builder HasAndBelongsToMany JoinTableResolver KnownClass join_table":{"type":"method","name":"join_table","children":[],"call":["(send\n  (ivar :@lhs_class) :table_name) sort join gsub gsub ","(send\n  (ivar :@lhs_class) :table_name) sort join gsub ","(send\n  (ivar :@lhs_class) :table_name) sort join ","(send\n  (ivar :@lhs_class) :table_name) sort "," klass table_name "," klass ","@lhs_class table_name ","(send\n  (ivar :@lhs_class) :table_name) sort join gsub tr "]}," Builder HasAndBelongsToMany JoinTableResolver KnownClass initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Builder CollectionAssociation wrap_scope":{"type":"method","name":"wrap_scope","children":[],"call":[" extending "," proc "," instance_exec extending "," instance_exec ","scope arity > ","scope arity "]}," Builder CollectionAssociation define_extensions":{"type":"method","name":"define_extensions","children":[],"call":["model parent const_set ","model parent "," name to_s camelize "," name to_s "," name ","model name demodulize ","model name "]}," Builder CollectionAssociation define_callbacks":{"type":"method","name":"define_callbacks","children":[],"call":[]}," Builder BelongsTo touch_record":{"type":"method","name":"touch_record","children":[],"call":[]}," Builder BelongsTo add_counter_cache_methods":{"type":"method","name":"add_counter_cache_methods","children":[{"type":"method","name":"belongs_to_counter_cache_after_create","children":[],"asgn":[null,{"type":"local","name":"cache_column","value":"reflection counter_cache_column "},["reflection counter_cache_column "],{"type":"local","name":"record","value":" send "},[" send "]],"call":["record class increment_counter ","record id ","record class ","reflection counter_cache_column "," send ","reflection name "]},{"type":"method","name":"belongs_to_counter_cache_before_destroy","children":[],"asgn":[{"type":"local","name":"cache_column","value":"reflection counter_cache_column "},["reflection counter_cache_column "],{"type":"local","name":"record","value":" send "},[" send "],{"type":"local","name":"foreign_key","value":"reflection foreign_key to_sym "},["reflection foreign_key to_sym "]],"call":["record class decrement_counter ","record id ","record class ","reflection counter_cache_column "," destroyed? ! "," destroyed? "," send ","reflection name "," destroyed_by_association foreign_key to_sym == "," destroyed_by_association foreign_key to_sym "," destroyed_by_association foreign_key "," destroyed_by_association "," destroyed_by_association ","reflection foreign_key to_sym ","reflection foreign_key "]},{"type":"method","name":"belongs_to_counter_cache_after_update","children":[],"asgn":[{"type":"local","name":"foreign_key","value":" attribute "},[" attribute "],{"type":"local","name":"foreign_key_was","value":" attribute_was "},[" attribute_was "],{"type":"local","name":"model","value":"reflection klass "},["reflection klass "],null,null,{"type":"local","name":"cache_column","value":"reflection counter_cache_column "},["reflection counter_cache_column "],{"type":"local","name":"foreign_key","value":"reflection foreign_key "},["reflection foreign_key "]],"call":["model decrement_counter ","model respond_to? ","model increment_counter ","model respond_to? "," attribute "," attribute_was ","reflection klass ","reflection constructable? "," new_record? ! "," new_record? "," attribute_changed? ","reflection counter_cache_column ","reflection foreign_key "]}],"call":[]}," Builder BelongsTo define_accessors":{"type":"method","name":"define_accessors","children":[],"call":[]}," Builder BelongsTo define_callbacks":{"type":"method","name":"define_callbacks","children":[],"call":[]}," Builder Association add_before_destroy_callbacks":{"type":"method","name":"add_before_destroy_callbacks","children":[],"call":[]}," Builder Association define_callbacks":{"type":"method","name":"define_callbacks","children":[],"call":[]}," Builder Association define_extensions":{"type":"method","name":"define_extensions","children":[],"call":[]}," Builder Association create_builder":{"type":"method","name":"create_builder","children":[],"call":[]}," ActiveRecord Associations BelongsToPolymorphicAssociation remove_keys":{"type":"method","name":"remove_keys","children":[],"call":[" owner []= "," reflection foreign_type "," reflection "," owner "]}," ActiveRecord Associations BelongsToAssociation remove_keys":{"type":"method","name":"remove_keys","children":[],"call":[" owner []= "," reflection foreign_key "," reflection "," owner "]}," ActiveRecord Associations BelongsToAssociation decrement_counter":{"type":"method","name":"decrement_counter","children":[],"call":[" klass decrement_counter "," target_id "," klass "," foreign_key_present? "]}," ActiveRecord Associations BelongsToAssociation decrement_counters":{"type":"method","name":"decrement_counters","children":[],"call":[" decrement_counter "," with_cache_name "," update_counters "]}," ActiveRecord Associations BelongsToAssociation with_cache_name":{"type":"method","name":"with_cache_name","children":[],"call":[" owner persisted? "," owner "," reflection counter_cache_column "," reflection "]}," ActiveRecord Associations AssociationScope join":{"type":"method","name":"join","children":[],"call":["table create_join "," join_type ","table create_on ","Arel Nodes LeadingJoin  new ","Arel Nodes On  new "]}," ActiveRecord Associations AssociationScope table_alias_for":{"type":"method","name":"table_alias_for","children":[],"call":["name << "," alias_suffix ","reflection plural_name "]}," ActiveRecord Associations AssociationScope construct_tables":{"type":"method","name":"construct_tables","children":[],"call":["alias_tracker aliased_table_for "," table_alias_for ","reflection != "," table_name_for ","chain map "]}," ActiveRecord Associations AssociationScope join_type":{"type":"method","name":"join_type","children":[],"call":[]}," ActiveRecord Associations AliasTracker create":{"type":"method","name":"create","children":[],"call":[]}," ActiveRecord Associations AliasTracker empty":{"type":"method","name":"empty","children":[],"call":[]}," ActiveRecord FinderMethods find_first_with_limit":{"type":"method","name":"find_first_with_limit","children":[],"call":[" limit to_a "," limit "," order limit to_a "," order limit "," order "," arel_table [] asc "," arel_table [] "," primary_key "," arel_table "," order_values empty? "," order_values "]}," ActiveRecord FixtureSet fixture_sql":{"type":"method","name":"fixture_sql","children":[],"call":["(send\n  (send\n    (lvar :table_rows) :keys) :map) concat ","conn fixture_sql ","rows map ","table_rows flat_map ","conn quote_table_name ","table_rows keys map ","table_rows keys "," table_rows ","(send\n  (send\n    (lvar : table_rows ) :keys) :map) concat "," table_rows  flat_map "," table_rows  keys map "," table_rows  keys ","  table_rows  "]}," ActiveRecord ConnectionAdapters DatabaseStatements fixture_sql":{"type":"method","name":"fixture_sql","children":[],"call":["value_list join ","key_list join "," quote_table_name "," quote ","columns [] ","key_list << "," quote_column_name ","fixture map "," schema_cache columns_hash "," schema_cache "," schema_cache columns_hash  [] "," schema_cache  schema_cache columns_hash _hash "]}," ActiveRecord Enum enum_mapping_for":{"type":"method","name":"enum_mapping_for","children":[],"call":["DEFINED_ENUMS  [] ","attr_name to_s "]}," ActiveRecord ConnectionHandling MergeAndResolveDefaultUrlConfig default_url_hash":{"type":"method","name":"default_url_hash","children":[],"call":["hash []= ","ActiveRecord ConnectionAdapters ConnectionSpecification ConnectionUrlResolver  new to_hash ","ActiveRecord ConnectionAdapters ConnectionSpecification ConnectionUrlResolver  new ","key is_a? ","Hash  new ","@raw_config blank? "]}," ActiveRecord ConnectionHandling MergeAndResolveDefaultUrlConfig raw_merged_into_default":{"type":"method","name":"raw_merged_into_default","children":[],"call":["default [] merge! ","default [] ","default [] is_a? ","default []= ","@raw_config each "," default_url_hash "," default_url_hash  [] merge! "," default_url_hash  [] "," default_url_hash  [] is_a? "," default_url_hash  []= ","  default_url_hash _url_hash "]}," ActiveRecord ConnectionAdapters ConnectionSpecification Resolver resolve_env_connection":{"type":"method","name":"resolve_env_connection","children":[],"call":[" raise "," configurations inspect "," configurations "," resolve_string_connection ","spec is_a? "," resolve_connection ","ActiveSupport Deprecation  warn ","spec to_sym inspect ","spec to_sym "," configurations [] ","spec to_s ","  configurations [] urations inspect ","  configurations [] urations ","  configurations [] urations [] "]}," ActiveRecord ConnectionAdapters ConnectionSpecification ConnectionUrlResolver database":{"type":"method","name":"database","children":[],"call":[" uri path sub "," uri path "," uri ","/:memory: == ","@adapter == "]}," ActiveRecord Tasks SQLiteDatabaseTasks purge":{"type":"method","name":"purge","children":[],"call":[" create "," drop "," connection reconnect! "," connection "," connection disconnect! "]}," ActiveRecord Tasks DatabaseTasks load_schema_current":{"type":"method","name":"load_schema_current","children":[],"call":["ActiveRecord Base  establish_connection ","environment to_sym "," load_schema_for "," each_current_configuration "," load_schema "," with_temporary_connection "]}," ActiveRecord Tasks DatabaseTasks load_schema_for":{"type":"method","name":"load_schema_for","children":[],"call":[" raise ","format inspect "," structure_load "," check_schema_file ","File  join "," db_dir "," load ","ActiveRecord Base  establish_connection "," purge "," schema_file "," load_schema ","ActiveSupport Deprecation  warn ","(str \"          This method was renamed to `#load_schema` and will be removed in the future.\\n\") squish "]}," ActiveRecord Relation _update_record":{"type":"method","name":"_update_record","children":[],"call":["@klass connection update ","@klass connection ","scope where arel compile_update ","@klass primary_key ","scope where arel ","scope where ","@klass arel_table [] eq ","@klass arel_table [] ","@klass arel_table ","scope unscope! ","@klass inheritance_column ","@klass finder_needs_type_condition? ","@klass unscoped "," substitute_values ","@klass unscoped where arel compile_update ","@klass unscoped where arel ","@klass unscoped where ","relation arel compile_update ","relation arel ","binds + ","relation bind_values ","relation bound_attributes ","@klass unscoped  where arel compile_update ","@klass unscoped  where arel ","@klass unscoped  where ","@klass unscoped  un@klass unscoped ! ","@klass inheritance_colscope where arel compile_update n ","@klass inheritance_col@klass unscoped where arel compile_update n ","@klass inheritance_colrelation arel compile_update n ","@klass un@klass unscoped d ","@klass un@klass unscoped d where arel compile_update ","@klass un@klass unscoped d where arel ","@klass un@klass unscoped d where ","scope where  arel compile_update ","scope where  arel ","scope where  bind_values ","scope where  bound_attributes "]}," ActiveRecord QueryMethods add_relations_to_bind_values":{"type":"method","name":"add_relations_to_bind_values","children":[],"call":[" add_relations_to_bind_values ","value bind_values "," bind_values ","value is_a? ","attributes each_value ","attributes is_a? ","value arel bind_values + ","value arel bind_values ","value arel "]}," ActiveRecord QueryMethods arel_columns":{"type":"method","name":"arel_columns","children":[],"call":[" arel_table [] "," arel_table "," columns_hash key? ","field to_s "," columns_hash ","columns map ","String  === ","Symbol  === "," from_value "," connection quote_table_name "," connection "," from_value ! "," arel_attribute "," from_clause value ! "," from_clause value "," from_clause "," klass attribute_alias? "," klass "," klass has_attribute? ","field call ","Proc  === ","columns flat_map "," arel_column "," connection method ","field to_s  to_s ","field to_s  call "]}," ActiveRecord PredicateBuilder convert_value_to_association_ids":{"type":"method","name":"convert_value_to_association_ids","children":[],"call":[]}," ActiveRecord Reflection ClassMethods _reflect_on_association":{"type":"method","name":"_reflect_on_association","children":[],"call":[" _reflections [] ","association to_sym "," _reflections ","association to_s "]}," ActiveRecord NullRelation maximum":{"type":"method","name":"maximum","children":[],"call":[" calculate "]}," ActiveRecord NullRelation minimum":{"type":"method","name":"minimum","children":[],"call":[" calculate "]}," ActiveRecord NullRelation average":{"type":"method","name":"average","children":[],"call":[" calculate "]}," ActiveRecord ConnectionAdapters MysqlAdapter full_version":{"type":"method","name":"full_version","children":[],"call":["@connection server_info "]}," ActiveRecord ConnectionAdapters Mysql2Adapter full_version":{"type":"method","name":"full_version","children":[],"call":["@connection info [] ","@connection info ","@connection server_info [] ","@connection server_info "," schema_cache database_version full_version_string "," schema_cache database_version "," schema_cache "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter supports_rename_index?":{"type":"method","name":"supports_rename_index?","children":[],"call":[" version [] >= "," version [] "," version "," version [] == "," mariadb? "," version >= "," database_version >= "," database_version "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter mariadb?":{"type":"method","name":"mariadb?","children":[],"call":[" full_version =~ "," full_version ","(str \"mariadb\") match? "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter version":{"type":"method","name":"version","children":[],"call":["v to_i "," full_version scan flatten map "," full_version scan flatten "," full_version scan "," full_version ","Version  new "," full_version match [] "," full_version match "," version_string "]}," ActiveRecord ConnectionAdapters AbstractAdapter SchemaCreation quote_value":{"type":"method","name":"quote_value","children":[],"call":["@conn quote "," type_to_sql ","column scale ","column precision ","column limit ","column type ","column sql_type "," type_for_column ","column cast_type "]}," ActiveRecord Coders JSON load":{"type":"method","name":"load","children":[],"call":[]}," ActiveRecord Coders JSON dump":{"type":"method","name":"dump","children":[],"call":[]}," ActiveRecord AttributeMethods Write write_attribute_with_type_cast":{"type":"method","name":"write_attribute_with_type_cast","children":[],"call":[" raise ","@attributes []= "," send ","@attributes has_key? ","@attributes_cache []= ","column binary? "," column_for_attribute ","@attributes_cache delete "," class primary_key "," class ","attr_name == ","attr_name to_s ","@attributes write_cast_value ","@attributes write_from_user ","@attributes write_from_database "," column_for_attribute  binary? ","  column_for_attribute _for_attribute "," class primary_key  == ","attr_name to_s  == "," class primary_key  to_s ","attr_name to_s  to_s "]}," ActiveRecord AttributeMethods Write raw_write_attribute":{"type":"method","name":"raw_write_attribute","children":[],"call":[" write_attribute_with_type_cast ","@attributes write_cast_value ","attr_name to_s ","attr_attr_name to_s  to_s "]}," ActiveRecord AttributeMethods Serialization Behavior raw_type_cast_attribute_for_write":{"type":"method","name":"raw_type_cast_attribute_for_write","children":[],"call":["Attribute  new "," class serialized_attributes [] ","column name "," class serialized_attributes "," class "]}," ActiveRecord Associations ThroughAssociation build_record":{"type":"method","name":"build_record","children":[],"call":["attributes []= ","target id ","inverse foreign_key ","target is_a? ! ","target is_a? "," through_association target "," through_association "," source_reflection inverse_of "," source_reflection "," Array zip map "," Array zip "," Array "," source_reflection collection? "," through_association target  id "," source_reflection inverse_of  foreign_key "," through_association target  is_a? ! "," through_association target  is_a? "," through_association  through_association target  "," source_reflection  source_reflection inverse_of _of "]}," ActiveRecord Associations Preloader NullPreloader preloaded_records":{"type":"method","name":"preloaded_records","children":[],"call":[]}," ActiveRecord Associations Preloader Association owner_key_type":{"type":"method","name":"owner_key_type","children":[],"call":["column type ","@model column_types [] "," owner_key_name to_s "," owner_key_name ","@model column_types ","@model column_types [] type ","@model type_for_attribute type ","@model type_for_attribute ","@model column_types []  type ","@model @model column_types [] _types [] ","@model @model column_types [] _types ","@model @model column_types [] _types [] type "]}," ActiveRecord Associations Preloader Association association_key_type":{"type":"method","name":"association_key_type","children":[],"call":["column type ","@klass column_types [] "," association_key_name to_s "," association_key_name ","@klass column_types ","@klass column_types [] type ","@klass type_for_attribute type ","@klass type_for_attribute ","@klass column_types []  type ","@klass @klass column_types [] _types [] ","@klass @klass column_types [] _types ","@klass @klass column_types [] _types [] type "]}," ActiveRecord Associations Preloader Association key_conversion_required?":{"type":"method","name":"key_conversion_required?","children":[],"call":[" association_key_type != "," owner_key_type "," association_key_type "]}," ActiveRecord Associations CollectionProxy take":{"type":"method","name":"take","children":[],"call":["@association take "," load_target "," find_from_target? "]}," ActiveRecord Associations CollectionAssociation take":{"type":"method","name":"take","children":[],"call":[" set_inverse_instance ","record is_a? "," scope take tap "," scope take "," scope "," target first "," target "," target take "," loaded? "]}," ActiveRecord FixtureSet HasManyThroughProxy join_table":{"type":"method","name":"join_table","children":[],"call":["@association through_reflection table_name ","@association through_reflection "]}," ActiveRecord AutosaveAssociation ClassMethods define_autosave_validation_callbacks":{"type":"method","name":"define_autosave_validation_callbacks","children":[],"call":[" validate "," send "," define_non_cyclic_method ","reflection collection? "," method_defined? ! "," method_defined? ","reflection validate? ","reflection name "," after_validation "]}," ActiveRecord Generators MigrationGenerator normalize_table_name":{"type":"method","name":"normalize_table_name","children":[],"call":["_table_name singularize ","_table_name pluralize "," pluralize_table_names? "]}," ActiveRecord Validations raise_record_invalid":{"type":"method","name":"raise_record_invalid","children":[],"call":[" raise ","RecordInvalid  new "]}," ActiveRecord Validations validate!":{"type":"method","name":"validate!","children":[],"call":[" raise_record_invalid "," valid? "]}," ActiveRecord Type Value cast_value":{"type":"method","name":"cast_value","children":[],"call":[]}," ActiveRecord Type Value type_cast":{"type":"method","name":"type_cast","children":[],"call":[" cast_value ","value nil? "]}," ActiveRecord Type Value ==":{"type":"method","name":"==","children":[],"call":[" limit == ","other limit "," limit "," scale == ","other scale "," scale "," precision == ","other precision "," precision "," class == ","other class "," class "]}," ActiveRecord Type Value changed_in_place?":{"type":"method","name":"changed_in_place?","children":[],"call":[]}," ActiveRecord Type Value changed?":{"type":"method","name":"changed?","children":[],"call":["old_value != "]}," ActiveRecord Type Value klass":{"type":"method","name":"klass","children":[],"call":[]}," ActiveRecord Type Value binary?":{"type":"method","name":"binary?","children":[],"call":[]}," ActiveRecord Type Value number?":{"type":"method","name":"number?","children":[],"call":[]}," ActiveRecord Type Value type_cast_for_schema":{"type":"method","name":"type_cast_for_schema","children":[],"call":["value inspect "]}," ActiveRecord Type Value type_cast_for_database":{"type":"method","name":"type_cast_for_database","children":[],"call":[]}," ActiveRecord Type Value type_cast_from_user":{"type":"method","name":"type_cast_from_user","children":[],"call":[" type_cast "]}," ActiveRecord Type Value type_cast_from_database":{"type":"method","name":"type_cast_from_database","children":[],"call":[" type_cast "]}," ActiveRecord Type Value type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord Type Value initialize":{"type":"method","name":"initialize","children":[],"call":["options [] ","options assert_valid_keys "]}," ActiveRecord Type UnsignedInteger min_value":{"type":"method","name":"min_value","children":[],"call":[]}," ActiveRecord Type UnsignedInteger max_value":{"type":"method","name":"max_value","children":[],"call":[" * "]}," ActiveRecord Type TypeMap default_value":{"type":"method","name":"default_value","children":[],"call":["Value  new ","ActiveModel Type Value  new "]}," ActiveRecord Type TypeMap perform_fetch":{"type":"method","name":"perform_fetch","children":[],"call":["matching_pair last call ","matching_pair last ","key === ","@mapping reverse_each detect ","@mapping reverse_each ","@parent perform_fetch "]}," ActiveRecord Type TypeMap clear":{"type":"method","name":"clear","children":[],"call":["@mapping clear "]}," ActiveRecord Type TypeMap alias_type":{"type":"method","name":"alias_type","children":[],"call":[" lookup ","sql_type [] "," register_type "]}," ActiveRecord Type TypeMap register_type":{"type":"method","name":"register_type","children":[],"call":["@mapping []= "," proc ","@cache clear "," raise "]}," ActiveRecord Type TypeMap fetch":{"type":"method","name":"fetch","children":[],"call":[" perform_fetch ","@cache [] fetch_or_store ","@cache [] ","@cache fetch_or_store "]}," ActiveRecord Type TypeMap lookup":{"type":"method","name":"lookup","children":[],"call":[" default_value "," fetch ","matching_pair last call ","matching_pair last ","key === ","@mapping reverse_each detect ","@mapping reverse_each ","Type  default_value "]}," ActiveRecord Type TypeMap initialize":{"type":"method","name":"initialize","children":[],"call":["h fetch_or_store ","ThreadSafe Cache  new ","Concurrent Map  new "]}," ActiveRecord Type TimeValue fast_string_to_time":{"type":"method","name":"fast_string_to_time","children":[],"call":[" new_time ","6 to_i ","5 to_i ","4 to_i ","3 to_i ","2 to_i ","1 to_i ","(send\n  (send\n    (nth-ref 7) :to_r) :*\n  (int 1000000)) to_i ","7 to_r * ","7 to_r ","string =~ "]}," ActiveRecord Type TimeValue new_time":{"type":"method","name":"new_time","children":[],"call":[" Time  public_send ","Base  default_timezone ","time getlocal ","Base  default_timezone == "," Time  utc ","mday == ","mon == ","year == ","year nil? "]}," ActiveRecord Type TimeValue type_cast_for_schema":{"type":"method","name":"type_cast_for_schema","children":[],"call":["value to_s "]}," ActiveRecord Type TimeValue klass":{"type":"method","name":"klass","children":[],"call":[]}," ActiveRecord Type Time cast_value":{"type":"method","name":"cast_value","children":[],"call":[" new_time ","time_hash values_at ","time_hash [] nil? ","time_hash [] "," Date  _parse "," fast_string_to_time ","value empty? ","value is_a? ","value __getobj__ "," Date  _parse  values_at "," Date  _parse  [] nil? "," Date  _parse  [] "]}," ActiveRecord Type Time type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord Type Text type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord Type String cast_value":{"type":"method","name":"cast_value","children":[],"call":[" String  new ","value to_s "]}," ActiveRecord Type String type_cast_for_database":{"type":"method","name":"type_cast_for_database","children":[],"call":[" String  new ","value to_s "]}," ActiveRecord Type String changed_in_place?":{"type":"method","name":"changed_in_place?","children":[],"call":["raw_old_value != ","new_value is_a? "]}," ActiveRecord Type String type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord Type Serialized default_value?":{"type":"method","name":"default_value?","children":[],"call":["value == "," coder load "," coder "]}," ActiveRecord Type Serialized encode_with":{"type":"method","name":"encode_with","children":[],"call":["coder []= "]}," ActiveRecord Type Serialized init_with":{"type":"method","name":"init_with","children":[],"call":["coder [] "," __setobj__ "]}," ActiveRecord Type Serialized accessor":{"type":"method","name":"accessor","children":[],"call":[]}," ActiveRecord Type Serialized changed_in_place?":{"type":"method","name":"changed_in_place?","children":[],"call":[" subtype changed_in_place? "," coder dump "," coder "," subtype ","value nil? "," type_cast_for_database ","raw_old_value nil? != ","raw_new_value nil? ","raw_old_value nil? "," encoded "," serialize "," type_cast_for_database  nil? "," encoded  nil? "," serialize  nil? "]}," ActiveRecord Type Serialized type_cast_for_database":{"type":"method","name":"type_cast_for_database","children":[],"call":[" coder dump "," coder "," default_value? ","value nil? "]}," ActiveRecord Type Serialized type_cast_from_database":{"type":"method","name":"type_cast_from_database","children":[],"call":[" coder load "," coder "," default_value? "]}," ActiveRecord Type Serialized initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Type Numeric non_numeric_string?":{"type":"method","name":"non_numeric_string?","children":[],"call":["value to_s !~ ","value to_s "]}," ActiveRecord Type Numeric number_to_non_number?":{"type":"method","name":"number_to_non_number?","children":[],"call":[" non_numeric_string? ","old_value != "]}," ActiveRecord Type Numeric changed?":{"type":"method","name":"changed?","children":[],"call":[" number_to_non_number? "]}," ActiveRecord Type Numeric type_cast":{"type":"method","name":"type_cast","children":[],"call":["value presence "]}," ActiveRecord Type Numeric number?":{"type":"method","name":"number?","children":[],"call":[]}," ActiveRecord Type Mutable changed_in_place?":{"type":"method","name":"changed_in_place?","children":[],"call":["raw_old_value != "," type_cast_for_database "]}," ActiveRecord Type Mutable type_cast_from_user":{"type":"method","name":"type_cast_from_user","children":[],"call":[" type_cast_from_database "," type_cast_for_database "]}," ActiveRecord Type Integer min_value":{"type":"method","name":"min_value","children":[],"call":[" max_value -@ "," max_value "]}," ActiveRecord Type Integer max_value":{"type":"method","name":"max_value","children":[],"call":["1 << ","limit * - ","limit * "," limit "]}," ActiveRecord Type Integer ensure_in_range":{"type":"method","name":"ensure_in_range","children":[],"call":[" raise "," limit "," class "," range cover? "," range "]}," ActiveRecord Type Integer cast_value":{"type":"method","name":"cast_value","children":[],"call":[" ensure_in_range ","value to_i "]}," ActiveRecord Type Integer type_cast_from_database":{"type":"method","name":"type_cast_from_database","children":[],"call":["value to_i ","value nil? "]}," ActiveRecord Type Integer type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord Type Integer initialize":{"type":"method","name":"initialize","children":[],"call":[" max_value "," min_value "," max_value -@ "]}," ActiveRecord Type HashLookupTypeMap perform_fetch":{"type":"method","name":"perform_fetch","children":[],"call":["@mapping fetch call ","@mapping fetch "]}," ActiveRecord Type HashLookupTypeMap alias_type":{"type":"method","name":"alias_type","children":[],"call":[" lookup "," register_type "]}," ActiveRecord Type Float cast_value":{"type":"method","name":"cast_value","children":[],"call":["value to_f "]}," ActiveRecord Type Float type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord Type Decorator encode_with":{"type":"method","name":"encode_with","children":[],"call":["coder []= "," __getobj__ "]}," ActiveRecord Type Decorator init_with":{"type":"method","name":"init_with","children":[],"call":[" __setobj__ ","coder [] "]}," ActiveRecord Type DecimalWithoutScale type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord Type Decimal float_precision":{"type":"method","name":"float_precision","children":[],"call":[" precision to_i "," precision "," Float DIG  + "," precision to_i > "]}," ActiveRecord Type Decimal cast_value":{"type":"method","name":"cast_value","children":[],"call":[" cast_value ","value to_s ","value to_d ","value respond_to? "," BigDecimal "," precision to_i "," precision "," float_precision "," convert_float_to_big_decimal "," apply_scale ","casted_value round "," scale "]}," ActiveRecord Type Decimal type_cast_for_schema":{"type":"method","name":"type_cast_for_schema","children":[],"call":["value to_s "]}," ActiveRecord Type Decimal type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord Type DateTime fallback_string_to_time":{"type":"method","name":"fallback_string_to_time","children":[],"call":[" new_time ","time_hash values_at ","time_hash []= "," microseconds "," Date  _parse "," Date  _parse  values_at "," Date  _parse  []= "]}," ActiveRecord Type DateTime microseconds":{"type":"method","name":"microseconds","children":[],"call":["(send\n  (send\n    (lvar :time) :[]\n    (sym :sec_fraction)) :*\n  (int 1000000)) to_i ","time [] * ","time [] "]}," ActiveRecord Type DateTime cast_value":{"type":"method","name":"cast_value","children":[],"call":[" fallback_string_to_time "," fast_string_to_time ","string empty? ","string is_a? "]}," ActiveRecord Type DateTime type_cast_for_database":{"type":"method","name":"type_cast_for_database","children":[],"call":["value send ","value acts_like? ","ActiveRecord Base  default_timezone == ","ActiveRecord Base  default_timezone "," sprintf ","value usec / ","10 ** ","6 - "," precision ","value usec ","(irange\n  (int 1)\n  (int 6)) cover? ","value respond_to? ","value to_s "," has_precision? ","value send  send ","value send  acts_like? ","value send  usec / ","value send  usec ","value send  respond_to? ","value send  to_s "]}," ActiveRecord Type DateTime type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord Type Date new_date":{"type":"method","name":"new_date","children":[],"call":[" Date  new ","year != "]}," ActiveRecord Type Date fallback_string_to_date":{"type":"method","name":"fallback_string_to_date","children":[],"call":[" new_date "," Date  _parse values_at "," Date  _parse "]}," ActiveRecord Type Date fast_string_to_date":{"type":"method","name":"fast_string_to_date","children":[],"call":[" new_date ","3 to_i ","2 to_i ","1 to_i ","string =~ "]}," ActiveRecord Type Date cast_value":{"type":"method","name":"cast_value","children":[],"call":["value to_date ","value respond_to? "," fallback_string_to_date "," fast_string_to_date ","value empty? ","value is_a? "]}," ActiveRecord Type Date type_cast_for_schema":{"type":"method","name":"type_cast_for_schema","children":[],"call":["value to_s "]}," ActiveRecord Type Date klass":{"type":"method","name":"klass","children":[],"call":[]}," ActiveRecord Type Date type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord Type Boolean cast_value":{"type":"method","name":"cast_value","children":[],"call":["ActiveSupport Deprecation  warn ","(str \"              You attempted to assign a value which is not explicitly `true` or `false`\\n\") squish ","ConnectionAdapters Column FALSE_VALUES  include? ! ","ConnectionAdapters Column FALSE_VALUES  include? ","ConnectionAdapters Column TRUE_VALUES  include? ","value == ","value inspect "]}," ActiveRecord Type Boolean type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord Type Binary Data ==":{"type":"method","name":"==","children":[],"call":["other == "," to_s "]}," ActiveRecord Type Binary Data hex":{"type":"method","name":"hex","children":[],"call":["@value unpack [] ","@value unpack "]}," ActiveRecord Type Binary Data to_s":{"type":"method","name":"to_s","children":[],"call":[]}," ActiveRecord Type Binary Data initialize":{"type":"method","name":"initialize","children":[],"call":["value to_s "]}," ActiveRecord Type Binary changed_in_place?":{"type":"method","name":"changed_in_place?","children":[],"call":["old_value != "," type_cast_from_database "," type_cast_from_database  != "]}," ActiveRecord Type Binary type_cast_for_database":{"type":"method","name":"type_cast_for_database","children":[],"call":["Data  new ","value nil? "]}," ActiveRecord Type Binary type_cast":{"type":"method","name":"type_cast","children":[],"call":["value to_s ","value is_a? "]}," ActiveRecord Type Binary binary?":{"type":"method","name":"binary?","children":[],"call":[]}," ActiveRecord Type Binary type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord Type BigInteger max_value":{"type":"method","name":"max_value","children":[],"call":[]}," ActiveRecord Transactions force_clear_transaction_record_state":{"type":"method","name":"force_clear_transaction_record_state","children":[],"call":["@_start_transaction_state clear "]}," ActiveRecord Tasks DatabaseTasks load_schema_current_if_exists":{"type":"method","name":"load_schema_current_if_exists","children":[],"call":[" load_schema_current ","File  exist? "," schema_file "]}," ActiveRecord Tasks DatabaseTasks schema_file":{"type":"method","name":"schema_file","children":[],"call":["File  join "," db_dir "," schema_file_type "]}," ActiveRecord Tasks DatabaseTasks purge_current":{"type":"method","name":"purge_current","children":[],"call":["ActiveRecord Base  establish_connection ","environment to_sym "," purge "," each_current_configuration "," migration_class establish_connection "," migration_class "]}," ActiveRecord Tasks DatabaseTasks purge_all":{"type":"method","name":"purge_all","children":[],"call":[" purge "," each_local_configuration "]}," ActiveRecord Tasks DatabaseTasks migrate":{"type":"method","name":"migrate","children":[],"call":["Migration  verbose= ","scope == ","migration scope ","scope blank? ","Migrator  migrate ","Migrator  migrations_paths ","Migration  verbose ","ENV  [] ","ENV  [] to_i ","ENV  [] == ","ActiveRecord Base  clear_cache! "," migrations_paths "," raise ","ENV  [] empty? ","Base  connection migration_context migrate "," target_version ","Base  connection migration_context ","Base  connection ","ENV  [] != "," check_target_version "," verbose? ","Migration  write ","migrations_ran empty? ","scope present? ","(send\n  (send\n    (send\n      (const nil :Base) :connection) :migration_context) :migrate\n  (or\n    (send nil :target_version)\n    (lvar :version))) tap ","(send\n  (send\n    (send\n      (const nil :Base) :connection) :migration_context) :migrate\n  (send nil :target_version)) tap ","migration version == ","migration version ","version blank? "," migration_connection schema_cache clear! "," migration_connection schema_cache "," migration_connection ","(send\n  (send\n    (send nil :migration_connection) :migration_context) :migrate\n  (send nil :target_version)) tap "," migration_connection migration_context migrate "," migration_connection migration_context ","Migration  ENV  [] == = ","Migration  ENV  [] != = ","ENV  []  == ","migration ENV  []  ","ENV  []  blank? ","Migration  ENV  [] ==  ","Migration  ENV  [] !=  "," target_ENV  [] to_i  "," check_target_ENV  [] to_i  "," ENV  [] == ? "," ENV  [] != ? ","ENV  []  present? ","(send\n  (send\n    (send\n      (const nil :Base) :connection) :migration_context) :migrate\n  (or\n    (send nil :target_ENV  [] to_i )\n    (lvar :ENV  [] to_i ))) tap ","(send\n  (send\n    (send\n      (const nil :Base) :connection) :migration_context) :migrate\n  (send nil :target_ENV  [] to_i )) tap ","migration ENV  [] to_i  == ","migration ENV  [] to_i  ","ENV  [] to_i  blank? ","(send\n  (send\n    (send nil :migration_connection) :migration_context) :migrate\n  (send nil :target_ENV  [] to_i )) tap "]}," ActiveRecord StatementCache create":{"type":"method","name":"create","children":[],"call":["Proc  new "]}," ActiveRecord StatementCache BindMap bind":{"type":"method","name":"bind","children":[],"call":["bvs [] []= ","values [] ","bvs [] ","@indexes each_with_index ","pair dup ","@bind_values map ","bas []= ","bas [] with_cast_value ","bas [] ","@bound_attributes dup ","@bound_attributes dup  []= ","@bound_attributes dup  [] with_cast_value ","@bound_attributes dup  [] "]}," ActiveRecord StatementCache BindMap initialize":{"type":"method","name":"initialize","children":[],"call":["@indexes << ","Substitute  === ","bind_values each_with_index ","attr value ","bound_attributes each_with_index ","ActiveModel Attribute  === "]}," ActiveRecord StatementCache Params bind":{"type":"method","name":"bind","children":[],"call":["Substitute  new "]}," ActiveRecord StatementCache partial_query":{"type":"method","name":"partial_query","children":[],"call":[]}," ActiveRecord StatementCache query":{"type":"method","name":"query","children":[],"call":[]}," ActiveRecord StatementCache PartialQuery sql_for":{"type":"method","name":"sql_for","children":[],"call":["val join ","val []= ","connection quote ","binds shift reverse ","binds shift ","@indexes each ","binds dup ","@values dup ","connection prepare_binds_for_database ","casted_binds shift ","binds map ","value value_for_database ","ActiveModel Attribute  === ","@values dup  join ","@values dup  []= ","binds dup  shift reverse ","connection prepare_binds_for_database  shift reverse ","binds dup  shift ","connection prepare_binds_for_database  shift ","binds dup  dup ","connection prepare_binds_for_database  dup ","@@values dup ues dup ","@value value_for_database s dup ","@binds shift s dup ","connection prepare_binds dup _for_database ","connection prepare_connection prepare_binds_for_database _for_database ","casted_binds dup  shift ","casted_connection prepare_binds_for_database  shift ","binds map  shift ","binds dup  map ","connection prepare_binds_for_database  map ","@values dup ue @values dup ue_for_database ","value value_for_database  value value_for_database _for_database ","binds shift  binds shift _for_database "]}," ActiveRecord StatementCache PartialQuery initialize":{"type":"method","name":"initialize","children":[],"call":["(send\n  (send\n    (lvar :values) :each_with_index) :find_all) map ","Arel Nodes BindParam  === ","values each_with_index find_all ","values each_with_index ","Substitute  === "]}," ActiveRecord StatementCache Query sql_for":{"type":"method","name":"sql_for","children":[],"call":[]}," ActiveRecord StatementCache Query initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord SchemaMigration normalized_versions":{"type":"method","name":"normalized_versions","children":[],"call":[" normalize_migration_number "," pluck map "," pluck "," all_versions map "," all_versions "," versions map "," versions "]}," ActiveRecord SchemaDumper ignored?":{"type":"method","name":"ignored?","children":[],"call":["ignored === "," remove_prefix_and_suffix ","(str \"schema_migrations\") flatten any? ","(str \"schema_migrations\") flatten "," ignore_tables "," raise "," remove_prefix_and_suffix =~ "," remove_prefix_and_suffix == ","(send\n  (const\n    (const nil :ActiveRecord) :Base) :schema_migrations_table_name) flatten any? ","(send\n  (const\n    (const nil :ActiveRecord) :Base) :schema_migrations_table_name) flatten ","ActiveRecord Base  internal_metadata_table_name ","ActiveRecord Base  schema_migrations_table_name ","@ignore_tables any? "]}," ActiveRecord SchemaDumper foreign_keys":{"type":"method","name":"foreign_keys","children":[],"call":["stream puts ","add_foreign_key_statements sort join ","add_foreign_key_statements sort ","parts join ","parts << ","foreign_key on_delete inspect ","foreign_key on_delete ","foreign_key on_update inspect ","foreign_key on_update ","foreign_key name inspect ","foreign_key name ","foreign_key name !~ ","foreign_key primary_key inspect ","foreign_key primary_key ","foreign_key custom_primary_key? ","foreign_key column inspect ","foreign_key column ","foreign_key column != ","@connection foreign_key_column_for ","foreign_key to_table "," remove_prefix_and_suffix inspect "," remove_prefix_and_suffix ","foreign_key from_table ","foreign_keys map ","(lvasgn :foreign_keys\n  (send\n    (ivar :@connection) :foreign_keys\n    (lvar :table))) any? ","@connection foreign_keys ","   + ","on_delete:  + ","on_update:  + ","name:  + ","primary_key:  + ","column:  + ","add_foreign_key  + ","foreign_key export_name_on_schema_dump? ","foreign_key deferrable inspect ","foreign_key deferrable ","foreign_key validate? inspect ","foreign_key validate? ","@connection foreign_keys  map ","(lvasgn :@connection foreign_keys \n  (send\n    (ivar :@connection) :@connection foreign_keys \n    (lvar :table))) any? ","@connection @connection foreign_keys  "]}," ActiveRecord Sanitization ClassMethods sanitize_sql_like":{"type":"method","name":"sanitize_sql_like","children":[],"call":["(lvar :escape_character) join ","string gsub ","Regexp  union ","escape_character != ","string include? ","string gsub  gsub ","string gsub  include? "]}," ActiveRecord Result cast_values":{"type":"method","name":"cast_values","children":[],"call":["result map! "," columns one? "," columns ","type type_cast_from_database ","types zip map ","types zip "," rows map "," rows "," column_type "," columns map ","type deserialize ","types [] deserialize ","values [] ","types [] ","Array  new ","values size "," columns first ","type_overrides is_a? ","type_overrides first "," columns map with_index "," column_type   column_type _cast_from_database ","type_overrides first  type_overrides first _cast_from_database "," column_type s zip map ","type_overrides first s zip map "," column_type s zip ","type_overrides first s zip "," column_ column_type  "," column_type_overrides first  "," column_type  deserialize ","type_overrides first  deserialize "," column_type s [] deserialize ","type_overrides first s [] deserialize "," column_type s [] ","type_overrides first s [] "," column_type _overrides is_a? ","type_overrides first _overrides is_a? "," column_type _overrides first ","type_overrides first _overrides first "]}," ActiveRecord Result length":{"type":"method","name":"length","children":[],"call":["@rows length "]}," ActiveRecord Relation build_preloader":{"type":"method","name":"build_preloader","children":[],"call":["ActiveRecord Associations Preloader  new "]}," ActiveRecord Relation encode_with":{"type":"method","name":"encode_with","children":[],"call":["coder represent_seq "," to_a "," records "]}," ActiveRecord QueryMethods association_for_table":{"type":"method","name":"association_for_table","children":[],"call":["@klass _reflect_on_association ","table_name singularize ","table_name to_s ","table_name to_s  singularize ","table_name to_s  to_s "]}," ActiveRecord QueryMethods create_binds":{"type":"method","name":"create_binds","children":[],"call":["new_opts []= ","non_binds each ","association_relation send "," association_for_table klass send "," association_for_table klass "," association_for_table ","association_binds each "," connection substitute_at "," connection ","binds push ","@klass columns_hash [] ","column to_s ","@klass columns_hash ","bindable each ","value is_a? ","non_binds partition ","@klass columns_hash include? ","opts partition ","index + ","bindable each_with_index ","connection substitute_at ","@klass reflect_on_aggregation ! ","@klass reflect_on_aggregation ","PredicateBuilder  can_be_bound? "," association_for_table klass send  send ","  connection  substitute_at ","  connection  "," connection  substitute_at "]}," ActiveRecord QueryMethods check_cached_relation":{"type":"method","name":"check_cached_relation","children":[],"call":["ActiveSupport Deprecation  warn ","(str \"          Modifying already cached Relation. The cache will be reset. Use a\\n\") squish "]}," ActiveRecord PredicateBuilder ArrayHandler NullPredicate or":{"type":"method","name":"or","children":[],"call":[]}," ActiveRecord FinderMethods find_nth!":{"type":"method","name":"find_nth!","children":[],"call":[" raise ","RecordNotFound  new "," arel where_sql "," arel ","@klass name "," find_nth "," offset_index ","@klass arel_engine "]}," ActiveRecord FinderMethods offset_index":{"type":"method","name":"offset_index","children":[],"call":[" offset_value "]}," ActiveRecord Calculations type_for":{"type":"method","name":"type_for","children":[],"call":["@klass type_for_attribute ","field to_s split last ","field to_s split ","field to_s ","field name to_s ","field name ","field respond_to? "]}," ActiveRecord Reflection ThroughReflection primary_key":{"type":"method","name":"primary_key","children":[],"call":[" raise ","UnknownPrimaryKey  new ","klass primary_key "]}," ActiveRecord Reflection ThroughReflection join_id_for":{"type":"method","name":"join_id_for","children":[],"call":[" source_reflection join_id_for "," source_reflection "]}," ActiveRecord Reflection ThroughReflection join_keys":{"type":"method","name":"join_keys","children":[],"call":[" source_reflection join_keys "," source_reflection "]}," ActiveRecord Reflection ThroughReflection klass":{"type":"method","name":"klass","children":[],"call":[" delegate_reflection compute_class "," class_name "," delegate_reflection "]}," ActiveRecord Reflection HasAndBelongsToManyReflection collection?":{"type":"method","name":"collection?","children":[],"call":[]}," ActiveRecord Reflection HasAndBelongsToManyReflection macro":{"type":"method","name":"macro","children":[],"call":[]}," ActiveRecord Reflection HasAndBelongsToManyReflection initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Reflection BelongsToReflection join_id_for":{"type":"method","name":"join_id_for","children":[],"call":["owner [] "," foreign_key "]}," ActiveRecord Reflection BelongsToReflection join_keys":{"type":"method","name":"join_keys","children":[],"call":["JoinKeys  new "," foreign_key "," association_primary_key "," polymorphic? "," foreign_ association_primary_key  "," association_primary_ association_primary_key  "]}," ActiveRecord Reflection BelongsToReflection belongs_to?":{"type":"method","name":"belongs_to?","children":[],"call":[]}," ActiveRecord Reflection BelongsToReflection macro":{"type":"method","name":"macro","children":[],"call":[]}," ActiveRecord Reflection BelongsToReflection initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Reflection HasOneReflection has_one?":{"type":"method","name":"has_one?","children":[],"call":[]}," ActiveRecord Reflection HasOneReflection macro":{"type":"method","name":"macro","children":[],"call":[]}," ActiveRecord Reflection HasOneReflection initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Reflection HasManyReflection collection?":{"type":"method","name":"collection?","children":[],"call":[]}," ActiveRecord Reflection HasManyReflection macro":{"type":"method","name":"macro","children":[],"call":[]}," ActiveRecord Reflection HasManyReflection initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Reflection AssociationReflection has_one?":{"type":"method","name":"has_one?","children":[],"call":[]}," ActiveRecord Reflection AssociationReflection macro":{"type":"method","name":"macro","children":[],"call":[" raise "]}," ActiveRecord Reflection AssociationReflection join_id_for":{"type":"method","name":"join_id_for","children":[],"call":["owner [] "," active_record_primary_key "," join_foreign_key ","owner _read_attribute "," Array map "," Array "]}," ActiveRecord Reflection AssociationReflection check_preloadable!":{"type":"method","name":"check_preloadable!","children":[],"call":["ActiveSupport Deprecation  warn ","(str \"            The association scope '\") squish "," name "," scope arity > "," scope arity "," scope "," raise "," scope arity == "]}," ActiveRecord Reflection AssociationReflection association_scope_cache":{"type":"method","name":"association_scope_cache","children":[],"call":["@association_scope_cache [] ","@scope_lock synchronize ","owner _read_attribute "," polymorphic? ","conn prepared_statements ","owner read_attribute ","StatementCache  create ","@association_scope_cache compute_if_absent ","klass cached_find_by_statement "]}," ActiveRecord Reflection AssociationReflection compute_class":{"type":"method","name":"compute_class","children":[],"call":[" active_record send "," active_record "," raise "," polymorphic? ","klass < ","(str \"          Rails couldn't find a valid model for \") squish "," name ","NameError  new "," options [] "," options ","error name match? ","error name "," active_record send  < "]}," ActiveRecord Reflection MacroReflection compute_class":{"type":"method","name":"compute_class","children":[],"call":["name constantize "]}," ActiveRecord Reflection AbstractReflection source_macro":{"type":"method","name":"source_macro","children":[],"call":[" macro ","ActiveSupport Deprecation  warn ","(str \"          ActiveRecord::Base.source_macro is deprecated and will be removed\\n\") squish "]}," ActiveRecord Reflection AbstractReflection join_keys":{"type":"method","name":"join_keys","children":[],"call":["JoinKeys  new "," active_record_primary_key "," foreign_key "," get_join_keys "," klass "]}," ActiveRecord Reflection AbstractReflection class_name":{"type":"method","name":"class_name","children":[],"call":["(or\n  (send\n    (send nil :options) :[]\n    (sym :class_name))\n  (send nil :derive_class_name)) to_s "," derive_class_name "," options [] "," options ","(or\n  (csend\n    (send\n      (send nil :options) :[]\n      (sym :class_name)) :to_s)\n  (send nil :derive_class_name)) -@ ","(or\n  (send\n    (send nil :options) :[]\n    (sym :class_name))\n  (send nil :derive_class_name)) to_s -@ "]}," ActiveRecord Reflection AbstractReflection primary_key_type":{"type":"method","name":"primary_key_type","children":[],"call":[" klass type_for_attribute "," klass primary_key "," klass "]}," ActiveRecord Reflection AbstractReflection quoted_table_name":{"type":"method","name":"quoted_table_name","children":[],"call":[" klass quoted_table_name "," klass "]}," ActiveRecord Reflection AbstractReflection build_association":{"type":"method","name":"build_association","children":[],"call":[" klass new "," klass "]}," ActiveRecord Reflection AbstractReflection table_name":{"type":"method","name":"table_name","children":[],"call":[" klass table_name "," klass "]}," ActiveRecord Persistence ClassMethods create!":{"type":"method","name":"create!","children":[],"call":["object save! "," new "," create! ","attributes collect ","attributes is_a? "," new  save! "]}," ActiveRecord ModelSchema ClassMethods raw_default_values":{"type":"method","name":"raw_default_values","children":[],"call":[" columns_hash transform_values "," columns_hash "]}," ActiveRecord ModelSchema ClassMethods _default_attributes":{"type":"method","name":"_default_attributes","children":[],"call":[" attributes_builder build_from_database "," raw_default_values "," attributes_builder ","AttributeSet  new ","ActiveModel AttributeSet  new "," load_schema "]}," ActiveRecord ModelSchema ClassMethods type_for_attribute":{"type":"method","name":"type_for_attribute","children":[],"call":[" column_types [] "," column_types "," attribute_types [] "," attribute_types "," attribute_types fetch ","attr_name to_s "," attribute_aliases [] "," attribute_aliases ","attr_name to_s  to_s "]}," ActiveRecord ModelSchema ClassMethods attributes_builder":{"type":"method","name":"attributes_builder","children":[],"call":["AttributeSet Builder  new "," primary_key "," column_types "," attribute_types "," _default_attributes [] dup "," _default_attributes [] "," _default_attributes "," columns_hash key? "," columns_hash "," _default_attributes except "," column_names - "," column_names ","ActiveModel AttributeSet Builder  new "]}," ActiveRecord ModelSchema ClassMethods full_table_name_suffix":{"type":"method","name":"full_table_name_suffix","children":[],"call":["(or\n  (block\n    (send\n      (send nil :parents) :detect)\n    (args\n      (arg :p))\n    (send\n      (lvar :p) :respond_to?\n      (sym :table_name_suffix)))\n  (self)) table_name_suffix ","p respond_to? "," parents detect "," parents ","(or\n  (block\n    (send\n      (send nil :module_parents) :detect)\n    (args\n      (arg :p))\n    (send\n      (lvar :p) :respond_to?\n      (sym :table_name_suffix)))\n  (self)) table_name_suffix "," module_parents detect "," module_parents "]}," ActiveRecord ModelSchema derive_join_table_name":{"type":"method","name":"derive_join_table_name","children":[],"call":[]}," ActiveRecord Migrator any_migrations?":{"type":"method","name":"any_migrations?","children":[],"call":[" migrations any? "," migrations "," migrations_paths "]}," ActiveRecord Migration CheckPending connection":{"type":"method","name":"connection","children":[],"call":["ActiveRecord Base  connection ","ActiveRecord Tasks DatabaseTasks  migration_connection "]}," ActiveRecord Migration CommandRecorder invert_add_foreign_key":{"type":"method","name":"invert_add_foreign_key","children":[],"call":["add_options [] ","args last delete ","args last ","args last is_a? "]}," ActiveRecord Locking LockingType encode_with":{"type":"method","name":"encode_with","children":[],"call":["coder []= "," __getobj__ "]}," ActiveRecord Locking LockingType init_with":{"type":"method","name":"init_with","children":[],"call":[" __setobj__ ","coder [] "]}," ActiveRecord Locking LockingType changed?":{"type":"method","name":"changed?","children":[],"call":["old_value == "]}," ActiveRecord Locking LockingType type_cast_from_database":{"type":"method","name":"type_cast_from_database","children":[],"call":[" to_i "]}," ActiveRecord Locking Optimistic ClassMethods inherited":{"type":"method","name":"inherited","children":[],"call":["LockingType  new "," decorate_matching_attribute_types ","name == "," locking_column "," lock_optimistically "," lambda ","subclass class_eval ","base class_eval "]}," ActiveRecord FixtureSet primary_key_type":{"type":"method","name":"primary_key_type","children":[],"call":[" model_class column_types [] type "," model_class column_types [] "," model_class primary_key "," model_class "," model_class column_types "," model_class type_for_attribute type "," model_class type_for_attribute "]}," ActiveRecord FixtureSet ReflectionProxy primary_key_type":{"type":"method","name":"primary_key_type","children":[],"call":["@association klass column_types [] type ","@association klass column_types [] ","@association klass primary_key ","@association klass ","@association klass column_types ","@association klass type_for_attribute type ","@association klass type_for_attribute "]}," ActiveRecord FixtureSet update_all_loaded_fixtures":{"type":"method","name":"update_all_loaded_fixtures","children":[],"call":[" all_loaded_fixtures update "," all_loaded_fixtures "]}," ActiveRecord RecordNotDestroyed initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord RecordNotSaved initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord CounterCache each_counter_cached_associations":{"type":"method","name":"each_counter_cached_associations","children":[],"call":[" association ","reflection counter_cache_column ","reflection belongs_to? "," _reflections each "," _reflections ","name to_sym "]}," ActiveRecord CounterCache destroy_row":{"type":"method","name":"destroy_row","children":[],"call":["association decrement_counters "," send ","association reflection name ","association reflection "," destroyed_by_association foreign_key to_sym == "," destroyed_by_association foreign_key to_sym "," destroyed_by_association foreign_key "," destroyed_by_association ","association reflection foreign_key to_sym ","association reflection foreign_key "," each_counter_cached_associations ","affected_rows > "," destroyed_by_association association reflection foreign_key to_sym  to_sym == "," destroyed_by_association association reflection foreign_key to_sym  to_sym "," destroyed_by_association association reflection foreign_key to_sym  ","association reflection association reflection foreign_key to_sym  to_sym ","association reflection association reflection foreign_key to_sym  "]}," ActiveRecord CounterCache _create_record":{"type":"method","name":"_create_record","children":[],"call":["association increment_counters "," send ","association reflection name ","association reflection "," each_counter_cached_associations "]}," ActiveRecord CounterCache clear_destroy_state":{"type":"method","name":"clear_destroy_state","children":[],"call":[]}," ActiveRecord CounterCache actually_destroyed?":{"type":"method","name":"actually_destroyed?","children":[],"call":[]}," ActiveRecord Core thaw":{"type":"method","name":"thaw","children":[],"call":["@attributes dup "," frozen? ","@attributes dup  dup "]}," ActiveRecord Core pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["pp text ","pp breakable ","pp pp ","pp group "," read_attribute ","pp seplist "," proc "," new_record? "," has_attribute? "," class column_names select "," class column_names "," class ","pp object_address_group "," custom_inspect_method_defined? "," inspection_filter filter_param "," inspection_filter ","value nil? "," _read_attribute "," class attribute_names select "," class attribute_names "," _has_attribute? "," inspection_filter filter_param  nil? "," _read_attribute  nil? "]}," ActiveRecord Core ClassMethods find_by!":{"type":"method","name":"find_by!","children":[],"call":[" raise ","RecordNotFound  new "," name "," find_by "," where raise_record_not_found_exception! "," where "]}," ActiveRecord Core ClassMethods find_by":{"type":"method","name":"find_by","children":[],"call":[" raise ","ActiveRecord StatementInvalid  new ","e message ","s execute first ","s execute "," connection ","hash values ","klass where limit ","klass where ","o []= ","params bind ","key each_with_object ","StatementCache  create "," find_by_statement_cache [] "," find_by_statement_cache "," find_by_statement_cache synchronize ","hash keys "," columns_hash has_key? ","k to_s "," columns_hash ","hash keys all? ","Hash  === ","Array  === ","v nil? ","hash values any? ","args first "," default_scopes any? "," default_scopes "," reflect_on_all_aggregations any? "," reflect_on_all_aggregations ","(send\n  (const nil :Hash) :===\n  (send\n    (lvar :args) :first)) ! "," current_scope ","args length > ","args length ","statement execute first ","statement execute "," where limit "," where ","keys each_with_object "," cached_find_by_statement ","Relation  === "," scope_attributes? ","Base  === ","(send\n  (const nil :Hash) :===\n  (lvar :hash)) ! ","StatementCache  unsupported_value? "," base_class != "," base_class "," columns_hash key? "," inheritance_column "," base_class? ! "," base_class? ","keys index_with ","keys all? "," reflect_on_aggregation ","reflection join_foreign_key ","reflection polymorphic? ! ","reflection polymorphic? "," _reflect_on_association "," attribute_aliases [] ","key to_s "," attribute_aliases ","hash keys map! ","values any? ","value id ","value respond_to? ","hash values map! ","value is_a? ","h []= "," columns_hash key? ! ","value public_send ","reflection join_primary_key ","reflection belongs_to? ","reflection ! ","hash each_with_object "," cached_find_by ","args first  values ","hash value public_send s ","hash value id s ","hash keys  each_with_object ","reflection join_foreign_key  each_with_object ","key to_s  each_with_object ","hash hash keys s ","hash reflection join_foreign_key s ","hash key to_s s ","args first  keys ","hash hash keys  "," columns_hash has_hash keys ? "," columns_hash has_reflection join_foreign_key ? "," columns_hash has_key to_s ? "," columns_args first  has_key? "," columns_args first  ","hash hash keys s all? ","hash reflection join_foreign_key s all? ","hash key to_s s all? ","args first  keys all? ","hash hash keys  all? ","args first  values any? ","hash value public_send s any? ","hash value id s any? ","hash keys s each_with_object ","reflection join_foreign_key s each_with_object ","key to_s s each_with_object ","(send\n  (const nil :Hash) :===\n  (lvar :args first )) ! ","StatementCache  unsupported_value public_send ? ","StatementCache  unsupported_value id ? "," columns_hash hash keys ? "," columns_hash reflection join_foreign_key ? "," columns_hash key to_s ? "," columns_args first  key? ","hash keys s index_with ","reflection join_foreign_key s index_with ","key to_s s index_with ","hash keys  index_with ","hash keys s all? ","reflection join_foreign_key s all? ","key to_s s all? ","hash keys  all? ","reflection join_foreign_hash keys  ","reflection join_foreign_reflection join_foreign_key  ","reflection join_foreign_key to_s  "," _reflect_on_association  join_foreign_key "," _reflect_on_association  polymorphic? ! "," _reflect_on_association  polymorphic? ","hash keys  to_s ","reflection join_foreign_key  to_s ","key to_s  to_s ","hash hash keys s map! ","hash reflection join_foreign_key s map! ","hash key to_s s map! ","args first  keys map! ","hash hash keys  map! ","value public_send s any? ","value id s any? ","value public_send  id ","value id  id ","value public_send  respond_to? ","value id  respond_to? ","args first  values map! ","hash value public_send s map! ","hash value id s map! ","value public_send  is_a? ","value id  is_a? "," columns_hash hash keys ? ! "," columns_hash reflection join_foreign_key ? ! "," columns_hash key to_s ? ! "," columns_args first  key? ! ","value public_send  public_send ","value id  public_send ","reflection join_primary_hash keys  ","reflection join_primary_reflection join_foreign_key  ","reflection join_primary_key to_s  "," _reflect_on_association  join_primary_key "," _reflect_on_association  belongs_to? "," _reflect_on_association  ! ","args first  each_with_object "]}," ActiveRecord Core ClassMethods find":{"type":"method","name":"find","children":[],"call":[" raise "," primary_key "," name ","s execute first ","s execute "," connection "," where limit "," where ","params bind ","StatementCache  create "," find_by_statement_cache [] "," find_by_statement_cache "," find_by_statement_cache synchronize ","ActiveSupport Deprecation  warn ","(str \"            You are passing an instance of ActiveRecord::Base to `find`.\\n\") squish ","id id ","ActiveRecord Base  === ","ids first ","ids first kind_of? "," columns_hash include? "," inheritance_column "," columns_hash "," default_scopes any? "," default_scopes "," primary_key nil? "," block_given? ","ids length == ","ids length "," current_scope ","RecordNotFound  new ","statement execute first ","statement execute "," cached_find_by_statement "," scope_attributes? ","id is_a? ","id kind_of? ","StatementCache  unsupported_value? "," base_class? ! "," base_class? "," columns_hash key? "," cached_find_by "," primary_ primary_key  ","id id  id id  ","ids first  ids first  ","id id s first ","ids first s first ","id id s first kind_of? ","ids first s first kind_of? "," primary_ primary_key  nil? ","id id s length == ","ids first s length == ","id id s length ","ids first s length ","id id  is_a? ","ids first  is_a? ","id id  kind_of? ","ids first  kind_of? "," columns_hash  primary_key ? "]}," ActiveRecord Core ClassMethods initialize_find_by_cache":{"type":"method","name":"initialize_find_by_cache","children":[],"call":[" find_by_statement_cache= "," extend ","Concurrent Map  new "]}," ActiveRecord Core ClassMethods allocate":{"type":"method","name":"allocate","children":[],"call":[" define_attribute_methods "]}," ActiveRecord ConnectionAdapters SQLite3Adapter initialize_type_map":{"type":"method","name":"initialize_type_map","children":[],"call":[" register_class_with_limit ","m register_type ","SQLite3Binary  new "]}," ActiveRecord ConnectionAdapters SQLite3Adapter valid_alter_table_type?":{"type":"method","name":"valid_alter_table_type?","children":[],"call":["type to_sym != ","type to_sym "," invalid_alter_table_type? ! "," invalid_alter_table_type? "]}," ActiveRecord ConnectionAdapters SQLite3Adapter _type_cast":{"type":"method","name":"_type_cast","children":[],"call":["value to_f ","value encode ","value encoding == ","value encoding "]}," ActiveRecord ConnectionAdapters SQLite3Adapter _quote":{"type":"method","name":"_quote","children":[],"call":["value hex "]}," ActiveRecord ConnectionAdapters SQLite3Adapter supports_views?":{"type":"method","name":"supports_views?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLite3String type_cast_for_database":{"type":"method","name":"type_cast_for_database","children":[],"call":["value encode ","value encoding == ","value encoding ","value is_a? "]}," ActiveRecord ConnectionAdapters SQLite3Binary cast_value":{"type":"method","name":"cast_value","children":[],"call":["value force_encoding ","value encoding != ","value encoding ","value force_encoding  force_encoding ","value force_encoding  encoding != ","value force_encoding  encoding "]}," ActiveRecord ConnectionAdapters SchemaCache prepare_tables":{"type":"method","name":"prepare_tables","children":[],"call":["@tables []= "," connection tables each "," connection tables "," connection "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter execute_and_clear":{"type":"method","name":"execute_and_clear","children":[],"call":["result clear "," exec_cache "," exec_no_cache "," without_prepared_statement? ","prepare ! "," raise "," write_query? "," preventing_writes? "," check_if_write_query "," transform_query "," exec_cache  clear "," exec_no_cache  clear "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter load_additional_types":{"type":"method","name":"load_additional_types","children":[],"call":["initializer run "," execute ","OID TypeMapInitializer  new ","WHERE t.oid::integer IN (%s) % ","oids join "," supports_ranges? "," execute_and_clear ","initializer query_conditions_for_initial_load "," type_map ","WHERE t.oid IN (%s) % "," load_types_queries ","OID TypeMapInitializer  new  run ","OID TypeMapInitializer  new  query_conditions_for_initial_load "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter has_default_function?":{"type":"method","name":"has_default_function?","children":[],"call":["(str \"\\\\w+\\\\(.*\\\\)\") === ","default_value ! ","(str \"\\\\w+\\\\(.*\\\\)|\\\\(.*\\\\)::\\\\w+\") === ","(str \"\\\\w+\\\\(.*\\\\)|\\\\(.*\\\\)::\\\\w+|CURRENT_DATE|CURRENT_TIMESTAMP\") match? "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter extract_default_function":{"type":"method","name":"extract_default_function","children":[],"call":[" has_default_function? "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter extract_value_from_default":{"type":"method","name":"extract_value_from_default","children":[],"call":["1 gsub ","false freeze ","true freeze ","' freeze ","'' freeze ","2 == ","date freeze ","1 == ","now freeze "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter extract_limit":{"type":"method","name":"extract_limit","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter column_name_for_operation":{"type":"method","name":"column_name_for_operation","children":[],"call":["operation downcase ","OPERATION_ALIASES  fetch "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter lookup_cast_type":{"type":"method","name":"lookup_cast_type","children":[],"call":[" execute first [] to_i "," execute first [] "," execute first "," execute "," quote "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter supports_materialized_views?":{"type":"method","name":"supports_materialized_views?","children":[],"call":[" postgresql_version >= "," postgresql_version "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter truncate":{"type":"method","name":"truncate","children":[],"call":[" exec_query "," quote_table_name "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter supports_views?":{"type":"method","name":"supports_views?","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter supports_foreign_keys?":{"type":"method","name":"supports_foreign_keys?","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQL Utils extract_schema_qualified_name":{"type":"method","name":"extract_schema_qualified_name","children":[],"call":["PostgreSQL Name  new ","table nil? ","string scan ","string scan [] reverse ","string scan [] "]}," ActiveRecord ConnectionAdapters PostgreSQL Name parts":{"type":"method","name":"parts","children":[],"call":["(ivar :@schema) compact "]}," ActiveRecord ConnectionAdapters PostgreSQL Name unquote":{"type":"method","name":"unquote","children":[],"call":["part [] ","part start_with? ","part gsub "]}," ActiveRecord ConnectionAdapters PostgreSQL Name hash":{"type":"method","name":"hash","children":[],"call":[" parts hash "," parts "]}," ActiveRecord ConnectionAdapters PostgreSQL Name ==":{"type":"method","name":"==","children":[],"call":["o parts == "," parts ","o parts ","o class == "," class ","o class "]}," ActiveRecord ConnectionAdapters PostgreSQL Name quoted":{"type":"method","name":"quoted","children":[],"call":["PGconn  quote_ident "," identifier ","PGconn  quote_ident << << ","PGconn  quote_ident << "," schema ","(send\n  (send nil :parts) :map) join "," parts map "," parts ","PG Connection  quote_ident ","PG Connection  quote_ident << << ","PG Connection  quote_ident << "]}," ActiveRecord ConnectionAdapters PostgreSQL Name to_s":{"type":"method","name":"to_s","children":[],"call":[" parts join "," parts "]}," ActiveRecord ConnectionAdapters PostgreSQL Name initialize":{"type":"method","name":"initialize","children":[],"call":[" unquote ","Utils  unquote_identifier "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements columns_for_distinct":{"type":"method","name":"columns_for_distinct","children":[],"call":["(zsuper) join ","(send\n  (send\n    (lvar :orders) :reject\n    (block-pass\n      (sym :blank?))) :map) reject map with_index ","(send\n  (send\n    (lvar :orders) :reject\n    (block-pass\n      (sym :blank?))) :map) reject map ","(send\n  (send\n    (lvar :orders) :reject\n    (block-pass\n      (sym :blank?))) :map) reject ","s gsub gsub ","s gsub ","s to_sql ","s is_a? ","orders reject map ","orders reject ","(send\n  (lvar :order_columns) :<<\n  (zsuper)) join ","order_columns << "," visitor compile "," visitor ","(send\n  (send\n    (lvar :orders) :compact_blank) :map) compact_blank map with_index ","(send\n  (send\n    (lvar :orders) :compact_blank) :map) compact_blank map ","(send\n  (send\n    (lvar :orders) :compact_blank) :map) compact_blank ","orders compact_blank map ","orders compact_blank ","(zs to_sql uper) join ","(z visitor compile uper) join ","(s to_sql end\n  (s to_sql end\n    (lvar :orders to_sql ) :reject\n    (block-pas to_sql s to_sql \n      (s to_sql ym :blank?))) :map) reject map with_index ","( visitor compile end\n  ( visitor compile end\n    (lvar :order visitor compile ) :reject\n    (block-pa visitor compile  visitor compile \n      ( visitor compile ym :blank?))) :map) reject map with_index ","(s to_sql end\n  (s to_sql end\n    (lvar :orders to_sql ) :reject\n    (block-pas to_sql s to_sql \n      (s to_sql ym :blank?))) :map) reject map ","( visitor compile end\n  ( visitor compile end\n    (lvar :order visitor compile ) :reject\n    (block-pa visitor compile  visitor compile \n      ( visitor compile ym :blank?))) :map) reject map ","(s to_sql end\n  (s to_sql end\n    (lvar :orders to_sql ) :reject\n    (block-pas to_sql s to_sql \n      (s to_sql ym :blank?))) :map) reject ","( visitor compile end\n  ( visitor compile end\n    (lvar :order visitor compile ) :reject\n    (block-pa visitor compile  visitor compile \n      ( visitor compile ym :blank?))) :map) reject ","s to_sql  gs to_sql ub gs to_sql ub "," visitor compile  g visitor compile ub g visitor compile ub ","s to_sql  gs to_sql ub "," visitor compile  g visitor compile ub ","s to_sql  to_s to_sql ql "," visitor compile  to_ visitor compile ql ","s to_sql  is to_sql _a? "," visitor compile  i visitor compile _a? ","orders to_sql  reject map ","order visitor compile  reject map ","orders to_sql  reject ","order visitor compile  reject ","(s to_sql end\n  (lvar :order_columns to_sql ) :<<\n  (zs to_sql uper)) join ","( visitor compile end\n  (lvar :order_column visitor compile ) :<<\n  (z visitor compile uper)) join ","order_columns to_sql  << ","order_column visitor compile  << "," vis to_sql itor compile "," vi visitor compile itor compile "," vis to_sql itor "," vi visitor compile itor ","(s to_sql end\n  (s to_sql end\n    (lvar :orders to_sql ) :compact_blank) :map) compact_blank map with_index ","( visitor compile end\n  ( visitor compile end\n    (lvar :order visitor compile ) :compact_blank) :map) compact_blank map with_index ","(s to_sql end\n  (s to_sql end\n    (lvar :orders to_sql ) :compact_blank) :map) compact_blank map ","( visitor compile end\n  ( visitor compile end\n    (lvar :order visitor compile ) :compact_blank) :map) compact_blank map ","(s to_sql end\n  (s to_sql end\n    (lvar :orders to_sql ) :compact_blank) :map) compact_blank ","( visitor compile end\n  ( visitor compile end\n    (lvar :order visitor compile ) :compact_blank) :map) compact_blank ","orders to_sql  compact_blank map ","order visitor compile  compact_blank map ","orders to_sql  compact_blank ","order visitor compile  compact_blank "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements type_to_sql":{"type":"method","name":"type_to_sql","children":[],"call":[" raise ","type to_s ","sql << ","type != ","enum_type nil? "," ArgumentError "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements index_name_length":{"type":"method","name":"index_name_length","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements extract_foreign_key_action":{"type":"method","name":"extract_foreign_key_action","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements foreign_keys":{"type":"method","name":"foreign_keys","children":[],"call":["ForeignKeyDefinition  new ","row [] ","options []= "," extract_foreign_key_action ","fk_info map "," select_all ","(str \"            SELECT t2.oid::regclass::text AS to_table, a1.attname AS column, a2.attname AS primary_key, c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete\\n\") strip_heredoc "," quote ","(str \"            SELECT t2.relname AS to_table, a1.attname AS column, a2.attname AS primary_key, c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete\\n\") strip_heredoc ","scope [] "," quoted_scope "," exec_query ","(str \"            SELECT t2.oid::regclass::text AS to_table, a1.attname AS column, a2.attname AS primary_key, c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete, c.convalidated AS valid\\n\") strip_heredoc "," extract_foreign_key_deferrable ","Utils  unquote_identifier "," extract_constraint_deferrable "," column_names_from_column_numbers ","conkey size > ","conkey size ","row [] scan map ","row [] scan "," internal_exec_query "," select_all  map "," exec_query  map "," internal_exec_query  map ","(str \"            SELECT t2.oid::regclass::text AS Utils  unquote_identifier , a1.attname AS column, a2.attname AS primary_key, c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete\\n\") strip_heredoc ","(str \"            SELECT t2.oid::regclass::text AS to_table, a1.attname AS column, a2.attname AS row [] , c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete\\n\") strip_heredoc ","(str \"            SELECT t2.oid::regclass::text AS to_table, a1.attname AS column, a2.attname AS  column_names_from_column_numbers , c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete\\n\") strip_heredoc ","(str \"            SELECT t2.oid::regclass::text AS to_table, a1.attname AS Utils  unquote_identifier , a2.attname AS primary_key, c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete\\n\") strip_heredoc ","(str \"            SELECT t2.oid::regclass::text AS to_table, a1.attname AS  column_names_from_column_numbers , a2.attname AS primary_key, c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete\\n\") strip_heredoc ","(str \"            SELECT t2.relname AS Utils  unquote_identifier , a1.attname AS column, a2.attname AS primary_key, c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete\\n\") strip_heredoc ","(str \"            SELECT t2.relname AS to_table, a1.attname AS column, a2.attname AS row [] , c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete\\n\") strip_heredoc ","(str \"            SELECT t2.relname AS to_table, a1.attname AS column, a2.attname AS  column_names_from_column_numbers , c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete\\n\") strip_heredoc ","(str \"            SELECT t2.relname AS to_table, a1.attname AS Utils  unquote_identifier , a2.attname AS primary_key, c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete\\n\") strip_heredoc ","(str \"            SELECT t2.relname AS to_table, a1.attname AS  column_names_from_column_numbers , a2.attname AS primary_key, c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete\\n\") strip_heredoc "," quoted_scope  [] "," quoted_ quoted_scope  ","(str \"            SELECT t2.oid::regclass::text AS Utils  unquote_identifier , a1.attname AS column, a2.attname AS primary_key, c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete, c.convalidated AS valid\\n\") strip_heredoc ","(str \"            SELECT t2.oid::regclass::text AS to_table, a1.attname AS column, a2.attname AS row [] , c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete, c.convalidated AS valid\\n\") strip_heredoc ","(str \"            SELECT t2.oid::regclass::text AS to_table, a1.attname AS column, a2.attname AS  column_names_from_column_numbers , c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete, c.convalidated AS valid\\n\") strip_heredoc ","(str \"            SELECT t2.oid::regclass::text AS to_table, a1.attname AS Utils  unquote_identifier , a2.attname AS primary_key, c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete, c.convalidated AS valid\\n\") strip_heredoc ","(str \"            SELECT t2.oid::regclass::text AS to_table, a1.attname AS  column_names_from_column_numbers , a2.attname AS primary_key, c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete, c.convalidated AS valid\\n\") strip_heredoc "," Utils  unquote_identifier _names_from_Utils  unquote_identifier _numbers ","  column_names_from_column_numbers _names_from_ column_names_from_column_numbers _numbers ","row [] scan map  size > ","row [] scan map  size "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements rename_index":{"type":"method","name":"rename_index","children":[],"call":[" execute "," quote_table_name "," quote_column_name "," raise "," allowed_index_name_length ","new_name length > ","new_name length "," validate_index_length! "," quote_table_name + "," extract_schema_qualified_name "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements remove_index!":{"type":"method","name":"remove_index!","children":[],"call":[" execute "," quote_table_name "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements add_index":{"type":"method","name":"add_index","children":[],"call":[" execute "," quote_table_name "," quote_column_name "," add_index_options "," quote "," execute tap ","index comment ","index name "," schema_creation accept "," schema_creation ","CreateIndexDefinition  new ","create_index index "," build_create_index_definition "," add_create_index index _options ","create_index index  comment ","create_index index  name ","CreateIndexDefinition  new  index "," build_create_index_definition  index ","create_create_index index  create_index index  "," build_CreateIndexDefinition  new _definition "," build_ build_create_index_definition _definition "," build_create_create_index index _definition "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements rename_column":{"type":"method","name":"rename_column","children":[],"call":[" rename_column_indexes "," execute "," quote_column_name "," quote_table_name "," clear_cache! "," rename_column_sql "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements change_column_null":{"type":"method","name":"change_column_null","children":[],"call":[" execute "," quote_column_name "," quote_table_name "," quote_default_value "," column_for ","default nil? "," clear_cache! "," quote_default_expression "," change_column_null_for_alter "," validate_change_column_null_argument! "," quote_ column_for _name ","  column_for _for "," change_ column_for _null_for_alter "," validate_change_ column_for _null_argument! "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements change_column_default":{"type":"method","name":"change_column_default","children":[],"call":[" execute ","alter_column_query % "," quote_default_value ","default nil? "," quote_column_name "," quote_table_name "," column_for "," clear_cache! "," quote_default_expression "," extract_new_default_value "," change_column_default_for_alter ","alter_ column_for _query % "," quote_ extract_new_default_value _value "," extract_new_default_value  nil? "," quote_ column_for _name ","  column_for _for "," quote_ extract_new_default_value _expression "," extract_new_ extract_new_default_value _value "," change_ column_for _default_for_alter "," change_column_ extract_new_default_value _for_alter "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements change_column":{"type":"method","name":"change_column","children":[],"call":[" change_column_null ","options [] ","options key? "," change_column_default "," options_include_default? "," execute ","sql << "," type_to_sql "," quote_column_name ","sql_type << "," quote_table_name "," clear_cache! "," change_column_comment ","procs each ","sqls join ","v is_a? "," Array partition "," Array "," change_column_for_alter ","(str \"ALTER TABLE \") dup ","(str \"ALTER TABLE \") dup  << "," type_to_(str \"ALTER TABLE \") dup  "," type_to_sql  << ","(str \"ALTER TABLE \") dup _type << ","(str \"ALTER TABLE \") dup s join "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements add_column":{"type":"method","name":"add_column","children":[],"call":[" clear_cache! "," change_column_comment ","options [] ","options key? "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements rename_table":{"type":"method","name":"rename_table","children":[],"call":[" rename_table_indexes "," execute "," quote_table_name ","seq identifier == ","seq identifier "," pk_and_sequence_for "," clear_cache! ","seq quoted "," schema_cache clear_data_source_cache! ","new_name to_s "," schema_cache ","table_name to_s "," validate_table_length! ","options [] "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements primary_key":{"type":"method","name":"primary_key","children":[],"call":["row first "," exec_query rows first "," exec_query rows "," exec_query "," quote_table_name ","pks [] [] ","pks [] ","pks count == ","pks count "," exec_query rows first  first "," exec_query  exec_query rows first s first "," exec_query  exec_query rows first s "," exec_query rows  [] [] "," exec_query rows  [] "," exec_query rows  count == "," exec_query rows  count "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements pk_and_sequence_for":{"type":"method","name":"pk_and_sequence_for","children":[],"call":["PostgreSQL Name  new ","result last ","result shift "," query [] "," query "," quote_table_name ","result empty? ","result nil? "," quote "," query []  last "," query []  shift "," query []  empty? "," query []  nil? "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements reset_pk_sequence!":{"type":"method","name":"reset_pk_sequence!","children":[],"call":[" select_value "," quote_table_name "," quote_column_name ","@logger warn ","sequence ! "," pk_and_sequence_for "," postgresql_version >= "," postgresql_version ","max_pk nil? "," query_value "," quote "," database_version >= "," database_version "," select_value  nil? "," query_value  nil? "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements set_pk_sequence!":{"type":"method","name":"set_pk_sequence!","children":[],"call":["@logger warn "," select_value "," quote_table_name "," pk_and_sequence_for "," query_value "," quote "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements serial_sequence":{"type":"method","name":"serial_sequence","children":[],"call":["result rows first first ","result rows first ","result rows "," exec_query "," select_value "," query_value "," quote "," exec_query  rows first first "," exec_query  rows first "," exec_query  rows "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements default_sequence_name":{"type":"method","name":"default_sequence_name","children":[],"call":["PostgreSQL Name  new to_s ","PostgreSQL Name  new ","Utils  extract_schema_qualified_name to_s ","Utils  extract_schema_qualified_name "," serial_sequence "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements client_min_messages=":{"type":"method","name":"client_min_messages=","children":[],"call":[" execute "," internal_execute "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements client_min_messages":{"type":"method","name":"client_min_messages","children":[],"call":[" query [] [] "," query [] "," query "," select_value "," query_value "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements schema_search_path":{"type":"method","name":"schema_search_path","children":[],"call":[" query [] [] "," query [] "," query "," select_value "," query_value "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements schema_search_path=":{"type":"method","name":"schema_search_path=","children":[],"call":[" execute "," internal_execute "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements drop_schema":{"type":"method","name":"drop_schema","children":[],"call":[" execute "," quote_schema_name ","options [] "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements create_schema":{"type":"method","name":"create_schema","children":[],"call":[" execute "," quote_schema_name "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements schema_names":{"type":"method","name":"schema_names","children":[],"call":[" query flatten "," query "," select_values "," query_values "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements ctype":{"type":"method","name":"ctype","children":[],"call":[" query [] [] "," query [] "," query "," current_database "," select_value "," query_value "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements collation":{"type":"method","name":"collation","children":[],"call":[" query [] [] "," query [] "," query "," current_database "," select_value "," query_value "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements encoding":{"type":"method","name":"encoding","children":[],"call":[" query [] [] "," query [] "," query "," current_database "," select_value "," query_value "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements current_schema":{"type":"method","name":"current_schema","children":[],"call":[" query [] [] "," query [] "," query "," select_value "," query_value "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements current_database":{"type":"method","name":"current_database","children":[],"call":[" query [] [] "," query [] "," query "," select_value "," query_value "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements new_column":{"type":"method","name":"new_column","children":[],"call":["PostgreSQLColumn  new "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements columns":{"type":"method","name":"columns","children":[],"call":[" new_column ","notnull == "," extract_default_function "," extract_value_from_default "," get_oid_type ","fmod to_i ","oid to_i "," column_definitions map "," column_definitions ","comment presence ","notnull ! "," fetch_type_metadata ","table_name to_s "," max_identifier_length "," extract_ extract_default_function  "," get_ get_oid_type _type "," get_oid to_i _type ","fmod to_i  to_i "," get_oid_type  to_i ","oid to_i  to_i "," fetch_ fetch_type_metadata  ","table_name to_s  to_s "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements indexes":{"type":"method","name":"indexes","children":[],"call":["(send\n  (lvar :result) :map) compact ","IndexDefinition  new ","inddef scan flatten [] to_sym ","inddef scan flatten [] ","inddef scan flatten ","inddef scan ","Hash  [] ","desc_order_columns map ","desc_order_columns any? ","column_names empty? ","columns values_at compact ","columns values_at "," query ","indkey join ","row [] ","row [] split ","row [] == ","result map ","comment presence ","using to_sym ","expressions scan flatten map ","expressions scan flatten ","expressions scan ","Hash  [] values_at compact ","Hash  [] values_at ","(str \"                SELECT a.attnum, a.attname\\n\") strip_heredoc ","opclass > ","indkey include? ","row [] split map ","table schema ","table identifier ","Utils  extract_schema_qualified_name ","table_name to_s ","scope [] "," quoted_scope ","ActiveSupport Deprecation  warn ","              Passing name to #indexes is deprecated without replacement.\n squish ","orders []= ","(lvar :desc) compact join ","(lvar :desc) compact ","opclasses []= ","opclass to_sym ","expressions scan each ","nulls_not_distinct present? ","include_columns presence ","include_columns include? ","columns reject! "," column_names_from_column_numbers ","include split map ","include split ","(send\n  (lvar : query ) :map) compact ","row []  scan flatten [] to_sym ","row []  scan flatten [] ","row []  scan flatten ","row []  scan ","inddef scan flatten  map ","desc_order_Hash  []  map ","desc_order_Hash  [] values_at compact  map ","desc_order_ column_names_from_column_numbers  map ","inddef scan flatten  any? ","desc_order_Hash  []  any? ","desc_order_Hash  [] values_at compact  any? ","desc_order_ column_names_from_column_numbers  any? ","columns values_at compact  empty? ","Hash  []  values_at compact ","Hash  [] values_at compact  values_at compact "," column_names_from_column_numbers  values_at compact ","Hash  []  values_at ","Hash  [] values_at compact  values_at "," column_names_from_column_numbers  values_at ","row [] split  join ","row [] split map  join "," query  map ","row []  presence ","inddef scan flatten [] to_sym  to_sym ","row []  > ","row [] split  include? ","row [] split map  include? ","Utils  extract_schema_qualified_name  schema ","Utils  extract_schema_qualified_name  identifier ","Utils  extract_schema_qualified_name _name to_s "," quoted_scope  [] "," quoted_ quoted_scope  ","Hash  []  []= ","row [] es []= ","row []  to_sym ","include_Hash  []  presence ","include_Hash  [] values_at compact  presence ","include_ column_names_from_column_numbers  presence ","include split map  presence ","include_Hash  []  include? ","include_Hash  [] values_at compact  include? ","include_ column_names_from_column_numbers  include? ","include split map  include? ","Hash  []  reject! ","Hash  [] values_at compact  reject! "," column_names_from_column_numbers  reject! "," columns values_at compact _from_column_numbers "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements index_name_exists?":{"type":"method","name":"index_name_exists?","children":[],"call":[" exec_query rows first [] to_i > "," exec_query rows first [] to_i "," exec_query rows first [] "," exec_query rows first "," exec_query rows "," exec_query "," select_value to_i > "," select_value to_i "," select_value ","index schema ","table identifier ","index identifier ","Utils  extract_schema_qualified_name ","index_name to_s ","table_name to_s ","index [] ","table [] "," quoted_scope ","ActiveSupport Deprecation  warn ","              Passing default to #index_name_exists? is deprecated without replacement.\n squish ","default nil? "," query_value to_i > "," query_value to_i "," query_value ","Utils  extract_schema_qualified_name  schema "," quoted_scope  schema ","Utils  extract_schema_qualified_name  identifier "," quoted_scope  identifier ","Utils  extract_schema_qualified_name _name to_s "," quoted_scope _name to_s ","Utils  extract_schema_qualified_name  [] "," quoted_scope  [] ","              Passing default to #Utils  extract_schema_qualified_name _name_exists? is deprecated without replacement.\n squish ","              Passing default to # quoted_scope _name_exists? is deprecated without replacement.\n squish "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements schema_exists?":{"type":"method","name":"schema_exists?","children":[],"call":[" exec_query rows first [] to_i > "," exec_query rows first [] to_i "," exec_query rows first [] "," exec_query rows first "," exec_query rows "," exec_query "," select_value to_i > "," select_value to_i "," select_value "," quote "," query_value to_i > "," query_value to_i "," query_value "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements drop_table":{"type":"method","name":"drop_table","children":[],"call":[" execute ","options [] == ","options [] "," quote_table_name "," schema_cache clear_data_source_cache! ","table_name to_s "," schema_cache "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements table_exists?":{"type":"method","name":"table_exists?","children":[],"call":[" exec_query rows first [] to_i > "," exec_query rows first [] to_i "," exec_query rows first [] "," exec_query rows first "," exec_query rows "," exec_query ","name schema ","name identifier ","Utils  extract_schema_qualified_name ","name to_s "," data_source_exists? ","ActiveSupport Deprecation  warn ","(str \"            #table_exists? currently checks both tables and views.\\n\") squish "," select_values any? "," select_values "," quote ","Utils  extract_schema_qualified_name  schema ","Utils  extract_schema_qualified_name  identifier ","Utils  extract_schema_qualified_Utils  extract_schema_qualified_name  ","Utils  extract_schema_qualified_name  to_s "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements tables":{"type":"method","name":"tables","children":[],"call":["row [] "," query map "," query "," select_values ","ActiveSupport Deprecation  warn ","              Passing arguments to #tables is deprecated without replacement.\n squish "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements drop_database":{"type":"method","name":"drop_database","children":[],"call":[" execute "," quote_table_name "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements create_database":{"type":"method","name":"create_database","children":[],"call":[" execute "," quote_table_name ","options inject ","(pair\n  (sym :encoding)\n  (str \"utf8\")) merge! ","options symbolize_keys ","options sum ","memo << ","options each_with_object "," +@ ","(pair\n  (sym :encoding)\n  (str \"utf8\")) merge!  inject ","(pair\n  (sym :encoding)\n  (str \"utf8\")) merge!  symbolize_keys ","(pair\n  (sym :encoding)\n  (str \"utf8\")) merge!  sum ","(pair\n  (sym :encoding)\n  (str \"utf8\")) merge!  each_with_object "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements recreate_database":{"type":"method","name":"recreate_database","children":[],"call":[" create_database "," drop_database "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaCreation type_for_column":{"type":"method","name":"type_for_column","children":[],"call":["@conn lookup_cast_type ","column sql_type ","column array "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaCreation add_column_options!":{"type":"method","name":"add_column_options!","children":[],"call":["sql << ","options [] ","options [] =~ ","column type == ","column type ","options fetch ","options [] try "," raise ","options [] name "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaCreation visit_ColumnDefinition":{"type":"method","name":"visit_ColumnDefinition","children":[],"call":[" add_column_options! "," column_options ","sql << ","o type != ","o type ","o primary_key? ","o sql_type= "," type_to_sql ","o array ","o scale ","o precision ","o limit "]}," ActiveRecord ConnectionAdapters PostgreSQL TableDefinition create_column_definition":{"type":"method","name":"create_column_definition","children":[],"call":["PostgreSQL ColumnDefinition  new "]}," ActiveRecord ConnectionAdapters PostgreSQL TableDefinition new_column_definition":{"type":"method","name":"new_column_definition","children":[],"call":["column array= ","options [] "]}," ActiveRecord ConnectionAdapters PostgreSQL TableDefinition primary_key":{"type":"method","name":"primary_key","children":[],"call":[" column ","options []= ","options fetch ","type == "]}," ActiveRecord ConnectionAdapters PostgreSQL ColumnMethods money":{"type":"method","name":"money","children":[],"call":[" column ","args each "]}," ActiveRecord ConnectionAdapters PostgreSQL ColumnMethods bit_varying":{"type":"method","name":"bit_varying","children":[],"call":[" column ","args each "]}," ActiveRecord ConnectionAdapters PostgreSQL ColumnMethods bit":{"type":"method","name":"bit","children":[],"call":[" column ","args each "]}," ActiveRecord ConnectionAdapters PostgreSQL ColumnMethods point":{"type":"method","name":"point","children":[],"call":[" column ","args each "]}," ActiveRecord ConnectionAdapters PostgreSQL ColumnMethods citext":{"type":"method","name":"citext","children":[],"call":[" column ","args each "]}," ActiveRecord ConnectionAdapters PostgreSQL ColumnMethods jsonb":{"type":"method","name":"jsonb","children":[],"call":[" column ","args each "]}," ActiveRecord ConnectionAdapters PostgreSQL ColumnMethods json":{"type":"method","name":"json","children":[],"call":[" column ","args each "]}," ActiveRecord ConnectionAdapters PostgreSQL ColumnMethods uuid":{"type":"method","name":"uuid","children":[],"call":[" column ","args each "]}," ActiveRecord ConnectionAdapters PostgreSQL ColumnMethods macaddr":{"type":"method","name":"macaddr","children":[],"call":[" column ","args each "]}," ActiveRecord ConnectionAdapters PostgreSQL ColumnMethods cidr":{"type":"method","name":"cidr","children":[],"call":[" column ","args each "]}," ActiveRecord ConnectionAdapters PostgreSQL ColumnMethods inet":{"type":"method","name":"inet","children":[],"call":[" column ","args each "]}," ActiveRecord ConnectionAdapters PostgreSQL ColumnMethods ltree":{"type":"method","name":"ltree","children":[],"call":[" column ","args each "]}," ActiveRecord ConnectionAdapters PostgreSQL ColumnMethods hstore":{"type":"method","name":"hstore","children":[],"call":[" column ","args each "]}," ActiveRecord ConnectionAdapters PostgreSQL ColumnMethods daterange":{"type":"method","name":"daterange","children":[],"call":[" column ","args each "]}," ActiveRecord ConnectionAdapters PostgreSQL ColumnMethods numrange":{"type":"method","name":"numrange","children":[],"call":[" column ","args each "]}," ActiveRecord ConnectionAdapters PostgreSQL ColumnMethods tstzrange":{"type":"method","name":"tstzrange","children":[],"call":[" column ","args each "]}," ActiveRecord ConnectionAdapters PostgreSQL ColumnMethods tsrange":{"type":"method","name":"tsrange","children":[],"call":[" column ","args each "]}," ActiveRecord ConnectionAdapters PostgreSQL ColumnMethods int8range":{"type":"method","name":"int8range","children":[],"call":[" column ","args each "]}," ActiveRecord ConnectionAdapters PostgreSQL ColumnMethods int4range":{"type":"method","name":"int4range","children":[],"call":[" column ","args each "]}," ActiveRecord ConnectionAdapters PostgreSQL ColumnMethods tsvector":{"type":"method","name":"tsvector","children":[],"call":[" column ","args [] ","args extract_options! ","args each ","args extract_args extract_options! ! "]}," ActiveRecord ConnectionAdapters PostgreSQL ColumnMethods xml":{"type":"method","name":"xml","children":[],"call":[" column ","args [] ","args extract_options! ","args each ","args extract_args extract_options! ! "]}," ActiveRecord ConnectionAdapters PostgreSQL ReferentialIntegrity disable_referential_integrity":{"type":"method","name":"disable_referential_integrity","children":[],"call":[" execute ","(send\n  (send nil :tables) :collect) join "," quote_table_name "," tables collect "," tables "," supports_disable_referential_integrity? "," transaction "," raise "," warn ","original_exception try "," disable_referential_integrity_with_disable_trigger "," disable_referential_integrity_with_alter_constraint "," supports_alter_constraint? "]}," ActiveRecord ConnectionAdapters PostgreSQL ReferentialIntegrity supports_disable_referential_integrity?":{"type":"method","name":"supports_disable_referential_integrity?","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQL Quoting _type_cast":{"type":"method","name":"_type_cast","children":[],"call":["value to_s "," encode_array "," encode_range "]}," ActiveRecord ConnectionAdapters PostgreSQL Quoting _quote":{"type":"method","name":"_quote","children":[],"call":["value nan? ","value infinite? ","value hex? ","value binary? "," quote_string ","value to_s "," escape_bytea "," _quote "," encode_array "," encode_range ","value finite? "," check_int_in_range ","value is_a? ","ActiveRecord Base  raise_int_wider_than_64bit "]}," ActiveRecord ConnectionAdapters PostgreSQL Quoting quote_default_value":{"type":"method","name":"quote_default_value","children":[],"call":[" quote ","value =~ ","column type == ","column type "]}," ActiveRecord ConnectionAdapters PostgreSQL Quoting quoted_date":{"type":"method","name":"quoted_date","children":[],"call":["result sub + ","result sub "," format ","value year -@ + ","value year -@ ","value year ","value year <= "," sprintf ","value usec ","value respond_to? ","value acts_like? "," sub + "," sub ","result sub +  sub + ","result sub +  sub "]}," ActiveRecord ConnectionAdapters PostgreSQL Quoting quote_column_name":{"type":"method","name":"quote_column_name","children":[],"call":["PGconn  quote_ident ","name to_s ","@quoted_column_names [] ","PG Connection  quote_ident ","PG Connection  quote_ident freeze ","PGconn  quote_ident freeze "," class quoted_column_names [] "," class quoted_column_names "," class ","QUOTED_COLUMN_NAMES  [] "]}," ActiveRecord ConnectionAdapters PostgreSQL Quoting quote_table_name_for_assignment":{"type":"method","name":"quote_table_name_for_assignment","children":[],"call":[" quote_column_name "]}," ActiveRecord ConnectionAdapters PostgreSQL Quoting quote_table_name":{"type":"method","name":"quote_table_name","children":[],"call":["Utils  extract_schema_qualified_name quoted ","Utils  extract_schema_qualified_name ","name to_s ","@quoted_table_names [] ","Utils  extract_schema_qualified_name quoted freeze "," class quoted_table_names [] "," class quoted_table_names "," class ","QUOTED_TABLE_NAMES  [] "]}," ActiveRecord ConnectionAdapters PostgreSQL Quoting quote_string":{"type":"method","name":"quote_string","children":[],"call":["@connection escape ","PG Connection  escape ","connection escape "," with_raw_connection "]}," ActiveRecord ConnectionAdapters PostgreSQL Quoting unescape_bytea":{"type":"method","name":"unescape_bytea","children":[],"call":["@connection unescape_bytea "," valid_raw_connection unescape_bytea "," valid_raw_connection "]}," ActiveRecord ConnectionAdapters PostgreSQL Quoting escape_bytea":{"type":"method","name":"escape_bytea","children":[],"call":["@connection escape_bytea "," valid_raw_connection escape_bytea "," valid_raw_connection "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Xml Data to_s":{"type":"method","name":"to_s","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQL OID Xml Data initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQL OID Xml type_cast_for_database":{"type":"method","name":"type_cast_for_database","children":[],"call":["Data  new "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Xml type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQL OID Vector type_cast":{"type":"method","name":"type_cast","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQL OID Vector initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQL OID Uuid type_cast":{"type":"method","name":"type_cast","children":[],"call":["value to_s [] ","value to_s "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Uuid type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQL OID TypeMapInitializer assert_valid_registration":{"type":"method","name":"assert_valid_registration","children":[],"call":["oid to_i "," raise ","oid_type nil? "]}," ActiveRecord ConnectionAdapters PostgreSQL OID TypeMapInitializer register_with_subtype":{"type":"method","name":"register_with_subtype","children":[],"call":["@store lookup "," register ","@store key? "]}," ActiveRecord ConnectionAdapters PostgreSQL OID TypeMapInitializer alias_type":{"type":"method","name":"alias_type","children":[],"call":["@store alias_type "," assert_valid_registration "]}," ActiveRecord ConnectionAdapters PostgreSQL OID TypeMapInitializer register":{"type":"method","name":"register","children":[],"call":["@store register_type "," block_given? "," assert_valid_registration "]}," ActiveRecord ConnectionAdapters PostgreSQL OID TypeMapInitializer register_composite_type":{"type":"method","name":"register_composite_type","children":[],"call":[" register ","OID Vector  new ","row [] ","@store lookup ","row [] to_i "]}," ActiveRecord ConnectionAdapters PostgreSQL OID TypeMapInitializer register_domain_type":{"type":"method","name":"register_domain_type","children":[],"call":[" warn ","row [] "," register ","@store lookup ","row [] to_i "]}," ActiveRecord ConnectionAdapters PostgreSQL OID TypeMapInitializer register_range_type":{"type":"method","name":"register_range_type","children":[],"call":["OID Range  new ","row [] to_sym ","row [] "," register_with_subtype ","row [] to_i "," register ","@store lookup "," register_with_@store lookup  "]}," ActiveRecord ConnectionAdapters PostgreSQL OID TypeMapInitializer register_array_type":{"type":"method","name":"register_array_type","children":[],"call":["OID Array  new ","row [] "," register_with_subtype ","row [] to_i "," register ","@store lookup "," register_with_@store lookup  "]}," ActiveRecord ConnectionAdapters PostgreSQL OID TypeMapInitializer register_enum_type":{"type":"method","name":"register_enum_type","children":[],"call":[" register ","OID Enum  new ","row [] "]}," ActiveRecord ConnectionAdapters PostgreSQL OID TypeMapInitializer register_mapped_type":{"type":"method","name":"register_mapped_type","children":[],"call":[" alias_type ","row [] "]}," ActiveRecord ConnectionAdapters PostgreSQL OID TypeMapInitializer run":{"type":"method","name":"run","children":[],"call":[" register_composite_type ","composites each "," register_range_type ","ranges each "," register_array_type ","arrays each "," register_domain_type ","domains each "," register_enum_type ","enums each "," register_mapped_type ","mapped each ","row [] != ","row [] ","nodes partition ","row [] == ","@store key? ","row [] to_i ","records reject ","row [] to_i != ","array_in freeze ","d freeze ","e freeze ","r freeze ","nodes extract! "]}," ActiveRecord ConnectionAdapters PostgreSQL OID TypeMapInitializer initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQL OID SpecializedString initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQL OID Range infinity?":{"type":"method","name":"infinity?","children":[],"call":["value infinite? ","value respond_to? "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Range extract_bounds":{"type":"method","name":"extract_bounds","children":[],"call":["value [] == ","value [] ","@subtype infinity ","to == ","from == ","value [] split "," infinity ","value end_with? ","value start_with? "," unquote "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Range type_cast_single_for_database":{"type":"method","name":"type_cast_single_for_database","children":[],"call":["@subtype type_cast_for_database "," infinity? ","@subtype serialize ","@subtype cast "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Range type_cast_single":{"type":"method","name":"type_cast_single","children":[],"call":["@subtype type_cast_from_database "," infinity? ","@subtype deserialize "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Range type_cast_for_database":{"type":"method","name":"type_cast_for_database","children":[],"call":["value exclude_end? "," type_cast_single_for_database ","value end ","value begin ","value is_a? "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Range cast_value":{"type":"method","name":"cast_value","children":[],"call":[" Range  new ","extracted [] "," raise ","ActiveSupport Deprecation  warn ","(str \"                  Excluding the beginning of a Range is only partialy supported\\n\") squish ","from succ ","from respond_to? "," infinity? ! "," infinity? "," type_cast_single "," extract_bounds ","value is_a? ","value == "," sanitize_bounds ","(str \"empty\") include? "," extract_bounds  [] ","from succ  succ "," type_cast_single  succ ","from succ  respond_to? "," type_cast_single  respond_to? ","from respond_ type_cast_single ? "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Range type_cast_for_schema":{"type":"method","name":"type_cast_for_schema","children":[],"call":["value inspect gsub ","value inspect "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Range initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQL OID Point number_for_point":{"type":"method","name":"number_for_point","children":[],"call":["number to_s gsub ","number to_s ","number to_s delete_suffix "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Point type_cast_for_database":{"type":"method","name":"type_cast_for_database","children":[],"call":[" number_for_point ","value [] ","value is_a? "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Point type_cast":{"type":"method","name":"type_cast","children":[],"call":[" Float ","value map "," type_cast ","value split ","value [] ","value [] == ","value []  map ","value []  split ","value []  [] ","value []  [] == "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Point type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQL OID Money cast_value":{"type":"method","name":"cast_value","children":[],"call":["value gsub! sub! ","value gsub! ","value sub! "," String  === ","value sub ","value sub  gsub! sub! ","value sub  gsub! ","value sub  sub! ","value sub  sub "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Money scale":{"type":"method","name":"scale","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQL OID Money type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQL OID Jsonb changed_in_place?":{"type":"method","name":"changed_in_place?","children":[],"call":[" type_cast_for_database "," type_cast_from_database "," serialize "," deserialize "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Jsonb type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQL OID Json accessor":{"type":"method","name":"accessor","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQL OID Json type_cast_for_database":{"type":"method","name":"type_cast_for_database","children":[],"call":[" ActiveSupport JSON  encode ","value is_a? "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Json type_cast_from_database":{"type":"method","name":"type_cast_from_database","children":[],"call":[" ActiveSupport JSON  decode ","value is_a? "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Json type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQL OID Infinity infinity":{"type":"method","name":"infinity","children":[],"call":[" Float INFINITY  -@ ","options [] "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Inet type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQL OID Hstore escape_hstore":{"type":"method","name":"escape_hstore","children":[],"call":["\"%s\" % ","value to_s gsub ","value to_s ","value == ","value nil? "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Hstore accessor":{"type":"method","name":"accessor","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQL OID Hstore type_cast_for_database":{"type":"method","name":"type_cast_for_database","children":[],"call":["(send\n  (lvar :value) :map) join "," escape_hstore ","value map ","value is_a? "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Hstore type_cast_from_database":{"type":"method","name":"type_cast_from_database","children":[],"call":[" Hash  [] ","k gsub gsub ","k gsub ","v gsub gsub ","v gsub ","v upcase == ","v upcase ","value scan map ","value scan ","value is_a? ","k gsub gsub  gsub gsub ","k gsub gsub  gsub ","v gsub gsub  gsub gsub ","v gsub gsub  gsub ","v gsub gsub  upcase == ","v gsub gsub  upcase ","v gsub gsub alue scan map ","v gsub gsub alue scan ","v gsub gsub alue is_a? "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Hstore type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQL OID Float cast_value":{"type":"method","name":"cast_value","children":[],"call":["value to_f "," Float INFINITY  -@ "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Enum type_cast":{"type":"method","name":"type_cast","children":[],"call":["value to_s "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Enum type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQL OID Decimal infinity":{"type":"method","name":"infinity","children":[],"call":["BigDecimal  new * ","options [] ","BigDecimal  new "," BigDecimal * "," BigDecimal "]}," ActiveRecord ConnectionAdapters PostgreSQL OID DateTime cast_value":{"type":"method","name":"cast_value","children":[],"call":["value sub sub ","value sub "," format ","value [] to_i -@ + ","value [] to_i -@ ","value [] to_i ","value [] "," Float INFINITY  -@ ","value is_a? ","value delete_suffix! ","year to_i -@ + ","year to_i -@ ","year to_i "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Cidr cast_value":{"type":"method","name":"cast_value","children":[],"call":["IPAddr  new ","String  === ","value nil? "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Cidr type_cast_for_database":{"type":"method","name":"type_cast_for_database","children":[],"call":["value instance_variable_get to_s count ","value instance_variable_get to_s ","value instance_variable_get ","IPAddr  === ","value to_s "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Cidr type_cast_for_schema":{"type":"method","name":"type_cast_for_schema","children":[],"call":["subnet_mask to_s count ","subnet_mask to_s ","subnet_mask == ","2 ** - ","2 ** ","value instance_variable_get ","value to_s ","value prefix ","value prefix == ","value instance_variable_get  to_s count ","value instance_variable_get  to_s ","value instance_variable_get  == "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Cidr type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQL OID Bytea type_cast_from_database":{"type":"method","name":"type_cast_from_database","children":[],"call":["PGconn  unescape_bytea ","value nil? ","value to_s ","value is_a? "]}," ActiveRecord ConnectionAdapters PostgreSQL OID BitVarying type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQL OID Bit Data hex?":{"type":"method","name":"hex?","children":[],"call":["(str \"\\\\A[0-9A-F]*\\\\Z\") === "," value ","(str \"\\\\A[0-9A-F]*\\\\Z\") match? "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Bit Data binary?":{"type":"method","name":"binary?","children":[],"call":["(str \"\\\\A[01]*\\\\Z\") === "," value ","(str \"\\\\A[01]*\\\\Z\") match? "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Bit Data to_s":{"type":"method","name":"to_s","children":[],"call":[" value "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Bit Data initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQL OID Bit type_cast_for_database":{"type":"method","name":"type_cast_for_database","children":[],"call":["Data  new "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Bit type_cast":{"type":"method","name":"type_cast","children":[],"call":["value [] hex to_s ","value [] hex ","value [] "," String  === "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Bit type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQL OID Array string_requires_quoting?":{"type":"method","name":"string_requires_quoting?","children":[],"call":["string include? "," delimiter ","string =~ ","string == ","string empty? "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Array quote_and_escape":{"type":"method","name":"quote_and_escape","children":[],"call":["value gsub! ","value gsub "," string_requires_quoting? "," subtype type_cast_for_schema "," subtype ","value gsub  gsub! ","value gsub  gsub "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Array cast_value_for_database":{"type":"method","name":"cast_value_for_database","children":[],"call":[" quote_and_escape "," subtype type_cast_for_database "," subtype ","casted_values join "," delimiter "," cast_value_for_database ","value map ","value is_a? "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Array type_cast_array":{"type":"method","name":"type_cast_array","children":[],"call":["@subtype public_send "," type_cast_array ","value map ","value is_a? "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Array type_cast_for_database":{"type":"method","name":"type_cast_for_database","children":[],"call":[" cast_value_for_database ","value is_a? "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Array type_cast_from_user":{"type":"method","name":"type_cast_from_user","children":[],"call":[" type_cast_array "," parse_pg_array ","value is_a? "," parse_pg_array  is_a? "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Array type_cast_from_database":{"type":"method","name":"type_cast_from_database","children":[],"call":[" type_cast_array "," parse_pg_array ","value is_a? "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Array initialize":{"type":"method","name":"initialize","children":[],"call":["PG TextDecoder Array  new "," type ","PG TextEncoder Array  new "]}," ActiveRecord ConnectionAdapters PostgreSQL DatabaseStatements rollback_db_transaction":{"type":"method","name":"rollback_db_transaction","children":[],"call":[" execute "]}," ActiveRecord ConnectionAdapters PostgreSQL DatabaseStatements commit_db_transaction":{"type":"method","name":"commit_db_transaction","children":[],"call":[" execute "," internal_execute "]}," ActiveRecord ConnectionAdapters PostgreSQL DatabaseStatements begin_isolated_db_transaction":{"type":"method","name":"begin_isolated_db_transaction","children":[],"call":[" execute "," transaction_isolation_levels fetch "," transaction_isolation_levels "," begin_db_transaction "," internal_execute "]}," ActiveRecord ConnectionAdapters PostgreSQL DatabaseStatements begin_db_transaction":{"type":"method","name":"begin_db_transaction","children":[],"call":[" execute "," internal_execute "]}," ActiveRecord ConnectionAdapters PostgreSQL DatabaseStatements update_sql":{"type":"method","name":"update_sql","children":[],"call":[" cmd_tuples "]}," ActiveRecord ConnectionAdapters PostgreSQL DatabaseStatements exec_insert":{"type":"method","name":"exec_insert","children":[],"call":[" last_insert_id_result "," default_sequence_name "," extract_table_ref_from_insert_sql "," use_insert_returning? ! "," use_insert_returning? "," exec_query "," suppress_composite_primary_key "," primary_key ","pk nil? ","pk == "," internal_exec_query "," last_insert_id_ exec_query  "," last_insert_id_ internal_exec_query  "," default_ default_sequence_name  "," extract_ extract_table_ref_from_insert_sql _from_insert_sql "," suppress_composite_primary_key  nil? "," primary_key  nil? "," suppress_composite_primary_key  == "," primary_key  == "]}," ActiveRecord ConnectionAdapters PostgreSQL DatabaseStatements sql_for_insert":{"type":"method","name":"sql_for_insert","children":[],"call":[" quote_column_name "," use_insert_returning? "," primary_key "," extract_table_ref_from_insert_sql ","pk nil? "," suppress_composite_primary_key ","returning_columns any? ","(send\n  (lvar :returning_columns) :map) join ","returning_columns map "," Array "," extract_ extract_table_ref_from_insert_sql _from_insert_sql "," primary_key  nil? "," suppress_composite_primary_key  nil? "]}," ActiveRecord ConnectionAdapters PostgreSQL DatabaseStatements exec_delete":{"type":"method","name":"exec_delete","children":[],"call":["result cmd_tuples "," execute_and_clear "]}," ActiveRecord ConnectionAdapters PostgreSQL DatabaseStatements exec_query":{"type":"method","name":"exec_query","children":[],"call":["ActiveRecord Result  new ","result values ","types []= "," get_oid_type ","result fmod ","result ftype ","fields each_with_index ","result fields "," execute_and_clear "," build_result "," get_oid_type s []= "," get_oid_ get_oid_type  ","result result fmod  ","result result ftype  ","result f get_oid_type  ","result fields  each_with_index ","result result fields  "]}," ActiveRecord ConnectionAdapters PostgreSQL DatabaseStatements execute":{"type":"method","name":"execute","children":[],"call":["@connection async_exec "," log ","ActiveSupport Dependencies  interlock permit_concurrent_loads ","ActiveSupport Dependencies  interlock "," materialize_transactions "," raise "," write_query? "," preventing_writes? "," mark_transaction_written_if_write "," check_if_write_query "," transform_query "]}," ActiveRecord ConnectionAdapters PostgreSQL DatabaseStatements query":{"type":"method","name":"query","children":[],"call":[" result_as_array ","@connection async_exec "," log ","ActiveSupport Dependencies  interlock permit_concurrent_loads ","ActiveSupport Dependencies  interlock "," materialize_transactions ","@connection async_exec map_types! values ","@connection async_exec map_types! "," mark_transaction_written_if_write ","conn async_exec map_types! values ","conn async_exec map_types! ","conn async_exec "," with_raw_connection "]}," ActiveRecord ConnectionAdapters PostgreSQL DatabaseStatements result_as_array":{"type":"method","name":"result_as_array","children":[],"call":["data gsub! sub! ","data gsub! ","row [] ","monies each ","row []= "," unescape_bytea ","binaries each ","rows each ","typehash [] ","ftypes group_by ","x == ","ftypes any? ","res values ","res ftype ","Array  new ","res nfields ","row []  gsub! sub! ","row []  gsub! ","res values  each "]}," ActiveRecord ConnectionAdapters PostgreSQL DatabaseStatements create":{"type":"method","name":"create","children":[],"call":[" insert "]}," ActiveRecord ConnectionAdapters PostgreSQL DatabaseStatements insert_sql":{"type":"method","name":"insert_sql","children":[],"call":[" last_insert_id_value "," default_sequence_name "," select_value "," quote_column_name "," use_insert_returning? "," primary_key "," extract_table_ref_from_insert_sql "," extract_ extract_table_ref_from_insert_sql _from_insert_sql "]}," ActiveRecord ConnectionAdapters PostgreSQL DatabaseStatements select_rows":{"type":"method","name":"select_rows","children":[],"call":["result values "," execute_and_clear "," select_result "]}," ActiveRecord ConnectionAdapters PostgreSQL DatabaseStatements select_values":{"type":"method","name":"select_values","children":[],"call":["result column_values ","result nfields > ","result nfields "," execute_and_clear "," to_sql "," binds_from_relation "," select_result "," to_ to_sql  "]}," ActiveRecord ConnectionAdapters PostgreSQL DatabaseStatements select_value":{"type":"method","name":"select_value","children":[],"call":["result getvalue ","result nfields > ","result nfields ","result ntuples > ","result ntuples "," execute_and_clear "," to_sql "," binds_from_relation "," select_result "," to_ to_sql  "]}," ActiveRecord ConnectionAdapters PostgreSQL DatabaseStatements ExplainPrettyPrinter pp":{"type":"method","name":"pp","children":[],"call":["pp join + ","pp join ","pp << ","nrows == ","result rows length ","result rows ","lines map ","- * ","header center rstrip ","header center ","(lvar :header) map max + ","(lvar :header) map max ","(lvar :header) map ","result rows map ","result columns first ","result columns ","result rows length  == ","result rows map  map ","result columns first  center rstrip ","result columns first  center ","(lvar :result columns first ) map max + ","(lvar :result columns first ) map max ","(lvar :result columns first ) map "]}," ActiveRecord ConnectionAdapters PostgreSQL DatabaseStatements explain":{"type":"method","name":"explain","children":[],"call":["ExplainPrettyPrinter  new pp "," exec_query ","ExplainPrettyPrinter  new "," to_sql ","PostgreSQL ExplainPrettyPrinter  new pp ","PostgreSQL ExplainPrettyPrinter  new "," internal_exec_query "," build_explain_clause + + "," build_explain_clause + "," build_explain_clause "," to_ build_explain_clause + +  "]}," ActiveRecord ConnectionAdapters PostgreSQL ArrayParser add_item_to_array":{"type":"method","name":"add_item_to_array","children":[],"call":["array push ","current_item == ","quoted ! ","current_item length == ","current_item length "]}," ActiveRecord ConnectionAdapters PostgreSQL ArrayParser parse_array_contents":{"type":"method","name":"parse_array_contents","children":[],"call":["current_item << "," add_item_to_array ","array push "," parse_array_contents ","local_index + ","string [] "]}," ActiveRecord ConnectionAdapters PostgreSQL ArrayParser parse_pg_array":{"type":"method","name":"parse_pg_array","children":[],"call":[" parse_array_contents ","local_index + ","string [] ","local_index < ","string length "]}," ActiveRecord ConnectionAdapters MysqlAdapter initialize_type_map":{"type":"method","name":"initialize_type_map","children":[],"call":["m register_type ","Fields Time  new ","Fields DateTime  new "," extract_precision "," extract_ extract_precision  "]}," ActiveRecord ConnectionAdapters MysqlAdapter Fields Time cast_value":{"type":"method","name":"cast_value","children":[],"call":[" new_time ","value second_part ","value second ","value minute ","value hour ","Mysql Time  === "]}," ActiveRecord ConnectionAdapters MysqlAdapter Fields DateTime cast_value":{"type":"method","name":"cast_value","children":[],"call":[" new_time ","value second_part ","value second ","value minute ","value hour ","value day ","value month ","value year ","Mysql Time  === "]}," ActiveRecord ConnectionAdapters Mysql2Adapter quoted_date":{"type":"method","name":"quoted_date","children":[],"call":[" sprintf ","value usec ","value respond_to? ","value acts_like? "," supports_datetime_with_precision? "]}," ActiveRecord ConnectionAdapters Column attributes_for_hash":{"type":"method","name":"attributes_for_hash","children":[],"call":[" default_function "," null "," sql_type "," cast_type "," default "," name "," class "," collation "," table_name "," sql_type_metadata "]}," ActiveRecord ConnectionAdapters Column hash":{"type":"method","name":"hash","children":[],"call":[" attributes_for_hash hash "," attributes_for_hash ","Column  hash ^ ^ ^ ^ ^ ^ ^ "," comment hash "," comment ","Column  hash ^ ^ ^ ^ ^ ^ "," collation hash "," collation ","Column  hash ^ ^ ^ ^ ^ "," default_function hash "," default_function ","Column  hash ^ ^ ^ ^ "," null hash "," null ","Column  hash ^ ^ ^ "," sql_type_metadata hash "," sql_type_metadata ","Column  hash ^ ^ "," default hash "," default ","Column  hash ^ "," name hash "," name ","Column  hash ","Column  hash ^ ^ ^ ^ ^ ^ ^ ^ "," name encoding hash "," name encoding "]}," ActiveRecord ConnectionAdapters Column ==":{"type":"method","name":"==","children":[],"call":["other default_function == "," default_function ","other default_function ","other null == "," null ","other null ","other sql_type == "," sql_type ","other sql_type ","other cast_type == "," cast_type ","other cast_type ","other default == "," default ","other default ","other name == "," name ","other name "," attributes_for_hash == ","other attributes_for_hash "," attributes_for_hash ","other is_a? "," comment == ","other comment "," comment "," collation == ","other collation "," collation "," default_function == "," null == "," sql_type_metadata == ","other sql_type_metadata "," sql_type_metadata "," default == "," name == "]}," ActiveRecord ConnectionAdapters Column with_type":{"type":"method","name":"with_type","children":[],"call":["clone instance_variable_set "," dup tap "," dup "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter MysqlString cast_value":{"type":"method","name":"cast_value","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter MysqlString type_cast_for_database":{"type":"method","name":"type_cast_for_database","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter extract_foreign_key_action":{"type":"method","name":"extract_foreign_key_action","children":[],"call":["structure =~ "," quote_column_name "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter register_integer_type":{"type":"method","name":"register_integer_type","children":[],"call":["Type Integer  new ","Type UnsignedInteger  new ","mapping register_type ","(str \"\\\\bunsigned\\\\z\") === ","(str \"\\\\bunsigned\\\\b\") === ","(str \"\\\\bunsigned\\\\b\") match? "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter initialize_type_map":{"type":"method","name":"initialize_type_map","children":[],"call":["MysqlString  new ","(send\n  (send\n    (send\n      (lvar :sql_type) :[]\n      (regexp\n        (str \"^enum\\\\((.+)\\\\)\")\n        (regopt :i))\n      (int 1)) :split\n    (str \",\")) :map) max ","enum strip length - ","enum strip length ","enum strip ","sql_type [] split map ","sql_type [] split ","sql_type [] ","m register_type ","m alias_type "," emulate_booleans "," register_integer_type ","Type Float  new ","Type Binary  new ","2 ** - ","2 ** ","Type Text  new "," register_class_with_limit ","Type Integer  new ","Type String  new ","MysqlDateTime  new "," extract_precision ","(send\n  (send\n    (send\n      (lvar :sql_type) :[]\n      (regexp\n        (str \"^set\\\\((.+)\\\\)\")\n        (regopt :i))\n      (int 1)) :split\n    (str \",\")) :map) sum - ","(send\n  (send\n    (send\n      (lvar :sql_type) :[]\n      (regexp\n        (str \"^set\\\\((.+)\\\\)\")\n        (regopt :i))\n      (int 1)) :split\n    (str \",\")) :map) sum ","set strip length - ","set strip length ","set strip ","Type Boolean  new ","MysqlJson  new ","(send\n  (send\n    (send\n      (lvar :sql_type) :[]\n      (regexp\n        (str \"^set\\\\s*\\\\((.+)\\\\)\")\n        (regopt :i))\n      (int 1)) :split\n    (str \",\")) :map) sum - ","(send\n  (send\n    (send\n      (lvar :sql_type) :[]\n      (regexp\n        (str \"^set\\\\s*\\\\((.+)\\\\)\")\n        (regopt :i))\n      (int 1)) :split\n    (str \",\")) :map) sum ","(send\n  (send\n    (send\n      (lvar :sql_type) :[]\n      (regexp\n        (str \"^enum\\\\s*\\\\((.+)\\\\)\")\n        (regopt :i))\n      (int 1)) :split\n    (str \",\")) :map) max ","Type  lookup "," extract_limit "," register_class_with_(send\n  (send\n    (send\n      (lvar :sql_type) :[]\n      (regexp\n        (str \"^enum\\((.+)\\)\")\n        (regopt :i))\n      (int 1)) :split\n    (str \",\")) :map) max  "," register_class_with_(send\n  (send\n    (send\n      (lvar :sql_type) :[]\n      (regexp\n        (str \"^set\\((.+)\\)\")\n        (regopt :i))\n      (int 1)) :split\n    (str \",\")) :map) sum -  "," register_class_with_(send\n  (send\n    (send\n      (lvar :sql_type) :[]\n      (regexp\n        (str \"^set\\s*\\((.+)\\)\")\n        (regopt :i))\n      (int 1)) :split\n    (str \",\")) :map) sum -  "," register_class_with_(send\n  (send\n    (send\n      (lvar :sql_type) :[]\n      (regexp\n        (str \"^enum\\s*\\((.+)\\)\")\n        (regopt :i))\n      (int 1)) :split\n    (str \",\")) :map) max  "," register_class_with_ extract_limit  "," extract_ extract_precision  "," extract_(send\n  (send\n    (send\n      (lvar :sql_type) :[]\n      (regexp\n        (str \"^enum\\((.+)\\)\")\n        (regopt :i))\n      (int 1)) :split\n    (str \",\")) :map) max  "," extract_(send\n  (send\n    (send\n      (lvar :sql_type) :[]\n      (regexp\n        (str \"^set\\((.+)\\)\")\n        (regopt :i))\n      (int 1)) :split\n    (str \",\")) :map) sum -  "," extract_(send\n  (send\n    (send\n      (lvar :sql_type) :[]\n      (regexp\n        (str \"^set\\s*\\((.+)\\)\")\n        (regopt :i))\n      (int 1)) :split\n    (str \",\")) :map) sum -  "," extract_(send\n  (send\n    (send\n      (lvar :sql_type) :[]\n      (regexp\n        (str \"^enum\\s*\\((.+)\\)\")\n        (regopt :i))\n      (int 1)) :split\n    (str \",\")) :map) max  "," extract_ extract_limit  "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter case_sensitive_comparison":{"type":"method","name":"case_sensitive_comparison","children":[],"call":["table [] eq ","table [] ","column case_sensitive? ","Arel Nodes Bin  new ","Arel Nodes BindParam  new ","column case_sensitive? ! ","column collation ","value nil? ! ","value nil? ","attribute eq "," column_for_attribute "," column_for_attribute  case_sensitive? "," column_for_attribute  case_sensitive? ! "," column_for_attribute  collation ","  column_for_attribute _for_attribute "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter foreign_keys":{"type":"method","name":"foreign_keys","children":[],"call":["ForeignKeyDefinition  new ","row [] ","options []= "," extract_foreign_key_action ","fk_info map "," select_one [] "," select_one "," quote_table_name "," select_all ","(str \"          SELECT fk.referenced_table_name as 'to_table'\\n\") strip_heredoc ","@config [] "," create_table_info "," quote "," extract_schema_qualified_name "," raise ","table_name present? ","(str \"          SELECT fk.referenced_table_name AS 'to_table',\\n\") strip_heredoc ","scope [] "," quoted_scope "," exec_query "," unquote_identifier ","group map ","group one? ","group first ","grouped_fk map ","group sort_by! ","(send\n  (lvar :fk_info) :group_by) values each ","(send\n  (lvar :fk_info) :group_by) values ","fk_info group_by "," internal_exec_query ","group first  [] "," select_all  map "," exec_query  map "," internal_exec_query  map ","  select_one []  ","  create_table_info  "," quoted_scope  [] "," quoted_ quoted_scope  ","(send\n  (lvar : select_all ) :group_by) values each ","(send\n  (lvar : exec_query ) :group_by) values each ","(send\n  (lvar : internal_exec_query ) :group_by) values each ","(send\n  (lvar : select_all ) :group_by) values ","(send\n  (lvar : exec_query ) :group_by) values ","(send\n  (lvar : internal_exec_query ) :group_by) values "," select_all  group_by "," exec_query  group_by "," internal_exec_query  group_by "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter truncate":{"type":"method","name":"truncate","children":[],"call":[" execute "," quote_table_name "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter clear_cache!":{"type":"method","name":"clear_cache!","children":[],"call":[" reload_type_map ","@statements clear "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter unquoted_false":{"type":"method","name":"unquoted_false","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter unquoted_true":{"type":"method","name":"unquoted_true","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter _quote":{"type":"method","name":"_quote","children":[],"call":["value hex ","value is_a? "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter supports_foreign_keys?":{"type":"method","name":"supports_foreign_keys?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter supports_indexes_in_create?":{"type":"method","name":"supports_indexes_in_create?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter Column attributes_for_hash":{"type":"method","name":"attributes_for_hash","children":[],"call":[" + "," extra "," strict "," collation "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter Column assert_valid_default":{"type":"method","name":"assert_valid_default","children":[],"call":[" raise ","default inspect "," type ","default present? "," blob_or_text_column? "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter Column ==":{"type":"method","name":"==","children":[],"call":[" extra == ","other extra "," extra "," strict == ","other strict "," strict "," collation == ","other collation "," collation "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter SchemaCreation index_in_create":{"type":"method","name":"index_in_create","children":[],"call":[" quote_column_name ","@conn add_index_options "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter SchemaCreation visit_TableDefinition":{"type":"method","name":"visit_TableDefinition","children":[],"call":["create_sql << ","@conn to_sql ","o as ","o options ","statements join ","statements present? ","statements concat "," index_in_create ","o indexes map ","o indexes "," accept ","o columns map ","o columns "," quote_table_name ","o temporary ","o name "," quote_table_o name  ","o o name  "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter SchemaCreation visit_DropForeignKey":{"type":"method","name":"visit_DropForeignKey","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter column_for":{"type":"method","name":"column_for","children":[],"call":[" raise ","c name == ","c name "," columns detect "," columns ","column_name to_s ","column_name to_s  to_s "]}," ActiveRecord ConnectionAdapters AbstractAdapter extract_limit":{"type":"method","name":"extract_limit","children":[],"call":["1 to_i ","sql_type =~ "]}," ActiveRecord ConnectionAdapters AbstractAdapter extract_precision":{"type":"method","name":"extract_precision","children":[],"call":["1 to_i ","sql_type =~ "]}," ActiveRecord ConnectionAdapters AbstractAdapter extract_scale":{"type":"method","name":"extract_scale","children":[],"call":["3 to_i "]}," ActiveRecord ConnectionAdapters AbstractAdapter register_class_with_limit":{"type":"method","name":"register_class_with_limit","children":[],"call":["klass new "," extract_limit ","args last ","mapping register_type "," extract_ extract_limit  "]}," ActiveRecord ConnectionAdapters AbstractAdapter reload_type_map":{"type":"method","name":"reload_type_map","children":[],"call":[" initialize_type_map "," type_map "," type_map clear "]}," ActiveRecord ConnectionAdapters AbstractAdapter initialize_type_map":{"type":"method","name":"initialize_type_map","children":[],"call":["Type Decimal  new ","Type DecimalWithoutScale  new ","scale == "," extract_precision "," extract_scale ","m register_type ","m alias_type "," register_class_with_limit "," register_class_with_precision ","Type Json  new "," extract_scale  == "," extract_ extract_precision  "," extract_ extract_scale  "," register_class_with_ extract_precision  "]}," ActiveRecord ConnectionAdapters AbstractAdapter column_name_for_operation":{"type":"method","name":"column_name_for_operation","children":[],"call":["node to_sql "," visitor accept value "," visitor accept "," collector "," visitor "," column_name_from_arel_node "," visitor compile "]}," ActiveRecord ConnectionAdapters AbstractAdapter lookup_cast_type":{"type":"method","name":"lookup_cast_type","children":[],"call":[" type_map lookup "," type_map "]}," ActiveRecord ConnectionAdapters AbstractAdapter new_column":{"type":"method","name":"new_column","children":[],"call":["Column  new "]}," ActiveRecord ConnectionAdapters AbstractAdapter type_map":{"type":"method","name":"type_map","children":[],"call":[" initialize_type_map ","Type TypeMap  new tap ","Type TypeMap  new "," class "," class extended_type_map "," class EXTENDED_TYPE_MAPS  compute_if_absent "," extended_type_map_key "," extended_type_map_ extended_type_map_key  "]}," ActiveRecord ConnectionAdapters AbstractAdapter case_sensitive_comparison":{"type":"method","name":"case_sensitive_comparison","children":[],"call":["table_attr eq "," case_sensitive_modifier ","value nil? ","table [] ","table [] eq ","Arel Nodes BindParam  new ","attribute eq ","table []  eq "," case_sensitive_modifier  nil? "]}," ActiveRecord ConnectionAdapters AbstractAdapter supports_views?":{"type":"method","name":"supports_views?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter supports_foreign_keys?":{"type":"method","name":"supports_foreign_keys?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter supports_indexes_in_create?":{"type":"method","name":"supports_indexes_in_create?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter collector":{"type":"method","name":"collector","children":[],"call":["BindCollector  new ","SQLString  new "," prepared_statements ","Arel Collectors SubstituteBinds  new ","Arel Collectors SQLString  new ","Arel Collectors Composite  new ","Arel Collectors Bind  new "]}," ActiveRecord ConnectionAdapters AbstractAdapter SQLString compile":{"type":"method","name":"compile","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter BindCollector compile":{"type":"method","name":"compile","children":[],"call":["conn quote ","bv reverse ","bvs map ","casted_binds map ","conn prepare_binds_for_database ","conn prepare_binds_for_database  map ","bvs map  map "]}," ActiveRecord ConnectionAdapters TransactionManager current_transaction":{"type":"method","name":"current_transaction","children":[],"call":["@stack last "]}," ActiveRecord ConnectionAdapters TransactionManager open_transactions":{"type":"method","name":"open_transactions","children":[],"call":["@stack size "]}," ActiveRecord ConnectionAdapters TransactionManager within_new_transaction":{"type":"method","name":"within_new_transaction","children":[],"call":[" raise ","transaction rollback ","transaction state completed? ","transaction state "," commit_transaction "," rollback_transaction ","Thread  current status == ","Thread  current status ","Thread  current "," begin_transaction "," after_failure_actions ","@connection lock synchronize ","@connection lock ","error ! ","ActiveSupport Deprecation  warn ","transaction written ","completed ! ","@connection throw_away! ","transaction state rolledback? ","transaction state invalidate! ","error is_a? ","transaction invalidate! ","ActiveRecord  deprecator warn ","ActiveRecord  deprecator ","ActiveRecord  commit_transaction_on_non_local_return "," begin_transaction  rollback "," begin_transaction  state completed? "," begin_transaction  state "," commit_ begin_transaction  "," rollback_ begin_transaction  "," begin_ begin_transaction  "," begin_transaction  written "," begin_transaction  state rolledback? "," begin_transaction  state invalidate! "," begin_transaction  invalidate! ","ActiveRecord  commit_ begin_transaction _on_non_local_return "]}," ActiveRecord ConnectionAdapters TransactionManager rollback_transaction":{"type":"method","name":"rollback_transaction","children":[],"call":["@stack pop rollback ","@stack pop ","transaction rollback_records ","transaction rollback ","@connection lock synchronize ","@connection lock ","transaction state invalidated? ","transaction state ","@stack last == ","@stack last "]}," ActiveRecord ConnectionAdapters TransactionManager commit_transaction":{"type":"method","name":"commit_transaction","children":[],"call":["@stack pop commit ","@stack pop ","transaction commit_records ","transaction commit ","transaction before_commit_records ","@stack last ","@connection lock synchronize ","@connection lock "," dirty_current_transaction ","transaction dirty? ","@stack last  commit_records ","@stack last  commit ","@stack last  before_commit_records "," dirty_current_@stack last  ","@stack last  dirty? "]}," ActiveRecord ConnectionAdapters TransactionManager begin_transaction":{"type":"method","name":"begin_transaction","children":[],"call":["@stack push ","SavepointTransaction  new ","@stack size ","RealTransaction  new ","@stack empty? "," current_transaction joinable? ! "," current_transaction joinable? "," current_transaction ","@connection lock synchronize ","@connection lock ","@stack last ","transaction materialize! ","options [] != ","options [] "," lazy_transactions_enabled? ","@connection supports_lazy_transactions? ","transaction materialized? ","RestartParentTransaction  new "," current_transaction restartable? "," current_SavepointTransaction  new  joinable? ! "," current_RealTransaction  new  joinable? ! "," current_SavepointTransaction  new  joinable? "," current_RealTransaction  new  joinable? "," current_SavepointTransaction  new  "," current_RealTransaction  new  ","SavepointTransaction  new  materialize! ","RealTransaction  new  materialize! "," lazy_SavepointTransaction  new s_enabled? "," lazy_RealTransaction  new s_enabled? ","@connection supports_lazy_SavepointTransaction  new s? ","@connection supports_lazy_RealTransaction  new s? ","SavepointTransaction  new  materialized? ","RealTransaction  new  materialized? "," current_SavepointTransaction  new  restartable? "," current_RealTransaction  new  restartable? "]}," ActiveRecord ConnectionAdapters TransactionManager initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters RealTransaction commit":{"type":"method","name":"commit","children":[],"call":[" commit_records "," connection commit_db_transaction "," connection ","@state full_commit! "," materialized? ","@instrumenter finish "]}," ActiveRecord ConnectionAdapters RealTransaction rollback":{"type":"method","name":"rollback","children":[],"call":[" rollback_records "," connection rollback_db_transaction "," connection ","@state full_rollback! "," materialized? ","@instrumenter finish "]}," ActiveRecord ConnectionAdapters SavepointTransaction full_rollback?":{"type":"method","name":"full_rollback?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SavepointTransaction commit":{"type":"method","name":"commit","children":[],"call":["parent add_record "," records each "," records "," connection transaction_manager current_transaction "," connection transaction_manager "," connection "," connection release_savepoint "," savepoint_name ","@state commit! "," materialized? ","@instrumenter finish "," connection transaction_manager current_transaction  add_record "]}," ActiveRecord ConnectionAdapters SavepointTransaction rollback":{"type":"method","name":"rollback","children":[],"call":[" rollback_records "," connection rollback_to_savepoint "," savepoint_name "," connection ","@state rollback! "," materialized? ","@instrumenter finish ","@state invalidated? "]}," ActiveRecord ConnectionAdapters Transaction open?":{"type":"method","name":"open?","children":[],"call":[" closed? ! "," closed? "]}," ActiveRecord ConnectionAdapters Transaction closed?":{"type":"method","name":"closed?","children":[],"call":[]}," ActiveRecord ConnectionAdapters Transaction joinable?":{"type":"method","name":"joinable?","children":[],"call":[]}," ActiveRecord ConnectionAdapters Transaction full_rollback?":{"type":"method","name":"full_rollback?","children":[],"call":[]}," ActiveRecord ConnectionAdapters Transaction commit_records":{"type":"method","name":"commit_records","children":[],"call":["i committed! ","ite each ","record logger error ","record logger ","record respond_to? "," raise ","ActiveRecord Base  raise_in_transactional_callbacks ","record committed! ","ite shift "," records uniq "," records ","record add_to_transaction "," connection add_transaction_record "," connection ","already_run_callbacks [] ","already_run_callbacks [] ! ","record trigger_transactional_callbacks? "," run_action_on_records "," prepare_instances_to_run_callbacks_on "," unique_records "," records uniq  each "," unique_records  each ","ite shift  logger error ","ite shift  logger ","ite shift  respond_to? ","ite shift  committed! "," records uniq  shift "," unique_records  shift "," ite shift s uniq "," ite shift s ","ite shift  add_to_transaction "," connection add_transaction_ite shift  ","ite shift  trigger_transactional_callbacks? "," run_action_on_ite shift s "," prepare_ prepare_instances_to_run_callbacks_on  "," unique_ite shift s "]}," ActiveRecord ConnectionAdapters Transaction commit":{"type":"method","name":"commit","children":[],"call":["@state set_state ","@state commit! "]}," ActiveRecord ConnectionAdapters Transaction rollback_records":{"type":"method","name":"rollback_records","children":[],"call":["i rolledback! "," full_rollback? ","ite each ","record logger error ","record logger ","record respond_to? "," raise ","ActiveRecord Base  raise_in_transactional_callbacks ","record rolledback! ","ite shift "," records uniq "," records ","already_run_callbacks [] ","already_run_callbacks [] ! ","record trigger_transactional_callbacks? "," run_action_on_records "," prepare_instances_to_run_callbacks_on "," unique_records "," records uniq  each "," unique_records  each ","ite shift  logger error ","ite shift  logger ","ite shift  respond_to? ","ite shift  rolledback! "," records uniq  shift "," unique_records  shift "," ite shift s uniq "," ite shift s ","ite shift  trigger_transactional_callbacks? "," run_action_on_ite shift s "," prepare_ prepare_instances_to_run_callbacks_on  "," unique_ite shift s "]}," ActiveRecord ConnectionAdapters Transaction rollback":{"type":"method","name":"rollback","children":[],"call":["@state set_state ","@state rollback! "]}," ActiveRecord ConnectionAdapters Transaction add_record":{"type":"method","name":"add_record","children":[],"call":["record set_transaction_state "," records << "," records ","record has_transactional_callbacks? ","@lazy_enrollment_records []= ","ObjectSpace WeakMap  new ","@records << "]}," ActiveRecord ConnectionAdapters NullTransaction add_record":{"type":"method","name":"add_record","children":[],"call":[]}," ActiveRecord ConnectionAdapters NullTransaction joinable?":{"type":"method","name":"joinable?","children":[],"call":[]}," ActiveRecord ConnectionAdapters NullTransaction open?":{"type":"method","name":"open?","children":[],"call":[]}," ActiveRecord ConnectionAdapters NullTransaction closed?":{"type":"method","name":"closed?","children":[],"call":[]}," ActiveRecord ConnectionAdapters NullTransaction initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters TransactionState completed?":{"type":"method","name":"completed?","children":[],"call":[" rolledback? "," committed? "]}," ActiveRecord ConnectionAdapters SchemaStatements foreign_key_name":{"type":"method","name":"foreign_key_name","children":[],"call":["SecureRandom  hex ","options fetch ","Digest SHA256  hexdigest first ","Digest SHA256  hexdigest ","OpenSSL Digest SHA256  hexdigest first ","OpenSSL Digest SHA256  hexdigest ","columns * "," Array map "," Array "," Array map  * "]}," ActiveRecord ConnectionAdapters SchemaStatements foreign_key_column_for":{"type":"method","name":"foreign_key_column_for","children":[],"call":["table_name to_s singularize ","table_name to_s ","name singularize ","table_name to_s =~ ","Base  table_name_suffix ","Base  table_name_prefix "," strip_table_name_prefix_and_suffix ","table_table_name to_s  to_s singularize ","table_ strip_table_name_prefix_and_suffix  to_s singularize ","table_table_name to_s  to_s ","table_ strip_table_name_prefix_and_suffix  to_s ","table_name to_s  singularize "," strip_table_name_prefix_and_suffix  singularize ","table_table_name to_s  to_s =~ ","table_ strip_table_name_prefix_and_suffix  to_s =~ ","Base  table_table_name to_s _suffix ","Base  table_ strip_table_name_prefix_and_suffix _suffix ","Base  table_name_Base  table_name_suffix  ","Base  table_table_name to_s _prefix ","Base  table_ strip_table_name_prefix_and_suffix _prefix ","Base  table_name_Base  table_name_prefix  "," strip_table_table_name to_s _prefix_and_suffix "," strip_table_ strip_table_name_prefix_and_suffix _prefix_and_suffix "," strip_table_name_prefix_and_Base  table_name_suffix  "," strip_table_name_Base  table_name_prefix _and_suffix "]}," ActiveRecord ConnectionAdapters SchemaStatements remove_foreign_key":{"type":"method","name":"remove_foreign_key","children":[],"call":[" execute "," schema_creation accept "," schema_creation ","at drop_foreign_key "," create_alter_table "," raise ","options [] ","fk_to_delete name ","fk column == ","options [] to_s ","fk column "," foreign_keys detect "," foreign_keys ","options fetch "," foreign_key_column_for ","options_or_to_table is_a? "," supports_foreign_keys? "," foreign_key_for! name "," foreign_key_for! "," foreign_key_exists? ! "," foreign_key_exists? ","options [] == ","options delete == ","options delete "," use_foreign_keys? "," schema_cre create_alter_table ion accept "," schema_cre create_alter_table ion "," create_alter_table  drop_foreign_key "," cre create_alter_table e_alter_table "]}," ActiveRecord ConnectionAdapters SchemaStatements add_foreign_key":{"type":"method","name":"add_foreign_key","children":[],"call":[" execute "," schema_creation accept "," schema_creation ","at add_foreign_key "," create_alter_table ","options [] "," foreign_key_name "," foreign_key_column_for "," supports_foreign_keys? "," foreign_key_options "," foreign_key_exists? ","options [] == ","options slice "," use_foreign_keys? "," schema_cre create_alter_table ion accept "," schema_cre create_alter_table ion "," create_alter_table  add_foreign_key "," cre create_alter_table e_alter_table "," foreign_key_options  [] "," foreign_key_ foreign_key_options  "," foreign_key_options  [] == "," foreign_key_options  slice "]}," ActiveRecord ConnectionAdapters SchemaStatements foreign_keys":{"type":"method","name":"foreign_keys","children":[],"call":[" raise "]}," ActiveRecord ConnectionAdapters ColumnDumper schema_default":{"type":"method","name":"schema_default","children":[],"call":["column type_cast_for_schema ","default nil? ","column type_cast_from_database ","column default ","type type_cast_for_schema "," schema_expression ","type deserialize "," lookup_cast_type_from_column ","column  lookup_cast_type_from_column _cast_for_schema ","column type_cast_from_database  nil? ","type deserialize  nil? ","column  lookup_cast_type_from_column _cast_from_database ","column column type_cast_from_database  ","column type deserialize  "," lookup_cast_type_from_column   lookup_cast_type_from_column _cast_for_schema "," lookup_cast_type_from_column  deserialize "," lookup_cast_ lookup_cast_type_from_column _from_column "]}," ActiveRecord ConnectionAdapters AlterTable drop_foreign_key":{"type":"method","name":"drop_foreign_key","children":[],"call":["@foreign_key_drops << "]}," ActiveRecord ConnectionAdapters AlterTable add_foreign_key":{"type":"method","name":"add_foreign_key","children":[],"call":["@foreign_key_adds << ","ForeignKeyDefinition  new "," name ","@td new_foreign_key_definition "]}," ActiveRecord ConnectionAdapters TableDefinition aliased_types":{"type":"method","name":"aliased_types","children":[],"call":["timestamp == ","HashWithIndifferentAccess  new "]}," ActiveRecord ConnectionAdapters TimestampDefaultDeprecation emit_warning_if_null_unspecified":{"type":"method","name":"emit_warning_if_null_unspecified","children":[],"call":["ActiveSupport Deprecation  warn ","(str \"          `#timestamp` was called without specifying an option for `null`. In Rails 5,\\n\") squish ","options key? ","(str \"        `timestamp` was called without specifying an option for `null`. In Rails\\n\") strip_heredoc ","(str \"          `#\") squish "]}," ActiveRecord ConnectionAdapters ForeignKeyDefinition default_primary_key":{"type":"method","name":"default_primary_key","children":[],"call":[]}," ActiveRecord ConnectionAdapters ForeignKeyDefinition custom_primary_key?":{"type":"method","name":"custom_primary_key?","children":[],"call":[" options [] != "," default_primary_key "," options [] "," options "]}," ActiveRecord ConnectionAdapters ForeignKeyDefinition on_update":{"type":"method","name":"on_update","children":[],"call":[" options [] "," options "]}," ActiveRecord ConnectionAdapters ForeignKeyDefinition on_delete":{"type":"method","name":"on_delete","children":[],"call":[" options [] "," options "]}," ActiveRecord ConnectionAdapters ForeignKeyDefinition primary_key":{"type":"method","name":"primary_key","children":[],"call":[" default_primary_key "," options [] "," options "]}," ActiveRecord ConnectionAdapters ForeignKeyDefinition column":{"type":"method","name":"column","children":[],"call":[" options [] "," options "]}," ActiveRecord ConnectionAdapters ForeignKeyDefinition name":{"type":"method","name":"name","children":[],"call":[" options [] "," options "]}," ActiveRecord ConnectionAdapters AbstractAdapter SchemaCreation type_for_column":{"type":"method","name":"type_for_column","children":[],"call":["@conn lookup_cast_type ","column sql_type "]}," ActiveRecord ConnectionAdapters AbstractAdapter SchemaCreation action_sql":{"type":"method","name":"action_sql","children":[],"call":[" raise ","(str \"                '\") strip_heredoc "]}," ActiveRecord ConnectionAdapters AbstractAdapter SchemaCreation visit_DropForeignKey":{"type":"method","name":"visit_DropForeignKey","children":[],"call":[" quote_column_name "]}," ActiveRecord ConnectionAdapters AbstractAdapter SchemaCreation visit_AddForeignKey":{"type":"method","name":"visit_AddForeignKey","children":[],"call":["sql << "," action_sql ","o on_update ","o on_delete ","(str \"              ADD CONSTRAINT \") strip_heredoc "," quote_column_name ","o primary_key "," quote_table_name ","o to_table ","o column ","o name "," accept ","(str \"              ADD CONSTRAINT \") strip_heredoc  << "," action_(str \"              ADD CONSTRAINT \") strip_heredoc  "]}," ActiveRecord ConnectionAdapters Quoting _type_cast":{"type":"method","name":"_type_cast","children":[],"call":[" raise "," types_which_need_no_typecasting "," quoted_date ","value to_s "," unquoted_false "," unquoted_true "," quoted_time ","value class name ","value class "]}," ActiveRecord ConnectionAdapters Quoting _quote":{"type":"method","name":"_quote","children":[],"call":[" quote_string ","YAML  dump ","value to_s "," quoted_date "," quoted_false "," quoted_true "," raise ","value class name ","value class "," quoted_time "," quoted_binary "]}," ActiveRecord ConnectionAdapters Quoting types_which_need_no_typecasting":{"type":"method","name":"types_which_need_no_typecasting","children":[],"call":[]}," ActiveRecord ConnectionAdapters Quoting unquoted_false":{"type":"method","name":"unquoted_false","children":[],"call":["f freeze "]}," ActiveRecord ConnectionAdapters Quoting unquoted_true":{"type":"method","name":"unquoted_true","children":[],"call":["t freeze "]}," ActiveRecord ConnectionAdapters DatabaseStatements truncate":{"type":"method","name":"truncate","children":[],"call":[" raise "," execute "," build_truncate_statements "," build_truncate_statement "]}," ActiveRecord ConnectionAdapters DatabaseStatements cacheable_query":{"type":"method","name":"cacheable_query","children":[],"call":["ActiveRecord StatementCache  partial_query "," collector ","arel ast "," visitor ","ActiveRecord StatementCache  query "," prepared_statements ","klass partial_query ","collected value ","klass query "," visitor accept "," visitor accept value ","PartialQueryCollector  new "," visitor compile ","klass partial_query_collector ","ActiveRecord StatementCache  partial_klass partial_query  ","ActiveRecord StatementCache  partial_klass query  "," PartialQueryCollector  new  "," klass partial_query_collector  ","ActiveRecord StatementCache  klass partial_query  ","ActiveRecord StatementCache  klass query  ","klass partial_klass partial_query  ","klass partial_klass query  "," visitor accept  value ","klass klass partial_query  ","klass klass query  ","klass partial_klass partial_query _collector ","klass partial_klass query _collector ","klass partial_query_PartialQueryCollector  new  ","klass partial_query_klass partial_query_collector  "]}," ActiveRecord Attributes ClassMethods raw_default_values":{"type":"method","name":"raw_default_values","children":[],"call":[" merge "," user_provided_defaults "]}," ActiveRecord Attributes ClassMethods clear_caches_calculated_from_columns":{"type":"method","name":"clear_caches_calculated_from_columns","children":[],"call":[]}," ActiveRecord Attributes ClassMethods add_user_provided_columns":{"type":"method","name":"add_user_provided_columns","children":[],"call":["existing_columns + "," connection new_column "," connection "," user_provided_columns except map "," user_provided_columns except "," user_provided_columns ","existing_columns map ","column with_type "," user_provided_columns [] ","column name ","schema_columns map "," user_provided_columns except values "]}," ActiveRecord Attributes ClassMethods reset_column_information":{"type":"method","name":"reset_column_information","children":[],"call":[" clear_caches_calculated_from_columns "]}," ActiveRecord Attributes ClassMethods columns_hash":{"type":"method","name":"columns_hash","children":[],"call":["Hash  [] ","c name "," columns map "," columns "]}," ActiveRecord Attributes ClassMethods columns":{"type":"method","name":"columns","children":[],"call":[" add_user_provided_columns "," connection schema_cache columns "," table_name "," connection schema_cache "," connection "]}," ActiveRecord Attributes ClassMethods attribute":{"type":"method","name":"attribute","children":[],"call":[" user_provided_defaults= "," user_provided_defaults merge ","options [] "," user_provided_defaults ","options key? "," user_provided_columns= "," user_provided_columns merge "," user_provided_columns "," clear_caches_calculated_from_columns ","name to_s "," connection new_column "," connection "," attributes_to_define_after_schema_loads= "," attributes_to_define_after_schema_loads merge "," attributes_to_define_after_schema_loads "," reload_schema_from_cache ","prev_cast_type [] ","Proc  === "," lambda "," block_given? ","default == "," attributes_to_define_after_schema_loads [] ","Type  lookup ","Type  adapter_name_from "," attribute_aliases [] "," attribute_aliases ","name to_s  to_s ","prev_Type  lookup  [] ","Type  adapter_name to_s _from "]}," ActiveRecord AttributeSet initialized_attributes":{"type":"method","name":"initialized_attributes","children":[],"call":["attr initialized? "," attributes select "," attributes "]}," ActiveRecord AttributeSet reset":{"type":"method","name":"reset","children":[],"call":[" write_from_database "," key? "]}," ActiveRecord AttributeSet initialize_clone":{"type":"method","name":"initialize_clone","children":[],"call":[" attributes clone "," attributes "]}," ActiveRecord AttributeSet initialize_dup":{"type":"method","name":"initialize_dup","children":[],"call":[" attributes dup "," attributes "," attributes transform_values "]}," ActiveRecord AttributeSet freeze":{"type":"method","name":"freeze","children":[],"call":["@attributes freeze "]}," ActiveRecord AttributeSet write_cast_value":{"type":"method","name":"write_cast_value","children":[],"call":[" attributes []= "," [] with_cast_value "," [] "," attributes "]}," ActiveRecord AttributeSet write_from_user":{"type":"method","name":"write_from_user","children":[],"call":[" attributes []= "," [] with_value_from_user "," [] "," attributes "]}," ActiveRecord AttributeSet write_from_database":{"type":"method","name":"write_from_database","children":[],"call":[" attributes []= "," [] with_value_from_database "," [] "," attributes "]}," ActiveRecord AttributeSet fetch_value":{"type":"method","name":"fetch_value","children":[],"call":[" block_given? "," [] value "," [] "]}," ActiveRecord AttributeSet keys":{"type":"method","name":"keys","children":[],"call":[" attributes initialized_keys "," attributes "," [] initialized? "," [] "," attributes each_key select "," attributes each_key "]}," ActiveRecord AttributeSet key?":{"type":"method","name":"key?","children":[],"call":[" [] initialized? "," [] "," attributes key? "," attributes "]}," ActiveRecord AttributeSet to_hash":{"type":"method","name":"to_hash","children":[],"call":[" initialized_attributes transform_values "," initialized_attributes "]}," ActiveRecord AttributeSet values_before_type_cast":{"type":"method","name":"values_before_type_cast","children":[],"call":[" attributes transform_values "," attributes "]}," ActiveRecord AttributeSet []":{"type":"method","name":"[]","children":[],"call":["Attribute  null "," attributes [] "," attributes "]}," ActiveRecord AttributeSet initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord LazyAttributeHash materialize":{"type":"method","name":"materialize","children":[],"call":[" delegate_hash "," frozen? "," [] "," types each_key "," types "," values each_key "," values "]}," ActiveRecord LazyAttributeHash assign_default_value":{"type":"method","name":"assign_default_value","children":[],"call":[" delegate_hash []= ","Attribute  uninitialized "," delegate_hash "," types key? "," types ","Attribute  from_database "," values fetch "," values "," additional_types fetch "," types [] "," additional_types "," default call "," default ","attr dup "," default_attributes [] "," default_attributes ","  additional_types fetch s key? ","  additional_types fetch s "," additional_ additional_types fetch s fetch ","  additional_types fetch s [] "," additional_ additional_types fetch s "," default_attributes []  dup "," default_ default_attributes [] ibutes [] "," default_ default_attributes [] ibutes "]}," ActiveRecord LazyAttributeHash initialize_dup":{"type":"method","name":"initialize_dup","children":[],"call":[" delegate_hash transform_values "," delegate_hash ","Hash  [] "]}," ActiveRecord LazyAttributeHash initialized_keys":{"type":"method","name":"initialized_keys","children":[],"call":[" delegate_hash keys | "," values keys "," values "," delegate_hash keys "," delegate_hash "]}," ActiveRecord LazyAttributeHash []=":{"type":"method","name":"[]=","children":[],"call":[" delegate_hash []= "," delegate_hash "," raise "," frozen? "]}," ActiveRecord LazyAttributeHash []":{"type":"method","name":"[]","children":[],"call":[" assign_default_value "," delegate_hash [] "," delegate_hash "]}," ActiveRecord LazyAttributeHash key?":{"type":"method","name":"key?","children":[],"call":[" types key? "," types "," values key? "," values "," delegate_hash key? "," delegate_hash "]}," ActiveRecord LazyAttributeHash initialize":{"type":"method","name":"initialize","children":[],"call":[" proc "]}," ActiveRecord AttributeSet Builder build_from_database":{"type":"method","name":"build_from_database","children":[],"call":["AttributeSet  new ","LazyAttributeHash  new "," types ","values []= "," always_initialized ","values key? ! ","values key? "," add_uninitialized_attributes "," build_attributes_from_values "," default "," default_attributes "," add_uninitialized_LazyAttributeHash  new  "," add_uninitialized_ build_attributes_from_values  "," build_LazyAttributeHash  new _from_values "," build_ build_attributes_from_values _from_values "," default_LazyAttributeHash  new  "," default_ build_attributes_from_values  "]}," ActiveRecord AttributeSet Builder initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord AttributeMethods ClassMethods column_for_attribute":{"type":"method","name":"column_for_attribute","children":[],"call":["ActiveSupport Deprecation  warn ","(str \"            `#column_for_attribute` will return a null object for non-existent\\n\") squish ","column nil? "," columns_hash [] ","name to_s "," columns_hash ","(str \"            `column_for_attribute` will return a null object for non-existent columns\\n\") strip_heredoc ","ConnectionAdapters NullColumn  new "," columns_hash fetch ","(str \"            `# columns_hash [] _for_attribute` will return a null object for non-existent\\n\") squish "," columns_hash []  nil? ","  columns_hash [] s_hash [] ","name to_s  to_s ","  columns_hash [] s_hash ","(str \"            ` columns_hash [] _for_attribute` will return a null object for non-existent  columns_hash [] s\\n\") strip_heredoc ","  columns_hash [] s_hash fetch "]}," ActiveRecord AttributeMethods TimeZoneConversion ClassMethods inherited":{"type":"method","name":"inherited","children":[],"call":["TimeZoneConverter  new "," decorate_matching_attribute_types "," create_time_zone_conversion_attribute? "," lambda ","subclass class_eval "]}," ActiveRecord AttributeMethods TimeZoneConversion TimeZoneConverter convert_time_to_time_zone":{"type":"method","name":"convert_time_to_time_zone","children":[],"call":["value in_time_zone ","value acts_like? "," convert_time_to_time_zone ","value map ","value is_a? "," map_avoiding_infinite_recursion ","value nil? "," map ","value infinite? ","value respond_to? ","Range  new ","value exclude_end? ","value end ","value begin "]}," ActiveRecord AttributeMethods TimeZoneConversion TimeZoneConverter type_cast_from_user":{"type":"method","name":"type_cast_from_user","children":[],"call":["value in_time_zone ","value respond_to? "," type_cast_from_user ","value map ","value is_a? "]}," ActiveRecord AttributeMethods TimeZoneConversion TimeZoneConverter type_cast_from_database":{"type":"method","name":"type_cast_from_database","children":[],"call":[" convert_time_to_time_zone "]}," ActiveRecord AttributeMethods Serialization ClassMethods serialized_attributes":{"type":"method","name":"serialized_attributes","children":[],"call":["Hash  [] ","c cast_type coder ","c cast_type ","c name ","(send\n  (send nil :columns) :select) map ","t cast_type is_a? ","t cast_type "," columns select "," columns ","ActiveSupport Deprecation  warn ","(str \"            `serialized_attributes` is deprecated without replacement, and will\\n\") squish ","(str \"            `serialized_attributes` is deprecated without replacement, and will\\n\") strip_heredoc "]}," ActiveRecord AttributeMethods Read ClassMethods cached_attributes_deprecation_warning":{"type":"method","name":"cached_attributes_deprecation_warning","children":[],"call":["ActiveSupport Deprecation  warn ","(str \"            Calling `\") strip_heredoc "]}," ActiveRecord AttributeMethods Dirty cache_changed_attributes":{"type":"method","name":"cache_changed_attributes","children":[],"call":[" remove_instance_variable "," changed_attributes "," clear_changed_attributes_cache "]}," ActiveRecord AttributeMethods Dirty store_original_raw_attributes":{"type":"method","name":"store_original_raw_attributes","children":[],"call":[" store_original_raw_attribute "," attribute_names each "," attribute_names "]}," ActiveRecord AttributeMethods Dirty store_original_raw_attribute":{"type":"method","name":"store_original_raw_attribute","children":[],"call":[" original_raw_attributes []= ","@attributes [] value_for_database ","@attributes [] "," original_raw_attributes "]}," ActiveRecord AttributeMethods Dirty original_raw_attributes":{"type":"method","name":"original_raw_attributes","children":[],"call":[]}," ActiveRecord AttributeMethods Dirty original_raw_attribute":{"type":"method","name":"original_raw_attribute","children":[],"call":[" read_attribute_before_type_cast "," original_raw_attributes fetch "," original_raw_attributes "]}," ActiveRecord AttributeMethods Dirty changed_in_place":{"type":"method","name":"changed_in_place","children":[],"call":[" attribute_changed_in_place? "," class attribute_names select "," class attribute_names "," class "," changed_in_place? "]}," ActiveRecord AttributeMethods Dirty attributes_changed_in_place":{"type":"method","name":"attributes_changed_in_place","children":[],"call":["h []= ","@attributes [] original_value ","@attributes [] "," changed_in_place each_with_object "," changed_in_place ","@attributes [] @attributes [] original_value inal_value "]}," ActiveRecord AttributeMethods Dirty old_attribute_value":{"type":"method","name":"old_attribute_value","children":[],"call":[" clone_attribute_value "," changed_attributes [] "," changed_attributes "," attribute_changed? "]}," ActiveRecord AttributeMethods Dirty raw_write_attribute":{"type":"method","name":"raw_write_attribute","children":[],"call":[" original_raw_attributes []= "," original_raw_attributes ","attr to_s "," clear_attribute_change "," original_raw_attr to_s ibutes []= "," original_raw_attr to_s ibutes ","attr to_s  to_s "," clear_attr to_s ibute_change "]}," ActiveRecord AttributeMethods Dirty calculate_changes_from_defaults":{"type":"method","name":"calculate_changes_from_defaults","children":[],"call":[" set_attribute_was "," _field_changed? "," class column_defaults each "," class column_defaults "," class "]}," ActiveRecord AttributeMethods Dirty attribute_changed_in_place?":{"type":"method","name":"attribute_changed_in_place?","children":[],"call":["@attributes [] changed_in_place_from? ","@attributes [] "," original_raw_attribute "," mutation_tracker changed_in_place? "," mutation_tracker "]}," ActiveRecord AttributeMethods Dirty changes":{"type":"method","name":"changes","children":[],"call":[" cache_changed_attributes "," emit_warning_if_needed "]}," ActiveRecord AttributeMethods Dirty changed_attributes":{"type":"method","name":"changed_attributes","children":[],"call":[" reverse_merge freeze "," reverse_merge "," attributes_changed_in_place "," mutation_tracker changed_values "," mutation_tracker "," emit_warning_if_needed "]}," ActiveRecord AttributeMethods Dirty clear_changes_information":{"type":"method","name":"clear_changes_information","children":[],"call":[" original_raw_attributes clear "," original_raw_attributes "," store_original_attributes ","HashWithIndifferentAccess  new "," clear_mutation_trackers "," forget_attribute_assignments ","ActiveSupport HashWithIndifferentAccess  new "]}," ActiveRecord AttributeMethods Dirty changes_applied":{"type":"method","name":"changes_applied","children":[],"call":[" store_original_raw_attributes "," store_original_attributes ","HashWithIndifferentAccess  new "," mutation_tracker "," clear_mutation_trackers ","ActiveSupport HashWithIndifferentAccess  new "]}," ActiveRecord AttributeDecorators TypeDecorator matching":{"type":"method","name":"matching","children":[],"call":["matcher call ","@decorations values select ","@decorations values "]}," ActiveRecord AttributeDecorators TypeDecorator decorators_for":{"type":"method","name":"decorators_for","children":[],"call":[" matching map "," matching "]}," ActiveRecord AttributeDecorators TypeDecorator apply":{"type":"method","name":"apply","children":[],"call":["block call ","decorations inject "," decorators_for "," decorators_for  inject "]}," ActiveRecord AttributeDecorators TypeDecorator merge":{"type":"method","name":"merge","children":[],"call":["TypeDecorator  new ","@decorations merge "]}," ActiveRecord AttributeDecorators TypeDecorator initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord AttributeDecorators ClassMethods add_user_provided_columns":{"type":"method","name":"add_user_provided_columns","children":[],"call":["column with_type "," attribute_type_decorations apply ","column cast_type ","column name "," attribute_type_decorations "," map "]}," ActiveRecord AttributeDecorators ClassMethods decorate_matching_attribute_types":{"type":"method","name":"decorate_matching_attribute_types","children":[],"call":[" attribute_type_decorations= "," attribute_type_decorations merge "," attribute_type_decorations ","decorator_name to_s "," clear_caches_calculated_from_columns "," reload_schema_from_cache ","decorator_name to_s  to_s "]}," ActiveRecord AttributeDecorators ClassMethods decorate_attribute_type":{"type":"method","name":"decorate_attribute_type","children":[],"call":[" decorate_matching_attribute_types ","name == ","column_name to_s "," lambda "]}," ActiveRecord Attribute Uninitialized initialized?":{"type":"method","name":"initialized?","children":[],"call":[]}," ActiveRecord Attribute Uninitialized value_for_database":{"type":"method","name":"value_for_database","children":[],"call":[]}," ActiveRecord Attribute Uninitialized value":{"type":"method","name":"value","children":[],"call":[" name "," block_given? "]}," ActiveRecord Attribute Uninitialized initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Attribute Null with_value_from_database":{"type":"method","name":"with_value_from_database","children":[],"call":[" raise "," name "]}," ActiveRecord Attribute Null value":{"type":"method","name":"value","children":[],"call":[]}," ActiveRecord Attribute Null initialize":{"type":"method","name":"initialize","children":[],"call":["Type Value  new ","Type  default_value "]}," ActiveRecord Attribute WithCastValue changed_in_place_from?":{"type":"method","name":"changed_in_place_from?","children":[],"call":[]}," ActiveRecord Attribute WithCastValue type_cast":{"type":"method","name":"type_cast","children":[],"call":[]}," ActiveRecord Attribute FromUser type_cast":{"type":"method","name":"type_cast","children":[],"call":[" type type_cast_from_user "," type "," type cast "]}," ActiveRecord Attribute FromDatabase type_cast":{"type":"method","name":"type_cast","children":[],"call":[" type type_cast_from_database "," type "," type deserialize "]}," ActiveRecord Attribute initialize_dup":{"type":"method","name":"initialize_dup","children":[],"call":["@value dup ","@value duplicable? ","@value dup  dup ","@value dup  duplicable? "]}," ActiveRecord Attribute ==":{"type":"method","name":"==","children":[],"call":[" type == ","other type "," type "," value_before_type_cast == ","other value_before_type_cast "," value_before_type_cast "," name == ","other name "," name "," class == ","other class "," class "]}," ActiveRecord Attribute initialized?":{"type":"method","name":"initialized?","children":[],"call":[]}," ActiveRecord Attribute type_cast":{"type":"method","name":"type_cast","children":[],"call":[" raise "]}," ActiveRecord Attribute with_cast_value":{"type":"method","name":"with_cast_value","children":[],"call":[" class with_cast_value "," type "," name "," class ","WithCastValue  new "]}," ActiveRecord Attribute with_value_from_database":{"type":"method","name":"with_value_from_database","children":[],"call":[" class from_database "," type "," name "," class "]}," ActiveRecord Attribute with_value_from_user":{"type":"method","name":"with_value_from_user","children":[],"call":[" class from_user "," type "," name "," class "," type assert_valid_value "," original_attribute "]}," ActiveRecord Attribute changed_in_place_from?":{"type":"method","name":"changed_in_place_from?","children":[],"call":[" type changed_in_place? "," value "," type "," has_been_read? "]}," ActiveRecord Attribute changed_from?":{"type":"method","name":"changed_from?","children":[],"call":[" type changed? "," value_before_type_cast "," value "," type "]}," ActiveRecord Attribute value_for_database":{"type":"method","name":"value_for_database","children":[],"call":[" type type_cast_for_database "," value "," type "," type serialize "]}," ActiveRecord Attribute original_value":{"type":"method","name":"original_value","children":[],"call":[" type_cast "," value_before_type_cast "," original_attribute original_value "," original_attribute "," assigned? "]}," ActiveRecord Attribute value":{"type":"method","name":"value","children":[],"call":[" original_value "," type_cast "," value_before_type_cast "]}," ActiveRecord Attribute initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Attribute uninitialized":{"type":"method","name":"uninitialized","children":[],"call":["Uninitialized  new "]}," ActiveRecord Attribute null":{"type":"method","name":"null","children":[],"call":["Null  new "]}," ActiveRecord Attribute from_user":{"type":"method","name":"from_user","children":[],"call":["FromUser  new "]}," ActiveRecord Attribute from_database":{"type":"method","name":"from_database","children":[],"call":["FromDatabase  new "]}," ActiveRecord HasOneAssociationPolymorphicThroughError initialize":{"type":"method","name":"initialize","children":[],"call":["reflection through_reflection name ","reflection through_reflection ","reflection name "]}," ActiveRecord Associations SingularAssociation get_records":{"type":"method","name":"get_records","children":[],"call":["sc execute "," klass connection "," klass ","AssociationScope  get_bind_values "," reflection chain "," reflection "," owner "," target_scope merge limit "," target_scope merge ","as scope "," target_scope ","params bind ","AssociationScope  create ","StatementCache  create "," reflection association_scope_cache "," scope limit to_a "," scope limit "," scope "," klass default_scopes any? "," klass default_scopes "," klass current_scope "," scope eager_loading? "," reflection scope_chain any? "," reflection scope_chain "," skip_statement_cache? "," scope limit records "," klass  klass connection ection "]}," ActiveRecord Associations HasManyThroughAssociation through_reflection_updates_counter_cache?":{"type":"method","name":"through_reflection_updates_counter_cache?","children":[],"call":[" inverse_updates_counter_named? "," through_reflection "," cached_counter_attribute_name "," inverse_updates_ cached_counter_attribute_name d? "]}," ActiveRecord Associations HasManyThroughAssociation delete_or_nullify_all_records":{"type":"method","name":"delete_or_nullify_all_records","children":[],"call":[" delete_records "," load_target "]}," ActiveRecord Associations HasManyAssociation update_counter_if_success":{"type":"method","name":"update_counter_if_success","children":[],"call":[" update_counter_in_memory "]}," ActiveRecord Associations HasManyAssociation _create_record":{"type":"method","name":"_create_record","children":[],"call":[" update_counter_if_success ","attributes is_a? "]}," ActiveRecord Associations HasManyAssociation concat_records":{"type":"method","name":"concat_records","children":[],"call":[" update_counter_if_success ","records length "]}," ActiveRecord Associations HasManyAssociation delete_or_nullify_all_records":{"type":"method","name":"delete_or_nullify_all_records","children":[],"call":[" update_counter ","count -@ "," delete_count "," scope "," update_ delete_count er "," delete_count  -@ "," delete_ delete_count  "]}," ActiveRecord Associations HasManyAssociation delete_count":{"type":"method","name":"delete_count","children":[],"call":["scope update_all "," reflection foreign_key "," reflection ","scope delete_all ","method == "," nullified_owner_attributes "]}," ActiveRecord Associations HasManyAssociation inverse_updates_counter_named?":{"type":"method","name":"inverse_updates_counter_named?","children":[],"call":["inverse_reflection counter_cache_column == ","inverse_reflection counter_cache_column ","inverse_reflection belongs_to? ","reflection klass _reflections values any? ","reflection klass _reflections values ","reflection klass _reflections ","reflection klass "]}," ActiveRecord Associations HasManyAssociation update_counter_in_memory":{"type":"method","name":"update_counter_in_memory","children":[],"call":[" owner send "," owner "," owner [] "," cached_counter_attribute_name "," has_cached_counter? "," counter_must_be_updated_by_has_many? "," owner increment ","reflection counter_cache_column ","reflection counter_must_be_updated_by_has_many? "," cached_ cached_counter_attribute_name _attribute_name "," cached_reflection counter_cache_column _attribute_name "," has_cached_ cached_counter_attribute_name ? "," has_cached_reflection counter_cache_column ? ","  cached_counter_attribute_name _must_be_updated_by_has_many? "," reflection counter_cache_column _must_be_updated_by_has_many? ","reflection  cached_counter_attribute_name _cache_column ","reflection reflection counter_cache_column _cache_column ","reflection  cached_counter_attribute_name _must_be_updated_by_has_many? ","reflection reflection counter_cache_column _must_be_updated_by_has_many? "]}," ActiveRecord Associations HasManyAssociation update_counter_in_database":{"type":"method","name":"update_counter_in_database","children":[],"call":[" owner class update_counters "," owner id "," owner "," owner class "," cached_counter_attribute_name "," has_cached_counter? "," owner class update_ cached_counter_attribute_name s "," cached_ cached_counter_attribute_name _attribute_name "," has_cached_ cached_counter_attribute_name ? "]}," ActiveRecord Associations HasManyAssociation empty?":{"type":"method","name":"empty?","children":[],"call":[" size zero? "," size "," has_cached_counter? "," reflection has_cached_counter? "," reflection "]}," ActiveRecord Associations CollectionAssociation replace_common_records_in_memory":{"type":"method","name":"replace_common_records_in_memory","children":[],"call":[" replace_on_target ","@target index ","common_records each ","new_target & "," intersection ","new_target &  each "," intersection  each "]}," ActiveRecord Associations CollectionAssociation get_records":{"type":"method","name":"get_records","children":[],"call":["sc execute "," klass connection "," klass ","AssociationScope  get_bind_values "," reflection chain "," reflection "," owner "," target_scope merge ","as scope "," target_scope ","params bind ","AssociationScope  create ","StatementCache  create "," reflection association_scope_cache "," scope to_a "," scope "," klass default_scopes any? "," klass default_scopes "," klass current_scope "," scope eager_loading? "," reflection scope_chain any? "," reflection scope_chain "," skip_statement_cache? "," klass  klass connection ection "]}," ActiveRecord Associations CollectionAssociation replace_on_target":{"type":"method","name":"replace_on_target","children":[],"call":[" set_inverse_instance "," callback ","@target << ","@target []= "," block_given? "," loaded? ","was_loaded ! "," append_record "," raise "," target delete "," target "," target []= "," target << "," target [] "," loaded? ! "," catch ","@replaced_or_added_targets << ","record new_record? ","@target index ","@replaced_or_added_targets include? ","index ! ","record new_record? ! "," loaded?  ! ","@target @target index  ","@target index  ! "]}," Builder SingularAssociation define_validations":{"type":"method","name":"define_validations","children":[],"call":[]}," Builder HasOne add_destroy_callbacks":{"type":"method","name":"add_destroy_callbacks","children":[],"call":[]}," Builder BelongsTo add_destroy_callbacks":{"type":"method","name":"add_destroy_callbacks","children":[],"call":[]}," Builder Association add_destroy_callbacks":{"type":"method","name":"add_destroy_callbacks","children":[],"call":[]}," Builder Association check_dependent_options":{"type":"method","name":"check_dependent_options","children":[],"call":[]}," Builder Association define_validations":{"type":"method","name":"define_validations","children":[],"call":[]}," ActiveRecord Associations BelongsToAssociation increment_counter":{"type":"method","name":"increment_counter","children":[],"call":[" klass increment_counter "," target_id "," klass "," foreign_key_present? "," target increment "," target "," stale_target? ! "," stale_target? "," counter_cache_available_in_memory? "]}," ActiveRecord Associations BelongsToAssociation increment_counters":{"type":"method","name":"increment_counters","children":[],"call":[" increment_counter "," with_cache_name "," update_counters "]}," ActiveRecord Associations AssociationScope next_chain_scope":{"type":"method","name":"next_chain_scope","children":[],"call":["scope joins "," join ","scope where ","table [] eq ","table [] ","reflection type "," bind ","table table_name ","next_reflection klass base_class name ","next_reflection klass base_class ","next_reflection klass ","foreign_table [] ","join_keys foreign_key ","join_keys key ","reflection join_keys ","table name "," transform_value ","scope joins! "," apply_scope ","next_reflection klass polymorphic_name ","next_reflection aliased_table ","reflection aliased_table ","reflection join_foreign_key ","reflection join_primary_key ","(send\n  (lvar :primary_key_foreign_key_pairs) :map) inject ","primary_key_foreign_key_pairs map ","primary_key zip "," Array ","scope joins  joins ","scope where  joins "," apply_scope  joins ","scope joins  where ","scope where  where "," apply_scope  where ","reflection aliased_table  [] eq ","reflection aliased_table  [] ","reflection aliased_table  reflection aliased_table _name ","next_reflection aliased_table  [] ","foreign_reflection aliased_table  [] ","join_keys join_keys foreign_key  ","join_keys reflection join_foreign_key  ","join_keys  Array  ","join_join_keys key s foreign_join_keys key  ","reflection join_keys  foreign_key ","join_join_keys key s join_keys key  ","reflection join_keys  key ","reflection join_join_keys key s ","reflection reflection join_keys  ","reflection aliased_table  name "," transform_next_reflection klass base_class name  "," transform_ transform_value  ","scope joins  joins! ","scope where  joins! "," apply_scope  joins! "," apply_scope joins  "," apply_scope where  "," apply_ apply_scope  ","next_reflection aliased_reflection aliased_table  ","reflection aliased_reflection aliased_table  ","reflection join_join_keys foreign_key  ","reflection join_reflection join_foreign_key  ","reflection join_ Array  ","reflection join_foreign_join_keys key  ","reflection join_primary_join_keys key  ","reflection join_reflection join_primary_key  ","(send\n  (lvar :primary_key_join_keys foreign_key _pairs) :map) inject ","(send\n  (lvar :primary_key_reflection join_foreign_key _pairs) :map) inject ","(send\n  (lvar :primary_key_ Array _pairs) :map) inject ","(send\n  (lvar :primary_join_keys key _foreign_join_keys key _pairs) :map) inject ","(send\n  (lvar :reflection join_primary_key _foreign_key_pairs) :map) inject ","(send\n  (lvar : Array _foreign_key_pairs) :map) inject ","(send\n  (lvar :primary_key zip ) :map) inject ","primary_key_join_keys foreign_key _pairs map ","primary_key_reflection join_foreign_key _pairs map ","primary_key_ Array _pairs map ","primary_join_keys key _foreign_join_keys key _pairs map ","reflection join_primary_key _foreign_key_pairs map "," Array _foreign_key_pairs map ","primary_key zip  map ","primary_join_keys key  zip ","reflection join_primary_key  zip "," Array  zip "]}," ActiveRecord Associations AssociationScope last_chain_scope":{"type":"method","name":"last_chain_scope","children":[],"call":["scope where ","table [] eq ","table [] ","reflection type "," bind ","table table_name ","owner class base_class name ","owner class base_class ","owner class ","owner [] ","key to_s ","join_keys foreign_key ","join_keys key ","reflection join_keys ","table name "," transform_value "," apply_scope ","owner class polymorphic_name ","reflection aliased_table ","reflection join_foreign_key ","reflection join_primary_key ","owner _read_attribute ","primary_key_foreign_key_pairs each ","primary_key zip "," Array ","scope where  where "," apply_scope  where ","reflection aliased_table  [] eq ","reflection aliased_table  [] ","reflection aliased_table  reflection aliased_table _name ","join_keys key  to_s ","join_keys join_keys foreign_key  ","join_keys reflection join_foreign_key  ","join_keys  Array  ","join_join_keys key s foreign_join_keys key  ","reflection join_keys  foreign_key ","join_join_keys key s join_keys key  ","reflection join_keys  key ","reflection join_join_keys key s ","reflection reflection join_keys  ","reflection aliased_table  name "," transform_owner class base_class name  "," transform_ transform_value  "," apply_scope where  "," apply_ apply_scope  ","reflection aliased_reflection aliased_table  ","reflection join_join_keys foreign_key  ","reflection join_reflection join_foreign_key  ","reflection join_ Array  ","reflection join_foreign_join_keys key  ","reflection join_primary_join_keys key  ","reflection join_reflection join_primary_key  ","primary_key_join_keys foreign_key _pairs each ","primary_key_reflection join_foreign_key _pairs each ","primary_key_ Array _pairs each ","primary_join_keys key _foreign_join_keys key _pairs each ","reflection join_primary_key _foreign_key_pairs each "," Array _foreign_key_pairs each ","primary_key zip  each ","primary_join_keys key  zip ","reflection join_primary_key  zip "," Array  zip "]}," ActiveRecord Associations AssociationScope get_bind_values":{"type":"method","name":"get_bind_values","children":[],"call":[]}," ActiveRecord Associations AssociationScope create":{"type":"method","name":"create","children":[],"call":[]}," ActiveRecord Associations AssociationScope BindSubstitution bind_value":{"type":"method","name":"bind_value","children":[],"call":["@block call ","scope bind_values ","alias_tracker connection substitute_at ","alias_tracker connection ","scope bind_values length ","alias_tracker connection alias_tracker connection substitute_at _at "]}," ActiveRecord Associations AssociationScope BindSubstitution initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Type HashLookupTypeMap fetch":{"type":"method","name":"fetch","children":[],"call":["@mapping fetch call ","@mapping fetch "," perform_fetch ","@cache [] fetch_or_store ","@cache [] "]}," ActiveRecord Type HashLookupTypeMap lookup":{"type":"method","name":"lookup","children":[],"call":["@mapping fetch call ","@mapping fetch "," default_value "," proc ","Type  default_value "," fetch "]}," ActiveRecord ModelSchema ClassMethods default_attributes":{"type":"method","name":"default_attributes","children":[],"call":[" attributes_builder build_from_database "," columns_hash transform_values "," columns_hash "," attributes_builder "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaCreation visit_AddColumn":{"type":"method","name":"visit_AddColumn","children":[],"call":[" add_column_options! "," column_options "," quote_column_name ","o name "," type_to_sql ","o scale ","o precision ","o limit ","o type "]}," ActiveRecord ConnectionAdapters PostgreSQL TableDefinition column":{"type":"method","name":"column","children":[],"call":["column array= ","options [] "," [] "," []  array= "]}," ActiveRecord ConnectionAdapters PostgreSQL Quoting quote":{"type":"method","name":"quote","children":[],"call":["value to_s ","value nan? ","value infinite? "," quote "," encode_range "," encode_array ","value finite? ","value hex? ","value binary? "," quote_string "," check_int_in_range ","value is_a? ","ActiveRecord  raise_int_wider_than_64bit "]}," ActiveRecord ConnectionAdapters PostgreSQL DatabaseStatements substitute_at":{"type":"method","name":"substitute_at","children":[],"call":["Arel Nodes BindParam  new ","index + "]}," ActiveRecord AttributeSet ensure_initialized":{"type":"method","name":"ensure_initialized","children":[],"call":[" write_from_database "," [] initialized? "," [] "]}," ActiveRecord AttributeSet Builder add_uninitialized_attributes":{"type":"method","name":"add_uninitialized_attributes","children":[],"call":["attributes []= ","Attribute  uninitialized "," types except each "," types except ","attributes keys "," types "," types [] ","attributes key? "," types each_key ","  types [] s except each ","  types [] s except ","  types [] s ","  types [] s [] ","  types [] s each_key "]}," ActiveRecord AttributeSet Builder build_attributes_from_values":{"type":"method","name":"build_attributes_from_values","children":[],"call":["hash []= ","Attribute  from_database ","additional_types fetch "," types [] "," types ","values each_with_object ","additional_additional_types fetch s fetch "," additional_types fetch s [] "," additional_types fetch s "]}," ActiveRecord AttributeMethods Dirty changed_in_place?":{"type":"method","name":"changed_in_place?","children":[],"call":["@attributes [] changed_in_place_from? ","@attributes [] "," original_raw_attribute "]}," ActiveRecord AttributeMethods Dirty changed":{"type":"method","name":"changed","children":[],"call":[" | "," changed_in_place "," emit_warning_if_needed "]}," ActiveRecord AttributeMethods Dirty changed?":{"type":"method","name":"changed?","children":[],"call":[" changed_in_place any? "," changed_in_place "," emit_warning_if_needed "]}," ActiveRecord Type Value text?":{"type":"method","name":"text?","children":[],"call":[]}," ActiveRecord Type String text?":{"type":"method","name":"text?","children":[],"call":[]}," ActiveRecord Type Integer type_cast_for_database":{"type":"method","name":"type_cast_for_database","children":[],"call":[" ensure_in_range "," type_cast "]}," ActiveRecord Type Decimal convert_float_to_big_decimal":{"type":"method","name":"convert_float_to_big_decimal","children":[],"call":["value to_d "," BigDecimal "," float_precision "," precision "," apply_scale "]}," ActiveRecord Locking Optimistic _create_record":{"type":"method","name":"_create_record","children":[],"call":[" class locking_column "," class "," locking_enabled? "]}," ActiveRecord Core custom_inspect_method_defined?":{"type":"method","name":"custom_inspect_method_defined?","children":[],"call":[" class instance_method owner != ","ActiveRecord Base  instance_method owner ","ActiveRecord Base  instance_method "," class instance_method owner "," class instance_method "," class "]}," ActiveRecord ConnectionAdapters SQLite3Adapter exec_rollback_db_transaction":{"type":"method","name":"exec_rollback_db_transaction","children":[],"call":["@connection rollback "," log "]}," ActiveRecord ConnectionAdapters PostgreSQL OID SpecializedString text?":{"type":"method","name":"text?","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQL OID DateTime type_cast_for_database":{"type":"method","name":"type_cast_for_database","children":[],"call":[" sub + "," sub "," format ","value year -@ + ","value year -@ ","value year ","value year <= ","value acts_like? "," has_precision? "]}," ActiveRecord ConnectionAdapters PostgreSQL DatabaseStatements exec_rollback_db_transaction":{"type":"method","name":"exec_rollback_db_transaction","children":[],"call":[" execute "," internal_execute "," cancel_any_running_query "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter MysqlDateTime has_precision?":{"type":"method","name":"has_precision?","children":[],"call":[" precision "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter exec_rollback_db_transaction":{"type":"method","name":"exec_rollback_db_transaction","children":[],"call":[" execute "," internal_execute "]}," ActiveRecord ConnectionAdapters SchemaStatements validate_index_length!":{"type":"method","name":"validate_index_length!","children":[],"call":[" raise "," allowed_index_name_length ","new_name length > ","new_name length "," index_name_length "]}," ActiveRecord ConnectionAdapters TableDefinition foreign_key":{"type":"method","name":"foreign_key","children":[],"call":[" foreign_keys []= "," foreign_keys "," foreign_keys push ","ActiveRecord Base  table_name_suffix ","ActiveRecord Base  table_name_prefix "," foreign_keys << "," new_foreign_key_definition ","ActiveRecord Base  ActiveRecord Base  table_name_suffix  ","ActiveRecord Base  ActiveRecord Base  table_name_prefix  "]}," ActiveRecord ConnectionAdapters Savepoints exec_rollback_to_savepoint":{"type":"method","name":"exec_rollback_to_savepoint","children":[],"call":[" execute "," internal_execute "]}," ActiveRecord ConnectionAdapters DatabaseStatements exec_rollback_to_savepoint":{"type":"method","name":"exec_rollback_to_savepoint","children":[],"call":[]}," ActiveRecord ConnectionAdapters DatabaseStatements rollback_to_savepoint":{"type":"method","name":"rollback_to_savepoint","children":[],"call":[" exec_rollback_to_savepoint "]}," ActiveRecord ConnectionAdapters DatabaseStatements exec_rollback_db_transaction":{"type":"method","name":"exec_rollback_db_transaction","children":[],"call":[]}," ActiveRecord Attributes ClassMethods persistable_attribute_names":{"type":"method","name":"persistable_attribute_names","children":[],"call":[" connection schema_cache columns_hash keys "," connection schema_cache columns_hash "," table_name "," connection schema_cache "," connection "]}," ActiveRecord LazyAttributeHash select":{"type":"method","name":"select","children":[],"call":["hash []= "," [] ","keys each_with_object "," types keys | | "," delegate_hash keys "," delegate_hash "," types keys | "," values keys "," values "," types keys "," types "," types keys | |  each_with_object "," types  types keys | |  | | "," delegate_hash  types keys | |  "," types  types keys | |  | "," values  types keys | |  "," types  types keys | |  "]}," ActiveRecord AttributeMethods Dirty changes_include?":{"type":"method","name":"changes_include?","children":[],"call":[" attribute_changed_in_place? "," mutation_tracker changed? "," mutation_tracker "]}," ActiveRecord AttributeMethods BeforeTypeCast attribute_came_from_user?":{"type":"method","name":"attribute_came_from_user?","children":[],"call":["@attributes [] came_from_user? ","@attributes [] "," sync_with_transaction_state "]}," ActiveRecord Attribute FromUser came_from_user?":{"type":"method","name":"came_from_user?","children":[],"call":[]}," ActiveRecord Attribute has_been_read?":{"type":"method","name":"has_been_read?","children":[],"call":[]}," ActiveRecord Attribute came_from_user?":{"type":"method","name":"came_from_user?","children":[],"call":[]}," ActiveRecord Associations HasManyAssociation counter_must_be_updated_by_has_many?":{"type":"method","name":"counter_must_be_updated_by_has_many?","children":[],"call":[" has_cached_counter? "," inverse_updates_counter_in_memory? ! "," inverse_updates_counter_in_memory? "]}," ActiveRecord Associations HasManyAssociation inverse_updates_counter_in_memory?":{"type":"method","name":"inverse_updates_counter_in_memory?","children":[],"call":["inverse == ","reflection inverse_of "," inverse_which_updates_counter_cache "," inverse_which_updates_counter_cache  == ","reflection  inverse_which_updates_counter_cache _of ","  inverse_which_updates_counter_cache _which_updates_counter_cache "]}," ActiveRecord Associations HasManyAssociation inverse_which_updates_counter_named":{"type":"method","name":"inverse_which_updates_counter_named","children":[],"call":["inverse_reflection counter_cache_column == ","inverse_reflection counter_cache_column ","inverse_reflection belongs_to? ","reflection klass _reflections values find ","reflection klass _reflections values ","reflection klass _reflections ","reflection klass "]}," ActiveRecord Associations HasManyAssociation inverse_which_updates_counter_cache":{"type":"method","name":"inverse_which_updates_counter_cache","children":[],"call":[" inverse_which_updates_counter_named "," cached_counter_attribute_name "," inverse_which_updates_ cached_counter_attribute_name d "]}," Associations ForeignAssociation foreign_key_present?":{"type":"method","name":"foreign_key_present?","children":[],"call":[" owner attribute_present? "," reflection active_record_primary_key "," reflection "," owner "," reflection klass primary_key "," reflection klass "]}," ActiveRecord Type Value hash":{"type":"method","name":"hash","children":[],"call":["(send\n  (self) :class) hash "," limit "," scale "," precision "," class "]}," ActiveRecord Type Serialized inspect":{"type":"method","name":"inspect","children":[],"call":["Kernel  instance_method bind call ","Kernel  instance_method bind ","Kernel  instance_method ","Kernel  instance_method bind_call "]}," ActiveRecord Type HashLookupTypeMap keys":{"type":"method","name":"keys","children":[],"call":["@mapping keys "]}," ActiveRecord Type HashLookupTypeMap key?":{"type":"method","name":"key?","children":[],"call":["@mapping key? "]}," ActiveRecord Type Decimal apply_scale":{"type":"method","name":"apply_scale","children":[],"call":["value round "," scale "]}," ActiveRecord Type Date type_cast_for_database":{"type":"method","name":"type_cast_for_database","children":[],"call":[" type_cast "]}," ActiveRecord Tasks PostgreSQLDatabaseTasks run_cmd_error":{"type":"method","name":"run_cmd_error","children":[],"call":["msg << ","args join ","failed to execute:\n dup ","failed to execute:\n +@ ","failed to execute:\n dup  << ","failed to execute:\n +@  << "]}," ActiveRecord Tasks PostgreSQLDatabaseTasks run_cmd":{"type":"method","name":"run_cmd","children":[],"call":[" fail "," run_cmd_error ","Kernel  system "," psql_env "]}," ActiveRecord Tasks MySQLDatabaseTasks run_cmd_error":{"type":"method","name":"run_cmd_error","children":[],"call":["msg << ","(str \"failed to execute: `\") dup ","(str \"failed to execute: `\") +@ ","(str \"failed to execute: `\") dup  << ","(str \"failed to execute: `\") +@  << "]}," ActiveRecord Tasks MySQLDatabaseTasks run_cmd":{"type":"method","name":"run_cmd","children":[],"call":[" fail "," run_cmd_error ","Kernel  system "]}," ActiveRecord PredicateBuilder can_be_bound?":{"type":"method","name":"can_be_bound?","children":[],"call":[" table associated_with? ! "," table associated_with? "," table "," handler_for is_a? "," handler_for ","value nil? ! ","value nil? "," table type respond_to? "," table type "," table type force_equality? "]}," ActiveRecord Relation Merger merge_preloads":{"type":"method","name":"merge_preloads","children":[],"call":[" relation includes! "," other includes_values "," other ","reflection name "," relation "," other includes_values empty? "," relation preload! "," other preload_values "," other preload_values empty? ","r class_name == "," other klass name "," other klass ","r class_name "," relation klass reflect_on_all_associations find "," relation klass reflect_on_all_associations "," relation klass "," other klass == "," relation includes_values "," relation preload_values "]}," ActiveRecord Reflection ThroughReflection inverse_name":{"type":"method","name":"inverse_name","children":[],"call":[" delegate_reflection send "," delegate_reflection "]}," ActiveRecord Reflection AbstractReflection check_validity_of_inverse!":{"type":"method","name":"check_validity_of_inverse!","children":[],"call":[" raise ","InverseOfAssociationNotFoundError  new "," inverse_of nil? "," inverse_of "," has_inverse? "," polymorphic? ","InverseOfAssociationRecursiveError  new "," inverse_of == "," polymorphic? ! "]}," ActiveRecord Reflection AbstractReflection inverse_of":{"type":"method","name":"inverse_of","children":[],"call":[" klass _reflect_on_association "," inverse_name "," klass "]}," ActiveRecord Reflection ClassMethods clear_reflections_cache":{"type":"method","name":"clear_reflections_cache","children":[],"call":[]}," ActiveRecord Migrator migrations_status":{"type":"method","name":"migrations_status","children":[],"call":["(send\n  (lvar :db_list) :+\n  (lvar :file_list)) sort_by ","db_list + ","db_list map! ","(send\n  (send nil :migration_files\n    (lvar :paths)) :map) compact ","(send\n  (lvar :name) :+\n  (lvar :scope)) humanize ","name + ","db_list delete ","ActiveRecord SchemaMigration  normalize_migration_number "," raise ","IllegalMigrationNameError  new "," parse_migration_filename "," migration_files map "," migration_files ","ActiveRecord SchemaMigration  normalized_versions "," Array ","(send\n  (lvar :db_list) :+\n  (lvar :(send\n  (send nil :migration_files\n    (lvar :paths)) :map) compact )) sort_by ","(send\n  (lvar :ActiveRecord SchemaMigration  normalized_versions ) :+\n  (lvar :file_list)) sort_by ","ActiveRecord SchemaMigration  normalized_versions  + ","ActiveRecord SchemaMigration  normalized_versions  map! ","(send\n  (send nil :migration_files\n    (lvar : Array )) :map) compact ","ActiveRecord SchemaMigration  normalized_versions  delete ","ActiveRecord SchemaMigration  normalized_ActiveRecord SchemaMigration  normalize_migration_number s "]}," ActiveRecord Migrator parse_migration_filename":{"type":"method","name":"parse_migration_filename","children":[],"call":["File  basename scan first ","File  basename scan ","File  basename "]}," ActiveRecord LegacyYamlAdapter Rails41 convert":{"type":"method","name":"convert","children":[],"call":[]}," ActiveRecord LegacyYamlAdapter convert":{"type":"method","name":"convert","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements data_sources":{"type":"method","name":"data_sources","children":[],"call":[" select_values "]}," ActiveRecord ConnectionAdapters PostgreSQL OID TypeMapInitializer query_conditions_for_initial_load":{"type":"method","name":"query_conditions_for_initial_load","children":[],"call":["(str \"              WHERE\\n\") % ","known_type_types join ","known_type_names join ","type_map keys map ","type_map keys ","@store keys map ","@store keys ","(str \"WHERE\\n\") % "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Enum cast_value":{"type":"method","name":"cast_value","children":[],"call":["value to_s "]}," ActiveRecord ConnectionAdapters MysqlAdapter Fields DateTime has_precision?":{"type":"method","name":"has_precision?","children":[],"call":[" precision "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter columns_for_distinct":{"type":"method","name":"columns_for_distinct","children":[],"call":["(zsuper) join ","(send\n  (send\n    (lvar :orders) :reject\n    (block-pass\n      (sym :blank?))) :map) reject map with_index ","(send\n  (send\n    (lvar :orders) :reject\n    (block-pass\n      (sym :blank?))) :map) reject map ","(send\n  (send\n    (lvar :orders) :reject\n    (block-pass\n      (sym :blank?))) :map) reject ","s gsub ","s to_sql ","s is_a? ","orders reject map ","orders reject ","(send\n  (lvar :order_columns) :<<\n  (zsuper)) join ","order_columns << "," visitor compile "," visitor ","(send\n  (send\n    (lvar :orders) :compact_blank) :map) compact_blank map with_index ","(send\n  (send\n    (lvar :orders) :compact_blank) :map) compact_blank map ","(send\n  (send\n    (lvar :orders) :compact_blank) :map) compact_blank ","orders compact_blank map ","orders compact_blank ","(zs to_sql uper) join ","(z visitor compile uper) join ","(s to_sql end\n  (s to_sql end\n    (lvar :orders to_sql ) :reject\n    (block-pas to_sql s to_sql \n      (s to_sql ym :blank?))) :map) reject map with_index ","( visitor compile end\n  ( visitor compile end\n    (lvar :order visitor compile ) :reject\n    (block-pa visitor compile  visitor compile \n      ( visitor compile ym :blank?))) :map) reject map with_index ","(s to_sql end\n  (s to_sql end\n    (lvar :orders to_sql ) :reject\n    (block-pas to_sql s to_sql \n      (s to_sql ym :blank?))) :map) reject map ","( visitor compile end\n  ( visitor compile end\n    (lvar :order visitor compile ) :reject\n    (block-pa visitor compile  visitor compile \n      ( visitor compile ym :blank?))) :map) reject map ","(s to_sql end\n  (s to_sql end\n    (lvar :orders to_sql ) :reject\n    (block-pas to_sql s to_sql \n      (s to_sql ym :blank?))) :map) reject ","( visitor compile end\n  ( visitor compile end\n    (lvar :order visitor compile ) :reject\n    (block-pa visitor compile  visitor compile \n      ( visitor compile ym :blank?))) :map) reject ","s to_sql  gs to_sql ub "," visitor compile  g visitor compile ub ","s to_sql  to_s to_sql ql "," visitor compile  to_ visitor compile ql ","s to_sql  is to_sql _a? "," visitor compile  i visitor compile _a? ","orders to_sql  reject map ","order visitor compile  reject map ","orders to_sql  reject ","order visitor compile  reject ","(s to_sql end\n  (lvar :order_columns to_sql ) :<<\n  (zs to_sql uper)) join ","( visitor compile end\n  (lvar :order_column visitor compile ) :<<\n  (z visitor compile uper)) join ","order_columns to_sql  << ","order_column visitor compile  << "," vis to_sql itor compile "," vi visitor compile itor compile "," vis to_sql itor "," vi visitor compile itor ","(s to_sql end\n  (s to_sql end\n    (lvar :orders to_sql ) :compact_blank) :map) compact_blank map with_index ","( visitor compile end\n  ( visitor compile end\n    (lvar :order visitor compile ) :compact_blank) :map) compact_blank map with_index ","(s to_sql end\n  (s to_sql end\n    (lvar :orders to_sql ) :compact_blank) :map) compact_blank map ","( visitor compile end\n  ( visitor compile end\n    (lvar :order visitor compile ) :compact_blank) :map) compact_blank map ","(s to_sql end\n  (s to_sql end\n    (lvar :orders to_sql ) :compact_blank) :map) compact_blank ","( visitor compile end\n  ( visitor compile end\n    (lvar :order visitor compile ) :compact_blank) :map) compact_blank ","orders to_sql  compact_blank map ","order visitor compile  compact_blank map ","orders to_sql  compact_blank ","order visitor compile  compact_blank "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter quoted_date":{"type":"method","name":"quoted_date","children":[],"call":[" sprintf ","value usec ","value respond_to? ","value acts_like? "," supports_datetime_with_precision? "," sub "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter supports_datetime_with_precision?":{"type":"method","name":"supports_datetime_with_precision?","children":[],"call":[" version >= "," version "," mariadb? "," database_version >= "," database_version "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter prepare_column_options":{"type":"method","name":"prepare_column_options","children":[],"call":["spec delete ","boolean === ","column type "]}," ActiveRecord ConnectionAdapters AbstractAdapter Version <=>":{"type":"method","name":"<=>","children":[],"call":["@version <=> ","version_string split map ","version_string split "]}," ActiveRecord ConnectionAdapters AbstractAdapter Version initialize":{"type":"method","name":"initialize","children":[],"call":["version_string split map ","version_string split "]}," ActiveRecord ConnectionAdapters SchemaStatements data_source_exists?":{"type":"method","name":"data_source_exists?","children":[],"call":[" data_sources include? ","name to_s "," data_sources "," select_values any? "," select_values "," data_source_sql ","name present? "," query_values any? "," query_values "]}," ActiveRecord ConnectionAdapters SchemaStatements data_sources":{"type":"method","name":"data_sources","children":[],"call":[" tables "," tables | "," views "," select_values "," data_source_sql "," query_values "]}," ActiveRecord ConnectionAdapters DatabaseStatements transaction_state":{"type":"method","name":"transaction_state","children":[],"call":[" current_transaction state "," current_transaction "]}," ActiveRecord AttributeSet ==":{"type":"method","name":"==","children":[],"call":[" attributes == ","other attributes "," attributes "]}," ActiveRecord LazyAttributeHash ==":{"type":"method","name":"==","children":[],"call":[" materialize == "," materialize ","other materialize ","other is_a? "]}," ActiveRecord AttributeMethods Dirty clear_changed_attributes_cache":{"type":"method","name":"clear_changed_attributes_cache","children":[],"call":[" remove_instance_variable "]}," ActiveRecord Associations BelongsToAssociation counter_cache_available_in_memory?":{"type":"method","name":"counter_cache_available_in_memory?","children":[],"call":[" target respond_to? "," target "]}," ActiveRecord Associations Association skip_statement_cache?":{"type":"method","name":"skip_statement_cache?","children":[],"call":[" reflection source_reflection active_record default_scopes any? "," reflection source_reflection active_record default_scopes "," reflection source_reflection active_record "," reflection source_reflection "," reflection "," klass default_scopes any? "," klass default_scopes "," klass "," klass current_scope "," scope eager_loading? "," scope "," reflection scope_chain any? "," reflection scope_chain "," klass scope_attributes? "," reflection has_scope? ","scope eager_loading? "]}," ActiveRecord AssociationRelation create!":{"type":"method","name":"create!","children":[],"call":["@association create! "," scoping ","@association scoping "," _deprecated_scope_block "," _deprecated_scope_ _deprecated_scope_block  "]}," ActiveRecord AssociationRelation create":{"type":"method","name":"create","children":[],"call":["@association create "," scoping ","@association scoping "," _deprecated_scope_block "," _deprecated_scope_ _deprecated_scope_block  "]}," ActiveRecord AssociationRelation build":{"type":"method","name":"build","children":[],"call":["@association build "," scoping ","@association scoping "," _deprecated_scope_block "," _new "," current_scope_restoring_block "," build ","attributes collect ","attributes is_a? "," _deprecated_scope_ _deprecated_scope_block  "," _deprecated_scope_ current_scope_restoring_block  "," current_scope_restoring_ _deprecated_scope_block  "," current_scope_restoring_ current_scope_restoring_block  "]}," ActiveRecord Generators ModelGenerator application_record_file_name":{"type":"method","name":"application_record_file_name","children":[],"call":[" namespaced_path "," mountable_engine? "]}," ActiveRecord Generators ModelGenerator application_record_exist?":{"type":"method","name":"application_record_exist?","children":[],"call":["File  exist? "," application_record_file_name "," in_root "]}," ActiveRecord Generators ModelGenerator generate_application_record":{"type":"method","name":"generate_application_record","children":[],"call":[" template "," application_record_file_name "," application_record_exist? ! "," application_record_exist? "," behavior == "," behavior ","File  exist? ! ","File  exist? "]}," ActiveRecord Generators Migration primary_key_type":{"type":"method","name":"primary_key_type","children":[],"call":[" options [] "," options "]}," ActiveRecord Validations raise_validation_error":{"type":"method","name":"raise_validation_error","children":[],"call":[" raise ","RecordInvalid  new "]}," ActiveRecord Validations default_validation_context":{"type":"method","name":"default_validation_context","children":[],"call":[" new_record? "]}," ActiveRecord Validations PresenceValidator validate_each":{"type":"method","name":"validate_each","children":[],"call":["Array  wrap reject ","Array  wrap ","record class _reflect_on_association ","record class "," should_validate? "]}," ActiveRecord Validations LengthValidator validate_each":{"type":"method","name":"validate_each","children":[],"call":["association_or_value target reject ","association_or_value target ","association_or_value loaded? ","association_or_value respond_to? "," associations_are_dirty? "," should_validate? ","association_or_value target reject  target reject ","association_or_value target reject  target ","association_or_value target reject  loaded? ","association_or_value target reject  respond_to? "]}," ActiveRecord Validations AssociatedValidator valid_object?":{"type":"method","name":"valid_object?","children":[],"call":["record valid? ","record marked_for_destruction? ","record respond_to? "]}," ActiveRecord Validations ClassMethods validates_absence_of":{"type":"method","name":"validates_absence_of","children":[],"call":[" validates_with "," _merge_attributes "]}," ActiveRecord Validations AbsenceValidator validate_each":{"type":"method","name":"validate_each","children":[],"call":["Array  wrap reject ","Array  wrap ","record class _reflect_on_association ","record class "," should_validate? "]}," ActiveRecord TypeCaster Map type_cast_for_database":{"type":"method","name":"type_cast_for_database","children":[],"call":["type serialize "," types type_for_attribute ","attr_name to_s "," types ","value is_a? "," type_for_attribute "," types type_for_attribute  serialize "," type_for_attribute  serialize ","  types type_for_attribute s  types type_for_attribute _for_attribute ","  type_for_attribute s  type_for_attribute _for_attribute ","  types type_for_attribute s ","  type_for_attribute s ","  types type_for_attribute _for_attribute ","  type_for_attribute _for_attribute "]}," ActiveRecord TypeCaster Map initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord TypeCaster Connection column_for":{"type":"method","name":"column_for","children":[],"call":[" connection schema_cache columns_hash [] ","attribute_name to_s "," connection schema_cache columns_hash "," table_name "," connection schema_cache "," connection "," connection schema_cache data_source_exists? "]}," ActiveRecord TypeCaster Connection type_cast_for_database":{"type":"method","name":"type_cast_for_database","children":[],"call":[" connection type_cast_from_column "," connection "," column_for ","value is_a? ","type serialize "," type_for_attribute "," connection type_cast_from_ column_for  "," connection  type_for_attribute _cast_from_column ","  column_for _for "," type_for_attribute  serialize ","  type_for_attribute _for_attribute "]}," ActiveRecord TypeCaster Connection initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Type current_adapter_name":{"type":"method","name":"current_adapter_name","children":[],"call":["ActiveRecord Base  connection adapter_name downcase to_sym ","ActiveRecord Base  connection adapter_name downcase ","ActiveRecord Base  connection adapter_name ","ActiveRecord Base  connection "," adapter_name_from "]}," ActiveRecord Type lookup":{"type":"method","name":"lookup","children":[],"call":[" registry lookup "," registry "]}," ActiveRecord Type register":{"type":"method","name":"register","children":[],"call":[" registry register "," registry "]}," ActiveRecord Type Time serialize":{"type":"method","name":"serialize","children":[],"call":["Value  new "]}," ActiveRecord Type Serialized encoded":{"type":"method","name":"encoded","children":[],"call":[" coder dump "," coder "," default_value? ","payload force_encoding ","payload dup ","payload frozen? ","payload encoding != ","payload encoding "," binary? ","ActiveModel Type Binary Data  new ","@subtype binary? ","payload dup  force_encoding "," coder dump  force_encoding ","payload dup  dup "," coder dump  dup ","payload dup  frozen? "," coder dump  frozen? ","payload dup  encoding != "," coder dump  encoding != ","payload dup  encoding "," coder dump  encoding "]}," ActiveRecord Type Serialized assert_valid_value":{"type":"method","name":"assert_valid_value","children":[],"call":[" coder assert_valid_value "," coder "," coder respond_to? "]}," ActiveRecord Type Serialized serialize":{"type":"method","name":"serialize","children":[],"call":[" coder dump "," coder "," default_value? ","value nil? "]}," ActiveRecord Type Serialized deserialize":{"type":"method","name":"deserialize","children":[],"call":[" coder load "," coder "," default_value? "]}," ActiveRecord Type Internal Timezone default_timezone":{"type":"method","name":"default_timezone","children":[],"call":["ActiveRecord Base  default_timezone ","ActiveRecord  default_timezone "]}," ActiveRecord Type Internal Timezone is_utc?":{"type":"method","name":"is_utc?","children":[],"call":["ActiveRecord Base  default_timezone == ","ActiveRecord Base  default_timezone ","ActiveRecord  default_timezone == ","ActiveRecord  default_timezone "," default_timezone == "," default_timezone "]}," ActiveRecord Type Internal AbstractJson accessor":{"type":"method","name":"accessor","children":[],"call":[]}," ActiveRecord Type Internal AbstractJson serialize":{"type":"method","name":"serialize","children":[],"call":[" ActiveSupport JSON  encode ","value is_a? ","value nil? "]}," ActiveRecord Type Internal AbstractJson deserialize":{"type":"method","name":"deserialize","children":[],"call":[" ActiveSupport JSON  decode ","value is_a? "]}," ActiveRecord Type Internal AbstractJson type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord Type DecorationRegistration matches_options?":{"type":"method","name":"matches_options?","children":[],"call":["kwargs [] == ","kwargs [] "," options all? "," options "]}," ActiveRecord Type DecorationRegistration priority":{"type":"method","name":"priority","children":[],"call":[" | "]}," ActiveRecord Type DecorationRegistration matches?":{"type":"method","name":"matches?","children":[],"call":[" matches_options? "," matches_adapter? "]}," ActiveRecord Type DecorationRegistration call":{"type":"method","name":"call","children":[],"call":[" klass new "," klass ","registry lookup ","kwargs except "," options keys "," options "]}," ActiveRecord Type DecorationRegistration initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Type Registration has_adapter_conflict?":{"type":"method","name":"has_adapter_conflict?","children":[],"call":["other override nil? ","other override "," adapter ","other adapter "," override nil? "," override "]}," ActiveRecord Type Registration same_priority_except_adapter?":{"type":"method","name":"same_priority_except_adapter?","children":[],"call":[" priority_except_adapter == ","other priority_except_adapter "," priority_except_adapter "]}," ActiveRecord Type Registration conflicts_with?":{"type":"method","name":"conflicts_with?","children":[],"call":[" has_adapter_conflict? "," same_priority_except_adapter? "]}," ActiveRecord Type Registration matches_adapter?":{"type":"method","name":"matches_adapter?","children":[],"call":["adapter == "," adapter "," adapter nil? "]}," ActiveRecord Type Registration priority_except_adapter":{"type":"method","name":"priority_except_adapter","children":[],"call":[" priority & "," priority "]}," ActiveRecord Type Registration priority":{"type":"method","name":"priority","children":[],"call":[" override "," adapter "]}," ActiveRecord Type Registration <=>":{"type":"method","name":"<=>","children":[],"call":[" priority <=> ","other priority "," priority "," raise ","TypeConflictError  new ","(str \"Type \") squish ","other adapter "," name "," conflicts_with? "]}," ActiveRecord Type Registration matches?":{"type":"method","name":"matches?","children":[],"call":[" matches_adapter? ","type_name == "," name "]}," ActiveRecord Type Registration call":{"type":"method","name":"call","children":[],"call":[" block call "," block ","kwargs any? "]}," ActiveRecord Type Registration initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Type AdapterSpecificRegistry find_registration":{"type":"method","name":"find_registration","children":[],"call":["(send\n  (send nil :registrations) :select) max ","registration matches? "," registrations select "," registrations "]}," ActiveRecord Type AdapterSpecificRegistry registration_klass":{"type":"method","name":"registration_klass","children":[],"call":[]}," ActiveRecord Type AdapterSpecificRegistry add_modifier":{"type":"method","name":"add_modifier","children":[],"call":[" registrations << ","DecorationRegistration  new "," registrations "]}," ActiveRecord Transactions update_attributes_from_transaction_state":{"type":"method","name":"update_attributes_from_transaction_state","children":[],"call":[" clear_transaction_record_state "," restore_transaction_record_state ","transaction_state rolledback? ","transaction_state finalized? ","transaction_state fully_completed? "," force_clear_transaction_record_state ","transaction_state fully_committed? ","transaction_state fully_rolledback? "]}," ActiveRecord Transactions sync_with_transaction_state":{"type":"method","name":"sync_with_transaction_state","children":[],"call":[" update_attributes_from_transaction_state "," clear_transaction_record_state "," restore_transaction_record_state ","transaction_state fully_rolledback? ","transaction_state rolledback? ","transaction_state committed? "," force_clear_transaction_record_state ","transaction_state fully_committed? "]}," ActiveRecord Transactions has_transactional_callbacks?":{"type":"method","name":"has_transactional_callbacks?","children":[],"call":[" _before_commit_callbacks empty? ! "," _before_commit_callbacks empty? "," _before_commit_callbacks "," _commit_callbacks empty? ! "," _commit_callbacks empty? "," _commit_callbacks "," _rollback_callbacks empty? ! "," _rollback_callbacks empty? "," _rollback_callbacks "]}," ActiveRecord Transactions set_transaction_state":{"type":"method","name":"set_transaction_state","children":[],"call":[]}," ActiveRecord Transactions before_committed!":{"type":"method","name":"before_committed!","children":[],"call":[" _run_before_commit_callbacks "," _run_before_commit_without_transaction_enrollment_callbacks "]}," ActiveRecord Transactions ClassMethods raise_in_transactional_callbacks=":{"type":"method","name":"raise_in_transactional_callbacks=","children":[],"call":["ActiveSupport Deprecation  warn "]}," ActiveRecord Transactions ClassMethods raise_in_transactional_callbacks":{"type":"method","name":"raise_in_transactional_callbacks","children":[],"call":["ActiveSupport Deprecation  warn "]}," ActiveRecord Transactions ClassMethods after_rollback_without_transaction_enrollment":{"type":"method","name":"after_rollback_without_transaction_enrollment","children":[],"call":[" set_callback "," set_options_for_callbacks! "]}," ActiveRecord Transactions ClassMethods after_commit_without_transaction_enrollment":{"type":"method","name":"after_commit_without_transaction_enrollment","children":[],"call":[" set_callback "," set_options_for_callbacks! "]}," ActiveRecord Transactions ClassMethods before_commit_without_transaction_enrollment":{"type":"method","name":"before_commit_without_transaction_enrollment","children":[],"call":[" set_callback "," set_options_for_callbacks! "]}," ActiveRecord Transactions ClassMethods after_destroy_commit":{"type":"method","name":"after_destroy_commit","children":[],"call":[" set_callback "," set_options_for_callbacks! "," prepend_option "]}," ActiveRecord Transactions ClassMethods after_update_commit":{"type":"method","name":"after_update_commit","children":[],"call":[" set_callback "," set_options_for_callbacks! "," prepend_option "]}," ActiveRecord Transactions ClassMethods after_create_commit":{"type":"method","name":"after_create_commit","children":[],"call":[" set_callback "," set_options_for_callbacks! "," prepend_option "]}," ActiveRecord Transactions ClassMethods before_commit":{"type":"method","name":"before_commit","children":[],"call":[" set_callback "," set_options_for_callbacks! "]}," ActiveRecord TouchLater belongs_to_touch_method":{"type":"method","name":"belongs_to_touch_method","children":[],"call":[]}," ActiveRecord TouchLater has_defer_touch_attrs?":{"type":"method","name":"has_defer_touch_attrs?","children":[],"call":["@_defer_touch_attrs present? "]}," ActiveRecord TouchLater touch_deferred_attributes":{"type":"method","name":"touch_deferred_attributes","children":[],"call":[" touch "," persisted? "," has_defer_touch_attrs? "]}," ActiveRecord TouchLater surreptitiously_touch":{"type":"method","name":"surreptitiously_touch","children":[],"call":[" clear_attribute_changes "," write_attribute ","attrs each "," clear_attribute_change "," _write_attribute ","attr_names each "]}," ActiveRecord TouchLater touch":{"type":"method","name":"touch","children":[],"call":[" has_defer_touch_attrs? "]}," ActiveRecord TouchLater touch_later":{"type":"method","name":"touch_later","children":[],"call":["ActiveRecord Associations Builder BelongsTo  touch_record ","r name ","r foreign_key ","r options [] ","r options "," class reflect_on_all_associations each "," class reflect_on_all_associations "," class "," class connection add_transaction_record "," class connection "," surreptitiously_touch "," current_time_from_proper_timezone "," timestamp_attributes_for_update_in_model "," raise "," persisted? ","(str \"          cannot touch on a new or destroyed record object. Consider using\\n\") squish "," changes_to_save "," add_to_transaction "," class attribute_aliases [] "," class attribute_aliases ","name to_s ","names map! ","names empty? "," _raise_record_not_touched_error ","ActiveRecord Associations Builder HasOne  touch_record ","r macro == ","r macro ","ActiveRecord Associations Builder BelongsTo  r options [] _record ","r name to_s  "," surreptitiously_r options []  ","(str \"          cannot r options []  on a new or destroyed record object. Consider using\\n\") squish ","name to_s  to_s ","name to_s s map! ","name to_s s empty? "," _raise_record_not_r options [] ed_error ","ActiveRecord Associations Builder HasOne  r options [] _record "]}," ActiveRecord Tasks DatabaseTasks check_protected_environments!":{"type":"method","name":"check_protected_environments!","children":[],"call":[" raise ","ActiveRecord EnvironmentMismatchError  new ","stored != ","ActiveRecord ProtectedEnvironmentError  new ","ActiveRecord Migrator  protected_environment? ","ActiveRecord Migrator  last_stored_environment ","ActiveRecord Migrator  current_environment ","ENV  [] ","ActiveRecord Base  connection migration_context protected_environment? ","ActiveRecord Base  connection migration_context ","ActiveRecord Base  connection ","ActiveRecord Base  connection migration_context last_stored_environment ","ActiveRecord Base  connection migration_context current_environment "," check_current_protected_environment! "," configs_for each "," configs_for ","ActiveRecord Migrator  last_stored_environment  != ","ActiveRecord Base  connection migration_context last_stored_environment  != ","ActiveRecord Migrator  last_ActiveRecord Migrator  last_stored_environment _environment ","ActiveRecord Migrator  last_ActiveRecord Base  connection migration_context last_stored_environment _environment ","ActiveRecord Migrator  ActiveRecord Migrator  current_environment _environment ","ActiveRecord Migrator  ActiveRecord Base  connection migration_context current_environment _environment ","ActiveRecord Base  connection migration_context last_ActiveRecord Migrator  last_stored_environment _environment ","ActiveRecord Base  connection migration_context last_ActiveRecord Base  connection migration_context last_stored_environment _environment ","ActiveRecord Base  connection migration_context ActiveRecord Migrator  current_environment _environment ","ActiveRecord Base  connection migration_context ActiveRecord Base  connection migration_context current_environment _environment "," check_ActiveRecord Migrator  current_environment _protected_environment! "," check_ActiveRecord Base  connection migration_context current_environment _protected_environment! "]}," ActiveRecord TableMetadata polymorphic_association?":{"type":"method","name":"polymorphic_association?","children":[],"call":[" association polymorphic? "," association "," reflection "]}," ActiveRecord TableMetadata associated_table":{"type":"method","name":"associated_table","children":[],"call":["TableMetadata  new ","Arel Table  new ","TypeCaster Connection  new "," klass ","association_klass arel_table alias ","association_klass arel_table ","association klass ","association polymorphic? ! ","association polymorphic? "," klass _reflect_on_association ","table_name == "," arel_table name "," arel_table ","association ! ","table_name singularize ","table_name to_s singularize ","table_name to_s ","arel_table alias ","arel_table name != ","arel_table name ","reflection klass ","reflection polymorphic? ! ","reflection polymorphic? "," block_given? ","reflection ! ","association_klass Arel Table  new  alias ","association_klass association_klass arel_table alias  alias ","association_klass arel_table alias  alias ","association_klass association_klass arel_table  alias ","association klass  arel_table alias ","reflection klass  arel_table alias "," klass _reflect_on_association _klass arel_table alias ","association_klass Arel Table  new  ","association_klass association_klass arel_table alias  ","association_klass arel_table alias  ","association_klass association_klass arel_table  ","association klass  arel_table ","reflection klass  arel_table "," klass _reflect_on_association _klass arel_table "," klass _reflect_on_association  klass "," klass _reflect_on_association  polymorphic? ! "," klass _reflect_on_association  polymorphic? "," klass _reflect_on_ klass _reflect_on_association  "," Arel Table  new  name "," association_klass arel_table alias  name "," arel_table alias  name "," association_klass arel_table  name "," Arel Table  new  "," association_klass arel_table alias  "," arel_table alias  "," association_klass arel_table  "," klass _reflect_on_association  ! ","Arel Table  new  alias ","arel_table alias  alias ","association_klass arel_table  alias ","Arel Table  new  name != ","association_klass arel_table alias  name != ","arel_table alias  name != ","association_klass arel_table  name != ","Arel Table  new  name ","association_klass arel_table alias  name ","arel_table alias  name ","association_klass arel_table  name "]}," ActiveRecord TableMetadata associated_with?":{"type":"method","name":"associated_with?","children":[],"call":[" klass _reflect_on_association "," klass ","table_name singularize ","ActiveRecord  deprecator warn ","reflection plural_name ","reflection name ","ActiveRecord  deprecator ","ActiveRecord  allow_deprecated_singular_associations_name "]}," ActiveRecord TableMetadata type":{"type":"method","name":"type","children":[],"call":["Type Value  new "," klass type_for_attribute ","column_name to_s "," klass ","Type  default_value "," types type_for_attribute "," types "," arel_table type_for_attribute "," arel_table "]}," ActiveRecord TableMetadata arel_attribute":{"type":"method","name":"arel_attribute","children":[],"call":[" arel_table [] "," arel_table "," klass arel_attribute "," klass "]}," ActiveRecord TableMetadata resolve_column_aliases":{"type":"method","name":"resolve_column_aliases","children":[],"call":["new_hash []= ","new_hash delete "," klass attribute_alias "," klass "," klass attribute_alias? ","key is_a? ","hash each ","Hash  [] ","hash dup "," klass attribute_aliases [] ","key to_s "," klass attribute_aliases ","hash each_key ","Hash  []  []= ","hash dup  []= ","Hash  []  delete ","hash dup  delete "]}," ActiveRecord TableMetadata initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord SuppressorRegistry initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Suppressor save!":{"type":"method","name":"save!","children":[],"call":["SuppressorRegistry  suppressed [] "," class name "," class ","SuppressorRegistry  suppressed ","Suppressor  registry [] ","Suppressor  registry "]}," ActiveRecord Suppressor save":{"type":"method","name":"save","children":[],"call":["SuppressorRegistry  suppressed [] "," class name "," class ","SuppressorRegistry  suppressed ","Suppressor  registry [] ","Suppressor  registry "]}," ActiveRecord Suppressor ClassMethods suppress":{"type":"method","name":"suppress","children":[],"call":["SuppressorRegistry  suppressed []= "," name ","SuppressorRegistry  suppressed ","SuppressorRegistry  suppressed [] ","Suppressor  registry []= ","Suppressor  registry ","Suppressor  registry [] "]}," ActiveRecord SecureToken ClassMethods generate_unique_secure_token":{"type":"method","name":"generate_unique_secure_token","children":[],"call":["SecureRandom  base58 "]}," ActiveRecord SecureToken ClassMethods has_secure_token":{"type":"method","name":"has_secure_token","children":[],"call":[" send "," class generate_unique_secure_token "," class "," before_create "," update! "," define_method "," require "," raise ","length < "," write_attribute "," query_attribute ! "," query_attribute "," new_record? "," set_callback ","on == "]}," ActiveRecord Scoping ClassMethods scope_attributes?":{"type":"method","name":"scope_attributes?","children":[],"call":[" current_scope "]}," ActiveRecord Scoping ClassMethods scope_attributes":{"type":"method","name":"scope_attributes","children":[],"call":[" all scope_for_create "," all "]}," ActiveRecord Scoping Default ClassMethods scope_attributes?":{"type":"method","name":"scope_attributes?","children":[],"call":[" respond_to? "," default_scopes any? "," default_scopes "]}," ActiveRecord SchemaDumper index_parts":{"type":"method","name":"index_parts","children":[],"call":["index_parts << ","index comment inspect ","index comment ","index type inspect ","index type ","index using inspect ","index using ","index where inspect ","index where ","index orders inspect ","index orders ","index_orders any? ","Hash  [] inspect ","Hash  [] ","index columns zip ","index lengths ","index columns ","index_lengths any? ","(or\n  (send\n    (lvar :index) :lengths)\n  (array)) compact ","index unique ","index name inspect ","index name ","index columns inspect "," format_options ","index orders present? ","index lengths present? ","@connection default_index_type? ! ","@connection default_index_type? "," format_index_parts ","index opclasses ","index opclasses present? ","index nulls_not_distinct inspect ","index nulls_not_distinct ","index include inspect ","index include ","(or\n  (send\n    (lvar :index) :lengths)\n  (array)) compact  any? "]}," ActiveRecord SchemaDumper indexes_in_create":{"type":"method","name":"indexes_in_create","children":[],"call":["stream puts ","index_statements sort join ","index_statements sort "," index_parts join "," index_parts ","indexes map ","(lvasgn :indexes\n  (send\n    (ivar :@connection) :indexes\n    (lvar :table))) any? ","@connection indexes ","unique_key_names include? ","index name ","indexes reject ","unique_keys collect ","(lvasgn :unique_keys\n  (send\n    (ivar :@connection) :unique_keys\n    (lvar :table))) any? ","@connection unique_keys ","@connection supports_unique_keys? ","exclusion_constraint_names include? ","exclusion_constraints collect ","(lvasgn :exclusion_constraints\n  (send\n    (ivar :@connection) :exclusion_constraints\n    (lvar :table))) any? ","@connection exclusion_constraints ","@connection supports_exclusion_constraints? ","@connection indexes  map ","(lvasgn :@connection indexes \n  (send\n    (ivar :@connection) :@connection indexes \n    (lvar :table))) any? ","@connection @connection indexes  ","unique_keys collect  include? ","@connection indexes  reject ","@connection unique_keys  collect ","(lvasgn :@connection unique_keys \n  (send\n    (ivar :@connection) :@connection unique_keys \n    (lvar :table))) any? ","@connection @connection unique_keys  ","@connection supports_@connection unique_keys ? ","exclusion_constraints collect  include? ","@connection exclusion_constraints  collect ","(lvasgn :@connection exclusion_constraints \n  (send\n    (ivar :@connection) :@connection exclusion_constraints \n    (lvar :table))) any? ","@connection @connection exclusion_constraints  ","@connection supports_@connection exclusion_constraints ? "]}," ActiveRecord Sanitization ClassMethods sanitize_sql_for_order":{"type":"method","name":"sanitize_sql_for_order","children":[],"call":[" sanitize_sql_array ","condition first to_s include? ","condition first to_s ","condition first ","condition is_a? ","Arel  sql ","condition [] ","String  new ","condition first instance_of? ! ","condition first instance_of? ","condition first kind_of? "," enforce_raw_sql_whitelist "," disallow_raw_sql! "," connection column_name_with_order_matcher "," connection "]}," ActiveRecord Relation load_records":{"type":"method","name":"load_records","children":[],"call":["records freeze "]}," ActiveRecord Relation cache_key":{"type":"method","name":"cache_key","children":[],"call":["@klass collection_cache_key ","@cache_keys [] "," klass collection_cache_key "," klass "]}," ActiveRecord Relation one?":{"type":"method","name":"one?","children":[],"call":[" size == "," size "," records one? "," records "," limit_value "," block_given? "," to_a one? "," to_a "," limited_count == "," limited_count "," loaded? ","args present? "]}," ActiveRecord Relation none?":{"type":"method","name":"none?","children":[],"call":[" empty? "," block_given? ","args present? "]}," ActiveRecord Relation records":{"type":"method","name":"records","children":[],"call":[" load "]}," ActiveRecord Relation arel_attribute":{"type":"method","name":"arel_attribute","children":[],"call":[" klass arel_attribute "," table "," klass "," table [] "]}," ActiveRecord Relation WhereClauseFactory build":{"type":"method","name":"build","children":[],"call":["WhereClause  new "," raise ","opts class "," predicate_builder build_from_hash "," predicate_builder "," predicate_builder create_binds ","attributes stringify_keys! "," klass send "," klass "," predicate_builder resolve_column_aliases ","(lvar :opts) + ","other empty? "," build_for_case_sensitive "," perform_case_sensitive? ","other last "," klass sanitize_sql "," klass send  stringify_keys! "," predicate_builder resolve_column_aliases  stringify_keys! "]}," ActiveRecord Relation WhereClauseFactory initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Relation WhereClause wrap_sql_literal":{"type":"method","name":"wrap_sql_literal","children":[],"call":["Arel Nodes Grouping  new ","Arel  sql "," String  === "]}," ActiveRecord Relation WhereClause non_empty_predicates":{"type":"method","name":"non_empty_predicates","children":[],"call":[" predicates - "," predicates "]}," ActiveRecord Relation WhereClause predicates_with_wrapped_sql_literals":{"type":"method","name":"predicates_with_wrapped_sql_literals","children":[],"call":[" wrap_sql_literal ","Arel Nodes Equality  === "," non_empty_predicates map "," non_empty_predicates "]}," ActiveRecord Relation WhereClause binds_except":{"type":"method","name":"binds_except","children":[],"call":["columns include? ","attr name "," binds reject "," binds "]}," ActiveRecord Relation WhereClause predicates_except":{"type":"method","name":"predicates_except","children":[],"call":["columns include? ","subrelation name to_s ","subrelation name ","node right ","node left ","node left kind_of? "," predicates reject "," predicates "]}," ActiveRecord Relation WhereClause invert_predicate":{"type":"method","name":"invert_predicate","children":[],"call":["Arel Nodes Not  new ","Arel Nodes SqlLiteral  new ","Arel Nodes NotEqual  new ","node right ","node left ","Arel Nodes NotIn  new "," raise ","Arel Nodes IsNotDistinctFrom  new ","Arel Nodes IsDistinctFrom  new ","node invert "]}," ActiveRecord Relation WhereClause inverted_predicates":{"type":"method","name":"inverted_predicates","children":[],"call":[" invert_predicate "," predicates map "," predicates "]}," ActiveRecord Relation WhereClause non_conflicting_binds":{"type":"method","name":"non_conflicting_binds","children":[],"call":["conflicts include? ","attr name "," binds reject "," binds ","node name to_s ","node name ","conflicts map! "," referenced_columns & ","other referenced_columns "," referenced_columns "," referenced_columns &  include? "," referenced_columns &  map! "]}," ActiveRecord Relation WhereClause equality_node?":{"type":"method","name":"equality_node?","children":[],"call":["node operator == ","node operator ","node respond_to? ","node equality? ","node is_a? ! ","node is_a? "]}," ActiveRecord Relation WhereClause predicates_unreferenced_by":{"type":"method","name":"predicates_unreferenced_by","children":[],"call":["other referenced_columns include? ","n left ","other referenced_columns "," equality_node? "," predicates reject "," predicates ","ActiveSupport Deprecation  warn ","(str \"                Merging (\") squish ","ref to_sql ","node to_sql ","node == ","referenced_columns [] ","node left ","node left is_a? "," extract_attribute ","other referenced_columns [] erenced_columns include? ","other other referenced_columns  include? ","other referenced_columns [] erenced_columns ","other other referenced_columns  ","referenced_columns []  to_sql ","referenced_columns [] erenced_columns [] ","other referenced_columns  [] "]}," ActiveRecord Relation WhereClause referenced_columns":{"type":"method","name":"referenced_columns","children":[],"call":["Set  new "," equality_node? "," predicates select "," predicates ","hash []= ","node left ","node left is_a? "," extract_attribute "," predicates each_with_object "," each_attributes "]}," ActiveRecord Relation WhereClause empty":{"type":"method","name":"empty","children":[],"call":[]}," ActiveRecord Relation WhereClause invert":{"type":"method","name":"invert","children":[],"call":["WhereClause  new "," binds "," inverted_predicates ","Arel Nodes Not  new "," ast "," invert_predicate "," predicates map "," predicates ","as == "," predicates first "," predicates size == "," predicates size "]}," ActiveRecord Relation WhereClause ==":{"type":"method","name":"==","children":[],"call":[" binds == ","other binds "," binds "," predicates == ","other predicates "," predicates ","other is_a? "]}," ActiveRecord Relation WhereClause ast":{"type":"method","name":"ast","children":[],"call":["Arel Nodes And  new "," predicates_with_wrapped_sql_literals ","predicates first ","predicates one? ","  predicates_with_wrapped_sql_literals _with_wrapped_sql_literals "," predicates_with_wrapped_sql_literals  first "," predicates_with_wrapped_sql_literals  one? "]}," ActiveRecord Relation WhereClause to_h":{"type":"method","name":"to_h","children":[],"call":["(send\n  (lvar :equalities) :map) to_h ","node right val ","node right ","node right map ","binds fetch ","name to_s ","node left name ","node left ","equalities map ","(send\n  (send\n    (self) :binds) :map) to_h ","attr value ","attr name "," binds map "," binds ","node left relation name == ","node left relation name ","node left relation ","equalities select "," predicates grep "," predicates "," extract_node_value ","node left name to_s "," equalities ","hash []= "," equalities each_with_object ","(send\n  (lvar : predicates grep ) :map) to_h ","(send\n  (lvar : equalities ) :map) to_h ","(send\n  (send\n    (self) :binds) :map) to_h  fetch ","node left name  to_s ","node left name to_s  to_s ","node left node left name  ","node left node left name to_s  "," predicates grep  map "," equalities  map ","(send\n  (send\n    (self) :(send\n  (send\n    (self) :binds) :map) to_h ) :map) to_h ","attr  extract_node_value  ","attr node left name  ","attr node left name to_s  "," (send\n  (send\n    (self) :binds) :map) to_h  map "," (send\n  (send\n    (self) :binds) :map) to_h  ","node left relation node left name  == ","node left relation node left name to_s  == ","node left relation node left name  ","node left relation node left name to_s  "," predicates grep  select "," equalities  select "," extract_node_ extract_node_value  ","node left node left name  to_s ","node left node left name to_s  to_s ","  predicates grep  ","  equalities  ","  predicates grep  each_with_object ","  equalities  each_with_object "]}," ActiveRecord Relation WhereClause or":{"type":"method","name":"or","children":[],"call":["WhereClause  new "," binds + ","other binds "," binds "," ast or ","other ast "," ast ","other empty? "," empty? ","common + ","left ast or ","right ast ","left ast ","right empty? ","left empty? ","other - "," - ","common predicates << ","Arel Nodes Grouping  new ","common predicates ","Arel Nodes Or  new ","right expr ","right is_a? ","left expr ","left is_a? "," -  + "," -  ast or ","left expr  ast or ","left ast  ast or ","other -  ast ","right expr  ast ","right ast  ast "," -  ast ","left expr  ast ","left ast  ast ","other -  empty? ","right expr  empty? ","right ast  empty? "," -  empty? ","left expr  empty? ","left ast  empty? "," -  predicates << "," -  predicates ","other -  expr ","right expr  expr ","right ast  expr ","other -  is_a? ","right expr  is_a? ","right ast  is_a? "," -  expr ","left expr  expr ","left ast  expr "," -  is_a? ","left expr  is_a? ","left ast  is_a? "]}," ActiveRecord Relation WhereClause except":{"type":"method","name":"except","children":[],"call":["WhereClause  new "," binds_except "," predicates_except "," except_predicates_and_binds "," except_predicates "]}," ActiveRecord Relation WhereClause merge":{"type":"method","name":"merge","children":[],"call":["WhereClause  new "," non_conflicting_binds + ","other binds "," non_conflicting_binds "," predicates_unreferenced_by + ","other predicates "," predicates_unreferenced_by ","predicates | "," except_predicates ","other extract_attributes ","  predicates_unreferenced_by _unreferenced_by + ","  except_predicates _unreferenced_by + ","other  predicates_unreferenced_by  ","other  except_predicates  ","  predicates_unreferenced_by _unreferenced_by ","  except_predicates _unreferenced_by "," predicates_unreferenced_by  | "," except_predicates  | "," except_ predicates_unreferenced_by  "," except_ except_predicates  "]}," ActiveRecord Relation WhereClause +":{"type":"method","name":"+","children":[],"call":["WhereClause  new "," binds + ","other binds "," binds "," predicates + ","other predicates "," predicates "]}," ActiveRecord Relation WhereClause initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Relation RecordFetchWarning QueryRegistry reset":{"type":"method","name":"reset","children":[],"call":["@queries clear "," queries clear "," queries "]}," ActiveRecord Relation RecordFetchWarning QueryRegistry initialize":{"type":"method","name":"initialize","children":[],"call":[" reset "]}," ActiveRecord Relation RecordFetchWarning exec_queries":{"type":"method","name":"exec_queries","children":[],"call":[" logger warn ","QueryRegistry  queries join ","QueryRegistry  queries ","@records size "," logger ","@records length > "," warn_on_records_fetched_greater_than ","@records length "," tap ","QueryRegistry  reset ","records size ","records length > ","records length ","ActiveRecord  warn_on_records_fetched_greater_than "]}," ActiveRecord QueryMethods string_containing_comma?":{"type":"method","name":"string_containing_comma?","children":[],"call":["value include? "," String  === "]}," ActiveRecord QueryMethods new_from_clause":{"type":"method","name":"new_from_clause","children":[],"call":["Relation FromClause  empty "]}," ActiveRecord QueryMethods where_clause_factory":{"type":"method","name":"where_clause_factory","children":[],"call":["Relation WhereClauseFactory  new "," predicate_builder "," klass "]}," ActiveRecord QueryMethods new_where_clause":{"type":"method","name":"new_where_clause","children":[],"call":["Relation WhereClause  empty "]}," ActiveRecord QueryMethods structurally_incompatible_values_for_or":{"type":"method","name":"structurally_incompatible_values_for_or","children":[],"call":["(send\n  (const\n    (const nil :Relation) :SINGLE_VALUE_METHODS) :reject) + + "," send == ","other send "," send ","(send\n  (const\n    (const nil :Relation) :CLAUSE_METHODS) :-\n  (array\n    (sym :having)\n    (sym :where))) reject ","Relation CLAUSE_METHODS  - ","(send\n  (const\n    (const nil :Relation) :SINGLE_VALUE_METHODS) :reject) + ","(send\n  (const\n    (const nil :Relation) :MULTI_VALUE_METHODS) :-\n  (array\n    (sym :extending))) reject ","Relation MULTI_VALUE_METHODS  - ","Relation SINGLE_VALUE_METHODS  reject "," get_value == ","other get_value "," get_value ","STRUCTURAL_OR_METHODS  reject ","@values fetch == ","values fetch ","@values fetch ","DEFAULT_VALUES  [] ","other values ","v1 == ","v2 uniq ","v2 is_a? ","v1 uniq ","v1 is_a? ","@other values  fetch == ","other values  fetch ","@other values  fetch ","other other values  ","v1 uniq  == ","v2 uniq  uniq ","v2 uniq  is_a? ","v1 uniq  uniq ","v1 uniq  is_a? "]}," ActiveRecord QueryMethods does_not_support_reverse?":{"type":"method","name":"does_not_support_reverse?","children":[],"call":["order =~ ","section count != ","section count ","order split find ","order split ","order include? ","(str \"nulls (first|last)\\\\Z\") match? ","String  new ","order instance_of? ","(str \"\\\\bnulls\\\\s+(?:first|last)\\\\b\") match? ","String  new  =~ ","String  new  split find ","String  new  split ","String  new  include? ","String  new  instance_of? "]}," ActiveRecord QueryMethods convert_join_strings_to_ast":{"type":"method","name":"convert_join_strings_to_ast","children":[],"call":["table create_string_join ","Arel  sql ","joins flatten reject map ","joins flatten reject ","joins flatten "," table create_string_join "," table "]}," ActiveRecord QueryMethods build_join_query":{"type":"method","name":"build_join_query","children":[],"call":["manager join_sources concat ","manager join_sources ","manager bind_values concat ","info binds ","manager bind_values ","manager from ","info joins each ","info joins ","join_infos each ","join_dependency join_constraints ","ActiveRecord Associations JoinDependency  new ","join_nodes + "," convert_join_strings_to_ast ","buckets [] map uniq ","buckets [] map ","buckets [] ","buckets [] uniq ","buckets default= ","alias_tracker aliases ","joins each "," table "," klass "," alias_tracker ","join_sources concat ","join_nodes empty? "," construct_join_dependency ","leading_joins + ","stashed_joins empty? ","association_joins empty? ","leading_joins empty? ","string_joins empty? "," table create_string_join ","Arel  sql ","string_joins map! ","buckets [] delete_if map! tap ","buckets [] delete_if map! ","buckets [] delete_if ","buckets [] tap ","manager manager join_sources  concat ","manager manager join_sources  ","info join_dependency join_constraints  each ","info join_dependency join_constraints  ","join_dependency join_constraints  each ","ActiveRecord Associations JoinDependency  new  join_constraints "," construct_join_dependency  join_constraints ","buckets [] uniq  + ","buckets []  + ","buckets [] tap  + "," alias_tracker  aliases ","  alias_tracker  ","manager join_sources  concat ","buckets [] uniq  empty? ","buckets []  empty? ","buckets [] tap  empty? "," construct_ActiveRecord Associations JoinDependency  new  "," construct_ construct_join_dependency  ","leading_join_dependency join_constraints  + ","stashed_join_dependency join_constraints  empty? ","association_join_dependency join_constraints  empty? ","leading_join_dependency join_constraints  empty? ","buckets [] map uniq  empty? ","buckets [] delete_if map! tap  empty? ","string_join_dependency join_constraints  empty? ","buckets [] map uniq  map! ","buckets [] delete_if map! tap  map! ","string_join_dependency join_constraints  map! "]}," ActiveRecord QueryMethods build_left_outer_joins":{"type":"method","name":"build_left_outer_joins","children":[],"call":[" build_join_query "," raise ","outer_joins group_by ","buckets []= "," valid_association_list ","h []= ","Hash  new ","buckets [] "]}," ActiveRecord QueryMethods assert_mutability!":{"type":"method","name":"assert_mutability!","children":[],"call":[" raise "]}," ActiveRecord QueryMethods or!":{"type":"method","name":"or!","children":[],"call":[" having_clause= "," having_clause or ","other having_clause "," having_clause "," where_clause= "," where_clause or ","other where_clause "," where_clause "," raise ","incompatible_values empty? "," structurally_incompatible_values_for_or "," structurally_compatible_for_or? ","other references_values "," references_values "," structurally_incompatible_values_for "," structurally_incompatible_values_for_or  empty? "," structurally_incompatible_values_for  empty? "," structurally_ structurally_incompatible_values_for_or _for_or "," structurally_ structurally_incompatible_values_for _for_or "," structurally_ structurally_incompatible_values_for_or _for "," structurally_ structurally_incompatible_values_for _for "]}," ActiveRecord QueryMethods or":{"type":"method","name":"or","children":[],"call":[" spawn or! "," spawn "," raise ","other class name ","other class ","other is_a? ","other spawn "]}," ActiveRecord QueryMethods left_outer_joins!":{"type":"method","name":"left_outer_joins!","children":[],"call":[" left_outer_joins_values ","args flatten! ","args compact! "]}," ActiveRecord QueryMethods left_outer_joins":{"type":"method","name":"left_outer_joins","children":[],"call":[" spawn left_outer_joins! "," spawn ","args flatten! ","args compact! "," check_if_method_has_arguments! "," __callee__ "]}," ActiveRecord QueryMethods bound_attributes":{"type":"method","name":"bound_attributes","children":[],"call":[" connection combine_bind_parameters "," having_clause binds "," having_clause "," where_clause binds "," where_clause "," arel bind_values "," arel "," from_clause binds "," from_clause "," connection ","Attribute  with_cast_value ","Type Value  new "," offset_value to_i "," offset_value ","OFFSET freeze "," connection sanitize_limit "," limit_value ","LIMIT freeze "," string_containing_comma? ! "," string_containing_comma? ","result << "," from_clause binds + + + "," from_clause binds + + "," from_clause binds + ","Type  default_value "," from_clause binds + + +  << "]}," ActiveRecord Relation QueryAttribute with_cast_value":{"type":"method","name":"with_cast_value","children":[],"call":["QueryAttribute  new "," type "," name "]}," ActiveRecord Relation QueryAttribute value_for_database":{"type":"method","name":"value_for_database","children":[],"call":[" _value_for_database "]}," ActiveRecord Relation QueryAttribute type_cast":{"type":"method","name":"type_cast","children":[],"call":[]}," ActiveRecord PredicateBuilder build_bind_param":{"type":"method","name":"build_bind_param","children":[],"call":["Relation QueryAttribute  new "," table type "," table ","column_name to_s "]}," ActiveRecord PredicateBuilder convert_dot_notation_to_hash":{"type":"method","name":"convert_dot_notation_to_hash","children":[],"call":["attributes []= ","attributes [] merge ","attributes [] ","attributes delete ","key split ",". freeze ","dot_notation each_key ","v is_a? ! ","v is_a? ","k include? ","attributes select ","dot_notation each ","s include? ","attributes keys select ","attributes keys ","converted []= ","existing []= ","converted [] ","key [] ","key length ","idx + ","key rindex ","value dup ","existing merge! ","value is_a? ","attributes each_with_object ","converted []  []= ","key rindex  + ","attributes delete  dup ","converted []  merge! ","attributes delete  is_a? "]}," ActiveRecord PredicateBuilder associated_predicate_builder":{"type":"method","name":"associated_predicate_builder","children":[],"call":[" class new "," table associated_table "," table "," class "]}," ActiveRecord PredicateBuilder create_binds_for_hash":{"type":"method","name":"create_binds_for_hash","children":[],"call":["binds << "," build_bind_param ","result []= ","Arel Nodes BindParam  new "," can_be_bound? ","RangeHandler RangeWithBinds  new ","value exclude_end? ","last infinite? ","last respond_to? ","first infinite? ","first respond_to? ","value end ","value begin ","value bound_attributes "," associated_predicate_builder create_binds_for_hash "," associated_predicate_builder ","attributes each ","attributes dup ","Relation QueryAttribute  new "," table type "," table ","column_name to_s ","AssociationQueryHandler  value_for "," table associated_with? "," table type respond_to? ! "," table type respond_to? ","value is_a? "," table has_column? ! "," table has_column? "," table type force_equality? ! "," table type force_equality? ","attributes dup  []= ","Arel Nodes BindParam  new  infinite? ","value end  infinite? ","Arel Nodes BindParam  new  respond_to? ","value end  respond_to? ","value begin  infinite? ","value begin  respond_to? "]}," ActiveRecord PredicateBuilder expand_from_hash":{"type":"method","name":"expand_from_hash","children":[],"call":[" expand "," associated_predicate_builder expand_from_hash "," associated_predicate_builder ","value is_a? ","attributes flat_map ","attributes empty? "," build "," table arel_attribute "," table "," table has_column? ! "," table has_column? ","BasicObjectHandler  new call ","BasicObjectHandler  new "," table type respond_to? "," table type ","key to_s ","queries reduce ","(send\n  (lvar :mapping) :map) reduce ","object send ","object respond_to? ! ","object respond_to? ","mapping size == ","mapping size ","mapping map ","Array  wrap map ","Array  wrap "," table reflect_on_aggregation mapping "," table reflect_on_aggregation "," table aggregated_with? "," expand_from_hash reduce "," expand_from_hash ","klass new queries map ","klass new queries ","klass new ","value first ","associated_table polymorphic_association? "," table associated_table "," table associated_with? ","object try! ","values map ","object public_send ","mapping first ","values empty? ","mapping length == ","mapping length ","value nil? "," table associated_predicate_builder expand_from_hash "," table associated_predicate_builder "," [] "," grouping_queries ","klass new queries map! ","associated_table predicate_builder expand_from_hash ","associated_table primary_key ","associated_table predicate_builder ","associated_table through_association? "," table associated_table predicate_builder expand_from_hash ","value stringify_keys "," table associated_table predicate_builder ","associated_table join_foreign_key ","query == ","key zip to_h ","key zip "," raise ","ids_set is_a? "," Array map "," Array ","key is_a? ","(send\n  (lvar : table reflect_on_aggregation mapping ) :map) reduce "," table reflect_on_aggregation mapping  size == "," table reflect_on_aggregation mapping  size "," table reflect_on_aggregation mapping  map "," table reflect_on_aggregation  table reflect_on_aggregation mapping  "," table associated_table  polymorphic_association? "," table  table associated_table  ","Array  wrap  map "," table reflect_on_aggregation mapping  first ","Array  wrap  empty? "," table reflect_on_aggregation mapping  length == "," table reflect_on_aggregation mapping  length "," table associated_table  predicate_builder expand_from_hash "," table associated_table  primary_key "," table associated_table  predicate_builder "," table associated_table  through_association? "," table  table associated_table  predicate_builder expand_from_hash "," table  table associated_table  predicate_builder "," table associated_table  join_foreign_key "]}," ActiveRecord PredicateBuilder create_binds":{"type":"method","name":"create_binds","children":[],"call":[" create_binds_for_hash "," convert_dot_notation_to_hash "]}," ActiveRecord PredicateBuilder RangeHandler call":{"type":"method","name":"call","children":[],"call":["attribute between ","attribute gteq and ","attribute lt ","value end ","attribute gteq ","value begin ","value exclude_end? ","value end infinite? ","value end respond_to? ","attribute lteq ","attribute not_in ","value begin infinite? ","value begin respond_to? ","RangeWithBinds  new ","end_bind value infinity? ","end_bind value ","begin_bind value infinity? ","begin_bind value "," predicate_builder build_bind_attribute ","attribute name "," predicate_builder "," predicate_builder build_bind_attribute  value infinity? "," predicate_builder build_bind_attribute  value "]}," ActiveRecord PredicateBuilder RangeHandler initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord PredicateBuilder PolymorphicArrayValue convert_to_id":{"type":"method","name":"convert_to_id","children":[],"call":["value _read_attribute "," primary_key ","value select "]}," ActiveRecord PredicateBuilder PolymorphicArrayValue base_class":{"type":"method","name":"base_class","children":[],"call":["value class base_class ","value class ","value klass base_class ","value klass "]}," ActiveRecord PredicateBuilder PolymorphicArrayValue primary_key":{"type":"method","name":"primary_key","children":[],"call":[" associated_table association_primary_key "," base_class "," associated_table "," associated_table association_join_primary_key "," klass "," associated_table join_primary_key "]}," ActiveRecord PredicateBuilder PolymorphicArrayValue type_to_ids_mapping":{"type":"method","name":"type_to_ids_mapping","children":[],"call":["hash [] << "," convert_to_id ","hash [] "," base_class name "," base_class "," values each_with_object "," values ","hsh []= ","Hash  new "," klass polymorphic_name "," klass "]}," ActiveRecord PredicateBuilder PolymorphicArrayValue initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord PredicateBuilder PolymorphicArrayHandler call":{"type":"method","name":"call","children":[],"call":["predicates first ","type_and_ids_predicates inject ","Arel Nodes Grouping  new ","type_predicate and ","predicates map ","predicates size > ","predicates size "," predicate_builder build_from_hash "," predicate_builder ","queries map ","table association_foreign_key to_s ","table association_foreign_key ","table association_foreign_type to_s ","table association_foreign_type ","value type_to_ids_mapping map ","value type_to_ids_mapping ","value associated_table ","value associated_table  association_foreign_key to_s ","value associated_table  association_foreign_key ","value associated_table  association_foreign_type to_s ","value associated_table  association_foreign_type ","value associated_value associated_table  "]}," ActiveRecord PredicateBuilder PolymorphicArrayHandler initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord PredicateBuilder ClassHandler print_deprecation_warning":{"type":"method","name":"print_deprecation_warning","children":[],"call":["ActiveSupport Deprecation  warn ","(str \"          Passing a class as a value in an Active Record query is deprecated and\\n\") squish "]}," ActiveRecord PredicateBuilder ClassHandler call":{"type":"method","name":"call","children":[],"call":[" predicate_builder build ","value name "," predicate_builder "," print_deprecation_warning "]}," ActiveRecord PredicateBuilder ClassHandler initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord PredicateBuilder BasicObjectHandler call":{"type":"method","name":"call","children":[],"call":["attribute eq "," predicate_builder build_bind_attribute ","attribute name "," predicate_builder "," predicate_builder build_ predicate_builder build_bind_attribute _attribute "]}," ActiveRecord PredicateBuilder BasicObjectHandler initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord PredicateBuilder BaseHandler call":{"type":"method","name":"call","children":[],"call":[" predicate_builder build ","value id "," predicate_builder "]}," ActiveRecord PredicateBuilder BaseHandler initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord PredicateBuilder AssociationQueryValue convert_to_id":{"type":"method","name":"convert_to_id","children":[],"call":["value _read_attribute "," primary_key ","value id ","value respond_to? ","value public_send "," primary_key map "," primary_key is_a? "]}," ActiveRecord PredicateBuilder AssociationQueryValue polymorphic_base_class_from_value":{"type":"method","name":"polymorphic_base_class_from_value","children":[],"call":[" value class base_class "," value class "," value ","val class base_class ","val class ","val is_a? "," value compact first "," value compact "," value klass base_class "," value klass ","  value compact first ue class base_class ","  value compact first ue class ","  value compact first ue "," value compact first  class base_class "," value compact first  class "," value compact first  is_a? ","  value compact first ue compact first ","  value compact first ue compact ","  value compact first ue klass base_class ","  value compact first ue klass "]}," ActiveRecord PredicateBuilder AssociationQueryValue primary_key":{"type":"method","name":"primary_key","children":[],"call":[" associated_table association_primary_key "," base_class "," associated_table "," associated_table association_join_primary_key "," associated_table association_join_keys key "," associated_table association_join_keys "," associated_table join_primary_key "]}," ActiveRecord PredicateBuilder AssociationQueryValue base_class":{"type":"method","name":"base_class","children":[],"call":[" polymorphic_base_class_from_value "," associated_table polymorphic_association? "," associated_table "]}," ActiveRecord PredicateBuilder AssociationQueryValue ids":{"type":"method","name":"ids","children":[],"call":[" convert_to_id "," value "," value map "," value select "," primary_key "," value select_values empty? "," value select_values ","relation where "," polymorphic_name "," primary_type "," polymorphic_clause? ","relation select "," select_clause? ","relation where  where ","relation select  where "," value  where ","relation where  select ","relation select  select "," value  select "]}," ActiveRecord PredicateBuilder AssociationQueryValue initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord PredicateBuilder AssociationQueryHandler call":{"type":"method","name":"call","children":[],"call":[" predicate_builder build_from_hash "," predicate_builder ","queries []= ","value ids ","table association_foreign_key to_s ","table association_foreign_key ","value base_class name ","value base_class ","table association_foreign_type to_s ","table association_foreign_type ","value associated_table ","value associated_table  association_foreign_key to_s ","value associated_table  association_foreign_key ","value associated_table  association_foreign_type to_s ","value associated_table  association_foreign_type ","value associated_value associated_table  "]}," ActiveRecord PredicateBuilder AssociationQueryHandler initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord PredicateBuilder AssociationQueryHandler value_for":{"type":"method","name":"value_for","children":[],"call":[]}," ActiveRecord PredicateBuilder ArrayHandler initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Relation Merger merge_clauses":{"type":"method","name":"merge_clauses","children":[],"call":[" relation send ","clause merge "," relation "," other send "," other ","CLAUSE_METHOD_NAMES  each "," relation set_value "," other get_value "," relation get_value ","CLAUSE_METHODS  each "," relation having_clause= ","having_clause empty? "," relation having_clause merge "," other having_clause "," relation having_clause "," relation where_clause= ","where_clause empty? "," relation where_clause merge "," other where_clause "," relation where_clause "," relation from_clause= "," other from_clause "," other from_clause empty? ! "," other from_clause empty? "," relation from_clause empty? "," relation from_clause "," replace_from_clause? "," relation send  merge "," relation get_value  merge "," relation having_ relation send = "," relation having_ relation get_value = "," relation  relation having_clause merge = ","having_ relation send  empty? ","having_ relation get_value  empty? "," relation having_clause merge  empty? "," relation having_ relation send  merge "," relation having_ relation get_value  merge "," relation  relation having_clause merge  merge "," other having_ relation send  "," other having_ relation get_value  "," other  relation having_clause merge  "," relation having_ relation send  "," relation having_ relation get_value  "," relation  relation having_clause merge  "," relation where_ relation send = "," relation where_ relation get_value = "," relation  relation where_clause merge = ","where_ relation send  empty? ","where_ relation get_value  empty? "," relation where_clause merge  empty? "," relation where_ relation send  merge "," relation where_ relation get_value  merge "," relation  relation where_clause merge  merge "," other where_ relation send  "," other where_ relation get_value  "," other  relation where_clause merge  "," relation where_ relation send  "," relation where_ relation get_value  "," relation  relation where_clause merge  "," relation from_ relation send = "," relation from_ relation get_value = "," other from_ relation send  "," other from_ relation get_value  "," other from_ relation send  empty? ! "," other from_ relation get_value  empty? ! "," other from_ relation send  empty? "," other from_ relation get_value  empty? "," relation from_ relation send  empty? "," relation from_ relation get_value  empty? "," relation from_ relation send  "," relation from_ relation get_value  "," replace_from_ relation send ? "," replace_from_ relation get_value ? "]}," ActiveRecord Relation FromClause empty":{"type":"method","name":"empty","children":[],"call":[]}," ActiveRecord Relation FromClause empty?":{"type":"method","name":"empty?","children":[],"call":[" value nil? "," value "]}," ActiveRecord Relation FromClause merge":{"type":"method","name":"merge","children":[],"call":[]}," ActiveRecord Relation FromClause binds":{"type":"method","name":"binds","children":[],"call":[" value bound_attributes "," value "," value is_a? "]}," ActiveRecord Relation FromClause initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord FinderMethods find_nth_with_limit_and_offset":{"type":"method","name":"find_nth_with_limit_and_offset","children":[],"call":[" find_nth_with_limit ","@records [] "," loaded? "," records [] "," records "]}," ActiveRecord FinderMethods find_nth_from_last":{"type":"method","name":"find_nth_from_last","children":[],"call":["relation to_a [] ","index -@ ","relation to_a "," order "," arel_attribute asc "," arel_attribute "," primary_key "," order_values empty? "," order_values ","@records [] "," loaded? "," records [] "," records ","relation last [] ","relation last ","relation records [] ","relation records "," has_limit_or_offset? "," equal? "," ordered_relation ","relation reverse_order offset first ","relation reverse_order offset ","index - ","relation reverse_order ","relation has_limit_or_offset? ","relation order_values empty? ","relation order_values "," order  to_a [] "," ordered_relation  to_a [] "," order  to_a "," ordered_relation  to_a "," order  last [] "," ordered_relation  last [] "," order  last "," ordered_relation  last "," order  records [] "," ordered_relation  records [] "," order  records "," ordered_relation  records "," ordered_ order  "," ordered_ ordered_relation  "," order  reverse_order offset first "," ordered_relation  reverse_order offset first "," order  reverse_order offset "," ordered_relation  reverse_order offset "," order  reverse_order "," ordered_relation  reverse_order "," order  has_limit_or_offset? "," ordered_relation  has_limit_or_offset? "," order  order_values empty? "," ordered_relation  order_values empty? "," order  order_values "," ordered_relation  order_values "]}," ActiveRecord FinderMethods find_some_ordered":{"type":"method","name":"find_some_ordered","children":[],"call":[" raise_record_not_found_exception! ","ids size ","result size ","records_by_id fetch ","pk_type cast ","ids map ","result index_by ","@klass type_for_attribute "," primary_key ","result size == "," except where records "," except where "," except ","ids slice "," limit_value "," offset_value "," except where to_a ","result in_order_of ","@klass type_for_attribute cast ","relation records ","relation select "," table [] "," table "," select_values empty? "," select_values ","relation where ","(send\n  (lvar :ids) :map) inject "," primary_key zip to_h "," primary_key zip "," klass composite_primary_key? "," klass "," except where records  size "," except where to_a  size ","relation records  size ","result index_by  fetch ","@klass type_for_attribute  cast "," except where records  index_by "," except where to_a  index_by ","relation records  index_by "," except where records  size == "," except where to_a  size == ","relation records  size == "," except where records  in_order_of "," except where to_a  in_order_of ","relation records  in_order_of ","relation select  records ","relation where  records ","(send\n  (lvar :ids) :map) inject  records "," except  records ","relation select  select ","relation where  select ","(send\n  (lvar :ids) :map) inject  select "," except  select ","relation select  where ","relation where  where ","(send\n  (lvar :ids) :map) inject  where "," except  where "]}," ActiveRecord FinderMethods second_to_last!":{"type":"method","name":"second_to_last!","children":[],"call":[" raise ","RecordNotFound  new "," arel where_sql ","@klass arel_engine "," arel ","@klass name "," find_nth_from_last "," find_nth! "," raise_record_not_found_exception! "," second_to_last "]}," ActiveRecord FinderMethods second_to_last":{"type":"method","name":"second_to_last","children":[],"call":[" find_nth_from_last "," find_nth "]}," ActiveRecord FinderMethods third_to_last!":{"type":"method","name":"third_to_last!","children":[],"call":[" raise ","RecordNotFound  new "," arel where_sql ","@klass arel_engine "," arel ","@klass name "," find_nth_from_last "," find_nth! "," raise_record_not_found_exception! "," third_to_last "]}," ActiveRecord FinderMethods third_to_last":{"type":"method","name":"third_to_last","children":[],"call":[" find_nth_from_last "," find_nth "]}," ActiveRecord Batches act_on_order_or_limit_ignored":{"type":"method","name":"act_on_order_or_limit_ignored","children":[],"call":[" logger warn "," logger "," raise ","ArgumentError  new "," klass error_on_ignored_order_or_limit "," klass ","error_on_ignore nil? "]}," ActiveRecord Batches apply_limits":{"type":"method","name":"apply_limits","children":[],"call":["relation where "," arel_attribute lteq "," arel_attribute "," primary_key "," arel_attribute gteq "," table [] lteq "," table [] "," table "," table [] gteq ","Arel Nodes BindParam  new ","Relation QueryAttribute  new "," klass type_for_attribute "," klass "," apply_finish_limit "," apply_start_limit ","relation where  where "," apply_finish_limit  where "," apply_start_limit  where "," arel_Relation QueryAttribute  new ibute lteq "," arel_Relation QueryAttribute  new ibute "," arel_Relation QueryAttribute  new ibute gteq "," klass type_for_Relation QueryAttribute  new ibute "]}," ActiveRecord Batches in_batches":{"type":"method","name":"in_batches","children":[],"call":["relation where "," arel_attribute gt "," arel_attribute "," primary_key ","ids length < ","ids length "," raise ","ArgumentError  new ","ids last ","ids empty? "," where ","batch_relation pluck ","yielded_relation load_records ","records map ","batch_relation records "," loop "," apply_limits ","relation reorder limit ","relation reorder "," batch_order "," act_on_order_or_limit_ignored "," arel taken present? "," arel taken "," arel "," arel orders present? "," arel orders ","BatchEnumerator  new "," block_given? "," table [] gt "," table [] "," table ","batch_relation to_a "," logger warn "," logger ","relation limit ","remaining < ","remaining == "," limit_value "," act_on_ignored_order ","Arel Nodes BindParam  new ","Relation QueryAttribute  new "," klass type_for_attribute "," klass ","relation skip_query_cache! ","attr gt "," bind_attribute "," predicate_builder [] ","order == "," predicate_builder ","order inspect ","(sym :asc) include? "," batch_on_unloaded_relation "," batch_on_loaded_relation "," loaded? "," Array all? "," Array "," apply_limits  where ","relation reorder limit  where ","relation limit  where "," arel_Relation QueryAttribute  new ibute gt "," arel_Relation QueryAttribute  new ibute ","batch_relation pluck  length < ","records map  length < ","batch_relation pluck  length ","records map  length ","batch_relation pluck  last ","records map  last ","batch_relation pluck  empty? ","records map  empty? ","relation where  pluck ","batch_ apply_limits  pluck ","batch_relation reorder limit  pluck ","batch_relation limit  pluck "," where  load_records ","yielded_relation load_batch_relation records  ","yielded_relation load_batch_relation to_a  ","yielded_ apply_limits  load_records ","yielded_relation reorder limit  load_records ","yielded_relation limit  load_records ","batch_relation records  map ","batch_relation to_a  map ","relation where  records ","batch_relation batch_relation records  ","batch_relation batch_relation to_a  ","batch_ apply_limits  records ","batch_relation reorder limit  records ","batch_relation limit  records "," apply_limits  reorder limit ","relation reorder limit  reorder limit ","relation limit  reorder limit "," apply_limits  reorder ","relation reorder limit  reorder ","relation limit  reorder ","relation where  to_a ","batch_ apply_limits  to_a ","batch_relation reorder limit  to_a ","batch_relation limit  to_a "," apply_limits  limit ","relation reorder limit  limit ","relation limit  limit "," limit_value  < "," limit_value  == "," klass type_for_Relation QueryAttribute  new ibute "," apply_limits  skip_query_cache! ","relation reorder limit  skip_query_cache! ","relation limit  skip_query_cache! ","Relation QueryAttribute  new  gt "," bind_Relation QueryAttribute  new ibute "," batch_on_unloaded_ apply_limits  "," batch_on_unloaded_relation reorder limit  "," batch_on_unloaded_relation limit  "," batch_on_loaded_ apply_limits  "," batch_on_loaded_relation reorder limit  "," batch_on_loaded_relation limit  "]}," ActiveRecord Batches BatchEnumerator each":{"type":"method","name":"each","children":[],"call":["enum each "," block_given? ","@relation to_enum ","@relation to_enum  each ","@relation to_@relation to_enum  "]}," ActiveRecord Batches BatchEnumerator each_record":{"type":"method","name":"each_record","children":[],"call":["relation records each ","relation records ","@relation to_enum each ","@relation to_enum "," to_enum "," block_given? ","relation to_a each ","relation to_a "]}," ActiveRecord Batches BatchEnumerator initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Reflection RuntimeReflection all_includes":{"type":"method","name":"all_includes","children":[],"call":[]}," ActiveRecord Reflection RuntimeReflection alias_name":{"type":"method","name":"alias_name","children":[],"call":["Arel Table  new "," table_name "," klass type_caster "," klass "]}," ActiveRecord Reflection RuntimeReflection alias_candidate":{"type":"method","name":"alias_candidate","children":[],"call":[" plural_name "]}," ActiveRecord Reflection RuntimeReflection source_type_info":{"type":"method","name":"source_type_info","children":[],"call":["@reflection source_type_info "]}," ActiveRecord Reflection RuntimeReflection constraints":{"type":"method","name":"constraints","children":[],"call":["@reflection constraints "]}," ActiveRecord Reflection RuntimeReflection table_name":{"type":"method","name":"table_name","children":[],"call":[" klass table_name "," klass "]}," ActiveRecord Reflection RuntimeReflection klass":{"type":"method","name":"klass","children":[],"call":["@association klass "]}," ActiveRecord Reflection RuntimeReflection initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Reflection PolymorphicReflection source_type_info":{"type":"method","name":"source_type_info","children":[],"call":[" where "," lambda ","@previous_reflection options [] ","@previous_reflection options ","@previous_reflection foreign_type ","@previous_reflection foreign_@previous_reflection foreign_type  "]}," ActiveRecord Reflection PolymorphicReflection constraints":{"type":"method","name":"constraints","children":[],"call":["@reflection constraints + "," source_type_info ","@reflection constraints "," source_type_scope "]}," ActiveRecord Reflection PolymorphicReflection type":{"type":"method","name":"type","children":[],"call":["@reflection type "]}," ActiveRecord Reflection PolymorphicReflection join_keys":{"type":"method","name":"join_keys","children":[],"call":["@reflection join_keys "]}," ActiveRecord Reflection PolymorphicReflection plural_name":{"type":"method","name":"plural_name","children":[],"call":["@reflection plural_name "]}," ActiveRecord Reflection PolymorphicReflection table_name":{"type":"method","name":"table_name","children":[],"call":["@reflection table_name "]}," ActiveRecord Reflection PolymorphicReflection scope":{"type":"method","name":"scope","children":[],"call":["@reflection scope "]}," ActiveRecord Reflection PolymorphicReflection klass":{"type":"method","name":"klass","children":[],"call":["@reflection klass "]}," ActiveRecord Reflection PolymorphicReflection initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Reflection ThroughReflection collect_join_reflections":{"type":"method","name":"collect_join_reflections","children":[],"call":[" through_reflection add_as_through "," through_reflection "," through_reflection add_as_polymorphic_through "," options [] "," options "," source_reflection add_as_source "," source_reflection "," through_reflection  source_reflection add_as_source dd_ source_reflection add_as_source s_through "," through_reflection  source_reflection add_as_source dd_ source_reflection add_as_source s_polymorphic_through "," source_reflection  source_reflection add_as_source dd_ source_reflection add_as_source s_source "]}," ActiveRecord Reflection ThroughReflection add_as_through":{"type":"method","name":"add_as_through","children":[],"call":[" collect_join_reflections ","seed + "]}," ActiveRecord Reflection ThroughReflection add_as_polymorphic_through":{"type":"method","name":"add_as_polymorphic_through","children":[],"call":[" collect_join_reflections ","seed + ","PolymorphicReflection  new "]}," ActiveRecord Reflection ThroughReflection add_as_source":{"type":"method","name":"add_as_source","children":[],"call":[" collect_join_reflections "]}," ActiveRecord Reflection ThroughReflection constraints":{"type":"method","name":"constraints","children":[],"call":["scope_chain << "," scope "," source_reflection constraints "," source_reflection "," source_reflection constraints  << "]}," ActiveRecord Reflection ThroughReflection has_scope?":{"type":"method","name":"has_scope?","children":[],"call":[" through_reflection has_scope? "," through_reflection "," source_reflection has_scope? "," source_reflection "," options [] "," options "," scope "]}," ActiveRecord Reflection ThroughReflection clear_association_scope_cache":{"type":"method","name":"clear_association_scope_cache","children":[],"call":[" through_reflection clear_association_scope_cache "," through_reflection "," source_reflection clear_association_scope_cache "," source_reflection "," delegate_reflection clear_association_scope_cache "," delegate_reflection "]}," ActiveRecord Reflection ThroughReflection collect_join_chain":{"type":"method","name":"collect_join_chain","children":[],"call":[" collect_join_reflections "]}," ActiveRecord Reflection ThroughReflection through_reflection?":{"type":"method","name":"through_reflection?","children":[],"call":[]}," ActiveRecord Reflection BelongsToReflection calculate_constructable":{"type":"method","name":"calculate_constructable","children":[],"call":[" polymorphic? ! "," polymorphic? "]}," ActiveRecord Reflection BelongsToReflection association_class":{"type":"method","name":"association_class","children":[],"call":[" polymorphic? "]}," ActiveRecord Reflection HasOneReflection calculate_constructable":{"type":"method","name":"calculate_constructable","children":[],"call":["options [] ! ","options [] "]}," ActiveRecord Reflection HasOneReflection association_class":{"type":"method","name":"association_class","children":[],"call":[" options [] "," options "]}," ActiveRecord Reflection HasManyReflection association_class":{"type":"method","name":"association_class","children":[],"call":[" options [] "," options "]}," ActiveRecord Reflection AssociationReflection add_as_through":{"type":"method","name":"add_as_through","children":[],"call":["seed + "]}," ActiveRecord Reflection AssociationReflection add_as_polymorphic_through":{"type":"method","name":"add_as_polymorphic_through","children":[],"call":["seed + ","PolymorphicReflection  new "]}," ActiveRecord Reflection AssociationReflection add_as_source":{"type":"method","name":"add_as_source","children":[],"call":[]}," ActiveRecord Reflection AssociationReflection has_scope?":{"type":"method","name":"has_scope?","children":[],"call":[" scope "]}," ActiveRecord Reflection AssociationReflection clear_association_scope_cache":{"type":"method","name":"clear_association_scope_cache","children":[],"call":["@association_scope_cache clear "," klass initialize_find_by_cache "," klass "]}," ActiveRecord Reflection AssociationReflection collect_join_chain":{"type":"method","name":"collect_join_chain","children":[],"call":[]}," ActiveRecord Reflection AbstractReflection chain":{"type":"method","name":"chain","children":[],"call":[" collect_join_chain "]}," ActiveRecord Reflection AbstractReflection alias_candidate":{"type":"method","name":"alias_candidate","children":[],"call":[" plural_name "]}," ActiveRecord Reflection AbstractReflection counter_must_be_updated_by_has_many?":{"type":"method","name":"counter_must_be_updated_by_has_many?","children":[],"call":[" has_cached_counter? "," inverse_updates_counter_in_memory? ! "," inverse_updates_counter_in_memory? "]}," ActiveRecord Reflection AbstractReflection has_cached_counter?":{"type":"method","name":"has_cached_counter?","children":[],"call":[" active_record columns_hash [] ! ! "," active_record columns_hash [] ! "," active_record columns_hash [] "," counter_cache_column "," active_record columns_hash "," active_record "," inverse_which_updates_counter_cache options [] "," inverse_which_updates_counter_cache options "," inverse_which_updates_counter_cache "," options [] "," options "," active_record has_attribute? "]}," ActiveRecord Reflection AbstractReflection inverse_updates_counter_in_memory?":{"type":"method","name":"inverse_updates_counter_in_memory?","children":[],"call":[" inverse_which_updates_counter_cache == "," inverse_of "," inverse_which_updates_counter_cache "]}," ActiveRecord Reflection AbstractReflection inverse_which_updates_counter_cache":{"type":"method","name":"inverse_which_updates_counter_cache","children":[],"call":["inverse counter_cache_column == "," counter_cache_column ","inverse counter_cache_column "," klass reflect_on_all_associations find "," klass reflect_on_all_associations "," klass ","inverse klass == "," active_record ","inverse klass ","inverse polymorphic? ","inverse_candidates find "," inverse_of "," klass reflect_on_all_associations  find "]}," ActiveRecord Reflection AbstractReflection counter_cache_column":{"type":"method","name":"counter_cache_column","children":[],"call":[" name "," options [] to_s "," options [] "," options "," active_record name demodulize underscore pluralize "," active_record name demodulize underscore "," active_record name demodulize "," active_record name "," active_record "," options [] == "," belongs_to? ","(or\n  (csend\n    (send\n      (send nil :options) :[]\n      (sym :counter_cache)) :to_s)\n  (dstr\n    (begin\n      (send nil :name))\n    (str \"_count\"))) -@ "," options [] to_s -@ ","(begin\n  (send\n    (send\n      (send\n        (send\n          (send nil :active_record) :name) :demodulize) :underscore) :pluralize)) -@ "]}," ActiveRecord Reflection AbstractReflection constraints":{"type":"method","name":"constraints","children":[],"call":[" scope_chain flatten "," scope_chain "," chain map flatten "," chain map "," chain "," chain flat_map "]}," ActiveRecord Reflection AbstractReflection through_reflection?":{"type":"method","name":"through_reflection?","children":[],"call":[]}," ActiveRecord QueryCache install_executor_hooks":{"type":"method","name":"install_executor_hooks","children":[],"call":[]}," ActiveRecord QueryCache complete":{"type":"method","name":"complete","children":[],"call":[]}," ActiveRecord QueryCache run":{"type":"method","name":"run","children":[],"call":[]}," ActiveRecord Persistence belongs_to_touch_method":{"type":"method","name":"belongs_to_touch_method","children":[],"call":[]}," ActiveRecord Persistence _raise_record_not_destroyed":{"type":"method","name":"_raise_record_not_destroyed","children":[],"call":[" raise ","RecordNotDestroyed  new "," send "," class "," class primary_key "," class primary_ class primary_key  "]}," ActiveRecord NullRelation or":{"type":"method","name":"or","children":[],"call":["other spawn "]}," ActiveRecord NullRelation one?":{"type":"method","name":"one?","children":[],"call":[]}," ActiveRecord NullRelation none?":{"type":"method","name":"none?","children":[],"call":[]}," ActiveRecord ModelSchema ClassMethods warn_if_deprecated_type":{"type":"method","name":"warn_if_deprecated_type","children":[],"call":["ActiveSupport Deprecation  warn ","(str \"            The behavior of the `:point` type will be changing in Rails 5.1 to\\n\") strip_heredoc ","column name "," name ","column array? ","column sql_type start_with? ","column sql_type ","column respond_to? "," attributes_to_define_after_schema_loads key? "," attributes_to_define_after_schema_loads ","column precision ","column precision presence "]}," ActiveRecord ModelSchema ClassMethods reload_schema_from_cache":{"type":"method","name":"reload_schema_from_cache","children":[],"call":["descendant send "," direct_descendants each "," direct_descendants "," subclasses each "," subclasses "]}," ActiveRecord ModelSchema ClassMethods load_schema!":{"type":"method","name":"load_schema!","children":[],"call":[" define_attribute ","column default "," connection lookup_cast_type_from_column "," connection "," warn_if_deprecated_type ","@columns_hash each "," connection schema_cache columns_hash except "," ignored_columns "," connection schema_cache columns_hash "," table_name "," connection schema_cache "," _convert_type_from_options ","columns_hash freeze ","columns_hash except "," ignored_columns empty? "," raise "," alias_attribute ","name == "," connection lookup_cast_ _convert_type_from_options _from_column "," connection lookup_cast_ connection lookup_cast_type_from_column _from_column "," warn_if_deprecated_ _convert_type_from_options  "," warn_if_deprecated_ connection lookup_cast_type_from_column  "," connection schema_cache columns_hash except  each ","columns_hash freeze  each ","@columns_hash except  each ","@ connection schema_cache columns_hash  each "," connection schema_cache columns_hash except  except "," connection schema_cache  connection schema_cache columns_hash  except "," connection schema_cache columns_hash except  "," connection schema_cache  connection schema_cache columns_hash  "," _convert_ _convert_type_from_options _from_options "," _convert_ connection lookup_cast_type_from_column _from_options ","columns_hash except  freeze "," connection schema_cache columns_hash  freeze ","columns_hash except  except "," connection schema_cache columns_hash  except "]}," ActiveRecord ModelSchema ClassMethods load_schema":{"type":"method","name":"load_schema","children":[],"call":[" load_schema! "," schema_loaded? ","@load_schema_monitor synchronize "," raise "," reload_schema_from_cache "]}," ActiveRecord ModelSchema ClassMethods schema_loaded?":{"type":"method","name":"schema_loaded?","children":[],"call":[]}," ActiveRecord ModelSchema ClassMethods attribute_types":{"type":"method","name":"attribute_types","children":[],"call":["Hash  new ","Type Value  new "," load_schema ","Type  default_value "]}," ActiveRecord ModelSchema ClassMethods next_sequence_value":{"type":"method","name":"next_sequence_value","children":[],"call":[" connection next_sequence_value "," sequence_name "," connection "]}," ActiveRecord ModelSchema ClassMethods prefetch_primary_key?":{"type":"method","name":"prefetch_primary_key?","children":[],"call":[" connection prefetch_primary_key? "," table_name "," connection "]}," ActiveRecord Migrator generate_migrator_advisory_lock_id":{"type":"method","name":"generate_migrator_advisory_lock_id","children":[],"call":["MIGRATOR_SALT  * ","Zlib  crc32 ","Base  connection current_database ","Base  connection "," connection current_database "," connection "]}," ActiveRecord Migrator with_advisory_lock":{"type":"method","name":"with_advisory_lock","children":[],"call":["Base  connection release_advisory_lock ","Base  connection "," load_migrated "," raise ","Base  connection get_advisory_lock "," generate_migrator_advisory_lock_id ","ConcurrentMigrationError  new ","connection release_advisory_lock ! ","connection release_advisory_lock ","connection get_advisory_lock ","AdvisoryLockBase  connection ","AdvisoryLockBase  establish_connection ","ActiveRecord Base  connection_config ","AdvisoryLockBase  connected? "," with_advisory_lock_connection "," connection release_advisory_lock ! "," connection release_advisory_lock "," connection "," connection get_advisory_lock ","Base  Base  connection  release_advisory_lock ","Base  AdvisoryLockBase  connection  release_advisory_lock ","Base  Base  connection  ","Base  AdvisoryLockBase  connection  ","Base  Base  connection  get_advisory_lock ","Base  AdvisoryLockBase  connection  get_advisory_lock "," generate_migrator_advisory_ generate_migrator_advisory_lock_id  ","Base  connection  release_advisory_lock ! ","AdvisoryLockBase  connection  release_advisory_lock ! ","Base  connection  release_advisory_lock ","AdvisoryLockBase  connection  release_advisory_lock ","Base  connection  get_advisory_lock ","AdvisoryLockBase  connection  get_advisory_lock ","AdvisoryLockBase  Base  connection  ","AdvisoryLockBase  AdvisoryLockBase  connection  ","AdvisoryLockBase  establish_Base  connection  ","AdvisoryLockBase  establish_AdvisoryLockBase  connection  ","ActiveRecord Base  Base  connection _config ","ActiveRecord Base  AdvisoryLockBase  connection _config "," with_advisory_lock_Base  connection  "," with_advisory_lock_AdvisoryLockBase  connection  "," Base  connection  release_advisory_lock ! "," AdvisoryLockBase  connection  release_advisory_lock ! "," Base  connection  release_advisory_lock "," AdvisoryLockBase  connection  release_advisory_lock "," Base  connection  "," AdvisoryLockBase  connection  "," Base  connection  get_advisory_lock "," AdvisoryLockBase  connection  get_advisory_lock "]}," ActiveRecord Migrator use_advisory_lock?":{"type":"method","name":"use_advisory_lock?","children":[],"call":["Base  connection supports_advisory_locks? ","Base  connection ","Base  connection advisory_locks_enabled? "," connection advisory_locks_enabled? "," connection "]}," ActiveRecord Migrator protected_environment?":{"type":"method","name":"protected_environment?","children":[],"call":[]}," ActiveRecord Migrator current_environment":{"type":"method","name":"current_environment","children":[],"call":[]}," ActiveRecord Migrator last_stored_environment":{"type":"method","name":"last_stored_environment","children":[],"call":[]}," ActiveRecord Migrator invalid_target?":{"type":"method","name":"invalid_target?","children":[],"call":["@target_version > "," target ! "," target ","@target_version != "]}," ActiveRecord Migrator record_environment":{"type":"method","name":"record_environment","children":[],"call":["ActiveRecord InternalMetadata  []= ","ActiveRecord Migrator  current_environment "," down? ","ActiveRecord Base  connection migration_context current_environment ","ActiveRecord Base  connection migration_context ","ActiveRecord Base  connection ","ActiveRecord Base  connection pool db_config env_name ","ActiveRecord Base  connection pool db_config ","ActiveRecord Base  connection pool ","@internal_metadata []= "," connection pool db_config env_name "," connection pool db_config "," connection pool "," connection "]}," ActiveRecord Migrator migrate_without_lock":{"type":"method","name":"migrate_without_lock","children":[],"call":[" record_environment "," execute_migration_in_transaction "," runnable each "," runnable "," raise ","UnknownMigrationVersionError  new "," invalid_target? ","e backtrace "," use_transaction? ","Base  logger info ","migration version ","migration name ","Base  logger ","@target_version > "," target ! "," target "," method "]}," ActiveRecord Migrator run_without_lock":{"type":"method","name":"run_without_lock","children":[],"call":[" record_environment "," execute_migration_in_transaction "," raise ","UnknownMigrationVersionError  new ","migration nil? ","m version == ","m version "," migrations detect "," migrations ","e backtrace "," use_transaction? "," migrated include? ! "," migrated include? ","migration version to_i ","migration version "," migrated "," down? "," up? "]}," ActiveRecord Migrator load_migrated":{"type":"method","name":"load_migrated","children":[],"call":["Set  new "," class get_all_versions "," class ","Base  connection migration_context get_all_versions ","Base  connection migration_context ","Base  connection ","@schema_migration all_versions map ","@schema_migration all_versions ","@schema_migration integer_versions "]}," ActiveRecord Migrator match_to_migration_filename?":{"type":"method","name":"match_to_migration_filename?","children":[],"call":["File  basename =~ ","File  basename ","Migration MigrationFilenameRegexp  match? "]}," ActiveRecord Migration nearest_delegate":{"type":"method","name":"nearest_delegate","children":[],"call":[" superclass nearest_delegate "," superclass "," delegate "]}," ActiveRecord Migration current_version":{"type":"method","name":"current_version","children":[],"call":[]}," ActiveRecord Migration []":{"type":"method","name":"[]","children":[],"call":[]}," ActiveRecord Migration inherited":{"type":"method","name":"inherited","children":[],"call":[]}," ActiveRecord EnvironmentMismatchError initialize":{"type":"method","name":"initialize","children":[],"call":[" Rails  env ","Rails  env ","msg << ","(str \"You are attempting to modify a database that was last run in `\") dup ","(str \"You are attempting to modify a database that was last run in `\") +@ ","(str \"You are attempting to modify a database that was last run in `\") dup  << ","(str \"You are attempting to modify a database that was last run in `\") +@  << "]}," ActiveRecord ProtectedEnvironmentError initialize":{"type":"method","name":"initialize","children":[],"call":["msg << ","(str \"You are attempting to run a destructive action against your '\") dup ","(str \"You are attempting to run a destructive action against your '\") +@ ","(str \"You are attempting to run a destructive action against your '\") dup  << ","(str \"You are attempting to run a destructive action against your '\") +@  << "]}," ActiveRecord NoEnvironmentInSchemaError initialize":{"type":"method","name":"initialize","children":[],"call":[" Rails  env ","Rails  env "]}," ActiveRecord ConcurrentMigrationError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Migration Compatibility Legacy migrate":{"type":"method","name":"migrate","children":[],"call":["ActiveSupport Deprecation  warn "," class name "," class "]}," ActiveRecord Migration Compatibility FourTwoShared index_name_for_remove":{"type":"method","name":"index_name_for_remove","children":[],"call":[" raise "," index_name_exists? "," index_name ","options_without_column delete ","options dup ","options has_key? ","options is_a? ","  index_name _exists? ","  index_name  ","options dup  delete "]}," ActiveRecord Migration Compatibility FourTwoShared remove_index":{"type":"method","name":"remove_index","children":[],"call":["options []= "," index_name_for_remove ","options is_a? "," execute "," quote_table_name "," quote_column_name ","  index_name_for_remove _for_remove "]}," ActiveRecord Migration Compatibility FourTwoShared index_exists?":{"type":"method","name":"index_exists?","children":[],"call":["options []= "," index_name ","options [] to_s ","options [] ","options [] present? "," Array map "," Array ","options key? present? ","options key? "]}," ActiveRecord Migration Compatibility FourTwoShared add_timestamps":{"type":"method","name":"add_timestamps","children":[],"call":["options []= ","options [] nil? ","options [] "]}," ActiveRecord Migration Compatibility FourTwoShared add_reference":{"type":"method","name":"add_reference","children":[],"call":["options [] "]}," ActiveRecord Migration Compatibility FourTwoShared change_table":{"type":"method","name":"change_table","children":[],"call":[" prepend "," block_given? "]}," ActiveRecord Migration Compatibility FourTwoShared create_table":{"type":"method","name":"create_table","children":[],"call":[" prepend "," block_given? "]}," ActiveRecord Migration Compatibility FourTwoShared TableDefinition timestamps":{"type":"method","name":"timestamps","children":[],"call":["options []= ","options [] nil? ","options [] "]}," ActiveRecord Migration Compatibility FourTwoShared TableDefinition references":{"type":"method","name":"references","children":[],"call":["options [] "]}," ActiveRecord Migration Compatibility find":{"type":"method","name":"find","children":[],"call":[]}," ActiveRecord Migration CommandRecorder invert_remove_foreign_key":{"type":"method","name":"invert_remove_foreign_key","children":[],"call":["reversed_args << "," raise ","to_table is_a? ","to_table nil? ","options empty? ","options delete ","args extract_options! ","remove_options present? ","options_or_to_table except ","options_or_to_table is_a? ","options_or_to_table [] ","options_or_to_table []  is_a? ","options_or_to_table []  nil? ","args extract_options!  empty? ","args extract_options!  delete ","args extract_args extract_options! ! ","remove_args extract_options!  present? ","options_or_to_table except  present? ","args extract_options! _or_to_table except ","options_or_options_or_to_table []  except ","args extract_options! _or_to_table is_a? ","options_or_options_or_to_table []  is_a? ","args extract_options! _or_to_table [] ","options_or_options_or_to_table []  [] "]}," ActiveRecord Migration CommandRecorder invert_change_column_default":{"type":"method","name":"invert_change_column_default","children":[],"call":["options [] "," raise ","options has_key? ","options is_a? "]}," ActiveRecord LogSubscriber sql_color":{"type":"method","name":"sql_color","children":[],"call":[]}," ActiveRecord LogSubscriber colorize_payload_name":{"type":"method","name":"colorize_payload_name","children":[],"call":[" color ","payload_name == ","payload_name blank? "]}," ActiveRecord Locking LockingType serialize":{"type":"method","name":"serialize","children":[],"call":[" to_i "]}," ActiveRecord Locking LockingType deserialize":{"type":"method","name":"deserialize","children":[],"call":[" to_i "]}," ActiveRecord LegacyYamlAdapter Rails420 convert":{"type":"method","name":"convert","children":[],"call":[]}," ActiveRecord InternalMetadata create_table":{"type":"method","name":"create_table","children":[],"call":["t timestamps ","t string "," connection create_table "," table_name "," connection "," connection internal_string_options_for_primary_key "," table_exists? "," connection rename_table "," original_table_name "," original_table_exists? "," connection table_exists? "," enabled? "]}," ActiveRecord InternalMetadata original_table_exists?":{"type":"method","name":"original_table_exists?","children":[],"call":[" connection table_exists? "," original_table_name "," connection ","ActiveSupport Deprecation  silence "]}," ActiveRecord InternalMetadata table_exists?":{"type":"method","name":"table_exists?","children":[],"call":[" connection table_exists? "," table_name "," connection ","ActiveSupport Deprecation  silence "," connection schema_cache data_source_exists? "," connection schema_cache "]}," ActiveRecord InternalMetadata []":{"type":"method","name":"[]","children":[],"call":[" where pluck first "," where pluck "," where "," enabled? "," where pick ","entry [] "," value_key "," select_entry "," select_entry  [] "," select_ select_entry  "]}," ActiveRecord InternalMetadata []=":{"type":"method","name":"[]=","children":[],"call":[" find_or_initialize_by update_attributes! "," find_or_initialize_by "," first_or_initialize update_attributes! "," first_or_initialize "," find_or_initialize_by update! "," enabled? "," update_or_create_entry "]}," ActiveRecord InternalMetadata original_table_name":{"type":"method","name":"original_table_name","children":[],"call":[" table_name_suffix "," table_name_prefix "]}," ActiveRecord InternalMetadata table_name":{"type":"method","name":"table_name","children":[],"call":[" table_name_suffix ","ActiveRecord Base  internal_metadata_table_name "," table_name_prefix "," internal_metadata_table_name ","ActiveRecord Base  table_name_suffix ","ActiveRecord Base  table_name_prefix "]}," ActiveRecord InternalMetadata primary_key":{"type":"method","name":"primary_key","children":[],"call":[]}," ActiveRecord FixtureSet model_class=":{"type":"method","name":"model_class=","children":[],"call":["class_name safe_constantize ","class_name is_a? "]}," ActiveRecord FixtureSet File prepare_erb":{"type":"method","name":"prepare_erb","children":[],"call":["erb filename= ","ERB  new ","ERB  new  filename= "]}," ActiveRecord FixtureSet File raw_rows":{"type":"method","name":"raw_rows","children":[],"call":[" raise ","error backtrace ","error class "," validate to_a "," validate ","YAML  load "," render ","IO  read ","error message ","ActiveSupport ConfigurationFile  parse ","ActiveRecord FixtureSet RenderContext  create_subclass new get_binding ","ActiveRecord FixtureSet RenderContext  create_subclass new ","ActiveRecord FixtureSet RenderContext  create_subclass "]}," ActiveRecord FixtureSet File config_row":{"type":"method","name":"config_row","children":[],"call":["row last ","fixture_name == "," raw_rows find "," raw_rows "," validate_config_row "]}," ActiveRecord FixtureSet File model_class":{"type":"method","name":"model_class","children":[],"call":[" config_row [] "," config_row "]}," ActiveRecord StatementInvalid original_exception":{"type":"method","name":"original_exception","children":[],"call":[" cause ","ActiveSupport Deprecation  warn "," caller "]}," ActiveRecord RecordNotFound initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Enum raise_conflict_error":{"type":"method","name":"raise_conflict_error","children":[],"call":[" raise ","ENUM_CONFLICT_MESSAGE  % "," name "]}," ActiveRecord Enum EnumType assert_valid_value":{"type":"method","name":"assert_valid_value","children":[],"call":[" raise "," name "," mapping has_value? "," mapping "," mapping has_key? ","value blank? "," serializable? "]}," ActiveRecord Enum EnumType serialize":{"type":"method","name":"serialize","children":[],"call":[" mapping fetch "," mapping "," subtype serialize "," subtype "]}," ActiveRecord Enum EnumType deserialize":{"type":"method","name":"deserialize","children":[],"call":[" mapping key "," subtype deserialize "," subtype "," mapping ","value nil? ","value to_i "]}," ActiveRecord Enum EnumType cast":{"type":"method","name":"cast","children":[],"call":[" assert_valid_value "," mapping key "," mapping "," mapping has_value? ","value to_s "," mapping has_key? ","value blank? ","value presence "]}," ActiveRecord Enum EnumType initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord DynamicMatchers Method finder":{"type":"method","name":"finder","children":[],"call":[" raise "]}," ActiveRecord DynamicMatchers Method attributes_hash":{"type":"method","name":"attributes_hash","children":[],"call":["{ + + ","{ + ","(send\n  (send nil :attribute_names) :map) join "," attribute_names map "," attribute_names "]}," ActiveRecord DynamicMatchers Method signature":{"type":"method","name":"signature","children":[],"call":["(send\n  (send nil :attribute_names) :map) join "," attribute_names map "," attribute_names "]}," ActiveRecord Core ClassMethods table_metadata":{"type":"method","name":"table_metadata","children":[],"call":["TableMetadata  new "," arel_table "]}," ActiveRecord Core ClassMethods cached_find_by_statement":{"type":"method","name":"cached_find_by_statement","children":[],"call":["StatementCache  create "," connection ","cache [] ","cache synchronize ","@find_by_statement_cache [] "," connection prepared_statements ","@find_by_statement_cache synchronize ","cache compute_if_absent ","@find_by_statement_cache []  [] ","@find_by_statement_cache []  synchronize ","@find_by_statement_@find_by_statement_cache []  [] ","@find_by_statement_@find_by_statement_cache []  synchronize ","@find_by_statement_cache []  compute_if_absent "]}," ActiveRecord Core ClassMethods type_caster":{"type":"method","name":"type_caster","children":[],"call":["TypeCaster Map  new "]}," ActiveRecord Core ClassMethods predicate_builder":{"type":"method","name":"predicate_builder","children":[],"call":["PredicateBuilder  new "," table_metadata "]}," ActiveRecord Core ClassMethods arel_attribute":{"type":"method","name":"arel_attribute","children":[],"call":["table [] "," attribute_alias "," attribute_alias? "," attribute_aliases [] "," attribute_aliases ","name to_s "," attribute_alias  to_s ","name to_s  to_s "]}," ActiveRecord ConnectionHandling connection_specification_name":{"type":"method","name":"connection_specification_name","children":[],"call":[" superclass connection_specification_name "," superclass "," == ","@connection_specification_name nil? ","(ivar :@connection_specification_name) ! "," primary_class? ","Base  name "," superclass connection_specification_name  nil? ","(ivar : superclass connection_specification_name ) ! "]}," ActiveRecord ConnectionAdapters StatementPool dealloc":{"type":"method","name":"dealloc","children":[],"call":[" raise "]}," ActiveRecord ConnectionAdapters StatementPool cache":{"type":"method","name":"cache","children":[],"call":["@cache [] ","Process  pid "]}," ActiveRecord ConnectionAdapters SQLite3Adapter table_structure_with_collation":{"type":"method","name":"table_structure_with_collation","children":[],"call":["basic_structure to_hash ","column []= ","collation_hash [] ","collation_hash has_key? ","column [] ","basic_structure map! ","collation_hash []= ","COLLATE_REGEX  =~ ","columns_string split each ","columns_string split ","result [] split last ","result [] split ","result [] "," exec_query first "," exec_query "," quote ","basic_structure to_a ","basic_structure map ","result split last ","result split "," query_value ","auto_increments has_key? ","auto_increments []= ","PRIMARY_KEY_AUTOINCREMENT_REGEX  =~ ","result [] split last  split each ","result split last  split each ","result [] split last  split ","result split last  split "," exec_query first  [] split last "," query_value  [] split last "," exec_query first  [] split "," query_value  [] split "," exec_query first  [] "," query_value  [] "," exec_query first  split last "," query_value  split last "," exec_query first  split "," query_value  split "]}," ActiveRecord ConnectionAdapters SQLite3Adapter remove_index":{"type":"method","name":"remove_index","children":[],"call":[" exec_query "," quote_column_name "," index_name_for_remove "," index_exists? ! "," index_exists? ","options [] ","  index_name_for_remove _for_remove "]}," ActiveRecord ConnectionAdapters SQLite3Adapter primary_keys":{"type":"method","name":"primary_keys","children":[],"call":["f [] ","(send\n  (lvar :pks) :sort_by) map ","pks sort_by ","f [] > "," table_structure select "," table_structure "]}," ActiveRecord ConnectionAdapters SQLite3Adapter view_exists?":{"type":"method","name":"view_exists?","children":[],"call":[" select_values any? "," select_values ","sql << "," quote ","view_name present? "]}," ActiveRecord ConnectionAdapters SQLite3Adapter views":{"type":"method","name":"views","children":[],"call":[" select_values "]}," ActiveRecord ConnectionAdapters SQLite3Adapter data_source_exists?":{"type":"method","name":"data_source_exists?","children":[],"call":[" select_values any? "," select_values ","sql << "," quote ","table_name present? "]}," ActiveRecord ConnectionAdapters SQLite3Adapter data_sources":{"type":"method","name":"data_sources","children":[],"call":[" select_values "]}," ActiveRecord ConnectionAdapters SQLite3Adapter valid_type?":{"type":"method","name":"valid_type?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLite3Adapter supports_multi_insert?":{"type":"method","name":"supports_multi_insert?","children":[],"call":[" sqlite_version >= "," sqlite_version "]}," ActiveRecord ConnectionAdapters SQLite3Adapter supports_datetime_with_precision?":{"type":"method","name":"supports_datetime_with_precision?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLite3Adapter arel_visitor":{"type":"method","name":"arel_visitor","children":[],"call":["Arel Visitors SQLite  new "]}," ActiveRecord ConnectionAdapters SQLite3Adapter schema_creation":{"type":"method","name":"schema_creation","children":[],"call":["SQLite3 SchemaCreation  new "]}," ActiveRecord ConnectionAdapters SQLite3 SchemaCreation add_column_options!":{"type":"method","name":"add_column_options!","children":[],"call":["sql << ","options [] "]}," ActiveRecord ConnectionAdapters SQLite3 SchemaCreation column_options":{"type":"method","name":"column_options","children":[],"call":["options []= ","o primary_key "]}," ActiveRecord ConnectionAdapters SQLite3 Quoting _type_cast":{"type":"method","name":"_type_cast","children":[],"call":["value encode ","value encoding == ","value encoding ","value to_f "]}," ActiveRecord ConnectionAdapters SQLite3 Quoting _quote":{"type":"method","name":"_quote","children":[],"call":["value hex ","value is_a? "]}," ActiveRecord ConnectionAdapters SQLite3 Quoting quoted_time":{"type":"method","name":"quoted_time","children":[],"call":[" quoted_date "," quoted_date sub ","value change ","value change  change "]}," ActiveRecord ConnectionAdapters SQLite3 Quoting quote_column_name":{"type":"method","name":"quote_column_name","children":[],"call":[" gsub ","@quoted_column_names [] ","(str \"\\\"\") freeze "," class quoted_column_names [] "," class quoted_column_names "," class ","QUOTED_COLUMN_NAMES  [] "]}," ActiveRecord ConnectionAdapters SQLite3 Quoting quote_table_name_for_assignment":{"type":"method","name":"quote_table_name_for_assignment","children":[],"call":[" quote_column_name "]}," ActiveRecord ConnectionAdapters SQLite3 Quoting quote_string":{"type":"method","name":"quote_string","children":[],"call":["@connection class quote ","@connection class "," SQLite3 Database  quote "]}," ActiveRecord ConnectionAdapters SQLite3 ExplainPrettyPrinter pp":{"type":"method","name":"pp","children":[],"call":["(send\n  (send\n    (lvar :result) :rows) :map) join + ","(send\n  (send\n    (lvar :result) :rows) :map) join ","row join ","result rows map ","result rows "]}," ActiveRecord ConnectionAdapters SqlTypeMetadata attributes_for_hash":{"type":"method","name":"attributes_for_hash","children":[],"call":[" scale "," precision "," limit "," type "," sql_type "," class "]}," ActiveRecord ConnectionAdapters SqlTypeMetadata hash":{"type":"method","name":"hash","children":[],"call":[" attributes_for_hash hash "," attributes_for_hash ","SqlTypeMetadata  hash ^ ^ ^ ^ ^ "," scale hash >> "," scale hash "," scale ","SqlTypeMetadata  hash ^ ^ ^ ^ "," precision hash >> "," precision hash "," precision ","SqlTypeMetadata  hash ^ ^ ^ "," limit hash "," limit ","SqlTypeMetadata  hash ^ ^ "," type hash "," type ","SqlTypeMetadata  hash ^ "," sql_type hash "," sql_type ","SqlTypeMetadata  hash "]}," ActiveRecord ConnectionAdapters SqlTypeMetadata ==":{"type":"method","name":"==","children":[],"call":[" attributes_for_hash == ","other attributes_for_hash "," attributes_for_hash ","other is_a? "," scale == ","other scale "," scale "," precision == ","other precision "," precision "," limit == ","other limit "," limit "," type == ","other type "," type "," sql_type == ","other sql_type "," sql_type "]}," ActiveRecord ConnectionAdapters SqlTypeMetadata initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters SchemaCache prepare_data_sources":{"type":"method","name":"prepare_data_sources","children":[],"call":["@data_sources []= "," connection data_sources each "," connection data_sources "," connection "," tables_to_cache each "," tables_to_cache "]}," ActiveRecord ConnectionAdapters SchemaCache clear_data_source_cache!":{"type":"method","name":"clear_data_source_cache!","children":[],"call":["@data_sources delete ","@primary_keys delete ","@columns_hash delete ","@columns delete ","@indexes delete "]}," ActiveRecord ConnectionAdapters SchemaCache data_sources":{"type":"method","name":"data_sources","children":[],"call":["@data_sources [] "]}," ActiveRecord ConnectionAdapters SchemaCache data_source_exists?":{"type":"method","name":"data_source_exists?","children":[],"call":["@data_sources []= "," connection data_source_exists? "," connection ","@data_sources [] ","@data_sources key? "," prepare_data_sources ","@data_sources empty? "," deep_deduplicate "," ignored_table? ","connection data_source_exists? "]}," ActiveRecord ConnectionAdapters SchemaCache initialize_dup":{"type":"method","name":"initialize_dup","children":[],"call":["@data_sources dup ","@primary_keys dup ","@columns_hash dup ","@columns dup ","@indexes dup ","@data_sources dup  dup ","@primary_keys dup  dup ","@columns_hash dup  dup ","@columns dup _hash dup ","@columns dup  dup ","@indexes dup  dup "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter construct_coder":{"type":"method","name":"construct_coder","children":[],"call":["coder_class new ","row [] ","row [] to_i "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter add_pg_decoders":{"type":"method","name":"add_pg_decoders","children":[],"call":["@connection type_map_for_results= ","map add_coder ","coders each ","PG TypeMapByOid  new ","(send\n  (lvar :result) :map) compact "," construct_coder ","coders_by_name [] ","row [] ","result map "," execute_and_clear ","(str \"            SELECT t.oid, t.typname\\n\") % ","known_coder_types join "," quote ","coders_by_name keys map ","coders_by_name keys "," update_typemap_for_default_timezone ","coder name == ","coder name ","coders find ","(str \"SELECT t.oid, t.typname\\n\") % ","coders_by_name []= ","@type_map_for_results add_coder ","MoneyDecoder  new ","PG TextDecoder Bytea  new ","@type_map_for_results default_type_map= ","result filter_map ","@raw_connection type_map_for_results= ","@connection type_PG TypeMapByOid  new _for_results= ","PG TypeMapByOid  new  add_coder ","(send\n  (lvar :result) :PG TypeMapByOid  new ) compact ","result PG TypeMapByOid  new  ","coders_by_name keys PG TypeMapByOid  new  "," update_typePG TypeMapByOid  new _for_default_timezone ","@type_PG TypeMapByOid  new _for_results add_coder ","@type_PG TypeMapByOid  new _for_results default_type_PG TypeMapByOid  new = ","PG TypeMapByOid  new  default_type_map= ","result filter_PG TypeMapByOid  new  ","@raw_connection type_PG TypeMapByOid  new _for_results= "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter add_pg_encoders":{"type":"method","name":"add_pg_encoders","children":[],"call":["@connection type_map_for_queries= ","map []= ","PG TextEncoder Float  new ","PG TextEncoder Boolean  new ","PG TextEncoder Integer  new ","PG TypeMapByClass  new ","@raw_connection type_map_for_queries= ","@connection type_PG TypeMapByClass  new _for_queries= ","PG TypeMapByClass  new  []= ","@raw_connection type_PG TypeMapByClass  new _for_queries= "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter can_perform_case_insensitive_comparison_for?":{"type":"method","name":"can_perform_case_insensitive_comparison_for?","children":[],"call":["result getvalue "," execute_and_clear ","column sql_type ","@case_insensitive_cache [] "," quote ","@case_insensitive_cache []= ","@case_insensitive_cache fetch "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter in_transaction?":{"type":"method","name":"in_transaction?","children":[],"call":[" open_transactions > "," open_transactions "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter is_cached_plan_failure?":{"type":"method","name":"is_cached_plan_failure?","children":[],"call":["pgerror message include? ","pgerror message ","code == ","pgerror result result_error_field ","pgerror result ","e cause ","pgerror result result_error_field == ","e cause  message include? ","e cause  message ","pgerror result result_error_field  == ","e cause  result result_error_field ","e cause  result ","e cause  result result_error_field == "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter release_advisory_lock":{"type":"method","name":"release_advisory_lock","children":[],"call":[" select_value "," raise ","lock_id bit_length <= ","lock_id bit_length ","lock_id is_a? "," query_value "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter get_advisory_lock":{"type":"method","name":"get_advisory_lock","children":[],"call":[" select_value "," raise ","lock_id bit_length <= ","lock_id bit_length ","lock_id is_a? "," query_value "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter supports_advisory_locks?":{"type":"method","name":"supports_advisory_locks?","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter supports_comments?":{"type":"method","name":"supports_comments?","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter supports_json?":{"type":"method","name":"supports_json?","children":[],"call":[" postgresql_version >= "," postgresql_version "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter supports_datetime_with_precision?":{"type":"method","name":"supports_datetime_with_precision?","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter supports_expression_index?":{"type":"method","name":"supports_expression_index?","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter arel_visitor":{"type":"method","name":"arel_visitor","children":[],"call":["Arel Visitors PostgreSQL  new "]}," ActiveRecord ConnectionAdapters PostgreSQLTypeMetadata attributes_for_hash":{"type":"method","name":"attributes_for_hash","children":[],"call":[" fmod "," oid "," class "]}," ActiveRecord ConnectionAdapters PostgreSQLTypeMetadata hash":{"type":"method","name":"hash","children":[],"call":[" attributes_for_hash hash "," attributes_for_hash "]}," ActiveRecord ConnectionAdapters PostgreSQLTypeMetadata ==":{"type":"method","name":"==","children":[],"call":[" attributes_for_hash == ","other attributes_for_hash "," attributes_for_hash ","other is_a? "]}," ActiveRecord ConnectionAdapters PostgreSQLTypeMetadata sql_type":{"type":"method","name":"sql_type","children":[],"call":[" gsub "," freeze "]}," ActiveRecord ConnectionAdapters PostgreSQLTypeMetadata initialize":{"type":"method","name":"initialize","children":[],"call":["(str \"\\\\[\\\\]$\") === ","type_metadata sql_type ","(str \"\\\\[\\\\]$\") match? "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements fetch_type_metadata":{"type":"method","name":"fetch_type_metadata","children":[],"call":["PostgreSQLTypeMetadata  new ","SqlTypeMetadata  new ","cast_type scale ","cast_type precision ","cast_type limit ","cast_type type "," get_oid_type ","PostgreSQL TypeMetadata  new "," get_oid_type  scale "," get_oid_type  precision "," get_oid_type  limit "," get_oid_type  type "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements remove_index":{"type":"method","name":"remove_index","children":[],"call":[" execute "," quote_table_name "," raise ","ArgumentError  new "," index_algorithms keys map join "," index_algorithms keys map "," index_algorithms keys "," index_algorithms "," index_algorithms fetch ","options [] ","options key? ","options is_a? ","PostgreSQL Name  new "," index_name_for_remove ","table to_s ","table schema ","provided_index schema ","table schema != ","provided_index schema present? ","table identifier ","table schema present? ","options []= ","provided_index identifier ","Utils  extract_schema_qualified_name ","options [] to_s ","table_name to_s "," index_algorithm "," index_exists? ! "," index_exists? "," quote_PostgreSQL Name  new _name "," quote_Utils  extract_schema_qualified_name _name ","PostgreSQL Name  new  to_s ","Utils  extract_schema_qualified_name  to_s ","PostgreSQL Name  new  schema ","Utils  extract_schema_qualified_name  schema ","PostgreSQL Name  new  schema != ","Utils  extract_schema_qualified_name  schema != ","Utils  extract_schema_qualified_name  schema present? ","PostgreSQL Name  new  identifier ","Utils  extract_schema_qualified_name  identifier ","PostgreSQL Name  new  schema present? ","PostgreSQL Name  new _name to_s ","Utils  extract_schema_qualified_name _name to_s "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements change_table_comment":{"type":"method","name":"change_table_comment","children":[],"call":[" execute "," quote "," quote_table_name "," clear_cache! "," extract_new_comment_value "," extract_new_ extract_new_comment_value _value "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements change_column_comment":{"type":"method","name":"change_column_comment","children":[],"call":[" execute "," quote "," quote_column_name "," quote_table_name "," clear_cache! "," extract_new_comment_value "," extract_new_ extract_new_comment_value _value "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements primary_keys":{"type":"method","name":"primary_keys","children":[],"call":[" select_values ","(str \"            WITH pk_constraint AS (\\n\") strip_heredoc "," quote_table_name ","(str \"            SELECT a.attname\\n\") strip_heredoc "," quote ","(str \"            SELECT column_name\\n\") strip_heredoc ","name schema ","name identifier ","Utils  extract_schema_qualified_name ","table_name to_s ","scope [] "," quoted_scope "," query_values "," quote_table_Utils  extract_schema_qualified_name  ","(str \"            SELECT a.attUtils  extract_schema_qualified_name \\n\") strip_heredoc ","(str \"            SELECT column_Utils  extract_schema_qualified_name \\n\") strip_heredoc ","Utils  extract_schema_qualified_name  schema ","Utils  extract_schema_qualified_name  identifier ","Utils  extract_schema_qualified_Utils  extract_schema_qualified_name  ","table_Utils  extract_schema_qualified_name  to_s "," quoted_scope  [] "," quoted_ quoted_scope  "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements table_comment":{"type":"method","name":"table_comment","children":[],"call":[" select_value ","(str \"              SELECT pg_catalog.obj_description(c.oid, 'pg_class')\\n\") strip_heredoc "," quote ","name schema ","name identifier ","Utils  extract_schema_qualified_name ","table_name to_s ","scope [] "," quoted_scope "," query_value ","Utils  extract_schema_qualified_name  schema ","Utils  extract_schema_qualified_name  identifier ","Utils  extract_schema_qualified_Utils  extract_schema_qualified_name  ","table_Utils  extract_schema_qualified_name  to_s "," quoted_scope  [] "," quoted_ quoted_scope  "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements view_exists?":{"type":"method","name":"view_exists?","children":[],"call":[" select_values any? "," select_values ","name schema ","name identifier ","Utils  extract_schema_qualified_name ","view_name to_s "," quote ","Utils  extract_schema_qualified_name  schema ","Utils  extract_schema_qualified_name  identifier ","Utils  extract_schema_qualified_Utils  extract_schema_qualified_name  ","view_Utils  extract_schema_qualified_name  to_s "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements views":{"type":"method","name":"views","children":[],"call":[" select_values "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements data_source_exists?":{"type":"method","name":"data_source_exists?","children":[],"call":[" select_value to_i > "," select_value to_i "," select_value ","name schema ","name identifier ","Utils  extract_schema_qualified_name ","name to_s "," select_values any? "," select_values "," quote ","Utils  extract_schema_qualified_name  schema ","Utils  extract_schema_qualified_name  identifier ","Utils  extract_schema_qualified_Utils  extract_schema_qualified_name  ","Utils  extract_schema_qualified_name  to_s "]}," ActiveRecord ConnectionAdapters PostgreSQL ColumnDumper schema_expression":{"type":"method","name":"schema_expression","children":[],"call":["column serial? "]}," ActiveRecord ConnectionAdapters PostgreSQL ColumnDumper schema_type":{"type":"method","name":"schema_type","children":[],"call":["column bigint? ","column serial? "]}," ActiveRecord ConnectionAdapters PostgreSQL ColumnDumper default_primary_key?":{"type":"method","name":"default_primary_key?","children":[],"call":[" schema_type == "," schema_type "]}," ActiveRecord ConnectionAdapters PostgreSQL ColumnDumper migration_keys":{"type":"method","name":"migration_keys","children":[],"call":[" + "]}," ActiveRecord ConnectionAdapters PostgreSQL ColumnDumper prepare_column_options":{"type":"method","name":"prepare_column_options","children":[],"call":["spec []= ","column array? "]}," ActiveRecord ConnectionAdapters PostgreSQL ColumnDumper column_spec_for_primary_key":{"type":"method","name":"column_spec_for_primary_key","children":[],"call":["spec [] "," schema_type == "," schema_type ","spec merge! ","(sym :name) include? "," prepare_column_options delete_if "," prepare_column_options ","spec []= ","column type inspect ","column type ","column default_function inspect ","column default_function ","column type == ","column bigint? ","column serial? "," schema_default "," schema_type inspect "]}," ActiveRecord ConnectionAdapters PostgreSQL ColumnMethods serial":{"type":"method","name":"serial","children":[],"call":[" column ","args each "]}," ActiveRecord ConnectionAdapters PostgreSQL ColumnMethods circle":{"type":"method","name":"circle","children":[],"call":[" column ","args each "]}," ActiveRecord ConnectionAdapters PostgreSQL ColumnMethods polygon":{"type":"method","name":"polygon","children":[],"call":[" column ","args each "]}," ActiveRecord ConnectionAdapters PostgreSQL ColumnMethods path":{"type":"method","name":"path","children":[],"call":[" column ","args each "]}," ActiveRecord ConnectionAdapters PostgreSQL ColumnMethods box":{"type":"method","name":"box","children":[],"call":[" column ","args each "]}," ActiveRecord ConnectionAdapters PostgreSQL ColumnMethods lseg":{"type":"method","name":"lseg","children":[],"call":[" column ","args each "]}," ActiveRecord ConnectionAdapters PostgreSQL ColumnMethods line":{"type":"method","name":"line","children":[],"call":[" column ","args each "]}," ActiveRecord ConnectionAdapters PostgreSQL ColumnMethods bigserial":{"type":"method","name":"bigserial","children":[],"call":[" column ","args each "]}," ActiveRecord ConnectionAdapters PostgreSQL ColumnMethods primary_key":{"type":"method","name":"primary_key","children":[],"call":["options []= ","options fetch ","type == ","options [] == ","options [] ","(sym :integer) include? ","options delete == ","options delete ","options key? ! ","options key? "]}," ActiveRecord ConnectionAdapters PostgreSQL Quoting lookup_cast_type_from_column":{"type":"method","name":"lookup_cast_type_from_column","children":[],"call":[" type_map lookup ","column sql_type ","column fmod ","column oid "," type_map "]}," ActiveRecord ConnectionAdapters PostgreSQL Quoting quote_default_expression":{"type":"method","name":"quote_default_expression","children":[],"call":[" quote "," type_cast_from_column ","column respond_to? ","value =~ ","column type == ","column type ","value call ","value is_a? ","value include? ","(str \"\\\\(\\\\)\") match? ","type serialize "," lookup_cast_type_from_column ","  lookup_cast_type_from_column _cast_from_column "," type_cast_from_column  =~ ","column  lookup_cast_type_from_column  == ","column  lookup_cast_type_from_column  "," type_cast_from_column  call "," type_cast_from_column  is_a? "," type_cast_from_column  include? "," lookup_cast_type_from_column  serialize "," lookup_cast_ lookup_cast_type_from_column _from_column "]}," ActiveRecord ConnectionAdapters PostgreSQL Quoting quote_schema_name":{"type":"method","name":"quote_schema_name","children":[],"call":["PGconn  quote_ident ","PG Connection  quote_ident "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Xml serialize":{"type":"method","name":"serialize","children":[],"call":["Data  new "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Vector cast":{"type":"method","name":"cast","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQL OID Uuid cast":{"type":"method","name":"cast","children":[],"call":["value to_s [] ","value to_s "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Range infinity":{"type":"method","name":"infinity","children":[],"call":[" Float INFINITY  -@ "," subtype infinity "," subtype "," subtype respond_to? "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Range map":{"type":"method","name":"map","children":[],"call":[" Range  new ","value exclude_end? ","value end ","value begin "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Range ==":{"type":"method","name":"==","children":[],"call":["other type == "," type ","other type ","other subtype == "," subtype ","other subtype ","other is_a? "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Range serialize":{"type":"method","name":"serialize","children":[],"call":["value exclude_end? "," type_cast_single_for_database ","value end ","value begin ","value is_a? "," Range  new "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Rails51Point build_point":{"type":"method","name":"build_point","children":[],"call":["ActiveRecord Point  new "," Float "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Rails51Point number_for_point":{"type":"method","name":"number_for_point","children":[],"call":["number to_s gsub ","number to_s "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Rails51Point serialize":{"type":"method","name":"serialize","children":[],"call":[" number_for_point ","value y ","value x ","value is_a? "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Rails51Point cast":{"type":"method","name":"cast","children":[],"call":[" build_point ","value split ","value [] ","value [] == ","value []  split ","value []  [] ","value []  [] == "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Rails51Point type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQL OID Point serialize":{"type":"method","name":"serialize","children":[],"call":[" number_for_point ","value [] ","value is_a? "," serialize "," build_point ","value y ","value x "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Point cast":{"type":"method","name":"cast","children":[],"call":[" Float ","value map "," cast ","value split ","value [] ","value [] == "," build_point ","value blank? ","value end_with? ","value start_with? ","value []  map ","value []  split ","value []  [] ","value []  [] == ","value []  blank? ","value []  end_with? ","value []  start_with? "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Hstore serialize":{"type":"method","name":"serialize","children":[],"call":["(send\n  (lvar :value) :map) join "," escape_hstore ","value map ","value is_a? "," serialize ","value to_unsafe_h ","value respond_to? "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Hstore deserialize":{"type":"method","name":"deserialize","children":[],"call":[" Hash  [] ","k gsub gsub ","k gsub ","v gsub gsub ","v gsub ","v upcase == ","v upcase ","value scan map ","value scan ","value is_a? "," raise ","ERROR  % ","scanner string inspect ","scanner string ","scanner eos? ","scanner skip ","hash []= ","value gsub! ","key gsub! ","scanner scan_until ","scanner scan ","StringScanner  new ","k gsub gsub  gsub gsub ","k gsub gsub  gsub ","v gsub gsub  gsub gsub ","v gsub gsub  gsub ","v gsub gsub  upcase == ","v gsub gsub  upcase ","v gsub gsub alue scan map ","scanner scan_until  scan map ","scanner scan  scan map ","v gsub gsub alue scan ","scanner scan_until  scan ","scanner scan  scan ","v gsub gsub alue is_a? ","scanner scan_until  is_a? ","scanner scan  is_a? ","StringScanner  new  string inspect ","StringScanner  new  string ","StringScanner  new  eos? ","scanner sk gsub gsub ip ","StringScanner  new  skip ","v gsub gsub alue gsub! ","scanner scan_until  gsub! ","scanner scan  gsub! ","k gsub gsub ey gsub! ","StringScanner  new  scan_until ","StringScanner  new  scan "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Cidr serialize":{"type":"method","name":"serialize","children":[],"call":["value instance_variable_get to_s count ","value instance_variable_get to_s ","value instance_variable_get ","IPAddr  === ","value prefix "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Bytea deserialize":{"type":"method","name":"deserialize","children":[],"call":["PGconn  unescape_bytea ","value to_s ","value is_a? ","value nil? ","PG Connection  unescape_bytea "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Bit serialize":{"type":"method","name":"serialize","children":[],"call":["Data  new "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Bit cast":{"type":"method","name":"cast","children":[],"call":["value [] hex to_s ","value [] hex ","value [] "," String  === "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Array map":{"type":"method","name":"map","children":[],"call":["value map "," subtype map "," subtype "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Array type_cast_for_schema":{"type":"method","name":"type_cast_for_schema","children":[],"call":["[ + + ","[ + ","(send\n  (lvar :value) :map) join "," subtype type_cast_for_schema "," subtype ","value map ","value is_a? "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Array ==":{"type":"method","name":"==","children":[],"call":[" delimiter == ","other delimiter "," delimiter "," subtype == ","other subtype "," subtype ","other is_a? "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Array serialize":{"type":"method","name":"serialize","children":[],"call":["@pg_encoder encode "," type_cast_array ","value is_a? ","result force_encoding "," determine_encoding_of_strings ","Data  new ","result force_ determine_encoding_of_strings  ","@pg_encoder encode  force_encoding "," determine_ determine_encoding_of_strings _of_strings "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Array cast":{"type":"method","name":"cast","children":[],"call":[" type_cast_array ","@pg_decoder decode ","value is_a? ","@pg_decoder decode  is_a? "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Array deserialize":{"type":"method","name":"deserialize","children":[],"call":[" type_cast_array ","@pg_decoder decode ","value is_a? "," deserialize ","value values "]}," ActiveRecord ConnectionAdapters PostgreSQL ExplainPrettyPrinter pp":{"type":"method","name":"pp","children":[],"call":["pp join + ","pp join ","pp << ","nrows == ","result rows length ","result rows ","lines map ","- * ","header center rstrip ","header center ","(lvar :header) map max + ","(lvar :header) map max ","(lvar :header) map ","result rows map ","result columns first ","result columns ","result rows length  == ","result rows map  map ","result columns first  center rstrip ","result columns first  center ","(lvar :result columns first ) map max + ","(lvar :result columns first ) map max ","(lvar :result columns first ) map "]}," ActiveRecord ConnectionAdapters PostgreSQLColumn serial?":{"type":"method","name":"serial?","children":[],"call":["(str \"\\\\Anextval\\\\('\\\"?\") === "," default_function "," name "," table_name "," sequence_name_from_parts == "," sequence_name_from_parts "]}," ActiveRecord ConnectionAdapters Mysql2Adapter supports_comments_in_create?":{"type":"method","name":"supports_comments_in_create?","children":[],"call":[]}," ActiveRecord ConnectionAdapters Mysql2Adapter supports_comments?":{"type":"method","name":"supports_comments?","children":[],"call":[]}," ActiveRecord ConnectionAdapters Mysql2Adapter supports_json?":{"type":"method","name":"supports_json?","children":[],"call":[" version >= "," version "," mariadb? ! "," mariadb? "," database_version >= "," database_version "]}," ActiveRecord ConnectionAdapters MySQL TypeMetadata attributes_for_hash":{"type":"method","name":"attributes_for_hash","children":[],"call":[" strict "," extra "," class "]}," ActiveRecord ConnectionAdapters MySQL TypeMetadata hash":{"type":"method","name":"hash","children":[],"call":[" attributes_for_hash hash "," attributes_for_hash ","TypeMetadata  hash ^ ^ "," extra hash "," extra ","TypeMetadata  hash ^ "," __getobj__ hash "," __getobj__ ","TypeMetadata  hash "]}," ActiveRecord ConnectionAdapters MySQL TypeMetadata ==":{"type":"method","name":"==","children":[],"call":[" attributes_for_hash == ","other attributes_for_hash "," attributes_for_hash ","other is_a? "," extra == ","other extra "," extra "," __getobj__ == ","other __getobj__ "," __getobj__ "]}," ActiveRecord ConnectionAdapters MySQL TypeMetadata initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters MySQL ColumnDumper schema_collation":{"type":"method","name":"schema_collation","children":[],"call":["column collation inspect ","column collation ","column collation != ","@table_collation_cache [] "," select_one [] "," select_one ","column table_name ","column instance_variable_get "," exec_query first [] "," exec_query first "," exec_query "," quote ","column column table_name  ","column column instance_variable_get  "]}," ActiveRecord ConnectionAdapters MySQL ColumnDumper schema_precision":{"type":"method","name":"schema_precision","children":[],"call":["column precision == ","column precision ","(str \"time\") === ","column sql_type ","(str \"\\\\A(?:date)?time(?:stamp)?\\\\b\") match? "]}," ActiveRecord ConnectionAdapters MySQL ColumnDumper schema_type":{"type":"method","name":"schema_type","children":[],"call":["column sql_type == ","column sql_type "]}," ActiveRecord ConnectionAdapters MySQL ColumnDumper default_primary_key?":{"type":"method","name":"default_primary_key?","children":[],"call":["column auto_increment? ","column unsigned? ! ","column unsigned? "]}," ActiveRecord ConnectionAdapters MySQL ColumnDumper migration_keys":{"type":"method","name":"migration_keys","children":[],"call":[" + "]}," ActiveRecord ConnectionAdapters MySQL ColumnDumper prepare_column_options":{"type":"method","name":"prepare_column_options","children":[],"call":["spec []= ","column unsigned? ","(pair\n  (sym :type)\n  (send\n    (send nil :schema_type\n      (lvar :column)) :inspect)) merge! "," schema_type inspect "," schema_type ","(str \"\\\\b(?:STORED|PERSISTENT)\\\\b\") match? ","column extra "," extract_expression_for_virtual_column ","column virtual? "," supports_virtual_columns? ","column auto_increment? ","(pair\n  (sym :type)\n  (send\n    (send nil :schema_type\n      (lvar :column)) :inspect)) merge!  []= ","(pair\n  (sym :type)\n  (send\n    (send nil :schema_type\n      (lvar :column)) :in(pair\n  (sym :type)\n  (send\n    (send nil :schema_type\n      (lvar :column)) :inspect)) merge! t)) merge! "," schema_type in(pair\n  (sym :type)\n  (send\n    (send nil :schema_type\n      (lvar :column)) :inspect)) merge! t "]}," ActiveRecord ConnectionAdapters MySQL ColumnDumper column_spec_for_primary_key":{"type":"method","name":"column_spec_for_primary_key","children":[],"call":["spec []= ","column unsigned? "," schema_default ","column auto_increment? ","bigint inspect ","column bigint? ","spec merge! ","(sym :name) include? "," prepare_column_options delete_if "," prepare_column_options ","column type inspect ","column type ","spec empty? "," schema_type inspect "," schema_type ","spec delete ","column type == "]}," ActiveRecord ConnectionAdapters MySQL TableDefinition create_column_definition":{"type":"method","name":"create_column_definition","children":[],"call":["MySQL ColumnDefinition  new "]}," ActiveRecord ConnectionAdapters MySQL TableDefinition new_column_definition":{"type":"method","name":"new_column_definition","children":[],"call":["column charset= ","options [] ","column unsigned ","column unsigned= ","column type= ","$~ [] to_sym ","$~ [] ","column auto_increment= ","column type ","options []= ","column $~ [] to_sym = ","column options [] = ","column $~ [] to_sym  ","column options []  "]}," ActiveRecord ConnectionAdapters MySQL ColumnMethods unsigned_decimal":{"type":"method","name":"unsigned_decimal","children":[],"call":[" column ","args each "]}," ActiveRecord ConnectionAdapters MySQL ColumnMethods unsigned_float":{"type":"method","name":"unsigned_float","children":[],"call":[" column ","args each "]}," ActiveRecord ConnectionAdapters MySQL ColumnMethods unsigned_bigint":{"type":"method","name":"unsigned_bigint","children":[],"call":[" column ","args each "]}," ActiveRecord ConnectionAdapters MySQL ColumnMethods unsigned_integer":{"type":"method","name":"unsigned_integer","children":[],"call":[" column ","args each "]}," ActiveRecord ConnectionAdapters MySQL ColumnMethods json":{"type":"method","name":"json","children":[],"call":[" column ","args each "]}," ActiveRecord ConnectionAdapters MySQL ColumnMethods longtext":{"type":"method","name":"longtext","children":[],"call":[" column ","args each "]}," ActiveRecord ConnectionAdapters MySQL ColumnMethods mediumtext":{"type":"method","name":"mediumtext","children":[],"call":[" column ","args each "]}," ActiveRecord ConnectionAdapters MySQL ColumnMethods tinytext":{"type":"method","name":"tinytext","children":[],"call":[" column ","args each "]}," ActiveRecord ConnectionAdapters MySQL ColumnMethods longblob":{"type":"method","name":"longblob","children":[],"call":[" column ","args each "]}," ActiveRecord ConnectionAdapters MySQL ColumnMethods mediumblob":{"type":"method","name":"mediumblob","children":[],"call":[" column ","args each "]}," ActiveRecord ConnectionAdapters MySQL ColumnMethods tinyblob":{"type":"method","name":"tinyblob","children":[],"call":[" column ","args each "]}," ActiveRecord ConnectionAdapters MySQL ColumnMethods blob":{"type":"method","name":"blob","children":[],"call":[" column ","args each "]}," ActiveRecord ConnectionAdapters MySQL ColumnMethods primary_key":{"type":"method","name":"primary_key","children":[],"call":["options []= ","options key? ! ","options key? ","type == ","(sym :integer) include? "]}," ActiveRecord ConnectionAdapters MySQL SchemaCreation index_in_create":{"type":"method","name":"index_in_create","children":[],"call":[" add_sql_comment! "," quote_column_name ","@conn add_index_options "," quote ","(begin\n  (lvar :index_type)) dup ","(begin\n  (lvar :index_type)) +@ "," accept "]}," ActiveRecord ConnectionAdapters MySQL SchemaCreation add_column_position!":{"type":"method","name":"add_column_position!","children":[],"call":["sql << "," quote_column_name ","options [] "]}," ActiveRecord ConnectionAdapters MySQL SchemaCreation add_column_options!":{"type":"method","name":"add_column_options!","children":[],"call":[" add_sql_comment! ","options [] ","sql << "," quote "," mariadb? "," options_include_default? ","options [] == ","options [] ! ","(str \"\\\\Atimestamp\\\\b\") match? ","options [] sql_type "," add_sql_options [] ! "]}," ActiveRecord ConnectionAdapters MySQL SchemaCreation column_options":{"type":"method","name":"column_options","children":[],"call":["column_options []= ","o charset "]}," ActiveRecord ConnectionAdapters MySQL SchemaCreation add_table_options!":{"type":"method","name":"add_table_options!","children":[],"call":[" add_sql_comment! ","options [] ","create_sql << "," quote ","o comment ","o collation ","o charset "," add_sql_options [] ! ","o options []  "]}," ActiveRecord ConnectionAdapters MySQL SchemaCreation visit_ChangeColumnDefinition":{"type":"method","name":"visit_ChangeColumnDefinition","children":[],"call":[" add_column_position! "," column_options ","o column "," accept "," quote_column_name ","o name ","(str \"CHANGE \") dup ","(str \"CHANGE \") +@ "]}," ActiveRecord ConnectionAdapters MySQL SchemaCreation visit_AddColumnDefinition":{"type":"method","name":"visit_AddColumnDefinition","children":[],"call":[" add_column_position! "," column_options ","o column "]}," ActiveRecord ConnectionAdapters MySQL SchemaCreation visit_ColumnDefinition":{"type":"method","name":"visit_ColumnDefinition","children":[],"call":["o sql_type= "," type_to_sql ","o unsigned ","o scale ","o precision ","o limit ","o type "]}," ActiveRecord ConnectionAdapters MySQL SchemaCreation visit_DropForeignKey":{"type":"method","name":"visit_DropForeignKey","children":[],"call":[]}," ActiveRecord ConnectionAdapters MySQL Quoting _quote":{"type":"method","name":"_quote","children":[],"call":["value hex ","value is_a? "]}," ActiveRecord ConnectionAdapters MySQL Quoting quoted_date":{"type":"method","name":"quoted_date","children":[],"call":[" sub "," supports_datetime_with_precision? "]}," ActiveRecord ConnectionAdapters MySQL Quoting unquoted_false":{"type":"method","name":"unquoted_false","children":[],"call":[]}," ActiveRecord ConnectionAdapters MySQL Quoting quoted_false":{"type":"method","name":"quoted_false","children":[],"call":[]}," ActiveRecord ConnectionAdapters MySQL Quoting unquoted_true":{"type":"method","name":"unquoted_true","children":[],"call":[]}," ActiveRecord ConnectionAdapters MySQL Quoting quoted_true":{"type":"method","name":"quoted_true","children":[],"call":[]}," ActiveRecord ConnectionAdapters MySQL Quoting quote_table_name":{"type":"method","name":"quote_table_name","children":[],"call":[" gsub ","@quoted_table_names [] "," gsub freeze "," class quoted_table_names [] "," class quoted_table_names "," class ","QUOTED_TABLE_NAMES  [] "]}," ActiveRecord ConnectionAdapters MySQL Quoting quote_column_name":{"type":"method","name":"quote_column_name","children":[],"call":[" gsub ","@quoted_column_names [] ","(str \"`\") freeze "," class quoted_column_names [] "," class quoted_column_names "," class ","QUOTED_COLUMN_NAMES  [] "]}," ActiveRecord ConnectionAdapters MySQL ExplainPrettyPrinter build_footer":{"type":"method","name":"build_footer","children":[],"call":["(begin\n  (lvar :nrows)) % ","nrows == "]}," ActiveRecord ConnectionAdapters MySQL ExplainPrettyPrinter build_cells":{"type":"method","name":"build_cells","children":[],"call":["|  + + ","|  + ","cells join ","cells << ","item to_s send ","widths [] ","item to_s ","item is_a? ","item nil? ","items each_with_index ","item to_s public_send "]}," ActiveRecord ConnectionAdapters MySQL ExplainPrettyPrinter build_separator":{"type":"method","name":"build_separator","children":[],"call":["+ + + ","+ + ","(send\n  (lvar :widths) :map) join ","- * ","w + ","padding * ","widths map "]}," ActiveRecord ConnectionAdapters MySQL ExplainPrettyPrinter compute_column_widths":{"type":"method","name":"compute_column_widths","children":[],"call":["widths << ","cells_in_column map max ","cells_in_column map ","(lvar :column) + ","r [] to_s ","r [] ","r [] nil? ","result rows map ","result rows ","result columns each_with_index ","result columns "," tap ","(lvar :column) +  map max ","(lvar :column) +  map "]}," ActiveRecord ConnectionAdapters MySQL ExplainPrettyPrinter pp":{"type":"method","name":"pp","children":[],"call":["pp join + ","pp join ","pp << "," build_footer ","result rows length ","result rows "," build_cells ","result rows each ","result columns "," build_separator "," compute_column_widths "," build_ build_separator  "," compute_column_ compute_column_widths  "]}," ActiveRecord ConnectionAdapters MySQL DatabaseStatements exec_stmt_and_free":{"type":"method","name":"exec_stmt_and_free","children":[],"call":["stmt close ","result free "," raise ","@statements delete ","stmt execute ","@connection prepare ","cache [] ","@statements [] "," log "," type_cast ","attr value_for_database ","binds map ","@connection query_options []= ","ActiveRecord Base  default_timezone ","@connection query_options "," type_casted_binds ","ActiveSupport Dependencies  interlock permit_concurrent_loads ","ActiveSupport Dependencies  interlock "," materialize_transactions "," write_query? "," preventing_writes? "," mark_transaction_written_if_write ","ActiveRecord  default_timezone "," check_if_write_query "," transform_query ","@connection prepare  close ","cache []  close ","stmt execute  free ","@connection prepare  execute ","cache []  execute ","  type_casted_binds  "]}," ActiveRecord ConnectionAdapters MySQL DatabaseStatements select_result":{"type":"method","name":"select_result","children":[],"call":[" exec_stmt_and_free "," execute_and_free "," without_prepared_statement? "," to_sql "," binds_from_relation "," to_ to_sql  "]}," ActiveRecord ConnectionAdapters MySQL DatabaseStatements last_inserted_id":{"type":"method","name":"last_inserted_id","children":[],"call":["@connection last_id "]}," ActiveRecord ConnectionAdapters MySQL DatabaseStatements exec_delete":{"type":"method","name":"exec_delete","children":[],"call":["stmt affected_rows "," exec_stmt_and_free ","@connection affected_rows "," execute_and_free "," without_prepared_statement? ","@lock synchronize "]}," ActiveRecord ConnectionAdapters MySQL DatabaseStatements exec_query":{"type":"method","name":"exec_query","children":[],"call":["ActiveRecord Result  new ","result to_a ","result fields "," exec_stmt_and_free "," execute_and_free "," without_prepared_statement? "," build_result "]}," ActiveRecord ConnectionAdapters MySQL DatabaseStatements execute":{"type":"method","name":"execute","children":[],"call":["@connection query_options []= ","ActiveRecord Base  default_timezone ","@connection query_options "," raise "," write_query? "," preventing_writes? "," raw_execute "," check_if_write_query "," transform_query "]}," ActiveRecord ConnectionAdapters MySQL DatabaseStatements select_rows":{"type":"method","name":"select_rows","children":[],"call":["result to_a ","@connection next_result ","@connection more_results? "," select_result "]}," ActiveRecord ConnectionAdapters MySQL DatabaseStatements select_one":{"type":"method","name":"select_one","children":[],"call":["@connection query_options merge! ","@connection query_options ","result first ","@connection next_result ","@connection more_results? "," select_result "," to_sql "," binds_from_relation "]}," ActiveRecord ConnectionAdapters MySQL DatabaseStatements select_all":{"type":"method","name":"select_all","children":[],"call":["@connection next_result ","@connection more_results? "," unprepared_statement "," prepared_statements ","ExplainRegistry  collect? "," discard_remaining_results ","@connection abandon_results! "]}," ActiveRecord ConnectionAdapters MySQL Column assert_valid_default":{"type":"method","name":"assert_valid_default","children":[],"call":[" raise "," default inspect "," default "," type "," default present? "," blob_or_text_column? "]}," ActiveRecord ConnectionAdapters MySQL Column extract_default":{"type":"method","name":"extract_default","children":[],"call":[" strict "," null "," blob_or_text_column? "]}," ActiveRecord ConnectionAdapters MySQL Column auto_increment?":{"type":"method","name":"auto_increment?","children":[],"call":[" extra == "," extra "]}," ActiveRecord ConnectionAdapters MySQL Column case_sensitive?":{"type":"method","name":"case_sensitive?","children":[],"call":[" collation !~ "," collation ","(str \"_ci\\\\z\") match? ! ","(str \"_ci\\\\z\") match? "," collation end_with? ! "," collation end_with? "]}," ActiveRecord ConnectionAdapters MySQL Column unsigned?":{"type":"method","name":"unsigned?","children":[],"call":["(str \"\\\\bunsigned\\\\z\") === "," sql_type ","(str \"\\\\bunsigned\\\\b\") === ","(str \"\\\\A(?:enum|set)\\\\b\") !~ ","(str \"\\\\bunsigned(?: zerofill)?\\\\z\") match? "]}," ActiveRecord ConnectionAdapters MySQL Column blob_or_text_column?":{"type":"method","name":"blob_or_text_column?","children":[],"call":[" type == "," type ","(str \"\\\\A(?:tiny|medium|long)?blob\\\\b\") === "," sql_type "]}," ActiveRecord ConnectionAdapters MySQL Column has_default?":{"type":"method","name":"has_default?","children":[],"call":[" blob_or_text_column? "]}," ActiveRecord ConnectionAdapters MySQL Column initialize":{"type":"method","name":"initialize","children":[],"call":[" extract_default "," assert_valid_default "]}," ActiveRecord ConnectionAdapters DetermineIfPreparableVisitor visit_Arel_Nodes_SqlLiteral":{"type":"method","name":"visit_Arel_Nodes_SqlLiteral","children":[],"call":[]}," ActiveRecord ConnectionAdapters DetermineIfPreparableVisitor visit_Arel_Nodes_In":{"type":"method","name":"visit_Arel_Nodes_In","children":[],"call":["bind value boundable? ! ","bind value boundable? ","bind value ","Relation QueryAttribute  === ","Arel Nodes BindParam  === ","o right delete_if ","o right ","o right empty? ! ","o right empty? ","Array  === "]}," ActiveRecord ConnectionAdapters DetermineIfPreparableVisitor accept":{"type":"method","name":"accept","children":[],"call":[]}," ActiveRecord ConnectionAdapters NullColumn initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters Column bigint?":{"type":"method","name":"bigint?","children":[],"call":["(str \"\\\\Abigint\\\\b\") === "," sql_type ","(str \"bigint\") === ","(str \"\\\\Abigint\\\\b\") match? "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter MysqlString serialize":{"type":"method","name":"serialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter MysqlJson changed_in_place?":{"type":"method","name":"changed_in_place?","children":[],"call":[" serialize "," deserialize "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter binary_to_sql":{"type":"method","name":"binary_to_sql","children":[],"call":[" raise "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter text_to_sql":{"type":"method","name":"text_to_sql","children":[],"call":[" raise "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter integer_to_sql":{"type":"method","name":"integer_to_sql","children":[],"call":[" raise "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter extract_schema_qualified_name":{"type":"method","name":"extract_schema_qualified_name","children":[],"call":["@config [] ","string to_s scan ","string to_s "," quote ","string to_s scan map "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter create_table_definition":{"type":"method","name":"create_table_definition","children":[],"call":["MySQL TableDefinition  new "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter create_table_info":{"type":"method","name":"create_table_info","children":[],"call":[" select_one [] "," select_one "," quote_table_name "," create_table_info_cache [] "," create_table_info_cache ","@create_table_info_cache [] "," exec_query first [] "," exec_query first "," exec_query "," internal_exec_query first [] "," internal_exec_query first "," internal_exec_query "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter create_table_info_cache":{"type":"method","name":"create_table_info_cache","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter column_definitions":{"type":"method","name":"column_definitions","children":[],"call":[" each_hash "," execute_and_free "," quote_table_name "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter fetch_type_metadata":{"type":"method","name":"fetch_type_metadata","children":[],"call":["MySQL TypeMetadata  new "," strict_mode? ","MysqlTypeMetadata  new "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter extract_precision":{"type":"method","name":"extract_precision","children":[],"call":["(str \"time\") === ","(str \"\\\\A(?:date)?time(?:stamp)?\\\\b\") match? "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter can_perform_case_insensitive_comparison_for?":{"type":"method","name":"can_perform_case_insensitive_comparison_for?","children":[],"call":["column case_sensitive? "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter primary_keys":{"type":"method","name":"primary_keys","children":[],"call":[" select_values ","(str \"          SELECT column_name\\n\") strip_heredoc "," quote "," extract_schema_qualified_name "," raise ","table_name present? ","@config [] ","table_name to_s split ","table_name to_s ","scope [] "," quoted_scope "," query_values "," quoted_scope  [] "," quoted_ quoted_scope  "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter table_options":{"type":"method","name":"table_options","children":[],"call":["raw_table_options sub! ","create_table_info sub sub strip ","create_table_info sub sub ","create_table_info sub "," create_table_info ","raw_table_options sub ","table_options []= "," table_comment ","raw_table_options blank? ","raw_table_options == ","$` + ","raw_table_options empty? ","create_table_info sub sub strip  sub! ","$` +  sub! "," create_table_info  sub sub strip "," create_table_info  sub sub "," create_table_info  sub ","  create_table_info  ","create_table_info sub sub strip  sub ","$` +  sub ","create_table_info sub sub strip  blank? ","$` +  blank? ","create_table_info sub sub strip  == ","$` +  == ","create_table_info sub sub strip  empty? ","$` +  empty? "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter add_sql_comment!":{"type":"method","name":"add_sql_comment!","children":[],"call":["sql << "," quote ","comment present? "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter table_comment":{"type":"method","name":"table_comment","children":[],"call":[" select_value ","(str \"          SELECT table_comment\\n\") strip_heredoc "," quote "," extract_schema_qualified_name ","scope [] "," quoted_scope "," query_value "," query_value presence "," quoted_scope  [] "," quoted_ quoted_scope  "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter view_exists?":{"type":"method","name":"view_exists?","children":[],"call":[" select_values any? "," select_values ","sql << "," quote "," extract_schema_qualified_name ","view_name present? ","@config [] ","view_name to_s split ","view_name to_s "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter views":{"type":"method","name":"views","children":[],"call":[" select_values "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter data_source_exists?":{"type":"method","name":"data_source_exists?","children":[],"call":[" select_values any? "," select_values ","sql << "," quote "," extract_schema_qualified_name ","table_name present? ","@config [] ","table_name to_s split ","table_name to_s "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter data_sources":{"type":"method","name":"data_sources","children":[],"call":[" select_values ","sql << "," quote ","@config [] "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter explain":{"type":"method","name":"explain","children":[],"call":["MySQL ExplainPrettyPrinter  new pp ","MySQL ExplainPrettyPrinter  new ","Time  now - ","Time  now "," exec_query "," to_sql ","ExplainPrettyPrinter  new pp ","ExplainPrettyPrinter  new ","Concurrent  monotonic_time - ","Concurrent  monotonic_time "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter release_advisory_lock":{"type":"method","name":"release_advisory_lock","children":[],"call":[" select_value to_s == "," select_value to_s "," select_value "," select_value == "," quote "," query_value == "," query_value ","lock_name to_s "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter get_advisory_lock":{"type":"method","name":"get_advisory_lock","children":[],"call":[" select_value to_s == "," select_value to_s "," select_value "," select_value == "," quote "," query_value == "," query_value ","lock_name to_s "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter supports_advisory_locks?":{"type":"method","name":"supports_advisory_locks?","children":[],"call":[" version >= "," version "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter supports_explain?":{"type":"method","name":"supports_explain?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter supports_statement_cache?":{"type":"method","name":"supports_statement_cache?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter internal_string_options_for_primary_key":{"type":"method","name":"internal_string_options_for_primary_key","children":[],"call":["options []= "," collation sub "," collation ","CHARSETS_OF_4BYTES_MAXLEN  include? "," charset "," tap "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter StatementPool dealloc":{"type":"method","name":"dealloc","children":[],"call":["stmt [] close ","stmt [] ","stmt close "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter arel_visitor":{"type":"method","name":"arel_visitor","children":[],"call":["Arel Visitors MySQL  new "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter update_table_definition":{"type":"method","name":"update_table_definition","children":[],"call":["MySQL Table  new "]}," ActiveRecord ConnectionAdapters AbstractAdapter register_class_with_precision":{"type":"method","name":"register_class_with_precision","children":[],"call":["klass new "," extract_precision ","args last ","mapping register_type "," extract_ extract_precision  "]}," ActiveRecord ConnectionAdapters AbstractAdapter combine_bind_parameters":{"type":"method","name":"combine_bind_parameters","children":[],"call":["result << ","from_clause + + + ","from_clause + + ","from_clause + ","from_clause + + +  << "]}," ActiveRecord ConnectionAdapters AbstractAdapter can_perform_case_insensitive_comparison_for?":{"type":"method","name":"can_perform_case_insensitive_comparison_for?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter release_advisory_lock":{"type":"method","name":"release_advisory_lock","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter get_advisory_lock":{"type":"method","name":"get_advisory_lock","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter supports_multi_insert?":{"type":"method","name":"supports_multi_insert?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter supports_comments_in_create?":{"type":"method","name":"supports_comments_in_create?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter supports_comments?":{"type":"method","name":"supports_comments?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter supports_json?":{"type":"method","name":"supports_json?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter supports_datetime_with_precision?":{"type":"method","name":"supports_datetime_with_precision?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter supports_expression_index?":{"type":"method","name":"supports_expression_index?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter supports_advisory_locks?":{"type":"method","name":"supports_advisory_locks?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter arel_visitor":{"type":"method","name":"arel_visitor","children":[],"call":["Arel Visitors ToSql  new "]}," ActiveRecord ConnectionAdapters TransactionManager after_failure_actions":{"type":"method","name":"after_failure_actions","children":[],"call":["@connection clear_cache! ","error is_a? ","transaction is_a? "]}," ActiveRecord ConnectionAdapters Transaction before_commit_records":{"type":"method","name":"before_commit_records","children":[],"call":[" records uniq each "," records uniq "," records ","record before_committed! "," run_action_on_records ","candidates []= "," records each_with_object "," unique_records ","ActiveRecord  before_committed_on_all_records "]}," ActiveRecord ConnectionAdapters NullTransaction state":{"type":"method","name":"state","children":[],"call":[]}," ActiveRecord ConnectionAdapters SchemaStatements can_remove_index_by_name?":{"type":"method","name":"can_remove_index_by_name?","children":[],"call":["options except empty? ","options except ","options key? ","options is_a? ","column_name nil? "]}," ActiveRecord ConnectionAdapters SchemaStatements extract_new_default_value":{"type":"method","name":"extract_new_default_value","children":[],"call":["default_or_changes [] ","default_or_changes has_key? ","default_or_changes is_a? "]}," ActiveRecord ConnectionAdapters SchemaStatements index_name_options":{"type":"method","name":"index_name_options","children":[],"call":["column_names scan join ","column_names scan ","column_names is_a? ","(str \"\\\\W\") === ","(str \"\\\\W\") match? "," expression_column_name? ","column_names scan join  scan join ","column_names scan join  scan ","column_names scan join  is_a? "]}," ActiveRecord ConnectionAdapters SchemaStatements change_column_comment":{"type":"method","name":"change_column_comment","children":[],"call":[" raise "," class "]}," ActiveRecord ConnectionAdapters SchemaStatements change_table_comment":{"type":"method","name":"change_table_comment","children":[],"call":[" raise "," class "]}," ActiveRecord ConnectionAdapters SchemaStatements internal_string_options_for_primary_key":{"type":"method","name":"internal_string_options_for_primary_key","children":[],"call":[]}," ActiveRecord ConnectionAdapters SchemaStatements initialize_internal_metadata_table":{"type":"method","name":"initialize_internal_metadata_table","children":[],"call":["ActiveRecord InternalMetadata  create_table "]}," ActiveRecord ConnectionAdapters SchemaStatements insert_versions_sql":{"type":"method","name":"insert_versions_sql","children":[],"call":["(send\n  (lvar :versions) :map) join ","versions map ","sql << "," supports_multi_insert? ","ActiveRecord Migrator  schema_migrations_table_name "," quote ","versions is_a? "," quote_table_name ","ActiveRecord SchemaMigration  table_name ","(str \"INSERT INTO \") dup ","(str \"INSERT INTO \") +@ "," schema_migration table_name "," schema_migration ","(send\n  (send\n    (lvar :versions) :reverse) :map) join ","versions reverse map ","versions reverse ","(str \"INSERT INTO \") dup  << ","(str \"INSERT INTO \") +@  << "]}," ActiveRecord ConnectionAdapters SchemaStatements foreign_key_options":{"type":"method","name":"foreign_key_options","children":[],"call":[" foreign_key_name ","options [] "," foreign_key_column_for ","options dup "," raise ","(str \"For composite primary keys, specify :column and :primary_key, where\\n\") squish ","to_table inspect "," Array size != "," Array size "," Array ","options [] is_a? ","options [] map ","options dup  [] ","options dup  dup ","options dup  [] is_a? ","options dup  [] map "]}," ActiveRecord ConnectionAdapters SchemaStatements foreign_key_for!":{"type":"method","name":"foreign_key_for!","children":[],"call":[" raise "," foreign_key_for "]}," ActiveRecord ConnectionAdapters SchemaStatements foreign_key_for":{"type":"method","name":"foreign_key_for","children":[],"call":["fk defined_for? "," foreign_keys detect "," foreign_keys "," supports_foreign_keys? "," use_foreign_keys? "]}," ActiveRecord ConnectionAdapters SchemaStatements foreign_key_exists?":{"type":"method","name":"foreign_key_exists?","children":[],"call":[" foreign_key_for present? "," foreign_key_for "]}," ActiveRecord ConnectionAdapters SchemaStatements primary_key":{"type":"method","name":"primary_key","children":[],"call":["pks first ","pks one? "," warn ","(str \"          WARNING: Rails does not support composite primary key.\\n\") strip_heredoc ","pks count > ","pks count "," primary_keys ","pk first ","pk size > ","pk size "," primary_keys  first ","pk first s first "," primary_keys s first "," primary_keys  one? ","pk first s one? "," primary_keys s one? "," primary_keys  count > ","pk first s count > "," primary_keys s count > "," primary_keys  count ","pk first s count "," primary_keys s count ","pk first  first ","pk first  size > "," primary_keys  size > ","pk first  size "," primary_keys  size "]}," ActiveRecord ConnectionAdapters SchemaStatements view_exists?":{"type":"method","name":"view_exists?","children":[],"call":[" views include? ","view_name to_s "," views "," select_values any? "," select_values "," data_source_sql ","view_name present? "," query_values any? "," query_values "]}," ActiveRecord ConnectionAdapters SchemaStatements views":{"type":"method","name":"views","children":[],"call":[" raise "," select_values "," data_source_sql "," query_values "]}," ActiveRecord ConnectionAdapters SchemaStatements tables":{"type":"method","name":"tables","children":[],"call":[" raise "," select_values "," data_source_sql "," query_values "]}," ActiveRecord ConnectionAdapters SchemaStatements table_comment":{"type":"method","name":"table_comment","children":[],"call":[]}," ActiveRecord ConnectionAdapters SchemaStatements table_options":{"type":"method","name":"table_options","children":[],"call":[]}," ActiveRecord ConnectionAdapters ColumnDumper schema_collation":{"type":"method","name":"schema_collation","children":[],"call":["column collation inspect ","column collation "]}," ActiveRecord ConnectionAdapters ColumnDumper schema_expression":{"type":"method","name":"schema_expression","children":[],"call":["column default_function inspect ","column default_function "]}," ActiveRecord ConnectionAdapters ColumnDumper schema_scale":{"type":"method","name":"schema_scale","children":[],"call":["column scale inspect ","column scale "]}," ActiveRecord ConnectionAdapters ColumnDumper schema_precision":{"type":"method","name":"schema_precision","children":[],"call":["column precision inspect ","column precision "]}," ActiveRecord ConnectionAdapters ColumnDumper schema_limit":{"type":"method","name":"schema_limit","children":[],"call":["limit inspect ","limit != "," native_database_types [] [] "," native_database_types [] ","column type "," native_database_types ","column limit ","column bigint? ","column limit  inspect ","column limit  != ","column column limit  "]}," ActiveRecord ConnectionAdapters ColumnDumper schema_type":{"type":"method","name":"schema_type","children":[],"call":["column type ","column bigint? ","column type to_s "]}," ActiveRecord ConnectionAdapters ColumnDumper default_primary_key?":{"type":"method","name":"default_primary_key?","children":[],"call":[" schema_type == "," schema_type "]}," ActiveRecord ConnectionAdapters ColumnDumper column_spec_for_primary_key":{"type":"method","name":"column_spec_for_primary_key","children":[],"call":["spec merge! "," prepare_column_options except! "," prepare_column_options "," schema_type inspect "," schema_type "," default_primary_key? ","(sym :name) include? "," prepare_column_options delete_if ","column type inspect ","column type ","column type == ","spec [] "," explicit_primary_key_default? "]}," ActiveRecord ConnectionAdapters Table foreign_key_exists?":{"type":"method","name":"foreign_key_exists?","children":[],"call":["@base foreign_key_exists? "," name "]}," ActiveRecord ConnectionAdapters Table foreign_key":{"type":"method","name":"foreign_key","children":[],"call":["@base add_foreign_key "," name "," raise_on_if_exist_options "]}," ActiveRecord ConnectionAdapters TableDefinition primary_keys":{"type":"method","name":"primary_keys","children":[],"call":["PrimaryKeyDefinition  new "]}," ActiveRecord ConnectionAdapters ColumnMethods primary_key":{"type":"method","name":"primary_key","children":[],"call":[" column ","options merge "]}," ActiveRecord ConnectionAdapters ReferenceDefinition foreign_table_name":{"type":"method","name":"foreign_table_name","children":[],"call":[" name "," name to_s pluralize "," name to_s ","Base  pluralize_table_names "," foreign_key_options fetch "," foreign_key_options "]}," ActiveRecord ConnectionAdapters ReferenceDefinition column_names":{"type":"method","name":"column_names","children":[],"call":[" columns map "," columns "]}," ActiveRecord ConnectionAdapters ReferenceDefinition column_name":{"type":"method","name":"column_name","children":[],"call":[" name "]}," ActiveRecord ConnectionAdapters ReferenceDefinition columns":{"type":"method","name":"columns","children":[],"call":["result unshift "," polymorphic_options "," name "," polymorphic "," options "," type "," column_name "]}," ActiveRecord ConnectionAdapters ReferenceDefinition foreign_key_options":{"type":"method","name":"foreign_key_options","children":[],"call":[" as_options merge "," column_name "," as_options "," foreign_key "," conditional_options "]}," ActiveRecord ConnectionAdapters ReferenceDefinition index_options":{"type":"method","name":"index_options","children":[],"call":[" as_options "," index "," polymorphic_index_name ","index_options [] "," polymorphic "," options [] "," options "," as_options merge "," conditional_options "," as_options  [] "," as_options merge  [] "]}," ActiveRecord ConnectionAdapters ReferenceDefinition polymorphic_options":{"type":"method","name":"polymorphic_options","children":[],"call":[" as_options "," options "," polymorphic "," as_options merge "," options [] "," options slice "," as_options merge merge "," conditional_options "]}," ActiveRecord ConnectionAdapters ReferenceDefinition as_options":{"type":"method","name":"as_options","children":[],"call":["value is_a? "]}," ActiveRecord ConnectionAdapters ReferenceDefinition add_to":{"type":"method","name":"add_to","children":[],"call":["table foreign_key "," foreign_key_options "," foreign_table_name "," foreign_key ","table index "," index_options "," column_names "," index ","table column "," columns each "," columns ","column_options extract_options! ","table name "]}," ActiveRecord ConnectionAdapters ReferenceDefinition initialize":{"type":"method","name":"initialize","children":[],"call":[" raise "]}," ActiveRecord ConnectionAdapters ForeignKeyDefinition defined_for?":{"type":"method","name":"defined_for?","children":[],"call":[" to_table == ","options_or_to_table to_s "," to_table "," options [] to_s == ","value to_s "," options [] to_s "," options [] "," options ","options_or_to_table all? ","options_or_to_table is_a? ","v to_s ","options all? ","to_table to_s == ","to_table to_s ","to_table nil? ","to_table_ord to_s "]}," ActiveRecord ConnectionAdapters AbstractAdapter SchemaCreation foreign_key_in_create":{"type":"method","name":"foreign_key_in_create","children":[],"call":[" accept ","ForeignKeyDefinition  new "," foreign_key_options ","ActiveRecord Base  table_name_suffix ","ActiveRecord Base  table_name_prefix "," foreign_key_ foreign_key_options  ","ActiveRecord Base  table_name_ActiveRecord Base  table_name_suffix  ","ActiveRecord Base  table_name_ActiveRecord Base  table_name_prefix  "]}," ActiveRecord ConnectionAdapters AbstractAdapter SchemaCreation add_table_options!":{"type":"method","name":"add_table_options!","children":[],"call":["create_sql << ","options [] "]}," ActiveRecord ConnectionAdapters AbstractAdapter SchemaCreation table_options":{"type":"method","name":"table_options","children":[],"call":["table_options []= ","o options ","o comment "]}," ActiveRecord ConnectionAdapters AbstractAdapter SchemaCreation visit_ForeignKeyDefinition":{"type":"method","name":"visit_ForeignKeyDefinition","children":[],"call":["sql << "," action_sql ","o on_update ","o on_delete ","(str \"              CONSTRAINT \") strip_heredoc "," quote_column_name ","o primary_key "," quote_table_name ","o to_table ","o column ","o name ","(str \"CONSTRAINT \") +@ ","(str \"              CONSTRAINT \") strip_heredoc  << ","(str \"CONSTRAINT \") +@  << "," action_(str \"              CONSTRAINT \") strip_heredoc  "," action_(str \"CONSTRAINT \") +@  "]}," ActiveRecord ConnectionAdapters AbstractAdapter SchemaCreation visit_PrimaryKeyDefinition":{"type":"method","name":"visit_PrimaryKeyDefinition","children":[],"call":["o name join ","o name ","(send\n  (send\n    (lvar :o) :name) :map) join "," quote_column_name ","o name map "]}," ActiveRecord ConnectionAdapters AbstractAdapter SchemaCreation visit_AddColumnDefinition":{"type":"method","name":"visit_AddColumnDefinition","children":[],"call":[" accept ","o column ","(str \"ADD \") dup ","(str \"ADD \") +@ "]}," ActiveRecord ConnectionAdapters Savepoints current_savepoint_name":{"type":"method","name":"current_savepoint_name","children":[],"call":[" current_transaction savepoint_name "," current_transaction "]}," ActiveRecord ConnectionAdapters Quoting prepare_binds_for_database":{"type":"method","name":"prepare_binds_for_database","children":[],"call":["binds map "]}," ActiveRecord ConnectionAdapters Quoting quoted_time":{"type":"method","name":"quoted_time","children":[],"call":[" quoted_date sub "," quoted_date ","value change ","value change  change "]}," ActiveRecord ConnectionAdapters Quoting quote_default_expression":{"type":"method","name":"quote_default_expression","children":[],"call":[" quote "," lookup_cast_type serialize "," lookup_cast_type ","column sql_type ","value call ","value is_a? "," lookup_cast_type serialize  call "," lookup_cast_type serialize  is_a? "]}," ActiveRecord ConnectionAdapters Quoting fetch_type_metadata":{"type":"method","name":"fetch_type_metadata","children":[],"call":["SqlTypeMetadata  new ","cast_type scale ","cast_type precision ","cast_type limit ","cast_type type "," lookup_cast_type "," lookup_cast_type  scale "," lookup_cast_type  precision "," lookup_cast_type  limit "," lookup_cast_type  type "," lookup_ lookup_cast_type  "]}," ActiveRecord ConnectionAdapters Quoting lookup_cast_type_from_column":{"type":"method","name":"lookup_cast_type_from_column","children":[],"call":[" lookup_cast_type ","column sql_type "]}," ActiveRecord ConnectionAdapters Quoting type_cast_from_column":{"type":"method","name":"type_cast_from_column","children":[],"call":["type serialize "," lookup_cast_type_from_column "," lookup_cast_type_from_column  serialize "," lookup_cast_ lookup_cast_type_from_column _from_column "]}," ActiveRecord ConnectionAdapters DatabaseStatements select_prepared":{"type":"method","name":"select_prepared","children":[],"call":[" exec_query "]}," ActiveRecord ConnectionAdapters ConnectionPool adopt_connection":{"type":"method","name":"adopt_connection","children":[],"call":["@connections << ","conn pool= "]}," ActiveRecord ConnectionAdapters ConnectionPool try_to_checkout_new_connection":{"type":"method","name":"try_to_checkout_new_connection","children":[],"call":["conn lease "," adopt_connection "," synchronize "," checkout_new_connection ","(send\n  (send\n    (ivar :@connections) :size) :+\n  (ivar :@now_connecting)) < ","@connections size + ","@connections size ","@threads_blocking_new_connections zero? "," checkout_new_connection  lease "," adopt_ checkout_new_connection ection "," checkout_new_ checkout_new_connection ection ","(send\n  (send\n    (ivar :@ checkout_new_connection ections) :size) :+\n  (ivar :@now_ checkout_new_connection ecting)) < ","@ checkout_new_connection ections size + ","@ checkout_new_connection ections size ","@threads_blocking_new_ checkout_new_connection ections zero? "]}," ActiveRecord ConnectionAdapters ConnectionPool remove_connection_from_thread_cache":{"type":"method","name":"remove_connection_from_thread_cache","children":[],"call":["@thread_cached_conns delete_pair "," connection_cache_key "]}," ActiveRecord ConnectionAdapters ConnectionPool with_new_connections_blocked":{"type":"method","name":"with_new_connections_blocked","children":[],"call":[" synchronize "," bulk_make_new_connections ","num_new_conns_required > ","@available add ","conn in_use? ","@connections each "," num_waiting_in_queue ","@available clear ","@threads_blocking_new_connections zero? "," num_waiting_in_queue  > "]}," ActiveRecord ConnectionAdapters ConnectionPool checkout_for_exclusive_access":{"type":"method","name":"checkout_for_exclusive_access","children":[],"call":[" raise ","msg << ","thread_report join ","thread_report any? ","thread_report << ","conn owner ","conn owner == ","Thread  current ","@connections each "," checkout ","(str \"could not obtain ownership of all database connections in \") dup ","(str \"could not obtain ownership of all database connections in \") +@ ","ActiveSupport IsolatedExecutionState  context ","(str \"could not obtain ownership of all database connections in \") dup  << ","(str \"could not obtain ownership of all database connections in \") +@  << "]}," ActiveRecord ConnectionAdapters ConnectionPool attempt_to_checkout_all_existing_connections":{"type":"method","name":"attempt_to_checkout_all_existing_connections","children":[],"call":[" checkin ","newly_checked_out each "," raise ","newly_checked_out << ","collected_conns << "," checkout_for_exclusive_access ","remaining_timeout < ","timeout_time - ","Time  now ","@now_connecting == ","collected_conns size == ","@connections size ","collected_conns size "," synchronize ","@available with_a_bias_for ","Thread  current ","Time  now + ","@checkout_timeout * ","conn owner == ","conn owner ","@connections select "," loop ","Concurrent  monotonic_time ","Concurrent  monotonic_time + ","Process  clock_gettime ","Process  clock_gettime + ","ActiveSupport IsolatedExecutionState  context ","collected_ checkout_for_exclusive_access s << ","timeout_time -  < ","Time  now +  - ","Concurrent  monotonic_time +  - ","Process  clock_gettime +  - ","@now_ checkout_for_exclusive_access ecting == ","collected_ checkout_for_exclusive_access s size == ","@ checkout_for_exclusive_access ections size ","collected_ checkout_for_exclusive_access s size "," checkout_for_exclusive_access  owner == "," checkout_for_exclusive_access  owner ","@ checkout_for_exclusive_access ections select "]}," ActiveRecord ConnectionAdapters ConnectionPool with_exclusively_acquired_all_connections":{"type":"method","name":"with_exclusively_acquired_all_connections","children":[],"call":[" attempt_to_checkout_all_existing_connections "," with_new_connections_blocked "]}," ActiveRecord ConnectionAdapters ConnectionPool connection_cache_key":{"type":"method","name":"connection_cache_key","children":[],"call":[]}," ActiveRecord ConnectionAdapters ConnectionPool bulk_make_new_connections":{"type":"method","name":"bulk_make_new_connections","children":[],"call":[" checkin "," try_to_checkout_new_connection ","num_new_conns_needed times "," try_to_checkout_ try_to_checkout_new_connection ection ","num_ try_to_checkout_new_connection s_needed times "]}," ActiveRecord ConnectionAdapters ConnectionPool num_waiting_in_queue":{"type":"method","name":"num_waiting_in_queue","children":[],"call":["@available num_waiting "]}," ActiveRecord ConnectionAdapters ConnectionPool clear_reloadable_connections":{"type":"method","name":"clear_reloadable_connections","children":[],"call":[" bulk_make_new_connections ","num_new_conns_required > ","@available add ","@connections each "," num_waiting_in_queue - ","@connections size "," num_waiting_in_queue ","@connections size < ","@available clear ","@connections delete_if ","conn disconnect! ","conn requires_reloading? "," checkin "," synchronize "," with_exclusively_acquired_all_connections ","conn steal! ","conn in_use? "," num_waiting_in_queue -  > "]}," ActiveRecord ConnectionAdapters ConnectionPool disconnect":{"type":"method","name":"disconnect","children":[],"call":["@available clear ","conn disconnect! "," checkin ","@connections each "," synchronize "," with_exclusively_acquired_all_connections ","conn steal! ","conn in_use? "]}," ActiveRecord ConnectionAdapters ConnectionPool ConnectionLeasingQueue internal_poll":{"type":"method","name":"internal_poll","children":[],"call":["conn lease "]}," ActiveRecord ConnectionAdapters ConnectionPool BiasableQueue with_a_bias_for":{"type":"method","name":"with_a_bias_for","children":[],"call":["new_cond broadcast_on_biased "," synchronize ","BiasedConditionVariable  new ","BiasedConditionVariable  new  broadcast_on_biased "]}," ActiveRecord ConnectionAdapters ConnectionPool BiasableQueue BiasedConditionVariable wait":{"type":"method","name":"wait","children":[],"call":["(send\n  (send\n    (const nil :Thread) :current) :==\n  (ivar :@preferred_thread)) wait ","Thread  current == ","Thread  current "]}," ActiveRecord ConnectionAdapters ConnectionPool BiasableQueue BiasedConditionVariable signal":{"type":"method","name":"signal","children":[],"call":["(send\n  (ivar :@num_waiting_on_real_cond) :>\n  (int 0)) signal ","@num_waiting_on_real_cond > "]}," ActiveRecord ConnectionAdapters ConnectionPool BiasableQueue BiasedConditionVariable broadcast_on_biased":{"type":"method","name":"broadcast_on_biased","children":[],"call":["@real_cond broadcast "]}," ActiveRecord ConnectionAdapters ConnectionPool BiasableQueue BiasedConditionVariable broadcast":{"type":"method","name":"broadcast","children":[],"call":["@other_cond broadcast "," broadcast_on_biased "]}," ActiveRecord ConnectionAdapters ConnectionPool BiasableQueue BiasedConditionVariable initialize":{"type":"method","name":"initialize","children":[],"call":["lock new_cond "]}," ActiveRecord ConnectionAdapters ConnectionPool Queue internal_poll":{"type":"method","name":"internal_poll","children":[],"call":[" wait_poll "," no_wait_poll "]}," ActiveRecord CollectionCacheKey collection_cache_key":{"type":"method","name":"collection_cache_key","children":[],"call":["timestamp utc to_s "," cache_timestamp_format ","timestamp utc ","column_type deserialize ","result [] ","result blank? "," connection select_one "," connection ","collection unscope select unscope ","collection unscope select "," connection quote_column_name ","collection unscope "," connection quote_table_name ","collection table_name "," type_for_attribute ","timestamp_column to_s ","collection max_by public_send ","collection max_by ","size > ","collection size ","collection loaded? ","collection model_name cache_key ","collection model_name ","Digest MD5  hexdigest ","collection to_sql ","collection select unscope ","collection select ","query bound_attributes ","query arel ","query select_values= ","select_values % ","Arel SelectManager  new project from ","Arel SelectManager  new project ","Arel SelectManager  new ","query engine ","query arel as ","collection spawn ","collection offset_value ","collection limit_value ","collection max_by _read_attribute ","collection has_limit_or_offset? ","collection records size ","collection records ","collection distinct_value "," connection column_name_from_arel_node ","collection arel_attribute ","collection send ","collection eager_loading? ","ActiveSupport Digest  hexdigest "," connection visitor compile "," connection visitor ","column_type deserialize  utc to_s ","collection max_by public_send  utc to_s ","collection max_by _read_attribute  utc to_s "," cache_column_type deserialize _format "," cache_collection max_by public_send _format "," cache_collection max_by _read_attribute _format ","column_type deserialize  utc ","collection max_by public_send  utc ","collection max_by _read_attribute  utc "," type_for_attribute  deserialize "," connection column_name_from_arel_node _type deserialize "," connection visitor compile _type deserialize "," connection select_one  [] "," connection select_one  blank? ","collection send  unscope select unscope ","collection send  unscope select "," connection quote_ connection column_name_from_arel_node _name "," connection quote_ connection visitor compile _name ","collection send  unscope ","collection send  table_name ","column_type deserialize _column to_s ","collection max_by public_send _column to_s ","collection max_by _read_attribute _column to_s ","timestamp_ connection column_name_from_arel_node  to_s ","timestamp_ connection visitor compile  to_s ","collection send  max_by public_send ","collection send  max_by ","result []  > ","collection size  > ","collection records size  > ","collection result []  ","collection collection size  ","collection collection records size  ","collection send  size ","collection send  loaded? ","collection send  model_name cache_key ","collection send  model_name ","collection send  to_sql ","collection send  select unscope ","collection send  select ","collection unscope select unscope  bound_attributes ","collection select unscope  bound_attributes ","collection unscope  bound_attributes ","collection spawn  bound_attributes ","collection select  bound_attributes ","collection unscope select unscope  arel ","collection select unscope  arel ","collection unscope  arel ","collection spawn  arel ","collection select  arel ","query query arel  ","query Arel SelectManager  new project from  ","query Arel SelectManager  new project  ","collection unscope select unscope  select_values= ","collection select unscope  select_values= ","collection unscope  select_values= ","collection spawn  select_values= ","collection select  select_values= ","collection unscope select unscope  engine ","collection select unscope  engine ","collection unscope  engine ","collection spawn  engine ","collection select  engine ","collection unscope select unscope  arel as ","collection select unscope  arel as ","collection unscope  arel as ","collection spawn  arel as ","collection select  arel as ","query query arel  as ","query Arel SelectManager  new project from  as ","query Arel SelectManager  new project  as ","collection send  spawn ","collection send  offset_value ","collection send  limit_value ","collection send  max_by _read_attribute ","collection send  has_limit_or_offset? ","collection records result []  ","collection records collection size  ","collection records collection records size  ","collection send  records size ","collection send  records ","collection send  distinct_value "," connection column_name_from_query arel _node "," connection column_name_from_Arel SelectManager  new project from _node "," connection column_name_from_Arel SelectManager  new project _node "," connection  connection column_name_from_arel_node _name_from_arel_node "," connection  connection visitor compile _name_from_arel_node ","collection query arel _attribute ","collection Arel SelectManager  new project from _attribute ","collection Arel SelectManager  new project _attribute ","collection send  arel_attribute ","collection send  send ","collection send  eager_loading? "]}," ActiveRecord Coders YAMLColumn check_arity_of_constructor":{"type":"method","name":"check_arity_of_constructor","children":[],"call":[" raise "," object_class "," load "]}," ActiveRecord Coders YAMLColumn assert_valid_value":{"type":"method","name":"assert_valid_value","children":[],"call":[" raise ","obj inspect ","obj class "," object_class ","obj is_a? ","obj nil? "]}," ActiveRecord AutosaveAssociation _ensure_no_duplicate_errors":{"type":"method","name":"_ensure_no_duplicate_errors","children":[],"call":[" errors [] uniq! "," errors [] "," errors "," errors messages each_key "," errors messages "," errors uniq! "]}," ActiveRecord Attributes ClassMethods define_default_attribute":{"type":"method","name":"define_default_attribute","children":[],"call":[" _default_attributes []= "," _default_attributes ","Attribute  from_database ","Attribute UserProvidedDefault  new "," _default_attributes [] "," _default_attributes [] with_type ","value == "," _default_attributes fetch ","name to_s ","ActiveModel Attribute  from_database ","ActiveModel Attribute UserProvidedDefault  new "," _Attribute  from_database s []= "," _Attribute UserProvidedDefault  new s []= "," _ _default_attributes [] with_type s []= "," _ActiveModel Attribute  from_database s []= "," _ActiveModel Attribute UserProvidedDefault  new s []= "," _Attribute  from_database s "," _Attribute UserProvidedDefault  new s "," _ _default_attributes [] with_type s "," _ActiveModel Attribute  from_database s "," _ActiveModel Attribute UserProvidedDefault  new s "," _Attribute  from_database s [] "," _Attribute UserProvidedDefault  new s [] "," _ _default_attributes [] with_type s [] "," _ActiveModel Attribute  from_database s [] "," _ActiveModel Attribute UserProvidedDefault  new s [] "," _Attribute  from_database s [] with_type "," _Attribute UserProvidedDefault  new s [] with_type "," _ _default_attributes [] with_type s [] with_type "," _ActiveModel Attribute  from_database s [] with_type "," _ActiveModel Attribute UserProvidedDefault  new s [] with_type "," _Attribute  from_database s fetch "," _Attribute UserProvidedDefault  new s fetch "," _ _default_attributes [] with_type s fetch "," _ActiveModel Attribute  from_database s fetch "," _ActiveModel Attribute UserProvidedDefault  new s fetch "]}," ActiveRecord Attributes ClassMethods load_schema!":{"type":"method","name":"load_schema!","children":[],"call":[" define_attribute ","options slice ","ActiveRecord Type  lookup ","options except ","type is_a? "," attributes_to_define_after_schema_loads each "," attributes_to_define_after_schema_loads "," _lookup_cast_type ","cast_type [] "," type_for_attribute ","Proc  === ","ActiveRecord Type  lookup  is_a? "," _lookup_cast_ActiveRecord Type  lookup  "," _lookup_cast_type []  ","cast_ActiveRecord Type  lookup  [] ","cast_type []  [] "," ActiveRecord Type  lookup _for_attribute "]}," ActiveRecord Attributes ClassMethods define_attribute":{"type":"method","name":"define_attribute","children":[],"call":[" define_default_attribute "," attribute_types []= "," attribute_types "]}," ActiveRecord AttributeSet map":{"type":"method","name":"map","children":[],"call":["AttributeSet  new "," attributes transform_values "," attributes "]}," ActiveRecord AttributeSet accessed":{"type":"method","name":"accessed","children":[],"call":["(send\n  (send nil :attributes) :select) keys ","attr has_been_read? "," attributes select "," attributes "]}," ActiveRecord AttributeSet deep_dup":{"type":"method","name":"deep_dup","children":[],"call":["copy instance_variable_set "," attributes deep_dup "," attributes "," dup tap "," dup "]}," ActiveRecord AttributeSet []=":{"type":"method","name":"[]=","children":[],"call":[" attributes []= "," attributes "]}," ActiveRecord LazyAttributeHash deep_dup":{"type":"method","name":"deep_dup","children":[],"call":["copy instance_variable_set "," delegate_hash transform_values "," delegate_hash "," dup tap "," dup "]}," ActiveRecord NullMutationTracker forget_change":{"type":"method","name":"forget_change","children":[],"call":[]}," ActiveRecord NullMutationTracker changed_in_place?":{"type":"method","name":"changed_in_place?","children":[],"call":[]}," ActiveRecord NullMutationTracker changed?":{"type":"method","name":"changed?","children":[],"call":[]}," ActiveRecord NullMutationTracker changes":{"type":"method","name":"changes","children":[],"call":[]}," ActiveRecord NullMutationTracker changed_values":{"type":"method","name":"changed_values","children":[],"call":[]}," ActiveRecord AttributeMutationTracker attr_names":{"type":"method","name":"attr_names","children":[],"call":[" attributes keys "," attributes "]}," ActiveRecord AttributeMutationTracker forget_change":{"type":"method","name":"forget_change","children":[],"call":[" attributes []= "," attributes [] forgetting_assignment "," attributes [] "," attributes ","attr_name to_s "," forced_changes delete "," forced_changes ","attr_name to_s  to_s "]}," ActiveRecord AttributeMutationTracker changed_in_place?":{"type":"method","name":"changed_in_place?","children":[],"call":[" attributes [] changed_in_place? "," attributes [] "," attributes ","attr_name to_s "]}," ActiveRecord AttributeMutationTracker changed?":{"type":"method","name":"changed?","children":[],"call":[" attributes [] changed? "," attributes [] "," attributes ","attr_name to_s "," attributes [] value == "," attributes [] value ","OPTION_NOT_GIVEN  == "," attributes [] original_value == "," attributes [] original_value "," forced_changes include? "," forced_changes ","attr_name to_s  to_s "]}," ActiveRecord AttributeMutationTracker changes":{"type":"method","name":"changes","children":[],"call":["result []= "," attributes fetch_value "," attributes "," attributes [] original_value "," attributes [] "," changed? "," attr_names each_with_object "," with_indifferent_access "," attr_names "," change_to_attribute ","result merge! ","  change_to_attribute d? ","  change_to_attribute _to_attribute "]}," ActiveRecord AttributeMutationTracker changed_values":{"type":"method","name":"changed_values","children":[],"call":["result []= "," attributes [] original_value "," attributes [] "," attributes "," changed? "," attr_names each_with_object "," with_indifferent_access "," attr_names "]}," ActiveRecord AttributeMutationTracker initialize":{"type":"method","name":"initialize","children":[],"call":["Set  new "]}," ActiveRecord AttributeMethods accessed_fields":{"type":"method","name":"accessed_fields","children":[],"call":["@attributes accessed "]}," ActiveRecord AttributeMethods ClassMethods has_attribute?":{"type":"method","name":"has_attribute?","children":[],"call":[" attribute_types key? ","attr_name to_s "," attribute_types "," attribute_aliases [] "," attribute_aliases ","attr_name to_s  to_s "]}," ActiveRecord AttributeMethods TimeZoneConversion TimeZoneConverter map_avoiding_infinite_recursion":{"type":"method","name":"map_avoiding_infinite_recursion","children":[],"call":["value equal? "," map "]}," ActiveRecord AttributeMethods TimeZoneConversion TimeZoneConverter set_time_zone_without_conversion":{"type":"method","name":"set_time_zone_without_conversion","children":[],"call":[" Time  zone local_to_utc in_time_zone "," Time  zone local_to_utc "," Time  zone "," Time  zone local_to_utc try "]}," ActiveRecord AttributeMethods TimeZoneConversion TimeZoneConverter cast":{"type":"method","name":"cast","children":[],"call":[" cast "," map_avoiding_infinite_recursion "," user_input_in_time_zone ","value respond_to? "," set_time_zone_without_conversion ","value is_a? ","value nil? ","value map "," map ","value infinite? ","Range  new ","value exclude_end? ","value end ","value begin "]}," ActiveRecord AttributeMethods TimeZoneConversion TimeZoneConverter deserialize":{"type":"method","name":"deserialize","children":[],"call":[" convert_time_to_time_zone "]}," ActiveRecord AttributeMethods Dirty previous_mutation_tracker":{"type":"method","name":"previous_mutation_tracker","children":[],"call":["NullMutationTracker  instance "]}," ActiveRecord AttributeMethods Dirty store_original_attributes":{"type":"method","name":"store_original_attributes","children":[],"call":["@attributes map ","@attributes map  map "]}," ActiveRecord AttributeMethods Dirty clear_attribute_change":{"type":"method","name":"clear_attribute_change","children":[],"call":[" mutation_tracker forget_change "," mutation_tracker "," mutations_from_database forget_change "," mutations_from_database "]}," ActiveRecord AttributeMethods Dirty mutation_tracker":{"type":"method","name":"mutation_tracker","children":[],"call":["AttributeMutationTracker  new "]}," ActiveRecord AttributeMethods Dirty previous_changes":{"type":"method","name":"previous_changes","children":[],"call":[" previous_mutation_tracker changes "," previous_mutation_tracker ","ActiveSupport Deprecation  warn ","(str \"            The behavior of `previous_changes` inside of after callbacks is\\n\") strip_heredoc "," previous_mutation_tracker equal? "," mutations_before_last_save "]}," ActiveRecord AttributeMethods Dirty clear_attribute_changes":{"type":"method","name":"clear_attribute_changes","children":[],"call":[" clear_attribute_change ","attr_names each "]}," ActiveRecord AttributeDecorators ClassMethods load_schema!":{"type":"method","name":"load_schema!","children":[],"call":[" define_attribute "," attribute_type_decorations apply "," attribute_type_decorations "," attribute_types each "," attribute_types "]}," ActiveRecord AttributeAssignment _assign_attributes":{"type":"method","name":"_assign_attributes","children":[],"call":[" assign_multiparameter_attributes ","multi_parameter_attributes empty? "," assign_nested_parameter_attributes ","nested_parameter_attributes empty? ","nested_parameter_attributes []= ","attributes delete ","v is_a? ","multi_parameter_attributes []= ","k include? ","attributes each "," _assign_attribute ","(or-asgn\n  (lvasgn :nested_parameter_attributes)\n  (hash)) []= ","(or-asgn\n  (lvasgn :multi_parameter_attributes)\n  (hash)) []= ","key include? ","k to_s ","k to_s  include? "]}," ActiveRecord Attribute Uninitialized original_value":{"type":"method","name":"original_value","children":[],"call":[]}," ActiveRecord Attribute Null with_type":{"type":"method","name":"with_type","children":[],"call":[" class with_cast_value "," name "," class "]}," ActiveRecord Attribute Null type_cast":{"type":"method","name":"type_cast","children":[],"call":[]}," ActiveRecord Attribute FromDatabase _original_value_for_database":{"type":"method","name":"_original_value_for_database","children":[],"call":[" value_before_type_cast "]}," ActiveRecord Attribute _original_value_for_database":{"type":"method","name":"_original_value_for_database","children":[],"call":[" value_for_database "," type serialize "," original_value "," type "]}," ActiveRecord Attribute original_value_for_database":{"type":"method","name":"original_value_for_database","children":[],"call":[" _original_value_for_database "," original_attribute original_value_for_database "," original_attribute "," assigned? "]}," ActiveRecord Attribute changed_from_assignment?":{"type":"method","name":"changed_from_assignment?","children":[],"call":[" type changed? "," value_before_type_cast "," value "," original_value "," type "," assigned? "]}," ActiveRecord Attribute hash":{"type":"method","name":"hash","children":[],"call":["(send\n  (self) :class) hash "," type "," value_before_type_cast "," name "," class "]}," ActiveRecord Attribute with_type":{"type":"method","name":"with_type","children":[],"call":[" class new "," original_attribute "," value_before_type_cast "," name "," class "," with_value_from_user with_type "," with_value_from_user "," value "," changed_in_place? "]}," ActiveRecord Attribute forgetting_assignment":{"type":"method","name":"forgetting_assignment","children":[],"call":[" with_value_from_database "," value_for_database "]}," ActiveRecord Attribute changed_in_place?":{"type":"method","name":"changed_in_place?","children":[],"call":[" type changed_in_place? "," value "," original_value_for_database "," type "," has_been_read? "]}," ActiveRecord Attribute changed?":{"type":"method","name":"changed?","children":[],"call":[" changed_in_place? "," changed_from_assignment? "]}," ActiveRecord Attribute UserProvidedDefault with_type":{"type":"method","name":"with_type","children":[],"call":[" class new "," original_attribute "," user_provided_value "," name "," class "," value_before_type_cast "]}," ActiveRecord Attribute UserProvidedDefault value_before_type_cast":{"type":"method","name":"value_before_type_cast","children":[],"call":[" user_provided_value call "," user_provided_value "," user_provided_value is_a? "]}," ActiveRecord Attribute UserProvidedDefault initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Associations init_internals":{"type":"method","name":"init_internals","children":[],"call":[]}," ActiveRecord Associations reload":{"type":"method","name":"reload","children":[],"call":[" clear_association_cache "]}," ActiveRecord Associations initialize_dup":{"type":"method","name":"initialize_dup","children":[],"call":[]}," ActiveRecord Associations association_cached?":{"type":"method","name":"association_cached?","children":[],"call":["@association_cache key? "]}," ActiveRecord ThroughNestedAssociationsAreReadonly initialize":{"type":"method","name":"initialize","children":[],"call":["reflection name ","owner class name ","owner class "]}," ActiveRecord ThroughCantAssociateThroughHasOneOrManyReflection initialize":{"type":"method","name":"initialize","children":[],"call":["reflection source_reflection macro ","reflection source_reflection ","reflection through_reflection class_name ","reflection through_reflection ","reflection source_reflection class_name ","reflection name ","owner class name ","owner class "]}," ActiveRecord Associations Preloader NullPreloader owners":{"type":"method","name":"owners","children":[],"call":[]}," ActiveRecord Associations Preloader ThroughAssociation target_records_from_association":{"type":"method","name":"target_records_from_association","children":[],"call":["association reader ","association target ","association loaded? "]}," ActiveRecord Associations Preloader ThroughAssociation id_to_index_map":{"type":"method","name":"id_to_index_map","children":[],"call":["id_map []= ","ids each_with_index "]}," ActiveRecord Associations Preloader Association load_records":{"type":"method","name":"load_records","children":[],"call":[" convert_key ","record [] "," association_key_name ","@preloaded_records group_by "," records_for ","slices flat_map "," owner_keys each_slice "," owner_keys size "," owner_keys "," klass connection in_clause_length "," klass connection "," klass "," owner_keys empty? "," records_for load ","assignments empty? ! ","assignments empty? ","assignments << ","entries << ","entries empty? "," reflection collection? "," reflection ","@records_by_owner [] "," owners_by_key [] each "," owners_by_key [] "," owners_by_key ","raw_records select "," compare_by_identity "," loader_query records_for "," loader_query "," derive_key "," owner_keys each_slice  flat_map "," compare_by_identity  [] "," records_for  select "]}," ActiveRecord Associations Preloader Association convert_key":{"type":"method","name":"convert_key","children":[],"call":["key to_s "," key_conversion_required? "]}," ActiveRecord Associations Preloader Association owner_keys":{"type":"method","name":"owner_keys","children":[],"call":["@owner_keys compact! ","@owner_keys uniq! ","owner [] "," owner_key_name "," owners map "," owners "," owners_by_key keys "," owners_by_key "]}," ActiveRecord Associations JoinDependency make_left_outer_joins":{"type":"method","name":"make_left_outer_joins","children":[],"call":["(lvar :info) + "," make_left_outer_joins ","child children flat_map ","child children "," make_constraints ","child tables ","(lvar : make_constraints ) + ","child child tables  "]}," ActiveRecord Associations CollectionProxy records":{"type":"method","name":"records","children":[],"call":[" load_target "]}," ActiveRecord Associations CollectionProxy second_to_last":{"type":"method","name":"second_to_last","children":[],"call":["@association second_to_last "]}," ActiveRecord Associations CollectionProxy third_to_last":{"type":"method","name":"third_to_last","children":[],"call":["@association third_to_last "]}," ActiveRecord Associations CollectionAssociation second_to_last":{"type":"method","name":"second_to_last","children":[],"call":[" first_nth_or_last "]}," ActiveRecord Associations CollectionAssociation third_to_last":{"type":"method","name":"third_to_last","children":[],"call":[" first_nth_or_last "]}," Builder HasOne define_validations":{"type":"method","name":"define_validations","children":[],"call":[]}," Builder BelongsTo define_validations":{"type":"method","name":"define_validations","children":[],"call":[]}," Builder Association wrap_scope":{"type":"method","name":"wrap_scope","children":[],"call":[]}," Builder Association build_scope":{"type":"method","name":"build_scope","children":[],"call":[]}," Builder Association create_reflection":{"type":"method","name":"create_reflection","children":[],"call":[]}," ActiveRecord Associations BelongsToAssociation update_counters_on_replace":{"type":"method","name":"update_counters_on_replace","children":[],"call":[" decrement_counters ","record increment! "," reflection counter_cache_column "," reflection "," owner instance_variable_set "," owner "," different_target? "," require_counter_update? "," reflection options [] "," reflection options "]}," ActiveRecord Associations BelongsToAssociation require_counter_update?":{"type":"method","name":"require_counter_update?","children":[],"call":[" owner persisted? "," owner "," reflection counter_cache_column "," reflection "]}," ActiveRecord Associations AssociationScope get_chain":{"type":"method","name":"get_chain","children":[],"call":["previous_reflection next= ","ReflectionProxy  new ","tracker aliased_table_for ","refl alias_candidate ","refl table_name ","reflection chain drop each ","reflection chain drop ","reflection chain ","Reflection RuntimeReflection  new ","reflection name ","refl klass type_caster ","refl klass ","chain << ","refl klass arel_table ","tracker tracker aliased_table_for _for ","refl table_reflection name  ","reflection reflection name  "]}," ActiveRecord Associations AssociationScope ReflectionProxy all_includes":{"type":"method","name":"all_includes","children":[],"call":[]}," ActiveRecord Associations AssociationScope ReflectionProxy initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Associations AssociationScope transform_value":{"type":"method","name":"transform_value","children":[],"call":[" value_transformation call "," value_transformation "]}," ActiveRecord Associations AliasTracker create_with_joins":{"type":"method","name":"create_with_joins","children":[],"call":[]}," ActiveRecord Aggregations init_internals":{"type":"method","name":"init_internals","children":[],"call":[]}," ActiveRecord Aggregations reload":{"type":"method","name":"reload","children":[],"call":[" clear_aggregation_cache "]}," ActiveRecord Aggregations initialize_dup":{"type":"method","name":"initialize_dup","children":[],"call":["@aggregation_cache dup ","@aggregation_cache dup  dup "]}," ActiveRecord Generators ModelGenerator determine_default_parent_class":{"type":"method","name":"determine_default_parent_class","children":[],"call":["File  exist? "," in_root "," namespaced_path "," mountable_engine? "," application_record_exist? "," File  exist? _exist? "]}," ActiveRecord Validations LengthValidator associations_are_dirty?":{"type":"method","name":"associations_are_dirty?","children":[],"call":["value target any? ","value target ","value loaded? ","value respond_to? ","record read_attribute_for_validation "," attributes any? "," attributes ","record read_attribute_for_validation  target any? ","record read_attribute_for_validation  target ","record read_attribute_for_validation  loaded? ","record read_attribute_for_validation  respond_to? "]}," ActiveRecord Suppressor create_or_update":{"type":"method","name":"create_or_update","children":[],"call":["SuppressorRegistry  suppressed [] "," class name "," class ","SuppressorRegistry  suppressed "]}," ActiveRecord QueryMethods structurally_compatible_for_or?":{"type":"method","name":"structurally_compatible_for_or?","children":[],"call":[" send != ","other send "," send ","(send\n  (const\n    (const nil :Relation) :CLAUSE_METHODS) :-\n  (array\n    (sym :having)\n    (sym :where))) all? ","Relation CLAUSE_METHODS  - "," send == ","(send\n  (const\n    (const nil :Relation) :MULTI_VALUE_METHODS) :-\n  (array\n    (sym :extending))) all? ","Relation MULTI_VALUE_METHODS  - ","Relation SINGLE_VALUE_METHODS  all? "]}," ActiveRecord Migration Compatibility Legacy run":{"type":"method","name":"run","children":[],"call":["ActiveSupport Deprecation  warn "," class name "," class "]}," ActiveRecord ConnectionAdapters PostgreSQL ColumnDumper schema_default":{"type":"method","name":"schema_default","children":[],"call":["column default_function inspect ","column default_function ","column serial? "]}," ActiveRecord ConnectionAdapters MySQL ColumnDumper schema_limit":{"type":"method","name":"schema_limit","children":[],"call":["column type == ","column type "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter ExplainPrettyPrinter build_footer":{"type":"method","name":"build_footer","children":[],"call":["(begin\n  (lvar :nrows)) % ","nrows == "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter ExplainPrettyPrinter build_cells":{"type":"method","name":"build_cells","children":[],"call":["|  + + ","|  + ","cells join ","cells << ","item to_s send ","widths [] ","item to_s ","item is_a? ","item nil? ","items each_with_index "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter ExplainPrettyPrinter build_separator":{"type":"method","name":"build_separator","children":[],"call":["+ + + ","+ + ","(send\n  (lvar :widths) :map) join ","- * ","w + ","padding * ","widths map "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter ExplainPrettyPrinter compute_column_widths":{"type":"method","name":"compute_column_widths","children":[],"call":["widths << ","cells_in_column map max ","cells_in_column map ","(lvar :column) + ","r [] to_s ","r [] ","r [] nil? ","result rows map ","result rows ","result columns each_with_index ","result columns "," tap ","(lvar :column) +  map max ","(lvar :column) +  map "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter ExplainPrettyPrinter pp":{"type":"method","name":"pp","children":[],"call":["pp join + ","pp join ","pp << "," build_footer ","result rows length ","result rows "," build_cells ","result rows each ","result columns "," build_separator "," compute_column_widths "," build_ build_separator  "," compute_column_ compute_column_widths  "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter initialize_schema_migrations_table":{"type":"method","name":"initialize_schema_migrations_table","children":[],"call":["ActiveRecord SchemaMigration  create_table ","CHARSETS_OF_4BYTES_MAXLEN  include? "," charset "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter MysqlTypeMetadata attributes_for_hash":{"type":"method","name":"attributes_for_hash","children":[],"call":[" strict "," extra "," class "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter MysqlTypeMetadata hash":{"type":"method","name":"hash","children":[],"call":[" attributes_for_hash hash "," attributes_for_hash "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter MysqlTypeMetadata ==":{"type":"method","name":"==","children":[],"call":[" attributes_for_hash == ","other attributes_for_hash "," attributes_for_hash ","other is_a? "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter MysqlTypeMetadata initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter Column auto_increment?":{"type":"method","name":"auto_increment?","children":[],"call":[" extra == "," extra "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter Column unsigned?":{"type":"method","name":"unsigned?","children":[],"call":["(str \"unsigned\") === "," sql_type "]}," ActiveRecord Attribute UserProvidedDefault type_cast":{"type":"method","name":"type_cast","children":[],"call":["value call ","value is_a? "]}," ActiveRecord ConnectionAdapters Mysql2Adapter select_one":{"type":"method","name":"select_one","children":[],"call":["@connection next_result ","@connection more_results? "," execute each "," execute "," to_sql "," binds_from_relation "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter supports_comments_in_create?":{"type":"method","name":"supports_comments_in_create?","children":[],"call":[]}," ActiveRecord SchemaDumper format_options":{"type":"method","name":"format_options","children":[],"call":["(send\n  (lvar :options) :map) join ","value inspect ","options map "]}," ActiveRecord Result first":{"type":"method","name":"first","children":[],"call":["Hash  [] ","@columns zip ","@rows first ","@rows empty? "]}," ActiveRecord Reflection ThroughReflection association_primary_key_type":{"type":"method","name":"association_primary_key_type","children":[],"call":[" klass type_for_attribute "," association_primary_key "," klass "," association_primary_key to_s "]}," ActiveRecord Reflection AssociationReflection association_primary_key_type":{"type":"method","name":"association_primary_key_type","children":[],"call":[" klass type_for_attribute "," association_primary_key "," klass "," association_primary_key to_s "]}," ActiveRecord Reflection MacroReflection scope_for":{"type":"method","name":"scope_for","children":[],"call":["klass unscoped ","klass unscoped instance_exec "," scope ","relation instance_exec "]}," ActiveRecord NoTouching touch_later":{"type":"method","name":"touch_later","children":[],"call":[" no_touching? "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements table_options":{"type":"method","name":"table_options","children":[],"call":[" table_comment "," table_ table_comment  "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Bit cast_value":{"type":"method","name":"cast_value","children":[],"call":["value to_s ","value [] hex to_s ","value [] hex ","value [] "," String  === "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Array determine_encoding_of_strings":{"type":"method","name":"determine_encoding_of_strings","children":[],"call":["value encoding "," determine_encoding_of_strings ","value first "]}," ActiveRecord ConnectionAdapters PostgreSQL DatabaseStatements suppress_composite_primary_key":{"type":"method","name":"suppress_composite_primary_key","children":[],"call":["pk is_a? "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter add_options_for_index_columns":{"type":"method","name":"add_options_for_index_columns","children":[],"call":[" add_index_length "]}," ActiveRecord ConnectionAdapters AbstractAdapter steal!":{"type":"method","name":"steal!","children":[],"call":[" raise ","Thread  current "," pool send "," pool ","@owner != "," in_use? ","ActiveSupport IsolatedExecutionState  context ","Thread  current  != ","ActiveSupport IsolatedExecutionState  context  != "]}," ActiveRecord ConnectionAdapters SchemaStatements add_options_for_index_columns":{"type":"method","name":"add_options_for_index_columns","children":[],"call":[" add_index_sort_order "," supports_index_sort_order? "]}," ActiveRecord ConnectionAdapters QueryCache configure_query_cache!":{"type":"method","name":"configure_query_cache!","children":[],"call":[" enable_query_cache! "," pool query_cache_enabled "," pool "," pool db_config query_cache "," pool db_config "," enable_ pool db_config query_cache ! "," pool  pool db_config query_cache _enabled "," pool db_config  pool db_config query_cache  "]}," ActiveRecord ConnectionAdapters QueryCache ConnectionPoolConfiguration query_cache_enabled":{"type":"method","name":"query_cache_enabled","children":[],"call":["@query_cache_enabled [] "," connection_cache_key ","Thread  current "," current_thread "]}," ActiveRecord ConnectionAdapters QueryCache ConnectionPoolConfiguration disable_query_cache!":{"type":"method","name":"disable_query_cache!","children":[],"call":[" connection disable_query_cache! "," connection "," active_connection? ","@query_cache_enabled delete "," connection_cache_key ","Thread  current "," current_thread "]}," ActiveRecord ConnectionAdapters QueryCache ConnectionPoolConfiguration enable_query_cache!":{"type":"method","name":"enable_query_cache!","children":[],"call":[" connection enable_query_cache! "," connection "," active_connection? ","@query_cache_enabled []= "," connection_cache_key ","Thread  current "," current_thread "]}," ActiveRecord ConnectionAdapters QueryCache ConnectionPoolConfiguration initialize":{"type":"method","name":"initialize","children":[],"call":["Concurrent Map  new "]}," ActiveRecord AutosaveAssociation normalize_reflection_attribute":{"type":"method","name":"normalize_reflection_attribute","children":[],"call":["reflection name ","attribute != "]}," ActiveRecord LazyAttributeHash init_with":{"type":"method","name":"init_with","children":[],"call":[" marshal_load ","coder [] "]}," ActiveRecord LazyAttributeHash encode_with":{"type":"method","name":"encode_with","children":[],"call":["coder []= "," materialize "]}," ActiveRecord LazyAttributeHash marshal_load":{"type":"method","name":"marshal_load","children":[],"call":[" initialize "," freeze ","values is_a? "]}," ActiveRecord LazyAttributeHash marshal_dump":{"type":"method","name":"marshal_dump","children":[],"call":[" materialize "]}," ActiveRecord AttributeMethods PrimaryKey ClassMethods suppress_composite_primary_key":{"type":"method","name":"suppress_composite_primary_key","children":[],"call":[" warn ","(str \"            WARNING: Active Record does not support composite primary key.\\n\") strip_heredoc "," table_name ","pk is_a? ","(str \"                WARNING: Active Record does not support composite primary key.\\n\") strip_heredoc "]}," ActiveRecord Attribute WithCastValue changed_in_place?":{"type":"method","name":"changed_in_place?","children":[],"call":[]}," ActiveRecord Associations eager_load!":{"type":"method","name":"eager_load!","children":[],"call":[]}," ActiveRecord Associations SingularAssociation force_reload_reader":{"type":"method","name":"force_reload_reader","children":[],"call":[" target "," reload "," klass uncached "," klass "]}," ActiveRecord Associations HasManyThroughAssociation append_record":{"type":"method","name":"append_record","children":[],"call":["@target << "]}," ActiveRecord Associations CollectionProxy exec_queries":{"type":"method","name":"exec_queries","children":[],"call":[" load_target "]}," ActiveRecord Associations CollectionProxy null_scope?":{"type":"method","name":"null_scope?","children":[],"call":["@association null_scope? "]}," ActiveRecord Associations CollectionProxy pluck":{"type":"method","name":"pluck","children":[],"call":[" scope pluck "," scope "," null_scope? "]}," ActiveRecord Associations CollectionProxy calculate":{"type":"method","name":"calculate","children":[],"call":[" scope calculate "," scope "," null_scope? "]}," ActiveRecord Associations CollectionAssociation append_record":{"type":"method","name":"append_record","children":[],"call":["@target << ","@target include? "]}," ActiveRecord Generators ModelGenerator db_migrate_path":{"type":"method","name":"db_migrate_path","children":[],"call":["Rails  application config paths [] to_ary first ","Rails  application config paths [] to_ary ","Rails  application config paths [] ","Rails  application config paths ","Rails  application config ","Rails  application "]}," ActiveRecord Generators MigrationGenerator db_migrate_path":{"type":"method","name":"db_migrate_path","children":[],"call":["Rails  application config paths [] to_ary first ","Rails  application config paths [] to_ary ","Rails  application config paths [] ","Rails  application config paths ","Rails  application config ","Rails  application "]}," ActiveRecord ConnectionAdapters PostgreSQL Quoting type_cast_array":{"type":"method","name":"type_cast_array","children":[],"call":[" _type_cast "," type_cast_array ","values map "," type_cast "]}," ActiveRecord ConnectionAdapters PostgreSQL Quoting determine_encoding_of_strings_in_array":{"type":"method","name":"determine_encoding_of_strings_in_array","children":[],"call":["value encoding "," determine_encoding_of_strings_in_array ","value first "]}," ActiveRecord ConnectionAdapters PostgreSQL Quoting encode_array":{"type":"method","name":"encode_array","children":[],"call":["result force_encoding "," determine_encoding_of_strings_in_array ","encoder encode "," type_cast_array ","array_data values ","array_data encoder ","result force_ determine_encoding_of_strings_in_array  ","encoder encode  force_encoding "," determine_ determine_encoding_of_strings_in_array _of_strings_in_array ","array_data encoder  encode ","array_data  type_cast_array  ","array_data array_data encoder  "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Hstore changed_in_place?":{"type":"method","name":"changed_in_place?","children":[],"call":[" deserialize != "," deserialize "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Array changed_in_place?":{"type":"method","name":"changed_in_place?","children":[],"call":[" deserialize != "," deserialize "]}," ActiveRecord ConnectionAdapters SchemaStatements index_column_names":{"type":"method","name":"index_column_names","children":[],"call":[" Array ","(str \"\\\\W\") === ","column_names is_a? ","(str \"\\\\W\") match? "," expression_column_name? "]}," ActiveRecord Generators Migration db_migrate_path":{"type":"method","name":"db_migrate_path","children":[],"call":["Rails  application config paths [] to_ary first ","Rails  application config paths [] to_ary ","Rails  application config paths [] ","Rails  application config paths ","Rails  application config ","Rails  application "," default_migrate_path "," configured_migrate_path "]}," ActiveRecord LogSubscriber type_casted_binds":{"type":"method","name":"type_casted_binds","children":[],"call":["ActiveRecord Base  connection type_casted_binds ","ActiveRecord Base  connection ","casted_binds call ","casted_binds respond_to? "," type_cast ","attr value_for_database ","binds map "]}," ActiveRecord Explain render_bind":{"type":"method","name":"render_bind","children":[],"call":["attr name "," connection type_cast ","attr value_for_database "," connection ","attr value_for_database to_s bytesize ","attr value_for_database to_s ","attr value ","attr type binary? ","attr type ","ActiveModel Attribute  === ","attr  connection type_cast _for_database ","attr  connection type_cast _for_database to_s bytesize ","attr  connection type_cast _for_database to_s ","attr  connection type_cast  "]}," ActiveRecord ConnectionAdapters Quoting type_casted_binds":{"type":"method","name":"type_casted_binds","children":[],"call":[" type_cast ","attr value_for_database ","binds map ","binds first is_a? ","binds first ","value value_for_database ","ActiveModel Attribute  === "]}," ActiveRecord Associations CollectionProxy respond_to_missing?":{"type":"method","name":"respond_to_missing?","children":[],"call":[" association_scope respond_to? "," association_scope "," scope respond_to? "," scope "]}," ActiveRecord Associations CollectionProxy association_scope":{"type":"method","name":"association_scope","children":[],"call":["@association association_scope "]}," ActiveRecord Associations CollectionProxy DelegateExtending method_missing":{"type":"method","name":"method_missing","children":[],"call":[" public_send "," class include "," class ","(send\n  (lvar :extending_values) :-\n  (send\n    (send\n      (self) :class) :included_modules)) any? ","extending_values - "," class included_modules ","extending_values any? "," association_scope extending_values "," association_scope ","(send\n  (lvar : association_scope extending_values ) :-\n  (send\n    (send\n      (self) :class) :included_modules)) any? "," association_scope extending_values  - "," association_scope extending_values  any? "," association_scope  association_scope extending_values  "]}," ActiveRecord Scoping Named ClassMethods default_extensions":{"type":"method","name":"default_extensions","children":[],"call":["scope extensions "," build_default_scope "," current_scope "," scope_for_association "]}," ActiveRecord Reflection AssociationReflection extensions":{"type":"method","name":"extensions","children":[],"call":[" Array "," options [] "," options "]}," ActiveRecord ModelSchema ClassMethods inherited":{"type":"method","name":"inherited","children":[],"call":["child_class initialize_load_schema_monitor ","child_class class_eval ","child_class reload_schema_from_cache "]}," ActiveRecord ModelSchema ClassMethods initialize_load_schema_monitor":{"type":"method","name":"initialize_load_schema_monitor","children":[],"call":["Monitor  new "]}," ActiveRecord Associations CollectionProxy reset_scope":{"type":"method","name":"reset_scope","children":[],"call":[]}," ActiveRecord Associations Association extensions":{"type":"method","name":"extensions","children":[],"call":[" klass unscoped instance_exec extensions "," klass unscoped instance_exec "," owner "," klass unscoped "," klass "," reflection scope "," reflection "," klass default_extensions | "," reflection extensions "," klass default_extensions "," reflection scope_for extensions "," reflection scope_for "," klass un reflection scope d instance_exec extensions "," klass unscoped instance_exec  klass default_extensions |  "," klass un reflection scope d instance_exec "," klass un reflection scope d "," reflection  reflection scope  "," klass default_ klass default_extensions |  | "," reflection  klass default_extensions |  "," klass default_ klass default_extensions |  "," reflection  reflection scope _for extensions "," reflection scope_for  klass default_extensions |  "," reflection  reflection scope _for "]}," ActiveRecord Scoping Named ClassMethods scope_for_association":{"type":"method","name":"scope_for_association","children":[],"call":[" default_scoped ","current_scope empty_scope? "," current_scope "," current_scope  empty_scope? ","  current_scope  "]}," ActiveRecord Relation empty_scope?":{"type":"method","name":"empty_scope?","children":[],"call":["@values == "," klass unscoped values "," klass unscoped "," klass "]}," ActiveRecord Reflection HasManyReflection association_primary_key":{"type":"method","name":"association_primary_key","children":[],"call":[" primary_key "," klass "]}," ActiveRecord ModelSchema ClassMethods ignored_columns=":{"type":"method","name":"ignored_columns=","children":[],"call":["columns map ","columns map freeze "," reload_schema_from_cache "]}," ActiveRecord ModelSchema ClassMethods ignored_columns":{"type":"method","name":"ignored_columns","children":[],"call":[" superclass ignored_columns "," superclass "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter max_identifier_length":{"type":"method","name":"max_identifier_length","children":[],"call":[" query [] [] to_i "," query [] [] "," query [] "," query "," query_value to_i "," query_value "]}," ActiveRecord ConnectionAdapters PostgreSQLColumn sequence_name_from_parts":{"type":"method","name":"sequence_name_from_parts","children":[],"call":["table_name [] ","table_name length - ","table_name length ","over_length > ","column_name [] ","column_name_length - ","(lvar :over_length) min ","column_name length - ","column_name length ","(send\n  (begin\n    (send\n      (send\n        (send nil :max_identifier_length) :-\n        (send\n          (lvar :suffix) :length)) :-\n      (int 2))) :/\n  (int 2)) min ","(send\n  (send\n    (send nil :max_identifier_length) :-\n    (send\n      (lvar :suffix) :length)) :-\n  (int 2)) / "," max_identifier_length - - "," max_identifier_length - ","suffix length "," max_identifier_length ","(lvar :table_name) map sum + - ","(lvar :table_name) map sum + ","(lvar :table_name) map sum ","(lvar :table_name) map ","table_name []  [] ","table_name []  length - ","table_name []  length ","(lvar :table_name) map sum + -  > ","column_name []  [] ","column_name [] _length - ","(send\n  (begin\n    (send\n      (send\n        (send nil :max_identifier_length) :-\n        (send\n          (lvar :suffix) :length)) :-\n      (int 2))) :/\n  (int 2)) min  - ","(lvar :(lvar :table_name) map sum + - ) min ","column_name []  length - ","column_name []  length ","(lvar :table_name [] ) map sum + - ","(lvar :table_name [] ) map sum + ","(lvar :table_name [] ) map sum ","(lvar :table_name [] ) map "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter version_string":{"type":"method","name":"version_string","children":[],"call":[" full_version match [] "," full_version match "," full_version ","full_version_string match [] ","full_version_string match "]}," ActiveRecord Type default_value":{"type":"method","name":"default_value","children":[],"call":["Value  new "]}," ActiveRecord Type DecimalWithoutScale type_cast_for_schema":{"type":"method","name":"type_cast_for_schema","children":[],"call":["value to_s inspect ","value to_s "]}," ActiveRecord Tasks PostgreSQLDatabaseTasks remove_sql_header_comments":{"type":"method","name":"remove_sql_header_comments","children":[],"call":["FileUtils  mv ","tempfile path ","tempfile close ","tempfile << ","line blank? ","line start_with? ","File  foreach ","Tempfile  open ","FileUtils  cp ","Tempfile  open  path ","Tempfile  open  close ","Tempfile  open  << "]}," ActiveRecord Tasks DatabaseTasks dump_schema_cache":{"type":"method","name":"dump_schema_cache","children":[],"call":["f write ","YAML  dump ","conn schema_cache "," open ","conn schema_cache add ","conn data_sources each ","conn data_sources ","conn schema_cache clear! ","conn schema_cache dump_to "]}," ActiveRecord TableMetadata has_column?":{"type":"method","name":"has_column?","children":[],"call":[" klass columns_hash key? ","column_name to_s "," klass columns_hash "," klass ","(send nil :klass) key? "]}," ActiveRecord SchemaMigration all_versions":{"type":"method","name":"all_versions","children":[],"call":[" order pluck "," order "]}," ActiveRecord SchemaDumper format_colspec":{"type":"method","name":"format_colspec","children":[],"call":["(send\n  (lvar :colspec) :map) join ","colspec map "," format_colspec ","value is_a? "]}," ActiveRecord Relation has_join_values?":{"type":"method","name":"has_join_values?","children":[],"call":[" left_outer_joins_values any? "," left_outer_joins_values "," joins_values any? "," joins_values "]}," ActiveRecord Relation WhereClauseFactory build_for_case_sensitive":{"type":"method","name":"build_for_case_sensitive","children":[],"call":["parts << "," klass connection case_insensitive_comparison "," klass connection "," klass "," klass connection case_sensitive_comparison ","options [] ","Arel Nodes BindParam  new ","binds << "," predicate_builder send "," predicate_builder "," klass column_for_attribute ","table [] eq ","table [] ","value nil? ","value [] ","reflection klass primary_key ","reflection klass ","reflection foreign_key to_s ","reflection foreign_key "," klass _reflect_on_association ","attributes each "," klass arel_table ","  klass connection case_insensitive_comparison _builder send ","  klass connection case_sensitive_comparison _builder send ","  klass connection case_insensitive_comparison _builder ","  klass connection case_sensitive_comparison _builder "," klass  klass column_for_attribute _for_attribute "," klass column_for_reflection foreign_key to_s  "," klass arel_table  [] eq "," klass arel_table  [] ","Arel Nodes BindParam  new  nil? ","value []  nil? ","Arel Nodes BindParam  new  [] ","value []  [] "," klass _reflect_on_association  klass primary_key "," klass _reflect_on_association  klass "," klass _reflect_on_association  foreign_key to_s "," klass _reflect_on_association  foreign_key ","reflection foreign_key to_s s each "," klass arel_ klass arel_table  "]}," ActiveRecord Relation WhereClauseFactory perform_case_sensitive?":{"type":"method","name":"perform_case_sensitive?","children":[],"call":["options key? "]}," ActiveRecord Relation WhereClause except_predicates_and_binds":{"type":"method","name":"except_predicates_and_binds","children":[],"call":["except_binds [] "," binds reject with_index "," binds reject "," binds ","except_binds []= ","(erange\n  (lvar :binds_index)\n  (begin\n    (send\n      (lvar :binds_index) :+\n      (lvar :binds_contains)))) each ","binds_index + ","binds_contains > ","columns include? ","subrelation name to_s ","subrelation name ","node right ","node left ","node left kind_of? ","node grep size ","node grep "," predicates reject "," predicates ","node is_a? ","(erange\n  (lvar :binds_index)\n  (begin\n    (send\n      (lvar :binds_index) :+\n      (lvar :node grep size )))) each ","node grep size  > "]}," ActiveRecord QueryMethods default_value_for":{"type":"method","name":"default_value_for","children":[],"call":[" raise ","name inspect ","Relation FromClause  empty ","Relation WhereClause  empty ","DEFAULT_VALUES  fetch "]}," ActiveRecord QueryMethods set_value":{"type":"method","name":"set_value","children":[],"call":["@values []= "," assert_mutability! "]}," ActiveRecord QueryMethods get_value":{"type":"method","name":"get_value","children":[],"call":[" default_value_for ","@values [] ","@values fetch ","DEFAULT_VALUES  [] "]}," ActiveRecord FinderMethods find_take_with_limit":{"type":"method","name":"find_take_with_limit","children":[],"call":[" limit to_a "," limit "," records take "," records "," loaded? "]}," ActiveRecord FinderMethods construct_relation_for_exists":{"type":"method","name":"construct_relation_for_exists","children":[],"call":["relation where! "," primary_key ","conditions == ","relation except _select! limit! ","relation except _select! ","relation except ","conditions empty? "," except _select! limit! "," except _select! "," except "," limit "," offset_value "," distinct_value "," except limit! "," sanitize_forbidden_attributes ","relation except _select! limit!  where! "," except _select! limit!  where! "," limit  where! "," except limit!  where! "," sanitize_forbidden_attributes  == ","relation except _select! limit!  except _select! limit! "," except _select! limit!  except _select! limit! "," limit  except _select! limit! "," except limit!  except _select! limit! ","relation except _select! limit!  except _select! "," except _select! limit!  except _select! "," limit  except _select! "," except limit!  except _select! ","relation except _select! limit!  except "," except _select! limit!  except "," limit  except "," except limit!  except "," sanitize_forbidden_attributes  empty? "]}," ActiveRecord Delegation respond_to_missing?":{"type":"method","name":"respond_to_missing?","children":[],"call":[" arel respond_to? "," arel ","@klass respond_to? "]}," ActiveRecord Batches act_on_ignored_order":{"type":"method","name":"act_on_ignored_order","children":[],"call":[" logger warn "," logger "," raise ","ArgumentError  new "," klass error_on_ignored_order "," klass ","error_on_ignore nil? ","ActiveRecord  error_on_ignored_order "]}," ActiveRecord Reflection PolymorphicReflection get_join_keys":{"type":"method","name":"get_join_keys","children":[],"call":["@reflection get_join_keys "]}," ActiveRecord Reflection PolymorphicReflection join_scopes":{"type":"method","name":"join_scopes","children":[],"call":["scopes + ","@previous_reflection source_type_scope ","@previous_reflection options [] ","@previous_reflection options ","@previous_reflection join_scopes + ","@previous_reflection join_scopes ","scopes << "," build_scope instance_exec "," source_type_scope "," build_scope ","@previous_reflection join_scopes +  + ","@previous_reflection join_@previous_reflection join_scopes +  + ","@previous_reflection join_@previous_reflection join_scopes +  ","@previous_reflection join_scopes +  << "]}," ActiveRecord Reflection PolymorphicReflection scopes":{"type":"method","name":"scopes","children":[],"call":["scopes + ","@previous_reflection source_type_scope ","@previous_reflection options [] ","@previous_reflection options ","@previous_reflection scopes ","@previous_reflection scopes  + ","@previous_reflection @previous_reflection scopes  "]}," ActiveRecord Reflection ThroughReflection source_type_scope":{"type":"method","name":"source_type_scope","children":[],"call":[" through_reflection klass where "," options [] "," options "," foreign_type "," through_reflection klass "," through_reflection "]}," ActiveRecord Reflection ThroughReflection join_scopes":{"type":"method","name":"join_scopes","children":[],"call":[" source_reflection join_scopes + "," source_reflection join_scopes "," source_reflection "]}," ActiveRecord Reflection ThroughReflection scopes":{"type":"method","name":"scopes","children":[],"call":[" source_reflection scopes + "," source_reflection scopes "," source_reflection "]}," ActiveRecord Reflection BelongsToReflection join_pk":{"type":"method","name":"join_pk","children":[],"call":[" association_primary_key "," polymorphic? "]}," ActiveRecord Reflection BelongsToReflection join_fk":{"type":"method","name":"join_fk","children":[],"call":[" foreign_key "]}," ActiveRecord Reflection AbstractReflection join_fk":{"type":"method","name":"join_fk","children":[],"call":[" active_record_primary_key "]}," ActiveRecord Reflection AbstractReflection join_pk":{"type":"method","name":"join_pk","children":[],"call":[" foreign_key "]}," ActiveRecord Reflection AbstractReflection get_join_keys":{"type":"method","name":"get_join_keys","children":[],"call":["JoinKeys  new "," join_fk "," join_pk "," join_foreign_key "," join_primary_key "]}," ActiveRecord Reflection AbstractReflection klass_join_scope":{"type":"method","name":"klass_join_scope","children":[],"call":[" klass send "," klass ","ActiveRecord Relation  create ","scope joins_values= "," klass current_scope clone tap "," klass current_scope clone "," klass current_scope ","scope left_outer_joins_values= "," freeze "," klass unscoped "," klass current_scope values empty? "," klass current_scope values "," klass scope_for_association "," build_scope "]}," ActiveRecord Reflection AbstractReflection join_scopes":{"type":"method","name":"join_scopes","children":[],"call":["ActiveRecord Relation  create instance_exec "," scope ","ActiveRecord Relation  create "," klass "," build_scope instance_exec "," build_scope "," scope_for "]}," ActiveRecord Reflection AbstractReflection scope_chain":{"type":"method","name":"scope_chain","children":[],"call":[" chain map "," chain "]}," ActiveRecord Reflection AbstractReflection scopes":{"type":"method","name":"scopes","children":[],"call":[" scope "]}," ActiveRecord Persistence _raise_readonly_record_error":{"type":"method","name":"_raise_readonly_record_error","children":[],"call":[" raise "," class "]}," ActiveRecord ModelSchema ClassMethods yaml_encoder":{"type":"method","name":"yaml_encoder","children":[],"call":["AttributeSet YAMLEncoder  new "," attribute_types ","ActiveModel AttributeSet YAMLEncoder  new "]}," ActiveRecord load_migration":{"type":"method","name":"load_migration","children":[],"call":[" name constantize new "," version "," name "," name constantize "," require ","File  expand_path "," filename "," load ","Object  send "]}," ActiveRecord migration":{"type":"method","name":"migration","children":[],"call":[" load_migration "]}," ActiveRecord mtime":{"type":"method","name":"mtime","children":[],"call":["File  mtime "," filename "]}," ActiveRecord basename":{"type":"method","name":"basename","children":[],"call":["File  basename "," filename "]}," ActiveRecord initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Migration Compatibility V4_2 index_name_for_remove":{"type":"method","name":"index_name_for_remove","children":[],"call":[" raise "," index_name_exists? "," index_name ","options_without_column delete ","options dup ","options has_key? ","options is_a? "," connection index_name_exists? "," connection "," connection index_name ","options except ","options key? ","  index_name _exists? ","  connection index_name _exists? ","  index_name  ","  connection index_name  ","options dup  delete ","options except  delete "," connection  index_name _exists? "," connection  connection index_name _exists? "," connection  index_name  "," connection  connection index_name  "]}," ActiveRecord Migration Compatibility V4_2 remove_index":{"type":"method","name":"remove_index","children":[],"call":["options []= "," index_name_for_remove ","options is_a? "]}," ActiveRecord Migration Compatibility V4_2 index_exists?":{"type":"method","name":"index_exists?","children":[],"call":["options []= "," index_name ","options [] to_s ","options [] ","options [] present? "," Array map "," Array "," connection index_name "," connection "]}," ActiveRecord Migration Compatibility V4_2 add_timestamps":{"type":"method","name":"add_timestamps","children":[],"call":["options []= ","options [] nil? ","options [] "]}," ActiveRecord Migration Compatibility V4_2 add_reference":{"type":"method","name":"add_reference","children":[],"call":["options [] "]}," ActiveRecord Migration Compatibility V4_2 change_table":{"type":"method","name":"change_table","children":[],"call":[" prepend "," block_given? "," compatible_table_definition "]}," ActiveRecord Migration Compatibility V4_2 create_table":{"type":"method","name":"create_table","children":[],"call":[" prepend "," block_given? "," compatible_table_definition "]}," ActiveRecord Migration Compatibility V4_2 TableDefinition timestamps":{"type":"method","name":"timestamps","children":[],"call":["options []= ","options [] nil? ","options [] "]}," ActiveRecord Migration Compatibility V4_2 TableDefinition references":{"type":"method","name":"references","children":[],"call":["options [] "]}," ActiveRecord Migration Compatibility V5_0 add_reference":{"type":"method","name":"add_reference","children":[],"call":[]}," ActiveRecord Migration Compatibility V5_0 change_table":{"type":"method","name":"change_table","children":[],"call":[" prepend "," block_given? "," compatible_table_definition "]}," ActiveRecord Migration Compatibility V5_0 create_table":{"type":"method","name":"create_table","children":[],"call":[" prepend "," block_given? ","options []= ","options key? ","options key? ! ","(sym :integer) include? ","options [] ","options [] == "," adapter_name == "," adapter_name "," compatible_table_definition "," connection adapter_name == "," connection adapter_name "," connection ","(str \"Mysql2\") include? "]}," ActiveRecord Migration Compatibility V5_0 TableDefinition references":{"type":"method","name":"references","children":[],"call":[]}," ActiveRecord Migration CommandRecorder respond_to_missing?":{"type":"method","name":"respond_to_missing?","children":[],"call":[" delegate respond_to? "," delegate "]}," ActiveRecord Inheritance ClassMethods inherited":{"type":"method","name":"inherited","children":[],"call":["subclass instance_variable_set ","Concurrent Map  new ","subclass set_base_class ","subclass class_eval "]}," ActiveRecord MismatchedForeignKey column_type":{"type":"method","name":"column_type","children":[],"call":["(send\n  (send\n    (ivar :@adapter) :columns\n    (lvar :table)) :detect) sql_type ","c name == ","c name ","@adapter columns detect ","@adapter columns "]}," ActiveRecord MismatchedForeignKey initialize":{"type":"method","name":"initialize","children":[],"call":["msg << ","(str \"          Column `\") strip_heredoc "," column_type ","(str \"          There is a mismatch between the foreign key and primary key column types.\\n\") squish ","(str \"          Column `\") squish ","primary_key_column sql_type ","primary_key_column type ","primary_key_column bigint? ","(str \"          There is a mismatch between the foreign key and primary key column types.\\n\") strip_heredoc ","(str \"There is a mismatch between the foreign key and primary key column types.\\n\") squish ","(str \"Column `\") squish ","(str \"There is a mismatch between the foreign key and primary key column types.\\n\") +@ ","(str \"Column `\") +@ ","(str \"          Column `\") strip_heredoc  << ","(str \"          There is a mismatch between the foreign key and primary key column types.\\n\") squish  << ","(str \"          Column `\") squish  << ","(str \"          There is a mismatch between the foreign key and primary key column types.\\n\") strip_heredoc  << ","(str \"There is a mismatch between the foreign key and primary key column types.\\n\") squish  << ","(str \"Column `\") squish  << ","(str \"There is a mismatch between the foreign key and primary key column types.\\n\") +@  << ","(str \"Column `\") +@  << "," column_primary_key_column type  ","(str \"          There is a mismatch between the foreign key and primary key column primary_key_column type s.\\n\") squish ","primary_key_column sql_primary_key_column type  ","primary_key_column primary_key_column type  ","(str \"          There is a mismatch between the foreign key and primary key column primary_key_column type s.\\n\") strip_heredoc ","(str \"There is a mismatch between the foreign key and primary key column primary_key_column type s.\\n\") squish ","(str \"There is a mismatch between the foreign key and primary key column primary_key_column type s.\\n\") +@ "]}," ActiveRecord DynamicMatchers respond_to_missing?":{"type":"method","name":"respond_to_missing?","children":[],"call":["match valid? ","Method  match "," == ","Method  match  valid? ","Method  Method  match  "]}," ActiveRecord CounterCache ClassMethods touch_updates":{"type":"method","name":"touch_updates","children":[],"call":["(send\n  (send nil :Array\n    (lvar :touch)) :map) to_h "," Array map "," Array "," current_time_from_proper_timezone "," timestamp_attributes_for_update_in_model ","touch == ","(send\n  (send nil :Array\n    (lvar : timestamp_attributes_for_update_in_model )) :map) to_h "," timestamp_attributes_for_update_in_model  == "]}," ActiveRecord Core error_on_ignored_order_or_limit=":{"type":"method","name":"error_on_ignored_order_or_limit=","children":[],"call":[]}," ActiveRecord Core error_on_ignored_order_or_limit":{"type":"method","name":"error_on_ignored_order_or_limit","children":[],"call":[" class error_on_ignored_order_or_limit "," class "]}," ActiveRecord ConnectionAdapters SQLite3Adapter configure_connection":{"type":"method","name":"configure_connection","children":[],"call":[" execute ","@connection busy_timeout "," class type_cast_config_to_integer ","@config [] "," class "," raw_execute ","@raw_connection busy_timeout "]}," ActiveRecord ConnectionAdapters SQLite3Adapter extract_foreign_key_action":{"type":"method","name":"extract_foreign_key_action","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLite3Adapter create_table_definition":{"type":"method","name":"create_table_definition","children":[],"call":["SQLite3 TableDefinition  new "]}," ActiveRecord ConnectionAdapters SQLite3Adapter foreign_keys":{"type":"method","name":"foreign_keys","children":[],"call":["ForeignKeyDefinition  new ","row [] "," extract_foreign_key_action ","fk_info map "," select_all "," quote "," exec_query ","options []= ","group map ","group one? ","group first ","grouped_fk map ","group sort_by! ","(send\n  (lvar :fk_info) :group_by) values each ","(send\n  (lvar :fk_info) :group_by) values ","fk_info group_by "," internal_exec_query ","group first  [] "," select_all  map "," exec_query  map "," internal_exec_query  map ","(send\n  (lvar : select_all ) :group_by) values each ","(send\n  (lvar : exec_query ) :group_by) values each ","(send\n  (lvar : internal_exec_query ) :group_by) values each ","(send\n  (lvar : select_all ) :group_by) values ","(send\n  (lvar : exec_query ) :group_by) values ","(send\n  (lvar : internal_exec_query ) :group_by) values "," select_all  group_by "," exec_query  group_by "," internal_exec_query  group_by "]}," ActiveRecord ConnectionAdapters SQLite3Adapter add_reference":{"type":"method","name":"add_reference","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLite3Adapter new_column_from_field":{"type":"method","name":"new_column_from_field","children":[],"call":[" new_column ","field [] to_i == ","field [] to_i ","field [] "," fetch_type_metadata ","field []= ","1 gsub "," fetch_ fetch_type_metadata  "]}," ActiveRecord ConnectionAdapters SQLite3Adapter disable_referential_integrity":{"type":"method","name":"disable_referential_integrity","children":[],"call":[" execute "," select_value "," query_value "]}," ActiveRecord ConnectionAdapters SQLite3Adapter supports_foreign_keys_in_create?":{"type":"method","name":"supports_foreign_keys_in_create?","children":[],"call":[" sqlite_version >= "," sqlite_version "]}," ActiveRecord ConnectionAdapters SQLite3Adapter update_table_definition":{"type":"method","name":"update_table_definition","children":[],"call":["SQLite3 Table  new "]}," ActiveRecord ConnectionAdapters SQLite3 SchemaStatements quoted_scope":{"type":"method","name":"quoted_scope","children":[],"call":["scope []= "," quote "]}," ActiveRecord ConnectionAdapters SQLite3 SchemaStatements data_source_sql":{"type":"method","name":"data_source_sql","children":[],"call":["sql << ","scope [] "," quoted_scope ","SELECT name FROM sqlite_master WHERE name <> 'sqlite_sequence' dup ","SELECT name FROM sqlite_master WHERE name <> 'sqlite_sequence' +@ ","SELECT name FROM sqlite_master WHERE name <> 'sqlite_sequence' dup  << ","SELECT name FROM sqlite_master WHERE name <> 'sqlite_sequence' +@  << "," quoted_scope  [] "," quoted_ quoted_scope  ","SELECT name FROM SELECT name FROM sqlite_master WHERE name <> 'sqlite_sequence' dup ite_master WHERE name <> 'SELECT name FROM sqlite_master WHERE name <> 'sqlite_sequence' dup ite_sequence' dup ","SELECT name FROM SELECT name FROM sqlite_master WHERE name <> 'sqlite_sequence' +@ ite_master WHERE name <> 'SELECT name FROM sqlite_master WHERE name <> 'sqlite_sequence' +@ ite_sequence' dup ","SELECT name FROM SELECT name FROM sqlite_master WHERE name <> 'sqlite_sequence' dup ite_master WHERE name <> 'SELECT name FROM sqlite_master WHERE name <> 'sqlite_sequence' dup ite_sequence' +@ ","SELECT name FROM SELECT name FROM sqlite_master WHERE name <> 'sqlite_sequence' +@ ite_master WHERE name <> 'SELECT name FROM sqlite_master WHERE name <> 'sqlite_sequence' +@ ite_sequence' +@ "]}," ActiveRecord ConnectionAdapters SQLite3 ColumnDumper explicit_primary_key_default?":{"type":"method","name":"explicit_primary_key_default?","children":[],"call":["column bigint? "]}," ActiveRecord ConnectionAdapters SQLite3 ColumnDumper default_primary_key?":{"type":"method","name":"default_primary_key?","children":[],"call":[" schema_type == "," schema_type "]}," ActiveRecord ConnectionAdapters SQLite3 TableDefinition references":{"type":"method","name":"references","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLite3 ColumnMethods primary_key":{"type":"method","name":"primary_key","children":[],"call":["options key? ! ","options key? ","options delete == ","options delete ","(sym :integer) include? "]}," ActiveRecord ConnectionAdapters SQLite3 Quoting quoted_binary":{"type":"method","name":"quoted_binary","children":[],"call":["value hex "]}," ActiveRecord ConnectionAdapters SchemaCache init_with":{"type":"method","name":"init_with","children":[],"call":["coder [] "," derive_columns_hash_and_deduplicate_values "]}," ActiveRecord ConnectionAdapters SchemaCache encode_with":{"type":"method","name":"encode_with","children":[],"call":["coder []= ","ActiveRecord Migrator  current_version "," connection migration_context current_version "," connection migration_context "," connection "," database_version "," reset_version! ","@indexes sort to_h ","@indexes sort ","@data_sources sort to_h ","@data_sources sort ","@primary_keys sort to_h ","@primary_keys sort ","@columns sort to_h ","@columns sort "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter default_index_type?":{"type":"method","name":"default_index_type?","children":[],"call":["index using == ","index using "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter supports_pgcrypto_uuid?":{"type":"method","name":"supports_pgcrypto_uuid?","children":[],"call":[" postgresql_version >= "," postgresql_version "," database_version >= "," database_version "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements extract_schema_qualified_name":{"type":"method","name":"extract_schema_qualified_name","children":[],"call":["name identifier ","name schema ","Utils  extract_schema_qualified_name ","string to_s ","Utils  extract_schema_qualified_name  identifier ","Utils  extract_schema_qualified_name  schema ","Utils  extract_schema_qualified_Utils  extract_schema_qualified_name  "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements quoted_scope":{"type":"method","name":"quoted_scope","children":[],"call":["scope []= "," quote "," extract_schema_qualified_name "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements data_source_sql":{"type":"method","name":"data_source_sql","children":[],"call":["sql << ","scope [] "," quoted_scope ","SELECT c.relname FROM pg_class c LEFT JOIN pg_namespace n ON n.oid = c.relnamespace dup ","SELECT c.relname FROM pg_class c LEFT JOIN pg_namespace n ON n.oid = c.relnamespace +@ ","SELECT c.relname FROM pg_class c LEFT JOIN pg_namespace n ON n.oid = c.relnamespace dup  << ","SELECT c.relname FROM pg_class c LEFT JOIN pg_namespace n ON n.oid = c.relnamespace +@  << "," quoted_scope  [] "," quoted_ quoted_scope  "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements new_column_from_field":{"type":"method","name":"new_column_from_field","children":[],"call":["PostgreSQLColumn  new ","comment presence ","notnull ! "," extract_default_function "," extract_value_from_default "," fetch_type_metadata ","fmod to_i ","oid to_i "," max_identifier_length ","PostgreSQL Column  new "," sequence_name_from_parts == ","match [] "," sequence_name_from_parts ","attgenerated present? "," extract_ extract_default_function  "," fetch_ fetch_type_metadata  ","fmod to_i  to_i ","oid to_i  to_i "]}," ActiveRecord ConnectionAdapters PostgreSQL ColumnDumper explicit_primary_key_default?":{"type":"method","name":"explicit_primary_key_default?","children":[],"call":["column serial? ! ","column serial? ","column type == ","column type "]}," ActiveRecord ConnectionAdapters PostgreSQL ColumnMethods oid":{"type":"method","name":"oid","children":[],"call":[" column ","args each "]}," ActiveRecord ConnectionAdapters PostgreSQL ColumnMethods interval":{"type":"method","name":"interval","children":[],"call":[" column ","args each "]}," ActiveRecord ConnectionAdapters PostgreSQL Quoting quoted_binary":{"type":"method","name":"quoted_binary","children":[],"call":[" escape_bytea ","value to_s "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Point build_point":{"type":"method","name":"build_point","children":[],"call":["ActiveRecord Point  new "," Float "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Point type_cast_for_schema":{"type":"method","name":"type_cast_for_schema","children":[],"call":["value y ","value x ","ActiveRecord Point  === "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Oid type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQL OID LegacyPoint number_for_point":{"type":"method","name":"number_for_point","children":[],"call":["number to_s gsub ","number to_s ","number to_s delete_suffix "]}," ActiveRecord ConnectionAdapters PostgreSQL OID LegacyPoint serialize":{"type":"method","name":"serialize","children":[],"call":[" number_for_point ","value [] ","value is_a? "]}," ActiveRecord ConnectionAdapters PostgreSQL OID LegacyPoint cast":{"type":"method","name":"cast","children":[],"call":[" Float ","value map "," cast ","value split ","value [] ","value [] == ","value end_with? ","value start_with? ","value []  map ","value []  split ","value []  [] ","value []  [] == ","value []  end_with? ","value []  start_with? "]}," ActiveRecord ConnectionAdapters PostgreSQL OID LegacyPoint type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQL DatabaseStatements select_result":{"type":"method","name":"select_result","children":[],"call":[" execute_and_clear "," to_sql "," binds_from_relation "," to_ to_sql  "]}," ActiveRecord ConnectionAdapters MySQL SchemaStatements extract_schema_qualified_name":{"type":"method","name":"extract_schema_qualified_name","children":[],"call":["string to_s scan ","string to_s "]}," ActiveRecord ConnectionAdapters MySQL SchemaStatements quoted_scope":{"type":"method","name":"quoted_scope","children":[],"call":["scope []= "," quote "," extract_schema_qualified_name "]}," ActiveRecord ConnectionAdapters MySQL SchemaStatements data_source_sql":{"type":"method","name":"data_source_sql","children":[],"call":["sql << ","scope [] "," quoted_scope ","SELECT table_name FROM information_schema.tables dup ","SELECT table_name FROM information_schema.tables +@ ","conditions join ","conditions << ","SELECT table_name FROM (SELECT * FROM information_schema.tables  +@ ","SELECT table_name FROM (SELECT table_name, table_type FROM information_schema.tables  +@ ","SELECT table_name FROM information_schema.tables dup  << ","SELECT table_name FROM information_schema.tables +@  << ","SELECT table_name FROM (SELECT * FROM information_schema.tables  +@  << ","SELECT table_name FROM (SELECT table_name, table_type FROM information_schema.tables  +@  << "," quoted_scope  [] "," quoted_ quoted_scope  "]}," ActiveRecord ConnectionAdapters MySQL SchemaStatements internal_string_options_for_primary_key":{"type":"method","name":"internal_string_options_for_primary_key","children":[],"call":["options []= "," collation sub "," collation "," version < "," version "," mariadb? ","CHARSETS_OF_4BYTES_MAXLEN  include? "," charset "," tap "," row_format_dynamic_by_default? ! "," row_format_dynamic_by_default? "]}," ActiveRecord ConnectionAdapters MySQL ColumnDumper extract_expression_for_virtual_column":{"type":"method","name":"extract_expression_for_virtual_column","children":[],"call":[" select_value inspect "," select_value "," quote ","column name ","scope [] "," quoted_scope ","column table_name ","$~ [] inspect ","$~ [] ","(begin\n  (send nil :quote_column_name\n    (send\n      (lvar :column) :name))) =~ ","column extra ","Regexp  quote ","column sql_type "," quote_column_name "," create_table_info "," mariadb? ","@config [] "," query_value inspect "," query_value "," version < "," version "," quoted_scope  [] "," quoted_ quoted_scope  ","  create_table_info  "]}," ActiveRecord ConnectionAdapters MySQL ColumnDumper explicit_primary_key_default?":{"type":"method","name":"explicit_primary_key_default?","children":[],"call":["column auto_increment? ! ","column auto_increment? ","column type == ","column type "]}," ActiveRecord ConnectionAdapters MySQL TableDefinition aliased_types":{"type":"method","name":"aliased_types","children":[],"call":[]}," ActiveRecord ConnectionAdapters MySQL Quoting quoted_binary":{"type":"method","name":"quoted_binary","children":[],"call":["value hex "]}," ActiveRecord ConnectionAdapters MySQL Column virtual?":{"type":"method","name":"virtual?","children":[],"call":["(str \"\\\\b(?:VIRTUAL|STORED|PERSISTENT)\\\\b\") match? "," extra "]}," ActiveRecord ConnectionAdapters ConnectionSpecification to_hash":{"type":"method","name":"to_hash","children":[],"call":["@config merge "]}," ActiveRecord ConnectionAdapters Column encode_with":{"type":"method","name":"encode_with","children":[],"call":["coder []= "]}," ActiveRecord ConnectionAdapters Column init_with":{"type":"method","name":"init_with","children":[],"call":["coder [] "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter mismatched_foreign_key":{"type":"method","name":"mismatched_foreign_key","children":[],"call":["MismatchedForeignKey  new ","parts [] ","message scan flatten ","message scan ","options []= "," column_for ","match [] ","(str \"\\n\") match ","sql scan flatten ","sql scan "," mismatched_foreign_key_details "," lambda ","options update ","Mis(str \"\\n\") match edForeignKey  new ","message scan flatten  [] ","sql scan flatten  [] ","(str \"\\n\") match  [] ","(str \"\\n\") (str \"\\n\") match  "," mis(str \"\\n\") match ed_foreign_key_details "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter default_index_type?":{"type":"method","name":"default_index_type?","children":[],"call":["index using == ","index using "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter new_column_from_field":{"type":"method","name":"new_column_from_field","children":[],"call":[" new_column ","field [] presence ","field [] ","field [] == ","type_metadata type == ","type_metadata type "," fetch_type_metadata ","(str \"\\\\ACURRENT_TIMESTAMP(?:\\\\(\\\\))?\\\\z\") match? "," fetch_type_metadata  type == "," fetch_type_metadata  type "," fetch_ fetch_type_metadata  "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter supports_virtual_columns?":{"type":"method","name":"supports_virtual_columns?","children":[],"call":[" version >= "," version "," mariadb? "," database_version >= "," database_version "]}," ActiveRecord ConnectionAdapters AbstractAdapter default_index_type?":{"type":"method","name":"default_index_type?","children":[],"call":["index using nil? ","index using "]}," ActiveRecord ConnectionAdapters AbstractAdapter supports_virtual_columns?":{"type":"method","name":"supports_virtual_columns?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter supports_foreign_keys_in_create?":{"type":"method","name":"supports_foreign_keys_in_create?","children":[],"call":[" supports_foreign_keys? "]}," ActiveRecord ConnectionAdapters SchemaStatements quoted_scope":{"type":"method","name":"quoted_scope","children":[],"call":[" raise "]}," ActiveRecord ConnectionAdapters SchemaStatements data_source_sql":{"type":"method","name":"data_source_sql","children":[],"call":[" raise "]}," ActiveRecord ConnectionAdapters SchemaStatements column_options_keys":{"type":"method","name":"column_options_keys","children":[],"call":[]}," ActiveRecord ConnectionAdapters SchemaStatements indexes":{"type":"method","name":"indexes","children":[],"call":[" raise "]}," ActiveRecord ConnectionAdapters ColumnDumper schema_type_with_virtual":{"type":"method","name":"schema_type_with_virtual","children":[],"call":[" schema_type ","column virtual? "," supports_virtual_columns? "]}," ActiveRecord ConnectionAdapters ColumnDumper explicit_primary_key_default?":{"type":"method","name":"explicit_primary_key_default?","children":[],"call":[]}," ActiveRecord ConnectionAdapters default_primary_key":{"type":"method","name":"default_primary_key","children":[],"call":[]}," ActiveRecord ConnectionAdapters defined_for?":{"type":"method","name":"defined_for?","children":[],"call":[" options [] to_s == ","v to_s "," options [] to_s "," options [] "," options ","options all? ","to_table to_s == "," to_table ","to_table to_s ","to_table nil? "," to_table == ","to_table_ord to_s ","validate == ","options fetch ","validate nil? "," options fetch "," name == ","name to_s "," name "," Array map == "," Array map "," Array "]}," ActiveRecord ConnectionAdapters custom_primary_key?":{"type":"method","name":"custom_primary_key?","children":[],"call":[" options [] != "," default_primary_key "," options [] "," options "]}," ActiveRecord ConnectionAdapters on_update":{"type":"method","name":"on_update","children":[],"call":[" options [] "," options "]}," ActiveRecord ConnectionAdapters on_delete":{"type":"method","name":"on_delete","children":[],"call":[" options [] "," options "]}," ActiveRecord ConnectionAdapters primary_key":{"type":"method","name":"primary_key","children":[],"call":[" default_primary_key "," options [] "," options "]}," ActiveRecord ConnectionAdapters column":{"type":"method","name":"column","children":[],"call":[" options [] "," options "]}," ActiveRecord ConnectionAdapters name":{"type":"method","name":"name","children":[],"call":[" options [] "," options "]}," ActiveRecord ConnectionAdapters primary_key?":{"type":"method","name":"primary_key?","children":[],"call":[" options [] "," options "]}," ActiveRecord ConnectionAdapters Quoting id_value_for_database":{"type":"method","name":"id_value_for_database","children":[],"call":["value instance_variable_get [] value_for_database ","value instance_variable_get [] ","value instance_variable_get ","value class primary_key ","value class ","value class value class primary_key  "]}," ActiveRecord ConnectionAdapters Quoting quoted_binary":{"type":"method","name":"quoted_binary","children":[],"call":[" quote_string ","value to_s "]}," ActiveRecord ConnectionAdapters ConnectionPool stat":{"type":"method","name":"stat","children":[],"call":[" checkout_timeout "," num_waiting_in_queue ","c in_use? ! ","c in_use? ","@connections count ","c owner alive? ! ","c owner alive? ","c owner ","@connections size "," size "," synchronize "]}," ActiveRecord ConnectionAdapters ConnectionPool lock_thread=":{"type":"method","name":"lock_thread=","children":[],"call":["Thread  current ","active_connection lock_thread= ","@thread_cached_conns [] "," connection_cache_key "," current_thread ","ActiveSupport IsolatedExecutionState  context ","@thread_cached_conns []  lock_thread= "]}," ActiveRecord AutosaveAssociation after_save_collection_association":{"type":"method","name":"after_save_collection_association","children":[],"call":[]}," ActiveRecord AttributeSet YAMLEncoder decode":{"type":"method","name":"decode","children":[],"call":["AttributeSet  new ","Hash  [] ","attr name ","attr with_type "," default_types [] "," default_types ","attr type nil? ","attr type ","coder [] map ","coder [] ","attr with_type  name ","attr with_type  with_type ","attr with_type  type nil? ","attr with_type  type "]}," ActiveRecord AttributeSet YAMLEncoder encode":{"type":"method","name":"encode","children":[],"call":["coder []= ","attr with_type ","attr type equal? "," default_types [] ","attr name "," default_types ","attr type ","attribute_set each_value map ","attribute_set each_value "]}," ActiveRecord AttributeSet YAMLEncoder initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord NullMutationTracker original_value":{"type":"method","name":"original_value","children":[],"call":[]}," ActiveRecord NullMutationTracker any_changes?":{"type":"method","name":"any_changes?","children":[],"call":[]}," ActiveRecord NullMutationTracker change_to_attribute":{"type":"method","name":"change_to_attribute","children":[],"call":[]}," ActiveRecord AttributeMutationTracker deprecated_force_change":{"type":"method","name":"deprecated_force_change","children":[],"call":[" deprecated_forced_changes << ","attr_name to_s "," deprecated_forced_changes "]}," ActiveRecord AttributeMutationTracker force_change":{"type":"method","name":"force_change","children":[],"call":[" forced_changes << ","attr_name to_s "," forced_changes "]}," ActiveRecord AttributeMutationTracker original_value":{"type":"method","name":"original_value","children":[],"call":[" attributes [] original_value "," attributes [] "," attributes ","attr_name to_s "]}," ActiveRecord AttributeMutationTracker any_changes?":{"type":"method","name":"any_changes?","children":[],"call":[" deprecated_forced_changes any? "," deprecated_forced_changes "," changed? "," attr_names any? "," attr_names "]}," ActiveRecord AttributeMutationTracker change_to_attribute":{"type":"method","name":"change_to_attribute","children":[],"call":[" attributes fetch_value "," attributes "," attributes [] original_value "," attributes [] "," changed? ","attr_name to_s ","attr_name to_s  to_s "]}," ActiveRecord AttributeMethods PrimaryKey id_in_database":{"type":"method","name":"id_in_database","children":[],"call":[" attribute_in_database "," class primary_key "," class "," sync_with_transaction_state ","@primary_key map "," class composite_primary_key? "]}," ActiveRecord AttributeMethods Dirty mutations_before_last_save":{"type":"method","name":"mutations_before_last_save","children":[],"call":[" previous_mutation_tracker "," sync_with_transaction_state "]}," ActiveRecord AttributeMethods Dirty clear_mutation_trackers":{"type":"method","name":"clear_mutation_trackers","children":[],"call":[]}," ActiveRecord AttributeMethods Dirty forget_attribute_assignments":{"type":"method","name":"forget_attribute_assignments","children":[],"call":["@attributes map ","@attributes map  map "]}," ActiveRecord AttributeMethods Dirty attribute_will_change!":{"type":"method","name":"attribute_will_change!","children":[],"call":[" mutations_from_database deprecated_force_change "," mutations_from_database ","ActiveSupport Deprecation  warn ","(str \"              \") squish "," mutations_from_database force_change "," class has_attribute? "," class "]}," ActiveRecord AttributeMethods Dirty mutations_from_database":{"type":"method","name":"mutations_from_database","children":[],"call":[" mutation_tracker "," sync_with_transaction_state "]}," ActiveRecord AttributeMethods Dirty emit_warning_if_needed":{"type":"method","name":"emit_warning_if_needed","children":[],"call":["ActiveSupport Deprecation  warn ","(str \"              The behavior of `\") squish "," mutation_tracker equal? "," mutations_from_database "," mutation_tracker "]}," ActiveRecord AttributeMethods Dirty attribute_changed?":{"type":"method","name":"attribute_changed?","children":[],"call":[" emit_warning_if_needed "]}," ActiveRecord AttributeMethods Dirty attribute_change":{"type":"method","name":"attribute_change","children":[],"call":[" emit_warning_if_needed "]}," ActiveRecord AttributeMethods Dirty attribute_was":{"type":"method","name":"attribute_was","children":[],"call":[" emit_warning_if_needed "]}," ActiveRecord AttributeMethods Dirty attributes_in_database":{"type":"method","name":"attributes_in_database","children":[],"call":[" changes_to_save transform_values "," changes_to_save "," mutations_from_database changed_values "," mutations_from_database "]}," ActiveRecord AttributeMethods Dirty changed_attribute_names_to_save":{"type":"method","name":"changed_attribute_names_to_save","children":[],"call":[" changes_to_save keys "," changes_to_save "," mutations_from_database changed_attribute_names "," mutations_from_database "]}," ActiveRecord AttributeMethods Dirty changes_to_save":{"type":"method","name":"changes_to_save","children":[],"call":[" mutations_from_database changes "," mutations_from_database "]}," ActiveRecord AttributeMethods Dirty has_changes_to_save?":{"type":"method","name":"has_changes_to_save?","children":[],"call":[" mutations_from_database any_changes? "," mutations_from_database "]}," ActiveRecord AttributeMethods Dirty attribute_in_database":{"type":"method","name":"attribute_in_database","children":[],"call":[" mutations_from_database original_value "," mutations_from_database ","attr_name to_s "]}," ActiveRecord AttributeMethods Dirty attribute_change_to_be_saved":{"type":"method","name":"attribute_change_to_be_saved","children":[],"call":[" mutations_from_database change_to_attribute "," mutations_from_database ","attr_name to_s "]}," ActiveRecord AttributeMethods Dirty will_save_change_to_attribute?":{"type":"method","name":"will_save_change_to_attribute?","children":[],"call":[" mutations_from_database changed? "," mutations_from_database ","attr_name to_s "]}," ActiveRecord AttributeMethods Dirty saved_changes":{"type":"method","name":"saved_changes","children":[],"call":[" mutations_before_last_save changes "," mutations_before_last_save "]}," ActiveRecord AttributeMethods Dirty saved_changes?":{"type":"method","name":"saved_changes?","children":[],"call":[" mutations_before_last_save any_changes? "," mutations_before_last_save "]}," ActiveRecord AttributeMethods Dirty attribute_before_last_save":{"type":"method","name":"attribute_before_last_save","children":[],"call":[" mutations_before_last_save original_value "," mutations_before_last_save ","attr_name to_s "]}," ActiveRecord AttributeMethods Dirty saved_change_to_attribute":{"type":"method","name":"saved_change_to_attribute","children":[],"call":[" mutations_before_last_save change_to_attribute "," mutations_before_last_save ","attr_name to_s "]}," ActiveRecord AttributeMethods Dirty saved_change_to_attribute?":{"type":"method","name":"saved_change_to_attribute?","children":[],"call":[" mutations_before_last_save changed? "," mutations_before_last_save ","attr_name to_s "]}," ActiveRecord AttributeMethods Dirty changes_internally_applied":{"type":"method","name":"changes_internally_applied","children":[],"call":["AttributeMutationTracker  new "," forget_attribute_assignments "," mutation_tracker "," mutations_from_database "]}," ActiveRecord Attribute Uninitialized with_type":{"type":"method","name":"with_type","children":[],"call":[" class new "," name "," class "]}," ActiveRecord Attribute encode_with":{"type":"method","name":"encode_with","children":[],"call":["coder []= "," value "," original_attribute "," type "," value_before_type_cast "," name "," value_before_type_cast nil? "]}," ActiveRecord Attribute init_with":{"type":"method","name":"init_with","children":[],"call":["coder [] ","coder map key? ","coder map "]}," ActiveRecord AmbiguousSourceReflectionForThroughAssociation initialize":{"type":"method","name":"initialize","children":[],"call":["example_options []= ","possible_sources first ","options dup ","options dup  []= "]}," ActiveRecord HasManyThroughOrderError initialize":{"type":"method","name":"initialize","children":[],"call":["through_reflection name ","reflection name "]}," ActiveRecord Associations JoinDependency Aliases table":{"type":"method","name":"table","children":[],"call":["Arel Nodes TableAlias  new "," node aliased_table_name "," node "," node table "]}," ActiveRecord Associations CollectionProxy find_from_target?":{"type":"method","name":"find_from_target?","children":[],"call":["@association find_from_target? "]}," ActiveRecord Associations CollectionProxy find_nth_from_last":{"type":"method","name":"find_nth_from_last","children":[],"call":[" load_target "," find_from_target? "]}," ActiveRecord Associations CollectionProxy find_nth_with_limit":{"type":"method","name":"find_nth_with_limit","children":[],"call":[" load_target "," find_from_target? "]}," ActiveRecord Associations CollectionAssociation find_from_target?":{"type":"method","name":"find_from_target?","children":[],"call":["record changed? ","record new_record? "," target any? "," target "," owner new_record? "," owner "," loaded? "," reflection strict_loading? "," reflection "," owner strict_loading? "]}," Builder BelongsTo add_default_callbacks":{"type":"method","name":"add_default_callbacks","children":[],"call":[]}," ActiveRecord Associations BelongsToAssociation default":{"type":"method","name":"default","children":[],"call":[" writer "," owner instance_exec "," owner "," reader nil? "," reader "," instance_exec "]}," ActiveRecord Associations Association create!":{"type":"method","name":"create!","children":[],"call":[" _create_record "]}," ActiveRecord Associations Association create":{"type":"method","name":"create","children":[],"call":[" _create_record "]}," ActiveRecord Associations Association remove_inverse_instance":{"type":"method","name":"remove_inverse_instance","children":[],"call":["inverse inversed= ","inverse target= ","record association "," inverse_reflection_for name "," inverse_reflection_for "," invertible_for? ","inverse inversed_from "," inverse_association_for ","record association  record association d= "," inverse_association_for   inverse_association_for d= ","record association  target= "," inverse_association_for  target= "," record association _reflection_for name ","  inverse_association_for _reflection_for name "," record association _reflection_for ","  inverse_association_for _reflection_for ","record association  record association d_from "," inverse_association_for   inverse_association_for d_from "," record association _association_for ","  inverse_association_for _association_for "]}," ActiveRecord LogSubscriber type_cast":{"type":"method","name":"type_cast","children":[],"call":["ActiveRecord Base  connection type_cast ","ActiveRecord Base  connection "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter supports_alter_constraint?":{"type":"method","name":"supports_alter_constraint?","children":[],"call":[" postgresql_version >= "," postgresql_version "]}," ActiveRecord ConnectionAdapters PostgreSQL ReferentialIntegrity disable_referential_integrity_with_disable_trigger":{"type":"method","name":"disable_referential_integrity_with_disable_trigger","children":[],"call":[" execute ","(send\n  (send nil :tables) :collect) join "," quote_table_name "," tables collect "," tables "," transaction "," raise "," warn ","original_exception try "]}," ActiveRecord ConnectionAdapters PostgreSQL ReferentialIntegrity disable_referential_integrity_with_alter_constraint":{"type":"method","name":"disable_referential_integrity_with_alter_constraint","children":[],"call":[" execute ","(send\n  (lvar :tables_constraints) :collect) join "," quote_table_name ","tables_constraints collect "," transaction "," execute values ","(send\n  (lvar : execute values ) :collect) join "," execute values  collect "]}," ActiveRecord AttributeMethods PrimaryKey ClassMethods instance_method_already_implemented?":{"type":"method","name":"instance_method_already_implemented?","children":[],"call":["ID_ATTRIBUTE_METHODS  include? "," primary_key "]}," ActiveRecord ConnectionAdapters PostgreSQL Quoting lookup_cast_type":{"type":"method","name":"lookup_cast_type","children":[],"call":[" query_value to_i "," query_value "," quote "]}," ActiveRecord ConnectionAdapters MySQL DatabaseStatements query":{"type":"method","name":"query","children":[],"call":[" execute to_a "," execute "]}," ActiveRecord ConnectionAdapters DatabaseStatements single_value_from_rows":{"type":"method","name":"single_value_from_rows","children":[],"call":["row first ","rows first ","rows first  first ","rows first s first "]}," ActiveRecord ConnectionAdapters DatabaseStatements query":{"type":"method","name":"query","children":[],"call":[" exec_query rows "," exec_query "," internal_exec_query rows "," internal_exec_query "]}," ActiveRecord ConnectionAdapters DatabaseStatements query_values":{"type":"method","name":"query_values","children":[],"call":[" query map "," query "]}," ActiveRecord ConnectionAdapters DatabaseStatements query_value":{"type":"method","name":"query_value","children":[],"call":[" single_value_from_rows "," query "]}," ActiveRecord Associations HasManyThroughAssociation remove_records":{"type":"method","name":"remove_records","children":[],"call":[" delete_through_records "]}," ActiveRecord Type Internal AbstractJson changed_in_place?":{"type":"method","name":"changed_in_place?","children":[],"call":[" deserialize != "," deserialize "]}," ActiveRecord Relation has_limit_or_offset?":{"type":"method","name":"has_limit_or_offset?","children":[],"call":[" offset_value "," limit_value "]}," ActiveRecord Associations AssociationScope apply_scope":{"type":"method","name":"apply_scope","children":[],"call":["scope where! ","table name ","scope table == ","scope table "]}," ActiveRecord Reflection AbstractReflection predicate_builder":{"type":"method","name":"predicate_builder","children":[],"call":["PredicateBuilder  new ","TableMetadata  new "," klass "]}," ActiveRecord Reflection AbstractReflection build_scope":{"type":"method","name":"build_scope","children":[],"call":["Relation  create "," klass "]}," ActiveRecord Reflection AbstractReflection join_scope":{"type":"method","name":"join_scope","children":[],"call":["scope_chain_items inject ","scope_chain_items shift "," klass_join_scope "," join_scopes "," predicate_builder ","klass_scope where! ","foreign_klass polymorphic_name "," type ","foreign_klass base_class sti_name ","foreign_klass base_class "," klass send "," klass "," klass finder_needs_type_condition? ","table [] eq ","foreign_table [] ","table [] "," join_keys foreign_key "," join_keys "," join_keys key "," join_foreign_key "," join_primary_key ","primary_foreign_key_pairs each ","primary_key_column_names zip "," Array "," join_scopes  inject "," join_scopes  shift ","  predicate_builder  "," klass_join_scope  where! "," join_keys  join_keys foreign_key  "," join_keys  join_foreign_key  "," join_ join_keys key s foreign_ join_keys key  "," join_ join_keys key s "," join_ join_keys key s  join_keys key  "," join_ join_keys foreign_key  "," join_ join_foreign_key  "," join_foreign_ join_keys key  "," join_primary_ join_keys key  "," join_ join_primary_key  ","primary_ join_keys foreign_key _pairs each ","primary_ join_foreign_key _pairs each ","primary_foreign_ join_keys key _pairs each ","primary_key_column_names zip  each ","primary_ join_keys key _column_names zip "," join_primary_key _column_names zip "," Array  zip "]}," ActiveRecord ModelSchema ClassMethods protected_environments=":{"type":"method","name":"protected_environments=","children":[],"call":["environments map "]}," ActiveRecord ModelSchema ClassMethods protected_environments":{"type":"method","name":"protected_environments","children":[],"call":[" superclass protected_environments "," superclass "]}," ActiveRecord Migration Compatibility V4_2 compatible_table_definition":{"type":"method","name":"compatible_table_definition","children":[],"call":[" prepend "]}," ActiveRecord Migration Compatibility V5_0 compatible_table_definition":{"type":"method","name":"compatible_table_definition","children":[],"call":[" prepend "]}," ActiveRecord Migration Compatibility V5_0 create_join_table":{"type":"method","name":"create_join_table","children":[],"call":[" compatible_table_definition "," block_given? ","column_options reverse_merge! "]}," ActiveRecord Persistence _update_row":{"type":"method","name":"_update_row","children":[],"call":[" class unscoped _update_record "," id_in_database "," class primary_key "," class "," arel_attributes_with_values "," class unscoped "," class _update_record "," attributes_with_values "," _primary_key_constraints_hash "," _query_constraints_hash "]}," ActiveRecord Persistence _touch_row":{"type":"method","name":"_touch_row","children":[],"call":[" _update_row "," clear_attribute_change "," write_attribute ","attribute_names each "," current_time_from_proper_timezone "," _write_attribute "]}," ActiveRecord Locking Optimistic _update_row":{"type":"method","name":"_update_row","children":[],"call":[" raise "," []= ","previous_lock_value to_i ","ActiveRecord StaleObjectError  new ","affected_rows != "," class unscoped _update_record "," id_in_database "," class primary_key "," class "," arel_attributes_with_values "," class unscoped "," [] ","attribute_names << "," read_attribute_before_type_cast "," class locking_column "," locking_enabled? "," class _update_record "," attributes_with_values ","@attributes [] original_value_for_database ","@attributes [] ","attribute_names dup ","attribute_names frozen? "," attribute_before_type_cast ","@attributes []= "," _lock_value_for_database ","update_constraints []= "," _primary_key_constraints_hash "," _query_constraints_hash "," read_attribute_before_type_cast  to_i "," attribute_before_type_cast  to_i "," class unscoped _update_record  != "," class _update_record  != ","attribute_names dup  << "," class  class locking_column  ","attribute_names dup  dup ","attribute_names dup  frozen? "," _ _lock_value_for_database  "," _primary_key_constraints_hash  []= "," _query_constraints_hash  []= "]}," ActiveRecord Locking Optimistic _touch_row":{"type":"method","name":"_touch_row","children":[],"call":[" clear_attribute_change "," class locking_column "," class "," locking_enabled? ","@_touch_attr_names << "]}," ActiveRecord Type Serialized force_equality?":{"type":"method","name":"force_equality?","children":[],"call":["value is_a? "," coder object_class "," coder "," coder respond_to? "]}," ActiveRecord Timestamp touch_attributes_with_time":{"type":"method","name":"touch_attributes_with_time","children":[],"call":["result []= ","attribute_names each_with_object "," current_time_from_proper_timezone ","names map "," timestamp_attributes_for_update_in_model "," timestamp_attributes_for_update_in_model  each_with_object "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Range force_equality?":{"type":"method","name":"force_equality?","children":[],"call":["value is_a? "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Array force_equality?":{"type":"method","name":"force_equality?","children":[],"call":["value is_a? "]}," ActiveRecord Callbacks increment!":{"type":"method","name":"increment!","children":[],"call":[" _run_touch_callbacks "]}," ActiveRecord NullMutationTracker changed_attribute_names":{"type":"method","name":"changed_attribute_names","children":[],"call":[]}," ActiveRecord AttributeMutationTracker changed_attribute_names":{"type":"method","name":"changed_attribute_names","children":[],"call":[" changed? "," attr_names select "," attr_names "]}," ActiveRecord Generators ApplicationRecordGenerator application_record_file_name":{"type":"method","name":"application_record_file_name","children":[],"call":[" namespaced_path "," namespaced? "]}," ActiveRecord Generators ApplicationRecordGenerator create_application_record":{"type":"method","name":"create_application_record","children":[],"call":[" template "," application_record_file_name "]}," ActiveRecord Type Json accessor":{"type":"method","name":"accessor","children":[],"call":[]}," ActiveRecord Type Json changed_in_place?":{"type":"method","name":"changed_in_place?","children":[],"call":[" deserialize != "," deserialize "]}," ActiveRecord Type Json serialize":{"type":"method","name":"serialize","children":[],"call":["ActiveSupport JSON  encode ","value nil? "]}," ActiveRecord Type Json deserialize":{"type":"method","name":"deserialize","children":[],"call":["ActiveSupport JSON  decode ","value is_a? "]}," ActiveRecord Type Json type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord Tasks SQLiteDatabaseTasks run_cmd_error":{"type":"method","name":"run_cmd_error","children":[],"call":["msg << ","args join ","failed to execute:\n dup ","failed to execute:\n +@ ","failed to execute:\n dup  << ","failed to execute:\n +@  << "]}," ActiveRecord Tasks SQLiteDatabaseTasks run_cmd":{"type":"method","name":"run_cmd","children":[],"call":[" fail "," run_cmd_error ","Kernel  system "]}," ActiveRecord Tasks DatabaseTasks target_version":{"type":"method","name":"target_version","children":[],"call":["ENV  [] to_i ","ENV  [] ","ENV  [] empty? ! ","ENV  [] empty? "]}," ActiveRecord Tasks DatabaseTasks check_target_version":{"type":"method","name":"check_target_version","children":[],"call":[" raise ","ENV  [] ","(or\n  (send\n    (const\n      (const nil :Migration) :MigrationFilenameRegexp) :match?\n    (send\n      (const nil :ENV) :[]\n      (str \"VERSION\")))\n  (send\n    (regexp\n      (str \"\\\\A\\\\d+\\\\z\")\n      (regopt)) :match?\n    (send\n      (const nil :ENV) :[]\n      (str \"VERSION\")))) ! ","(str \"\\\\A\\\\d+\\\\z\") match? ","Migration MigrationFilenameRegexp  match? "," target_version ","Migration  valid_version_format? ! ","Migration  valid_version_format? "]}," ActiveRecord TableMetadata reflect_on_aggregation":{"type":"method","name":"reflect_on_aggregation","children":[],"call":[" klass reflect_on_aggregation "," klass "]}," ActiveRecord TableMetadata aggregated_with?":{"type":"method","name":"aggregated_with?","children":[],"call":[" reflect_on_aggregation "," klass "]}," ActiveRecord StatementCache unsupported_value?":{"type":"method","name":"unsupported_value?","children":[],"call":[]}," ActiveRecord SchemaDumper format_index_parts":{"type":"method","name":"format_index_parts","children":[],"call":["options inspect "," format_options ","options is_a? "]}," ActiveRecord SchemaDumper define_params":{"type":"method","name":"define_params","children":[],"call":[" formatted_version "]}," ActiveRecord SchemaDumper formatted_version":{"type":"method","name":"formatted_version","children":[],"call":["stringified insert insert insert ","stringified insert insert ","stringified insert ","stringified length == ","stringified length ","@version to_s ","@version to_s  insert insert insert ","@version to_s  insert insert ","@version to_s  insert ","@version to_s  length == ","@version to_s  length "]}," ActiveRecord Relation skip_query_cache_if_necessary":{"type":"method","name":"skip_query_cache_if_necessary","children":[],"call":[" uncached "," skip_query_cache_value "]}," ActiveRecord Relation alias_tracker":{"type":"method","name":"alias_tracker","children":[],"call":["ActiveRecord Associations AliasTracker  create "," table name "," table "," connection "]}," ActiveRecord Relation _exec_scope":{"type":"method","name":"_exec_scope","children":[],"call":[" instance_exec "," _scoping "," _deprecated_spawn "," klass scope_registry "," klass "," klass scope_ klass scope_registry  "]}," ActiveRecord Relation to_ary":{"type":"method","name":"to_ary","children":[],"call":[" records dup "," records "]}," ActiveRecord Relation WhereClause extract_node_value":{"type":"method","name":"extract_node_value","children":[],"call":["value value_before_type_cast ","value respond_to? ","node value ","node val "," extract_node_value ","node map ","node value_before_type_cast ","Array  === ","node respond_to? ","node value  node value _before_type_cast ","node value  respond_to? ","node node value  "," extract_node_node value  ","node node value _before_type_cast "]}," ActiveRecord Relation WhereClause except_predicates":{"type":"method","name":"except_predicates","children":[],"call":["columns include? ","subrelation name to_s ","subrelation name ","node right ","node left ","node left kind_of? "," predicates reject "," predicates ","attr name to_s ","attr name ","Arel  fetch_attribute ","attrs include? ","non_attrs include? ","node left is_a? ","node equality? ","non_attrs empty? ! ","non_attrs empty? ","node is_a? ","columns extract! "]}," ActiveRecord Relation WhereClause equalities":{"type":"method","name":"equalities","children":[],"call":["equalities concat "," equalities ","node children ","equalities << ","predicates each ","node is_a? "," equality_node? ","Arel Nodes Equality  === "]}," ActiveRecord Relation WhereClause -":{"type":"method","name":"-","children":[],"call":["WhereClause  new "," predicates - ","other predicates "," predicates "]}," ActiveRecord QueryMethods skip_query_cache!":{"type":"method","name":"skip_query_cache!","children":[],"call":[" skip_query_cache_value= "]}," ActiveRecord Relation QueryAttribute _infinity?":{"type":"method","name":"_infinity?","children":[],"call":["value infinite? ","value respond_to? "]}," ActiveRecord Relation QueryAttribute infinity?":{"type":"method","name":"infinity?","children":[],"call":[" _infinity? "," value_for_database "," boundable? "," value_before_type_cast ","value infinite? ","value respond_to? "]}," ActiveRecord Relation QueryAttribute boundable?":{"type":"method","name":"boundable?","children":[],"call":[" nil? "," value_for_database "," value_before_type_cast is_a? "," value_before_type_cast "]}," ActiveRecord Relation QueryAttribute nil?":{"type":"method","name":"nil?","children":[],"call":[" value_for_database nil? "," value_for_database "," value_before_type_cast nil? "," value_before_type_cast "," value_before_type_cast is_a? ! "," value_before_type_cast is_a? "," type respond_to? "," type "," serializable? "]}," ActiveRecord PredicateBuilder build_bind_attribute":{"type":"method","name":"build_bind_attribute","children":[],"call":["Arel Nodes BindParam  new ","Relation QueryAttribute  new "," table type "," table ","column_name to_s ","type immutable_value "," table  table type  "," table type  immutable_value "]}," ActiveRecord PredicateBuilder RangeHandler RangeWithBinds exclude_end?":{"type":"method","name":"exclude_end?","children":[],"call":[]}," ActiveRecord PredicateBuilder PolymorphicArrayValue klass":{"type":"method","name":"klass","children":[],"call":["value klass ","value class "]}," ActiveRecord PredicateBuilder PolymorphicArrayValue queries":{"type":"method","name":"queries","children":[],"call":[" associated_table association_foreign_key to_s "," associated_table association_foreign_key "," associated_table "," associated_table association_foreign_type to_s "," associated_table association_foreign_type "," type_to_ids_mapping map "," type_to_ids_mapping "," associated_table join_foreign_key "," associated_table join_foreign_type ","query []= "," values "," values empty? "]}," ActiveRecord PredicateBuilder AssociationQueryValue queries":{"type":"method","name":"queries","children":[],"call":[" ids "," associated_table association_join_foreign_key to_s "," associated_table association_join_foreign_key "," associated_table "," associated_table join_foreign_key "," associated_table join_foreign_key zip to_h "," associated_table join_foreign_key zip ","id_list map ","id_list pluck "," primary_key ","id_list is_a? "," associated_table join_foreign_key is_a? ","id_list pluck  map "," ids  map ","id_list pluck  pluck "," ids  pluck ","id_list pluck  is_a? "," ids  is_a? "]}," ActiveRecord Relation Merger merge_outer_joins":{"type":"method","name":"merge_outer_joins","children":[],"call":[" relation left_outer_joins! "," relation ","ActiveRecord Associations JoinDependency  new "," other table "," other "," other klass "," other alias_tracker "," other left_outer_joins_values map "," other left_outer_joins_values "," other klass == "," relation klass "," other left_outer_joins_values blank? "," relation joins! "," other construct_join_dependency "," other send "," other left_outer_joins_values partition "," relation left_outer_joins_values "," other left_outer_joins_values empty? "," other construct_ other construct_join_dependency  "]}," ActiveRecord FinderMethods ordered_relation":{"type":"method","name":"ordered_relation","children":[],"call":[" order "," arel_attribute asc "," arel_attribute "," primary_key "," order_values empty? "," order_values "," implicit_order_column "," table [] asc "," table [] "," table "," implicit_order_column != "," _order_columns map "," _order_columns "," query_constraints_list nil? ! "," query_constraints_list nil? "," query_constraints_list "]}," ActiveRecord Reflection RuntimeReflection aliased_table":{"type":"method","name":"aliased_table","children":[],"call":["Arel Table  new "," klass type_caster "," klass "," table_name "," klass arel_table "]}," ActiveRecord Reflection PolymorphicReflection source_type_scope":{"type":"method","name":"source_type_scope","children":[],"call":[" where "," lambda ","@previous_reflection options [] ","@previous_reflection options ","@previous_reflection foreign_type ","@previous_reflection foreign_@previous_reflection foreign_type  "]}," ActiveRecord Reflection BelongsToReflection can_find_inverse_of_automatically?":{"type":"method","name":"can_find_inverse_of_automatically?","children":[],"call":[" polymorphic? ! "," polymorphic? "]}," ActiveRecord Reflection BelongsToReflection join_foreign_key":{"type":"method","name":"join_foreign_key","children":[],"call":[" foreign_key "]}," ActiveRecord Reflection BelongsToReflection join_primary_key":{"type":"method","name":"join_primary_key","children":[],"call":[" association_primary_key "," polymorphic? "]}," ActiveRecord Reflection AbstractReflection primary_key":{"type":"method","name":"primary_key","children":[],"call":[" raise ","UnknownPrimaryKey  new ","klass primary_key "]}," ActiveRecord Reflection AbstractReflection actual_source_reflection":{"type":"method","name":"actual_source_reflection","children":[],"call":[]}," ActiveRecord Reflection AbstractReflection join_foreign_key":{"type":"method","name":"join_foreign_key","children":[],"call":[" active_record_primary_key "]}," ActiveRecord Reflection AbstractReflection join_primary_key":{"type":"method","name":"join_primary_key","children":[],"call":[" foreign_key "]}," ActiveRecord Reflection AbstractReflection build_join_constraint":{"type":"method","name":"build_join_constraint","children":[],"call":["table create_and "," klass send "," klass "," klass finder_needs_type_condition? ","table [] eq ","foreign_table [] ","table [] "," join_keys foreign_key "," join_keys "," join_keys key "," join_keys  join_keys foreign_key  "," join_ join_keys key s foreign_ join_keys key  "," join_ join_keys key s "," join_ join_keys key s  join_keys key  "]}," ActiveRecord Persistence _delete_row":{"type":"method","name":"_delete_row","children":[],"call":[" class _delete_record "," id_in_database "," class primary_key "," class "," _primary_key_constraints_hash "," _query_constraints_hash "]}," ActiveRecord Persistence ClassMethods _substitute_values":{"type":"method","name":"_substitute_values","children":[],"call":[" predicate_builder build_bind_attribute "," predicate_builder "," arel_attribute ","values map ","attr name "," arel_table [] "," arel_table "," predicate_builder build_ predicate_builder build_bind_attribute _attribute "," predicate_builder build_bind_ arel_attribute ibute "," predicate_builder build_bind_ arel_table [] ibute "," arel_ arel_attribute ibute "," arel_ arel_table [] ibute "," arel_attribute  name "," arel_table []  name "]}," ActiveRecord Persistence ClassMethods _delete_record":{"type":"method","name":"_delete_record","children":[],"call":[" connection delete "," connection ","dm wheres= ","dm from "," arel_table ","Arel DeleteManager  new ","attr eq "," _substitute_values map "," _substitute_values ","constraints << ","current_scope where_clause ast ","current_scope where_clause "," global_current_scope "," build_default_constraint "," predicate_builder [] "," predicate_builder ","constraints map "," default_scoped where_clause ast "," default_scoped where_clause "," default_scoped "," default_scopes? ","Arel DeleteManager  new  wheres= ","Arel DeleteManager  new  from "," global_current_scope  where_clause ast "," global_current_scope  where_clause "," global_ global_current_scope  "," build_ build_default_constraint  "]}," ActiveRecord Persistence ClassMethods _update_record":{"type":"method","name":"_update_record","children":[],"call":[" connection update "," connection "," arel_table where compile_update "," primary_key "," _substitute_values "," arel_table where ","constraints reduce "," arel_table ","attr eq "," _substitute_values map "," arel_attribute eq "," arel_attribute "," predicate_builder build_bind_attribute "," predicate_builder ","um wheres= ","um set "," arel_table [] ","values transform_keys ","Arel UpdateManager  new ","constraints << ","current_scope where_clause ast ","current_scope where_clause "," global_current_scope "," build_default_constraint "," predicate_builder [] ","constraints map "," default_scoped where_clause ast "," default_scoped where_clause "," default_scoped "," default_scopes? "," predicate_builder build_ predicate_builder build_bind_attribute _attribute "," arel_table where compile_update  wheres= ","Arel UpdateManager  new  wheres= "," arel_table where compile_update  set ","Arel UpdateManager  new  set "," global_current_scope  where_clause ast "," global_current_scope  where_clause "," global_ global_current_scope  "," build_ build_default_constraint  "]}," ActiveRecord Persistence ClassMethods _insert_record":{"type":"method","name":"_insert_record","children":[],"call":[" connection insert "," primary_key "," connection "," arel_table compile_insert "," _substitute_values "," arel_table ","im into "," connection empty_insert_statement_value ","values empty? ","values []= "," next_sequence_value "," prefetch_primary_key? ","primary_key_value ! ","values [] ","Hash  === "," arel_attribute ","im insert "," arel_table [] ","values transform_keys ","Arel InsertManager  new "," _default_attributes [] with_cast_value "," _default_attributes [] "," _default_attributes "," pr arel_table compile_insert ary_key "," prArel InsertManager  new ary_key ","  primary_key  "," arel_table compile_insert  into ","Arel InsertManager  new  into "," prefetch_pr arel_table compile_insert ary_key? "," prefetch_prArel InsertManager  new ary_key? "," prefetch_ primary_key ? ","pr arel_table compile_insert ary_key_value ! ","prArel InsertManager  new ary_key_value ! "," next_sequence_value  ! ","values []  ! "," primary_key _value ! "," arel_table compile_insert  insert ","Arel InsertManager  new  insert "]}," ActiveRecord Persistence ClassMethods delete":{"type":"method","name":"delete","children":[],"call":[" where delete_all "," where "," primary_key "," delete_by "]}," ActiveRecord Persistence ClassMethods destroy":{"type":"method","name":"destroy","children":[],"call":[" find destroy "," find "," find each ","id is_a? ","(send\n  (lvar :id) :map) compact "," destroy ","id map ","id first is_a? ","id first "," composite_primary_key? "]}," ActiveRecord Persistence ClassMethods update":{"type":"method","name":"update","children":[],"call":["object update "," find "," raise ","ActiveRecord Base  === ","record update "," all each "," all ","id == ","attributes [] ","(send\n  (lvar :id) :map) each_with_index ","id map ","id is_a? ","(send\n  (send\n    (lvar :id) :map) :with_index) compact "," update ","id map with_index ","id any? "," find  update "]}," ActiveRecord Migrator migrations_path=":{"type":"method","name":"migrations_path=","children":[],"call":[" migrations_paths= ","ActiveSupport Deprecation  warn "]}," ActiveRecord MigrationContext move":{"type":"method","name":"move","children":[],"call":[" send ","finish version ","migrator migrations [] ","start_index + ","migrator migrations ","migrator migrations index ","migrator current_migration "," current_version == "," current_version "," raise ","UnknownMigrationVersionError  new ","migrator current_migration ! "," current_version != ","Migrator  new "," migrations "," schema_migration "," public_send "," internal_metadata ","finish finish version  ","migrator migrations []  version ","Migrator  new  migrations [] ","migrator migrations index  + ","Migrator  new  migrations ","Migrator  new  migrations index ","Migrator  new  current_migration "," current_finish version  == "," current_finish version  ","Migrator  new  current_migration ! "," current_finish version  != "]}," ActiveRecord MigrationContext last_stored_environment":{"type":"method","name":"last_stored_environment","children":[],"call":[" raise ","ActiveRecord InternalMetadata  [] ","ActiveRecord InternalMetadata  table_exists? "," current_version == "," current_version ","ActiveRecord InternalMetadata  enabled? "," connection internal_metadata [] "," connection internal_metadata "," connection "," connection internal_metadata table_exists? "," connection internal_metadata enabled? "]}," ActiveRecord MigrationContext protected_environment?":{"type":"method","name":"protected_environment?","children":[],"call":["ActiveRecord Base  protected_environments include? "," last_stored_environment ","ActiveRecord Base  protected_environments "]}," ActiveRecord MigrationContext current_environment":{"type":"method","name":"current_environment","children":[],"call":["ActiveRecord ConnectionHandling DEFAULT_ENV  call "]}," ActiveRecord MigrationContext migration_files":{"type":"method","name":"migration_files","children":[],"call":["Dir  [] ","paths flat_map "," Array "," migrations_paths "," Array  flat_map "," migrations_ Array  "]}," ActiveRecord MigrationContext migrations_status":{"type":"method","name":"migrations_status","children":[],"call":["(send\n  (lvar :db_list) :+\n  (lvar :file_list)) sort_by ","db_list + ","db_list map! ","(send\n  (send nil :migration_files) :map) compact ","(send\n  (lvar :name) :+\n  (lvar :scope)) humanize ","name + ","db_list delete ","ActiveRecord SchemaMigration  normalize_migration_number "," raise ","IllegalMigrationNameError  new "," parse_migration_filename "," migration_files map "," migration_files ","ActiveRecord SchemaMigration  normalized_versions "," schema_migration normalize_migration_number "," schema_migration "," schema_migration normalized_versions ","version to_i "," migration_files filter_map ","(send\n  (lvar :db_list) :+\n  (lvar :(send\n  (send nil :migration_files) :map) compact )) sort_by ","(send\n  (lvar :ActiveRecord SchemaMigration  normalized_versions ) :+\n  (lvar :file_list)) sort_by ","(send\n  (lvar : schema_migration normalized_versions ) :+\n  (lvar :file_list)) sort_by ","ActiveRecord SchemaMigration  normalized_versions  + "," schema_migration normalized_versions  + ","ActiveRecord SchemaMigration  normalized_versions  map! "," schema_migration normalized_versions  map! ","ActiveRecord SchemaMigration  normalized_versions  delete "," schema_migration normalized_versions  delete ","ActiveRecord SchemaMigration  normalized_ActiveRecord SchemaMigration  normalize_migration_number s ","ActiveRecord SchemaMigration  normalized_ schema_migration normalize_migration_number s "," schema_migration normalized_ActiveRecord SchemaMigration  normalize_migration_number s "," schema_migration normalized_ schema_migration normalize_migration_number s ","ActiveRecord SchemaMigration  normalize_migration_number  to_i "," schema_migration normalize_migration_number  to_i "]}," ActiveRecord MigrationContext migrations":{"type":"method","name":"migrations","children":[],"call":["migrations sort_by ","MigrationProxy  new ","name camelize ","version to_i "," raise ","IllegalMigrationNameError  new "," parse_migration_filename "," migration_files map "," migration_files ","name camelize  camelize ","version to_i  to_i "," parse_migration_filename camelize  "]}," ActiveRecord MigrationContext parse_migration_filename":{"type":"method","name":"parse_migration_filename","children":[],"call":["File  basename scan first ","File  basename scan ","File  basename "]}," ActiveRecord MigrationContext last_migration":{"type":"method","name":"last_migration","children":[],"call":["NullMigration  new "," migrations last "," migrations "]}," ActiveRecord MigrationContext any_migrations?":{"type":"method","name":"any_migrations?","children":[],"call":[" migrations any? "," migrations "]}," ActiveRecord MigrationContext needs_migration?":{"type":"method","name":"needs_migration?","children":[],"call":["(send\n  (send\n    (send nil :migrations) :collect\n    (block-pass\n      (sym :version))) :-\n  (send nil :get_all_versions)) size > ","(send\n  (send\n    (send nil :migrations) :collect\n    (block-pass\n      (sym :version))) :-\n  (send nil :get_all_versions)) size "," migrations collect - "," get_all_versions "," migrations collect "," migrations "," pending_migration_versions size > "," pending_migration_versions size "," pending_migration_versions "]}," ActiveRecord MigrationContext current_version":{"type":"method","name":"current_version","children":[],"call":[" get_all_versions max "," get_all_versions "]}," ActiveRecord MigrationContext get_all_versions":{"type":"method","name":"get_all_versions","children":[],"call":["SchemaMigration  all_versions map ","SchemaMigration  all_versions ","SchemaMigration  table_exists? "," schema_migration all_versions map "," schema_migration all_versions "," schema_migration "," schema_migration table_exists? "," schema_migration integer_versions "]}," ActiveRecord MigrationContext open":{"type":"method","name":"open","children":[],"call":["Migrator  new "," migrations "," schema_migration "," internal_metadata "]}," ActiveRecord MigrationContext run":{"type":"method","name":"run","children":[],"call":["Migrator  new run ","Migrator  new "," migrations "," schema_migration "," internal_metadata "]}," ActiveRecord MigrationContext down":{"type":"method","name":"down","children":[],"call":["Migrator  new migrate ","Migrator  new "," migrations "," migrations select "," block_given? "," schema_migration "," internal_metadata "]}," ActiveRecord MigrationContext up":{"type":"method","name":"up","children":[],"call":["Migrator  new migrate ","Migrator  new "," migrations "," migrations select "," block_given? "," schema_migration "," internal_metadata "]}," ActiveRecord MigrationContext forward":{"type":"method","name":"forward","children":[],"call":[" move "]}," ActiveRecord MigrationContext rollback":{"type":"method","name":"rollback","children":[],"call":[" move "]}," ActiveRecord MigrationContext migrate":{"type":"method","name":"migrate","children":[],"call":[" up "," down "," current_version > "," current_version ","target_version == "," current_version == ","target_version nil? "]}," ActiveRecord MigrationContext initialize":{"type":"method","name":"initialize","children":[],"call":["InternalMetadata  new "," connection ","SchemaMigration  new ","ActiveRecord  deprecator warn ","(str \"          SchemaMigration no longer inherits from ActiveRecord::Base. If you want\\n\") squish ","ActiveRecord  deprecator ","internal_metadata == ","schema_migration == "]}," ActiveRecord Migration up_only":{"type":"method","name":"up_only","children":[],"call":[" execute_block "," reverting? "]}," ActiveRecord Migration Compatibility V5_0 add_column":{"type":"method","name":"add_column","children":[],"call":["options []= ","type == ","options [] "]}," ActiveRecord Migration Compatibility V5_0 TableDefinition primary_key":{"type":"method","name":"primary_key","children":[],"call":["type == "]}," ActiveRecord Migration Compatibility V5_1 create_table":{"type":"method","name":"create_table","children":[],"call":[" adapter_name == "," adapter_name "," connection adapter_name == "," connection adapter_name "," connection "]}," ActiveRecord Migration Compatibility V5_1 change_column":{"type":"method","name":"change_column","children":[],"call":[" change_column_comment ","options [] ","options key? "," change_column_null "," change_column_default "," execute "," quote_table_name "," connection send "," connection "," clear_cache! "," adapter_name == "," adapter_name "," connection change_column_comment "," connection change_column_null "," connection change_column_default ","options except "," connection adapter_name == "," connection adapter_name "]}," ActiveRecord LogSubscriber ignored_callstack":{"type":"method","name":"ignored_callstack","children":[],"call":["path start_with? ","RbConfig CONFIG  [] "]}," ActiveRecord LogSubscriber extract_callstack":{"type":"method","name":"extract_callstack","children":[],"call":["offending_line lineno ","offending_line path ","callstack first "," ignored_callstack ! "," ignored_callstack ","frame absolute_path ","callstack find "]}," ActiveRecord LogSubscriber log_query_source":{"type":"method","name":"log_query_source","children":[],"call":[" logger debug "," logger ","source_line sub ","(begin\n  (send\n    (send\n      (const\n        (cbase) :Rails) :root) :to_s)) freeze "," Rails  root to_s "," Rails  root "," extract_callstack "," caller_locations "," extract_query_source_location "," caller "," query_source_location ","source_line sub  sub "," extract_query_source_location _line sub "," query_source_location _line sub "," extract_query_ extract_query_source_location _location "," extract_query_ query_source_location _location "," query_ extract_query_source_location _location "," query_ query_source_location _location "]}," ActiveRecord LogSubscriber debug":{"type":"method","name":"debug","children":[],"call":[" log_query_source ","ActiveRecord Base  verbose_query_logs ","ActiveRecord  verbose_query_logs "]}," ActiveRecord Integration cache_key_with_version":{"type":"method","name":"cache_key_with_version","children":[],"call":[" cache_key "," cache_version "," cache_ cache_version  "]}," ActiveRecord Integration cache_version":{"type":"method","name":"cache_version","children":[],"call":["timestamp utc to_s ","timestamp utc "," try "," cache_versioning "," raise "," class has_attribute? "," class "," cache_timestamp_format "," updated_at "," raw_timestamp_to_cache_version "," can_use_fast_cache_version? "," updated_at_before_type_cast "," has_attribute? ","timestamp utc to_formatted_s ","timestamp utc to_fs "," try  utc to_s "," updated_at  utc to_s "," updated_at_before_type_cast  utc to_s "," try  utc "," updated_at  utc "," updated_at_before_type_cast  utc "," cache_ try _format "," cache_ updated_at _format "," cache_ updated_at_before_type_cast _format "," raw_ try _to_cache_version "," raw_ updated_at _to_cache_version "," raw_ updated_at_before_type_cast _to_cache_version "," try  utc to_formatted_s "," updated_at  utc to_formatted_s "," updated_at_before_type_cast  utc to_formatted_s "," try  utc to_fs "," updated_at  utc to_fs "," updated_at_before_type_cast  utc to_fs "]}," ActiveRecord Inheritance ClassMethods polymorphic_name":{"type":"method","name":"polymorphic_name","children":[],"call":[" base_class name "," base_class "," base_class name demodulize "," store_full_class_name "]}," ActiveRecord ConnectionAdapters SQLite3Adapter SQLite3Integer _limit":{"type":"method","name":"_limit","children":[],"call":[" limit "]}," ActiveRecord ConnectionAdapters SQLite3Adapter invalid_alter_table_type?":{"type":"method","name":"invalid_alter_table_type?","children":[],"call":["options [] ","type to_sym == ","type to_sym ","options [] nil? ","options [] == "]}," ActiveRecord ConnectionAdapters SQLite3Adapter insert_fixtures_set":{"type":"method","name":"insert_fixtures_set","children":[],"call":[" insert_fixture ","rows each ","fixture_set each "," delete "," quote_table_name ","tables_to_delete each "," transaction "," disable_referential_integrity "]}," ActiveRecord ConnectionAdapters SQLite3Adapter insert_fixtures":{"type":"method","name":"insert_fixtures","children":[],"call":[" insert_fixtures_set ","ActiveSupport Deprecation  warn ","(str \"          `insert_fixtures` is deprecated and will be removed in the next version of Rails.\\n\") squish "," insert_fixture ","rows each "]}," ActiveRecord ConnectionAdapters SQLite3Adapter supports_json?":{"type":"method","name":"supports_json?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLite3 SchemaStatements new_column_from_field":{"type":"method","name":"new_column_from_field","children":[],"call":["Column  new ","field [] ","field [] to_i == ","field [] to_i "," fetch_type_metadata ","1 gsub "," extract_default_function "," extract_value_from_default "," is_column_the_rowid? "," fetch_ fetch_type_metadata  "," extract_ extract_default_function  "," extract_field [] _function "," extract_value_from_field []  "," is_column_the_ is_column_the_rowid? ? "]}," ActiveRecord ConnectionAdapters SQLite3 SchemaStatements create_table_definition":{"type":"method","name":"create_table_definition","children":[],"call":["SQLite3 TableDefinition  new "]}," ActiveRecord ConnectionAdapters SQLite3 SchemaStatements schema_creation":{"type":"method","name":"schema_creation","children":[],"call":["SQLite3 SchemaCreation  new "]}," ActiveRecord ConnectionAdapters SQLite3 SchemaStatements create_schema_dumper":{"type":"method","name":"create_schema_dumper","children":[],"call":["SQLite3 SchemaDumper  create "]}," ActiveRecord ConnectionAdapters SQLite3 SchemaStatements indexes":{"type":"method","name":"indexes","children":[],"call":["IndexDefinition  new ","row [] != ","row [] ","orders []= ","index_sql scan flatten each ","index_sql scan flatten ","index_sql scan ","col [] "," exec_query map "," exec_query "," quote "," query_value "," quote_table_name ","(send\n  (send nil :exec_query\n    (dstr\n      (str \"PRAGMA index_list(\")\n      (begin\n        (send nil :quote_table_name\n          (lvar :table_name)))\n      (str \")\"))\n    (str \"SCHEMA\")) :map) compact ","row [] starts_with? ","columns any? ","row [] start_with? "," exec_query filter_map "," internal_exec_query map "," internal_exec_query "," internal_exec_query filter_map "," query_value  scan flatten each "," query_value  scan flatten "," query_value  scan "]}," ActiveRecord ConnectionAdapters SQLite3 SchemaDumper explicit_primary_key_default?":{"type":"method","name":"explicit_primary_key_default?","children":[],"call":["column bigint? "]}," ActiveRecord ConnectionAdapters SQLite3 SchemaDumper default_primary_key?":{"type":"method","name":"default_primary_key?","children":[],"call":[" schema_type == "," schema_type "]}," ActiveRecord ConnectionAdapters SQLite3 TableDefinition integer_like_primary_key_type":{"type":"method","name":"integer_like_primary_key_type","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLite3 Quoting unquoted_false":{"type":"method","name":"unquoted_false","children":[],"call":["f freeze ","ActiveRecord ConnectionAdapters SQLite3Adapter  represent_boolean_as_integer "]}," ActiveRecord ConnectionAdapters SQLite3 Quoting quoted_false":{"type":"method","name":"quoted_false","children":[],"call":["'f' freeze ","0 freeze ","ActiveRecord ConnectionAdapters SQLite3Adapter  represent_boolean_as_integer "]}," ActiveRecord ConnectionAdapters SQLite3 Quoting unquoted_true":{"type":"method","name":"unquoted_true","children":[],"call":["t freeze ","ActiveRecord ConnectionAdapters SQLite3Adapter  represent_boolean_as_integer "]}," ActiveRecord ConnectionAdapters SQLite3 Quoting quoted_true":{"type":"method","name":"quoted_true","children":[],"call":["'t' freeze ","1 freeze ","ActiveRecord ConnectionAdapters SQLite3Adapter  represent_boolean_as_integer "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter supports_foreign_tables?":{"type":"method","name":"supports_foreign_tables?","children":[],"call":[" postgresql_version >= "," postgresql_version "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter discard!":{"type":"method","name":"discard!","children":[],"call":["@connection socket_io reopen ","@connection socket_io "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter supports_validate_constraints?":{"type":"method","name":"supports_validate_constraints?","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter supports_bulk_alter?":{"type":"method","name":"supports_bulk_alter?","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements add_options_for_index_columns":{"type":"method","name":"add_options_for_index_columns","children":[],"call":[" add_index_opclass "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements add_index_opclass":{"type":"method","name":"add_index_opclass","children":[],"call":["column << ","opclasses [] ","opclasses [] present? ","quoted_columns each "," options_for_index_columns ","options [] "," options_for_index_columns  [] "," options_for_index_columns  [] present? "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements remove_timestamps_for_alter":{"type":"method","name":"remove_timestamps_for_alter","children":[],"call":[" remove_column_for_alter "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements add_timestamps_for_alter":{"type":"method","name":"add_timestamps_for_alter","children":[],"call":[" add_column_for_alter ","options []= "," supports_datetime_with_precision? ","options key? ! ","options key? ","options [] nil? ","options [] "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements change_column_null_for_alter":{"type":"method","name":"change_column_null_for_alter","children":[],"call":[" quote_column_name "," change_column_null ","Proc  new ","default nil? "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements change_column_default_for_alter":{"type":"method","name":"change_column_default_for_alter","children":[],"call":["alter_column_query % "," quote_default_expression ","default nil? "," quote_column_name "," extract_new_default_value "," column_for ","alter_ column_for _query % "," quote_ extract_new_default_value _expression "," extract_new_default_value  nil? "," quote_ column_for _name "," extract_new_ extract_new_default_value _value ","  column_for _for "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements change_column_for_alter":{"type":"method","name":"change_column_for_alter","children":[],"call":["sqls << "," change_column_comment ","options [] ","Proc  new ","options key? "," change_column_null_for_alter "," change_column_default_for_alter "," change_column_sql "," schema_creation accept ","ChangeColumnDefinition  new "," schema_creation ","td new_column_definition "," create_table_definition "," build_change_column_definition "," create_table_definition  new_column_definition "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements change_column_sql":{"type":"method","name":"change_column_sql","children":[],"call":["sql << "," type_to_sql ","options [] ","(str \"ALTER COLUMN \") dup "," quote_column_name ","(str \"ALTER COLUMN \") +@ ","(str \"ALTER COLUMN \") dup  << ","(str \"ALTER COLUMN \") +@  << "," type_to_(str \"ALTER COLUMN \") dup  "," type_to_(str \"ALTER COLUMN \") +@  "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements create_alter_table":{"type":"method","name":"create_alter_table","children":[],"call":["PostgreSQL AlterTable  new "," create_table_definition "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements create_table_definition":{"type":"method","name":"create_table_definition","children":[],"call":["PostgreSQL TableDefinition  new "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements schema_creation":{"type":"method","name":"schema_creation","children":[],"call":["PostgreSQL SchemaCreation  new "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements validate_foreign_key":{"type":"method","name":"validate_foreign_key","children":[],"call":[" validate_constraint "," foreign_key_for! name "," foreign_key_for! "," supports_validate_constraints? "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements validate_constraint":{"type":"method","name":"validate_constraint","children":[],"call":[" execute "," schema_creation accept "," schema_creation ","at validate_constraint "," create_alter_table "," supports_validate_constraints? "," schema_cre create_alter_table ion accept "," schema_cre create_alter_table ion "," create_alter_table  valid create_alter_table e_constraint "," cre create_alter_table e_alter_table "," supports_valid create_alter_table e_constraints? "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements create_schema_dumper":{"type":"method","name":"create_schema_dumper","children":[],"call":["PostgreSQL SchemaDumper  create "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements update_table_definition":{"type":"method","name":"update_table_definition","children":[],"call":["PostgreSQL Table  new "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements foreign_table_exists?":{"type":"method","name":"foreign_table_exists?","children":[],"call":[" query_values any? "," query_values "," data_source_sql ","table_name present? "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements foreign_tables":{"type":"method","name":"foreign_tables","children":[],"call":[" query_values "," data_source_sql "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements bulk_change_table":{"type":"method","name":"bulk_change_table","children":[],"call":["non_combinable_operations each "," execute ","sql_fragments join "," quote_table_name ","sql_fragments empty? "," send ","non_combinable_operations concat ","sql_fragments << ","v is_a? "," Array partition "," Array "," respond_to? ","args shift ","operations each "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaDumper schema_expression":{"type":"method","name":"schema_expression","children":[],"call":["column serial? "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaDumper schema_type":{"type":"method","name":"schema_type","children":[],"call":["column bigint? ","column serial? "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaDumper explicit_primary_key_default?":{"type":"method","name":"explicit_primary_key_default?","children":[],"call":["column serial? ! ","column serial? ","column type == ","column type "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaDumper default_primary_key?":{"type":"method","name":"default_primary_key?","children":[],"call":[" schema_type == "," schema_type "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaDumper prepare_column_options":{"type":"method","name":"prepare_column_options","children":[],"call":["spec []= ","column array? ","column sql_type ","column enum? ","(pair\n  (sym :type)\n  (send\n    (send nil :schema_type\n      (lvar :column)) :inspect)) merge! "," schema_type inspect "," schema_type "," extract_expression_for_virtual_column ","column virtual? ","@connection supports_virtual_columns? ","(pair\n  (sym :type)\n  (send\n    (send nil :schema_type\n      (lvar :column)) :inspect)) merge!  []= ","(pair\n  (sym :type)\n  (send\n    (send nil :schema_type\n      (lvar :column)) :in(pair\n  (sym :type)\n  (send\n    (send nil :schema_type\n      (lvar :column)) :inspect)) merge! t)) merge! "," schema_type in(pair\n  (sym :type)\n  (send\n    (send nil :schema_type\n      (lvar :column)) :inspect)) merge! t "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaDumper extensions":{"type":"method","name":"extensions","children":[],"call":["stream puts ","extension inspect ","extensions sort each ","extensions sort ","extensions any? ","@connection extensions ","@connection extensions  sort each ","@connection extensions  sort ","@connection extensions  any? ","@connection @connection extensions  "]}," ActiveRecord ConnectionAdapters PostgreSQL AlterTable validate_constraint":{"type":"method","name":"validate_constraint","children":[],"call":["@constraint_validations << "]}," ActiveRecord ConnectionAdapters PostgreSQL AlterTable initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQL TableDefinition integer_like_primary_key_type":{"type":"method","name":"integer_like_primary_key_type","children":[],"call":["options [] == ","options [] ","type == "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaCreation visit_ValidateConstraint":{"type":"method","name":"visit_ValidateConstraint","children":[],"call":[" quote_column_name "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaCreation visit_AddForeignKey":{"type":"method","name":"visit_AddForeignKey","children":[],"call":["sql << ","o validate? "," dup tap "," dup ","o deferrable to_s upcase ","o deferrable to_s ","o deferrable ","o deferrable == ","o options [] to_s upcase ","o options [] to_s ","o options [] ","o options "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaCreation visit_AlterTable":{"type":"method","name":"visit_AlterTable","children":[],"call":[" << ","(send\n  (send\n    (lvar :o) :constraint_validations) :map) join "," visit_ValidateConstraint ","o constraint_validations map ","o constraint_validations ","sql << ","(send\n  (send\n    (lvar :o) :unique_key_drops) :map) join "," visit_DropUniqueKey ","o unique_key_drops map ","o unique_key_drops ","(send\n  (send\n    (lvar :o) :unique_key_adds) :map) join "," visit_AddUniqueKey ","o unique_key_adds map ","o unique_key_adds ","(send\n  (send\n    (lvar :o) :exclusion_constraint_drops) :map) join "," visit_DropExclusionConstraint ","o exclusion_constraint_drops map ","o exclusion_constraint_drops ","(send\n  (send\n    (lvar :o) :exclusion_constraint_adds) :map) join "," visit_AddExclusionConstraint ","o exclusion_constraint_adds map ","o exclusion_constraint_adds "]}," ActiveRecord ConnectionAdapters PostgreSQL Quoting infinity?":{"type":"method","name":"infinity?","children":[],"call":["value infinite? ","value respond_to? "]}," ActiveRecord ConnectionAdapters PostgreSQL Quoting type_cast_range_value":{"type":"method","name":"type_cast_range_value","children":[],"call":[" type_cast "," infinity? "]}," ActiveRecord ConnectionAdapters PostgreSQL Quoting encode_range":{"type":"method","name":"encode_range","children":[],"call":["range exclude_end? "," type_cast_range_value ","range last ","range first "," type_cast ","range end ","range begin "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Date cast_value":{"type":"method","name":"cast_value","children":[],"call":["value sub sub ","value sub "," format ","value [] to_i -@ + ","value [] to_i -@ ","value [] to_i ","value [] "," Float INFINITY  -@ ","value delete_suffix! ","year to_i -@ + ","year to_i -@ ","year to_i "]}," ActiveRecord ConnectionAdapters PostgreSQL DatabaseStatements last_insert_id_result":{"type":"method","name":"last_insert_id_result","children":[],"call":[" exec_query "," quote "," internal_exec_query "]}," ActiveRecord ConnectionAdapters Mysql2Adapter discard!":{"type":"method","name":"discard!","children":[],"call":["@connection automatic_close= "]}," ActiveRecord ConnectionAdapters MySQL SchemaStatements add_options_for_index_columns":{"type":"method","name":"add_options_for_index_columns","children":[],"call":[" add_index_length "]}," ActiveRecord ConnectionAdapters MySQL SchemaStatements add_index_length":{"type":"method","name":"add_index_length","children":[],"call":["column << ","lengths [] ","lengths [] present? ","quoted_columns each "," options_for_index_columns ","options [] "," options_for_index_columns  [] "," options_for_index_columns  [] present? "]}," ActiveRecord ConnectionAdapters MySQL SchemaStatements extract_foreign_key_action":{"type":"method","name":"extract_foreign_key_action","children":[],"call":["specifier == "]}," ActiveRecord ConnectionAdapters MySQL SchemaStatements fetch_type_metadata":{"type":"method","name":"fetch_type_metadata","children":[],"call":["MySQL TypeMetadata  new "]}," ActiveRecord ConnectionAdapters MySQL SchemaStatements new_column_from_field":{"type":"method","name":"new_column_from_field","children":[],"call":["MySQL Column  new ","field [] presence ","field [] ","field [] == ","(str \"\\\\ACURRENT_TIMESTAMP(?:\\\\(\\\\))?\\\\z\") match? ","type_metadata type == ","type_metadata type "," fetch_type_metadata ","(str \"\\\\ACURRENT_TIMESTAMP(?:\\\\([0-6]?\\\\))?\\\\z\") match? ","(str \"(\") +@ ","default start_with? ","type_metadata extra == ","type_metadata extra ","default [] gsub ","default [] ","(str \"on update CURRENT_TIMESTAMP\") match? "," default_type == "," default_type ","field fetch "," fetch_type_metadata  type == "," fetch_type_metadata  type "," fetch_ fetch_type_metadata  ","(str \"(\") +@  start_with? ","default [] gsub  start_with? "," fetch_type_metadata  extra == "," fetch_type_metadata  extra ","(str \"(\") +@  [] gsub ","default [] gsub  [] gsub ","(str \"(\") +@  [] ","default [] gsub  [] "," (str \"(\") +@ _type == "," default [] gsub _type == "," (str \"(\") +@ _type "," default [] gsub _type "]}," ActiveRecord ConnectionAdapters MySQL SchemaStatements create_table_definition":{"type":"method","name":"create_table_definition","children":[],"call":["MySQL TableDefinition  new "]}," ActiveRecord ConnectionAdapters MySQL SchemaStatements schema_creation":{"type":"method","name":"schema_creation","children":[],"call":["MySQL SchemaCreation  new "]}," ActiveRecord ConnectionAdapters MySQL SchemaStatements create_schema_dumper":{"type":"method","name":"create_schema_dumper","children":[],"call":["MySQL SchemaDumper  create "]}," ActiveRecord ConnectionAdapters MySQL SchemaStatements update_table_definition":{"type":"method","name":"update_table_definition","children":[],"call":["MySQL Table  new "]}," ActiveRecord ConnectionAdapters MySQL SchemaStatements remove_column":{"type":"method","name":"remove_column","children":[],"call":[" remove_foreign_key "," foreign_key_exists? "]}," ActiveRecord ConnectionAdapters MySQL SchemaStatements indexes":{"type":"method","name":"indexes","children":[],"call":["IndexDefinition  new ","indexes map ","indexes last [] [] merge! ","row [] ","indexes last [] [] ","indexes last [] ","indexes last ","row [] == ","row [] to_i ","indexes last [] << ","indexes << ","row [] presence ","row [] to_i == ","row [] downcase to_sym ","row [] downcase ","current_index != "," each_hash "," execute_and_free "," quote_table_name ","indexes last orders merge! ","indexes last orders ","indexes last lengths merge! ","indexes last lengths ","indexes last columns << ","indexes last columns ","index []= "," add_options_for_index_columns values join "," add_options_for_index_columns values "," add_options_for_index_columns ","(send\n  (send\n    (lvar :index) :[]\n    (int -2)) :map) to_h "," quote_column_name +@ "," quote_column_name ","expressions [] ","name to_sym ","index [] map ","index [] ","options delete ","index last ","indexes last [] [] []= ","(str \"(\") +@ ","expression start_with? ","(send\n  (send\n    (lvar :index) :[]\n    (int -1)) :map) to_h ","index pop ","index [] to_h ","row []  != ","indexes last options delete  merge! ","indexes last options delete  ","indexes last (send\n  (send\n    (lvar :index) :[]\n    (int -2)) :map) to_h  << ","indexes last (send\n  (send\n    (lvar :index) :[]\n    (int -1)) :map) to_h  << ","indexes last (send\n  (send\n    (lvar :index) :[]\n    (int -2)) :map) to_h  ","indexes last (send\n  (send\n    (lvar :index) :[]\n    (int -1)) :map) to_h  "," add_options_for_index_(send\n  (send\n    (lvar :index) :[]\n    (int -2)) :map) to_h  values join "," add_options_for_index_(send\n  (send\n    (lvar :index) :[]\n    (int -1)) :map) to_h  values join "," add_index last _for_index_columns values join "," add_index pop _for_index_columns values join "," add_options_for_index_(send\n  (send\n    (lvar :index) :[]\n    (int -2)) :map) to_h  values "," add_options_for_index_(send\n  (send\n    (lvar :index) :[]\n    (int -1)) :map) to_h  values "," add_index last _for_index_columns values "," add_index pop _for_index_columns values "," add_options_for_index_(send\n  (send\n    (lvar :index) :[]\n    (int -2)) :map) to_h  "," add_options_for_index_(send\n  (send\n    (lvar :index) :[]\n    (int -1)) :map) to_h  "," add_index last _for_index_columns "," add_index pop _for_index_columns ","options delete  [] ","(str \"(\") +@ s [] ","row [] s [] ","index last  delete ","index pop  delete ","(str \"(\") +@  start_with? ","row []  start_with? "]}," ActiveRecord ConnectionAdapters MySQL SchemaDumper extract_expression_for_virtual_column":{"type":"method","name":"extract_expression_for_virtual_column","children":[],"call":["@connection query_value inspect ","@connection query_value ","scope [] ","@connection quote ","column name ","@connection send ","column table_name ","$~ [] inspect ","$~ [] ","(begin\n  (lvar :column_name)) =~ ","column extra ","Regexp  quote ","column sql_type ","@connection quote_column_name ","@connection version < ","@connection version ","@connection mariadb? "," table_name ","@connection database_version < ","@connection database_version ","@connection query_value gsub inspect ","@connection query_value gsub ","@connection send  [] ","(begin\n  (lvar :@connection quote )) =~ ","(begin\n  (lvar :@connection quote_column_name )) =~ ","@connection quote_@connection quote  ","@connection quote_@connection quote_column_name  "]}," ActiveRecord ConnectionAdapters MySQL SchemaDumper schema_collation":{"type":"method","name":"schema_collation","children":[],"call":["column collation inspect ","column collation ","column collation != ","@table_collation_cache [] ","@connection exec_query first [] ","@connection exec_query first ","@connection exec_query ","@connection quote ","column table_name "," table_name ","@connection internal_exec_query first [] ","@connection internal_exec_query first ","@connection internal_exec_query ","column column table_name  "," column table_name  "]}," ActiveRecord ConnectionAdapters MySQL SchemaDumper schema_precision":{"type":"method","name":"schema_precision","children":[],"call":["column precision == ","column precision ","(str \"\\\\A(?:date)?time(?:stamp)?\\\\b\") match? ","column sql_type ","column type == ","column type ","(str \"\\\\Atime(?:stamp)?\\\\b\") match? "]}," ActiveRecord ConnectionAdapters MySQL SchemaDumper schema_type":{"type":"method","name":"schema_type","children":[],"call":["column sql_type "]}," ActiveRecord ConnectionAdapters MySQL SchemaDumper explicit_primary_key_default?":{"type":"method","name":"explicit_primary_key_default?","children":[],"call":["column auto_increment? ! ","column auto_increment? ","column type == ","column type "]}," ActiveRecord ConnectionAdapters MySQL SchemaDumper default_primary_key?":{"type":"method","name":"default_primary_key?","children":[],"call":["column unsigned? ! ","column unsigned? ","column auto_increment? "]}," ActiveRecord ConnectionAdapters MySQL SchemaDumper column_spec_for_primary_key":{"type":"method","name":"column_spec_for_primary_key","children":[],"call":["spec delete ","column auto_increment? ","column type == ","column type "]}," ActiveRecord ConnectionAdapters MySQL SchemaDumper prepare_column_options":{"type":"method","name":"prepare_column_options","children":[],"call":["(pair\n  (sym :type)\n  (send\n    (send nil :schema_type\n      (lvar :column)) :inspect)) merge! "," schema_type inspect "," schema_type ","spec []= ","(str \"\\\\b(?:STORED|PERSISTENT)\\\\b\") match? ","column extra "," extract_expression_for_virtual_column ","column virtual? ","@connection supports_virtual_columns? ","column auto_increment? ","column unsigned? ","(pair\n  (sym :size)\n  (send\n    (send\n      (lvar :size) :to_sym) :inspect)) merge! ","size to_sym inspect ","size to_sym ","column sql_type ","(pair\n  (sym :type)\n  (send\n    (send nil :schema_type\n      (lvar :column)) :in(pair\n  (sym :type)\n  (send\n    (send nil :schema_type\n      (lvar :column)) :inspect)) merge! t)) merge! ","(pair\n  (sym :type)\n  (send\n    (send nil :schema_type\n      (lvar :column)) :in(pair\n  (sym :size)\n  (send\n    (send\n      (lvar :size) :to_sym) :inspect)) merge! t)) merge! "," schema_type in(pair\n  (sym :type)\n  (send\n    (send nil :schema_type\n      (lvar :column)) :inspect)) merge! t "," schema_type in(pair\n  (sym :size)\n  (send\n    (send\n      (lvar :size) :to_sym) :inspect)) merge! t ","(pair\n  (sym :type)\n  (send\n    (send nil :schema_type\n      (lvar :column)) :inspect)) merge!  []= ","(pair\n  (sym :size)\n  (send\n    (send\n      (lvar :size) :to_sym) :inspect)) merge!  []= ","(pair\n  (sym :size)\n  (send\n    (send\n      (lvar :size) :to_sym) :in(pair\n  (sym :type)\n  (send\n    (send nil :schema_type\n      (lvar :column)) :inspect)) merge! t)) merge! ","(pair\n  (sym :size)\n  (send\n    (send\n      (lvar :size) :to_sym) :in(pair\n  (sym :size)\n  (send\n    (send\n      (lvar :size) :to_sym) :inspect)) merge! t)) merge! ","size to_sym in(pair\n  (sym :type)\n  (send\n    (send nil :schema_type\n      (lvar :column)) :inspect)) merge! t ","size to_sym in(pair\n  (sym :size)\n  (send\n    (send\n      (lvar :size) :to_sym) :inspect)) merge! t "]}," ActiveRecord ConnectionAdapters MySQL TableDefinition integer_like_primary_key_type":{"type":"method","name":"integer_like_primary_key_type","children":[],"call":["options []= ","options [] == ","options [] "]}," ActiveRecord ConnectionAdapters MySQL Quoting _type_cast":{"type":"method","name":"_type_cast","children":[],"call":["value getlocal ","value getutc ","ActiveRecord Base  default_timezone == ","ActiveRecord Base  default_timezone ","ActiveRecord  default_timezone == ","ActiveRecord  default_timezone "]}," ActiveRecord ConnectionAdapters MySQL DatabaseStatements discard_remaining_results":{"type":"method","name":"discard_remaining_results","children":[],"call":["@connection next_result ","@connection more_results? ","@connection abandon_results! "]}," ActiveRecord ConnectionAdapters MySQL DatabaseStatements default_insert_value":{"type":"method","name":"default_insert_value","children":[],"call":["Arel  sql ","column auto_increment? "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter remove_timestamps_for_alter":{"type":"method","name":"remove_timestamps_for_alter","children":[],"call":[" remove_column_for_alter "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter add_timestamps_for_alter":{"type":"method","name":"add_timestamps_for_alter","children":[],"call":[" add_column_for_alter ","options []= "," supports_datetime_with_precision? ","options key? ! ","options key? ","options [] nil? ","options [] "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter remove_index_for_alter":{"type":"method","name":"remove_index_for_alter","children":[],"call":[" quote_column_name "," index_name_for_remove ","  index_name_for_remove _for_remove "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter add_index_for_alter":{"type":"method","name":"add_index_for_alter","children":[],"call":[" quote_column_name ","index_algorithm []= ","index_algorithm present? "," add_index_options "," add_sql_comment! ","(str \"ADD \") +@ "," schema_creation accept "," schema_creation "," add_(str \"ADD \") +@ _comment! "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter rename_column_for_alter":{"type":"method","name":"rename_column_for_alter","children":[],"call":[" schema_creation accept ","ChangeColumnDefinition  new ","column name "," schema_creation ","td new_column_definition "," create_table_definition "," exec_query first [] "," exec_query first "," exec_query "," quote "," quote_table_name ","column auto_increment? ","column null ","column default "," column_for ","column comment "," rename_column_sql "," supports_rename_column? "," internal_exec_query first [] "," internal_exec_query first "," internal_exec_query "," column_for  name "," create_table_definition  new_column_definition ","td new_ column_for _definition "," column_for  auto_increment? "," column_for  null "," column_for  default ","  column_for _for "," column_for  comment "," rename_ column_for _sql "," supports_rename_ column_for ? "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter change_column_for_alter":{"type":"method","name":"change_column_for_alter","children":[],"call":[" schema_creation accept ","ChangeColumnDefinition  new ","column name "," schema_creation ","td new_column_definition "," create_table_definition ","options []= ","column comment ","options key? ","column null ","column default ","column sql_type "," column_for ","column auto_increment? ","column collation "," text_type? "," build_change_column_definition "," column_for  name "," create_table_definition  new_column_definition ","td new_ column_for _definition "," column_for  comment "," column_for  null "," column_for  default "," column_for  sql_type ","  column_for _for "," column_for  auto_increment? "," column_for  collation "," build_change_ column_for _definition "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter with_multi_statements":{"type":"method","name":"with_multi_statements","children":[],"call":[" reconnect! ","@config []= ","@config [] "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter max_allowed_packet":{"type":"method","name":"max_allowed_packet","children":[],"call":[" show_variable - "," show_variable "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter max_allowed_packet_reached?":{"type":"method","name":"max_allowed_packet_reached?","children":[],"call":["(send\n  (send\n    (lvar :current_packet) :bytesize) :+\n  (send\n    (lvar :previous_packet) :bytesize)) > "," max_allowed_packet ","current_packet bytesize + ","previous_packet bytesize ","current_packet bytesize ","previous_packet nil? "," raise ","current_packet bytesize > "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter combine_multi_statements":{"type":"method","name":"combine_multi_statements","children":[],"call":["previous_packet << ","total_sql_chunks << ","total_sql_chunks empty? "," max_allowed_packet_reached? ","sql << ","total_sql_chunks last ","total_sql each_with_object ","total_sql_chunks last  << "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter insert_fixtures_set":{"type":"method","name":"insert_fixtures_set","children":[],"call":[" discard_remaining_results "," with_multi_statements "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter change_column_comment":{"type":"method","name":"change_column_comment","children":[],"call":[" change_column "," extract_new_comment_value "," extract_new_ extract_new_comment_value _value "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter change_table_comment":{"type":"method","name":"change_table_comment","children":[],"call":[" execute "," quote "," quote_table_name ","comment nil? "," extract_new_comment_value "," extract_new_comment_value  nil? "," extract_new_ extract_new_comment_value _value "]}," ActiveRecord ConnectionAdapters AbstractAdapter column_name_from_arel_node":{"type":"method","name":"column_name_from_arel_node","children":[],"call":[" visitor accept value "," visitor accept ","Arel Collectors SQLString  new "," visitor "]}," ActiveRecord ConnectionAdapters AbstractAdapter discard!":{"type":"method","name":"discard!","children":[],"call":[" schema_cache connection= "," schema_cache "," schema_cache connection == "," schema_cache connection "]}," ActiveRecord ConnectionAdapters AbstractAdapter supports_foreign_tables?":{"type":"method","name":"supports_foreign_tables?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter supports_validate_constraints?":{"type":"method","name":"supports_validate_constraints?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter seconds_idle":{"type":"method","name":"seconds_idle","children":[],"call":["Concurrent  monotonic_time - ","Concurrent  monotonic_time "," in_use? ","Process  clock_gettime - ","Process  clock_gettime "]}," ActiveRecord ConnectionAdapters AbstractAdapter migration_context":{"type":"method","name":"migration_context","children":[],"call":["MigrationContext  new "," migrations_paths "," schema_migration "," internal_metadata "]}," ActiveRecord ConnectionAdapters AbstractAdapter migrations_paths":{"type":"method","name":"migrations_paths","children":[],"call":["Migrator  migrations_paths ","@config [] "]}," ActiveRecord ConnectionAdapters TransactionState nullify!":{"type":"method","name":"nullify!","children":[],"call":[]}," ActiveRecord ConnectionAdapters TransactionState commit!":{"type":"method","name":"commit!","children":[],"call":[]}," ActiveRecord ConnectionAdapters TransactionState rollback!":{"type":"method","name":"rollback!","children":[],"call":["c rollback! ","@children each "]}," ActiveRecord ConnectionAdapters TransactionState fully_completed?":{"type":"method","name":"fully_completed?","children":[],"call":[" completed? "]}," ActiveRecord ConnectionAdapters TransactionState add_child":{"type":"method","name":"add_child","children":[],"call":["@children << "]}," ActiveRecord ConnectionAdapters SchemaStatements remove_columns_for_alter":{"type":"method","name":"remove_columns_for_alter","children":[],"call":[" remove_column_for_alter ","column_names map "]}," ActiveRecord ConnectionAdapters SchemaStatements remove_column_for_alter":{"type":"method","name":"remove_column_for_alter","children":[],"call":[" quote_column_name "]}," ActiveRecord ConnectionAdapters SchemaStatements add_column_for_alter":{"type":"method","name":"add_column_for_alter","children":[],"call":[" schema_creation accept ","AddColumnDefinition  new "," schema_creation ","td new_column_definition "," create_table_definition "," create_table_definition  new_column_definition "]}," ActiveRecord ConnectionAdapters SchemaStatements extract_foreign_key_action":{"type":"method","name":"extract_foreign_key_action","children":[],"call":[]}," ActiveRecord ConnectionAdapters SchemaStatements fetch_type_metadata":{"type":"method","name":"fetch_type_metadata","children":[],"call":["SqlTypeMetadata  new ","cast_type scale ","cast_type precision ","cast_type limit ","cast_type type "," lookup_cast_type "," lookup_cast_type  scale "," lookup_cast_type  precision "," lookup_cast_type  limit "," lookup_cast_type  type "," lookup_ lookup_cast_type  "]}," ActiveRecord ConnectionAdapters SchemaStatements schema_creation":{"type":"method","name":"schema_creation","children":[],"call":["SchemaCreation  new "]}," ActiveRecord ConnectionAdapters SchemaStatements options_for_index_columns":{"type":"method","name":"options_for_index_columns","children":[],"call":["hash []= ","Hash  new ","options symbolize_keys ","options is_a? "]}," ActiveRecord ConnectionAdapters SchemaStatements create_schema_dumper":{"type":"method","name":"create_schema_dumper","children":[],"call":["SchemaDumper  create "]}," ActiveRecord ConnectionAdapters SchemaDumper schema_collation":{"type":"method","name":"schema_collation","children":[],"call":["column collation inspect ","column collation "]}," ActiveRecord ConnectionAdapters SchemaDumper schema_expression":{"type":"method","name":"schema_expression","children":[],"call":["column default_function inspect ","column default_function "]}," ActiveRecord ConnectionAdapters SchemaDumper schema_default":{"type":"method","name":"schema_default","children":[],"call":["type type_cast_for_schema "," schema_expression ","default nil? ","type deserialize ","column default ","@connection lookup_cast_type_from_column ","column has_default? ","@connection lookup_cast_type_from_column  @connection lookup_cast_type_from_column _cast_for_schema ","type deserialize  nil? ","@connection lookup_cast_type_from_column  deserialize ","column type deserialize  ","@connection lookup_cast_@connection lookup_cast_type_from_column _from_column ","column has_type deserialize ? "]}," ActiveRecord ConnectionAdapters SchemaDumper schema_scale":{"type":"method","name":"schema_scale","children":[],"call":["column scale inspect ","column scale "]}," ActiveRecord ConnectionAdapters SchemaDumper schema_precision":{"type":"method","name":"schema_precision","children":[],"call":["column precision inspect ","column precision ","column type == ","column type "]}," ActiveRecord ConnectionAdapters SchemaDumper schema_limit":{"type":"method","name":"schema_limit","children":[],"call":["limit inspect ","limit != ","@connection native_database_types [] [] ","@connection native_database_types [] ","column type ","@connection native_database_types ","column limit ","column bigint? ","column limit  inspect ","column limit  != ","column column limit  "]}," ActiveRecord ConnectionAdapters SchemaDumper schema_type":{"type":"method","name":"schema_type","children":[],"call":["column type ","column bigint? "]}," ActiveRecord ConnectionAdapters SchemaDumper schema_type_with_virtual":{"type":"method","name":"schema_type_with_virtual","children":[],"call":[" schema_type ","column virtual? ","@connection supports_virtual_columns? "]}," ActiveRecord ConnectionAdapters SchemaDumper explicit_primary_key_default?":{"type":"method","name":"explicit_primary_key_default?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SchemaDumper default_primary_key?":{"type":"method","name":"default_primary_key?","children":[],"call":[" schema_type == "," schema_type "]}," ActiveRecord ConnectionAdapters SchemaDumper prepare_column_options":{"type":"method","name":"prepare_column_options","children":[],"call":["spec compact! ","spec []= ","column comment inspect ","column comment ","column comment present? "," schema_collation ","column null "," schema_default "," schema_scale "," schema_precision "," schema_limit "]}," ActiveRecord ConnectionAdapters SchemaDumper column_spec_for_primary_key":{"type":"method","name":"column_spec_for_primary_key","children":[],"call":["spec [] "," explicit_primary_key_default? ","spec merge! "," prepare_column_options except! "," prepare_column_options "," schema_type inspect "," schema_type "," default_primary_key? ","spec []= "]}," ActiveRecord ConnectionAdapters SchemaDumper column_spec":{"type":"method","name":"column_spec","children":[],"call":[" prepare_column_options "," schema_type_with_virtual "]}," ActiveRecord ConnectionAdapters SchemaDumper create":{"type":"method","name":"create","children":[],"call":[]}," ActiveRecord ConnectionAdapters TableDefinition integer_like_primary_key_type":{"type":"method","name":"integer_like_primary_key_type","children":[],"call":[]}," ActiveRecord ConnectionAdapters TableDefinition integer_like_primary_key?":{"type":"method","name":"integer_like_primary_key?","children":[],"call":["options key? ! ","options key? ","(sym :integer) include? ","options [] "]}," ActiveRecord ConnectionAdapters validate?":{"type":"method","name":"validate?","children":[],"call":[" options fetch "," options "]}," ActiveRecord ConnectionAdapters IndexDefinition concise_options":{"type":"method","name":"concise_options","children":[],"call":["options values first ","options values ","options values uniq size == ","options values uniq size ","options values uniq "," columns size == ","options size "," columns size "," columns "]}," ActiveRecord ConnectionAdapters IndexDefinition initialize":{"type":"method","name":"initialize","children":[],"call":[" concise_options "]}," ActiveRecord ConnectionAdapters AbstractAdapter SchemaCreation to_sql":{"type":"method","name":"to_sql","children":[],"call":["sql to_sql ","sql respond_to? ","sql to_sql  to_sql to_sql  ","sql to_sql  respond_to? "]}," ActiveRecord ConnectionAdapters Quoting lookup_cast_type":{"type":"method","name":"lookup_cast_type","children":[],"call":[" type_map lookup "," type_map "]}," ActiveRecord ConnectionAdapters DatabaseStatements PartialQueryCollector value":{"type":"method","name":"value","children":[],"call":[]}," ActiveRecord ConnectionAdapters DatabaseStatements PartialQueryCollector add_bind":{"type":"method","name":"add_bind","children":[],"call":["@parts << ","Arel Nodes BindParam  new ","@binds << "]}," ActiveRecord ConnectionAdapters DatabaseStatements PartialQueryCollector <<":{"type":"method","name":"<<","children":[],"call":["@parts << "]}," ActiveRecord ConnectionAdapters DatabaseStatements PartialQueryCollector initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters DatabaseStatements with_yaml_fallback":{"type":"method","name":"with_yaml_fallback","children":[],"call":["YAML  dump ","value is_a? "]}," ActiveRecord ConnectionAdapters DatabaseStatements arel_from_relation":{"type":"method","name":"arel_from_relation","children":[],"call":["relation arel ","relation is_a? "]}," ActiveRecord ConnectionAdapters DatabaseStatements combine_multi_statements":{"type":"method","name":"combine_multi_statements","children":[],"call":["total_sql join "]}," ActiveRecord ConnectionAdapters DatabaseStatements build_fixture_sql":{"type":"method","name":"build_fixture_sql","children":[],"call":["manager to_sql ","manager values= ","manager create_values_list ","manager columns << ","table [] ","manager columns ","columns each_key ","manager into ","Arel InsertManager  new ","Arel Table  new "," default_insert_value "," with_yaml_fallback ","bind value_for_database ","Relation QueryAttribute  new ","fixture [] "," lookup_cast_type_from_column ","fixture key? ","columns map "," raise ","unknown_columns map join ","unknown_columns map ","unknown_columns any? ","fixture keys - ","columns keys ","fixture keys ","fixture stringify_keys ","fixtures map "," schema_cache columns_hash "," schema_cache ","values_list << ","new_values << ","values [] ","values [] equal? ","columns each_key with_index ","values_list shift ","values_list size == ","values_list size ","type serialize "," visitor compile ","manager ast "," visitor ","column virtual? "," supports_virtual_columns? "," schema_cache columns_hash reject ","Arel InsertManager  new  to_sql ","Arel InsertManager  new  values= ","manager values_list shift = ","Arel InsertManager  new  create_values_list ","manager create_values_list shift _list ","Arel InsertManager  new  columns << ","manager  schema_cache columns_hash  << ","Arel Table  new  [] ","Arel InsertManager  new  columns ","manager  schema_cache columns_hash  "," schema_cache columns_hash  each_key ","Arel InsertManager  new  into ","Relation QueryAttribute  new  value_for_database ","fixture stringify_keys  [] "," lookup_cast_ lookup_cast_type_from_column _from_column ","fixture stringify_keys  key? "," schema_cache columns_hash  map ","fixture keys -  map join ","unknown_ schema_cache columns_hash  map join ","fixture keys -  map ","unknown_ schema_cache columns_hash  map ","fixture keys -  any? ","unknown_ schema_cache columns_hash  any? ","fixture stringify_keys  keys - "," schema_cache columns_hash  keys ","fixture stringify_keys  keys ","fixture stringify_keys  stringify_keys ","fixture stringify_keys s map "," schema_cache  schema_cache columns_hash _hash ","values_list shift _list << ","new_values_list shift  << ","values_list shift  [] ","values_list shift  [] equal? "," schema_cache columns_hash  each_key with_index ","values_list shift _list shift ","values_list shift _list size == ","values_list shift _list size "," lookup_cast_type_from_column  serialize ","Arel InsertManager  new  ast "," supports_virtual_ schema_cache columns_hash ? "," schema_cache  schema_cache columns_hash _hash reject "]}," ActiveRecord ConnectionAdapters DatabaseStatements default_insert_value":{"type":"method","name":"default_insert_value","children":[],"call":["Arel  sql "]}," ActiveRecord ConnectionAdapters DatabaseStatements insert_fixtures_set":{"type":"method","name":"insert_fixtures_set","children":[],"call":[" block_given? "," execute ","total_sql each "," transaction "," disable_referential_integrity ","Array  wrap "," combine_multi_statements ","table_deletes + ","(str \"DELETE FROM \") dup "," quote_table_name ","tables_to_delete map ","(send\n  (lvar :fixture_set) :map) compact "," build_fixture_sql ","fixtures empty? ","fixture_set map "," execute_batch "," with_multi_statements "," Array "," build_fixture_statements ","(str \"DELETE FROM \") +@ ","Array  wrap  each "," Array  each "," combine_multi_table_deletes +  "," with_multi_table_deletes +  "," build_fixture_table_deletes +  "]}," ActiveRecord ConnectionAdapters DatabaseStatements insert_fixtures":{"type":"method","name":"insert_fixtures","children":[],"call":[" execute "," build_fixture_sql ","fixtures empty? ","ActiveSupport Deprecation  warn ","(str \"          `insert_fixtures` is deprecated and will be removed in the next version of Rails.\\n\") squish ","manager to_sql ","manager values= ","manager create_values_list ","manager columns << ","table [] ","manager columns ","columns each_key ","manager into ","Arel InsertManager  new ","Arel Table  new ","Arel  sql "," with_yaml_fallback ","bind value_for_database ","Relation QueryAttribute  new ","fixture [] "," lookup_cast_type_from_column ","fixture key? ","columns map "," raise ","unknown_columns map join ","unknown_columns map ","unknown_columns any? ","fixture keys - ","columns keys ","fixture keys ","fixture stringify_keys ","fixtures map "," schema_cache columns_hash "," schema_cache "," build_fixture stringify_keys _sql ","fixture stringify_keys s empty? ","(str \"          `insert_fixture stringify_keys s` is deprecated and will be removed in the next version of Rails.\\n\") squish ","Arel InsertManager  new  to_sql ","Arel InsertManager  new  values= ","Arel InsertManager  new  create_values_list ","Arel InsertManager  new  columns << ","manager  schema_cache columns_hash  << ","Arel Table  new  [] ","Arel InsertManager  new  columns ","manager  schema_cache columns_hash  "," schema_cache columns_hash  each_key ","Arel InsertManager  new  into ","Relation QueryAttribute  new  value_for_database ","fixture stringify_keys  [] "," lookup_cast_ lookup_cast_type_from_column _from_column ","fixture stringify_keys  key? "," schema_cache columns_hash  map ","fixture keys -  map join ","unknown_ schema_cache columns_hash  map join ","fixture keys -  map ","unknown_ schema_cache columns_hash  map ","fixture keys -  any? ","unknown_ schema_cache columns_hash  any? ","fixture stringify_keys  keys - "," schema_cache columns_hash  keys ","fixture stringify_keys  keys ","fixture stringify_keys  stringify_keys ","fixture stringify_keys s map "," schema_cache  schema_cache columns_hash _hash "]}," ActiveRecord ConnectionAdapters DatabaseStatements to_sql_and_binds":{"type":"method","name":"to_sql_and_binds","children":[],"call":["arel_or_sql_string dup freeze ","arel_or_sql_string dup ","sql freeze "," visitor accept value "," visitor accept "," collector ","arel_or_sql_string ast "," visitor "," raise ","binds empty? ","arel_or_sql_string respond_to? "," visitor preparable= "," prepared_statements "," to_sql_and_binds "," unprepared_statement ","binds length > "," bind_params_length ","binds length "," visitor compile ","arel_or_sql_string frozen? ","collector preparable ","collector preparable= ","(send\n  (const nil :String) :===\n  (lvar :arel_or_sql_string)) ! ","String  === ","Arel  arel_node? ","arel_or_ visitor accept value _string dup freeze ","arel_or_ visitor compile _string dup freeze ","arel_or_sql_string dup freeze  dup freeze ","arel_or_sql_string ast  dup freeze ","arel_or_ visitor accept value _string dup ","arel_or_ visitor compile _string dup ","arel_or_sql_string dup freeze  dup ","arel_or_sql_string ast  dup "," visitor accept value  freeze "," visitor compile  freeze ","  collector  ","arel_or_ visitor accept value _string ast ","arel_or_ visitor compile _string ast ","arel_or_sql_string dup freeze  ast ","arel_or_sql_string ast  ast ","arel_or_ visitor accept value _string respond_to? ","arel_or_ visitor compile _string respond_to? ","arel_or_sql_string dup freeze  respond_to? ","arel_or_sql_string ast  respond_to? "," visitor collector preparable = "," to_ visitor accept value _and_binds "," to_ visitor compile _and_binds ","arel_or_ visitor accept value _string frozen? ","arel_or_ visitor compile _string frozen? ","arel_or_sql_string dup freeze  frozen? ","arel_or_sql_string ast  frozen? ","collector collector preparable  "," collector  preparable ","collector collector preparable = "," collector  preparable= ","(send\n  (const nil :String) :===\n  (lvar :arel_or_ visitor accept value _string)) ! ","(send\n  (const nil :String) :===\n  (lvar :arel_or_ visitor compile _string)) ! ","(send\n  (const nil :String) :===\n  (lvar :arel_or_sql_string dup freeze )) ! ","(send\n  (const nil :String) :===\n  (lvar :arel_or_sql_string ast )) ! "]}," ActiveRecord ConnectionAdapters ConnectionHandler flush_idle_connections!":{"type":"method","name":"flush_idle_connections!","children":[],"call":[" connection_pool_list each "," connection_pool_list "," each_connection_pool each "," each_connection_pool ","ActiveRecord Base  current_role "," deprecation_for_pool_handling "," __method__ ","role nil? ","ActiveRecord Base  current_ActiveRecord Base  current_role  ","ActiveRecord Base  current_role  nil? "]}," ActiveRecord ConnectionAdapters ConnectionHandler discard_unowned_pools":{"type":"method","name":"discard_unowned_pools","children":[],"call":[]}," ActiveRecord ConnectionAdapters ConnectionHandler unowned_pool_finalizer":{"type":"method","name":"unowned_pool_finalizer","children":[],"call":[]}," ActiveRecord ConnectionAdapters ConnectionPool flush!":{"type":"method","name":"flush!","children":[],"call":[" flush "," reap "]}," ActiveRecord ConnectionAdapters ConnectionPool flush":{"type":"method","name":"flush","children":[],"call":["conn disconnect! ","idle_connections each ","@connections delete ","@available delete ","conn lease ","(send\n  (ivar :@connections) :select) each ","conn seconds_idle >= ","conn seconds_idle ","conn in_use? ! ","conn in_use? ","@connections select "," synchronize ","minimum_idle nil? "," discarded? "]}," ActiveRecord ConnectionAdapters ConnectionPool discard!":{"type":"method","name":"discard!","children":[],"call":["conn discard! ","@connections each ","@connections nil? "," synchronize "," discarded? "]}," ActiveRecord AttributeMethods attributes_with_values":{"type":"method","name":"attributes_with_values","children":[],"call":["attrs []= "," _read_attribute ","attribute_names each_with_object ","attribute_names index_with ","@attributes [] "]}," ActiveRecord AttributeMethods attributes_with_values_for_update":{"type":"method","name":"attributes_with_values_for_update","children":[],"call":[" attributes_with_values "," attributes_for_update "]}," ActiveRecord AttributeMethods attributes_with_values_for_create":{"type":"method","name":"attributes_with_values_for_create","children":[],"call":[" attributes_with_values "," attributes_for_create "]}," ActiveRecord AttributeMethods ClassMethods enforce_raw_sql_whitelist":{"type":"method","name":"enforce_raw_sql_whitelist","children":[],"call":[" raise ","Query method called with non-attribute argument(s):  + ","unexpected map join ","unexpected map ","ActiveSupport Deprecation  warn "," allow_unsafe_raw_sql == "," allow_unsafe_raw_sql ","unexpected none? ","whitelist match? ","arg to_s split all? ","arg to_s split ","arg to_s ","arg is_a? ","arg kind_of? ","args reject "]}," ActiveRecord AttributeMethods Write write_attribute_without_type_cast":{"type":"method","name":"write_attribute_without_type_cast","children":[],"call":["@attributes write_cast_value ","attr_name to_s "," sync_with_transaction_state ","attr_attr_name to_s  to_s "]}," ActiveRecord AttributeMethods Write _write_attribute":{"type":"method","name":"_write_attribute","children":[],"call":["@attributes write_from_user ","attr_name to_s "," sync_with_transaction_state "]}," ActiveRecord AttributeMethods Serialization ClassMethods type_incompatible_with_serialize?":{"type":"method","name":"type_incompatible_with_serialize?","children":[],"call":["class_name == ","type respond_to? ","type is_a? ","type == ","cast_type respond_to? ","coder == ","cast_type is_a? "]}," ActiveRecord AttributeMethods Serialization ColumnNotSerializableError initialize":{"type":"method","name":"initialize","children":[],"call":["(str \"            Column `\") strip_heredoc ","type class "]}," ActiveRecord AttributeMethods Dirty write_attribute_without_type_cast":{"type":"method","name":"write_attribute_without_type_cast","children":[],"call":[" clear_attribute_change "," class attribute_alias "," class "," class attribute_alias? ","attr_name to_s ","attr_ class attribute_alias  to_s ","attr_attr_name to_s  to_s "]}," ActiveRecord Associations ThroughAssociation through_association":{"type":"method","name":"through_association","children":[],"call":[" owner association "," through_reflection name "," through_reflection "," owner "]}," ActiveRecord Associations ThroughAssociation through_reflection":{"type":"method","name":"through_reflection","children":[],"call":["refl through_reflection ","refl through_reflection? "," reflection through_reflection "," reflection ","refl through_reflection  through_refl through_reflection ection "," reflection through_reflection  through_ reflection through_reflection ection ","refl through_reflection  through_refl through_reflection ection? "," reflection through_reflection  through_ reflection through_reflection ection? "," refl through_reflection ection through_refl through_reflection ection ","  reflection through_reflection ection through_ reflection through_reflection ection "," refl through_reflection ection ","  reflection through_reflection ection "]}," ActiveRecord Associations SingularAssociation scope_for_create":{"type":"method","name":"scope_for_create","children":[],"call":[" except! "," klass primary_key "," klass "," Array "]}," ActiveRecord Associations Preloader ThroughAssociation target_reflection_scope":{"type":"method","name":"target_reflection_scope","children":[],"call":[" reflection_scope "," reflection scope "," reflection "," reflection_scope merge "," preload_scope "]}," ActiveRecord Associations Preloader ThroughAssociation preload_index":{"type":"method","name":"preload_index","children":[],"call":["result []= ","@preloaded_records each_with_object with_index ","@preloaded_records each_with_object "," preloaded_records each_with_object with_index "," preloaded_records each_with_object "," preloaded_records "]}," ActiveRecord Associations Preloader ThroughAssociation run":{"type":"method","name":"run","children":[],"call":[" associate_records_to_owner ","result uniq! ","reflection_scope distinct_value "," preload_index [] "," preload_index ","result sort_by! ","reflection_scope order_values any? ","reflection_scope order_values ","result compact! ","association reset "," preload_scope ","association target ","record association "," source_reflection name "," source_reflection ","through_records flat_map ","owner association reset ","owner association "," through_reflection name "," through_reflection ","record [] == ","record [] "," reflection foreign_type "," reflection ","through_records select "," reflection options [] "," reflection options "," Array ","owner association target "," owners each "," owners ","preloaders flat_map ","preloader preload ","through_preloaders flat_map "," target_reflection_scope "," through_scope "," owners first association loaded? "," owners first association "," owners first ","middle_records each "," scope empty_scope? "," scope "," scope distinct_value "," scope order_values any? "," scope order_values ","record association target "," target_reflection_scope  distinct_value "," target_reflection_scope  order_values any? "," target_reflection_scope  order_values ","record association  reset ","association association target  ","record association  target ","record record association  "," Array  flat_map ","owner record association  reset ","owner record association  "," Array  select ","owner association association target  ","owner record association  target ","preloader preload  flat_map ","through_preloader preload  flat_map "," association target _reflection_scope "," target_ target_reflection_scope  ","  through_scope  "," owners first record association  loaded? "," owners first record association  ","through_preloaders flat_map  each ","record association association target  ","record record association  target "]}," ActiveRecord Associations Preloader Association associate_records_to_owner":{"type":"method","name":"associate_records_to_owner","children":[],"call":["association target= ","records first ","records empty? ","association target concat ","association target "," reflection collection? "," reflection ","association loaded! ","owner association "," reflection name "," loaded? ","owner association  target= ","owner association  target concat ","owner association  target ","owner association  loaded! ","owner owner association  "]}," ActiveRecord Associations JoinDependency make_join_constraints":{"type":"method","name":"make_join_constraints","children":[],"call":["joins concat "," make_join_constraints ","child children flat_map ","child children "," make_constraints ","child tables "," table_aliases_for ","join_root children flat_map ","join_root children "," make_constraints  concat ","child child tables  ","child  table_aliases_for  "]}," ActiveRecord Associations JoinDependency JoinBase initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Associations BelongsToAssociation target=":{"type":"method","name":"target=","children":[],"call":[" replace_keys "]}," ActiveRecord Associations Association scope_for_create":{"type":"method","name":"scope_for_create","children":[],"call":[" scope scope_for_create "," scope "]}," ActiveRecord Persistence _relation_for_itself":{"type":"method","name":"_relation_for_itself","children":[],"call":[" class unscoped where "," id "," class primary_key "," class "," class unscoped "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter without_sql_mode":{"type":"method","name":"without_sql_mode","children":[],"call":[" execute ","current_mode include? ","result first [] ","result first ","result first []  include? "," execute  first [] "," execute  first "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter insert_fixtures":{"type":"method","name":"insert_fixtures","children":[],"call":[" without_sql_mode "]}," ActiveRecord Transactions remember_new_record_before_last_commit":{"type":"method","name":"remember_new_record_before_last_commit","children":[],"call":["@_start_transaction_state [] "," _committed_already_called "]}," ActiveRecord Timestamp ClassMethods current_time_from_proper_timezone":{"type":"method","name":"current_time_from_proper_timezone","children":[],"call":["Time  now ","Time  now utc "," default_timezone == "," default_timezone ","ActiveRecord  default_timezone == ","ActiveRecord  default_timezone "," connection default_timezone == "," connection default_timezone "," connection "]}," ActiveRecord Timestamp ClassMethods timestamp_attributes_for_update":{"type":"method","name":"timestamp_attributes_for_update","children":[],"call":[" attribute_aliases [] "," attribute_aliases ","(str \"updated_at\") map! "]}," ActiveRecord Timestamp ClassMethods timestamp_attributes_for_create":{"type":"method","name":"timestamp_attributes_for_create","children":[],"call":[" attribute_aliases [] "," attribute_aliases ","(str \"created_at\") map! "]}," ActiveRecord Timestamp ClassMethods all_timestamp_attributes_in_model":{"type":"method","name":"all_timestamp_attributes_in_model","children":[],"call":[" timestamp_attributes_for_create_in_model + "," timestamp_attributes_for_update_in_model "," timestamp_attributes_for_create_in_model ","(send\n  (send nil :timestamp_attributes_for_create_in_model) :+\n  (send nil :timestamp_attributes_for_update_in_model)) freeze "]}," ActiveRecord Timestamp ClassMethods timestamp_attributes_for_update_in_model":{"type":"method","name":"timestamp_attributes_for_update_in_model","children":[],"call":[" column_names include? "," column_names "," timestamp_attributes_for_update select "," timestamp_attributes_for_update ","(send\n  (send nil :timestamp_attributes_for_update) :&\n  (send nil :column_names)) freeze "," timestamp_attributes_for_update & "]}," ActiveRecord Timestamp ClassMethods timestamp_attributes_for_create_in_model":{"type":"method","name":"timestamp_attributes_for_create_in_model","children":[],"call":[" column_names include? "," column_names "," timestamp_attributes_for_create select "," timestamp_attributes_for_create ","(send\n  (send nil :timestamp_attributes_for_create) :&\n  (send nil :column_names)) freeze "," timestamp_attributes_for_create & "]}," ActiveRecord Timestamp ClassMethods touch_attributes_with_time":{"type":"method","name":"touch_attributes_with_time","children":[],"call":["result []= ","attribute_names each_with_object "," current_time_from_proper_timezone ","names map "," timestamp_attributes_for_update_in_model ","attribute_names index_with "," timestamp_attributes_for_update_in_model  each_with_object "," timestamp_attributes_for_update_in_model  index_with "]}," ActiveRecord ConnectionAdapters MySQL DatabaseStatements with_multi_statements":{"type":"method","name":"with_multi_statements","children":[],"call":[" reconnect! ","@config []= ","@connection set_server_option "," supports_set_server_option? "," multi_statements_enabled? ","@config [] "]}," ActiveRecord ConnectionAdapters MySQL DatabaseStatements multi_statements_enabled?":{"type":"method","name":"multi_statements_enabled?","children":[],"call":["(send\n  (lvar :flags) :&\n  (const\n    (const\n      (const nil :Mysql2) :Client) :MULTI_STATEMENTS)) != ","flags & ","flags include? ","flags is_a? ","flags anybits? ","@config [] ","(send\n  (lvar :@config [] ) :&\n  (const\n    (const\n      (const nil :Mysql2) :Client) :MULTI_STATEMENTS)) != ","@config []  & ","@config []  include? ","@config []  is_a? ","@config []  anybits? "]}," ActiveRecord ConnectionAdapters MySQL DatabaseStatements supports_set_server_option?":{"type":"method","name":"supports_set_server_option?","children":[],"call":["@connection respond_to? "]}," ActiveRecord ConnectionAdapters TransactionState full_commit!":{"type":"method","name":"full_commit!","children":[],"call":[]}," ActiveRecord ConnectionAdapters TransactionState full_rollback!":{"type":"method","name":"full_rollback!","children":[],"call":["c rollback! ","@children each "]}," ActiveRecord ConnectionAdapters TransactionState fully_rolledback?":{"type":"method","name":"fully_rolledback?","children":[],"call":["@state == "]}," ActiveRecord ConnectionAdapters TransactionState fully_committed?":{"type":"method","name":"fully_committed?","children":[],"call":["@state == "]}," ActiveRecord Associations JoinDependency apply_column_aliases":{"type":"method","name":"apply_column_aliases","children":[],"call":["relation _select! "," aliases columns "," aliases "," lambda ","relation select_values empty? ","relation select_values "]}," ActiveRecord Associations JoinDependency JoinPart each_children":{"type":"method","name":"each_children","children":[],"call":["child each_children "," children each "," children "]}," ActiveRecord Associations JoinDependency JoinAssociation tables=":{"type":"method","name":"tables=","children":[],"call":["tables first "]}," ActiveRecord Associations HasOneAssociation _create_record":{"type":"method","name":"_create_record","children":[],"call":[" raise "," owner persisted? "," owner ","ActiveRecord RecordNotSaved  new "]}," ActiveRecord Associations BelongsToPolymorphicAssociation target_changed?":{"type":"method","name":"target_changed?","children":[],"call":[" owner saved_change_to_attribute? "," reflection foreign_type "," reflection "," owner "," owner attribute_changed? "]}," ActiveRecord Associations BelongsToAssociation primary_key":{"type":"method","name":"primary_key","children":[],"call":[" reflection association_primary_key ","record class "," reflection "]}," ActiveRecord Associations BelongsToAssociation target_changed?":{"type":"method","name":"target_changed?","children":[],"call":[" owner saved_change_to_attribute? "," reflection foreign_key "," reflection "," owner "," target "," foreign_key_present? ! "," foreign_key_present? "," owner attribute_changed? "]}," ActiveRecord Associations BelongsToAssociation inversed_from":{"type":"method","name":"inversed_from","children":[],"call":[" replace_keys "]}," ActiveRecord Associations Association inverse_association_for":{"type":"method","name":"inverse_association_for","children":[],"call":["record association "," inverse_reflection_for name "," inverse_reflection_for "," invertible_for? "]}," ActiveRecord Associations Association inversed_from":{"type":"method","name":"inversed_from","children":[],"call":["record ! ! ","record ! "," target= "," inversable? "]}," ActiveRecord Relation values_for_create":{"type":"method","name":"values_for_create","children":[],"call":["result []= ","result key? "," create_with_value stringify_keys each "," create_with_value stringify_keys "," create_with_value "," where_values_hash "," where_values_hash merge! "," where_values_hash  []= "," where_values_hash merge!  []= "," where_values_hash  key? "," where_values_hash merge!  key? "]}," ActiveRecord Delegation DelegateCache generate_relation_method":{"type":"method","name":"generate_relation_method","children":[],"call":[" klass public_send "," klass "," scoping "," generated_relation_methods send "," generated_relation_methods "," generated_relation_methods module_eval ","51 + ","(str \"\\\\A[a-zA-Z_]\\\\w*[!?]?\\\\z\") match? "," generated_relation_methods generate_method "," generated_relation_methods define_method "]}," ActiveRecord Delegation DelegateCache generated_relation_methods":{"type":"method","name":"generated_relation_methods","children":[],"call":[" private_constant "," const_set ","Module  new tap ","Module  new ","GeneratedRelationMethods  new tap ","GeneratedRelationMethods  new "]}," ActiveRecord Delegation DelegateCache include_relation_methods":{"type":"method","name":"include_relation_methods","children":[],"call":["delegate include "," generated_relation_methods "," superclass include_relation_methods "," superclass "," base_class == "," base_class "," base_class? "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements add_column_for_alter":{"type":"method","name":"add_column_for_alter","children":[],"call":[" change_column_comment ","options [] ","Proc  new ","options key? "]}," ActiveRecord ConnectionAdapters DatabaseLimits bind_params_length":{"type":"method","name":"bind_params_length","children":[],"call":[]}," ActiveRecord Associations HasManyThroughAssociation distribution":{"type":"method","name":"distribution","children":[],"call":["distribution [] ","array each_with_object ","Hash  new "]}," ActiveRecord Associations HasManyThroughAssociation mark_occurrence":{"type":"method","name":"mark_occurrence","children":[],"call":["distribution [] ","distribution [] > "]}," ActiveRecord Associations HasManyThroughAssociation intersection":{"type":"method","name":"intersection","children":[],"call":[" mark_occurrence ","a select "," distribution ","  distribution  "]}," ActiveRecord Associations HasManyThroughAssociation difference":{"type":"method","name":"difference","children":[],"call":[" mark_occurrence ","a reject "," distribution ","  distribution  "]}," ActiveRecord Associations HasManyAssociation intersection":{"type":"method","name":"intersection","children":[],"call":["a & "]}," ActiveRecord Associations HasManyAssociation difference":{"type":"method","name":"difference","children":[],"call":["a - "]}," ActiveRecord Associations Association set_inverse_instance_from_queries":{"type":"method","name":"set_inverse_instance_from_queries","children":[],"call":["inverse inversed_from_queries "," owner "," inverse_association_for "," inverse_association_for   inverse_association_for d_from_queries ","  inverse_association_for _association_for "]}," ActiveRecord QueryMethods table_name_matches?":{"type":"method","name":"table_name_matches?","children":[],"call":["(str \"(?:\\\\A|(?<!FROM)\\\\s)(?:\\\\b\") match? ","from to_s "," connection quote_table_name "," table name "," table "," connection ","Regexp  escape "," connection quote_Regexp  escape  "]}," ActiveRecord QueryMethods arel_column":{"type":"method","name":"arel_column","children":[],"call":[" arel_attribute "," table_name_matches? ","from ! "," klass columns_hash key? "," klass columns_hash "," klass "," from_clause value "," from_clause "," from_clause name "," klass attribute_alias "," klass attribute_alias? "," klass attribute_aliases [] "," klass attribute_aliases ","from == "," connection quote_table_name "," table name "," table "," connection "," lookup_reflection_from_join_dependencies "," predicate_builder resolve_arel_attribute "," predicate_builder ","field split ","field match? "," table [] "," lookup_table_klass_from_join_dependencies "," klass attribute_alias  split "," klass attribute_alias  match? "]}," ActiveRecord Relation Merger replace_from_clause?":{"type":"method","name":"replace_from_clause?","children":[],"call":[" relation klass base_class == "," other klass base_class "," other klass "," other "," relation klass base_class "," relation klass "," relation "," other from_clause empty? ! "," other from_clause empty? "," other from_clause "," relation from_clause empty? "," relation from_clause "]}," ActiveRecord Calculations distinct_select?":{"type":"method","name":"distinct_select?","children":[],"call":["(str \"\\\\bDISTINCT[\\\\s(]\") match? ","column_name is_a? "]}," ActiveRecord ConnectionAdapters SQLite3 Quoting quote_table_name":{"type":"method","name":"quote_table_name","children":[],"call":[" gsub freeze "," gsub ","@quoted_table_names [] "," class quoted_table_names [] "," class quoted_table_names "," class ","QUOTED_TABLE_NAMES  [] "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaCreation visit_ChangeColumnDefinition":{"type":"method","name":"visit_ChangeColumnDefinition","children":[],"call":["change_column_sql << ","options [] ","options key? "," quote_default_expression ","options [] nil? "," type_to_sql "," column_options ","(str \"ALTER COLUMN \") dup ","column sql_type "," quote_column_name ","o name ","column sql_type= ","column options ","column type ","o column ","(str \"ALTER COLUMN \") +@ ","(str \"ALTER COLUMN \") dup  << ","(str \"ALTER COLUMN \") +@  << ","change_o column _sql << "," column_options  [] "," column_options  key? "," column_options  [] nil? "," column_ column_options  "," o column _options ","o column  sql_type "," quote_o column _name ","o column  sql_type= ","column  column_options  ","o column  options ","o column  type ","o o column  "]}," ActiveRecord ConnectionAdapters ConnectionHandler create_owner_to_pool":{"type":"method","name":"create_owner_to_pool","children":[],"call":[]}," ActiveRecord QueryMethods order_column":{"type":"method","name":"order_column","children":[],"call":["Arel  sql "," connection quote_table_name "," connection "," arel_attribute "," group_values empty? ! "," group_values empty? "," group_values ","attr_name == "," arel_column "," table [] "," table "]}," ActiveRecord ConnectionAdapters ConnectionPool current_thread":{"type":"method","name":"current_thread","children":[],"call":["Thread  current ","ActiveSupport IsolatedExecutionState  context "]}," ActiveRecord ConnectionAdapters ConnectionPool connections":{"type":"method","name":"connections","children":[],"call":["@connections dup "," synchronize "]}," ActiveRecord AutosaveAssociation custom_validation_context?":{"type":"method","name":"custom_validation_context?","children":[],"call":["(sym :create) exclude? "," validation_context "]}," ActiveRecord AutosaveAssociation association_foreign_key_changed?":{"type":"method","name":"association_foreign_key_changed?","children":[],"call":["record [] != ","record [] ","reflection foreign_key ","record has_attribute? ","reflection through_reflection? ","record _read_attribute != ","record _read_attribute ","record _has_attribute? ","(send\n  (lvar :foreign_key) :map) != "," Array ","foreign_key map ","foreign_key all? ","reflection  Array  ","(send\n  (lvar : Array ) :map) != "," Array  map "," Array  all? "]}," ActiveRecord Associations JoinDependency JoinAssociation append_constraints":{"type":"method","name":"append_constraints","children":[],"call":["join right expr children concat ","join right expr children ","join right expr ","join right ","join left= ","Arel  sql "," base_klass connection visitor compile "," base_klass connection visitor "," base_klass connection "," base_klass "," table create_and ","constraints unshift ","join left "," table ","join is_a? ","right expr= ","Arel Nodes And  new ","right expr ","join join right  expr children concat ","join join right  expr children ","join join right  expr ","join join right  ","join right  expr= ","join right  expr "]}," ActiveRecord Associations JoinDependency JoinAssociation fetch_arel_attribute":{"type":"method","name":"fetch_arel_attribute","children":[],"call":["value right ","value left ","value left is_a? "]}," ActiveRecord Coders YAMLColumn yaml_load":{"type":"method","name":"yaml_load","children":[],"call":["YAML  load ","YAML  unsafe_load ","YAML  respond_to? ","YAML  safe_load ","ActiveRecord Base  yaml_column_permitted_classes ","ActiveRecord Base  use_yaml_unsafe_load ! ","ActiveRecord Base  use_yaml_unsafe_load ","YAML  method parameters include? ","YAML  method parameters ","YAML  method ","ActiveRecord  yaml_column_permitted_classes ","ActiveRecord  use_yaml_unsafe_load ! ","ActiveRecord  use_yaml_unsafe_load "]}," ActiveRecord Generators Migration configured_migrate_path":{"type":"method","name":"configured_migrate_path","children":[],"call":["ActiveRecord Base  configurations configs_for ","Rails  env ","ActiveRecord Base  configurations "," options [] "," options "," Array first "," Array ","ActiveRecord Base  ActiveRecord Base  configurations configs_for urations ActiveRecord Base  configurations configs_for s_for ","ActiveRecord Base  ActiveRecord Base  configurations configs_for urations "]}," ActiveRecord Generators Migration default_migrate_path":{"type":"method","name":"default_migrate_path","children":[],"call":["Rails  application config paths [] to_ary first ","Rails  application config paths [] to_ary ","Rails  application config paths [] ","Rails  application config paths ","Rails  application config ","Rails  application "]}," Arel fetch_attribute":{"type":"method","name":"fetch_attribute","children":[],"call":[]}," Arel arel_node?":{"type":"method","name":"arel_node?","children":[],"call":[]}," Arel star":{"type":"method","name":"star","children":[],"call":[]}," Arel sql":{"type":"method","name":"sql","children":[],"call":[]}," Arel WindowPredications over":{"type":"method","name":"over","children":[],"call":["Nodes Over  new "]}," Arel Visitors WhereSql visit_Arel_Nodes_SelectCore":{"type":"method","name":"visit_Arel_Nodes_SelectCore","children":[],"call":[" inject_join ","Nodes SqlLiteral  new ","@inner_visitor accept value ","@inner_visitor accept ","collector class new ","collector class ","o wheres map ","o wheres ","collector << "]}," Arel Visitors WhereSql initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Arel Visitors Visitor visit":{"type":"method","name":"visit","children":[],"call":[" dispatch []= "," dispatch [] "," dispatch ","object class "," raise "," respond_to? ","object class ancestors find ","object class ancestors "," send "]}," Arel Visitors Visitor get_dispatch_cache":{"type":"method","name":"get_dispatch_cache","children":[],"call":[" class dispatch_cache "," class "]}," Arel Visitors Visitor dispatch_cache":{"type":"method","name":"dispatch_cache","children":[],"call":[]}," Arel Visitors Visitor accept":{"type":"method","name":"accept","children":[],"call":[" visit "]}," Arel Visitors Visitor initialize":{"type":"method","name":"initialize","children":[],"call":[" get_dispatch_cache "]}," Arel Visitors ToSql is_distinct_from":{"type":"method","name":"is_distinct_from","children":[],"call":["collector << "," visit ","o right ","o left "," visit  << "]}," Arel Visitors ToSql aggregate":{"type":"method","name":"aggregate","children":[],"call":[" visit ","o alias ","collector << "," inject_join << "," inject_join ","o expressions ","o distinct "," inject_join <<  << "]}," Arel Visitors ToSql infix_value_with_paren":{"type":"method","name":"infix_value_with_paren","children":[],"call":["collector << "," visit ","o right "," infix_value_with_paren ","o right class == ","o class ","o right class ","o left ","o left class == ","o left class "," visit  << "," infix_value_with_paren  << "]}," Arel Visitors ToSql infix_value":{"type":"method","name":"infix_value","children":[],"call":[" visit ","o right ","collector << ","o left "," visit  << "]}," Arel Visitors ToSql build_subselect":{"type":"method","name":"build_subselect","children":[],"call":["stmt orders= ","o orders ","stmt offset= ","o offset ","stmt limit= ","o limit ","core projections= ","core wheres= ","o wheres ","core froms= ","o relation ","stmt cores first ","stmt cores ","Nodes SelectStatement  new ","core havings= ","o havings ","o havings empty? ","core groups= ","o groups ","o groups empty? ","Nodes SelectStatement  new  orders= ","Nodes SelectStatement  new  offset= ","Nodes SelectStatement  new  limit= ","stmt cores first  projections= ","stmt cores first  wheres= ","stmt cores first  froms= ","stmt stmt cores first s first ","Nodes SelectStatement  new  cores first ","stmt stmt cores first s ","Nodes SelectStatement  new  cores ","stmt cores first  havings= ","stmt cores first  groups= "]}," Arel Visitors ToSql prepare_update_statement":{"type":"method","name":"prepare_update_statement","children":[],"call":["stmt relation= ","o relation left ","o relation "," has_join_sources? ","stmt wheres= ","Nodes In  new "," build_subselect ","o key ","stmt orders= ","stmt offset= ","stmt limit= ","o clone "," has_limit_or_offset_or_orders? ","stmt havings= ","o havings ","o havings empty? ","stmt groups= ","o groups ","o groups empty? ","o clone  relation= ","o clone  wheres= ","o clone  orders= ","o clone  offset= ","o clone  limit= ","o clone  havings= ","o clone  groups= "]}," Arel Visitors ToSql has_limit_or_offset_or_orders?":{"type":"method","name":"has_limit_or_offset_or_orders?","children":[],"call":["o orders empty? ! ","o orders empty? ","o orders ","o offset ","o limit "]}," Arel Visitors ToSql has_join_sources?":{"type":"method","name":"has_join_sources?","children":[],"call":["o relation right empty? ! ","o relation right empty? ","o relation right ","o relation ","o relation is_a? "]}," Arel Visitors ToSql unboundable?":{"type":"method","name":"unboundable?","children":[],"call":["value unboundable? ","value respond_to? "]}," Arel Visitors ToSql inject_join":{"type":"method","name":"inject_join","children":[],"call":[" visit ","collector << ","i == ","list each_with_index "," visit << ","list each_with_index inject ","list length - ","list length "," visit  << ","list list length - gth - ","list list length - gth "]}," Arel Visitors ToSql maybe_visit":{"type":"method","name":"maybe_visit","children":[],"call":[" visit ","collector << "]}," Arel Visitors ToSql collect_optimizer_hints":{"type":"method","name":"collect_optimizer_hints","children":[],"call":[" maybe_visit ","o optimizer_hints "]}," Arel Visitors ToSql sanitize_as_sql_comment":{"type":"method","name":"sanitize_as_sql_comment","children":[],"call":["@connection sanitize_as_sql_comment ","Arel Nodes SqlLiteral  === "]}," Arel Visitors ToSql quote_column_name":{"type":"method","name":"quote_column_name","children":[],"call":["@connection quote_column_name ","Arel Nodes SqlLiteral  === "]}," Arel Visitors ToSql quote_table_name":{"type":"method","name":"quote_table_name","children":[],"call":["@connection quote_table_name ","Arel Nodes SqlLiteral  === "]}," Arel Visitors ToSql quote":{"type":"method","name":"quote","children":[],"call":["@connection quote ","Arel Nodes SqlLiteral  === "]}," Arel Visitors ToSql visit_Array":{"type":"method","name":"visit_Array","children":[],"call":[" inject_join "]}," Arel Visitors ToSql visit_Arel_Nodes_UnaryOperation":{"type":"method","name":"visit_Arel_Nodes_UnaryOperation","children":[],"call":[" visit ","o expr ","collector << ","o operator "]}," Arel Visitors ToSql visit_Arel_Nodes_InfixOperation":{"type":"method","name":"visit_Arel_Nodes_InfixOperation","children":[],"call":[" visit ","o right ","collector << ","o operator ","o left "," visit  << "]}," Arel Visitors ToSql unsupported":{"type":"method","name":"unsupported","children":[],"call":[" raise ","UnsupportedVisitError  new "]}," Arel Visitors ToSql quoted":{"type":"method","name":"quoted","children":[],"call":[" quote ","a type_cast_for_database ","a able_to_type_cast? "]}," Arel Visitors ToSql visit_Arel_Nodes_BindParam":{"type":"method","name":"visit_Arel_Nodes_BindParam","children":[],"call":["collector add_bind ","o value "," bind_block "]}," Arel Visitors ToSql literal":{"type":"method","name":"literal","children":[],"call":["collector << ","o to_s "]}," Arel Visitors ToSql visit_Arel_Attributes_Attribute":{"type":"method","name":"visit_Arel_Attributes_Attribute","children":[],"call":["collector << << << "," quote_column_name ","o name ","collector << << ","collector << "," quote_table_name ","o relation name ","o relation ","o relation table_alias "]}," Arel Visitors ToSql visit_Arel_Nodes_UnqualifiedColumn":{"type":"method","name":"visit_Arel_Nodes_UnqualifiedColumn","children":[],"call":["collector << "," quote_column_name ","o name "]}," Arel Visitors ToSql visit_Arel_Nodes_Else":{"type":"method","name":"visit_Arel_Nodes_Else","children":[],"call":[" visit ","o expr ","collector << "]}," Arel Visitors ToSql visit_Arel_Nodes_When":{"type":"method","name":"visit_Arel_Nodes_When","children":[],"call":[" visit ","o right ","collector << ","o left "]}," Arel Visitors ToSql visit_Arel_Nodes_Case":{"type":"method","name":"visit_Arel_Nodes_Case","children":[],"call":["collector << "," visit ","o default ","o conditions each ","o conditions ","o case "]}," Arel Visitors ToSql visit_Arel_Nodes_As":{"type":"method","name":"visit_Arel_Nodes_As","children":[],"call":[" visit ","o right ","collector << ","o left "," visit  << "]}," Arel Visitors ToSql visit_Arel_Nodes_NotEqual":{"type":"method","name":"visit_Arel_Nodes_NotEqual","children":[],"call":[" visit ","collector << ","right nil? ","o left "," unboundable? ","o right "," visit  << ","o right  nil? ","o o right  "]}," Arel Visitors ToSql visit_Arel_Nodes_IsDistinctFrom":{"type":"method","name":"visit_Arel_Nodes_IsDistinctFrom","children":[],"call":["collector << "," is_distinct_from "," visit ","o left ","o right nil? ","o right "," is_distinct_from  << "," visit  << "]}," Arel Visitors ToSql visit_Arel_Nodes_IsNotDistinctFrom":{"type":"method","name":"visit_Arel_Nodes_IsNotDistinctFrom","children":[],"call":["collector << "," is_distinct_from "," visit ","o left ","o right nil? ","o right "," is_distinct_from  << "," visit  << "]}," Arel Visitors ToSql visit_Arel_Nodes_Equality":{"type":"method","name":"visit_Arel_Nodes_Equality","children":[],"call":[" visit ","collector << ","right nil? ","o left "," unboundable? ","o right "," visit  << ","o right  nil? ","o o right  "]}," Arel Visitors ToSql visit_Arel_Nodes_Assignment":{"type":"method","name":"visit_Arel_Nodes_Assignment","children":[],"call":["collector << "," quote to_s "," quote ","o right "," visit ","o left "," visit  << "]}," Arel Visitors ToSql visit_Arel_Nodes_Or":{"type":"method","name":"visit_Arel_Nodes_Or","children":[],"call":[" visit ","o right ","collector << ","o left ","stack empty? ","stack push ","o is_a? ","stack pop ","stack pop  right "," visit  << ","cstack pop llectstack pop r << ","stack pop  left ","stack pop  is_a? ","stack pstack pop p "]}," Arel Visitors ToSql visit_Arel_Nodes_And":{"type":"method","name":"visit_Arel_Nodes_And","children":[],"call":[" inject_join ","o children "]}," Arel Visitors ToSql collect_not_in_clause":{"type":"method","name":"collect_not_in_clause","children":[],"call":[" visit << "," visit ","collector << "," visit  << "]}," Arel Visitors ToSql visit_Arel_Nodes_NotIn":{"type":"method","name":"visit_Arel_Nodes_NotIn","children":[],"call":[" collect_not_in_clause ","o left ","collector << ","i == ","o right each_slice each_with_index ","o right each_slice ","o right ","o right length <= ","o right length ","in_clause_length ! ","@connection in_clause_length ","o right empty? "," unboundable? ","o right delete_if ","Array  === "," visit ","o right empty? ! "," visit << ","values empty? ","values delete_if ","collector preparable= "," visit  << ","@connection in_clause_length  ! ","@connection @connection in_clause_length  "," visit  preparable= "]}," Arel Visitors ToSql collect_in_clause":{"type":"method","name":"collect_in_clause","children":[],"call":[" visit << "," visit ","collector << "," visit  << "]}," Arel Visitors ToSql visit_Arel_Nodes_In":{"type":"method","name":"visit_Arel_Nodes_In","children":[],"call":["collector << "," collect_in_clause ","o left ","i == ","o right each_slice each_with_index ","o right each_slice ","o right ","o right length <= ","o right length ","in_clause_length ! ","@connection in_clause_length ","o right empty? "," unboundable? ","o right delete_if ","Array  === "," visit << "," visit ","o right empty? ! ","values empty? ","values delete_if ","collector preparable= "," visit  << ","@connection in_clause_length  ! ","@connection @connection in_clause_length  "," visit  preparable= "]}," Arel Visitors ToSql visit_Arel_Table":{"type":"method","name":"visit_Arel_Table","children":[],"call":["collector << "," quote_table_name ","o name ","collector << << << ","o table_alias ","collector << << "," visit ","Arel Nodes Node  === "]}," Arel Visitors ToSql visit_Arel_Nodes_Not":{"type":"method","name":"visit_Arel_Nodes_Not","children":[],"call":[" visit << "," visit ","o expr ","collector << "]}," Arel Visitors ToSql visit_Arel_Nodes_On":{"type":"method","name":"visit_Arel_Nodes_On","children":[],"call":[" visit ","o expr ","collector << "]}," Arel Visitors ToSql visit_Arel_Nodes_InnerJoin":{"type":"method","name":"visit_Arel_Nodes_InnerJoin","children":[],"call":[" visit ","o right ","collector << ","o left "," visit  << "]}," Arel Visitors ToSql visit_Arel_Nodes_RightOuterJoin":{"type":"method","name":"visit_Arel_Nodes_RightOuterJoin","children":[],"call":[" visit ","o right ","collector << ","o left "," visit  << "]}," Arel Visitors ToSql visit_Arel_Nodes_OuterJoin":{"type":"method","name":"visit_Arel_Nodes_OuterJoin","children":[],"call":[" visit ","o right ","collector << ","o left "," visit  << "]}," Arel Visitors ToSql visit_Arel_Nodes_FullOuterJoin":{"type":"method","name":"visit_Arel_Nodes_FullOuterJoin","children":[],"call":[" visit ","o right ","collector << ","o left "," visit  << "]}," Arel Visitors ToSql visit_Arel_Nodes_StringJoin":{"type":"method","name":"visit_Arel_Nodes_StringJoin","children":[],"call":[" visit ","o left "]}," Arel Visitors ToSql visit_Arel_Nodes_NotRegexp":{"type":"method","name":"visit_Arel_Nodes_NotRegexp","children":[],"call":[" raise "]}," Arel Visitors ToSql visit_Arel_Nodes_Regexp":{"type":"method","name":"visit_Arel_Nodes_Regexp","children":[],"call":[" raise "]}," Arel Visitors ToSql visit_Arel_Nodes_JoinSource":{"type":"method","name":"visit_Arel_Nodes_JoinSource","children":[],"call":[" inject_join ","o right ","collector << ","o left ","o right any? "," visit "," inject_join  << "," visit  << "]}," Arel Visitors ToSql visit_Arel_Nodes_DoesNotMatch":{"type":"method","name":"visit_Arel_Nodes_DoesNotMatch","children":[],"call":[" visit ","o escape ","collector << ","o right ","o left "," visit  << "]}," Arel Visitors ToSql visit_Arel_Nodes_Matches":{"type":"method","name":"visit_Arel_Nodes_Matches","children":[],"call":[" visit ","o escape ","collector << ","o right ","o left "," visit  << "]}," Arel Visitors ToSql visit_Arel_Nodes_LessThan":{"type":"method","name":"visit_Arel_Nodes_LessThan","children":[],"call":[" visit ","o right ","collector << ","o left "," unboundable? "," visit  << "]}," Arel Visitors ToSql visit_Arel_Nodes_LessThanOrEqual":{"type":"method","name":"visit_Arel_Nodes_LessThanOrEqual","children":[],"call":[" visit ","o right ","collector << ","o left "," unboundable? "," visit  << "]}," Arel Visitors ToSql visit_Arel_Nodes_GreaterThan":{"type":"method","name":"visit_Arel_Nodes_GreaterThan","children":[],"call":[" visit ","o right ","collector << ","o left "," unboundable? "," visit  << "]}," Arel Visitors ToSql visit_Arel_Nodes_GreaterThanOrEqual":{"type":"method","name":"visit_Arel_Nodes_GreaterThanOrEqual","children":[],"call":[" visit ","o right ","collector << ","o left "," unboundable? "," visit  << "]}," Arel Visitors ToSql visit_Arel_Nodes_Between":{"type":"method","name":"visit_Arel_Nodes_Between","children":[],"call":[" visit ","o right ","collector << ","o left "," visit  << "]}," Arel Visitors ToSql visit_Arel_Nodes_TableAlias":{"type":"method","name":"visit_Arel_Nodes_TableAlias","children":[],"call":["collector << "," quote_table_name ","o name "," visit ","o relation "," visit  << "]}," Arel Visitors ToSql visit_Arel_Nodes_Avg":{"type":"method","name":"visit_Arel_Nodes_Avg","children":[],"call":[" aggregate "]}," Arel Visitors ToSql visit_Arel_Nodes_Min":{"type":"method","name":"visit_Arel_Nodes_Min","children":[],"call":[" aggregate "]}," Arel Visitors ToSql visit_Arel_Nodes_Max":{"type":"method","name":"visit_Arel_Nodes_Max","children":[],"call":[" aggregate "]}," Arel Visitors ToSql visit_Arel_Nodes_Sum":{"type":"method","name":"visit_Arel_Nodes_Sum","children":[],"call":[" aggregate "]}," Arel Visitors ToSql visit_Arel_Nodes_Count":{"type":"method","name":"visit_Arel_Nodes_Count","children":[],"call":[" aggregate "]}," Arel Visitors ToSql visit_Arel_Nodes_Extract":{"type":"method","name":"visit_Arel_Nodes_Extract","children":[],"call":[" visit << "," visit ","o expr ","collector << ","o field to_s upcase ","o field to_s ","o field "]}," Arel Visitors ToSql visit_Arel_Nodes_NamedFunction":{"type":"method","name":"visit_Arel_Nodes_NamedFunction","children":[],"call":[" visit ","o alias ","collector << "," inject_join << "," inject_join ","o expressions ","o distinct ","o name "," inject_join <<  << "]}," Arel Visitors ToSql visit_Arel_Nodes_Group":{"type":"method","name":"visit_Arel_Nodes_Group","children":[],"call":[" visit ","o expr "]}," Arel Visitors ToSql visit_Arel_Nodes_Descending":{"type":"method","name":"visit_Arel_Nodes_Descending","children":[],"call":[" visit << "," visit ","o expr "]}," Arel Visitors ToSql visit_Arel_Nodes_Ascending":{"type":"method","name":"visit_Arel_Nodes_Ascending","children":[],"call":[" visit << "," visit ","o expr "]}," Arel Visitors ToSql visit_Arel_SelectManager":{"type":"method","name":"visit_Arel_SelectManager","children":[],"call":[" visit << "," visit ","o ast ","collector << "]}," Arel Visitors ToSql visit_Arel_Nodes_Grouping":{"type":"method","name":"visit_Arel_Nodes_Grouping","children":[],"call":[" visit << "," visit ","o expr ","collector << ","o expr is_a? "]}," Arel Visitors ToSql visit_Arel_Nodes_Lock":{"type":"method","name":"visit_Arel_Nodes_Lock","children":[],"call":[" visit ","o expr "]}," Arel Visitors ToSql visit_Arel_Nodes_Limit":{"type":"method","name":"visit_Arel_Nodes_Limit","children":[],"call":[" visit ","o expr ","collector << "]}," Arel Visitors ToSql visit_Arel_Nodes_Offset":{"type":"method","name":"visit_Arel_Nodes_Offset","children":[],"call":[" visit ","o expr ","collector << "]}," Arel Visitors ToSql visit_Arel_Nodes_Over":{"type":"method","name":"visit_Arel_Nodes_Over","children":[],"call":[" infix_value "," visit << "," quote_column_name ","o right to_s ","o right "," visit ","o left "]}," Arel Visitors ToSql visit_Arel_Nodes_CurrentRow":{"type":"method","name":"visit_Arel_Nodes_CurrentRow","children":[],"call":["collector << "]}," Arel Visitors ToSql visit_Arel_Nodes_Following":{"type":"method","name":"visit_Arel_Nodes_Following","children":[],"call":["collector << "," visit ","o expr ","collector <<  << "," visit  << "]}," Arel Visitors ToSql visit_Arel_Nodes_Preceding":{"type":"method","name":"visit_Arel_Nodes_Preceding","children":[],"call":["collector << "," visit ","o expr ","collector <<  << "," visit  << "]}," Arel Visitors ToSql visit_Arel_Nodes_Range":{"type":"method","name":"visit_Arel_Nodes_Range","children":[],"call":["collector << "," visit ","o expr "]}," Arel Visitors ToSql visit_Arel_Nodes_Rows":{"type":"method","name":"visit_Arel_Nodes_Rows","children":[],"call":["collector << "," visit ","o expr "]}," Arel Visitors ToSql visit_Arel_Nodes_Window":{"type":"method","name":"visit_Arel_Nodes_Window","children":[],"call":["collector << "," visit ","o framing ","o orders any? ","o orders ","o partitions any? ","o partitions "," inject_join "," collect_nodes_for "," visit  << "," inject_join  << "]}," Arel Visitors ToSql visit_Arel_Nodes_NamedWindow":{"type":"method","name":"visit_Arel_Nodes_NamedWindow","children":[],"call":[" visit_Arel_Nodes_Window ","collector << "," quote_column_name ","o name "]}," Arel Visitors ToSql visit_Arel_Nodes_Except":{"type":"method","name":"visit_Arel_Nodes_Except","children":[],"call":[" infix_value << "," infix_value ","collector << "]}," Arel Visitors ToSql visit_Arel_Nodes_Intersect":{"type":"method","name":"visit_Arel_Nodes_Intersect","children":[],"call":[" infix_value << "," infix_value ","collector << "]}," Arel Visitors ToSql visit_Arel_Nodes_UnionAll":{"type":"method","name":"visit_Arel_Nodes_UnionAll","children":[],"call":[" infix_value_with_paren "]}," Arel Visitors ToSql visit_Arel_Nodes_Union":{"type":"method","name":"visit_Arel_Nodes_Union","children":[],"call":[" infix_value_with_paren "]}," Arel Visitors ToSql visit_Arel_Nodes_WithRecursive":{"type":"method","name":"visit_Arel_Nodes_WithRecursive","children":[],"call":[" inject_join ","o children ","collector << "," collect_ctes "]}," Arel Visitors ToSql visit_Arel_Nodes_With":{"type":"method","name":"visit_Arel_Nodes_With","children":[],"call":[" inject_join ","o children ","collector << "," collect_ctes "]}," Arel Visitors ToSql visit_Arel_Nodes_DistinctOn":{"type":"method","name":"visit_Arel_Nodes_DistinctOn","children":[],"call":[" raise "]}," Arel Visitors ToSql visit_Arel_Nodes_Distinct":{"type":"method","name":"visit_Arel_Nodes_Distinct","children":[],"call":["collector << "]}," Arel Visitors ToSql visit_Arel_Nodes_Bin":{"type":"method","name":"visit_Arel_Nodes_Bin","children":[],"call":[" visit ","o expr "]}," Arel Visitors ToSql collect_nodes_for":{"type":"method","name":"collect_nodes_for","children":[],"call":[" inject_join ","collector << ","nodes empty? "]}," Arel Visitors ToSql visit_Arel_Nodes_Comment":{"type":"method","name":"visit_Arel_Nodes_Comment","children":[],"call":["collector << ","(send\n  (send\n    (lvar :o) :values) :map) join "," sanitize_as_sql_comment ","o values map ","o values "]}," Arel Visitors ToSql visit_Arel_Nodes_OptimizerHints":{"type":"method","name":"visit_Arel_Nodes_OptimizerHints","children":[],"call":["collector << ","(send\n  (send\n    (lvar :o) :expr) :map) join "," sanitize_as_sql_comment ","o expr map ","o expr "]}," Arel Visitors ToSql visit_Arel_Nodes_SelectCore":{"type":"method","name":"visit_Arel_Nodes_SelectCore","children":[],"call":[" maybe_visit ","o comment "," collect_nodes_for ","o windows ","o havings ","o groups ","o wheres "," visit ","o source ","collector << ","o source empty? ! ","o source empty? ","o projections ","o set_quantifier "," collect_optimizer_hints "," visit  << "," maybe_visit  << "," collect_optimizer_hints  << "]}," Arel Visitors ToSql visit_Arel_Nodes_SelectOptions":{"type":"method","name":"visit_Arel_Nodes_SelectOptions","children":[],"call":[" maybe_visit ","o lock ","o offset ","o limit "]}," Arel Visitors ToSql visit_Arel_Nodes_SelectStatement":{"type":"method","name":"visit_Arel_Nodes_SelectStatement","children":[],"call":[" visit_Arel_Nodes_SelectOptions "," visit ","collector << ","i == ","o orders each_with_index ","o orders ","o orders empty? "," visit_Arel_Nodes_SelectCore ","o cores inject ","o cores ","o with ","len == ","o orders length - ","o orders length "," visit  << ","o orders length -  == ","o orders o orders length - gth - ","o orders o orders length - gth "]}," Arel Visitors ToSql visit_Arel_Nodes_ValuesList":{"type":"method","name":"visit_Arel_Nodes_ValuesList","children":[],"call":["collector << "," quote to_s "," quote "," visit ","k == ","row each_with_index ","i == ","o rows each_with_index ","o rows ","row length - ","row length ","o rows length - ","o rows length "," visit  << ","row o rows length - gth - ","row o rows length - gth ","o rows o rows length - gth - ","o rows o rows length - gth "]}," Arel Visitors ToSql visit_Arel_Nodes_False":{"type":"method","name":"visit_Arel_Nodes_False","children":[],"call":["collector << "]}," Arel Visitors ToSql visit_Arel_Nodes_True":{"type":"method","name":"visit_Arel_Nodes_True","children":[],"call":["collector << "]}," Arel Visitors ToSql visit_Arel_Nodes_Quoted":{"type":"method","name":"visit_Arel_Nodes_Quoted","children":[],"call":["collector << "," quoted to_s "," quoted ","o expr "]}," Arel Visitors ToSql visit_Arel_Nodes_Casted":{"type":"method","name":"visit_Arel_Nodes_Casted","children":[],"call":["collector << "," quoted to_s "," quoted ","o attribute ","o val "," quote to_s "," quote ","o value_for_database "]}," Arel Visitors ToSql visit_Arel_Nodes_Exists":{"type":"method","name":"visit_Arel_Nodes_Exists","children":[],"call":[" visit ","o alias ","collector << "," visit << ","o expressions "," visit <<  << "]}," Arel Visitors ToSql visit_Arel_Nodes_InsertStatement":{"type":"method","name":"visit_Arel_Nodes_InsertStatement","children":[],"call":[" maybe_visit ","o select ","o values ","collector << "," quote_column_name ","x name ","i == ","o columns each_with_index ","o columns ","o columns empty? "," visit ","o relation ","(send\n  (send\n    (lvar :o) :columns) :map) join ","o columns map ","o columns any? "," visit  << "]}," Arel Visitors ToSql visit_Arel_Nodes_UpdateStatement":{"type":"method","name":"visit_Arel_Nodes_UpdateStatement","children":[],"call":[" maybe_visit ","o limit "," collect_nodes_for ","o orders ","o wheres ","o values "," visit ","o relation ","collector << "," prepare_update_statement "," prepare_update_statement  limit "," c prepare_update_statement llect_n prepare_update_statement des_f prepare_update_statement r "," prepare_update_statement   prepare_update_statement rders "," prepare_update_statement  wheres "," prepare_update_statement  values "," prepare_update_statement  relati prepare_update_statement n "," visit  << ","c prepare_update_statement llect prepare_update_statement r << "]}," Arel Visitors ToSql visit_Arel_Nodes_DeleteStatement":{"type":"method","name":"visit_Arel_Nodes_DeleteStatement","children":[],"call":[" maybe_visit ","o limit "," collect_nodes_for ","o orders ","o wheres "," visit ","o relation ","collector << ","o relation left "," has_join_sources? "," prepare_delete_statement "," prepare_delete_statement  limit "," c prepare_delete_statement llect_n prepare_delete_statement des_f prepare_delete_statement r "," prepare_delete_statement   prepare_delete_statement rders "," prepare_delete_statement  wheres "," prepare_delete_statement  relati prepare_delete_statement n "," visit  << ","c prepare_delete_statement llect prepare_delete_statement r << "," prepare_delete_statement  relati prepare_delete_statement n left "," has_j prepare_delete_statement in_s prepare_delete_statement urces? "]}," Arel Visitors ToSql compile":{"type":"method","name":"compile","children":[],"call":[" accept value "," accept "]}," Arel Visitors ToSql initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Arel Visitors UnsupportedVisitError initialize":{"type":"method","name":"initialize","children":[],"call":["object class name ","object class "]}," Arel Visitors SQLite visit_Arel_Nodes_IsDistinctFrom":{"type":"method","name":"visit_Arel_Nodes_IsDistinctFrom","children":[],"call":[" visit ","o right ","collector << ","o left "," visit  << "]}," Arel Visitors SQLite visit_Arel_Nodes_IsNotDistinctFrom":{"type":"method","name":"visit_Arel_Nodes_IsNotDistinctFrom","children":[],"call":[" visit ","o right ","collector << ","o left "," visit  << "]}," Arel Visitors SQLite visit_Arel_Nodes_False":{"type":"method","name":"visit_Arel_Nodes_False","children":[],"call":["collector << "]}," Arel Visitors SQLite visit_Arel_Nodes_True":{"type":"method","name":"visit_Arel_Nodes_True","children":[],"call":["collector << "]}," Arel Visitors SQLite visit_Arel_Nodes_SelectStatement":{"type":"method","name":"visit_Arel_Nodes_SelectStatement","children":[],"call":["o limit= ","Arel Nodes Limit  new ","o limit ! ","o limit ","o offset "]}," Arel Visitors SQLite visit_Arel_Nodes_Lock":{"type":"method","name":"visit_Arel_Nodes_Lock","children":[],"call":[]}," Arel Visitors PostgreSQL grouping_array_or_grouping_element":{"type":"method","name":"grouping_array_or_grouping_element","children":[],"call":[" visit ","o expr ","collector << ","o expr is_a? "]}," Arel Visitors PostgreSQL grouping_parentheses":{"type":"method","name":"grouping_parentheses","children":[],"call":[" visit ","o expr ","collector << ","o expr is_a? "]}," Arel Visitors PostgreSQL visit_Arel_Nodes_IsDistinctFrom":{"type":"method","name":"visit_Arel_Nodes_IsDistinctFrom","children":[],"call":[" visit ","o right ","collector << ","o left "," visit  << "]}," Arel Visitors PostgreSQL visit_Arel_Nodes_IsNotDistinctFrom":{"type":"method","name":"visit_Arel_Nodes_IsNotDistinctFrom","children":[],"call":[" visit ","o right ","collector << ","o left "," visit  << "]}," Arel Visitors PostgreSQL visit_Arel_Nodes_Lateral":{"type":"method","name":"visit_Arel_Nodes_Lateral","children":[],"call":[" grouping_parentheses ","collector << "]}," Arel Visitors PostgreSQL visit_Arel_Nodes_GroupingSet":{"type":"method","name":"visit_Arel_Nodes_GroupingSet","children":[],"call":[" grouping_array_or_grouping_element ","collector << "]}," Arel Visitors PostgreSQL visit_Arel_Nodes_RollUp":{"type":"method","name":"visit_Arel_Nodes_RollUp","children":[],"call":[" grouping_array_or_grouping_element ","collector << "]}," Arel Visitors PostgreSQL visit_Arel_Nodes_Cube":{"type":"method","name":"visit_Arel_Nodes_Cube","children":[],"call":[" grouping_array_or_grouping_element ","collector << "]}," Arel Visitors PostgreSQL visit_Arel_Nodes_GroupingElement":{"type":"method","name":"visit_Arel_Nodes_GroupingElement","children":[],"call":[" visit << "," visit ","o expr ","collector << "]}," Arel Visitors PostgreSQL visit_Arel_Nodes_BindParam":{"type":"method","name":"visit_Arel_Nodes_BindParam","children":[],"call":["collector add_bind ","o value "]}," Arel Visitors PostgreSQL visit_Arel_Nodes_DistinctOn":{"type":"method","name":"visit_Arel_Nodes_DistinctOn","children":[],"call":[" visit << "," visit ","o expr ","collector << "]}," Arel Visitors PostgreSQL visit_Arel_Nodes_NotRegexp":{"type":"method","name":"visit_Arel_Nodes_NotRegexp","children":[],"call":[" infix_value ","o case_sensitive "]}," Arel Visitors PostgreSQL visit_Arel_Nodes_Regexp":{"type":"method","name":"visit_Arel_Nodes_Regexp","children":[],"call":[" infix_value ","o case_sensitive "]}," Arel Visitors PostgreSQL visit_Arel_Nodes_DoesNotMatch":{"type":"method","name":"visit_Arel_Nodes_DoesNotMatch","children":[],"call":[" visit ","o escape ","collector << "," infix_value ","o case_sensitive "," infix_value  << "]}," Arel Visitors PostgreSQL visit_Arel_Nodes_Matches":{"type":"method","name":"visit_Arel_Nodes_Matches","children":[],"call":[" visit ","o escape ","collector << "," infix_value ","o case_sensitive "," infix_value  << "]}," Arel Visitors Oracle12 is_distinct_from":{"type":"method","name":"is_distinct_from","children":[],"call":["collector << "," visit ","o right ","o left "," visit  << "]}," Arel Visitors Oracle12 visit_Arel_Nodes_BindParam":{"type":"method","name":"visit_Arel_Nodes_BindParam","children":[],"call":["collector add_bind ","o value "]}," Arel Visitors Oracle12 visit_Arel_Nodes_UpdateStatement":{"type":"method","name":"visit_Arel_Nodes_UpdateStatement","children":[],"call":["o orders= ","o dup ","o limit nil? ","o limit ","o orders any? ","o orders ","o dup  o dup rders= ","o dup  dup ","o dup  limit nil? ","o dup  limit ","o dup  o dup rders any? ","o dup  o dup rders "]}," Arel Visitors Oracle12 visit_Arel_Nodes_Except":{"type":"method","name":"visit_Arel_Nodes_Except","children":[],"call":["collector << "," infix_value "," infix_value  << "]}," Arel Visitors Oracle12 visit_Arel_Nodes_Offset":{"type":"method","name":"visit_Arel_Nodes_Offset","children":[],"call":["collector << "," visit ","o expr "]}," Arel Visitors Oracle12 visit_Arel_Nodes_Limit":{"type":"method","name":"visit_Arel_Nodes_Limit","children":[],"call":["collector << "," visit ","o expr "," visit  << "]}," Arel Visitors Oracle12 visit_Arel_Nodes_SelectOptions":{"type":"method","name":"visit_Arel_Nodes_SelectOptions","children":[],"call":[" maybe_visit ","o lock ","o limit ","o offset "]}," Arel Visitors Oracle12 visit_Arel_Nodes_SelectStatement":{"type":"method","name":"visit_Arel_Nodes_SelectStatement","children":[],"call":[" raise ","o lock ","o limit "]}," Arel Visitors Oracle is_distinct_from":{"type":"method","name":"is_distinct_from","children":[],"call":["collector << "," visit ","o right ","o left "," visit  << "]}," Arel Visitors Oracle visit_Arel_Nodes_BindParam":{"type":"method","name":"visit_Arel_Nodes_BindParam","children":[],"call":["collector add_bind ","o value "]}," Arel Visitors Oracle split_order_string":{"type":"method","name":"split_order_string","children":[],"call":["array [] count == ","array [] count ","array [] ","array []= ","part to_s ","array [] << << ","array [] << ","string split each ","string split "]}," Arel Visitors Oracle order_hacks":{"type":"method","name":"order_hacks","children":[],"call":["o orders << ","Nodes SqlLiteral  new ","(str \"\\\\bdesc$\") === ","o orders ","orders each_with_index ","o orders= ","(send\n  (send\n    (lvar :o) :orders) :map) flatten "," split_order_string ","string include? "," visit value "," visit ","Arel Collectors SQLString  new ","o orders map ","(str \"FIRST_VALUE\") === ","core projections any? ","core projections ","o cores any? ","o cores ","o orders empty? ","(str \"\\\\bdesc$\") match? ","o (send\n  (send\n    (lvar :o) :orders) :map) flatten  << ","o (send\n  (send\n    (lvar :o) :orders) :map) flatten  ","(send\n  (send\n    (lvar :o) :orders) :map) flatten  each_with_index ","o (send\n  (send\n    (lvar :o) :orders) :map) flatten = ","(send\n  (send\n    (lvar :o) :(send\n  (send\n    (lvar :o) :orders) :map) flatten ) :map) flatten "," split_order_ visit value  "," visit value  include? ","o (send\n  (send\n    (lvar :o) :orders) :map) flatten  map ","o (send\n  (send\n    (lvar :o) :orders) :map) flatten  empty? "]}," Arel Visitors Oracle visit_Arel_Nodes_UpdateStatement":{"type":"method","name":"visit_Arel_Nodes_UpdateStatement","children":[],"call":["o orders= ","o dup ","o limit nil? ","o limit ","o orders any? ","o orders ","o dup  o dup rders= ","o dup  dup ","o dup  limit nil? ","o dup  limit ","o dup  o dup rders any? ","o dup  o dup rders "]}," Arel Visitors Oracle visit_Arel_Nodes_Except":{"type":"method","name":"visit_Arel_Nodes_Except","children":[],"call":["collector << "," infix_value "," infix_value  << "]}," Arel Visitors Oracle visit_Arel_Nodes_Offset":{"type":"method","name":"visit_Arel_Nodes_Offset","children":[],"call":[" visit ","o expr ","collector << "]}," Arel Visitors Oracle visit_Arel_Nodes_Limit":{"type":"method","name":"visit_Arel_Nodes_Limit","children":[],"call":[]}," Arel Visitors Oracle visit_Arel_Nodes_SelectStatement":{"type":"method","name":"visit_Arel_Nodes_SelectStatement","children":[],"call":[" visit ","collector << ","o offset= ","o offset ","o dup ","o limit expr ","o limit ","offset expr to_i + ","offset expr to_i ","offset expr ","offset expr is_a? ","o cores last wheres push ","Nodes LessThanOrEqual  new ","Nodes SqlLiteral  new ","o cores last wheres ","o cores last ","o cores ","o cores first set_quantifier class to_s !~ ","o cores first set_quantifier class to_s ","o cores first set_quantifier class ","o cores first set_quantifier ","o cores first ","o offset ! ","o cores first groups empty? ","o cores first groups ","o orders empty? ","o orders "," order_hacks ","co dup llecto dup r << ","c order_hacks llect order_hacks r << "," visit  << ","o o offset = ","o dup  o dup ffset= "," order_hacks   order_hacks ffset= ","o o offset  ","o dup  o dup ffset "," order_hacks   order_hacks ffset ","o dup  dup "," order_hacks  dup ","o dup  limit expr "," order_hacks  limit expr ","o o limit expr  expr ","o dup  limit "," order_hacks  limit ","o o limit expr  ","o offset  expr to_i + ","o dup ffset expr to dup _i + "," order_hacks ffset expr t order_hacks _i + ","o offset  expr to_i ","o dup ffset expr to dup _i "," order_hacks ffset expr t order_hacks _i ","o offset  expr ","o dup ffset expr "," order_hacks ffset expr ","o offset  expr is_a? ","o dup ffset expr is_a? "," order_hacks ffset expr is_a? ","o dup  co dup res last wheres push "," order_hacks  c order_hacks res last wheres push ","No dup des LessThanOrEqual  new ","N order_hacks des LessThanOrEqual  new ","No dup des SqlLiteral  new ","N order_hacks des SqlLiteral  new ","o dup  co dup res last wheres "," order_hacks  c order_hacks res last wheres ","o dup  co dup res last "," order_hacks  c order_hacks res last ","o dup  co dup res "," order_hacks  c order_hacks res ","o dup  co dup res first set_quantifier class to dup _s !~ "," order_hacks  c order_hacks res first set_quantifier class t order_hacks _s !~ ","o dup  co dup res first set_quantifier class to dup _s "," order_hacks  c order_hacks res first set_quantifier class t order_hacks _s ","o dup  co dup res first set_quantifier class "," order_hacks  c order_hacks res first set_quantifier class ","o dup  co dup res first set_quantifier "," order_hacks  c order_hacks res first set_quantifier ","o dup  co dup res first "," order_hacks  c order_hacks res first ","o o offset  ! ","o dup  o dup ffset ! "," order_hacks   order_hacks ffset ! ","o dup  co dup res first gro dup ups empty? "," order_hacks  c order_hacks res first gr order_hacks ups empty? ","o dup  co dup res first gro dup ups "," order_hacks  c order_hacks res first gr order_hacks ups ","o dup  o dup rders empty? "," order_hacks   order_hacks rders empty? ","o dup  o dup rders "," order_hacks   order_hacks rders "," o dup rder_hacks ","  order_hacks rder_hacks "]}," Arel Visitors MySQL build_subselect":{"type":"method","name":"build_subselect","children":[],"call":["core projections= ","Arel  sql "," quote_column_name ","key name ","core froms= ","Nodes Grouping  new as ","Nodes Grouping  new ","stmt cores last ","stmt cores ","Nodes SelectStatement  new tap ","Nodes SelectStatement  new ","core set_quantifier= ","Arel Nodes Distinct  new ","subselect cores last ","subselect cores "," has_limit_or_offset_or_orders? ","stmt cores last  projections= ","subselect cores last  projections= ","stmt cores last  froms= ","subselect cores last  froms= ","stmt stmt cores last s last ","stmt subselect cores last s last ","stmt stmt cores last s ","stmt subselect cores last s ","stmt cores last  set_quantifier= ","subselect cores last  set_quantifier= ","subselect stmt cores last s last ","subselect subselect cores last s last ","subselect stmt cores last s ","subselect subselect cores last s "]}," Arel Visitors MySQL prepare_update_statement":{"type":"method","name":"prepare_update_statement","children":[],"call":[" has_limit_or_offset_or_orders? "," has_join_sources? ","o offset "," has_group_by_and_having? "]}," Arel Visitors MySQL visit_Arel_Nodes_IsDistinctFrom":{"type":"method","name":"visit_Arel_Nodes_IsDistinctFrom","children":[],"call":[" visit_Arel_Nodes_IsNotDistinctFrom ","collector << "]}," Arel Visitors MySQL visit_Arel_Nodes_IsNotDistinctFrom":{"type":"method","name":"visit_Arel_Nodes_IsNotDistinctFrom","children":[],"call":[" visit ","o right ","collector << ","o left "," visit  << "]}," Arel Visitors MySQL visit_Arel_Nodes_Concat":{"type":"method","name":"visit_Arel_Nodes_Concat","children":[],"call":["collector << "," visit ","o right ","o left "]}," Arel Visitors MySQL visit_Arel_Nodes_SelectCore":{"type":"method","name":"visit_Arel_Nodes_SelectCore","children":[],"call":["Arel  sql ","o froms "]}," Arel Visitors MySQL visit_Arel_Nodes_SelectStatement":{"type":"method","name":"visit_Arel_Nodes_SelectStatement","children":[],"call":["o limit= ","Arel Nodes Limit  new ","o limit ! ","o limit ","o offset "]}," Arel Visitors MySQL visit_Arel_Nodes_UnqualifiedColumn":{"type":"method","name":"visit_Arel_Nodes_UnqualifiedColumn","children":[],"call":[" visit ","o expr "]}," Arel Visitors MySQL visit_Arel_Nodes_Bin":{"type":"method","name":"visit_Arel_Nodes_Bin","children":[],"call":[" visit ","o expr ","collector << "]}," Arel Visitors MSSQL find_primary_key":{"type":"method","name":"find_primary_key","children":[],"call":["o [] ","@connection primary_key ","o name ","@primary_keys [] "]}," Arel Visitors MSSQL find_left_table_pk":{"type":"method","name":"find_left_table_pk","children":[],"call":[" find_primary_key ","o instance_of? "," find_left_table_pk ","o left ","o kind_of? "]}," Arel Visitors MSSQL select_count?":{"type":"method","name":"select_count?","children":[],"call":["Arel Nodes Count  === ","x projections first ","x projections ","x projections length == ","x projections length "]}," Arel Visitors MSSQL row_num_literal":{"type":"method","name":"row_num_literal","children":[],"call":["RowNumber  new "]}," Arel Visitors MSSQL determine_order_by":{"type":"method","name":"determine_order_by","children":[],"call":[" find_left_table_pk ","x froms ","x groups ","x groups any? ","orders any? "," find_left_table_ find_left_table_pk  "]}," Arel Visitors MSSQL collect_optimizer_hints":{"type":"method","name":"collect_optimizer_hints","children":[],"call":[]}," Arel Visitors MSSQL visit_Arel_Nodes_DeleteStatement":{"type":"method","name":"visit_Arel_Nodes_DeleteStatement","children":[],"call":[" inject_join ","o wheres ","collector << ","o wheres any? "," visit ","o relation ","o limit expr ","o limit "," visit  << "]}," Arel Visitors MSSQL get_offset_limit_clause":{"type":"method","name":"get_offset_limit_clause","children":[],"call":["o limit expr to_i - + ","o limit expr to_i - ","o limit expr to_i ","o limit expr ","o limit ","o offset expr to_i + ","o offset expr to_i ","o offset expr ","o offset "]}," Arel Visitors MSSQL visit_Arel_Nodes_OptimizerHints":{"type":"method","name":"visit_Arel_Nodes_OptimizerHints","children":[],"call":["collector << ","(send\n  (send\n    (lvar :o) :expr) :map) join "," sanitize_as_sql_comment ","o expr map ","o expr "]}," Arel Visitors MSSQL visit_Arel_Nodes_SelectCore":{"type":"method","name":"visit_Arel_Nodes_SelectCore","children":[],"call":[" maybe_visit ","o optimizer_hints "]}," Arel Visitors MSSQL visit_Arel_Nodes_SelectStatement":{"type":"method","name":"visit_Arel_Nodes_SelectStatement","children":[],"call":["collector << "," get_offset_limit_clause "," visit_Arel_Nodes_SelectCore ","o cores inject ","o cores ","x projections << ","x projections ","x projections= "," select_count? "," row_num_literal "," determine_order_by ","o orders ","o cores each ","o offset ! ","o offset ","o limit ! ","o limit "]}," Arel Visitors MSSQL visit_Arel_Visitors_MSSQL_RowNumber":{"type":"method","name":"visit_Arel_Visitors_MSSQL_RowNumber","children":[],"call":[" inject_join << "," inject_join ","o children ","collector << "]}," Arel Visitors MSSQL visit_Arel_Nodes_IsDistinctFrom":{"type":"method","name":"visit_Arel_Nodes_IsDistinctFrom","children":[],"call":[" visit_Arel_Nodes_IsNotDistinctFrom ","collector << "," visit ","o left ","o right nil? ","o right "," visit  << "]}," Arel Visitors MSSQL visit_Arel_Nodes_IsNotDistinctFrom":{"type":"method","name":"visit_Arel_Nodes_IsNotDistinctFrom","children":[],"call":["collector << "," visit ","o left ","right nil? ","o right "," visit  << ","o right  nil? ","o o right  "]}," Arel Visitors MSSQL initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Arel Visitors Informix visit_Arel_Nodes_Limit":{"type":"method","name":"visit_Arel_Nodes_Limit","children":[],"call":["collector << "," visit ","o expr "]}," Arel Visitors Informix visit_Arel_Nodes_Offset":{"type":"method","name":"visit_Arel_Nodes_Offset","children":[],"call":[" visit ","o expr ","collector << "]}," Arel Visitors Informix visit_Arel_Nodes_OptimizerHints":{"type":"method","name":"visit_Arel_Nodes_OptimizerHints","children":[],"call":["collector << ","(send\n  (send\n    (lvar :o) :expr) :map) join "," sanitize_as_sql_comment ","o expr map ","o expr "]}," Arel Visitors Informix visit_Arel_Nodes_SelectCore":{"type":"method","name":"visit_Arel_Nodes_SelectCore","children":[],"call":[" inject_join ","o havings ","collector << ","o havings any? ","o groups ","o groups any? ","o wheres ","o wheres any? "," visit ","o source ","o source empty? ! ","o source empty? ","o projections "," inject_join  << "," visit  << "]}," Arel Visitors Informix visit_Arel_Nodes_SelectStatement":{"type":"method","name":"visit_Arel_Nodes_SelectStatement","children":[],"call":[" maybe_visit ","o lock "," inject_join ","o orders ","collector << ","o orders any? "," visit_Arel_Nodes_SelectCore ","o cores inject ","o cores ","o limit ","o offset "," inject_join  << "," maybe_visit  << "]}," Arel Visitors IBM_DB collect_optimizer_hints":{"type":"method","name":"collect_optimizer_hints","children":[],"call":[]}," Arel Visitors IBM_DB is_distinct_from":{"type":"method","name":"is_distinct_from","children":[],"call":["collector << "," visit ","o right ","o left "," visit  << "]}," Arel Visitors IBM_DB visit_Arel_Nodes_Limit":{"type":"method","name":"visit_Arel_Nodes_Limit","children":[],"call":["collector << "," visit ","o expr "," visit  << "]}," Arel Visitors IBM_DB visit_Arel_Nodes_OptimizerHints":{"type":"method","name":"visit_Arel_Nodes_OptimizerHints","children":[],"call":["collector << ","(send\n  (send\n    (lvar :o) :expr) :map) join "," sanitize_as_sql_comment ","o expr map ","o expr "]}," Arel Visitors IBM_DB visit_Arel_Nodes_SelectCore":{"type":"method","name":"visit_Arel_Nodes_SelectCore","children":[],"call":[" maybe_visit ","o optimizer_hints "]}," Arel Visitors Dot to_dot":{"type":"method","name":"to_dot","children":[],"call":["digraph \"Arel\" {\nnode [width=0.375,height=0.25,shape=record];\n + + + + ","digraph \"Arel\" {\nnode [width=0.375,height=0.25,shape=record];\n + + + ","(send\n  (ivar :@edges) :map) join ","edge name ","edge to id ","edge to ","edge from id ","edge from ","@edges map ","digraph \"Arel\" {\nnode [width=0.375,height=0.25,shape=record];\n + + ","digraph \"Arel\" {\nnode [width=0.375,height=0.25,shape=record];\n + ","(send\n  (ivar :@nodes) :map) join ","node id "," quote ","i + ","node fields each_with_index ","node fields ","node name ","@nodes map "]}," Arel Visitors Dot quote":{"type":"method","name":"quote","children":[],"call":["string to_s gsub ","string to_s "]}," Arel Visitors Dot with_node":{"type":"method","name":"with_node","children":[],"call":["@node_stack pop ","@node_stack push ","edge to= ","@edge_stack last ","@edge_stack last  to= ","@@edge_stack last _stack last "]}," Arel Visitors Dot edge":{"type":"method","name":"edge","children":[],"call":["@edge_stack pop ","@edges << ","@edge_stack push ","Edge  new ","@node_stack last ","@Edge  new _stack pop ","@Edge  new s << ","@Edge  new _stack push "]}," Arel Visitors Dot visit":{"type":"method","name":"visit","children":[],"call":[" with_node ","@nodes << ","@seen []= ","node id ","Node  new ","o object_id ","o class name ","o class ","@edge_stack last to= ","@edge_stack last ","@seen [] "," with_Node  new  "," with_@seen []  ","@Node  new s << ","@@seen [] s << ","Node  new  id ","@seen []  id "]}," Arel Visitors Dot visit_edge":{"type":"method","name":"visit_edge","children":[],"call":[" visit ","o send "," edge "]}," Arel Visitors Dot visit_Arel_Nodes_Comment":{"type":"method","name":"visit_Arel_Nodes_Comment","children":[],"call":[" visit_edge "]}," Arel Visitors Dot visit_Array":{"type":"method","name":"visit_Array","children":[],"call":[" visit "," edge ","o each_with_index "]}," Arel Visitors Dot visit_Hash":{"type":"method","name":"visit_Hash","children":[],"call":[" visit "," edge ","o each_with_index "]}," Arel Visitors Dot visit_Arel_Nodes_BindParam":{"type":"method","name":"visit_Arel_Nodes_BindParam","children":[],"call":[" visit ","o value "," edge "," visit_edge "]}," Arel Visitors Dot visit_String":{"type":"method","name":"visit_String","children":[],"call":["@node_stack last fields << ","@node_stack last fields ","@node_stack last "]}," Arel Visitors Dot binary":{"type":"method","name":"binary","children":[],"call":[" visit_edge "]}," Arel Visitors Dot nary":{"type":"method","name":"nary","children":[],"call":[" visit "," edge ","o children each_with_index ","o children "]}," Arel Visitors Dot visit_Arel_Attribute":{"type":"method","name":"visit_Arel_Attribute","children":[],"call":[" visit_edge "]}," Arel Visitors Dot visit_Arel_Nodes_Casted":{"type":"method","name":"visit_Arel_Nodes_Casted","children":[],"call":[" visit_edge "]}," Arel Visitors Dot visit_Arel_Table":{"type":"method","name":"visit_Arel_Table","children":[],"call":[" visit_edge "]}," Arel Visitors Dot visit_Arel_Nodes_UpdateStatement":{"type":"method","name":"visit_Arel_Nodes_UpdateStatement","children":[],"call":[" visit_edge "]}," Arel Visitors Dot visit_Arel_Nodes_SelectStatement":{"type":"method","name":"visit_Arel_Nodes_SelectStatement","children":[],"call":[" visit_edge "]}," Arel Visitors Dot visit_Arel_Nodes_SelectCore":{"type":"method","name":"visit_Arel_Nodes_SelectCore","children":[],"call":[" visit_edge "]}," Arel Visitors Dot visit_Arel_Nodes_InsertStatement":{"type":"method","name":"visit_Arel_Nodes_InsertStatement","children":[],"call":[" visit_edge "]}," Arel Visitors Dot visit_Arel_Nodes_NamedFunction":{"type":"method","name":"visit_Arel_Nodes_NamedFunction","children":[],"call":[" visit_edge "]}," Arel Visitors Dot extract":{"type":"method","name":"extract","children":[],"call":[" visit_edge "]}," Arel Visitors Dot function":{"type":"method","name":"function","children":[],"call":[" visit_edge "]}," Arel Visitors Dot named_window":{"type":"method","name":"named_window","children":[],"call":[" visit_edge "]}," Arel Visitors Dot window":{"type":"method","name":"window","children":[],"call":[" visit_edge "]}," Arel Visitors Dot unary":{"type":"method","name":"unary","children":[],"call":[" visit_edge "]}," Arel Visitors Dot visit_Arel_Nodes_DeleteStatement":{"type":"method","name":"visit_Arel_Nodes_DeleteStatement","children":[],"call":[" visit_edge "]}," Arel Visitors Dot visit_Arel_Nodes_InnerJoin":{"type":"method","name":"visit_Arel_Nodes_InnerJoin","children":[],"call":[" visit_edge "]}," Arel Visitors Dot visit_Arel_Nodes_StringJoin":{"type":"method","name":"visit_Arel_Nodes_StringJoin","children":[],"call":[" visit_edge "]}," Arel Visitors Dot visit_Arel_Nodes_ValuesList":{"type":"method","name":"visit_Arel_Nodes_ValuesList","children":[],"call":[" visit_edge "]}," Arel Visitors Dot visit_Arel_Nodes_Count":{"type":"method","name":"visit_Arel_Nodes_Count","children":[],"call":[" visit_edge "]}," Arel Visitors Dot visit_Arel_Nodes_TableAlias":{"type":"method","name":"visit_Arel_Nodes_TableAlias","children":[],"call":[" visit_edge "]}," Arel Visitors Dot visit_Arel_Nodes_Ordering":{"type":"method","name":"visit_Arel_Nodes_Ordering","children":[],"call":[" visit_edge "]}," Arel Visitors Dot accept":{"type":"method","name":"accept","children":[],"call":["collector << "," to_dot "," visit "]}," Arel Visitors Dot initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Arel Visitors Dot Node initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Arel Visitors DepthFirst get_dispatch_cache":{"type":"method","name":"get_dispatch_cache","children":[],"call":[]}," Arel Visitors DepthFirst visit_Hash":{"type":"method","name":"visit_Hash","children":[],"call":[" visit ","o each "]}," Arel Visitors DepthFirst visit_Array":{"type":"method","name":"visit_Array","children":[],"call":[" visit ","o each "]}," Arel Visitors DepthFirst visit_Arel_Nodes_Comment":{"type":"method","name":"visit_Arel_Nodes_Comment","children":[],"call":[" visit ","o values "]}," Arel Visitors DepthFirst visit_Arel_Nodes_UpdateStatement":{"type":"method","name":"visit_Arel_Nodes_UpdateStatement","children":[],"call":[" visit ","o limit ","o orders ","o wheres ","o values ","o relation "]}," Arel Visitors DepthFirst visit_Arel_Nodes_SelectStatement":{"type":"method","name":"visit_Arel_Nodes_SelectStatement","children":[],"call":[" visit ","o offset ","o lock ","o limit ","o orders ","o cores "]}," Arel Visitors DepthFirst visit_Arel_Nodes_SelectCore":{"type":"method","name":"visit_Arel_Nodes_SelectCore","children":[],"call":[" visit ","o havings ","o windows ","o groups ","o wheres ","o source ","o projections "]}," Arel Visitors DepthFirst visit_Arel_Nodes_InsertStatement":{"type":"method","name":"visit_Arel_Nodes_InsertStatement","children":[],"call":[" visit ","o values ","o columns ","o relation "]}," Arel Visitors DepthFirst terminal":{"type":"method","name":"terminal","children":[],"call":[]}," Arel Visitors DepthFirst visit_Arel_Table":{"type":"method","name":"visit_Arel_Table","children":[],"call":[" visit ","o name "]}," Arel Visitors DepthFirst visit_Arel_Attribute":{"type":"method","name":"visit_Arel_Attribute","children":[],"call":[" visit ","o name ","o relation "]}," Arel Visitors DepthFirst visit_Arel_Nodes_StringJoin":{"type":"method","name":"visit_Arel_Nodes_StringJoin","children":[],"call":[" visit ","o left "]}," Arel Visitors DepthFirst binary":{"type":"method","name":"binary","children":[],"call":[" visit ","o right ","o left "]}," Arel Visitors DepthFirst nary":{"type":"method","name":"nary","children":[],"call":[" visit ","o children each ","o children "]}," Arel Visitors DepthFirst visit_Arel_Nodes_Case":{"type":"method","name":"visit_Arel_Nodes_Case","children":[],"call":[" visit ","o default ","o conditions ","o case "]}," Arel Visitors DepthFirst visit_Arel_Nodes_Count":{"type":"method","name":"visit_Arel_Nodes_Count","children":[],"call":[" visit ","o distinct ","o alias ","o expressions "]}," Arel Visitors DepthFirst visit_Arel_Nodes_NamedFunction":{"type":"method","name":"visit_Arel_Nodes_NamedFunction","children":[],"call":[" visit ","o alias ","o distinct ","o expressions ","o name "]}," Arel Visitors DepthFirst function":{"type":"method","name":"function","children":[],"call":[" visit ","o distinct ","o alias ","o expressions "]}," Arel Visitors DepthFirst unary":{"type":"method","name":"unary","children":[],"call":[" visit ","o expr "]}," Arel Visitors DepthFirst visit":{"type":"method","name":"visit","children":[],"call":["@block call "]}," Arel Visitors DepthFirst initialize":{"type":"method","name":"initialize","children":[],"call":["Proc  new "]}," Arel UpdateManager set":{"type":"method","name":"set","children":[],"call":["@ast values= ","Nodes Assignment  new ","Nodes UnqualifiedColumn  new ","values map ","String  === "]}," Arel UpdateManager table":{"type":"method","name":"table","children":[],"call":["@ast relation= "]}," Arel UpdateManager initialize":{"type":"method","name":"initialize","children":[],"call":["Nodes UpdateStatement  new "]}," Arel TreeManager where":{"type":"method","name":"where","children":[],"call":["@ctx wheres << ","@ctx wheres ","expr ast ","Arel TreeManager  === ","expr ast  ast "]}," Arel TreeManager initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":["@ast clone ","@ast clone  clone "]}," Arel TreeManager to_sql":{"type":"method","name":"to_sql","children":[],"call":["collector value ","engine connection visitor accept ","engine connection visitor ","engine connection ","Arel Collectors SQLString  new ","engine connection visitor accept  value ","Arel Collectors SQLString  new  value "]}," Arel TreeManager to_dot":{"type":"method","name":"to_dot","children":[],"call":["collector value ","Visitors Dot  new accept ","Visitors Dot  new ","Arel Collectors PlainString  new ","Visitors Dot  new accept  value ","Arel Collectors PlainString  new  value "]}," Arel TreeManager initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Arel TreeManager StatementMethods where":{"type":"method","name":"where","children":[],"call":["@ast wheres << ","@ast wheres "]}," Arel TreeManager StatementMethods wheres=":{"type":"method","name":"wheres=","children":[],"call":["@ast wheres= "]}," Arel TreeManager StatementMethods key":{"type":"method","name":"key","children":[],"call":["@ast key "]}," Arel TreeManager StatementMethods key=":{"type":"method","name":"key=","children":[],"call":["@ast key= ","Nodes  build_quoted "]}," Arel TreeManager StatementMethods order":{"type":"method","name":"order","children":[],"call":["@ast orders= "]}," Arel TreeManager StatementMethods offset":{"type":"method","name":"offset","children":[],"call":["@ast offset= ","Nodes Offset  new ","Nodes  build_quoted "]}," Arel TreeManager StatementMethods take":{"type":"method","name":"take","children":[],"call":["@ast limit= ","Nodes Limit  new ","Nodes  build_quoted "]}," Arel Table able_to_type_cast?":{"type":"method","name":"able_to_type_cast?","children":[],"call":[" type_caster nil? ! "," type_caster nil? "," type_caster "]}," Arel Table type_cast_for_database":{"type":"method","name":"type_cast_for_database","children":[],"call":[" type_caster type_cast_for_database "," type_caster "]}," Arel Table eql?":{"type":"method","name":"eql?","children":[],"call":[" table_alias == ","other table_alias "," table_alias "," name == ","other name "," name "," class == ","other class "," class "]}," Arel Table hash":{"type":"method","name":"hash","children":[],"call":["@name hash "]}," Arel Table []":{"type":"method","name":"[]","children":[],"call":[" Arel Attribute  new ","Attribute  new ","@klass attribute_aliases [] ","@klass attribute_aliases ","name to_s ","name is_a? ","name to_s  to_s ","name to_s  is_a? "]}," Arel Table having":{"type":"method","name":"having","children":[],"call":[" from having "," from "]}," Arel Table skip":{"type":"method","name":"skip","children":[],"call":[" from skip "," from "]}," Arel Table take":{"type":"method","name":"take","children":[],"call":[" from take "," from "]}," Arel Table project":{"type":"method","name":"project","children":[],"call":[" from project "," from "]}," Arel Table where":{"type":"method","name":"where","children":[],"call":[" from where "," from "]}," Arel Table order":{"type":"method","name":"order","children":[],"call":[" from order "," from "]}," Arel Table group":{"type":"method","name":"group","children":[],"call":[" from group "," from "]}," Arel Table outer_join":{"type":"method","name":"outer_join","children":[],"call":[" join "]}," Arel Table join":{"type":"method","name":"join","children":[],"call":[" from join "," from "," raise ","relation empty? "]}," Arel Table from":{"type":"method","name":"from","children":[],"call":["SelectManager  new "]}," Arel Table alias":{"type":"method","name":"alias","children":[],"call":["Nodes TableAlias  new "]}," Arel Table initialize":{"type":"method","name":"initialize","children":[],"call":["as to_s == ","as to_s ","name to_s "]}," Arel SelectManager collapse":{"type":"method","name":"collapse","children":[],"call":[" create_and ","exprs first ","exprs length == ","exprs length ","Arel  sql ","String  === ","exprs map! ","exprs compact ","exprs compact  first ","exprs compact  length == ","exprs compact  length ","exprs compact  map! ","exprs compact  compact "]}," Arel SelectManager comment":{"type":"method","name":"comment","children":[],"call":["@ctx comment= ","Nodes Comment  new "]}," Arel SelectManager source":{"type":"method","name":"source","children":[],"call":["@ctx source "]}," Arel SelectManager join_sources":{"type":"method","name":"join_sources","children":[],"call":["@ctx source right ","@ctx source "]}," Arel SelectManager take":{"type":"method","name":"take","children":[],"call":["@ast limit= ","Nodes Limit  new "]}," Arel SelectManager with":{"type":"method","name":"with","children":[],"call":["@ast with= ","node_class new ","subqueries flatten ","Nodes  const_get ","subqueries shift to_s capitalize ","subqueries shift to_s ","subqueries shift ","subqueries first is_a? ","subqueries first ","Nodes  const_get  new "]}," Arel SelectManager lateral":{"type":"method","name":"lateral","children":[],"call":["Nodes Lateral  new "," as "," ast ","table_name nil? "]}," Arel SelectManager except":{"type":"method","name":"except","children":[],"call":["Nodes Except  new ","other ast "," ast "]}," Arel SelectManager intersect":{"type":"method","name":"intersect","children":[],"call":["Nodes Intersect  new ","other ast "," ast "]}," Arel SelectManager union":{"type":"method","name":"union","children":[],"call":["node_class new ","other ast "," ast ","Nodes  const_get ","operation to_s capitalize ","operation to_s ","Nodes  const_get  new "]}," Arel SelectManager where_sql":{"type":"method","name":"where_sql","children":[],"call":["Nodes SqlLiteral  new ","viz accept value ","viz accept ","Collectors SQLString  new ","Visitors WhereSql  new ","engine connection ","engine connection visitor ","@ctx wheres empty? ","@ctx wheres ","Nodes And  new to_sql ","Nodes And  new ","Visitors WhereSql  new  accept value ","Visitors WhereSql  new  accept "]}," Arel SelectManager orders":{"type":"method","name":"orders","children":[],"call":["@ast orders "]}," Arel SelectManager order":{"type":"method","name":"order","children":[],"call":["@ast orders concat ","Nodes SqlLiteral  new ","x to_s ","STRING_OR_SYMBOL_CLASS  include? ","x class ","expr map ","@ast orders "]}," Arel SelectManager distinct_on":{"type":"method","name":"distinct_on","children":[],"call":["@ctx set_quantifier= ","Arel Nodes DistinctOn  new "]}," Arel SelectManager distinct":{"type":"method","name":"distinct","children":[],"call":["@ctx set_quantifier= ","Arel Nodes Distinct  new "]}," Arel SelectManager optimizer_hints":{"type":"method","name":"optimizer_hints","children":[],"call":["@ctx optimizer_hints= ","Arel Nodes OptimizerHints  new ","hints empty? "]}," Arel SelectManager projections=":{"type":"method","name":"projections=","children":[],"call":["@ctx projections= "]}," Arel SelectManager projections":{"type":"method","name":"projections","children":[],"call":["@ctx projections "]}," Arel SelectManager project":{"type":"method","name":"project","children":[],"call":["@ctx projections concat ","Nodes SqlLiteral  new ","x to_s ","STRING_OR_SYMBOL_CLASS  include? ","x class ","projections map ","@ctx projections "]}," Arel SelectManager window":{"type":"method","name":"window","children":[],"call":["@ctx windows push ","@ctx windows ","Nodes NamedWindow  new ","@ctx Nodes NamedWindow  new s push ","@ctx Nodes NamedWindow  new s "]}," Arel SelectManager having":{"type":"method","name":"having","children":[],"call":["@ctx havings << ","@ctx havings "]}," Arel SelectManager outer_join":{"type":"method","name":"outer_join","children":[],"call":[" join "]}," Arel SelectManager join":{"type":"method","name":"join","children":[],"call":["@ctx source right << "," create_join ","@ctx source right ","@ctx source "," raise ","relation empty? "]}," Arel SelectManager froms":{"type":"method","name":"froms","children":[],"call":["(send\n  (send\n    (ivar :@ast) :cores) :map) compact ","x from ","@ast cores map ","@ast cores ","@ast cores filter_map "]}," Arel SelectManager from":{"type":"method","name":"from","children":[],"call":["@ctx source left= ","@ctx source ","@ctx source right << ","@ctx source right ","Nodes SqlLiteral  new ","String  === "]}," Arel SelectManager group":{"type":"method","name":"group","children":[],"call":["@ctx groups push ","Nodes Group  new ","@ctx groups ","Nodes SqlLiteral  new ","column to_s ","Symbol  === ","String  === ","columns each ","Nodes SqlLiteral  new  to_s ","Nodes SqlLiteral  new s each "]}," Arel SelectManager on":{"type":"method","name":"on","children":[],"call":["@ctx source right last right= ","Nodes On  new "," collapse ","@ctx source right last ","@ctx source right ","@ctx source "]}," Arel SelectManager locked":{"type":"method","name":"locked","children":[],"call":["@ast lock "]}," Arel SelectManager lock":{"type":"method","name":"lock","children":[],"call":["@ast lock= ","Nodes Lock  new ","Arel  sql "]}," Arel SelectManager as":{"type":"method","name":"as","children":[],"call":[" create_table_alias ","Nodes SqlLiteral  new "," grouping "]}," Arel SelectManager exists":{"type":"method","name":"exists","children":[],"call":["Arel Nodes Exists  new "]}," Arel SelectManager skip":{"type":"method","name":"skip","children":[],"call":["@ast offset= ","Nodes Offset  new "]}," Arel SelectManager offset":{"type":"method","name":"offset","children":[],"call":["@ast offset expr ","@ast offset "]}," Arel SelectManager constraints":{"type":"method","name":"constraints","children":[],"call":["@ctx wheres "]}," Arel SelectManager limit":{"type":"method","name":"limit","children":[],"call":["@ast limit expr ","@ast limit "]}," Arel SelectManager initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":["@ast cores last ","@ast cores "]}," Arel SelectManager initialize":{"type":"method","name":"initialize","children":[],"call":[" from ","@ast cores last ","@ast cores ","Nodes SelectStatement  new ","Nodes SelectStatement  new  cores last ","Nodes SelectStatement  new  cores "]}," Arel Predications open_ended?":{"type":"method","name":"open_ended?","children":[],"call":[" unboundable? "," infinity? ","value nil? "]}," Arel Predications unboundable?":{"type":"method","name":"unboundable?","children":[],"call":["value unboundable? ","value respond_to? "]}," Arel Predications infinity?":{"type":"method","name":"infinity?","children":[],"call":["value infinite? ","value respond_to? "]}," Arel Predications quoted_array":{"type":"method","name":"quoted_array","children":[],"call":[" quoted_node ","others map "]}," Arel Predications quoted_node":{"type":"method","name":"quoted_node","children":[],"call":["Nodes  build_quoted "]}," Arel Predications grouping_all":{"type":"method","name":"grouping_all","children":[],"call":["Nodes Grouping  new ","Nodes And  new "," send ","others map "]}," Arel Predications grouping_any":{"type":"method","name":"grouping_any","children":[],"call":["Nodes Grouping  new ","Nodes Or  new ","nodes inject "," send ","others map "]}," Arel Predications concat":{"type":"method","name":"concat","children":[],"call":["Nodes Concat  new "]}," Arel Predications when":{"type":"method","name":"when","children":[],"call":["Nodes Case  new when "," quoted_node ","Nodes Case  new "]}," Arel Predications lteq_all":{"type":"method","name":"lteq_all","children":[],"call":[" grouping_all "]}," Arel Predications lteq_any":{"type":"method","name":"lteq_any","children":[],"call":[" grouping_any "]}," Arel Predications lteq":{"type":"method","name":"lteq","children":[],"call":["Nodes LessThanOrEqual  new "," quoted_node "]}," Arel Predications lt_all":{"type":"method","name":"lt_all","children":[],"call":[" grouping_all "]}," Arel Predications lt_any":{"type":"method","name":"lt_any","children":[],"call":[" grouping_any "]}," Arel Predications lt":{"type":"method","name":"lt","children":[],"call":["Nodes LessThan  new "," quoted_node "]}," Arel Predications gt_all":{"type":"method","name":"gt_all","children":[],"call":[" grouping_all "]}," Arel Predications gt_any":{"type":"method","name":"gt_any","children":[],"call":[" grouping_any "]}," Arel Predications gt":{"type":"method","name":"gt","children":[],"call":["Nodes GreaterThan  new "," quoted_node "]}," Arel Predications gteq_all":{"type":"method","name":"gteq_all","children":[],"call":[" grouping_all "]}," Arel Predications gteq_any":{"type":"method","name":"gteq_any","children":[],"call":[" grouping_any "]}," Arel Predications gteq":{"type":"method","name":"gteq","children":[],"call":["Nodes GreaterThanOrEqual  new "," quoted_node "]}," Arel Predications does_not_match_all":{"type":"method","name":"does_not_match_all","children":[],"call":[" grouping_all "]}," Arel Predications does_not_match_any":{"type":"method","name":"does_not_match_any","children":[],"call":[" grouping_any "]}," Arel Predications does_not_match_regexp":{"type":"method","name":"does_not_match_regexp","children":[],"call":["Nodes NotRegexp  new "," quoted_node "]}," Arel Predications does_not_match":{"type":"method","name":"does_not_match","children":[],"call":["Nodes DoesNotMatch  new "," quoted_node "]}," Arel Predications matches_all":{"type":"method","name":"matches_all","children":[],"call":[" grouping_all "]}," Arel Predications matches_any":{"type":"method","name":"matches_any","children":[],"call":[" grouping_any "]}," Arel Predications matches_regexp":{"type":"method","name":"matches_regexp","children":[],"call":["Nodes Regexp  new "," quoted_node "]}," Arel Predications matches":{"type":"method","name":"matches","children":[],"call":["Nodes Matches  new "," quoted_node "]}," Arel Predications not_in_all":{"type":"method","name":"not_in_all","children":[],"call":[" grouping_all "]}," Arel Predications not_in_any":{"type":"method","name":"not_in_any","children":[],"call":[" grouping_any "]}," Arel Predications not_in":{"type":"method","name":"not_in","children":[],"call":["Nodes NotIn  new "," quoted_node "," quoted_array "," not_between "," warn ","Arel Nodes NotIn  new ","other ast "]}," Arel Predications not_between":{"type":"method","name":"not_between","children":[],"call":["left or "," gt ","other end "," gteq ","other exclude_end? "," lt ","other begin "," open_ended? ","other end nil? "," in "," not_in "," unboundable? == "," unboundable? "," infinity? == "," infinity? "," lt  or "]}," Arel Predications in_all":{"type":"method","name":"in_all","children":[],"call":[" grouping_all "]}," Arel Predications in_any":{"type":"method","name":"in_any","children":[],"call":[" grouping_any "]}," Arel Predications in":{"type":"method","name":"in","children":[],"call":["Nodes In  new "," quoted_node "," quoted_array "," between "," warn ","Arel Nodes In  new ","other ast "]}," Arel Predications between":{"type":"method","name":"between","children":[],"call":["Nodes Between  new ","left and "," quoted_node ","other end ","other begin "," gteq and "," lt "," gteq ","other exclude_end? "," open_ended? ","other end nil? "," lteq "," not_in "," in "," unboundable? == "," unboundable? ","Nodes And  new "," infinity? == "," infinity? "," eq ","other begin == "," quoted_node  and "]}," Arel Predications eq_all":{"type":"method","name":"eq_all","children":[],"call":[" grouping_all "," quoted_array "]}," Arel Predications eq_any":{"type":"method","name":"eq_any","children":[],"call":[" grouping_any "]}," Arel Predications is_distinct_from":{"type":"method","name":"is_distinct_from","children":[],"call":["Nodes IsDistinctFrom  new "," quoted_node "]}," Arel Predications is_not_distinct_from":{"type":"method","name":"is_not_distinct_from","children":[],"call":["Nodes IsNotDistinctFrom  new "," quoted_node "]}," Arel Predications eq":{"type":"method","name":"eq","children":[],"call":["Nodes Equality  new "," quoted_node "]}," Arel Predications not_eq_all":{"type":"method","name":"not_eq_all","children":[],"call":[" grouping_all "]}," Arel Predications not_eq_any":{"type":"method","name":"not_eq_any","children":[],"call":[" grouping_any "]}," Arel Predications not_eq":{"type":"method","name":"not_eq","children":[],"call":["Nodes NotEqual  new "," quoted_node "]}," Arel OrderPredications desc":{"type":"method","name":"desc","children":[],"call":["Nodes Descending  new "]}," Arel OrderPredications asc":{"type":"method","name":"asc","children":[],"call":["Nodes Ascending  new "]}," Arel Nodes Following initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Arel Nodes Preceding initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Arel Nodes CurrentRow eql?":{"type":"method","name":"eql?","children":[],"call":[" class == ","other class "," class "]}," Arel Nodes CurrentRow hash":{"type":"method","name":"hash","children":[],"call":[" class hash "," class "]}," Arel Nodes Range initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Arel Nodes Rows initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Arel Nodes NamedWindow eql?":{"type":"method","name":"eql?","children":[],"call":[" name == ","other name "," name "]}," Arel Nodes NamedWindow hash":{"type":"method","name":"hash","children":[],"call":[" ^ ","@name hash "]}," Arel Nodes NamedWindow initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":["other name clone ","other name "]}," Arel Nodes NamedWindow initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Arel Nodes Window eql?":{"type":"method","name":"eql?","children":[],"call":[" partitions == ","other partitions "," partitions "," framing == ","other framing "," framing "," orders == ","other orders "," orders "," class == ","other class "," class "]}," Arel Nodes Window hash":{"type":"method","name":"hash","children":[],"call":["(ivar :@orders) hash "]}," Arel Nodes Window initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":["x clone ","@orders map "]}," Arel Nodes Window range":{"type":"method","name":"range","children":[],"call":[" frame ","Range  new "]}," Arel Nodes Window rows":{"type":"method","name":"rows","children":[],"call":[" frame ","Rows  new "]}," Arel Nodes Window frame":{"type":"method","name":"frame","children":[],"call":[]}," Arel Nodes Window partition":{"type":"method","name":"partition","children":[],"call":["@partitions concat ","Nodes SqlLiteral  new ","x to_s ","Symbol  === ","String  === ","expr map "]}," Arel Nodes Window order":{"type":"method","name":"order","children":[],"call":["@orders concat ","Nodes SqlLiteral  new ","x to_s ","Symbol  === ","String  === ","expr map "]}," Arel Nodes Window initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Arel Nodes UpdateStatement eql?":{"type":"method","name":"eql?","children":[],"call":[" key == ","other key "," key "," offset == ","other offset "," offset "," limit == ","other limit "," limit "," orders == ","other orders "," orders "," values == ","other values "," values "," wheres == ","other wheres "," wheres "," relation == ","other relation "," relation "," class == ","other class "," class "," havings == ","other havings "," havings "," groups == ","other groups "," groups "]}," Arel Nodes UpdateStatement hash":{"type":"method","name":"hash","children":[],"call":["(ivar :@relation) hash "]}," Arel Nodes UpdateStatement initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":["@values clone ","@wheres clone ","@values clone  clone ","@wheres clone  clone "]}," Arel Nodes UpdateStatement initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Arel Nodes UnqualifiedColumn name":{"type":"method","name":"name","children":[],"call":["@expr name "]}," Arel Nodes UnqualifiedColumn column":{"type":"method","name":"column","children":[],"call":["@expr column "]}," Arel Nodes UnqualifiedColumn relation":{"type":"method","name":"relation","children":[],"call":["@expr relation "]}," Arel Nodes BitwiseNot initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Arel Nodes UnaryOperation initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Arel Nodes Unary eql?":{"type":"method","name":"eql?","children":[],"call":[" expr == ","other expr "," expr "," class == ","other class "," class "]}," Arel Nodes Unary hash":{"type":"method","name":"hash","children":[],"call":["@expr hash "]}," Arel Nodes Unary initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Arel Nodes True eql?":{"type":"method","name":"eql?","children":[],"call":[" class == ","other class "," class "]}," Arel Nodes True hash":{"type":"method","name":"hash","children":[],"call":[" class hash "," class "]}," Arel Nodes Distinct eql?":{"type":"method","name":"eql?","children":[],"call":[" class == ","other class "," class "]}," Arel Nodes Distinct hash":{"type":"method","name":"hash","children":[],"call":[" class hash "," class "]}," Arel Nodes TableAlias able_to_type_cast?":{"type":"method","name":"able_to_type_cast?","children":[],"call":[" relation able_to_type_cast? "," relation "," relation respond_to? "]}," Arel Nodes TableAlias type_cast_for_database":{"type":"method","name":"type_cast_for_database","children":[],"call":[" relation type_cast_for_database "," relation "]}," Arel Nodes TableAlias table_name":{"type":"method","name":"table_name","children":[],"call":[" name "," relation name "," relation "," relation respond_to? "]}," Arel Nodes TableAlias []":{"type":"method","name":"[]","children":[],"call":["Attribute  new "," relation [] "," relation "," relation is_a? "]}," Arel Nodes StringJoin initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Arel Nodes SqlLiteral encode_with":{"type":"method","name":"encode_with","children":[],"call":["coder scalar= "," to_s "]}," Arel Nodes SelectStatement eql?":{"type":"method","name":"eql?","children":[],"call":[" with == ","other with "," with "," offset == ","other offset "," offset "," lock == ","other lock "," lock "," limit == ","other limit "," limit "," orders == ","other orders "," orders "," cores == ","other cores "," cores "," class == ","other class "," class "]}," Arel Nodes SelectStatement hash":{"type":"method","name":"hash","children":[],"call":["(ivar :@cores) hash "]}," Arel Nodes SelectStatement initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":["x clone ","@orders map ","@cores map "]}," Arel Nodes SelectStatement initialize":{"type":"method","name":"initialize","children":[],"call":["SelectCore  new "]}," Arel Nodes SelectCore eql?":{"type":"method","name":"eql?","children":[],"call":[" comment == ","other comment "," comment "," windows == ","other windows "," windows "," havings == ","other havings "," havings "," groups == ","other groups "," groups "," wheres == ","other wheres "," wheres "," projections == ","other projections "," projections "," optimizer_hints == ","other optimizer_hints "," optimizer_hints "," set_quantifier == ","other set_quantifier "," set_quantifier "," source == ","other source "," source "," class == ","other class "," class "]}," Arel Nodes SelectCore hash":{"type":"method","name":"hash","children":[],"call":["(ivar :@source) hash "]}," Arel Nodes SelectCore initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":["@windows clone ","@havings clone ","@groups clone ","@wheres clone ","@projections clone ","@source clone ","@windows clone  clone ","@havings clone  clone ","@groups clone  clone ","@wheres clone  clone ","@projections clone  clone ","@source clone  clone "]}," Arel Nodes SelectCore from=":{"type":"method","name":"from=","children":[],"call":["@source left= "]}," Arel Nodes SelectCore from":{"type":"method","name":"from","children":[],"call":["@source left "]}," Arel Nodes SelectCore initialize":{"type":"method","name":"initialize","children":[],"call":["JoinSource  new "]}," Arel Nodes Regexp initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Arel Nodes Over operator":{"type":"method","name":"operator","children":[],"call":[]}," Arel Nodes Over initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Arel Nodes Node each":{"type":"method","name":"each","children":[],"call":[" Arel Visitors DepthFirst  new accept "," Arel Visitors DepthFirst  new "," enum_for "," block_given? "]}," Arel Nodes Node to_sql":{"type":"method","name":"to_sql","children":[],"call":["collector value ","engine connection visitor accept ","engine connection visitor ","engine connection ","Arel Collectors SQLString  new ","engine connection visitor accept  value ","Arel Collectors SQLString  new  value "]}," Arel Nodes Node and":{"type":"method","name":"and","children":[],"call":["Nodes And  new "]}," Arel Nodes Node or":{"type":"method","name":"or","children":[],"call":["Nodes Grouping  new ","Nodes Or  new "]}," Arel Nodes Node not":{"type":"method","name":"not","children":[],"call":["Nodes Not  new "]}," Arel Nodes NamedFunction eql?":{"type":"method","name":"eql?","children":[],"call":[" name == ","other name "," name "]}," Arel Nodes NamedFunction hash":{"type":"method","name":"hash","children":[],"call":[" ^ ","@name hash "]}," Arel Nodes NamedFunction initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Arel Nodes Matches initialize":{"type":"method","name":"initialize","children":[],"call":["Nodes  build_quoted "]}," Arel Nodes JoinSource empty?":{"type":"method","name":"empty?","children":[],"call":[" right empty? "," right "," left ! "," left "]}," Arel Nodes JoinSource initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Arel Nodes InsertStatement eql?":{"type":"method","name":"eql?","children":[],"call":[" values == ","other values "," values "," select == ","other select "," select "," columns == ","other columns "," columns "," relation == ","other relation "," relation "," class == ","other class "," class "]}," Arel Nodes InsertStatement hash":{"type":"method","name":"hash","children":[],"call":["(ivar :@relation) hash "]}," Arel Nodes InsertStatement initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":["@select clone ","@values clone ","@columns clone ","@select clone  clone ","@values clone  clone ","@columns clone  clone "]}," Arel Nodes InsertStatement initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Arel Nodes BitwiseShiftRight initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Arel Nodes BitwiseShiftLeft initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Arel Nodes BitwiseXor initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Arel Nodes BitwiseOr initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Arel Nodes BitwiseAnd initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Arel Nodes Concat initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Arel Nodes Subtraction initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Arel Nodes Addition initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Arel Nodes Division initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Arel Nodes Multiplication initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Arel Nodes InfixOperation initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Arel Nodes Function eql?":{"type":"method","name":"eql?","children":[],"call":[" distinct == ","other distinct "," distinct "," alias == ","other alias "," alias "," expressions == ","other expressions "," expressions "," class == ","other class "," class "]}," Arel Nodes Function hash":{"type":"method","name":"hash","children":[],"call":["(ivar :@expressions) hash "]}," Arel Nodes Function as":{"type":"method","name":"as","children":[],"call":[" alias= ","SqlLiteral  new "]}," Arel Nodes Function initialize":{"type":"method","name":"initialize","children":[],"call":["SqlLiteral  new "]}," Arel Nodes False eql?":{"type":"method","name":"eql?","children":[],"call":[" class == ","other class "," class "]}," Arel Nodes False hash":{"type":"method","name":"hash","children":[],"call":[" class hash "," class "]}," Arel Nodes Extract eql?":{"type":"method","name":"eql?","children":[],"call":[" field == ","other field "," field "]}," Arel Nodes Extract hash":{"type":"method","name":"hash","children":[],"call":[" ^ ","@field hash "]}," Arel Nodes Extract initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Arel Nodes Equality operator":{"type":"method","name":"operator","children":[],"call":[]}," Arel Nodes Descending descending?":{"type":"method","name":"descending?","children":[],"call":[]}," Arel Nodes Descending ascending?":{"type":"method","name":"ascending?","children":[],"call":[]}," Arel Nodes Descending direction":{"type":"method","name":"direction","children":[],"call":[]}," Arel Nodes Descending reverse":{"type":"method","name":"reverse","children":[],"call":["Ascending  new "," expr "]}," Arel Nodes DeleteStatement eql?":{"type":"method","name":"eql?","children":[],"call":[" key == ","other key "," key "," offset == ","other offset "," offset "," limit == ","other limit "," limit "," orders == ","other orders "," orders "," right == ","other right "," right "," left == ","other left "," left "," class == ","other class "," class "," havings == ","other havings "," havings "," groups == ","other groups "," groups "," wheres == ","other wheres "," wheres "," relation == ","other relation "," relation "]}," Arel Nodes DeleteStatement hash":{"type":"method","name":"hash","children":[],"call":["(send\n  (self) :class) hash "," class "]}," Arel Nodes DeleteStatement initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":["@right clone ","@left clone ","@wheres clone ","@relation clone ","@right clone  clone ","@left clone  clone ","@wheres clone  clone ","@relation clone  clone "]}," Arel Nodes DeleteStatement initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Arel Nodes Count initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Arel Nodes Comment eql?":{"type":"method","name":"eql?","children":[],"call":[" values == ","other values "," values "," class == ","other class "," class "]}," Arel Nodes Comment hash":{"type":"method","name":"hash","children":[],"call":["(ivar :@values) hash "]}," Arel Nodes Comment initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":["@values clone ","@values clone  clone "]}," Arel Nodes Comment initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Arel Nodes build_quoted":{"type":"method","name":"build_quoted","children":[],"call":[]}," Arel Nodes Quoted infinite?":{"type":"method","name":"infinite?","children":[],"call":[" value infinite? "," value "," value respond_to? "]}," Arel Nodes Quoted nil?":{"type":"method","name":"nil?","children":[],"call":[" val nil? "," val "," value nil? "," value "]}," Arel Nodes Casted eql?":{"type":"method","name":"eql?","children":[],"call":[" attribute == ","other attribute "," attribute "," val == ","other val "," val "," class == ","other class "," class "," value == ","other value "," value "]}," Arel Nodes Casted hash":{"type":"method","name":"hash","children":[],"call":["(send\n  (self) :class) hash "," attribute "," val "," class "," value "]}," Arel Nodes Casted nil?":{"type":"method","name":"nil?","children":[],"call":["@val nil? "," value nil? "," value "]}," Arel Nodes Casted initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Arel Nodes Case eql?":{"type":"method","name":"eql?","children":[],"call":[" default == ","other default "," default "," conditions == ","other conditions "," conditions "," case == ","other case "," case "," class == ","other class "," class "]}," Arel Nodes Case hash":{"type":"method","name":"hash","children":[],"call":["(ivar :@case) hash "]}," Arel Nodes Case initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":["@default clone ","x clone ","@conditions map ","@case clone ","@default clone  clone ","@case clone  clone "]}," Arel Nodes Case else":{"type":"method","name":"else","children":[],"call":["Else  new ","Nodes  build_quoted "]}," Arel Nodes Case then":{"type":"method","name":"then","children":[],"call":["@conditions last right= ","Nodes  build_quoted ","@conditions last "]}," Arel Nodes Case when":{"type":"method","name":"when","children":[],"call":["@conditions << ","When  new ","Nodes  build_quoted "]}," Arel Nodes Case initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Arel Nodes BindParam unboundable?":{"type":"method","name":"unboundable?","children":[],"call":[" value unboundable? "," value "," value respond_to? "]}," Arel Nodes BindParam infinite?":{"type":"method","name":"infinite?","children":[],"call":[" value infinite? "," value "," value respond_to? "]}," Arel Nodes BindParam nil?":{"type":"method","name":"nil?","children":[],"call":[" value nil? "," value "]}," Arel Nodes BindParam eql?":{"type":"method","name":"eql?","children":[],"call":[" value == ","other value "," value ","other is_a? "]}," Arel Nodes BindParam hash":{"type":"method","name":"hash","children":[],"call":["(send\n  (self) :class) hash "," value "," class "]}," Arel Nodes BindParam initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Arel Nodes Binary eql?":{"type":"method","name":"eql?","children":[],"call":[" right == ","other right "," right "," left == ","other left "," left "," class == ","other class "," class "]}," Arel Nodes Binary hash":{"type":"method","name":"hash","children":[],"call":["(send\n  (self) :class) hash "," class "]}," Arel Nodes Binary initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":["@right clone ","@left clone ","@right clone  clone ","@left clone  clone "]}," Arel Nodes Binary initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Arel Nodes Ascending descending?":{"type":"method","name":"descending?","children":[],"call":[]}," Arel Nodes Ascending ascending?":{"type":"method","name":"ascending?","children":[],"call":[]}," Arel Nodes Ascending direction":{"type":"method","name":"direction","children":[],"call":[]}," Arel Nodes Ascending reverse":{"type":"method","name":"reverse","children":[],"call":["Descending  new "," expr "]}," Arel Nodes And eql?":{"type":"method","name":"eql?","children":[],"call":[" children == ","other children "," children "," class == ","other class "," class "]}," Arel Nodes And hash":{"type":"method","name":"hash","children":[],"call":[" children hash "," children "]}," Arel Nodes And right":{"type":"method","name":"right","children":[],"call":[" children [] "," children "]}," Arel Nodes And left":{"type":"method","name":"left","children":[],"call":[" children first "," children "]}," Arel Nodes And initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Arel Math ~@":{"type":"method","name":"~@","children":[],"call":["Arel Nodes BitwiseNot  new "]}," Arel Math >>":{"type":"method","name":">>","children":[],"call":["Arel Nodes Grouping  new ","Arel Nodes BitwiseShiftRight  new "]}," Arel Math <<":{"type":"method","name":"<<","children":[],"call":["Arel Nodes Grouping  new ","Arel Nodes BitwiseShiftLeft  new "]}," Arel Math ^":{"type":"method","name":"^","children":[],"call":["Arel Nodes Grouping  new ","Arel Nodes BitwiseXor  new "]}," Arel Math |":{"type":"method","name":"|","children":[],"call":["Arel Nodes Grouping  new ","Arel Nodes BitwiseOr  new "]}," Arel Math &":{"type":"method","name":"&","children":[],"call":["Arel Nodes Grouping  new ","Arel Nodes BitwiseAnd  new "]}," Arel Math /":{"type":"method","name":"/","children":[],"call":["Arel Nodes Division  new "]}," Arel Math -":{"type":"method","name":"-","children":[],"call":["Arel Nodes Grouping  new ","Arel Nodes Subtraction  new "]}," Arel Math +":{"type":"method","name":"+","children":[],"call":["Arel Nodes Grouping  new ","Arel Nodes Addition  new "]}," Arel Math *":{"type":"method","name":"*","children":[],"call":["Arel Nodes Multiplication  new "]}," Arel InsertManager create_values_list":{"type":"method","name":"create_values_list","children":[],"call":["Nodes ValuesList  new "]}," Arel InsertManager create_values":{"type":"method","name":"create_values","children":[],"call":["Nodes ValuesList  new ","Nodes Values  new "]}," Arel InsertManager insert":{"type":"method","name":"insert","children":[],"call":["@ast values= "," create_values ","values << ","@ast columns << ","@ast columns ","fields each ","fields first first relation ","fields first first ","fields first ","@ast relation ","Nodes SqlLiteral  new ","String  === ","fields empty? "]}," Arel InsertManager select":{"type":"method","name":"select","children":[],"call":["@ast select= "]}," Arel InsertManager values=":{"type":"method","name":"values=","children":[],"call":["@ast values= "]}," Arel InsertManager columns":{"type":"method","name":"columns","children":[],"call":["@ast columns "]}," Arel InsertManager into":{"type":"method","name":"into","children":[],"call":["@ast relation= "]}," Arel InsertManager initialize":{"type":"method","name":"initialize","children":[],"call":["Nodes InsertStatement  new "]}," Arel FactoryMethods coalesce":{"type":"method","name":"coalesce","children":[],"call":["Nodes NamedFunction  new "]}," Arel FactoryMethods lower":{"type":"method","name":"lower","children":[],"call":["Nodes NamedFunction  new ","Nodes  build_quoted "]}," Arel FactoryMethods grouping":{"type":"method","name":"grouping","children":[],"call":["Nodes Grouping  new "]}," Arel FactoryMethods create_on":{"type":"method","name":"create_on","children":[],"call":["Nodes On  new "]}," Arel FactoryMethods create_and":{"type":"method","name":"create_and","children":[],"call":["Nodes And  new "]}," Arel FactoryMethods create_string_join":{"type":"method","name":"create_string_join","children":[],"call":[" create_join "]}," Arel FactoryMethods create_join":{"type":"method","name":"create_join","children":[],"call":["klass new "]}," Arel FactoryMethods create_table_alias":{"type":"method","name":"create_table_alias","children":[],"call":["Nodes TableAlias  new "]}," Arel FactoryMethods create_false":{"type":"method","name":"create_false","children":[],"call":["Arel Nodes False  new "]}," Arel FactoryMethods create_true":{"type":"method","name":"create_true","children":[],"call":["Arel Nodes True  new "]}," Arel Expressions extract":{"type":"method","name":"extract","children":[],"call":["Nodes Extract  new "]}," Arel Expressions average":{"type":"method","name":"average","children":[],"call":["Nodes Avg  new "]}," Arel Expressions minimum":{"type":"method","name":"minimum","children":[],"call":["Nodes Min  new "]}," Arel Expressions maximum":{"type":"method","name":"maximum","children":[],"call":["Nodes Max  new "]}," Arel Expressions sum":{"type":"method","name":"sum","children":[],"call":["Nodes Sum  new "]}," Arel Expressions count":{"type":"method","name":"count","children":[],"call":["Nodes Count  new "]}," Arel DeleteManager from":{"type":"method","name":"from","children":[],"call":["@ast relation= "]}," Arel DeleteManager initialize":{"type":"method","name":"initialize","children":[],"call":["Nodes DeleteStatement  new "]}," Arel Crud compile_delete":{"type":"method","name":"compile_delete","children":[],"call":["dm from ","@ctx froms ","dm wheres= ","@ctx wheres ","dm take ","@ast limit expr ","@ast limit ","DeleteManager  new ","dm having ","having_clause nil? ","dm group ","group_values_columns empty? ","dm key= "," constraints ","dm order "," orders ","dm offset "," offset "," limit "," source ","DeleteManager  new  from ","DeleteManager  new  wheres= ","DeleteManager  new  take ","DeleteManager  new  having ","DeleteManager  new  group ","DeleteManager  new  key= ","DeleteManager  new  order ","DeleteManager  new  offset "]}," Arel Crud create_insert":{"type":"method","name":"create_insert","children":[],"call":["InsertManager  new "]}," Arel Crud compile_insert":{"type":"method","name":"compile_insert","children":[],"call":["im insert "," create_insert "," create_insert  insert "]}," Arel Crud compile_update":{"type":"method","name":"compile_update","children":[],"call":["um wheres= ","@ctx wheres ","um order ","@ast orders ","um take ","@ast limit expr ","@ast limit ","um set ","um table ","um key= ","values first first relation ","values first first ","values first ","@ctx from ","Nodes SqlLiteral  === ","UpdateManager  new ","um having ","having_clause nil? ","um group ","group_values_columns empty? "," constraints "," orders ","um offset "," offset "," limit "," source ","UpdateManager  new  wheres= ","UpdateManager  new  order ","UpdateManager  new  take ","UpdateManager  new  set ","UpdateManager  new  table ","UpdateManager  new  key= ","values first first values first first relation  ","values first first @ctx from  ","UpdateManager  new  having ","UpdateManager  new  group ","group_values_colUpdateManager  new ns empty? ","UpdateManager  new  offset "]}," Arel Collectors SubstituteBinds value":{"type":"method","name":"value","children":[],"call":[" delegate value "," delegate "]}," Arel Collectors SubstituteBinds add_bind":{"type":"method","name":"add_bind","children":[],"call":[" << "," quoter quote "," quoter ","bind value_for_database ","bind respond_to? ","bind value_for_database  value_for_database ","bind value_for_database  respond_to? "]}," Arel Collectors SubstituteBinds <<":{"type":"method","name":"<<","children":[],"call":[" delegate << "," delegate "]}," Arel Collectors SubstituteBinds initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Arel Collectors SQLString add_bind":{"type":"method","name":"add_bind","children":[],"call":[" << "]}," Arel Collectors SQLString initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Arel Collectors PlainString <<":{"type":"method","name":"<<","children":[],"call":["@str << "]}," Arel Collectors PlainString value":{"type":"method","name":"value","children":[],"call":[]}," Arel Collectors PlainString initialize":{"type":"method","name":"initialize","children":[],"call":[" +@ "]}," Arel Collectors Composite value":{"type":"method","name":"value","children":[],"call":[" right value "," right "," left value "," left "]}," Arel Collectors Composite add_bind":{"type":"method","name":"add_bind","children":[],"call":[" right add_bind "," right "," left add_bind "," left "]}," Arel Collectors Composite <<":{"type":"method","name":"<<","children":[],"call":[" right << "," right "," left << "," left "]}," Arel Collectors Composite initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Arel Collectors Bind value":{"type":"method","name":"value","children":[],"call":[]}," Arel Collectors Bind add_bind":{"type":"method","name":"add_bind","children":[],"call":["@binds << "]}," Arel Collectors Bind <<":{"type":"method","name":"<<","children":[],"call":[]}," Arel Collectors Bind initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Arel Attributes for":{"type":"method","name":"for","children":[],"call":[]}," Arel Attributes Attribute able_to_type_cast?":{"type":"method","name":"able_to_type_cast?","children":[],"call":[" relation able_to_type_cast? "," relation "]}," Arel Attributes Attribute type_cast_for_database":{"type":"method","name":"type_cast_for_database","children":[],"call":[" relation type_cast_for_database "," name "," relation "]}," Arel Attributes Attribute lower":{"type":"method","name":"lower","children":[],"call":[" relation lower "," relation "]}," Arel AliasPredication as":{"type":"method","name":"as","children":[],"call":["Nodes As  new ","Nodes SqlLiteral  new "]}," ActiveRecord TypeCaster Connection type_for_attribute":{"type":"method","name":"type_for_attribute","children":[],"call":["Type  default_value "," connection lookup_cast_type_from_column "," connection ","schema_cache columns_hash [] ","attr_name to_s ","schema_cache columns_hash "," table_name ","schema_cache data_source_exists? "," connection schema_cache "," connection lookup_cast_ connection lookup_cast_type_from_column _from_column "," connection lookup_cast_type_from_schema_cache columns_hash []  ","schema_cache schema_cache columns_hash [] s_hash [] "," connection schema_cache  columns_hash [] ","schema_cache schema_cache columns_hash [] s_hash "," connection schema_cache  columns_hash "," connection schema_cache  data_source_exists? "," connection  connection schema_cache  "]}," ActiveRecord Transactions trigger_transactional_callbacks?":{"type":"method","name":"trigger_transactional_callbacks?","children":[],"call":[" destroyed? "," _trigger_destroy_callback "," persisted? "," _trigger_update_callback "]}," ActiveRecord Transactions ClassMethods after_save_commit":{"type":"method","name":"after_save_commit","children":[],"call":[" set_callback "," set_options_for_callbacks! "," prepend_option "]}," ActiveRecord Timestamp create_or_update":{"type":"method","name":"create_or_update","children":[],"call":[]}," ActiveRecord Timestamp ClassMethods reload_schema_from_cache":{"type":"method","name":"reload_schema_from_cache","children":[],"call":[]}," ActiveRecord TestFixtures setup_shared_connection_pool":{"type":"method","name":"setup_shared_connection_pool","children":[],"call":["handler send []= ","handler send ","writing_handler retrieve_connection_pool ","pool spec name ","pool spec ","handler connection_pool_list each ","handler connection_pool_list ","handler != ","ActiveRecord Base  connection_handlers values each ","ActiveRecord Base  connection_handlers values ","ActiveRecord Base  connection_handlers ","ActiveRecord Base  connection_handler ","@saved_pool_configs [] []= ","@saved_pool_configs [] ","reading_connection == ","handler send [] ","ActiveRecord Base  connection_handlers [] ","ActiveRecord Base  writing_role ","pool_manager set_pool_config ","pool_manager get_pool_config ","pool_manager role_names each ","pool_manager role_names ","pool_manager shard_names each ","pool_manager shard_names ","handler connection_pool_names each ","handler connection_pool_names ","writing_pool_manager get_pool_config ","writing_handler send [] ","writing_handler send ","ActiveRecord Base  legacy_connection_handling ","@saved_pool_configs [] [] []= ","@saved_pool_configs [] [] ","pool_config == ","@legacy_saved_pool_configs [] [] []= ","@legacy_saved_pool_configs [] [] ","@legacy_saved_pool_configs [] ","ActiveRecord  writing_role ","ActiveRecord  legacy_connection_handling ","ActiveRecord Base  connection_handler  send []= ","ActiveRecord Base  connection_handler  send ","ActiveRecord Base  connection_handler  retrieve_connection_pool ","ActiveRecord Base  connection_handlers []  retrieve_connection_pool ","writing_ActiveRecord Base  connection_handler  retrieve_connection_pool ","pool spec pool spec name  ","ActiveRecord Base  connection_handler  connection_pool_list each ","ActiveRecord Base  connection_handler  connection_pool_list ","ActiveRecord Base  connection_handler  != ","ActiveRecord Base  connection_ActiveRecord Base  connection_handler s values each ","ActiveRecord Base  connection_ActiveRecord Base  connection_handler s values ","ActiveRecord Base  connection_ActiveRecord Base  connection_handler s ","ActiveRecord Base  connection_ActiveRecord Base  connection_handler  ","@saved_pool_manager get_pool_config s [] []= ","@saved_pool_manager get_pool_config s [] ","handler send []  == ","ActiveRecord Base  connection_handler  send [] ","ActiveRecord Base  connection_ActiveRecord Base  connection_handler s [] ","handler send []  set_pool_config ","pool_manager set_pool_manager get_pool_config  ","handler send []  get_pool_config ","pool_manager get_pool_manager get_pool_config  ","pool_manager role_pool spec name s each ","handler send []  role_names each ","pool_manager role_pool spec name s ","handler send []  role_names ","pool_manager shard_pool spec name s each ","handler send []  shard_names each ","pool_manager shard_pool spec name s ","handler send []  shard_names ","handler connection_pool_pool spec name s each ","ActiveRecord Base  connection_handler  connection_pool_names each ","handler connection_pool_pool spec name s ","ActiveRecord Base  connection_handler  connection_pool_names ","writing_handler send []  get_pool_config ","writing_pool_manager get_pool_manager get_pool_config  ","ActiveRecord Base  connection_handlers []  send [] ","writing_ActiveRecord Base  connection_handler  send [] ","ActiveRecord Base  connection_handlers []  send ","writing_ActiveRecord Base  connection_handler  send ","@saved_pool_manager get_pool_config s [] [] []= ","@saved_pool_manager get_pool_config s [] [] ","pool_manager get_pool_config  == ","@legacy_saved_pool_manager get_pool_config s [] [] []= ","@legacy_saved_pool_manager get_pool_config s [] [] ","@legacy_saved_pool_manager get_pool_config s [] "]}," ActiveRecord TestDatabases create_and_load_schema":{"type":"method","name":"create_and_load_schema","children":[],"call":[]}," ActiveRecord Tasks DatabaseTasks schema_sha1":{"type":"method","name":"schema_sha1","children":[],"call":["Digest SHA1  hexdigest ","File  read ","OpenSSL Digest SHA1  hexdigest "]}," ActiveRecord Tasks DatabaseTasks verbose?":{"type":"method","name":"verbose?","children":[],"call":["ENV  [] != ","ENV  [] "]}," ActiveRecord Tasks DatabaseTasks cache_dump_filename":{"type":"method","name":"cache_dump_filename","children":[],"call":["File  join ","ActiveRecord Tasks DatabaseTasks  db_dir ","ENV  [] ","namespace == ","ActiveRecord Base  configurations primary? ","ActiveRecord Base  configurations "]}," ActiveRecord Tasks DatabaseTasks dump_filename":{"type":"method","name":"dump_filename","children":[],"call":["File  join ","ActiveRecord Tasks DatabaseTasks  db_dir ","ENV  [] "," schema_file_type ","namespace == ","ActiveRecord Base  configurations primary? ","ActiveRecord Base  configurations "]}," ActiveRecord Tasks DatabaseTasks schema_file_type":{"type":"method","name":"schema_file_type","children":[],"call":[]}," ActiveRecord Tasks DatabaseTasks dump_schema":{"type":"method","name":"dump_schema","children":[],"call":["f print ","f puts ","connection dump_schema_information ","File  open ","connection schema_migration table_exists? ","connection schema_migration "," structure_dump ","ActiveRecord SchemaDumper  dump ","ActiveRecord Base  connection "," dump_filename "," require ","db_config name ","FileUtils  mkdir_p "," db_dir "," schema_dump_path "," migration_connection dump_schema_information "," migration_connection "," migration_connection schema_migration table_exists? "," migration_connection schema_migration ","db_config schema_dump ","ActiveRecord Base  connection  dump_schema_information ","ActiveRecord Base  connection  schema_migration table_exists? ","ActiveRecord Base  connection  schema_migration ","ActiveRecord Base  ActiveRecord Base  connection  "," dump_ dump_filename  "," dump_ schema_dump_path  "," migration_ActiveRecord Base  connection  dump_schema_information "," migration_ActiveRecord Base  connection  "," migration_ActiveRecord Base  connection  schema_migration table_exists? "," migration_ActiveRecord Base  connection  schema_migration "]}," ActiveRecord Tasks DatabaseTasks reconstruct_from_schema":{"type":"method","name":"reconstruct_from_schema","children":[],"call":[" load_schema "," create "," purge "," truncate_tables "," schema_up_to_date? ","ActiveRecord Base  establish_connection "," check_schema_file "," dump_filename ","db_config name "," schema_dump_path "," with_temporary_pool "]}," ActiveRecord Tasks DatabaseTasks schema_up_to_date?":{"type":"method","name":"schema_up_to_date?","children":[],"call":["ActiveRecord InternalMetadata  [] == "," schema_sha1 ","ActiveRecord InternalMetadata  [] ","ActiveRecord InternalMetadata  table_exists? ","ActiveRecord Base  establish_connection ","File  exist? "," dump_filename ","ActiveRecord InternalMetadata  enabled? ","db_config name ","ActiveSupport Deprecation  warn "," resolve_configuration "," schema_dump_path ","connection internal_metadata [] == ","connection internal_metadata [] ","connection internal_metadata ","connection internal_metadata table_exists? ","connection internal_metadata enabled? "," with_temporary_connection "," resolve_configuration  name "]}," ActiveRecord Tasks DatabaseTasks migrate_status":{"type":"method","name":"migrate_status","children":[],"call":[" puts ","version ljust ","status center ","ActiveRecord Base  connection migration_context migrations_status each ","ActiveRecord Base  connection migration_context migrations_status ","ActiveRecord Base  connection migration_context ","ActiveRecord Base  connection ","- * ","Migration ID ljust ","Status center ","ActiveRecord Base  connection_config [] ","ActiveRecord Base  connection_config ","Kernel  abort ","ActiveRecord Base  connection schema_migration table_exists? ","ActiveRecord Base  connection schema_migration ","ActiveRecord SchemaMigration  table_exists? ","ActiveRecord Base  connection_db_config database ","ActiveRecord Base  connection_db_config "," migration_connection migration_context migrations_status each "," migration_connection migration_context migrations_status "," migration_connection migration_context "," migration_connection "," migration_connection pool db_config database "," migration_connection pool db_config "," migration_connection pool "," migration_connection schema_migration table_exists? "," migration_connection schema_migration "]}," ActiveRecord Tasks DatabaseTasks truncate_all":{"type":"method","name":"truncate_all","children":[],"call":[" truncate_tables ","db_config config ","ActiveRecord Base  configurations configs_for each ","ActiveRecord Base  configurations configs_for ","ActiveRecord Base  configurations "," configs_for each "," configs_for "]}," ActiveRecord Tasks DatabaseTasks truncate_tables":{"type":"method","name":"truncate_tables","children":[],"call":["ActiveRecord Base  connection truncate_tables ","ActiveRecord Base  connection ","InternalMetadata  table_name ","conn schema_migration table_name ","conn schema_migration ","conn tables ","ActiveRecord Base  connected_to ","SchemaMigration  table_name ","ActiveRecord Base  connection tables ","connection truncate_tables ","connection tables ","ActiveRecord Base  establish_connection ","conn truncate_tables "," with_temporary_connection ","ActiveRecord Base  ActiveRecord Base  connection ection truncate_tables ","ActiveRecord Base  ActiveRecord Base  connection  truncate_tables ","ActiveRecord Base  ActiveRecord Base  connection ection ","ActiveRecord Base  ActiveRecord Base  connection  ","ActiveRecord Base  connection  schema_migration table_name ","ActiveRecord Base  connection  schema_migration ","ActiveRecord Base  connection  tables ","ActiveRecord Base  ActiveRecord Base  connection ected_to ","ActiveRecord Base  ActiveRecord Base  connection ection tables ","ActiveRecord Base  ActiveRecord Base  connection  tables ","ActiveRecord Base  connection ection truncate_tables ","ActiveRecord Base  connection  truncate_tables ","ActiveRecord Base  connection ection tables ","ActiveRecord Base  establish_ActiveRecord Base  connection ection ","ActiveRecord Base  establish_ActiveRecord Base  connection  "," with_temporary_ActiveRecord Base  connection ection "," with_temporary_ActiveRecord Base  connection  "]}," ActiveRecord Tasks DatabaseTasks raise_for_multi_db":{"type":"method","name":"raise_for_multi_db","children":[],"call":[" raise ","dbs_list to_sentence ","dbs_list << ","db spec_name ","db_configs each ","db_configs count > ","db_configs count ","ActiveRecord Base  configurations configs_for ","ActiveRecord Base  configurations ","db name "," configs_for ","ActiveRecord Base  configurations configs_for  each "," configs_for  each ","ActiveRecord Base  configurations configs_for  count > "," configs_for  count > ","ActiveRecord Base  configurations configs_for  count "," configs_for  count "]}," ActiveRecord Tasks DatabaseTasks for_each":{"type":"method","name":"for_each","children":[],"call":["db_config spec_name ","database_configs each ","database_configs count == ","database_configs count ","ActiveRecord DatabaseConfigurations  new configs_for ","Rails  env ","ActiveRecord DatabaseConfigurations  new ","Rails  application config database_configuration ","Rails  application config ","Rails  application ","Rails  application config load_database_yaml ","db_config name ","db_config database_tasks? ","ActiveRecord DatabaseConfigurations  new configs_for  each ","ActiveRecord DatabaseConfigurations  new configs_for  count == ","ActiveRecord DatabaseConfigurations  new configs_for  count "]}," ActiveRecord Tasks DatabaseTasks setup_initial_database_yaml":{"type":"method","name":"setup_initial_database_yaml","children":[],"call":["$stderr puts ","Rails  application config load_database_yaml ","Rails  application config ","Rails  application ","ActiveRecord Base  suppress_multiple_database_warning ","ActiveRecord  suppress_multiple_database_warning "]}," ActiveRecord Tasks DatabaseTasks spec":{"type":"method","name":"spec","children":[],"call":[]}," ActiveRecord StatementCache partial_query_collector":{"type":"method","name":"partial_query_collector","children":[],"call":[]}," ActiveRecord StatementCache PartialQueryCollector value":{"type":"method","name":"value","children":[],"call":[]}," ActiveRecord StatementCache PartialQueryCollector add_bind":{"type":"method","name":"add_bind","children":[],"call":["@parts << ","Substitute  new ","@binds << "]}," ActiveRecord StatementCache PartialQueryCollector <<":{"type":"method","name":"<<","children":[],"call":["@parts << "]}," ActiveRecord StatementCache PartialQueryCollector initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord SchemaMigration _internal?":{"type":"method","name":"_internal?","children":[],"call":[]}," ActiveRecord Sanitization ClassMethods disallow_raw_sql!":{"type":"method","name":"disallow_raw_sql!","children":[],"call":[" raise ","Query method called with non-attribute argument(s):  + ","unexpected map join ","unexpected map ","ActiveSupport Deprecation  warn "," allow_unsafe_raw_sql == "," allow_unsafe_raw_sql ","(or-asgn\n  (lvasgn :unexpected)\n  (array)) << ","permit match? ","arg to_s ","Arel  arel_node? ","arg is_a? ","args each ","arg to_s strip "]}," ActiveRecord Result includes_column?":{"type":"method","name":"includes_column?","children":[],"call":["@columns include? "]}," ActiveRecord Relation _increment_attribute":{"type":"method","name":"_increment_attribute","children":[],"call":["expr expr ","expr + ","expr - ","value < "," table coalesce ","Arel Nodes UnqualifiedColumn  new "," table "," predicate_builder build_bind_attribute ","value abs ","attribute name "," predicate_builder ","expr +  expr +  ","expr -  expr -  "," table coalesce   table coalesce  ","expr +  + ","expr -  + "," table coalesce  + ","expr +  - ","expr -  - "," table coalesce  - "," predicate_builder build_ predicate_builder build_bind_attribute _attribute "]}," ActiveRecord Relation _substitute_values":{"type":"method","name":"_substitute_values","children":[],"call":[" predicate_builder build_bind_attribute ","type cast ","attr name "," predicate_builder "," klass type_for_attribute "," klass ","Arel  arel_node? "," arel_attribute ","values map "," table [] "," table "," predicate_builder build_bind_ arel_attribute ibute "," predicate_builder build_bind_ table [] ibute "," klass type_for_attribute  cast "," arel_attribute  name "," table []  name "," klass  klass type_for_attribute _for_attribute "," klass type_for_ arel_attribute ibute "," klass type_for_ table [] ibute "," arel_ arel_attribute ibute "," arel_ table [] ibute "," predicate_builder build_bind_attribute s map "]}," ActiveRecord Relation _scoping":{"type":"method","name":"_scoping","children":[],"call":[" klass current_scope= "," klass "," klass current_scope ","registry set_global_current_scope ","registry set_current_scope ","registry global_current_scope ","registry current_scope "]}," ActiveRecord Relation _deprecated_scope_block":{"type":"method","name":"_deprecated_scope_block","children":[],"call":[" block_given? "," klass current_scope= "," _deprecated_spawn "," klass "," lambda "]}," ActiveRecord Relation _deprecated_spawn":{"type":"method","name":"_deprecated_spawn","children":[],"call":["scope _deprecated_scope_source= "," spawn tap "," spawn "]}," ActiveRecord Relation already_in_scope?":{"type":"method","name":"already_in_scope?","children":[],"call":["scope _deprecated_scope_source ! ","scope _deprecated_scope_source "," klass current_scope "," klass ","registry current_scope "," klass current_scope  _deprecated_ klass current_scope _source ! "," klass current_scope  _deprecated_ klass current_scope _source "," klass current_ klass current_scope  ","registry current_ klass current_scope  "]}," ActiveRecord Relation null_relation?":{"type":"method","name":"null_relation?","children":[],"call":[" is_a? "]}," ActiveRecord Relation preload_associations":{"type":"method","name":"preload_associations","children":[],"call":["preloader preload "," build_preloader ","preload each "," includes_values "," eager_loading? "," preload_values "," strict_loading_value ","ActiveRecord Associations Preloader  new call ","ActiveRecord Associations Preloader  new "," preload_values er  preload_values  "," build_ preload_values er "," preload_values  each ","  preload_values _values "]}," ActiveRecord Relation delete_by":{"type":"method","name":"delete_by","children":[],"call":[" where delete_all "," where "]}," ActiveRecord Relation destroy_by":{"type":"method","name":"destroy_by","children":[],"call":[" where destroy_all "," where "]}," ActiveRecord Relation touch_all":{"type":"method","name":"touch_all","children":[],"call":[" update_all "," klass touch_attributes_with_time "," klass "," update_counters "," klass locking_column ","names << "," klass locking_enabled? "]}," ActiveRecord Relation update_counters":{"type":"method","name":"update_counters","children":[],"call":[" update_all ","updates merge! ","touch_updates empty? "," klass touch_attributes_with_time "," klass ","touch != ","updates []= "," _increment_attribute ","attr name "," arel_attribute ","counters each ","counters delete ","expr expr ","expr + ","expr - ","value < "," table coalesce ","Arel Nodes UnqualifiedColumn  new "," table "," predicate_builder build_bind_attribute ","value abs "," predicate_builder ","names extract_options! ","Array  wrap "," table [] "," klass touch_attributes_with_time  empty? ","counters delete _updates empty? "," klass touch_ arel_attribute ibutes_with_time "," klass touch_ table [] ibutes_with_time "," klass counters delete _attributes_with_time ","counters delete  != "," _increment_ arel_attribute ibute "," _increment_ table [] ibute "," arel_attribute  name "," table []  name "," arel_ arel_attribute ibute "," arel_ table [] ibute ","expr +  expr +  ","expr -  expr -  "," table coalesce   table coalesce  ","expr +  + ","expr -  + "," table coalesce  + ","expr +  - ","expr -  - "," table coalesce  - "," predicate_builder build_bind_ arel_attribute ibute "," predicate_builder build_bind_ table [] ibute "," predicate_builder build_ predicate_builder build_bind_attribute _attribute ","names extract_names extract_options! ! ","Array  wrap  extract_options! "]}," ActiveRecord Relation compute_cache_version":{"type":"method","name":"compute_cache_version","children":[],"call":["timestamp utc to_s "," cache_timestamp_format ","timestamp utc ","result [] ","column_type deserialize "," klass type_for_attribute "," klass "," connection select_one "," connection ","query arel ","query select_values= ","select_values % ","collection unscope ","query build_subquery ","collection select ","collection has_limit_or_offset? "," connection quote_column_name "," connection visitor compile "," arel_attribute "," connection visitor "," apply_join_dependency "," eager_loading? "," max_by _read_attribute "," max_by ","size > "," records size "," records "," distinct_value "," loaded? "," connection select_rows first "," connection select_rows "," table [] "," table ","(send\n  (send nil :records) :map) max ","record read_attribute "," records map ","timestamp_column to_s ","timestamp utc to_formatted_s ","query _select! ","Arel  star ","collection select_values empty? ","collection select_values ","timestamp utc to_fs ","column_type deserialize  utc to_s "," max_by _read_attribute  utc to_s ","(send\n  (send nil :records) :map) max  utc to_s "," cache_column_type deserialize _format "," cache_ max_by _read_attribute _format "," cache_(send\n  (send nil :records) :map) max _format ","column_type deserialize  utc "," max_by _read_attribute  utc ","(send\n  (send nil :records) :map) max  utc "," connection select_one  [] "," klass type_for_attribute  deserialize "," connection visitor compile _type deserialize ","query query arel  ","query query build_subquery  ","collection unscope  arel ","collection select  arel ","collection unscope  select_values= ","collection select  select_values= "," apply_join_dependency  unscope ","collection unscope  build_subcollection unscope  ","collection select  build_subcollection select  "," apply_join_dependency  select "," apply_join_dependency  has_limit_or_offset? "," connection quote_ connection visitor compile _name "," query arel _attribute "," query build_subquery _attribute ","result []  > "," records size  > "," records result []  "," records  records size  ","column_type deserialize _column to_s "," max_by _read_attribute _column to_s ","(send\n  (send nil :records) :map) max _column to_s ","timestamp_ connection visitor compile  to_s ","timestamp_column to_s  to_s ","column_type deserialize  utc to_formatted_s "," max_by _read_attribute  utc to_formatted_s ","(send\n  (send nil :records) :map) max  utc to_formatted_s ","collection unscope  _select! ","collection select  _select! "," apply_join_dependency  select_values empty? "," apply_join_dependency  select_values ","column_type deserialize  utc to_fs "," max_by _read_attribute  utc to_fs ","(send\n  (send nil :records) :map) max  utc to_fs "]}," ActiveRecord Relation cache_version":{"type":"method","name":"cache_version","children":[],"call":[" compute_cache_version ","@cache_versions [] "," collection_cache_versioning "]}," ActiveRecord Relation compute_cache_key":{"type":"method","name":"compute_cache_key","children":[],"call":[" compute_cache_version "," cache_version "," klass model_name cache_key "," klass model_name "," klass ","ActiveSupport Digest  hexdigest "," to_sql "," collection_cache_versioning "]}," ActiveRecord Relation create_or_find_by!":{"type":"method","name":"create_or_find_by!","children":[],"call":[" find_by! "," create! "," transaction "," where lock find_by! "," where lock "," where "," connection transaction_open? "," connection "]}," ActiveRecord Relation create_or_find_by":{"type":"method","name":"create_or_find_by","children":[],"call":[" find_by! "," create "," transaction "," where lock find_by! "," where lock "," where "," connection transaction_open? "," connection "]}," ActiveRecord Relation bind_attribute":{"type":"method","name":"bind_attribute","children":[],"call":[" predicate_builder build_bind_attribute ","attr name "," predicate_builder "," arel_attribute ","value read_attribute ","reflection klass primary_key ","reflection klass ","value nil? ","reflection foreign_key "," klass _reflect_on_association "," klass "," table [] "," table ","reflection association_primary_key "," predicate_builder build_ predicate_builder build_bind_attribute _attribute "," predicate_builder build_bind_ arel_attribute ibute "," predicate_builder build_bind_ table [] ibute "," arel_attribute  name "," table []  name ","attr reflection foreign_key  "," arel_ arel_attribute ibute "," arel_ table [] ibute ","value read_ arel_attribute ibute ","value read_ table [] ibute ","value read_attribute  read_attribute "," klass _reflect_on_association  klass primary_key "," klass _reflect_on_association  klass ","value read_attribute  nil? "," klass _reflect_on_association  foreign_key "," klass _reflect_on_association  association_primary_key "]}," ActiveRecord QueryMethods valid_association_list":{"type":"method","name":"valid_association_list","children":[],"call":[" raise ","associations each "," select_association_list "]}," ActiveRecord QueryMethods build_subquery":{"type":"method","name":"build_subquery","children":[],"call":["arel optimizer_hints "," optimizer_hints_values "," optimizer_hints_values empty? ","Arel SelectManager  new project tap ","Arel SelectManager  new project ","Arel SelectManager  new "," except arel as "," except arel "," except "]}," ActiveRecord QueryMethods construct_join_dependency":{"type":"method","name":"construct_join_dependency","children":[],"call":["ActiveRecord Associations JoinDependency  new "," table "," klass "]}," ActiveRecord QueryMethods annotate!":{"type":"method","name":"annotate!","children":[],"call":[" annotate_values "]}," ActiveRecord QueryMethods annotate":{"type":"method","name":"annotate","children":[],"call":[" spawn annotate! "," spawn "," check_if_method_has_arguments! "," __callee__ "]}," ActiveRecord QueryMethods skip_preloading!":{"type":"method","name":"skip_preloading!","children":[],"call":[" skip_preloading_value= "]}," ActiveRecord QueryMethods optimizer_hints!":{"type":"method","name":"optimizer_hints!","children":[],"call":[" optimizer_hints_values ","args flatten! "]}," ActiveRecord QueryMethods optimizer_hints":{"type":"method","name":"optimizer_hints","children":[],"call":[" spawn optimizer_hints! "," spawn "," check_if_method_has_arguments! "," __callee__ "]}," ActiveRecord QueryMethods reselect!":{"type":"method","name":"reselect!","children":[],"call":[" select_values= "]}," ActiveRecord QueryMethods reselect":{"type":"method","name":"reselect","children":[],"call":[" spawn reselect! "," spawn "," check_if_method_has_arguments! "," __callee__ "," process_select_args "," process_select_ process_select_args  "]}," ActiveRecord QueryMethods extract_associated":{"type":"method","name":"extract_associated","children":[],"call":[" preload collect "," preload "]}," ActiveRecord QueryMethods WhereChain not_behaves_as_nor?":{"type":"method","name":"not_behaves_as_nor?","children":[],"call":["opts size > ","opts size ","opts is_a? ","v size > ","v size ","v is_a? ","opts any? "]}," ActiveRecord Relation QueryAttribute unboundable?":{"type":"method","name":"unboundable?","children":[],"call":[" type cast <=> "," type cast "," value_before_type_cast "," type "," value_for_database "," value_before_type_cast is_a? ","value <=> "," serializable? "]}," ActiveRecord Relation QueryAttribute infinite?":{"type":"method","name":"infinite?","children":[],"call":[" infinity? "," value_for_database "," value_before_type_cast "," serializable? "]}," ActiveRecord Delegation GeneratedRelationMethods generate_method":{"type":"method","name":"generate_method","children":[],"call":[" klass public_send "," klass "," scoping "," define_method "," module_eval ","63 + ","(str \"\\\\A[a-zA-Z_]\\\\w*[!?]?\\\\z\") match? "," method_defined? "," synchronize "," ruby2_keywords "," respond_to? ","64 + ","RUBY_VERSION  >= ","65 + ","DELEGATION_RESERVED_METHOD_NAMES  include? ! ","DELEGATION_RESERVED_METHOD_NAMES  include? ","method to_s ","77 + "]}," ActiveRecord Calculations pick":{"type":"method","name":"pick","children":[],"call":[" limit pluck first "," limit pluck "," limit "," records pick "," records "," all_attributes? "," loaded? "," limit pluck then ","Promise Complete  new "]}," ActiveRecord Batches apply_finish_limit":{"type":"method","name":"apply_finish_limit","children":[],"call":["relation where ","attr lteq "," bind_attribute "," primary_key "," predicate_builder [] ","order == "," predicate_builder "," batch_condition ","batch_orders map "]}," ActiveRecord Batches apply_start_limit":{"type":"method","name":"apply_start_limit","children":[],"call":["relation where ","attr gteq "," bind_attribute "," primary_key "," predicate_builder [] ","order == "," predicate_builder "," batch_condition ","batch_orders map "]}," ActiveRecord Reflection reflection_class_for":{"type":"method","name":"reflection_class_for","children":[],"call":[" raise "]}," ActiveRecord Railties CollectionCacheAssociationLoading collection_with_template":{"type":"method","name":"collection_with_template","children":[],"call":["@relation preload_associations "]}," ActiveRecord Railties CollectionCacheAssociationLoading collection_without_template":{"type":"method","name":"collection_without_template","children":[],"call":["@relation preload_associations "]}," ActiveRecord Railties CollectionCacheAssociationLoading relation_from_options":{"type":"method","name":"relation_from_options","children":[],"call":["relation skip_preloading! ","relation loaded? ! ","relation loaded? ","collection is_a? ","partial is_a? "]}," ActiveRecord Railties CollectionCacheAssociationLoading setup":{"type":"method","name":"setup","children":[],"call":[" relation_from_options "]}," ActiveRecord Persistence ClassMethods instantiate_instance_of":{"type":"method","name":"instantiate_instance_of","children":[],"call":["klass allocate init_with_attributes ","klass allocate ","klass attributes_builder build_from_database ","klass attributes_builder ","klass allocate init_with_klass attributes_builder build_from_database  ","klass klass attributes_builder build_from_database _builder build_from_database ","klass klass attributes_builder build_from_database _builder "]}," ActiveRecord Persistence ClassMethods upsert_all":{"type":"method","name":"upsert_all","children":[],"call":["InsertAll  new execute ","InsertAll  new "]}," ActiveRecord Persistence ClassMethods upsert":{"type":"method","name":"upsert","children":[],"call":[" upsert_all "]}," ActiveRecord Persistence ClassMethods insert_all!":{"type":"method","name":"insert_all!","children":[],"call":["InsertAll  new execute ","InsertAll  new "]}," ActiveRecord Persistence ClassMethods insert!":{"type":"method","name":"insert!","children":[],"call":[" insert_all! "]}," ActiveRecord Persistence ClassMethods insert_all":{"type":"method","name":"insert_all","children":[],"call":["InsertAll  new execute ","InsertAll  new "]}," ActiveRecord Persistence ClassMethods insert":{"type":"method","name":"insert","children":[],"call":[" insert_all "]}," ActiveRecord ModelSchema ClassMethods symbol_column_to_string":{"type":"method","name":"symbol_column_to_string","children":[],"call":["@symbol_column_to_string_name_hash [] "," column_names index_by "," column_names "]}," ActiveRecord Migration command_recorder":{"type":"method","name":"command_recorder","children":[],"call":["CommandRecorder  new "," connection "]}," ActiveRecord Migration Compatibility V5_2 command_recorder":{"type":"method","name":"command_recorder","children":[],"call":[" prepend "]}," ActiveRecord Migration Compatibility V5_2 compatible_table_definition":{"type":"method","name":"compatible_table_definition","children":[],"call":[" prepend "]}," ActiveRecord Migration Compatibility V5_2 add_timestamps":{"type":"method","name":"add_timestamps","children":[],"call":["options [] "]}," ActiveRecord Migration Compatibility V5_2 create_join_table":{"type":"method","name":"create_join_table","children":[],"call":[" compatible_table_definition "," block_given? "]}," ActiveRecord Migration Compatibility V5_2 change_table":{"type":"method","name":"change_table","children":[],"call":[" compatible_table_definition "," block_given? "]}," ActiveRecord Migration Compatibility V5_2 create_table":{"type":"method","name":"create_table","children":[],"call":[" compatible_table_definition "," block_given? "]}," ActiveRecord Migration Compatibility V5_2 CommandRecorder invert_change_table_comment":{"type":"method","name":"invert_change_table_comment","children":[],"call":[]}," ActiveRecord Migration Compatibility V5_2 CommandRecorder invert_change_column_comment":{"type":"method","name":"invert_change_column_comment","children":[],"call":[]}," ActiveRecord Migration Compatibility V5_2 CommandRecorder invert_transaction":{"type":"method","name":"invert_transaction","children":[],"call":[]}," ActiveRecord Migration Compatibility V5_2 TableDefinition timestamps":{"type":"method","name":"timestamps","children":[],"call":["options [] "]}," ActiveRecord Migration CommandRecorder invert_change_table_comment":{"type":"method","name":"invert_change_table_comment","children":[],"call":["options [] "," raise ","options has_key? ","options is_a? "]}," ActiveRecord Migration CommandRecorder invert_change_column_comment":{"type":"method","name":"invert_change_column_comment","children":[],"call":["options [] "," raise ","options has_key? ","options is_a? "]}," ActiveRecord Migration CommandRecorder invert_transaction":{"type":"method","name":"invert_transaction","children":[],"call":["sub_recorder replay "," proc ","sub_recorder revert ","CommandRecorder  new "," delegate ","CommandRecorder  new  replay ","CommandRecorder  new  revert "]}," ActiveRecord Migration CommandRecorder replay":{"type":"method","name":"replay","children":[],"call":["migration send "," commands each "," commands "]}," ActiveRecord Middleware DatabaseSelector reading_request?":{"type":"method","name":"reading_request?","children":[],"call":["request head? ","request get? "]}," ActiveRecord Middleware DatabaseSelector select_database":{"type":"method","name":"select_database","children":[],"call":["resolver write ","resolver read "," reading_request? "," resolver_klass call "," options "," resolver_klass "," context_klass call "," context_klass ","resolver update_context ","resolver reading_request? "," resolver_klass call  write "," resolver_klass call  read ","  resolver_klass call _klass call ","  resolver_klass call _klass ","  context_klass call _klass call ","  context_klass call _klass "," resolver_klass call  update_context ","resolver update_ context_klass call  "," resolver_klass call  reading_request? "]}," ActiveRecord Middleware DatabaseSelector call":{"type":"method","name":"call","children":[],"call":["@app call "," select_database ","ActionDispatch Request  new "]}," ActiveRecord Middleware DatabaseSelector initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Middleware DatabaseSelector Resolver time_since_last_write_ok?":{"type":"method","name":"time_since_last_write_ok?","children":[],"call":["Time  now - >= "," send_to_replica_delay ","Time  now - "," context last_write_timestamp "," context ","Time  now "]}," ActiveRecord Middleware DatabaseSelector Resolver send_to_replica_delay":{"type":"method","name":"send_to_replica_delay","children":[],"call":[" delay "]}," ActiveRecord Middleware DatabaseSelector Resolver read_from_primary?":{"type":"method","name":"read_from_primary?","children":[],"call":[" time_since_last_write_ok? ! "," time_since_last_write_ok? "]}," ActiveRecord Middleware DatabaseSelector Resolver write_to_primary":{"type":"method","name":"write_to_primary","children":[],"call":[" context update_last_write_timestamp "," context "," instrumenter instrument "," instrumenter ","ActiveRecord Base  connection_handler while_preventing_writes ","ActiveRecord Base  connection_handler ","ActiveRecord Base  connected_to ","ActiveRecord Base  writing_role ","ActiveRecord  writing_role "]}," ActiveRecord Middleware DatabaseSelector Resolver read_from_replica":{"type":"method","name":"read_from_replica","children":[],"call":[" instrumenter instrument "," instrumenter ","ActiveRecord Base  connected_to ","ActiveRecord Base  reading_role ","ActiveRecord  reading_role "]}," ActiveRecord Middleware DatabaseSelector Resolver read_from_primary":{"type":"method","name":"read_from_primary","children":[],"call":[" instrumenter instrument "," instrumenter ","ActiveRecord Base  connection_handler while_preventing_writes ","ActiveRecord Base  connection_handler ","ActiveRecord Base  connected_to ","ActiveRecord Base  writing_role ","ActiveRecord Base  connection while_preventing_writes ","ActiveRecord Base  connection ","ActiveRecord  writing_role "]}," ActiveRecord Middleware DatabaseSelector Resolver write":{"type":"method","name":"write","children":[],"call":[" write_to_primary "]}," ActiveRecord Middleware DatabaseSelector Resolver read":{"type":"method","name":"read","children":[],"call":[" read_from_replica "," read_from_primary "," read_from_primary? "]}," ActiveRecord Middleware DatabaseSelector Resolver initialize":{"type":"method","name":"initialize","children":[],"call":["ActiveSupport Notifications  instrumenter ","@options [] "]}," ActiveRecord Middleware DatabaseSelector Resolver call":{"type":"method","name":"call","children":[],"call":[]}," ActiveRecord Middleware DatabaseSelector Resolver Session update_last_write_timestamp":{"type":"method","name":"update_last_write_timestamp","children":[],"call":[" session []= "," class convert_time_to_timestamp ","Time  now "," class "," session "]}," ActiveRecord Middleware DatabaseSelector Resolver Session last_write_timestamp":{"type":"method","name":"last_write_timestamp","children":[],"call":[" class convert_timestamp_to_time "," session [] "," session "," class "]}," ActiveRecord Middleware DatabaseSelector Resolver Session initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Middleware DatabaseSelector Resolver Session convert_timestamp_to_time":{"type":"method","name":"convert_timestamp_to_time","children":[],"call":[]}," ActiveRecord Middleware DatabaseSelector Resolver Session convert_time_to_timestamp":{"type":"method","name":"convert_time_to_timestamp","children":[],"call":[]}," ActiveRecord Middleware DatabaseSelector Resolver Session call":{"type":"method","name":"call","children":[],"call":[]}," ActiveRecord LogSubscriber extract_query_source_location":{"type":"method","name":"extract_query_source_location","children":[],"call":[" backtrace_cleaner clean first "," backtrace_cleaner clean ","locations lazy "," backtrace_cleaner "]}," ActiveRecord InternalMetadata drop_table":{"type":"method","name":"drop_table","children":[],"call":[" connection drop_table "," table_name "," connection "," enabled? "]}," ActiveRecord InternalMetadata _internal?":{"type":"method","name":"_internal?","children":[],"call":[]}," ActiveRecord Integration raw_timestamp_to_cache_version":{"type":"method","name":"raw_timestamp_to_cache_version","children":[],"call":["key ljust ","key length < ","key length ","timestamp delete ","timestamp delete  ljust ","timestamp delete  length < ","timestamp delete  length "]}," ActiveRecord Integration can_use_fast_cache_version?":{"type":"method","name":"can_use_fast_cache_version?","children":[],"call":[" updated_at_came_from_user? ! "," updated_at_came_from_user? "," default_timezone == "," default_timezone "," cache_timestamp_format == "," cache_timestamp_format ","timestamp is_a? ","ActiveRecord  default_timezone == ","ActiveRecord  default_timezone "," class connection default_timezone == "," class connection default_timezone "," class connection "," class "]}," ActiveRecord Integration ClassMethods collection_cache_key":{"type":"method","name":"collection_cache_key","children":[],"call":["collection send "]}," ActiveRecord InsertAll Builder quote_columns":{"type":"method","name":"quote_columns","children":[],"call":["columns map "," connection method "," connection "," quote_column "]}," ActiveRecord InsertAll Builder format_columns":{"type":"method","name":"format_columns","children":[],"call":[" quote_columns join "," quote_columns ","columns respond_to? "]}," ActiveRecord InsertAll Builder extract_types_from_columns_on":{"type":"method","name":"extract_types_from_columns_on","children":[],"call":["(send\n  (lvar :keys) :map) to_h "," connection lookup_cast_type_from_column ","columns [] "," connection ","keys map "," raise ","UnknownAttributeError  new "," model new "," model ","(send\n  (lvar :keys) :-\n  (send\n    (lvar :columns) :keys)) first ","keys - ","columns keys "," connection schema_cache columns_hash "," connection schema_cache "," model type_for_attribute ","keys index_with "," connection schema_cache columns_hash  [] ","(send\n  (lvar :keys) :-\n  (send\n    (lvar : connection schema_cache columns_hash ) :keys)) first "," connection schema_cache columns_hash  keys "," connection schema_cache  connection schema_cache columns_hash _hash "]}," ActiveRecord InsertAll Builder columns_list":{"type":"method","name":"columns_list","children":[],"call":[" format_columns "," insert_all keys "," insert_all "," insert_all keys_including_timestamps "]}," ActiveRecord InsertAll Builder updatable_columns":{"type":"method","name":"updatable_columns","children":[],"call":[" quote_columns "," insert_all updatable_columns "," insert_all "]}," ActiveRecord InsertAll Builder conflict_target":{"type":"method","name":"conflict_target","children":[],"call":[" format_columns "," insert_all primary_keys "," insert_all "," update_duplicates? ","sql << ","index where ","(str \"(\") +@ ","index columns "," insert_all unique_by ","(str \"(\") +@  << "," insert_all unique_by  where "," insert_all unique_by  columns "]}," ActiveRecord InsertAll Builder returning":{"type":"method","name":"returning","children":[],"call":[" format_columns "," insert_all returning "," insert_all "," insert_all returning is_a? ","(send\n  (send nil :Array\n    (send\n      (send nil :insert_all) :returning)) :map) join "," quote_column "," model attribute_alias "," model "," model attribute_alias? "," Array map "," Array "]}," ActiveRecord InsertAll Builder values_list":{"type":"method","name":"values_list","children":[],"call":["Arel InsertManager  new create_values_list to_sql ","Arel InsertManager  new create_values_list ","Arel InsertManager  new "," connection with_yaml_fallback ","types [] serialize ","types [] "," connection "," insert_all map_key_with_value "," insert_all "," extract_types_from_columns_on "," keys "," model table_name "," model "," connection visitor compile ","Arel Nodes ValuesList  new "," connection visitor ","Arel Nodes SqlLiteral  === "," keys_including_timestamps "," extract_types_from_columns_on  [] serialize "," extract_types_from_columns_on  [] "," extract_ extract_types_from_columns_on _from_columns_on "]}," ActiveRecord InsertAll Builder into":{"type":"method","name":"into","children":[],"call":[" columns_list "," model quoted_table_name "," model "]}," ActiveRecord InsertAll Builder initialize":{"type":"method","name":"initialize","children":[],"call":["insert_all connection ","insert_all model "]}," ActiveRecord InsertAll verify_attributes":{"type":"method","name":"verify_attributes","children":[],"call":[" raise "," keys != ","attributes keys to_set ","attributes keys "," keys "," keys_including_timestamps != "," keys_including_timestamps "]}," ActiveRecord InsertAll unique_by_columns":{"type":"method","name":"unique_by_columns","children":[],"call":[" Array "," unique_by "]}," ActiveRecord InsertAll readonly_columns":{"type":"method","name":"readonly_columns","children":[],"call":[" primary_keys + "," model readonly_attributes to_a "," model readonly_attributes "," model "," primary_keys "]}," ActiveRecord InsertAll to_sql":{"type":"method","name":"to_sql","children":[],"call":[" connection build_insert_sql ","ActiveRecord InsertAll Builder  new "," connection "]}," ActiveRecord InsertAll ensure_valid_options_for_connection!":{"type":"method","name":"ensure_valid_options_for_connection!","children":[],"call":[" raise "," connection class "," connection "," connection supports_insert_conflict_target? ! "," connection supports_insert_conflict_target? "," unique_by "," connection supports_insert_on_duplicate_update? ! "," connection supports_insert_on_duplicate_update? "," update_duplicates? "," connection supports_insert_on_duplicate_skip? ! "," connection supports_insert_on_duplicate_skip? "," skip_duplicates? "," connection supports_insert_returning? ! "," connection supports_insert_returning? "," returning "]}," ActiveRecord InsertAll unique_indexes":{"type":"method","name":"unique_indexes","children":[],"call":[" connection schema_cache indexes select "," connection schema_cache indexes "," model table_name "," model "," connection schema_cache "," connection "]}," ActiveRecord InsertAll find_unique_index_for":{"type":"method","name":"find_unique_index_for","children":[],"call":[" raise ","i columns == ","i columns ","match include? ","i name "," unique_indexes find "," unique_indexes "," Array map "," Array ","ActiveRecord ConnectionAdapters IndexDefinition  new "," model table_name "," model ","unique_by nil? ","match == "," primary_keys "," model primary_key "," connection supports_insert_conflict_target? ! "," connection supports_insert_conflict_target? "," connection "," connection class "," Array sort == "," Array sort ","match sort "," Array map  include? "," Array map  == "," Array map  sort "]}," ActiveRecord InsertAll map_key_with_value":{"type":"method","name":"map_key_with_value","children":[],"call":["attributes [] "," keys map "," keys "," verify_attributes ","attributes stringify_keys "," inserts map "," inserts ","attributes merge! "," scope_attributes "," keys_including_timestamps map "," keys_including_timestamps ","attributes reverse_merge! "," timestamps_for_create "," record_timestamps? ","attributes stringify_keys  [] "," verify_attributes stringify_keys  ","attributes stringify_keys  stringify_keys ","attributes stringify_keys  merge! "," scope_attributes stringify_keys  ","attributes stringify_keys  reverse_merge! "]}," ActiveRecord InsertAll update_duplicates?":{"type":"method","name":"update_duplicates?","children":[],"call":[" on_duplicate == "," on_duplicate "]}," ActiveRecord InsertAll skip_duplicates?":{"type":"method","name":"skip_duplicates?","children":[],"call":[" on_duplicate == "," on_duplicate "]}," ActiveRecord InsertAll primary_keys":{"type":"method","name":"primary_keys","children":[],"call":[" Array "," model primary_key "," model "," connection schema_cache primary_keys "," model table_name "," connection schema_cache "," connection "]}," ActiveRecord InsertAll updatable_columns":{"type":"method","name":"updatable_columns","children":[],"call":[" keys - - "," unique_by_columns "," keys - "," readonly_columns "," keys "]}," ActiveRecord InsertAll execute":{"type":"method","name":"execute","children":[],"call":[" connection exec_query "," to_sql "," connection ","message << "," on_duplicate == "," on_duplicate "," inserts many? "," inserts ","(begin\n  (send nil :model)) +@ "," model "," connection exec_insert_all ","ActiveRecord Result  empty "," inserts empty? ","(begin\n  (send nil :model)) +@  << "]}," ActiveRecord InsertAll initialize":{"type":"method","name":"initialize","children":[],"call":[" ensure_valid_options_for_connection! "," updatable_columns empty? "," updatable_columns ","@on_duplicate == "," find_unique_index_for ","@returning == "," primary_keys "," connection supports_insert_returning? "," connection ","@returning nil? ","inserts first keys map to_set ","inserts first keys map ","inserts first keys ","inserts first ","model connection "," raise ","inserts blank? ","@keys to_set ","@scope_attributes keys ","model scope_attributes ","model scope_attributes? "," configure_on_duplicate_update_logic "," disallow_raw_sql! ","model record_timestamps ","record_timestamps nil? ","Arel  arel_node? ","@inserts first keys ","@inserts first "," resolve_attribute_aliases "," resolve_sti ","@inserts empty? ","inserts map ","@keys to_set  to_set ","@inserts first keys  to_set ","model scope_attributes  keys "]}," ActiveRecord Inheritance ClassMethods base_class?":{"type":"method","name":"base_class?","children":[],"call":[" base_class == "," base_class "]}," ActiveRecord FixtureSet insert":{"type":"method","name":"insert","children":[],"call":["conn reset_pk_sequence! ","fs table_name ","set each ","conn respond_to? ","conn insert_fixtures_set ","table_rows_for_connection keys ","table_rows_for_connection [] unshift ","table_rows_for_connection [] ","fixture_set table_rows each ","fixture_set table_rows ","h []= ","Hash  new ","fixture_sets_by_connection each ","connection call ","fixture_set model_class connection ","fixture_set model_class ","fixture_sets group_by "," raise ","conn all_foreign_keys_valid? ! ","conn all_foreign_keys_valid? ","ActiveRecord  verify_foreign_keys_for_fixtures "," check_all_foreign_keys_valid! "]}," ActiveRecord FixtureSet read_and_insert":{"type":"method","name":"read_and_insert","children":[],"call":[" insert "," update_all_loaded_fixtures ","fixtures_map []= "," new "," File  join ","class_names [] ","fixture_files map ","fixtures_directories join "]}," ActiveRecord FixtureSet TableRows build_table_rows_from":{"type":"method","name":"build_table_rows_from","children":[],"call":["@tables []= ","TableRow  new ","fixtures map ","Time  now ","Time  now utc ","config default_timezone == ","config default_timezone ","ActiveRecord  default_timezone == ","ActiveRecord  default_timezone ","Time  Time  now  ","Time  Time  now utc  ","Time  Time  now  utc ","Time  Time  now utc  utc "]}," ActiveRecord FixtureSet TableRows model_metadata":{"type":"method","name":"model_metadata","children":[],"call":["ModelMetadata  new "," model_class "]}," ActiveRecord FixtureSet TableRows to_hash":{"type":"method","name":"to_hash","children":[],"call":["rows map ","@tables transform_values "]}," ActiveRecord FixtureSet TableRows initialize":{"type":"method","name":"initialize","children":[],"call":[" build_table_rows_from ","@tables []= ","h []= ","Hash  new "]}," ActiveRecord FixtureSet TableRow add_join_records":{"type":"method","name":"add_join_records","children":[],"call":["@table_rows tables [] concat ","@table_rows tables [] ","@table_rows tables ","ActiveRecord FixtureSet  identify ","@row [] "," model_metadata primary_key_name "," model_metadata ","targets map ","targets split ","targets is_a? ","association rhs_key ","association lhs_key ","association primary_key_type ","association join_table ","@row delete ","association name to_s ","association name ","join []= ","association timestamp_column_names each ","association timestamp_column_names ","targets split  map ","@row delete  map ","targets split  split ","@row delete  split ","targets split  is_a? ","@row delete  is_a? ","association association rhs_key  ","association association lhs_key  "]}," ActiveRecord FixtureSet TableRow resolve_sti_reflections":{"type":"method","name":"resolve_sti_reflections","children":[],"call":[" add_join_records ","HasManyThroughProxy  new ","association options [] ","association options ","@row []= ","ActiveRecord FixtureSet  identify "," reflection_class type_for_attribute type "," reflection_class type_for_attribute "," reflection_class ","association foreign_type ","value sub! ","association polymorphic? ","@row delete ","association name to_s ","association name ","association name to_s != ","(or\n  (send\n    (send\n      (lvar :association) :options) :[]\n    (sym :foreign_key))\n  (dstr\n    (begin\n      (send\n        (lvar :association) :name))\n    (str \"_id\"))) to_s ","association macro "," reflection_class _reflections each_value "," reflection_class _reflections ","association join_foreign_type ","association join_foreign_key "," raise ","PrimaryKeyError  new ","association join_primary_key != ","association klass primary_key ","association klass ","association join_primary_key "," column_defined? ","composite_key each ","ActiveRecord FixtureSet  composite_identify ","fk_name is_a? ","@row delete  sub! "," reflection_class _reflections each_@row delete  ","ActiveRecord FixtureSet  composite_identify  each ","(or\n  (send\n    (send\n      (lvar :association) :options) :[]\n    (sym :foreign_key))\n  (dstr\n    (begin\n      (send\n        (lvar :association) :name))\n    (str \"_id\"))) to_s  is_a? ","association join_foreign_key  is_a? "]}," ActiveRecord FixtureSet TableRow resolve_enums":{"type":"method","name":"resolve_enums","children":[],"call":["@row []= ","values fetch ","@row [] ","@row include? "," model_class defined_enums each "," model_class defined_enums "," model_class "," reflection_class defined_enums each "," reflection_class defined_enums "," reflection_class "]}," ActiveRecord FixtureSet TableRow generate_primary_key":{"type":"method","name":"generate_primary_key","children":[],"call":["@row []= ","ActiveRecord FixtureSet  identify "," model_metadata primary_key_type "," model_metadata "," model_metadata primary_key_name ","@row include? ! ","@row include? "," model_metadata has_primary_key_column? "," model_metadata column_type "," column_defined? "]}," ActiveRecord FixtureSet TableRow interpolate_label":{"type":"method","name":"interpolate_label","children":[],"call":["@row []= ","value gsub ","@label to_s ","value is_a? ","@row each "]}," ActiveRecord FixtureSet TableRow fill_timestamps":{"type":"method","name":"fill_timestamps","children":[],"call":["@row []= ","@row key? "," model_metadata timestamp_column_names each "," model_metadata timestamp_column_names "," model_metadata "," model_class record_timestamps "," model_class "]}," ActiveRecord FixtureSet TableRow reflection_class":{"type":"method","name":"reflection_class","children":[],"call":[" model_class ","@row [] constantize ","@row [] "," model_metadata inheritance_column_name "," model_metadata ","@row include? "]}," ActiveRecord FixtureSet TableRow fill_row_model_attributes":{"type":"method","name":"fill_row_model_attributes","children":[],"call":[" resolve_sti_reflections "," resolve_enums "," generate_primary_key "," interpolate_label "," fill_timestamps "," model_class "," generate_composite_primary_key "," model_class composite_primary_key? "]}," ActiveRecord FixtureSet TableRow model_class":{"type":"method","name":"model_class","children":[],"call":["@table_rows model_class "]}," ActiveRecord FixtureSet TableRow model_metadata":{"type":"method","name":"model_metadata","children":[],"call":["@table_rows model_metadata "]}," ActiveRecord FixtureSet TableRow to_hash":{"type":"method","name":"to_hash","children":[],"call":[]}," ActiveRecord FixtureSet TableRow initialize":{"type":"method","name":"initialize","children":[],"call":[" fill_row_model_attributes ","fixture to_hash "]}," ActiveRecord FixtureSet TableRow HasManyThroughProxy join_table":{"type":"method","name":"join_table","children":[],"call":["@association through_reflection table_name ","@association through_reflection "]}," ActiveRecord FixtureSet TableRow HasManyThroughProxy lhs_key":{"type":"method","name":"lhs_key","children":[],"call":["@association through_reflection foreign_key ","@association through_reflection "]}," ActiveRecord FixtureSet TableRow HasManyThroughProxy rhs_key":{"type":"method","name":"rhs_key","children":[],"call":["@association foreign_key "]}," ActiveRecord FixtureSet TableRow ReflectionProxy primary_key_type":{"type":"method","name":"primary_key_type","children":[],"call":["@association klass type_for_attribute type ","@association klass type_for_attribute ","@association klass primary_key ","@association klass "]}," ActiveRecord FixtureSet TableRow ReflectionProxy name":{"type":"method","name":"name","children":[],"call":["@association name "]}," ActiveRecord FixtureSet TableRow ReflectionProxy join_table":{"type":"method","name":"join_table","children":[],"call":["@association join_table "]}," ActiveRecord FixtureSet TableRow ReflectionProxy initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord FixtureSet ModelMetadata inheritance_column_name":{"type":"method","name":"inheritance_column_name","children":[],"call":["@model_class inheritance_column "]}," ActiveRecord FixtureSet ModelMetadata timestamp_column_names":{"type":"method","name":"timestamp_column_names","children":[],"call":["(str \"created_at\") & ","@model_class column_names ","@model_class all_timestamp_attributes_in_model "]}," ActiveRecord FixtureSet ModelMetadata has_primary_key_column?":{"type":"method","name":"has_primary_key_column?","children":[],"call":["col name == "," primary_key_name ","col name ","@model_class columns any? ","@model_class columns "]}," ActiveRecord FixtureSet ModelMetadata primary_key_type":{"type":"method","name":"primary_key_type","children":[],"call":["@model_class type_for_attribute type ","@model_class type_for_attribute ","@model_class primary_key "," column_type "]}," ActiveRecord FixtureSet ModelMetadata primary_key_name":{"type":"method","name":"primary_key_name","children":[],"call":["@model_class primary_key "]}," ActiveRecord FixtureSet ModelMetadata initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Enum detect_negative_condition!":{"type":"method","name":"detect_negative_condition!","children":[],"call":[" logger warn "," name "," logger ","method_name start_with? "]}," ActiveRecord Enum assert_valid_enum_definition_values":{"type":"method","name":"assert_valid_enum_definition_values","children":[],"call":[" raise ","values any? ","values is_a? ","values keys any? ","values keys ","v is_a? ","values all? ","values empty? "]}," ActiveRecord DatabaseConfigurations throw_getter_deprecation":{"type":"method","name":"throw_getter_deprecation","children":[],"call":["ActiveSupport Deprecation  warn "]}," ActiveRecord DatabaseConfigurations throw_setter_deprecation":{"type":"method","name":"throw_setter_deprecation","children":[],"call":["ActiveSupport Deprecation  warn "]}," ActiveRecord DatabaseConfigurations method_missing":{"type":"method","name":"method_missing","children":[],"call":[" raise ","ActiveRecord Base  configurations= ","remaining_configs + "," build_configs ","db_config env_name == ","db_config env_name "," configurations reject "," configurations ","args [] "," throw_setter_deprecation "," configurations map "," throw_getter_deprecation "," configs_for ","args first "," configurations send ","ActiveSupport Deprecation  warn ","Hash  method_defined? ","ActiveRecord Base  args [] urations= ","remaining_args [] s + "," build_args [] s ","db_args []  env_name == ","db_config args []  == ","db_args []  env_name ","db_config args []  "," args [] urations reject "," args [] urations "," args [] urations map "," args [] s_for "," args [] urations send "]}," ActiveRecord DatabaseConfigurations environment_value_for":{"type":"method","name":"environment_value_for","children":[],"call":["ENV  [] ","spec_name == ","spec_name upcase ","name == ","name upcase "]}," ActiveRecord DatabaseConfigurations environment_url_config":{"type":"method","name":"environment_url_config","children":[],"call":["ActiveRecord DatabaseConfigurations UrlConfig  new "," environment_value_for ","UrlConfig  new "]}," ActiveRecord DatabaseConfigurations merge_db_environment_variables":{"type":"method","name":"merge_db_environment_variables","children":[],"call":[" environment_url_config ","config config ","config spec_name ","config env_name != ","config env_name ","config url_config? ","configs map ","config configuration_hash ","config name ","config is_a? "," environment_ environment_url_config  ","config  environment_url_config ? "]}," ActiveRecord DatabaseConfigurations build_db_config_from_hash":{"type":"method","name":"build_db_config_from_hash","children":[],"call":["ActiveRecord DatabaseConfigurations HashConfig  new ","ActiveRecord DatabaseConfigurations UrlConfig  new ","config_without_url delete ","config dup ","config [] ","config has_key? "," walk_configs ","config each_pair map ","config each_pair ","v is_a? ","config values all? ","config values ","config size == ","config size ","ENV  [] ","HashConfig  new ","UrlConfig  new ","handler call ","DatabaseConfigurations  db_config_handlers reverse_each ","DatabaseConfigurations  db_config_handlers ","config dup  delete ","config_without_config []  delete ","handler call _without_url delete ","handler call  dup ","handler call  [] ","handler call  has_key? "," walk_handler call s ","handler call  each_pair map ","handler call  each_pair ","handler call  values all? ","handler call  values ","handler call  size == ","handler call  size ","DatabaseConfigurations  db_handler call _handlers reverse_each ","DatabaseConfigurations  db_handler call _handlers "]}," ActiveRecord DatabaseConfigurations build_db_config_from_string":{"type":"method","name":"build_db_config_from_string","children":[],"call":[" raise ","ActiveRecord DatabaseConfigurations UrlConfig  new ","uri scheme ","URI  parse ","ActiveRecord DatabaseConfigurations HashConfig  new ","uri try ","UrlConfig  new ","URI  parse  scheme ","URI  parse  try "]}," ActiveRecord DatabaseConfigurations build_db_config_from_raw_config":{"type":"method","name":"build_db_config_from_raw_config","children":[],"call":[" raise "," build_db_config_from_hash ","config stringify_keys "," build_db_config_from_string ","config symbolize_keys "]}," ActiveRecord DatabaseConfigurations walk_configs":{"type":"method","name":"walk_configs","children":[],"call":[" build_db_config_from_raw_config ","spec_name to_s ","config map "," build_db_config_from_hash ","config stringify_keys "," build_db_config_from_string ","name to_s "]}," ActiveRecord DatabaseConfigurations build_configs":{"type":"method","name":"build_configs","children":[],"call":[" merge_db_environment_variables ","db_configs compact ","db_configs << "," environment_url_config ","db_configs find ","ActiveRecord ConnectionHandling DEFAULT_ENV  call to_s ","ActiveRecord ConnectionHandling DEFAULT_ENV  call "," build_db_config_from_raw_config ","env_name to_s "," walk_configs ","v is_a? ","config all? ","config is_a? ","configs flat_map ","configs is_a? ","configs configurations "," build_url_config ","ENV  [] ","(send\n  (send\n    (lvar :configs) :each_pair) :flat_map) compact ","configs each_pair flat_map ","configs each_pair ","(send\n  (send\n    (lvar :configs) :each_pair) :flat_map) flatten compact ","(send\n  (send\n    (lvar :configs) :each_pair) :flat_map) flatten "," default_env ","config values all? ","config values "," environment_ENV  [] _config "," (send\n  (send\n    (lvar :configs) :each_pair) :flat_map) compact _from_raw_config "," (send\n  (send\n    (lvar :configs) :each_pair) :flat_map) flatten compact _from_raw_config "," build_ENV  [] _config "]}," ActiveRecord DatabaseConfigurations env_with_configs":{"type":"method","name":"env_with_configs","children":[],"call":[" configurations ","db_config env_name == ","db_config env_name "," configurations select "]}," ActiveRecord DatabaseConfigurations first":{"type":"method","name":"first","children":[],"call":["config config ","config env_name "," configurations first "," configurations "," throw_getter_deprecation "," configurations first   configurations first  "," configurations first  env_name ","  configurations first urations first ","  configurations first urations "]}," ActiveRecord DatabaseConfigurations each":{"type":"method","name":"each","children":[],"call":["config config ","config env_name "," configurations each "," configurations "," throw_getter_deprecation "]}," ActiveRecord DatabaseConfigurations empty?":{"type":"method","name":"empty?","children":[],"call":[" configurations empty? "," configurations "]}," ActiveRecord DatabaseConfigurations to_h":{"type":"method","name":"to_h","children":[],"call":["Hash  [] ","configs to_a reverse ","configs to_a ","memo merge ","db_config to_legacy_hash "," configurations reverse inject "," configurations reverse "," configurations ","db_config configuration_hash stringify_keys ","db_config configuration_hash ","db_config env_name "," configurations inject "]}," ActiveRecord DatabaseConfigurations find_db_config":{"type":"method","name":"find_db_config","children":[],"call":["db_config spec_name == ","env to_s ","db_config spec_name ","db_config for_current_env? ","db_config env_name == ","db_config env_name "," configurations find "," configurations ","db_config name == ","db_config name ","(send\n  (send\n    (send nil :configurations) :sort_by) :with_index) find "," configurations sort_by with_index "," configurations sort_by ","env to_s  to_s ","db_config for_current_env to_s ? ","db_config env to_s _name == ","db_config env to_s _name "]}," ActiveRecord DatabaseConfigurations default_hash":{"type":"method","name":"default_hash","children":[],"call":["default config "," find_db_config ","default configuration_hash "," find_db_config  config "," find_db_config  configuration_hash "]}," ActiveRecord DatabaseConfigurations configs_for":{"type":"method","name":"configs_for","children":[],"call":["db_config spec_name == ","db_config spec_name ","configs find ","db_config replica? ! ","db_config replica? ","configs select "," env_with_configs ","db_config name == ","db_config name "," default_env ","ActiveSupport Deprecation  warn ","db_config database_tasks? ","db_config configuration_hash key? ","db_config configuration_hash "," env_with_configs  find "," env_with_configs  select "," env_with_ env_with_configs  "]}," ActiveRecord DatabaseConfigurations initialize":{"type":"method","name":"initialize","children":[],"call":[" build_configs "]}," ActiveRecord DatabaseConfigurations UrlConfig build_config":{"type":"method","name":"build_config","children":[],"call":["original_config merge ","original_config [] merge ","original_config [] "," env_name "," build_url_hash ","ActiveRecord ConnectionAdapters ConnectionSpecification ConnectionUrlResolver  new to_hash ","ActiveRecord ConnectionAdapters ConnectionSpecification ConnectionUrlResolver  new ","(str \"^jdbc:\") match? "," build_url_ build_url_hash  "," build_url_ActiveRecord ConnectionAdapters ConnectionSpecification ConnectionUrlResolver  new to_hash  ","ActiveRecord ConnectionAdapters ConnectionSpecification ConnectionUrlResolver  new to_ build_url_hash  ","ActiveRecord ConnectionAdapters ConnectionSpecification ConnectionUrlResolver  new to_ActiveRecord ConnectionAdapters ConnectionSpecification ConnectionUrlResolver  new to_hash  "]}," ActiveRecord DatabaseConfigurations UrlConfig build_url_hash":{"type":"method","name":"build_url_hash","children":[],"call":["ActiveRecord ConnectionAdapters ConnectionSpecification ConnectionUrlResolver  new to_hash ","ActiveRecord ConnectionAdapters ConnectionSpecification ConnectionUrlResolver  new ","(str \"^jdbc:\") match? ","url nil? ","ConnectionUrlResolver  new to_hash ","ConnectionUrlResolver  new "," url "," url start_with? "," url nil? ","(str \"jdbc:\") any? "]}," ActiveRecord DatabaseConfigurations UrlConfig migrations_paths":{"type":"method","name":"migrations_paths","children":[],"call":[" config [] "," config "]}," ActiveRecord DatabaseConfigurations UrlConfig replica?":{"type":"method","name":"replica?","children":[],"call":[" config [] "," config "]}," ActiveRecord DatabaseConfigurations UrlConfig url_config?":{"type":"method","name":"url_config?","children":[],"call":[]}," ActiveRecord DatabaseConfigurations UrlConfig initialize":{"type":"method","name":"initialize","children":[],"call":[" build_config ","@configuration_hash merge freeze ","@configuration_hash merge "," build_url_hash "," build_config uration_hash merge freeze ","@configuration_hash merge freeze  merge freeze "," build_config uration_hash merge ","@configuration_hash merge freeze  merge "]}," ActiveRecord DatabaseConfigurations HashConfig migrations_paths":{"type":"method","name":"migrations_paths","children":[],"call":[" config [] "," config "," configuration_hash [] "," configuration_hash "]}," ActiveRecord DatabaseConfigurations HashConfig replica?":{"type":"method","name":"replica?","children":[],"call":[" config [] "," config "," configuration_hash [] "," configuration_hash "]}," ActiveRecord DatabaseConfigurations HashConfig initialize":{"type":"method","name":"initialize","children":[],"call":["configuration_hash symbolize_keys freeze ","configuration_hash symbolize_keys "]}," ActiveRecord DatabaseConfigurations DatabaseConfig for_current_env?":{"type":"method","name":"for_current_env?","children":[],"call":[" env_name == ","ActiveRecord ConnectionHandling DEFAULT_ENV  call "," env_name "]}," ActiveRecord DatabaseConfigurations DatabaseConfig to_legacy_hash":{"type":"method","name":"to_legacy_hash","children":[],"call":[" config "," env_name "]}," ActiveRecord DatabaseConfigurations DatabaseConfig url_config?":{"type":"method","name":"url_config?","children":[],"call":[]}," ActiveRecord DatabaseConfigurations DatabaseConfig migrations_paths":{"type":"method","name":"migrations_paths","children":[],"call":[" raise "]}," ActiveRecord DatabaseConfigurations DatabaseConfig replica?":{"type":"method","name":"replica?","children":[],"call":[" raise "]}," ActiveRecord DatabaseConfigurations DatabaseConfig initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Core inspection_filter":{"type":"method","name":"inspection_filter","children":[{"type":"method","name":"pretty_print","children":[],"asgn":[],"call":[]}],"call":["ActiveSupport ParameterFilter  new "," class filter_attributes "," class ","pp text "," __getobj__ "," DelegateClass new "," DelegateClass ","InspectionMask  new "," class inspection_filter "]}," ActiveRecord Core blank?":{"type":"method","name":"blank?","children":[],"call":[]}," ActiveRecord Core present?":{"type":"method","name":"present?","children":[],"call":[]}," ActiveRecord Core init_with_attributes":{"type":"method","name":"init_with_attributes","children":[],"call":[" _run_initialize_callbacks "," _run_find_callbacks "," block_given? "," init_internals "," class define_attribute_methods "," class "]}," ActiveRecord Core ClassMethods _internal?":{"type":"method","name":"_internal?","children":[],"call":[]}," ActiveRecord Core ClassMethods filter_attributes":{"type":"method","name":"filter_attributes","children":[],"call":[" superclass filter_attributes "," superclass ","@filter_attributes nil? "]}," ActiveRecord ConnectionHandling swap_connection_handler":{"type":"method","name":"swap_connection_handler","children":[],"call":["ActiveRecord Base  connection_handler= ","ActiveRecord Base  connection_handler ","return_value load ","return_value is_a? "]}," ActiveRecord ConnectionHandling primary_class?":{"type":"method","name":"primary_class?","children":[],"call":[" == "," application_record_class? "]}," ActiveRecord ConnectionHandling clear_query_caches_for_current_thread":{"type":"method","name":"clear_query_caches_for_current_thread","children":[],"call":["pool connection clear_query_cache ","pool connection ","pool active_connection? ","handler connection_pool_list each ","handler connection_pool_list ","ActiveRecord Base  connection_handlers each_value ","ActiveRecord Base  connection_handlers "," clear_on_handler ","ActiveRecord Base  connection_handler ","ActiveRecord Base  legacy_connection_handling ","ActiveRecord  legacy_connection_handling "," connection_handler each_connection_pool "," connection_handler "]}," ActiveRecord ConnectionHandling resolve_config_for_connection":{"type":"method","name":"resolve_config_for_connection","children":[],"call":["config_hash []= ","resolver resolve symbolize_keys ","resolver resolve ","ConnectionAdapters ConnectionSpecification Resolver  new ","Base  configurations "," connection_specification_name= "," name "," primary_class? ","DEFAULT_ENV  call to_sym ","DEFAULT_ENV  call "," raise "," == ","Base  configurations resolve ","Base  name ","resolver resolve symbolize_keys  []= ","ConnectionAdapters ConnectionSpecification Resolver  new  resolve symbolize_keys ","ConnectionAdapters ConnectionSpecification Resolver  new  resolve "]}," ActiveRecord ConnectionHandling with_handler":{"type":"method","name":"with_handler","children":[],"call":[" swap_connection_handler "," lookup_connection_handler "," raise ","ActiveRecord Base  connection_handlers keys join ","ActiveRecord Base  connection_handlers keys ","ActiveRecord Base  connection_handlers ","ActiveRecord Base  connection_handlers keys include? "," swap_connection_ lookup_connection_handler  "," lookup_connection_ lookup_connection_handler  ","ActiveRecord Base  connection_ lookup_connection_handler s keys join ","ActiveRecord Base  connection_ lookup_connection_handler s keys ","ActiveRecord Base  connection_ lookup_connection_handler s ","ActiveRecord Base  connection_ lookup_connection_handler s keys include? "]}," ActiveRecord ConnectionHandling lookup_connection_handler":{"type":"method","name":"lookup_connection_handler","children":[],"call":["ActiveRecord ConnectionAdapters ConnectionHandler  new "," connection_handlers [] "," connection_handlers ","ActiveRecord Base  writing_role ","ActiveRecord Base  connection_handler ","ActiveRecord Base  legacy_connection_handling ","ActiveRecord  writing_role ","ActiveRecord  legacy_connection_handling "]}," ActiveRecord ConnectionHandling current_role":{"type":"method","name":"current_role","children":[],"call":[" connection_handlers key "," connection_handler "," connection_handlers "]}," ActiveRecord ConnectionHandling connected_to?":{"type":"method","name":"connected_to?","children":[],"call":[" current_role == ","role to_sym "," current_role "," current_shard == ","shard to_sym "," current_shard "]}," ActiveRecord ConnectionHandling connected_to":{"type":"method","name":"connected_to","children":[],"call":[" raise "," with_handler ","role to_sym ","handler establish_connection "," lookup_connection_handler "," resolve_config_for_connection ","database first ","database is_a? ","database to_sym "," connection_handler while_preventing_writes "," connection_handler ","role == "," writing_role "," reading_role "," with_role_and_shard ","ActiveSupport Deprecation  warn "," abstract_class ! "," abstract_class "," != "," legacy_connection_handling "," primary_class? ! "," primary_class? "," name != "," connection_specification_name "," name ","ActiveRecord  legacy_connection_handling "," connection_class? ! "," connection_class? "," with_ lookup_connection_handler  ","role to_sym  to_sym ","database to_sym  to_sym "," lookup_connection_handler  establish_connection "," lookup_connection_ lookup_connection_handler  "," connection_ lookup_connection_handler  while_preventing_writes "," connection_ lookup_connection_handler  ","role to_sym  == ","database to_sym  == "," writing_role to_sym  "," writing_database to_sym  "," reading_role to_sym  "," reading_database to_sym  "," with_role to_sym _and_shard "," with_database to_sym _and_shard "]}," ActiveRecord ConnectionHandling connects_to":{"type":"method","name":"connects_to","children":[],"call":["connections << ","handler establish_connection "," lookup_connection_handler ","role to_sym "," resolve_config_for_connection ","database each ","shard to_sym ","database_keys each ","shards each "," raise ","shards present? ","database present? "," abstract_class? "," == "," connection_class= "," connection_handler establish_connection "," connection_handler "," default_shard= ","shards keys first ","shards keys ","shards []= ","shards empty? "," lookup_connection_handler  establish_connection "," lookup_connection_ lookup_connection_handler  "," connection_ lookup_connection_handler  establish_connection "," connection_ lookup_connection_handler  "]}," ActiveRecord ConnectionAdapters SQLite3Adapter connect":{"type":"method","name":"connect","children":[],"call":[" configure_connection "," SQLite3 Database  new ","@config merge ","@config [] to_s ","@config [] "," raise ","ex set_pool "," class new_client "," class "]}," ActiveRecord ConnectionAdapters SQLite3Adapter build_statement_pool":{"type":"method","name":"build_statement_pool","children":[],"call":["StatementPool  new "," class type_cast_config_to_integer ","@config [] "," class "]}," ActiveRecord ConnectionAdapters SQLite3Adapter bind_params_length":{"type":"method","name":"bind_params_length","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLite3Adapter check_version":{"type":"method","name":"check_version","children":[],"call":[" raise "," database_version "," database_version < "," sqlite_version "," sqlite_version < "]}," ActiveRecord ConnectionAdapters SQLite3Adapter get_database_version":{"type":"method","name":"get_database_version","children":[],"call":["SQLite3Adapter Version  new "," query_value "]}," ActiveRecord ConnectionAdapters SQLite3Adapter build_insert_sql":{"type":"method","name":"build_insert_sql","children":[],"call":["sql << ","(send\n  (send\n    (lvar :insert) :updatable_columns) :map) join ","insert updatable_columns map ","insert updatable_columns ","insert conflict_target ","insert update_duplicates? ","insert skip_duplicates? ","(str \"INSERT \") +@ ","insert values_list ","insert into ","insert touch_model_timestamps_unless ","insert raw_update_sql ","insert raw_update_sql? ","(str \"INSERT \") +@  << ","insert raw_update_(str \"INSERT \") +@  ","insert raw_update_(str \"INSERT \") +@ ? "]}," ActiveRecord ConnectionAdapters SQLite3Adapter supports_lazy_transactions?":{"type":"method","name":"supports_lazy_transactions?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLite3Adapter reconnect!":{"type":"method","name":"reconnect!","children":[],"call":[" connect ","@connection closed? "]}," ActiveRecord ConnectionAdapters SQLite3Adapter supports_insert_on_conflict?":{"type":"method","name":"supports_insert_on_conflict?","children":[],"call":[" database_version >= "," database_version "]}," ActiveRecord ConnectionAdapters SQLite3Adapter supports_foreign_keys?":{"type":"method","name":"supports_foreign_keys?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLite3Adapter supports_expression_index?":{"type":"method","name":"supports_expression_index?","children":[],"call":[" database_version >= "," database_version "," sqlite_version >= "," sqlite_version "]}," ActiveRecord ConnectionAdapters SQLite3Adapter database_exists?":{"type":"method","name":"database_exists?","children":[],"call":["File  exist? ","@config [] to_s ","@config [] ","@config [] == "]}," ActiveRecord ConnectionAdapters SQLite3Adapter represent_boolean_as_integer=":{"type":"method","name":"represent_boolean_as_integer=","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLite3 SchemaStatements remove_foreign_key":{"type":"method","name":"remove_foreign_key","children":[],"call":[" alter_table ","foreign_keys delete "," raise ","fk options [] to_s == ","v to_s ","fk options [] to_s ","fk options [] ","fk options ","options all? ","fk_to_table == "," strip_table_name_prefix_and_suffix ","fk to_table ","table pluralize ","Base  pluralize_table_names ","options [] to_s delete_suffix ","options [] to_s ","options [] ","foreign_keys detect "," foreign_keys ","options except "," foreign_key_exists? ! "," foreign_key_exists? ","options [] == ","options delete == ","options delete "," alter_ strip_table_name_prefix_and_suffix  "," alter_options [] to_s delete_suffix  "," foreign_keys  delete ","fk options except  [] to_s == ","fk options except  [] to_s ","fk options except  [] ","fk options except  ","options except  all? "," strip_table_name_prefix_and_suffix  == ","fk_to_ strip_table_name_prefix_and_suffix  == ","fk_to_options [] to_s delete_suffix  == "," strip_ strip_table_name_prefix_and_suffix _name_prefix_and_suffix "," strip_options [] to_s delete_suffix _name_prefix_and_suffix ","fk to_ strip_table_name_prefix_and_suffix  ","fk to_options [] to_s delete_suffix  "," strip_table_name_prefix_and_suffix  pluralize ","options [] to_s delete_suffix  pluralize ","Base  pluralize_ strip_table_name_prefix_and_suffix _names ","Base  pluralize_options [] to_s delete_suffix _names ","options except  [] to_s delete_suffix ","options except  [] to_s ","options except  [] "," foreign_keys  detect ","  foreign_keys  ","options except  except ","options except  [] == ","options except  delete == ","options except  delete "]}," ActiveRecord ConnectionAdapters SQLite3 SchemaStatements add_foreign_key":{"type":"method","name":"add_foreign_key","children":[],"call":["definition foreign_key "," strip_table_name_prefix_and_suffix "," alter_table "]}," ActiveRecord ConnectionAdapters SQLite3 Quoting column_name_with_order_matcher":{"type":"method","name":"column_name_with_order_matcher","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLite3 Quoting column_name_matcher":{"type":"method","name":"column_name_matcher","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLite3 DatabaseStatements build_truncate_statements":{"type":"method","name":"build_truncate_statements","children":[],"call":[" combine_multi_statements "," quote_table_name ","table_names map "]}," ActiveRecord ConnectionAdapters SQLite3 DatabaseStatements build_fixture_statements":{"type":"method","name":"build_fixture_statements","children":[],"call":["(send\n  (lvar :fixture_set) :flat_map) compact "," build_fixture_sql ","fixtures map ","fixtures empty? ","fixture_set flat_map "]}," ActiveRecord ConnectionAdapters SQLite3 DatabaseStatements last_inserted_id":{"type":"method","name":"last_inserted_id","children":[],"call":["@connection last_insert_row_id ","@raw_connection last_insert_row_id "]}," ActiveRecord ConnectionAdapters SQLite3 DatabaseStatements execute_batch":{"type":"method","name":"execute_batch","children":[],"call":["@connection execute_batch2 ","ActiveSupport Dependencies  interlock permit_concurrent_loads ","ActiveSupport Dependencies  interlock "," log "," materialize_transactions "," raise "," write_query? "," preventing_writes? "," combine_multi_statements "," mark_transaction_written_if_write "," check_if_write_query "," transform_query ","statements map ","conn execute_batch2 "," with_raw_connection "]}," ActiveRecord ConnectionAdapters SQLite3 DatabaseStatements exec_rollback_db_transaction":{"type":"method","name":"exec_rollback_db_transaction","children":[],"call":["@connection rollback "," log "," reset_read_uncommitted ","conn rollback "," with_raw_connection "]}," ActiveRecord ConnectionAdapters SQLite3 DatabaseStatements commit_db_transaction":{"type":"method","name":"commit_db_transaction","children":[],"call":["@connection commit "," log "," reset_read_uncommitted ","conn commit "," with_raw_connection "]}," ActiveRecord ConnectionAdapters SQLite3 DatabaseStatements begin_db_transaction":{"type":"method","name":"begin_db_transaction","children":[],"call":["@connection transaction "," log ","conn transaction "," with_raw_connection "]}," ActiveRecord ConnectionAdapters SQLite3 DatabaseStatements exec_delete":{"type":"method","name":"exec_delete","children":[],"call":["@connection changes "," exec_query ","@raw_connection changes "," internal_exec_query "]}," ActiveRecord ConnectionAdapters SQLite3 DatabaseStatements exec_query":{"type":"method","name":"exec_query","children":[],"call":["ActiveRecord Result  new ","stmt close ","stmt to_a ","stmt bind_params "," without_prepared_statement? ","stmt columns ","@connection prepare ","stmt reset! ","@statements [] ","ActiveSupport Dependencies  interlock permit_concurrent_loads ","ActiveSupport Dependencies  interlock "," log "," type_casted_binds "," materialize_transactions "," raise "," write_query? "," preventing_writes? "," build_result "," mark_transaction_written_if_write "," check_if_write_query "," transform_query ","@connection prepare  close ","@connection prepare  to_a ","@connection prepare  bind_params ","@connection prepare  columns ","@connection prepare  reset! ","  type_casted_binds  "]}," ActiveRecord ConnectionAdapters SQLite3 DatabaseStatements execute":{"type":"method","name":"execute","children":[],"call":["@connection execute ","ActiveSupport Dependencies  interlock permit_concurrent_loads ","ActiveSupport Dependencies  interlock "," log "," materialize_transactions "," raise "," write_query? "," preventing_writes? "," mark_transaction_written_if_write "," check_if_write_query "," transform_query "]}," ActiveRecord ConnectionAdapters SQLite3 DatabaseStatements write_query?":{"type":"method","name":"write_query?","children":[],"call":["READ_QUERY  match? ! ","READ_QUERY  match? ","sql b "]}," ActiveRecord ConnectionAdapters SchemaCache database_version":{"type":"method","name":"database_version","children":[],"call":[" connection get_database_version "," connection ","connection get_database_version "]}," ActiveRecord ConnectionAdapters SchemaCache indexes":{"type":"method","name":"indexes","children":[],"call":[" connection indexes "," connection ","@indexes [] ","@indexes []= "," deep_deduplicate ","@indexes fetch "," data_source_exists? ","connection indexes "]}," ActiveRecord ConnectionAdapters SchemaCache columns_hash?":{"type":"method","name":"columns_hash?","children":[],"call":["@columns_hash key? "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter update_typemap_for_default_timezone":{"type":"method","name":"update_typemap_for_default_timezone","children":[],"call":["ActiveRecord Base  default_timezone ","@connection type_map_for_results add_coder ","@connection type_map_for_results ","decoder_class new ","@timestamp_decoder to_h ","ActiveRecord Base  default_timezone == ","@default_timezone != "," configure_connection ","ActiveRecord  default_timezone ","ActiveRecord  default_timezone == "," reconfigure_connection_timezone "," default_timezone ","@raw_connection type_map_for_results add_coder ","@raw_connection type_map_for_results "," default_timezone == ","@mapped_default_timezone != ","decoder_class new  to_h ","ActiveRecord Base  default_timezone  != ","ActiveRecord  default_timezone  != "," default_timezone  != "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter build_statement_pool":{"type":"method","name":"build_statement_pool","children":[],"call":["StatementPool  new "," class type_cast_config_to_integer ","@config [] "," class "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter check_version":{"type":"method","name":"check_version","children":[],"call":[" raise "," database_version "," database_version < "," postgresql_version "," postgresql_version < "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter build_insert_sql":{"type":"method","name":"build_insert_sql","children":[],"call":["sql << ","insert returning ","(send\n  (send\n    (lvar :insert) :updatable_columns) :map) join ","insert updatable_columns map ","insert updatable_columns ","insert conflict_target ","insert update_duplicates? ","insert skip_duplicates? ","(str \"INSERT \") +@ ","insert values_list ","insert into ","insert model quoted_table_name ","insert model ","insert touch_model_timestamps_unless ","insert raw_update_sql ","insert raw_update_sql? ","(str \"INSERT \") +@  << ","insert raw_update_(str \"INSERT \") +@  ","insert raw_update_(str \"INSERT \") +@ ? "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter get_database_version":{"type":"method","name":"get_database_version","children":[],"call":["@connection server_version "," valid_raw_connection server_version "," valid_raw_connection "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter extension_available?":{"type":"method","name":"extension_available?","children":[],"call":[" query_value "," quote "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter supports_lazy_transactions?":{"type":"method","name":"supports_lazy_transactions?","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter supports_optimizer_hints?":{"type":"method","name":"supports_optimizer_hints?","children":[],"call":[" extension_available? "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter database_exists?":{"type":"method","name":"database_exists?","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter supports_insert_on_conflict?":{"type":"method","name":"supports_insert_on_conflict?","children":[],"call":[" database_version >= "," database_version "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter supports_insert_returning?":{"type":"method","name":"supports_insert_returning?","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQL TypeMetadata hash":{"type":"method","name":"hash","children":[],"call":["TypeMetadata  hash ^ ^ ^ "," fmod hash "," fmod ","TypeMetadata  hash ^ ^ "," oid hash "," oid ","TypeMetadata  hash ^ "," __getobj__ hash "," __getobj__ ","TypeMetadata  hash "]}," ActiveRecord ConnectionAdapters PostgreSQL TypeMetadata ==":{"type":"method","name":"==","children":[],"call":[" fmod == ","other fmod "," fmod "," oid == ","other oid "," oid "," __getobj__ == ","other __getobj__ "," __getobj__ ","other is_a? "]}," ActiveRecord ConnectionAdapters PostgreSQL TypeMetadata initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements sequence_name_from_parts":{"type":"method","name":"sequence_name_from_parts","children":[],"call":["table_name [] ","table_name length - ","table_name length ","over_length > ","column_name [] ","column_name_length - ","(lvar :over_length) min ","column_name length - ","column_name length ","(send\n  (begin\n    (send\n      (send\n        (send nil :max_identifier_length) :-\n        (send\n          (lvar :suffix) :length)) :-\n      (int 2))) :/\n  (int 2)) min ","(send\n  (send\n    (send nil :max_identifier_length) :-\n    (send\n      (lvar :suffix) :length)) :-\n  (int 2)) / "," max_identifier_length - - "," max_identifier_length - ","suffix length "," max_identifier_length ","(lvar :table_name) sum + - ","(lvar :table_name) sum + ","(lvar :table_name) sum ","table_name []  [] ","table_name []  length - ","table_name []  length ","(lvar :table_name) sum + -  > ","column_name []  [] ","column_name [] _length - ","(send\n  (begin\n    (send\n      (send\n        (send nil :max_identifier_length) :-\n        (send\n          (lvar :suffix) :length)) :-\n      (int 2))) :/\n  (int 2)) min  - ","(lvar :(lvar :table_name) sum + - ) min ","column_name []  length - ","column_name []  length ","(lvar :table_name [] ) sum + - ","(lvar :table_name [] ) sum + ","(lvar :table_name [] ) sum "]}," ActiveRecord ConnectionAdapters PostgreSQL TableDefinition initialize":{"type":"method","name":"initialize","children":[],"call":["ActiveRecord ConnectionAdapters PostgreSQLAdapter  create_unlogged_tables "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaCreation table_modifier_in_create":{"type":"method","name":"table_modifier_in_create","children":[],"call":["o unlogged ","o temporary "]}," ActiveRecord ConnectionAdapters PostgreSQL Quoting column_name_with_order_matcher":{"type":"method","name":"column_name_with_order_matcher","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQL Quoting column_name_matcher":{"type":"method","name":"column_name_matcher","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQL OID Uuid cast_value":{"type":"method","name":"cast_value","children":[],"call":["casted match? ","value to_s ","value to_s  match? "]}," ActiveRecord ConnectionAdapters PostgreSQL DatabaseStatements build_truncate_statements":{"type":"method","name":"build_truncate_statements","children":[],"call":["table_names map join ","table_names map "," method "]}," ActiveRecord ConnectionAdapters PostgreSQL DatabaseStatements write_query?":{"type":"method","name":"write_query?","children":[],"call":["READ_QUERY  match? ! ","READ_QUERY  match? ","sql b "]}," ActiveRecord ConnectionAdapters PostgreSQL Column sql_type":{"type":"method","name":"sql_type","children":[],"call":[" sub "," delete_suffix "]}," ActiveRecord ConnectionAdapters PostgreSQL Column array":{"type":"method","name":"array","children":[],"call":[" sql_type_metadata sql_type end_with? "," sql_type_metadata sql_type "," sql_type_metadata "]}," ActiveRecord ConnectionAdapters PostgreSQL Column serial?":{"type":"method","name":"serial?","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQL Column initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters Mysql2Adapter get_full_version":{"type":"method","name":"get_full_version","children":[],"call":["@connection server_info [] ","@connection server_info "," any_raw_connection server_info [] "," any_raw_connection server_info "," any_raw_connection "]}," ActiveRecord ConnectionAdapters Mysql2Adapter supports_lazy_transactions?":{"type":"method","name":"supports_lazy_transactions?","children":[],"call":[]}," ActiveRecord ConnectionAdapters Mysql2Adapter database_exists?":{"type":"method","name":"database_exists?","children":[],"call":[]}," ActiveRecord ConnectionAdapters MySQL SchemaStatements integer_to_sql":{"type":"method","name":"integer_to_sql","children":[],"call":[" raise "]}," ActiveRecord ConnectionAdapters MySQL SchemaStatements limit_to_size":{"type":"method","name":"limit_to_size","children":[],"call":[" raise ","type to_s "]}," ActiveRecord ConnectionAdapters MySQL SchemaStatements type_with_size_to_sql":{"type":"method","name":"type_with_size_to_sql","children":[],"call":[" raise ","size inspect "]}," ActiveRecord ConnectionAdapters MySQL SchemaStatements default_row_format":{"type":"method","name":"default_row_format","children":[],"call":[" query_value == "," query_value "," row_format_dynamic_by_default? "]}," ActiveRecord ConnectionAdapters MySQL SchemaStatements row_format_dynamic_by_default?":{"type":"method","name":"row_format_dynamic_by_default?","children":[],"call":[" database_version >= "," database_version "," mariadb? "," version >= "," version "]}," ActiveRecord ConnectionAdapters MySQL SchemaStatements table_alias_length":{"type":"method","name":"table_alias_length","children":[],"call":[]}," ActiveRecord ConnectionAdapters MySQL SchemaStatements type_to_sql":{"type":"method","name":"type_to_sql","children":[],"call":["type != "," type_with_size_to_sql ","(irange\n  (int 0)\n  (int 4095)) === "," integer_to_sql ","type to_s "]}," ActiveRecord ConnectionAdapters MySQL SchemaStatements create_table":{"type":"method","name":"create_table","children":[],"call":[]}," ActiveRecord ConnectionAdapters MySQL SchemaDumper schema_limit":{"type":"method","name":"schema_limit","children":[],"call":["(str \"\\\\A(?:enum|set|(?:tiny|medium|long)?(?:text|blob))\\\\b\") match? ","column sql_type ","(str \"\\\\A(?:tiny|medium|long)?(?:text|blob)\") match? ","(str \"\\\\A(?:tiny|medium|long)?(?:text|blob)\\\\b\") match? "]}," ActiveRecord ConnectionAdapters MySQL Quoting column_name_with_order_matcher":{"type":"method","name":"column_name_with_order_matcher","children":[],"call":[]}," ActiveRecord ConnectionAdapters MySQL Quoting column_name_matcher":{"type":"method","name":"column_name_matcher","children":[],"call":[]}," ActiveRecord ConnectionAdapters MySQL DatabaseStatements max_allowed_packet":{"type":"method","name":"max_allowed_packet","children":[],"call":[" show_variable "]}," ActiveRecord ConnectionAdapters MySQL DatabaseStatements max_allowed_packet_reached?":{"type":"method","name":"max_allowed_packet_reached?","children":[],"call":["(send\n  (send\n    (send\n      (lvar :current_packet) :bytesize) :+\n    (send\n      (lvar :previous_packet) :bytesize)) :+\n  (int 2)) > "," max_allowed_packet ","current_packet bytesize + + ","current_packet bytesize + ","previous_packet bytesize ","current_packet bytesize ","previous_packet nil? "," raise ","current_packet bytesize > "]}," ActiveRecord ConnectionAdapters MySQL DatabaseStatements combine_multi_statements":{"type":"method","name":"combine_multi_statements","children":[],"call":["previous_packet << ","total_sql_chunks << ","sql +@ "," max_allowed_packet_reached? ","total_sql_chunks last ","total_sql each_with_object ","total_sql_chunks last  << "]}," ActiveRecord ConnectionAdapters MySQL DatabaseStatements build_truncate_statements":{"type":"method","name":"build_truncate_statements","children":[],"call":[" first ","table_names size == ","table_names size "]}," ActiveRecord ConnectionAdapters MySQL DatabaseStatements execute_batch":{"type":"method","name":"execute_batch","children":[],"call":["@connection abandon_results! "," execute "," combine_multi_statements each "," combine_multi_statements "," raw_execute "," transform_query ","statements map "]}," ActiveRecord ConnectionAdapters MySQL DatabaseStatements write_query?":{"type":"method","name":"write_query?","children":[],"call":["READ_QUERY  match? ! ","READ_QUERY  match? ","sql b "]}," ActiveRecord ConnectionAdapters DetermineIfPreparableVisitor visit_Arel_Nodes_NotIn":{"type":"method","name":"visit_Arel_Nodes_NotIn","children":[],"call":[]}," ActiveRecord ConnectionAdapters ConnectionSpecification Resolver build_configuration_sentence":{"type":"method","name":"build_configuration_sentence","children":[],"call":["(send\n  (send\n    (lvar :configs) :group_by\n    (block-pass\n      (sym :env_name))) :map) join ","namespaces join ","namespaces size > ","namespaces size ","config map ","configs group_by map ","configs group_by "," configurations configs_for "," configurations ","(send\n  (send\n    (lvar : configurations configs_for ) :group_by\n    (block-pass\n      (sym :env_name))) :map) join ","config map  join ","config map  size > ","config map  size "," configurations configs_for  group_by map "," configurations configs_for  group_by "," configurations  configurations configs_for _for "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter build_statement_pool":{"type":"method","name":"build_statement_pool","children":[],"call":["StatementPool  new "," class type_cast_config_to_integer ","@config [] "," class "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter check_version":{"type":"method","name":"check_version","children":[],"call":[" raise "," database_version "," database_version < "," version_string "," version < "," version "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter build_insert_sql":{"type":"method","name":"build_insert_sql","children":[],"call":["sql << ","(send\n  (send\n    (lvar :insert) :updatable_columns) :map) join ","insert updatable_columns map ","insert updatable_columns ","insert update_duplicates? "," quote_column_name ","insert keys first ","insert keys ","insert skip_duplicates? ","(str \"INSERT \") +@ ","insert values_list ","insert into ","insert touch_model_timestamps_unless ","insert raw_update_sql ","insert raw_update_sql? ","(str \"INSERT \") +@  << ","insert raw_update_(str \"INSERT \") +@  ","insert raw_update_(str \"INSERT \") +@ ? "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter default_uniqueness_comparison":{"type":"method","name":"default_uniqueness_comparison","children":[],"call":["attribute eq ","Arel Nodes Bin  new ","ActiveSupport Deprecation  warn ","(str \"Uniqueness validator will no longer enforce case sensitive comparison in Rails 6.1.\\n\") squish ","attribute name ","value nil? ! ","value nil? ","column case_sensitive? ! ","column case_sensitive? ","column collation "," column_for_attribute "," column_for_attribute  case_sensitive? ! "," column_for_attribute  case_sensitive? "," column_for_attribute  collation ","  column_for_attribute _for_attribute "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter supports_insert_on_duplicate_update?":{"type":"method","name":"supports_insert_on_duplicate_update?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter supports_insert_on_duplicate_skip?":{"type":"method","name":"supports_insert_on_duplicate_skip?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter supports_optimizer_hints?":{"type":"method","name":"supports_optimizer_hints?","children":[],"call":[" database_version >= "," database_version "," mariadb? ! "," mariadb? "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter supports_expression_index?":{"type":"method","name":"supports_expression_index?","children":[],"call":[" database_version >= "," database_version "," mariadb? ! "," mariadb? "," version >= "," version "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter get_database_version":{"type":"method","name":"get_database_version","children":[],"call":["Version  new "," version_string "," get_full_version ","  version_string  "]}," ActiveRecord ConnectionAdapters AbstractAdapter build_statement_pool":{"type":"method","name":"build_statement_pool","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter column_for_attribute":{"type":"method","name":"column_for_attribute","children":[],"call":[" schema_cache columns_hash [] ","attribute name to_s ","attribute name "," schema_cache columns_hash "," schema_cache ","attribute relation name ","attribute relation "]}," ActiveRecord ConnectionAdapters AbstractAdapter check_version":{"type":"method","name":"check_version","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter database_version":{"type":"method","name":"database_version","children":[],"call":[" schema_cache database_version "," schema_cache "]}," ActiveRecord ConnectionAdapters AbstractAdapter get_database_version":{"type":"method","name":"get_database_version","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter build_insert_sql":{"type":"method","name":"build_insert_sql","children":[],"call":["insert values_list ","insert into "," raise "," class ","insert update_duplicates? ","insert skip_duplicates? "]}," ActiveRecord ConnectionAdapters AbstractAdapter default_uniqueness_comparison":{"type":"method","name":"default_uniqueness_comparison","children":[],"call":["attribute eq "," case_sensitive_comparison "]}," ActiveRecord ConnectionAdapters AbstractAdapter advisory_locks_enabled?":{"type":"method","name":"advisory_locks_enabled?","children":[],"call":[" supports_advisory_locks? "]}," ActiveRecord ConnectionAdapters AbstractAdapter supports_insert_conflict_target?":{"type":"method","name":"supports_insert_conflict_target?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter supports_insert_on_duplicate_update?":{"type":"method","name":"supports_insert_on_duplicate_update?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter supports_insert_on_duplicate_skip?":{"type":"method","name":"supports_insert_on_duplicate_skip?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter supports_insert_returning?":{"type":"method","name":"supports_insert_returning?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter supports_lazy_transactions?":{"type":"method","name":"supports_lazy_transactions?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter supports_optimizer_hints?":{"type":"method","name":"supports_optimizer_hints?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter supports_materialized_views?":{"type":"method","name":"supports_materialized_views?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter database_exists?":{"type":"method","name":"database_exists?","children":[],"call":[" connect! "]}," ActiveRecord ConnectionAdapters AbstractAdapter schema_cache":{"type":"method","name":"schema_cache","children":[],"call":["@pool get_schema_cache ","BoundSchemaReflection  new ","@pool schema_reflection "]}," ActiveRecord ConnectionAdapters AbstractAdapter Version to_s":{"type":"method","name":"to_s","children":[],"call":["@version join "]}," ActiveRecord ConnectionAdapters AbstractAdapter prepared_statements":{"type":"method","name":"prepared_statements","children":[],"call":["@prepared_statement_status value "," prepared_statements_disabled_cache include? ! "," prepared_statements_disabled_cache include? "," object_id "," prepared_statements_disabled_cache "]}," ActiveRecord ConnectionAdapters AbstractAdapter schema_migration":{"type":"method","name":"schema_migration","children":[],"call":[" connection_specification_name= "," define_singleton_method ","Class  new ","conn pool spec name ","conn pool spec ","conn pool ","spec_name == ","conn pool pool_config connection_specification_name ","conn pool pool_config ","SchemaMigration  new ","conn pool spec name  == ","conn pool pool_config connection_specification_name  == "]}," ActiveRecord ConnectionAdapters AbstractAdapter preventing_writes?":{"type":"method","name":"preventing_writes?","children":[],"call":["ActiveRecord Base  connection_handler prevent_writes ","ActiveRecord Base  connection_handler "," replica? "," prevent_writes "," owner_name safe_constantize "," owner_name "," owner_name nil? ","ActiveRecord Base  legacy_connection_handling ","ActiveRecord Base  current_preventing_writes "," connection_klass current_preventing_writes "," connection_klass "," connection_klass nil? "," connection_class current_preventing_writes "," connection_class "," connection_class nil? ","ActiveRecord  legacy_connection_handling "," connection_ owner_name safe_constantize  current_preventing_writes "," connection_ owner_name safe_constantize  "," connection_ owner_name safe_constantize  nil? "]}," ActiveRecord ConnectionAdapters AbstractAdapter replica?":{"type":"method","name":"replica?","children":[],"call":["@config [] "]}," ActiveRecord ConnectionAdapters AbstractAdapter quoted_table_names":{"type":"method","name":"quoted_table_names","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter quoted_column_names":{"type":"method","name":"quoted_column_names","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter build_read_query_regexp":{"type":"method","name":"build_read_query_regexp","children":[],"call":[]}," ActiveRecord ConnectionAdapters TransactionManager materialize_transactions":{"type":"method","name":"materialize_transactions","children":[],"call":["t materialize! ","t materialized? ","@stack each ","@connection lock synchronize ","@connection lock "]}," ActiveRecord ConnectionAdapters TransactionManager lazy_transactions_enabled?":{"type":"method","name":"lazy_transactions_enabled?","children":[],"call":[]}," ActiveRecord ConnectionAdapters TransactionManager enable_lazy_transactions!":{"type":"method","name":"enable_lazy_transactions!","children":[],"call":[]}," ActiveRecord ConnectionAdapters TransactionManager disable_lazy_transactions!":{"type":"method","name":"disable_lazy_transactions!","children":[],"call":[" materialize_transactions "]}," ActiveRecord ConnectionAdapters RealTransaction materialize!":{"type":"method","name":"materialize!","children":[],"call":[" connection begin_db_transaction "," connection "," connection begin_isolated_db_transaction "," isolation_level "]}," ActiveRecord ConnectionAdapters SavepointTransaction materialize!":{"type":"method","name":"materialize!","children":[],"call":[" connection create_savepoint "," savepoint_name "," connection "]}," ActiveRecord ConnectionAdapters Transaction materialized?":{"type":"method","name":"materialized?","children":[],"call":[]}," ActiveRecord ConnectionAdapters Transaction materialize!":{"type":"method","name":"materialize!","children":[],"call":["@instrumenter start "]}," ActiveRecord ConnectionAdapters SchemaStatements bulk_change_table":{"type":"method","name":"bulk_change_table","children":[],"call":["non_combinable_operations each "," execute ","sql_fragments join "," quote_table_name ","sql_fragments empty? "," send ","non_combinable_operations concat ","sql_fragments << ","v is_a? "," Array partition "," Array "," respond_to? ","args shift ","operations each ","sql_fragments concat "]}," ActiveRecord ConnectionAdapters SchemaStatements strip_table_name_prefix_and_suffix":{"type":"method","name":"strip_table_name_prefix_and_suffix","children":[],"call":["table_name to_s ","table_name to_s =~ ","Base  table_name_suffix ","Base  table_name_prefix ","Base  table_name_Base  table_name_suffix  ","Base  table_name_Base  table_name_prefix  "]}," ActiveRecord ConnectionAdapters Table remove_foreign_key":{"type":"method","name":"remove_foreign_key","children":[],"call":["@base remove_foreign_key "," name "," raise_on_if_exist_options "]}," ActiveRecord ConnectionAdapters ColumnMethods define_column_methods":{"type":"method","name":"define_column_methods","children":[],"call":[" module_eval ","226 + ","column_types each ","230 + ","227 + ","232 + ","258 + ","262 + ","266 + ","267 + ","263 + ","271 + ","331 + "]}," ActiveRecord ConnectionAdapters export_name_on_schema_dump?":{"type":"method","name":"export_name_on_schema_dump?","children":[],"call":["ActiveRecord SchemaDumper  fk_ignore_pattern match? ! ","ActiveRecord SchemaDumper  fk_ignore_pattern match? "," name ","ActiveRecord SchemaDumper  fk_ignore_pattern "," name !~ ","ActiveRecord SchemaDumper  chk_ignore_pattern match? ! ","ActiveRecord SchemaDumper  chk_ignore_pattern match? ","ActiveRecord SchemaDumper  chk_ignore_pattern "]}," ActiveRecord ConnectionAdapters AbstractAdapter SchemaCreation table_modifier_in_create":{"type":"method","name":"table_modifier_in_create","children":[],"call":["o temporary "]}," ActiveRecord ConnectionAdapters Quoting column_name_with_order_matcher":{"type":"method","name":"column_name_with_order_matcher","children":[],"call":[]}," ActiveRecord ConnectionAdapters Quoting column_name_matcher":{"type":"method","name":"column_name_matcher","children":[],"call":[]}," ActiveRecord ConnectionAdapters Quoting sanitize_as_sql_comment":{"type":"method","name":"sanitize_as_sql_comment","children":[],"call":["value to_s gsub ","value to_s ","comment gsub! ","value to_s dup ","value to_s dup  gsub! "]}," ActiveRecord ConnectionAdapters QueryCache cache_notification_info":{"type":"method","name":"cache_notification_info","children":[],"call":[" object_id "," type_casted_binds "," lambda "]}," ActiveRecord ConnectionAdapters DatabaseStatements with_multi_statements":{"type":"method","name":"with_multi_statements","children":[],"call":[]}," ActiveRecord ConnectionAdapters DatabaseStatements build_truncate_statements":{"type":"method","name":"build_truncate_statements","children":[],"call":[" combine_multi_statements "," quote_table_name ","table_names map "," build_truncate_statement "]}," ActiveRecord ConnectionAdapters DatabaseStatements build_fixture_statements":{"type":"method","name":"build_fixture_statements","children":[],"call":["(send\n  (lvar :fixture_set) :map) compact "," build_fixture_sql ","fixtures empty? ","fixture_set map ","fixture_set filter_map "]}," ActiveRecord ConnectionAdapters DatabaseStatements execute_batch":{"type":"method","name":"execute_batch","children":[],"call":[" execute ","statements each "," internal_execute "]}," ActiveRecord ConnectionAdapters DatabaseStatements truncate_tables":{"type":"method","name":"truncate_tables","children":[],"call":[" execute_batch "," Array each "," Array "," build_truncate_statements "," disable_referential_integrity "," with_multi_statements ","table_names empty? ","InternalMetadata  table_name "," schema_migration table_name "," schema_migration "," internal_metadata table_name "," internal_metadata "," build_truncate_ build_truncate_statements  "," with_multi_ build_truncate_statements  "]}," ActiveRecord ConnectionAdapters DatabaseStatements write_query?":{"type":"method","name":"write_query?","children":[],"call":[" raise "]}," ActiveRecord ConnectionAdapters DatabaseLimits max_identifier_length":{"type":"method","name":"max_identifier_length","children":[],"call":[]}," ActiveRecord ConnectionAdapters ConnectionHandler while_preventing_writes":{"type":"method","name":"while_preventing_writes","children":[],"call":[" prevent_writes= "," prevent_writes "," raise ","ActiveRecord Base  legacy_connection_handling ","ActiveRecord  legacy_connection_handling "]}," ActiveRecord ConnectionAdapters ConnectionHandler prevent_writes=":{"type":"method","name":"prevent_writes=","children":[],"call":["Thread  current []= ","Thread  current ","ActiveSupport IsolatedExecutionState  []= "]}," ActiveRecord ConnectionAdapters ConnectionHandler prevent_writes":{"type":"method","name":"prevent_writes","children":[],"call":["Thread  current [] ","Thread  current ","ActiveSupport IsolatedExecutionState  [] "]}," ActiveRecord ConnectionAdapters ConnectionPool Reaper spawn_thread":{"type":"method","name":"spawn_thread","children":[],"call":["p flush ","p reap ","@pools [] each ","@pools [] ","@pools [] select! ","@mutex synchronize "," sleep "," loop ","Thread  new ","@threads delete ","@pools delete ","@pools [] empty? ","pool discarded? ! ","pool discarded? ","pool weakref_alive? ","Thread  current thread_variable_set ","Thread  current "]}," ActiveRecord ConnectionAdapters ConnectionPool Reaper register_pool":{"type":"method","name":"register_pool","children":[],"call":["@pools [] << ","WeakRef  new ","@pools [] "," spawn_thread ","@pools []= ","@pools key? ","@mutex synchronize ","@threads []= ","@threads [] "]}," ActiveRecord ConnectionAdapters NullPool initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractPool set_schema_cache":{"type":"method","name":"set_schema_cache","children":[],"call":[" schema_cache= "]}," ActiveRecord ConnectionAdapters AbstractPool get_schema_cache":{"type":"method","name":"get_schema_cache","children":[],"call":["@schema_cache connection= ","SchemaCache  new "," schema_cache "," schema_cache connection= "]}," ActiveRecord AttributeMethods format_for_inspect":{"type":"method","name":"format_for_inspect","children":[],"call":["value inspect ","value to_s ","value is_a? ","(begin\n  (send\n    (lvar :value) :[]\n    (int 0)\n    (int 50))) inspect ","value [] ","value length > ","value length "," inspection_filter filter_param "," inspection_filter ","value nil? ","value to_formatted_s ","value to_fs "]}," ActiveRecord AttributeMethods Dirty attribute_names_for_partial_writes":{"type":"method","name":"attribute_names_for_partial_writes","children":[],"call":[" attribute_names "," changed_attribute_names_to_save "," partial_writes? "]}," ActiveRecord AttributeMethods Dirty _touch_row":{"type":"method","name":"_touch_row","children":[],"call":[" _write_attribute ","changes each "," changes_applied "," clear_attribute_change "," attribute_was ","changes []= "," _read_attribute "," attribute_changed? ","@_touch_attr_names include? ","@attributes keys each ","@attributes keys "," clear_attribute_changes ","Set  new ","Set  new  include? "]}," ActiveRecord Associations Preloader AlreadyLoaded records_by_owner":{"type":"method","name":"records_by_owner","children":[],"call":["result []= "," Array ","owner association target ","owner association "," reflection name "," reflection "," owners each_with_object "," owners "," owners index_with "]}," ActiveRecord Associations Preloader preloaders_for_reflection":{"type":"method","name":"preloaders_for_reflection","children":[],"call":[" preloader_for new run "," preloader_for new "," preloader_for ","(send\n  (lvar :records) :group_by) map ","record association klass ","record association ","reflection name ","records group_by ","loader run "," pre preloader_for new _for new run "," pre preloader_for new _for new "," pre preloader_for new _for "," preloader_for new  run "]}," ActiveRecord Associations Preloader ThroughAssociation through_preloaders":{"type":"method","name":"through_preloaders","children":[],"call":["PRELOADER  preload "," through_scope "," through_reflection name "," through_reflection "," owners ","ActiveRecord Associations Preloader  new loaders ","ActiveRecord Associations Preloader  new "]}," ActiveRecord Associations Preloader ThroughAssociation middle_records":{"type":"method","name":"middle_records","children":[],"call":[" through_preloaders flat_map "," through_preloaders "," through_records_by_owner values flatten "," through_records_by_owner values "," through_records_by_owner "]}," ActiveRecord Associations Preloader ThroughAssociation source_preloaders":{"type":"method","name":"source_preloaders","children":[],"call":["PRELOADER  preload "," scope "," source_reflection name "," source_reflection "," middle_records ","ActiveRecord Associations Preloader  new loaders ","ActiveRecord Associations Preloader  new "]}," ActiveRecord Associations Preloader ThroughAssociation records_by_owner":{"type":"method","name":"records_by_owner","children":[],"call":["result []= ","records uniq! "," scope distinct_value "," scope "," preload_index [] "," preload_index ","records sort_by! "," scope order_values any? "," scope order_values ","records compact! ","source_records_by_owner [] ","through_records flat_map ","record [] == ","record [] "," reflection foreign_type "," reflection ","through_records select "," reflection options [] "," reflection options ","through_records_by_owner [] "," owners each_with_object "," owners "," through_preloaders map reduce "," through_preloaders map "," through_preloaders "," source_preloaders map reduce "," source_preloaders map "," source_preloaders "," source_records_by_owner [] "," source_records_by_owner "," owners first association loaded? "," owners first association "," through_reflection name "," through_reflection "," owners first "," through_records_by_owner [] "," through_records_by_owner "," target_for "," loaded? "," source_preloaders map reduce  [] "," through_preloaders map reduce  [] ","  source_preloaders map reduce  [] ","  source_preloaders map reduce  ","  through_preloaders map reduce  [] ","  through_preloaders map reduce  "]}," ActiveRecord Associations Preloader ThroughAssociation preloaded_records":{"type":"method","name":"preloaded_records","children":[],"call":[" source_preloaders flat_map "," source_preloaders "]}," ActiveRecord Associations Preloader ThroughAssociation initialize":{"type":"method","name":"initialize","children":[],"call":[" owners first association loaded? "," owners first association "," through_reflection name "," through_reflection "," owners first "," owners "]}," ActiveRecord Associations Preloader Association preloaded_records":{"type":"method","name":"preloaded_records","children":[],"call":[" records_for "," owner_keys "," owner_keys empty? "," load_records "," ensure_loaded "]}," ActiveRecord Associations Preloader Association records_by_owner":{"type":"method","name":"records_by_owner","children":[],"call":["(or-asgn\n  (send\n    (lvar :result) :[]\n    (lvar :owner))\n  (array)) << ","result [] "," owners_by_key [] each "," owners_by_key [] "," convert_key ","record [] "," association_key_name "," owners_by_key "," preloaded_records each_with_object "," compare_by_identity "," preloaded_records "," load_records "," ensure_loaded "]}," ActiveRecord Associations JoinDependency JoinAssociation readonly?":{"type":"method","name":"readonly?","children":[],"call":[" reflection scope_for readonly_value "," reflection scope_for "," base_klass unscoped "," base_klass "," reflection "," reflection scope "]}," Associations ForeignAssociation nullified_owner_attributes":{"type":"method","name":"nullified_owner_attributes","children":[],"call":["attrs []= "," reflection type "," reflection "," reflection type present? "," reflection foreign_key ","Hash  new tap ","Hash  new "," Array each "," Array "]}," Builder HasOne add_touch_callbacks":{"type":"method","name":"add_touch_callbacks","children":[],"call":[]}," Builder HasOne touch_record":{"type":"method","name":"touch_record","children":[],"call":[]}," Builder HasOne define_callbacks":{"type":"method","name":"define_callbacks","children":[],"call":[]}," Builder HasAndBelongsToMany table_name":{"type":"method","name":"table_name","children":[],"call":["(send\n  (send nil :lhs_model) :table_name) sort join gsub tr ","(send\n  (send nil :lhs_model) :table_name) sort join gsub ","(send\n  (send nil :lhs_model) :table_name) sort join ","(send\n  (send nil :lhs_model) :table_name) sort ","klass table_name "," lhs_model table_name "," lhs_model "," lhs_model send ","class_name to_s "," association_name to_s camelize singularize "," association_name to_s camelize "," association_name to_s "," association_name "," options fetch "," options "," options [] to_s "," options [] "," lhs_model send  table_name "]}," ActiveRecord Associations BelongsToAssociation update_counters_via_scope":{"type":"method","name":"update_counters_via_scope","children":[],"call":["scope update_counters "," reflection options [] "," reflection options "," reflection "," reflection counter_cache_column ","klass unscoped where! "," primary_key ","klass unscoped ","klass unscoped where!  update_counters ","klass unklass unscoped where! d where! ","klass unklass unscoped where! d "]}," ActiveRecord Associations BelongsToAssociation decrement_counters_before_last_save":{"type":"method","name":"decrement_counters_before_last_save","children":[],"call":[" update_counters_via_scope ","model_was < "," owner attribute_before_last_save "," reflection foreign_key "," reflection "," owner "," klass "," owner attribute_before_last_save try "," reflection foreign_type "," reflection polymorphic? "," owner class polymorphic_class_for "," owner class "," klass  < "," owner attribute_before_last_save try  < "," owner class polymorphic_class_for  < "]}," ActiveRecord Associations Association find_target":{"type":"method","name":"find_target","children":[],"call":[" set_inverse_instance ","sc execute ","AssociationScope  get_bind_values "," reflection chain "," reflection "," owner "," target_scope merge! ","as scope "," target_scope ","params bind ","AssociationScope  create "," reflection association_scope_cache "," klass connection "," klass ","scope to_a "," skip_statement_cache? "," scope ","Base  strict_loading_violation! "," reflection name "," owner class "," owner validation_context nil? "," owner validation_context "," reflection strict_loading? "," owner strict_loading? "," strict_loading? ","record strict_loading! "," owner strict_loading_mode "," reflection macro == "," reflection macro "," owner strict_loading_n_plus_one_only? "," violates_strict_loading? "," target_ scope  merge! ","as  scope  "," target_ scope  "," reflection association_ scope _cache "," klass  klass connection ection "," scope  to_a ","  scope  "]}," Arel Visitors ToSql visit_Arel_Nodes_Values":{"type":"method","name":"visit_Arel_Nodes_Values","children":[],"call":["collector << ","i == "," quote to_s "," quote "," visit ","o expressions each_with_index ","o expressions ","o expressions length - ","o expressions length "," visit  << ","o expressions o expressions length - gth - ","o expressions o expressions length - gth "]}," Arel Visitors Dot visit_Arel_Nodes_Values":{"type":"method","name":"visit_Arel_Nodes_Values","children":[],"call":[" visit_edge "]}," Arel SelectManager Row method_missing":{"type":"method","name":"method_missing","children":[],"call":[" data [] "," data "," data key? ","name to_s ","name to_s  to_s "]}," Arel SelectManager Row id":{"type":"method","name":"id","children":[],"call":[" data [] "," data "]}," Arel Nodes ValuesList eql?":{"type":"method","name":"eql?","children":[],"call":[" rows == ","other rows "," rows "," class == ","other class "," class "]}," Arel Nodes ValuesList hash":{"type":"method","name":"hash","children":[],"call":["@rows hash "]}," Arel Nodes ValuesList initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Arel Nodes Values initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord TestDatabases drop":{"type":"method","name":"drop","children":[],"call":[]}," ActiveRecord Scoping Default ClassMethods _scoping":{"type":"method","name":"_scoping","children":[],"call":[" current_scope= "," current_scope "]}," ActiveRecord DatabaseConfigurations build_url_config":{"type":"method","name":"build_url_config","children":[],"call":["configs + ","ActiveRecord DatabaseConfigurations UrlConfig  new ","config config ","config spec_name ","configs map ","original_config url_config? ","configs find ","ActiveRecord ConnectionHandling DEFAULT_ENV  call to_s ","ActiveRecord ConnectionHandling DEFAULT_ENV  call ","config env_name ","config url_config? ","configs find  url_config? ","config ActiveRecord ConnectionHandling DEFAULT_ENV  call to_s _name "]}," ActiveRecord ConnectionAdapters SQLite3Adapter write_query?":{"type":"method","name":"write_query?","children":[],"call":["READ_QUERY  match? ! ","READ_QUERY  match? "]}," ActiveRecord ConnectionAdapters AbstractAdapter while_preventing_writes":{"type":"method","name":"while_preventing_writes","children":[],"call":[]}," ActiveRecord AttributeMethods ClassMethods disallow_raw_sql!":{"type":"method","name":"disallow_raw_sql!","children":[],"call":[" raise ","Query method called with non-attribute argument(s):  + ","unexpected map join ","unexpected map ","ActiveSupport Deprecation  warn "," allow_unsafe_raw_sql == "," allow_unsafe_raw_sql ","unexpected none? ","permit match? ","arg to_s split all? ","arg to_s split ","arg to_s ","Arel  arel_node? ","args reject "]}," ActiveRecord QueryMethods select_association_list":{"type":"method","name":"select_association_list","children":[],"call":[" block_given? ","result << ","associations each "]}," ActiveRecord Core InspectionMask pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["pp text "," __getobj__ "]}," ActiveRecord ConnectionAdapters SQLite3Adapter supports_common_table_expressions?":{"type":"method","name":"supports_common_table_expressions?","children":[],"call":[" database_version >= "," database_version "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter supports_common_table_expressions?":{"type":"method","name":"supports_common_table_expressions?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter supports_common_table_expressions?":{"type":"method","name":"supports_common_table_expressions?","children":[],"call":[" database_version >= "," database_version "," mariadb? "]}," ActiveRecord ConnectionAdapters AbstractAdapter supports_common_table_expressions?":{"type":"method","name":"supports_common_table_expressions?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter prepared_statements_disabled_cache":{"type":"method","name":"prepared_statements_disabled_cache","children":[],"call":["Set  new ","Thread  current [] ","Thread  current ","ActiveSupport IsolatedExecutionState  [] "]}," ActiveRecord ConnectionAdapters DatabaseStatements exec_insert_all":{"type":"method","name":"exec_insert_all","children":[],"call":[" exec_query "," internal_exec_query "]}," ActiveRecord Associations JoinDependency base_klass":{"type":"method","name":"base_klass","children":[],"call":[" join_root base_klass "," join_root "]}," ActiveRecord Associations Association scoping":{"type":"method","name":"scoping","children":[],"call":["relation scoping "]}," ActiveRecord TableMetadata predicate_builder":{"type":"method","name":"predicate_builder","children":[],"call":["PredicateBuilder  new ","predicate_builder instance_variable_set "," klass predicate_builder dup "," klass predicate_builder "," klass "," klass predicate_builder dup  instance_variable_set "," klass  klass predicate_builder dup  dup "," klass  klass predicate_builder dup  "]}," ActiveRecord TableMetadata associated_predicate_builder":{"type":"method","name":"associated_predicate_builder","children":[],"call":[" associated_table predicate_builder "," associated_table "]}," ActiveRecord Relation cache_key_with_version":{"type":"method","name":"cache_key_with_version","children":[],"call":[" cache_key "," cache_version "," cache_ cache_version  "]}," ActiveRecord Relation FromClause ==":{"type":"method","name":"==","children":[],"call":[" name == ","other name "," name "," value == ","other value "," value "," class == ","other class "," class "]}," ActiveRecord ConnectionAdapters SQLite3 DatabaseStatements build_truncate_statement":{"type":"method","name":"build_truncate_statement","children":[],"call":[" quote_table_name "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter supports_partitioned_indexes?":{"type":"method","name":"supports_partitioned_indexes?","children":[],"call":[" database_version >= "," database_version "]}," ActiveRecord ConnectionAdapters PostgreSQL DatabaseStatements execute_batch":{"type":"method","name":"execute_batch","children":[],"call":[" execute "," combine_multi_statements "]}," ActiveRecord ConnectionAdapters AbstractAdapter supports_partitioned_indexes?":{"type":"method","name":"supports_partitioned_indexes?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SchemaStatements remove_timestamps_for_alter":{"type":"method","name":"remove_timestamps_for_alter","children":[],"call":[" remove_columns_for_alter "]}," ActiveRecord ConnectionAdapters SchemaStatements add_timestamps_for_alter":{"type":"method","name":"add_timestamps_for_alter","children":[],"call":[" add_column_for_alter ","options []= "," supports_datetime_with_precision? ","options key? ! ","options key? ","options [] nil? ","options [] "]}," ActiveRecord ConnectionAdapters DatabaseStatements build_truncate_statement":{"type":"method","name":"build_truncate_statement","children":[],"call":[" quote_table_name "]}," ActiveRecord Associations JoinDependency explicit_selections":{"type":"method","name":"explicit_selections","children":[],"call":["Aliases Column  new ","(send\n  (send\n    (lvar :result_set) :columns) :reject) map ","n =~ ","root_names include? ","result_set columns reject ","result_set columns ","root_column_aliases map to_set ","root_column_aliases map ","result << ","(str \"\\\\At\\\\d+_r\\\\d+\\\\z\") match? ","result_set columns each_with_object ","root_column_aliases map to_set  include? "]}," ActiveRecord AdvisoryLockBase _internal?":{"type":"method","name":"_internal?","children":[],"call":[]}," ActiveRecord TestFixtures teardown_shared_connection_pool":{"type":"method","name":"teardown_shared_connection_pool","children":[],"call":["@saved_pool_configs clear ","handler send []= ","handler send ","pools each_pair ","@saved_pool_configs each_pair ","@legacy_saved_pool_configs clear ","pool_manager set_pool_config ","pool_manager get_pool_config ","roles each_pair ","shards each_pair ","handler send [] ","ActiveRecord Base  connection_handler ","names each_pair ","@legacy_saved_pool_configs each_pair ","ActiveRecord Base  legacy_connection_handling ","ActiveRecord  legacy_connection_handling ","ActiveRecord Base  connection_handler  send []= ","ActiveRecord Base  connection_handler  send ","handler send []  set_pool_config ","handler send []  get_pool_config ","ActiveRecord Base  connection_handler  send [] ","ActiveRecord Base  connection_ActiveRecord Base  connection_handler  "]}," ActiveRecord Scoping Named ClassMethods singleton_method_added":{"type":"method","name":"singleton_method_added","children":[],"call":[" generate_relation_method ","ActiveRecord Relation  method_defined? ! ","ActiveRecord Relation  method_defined? ","Kernel  respond_to? "]}," ActiveRecord Locking Optimistic increment!":{"type":"method","name":"increment!","children":[],"call":[" clear_attribute_change "," class locking_column "," class "," [] "," locking_enabled? "," tap "]}," ActiveRecord Enum detect_negative_enum_conditions!":{"type":"method","name":"detect_negative_enum_conditions!","children":[],"call":[" logger warn "," name "," logger ","method_names include? ","potential_not sub ","(send\n  (lvar :method_names) :select) each ","m start_with? ","method_names select "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Range unquote":{"type":"method","name":"unquote","children":[],"call":["unquoted_value gsub! ","value [] ","value end_with? ","value start_with? ","value []  gsub! "]}," ActiveRecord ConnectionAdapters PostgreSQL OID DateTime type_cast_for_schema":{"type":"method","name":"type_cast_for_schema","children":[],"call":[" Float INFINITY  -@ "]}," ActiveRecord ConnectionAdapters aliased_types":{"type":"method","name":"aliased_types","children":[],"call":["timestamp == "]}," ActiveRecord AutosaveAssociation around_save_collection_association":{"type":"method","name":"around_save_collection_association","children":[],"call":[" new_record? ","previously_new_record_before_save ! "]}," ActiveRecord Generators ModelGenerator migration":{"type":"method","name":"migration","children":[],"call":[" options [] "," options "]}," ActiveRecord Generators ModelGenerator parent":{"type":"method","name":"parent","children":[],"call":[" options [] "," options "]}," ActiveRecord Generators ModelGenerator database":{"type":"method","name":"database","children":[],"call":[" options [] "," options "]}," ActiveRecord Generators ModelGenerator abstract_class_name":{"type":"method","name":"abstract_class_name","children":[],"call":[" database camelize "," database "]}," ActiveRecord Generators ModelGenerator generate_abstract_class":{"type":"method","name":"generate_abstract_class","children":[],"call":[" template ","File  exist? ","File  join "," database underscore "," database "]}," ActiveRecord Generators ModelGenerator skip_migration_creation?":{"type":"method","name":"skip_migration_creation?","children":[],"call":[" migration ! "," migration "," database ! "," database "," parent "," custom_parent? "]}," ActiveRecord Generators Migration foreign_key_type":{"type":"method","name":"foreign_key_type","children":[],"call":[" options [] "," options "]}," Arel Visitors ToSql collect_ctes":{"type":"method","name":"collect_ctes","children":[],"call":[" visit ","collector << "," quote_table_name ","child relation ","child name ","child right ","child left name ","child left ","i == ","children each_with_index ","child to_cte "," quote_table_child name  "," quote_table_child left name  ","child child relation  ","child child right  ","child child name  ","child child left name  ","child left child name  ","child left child left name  "]}," Arel Visitors ToSql visit_Integer":{"type":"method","name":"visit_Integer","children":[],"call":["collector << ","o to_s "]}," Arel Visitors ToSql visit_Arel_Nodes_SqlLiteral":{"type":"method","name":"visit_Arel_Nodes_SqlLiteral","children":[],"call":["collector << ","o to_s ","collector preparable= "]}," Arel Visitors ToSql bind_block":{"type":"method","name":"bind_block","children":[],"call":[]}," Arel Visitors ToSql visit_Arel_Nodes_HomogeneousIn":{"type":"method","name":"visit_Arel_Nodes_HomogeneousIn","children":[],"call":["collector << ","collector add_binds "," bind_block ","@connection quote ","values empty? ","o casted_values ","o type == ","o type ","collector << << << "," quote_column_name ","o column_name ","collector << << "," quote_table_name ","o table_name ","collector preparable= ","o proc_for_binds "," visit ","o left ","o casted_values  empty? ","o casted_o casted_values  "]}," Arel Visitors PostgreSQL bind_block":{"type":"method","name":"bind_block","children":[],"call":[]}," Arel Visitors PostgreSQL visit_Arel_Nodes_NullsLast":{"type":"method","name":"visit_Arel_Nodes_NullsLast","children":[],"call":["collector << "," visit ","o expr "]}," Arel Visitors PostgreSQL visit_Arel_Nodes_NullsFirst":{"type":"method","name":"visit_Arel_Nodes_NullsFirst","children":[],"call":["collector << "," visit ","o expr "]}," Arel Visitors MySQL visit_Arel_Nodes_NotRegexp":{"type":"method","name":"visit_Arel_Nodes_NotRegexp","children":[],"call":[" infix_value "]}," Arel Visitors MySQL visit_Arel_Nodes_Regexp":{"type":"method","name":"visit_Arel_Nodes_Regexp","children":[],"call":[" infix_value "]}," Arel Visitors Dot visit_ActiveModel_Attribute":{"type":"method","name":"visit_ActiveModel_Attribute","children":[],"call":[" visit ","o value_before_type_cast "," edge "," visit_edge "]}," Arel Visitors Dot visit_Arel_Nodes_HomogeneousIn":{"type":"method","name":"visit_Arel_Nodes_HomogeneousIn","children":[],"call":[" visit_edge "]}," Arel Table type_for_attribute":{"type":"method","name":"type_for_attribute","children":[],"call":[" type_caster type_for_attribute "," type_caster "]}," Arel Predications overlaps":{"type":"method","name":"overlaps","children":[],"call":["Arel Nodes Overlaps  new "," quoted_node "]}," Arel Predications contains":{"type":"method","name":"contains","children":[],"call":["Arel Nodes Contains  new "," quoted_node "]}," Arel Nodes TableAlias type_for_attribute":{"type":"method","name":"type_for_attribute","children":[],"call":[" relation type_for_attribute "," relation "]}," Arel Nodes SqlLiteral fetch_attribute":{"type":"method","name":"fetch_attribute","children":[],"call":[]}," Arel Nodes NullsLast reverse":{"type":"method","name":"reverse","children":[],"call":["NullsFirst  new "," expr reverse "," expr "]}," Arel Nodes NullsFirst reverse":{"type":"method","name":"reverse","children":[],"call":["NullsLast  new "," expr reverse "," expr "]}," Arel Nodes Ordering nulls_last":{"type":"method","name":"nulls_last","children":[],"call":["NullsLast  new "]}," Arel Nodes Ordering nulls_first":{"type":"method","name":"nulls_first","children":[],"call":["NullsFirst  new "]}," Arel Nodes Node equality?":{"type":"method","name":"equality?","children":[],"call":[]}," Arel Nodes Node fetch_attribute":{"type":"method","name":"fetch_attribute","children":[],"call":[]}," Arel Nodes Node invert":{"type":"method","name":"invert","children":[],"call":["Arel Nodes Not  new "]}," Arel Nodes Overlaps initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Arel Nodes Contains initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Arel Nodes In invert":{"type":"method","name":"invert","children":[],"call":["Arel Nodes NotIn  new "," right "," left "]}," Arel Nodes In equality?":{"type":"method","name":"equality?","children":[],"call":[]}," Arel Nodes HomogeneousIn ivars":{"type":"method","name":"ivars","children":[],"call":[]}," Arel Nodes HomogeneousIn fetch_attribute":{"type":"method","name":"fetch_attribute","children":[],"call":[" expr fetch_attribute "," expr "," attribute "]}," Arel Nodes HomogeneousIn casted_values":{"type":"method","name":"casted_values","children":[],"call":["casted_values compact! ","type serialize ","type serializable? "," values map "," values "," attribute type_caster "," attribute "," attribute type_caster  serialize "," attribute type_caster  serializable? "," attribute  attribute type_caster _caster "]}," Arel Nodes HomogeneousIn column_name":{"type":"method","name":"column_name","children":[],"call":[" attribute name "," attribute "]}," Arel Nodes HomogeneousIn table_name":{"type":"method","name":"table_name","children":[],"call":[" attribute relation name "," attribute relation "," attribute "," attribute relation table_alias "]}," Arel Nodes HomogeneousIn right":{"type":"method","name":"right","children":[],"call":[" attribute quoted_array "," values "," attribute "]}," Arel Nodes HomogeneousIn left":{"type":"method","name":"left","children":[],"call":[" attribute "]}," Arel Nodes HomogeneousIn invert":{"type":"method","name":"invert","children":[],"call":["Arel Nodes HomogeneousIn  new "," type == "," type "," attribute "," values "]}," Arel Nodes HomogeneousIn equality?":{"type":"method","name":"equality?","children":[],"call":[" type == "," type "]}," Arel Nodes HomogeneousIn eql?":{"type":"method","name":"eql?","children":[],"call":[" ivars == ","other ivars "," ivars "," class == ","other class "," class "]}," Arel Nodes HomogeneousIn hash":{"type":"method","name":"hash","children":[],"call":[" ivars hash "," ivars "]}," Arel Nodes HomogeneousIn initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Arel Nodes Grouping fetch_attribute":{"type":"method","name":"fetch_attribute","children":[],"call":[" expr fetch_attribute "," expr "]}," Arel Nodes Equality invert":{"type":"method","name":"invert","children":[],"call":["Arel Nodes NotEqual  new "," right "," left "]}," Arel Nodes Equality equality?":{"type":"method","name":"equality?","children":[],"call":[]}," Arel Nodes Casted value_for_database":{"type":"method","name":"value_for_database","children":[],"call":[" value "," attribute type_cast_for_database "," attribute "," attribute able_to_type_cast? "]}," Arel Nodes BindParam value_before_type_cast":{"type":"method","name":"value_before_type_cast","children":[],"call":[" value "," value value_before_type_cast "," value respond_to? "]}," Arel Nodes Or fetch_attribute":{"type":"method","name":"fetch_attribute","children":[],"call":[" right fetch_attribute "," right "," left fetch_attribute "," left "]}," Arel Nodes NotIn invert":{"type":"method","name":"invert","children":[],"call":["Arel Nodes In  new "," right "," left "]}," Arel Nodes NotEqual invert":{"type":"method","name":"invert","children":[],"call":["Arel Nodes Equality  new "," right "," left "]}," Arel Nodes IsNotDistinctFrom invert":{"type":"method","name":"invert","children":[],"call":["Arel Nodes IsDistinctFrom  new "," right "," left "]}," Arel Nodes IsDistinctFrom invert":{"type":"method","name":"invert","children":[],"call":["Arel Nodes IsNotDistinctFrom  new "," right "," left "]}," Arel Nodes LessThanOrEqual invert":{"type":"method","name":"invert","children":[],"call":["Arel Nodes GreaterThan  new "," right "," left "]}," Arel Nodes LessThan invert":{"type":"method","name":"invert","children":[],"call":["Arel Nodes GreaterThanOrEqual  new "," right "," left "]}," Arel Nodes GreaterThanOrEqual invert":{"type":"method","name":"invert","children":[],"call":["Arel Nodes LessThan  new "," right "," left "]}," Arel Nodes GreaterThan invert":{"type":"method","name":"invert","children":[],"call":["Arel Nodes LessThanOrEqual  new "," right "," left "]}," Arel Nodes FetchAttribute fetch_attribute":{"type":"method","name":"fetch_attribute","children":[],"call":[" right "," right is_a? "," left "," left is_a? "]}," Arel Collectors SubstituteBinds add_binds":{"type":"method","name":"add_binds","children":[],"call":[" << ","(send\n  (lvar :binds) :map) join "," quoter quote "," quoter ","binds map "]}," Arel Collectors SQLString add_binds":{"type":"method","name":"add_binds","children":[],"call":[" << ","(erange\n  (ivar :@bind_index)\n  (op-asgn\n    (ivasgn :@bind_index) :+\n    (send\n      (lvar :binds) :size))) map join ","(erange\n  (ivar :@bind_index)\n  (op-asgn\n    (ivasgn :@bind_index) :+\n    (send\n      (lvar :binds) :size))) map ","binds size "]}," Arel Collectors Composite add_binds":{"type":"method","name":"add_binds","children":[],"call":[" right add_binds "," right "," left add_binds "," left "]}," Arel Collectors Bind add_binds":{"type":"method","name":"add_binds","children":[],"call":["@binds concat ","binds map "]}," Arel Attributes Attribute type_caster":{"type":"method","name":"type_caster","children":[],"call":[" relation type_for_attribute "," name "," relation "]}," ActiveRecord Validations NumericalityValidator column_scale_for":{"type":"method","name":"column_scale_for","children":[],"call":["record class type_for_attribute ","attribute to_s ","record class "]}," ActiveRecord Validations NumericalityValidator column_precision_for":{"type":"method","name":"column_precision_for","children":[],"call":["record class type_for_attribute ","attribute to_s ","record class "]}," ActiveRecord Validations NumericalityValidator validate_each":{"type":"method","name":"validate_each","children":[],"call":[" column_scale_for ","(or\n  (send nil :column_precision_for\n    (lvar :record)\n    (lvar :attribute))\n  (send\n    (const nil :BigDecimal) :double_fig)) min ","BigDecimal  double_fig "," column_precision_for ","(or\n  (send nil :column_precision_for\n    (lvar :record)\n    (lvar :attribute))\n  (const\n    (const nil :Float) :DIG)) min "," column_ column_scale_for _for ","(or\n  (send nil :column_(or\n  (send nil :column_precision_for\n    (lvar :record)\n    (lvar :attribute))\n  (send\n    (const nil :BigDecimal) :double_fig)) min _for\n    (lvar :record)\n    (lvar :attribute))\n  (send\n    (const nil :BigDecimal) :double_fig)) min ","(or\n  (send nil :column_(or\n  (send nil :column_precision_for\n    (lvar :record)\n    (lvar :attribute))\n  (const\n    (const nil :Float) :DIG)) min _for\n    (lvar :record)\n    (lvar :attribute))\n  (send\n    (const nil :BigDecimal) :double_fig)) min "," column_(or\n  (send nil :column_precision_for\n    (lvar :record)\n    (lvar :attribute))\n  (send\n    (const nil :BigDecimal) :double_fig)) min _for "," column_(or\n  (send nil :column_precision_for\n    (lvar :record)\n    (lvar :attribute))\n  (const\n    (const nil :Float) :DIG)) min _for ","(or\n  (send nil :column_(or\n  (send nil :column_precision_for\n    (lvar :record)\n    (lvar :attribute))\n  (send\n    (const nil :BigDecimal) :double_fig)) min _for\n    (lvar :record)\n    (lvar :attribute))\n  (const\n    (const nil :Float) :DIG)) min ","(or\n  (send nil :column_(or\n  (send nil :column_precision_for\n    (lvar :record)\n    (lvar :attribute))\n  (const\n    (const nil :Float) :DIG)) min _for\n    (lvar :record)\n    (lvar :attribute))\n  (const\n    (const nil :Float) :DIG)) min "]}," ActiveRecord TypeCaster Map type_for_attribute":{"type":"method","name":"type_for_attribute","children":[],"call":[" klass type_for_attribute "," klass "]}," ActiveRecord Type adapter_name_from":{"type":"method","name":"adapter_name_from","children":[],"call":["model connection adapter_name downcase to_sym ","model connection adapter_name downcase ","model connection adapter_name ","model connection ","model connection_db_config adapter to_sym ","model connection_db_config adapter ","model connection_db_config "]}," ActiveRecord TouchLater before_committed!":{"type":"method","name":"before_committed!","children":[],"call":[" touch_deferred_attributes "," persisted? "," has_defer_touch_attrs? "]}," ActiveRecord Tasks SQLiteDatabaseTasks using_database_configurations?":{"type":"method","name":"using_database_configurations?","children":[],"call":[]}," ActiveRecord Tasks PostgreSQLDatabaseTasks using_database_configurations?":{"type":"method","name":"using_database_configurations?","children":[],"call":[]}," ActiveRecord Tasks MySQLDatabaseTasks configuration_hash_without_database":{"type":"method","name":"configuration_hash_without_database","children":[],"call":[" configuration_hash merge "," configuration_hash "]}," ActiveRecord Tasks MySQLDatabaseTasks using_database_configurations?":{"type":"method","name":"using_database_configurations?","children":[],"call":[]}," ActiveRecord Tasks DatabaseTasks database_adapter_for":{"type":"method","name":"database_adapter_for","children":[],"call":["klass new ","db_config configuration_hash ","klass using_database_configurations? ","klass respond_to? "," class_for_adapter ","db_config adapter "," class_for_adapter  new ","db_db_config configuration_hash  db_config configuration_hash uration_hash ","klass using_database_db_config configuration_hash urations? "," class_for_adapter  using_database_configurations? "," class_for_adapter  respond_to? ","db_db_config configuration_hash  adapter "]}," ActiveRecord Tasks DatabaseTasks resolve_configuration":{"type":"method","name":"resolve_configuration","children":[],"call":["Base  configurations resolve ","Base  configurations "]}," ActiveRecord Tasks DatabaseTasks clear_schema_cache":{"type":"method","name":"clear_schema_cache","children":[],"call":["FileUtils  rm_f "]}," ActiveRecord Tasks DatabaseTasks name":{"type":"method","name":"name","children":[],"call":[]}," ActiveRecord TableMetadata through_association?":{"type":"method","name":"through_association?","children":[],"call":[" reflection "]}," ActiveRecord TableMetadata primary_key":{"type":"method","name":"primary_key","children":[],"call":[" klass "]}," ActiveRecord StatementCache PartialQueryCollector add_binds":{"type":"method","name":"add_binds","children":[],"call":["@parts << ","Substitute  new ","i == ","binds size times ","binds size ","@binds concat ","binds map "]}," ActiveRecord SignedId signed_id":{"type":"method","name":"signed_id","children":[],"call":[" class signed_id_verifier generate "," class combine_signed_id_purposes "," class "," id "," class signed_id_verifier "," raise "," new_record? "]}," ActiveRecord SignedId ClassMethods combine_signed_id_purposes":{"type":"method","name":"combine_signed_id_purposes","children":[],"call":["(send\n  (send\n    (send nil :base_class) :name) :underscore) compact_blank join ","(send\n  (send\n    (send nil :base_class) :name) :underscore) compact_blank ","purpose to_s "," base_class name underscore "," base_class name "," base_class "]}," ActiveRecord SignedId ClassMethods signed_id_verifier=":{"type":"method","name":"signed_id_verifier=","children":[],"call":[]}," ActiveRecord SignedId ClassMethods signed_id_verifier":{"type":"method","name":"signed_id_verifier","children":[],"call":["ActiveSupport MessageVerifier  new "," raise ","secret nil? ","secret call ","secret respond_to? "," signed_id_verifier_secret ","secret call  nil? "," signed_id_verifier_secret  nil? ","secret call  call "," signed_id_verifier_secret  call ","secret call  respond_to? "," signed_id_verifier_secret  respond_to? "," signed_id_verifier_secret call  "," signed_id_verifier_ signed_id_verifier_secret  "]}," ActiveRecord SignedId ClassMethods find_signed!":{"type":"method","name":"find_signed!","children":[],"call":[" find "," signed_id_verifier verify "," combine_signed_id_purposes "," signed_id_verifier "," signed_ signed_id_verifier verify _verifier verify "," combine_signed_ signed_id_verifier verify _purposes "," signed_ signed_id_verifier verify _verifier "]}," ActiveRecord SignedId ClassMethods find_signed":{"type":"method","name":"find_signed","children":[],"call":[" find_by "," primary_key "," signed_id_verifier verified "," combine_signed_id_purposes "," signed_id_verifier "," raise ","UnknownPrimaryKey  new "," primary_key nil? "," signed_ signed_id_verifier verified _verifier verified "," combine_signed_ signed_id_verifier verified _purposes "," signed_ signed_id_verifier verified _verifier "]}," ActiveRecord SchemaDumper check_constraints_in_create":{"type":"method","name":"check_constraints_in_create","children":[],"call":["stream puts ","add_check_constraint_statements sort join ","add_check_constraint_statements sort ","parts join ","parts << ","check_constraint name inspect ","check_constraint name ","check_constraint export_name_on_schema_dump? ","check_constraint expression inspect ","check_constraint expression ","check_constraints map ","(lvasgn :check_constraints\n  (send\n    (ivar :@connection) :check_constraints\n    (lvar :table))) any? ","@connection check_constraints ","check_constraint validate? inspect ","check_constraint validate? ","@connection check_constraints  map ","(lvasgn :@connection check_constraints \n  (send\n    (ivar :@connection) :@connection check_constraints \n    (lvar :table))) any? ","@connection @connection check_constraints  "]}," ActiveRecord Relation _create!":{"type":"method","name":"_create!","children":[],"call":[" klass create! "," klass "]}," ActiveRecord Relation _create":{"type":"method","name":"_create","children":[],"call":[" klass create "," klass "]}," ActiveRecord Relation _new":{"type":"method","name":"_new","children":[],"call":[" klass new "," klass "]}," ActiveRecord Relation current_scope_restoring_block":{"type":"method","name":"current_scope_restoring_block","children":[],"call":[" block_given? "," klass current_scope= "," klass "," lambda "," klass current_scope "," klass  klass current_scope = "," klass  klass current_scope  "]}," ActiveRecord Relation StrictLoadingScope strict_loading_value":{"type":"method","name":"strict_loading_value","children":[],"call":[]}," ActiveRecord Relation StrictLoadingScope empty_scope?":{"type":"method","name":"empty_scope?","children":[],"call":[]}," ActiveRecord Relation WhereClause extract_attribute":{"type":"method","name":"extract_attribute","children":[],"call":["Arel  fetch_attribute "]}," ActiveRecord Relation WhereClause extract_attributes":{"type":"method","name":"extract_attributes","children":[],"call":["attrs << ","node left ","node left is_a? ","node equality? "," extract_attribute "," predicates each_with_object "," predicates "," each_attributes "]}," ActiveRecord Relation WhereClause contradiction?":{"type":"method","name":"contradiction?","children":[],"call":["x right unboundable? ","x right ","x right respond_to? ","x right empty? ","Array  === "," predicates any? "," predicates "]}," ActiveRecord Relation WhereClause |":{"type":"method","name":"|","children":[],"call":["WhereClause  new "," predicates | ","other predicates "," predicates "]}," ActiveRecord QueryMethods structurally_incompatible_values_for":{"type":"method","name":"structurally_incompatible_values_for","children":[],"call":["v1 == ","v2 uniq ","v1 uniq ","v2 is_a? ","v1 is_a? ","values [] ","@values [] ","STRUCTURAL_VALUE_METHODS  reject ","other values ","v2 empty? ","v2 ! ","v1 empty? ","v1 ! ","v1 uniq  == ","v2 uniq  uniq ","v1 uniq  uniq ","v2 uniq  is_a? ","v1 uniq  is_a? ","other values  [] ","@other values  [] ","other other values  ","v2 uniq  empty? ","v2 uniq  ! ","v1 uniq  empty? ","v1 uniq  ! "]}," ActiveRecord QueryMethods resolve_arel_attributes":{"type":"method","name":"resolve_arel_attributes","children":[],"call":[" predicate_builder resolve_arel_attribute "," predicate_builder ","attr split ","attr include? ","attr to_s "," Array map "," Array ","table to_s ","attr flat_map ","attrs flat_map "," predicate_builder resolve_arel_attr to_s ibute ","attr to_s  split ","attr to_s  include? ","attr to_s  to_s ","table to_s  to_s ","attr to_s  flat_map ","attr to_s s flat_map "]}," ActiveRecord QueryMethods column_references":{"type":"method","name":"column_references","children":[],"call":["(send\n  (lvar :references) :map!) compact! ","arg =~ ","references map! ","order_args grep ","arg keys ","order_args flat_map ","key is_a? ","arg keys map ","(send\n  (lvar :order_args grep ) :map!) compact! ","order_args grep  map! "]}," ActiveRecord QueryMethods sanitize_order_arguments":{"type":"method","name":"sanitize_order_arguments","children":[],"call":["order_args compact_blank! ","order_args flatten! "," klass sanitize_sql_for_order "," klass ","order_args map! "]}," ActiveRecord QueryMethods build_join_buckets":{"type":"method","name":"build_join_buckets","children":[],"call":["buckets [] << ","buckets [] ","buckets [] concat ","buckets []= "," raise ","unknown class: %s % ","join class name ","join class ","join is_a? "," select_association_list ","join_node is_a? ! ","join_node is_a? ","joins shift ","joins first is_a? ","joins first ","joins []= ","Arel Nodes StringJoin  new ","Arel  sql ","join strip ","joins each_with_index ","joins pop ","joins last base_klass == "," klass ","joins last base_klass ","joins last ","joins last is_a? "," joins_values dup "," joins_values ","stashed_left_joins unshift "," construct_join_dependency "," joins_values empty? "," left_outer_joins_values "," left_outer_joins_values empty? ","h []= ","Hash  new "," build_with_join_node ","join name "," select_named_joins ","left_join name ","left_join is_a? ","joins shift  is_a? ! ","joins shift  is_a? "," joins_values dup  shift "," joins_values dup  first is_a? "," joins_values dup  first "," joins_values dup  []= "," joins_values dup  each_with_index "," joins_values dup  pop "," joins_values dup  last base_klass == "," joins_values dup  last base_klass "," joins_values dup  last "," joins_values dup  last is_a? ","  joins_values dup _values dup ","  joins_values dup _values ","stashed_left_ joins_values dup  unshift ","  joins_values dup _values empty? "," left_outer_ joins_values dup _values "," left_outer_ joins_values dup _values empty? "," build_with_joins shift  "," select_named_ joins_values dup  "]}," ActiveRecord QueryMethods build_cast_value":{"type":"method","name":"build_cast_value","children":[],"call":["Arel Nodes BindParam  new ","ActiveModel Attribute  with_cast_value ","Type  default_value ","ActiveModel Attribute  with_ActiveModel Attribute  with_cast_value  "]}," ActiveRecord QueryMethods build_join_dependencies":{"type":"method","name":"build_join_dependencies","children":[],"call":["join_dependencies unshift "," construct_join_dependency "," select_association_list "," includes_values "," includes_values empty? "," eager_load_values "," eager_load_values empty? "," joins_values | "," left_outer_joins_values "," joins_values "," select_named_joins ","  joins_values | _values | "," left_outer_ joins_values | _values ","  joins_values | _values "," select_named_ joins_values |  "]}," ActiveRecord QueryMethods each_join_dependencies":{"type":"method","name":"each_join_dependencies","children":[],"call":["join_dependency each ","join_dependencies each "]}," ActiveRecord QueryMethods lookup_reflection_from_join_dependencies":{"type":"method","name":"lookup_reflection_from_join_dependencies","children":[],"call":["join reflection ","table_name == ","join table_name "," each_join_dependencies "]}," ActiveRecord QueryMethods build_where_clause":{"type":"method","name":"build_where_clause","children":[],"call":["Relation WhereClause  new "," raise ","opts class "," lookup_reflection_from_join_dependencies "," predicate_builder build_from_hash "," predicate_builder "," references_values ","references empty? ","PredicateBuilder  references ","opts stringify_keys "," klass sanitize_sql ","rest empty? "," klass "," sanitize_forbidden_attributes "," lookup_table_klass_from_join_dependencies "," klass attribute_aliases [] "," klass attribute_aliases ","key to_s ","opts transform_keys ","k to_s ","key map ","key is_a? ","opts stringify_keys  class "," sanitize_forbidden_attributes  class "," PredicateBuilder  references _values ","PredicateBuilder  references  empty? ","PredicateBuilder  PredicateBuilder  references  ","opts stringify_keys  stringify_keys "," sanitize_forbidden_attributes  stringify_keys ","opts stringify_key to_s s ","key to_s  to_s ","opts stringify_keys  transform_keys "," sanitize_forbidden_attributes  transform_keys ","opts transform_key to_s s ","key to_s  map ","key to_s  is_a? "]}," ActiveRecord QueryMethods strict_loading!":{"type":"method","name":"strict_loading!","children":[],"call":[" strict_loading_value= "]}," ActiveRecord QueryMethods strict_loading":{"type":"method","name":"strict_loading","children":[],"call":[" spawn strict_loading! "," spawn "]}," ActiveRecord QueryMethods and!":{"type":"method","name":"and!","children":[],"call":["other references_values "," references_values ","other having_clause "," having_clause ","other where_clause "," where_clause "," raise ","incompatible_values empty? "," structurally_incompatible_values_for "," structurally_incompatible_values_for  empty? "," structurally_ structurally_incompatible_values_for _for "]}," ActiveRecord QueryMethods and":{"type":"method","name":"and","children":[],"call":[" raise ","other class name ","other class "," spawn and! "," spawn ","other is_a? "]}," ActiveRecord QueryMethods WhereChain missing":{"type":"method","name":"missing","children":[],"call":["@scope where! ","@scope left_outer_joins! ","reflection association_primary_key ","reflection table_name ","@scope klass _reflect_on_association ","@scope klass ","args each ","associations each "," raise ","ArgumentError  new ","@scope name "," scope_association_reflection ","@scope table_name == ","@scope table_name ","reflection options [] ","reflection options ","@scope klass _reflect_on_association  association_primary_key "," scope_association_reflection  association_primary_key ","@scope klass _reflect_on_association  table_name "," scope_association_reflection  table_name "," scope_association_@scope klass _reflect_on_association  "," scope_association_ scope_association_reflection  ","@scope klass _reflect_on_association  options [] "," scope_association_reflection  options [] ","@scope klass _reflect_on_association  options "," scope_association_reflection  options "]}," ActiveRecord PredicateBuilder grouping_queries":{"type":"method","name":"grouping_queries","children":[],"call":["Arel Nodes Grouping  new ","Arel Nodes Or  new ","queries reduce ","query reduce ","queries map! ","queries first ","queries one? "]}," ActiveRecord PredicateBuilder resolve_arel_attribute":{"type":"method","name":"resolve_arel_attribute","children":[],"call":[" table associated_table arel_table [] "," table associated_table arel_table "," table associated_table "," table "]}," ActiveRecord PredicateBuilder []":{"type":"method","name":"[]","children":[],"call":[" build "," table arel_table [] "," table arel_table "," table "]}," ActiveRecord FinderMethods check_reorder_deprecation":{"type":"method","name":"check_reorder_deprecation","children":[],"call":["ActiveSupport Deprecation  warn ","(str \"`.reorder(\") squish ","blank_value inspect "," order_values first "," order_values "," order_values all? "," order_values empty? ! "," order_values empty? "," order_values first  inspect "]}," ActiveRecord FinderMethods include?":{"type":"method","name":"include?","children":[],"call":[" exists? ","record id ","record is_a? "," klass "," records include? "," records "," limit_value "," offset_value "," loaded? "," having_clause any? "," having_clause ","record class primary_key zip to_h ","record class primary_key zip ","record class primary_key ","record class ","record class composite_primary_key? ","record record id  ","record record class primary_key zip to_h  "]}," ActiveRecord Calculations type_cast_pluck_values":{"type":"method","name":"type_cast_pluck_values","children":[],"call":["result cast_values ","Type  default_value ","result column_types [] ","result column_types "," lookup_cast_type_from_join_dependencies "," build_join_dependencies "," klass attribute_types fetch ","result columns [] ","result columns "," klass attribute_types "," klass ","column try ","columns map with_index ","columns map ","result columns size != ","columns size ","result columns size "]}," ActiveRecord Calculations lookup_cast_type_from_join_dependencies":{"type":"method","name":"lookup_cast_type_from_join_dependencies","children":[],"call":["join base_klass attribute_types fetch ","join base_klass attribute_types ","join base_klass "," each_join_dependencies ","join base_klass attribute_join base_klass attribute_types fetch s fetch ","join base_klass attribute_join base_klass attribute_types fetch s "]}," ActiveRecord Calculations all_attributes?":{"type":"method","name":"all_attributes?","children":[],"call":["(send\n  (send\n    (send\n      (lvar :column_names) :map\n      (block-pass\n        (sym :to_s))) :-\n    (send\n      (ivar :@klass) :attribute_names)) :-\n  (send\n    (send\n      (ivar :@klass) :attribute_aliases) :keys)) empty? ","column_names map - - ","@klass attribute_aliases keys ","@klass attribute_aliases ","column_names map - ","@klass attribute_names ","column_names map "]}," ActiveRecord Batches BatchEnumerator destroy_all":{"type":"method","name":"destroy_all","children":[],"call":[" each "]}," ActiveRecord Batches BatchEnumerator update_all":{"type":"method","name":"update_all","children":[],"call":["relation update_all "," sum "]}," ActiveRecord Batches BatchEnumerator delete_all":{"type":"method","name":"delete_all","children":[],"call":[" sum "]}," ActiveRecord Reflection RuntimeReflection join_primary_key":{"type":"method","name":"join_primary_key","children":[],"call":["@reflection join_primary_key "]}," ActiveRecord Reflection ThroughReflection join_primary_key":{"type":"method","name":"join_primary_key","children":[],"call":[" source_reflection join_primary_key "," source_reflection "]}," ActiveRecord Reflection BelongsToReflection join_foreign_type":{"type":"method","name":"join_foreign_type","children":[],"call":[" foreign_type "]}," ActiveRecord Reflection BelongsToReflection association_primary_key":{"type":"method","name":"association_primary_key","children":[],"call":[" primary_key "," klass ","primary_key to_s -@ ","primary_key to_s "," options [] "," options ","primary_key include? ","(or\n  (lvar :klass)\n  (send\n    (self) :klass)) primary_key ","(or\n  (lvar :klass)\n  (send\n    (self) :klass)) composite_primary_key? ","(or\n  (lvar :klass)\n  (send\n    (self) :klass)) composite_query_constraints_list ","(or\n  (lvar :klass)\n  (send\n    (self) :klass)) has_query_constraints? "," polymorphic? ! "," polymorphic? ","  options []  "," (or\n  (lvar :klass)\n  (send\n    (self) :klass)) primary_key  "," options []  to_s -@ ","(or\n  (lvar :klass)\n  (send\n    (self) :klass)) primary_key  to_s -@ "," options []  to_s ","(or\n  (lvar :klass)\n  (send\n    (self) :klass)) primary_key  to_s "," options []  include? ","(or\n  (lvar :klass)\n  (send\n    (self) :klass)) primary_key  include? ","(or\n  (lvar :klass)\n  (send\n    (self) :klass))  options []  ","(or\n  (lvar :klass)\n  (send\n    (self) :klass)) (or\n  (lvar :klass)\n  (send\n    (self) :klass)) primary_key  ","(or\n  (lvar :klass)\n  (send\n    (self) :klass)) composite_ options [] ? ","(or\n  (lvar :klass)\n  (send\n    (self) :klass)) composite_(or\n  (lvar :klass)\n  (send\n    (self) :klass)) primary_key ? "]}," ActiveRecord Reflection AssociationReflection join_foreign_key":{"type":"method","name":"join_foreign_key","children":[],"call":[" active_record_primary_key "]}," ActiveRecord Reflection AssociationReflection join_primary_key":{"type":"method","name":"join_primary_key","children":[],"call":[" foreign_key "]}," ActiveRecord Reflection AbstractReflection strict_loading?":{"type":"method","name":"strict_loading?","children":[],"call":[" options [] "," options "]}," ActiveRecord ReadonlyAttributes ClassMethods readonly_attribute?":{"type":"method","name":"readonly_attribute?","children":[],"call":[" _attr_readonly include? "," _attr_readonly "]}," ActiveRecord Persistence _raise_record_not_touched_error":{"type":"method","name":"_raise_record_not_touched_error","children":[],"call":[" raise ","(str \"Cannot touch on a new or destroyed record object. Consider using\\n\") squish "]}," ActiveRecord Persistence previously_new_record?":{"type":"method","name":"previously_new_record?","children":[],"call":[]}," ActiveRecord ModelSchema ClassMethods _convert_type_from_options":{"type":"method","name":"_convert_type_from_options","children":[],"call":["type to_immutable_string ","type respond_to? "," immutable_strings_by_default "]}," ActiveRecord ModelSchema ClassMethods column_for_attribute":{"type":"method","name":"column_for_attribute","children":[],"call":["ConnectionAdapters NullColumn  new "," columns_hash fetch "," columns_hash ","name to_s ","name to_s  to_s "]}," ActiveRecord Migrator with_advisory_lock_connection":{"type":"method","name":"with_advisory_lock_connection","children":[],"call":["pool with_connection ","ActiveRecord ConnectionAdapters ConnectionHandler  new establish_connection ","ActiveRecord Base  connection_db_config ","ActiveRecord ConnectionAdapters ConnectionHandler  new ","ActiveRecord ConnectionAdapters ConnectionHandler  new establish_connection  with_connection "]}," ActiveRecord Migration CheckPending build_watcher":{"type":"method","name":"build_watcher","children":[],"call":["@file_watcher new ","paths index_with "," Array "," connection migration_context migrations_paths "," connection migration_context "," connection ","(send\n  (lvar :all_configs) :flat_map) uniq ","Migrator  migrations_paths ","config migrations_paths ","all_configs flat_map ","ActiveRecord Base  configurations configs_for ","ActiveRecord Base  configurations ","ActiveRecord ConnectionHandling DEFAULT_ENV  call "," Array  index_with ","(send\n  (lvar :all_configs) :flat_map) uniq  index_with "," connection migration_context migrations_ Array  "," connection migration_context migrations_(send\n  (lvar :all_configs) :flat_map) uniq  ","(send\n  (lvar :ActiveRecord Base  configurations configs_for ) :flat_map) uniq ","Migrator  migrations_ Array  ","Migrator  migrations_(send\n  (lvar :all_configs) :flat_map) uniq  ","config migrations_ Array  ","config migrations_(send\n  (lvar :all_configs) :flat_map) uniq  ","ActiveRecord Base  configurations configs_for  flat_map "]}," ActiveRecord EnvironmentStorageError initialize":{"type":"method","name":"initialize","children":[],"call":["msg << ","You are attempting to store the environment in a database where metadata is disabled.\n +@ ","You are attempting to store the environment in a database where metadata is disabled.\n +@  << "]}," ActiveRecord PendingMigrationError detailed_migration_message":{"type":"method","name":"detailed_migration_message","children":[],"call":["pending_migration basename ","pending_migrations each ","pending_migrations size > ","pending_migrations size ","ActiveRecord Base  connection migration_context open pending_migrations ","ActiveRecord Base  connection migration_context open ","ActiveRecord Base  connection migration_context ","ActiveRecord Base  connection "," Rails  env ","Rails  env ","pending_migration filename ","Rails  env local? ! ","Rails  env local? ","ActiveRecord Base  connection migration_context open pending_migrations  each ","ActiveRecord Base  connection migration_context open pending_migrations  size > ","ActiveRecord Base  connection migration_context open pending_migrations  size ","ActiveRecord Base  connection migration_context open ActiveRecord Base  connection migration_context open pending_migrations  "]}," ActiveRecord Migration Compatibility V6_0 compatible_table_definition":{"type":"method","name":"compatible_table_definition","children":[],"call":[" prepend "]}," ActiveRecord Migration Compatibility V6_0 add_reference":{"type":"method","name":"add_reference","children":[],"call":["ReferenceDefinition  new add_to "," update_table_definition ","ReferenceDefinition  new "," connection update_table_definition "," connection ","reference_definition add_to "," connection adapter_name == "," connection adapter_name ","options []= ","ReferenceDefinition  new  add_to "]}," ActiveRecord Migration Compatibility V6_0 create_join_table":{"type":"method","name":"create_join_table","children":[],"call":[" compatible_table_definition "," block_given? "]}," ActiveRecord Migration Compatibility V6_0 change_table":{"type":"method","name":"change_table","children":[],"call":[" compatible_table_definition "," block_given? "]}," ActiveRecord Migration Compatibility V6_0 create_table":{"type":"method","name":"create_table","children":[],"call":[" compatible_table_definition "," block_given? "]}," ActiveRecord Migration Compatibility V6_0 TableDefinition references":{"type":"method","name":"references","children":[],"call":["ReferenceDefinition  new add_to ","ReferenceDefinition  new ","args each ","options []= "]}," ActiveRecord Migration Compatibility V6_0 ReferenceDefinition index_options":{"type":"method","name":"index_options","children":[],"call":[" as_options "," index "]}," ActiveRecord Migration CommandRecorder invert_remove_check_constraint":{"type":"method","name":"invert_remove_check_constraint","children":[],"call":[" raise ","args size < ","args size ","options []= ","options delete ","options key? ","(lvasgn :options\n  (send\n    (lvar :args) :last)) is_a? ","args last ","args last  []= ","args last  delete ","args last  key? ","(lvasgn :args last \n  (send\n    (lvar :args) :last)) is_a? "]}," ActiveRecord Migration CommandRecorder invert_remove_columns":{"type":"method","name":"invert_remove_columns","children":[],"call":[" raise ","args [] has_key? ","args [] ","args [] is_a? "]}," ActiveRecord Middleware DatabaseSelector Resolver update_context":{"type":"method","name":"update_context","children":[],"call":[" context save "," context "]}," ActiveRecord Middleware DatabaseSelector Resolver Session save":{"type":"method","name":"save","children":[],"call":[]}," ActiveRecord LogSubscriber strict_loading_violation":{"type":"method","name":"strict_loading_violation","children":[],"call":[" color ","event payload [] ","event payload "," debug ","event payload [] name ","event payload [] klass ","reflection strict_loading_violation_message ","event payload [] event payload [] name  ","event payload []  strict_loading_violation_message "]}," ActiveRecord Locking LockingType new":{"type":"method","name":"new","children":[],"call":[]}," ActiveRecord Locking Optimistic ClassMethods define_attribute":{"type":"method","name":"define_attribute","children":[],"call":["LockingType  new ","name == "," locking_column "," lock_optimistically "]}," ActiveRecord InternalMetadata enabled?":{"type":"method","name":"enabled?","children":[],"call":["ActiveRecord Base  connection use_metadata_table? ","ActiveRecord Base  connection "," connection use_metadata_table? "," connection "]}," ActiveRecord InsertAll Builder touch_timestamp_attribute?":{"type":"method","name":"touch_timestamp_attribute?","children":[],"call":[" insert_all updatable_columns include? ! "," insert_all updatable_columns include? "," insert_all updatable_columns "," insert_all "," update_duplicates? "," insert_all updatable_columns exclude? "]}," ActiveRecord InsertAll Builder touch_model_timestamps_unless":{"type":"method","name":"touch_model_timestamps_unless","children":[],"call":["(send\n  (send\n    (send nil :model) :send\n    (sym :timestamp_attributes_for_update_in_model)) :map) compact join ","(send\n  (send\n    (send nil :model) :send\n    (sym :timestamp_attributes_for_update_in_model)) :map) compact "," model quoted_table_name "," model "," updatable_columns map join "," updatable_columns map "," updatable_columns "," touch_timestamp_attribute? "," model send map "," model send ","(send\n  (send\n    (send nil :model) :timestamp_attributes_for_update_in_model) :filter_map) join "," connection high_precision_current_timestamp "," connection "," model timestamp_attributes_for_update_in_model filter_map "," model timestamp_attributes_for_update_in_model "," record_timestamps? "," update_duplicates? "]}," ActiveRecord Inheritance ClassMethods polymorphic_class_for":{"type":"method","name":"polymorphic_class_for","children":[],"call":[" compute_type ","ActiveSupport Dependencies  constantize "," store_full_class_name ","name constantize "]}," ActiveRecord Inheritance ClassMethods sti_class_for":{"type":"method","name":"sti_class_for","children":[],"call":[" raise "," name "," inheritance_column "," compute_type ","ActiveSupport Dependencies  constantize "," store_full_class_name "," store_full_sti_class ","type_name constantize "]}," ActiveRecord FixtureSet ignored_fixtures=":{"type":"method","name":"ignored_fixtures=","children":[],"call":["@ignored_fixtures compact ","@ignored_fixtures << ","@ignored_fixtures include? "]}," ActiveRecord FixtureSet signed_global_id":{"type":"method","name":"signed_global_id","children":[],"call":["SignedGlobalID  new ","URI GID  build ","GlobalID  app "," default_fixture_model_name "," identify "," default_fixture_ default_fixture_model_name  "]}," ActiveRecord FixtureSet File ignored_fixtures":{"type":"method","name":"ignored_fixtures","children":[],"call":[" config_row [] "," config_row "]}," ActiveRecord Enum EnumType serializable?":{"type":"method","name":"serializable?","children":[],"call":[" mapping has_value? "," mapping "," mapping has_key? ","value blank? "," subtype serializable? "," mapping fetch "," subtype "]}," ActiveRecord DestroyAssociationAsyncJob owner_destroyed?":{"type":"method","name":"owner_destroyed?","children":[],"call":["owner public_send ","owner ! "]}," ActiveRecord DestroyAssociationAsyncJob perform":{"type":"method","name":"perform","children":[],"call":["r destroy ","association_model where find_each ","association_model where "," raise "," owner_destroyed? ! "," owner_destroyed? ","owner_class find_by ","owner_class primary_key to_sym ","owner_class primary_key ","owner_model_name constantize ","association_class constantize ","association_class constantize  where find_each ","association_class constantize  where "," owner_class find_by _destroyed? ! "," owner_class find_by _destroyed? ","owner_class find_by _class find_by ","owner_model_name constantize  find_by ","owner_class find_by _class primary_key to_sym ","owner_model_name constantize  primary_key to_sym ","owner_class find_by _class primary_key ","owner_model_name constantize  primary_key ","owner_class find_by _model_name constantize "]}," ActiveRecord DelegatedType define_delegated_type_methods":{"type":"method","name":"define_delegated_type_methods","children":[],"call":[" public_send "," define_method "," public_send == "," scope "," where "," lambda ","scope_name singularize ","type tableize gsub ","type tableize ","types each "," public_send model_name singular inquiry "," public_send model_name singular "," public_send model_name "," public_send constantize ","type tableize tr "," public_send new ","options [] ","scope_name scope_name singularize ize ","type tableize gsub  singularize ","type tableize tr  singularize "," public_send model_name scope_name singularize  inquiry "," public_send model_name scope_name singularize  "]}," ActiveRecord DelegatedType delegated_type":{"type":"method","name":"delegated_type","children":[],"call":[" define_delegated_type_methods "," belongs_to ","options merge ","options delete "]}," ActiveRecord DatabaseConfigurations build_configuration_sentence":{"type":"method","name":"build_configuration_sentence","children":[],"call":["(send\n  (send\n    (lvar :configs) :group_by\n    (block-pass\n      (sym :env_name))) :map) join ","names join ","names size > ","names size ","config map ","configs group_by map ","configs group_by "," configs_for ","(send\n  (send\n    (lvar : configs_for ) :group_by\n    (block-pass\n      (sym :env_name))) :map) join ","config map  join ","config map  size > ","config map  size "," configs_for  group_by map "," configs_for  group_by ","  configs_for _for "]}," ActiveRecord DatabaseConfigurations resolve_symbol_connection":{"type":"method","name":"resolve_symbol_connection","children":[],"call":[" raise "," build_configuration_sentence "," default_env "," find_db_config "," find_ find_db_config  "]}," ActiveRecord DatabaseConfigurations default_env":{"type":"method","name":"default_env","children":[],"call":["ActiveRecord ConnectionHandling DEFAULT_ENV  call to_s ","ActiveRecord ConnectionHandling DEFAULT_ENV  call "]}," ActiveRecord DatabaseConfigurations resolve":{"type":"method","name":"resolve","children":[],"call":[" raise ","config inspect "," build_db_config_from_raw_config "," default_env "," resolve_symbol_connection ","DatabaseConfigurations DatabaseConfig  === "]}," ActiveRecord DatabaseConfigurations primary?":{"type":"method","name":"primary?","children":[],"call":["name == ","first_config name "," find_db_config "," default_env "," find_db_config  name "]}," ActiveRecord DatabaseConfigurations HashConfig schema_cache_path":{"type":"method","name":"schema_cache_path","children":[],"call":[" configuration_hash [] "," configuration_hash "]}," ActiveRecord DatabaseConfigurations HashConfig adapter":{"type":"method","name":"adapter","children":[],"call":[" configuration_hash [] "," configuration_hash "]}," ActiveRecord DatabaseConfigurations HashConfig idle_timeout":{"type":"method","name":"idle_timeout","children":[],"call":["timeout > "," configuration_hash fetch to_f "," configuration_hash fetch "," configuration_hash "," configuration_hash fetch to_f  > "]}," ActiveRecord DatabaseConfigurations HashConfig reaping_frequency":{"type":"method","name":"reaping_frequency","children":[],"call":[" configuration_hash fetch "," configuration_hash "]}," ActiveRecord DatabaseConfigurations HashConfig checkout_timeout":{"type":"method","name":"checkout_timeout","children":[],"call":["(or\n  (send\n    (send nil :configuration_hash) :[]\n    (sym :checkout_timeout))\n  (int 5)) to_f "," configuration_hash [] "," configuration_hash "]}," ActiveRecord DatabaseConfigurations HashConfig pool":{"type":"method","name":"pool","children":[],"call":["(or\n  (send\n    (send nil :configuration_hash) :[]\n    (sym :pool))\n  (int 5)) to_i "," configuration_hash [] "," configuration_hash "]}," ActiveRecord DatabaseConfigurations HashConfig _database=":{"type":"method","name":"_database=","children":[],"call":[" configuration_hash merge freeze "," configuration_hash merge "," configuration_hash "]}," ActiveRecord DatabaseConfigurations HashConfig database":{"type":"method","name":"database","children":[],"call":[" configuration_hash [] "," configuration_hash "]}," ActiveRecord DatabaseConfigurations HashConfig host":{"type":"method","name":"host","children":[],"call":[" configuration_hash [] "," configuration_hash "]}," ActiveRecord DatabaseConfigurations HashConfig config":{"type":"method","name":"config","children":[],"call":[" configuration_hash stringify_keys "," configuration_hash ","ActiveSupport Deprecation  warn "]}," ActiveRecord DatabaseConfigurations DatabaseConfig schema_cache_path":{"type":"method","name":"schema_cache_path","children":[],"call":[" raise "]}," ActiveRecord DatabaseConfigurations DatabaseConfig idle_timeout":{"type":"method","name":"idle_timeout","children":[],"call":[" raise "]}," ActiveRecord DatabaseConfigurations DatabaseConfig reaping_frequency":{"type":"method","name":"reaping_frequency","children":[],"call":[" raise "]}," ActiveRecord DatabaseConfigurations DatabaseConfig checkout_timeout":{"type":"method","name":"checkout_timeout","children":[],"call":[" raise "]}," ActiveRecord DatabaseConfigurations DatabaseConfig pool":{"type":"method","name":"pool","children":[],"call":[" raise "]}," ActiveRecord DatabaseConfigurations DatabaseConfig adapter":{"type":"method","name":"adapter","children":[],"call":[" raise "]}," ActiveRecord DatabaseConfigurations DatabaseConfig _database=":{"type":"method","name":"_database=","children":[],"call":[" raise "]}," ActiveRecord DatabaseConfigurations DatabaseConfig database":{"type":"method","name":"database","children":[],"call":[" raise "]}," ActiveRecord DatabaseConfigurations DatabaseConfig host":{"type":"method","name":"host","children":[],"call":[" raise "]}," ActiveRecord DatabaseConfigurations DatabaseConfig adapter_method":{"type":"method","name":"adapter_method","children":[],"call":[" adapter "]}," ActiveRecord DatabaseConfigurations DatabaseConfig config":{"type":"method","name":"config","children":[],"call":[" raise "]}," ActiveRecord DatabaseConfigurations DatabaseConfig spec_name":{"type":"method","name":"spec_name","children":[],"call":[]}," ActiveRecord DatabaseConfigurations ConnectionUrlResolver database_from_path":{"type":"method","name":"database_from_path","children":[],"call":[" uri path delete_prefix "," uri path "," uri ","@adapter == "]}," ActiveRecord DatabaseConfigurations ConnectionUrlResolver raw_config":{"type":"method","name":"raw_config","children":[],"call":[" query_hash merge "," uri hostname "," uri "," database_from_path "," uri port "," uri password "," uri user "," query_hash "," uri opaque "," query_hash reverse_merge "]}," ActiveRecord DatabaseConfigurations ConnectionUrlResolver query_hash":{"type":"method","name":"query_hash","children":[],"call":["Hash  [] symbolize_keys ","Hash  [] ","pair split ","(or\n  (ivar :@query)\n  (str \"\")) split map ","(or\n  (ivar :@query)\n  (str \"\")) split "]}," ActiveRecord DatabaseConfigurations ConnectionUrlResolver uri_parser":{"type":"method","name":"uri_parser","children":[],"call":["URI Parser  new "]}," ActiveRecord DatabaseConfigurations ConnectionUrlResolver to_hash":{"type":"method","name":"to_hash","children":[],"call":["config []= "," uri_parser unescape "," uri_parser ","value is_a? ","config map "," raw_config compact_blank "," raw_config "," raw_config compact_blank  []= "," raw_config compact_blank  map "," raw_ raw_config compact_blank  compact_blank "," raw_ raw_config compact_blank  "]}," ActiveRecord DatabaseConfigurations ConnectionUrlResolver initialize":{"type":"method","name":"initialize","children":[],"call":["@uri query ","@uri opaque split ","@uri opaque ","@uri opaque= ","@adapter == ","@uri scheme tr ","@uri scheme "," uri_parser parse "," uri_parser "," raise ","url blank? "," uri_parser parse  query "," uri_parser parse  opaque split "," uri_parser parse  opaque "," uri_parser parse  opaque= "," uri_parser parse  scheme tr "," uri_parser parse  scheme "]}," ActiveRecord Core values_at":{"type":"method","name":"values_at","children":[],"call":[" public_send ","methods flatten map! ","methods flatten "]}," ActiveRecord Core strict_loading!":{"type":"method","name":"strict_loading!","children":[],"call":[" raise ","(sym :all) include? ","mode inspect "]}," ActiveRecord Core strict_loading?":{"type":"method","name":"strict_loading?","children":[],"call":[]}," ActiveRecord Core strict_loading_violation!":{"type":"method","name":"strict_loading_violation!","children":[],"call":[]}," ActiveRecord Core allow_unsafe_raw_sql=":{"type":"method","name":"allow_unsafe_raw_sql=","children":[],"call":[]}," ActiveRecord Core allow_unsafe_raw_sql":{"type":"method","name":"allow_unsafe_raw_sql","children":[],"call":[]}," ActiveRecord Core abstract_base_class":{"type":"method","name":"abstract_base_class","children":[],"call":[]}," ActiveRecord Core connected_to_stack":{"type":"method","name":"connected_to_stack","children":[],"call":[]}," ActiveRecord Core current_preventing_writes":{"type":"method","name":"current_preventing_writes","children":[],"call":[]}," ActiveRecord Core current_shard":{"type":"method","name":"current_shard","children":[],"call":[]}," ActiveRecord Core current_role":{"type":"method","name":"current_role","children":[],"call":[]}," ActiveRecord Core connection_handlers=":{"type":"method","name":"connection_handlers=","children":[],"call":[]}," ActiveRecord Core connection_handlers":{"type":"method","name":"connection_handlers","children":[],"call":[]}," ActiveRecord ConnectionHandling with_role_and_shard":{"type":"method","name":"with_role_and_shard","children":[],"call":[" connected_to_stack pop "," connected_to_stack ","return_value load ","return_value is_a? "," connected_to_stack << "," connection_handler while_preventing_writes "," connection_handler "," with_handler ","role to_sym ","ActiveRecord Base  legacy_connection_handling ","role == "," reading_role "," append_to_connected_to_stack ","ActiveRecord  legacy_connection_handling ","ActiveRecord  reading_role "]}," ActiveRecord ConnectionHandling clear_on_handler":{"type":"method","name":"clear_on_handler","children":[],"call":["pool connection clear_query_cache ","pool connection ","pool active_connection? ","handler all_connection_pools each ","handler all_connection_pools "]}," ActiveRecord ConnectionHandling connection_db_config":{"type":"method","name":"connection_db_config","children":[],"call":[" connection_pool db_config "," connection_pool "]}," ActiveRecord ConnectionHandling while_preventing_writes":{"type":"method","name":"while_preventing_writes","children":[],"call":[" connected_to "," current_role "," connection_handler while_preventing_writes "," connection_handler "," legacy_connection_handling ","ActiveRecord  legacy_connection_handling "]}," ActiveRecord ConnectionHandling connecting_to":{"type":"method","name":"connecting_to","children":[],"call":[" connected_to_stack << "," connected_to_stack ","role == "," reading_role "," raise "," legacy_connection_handling "," append_to_connected_to_stack ","ActiveRecord  reading_role ","ActiveRecord  legacy_connection_handling "]}," ActiveRecord ConnectionHandling connected_to_many":{"type":"method","name":"connected_to_many","children":[],"call":[" connected_to_stack pop "," connected_to_stack "," connected_to_stack << ","role == "," reading_role "," raise ","classes include? "," != "," legacy_connection_handling ","classes flatten "," append_to_connected_to_stack ","ActiveRecord  reading_role ","ActiveRecord  legacy_connection_handling ","classes flatten  include? ","classes flatten  flatten "]}," ActiveRecord ConnectionAdapters SQLite3Adapter shared_cache?":{"type":"method","name":"shared_cache?","children":[],"call":["@config fetch anybits? ","@config fetch "]}," ActiveRecord ConnectionAdapters SQLite3Adapter supports_check_constraints?":{"type":"method","name":"supports_check_constraints?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLite3Adapter supports_transaction_isolation?":{"type":"method","name":"supports_transaction_isolation?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLite3 SchemaStatements validate_index_length!":{"type":"method","name":"validate_index_length!","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLite3 SchemaStatements remove_check_constraint":{"type":"method","name":"remove_check_constraint","children":[],"call":[" alter_table "," foreign_keys ","chk name == ","chk name ","check_constraints delete_if "," check_constraint_for! name "," check_constraint_for! "," check_constraints "," check_constraint_exists? ! "," check_constraint_exists? "," check_constraints  delete_if ","  check_constraints  "]}," ActiveRecord ConnectionAdapters SQLite3 SchemaStatements add_check_constraint":{"type":"method","name":"add_check_constraint","children":[],"call":["definition check_constraint "," alter_table "]}," ActiveRecord ConnectionAdapters SQLite3 SchemaStatements check_constraints":{"type":"method","name":"check_constraints","children":[],"call":["CheckConstraintDefinition  new ","table_sql to_s scan map ","table_sql to_s scan ","table_sql to_s "," query_value "," quote_table_name "," quote "," query_value  to_s scan map "," query_value  to_s scan "," query_value  to_s "]}," ActiveRecord ConnectionAdapters SQLite3 SchemaCreation supports_index_using?":{"type":"method","name":"supports_index_using?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLite3 DatabaseStatements reset_read_uncommitted":{"type":"method","name":"reset_read_uncommitted","children":[],"call":["@connection read_uncommitted= ","Thread  current thread_variable_get ","Thread  current ","ActiveSupport IsolatedExecutionState  [] ","@connection Thread  current thread_variable_get = ","@connection ActiveSupport IsolatedExecutionState  [] = "]}," ActiveRecord ConnectionAdapters SQLite3 DatabaseStatements begin_isolated_db_transaction":{"type":"method","name":"begin_isolated_db_transaction","children":[],"call":[" begin_db_transaction ","@connection read_uncommitted= ","Thread  current thread_variable_set ","@connection get_first_value ","Thread  current "," raise "," shared_cache? ","isolation != ","ActiveSupport IsolatedExecutionState  []= ","conn read_uncommitted= ","conn get_first_value "," with_raw_connection "]}," ActiveRecord ConnectionAdapters SQLite3 DatabaseStatements explain":{"type":"method","name":"explain","children":[],"call":["SQLite3 ExplainPrettyPrinter  new pp "," exec_query ","SQLite3 ExplainPrettyPrinter  new "," to_sql "," internal_exec_query ","EXPLAIN QUERY PLAN  + "," to_EXPLAIN QUERY PLAN  +  "]}," ActiveRecord ConnectionAdapters SqlTypeMetadata deduplicated":{"type":"method","name":"deduplicated","children":[],"call":[" sql_type -@ "," sql_type "]}," ActiveRecord ConnectionAdapters SchemaCache open":{"type":"method","name":"open","children":[],"call":["zipper close ","zipper flush ","Zlib GzipWriter  new ","File  extname == ","File  extname ","File  atomic_write ","FileUtils  mkdir_p ","File  dirname ","zipper mtime= ","Zlib GzipWriter  new  close ","Zlib GzipWriter  new  flush ","Zlib GzipWriter  new  mtime= "]}," ActiveRecord ConnectionAdapters SchemaCache deep_deduplicate":{"type":"method","name":"deep_deduplicate","children":[],"call":["value -@ "," deep_deduplicate ","value map ","(send\n  (lvar :value) :transform_keys) transform_values ","value transform_keys ","value dup ","value tainted? ","value dup  -@ ","value dup  map ","(send\n  (lvar :value dup ) :transform_keys) transform_value dup s ","value dup  transform_keys ","value dup  dup ","value dup  tainted? "]}," ActiveRecord ConnectionAdapters SchemaCache derive_columns_hash_and_deduplicate_values":{"type":"method","name":"derive_columns_hash_and_deduplicate_values","children":[],"call":[" deep_deduplicate ","columns index_by ","@columns transform_values "," deep_deduplicate  transform_values "]}," ActiveRecord ConnectionAdapters SchemaCache reset_version!":{"type":"method","name":"reset_version!","children":[],"call":[" connection migration_context current_version "," connection migration_context "," connection "," connection schema_version "]}," ActiveRecord ConnectionAdapters SchemaCache dump_to":{"type":"method","name":"dump_to","children":[],"call":["f write ","YAML  dump ","Marshal  dump ","filename include? "," open "," add "," connection data_sources each "," connection data_sources "," connection "," clear! "," tables_to_cache each "," tables_to_cache "]}," ActiveRecord ConnectionAdapters SchemaCache read":{"type":"method","name":"read","children":[],"call":[]}," ActiveRecord ConnectionAdapters SchemaCache load_from":{"type":"method","name":"load_from","children":[],"call":["BoundSchemaReflection  new ","SchemaReflection  new "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter MoneyDecoder decode":{"type":"method","name":"decode","children":[],"call":["TYPE  deserialize "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter supports_check_constraints?":{"type":"method","name":"supports_check_constraints?","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter new_client":{"type":"method","name":"new_client","children":[],"call":[" raise ","error message ","error message include? ","conn_params [] ","PG  connect ","ActiveRecord DatabaseConnectionError  hostname_error ","ActiveRecord DatabaseConnectionError  username_error ","ActiveRecord NoDatabaseError  db_error ","conn_params [] == "]}," ActiveRecord ConnectionAdapters PostgreSQL TypeMetadata deduplicated":{"type":"method","name":"deduplicated","children":[],"call":[" __setobj__ "," __getobj__ deduplicate "," __getobj__ "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements validate_check_constraint":{"type":"method","name":"validate_check_constraint","children":[],"call":[" validate_constraint "," check_constraint_for! name "," check_constraint_for! "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements check_constraints":{"type":"method","name":"check_constraints","children":[],"call":["CheckConstraintDefinition  new ","row [] [] ","row [] ","check_info map "," exec_query ","scope [] "," quoted_scope "," internal_exec_query "," exec_query  map "," internal_exec_query  map "," quoted_scope  [] "," quoted_ quoted_scope  "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaCreation visit_CheckConstraintDefinition":{"type":"method","name":"visit_CheckConstraintDefinition","children":[],"call":["sql << ","o validate? "," dup tap "," dup "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Uuid changed_in_place?":{"type":"method","name":"changed_in_place?","children":[],"call":["raw_old_value casecmp != ","raw_old_value casecmp ","raw_old_value class != ","new_value class ","raw_old_value class "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Uuid changed?":{"type":"method","name":"changed?","children":[],"call":["old_value casecmp != ","old_value casecmp ","old_value class != ","new_value class ","old_value class "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Macaddr changed_in_place?":{"type":"method","name":"changed_in_place?","children":[],"call":["raw_old_value casecmp != ","raw_old_value casecmp ","raw_old_value class != ","new_value class ","raw_old_value class "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Macaddr changed?":{"type":"method","name":"changed?","children":[],"call":["old_value casecmp != ","old_value casecmp ","old_value class != ","new_value class ","old_value class "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Macaddr type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQL OID Interval type_cast_for_schema":{"type":"method","name":"type_cast_for_schema","children":[],"call":[" serialize inspect "," serialize "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Interval serialize":{"type":"method","name":"serialize","children":[],"call":["value seconds iso8601 "," precision ","value seconds ","value iso8601 "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Interval cast_value":{"type":"method","name":"cast_value","children":[],"call":[" ActiveSupport Duration  parse "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Interval type":{"type":"method","name":"type","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQL Column hash":{"type":"method","name":"hash","children":[],"call":["Column  hash ^ ^ "," serial? hash "," serial? ","Column  hash ^ "," hash ","Column  hash "]}," ActiveRecord ConnectionAdapters PostgreSQL Column ==":{"type":"method","name":"==","children":[],"call":[" serial? == ","other serial? "," serial? ","other is_a? "]}," ActiveRecord ConnectionAdapters PostgreSQL Column encode_with":{"type":"method","name":"encode_with","children":[],"call":["coder []= "]}," ActiveRecord ConnectionAdapters PostgreSQL Column init_with":{"type":"method","name":"init_with","children":[],"call":["coder [] "]}," ActiveRecord ConnectionAdapters PoolManager set_pool_config":{"type":"method","name":"set_pool_config","children":[],"call":["@name_to_role_mapping [] []= ","@name_to_role_mapping [] "," raise ","@role_to_shard_mapping [] []= ","@role_to_shard_mapping [] "]}," ActiveRecord ConnectionAdapters PoolManager get_pool_config":{"type":"method","name":"get_pool_config","children":[],"call":["@name_to_role_mapping [] [] ","@name_to_role_mapping [] ","@role_to_shard_mapping [] [] ","@role_to_shard_mapping [] "]}," ActiveRecord ConnectionAdapters PoolManager remove_pool_config":{"type":"method","name":"remove_pool_config","children":[],"call":["@name_to_role_mapping [] delete ","@name_to_role_mapping [] ","@role_to_shard_mapping [] delete ","@role_to_shard_mapping [] "]}," ActiveRecord ConnectionAdapters PoolManager remove_role":{"type":"method","name":"remove_role","children":[],"call":["@name_to_role_mapping delete ","@role_to_shard_mapping delete "]}," ActiveRecord ConnectionAdapters PoolManager pool_configs":{"type":"method","name":"pool_configs","children":[],"call":["shard_map values ","@name_to_role_mapping flat_map ","@name_to_role_mapping [] values ","@name_to_role_mapping [] ","@role_to_shard_mapping flat_map ","@role_to_shard_mapping [] values ","@role_to_shard_mapping [] "]}," ActiveRecord ConnectionAdapters PoolManager role_names":{"type":"method","name":"role_names","children":[],"call":["@name_to_role_mapping keys ","@role_to_shard_mapping keys "]}," ActiveRecord ConnectionAdapters PoolManager shard_names":{"type":"method","name":"shard_names","children":[],"call":["shard_map keys ","@name_to_role_mapping values flat_map ","@name_to_role_mapping values ","@role_to_shard_mapping values flat_map ","@role_to_shard_mapping values "]}," ActiveRecord ConnectionAdapters PoolManager initialize":{"type":"method","name":"initialize","children":[],"call":["h []= ","Hash  new "]}," ActiveRecord ConnectionAdapters PoolConfig discard_pool!":{"type":"method","name":"discard_pool!","children":[],"call":["@pool discard! "," synchronize "]}," ActiveRecord ConnectionAdapters PoolConfig pool":{"type":"method","name":"pool","children":[],"call":["ConnectionAdapters ConnectionPool  new "," synchronize ","ActiveSupport ForkTracker  check! "]}," ActiveRecord ConnectionAdapters PoolConfig disconnect!":{"type":"method","name":"disconnect!","children":[],"call":["@pool disconnect! ","@pool automatic_reconnect= "," synchronize ","ActiveSupport ForkTracker  check! "]}," ActiveRecord ConnectionAdapters PoolConfig initialize":{"type":"method","name":"initialize","children":[],"call":["INSTANCES  []= "]}," ActiveRecord ConnectionAdapters PoolConfig discard_pools!":{"type":"method","name":"discard_pools!","children":[],"call":["INSTANCES  each_key "]}," ActiveRecord ConnectionAdapters Mysql2Adapter new_client":{"type":"method","name":"new_client","children":[],"call":[" raise ","error message ","error error_number == ","error error_number ","Mysql2 Client  new ","ActiveRecord DatabaseConnectionError  hostname_error ","config [] ","(const\n  (const\n    (const nil :ConnectionAdapters) :Mysql2Adapter) :ER_CONN_HOST_ERROR) include? ","ActiveRecord DatabaseConnectionError  username_error ","ActiveRecord NoDatabaseError  db_error "," Mysql2 Client  new "]}," ActiveRecord ConnectionAdapters MySQL TypeMetadata deduplicated":{"type":"method","name":"deduplicated","children":[],"call":[" extra -@ "," extra "," __setobj__ "," __getobj__ deduplicate "," __getobj__ "]}," ActiveRecord ConnectionAdapters MySQL TableDefinition initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters MySQL SchemaCreation visit_IndexDefinition":{"type":"method","name":"visit_IndexDefinition","children":[],"call":[" add_sql_comment! ","o comment ","sql join ","sql << "," quoted_columns "," quote_table_name ","o table ","o using "," quote_column_name ","o name ","o unique ","o type "]}," ActiveRecord ConnectionAdapters MySQL SchemaCreation visit_CreateIndexDefinition":{"type":"method","name":"visit_CreateIndexDefinition","children":[],"call":["sql << ","o algorithm "," visit_IndexDefinition ","o index "," visit_IndexDefinition  << "]}," ActiveRecord ConnectionAdapters MySQL SchemaCreation visit_DropCheckConstraint":{"type":"method","name":"visit_DropCheckConstraint","children":[],"call":[" mariadb? "]}," ActiveRecord ConnectionAdapters MySQL DatabaseStatements explain":{"type":"method","name":"explain","children":[],"call":["MySQL ExplainPrettyPrinter  new pp ","MySQL ExplainPrettyPrinter  new ","Concurrent  monotonic_time - ","Concurrent  monotonic_time "," exec_query "," to_sql ","Process  clock_gettime - ","Process  clock_gettime "," internal_exec_query "," build_explain_clause + + "," build_explain_clause + "," build_explain_clause "," to_ build_explain_clause + +  "]}," ActiveRecord ConnectionAdapters LegacyPoolManager set_pool_config":{"type":"method","name":"set_pool_config","children":[],"call":["@name_to_pool_config []= "," raise "]}," ActiveRecord ConnectionAdapters LegacyPoolManager get_pool_config":{"type":"method","name":"get_pool_config","children":[],"call":["@name_to_pool_config [] "]}," ActiveRecord ConnectionAdapters LegacyPoolManager remove_pool_config":{"type":"method","name":"remove_pool_config","children":[],"call":["@name_to_pool_config delete "]}," ActiveRecord ConnectionAdapters LegacyPoolManager pool_configs":{"type":"method","name":"pool_configs","children":[],"call":["@name_to_pool_config values "]}," ActiveRecord ConnectionAdapters LegacyPoolManager shard_names":{"type":"method","name":"shard_names","children":[],"call":["@name_to_pool_config keys "]}," ActiveRecord ConnectionAdapters LegacyPoolManager initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters Deduplicable deduplicated":{"type":"method","name":"deduplicated","children":[],"call":[" freeze "]}," ActiveRecord ConnectionAdapters Deduplicable deduplicate":{"type":"method","name":"deduplicate","children":[],"call":[" deduplicated "," class registry [] "," class registry "," class "]}," ActiveRecord ConnectionAdapters Deduplicable ClassMethods new":{"type":"method","name":"new","children":[],"call":[" deduplicate "]}," ActiveRecord ConnectionAdapters Deduplicable ClassMethods registry":{"type":"method","name":"registry","children":[],"call":[]}," ActiveRecord ConnectionAdapters Column deduplicated":{"type":"method","name":"deduplicated","children":[],"call":[" comment -@ "," comment "," collation -@ "," collation "," default_function -@ "," default_function "," default -@ "," default "," sql_type_metadata deduplicate "," sql_type_metadata "," name -@ "," name "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter supports_rename_column?":{"type":"method","name":"supports_rename_column?","children":[],"call":[" database_version >= "," database_version "," mariadb? "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter check_constraints":{"type":"method","name":"check_constraints","children":[],"call":[" raise ","CheckConstraintDefinition  new ","expression [] "," mariadb? ","row [] ","chk_info map "," exec_query ","scope [] "," quoted_scope "," supports_check_constraints? "," strip_whitespace_characters ","expression end_with? ","expression start_with? "," internal_exec_query ","expression []  [] ","row []  [] "," strip_whitespace_characters  [] "," exec_query  map "," internal_exec_query  map "," quoted_scope  [] "," quoted_ quoted_scope  ","expression []  end_with? ","row []  end_with? "," strip_whitespace_characters  end_with? ","expression []  start_with? ","row []  start_with? "," strip_whitespace_characters  start_with? "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter supports_check_constraints?":{"type":"method","name":"supports_check_constraints?","children":[],"call":[" database_version >= "," database_version "," mariadb? "," database_version < "]}," ActiveRecord ConnectionAdapters AbstractAdapter build_result":{"type":"method","name":"build_result","children":[],"call":["ActiveRecord Result  new "]}," ActiveRecord ConnectionAdapters AbstractAdapter throw_away!":{"type":"method","name":"throw_away!","children":[],"call":[" disconnect! "," pool remove "," pool "]}," ActiveRecord ConnectionAdapters AbstractAdapter supports_check_constraints?":{"type":"method","name":"supports_check_constraints?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter owner_name":{"type":"method","name":"owner_name","children":[],"call":["@pool owner_name "]}," ActiveRecord ConnectionAdapters AbstractAdapter use_metadata_table?":{"type":"method","name":"use_metadata_table?","children":[],"call":["@config fetch "]}," ActiveRecord ConnectionAdapters Transaction records":{"type":"method","name":"records","children":[],"call":["@records concat ","@lazy_enrollment_records values "]}," ActiveRecord ConnectionAdapters SchemaStatements rename_column_sql":{"type":"method","name":"rename_column_sql","children":[],"call":[" quote_column_name "]}," ActiveRecord ConnectionAdapters SchemaStatements check_constraint_for!":{"type":"method","name":"check_constraint_for!","children":[],"call":[" raise "," check_constraint_for "]}," ActiveRecord ConnectionAdapters SchemaStatements check_constraint_for":{"type":"method","name":"check_constraint_for","children":[],"call":["chk name == ","chk name "," check_constraints detect "," check_constraints "," check_constraint_name "," supports_check_constraints? ","chk defined_for? "]}," ActiveRecord ConnectionAdapters SchemaStatements check_constraint_name":{"type":"method","name":"check_constraint_name","children":[],"call":["Digest SHA256  hexdigest first ","Digest SHA256  hexdigest ","options fetch ","OpenSSL Digest SHA256  hexdigest first ","OpenSSL Digest SHA256  hexdigest "]}," ActiveRecord ConnectionAdapters SchemaStatements extract_table_options!":{"type":"method","name":"extract_table_options!","children":[],"call":["options extract! "]}," ActiveRecord ConnectionAdapters SchemaStatements index_algorithm":{"type":"method","name":"index_algorithm","children":[],"call":[" raise "," index_algorithms keys map join "," index_algorithms keys map "," index_algorithms keys "," index_algorithms "," index_algorithms fetch "]}," ActiveRecord ConnectionAdapters SchemaStatements remove_check_constraint":{"type":"method","name":"remove_check_constraint","children":[],"call":[" execute "," schema_creation accept "," schema_creation ","at drop_check_constraint "," create_alter_table "," check_constraint_for! name "," check_constraint_for! "," supports_check_constraints? "," check_constraint_exists? ! "," check_constraint_exists? "," schema_cre create_alter_table ion accept "," schema_cre create_alter_table ion "," create_alter_table  drop_check_constraint "," cre create_alter_table e_alter_table "]}," ActiveRecord ConnectionAdapters SchemaStatements check_constraint_options":{"type":"method","name":"check_constraint_options","children":[],"call":[" check_constraint_name ","options [] ","options dup ","options dup  [] ","options dup  dup "]}," ActiveRecord ConnectionAdapters SchemaStatements add_check_constraint":{"type":"method","name":"add_check_constraint","children":[],"call":[" execute "," schema_creation accept "," schema_creation ","at add_check_constraint "," create_alter_table "," check_constraint_options "," supports_check_constraints? "," check_constraint_exists? "," schema_cre create_alter_table ion accept "," schema_cre create_alter_table ion "," create_alter_table  add_check_constraint "," cre create_alter_table e_alter_table "," check_constraint_ check_constraint_options  "]}," ActiveRecord ConnectionAdapters SchemaStatements check_constraints":{"type":"method","name":"check_constraints","children":[],"call":[" raise "]}," ActiveRecord ConnectionAdapters SchemaStatements add_columns":{"type":"method","name":"add_columns","children":[],"call":[" add_column ","column_names each "]}," ActiveRecord ConnectionAdapters Table remove_check_constraint":{"type":"method","name":"remove_check_constraint","children":[],"call":["@base remove_check_constraint "," name "]}," ActiveRecord ConnectionAdapters Table check_constraint":{"type":"method","name":"check_constraint","children":[],"call":["@base add_check_constraint "," name "]}," ActiveRecord ConnectionAdapters Table change_null":{"type":"method","name":"change_null","children":[],"call":["@base change_column_null "," name "]}," ActiveRecord ConnectionAdapters AlterTable drop_check_constraint":{"type":"method","name":"drop_check_constraint","children":[],"call":["@check_constraint_drops << "]}," ActiveRecord ConnectionAdapters AlterTable add_check_constraint":{"type":"method","name":"add_check_constraint","children":[],"call":["@check_constraint_adds << ","CheckConstraintDefinition  new "," name ","@td new_check_constraint_definition "]}," ActiveRecord ConnectionAdapters TableDefinition check_constraint":{"type":"method","name":"check_constraint","children":[],"call":[" check_constraints << "," check_constraints "," new_check_constraint_definition "]}," ActiveRecord ConnectionAdapters ReferenceDefinition polymorphic_index_name":{"type":"method","name":"polymorphic_index_name","children":[],"call":[" name "]}," ActiveRecord ConnectionAdapters IndexDefinition column_options":{"type":"method","name":"column_options","children":[],"call":[" opclasses "," orders "," lengths "]}," ActiveRecord ConnectionAdapters SchemaCreation action_sql":{"type":"method","name":"action_sql","children":[],"call":[" raise "]}," ActiveRecord ConnectionAdapters SchemaCreation check_constraint_in_create":{"type":"method","name":"check_constraint_in_create","children":[],"call":[" accept ","CheckConstraintDefinition  new "," check_constraint_options "," check_constraint_ check_constraint_options  "]}," ActiveRecord ConnectionAdapters SchemaCreation foreign_key_in_create":{"type":"method","name":"foreign_key_in_create","children":[],"call":[" accept ","ForeignKeyDefinition  new "," foreign_key_options ","ActiveRecord Base  table_name_suffix ","ActiveRecord Base  table_name_prefix "," foreign_key_ foreign_key_options  ","ActiveRecord Base  table_name_ActiveRecord Base  table_name_suffix  ","ActiveRecord Base  table_name_ActiveRecord Base  table_name_prefix  "]}," ActiveRecord ConnectionAdapters SchemaCreation table_modifier_in_create":{"type":"method","name":"table_modifier_in_create","children":[],"call":["o temporary "]}," ActiveRecord ConnectionAdapters SchemaCreation to_sql":{"type":"method","name":"to_sql","children":[],"call":["sql to_sql ","sql respond_to? ","sql to_sql  to_sql to_sql  ","sql to_sql  respond_to? "]}," ActiveRecord ConnectionAdapters SchemaCreation add_column_options!":{"type":"method","name":"add_column_options!","children":[],"call":["sql << ","options [] == ","options [] "," quote_default_expression "," options_include_default? "]}," ActiveRecord ConnectionAdapters SchemaCreation column_options":{"type":"method","name":"column_options","children":[],"call":["o options merge ","o options "]}," ActiveRecord ConnectionAdapters SchemaCreation add_table_options!":{"type":"method","name":"add_table_options!","children":[],"call":["create_sql << ","o options "]}," ActiveRecord ConnectionAdapters SchemaCreation supports_index_using?":{"type":"method","name":"supports_index_using?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SchemaCreation quoted_columns":{"type":"method","name":"quoted_columns","children":[],"call":[" quoted_columns_for_index ","o column_options ","o columns ","String  === "]}," ActiveRecord ConnectionAdapters SchemaCreation visit_DropCheckConstraint":{"type":"method","name":"visit_DropCheckConstraint","children":[],"call":[" quote_column_name "]}," ActiveRecord ConnectionAdapters SchemaCreation visit_AddCheckConstraint":{"type":"method","name":"visit_AddCheckConstraint","children":[],"call":[" accept "]}," ActiveRecord ConnectionAdapters SchemaCreation visit_CheckConstraintDefinition":{"type":"method","name":"visit_CheckConstraintDefinition","children":[],"call":["o expression ","o name "]}," ActiveRecord ConnectionAdapters SchemaCreation visit_CreateIndexDefinition":{"type":"method","name":"visit_CreateIndexDefinition","children":[],"call":["sql join ","sql << ","index where "," supports_partial_index? "," quoted_columns ","index using "," supports_index_using? "," quote_table_name ","index table "," quote_column_name ","index name ","index type ","o algorithm ","o if_not_exists ","index unique ","o index ","index nulls_not_distinct "," supports_nulls_not_distinct? "," quoted_include_columns ","index include "," supports_index_include? ","o index  where "," supports_partial_o index ? ","o index  using "," supports_o index _using? ","o index  table ","o index  name ","o index  type ","o index  unique ","o o index  ","o index  nulls_not_distinct ","o index  include "," supports_o index _include? "]}," ActiveRecord ConnectionAdapters SchemaCreation visit_DropForeignKey":{"type":"method","name":"visit_DropForeignKey","children":[],"call":[" quote_column_name "]}," ActiveRecord ConnectionAdapters SchemaCreation visit_AddForeignKey":{"type":"method","name":"visit_AddForeignKey","children":[],"call":[" accept "]}," ActiveRecord ConnectionAdapters SchemaCreation visit_ForeignKeyDefinition":{"type":"method","name":"visit_ForeignKeyDefinition","children":[],"call":["sql << "," action_sql ","o on_update ","o on_delete ","(str \"CONSTRAINT \") +@ "," quote_column_name ","o primary_key "," quote_table_name ","o to_table ","o column ","o name ","quoted_primary_keys join ","quoted_columns join "," Array map "," Array ","(str \"CONSTRAINT \") +@  << "," action_(str \"CONSTRAINT \") +@  "]}," ActiveRecord ConnectionAdapters SchemaCreation visit_PrimaryKeyDefinition":{"type":"method","name":"visit_PrimaryKeyDefinition","children":[],"call":["(send\n  (send\n    (lvar :o) :name) :map) join "," quote_column_name ","o name map ","o name "]}," ActiveRecord ConnectionAdapters SchemaCreation visit_TableDefinition":{"type":"method","name":"visit_TableDefinition","children":[],"call":["create_sql << "," to_sql ","o as "," add_table_options! ","statements join ","statements present? ","statements concat "," check_constraint_in_create ","o name ","o check_constraints map ","o check_constraints "," supports_check_constraints? "," foreign_key_in_create ","o foreign_keys map ","o foreign_keys "," supports_foreign_keys? "," index_in_create ","o indexes map ","o indexes "," supports_indexes_in_create? ","statements << "," accept ","o primary_keys ","o columns map ","o columns "," quote_table_name ","o if_not_exists ","(str \"CREATE\") +@ "," table_modifier_in_create ","o unique_keys map ","o unique_keys "," supports_unique_keys? ","o exclusion_constraints map ","o exclusion_constraints "," supports_exclusion_constraints? "," use_foreign_keys? ","(str \"CREATE\") +@  << "]}," ActiveRecord ConnectionAdapters SchemaCreation visit_AddColumnDefinition":{"type":"method","name":"visit_AddColumnDefinition","children":[],"call":["(str \"ADD \") +@ "," accept ","o column "]}," ActiveRecord ConnectionAdapters SchemaCreation visit_ColumnDefinition":{"type":"method","name":"visit_ColumnDefinition","children":[],"call":[" add_column_options! "," column_options ","o type == ","o type ","(begin\n  (send nil :quote_column_name\n    (send\n      (lvar :o) :name))) +@ ","o sql_type "," quote_column_name ","o name ","o sql_type= "," type_to_sql ","o options "]}," ActiveRecord ConnectionAdapters SchemaCreation visit_AlterTable":{"type":"method","name":"visit_AlterTable","children":[],"call":["sql << ","(send\n  (send\n    (lvar :o) :check_constraint_drops) :map) join "," visit_DropCheckConstraint ","o check_constraint_drops map ","o check_constraint_drops ","(send\n  (send\n    (lvar :o) :check_constraint_adds) :map) join "," visit_AddCheckConstraint ","o check_constraint_adds map ","o check_constraint_adds ","(send\n  (send\n    (lvar :o) :foreign_key_drops) :map) join "," visit_DropForeignKey ","o foreign_key_drops map ","o foreign_key_drops ","(send\n  (send\n    (lvar :o) :foreign_key_adds) :map) join "," visit_AddForeignKey ","o foreign_key_adds map ","o foreign_key_adds ","(send\n  (send\n    (lvar :o) :adds) :map) join "," accept ","o adds map ","o adds ","(str \"ALTER TABLE \") +@ "," quote_table_name ","o name ","(str \"ALTER TABLE \") +@  << "]}," ActiveRecord ConnectionAdapters SchemaCreation accept":{"type":"method","name":"accept","children":[],"call":[" send ","o class name split last ","o class name split ","o class name ","o class ","@cache [] "]}," ActiveRecord ConnectionAdapters SchemaCreation initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters DatabaseStatements mark_transaction_written_if_write":{"type":"method","name":"mark_transaction_written_if_write","children":[],"call":[" write_query? ","transaction written ","transaction open? "," current_transaction "," current_transaction  written "," current_transaction  open? "," current_ current_transaction  "]}," ActiveRecord ConnectionAdapters DatabaseStatements explain":{"type":"method","name":"explain","children":[],"call":[" raise "]}," ActiveRecord ConnectionAdapters ConnectionHandler resolve_pool_config":{"type":"method","name":"resolve_pool_config","children":[],"call":["ConnectionAdapters PoolConfig  new "," raise ","db_config adapter ","ActiveRecord Base  respond_to? ","db_config adapter_method ","e backtrace ","e message ","e path == ","e path "," require ","Base  configurations resolve ","Base  configurations ","Base  configurations resolve  adapter ","Base  configurations resolve  adapter_method "]}," ActiveRecord ConnectionAdapters ConnectionHandler get_pool_manager":{"type":"method","name":"get_pool_manager","children":[],"call":[" owner_to_pool_manager [] ","Base  name "," owner_to_pool_manager ","ActiveSupport Deprecation  warn ","owner == "," owner_to_pool_manager key? "," connection_name_to_pool_manager [] "," connection_name_to_pool_manager "]}," ActiveRecord ConnectionAdapters ConnectionHandler remove_connection_pool":{"type":"method","name":"remove_connection_pool","children":[],"call":["pool_config db_config ","pool_config disconnect! ","pool_manager remove_pool_config "," get_pool_manager "," disconnect_pool_from_pool_manager ","pool_manager remove_pool_config  db_config ","pool_manager remove_pool_config  disconnect! ","pool_manager remove_pool_manager remove_pool_config  "," get_pool_manager  remove_pool_config "," get_ get_pool_manager  "," disconnect_pool_from_ get_pool_manager  "]}," ActiveRecord ConnectionAdapters ConnectionHandler all_connection_pools":{"type":"method","name":"all_connection_pools","children":[],"call":["m pool_configs map ","m pool_configs "," owner_to_pool_manager values flat_map "," owner_to_pool_manager values "," owner_to_pool_manager "," connection_name_to_pool_manager values flat_map "," connection_name_to_pool_manager values "," connection_name_to_pool_manager ","ActiveRecord  deprecator warn ","(str \"          The `all_connection_pools` method is deprecated in favor of `connection_pool_list`.\\n\") squish ","ActiveRecord  deprecator "]}," ActiveRecord ConnectionAdapters ConnectionHandler connection_pool_names":{"type":"method","name":"connection_pool_names","children":[],"call":[" owner_to_pool_manager keys "," owner_to_pool_manager "," connection_name_to_pool_manager keys "," connection_name_to_pool_manager "]}," ActiveRecord ConnectionAdapters ConnectionPool discarded?":{"type":"method","name":"discarded?","children":[],"call":["@connections nil? "]}," ActiveRecord ConnectionAdapters NullPool owner_name":{"type":"method","name":"owner_name","children":[],"call":[]}," ActiveRecord AutosaveAssociation ClassMethods method_defined?":{"type":"method","name":"method_defined?","children":[],"call":[" instance_methods include? ","method to_sym "," instance_methods "]}," ActiveRecord Attributes ClassMethods _lookup_cast_type":{"type":"method","name":"_lookup_cast_type","children":[],"call":[" type_for_attribute ","type [] ","ActiveRecord Type  lookup ","options except ","ActiveRecord Type  adapter_name_from ","ActiveRecord Type  ActiveRecord Type  adapter_name_from _from "]}," ActiveRecord Attributes ClassMethods decorate_attribute_type":{"type":"method","name":"decorate_attribute_type","children":[],"call":[" _lookup_cast_type ","type is_a? ! ","type is_a? "," attribute ","default with_defaults! ","options [] "," attributes_to_define_after_schema_loads [] "," attributes_to_define_after_schema_loads "," _lookup_ _lookup_cast_type  "]}," ActiveRecord AttributeMethods _has_attribute?":{"type":"method","name":"_has_attribute?","children":[],"call":["@attributes key? "]}," ActiveRecord AttributeMethods ClassMethods _has_attribute?":{"type":"method","name":"_has_attribute?","children":[],"call":[" attribute_types key? "," attribute_types "]}," ActiveRecord AttributeMethods dangerous_attribute_methods":{"type":"method","name":"dangerous_attribute_methods","children":[],"call":["(send\n  (begin\n    (send\n      (send\n        (send\n          (send\n            (const nil :Base) :instance_methods) :+\n          (send\n            (const nil :Base) :private_instance_methods)) :-\n        (send\n          (send\n            (const nil :Base) :superclass) :instance_methods)) :-\n      (send\n        (send\n          (const nil :Base) :superclass) :private_instance_methods))) :map) to_set freeze ","(send\n  (begin\n    (send\n      (send\n        (send\n          (send\n            (const nil :Base) :instance_methods) :+\n          (send\n            (const nil :Base) :private_instance_methods)) :-\n        (send\n          (send\n            (const nil :Base) :superclass) :instance_methods)) :-\n      (send\n        (send\n          (const nil :Base) :superclass) :private_instance_methods))) :map) to_set ","m to_s -@ ","m to_s ","(send\n  (send\n    (send\n      (send\n        (const nil :Base) :instance_methods) :+\n      (send\n        (const nil :Base) :private_instance_methods)) :-\n    (send\n      (send\n        (const nil :Base) :superclass) :instance_methods)) :-\n  (send\n    (send\n      (const nil :Base) :superclass) :private_instance_methods)) map ","Base  instance_methods + - - ","Base  superclass private_instance_methods ","Base  superclass ","Base  instance_methods + - ","Base  superclass instance_methods ","Base  instance_methods + ","Base  private_instance_methods ","Base  instance_methods ","(send\n  (begin\n    (send\n      (send\n        (send\n          (send\n            (send\n              (const nil :Base) :instance_methods) :+\n            (send\n              (const nil :Base) :private_instance_methods)) :-\n          (send\n            (send\n              (const nil :Base) :superclass) :instance_methods)) :-\n        (send\n          (send\n            (const nil :Base) :superclass) :private_instance_methods)) :+\n      (array\n        (sym :__id__)\n        (sym :dup)\n        (sym :freeze)\n        (sym :frozen?)\n        (sym :hash)\n        (sym :object_id)\n        (sym :class)\n        (sym :clone)))) :map) to_set freeze ","(send\n  (begin\n    (send\n      (send\n        (send\n          (send\n            (send\n              (const nil :Base) :instance_methods) :+\n            (send\n              (const nil :Base) :private_instance_methods)) :-\n          (send\n            (send\n              (const nil :Base) :superclass) :instance_methods)) :-\n        (send\n          (send\n            (const nil :Base) :superclass) :private_instance_methods)) :+\n      (array\n        (sym :__id__)\n        (sym :dup)\n        (sym :freeze)\n        (sym :frozen?)\n        (sym :hash)\n        (sym :object_id)\n        (sym :class)\n        (sym :clone)))) :map) to_set ","(send\n  (send\n    (send\n      (send\n        (send\n          (const nil :Base) :instance_methods) :+\n        (send\n          (const nil :Base) :private_instance_methods)) :-\n      (send\n        (send\n          (const nil :Base) :superclass) :instance_methods)) :-\n    (send\n      (send\n        (const nil :Base) :superclass) :private_instance_methods)) :+\n  (array\n    (sym :__id__)\n    (sym :dup)\n    (sym :freeze)\n    (sym :frozen?)\n    (sym :hash)\n    (sym :object_id)\n    (sym :class)\n    (sym :clone))) map ","Base  instance_methods + - - + "]}," ActiveRecord AttributeMethods TimeZoneConversion ClassMethods define_attribute":{"type":"method","name":"define_attribute","children":[],"call":["TimeZoneConverter  new "," create_time_zone_conversion_attribute? "]}," ActiveRecord AttributeMethods TimeZoneConversion TimeZoneConverter new":{"type":"method","name":"new","children":[],"call":[]}," ActiveRecord AttributeMethods PrimaryKey id_for_database":{"type":"method","name":"id_for_database","children":[],"call":["@attributes [] value_for_database ","@attributes [] ","@primary_key map "," class composite_primary_key? "," class "]}," ActiveRecord AttributeMethods BeforeTypeCast attribute_for_database":{"type":"method","name":"attribute_for_database","children":[],"call":["@attributes [] value_for_database ","@attributes [] "]}," ActiveRecord HasManyThroughAssociationNotFoundError Correction corrections":{"type":"method","name":"corrections","children":[],"call":["(send\n  (lvar :maybe_these) :sort_by) reverse first ","(send\n  (lvar :maybe_these) :sort_by) reverse ","DidYouMean Jaro  distance ","@error reflection options [] to_s ","@error reflection options [] ","@error reflection options ","@error reflection ","maybe_these sort_by ","@error reflection name to_s ","@error reflection name ","@error owner_class reflections keys ","@error owner_class reflections ","@error owner_class ","(send\n  (lvar :@error owner_class reflections keys ) :sort_by) reverse first ","(send\n  (lvar :@error owner_class reflections keys ) :sort_by) reverse ","@error owner_class reflections keys  sort_by "]}," ActiveRecord HasManyThroughAssociationNotFoundError Correction initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord InverseOfAssociationNotFoundError Correction corrections":{"type":"method","name":"corrections","children":[],"call":["(send\n  (lvar :maybe_these) :sort_by) reverse first ","(send\n  (lvar :maybe_these) :sort_by) reverse ","DidYouMean Jaro  distance ","@error reflection options [] to_s ","@error reflection options [] ","@error reflection options ","@error reflection ","maybe_these sort_by ","@error associated_class reflections keys ","@error associated_class reflections ","@error associated_class ","(send\n  (lvar :@error associated_class reflections keys ) :sort_by) reverse first ","(send\n  (lvar :@error associated_class reflections keys ) :sort_by) reverse ","@error associated_class reflections keys  sort_by "]}," ActiveRecord InverseOfAssociationNotFoundError Correction initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord AssociationNotFoundError Correction corrections":{"type":"method","name":"corrections","children":[],"call":["(send\n  (lvar :maybe_these) :sort_by) reverse first ","(send\n  (lvar :maybe_these) :sort_by) reverse ","DidYouMean Jaro  distance ","@error association_name to_s ","@error association_name ","maybe_these sort_by ","@error record class reflections keys ","@error record class reflections ","@error record class ","@error record ","(send\n  (lvar :@error record class reflections keys ) :sort_by) reverse first ","(send\n  (lvar :@error record class reflections keys ) :sort_by) reverse ","@error record class reflections keys  sort_by "]}," ActiveRecord AssociationNotFoundError Correction initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Associations JoinDependency each":{"type":"method","name":"each","children":[],"call":[" join_root each "," join_root "]}," ActiveRecord Associations JoinDependency JoinAssociation strict_loading?":{"type":"method","name":"strict_loading?","children":[],"call":[" reflection scope_for strict_loading_value "," reflection scope_for "," base_klass unscoped "," base_klass "," reflection "," reflection scope "]}," Associations ForeignAssociation set_owner_attributes":{"type":"method","name":"set_owner_attributes","children":[],"call":["record _write_attribute "," owner class polymorphic_name "," owner class "," owner "," reflection type "," reflection "," reflection join_primary_key "," owner _read_attribute "," reflection join_foreign_key "," options [] "," options ","primary_key_foreign_key_pairs each ","primary_key_attribute_names zip "," Array "," reflection join_primary_ owner _read_attribute  "," reflection join_foreign_ owner _read_attribute  ","primary_ owner _read_attribute _foreign_ owner _read_attribute _pairs each ","primary_key_attribute_names zip  each ","primary_ owner _read_attribute _attribute_names zip "," Array  zip "]}," ActiveRecord Associations CollectionProxy inspect":{"type":"method","name":"inspect","children":[],"call":[" load_target "," find_from_target? "]}," ActiveRecord Associations CollectionAssociation target=":{"type":"method","name":"target=","children":[],"call":[" add_to_target ","ActiveRecord Base  has_many_inversing "," replace_on_target "," reflection klass has_many_inversing "," reflection klass "," reflection "]}," ActiveRecord Associations Association matches_foreign_key?":{"type":"method","name":"matches_foreign_key?","children":[],"call":[" owner read_attribute == ","record id "," owner read_attribute "," reflection foreign_key "," reflection "," owner "," foreign_key_for? ","record read_attribute == "," owner id ","record read_attribute "]}," ActiveRecord Associations Association inversable?":{"type":"method","name":"inversable?","children":[],"call":[" matches_foreign_key? "," owner persisted? ! "," owner persisted? "," owner ","record persisted? ! ","record persisted? "]}," ActiveRecord Associations Association enqueue_destroy_association":{"type":"method","name":"enqueue_destroy_association","children":[],"call":[" owner class destroy_association_async_job "," owner class "," owner "," owner _after_commit_jobs push "," owner _after_commit_jobs "]}," ActiveRecord Associations Association inversed_from_queries":{"type":"method","name":"inversed_from_queries","children":[],"call":[" target= "," inversable? "]}," ActiveRecord Associations Association reset_negative_cache":{"type":"method","name":"reset_negative_cache","children":[],"call":[" reset "," target nil? "," target "," loaded? "]}," ActiveRecord AssociationRelation _create!":{"type":"method","name":"_create!","children":[],"call":["@association create! "]}," ActiveRecord AssociationRelation _create":{"type":"method","name":"_create","children":[],"call":["@association create "]}," ActiveRecord AssociationRelation _new":{"type":"method","name":"_new","children":[],"call":["@association build "]}," ActiveRecord QueryMethods lookup_table_klass_from_join_dependencies":{"type":"method","name":"lookup_table_klass_from_join_dependencies","children":[],"call":["join base_klass ","table_name == ","join table_name "," each_join_dependencies "]}," ActiveRecord Enum EnumMethods define_enum_methods":{"type":"method","name":"define_enum_methods","children":[],"call":[" klass scope "," where not "," where "," lambda "," klass "," klass send ","enum_scopes != "," update! "," define_method "," [] == "," [] "," public_send == "," public_send "]}," ActiveRecord Enum EnumMethods initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Locking Optimistic _lock_value_for_database":{"type":"method","name":"_lock_value_for_database","children":[],"call":["@attributes [] original_value_for_database ","@attributes [] ","@attributes [] value_for_database "," will_save_change_to_attribute? "]}," ActiveRecord Core connection_classes":{"type":"method","name":"connection_classes","children":[],"call":[]}," ActiveRecord Core connection_class?":{"type":"method","name":"connection_class?","children":[],"call":[]}," ActiveRecord Core connection_class":{"type":"method","name":"connection_class","children":[],"call":[]}," ActiveRecord Core connection_class=":{"type":"method","name":"connection_class=","children":[],"call":[]}," ActiveRecord ConnectionAdapters PoolConfig connection_specification_name":{"type":"method","name":"connection_specification_name","children":[],"call":[" connection_klass name "," connection_klass "," connection_klass primary_class? "," connection_klass is_a? "," connection_class name "," connection_class "," connection_class primary_class? "]}," ActiveRecord ConnectionAdapters AbstractAdapter connection_klass":{"type":"method","name":"connection_klass","children":[],"call":["@pool connection_klass "]}," ActiveRecord ConnectionAdapters NullPool connection_klass":{"type":"method","name":"connection_klass","children":[],"call":[]}," Builder Association add_after_commit_jobs_callback":{"type":"method","name":"add_after_commit_jobs_callback","children":[],"call":[]}," Arel Nodes HomogeneousIn proc_for_binds":{"type":"method","name":"proc_for_binds","children":[],"call":["ActiveModel Attribute  with_cast_value "," attribute type_caster "," attribute "," attribute name "," lambda "]}," ActiveRecord Relation WhereClause each_attributes":{"type":"method","name":"each_attributes","children":[],"call":["node left ","node left is_a? "," equality_node? "," extract_attribute "," predicates each "," predicates "]}," ActiveRecord Core ClassMethods inspection_filter":{"type":"method","name":"inspection_filter","children":[],"call":[" superclass inspection_filter "," superclass ","ActiveSupport ParameterFilter  new ","InspectionMask  new ","@filter_attributes nil? "]}," ActiveRecord Core ClassMethods filter_attributes=":{"type":"method","name":"filter_attributes=","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter prepared_statements?":{"type":"method","name":"prepared_statements?","children":[],"call":[" prepared_statements_disabled_cache include? ! "," prepared_statements_disabled_cache include? "," object_id "," prepared_statements_disabled_cache "]}," ActiveRecord ConnectionAdapters TransactionState invalidate!":{"type":"method","name":"invalidate!","children":[],"call":["c invalidate! "]}," ActiveRecord ConnectionAdapters TransactionState invalidated?":{"type":"method","name":"invalidated?","children":[],"call":["@state == "]}," ActiveRecord Associations Association strict_loading?":{"type":"method","name":"strict_loading?","children":[],"call":[" owner strict_loading? "," owner "," reflection strict_loading? "," reflection "," reflection options key? "," reflection options "]}," ActiveRecord Migration Compatibility V6_0 SQLite3 TableDefinition column":{"type":"method","name":"column","children":[],"call":["options [] "]}," ActiveRecord Migration Compatibility V6_0 SQLite3 TableDefinition references":{"type":"method","name":"references","children":[],"call":["ReferenceDefinition  new add_to ","ReferenceDefinition  new ","args each "]}," ActiveRecord Store IndifferentCoder as_regular_hash":{"type":"method","name":"as_regular_hash","children":[],"call":["obj to_hash ","obj respond_to? "]}," ActiveRecord ConnectionAdapters PostgreSQL Quoting check_int_in_range":{"type":"method","name":"check_int_in_range","children":[],"call":[" raise ","IntegerOutOf64BitRange  new ","value to_int < ","value to_int ","value to_int > "]}," ActiveRecord ConnectionAdapters PostgreSQL Quoting IntegerOutOf64BitRange initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Generators MultiDbGenerator create_multi_db":{"type":"method","name":"create_multi_db","children":[],"call":[" template "]}," Arel Visitors ToSql has_group_by_and_having?":{"type":"method","name":"has_group_by_and_having?","children":[],"call":["o havings empty? ! ","o havings empty? ","o havings ","o groups empty? ! ","o groups empty? ","o groups "]}," Arel Visitors ToSql visit_ActiveModel_Attribute":{"type":"method","name":"visit_ActiveModel_Attribute","children":[],"call":["collector add_bind "," bind_block "]}," Arel Visitors ToSql visit_Arel_Nodes_NullsLast":{"type":"method","name":"visit_Arel_Nodes_NullsLast","children":[],"call":["collector << "," visit ","o expr "]}," Arel Visitors ToSql visit_Arel_Nodes_NullsFirst":{"type":"method","name":"visit_Arel_Nodes_NullsFirst","children":[],"call":["collector << "," visit ","o expr "]}," Arel Visitors ToSql visit_Arel_Nodes_Filter":{"type":"method","name":"visit_Arel_Nodes_Filter","children":[],"call":["collector << "," visit ","o right ","o left "]}," Arel Visitors MySQL visit_Arel_Nodes_NullsFirst":{"type":"method","name":"visit_Arel_Nodes_NullsFirst","children":[],"call":[" visit ","o expr "]}," Arel Visitors Dot visit_Arel_Nodes_Case":{"type":"method","name":"visit_Arel_Nodes_Case","children":[],"call":[" visit_edge "]}," Arel Visitors Dot visit__children":{"type":"method","name":"visit__children","children":[],"call":[" visit "," edge ","o children each_with_index ","o children "]}," Arel Visitors Dot visit_Arel_Attributes_Attribute":{"type":"method","name":"visit_Arel_Attributes_Attribute","children":[],"call":[" visit_edge "]}," Arel Visitors Dot visit_Arel_Nodes_Extract":{"type":"method","name":"visit_Arel_Nodes_Extract","children":[],"call":[" visit_edge "]}," Arel Visitors Dot visit__no_edges":{"type":"method","name":"visit__no_edges","children":[],"call":[]}," Arel Visitors Dot visit_Arel_Nodes_NamedWindow":{"type":"method","name":"visit_Arel_Nodes_NamedWindow","children":[],"call":[" visit_edge "]}," Arel Visitors Dot visit_Arel_Nodes_Window":{"type":"method","name":"visit_Arel_Nodes_Window","children":[],"call":[" visit_edge "]}," Arel Visitors Dot visit__regexp":{"type":"method","name":"visit__regexp","children":[],"call":[" visit_edge "]}," Arel Visitors Dot visit_Arel_Nodes_InfixOperation":{"type":"method","name":"visit_Arel_Nodes_InfixOperation","children":[],"call":[" visit_edge "]}," Arel Visitors Dot visit_Arel_Nodes_UnaryOperation":{"type":"method","name":"visit_Arel_Nodes_UnaryOperation","children":[],"call":[" visit_edge "]}," Arel Visitors Dot visit_Arel_Nodes_Binary":{"type":"method","name":"visit_Arel_Nodes_Binary","children":[],"call":[" visit_edge "]}," Arel Visitors Dot visit_Arel_Nodes_Unary":{"type":"method","name":"visit_Arel_Nodes_Unary","children":[],"call":[" visit_edge "]}," Arel Visitors Dot visit_Arel_Nodes_Function":{"type":"method","name":"visit_Arel_Nodes_Function","children":[],"call":[" visit_edge "]}," Arel UpdateManager having":{"type":"method","name":"having","children":[],"call":["@ast havings << ","@ast havings "]}," Arel UpdateManager group":{"type":"method","name":"group","children":[],"call":["@ast groups push ","Nodes Group  new ","@ast groups ","Nodes SqlLiteral  new ","column to_s ","Symbol  === ","String  === ","columns each ","Nodes SqlLiteral  new  to_s ","Nodes SqlLiteral  new s each "]}," Arel SelectManager where":{"type":"method","name":"where","children":[],"call":["@ctx wheres << ","@ctx wheres ","expr ast ","Arel TreeManager  === ","expr ast  ast "]}," Arel FilterPredications filter":{"type":"method","name":"filter","children":[],"call":["Nodes Filter  new "]}," Arel DeleteManager having":{"type":"method","name":"having","children":[],"call":["@ast havings << ","@ast havings "]}," Arel DeleteManager group":{"type":"method","name":"group","children":[],"call":["@ast groups push ","Nodes Group  new ","@ast groups ","Nodes SqlLiteral  new ","column to_s ","Symbol  === ","String  === ","columns each ","Nodes SqlLiteral  new  to_s ","Nodes SqlLiteral  new s each "]}," ActiveRecord global_executor_concurrency":{"type":"method","name":"global_executor_concurrency","children":[],"call":[]}," ActiveRecord global_executor_concurrency=":{"type":"method","name":"global_executor_concurrency=","children":[],"call":[]}," ActiveRecord global_thread_pool_async_query_executor":{"type":"method","name":"global_thread_pool_async_query_executor","children":[],"call":[]}," ActiveRecord default_timezone=":{"type":"method","name":"default_timezone=","children":[],"call":[]}," ActiveRecord Type HashLookupTypeMap clear":{"type":"method","name":"clear","children":[],"call":["@cache clear ","@mapping clear "]}," ActiveRecord Type HashLookupTypeMap register_type":{"type":"method","name":"register_type","children":[],"call":["@cache clear ","@mapping []= "," proc "," raise "]}," ActiveRecord Type HashLookupTypeMap initialize":{"type":"method","name":"initialize","children":[],"call":["h fetch_or_store ","Concurrent Map  new "]}," ActiveRecord Type AdapterSpecificRegistry lookup":{"type":"method","name":"lookup","children":[],"call":[" raise ","symbol inspect ","registration call "," find_registration "," find_registration  call "," find_ find_registration  "]}," ActiveRecord Type AdapterSpecificRegistry register":{"type":"method","name":"register","children":[],"call":[" registrations << ","Registration  new "," registrations ","block ruby2_keywords ","block respond_to? ","klass new "," proc "," block_given? "]}," ActiveRecord Type AdapterSpecificRegistry initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":["@registrations dup ","@registrations dup  dup "]}," ActiveRecord Type AdapterSpecificRegistry initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Tasks PostgreSQLDatabaseTasks psql_env":{"type":"method","name":"psql_env","children":[],"call":["env []= "," configuration_hash [] to_s "," configuration_hash [] "," configuration_hash "," db_config host "," db_config "," tap "]}," ActiveRecord Tasks DatabaseTasks structure_load_flags_for":{"type":"method","name":"structure_load_flags_for","children":[],"call":[" structure_load_flags "," structure_load_flags [] ","adapter to_sym "," structure_load_flags is_a? "]}," ActiveRecord Tasks DatabaseTasks structure_dump_flags_for":{"type":"method","name":"structure_dump_flags_for","children":[],"call":[" structure_dump_flags "," structure_dump_flags [] ","adapter to_sym "," structure_dump_flags is_a? "]}," ActiveRecord Tasks DatabaseTasks configs_for":{"type":"method","name":"configs_for","children":[],"call":["Base  configurations configs_for ","Base  configurations "]}," ActiveRecord Tasks DatabaseTasks schema_dump_path":{"type":"method","name":"schema_dump_path","children":[],"call":["File  join ","ActiveRecord Tasks DatabaseTasks  db_dir ","File  dirname == ","File  dirname ","db_config schema_dump ","ENV  [] "]}," ActiveRecord Tasks DatabaseTasks db_configs_with_versions":{"type":"method","name":"db_configs_with_versions","children":[],"call":["db_configs_with_versions [] << ","db_configs_with_versions [] ","target_version != ","versions_to_run each ","ActiveRecord Tasks DatabaseTasks  target_version ","ActiveRecord Base  connection migration_context pending_migration_versions ","ActiveRecord Base  connection migration_context ","ActiveRecord Base  connection ","ActiveRecord Base  establish_connection ","db_configs each ","h []= ","Hash  new ","conn migration_context pending_migration_versions ","conn migration_context ","conn pool db_config ","conn pool "," with_temporary_connection_for_each ","conn pool db_config s_with_versions [] << ","conn pool db_config s_with_versions [] ","ActiveRecord Tasks DatabaseTasks  target_version  != ","ActiveRecord Base  connection migration_context pending_migration_versions  each ","conn migration_context pending_migration_versions  each ","ActiveRecord Tasks DatabaseTasks  ActiveRecord Tasks DatabaseTasks  target_version  ","conn pool db_config s each ","conn pool conn pool db_config  "]}," ActiveRecord Tasks DatabaseTasks prepare_all":{"type":"method","name":"prepare_all","children":[],"call":[" load_seed ","ActiveRecord Base  establish_connection "," migrate "," load_schema ","ActiveRecord  schema_format ","File  exist? "," schema_dump_path "," create_current ","db_config name ","db_config env_name "," dump_schema ","ActiveRecord  dump_schema_after_migration "," configs_for each "," configs_for "," env "," dump_filename "," create "," each_current_configuration "," migration_connection schema_migration table_exists? "," migration_connection schema_migration "," migration_connection "," with_temporary_pool "]}," ActiveRecord Suppressor registry":{"type":"method","name":"registry","children":[],"call":["ActiveSupport IsolatedExecutionState  [] "]}," ActiveRecord Scoping ScopeRegistry set_global_current_scope":{"type":"method","name":"set_global_current_scope","children":[],"call":[" set_value_for "]}," ActiveRecord Scoping ScopeRegistry global_current_scope":{"type":"method","name":"global_current_scope","children":[],"call":[" value_for "]}," ActiveRecord Scoping ScopeRegistry set_ignore_default_scope":{"type":"method","name":"set_ignore_default_scope","children":[],"call":[" set_value_for "]}," ActiveRecord Scoping ScopeRegistry ignore_default_scope":{"type":"method","name":"ignore_default_scope","children":[],"call":[" value_for "]}," ActiveRecord Scoping ScopeRegistry set_current_scope":{"type":"method","name":"set_current_scope","children":[],"call":[" set_value_for "]}," ActiveRecord Scoping ScopeRegistry current_scope":{"type":"method","name":"current_scope","children":[],"call":[" value_for "]}," ActiveRecord Scoping ScopeRegistry instance":{"type":"method","name":"instance","children":[],"call":[" new ","ActiveSupport IsolatedExecutionState  [] "]}," ActiveRecord Scoping ClassMethods scope_registry":{"type":"method","name":"scope_registry","children":[],"call":["ScopeRegistry  instance "]}," ActiveRecord Scoping ClassMethods global_current_scope=":{"type":"method","name":"global_current_scope=","children":[],"call":["ScopeRegistry  set_global_current_scope "]}," ActiveRecord Scoping ClassMethods global_current_scope":{"type":"method","name":"global_current_scope","children":[],"call":["ScopeRegistry  global_current_scope "]}," ActiveRecord Scoping Default ClassMethods execute_scope?":{"type":"method","name":"execute_scope?","children":[],"call":["default_scope_obj all_queries ","all_queries nil? "]}," ActiveRecord Scoping Default ClassMethods default_scopes?":{"type":"method","name":"default_scopes?","children":[],"call":[" default_scopes any? "," default_scopes "]}," ActiveRecord Scoping DefaultScope initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord SchemaDumper types":{"type":"method","name":"types","children":[],"call":[]}," ActiveRecord RuntimeRegistry sql_runtime=":{"type":"method","name":"sql_runtime=","children":[],"call":["ActiveSupport IsolatedExecutionState  []= "]}," ActiveRecord RuntimeRegistry sql_runtime":{"type":"method","name":"sql_runtime","children":[],"call":["ActiveSupport IsolatedExecutionState  [] "]}," ActiveRecord Result cancel":{"type":"method","name":"cancel","children":[],"call":[]}," ActiveRecord Result result":{"type":"method","name":"result","children":[],"call":[]}," ActiveRecord Result empty":{"type":"method","name":"empty","children":[],"call":[]}," ActiveRecord Relation limited_count":{"type":"method","name":"limited_count","children":[],"call":[" limit count "," limit "," count "," limit_value "]}," ActiveRecord Relation instantiate_records":{"type":"method","name":"instantiate_records","children":[],"call":[" klass _load_from_sql freeze "," klass _load_from_sql "," klass ","@_join_dependency instantiate freeze ","@_join_dependency instantiate "," strict_loading_value "," eager_loading? "," freeze ","rows empty? "]}," ActiveRecord Relation exec_main_query":{"type":"method","name":"exec_main_query","children":[],"call":[" klass _query_by_sql "," arel "," klass "," connection select_all ","relation arel "," connection ","join_dependency apply_column_aliases "," freeze ","relation null_relation? "," apply_join_dependency "," eager_loading? "," where_clause contradiction? "," where_clause "," skip_query_cache_if_necessary ","Promise Complete  new ","join_dependency apply_column_aliases  arel ","join_dependency apply_column_aliases  null_join_dependency apply_column_aliases ? "]}," ActiveRecord Relation global_scope?":{"type":"method","name":"global_scope?","children":[],"call":["registry global_current_scope "," klass "]}," ActiveRecord Relation values_for_queries":{"type":"method","name":"values_for_queries","children":[],"call":["@values except "]}," ActiveRecord Relation scheduled?":{"type":"method","name":"scheduled?","children":[],"call":["@future_result ! ! ","@future_result ! "]}," ActiveRecord Relation load_async":{"type":"method","name":"load_async","children":[],"call":["result is_a? "," exec_main_query "," connection current_transaction closed? "," connection current_transaction "," connection "," loaded? "," load "," connection async_enabled? ! "," connection async_enabled? "," exec_main_query  is_a? "]}," ActiveRecord Relation update!":{"type":"method","name":"update!","children":[],"call":[" klass update! "," klass ","record update! "," each ","id == "]}," ActiveRecord Relation WhereClause hash":{"type":"method","name":"hash","children":[],"call":["(send\n  (self) :class) hash "," predicates "," class "]}," ActiveRecord Relation RecordFetchWarning QueryRegistry queries":{"type":"method","name":"queries","children":[],"call":["ActiveSupport IsolatedExecutionState  [] "]}," ActiveRecord QueryMethods excluding!":{"type":"method","name":"excluding!","children":[],"call":["Relation WhereClause  new "," where_clause "," predicate_builder [] invert "," predicate_builder [] "," primary_key "," predicate_builder "]}," ActiveRecord QueryMethods excluding":{"type":"method","name":"excluding","children":[],"call":[" spawn excluding! "," spawn "," raise "," __callee__ "," klass name "," klass ","records all? ","records compact! ","records flatten! "]}," ActiveRecord QueryMethods structurally_compatible?":{"type":"method","name":"structurally_compatible?","children":[],"call":[" structurally_incompatible_values_for empty? "," structurally_incompatible_values_for "]}," ActiveRecord QueryMethods invert_where!":{"type":"method","name":"invert_where!","children":[],"call":[" where_clause= "," where_clause invert "," where_clause "]}," ActiveRecord QueryMethods invert_where":{"type":"method","name":"invert_where","children":[],"call":[" spawn invert_where! "," spawn "]}," ActiveRecord QueryMethods in_order_of":{"type":"method","name":"in_order_of","children":[],"call":[" spawn order! "," connection field_ordered_value "," connection "," spawn "," order_column ","column to_s ","column is_a? "," type_caster type_cast_for_database "," type_caster ","values map "," references_values ","references empty? "," column_references "," klass disallow_raw_sql! "," connection column_name_with_order_matcher "," klass "," spawn order! where! ","arel_column in "," spawn none! ","values empty? "," build_case_for_value_position ","arel_column in or ","arel_column eq ","values compact ","values include? "," order_ order_column  "," order_column  to_s "," order_column  is_a? ","  column_references _values "," column_references  empty? ","  order_column _references "," column_ column_references  "," connection  order_column _name_with_order_matcher ","arel_ order_column  in "," order_column  in ","arel_ order_column  in or "," order_column  in or ","arel_ order_column  eq "," order_column  eq "]}," ActiveRecord QueryMethods WhereChain associated":{"type":"method","name":"associated","children":[],"call":[" not ","reflection association_primary_key ","reflection table_name ","@scope joins! ","@scope klass _reflect_on_association ","@scope klass ","associations each "," scope_association_reflection ","@scope table_name == ","@scope table_name ","reflection options [] ","reflection options ","@scope klass _reflect_on_association  association_primary_key "," scope_association_reflection  association_primary_key ","@scope klass _reflect_on_association  table_name "," scope_association_reflection  table_name "," scope_association_@scope klass _reflect_on_association  "," scope_association_ scope_association_reflection  ","@scope klass _reflect_on_association  options [] "," scope_association_reflection  options [] ","@scope klass _reflect_on_association  options "," scope_association_reflection  options "]}," ActiveRecord Relation Merger merge_select_values":{"type":"method","name":"merge_select_values","children":[],"call":[" arel_columns "," select_values "," other instance_eval "," other "," relation select_values "," relation "," other select_values "," other klass == "," relation klass "," other klass "," other select_values empty? "]}," ActiveRecord FinderMethods find_sole_by":{"type":"method","name":"find_sole_by","children":[],"call":[" where sole "," where "]}," ActiveRecord FinderMethods sole":{"type":"method","name":"sole","children":[],"call":[" raise ","ActiveRecord SoleRecordExceeded  new ","undesired present? "," raise_record_not_found_exception! ","found nil? "," first "]}," ActiveRecord Batches BatchEnumerator batch_size":{"type":"method","name":"batch_size","children":[],"call":[]}," ActiveRecord Reflection AssociationReflection scope_allows_automatic_inverse_of?":{"type":"method","name":"scope_allows_automatic_inverse_of?","children":[],"call":["reflection klass automatic_scope_inversing ","reflection klass ","reflection scope ! ","reflection scope "]}," ActiveRecord Reflection AssociationReflection check_eager_loadable!":{"type":"method","name":"check_eager_loadable!","children":[],"call":[" raise ","(str \"            The association scope '\") squish "," name "," scope arity == "," scope arity "," scope "]}," ActiveRecord Reflection AbstractReflection ensure_option_not_given_as_class!":{"type":"method","name":"ensure_option_not_given_as_class!","children":[],"call":[" raise "," options [] class == "," options [] class "," options [] "," options "]}," ActiveRecord Querying _load_from_sql":{"type":"method","name":"_load_from_sql","children":[],"call":[" instantiate_instance_of ","result_set map "," instantiate ","result_set includes_column? "," inheritance_column ","message_bus instrument "," name ","result_set length ","ActiveSupport Notifications  instrumenter "," attribute_types key? "," attribute_types ","column_types reject ","column_types empty? ","result_set column_types ","ActiveSupport Notifications  instrumenter  instrument ","result_set column_types  reject ","result_set column_types  empty? ","result_set result_set column_types  "]}," ActiveRecord Querying _query_by_sql":{"type":"method","name":"_query_by_sql","children":[],"call":[" connection select_all "," name "," sanitize_sql "," connection "]}," ActiveRecord QueryLogs tag_content":{"type":"method","name":"tag_content","children":[],"call":["(send\n  (block\n    (send\n      (send nil :tags) :flat_map)\n    (args\n      (arg :i))\n    (array\n      (splat\n        (lvar :i)))) :filter_map) join ","val nil? ","handler call ","handler arity == ","handler arity ","handler respond_to? ","context [] ","handler nil? "," taggings [] "," taggings ","(send\n  (send nil :tags) :flat_map) filter_map "," tags flat_map "," tags ","ActiveSupport ExecutionContext  to_h "," context "," context [] "," formatter format "," formatter ","context []  nil? "," context []  nil? ","ActiveSupport ExecutionContext  to_h  [] "," ActiveSupport ExecutionContext  to_h  "," ActiveSupport ExecutionContext  to_h  [] "]}," ActiveRecord QueryLogs escape_sql_comment":{"type":"method","name":"escape_sql_comment","children":[],"call":["content to_s gsub ","content to_s ","comment gsub! ","content to_s dup ","content to_s dup  gsub! "]}," ActiveRecord QueryLogs uncached_comment":{"type":"method","name":"uncached_comment","children":[],"call":[" escape_sql_comment ","content present? "," tag_content "," tag_content  present? "," tag_ tag_content  "]}," ActiveRecord QueryLogs comment":{"type":"method","name":"comment","children":[],"call":[" uncached_comment "," cached_comment "," cache_query_log_tags "]}," ActiveRecord QueryLogs clear_cache":{"type":"method","name":"clear_cache","children":[],"call":[" cached_comment= "]}," ActiveRecord QueryLogs call":{"type":"method","name":"call","children":[],"call":["(send nil :prepend_comment) strip "," comment "," prepend_comment ","parts join ","parts unshift ","parts << "," comments ","comment blank? ","(send nil :prepend_ comment ) strip ","  comment  "," prepend_ comment  "," comments  join "," comments  unshift "," comments  << ","  comment s "," comment  blank? "]}," ActiveRecord Persistence _primary_key_constraints_hash":{"type":"method","name":"_primary_key_constraints_hash","children":[],"call":[" id_in_database "]}," ActiveRecord Persistence apply_scoping?":{"type":"method","name":"apply_scoping?","children":[],"call":[" class global_current_scope "," class "," class default_scopes? ","(and\n  (lvar :options)\n  (send\n    (lvar :options) :[]\n    (sym :unscoped))) ! ","options [] "]}," ActiveRecord Persistence _find_record":{"type":"method","name":"_find_record","children":[],"call":[" class preload find "," id "," class preload "," strict_loaded_associations "," class "," class preload lock find "," class preload lock ","options [] ","base find_by! "," _in_memory_query_constraints_hash ","base lock find_by! ","base lock "," class all preload "," class all "," class all preload  find_by! "," class all preload  lock find_by! "," class all preload  lock "]}," ActiveRecord Persistence strict_loaded_associations":{"type":"method","name":"strict_loaded_associations","children":[],"call":["(send\n  (ivar :@association_cache) :find_all) map ","assoc owner strict_loading_n_plus_one_only? ! ","assoc owner strict_loading_n_plus_one_only? ","assoc owner ","assoc owner strict_loading? ","@association_cache find_all "]}," ActiveRecord Persistence previously_persisted?":{"type":"method","name":"previously_persisted?","children":[],"call":[" destroyed? "," new_record? ! "," new_record? "]}," ActiveRecord Persistence ClassMethods build_default_constraint":{"type":"method","name":"build_default_constraint","children":[],"call":["default_where_clause ast ","default_where_clause empty? "," default_scoped where_clause "," default_scoped "," default_scopes? "," default_scoped where_clause  ast "," default_scoped where_clause  empty? "]}," ActiveRecord Persistence ClassMethods update!":{"type":"method","name":"update!","children":[],"call":["object update! "," find "," raise ","ActiveRecord Base  === ","record update! "," all each "," all ","id == ","attributes [] ","(send\n  (lvar :id) :map) each_with_index ","id map ","id any? ","id is_a? "," find  update! "]}," ActiveRecord NullRelation exec_main_query":{"type":"method","name":"exec_main_query","children":[],"call":[" freeze "]}," ActiveRecord ModelSchema ClassMethods real_inheritance_column=":{"type":"method","name":"real_inheritance_column=","children":[],"call":[" _inheritance_column= ","value to_s "]}," ActiveRecord MigrationContext pending_migration_versions":{"type":"method","name":"pending_migration_versions","children":[],"call":[" migrations collect - "," get_all_versions "," migrations collect "," migrations "]}," ActiveRecord Migration Compatibility V5_2 TableDefinition column":{"type":"method","name":"column","children":[],"call":["options [] "]}," ActiveRecord Migration Compatibility V6_0 TableDefinition column":{"type":"method","name":"column","children":[],"call":["options [] "]}," ActiveRecord Migration Compatibility V6_1 compatible_table_definition":{"type":"method","name":"compatible_table_definition","children":[],"call":[" prepend "]}," ActiveRecord Migration Compatibility V6_1 TableDefinition column":{"type":"method","name":"column","children":[],"call":["options [] "]}," ActiveRecord Migration Compatibility V6_1 TableDefinition new_column_definition":{"type":"method","name":"new_column_definition","children":[],"call":["PostgreSQLCompat  compatible_timestamp_type ","PostgreSQLCompat  compatible_timestamp_PostgreSQLCompat  compatible_timestamp_type  "]}," ActiveRecord Migration Compatibility V6_1 create_table":{"type":"method","name":"create_table","children":[],"call":[" compatible_table_definition "," block_given? "]}," ActiveRecord Migration Compatibility V6_1 add_column":{"type":"method","name":"add_column","children":[],"call":["PostgreSQLCompat  compatible_timestamp_type "," connection ","options [] ","type == ","PostgreSQLCompat  compatible_timestamp_PostgreSQLCompat  compatible_timestamp_type  ","PostgreSQLCompat  compatible_timestamp_type  == "]}," ActiveRecord Migration Compatibility V6_1 PostgreSQLCompat compatible_timestamp_type":{"type":"method","name":"compatible_timestamp_type","children":[],"call":[]}," ActiveRecord Middleware ShardSelector set_shard":{"type":"method","name":"set_shard","children":[],"call":["ActiveRecord Base  prohibit_shard_swapping "," options fetch "," options ","ActiveRecord Base  connected_to ","shard to_sym "]}," ActiveRecord Middleware ShardSelector selected_shard":{"type":"method","name":"selected_shard","children":[],"call":[" resolver call "," resolver "]}," ActiveRecord Middleware ShardSelector call":{"type":"method","name":"call","children":[],"call":["@app call "," set_shard "," selected_shard ","ActionDispatch Request  new "," set_ selected_shard  "," selected_ selected_shard  "]}," ActiveRecord Middleware ShardSelector initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord LogSubscriber filter":{"type":"method","name":"filter","children":[],"call":["ActiveRecord Base  inspection_filter filter_param ","ActiveRecord Base  inspection_filter "]}," ActiveRecord InsertAll Builder raw_update_sql":{"type":"method","name":"raw_update_sql","children":[],"call":[" insert_all update_sql "," insert_all "]}," ActiveRecord InsertAll timestamps_for_create":{"type":"method","name":"timestamps_for_create","children":[],"call":[" model all_timestamp_attributes_in_model index_with "," connection high_precision_current_timestamp "," connection "," model all_timestamp_attributes_in_model "," model "]}," ActiveRecord InsertAll disallow_raw_sql!":{"type":"method","name":"disallow_raw_sql!","children":[],"call":[" raise ","Arel  arel_node? ","value is_a? ! ","value is_a? "]}," ActiveRecord InsertAll custom_update_sql_provided?":{"type":"method","name":"custom_update_sql_provided?","children":[],"call":["Arel  arel_node? "," on_duplicate "]}," ActiveRecord InsertAll configure_on_duplicate_update_logic":{"type":"method","name":"configure_on_duplicate_update_logic","children":[],"call":[" on_duplicate "," custom_update_sql_provided? "," Array "," update_only "," update_only present? "," raise "]}," ActiveRecord InsertAll keys_including_timestamps":{"type":"method","name":"keys_including_timestamps","children":[],"call":[" keys "," keys + "," model all_timestamp_attributes_in_model "," model "," record_timestamps? "]}," ActiveRecord InsertAll record_timestamps?":{"type":"method","name":"record_timestamps?","children":[],"call":[]}," ActiveRecord Inheritance ClassMethods set_base_class":{"type":"method","name":"set_base_class","children":[],"call":[" superclass base_class "," superclass "," superclass abstract_class? "," superclass == "," raise "," name "," < "," == "]}," ActiveRecord Inheritance ClassMethods initialize_clone":{"type":"method","name":"initialize_clone","children":[],"call":[" set_base_class "]}," ActiveRecord Inheritance ClassMethods dup":{"type":"method","name":"dup","children":[],"call":["other set_base_class "]}," ActiveRecord Inheritance ClassMethods primary_abstract_class":{"type":"method","name":"primary_abstract_class","children":[],"call":["ActiveRecord  application_record_class= "," abstract_class= "," raise ","ActiveRecord  application_record_class inspect ","ActiveRecord  application_record_class ","ActiveRecord  application_record_class name != "," name ","ActiveRecord  application_record_class name "]}," ActiveRecord FutureResult SelectAll exec_query":{"type":"method","name":"exec_query","children":[],"call":["ActiveRecord Result  empty "]}," ActiveRecord FutureResult exec_query":{"type":"method","name":"exec_query","children":[],"call":["connection exec_query ","connection internal_exec_query "]}," ActiveRecord FutureResult execute_query":{"type":"method","name":"execute_query","children":[],"call":[" exec_query "]}," ActiveRecord FutureResult execute_or_wait":{"type":"method","name":"execute_or_wait","children":[],"call":["Process  clock_gettime - ","Process  clock_gettime "," execute_query ","@pool connection "," pending? ","@mutex synchronize ","(send\n  (send\n    (const nil :Concurrent) :monotonic_time) :-\n  (lvar :start)) * ","Concurrent  monotonic_time - ","Concurrent  monotonic_time ","(send\n  (send\n    (const nil :Concurrent) :monotonic_time) :-\n  (lvar :Process  clock_gettime )) * ","(send\n  (send\n    (const nil :Concurrent) :monotonic_time) :-\n  (lvar :Concurrent  monotonic_time )) * "]}," ActiveRecord FutureResult canceled?":{"type":"method","name":"canceled?","children":[],"call":["@session active? ! ","@session active? "]}," ActiveRecord FutureResult pending?":{"type":"method","name":"pending?","children":[],"call":["@session active? ","@session ! "]}," ActiveRecord FutureResult result":{"type":"method","name":"result","children":[],"call":[" raise "," canceled? "," execute_or_wait "]}," ActiveRecord FutureResult execute_or_skip":{"type":"method","name":"execute_or_skip","children":[],"call":["@mutex unlock "," execute_query ","connection with_instrumenter ","EventBuffer  new "," pending? ","@mutex try_lock ","@pool with_connection "]}," ActiveRecord FutureResult cancel":{"type":"method","name":"cancel","children":[],"call":[]}," ActiveRecord FutureResult execute!":{"type":"method","name":"execute!","children":[],"call":[" execute_query "]}," ActiveRecord FutureResult schedule!":{"type":"method","name":"schedule!","children":[],"call":["@pool schedule_query "]}," ActiveRecord FutureResult initialize":{"type":"method","name":"initialize","children":[],"call":["ActiveSupport Notifications  instrumenter ","Mutex  new "]}," ActiveRecord FutureResult EventBuffer flush":{"type":"method","name":"flush","children":[],"call":["ActiveSupport Notifications  publish_event ","event payload []= ","@future_result lock_wait ","event payload ","events each "]}," ActiveRecord FutureResult EventBuffer instrument":{"type":"method","name":"instrument","children":[],"call":["event record ","@events << ","@instrumenter new_event ","@instrumenter new_event  record ","@@instrumenter new_event s << ","@instrumenter new_@instrumenter new_event  "]}," ActiveRecord FutureResult EventBuffer initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord FixtureSet TableRow PrimaryKeyError initialize":{"type":"method","name":"initialize","children":[],"call":["association klass name ","association klass ","association join_primary_key ","association foreign_key ","association name ","association klass primary_key "]}," ActiveRecord FixtureSet TableRow HasManyThroughProxy timestamp_column_names":{"type":"method","name":"timestamp_column_names","children":[],"call":["@association through_reflection klass all_timestamp_attributes_in_model ","@association through_reflection klass ","@association through_reflection "]}," ActiveRecord FixtureSet File validate_config_row":{"type":"method","name":"validate_config_row","children":[],"call":[" raise ","error message ","data assert_valid_keys ","Hash  === "]}," ActiveRecord ExplainRegistry instance":{"type":"method","name":"instance","children":[],"call":[" new ","ActiveSupport IsolatedExecutionState  [] "]}," ActiveRecord NoDatabaseError db_error":{"type":"method","name":"db_error","children":[],"call":["NoDatabaseError  new "]}," ActiveRecord SoleRecordExceeded initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord DatabaseConnectionError username_error":{"type":"method","name":"username_error","children":[],"call":["DatabaseConnectionError  new "]}," ActiveRecord DatabaseConnectionError hostname_error":{"type":"method","name":"hostname_error","children":[],"call":["DatabaseConnectionError  new "]}," ActiveRecord DatabaseConnectionError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Enum _enum":{"type":"method","name":"_enum","children":[],"call":["enum_values freeze "," detect_negative_enum_conditions! "," define_enum_methods ","value_method_names << ","value_method_names include? ! ","value_method_names include? ","value_method_alias != ","label gsub ","label to_s ","enum_values []= ","pairs each ","values each_with_index ","values each_pair ","values respond_to? ","suffix == ","prefix == "," _enum_methods_module module_eval "," _enum_methods_module ","EnumType  new ","subtype subtype ","EnumType  === "," attribute "," detect_enum_conflict! "," defined_enums []= "," defined_enums "," singleton_class define_method ","name pluralize "," singleton_class ","name to_s ","ActiveSupport HashWithIndifferentAccess  new "," assert_valid_enum_definition_values "," validates_inclusion_of ","enum_values keys ","Hash  === ","validate ! ","ActiveSupport HashWithIndifferentAccess  new  freeze ","value_method_name to_s s << ","value_method_name to_s s include? ! ","value_method_name to_s s include? ","label to_s  gsub ","label to_s  to_s ","ActiveSupport HashWithIndifferentAccess  new  []= ","values each_with_index  each ","values each_pair  each ","subtype subtype  subtype subtype  ","name to_s  pluralize ","name to_s  to_s ","ActiveSupport HashWithIndifferentAccess  new  keys "]}," ActiveRecord Encryption eager_load!":{"type":"method","name":"eager_load!","children":[],"call":[]}," ActiveRecord Encryption Scheme build_key_provider":{"type":"method","name":"build_key_provider","children":[],"call":["DeterministicKeyProvider  new ","ActiveRecord Encryption  config deterministic_key ","ActiveRecord Encryption  config ","DerivedSecretKeyProvider  new ","@key present? ","ActiveRecord Encryption  config ActiveRecord Encryption  config deterministic_key  "]}," ActiveRecord Encryption Scheme validate_credential":{"type":"method","name":"validate_credential","children":[],"call":[" raise ","ActiveRecord Encryption  config public_send present? ","ActiveRecord Encryption  config public_send ","ActiveRecord Encryption  config "]}," ActiveRecord Encryption Scheme validate_keys!":{"type":"method","name":"validate_keys!","children":[],"call":[" validate_credential "]}," ActiveRecord Encryption Scheme validate_config!":{"type":"method","name":"validate_config!","children":[],"call":[" raise ","@deterministic ! "]}," ActiveRecord Encryption Scheme with_context":{"type":"method","name":"with_context","children":[],"call":["block call ","ActiveRecord Encryption  with_encryption_context ","@context_properties present? "]}," ActiveRecord Encryption Scheme to_h":{"type":"method","name":"to_h","children":[],"call":["(pair\n  (sym :key_provider)\n  (ivar :@key_provider_param)) compact "]}," ActiveRecord Encryption Scheme merge":{"type":"method","name":"merge","children":[],"call":[" class new "," to_h merge ","other_scheme to_h "," to_h "," class "]}," ActiveRecord Encryption Scheme key_provider":{"type":"method","name":"key_provider","children":[],"call":[" build_key_provider "," validate_keys! "," default_key_provider "]}," ActiveRecord Encryption Scheme fixed?":{"type":"method","name":"fixed?","children":[],"call":["@deterministic [] ","@deterministic is_a? ! ","@deterministic is_a? "]}," ActiveRecord Encryption Scheme deterministic?":{"type":"method","name":"deterministic?","children":[],"call":["@deterministic ! ! ","@deterministic ! "]}," ActiveRecord Encryption Scheme downcase?":{"type":"method","name":"downcase?","children":[],"call":[]}," ActiveRecord Encryption Scheme ignore_case?":{"type":"method","name":"ignore_case?","children":[],"call":[]}," ActiveRecord Encryption Scheme initialize":{"type":"method","name":"initialize","children":[],"call":[" validate_config! ","Array  wrap "]}," ActiveRecord Encryption ReadOnlyNullEncryptor encrypted?":{"type":"method","name":"encrypted?","children":[],"call":[]}," ActiveRecord Encryption ReadOnlyNullEncryptor decrypt":{"type":"method","name":"decrypt","children":[],"call":[]}," ActiveRecord Encryption ReadOnlyNullEncryptor encrypt":{"type":"method","name":"encrypt","children":[],"call":[" raise "]}," ActiveRecord Encryption Properties to_h":{"type":"method","name":"to_h","children":[],"call":[" data "]}," ActiveRecord Encryption Properties add":{"type":"method","name":"add","children":[],"call":[" []= ","key to_sym ","other_properties each "]}," ActiveRecord Encryption Properties validate_value_type":{"type":"method","name":"validate_value_type","children":[],"call":[" raise ","ALLOWED_VALUE_CLASSES  inspect ","value class ","value is_a? ","ALLOWED_VALUE_CLASSES  find ","ALLOWED_VALUE_CLASSES  any? ","ALLOWED_VALUE_CLASSES  include? "]}," ActiveRecord Encryption Properties []=":{"type":"method","name":"[]=","children":[],"call":[" data []= "," data "," validate_value_type "," raise "," key? "]}," ActiveRecord Encryption Properties initialize":{"type":"method","name":"initialize","children":[],"call":[" add "]}," ActiveRecord Encryption NullEncryptor encrypted?":{"type":"method","name":"encrypted?","children":[],"call":[]}," ActiveRecord Encryption NullEncryptor decrypt":{"type":"method","name":"decrypt","children":[],"call":[]}," ActiveRecord Encryption NullEncryptor encrypt":{"type":"method","name":"encrypt","children":[],"call":[]}," ActiveRecord Encryption MessageSerializer decode_if_needed":{"type":"method","name":"decode_if_needed","children":[],"call":[" raise "," Base64  strict_decode64 ","value is_a? "]}," ActiveRecord Encryption MessageSerializer encode_if_needed":{"type":"method","name":"encode_if_needed","children":[],"call":[" Base64  strict_encode64 ","value is_a? "]}," ActiveRecord Encryption MessageSerializer headers_to_json":{"type":"method","name":"headers_to_json","children":[],"call":[" encode_if_needed "," message_to_json ","value is_a? ","headers transform_values "]}," ActiveRecord Encryption MessageSerializer message_to_json":{"type":"method","name":"message_to_json","children":[],"call":[" headers_to_json ","message headers "," encode_if_needed ","message payload "]}," ActiveRecord Encryption MessageSerializer parse_properties":{"type":"method","name":"parse_properties","children":[],"call":["properties []= "," decode_if_needed "," parse_message ","level + ","value is_a? ","ActiveRecord Encryption Properties  new tap ","ActiveRecord Encryption Properties  new "]}," ActiveRecord Encryption MessageSerializer validate_message_data_format":{"type":"method","name":"validate_message_data_format","children":[],"call":[" raise ","data has_key? ","data is_a? ","level > "]}," ActiveRecord Encryption MessageSerializer parse_message":{"type":"method","name":"parse_message","children":[],"call":["ActiveRecord Encryption Message  new "," parse_properties ","data [] "," decode_if_needed "," validate_message_data_format "," raise ","level > "]}," ActiveRecord Encryption MessageSerializer dump":{"type":"method","name":"dump","children":[],"call":["JSON  dump "," message_to_json "," raise ","message is_a? "]}," ActiveRecord Encryption MessageSerializer load":{"type":"method","name":"load","children":[],"call":[" raise "," parse_message ","JSON  parse "]}," ActiveRecord Encryption Message validate_payload_type":{"type":"method","name":"validate_payload_type","children":[],"call":[" raise ","payload nil? ","payload is_a? "]}," ActiveRecord Encryption Message ==":{"type":"method","name":"==","children":[],"call":[" headers == ","other_message headers "," headers "," payload == ","other_message payload "," payload "]}," ActiveRecord Encryption Message initialize":{"type":"method","name":"initialize","children":[],"call":["Properties  new "," validate_payload_type "]}," ActiveRecord Encryption KeyProvider keys_grouped_by_id":{"type":"method","name":"keys_grouped_by_id","children":[],"call":["@keys group_by "]}," ActiveRecord Encryption KeyProvider decryption_keys":{"type":"method","name":"decryption_keys","children":[],"call":[" keys_grouped_by_id [] ","encrypted_message headers encrypted_data_key_id ","encrypted_message headers "," keys_grouped_by_id "]}," ActiveRecord Encryption KeyProvider encryption_key":{"type":"method","name":"encryption_key","children":[],"call":["key public_tags encrypted_data_key_id= ","key id ","key public_tags ","ActiveRecord Encryption  config store_key_references ","ActiveRecord Encryption  config ","@keys last tap ","@keys last "]}," ActiveRecord Encryption KeyProvider initialize":{"type":"method","name":"initialize","children":[],"call":[" Array "]}," ActiveRecord Encryption KeyGenerator key_length":{"type":"method","name":"key_length","children":[],"call":["ActiveRecord Encryption  cipher key_length ","ActiveRecord Encryption  cipher "]}," ActiveRecord Encryption KeyGenerator derive_key_from":{"type":"method","name":"derive_key_from","children":[],"call":["ActiveSupport KeyGenerator  new generate_key ","ActiveRecord Encryption  config key_derivation_salt ","ActiveRecord Encryption  config ","ActiveSupport KeyGenerator  new "," key_derivation_salt "," hash_digest_class "]}," ActiveRecord Encryption KeyGenerator generate_random_hex_key":{"type":"method","name":"generate_random_hex_key","children":[],"call":[" generate_random_key unpack [] "," generate_random_key unpack "," generate_random_key "]}," ActiveRecord Encryption KeyGenerator generate_random_key":{"type":"method","name":"generate_random_key","children":[],"call":["SecureRandom  random_bytes "]}," ActiveRecord Encryption Key id":{"type":"method","name":"id","children":[],"call":["Digest SHA1  hexdigest first ","Digest SHA1  hexdigest "," secret "]}," ActiveRecord Encryption Key derive_from":{"type":"method","name":"derive_from","children":[],"call":[]}," ActiveRecord Encryption Key initialize":{"type":"method","name":"initialize","children":[],"call":["Properties  new "]}," ActiveRecord Encryption ExtendedDeterministicUniquenessValidator EncryptedUniquenessValidator validate_each":{"type":"method","name":"validate_each","children":[],"call":["ActiveRecord Encryption  without_encryption ","type serialize ","(lvar :encrypted_type) each ","encrypted_type previous_types ","klass type_for_attribute ","klass deterministic_encrypted_attributes ","record class ","(lvar :klass type_for_attribute ) each ","klass type_for_attribute  previous_types ","record class  type_for_attribute ","record class  deterministic_encrypted_attributes "]}," ActiveRecord Encryption ExtendedDeterministicUniquenessValidator install_support":{"type":"method","name":"install_support","children":[],"call":[]}," ActiveRecord Encryption ExtendedDeterministicQueries InWithAdditionalValues encryption_aware_type_caster":{"type":"method","name":"encryption_aware_type_caster","children":[],"call":[" attribute type_caster "," attribute "," attribute type_caster cast_type "," attribute type_caster is_a? "]}," ActiveRecord Encryption ExtendedDeterministicQueries InWithAdditionalValues proc_for_binds":{"type":"method","name":"proc_for_binds","children":[],"call":["ActiveModel Attribute  with_cast_value "," encryption_aware_type_caster "," attribute name "," attribute "," lambda "]}," ActiveRecord Encryption ExtendedDeterministicQueries ExtendedEncryptableType serialize":{"type":"method","name":"serialize","children":[],"call":["data value ","data is_a? "]}," ActiveRecord Encryption ExtendedDeterministicQueries AdditionalValue process":{"type":"method","name":"process","children":[],"call":[" type serialize "," type "]}," ActiveRecord Encryption ExtendedDeterministicQueries AdditionalValue initialize":{"type":"method","name":"initialize","children":[],"call":[" process "]}," ActiveRecord Encryption ExtendedDeterministicQueries CoreQueries find_by":{"type":"method","name":"find_by","children":[],"call":[" process_encrypted_query_arguments "," deterministic_encrypted_attributes ","EncryptedQuery  process_arguments "]}," ActiveRecord Encryption ExtendedDeterministicQueries RelationQueries process_encrypted_query_arguments_if_needed":{"type":"method","name":"process_encrypted_query_arguments_if_needed","children":[],"call":[" process_encrypted_query_arguments "," deterministic_encrypted_attributes "]}," ActiveRecord Encryption ExtendedDeterministicQueries RelationQueries find_or_create_by!":{"type":"method","name":"find_or_create_by!","children":[],"call":[" create! "," find_by ","attributes dup "]}," ActiveRecord Encryption ExtendedDeterministicQueries RelationQueries find_or_create_by":{"type":"method","name":"find_or_create_by","children":[],"call":[" create "," find_by ","attributes dup "]}," ActiveRecord Encryption ExtendedDeterministicQueries RelationQueries exists?":{"type":"method","name":"exists?","children":[],"call":[" process_encrypted_query_arguments_if_needed ","EncryptedQuery  process_arguments "]}," ActiveRecord Encryption ExtendedDeterministicQueries RelationQueries where":{"type":"method","name":"where","children":[],"call":[" process_encrypted_query_arguments_if_needed ","EncryptedQuery  process_arguments "]}," ActiveRecord Encryption ExtendedDeterministicQueries EncryptedQueryArgumentProcessor additional_values_for":{"type":"method","name":"additional_values_for","children":[],"call":["AdditionalValue  new ","type previous_types collect ","type previous_types "]}," ActiveRecord Encryption ExtendedDeterministicQueries EncryptedQueryArgumentProcessor process_encrypted_query_argument":{"type":"method","name":"process_encrypted_query_argument","children":[],"call":["list + "," additional_values_for ","each_value is_a? ","list flat_map "," Array ","value last is_a? ","value last ","value is_a? "," Array  + "," Array  flat_map "]}," ActiveRecord Encryption ExtendedDeterministicQueries EncryptedQueryArgumentProcessor process_encrypted_query_arguments":{"type":"method","name":"process_encrypted_query_arguments","children":[],"call":["options []= "," process_encrypted_query_argument ","options [] ","type previous_types empty? ! ","type previous_types empty? ","type previous_types "," type_for_attribute "," deterministic_encrypted_attributes ","(lvasgn :options\n  (send\n    (lvar :args) :first)) is_a? ","args first ","args is_a? ","args first  []= ","args first  [] "," type_for_attribute  previous_ type_for_attribute s empty? ! "," type_for_attribute  previous_ type_for_attribute s empty? "," type_for_attribute  previous_ type_for_attribute s ","  type_for_attribute _for_attribute ","(lvasgn :args first \n  (send\n    (lvar :args) :first)) is_a? "]}," ActiveRecord Encryption ExtendedDeterministicQueries install_support":{"type":"method","name":"install_support","children":[],"call":[]}," ActiveRecord Encryption EnvelopeEncryptionKeyProvider generate_random_secret":{"type":"method","name":"generate_random_secret","children":[],"call":["ActiveRecord Encryption  key_generator generate_random_key ","ActiveRecord Encryption  key_generator "]}," ActiveRecord Encryption EnvelopeEncryptionKeyProvider primary_key_provider":{"type":"method","name":"primary_key_provider","children":[],"call":["DerivedSecretKeyProvider  new ","ActiveRecord Encryption  config primary_key ","ActiveRecord Encryption  config "]}," ActiveRecord Encryption EnvelopeEncryptionKeyProvider decrypt_data_key":{"type":"method","name":"decrypt_data_key","children":[],"call":["ActiveRecord Encryption  cipher decrypt ","ActiveRecord Encryption  cipher "," primary_key_provider decryption_keys "," primary_key_provider ","encrypted_message headers encrypted_data_key ","encrypted_message headers ","encrypted_message headers encrypted_message headers encrypted_data_key  "]}," ActiveRecord Encryption EnvelopeEncryptionKeyProvider encrypt_data_key":{"type":"method","name":"encrypt_data_key","children":[],"call":["ActiveRecord Encryption  cipher encrypt "," active_primary_key secret "," active_primary_key ","ActiveRecord Encryption  cipher "]}," ActiveRecord Encryption EnvelopeEncryptionKeyProvider active_primary_key":{"type":"method","name":"active_primary_key","children":[],"call":[" primary_key_provider encryption_key "," primary_key_provider "]}," ActiveRecord Encryption EnvelopeEncryptionKeyProvider decryption_keys":{"type":"method","name":"decryption_keys","children":[],"call":["ActiveRecord Encryption Key  new "," decrypt_data_key "]}," ActiveRecord Encryption EnvelopeEncryptionKeyProvider encryption_key":{"type":"method","name":"encryption_key","children":[],"call":["key public_tags encrypted_data_key_id= "," active_primary_key id "," active_primary_key ","key public_tags ","ActiveRecord Encryption  config store_key_references ","ActiveRecord Encryption  config ","key public_tags encrypted_data_key= "," encrypt_data_key ","ActiveRecord Encryption Key  new tap ","ActiveRecord Encryption Key  new "," generate_random_secret "," generate_ generate_random_secret  "]}," ActiveRecord Encryption Encryptor forced_encoding_for_deterministic_encryption":{"type":"method","name":"forced_encoding_for_deterministic_encryption","children":[],"call":["ActiveRecord Encryption  config forced_encoding_for_deterministic_encryption ","ActiveRecord Encryption  config "]}," ActiveRecord Encryption Encryptor force_encoding_if_needed":{"type":"method","name":"force_encoding_if_needed","children":[],"call":["value encode "," forced_encoding_for_deterministic_encryption ","value encoding != ","value encoding "]}," ActiveRecord Encryption Encryptor uncompress":{"type":"method","name":"uncompress","children":[],"call":["uncompressed_data force_encoding ","data encoding ","Zlib Inflate  inflate tap ","Zlib Inflate  inflate "]}," ActiveRecord Encryption Encryptor uncompress_if_needed":{"type":"method","name":"uncompress_if_needed","children":[],"call":[" uncompress "]}," ActiveRecord Encryption Encryptor compress":{"type":"method","name":"compress","children":[],"call":["compressed_data force_encoding ","data encoding ","Zlib Deflate  deflate tap ","Zlib Deflate  deflate "]}," ActiveRecord Encryption Encryptor compress_if_worth_it":{"type":"method","name":"compress_if_worth_it","children":[],"call":[" compress ","string bytesize > ","string bytesize "]}," ActiveRecord Encryption Encryptor serializer":{"type":"method","name":"serializer","children":[],"call":["ActiveRecord Encryption  message_serializer "]}," ActiveRecord Encryption Encryptor deserialize_message":{"type":"method","name":"deserialize_message","children":[],"call":[" raise "," serializer load "," serializer ","message is_a? "]}," ActiveRecord Encryption Encryptor serialize_message":{"type":"method","name":"serialize_message","children":[],"call":[" serializer dump "," serializer "]}," ActiveRecord Encryption Encryptor build_encrypted_message":{"type":"method","name":"build_encrypted_message","children":[],"call":["message headers compressed= ","message headers ","message headers add ","key public_tags "," cipher encrypt tap "," cipher encrypt ","key secret "," cipher "," compress_if_worth_it ","key_provider encryption_key ","key_provider encryption_key  public_tags ","key_provider encryption_key  secret ","key_provider encryption_key _provider encryption_key_provider encryption_key  "]}," ActiveRecord Encryption Encryptor cipher":{"type":"method","name":"cipher","children":[],"call":["ActiveRecord Encryption  cipher "]}," ActiveRecord Encryption Encryptor validate_payload_type":{"type":"method","name":"validate_payload_type","children":[],"call":[" raise ","clear_text class ","clear_text is_a? "]}," ActiveRecord Encryption Encryptor default_key_provider":{"type":"method","name":"default_key_provider","children":[],"call":["ActiveRecord Encryption  key_provider "]}," ActiveRecord Encryption Encryptor encrypted?":{"type":"method","name":"encrypted?","children":[],"call":[" deserialize_message "]}," ActiveRecord Encryption Encryptor decrypt":{"type":"method","name":"decrypt","children":[],"call":[" raise ","ENCODING_ERRORS  + "," uncompress_if_needed ","message headers compressed ","message headers "," cipher decrypt ","keys collect "," cipher ","keys present? ","key_provider decryption_keys "," deserialize_message "," deserialize_message  headers compressed "," deserialize_message  headers ","key_provider decryption_keys  collect ","key_provider decryption_keys  present? ","key_provider decryption_key_provider decryption_keys  "," deserialize_ deserialize_message  "]}," ActiveRecord Encryption Encryptor encrypt":{"type":"method","name":"encrypt","children":[],"call":[" serialize_message "," build_encrypted_message "," validate_payload_type "," force_encoding_if_needed ","cipher_options [] "]}," ActiveRecord Encryption EncryptingOnlyEncryptor decrypt":{"type":"method","name":"decrypt","children":[],"call":[]}," ActiveRecord Encryption EncryptedFixtures process_preserved_original_columns":{"type":"method","name":"process_preserved_original_columns","children":[],"call":["fixture []= ","attribute_name to_s ","type serialize ","model_class type_for_attribute ","@clean_values [] ","source_attribute_name to_s ","model_class source_attribute_from_preserved_attribute ","model_class type_for_attribute  serialize ","model_class model_class type_for_attribute _for_attribute ","@@clean_values [] s [] ","model_class source_attribute_from_preserved_attribute  to_s "]}," ActiveRecord Encryption EncryptedFixtures encrypt_fixture_data":{"type":"method","name":"encrypt_fixture_data","children":[],"call":["fixture []= ","attribute_name to_s ","type serialize ","model_class type_for_attribute ","@clean_values []= ","fixture [] ","model_class type_for_attribute  serialize ","model_class model_class type_for_attribute _for_attribute ","@fixture [] s []= "]}," ActiveRecord Encryption EncryptedFixtures initialize":{"type":"method","name":"initialize","children":[],"call":[" process_preserved_original_columns "," encrypt_fixture_data "]}," ActiveRecord Encryption EncryptedAttributeType clean_text_scheme":{"type":"method","name":"clean_text_scheme","children":[],"call":["ActiveRecord Encryption Scheme  new ","ActiveRecord Encryption NullEncryptor  new "," downcase? "]}," ActiveRecord Encryption EncryptedAttributeType decryption_options":{"type":"method","name":"decryption_options","children":[],"call":["(pair\n  (sym :key_provider)\n  (send nil :key_provider)) compact "," key_provider "]}," ActiveRecord Encryption EncryptedAttributeType encryption_options":{"type":"method","name":"encryption_options","children":[],"call":["(pair\n  (sym :key_provider)\n  (send nil :key_provider)) compact "," deterministic? "," key_provider "]}," ActiveRecord Encryption EncryptedAttributeType support_unencrypted_data?":{"type":"method","name":"support_unencrypted_data?","children":[],"call":[" previous_type? ! "," previous_type? ","ActiveRecord Encryption  config support_unencrypted_data ","ActiveRecord Encryption  config "," scheme support_unencrypted_data? "," scheme "]}," ActiveRecord Encryption EncryptedAttributeType encryptor":{"type":"method","name":"encryptor","children":[],"call":["ActiveRecord Encryption  encryptor "]}," ActiveRecord Encryption EncryptedAttributeType encrypt":{"type":"method","name":"encrypt","children":[],"call":[" encryptor encrypt "," encryption_options "," encryptor "," with_context "]}," ActiveRecord Encryption EncryptedAttributeType serialize_with_current":{"type":"method","name":"serialize_with_current","children":[],"call":[" encrypt ","casted_value to_s ","casted_value nil? "," downcase? "," cast_type serialize "," cast_type "," cast_type serialize  to_s "," cast_type serialize  nil? "]}," ActiveRecord Encryption EncryptedAttributeType serialize_with_oldest":{"type":"method","name":"serialize_with_oldest","children":[],"call":[" previous_types first serialize "," previous_types first "," previous_types "]}," ActiveRecord Encryption EncryptedAttributeType serialize_with_oldest?":{"type":"method","name":"serialize_with_oldest?","children":[],"call":[" previous_types_without_clean_text present? "," previous_types_without_clean_text "," fixed? "]}," ActiveRecord Encryption EncryptedAttributeType handle_deserialize_error":{"type":"method","name":"handle_deserialize_error","children":[],"call":[" raise "," support_unencrypted_data? ","error is_a? "]}," ActiveRecord Encryption EncryptedAttributeType try_to_deserialize_with_previous_encrypted_types":{"type":"method","name":"try_to_deserialize_with_previous_encrypted_types","children":[],"call":[" handle_deserialize_error ","index == "," previous_types length - "," previous_types length "," previous_types ","type deserialize "," previous_types each with_index "," previous_types each "]}," ActiveRecord Encryption EncryptedAttributeType decrypt":{"type":"method","name":"decrypt","children":[],"call":[" try_to_deserialize_with_previous_encrypted_types "," handle_deserialize_error "," previous_types_without_clean_text blank? "," previous_types_without_clean_text "," encryptor decrypt "," decryption_options "," encryptor ","value nil? "," with_context ","@default == "]}," ActiveRecord Encryption EncryptedAttributeType previous_type?":{"type":"method","name":"previous_type?","children":[],"call":[]}," ActiveRecord Encryption EncryptedAttributeType build_previous_types_for":{"type":"method","name":"build_previous_types_for","children":[],"call":["EncryptedAttributeType  new ","schemes collect "]}," ActiveRecord Encryption EncryptedAttributeType previous_types_without_clean_text":{"type":"method","name":"previous_types_without_clean_text","children":[],"call":[" build_previous_types_for "," previous_schemes "]}," ActiveRecord Encryption EncryptedAttributeType previous_schemes_including_clean_text":{"type":"method","name":"previous_schemes_including_clean_text","children":[],"call":[" previous_schemes including compact "," previous_schemes including "," clean_text_scheme "," support_unencrypted_data? "," previous_schemes "]}," ActiveRecord Encryption EncryptedAttributeType previous_types":{"type":"method","name":"previous_types","children":[],"call":[" build_previous_types_for "," previous_schemes_including_clean_text ","@previous_types [] "," support_unencrypted_data? "]}," ActiveRecord Encryption EncryptedAttributeType changed_in_place?":{"type":"method","name":"changed_in_place?","children":[],"call":["old_value != "," deserialize ","raw_old_value nil? "," deserialize  != ","raw_ deserialize  nil? "]}," ActiveRecord Encryption EncryptedAttributeType serialize":{"type":"method","name":"serialize","children":[],"call":[" serialize_with_current "," serialize_with_oldest "," serialize_with_oldest? "]}," ActiveRecord Encryption EncryptedAttributeType deserialize":{"type":"method","name":"deserialize","children":[],"call":[" cast_type deserialize "," decrypt "," cast_type "]}," ActiveRecord Encryption EncryptedAttributeType initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Encryption EncryptableRecord cant_modify_encrypted_attributes_when_frozen":{"type":"method","name":"cant_modify_encrypted_attributes_when_frozen","children":[],"call":[" errors add ","attribute to_sym "," errors "," changed_attributes include? "," changed_attributes ","(send\n  (self) :class) each "," class "]}," ActiveRecord Encryption EncryptableRecord build_decrypt_attribute_assignments":{"type":"method","name":"build_decrypt_attribute_assignments","children":[],"call":["(send\n  (send nil :Array\n    (send\n      (send\n        (self) :class) :encrypted_attributes)) :collect) to_h ","type deserialize "," ciphertext_for "," type_for_attribute "," Array collect "," Array "," class encrypted_attributes "," class "," Array to_h "," type_for_attribute  deserialize ","  type_for_attribute _for_attribute "]}," ActiveRecord Encryption EncryptableRecord build_encrypt_attribute_assignments":{"type":"method","name":"build_encrypt_attribute_assignments","children":[],"call":[" [] "," Array index_with "," Array "," class encrypted_attributes "," class "]}," ActiveRecord Encryption EncryptableRecord has_encrypted_attributes?":{"type":"method","name":"has_encrypted_attributes?","children":[],"call":[" class encrypted_attributes present? "," class encrypted_attributes "," class "]}," ActiveRecord Encryption EncryptableRecord validate_encryption_allowed":{"type":"method","name":"validate_encryption_allowed","children":[],"call":[" raise ","ActiveRecord Encryption  context frozen_encryption? ","ActiveRecord Encryption  context "]}," ActiveRecord Encryption EncryptableRecord decrypt_attributes":{"type":"method","name":"decrypt_attributes","children":[],"call":[" update_columns ","ActiveRecord Encryption  without_encryption "," build_decrypt_attribute_assignments "," validate_encryption_allowed "," build_ build_decrypt_attribute_assignments  "]}," ActiveRecord Encryption EncryptableRecord encrypt_attributes":{"type":"method","name":"encrypt_attributes","children":[],"call":[" update_columns "," build_encrypt_attribute_assignments "," validate_encryption_allowed "]}," ActiveRecord Encryption EncryptableRecord decrypt":{"type":"method","name":"decrypt","children":[],"call":[" decrypt_attributes "," has_encrypted_attributes? "]}," ActiveRecord Encryption EncryptableRecord encrypt":{"type":"method","name":"encrypt","children":[],"call":[" encrypt_attributes "," has_encrypted_attributes? "]}," ActiveRecord Encryption EncryptableRecord ciphertext_for":{"type":"method","name":"ciphertext_for","children":[],"call":[" read_attribute_before_type_cast "," read_attribute_for_database "," encrypted_attribute? "]}," ActiveRecord Encryption EncryptableRecord encrypted_attribute?":{"type":"method","name":"encrypted_attribute?","children":[],"call":["ActiveRecord Encryption  encryptor encrypted? "," ciphertext_for ","ActiveRecord Encryption  encryptor "," read_attribute_before_type_cast "]}," ActiveRecord Encryption EncryptableRecord validate_column_size":{"type":"method","name":"validate_column_size","children":[],"call":[" validates_length_of "," columns_hash [] ","attribute_name to_s "," columns_hash "]}," ActiveRecord Encryption EncryptableRecord add_length_validation_for_encrypted_columns":{"type":"method","name":"add_length_validation_for_encrypted_columns","children":[],"call":[" validate_column_size "," encrypted_attributes "]}," ActiveRecord Encryption EncryptableRecord load_schema!":{"type":"method","name":"load_schema!","children":[],"call":[" add_length_validation_for_encrypted_columns ","ActiveRecord Encryption  config validate_column_size ","ActiveRecord Encryption  config "]}," ActiveRecord Encryption EncryptableRecord override_accessors_to_preserve_original":{"type":"method","name":"override_accessors_to_preserve_original","children":[],"call":[" include "," send "," define_method ","ActiveRecord Encryption  config support_unencrypted_data ! ","ActiveRecord Encryption  config support_unencrypted_data ","ActiveRecord Encryption  config "," encrypted_attribute? ","Module  new "]}," ActiveRecord Encryption EncryptableRecord preserve_original_encrypted":{"type":"method","name":"preserve_original_encrypted","children":[],"call":[" override_accessors_to_preserve_original "," encrypts "," raise "," column_names include? ! "," column_names include? ","original_attribute_name to_s "," column_names ","ActiveRecord Encryption  config support_unencrypted_data ! ","ActiveRecord Encryption  config support_unencrypted_data ","ActiveRecord Encryption  config ","(begin\n  (const nil :ORIGINAL_ATTRIBUTE_PREFIX)) to_sym ","(begin\n  (const nil :ORIGINAL_ATTRIBUTE_PREFIX)) to_sym  to_s "]}," ActiveRecord Encryption EncryptableRecord encrypt_attribute":{"type":"method","name":"encrypt_attribute","children":[],"call":["ActiveRecord Encryption  encrypted_attribute_was_declared "," preserve_original_encrypted ","attribute_scheme ignore_case? ","ActiveRecord Encryption EncryptedAttributeType  new "," attribute "," encrypted_attributes << ","name to_sym "," encrypted_attributes "," columns_hash [] ","name to_s "," columns_hash "," scheme_for ","attribute_ scheme_for  ignore_case? ","  scheme_for _for "]}," ActiveRecord Encryption EncryptableRecord global_previous_schemes_for":{"type":"method","name":"global_previous_schemes_for","children":[],"call":["scheme merge ","ActiveRecord Encryption  config previous_schemes collect ","ActiveRecord Encryption  config previous_schemes ","ActiveRecord Encryption  config ","scheme compatible_with? ","ActiveRecord Encryption  config previous_schemes filter_map "]}," ActiveRecord Encryption EncryptableRecord scheme_for":{"type":"method","name":"scheme_for","children":[],"call":["scheme previous_schemes= "," global_previous_schemes_for + ","ActiveRecord Encryption Scheme  new ","Array  wrap collect ","Array  wrap "," global_previous_schemes_for ","ActiveRecord Encryption Scheme  new tap "]}," ActiveRecord Encryption EncryptableRecord source_attribute_from_preserved_attribute":{"type":"method","name":"source_attribute_from_preserved_attribute","children":[],"call":["attribute_name to_s sub ","attribute_name to_s ","(str \"^\") match? ","attribute_name start_with? "]}," ActiveRecord Encryption EncryptableRecord deterministic_encrypted_attributes":{"type":"method","name":"deterministic_encrypted_attributes","children":[],"call":[" type_for_attribute deterministic? "," type_for_attribute "," encrypted_attributes "]}," ActiveRecord Encryption EncryptableRecord encrypts":{"type":"method","name":"encrypts","children":[],"call":[" encrypt_attribute ","names each "," scheme_for ","Set  new "," encrypted_attributes ","  scheme_for _for "]}," ActiveRecord Encryption DeterministicKeyProvider initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","passwords length > ","passwords length "," Array "," Array  length > "," Array  length "]}," ActiveRecord Encryption DerivedSecretKeyProvider initialize":{"type":"method","name":"initialize","children":[],"call":["Key  derive_from "," Array collect "," Array "," derive_key_from "]}," ActiveRecord Encryption Contexts current_custom_context":{"type":"method","name":"current_custom_context","children":[],"call":[" custom_contexts "]}," ActiveRecord Encryption Contexts context":{"type":"method","name":"context","children":[],"call":[" default_context "," current_custom_context "]}," ActiveRecord Encryption Contexts protecting_encrypted_data":{"type":"method","name":"protecting_encrypted_data","children":[],"call":[" with_encryption_context ","ActiveRecord Encryption EncryptingOnlyEncryptor  new "]}," ActiveRecord Encryption Contexts without_encryption":{"type":"method","name":"without_encryption","children":[],"call":[" with_encryption_context ","ActiveRecord Encryption NullEncryptor  new "]}," ActiveRecord Encryption Contexts with_encryption_context":{"type":"method","name":"with_encryption_context","children":[],"call":[" custom_contexts pop "," custom_contexts "," current_custom_context send "," current_custom_context ","properties each "," custom_contexts << "," default_context dup "," default_context "]}," ActiveRecord Encryption Context set_defaults":{"type":"method","name":"set_defaults","children":[],"call":[" message_serializer= ","ActiveRecord Encryption MessageSerializer  new "," encryptor= ","ActiveRecord Encryption Encryptor  new "," cipher= ","ActiveRecord Encryption Cipher  new "," key_generator= ","ActiveRecord Encryption KeyGenerator  new "," frozen_encryption= "]}," ActiveRecord Encryption Context initialize":{"type":"method","name":"initialize","children":[],"call":[" set_defaults "]}," ActiveRecord Encryption Configurable install_auto_filtered_parameters":{"type":"method","name":"install_auto_filtered_parameters","children":[],"call":["application config filter_parameters << ","application config filter_parameters ","application config ","ActiveRecord Encryption  config excluded_from_filter_parameters include? "," name ","ActiveRecord Encryption  config excluded_from_filter_parameters ","ActiveRecord Encryption  config ","ActiveRecord Encryption  on_encrypted_attribute_declared "]}," ActiveRecord Encryption Configurable encrypted_attribute_was_declared":{"type":"method","name":"encrypted_attribute_was_declared","children":[],"call":["block call "," encrypted_attribute_declaration_listeners "]}," ActiveRecord Encryption Configurable on_encrypted_attribute_declared":{"type":"method","name":"on_encrypted_attribute_declared","children":[],"call":[" encrypted_attribute_declaration_listeners << "," encrypted_attribute_declaration_listeners ","Concurrent Array  new "]}," ActiveRecord Encryption Configurable configure":{"type":"method","name":"configure","children":[],"call":["configurable_object send ","configurable_object respond_to? ","ActiveRecord Encryption  send ","(sym :context) each ","properties each "," context key_provider= ","ActiveRecord Encryption DerivedSecretKeyProvider  new "," context "," config key_derivation_salt= "," config "," config deterministic_key= "," config primary_key= ","ActiveRecord Encryption  context send ","ActiveRecord Encryption  context ","ActiveRecord Encryption  context respond_to? ","ActiveRecord Encryption  reset_default_context ","ActiveRecord Encryption  config send ","ActiveRecord Encryption  config ","ActiveRecord Encryption  config respond_to? ","properties []= ","properties [] nil? ","properties [] ","ActiveRecord Encryption  send  send ","ActiveRecord Encryption  send  respond_to? "]}," ActiveRecord Encryption Config add_previous_scheme":{"type":"method","name":"add_previous_scheme","children":[],"call":[" previous_schemes << ","ActiveRecord Encryption Scheme  new "," previous_schemes "]}," ActiveRecord Encryption Config set_defaults":{"type":"method","name":"set_defaults","children":[],"call":[" extend_queries= "," forced_encoding_for_deterministic_encryption= "," previous_schemes= "," excluded_from_filter_parameters= "," add_to_filter_parameters= "," validate_column_size= "," encrypt_fixtures= "," support_unencrypted_data= "," store_key_references= "," hash_digest_class= "]}," ActiveRecord Encryption Config previous=":{"type":"method","name":"previous=","children":[],"call":[" add_previous_scheme ","previous_schemes_properties each "]}," ActiveRecord Encryption Config initialize":{"type":"method","name":"initialize","children":[],"call":[" set_defaults "]}," ActiveRecord Encryption Cipher cipher_for":{"type":"method","name":"cipher_for","children":[],"call":["Aes256Gcm  new "]}," ActiveRecord Encryption Cipher try_to_decrypt_with_each":{"type":"method","name":"try_to_decrypt_with_each","children":[],"call":[" raise ","index == ","keys length - ","keys length "," cipher_for decrypt "," cipher_for ","keys each with_index ","keys each "]}," ActiveRecord Encryption Cipher iv_length":{"type":"method","name":"iv_length","children":[],"call":["Aes256Gcm  iv_length "]}," ActiveRecord Encryption Cipher key_length":{"type":"method","name":"key_length","children":[],"call":["Aes256Gcm  key_length "]}," ActiveRecord Encryption Cipher decrypt":{"type":"method","name":"decrypt","children":[],"call":["decrypted_text force_encoding ","encrypted_message headers encoding ","encrypted_message headers "," try_to_decrypt_with_each tap "," try_to_decrypt_with_each "," Array "]}," ActiveRecord Encryption Cipher encrypt":{"type":"method","name":"encrypt","children":[],"call":["message headers encoding= ","clean_text encoding name ","clean_text encoding ","message headers ","clean_text encoding == "," cipher_for encrypt tap "," cipher_for encrypt "," cipher_for "]}," ActiveRecord Encryption Cipher Aes256Gcm generate_deterministic_iv":{"type":"method","name":"generate_deterministic_iv","children":[],"call":["OpenSSL HMAC  digest [] ","ActiveRecord Encryption  cipher iv_length ","ActiveRecord Encryption  cipher ","OpenSSL HMAC  digest ","OpenSSL Digest SHA256  new "]}," ActiveRecord Encryption Cipher Aes256Gcm generate_iv":{"type":"method","name":"generate_iv","children":[],"call":["cipher random_iv "," generate_deterministic_iv "]}," ActiveRecord Encryption Cipher Aes256Gcm decrypt":{"type":"method","name":"decrypt","children":[],"call":[" raise ","decrypted_data << ","cipher final ","cipher update ","encrypted_data empty? ","cipher auth_data= ","cipher auth_tag= ","cipher iv= ","cipher key= ","cipher decrypt ","OpenSSL Cipher  new ","auth_tag bytes length != ","auth_tag bytes length ","auth_tag bytes ","auth_tag nil? ","encrypted_message headers auth_tag ","encrypted_message headers ","encrypted_message headers iv ","encrypted_message payload ","cipher update  << ","OpenSSL Cipher  new  final ","OpenSSL Cipher  new  update ","encrypted_message payload  empty? ","OpenSSL Cipher  new  auth_data= ","OpenSSL Cipher  new  auth_tag= ","cipher encrypted_message headers auth_tag = ","OpenSSL Cipher  new  iv= ","cipher encrypted_message headers iv = ","OpenSSL Cipher  new  key= ","OpenSSL Cipher  new  decrypt ","encrypted_message headers auth_tag  bytes length != ","encrypted_message headers auth_tag  bytes length ","encrypted_message headers auth_tag  bytes ","encrypted_message headers auth_tag  nil? ","encrypted_message headers encrypted_message headers auth_tag  ","encrypted_message headers encrypted_message headers iv  "]}," ActiveRecord Encryption Cipher Aes256Gcm encrypt":{"type":"method","name":"encrypt","children":[],"call":["message headers auth_tag= ","cipher auth_tag ","message headers ","message headers iv= ","ActiveRecord Encryption Message  new tap ","ActiveRecord Encryption Message  new ","encrypted_data << ","cipher final ","cipher update ","clear_text dup ","clear_text empty? ","cipher iv= "," generate_iv ","cipher key= ","cipher encrypt ","OpenSSL Cipher  new ","OpenSSL Cipher  new  auth_tag ","message headers  generate_iv = ","Act generate_iv eRecord Encryption Message  new tap ","Act generate_iv eRecord Encryption Message  new ","cipher update  << ","clear_text dup  << ","OpenSSL Cipher  new  final ","OpenSSL Cipher  new  update ","cipher  generate_iv = ","OpenSSL Cipher  new  iv= "," generate_ generate_iv  ","OpenSSL Cipher  new  key= ","OpenSSL Cipher  new  encrypt "]}," ActiveRecord Encryption Cipher Aes256Gcm initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Encryption Cipher Aes256Gcm iv_length":{"type":"method","name":"iv_length","children":[],"call":["OpenSSL Cipher  new iv_len ","OpenSSL Cipher  new "]}," ActiveRecord Encryption Cipher Aes256Gcm key_length":{"type":"method","name":"key_length","children":[],"call":["OpenSSL Cipher  new key_len ","OpenSSL Cipher  new "]}," ActiveRecord DisableJoinsAssociationRelation load":{"type":"method","name":"load","children":[],"call":["records compact! ","records_by_id [] ","id to_i "," ids flat_map "," ids ","record [] "," key ","records group_by "]}," ActiveRecord DisableJoinsAssociationRelation first":{"type":"method","name":"first","children":[],"call":[" records first "," records "," records limit first "," records limit "]}," ActiveRecord DisableJoinsAssociationRelation limit":{"type":"method","name":"limit","children":[],"call":[" records take "," records "]}," ActiveRecord DisableJoinsAssociationRelation initialize":{"type":"method","name":"initialize","children":[],"call":["ids uniq "]}," ActiveRecord DatabaseConfigurations HashConfig schema_file_type":{"type":"method","name":"schema_file_type","children":[],"call":[]}," ActiveRecord DatabaseConfigurations HashConfig database_tasks?":{"type":"method","name":"database_tasks?","children":[],"call":[" configuration_hash fetch ! ! "," configuration_hash fetch ! "," configuration_hash fetch "," configuration_hash "," replica? ! "," replica? "]}," ActiveRecord DatabaseConfigurations HashConfig schema_dump":{"type":"method","name":"schema_dump","children":[],"call":[" schema_file_type "," name "," primary? "," configuration_hash [] "," configuration_hash "," configuration_hash key? "," configuration_hash fetch ","  configuration_hash [] uration_hash [] ","  configuration_hash [] uration_hash ","  configuration_hash [] uration_hash key? ","  configuration_hash [] uration_hash fetch "]}," ActiveRecord DatabaseConfigurations HashConfig primary?":{"type":"method","name":"primary?","children":[],"call":["Base  configurations primary? "," name ","Base  configurations "]}," ActiveRecord DatabaseConfigurations HashConfig lazy_schema_cache_path":{"type":"method","name":"lazy_schema_cache_path","children":[],"call":[" default_schema_cache_path "," schema_cache_path "]}," ActiveRecord DatabaseConfigurations HashConfig default_schema_cache_path":{"type":"method","name":"default_schema_cache_path","children":[],"call":[]}," ActiveRecord DatabaseConfigurations HashConfig max_queue":{"type":"method","name":"max_queue","children":[],"call":[" max_threads * "," max_threads "]}," ActiveRecord DatabaseConfigurations HashConfig max_threads":{"type":"method","name":"max_threads","children":[],"call":["(or\n  (send\n    (send nil :configuration_hash) :[]\n    (sym :max_threads))\n  (send nil :pool)) to_i "," pool "," configuration_hash [] "," configuration_hash "]}," ActiveRecord DatabaseConfigurations HashConfig min_threads":{"type":"method","name":"min_threads","children":[],"call":["(or\n  (send\n    (send nil :configuration_hash) :[]\n    (sym :min_threads))\n  (int 0)) to_i "," configuration_hash [] "," configuration_hash "]}," ActiveRecord DatabaseConfigurations HashConfig socket":{"type":"method","name":"socket","children":[],"call":[" configuration_hash [] "," configuration_hash "]}," ActiveRecord DatabaseConfigurations DatabaseConfig max_queue":{"type":"method","name":"max_queue","children":[],"call":[" raise "]}," ActiveRecord DatabaseConfigurations DatabaseConfig max_threads":{"type":"method","name":"max_threads","children":[],"call":[" raise "]}," ActiveRecord DatabaseConfigurations DatabaseConfig min_threads":{"type":"method","name":"min_threads","children":[],"call":[" raise "]}," ActiveRecord Core strict_loading_n_plus_one_only?":{"type":"method","name":"strict_loading_n_plus_one_only?","children":[],"call":["@strict_loading_mode == "]}," ActiveRecord Core connection_class_for_self":{"type":"method","name":"connection_class_for_self","children":[],"call":[]}," ActiveRecord Core asynchronous_queries_tracker":{"type":"method","name":"asynchronous_queries_tracker","children":[],"call":[]}," ActiveRecord Core asynchronous_queries_session":{"type":"method","name":"asynchronous_queries_session","children":[],"call":[]}," ActiveRecord Core application_record_class?":{"type":"method","name":"application_record_class?","children":[],"call":[]}," ActiveRecord ConnectionHandling append_to_connected_to_stack":{"type":"method","name":"append_to_connected_to_stack","children":[],"call":[" connected_to_stack << "," connected_to_stack "," raise ","entry [] present? ","entry [] "," shard_swapping_prohibited? "]}," ActiveRecord ConnectionHandling shard_swapping_prohibited?":{"type":"method","name":"shard_swapping_prohibited?","children":[],"call":["ActiveSupport IsolatedExecutionState  [] "]}," ActiveRecord ConnectionHandling prohibit_shard_swapping":{"type":"method","name":"prohibit_shard_swapping","children":[],"call":["ActiveSupport IsolatedExecutionState  []= ","ActiveSupport IsolatedExecutionState  [] "]}," ActiveRecord ConnectionAdapters SQLite3Adapter type_map":{"type":"method","name":"type_map","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLite3Adapter remove_columns":{"type":"method","name":"remove_columns","children":[],"call":["column_names include? ","fk column ","definition foreign_keys delete_if ","definition foreign_keys ","column_names map ","definition remove_column ","column_names each "," alter_table ","column_names map  include? ","column_names map  map ","column_names map  each "]}," ActiveRecord ConnectionAdapters SQLite3Adapter all_foreign_keys_valid?":{"type":"method","name":"all_foreign_keys_valid?","children":[],"call":[" execute blank? "," execute "]}," ActiveRecord ConnectionAdapters SQLite3Adapter supports_concurrent_connections?":{"type":"method","name":"supports_concurrent_connections?","children":[],"call":["@memory_database ! "]}," ActiveRecord ConnectionAdapters SQLite3 Quoting type_cast":{"type":"method","name":"type_cast","children":[],"call":["value encode ","value encoding == ","value encoding ","value to_f "]}," ActiveRecord ConnectionAdapters SQLite3 DatabaseStatements high_precision_current_timestamp":{"type":"method","name":"high_precision_current_timestamp","children":[],"call":[]}," ActiveRecord ConnectionAdapters SchemaCache ignored_table?":{"type":"method","name":"ignored_table?","children":[],"call":["ignored === ","ActiveRecord  schema_cache_ignored_tables any? ","ActiveRecord  schema_cache_ignored_tables "]}," ActiveRecord ConnectionAdapters SchemaCache tables_to_cache":{"type":"method","name":"tables_to_cache","children":[],"call":[" ignored_table? "," connection data_sources reject "," connection data_sources "," connection ","connection data_sources reject ","connection data_sources "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter load_types_queries":{"type":"method","name":"load_types_queries","children":[],"call":["query + ","initializer query_conditions_for_array_types ","initializer query_conditions_for_known_type_types ","initializer query_conditions_for_known_type_names ","WHERE t.oid IN (%s) % ","oids join "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter create_enum":{"type":"method","name":"create_enum","children":[],"call":[" exec_query ","(send\n  (lvar :values) :map) join ","values map "," internal_exec_query "," quote_table_name ","scope [] "," quoted_scope "," quote "," quoted_scope  [] "," quoted_ quoted_scope  "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter enum_types":{"type":"method","name":"enum_types","children":[],"call":[" exec_query cast_values "," exec_query ","(send\n  (send\n    (send nil :internal_exec_query\n      (lvar :query)\n      (str \"SCHEMA\")\n      (hash\n        (pair\n          (sym :allow_retry)\n          (true))\n        (pair\n          (sym :materialize_transactions)\n          (false)))) :cast_values) :each_with_object\n  (hash)) to_a ","memo []= ","row last ","(lvar :schema) compact join ","(lvar :schema) compact ","schema == "," current_schema ","row [] "," internal_exec_query cast_values each_with_object "," internal_exec_query cast_values "," internal_exec_query "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter supports_virtual_columns?":{"type":"method","name":"supports_virtual_columns?","children":[],"call":[" database_version >= "," database_version "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter supports_deferrable_constraints?":{"type":"method","name":"supports_deferrable_constraints?","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements extract_foreign_key_deferrable":{"type":"method","name":"extract_foreign_key_deferrable","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaDumper extract_expression_for_virtual_column":{"type":"method","name":"extract_expression_for_virtual_column","children":[],"call":["column default_function inspect ","column default_function "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaDumper types":{"type":"method","name":"types","children":[],"call":["stream puts ","values split inspect ","values split ","name inspect ","types sort each ","types sort ","types any? ","@connection enum_types ","@connection enum_types  sort each ","@connection enum_types  sort ","@connection enum_types  any? ","@connection enum_@connection enum_types  "]}," ActiveRecord ConnectionAdapters PostgreSQL TableDefinition aliased_types":{"type":"method","name":"aliased_types","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQL ReferentialIntegrity all_foreign_keys_valid?":{"type":"method","name":"all_foreign_keys_valid?","children":[],"call":[" execute "," transaction "]}," ActiveRecord ConnectionAdapters PostgreSQL Quoting type_cast":{"type":"method","name":"type_cast","children":[],"call":[" encode_range "," encode_array ","value to_s "]}," ActiveRecord ConnectionAdapters PostgreSQL OID TypeMapInitializer query_conditions_for_array_types":{"type":"method","name":"query_conditions_for_array_types","children":[],"call":["(str \"WHERE\\n\") % ","known_type_oids join ","k is_a? ","@store keys reject ","@store keys "]}," ActiveRecord ConnectionAdapters PostgreSQL OID TypeMapInitializer query_conditions_for_known_type_types":{"type":"method","name":"query_conditions_for_known_type_types","children":[],"call":["(str \"WHERE\\n\") % ","known_type_types join "]}," ActiveRecord ConnectionAdapters PostgreSQL OID TypeMapInitializer query_conditions_for_known_type_names":{"type":"method","name":"query_conditions_for_known_type_names","children":[],"call":["(str \"WHERE\\n\") % ","known_type_names join ","@store keys map ","@store keys "]}," ActiveRecord ConnectionAdapters PostgreSQL OID TimestampWithTimeZone cast_value":{"type":"method","name":"cast_value","children":[],"call":["time getlocal ","time getutc "," is_utc? ","time is_a? ","value blank? ","time acts_like? ","time acts_like? ! "]}," ActiveRecord ConnectionAdapters PostgreSQL OID TimestampWithTimeZone type":{"type":"method","name":"type","children":[],"call":[" real_type_unless_aliased "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Timestamp type":{"type":"method","name":"type","children":[],"call":[" real_type_unless_aliased "]}," ActiveRecord ConnectionAdapters PostgreSQL OID DateTime real_type_unless_aliased":{"type":"method","name":"real_type_unless_aliased","children":[],"call":["ActiveRecord ConnectionAdapters PostgreSQLAdapter  datetime_type == ","ActiveRecord ConnectionAdapters PostgreSQLAdapter  datetime_type "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Date type_cast_for_schema":{"type":"method","name":"type_cast_for_schema","children":[],"call":[" Float INFINITY  -@ "]}," ActiveRecord ConnectionAdapters PostgreSQL DatabaseStatements high_precision_current_timestamp":{"type":"method","name":"high_precision_current_timestamp","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQL Column enum?":{"type":"method","name":"enum?","children":[],"call":[" type == "," type "]}," ActiveRecord ConnectionAdapters PostgreSQL Column has_default?":{"type":"method","name":"has_default?","children":[],"call":[" virtual? ! "," virtual? "]}," ActiveRecord ConnectionAdapters PostgreSQL Column virtual?":{"type":"method","name":"virtual?","children":[],"call":["@generated present? "]}," ActiveRecord ConnectionAdapters MySQL Quoting type_cast":{"type":"method","name":"type_cast","children":[],"call":["value getlocal ","value getutc ","ActiveRecord  default_timezone == ","ActiveRecord  default_timezone "," default_timezone == "," default_timezone "]}," ActiveRecord ConnectionAdapters MySQL Quoting quote_bound_value":{"type":"method","name":"quote_bound_value","children":[],"call":[" quote ","value to_s "," _quote ","value to_f to_s ","value to_f "]}," ActiveRecord ConnectionAdapters MySQL DatabaseStatements raw_execute":{"type":"method","name":"raw_execute","children":[],"call":["@connection query_options []= ","ActiveRecord  default_timezone ","@connection query_options "]}," ActiveRecord ConnectionAdapters MySQL DatabaseStatements high_precision_current_timestamp":{"type":"method","name":"high_precision_current_timestamp","children":[],"call":[]}," ActiveRecord ConnectionAdapters Column virtual?":{"type":"method","name":"virtual?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter raw_execute":{"type":"method","name":"raw_execute","children":[],"call":["@connection query ","ActiveSupport Dependencies  interlock permit_concurrent_loads ","ActiveSupport Dependencies  interlock "," log "," mark_transaction_written_if_write "," materialize_transactions "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter type_map":{"type":"method","name":"type_map","children":[],"call":[" emulate_booleans "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter field_ordered_value":{"type":"method","name":"field_ordered_value","children":[],"call":["Arel Nodes Descending  new ","Arel Nodes NamedFunction  new ","values reverse ","Arel Nodes  build_quoted ","values reverse map "]}," ActiveRecord ConnectionAdapters AbstractAdapter transform_query":{"type":"method","name":"transform_query","children":[],"call":["transformer call ","ActiveRecord  query_transformers each ","ActiveRecord  query_transformers "]}," ActiveRecord ConnectionAdapters AbstractAdapter field_ordered_value":{"type":"method","name":"field_ordered_value","children":[],"call":["Arel Nodes Ascending  new ","node else ","values length + ","values length ","node when then ","node when ","values each with_index ","values each ","Arel Nodes Case  new ","Arel Nodes Case  new  else ","Arel Nodes Case  new  when then ","Arel Nodes Case  new  when "]}," ActiveRecord ConnectionAdapters AbstractAdapter schema_version":{"type":"method","name":"schema_version","children":[],"call":[" migration_context current_version "," migration_context "]}," ActiveRecord ConnectionAdapters AbstractAdapter all_foreign_keys_valid?":{"type":"method","name":"all_foreign_keys_valid?","children":[],"call":[" check_all_foreign_keys_valid! "]}," ActiveRecord ConnectionAdapters AbstractAdapter create_enum":{"type":"method","name":"create_enum","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter async_enabled?":{"type":"method","name":"async_enabled?","children":[],"call":[" pool async_executor nil? ! "," pool async_executor nil? "," pool async_executor "," pool ","ActiveRecord  async_query_executor nil? ! ","ActiveRecord  async_query_executor nil? ","ActiveRecord  async_query_executor "," supports_concurrent_connections? "]}," ActiveRecord ConnectionAdapters AbstractAdapter supports_concurrent_connections?":{"type":"method","name":"supports_concurrent_connections?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter supports_deferrable_constraints?":{"type":"method","name":"supports_deferrable_constraints?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter shard":{"type":"method","name":"shard","children":[],"call":["@pool shard "]}," ActiveRecord ConnectionAdapters AbstractAdapter role":{"type":"method","name":"role","children":[],"call":["@pool role "]}," ActiveRecord ConnectionAdapters AbstractAdapter connection_class":{"type":"method","name":"connection_class","children":[],"call":["@pool connection_class "]}," ActiveRecord ConnectionAdapters AbstractAdapter check_if_write_query":{"type":"method","name":"check_if_write_query","children":[],"call":[" raise "," write_query? "," preventing_writes? "]}," ActiveRecord ConnectionAdapters AbstractAdapter with_instrumenter":{"type":"method","name":"with_instrumenter","children":[],"call":["Thread  handle_interrupt "]}," ActiveRecord ConnectionAdapters SchemaStatements distinct_relation_for_primary_key":{"type":"method","name":"distinct_relation_for_primary_key","children":[],"call":["relation limit_value= ","relation offset_value= ","relation where! ","relation primary_key ","relation none! ","limited_ids empty? "," select_rows map "," select_rows ","limited arel ","relation reselect distinct! ","relation reselect "," columns_for_distinct ","relation order_values "," visitor compile ","relation table [] ","relation table "," visitor "," Array zip to_h "," Array zip ","limited_ids transpose "," Array ","results last "," Array length "," Array map "," select_rows map  empty? ","relation reselect distinct! _ids empty? ","relation reselect distinct!  arel ","relation order_ columns_for_distinct  "," select_rows map  transpose ","relation reselect distinct! _ids transpose "]}," ActiveRecord ConnectionAdapters TableDefinition new_check_constraint_definition":{"type":"method","name":"new_check_constraint_definition","children":[],"call":["CheckConstraintDefinition  new "," name ","@conn check_constraint_options ","@conn check_constraint_@conn check_constraint_options  "]}," ActiveRecord ConnectionAdapters TableDefinition new_foreign_key_definition":{"type":"method","name":"new_foreign_key_definition","children":[],"call":["ForeignKeyDefinition  new "," name ","@conn foreign_key_options ","ActiveRecord Base  table_name_suffix ","ActiveRecord Base  table_name_prefix ","@conn foreign_key_@conn foreign_key_options  ","ActiveRecord Base  table_name_ActiveRecord Base  table_name_suffix  ","ActiveRecord Base  table_name_ActiveRecord Base  table_name_prefix  "]}," ActiveRecord ConnectionAdapters deferrable":{"type":"method","name":"deferrable","children":[],"call":[" options [] "," options "]}," ActiveRecord ConnectionAdapters Quoting quote_bound_value":{"type":"method","name":"quote_bound_value","children":[],"call":[" quote "," _quote "," cast_bound_value ","ActiveRecord  deprecator warn ","(str \"#quote_bound_value is deprecated and will be removed in Rails 7.2.\\n\") squish ","ActiveRecord  deprecator "]}," ActiveRecord ConnectionAdapters QueryCache lookup_sql_cache":{"type":"method","name":"lookup_sql_cache","children":[],"call":["@query_cache [] [] ","@query_cache [] ","ActiveSupport Notifications  instrument "," cache_notification_info ","@query_cache [] key? ","@lock synchronize ","@query_cache []= ","@query_cache delete ","binds empty? "]}," ActiveRecord ConnectionAdapters DatabaseStatements high_precision_current_timestamp":{"type":"method","name":"high_precision_current_timestamp","children":[],"call":[]}," ActiveRecord ConnectionAdapters ConnectionPool build_async_executor":{"type":"method","name":"build_async_executor","children":[],"call":["ActiveRecord  global_thread_pool_async_query_executor ","Concurrent ThreadPoolExecutor  new ","@db_config max_queue ","@db_config max_threads ","@db_config min_threads ","@db_config max_threads > ","ActiveRecord  async_query_executor "]}," ActiveRecord ConnectionAdapters ConnectionPool schedule_query":{"type":"method","name":"schedule_query","children":[],"call":["Thread  pass ","future_result execute_or_skip ","@async_executor post "]}," ActiveRecord ConnectionAdapters NullPool async_executor":{"type":"method","name":"async_executor","children":[],"call":[]}," ActiveRecord ConnectionAdapters NullPool remove":{"type":"method","name":"remove","children":[],"call":[]}," ActiveRecord ConnectionAdapters NullPool checkin":{"type":"method","name":"checkin","children":[],"call":[]}," ActiveRecord ConnectionAdapters NullPool connection_class":{"type":"method","name":"connection_class","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractPool lazily_set_schema_cache":{"type":"method","name":"lazily_set_schema_cache","children":[],"call":[" set_schema_cache ","SchemaCache  load_from "," db_config lazy_schema_cache_path "," db_config ","ActiveRecord  lazily_load_schema_cache "," set_schema_SchemaCache  load_from  "," db_config lazy_schema_SchemaCache  load_from _path ","ActiveRecord  lazily_load_schema_SchemaCache  load_from  "]}," ActiveRecord ConnectionAdapters ConnectionHandler StringConnectionOwner current_preventing_writes":{"type":"method","name":"current_preventing_writes","children":[],"call":[]}," ActiveRecord ConnectionAdapters ConnectionHandler StringConnectionOwner primary_class?":{"type":"method","name":"primary_class?","children":[],"call":[]}," ActiveRecord ConnectionAdapters ConnectionHandler StringConnectionOwner initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord AttributeMethods Dirty attribute_names_for_partial_inserts":{"type":"method","name":"attribute_names_for_partial_inserts","children":[],"call":[" attribute_changed? ! "," attribute_changed? "," column_for_attribute default_function "," column_for_attribute "," attribute_names reject "," attribute_names "," changed_attribute_names_to_save "," partial_inserts? "]}," ActiveRecord AttributeMethods Dirty attribute_names_for_partial_updates":{"type":"method","name":"attribute_names_for_partial_updates","children":[],"call":[" attribute_names "," changed_attribute_names_to_save "," partial_updates? "]}," ActiveRecord AttributeMethods Dirty ClassMethods partial_writes=":{"type":"method","name":"partial_writes=","children":[],"call":[" partial_updates= "," partial_inserts= ","ActiveSupport Deprecation  warn ","(str \"            `ActiveRecord::Base.partial_writes=` is deprecated and will be removed in Rails 7.1.\\n\") squish "]}," ActiveRecord AttributeMethods Dirty ClassMethods partial_writes?":{"type":"method","name":"partial_writes?","children":[],"call":[" partial_inserts? "," partial_updates? ","ActiveSupport Deprecation  warn ","(str \"            `ActiveRecord::Base.partial_writes?` is deprecated and will be removed in Rails 7.1.\\n\") squish "]}," ActiveRecord AttributeMethods Dirty ClassMethods partial_writes":{"type":"method","name":"partial_writes","children":[],"call":[" partial_inserts "," partial_updates ","ActiveSupport Deprecation  warn ","(str \"            ActiveRecord::Base.partial_writes is deprecated and will be removed in Rails 7.1.\\n\") squish "]}," ActiveRecord AttributeMethods BeforeTypeCast attributes_for_database":{"type":"method","name":"attributes_for_database","children":[],"call":["@attributes values_for_database "]}," ActiveRecord AsynchronousQueriesTracker finalize_session":{"type":"method","name":"finalize_session","children":[],"call":["@current_session finalize "]}," ActiveRecord AsynchronousQueriesTracker start_session":{"type":"method","name":"start_session","children":[],"call":["Session  new "]}," ActiveRecord AsynchronousQueriesTracker initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord AsynchronousQueriesTracker complete":{"type":"method","name":"complete","children":[],"call":["asynchronous_queries_tracker finalize_session "]}," ActiveRecord AsynchronousQueriesTracker run":{"type":"method","name":"run","children":[],"call":["ActiveRecord Base  asynchronous_queries_tracker start_session ","ActiveRecord Base  asynchronous_queries_tracker "]}," ActiveRecord AsynchronousQueriesTracker install_executor_hooks":{"type":"method","name":"install_executor_hooks","children":[],"call":["executor register_hook "]}," ActiveRecord AsynchronousQueriesTracker Session finalize":{"type":"method","name":"finalize","children":[],"call":[]}," ActiveRecord AsynchronousQueriesTracker Session active?":{"type":"method","name":"active?","children":[],"call":[]}," ActiveRecord AsynchronousQueriesTracker Session initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord AsynchronousQueriesTracker NullSession finalize":{"type":"method","name":"finalize","children":[],"call":[]}," ActiveRecord AsynchronousQueriesTracker NullSession active?":{"type":"method","name":"active?","children":[],"call":[]}," ActiveRecord HasManyThroughAssociationNotFoundError corrections":{"type":"method","name":"corrections","children":[],"call":["DidYouMean SpellChecker  new correct "," reflection options [] to_s "," reflection options [] "," reflection options "," reflection ","DidYouMean SpellChecker  new "," reflection name to_s "," reflection name "," owner_class reflections keys "," owner_class reflections "," owner_class "]}," ActiveRecord InverseOfAssociationRecursiveError initialize":{"type":"method","name":"initialize","children":[],"call":["reflection class_name ","reflection options [] inspect ","reflection options [] ","reflection options ","reflection name "]}," ActiveRecord InverseOfAssociationNotFoundError corrections":{"type":"method","name":"corrections","children":[],"call":["DidYouMean SpellChecker  new correct "," reflection options [] to_s "," reflection options [] "," reflection options "," reflection ","DidYouMean SpellChecker  new "," associated_class reflections keys "," associated_class reflections "," associated_class "]}," ActiveRecord AssociationNotFoundError corrections":{"type":"method","name":"corrections","children":[],"call":["DidYouMean SpellChecker  new correct "," association_name ","DidYouMean SpellChecker  new "," record class reflections keys "," record class reflections "," record class "," record "]}," ActiveRecord Associations Preloader loaders":{"type":"method","name":"loaders","children":[],"call":[" branches flat_map "," branches "]}," ActiveRecord Associations Preloader branches":{"type":"method","name":"branches","children":[],"call":["@tree children "]}," ActiveRecord Associations Preloader call":{"type":"method","name":"call","children":[],"call":[" loaders ","Batch  new call ","Batch  new "]}," ActiveRecord Associations Preloader empty?":{"type":"method","name":"empty?","children":[],"call":[" records length == "," records length "," records "," associations nil? "," associations "]}," ActiveRecord Associations Preloader ThroughAssociation source_records_by_owner":{"type":"method","name":"source_records_by_owner","children":[],"call":[" source_preloaders map reduce "," source_preloaders map "," source_preloaders "]}," ActiveRecord Associations Preloader ThroughAssociation data_available?":{"type":"method","name":"data_available?","children":[],"call":[" source_preloaders all? "," source_preloaders "," through_preloaders all? "," through_preloaders "," loaded? "," owners all? "," owners "]}," ActiveRecord Associations Preloader ThroughAssociation future_classes":{"type":"method","name":"future_classes","children":[],"call":["(send\n  (lvar :through_classes) :+\n  (lvar :source_classes)) uniq ","through_classes + ","(send\n  (send\n    (send nil :source_reflection) :chain) :reject) map ","reflection polymorphic? ","reflection respond_to? "," source_reflection chain reject "," source_reflection chain "," source_reflection "," through_preloaders flat_map "," through_preloaders "," source_preloaders flat_map uniq "," source_preloaders flat_map "," source_preloaders "," through_preloaders all? "," run? "," data_available? ","(send\n  (lvar :through_classes) :+\n  (lvar :(send\n  (send\n    (send nil :source_reflection) :chain) :reject) map )) uniq ","(send\n  (lvar : through_preloaders flat_map ) :+\n  (lvar :source_classes)) uniq "," through_preloaders flat_map  + "]}," ActiveRecord Associations Preloader ThroughAssociation runnable_loaders":{"type":"method","name":"runnable_loaders","children":[],"call":[" through_preloaders flat_map "," through_preloaders "," source_preloaders flat_map "," source_preloaders "," through_preloaders all? "," data_available? "]}," ActiveRecord Associations Preloader Branch preloader_for":{"type":"method","name":"preloader_for","children":[],"call":["reflection options [] ","reflection options "]}," ActiveRecord Associations Preloader Branch build_children":{"type":"method","name":"build_children","children":[],"call":["Branch  new "," scope "," associate_by_default "," Array flat_map "," Array ","Array  wrap flat_map ","Array  wrap "]}," ActiveRecord Associations Preloader Branch loaders":{"type":"method","name":"loaders","children":[],"call":[" preloaders_for_reflection "," grouped_records flat_map "," grouped_records "]}," ActiveRecord Associations Preloader Branch polymorphic?":{"type":"method","name":"polymorphic?","children":[],"call":["reflection options [] ","reflection options ","record class _reflect_on_association "," association ","record class "," source_records any? "," source_records "," root? ","record class _reflect_on_association  options [] ","record class _reflect_on_association  options "]}," ActiveRecord Associations Preloader Branch preloaders_for_reflection":{"type":"method","name":"preloaders_for_reflection","children":[],"call":[" preloader_for new "," associate_by_default "," scope "," preloader_for ","(send\n  (lvar :reflection_records) :group_by) map ","reflection join_scopes inject ","reflection join_scopes ","klass predicate_builder ","klass arel_table ","reflection scope arity != ","reflection scope arity ","reflection scope ","record association klass ","record association "," association ","reflection_records group_by ","record association klass  predicate_builder ","record association klass  arel_table ","record association record association klass  "]}," ActiveRecord Associations Preloader Branch grouped_records":{"type":"method","name":"grouped_records","children":[],"call":["(or-asgn\n  (send\n    (lvar :h) :[]\n    (lvar :reflection))\n  (array)) << ","h [] ","record association klass ! ","record association klass ","record association "," association ","reflection ! ","record class _reflect_on_association ","record class "," source_records each "," source_records "," parent polymorphic? "," parent "," root? ! "," root? ","(or-asgn\n  (send\n    (lvar :h) :[]\n    (lvar :record class _reflect_on_association ))\n  (array)) << ","record class _reflect_on_association  ! "]}," ActiveRecord Associations Preloader Branch runnable_loaders":{"type":"method","name":"runnable_loaders","children":[],"call":[" loaders flat_map reject "," loaders flat_map "," loaders "]}," ActiveRecord Associations Preloader Branch done?":{"type":"method","name":"done?","children":[],"call":["@loaders all? "," root? "]}," ActiveRecord Associations Preloader Branch preloaded_records":{"type":"method","name":"preloaded_records","children":[],"call":[" loaders flat_map "," loaders "]}," ActiveRecord Associations Preloader Branch source_records":{"type":"method","name":"source_records","children":[],"call":["@parent preloaded_records "]}," ActiveRecord Associations Preloader Branch root?":{"type":"method","name":"root?","children":[],"call":[" parent nil? "," parent "]}," ActiveRecord Associations Preloader Branch likely_reflections":{"type":"method","name":"likely_reflections","children":[],"call":["parent_klass _reflect_on_association ","parent_classes filter_map "," parent target_classes "," parent "," parent target_classes  filter_map "]}," ActiveRecord Associations Preloader Branch target_classes":{"type":"method","name":"target_classes","children":[],"call":[" likely_reflections reject map uniq "," likely_reflections reject map "," likely_reflections reject "," likely_reflections "," loaders map uniq "," loaders map "," loaders "," parent done? "," parent "," preloaded_records map uniq "," preloaded_records map "," preloaded_records "," done? "]}," ActiveRecord Associations Preloader Branch immediate_future_classes":{"type":"method","name":"immediate_future_classes","children":[],"call":["(send\n  (send\n    (send nil :likely_reflections) :reject\n    (block-pass\n      (sym :polymorphic?))) :flat_map) uniq ","reflection chain map ","reflection chain "," likely_reflections reject flat_map "," likely_reflections reject "," likely_reflections "," loaders flat_map uniq "," loaders flat_map "," loaders "," parent done? "," parent "]}," ActiveRecord Associations Preloader Branch future_classes":{"type":"method","name":"future_classes","children":[],"call":["(send\n  (send nil :immediate_future_classes) :+\n  (send\n    (send nil :children) :flat_map\n    (block-pass\n      (sym :future_classes)))) uniq "," immediate_future_classes + "," children flat_map "," children "," immediate_future_classes "]}," ActiveRecord Associations Preloader Branch initialize":{"type":"method","name":"initialize","children":[],"call":[" build_children "]}," ActiveRecord Associations Preloader Batch group_and_load_similar":{"type":"method","name":"group_and_load_similar","children":[],"call":["query load_records_in_batch ","loaders grep_v group_by each_pair ","loaders grep_v group_by ","loaders grep_v "]}," ActiveRecord Associations Preloader Batch call":{"type":"method","name":"call","children":[],"call":["in_progress + ","finished flat_map ","branches partition ","target_loaders each "," group_and_load_similar ","target_loaders empty? ","future_tables include? ","l table_name ","loaders reject ","(send\n  (lvar :branches) :flat_map) map uniq ","(send\n  (lvar :branches) :flat_map) map ","branch future_classes - ","branch runnable_loaders map ","branch runnable_loaders ","branch future_classes ","branches flat_map ","loaders any? ","loader associate_records_from_unscoped ","@available_records [] ","loader klass base_class ","loader klass ","loaders each ","branches empty? ","@preloaders flat_map ","already_loaded each ","already_loaded any? ","loaders select ","in_progress +  partition ","@preloaders flat_map  partition ","target_branches flat_map  each ","target_branches flat_map  empty? ","(send\n  (lvar :branches) :flat_map) map uniq  include? ","branches flat_map  reject ","(send\n  (lvar :in_progress + ) :flat_map) map uniq ","(send\n  (lvar :@preloaders flat_map ) :flat_map) map uniq ","(send\n  (lvar :in_progress + ) :flat_map) map ","(send\n  (lvar :@preloaders flat_map ) :flat_map) map ","branch runnable_branches flat_map  map ","branch runnable_branches flat_map  ","in_progress +  flat_map ","@preloaders flat_map  flat_map ","branches flat_map  any? ","branches flat_map  each ","in_progress +  empty? ","@preloaders flat_map  empty? ","@prebranches flat_map  flat_map ","loaders select  each ","loaders select  any? ","branches flat_map  select "]}," ActiveRecord Associations Preloader Batch initialize":{"type":"method","name":"initialize","children":[],"call":["r class base_class ","r class ","available_records flatten group_by ","available_records flatten ","preloaders reject "]}," ActiveRecord Associations Preloader Association cascade_strict_loading":{"type":"method","name":"cascade_strict_loading","children":[],"call":["scope strict_loading "," preload_scope "]}," ActiveRecord Associations Preloader Association associate_records_from_unscoped":{"type":"method","name":"associate_records_from_unscoped","children":[],"call":["association set_inverse_instance ","i == ","association target= ","owner association "," reflection name "," reflection "," owners_by_key [] "," convert_key ","record [] "," association_key_name "," owners_by_key ","(send\n  (lvar :unscoped_records) :select) each ","r [] present? ","r [] ","unscoped_records select "," reflection collection? "," preload_scope empty_scope? ! "," preload_scope empty_scope? "," preload_scope "," reflection_scope empty_scope? ! "," reflection_scope empty_scope? "," reflection_scope ","unscoped_records empty? ","unscoped_records nil? ","unscoped_records each "," derive_key ","owner association  set_inverse_instance ","owner association  target= ","owner owner association  ","  owners_by_key [] _by_key [] "," owner association _key_name ","  owners_by_key [] _by_key "]}," ActiveRecord Associations Preloader Association set_inverse":{"type":"method","name":"set_inverse","children":[],"call":["association set_inverse_instance ","owners first association "," reflection name "," reflection ","owners first "," owners_by_key [] "," convert_key ","record [] "," association_key_name "," owners_by_key "," derive_key ","owners first association  set_inverse_instance ","owners first owners first association  "," owners_by_key []  first association "," owners_by_key []  first ","  owners_by_key [] _by_key [] "," owners first association _key_name ","  owners_by_key [] _by_key "]}," ActiveRecord Associations Preloader Association target_for":{"type":"method","name":"target_for","children":[],"call":["Array  wrap ","owner association target ","owner association "," reflection name "," reflection "]}," ActiveRecord Associations Preloader Association loaded?":{"type":"method","name":"loaded?","children":[],"call":["owner association loaded? ","owner association "," reflection name "," reflection "]}," ActiveRecord Associations Preloader Association loader_query":{"type":"method","name":"loader_query","children":[],"call":["LoaderQuery  new "," association_key_name "," scope "]}," ActiveRecord Associations Preloader Association run?":{"type":"method","name":"run?","children":[],"call":[]}," ActiveRecord Associations Preloader Association runnable_loaders":{"type":"method","name":"runnable_loaders","children":[],"call":[]}," ActiveRecord Associations Preloader Association future_classes":{"type":"method","name":"future_classes","children":[],"call":[" run? "," already_loaded? "]}," ActiveRecord Associations Preloader Association table_name":{"type":"method","name":"table_name","children":[],"call":["@klass table_name "]}," ActiveRecord Associations Preloader Association LoaderRecords already_loaded_records":{"type":"method","name":"already_loaded_records","children":[],"call":[" already_loaded_records_by_key values flatten "," already_loaded_records_by_key values "," already_loaded_records_by_key "]}," ActiveRecord Associations Preloader Association LoaderRecords load_records":{"type":"method","name":"load_records","children":[],"call":["l set_inverse "," loaders each "," loaders "," loader_query load_records_for_keys "," keys_to_load "," loader_query "]}," ActiveRecord Associations Preloader Association LoaderRecords populate_keys_to_load_and_already_loaded_records":{"type":"method","name":"populate_keys_to_load_and_already_loaded_records","children":[],"call":["@keys_to_load subtract "," already_loaded_records_by_key keys "," already_loaded_records_by_key "," keys_to_load << "," keys_to_load "," already_loaded_records_by_key []= ","loader target_for ","loader loaded? ","owners find ","loader owners_by_key each ","loader owners_by_key "," loaders each "," loaders "]}," ActiveRecord Associations Preloader Association LoaderRecords records":{"type":"method","name":"records","children":[],"call":[" load_records + "," already_loaded_records "," load_records "]}," ActiveRecord Associations Preloader Association LoaderRecords initialize":{"type":"method","name":"initialize","children":[],"call":[" populate_keys_to_load_and_already_loaded_records ","Set  new "]}," ActiveRecord Associations Preloader Association LoaderQuery load_records_for_keys":{"type":"method","name":"load_records_for_keys","children":[],"call":[" scope where load "," scope where "," association_key_name "," scope ","(send\n  (send nil :association_key_name) :is_a?\n  (const nil :Array)) load ","constraints [] << ","constraints [] "," association_key_name zip each "," association_key_name zip ","keys each_with_object ","hsh []= ","Set  new ","Hash  new "," association_key_name is_a? "]}," ActiveRecord Associations Preloader Association LoaderQuery load_records_in_batch":{"type":"method","name":"load_records_in_batch","children":[],"call":["loader run ","loader load_records ","loaders each "," records_for "]}," ActiveRecord Associations Preloader Association LoaderQuery records_for":{"type":"method","name":"records_for","children":[],"call":["LoaderRecords  new records ","LoaderRecords  new ","l set_inverse ","loaders each "," scope where load "," scope where "," association_key_name "," scope ","loaders flat_map uniq ","loaders flat_map "]}," ActiveRecord Associations Preloader Association LoaderQuery hash":{"type":"method","name":"hash","children":[],"call":["(send nil :association_key_name) hash "," scope values_for_queries "," scope "," scope table_name "," association_key_name "]}," ActiveRecord Associations Preloader Association LoaderQuery eql?":{"type":"method","name":"eql?","children":[],"call":[" scope values_for_queries == ","other scope values_for_queries ","other scope "," scope values_for_queries "," scope "," scope table_name == ","other scope table_name "," scope table_name "," association_key_name == ","other association_key_name "," association_key_name "]}," ActiveRecord Associations Preloader Association LoaderQuery initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Associations DisableJoinsAssociationScope add_constraints":{"type":"method","name":"add_constraints","children":[],"call":["scope where_clause ","split_scope where_clause ","DisableJoinsAssociationRelation  create ","scope klass ","scope order_values empty? ","scope order_values ","scope order_values= ","item order_values | ","item order_values ","item where_clause ","scope unscope! ","item unscope_values "," eval_scope ","reflection constraints inject ","reflection constraints ","scope merge! ","relation except ","reflection klass scope_for_association ","reflection klass ","reflection build_scope where ","reflection build_scope ","reflection aliased_table ","reflection build_scope where  where_clause ","DisableJoinsAssociationRelation  create  where_clause ","split_reflection build_scope where  where_clause ","reflection build_scope where  klass ","reflection build_scope where  order_values empty? ","reflection build_scope where  order_values ","reflection build_scope where  order_values= "," eval_scope  order_values | "," eval_scope  order_values "," eval_scope  where_clause ","reflection build_scope where  unreflection build_scope where ! "," eval_scope  unscope_values ","item unreflection build_scope where _values "," eval_reflection build_scope where  ","reflection build_scope where  merge! ","reflection klass scope_for_association  except ","reflection klass reflection build_scope where _for_association ","reflection build_reflection build_scope where  where ","reflection build_reflection build_scope where  "]}," ActiveRecord Associations DisableJoinsAssociationScope last_scope_chain":{"type":"method","name":"last_scope_chain","children":[],"call":["records order_values any? ","records order_values ","records pluck ","next_reflection join_foreign_key "," add_constraints ","reflection join_primary_key ","reverse_chain inject ","owner _read_attribute ","first_item join_foreign_key ","reverse_chain shift "," add_constraints  order_values any? "," add_constraints  order_values "," add_constraints  pluck ","next_reflection join_next_reflection join_foreign_key  ","next_reflection join_foreign_reflection join_primary_key  ","reflection join_primary_reflection join_primary_key  ","first_item join_next_reflection join_foreign_key  ","first_item join_foreign_reflection join_primary_key  ","reverse_chain shift  join_foreign_key "]}," ActiveRecord Associations DisableJoinsAssociationScope scope":{"type":"method","name":"scope","children":[],"call":[" add_constraints ","last_reflection join_primary_key "," last_scope_chain "," get_chain reverse "," get_chain ","unscoped alias_tracker ","association klass unscoped ","association klass ","association owner ","association reflection ","association klass unscoped  alias_tracker ","association klass association klass unscoped  ","association association owner  "]}," Builder BelongsTo define_change_tracking_methods":{"type":"method","name":"define_change_tracking_methods","children":[],"call":[]}," Builder Association define_change_tracking_methods":{"type":"method","name":"define_change_tracking_methods","children":[],"call":[]}," ActiveRecord Associations BelongsToPolymorphicAssociation saved_change_to_target?":{"type":"method","name":"saved_change_to_target?","children":[],"call":[" owner saved_change_to_attribute? "," reflection foreign_type "," reflection "," owner "]}," ActiveRecord Associations BelongsToPolymorphicAssociation target_previously_changed?":{"type":"method","name":"target_previously_changed?","children":[],"call":[" owner attribute_previously_changed? "," reflection foreign_type "," reflection "," owner "]}," ActiveRecord Associations BelongsToAssociation saved_change_to_target?":{"type":"method","name":"saved_change_to_target?","children":[],"call":[" owner saved_change_to_attribute? "," reflection foreign_key "," reflection "," owner "]}," ActiveRecord Associations BelongsToAssociation target_previously_changed?":{"type":"method","name":"target_previously_changed?","children":[],"call":[" owner attribute_previously_changed? "," reflection foreign_key "," reflection "," owner "]}," ActiveRecord Associations Association violates_strict_loading?":{"type":"method","name":"violates_strict_loading?","children":[],"call":[" owner strict_loading_n_plus_one_only? ! "," owner strict_loading_n_plus_one_only? "," owner "," owner strict_loading? "," reflection strict_loading? "," reflection "," reflection options key? "," reflection options "," owner validation_context nil? "," owner validation_context "]}," ActiveRecord Associations Association ensure_klass_exists!":{"type":"method","name":"ensure_klass_exists!","children":[],"call":[" klass "]}," ActiveRecord QueryLogs inline_tag_content":{"type":"method","name":"inline_tag_content","children":[],"call":[" inline_tags join "," inline_tags "]}," ActiveRecord QueryLogs context":{"type":"method","name":"context","children":[],"call":["NullObject  new ","Hash  new ","Thread  current [] ","Thread  current "]}," ActiveRecord QueryLogs inline_tags":{"type":"method","name":"inline_tags","children":[],"call":[" context [] "," context "," context []= "," context [] nil? "]}," ActiveRecord QueryLogs inline_comment":{"type":"method","name":"inline_comment","children":[],"call":[" escape_sql_comment "," inline_tag_content "," inline_tags present? "," inline_tags "]}," ActiveRecord QueryLogs comments":{"type":"method","name":"comments","children":[],"call":["(send nil :comment) compact "," inline_comment "," comment "]}," ActiveRecord QueryLogs with_tag":{"type":"method","name":"with_tag","children":[],"call":[" inline_tags pop "," inline_tags "," block_given? "," inline_tags push "]}," ActiveRecord QueryLogs set_context":{"type":"method","name":"set_context","children":[],"call":[" update_context "," block_given? ","keys zip to_h ","keys zip "," context values_at "," context ","options keys ","options keys  zip to_h ","options keys  zip ","options options keys  "]}," ActiveRecord QueryLogs update_context":{"type":"method","name":"update_context","children":[],"call":[" cached_comment= "," context merge! ","options symbolize_keys "," context "]}," ActiveRecord QueryLogs NullObject respond_to_missing?":{"type":"method","name":"respond_to_missing?","children":[],"call":[]}," ActiveRecord QueryLogs NullObject nil?":{"type":"method","name":"nil?","children":[],"call":[]}," ActiveRecord QueryLogs NullObject method_missing":{"type":"method","name":"method_missing","children":[],"call":["NullObject  new "]}," ActiveRecord Associations Preloader Association fetch_from_preloaded_records":{"type":"method","name":"fetch_from_preloaded_records","children":[],"call":[" records_by_owner flat_map "," records_by_owner "," Array ","owner association target ","owner association "," reflection name "," reflection "," owners index_with "," owners "]}," ActiveRecord Associations Preloader Association already_loaded?":{"type":"method","name":"already_loaded?","children":[],"call":["o association loaded? ","o association "," reflection name "," reflection "," owners all? "," owners "]}," ActiveRecord Associations Preloader Association ensure_loaded":{"type":"method","name":"ensure_loaded","children":[],"call":[" load_records "," fetch_from_preloaded_records "," already_loaded? "]}," ActiveRecord Associations Preloader Association data_available?":{"type":"method","name":"data_available?","children":[],"call":[" already_loaded? "]}," ActiveRecord ConnectionAdapters SQLite3Adapter has_default_function?":{"type":"method","name":"has_default_function?","children":[],"call":["(str \"\\\\w+\\\\(.*\\\\)|CURRENT_TIME|CURRENT_DATE|CURRENT_TIMESTAMP\") match? ","default_value ! "]}," ActiveRecord ConnectionAdapters SQLite3Adapter extract_default_function":{"type":"method","name":"extract_default_function","children":[],"call":[" has_default_function? "]}," ActiveRecord ConnectionAdapters SQLite3Adapter extract_value_from_default":{"type":"method","name":"extract_value_from_default","children":[],"call":["1 gsub ","(nth-ref 1) pack "]}," ActiveRecord ConnectionAdapters SQLite3 Quoting quote_default_expression":{"type":"method","name":"quote_default_expression","children":[],"call":["value match? ","value call ","value is_a? ","value call  match? ","value call  call ","value call  is_a? "]}," ActiveRecord ConnectionAdapters SchemaStatements expression_column_name?":{"type":"method","name":"expression_column_name?","children":[],"call":["(str \"\\\\W\") match? ","column_name is_a? "]}," ActiveRecord Schema []":{"type":"method","name":"[]","children":[],"call":[]}," ActiveRecord Schema Definition define":{"type":"method","name":"define","children":[],"call":["ActiveRecord InternalMetadata  []= "," connection migration_context current_environment "," connection migration_context "," connection ","ActiveRecord InternalMetadata  create_table "," connection assume_migrated_upto_version ","info [] "," connection schema_migration create_table "," connection schema_migration ","info [] present? "," instance_eval "," connection internal_metadata create_table_and_set_flags "," connection internal_metadata "]}," ActiveRecord Schema Definition ClassMethods define":{"type":"method","name":"define","children":[],"call":[" new define "," new "]}," ActiveRecord QueryMethods WhereChain scope_association_reflection":{"type":"method","name":"scope_association_reflection","children":[],"call":[" raise ","ArgumentError  new ","@scope name ","@scope klass _reflect_on_association ","@scope klass "]}," ActiveRecord Encryption Configurable install_auto_filtered_parameters_hook":{"type":"method","name":"install_auto_filtered_parameters_hook","children":[],"call":["application config filter_parameters << ","application config filter_parameters ","application config ","ActiveRecord Encryption  config excluded_from_filter_parameters include? ","ActiveRecord Encryption  config excluded_from_filter_parameters ","ActiveRecord Encryption  config ","ActiveRecord Encryption  on_encrypted_attribute_declared "," excluded_from_filter_parameters? ","(begin\n  (if\n    (send\n      (lvar :klass) :name)\n    (dstr\n      (begin\n        (send\n          (send\n            (lvar :klass) :model_name) :element))) nil)) compact join ","(begin\n  (if\n    (send\n      (lvar :klass) :name)\n    (dstr\n      (begin\n        (send\n          (send\n            (lvar :klass) :model_name) :element))) nil)) compact ","encrypted_attribute_name to_s ","klass model_name element ","klass model_name ","klass name ","application config (begin\n  (if\n    (send\n      (lvar :klass) :name)\n    (dstr\n      (begin\n        (send\n          (send\n            (lvar :klass) :model_name) :element))) nil)) compact join s << ","application config (begin\n  (if\n    (send\n      (lvar :klass) :name)\n    (dstr\n      (begin\n        (send\n          (send\n            (lvar :klass) :model_name) :element))) nil)) compact join s ","ActiveRecord Encryption  config excluded_from_(begin\n  (if\n    (send\n      (lvar :klass) :name)\n    (dstr\n      (begin\n        (send\n          (send\n            (lvar :klass) :model_name) :element))) nil)) compact join s include? ","ActiveRecord Encryption  config excluded_from_(begin\n  (if\n    (send\n      (lvar :klass) :name)\n    (dstr\n      (begin\n        (send\n          (send\n            (lvar :klass) :model_name) :element))) nil)) compact join s "," excluded_from_(begin\n  (if\n    (send\n      (lvar :klass) :name)\n    (dstr\n      (begin\n        (send\n          (send\n            (lvar :klass) :model_name) :element))) nil)) compact join s? "]}," ActiveRecord AutosaveAssociation _record_changed?":{"type":"method","name":"_record_changed?","children":[],"call":["record will_save_change_to_attribute? ","reflection foreign_key "," association_foreign_key_changed? ","record new_record? "," inverse_polymorphic_association_changed? "]}," ActiveRecord Serialization attribute_names_for_serialization":{"type":"method","name":"attribute_names_for_serialization","children":[],"call":[" attribute_names "]}," ActiveRecord Reflection AbstractReflection strict_loading_violation_message":{"type":"method","name":"strict_loading_violation_message","children":[],"call":["message << "," name "," klass "," polymorphic? ","(str \"`\") +@ ","(str \"`\") +@  << "]}," ActiveRecord Encryption Configurable excluded_from_filter_parameters?":{"type":"method","name":"excluded_from_filter_parameters?","children":[],"call":["excluded_filter to_s == ","excluded_filter to_s ","ActiveRecord Encryption  config excluded_from_filter_parameters find ","ActiveRecord Encryption  config excluded_from_filter_parameters ","ActiveRecord Encryption  config "]}," ActiveRecord ConnectionAdapters MySQL SchemaStatements default_type":{"type":"method","name":"default_type","children":[],"call":["default_pre == ","match [] "," create_table_info match "," create_table_info ","match []  == "," create_table_info match  [] "," create_table_info  create_table_info match  "]}," ActiveRecord Calculations ColumnAliasTracker truncate":{"type":"method","name":"truncate","children":[],"call":["name slice ","@connection table_alias_length - ","@connection table_alias_length "]}," ActiveRecord Calculations ColumnAliasTracker column_alias_for":{"type":"method","name":"column_alias_for","children":[],"call":["@connection table_alias_for ","column_alias gsub! ","column_alias strip! ","field +@ ","field +@  gsub! ","field +@  strip! "]}," ActiveRecord Calculations ColumnAliasTracker alias_for":{"type":"method","name":"alias_for","children":[],"call":[" truncate ","@aliases [] ","@aliases []= ","@aliases [] == "," column_alias_for "]}," ActiveRecord Calculations ColumnAliasTracker initialize":{"type":"method","name":"initialize","children":[],"call":["Hash  new "]}," ActiveRecord Migration Compatibility V5_2 TableDefinition raise_on_duplicate_column":{"type":"method","name":"raise_on_duplicate_column","children":[],"call":[]}," ActiveRecord Migration Compatibility V5_2 TableDefinition raise_on_if_exist_options":{"type":"method","name":"raise_on_if_exist_options","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQL Utils unquote_identifier":{"type":"method","name":"unquote_identifier","children":[],"call":["identifier [] ","identifier start_with? "]}," ActiveRecord ConnectionAdapters MySQL Quoting unquote_identifier":{"type":"method","name":"unquote_identifier","children":[],"call":["identifier [] ","identifier start_with? "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter text_type?":{"type":"method","name":"text_type?","children":[],"call":["TYPE_MAP  lookup is_a? ","TYPE_MAP  lookup "]}," ActiveRecord ConnectionAdapters TableDefinition raise_on_duplicate_column":{"type":"method","name":"raise_on_duplicate_column","children":[],"call":[" raise ","@columns_hash [] primary_key? ","@columns_hash [] "]}," ActiveRecord Associations HasOneAssociation replace_keys":{"type":"method","name":"replace_keys","children":[],"call":[]}," ActiveRecord TableMetadata polymorphic_name_association":{"type":"method","name":"polymorphic_name_association","children":[],"call":[" reflection "]}," ActiveRecord PredicateBuilder AssociationQueryValue polymorphic_clause?":{"type":"method","name":"polymorphic_clause?","children":[],"call":[" value where_values_hash has_key? ! "," value where_values_hash has_key? "," primary_type "," value where_values_hash "," value "]}," ActiveRecord PredicateBuilder AssociationQueryValue select_clause?":{"type":"method","name":"select_clause?","children":[],"call":[" value select_values empty? "," value select_values "," value "]}," ActiveRecord PredicateBuilder AssociationQueryValue polymorphic_name":{"type":"method","name":"polymorphic_name","children":[],"call":[" associated_table polymorphic_name_association "," associated_table "]}," ActiveRecord PredicateBuilder AssociationQueryValue primary_type":{"type":"method","name":"primary_type","children":[],"call":[" associated_table join_primary_type "," associated_table "]}," ActiveRecord Reflection AssociationReflection polymorphic_name":{"type":"method","name":"polymorphic_name","children":[],"call":[" active_record polymorphic_name "," active_record "]}," ActiveRecord Reflection AssociationReflection join_primary_type":{"type":"method","name":"join_primary_type","children":[],"call":[" type "]}," ActiveRecord Persistence _query_constraints_hash":{"type":"method","name":"_query_constraints_hash","children":[],"call":[" id_in_database "," attribute_in_database "," class query_constraints_list index_with "," class query_constraints_list "," class "," class query_constraints_list nil? "]}," ActiveRecord Locking Optimistic _query_constraints_hash":{"type":"method","name":"_query_constraints_hash","children":[],"call":[" merge "," _lock_value_for_database "," class locking_column "," class "," locking_enabled? "," class  class locking_column  "]}," ActiveRecord Locking Optimistic _clear_locking_column":{"type":"method","name":"_clear_locking_column","children":[],"call":[" clear_attribute_change "," class locking_column "," class "," []= "]}," ActiveRecord Locking Optimistic initialize_dup":{"type":"method","name":"initialize_dup","children":[],"call":[" _clear_locking_column "," locking_enabled? "]}," ActiveRecord Type Serialized serialized?":{"type":"method","name":"serialized?","children":[],"call":[]}," ActiveRecord QueryMethods build_case_for_value_position":{"type":"method","name":"build_case_for_value_position","children":[],"call":["Arel Nodes Ascending  new ","node when then ","node when ","column eq ","values each with_index ","values each ","Arel Nodes Case  new ","Arel Nodes Case  new  when then ","Arel Nodes Case  new  when "]}," ActiveRecord Relation QueryAttribute hash":{"type":"method","name":"hash","children":[],"call":["(send\n  (self) :class) hash "," type "," value_for_database "," name "," class "]}," ActiveRecord Relation QueryAttribute ==":{"type":"method","name":"==","children":[],"call":[" value_for_database == ","other value_for_database "," value_for_database "]}," ActiveRecord Relation QueryAttribute initialize":{"type":"method","name":"initialize","children":[],"call":["@value_before_type_cast deep_dup ","@type mutable? "," value_for_database ","@type serialized? "," value_before_type_cast is_a? "," value_before_type_cast ","@value_before_type_cast deep_dup  deep_dup "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter strip_whitespace_characters":{"type":"method","name":"strip_whitespace_characters","children":[],"call":["expression gsub ","expression gsub  gsub "]}," Arel Nodes And fetch_attribute":{"type":"method","name":"fetch_attribute","children":[],"call":["child fetch_attribute "," children all? "," children "," children any? "]}," ActiveRecord Migration internal_option?":{"type":"method","name":"internal_option?","children":[],"call":["option_name start_with? "]}," ActiveRecord Migration format_arguments":{"type":"method","name":"format_arguments","children":[],"call":["arg_list join ","arg_list << ","last_arg inspect ","last_arg empty? "," internal_option? ","last_arg reject ","last_arg is_a? ","arguments last ","arguments [] map ","arguments [] ","arguments [] map  join ","arguments [] map  << ","arguments last  inspect ","arguments last  empty? ","arguments last  reject ","arguments last  is_a? "]}," ActiveRecord Migration Current compatible_table_definition":{"type":"method","name":"compatible_table_definition","children":[],"call":[]}," ActiveRecord Migration Current drop_table":{"type":"method","name":"drop_table","children":[],"call":[" compatible_table_definition "," block_given? "]}," ActiveRecord Migration Current create_join_table":{"type":"method","name":"create_join_table","children":[],"call":[" compatible_table_definition "," block_given? "]}," ActiveRecord Migration Current change_table":{"type":"method","name":"change_table","children":[],"call":[" compatible_table_definition "," block_given? "]}," ActiveRecord Migration Current create_table":{"type":"method","name":"create_table","children":[],"call":[" compatible_table_definition "," block_given? "]}," ActiveRecord Migration Compatibility V6_1 TableDefinition change":{"type":"method","name":"change","children":[],"call":["options [] "]}," ActiveRecord Migration Compatibility V6_1 change_column":{"type":"method","name":"change_column","children":[],"call":["PostgreSQLCompat  compatible_timestamp_type "," connection ","options [] ","type == ","PostgreSQLCompat  compatible_timestamp_PostgreSQLCompat  compatible_timestamp_type  ","PostgreSQLCompat  compatible_timestamp_type  == "]}," ActiveRecord ConnectionAdapters SQLite3 TableDefinition change_column":{"type":"method","name":"change_column","children":[],"call":[" column ","@columns_hash []= ","column_name to_s ","column_column_name to_s  to_s "]}," ActiveRecord Associations CollectionProxy pretty_print":{"type":"method","name":"pretty_print","children":[],"call":[" load_target "," find_from_target? "]}," ActiveRecord Generators ModelGenerator custom_parent?":{"type":"method","name":"custom_parent?","children":[],"call":[" parent != "," class class_options [] default "," class class_options [] "," class class_options "," class "," parent "]}," Arel Visitors ToSql visit_Arel_Nodes_Fragments":{"type":"method","name":"visit_Arel_Nodes_Fragments","children":[],"call":[" inject_join ","o values "]}," Arel Visitors ToSql visit_Arel_Nodes_BoundSqlLiteral":{"type":"method","name":"visit_Arel_Nodes_BoundSqlLiteral","children":[],"call":["new_bind call ","o named_binds [] ","1 to_sym ","o named_binds ","collector << ","o sql_with_placeholders scan ","o sql_with_placeholders ","o positional_binds [] ","o positional_binds ","collector add_bind "," bind_block ","@connection cast_bound_value "," visit ","Arel  arel_node? ","i == ","value each_with_index ","collector add_binds ","value map ","value none? ","@connection quote ","value empty? ","value is_a? "," lambda ","@connection cast_bound_o named_binds []  ","@connection cast_bound_o positional_binds []  ","o named_binds []  each_with_index ","o positional_binds []  each_with_index ","o named_binds []  map ","o positional_binds []  map ","o named_binds []  none? ","o positional_binds []  none? ","o named_binds []  empty? ","o positional_binds []  empty? ","o named_binds []  is_a? ","o positional_binds []  is_a? "]}," Arel Visitors ToSql visit_Arel_Nodes_Cte":{"type":"method","name":"visit_Arel_Nodes_Cte","children":[],"call":[" visit ","o relation ","collector << ","o materialized "," quote_table_name ","o name "]}," Arel Visitors MySQL visit_Arel_Nodes_Cte":{"type":"method","name":"visit_Arel_Nodes_Cte","children":[],"call":[" visit ","o relation ","collector << "," quote_table_name ","o name "]}," Arel Nodes TableAlias to_cte":{"type":"method","name":"to_cte","children":[],"call":["Arel Nodes Cte  new "," relation "," name "]}," Arel Nodes SqlLiteral +":{"type":"method","name":"+","children":[],"call":["Fragments  new "," raise ","Arel  arel_node? "]}," Arel Nodes Fragments eql?":{"type":"method","name":"eql?","children":[],"call":[" values == ","other values "," values "," class == ","other class "," class "]}," Arel Nodes Fragments +":{"type":"method","name":"+","children":[],"call":[" class new "," class "," raise ","Arel  arel_node? "]}," Arel Nodes Fragments hash":{"type":"method","name":"hash","children":[],"call":["(ivar :@values) hash "]}," Arel Nodes Fragments initialize_copy":{"type":"method","name":"initialize_copy","children":[],"call":["@values clone ","@values clone  clone "]}," Arel Nodes Fragments initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Arel Nodes Cte to_table":{"type":"method","name":"to_table","children":[],"call":["Arel Table  new "," name "]}," Arel Nodes Cte to_cte":{"type":"method","name":"to_cte","children":[],"call":[]}," Arel Nodes Cte eql?":{"type":"method","name":"eql?","children":[],"call":[" materialized == ","other materialized "," materialized "," relation == ","other relation "," relation "," name == ","other name "," name "," class == ","other class "," class "]}," Arel Nodes Cte hash":{"type":"method","name":"hash","children":[],"call":["(send nil :name) hash "," materialized "," relation "," name "]}," Arel Nodes Cte initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Arel Nodes BoundSqlLiteral inspect":{"type":"method","name":"inspect","children":[],"call":["(or\n  (send nil :named_binds)\n  (send nil :positional_binds)) inspect "," positional_binds "," named_binds "," sql_with_placeholders inspect "," sql_with_placeholders "," class name "," class "]}," Arel Nodes BoundSqlLiteral +":{"type":"method","name":"+","children":[],"call":["Fragments  new "," raise ","Arel  arel_node? "]}," Arel Nodes BoundSqlLiteral eql?":{"type":"method","name":"eql?","children":[],"call":[" named_binds == ","other named_binds "," named_binds "," positional_binds == ","other positional_binds "," positional_binds "," sql_with_placeholders == ","other sql_with_placeholders "," sql_with_placeholders "," class == ","other class "," class "]}," Arel Nodes BoundSqlLiteral hash":{"type":"method","name":"hash","children":[],"call":["(send\n  (self) :class) hash "," named_binds "," positional_binds "," sql_with_placeholders "," class "]}," Arel Nodes BoundSqlLiteral initialize":{"type":"method","name":"initialize","children":[],"call":["positional_binds empty? ! ","positional_binds empty? "," raise ","BindError  new ","missing inspect ","missing first inspect ","missing first ","missing size == ","missing size ","(lvasgn :missing\n  (begin\n    (send\n      (lvar :tokens_in_string) :-\n      (lvar :tokens_in_hash)))) empty? ! ","(lvasgn :missing\n  (begin\n    (send\n      (lvar :tokens_in_string) :-\n      (lvar :tokens_in_hash)))) empty? ","tokens_in_string - ","named_binds keys map uniq ","named_binds keys map ","named_binds keys ","sql_with_placeholders scan flatten map uniq ","sql_with_placeholders scan flatten map ","sql_with_placeholders scan flatten ","sql_with_placeholders scan ","named_binds empty? ! ","named_binds empty? ","positional_binds size ","positional_binds size != ","sql_with_placeholders count ","(lvasgn :missing\n  (begin\n    (send\n      (lvar :tokens_in_string) :-\n      (lvar :named_binds keys map uniq )))) empty? ! ","(lvasgn :missing\n  (begin\n    (send\n      (lvar :sql_with_placeholders scan flatten map uniq ) :-\n      (lvar :tokens_in_hash)))) empty? ! ","(lvasgn :missing\n  (begin\n    (send\n      (lvar :tokens_in_string) :-\n      (lvar :named_binds keys map uniq )))) empty? ","(lvasgn :missing\n  (begin\n    (send\n      (lvar :sql_with_placeholders scan flatten map uniq ) :-\n      (lvar :tokens_in_hash)))) empty? ","sql_with_placeholders scan flatten map uniq  - "]}," Arel Nodes As to_cte":{"type":"method","name":"to_cte","children":[],"call":["Arel Nodes Cte  new "," right "," left name "," left "]}," Arel FactoryMethods cast":{"type":"method","name":"cast","children":[],"call":["Nodes NamedFunction  new ","name as "]}," Arel BindError initialize":{"type":"method","name":"initialize","children":[],"call":["sql inspect "]}," ActiveRecord disconnect_all!":{"type":"method","name":"disconnect_all!","children":[],"call":[]}," ActiveRecord marshalling_format_version=":{"type":"method","name":"marshalling_format_version=","children":[],"call":[]}," ActiveRecord marshalling_format_version":{"type":"method","name":"marshalling_format_version","children":[],"call":[]}," ActiveRecord suppress_multiple_database_warning=":{"type":"method","name":"suppress_multiple_database_warning=","children":[],"call":[]}," ActiveRecord suppress_multiple_database_warning":{"type":"method","name":"suppress_multiple_database_warning","children":[],"call":[]}," ActiveRecord legacy_connection_handling=":{"type":"method","name":"legacy_connection_handling=","children":[],"call":[]}," ActiveRecord db_warnings_action=":{"type":"method","name":"db_warnings_action=","children":[],"call":[]}," ActiveRecord Validations UniquenessValidator resolve_attributes":{"type":"method","name":"resolve_attributes","children":[],"call":["reflection foreign_key ","reflection foreign_type ","reflection polymorphic? ","attribute to_s ","reflection nil? ","record class _reflect_on_association ","record class ","attributes flat_map ","record class _reflect_on_association  foreign_key ","record class _reflect_on_association  foreign_type ","record class _reflect_on_association  polymorphic? ","record class _reflect_on_association  nil? "]}," ActiveRecord Validations UniquenessValidator covered_by_unique_index?":{"type":"method","name":"covered_by_unique_index?","children":[],"call":["@covered include? ","attribute to_s ","(send\n  (send\n    (lvar :index) :columns) :-\n  (lvar :attributes)) empty? ","index columns - ","index columns ","index where nil? ","index where ","index unique ","klass connection schema_cache indexes any? ","klass connection schema_cache indexes ","klass table_name ","klass connection schema_cache ","klass connection "," resolve_attributes ","scope + "," attributes map select "," attributes map "," attributes ","(send\n  (send\n    (lvar :index) :columns) :-\n  (lvar : resolve_attributes )) empty? ","(send\n  (send\n    (lvar :index) :columns) :-\n  (lvar :scope + )) empty? "," resolve_ resolve_attributes  "," resolve_scope +  ","  resolve_attributes  map select "," scope +  map select ","  resolve_attributes  map "," scope +  map ","  resolve_attributes  "," scope +  "]}," ActiveRecord Validations UniquenessValidator validation_needed?":{"type":"method","name":"validation_needed?","children":[],"call":[" covered_by_unique_index? ! "," covered_by_unique_index? ","record read_attribute nil? ","record read_attribute ","record attribute_changed? ","attributes any? "," resolve_attributes ","scope + "," Array "," options [] "," options "," options key? "," resolve_attributes  any? ","scope +  any? "," resolve_ resolve_attributes  "," resolve_scope +  "," Array  + "]}," ActiveRecord Type Time serialize_cast_value":{"type":"method","name":"serialize_cast_value","children":[],"call":["Value  new "]}," ActiveRecord Type Internal Timezone initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Transactions init_internals":{"type":"method","name":"init_internals","children":[],"call":[]}," ActiveRecord Transactions ClassMethods prepend_option":{"type":"method","name":"prepend_option","children":[],"call":["ActiveRecord  run_after_transaction_callbacks_in_order_defined "]}," ActiveRecord TouchLater init_internals":{"type":"method","name":"init_internals","children":[],"call":[]}," ActiveRecord TokenFor generate_token_for":{"type":"method","name":"generate_token_for","children":[],"call":[" class token_definitions fetch generate_token "," class token_definitions fetch "," class token_definitions "," class "]}," ActiveRecord TokenFor ClassMethods find_by_token_for!":{"type":"method","name":"find_by_token_for!","children":[],"call":[" raise "," find "," token_definitions fetch resolve_token "," token_definitions fetch "," token_definitions "]}," ActiveRecord TokenFor ClassMethods find_by_token_for":{"type":"method","name":"find_by_token_for","children":[],"call":[" find_by "," primary_key "," token_definitions fetch resolve_token "," token_definitions fetch "," token_definitions "," raise ","UnknownPrimaryKey  new "]}," ActiveRecord TokenFor ClassMethods generates_token_for":{"type":"method","name":"generates_token_for","children":[],"call":[" token_definitions= "," token_definitions merge ","TokenDefinition  new "," token_definitions "]}," ActiveRecord TokenFor resolve_token":{"type":"method","name":"resolve_token","children":[],"call":[" payload_for == "," payload_for ","payload [] "," message_verifier verified "," full_purpose "," message_verifier ","  message_verifier verified _for == ","  message_verifier verified _for "," message_verifier verified  [] "]}," ActiveRecord TokenFor generate_token":{"type":"method","name":"generate_token","children":[],"call":[" message_verifier generate "," full_purpose "," expires_in "," payload_for "," message_verifier "]}," ActiveRecord TokenFor payload_for":{"type":"method","name":"payload_for","children":[],"call":["model id ","model instance_eval as_json ","model instance_eval "," block "]}," ActiveRecord TokenFor message_verifier":{"type":"method","name":"message_verifier","children":[],"call":[" defining_class generated_token_verifier "," defining_class "]}," ActiveRecord TokenFor full_purpose":{"type":"method","name":"full_purpose","children":[],"call":["(send\n  (send nil :defining_class) :name) join "," expires_in "," purpose "," defining_class name "," defining_class "]}," ActiveRecord Timestamp init_internals":{"type":"method","name":"init_internals","children":[],"call":[]}," ActiveRecord TestFixtures access_fixture":{"type":"method","name":"access_fixture","children":[],"call":["instances first "," raise ","@loaded_fixtures [] [] find ","@loaded_fixtures [] [] ","@loaded_fixtures [] ","@fixture_cache [] [] ","@fixture_cache [] ","@fixture_cache [] delete ","f_name to_s ","f_name is_a? ","fixture_names map ","@loaded_fixtures [] fixtures keys ","@loaded_fixtures [] fixtures ","fixture_names empty? ","fixture_names size == ","fixture_names size ","fixture_names pop ","fixture_names last == ","fixture_names last ","f_name to_s  to_s ","f_name to_s  is_a? ","@loaded_fixtures [] fixtures keys  map ","@loaded_fixtures [] fixtures keys  empty? ","@loaded_fixtures [] fixtures keys  size == ","@loaded_fixtures [] fixtures keys  size ","@loaded_fixtures [] fixtures keys  pop ","@loaded_fixtures [] fixtures keys  last == ","@loaded_fixtures [] fixtures keys  last "]}," ActiveRecord TestFixtures respond_to_missing?":{"type":"method","name":"respond_to_missing?","children":[],"call":[" fixture_sets key? ","name to_s "," fixture_sets "]}," ActiveRecord TestFixtures method_missing":{"type":"method","name":"method_missing","children":[],"call":[" access_fixture "," fixture_sets [] ","name to_s "," fixture_sets "]}," ActiveRecord TestFixtures fixture_path":{"type":"method","name":"fixture_path","children":[],"call":[" fixture_paths first "," fixture_paths ","ActiveRecord  deprecator warn ","ActiveRecord  deprecator "]}," ActiveRecord TestFixtures ClassMethods fixture_path=":{"type":"method","name":"fixture_path=","children":[],"call":[" fixture_paths= "," Array ","ActiveRecord  deprecator warn ","ActiveRecord  deprecator "]}," ActiveRecord TestFixtures ClassMethods fixture_path":{"type":"method","name":"fixture_path","children":[],"call":[" fixture_paths first "," fixture_paths ","ActiveRecord  deprecator warn ","ActiveRecord  deprecator "]}," ActiveRecord Tasks SQLiteDatabaseTasks establish_connection":{"type":"method","name":"establish_connection","children":[],"call":["ActiveRecord Base  establish_connection "]}," ActiveRecord Tasks SQLiteDatabaseTasks connection":{"type":"method","name":"connection","children":[],"call":["ActiveRecord Base  connection "]}," ActiveRecord Tasks PostgreSQLDatabaseTasks public_schema_config":{"type":"method","name":"public_schema_config","children":[],"call":[" configuration_hash merge "," configuration_hash "]}," ActiveRecord Tasks PostgreSQLDatabaseTasks establish_connection":{"type":"method","name":"establish_connection","children":[],"call":["ActiveRecord Base  establish_connection "]}," ActiveRecord Tasks PostgreSQLDatabaseTasks connection":{"type":"method","name":"connection","children":[],"call":["ActiveRecord Base  connection "]}," ActiveRecord Tasks MySQLDatabaseTasks establish_connection":{"type":"method","name":"establish_connection","children":[],"call":["ActiveRecord Base  establish_connection "]}," ActiveRecord Tasks MySQLDatabaseTasks connection":{"type":"method","name":"connection","children":[],"call":["ActiveRecord Base  connection "]}," ActiveRecord Tasks DatabaseTasks check_current_protected_environment!":{"type":"method","name":"check_current_protected_environment!","children":[],"call":[" raise ","ActiveRecord EnvironmentMismatchError  new ","stored != ","ActiveRecord ProtectedEnvironmentError  new ","connection migration_context protected_environment? ","connection migration_context ","connection migration_context last_stored_environment ","connection migration_context current_environment ","pool connection "," with_temporary_pool ","connection migration_context last_stored_environment  != ","pool connection  migration_context protected_environment? ","pool connection  migration_context ","connection migration_context last_connection migration_context last_stored_environment _environment ","pool connection  migration_context last_stored_environment ","connection migration_context connection migration_context current_environment _environment ","pool connection  migration_context current_environment ","pool pool connection  "]}," ActiveRecord Tasks DatabaseTasks with_temporary_pool":{"type":"method","name":"with_temporary_pool","children":[],"call":[" migration_class connection_handler establish_connection "," migration_class connection_handler "," migration_class "," migration_class connection_db_config "]}," ActiveRecord Tasks DatabaseTasks migration_connection":{"type":"method","name":"migration_connection","children":[],"call":[" migration_class connection "," migration_class "]}," ActiveRecord Tasks DatabaseTasks migration_class":{"type":"method","name":"migration_class","children":[],"call":[]}," ActiveRecord Tasks DatabaseTasks with_temporary_connection":{"type":"method","name":"with_temporary_connection","children":[],"call":["pool connection "," with_temporary_pool "]}," ActiveRecord Tasks DatabaseTasks with_temporary_connection_for_each":{"type":"method","name":"with_temporary_connection_for_each","children":[],"call":[" with_temporary_connection ","ActiveRecord Base  configurations configs_for each ","ActiveRecord Base  configurations configs_for ","ActiveRecord Base  configurations "]}," ActiveRecord SecurePassword ClassMethods authenticate_by":{"type":"method","name":"authenticate_by","children":[],"call":[" new ","(send\n  (lvar :passwords) :count) == ","passwords size ","record public_send ","passwords count "," find_by ","value empty? ","value nil? ","passwords any? "," raise ","identifiers empty? ","passwords empty? ","(send\n  (send\n    (lvar :attributes) :to_h) :partition) map "," has_attribute? "," has_attribute? ! ","attributes to_h partition ","attributes to_h "," find_by  public_send "]}," ActiveRecord SchemaMigration count":{"type":"method","name":"count","children":[],"call":[" connection select_values first "," connection select_values "," class "," connection ","sm project ","Arel Nodes Count  new ","Arel  star ","Arel SelectManager  new "," arel_table ","Arel SelectManager  new  project "]}," ActiveRecord SchemaMigration integer_versions":{"type":"method","name":"integer_versions","children":[],"call":[" versions map "," versions "]}," ActiveRecord SchemaMigration versions":{"type":"method","name":"versions","children":[],"call":[" connection select_values "," class "," connection ","sm order "," arel_table [] asc "," arel_table [] "," primary_key "," arel_table ","sm project ","Arel SelectManager  new ","Arel SelectManager  new  order ","Arel SelectManager  new  project "]}," ActiveRecord SchemaMigration delete_all_versions":{"type":"method","name":"delete_all_versions","children":[],"call":[" delete_version "," versions each "," versions "]}," ActiveRecord SchemaMigration delete_version":{"type":"method","name":"delete_version","children":[],"call":[" connection delete "," class "," connection ","dm wheres= "," arel_table [] eq "," arel_table [] "," primary_key "," arel_table ","Arel DeleteManager  new ","Arel DeleteManager  new  wheres= "]}," ActiveRecord SchemaMigration create_version":{"type":"method","name":"create_version","children":[],"call":[" connection insert "," primary_key "," class "," connection ","im insert "," arel_table [] "," arel_table ","Arel InsertManager  new "," prArel InsertManager  new ary_key ","Arel InsertManager  new  insert "]}," ActiveRecord SchemaMigration initialize":{"type":"method","name":"initialize","children":[],"call":["Arel Table  new "," table_name "]}," ActiveRecord RuntimeRegistry reset":{"type":"method","name":"reset","children":[],"call":[" sql_runtime "," sql_runtime= "]}," ActiveRecord Result freeze":{"type":"method","name":"freeze","children":[],"call":[" hash_rows freeze "," hash_rows "]}," ActiveRecord QueryMethods transform_select_hash_values":{"type":"method","name":"transform_select_hash_values","children":[],"call":["(send nil :arel_column\n  (send\n    (lvar :key) :to_s)) as ","columns_aliases to_s "," predicate_builder resolve_arel_attribute ","key to_s "," klass table_name "," klass "," predicate_builder "," arel_column ","columns_aliases map ","(send nil :arel_column\n  (dstr\n    (begin\n      (lvar :key))\n    (str \".\")\n    (begin\n      (lvar :column)))) as ","column_alias to_s "," references_values ","references empty? ","PredicateBuilder  references ","fields [] "," values [] "," values ","fields flat_map "," PredicateBuilder  references _values ","PredicateBuilder  references  empty? ","PredicateBuilder  PredicateBuilder  references  "]}," ActiveRecord QueryMethods process_select_args":{"type":"method","name":"process_select_args","children":[],"call":[" transform_select_hash_values ","field is_a? ","fields flat_map "]}," ActiveRecord QueryMethods build_with_join_node":{"type":"method","name":"build_with_join_node","children":[],"call":[" table join on join_sources first "," table join on join_sources "," table join on ","with_table [] eq "," table [] "," klass primary_key "," klass "," table ","with_table [] "," klass model_name to_s foreign_key "," klass model_name to_s "," klass model_name "," table join ","Arel Table  new ","Arel Table  new  [] eq ","Arel Table  new  [] "]}," ActiveRecord QueryMethods build_with_value_from_hash":{"type":"method","name":"build_with_value_from_hash","children":[],"call":["Arel Nodes TableAlias  new "," raise ","value class ","value arel ","Arel Nodes Grouping  new ","hash map "]}," ActiveRecord QueryMethods build_with":{"type":"method","name":"build_with","children":[],"call":["arel with "," build_with_value_from_hash "," raise ","with_value class ","with_value is_a? "," with_values map "," with_values "," with_values empty? "]}," ActiveRecord QueryMethods select_named_joins":{"type":"method","name":"select_named_joins","children":[],"call":[" select_association_list ","CTEJoin  new ","cte_joins each ","_1 key? "," with_values any? "," with_values ","Symbol  === ","join_names partition "]}," ActiveRecord QueryMethods async":{"type":"method","name":"async","children":[],"call":[" spawn async! "," spawn "]}," ActiveRecord QueryMethods async!":{"type":"method","name":"async!","children":[],"call":[]}," ActiveRecord QueryMethods null_relation?":{"type":"method","name":"null_relation?","children":[],"call":[]}," ActiveRecord QueryMethods regroup!":{"type":"method","name":"regroup!","children":[],"call":[" group_values= "]}," ActiveRecord QueryMethods regroup":{"type":"method","name":"regroup","children":[],"call":[" spawn regroup! "," spawn "," check_if_method_has_arguments! "," __callee__ "]}," ActiveRecord QueryMethods with!":{"type":"method","name":"with!","children":[],"call":[" with_values "]}," ActiveRecord QueryMethods with":{"type":"method","name":"with","children":[],"call":[" spawn with! "," spawn "," check_if_method_has_arguments! "," __callee__ "]}," ActiveRecord QueryMethods CTEJoin initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord FinderMethods _order_columns":{"type":"method","name":"_order_columns","children":[],"call":["oc flatten uniq compact ","oc flatten uniq ","oc flatten ","oc << "," primary_key "," query_constraints_list nil? "," query_constraints_list "," implicit_order_column "]}," ActiveRecord Delegation uncacheable_methods":{"type":"method","name":"uncacheable_methods","children":[],"call":["(send\n  (send\n    (send nil :delegated_classes) :flat_map\n    (block-pass\n      (sym :public_instance_methods))) :-\n  (send\n    (const\n      (const nil :ActiveRecord) :Relation) :public_instance_methods)) to_set freeze ","(send\n  (send\n    (send nil :delegated_classes) :flat_map\n    (block-pass\n      (sym :public_instance_methods))) :-\n  (send\n    (const\n      (const nil :ActiveRecord) :Relation) :public_instance_methods)) to_set "," delegated_classes flat_map - ","ActiveRecord Relation  public_instance_methods "," delegated_classes flat_map "," delegated_classes "]}," ActiveRecord Delegation delegated_classes":{"type":"method","name":"delegated_classes","children":[],"call":[]}," ActiveRecord Calculations async_ids":{"type":"method","name":"async_ids","children":[],"call":[" async ids "," async "]}," ActiveRecord Calculations async_pick":{"type":"method","name":"async_pick","children":[],"call":[" async pick "," async "]}," ActiveRecord Calculations async_pluck":{"type":"method","name":"async_pluck","children":[],"call":[" async pluck "," async "]}," ActiveRecord Calculations async_sum":{"type":"method","name":"async_sum","children":[],"call":[" async sum "," async "]}," ActiveRecord Calculations async_maximum":{"type":"method","name":"async_maximum","children":[],"call":[" async maximum "," async "]}," ActiveRecord Calculations async_minimum":{"type":"method","name":"async_minimum","children":[],"call":[" async minimum "," async "]}," ActiveRecord Calculations async_average":{"type":"method","name":"async_average","children":[],"call":[" async average "," async "]}," ActiveRecord Calculations async_count":{"type":"method","name":"async_count","children":[],"call":[" async count "," async "]}," ActiveRecord Batches batch_on_unloaded_relation":{"type":"method","name":"batch_on_unloaded_relation","children":[],"call":[" batch_condition "," primary_key ","operators << ","last_order == ","order == ","batch_orders_copy map ","batch_orders_copy pop ","batch_orders dup ","relation limit ","remaining < ","remaining == ","ids length "," limit_value ","ids length < "," raise ","ArgumentError  new ","ids last ","ids empty? "," where ","batch_relation ids ","yielded_relation skip_query_cache! ","yielded_relation except "," apply_finish_limit ","use_ranges != ","yielded_relation load_records ","records map ","batch_relation records "," loop "," to_sql == "," klass unscoped all to_sql "," klass unscoped all "," klass unscoped "," klass "," to_sql ","relation skip_query_cache! "," apply_limits ","relation reorder limit ","relation reorder ","batch_orders to_h "," build_batch_orders ","batch_orders dup  map "," build_batch_orders _copy map ","batch_orders dup  pop "," build_batch_orders _copy pop "," build_batch_orders  dup ","relation limit  limit "," apply_limits  limit ","relation reorder limit  limit ","batch_relation ids  length ","records map  length ","batch_relation ids  length < ","records map  length < ","batch_relation ids  last ","records map  last ","batch_relation ids  empty? ","records map  empty? "," batch_condition  ids ","batch_relation limit  ids ","batch_ apply_limits  ids ","batch_relation reorder limit  ids ","batch_relation batch_relation ids  ","batch_relation records map  ","yielded_relation limit  skip_query_cache! ","yielded_ apply_limits  skip_query_cache! ","yielded_relation reorder limit  skip_query_cache! "," where  skip_query_cache! ","yielded_relation except  skip_query_cache! "," apply_finish_limit  skip_query_cache! ","yielded_relation limit  except ","yielded_ apply_limits  except ","yielded_relation reorder limit  except "," where  except ","yielded_relation except  except "," apply_finish_limit  except "," apply_ids last _limit ","yielded_relation limit  load_records ","yielded_ apply_limits  load_records ","yielded_relation reorder limit  load_records "," where  load_records ","yielded_relation except  load_records "," apply_finish_limit  load_records ","yielded_relation load_batch_relation records  ","batch_relation records  map "," batch_condition  records ","batch_relation limit  records ","batch_ apply_limits  records ","batch_relation reorder limit  records ","batch_relation batch_relation records  ","relation limit  skip_query_cache! "," apply_limits  skip_query_cache! ","relation reorder limit  skip_query_cache! ","relation limit  reorder limit "," apply_limits  reorder limit ","relation reorder limit  reorder limit ","relation limit  reorder "," apply_limits  reorder ","relation reorder limit  reorder "," build_batch_orders  to_h "," build_ build_batch_orders  "]}," ActiveRecord Batches batch_on_loaded_relation":{"type":"method","name":"batch_on_loaded_relation","children":[],"call":["subrelation load_records ","records [] ","relation spawn ","(erange\n  (int 0)\n  (send\n    (lvar :records) :size)) step each ","(erange\n  (int 0)\n  (send\n    (lvar :records) :size)) step ","records size ","records reverse! ","order == ","record id ","records sort_by ","record id <= ","finish nil? ","record id >= ","start nil? ","records filter ","relation to_a ","relation spawn  load_records ","subrelation load_relation to_a  ","relation to_a  [] ","(erange\n  (int 0)\n  (send\n    (lvar :relation to_a ) :size)) step each ","(erange\n  (int 0)\n  (send\n    (lvar :relation to_a ) :size)) step ","relation to_a  size ","relation to_a  reverse! ","relation to_a  sort_by ","relation to_a  filter "]}," ActiveRecord Batches get_the_order_of_primary_key":{"type":"method","name":"get_the_order_of_primary_key","children":[],"call":[" Array zip "," Array "," primary_key "]}," ActiveRecord Batches build_batch_orders":{"type":"method","name":"build_batch_orders","children":[],"call":[" get_the_order_of_primary_key map "," get_the_order_of_primary_key "]}," ActiveRecord Batches batch_condition":{"type":"method","name":"batch_condition","children":[],"call":["relation where "," predicate_builder [] or "," predicate_builder [] and "," predicate_builder [] "," predicate_builder ","operator == ","cursor_positions reverse_each ","cursor_positions pop "," Array zip "," Array "," Array zip  reverse_each "," Array zip  pop "]}," ActiveRecord Reflection AssociationReflection derive_fk_query_constraints":{"type":"method","name":"derive_fk_query_constraints","children":[],"call":[" raise ","(str \"Active Record couldn't correctly interpret the query constraints\\n\") squish ","first_key to_s ","last_key == ","last_key to_s ","first_key == ","primary_query_constraints include? ","(str \"The query constraints on the `\") squish ","primary_query_constraints include? ! ","(str \"The query constraints list on the `\") squish ","primary_query_constraints size != ","primary_query_constraints size ","klass primary_key ","klass query_constraints_list ","klass query_constraints_list  include? ","klass query_constraints_list  include? ! ","klass query_constraints_list  size != ","klass query_constraints_list  size "]}," ActiveRecord Reflection AbstractReflection initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Reflection ClassMethods inherited":{"type":"method","name":"inherited","children":[],"call":["subclass class_eval "]}," ActiveRecord ReadonlyAttributes HasReadonlyAttributes _write_attribute":{"type":"method","name":"_write_attribute","children":[],"call":[" raise ","ReadonlyAttributeError  new "," class readonly_attribute? ","attr_name to_s "," class "," new_record? ! "," new_record? "]}," ActiveRecord ReadonlyAttributes HasReadonlyAttributes write_attribute":{"type":"method","name":"write_attribute","children":[],"call":[" raise ","ReadonlyAttributeError  new "," class readonly_attribute? ","attr_name to_s "," class "," new_record? ! "," new_record? "]}," ActiveRecord Railties JobRuntime instrument":{"type":"method","name":"instrument","children":[],"call":["payload []= ","ActiveRecord RuntimeRegistry  sql_runtime - ","ActiveRecord RuntimeRegistry  sql_runtime ","block call ","operation == "]}," ActiveRecord Railties ControllerRuntime initialize":{"type":"method","name":"initialize","children":[],"call":[" db_runtime= "]}," ActiveRecord Querying async_count_by_sql":{"type":"method","name":"async_count_by_sql","children":[],"call":[" connection select_value then "," connection select_value "," name "," sanitize_sql "," connection "]}," ActiveRecord Querying async_find_by_sql":{"type":"method","name":"async_find_by_sql","children":[],"call":[" _load_from_sql "," _query_by_sql then "," _query_by_sql "]}," ActiveRecord QueryLogs SQLCommenter format_value":{"type":"method","name":"format_value","children":[],"call":["ERB Util  url_encode "]}," ActiveRecord QueryLogs SQLCommenter format":{"type":"method","name":"format","children":[],"call":["pairs sort_by! "]}," ActiveRecord QueryLogs SQLCommenter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord QueryLogs LegacyFormatter format_value":{"type":"method","name":"format_value","children":[],"call":[]}," ActiveRecord QueryLogs LegacyFormatter format":{"type":"method","name":"format","children":[],"call":["(send\n  (lvar :pairs) :map!) join "," format_value "," key_value_separator ","pairs map! "]}," ActiveRecord QueryLogs LegacyFormatter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord QueryLogs formatter":{"type":"method","name":"formatter","children":[],"call":[" update_formatter "," tags_formatter "]}," ActiveRecord QueryLogs update_formatter":{"type":"method","name":"update_formatter","children":[],"call":[" tags_formatter= "," raise "," formatter ","SQLCommenter  new ","LegacyFormatter  new "]}," ActiveRecord Promise Complete status":{"type":"method","name":"status","children":[],"call":[]}," ActiveRecord Promise Complete pending?":{"type":"method","name":"pending?","children":[],"call":[]}," ActiveRecord Promise Complete then":{"type":"method","name":"then","children":[],"call":["Complete  new "]}," ActiveRecord Promise Complete initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Promise status":{"type":"method","name":"status","children":[],"call":["@future_result canceled? ","@future_result pending? "]}," ActiveRecord Promise pretty_print":{"type":"method","name":"pretty_print","children":[],"call":["q text "," inspect "]}," ActiveRecord Promise inspect":{"type":"method","name":"inspect","children":[],"call":[" status "]}," ActiveRecord Promise then":{"type":"method","name":"then","children":[],"call":["Promise  new ","@block >> "]}," ActiveRecord Promise value":{"type":"method","name":"value","children":[],"call":["@block call ","@future_result result ","@future_@future_result result  @future_result result  "]}," ActiveRecord Promise pending?":{"type":"method","name":"pending?","children":[],"call":["@future_result pending? "]}," ActiveRecord Promise initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Persistence _in_memory_query_constraints_hash":{"type":"method","name":"_in_memory_query_constraints_hash","children":[],"call":[" attribute "," class query_constraints_list index_with "," class query_constraints_list "," class "," id "," class query_constraints_list nil? "]}," ActiveRecord Persistence init_internals":{"type":"method","name":"init_internals","children":[],"call":[]}," ActiveRecord Persistence update_attribute!":{"type":"method","name":"update_attribute!","children":[],"call":[" save! "," public_send "," verify_readonly_attribute ","name to_s ","name to_s  to_s "]}," ActiveRecord Persistence ClassMethods inherited":{"type":"method","name":"inherited","children":[],"call":["subclass class_eval "]}," ActiveRecord Persistence ClassMethods composite_query_constraints_list":{"type":"method","name":"composite_query_constraints_list","children":[],"call":[" Array "," primary_key "," query_constraints_list "]}," ActiveRecord Persistence ClassMethods query_constraints_list":{"type":"method","name":"query_constraints_list","children":[],"call":[" base_class query_constraints_list "," base_class "," primary_key "," primary_key is_a? "," primary_key != "," base_class primary_key "," base_class? "]}," ActiveRecord Persistence ClassMethods has_query_constraints?":{"type":"method","name":"has_query_constraints?","children":[],"call":[]}," ActiveRecord Persistence ClassMethods query_constraints":{"type":"method","name":"query_constraints","children":[],"call":["columns_list map "," raise ","columns_list empty? "]}," ActiveRecord Persistence ClassMethods build":{"type":"method","name":"build","children":[],"call":[" new "," build ","attributes collect ","attributes is_a? "]}," ActiveRecord Normalization NormalizedValueType normalize":{"type":"method","name":"normalize","children":[],"call":[" normalizer call "," normalizer "," normalize_nil? ! "," normalize_nil? ","value nil? "]}," ActiveRecord Normalization NormalizedValueType inspect":{"type":"method","name":"inspect","children":[],"call":["Kernel  instance_method bind_call ","Kernel  instance_method "]}," ActiveRecord Normalization NormalizedValueType hash":{"type":"method","name":"hash","children":[],"call":["(send\n  (self) :class) hash "," normalize_nil? "," normalizer "," cast_type "," class "]}," ActiveRecord Normalization NormalizedValueType ==":{"type":"method","name":"==","children":[],"call":[" cast_type == ","other cast_type "," cast_type "," normalizer == ","other normalizer "," normalizer "," normalize_nil? == ","other normalize_nil? "," normalize_nil? "," class == ","other class "," class "]}," ActiveRecord Normalization NormalizedValueType serialize_cast_value":{"type":"method","name":"serialize_cast_value","children":[],"call":["ActiveModel Type SerializeCastValue  serialize "," cast_type "]}," ActiveRecord Normalization NormalizedValueType serialize":{"type":"method","name":"serialize","children":[],"call":[" serialize_cast_value "," cast "]}," ActiveRecord Normalization NormalizedValueType cast":{"type":"method","name":"cast","children":[],"call":[" normalize "]}," ActiveRecord Normalization NormalizedValueType initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Normalization normalize_changed_in_place_attributes":{"type":"method","name":"normalize_changed_in_place_attributes","children":[],"call":[" normalize_attribute "," attribute_changed_in_place? "," class normalized_attributes each "," class normalized_attributes "," class "]}," ActiveRecord Normalization ClassMethods normalize_value_for":{"type":"method","name":"normalize_value_for","children":[],"call":[" type_for_attribute cast "," type_for_attribute "]}," ActiveRecord Normalization ClassMethods normalizes":{"type":"method","name":"normalizes","children":[],"call":["names map "," normalized_attributes ","NormalizedValueType  new "," attribute ","names each "]}," ActiveRecord Normalization normalize_attribute":{"type":"method","name":"normalize_attribute","children":[],"call":[" []= "," [] "]}," ActiveRecord ModelSchema ClassMethods _returning_columns_for_insert":{"type":"method","name":"_returning_columns_for_insert","children":[],"call":["c name "," connection return_value_after_insert? "," connection "," columns filter_map "," columns "]}," ActiveRecord Migrator connection":{"type":"method","name":"connection","children":[],"call":["ActiveRecord Tasks DatabaseTasks  migration_connection "]}," ActiveRecord MigrationContext connection":{"type":"method","name":"connection","children":[],"call":["ActiveRecord Tasks DatabaseTasks  migration_connection "]}," ActiveRecord Migration execution_strategy":{"type":"method","name":"execution_strategy","children":[],"call":["ActiveRecord  migration_strategy new ","ActiveRecord  migration_strategy "]}," ActiveRecord Migration env":{"type":"method","name":"env","children":[],"call":["ActiveRecord ConnectionHandling DEFAULT_ENV  call "]}," ActiveRecord Migration pending_migrations":{"type":"method","name":"pending_migrations","children":[],"call":["pending_migrations flatten ","pending_migrations << ","connection migration_context open pending_migrations ","connection migration_context open ","connection migration_context ","ActiveRecord Tasks DatabaseTasks  with_temporary_connection_for_each "," env ","connection migration_context open pending_migrations _migrations flatten ","connection migration_context open pending_migrations _migrations << ","connection migration_context open connection migration_context open pending_migrations _migrations "]}," ActiveRecord Migration db_configs_in_current_env":{"type":"method","name":"db_configs_in_current_env","children":[],"call":["ActiveRecord Base  configurations configs_for "," env ","ActiveRecord Base  configurations "]}," ActiveRecord Migration any_schema_needs_update?":{"type":"method","name":"any_schema_needs_update?","children":[],"call":["(send\n  (send nil :db_configs_in_current_env) :all?) ! ","Tasks DatabaseTasks  schema_up_to_date? ","ActiveRecord  schema_format "," db_configs_in_current_env all? "," db_configs_in_current_env "]}," ActiveRecord Migration check_pending_migrations":{"type":"method","name":"check_pending_migrations","children":[],"call":[" raise ","ActiveRecord PendingMigrationError  new ","migrations any? "," pending_migrations "," pending_migrations  any? "," pending_ pending_migrations  "]}," ActiveRecord Migration check_all_pending!":{"type":"method","name":"check_all_pending!","children":[],"call":[" raise ","ActiveRecord PendingMigrationError  new ","migrations any? ","pending_migrations flatten ","pending_migrations << ","connection migration_context open pending_migrations ","connection migration_context open ","connection migration_context ","ActiveRecord Tasks DatabaseTasks  with_temporary_connection_for_each "," env ","pending_migrations flatten  any? ","pending_pending_migrations flatten  flatten ","connection migration_context open pending_migrations _migrations flatten ","pending_pending_migrations flatten  << ","connection migration_context open pending_migrations _migrations << ","connection migration_context open pending_pending_migrations flatten  ","connection migration_context open connection migration_context open pending_migrations _migrations "]}," ActiveRecord Migration valid_version_format?":{"type":"method","name":"valid_version_format?","children":[],"call":[]}," ActiveRecord PendingMigrationError connection":{"type":"method","name":"connection","children":[],"call":["ActiveRecord Tasks DatabaseTasks  migration_connection "]}," ActiveRecord Migration ExecutionStrategy initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Migration DefaultStrategy connection":{"type":"method","name":"connection","children":[],"call":[" migration connection "," migration "]}," ActiveRecord Migration DefaultStrategy respond_to_missing?":{"type":"method","name":"respond_to_missing?","children":[],"call":[" connection respond_to? "," connection "]}," ActiveRecord Migration DefaultStrategy method_missing":{"type":"method","name":"method_missing","children":[],"call":[" connection send "," connection "]}," ActiveRecord Migration Compatibility V4_2 TableDefinition raise_on_if_exist_options":{"type":"method","name":"raise_on_if_exist_options","children":[],"call":[]}," ActiveRecord Migration Compatibility V5_0 TableDefinition raise_on_if_exist_options":{"type":"method","name":"raise_on_if_exist_options","children":[],"call":[]}," ActiveRecord Migration Compatibility V6_0 TableDefinition raise_on_if_exist_options":{"type":"method","name":"raise_on_if_exist_options","children":[],"call":[]}," ActiveRecord Migration Compatibility V6_1 TableDefinition raise_on_if_exist_options":{"type":"method","name":"raise_on_if_exist_options","children":[],"call":[]}," ActiveRecord Migration Compatibility V7_0 compatible_table_definition":{"type":"method","name":"compatible_table_definition","children":[],"call":[" prepend "]}," ActiveRecord Migration Compatibility V7_0 add_foreign_key":{"type":"method","name":"add_foreign_key","children":[],"call":["options []= ","options [] == ","options [] "," connection adapter_name == "," connection adapter_name "," connection "]}," ActiveRecord Migration Compatibility V7_0 disable_extension":{"type":"method","name":"disable_extension","children":[],"call":["options []= "," connection adapter_name == "," connection adapter_name "," connection "]}," ActiveRecord Migration Compatibility V7_0 change_column_null":{"type":"method","name":"change_column_null","children":[],"call":["null ! ! ","null ! "]}," ActiveRecord Migration Compatibility V7_0 change_column":{"type":"method","name":"change_column","children":[],"call":["options [] "," connection adapter_name == "," connection adapter_name "," connection ","options []= "]}," ActiveRecord Migration Compatibility V7_0 rename_table":{"type":"method","name":"rename_table","children":[],"call":["options []= "]}," ActiveRecord Migration Compatibility V7_0 create_table":{"type":"method","name":"create_table","children":[],"call":["options []= "]}," ActiveRecord Migration Compatibility V7_0 add_index":{"type":"method","name":"add_index","children":[],"call":["options []= "," legacy_index_name ","options [] nil? ","options [] "]}," ActiveRecord Migration Compatibility V7_0 add_column":{"type":"method","name":"add_column","children":[],"call":["options []= "]}," ActiveRecord Migration Compatibility V7_0 TableDefinition raise_on_if_exist_options":{"type":"method","name":"raise_on_if_exist_options","children":[],"call":[]}," ActiveRecord Migration Compatibility V7_0 TableDefinition index":{"type":"method","name":"index","children":[],"call":["options []= "," legacy_index_name "," name ","options [] nil? ","options [] "]}," ActiveRecord Migration Compatibility V7_0 TableDefinition change":{"type":"method","name":"change","children":[],"call":["options []= "]}," ActiveRecord Migration Compatibility V7_0 TableDefinition column":{"type":"method","name":"column","children":[],"call":["options []= "]}," ActiveRecord Migration Compatibility V7_0 LegacyIndexName expression_column_name?":{"type":"method","name":"expression_column_name?","children":[],"call":["(str \"\\\\W\") match? ","column_name is_a? "]}," ActiveRecord Migration Compatibility V7_0 LegacyIndexName index_name_options":{"type":"method","name":"index_name_options","children":[],"call":["column_names scan join ","column_names scan "," expression_column_name? ","column_names scan join  scan join ","column_names scan join  scan "]}," ActiveRecord Migration Compatibility V7_0 LegacyIndexName legacy_index_name":{"type":"method","name":"legacy_index_name","children":[],"call":[" legacy_index_name "," index_name_options "," raise ","options [] "," Array * "," Array ","Hash  === "]}," ActiveRecord Migration CommandRecorder invert_rename_enum_value":{"type":"method","name":"invert_rename_enum_value","children":[],"call":["options [] "," raise ","options has_key? ","options is_a? "]}," ActiveRecord Migration CommandRecorder invert_rename_enum":{"type":"method","name":"invert_rename_enum","children":[],"call":["options [] "," raise ","options has_key? ","options is_a? "]}," ActiveRecord Migration CommandRecorder invert_drop_enum":{"type":"method","name":"invert_drop_enum","children":[],"call":[" raise ","args dup tap ","args dup "]}," ActiveRecord Migration CommandRecorder invert_remove_unique_key":{"type":"method","name":"invert_remove_unique_key","children":[],"call":[" raise ","columns blank? ","args dup tap ","args dup "]}," ActiveRecord Migration CommandRecorder invert_add_unique_key":{"type":"method","name":"invert_add_unique_key","children":[],"call":[" raise ","options [] ","args dup extract_options! ","args dup ","args dup extract_options!  [] ","args dup extract_args dup extract_options! ! "]}," ActiveRecord Migration CommandRecorder invert_remove_exclusion_constraint":{"type":"method","name":"invert_remove_exclusion_constraint","children":[],"call":[" raise ","args size < ","args size "]}," ActiveRecord Migration CommandRecorder invert_add_check_constraint":{"type":"method","name":"invert_add_check_constraint","children":[],"call":["options []= ","options delete ","options key? ","(lvasgn :options\n  (send\n    (lvar :args) :last)) is_a? ","args last ","args last  []= ","args last  delete ","args last  key? ","(lvasgn :args last \n  (send\n    (lvar :args) :last)) is_a? "]}," ActiveRecord Middleware DatabaseSelector Resolver reading_request?":{"type":"method","name":"reading_request?","children":[],"call":["request head? ","request get? "]}," ActiveRecord MessagePack Decoder resolve_cached_associations":{"type":"method","name":"resolve_cached_associations","children":[],"call":["record association target= "," decode ","entry [] ","i + ","record association ","i < ","entry length "]}," ActiveRecord MessagePack Decoder build_record":{"type":"method","name":"build_record","children":[],"call":["klass allocate init_with_attributes ","klass allocate ","klass attributes_builder build_from_database ","klass attributes_builder ","ActiveSupport MessagePack Extensions  load_class ","klass allocate init_with_klass attributes_builder build_from_database  ","ActiveSupport MessagePack Extensions  load_class  allocate init_with_attributes ","ActiveSupport MessagePack Extensions  load_class  allocate ","klass klass attributes_builder build_from_database _builder build_from_database ","ActiveSupport MessagePack Extensions  load_class  attributes_builder build_from_database ","klass klass attributes_builder build_from_database _builder ","ActiveSupport MessagePack Extensions  load_class  attributes_builder "]}," ActiveRecord MessagePack Decoder decode":{"type":"method","name":"decode","children":[],"call":["@records [] ","ref map ","ref is_a? "]}," ActiveRecord MessagePack Decoder initialize":{"type":"method","name":"initialize","children":[],"call":[" resolve_cached_associations ","@records zip "," build_record ","entries map "]}," ActiveRecord MessagePack Encoder add_cached_associations":{"type":"method","name":"add_cached_associations","children":[],"call":["entry << << "," encode ","record association target ","record association ","reflection name ","entry << ","record association_cached? ","record class reflections each_value ","record class reflections ","record class "]}," ActiveRecord MessagePack Encoder build_entry":{"type":"method","name":"build_entry","children":[],"call":["record new_record? ","record attributes_for_database ","ActiveSupport MessagePack Extensions  dump_class ","record class "]}," ActiveRecord MessagePack Encoder encode_record":{"type":"method","name":"encode_record","children":[],"call":[" add_cached_associations ","@entries last ","@entries << "," build_entry ","@refs []= ","@entries size ","ref ! ","@refs [] ","@@refs []= s []= ","@@refs [] s []= ","@refs []=  ! ","@refs []  ! ","@@refs []= s [] ","@@refs [] s [] "]}," ActiveRecord MessagePack Encoder encode":{"type":"method","name":"encode","children":[],"call":[" encode_record ","input map ","input is_a? "]}," ActiveRecord MessagePack Encoder initialize":{"type":"method","name":"initialize","children":[],"call":[" compare_by_identity "]}," ActiveRecord MessagePack Extensions read_record":{"type":"method","name":"read_record","children":[],"call":["ActiveRecord MessagePack  load ","unpacker read "]}," ActiveRecord MessagePack Extensions write_record":{"type":"method","name":"write_record","children":[],"call":["packer write ","ActiveRecord MessagePack  dump "]}," ActiveRecord MessagePack Extensions install":{"type":"method","name":"install","children":[],"call":["registry register_type "," method "]}," ActiveRecord MessagePack load":{"type":"method","name":"load","children":[],"call":["Decoder  new decode ","Decoder  new "," raise ","format_version inspect ","format_version == "]}," ActiveRecord MessagePack dump":{"type":"method","name":"dump","children":[],"call":["encoder entries ","encoder encode ","Encoder  new ","Encoder  new  entries ","Encoder  new  encode "]}," ActiveRecord Marshalling Methods marshal_load":{"type":"method","name":"marshal_load","children":[],"call":[" association target= "," association ","associations each "," init_with_attributes "," class attributes_builder build_from_database "," class attributes_builder "," class "," init_with_ class attributes_builder build_from_database  "," class  class attributes_builder build_from_database _builder build_from_database "," class  class attributes_builder build_from_database _builder "]}," ActiveRecord Marshalling Methods _marshal_dump_7_1":{"type":"method","name":"_marshal_dump_7_1","children":[],"call":["payload << "," association target "," association ","reflection name ","cached_associations map ","cached_associations empty? "," association_cached? "," class reflect_on_all_associations select "," class reflect_on_all_associations "," class "," new_record? "," attributes_for_database "]}," ActiveRecord Marshalling format_version=":{"type":"method","name":"format_version=","children":[],"call":[" raise ","version inspect ","Methods  alias_method ","Methods  remove_method ","Methods  method_defined? "]}," ActiveRecord LogSubscriber query_source_location":{"type":"method","name":"query_source_location","children":[],"call":[" backtrace_cleaner clean first "," backtrace_cleaner clean "," caller lazy "," caller "," backtrace_cleaner "," backtrace_cleaner clean_frame ","Thread  each_caller_location "," backtrace_cleaner clean_ backtrace_cleaner clean_frame  "]}," ActiveRecord InternalMetadata select_entry":{"type":"method","name":"select_entry","children":[],"call":[" connection select_all first "," connection select_all "," class "," connection ","sm limit= ","sm order "," arel_table [] asc "," arel_table [] "," primary_key "," arel_table ","sm where "," arel_table [] eq ","Arel Nodes BindParam  new ","sm project ","Arel Nodes SqlLiteral  new ","Arel SelectManager  new ","Arel SelectManager  new  limit= ","Arel SelectManager  new  order ","Arel SelectManager  new  where ","Arel SelectManager  new  project "]}," ActiveRecord InternalMetadata update_entry":{"type":"method","name":"update_entry","children":[],"call":[" connection update "," class "," connection ","um where "," arel_table [] eq "," arel_table [] "," primary_key "," arel_table ","um set "," current_time "," value_key ","Arel UpdateManager  new ","Arel UpdateManager  new  where ","Arel UpdateManager  new  set "]}," ActiveRecord InternalMetadata create_entry":{"type":"method","name":"create_entry","children":[],"call":[" connection insert "," primary_key "," class "," connection ","im insert "," current_time "," arel_table [] "," arel_table "," value_key ","Arel InsertManager  new "," prArel InsertManager  new ary_key ","Arel InsertManager  new  insert "," current_tArel InsertManager  new e "]}," ActiveRecord InternalMetadata current_time":{"type":"method","name":"current_time","children":[],"call":["Time  now ","Time  now utc "," connection default_timezone == "," connection default_timezone "," connection "]}," ActiveRecord InternalMetadata update_or_create_entry":{"type":"method","name":"update_or_create_entry","children":[],"call":[" create_entry ","entry [] "," value_key "," update_entry ","entry [] != "," select_entry "," create_ select_entry  "," select_entry  [] "," update_ select_entry  "," select_entry  [] != "," select_ select_entry  "]}," ActiveRecord InternalMetadata create_table_and_set_flags":{"type":"method","name":"create_table_and_set_flags","children":[],"call":[" update_or_create_entry "," create_table "]}," ActiveRecord InternalMetadata count":{"type":"method","name":"count","children":[],"call":[" connection select_values first "," connection select_values "," class "," connection ","sm project ","Arel Nodes Count  new ","Arel  star ","Arel SelectManager  new "," arel_table ","Arel SelectManager  new  project "]}," ActiveRecord InternalMetadata delete_all_entries":{"type":"method","name":"delete_all_entries","children":[],"call":[" connection delete "," class "," connection ","Arel DeleteManager  new "," arel_table "]}," ActiveRecord InternalMetadata value_key":{"type":"method","name":"value_key","children":[],"call":[]}," ActiveRecord InternalMetadata initialize":{"type":"method","name":"initialize","children":[],"call":["Arel Table  new "," table_name "]}," ActiveRecord InsertAll Builder quote_column":{"type":"method","name":"quote_column","children":[],"call":[" connection quote_column_name "," connection "]}," ActiveRecord InsertAll resolve_attribute_alias":{"type":"method","name":"resolve_attribute_alias","children":[],"call":[" model attribute_alias "," model "]}," ActiveRecord InsertAll resolve_attribute_aliases":{"type":"method","name":"resolve_attribute_aliases","children":[],"call":[" resolve_attribute_alias "," Array map "," Array ","insert transform_keys ","@inserts map "," has_attribute_aliases? ","@inserts first "]}," ActiveRecord InsertAll resolve_sti":{"type":"method","name":"resolve_sti","children":[],"call":["insert reverse_merge "," model inheritance_column to_s "," model inheritance_column "," model ","@inserts map "," model sti_name "," model descends_from_active_record? "]}," ActiveRecord InsertAll has_attribute_aliases?":{"type":"method","name":"has_attribute_aliases?","children":[],"call":[" model attribute_alias? "," model ","attributes keys any? ","attributes keys "]}," ActiveRecord FutureResult then":{"type":"method","name":"then","children":[],"call":["Promise  new "]}," ActiveRecord FutureResult Complete then":{"type":"method","name":"then","children":[],"call":["Promise Complete  new ","@result then "]}," ActiveRecord FutureResult Complete canceled?":{"type":"method","name":"canceled?","children":[],"call":[]}," ActiveRecord FutureResult Complete pending?":{"type":"method","name":"pending?","children":[],"call":[]}," ActiveRecord FutureResult Complete initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord FixtureSet default_fixture_model_class":{"type":"method","name":"default_fixture_model_class","children":[],"call":["klass < ","ActiveRecord FixtureSet  default_fixture_model_name safe_constantize ","ActiveRecord FixtureSet  default_fixture_model_name ","ActiveRecord FixtureSet  default_fixture_model_name safe_constantize  < "]}," ActiveRecord FixtureSet check_all_foreign_keys_valid!":{"type":"method","name":"check_all_foreign_keys_valid!","children":[],"call":[" raise ","e message ","conn check_all_foreign_keys_valid! ","ActiveRecord  verify_foreign_keys_for_fixtures "]}," ActiveRecord FixtureSet composite_identify":{"type":"method","name":"composite_identify","children":[],"call":["(send\n  (send\n    (lvar :key) :index_with) :with_index) with_indifferent_access ","(send\n  (send nil :identify\n    (lvar :label)) :<<\n  (lvar :index)) % "," identify << "," identify ","key index_with with_index ","key index_with "]}," ActiveRecord FixtureSet TableRow column_defined?":{"type":"method","name":"column_defined?","children":[],"call":["@row include? "," model_metadata has_column? ! "," model_metadata has_column? "," model_metadata "]}," ActiveRecord FixtureSet TableRow generate_composite_primary_key":{"type":"method","name":"generate_composite_primary_key","children":[],"call":["@row []= "," column_defined? ","composite_key each ","ActiveRecord FixtureSet  composite_identify "," model_metadata primary_key_name "," model_metadata ","ActiveRecord FixtureSet  composite_identify  each "]}," ActiveRecord FixtureSet ModelMetadata column_names":{"type":"method","name":"column_names","children":[],"call":["Set  new ","@model_class columns map to_set ","@model_class columns map ","@model_class columns "]}," ActiveRecord FixtureSet ModelMetadata has_column?":{"type":"method","name":"has_column?","children":[],"call":[" column_names include? "," column_names "]}," ActiveRecord FixtureSet ModelMetadata column_type":{"type":"method","name":"column_type","children":[],"call":["@column_type []= ","@model_class type_for_attribute type ","@model_class type_for_attribute ","@column_type [] ","@column_type key? "]}," ActiveRecord Explain connection_explain":{"type":"method","name":"connection_explain","children":[],"call":[" connection explain "," connection ","ActiveRecord  deprecator warn ","(str \"The current database adapter, \") squish "," connection adapter_name ","ActiveRecord  deprecator "," connection method parameters size == "," connection method parameters size "," connection method parameters "," connection method "]}," ActiveRecord Explain build_explain_clause":{"type":"method","name":"build_explain_clause","children":[],"call":[" connection build_explain_clause "," connection "," connection respond_to? "]}," ActiveRecord SQLWarning initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord MismatchedForeignKey set_query":{"type":"method","name":"set_query","children":[],"call":["exception set_backtrace "," backtrace "," class new tap "," class new ","@query_parser call "," class ","@sql ! "]}," ActiveRecord StatementInvalid set_query":{"type":"method","name":"set_query","children":[],"call":[]}," ActiveRecord ConnectionNotEstablished set_pool":{"type":"method","name":"set_pool","children":[],"call":[]}," ActiveRecord ConnectionNotEstablished initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord AdapterError initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Enum load_schema!":{"type":"method","name":"load_schema!","children":[],"call":[" raise "," name ","Enum EnumType  === ","cast_type [] "," type_for_attribute ","Proc  === "," columns_hash key? "," columns_hash "," attributes_to_define_after_schema_loads each "," attributes_to_define_after_schema_loads ","cast_type []  [] "]}," ActiveRecord Encryption Scheme default_key_provider":{"type":"method","name":"default_key_provider","children":[],"call":["ActiveRecord Encryption  key_provider "]}," ActiveRecord Encryption Scheme compatible_with?":{"type":"method","name":"compatible_with?","children":[],"call":[" deterministic? == ","other_scheme deterministic? "," deterministic? "]}," ActiveRecord Encryption Scheme support_unencrypted_data?":{"type":"method","name":"support_unencrypted_data?","children":[],"call":["ActiveRecord Encryption  config support_unencrypted_data ","ActiveRecord Encryption  config ","@support_unencrypted_data nil? "]}," ActiveRecord Encryption KeyGenerator key_derivation_salt":{"type":"method","name":"key_derivation_salt","children":[],"call":["ActiveRecord Encryption  config key_derivation_salt ","ActiveRecord Encryption  config "]}," ActiveRecord Encryption KeyGenerator initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Encryption ExtendedDeterministicQueries RelationQueries scope_for_create":{"type":"method","name":"scope_for_create","children":[],"call":["scope_attributes []= ","values first ","values [] all? ","values [] ","values is_a? ","wheres [] ","attribute_name to_s "," klass deterministic_encrypted_attributes each "," klass deterministic_encrypted_attributes "," klass "," where_values_hash ","wheres []  first ","wheres []  [] all? ","wheres []  [] ","wheres []  is_a? "," where_values_hash  [] ","attribute_name to_s  to_s "," where_wheres [] _hash "]}," ActiveRecord Encryption ExtendedDeterministicQueries EncryptedQuery additional_values_for":{"type":"method","name":"additional_values_for","children":[],"call":["AdditionalValue  new ","type previous_types collect ","type previous_types "]}," ActiveRecord Encryption ExtendedDeterministicQueries EncryptedQuery process_encrypted_query_argument":{"type":"method","name":"process_encrypted_query_argument","children":[],"call":["list + "," additional_values_for ","each_value is_a? ","list flat_map "," Array ","value last is_a? ","value last ","value is_a? "," Array  + "," Array  flat_map "]}," ActiveRecord Encryption ExtendedDeterministicQueries EncryptedQuery process_arguments":{"type":"method","name":"process_arguments","children":[],"call":["options []= "," process_encrypted_query_argument ","options [] ","type previous_types empty? ! ","type previous_types empty? ","type previous_types ","owner type_for_attribute ","attribute_name to_s ","owner deterministic_encrypted_attributes ","args []= ","key to_s ","key map ","key is_a? ","options transform_keys ","(lvasgn :options\n  (send\n    (lvar :args) :first)) is_a? ","args first ","args is_a? ","args first  []= ","args first  [] ","owner type_for_attribute  previous_owner type_for_attribute s empty? ! ","owner type_for_attribute  previous_owner type_for_attribute s empty? ","owner type_for_attribute  previous_owner type_for_attribute s ","owner owner type_for_attribute _for_attribute ","attribute_name to_s  to_s ","args first  transform_keys ","(lvasgn :args first \n  (send\n    (lvar :args) :first)) is_a? "]}," ActiveRecord Encryption EncryptedAttributeType cast":{"type":"method","name":"cast","children":[],"call":[" cast_type cast "," cast_type "]}," ActiveRecord Encryption EncryptableRecord _create_record":{"type":"method","name":"_create_record","children":[],"call":[" class encrypted_attributes map "," class encrypted_attributes "," class "," has_encrypted_attributes? "]}," ActiveRecord Encryption DerivedSecretKeyProvider derive_key_from":{"type":"method","name":"derive_key_from","children":[],"call":["ActiveRecord Encryption Key  new ","using derive_key_from "]}," ActiveRecord Encryption Contexts reset_default_context":{"type":"method","name":"reset_default_context","children":[],"call":[" default_context= ","Context  new "]}," ActiveRecord Encryption Context build_default_key_provider":{"type":"method","name":"build_default_key_provider","children":[],"call":["ActiveRecord Encryption DerivedSecretKeyProvider  new ","ActiveRecord Encryption  config primary_key ","ActiveRecord Encryption  config "]}," ActiveRecord Encryption Context key_provider":{"type":"method","name":"key_provider","children":[],"call":[" build_default_key_provider "]}," ActiveRecord Encryption Config support_sha1_for_non_deterministic_encryption=":{"type":"method","name":"support_sha1_for_non_deterministic_encryption=","children":[],"call":[" add_previous_scheme ","ActiveRecord Encryption DerivedSecretKeyProvider  new "," primary_key ","ActiveRecord Encryption KeyGenerator  new "," has_primary_key? "]}," ActiveRecord Encryption Cipher Aes256Gcm inspect":{"type":"method","name":"inspect","children":[],"call":["%#016x % "," object_id << "," object_id "," class name "," class "]}," ActiveRecord Encryption AutoFilteredParameters excluded_from_filter_parameters?":{"type":"method","name":"excluded_from_filter_parameters?","children":[],"call":["excluded_filter to_s == ","excluded_filter to_s ","ActiveRecord Encryption  config excluded_from_filter_parameters find ","ActiveRecord Encryption  config excluded_from_filter_parameters ","ActiveRecord Encryption  config "]}," ActiveRecord Encryption AutoFilteredParameters apply_filter":{"type":"method","name":"apply_filter","children":[],"call":["klass filter_attributes "," app config filter_parameters << "," app config filter_parameters "," app config "," app "," app config filter_parameters include? "," excluded_from_filter_parameters? ","(begin\n  (if\n    (send\n      (lvar :klass) :name)\n    (dstr\n      (begin\n        (send\n          (send\n            (lvar :klass) :model_name) :element))) nil)) compact join ","(begin\n  (if\n    (send\n      (lvar :klass) :name)\n    (dstr\n      (begin\n        (send\n          (send\n            (lvar :klass) :model_name) :element))) nil)) compact ","attribute to_s ","klass model_name element ","klass model_name ","klass name ","klass (begin\n  (if\n    (send\n      (lvar :klass) :name)\n    (dstr\n      (begin\n        (send\n          (send\n            (lvar :klass) :model_name) :element))) nil)) compact join _attributes "," app config (begin\n  (if\n    (send\n      (lvar :klass) :name)\n    (dstr\n      (begin\n        (send\n          (send\n            (lvar :klass) :model_name) :element))) nil)) compact join _parameters << "," app config (begin\n  (if\n    (send\n      (lvar :klass) :name)\n    (dstr\n      (begin\n        (send\n          (send\n            (lvar :klass) :model_name) :element))) nil)) compact join _parameters "," app config (begin\n  (if\n    (send\n      (lvar :klass) :name)\n    (dstr\n      (begin\n        (send\n          (send\n            (lvar :klass) :model_name) :element))) nil)) compact join _parameters include? "," excluded_from_(begin\n  (if\n    (send\n      (lvar :klass) :name)\n    (dstr\n      (begin\n        (send\n          (send\n            (lvar :klass) :model_name) :element))) nil)) compact join _parameters? "]}," ActiveRecord Encryption AutoFilteredParameters collect_for_later":{"type":"method","name":"collect_for_later","children":[],"call":["@attributes_by_class [] << ","@attributes_by_class [] ","Concurrent Array  new "]}," ActiveRecord Encryption AutoFilteredParameters collecting?":{"type":"method","name":"collecting?","children":[],"call":[]}," ActiveRecord Encryption AutoFilteredParameters apply_collected_attributes":{"type":"method","name":"apply_collected_attributes","children":[],"call":[" apply_filter ","attributes each ","@attributes_by_class each "]}," ActiveRecord Encryption AutoFilteredParameters attribute_was_declared":{"type":"method","name":"attribute_was_declared","children":[],"call":[" apply_filter "," collect_for_later "," collecting? "]}," ActiveRecord Encryption AutoFilteredParameters install_collecting_hook":{"type":"method","name":"install_collecting_hook","children":[],"call":[" attribute_was_declared ","ActiveRecord Encryption  on_encrypted_attribute_declared "]}," ActiveRecord Encryption AutoFilteredParameters enable":{"type":"method","name":"enable","children":[],"call":[" apply_collected_attributes "]}," ActiveRecord Encryption AutoFilteredParameters initialize":{"type":"method","name":"initialize","children":[],"call":[" install_collecting_hook ","Concurrent Map  new "]}," ActiveRecord deprecator":{"type":"method","name":"deprecator","children":[],"call":[]}," ActiveRecord DatabaseConfigurations register_db_config_handler":{"type":"method","name":"register_db_config_handler","children":[],"call":[]}," ActiveRecord DatabaseConfigurations HashConfig query_cache":{"type":"method","name":"query_cache","children":[],"call":[" configuration_hash [] "," configuration_hash "]}," ActiveRecord DatabaseConfigurations DatabaseConfig query_cache":{"type":"method","name":"query_cache","children":[],"call":[" raise "]}," ActiveRecord DatabaseConfigurations DatabaseConfig adapter_class_method":{"type":"method","name":"adapter_class_method","children":[],"call":[" adapter "]}," ActiveRecord CounterCache ClassMethods counter_cache_column?":{"type":"method","name":"counter_cache_column?","children":[],"call":[" _counter_cache_columns include? "," _counter_cache_columns "]}," ActiveRecord Core ClassMethods cached_find_by":{"type":"method","name":"cached_find_by","children":[],"call":[" raise ","statement execute first ","statement execute "," connection "," where limit "," where ","params bind ","keys index_with "," cached_find_by_statement "]}," ActiveRecord Core destroy_association_async_job":{"type":"method","name":"destroy_association_async_job","children":[],"call":[]}," ActiveRecord ConnectionHandling deprecation_for_delegation":{"type":"method","name":"deprecation_for_delegation","children":[],"call":["ActiveRecord  deprecator warn ","(str \"          Calling `ActiveRecord::Base.\") squish ","ActiveRecord  deprecator "]}," ActiveRecord ConnectionHandling flush_idle_connections!":{"type":"method","name":"flush_idle_connections!","children":[],"call":[" connection_handler flush_idle_connections! "," connection_handler "," deprecation_for_delegation "," __method__ "]}," ActiveRecord ConnectionHandling clear_all_connections!":{"type":"method","name":"clear_all_connections!","children":[],"call":[" connection_handler clear_all_connections! "," connection_handler "," deprecation_for_delegation "," __method__ "]}," ActiveRecord ConnectionHandling clear_reloadable_connections!":{"type":"method","name":"clear_reloadable_connections!","children":[],"call":[" connection_handler clear_reloadable_connections! "," connection_handler "," deprecation_for_delegation "," __method__ "]}," ActiveRecord ConnectionHandling clear_active_connections!":{"type":"method","name":"clear_active_connections!","children":[],"call":[" connection_handler clear_active_connections! "," connection_handler "," deprecation_for_delegation "," __method__ "]}," ActiveRecord ConnectionAdapters TrilogyAdapter default_prepared_statements":{"type":"method","name":"default_prepared_statements","children":[],"call":[]}," ActiveRecord ConnectionAdapters TrilogyAdapter translate_exception":{"type":"method","name":"translate_exception","children":[],"call":["ConnectionFailed  new ","(str \"Connection reset by peer|TRILOGY_CLOSED_CONNECTION|TRILOGY_INVALID_SEQUENCE_ID|TRILOGY_UNEXPECTED_PACKET\") match? ","exception message ","exception error_code ","exception respond_to? ","ActiveRecord AdapterTimeout  new ","exception error_code ! ","exception is_a? ","exception exception error_code  ","exception exception error_code  ! "]}," ActiveRecord ConnectionAdapters TrilogyAdapter get_full_version":{"type":"method","name":"get_full_version","children":[],"call":["conn server_info [] ","conn server_info "," with_raw_connection "]}," ActiveRecord ConnectionAdapters TrilogyAdapter full_version":{"type":"method","name":"full_version","children":[],"call":[" schema_cache database_version full_version_string "," schema_cache database_version "," schema_cache "]}," ActiveRecord ConnectionAdapters TrilogyAdapter reconnect":{"type":"method","name":"reconnect","children":[],"call":[" connect "," connection= "," connection "]}," ActiveRecord ConnectionAdapters TrilogyAdapter connect":{"type":"method","name":"connect","children":[],"call":[" raise ","ex set_pool "," connection= "," class new_client "," class "]}," ActiveRecord ConnectionAdapters TrilogyAdapter connection=":{"type":"method","name":"connection=","children":[],"call":[]}," ActiveRecord ConnectionAdapters TrilogyAdapter connection":{"type":"method","name":"connection","children":[],"call":[]}," ActiveRecord ConnectionAdapters TrilogyAdapter error_number":{"type":"method","name":"error_number","children":[],"call":["exception error_code ","exception respond_to? "]}," ActiveRecord ConnectionAdapters TrilogyAdapter each_hash":{"type":"method","name":"each_hash","children":[],"call":["hash []= ","keys [] ","row each ","result rows each ","result rows ","result fields map ","result fields "," to_enum "," block_given? ","result fields map  [] "]}," ActiveRecord ConnectionAdapters TrilogyAdapter text_type?":{"type":"method","name":"text_type?","children":[],"call":["TYPE_MAP  lookup is_a? ","TYPE_MAP  lookup "]}," ActiveRecord ConnectionAdapters TrilogyAdapter discard!":{"type":"method","name":"discard!","children":[],"call":[" connection= "," connection discard! "," connection "," connection nil? "]}," ActiveRecord ConnectionAdapters TrilogyAdapter disconnect!":{"type":"method","name":"disconnect!","children":[],"call":[" connection= "," connection close "," connection "," connection nil? "]}," ActiveRecord ConnectionAdapters TrilogyAdapter active?":{"type":"method","name":"active?","children":[],"call":[" connection "]}," ActiveRecord ConnectionAdapters TrilogyAdapter quote_string":{"type":"method","name":"quote_string","children":[],"call":["conn escape "," with_raw_connection "]}," ActiveRecord ConnectionAdapters TrilogyAdapter supports_lazy_transactions?":{"type":"method","name":"supports_lazy_transactions?","children":[],"call":[]}," ActiveRecord ConnectionAdapters TrilogyAdapter savepoint_errors_invalidate_transactions?":{"type":"method","name":"savepoint_errors_invalidate_transactions?","children":[],"call":[]}," ActiveRecord ConnectionAdapters TrilogyAdapter supports_savepoints?":{"type":"method","name":"supports_savepoints?","children":[],"call":[]}," ActiveRecord ConnectionAdapters TrilogyAdapter supports_comments_in_create?":{"type":"method","name":"supports_comments_in_create?","children":[],"call":[]}," ActiveRecord ConnectionAdapters TrilogyAdapter supports_comments?":{"type":"method","name":"supports_comments?","children":[],"call":[]}," ActiveRecord ConnectionAdapters TrilogyAdapter supports_json?":{"type":"method","name":"supports_json?","children":[],"call":[" database_version >= "," database_version "," mariadb? ! "," mariadb? "]}," ActiveRecord ConnectionAdapters TrilogyAdapter initialize_type_map":{"type":"method","name":"initialize_type_map","children":[],"call":["m register_type ","Type  lookup "," extract_limit "," extract_ extract_limit  "]}," ActiveRecord ConnectionAdapters TrilogyAdapter translate_connect_error":{"type":"method","name":"translate_connect_error","children":[],"call":["ActiveRecord ConnectionNotEstablished  new ","error message ","ActiveRecord DatabaseConnectionError  hostname_error ","config [] ","error message include? ","ActiveRecord DatabaseConnectionError  username_error ","ActiveRecord NoDatabaseError  db_error ","error error_code "]}," ActiveRecord ConnectionAdapters TrilogyAdapter parse_ssl_mode":{"type":"method","name":"parse_ssl_mode","children":[],"call":["SSL_MODES  fetch ","m to_sym ","m start_with? ","mode to_s upcase ","mode to_s ","mode is_a? ","mode to_s upcase  to_symode to_s upcase  ","mode to_s upcase  start_with? ","mode to_s upcase ode to_s upcase ","mode to_s upcase ode to_s ","mode to_s upcase ode is_a? "]}," ActiveRecord ConnectionAdapters TrilogyAdapter new_client":{"type":"method","name":"new_client","children":[],"call":[" raise "," translate_connect_error "," Trilogy  new ","config []= "," parse_ssl_mode ","config [] "]}," ActiveRecord ConnectionHandling trilogy_connection":{"type":"method","name":"trilogy_connection","children":[],"call":[" trilogy_adapter_class new "," logger "," trilogy_adapter_class ","configuration [] ","configuration []= ","config dup ","config dup  [] ","config dup  []= "]}," ActiveRecord ConnectionHandling trilogy_adapter_class":{"type":"method","name":"trilogy_adapter_class","children":[],"call":[]}," ActiveRecord ConnectionAdapters Trilogy DatabaseStatements with_multi_statements":{"type":"method","name":"with_multi_statements","children":[],"call":["conn set_server_option "," with_raw_connection "," multi_statements_enabled? "]}," ActiveRecord ConnectionAdapters Trilogy DatabaseStatements multi_statements_enabled?":{"type":"method","name":"multi_statements_enabled?","children":[],"call":["@config [] ! ! ","@config [] ! ","@config [] "]}," ActiveRecord ConnectionAdapters Trilogy DatabaseStatements execute_batch":{"type":"method","name":"execute_batch","children":[],"call":["conn next_result ","conn more_results_exist? "," raw_execute "," with_raw_connection "," combine_multi_statements each "," combine_multi_statements "," transform_query ","statements map "]}," ActiveRecord ConnectionAdapters Trilogy DatabaseStatements sync_timezone_changes":{"type":"method","name":"sync_timezone_changes","children":[],"call":[" Trilogy QUERY_FLAGS_LOCAL_TIMEZONE  ~ ","conn query_flags "," default_timezone == "," default_timezone "]}," ActiveRecord ConnectionAdapters Trilogy DatabaseStatements last_inserted_id":{"type":"method","name":"last_inserted_id","children":[],"call":["result last_insert_id "]}," ActiveRecord ConnectionAdapters Trilogy DatabaseStatements raw_execute":{"type":"method","name":"raw_execute","children":[],"call":[" handle_warnings ","conn query "," sync_timezone_changes "," with_raw_connection "," log "]}," ActiveRecord ConnectionAdapters Trilogy DatabaseStatements exec_delete":{"type":"method","name":"exec_delete","children":[],"call":["result affected_rows "," raw_execute "," to_sql "," mark_transaction_written_if_write "," check_if_write_query "," transform_query "," raw_execute  affected_rows "," to_ transform_query  "]}," ActiveRecord ConnectionAdapters Trilogy DatabaseStatements exec_insert":{"type":"method","name":"exec_insert","children":[],"call":[" raw_execute "," to_sql "," mark_transaction_written_if_write "," check_if_write_query "," transform_query "," to_ transform_query  "]}," ActiveRecord ConnectionAdapters Trilogy DatabaseStatements internal_exec_query":{"type":"method","name":"internal_exec_query","children":[],"call":["ActiveRecord Result  new ","result to_a ","result fields "," raw_execute "," mark_transaction_written_if_write "," check_if_write_query "," transform_query "," raw_execute  to_a "," raw_execute  fields "]}," ActiveRecord ConnectionAdapters Trilogy DatabaseStatements select_all":{"type":"method","name":"select_all","children":[],"call":["conn next_result ","conn more_results_exist? "," with_raw_connection "]}," ActiveRecord ConnectionAdapters StatementPool reset":{"type":"method","name":"reset","children":[],"call":[" cache clear "," cache "]}," ActiveRecord ConnectionAdapters SQLite3Adapter reconnect":{"type":"method","name":"reconnect","children":[],"call":[" connect ","@raw_connection rollback "," active? "]}," ActiveRecord ConnectionAdapters SQLite3Adapter add_timestamps":{"type":"method","name":"add_timestamps","children":[],"call":["definition column "," alter_table ","options []= ","options key? ! ","options key? ","options [] nil? ","options [] "]}," ActiveRecord ConnectionAdapters SQLite3Adapter check_all_foreign_keys_valid!":{"type":"method","name":"check_all_foreign_keys_valid!","children":[],"call":[" raise ","ActiveRecord StatementInvalid  new ","tables join ","row [] ","result map ","result blank? "," execute "," execute  map "," execute  blank? "]}," ActiveRecord ConnectionAdapters SQLite3Adapter dbconsole":{"type":"method","name":"dbconsole","children":[],"call":[" find_cmd_and_exec ","args << ","File  expand_path ","Rails  root ","Rails  respond_to? ","config database ","options [] "]}," ActiveRecord ConnectionAdapters SQLite3Adapter new_client":{"type":"method","name":"new_client","children":[],"call":[" raise ","error message include? ","error message "," SQLite3 Database  new ","config [] to_s ","config [] "]}," ActiveRecord ConnectionHandling sqlite3_adapter_class":{"type":"method","name":"sqlite3_adapter_class","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLite3 SchemaStatements is_column_the_rowid?":{"type":"method","name":"is_column_the_rowid?","children":[],"call":["c [] > ","c [] ","column_definitions one? ","field [] == ","field [] ","INTEGER_REGEX  match? "]}," ActiveRecord ConnectionAdapters SQLite3 SchemaStatements valid_table_definition_options":{"type":"method","name":"valid_table_definition_options","children":[],"call":[" + "]}," ActiveRecord ConnectionAdapters SQLite3 DatabaseStatements raw_execute":{"type":"method","name":"raw_execute","children":[],"call":["conn execute "," with_raw_connection "," log "]}," ActiveRecord ConnectionAdapters SQLite3 DatabaseStatements internal_exec_query":{"type":"method","name":"internal_exec_query","children":[],"call":[" build_result ","stmt close ","stmt to_a ","stmt bind_params "," without_prepared_statement? ","stmt columns ","conn prepare ","stmt reset! ","@statements [] "," with_raw_connection "," log "," type_casted_binds "," mark_transaction_written_if_write "," check_if_write_query "," transform_query ","conn prepare  close ","conn prepare  to_a ","conn prepare  bind_params ","conn prepare  columns ","conn prepare  reset! ","  type_casted_binds  "]}," ActiveRecord ConnectionAdapters SQLite3 Column hash":{"type":"method","name":"hash","children":[],"call":["Column  hash ^ ^ ^ "," rowid hash "," rowid ","Column  hash ^ ^ "," auto_increment? hash "," auto_increment? ","Column  hash ^ "," hash ","Column  hash "]}," ActiveRecord ConnectionAdapters SQLite3 Column ==":{"type":"method","name":"==","children":[],"call":[" auto_increment? == ","other auto_increment? "," auto_increment? ","other is_a? "]}," ActiveRecord ConnectionAdapters SQLite3 Column encode_with":{"type":"method","name":"encode_with","children":[],"call":["coder []= "]}," ActiveRecord ConnectionAdapters SQLite3 Column init_with":{"type":"method","name":"init_with","children":[],"call":["coder [] "]}," ActiveRecord ConnectionAdapters SQLite3 Column auto_incremented_by_db?":{"type":"method","name":"auto_incremented_by_db?","children":[],"call":[" rowid "," auto_increment? "]}," ActiveRecord ConnectionAdapters SQLite3 Column auto_increment?":{"type":"method","name":"auto_increment?","children":[],"call":[]}," ActiveRecord ConnectionAdapters SQLite3 Column initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters SchemaCache add_all":{"type":"method","name":"add_all","children":[],"call":[" database_version "," version "," add "," tables_to_cache each "," tables_to_cache "]}," ActiveRecord ConnectionAdapters SchemaCache schema_version":{"type":"method","name":"schema_version","children":[],"call":[]}," ActiveRecord ConnectionAdapters SchemaCache version":{"type":"method","name":"version","children":[],"call":["connection schema_version "]}," ActiveRecord ConnectionAdapters SchemaCache cached?":{"type":"method","name":"cached?","children":[],"call":["@columns key? "]}," ActiveRecord ConnectionAdapters SchemaCache _load_from":{"type":"method","name":"_load_from","children":[],"call":[]}," ActiveRecord ConnectionAdapters SchemaCache new":{"type":"method","name":"new","children":[],"call":["BoundSchemaReflection  new ","SchemaReflection  new "]}," ActiveRecord ConnectionAdapters BoundSchemaReflection dump_to":{"type":"method","name":"dump_to","children":[],"call":["@schema_reflection dump_to "]}," ActiveRecord ConnectionAdapters BoundSchemaReflection clear_data_source_cache!":{"type":"method","name":"clear_data_source_cache!","children":[],"call":["@schema_reflection clear_data_source_cache! "]}," ActiveRecord ConnectionAdapters BoundSchemaReflection size":{"type":"method","name":"size","children":[],"call":["@schema_reflection size "]}," ActiveRecord ConnectionAdapters BoundSchemaReflection version":{"type":"method","name":"version","children":[],"call":["@schema_reflection version "]}," ActiveRecord ConnectionAdapters BoundSchemaReflection database_version":{"type":"method","name":"database_version","children":[],"call":["@schema_reflection database_version "]}," ActiveRecord ConnectionAdapters BoundSchemaReflection indexes":{"type":"method","name":"indexes","children":[],"call":["@schema_reflection indexes "]}," ActiveRecord ConnectionAdapters BoundSchemaReflection columns_hash?":{"type":"method","name":"columns_hash?","children":[],"call":["@schema_reflection columns_hash? "]}," ActiveRecord ConnectionAdapters BoundSchemaReflection columns_hash":{"type":"method","name":"columns_hash","children":[],"call":["@schema_reflection columns_hash "]}," ActiveRecord ConnectionAdapters BoundSchemaReflection columns":{"type":"method","name":"columns","children":[],"call":["@schema_reflection columns "]}," ActiveRecord ConnectionAdapters BoundSchemaReflection data_sources":{"type":"method","name":"data_sources","children":[],"call":["@schema_reflection data_sources "]}," ActiveRecord ConnectionAdapters BoundSchemaReflection add":{"type":"method","name":"add","children":[],"call":["@schema_reflection add "]}," ActiveRecord ConnectionAdapters BoundSchemaReflection data_source_exists?":{"type":"method","name":"data_source_exists?","children":[],"call":["@schema_reflection data_source_exists? "]}," ActiveRecord ConnectionAdapters BoundSchemaReflection primary_keys":{"type":"method","name":"primary_keys","children":[],"call":["@schema_reflection primary_keys "]}," ActiveRecord ConnectionAdapters BoundSchemaReflection cached?":{"type":"method","name":"cached?","children":[],"call":["@schema_reflection cached? "]}," ActiveRecord ConnectionAdapters BoundSchemaReflection load!":{"type":"method","name":"load!","children":[],"call":["@schema_reflection load! "]}," ActiveRecord ConnectionAdapters BoundSchemaReflection clear!":{"type":"method","name":"clear!","children":[],"call":["@schema_reflection clear! "]}," ActiveRecord ConnectionAdapters BoundSchemaReflection initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters SchemaReflection load_cache":{"type":"method","name":"load_cache","children":[],"call":[" warn ","error message ","error class ","new_cache schema_version ","new_cache version != ","new_cache version ","connection schema_version "," class check_schema_cache_dump_version "," class ","SchemaCache  _load_from "," possible_cache_available? ","SchemaCache  _load_from  schema_version ","SchemaCache  _load_from  version != ","SchemaCache  _load_from  version "]}," ActiveRecord ConnectionAdapters SchemaReflection possible_cache_available?":{"type":"method","name":"possible_cache_available?","children":[],"call":["File  file? "," class use_schema_cache_dump "," class "]}," ActiveRecord ConnectionAdapters SchemaReflection cache":{"type":"method","name":"cache","children":[],"call":[" empty_cache "," load_cache "]}," ActiveRecord ConnectionAdapters SchemaReflection empty_cache":{"type":"method","name":"empty_cache","children":[],"call":["new_cache send ","SchemaCache  allocate ","SchemaCache  allocate  send "]}," ActiveRecord ConnectionAdapters SchemaReflection dump_to":{"type":"method","name":"dump_to","children":[],"call":["fresh_cache dump_to ","fresh_cache add_all "," empty_cache "," empty_cache  dump_to "," empty_cache  add_all "]}," ActiveRecord ConnectionAdapters SchemaReflection cached?":{"type":"method","name":"cached?","children":[],"call":[" load_cache "," class check_schema_cache_dump_version "," class ","@cache nil? "," load_cache  nil? "]}," ActiveRecord ConnectionAdapters SchemaReflection clear_data_source_cache!":{"type":"method","name":"clear_data_source_cache!","children":[],"call":[" cache clear_data_source_cache! "," cache "," possible_cache_available? ! "," possible_cache_available? ","@cache nil? "]}," ActiveRecord ConnectionAdapters SchemaReflection size":{"type":"method","name":"size","children":[],"call":[" cache size "," cache "]}," ActiveRecord ConnectionAdapters SchemaReflection version":{"type":"method","name":"version","children":[],"call":[" cache version "," cache "]}," ActiveRecord ConnectionAdapters SchemaReflection database_version":{"type":"method","name":"database_version","children":[],"call":[" cache database_version "," cache "]}," ActiveRecord ConnectionAdapters SchemaReflection indexes":{"type":"method","name":"indexes","children":[],"call":[" cache indexes "," cache "]}," ActiveRecord ConnectionAdapters SchemaReflection columns_hash?":{"type":"method","name":"columns_hash?","children":[],"call":[" cache columns_hash? "," cache "]}," ActiveRecord ConnectionAdapters SchemaReflection columns_hash":{"type":"method","name":"columns_hash","children":[],"call":[" cache columns_hash "," cache "]}," ActiveRecord ConnectionAdapters SchemaReflection columns":{"type":"method","name":"columns","children":[],"call":[" cache columns "," cache "]}," ActiveRecord ConnectionAdapters SchemaReflection data_sources":{"type":"method","name":"data_sources","children":[],"call":[" cache data_sources "," cache "]}," ActiveRecord ConnectionAdapters SchemaReflection add":{"type":"method","name":"add","children":[],"call":[" cache add "," cache "]}," ActiveRecord ConnectionAdapters SchemaReflection data_source_exists?":{"type":"method","name":"data_source_exists?","children":[],"call":[" cache data_source_exists? "," cache "]}," ActiveRecord ConnectionAdapters SchemaReflection primary_keys":{"type":"method","name":"primary_keys","children":[],"call":[" cache primary_keys "," cache "]}," ActiveRecord ConnectionAdapters SchemaReflection load!":{"type":"method","name":"load!","children":[],"call":[" cache "]}," ActiveRecord ConnectionAdapters SchemaReflection clear!":{"type":"method","name":"clear!","children":[],"call":[" empty_cache "]}," ActiveRecord ConnectionAdapters SchemaReflection set_schema_cache":{"type":"method","name":"set_schema_cache","children":[],"call":[]}," ActiveRecord ConnectionAdapters SchemaReflection initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter reconfigure_connection_timezone":{"type":"method","name":"reconfigure_connection_timezone","children":[],"call":[" internal_execute "," default_timezone == "," default_timezone ","variables [] ","@config fetch stringify_keys ","@config fetch ","@config fetch stringify_keys  [] "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter reconnect":{"type":"method","name":"reconnect","children":[],"call":[" connect "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter retryable_query_error?":{"type":"method","name":"retryable_query_error?","children":[],"call":["(ivar :@raw_connection) != "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter table_name_length":{"type":"method","name":"table_name_length","children":[],"call":[" max_identifier_length - ","_pkey length "," max_identifier_length "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter rename_enum_value":{"type":"method","name":"rename_enum_value","children":[],"call":[" reload_type_map "," execute tap "," execute "," quote_table_name "," raise ","options fetch "," database_version >= "," database_version "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter add_enum_value":{"type":"method","name":"add_enum_value","children":[],"call":[" reload_type_map "," execute tap "," execute ","sql << "," raise ","(str \"ALTER TYPE \") +@ "," quote_table_name ","options values_at ","(str \"ALTER TYPE \") +@  << "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter rename_enum":{"type":"method","name":"rename_enum","children":[],"call":[" reload_type_map "," exec_query tap "," exec_query "," quote_table_name "," raise ","options fetch "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter drop_enum":{"type":"method","name":"drop_enum","children":[],"call":[" internal_exec_query "," quote_table_name ","options [] "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter return_value_after_insert?":{"type":"method","name":"return_value_after_insert?","children":[],"call":["column auto_populated? "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter supports_nulls_not_distinct?":{"type":"method","name":"supports_nulls_not_distinct?","children":[],"call":[" database_version >= "," database_version "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter supports_restart_db_transaction?":{"type":"method","name":"supports_restart_db_transaction?","children":[],"call":[" database_version >= "," database_version "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter supports_unique_keys?":{"type":"method","name":"supports_unique_keys?","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter supports_exclusion_constraints?":{"type":"method","name":"supports_exclusion_constraints?","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter supports_index_include?":{"type":"method","name":"supports_index_include?","children":[],"call":[" database_version >= "," database_version "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter dbconsole":{"type":"method","name":"dbconsole","children":[],"call":[" find_cmd_and_exec ","config database ","ENV  []= ","(send\n  (send\n    (lvar :pg_config) :[]\n    (sym :variables)) :filter_map) join ","value to_s gsub ","value to_s ","value == ","pg_config [] filter_map ","pg_config [] ","pg_config [] to_s ","options [] ","config configuration_hash ","(send\n  (send\n    (lvar :config configuration_hash ) :[]\n    (sym :variables)) :filter_map) join ","config configuration_hash  [] filter_map ","config configuration_hash  [] ","config configuration_hash  [] to_s "]}," ActiveRecord ConnectionHandling postgresql_adapter_class":{"type":"method","name":"postgresql_adapter_class","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements column_names_from_column_numbers":{"type":"method","name":"column_names_from_column_numbers","children":[],"call":["Hash  [] values_at compact ","Hash  [] values_at ","Hash  [] "," query ","column_numbers join "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements unique_key_for!":{"type":"method","name":"unique_key_for!","children":[],"call":[" raise "," unique_key_for "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements unique_key_for":{"type":"method","name":"unique_key_for","children":[],"call":["unique_key defined_for? "," unique_keys detect "," unique_keys "," unique_key_name ","options key? "," unique_key_ unique_key_name  "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements unique_key_name":{"type":"method","name":"unique_key_name","children":[],"call":["Digest SHA256  hexdigest first ","Digest SHA256  hexdigest ","column_or_index * "," Array map "," Array ","options [] ","options fetch "," Array map  * "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements exclusion_constraint_for!":{"type":"method","name":"exclusion_constraint_for!","children":[],"call":[" raise "," exclusion_constraint_for "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements exclusion_constraint_for":{"type":"method","name":"exclusion_constraint_for","children":[],"call":["excl name == ","excl name "," exclusion_constraints detect "," exclusion_constraints "," exclusion_constraint_name "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements exclusion_constraint_name":{"type":"method","name":"exclusion_constraint_name","children":[],"call":["Digest SHA256  hexdigest first ","Digest SHA256  hexdigest ","options fetch "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements reference_name_for_table":{"type":"method","name":"reference_name_for_table","children":[],"call":["table_name singularize "," extract_schema_qualified_name ","table_name to_s "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements extract_constraint_deferrable":{"type":"method","name":"extract_constraint_deferrable","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements assert_valid_deferrable":{"type":"method","name":"assert_valid_deferrable","children":[],"call":[" raise ","deferrable inspect ","(sym :immediate) include? ","deferrable ! "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements quoted_include_columns_for_index":{"type":"method","name":"quoted_include_columns_for_index","children":[],"call":[" add_options_for_index_columns values join "," add_options_for_index_columns values "," add_options_for_index_columns ","result []= "," quote_column_name dup "," quote_column_name ","name to_sym ","column_names each_with_object ","column_names is_a? "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements add_index_options":{"type":"method","name":"add_index_options","children":[],"call":["options []= "," quote_column_name "," column_exists? "," table_exists? ","options [] "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements foreign_key_column_for":{"type":"method","name":"foreign_key_column_for","children":[],"call":[" extract_schema_qualified_name "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements remove_unique_key":{"type":"method","name":"remove_unique_key","children":[],"call":[" execute "," schema_creation accept "," schema_creation ","at drop_unique_key "," create_alter_table "," unique_key_for! name "," unique_key_for! "," schema_cre create_alter_table ion accept "," schema_cre create_alter_table ion "," create_alter_table  drop_unique_key "," cre create_alter_table e_alter_table "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements unique_key_options":{"type":"method","name":"unique_key_options","children":[],"call":[" unique_key_name ","options [] ","options dup "," raise "," assert_valid_deferrable ","options dup  [] ","options dup  dup "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements add_unique_key":{"type":"method","name":"add_unique_key","children":[],"call":[" execute "," schema_creation accept "," schema_creation ","at add_unique_key "," create_alter_table "," unique_key_options "," schema_cre create_alter_table ion accept "," schema_cre create_alter_table ion "," create_alter_table  add_unique_key "," cre create_alter_table e_alter_table "," unique_key_ unique_key_options  "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements remove_exclusion_constraint":{"type":"method","name":"remove_exclusion_constraint","children":[],"call":[" execute "," schema_creation accept "," schema_creation ","at drop_exclusion_constraint "," create_alter_table "," exclusion_constraint_for! name "," exclusion_constraint_for! "," schema_cre create_alter_table ion accept "," schema_cre create_alter_table ion "," create_alter_table  drop_exclusion_constraint "," cre create_alter_table e_alter_table "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements exclusion_constraint_options":{"type":"method","name":"exclusion_constraint_options","children":[],"call":[" exclusion_constraint_name ","options [] ","options dup "," assert_valid_deferrable ","options dup  [] ","options dup  dup "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements add_exclusion_constraint":{"type":"method","name":"add_exclusion_constraint","children":[],"call":[" execute "," schema_creation accept "," schema_creation ","at add_exclusion_constraint "," create_alter_table "," exclusion_constraint_options "," schema_cre create_alter_table ion accept "," schema_cre create_alter_table ion "," create_alter_table  add_exclusion_constraint "," cre create_alter_table e_alter_table "," exclusion_constraint_ exclusion_constraint_options  "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements unique_keys":{"type":"method","name":"unique_keys","children":[],"call":["UniqueKeyDefinition  new ","row [] "," query_values "," extract_constraint_deferrable ","unique_info map "," internal_exec_query ","scope [] "," quoted_scope "," extract_constraint_ extract_constraint_deferrable  "," internal_exec_query  map "," quoted_scope  [] "," quoted_ quoted_scope  "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements exclusion_constraints":{"type":"method","name":"exclusion_constraints","children":[],"call":["ExclusionConstraintDefinition  new ","method_and_elements_parts [] ","method_and_elements_parts [] to_sym ","row [] "," extract_constraint_deferrable ","predicate from to ","predicate from ","predicate remove! ","method_and_elements match ","row [] split ","exclusion_info map "," internal_exec_query ","scope [] "," quoted_scope ","method_and_elements match  [] ","method_and_elements match  [] to_sym "," extract_constraint_ extract_constraint_deferrable  ","predicate from to  from to ","predicate from to  from ","predicate from to  remove! "," internal_exec_query  map "," quoted_scope  [] "," quoted_ quoted_scope  "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements add_foreign_key":{"type":"method","name":"add_foreign_key","children":[],"call":[" assert_valid_deferrable ","options [] ","options []= ","ActiveRecord  deprecator warn ","ActiveRecord  deprecator ","options [] == "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements index_name":{"type":"method","name":"index_name","children":[],"call":[" extract_schema_qualified_name ","table_name to_s "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements build_create_index_definition":{"type":"method","name":"build_create_index_definition","children":[],"call":["CreateIndexDefinition  new "," add_index_options "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements build_change_column_default_definition":{"type":"method","name":"build_change_column_default_definition","children":[],"call":["ChangeColumnDefaultDefinition  new "," extract_new_default_value "," column_for "," extract_new_ extract_new_default_value _value ","  column_for _for "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaStatements build_change_column_definition":{"type":"method","name":"build_change_column_definition","children":[],"call":["ChangeColumnDefinition  new ","td new_column_definition "," create_table_definition "," create_table_definition  new_column_definition "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaDumper unique_keys_in_create":{"type":"method","name":"unique_keys_in_create","children":[],"call":["stream puts ","add_unique_key_statements sort join ","add_unique_key_statements sort ","parts join ","parts << ","unique_key name inspect ","unique_key name ","unique_key export_name_on_schema_dump? ","unique_key deferrable inspect ","unique_key deferrable ","unique_key column inspect ","unique_key column ","unique_keys map ","(lvasgn :unique_keys\n  (send\n    (ivar :@connection) :unique_keys\n    (lvar :table))) any? ","@connection unique_keys ","@connection unique_keys  map ","(lvasgn :@connection unique_keys \n  (send\n    (ivar :@connection) :@connection unique_keys \n    (lvar :table))) any? ","@connection @connection unique_keys  "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaDumper exclusion_constraints_in_create":{"type":"method","name":"exclusion_constraints_in_create","children":[],"call":["stream puts ","add_exclusion_constraint_statements sort join ","add_exclusion_constraint_statements sort ","parts join ","parts << ","exclusion_constraint name inspect ","exclusion_constraint name ","exclusion_constraint export_name_on_schema_dump? ","exclusion_constraint deferrable inspect ","exclusion_constraint deferrable ","exclusion_constraint using inspect ","exclusion_constraint using ","exclusion_constraint where inspect ","exclusion_constraint where ","exclusion_constraint expression inspect ","exclusion_constraint expression ","exclusion_constraints map ","(lvasgn :exclusion_constraints\n  (send\n    (ivar :@connection) :exclusion_constraints\n    (lvar :table))) any? ","@connection exclusion_constraints ","@connection exclusion_constraints  map ","(lvasgn :@connection exclusion_constraints \n  (send\n    (ivar :@connection) :@connection exclusion_constraints \n    (lvar :table))) any? ","@connection @connection exclusion_constraints  "]}," ActiveRecord ConnectionAdapters PostgreSQL AlterTable drop_unique_key":{"type":"method","name":"drop_unique_key","children":[],"call":["@unique_key_drops << "]}," ActiveRecord ConnectionAdapters PostgreSQL AlterTable add_unique_key":{"type":"method","name":"add_unique_key","children":[],"call":["@unique_key_adds << ","@td new_unique_key_definition "]}," ActiveRecord ConnectionAdapters PostgreSQL AlterTable drop_exclusion_constraint":{"type":"method","name":"drop_exclusion_constraint","children":[],"call":["@exclusion_constraint_drops << "]}," ActiveRecord ConnectionAdapters PostgreSQL AlterTable add_exclusion_constraint":{"type":"method","name":"add_exclusion_constraint","children":[],"call":["@exclusion_constraint_adds << ","@td new_exclusion_constraint_definition "]}," ActiveRecord ConnectionAdapters PostgreSQL Table remove_unique_key":{"type":"method","name":"remove_unique_key","children":[],"call":["@base remove_unique_key "," name "]}," ActiveRecord ConnectionAdapters PostgreSQL Table unique_key":{"type":"method","name":"unique_key","children":[],"call":["@base add_unique_key "," name "]}," ActiveRecord ConnectionAdapters PostgreSQL Table remove_exclusion_constraint":{"type":"method","name":"remove_exclusion_constraint","children":[],"call":["@base remove_exclusion_constraint "," name "]}," ActiveRecord ConnectionAdapters PostgreSQL Table exclusion_constraint":{"type":"method","name":"exclusion_constraint","children":[],"call":["@base add_exclusion_constraint "," name "]}," ActiveRecord ConnectionAdapters PostgreSQL TableDefinition valid_column_definition_options":{"type":"method","name":"valid_column_definition_options","children":[],"call":[" + "]}," ActiveRecord ConnectionAdapters PostgreSQL TableDefinition new_unique_key_definition":{"type":"method","name":"new_unique_key_definition","children":[],"call":["UniqueKeyDefinition  new "," name ","@conn unique_key_options ","@conn unique_key_@conn unique_key_options  "]}," ActiveRecord ConnectionAdapters PostgreSQL TableDefinition new_exclusion_constraint_definition":{"type":"method","name":"new_exclusion_constraint_definition","children":[],"call":["ExclusionConstraintDefinition  new "," name ","@conn exclusion_constraint_options ","@conn exclusion_constraint_@conn exclusion_constraint_options  "]}," ActiveRecord ConnectionAdapters PostgreSQL TableDefinition unique_key":{"type":"method","name":"unique_key","children":[],"call":[" unique_keys << "," new_unique_key_definition "," unique_keys "]}," ActiveRecord ConnectionAdapters PostgreSQL TableDefinition exclusion_constraint":{"type":"method","name":"exclusion_constraint","children":[],"call":[" exclusion_constraints << "," new_exclusion_constraint_definition "," exclusion_constraints "]}," ActiveRecord ConnectionAdapters PostgreSQL defined_for?":{"type":"method","name":"defined_for?","children":[],"call":[" options [] to_s == ","v to_s "," options [] to_s "," options [] "," options ","options all? "," Array == "," Array map "," Array "," column ","column nil? "," name == ","name to_s "," name ","name nil? "]}," ActiveRecord ConnectionAdapters PostgreSQL export_name_on_schema_dump?":{"type":"method","name":"export_name_on_schema_dump?","children":[],"call":["ActiveRecord SchemaDumper  unique_ignore_pattern match? ! ","ActiveRecord SchemaDumper  unique_ignore_pattern match? "," name ","ActiveRecord SchemaDumper  unique_ignore_pattern ","ActiveRecord SchemaDumper  excl_ignore_pattern match? ! ","ActiveRecord SchemaDumper  excl_ignore_pattern match? ","ActiveRecord SchemaDumper  excl_ignore_pattern "]}," ActiveRecord ConnectionAdapters PostgreSQL using_index":{"type":"method","name":"using_index","children":[],"call":[" options [] "," options "]}," ActiveRecord ConnectionAdapters PostgreSQL deferrable":{"type":"method","name":"deferrable","children":[],"call":[" options [] "," options "]}," ActiveRecord ConnectionAdapters PostgreSQL name":{"type":"method","name":"name","children":[],"call":[" options [] "," options "]}," ActiveRecord ConnectionAdapters PostgreSQL where":{"type":"method","name":"where","children":[],"call":[" options [] "," options "]}," ActiveRecord ConnectionAdapters PostgreSQL using":{"type":"method","name":"using","children":[],"call":[" options [] "," options "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaCreation quoted_include_columns":{"type":"method","name":"quoted_include_columns","children":[],"call":[" quoted_include_columns_for_index ","String  === "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaCreation visit_ChangeColumnDefaultDefinition":{"type":"method","name":"visit_ChangeColumnDefaultDefinition","children":[],"call":["sql << "," quote_default_expression ","o column ","o default ","o default nil? ","(str \"ALTER COLUMN \") +@ "," quote_column_name ","o column name ","(str \"ALTER COLUMN \") +@  << "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaCreation visit_DropUniqueKey":{"type":"method","name":"visit_DropUniqueKey","children":[],"call":[" quote_column_name "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaCreation visit_AddUniqueKey":{"type":"method","name":"visit_AddUniqueKey","children":[],"call":[" accept "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaCreation visit_DropExclusionConstraint":{"type":"method","name":"visit_DropExclusionConstraint","children":[],"call":[" quote_column_name "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaCreation visit_AddExclusionConstraint":{"type":"method","name":"visit_AddExclusionConstraint","children":[],"call":[" accept "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaCreation visit_UniqueKeyDefinition":{"type":"method","name":"visit_UniqueKeyDefinition","children":[],"call":["sql join ","sql << ","o deferrable to_s upcase ","o deferrable to_s ","o deferrable "," quote_column_name ","o using_index ","o name ","(send\n  (send nil :Array\n    (send\n      (lvar :o) :column)) :map) join "," Array map "," Array ","o column "," quote_(send\n  (send nil :Array\n    (send\n      (lvar :o) :column)) :map) join  "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaCreation visit_ExclusionConstraintDefinition":{"type":"method","name":"visit_ExclusionConstraintDefinition","children":[],"call":["sql join ","sql << ","o deferrable to_s upcase ","o deferrable to_s ","o deferrable ","o where ","o expression ","o using "," quote_column_name ","o name "]}," ActiveRecord ConnectionAdapters PostgreSQL SchemaCreation visit_ForeignKeyDefinition":{"type":"method","name":"visit_ForeignKeyDefinition","children":[],"call":["sql << ","o deferrable to_s upcase ","o deferrable to_s ","o deferrable "," dup tap "," dup "]}," ActiveRecord ConnectionAdapters PostgreSQL ReferentialIntegrity check_all_foreign_keys_valid!":{"type":"method","name":"check_all_foreign_keys_valid!","children":[],"call":[" execute "," transaction "]}," ActiveRecord ConnectionAdapters PostgreSQL OID Range sanitize_bounds":{"type":"method","name":"sanitize_bounds","children":[],"call":["INFINITE_FLOAT_RANGE  cover? ! ","INFINITE_FLOAT_RANGE  cover? ","to == ","from == "," Float INFINITY  -@ "]}," ActiveRecord ConnectionAdapters PostgreSQL DatabaseStatements warning_ignored?":{"type":"method","name":"warning_ignored?","children":[],"call":["(str \"WARNING\") exclude? ","warning level "]}," ActiveRecord ConnectionAdapters PostgreSQL DatabaseStatements handle_warnings":{"type":"method","name":"handle_warnings","children":[],"call":["ActiveRecord  db_warnings_action call ","ActiveRecord  db_warnings_action ","warning sql= "," warning_ignored? ","@notice_receiver_sql_warnings each "]}," ActiveRecord ConnectionAdapters PostgreSQL DatabaseStatements returning_column_values":{"type":"method","name":"returning_column_values","children":[],"call":["result rows first ","result rows "]}," ActiveRecord ConnectionAdapters PostgreSQL DatabaseStatements cancel_any_running_query":{"type":"method","name":"cancel_any_running_query","children":[],"call":["@raw_connection block ","@raw_connection cancel ","IDLE_TRANSACTION_STATUSES  include? ","@raw_connection transaction_status ","@raw_connection nil? "]}," ActiveRecord ConnectionAdapters PostgreSQL DatabaseStatements build_explain_clause":{"type":"method","name":"build_explain_clause","children":[],"call":["options join upcase ","options join ","options empty? "]}," ActiveRecord ConnectionAdapters PostgreSQL DatabaseStatements exec_restart_db_transaction":{"type":"method","name":"exec_restart_db_transaction","children":[],"call":[" internal_execute "," cancel_any_running_query "]}," ActiveRecord ConnectionAdapters PostgreSQL DatabaseStatements internal_exec_query":{"type":"method","name":"internal_exec_query","children":[],"call":[" build_result ","result values ","types []= "," get_oid_type ","result fmod ","result ftype ","fields each_with_index ","result fields "," execute_and_clear ","result result fmod  ","result result ftype  ","result fields  each_with_index ","result result fields  "]}," ActiveRecord ConnectionAdapters PostgreSQL DatabaseStatements raw_execute":{"type":"method","name":"raw_execute","children":[],"call":[" handle_warnings ","conn async_exec "," with_raw_connection "," log "]}," ActiveRecord ConnectionAdapters PoolManager each_pool_config":{"type":"method","name":"each_pool_config","children":[],"call":["shard_map each_value ","@role_to_shard_mapping each_value ","@role_to_shard_mapping [] each_value ","@role_to_shard_mapping [] "]}," ActiveRecord ConnectionAdapters PoolConfig connection_name":{"type":"method","name":"connection_name","children":[],"call":[" connection_class name "," connection_class "," connection_class primary_class? "]}," ActiveRecord ConnectionAdapters PoolConfig disconnect_all!":{"type":"method","name":"disconnect_all!","children":[],"call":["c disconnect! ","INSTANCES  each_key "]}," ActiveRecord ConnectionAdapters PoolConfig schema_reflection":{"type":"method","name":"schema_reflection","children":[],"call":["SchemaReflection  new "," db_config lazy_schema_cache_path "," db_config "]}," ActiveRecord ConnectionAdapters Mysql2Adapter default_prepared_statements":{"type":"method","name":"default_prepared_statements","children":[],"call":[]}," ActiveRecord ConnectionAdapters Mysql2Adapter reconnect":{"type":"method","name":"reconnect","children":[],"call":[" connect "]}," ActiveRecord ConnectionAdapters Mysql2Adapter text_type?":{"type":"method","name":"text_type?","children":[],"call":["TYPE_MAP  lookup is_a? ","TYPE_MAP  lookup "]}," ActiveRecord ConnectionAdapters Mysql2Adapter savepoint_errors_invalidate_transactions?":{"type":"method","name":"savepoint_errors_invalidate_transactions?","children":[],"call":[]}," ActiveRecord ConnectionAdapters Mysql2Adapter initialize_type_map":{"type":"method","name":"initialize_type_map","children":[],"call":["m register_type ","Type  lookup "," extract_limit "," extract_ extract_limit  "]}," ActiveRecord ConnectionHandling mysql2_adapter_class":{"type":"method","name":"mysql2_adapter_class","children":[],"call":[]}," ActiveRecord ConnectionAdapters Mysql2 DatabaseStatements exec_stmt_and_free":{"type":"method","name":"exec_stmt_and_free","children":[],"call":["stmt close ","result free "," raise ","@statements delete ","stmt execute ","ActiveSupport Dependencies  interlock permit_concurrent_loads ","ActiveSupport Dependencies  interlock ","conn prepare ","@statements [] "," sync_timezone_changes "," with_raw_connection "," log "," type_casted_binds "," mark_transaction_written_if_write "," check_if_write_query "," transform_query ","conn prepare  close ","conn prepare  execute ","  type_casted_binds  "]}," ActiveRecord ConnectionAdapters Mysql2 DatabaseStatements raw_execute":{"type":"method","name":"raw_execute","children":[],"call":[" handle_warnings ","conn query "," sync_timezone_changes "," with_raw_connection "," log "]}," ActiveRecord ConnectionAdapters Mysql2 DatabaseStatements with_multi_statements":{"type":"method","name":"with_multi_statements","children":[],"call":["conn set_server_option "," with_raw_connection "," multi_statements_enabled? "]}," ActiveRecord ConnectionAdapters Mysql2 DatabaseStatements multi_statements_enabled?":{"type":"method","name":"multi_statements_enabled?","children":[],"call":["flags anybits? ","flags include? ","flags is_a? ","@config [] ","@config []  anybits? ","@config []  include? ","@config []  is_a? "]}," ActiveRecord ConnectionAdapters Mysql2 DatabaseStatements last_inserted_id":{"type":"method","name":"last_inserted_id","children":[],"call":[]}," ActiveRecord ConnectionAdapters Mysql2 DatabaseStatements execute_batch":{"type":"method","name":"execute_batch","children":[],"call":["conn abandon_results! "," raw_execute "," with_raw_connection "," combine_multi_statements each "," combine_multi_statements "," transform_query ","statements map "]}," ActiveRecord ConnectionAdapters Mysql2 DatabaseStatements sync_timezone_changes":{"type":"method","name":"sync_timezone_changes","children":[],"call":["raw_connection query_options []= "," default_timezone ","raw_connection query_options "]}," ActiveRecord ConnectionAdapters Mysql2 DatabaseStatements exec_delete":{"type":"method","name":"exec_delete","children":[],"call":["stmt affected_rows "," exec_stmt_and_free ","conn affected_rows "," execute_and_free "," with_raw_connection "," without_prepared_statement? "]}," ActiveRecord ConnectionAdapters Mysql2 DatabaseStatements internal_exec_query":{"type":"method","name":"internal_exec_query","children":[],"call":[" build_result ","result to_a ","result fields "," exec_stmt_and_free "," execute_and_free "," without_prepared_statement? "]}," ActiveRecord ConnectionAdapters Mysql2 DatabaseStatements select_all":{"type":"method","name":"select_all","children":[],"call":["conn abandon_results! "," unprepared_statement "," prepared_statements ","ExplainRegistry  collect? "," with_raw_connection "]}," ActiveRecord ConnectionAdapters MySQL SchemaStatements valid_primary_key_options":{"type":"method","name":"valid_primary_key_options","children":[],"call":[" + "]}," ActiveRecord ConnectionAdapters MySQL TableDefinition valid_column_definition_options":{"type":"method","name":"valid_column_definition_options","children":[],"call":[" + "]}," ActiveRecord ConnectionAdapters MySQL SchemaCreation visit_ChangeColumnDefaultDefinition":{"type":"method","name":"visit_ChangeColumnDefaultDefinition","children":[],"call":["sql << "," quote_default_expression ","o column ","o default ","o column null ! ","o column null ","o default nil? ","(str \"ALTER COLUMN \") +@ "," quote_column_name ","o column name ","(str \"ALTER COLUMN \") +@  << "]}," ActiveRecord ConnectionAdapters MySQL Quoting cast_bound_value":{"type":"method","name":"cast_bound_value","children":[],"call":["value to_s "," warn_quote_duration_deprecated ","value to_f to_s ","value to_f "]}," ActiveRecord ConnectionAdapters MySQL DatabaseStatements analyze_without_explain?":{"type":"method","name":"analyze_without_explain?","children":[],"call":[" database_version >= "," database_version "," mariadb? "]}," ActiveRecord ConnectionAdapters MySQL DatabaseStatements build_explain_clause":{"type":"method","name":"build_explain_clause","children":[],"call":["explain_clause sub ","explain_clause include? "," analyze_without_explain? ","options join upcase ","options join ","options empty? "]}," ActiveRecord ConnectionAdapters Column auto_populated?":{"type":"method","name":"auto_populated?","children":[],"call":[" default_function "," auto_incremented_by_db? "]}," ActiveRecord ConnectionAdapters Column auto_incremented_by_db?":{"type":"method","name":"auto_incremented_by_db?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter mismatched_foreign_key_details":{"type":"method","name":"mismatched_foreign_key_details","children":[],"call":["options []= "," column_for ","match [] ","(str \"\\n\") match ","(str \"\\n\") match  [] ","(str \"\\n\") (str \"\\n\") match  "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter sync_timezone_changes":{"type":"method","name":"sync_timezone_changes","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter warning_ignored?":{"type":"method","name":"warning_ignored?","children":[],"call":["warning level == ","warning level "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter handle_warnings":{"type":"method","name":"handle_warnings","children":[],"call":["ActiveRecord  db_warnings_action call ","ActiveRecord  db_warnings_action "," warning_ignored? ","SQLWarning  new ","result each ","@raw_connection query ","@raw_connection affected_rows ","@raw_connection warning_count == ","@raw_connection warning_count ","ActiveRecord  db_warnings_action nil? ","ActiveRecord  db_SQLWarning  new s_action call ","ActiveRecord  db_SQLWarning  new s_action "," SQLWarning  new _ignored? ","@raw_connection query  each ","@raw_connection SQLWarning  new _count == ","@raw_connection SQLWarning  new _count ","ActiveRecord  db_SQLWarning  new s_action nil? "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter extended_type_map_key":{"type":"method","name":"extended_type_map_key","children":[],"call":[" emulate_booleans "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter extended_type_map":{"type":"method","name":"extended_type_map","children":[],"call":["m register_type ","Type Boolean  new ","(hash\n  (pair\n    (sym :default_timezone)\n    (lvar :default_timezone))) tap "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter build_create_index_definition":{"type":"method","name":"build_create_index_definition","children":[],"call":["CreateIndexDefinition  new "," index_exists? ","index name "," add_index_options "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter build_change_column_definition":{"type":"method","name":"build_change_column_definition","children":[],"call":["ChangeColumnDefinition  new ","column name ","td new_column_definition "," create_table_definition ","options []= ","column auto_increment? ","options key? ","column collation ","options [] "," text_type? ","options delete ","options [] == ","column comment ","column null ","column default ","column sql_type "," column_for "," column_for  name "," create_table_definition  new_column_definition ","td new_ column_for _definition "," column_for  auto_increment? "," column_for  collation "," column_for  comment "," column_for  null "," column_for  default "," column_for  sql_type ","  column_for _for "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter build_change_column_default_definition":{"type":"method","name":"build_change_column_default_definition","children":[],"call":["ChangeColumnDefaultDefinition  new "," extract_new_default_value "," column_for "," extract_new_ extract_new_default_value _value ","  column_for _for "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter exec_restart_db_transaction":{"type":"method","name":"exec_restart_db_transaction","children":[],"call":[" internal_execute "]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter supports_restart_db_transaction?":{"type":"method","name":"supports_restart_db_transaction?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractMysqlAdapter dbconsole":{"type":"method","name":"dbconsole","children":[],"call":[" find_cmd_and_exec ","args << ","config database ","mysql_config [] to_s empty? ! ","mysql_config [] to_s empty? ","mysql_config [] to_s ","mysql_config [] ","options [] ","(pair\n  (sym :host)\n  (str \"--host\")) filter_map ","config configuration_hash ","config configuration_hash  [] to_s empty? ! ","config configuration_hash  [] to_s empty? ","config configuration_hash  [] to_s ","config configuration_hash  [] "]}," ActiveRecord ConnectionAdapters AbstractAdapter warning_ignored?":{"type":"method","name":"warning_ignored?","children":[],"call":["warning code to_s match? ","warning code to_s ","warning code ","warning message match? ","warning message ","ActiveRecord  db_warnings_ignore any? ","ActiveRecord  db_warnings_ignore "]}," ActiveRecord ConnectionAdapters AbstractAdapter default_prepared_statements":{"type":"method","name":"default_prepared_statements","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter configure_connection":{"type":"method","name":"configure_connection","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter extended_type_map_key":{"type":"method","name":"extended_type_map_key","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter valid_raw_connection":{"type":"method","name":"valid_raw_connection","children":[],"call":[" with_raw_connection "]}," ActiveRecord ConnectionAdapters AbstractAdapter any_raw_connection":{"type":"method","name":"any_raw_connection","children":[],"call":[" valid_raw_connection "]}," ActiveRecord ConnectionAdapters AbstractAdapter reconnect":{"type":"method","name":"reconnect","children":[],"call":[" raise "]}," ActiveRecord ConnectionAdapters AbstractAdapter backoff":{"type":"method","name":"backoff","children":[],"call":[" sleep ","0.1 * "]}," ActiveRecord ConnectionAdapters AbstractAdapter retryable_query_error?":{"type":"method","name":"retryable_query_error?","children":[],"call":["exception is_a? "," current_transaction invalidated? "," current_transaction "]}," ActiveRecord ConnectionAdapters AbstractAdapter invalidate_transaction":{"type":"method","name":"invalidate_transaction","children":[],"call":[" current_transaction invalidate! "," current_transaction "," savepoint_errors_invalidate_transactions? ","exception is_a? "]}," ActiveRecord ConnectionAdapters AbstractAdapter retryable_connection_error?":{"type":"method","name":"retryable_connection_error?","children":[],"call":["exception is_a? "]}," ActiveRecord ConnectionAdapters AbstractAdapter with_raw_connection":{"type":"method","name":"with_raw_connection","children":[],"call":[" dirty_current_transaction "," raise "," retryable_query_error? "," reconnect! "," retryable_connection_error? "," backoff "," connection_retries - "," connection_retries ","retries_available > ","retry_deadline_exceeded ! ","deadline < ","Process  clock_gettime "," invalidate_transaction "," translate_exception_class "," verify! "," reconnect_can_restore_state? ","Process  clock_gettime + "," retry_deadline "," materialize_transactions "," connect! ","@raw_connection nil? ","@lock synchronize "," connection_retries  > "]}," ActiveRecord ConnectionAdapters AbstractAdapter reconnect_can_restore_state?":{"type":"method","name":"reconnect_can_restore_state?","children":[],"call":["@raw_connection_dirty ! "," transaction_manager restorable? "," transaction_manager "]}," ActiveRecord ConnectionAdapters AbstractAdapter extended_type_map":{"type":"method","name":"extended_type_map","children":[],"call":["m alias_type "," register_class_with_precision ","Type TypeMap  new tap ","Type TypeMap  new "]}," ActiveRecord ConnectionAdapters AbstractAdapter clean!":{"type":"method","name":"clean!","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter connect!":{"type":"method","name":"connect!","children":[],"call":[" verify! "]}," ActiveRecord ConnectionAdapters AbstractAdapter check_all_foreign_keys_valid!":{"type":"method","name":"check_all_foreign_keys_valid!","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter rename_enum_value":{"type":"method","name":"rename_enum_value","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter add_enum_value":{"type":"method","name":"add_enum_value","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter rename_enum":{"type":"method","name":"rename_enum","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter drop_enum":{"type":"method","name":"drop_enum","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter return_value_after_insert?":{"type":"method","name":"return_value_after_insert?","children":[],"call":["column auto_incremented_by_db? "]}," ActiveRecord ConnectionAdapters AbstractAdapter supports_nulls_not_distinct?":{"type":"method","name":"supports_nulls_not_distinct?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter supports_unique_keys?":{"type":"method","name":"supports_unique_keys?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter supports_exclusion_constraints?":{"type":"method","name":"supports_exclusion_constraints?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter supports_index_include?":{"type":"method","name":"supports_index_include?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter supports_restart_db_transaction?":{"type":"method","name":"supports_restart_db_transaction?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter savepoint_errors_invalidate_transactions?":{"type":"method","name":"savepoint_errors_invalidate_transactions?","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter internal_metadata":{"type":"method","name":"internal_metadata","children":[],"call":["InternalMetadata  new "]}," ActiveRecord ConnectionAdapters AbstractAdapter default_timezone":{"type":"method","name":"default_timezone","children":[],"call":["ActiveRecord  default_timezone "]}," ActiveRecord ConnectionAdapters AbstractAdapter retry_deadline":{"type":"method","name":"retry_deadline","children":[],"call":["@config [] to_f ","@config [] "]}," ActiveRecord ConnectionAdapters AbstractAdapter connection_retries":{"type":"method","name":"connection_retries","children":[],"call":["(or\n  (send\n    (ivar :@config) :[]\n    (sym :connection_retries))\n  (int 1)) to_i ","@config [] "]}," ActiveRecord ConnectionAdapters AbstractAdapter lock_thread=":{"type":"method","name":"lock_thread=","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter dbconsole":{"type":"method","name":"dbconsole","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter find_cmd_and_exec":{"type":"method","name":"find_cmd_and_exec","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter validate_default_timezone":{"type":"method","name":"validate_default_timezone","children":[],"call":[]}," ActiveRecord ConnectionAdapters AbstractAdapter pool=":{"type":"method","name":"pool=","children":[],"call":["@pool schema_reflection load! ","@pool schema_reflection ","ActiveRecord  lazily_load_schema_cache ","value eql? "]}," ActiveRecord ConnectionAdapters TransactionManager restorable?":{"type":"method","name":"restorable?","children":[],"call":["@stack none? "]}," ActiveRecord ConnectionAdapters TransactionManager restore_transactions":{"type":"method","name":"restore_transactions","children":[],"call":["@stack each "," restorable? "]}," ActiveRecord ConnectionAdapters TransactionManager dirty_current_transaction":{"type":"method","name":"dirty_current_transaction","children":[],"call":[" current_transaction dirty! "," current_transaction "]}," ActiveRecord ConnectionAdapters RealTransaction restart":{"type":"method","name":"restart","children":[],"call":[" materialize! "," connection rollback_db_transaction "," connection "," connection restart_db_transaction ","@instrumenter start "," connection supports_restart_db_transaction? ","@instrumenter finish "," materialized? "]}," ActiveRecord ConnectionAdapters SavepointTransaction restart":{"type":"method","name":"restart","children":[],"call":[" connection rollback_to_savepoint "," savepoint_name "," connection ","@instrumenter start ","@instrumenter finish "," materialized? "]}," ActiveRecord ConnectionAdapters RestartParentTransaction full_rollback?":{"type":"method","name":"full_rollback?","children":[],"call":[]}," ActiveRecord ConnectionAdapters RestartParentTransaction commit":{"type":"method","name":"commit","children":[],"call":["@state commit! "]}," ActiveRecord ConnectionAdapters RestartParentTransaction rollback":{"type":"method","name":"rollback","children":[],"call":["@parent restart ","@state rollback! "]}," ActiveRecord ConnectionAdapters RestartParentTransaction initialize":{"type":"method","name":"initialize","children":[],"call":["@parent state add_child ","@parent state "," raise "," isolation_level "]}," ActiveRecord ConnectionAdapters Transaction prepare_instances_to_run_callbacks_on":{"type":"method","name":"prepare_instances_to_run_callbacks_on","children":[],"call":["candidates []= ","record _new_record_before_last_commit= ","record destroyed? ! ","record destroyed? ","record class run_commit_callbacks_on_first_saved_instances_in_transaction ","record class ","candidates [] ","record trigger_transactional_callbacks? ","records each_with_object "]}," ActiveRecord ConnectionAdapters Transaction run_action_on_records":{"type":"method","name":"run_action_on_records","children":[],"call":["record __id__ == ","instances_to_run_callbacks_on [] __id__ ","instances_to_run_callbacks_on [] ","record __id__ ","records shift ","records shift  __id__ == ","records shift  __id__ ","records shift s shift "]}," ActiveRecord ConnectionAdapters Transaction unique_records":{"type":"method","name":"unique_records","children":[],"call":[" records uniq "," records "]}," ActiveRecord ConnectionAdapters Transaction restore!":{"type":"method","name":"restore!","children":[],"call":[" materialize! "," materialized? "]}," ActiveRecord ConnectionAdapters Transaction incomplete!":{"type":"method","name":"incomplete!","children":[],"call":["@instrumenter finish "]}," ActiveRecord ConnectionAdapters Transaction restartable?":{"type":"method","name":"restartable?","children":[],"call":[" dirty? ! "," dirty? "," joinable? "]}," ActiveRecord ConnectionAdapters Transaction dirty?":{"type":"method","name":"dirty?","children":[],"call":[]}," ActiveRecord ConnectionAdapters Transaction dirty!":{"type":"method","name":"dirty!","children":[],"call":[]}," ActiveRecord ConnectionAdapters NullTransaction invalidate!":{"type":"method","name":"invalidate!","children":[],"call":[]}," ActiveRecord ConnectionAdapters NullTransaction invalidated?":{"type":"method","name":"invalidated?","children":[],"call":[]}," ActiveRecord ConnectionAdapters NullTransaction dirty!":{"type":"method","name":"dirty!","children":[],"call":[]}," ActiveRecord ConnectionAdapters NullTransaction dirty?":{"type":"method","name":"dirty?","children":[],"call":[]}," ActiveRecord ConnectionAdapters NullTransaction restartable?":{"type":"method","name":"restartable?","children":[],"call":[]}," ActiveRecord ConnectionAdapters TransactionInstrumenter finish":{"type":"method","name":"finish","children":[],"call":["@handle finish "]}," ActiveRecord ConnectionAdapters TransactionInstrumenter start":{"type":"method","name":"start","children":[],"call":["@handle start ","ActiveSupport Notifications  instrumenter build_handle ","ActiveSupport Notifications  instrumenter ","ActiveSupport Notifications  instrumenter build_handle  start "]}," ActiveRecord ConnectionAdapters TransactionInstrumenter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord ConnectionAdapters SchemaStatements change_column_default_for_alter":{"type":"method","name":"change_column_default_for_alter","children":[],"call":[" schema_creation accept "," schema_creation "," build_change_column_default_definition "]}," ActiveRecord ConnectionAdapters SchemaStatements reference_name_for_table":{"type":"method","name":"reference_name_for_table","children":[],"call":["table_name to_s singularize ","table_name to_s "]}," ActiveRecord ConnectionAdapters SchemaStatements validate_table_length!":{"type":"method","name":"validate_table_length!","children":[],"call":[" raise "," table_name_length ","table_name length > ","table_name length "]}," ActiveRecord ConnectionAdapters SchemaStatements foreign_keys_enabled?":{"type":"method","name":"foreign_keys_enabled?","children":[],"call":["@config fetch "]}," ActiveRecord ConnectionAdapters SchemaStatements validate_create_table_options!":{"type":"method","name":"validate_create_table_options!","children":[],"call":["options except assert_valid_keys "," valid_primary_key_options "," valid_table_definition_options ","options except ","options [] "]}," ActiveRecord ConnectionAdapters SchemaStatements validate_change_column_null_argument!":{"type":"method","name":"validate_change_column_null_argument!","children":[],"call":[" raise ","value inspect ","value == "]}," ActiveRecord ConnectionAdapters SchemaStatements generate_index_name":{"type":"method","name":"generate_index_name","children":[],"call":["name mb_chars limit to_s ","name mb_chars limit ","name mb_chars "," max_index_name_size - ","hashed_identifier bytesize "," max_index_name_size "," Array * "," Array ","_ + ","OpenSSL Digest SHA256  hexdigest first ","OpenSSL Digest SHA256  hexdigest ","name bytesize <= ","name bytesize ","_ +  bytesize "]}," ActiveRecord ConnectionAdapters SchemaStatements max_index_name_size":{"type":"method","name":"max_index_name_size","children":[],"call":[]}," ActiveRecord ConnectionAdapters SchemaStatements valid_primary_key_options":{"type":"method","name":"valid_primary_key_options","children":[],"call":[]}," ActiveRecord ConnectionAdapters SchemaStatements valid_column_definition_options":{"type":"method","name":"valid_column_definition_options","children":[],"call":[]}," ActiveRecord ConnectionAdapters SchemaStatements valid_table_definition_options":{"type":"method","name":"valid_table_definition_options","children":[],"call":[]}," ActiveRecord ConnectionAdapters SchemaStatements use_foreign_keys?":{"type":"method","name":"use_foreign_keys?","children":[],"call":[" foreign_keys_enabled? "," supports_foreign_keys? "]}," ActiveRecord ConnectionAdapters SchemaStatements check_constraint_exists?":{"type":"method","name":"check_constraint_exists?","children":[],"call":[" check_constraint_for present? "," check_constraint_for "," raise ","options key? ! ","options key? "]}," ActiveRecord ConnectionAdapters SchemaStatements build_create_index_definition":{"type":"method","name":"build_create_index_definition","children":[],"call":["CreateIndexDefinition  new "," add_index_options "]}," ActiveRecord ConnectionAdapters SchemaStatements build_change_column_default_definition":{"type":"method","name":"build_change_column_default_definition","children":[],"call":[" raise "]}," ActiveRecord ConnectionAdapters SchemaStatements build_add_column_definition":{"type":"method","name":"build_add_column_definition","children":[],"call":["alter_table add_column "," create_alter_table ","options []= ","options key? ! ","options key? ","type == "," supports_datetime_with_precision? "," column_exists? ","options [] == ","options [] "," create_alter_table  add_column "," create_ create_alter_table  "]}," ActiveRecord ConnectionAdapters SchemaStatements build_create_join_table_definition":{"type":"method","name":"build_create_join_table_definition","children":[],"call":[" block_given? ","td references "," build_create_table_definition ","options merge! "," reference_name_for_table ","(lvar :table_1) map ","column_options reverse_merge! "," find_join_table_name "," find_ find_join_table_name  "]}," ActiveRecord ConnectionAdapters SchemaStatements build_create_table_definition":{"type":"method","name":"build_create_table_definition","children":[],"call":[" block_given? ","table_definition set_primary_key ","options extract! "," valid_primary_key_options "," create_table_definition "," valid_table_definition_options "," create_table_definition  set_primary_key "," create_ create_table_definition  "," valid_ create_table_definition _options "]}," ActiveRecord ConnectionAdapters Table raise_on_if_exist_options":{"type":"method","name":"raise_on_if_exist_options","children":[],"call":[" raise ","ArgumentError  new ","unrecognized_option == ","key == ","options keys find ","options keys "]}," ActiveRecord ConnectionAdapters Table check_constraint_exists?":{"type":"method","name":"check_constraint_exists?","children":[],"call":["@base check_constraint_exists? "," name "]}," ActiveRecord ConnectionAdapters TableDefinition valid_column_definition_options":{"type":"method","name":"valid_column_definition_options","children":[],"call":["@conn valid_column_definition_options "]}," ActiveRecord ConnectionAdapters TableDefinition set_primary_key":{"type":"method","name":"set_primary_key","children":[],"call":[" primary_key "," primary_keys ","pk is_a? ","id fetch ","options merge! ","id except ","id is_a? ","Base  get_primary_key ","table_name to_s singularize ","table_name to_s "," as ! "," as ","id fetch  fetch ","id fetch  except ","id fetch  is_a? "]}," ActiveRecord ConnectionAdapters ReferenceDefinition conditional_options":{"type":"method","name":"conditional_options","children":[],"call":[" options slice "," options "]}," ActiveRecord ConnectionAdapters ReferenceDefinition add":{"type":"method","name":"add","children":[],"call":["connection add_foreign_key "," foreign_key_options "," foreign_table_name "," foreign_key ","connection add_index "," index_options "," column_names "," index ","connection add_column "," columns each "," columns "]}," ActiveRecord ConnectionAdapters IndexDefinition defined_for?":{"type":"method","name":"defined_for?","children":[],"call":[" nulls_not_distinct == "," nulls_not_distinct ","nulls_not_distinct nil? "," Array == "," Array map "," Array "," include ","include nil? "," valid == "," valid ","valid nil? "," unique == "," unique ","unique nil? "," name == ","name to_s "," name ","name nil? "," columns ","columns nil? ","options [] ","columns blank? "," options []  ","options []  nil? ","options []  blank? "]}," ActiveRecord ConnectionAdapters IndexDefinition valid?":{"type":"method","name":"valid?","children":[],"call":[]}," ActiveRecord ConnectionAdapters Quoting warn_quote_duration_deprecated":{"type":"method","name":"warn_quote_duration_deprecated","children":[],"call":["ActiveRecord  deprecator warn ","ActiveRecord  deprecator "]}," ActiveRecord ConnectionAdapters Quoting cast_bound_value":{"type":"method","name":"cast_bound_value","children":[],"call":[]}," ActiveRecord ConnectionAdapters DatabaseStatements returning_column_values":{"type":"method","name":"returning_column_values","children":[],"call":[" last_inserted_id "]}," ActiveRecord ConnectionAdapters DatabaseStatements raw_execute":{"type":"method","name":"raw_execute","children":[],"call":[" raise "]}," ActiveRecord ConnectionAdapters DatabaseStatements internal_execute":{"type":"method","name":"internal_execute","children":[],"call":[" raw_execute "," mark_transaction_written_if_write "," check_if_write_query "," transform_query "]}," ActiveRecord ConnectionAdapters DatabaseStatements internal_exec_query":{"type":"method","name":"internal_exec_query","children":[],"call":[" raise "]}," ActiveRecord ConnectionAdapters DatabaseStatements exec_restart_db_transaction":{"type":"method","name":"exec_restart_db_transaction","children":[],"call":[]}," ActiveRecord ConnectionAdapters DatabaseStatements restart_db_transaction":{"type":"method","name":"restart_db_transaction","children":[],"call":[" exec_restart_db_transaction "]}," ActiveRecord ConnectionAdapters ConnectionPool connection_class":{"type":"method","name":"connection_class","children":[],"call":[" pool_config connection_class "," pool_config "]}," ActiveRecord ConnectionAdapters NullPool db_config":{"type":"method","name":"db_config","children":[],"call":[]}," ActiveRecord ConnectionAdapters NullPool schema_reflection":{"type":"method","name":"schema_reflection","children":[],"call":["SchemaReflection  new "]}," ActiveRecord ConnectionAdapters NullPool NullConfig method_missing":{"type":"method","name":"method_missing","children":[],"call":[]}," ActiveRecord ConnectionAdapters ConnectionHandler determine_owner_name":{"type":"method","name":"determine_owner_name","children":[],"call":["StringConnectionName  new ","config to_s ","config is_a? ","owner_name to_s ","owner_name is_a? "]}," ActiveRecord ConnectionAdapters ConnectionHandler disconnect_pool_from_pool_manager":{"type":"method","name":"disconnect_pool_from_pool_manager","children":[],"call":["pool_config db_config ","pool_config disconnect! ","pool_manager remove_pool_config ","pool_manager remove_pool_config  db_config ","pool_manager remove_pool_config  disconnect! ","pool_manager remove_pool_manager remove_pool_config  "]}," ActiveRecord ConnectionAdapters ConnectionHandler deprecation_for_pool_handling":{"type":"method","name":"deprecation_for_pool_handling","children":[],"call":["ActiveRecord  deprecator warn ","(str \"              `\") squish ","ActiveRecord Base  current_role ","ActiveRecord  deprecator ","roles flatten uniq count > ","roles flatten uniq count ","roles flatten uniq ","roles flatten ","roles << ","pool_manager role_names "," pool_managers each "," pool_managers "]}," ActiveRecord ConnectionAdapters ConnectionHandler pool_managers":{"type":"method","name":"pool_managers","children":[],"call":[" connection_name_to_pool_manager values "," connection_name_to_pool_manager "]}," ActiveRecord ConnectionAdapters ConnectionHandler set_pool_manager":{"type":"method","name":"set_pool_manager","children":[],"call":["PoolManager  new "," connection_name_to_pool_manager [] "," connection_name_to_pool_manager "]}," ActiveRecord ConnectionAdapters ConnectionHandler each_connection_pool":{"type":"method","name":"each_connection_pool","children":[],"call":["pool_config pool ","manager each_pool_config "," connection_name_to_pool_manager each_value "," connection_name_to_pool_manager "," enum_for "," __method__ "," block_given? ","role == "]}," ActiveRecord ConnectionAdapters ConnectionHandler StringConnectionName current_preventing_writes":{"type":"method","name":"current_preventing_writes","children":[],"call":[]}," ActiveRecord ConnectionAdapters ConnectionHandler StringConnectionName primary_class?":{"type":"method","name":"primary_class?","children":[],"call":[]}," ActiveRecord ConnectionAdapters ConnectionHandler StringConnectionName initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Coders YAMLColumn coder":{"type":"method","name":"coder","children":[],"call":["SafeCoder  new ","@unsafe_load nil? "]}," ActiveRecord Coders YAMLColumn init_with":{"type":"method","name":"init_with","children":[],"call":["coder []= ","SafeCoder  new ","coder [] "]}," ActiveRecord Coders YAMLColumn SafeCoder load":{"type":"method","name":"load","children":[],"call":["YAML  safe_load ","@permitted_classes + ","ActiveRecord  yaml_column_permitted_classes ","YAML  load ","ActiveRecord  use_yaml_unsafe_load ","@unsafe_load nil? ","YAML  unsafe_load "]}," ActiveRecord Coders YAMLColumn SafeCoder dump":{"type":"method","name":"dump","children":[],"call":["YAML  dump "," YAML  safe_dump ","@permitted_classes + ","ActiveRecord  yaml_column_permitted_classes "," YAML  dump ","ActiveRecord  use_yaml_unsafe_load ","@unsafe_load nil? "]}," ActiveRecord Coders YAMLColumn SafeCoder initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ActiveRecord Coders ColumnSerializer check_arity_of_constructor":{"type":"method","name":"check_arity_of_constructor","children":[],"call":[" raise "," object_class "," load "]}," ActiveRecord Coders ColumnSerializer assert_valid_value":{"type":"method","name":"assert_valid_value","children":[],"call":[" raise ","object inspect ","object class "," object_class "," object_class === ","object nil? "]}," ActiveRecord Coders ColumnSerializer load":{"type":"method","name":"load","children":[],"call":[" object_class new "," object_class "," object_class != "," assert_valid_value "," coder load "," coder ","@object_class new ","@object_class != ","payload nil? ","  coder load _class new ","  coder load _class ","  coder load _class != ","@ coder load _class new ","@ coder load _class != "]}," ActiveRecord Coders ColumnSerializer dump":{"type":"method","name":"dump","children":[],"call":[" coder dump "," coder "," assert_valid_value ","object nil? "]}," ActiveRecord Coders ColumnSerializer init_with":{"type":"method","name":"init_with","children":[],"call":["coder [] "]}," ActiveRecord Coders ColumnSerializer initialize":{"type":"method","name":"initialize","children":[],"call":[" check_arity_of_constructor "]}," ActiveRecord AutosaveAssociation compute_primary_key":{"type":"method","name":"compute_primary_key","children":[],"call":["record class primary_key ","record class ","primary_key include? ","record class composite_primary_key? ","record class query_constraints_list ","reflection options [] ! ","reflection options [] ","reflection options ","record class has_query_constraints? ","record class record class primary_key  ","record class primary_key  include? ","record class composite_record class primary_key ? ","record class record class query_constraints_list _list ","record class has_record class query_constraints_list ? "]}," ActiveRecord AutosaveAssociation inverse_polymorphic_association_changed?":{"type":"method","name":"inverse_polymorphic_association_changed?","children":[],"call":["reflection active_record != ","record class polymorphic_class_for ","record class ","reflection active_record ","record _read_attribute ","reflection inverse_of foreign_type ","reflection inverse_of "]}," ActiveRecord AutosaveAssociation init_internals":{"type":"method","name":"init_internals","children":[],"call":[]}," ActiveRecord AttributeMethods ClassMethods alias_attribute_method_definition":{"type":"method","name":"alias_attribute_method_definition","children":[],"call":[" define_proxy_call ","pattern proxy_target ","ActiveRecord  deprecator warn ","ActiveRecord  deprecator "," method_defined_within? ","reserved_method_name ! ","target_name == "," has_attribute? ! "," has_attribute? "," abstract_class? ! "," abstract_class? "," ActiveRecord AttributeMethods  dangerous_attribute_methods include? "," ActiveRecord AttributeMethods  dangerous_attribute_methods "," instance_method owner is_a? ! "," instance_method owner is_a? "," instance_method owner "," instance_method "," private_method_defined? "," method_defined? ","old_name to_s ","pattern parameters ","pattern method_name to_s ","pattern method_name "," ActiveRecord AttributeMethods  dangerous_attribute_methods include?  ! ","reserved_pattern method_name to_s  ! ","pattern method_name to_s  == ","old_name to_s  to_s ","pattern pattern parameters  ","pattern pattern method_name to_s  to_s ","pattern pattern method_name to_s  "]}," ActiveRecord AttributeMethods ClassMethods generate_alias_attributes":{"type":"method","name":"generate_alias_attributes","children":[],"call":[" generate_alias_attribute_methods ","new_names each "," aliases_by_attribute_name each "," aliases_by_attribute_name ","ActiveSupport CodeGenerator  batch "," generated_attribute_methods "," generated_attribute_methods synchronize "," superclass generate_alias_attributes "," superclass "," superclass == "]}," ActiveRecord AttributeMethods ClassMethods eagerly_generate_alias_attribute_methods":{"type":"method","name":"eagerly_generate_alias_attribute_methods","children":[],"call":[]}," ActiveRecord AttributeMethods ClassMethods alias_attribute":{"type":"method","name":"alias_attribute","children":[],"call":[" generate_alias_attribute_methods ","ActiveSupport CodeGenerator  batch "," generated_attribute_methods "]}," ActiveRecord AttributeMethods Serialization ClassMethods build_column_serializer":{"type":"method","name":"build_column_serializer","children":[],"call":["Coders ColumnSerializer  new ","type != ","coder new ","coder respond_to? ! ","coder respond_to? ","Coders YAMLColumn  new ","coder == "]}," ActiveRecord AttributeMethods Query query_cast_attribute":{"type":"method","name":"query_cast_attribute","children":[],"call":["value blank? ! ","value blank? ","value zero? ! ","value zero? ","value respond_to? ","ActiveModel Type Boolean FALSE_VALUES  include? ","value to_i zero? ! ","value to_i zero? ","value to_i ","value match? ! ","value match? ","Numeric  === ","(send nil :type_for_attribute\n  (lvar :attr_name)) ! "," type_for_attribute "]}," ActiveRecord AttributeMethods Query _query_attribute":{"type":"method","name":"_query_attribute","children":[],"call":[" query_cast_attribute "," _read_attribute ","attr_name to_s "]}," ActiveRecord AttributeMethods PrimaryKey ClassMethods inherited":{"type":"method","name":"inherited","children":[],"call":["base class_eval "]}," ActiveRecord AttributeMethods PrimaryKey ClassMethods derive_primary_key":{"type":"method","name":"derive_primary_key","children":[],"call":["(send\n  (lvar :value) :map) freeze ","v to_s -@ ","v to_s ","value map ","value to_s -@ ","value to_s ","value is_a? "]}," ActiveRecord AttributeMethods PrimaryKey ClassMethods composite_primary_key?":{"type":"method","name":"composite_primary_key?","children":[],"call":[" primary_key is_a? "," primary_key "]}," ActiveRecord AttributeMethods PrimaryKey primary_key_values_present?":{"type":"method","name":"primary_key_values_present?","children":[],"call":[" id ! ! "," id ! "," id "," id all? "," class composite_primary_key? "," class "]}," ActiveRecord AttributeMethods Dirty init_internals":{"type":"method","name":"init_internals","children":[],"call":[]}," ActiveRecord AttributeMethods BeforeTypeCast read_attribute_for_database":{"type":"method","name":"read_attribute_for_database","children":[],"call":[" attribute_for_database "," class attribute_aliases [] "," class attribute_aliases "," class ","attr_name to_s ","attr_attr_name to_s  to_s "]}," ActiveRecord CompositePrimaryKeyMismatchError initialize":{"type":"method","name":"initialize","children":[],"call":["reflection foreign_key ","reflection association_primary_key ","reflection name ","reflection active_record ","reflection active_record_primary_key ","reflection collection? ","reflection has_one? "]}," ActiveRecord Associations ThroughAssociation transaction":{"type":"method","name":"transaction","children":[],"call":[" through_reflection klass transaction "," through_reflection klass "," through_reflection "]}," ActiveRecord Associations Preloader Association derive_key":{"type":"method","name":"derive_key","children":[],"call":[" convert_key ","owner _read_attribute ","key map ","key is_a? "]}," ActiveRecord Associations Association skip_strict_loading":{"type":"method","name":"skip_strict_loading","children":[],"call":[]}}