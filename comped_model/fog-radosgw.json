{" Fog Radosgw Usage Real initialize":{"type":"method","name":"initialize","children":[],"call":["Fog Storage  new ","options [] "," configure_uri_options "]}," Fog Radosgw Usage Mock reset_data":{"type":"method","name":"reset_data","children":[],"call":[" class data delete "," radosgw_uri "," class data "," class "]}," Fog Radosgw Usage Mock data":{"type":"method","name":"data","children":[],"call":[" class data [] "," radosgw_uri "," class data "," class "]}," Fog Radosgw Usage Mock initialize":{"type":"method","name":"initialize","children":[],"call":[" configure_uri_options "]}," Fog Radosgw Usage Mock reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Radosgw Usage Mock get_usage":{"type":"method","name":"get_usage","children":[],"call":["response body= ","response headers []= ","response headers ","response status= ","Excon Response  new tap ","Excon Response  new "]}," Fog Radosgw Usage Real get_usage":{"type":"method","name":"get_usage","children":[],"call":[" raise ","Fog Radosgw Provisioning ServiceUnavailable  new ","response body= ","Fog JSON  decode ","response body ","response headers [] ","response headers ","response body empty? ! ","response body empty? ","Excon  get "," signed_headers "," sanitize_and_convert_time ","options [] ","t_now - ","Fog Time  now ","Excon  get  body= ","Excon  get  body ","Excon  get  headers [] ","Excon  get  headers ","Excon  get  body empty? ! ","Excon  get  body empty? ","Fog Time  now  - "]}," Fog Radosgw Usage Utils sanitize_and_convert_time":{"type":"method","name":"sanitize_and_convert_time","children":[],"call":["Fog AWS  escape ","time strftime "," escape "]}," Fog Radosgw Provisioning Mock update_user":{"type":"method","name":"update_user","children":[],"call":[" update_mock_user "]}," Fog Radosgw Provisioning Real update_user":{"type":"method","name":"update_user","children":[],"call":[" update_radosgw_user "]}," Fog Radosgw Provisioning Mock list_users":{"type":"method","name":"list_users","children":[],"call":["response body= ","(send\n  (lvar :filtered_data) :map) compact ","value [] ","filtered_data map ","response status= ","Excon Response  new tap ","Excon Response  new "," data ","value [] == ","options [] "," data select ","(send\n  (lvar : data ) :map) compact "," data  map "]}," Fog Radosgw Provisioning Real list_users":{"type":"method","name":"list_users","children":[],"call":["response body= ","user [] == ","options [] ","user [] ","response body select ","response body "," get_user body "," get_user ","response body map "," list_user_ids "," list_user_ids  body= "," list_user_ids  body select "," list_user_ids  body "," list_user_ids  body map "]}," Fog Radosgw Provisioning Real list_user_ids":{"type":"method","name":"list_user_ids","children":[],"call":[" raise ","Fog Radosgw Provisioning ServiceUnavailable  new ","response body= ","Fog JSON  decode ","response body ","response headers [] ","response headers ","response body empty? ! ","response body empty? ","Excon  get "," signed_headers ","Excon  get  body= ","Excon  get  body ","Excon  get  headers [] ","Excon  get  headers ","Excon  get  body empty? ! ","Excon  get  body empty? "]}," Fog Radosgw Provisioning Mock get_user":{"type":"method","name":"get_user","children":[],"call":["response headers []= ","response headers ","response status= ","Excon Response  new tap ","Excon Response  new ","response body= ","value [] "," data [] "," data "," data []  [] "]}," Fog Radosgw Provisioning Real get_user":{"type":"method","name":"get_user","children":[],"call":[" raise ","Fog Radosgw Provisioning ServiceUnavailable  new ","Fog Radosgw Provisioning NoSuchUser  new ","response body= ","Fog JSON  decode ","response body ","response headers [] ","response headers ","response body empty? ! ","response body empty? ","Excon  get "," signed_headers ","Fog AWS  escape "," escape ","Excon  get  body= ","Excon  get  body ","Excon  get  headers [] ","Excon  get  headers ","Excon  get  body empty? ! ","Excon  get  body empty? "]}," Fog Radosgw Provisioning Mock enable_user":{"type":"method","name":"enable_user","children":[],"call":[" update_mock_user "]}," Fog Radosgw Provisioning Real enable_user":{"type":"method","name":"enable_user","children":[],"call":[" update_radosgw_user "]}," Fog Radosgw Provisioning Mock disable_user":{"type":"method","name":"disable_user","children":[],"call":[" update_mock_user "]}," Fog Radosgw Provisioning Real disable_user":{"type":"method","name":"disable_user","children":[],"call":[" update_radosgw_user "]}," Fog Radosgw Provisioning Mock delete_user":{"type":"method","name":"delete_user","children":[],"call":["response body= ","response headers []= ","response headers ","response status= ","Excon Response  new tap ","Excon Response  new "," data delete "," data "," raise "," user_exists? ! "," user_exists? "]}," Fog Radosgw Provisioning Mock user_exists?":{"type":"method","name":"user_exists?","children":[],"call":["value [] == ","value [] "," data find "," data "]}," Fog Radosgw Provisioning Real delete_user":{"type":"method","name":"delete_user","children":[],"call":[" raise ","Fog Radosgw Provisioning ServiceUnavailable  new ","Fog Radosgw Provisioning NoSuchUser  new ","response body= ","Fog JSON  decode ","response body ","response headers [] ","response headers ","response body empty? ! ","response body empty? ","Excon  delete "," signed_headers ","Fog AWS  escape "," escape ","Excon  delete  body= ","Excon  delete  body ","Excon  delete  headers [] ","Excon  delete  headers ","Excon  delete  body empty? ! ","Excon  delete  body empty? "]}," Fog Radosgw Provisioning Mock create_user":{"type":"method","name":"create_user","children":[],"call":["response body= ","response headers []= ","response headers ","response status= ","Excon Response  new tap ","Excon Response  new "," data []= "," data "," rand to_s "," rand "," raise "," user_exists? "]}," Fog Radosgw Provisioning Real create_user":{"type":"method","name":"create_user","children":[],"call":[" raise ","Fog Radosgw Provisioning ServiceUnavailable  new ","Fog Radosgw Provisioning UserAlreadyExists  new ","response body= ","Fog JSON  decode ","response body ","response headers [] ","response headers ","response body empty? ! ","response body empty? ","Excon  put "," signed_headers ","Fog AWS  escape "," get_user status != "," get_user status "," get_user "," escape ","Excon  put  body= ","Excon  put  body ","Excon  put  headers [] ","Excon  put  headers ","Excon  put  body empty? ! ","Excon  put  body empty? "]}," Fog Radosgw Provisioning Real request":{"type":"method","name":"request","children":[],"call":["response body= ","Fog JSON  decode ","response body ","response body empty? ! ","response body empty? "," raise ","Fog Radosgw Provisioning  const_get new ","Fog Radosgw Provisioning  const_get ","match [] ","error message match ","error message ","@raw_connection request ","params merge ","params [] ","@connection request ","@raw_connection request  body= ","@connection request  body= ","@raw_connection request  body ","@connection request  body ","@raw_connection request  body empty? ! ","@connection request  body empty? ! ","@raw_connection request  body empty? ","@connection request  body empty? ","error message match  [] ","error message error message match  "]}," Fog Radosgw Provisioning Real initialize":{"type":"method","name":"initialize","children":[],"call":["Fog Storage  new ","Fog XML Connection  new "," radosgw_uri ","options [] "," configure_uri_options ","Fog Xml Connection  new "]}," Fog Radosgw Provisioning Mock reset_data":{"type":"method","name":"reset_data","children":[],"call":[" class data delete "," radosgw_uri "," class data "," class "]}," Fog Radosgw Provisioning Mock data":{"type":"method","name":"data","children":[],"call":[" class data [] "," radosgw_uri "," class data "," class "]}," Fog Radosgw Provisioning Mock initialize":{"type":"method","name":"initialize","children":[],"call":[" configure_uri_options "]}," Fog Radosgw Provisioning Mock reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Radosgw Utils signed_headers":{"type":"method","name":"signed_headers","children":[],"call":["@s3_connection signature ","Fog Time  now to_date_header ","Fog Time  now "," signature "]}," Fog Radosgw Utils radosgw_uri":{"type":"method","name":"radosgw_uri","children":[],"call":[]}," Fog Radosgw Utils configure_uri_options":{"type":"method","name":"configure_uri_options","children":[],"call":["options [] "]}," Fog Radosgw UserUtils update_mock_user":{"type":"method","name":"update_mock_user","children":[],"call":["response status= ","Excon Response  new tap ","Excon Response  new ","response body= "," data [] "," data "," data [] []= ","user [] "]}," Fog Radosgw UserUtils update_radosgw_user":{"type":"method","name":"update_radosgw_user","children":[],"call":[" raise ","Fog Radosgw Provisioning ServiceUnavailable  new ","Fog Radosgw Provisioning NoSuchUser  new ","response body= ","Fog JSON  decode ","response body ","response headers [] ","response headers ","response body empty? ! ","response body empty? ","Excon  post "," signed_headers ","user [] ","Fog AWS  escape "," escape ","Excon  post  body= ","Excon  post  body ","Excon  post  headers [] ","Excon  post  headers ","Excon  post  body empty? ! ","Excon  post  body empty? "]}," Fog Radosgw MultipartUtils parse_multipart_section":{"type":"method","name":"parse_multipart_section","children":[],"call":["headers to_hash "," parse "," extract_boundary ","headers to_hash [] first ","headers to_hash [] ","headers [] =~ ","headers [] ","headers parse ","md pre_match split each ","md pre_match split ","md pre_match ","md post_match ","part match ","Headers  new ","Headers  new  to_hash "," extract_ extract_boundary  ","Headers  new  to_hash [] first ","Headers  new  to_hash [] ","Headers  new  [] =~ ","Headers  new  [] ","Headers  new  parse ","part match  pre_match split each ","part match  pre_match split ","part match  pre_match ","part match  post_match "]}," Fog Radosgw MultipartUtils inner_boundary_regex":{"type":"method","name":"inner_boundary_regex","children":[],"call":["Regexp  escape "]}," Fog Radosgw MultipartUtils end_boundary_regex":{"type":"method","name":"end_boundary_regex","children":[],"call":["Regexp  escape "]}," Fog Radosgw MultipartUtils extract_boundary":{"type":"method","name":"extract_boundary","children":[],"call":["header_string =~ "]}," Fog Radosgw MultipartUtils parse":{"type":"method","name":"parse","children":[],"call":["(send\n  (send\n    (send\n      (lvar :contents) :split\n      (send nil :inner_boundary_regex\n        (lvar :boundary))) :reject\n    (block-pass\n      (sym :empty?))) :map) compact "," parse_multipart_section ","contents split reject map ","contents split reject ","contents split "," inner_boundary_regex ","data match pre_match ","data match "," end_boundary_regex "]}," Fog Radosgw MultipartUtils Headers parse":{"type":"method","name":"parse","children":[],"call":[" add_field "," class parse "," class "]}," Fog Radosgw MultipartUtils Headers initialize":{"type":"method","name":"initialize","children":[],"call":[" initialize_http_header "]}," Fog Radosgw Utils signature":{"type":"method","name":"signature","children":[],"call":["Base64  encode64 chomp! ","Base64  encode64 ","hmac sign ","Fog HMAC  new ","string_to_sign << ","canonical_resource << ","params [] ","/ + ","canonical_path [] != ","canonical_path [] ","(or\n  (send\n    (lvar :params) :[]\n    (sym :path))\n  (send nil :object_to_path\n    (send\n      (lvar :params) :[]\n      (sym :object_name)))) to_s "," object_to_path ","? + ","query_args join ","query_args any? ","query_args << ","params [] [] ","VALID_QUERY_KEYS  include? ","params [] keys sort ","params [] keys ","canonical_amz_headers << ","x [] <=> ","y [] ","x [] ","amz_headers sort ","amz_headers []= ","key [] == ","key [] ","headers [] ","params [] to_s upcase ","params [] to_s ","(send\n  (send\n    (send\n      (lvar :params) :[]\n      (sym :method)) :to_s) :upcase) map join + ","(send\n  (send\n    (send\n      (lvar :params) :[]\n      (sym :method)) :to_s) :upcase) map join ","(send\n  (send\n    (send\n      (lvar :params) :[]\n      (sym :method)) :to_s) :upcase) map ","Fog HMAC  new  sign ","(send\n  (send\n    (send\n      (lvar :params) :[]\n      (sym :method)) :to_s) :upcase) map join +  << ","/ +  [] != ","(or\n  (send\n    (lvar :params) :[]\n    (sym :path))\n  (send nil :object_to_path\n    (send\n      (lvar :params) :[]\n      (sym :object_name)))) to_s  [] != ","/ +  [] ","(or\n  (send\n    (lvar :params) :[]\n    (sym :path))\n  (send nil :object_to_path\n    (send\n      (lvar :params) :[]\n      (sym :object_name)))) to_s  [] "]}," Fog Radosgw Utils escape":{"type":"method","name":"escape","children":[],"call":["% + ","1 unpack join upcase ","1 unpack join ","1 unpack ","H2 * ","1 bytesize ","string gsub "]}}