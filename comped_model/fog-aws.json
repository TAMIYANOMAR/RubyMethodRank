{" Fog AWS STS Real _request":{"type":"method","name":"_request","children":[],"call":[" raise ","Fog AWS STS Error  slurp ","match [] ","Fog AWS STS  const_get slurp ","Fog AWS STS  const_get ","match empty? ","Fog AWS Errors  match_error ","@connection request ","Fog AWS Errors  match_error  [] ","Fog AWS Errors  match_error  empty? ","Fog AWS Errors  Fog AWS Errors  match_error _error "]}," Fog AWS STS Real request_unsigned":{"type":"method","name":"request_unsigned","children":[],"call":[" _request ","@instrumentor instrument ","body chop! ","body << ","Fog AWS  escape ","value to_s ","(lvasgn :value\n  (send\n    (lvar :params) :[]\n    (lvar :key))) nil? ","params [] ","params keys sort ","params keys ","params []= ","params delete ","params []  to_s ","(lvasgn :params [] \n  (send\n    (lvar :params) :[]\n    (lvar :key))) nil? "]}," Fog AWS STS Real request":{"type":"method","name":"request","children":[],"call":[" _request ","@instrumentor instrument ","Fog AWS  signed_params_v4 ","params delete "," raise ","AwsAccessKeysMissing  new ","@signer == "]}," Fog AWS STS Real setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":["Fog AWS SignatureV4  new ","options [] "]}," Fog AWS STS Real reload":{"type":"method","name":"reload","children":[],"call":["@connection reset "]}," Fog AWS STS Real initialize":{"type":"method","name":"initialize","children":[],"call":["Fog XML Connection  new ","options [] "," setup_credentials "]}," Fog AWS STS Mock setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":["options [] "]}," Fog AWS STS Mock reset_data":{"type":"method","name":"reset_data","children":[],"call":[" class data delete "," class data "," class "]}," Fog AWS STS Mock data":{"type":"method","name":"data","children":[],"call":[" class data [] "," class data "," class "]}," Fog AWS STS Mock initialize":{"type":"method","name":"initialize","children":[],"call":[" setup_credentials ","options [] "]}," Fog AWS STS Mock server_certificate_id":{"type":"method","name":"server_certificate_id","children":[],"call":[]}," Fog AWS STS Mock reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Storage AWS Real signature_v2":{"type":"method","name":"signature_v2","children":[],"call":["Base64  encode64 chomp! ","Base64  encode64 ","@hmac sign ","string_to_sign << ","canonical_resource << ","params [] ","/ + ","canonical_path [] != ","canonical_path [] ","(or\n  (send\n    (lvar :params) :[]\n    (sym :path))\n  (send nil :object_to_path\n    (send\n      (lvar :params) :[]\n      (sym :object_name)))) to_s "," object_to_path ","? + ","query_args join ","query_args any? ","query_args << ","params [] [] ","VALID_QUERY_KEYS  include? ","params [] keys sort ","params [] keys ","canonical_amz_headers << ","x [] <=> ","y [] ","x [] ","amz_headers sort ","amz_headers []= ","key [] == ","key [] ","headers [] ","params [] to_s upcase ","params [] to_s ","/ +  [] != ","(or\n  (send\n    (lvar :params) :[]\n    (sym :path))\n  (send nil :object_to_path\n    (send\n      (lvar :params) :[]\n      (sym :object_name)))) to_s  [] != ","/ +  [] ","(or\n  (send\n    (lvar :params) :[]\n    (sym :path))\n  (send nil :object_to_path\n    (send\n      (lvar :params) :[]\n      (sym :object_name)))) to_s  [] "]}," Fog Storage AWS Real S3Streamer sign_chunk":{"type":"method","name":"sign_chunk","children":[],"call":["hmac sign unpack first ","hmac sign unpack ","hmac sign ","string_to_sign strip "," signer derived_hmac "," date "," signer ","Digest SHA256  hexdigest "," signer credential_scope "," date to_iso8601_basic ","OpenSSL Digest SHA256  hexdigest "," signer derived_hmac  sign unpack first "," signer derived_hmac  sign unpack "," signer derived_hmac  sign "," signer derived_ signer derived_hmac  "]}," Fog Storage AWS Real S3Streamer next_chunk":{"type":"method","name":"next_chunk","children":[],"call":[" signature ","data length to_s ","data length "," signature= "," sign_chunk "," finished= ","data nil? "," body read "," body "," body read  length to_s "," body read  length "," body read  nil? "]}," Fog Storage AWS Real S3Streamer call":{"type":"method","name":"call","children":[],"call":[" next_chunk "," finished "]}," Fog Storage AWS Real S3Streamer rewind":{"type":"method","name":"rewind","children":[],"call":[" body rewind "," body "," signature= "," initial_signature "," finished= "]}," Fog Storage AWS Real S3Streamer initialize":{"type":"method","name":"initialize","children":[],"call":["body pos= ","body respond_to? ","body binmode "," signer= "," initial_signature= "," signature= "," date= "," body= "]}," Fog Storage AWS Real _request":{"type":"method","name":"_request","children":[],"call":[" request ","original_params merge ","original_params [] delete ","original_params [] ","Fog AWS SignatureV4  new ","@signature_version == ","(str \"s3[\\\\.\\\\-]([^\\\\.]*).amazonaws.com\") match captures first ","(str \"s3[\\\\.\\\\-]([^\\\\.]*).amazonaws.com\") match captures ","(str \"s3[\\\\.\\\\-]([^\\\\.]*).amazonaws.com\") match ","new_params [] ","Fog Logger  warning ","new_params []= ","(str \"<Endpoint>([^<]*)</Endpoint>\") match captures first ","(str \"<Endpoint>([^<]*)</Endpoint>\") match captures ","(str \"<Endpoint>([^<]*)</Endpoint>\") match ","(str \"<Bucket>([^<]*)</Bucket>\") match captures first ","(str \"<Bucket>([^<]*)</Bucket>\") match captures ","(str \"<Bucket>([^<]*)</Bucket>\") match ","error response body ","error response ","error response [] ","error response is_a? ","URI  parse host ","URI  parse ","headers [] ","headers has_key? ","error response headers "," connection request "," connection ","(str \"<Region>([^<]*)</Region>\") match captures first ","(str \"<Region>([^<]*)</Region>\") match captures ","(str \"<Region>([^<]*)</Region>\") match ","Regexp  last_match captures first ","Regexp  last_match captures ","Regexp  last_match ","error  request  body ","error response error response body  ","error response error response []  ","error  request  ","error  request  [] ","error  request  is_a? ","error  request  headers "]}," Fog Storage AWS Real request":{"type":"method","name":"request","children":[],"call":[" _request ","@instrumentor instrument ","params dup ","params []= ","S3Streamer  new ","signature_components [] ","params delete ","params [] respond_to? ","params [] ","params [] []= ","@signer components_to_header ","@signer signature_components ","params [] [] ","Digest SHA256  hexdigest ","params [] delete ","date to_iso8601_basic ","@signature_version == ","DEFAULT_SCHEME_PORT  [] "," request_params "," signature_v2 ","date to_date_header ","(or\n  (send\n    (lvar :params) :[]\n    (sym :headers))\n  (hash)) dup ","Fog Time  now "," refresh_credentials_if_expired "," stringify_query_keys ","OpenSSL Digest SHA256  hexdigest ","params [] [] to_s length > ","params [] [] to_s length ","params [] [] to_s "," request_params  dup ","params dup  dup "," request_params  []= ","params dup  []= ","@signer signature_components  [] "," request_params  delete ","params dup  delete "," request_params  [] respond_to? ","params dup  [] respond_to? "," request_params  [] ","params dup  [] "," request_params  [] []= ","params dup  [] []= ","@signer @signer signature_components  "," request_params  [] [] ","params dup  [] [] "," request_params  [] delete ","params dup  [] delete ","Fog Time  now  to_iso8601_basic "," request_ request_params  "," request_params dup  ","Fog Time  now  to_Fog Time  now _header ","(or\n  (send\n    (lvar : request_params ) :[]\n    (sym :headers))\n  (hash)) dup ","(or\n  (send\n    (lvar :params dup ) :[]\n    (sym :headers))\n  (hash)) dup "," request_params  [] [] to_s length > ","params dup  [] [] to_s length > "," request_params  [] [] to_s length ","params dup  [] [] to_s length "," request_params  [] [] to_s ","params dup  [] [] to_s "]}," Fog Storage AWS Real connection":{"type":"method","name":"connection","children":[],"call":["Fog XML Connection  new "," reload ","uri == "]}," Fog Storage AWS Real setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":["Fog HMAC  new ","@signature_version == ","Fog AWS SignatureV4  new ","options [] "]}," Fog Storage AWS Real validate_signature_version!":{"type":"method","name":"validate_signature_version!","children":[],"call":[" raise ","@signature_version == "]}," Fog Storage AWS Real reload":{"type":"method","name":"reload","children":[],"call":["@connection reset "]}," Fog Storage AWS Real initialize":{"type":"method","name":"initialize","children":[],"call":[" setup_credentials ","DEFAULT_SCHEME_PORT  [] ","options [] "," region_to_host ","endpoint port ","endpoint scheme ","endpoint host ","URI  parse "," validate_signature_version! ","options fetch "," require_mime_types ","URI  parse  port ","URI  parse  scheme ","URI  parse  host "]}," Fog Storage AWS Mock setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":["Fog AWS SignatureV4  new ","options [] "]}," Fog Storage AWS Mock reset_data":{"type":"method","name":"reset_data","children":[],"call":[" class data [] delete "," class data [] "," class data "," class "]}," Fog Storage AWS Mock data":{"type":"method","name":"data","children":[],"call":[" class data [] [] "," class data [] "," class data "," class "]}," Fog Storage AWS Mock initialize":{"type":"method","name":"initialize","children":[],"call":[" setup_credentials ","options [] ","DEFAULT_SCHEME_PORT  [] "," region_to_host ","endpoint port ","endpoint scheme ","endpoint host ","URI  parse "," validate_signature_version! ","options fetch "," require_mime_types ","URI  parse  port ","URI  parse  scheme ","URI  parse  host "]}," Fog Storage AWS Mock reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Storage AWS Mock acls":{"type":"method","name":"acls","children":[],"call":[]}," Fog Storage AWS Utils params_to_url":{"type":"method","name":"params_to_url","children":[],"call":["URI Generic  build to_s ","URI Generic  build ","params [] ","(send\n  (send\n    (lvar :params) :[]\n    (sym :query)) :map) join ","(lvar :key) join "," escape ","value to_s ","params [] map ","Fog AWS  escape "]}," Fog Storage AWS Utils request_params":{"type":"method","name":"request_params","children":[],"call":["ret delete ","params merge ","(lvar :bucket_name) join "," bucket_to_path ","Fog Logger  warning ","bucket_name =~ ","path_style ! ","scheme == ","COMPLIANT_BUCKET_NAMES  !~ ","params fetch ","params [] ","/ + ","path [] != ","path [] "," object_to_path "," region_to_host ","DEFAULT_SCHEME_PORT  [] == ","DEFAULT_SCHEME_PORT  [] ","params merge  delete ","(lvar :params [] ) join "," bucket_to_ bucket_to_path  "," bucket_to_/ +  ","params []  =~ "," bucket_to_path _style ! ","/ + _style ! ","params fetch  ! ","params []  == "," bucket_to_path  [] != ","/ +  [] != "," bucket_to_path  [] ","/ +  [] "," object_to_ bucket_to_path  "," object_to_/ +  "," region_to_(lvar :bucket_name) join  "," params [] _to_host "]}," Fog Storage AWS Utils escape":{"type":"method","name":"escape","children":[],"call":["% + ","1 unpack join upcase ","1 unpack join ","1 unpack ","H2 * ","1 bytesize ","string gsub "]}," Fog Storage AWS Utils bucket_to_path":{"type":"method","name":"bucket_to_path","children":[],"call":[" escape ","bucket_name to_s "]}," Fog Storage AWS Utils object_to_path":{"type":"method","name":"object_to_path","children":[],"call":["/ + "," escape gsub "," escape ","object_name to_s "]}," Fog Storage AWS Utils region_to_host":{"type":"method","name":"region_to_host","children":[],"call":["region to_s "]}," Fog Storage AWS Utils signed_url":{"type":"method","name":"signed_url","children":[],"call":[" params_to_url ","params []= ","(or\n  (send\n    (lvar :params) :[]\n    (sym :query))\n  (hash)) merge ","params [] ","@signer signature_parameters ","params [] []= "," request_params ","now to_iso8601_basic ","expires to_i - ","now to_i ","expires to_i ","Fog Time  now "," v2_signed_params_for_url "," v4_signed_params_for_url ","@signature_version == "," refresh_credentials_if_expired ","  request_params _to_url ","  v2_signed_params_for_url _to_url ","  v4_signed_params_for_url _to_url "," request_params  []= "," v2_signed_params_for_url  []= "," v4_signed_params_for_url  []= ","(or\n  (send\n    (lvar : request_params ) :[]\n    (sym :query))\n  (hash)) merge ","(or\n  (send\n    (lvar : v2_signed_params_for_url ) :[]\n    (sym :query))\n  (hash)) merge ","(or\n  (send\n    (lvar : v4_signed_params_for_url ) :[]\n    (sym :query))\n  (hash)) merge "," request_params  [] "," v2_signed_params_for_url  [] "," v4_signed_params_for_url  [] ","@signer @signer signature_parameters _parameters "," request_params  [] []= "," v2_signed_params_for_url  [] []= "," v4_signed_params_for_url  [] []= "," request_ request_params  "," request_ v2_signed_params_for_url  "," request_ v4_signed_params_for_url  ","Fog Time  now  to_iso8601_basic ","expires to_i -  to_i - ","expires to_i  to_i - ","Fog Time  now  to_i ","expires to_i -  to_i ","expires to_i  to_i ","Fog Time  Fog Time  now  "," v2_signed_ request_params _for_url "," v2_signed_ v2_signed_params_for_url _for_url "," v2_signed_ v4_signed_params_for_url _for_url "," v4_signed_ request_params _for_url "," v4_signed_ v2_signed_params_for_url _for_url "," v4_signed_ v4_signed_params_for_url _for_url ","@@signer signature_parameters _version == "]}," Fog Storage AWS Utils request_url":{"type":"method","name":"request_url","children":[],"call":[" params_to_url "," request_params ","  request_params _to_url "," request_ request_params  "]}," Fog Storage AWS Utils url":{"type":"method","name":"url","children":[],"call":[" https_url ","Fog Logger  deprecation "," caller first "," caller "]}," Fog Storage AWS Utils https_url":{"type":"method","name":"https_url","children":[],"call":[" signed_url ","params merge "]}," Fog Storage AWS Utils http_url":{"type":"method","name":"http_url","children":[],"call":[" signed_url ","params merge "]}," Fog Storage AWS Utils cdn":{"type":"method","name":"cdn","children":[],"call":["Fog AWS CDN  new "]}," Fog AWS SQS Real _request":{"type":"method","name":"_request","children":[],"call":["@connection request ","v nil? ","(pair\n  (sym :body)\n  (lvar :body)) reject "]}," Fog AWS SQS Real request":{"type":"method","name":"request","children":[],"call":[" _request ","@instrumentor instrument ","AWS  signed_params_v4 ","params delete "," refresh_credentials_if_expired "]}," Fog AWS SQS Real path_from_queue_url":{"type":"method","name":"path_from_queue_url","children":[],"call":["queue_url split last sub ","queue_url split last ","queue_url split "]}," Fog AWS SQS Real setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":["Fog AWS SignatureV4  new ","options [] "]}," Fog AWS SQS Real reload":{"type":"method","name":"reload","children":[],"call":["@connection reset "]}," Fog AWS SQS Real initialize":{"type":"method","name":"initialize","children":[],"call":[" setup_credentials ","Fog XML Connection  new ","options [] "]}," Fog AWS SQS Mock setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":["options [] "]}," Fog AWS SQS Mock reset_data":{"type":"method","name":"reset_data","children":[],"call":[" class data [] delete "," class data [] "," class data "," class "]}," Fog AWS SQS Mock data":{"type":"method","name":"data","children":[],"call":[" class data [] [] "," class data [] "," class data "," class "]}," Fog AWS SQS Mock initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","@region inspect ","(str \"ap-northeast-1\") include? ","options [] "," setup_credentials ","Fog AWS  validate_region! "]}," Fog AWS SQS Mock reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog AWS SNS Real _request":{"type":"method","name":"_request","children":[],"call":["@connection request "]}," Fog AWS SNS Real request":{"type":"method","name":"request","children":[],"call":[" _request ","@instrumentor instrument ","AWS  signed_params_v4 ","params delete "," refresh_credentials_if_expired "]}," Fog AWS SNS Real setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":["Fog AWS SignatureV4  new ","options [] "]}," Fog AWS SNS Real reload":{"type":"method","name":"reload","children":[],"call":["@connection reset "]}," Fog AWS SNS Real initialize":{"type":"method","name":"initialize","children":[],"call":[" setup_credentials ","Fog XML Connection  new ","options [] "]}," Fog AWS SNS Mock reset_data":{"type":"method","name":"reset_data","children":[],"call":[" class data [] delete "," class data [] "," class data "," class "]}," Fog AWS SNS Mock data":{"type":"method","name":"data","children":[],"call":[" class data [] [] "," class data [] "," class data "," class "]}," Fog AWS SNS Mock initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","@region inspect ","(str \"ap-northeast-1\") include? ","options [] ","Fog AWS Mock  owner_id ","Fog AWS  validate_region! "]}," Fog AWS SimpleDB Real sdb_encode":{"type":"method","name":"sdb_encode","children":[],"call":["value to_s ","value nil? "]}," Fog AWS SimpleDB Real _request":{"type":"method","name":"_request","children":[],"call":["@connection request "]}," Fog AWS SimpleDB Real request":{"type":"method","name":"request","children":[],"call":[" _request ","@instrumentor instrument ","Fog AWS  signed_params ","params delete "," refresh_credentials_if_expired "]}," Fog AWS SimpleDB Real reload":{"type":"method","name":"reload","children":[],"call":["@connection reset "]}," Fog AWS SimpleDB Real encode_batch_attributes":{"type":"method","name":"encode_batch_attributes","children":[],"call":["encoded_attributes []= "," sdb_encode ","replace_attributes [] include? ","replace_attributes [] ","attribute_key to_s "," Array ","items [] [] ","items [] ","items [] keys ","item_key to_s ","items keys "]}," Fog AWS SimpleDB Real encode_attribute_names":{"type":"method","name":"encode_attribute_names","children":[],"call":["Fog AWS  indexed_param ","attributes to_s ","attributes map "]}," Fog AWS SimpleDB Real encode_attributes":{"type":"method","name":"encode_attributes","children":[],"call":["encoded_attributes []= "," sdb_encode ","replace_attributes include? ","key to_s "," Array ","attributes [] ","attributes keys ","exkey to_s ","expected_attributes [] ","expected_attributes keys each_with_index ","expected_attributes keys "]}," Fog AWS SimpleDB Real setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":["Fog HMAC  new ","options [] "]}," Fog AWS SimpleDB Real initialize":{"type":"method","name":"initialize","children":[],"call":["Fog XML Connection  new ","options [] "," setup_credentials "]}," Fog AWS SimpleDB Mock setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":["options [] "]}," Fog AWS SimpleDB Mock reset_data":{"type":"method","name":"reset_data","children":[],"call":[" class data delete "," class data "," class "]}," Fog AWS SimpleDB Mock data":{"type":"method","name":"data","children":[],"call":[" class data [] "," class data "," class "]}," Fog AWS SimpleDB Mock initialize":{"type":"method","name":"initialize","children":[],"call":[" setup_credentials ","options [] "]}," Fog AWS SimpleDB Mock reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog AWS SignatureV4 signed_headers":{"type":"method","name":"signed_headers","children":[],"call":["(send\n  (send\n    (block\n      (send\n        (send\n          (lvar :headers) :keys) :map)\n      (args\n        (arg :key))\n      (send\n        (lvar :key) :to_s)) :sort) :map) join ","key downcase ","(send\n  (send\n    (lvar :headers) :keys) :map) sort map ","(send\n  (send\n    (lvar :headers) :keys) :map) sort ","key to_s ","headers keys map ","headers keys ","(send\n  (send\n    (lvar :headers) :keys) :map) sort join ","key to_s downcase "]}," Fog AWS SignatureV4 canonical_headers":{"type":"method","name":"canonical_headers","children":[],"call":["canonical_headers << ","headers [] to_s strip ","headers [] to_s ","headers [] ","key to_s downcase ","key to_s ","k to_s ","headers keys sort_by ","headers keys ","k to_s downcase "]}," Fog AWS SignatureV4 canonical_query_string":{"type":"method","name":"canonical_query_string","children":[],"call":["canonical_query_string join ","canonical_query_string << ","Fog AWS  escape ","query [] to_s ","query [] ","key to_s ","k to_s ","(or\n  (lvar :query)\n  (hash)) keys sort_by ","(or\n  (lvar :query)\n  (hash)) keys "]}," Fog AWS SignatureV4 canonical_path":{"type":"method","name":"canonical_path","children":[],"call":["path empty? ","(send\n  (lvar :components) :inject\n  (array)) join ","acc << ","acc pop ","components inject ","path split ","path gsub gsub ","path gsub ","@service == ","(send\n  (lvar :components) :inject\n  (array)) join  empty? ","path gsub gsub  empty? ","(send\n  (lvar :path split ) :inject\n  (array)) join ","path split  inject ","(send\n  (lvar :components) :inject\n  (array)) join  split ","path gsub gsub  split ","(send\n  (lvar :components) :inject\n  (array)) join  gsub gsub ","path gsub gsub  gsub gsub ","(send\n  (lvar :components) :inject\n  (array)) join  gsub ","path gsub gsub  gsub "]}," Fog AWS SignatureV4 credential_scope":{"type":"method","name":"credential_scope","children":[],"call":["date utc strftime ","date utc "]}," Fog AWS SignatureV4 derived_hmac":{"type":"method","name":"derived_hmac","children":[],"call":["Fog HMAC  new ","Fog HMAC  new sign ","@hmac sign ","date utc strftime ","date utc "]}," Fog AWS SignatureV4 signature_components":{"type":"method","name":"signature_components","children":[],"call":["signature unpack first ","signature unpack "," signed_headers ","params [] "," credential_scope "," derived_hmac sign "," derived_hmac ","string_to_sign chop! ","Digest SHA256  hexdigest ","date to_iso8601_basic ","canonical_request chop! "," canonical_headers "," canonical_query_string "," canonical_path ","params [] to_s upcase ","params [] to_s ","OpenSSL Digest SHA256  hexdigest "," derived_hmac sign  unpack first "," derived_hmac sign  unpack "]}," Fog AWS SignatureV4 components_to_header":{"type":"method","name":"components_to_header","children":[],"call":["components [] "]}," Fog AWS SignatureV4 sign":{"type":"method","name":"sign","children":[],"call":[" signature_header "]}," Fog AWS SignatureV4 signature_header":{"type":"method","name":"signature_header","children":[],"call":[" components_to_header "," signature_components "]}," Fog AWS SignatureV4 signature_parameters":{"type":"method","name":"signature_parameters","children":[],"call":[" signature_components ","params dup merge ","params [] merge "," signed_headers ","params [] "," credential_scope ","params dup ","params dup merge  dup merge ","params dup merge  [] merge ","params dup merge  [] ","params dup merge  dup "]}," Fog AWS SignatureV4 initialize":{"type":"method","name":"initialize","children":[],"call":["Fog HMAC  new ","AWS4 + "]}," Fog AWS SES Real _request":{"type":"method","name":"_request","children":[],"call":[" raise ","Fog AWS SES Error  slurp ","match [] ","Fog AWS SES InvalidParameterError  slurp ","Fog AWS SES MessageRejected  slurp ","match empty? ","Fog AWS Errors  match_error ","@connection request ","Fog AWS Errors  match_error  [] ","Fog AWS Errors  match_error  empty? ","Fog AWS Errors  Fog AWS Errors  match_error _error "]}," Fog AWS SES Real request":{"type":"method","name":"request","children":[],"call":[" _request ","@instrumentor instrument ","body chop! ","body << ","CGI  escape gsub ","CGI  escape ","value to_s ","(lvasgn :value\n  (send\n    (lvar :params) :[]\n    (lvar :key))) nil? ","params [] ","params keys sort ","params keys ","headers [] << << ","Base64  encode64 chomp! ","Base64  encode64 ","@hmac sign ","headers [] ","headers [] << ","headers []= ","Fog Time  now to_date_header ","Fog Time  now ","params delete "," refresh_credentials_if_expired ","params []  to_s ","(lvasgn :params [] \n  (send\n    (lvar :params) :[]\n    (lvar :key))) nil? "]}," Fog AWS SES Real setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":["Fog HMAC  new ","options [] "]}," Fog AWS SES Real reload":{"type":"method","name":"reload","children":[],"call":["@connection reset "]}," Fog AWS SES Real initialize":{"type":"method","name":"initialize","children":[],"call":["Fog XML Connection  new ","options [] "," setup_credentials "]}," Fog AWS SES Mock initialize":{"type":"method","name":"initialize","children":[],"call":["Fog Mock  not_implemented "]}," Fog AWS STS Real get_session_token":{"type":"method","name":"get_session_token","children":[],"call":[" request ","Fog Parsers AWS STS GetSessionToken  new "]}," Fog AWS STS Mock get_federation_token":{"type":"method","name":"get_federation_token","children":[],"call":["response body= ","Fog AWS Mock  request_id ","Fog Mock  random_numbers ","Fog AWS Mock  owner_id ","Fog AWS Mock  key_id ","(send\n  (send\n    (const nil :DateTime) :now) :+\n  (lvar :duration)) strftime ","DateTime  now + ","DateTime  now ","Fog Mock  random_base64 ","response status= ","Excon Response  new tap ","Excon Response  new "]}," Fog AWS STS Real get_federation_token":{"type":"method","name":"get_federation_token","children":[],"call":[" request ","Fog Parsers AWS STS GetSessionToken  new ","Fog JSON  encode "]}," Fog AWS STS Real assume_role_with_saml":{"type":"method","name":"assume_role_with_saml","children":[],"call":[" request_unsigned ","Fog Parsers AWS STS AssumeRoleWithSAML  new ","Fog JSON  encode "]}," Fog AWS STS Real assume_role":{"type":"method","name":"assume_role","children":[],"call":[" request ","Fog Parsers AWS STS AssumeRole  new ","Fog JSON  encode "]}," Fog Storage AWS Mock upload_part":{"type":"method","name":"upload_part","children":[],"call":["response headers []= ","part_number to_s ","response headers ","response status= ","Excon Response  new ","upload_info [] []= ","data [] ","upload_info [] "," get_upload_info "," verify_mock_bucket_exists "," parse_mock_data ","Excon Response  new  headers []= ","Excon Response  new  headers ","Excon Response  new  status= "," get_upload_info  [] []= "," parse_mock_data  [] "," get_upload_info  [] "," get_ get_upload_info  "," parse_mock_ parse_mock_data  "]}," Fog Storage AWS Real upload_part":{"type":"method","name":"upload_part","children":[],"call":[" request ","data [] ","headers []= ","data [] [] ","Fog Storage  parse_data ","Fog Storage  parse_data  [] ","Fog Storage  parse_data  [] [] ","Fog Storage  parse_Fog Storage  parse_data  "]}," Fog Storage AWS Mock sync_clock":{"type":"method","name":"sync_clock","children":[],"call":[]}," Fog Storage AWS Real sync_clock":{"type":"method","name":"sync_clock","children":[],"call":["Fog Time  now= ","Time  parse ","response headers [] ","response headers ","error response "," get_service "]}," Fog Storage AWS SharedMockMethods store_mock_object":{"type":"method","name":"store_mock_object","children":[],"call":["bucket [] []= ","bucket [] ","bucket [] [] unshift ","bucket [] [] ","bucket [] [] shift ","bucket [] [] first [] == ","bucket [] [] first [] ","bucket [] [] first ","bucket [] == ","object []= ","Fog Mock  random_base64 ","options [] ","Fog Time  now to_date_header ","Fog Time  now ","Digest MD5  hexdigest ","OpenSSL Digest MD5  hexdigest "]}," Fog Storage AWS SharedMockMethods get_upload_info":{"type":"method","name":"get_upload_info","children":[],"call":[" raise ","Excon Errors  status_error ","response status= ","Excon Response  new ","upload_info ! "," data [] [] [] "," data [] [] "," data [] "," data "," data [] [] delete ","Excon Response  new  status= "," data [] [] []  ! "," data [] [] delete  ! "]}," Fog Storage AWS SharedMockMethods verify_mock_bucket_exists":{"type":"method","name":"verify_mock_bucket_exists","children":[],"call":[" raise ","Excon Errors  status_error ","response status= ","Excon Response  new "," data [] [] "," data [] "," data ","Excon Response  new  status= "]}," Fog Storage AWS SharedMockMethods parse_mock_data":{"type":"method","name":"parse_mock_data","children":[],"call":["data []= ","data [] read ","data [] ","data [] is_a? ","Fog Storage  parse_data ","Fog Storage  parse_data  []= ","Fog Storage  parse_data  [] read ","Fog Storage  parse_data  [] ","Fog Storage  parse_data  [] is_a? ","Fog Storage  parse_Fog Storage  parse_data  "]}," Fog Storage AWS SharedMockMethods define_mock_acl":{"type":"method","name":"define_mock_acl","children":[],"call":[" data [] [] [] []= "," class acls "," class "," data [] [] [] "," data [] [] "," data [] "," data "," raise ","Excon Errors BadRequest  new ","(str \"private\") include? ! ","(str \"private\") include? ","options [] "]}," Fog Storage AWS Mock put_request_payment":{"type":"method","name":"put_request_payment","children":[],"call":[" raise ","Excon Errors  status_error ","response status= ","bucket []= "," data [] [] "," data [] "," data ","Excon Response  new ","Excon Response  new  status= "," data [] []  []= "]}," Fog Storage AWS Real put_request_payment":{"type":"method","name":"put_request_payment","children":[],"call":[" request "]}," Fog Storage AWS PutObjectUrl put_object_url":{"type":"method","name":"put_object_url","children":[],"call":[" signed_url ","options merge "," raise ","ArgumentError  new "]}," Fog Storage AWS Mock put_object_acl":{"type":"method","name":"put_object_acl","children":[],"call":[" data [] [] [] []= "," data [] [] [] "," data [] [] "," data [] "," data "," raise ","Excon Errors BadRequest  new ","(str \"private\") include? ! ","(str \"private\") include? ","Fog Storage AWS  hash_to_acl ","acl is_a? "]}," Fog Storage AWS Real put_object_acl":{"type":"method","name":"put_object_acl","children":[],"call":[" request ","headers []= ","Fog Time  now to_date_header ","Fog Time  now ","Base64  encode64 strip ","Base64  encode64 ","Digest MD5  digest "," raise ","Excon Errors BadRequest  new ","(str \"private\") include? ! ","(str \"private\") include? ","Fog Storage AWS  hash_to_acl ","acl is_a? ","query []= ","options delete ","OpenSSL Digest MD5  digest "]}," Fog Storage AWS Mock put_object":{"type":"method","name":"put_object","children":[],"call":["response headers []= ","object [] ","response headers ","object [] != ","response headers= ","response status= ","Excon Response  new "," store_mock_object ","data [] ","data [] [] ","options [] "," verify_mock_bucket_exists ","Fog Storage AWS Real  conforming_to_us_ascii! ","headers keys grep ","headers keys ","data [] merge! "," parse_mock_data "," define_mock_acl ","Excon Response  new  headers []= ","response data [] merge!  []= "," store_mock_object  [] ","Excon Response  new  headers ","response data [] merge!  "," store_mock_object  [] != ","Excon Response  new  headers= ","response data [] merge! = ","Excon Response  new  status= "," store_mock_ store_mock_object  "," parse_mock_data  [] "," parse_mock_data  [] [] "," verify_mock_ verify_mock_bucket_exists _exists ","data [] merge!  keys grep ","data [] merge!  keys "," parse_mock_data  [] merge! "," parse_mock_ parse_mock_data  "]}," Fog Storage AWS Real put_object":{"type":"method","name":"put_object","children":[],"call":[" request ","data [] "," class conforming_to_us_ascii! ","headers keys grep ","headers keys "," class ","data [] merge! ","Fog Storage  parse_data ","Fog Storage  parse_data  [] ","data [] merge!  keys grep ","data [] merge!  keys ","Fog Storage  parse_data  [] merge! ","Fog Storage  parse_Fog Storage  parse_data  "]}," Fog Storage AWS Real conforming_to_us_ascii!":{"type":"method","name":"conforming_to_us_ascii!","children":[],"call":[]}," Fog Storage AWS Mock put_bucket_website":{"type":"method","name":"put_bucket_website","children":[],"call":[" raise ","Excon Errors  status_error ","response status= "," data [] [] "," data [] "," data ","Excon Response  new ","Excon Response  new  status= "]}," Fog Storage AWS Real put_bucket_website":{"type":"method","name":"put_bucket_website","children":[],"call":[" request ","data << ","options [] ","options merge! ","options []= ","options_to_be_deprecated [] ","Fog Logger  deprecation "," caller first "," caller ","options class ","options is_a? "]}," Fog Storage AWS Mock put_bucket_versioning":{"type":"method","name":"put_bucket_versioning","children":[],"call":[" raise ","Excon Errors  status_error ","response body= ","Fog Mock  random_base64 ","Fog Mock  random_hex ","response status= ","bucket []= ","(str \"Enabled\") include? "," data [] [] "," data [] "," data ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  []= "]}," Fog Storage AWS Real put_bucket_versioning":{"type":"method","name":"put_bucket_versioning","children":[],"call":[" request "]}," Fog Storage AWS Mock put_bucket_tagging":{"type":"method","name":"put_bucket_tagging","children":[],"call":[" raise ","Excon Errors  status_error ","response status= "," data [] []= "," data [] "," data "," data [] [] ","Excon Response  new ","Excon Response  new  status= "]}," Fog Storage AWS Real put_bucket_tagging":{"type":"method","name":"put_bucket_tagging","children":[],"call":[" request ","Base64  encode64 chomp! ","Base64  encode64 ","Digest MD5  digest ","(send\n  (lvar :tags) :map) join ","tags map ","OpenSSL Digest MD5  digest "]}," Fog Storage AWS Real put_bucket_policy":{"type":"method","name":"put_bucket_policy","children":[],"call":[" request ","Fog JSON  encode "]}," Fog Storage AWS Mock put_bucket_notification":{"type":"method","name":"put_bucket_notification","children":[],"call":[" raise ","Excon Errors  status_error ","response status= "," data [] []= "," data [] "," data "," data [] [] ","Excon Response  new ","Excon Response  new  status= "]}," Fog Storage AWS Real put_bucket_notification":{"type":"method","name":"put_bucket_notification","children":[],"call":[" request ","Base64  encode64 chomp! ","Base64  encode64 ","Digest MD5  digest ","body gsub! ","builder to_xml "," Event ","func [] "," InvocationRole "," CloudFunction "," Id "," CloudFunctionConfiguration ","notification fetch each ","notification fetch "," topic [] "," topic "," Queue ","queue [] "," QueueConfiguration ","topic [] "," Topic "," TopicConfiguration "," NotificationConfiguration ","Nokogiri XML Builder  new ","OpenSSL Digest MD5  digest ","builder to_xml  gsub! "]}," Fog Storage AWS Real put_bucket_logging":{"type":"method","name":"put_bucket_logging","children":[],"call":[" request ","data << ","grant [] ","grant [] keys sort ","grant [] keys ","logging_status [] each ","logging_status [] ","logging_status [] [] ","logging_status [] empty? "]}," Fog Storage AWS Real put_bucket_lifecycle":{"type":"method","name":"put_bucket_lifecycle","children":[],"call":[" request ","Base64  encode64 chomp! ","Base64  encode64 ","Digest MD5  digest ","body gsub! ","builder to_xml "," Days ","rule [] "," Expiration "," StorageClass ","rule [] [] ","rule [] [] nil? "," Date ","Time  parse utc iso8601 ","Time  parse utc ","Time  parse "," time "," time utc iso8601 "," time utc ","rule [] [] is_a? "," Transition ","rule [] [] utc iso8601 ","rule [] [] utc "," Status "," Prefix "," ID "," Rule ","lifecycle [] each ","lifecycle [] "," LifecycleConfiguration ","Nokogiri XML Builder  new ","OpenSSL Digest MD5  digest "," NoncurrentDays "," NoncurrentVersionTransition "," NoncurrentVersoinExpiration "," NoncurrentVersionExpiration ","builder to_xml  gsub! "]}," Fog Storage AWS Mock put_bucket_cors":{"type":"method","name":"put_bucket_cors","children":[],"call":[" data [] [] []= ","Fog Storage AWS  hash_to_cors "," data [] [] "," data [] "," data "]}," Fog Storage AWS Real put_bucket_cors":{"type":"method","name":"put_bucket_cors","children":[],"call":[" request ","headers []= ","Fog Time  now to_date_header ","Fog Time  now ","Base64  encode64 strip ","Base64  encode64 ","Digest MD5  digest ","Fog Storage AWS  hash_to_cors ","OpenSSL Digest MD5  digest "]}," Fog Storage AWS Mock put_bucket_acl":{"type":"method","name":"put_bucket_acl","children":[],"call":[" data [] [] []= "," data [] [] "," data [] "," data "," raise ","Excon Errors BadRequest  new ","(str \"private\") include? ! ","(str \"private\") include? ","Fog Storage AWS  hash_to_acl ","acl is_a? "]}," Fog Storage AWS Real put_bucket_acl":{"type":"method","name":"put_bucket_acl","children":[],"call":[" request ","headers []= ","Fog Time  now to_date_header ","Fog Time  now ","Base64  encode64 strip ","Base64  encode64 ","Digest MD5  digest "," raise ","Excon Errors BadRequest  new ","(str \"private\") include? ! ","(str \"private\") include? ","Fog Storage AWS  hash_to_acl ","acl is_a? ","OpenSSL Digest MD5  digest "]}," Fog Storage AWS Mock put_bucket":{"type":"method","name":"put_bucket","children":[],"call":[" raise ","Excon Errors  status_error ","response status= "," data [] []= "," data [] "," data "," region == "," region "," data [] [] ! "," data [] [] ","bucket []= ","options [] ","Time  now ","Excon Response  new "," data [] [] []= "," class acls "," class ","Excon Errors BadRequest  new ","(str \"private\") include? ! ","(str \"private\") include? ","Fog Logger  warning "," region != ","Excon Response  new  status= "]}," Fog Storage AWS Real put_bucket":{"type":"method","name":"put_bucket","children":[],"call":[" request ","options delete "]}," Fog Storage AWS Mock post_object_restore":{"type":"method","name":"post_object_restore","children":[],"call":["response body= "," get_object "," get_object  body= "]}," Fog Storage AWS Real post_object_restore":{"type":"method","name":"post_object_restore","children":[],"call":[" request ","headers []= ","Fog Time  now to_date_header ","Fog Time  now ","Base64  encode64 strip ","Base64  encode64 ","Digest MD5  digest ","<RestoreRequest xmlns=\"http://s3.amazonaws.com/doc/2006-3-01\"><Days> + + ","<RestoreRequest xmlns=\"http://s3.amazonaws.com/doc/2006-3-01\"><Days> + ","days to_s "," raise ","ArgumentError  new ","OpenSSL Digest MD5  digest "]}," Fog Storage AWS Real post_object_hidden_fields":{"type":"method","name":"post_object_hidden_fields","children":[],"call":["options []= ","@signer derived_hmac sign unpack first ","@signer derived_hmac sign unpack ","@signer derived_hmac sign ","options [] ","@signer derived_hmac ","date to_iso8601_basic ","Base64  encode64 gsub ","Base64  encode64 ","Fog JSON  encode ","policy merge ","policy [] + ","policy [] ","extra_conditions << ","@signer credential_scope ","Fog Time  now ","options dup ","options dup  []= ","options dup  [] ","Fog Time  now  to_iso8601_basic ","options []  merge ","options []  [] + ","options []  [] ","options dup  dup "]}," Fog Storage AWS Real list_parts":{"type":"method","name":"list_parts","children":[],"call":[" request ","options merge! ","Fog Parsers Storage AWS ListParts  new ","options []= "]}," Fog Storage AWS Real list_multipart_uploads":{"type":"method","name":"list_multipart_uploads","children":[],"call":[" request ","options merge! ","Fog Parsers Storage AWS ListMultipartUploads  new "]}," Fog Storage AWS Mock initiate_multipart_upload":{"type":"method","name":"initiate_multipart_upload","children":[],"call":["response body= ","response status= ","Excon Response  new "," data [] [] []= "," data [] [] "," data [] "," data ","UUID  uuid "," verify_mock_bucket_exists ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Storage AWS Real initiate_multipart_upload":{"type":"method","name":"initiate_multipart_upload","children":[],"call":[" request ","Fog Parsers Storage AWS InitiateMultipartUpload  new "]}," Fog Storage AWS Mock head_object":{"type":"method","name":"head_object","children":[],"call":["response body= "," get_object "," get_object  body= "]}," Fog Storage AWS Real head_object":{"type":"method","name":"head_object","children":[],"call":[" request ","headers merge! ","headers []= ","Fog Time  at to_date_header ","Fog Time  at ","options [] to_i ","options [] ","options delete "," raise ","ArgumentError  new "]}," Fog Storage AWS Mock head_bucket":{"type":"method","name":"head_bucket","children":[],"call":["response body= "," get_bucket "," get_bucket  body= "]}," Fog Storage AWS Real head_bucket":{"type":"method","name":"head_bucket","children":[],"call":[" request "," raise ","ArgumentError  new "]}," Fog Storage AWS Mock get_service":{"type":"method","name":"get_service","children":[],"call":["response body= ","(str \"CreationDate\") include? ! ","(str \"CreationDate\") include? ","bucket reject "," data [] values map "," data [] values "," data [] "," data ","response headers []= ","response headers ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  headers []= ","Excon Response  new  headers "]}," Fog Storage AWS Real get_service":{"type":"method","name":"get_service","children":[],"call":[" request ","Fog Parsers Storage AWS GetService  new "]}," Fog Storage AWS Mock get_request_payment":{"type":"method","name":"get_request_payment","children":[],"call":[" raise ","Excon Errors  status_error ","response status= ","response body= ","bucket [] "," data [] [] "," data [] "," data ","Excon Response  new ","Excon Response  new  status= ","Excon Response  new  body= "," data [] []  [] "]}," Fog Storage AWS Real get_request_payment":{"type":"method","name":"get_request_payment","children":[],"call":[" request ","Fog Parsers Storage AWS GetRequestPayment  new "]}," Fog Storage AWS GetObjectUrl get_object_url":{"type":"method","name":"get_object_url","children":[],"call":[" signed_url ","options merge "," raise ","ArgumentError  new "]}," Fog Storage AWS Real get_object_torrent":{"type":"method","name":"get_object_torrent","children":[],"call":[" request "," raise ","ArgumentError  new "]}," Fog Storage AWS GetObjectHttpsUrl get_object_https_url":{"type":"method","name":"get_object_https_url","children":[],"call":[" get_object_url ","options merge "]}," Fog Storage AWS GetObjectHttpUrl get_object_http_url":{"type":"method","name":"get_object_http_url","children":[],"call":[" get_object_url ","options merge "]}," Fog Storage AWS Mock get_object_acl":{"type":"method","name":"get_object_acl","children":[],"call":[" raise ","Excon Errors  status_error ","response status= ","response body= ","Fog Storage AWS  acl_to_hash ","acl is_a? "," data [] [] [] [] "," data [] [] [] "," data [] [] "," data [] "," data ","Excon Response  new ","Excon Response  new  status= ","Excon Response  new  body= "]}," Fog Storage AWS Real get_object_acl":{"type":"method","name":"get_object_acl","children":[],"call":[" request ","Fog Parsers Storage AWS AccessControlList  new ","query []= ","options delete "," raise ","ArgumentError  new "]}," Fog Storage AWS Mock byte_ranges":{"type":"method","name":"byte_ranges","children":[],"call":["ranges << ","r0 <= ","size - ","r1 >= ","r1 < ","r1 to_i ","r1 empty? ","r0 to_i ","(send\n  (lvar :size) :-\n  (send\n    (lvar :r1) :to_i)) max ","r0 empty? ","matches [] ","range_spec match ","http_range split each ","http_range split ","r0 to_i  <= ","(send\n  (lvar :size) :-\n  (send\n    (lvar :r1) :to_i)) max  <= ","size -  >= ","r1 to_i  >= ","size -  < ","r1 to_i  < ","size -  to_i ","r1 to_i  to_i ","size -  empty? ","r1 to_i  empty? ","r0 to_i  to_i ","(send\n  (lvar :size) :-\n  (send\n    (lvar :r1) :to_i)) max  to_i ","(send\n  (lvar :size) :-\n  (send\n    (lvar :size - ) :to_i)) max ","(send\n  (lvar :size) :-\n  (send\n    (lvar :r1 to_i ) :to_i)) max ","r0 to_i  empty? ","(send\n  (lvar :size) :-\n  (send\n    (lvar :r1) :to_i)) max  empty? ","range_spec match  [] "]}," Fog Storage AWS Mock get_object":{"type":"method","name":"get_object","children":[],"call":[" raise ","Excon Errors  status_error ","response body= ","response status= ","Fog Mock  random_base64 ","Fog Mock  random_hex ","object ! ","block call ","data read ","(lvar :remaining) min ","remaining > ","data length ","StringIO  new "," block_given? ","body [] ","ranges first ","ranges empty? ","ranges nil? "," byte_ranges ","body size ","options [] ","object [] ","response headers []= ","response headers ","bucket [] ","options [] < ","Time  parse ","options [] == ","options [] >= ","options [] != ","object [] ! ","bucket [] [] first ","bucket [] [] ","object [] == ","bucket [] [] find ","bucket [] key? "," data [] [] "," data [] "," data ","Excon Response  new ","ArgumentError  new ","options delete ","response body [] = ","response object [] = ","Excon Response  new  body= ","Excon Response  new  status= ","bucket [] [] first  ! ","StringIO  new  read ","(lvar :data length ) min ","data length  > ","StringIO  new  length ","body []  [] ","object []  [] "," byte_ranges  first "," byte_ranges  empty? "," byte_ranges  nil? "," byte_ byte_ranges  ","body []  size ","object []  size ","bucket [] [] first  [] ","Excon Response  new  headers []= ","Excon Response  new  headers "," data [] []  [] ","bucket [] [] first  [] ! "," data [] []  [] [] first "," data [] []  [] [] ","bucket [] [] first  [] == "," data [] []  [] [] find "," data [] []  [] key? "," StringIO  new  [] [] "," StringIO  new  [] "," StringIO  new  "]}," Fog Storage AWS Real get_object":{"type":"method","name":"get_object","children":[],"call":[" request ","params merge! ","params []= ","Proc  new "," block_given? ","params [] []= ","Fog Time  at to_date_header ","Fog Time  at ","options [] to_i ","options [] ","params [] ","params [] merge! ","params [] merge ","options delete "," raise ","ArgumentError  new "]}," Fog Storage AWS Real get_bucket_website":{"type":"method","name":"get_bucket_website","children":[],"call":[" request ","Fog Parsers Storage AWS GetBucketWebsite  new "," raise ","ArgumentError  new "]}," Fog Storage AWS Mock get_bucket_versioning":{"type":"method","name":"get_bucket_versioning","children":[],"call":[" raise ","Excon Errors  status_error ","response body= ","Fog Mock  random_base64 ","Fog Mock  random_hex ","response status= ","bucket [] "," data [] [] "," data [] "," data ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  [] "]}," Fog Storage AWS Real get_bucket_versioning":{"type":"method","name":"get_bucket_versioning","children":[],"call":[" request ","Fog Parsers Storage AWS GetBucketVersioning  new "," raise ","ArgumentError  new "]}," Fog Storage AWS Mock get_bucket_tagging":{"type":"method","name":"get_bucket_tagging","children":[],"call":[" raise ","Excon Errors  status_error ","response status= ","response body= "," data [] [] "," data [] "," data ","Excon Response  new ","Excon Response  new  status= ","Excon Response  new  body= "]}," Fog Storage AWS Real get_bucket_tagging":{"type":"method","name":"get_bucket_tagging","children":[],"call":[" request ","Fog Parsers Storage AWS GetBucketTagging  new "," raise ","ArgumentError  new "]}," Fog Storage AWS Real get_bucket_policy":{"type":"method","name":"get_bucket_policy","children":[],"call":["response body= ","Fog JSON  decode ","response body ","response body nil? "," request "," raise ","ArgumentError  new "," request  body= "," request  body "," request  body nil? "]}," Fog Storage AWS Mock get_bucket_object_versions":{"type":"method","name":"get_bucket_object_versions","children":[],"call":[" raise ","Excon Errors  status_error ","response body= ","Fog Mock  random_base64 ","Fog Mock  random_hex ","response status= ","response body []= ","response body [] [] ","response body [] ","response body ","max_keys < ","response body [] length ","bucket [] ","truncated_contents size != ","contents size ","truncated_contents size ","contents [] ","(lvar :max_keys) min ","data [] []= ","object [] to_i ","object [] ","data [] ","tag_name == ","data [] merge! ","object == ","bucket [] [] first ","bucket [] [] ","Time  parse ","data []= ","extracted_attrs include? ! ","extracted_attrs include? ","object reject ","object key? ","(send\n  (send\n    (block\n      (send\n        (send\n          (send\n            (send\n              (lvar :bucket) :[]\n              (sym :objects)) :keys) :sort) :map)\n      (args\n        (arg :key))\n      (send\n        (send\n          (lvar :bucket) :[]\n          (sym :objects)) :[]\n        (lvar :key))) :flatten) :reject) map "," common_prefixes << ","object [] sub "," common_prefixes ","object [] [] include? ","object [] [] ","prefix length ","object [] <= ","object [] [] != ","(send\n  (send\n    (send\n      (send\n        (lvar :bucket) :[]\n        (sym :objects)) :keys) :sort) :map) flatten reject ","(send\n  (send\n    (send\n      (send\n        (lvar :bucket) :[]\n        (sym :objects)) :keys) :sort) :map) flatten ","bucket [] keys sort map ","bucket [] keys sort ","bucket [] keys "," data [] [] "," data [] "," data ","key_marker ! ","Excon Response  new ","ArgumentError  new ","options [] ","Excon Response  new  body= ","Excon Response  new  status= ","Excon Response  new  body []= ","Excon Response  new  body [] [] ","Excon Response  new  body [] ","Excon Response  new  body ","Excon Response  new  body [] length "," data [] []  [] ","contents []  size != ","truncated_contents (lvar :max_keys) min  != ","contents (lvar :max_keys) min  ","contents []  size ","truncated_contents (lvar :max_keys) min  "," data [] []  [] [] first "," data [] []  [] [] ","(send\n  (send\n    (block\n      (send\n        (send\n          (send\n            (send\n              (lvar : data [] [] ) :[]\n              (sym :objects)) :keys) :sort) :map)\n      (args\n        (arg :key))\n      (send\n        (send\n          (lvar : data [] [] ) :[]\n          (sym :objects)) :[]\n        (lvar :key))) :flatten) :reject) map ","(send\n  (send\n    (send\n      (send\n        (lvar : data [] [] ) :[]\n        (sym :objects)) :keys) :sort) :map) flatten reject ","(send\n  (send\n    (send\n      (send\n        (lvar : data [] [] ) :[]\n        (sym :objects)) :keys) :sort) :map) flatten "," data [] []  [] keys sort map "," data [] []  [] keys sort "," data [] []  [] keys "]}," Fog Storage AWS Real get_bucket_object_versions":{"type":"method","name":"get_bucket_object_versions","children":[],"call":[" request ","(pair\n  (str \"versions\")\n  (nil)) merge! ","Fog Parsers Storage AWS GetBucketObjectVersions  new "," raise ","ArgumentError  new "]}," Fog Storage AWS Mock get_bucket_notification":{"type":"method","name":"get_bucket_notification","children":[],"call":[" raise ","Excon Errors  status_error ","response status= ","response body= "," data [] [] "," data [] "," data ","Excon Response  new ","Excon Response  new  status= ","Excon Response  new  body= "]}," Fog Storage AWS Real get_bucket_notification":{"type":"method","name":"get_bucket_notification","children":[],"call":[" request ","Fog Parsers Storage AWS GetBucketNotification  new "," raise ","ArgumentError  new "]}," Fog Storage AWS Real get_bucket_logging":{"type":"method","name":"get_bucket_logging","children":[],"call":[" request ","Fog Parsers Storage AWS GetBucketLogging  new "," raise ","ArgumentError  new "]}," Fog Storage AWS Mock get_bucket_location":{"type":"method","name":"get_bucket_location","children":[],"call":[" raise ","Excon Errors  status_error ","response status= ","response body= ","bucket [] "," data [] [] "," data [] "," data ","Excon Response  new ","Excon Response  new  status= ","Excon Response  new  body= "," data [] []  [] "]}," Fog Storage AWS Real get_bucket_location":{"type":"method","name":"get_bucket_location","children":[],"call":[" request ","Fog Parsers Storage AWS GetBucketLocation  new "]}," Fog Storage AWS Real get_bucket_lifecycle":{"type":"method","name":"get_bucket_lifecycle","children":[],"call":[" request ","Fog Parsers Storage AWS GetBucketLifecycle  new "]}," Fog Storage AWS Mock get_bucket_cors":{"type":"method","name":"get_bucket_cors","children":[],"call":[" raise ","Excon Errors  status_error ","response status= ","response body= ","Fog Storage AWS  cors_to_hash ","cors is_a? "," data [] [] [] "," data [] [] "," data [] "," data ","Excon Response  new ","Excon Response  new  status= ","Excon Response  new  body= ","Fog Storage AWS   data [] [] [] _to_hash "," data [] [] []  is_a? "]}," Fog Storage AWS Real get_bucket_cors":{"type":"method","name":"get_bucket_cors","children":[],"call":[" request ","Fog Parsers Storage AWS CorsConfiguration  new "," raise ","ArgumentError  new "]}," Fog Storage AWS Mock get_bucket_acl":{"type":"method","name":"get_bucket_acl","children":[],"call":[" raise ","Excon Errors  status_error ","response status= ","response body= ","Fog Storage AWS  acl_to_hash ","acl is_a? "," data [] [] [] "," data [] [] "," data [] "," data ","Excon Response  new ","Excon Response  new  status= ","Excon Response  new  body= ","Fog Storage AWS   data [] [] [] _to_hash "," data [] [] []  is_a? "]}," Fog Storage AWS Real get_bucket_acl":{"type":"method","name":"get_bucket_acl","children":[],"call":[" request ","Fog Parsers Storage AWS AccessControlList  new "," raise ","ArgumentError  new "]}," Fog Storage AWS Mock get_bucket":{"type":"method","name":"get_bucket","children":[],"call":[" raise ","Excon Errors  status_error ","response status= ","response body []= ","response body [] [] ","response body [] ","response body ","max_keys < ","response body [] length ","response body= ","bucket [] ","truncated_contents size != ","contents size ","truncated_contents size ","common_prefixes uniq ","contents [] ","(lvar :max_keys) min ","data merge! ","object [] to_i ","object [] ","Time  parse ","(str \"ETag\") include? ! ","(str \"ETag\") include? ","object reject ","(send\n  (block\n    (send\n      (send\n        (send\n          (send\n            (lvar :bucket) :[]\n            (sym :objects)) :values) :map\n        (block-pass\n          (sym :first))) :sort)\n    (args\n      (arg :x)\n      (arg :y))\n    (send\n      (send\n        (lvar :x) :[]\n        (str \"Key\")) :<=>\n      (send\n        (lvar :y) :[]\n        (str \"Key\")))) :reject) map ","object key? ","common_prefixes << ","object [] sub ","object [] [] include? ","object [] [] ","prefix length ","object [] <= ","object [] [] != ","(send\n  (send\n    (send\n      (send\n        (lvar :bucket) :[]\n        (sym :objects)) :values) :map\n    (block-pass\n      (sym :first))) :sort) reject ","x [] <=> ","y [] ","x [] ","bucket [] values map sort ","bucket [] values map ","bucket [] values "," data [] [] "," data [] "," data ","Excon Response  new ","ArgumentError  new ","options [] ","Excon Response  new  status= ","Excon Response  new  body []= ","Excon Response  new  body [] [] ","Excon Response  new  body [] ","Excon Response  new  body ","Excon Response  new  body [] length ","Excon Response  new  body= "," data [] []  [] ","contents []  size != ","truncated_contents (lvar :max_keys) min  != ","contents (lvar :max_keys) min  ","contents []  size ","truncated_contents (lvar :max_keys) min  ","(send\n  (block\n    (send\n      (send\n        (send\n          (send\n            (lvar : data [] [] ) :[]\n            (sym :objects)) :values) :map\n        (block-pass\n          (sym :first))) :sort)\n    (args\n      (arg :x)\n      (arg :y))\n    (send\n      (send\n        (lvar :x) :[]\n        (str \"Key\")) :<=>\n      (send\n        (lvar :y) :[]\n        (str \"Key\")))) :reject) map ","(send\n  (send\n    (send\n      (send\n        (lvar : data [] [] ) :[]\n        (sym :objects)) :values) :map\n    (block-pass\n      (sym :first))) :sort) reject "," data [] []  [] values map sort "," data [] []  [] values map "," data [] []  [] values "]}," Fog Storage AWS Real get_bucket":{"type":"method","name":"get_bucket","children":[],"call":[" request ","Fog Parsers Storage AWS GetBucket  new "," raise ","ArgumentError  new "]}," Fog Storage AWS Mock invalid_version_id_payload":{"type":"method","name":"invalid_version_id_payload","children":[],"call":["Fog Mock  random_base64 ","Fog Mock  random_hex "]}," Fog Storage AWS Mock delete_object":{"type":"method","name":"delete_object","children":[],"call":[" raise ","Excon Errors  status_error ","response status= ","response headers []= ","response headers ","bucket [] delete ","bucket [] ","response body= "," invalid_version_id_payload ","version_id != ","delete_marker [] ","bucket [] [] unshift ","bucket [] [] ","bucket [] [] shift ","bucket [] [] first [] == ","bucket [] [] first [] ","bucket [] [] first ","bucket [] == ","Fog Time  now to_date_header ","Fog Time  now ","Fog Mock  random_base64 ","version [] ","bucket [] [] empty? ","bucket [] [] delete ","version_id == ","object [] == ","object [] ","bucket [] [] find ","options delete "," data [] [] "," data [] "," data ","Excon Response  new ","Excon Response  new  status= ","Excon Response  new  headers []= ","Excon Response  new  headers "," data [] []  [] delete "," data [] []  [] ","Excon Response  new  body= "," invalid_options delete _payload ","options delete  != "," data [] []  [] [] unshift "," data [] []  [] [] "," data [] []  [] [] shift "," data [] []  [] [] first [] == "," data [] []  [] [] first [] "," data [] []  [] [] first "," data [] []  [] == "," data [] []  [] [] empty? "," data [] []  [] [] delete ","options delete  == "," data [] []  [] [] find "]}," Fog Storage AWS Real delete_object":{"type":"method","name":"delete_object","children":[],"call":[" request ","options delete "]}," Fog Storage AWS Mock delete_error_body":{"type":"method","name":"delete_error_body","children":[],"call":[]}," Fog Storage AWS Mock delete_object_helper":{"type":"method","name":"delete_object_helper","children":[],"call":["response []= ","bucket [] delete ","bucket [] "," invalid_version_id_payload "," delete_error_body ","version_id != ","delete_marker [] ","bucket [] [] unshift ","bucket [] [] ","bucket [] [] shift ","bucket [] [] first [] == ","bucket [] [] first [] ","bucket [] [] first ","bucket [] == ","Fog Time  now to_date_header ","Fog Time  now ","Fog Mock  random_base64 ","bucket [] [] empty? ","bucket [] [] delete ","version_id == ","object [] == ","object [] ","bucket [] [] find "," invalid_version_id_payload  []= "," delete_error_body  []= "]}," Fog Storage AWS Mock delete_multiple_objects":{"type":"method","name":"delete_multiple_objects","children":[],"call":[" raise ","Excon Errors  status_error ","response status= ","response body [] << "," delete_object_helper ","response body [] ","response body ","version_ids [] ","version_ids nil? ","object_names each ","headers delete ","response body= "," data [] [] "," data [] "," data ","Excon Response  new ","options dup ","Excon Response  new  status= ","Excon Response  new  body [] << ","Excon Response  new  body [] ","Excon Response  new  body ","headers delete  [] ","headers delete  nil? ","options dup  delete ","Excon Response  new  body= "]}," Fog Storage AWS Real delete_multiple_objects":{"type":"method","name":"delete_multiple_objects","children":[],"call":[" request ","Fog Parsers Storage AWS DeleteMultipleObjects  new ","headers []= ","Base64  encode64 gsub ","Base64  encode64 ","Digest MD5  digest ","data length ","data << ","CGI  escapeHTML ","version_ids [] ","version_ids nil? ","object_names each ","headers delete ","options dup ","OpenSSL Digest MD5  digest ","data bytesize ","options dup  []= ","headers delete  [] ","headers delete  nil? ","options dup  delete "]}," Fog Storage AWS Real delete_bucket_website":{"type":"method","name":"delete_bucket_website","children":[],"call":[" request "]}," Fog Storage AWS Mock delete_bucket_tagging":{"type":"method","name":"delete_bucket_tagging","children":[],"call":[" raise ","Excon Errors  status_error ","response status= "," data [] delete "," data [] "," data "," data [] [] ","Excon Response  new ","Excon Response  new  status= "]}," Fog Storage AWS Real delete_bucket_tagging":{"type":"method","name":"delete_bucket_tagging","children":[],"call":[" request "]}," Fog Storage AWS Real delete_bucket_policy":{"type":"method","name":"delete_bucket_policy","children":[],"call":[" request "]}," Fog Storage AWS Real delete_bucket_lifecycle":{"type":"method","name":"delete_bucket_lifecycle","children":[],"call":[" request "]}," Fog Storage AWS Real delete_bucket_cors":{"type":"method","name":"delete_bucket_cors","children":[],"call":[" request "]}," Fog Storage AWS Mock delete_bucket":{"type":"method","name":"delete_bucket","children":[],"call":["response status= "," data [] delete "," data [] "," data "," raise ","Excon Errors  status_error "," data [] [] [] empty? ! "," data [] [] [] empty? "," data [] [] [] "," data [] [] "," data [] [] nil? ","Excon Response  new ","Excon Response  new  status= "]}," Fog Storage AWS Real delete_bucket":{"type":"method","name":"delete_bucket","children":[],"call":[" request "]}," Fog Storage AWS cors_to_hash":{"type":"method","name":"cors_to_hash","children":[],"call":[]}," Fog Storage AWS hash_to_cors":{"type":"method","name":"hash_to_cors","children":[],"call":[]}," Fog Storage AWS Mock copy_object":{"type":"method","name":"copy_object","children":[],"call":[" raise ","Excon Errors  status_error ","response status= ","response body= ","Time  parse ","target_object [] ","target_bucket [] []= ","target_bucket [] ","target_object merge! ","source_object dup "," data [] [] [] []= "," class acls "," class "," data [] [] [] "," data [] [] "," data [] "," data ","Excon Errors BadRequest  new ","(str \"private\") include? ! ","(str \"private\") include? ","options [] ","source_bucket [] [] first ","source_bucket [] [] ","source_bucket [] ","Excon Response  new ","Excon Response  new  status= ","Excon Response  new  body= ","source_object dup  [] "," data [] []  [] []= "," data [] []  [] ","source_object dup  merge! "," data [] []  [] [] first "," data [] []  [] [] "]}," Fog Storage AWS Real copy_object":{"type":"method","name":"copy_object","children":[],"call":[" request ","Fog Parsers Storage AWS CopyObject  new ","(pair\n  (str \"x-amz-copy-source\")\n  (dstr\n    (str \"/\")\n    (begin\n      (lvar :source_bucket_name))\n    (begin\n      (send nil :object_to_path\n        (lvar :source_object_name))))) merge! "," object_to_path "]}," Fog Storage AWS Mock complete_multipart_upload":{"type":"method","name":"complete_multipart_upload","children":[],"call":["response headers []= ","object [] ","response headers ","object [] != ","response body= ","response status= ","Excon Response  new "," store_mock_object ","upload_info [] ","(send\n  (lvar :parts) :map) join ","upload_info [] [] ","pid to_i ","parts map "," get_upload_info "," verify_mock_bucket_exists ","Excon Response  new  headers []= "," store_mock_object  [] ","Excon Response  new  headers "," store_mock_object  [] != ","Excon Response  new  body= ","response (send\n  (lvar :parts) :map) join = ","Excon Response  new  status= "," store_mock_ store_mock_object  "," get_upload_info  [] "," get_upload_info  [] [] "," get_ get_upload_info  "," verify_mock_ verify_mock_bucket_exists _exists "]}," Fog Storage AWS Real complete_multipart_upload":{"type":"method","name":"complete_multipart_upload","children":[],"call":[" request ","Fog Parsers Storage AWS CompleteMultipartUpload  new ","data length ","data << ","index + ","parts each_with_index "]}," Fog Storage AWS acl_to_hash":{"type":"method","name":"acl_to_hash","children":[],"call":[]}," Fog Storage AWS hash_to_acl":{"type":"method","name":"hash_to_acl","children":[],"call":[]}," Fog Storage AWS Mock abort_multipart_upload":{"type":"method","name":"abort_multipart_upload","children":[],"call":[" raise ","Excon Errors  status_error ","response status= ","Excon Response  new "," get_upload_info "," verify_mock_bucket_exists ","Excon Response  new  status= "," get_ get_upload_info  "]}," Fog Storage AWS Real abort_multipart_upload":{"type":"method","name":"abort_multipart_upload","children":[],"call":[" request "]}," Fog AWS SQS Mock set_queue_attributes":{"type":"method","name":"set_queue_attributes","children":[],"call":[" raise ","Excon Errors  status_error ","response status= ","response body= ","Fog AWS Mock  request_id ","queue [] []= ","queue [] "," data [] [] "," data [] "," data ","Excon Response  new tap ","Excon Response  new "," data [] []  [] []= "," data [] []  [] "]}," Fog AWS SQS Real set_queue_attributes":{"type":"method","name":"set_queue_attributes","children":[],"call":[" request ","Fog Parsers AWS SQS Basic  new "," path_from_queue_url "]}," Fog AWS SQS Mock send_message":{"type":"method","name":"send_message","children":[],"call":[" raise ","Excon Errors  status_error ","response status= ","response body= ","Fog AWS Mock  request_id ","queue [] []= ","queue [] ","Fog AWS Mock  sqs_message_id ","Digest MD5  hexdigest ","Time  now "," data [] [] "," data [] "," data ","Excon Response  new tap ","Excon Response  new ","OpenSSL Digest MD5  hexdigest "," data [] []  [] []= "," data [] []  [] ","Fog AWS Mock  sqs_Fog AWS Mock  sqs_message_id  ","Time  Time  now  "]}," Fog AWS SQS Real send_message":{"type":"method","name":"send_message","children":[],"call":[" request ","Fog Parsers AWS SQS SendMessage  new "," path_from_queue_url "]}," Fog AWS SQS Mock receive_message":{"type":"method","name":"receive_message","children":[],"call":[" raise ","Excon Errors  status_error ","response status= ","response body= ","Fog AWS Mock  request_id ","messages size >= ","messages size ","messages << ","m merge ","attrs []= ","(or\n  (send\n    (lvar :attrs) :[]\n    (str \"ApproximateReceiveCount\"))\n  (int 0)) + ","attrs [] ","m [] tap ","m [] ","queue [] [] []= ","queue [] [] ","queue [] ","Fog Mock  random_base64 ","now < ","time + ","received_handles any? ","m [] [] ","queue [] values each ","queue [] values ","Time  now ","options [] "," data [] [] "," data [] "," data ","Excon Response  new tap ","Excon Response  new "," data [] []  [] [] []= "," data [] []  [] [] "," data [] []  [] ","Time  now  < ","queue [] []  any? "," data [] []  [] values each "," data [] []  [] values ","Time  Time  now  "]}," Fog AWS SQS Real receive_message":{"type":"method","name":"receive_message","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ReceiveMessage\")) merge! ","Fog Parsers AWS SQS ReceiveMessage  new "," path_from_queue_url "]}," Fog AWS SQS Mock list_queues":{"type":"method","name":"list_queues","children":[],"call":["response body= "," data [] keys "," data [] "," data ","Fog AWS Mock  request_id ","response status= ","Excon Response  new tap ","Excon Response  new "]}," Fog AWS SQS Real list_queues":{"type":"method","name":"list_queues","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ListQueues\")) merge! ","Fog Parsers AWS SQS ListQueues  new "]}," Fog AWS SQS Mock get_queue_attributes":{"type":"method","name":"get_queue_attributes","children":[],"call":[" raise ","Excon Errors  status_error ","response status= ","response body= ","queue [] ","Fog AWS Mock  request_id "," data [] [] "," data [] "," data ","Excon Response  new tap ","Excon Response  new "," data [] []  [] "]}," Fog AWS SQS Real get_queue_attributes":{"type":"method","name":"get_queue_attributes","children":[],"call":[" request ","Fog Parsers AWS SQS GetQueueAttributes  new "," path_from_queue_url "]}," Fog AWS SQS Mock delete_queue":{"type":"method","name":"delete_queue","children":[],"call":[" raise ","Excon Errors  status_error ","response status= ","response body= ","Fog AWS Mock  request_id "," data [] delete "," data [] "," data "," data [] [] ","Excon Response  new tap ","Excon Response  new "]}," Fog AWS SQS Real delete_queue":{"type":"method","name":"delete_queue","children":[],"call":[" request "," path_from_queue_url ","Fog Parsers AWS SQS Basic  new "]}," Fog AWS SQS Mock delete_message":{"type":"method","name":"delete_message","children":[],"call":[" raise ","Excon Errors  status_error ","response status= ","response body= ","Fog AWS Mock  request_id ","queue [] []= ","Time  now ","queue [] ","queue [] delete ","receipts key? ","queue [] find "," data [] [] "," data [] "," data ","Excon Response  new tap ","Excon Response  new "," data [] []  [] []= "," data [] []  [] "," data [] []  [] delete "," data [] []  [] find "]}," Fog AWS SQS Real delete_message":{"type":"method","name":"delete_message","children":[],"call":[" request "," path_from_queue_url ","Fog Parsers AWS SQS Basic  new "]}," Fog AWS SQS Mock create_queue":{"type":"method","name":"create_queue","children":[],"call":["response body= ","Fog AWS Mock  request_id "," data [] []= "," data [] "," data "," data [] [] ","Fog AWS Mock  arn ","Time  now ","response status= ","Excon Response  new tap ","Excon Response  new ","Time  Time  now  "]}," Fog AWS SQS Real create_queue":{"type":"method","name":"create_queue","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"CreateQueue\")) merge! ","Fog Parsers AWS SQS CreateQueue  new "]}," Fog AWS SQS Mock change_message_visibility":{"type":"method","name":"change_message_visibility","children":[],"call":[" raise ","Excon Errors  status_error ","response status= ","response body= ","Fog AWS Mock  request_id ","queue [] [] [] []= ","queue [] [] [] ","queue [] [] ","queue [] ","receipts key? ","queue [] find "," data [] [] "," data [] "," data ","Excon Response  new tap ","Excon Response  new "," data [] []  [] [] [] []= "," data [] []  [] [] [] "," data [] []  [] [] "," data [] []  [] "," data [] []  [] find "]}," Fog AWS SQS Real change_message_visibility":{"type":"method","name":"change_message_visibility","children":[],"call":[" request "," path_from_queue_url ","Fog Parsers AWS SQS Basic  new "]}," Fog AWS SNS Real unsubscribe":{"type":"method","name":"unsubscribe","children":[],"call":[" request ","Fog Parsers AWS SNS Unsubscribe  new ","arn strip "]}," Fog AWS SNS Mock subscribe":{"type":"method","name":"subscribe","children":[],"call":["response body= ","Fog AWS Mock  request_id "," data [] []= ","@account_id to_s "," data [] "," data ","Fog AWS Mock  arn ","topic [] ","response status= "," data [] [] ","Excon Response  new ","Fog AWS SQS  new send_message ","Fog JSON  encode ","SecureRandom  hex "," region ","Time  now iso8601 ","Time  now ","SecureRandom  uuid ","Fog AWS SQS  new ","Fog HMAC  new sign ","Fog HMAC  new ","protocol == ","mock_data keys first ","mock_data keys ","d [] [] ","d [] ","a values find ","a values ","Fog AWS SQS Mock  data values find ","Fog AWS SQS Mock  data values ","Fog AWS SQS Mock  data ","UUID  uuid ","Excon Response  new  body= "," data [] []  [] ","Excon Response  new  status= "]}," Fog AWS SNS Real subscribe":{"type":"method","name":"subscribe","children":[],"call":[" request ","Fog Parsers AWS SNS Subscribe  new ","arn strip "]}," Fog AWS SNS Mock set_topic_attributes":{"type":"method","name":"set_topic_attributes","children":[],"call":["response body= ","Fog AWS Mock  request_id ","Excon Response  new "," data [] []= "," data [] "," data ","attributes []= ","(str \"Policy\") include? "," data [] [] ","Excon Response  new  body= "," data [] []  []= "]}," Fog AWS SNS Real set_topic_attributes":{"type":"method","name":"set_topic_attributes","children":[],"call":[" request ","Fog Parsers AWS SNS SetTopicAttributes  new ","arn strip "]}," Fog AWS SNS Mock remove_permission":{"type":"method","name":"remove_permission","children":[],"call":["Fog Mock  not_implemented ","response body= ","Fog AWS Mock  request_id ","Excon Response  new "," data [] [] delete "," data [] [] "," data [] "," data ","options [] ","Excon Response  new  body= "]}," Fog AWS SNS Real remove_permission":{"type":"method","name":"remove_permission","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"RemovePermission\")) merge! ","Fog Parsers AWS SNS RemovePermission  new "]}," Fog AWS SNS Real publish":{"type":"method","name":"publish","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"Publish\")) merge! ","Fog Parsers AWS SNS Publish  new ","arn strip "]}," Fog AWS SNS Mock list_topics":{"type":"method","name":"list_topics","children":[],"call":["response body= ","Fog AWS Mock  request_id "," data [] keys "," data [] "," data ","Excon Response  new ","Excon Response  new  body= "]}," Fog AWS SNS Real list_topics":{"type":"method","name":"list_topics","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ListTopics\")) merge! ","Fog Parsers AWS SNS ListTopics  new "]}," Fog AWS SNS Mock list_subscriptions_by_topic":{"type":"method","name":"list_subscriptions_by_topic","children":[],"call":["response body= ","Fog AWS Mock  request_id ","s [] == ","s [] "," data [] values select "," data [] values "," data [] "," data ","Excon Response  new ","Excon Response  new  body= "]}," Fog AWS SNS Real list_subscriptions_by_topic":{"type":"method","name":"list_subscriptions_by_topic","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ListSubscriptionsByTopic\")) merge! ","Fog Parsers AWS SNS ListSubscriptions  new ","arn strip "]}," Fog AWS SNS Mock list_subscriptions":{"type":"method","name":"list_subscriptions","children":[],"call":["response body= ","Fog AWS Mock  request_id "," data [] values "," data [] "," data ","Excon Response  new ","Excon Response  new  body= "]}," Fog AWS SNS Real list_subscriptions":{"type":"method","name":"list_subscriptions","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ListSubscriptions\")) merge! ","Fog Parsers AWS SNS ListSubscriptions  new "]}," Fog AWS SNS Mock get_topic_attributes":{"type":"method","name":"get_topic_attributes","children":[],"call":["response body= ","Fog AWS Mock  request_id "," data [] [] "," data [] "," data ","Excon Response  new ","Excon Response  new  body= "]}," Fog AWS SNS Real get_topic_attributes":{"type":"method","name":"get_topic_attributes","children":[],"call":[" request ","Fog Parsers AWS SNS GetTopicAttributes  new ","arn strip "]}," Fog AWS SNS Mock delete_topic":{"type":"method","name":"delete_topic","children":[],"call":["response body= ","Fog AWS Mock  request_id ","Excon Response  new "," data [] delete "," data [] "," data ","Excon Response  new  body= "]}," Fog AWS SNS Real delete_topic":{"type":"method","name":"delete_topic","children":[],"call":[" request ","Fog Parsers AWS SNS DeleteTopic  new ","arn strip "]}," Fog AWS SNS Mock create_topic":{"type":"method","name":"create_topic","children":[],"call":["response body= ","Fog AWS Mock  request_id "," data [] []= ","Fog AWS Mock  owner_id "," data [] "," data ","Fog AWS Mock  arn ","Excon Response  new ","Excon Response  new  body= "]}," Fog AWS SNS Real create_topic":{"type":"method","name":"create_topic","children":[],"call":[" request ","Fog Parsers AWS SNS CreateTopic  new "]}," Fog AWS SNS Real confirm_subscription":{"type":"method","name":"confirm_subscription","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ConfirmSubscription\")) merge! ","Fog Parsers AWS SNS ConfirmSubscription  new ","arn strip "]}," Fog AWS SNS Mock add_permission":{"type":"method","name":"add_permission","children":[],"call":["Fog Mock  not_implemented ","response body= ","Fog AWS Mock  request_id ","Excon Response  new "," data [] [] []= "," data [] [] "," data [] "," data ","Hash  [] values ","Hash  [] ","k match ","options select ","options delete ","Excon Response  new  body= "]}," Fog AWS SNS Real add_permission":{"type":"method","name":"add_permission","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"AddPermission\")) merge! ","Fog Parsers AWS SNS AddPermission  new "]}," Fog AWS SimpleDB Real select":{"type":"method","name":"select","children":[],"call":[" request ","Fog Parsers AWS SimpleDB Select  new ","options [] ","options [] ! ! ","options [] ! ","Fog Logger  deprecation "," caller first "," caller ","options is_a? "]}," Fog AWS SimpleDB Mock put_attributes":{"type":"method","name":"put_attributes","children":[],"call":[" raise ","Excon Errors  status_error ","response status= ","response body= ","Fog AWS Mock  request_id ","Fog AWS Mock  box_usage ","x to_s ","(splat\n  (lvar :value)) map "," data [] [] [] [] ","key to_s "," data [] [] [] "," data [] [] "," data [] "," data "," data [] [] [] []= ","options [] include? ","options [] ","attributes each "," data [] [] [] [] != ","options [] each ","Excon Response  new ","options []= ","Excon Response  new  status= ","Excon Response  new  body= "]}," Fog AWS SimpleDB Real put_attributes":{"type":"method","name":"put_attributes","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"PutAttributes\")) merge! "," encode_attributes ","options [] ","Fog Parsers AWS SimpleDB Basic  new ","options []= "]}," Fog AWS SimpleDB Mock list_domains":{"type":"method","name":"list_domains","children":[],"call":["response body []= ","max + ","response body ","max < ","keys size ","response body= ","Fog AWS Mock  request_id ","Fog AWS Mock  box_usage ","response status= ","domains << "," data [] keys [] "," data [] keys "," data [] "," data ","options [] ","Excon Response  new ","Excon Response  new  body []= ","Excon Response  new  body "," data [] keys  size ","Excon Response  new  body= ","Excon Response  new  status= "," data []  data [] keys  [] "," data []  data [] keys  "]}," Fog AWS SimpleDB Real list_domains":{"type":"method","name":"list_domains","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ListDomains\")) merge! ","Fog Parsers AWS SimpleDB ListDomains  new "]}," Fog AWS SimpleDB Mock get_attributes":{"type":"method","name":"get_attributes","children":[],"call":[" raise ","Excon Errors  status_error ","response status= ","response body= ","Fog AWS Mock  request_id ","Fog AWS Mock  box_usage "," data [] [] [] "," data [] [] "," data [] "," data ","object []= "," data [] [] [] [] "," data [] [] [] key? "," data [] [] key? ","options [] ","options [] empty? ! ","options [] empty? ","Excon Response  new ","options is_a? ","Fog Logger  deprecation "," caller first "," caller ","Excon Response  new  status= ","Excon Response  new  body= "," data [] [] []  []= "]}," Fog AWS SimpleDB Real get_attributes":{"type":"method","name":"get_attributes","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"GetAttributes\")) merge! "," encode_attribute_names ","options [] ","Fog Parsers AWS SimpleDB GetAttributes  new ","options [] ! ! ","options [] ! ","Fog Logger  deprecation "," caller first "," caller ","options is_a? "]}," Fog AWS SimpleDB Mock domain_metadata":{"type":"method","name":"domain_metadata","children":[],"call":[" raise ","Excon Errors  status_error ","response status= ","response body= ","Time  now ","Fog AWS Mock  request_id ","domain keys join length ","domain keys join ","domain keys ","domain keys length ","Fog AWS Mock  box_usage ","attribute_values join length ","attribute_values join ","attribute_values length ","attribute_names join length ","attribute_names join ","attribute_names length ","attribute_values << ","attribute_names << ","domain values "," data [] [] "," data [] "," data ","Excon Response  new ","Excon Response  new  status= ","Excon Response  new  body= "," data [] []  keys join length "," data [] []  keys join "," data [] []  keys "," data [] []  keys length "," data [] []  values "]}," Fog AWS SimpleDB Real domain_metadata":{"type":"method","name":"domain_metadata","children":[],"call":[" request ","Fog Parsers AWS SimpleDB DomainMetadata  new "]}," Fog AWS SimpleDB Mock delete_domain":{"type":"method","name":"delete_domain","children":[],"call":["response body= ","Fog AWS Mock  request_id ","Fog AWS Mock  box_usage ","response status= "," data [] delete "," data [] "," data ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS SimpleDB Real delete_domain":{"type":"method","name":"delete_domain","children":[],"call":[" request ","Fog Parsers AWS SimpleDB Basic  new "]}," Fog AWS SimpleDB Mock delete_attributes":{"type":"method","name":"delete_attributes","children":[],"call":[" raise ","Excon Errors  status_error ","response status= ","response body= ","Fog AWS Mock  request_id ","Fog AWS Mock  box_usage "," data [] [] [] clear "," data [] [] [] "," data [] [] "," data [] "," data "," data [] [] [] [] delete "," data [] [] [] [] "," data [] [] [] delete ","value empty? ","value nil? ","Excon Response  new ","Excon Response  new  status= ","Excon Response  new  body= "]}," Fog AWS SimpleDB Real delete_attributes":{"type":"method","name":"delete_attributes","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DeleteAttributes\")) merge! "," encode_attributes ","Fog Parsers AWS SimpleDB Basic  new "]}," Fog AWS SimpleDB Mock create_domain":{"type":"method","name":"create_domain","children":[],"call":["response body= ","Fog AWS Mock  request_id ","Fog AWS Mock  box_usage ","response status= "," data [] []= "," data [] "," data ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS SimpleDB Real create_domain":{"type":"method","name":"create_domain","children":[],"call":[" request ","Fog Parsers AWS SimpleDB Basic  new "]}," Fog AWS SimpleDB Mock batch_put_attributes":{"type":"method","name":"batch_put_attributes","children":[],"call":[" raise ","Excon Errors  status_error ","response status= ","response body= ","Fog AWS Mock  request_id ","Fog AWS Mock  box_usage "," data [] [] [] [] << ","value to_s "," data [] [] [] [] ","key to_s "," data [] [] [] "," data [] [] "," data [] "," data "," data [] [] [] []= ","replace_attributes [] include? ","replace_attributes [] ","Excon Response  new ","Excon Response  new  status= ","Excon Response  new  body= "]}," Fog AWS SimpleDB Real batch_put_attributes":{"type":"method","name":"batch_put_attributes","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"BatchPutAttributes\")) merge! "," encode_batch_attributes ","Fog Parsers AWS SimpleDB Basic  new "]}," Fog AWS SES Real verify_email_address":{"type":"method","name":"verify_email_address","children":[],"call":[" request ","Fog Parsers AWS SES VerifyEmailAddress  new "]}," Fog AWS SES Real verify_domain_identity":{"type":"method","name":"verify_domain_identity","children":[],"call":[" request ","Fog Parsers AWS SES VerifyDomainIdentity  new "]}," Fog AWS SES Real send_raw_email":{"type":"method","name":"send_raw_email","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"SendRawEmail\")) merge ","Fog Parsers AWS SES SendRawEmail  new ","Base64  encode64 chomp! ","Base64  encode64 ","raw_message to_s ","params []= ","options [] ","options key? ","params merge! ","Fog AWS  indexed_param "]}," Fog AWS SES Real send_email":{"type":"method","name":"send_email","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"SendEmail\")) merge ","Fog Parsers AWS SES SendEmail  new ","params []= ","options [] ","options key? ","params merge! ","Fog AWS  indexed_param ","message [] "]}," Fog AWS SES Real list_verified_email_addresses":{"type":"method","name":"list_verified_email_addresses","children":[],"call":[" request ","Fog Parsers AWS SES ListVerifiedEmailAddresses  new "]}," Fog AWS SES Real get_send_statistics":{"type":"method","name":"get_send_statistics","children":[],"call":[" request ","Fog Parsers AWS SES GetSendStatistics  new "]}," Fog AWS SES Real get_send_quota":{"type":"method","name":"get_send_quota","children":[],"call":[" request ","Fog Parsers AWS SES GetSendQuota  new "]}," Fog AWS SES Real delete_verified_email_address":{"type":"method","name":"delete_verified_email_address","children":[],"call":[" request ","Fog Parsers AWS SES DeleteVerifiedEmailAddress  new "]}," Fog AWS Redshift Real revoke_snapshot_access":{"type":"method","name":"revoke_snapshot_access","children":[],"call":[" request ","params [] []= ","params [] ","Fog Parsers Redshift AWS ClusterSnapshot  new ","options [] "]}," Fog AWS Redshift Real revoke_cluster_security_group_ingress":{"type":"method","name":"revoke_cluster_security_group_ingress","children":[],"call":[" request ","params [] []= ","params [] ","Fog Parsers Redshift AWS RevokeClusterSecurityGroupIngress  new ","options [] "]}," Fog AWS Redshift Real restore_from_cluster_snapshot":{"type":"method","name":"restore_from_cluster_snapshot","children":[],"call":[" request ","params [] []= ","params [] ","Fog Parsers Redshift AWS Cluster  new ","options [] "]}," Fog AWS Redshift Real reset_cluster_parameter_group":{"type":"method","name":"reset_cluster_parameter_group","children":[],"call":[" request ","params [] []= ","params [] ","params [] merge! ","options [] [] ","options [] ","index + ","options [] keys each_with_index ","options [] keys ","Fog Parsers Redshift AWS UpdateClusterParameterGroupParser  new "]}," Fog AWS Redshift Real reboot_cluster":{"type":"method","name":"reboot_cluster","children":[],"call":[" request ","params [] []= ","params [] ","Fog Parsers Redshift AWS Cluster  new ","options [] "]}," Fog AWS Redshift Real purchase_reserved_node_offering":{"type":"method","name":"purchase_reserved_node_offering","children":[],"call":[" request ","params [] []= ","params [] ","Fog Parsers Redshift AWS PurchaseReservedNodeOffering  new ","options [] "]}," Fog AWS Redshift Real modify_cluster_subnet_group":{"type":"method","name":"modify_cluster_subnet_group","children":[],"call":[" request ","params [] []= ","params [] ","params [] merge! ","Fog AWS  indexed_param ","options delete ","Fog Parsers Redshift AWS ClusterSubnetGroupParser  new ","options [] "]}," Fog AWS Redshift Real modify_cluster_parameter_group":{"type":"method","name":"modify_cluster_parameter_group","children":[],"call":[" request ","params [] merge! ","options [] [] ","options [] ","index + ","params [] ","options [] keys each_with_index ","options [] keys ","params [] []= ","Fog Parsers Redshift AWS UpdateClusterParameterGroupParser  new "]}," Fog AWS Redshift Real modify_cluster":{"type":"method","name":"modify_cluster","children":[],"call":[" request ","params [] []= ","params [] ","params [] merge! ","Fog AWS  indexed_param ","options delete ","Fog Parsers Redshift AWS Cluster  new ","options [] "]}," Fog AWS Redshift Real describe_resize":{"type":"method","name":"describe_resize","children":[],"call":[" request ","params [] []= ","params [] ","Fog Parsers Redshift AWS DescribeResize  new ","options [] "]}," Fog AWS Redshift Real describe_reserved_nodes":{"type":"method","name":"describe_reserved_nodes","children":[],"call":[" request ","params [] []= ","params [] ","Fog Parsers Redshift AWS DescribeReservedNodes  new ","options [] "]}," Fog AWS Redshift Real describe_reserved_node_offerings":{"type":"method","name":"describe_reserved_node_offerings","children":[],"call":[" request ","params [] []= ","params [] ","Fog Parsers Redshift AWS DescribeReservedNodeOfferings  new ","options [] "]}," Fog AWS Redshift Real describe_orderable_cluster_options":{"type":"method","name":"describe_orderable_cluster_options","children":[],"call":[" request ","params [] []= ","params [] ","Fog Parsers Redshift AWS DescribeOrderableClusterOptions  new ","options [] "]}," Fog AWS Redshift Real describe_events":{"type":"method","name":"describe_events","children":[],"call":[" request ","params [] []= ","params [] ","Fog Parsers Redshift AWS DescribeEvents  new ","options [] "]}," Fog AWS Redshift Real describe_default_cluster_parameters":{"type":"method","name":"describe_default_cluster_parameters","children":[],"call":[" request ","params [] []= ","params [] ","Fog Parsers Redshift AWS DescribeDefaultClusterParameters  new ","options [] "]}," Fog AWS Redshift Real describe_clusters":{"type":"method","name":"describe_clusters","children":[],"call":[" request ","params [] []= ","params [] ","Fog Parsers Redshift AWS DescribeClusters  new ","options [] "]}," Fog AWS Redshift Real describe_cluster_versions":{"type":"method","name":"describe_cluster_versions","children":[],"call":[" request ","params [] []= ","params [] ","Fog Parsers Redshift AWS DescribeClusterVersions  new ","options [] "]}," Fog AWS Redshift Real describe_cluster_subnet_groups":{"type":"method","name":"describe_cluster_subnet_groups","children":[],"call":[" request ","params [] []= ","params [] ","Fog Parsers Redshift AWS DescribeClusterSubnetGroups  new "]}," Fog AWS Redshift Real describe_cluster_snapshots":{"type":"method","name":"describe_cluster_snapshots","children":[],"call":[" request ","params [] []= ","params [] ","Fog Parsers Redshift AWS DescribeClusterSnapshots  new ","options [] "]}," Fog AWS Redshift Real describe_cluster_security_groups":{"type":"method","name":"describe_cluster_security_groups","children":[],"call":[" request ","params [] []= ","params [] ","Fog Parsers Redshift AWS DescribeClusterSecurityGroups  new ","options [] "]}," Fog AWS Redshift Real describe_cluster_parameters":{"type":"method","name":"describe_cluster_parameters","children":[],"call":[" request ","params [] []= ","params [] ","Fog Parsers Redshift AWS DescribeClusterParameters  new ","options [] "]}," Fog AWS Redshift Real describe_cluster_parameter_groups":{"type":"method","name":"describe_cluster_parameter_groups","children":[],"call":[" request ","params [] []= ","params [] ","Fog Parsers Redshift AWS DescribeClusterParameterGroups  new ","options [] "]}," Fog AWS Redshift Real delete_cluster_subnet_group":{"type":"method","name":"delete_cluster_subnet_group","children":[],"call":[" request ","params [] []= ","params [] ","options [] "]}," Fog AWS Redshift Real delete_cluster_snapshot":{"type":"method","name":"delete_cluster_snapshot","children":[],"call":[" request ","params [] []= ","params [] ","Fog Parsers Redshift AWS ClusterSnapshot  new ","options [] "]}," Fog AWS Redshift Real delete_cluster_security_group":{"type":"method","name":"delete_cluster_security_group","children":[],"call":[" request ","params [] []= ","params [] ","options [] "]}," Fog AWS Redshift Real delete_cluster_parameter_group":{"type":"method","name":"delete_cluster_parameter_group","children":[],"call":[" request ","params [] []= ","params [] ","options [] "]}," Fog AWS Redshift Real delete_cluster":{"type":"method","name":"delete_cluster","children":[],"call":[" request ","params [] []= ","params [] ","Fog Parsers Redshift AWS Cluster  new ","options [] "]}," Fog AWS Redshift Real create_cluster_subnet_group":{"type":"method","name":"create_cluster_subnet_group","children":[],"call":[" request ","params [] []= ","params [] ","params [] merge! ","Fog AWS  indexed_param ","options delete ","Fog Parsers Redshift AWS ClusterSubnetGroupParser  new ","options [] "]}," Fog AWS Redshift Real create_cluster_snapshot":{"type":"method","name":"create_cluster_snapshot","children":[],"call":[" request ","params [] []= ","params [] ","Fog Parsers Redshift AWS ClusterSnapshot  new ","options [] "]}," Fog AWS Redshift Real create_cluster_security_group":{"type":"method","name":"create_cluster_security_group","children":[],"call":[" request ","params [] []= ","params [] ","Fog Parsers Redshift AWS CreateClusterSecurityGroup  new ","options [] "]}," Fog AWS Redshift Real create_cluster_parameter_group":{"type":"method","name":"create_cluster_parameter_group","children":[],"call":[" request ","params [] []= ","params [] ","Fog Parsers Redshift AWS CreateClusterParameterGroup  new ","options [] "]}," Fog AWS Redshift Real create_cluster":{"type":"method","name":"create_cluster","children":[],"call":[" request ","params [] []= ","params [] ","params [] merge! ","Fog AWS  indexed_param ","options delete ","Fog Parsers Redshift AWS Cluster  new ","options [] "]}," Fog AWS Redshift Real copy_cluster_snapshot":{"type":"method","name":"copy_cluster_snapshot","children":[],"call":[" request ","params [] []= ","params [] ","Fog Parsers Redshift AWS ClusterSnapshot  new ","options [] "]}," Fog AWS Redshift Real authorize_snapshot_access":{"type":"method","name":"authorize_snapshot_access","children":[],"call":[" request ","params [] []= ","params [] ","Fog Parsers Redshift AWS ClusterSnapshot  new ","options [] "]}," Fog AWS Redshift Real authorize_cluster_security_group_ingress":{"type":"method","name":"authorize_cluster_security_group_ingress","children":[],"call":[" request ","params [] []= ","params [] ","Fog Parsers Redshift AWS RevokeClusterSecurityGroupIngress  new ","options [] "]}," Fog AWS RDS Mock revoke_db_security_group_ingress":{"type":"method","name":"revoke_db_security_group_ingress","children":[],"call":[" raise ","Fog AWS RDS NotFound  new ","response body= ","Fog AWS Mock  request_id ","response status= ","ec2_secg []= ","ec2_secg [] == ","opts [] ","ec2_secg [] ","sec_group [] each ","sec_group [] ","iprange []= ","iprange [] == ","iprange [] ","opts key? "," data [] [] "," data [] "," data ","Excon Response  new ","opts []= ","ec2_security_group [] ","sg [] == ","sg [] ","(or\n  (send\n    (send\n      (send\n        (send\n          (const\n            (const\n              (const\n                (const nil :Fog) :Compute) :AWS) :Mock) :data) :[]\n        (send\n          (self) :region)) :[]\n      (send\n        (self) :aws_access_key_id)) :[]\n    (sym :security_groups))\n  (hash)) values detect ","(or\n  (send\n    (send\n      (send\n        (send\n          (const\n            (const\n              (const\n                (const nil :Fog) :Compute) :AWS) :Mock) :data) :[]\n        (send\n          (self) :region)) :[]\n      (send\n        (self) :aws_access_key_id)) :[]\n    (sym :security_groups))\n  (hash)) values ","Fog Compute AWS Mock  data [] [] [] ","Fog Compute AWS Mock  data [] [] "," aws_access_key_id ","Fog Compute AWS Mock  data [] "," region ","Fog Compute AWS Mock  data ","opts delete ","(or\n  (send\n    (send\n      (send\n        (send\n          (const\n            (const\n              (const\n                (const nil :Fog) :AWS) :Compute) :Mock) :data) :[]\n        (send\n          (self) :region)) :[]\n      (send\n        (self) :aws_access_key_id)) :[]\n    (sym :security_groups))\n  (hash)) values detect ","(or\n  (send\n    (send\n      (send\n        (send\n          (const\n            (const\n              (const\n                (const nil :Fog) :AWS) :Compute) :Mock) :data) :[]\n        (send\n          (self) :region)) :[]\n      (send\n        (self) :aws_access_key_id)) :[]\n    (sym :security_groups))\n  (hash)) values ","Fog AWS Compute Mock  data [] [] [] ","Fog AWS Compute Mock  data [] [] ","Fog AWS Compute Mock  data [] ","Fog AWS Compute Mock  data ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  [] each "," data [] []  [] "]}," Fog AWS RDS Real revoke_db_security_group_ingress":{"type":"method","name":"revoke_db_security_group_ingress","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"RevokeDBSecurityGroupIngress\")) merge ","Fog Parsers AWS RDS RevokeDBSecurityGroupIngress  new "," raise ","opts key? "]}," Fog AWS RDS Mock restore_db_instance_to_point_in_time":{"type":"method","name":"restore_db_instance_to_point_in_time","children":[],"call":["Fog Mock  not_implemented "]}," Fog AWS RDS Real restore_db_instance_to_point_in_time":{"type":"method","name":"restore_db_instance_to_point_in_time","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"RestoreDBInstanceToPointInTime\")) merge ","Fog Parsers AWS RDS RestoreDBInstanceToPointInTime  new "]}," Fog AWS RDS Mock restore_db_instance_from_db_snapshot":{"type":"method","name":"restore_db_instance_from_db_snapshot","children":[],"call":["Fog Mock  not_implemented "," data [] [] []= ","Time  now "," data [] [] "," data [] "," data ","response status= ","response body= ","Fog AWS Mock  request_id ","Excon Response  new "," data [] []= ","options [] ","options [] ! ! ","options [] ! ","snapshot [] ","options [] nil? "," raise ","Fog AWS RDS InvalidParameterCombination  new ","Fog AWS RDS NotFound  new "," response body to_s "," response body "," response ","Fog AWS RDS IdentifierTaken  new ","Excon Response  new  status= ","Excon Response  new  body= "," data [] []  [] "," Excon Response  new  body to_s "," Excon Response  new  body "," Excon Response  new  "]}," Fog AWS RDS Real restore_db_instance_from_db_snapshot":{"type":"method","name":"restore_db_instance_from_db_snapshot","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"RestoreDBInstanceFromDBSnapshot\")) merge ","Fog Parsers AWS RDS RestoreDBInstanceFromDBSnapshot  new "]}," Fog AWS RDS Mock remove_tags_from_resource":{"type":"method","name":"remove_tags_from_resource","children":[],"call":[" raise ","Fog AWS RDS NotFound  new ","response body= ","Fog AWS Mock  request_id ","response status= "," data [] [] delete "," data [] [] "," data [] "," data ","keys each ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS RDS Real remove_tags_from_resource":{"type":"method","name":"remove_tags_from_resource","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"RemoveTagsFromResource\")) merge ","Fog AWS  indexed_param ","Fog Parsers AWS RDS Base  new "," owner_id ","resource_name insert ","(str \"us-gov-west-1\") include? "]}," Fog AWS RDS Mock reboot_db_instance":{"type":"method","name":"reboot_db_instance","children":[],"call":[" raise ","Fog AWS RDS NotFound  new ","response body= ","Fog AWS Mock  request_id ","response status= "," data []= ","Time  now "," data ","server []= ","server [] != ","server [] "," data [] [] "," data [] ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  []= "," data [] []  [] != "," data [] []  [] "]}," Fog AWS RDS Real reboot_db_instance":{"type":"method","name":"reboot_db_instance","children":[],"call":[" request ","Fog Parsers AWS RDS RebootDBInstance  new "]}," Fog AWS RDS Mock promote_read_replica":{"type":"method","name":"promote_read_replica","children":[],"call":[" raise ","Fog AWS RDS NotFound  new ","response status= ","response body= ","Fog AWS Mock  request_id ","Excon Response  new "," data [] [] merge "," data [] [] "," data [] "," data ","server merge! "," data []= ","Time  now ","Fog AWS RDS Error  new ","server [] nil? ","server [] ","Excon Response  new  status= ","Excon Response  new  body= "," data [] []  merge! "," data [] []  [] nil? "," data [] []  [] "]}," Fog AWS RDS Real promote_read_replica":{"type":"method","name":"promote_read_replica","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"PromoteReadReplica\")) merge ","Fog Parsers AWS RDS PromoteReadReplica  new ","params []= "]}," Fog AWS RDS Mock modify_db_parameter_group":{"type":"method","name":"modify_db_parameter_group","children":[],"call":["Fog Mock  not_implemented ","response status= ","response body= ","Fog AWS Mock  request_id ","Excon Response  new "," data [] []= "," data [] "," data ","group []= ","p merge! ","p [] ","parameters each "," raise ","Fog AWS RDS NotFound  new "," data [] [] ","Excon Response  new  status= ","Excon Response  new  body= "," data [] []  []= "]}," Fog AWS RDS Real modify_db_parameter_group":{"type":"method","name":"modify_db_parameter_group","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ModifyDBParameterGroup\")) merge ","Fog Parsers AWS RDS ModifyDbParameterGroup  new ","params merge! ","Fog AWS  indexed_param ","parameter_apply_methods push ","parameter [] ","parameter_values push ","parameter_names push ","parameters each "]}," Fog AWS RDS Mock modify_db_instance":{"type":"method","name":"modify_db_instance","children":[],"call":[" raise ","Fog AWS RDS NotFound  new ","response body= "," data [] [] "," data [] "," data ","Fog AWS Mock  request_id ","response status= "," data [] [] []= "," data [] [] [] merge! "," data [] [] [] "," data []= ","Time  now "," data [] [] [] != ","Excon Response  new ","options merge! ","r << ","Fog AWS RDS Error  new ","sg [] == ","sg [] ","ec2_security_groups find "," Array inject "," Array ","options delete ","rds_security_groups find ","db_security_group_names inject ","Fog Compute AWS Mock  data [] [] [] values ","Fog Compute AWS Mock  data [] [] [] ","Fog Compute AWS Mock  data [] [] ","Fog Compute AWS Mock  data [] ","Fog Compute AWS Mock  data "," data [] values ","options []= ","Fog AWS Mock  rds_address "," region ","options [] ","server [] [] ","server [] ","server [] != ","_options dup "," Array map ","db_security_group_names map ","server []= ","server [] merge! ","server nil? ","Fog AWS Compute Mock  data [] [] [] values ","Fog AWS Compute Mock  data [] [] [] ","Fog AWS Compute Mock  data [] [] ","Fog AWS Compute Mock  data [] ","Fog AWS Compute Mock  data ","Excon Response  new  body= ","Excon Response  new  status= ","_options dup  merge! ","Fog Compute AWS Mock  data [] [] [] values  find ","Fog AWS Compute Mock  data [] [] [] values  find ","_options dup  delete "," data [] values  find "," Array  inject ","_options dup  []= ","_options dup  [] "," data [] []  [] [] "," data [] []  [] "," data [] []  [] != ","__options dup  dup "," Array  map "," data [] []  []= "," data [] []  [] merge! "," data [] []  nil? "]}," Fog AWS RDS Real modify_db_instance":{"type":"method","name":"modify_db_instance","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ModifyDBInstance\")) merge ","Fog Parsers AWS RDS ModifyDBInstance  new ","options merge! ","Fog AWS  indexed_param ","options delete "]}," Fog AWS RDS Mock list_tags_for_resource":{"type":"method","name":"list_tags_for_resource","children":[],"call":[" raise ","Fog AWS RDS NotFound  new ","response body= "," data [] [] "," data [] "," data ","response status= ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS RDS Real list_tags_for_resource":{"type":"method","name":"list_tags_for_resource","children":[],"call":[" request ","Fog Parsers AWS RDS TagListParser  new "," owner_id ","resource_name insert ","(str \"us-gov-west-1\") include? "]}," Fog AWS RDS Mock download_db_logfile_portion":{"type":"method","name":"download_db_logfile_portion","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= "," data [] values "," data [] "," data "," raise ","Fog AWS RDS NotFound  new ","server_set << "," data [] [] ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "," data [] values  << "," data [] [] _set << "]}," Fog AWS RDS Real download_db_logfile_portion":{"type":"method","name":"download_db_logfile_portion","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DownloadDBLogFilePortion\")) merge ","Fog Parsers AWS RDS DownloadDBLogFilePortion  new ","params []= ","opts [] "]}," Fog AWS RDS Mock describe_orderable_db_instance_options":{"type":"method","name":"describe_orderable_db_instance_options","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= "," raise ","Fog AWS RDS NotFound  new ","instance_options << ","opts [] ","opts [] nil? ","(or\n  (send\n    (lvar :opts) :[]\n    (sym :db_instance_class))\n  (array\n    (str \"db.m2.xlarge\")\n    (str \"db.m1.large\"))) each ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS RDS Real describe_orderable_db_instance_options":{"type":"method","name":"describe_orderable_db_instance_options","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeOrderableDBInstanceOptions\")) merge ","Fog Parsers AWS RDS DescribeOrderableDBInstanceOptions  new ","params []= ","opts [] "]}," Fog AWS RDS Mock describe_events":{"type":"method","name":"describe_events","children":[],"call":["Fog Mock  not_implemented "]}," Fog AWS RDS Real describe_events":{"type":"method","name":"describe_events","children":[],"call":[" request ","Fog Parsers AWS RDS EventListParser  new ","options [] "]}," Fog AWS RDS Mock describe_event_subscriptions":{"type":"method","name":"describe_event_subscriptions","children":[],"call":["response body= ","Fog AWS Mock  request_id "," raise ","Fog AWS RDS NotFound  new ","options [] ","subscriptions empty? "," data [] delete "," data [] "," data ","s [] == ","s [] "," data [] []= ","s []= ","non_active each ","s [] != "," data [] values select "," data [] values ","subscriptions select ","Excon Response  new ","Excon Response  new  body= "," data [] values  empty? "," data [] values  select "]}," Fog AWS RDS Real describe_event_subscriptions":{"type":"method","name":"describe_event_subscriptions","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeEventSubscriptions\")) merge ","Fog Parsers AWS RDS DescribeEventSubscriptions  new "," params []= ","options [] "," params "]}," Fog AWS RDS Mock describe_db_subnet_groups":{"type":"method","name":"describe_db_subnet_groups","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= "," data [] values "," data [] "," data "," raise ","Fog AWS RDS NotFound  new ","subnet_group_set << "," data [] [] ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "," data [] values  << "," data [] [] _set << "]}," Fog AWS RDS Real describe_db_subnet_groups":{"type":"method","name":"describe_db_subnet_groups","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeDBSubnetGroups\")) merge ","Fog Parsers AWS RDS DescribeDBSubnetGroups  new ","params []= ","opts [] "]}," Fog AWS RDS Mock describe_db_snapshots":{"type":"method","name":"describe_db_snapshots","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","snapshot []= ","Time  now - > ","Fog Mock  delay ","Time  now - ","snapshot [] ","Time  now ","snapshots each "," raise ","Fog AWS RDS NotFound  new ","opts [] ","snapshots empty? ","snapshot [] == ","snapshots select "," data [] values "," data [] "," data ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "," data [] values  each "," data [] values  empty? "," data [] values  select "]}," Fog AWS RDS Real describe_db_snapshots":{"type":"method","name":"describe_db_snapshots","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeDBSnapshots\")) merge ","Fog Parsers AWS RDS DescribeDBSnapshots  new ","params []= ","opts [] "]}," Fog AWS RDS Mock describe_db_security_groups":{"type":"method","name":"describe_db_security_groups","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","sec_group [] delete ","sec_group [] ","ec2_secg [] == ","ec2_secg [] ","ec2_secg delete ","ec2_secg []= ","ec2_secg [] <= ","Time  now ","Time  now + ","Fog Mock  delay * ","Fog Mock  delay ","sec_group [] each ","iprange [] == ","iprange [] ","iprange delete ","iprange []= ","iprange [] <= ","sec_group_set each "," data [] values "," data [] "," data "," raise ","Fog AWS RDS NotFound  new ","sec_group_set << "," data [] [] ","opts is_a? ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  [] delete "," data [] []  [] "," data [] []  [] each "," data [] values  each "," data [] [] _set each "," data [] values  << "," data [] [] _set << "]}," Fog AWS RDS Real describe_db_security_groups":{"type":"method","name":"describe_db_security_groups","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeDBSecurityGroups\")) merge ","Fog Parsers AWS RDS DescribeDBSecurityGroups  new ","opts is_a? "]}," Fog AWS RDS Mock describe_db_reserved_instances":{"type":"method","name":"describe_db_reserved_instances","children":[],"call":["Fog Mock  not_implemented "]}," Fog AWS RDS Real describe_db_reserved_instances":{"type":"method","name":"describe_db_reserved_instances","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeReservedDBInstances\")) merge ","Fog Parsers AWS RDS DescribeDBReservedInstances  new ","params []= ","opts [] "]}," Fog AWS RDS Mock describe_db_parameters":{"type":"method","name":"describe_db_parameters","children":[],"call":["Fog Mock  not_implemented ","response status= ","response body= ","Fog AWS Mock  request_id ","Excon Response  new ","group [] "," raise ","Fog AWS RDS NotFound  new "," data [] [] "," data [] "," data ","Excon Response  new  status= ","Excon Response  new  body= "," data [] []  [] "]}," Fog AWS RDS Real describe_db_parameters":{"type":"method","name":"describe_db_parameters","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeDBParameters\")) merge ","Fog Parsers AWS RDS DescribeDBParameters  new ","params []= ","opts [] "]}," Fog AWS RDS Mock describe_db_parameter_groups":{"type":"method","name":"describe_db_parameter_groups","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= "," data [] values "," data [] "," data "," raise ","Fog AWS RDS NotFound  new ","parameter_set << "," data [] [] ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "," data [] values  << "]}," Fog AWS RDS Real describe_db_parameter_groups":{"type":"method","name":"describe_db_parameter_groups","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeDBParameterGroups\")) merge ","Fog Parsers AWS RDS DescribeDBParameterGroups  new ","params []= ","opts [] "]}," Fog AWS RDS Mock describe_db_log_files":{"type":"method","name":"describe_db_log_files","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= "," raise ","Fog AWS RDS NotFound  new ","log_file_set << ","Time  parse "," data [] [] "," data [] "," data ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS RDS Real describe_db_log_files":{"type":"method","name":"describe_db_log_files","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeDBLogFiles\")) merge ","Fog Parsers AWS RDS DescribeDBLogFiles  new ","params []= ","opts [] "]}," Fog AWS RDS Mock describe_db_instances":{"type":"method","name":"describe_db_instances","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","server []= ","server [] empty? ","server [] ","server merge! ","Time  now - >= ","Fog Mock  delay ","Time  now - "," data [] "," data ","Time  now "," data delete ","Fog AWS Mock  rds_address ","region + ","Fog Mock  delay * ","server_set each "," data [] values "," raise ","Fog AWS RDS NotFound  new ","server_set << "," data [] [] ","Excon Response  new "," region "," region + "," data [] []= "," data [] delete ","server [] [] ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  []= "," data [] []  [] empty? "," data [] []  [] "," data [] []  merge! "," data [] values  each "," data [] [] _set each "," data [] values  << "," data [] [] _set << "," data [] []  [] [] "]}," Fog AWS RDS Real describe_db_instances":{"type":"method","name":"describe_db_instances","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeDBInstances\")) merge ","Fog Parsers AWS RDS DescribeDBInstances  new ","params []= ","opts [] "]}," Fog AWS RDS Mock describe_db_engine_versions":{"type":"method","name":"describe_db_engine_versions","children":[],"call":["Fog Mock  not_implemented ","response body= "," data [] "," data ","Fog AWS Mock  request_id ","response status= ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS RDS Real describe_db_engine_versions":{"type":"method","name":"describe_db_engine_versions","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeDBEngineVersions\")) merge ","Fog Parsers AWS RDS DescribeDBEngineVersions  new ","params []= ","opts [] "]}," Fog AWS RDS Mock delete_event_subscription":{"type":"method","name":"delete_event_subscription","children":[],"call":[" raise ","Fog AWS RDS NotFound  new ","response body= ","Fog AWS Mock  request_id ","response status= "," data [] []= "," data [] "," data ","data []= "," data [] [] ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= ","  data [] []  [] []= ","  data [] []  [] ","  data [] []  "," data [] []  []= ","  data [] []  [] [] "]}," Fog AWS RDS Real delete_event_subscription":{"type":"method","name":"delete_event_subscription","children":[],"call":[" request ","Fog Parsers AWS RDS DeleteEventSubscription  new "]}," Fog AWS RDS Mock delete_db_subnet_group":{"type":"method","name":"delete_db_subnet_group","children":[],"call":["response body= ","Fog AWS Mock  request_id "," raise ","Fog AWS RDS NotFound  new "," data [] [] "," data [] "," data ","Excon Response  new "," data [] delete ","Excon Response  new  body= "]}," Fog AWS RDS Real delete_db_subnet_group":{"type":"method","name":"delete_db_subnet_group","children":[],"call":[" request ","Fog Parsers AWS RDS DeleteDBSubnetGroup  new "]}," Fog AWS RDS Mock delete_db_snapshot":{"type":"method","name":"delete_db_snapshot","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= "," raise ","Fog AWS RDS NotFound  new "," data [] delete "," data [] "," data ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS RDS Real delete_db_snapshot":{"type":"method","name":"delete_db_snapshot","children":[],"call":[" request ","Fog Parsers AWS RDS DeleteDBSnapshot  new "]}," Fog AWS RDS Mock delete_db_security_group":{"type":"method","name":"delete_db_security_group","children":[],"call":[" raise ","Fog AWS RDS NotFound  new ","response body= ","Fog AWS Mock  request_id ","response status= "," data [] delete "," data [] "," data ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS RDS Real delete_db_security_group":{"type":"method","name":"delete_db_security_group","children":[],"call":[" request ","Fog Parsers AWS RDS DeleteDBSecurityGroup  new "]}," Fog AWS RDS Mock delete_db_parameter_group":{"type":"method","name":"delete_db_parameter_group","children":[],"call":[" raise ","Fog AWS RDS NotFound  new ","response body= ","Fog AWS Mock  request_id ","response status= "," data [] delete "," data [] "," data ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS RDS Real delete_db_parameter_group":{"type":"method","name":"delete_db_parameter_group","children":[],"call":[" request ","Fog Parsers AWS RDS DeleteDbParameterGroup  new "]}," Fog AWS RDS Mock delete_db_instance":{"type":"method","name":"delete_db_instance","children":[],"call":[" raise ","Fog AWS RDS NotFound  new ","response body= ","Fog AWS Mock  request_id ","response status= "," data [] delete "," data [] "," data "," create_db_snapshot ","Excon Response  new ","Fog AWS RDS Error  new ","server_set [] "," data [] [] "," data [] []= ","cluster [] ","v [] == ","v [] ","cluster [] delete_if ","m [] == ","m [] ","c [] any? ","c [] "," data [] values detect "," data [] values ","skip_snapshot ! ","snapshot_identifier ! ","Excon Response  new  body= ","Excon Response  new  status= "," data [] delete  [] "]}," Fog AWS RDS Real delete_db_instance":{"type":"method","name":"delete_db_instance","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DeleteDBInstance\")) merge ","Fog Parsers AWS RDS DeleteDBInstance  new ","params []= "]}," Fog AWS RDS Mock create_event_subscription":{"type":"method","name":"create_event_subscription","children":[],"call":["response body= ","Fog AWS Mock  request_id "," data [] []= "," data [] "," data ","Time  now ","options fetch ","options [] "," raise ","Fog AWS RDS IdentifierTaken  new "," data [] [] ","options delete ","Excon Response  new ","Excon Response  new  body= "]}," Fog AWS RDS Real create_event_subscription":{"type":"method","name":"create_event_subscription","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"CreateEventSubscription\")) merge ","Fog Parsers AWS RDS CreateEventSubscription  new ","options merge! ","Fog AWS  indexed_param ","options delete "]}," Fog AWS RDS Mock create_db_subnet_group":{"type":"method","name":"create_db_subnet_group","children":[],"call":["response body= ","Fog AWS Mock  request_id "," data [] []= "," data [] "," data ","subnets first vpc_id ","subnets first "," raise ","Fog AWS RDS NotFound  new ","subnet nil? ","collection subnets get ","collection subnets ","subnet_ids map ","collection region= ","Fog Compute  [] ","Fog AWS RDS IdentifierTaken  new "," data [] [] ","Excon Response  new ","subnets first [] ","s [] == ","s [] ","compute_data [] detect ","compute_data [] ","Fog Compute AWS Mock  data [] [] "," aws_access_key_id ","Fog Compute AWS Mock  data [] "," region ","Fog Compute AWS Mock  data ","Fog AWS Compute Mock  data [] [] ","Fog AWS Compute Mock  data [] ","Fog AWS Compute Mock  data ","Excon Response  new  body= ","subnets first subnets first vpc_id  ","subnets first subnets first []  ","collection subnets get s first vpc_id ","collection subnets get s first ","collection subnets get  nil? ","collection collection subnets get s get ","Fog Compute  []  subnets get ","collection collection subnets get s ","Fog Compute  []  subnets ","collection subnets get _ids map ","Fog Compute  []  region= ","collection subnets get s first [] ","Fog Compute AWS Mock  data [] []  [] detect ","Fog AWS Compute Mock  data [] []  [] detect ","Fog Compute AWS Mock  data [] []  [] ","Fog AWS Compute Mock  data [] []  [] "]}," Fog AWS RDS Real create_db_subnet_group":{"type":"method","name":"create_db_subnet_group","children":[],"call":[" request ","params merge! ","Fog AWS  indexed_param "," Array ","Fog Parsers AWS RDS CreateDBSubnetGroup  new "]}," Fog AWS RDS Mock create_db_snapshot":{"type":"method","name":"create_db_snapshot","children":[],"call":[" data [] [] []= ","Time  now "," data [] [] "," data [] "," data ","response status= ","response body= ","snapshot_data dup ","Fog AWS Mock  request_id "," data [] []= ","snapshot_data []= ","server_data [] [] ","server_data [] ","(str \"Engine\") each "," raise ","Fog AWS RDS NotFound  new ","Fog AWS RDS IndentifierTaken  new ","Excon Response  new ","Fog AWS RDS IdentifierTaken  new ","Excon Response  new  status= ","Excon Response  new  body= "," data [] []  [] [] "," data [] []  [] "]}," Fog AWS RDS Real create_db_snapshot":{"type":"method","name":"create_db_snapshot","children":[],"call":[" request ","Fog Parsers AWS RDS CreateDBSnapshot  new "]}," Fog AWS RDS Mock create_db_security_group":{"type":"method","name":"create_db_security_group","children":[],"call":["response body= ","Fog AWS Mock  request_id "," data [] []= "," data [] "," data "," raise ","Fog AWS RDS IdentifierTaken  new "," data [] [] ","Excon Response  new ","Excon Response  new  body= "]}," Fog AWS RDS Real create_db_security_group":{"type":"method","name":"create_db_security_group","children":[],"call":[" request ","Fog Parsers AWS RDS CreateDBSecurityGroup  new "]}," Fog AWS RDS Mock create_db_parameter_group":{"type":"method","name":"create_db_parameter_group","children":[],"call":["response status= ","response body= ","Fog AWS Mock  request_id "," data [] []= "," data [] "," data ","group_family downcase "," raise ","Fog AWS RDS IdentifierTaken  new "," data [] [] ","Excon Response  new ","Excon Response  new  status= ","Excon Response  new  body= "]}," Fog AWS RDS Real create_db_parameter_group":{"type":"method","name":"create_db_parameter_group","children":[],"call":[" request ","Fog Parsers AWS RDS CreateDbParameterGroup  new "]}," Fog AWS RDS Mock create_db_instance_read_replica":{"type":"method","name":"create_db_instance_read_replica","children":[],"call":[" data [] [] []= ","Time  now "," data [] [] "," data [] "," data ","response status= ","response body= ","Fog AWS Mock  request_id ","Excon Response  new "," data [] [] [] << "," data [] [] [] "," data [] []= ","source [] ","options [] ","options key? ","options [] ! ! ","options [] ! ","Excon Response  new  status= ","Excon Response  new  body= "," data [] []  [] "]}," Fog AWS RDS Real create_db_instance_read_replica":{"type":"method","name":"create_db_instance_read_replica","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"CreateDBInstanceReadReplica\")) merge ","Fog Parsers AWS RDS CreateDBInstanceReadReplica  new "]}," Fog AWS RDS Mock create_db_instance":{"type":"method","name":"create_db_instance","children":[],"call":[" data [] []= "," data [] "," data "," data [] [] []= ","Time  now "," data [] [] ","response status= ","response body= ","Fog AWS Mock  request_id ","options [] ","options [] ! ! ","options [] ! "," raise ","Fog AWS RDS NotFound  new ","options [] to_s empty? ! ","options [] to_s empty? ","options [] to_s ","options key? ","required_params each ","Fog AWS RDS IdentifierTaken  new ","response body to_s ","response body ","Excon Response  new ","cluster [] ","options [] nil? ","cluster [] << ","cluster [] empty? ","options []= ","Fog AWS RDS Error  new ","(str \"AllocatedStorage\") each ","vpc_security_groups any? ","options [] == ","sg [] == ","sg [] ","ec2_security_groups find "," Array map "," Array ","options delete ","db_security_groups << ","db_security_groups empty? ","vpc ! ","rds_security_groups find ","db_security_group_names map ","(send\n  (send\n    (lvar :ec2) :[]\n    (sym :account_attributes)) :find) [] include? ! ","(send\n  (send\n    (lvar :ec2) :[]\n    (sym :account_attributes)) :find) [] include? ","(send\n  (send\n    (lvar :ec2) :[]\n    (sym :account_attributes)) :find) [] ","supported-platforms == ","h [] ","ec2 [] find ","ec2 [] ","ec2 [] values "," data [] values ","Fog Compute AWS Mock  data [] [] ","Fog Compute AWS Mock  data [] ","Fog Compute AWS Mock  data ","Fog AWS RDS InvalidParameterCombination  new ","Fog AWS Compute Mock  data [] [] ","Fog AWS Compute Mock  data [] ","Fog AWS Compute Mock  data ","Excon Response  new  status= ","Excon Response  new  body= ","Excon Response  new  body to_s ","Excon Response  new  body "," data [] []  [] "," data [] []  [] << "," data [] []  [] empty? ","(send\n  (send\n    (lvar :ec2) :[]\n    (sym :account_attributes)) :find) [] include? ! _security_groups any? ","vpc_security_ data [] [] s any? ","ec2 [] values  find ","ec2_security_ data [] [] s find ","Fog Compute AWS Mock  data [] [] _security_groups find ","Fog AWS Compute Mock  data [] [] _security_groups find ","db_security_ data [] [] s << ","db_security_ data [] [] s empty? ","(send\n  (send\n    (lvar :ec2) :[]\n    (sym :account_attributes)) :find) [] include? !  ! "," data [] values  find ","rds_security_ data [] [] s find "," Array  map ","db_security_ data [] [] _names map ","(send\n  (send\n    (lvar :Fog Compute AWS Mock  data [] [] ) :[]\n    (sym :account_attributes)) :find) [] include? ! ","(send\n  (send\n    (lvar :Fog AWS Compute Mock  data [] [] ) :[]\n    (sym :account_attributes)) :find) [] include? ! ","(send\n  (send\n    (lvar :Fog Compute AWS Mock  data [] [] ) :[]\n    (sym :account_attributes)) :find) [] include? ","(send\n  (send\n    (lvar :Fog AWS Compute Mock  data [] [] ) :[]\n    (sym :account_attributes)) :find) [] include? ","(send\n  (send\n    (lvar :Fog Compute AWS Mock  data [] [] ) :[]\n    (sym :account_attributes)) :find) [] ","(send\n  (send\n    (lvar :Fog AWS Compute Mock  data [] [] ) :[]\n    (sym :account_attributes)) :find) [] ","Fog Compute AWS Mock  data [] []  [] find ","Fog AWS Compute Mock  data [] []  [] find ","Fog Compute AWS Mock  data [] []  [] ","Fog AWS Compute Mock  data [] []  [] ","Fog Compute AWS Mock  data [] []  [] values ","Fog AWS Compute Mock  data [] []  [] values "]}," Fog AWS RDS Real create_db_instance":{"type":"method","name":"create_db_instance","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"CreateDBInstance\")) merge ","Fog Parsers AWS RDS CreateDBInstance  new ","options merge! ","Fog AWS  indexed_param ","options delete "]}," Fog AWS RDS Mock authorize_db_security_group_ingress":{"type":"method","name":"authorize_db_security_group_ingress","children":[],"call":[" raise ","Fog AWS RDS NotFound  new ","response body= ","Fog AWS Mock  request_id ","response status= ","sec_group [] << ","opts merge ","sec_group [] ","Fog AWS RDS AuthorizationAlreadyExists  new ","opts [] ","h [] == ","h [] ","sec_group [] find ","opts key? "," data [] [] "," data [] "," data ","Excon Response  new ","opts []= ","ec2_security_group [] ","sg [] == ","sg [] ","(or\n  (send\n    (send\n      (send\n        (send\n          (const\n            (const\n              (const\n                (const nil :Fog) :Compute) :AWS) :Mock) :data) :[]\n        (send\n          (self) :region)) :[]\n      (send\n        (self) :aws_access_key_id)) :[]\n    (sym :security_groups))\n  (hash)) values detect ","(or\n  (send\n    (send\n      (send\n        (send\n          (const\n            (const\n              (const\n                (const nil :Fog) :Compute) :AWS) :Mock) :data) :[]\n        (send\n          (self) :region)) :[]\n      (send\n        (self) :aws_access_key_id)) :[]\n    (sym :security_groups))\n  (hash)) values ","Fog Compute AWS Mock  data [] [] [] ","Fog Compute AWS Mock  data [] [] "," aws_access_key_id ","Fog Compute AWS Mock  data [] "," region ","Fog Compute AWS Mock  data ","opts delete ","(or\n  (send\n    (send\n      (send\n        (send\n          (const\n            (const\n              (const\n                (const nil :Fog) :AWS) :Compute) :Mock) :data) :[]\n        (send\n          (self) :region)) :[]\n      (send\n        (self) :aws_access_key_id)) :[]\n    (sym :security_groups))\n  (hash)) values detect ","(or\n  (send\n    (send\n      (send\n        (send\n          (const\n            (const\n              (const\n                (const nil :Fog) :AWS) :Compute) :Mock) :data) :[]\n        (send\n          (self) :region)) :[]\n      (send\n        (self) :aws_access_key_id)) :[]\n    (sym :security_groups))\n  (hash)) values ","Fog AWS Compute Mock  data [] [] [] ","Fog AWS Compute Mock  data [] [] ","Fog AWS Compute Mock  data [] ","Fog AWS Compute Mock  data ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  [] << "," data [] []  [] "," data [] []  [] find "]}," Fog AWS RDS Real authorize_db_security_group_ingress":{"type":"method","name":"authorize_db_security_group_ingress","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"AuthorizeDBSecurityGroupIngress\")) merge ","Fog Parsers AWS RDS AuthorizeDBSecurityGroupIngress  new "," raise ","opts key? "]}," Fog AWS RDS Mock add_tags_to_resource":{"type":"method","name":"add_tags_to_resource","children":[],"call":[" raise ","Fog AWS RDS NotFound  new ","response body= ","Fog AWS Mock  request_id ","response status= "," data [] [] merge! "," data [] [] "," data [] "," data ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS RDS Real add_tags_to_resource":{"type":"method","name":"add_tags_to_resource","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"AddTagsToResource\")) merge merge ","Fog AWS  indexed_param ","(pair\n  (str \"Action\")\n  (str \"AddTagsToResource\")) merge ","Fog Parsers AWS RDS Base  new "," owner_id ","tags [] ","keys map ","tags keys sort ","tags keys ","resource_name insert ","(str \"us-gov-west-1\") include? ","tags keys sort  map ","tags tags keys sort  sort ","tags tags keys sort  "]}," Fog AWS IAM Real upload_signing_certificate":{"type":"method","name":"upload_signing_certificate","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"UploadSigningCertificate\")) merge! ","Fog Parsers AWS IAM UploadSigningCertificate  new "]}," Fog AWS IAM Mock upload_server_certificate":{"type":"method","name":"upload_server_certificate","children":[],"call":["response body= ","Fog AWS Mock  request_id "," data [] []= "," data [] "," data ","Time  now ","Fog AWS IAM Mock  server_certificate_id ","Fog AWS Mock  arn ","options [] ","response status= "," raise ","Fog AWS IAM EntityAlreadyExists  new "," data [] [] ","Fog AWS IAM KeyPairMismatch  new ","cert check_private_key ","Fog AWS IAM MalformedCertificate  new ","e is_a? ","OpenSSL PKey RSA  new ","OpenSSL X509 Certificate  new ","private_key =~ ","Excon Response  new ","Fog AWS IAM ValidationError  new ","private_key empty? ","private_key nil? ","certificate empty? ","certificate nil? ","Excon Response  new  body= ","Fog AWS IAM Mock  server_OpenSSL X509 Certificate  new ificate_id ","Excon Response  new  status= ","cert check_private_OpenSSL PKey RSA  new  ","OpenSSL X509 Certificate  new  check_private_key ","private_OpenSSL PKey RSA  new  =~ ","private_OpenSSL PKey RSA  new  empty? ","private_OpenSSL PKey RSA  new  nil? ","OpenSSL X509 Certificate  new ificate empty? ","OpenSSL X509 Certificate  new ificate nil? "]}," Fog AWS IAM Real upload_server_certificate":{"type":"method","name":"upload_server_certificate","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"UploadServerCertificate\")) merge! ","Fog Parsers AWS IAM UploadServerCertificate  new "]}," Fog AWS IAM Real update_user":{"type":"method","name":"update_user","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"UpdateUser\")) merge! ","Fog Parsers AWS IAM UpdateUser  new "]}," Fog AWS IAM Real update_signing_certificate":{"type":"method","name":"update_signing_certificate","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"UpdateSigningCertificate\")) merge! ","Fog Parsers AWS IAM Basic  new "]}," Fog AWS IAM Mock update_server_certificate":{"type":"method","name":"update_server_certificate","children":[],"call":["response status= ","response body= ","Fog AWS Mock  request_id ","Excon Response  new tap ","Excon Response  new "," data [] []= ","certificate [] "," data [] "," data ","certificate []= ","options [] "," raise ","Fog AWS IAM NotFound  new "," data [] delete ","Fog AWS IAM EntityAlreadyExists  new "," data [] [] "," data [] delete  [] "," data [] delete  []= "]}," Fog AWS IAM Real update_server_certificate":{"type":"method","name":"update_server_certificate","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"UpdateServerCertificate\")) merge! ","Fog Parsers AWS IAM Basic  new "]}," Fog AWS IAM Real update_login_profile":{"type":"method","name":"update_login_profile","children":[],"call":[" request ","Fog Parsers AWS IAM Basic  new "]}," Fog AWS IAM Real update_group":{"type":"method","name":"update_group","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"UpdateGroup\")) merge! ","Fog Parsers AWS IAM UpdateGroup  new "]}," Fog AWS IAM Mock update_account_password_policy":{"type":"method","name":"update_account_password_policy","children":[],"call":["response status= ","response body= ","Fog AWS Mock  request_id ","Excon Response  new tap ","Excon Response  new "]}," Fog AWS IAM Real update_account_password_policy":{"type":"method","name":"update_account_password_policy","children":[],"call":[" request ","Fog Parsers AWS IAM Basic  new "]}," Fog AWS IAM Mock update_access_key":{"type":"method","name":"update_access_key","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new tap ","Excon Response  new ","key []= ","k [] == ","k [] ","access_keys_data find "," data [] "," data "," raise ","Fog AWS IAM NotFound  new "," data [] [] [] "," data [] [] "," data [] key? ","options [] "," data []  find "," data [] [] []  find "]}," Fog AWS IAM Real update_access_key":{"type":"method","name":"update_access_key","children":[],"call":[" request ","(pair\n  (str \"AccessKeyId\")\n  (lvar :access_key_id)) merge! ","Fog Parsers AWS IAM Basic  new "]}," Fog AWS IAM Mock remove_user_from_group":{"type":"method","name":"remove_user_from_group","children":[],"call":[" raise ","Fog AWS IAM NotFound  new ","response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new tap ","Excon Response  new ","item == "," data [] [] [] delete_if "," data [] [] [] "," data [] [] "," data [] "," data "," data [] key? "]}," Fog AWS IAM Real remove_user_from_group":{"type":"method","name":"remove_user_from_group","children":[],"call":[" request ","Fog Parsers AWS IAM Basic  new "]}," Fog AWS IAM Real remove_role_from_instance_profile":{"type":"method","name":"remove_role_from_instance_profile","children":[],"call":[" request ","Fog Parsers AWS IAM Basic  new "]}," Fog AWS IAM Mock put_user_policy":{"type":"method","name":"put_user_policy","children":[],"call":[" raise ","Fog AWS IAM NotFound  new ","response status= ","response body= ","Fog AWS Mock  request_id ","Excon Response  new tap ","Excon Response  new "," data [] [] [] []= "," data [] [] [] "," data [] [] "," data [] "," data "," data [] key? "]}," Fog AWS IAM Real put_user_policy":{"type":"method","name":"put_user_policy","children":[],"call":[" request ","Fog Parsers AWS IAM Basic  new ","Fog JSON  encode "]}," Fog AWS IAM Real put_role_policy":{"type":"method","name":"put_role_policy","children":[],"call":[" request ","Fog Parsers AWS IAM Basic  new ","Fog JSON  encode "]}," Fog AWS IAM Mock put_group_policy":{"type":"method","name":"put_group_policy","children":[],"call":[" raise ","Fog AWS IAM NotFound  new ","response status= ","response body= ","Fog AWS Mock  request_id ","Excon Response  new tap ","Excon Response  new "," data [] [] [] []= "," data [] [] [] "," data [] [] "," data [] "," data "," data [] key? "]}," Fog AWS IAM Real put_group_policy":{"type":"method","name":"put_group_policy","children":[],"call":[" request ","Fog Parsers AWS IAM Basic  new ","Fog JSON  encode "]}," Fog AWS IAM Mock list_users":{"type":"method","name":"list_users","children":[],"call":["response status= ","response body= ","Fog AWS Mock  request_id ","data [] ","(send\n  (lvar :data) :[]\n  (sym :arn)) strip "," data [] map "," data [] "," data ","Excon Response  new tap ","Excon Response  new "]}," Fog AWS IAM Real list_users":{"type":"method","name":"list_users","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ListUsers\")) merge! ","Fog Parsers AWS IAM ListUsers  new "]}," Fog AWS IAM Mock list_user_policies":{"type":"method","name":"list_user_policies","children":[],"call":[" raise ","Fog AWS IAM NotFound  new ","response status= ","response body= ","Fog AWS Mock  request_id "," data [] [] [] keys "," data [] [] [] "," data [] [] "," data [] "," data ","Excon Response  new tap ","Excon Response  new "," data [] key? "]}," Fog AWS IAM Real list_user_policies":{"type":"method","name":"list_user_policies","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ListUserPolicies\")) merge! ","Fog Parsers AWS IAM ListPolicies  new "]}," Fog AWS IAM Real list_signing_certificates":{"type":"method","name":"list_signing_certificates","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ListSigningCertificates\")) merge! ","Fog Parsers AWS IAM ListSigningCertificates  new "]}," Fog AWS IAM Mock list_server_certificates":{"type":"method","name":"list_server_certificates","children":[],"call":["response body= ","response status= ","Excon Response  new ","certificate [] =~ ","Regexp  new ","options [] ","certificate [] ","certificates select "," data [] values "," data [] "," data ","Excon Response  new  body= ","Excon Response  new  status= "," data [] values  select "]}," Fog AWS IAM Real list_server_certificates":{"type":"method","name":"list_server_certificates","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ListServerCertificates\")) merge! ","Fog Parsers AWS IAM ListServerCertificates  new "]}," Fog AWS IAM Real list_roles":{"type":"method","name":"list_roles","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ListRoles\")) merge! ","Fog Parsers AWS IAM ListRoles  new "]}," Fog AWS IAM Real list_role_policies":{"type":"method","name":"list_role_policies","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ListRolePolicies\")) merge! ","Fog Parsers AWS IAM ListPolicies  new "]}," Fog AWS IAM Mock list_mfa_devices":{"type":"method","name":"list_mfa_devices","children":[],"call":["response body= ","Fog AWS Mock  request_id ","device [] "," data [] map "," data [] "," data ","response status= ","Excon Response  new tap ","Excon Response  new "]}," Fog AWS IAM Real list_mfa_devices":{"type":"method","name":"list_mfa_devices","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ListMFADevices\")) merge! ","Fog Parsers AWS IAM ListMFADevices  new "]}," Fog AWS IAM Real list_instance_profiles_for_role":{"type":"method","name":"list_instance_profiles_for_role","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ListInstanceProfilesForRole\")) merge! ","Fog Parsers AWS IAM ListInstanceProfiles  new "]}," Fog AWS IAM Real list_instance_profiles":{"type":"method","name":"list_instance_profiles","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ListInstanceProfiles\")) merge! ","Fog Parsers AWS IAM ListInstanceProfiles  new "]}," Fog AWS IAM Mock list_groups_for_user":{"type":"method","name":"list_groups_for_user","children":[],"call":[" raise ","Fog AWS IAM NotFound  new ","response body= ","Fog AWS Mock  request_id ","(send\n  (lvar :group) :[]\n  (sym :arn)) strip ","group [] ","(send\n  (send\n    (send nil :data) :[]\n    (sym :groups)) :select) map ","group [] include? "," data [] select "," data [] "," data ","response status= ","Excon Response  new tap ","Excon Response  new "," data [] key? "]}," Fog AWS IAM Real list_groups_for_user":{"type":"method","name":"list_groups_for_user","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ListGroupsForUser\")) merge! ","Fog Parsers AWS IAM ListGroupsForUser  new "]}," Fog AWS IAM Mock list_groups":{"type":"method","name":"list_groups","children":[],"call":["response body= ","Fog AWS Mock  request_id ","(send\n  (lvar :group) :[]\n  (sym :arn)) strip ","group [] "," data [] map "," data [] "," data ","response status= ","Excon Response  new tap ","Excon Response  new "]}," Fog AWS IAM Real list_groups":{"type":"method","name":"list_groups","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ListGroups\")) merge! ","Fog Parsers AWS IAM ListGroups  new "]}," Fog AWS IAM Real list_group_policies":{"type":"method","name":"list_group_policies","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ListGroupPolicies\")) merge! ","Fog Parsers AWS IAM ListPolicies  new "]}," Fog AWS IAM Real list_account_aliases":{"type":"method","name":"list_account_aliases","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ListAccountAliases\")) merge! ","Fog Parsers AWS IAM ListAccountAliases  new "]}," Fog AWS IAM Mock list_access_keys":{"type":"method","name":"list_access_keys","children":[],"call":["response status= ","response body= ","Fog AWS Mock  request_id ","akey [] ","access_keys_data map ","Excon Response  new tap ","Excon Response  new "," data [] "," data "," raise ","Fog AWS IAM NotFound  new "," data [] [] [] "," data [] [] "," data [] key? ","options [] "," data []  map "," data [] [] []  map "]}," Fog AWS IAM Real list_access_keys":{"type":"method","name":"list_access_keys","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ListAccessKeys\")) merge! ","Fog Parsers AWS IAM ListAccessKeys  new "]}," Fog AWS IAM Mock get_user_policy":{"type":"method","name":"get_user_policy","children":[],"call":["response status= ","response body= ","Fog AWS Mock  request_id "," data [] [] [] [] "," data [] [] [] "," data [] [] "," data [] "," data ","Excon Response  new tap ","Excon Response  new "," raise ","Fog AWS IAM NotFound  new "," data [] [] [] key? "," data [] key? "]}," Fog AWS IAM Real get_user_policy":{"type":"method","name":"get_user_policy","children":[],"call":[" request ","Fog Parsers AWS IAM GetUserPolicy  new "]}," Fog AWS IAM Mock get_user":{"type":"method","name":"get_user","children":[],"call":["response status= ","response body= ","Fog AWS Mock  request_id "," data [] [] [] "," data [] [] "," data [] "," data ","(send\n  (send\n    (send\n      (send nil :data) :[]\n      (sym :users)) :[]\n    (lvar :user)) :[]\n  (sym :arn)) strip ","Excon Response  new tap ","Excon Response  new "," raise ","Fog AWS IAM NotFound  new "," data [] key? ","user [] ","user [] strip "," data [] key? ! ","user_body merge! ","@current_user_name == "," current_user ","username nil? ","Excon Response  new  status= ","Excon Response  new  body= ","(send\n  (send\n    (send\n      (send nil :data) :[]\n      (sym : data [] [] s)) :[]\n    (lvar : data [] [] )) :[]\n  (sym :arn)) strip ","(send\n  (send\n    (send\n      (send nil :data) :[]\n      (sym : current_user s)) :[]\n    (lvar : current_user )) :[]\n  (sym :arn)) strip "," data [] []  [] "," current_user  [] "," data [] []  [] strip "," current_user  [] strip "," data [] [] _body merge! "," current_user _body merge! ","@current_ data [] [] _name == ","@current_ current_user _name == "," current_ data [] []  "," current_ current_user  "," data [] [] name nil? "," current_user name nil? "]}," Fog AWS IAM Real get_user":{"type":"method","name":"get_user","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"GetUser\")) merge! ","Fog Parsers AWS IAM GetUser  new ","params merge ","params merge! "]}," Fog AWS IAM Mock get_server_certificate":{"type":"method","name":"get_server_certificate","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new "," raise "," data [] [] "," data [] "," data ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS IAM Real get_server_certificate":{"type":"method","name":"get_server_certificate","children":[],"call":[" request ","Fog Parsers AWS IAM UploadServerCertificate  new "]}," Fog AWS IAM Real get_role_policy":{"type":"method","name":"get_role_policy","children":[],"call":[" request ","Fog Parsers AWS IAM GetRolePolicy  new "]}," Fog AWS IAM Real get_role":{"type":"method","name":"get_role","children":[],"call":[" request ","Fog Parsers AWS IAM SingleRole  new "]}," Fog AWS IAM Real get_login_profile":{"type":"method","name":"get_login_profile","children":[],"call":[" request ","Fog Parsers AWS IAM LoginProfile  new "]}," Fog AWS IAM Real get_instance_profile":{"type":"method","name":"get_instance_profile","children":[],"call":[" request ","Fog Parsers AWS IAM InstanceProfile  new "]}," Fog AWS IAM Mock get_group_policy":{"type":"method","name":"get_group_policy","children":[],"call":["response status= ","response body= ","Fog AWS Mock  request_id "," data [] [] [] [] "," data [] [] [] "," data [] [] "," data [] "," data ","Excon Response  new tap ","Excon Response  new "," raise ","Fog AWS IAM NotFound  new "," data [] [] [] key? "," data [] key? "]}," Fog AWS IAM Real get_group_policy":{"type":"method","name":"get_group_policy","children":[],"call":[" request ","Fog Parsers AWS IAM GetGroupPolicy  new "]}," Fog AWS IAM Mock get_group":{"type":"method","name":"get_group","children":[],"call":["response status= ","response body= ","Fog AWS Mock  request_id "," get_user body [] "," get_user body "," get_user "," data [] [] [] map "," data [] [] [] "," data [] [] "," data [] "," data ","(send\n  (send\n    (send\n      (send nil :data) :[]\n      (sym :groups)) :[]\n    (lvar :group_name)) :[]\n  (sym :arn)) strip ","Excon Response  new tap ","Excon Response  new "," raise ","Fog AWS IAM NotFound  new "," data [] key? "]}," Fog AWS IAM Real get_group":{"type":"method","name":"get_group","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"GetGroup\")) merge! ","Fog Parsers AWS IAM GetGroup  new "]}," Fog AWS IAM Mock get_account_summary":{"type":"method","name":"get_account_summary","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new tap ","Excon Response  new "]}," Fog AWS IAM Real get_account_summary":{"type":"method","name":"get_account_summary","children":[],"call":[" request ","Fog Parsers AWS IAM GetAccountSummary  new "]}," Fog AWS IAM Mock get_account_password_policy":{"type":"method","name":"get_account_password_policy","children":[],"call":["response status= ","response body= ","Fog AWS Mock  request_id ","Excon Response  new tap ","Excon Response  new "]}," Fog AWS IAM Real get_account_password_policy":{"type":"method","name":"get_account_password_policy","children":[],"call":[" request ","Fog Parsers AWS IAM Basic  new "]}," Fog AWS IAM Mock delete_user_policy":{"type":"method","name":"delete_user_policy","children":[],"call":[" raise ","Fog AWS IAM NotFound  new ","response status= ","response body= ","Fog AWS Mock  request_id ","Excon Response  new tap ","Excon Response  new "," data [] [] [] delete "," data [] [] [] "," data [] [] "," data [] "," data "," data [] [] [] key? "," data [] key? "]}," Fog AWS IAM Real delete_user_policy":{"type":"method","name":"delete_user_policy","children":[],"call":[" request ","Fog Parsers AWS IAM Basic  new "]}," Fog AWS IAM Mock delete_user":{"type":"method","name":"delete_user","children":[],"call":[" raise ","Fog AWS IAM NotFound  new ","response status= ","response body= ","Fog AWS Mock  request_id ","Excon Response  new tap ","Excon Response  new "," data [] delete "," data [] "," data "," data [] key? "]}," Fog AWS IAM Real delete_user":{"type":"method","name":"delete_user","children":[],"call":[" request ","Fog Parsers AWS IAM Basic  new "]}," Fog AWS IAM Real delete_signing_certificate":{"type":"method","name":"delete_signing_certificate","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DeleteSigningCertificate\")) merge! ","Fog Parsers AWS IAM Basic  new "]}," Fog AWS IAM Mock delete_server_certificate":{"type":"method","name":"delete_server_certificate","children":[],"call":[" raise ","Fog AWS IAM NotFound  new "," data [] delete "," data [] "," data ","response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS IAM Real delete_server_certificate":{"type":"method","name":"delete_server_certificate","children":[],"call":[" request ","Fog Parsers AWS IAM Basic  new "]}," Fog AWS IAM Real delete_role_policy":{"type":"method","name":"delete_role_policy","children":[],"call":[" request ","Fog Parsers AWS IAM Basic  new "]}," Fog AWS IAM Real delete_role":{"type":"method","name":"delete_role","children":[],"call":[" request ","Fog Parsers AWS IAM Basic  new "]}," Fog AWS IAM Real delete_login_profile":{"type":"method","name":"delete_login_profile","children":[],"call":[" request ","Fog Parsers AWS IAM Basic  new "]}," Fog AWS IAM Real delete_instance_profile":{"type":"method","name":"delete_instance_profile","children":[],"call":[" request ","Fog Parsers AWS IAM Basic  new "]}," Fog AWS IAM Real delete_group_policy":{"type":"method","name":"delete_group_policy","children":[],"call":[" request ","Fog Parsers AWS IAM Basic  new "]}," Fog AWS IAM Mock delete_group":{"type":"method","name":"delete_group","children":[],"call":[" raise ","Fog AWS IAM NotFound  new ","Fog AWS IAM Error  new ","response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new tap ","Excon Response  new "," data [] delete "," data [] "," data "," data [] [] [] empty? "," data [] [] [] "," data [] [] "," data [] key? "]}," Fog AWS IAM Real delete_group":{"type":"method","name":"delete_group","children":[],"call":[" request ","Fog Parsers AWS IAM Basic  new "]}," Fog AWS IAM Mock delete_account_password_policy":{"type":"method","name":"delete_account_password_policy","children":[],"call":["response status= ","response body= ","Fog AWS Mock  request_id ","Excon Response  new tap ","Excon Response  new "]}," Fog AWS IAM Real delete_account_password_policy":{"type":"method","name":"delete_account_password_policy","children":[],"call":[" request ","Fog Parsers AWS IAM Basic  new "]}," Fog AWS IAM Real delete_account_alias":{"type":"method","name":"delete_account_alias","children":[],"call":[" request ","Fog Parsers AWS IAM Basic  new "]}," Fog AWS IAM Mock delete_access_key":{"type":"method","name":"delete_access_key","children":[],"call":[" raise ","Fog AWS IAM NotFound  new ","response status= ","response body= ","Fog AWS Mock  request_id ","Excon Response  new tap ","Excon Response  new ","akey [] == ","akey [] "," data [] [] [] delete_if "," data [] [] [] "," data [] [] "," data [] "," data "," data [] [] [] any? "," data [] key? ","options [] "]}," Fog AWS IAM Real delete_access_key":{"type":"method","name":"delete_access_key","children":[],"call":[" request ","(pair\n  (str \"AccessKeyId\")\n  (lvar :access_key_id)) merge! ","Fog Parsers AWS IAM Basic  new "]}," Fog AWS IAM Mock create_user":{"type":"method","name":"create_user","children":[],"call":["response body= ","Fog AWS Mock  request_id "," data [] [] [] "," data [] [] "," data [] "," data ","(send\n  (send\n    (send\n      (send nil :data) :[]\n      (sym :users)) :[]\n    (lvar :user_name)) :[]\n  (sym :arn)) strip ","response status= ","Excon Response  new tap ","Excon Response  new "," data [] [] []= "," raise ","Fog AWS IAM EntityAlreadyExists  new "," data [] key? "]}," Fog AWS IAM Real create_user":{"type":"method","name":"create_user","children":[],"call":[" request ","Fog Parsers AWS IAM CreateUser  new "]}," Fog AWS IAM Real create_role":{"type":"method","name":"create_role","children":[],"call":[" request ","Fog Parsers AWS IAM SingleRole  new "]}," Fog AWS IAM Real create_login_profile":{"type":"method","name":"create_login_profile","children":[],"call":[" request ","Fog Parsers AWS IAM LoginProfile  new "]}," Fog AWS IAM Real create_instance_profile":{"type":"method","name":"create_instance_profile","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"CreateInstanceProfile\")) merge! ","Fog Parsers AWS IAM InstanceProfile  new "]}," Fog AWS IAM Mock create_group":{"type":"method","name":"create_group","children":[],"call":["response status= ","response body= ","Fog AWS Mock  request_id ","(send\n  (send\n    (send\n      (send nil :data) :[]\n      (sym :groups)) :[]\n    (lvar :group_name)) :[]\n  (sym :arn)) strip "," data [] [] [] "," data [] [] "," data [] "," data ","(send\n  (send\n    (send\n      (send nil :data) :[]\n      (sym :groups)) :[]\n    (lvar :group_name)) :[]\n  (sym :group_id)) strip ","Excon Response  new tap ","Excon Response  new "," data [] [] []= "," raise ","Fog AWS IAM EntityAlreadyExists  new "," data [] key? "]}," Fog AWS IAM Real create_group":{"type":"method","name":"create_group","children":[],"call":[" request ","Fog Parsers AWS IAM CreateGroup  new "]}," Fog AWS IAM Real create_account_alias":{"type":"method","name":"create_account_alias","children":[],"call":[" request ","Fog Parsers AWS IAM Basic  new "]}," Fog AWS IAM Mock create_access_key":{"type":"method","name":"create_access_key","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new tap ","Excon Response  new ","access_keys_data << ","key []= ","Fog AWS Mock  key_id ","Fog Mock  random_base64 "," data [] "," data "," raise ","Fog AWS IAM NotFound  new "," data [] [] [] "," data [] [] "," data [] key? ","options [] "," user_name "," data []  << "," data [] [] []  << "," options [] _name "]}," Fog AWS IAM Real create_access_key":{"type":"method","name":"create_access_key","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"CreateAccessKey\")) merge! ","Fog Parsers AWS IAM CreateAccessKey  new "]}," Fog AWS IAM Mock add_user_to_group":{"type":"method","name":"add_user_to_group","children":[],"call":[" raise ","Fog AWS IAM NotFound  new ","response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new tap ","Excon Response  new "," data [] [] [] << "," data [] [] [] "," data [] [] "," data [] "," data "," data [] [] [] include? "," data [] key? "]}," Fog AWS IAM Real add_user_to_group":{"type":"method","name":"add_user_to_group","children":[],"call":[" request ","Fog Parsers AWS IAM Basic  new "]}," Fog AWS IAM Real add_role_to_instance_profile":{"type":"method","name":"add_role_to_instance_profile","children":[],"call":[" request ","Fog Parsers AWS IAM Basic  new "]}," Fog AWS Glacier Real upload_part":{"type":"method","name":"upload_part","children":[],"call":[" request ","Digest SHA256  hexdigest ","offset + - ","offset + ","body bytesize ","body bytesize to_s ","Fog AWS  escape ","options [] ","OpenSSL Digest SHA256  hexdigest "]}," Fog AWS Glacier Real set_vault_notification_configuration":{"type":"method","name":"set_vault_notification_configuration","children":[],"call":[" request ","Fog JSON  encode ","Fog AWS  escape ","options [] "]}," Fog AWS Glacier Real list_vaults":{"type":"method","name":"list_vaults","children":[],"call":[" request ","options delete "]}," Fog AWS Glacier Real list_parts":{"type":"method","name":"list_parts","children":[],"call":[" request ","Fog AWS  escape ","options delete "]}," Fog AWS Glacier Real list_multipart_uploads":{"type":"method","name":"list_multipart_uploads","children":[],"call":[" request ","Fog AWS  escape ","options delete "]}," Fog AWS Glacier Real list_jobs":{"type":"method","name":"list_jobs","children":[],"call":[" request ","Fog AWS  escape ","options delete "]}," Fog AWS Glacier Real initiate_multipart_upload":{"type":"method","name":"initiate_multipart_upload","children":[],"call":[" request ","headers []= ","Fog AWS  escape ","options [] ","part_size to_s "]}," Fog AWS Glacier Real initiate_job":{"type":"method","name":"initiate_job","children":[],"call":[" request ","Fog JSON  encode ","Fog AWS  escape ","options [] "]}," Fog AWS Glacier Real get_vault_notification_configuration":{"type":"method","name":"get_vault_notification_configuration","children":[],"call":[" request ","Fog AWS  escape ","options [] "]}," Fog AWS Glacier Real get_job_output":{"type":"method","name":"get_job_output","children":[],"call":[" request ","options merge ","headers []= ","range end ","range begin ","options delete ","Fog AWS  escape ","options delete  end ","options delete  begin "]}," Fog AWS Glacier Real describe_vault":{"type":"method","name":"describe_vault","children":[],"call":[" request ","Fog AWS  escape ","options [] "]}," Fog AWS Glacier Real describe_job":{"type":"method","name":"describe_job","children":[],"call":[" request ","Fog AWS  escape ","options [] "]}," Fog AWS Glacier Real delete_vault_notification_configuration":{"type":"method","name":"delete_vault_notification_configuration","children":[],"call":[" request ","Fog AWS  escape ","options [] "]}," Fog AWS Glacier Real delete_vault":{"type":"method","name":"delete_vault","children":[],"call":[" request ","Fog AWS  escape ","options [] "]}," Fog AWS Glacier Real delete_archive":{"type":"method","name":"delete_archive","children":[],"call":[" request ","Fog AWS  escape ","options [] "]}," Fog AWS Glacier Real create_vault":{"type":"method","name":"create_vault","children":[],"call":[" request ","options merge ","Fog AWS  escape ","options [] "]}," Fog AWS Glacier Real create_archive":{"type":"method","name":"create_archive","children":[],"call":[" request ","headers []= ","Fog AWS  escape ","options [] ","Fog AWS Glacier TreeHash  digest ","Digest SHA256  hexdigest ","body bytesize to_s ","body bytesize ","OpenSSL Digest SHA256  hexdigest "]}," Fog AWS Glacier Real complete_multipart_upload":{"type":"method","name":"complete_multipart_upload","children":[],"call":[" request ","total_size to_s ","Fog AWS  escape ","options [] "]}," Fog AWS Glacier Real abort_multipart_upload":{"type":"method","name":"abort_multipart_upload","children":[],"call":[" request ","Fog AWS  escape ","options [] "]}," Fog AWS EMR Mock terminate_job_flows":{"type":"method","name":"terminate_job_flows","children":[],"call":["Fog Mock  not_implemented "]}," Fog AWS EMR Real terminate_job_flows":{"type":"method","name":"terminate_job_flows","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"TerminateJobFlows\")) merge ","Fog Parsers AWS EMR TerminateJobFlows  new ","options merge! ","Fog AWS  serialize_keys ","options delete "]}," Fog AWS EMR Mock set_termination_protection":{"type":"method","name":"set_termination_protection","children":[],"call":["Fog Mock  not_implemented "]}," Fog AWS EMR Real set_termination_protection":{"type":"method","name":"set_termination_protection","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"SetTerminationProtection\")) merge ","Fog Parsers AWS EMR SetTerminationProtection  new ","options merge! ","Fog AWS  serialize_keys ","options delete "]}," Fog AWS EMR Mock run_job_flow":{"type":"method","name":"run_job_flow","children":[],"call":["Fog Mock  not_implemented "]}," Fog AWS EMR Real run_hive":{"type":"method","name":"run_hive","children":[],"call":[" run_job_flow ","options [] []= ","options [] ","options [] nil? ! ","options [] nil? ","options []= ","steps << "]}," Fog AWS EMR Real run_job_flow":{"type":"method","name":"run_job_flow","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"RunJobFlow\")) merge ","Fog Parsers AWS EMR RunJobFlow  new ","options merge! ","Fog AWS  serialize_keys ","options delete "]}," Fog AWS EMR Mock modify_instance_groups":{"type":"method","name":"modify_instance_groups","children":[],"call":["Fog Mock  not_implemented "]}," Fog AWS EMR Real modify_instance_groups":{"type":"method","name":"modify_instance_groups","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ModifyInstanceGroups\")) merge ","Fog Parsers AWS EMR ModifyInstanceGroups  new ","options merge! ","Fog AWS  serialize_keys ","options delete "]}," Fog AWS EMR Mock describe_job_flows":{"type":"method","name":"describe_job_flows","children":[],"call":["Fog Mock  not_implemented "]}," Fog AWS EMR Real describe_job_flows":{"type":"method","name":"describe_job_flows","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeJobFlows\")) merge ","Fog Parsers AWS EMR DescribeJobFlows  new ","options merge! ","Fog AWS  serialize_keys ","options delete "]}," Fog AWS EMR Mock add_job_flow_steps":{"type":"method","name":"add_job_flow_steps","children":[],"call":["Fog Mock  not_implemented "]}," Fog AWS EMR Real add_job_flow_steps":{"type":"method","name":"add_job_flow_steps","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"AddJobFlowSteps\")) merge ","Fog Parsers AWS EMR AddJobFlowSteps  new ","options merge! ","Fog AWS  serialize_keys ","options delete "]}," Fog AWS EMR Mock add_instance_groups":{"type":"method","name":"add_instance_groups","children":[],"call":["Fog Mock  not_implemented "]}," Fog AWS EMR Real add_instance_groups":{"type":"method","name":"add_instance_groups","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"AddInstanceGroups\")) merge ","Fog Parsers AWS EMR AddInstanceGroups  new ","options merge! ","Fog AWS  indexed_param ","options delete "]}," Fog AWS ELB Mock set_load_balancer_policies_of_listener":{"type":"method","name":"set_load_balancer_policies_of_listener","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","listener []= "," raise ","Excon Errors  status_error ","policy [] == ","policy_names first ","policy [] ","load_balancer [] [] find ","load_balancer [] [] ","load_balancer [] ","policy_names any? ","listener [] [] == ","listener [] [] ","listener [] ","load_balancer [] find ","policy_names size > ","policy_names size ","Excon Response  new "," data [] [] "," data [] "," data ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  [] [] find "," data [] []  [] [] "," data [] []  [] "," data [] []  [] find "]}," Fog AWS ELB Real set_load_balancer_policies_of_listener":{"type":"method","name":"set_load_balancer_policies_of_listener","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"SetLoadBalancerPoliciesOfListener\")) merge! ","Fog Parsers AWS ELB Empty  new ","params []= ","params merge! ","Fog AWS  indexed_param ","policy_names any? "]}," Fog AWS ELB Mock set_load_balancer_policies_for_backend_server":{"type":"method","name":"set_load_balancer_policies_for_backend_server","children":[],"call":[" raise ","response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new tap ","Excon Response  new ","load_balancer [] << ","load_balancer [] ","d [] == ","d [] ","load_balancer [] delete_if ","description []= ","load_balancer [] find ","p [] == ","p [] ","load_balancer [] [] find ","load_balancer [] [] ","policy_names each "," data [] [] "," data [] "," data "," data [] []  [] << "," data [] []  [] "," data [] []  [] delete_if "," data [] []  [] find "," data [] []  [] [] find "," data [] []  [] [] "]}," Fog AWS ELB Real set_load_balancer_policies_for_backend_server":{"type":"method","name":"set_load_balancer_policies_for_backend_server","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"SetLoadBalancerPoliciesForBackendServer\")) merge! ","Fog Parsers AWS ELB Empty  new ","params []= ","params merge! ","Fog AWS  indexed_param ","policy_names any? "]}," Fog AWS ELB Mock set_load_balancer_listener_ssl_certificate":{"type":"method","name":"set_load_balancer_listener_ssl_certificate","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","listener [] []= ","listener [] "," raise ","Excon Errors  status_error ","listener [] [] == ","listener [] [] ","load_balancer [] find ","load_balancer [] ","Excon Response  new ","Fog AWS IAM NotFound  new ","certificate_ids include? ! ","certificate_ids include? ","c [] ","Fog AWS IAM Mock  data [] [] map ","Fog AWS IAM Mock  data [] [] ","Fog AWS IAM Mock  data [] ","Fog AWS IAM Mock  data "," data [] [] "," data [] "," data ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  [] find "," data [] []  [] "]}," Fog AWS ELB Real set_load_balancer_listener_ssl_certificate":{"type":"method","name":"set_load_balancer_listener_ssl_certificate","children":[],"call":[" request ","Fog Parsers AWS ELB Empty  new "]}," Fog AWS ELB Mock remove_tags":{"type":"method","name":"remove_tags","children":[],"call":[" raise ","Fog AWS ELB NotFound  new ","response body= ","Fog AWS Mock  request_id ","response status= "," data [] [] delete "," data [] [] "," data [] "," data ","keys each ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS ELB Real remove_tags":{"type":"method","name":"remove_tags","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"RemoveTags\")) merge ","Fog AWS  indexed_param ","Fog Parsers AWS ELB Empty  new "]}," Fog AWS ELB Mock register_instances_with_load_balancer":{"type":"method","name":"register_instances_with_load_balancer","children":[],"call":["response body= ","Fog AWS Mock  request_id ","load_balancer []= ","load_balancer [] | ","instances dup ","load_balancer [] ","response status= ","Excon Response  new "," raise ","Fog Compute AWS Mock  data [] [] [] [] ","Fog Compute AWS Mock  data [] [] [] ","Fog Compute AWS Mock  data [] [] ","Fog Compute AWS Mock  data [] ","Fog Compute AWS Mock  data ","instance_ids map "," data [] [] "," data [] "," data ","Fog AWS Compute Mock  data [] [] [] [] ","Fog AWS Compute Mock  data [] [] [] ","Fog AWS Compute Mock  data [] [] ","Fog AWS Compute Mock  data [] ","Fog AWS Compute Mock  data ","Excon Response  new  body= "," data [] []  []= "," data [] []  [] | "," data [] []  [] ","Excon Response  new  status= "]}," Fog AWS ELB Real register_instances_with_load_balancer":{"type":"method","name":"register_instances_with_load_balancer","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"RegisterInstancesWithLoadBalancer\")) merge! ","Fog Parsers AWS ELB RegisterInstancesWithLoadBalancer  new ","Fog AWS  indexed_param "]}," Fog AWS ELB Mock modify_load_balancer_attributes":{"type":"method","name":"modify_load_balancer_attributes","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new ","load_balancer [] merge! ","load_balancer [] ","attributes [] "," raise "," data [] [] "," data [] "," data ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  [] merge! "," data [] []  [] "]}," Fog AWS ELB Real modify_load_balancer_attributes":{"type":"method","name":"modify_load_balancer_attributes","children":[],"call":[" request ","attributes merge ","Fog Parsers AWS ELB Empty  new ","Fog AWS  serialize_keys ","Fog AWS  serialize_keys  merge "]}," Fog AWS ELB Mock enable_availability_zones_for_load_balancer":{"type":"method","name":"enable_availability_zones_for_load_balancer","children":[],"call":["response body= ","load_balancer [] ","Fog AWS Mock  request_id ","load_balancer [] flatten! uniq! ","load_balancer [] flatten! ","load_balancer [] << ","response status= ","Excon Response  new "," raise "," data [] [] "," data [] "," data ","Excon Response  new  body= "," data [] []  [] "," data [] []  [] flatten! uniq! "," data [] []  [] flatten! "," data [] []  [] << ","Excon Response  new  status= "]}," Fog AWS ELB Real enable_availability_zones_for_load_balancer":{"type":"method","name":"enable_availability_zones_for_load_balancer","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"EnableAvailabilityZonesForLoadBalancer\")) merge! ","Fog Parsers AWS ELB EnableAvailabilityZonesForLoadBalancer  new ","Fog AWS  indexed_param "]}," Fog AWS ELB Mock disable_availability_zones_for_load_balancer":{"type":"method","name":"disable_availability_zones_for_load_balancer","children":[],"call":["response body= ","load_balancer [] ","Fog AWS Mock  request_id ","availability_zones include? ","load_balancer [] delete_if ","response status= ","Excon Response  new "," raise "," data [] [] "," data [] "," data ","Excon Response  new  body= "," data [] []  [] "," data [] []  [] delete_if ","Excon Response  new  status= "]}," Fog AWS ELB Real disable_availability_zones_for_load_balancer":{"type":"method","name":"disable_availability_zones_for_load_balancer","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DisableAvailabilityZonesForLoadBalancer\")) merge! ","Fog Parsers AWS ELB DisableAvailabilityZonesForLoadBalancer  new ","Fog AWS  indexed_param "]}," Fog AWS ELB Mock detach_load_balancer_from_subnets":{"type":"method","name":"detach_load_balancer_from_subnets","children":[],"call":["response body= ","load_balancer [] ","Fog AWS Mock  request_id ","load_balancer [] flatten! uniq! ","load_balancer [] flatten! ","load_balancer [] << ","response status= ","Excon Response  new "," raise "," data [] [] "," data [] "," data ","Excon Response  new  body= "," data [] []  [] "," data [] []  [] flatten! uniq! "," data [] []  [] flatten! "," data [] []  [] << ","Excon Response  new  status= "]}," Fog AWS ELB Real detach_load_balancer_from_subnets":{"type":"method","name":"detach_load_balancer_from_subnets","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DetachLoadBalancerFromSubnets\")) merge! ","Fog Parsers AWS ELB DetachLoadBalancerFromSubnets  new ","Fog AWS  indexed_param "]}," Fog AWS ELB Mock describe_tags":{"type":"method","name":"describe_tags","children":[],"call":[" raise ","Fog AWS ELB NotFound  new ","response body= "," data [] [] "," data [] "," data ","response status= ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS ELB Real describe_tags":{"type":"method","name":"describe_tags","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeTags\")) merge ","Fog AWS  indexed_param ","Fog Parsers AWS ELB TagListParser  new "]}," Fog AWS ELB Mock describe_load_balancers":{"type":"method","name":"describe_load_balancers","children":[],"call":["response body [] []= ","next_marker to_s ","response body [] ","response body ","response body= ","lb []= ","lb delete ","m [] << ","policy [] ","m [] ","lb_policy []= ","cookie_expiration_period > ","(send\n  (send\n    (lvar :policy) :[]\n    (str \"PolicyAttributeDescriptions\")) :find) [] to_i ","(send\n  (send\n    (lvar :policy) :[]\n    (str \"PolicyAttributeDescriptions\")) :find) [] ","h [] == ","h [] ","policy [] find ","lb [] [] reduce ","lb [] [] ","lb [] ","i [] ","lb [] map ","load_balancers map ","Fog AWS Mock  request_id ","response status= ","Excon Response  new ","load_balancers [] ","marker + ","load_balancers count - > ","load_balancers count - ","load_balancers count ","options fetch to_i ","options fetch ","values dup "," data [] map "," data [] "," data ","(send\n  (lvar :lb_names) :map) compact ","lb [] dup "," raise ","name == "," data [] find ","lb_names map ","lb_names any? ","options [] ","(lvar :options) flatten ","Fog Logger  deprecation "," caller first "," caller ","options class ","options is_a? ","Excon Response  new  body [] []= ","marker +  to_s ","next_options fetch to_i  to_s ","Excon Response  new  body [] ","Excon Response  new  body ","Excon Response  new  body= ","(send\n  (send\n    (lvar :policy) :[]\n    (str \"PolicyAttributeDescriptions\")) :find) [] to_i  > ","load_balancers []  map ","(send\n  (lvar :lb_names) :map) compact  map ","Excon Response  new  status= ","load_balancers []  [] ","(send\n  (lvar :lb_names) :map) compact  [] ","options fetch to_i  + ","load_balancers []  count - > ","(send\n  (lvar :lb_names) :map) compact  count - > ","load_balancers []  count - ","(send\n  (lvar :lb_names) :map) compact  count - ","load_balancers []  count ","(send\n  (lvar :lb_names) :map) compact  count "]}," Fog AWS ELB Real describe_load_balancers":{"type":"method","name":"describe_load_balancers","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeLoadBalancers\")) merge! ","Fog Parsers AWS ELB DescribeLoadBalancers  new ","options update ","Fog AWS  indexed_param ","options delete ","(lvar :options) flatten ","Fog Logger  deprecation "," caller first "," caller ","options class ","options is_a? "]}," Fog AWS ELB Mock describe_load_balancer_policy_types":{"type":"method","name":"describe_load_balancer_policy_types","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new ","policy_type dup "," data [] map "," data [] "," data ","(send\n  (lvar :type_names) :map) compact ","policy_type [] dup ","policy_type [] "," raise ","pt [] == ","pt [] "," data [] find ","type_names map ","type_names any? ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS ELB Real describe_load_balancer_policy_types":{"type":"method","name":"describe_load_balancer_policy_types","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeLoadBalancerPolicyTypes\")) merge! ","Fog Parsers AWS ELB DescribeLoadBalancerPolicyTypes  new ","Fog AWS  indexed_param "]}," Fog AWS ELB Mock describe_load_balancer_policies":{"type":"method","name":"describe_load_balancer_policies","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new ","load_balancer [] [] ","load_balancer [] ","(send\n  (lvar :names) :map) compact ","policy dup "," raise ","p [] == ","p [] ","load_balancer [] [] find ","names map ","names any? "," data [] [] "," data [] "," data ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  [] [] "," data [] []  [] "," data [] []  [] [] find "]}," Fog AWS ELB Real describe_load_balancer_policies":{"type":"method","name":"describe_load_balancer_policies","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeLoadBalancerPolicies\")) merge! ","Fog Parsers AWS ELB DescribeLoadBalancerPolicies  new ","Fog AWS  indexed_param "]}," Fog AWS ELB Mock describe_load_balancer_attributes":{"type":"method","name":"describe_load_balancer_attributes","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new ","load_balancer [] "," raise "," data [] [] "," data [] "," data ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  [] "]}," Fog AWS ELB Real describe_load_balancer_attributes":{"type":"method","name":"describe_load_balancer_attributes","children":[],"call":[" request ","Fog Parsers AWS ELB DescribeLoadBalancerAttributes  new "]}," Fog AWS ELB Mock describe_instance_health":{"type":"method","name":"describe_instance_health","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new "," raise ","Fog Compute AWS Mock  data [] [] [] [] ","Fog Compute AWS Mock  data [] [] [] ","Fog Compute AWS Mock  data [] [] ","Fog Compute AWS Mock  data [] ","Fog Compute AWS Mock  data ","instance_ids map ","i [] ","load_balancer [] map ","load_balancer [] ","instance_ids any? "," data [] [] "," data [] "," data ","Fog AWS Compute Mock  data [] [] [] [] ","Fog AWS Compute Mock  data [] [] [] ","Fog AWS Compute Mock  data [] [] ","Fog AWS Compute Mock  data [] ","Fog AWS Compute Mock  data ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  [] map "," data [] []  [] "]}," Fog AWS ELB Real describe_instance_health":{"type":"method","name":"describe_instance_health","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeInstanceHealth\")) merge! ","Fog Parsers AWS ELB DescribeInstanceHealth  new ","Fog AWS  indexed_param "]}," Fog AWS ELB Mock deregister_instances_from_load_balancer":{"type":"method","name":"deregister_instances_from_load_balancer","children":[],"call":["response body= ","load_balancer [] dup ","load_balancer [] ","Fog AWS Mock  request_id ","instance_ids include? ","i [] ","load_balancer [] delete_if ","response status= ","Excon Response  new "," raise ","Fog Compute AWS Mock  data [] [] [] [] ","Fog Compute AWS Mock  data [] [] [] ","Fog Compute AWS Mock  data [] [] ","Fog Compute AWS Mock  data [] ","Fog Compute AWS Mock  data ","instance_ids each "," data [] [] "," data [] "," data ","Fog AWS Compute Mock  data [] [] [] [] ","Fog AWS Compute Mock  data [] [] [] ","Fog AWS Compute Mock  data [] [] ","Fog AWS Compute Mock  data [] ","Fog AWS Compute Mock  data ","Excon Response  new  body= "," data [] []  [] dup "," data [] []  [] "," data [] []  [] delete_if ","Excon Response  new  status= "]}," Fog AWS ELB Real deregister_instances_from_load_balancer":{"type":"method","name":"deregister_instances_from_load_balancer","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DeregisterInstancesFromLoadBalancer\")) merge! ","Fog Parsers AWS ELB DeregisterInstancesFromLoadBalancer  new ","Fog AWS  indexed_param "]}," Fog AWS ELB Mock delete_load_balancer_policy":{"type":"method","name":"delete_load_balancer_policy","children":[],"call":[" raise ","response body= ","Fog AWS Mock  request_id ","policy [] == ","policy [] ","policies delete_if ","load_balancer [] each ","load_balancer [] ","response status= ","Excon Response  new "," data [] [] "," data [] "," data ","Excon Response  new  body= "," data [] []  [] each "," data [] []  [] ","Excon Response  new  status= "]}," Fog AWS ELB Real delete_load_balancer_policy":{"type":"method","name":"delete_load_balancer_policy","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DeleteLoadBalancerPolicy\")) merge! ","Fog Parsers AWS ELB Empty  new "]}," Fog AWS ELB Mock delete_load_balancer_listeners":{"type":"method","name":"delete_load_balancer_listeners","children":[],"call":["response body= ","Fog AWS Mock  request_id ","load_balancer_ports include? ","listener [] [] ","listener [] ","load_balancer [] delete_if ","load_balancer [] ","response status= ","Excon Response  new "," raise "," data [] [] "," data [] "," data ","Excon Response  new  body= "," data [] [] _ports include? "," data [] []  [] delete_if "," data [] []  [] ","Excon Response  new  status= "]}," Fog AWS ELB Real delete_load_balancer_listeners":{"type":"method","name":"delete_load_balancer_listeners","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DeleteLoadBalancerListeners\")) merge! ","Fog Parsers AWS ELB Empty  new ","Fog AWS  indexed_param "]}," Fog AWS ELB Mock delete_load_balancer":{"type":"method","name":"delete_load_balancer","children":[],"call":["response body= ","Fog AWS Mock  request_id "," data [] delete "," data [] "," data ","response status= ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS ELB Real delete_load_balancer":{"type":"method","name":"delete_load_balancer","children":[],"call":[" request ","Fog Parsers AWS ELB DeleteLoadBalancer  new "]}," Fog AWS ELB Mock create_load_balancer_policy":{"type":"method","name":"create_load_balancer_policy","children":[],"call":[" raise ","response body= ","Fog AWS Mock  request_id ","response status= ","load_balancer [] [] << ","load_balancer [] [] ","load_balancer [] ","value to_s ","value ! ","key == ","attributes map ","Excon Response  new ","pt [] == ","pt [] "," data [] find "," data [] "," data ","p [] == ","p [] ","load_balancer [] [] find "," data [] [] ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  [] [] << "," data [] []  [] [] "," data [] []  [] "," data [] []  [] [] find "]}," Fog AWS ELB Real create_load_balancer_policy":{"type":"method","name":"create_load_balancer_policy","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"CreateLoadBalancerPolicy\")) merge! ","Fog Parsers AWS ELB Empty  new ","params merge! ","Fog AWS  indexed_param ","attribute_value push ","attribute_name push ","attributes each "]}," Fog AWS ELB Mock create_load_balancer_listeners":{"type":"method","name":"create_load_balancer_listeners","children":[],"call":[" raise ","response body= ","Fog AWS Mock  request_id ","response status= ","load_balancer [] << ","load_balancer [] ","(str \"TCP\") include? ! ","(str \"TCP\") include? ","listener [] ","(str \"HTTP\") include? ! ","(str \"HTTP\") include? ","Fog AWS IAM NotFound  new ","certificate_ids include? ! ","certificate_ids include? ","listeners each ","c [] ","Fog AWS IAM Mock  data [] [] map ","Fog AWS IAM Mock  data [] [] ","Fog AWS IAM Mock  data [] ","Fog AWS IAM Mock  data ","Excon Response  new "," data [] [] "," data [] "," data ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  [] << "," data [] []  [] "]}," Fog AWS ELB Real create_load_balancer_listeners":{"type":"method","name":"create_load_balancer_listeners","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"CreateLoadBalancerListeners\")) merge! ","Fog Parsers AWS ELB Empty  new ","params merge! ","Fog AWS  indexed_param ","listener_ssl_certificate_id push ","listener [] ","listener_instance_protocol push ","listener_instance_port push ","listener_lb_port push ","listener_protocol push ","listeners each "]}," Fog AWS ELB Mock create_load_balancer":{"type":"method","name":"create_load_balancer","children":[],"call":["response body= ","Fog AWS Mock  request_id "," data [] []= ","security_group [] ","Time  now ","options [] ","options [] nil? "," data [] "," data ","Fog Compute AWS Mock  data [] [] [] []= ","Fog Compute AWS Mock  data [] [] [] ","Fog Compute AWS Mock  data [] [] ","Fog Compute AWS Mock  data [] ","Fog Compute AWS Mock  data ","Fog AWS Mock  security_group_id ","sg [] == ","sg [] ","Fog Compute AWS Mock  data [] [] [] values find ","Fog Compute AWS Mock  data [] [] [] values ","subnets first [] ","subnets first ","vpc id ","Fog Mock  random_hex ","sg [] =~ ","compute vpcs create ","compute vpcs ","compute vpcs all first ","compute vpcs all ","Fog Compute AWS  new ","Fog Compute AWS Mock  data [] [] [] [] ","subnet_ids empty? ","supported_platforms include? ","subnet_ids include? ","e [] ","Fog Compute AWS Mock  data [] [] [] select ","(send\n  (send\n    (send\n      (send\n        (send\n          (const\n            (const\n              (const\n                (const nil :Fog) :Compute) :AWS) :Mock) :data) :[]\n        (lvar :region)) :[]\n      (ivar :@aws_access_key_id)) :[]\n    (sym :account_attributes)) :find) [] ","h [] == ","h [] ","Fog Compute AWS Mock  data [] [] [] find ","availability_zones first gsub ","availability_zones first ","availability_zones empty? ","(splat\n  (lvar :availability_zones)) compact ","Fog AWS ELB Mock  dns_name "," raise ","Fog AWS IAM NotFound  new ","certificate_ids include? ! ","certificate_ids include? ","listener [] ","(splat\n  (lvar :listeners)) map ","c [] ","Fog AWS IAM Mock  data [] [] map ","Fog AWS IAM Mock  data [] [] ","Fog AWS IAM Mock  data [] ","Fog AWS IAM Mock  data "," data [] key? ","response status= ","Excon Response  new ","Hash  [] keys [] ","Hash  [] keys ","Hash  [] ","region_subnets [] ","region_data [] [] any? ","region_data [] [] ","region_data [] ","Fog Compute AWS Mock  data select ","subnet_ids any? ","availability_zones any? ","Fog AWS Compute Mock  data [] [] [] values find ","Fog AWS Compute Mock  data [] [] [] values ","Fog AWS Compute Mock  data [] [] [] ","Fog AWS Compute Mock  data [] [] ","Fog AWS Compute Mock  data [] ","Fog AWS Compute Mock  data ","Fog AWS Compute  new ","Fog AWS Compute Mock  data [] [] [] [] ","Fog AWS Compute Mock  data [] [] [] select ","(send\n  (send\n    (send\n      (send\n        (send\n          (const\n            (const\n              (const\n                (const nil :Fog) :AWS) :Compute) :Mock) :data) :[]\n        (lvar :region)) :[]\n      (ivar :@aws_access_key_id)) :[]\n    (sym :account_attributes)) :find) [] ","Fog AWS Compute Mock  data [] [] [] find ","Fog AWS Compute Mock  data select ","Excon Response  new  body= ","compute vpcs create  id ","compute vpcs all first  id ","compute compute vpcs create s create ","compute compute vpcs all first s create ","Fog Compute AWS  new  vpcs create ","Fog AWS Compute  new  vpcs create ","compute compute vpcs create s ","compute compute vpcs all first s ","Fog Compute AWS  new  vpcs ","Fog AWS Compute  new  vpcs ","compute compute vpcs create s all first ","compute compute vpcs all first s all first ","Fog Compute AWS  new  vpcs all first ","Fog AWS Compute  new  vpcs all first ","compute compute vpcs create s all ","compute compute vpcs all first s all ","Fog Compute AWS  new  vpcs all ","Fog AWS Compute  new  vpcs all ","(send\n  (send\n    (send\n      (send\n        (send\n          (const\n            (const\n              (const\n                (const nil :Fog) :Compute) :AWS) :Mock) :data) :[]\n        (lvar :region)) :[]\n      (ivar :@aws_access_key_id)) :[]\n    (sym :account_attributes)) :find) []  include? ","(send\n  (send\n    (send\n      (send\n        (send\n          (const\n            (const\n              (const\n                (const nil :Fog) :AWS) :Compute) :Mock) :data) :[]\n        (lvar :region)) :[]\n      (ivar :@aws_access_key_id)) :[]\n    (sym :account_attributes)) :find) []  include? ","(send\n  (send\n    (send\n      (send\n        (send\n          (const\n            (const\n              (const\n                (const nil :Fog) :Compute) :AWS) :Mock) :data) :[]\n        (lvar :availability_zones first gsub )) :[]\n      (ivar :@aws_access_key_id)) :[]\n    (sym :account_attributes)) :find) [] ","(splat\n  (lvar :availability_zones)) compact  first gsub ","(splat\n  (lvar :availability_zones)) compact  first ","(splat\n  (lvar :availability_zones)) compact  empty? ","(splat\n  (lvar :(splat\n  (lvar :availability_zones)) compact )) compact ","Fog AWS ELB Mock  Fog AWS ELB Mock  dns_name  ","Excon Response  new  status= ","availability_zones first gsub _subnets [] ","availability_zones first gsub _data [] [] any? ","availability_zones first gsub _data [] [] ","availability_zones first gsub _data [] ","(splat\n  (lvar :availability_zones)) compact  any? ","(send\n  (send\n    (send\n      (send\n        (send\n          (const\n            (const\n              (const\n                (const nil :Fog) :AWS) :Compute) :Mock) :data) :[]\n        (lvar :availability_zones first gsub )) :[]\n      (ivar :@aws_access_key_id)) :[]\n    (sym :account_attributes)) :find) [] "]}," Fog AWS ELB Real create_load_balancer":{"type":"method","name":"create_load_balancer","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"CreateLoadBalancer\")) merge! ","Fog Parsers AWS ELB CreateLoadBalancer  new ","params merge! ","Fog AWS  indexed_param ","listener_ssl_certificate_id push ","listener [] ","listener_instance_protocol push ","listener_instance_port push ","listener_lb_port push ","listener_protocol push ","listeners each ","options [] ","Fog AWS  serialize_keys ","Fog AWS  indexed_param  merge! "]}," Fog AWS ELB Mock create_lb_cookie_stickiness_policy":{"type":"method","name":"create_lb_cookie_stickiness_policy","children":[],"call":[" raise ","response body= ","Fog AWS Mock  request_id "," create_load_balancer_policy ","response status= ","Excon Response  new "," data [] [] "," data [] "," data ","Excon Response  new  body= "," create_ data [] [] _policy ","Excon Response  new  status= "]}," Fog AWS ELB Real create_lb_cookie_stickiness_policy":{"type":"method","name":"create_lb_cookie_stickiness_policy","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"CreateLBCookieStickinessPolicy\")) merge! ","Fog Parsers AWS ELB Empty  new "]}," Fog AWS ELB Mock create_app_cookie_stickiness_policy":{"type":"method","name":"create_app_cookie_stickiness_policy","children":[],"call":[" raise ","response body= ","Fog AWS Mock  request_id "," create_load_balancer_policy ","response status= ","Excon Response  new "," data [] [] "," data [] "," data ","Excon Response  new  body= "," create_ data [] [] _policy ","Excon Response  new  status= "]}," Fog AWS ELB Real create_app_cookie_stickiness_policy":{"type":"method","name":"create_app_cookie_stickiness_policy","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"CreateAppCookieStickinessPolicy\")) merge! ","Fog Parsers AWS ELB Empty  new "]}," Fog AWS ELB Mock configure_health_check":{"type":"method","name":"configure_health_check","children":[],"call":[" raise ","response body= ","load_balancer [] ","Fog AWS Mock  request_id ","load_balancer []= ","response status= ","Excon Response  new "," data [] [] "," data [] "," data ","Excon Response  new  body= "," data [] []  [] "," data [] []  []= ","Excon Response  new  status= "]}," Fog AWS ELB Real configure_health_check":{"type":"method","name":"configure_health_check","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ConfigureHealthCheck\")) merge! ","Fog Parsers AWS ELB ConfigureHealthCheck  new ","params []= ","health_check each "]}," Fog AWS ELB Mock attach_load_balancer_to_subnets":{"type":"method","name":"attach_load_balancer_to_subnets","children":[],"call":["response body= ","load_balancer [] ","Fog AWS Mock  request_id ","load_balancer [] flatten! uniq! ","load_balancer [] flatten! ","load_balancer [] << ","response status= ","Excon Response  new "," raise "," data [] [] "," data [] "," data ","Excon Response  new  body= "," data [] []  [] "," data [] []  [] flatten! uniq! "," data [] []  [] flatten! "," data [] []  [] << ","Excon Response  new  status= "]}," Fog AWS ELB Real attach_load_balancer_to_subnets":{"type":"method","name":"attach_load_balancer_to_subnets","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"AttachLoadBalancerToSubnets\")) merge! ","Fog Parsers AWS ELB AttachLoadBalancerToSubnets  new ","Fog AWS  indexed_param "]}," Fog AWS ELB Mock apply_security_groups_to_load_balancer":{"type":"method","name":"apply_security_groups_to_load_balancer","children":[],"call":["response body= ","load_balancer [] ","Fog AWS Mock  request_id ","load_balancer [] flatten! uniq! ","load_balancer [] flatten! ","load_balancer [] << ","response status= ","Excon Response  new "," raise "," data [] [] "," data [] "," data ","Excon Response  new  body= "," data [] []  [] "," data [] []  [] flatten! uniq! "," data [] []  [] flatten! "," data [] []  [] << ","Excon Response  new  status= "]}," Fog AWS ELB Real apply_security_groups_to_load_balancer":{"type":"method","name":"apply_security_groups_to_load_balancer","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ApplySecurityGroupsToLoadBalancer\")) merge! ","Fog Parsers AWS ELB ApplySecurityGroupsToLoadBalancer  new ","Fog AWS  indexed_param "]}," Fog AWS ELB Mock add_tags":{"type":"method","name":"add_tags","children":[],"call":[" raise ","Fog AWS ELB NotFound  new ","response body= ","Fog AWS Mock  request_id ","response status= "," data [] [] merge! "," data [] [] "," data [] "," data ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS ELB Real add_tags":{"type":"method","name":"add_tags","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"AddTags\")) merge merge ","Fog AWS  indexed_param ","(pair\n  (str \"Action\")\n  (str \"AddTags\")) merge ","Fog Parsers AWS ELB Empty  new ","tags [] ","keys map ","tags keys sort ","tags keys ","tags keys sort  map ","tags tags keys sort  sort ","tags tags keys sort  "]}," Fog AWS Elasticache Mock revoke_cache_security_group_ingress":{"type":"method","name":"revoke_cache_security_group_ingress","children":[],"call":["Fog Mock  not_implemented "]}," Fog AWS Elasticache Real revoke_cache_security_group_ingress":{"type":"method","name":"revoke_cache_security_group_ingress","children":[],"call":[" request ","Fog Parsers AWS Elasticache SingleSecurityGroup  new "]}," Fog AWS Elasticache Mock reset_cache_parameter_group":{"type":"method","name":"reset_cache_parameter_group","children":[],"call":["Fog Mock  not_implemented "]}," Fog AWS Elasticache Real reset_cache_parameter_group":{"type":"method","name":"reset_cache_parameter_group","children":[],"call":[" request ","parameter_changes merge ","Fog Parsers AWS Elasticache ResetParameterGroup  new ","parameter_changes empty? ","new_args []= ","parameter_names index + ","parameter_names index ","parameter_names reduce ","parameter_names parameter_names index +  + ","parameter_names parameter_names index +  "]}," Fog AWS Elasticache Mock reboot_cache_cluster":{"type":"method","name":"reboot_cache_cluster","children":[],"call":["response body= ","Fog AWS Mock  request_id "," data [] [] merge "," data [] [] "," data [] "," data ","Excon Response  new ","Excon Response  new  body= "]}," Fog AWS Elasticache Real reboot_cache_cluster":{"type":"method","name":"reboot_cache_cluster","children":[],"call":[" request ","node_id_params merge ","Fog Parsers AWS Elasticache SingleCacheCluster  new ","node_hash []= ","node_ids index + ","node_ids index ","node_ids reduce ","node_ids node_ids index +  + ","node_ids node_ids index +  "]}," Fog AWS Elasticache Mock modify_cache_parameter_group":{"type":"method","name":"modify_cache_parameter_group","children":[],"call":["Fog Mock  not_implemented "]}," Fog AWS Elasticache Real modify_cache_parameter_group":{"type":"method","name":"modify_cache_parameter_group","children":[],"call":[" request ","parameter_changes merge ","Fog Parsers AWS Elasticache ModifyParameterGroup  new ","new_args []= ","pair [] ","new_parameters reduce "]}," Fog AWS Elasticache Mock modify_cache_cluster":{"type":"method","name":"modify_cache_cluster","children":[],"call":["response body= ","Fog AWS Mock  request_id ","cluster merge ","pending_values []= ","options [] join ","options [] ","cluster []= ","cluster [] size ","cluster [] "," create_cache_nodes "," cache []= "," cache ","options [] to_s ","options [] != ","(pair\n  (sym :auto_minor_version_upgrade)\n  (str \"AutoMinorVersionUpgrade\")) each ","Hash  new "," data [] [] "," data [] "," data ","Excon Response  new ","Excon Response  new  body= "," data [] []  merge ","Hash  new  []= "," data [] []  []= "," data [] []  [] size "," data [] []  [] "]}," Fog AWS Elasticache Real modify_cache_cluster":{"type":"method","name":"modify_cache_cluster","children":[],"call":[" request ","node_id_params merge ","sec_group_params merge ","Fog Parsers AWS Elasticache SingleCacheCluster  new ","options [] ","id strip ","node_hash []= ","node_ids index + ","node_ids index ","node_ids reduce ","group_hash []= ","group_names index + ","group_names index ","group_names reduce ","node_ids node_ids index +  + ","node_ids group_names index +  + ","node_ids node_ids index +  ","node_ids group_names index +  ","group_names node_ids index +  + ","group_names group_names index +  + ","group_names node_ids index +  ","group_names group_names index +  "]}," Fog AWS Elasticache Mock describe_db_reserved_instances":{"type":"method","name":"describe_db_reserved_instances","children":[],"call":["Fog Mock  not_implemented "]}," Fog AWS Elasticache Real describe_reserved_cache_nodes":{"type":"method","name":"describe_reserved_cache_nodes","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeReservedCacheNodes\")) merge ","Fog Parsers AWS Elasticache DescribeReservedCacheNodes  new ","params []= ","opts [] "]}," Fog AWS Elasticache Mock describe_events":{"type":"method","name":"describe_events","children":[],"call":["Fog Mock  not_implemented "]}," Fog AWS Elasticache Real describe_events":{"type":"method","name":"describe_events","children":[],"call":[" request ","Fog Parsers AWS Elasticache EventListParser  new ","options [] "]}," Fog AWS Elasticache Mock describe_engine_defalut_parameters":{"type":"method","name":"describe_engine_defalut_parameters","children":[],"call":["Fog Mock  not_implemented "]}," Fog AWS Elasticache Real describe_engine_default_parameters":{"type":"method","name":"describe_engine_default_parameters","children":[],"call":[" request ","Fog Parsers AWS Elasticache DescribeEngineDefaultParameters  new ","options [] "]}," Fog AWS Elasticache Mock describe_cache_subnet_groups":{"type":"method","name":"describe_cache_subnet_groups","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= "," data [] values "," data [] "," data "," raise ","Fog AWS Elasticache NotFound  new ","subnet_group_set << "," data [] [] ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "," data [] values  << "," data [] [] _set << "]}," Fog AWS Elasticache Real describe_cache_subnet_groups":{"type":"method","name":"describe_cache_subnet_groups","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeCacheSubnetGroups\")) merge ","Fog Parsers AWS Elasticache DescribeCacheSubnetGroups  new ","params []= ","opts [] "]}," Fog AWS Elasticache Mock describe_cache_security_groups":{"type":"method","name":"describe_cache_security_groups","children":[],"call":["Excon Response  new ","Fog AWS Mock  request_id ","sec_group [] delete ","sec_group [] ","ec2_secg [] == ","ec2_secg [] ","ec2_secg delete ","ec2_secg []= ","ec2_secg [] <= ","Time  now ","Time  now + ","Fog Mock  delay * ","Fog Mock  delay ","sec_group [] each ","sec_group_set each "," data [] values "," data [] "," data "," raise ","Fog AWS Elasticache NotFound  new ","sec_group_set empty? ","(send\n  (send\n    (send\n      (self) :data) :[]\n    (sym :security_groups)) :[]\n  (lvar :name)) compact "," data [] [] "," data [] values  each ","(send\n  (send\n    (send\n      (self) :data) :[]\n    (sym :security_groups)) :[]\n  (lvar :name)) compact  each "," data [] values  empty? ","(send\n  (send\n    (send\n      (self) :data) :[]\n    (sym :security_groups)) :[]\n  (lvar :name)) compact  empty? "]}," Fog AWS Elasticache Real describe_cache_security_groups":{"type":"method","name":"describe_cache_security_groups","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeCacheSecurityGroups\")) merge ","Fog Parsers AWS Elasticache DescribeSecurityGroups  new ","options [] "]}," Fog AWS Elasticache Mock describe_cache_parameters":{"type":"method","name":"describe_cache_parameters","children":[],"call":["Fog Mock  not_implemented "]}," Fog AWS Elasticache Real describe_cache_parameters":{"type":"method","name":"describe_cache_parameters","children":[],"call":[" request ","Fog Parsers AWS Elasticache DescribeCacheParameters  new ","options [] "]}," Fog AWS Elasticache Mock describe_cache_parameter_groups":{"type":"method","name":"describe_cache_parameter_groups","children":[],"call":["response body= ","response status= "," data [] values "," data [] "," data "," raise ","Fog AWS Elasticache NotFound  new ","parameter_set << "," data [] [] ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "," data [] values  << "]}," Fog AWS Elasticache Real describe_cache_parameter_groups":{"type":"method","name":"describe_cache_parameter_groups","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeCacheParameterGroups\")) merge ","Fog Parsers AWS Elasticache DescribeParameterGroups  new ","options [] "]}," Fog AWS Elasticache Mock describe_cache_clusters":{"type":"method","name":"describe_cache_clusters","children":[],"call":["response body= ","Fog AWS Mock  request_id "," raise ","all_clusters empty? ","id != ","cluster merge! ","DateTime  now - ","DateTime  now ","options [] "," data [] values map "," data [] values "," data [] "," data ","Excon Response  new ","Excon Response  new  body= "]}," Fog AWS Elasticache Real describe_cache_clusters":{"type":"method","name":"describe_cache_clusters","children":[],"call":[" request ","Fog Parsers AWS Elasticache DescribeCacheClusters  new ","options [] "]}," Fog AWS Elasticache Mock delete_cache_subnet_group":{"type":"method","name":"delete_cache_subnet_group","children":[],"call":[" raise ","Fog AWS Elasticache NotFound  new ","Excon Response  new ","Fog AWS Mock  request_id "," data [] delete "," data [] "," data "]}," Fog AWS Elasticache Real delete_cache_subnet_group":{"type":"method","name":"delete_cache_subnet_group","children":[],"call":[" request ","Fog Parsers AWS Elasticache Base  new "]}," Fog AWS Elasticache Mock delete_cache_security_group":{"type":"method","name":"delete_cache_security_group","children":[],"call":[" raise ","Fog AWS RDS NotFound  new ","Excon Response  new ","Fog AWS Mock  request_id "," data [] delete "," data [] "," data "]}," Fog AWS Elasticache Real delete_cache_security_group":{"type":"method","name":"delete_cache_security_group","children":[],"call":[" request ","Fog Parsers AWS Elasticache Base  new "]}," Fog AWS Elasticache Mock delete_cache_parameter_group":{"type":"method","name":"delete_cache_parameter_group","children":[],"call":[" raise ","Fog AWS Elasticache NotFound  new ","response body= ","Fog AWS Mock  request_id ","response status= "," data [] delete "," data [] "," data ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Elasticache Real delete_cache_parameter_group":{"type":"method","name":"delete_cache_parameter_group","children":[],"call":[" request ","Fog Parsers AWS Elasticache Base  new "]}," Fog AWS Elasticache Mock delete_cache_cluster":{"type":"method","name":"delete_cache_cluster","children":[],"call":[" data [] delete "," data [] "," data ","response body= ","Fog AWS Mock  request_id "," data [] values ","cluster []= "," data [] [] ","Excon Response  new ","Excon Response  new  body= "," data [] []  []= "]}," Fog AWS Elasticache Real delete_cache_cluster":{"type":"method","name":"delete_cache_cluster","children":[],"call":[" request ","Fog Parsers AWS Elasticache DescribeCacheClusters  new "]}," Fog AWS Elasticache Mock create_cache_subnet_group":{"type":"method","name":"create_cache_subnet_group","children":[],"call":["response body= ","Fog AWS Mock  request_id "," data [] []= "," data [] "," data ","subnets first vpc_id ","subnets first ","subnets get ","subnet_ids map ","collection subnets ","collection region= ","Fog Compute  [] "," raise ","Fog AWS Elasticache IdentifierTaken  new "," data [] [] ","Excon Response  new ","Excon Response  new  body= ","subnets first subnets first vpc_id  ","collection subnets  first vpc_id ","collection subnets  first ","collection subnets  get ","collection collection subnets  ","Fog Compute  []  subnets ","Fog Compute  []  region= "]}," Fog AWS Elasticache Real create_cache_subnet_group":{"type":"method","name":"create_cache_subnet_group","children":[],"call":[" request ","params merge! ","Fog AWS  indexed_param "," Array ","Fog Parsers AWS Elasticache CreateCacheSubnetGroup  new "]}," Fog AWS Elasticache Mock create_cache_security_group":{"type":"method","name":"create_cache_security_group","children":[],"call":["Excon Response  new ","Fog AWS Mock  request_id "," data [] []= "," data [] "," data "," raise ","Fog AWS Elasticache IdentifierTaken  new "," data [] [] "]}," Fog AWS Elasticache Real create_cache_security_group":{"type":"method","name":"create_cache_security_group","children":[],"call":[" request ","Fog Parsers AWS Elasticache SingleSecurityGroup  new "]}," Fog AWS Elasticache Mock create_cache_parameter_group":{"type":"method","name":"create_cache_parameter_group","children":[],"call":["response status= ","response body= ","Fog AWS Mock  request_id "," data [] []= "," data [] "," data ","family downcase "," raise ","Fog AWS Elasticache IdentifierTaken  new "," data [] [] ","Excon Response  new ","Excon Response  new  status= ","Excon Response  new  body= "]}," Fog AWS Elasticache Real create_cache_parameter_group":{"type":"method","name":"create_cache_parameter_group","children":[],"call":[" request ","Fog Parsers AWS Elasticache SingleParameterGroup  new "]}," Fog AWS Elasticache Mock create_cache_cluster":{"type":"method","name":"create_cache_cluster","children":[],"call":["response body= ","Fog AWS Mock  request_id ","cluster merge "," data [] []= "," data [] "," data ","options [] "," create_cache_nodes ","id strip ","Excon Response  new ","Excon Response  new  body= "]}," Fog AWS Elasticache Real create_cache_cluster":{"type":"method","name":"create_cache_cluster","children":[],"call":[" request ","req_options merge! ","Fog AWS  indexed_param ","options delete ","Fog Parsers AWS Elasticache SingleCacheCluster  new ","options [] ","id strip "]}," Fog AWS Elasticache Mock authorize_cache_security_group_ingress":{"type":"method","name":"authorize_cache_security_group_ingress","children":[],"call":[" raise ","Fog AWS Elasticache NotFound  new ","Excon Response  new ","Fog AWS Mock  request_id ","sec_group [] << ","opts merge ","sec_group [] ","Fog AWS Elasticache AuthorizationAlreadyExists  new ","opts [] ","h [] == ","h [] ","sec_group [] find "," data [] [] "," data [] "," data "," data [] []  [] << "," data [] []  [] "," data [] []  [] find "]}," Fog AWS Elasticache Real authorize_cache_security_group_ingress":{"type":"method","name":"authorize_cache_security_group_ingress","children":[],"call":[" request ","Fog Parsers AWS Elasticache SingleSecurityGroup  new "]}," Fog AWS DynamoDB Real update_table":{"type":"method","name":"update_table","children":[],"call":[" request ","Fog JSON  encode "]}," Fog AWS DynamoDB Real update_item":{"type":"method","name":"update_item","children":[],"call":[" request ","Fog JSON  encode ","(pair\n  (str \"AttributeUpdates\")\n  (lvar :attribute_updates)) merge ","(pair\n  (str \"Key\")\n  (lvar :key)) merge "," raise ","deprecated_attribute_updates merge "]}," Fog AWS DynamoDB Real scan":{"type":"method","name":"scan","children":[],"call":[" request ","Fog JSON  encode ","(pair\n  (str \"TableName\")\n  (lvar :table_name)) merge "]}," Fog AWS DynamoDB Real query":{"type":"method","name":"query","children":[],"call":[" request ","Fog JSON  encode ","(pair\n  (str \"TableName\")\n  (lvar :table_name)) merge ","Fog Logger  deprecation ","(sym :S) include? ","options keys first to_sym ","options keys first ","options keys ","options keys length == ","options keys length "]}," Fog AWS DynamoDB Real put_item":{"type":"method","name":"put_item","children":[],"call":[" request ","Fog JSON  encode ","(pair\n  (str \"Item\")\n  (lvar :item)) merge "]}," Fog AWS DynamoDB Real list_tables":{"type":"method","name":"list_tables","children":[],"call":[" request ","Fog JSON  encode "]}," Fog AWS DynamoDB Real get_item":{"type":"method","name":"get_item","children":[],"call":[" request ","Fog JSON  encode ","(pair\n  (str \"Key\")\n  (lvar :key)) merge "]}," Fog AWS DynamoDB Real describe_table":{"type":"method","name":"describe_table","children":[],"call":[" request ","Fog JSON  encode "]}," Fog AWS DynamoDB Real delete_table":{"type":"method","name":"delete_table","children":[],"call":[" request ","Fog JSON  encode "]}," Fog AWS DynamoDB Real delete_item":{"type":"method","name":"delete_item","children":[],"call":[" request ","Fog JSON  encode ","(pair\n  (str \"Key\")\n  (lvar :key)) merge "]}," Fog AWS DynamoDB Real create_table":{"type":"method","name":"create_table","children":[],"call":[" request ","Fog JSON  encode "]}," Fog AWS DynamoDB Real batch_write_item":{"type":"method","name":"batch_write_item","children":[],"call":[" request ","Fog JSON  encode "]}," Fog AWS DynamoDB Real batch_put_item":{"type":"method","name":"batch_put_item","children":[],"call":[" batch_write_item ","Fog Logger  deprecation "]}," Fog AWS DynamoDB Real batch_get_item":{"type":"method","name":"batch_get_item","children":[],"call":[" request ","Fog JSON  encode "]}," Fog DNS AWS Mock list_resource_record_sets":{"type":"method","name":"list_resource_record_sets","children":[],"call":["response body []= ","next_record [] ","response body ","response body= ","(pair\n  (str \"ResourceRecords\")\n  (send\n    (lvar :r) :[]\n    (sym :resource_records))) merge ","r [] ","r [] [] ","records map ","response status= ","next_record nil? ! ","next_record nil? ","records [] "," require ","r [] gsub >= ","r [] gsub ","zone [] ","records select ","options [] gsub ","options [] ","a [] gsub <=> ","b [] gsub ","b [] ","a [] gsub ","a [] ","records sort! ","(send\n  (send\n    (send\n      (lvar :zone) :[]\n      (sym :records)) :values) :map) flatten ","r values ","zone [] values map ","zone [] values ","records_type values ","zone [] [] "," raise ","Excon Errors  status_error ","Fog AWS Mock  request_id ","zone nil? "," data [] [] "," data [] "," data ","Excon Response  new ","(or\n  (send\n    (lvar :options) :[]\n    (sym :max_items))\n  (int 100)) min ","Fog DNS AWS NotFound  new "," list_all_records ","records each ","Excon Response  new  body []= ","records []  [] ","Excon Response  new  body ","Excon Response  new  body= ","(pair\n  (str \"ResourceRecords\")\n  (send\n    (lvar :r) :[]\n    (sym :resource_records [] ))) merge ","(pair\n  (str \"ResourceRecords\")\n  (send\n    (lvar :r) :[]\n    (sym :resource_(send\n  (send\n    (send\n      (lvar :zone) :[]\n      (sym :records)) :values) :map) flatten ))) merge ","records []  map ","(send\n  (send\n    (send\n      (lvar :zone) :[]\n      (sym :records)) :values) :map) flatten  map ","Excon Response  new  status= ","records []  nil? ! ","records []  nil? ","(send\n  (send\n    (send\n      (lvar :zone) :[]\n      (sym :records)) :values) :map) flatten  [] "," data [] []  [] ","records []  select ","(send\n  (send\n    (send\n      (lvar :zone) :[]\n      (sym :records)) :values) :map) flatten  select ","records []  sort! ","(send\n  (send\n    (send\n      (lvar :zone) :[]\n      (sym :records)) :values) :map) flatten  sort! ","(send\n  (send\n    (send\n      (lvar :zone) :[]\n      (sym :records [] )) :values) :map) flatten ","(send\n  (send\n    (send\n      (lvar :zone) :[]\n      (sym :(send\n  (send\n    (send\n      (lvar :zone) :[]\n      (sym :records)) :values) :map) flatten )) :values) :map) flatten ","(send\n  (send\n    (send\n      (lvar : data [] [] ) :[]\n      (sym :records)) :values) :map) flatten "," data [] []  [] values map "," data [] []  [] values ","records [] _type values ","(send\n  (send\n    (send\n      (lvar :zone) :[]\n      (sym :records)) :values) :map) flatten _type values ","zone [] []  values "," data [] []  [] [] "," data [] []  nil? "," list_all_records []  "," list_all_(send\n  (send\n    (send\n      (lvar :zone) :[]\n      (sym :records)) :values) :map) flatten  ","records []  each ","(send\n  (send\n    (send\n      (lvar :zone) :[]\n      (sym :records)) :values) :map) flatten  each "]}," Fog DNS AWS Real list_resource_record_sets":{"type":"method","name":"list_resource_record_sets","children":[],"call":[" request ","Fog Parsers DNS AWS ListResourceRecordSets  new ","parameters []= ","options each ","zone_id sub ","zone_id sub  sub "]}," Fog DNS AWS Mock list_hosted_zones":{"type":"method","name":"list_hosted_zones","children":[],"call":["response body []= ","next_zone [] ","response body ","response body= ","options [] to_s ","options [] ","z [] ","zones map ","response status= ","Excon Response  new ","next_zone nil? ! ","next_zone nil? "," data [] values [] ","start + "," data [] values "," data [] "," data ","z [] == "," data [] find_index ","options [] nil? ","(or\n  (send\n    (lvar :options) :[]\n    (sym :max_items))\n  (int 100)) min ","Excon Response  new  body []= "," data [] values []  [] ","Excon Response  new  body ","Excon Response  new  body= "," data [] values []  map ","Excon Response  new  status= "," data [] values []  nil? ! "," data [] values []  nil? "]}," Fog DNS AWS Real list_hosted_zones":{"type":"method","name":"list_hosted_zones","children":[],"call":[" request ","Fog Parsers DNS AWS ListHostedZones  new ","parameters []= ","options each "]}," Fog DNS AWS Real list_health_checks":{"type":"method","name":"list_health_checks","children":[],"call":[" request ","Fog Parsers DNS AWS ListHealthChecks  new "]}," Fog DNS AWS Mock get_hosted_zone":{"type":"method","name":"get_hosted_zone","children":[],"call":[" raise ","Excon Errors  status_error ","response body= ","Fog AWS Mock  request_id ","response status= ","Fog AWS Mock  nameservers ","zone [] "," data [] [] "," data [] "," data ","Excon Response  new ","Fog DNS AWS NotFound  new ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  [] "]}," Fog DNS AWS Real get_hosted_zone":{"type":"method","name":"get_hosted_zone","children":[],"call":[" request ","Fog Parsers DNS AWS GetHostedZone  new ","zone_id sub ","zone_id sub  sub "]}," Fog DNS AWS Real get_health_check":{"type":"method","name":"get_health_check","children":[],"call":[" request ","Fog Parsers DNS AWS HealthCheck  new "]}," Fog DNS AWS Mock get_change":{"type":"method","name":"get_change","children":[],"call":[" raise ","Excon Errors  status_error ","response body= ","Fog AWS Mock  request_id ","response status= ","change [] ","(send\n  (lvar :submitted_at) :+\n  (send\n    (const\n      (const nil :Fog) :Mock) :delay)) < ","Time  now ","submitted_at + ","Fog Mock  delay ","Time  parse "," data [] [] "," data [] "," data ","Excon Response  new ","Fog DNS AWS NotFound  new ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  [] ","(send\n  (lvar :Time  parse ) :+\n  (send\n    (const\n      (const nil :Fog) :Mock) :delay)) < ","Time  parse  + "]}," Fog DNS AWS Real get_change":{"type":"method","name":"get_change","children":[],"call":[" request ","Fog Parsers DNS AWS GetChange  new ","change_id sub ","change_id sub  sub "]}," Fog DNS AWS Mock delete_hosted_zone":{"type":"method","name":"delete_hosted_zone","children":[],"call":[" raise ","Excon Errors  status_error ","response body= ","Fog AWS Mock  request_id ","response status= "," data [] delete "," data [] "," data ","change [] "," data [] []= ","Time  now utc iso8601 ","Time  now utc ","Time  now ","Fog AWS Mock  change_id "," data [] [] nil? ! "," data [] [] nil? "," data [] [] ","(lvar :zone_id) find ","Excon Response  new ","Fog DNS AWS NotFound  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog DNS AWS Real delete_hosted_zone":{"type":"method","name":"delete_hosted_zone","children":[],"call":[" request ","Fog Parsers DNS AWS DeleteHostedZone  new ","zone_id sub ","zone_id sub  sub "]}," Fog DNS AWS Real delete_health_check":{"type":"method","name":"delete_health_check","children":[],"call":[" request "]}," Fog DNS AWS Mock create_hosted_zone":{"type":"method","name":"create_hosted_zone","children":[],"call":[" raise ","Excon Errors  status_error ","response body= ","Fog AWS Mock  request_id ","response status= ","Fog AWS Mock  nameservers ","change [] ","options [] "," data [] []= "," data [] "," data ","Time  now utc iso8601 ","Time  now utc ","Time  now ","Fog AWS Mock  change_id ","Fog AWS Mock  zone_id "," rand to_s "," rand ","(send\n  (send\n    (send\n      (send nil :list_hosted_zones) :body) :[]\n    (str \"HostedZones\")) :select) size < "," data [] [] ","(send\n  (send\n    (send\n      (send nil :list_hosted_zones) :body) :[]\n    (str \"HostedZones\")) :select) size ","z [] == ","z [] "," list_hosted_zones body [] select "," list_hosted_zones body [] "," list_hosted_zones body "," list_hosted_zones ","Excon Response  new ","name + ","name end_with? ","Fog DNS AWS Error  new ","Excon Response  new  body= ","Excon Response  new  status= ","Fog AWS Mock  name + servers ","name +  + ","name +  end_with? "]}," Fog DNS AWS Real create_hosted_zone":{"type":"method","name":"create_hosted_zone","children":[],"call":[" request ","Fog Parsers DNS AWS CreateHostedZone  new ","options [] "," rand to_s "," rand "]}," Fog DNS AWS Real create_health_check":{"type":"method","name":"create_health_check","children":[],"call":[" request ","Fog Parsers DNS AWS HealthCheck  new ","builder to_xml to_s ","builder to_xml ","xml FailureThreshold ","options [] ","options has_key? ","xml RequestInterval ","xml SearchString ","xml FullyQualifiedDomainName ","xml ResourcePath ","xml Type ","xml Port ","xml IPAddress ","ip_address nil? ","xml HealthCheckConfig ","xml CallerReference ","SecureRandom  hex ","Time  now to_i to_s ","Time  now to_i ","Time  now ","xml CreateHealthCheckRequest ","Nokogiri XML Builder  new "]}," Fog DNS AWS elb_hosted_zone_mapping":{"type":"method","name":"elb_hosted_zone_mapping","children":[],"call":[]}," Fog DNS AWS hosted_zone_for_alias_target":{"type":"method","name":"hosted_zone_for_alias_target","children":[],"call":[]}," Fog DNS AWS Mock change_resource_record_sets":{"type":"method","name":"change_resource_record_sets","children":[],"call":[" raise ","Excon Errors  status_error ","response body= ","Fog AWS Mock  request_id ","response status= ","(send\n  (lvar :errors) :map) join ","errors map ","change [] "," data [] []= "," data [] "," data ","Time  now utc iso8601 ","Time  now utc ","Time  now ","errors empty? ","errors << ","zone [] [] delete nil? ","zone [] [] delete ","zone [] [] ","zone [] ","zone [] [] nil? ","zone [] [] []= ","(pair\n  (sym :change_id)\n  (lvar :change_id)) merge ","change [] to_s ","zone [] [] [] nil? ","zone [] [] [] ","zone [] []= ","change_batch each ","Fog AWS Mock  change_id "," data [] [] ","Excon Response  new ","Fog DNS AWS NotFound  new ","Fog DNS AWS Error  new ","errors join ","change_name + ","change_name end_with? ","action_performed ! ","zone [] [] nil? ! ","zone [] [] [] empty? ","zone [] [] [] delete nil? ","zone [] [] [] delete ","SET_PREFIX  + ","change [] nil? ! ","change [] nil? ","zone [] [] [] nil? ! ","zone [] [] [] []= "," record_exist? ! "," record_exist? ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  [] [] delete nil? "," data [] []  [] [] delete "," data [] []  [] [] "," data [] []  [] "," data [] []  [] [] nil? "," data [] []  [] [] []= ","(pair\n  (sym :Fog AWS Mock  change_id )\n  (lvar :Fog AWS Mock  change_id )) merge "," data [] []  [] [] [] nil? "," data [] []  [] [] [] "," data [] []  [] []= ","Fog AWS Mock  Fog AWS Mock  change_id  ","change_name +  + ","change []  + ","change_name +  end_with? ","change []  end_with? "," data [] []  [] [] nil? ! "," data [] []  [] [] [] empty? "," data [] []  [] [] [] delete nil? "," data [] []  [] [] [] delete "," data [] []  [] [] [] nil? ! "," data [] []  [] [] [] []= "]}," Fog DNS AWS Real change_resource_record_sets":{"type":"method","name":"change_resource_record_sets","children":[],"call":[" request ","Fog Parsers DNS AWS ChangeResourceRecordSets  new ","change_item [] ","evaluate_target_health nil? ! ","evaluate_target_health nil? ","change_item [] [] ","AWS  hosted_zone_for_alias_target ","resource_records any? ","resource_records each ","change_batch each ","change_batch count > ","change_batch count ","options each ","zone_id sub ","AWS  change_resource_record_sets_data ","zone_id sub  sub "]}," Fog AWS DataPipeline Mock query_objects":{"type":"method","name":"query_objects","children":[],"call":["Fog Mock  not_implemented ","response body= "," find_pipeline ","Excon Response  new ","Excon Response  new  body= "]}," Fog AWS DataPipeline Real query_objects":{"type":"method","name":"query_objects","children":[],"call":["Fog JSON  decode ","response body "," request ","Fog JSON  encode ","params []= ","options [] "," request  body "]}," Fog AWS DataPipeline Mock put_pipeline_definition":{"type":"method","name":"put_pipeline_definition","children":[],"call":["Fog Mock  not_implemented ","response body= "," data [] []= "," data [] "," data ","stringified_objects is_a? ","options []= "," transform_objects "," stringify_keys ","options each ","pipeline_objects any? "," find_pipeline ","_options dup ","Excon Response  new ","Excon Response  new  body= "," transform_objects  is_a? ","_options dup  []= ","_options dup  each "," find_pipeline _objects any? "," find_ find_pipeline  ","__options dup  dup "]}," Fog AWS DataPipeline Real JSONObject field_for_kv":{"type":"method","name":"field_for_kv","children":[],"call":[" field_for_kv ","value map ","value is_a? ","value [] "]}," Fog AWS DataPipeline Real JSONObject fields":{"type":"method","name":"fields","children":[],"call":["(send\n  (ivar :@json_fields) :map) flatten "," field_for_kv ","@json_fields map "]}," Fog AWS DataPipeline Real JSONObject to_api":{"type":"method","name":"to_api","children":[],"call":[" fields "]}," Fog AWS DataPipeline Real JSONObject initialize":{"type":"method","name":"initialize","children":[],"call":["@json_fields delete ","object clone ","object clone  delete "]}," Fog AWS DataPipeline Real transform_objects":{"type":"method","name":"transform_objects","children":[],"call":["JSONObject  new to_api ","JSONObject  new ","objects map "]}," Fog AWS DataPipeline Real put_pipeline_definition":{"type":"method","name":"put_pipeline_definition","children":[],"call":["Fog JSON  decode ","response body "," request ","Fog JSON  encode "," transform_objects ","(pair\n  (str \"pipelineId\")\n  (lvar :id)) merge "," request  body "]}," Fog AWS DataPipeline Mock list_pipelines":{"type":"method","name":"list_pipelines","children":[],"call":["Fog Mock  not_implemented ","response body= ","p [] "," data [] values map "," data [] values "," data [] "," data ","Excon Response  new ","Excon Response  new  body= "]}," Fog AWS DataPipeline Real list_pipelines":{"type":"method","name":"list_pipelines","children":[],"call":["Fog JSON  decode ","response body "," request ","Fog JSON  encode ","params []= ","options [] "," request  body "]}," Fog AWS DataPipeline Mock get_pipeline_definition":{"type":"method","name":"get_pipeline_definition","children":[],"call":["Fog Mock  not_implemented ","response body= "," data [] [] "," data [] "," data "," find_pipeline ","Excon Response  new ","Excon Response  new  body= "," find_ find_pipeline  "]}," Fog AWS DataPipeline Real get_pipeline_definition":{"type":"method","name":"get_pipeline_definition","children":[],"call":["Fog JSON  decode ","response body "," request ","Fog JSON  encode "," request  body "]}," Fog AWS DataPipeline Mock describe_pipelines":{"type":"method","name":"describe_pipelines","children":[],"call":["Fog Mock  not_implemented ","response body= ","ids include? ","p [] ","p [] ! "," data [] values select "," data [] values "," data [] "," data ","Excon Response  new ","Excon Response  new  body= "]}," Fog AWS DataPipeline Real describe_pipelines":{"type":"method","name":"describe_pipelines","children":[],"call":["Fog JSON  decode ","response body "," request ","Fog JSON  encode ","params []= "," request  body "]}," Fog AWS DataPipeline Mock describe_objects":{"type":"method","name":"describe_objects","children":[],"call":["Fog Mock  not_implemented ","response body= ","options [] ","objects include? ","o [] "," data [] [] [] select "," data [] [] [] "," data [] [] "," data [] "," data "," find_pipeline ","Excon Response  new ","Excon Response  new  body= "]}," Fog AWS DataPipeline Real describe_objects":{"type":"method","name":"describe_objects","children":[],"call":["Fog JSON  decode ","response body "," request ","Fog JSON  encode ","options merge "," request  body "]}," Fog AWS DataPipeline Mock delete_pipeline":{"type":"method","name":"delete_pipeline","children":[],"call":["Fog Mock  not_implemented ","pipeline []= "," find_pipeline ","Excon Response  new "," find_pipeline  []= "," find_ find_pipeline  "]}," Fog AWS DataPipeline Real delete_pipeline":{"type":"method","name":"delete_pipeline","children":[],"call":["200 == ","response status "," request ","Fog JSON  encode "," request  status "]}," Fog AWS DataPipeline Mock create_pipeline":{"type":"method","name":"create_pipeline","children":[],"call":["Fog Mock  not_implemented ","response body= "," data [] []= "," data [] "," data ","v to_s ","k to_s ","tags map ","Fog AWS Mock  data_pipeline_id ","existing_pipeline [] "," data [] [] ","Excon Response  new ","Excon Response  new  body= ","Fog AWS Mock  data_Fog AWS Mock  data_pipeline_id  "," data [] []  [] "]}," Fog AWS DataPipeline Real create_pipeline":{"type":"method","name":"create_pipeline","children":[],"call":["Fog JSON  decode ","response body "," request ","Fog JSON  encode ","params []= ","v to_s ","k to_s ","tags map ","tags empty? ","tags nil? "," request  body "]}," Fog AWS DataPipeline Mock activate_pipeline":{"type":"method","name":"activate_pipeline","children":[],"call":["Fog Mock  not_implemented ","response body= ","pipeline []= "," find_pipeline ","Excon Response  new ","Excon Response  new  body= "," find_pipeline  []= "," find_ find_pipeline  "]}," Fog AWS DataPipeline Real activate_pipeline":{"type":"method","name":"activate_pipeline","children":[],"call":["Fog JSON  decode ","response body "," request ","Fog JSON  encode "," request  body "]}," Fog Compute AWS Mock unmonitor_instances":{"type":"method","name":"unmonitor_instances","children":[],"call":["response body= ","memo << ","(splat\n  (lvar :instance_ids)) reduce "," raise ","Fog Compute AWS NotFound  new ","instance [] []= ","instance [] "," data [] [] "," data [] "," data ","(splat\n  (lvar :instance_ids)) each ","response status= ","Excon Response  new ","Excon Response  new  body= ","(splat\n  (lvar : data [] [] _ids)) reduce "," data [] []  [] []= "," data [] []  [] ","(splat\n  (lvar : data [] [] _ids)) each ","Excon Response  new  status= "]}," Fog Compute AWS Real unmonitor_instances":{"type":"method","name":"unmonitor_instances","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"UnmonitorInstances\")) merge! ","Fog Parsers Compute AWS MonitorUnmonitorInstances  new ","Fog AWS  indexed_param "]}," Fog Compute AWS Mock terminate_instances":{"type":"method","name":"terminate_instances","children":[],"call":[" raise ","Fog Compute AWS NotFound  new "," detach_volume ","volume [] ","instance_id include? ","volume [] first [] ","volume [] first "," describe_volumes body [] each "," describe_volumes body [] "," describe_volumes body "," describe_volumes "," disassociate_address ","address [] "," describe_addresses body [] each "," describe_addresses body [] "," describe_addresses body "," describe_addresses ","instance []= ","response body [] << ","instance [] ","response body [] ","response body ","instance [] [] "," data [] []= ","Time  now "," data [] "," data "," data [] [] ","response status= ","response body= ","Fog AWS Mock  request_id ","(send\n  (send\n    (send\n      (send\n        (self) :data) :[]\n      (sym :instances)) :keys) :&\n  (lvar :instance_id)) length == ","instance_id length ","(send\n  (send\n    (send\n      (send\n        (self) :data) :[]\n      (sym :instances)) :keys) :&\n  (lvar :instance_id)) length "," data [] keys & "," data [] keys ","Excon Response  new "," data [] [] _id include? "," data [] []  []= ","Excon Response  new  body [] << "," data [] []  [] ","Excon Response  new  body [] ","Excon Response  new  body "," data [] []  [] [] ","Excon Response  new  status= ","Excon Response  new  body= ","(send\n  (send\n    (send\n      (send\n        (self) :data) :[]\n      (sym : data [] [] s)) :keys) :&\n  (lvar : data [] [] _id)) length == "," data [] [] _id length ","(send\n  (send\n    (send\n      (send\n        (self) :data) :[]\n      (sym : data [] [] s)) :keys) :&\n  (lvar : data [] [] _id)) length "]}," Fog Compute AWS Real terminate_instances":{"type":"method","name":"terminate_instances","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"TerminateInstances\")) merge! ","Fog Parsers Compute AWS TerminateInstances  new ","Fog AWS  indexed_param "]}," Fog Compute AWS Mock stop_instances":{"type":"method","name":"stop_instances","children":[],"call":["response body= ","instance []= ","ia << ","instance [] ","instance_set reduce ","response status= ","Excon Response  new "," raise ","Fog Compute AWS NotFound  new ","instance_ids first ","instance_set empty? ","instance_ids include? ","x [] ","instance_set select "," apply_tag_filters "," data [] values "," data [] "," data "," Array ","Fog AWS Mock  request_id ","Excon Response  new  body= "," apply_tag_filters  reduce "," data [] values  reduce ","Excon Response  new  status= "," Array  first "," apply_tag_filters  empty? "," data [] values  empty? "," Array  include? "," apply_tag_filters  select "," data [] values  select "]}," Fog Compute AWS Real stop_instances":{"type":"method","name":"stop_instances","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"StopInstances\")) merge! ","Fog Parsers Compute AWS StartStopInstances  new ","params merge! ","Fog AWS  indexed_param ","Fog AWS  indexed_param  merge! "]}," Fog Compute AWS Mock start_instances":{"type":"method","name":"start_instances","children":[],"call":["response body= ","instance []= ","ia << ","instance [] ","instance_set reduce ","response status= ","Excon Response  new "," raise ","Fog Compute AWS NotFound  new ","instance_ids first ","instance_set empty? ","instance_ids include? ","x [] ","instance_set select "," apply_tag_filters "," data [] values "," data [] "," data "," Array ","Fog AWS Mock  request_id ","Excon Response  new  body= "," apply_tag_filters  reduce "," data [] values  reduce ","Excon Response  new  status= "," Array  first "," apply_tag_filters  empty? "," data [] values  empty? "," Array  include? "," apply_tag_filters  select "," data [] values  select "]}," Fog Compute AWS Real start_instances":{"type":"method","name":"start_instances","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"StartInstances\")) merge! ","Fog Parsers Compute AWS StartStopInstances  new ","Fog AWS  indexed_param "]}," Fog Compute AWS Mock run_instances":{"type":"method","name":"run_instances","children":[],"call":["response body= ","Fog AWS Mock  request_id "," data [] "," data "," modify_network_interface_attribute "," attach_network_interface data [] [] "," attach_network_interface data [] "," attach_network_interface data "," attach_network_interface "," data [] [] []= ","(send\n  (send\n    (send\n      (self) :data) :[]\n    (sym :subnets)) :find) [] ","subnet [] == ","options [] ","subnet [] "," data [] find "," data [] [] "," data [] []= ","instance merge ","instances_set << ","block_device_mapping first [] ","block_device_mapping first ","Time  now ","Fog AWS Mock  kernel_id ","mapping << ","device fetch "," create_network_interface "," data [] [] [] ","Fog AWS Mock  private_ip_address ","Fog AWS Mock  subnet_id ","(or\n  (send\n    (lvar :options) :[]\n    (str \"NetworkInterfaces\"))\n  (array)) reduce "," create_network_interface body [] [] "," create_network_interface body [] "," create_network_interface body "," data [] [] merge! "," create_volume data [] [] "," create_volume data [] "," create_volume data "," create_volume ","(or\n  (send\n    (lvar :options) :[]\n    (str \"BlockDeviceMapping\"))\n  (array)) reduce ","Fog AWS Mock  availability_zone ","Fog AWS Mock  instance_id ","min_count times "," raise ","Fog Compute AWS NotFound  new "," describe_key_pairs body [] empty? "," describe_key_pairs body [] "," describe_key_pairs body "," describe_key_pairs ","Fog AWS Mock  reservation_id ","(begin\n  (or\n    (send\n      (lvar :options) :[]\n      (str \"SecurityGroup\"))\n    (str \"default\"))) flatten ","response status= ","Excon Response  new ","Excon Response  new  body= ","Fog AWS Mock  device fetch  ","Fog AWS Mock  Fog AWS Mock  instance_id  ","Fog AWS Mock  Fog AWS Mock  reservation_id  ","Excon Response  new  status= "]}," Fog Compute AWS Real run_instances":{"type":"method","name":"run_instances","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"RunInstances\")) merge! ","Fog Parsers Compute AWS RunInstances  new ","(or\n  (send\n    (send\n      (lvar :options) :[]\n      (str \"ClientToken\")) :nil?)\n  (send\n    (send\n      (lvar :options) :[]\n      (str \"ClientToken\")) :empty?)) ! ","options [] empty? ","options [] ","options [] nil? ","options merge! ","Fog AWS  indexed_param "," format ","network_interfaces each_with_index ","options delete ","options []= ","Base64  encode64 ","block_device_mapping each_with_index ","options delete  each_with_index "]}," Fog Compute AWS Mock revoke_security_group_ingress":{"type":"method","name":"revoke_security_group_ingress","children":[],"call":[" raise ","Fog Compute AWS NotFound  new ","response body= ","Fog AWS Mock  request_id ","response status= ","group [] delete ","group [] ","matching_permission [] empty? ","matching_permission [] ","permission [] "," find_matching_permission ","normalized_permissions each "," normalize_permissions "," verify_permission_options ","group [] != "," data [] [] "," data [] "," data ","Excon Response  new ","(send\n  (send\n    (send\n      (self) :data) :[]\n    (sym :security_groups)) :reject) keys first ","(send\n  (send\n    (send\n      (self) :data) :[]\n    (sym :security_groups)) :reject) keys ","v [] != ","options [] ","v [] "," data [] reject ","options key? ","Fog AWS  parse_security_group_options ","v [] == "," data [] values find "," data [] values ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  [] delete "," data [] []  [] "," find_matching_permission  [] empty? "," find_matching_permission  [] "," find_ find_matching_permission  "," normalize_permissions  each "," verify_permission_Fog AWS  parse_security_group_options  "," data [] []  [] != ","(send\n  (send\n    (send\n      (self) :data) :[]\n    (sym :security_ data [] [] s)) :reject) keys first ","(send\n  (send\n    (send\n      (self) :data) :[]\n    (sym :security_ data [] [] s)) :reject) keys ","Fog AWS  parse_security_group_options  [] ","Fog AWS  parse_security_group_options  key? ","Fog AWS  parse_security_ data [] [] _options ","Fog AWS  parse_security_group_Fog AWS  parse_security_group_options  "]}," Fog Compute AWS Real revoke_security_group_ingress":{"type":"method","name":"revoke_security_group_ingress","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"RevokeSecurityGroupIngress\")) merge! ","Fog Parsers Compute AWS Basic  new ","options merge! "," indexed_ip_permissions_params ","options delete ","Fog AWS  parse_security_group_options ","Fog AWS  parse_security_group_options  merge! "," indexed_options delete _params ","Fog AWS  parse_security_group_options  delete ","Fog AWS  parse_security_group_Fog AWS  parse_security_group_options  "]}," Fog Compute AWS Mock reset_network_interface_attribute":{"type":"method","name":"reset_network_interface_attribute","children":[],"call":[" raise ","Fog Compute AWS NotFound  new ","Fog Compute AWS Error  new "," data [] [] []= "," data [] [] "," data [] "," data ","attribute == ","response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Compute AWS Real reset_network_interface_attribute":{"type":"method","name":"reset_network_interface_attribute","children":[],"call":[" request ","Fog Parsers Compute AWS Basic  new "," raise ","Fog Compute AWS Error  new ","attribute != "]}," Fog Compute AWS Real request_spot_instances":{"type":"method","name":"request_spot_instances","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"RequestSpotInstances\")) merge! ","Fog Parsers Compute AWS SpotInstanceRequests  new ","options []= ","options [] iso8601 ","options [] ","options [] is_a? ","Base64  encode64 ","options merge! ","Fog AWS  indexed_param ","options delete "," format ","block_device_mapping each_with_index ","Base64  encode64 chomp! ","options delete  each_with_index "]}," Fog Compute AWS Mock replace_route":{"type":"method","name":"replace_route","children":[],"call":[" raise ","Fog Compute AWS InvalidParameterValue  new ","destination_cidr_block empty? ","Fog Compute AWS NotFound  new ","route_table nil? ","Fog Compute AWS Error  new ","message << ","response body= ","Fog AWS Mock  request_id ","response status= ","route_set []= ","route_set merge! ","routeset [] eql? ","routeset [] ","route_table [] find ","route_table [] ","Excon Response  new ","(send\n  (send\n    (lvar :route_table) :[]\n    (str \"routeSet\")) :find) nil? ","route [] eql? ","route [] ","options [] "," network_interfaces all first nil? "," network_interfaces all first "," network_interfaces all "," network_interfaces ","options [] nil? ! ","options [] nil? "," servers all first nil? "," servers all first "," servers all "," servers "," internet_gateways all first nil? "," internet_gateways all first "," internet_gateways all "," internet_gateways ","route_table nil? ! ","routetable [] eql? ","routetable [] "," data [] find "," data [] "," data ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Compute AWS Real replace_route":{"type":"method","name":"replace_route","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ReplaceRoute\")) merge! ","Fog Parsers Compute AWS Basic  new ","options [] "]}," Fog Compute AWS Mock replace_network_acl_entry":{"type":"method","name":"replace_network_acl_entry","children":[],"call":[" raise ","Fog Compute AWS NotFound  new ","response body= ","Fog AWS Mock  request_id ","response status= "," data [] [] [] << "," data [] [] [] "," data [] [] "," data [] "," data ","data [] []= ","options [] ","data [] ","r [] == ","r [] "," data [] [] [] delete_if ","Fog Compute AWS Error  new "," data [] [] [] find ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Compute AWS Real replace_network_acl_entry":{"type":"method","name":"replace_network_acl_entry","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ReplaceNetworkAclEntry\")) merge! ","Fog Parsers Compute AWS Basic  new "]}," Fog Compute AWS Mock replace_network_acl_association":{"type":"method","name":"replace_network_acl_association","children":[],"call":[" raise ","Fog Compute AWS NotFound  new ","response body= ","Fog AWS Mock  request_id ","response status= "," data [] [] [] << "," data [] [] [] "," data [] [] "," data [] "," data ","Fog AWS Mock  network_acl_association_id ","assoc [] == ","assoc [] ","old_nacl [] delete_if ","old_nacl [] ","(send\n  (send\n    (lvar :old_nacl) :[]\n    (str \"associationSet\")) :find) [] ","old_nacl [] find ","Fog Compute AWS Error  new ","n [] find ","n [] "," data [] values find "," data [] values ","Excon Response  new ","Excon Response  new  body= ","Fog AWS Mock  request_Fog AWS Mock  network_acl_association_id  ","Excon Response  new  status= ","Fog AWS Mock  network_acl_association_Fog AWS Mock  network_acl_association_id  "]}," Fog Compute AWS Real replace_network_acl_association":{"type":"method","name":"replace_network_acl_association","children":[],"call":[" request ","Fog Parsers Compute AWS ReplaceNetworkAclAssociation  new "]}," Fog Compute AWS Mock release_address":{"type":"method","name":"release_address","children":[],"call":[" raise ","Fog Compute AWS Error  new ","response body= ","Fog AWS Mock  request_id ","response status= "," data [] delete ","address [] "," data [] "," data ","public_ip_or_allocation_id == ","a [] == ","a [] "," data [] values find "," data [] values "," data [] [] ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Compute AWS Real release_address":{"type":"method","name":"release_address","children":[],"call":[" request ","Fog Parsers Compute AWS Basic  new ","ip_or_allocation to_s =~ ","ip_or_allocation to_s "]}," Fog Compute AWS Mock register_image":{"type":"method","name":"register_image","children":[],"call":["response body= ","image [] ","Fog AWS Mock  request_id ","response status= ","Excon Response  new "," data [] []= "," data [] "," data ","image [] << ","block_device_mapping [] []= ","bd [] ","block_device_mapping [] ","(str \"SnapshotId\") each ","block_device_mapping []= ","(str \"DeviceName\") each ","block_devices each ","image []= ","location [] ","Time  now ","Fog AWS Mock  ramdisk_id ","options [] ","Fog AWS Mock  kernel_id ","Fog AWS Mock  image_id "," raise ","Fog Compute AWS Error  new ","message << ","name empty? ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Compute AWS Real register_image":{"type":"method","name":"register_image","children":[],"call":[" request ","common_options merge! ","common_options []= ","bd [] ","(str \"SnapshotId\") each ","(str \"DeviceName\") each ","block_devices each_with_index ","location =~ ","Fog Parsers Compute AWS RegisterImage  new "]}," Fog Compute AWS Mock reboot_instances":{"type":"method","name":"reboot_instances","children":[],"call":[" raise ","Fog Compute AWS NotFound  new ","instance_id inspect ","response body= ","Fog AWS Mock  request_id ","response status= "," data [] [] []= "," data [] [] "," data [] "," data ","(send\n  (send\n    (send\n      (send\n        (self) :data) :[]\n      (sym :instances)) :keys) :&\n  (lvar :instance_id)) length == ","instance_id length ","(send\n  (send\n    (send\n      (send\n        (self) :data) :[]\n      (sym :instances)) :keys) :&\n  (lvar :instance_id)) length "," data [] keys & "," data [] keys ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Compute AWS Real reboot_instances":{"type":"method","name":"reboot_instances","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"RebootInstances\")) merge! ","Fog Parsers Compute AWS Basic  new ","Fog AWS  indexed_param "]}," Fog Compute AWS Mock purchase_reserved_instances_offering":{"type":"method","name":"purchase_reserved_instances_offering","children":[],"call":["response body= ","Fog AWS Mock  request_id "," data [] []= ","reserved_instance_offering merge ","Time  now "," data [] "," data ","reserved_instance_offering delete ","Fog AWS Mock  reserved_instances_id "," raise ","offering [] == ","offering [] "," describe_reserved_instances_offerings body [] find "," describe_reserved_instances_offerings body [] "," describe_reserved_instances_offerings body "," describe_reserved_instances_offerings ","response status= ","Excon Response  new ","Excon Response  new  body= ","Fog AWS Mock  Fog AWS Mock  reserved_instances_id  ","Excon Response  new  status= "]}," Fog Compute AWS Real purchase_reserved_instances_offering":{"type":"method","name":"purchase_reserved_instances_offering","children":[],"call":[" request ","Fog Parsers Compute AWS PurchaseReservedInstancesOffering  new "]}," Fog Compute AWS Mock monitor_instances":{"type":"method","name":"monitor_instances","children":[],"call":["response body= ","memo << ","(splat\n  (lvar :instance_ids)) reduce "," raise ","Fog Compute AWS NotFound  new ","instance [] []= ","instance [] "," data [] [] "," data [] "," data ","(splat\n  (lvar :instance_ids)) each ","response status= ","Excon Response  new ","Excon Response  new  body= ","(splat\n  (lvar : data [] [] _ids)) reduce "," data [] []  [] []= "," data [] []  [] ","(splat\n  (lvar : data [] [] _ids)) each ","Excon Response  new  status= "]}," Fog Compute AWS Real monitor_instances":{"type":"method","name":"monitor_instances","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"MonitorInstances\")) merge! ","Fog Parsers Compute AWS MonitorUnmonitorInstances  new ","Fog AWS  indexed_param "]}," Fog Compute AWS Mock modify_vpc_attribute":{"type":"method","name":"modify_vpc_attribute","children":[],"call":[" raise ","Fog Compute AWS NotFound  new ","Fog Compute AWS Error  new ","vpc []= ","options [] ","options keys first ","options keys ","response body= ","Fog AWS Mock  request_id ","response status= ","v [] == ","v [] "," data [] find "," data [] "," data ","options keys join ","options size > ","options size ","options size == ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Compute AWS Real modify_vpc_attribute":{"type":"method","name":"modify_vpc_attribute","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ModifyVpcAttribute\")) merge! ","Fog Parsers Compute AWS Basic  new "]}," Fog Compute AWS Mock modify_volume_attribute":{"type":"method","name":"modify_volume_attribute","children":[],"call":[" raise ","Fog Compute AWS NotFound  new ","response body= ","Fog AWS Mock  request_id ","response status= "," data [] [] "," data [] "," data ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Compute AWS Real modify_volume_attribute":{"type":"method","name":"modify_volume_attribute","children":[],"call":[" request ","Fog Parsers Compute AWS Basic  new "]}," Fog Compute AWS Mock modify_subnet_attribute":{"type":"method","name":"modify_subnet_attribute","children":[],"call":["response body= ","response status= ","Fog AWS Mock  request_id ","subnet []= ","options [] ","v [] == ","v [] "," data [] detect "," data [] "," data ","Excon Response  new tap ","Excon Response  new "]}," Fog Compute AWS Real modify_subnet_attribute":{"type":"method","name":"modify_subnet_attribute","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ModifySubnetAttribute\")) merge ","Fog Parsers Compute AWS ModifySubnetAttribute  new ","params []= ","options delete ","options [] "]}," Fog Compute AWS Real modify_snapshot_attribute":{"type":"method","name":"modify_snapshot_attribute","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ModifySnapshotAttribute\")) merge! ","Fog Parsers Compute AWS Basic  new ","params merge! ","Fog AWS  indexed_param ","attributes [] "]}," Fog Compute AWS Mock modify_network_interface_attribute":{"type":"method","name":"modify_network_interface_attribute","children":[],"call":[" raise ","Fog Compute AWS NotFound  new ","response body= ","Fog AWS Mock  request_id ","response status= ","Fog Compute AWS Error  new ","nic [] []= ","value [] ","nic [] ","value [] != ","nic [] [] ","nic [] nil? ","nic []= ","groups []= ","name nil? ","(send\n  (send\n    (send\n      (self) :data) :[]\n    (sym :security_groups)) :select) first first ","(send\n  (send\n    (send\n      (self) :data) :[]\n    (sym :security_groups)) :select) first ","v [] == ","v [] "," data [] select "," data [] "," data ","value each ","value clone "," data [] [] ","Excon Response  new ","security_group [] ","security_group nil? ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  [] []= "," data [] []  [] "," data [] []  [] [] "," data [] []  [] nil? "," data [] []  []= ","(send\n  (send\n    (send\n      (self) :data) :[]\n    (sym :security_groups)) :select) first first  nil? ","(send\n  (send\n    (send\n      (self) :data) :[]\n    (sym : data [] [] s)) :select) first first ","(send\n  (send\n    (send\n      (self) :data) :[]\n    (sym : data [] [] s)) :select) first "," data [] []  nil? "]}," Fog Compute AWS Real modify_network_interface_attribute":{"type":"method","name":"modify_network_interface_attribute","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ModifyNetworkInterfaceAttribute\")) merge! ","Fog Parsers Compute AWS Basic  new "," raise ","Fog Compute AWS Error  new ","params []= ","value [] ","params merge! ","Fog AWS  indexed_param "]}," Fog Compute AWS Real modify_instance_attributes":{"type":"method","name":"modify_instance_attributes","children":[],"call":[" modify_instance_attribute ","Fog Logger  deprecation "]}," Fog Compute AWS Real modify_instance_attribute":{"type":"method","name":"modify_instance_attribute","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ModifyInstanceAttribute\")) merge! ","Fog Parsers Compute AWS Basic  new ","params merge! ","Fog AWS  indexed_param ","attributes delete "]}," Fog Compute AWS Mock modify_image_attribute":{"type":"method","name":"modify_image_attribute","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new ","image_launch_permissions [] delete ","image_launch_permissions [] "," data [] [] "," data [] "," data ","(or\n  (send\n    (lvar :attributes) :[]\n    (str \"Remove.UserId\"))\n  (array)) each ","attributes [] ","image_launch_permissions [] push ","(or\n  (send\n    (lvar :attributes) :[]\n    (str \"Add.UserId\"))\n  (array)) each "," raise ","Fog Compute AWS NotFound  new ","ArgumentError  new ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  [] delete "," data [] []  [] "," data [] []  [] push "]}," Fog Compute AWS Real modify_image_attribute":{"type":"method","name":"modify_image_attribute","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ModifyImageAttribute\")) merge! ","Fog Parsers Compute AWS Basic  new ","params merge! ","Fog AWS  indexed_param ","attributes [] "," raise ","ArgumentError  new "]}," Fog Compute AWS Mock import_key_pair":{"type":"method","name":"import_key_pair","children":[],"call":["response body= ","(pair\n  (str \"requestId\")\n  (send\n    (const\n      (const\n        (const nil :Fog) :AWS) :Mock) :request_id)) merge! ","Fog AWS Mock  request_id "," data [] []= "," data [] "," data ","Fog AWS Mock  key_fingerprint ","response status= "," raise ","Fog Compute AWS Error  new "," data [] [] ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Compute AWS Real import_key_pair":{"type":"method","name":"import_key_pair","children":[],"call":[" request ","Fog Parsers Compute AWS ImportKeyPair  new ","Base64  encode64 "]}," Fog Compute AWS Mock get_password_data":{"type":"method","name":"get_password_data","children":[],"call":[" raise ","Fog Compute AWS NotFound  new ","response body= ","Time  now ","Fog AWS Mock  request_id ","response status= "," data [] [] "," data [] "," data ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Compute AWS Real get_password_data":{"type":"method","name":"get_password_data","children":[],"call":[" request ","Fog Parsers Compute AWS GetPasswordData  new "]}," Fog Compute AWS Mock get_console_output":{"type":"method","name":"get_console_output","children":[],"call":[" raise ","Fog Compute AWS NotFound  new ","response body= ","Time  now ","Fog AWS Mock  request_id ","Fog AWS Mock  console_output ","Time  now - >= ","Fog Mock  delay ","Time  now - ","instance [] ","response status= "," data [] [] "," data [] "," data ","Excon Response  new ","Excon Response  new  body= "," data [] []  [] ","Excon Response  new  status= "]}," Fog Compute AWS Real get_console_output":{"type":"method","name":"get_console_output","children":[],"call":[" request ","Fog Parsers Compute AWS GetConsoleOutput  new "]}," Fog Compute AWS Mock disassociate_route_table":{"type":"method","name":"disassociate_route_table","children":[],"call":[" raise ","assoc_array [] == ","assoc_array [] ","Fog Compute AWS NotFound  new ","assoc_array nil? ","response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new ","routetable [] delete ","routetable [] ","assoc_array nil? ! ","association [] eql? ","association [] ","routetable [] find "," data [] find "," data [] "," data ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Compute AWS Real disassociate_route_table":{"type":"method","name":"disassociate_route_table","children":[],"call":[" request ","Fog Parsers Compute AWS Basic  new "]}," Fog Compute AWS Mock disassociate_address":{"type":"method","name":"disassociate_address","children":[],"call":[" raise ","Fog Compute AWS Error  new ","response body= ","Fog AWS Mock  request_id ","response status= ","address []= ","instance []= ","Fog AWS Mock  dns_name_for ","instance [] "," data [] [] "," data [] "," data ","address [] ","Excon Response  new ","association_id nil? ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  []= "," data [] []  [] "]}," Fog Compute AWS Real disassociate_address":{"type":"method","name":"disassociate_address","children":[],"call":[" request ","Fog Parsers Compute AWS Basic  new "]}," Fog Compute AWS Mock detach_volume":{"type":"method","name":"detach_volume","children":[],"call":[" raise ","Fog Compute AWS NotFound  new ","Fog Compute AWS Error  new ","response body= ","(pair\n  (str \"requestId\")\n  (send\n    (const\n      (const\n        (const nil :Fog) :AWS) :Mock) :request_id)) merge! ","Fog AWS Mock  request_id ","response status= ","volume []= ","volume [] pop ","volume [] ","volume [] empty? ! ","volume [] empty? "," data [] [] "," data [] "," data ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  []= "," data [] []  [] pop "," data [] []  [] "," data [] []  [] empty? ! "," data [] []  [] empty? "," volume [] pop  [] [] "," volume [] pop  [] "," volume [] pop  "]}," Fog Compute AWS Real detach_volume":{"type":"method","name":"detach_volume","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DetachVolume\")) merge! ","Fog Parsers Compute AWS DetachVolume  new "]}," Fog Compute AWS Mock detach_network_interface":{"type":"method","name":"detach_network_interface","children":[],"call":[" raise ","Fog Compute AWS NotFound  new "," network_interface_id ","response body= ","Fog AWS Mock  request_id ","response status= "," data [] [] []= "," data [] [] "," data [] "," data ","(send\n  (send\n    (send\n      (self) :data) :[]\n    (sym :network_interfaces)) :select) first first ","(send\n  (send\n    (send\n      (self) :data) :[]\n    (sym :network_interfaces)) :select) first ","v [] [] == ","v [] [] ","v [] "," data [] select ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Compute AWS Real detach_network_interface":{"type":"method","name":"detach_network_interface","children":[],"call":[" request ","Fog Parsers Compute AWS Basic  new "]}," Fog Compute AWS Mock detach_internet_gateway":{"type":"method","name":"detach_internet_gateway","children":[],"call":[" raise ","Fog Compute AWS Error  new "," message "," message << ","vpc_id ! ","internet_gateway_id ! ","response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Compute AWS Real detach_internet_gateway":{"type":"method","name":"detach_internet_gateway","children":[],"call":[" request ","Fog Parsers Compute AWS Basic  new "]}," Fog Compute AWS Mock describe_vpcs":{"type":"method","name":"describe_vpcs","children":[],"call":["Excon Response  new ","Fog AWS Mock  request_id ","vpc merge! "," data [] [] ","vpc [] "," data [] "," data ","vpcs each ","vpc [] != ","filters [] ","vpcs reject ","vpc []= "," apply_tag_filters "," apply_tag_filters  each "," data []  each "," apply_tag_filters  reject "," data []  reject "]}," Fog Compute AWS Real describe_vpcs":{"type":"method","name":"describe_vpcs","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeVpcs\")) merge! ","Fog Parsers Compute AWS DescribeVpcs  new ","Fog AWS  indexed_filters ","Fog Logger  warning "," caller first "," caller ","filters class ","filters is_a? "]}," Fog Compute AWS Mock describe_vpc_attribute":{"type":"method","name":"describe_vpc_attribute","children":[],"call":[" raise ","Fog Compute AWS NotFound  new ","Fog Compute AWS Error  new ","response body []= ","vpc [] ","response body ","response body= ","Fog AWS Mock  request_id ","response status= ","v [] == ","v [] "," data [] find "," data [] "," data ","Excon Response  new ","Excon Response  new  body []= ","Excon Response  new  body ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Compute AWS Real describe_vpc_attribute":{"type":"method","name":"describe_vpc_attribute","children":[],"call":[" request ","Fog Parsers Compute AWS DescribeVpcAttribute  new "]}," Fog Compute AWS Mock describe_volumes":{"type":"method","name":"describe_volumes","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","volume merge "," data [] [] ","volume [] "," data [] "," data ","volume_set map "," data [] [] ! ","volume_set reject "," data [] delete ","Time  now - >= ","Fog Mock  delay ","Time  now - ","Time  now ","volume []= ","volume [] first []= ","volume [] first ","volume [] first [] ","volume_set each ","(splat\n  (lvar :filter_value)) include? ! ","(splat\n  (lvar :filter_value)) include? ","aliases [] ","(send\n  (send\n    (lvar :volume) :[]\n    (str \"attachmentSet\")) :find) ! ","attachment [] ","volume [] find ","attachment_aliases [] ","filter_key split [] ","filter_key split "," apply_tag_filters "," data [] values ","Excon Response  new ","Fog Logger  deprecation "," caller first "," caller ","filters class ","filters is_a? ","Excon Response  new  body= ","Excon Response  new  status= "," apply_tag_filters  map "," data [] values  map "," apply_tag_filters  reject "," data [] values  reject "," apply_tag_filters  each "," data [] values  each "]}," Fog Compute AWS Real describe_volumes":{"type":"method","name":"describe_volumes","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeVolumes\")) merge! ","Fog Parsers Compute AWS DescribeVolumes  new ","Fog AWS  indexed_filters ","Fog Logger  deprecation "," caller first "," caller ","filters class ","filters is_a? "]}," Fog Compute AWS Mock describe_volume_status":{"type":"method","name":"describe_volume_status","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Compute AWS Real describe_volume_status":{"type":"method","name":"describe_volume_status","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeVolumeStatus\")) merge! ","Fog Parsers Compute AWS DescribeVolumeStatus  new ","params []= ","params merge! ","Fog AWS  indexed_filters ","Fog AWS  indexed_request_param ","filters delete "," raise ","ArgumentError  new ","filters class ","filters is_a? ","Fog AWS  indexed_request_param  []= ","Fog AWS  indexed_request_param  merge! "]}," Fog Compute AWS Mock deep_clone":{"type":"method","name":"deep_clone","children":[],"call":[" deep_clone ","obj map ","h []= ","pair last ","pair first ","obj reduce "]}," Fog Compute AWS Mock filter_resources":{"type":"method","name":"filter_resources","children":[],"call":["resource [] != ","resource [] ","resource_list reject! ","value_hash each ","value_hash_list each ","tag_set values ","tag_set values  each "]}," Fog Compute AWS Mock describe_tags":{"type":"method","name":"describe_tags","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","tagged_resources << ","resource merge ","resources each ","values each ","tag_set each "," filter_resources ","v != ","values reject! ","k != ","tag_set reject! ","aliases [] "," deep_clone "," data [] "," data ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "," deep_clone  each "," deep_clone  reject! "]}," Fog Compute AWS Real describe_tags":{"type":"method","name":"describe_tags","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeTags\")) merge! ","Fog Parsers Compute AWS DescribeTags  new ","Fog AWS  indexed_filters "]}," Fog Compute AWS Mock describe_subnets":{"type":"method","name":"describe_subnets","children":[],"call":["Excon Response  new ","Fog AWS Mock  request_id ","subnet [] != ","filters [] ","subnet [] ","subnets reject ","subnet []= ","subnets each "," data [] "," data "," data []  reject "," data []  each "]}," Fog Compute AWS Real describe_subnets":{"type":"method","name":"describe_subnets","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeSubnets\")) merge! ","Fog Parsers Compute AWS DescribeSubnets  new ","Fog AWS  indexed_filters ","Fog Logger  warning "," caller first "," caller ","filters class ","filters is_a? "]}," Fog Compute AWS Real describe_spot_price_history":{"type":"method","name":"describe_spot_price_history","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeSpotPriceHistory\")) merge! ","Fog Parsers Compute AWS DescribeSpotPriceHistory  new ","Fog AWS  indexed_filters ","params merge! ","Fog AWS  indexed_param ","filters delete ","params []= ","filters key? ","filters is_a? ","Fog AWS  indexed_filters  merge! ","Fog AWS  indexed_filters  []= "]}," Fog Compute AWS Real describe_spot_instance_requests":{"type":"method","name":"describe_spot_instance_requests","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeSpotInstanceRequests\")) merge! ","Fog Parsers Compute AWS SpotInstanceRequests  new ","Fog AWS  indexed_filters "]}," Fog Compute AWS Real describe_spot_datafeed_subscription":{"type":"method","name":"describe_spot_datafeed_subscription","children":[],"call":[" request ","Fog Parsers Compute AWS SpotDatafeedSubscription  new "]}," Fog Compute AWS Mock describe_snapshots":{"type":"method","name":"describe_snapshots","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","snapshot merge "," data [] [] ","snapshot [] "," data [] "," data ","snapshot_set map ","snapshot []= ","Time  now - >= ","Fog Mock  delay ","Time  now - ","Time  now ","Fog Mock  delay * ","snapshot_set each ","(splat\n  (lvar :filter_value)) include? ! ","(splat\n  (lvar :filter_value)) include? ","snapshot_set reject ","aliases [] "," apply_tag_filters ","Fog Logger  warning "," caller first "," caller ","restorable_by inspect ","restorable_by != ","filters delete "," data [] values ","Excon Response  new ","Fog Logger  deprecation ","options empty? ","filters class ","filters is_a? ","Excon Response  new  body= ","Excon Response  new  status= "," apply_tag_filters  map "," data [] values  map "," apply_tag_filters  each "," data [] values  each "," apply_tag_filters  reject "," data [] values  reject ","filters delete  inspect ","filters delete  != "]}," Fog Compute AWS Real describe_snapshots":{"type":"method","name":"describe_snapshots","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeSnapshots\")) merge! ","Fog Parsers Compute AWS DescribeSnapshots  new ","Fog AWS  indexed_filters merge! ","Fog AWS  indexed_filters ","options [] ","options []= ","filters delete ","filters key? ","Fog Logger  deprecation "," caller first "," caller ","options empty? ","filters class ","filters is_a? "]}," Fog Compute AWS Mock describe_security_groups":{"type":"method","name":"describe_security_groups","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","(splat\n  (lvar :filter_value)) include? ! ","(splat\n  (lvar :filter_value)) include? ","security_group [] ","security_group_info reject ","aliases [] ","(send\n  (send\n    (lvar :security_group) :[]\n    (str \"ipPermissions\")) :find) ! ","permission [] ","security_group [] find ","permission_aliases [] ","(send\n  (send\n    (lvar :security_group_groups) :call\n    (lvar :security_group)) :find) ! ","group [] ","security_group_groups call find ","security_group_groups call ","permission_key == ","filter_key split [] ","filter_key split ","(send\n  (begin\n    (or\n      (send\n        (lvar :security_group) :[]\n        (str \"ipPermissions\"))\n      (array))) :map) flatten compact uniq ","(send\n  (begin\n    (or\n      (send\n        (lvar :security_group) :[]\n        (str \"ipPermissions\"))\n      (array))) :map) flatten compact ","(send\n  (begin\n    (or\n      (send\n        (lvar :security_group) :[]\n        (str \"ipPermissions\"))\n      (array))) :map) flatten ","(or\n  (send\n    (lvar :security_group) :[]\n    (str \"ipPermissions\"))\n  (array)) map "," lambda ","(send\n  (send\n    (send\n      (self) :data) :[]\n    (sym :security_groups)) :reject) values ","k [] "," data [] reject "," data [] "," data ","Excon Response  new ","Fog Logger  deprecation "," caller first "," caller ","filters class ","filters is_a? ","Excon Response  new  body= ","Excon Response  new  status= ","(send\n  (send\n    (send\n      (self) :data) :[]\n    (sym :security_groups)) :reject) values  reject ","filter_key split []  == "]}," Fog Compute AWS Real describe_security_groups":{"type":"method","name":"describe_security_groups","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeSecurityGroups\")) merge! ","Fog Parsers Compute AWS DescribeSecurityGroups  new ","Fog AWS  indexed_filters ","Fog Logger  deprecation "," caller first "," caller ","filters class ","filters is_a? "]}," Fog Compute AWS Mock describe_route_tables":{"type":"method","name":"describe_route_tables","children":[],"call":["Excon Response  new ","Fog AWS Mock  request_id ","routetable [] != ","routetable [] ","display_routes reject! ","aliases [] "," data [] dup "," data [] "," data ","Fog Logger  deprecation "," caller first "," caller ","filters class ","filters is_a? ","route merge! "," data [] [] ","route [] ","display_routes each "," data [] dup  reject! "," data [] dup  each "]}," Fog Compute AWS Real describe_route_tables":{"type":"method","name":"describe_route_tables","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeRouteTables\")) merge! ","Fog Parsers Compute AWS DescribeRouteTables  new ","Fog AWS  indexed_filters ","Fog Logger  deprecation "," caller first "," caller ","filters class ","filters is_a? "]}," Fog Compute AWS Mock describe_reserved_instances_offerings":{"type":"method","name":"describe_reserved_instances_offerings","children":[],"call":["response body= ","Fog AWS Mock  request_id "," data [] "," data ","Fog AWS Mock  reserved_instances_offering_id ","response status= ","Excon Response  new ","(send\n  (begin\n    (erange\n      (int 0)\n      (int 64))) :map) join ","(irange\n  (str \"a\")\n  (str \"z\")) to_a [] "," rand ","(irange\n  (str \"a\")\n  (str \"z\")) to_a ","(erange\n  (int 0)\n  (int 64)) map ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Compute AWS Real describe_reserved_instances_offerings":{"type":"method","name":"describe_reserved_instances_offerings","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeReservedInstancesOfferings\")) merge! ","Fog Parsers Compute AWS DescribeReservedInstancesOfferings  new ","Fog AWS  indexed_filters merge! ","Fog AWS  indexed_filters ","options []= ","filters delete ","filters key? ","filters is_a? "]}," Fog Compute AWS Mock describe_reserved_instances":{"type":"method","name":"describe_reserved_instances","children":[],"call":["response body= ","Fog AWS Mock  request_id "," data [] values "," data [] "," data ","response status= ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Compute AWS Real describe_reserved_instances":{"type":"method","name":"describe_reserved_instances","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeReservedInstances\")) merge! ","Fog Parsers Compute AWS DescribeReservedInstances  new ","Fog AWS  indexed_filters ","Fog Logger  deprecation "," caller first "," caller ","filters class ","filters is_a? "]}," Fog Compute AWS Mock describe_regions":{"type":"method","name":"describe_regions","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","(splat\n  (lvar :filter_value)) include? ! ","(splat\n  (lvar :filter_value)) include? ","region [] ","region_info reject ","aliases [] ","Excon Response  new ","Fog Logger  deprecation "," caller first "," caller ","filters class ","filters is_a? ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Compute AWS Real describe_regions":{"type":"method","name":"describe_regions","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeRegions\")) merge! ","Fog Parsers Compute AWS DescribeRegions  new ","Fog AWS  indexed_filters ","Fog Logger  deprecation "," caller first "," caller ","filters class ","filters is_a? "]}," Fog Compute AWS Real describe_placement_groups":{"type":"method","name":"describe_placement_groups","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribePlacementGroups\")) merge! ","Fog Parsers Compute AWS DescribePlacementGroups  new ","Fog AWS  indexed_filters "]}," Fog Compute AWS Mock describe_network_interfaces":{"type":"method","name":"describe_network_interfaces","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","(splat\n  (lvar :filter_value)) include? ! ","(splat\n  (lvar :filter_value)) include? ","nic [] ","network_interface_info reject "," data [] values "," data [] "," data ","Excon Response  new ","filters []= ","filters delete ","Excon Response  new  body= ","Excon Response  new  status= "," data [] values  reject "]}," Fog Compute AWS Real describe_network_interfaces":{"type":"method","name":"describe_network_interfaces","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeNetworkInterfaces\")) merge! ","Fog Parsers Compute AWS DescribeNetworkInterfaces  new ","Fog AWS  indexed_filters "]}," Fog Compute AWS Mock describe_network_interface_attribute":{"type":"method","name":"describe_network_interface_attribute","children":[],"call":[" raise ","Fog Compute AWS NotFound  new ","Fog Compute AWS Error  new ","response body []= "," data [] [] [] "," data [] [] "," data [] "," data ","response body ","response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new ","network_interface [] ","Excon Response  new  body []= ","Excon Response  new  body ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  [] "]}," Fog Compute AWS Real describe_network_interface_attribute":{"type":"method","name":"describe_network_interface_attribute","children":[],"call":[" request ","Fog Parsers Compute AWS DescribeNetworkInterfaceAttribute  new "]}," Fog Compute AWS Mock describe_network_acls":{"type":"method","name":"describe_network_acls","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","acl merge! "," data [] [] ","acl [] "," data [] "," data ","network_acls each ","(splat\n  (lvar :filter_value)) include? ! ","(splat\n  (lvar :filter_value)) include? ","nacl [] ","network_acls reject ","aliases [] ","(send\n  (send\n    (lvar :nacl) :[]\n    (str \"entrySet\")) :find) ! ","association [] ","nacl [] find ","entry_aliases [] ","filter_key split [] ","filter_key split ","association [] [] ","(send\n  (send\n    (lvar :nacl) :[]\n    (str \"associationSet\")) :find) ! ","association_aliases [] ","filter_key to_s "," apply_tag_filters "," data [] values ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "," apply_tag_filters  each "," data [] values  each "," apply_tag_filters  reject "," data [] values  reject ","filter_key to_s  split [] ","filter_key to_s  split ","filter_key to_s  to_s "]}," Fog Compute AWS Real describe_network_acls":{"type":"method","name":"describe_network_acls","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeNetworkAcls\")) merge! ","Fog Parsers Compute AWS DescribeNetworkAcls  new ","Fog AWS  indexed_filters "]}," Fog Compute AWS Mock describe_key_pairs":{"type":"method","name":"describe_key_pairs","children":[],"call":["response body= ","(str \"keyFingerprint\") include? ! ","(str \"keyFingerprint\") include? ","key_pair reject ","key_set map ","Fog AWS Mock  request_id ","response status= ","(splat\n  (lvar :filter_value)) include? ! ","(splat\n  (lvar :filter_value)) include? ","key_pair [] ","key_set reject ","aliases [] "," data [] values "," data [] "," data ","Excon Response  new ","Fog Logger  deprecation "," caller first "," caller ","filters class ","filters is_a? ","Excon Response  new  body= "," data [] values  map ","Excon Response  new  status= "," data [] values  reject "]}," Fog Compute AWS Real describe_key_pairs":{"type":"method","name":"describe_key_pairs","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeKeyPairs\")) merge! ","Fog Parsers Compute AWS DescribeKeyPairs  new ","Fog AWS  indexed_filters ","Fog Logger  deprecation "," caller first "," caller ","filters class ","filters is_a? "]}," Fog Compute AWS Mock describe_internet_gateways":{"type":"method","name":"describe_internet_gateways","children":[],"call":["Excon Response  new ","Fog AWS Mock  request_id ","internet_gateway [] != ","filters [] ","internet_gateway [] ","internet_gateways reject "," data [] values "," data [] "," data "," data [] values  reject "]}," Fog Compute AWS Real describe_internet_gateways":{"type":"method","name":"describe_internet_gateways","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeInternetGateways\")) merge! ","Fog Parsers Compute AWS DescribeInternetGateways  new ","Fog AWS  indexed_filters ","Fog Logger  warning "," caller first "," caller ","filters class ","filters is_a? "]}," Fog Compute AWS Mock describe_instances":{"type":"method","name":"describe_instances","children":[],"call":["response body= ","reservation_set values ","Fog AWS Mock  request_id ","reservation_set [] [] << ","(send\n  (lvar :instance) :reject) merge "," data [] [] ","instance [] "," data [] "," data ","(str \"amiLaunchIndex\") include? ! ","(str \"amiLaunchIndex\") include? ","instance reject ","reservation_set [] [] ","reservation_set [] ","instance []= ","Fog AWS Mock  private_dns_name_for ","(send\n  (block\n    (send\n      (lvar :nics) :sort_by)\n    (args\n      (arg :ni)\n      (arg :ni_conf))\n    (send\n      (send\n        (lvar :ni_conf) :[]\n        (str \"attachment\")) :[]\n      (str \"deviceIndex\"))) :map) first ","ni_conf [] ","(send\n  (lvar :nics) :sort_by) map ","ni_conf [] [] ","nics sort_by ","nics count > ","nics count ","nics map ","ni_conf [] [] == "," data [] select "," data [] delete ","Time  now - >= ","Fog Mock  delay ","Time  now - ","Time  now ","Fog Mock  delay * ","Fog AWS Mock  dns_name_for ","Fog AWS Mock  ip_address ","instance [] [] ","instance_set each ","response status= ","brand_new_instances include? ","instance_set reject "," raise ","Fog Compute AWS NotFound  new ","brand_new_instances first [] ","brand_new_instances first ","brand_new_instances empty? ! ","brand_new_instances empty? ","filters [] ","Time  now - < ","instance [] [] == ","instance_set select ","(splat\n  (lvar :filter_value)) include? ! ","(splat\n  (lvar :filter_value)) include? ","aliases [] ","(send\n  (lvar :security_group_names) :&\n  (send\n    (lvar :instance) :[]\n    (str \"groupSet\"))) empty? ","security_group_names & ","sg [] ","(send\n  (send\n    (send\n      (send\n        (self) :data) :[]\n      (sym :security_groups)) :values) :select) map ","group_ids include? "," data [] values select "," data [] values ","filter_key == ","instance [] include? ! ","instance [] include? ","state_reason_aliases [] ","filter_key split [] ","filter_key split ","instance_state_aliases [] ","(send\n  (send\n    (lvar :instance) :[]\n    (str \"blockDeviceMapping\")) :find) ! ","block_device_mapping [] ","instance [] find ","block_device_mapping_aliases [] "," apply_tag_filters ","Excon Response  new ","Fog Logger  deprecation "," caller first "," caller ","filters class ","filters is_a? ","Excon Response  new  body= "," apply_tag_filters  each "," data [] values  each ","Excon Response  new  status= "," apply_tag_filters  reject "," data [] values  reject "," apply_tag_filters  select "," data [] values  select "]}," Fog Compute AWS Real describe_instances":{"type":"method","name":"describe_instances","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeInstances\")) merge! ","Fog Parsers Compute AWS DescribeInstances  new ","params merge! ","Fog AWS  indexed_filters ","params []= ","instance_ids each_with_index ","instance_ids is_a? ","filters delete ","filters [] ","Fog Logger  deprecation "," caller first "," caller ","filters class ","filters is_a? ","filters delete  each_with_index ","filters delete  is_a? "]}," Fog Compute AWS Mock describe_instance_status":{"type":"method","name":"describe_instance_status","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Compute AWS Real describe_instance_status":{"type":"method","name":"describe_instance_status","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeInstanceStatus\")) merge! ","Fog Parsers Compute AWS DescribeInstanceStatus  new ","params []= ","params merge! ","Fog AWS  indexed_filters ","Fog AWS  indexed_request_param ","filters delete "," raise ","ArgumentError  new ","filters class ","filters is_a? ","Fog AWS  indexed_request_param  []= ","Fog AWS  indexed_request_param  merge! "]}," Fog Compute AWS Mock describe_images":{"type":"method","name":"describe_images","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","(send\n  (lvar :image) :reject) merge "," data [] [] ","image [] "," data [] "," data ","(str \"registered\") include? ","image reject ","image []= ","Time  now - >= ","Fog Mock  delay ","Time  now - ","Time  now ","image_set map ","(splat\n  (lvar :filter_value)) include? ! ","(splat\n  (lvar :filter_value)) include? ","image_set reject ","aliases [] "," apply_tag_filters "," visible_images values "," visible_images ","Excon Response  new ","filters []= ","owner == ","filters delete ","Fog Mock  not_implemented ","Fog Logger  warning "," caller first "," caller ","key =~ ","filters keys any? ","filters keys ","Fog Logger  deprecation ","filters class ","filters is_a? ","Excon Response  new  body= ","Excon Response  new  status= "," apply_tag_filters  map "," visible_images values  map "," apply_tag_filters  reject "," visible_images values  reject ","filters delete  == "]}," Fog Compute AWS Real describe_images":{"type":"method","name":"describe_images","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeImages\")) merge! ","Fog Parsers Compute AWS DescribeImages  new ","Fog AWS  indexed_filters merge! ","Fog AWS  indexed_filters ","options merge! ","Fog AWS  indexed_request_param ","filters delete ","filters key? ","filters is_a? "]}," Fog Compute AWS Mock describe_dhcp_options":{"type":"method","name":"describe_dhcp_options","children":[],"call":["response body= "," data [] "," data ","Fog AWS Mock  request_id ","response status= ","Excon Response  new tap ","Excon Response  new "]}," Fog Compute AWS Real describe_dhcp_options":{"type":"method","name":"describe_dhcp_options","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeDhcpOptions\")) merge! ","Fog Parsers Compute AWS DescribeDhcpOptions  new ","Fog AWS  indexed_filters ","Fog Logger  warning "," caller first "," caller ","filters class ","filters is_a? "]}," Fog Compute AWS Mock describe_availability_zones":{"type":"method","name":"describe_availability_zones","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","(splat\n  (lvar :filter_value)) include? ! ","(splat\n  (lvar :filter_value)) include? ","availability_zone [] ","availability_zone_info reject ","aliases [] ","zoneinfo [] == ","zoneinfo [] ","all_zones select ","Excon Response  new ","Fog Logger  deprecation "," caller first "," caller ","filters class ","filters is_a? ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Compute AWS Real describe_availability_zones":{"type":"method","name":"describe_availability_zones","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeAvailabilityZones\")) merge! ","Fog Parsers Compute AWS DescribeAvailabilityZones  new ","Fog AWS  indexed_filters ","Fog Logger  deprecation "," caller first "," caller ","filters class ","filters is_a? "]}," Fog Compute AWS Mock describe_addresses":{"type":"method","name":"describe_addresses","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","(splat\n  (lvar :filter_value)) include? ! ","(splat\n  (lvar :filter_value)) include? ","address [] ","addresses_set reject ","aliases [] "," data [] values "," data [] "," data ","Excon Response  new ","Fog Logger  deprecation "," caller first "," caller ","filters class ","filters is_a? ","Excon Response  new  body= ","Excon Response  new  status= "," data [] values  reject "]}," Fog Compute AWS Real describe_addresses":{"type":"method","name":"describe_addresses","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeAddresses\")) merge! ","Fog Parsers Compute AWS DescribeAddresses  new ","Fog AWS  indexed_filters ","Fog Logger  deprecation "," caller first "," caller ","filters class ","filters is_a? "]}," Fog Compute AWS Mock describe_account_attributes":{"type":"method","name":"describe_account_attributes","children":[],"call":["Excon Response  new ","Fog AWS Mock  request_id "," data [] "," data "]}," Fog Compute AWS Real describe_account_attributes":{"type":"method","name":"describe_account_attributes","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeAccountAttributes\")) merge! ","Fog Parsers Compute AWS DescribeAccountAttributes  new ","Fog AWS  indexed_filters "]}," Fog Compute AWS Mock deregister_image":{"type":"method","name":"deregister_image","children":[],"call":[" raise ","Fog Compute AWS Error  new ","message << "," instance_id ! "," instance_id ","response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Compute AWS Real deregister_image":{"type":"method","name":"deregister_image","children":[],"call":[" request ","Fog Parsers Compute AWS DeregisterImage  new "]}," Fog Compute AWS Mock delete_vpc":{"type":"method","name":"delete_vpc","children":[],"call":[" raise ","Fog Compute AWS Error  new ","message << ","response body= ","Fog AWS Mock  request_id "," data [] delete "," data [] "," data "," network_acls all first network_acl_id "," network_acls all first "," network_acls all "," network_acls ","v [] == ","v [] "," data [] reject! ","response status= ","Excon Response  new tap ","Excon Response  new "," network_acls all first  network_acls all first network_acl_id  "]}," Fog Compute AWS Real delete_vpc":{"type":"method","name":"delete_vpc","children":[],"call":[" request ","Fog Parsers Compute AWS Basic  new "]}," Fog Compute AWS Mock delete_volume":{"type":"method","name":"delete_volume","children":[],"call":[" raise ","Fog Compute AWS NotFound  new ","response body= ","Fog AWS Mock  request_id ","response status= ","volume []= "," data [] []= ","Time  now "," data [] "," data ","Fog Compute AWS Error  new ","attach [] ","volume [] first ","volume [] ","volume [] any? "," data [] [] ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  []= ","volume [] first  [] "," data [] []  [] first "," data [] []  [] "," data [] []  [] any? "]}," Fog Compute AWS Real delete_volume":{"type":"method","name":"delete_volume","children":[],"call":[" request ","Fog Parsers Compute AWS Basic  new "]}," Fog Compute AWS Mock delete_tags":{"type":"method","name":"delete_tags","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new ","tagset delete ","tagset [] == ","tagset [] ","value nil? ","tagset key? "," data [] [] ","resource [] "," data [] "," data ","tags each ","tagged each "," data [] [] []= "," data [] [] [] - "," data [] [] [] "," tagged_resources ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  delete "," data [] []  [] == "," data [] []  [] "," data [] []  key? "," tagged_resources  each ","  tagged_resources _resources "]}," Fog Compute AWS Real delete_tags":{"type":"method","name":"delete_tags","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DeleteTags\")) merge! ","Fog Parsers Compute AWS Basic  new ","params merge! ","tags [] ","tags [] nil? ","tags keys each_with_index ","tags keys ","Fog AWS  indexed_param "]}," Fog Compute AWS Mock delete_subnet":{"type":"method","name":"delete_subnet","children":[],"call":[" raise ","Fog Compute AWS Error  new ","message << ","response body= ","Fog AWS Mock  request_id ","response status= ","v [] == ","v [] "," data [] reject! "," data [] "," data ","Excon Response  new tap ","Excon Response  new "]}," Fog Compute AWS Real delete_subnet":{"type":"method","name":"delete_subnet","children":[],"call":[" request ","Fog Parsers Compute AWS Basic  new "]}," Fog Compute AWS Real delete_spot_datafeed_subscription":{"type":"method","name":"delete_spot_datafeed_subscription","children":[],"call":[" request ","Fog Parsers Compute AWS Basic  new "]}," Fog Compute AWS Mock delete_snapshot":{"type":"method","name":"delete_snapshot","children":[],"call":[" raise ","Fog Compute AWS NotFound  new ","response body= ","Fog AWS Mock  request_id ","response status= "," data [] delete "," data [] "," data ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Compute AWS Real delete_snapshot":{"type":"method","name":"delete_snapshot","children":[],"call":[" request ","Fog Parsers Compute AWS Basic  new "]}," Fog Compute AWS Mock delete_security_group":{"type":"method","name":"delete_security_group","children":[],"call":[" raise ","Fog Compute AWS NotFound  new ","response body= ","Fog AWS Mock  request_id ","response status= "," data [] delete "," data [] "," data ","Fog Compute AWS Error  new ","active_instances any? ","used_by_groups uniq join ","used_by_groups uniq ","used_by_groups empty? ","instance [] != ","instance [] ","instance [] include? "," data [] values select "," data [] values ","used_by_groups << ","key_data [] ","group_group_permission [] == ","group_group_permission [] ","group_ip_permission [] each ","group_ip_permission [] ","group [] each ","group [] ","group == "," data [] [] ","key_data [] each "," region_data each "," region_data ","Excon Response  new ","(send\n  (send\n    (send\n      (self) :data) :[]\n    (sym :security_groups)) :reject) keys first ","(send\n  (send\n    (send\n      (self) :data) :[]\n    (sym :security_groups)) :reject) keys ","v [] != ","v [] "," data [] reject ","name == ","ec2_group [] == ","ec2_group [] ","(or\n  (send\n    (lvar :group) :[]\n    (str \"EC2SecurityGroups\"))\n  (array)) each ","(or\n  (send\n    (lvar :data) :[]\n    (sym :security_groups))\n  (array)) each ","data [] ","Fog AWS RDS Mock  data [] each ","Fog AWS RDS Mock  data [] "," region ","Fog AWS RDS Mock  data ","v [] == "," data [] find ","Excon Response  new  body= ","Excon Response  new  status= ","(send\n  (send\n    (send\n      (self) :data) :[]\n    (sym :security_groups)) :reject) keys first  == "]}," Fog Compute AWS Real delete_security_group":{"type":"method","name":"delete_security_group","children":[],"call":[" request ","Fog Parsers Compute AWS Basic  new "," raise ","Fog Compute AWS Error  new "]}," Fog Compute AWS Mock delete_route_table":{"type":"method","name":"delete_route_table","children":[],"call":[" raise ","route_table [] empty? ! ","route_table [] empty? ","route_table [] ","Fog Compute AWS NotFound  new ","route_table nil? ","response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new "," data [] delete "," data [] "," data ","route_table nil? ! ","routetable [] eql? ","routetable [] "," data [] find ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Compute AWS Real delete_route_table":{"type":"method","name":"delete_route_table","children":[],"call":[" request ","Fog Parsers Compute AWS Basic  new "]}," Fog Compute AWS Mock delete_route":{"type":"method","name":"delete_route","children":[],"call":[" raise ","Fog Compute AWS NotFound  new ","route [] == ","route [] ","response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new ","route_table [] delete ","route_table [] ","route [] != ","route nil? ! ","route nil? ","route [] eql? ","route_table [] find ","route_table nil? ","routetable [] eql? ","routetable [] "," data [] find "," data [] "," data ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Compute AWS Real delete_route":{"type":"method","name":"delete_route","children":[],"call":[" request ","Fog Parsers Compute AWS Basic  new "]}," Fog Compute AWS Real delete_placement_group":{"type":"method","name":"delete_placement_group","children":[],"call":[" request ","Fog Parsers Compute AWS Basic  new "]}," Fog Compute AWS Mock delete_network_interface":{"type":"method","name":"delete_network_interface","children":[],"call":[" raise ","Fog Compute AWS NotFound  new ","response body= ","Fog AWS Mock  request_id ","response status= "," data [] delete "," data [] "," data ","Fog Compute AWS Error  new "," data [] [] [] [] "," data [] [] [] "," data [] [] ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Compute AWS Real delete_network_interface":{"type":"method","name":"delete_network_interface","children":[],"call":[" request ","Fog Parsers Compute AWS Basic  new "]}," Fog Compute AWS Mock delete_network_acl_entry":{"type":"method","name":"delete_network_acl_entry","children":[],"call":[" raise ","Fog Compute AWS NotFound  new ","response body= ","Fog AWS Mock  request_id ","response status= ","Fog Compute AWS Error  new ","r [] == ","r [] "," data [] [] [] delete_if "," data [] [] [] "," data [] [] "," data [] "," data "," data [] [] [] find ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Compute AWS Real delete_network_acl_entry":{"type":"method","name":"delete_network_acl_entry","children":[],"call":[" request ","Fog Parsers Compute AWS Basic  new "]}," Fog Compute AWS Mock delete_network_acl":{"type":"method","name":"delete_network_acl","children":[],"call":[" raise ","Fog Compute AWS NotFound  new ","response body= ","Fog AWS Mock  request_id ","response status= "," data [] delete "," data [] "," data ","Fog Compute AWS Error  new "," data [] [] [] any? "," data [] [] [] "," data [] [] ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Compute AWS Real delete_network_acl":{"type":"method","name":"delete_network_acl","children":[],"call":[" request ","Fog Parsers Compute AWS Basic  new "]}," Fog Compute AWS Mock delete_key_pair":{"type":"method","name":"delete_key_pair","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= "," data [] delete "," data [] "," data ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Compute AWS Real delete_key_pair":{"type":"method","name":"delete_key_pair","children":[],"call":[" request ","Fog Parsers Compute AWS Basic  new "]}," Fog Compute AWS Mock delete_internet_gateway":{"type":"method","name":"delete_internet_gateway","children":[],"call":[" raise ","Fog Compute AWS Error  new ","message << ","response body= ","Fog AWS Mock  request_id "," data [] delete "," data [] "," data ","response status= ","Excon Response  new tap ","Excon Response  new "]}," Fog Compute AWS Real delete_internet_gateway":{"type":"method","name":"delete_internet_gateway","children":[],"call":[" request ","Fog Parsers Compute AWS Basic  new "]}," Fog Compute AWS Mock delete_dhcp_options":{"type":"method","name":"delete_dhcp_options","children":[],"call":[" raise ","Fog Compute AWS Error  new ","message << ","response body= ","Fog AWS Mock  request_id ","v [] == ","v [] "," data [] reject! "," data [] "," data ","response status= ","Excon Response  new tap ","Excon Response  new "]}," Fog Compute AWS Real delete_dhcp_options":{"type":"method","name":"delete_dhcp_options","children":[],"call":[" request ","Fog Parsers Compute AWS Basic  new "]}," Fog Compute AWS Mock create_vpc":{"type":"method","name":"create_vpc","children":[],"call":["response body []= ","response body ","cidrBlock empty? ","response body= ","response status= ","Fog AWS Mock  request_id "," data [] [] []= "," data [] [] ","default_nacl network_acl_id "," data [] "," data ","default_nacl save "," network_acls new "," network_acls ","route_table [] push ","route_table [] "," add_route_association ","default_route id ","routetable [] eql? ","routetable [] "," data [] find ","default_route save "," route_tables new "," route_tables "," data [] push ","Fog AWS Mock  vpc_id ","Excon Response  new tap ","Excon Response  new ","Fog Compute AWS Mock  data [] [] [] []= ","Fog Compute AWS Mock  data [] [] [] ","Fog Compute AWS Mock  data [] [] ","Fog Compute AWS Mock  data [] "," region ","Fog Compute AWS Mock  data ","Fog AWS Mock  security_group_id ","Fog Mock  random_hex "," network_acls new  network_acl_id "," network_acls new  save "," add_route_ add_route_association iation "," route_tables new  id "," route_tables new  save ","Fog AWS Mock  Fog AWS Mock  vpc_id  "]}," Fog Compute AWS Real create_vpc":{"type":"method","name":"create_vpc","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"CreateVpc\")) merge! ","Fog Parsers Compute AWS CreateVpc  new "]}," Fog Compute AWS Mock create_volume":{"type":"method","name":"create_volume","children":[],"call":["response body []= ","response body ","response body= ","response status= ","(pair\n  (str \"requestId\")\n  (send\n    (const\n      (const\n        (const nil :Fog) :AWS) :Mock) :request_id)) merge! ","(str \"availabilityZone\") include? ! ","(str \"availabilityZone\") include? ","data reject ","Fog AWS Mock  request_id "," data [] []= "," data [] "," data ","options [] ","Time  now ","Fog AWS Mock  volume_id "," raise ","Fog Compute AWS Error  new ","iops > ","iops < ","%.1f % ","(lvasgn :iops_to_size_ratio\n  (send\n    (send\n      (lvar :iops) :to_f) :/\n    (send\n      (lvar :size) :to_f))) > ","iops to_f / ","size to_f ","iops to_f ","size < ","iops ! ","options [] == ","snapshot [] ","size ! ","Fog Compute AWS NotFound  new ","snapshot ! "," data [] [] ","Excon Response  new ","Fog Logger  deprecation "," caller first "," caller ","options is_a? ","options [] ! ","Excon Response  new  body []= ","Excon Response  new  body ","Excon Response  new  body= ","Excon Response  new  status= ","Fog AWS Mock  Fog AWS Mock  volume_id  ","options []  > ","options []  < ","(lvasgn :iops to_f / \n  (send\n    (send\n      (lvar :iops) :to_f) :/\n    (send\n      (lvar :size) :to_f))) > ","(lvasgn :options [] _to_size_ratio\n  (send\n    (send\n      (lvar :options [] ) :to_f) :/\n    (send\n      (lvar :size) :to_f))) > ","(lvasgn :iops_to_snapshot [] _ratio\n  (send\n    (send\n      (lvar :iops) :to_f) :/\n    (send\n      (lvar :snapshot [] ) :to_f))) > ","options []  to_f / ","snapshot []  to_f ","options []  to_f ","snapshot []  < ","options []  ! "," data [] []  [] ","snapshot []  ! "," data [] []  ! "]}," Fog Compute AWS Real create_volume":{"type":"method","name":"create_volume","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"CreateVolume\")) merge ","Fog Parsers Compute AWS CreateVolume  new ","Fog Logger  deprecation "," caller first "," caller ","options is_a? "]}," Fog Compute AWS Mock create_tags":{"type":"method","name":"create_tags","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new "," data [] [] []= "," data [] [] ","resource [] "," data [] "," data ","tagged each "," data [] [] [] ","tags each "," tagged_resources ","Excon Response  new  body= ","Excon Response  new  status= "," tagged_resources  each ","  tagged_resources _resources "]}," Fog Compute AWS Real create_tags":{"type":"method","name":"create_tags","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"CreateTags\")) merge! ","Fog Parsers Compute AWS Basic  new ","params merge! ","Fog AWS  indexed_param ","tags values ","tags keys ","tags []= ","value nil? "]}," Fog Compute AWS Mock create_subnet":{"type":"method","name":"create_subnet","children":[],"call":["response body []= ","response body ","vpcId empty? ","cidrBlock empty? ","response body= ","response status= ","Fog AWS Mock  request_id "," data [] push "," data [] "," data ","default_nacl [] << ","data [] ","default_nacl [] ","nacl [] ","nacl [] == "," data [] values find "," data [] values ","Fog AWS Mock  network_acl_association_id ","Fog AWS Mock  subnet_id "," raise ","Fog Compute AWS Error  new "," IPAddress  parse include? "," IPAddress  parse ","subnet [] ","(send\n  (send\n    (send\n      (self) :data) :[]\n    (sym :subnets)) :select) each ","s [] == ","s [] "," data [] select "," IPAddress  parse include? ! ","vpc [] ","Fog Compute AWS NotFound  new ","vpc nil? ","v [] == ","v [] "," data [] find ","Excon Response  new tap ","Excon Response  new ","options [] ","options [] nil? "]}," Fog Compute AWS Real create_subnet":{"type":"method","name":"create_subnet","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"CreateSubnet\")) merge! ","Fog Parsers Compute AWS CreateSubnet  new "]}," Fog Compute AWS Real create_spot_datafeed_subscription":{"type":"method","name":"create_spot_datafeed_subscription","children":[],"call":[" request ","Fog Parsers Compute AWS SpotDatafeedSubscription  new "]}," Fog Compute AWS Mock create_snapshot":{"type":"method","name":"create_snapshot","children":[],"call":[" raise ","Excon Errors  status_error ","response status= ","response body= ","(pair\n  (str \"requestId\")\n  (send\n    (const\n      (const\n        (const nil :Fog) :AWS) :Mock) :request_id)) merge! ","Fog AWS Mock  request_id "," data [] []= "," data [] "," data ","volume [] ","Time  now ","Fog AWS Mock  snapshot_id "," data [] [] ","Excon Response  new ","Excon Response  new  status= ","Excon Response  new  body= "," data [] []  [] ","Fog AWS Mock  Fog AWS Mock  snapshot_id  "]}," Fog Compute AWS Real create_snapshot":{"type":"method","name":"create_snapshot","children":[],"call":[" request ","Fog Parsers Compute AWS CreateSnapshot  new "]}," Fog Compute AWS Mock create_security_group":{"type":"method","name":"create_security_group","children":[],"call":["response body= ","data [] ","Fog AWS Mock  request_id "," data [] []= "," data [] "," data ","Fog AWS Mock  security_group_id "," raise ","Fog Compute AWS Error  new "," data [] [] ","Excon Response  new ","v [] == ","v [] "," data [] find ","Fog AWS Mock  default_vpc_for "," region ","Excon Response  new  body= ","Fog AWS Mock  security_Fog AWS Mock  security_group_id  "]}," Fog Compute AWS Real create_security_group":{"type":"method","name":"create_security_group","children":[],"call":[" request ","Fog Parsers Compute AWS CreateSecurityGroup  new "]}," Fog Compute AWS Mock create_route_table":{"type":"method","name":"create_route_table","children":[],"call":["response body= ","Fog AWS Mock  request_id "," data [] push "," data [] "," data ","vpc [] ","Fog Mock  random_hex ","response status= "," raise ","Fog Compute AWS NotFound  new ","vpc nil? ","vpc [] eql? "," data [] find ","Excon Response  new ","Fog AWS Mock  route_table_id ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Compute AWS Real create_route_table":{"type":"method","name":"create_route_table","children":[],"call":[" request ","Fog Parsers Compute AWS CreateRouteTable  new "]}," Fog Compute AWS Mock create_route":{"type":"method","name":"create_route","children":[],"call":[" raise ","Fog Compute AWS InvalidParameterValue  new ","destination_cidr_block empty? ","Fog Compute AWS NotFound  new ","route_table nil? ","Fog Compute AWS Error  new ","message << ","response body= ","Fog AWS Mock  request_id ","response status= ","route_table [] push ","route_table [] ","Excon Response  new ","(send\n  (send\n    (lvar :route_table) :[]\n    (str \"routeSet\")) :find) nil? ! ","(send\n  (send\n    (lvar :route_table) :[]\n    (str \"routeSet\")) :find) nil? ","route [] eql? ","route [] ","route_table [] find "," network_interfaces all first nil? "," network_interfaces all first "," network_interfaces all "," network_interfaces ","network_interface_id nil? ! ","network_interface_id nil? "," servers all first nil? "," servers all first "," servers all "," servers ","instance_id nil? ! ","instance_id nil? "," internet_gateways all first nil? "," internet_gateways all first "," internet_gateways all "," internet_gateways ","internet_gateway_id nil? ! ","internet_gateway_id nil? ","route_table nil? ! ","routetable [] eql? ","routetable [] "," data [] find "," data [] "," data ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Compute AWS Real create_route":{"type":"method","name":"create_route","children":[],"call":[" request ","request_vars []= ","Fog Parsers Compute AWS Basic  new "]}," Fog Compute AWS Real create_placement_group":{"type":"method","name":"create_placement_group","children":[],"call":[" request ","Fog Parsers Compute AWS Basic  new "]}," Fog Compute AWS Mock create_network_interface":{"type":"method","name":"create_network_interface","children":[],"call":["response body= ","response status= ","Fog AWS Mock  request_id "," data [] []= "," data [] "," data ","options [] "," raise ","Fog Compute AWS Error  new ","(send\n  (send\n    (send\n      (self) :data) :[]\n    (sym :network_interfaces)) :map) include? ","ni_conf [] "," data [] map ","options []= ","p_ip to_s ","cidr_block first == ","cidr_block first ","cidr_block each_host ","options [] nil? ","groups []= ","group_obj nil? ","(send\n  (send\n    (send\n      (self) :data) :[]\n    (sym :security_groups)) :select) first ","v [] == ","v [] "," data [] select ","options [] each ","IPAddress  parse ","subnet [] ","Fog AWS Mock  network_interface_id ","subnet nil? ","s [] == ","s [] "," data [] find ","Excon Response  new ","group_obj [] "," data [] [] ","Excon Response  new  body= ","Excon Response  new  status= ","Fog AWS Mock  request_Fog AWS Mock  network_interface_id  ","IPAddress  parse  first == ","cFog AWS Mock  network_interface_id r_block first == ","IPAddress  parse  first ","cFog AWS Mock  network_interface_id r_block first ","IPAddress  parse  each_host ","cFog AWS Mock  network_interface_id r_block each_host ","(send\n  (send\n    (send\n      (self) :data) :[]\n    (sym :security_groups)) :select) first  nil? "," data [] []  nil? ","Fog AWS Mock  network_interface_Fog AWS Mock  network_interface_id  ","(send\n  (send\n    (send\n      (self) :data) :[]\n    (sym :security_groups)) :select) first  [] "," data [] []  [] "]}," Fog Compute AWS Real create_network_interface":{"type":"method","name":"create_network_interface","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"CreateNetworkInterface\")) merge! ","Fog Parsers Compute AWS CreateNetworkInterface  new ","options merge! ","Fog AWS  indexed_param ","options delete "]}," Fog Compute AWS Mock create_network_acl_entry":{"type":"method","name":"create_network_acl_entry","children":[],"call":[" raise ","Fog Compute AWS NotFound  new ","response body= ","Fog AWS Mock  request_id ","response status= "," data [] [] [] << "," data [] [] [] "," data [] [] "," data [] "," data ","data [] []= ","options [] ","data [] ","Fog Compute AWS Error  new ","r [] == ","r [] "," data [] [] [] find ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Compute AWS Real create_network_acl_entry":{"type":"method","name":"create_network_acl_entry","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"CreateNetworkAclEntry\")) merge! ","Fog Parsers Compute AWS Basic  new "]}," Fog Compute AWS Mock create_network_acl":{"type":"method","name":"create_network_acl","children":[],"call":["response body= ","response status= ","Fog AWS Mock  request_id "," data [] []= "," data [] "," data "," raise ","Fog Compute AWS Error  new ","s [] == ","s [] "," data [] find ","Fog AWS Mock  network_acl_id ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= ","Fog AWS Mock  request_Fog AWS Mock  network_acl_id  ","Fog AWS Mock  network_acl_Fog AWS Mock  network_acl_id  "]}," Fog Compute AWS Real create_network_acl":{"type":"method","name":"create_network_acl","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"CreateNetworkAcl\")) merge! ","Fog Parsers Compute AWS CreateNetworkAcl  new "]}," Fog Compute AWS Mock create_key_pair":{"type":"method","name":"create_key_pair","children":[],"call":["response body= ","(pair\n  (str \"requestId\")\n  (send\n    (const\n      (const\n        (const nil :Fog) :AWS) :Mock) :request_id)) merge! ","Fog AWS Mock  request_id "," data [] []= "," data [] "," data ","Fog AWS Mock  key_material ","Fog AWS Mock  key_fingerprint ","response status= "," raise ","Fog Compute AWS Error  new "," data [] [] ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Compute AWS Real create_key_pair":{"type":"method","name":"create_key_pair","children":[],"call":[" request ","Fog Parsers Compute AWS CreateKeyPair  new "]}," Fog Compute AWS Mock create_internet_gateway":{"type":"method","name":"create_internet_gateway","children":[],"call":["Excon Response  new "," data [] [] "," data [] "," data ","Fog AWS Mock  request_id "," data [] []= ","Fog AWS Mock  internet_gateway_id ","Fog AWS Mock  internet_Fog AWS Mock  internet_gateway_id  "]}," Fog Compute AWS Real create_internet_gateway":{"type":"method","name":"create_internet_gateway","children":[],"call":[" request ","Fog Parsers Compute AWS CreateInternetGateway  new "]}," Fog Compute AWS Mock create_image":{"type":"method","name":"create_image","children":[],"call":["response body []= ","response body ","name empty? ","response body= ","response status= ","register_image_response body [] ","register_image_response body ","Fog AWS Mock  request_id ","name empty? ! ","Excon Response  new "," register_image ","options delete ","v nil? ","params reject! ","params merge! ","Fog AWS  indexed_param ","mapping [] ","block_device_mappings map ","options [] ","Excon Response  new  body []= ","Excon Response  new  body ","Excon Response  new  body= ","Excon Response  new  status= ","register_image_Excon Response  new  body [] "," register_image  body [] ","register_image_Excon Response  new  body "," register_image  body "]}," Fog Compute AWS Real create_image":{"type":"method","name":"create_image","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"CreateImage\")) merge! ","Fog Parsers Compute AWS CreateImage  new ","no_reboot to_s ","v nil? ","params reject! ","params merge! ","Fog AWS  indexed_param ","mapping [] ","block_device_mappings map ","options [] "]}," Fog Compute AWS Mock indexed_multidimensional_params":{"type":"method","name":"indexed_multidimensional_params","children":[],"call":["params []= "," format ","(splat\n  (send\n    (lvar :multi_params) :[]\n    (lvar :key))) each_with_index ","multi_params [] ","multi_params keys each_with_index ","multi_params keys "]}," Fog Compute AWS Mock create_dhcp_options":{"type":"method","name":"create_dhcp_options","children":[],"call":["response body= "," data [] "," data ","Fog AWS Mock  request_id "," data [] push ","Fog AWS Mock  dhcp_options_id ","response status= ","Excon Response  new tap ","Excon Response  new ","params merge! "," indexed_multidimensional_params "]}," Fog Compute AWS Real indexed_multidimensional_params":{"type":"method","name":"indexed_multidimensional_params","children":[],"call":["params []= "," format ","(splat\n  (send\n    (lvar :multi_params) :[]\n    (lvar :key))) each_with_index ","multi_params [] ","multi_params keys each_with_index ","multi_params keys "]}," Fog Compute AWS Real create_dhcp_options":{"type":"method","name":"create_dhcp_options","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"CreateDhcpOptions\")) merge! ","Fog Parsers Compute AWS CreateDhcpOptions  new ","params merge! "," indexed_multidimensional_params "]}," Fog Compute AWS Mock copy_snapshot":{"type":"method","name":"copy_snapshot","children":[],"call":["response body= ","(pair\n  (str \"requestId\")\n  (send\n    (const\n      (const\n        (const nil :Fog) :AWS) :Mock) :request_id)) merge! ","Fog AWS Mock  request_id "," data [] []= "," data [] "," data ","Fog AWS Mock  snapshot_id ","response status= ","Excon Response  new ","Excon Response  new  body= ","Fog AWS Mock  Fog AWS Mock  snapshot_id  ","Excon Response  new  status= "]}," Fog Compute AWS Real copy_snapshot":{"type":"method","name":"copy_snapshot","children":[],"call":[" request ","Fog Parsers Compute AWS CopySnapshot  new ","params []= ","options [] ","Fog Logger  warning ","options is_a? "]}," Fog Compute AWS Mock copy_image":{"type":"method","name":"copy_image","children":[],"call":["response body= ","(pair\n  (str \"requestId\")\n  (send\n    (const\n      (const\n        (const nil :Fog) :AWS) :Mock) :request_id)) merge! ","Fog AWS Mock  request_id "," data [] []= "," data [] "," data ","Fog AWS Mock  image_id ","response status= ","Excon Response  new ","Excon Response  new  body= ","Fog AWS Mock  Fog AWS Mock  image_id  ","Excon Response  new  status= "]}," Fog Compute AWS Real copy_image":{"type":"method","name":"copy_image","children":[],"call":[" request ","Fog Parsers Compute AWS CopyImage  new "]}," Fog Compute AWS Real cancel_spot_instance_requests":{"type":"method","name":"cancel_spot_instance_requests","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"CancelSpotInstanceRequests\")) merge! ","Fog Parsers Compute AWS CancelSpotInstanceRequests  new ","Fog AWS  indexed_param "]}," Fog Compute AWS Mock find_matching_permission":{"type":"method","name":"find_matching_permission","children":[],"call":["permission [] == ","group_permission [] ","permission [] ","group [] find ","group [] "]}," Fog Compute AWS Mock normalize_permissions":{"type":"method","name":"normalize_permissions","children":[],"call":["normalized_permissions << ","r [] ","(or\n  (send\n    (lvar :permission) :[]\n    (str \"IpRanges\"))\n  (array)) map ","permission [] ","security_group [] ","authorized_group [] "," data [] "," data ","sg [] == ","sg [] "," data [] values find "," data [] values "," data [] [] ","(or\n  (send\n    (lvar :permission) :[]\n    (str \"Groups\"))\n  (array)) map "," Integer ","(str \"tcp\") include? ","options [] each ","options [] ","(str \"tcp\") each "," data [] [] [] ","options [] =~ "," raise ","Fog Compute AWS NotFound  new ","v [] == ","v [] "," data [] find "]}," Fog Compute AWS Mock verify_permission_options":{"type":"method","name":"verify_permission_options","children":[],"call":[" verify_permission_options ","options [] each ","options [] "," raise ","Fog Compute AWS Error  new ","options [] empty? ","options [] is_a? ! ","options [] is_a? ","options key? ","options [] ! ","is_vpc ! ","(str \"tcp\") include? ! ","(str \"tcp\") include? ","options size <= ","options size "]}," Fog Compute AWS Mock authorize_security_group_ingress":{"type":"method","name":"authorize_security_group_ingress","children":[],"call":[" raise ","Fog Compute AWS NotFound  new ","response body= ","Fog AWS Mock  request_id ","response status= ","group [] << ","group [] ","permission [] ","matching_group_permission [] "," find_matching_permission ","normalized_permissions each ","matching_group_permission [] include? ","permission [] any? "," normalize_permissions "," verify_permission_options ","group [] != "," data [] [] "," data [] "," data ","Excon Response  new ","(send\n  (send\n    (send\n      (self) :data) :[]\n    (sym :security_groups)) :reject) keys first ","(send\n  (send\n    (send\n      (self) :data) :[]\n    (sym :security_groups)) :reject) keys ","v [] != ","options [] ","v [] "," data [] reject ","options key? ","Fog AWS  parse_security_group_options ","options fetch ","v [] == "," data [] values find "," data [] values ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  [] << "," data [] []  [] "," find_matching_permission  [] ","matching_ data [] [] _permission [] "," normalize_permissions  each "," find_matching_permission  [] include? ","matching_ data [] [] _permission [] include? "," verify_permission_Fog AWS  parse_security_group_options  "," data [] []  [] != ","(send\n  (send\n    (send\n      (self) :data) :[]\n    (sym :security_ data [] [] s)) :reject) keys first ","(send\n  (send\n    (send\n      (self) :data) :[]\n    (sym :security_ data [] [] s)) :reject) keys ","Fog AWS  parse_security_group_options  [] ","Fog AWS  parse_security_group_options  key? ","Fog AWS  parse_security_ data [] [] _options ","Fog AWS  parse_security_group_Fog AWS  parse_security_group_options  ","Fog AWS  parse_security_group_options  fetch "]}," Fog Compute AWS Real indexed_ip_permissions_params":{"type":"method","name":"indexed_ip_permissions_params","children":[],"call":["v nil? ","params reject ","params []= ","ip_range [] "," format ","(or\n  (send\n    (lvar :permission) :[]\n    (str \"IpRanges\"))\n  (array)) each_with_index ","permission [] ","group [] ","(or\n  (send\n    (lvar :permission) :[]\n    (str \"Groups\"))\n  (array)) each_with_index ","ip_permissions each_with_index "]}," Fog Compute AWS Real authorize_security_group_ingress":{"type":"method","name":"authorize_security_group_ingress","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"AuthorizeSecurityGroupIngress\")) merge! ","Fog Parsers Compute AWS Basic  new ","options merge! "," indexed_ip_permissions_params ","options delete ","Fog AWS  parse_security_group_options ","Fog AWS  parse_security_group_options  merge! "," indexed_options delete _params ","Fog AWS  parse_security_group_options  delete ","Fog AWS  parse_security_group_Fog AWS  parse_security_group_options  "]}," Fog Compute AWS Mock attach_volume":{"type":"method","name":"attach_volume","children":[],"call":[" raise ","Fog Compute AWS Error  new ","message << ","volume_id ! ","instance_id ! ","Fog Compute AWS NotFound  new ","volume ! ","instance ! ","response body= ","(pair\n  (str \"requestId\")\n  (send\n    (const\n      (const\n        (const nil :Fog) :AWS) :Mock) :request_id)) merge! ","Fog AWS Mock  request_id ","response status= ","volume []= ","Time  now ","volume [] == ","volume [] "," data [] [] "," data [] "," data ","Excon Response  new "," data [] [] _id ! "," data [] []  ! ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  []= "," data [] []  [] == "," data [] []  [] "]}," Fog Compute AWS Real attach_volume":{"type":"method","name":"attach_volume","children":[],"call":[" request ","Fog Parsers Compute AWS AttachVolume  new "]}," Fog Compute AWS Mock attach_network_interface":{"type":"method","name":"attach_network_interface","children":[],"call":[" raise ","Fog Compute AWS NotFound  new ","response body= ","attachment [] ","Fog AWS Mock  request_id ","response status= ","attachment []= "," data [] [] [] "," data [] [] "," data [] "," data ","Fog Compute AWS Error  new ","ni_conf [] [] == ","ni_conf [] [] ","ni_conf [] "," data [] find ","(send\n  (send\n    (send\n      (self) :data) :[]\n    (sym :instances)) :find) ! ","i_conf [] == ","i_conf [] ","Excon Response  new ","Excon Response  new  body= "," data [] [] []  [] ","Excon Response  new  status= "," data [] [] []  []= "]}," Fog Compute AWS Real attach_network_interface":{"type":"method","name":"attach_network_interface","children":[],"call":[" request ","Fog Parsers Compute AWS AttachNetworkInterface  new "]}," Fog Compute AWS Mock attach_internet_gateway":{"type":"method","name":"attach_internet_gateway","children":[],"call":[" raise ","Fog Compute AWS Error  new "," message "," message << ","vpc_id ! ","internet_gateway_id ! ","response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Compute AWS Real attach_internet_gateway":{"type":"method","name":"attach_internet_gateway","children":[],"call":[" request ","Fog Parsers Compute AWS Basic  new "]}," Fog Compute AWS Mock add_route_association":{"type":"method","name":"add_route_association","children":[],"call":["response []= ","Fog Mock  random_hex "]}," Fog Compute AWS Mock associate_route_table":{"type":"method","name":"associate_route_table","children":[],"call":[" raise ","Fog Compute AWS NotFound  new ","routetable nil? ","response body= ","association [] ","Fog AWS Mock  request_id ","routetable [] push ","routetable [] "," add_route_association ","response status= ","Excon Response  new ","subnet nil? ! ","subnet nil? ","routetable nil? ! ","subnet [] eql? ","subnet [] "," data [] find "," data [] "," data ","routetable [] eql? ","Excon Response  new  body= "," add_route_association  [] "," add_route_ add_route_association  ","Excon Response  new  status= "]}," Fog Compute AWS Real associate_route_table":{"type":"method","name":"associate_route_table","children":[],"call":[" request ","Fog Parsers Compute AWS AssociateRouteTable  new "]}," Fog Compute AWS Mock associate_dhcp_options":{"type":"method","name":"associate_dhcp_options","children":[],"call":[" raise ","Fog Compute AWS Error  new "," message "," message << ","vpc_id ! ","dhcp_options_id ! ","response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Compute AWS Real associate_dhcp_options":{"type":"method","name":"associate_dhcp_options","children":[],"call":[" request ","Fog Parsers Compute AWS Basic  new "]}," Fog Compute AWS Mock associate_address":{"type":"method","name":"associate_address","children":[],"call":[" raise ","Fog Compute AWS Error  new ","params [] nil? ! ","params [] nil? ","params [] ","instance nil? ! ","instance nil? ","Fog Compute AWS NotFound  new ","address ! ","instance ! ","response body= ","Fog AWS Mock  request_id ","response status= ","instance []= ","Fog AWS Mock  dns_name_for "," data [] [] []= "," data [] [] ","instance [] "," data [] "," data ","address []= ","current_instance []= ","current_instance [] ","address [] ","address nil? ! ","address nil? ","public_ip nil? ","allocation_ip [] ","allocation_ip nil? ! ","allocation_ip nil? "," describe_addresses body [] first "," describe_addresses body [] "," describe_addresses body "," describe_addresses "," network_interface_id nil? ! "," network_interface_id nil? "," network_interface_id ","Excon Response  new ","params []= ","args [] ","args first ","args first kind_of? ","Fog Mock  random_hex ","vpc [] ","v [] == ","v [] "," data [] detect ","args first  [] nil? ! ","args first  [] nil? ","args first  [] "," data [] []  nil? ! "," data [] []  nil? "," data [] []  ! ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  []= "," data [] []  [] ","current_ data [] []  []= ","current_ data [] []  [] ","allocation_ip []  nil? "," describe_addresses body [] first  [] "," describe_addresses body [] first  nil? ! "," describe_addresses body [] first  nil? "," describe_ data [] [] es body [] first "," describe_ data [] [] es body [] "," describe_ data [] [] es body "," describe_ data [] [] es ","args first  []= "]}," Fog Compute AWS Real associate_address":{"type":"method","name":"associate_address","children":[],"call":[" request ","Fog Parsers Compute AWS AssociateAddress  new ","params [] ","params []= ","params [] nil? ","args [] ","args first ","args first kind_of? ","args first  [] ","args first  []= ","args first  [] nil? "]}," Fog Compute AWS Mock assign_private_ip_addresses":{"type":"method","name":"assign_private_ip_addresses","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new "," raise ","Fog Compute AWS Error  new ","options [] ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Compute AWS Real assign_private_ip_addresses":{"type":"method","name":"assign_private_ip_addresses","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"AssignPrivateIpAddresses\")) merge ","Fog Parsers Compute AWS AssignPrivateIpAddresses  new ","options merge! ","Fog AWS  indexed_param ","options delete "," raise ","Fog Compute AWS Error  new ","options [] "]}," Fog Compute AWS Mock allocate_address":{"type":"method","name":"allocate_address","children":[],"call":[" raise ","Excon Errors  status_error ","response body= ","Fog AWS Mock  request_id ","response status= ","(send\n  (lvar :data) :reject) merge ","k == ","data reject "," data [] []= "," data [] "," data ","data []= ","Fog Mock  random_hex ","domain == ","Fog AWS Mock  ip_address "," describe_addresses body [] size < "," data [] [] "," describe_addresses body [] size "," describe_addresses body [] "," describe_addresses body "," describe_addresses ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Compute AWS Real allocate_address":{"type":"method","name":"allocate_address","children":[],"call":[" request ","Fog Parsers Compute AWS AllocateAddress  new ","domain == "]}," Fog AWS CloudWatch Real set_alarm_state":{"type":"method","name":"set_alarm_state","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"SetAlarmState\")) merge ","Fog Parsers AWS CloudWatch SetAlarmState  new "]}," Fog AWS CloudWatch Real flatten_hash":{"type":"method","name":"flatten_hash","children":[],"call":["finishing []= ","nested_hash each ","top_level_value is_a? ","starting each "]}," Fog AWS CloudWatch Real put_metric_data":{"type":"method","name":"put_metric_data","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"PutMetricData\")) merge ","Fog Parsers AWS CloudWatch PutMetricData  new "," flatten_hash ","options merge! ","AWS  indexed_param ","metric_data map! ","metric_datum merge! ","dimension [] ","dimensions map ","metric_datum delete "," flatten_hash  merge! ","metric_datum delete  map "]}," Fog AWS CloudWatch Mock put_metric_alarm":{"type":"method","name":"put_metric_alarm","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new "," data [] []= ","(pair\n  (str \"AlarmARN\")\n  (dstr\n    (str \"arn:aws:cloudwatch:eu-west-1:000000000000:metricAlarm:00000000-0000-0000-0000-000000000000:alarmName/\")\n    (begin\n      (send\n        (lvar :options) :[]\n        (str \"AlarmName\"))))) merge! ","Time  now utc strftime ","Time  now utc ","Time  now ","options [] "," data [] "," data "," raise ","Fog Compute AWS Error  new ","The request must contain a the parameter '%s' % ","options key? ","requirements each ","supported_actions join ","found_actions empty? ","supported_actions include? ","options keys select ","options keys ","Fog AWS Compute Error  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS CloudWatch Real put_metric_alarm":{"type":"method","name":"put_metric_alarm","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"PutMetricAlarm\")) merge ","Fog Parsers AWS CloudWatch PutMetricAlarm  new ","options merge! ","AWS  indexed_param ","options delete ","dimension [] ","dimensions map ","options delete  map "]}," Fog AWS CloudWatch Mock list_metrics":{"type":"method","name":"list_metrics","children":[],"call":["response status= ","response body= ","Excon Response  new tap ","Excon Response  new ","(erange\n  (int 0)\n  (int 1)) map ","(erange\n  (int 0)\n  (int 500)) map ","options [] "]}," Fog AWS CloudWatch Real list_metrics":{"type":"method","name":"list_metrics","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ListMetrics\")) merge ","Fog Parsers AWS CloudWatch ListMetrics  new ","options merge! ","AWS  indexed_param ","dimension [] ","dimensions map ","options delete ","options delete  map "]}," Fog AWS CloudWatch Real get_metric_statistics":{"type":"method","name":"get_metric_statistics","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"GetMetricStatistics\")) merge ","Fog Parsers AWS CloudWatch GetMetricStatistics  new ","options merge! ","AWS  indexed_param ","dimension [] ","dimensions map ","options delete "," raise ","options key? ","(str \"Statistics\") each ","options delete  map "]}," Fog AWS CloudWatch Real enable_alarm_actions":{"type":"method","name":"enable_alarm_actions","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"EnableAlarmActions\")) merge ","Fog Parsers AWS CloudWatch EnableAlarmActions  new ","options merge! ","AWS  indexed_param "]}," Fog AWS CloudWatch Real disable_alarm_actions":{"type":"method","name":"disable_alarm_actions","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DisableAlarmActions\")) merge ","Fog Parsers AWS CloudWatch DisableAlarmActions  new ","options merge! ","AWS  indexed_param "]}," Fog AWS CloudWatch Real describe_alarms_for_metric":{"type":"method","name":"describe_alarms_for_metric","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeAlarmsForMetric\")) merge ","Fog Parsers AWS CloudWatch DescribeAlarmsForMetric  new ","options merge! ","AWS  indexed_param ","dimension [] ","dimensions map ","options delete ","options delete  map "]}," Fog AWS CloudWatch Mock describe_alarms":{"type":"method","name":"describe_alarms","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new ","results [] << ","(pair\n  (str \"AlarmName\")\n  (lvar :alarm_name)) merge! ","results [] "," data [] each "," data [] "," data ","r << ","(pair\n  (str \"AlarmName\")\n  (lvar :name)) merge ","records inject ","r merge "," data [] [] ","(splat\n  (lvar :alarm_names)) inject ","options delete ","Excon Response  new  body= ","Excon Response  new  status= "," data []  inject "," data [] [] s inject ","(splat\n  (lvar :options delete )) inject "]}," Fog AWS CloudWatch Real describe_alarms":{"type":"method","name":"describe_alarms","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeAlarms\")) merge ","Fog Parsers AWS CloudWatch DescribeAlarms  new ","options merge! ","AWS  indexed_param ","options delete "]}," Fog AWS CloudWatch Real describe_alarm_history":{"type":"method","name":"describe_alarm_history","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeAlarmHistory\")) merge ","Fog Parsers AWS CloudWatch DescribeAlarmHistory  new "]}," Fog AWS CloudWatch Mock delete_alarms":{"type":"method","name":"delete_alarms","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new "," data [] delete "," data [] "," data ","(splat\n  (lvar :alarm_names)) each "," raise "," data [] key? ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS CloudWatch Real delete_alarms":{"type":"method","name":"delete_alarms","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DeleteAlarms\")) merge ","Fog Parsers AWS CloudWatch DeleteAlarms  new ","options merge! ","AWS  indexed_param "]}," Fog AWS CloudFormation Real validate_template":{"type":"method","name":"validate_template","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ValidateTemplate\")) merge! ","Fog Parsers AWS CloudFormation ValidateTemplate  new "]}," Fog AWS CloudFormation Real update_stack":{"type":"method","name":"update_stack","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"UpdateStack\")) merge! ","Fog Parsers AWS CloudFormation UpdateStack  new ","params merge! ","Fog AWS  indexed_param ","options [] ","params []= ","options [] [] ","options [] keys each_with_index ","options [] keys "," raise ","ArgumentError  new ","num_tags > "]}," Fog AWS CloudFormation Real list_stacks":{"type":"method","name":"list_stacks","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ListStacks\")) merge! ","Fog Parsers AWS CloudFormation ListStacks  new "]}," Fog AWS CloudFormation Real list_stack_resources":{"type":"method","name":"list_stack_resources","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ListStackResources\")) merge! ","Fog Parsers AWS CloudFormation ListStackResources  new "]}," Fog AWS CloudFormation Real get_template":{"type":"method","name":"get_template","children":[],"call":[" request ","Fog Parsers AWS CloudFormation GetTemplate  new "]}," Fog AWS CloudFormation Real describe_stacks":{"type":"method","name":"describe_stacks","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeStacks\")) merge! ","Fog Parsers AWS CloudFormation DescribeStacks  new "]}," Fog AWS CloudFormation Real describe_stack_resources":{"type":"method","name":"describe_stack_resources","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeStackResources\")) merge! ","Fog Parsers AWS CloudFormation DescribeStackResources  new "]}," Fog AWS CloudFormation Real describe_stack_events":{"type":"method","name":"describe_stack_events","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeStackEvents\")) merge! ","Fog Parsers AWS CloudFormation DescribeStackEvents  new "]}," Fog AWS CloudFormation Real delete_stack":{"type":"method","name":"delete_stack","children":[],"call":[" request ","Fog Parsers AWS CloudFormation Basic  new "]}," Fog AWS CloudFormation Real create_stack":{"type":"method","name":"create_stack","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"CreateStack\")) merge! ","Fog Parsers AWS CloudFormation CreateStack  new ","params merge! ","Fog AWS  indexed_param ","options [] ","params []= "," raise ","ArgumentError  new ","num_tags > ","options [] [] ","options [] keys each_with_index ","options [] keys "]}," Fog CDN AWS Mock put_streaming_distribution_config":{"type":"method","name":"put_streaming_distribution_config","children":[],"call":["Fog CDN AWS Mock  error ","response body= ","k == ","distribution merge reject ","distribution merge ","Time  now utc iso8601 ","Time  now utc ","Time  now ","response headers []= ","Fog CDN AWS Mock  generic_id ","response headers ","response status= ","Excon Response  new ","distribution []= ","distribution [] merge! ","distribution [] ","distribution [] [] ","distribution [] != "," data [] [] "," data [] "," data ","Excon Response  new  body= "," data [] []  merge reject "," data [] []  merge ","Excon Response  new  headers []= ","Excon Response  new  headers ","Excon Response  new  status= "," data [] []  []= "," data [] []  [] merge! "," data [] []  [] "," data [] []  [] [] "," data [] []  [] != "]}," Fog CDN AWS Real put_streaming_distribution_config":{"type":"method","name":"put_streaming_distribution_config","children":[],"call":[" request ","Fog Parsers CDN AWS StreamingDistribution  new ","data << "]}," Fog CDN AWS Mock put_distribution_config":{"type":"method","name":"put_distribution_config","children":[],"call":["Fog CDN AWS Mock  error ","response body= ","k == ","distribution merge reject ","distribution merge ","Time  now utc iso8601 ","Time  now utc ","Time  now ","response headers []= ","Fog CDN AWS Mock  generic_id ","response headers ","response status= ","Excon Response  new ","distribution []= ","distribution [] merge! ","distribution [] ","distribution [] [] ","distribution [] != "," data [] [] "," data [] "," data ","Excon Response  new  body= "," data [] []  merge reject "," data [] []  merge ","Excon Response  new  headers []= ","Excon Response  new  headers ","Excon Response  new  status= "," data [] []  []= "," data [] []  [] merge! "," data [] []  [] "," data [] []  [] [] "," data [] []  [] != "]}," Fog CDN AWS Real put_distribution_config":{"type":"method","name":"put_distribution_config","children":[],"call":[" request ","Fog Parsers CDN AWS Distribution  new ","data << "]}," Fog CDN AWS Mock post_streaming_distribution":{"type":"method","name":"post_streaming_distribution","children":[],"call":["response body= "," data [] []= "," data [] "," data ","options [] ","Time  now utc iso8601 ","Time  now utc ","Time  now ","Fog CDN AWS Mock  domain_name ","Fog CDN AWS Mock  distribution_id ","options []= ","Time  now to_i to_s ","Time  now to_i ","response status= ","Excon Response  new ","Fog CDN AWS Mock  error ","(send\n  (send\n    (lvar :d) :[]\n    (str \"CNAME\")) :&\n  (begin\n    (or\n      (send\n        (lvar :options) :[]\n        (str \"CNAME\"))\n      (array)))) empty? ","d [] & ","d [] "," data [] values any? "," data [] values ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog CDN AWS Real post_streaming_distribution":{"type":"method","name":"post_streaming_distribution","children":[],"call":[" request ","Fog Parsers CDN AWS StreamingDistribution  new ","data << ","options []= ","Time  now to_i to_s ","Time  now to_i ","Time  now "]}," Fog CDN AWS Mock post_invalidation":{"type":"method","name":"post_invalidation","children":[],"call":["Fog CDN AWS Mock  error ","response body= ","response status= ","Excon Response  new "," data [] [] []= "," data [] [] "," data [] "," data ","distribution [] ","Time  now utc iso8601 ","Time  now utc ","Time  now ","Fog CDN AWS Mock  distribution_id ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  [] ","Fog CDN AWS Mock   data [] [] _id "]}," Fog CDN AWS Real post_invalidation":{"type":"method","name":"post_invalidation","children":[],"call":[" request ","Fog Parsers CDN AWS PostInvalidation  new ","body << ","body << << << ","body << << "]}," Fog CDN AWS Mock post_distribution":{"type":"method","name":"post_distribution","children":[],"call":["response body= "," data [] []= "," data [] "," data ","options [] ","Time  now utc iso8601 ","Time  now utc ","Time  now ","Fog CDN AWS Mock  domain_name ","Fog CDN AWS Mock  distribution_id ","options []= ","Time  now to_i to_s ","Time  now to_i ","response status= ","Excon Response  new ","Fog CDN AWS Mock  error ","(send\n  (send\n    (lvar :d) :[]\n    (str \"CNAME\")) :&\n  (begin\n    (or\n      (send\n        (lvar :options) :[]\n        (str \"CNAME\"))\n      (array)))) empty? ","d [] & ","d [] "," data [] values any? "," data [] values ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog CDN AWS Real post_distribution":{"type":"method","name":"post_distribution","children":[],"call":[" request ","Fog Parsers CDN AWS Distribution  new ","data << ","options []= ","Time  now to_i to_s ","Time  now to_i ","Time  now "]}," Fog CDN AWS Mock to_streaming_distribution_summary":{"type":"method","name":"to_streaming_distribution_summary","children":[],"call":["(pair\n  (str \"DomainName\")\n  (send\n    (lvar :d) :[]\n    (str \"DomainName\"))) merge ","d [] "]}," Fog CDN AWS Mock get_streaming_distribution_list":{"type":"method","name":"get_streaming_distribution_list","children":[],"call":["response body= "," to_streaming_distribution_summary ","distributions map ","Fog Mock  random_hex "," data [] values "," data [] "," data ","response status= ","Excon Response  new ","Excon Response  new  body= "," data [] values  map ","Excon Response  new  status= "]}," Fog CDN AWS Real get_streaming_distribution_list":{"type":"method","name":"get_streaming_distribution_list","children":[],"call":[" request ","Fog Parsers CDN AWS GetStreamingDistributionList  new "]}," Fog CDN AWS Mock get_streaming_distribution":{"type":"method","name":"get_streaming_distribution","children":[],"call":["distribution []= ","response headers []= ","response headers ","response body= ","k == ","distribution reject ","response status= ","Fog CDN AWS Mock  generic_id ","Time  now - >= ","Fog Mock  delay * ","Fog Mock  delay ","Time  now - ","Time  parse ","distribution [] ","Time  now ","distribution [] == ","Fog CDN AWS Mock  error "," data [] [] "," data [] "," data ","Excon Response  new "," data [] []  []= ","Excon Response  new  headers []= ","Excon Response  new  headers ","Excon Response  new  body= "," data [] []  reject ","Excon Response  new  status= "," data [] []  [] "," data [] []  [] == "]}," Fog CDN AWS Real get_streaming_distribution":{"type":"method","name":"get_streaming_distribution","children":[],"call":[" request ","Fog Parsers CDN AWS StreamingDistribution  new "]}," Fog CDN AWS Mock to_invalidation_summary":{"type":"method","name":"to_invalidation_summary","children":[],"call":["d [] "]}," Fog CDN AWS Mock get_invalidation_list":{"type":"method","name":"get_invalidation_list","children":[],"call":["response body= "," to_invalidation_summary ","invalidations map ","Fog Mock  random_hex ","response status= ","Excon Response  new ","distribution [] ","invalidation []= ","Time  now - >= ","Fog Mock  delay * ","Fog Mock  delay ","Time  now - ","Time  parse ","invalidation [] ","Time  now ","invalidation [] == ","invalidations each ","(or\n  (send\n    (send\n      (send\n        (self) :data) :[]\n      (sym :invalidations)) :[]\n    (lvar :distribution_id))\n  (hash)) values "," data [] [] "," data [] "," data ","Fog CDN AWS Mock  error ","Excon Response  new  body= ","(or\n  (send\n    (send\n      (send\n        (self) :data) :[]\n      (sym :invalidations)) :[]\n    (lvar :distribution_id))\n  (hash)) values  map ","Excon Response  new  status= "," data [] []  [] ","(or\n  (send\n    (send\n      (send\n        (self) :data) :[]\n      (sym :invalidations)) :[]\n    (lvar :distribution_id))\n  (hash)) values  each ","(or\n  (send\n    (send\n      (send\n        (self) :data) :[]\n      (sym :(or\n  (send\n    (send\n      (send\n        (self) :data) :[]\n      (sym :invalidations)) :[]\n    (lvar :distribution_id))\n  (hash)) values )) :[]\n    (lvar :distribution_id))\n  (hash)) values ","(or\n  (send\n    (send\n      (send\n        (self) :data) :[]\n      (sym :invalidations)) :[]\n    (lvar : data [] [] _id))\n  (hash)) values "]}," Fog CDN AWS Real get_invalidation_list":{"type":"method","name":"get_invalidation_list","children":[],"call":[" request ","Fog Parsers CDN AWS GetInvalidationList  new "]}," Fog CDN AWS Mock get_invalidation":{"type":"method","name":"get_invalidation","children":[],"call":["response body= ","response status= ","Excon Response  new ","distribution [] ","invalidation []= ","Time  now - >= ","Fog Mock  delay * ","Fog Mock  delay ","Time  now - ","Time  parse ","invalidation [] ","Time  now ","invalidation [] == ","Fog CDN AWS Mock  error "," data [] [] [] "," data [] [] "," data [] "," data ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  [] "," data [] [] []  []= "," data [] [] []  [] "," data [] [] []  [] == "]}," Fog CDN AWS Real get_invalidation":{"type":"method","name":"get_invalidation","children":[],"call":[" request ","Fog Parsers CDN AWS GetInvalidation  new "]}," Fog CDN AWS Mock to_distribution_summary":{"type":"method","name":"to_distribution_summary","children":[],"call":["(pair\n  (str \"DomainName\")\n  (send\n    (lvar :d) :[]\n    (str \"DomainName\"))) merge ","d [] "]}," Fog CDN AWS Mock get_distribution_list":{"type":"method","name":"get_distribution_list","children":[],"call":["response body= "," to_distribution_summary ","distributions map ","Fog Mock  random_hex "," data [] values "," data [] "," data ","response status= ","Excon Response  new ","Excon Response  new  body= "," data [] values  map ","Excon Response  new  status= "]}," Fog CDN AWS Real get_distribution_list":{"type":"method","name":"get_distribution_list","children":[],"call":[" request ","Fog Parsers CDN AWS GetDistributionList  new "]}," Fog CDN AWS Mock get_distribution":{"type":"method","name":"get_distribution","children":[],"call":["distribution []= ","response headers []= ","response headers ","response body= ","(pair\n  (str \"InProgressInvalidationBatches\")\n  (int 0)) merge ","k == ","distribution reject ","response status= ","Fog CDN AWS Mock  generic_id ","Time  now - >= ","Fog Mock  delay * ","Fog Mock  delay ","Time  now - ","Time  parse ","distribution [] ","Time  now ","distribution [] == ","Fog CDN AWS Mock  error "," data [] [] "," data [] "," data ","Excon Response  new "," data [] []  []= ","Excon Response  new  headers []= ","Excon Response  new  headers ","Excon Response  new  body= "," data [] []  reject ","Excon Response  new  status= "," data [] []  [] "," data [] []  [] == "]}," Fog CDN AWS Real get_distribution":{"type":"method","name":"get_distribution","children":[],"call":[" request ","Fog Parsers CDN AWS Distribution  new "]}," Fog CDN AWS Mock delete_streaming_distribution":{"type":"method","name":"delete_streaming_distribution","children":[],"call":["Fog CDN AWS Mock  error ","response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new "," data [] delete "," data [] "," data ","distribution [] [] ","distribution [] ","distribution [] != "," data [] [] ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  [] [] "," data [] []  [] "," data [] []  [] != "]}," Fog CDN AWS Real delete_streaming_distribution":{"type":"method","name":"delete_streaming_distribution","children":[],"call":[" request "]}," Fog CDN AWS Mock delete_distribution":{"type":"method","name":"delete_distribution","children":[],"call":["Fog CDN AWS Mock  error ","response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new "," data [] delete "," data [] "," data ","distribution [] [] ","distribution [] ","distribution [] != "," data [] [] ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  [] [] "," data [] []  [] "," data [] []  [] != "]}," Fog CDN AWS Real delete_distribution":{"type":"method","name":"delete_distribution","children":[],"call":[" request "]}," Fog AWS ElasticBeanstalk Real validate_configuration_settings":{"type":"method","name":"validate_configuration_settings","children":[],"call":[" request ","(pair\n  (str \"Operation\")\n  (str \"ValidateConfigurationSettings\")) merge ","Fog Parsers AWS ElasticBeanstalk ValidateConfigurationSettings  new ","options merge! ","AWS  indexed_param ","options delete "]}," Fog AWS ElasticBeanstalk Real update_environment":{"type":"method","name":"update_environment","children":[],"call":[" request ","(pair\n  (str \"Operation\")\n  (str \"UpdateEnvironment\")) merge ","Fog Parsers AWS ElasticBeanstalk UpdateEnvironment  new ","options merge! ","AWS  indexed_param ","options delete "]}," Fog AWS ElasticBeanstalk Real update_configuration_template":{"type":"method","name":"update_configuration_template","children":[],"call":[" request ","(pair\n  (str \"Operation\")\n  (str \"UpdateConfigurationTemplate\")) merge ","Fog Parsers AWS ElasticBeanstalk UpdateConfigurationTemplate  new ","options merge! ","AWS  indexed_param ","options delete "]}," Fog AWS ElasticBeanstalk Real update_application_version":{"type":"method","name":"update_application_version","children":[],"call":[" request ","(pair\n  (str \"Operation\")\n  (str \"UpdateApplicationVersion\")) merge ","Fog Parsers AWS ElasticBeanstalk UpdateApplicationVersion  new "]}," Fog AWS ElasticBeanstalk Real update_application":{"type":"method","name":"update_application","children":[],"call":[" request ","(pair\n  (str \"Operation\")\n  (str \"UpdateApplication\")) merge ","Fog Parsers AWS ElasticBeanstalk UpdateApplication  new "]}," Fog AWS ElasticBeanstalk Real terminate_environment":{"type":"method","name":"terminate_environment","children":[],"call":[" request ","(pair\n  (str \"Operation\")\n  (str \"TerminateEnvironment\")) merge ","Fog Parsers AWS ElasticBeanstalk TerminateEnvironment  new "]}," Fog AWS ElasticBeanstalk Real swap_environment_cnames":{"type":"method","name":"swap_environment_cnames","children":[],"call":[" request ","(pair\n  (str \"Operation\")\n  (str \"SwapEnvironmentCNAMEs\")) merge ","Fog Parsers AWS ElasticBeanstalk Empty  new "]}," Fog AWS ElasticBeanstalk Real retrieve_environment_info":{"type":"method","name":"retrieve_environment_info","children":[],"call":[" request ","(pair\n  (str \"Operation\")\n  (str \"RetrieveEnvironmentInfo\")) merge ","Fog Parsers AWS ElasticBeanstalk RetrieveEnvironmentInfo  new "]}," Fog AWS ElasticBeanstalk Real restart_app_server":{"type":"method","name":"restart_app_server","children":[],"call":[" request ","(pair\n  (str \"Operation\")\n  (str \"RestartAppServer\")) merge ","Fog Parsers AWS ElasticBeanstalk Empty  new "]}," Fog AWS ElasticBeanstalk Real request_environment_info":{"type":"method","name":"request_environment_info","children":[],"call":[" request ","(pair\n  (str \"Operation\")\n  (str \"RequestEnvironmentInfo\")) merge ","Fog Parsers AWS ElasticBeanstalk Empty  new "]}," Fog AWS ElasticBeanstalk Real rebuild_environment":{"type":"method","name":"rebuild_environment","children":[],"call":[" request ","(pair\n  (str \"Operation\")\n  (str \"RebuildEnvironment\")) merge ","Fog Parsers AWS ElasticBeanstalk Empty  new "]}," Fog AWS ElasticBeanstalk Real list_available_solution_stacks":{"type":"method","name":"list_available_solution_stacks","children":[],"call":[" request ","Fog Parsers AWS ElasticBeanstalk ListAvailableSolutionStacks  new "]}," Fog AWS ElasticBeanstalk Real describe_events":{"type":"method","name":"describe_events","children":[],"call":[" request ","(pair\n  (str \"Operation\")\n  (str \"DescribeEvents\")) merge ","Fog Parsers AWS ElasticBeanstalk DescribeEvents  new "]}," Fog AWS ElasticBeanstalk Real describe_environments":{"type":"method","name":"describe_environments","children":[],"call":[" request ","(pair\n  (str \"Operation\")\n  (str \"DescribeEnvironments\")) merge ","Fog Parsers AWS ElasticBeanstalk DescribeEnvironments  new ","options merge! ","AWS  indexed_param ","options delete "]}," Fog AWS ElasticBeanstalk Real describe_environment_resources":{"type":"method","name":"describe_environment_resources","children":[],"call":[" request ","(pair\n  (str \"Operation\")\n  (str \"DescribeEnvironmentResources\")) merge ","Fog Parsers AWS ElasticBeanstalk DescribeEnvironmentResources  new "]}," Fog AWS ElasticBeanstalk Real describe_configuration_settings":{"type":"method","name":"describe_configuration_settings","children":[],"call":[" request ","(pair\n  (str \"Operation\")\n  (str \"DescribeConfigurationSettings\")) merge ","Fog Parsers AWS ElasticBeanstalk DescribeConfigurationSettings  new "]}," Fog AWS ElasticBeanstalk Real describe_configuration_options":{"type":"method","name":"describe_configuration_options","children":[],"call":[" request ","(pair\n  (str \"Operation\")\n  (str \"DescribeConfigurationOptions\")) merge ","Fog Parsers AWS ElasticBeanstalk DescribeConfigurationOptions  new ","options merge! ","AWS  indexed_param ","options delete "]}," Fog AWS ElasticBeanstalk Real describe_applications":{"type":"method","name":"describe_applications","children":[],"call":[" request ","(pair\n  (str \"Operation\")\n  (str \"DescribeApplications\")) merge ","Fog Parsers AWS ElasticBeanstalk DescribeApplications  new ","options merge! ","AWS  indexed_param "]}," Fog AWS ElasticBeanstalk Real describe_application_versions":{"type":"method","name":"describe_application_versions","children":[],"call":[" request ","(pair\n  (str \"Operation\")\n  (str \"DescribeApplicationVersions\")) merge ","Fog Parsers AWS ElasticBeanstalk DescribeApplicationVersions  new ","options merge! ","AWS  indexed_param ","options delete "]}," Fog AWS ElasticBeanstalk Real delete_environment_configuration":{"type":"method","name":"delete_environment_configuration","children":[],"call":[" request ","(pair\n  (str \"Operation\")\n  (str \"DeleteEnvironmentConfiguration\")) merge ","Fog Parsers AWS ElasticBeanstalk Empty  new "]}," Fog AWS ElasticBeanstalk Real delete_configuration_template":{"type":"method","name":"delete_configuration_template","children":[],"call":[" request ","(pair\n  (str \"Operation\")\n  (str \"DeleteConfigurationTemplate\")) merge ","Fog Parsers AWS ElasticBeanstalk Empty  new "]}," Fog AWS ElasticBeanstalk Real delete_application_version":{"type":"method","name":"delete_application_version","children":[],"call":[" request ","(pair\n  (str \"Operation\")\n  (str \"DeleteApplicationVersion\")) merge ","Fog Parsers AWS ElasticBeanstalk Empty  new ","options []= ","delete_source_bundle nil? "]}," Fog AWS ElasticBeanstalk Real delete_application":{"type":"method","name":"delete_application","children":[],"call":[" request ","(pair\n  (str \"Operation\")\n  (str \"DeleteApplication\")) merge ","Fog Parsers AWS ElasticBeanstalk Empty  new "]}," Fog AWS ElasticBeanstalk Real create_storage_location":{"type":"method","name":"create_storage_location","children":[],"call":[" request ","Fog Parsers AWS ElasticBeanstalk CreateStorageLocation  new "]}," Fog AWS ElasticBeanstalk Real create_environment":{"type":"method","name":"create_environment","children":[],"call":[" request ","(pair\n  (str \"Operation\")\n  (str \"CreateEnvironment\")) merge ","Fog Parsers AWS ElasticBeanstalk CreateEnvironment  new ","options merge! ","AWS  indexed_param ","options delete "]}," Fog AWS ElasticBeanstalk Real create_configuration_template":{"type":"method","name":"create_configuration_template","children":[],"call":[" request ","(pair\n  (str \"Operation\")\n  (str \"CreateConfigurationTemplate\")) merge ","Fog Parsers AWS ElasticBeanstalk CreateConfigurationTemplate  new ","options merge! ","AWS  serialize_keys ","options delete ","AWS  indexed_param "]}," Fog AWS ElasticBeanstalk Real create_application_version":{"type":"method","name":"create_application_version","children":[],"call":[" request ","(pair\n  (str \"Operation\")\n  (str \"CreateApplicationVersion\")) merge ","Fog Parsers AWS ElasticBeanstalk CreateApplicationVersion  new ","options merge! ","source_bundle [] ","options delete ","options delete  [] "]}," Fog AWS ElasticBeanstalk Real create_application":{"type":"method","name":"create_application","children":[],"call":[" request ","(pair\n  (str \"Operation\")\n  (str \"CreateApplication\")) merge ","Fog Parsers AWS ElasticBeanstalk CreateApplication  new "]}," Fog AWS ElasticBeanstalk Real check_dns_availability":{"type":"method","name":"check_dns_availability","children":[],"call":[" request ","(pair\n  (str \"Operation\")\n  (str \"CheckDNSAvailability\")) merge ","Fog Parsers AWS ElasticBeanstalk CheckDNSAvailability  new "]}," Fog AWS AutoScaling Mock update_auto_scaling_group":{"type":"method","name":"update_auto_scaling_group","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new "," data [] [] merge! "," data [] [] "," data [] "," data "," raise ","Fog AWS AutoScaling ValidationError  new "," data [] key? ","unexpected_options join ","unexpected_options empty? ","options keys - ","ExpectedOptions  [] ","options keys ","Excon Response  new  body= ","Excon Response  new  status= ","options keys -  join ","options keys -  empty? "]}," Fog AWS AutoScaling Real update_auto_scaling_group":{"type":"method","name":"update_auto_scaling_group","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"UpdateAutoScalingGroup\")) merge! ","Fog Parsers AWS AutoScaling Basic  new ","options merge! ","AWS  indexed_param ","options delete "]}," Fog AWS AutoScaling Mock terminate_instance_in_auto_scaling_group":{"type":"method","name":"terminate_instance_in_auto_scaling_group","children":[],"call":["Fog Mock  not_implemented "]}," Fog AWS AutoScaling Real terminate_instance_in_auto_scaling_group":{"type":"method","name":"terminate_instance_in_auto_scaling_group","children":[],"call":[" request ","Fog Parsers AWS AutoScaling TerminateInstanceInAutoScalingGroup  new ","should_decrement_desired_capacity to_s "]}," Fog AWS AutoScaling Mock suspend_processes":{"type":"method","name":"suspend_processes","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new "," raise ","Fog AWS AutoScaling ValidationError  new "," data [] key? "," data [] "," data ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS AutoScaling Real suspend_processes":{"type":"method","name":"suspend_processes","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"SuspendProcesses\")) merge! ","Fog Parsers AWS AutoScaling Basic  new ","options merge! ","AWS  indexed_param ","options delete "]}," Fog AWS AutoScaling Mock set_instance_health":{"type":"method","name":"set_instance_health","children":[],"call":["Fog Mock  not_implemented "," raise ","Fog AWS AutoScaling ValidationError  new "," data [] include? "," data [] "," data "]}," Fog AWS AutoScaling Real set_instance_health":{"type":"method","name":"set_instance_health","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"SetInstanceHealth\")) merge! ","Fog Parsers AWS AutoScaling Basic  new "]}," Fog AWS AutoScaling Mock set_desired_capacity":{"type":"method","name":"set_desired_capacity","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new "," data [] [] []= "," data [] [] "," data [] "," data ","Fog AWS AutoScaling ValidationError  new "," data [] key? ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS AutoScaling Real set_desired_capacity":{"type":"method","name":"set_desired_capacity","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"SetDesiredCapacity\")) merge! ","Fog Parsers AWS AutoScaling Basic  new "]}," Fog AWS AutoScaling Mock resume_processes":{"type":"method","name":"resume_processes","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new "," raise ","Fog AWS AutoScaling ValidationError  new "," data [] key? "," data [] "," data ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS AutoScaling Real resume_processes":{"type":"method","name":"resume_processes","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ResumeProcesses\")) merge! ","Fog Parsers AWS AutoScaling Basic  new ","options merge! ","AWS  indexed_param ","options delete "]}," Fog AWS AutoScaling Mock put_scheduled_update_group_action":{"type":"method","name":"put_scheduled_update_group_action","children":[],"call":["Fog Mock  not_implemented "]}," Fog AWS AutoScaling Real put_scheduled_update_group_action":{"type":"method","name":"put_scheduled_update_group_action","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"PutScheduledUpdateGroupAction\")) merge! ","Fog Parsers AWS AutoScaling Basic  new ","Time  parse utc iso8601 ","Time  parse utc ","Time  parse ","time utc iso8601 ","time utc ","time class == ","time class ","time nil? ! ","time nil? ","options [] ","options [] nil? ","Time  parse utc iso8601  utc iso8601 ","time utc iso8601  utc iso8601 ","options []  utc iso8601 ","Time  parse utc iso8601  utc ","time utc iso8601  utc ","options []  utc ","Time  parse utc iso8601  class == ","time utc iso8601  class == ","options []  class == ","Time  parse utc iso8601  class ","time utc iso8601  class ","options []  class ","Time  parse utc iso8601  nil? ! ","time utc iso8601  nil? ! ","options []  nil? ! ","Time  parse utc iso8601  nil? ","time utc iso8601  nil? ","options []  nil? "]}," Fog AWS AutoScaling Mock put_scaling_policy":{"type":"method","name":"put_scaling_policy","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new "," data [] []= ","(pair\n  (str \"AdjustmentType\")\n  (lvar :adjustment_type)) merge! ","Fog AWS Mock  arn "," region "," data [] "," data "," raise ","Fog AWS AutoScaling ValidationError  new "," data [] key? ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS AutoScaling Real put_scaling_policy":{"type":"method","name":"put_scaling_policy","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"PutScalingPolicy\")) merge! ","Fog Parsers AWS AutoScaling PutScalingPolicy  new "]}," Fog AWS AutoScaling Mock put_notification_configuration":{"type":"method","name":"put_notification_configuration","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new "," data [] [] []= ","notification_types to_a uniq ","notification_types to_a "," data [] [] "," data [] "," data "," raise ","Fog AWS AutoScaling ValidationError  new ","invalid_types first ","invalid_types empty? ","notification_types to_a - ","notification_types to_a empty? "," data [] key? ","Excon Response  new  body= ","Excon Response  new  status= ","notification_types to_a -  first ","notification_types to_a -  empty? "]}," Fog AWS AutoScaling Real put_notification_configuration":{"type":"method","name":"put_notification_configuration","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"PutNotificationConfiguration\")) merge! ","Fog Parsers AWS AutoScaling PutNotificationConfiguration  new ","AWS  indexed_param "]}," Fog AWS AutoScaling Mock execute_policy":{"type":"method","name":"execute_policy","children":[],"call":["Fog Mock  not_implemented "]}," Fog AWS AutoScaling Real execute_policy":{"type":"method","name":"execute_policy","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ExecutePolicy\")) merge! ","Fog Parsers AWS AutoScaling Basic  new "]}," Fog AWS AutoScaling Mock enable_metrics_collection":{"type":"method","name":"enable_metrics_collection","children":[],"call":["Fog Mock  not_implemented ","Fog AWS AutoScaling ValidationError  new "," data [] [] include? "," data [] [] "," data [] "," data "," data [] key? "]}," Fog AWS AutoScaling Real enable_metrics_collection":{"type":"method","name":"enable_metrics_collection","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"EnableMetricsCollection\")) merge! ","Fog Parsers AWS AutoScaling Basic  new ","options merge! ","AWS  indexed_param ","options delete "]}," Fog AWS AutoScaling Mock disable_metrics_collection":{"type":"method","name":"disable_metrics_collection","children":[],"call":["Fog Mock  not_implemented ","Fog AWS AutoScaling ValidationError  new "," data [] key? "," data [] "," data "]}," Fog AWS AutoScaling Real disable_metrics_collection":{"type":"method","name":"disable_metrics_collection","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DisableMetricsCollection\")) merge! ","Fog Parsers AWS AutoScaling Basic  new ","options merge! ","AWS  indexed_param ","options delete "]}," Fog AWS AutoScaling Mock describe_termination_policy_types":{"type":"method","name":"describe_termination_policy_types","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new ","results [] << ","results [] "," data [] each "," data [] "," data ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS AutoScaling Real describe_termination_policy_types":{"type":"method","name":"describe_termination_policy_types","children":[],"call":[" request ","Fog Parsers AWS AutoScaling DescribeTerminationPolicyTypes  new "]}," Fog AWS AutoScaling Mock describe_tags":{"type":"method","name":"describe_tags","children":[],"call":[" raise "]}," Fog AWS AutoScaling Real describe_tags":{"type":"method","name":"describe_tags","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeTags\")) merge! ","Fog Parsers AWS AutoScaling DescribeTags  new ","options merge! ","Fog AWS  indexed_filters ","options delete ","Fog AWS  indexed_options delete  "]}," Fog AWS AutoScaling Mock describe_scheduled_actions":{"type":"method","name":"describe_scheduled_actions","children":[],"call":["Fog Mock  not_implemented "]}," Fog AWS AutoScaling Real describe_scheduled_actions":{"type":"method","name":"describe_scheduled_actions","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeScheduledActions\")) merge! ","Fog Parsers AWS AutoScaling DescribeScheduledActions  new ","options merge! ","AWS  indexed_param ","options delete "]}," Fog AWS AutoScaling Mock describe_scaling_process_types":{"type":"method","name":"describe_scaling_process_types","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new ","results [] << ","results [] "," data [] each "," data [] "," data ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS AutoScaling Real describe_scaling_process_types":{"type":"method","name":"describe_scaling_process_types","children":[],"call":[" request ","Fog Parsers AWS AutoScaling DescribeScalingProcessTypes  new "]}," Fog AWS AutoScaling Mock describe_scaling_activities":{"type":"method","name":"describe_scaling_activities","children":[],"call":["Fog Mock  not_implemented "]}," Fog AWS AutoScaling Real describe_scaling_activities":{"type":"method","name":"describe_scaling_activities","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeScalingActivities\")) merge! ","Fog Parsers AWS AutoScaling DescribeScalingActivities  new ","options merge! ","AWS  indexed_param ","options delete "]}," Fog AWS AutoScaling Mock describe_policies":{"type":"method","name":"describe_policies","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new ","results [] << ","(pair\n  (str \"PolicyName\")\n  (lvar :asp_name)) merge! ","results [] ","policy_set each ","options [] != ","asp_data [] ","options [] ","policy_set reject ","opt_value != ","opt_key == ","(splat\n  (send\n    (lvar :options) :[]\n    (str \"PolicyNames\"))) include? ! ","(splat\n  (send\n    (lvar :options) :[]\n    (str \"PolicyNames\"))) include? "," data [] "," data ","Excon Response  new  body= ","Excon Response  new  status= "," data []  each "," data []  reject "]}," Fog AWS AutoScaling Real describe_policies":{"type":"method","name":"describe_policies","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribePolicies\")) merge! ","Fog Parsers AWS AutoScaling DescribePolicies  new ","options merge! ","AWS  indexed_param ","options delete "]}," Fog AWS AutoScaling Mock describe_notification_configurations":{"type":"method","name":"describe_notification_configurations","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new ","results [] << ","results [] ","notification_types each ","(or\n  (send\n    (send\n      (send\n        (self) :data) :[]\n      (sym :notification_configurations)) :[]\n    (lvar :asg_name))\n  (hash)) each "," data [] [] "," data [] "," data ","(or\n  (send\n    (lvar :options) :[]\n    (str \"AutoScalingGroupNames\"))\n  (send\n    (send\n      (send\n        (self) :data) :[]\n      (sym :notification_configurations)) :keys)) each "," data [] keys ","options [] ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS AutoScaling Real describe_notification_configurations":{"type":"method","name":"describe_notification_configurations","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeNotificationConfigurations\")) merge! ","Fog Parsers AWS AutoScaling DescribeNotificationConfigurations  new ","options merge! ","AWS  indexed_param ","options delete "]}," Fog AWS AutoScaling Mock describe_metric_collection_types":{"type":"method","name":"describe_metric_collection_types","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new ","results [] << ","results [] "," data [] [] each "," data [] [] "," data [] "," data ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS AutoScaling Real describe_metric_collection_types":{"type":"method","name":"describe_metric_collection_types","children":[],"call":[" request ","Fog Parsers AWS AutoScaling DescribeMetricCollectionTypes  new "]}," Fog AWS AutoScaling Mock describe_launch_configurations":{"type":"method","name":"describe_launch_configurations","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new ","values dup "," data [] map "," data [] "," data ","(send\n  (lvar :lc) :map) compact ","l_conf [] dup ","l_conf [] ","name == "," data [] find ","lc map ","lc any? ","options delete ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS AutoScaling Real describe_launch_configurations":{"type":"method","name":"describe_launch_configurations","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeLaunchConfigurations\")) merge! ","Fog Parsers AWS AutoScaling DescribeLaunchConfigurations  new ","options merge! ","AWS  indexed_param ","options delete "]}," Fog AWS AutoScaling Mock describe_auto_scaling_notification_types":{"type":"method","name":"describe_auto_scaling_notification_types","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new ","results [] << ","results [] "," data [] each "," data [] "," data ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS AutoScaling Real describe_auto_scaling_notification_types":{"type":"method","name":"describe_auto_scaling_notification_types","children":[],"call":[" request ","Fog Parsers AWS AutoScaling DescribeAutoScalingNotificationTypes  new "]}," Fog AWS AutoScaling Mock describe_auto_scaling_instances":{"type":"method","name":"describe_auto_scaling_instances","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new ","results [] << ","(pair\n  (str \"AutoScalingGroupName\")\n  (lvar :asg_name)) merge! ","results [] ","asg_data [] each ","asg_data [] "," data [] each "," data [] "," data ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS AutoScaling Real describe_auto_scaling_instances":{"type":"method","name":"describe_auto_scaling_instances","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeAutoScalingInstances\")) merge! ","Fog Parsers AWS AutoScaling DescribeAutoScalingInstances  new ","options merge! ","AWS  indexed_param ","options delete "]}," Fog AWS AutoScaling Mock describe_auto_scaling_groups":{"type":"method","name":"describe_auto_scaling_groups","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new ","results [] << ","(pair\n  (str \"AutoScalingGroupName\")\n  (lvar :asg_name)) merge! ","results [] ","asg_set each ","(splat\n  (send\n    (lvar :options) :[]\n    (str \"AutoScalingGroupNames\"))) include? ! ","(splat\n  (send\n    (lvar :options) :[]\n    (str \"AutoScalingGroupNames\"))) include? ","options [] ","asg_set reject ","options [] nil? ! ","options [] nil? "," data [] "," data ","Excon Response  new  body= ","Excon Response  new  status= "," data []  each "," data []  reject "]}," Fog AWS AutoScaling Real describe_auto_scaling_groups":{"type":"method","name":"describe_auto_scaling_groups","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeAutoScalingGroups\")) merge! ","Fog Parsers AWS AutoScaling DescribeAutoScalingGroups  new ","options merge! ","AWS  indexed_param ","options delete "]}," Fog AWS AutoScaling Mock describe_adjustment_types":{"type":"method","name":"describe_adjustment_types","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new ","results [] << ","results [] "," data [] each "," data [] "," data ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS AutoScaling Real describe_adjustment_types":{"type":"method","name":"describe_adjustment_types","children":[],"call":[" request ","Fog Parsers AWS AutoScaling DescribeAdjustmentTypes  new "]}," Fog AWS AutoScaling Mock delete_tags":{"type":"method","name":"delete_tags","children":[],"call":[" raise ","Fog AWS AutoScaling ValidationError  new ","tags to_a empty? ","tags to_a "]}," Fog AWS AutoScaling Real delete_tags":{"type":"method","name":"delete_tags","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DeleteTags\")) merge! ","Fog Parsers AWS AutoScaling Basic  new ","params []= ","i + ","value nil? ","tag each ","tags each_with_index "]}," Fog AWS AutoScaling Mock delete_scheduled_action":{"type":"method","name":"delete_scheduled_action","children":[],"call":["Fog Mock  not_implemented "]}," Fog AWS AutoScaling Real delete_scheduled_action":{"type":"method","name":"delete_scheduled_action","children":[],"call":[" request ","Fog Parsers AWS AutoScaling Basic  new "]}," Fog AWS AutoScaling Mock delete_policy":{"type":"method","name":"delete_policy","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new "," raise "," data [] delete "," data [] "," data ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS AutoScaling Real delete_policy":{"type":"method","name":"delete_policy","children":[],"call":[" request ","Fog Parsers AWS AutoScaling Basic  new "]}," Fog AWS AutoScaling Mock delete_notification_configuration":{"type":"method","name":"delete_notification_configuration","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new "," data [] delete "," data [] "," data "," data [] [] empty? "," data [] [] "," data [] [] delete "," raise ","Fog AWS AutoScaling ValidationError  new "," data [] [] key? ","AutoScalingGroup name not found - %s % "," data [] key? ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS AutoScaling Real delete_notification_configuration":{"type":"method","name":"delete_notification_configuration","children":[],"call":[" request ","Fog Parsers AWS AutoScaling Basic  new "]}," Fog AWS AutoScaling Mock delete_launch_configuration":{"type":"method","name":"delete_launch_configuration","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new "," raise "," data [] delete "," data [] "," data ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS AutoScaling Real delete_launch_configuration":{"type":"method","name":"delete_launch_configuration","children":[],"call":[" request ","Fog Parsers AWS AutoScaling Basic  new "]}," Fog AWS AutoScaling Mock delete_auto_scaling_group":{"type":"method","name":"delete_auto_scaling_group","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new "," data [] delete "," data [] "," data "," raise ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS AutoScaling Real delete_auto_scaling_group":{"type":"method","name":"delete_auto_scaling_group","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DeleteAutoScalingGroup\")) merge! ","Fog Parsers AWS AutoScaling Basic  new "]}," Fog AWS AutoScaling Mock create_or_update_tags":{"type":"method","name":"create_or_update_tags","children":[],"call":[" raise ","Fog AWS AutoScaling ValidationError  new ","tags to_a empty? ","tags to_a "]}," Fog AWS AutoScaling Real create_or_update_tags":{"type":"method","name":"create_or_update_tags","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"CreateOrUpdateTags\")) merge! ","Fog Parsers AWS AutoScaling Basic  new ","params []= ","i + ","value nil? ","tag each ","tags each_with_index "]}," Fog AWS AutoScaling Mock create_launch_configuration":{"type":"method","name":"create_launch_configuration","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new "," data [] []= ","(pair\n  (str \"AssociatePublicIpAddress\")\n  (nil)) merge! ","Fog AWS Mock  arn "," data [] "," data ","Time  now utc ","Time  now "," raise ","Fog AWS AutoScaling IdentifierTaken  new "," data [] key? ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS AutoScaling Real create_launch_configuration":{"type":"method","name":"create_launch_configuration","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"CreateLaunchConfiguration\")) merge! ","Fog Parsers AWS AutoScaling Basic  new ","options []= ","Base64  encode64 ","options [] ","options merge! ","AWS  indexed_param ","options delete "," format ","i + ","block_device_mappings each_with_index ","options delete  each_with_index "]}," Fog AWS AutoScaling Mock create_auto_scaling_group":{"type":"method","name":"create_auto_scaling_group","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new "," data [] []= ","(pair\n  (str \"AutoScalingGroupARN\")\n  (send\n    (const\n      (const\n        (const nil :Fog) :AWS) :Mock) :arn\n    (str \"autoscaling\")\n    (send\n      (send\n        (self) :data) :[]\n      (sym :owner_id))\n    (dstr\n      (str \"autoScalingGroup:00000000-0000-0000-0000-000000000000:autoScalingGroupName/\")\n      (begin\n        (lvar :auto_scaling_group_name)))\n    (ivar :@region))) merge! ","Time  now utc ","Time  now ","Fog AWS Mock  arn "," data [] "," data "," raise ","Fog AWS AutoScaling ValidationError  new "," data [] key? ","Fog AWS AutoScaling IdentifierTaken  new ","unexpected_options join ","unexpected_options empty? ","options keys - ","ExpectedOptions  [] ","options keys ","Excon Response  new  body= ","Excon Response  new  status= ","options keys -  join ","options keys -  empty? "]}," Fog AWS AutoScaling Real create_auto_scaling_group":{"type":"method","name":"create_auto_scaling_group","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"CreateAutoScalingGroup\")) merge! ","Fog Parsers AWS AutoScaling Basic  new ","options merge! ","AWS  indexed_param ","options delete ","options []= ","i + ","key to_s ","tags each_with_index ","options delete  each_with_index "]}," Fog AWS RegionMethods validate_aws_region":{"type":"method","name":"validate_aws_region","children":[],"call":[" raise ","region inspect ","(str \"ap-northeast-1\") include? ! ","(str \"ap-northeast-1\") include? ","host end_with? "]}," Fog AWS Redshift Real _request":{"type":"method","name":"_request","children":[],"call":["@connection request "]}," Fog AWS Redshift Real request":{"type":"method","name":"request","children":[],"call":[" _request ","@instrumentor instrument ","params []= ","params [] []= ","@signer sign ","params [] ","date to_iso8601_basic ","date to_date_header ","Fog Time  now ","params delete "," refresh_credentials_if_expired ","Fog Time  now  to_iso8601_basic ","Fog Time  now  to_Fog Time  now _header "]}," Fog AWS Redshift Real setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":["Fog AWS SignatureV4  new ","options [] "]}," Fog AWS Redshift Real initialize":{"type":"method","name":"initialize","children":[],"call":["Fog XML Connection  new ","options [] "," setup_credentials "]}," Fog AWS Redshift Mock initialize":{"type":"method","name":"initialize","children":[],"call":["Fog Mock  not_implemented "]}," Fog AWS RDS Real _request":{"type":"method","name":"_request","children":[],"call":[" raise ","Fog AWS RDS Error  slurp ","match [] ","Fog AWS RDS AuthorizationAlreadyExists  slurp ","Fog AWS RDS IdentifierTaken  slurp ","Fog AWS RDS NotFound  slurp ","error message ","match empty? ","Fog AWS Errors  match_error ","@connection request ","Fog AWS Errors  match_error  [] ","Fog AWS Errors  match_error  empty? ","Fog AWS Errors  Fog AWS Errors  match_error _error "]}," Fog AWS RDS Real request":{"type":"method","name":"request","children":[],"call":[" _request ","@instrumentor instrument ","Fog AWS  signed_params_v4 ","params delete "," refresh_credentials_if_expired "]}," Fog AWS RDS Real setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":["Fog AWS SignatureV4  new ","options [] "]}," Fog AWS RDS Real reload":{"type":"method","name":"reload","children":[],"call":["@connection reset "]}," Fog AWS RDS Real owner_id":{"type":"method","name":"owner_id","children":[],"call":[" security_groups get owner_id "," security_groups get "," security_groups "]}," Fog AWS RDS Real initialize":{"type":"method","name":"initialize","children":[],"call":[" setup_credentials ","options [] ","Fog XML Connection  new "]}," Fog AWS RDS Mock setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":["options [] "]}," Fog AWS RDS Mock reset_data":{"type":"method","name":"reset_data","children":[],"call":[" class data [] delete "," class data [] "," class data "," class "]}," Fog AWS RDS Mock data":{"type":"method","name":"data","children":[],"call":[" class data [] [] "," class data [] "," class data "," class "]}," Fog AWS RDS Mock initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","@region inspect ","(str \"ap-northeast-1\") include? ","options [] "," setup_credentials ","Fog AWS  validate_region! "]}," Fog AWS RDS Mock reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS STS GetSessionToken end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= ","@value strip "]}," Fog Parsers AWS STS GetSessionToken reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS STS AssumeRoleWithSAML end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= ","@value strip "]}," Fog Parsers AWS STS AssumeRoleWithSAML reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS STS AssumeRole end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= ","@value strip "]}," Fog Parsers AWS STS AssumeRole reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Storage AWS ListParts end_element":{"type":"method","name":"end_element","children":[],"call":["@part []= "," value to_i "," value ","@response [] << ","@response [] ","@response []= ","Time  parse "," value == ","@response [] []= "]}," Fog Parsers Storage AWS ListParts reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Storage AWS ListMultipartUploads end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] << ","@response [] ","@response []= "," value to_i "," value ","@upload []= "," value == ","Time  parse ","@upload [] []= ","@upload [] "]}," Fog Parsers Storage AWS ListMultipartUploads start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers Storage AWS ListMultipartUploads reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Storage AWS InitiateMultipartUpload end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog Parsers Storage AWS InitiateMultipartUpload reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Storage AWS GetService end_element":{"type":"method","name":"end_element","children":[],"call":["@bucket []= "," value ","@response [] []= ","@response [] ","Time  parse ","@response [] << "]}," Fog Parsers Storage AWS GetService reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Storage AWS GetRequestPayment end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog Parsers Storage AWS GetBucketWebsite end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "]}," Fog Parsers Storage AWS GetBucketWebsite reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Storage AWS GetBucketVersioning end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "]}," Fog Parsers Storage AWS GetBucketVersioning reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Storage AWS GetBucketTagging end_element":{"type":"method","name":"end_element","children":[],"call":[" value ","@in_tag keys first ","@in_tag keys ","@in_tag []= ","@response [] merge! ","@response [] "]}," Fog Parsers Storage AWS GetBucketTagging start_element":{"type":"method","name":"start_element","children":[],"call":["name == "]}," Fog Parsers Storage AWS GetBucketTagging reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Storage AWS GetBucketObjectVersions end_element":{"type":"method","name":"end_element","children":[],"call":["(ivar :@in_delete_marker) []= "," value ","@version []= "," value to_i ","@response []= ","Time  parse "," value == "," value gsub ","(ivar :@in_delete_marker) [] []= ","(ivar :@in_delete_marker) [] ","@response [] << ","@response [] "]}," Fog Parsers Storage AWS GetBucketObjectVersions start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers Storage AWS GetBucketObjectVersions reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Storage AWS GetBucketNotification end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] << ","@response [] ","@func []= "," value ","@queue []= ","@topic []= "]}," Fog Parsers Storage AWS GetBucketNotification start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers Storage AWS GetBucketNotification reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Storage AWS GetBucketLogging end_element":{"type":"method","name":"end_element","children":[],"call":["@grant [] []= "," value ","@grant [] ","@response [] []= ","@response [] ","@grant []= ","@response [] [] [] << ","@response [] [] [] ","@response [] [] "]}," Fog Parsers Storage AWS GetBucketLogging reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Storage AWS GetBucketLocation end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog Parsers Storage AWS GetBucketLifecycle end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] << ","@response [] ","@rule []= "," value == "," value ","@transition []= "," value to_i ","@expiration []= ","@version_transition []= ","@version_expiration []= "]}," Fog Parsers Storage AWS GetBucketLifecycle start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers Storage AWS GetBucketLifecycle reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Storage AWS GetBucket end_element":{"type":"method","name":"end_element","children":[],"call":["@object []= "," value "," value to_i ","@response []= ","@response [] << ","@response [] ","Time  parse "," value == "," value gsub ","@object [] []= ","@object [] "," value != "]}," Fog Parsers Storage AWS GetBucket start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers Storage AWS GetBucket reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Storage AWS DeleteMultipleObjects end_element":{"type":"method","name":"end_element","children":[],"call":["@error [] []= "," value ","@error [] ","@deleted [] []= ","@deleted [] ","@response [] << ","@response [] "]}," Fog Parsers Storage AWS DeleteMultipleObjects start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers Storage AWS DeleteMultipleObjects reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Storage AWS CorsConfiguration end_element":{"type":"method","name":"end_element","children":[],"call":["(or-asgn\n  (send\n    (ivar :@cors_rule) :[]\n    (lvar :name))\n  (array)) << "," value ","@cors_rule [] ","@cors_rule []= "," value to_i ","@response [] << ","@response [] "]}," Fog Parsers Storage AWS CorsConfiguration start_element":{"type":"method","name":"start_element","children":[],"call":["name == "]}," Fog Parsers Storage AWS CorsConfiguration reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Storage AWS CopyObject end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= ","Time  parse "," value "," value gsub "]}," Fog Parsers Storage AWS CompleteMultipartUpload end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog Parsers Storage AWS CompleteMultipartUpload reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Storage AWS AccessControlList end_element":{"type":"method","name":"end_element","children":[],"call":["@grant [] []= "," value ","@grant [] ","@grant []= ","@response [] []= ","@response [] ","@response [] << "]}," Fog Parsers Storage AWS AccessControlList start_element":{"type":"method","name":"start_element","children":[],"call":["name == "]}," Fog Parsers Storage AWS AccessControlList reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS SQS SendMessage end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= ","@response [] []= ","@response [] "]}," Fog Parsers AWS SQS SendMessage reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS SQS ReceiveMessage end_element":{"type":"method","name":"end_element","children":[],"call":["@message [] []= ","@message [] ","@value to_i ","Time  at ","@value to_i / ","@message []= ","@response [] << ","@response [] ","@response [] []= "]}," Fog Parsers AWS SQS ReceiveMessage reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS SQS ListQueues end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] << ","@response [] ","@response [] []= "]}," Fog Parsers AWS SQS ListQueues reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS SQS GetQueueAttributes end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= ","@response [] ","Time  at ","@value to_i "]}," Fog Parsers AWS SQS GetQueueAttributes reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS SQS CreateQueue end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= ","@response [] []= ","@response [] "]}," Fog Parsers AWS SQS CreateQueue reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS SQS Basic end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= ","@response [] "]}," Fog Parsers AWS SQS Basic reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS SNS Unsubscribe end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "]}," Fog Parsers AWS SNS Unsubscribe reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS SNS Subscribe end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= ","@value strip "]}," Fog Parsers AWS SNS Subscribe reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS SNS SetTopicAttributes end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "]}," Fog Parsers AWS SNS SetTopicAttributes reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS SNS RemovePermission end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "]}," Fog Parsers AWS SNS RemovePermission reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS SNS Publish end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= ","@value rstrip "]}," Fog Parsers AWS SNS Publish reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS SNS ListTopics end_element":{"type":"method","name":"end_element","children":[],"call":[" response []= "," response ","@response [] << ","@value strip ","@response [] "]}," Fog Parsers AWS SNS ListTopics reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS SNS ListSubscriptions end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= ","@value strip ","@response [] << ","@response [] ","@subscription []= "]}," Fog Parsers AWS SNS ListSubscriptions reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS SNS GetTopicAttributes end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= ","@value rstrip ","@response [] []= ","@response [] ","@value rstrip to_i "]}," Fog Parsers AWS SNS GetTopicAttributes reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS SNS DeleteTopic end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "]}," Fog Parsers AWS SNS DeleteTopic reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS SNS CreateTopic end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= ","@value strip "]}," Fog Parsers AWS SNS CreateTopic reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS SNS ConfirmSubscription end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= ","@value strip "]}," Fog Parsers AWS SNS ConfirmSubscription reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS SNS AddPermission end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "]}," Fog Parsers AWS SNS AddPermission reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS SimpleDB Select end_element":{"type":"method","name":"end_element","children":[],"call":[" response [] [] [] << "," sdb_decode "," value "," response [] [] [] "," response [] [] "," response [] "," response "," response []= "," response [] []= ","@item_name nil? "," value to_f "," value  nil? "]}," Fog Parsers AWS SimpleDB Select reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS SimpleDB ListDomains end_element":{"type":"method","name":"end_element","children":[],"call":[" response []= "," value "," response "," response [] << "," response [] "," value to_f "]}," Fog Parsers AWS SimpleDB ListDomains reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS SimpleDB GetAttributes end_element":{"type":"method","name":"end_element","children":[],"call":[" response [] [] << "," sdb_decode "," value "," response [] [] "," response [] "," response "," response []= "," value to_f "]}," Fog Parsers AWS SimpleDB GetAttributes reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS SimpleDB DomainMetadata end_element":{"type":"method","name":"end_element","children":[],"call":[" response []= ","Time  at "," value to_i "," value "," response "," value to_f "]}," Fog Parsers AWS SimpleDB DomainMetadata reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS SimpleDB Basic sdb_decode":{"type":"method","name":"sdb_decode","children":[],"call":["value eql? "]}," Fog Parsers AWS SimpleDB Basic end_element":{"type":"method","name":"end_element","children":[],"call":[" response []= "," value "," response "," value to_f "]}," Fog Parsers AWS SimpleDB Basic initialize":{"type":"method","name":"initialize","children":[],"call":[" reset "]}," Fog Parsers AWS SES VerifyEmailAddress end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "]}," Fog Parsers AWS SES VerifyEmailAddress reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS SES VerifyDomainIdentity end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] ","@response []= "]}," Fog Parsers AWS SES VerifyDomainIdentity reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS SES SendRawEmail end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] ","@response []= "]}," Fog Parsers AWS SES SendRawEmail reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS SES SendEmail end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] ","@response []= "]}," Fog Parsers AWS SES SendEmail reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS SES ListVerifiedEmailAddresses end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] ","@response [] << "]}," Fog Parsers AWS SES ListVerifiedEmailAddresses reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS SES GetSendStatistics end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] ","@response [] << ","@send_data_point []= "]}," Fog Parsers AWS SES GetSendStatistics reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS SES GetSendQuota end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] ","@response []= "]}," Fog Parsers AWS SES GetSendQuota reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS SES DeleteVerifiedEmailAddress end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "]}," Fog Parsers AWS SES DeleteVerifiedEmailAddress reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Redshift AWS UpdateClusterParameterGroupParser end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog Parsers Redshift AWS UpdateClusterParameterGroupParser start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers Redshift AWS UpdateClusterParameterGroupParser reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Redshift AWS RevokeClusterSecurityGroupIngress end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "]}," Fog Parsers Redshift AWS RevokeClusterSecurityGroupIngress start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers Redshift AWS RevokeClusterSecurityGroupIngress reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Redshift AWS PurchaseReservedNodeOffering end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] << ","@response [] ","@recurring_charge []= "," value "," value to_f ","@response []= ","Time  parse "," value to_i "]}," Fog Parsers Redshift AWS PurchaseReservedNodeOffering start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers Redshift AWS PurchaseReservedNodeOffering reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Redshift AWS DescribeResize end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] << "," value ","@response [] ","@response []= "," value to_i "]}," Fog Parsers Redshift AWS DescribeResize start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers Redshift AWS DescribeResize reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Redshift AWS DescribeReservedNodes end_element":{"type":"method","name":"end_element","children":[],"call":[" fresh_reserved_nodes ","@response [] << ","@response [] ","@reserved_node [] << ","@reserved_node [] ","@recurring_charge []= "," value "," value to_f ","@reserved_node []= ","Time  parse "," value to_i ","@response []= "," fresh_reserved_nodes  [] << "," fresh_reserved_nodes  [] "," fresh_reserved_nodes  []= "]}," Fog Parsers Redshift AWS DescribeReservedNodes start_element":{"type":"method","name":"start_element","children":[],"call":[" fresh_reserved_nodes "]}," Fog Parsers Redshift AWS DescribeReservedNodes fresh_reserved_nodes":{"type":"method","name":"fresh_reserved_nodes","children":[],"call":[]}," Fog Parsers Redshift AWS DescribeReservedNodes reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Redshift AWS DescribeReservedNodeOfferings end_element":{"type":"method","name":"end_element","children":[],"call":[" fresh_reserved_node_offering ","@response [] << ","@response [] ","@reserved_node_offering [] << ","@reserved_node_offering [] ","@recurring_charge []= "," value "," value to_f ","@reserved_node_offering []= "," value to_i ","@response []= "," fresh_reserved_node_offering  [] << "," fresh_reserved_node_offering  [] "," fresh_reserved_node_offering  []= "]}," Fog Parsers Redshift AWS DescribeReservedNodeOfferings start_element":{"type":"method","name":"start_element","children":[],"call":[" fresh_reserved_node_offering "]}," Fog Parsers Redshift AWS DescribeReservedNodeOfferings fresh_reserved_node_offering":{"type":"method","name":"fresh_reserved_node_offering","children":[],"call":[]}," Fog Parsers Redshift AWS DescribeReservedNodeOfferings reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Redshift AWS DescribeOrderableClusterOptions end_element":{"type":"method","name":"end_element","children":[],"call":[" fresh_orderable_cluster_option ","@response [] << ","@response [] ","@orderable_cluster_option [] << ","@orderable_cluster_option [] ","@availability_zone []= "," value ","@orderable_cluster_option []= ","@response []= "," fresh_orderable_cluster_option  [] << "," fresh_orderable_cluster_option  [] "," fresh_orderable_cluster_option  []= "]}," Fog Parsers Redshift AWS DescribeOrderableClusterOptions start_element":{"type":"method","name":"start_element","children":[],"call":[" fresh_orderable_cluster_option "]}," Fog Parsers Redshift AWS DescribeOrderableClusterOptions fresh_orderable_cluster_option":{"type":"method","name":"fresh_orderable_cluster_option","children":[],"call":[]}," Fog Parsers Redshift AWS DescribeOrderableClusterOptions reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Redshift AWS DescribeEvents end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] << ","@response [] ","@event []= ","Time  parse "," value ","@response []= "]}," Fog Parsers Redshift AWS DescribeEvents start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers Redshift AWS DescribeEvents reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Redshift AWS DescribeDefaultClusterParameters end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] << ","@response [] ","@parameter []= "," value == "," value ","@response []= "]}," Fog Parsers Redshift AWS DescribeDefaultClusterParameters start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers Redshift AWS DescribeDefaultClusterParameters reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Redshift AWS DescribeClusters end_element":{"type":"method","name":"end_element","children":[],"call":[" fresh_cluster ","@response [] << ","@response [] "]}," Fog Parsers Redshift AWS DescribeClusters start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers Redshift AWS DescribeClusters reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Redshift AWS DescribeClusterVersions end_element":{"type":"method","name":"end_element","children":[],"call":["@cluster_version []= "," value ","@response [] << ","@response [] ","@cluster_version_depth == ","@response []= "]}," Fog Parsers Redshift AWS DescribeClusterVersions start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers Redshift AWS DescribeClusterVersions reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Redshift AWS DescribeClusterSubnetGroups end_element":{"type":"method","name":"end_element","children":[],"call":["@subnet []= "," value ","@subnet [] []= ","@subnet [] ","@cluster_subnet_group [] << ","@cluster_subnet_group [] ","@cluster_subnet_group []= ","@response [] << ","@response [] ","@response []= "]}," Fog Parsers Redshift AWS DescribeClusterSubnetGroups start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers Redshift AWS DescribeClusterSubnetGroups reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Redshift AWS DescribeClusterSnapshots end_element":{"type":"method","name":"end_element","children":[],"call":[" fresh_snapshot ","@response [] << ","@response [] ","@response []= "," value "]}," Fog Parsers Redshift AWS DescribeClusterSnapshots start_element":{"type":"method","name":"start_element","children":[],"call":[" fresh_snapshot "]}," Fog Parsers Redshift AWS DescribeClusterSnapshots reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Redshift AWS DescribeClusterSecurityGroups end_element":{"type":"method","name":"end_element","children":[],"call":[" fresh_cluster_security_group ","@response [] << ","@response [] ","@response []= "," value "]}," Fog Parsers Redshift AWS DescribeClusterSecurityGroups start_element":{"type":"method","name":"start_element","children":[],"call":[" fresh_cluster_security_group "]}," Fog Parsers Redshift AWS DescribeClusterSecurityGroups reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Redshift AWS DescribeClusterParameters end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] << ","@response [] ","@parameter []= "," value == "," value ","@response []= "]}," Fog Parsers Redshift AWS DescribeClusterParameters start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers Redshift AWS DescribeClusterParameters reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Redshift AWS DescribeClusterParameterGroups end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] << ","@response [] ","@parameter_group []= "," value ","@response []= "]}," Fog Parsers Redshift AWS DescribeClusterParameterGroups start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers Redshift AWS DescribeClusterParameterGroups reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Redshift AWS CreateClusterSecurityGroup end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "]}," Fog Parsers Redshift AWS CreateClusterSecurityGroup start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers Redshift AWS CreateClusterSecurityGroup reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Redshift AWS CreateClusterParameterGroup end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "]}," Fog Parsers Redshift AWS CreateClusterParameterGroup start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers Redshift AWS CreateClusterParameterGroup reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Redshift AWS ClusterSubnetGroupParser end_element":{"type":"method","name":"end_element","children":[],"call":[" fresh_subnet ","@response [] << ","@response [] ","@subnet [] []= "," value ","@subnet [] ","@subnet []= ","@response []= "," fresh_subnet  [] []= "," fresh_subnet  [] "," fresh_subnet  []= "]}," Fog Parsers Redshift AWS ClusterSubnetGroupParser start_element":{"type":"method","name":"start_element","children":[],"call":[" fresh_subnet "]}," Fog Parsers Redshift AWS ClusterSubnetGroupParser fresh_subnet":{"type":"method","name":"fresh_subnet","children":[],"call":[]}," Fog Parsers Redshift AWS ClusterSubnetGroupParser reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Redshift AWS ClusterSnapshotParser end_element":{"type":"method","name":"end_element","children":[],"call":["@snapshot [] [] << "," value ","@snapshot [] [] ","@snapshot [] ","@snapshot [] []= "," value to_f "," value == ","Time  parse "," value to_i "]}," Fog Parsers Redshift AWS ClusterSnapshotParser start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers Redshift AWS ClusterSnapshotParser fresh_snapshot":{"type":"method","name":"fresh_snapshot","children":[],"call":[]}," Fog Parsers Redshift AWS ClusterSnapshotParser reset":{"type":"method","name":"reset","children":[],"call":[" fresh_snapshot "]}," Fog Parsers Redshift AWS ClusterSnapshot end_element":{"type":"method","name":"end_element","children":[],"call":[]}," Fog Parsers Redshift AWS ClusterSnapshot start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers Redshift AWS ClusterSnapshot reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Redshift AWS ClusterSecurityGroupParser end_element":{"type":"method","name":"end_element","children":[],"call":["@cluster_security_group [] << ","@cluster_security_group [] ","@list []= "," value ","@cluster_security_group []= "]}," Fog Parsers Redshift AWS ClusterSecurityGroupParser start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers Redshift AWS ClusterSecurityGroupParser fresh_cluster_security_group":{"type":"method","name":"fresh_cluster_security_group","children":[],"call":[]}," Fog Parsers Redshift AWS ClusterSecurityGroupParser reset":{"type":"method","name":"reset","children":[],"call":[" fresh_cluster_security_group "]}," Fog Parsers Redshift AWS ClusterParser end_element":{"type":"method","name":"end_element","children":[],"call":["@cluster [] << ","@cluster [] ","@cluster [] []= "," value to_f "," value "," value to_i ","@vpc_security_group []= ","@cluster_security_group []= ","@cluster_parameter_group []= ","@cluster []= "," value == ","Time  parse "]}," Fog Parsers Redshift AWS ClusterParser start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers Redshift AWS ClusterParser fresh_cluster":{"type":"method","name":"fresh_cluster","children":[],"call":[]}," Fog Parsers Redshift AWS ClusterParser reset":{"type":"method","name":"reset","children":[],"call":[" fresh_cluster "]}," Fog Parsers Redshift AWS Cluster end_element":{"type":"method","name":"end_element","children":[],"call":[]}," Fog Parsers Redshift AWS Cluster start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers Redshift AWS Cluster reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS RDS TagListParser end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= ","@response [] "," value ","@tags []= "]}," Fog Parsers AWS RDS TagListParser reset":{"type":"method","name":"reset","children":[],"call":["Hash  new "]}," Fog Parsers AWS RDS SubnetGroupParser fresh_subnet_group":{"type":"method","name":"fresh_subnet_group","children":[],"call":[]}," Fog Parsers AWS RDS SubnetGroupParser end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] ","@db_subnet_group [] << ","@db_subnet_group [] ","@db_subnet_group []= "]}," Fog Parsers AWS RDS SubnetGroupParser start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS SubnetGroupParser reset":{"type":"method","name":"reset","children":[],"call":[" fresh_subnet_group "]}," Fog Parsers AWS RDS SnapshotParser end_element":{"type":"method","name":"end_element","children":[],"call":["@db_snapshot []= "," value ","Time  parse "," value to_i "]}," Fog Parsers AWS RDS SnapshotParser start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS SnapshotParser fresh_snapshot":{"type":"method","name":"fresh_snapshot","children":[],"call":[]}," Fog Parsers AWS RDS SnapshotParser reset":{"type":"method","name":"reset","children":[],"call":[" fresh_snapshot "]}," Fog Parsers AWS RDS SecurityGroupParser end_element":{"type":"method","name":"end_element","children":[],"call":["@ingress []= "," value ","@security_group [] << ","@security_group [] ","@ingress empty? ","@security_group []= "]}," Fog Parsers AWS RDS SecurityGroupParser start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS SecurityGroupParser fresh_security_group":{"type":"method","name":"fresh_security_group","children":[],"call":[]}," Fog Parsers AWS RDS SecurityGroupParser reset":{"type":"method","name":"reset","children":[],"call":[" fresh_security_group "]}," Fog Parsers AWS RDS RevokeDBSecurityGroupIngress end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "," fresh_security_group "]}," Fog Parsers AWS RDS RevokeDBSecurityGroupIngress start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS RevokeDBSecurityGroupIngress reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS RDS RestoreDBInstanceToPointInTime end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "," fresh_instance "]}," Fog Parsers AWS RDS RestoreDBInstanceToPointInTime start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS RestoreDBInstanceToPointInTime reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS RDS RestoreDBInstanceFromDBSnapshot end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "," fresh_instance "]}," Fog Parsers AWS RDS RestoreDBInstanceFromDBSnapshot start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS RestoreDBInstanceFromDBSnapshot reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS RDS RebootDBInstance end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "," fresh_instance "]}," Fog Parsers AWS RDS RebootDBInstance start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS RebootDBInstance reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS RDS PromoteReadReplica end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "," fresh_instance "]}," Fog Parsers AWS RDS PromoteReadReplica start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS PromoteReadReplica reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS RDS ModifyDbParameterGroup end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "]}," Fog Parsers AWS RDS ModifyDbParameterGroup start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS ModifyDbParameterGroup reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS RDS ModifyDBInstance end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "," fresh_instance "]}," Fog Parsers AWS RDS ModifyDBInstance start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS ModifyDBInstance reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS RDS EventSubscriptionParser end_element":{"type":"method","name":"end_element","children":[],"call":["@event_subscription []= "," value ","Time  parse ","@event_subscription [] << ","@event_subscription [] "]}," Fog Parsers AWS RDS EventSubscriptionParser start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS EventSubscriptionParser fresh_event_subscription":{"type":"method","name":"fresh_event_subscription","children":[],"call":[]}," Fog Parsers AWS RDS EventSubscriptionParser reset":{"type":"method","name":"reset","children":[],"call":[" fresh_event_subscription "]}," Fog Parsers AWS RDS EventListParser end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@response [] << ","@response [] ","@event empty? ","@event []= "," value strip ","DateTime  parse "]}," Fog Parsers AWS RDS EventListParser start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS EventListParser reset":{"type":"method","name":"reset","children":[],"call":["@response []= "]}," Fog Parsers AWS RDS DownloadDBLogFilePortion end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] ","name == "]}," Fog Parsers AWS RDS DownloadDBLogFilePortion start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS DownloadDBLogFilePortion reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS RDS DescribeOrderableDBInstanceOptions to_boolean":{"type":"method","name":"to_boolean","children":[],"call":["(send\n  (lvar :v) :=~\n  (regexp\n    (str \"\\\\A\\\\s*(true|yes|1|y)\\\\s*$\")\n    (regopt :i))) == ","v =~ "]}," Fog Parsers AWS RDS DescribeOrderableDBInstanceOptions end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] ","@db_instance_options << ","@availability_zone []= "," to_boolean ","@availability_zones << ","@availability_zone empty? ","@db_instance_option []= "]}," Fog Parsers AWS RDS DescribeOrderableDBInstanceOptions start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS DescribeOrderableDBInstanceOptions reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS RDS DescribeEventSubscriptions end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "," fresh_event_subscription ","@response [] [] << ","@response [] [] "]}," Fog Parsers AWS RDS DescribeEventSubscriptions start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS DescribeEventSubscriptions reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS RDS DescribeDBSubnetGroups end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "," fresh_subnet_group ","@response [] [] << ","@response [] [] "]}," Fog Parsers AWS RDS DescribeDBSubnetGroups start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS DescribeDBSubnetGroups reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS RDS DescribeDBSnapshots end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "," fresh_snapshot ","@response [] [] << ","@response [] [] "]}," Fog Parsers AWS RDS DescribeDBSnapshots start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS DescribeDBSnapshots reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS RDS DescribeDBSecurityGroups end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "," fresh_security_group ","@response [] [] << ","@response [] [] "]}," Fog Parsers AWS RDS DescribeDBSecurityGroups start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS DescribeDBSecurityGroups reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS RDS DescribeDBReservedInstances end_element":{"type":"method","name":"end_element","children":[],"call":["@reserved_instance []= ","Time  parse ","@value == ","@response []= ","@response [] << ","@response [] ","@value to_f ","@value to_i "]}," Fog Parsers AWS RDS DescribeDBReservedInstances reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS RDS DescribeDBParameters end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] ","@parameters << ","@parameter []= "," value == "]}," Fog Parsers AWS RDS DescribeDBParameters start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS DescribeDBParameters reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS RDS DescribeDBParameterGroups end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] ","@response [] [] << ","@response [] [] ","@db_parameter_group []= "]}," Fog Parsers AWS RDS DescribeDBParameterGroups start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS DescribeDBParameterGroups reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS RDS DescribeDBLogFiles end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "," fresh_log_file ","@response [] [] << ","@response [] [] ","@db_log_file []= "," value to_i ","Time  at "," value to_i / "]}," Fog Parsers AWS RDS DescribeDBLogFiles start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS DescribeDBLogFiles fresh_log_file":{"type":"method","name":"fresh_log_file","children":[],"call":[]}," Fog Parsers AWS RDS DescribeDBLogFiles reset":{"type":"method","name":"reset","children":[],"call":[" fresh_log_file "]}," Fog Parsers AWS RDS DescribeDBLogFiles initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Fog Parsers AWS RDS DescribeDBInstances end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "," fresh_instance ","@response [] [] << ","@response [] [] "]}," Fog Parsers AWS RDS DescribeDBInstances start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS DescribeDBInstances reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS RDS DescribeDBEngineVersions end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= ","@response [] "," fresh_engine_version ","@response [] [] << ","@response [] [] "]}," Fog Parsers AWS RDS DescribeDBEngineVersions start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS DescribeDBEngineVersions reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS RDS DeleteEventSubscription end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "]}," Fog Parsers AWS RDS DeleteEventSubscription start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS DeleteEventSubscription reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS RDS DeleteDBSubnetGroup end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "]}," Fog Parsers AWS RDS DeleteDBSubnetGroup start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS DeleteDBSubnetGroup reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS RDS DeleteDBSnapshot end_element":{"type":"method","name":"end_element","children":[],"call":[" fresh_snapshot ","@response [] []= ","@response [] "," value "]}," Fog Parsers AWS RDS DeleteDBSnapshot start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS DeleteDBSnapshot reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS RDS DeleteDBSecurityGroup end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "]}," Fog Parsers AWS RDS DeleteDBSecurityGroup start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS DeleteDBSecurityGroup reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS RDS DeleteDbParameterGroup end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "]}," Fog Parsers AWS RDS DeleteDbParameterGroup start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS DeleteDbParameterGroup reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS RDS DeleteDBInstance end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "," fresh_instance "]}," Fog Parsers AWS RDS DeleteDBInstance start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS DeleteDBInstance reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS RDS DbParser end_element":{"type":"method","name":"end_element","children":[],"call":[" fresh_instance ","@db_instance []= "," value ","@db_instance [] << ","@db_instance [] ","@endpoint []= "," value to_i ","@pending_modified_values []= ","@vpc_security_group []= ","@db_security_group []= ","@vpc_security_groups << ","@db_security_groups << ","@db_parameter_group []= ","@db_parameter_groups << "," value == ","Time  parse ","@subnet_availability_zone []= ","@subnet []= ","@subnets << ","@db_subnet_group []= "," fresh_instance  []= "," fresh_instance  [] << "," fresh_instance  [] "]}," Fog Parsers AWS RDS DbParser start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS DbParser fresh_instance":{"type":"method","name":"fresh_instance","children":[],"call":[]}," Fog Parsers AWS RDS DbParser reset":{"type":"method","name":"reset","children":[],"call":[" fresh_instance "]}," Fog Parsers AWS RDS DBEngineVersionParser end_element":{"type":"method","name":"end_element","children":[],"call":["@db_engine_version []= "]}," Fog Parsers AWS RDS DBEngineVersionParser start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS DBEngineVersionParser fresh_engine_version":{"type":"method","name":"fresh_engine_version","children":[],"call":[]}," Fog Parsers AWS RDS DBEngineVersionParser reset":{"type":"method","name":"reset","children":[],"call":[" fresh_engine_version "]}," Fog Parsers AWS RDS CreateEventSubscription end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "]}," Fog Parsers AWS RDS CreateEventSubscription start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS CreateEventSubscription reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS RDS CreateDBSubnetGroup end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "," fresh_subnet_group "]}," Fog Parsers AWS RDS CreateDBSubnetGroup start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS CreateDBSubnetGroup reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS RDS CreateDBSnapshot end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "," fresh_snapshot "]}," Fog Parsers AWS RDS CreateDBSnapshot start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS CreateDBSnapshot reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS RDS CreateDBSecurityGroup end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "," fresh_security_group "]}," Fog Parsers AWS RDS CreateDBSecurityGroup start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS CreateDBSecurityGroup reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS RDS CreateDbParameterGroup end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] ","@db_parameter_group []= "]}," Fog Parsers AWS RDS CreateDbParameterGroup start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS CreateDbParameterGroup reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS RDS CreateDBInstanceReadReplica end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "," fresh_instance "]}," Fog Parsers AWS RDS CreateDBInstanceReadReplica start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS CreateDBInstanceReadReplica reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS RDS CreateDBInstance end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "," fresh_instance "]}," Fog Parsers AWS RDS CreateDBInstance start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS CreateDBInstance reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS RDS Base end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "]}," Fog Parsers AWS RDS Base start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS Base reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS RDS AuthorizeDBSecurityGroupIngress end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "," fresh_security_group "]}," Fog Parsers AWS RDS AuthorizeDBSecurityGroupIngress start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS AuthorizeDBSecurityGroupIngress reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS IAM UploadSigningCertificate end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@response [] []= ","@response [] "]}," Fog Parsers AWS IAM UploadSigningCertificate reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS IAM UploadServerCertificate end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@response [] []= ","Time  parse ","@response [] "]}," Fog Parsers AWS IAM UploadServerCertificate reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS IAM UpdateUser end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@response [] []= ","@response [] "]}," Fog Parsers AWS IAM UpdateUser reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS IAM UpdateGroup end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@response [] []= ","@response [] "]}," Fog Parsers AWS IAM UpdateGroup reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS IAM SingleRole end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog Parsers AWS IAM SingleRole finished_role":{"type":"method","name":"finished_role","children":[],"call":["@response []= "]}," Fog Parsers AWS IAM SingleRole reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS IAM RoleParser end_element":{"type":"method","name":"end_element","children":[],"call":[" finished_role ","@stack last == ","@stack last ","@stack pop ","@role []= ","Time  parse "," value "]}," Fog Parsers AWS IAM RoleParser start_element":{"type":"method","name":"start_element","children":[],"call":["@stack last == ","@stack last ","@stack << "]}," Fog Parsers AWS IAM RoleParser reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS IAM LoginProfile end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@response [] []= ","Time  parse ","@response [] "]}," Fog Parsers AWS IAM LoginProfile reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS IAM ListUsers end_element":{"type":"method","name":"end_element","children":[],"call":[" response []= "," value "," response "," value == ","@response [] << ","@response [] ","@user []= ","Time  parse "]}," Fog Parsers AWS IAM ListUsers reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS IAM ListSigningCertificates end_element":{"type":"method","name":"end_element","children":[],"call":[" response []= "," value "," response "," value == ","@response [] << ","@response [] ","@signing_certificate []= "]}," Fog Parsers AWS IAM ListSigningCertificates reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS IAM ListServerCertificates end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "," value ! ! "," value ! "," reset_certificate ","@response [] << ","@response [] ","@certificate []= ","Time  parse "]}," Fog Parsers AWS IAM ListServerCertificates reset_certificate":{"type":"method","name":"reset_certificate","children":[],"call":[]}," Fog Parsers AWS IAM ListServerCertificates reset":{"type":"method","name":"reset","children":[],"call":[" reset_certificate "]}," Fog Parsers AWS IAM ListRoles end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value == "," value "]}," Fog Parsers AWS IAM ListRoles finished_role":{"type":"method","name":"finished_role","children":[],"call":["@response [] << ","@response [] "]}," Fog Parsers AWS IAM ListRoles reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS IAM ListPolicies end_element":{"type":"method","name":"end_element","children":[],"call":[" response []= "," value "," response "," value == ","@response [] << ","@response [] "]}," Fog Parsers AWS IAM ListPolicies reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS IAM ListMFADevices end_element":{"type":"method","name":"end_element","children":[],"call":[" response []= "," value "," response "," value == ","@response [] << ","@response [] ","@mfa_device []= ","Time  parse "]}," Fog Parsers AWS IAM ListMFADevices reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS IAM ListInstanceProfiles end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value == "," value "]}," Fog Parsers AWS IAM ListInstanceProfiles finished_instance_profile":{"type":"method","name":"finished_instance_profile","children":[],"call":["@response [] << ","@response [] "]}," Fog Parsers AWS IAM ListInstanceProfiles reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS IAM ListGroupsForUser end_element":{"type":"method","name":"end_element","children":[],"call":[" response []= "," value "," response "," value == ","@response [] << ","@response [] ","@group_for_user []= "]}," Fog Parsers AWS IAM ListGroupsForUser reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS IAM ListGroups end_element":{"type":"method","name":"end_element","children":[],"call":[" response []= "," value "," response "," value == ","@response [] << ","@response [] ","@group []= "]}," Fog Parsers AWS IAM ListGroups reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS IAM ListAccountAliases end_element":{"type":"method","name":"end_element","children":[],"call":[" response []= "," response ","@value == ","@response [] << ","@response [] "]}," Fog Parsers AWS IAM ListAccountAliases reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS IAM ListAccessKeys end_element":{"type":"method","name":"end_element","children":[],"call":[" response []= "," value "," response "," value == ","@response [] << ","@response [] ","@access_key []= "]}," Fog Parsers AWS IAM ListAccessKeys reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS IAM InstanceProfile end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog Parsers AWS IAM InstanceProfile finished_instance_profile":{"type":"method","name":"finished_instance_profile","children":[],"call":["@response []= "]}," Fog Parsers AWS IAM InstanceProfile reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS IAM GetUserPolicy end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@response [] []= ","Fog JSON  decode ","URI  decode ","@response [] ","URI  decode_www_form_component "]}," Fog Parsers AWS IAM GetUserPolicy reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS IAM GetUser end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@response [] []= ","Time  parse ","@response [] "]}," Fog Parsers AWS IAM GetUser reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS IAM GetRolePolicy end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@response [] []= ","Fog JSON  decode ","URI  decode ","@response [] ","URI  decode_www_form_component "]}," Fog Parsers AWS IAM GetRolePolicy reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS IAM GetGroupPolicy end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@response [] []= ","Fog JSON  decode ","URI  decode ","@response [] ","URI  decode_www_form_component "]}," Fog Parsers AWS IAM GetGroupPolicy reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS IAM GetGroup end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "," response []= "," value == "," response ","@response [] << ","@response [] ","@user []= ","@response [] []= "]}," Fog Parsers AWS IAM GetGroup start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS IAM GetGroup reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS IAM GetAccountSummary end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value strip "," value ","@stack empty? ","@response [] []= "," value strip to_i ","@response [] ","@stack last == ","@stack last ","@stack pop "]}," Fog Parsers AWS IAM GetAccountSummary start_element":{"type":"method","name":"start_element","children":[],"call":["@stack << "]}," Fog Parsers AWS IAM GetAccountSummary reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS IAM GetAccountPolicyPolicy end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@response [] []= "," value to_i ","@response [] "," value ! ! "," value ! "]}," Fog Parsers AWS IAM GetAccountPolicyPolicy reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS IAM CreateUser end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@response [] []= ","@response [] "]}," Fog Parsers AWS IAM CreateUser reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS IAM CreateGroup end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@response [] []= ","@response [] "]}," Fog Parsers AWS IAM CreateGroup reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS IAM CreateAccessKey end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@response [] []= ","@response [] "]}," Fog Parsers AWS IAM CreateAccessKey reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS IAM Basic end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog Parsers AWS IAM BaseInstanceProfile end_element":{"type":"method","name":"end_element","children":[],"call":["@instance_profile []= "," value "," finished_instance_profile ","@stack pop ","@instance_profile [] << ","@instance_profile [] ","@stack last ","Time  parse ","@role []= "]}," Fog Parsers AWS IAM BaseInstanceProfile start_element":{"type":"method","name":"start_element","children":[],"call":["@stack last ","@stack << "]}," Fog Parsers AWS IAM BaseInstanceProfile reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS EMR TerminateJobFlows end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog Parsers AWS EMR SetTerminationProtection end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog Parsers AWS EMR RunJobFlow end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog Parsers AWS EMR ModifyInstanceGroups end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog Parsers AWS EMR DescribeJobFlows end_element":{"type":"method","name":"end_element","children":[],"call":["@context pop ","@context last == ","@context last ","@response [] << ","@response [] ","@flow []= "," value ","@context empty? ","@flow [] << ","@flow [] ","@step [] [] []= ","@step [] [] ","@step [] ","@step []= ","@bootstrap_actions [] [] << ","@bootstrap_actions [] [] ","@bootstrap_actions [] ","@step [] [] [] << "," value strip ","@step [] [] [] ","@context include? ","name == ","@instance_group_detail []= ","@instance [] << ","@instance [] ","@instance []= ","@instance [] []= ","@execution_status_detail []= ","@bootstrap_actions [] []= ","@bootstrap_actions []= "]}," Fog Parsers AWS EMR DescribeJobFlows start_element":{"type":"method","name":"start_element","children":[],"call":["@context push ","@contexts include? "]}," Fog Parsers AWS EMR DescribeJobFlows reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS EMR AddJobFlowSteps end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog Parsers AWS EMR AddInstanceGroups end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] << "," value ","@response [] ","@response []= "]}," Fog Parsers AWS EMR AddInstanceGroups start_element":{"type":"method","name":"start_element","children":[],"call":["@response []= "]}," Fog Parsers AWS ELB TagListParser end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] ","@response [] [] << ","@response [] [] ","@tags []= "]}," Fog Parsers AWS ELB TagListParser start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS ELB TagListParser reset":{"type":"method","name":"reset","children":[],"call":["Hash  new "]}," Fog Parsers AWS ELB RegisterInstancesWithLoadBalancer end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] ","@response [] [] << ","@response [] [] "]}," Fog Parsers AWS ELB RegisterInstancesWithLoadBalancer reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS ELB EnableAvailabilityZonesForLoadBalancer end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] ","@response [] [] << ","@response [] [] "]}," Fog Parsers AWS ELB EnableAvailabilityZonesForLoadBalancer reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS ELB Empty end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "]}," Fog Parsers AWS ELB Empty start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS ELB Empty reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS ELB DisableAvailabilityZonesForLoadBalancer end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] ","@response [] [] << ","@response [] [] "]}," Fog Parsers AWS ELB DisableAvailabilityZonesForLoadBalancer reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS ELB DetachLoadBalancerFromSubnets end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] ","@response [] [] << ","@response [] [] "]}," Fog Parsers AWS ELB DetachLoadBalancerFromSubnets reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Compute AWS DescribeTags end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@response [] << ","@response [] ","@tag []= "]}," Fog Parsers Compute AWS DescribeTags reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS ELB DescribeLoadBalancers end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= ","@results []= "," value ","@response [] []= ","@response [] ","@stickiness_policy []= "," value to_i ","@load_balancer [] []= ","@load_balancer [] ","@load_balancer []= ","@load_balancer [] << ","@listener_description [] []= ","@listener_description [] ","Time  parse ","@backend_server_description []= "," reset_load_balancer ","@results [] << ","@results [] ","@in_backend_server_descriptions ! ","@in_policies ! ","@in_instances ! "," reset_backend_server_description ","@in_policy_names ! ","@backend_server_description [] << ","@backend_server_description [] ","@load_balancer [] [] << ","@load_balancer [] [] "," reset_stickiness_policy "," reset_listener_description ","@listener_description [] << "]}," Fog Parsers AWS ELB DescribeLoadBalancers start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS ELB DescribeLoadBalancers reset_stickiness_policy":{"type":"method","name":"reset_stickiness_policy","children":[],"call":[]}," Fog Parsers AWS ELB DescribeLoadBalancers reset_backend_server_description":{"type":"method","name":"reset_backend_server_description","children":[],"call":[]}," Fog Parsers AWS ELB DescribeLoadBalancers reset_listener_description":{"type":"method","name":"reset_listener_description","children":[],"call":[]}," Fog Parsers AWS ELB DescribeLoadBalancers reset_load_balancer":{"type":"method","name":"reset_load_balancer","children":[],"call":[]}," Fog Parsers AWS ELB DescribeLoadBalancers reset":{"type":"method","name":"reset","children":[],"call":[" reset_backend_server_description "," reset_stickiness_policy "," reset_listener_description "," reset_load_balancer "]}," Fog Parsers AWS ELB DescribeLoadBalancerPolicyTypes end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= ","@response [] []= "," value ","@response [] ","@policy_attribute_type_description []= ","@policy_type []= "," reset_policy_type ","@results [] << ","@results [] ","@in_policy_attribute_types ! "," reset_policy_attribute_type_description ","@policy_type [] << ","@policy_type [] "]}," Fog Parsers AWS ELB DescribeLoadBalancerPolicyTypes start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS ELB DescribeLoadBalancerPolicyTypes reset_policy_attribute_type_description":{"type":"method","name":"reset_policy_attribute_type_description","children":[],"call":[]}," Fog Parsers AWS ELB DescribeLoadBalancerPolicyTypes reset_policy_type":{"type":"method","name":"reset_policy_type","children":[],"call":[]}," Fog Parsers AWS ELB DescribeLoadBalancerPolicyTypes reset":{"type":"method","name":"reset","children":[],"call":[" reset_policy_attribute_type_description "," reset_policy_type "]}," Fog Parsers AWS ELB DescribeLoadBalancerPolicies end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= ","@response [] []= "," value ","@response [] ","@policy_attribute_description []= ","@policy []= "," reset_policy ","@results [] << ","@results [] ","@in_policy_attributes ! "," reset_policy_attribute_description ","@policy [] << ","@policy [] "]}," Fog Parsers AWS ELB DescribeLoadBalancerPolicies start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS ELB DescribeLoadBalancerPolicies reset_policy_attribute_description":{"type":"method","name":"reset_policy_attribute_description","children":[],"call":[]}," Fog Parsers AWS ELB DescribeLoadBalancerPolicies reset_policy":{"type":"method","name":"reset_policy","children":[],"call":[]}," Fog Parsers AWS ELB DescribeLoadBalancerPolicies reset":{"type":"method","name":"reset","children":[],"call":[" reset_policy_attribute_description "," reset_policy "]}," Fog Parsers AWS ELB DescribeLoadBalancerAttributes end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] ","@response [] [] []= ","@response [] [] ","@connection_draining []= "," value to_i ","@connection_settings []= "," value == ","@cross_zone_load_balancing []= "]}," Fog Parsers AWS ELB DescribeLoadBalancerAttributes start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS ELB DescribeLoadBalancerAttributes reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS ELB DescribeInstanceHealth end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] ","@response [] [] << ","@response [] [] ","@instance_state []= "]}," Fog Parsers AWS ELB DescribeInstanceHealth reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS ELB DeregisterInstancesFromLoadBalancer end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] ","@response [] [] << ","@response [] [] "]}," Fog Parsers AWS ELB DeregisterInstancesFromLoadBalancer reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS ELB DeleteLoadBalancer end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "]}," Fog Parsers AWS ELB DeleteLoadBalancer reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS ELB CreateLoadBalancer end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "]}," Fog Parsers AWS ELB CreateLoadBalancer reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS ELB ConfigureHealthCheck end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] ","@health_check []= "," value to_i "]}," Fog Parsers AWS ELB ConfigureHealthCheck start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS ELB ConfigureHealthCheck reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS ELB AttachLoadBalancerToSubnets end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] ","@response [] [] << ","@response [] [] "]}," Fog Parsers AWS ELB AttachLoadBalancerToSubnets reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS ELB ApplySecurityGroupsToLoadBalancer end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] ","@response [] [] << ","@response [] [] "]}," Fog Parsers AWS ELB ApplySecurityGroupsToLoadBalancer reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Elasticache SubnetGroupParser fresh_subnet_group":{"type":"method","name":"fresh_subnet_group","children":[],"call":[]}," Fog Parsers AWS Elasticache SubnetGroupParser end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] ","@cache_subnet_group [] << ","@cache_subnet_group [] ","@cache_subnet_group []= "]}," Fog Parsers AWS Elasticache SubnetGroupParser start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS Elasticache SubnetGroupParser reset":{"type":"method","name":"reset","children":[],"call":[" fresh_subnet_group "]}," Fog Parsers AWS Elasticache SingleSecurityGroup end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "," reset_security_group ","@response []= "]}," Fog Parsers AWS Elasticache SingleSecurityGroup start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS Elasticache SingleSecurityGroup reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Elasticache SingleParameterGroup end_element":{"type":"method","name":"end_element","children":[],"call":[" reset_parameter_group ","@response []= "]}," Fog Parsers AWS Elasticache SingleCacheCluster end_element":{"type":"method","name":"end_element","children":[],"call":[" reset_cache_cluster ","@response []= "]}," Fog Parsers AWS Elasticache SecurityGroupParser end_element":{"type":"method","name":"end_element","children":[],"call":["@ec2_group []= "," value ","@security_group [] << ","@security_group [] ","@ec2_group empty? ","@security_group []= "]}," Fog Parsers AWS Elasticache SecurityGroupParser start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS Elasticache SecurityGroupParser reset_security_group":{"type":"method","name":"reset_security_group","children":[],"call":[]}," Fog Parsers AWS Elasticache SecurityGroupParser reset":{"type":"method","name":"reset","children":[],"call":[" reset_security_group "]}," Fog Parsers AWS Elasticache ResetParameterGroup end_element":{"type":"method","name":"end_element","children":[],"call":[" reset_parameter_group ","@response []= "]}," Fog Parsers AWS Elasticache ResetParameterGroup reset":{"type":"method","name":"reset","children":[],"call":["@response []= "]}," Fog Parsers AWS Elasticache ParameterGroupParser end_element":{"type":"method","name":"end_element","children":[],"call":["@parameter_group []= "," value "]}," Fog Parsers AWS Elasticache ParameterGroupParser reset_parameter_group":{"type":"method","name":"reset_parameter_group","children":[],"call":[]}," Fog Parsers AWS Elasticache ParameterGroupParser reset":{"type":"method","name":"reset","children":[],"call":[" reset_parameter_group "]}," Fog Parsers AWS Elasticache ModifyParameterGroup end_element":{"type":"method","name":"end_element","children":[],"call":[" reset_parameter_group ","@response []= "]}," Fog Parsers AWS Elasticache ModifyParameterGroup reset":{"type":"method","name":"reset","children":[],"call":["@response []= "]}," Fog Parsers AWS Elasticache EventListParser end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@response [] << ","@response [] ","@event empty? ","@event []= "," value strip ","DateTime  parse "]}," Fog Parsers AWS Elasticache EventListParser start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS Elasticache EventListParser reset":{"type":"method","name":"reset","children":[],"call":["@response []= "]}," Fog Parsers AWS Elasticache EngineDefaultsParser end_element":{"type":"method","name":"end_element","children":[],"call":["@parameter [] << ","@parameter [] ","@node_specific_value empty? ! ","@node_specific_value empty? ","@node_specific_value []= "," value ","@parameter []= ","@engine_defaults [] << ","@engine_defaults [] ","@parameter empty? ! ","@parameter empty? ","@engine_defaults []= "]}," Fog Parsers AWS Elasticache EngineDefaultsParser start_element":{"type":"method","name":"start_element","children":[],"call":["@parameter []= "]}," Fog Parsers AWS Elasticache EngineDefaultsParser reset_engine_defaults":{"type":"method","name":"reset_engine_defaults","children":[],"call":[]}," Fog Parsers AWS Elasticache EngineDefaultsParser reset":{"type":"method","name":"reset","children":[],"call":[" reset_engine_defaults "]}," Fog Parsers AWS Elasticache DescribeSecurityGroups end_element":{"type":"method","name":"end_element","children":[],"call":[" reset_security_group ","@response [] << ","@response [] "]}," Fog Parsers AWS Elasticache DescribeSecurityGroups reset":{"type":"method","name":"reset","children":[],"call":["@response []= "]}," Fog Parsers AWS Elasticache DescribeReservedCacheNodes end_element":{"type":"method","name":"end_element","children":[],"call":["@reserved_node []= ","Time  parse ","@response []= ","@response [] << ","@response [] ","@value to_f ","@value to_i "]}," Fog Parsers AWS Elasticache DescribeReservedCacheNodes reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Elasticache DescribeParameterGroups end_element":{"type":"method","name":"end_element","children":[],"call":[" reset_parameter_group ","@response [] << ","@response [] "]}," Fog Parsers AWS Elasticache DescribeParameterGroups reset":{"type":"method","name":"reset","children":[],"call":["@response []= "]}," Fog Parsers AWS Elasticache DescribeEngineDefaultParameters end_element":{"type":"method","name":"end_element","children":[],"call":[" reset_engine_defaults ","@response []= "]}," Fog Parsers AWS Elasticache DescribeCacheSubnetGroups end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "," fresh_subnet_group ","@response [] [] << ","@response [] [] "]}," Fog Parsers AWS Elasticache DescribeCacheSubnetGroups start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS Elasticache DescribeCacheSubnetGroups reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Elasticache DescribeCacheParameters end_element":{"type":"method","name":"end_element","children":[],"call":[" reset_engine_defaults ","@response []= "]}," Fog Parsers AWS Elasticache DescribeCacheClusters end_element":{"type":"method","name":"end_element","children":[],"call":[" reset_cache_cluster ","@response [] << ","@response [] "]}," Fog Parsers AWS Elasticache DescribeCacheClusters reset":{"type":"method","name":"reset","children":[],"call":["@response []= "]}," Fog Parsers AWS Elasticache CreateCacheSubnetGroup end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "," fresh_subnet_group "]}," Fog Parsers AWS Elasticache CreateCacheSubnetGroup start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS Elasticache CreateCacheSubnetGroup reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Elasticache CacheClusterParser end_element":{"type":"method","name":"end_element","children":[],"call":["@cache_cluster [] []= "," value ","@cache_cluster [] ","@pending_values []= "," value strip ","@cache_node []= ","@cache_cluster []= ","@cache_cluster [] << ","@cache_node empty? ","@security_group empty? ","DateTime  parse "," value to_i ","@security_group_members << ","@security_group_member []= ","@configuration_endpoint []= ","@cache_security_group empty? "]}," Fog Parsers AWS Elasticache CacheClusterParser start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS Elasticache CacheClusterParser reset_cache_cluster":{"type":"method","name":"reset_cache_cluster","children":[],"call":[]}," Fog Parsers AWS Elasticache CacheClusterParser reset":{"type":"method","name":"reset","children":[],"call":[" reset_cache_cluster "]}," Fog Parsers AWS Elasticache Base end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "]}," Fog Parsers AWS Elasticache Base start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS Elasticache Base reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Elasticache AuthorizeCacheSecurityGroupIngress end_element":{"type":"method","name":"end_element","children":[],"call":[" reset_security_group ","@response []= "]}," Fog Parsers DNS AWS ListResourceRecordSets end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value == "," value "," value to_i ","@section == ","@resource_record_set []= ","@response [] << ","@response [] ","@geo_location []= ","@alias_target []= ","@resource_record_set [] << ","@resource_record_set [] "," value gsub "]}," Fog Parsers DNS AWS ListResourceRecordSets reset":{"type":"method","name":"reset","children":[],"call":["@response []= ","@resource_record_set []= "]}," Fog Parsers DNS AWS ListHostedZones end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "," value to_i ","@hosted_zones << ","@zone []= "," value sub "]}," Fog Parsers DNS AWS ListHostedZones reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers DNS AWS ListHealthChecks end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "," value to_i ","@health_check_config []= ","@health_check []= ","@health_checks << "]}," Fog Parsers DNS AWS ListHealthChecks reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers DNS AWS HealthCheck end_element":{"type":"method","name":"end_element","children":[],"call":["@health_check_config []= "," value to_i "," value ","@health_check []= ","@response []= "]}," Fog Parsers DNS AWS HealthCheck reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers DNS AWS GetHostedZone end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= ","@name_servers << "," value ","@section == "," value to_i ","@hosted_zone []= "," value sub ","@response [] []= ","@response [] ","@vpcs << ","@vpc []= "]}," Fog Parsers DNS AWS GetHostedZone reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers DNS AWS GetChange end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "," value sub "]}," Fog Parsers DNS AWS GetChange reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers DNS AWS DeleteHostedZone end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "]}," Fog Parsers DNS AWS DeleteHostedZone reset":{"type":"method","name":"reset","children":[],"call":["@response []= "]}," Fog Parsers DNS AWS CreateHostedZone end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= ","@name_servers << "," value ","@section == ","@change_info []= "," value sub ","@hosted_zone []= "]}," Fog Parsers DNS AWS CreateHostedZone reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers DNS AWS ChangeResourceRecordSets end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "," value sub "]}," Fog Parsers DNS AWS ChangeResourceRecordSets reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Compute AWS TerminateInstances end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@instance [] []= ","@instance [] "," value to_i ","@response [] << ","@response [] ","@instance []= "]}," Fog Parsers Compute AWS TerminateInstances start_element":{"type":"method","name":"start_element","children":[],"call":["name == "]}," Fog Parsers Compute AWS TerminateInstances reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Compute AWS StartStopInstances end_element":{"type":"method","name":"end_element","children":[],"call":["@instance [] []= "," value ","@instance [] ","@response [] << ","@response [] ","@instance []= "," value to_s "]}," Fog Parsers Compute AWS StartStopInstances start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers Compute AWS StartStopInstances reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Compute AWS SpotInstanceRequests end_element":{"type":"method","name":"end_element","children":[],"call":["@spot_instance_request []= "," value to_f "," value ","@response []= ","@spot_instance_request [] []= "," value == ","@spot_instance_request [] ","@response [] << ","@response [] ","@spot_instance_request [] [] << ","@spot_instance_request [] [] ","@context last ","@spot_instance_request [] [] []= ","@context include? ! ","@context include? ","@block_device_mapping []= ","Time  parse ","@context pop "]}," Fog Parsers Compute AWS SpotInstanceRequests start_element":{"type":"method","name":"start_element","children":[],"call":["@context push ","@contexts include? "]}," Fog Parsers Compute AWS SpotInstanceRequests reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Compute AWS SpotDatafeedSubscription end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@response [] []= ","@response [] ","@response [] [] "]}," Fog Parsers Compute AWS SpotDatafeedSubscription reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Compute AWS RunInstances end_element":{"type":"method","name":"end_element","children":[],"call":["@instance []= "," value == "," value ","@response []= ","@instance [] []= ","@instance [] ","@instance [] << ","Time  parse ","@response [] << ","@response [] ","@context last ","@network_interfaces []= ","@block_device_mapping []= "," value to_i ","@context pop "]}," Fog Parsers Compute AWS RunInstances start_element":{"type":"method","name":"start_element","children":[],"call":["@context push ","@contexts include? "]}," Fog Parsers Compute AWS RunInstances reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Compute AWS ReplaceNetworkAclAssociation end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog Parsers Compute AWS ReplaceNetworkAclAssociation reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Compute AWS RegisterImage end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog Parsers Compute AWS PurchaseReservedInstancesOffering end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog Parsers Compute AWS PurchaseReservedInstancesOffering reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Compute AWS NetworkInterfaceParser end_element":{"type":"method","name":"end_element","children":[],"call":["@nic []= "," value == "," value ","@private_ip_address []= ","@private_ip_addresses << "," value strip ","@association []= ","@attachment []= ","@group []= ","@nic [] []= ","@group [] ","@nic [] ","@tag []= ","@tag [] "]}," Fog Parsers Compute AWS NetworkInterfaceParser start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers Compute AWS NetworkInterfaceParser reset":{"type":"method","name":"reset","children":[],"call":[" reset_nic "]}," Fog Parsers Compute AWS NetworkInterfaceParser reset_nic":{"type":"method","name":"reset_nic","children":[],"call":[]}," Fog Parsers Compute AWS NetworkAclParser end_element":{"type":"method","name":"end_element","children":[],"call":["@network_acl []= "," value == "," value ","@tag []= ","@network_acl [] []= ","@tag [] ","@network_acl [] ","@association []= ","@network_acl [] << ","@entry []= "," value to_i ","@entry [] []= ","@entry [] "]}," Fog Parsers Compute AWS NetworkAclParser start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers Compute AWS NetworkAclParser reset":{"type":"method","name":"reset","children":[],"call":[" reset_nacl "]}," Fog Parsers Compute AWS NetworkAclParser reset_nacl":{"type":"method","name":"reset_nacl","children":[],"call":[]}," Fog Parsers Compute AWS MonitorUnmonitorInstances end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= ","@current_instance_set []= "," value ","@instance_set << "]}," Fog Parsers Compute AWS MonitorUnmonitorInstances reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Compute AWS ModifySubnetAttribute end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "," value == "]}," Fog Parsers Compute AWS ModifySubnetAttribute reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Compute AWS ImportKeyPair end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog Parsers Compute AWS GetPasswordData end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= ","Time  parse "]}," Fog Parsers Compute AWS GetPasswordData reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Compute AWS GetConsoleOutput end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= ","Time  parse "," value ","Base64  decode64 "]}," Fog Parsers Compute AWS GetConsoleOutput reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Compute AWS DetachVolume end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","Time  parse "]}," Fog Parsers Compute AWS DescribeVpcs end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@response [] << ","@response [] ","@vpc []= ","@tag []= ","@vpc [] []= ","@tag [] ","@vpc [] "," value == "," value blank? ! "," value blank? "," value squish ","@context pop ","@current_vpc []= ","@current_vpc [] << ","@current_vpc [] ","@current_ipv6_block []= "," value strip ","@current_cidr_block []= ","@current_vpc [] []= ","@context [] join ","@context [] "]}," Fog Parsers Compute AWS DescribeVpcs start_element":{"type":"method","name":"start_element","children":[],"call":["@context [] join ","@context [] ","@context push "]}," Fog Parsers Compute AWS DescribeVpcs reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Compute AWS DescribeVpcAttribute end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "," value == "]}," Fog Parsers Compute AWS DescribeVpcAttribute start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers Compute AWS DescribeVpcAttribute reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Compute AWS DescribeVolumes end_element":{"type":"method","name":"end_element","children":[],"call":["@volume []= "," value == "," value "," value to_i ","@response []= ","@response [] << ","@response [] ","Time  parse ","@volume [] []= ","@tag [] ","@volume [] ","@tag []= ","@volume [] << ","@attachment []= "]}," Fog Parsers Compute AWS DescribeVolumes start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers Compute AWS DescribeVolumes reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Compute AWS DescribeVolumeStatus end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] << ","@response [] ","@response []= "," value ","@volume []= ","@volume_status []= ","@volume [] << ","@volume [] ","@event_set []= ","Time  parse "," value strip ","@volume_status [] << ","@volume_status [] ","@detail []= ","@action_set []= "]}," Fog Parsers Compute AWS DescribeVolumeStatus start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers Compute AWS DescribeVolumeStatus reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Compute AWS DescribeSubnets end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@response [] << ","@response [] ","@subnet []= "," value == ","@tag []= ","@subnet [] []= ","@tag [] ","@subnet [] "]}," Fog Parsers Compute AWS DescribeSubnets start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers Compute AWS DescribeSubnets reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Compute AWS DescribeSpotPriceHistory end_element":{"type":"method","name":"end_element","children":[],"call":["@spot_price []= ","Time  parse "," value "," value to_f ","@response []= ","@response [] << ","@response [] "]}," Fog Parsers Compute AWS DescribeSpotPriceHistory reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Compute AWS DescribeSnapshots end_element":{"type":"method","name":"end_element","children":[],"call":["@snapshot []= "," value == "," value "," value to_i ","Time  parse ","@response []= ","@snapshot [] ","@response [] << ","@response [] ","@tag []= ","@snapshot [] []= ","@tag [] "]}," Fog Parsers Compute AWS DescribeSnapshots start_element":{"type":"method","name":"start_element","children":[],"call":["name == "]}," Fog Parsers Compute AWS DescribeSnapshots reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Compute AWS DescribeSecurityGroups end_element":{"type":"method","name":"end_element","children":[],"call":["@group []= "," value ","@response []= ","@response [] << ","@response [] ","@security_group [] << ","@security_group [] ","@ip_permission [] << ","@ip_permission [] ","@ip_permission_egress [] << ","@ip_permission_egress [] ","@ip_permission []= ","@ip_permission_egress []= ","@security_group []= "," value to_i ","@ip_range []= ","@tag []= ","@security_group [] []= ","@tag [] "]}," Fog Parsers Compute AWS DescribeSecurityGroups start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers Compute AWS DescribeSecurityGroups reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Compute AWS DescribeRouteTables end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@response [] << ","@response [] ","@route_table []= ","@route_table [] << ","@route_table [] ","@route []= ","@route_table [] []= ","@tag [] ","@tag []= ","@association []= "," value == "]}," Fog Parsers Compute AWS DescribeRouteTables start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers Compute AWS DescribeRouteTables reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Compute AWS DescribeReservedInstancesOfferings end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@response [] << ","@response [] ","@reserved_instances_offering empty? ","@reserved_instances_offering []= "," value to_f "," value to_i "]}," Fog Parsers Compute AWS DescribeReservedInstancesOfferings reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Compute AWS DescribeReservedInstances end_element":{"type":"method","name":"end_element","children":[],"call":["@reserved_instance []= ","Time  parse "," value ","@response []= ","@tag []= ","@reserved_instance [] []= ","@tag [] ","@reserved_instance [] "," get_default_item ","@response [] << ","@response [] ","@context last ","@context pop "," value to_f "," value to_i ","@charge []= ","@reserved_instance [] << ","@charge [] "," get_default_item  []= "," get_default_item  [] []= "," get_default_item  [] "," get_default_item  [] << "]}," Fog Parsers Compute AWS DescribeReservedInstances start_element":{"type":"method","name":"start_element","children":[],"call":["@context push ","@contexts include? "]}," Fog Parsers Compute AWS DescribeReservedInstances reset":{"type":"method","name":"reset","children":[],"call":[" get_default_item "]}," Fog Parsers Compute AWS DescribeReservedInstances get_default_item":{"type":"method","name":"get_default_item","children":[],"call":[]}," Fog Parsers Compute AWS DescribeRegions end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@region []= ","@response [] << ","@response [] "]}," Fog Parsers Compute AWS DescribeRegions reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Compute AWS DescribePlacementGroups end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@placement_group []= ","@response [] << ","@response [] "]}," Fog Parsers Compute AWS DescribePlacementGroups reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Compute AWS DescribeNetworkInterfaces end_element":{"type":"method","name":"end_element","children":[],"call":[" reset_nic ","@response [] << ","@response [] ","@item_level == ","@response []= "," value "]}," Fog Parsers Compute AWS DescribeNetworkInterfaces start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers Compute AWS DescribeNetworkInterfaces reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Compute AWS DescribeNetworkInterfaceAttribute end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@attachment []= "," value == ","@group []= ","@response [] []= ","@group [] ","@response [] "]}," Fog Parsers Compute AWS DescribeNetworkInterfaceAttribute start_element":{"type":"method","name":"start_element","children":[],"call":["@response []= ","@response key? "]}," Fog Parsers Compute AWS DescribeNetworkInterfaceAttribute reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Compute AWS DescribeNetworkAcls end_element":{"type":"method","name":"end_element","children":[],"call":[" reset_nacl ","@response [] << ","@response [] ","@item_level == ","@response []= "," value "]}," Fog Parsers Compute AWS DescribeNetworkAcls start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers Compute AWS DescribeNetworkAcls reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Compute AWS DescribeKeyPairs end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@key []= ","@response [] << ","@response [] "]}," Fog Parsers Compute AWS DescribeKeyPairs reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Compute AWS DescribeInternetGateways end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@response [] << ","@response [] ","@internet_gateway []= ","@attachment []= ","@tag []= ","@internet_gateway [] []= ","@tag [] ","@internet_gateway [] "]}," Fog Parsers Compute AWS DescribeInternetGateways start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers Compute AWS DescribeInternetGateways reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Compute AWS DescribeInstances end_element":{"type":"method","name":"end_element","children":[],"call":["@instance [] []= "," value ","@instance [] ","@instance []= "," value == ","@instance [] << ","@response []= ","@reservation []= ","@context last ","Time  parse ","@tag []= ","@response [] << ","@response [] ","@tag [] ","@reservation [] << ","@reservation [] ","@network_interface [] << ","@network_interface [] ","@context [] ","name == ","@network_interface []= ","@block_device_mapping []= "," value to_i ","@context last == ","@context pop "]}," Fog Parsers Compute AWS DescribeInstances start_element":{"type":"method","name":"start_element","children":[],"call":["@context push ","@contexts include? "]}," Fog Parsers Compute AWS DescribeInstances reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Compute AWS DescribeInstanceStatus end_element":{"type":"method","name":"end_element","children":[],"call":["@item []= "," value ","@instance [] []= ","@instance [] ","@inside to_s ","@item nil? "," value to_i ","@response [] << ","@response [] ","@instance [] [] << ","@instance [] [] ","@instance [] << ","@response []= ","@instance []= "]}," Fog Parsers Compute AWS DescribeInstanceStatus start_element":{"type":"method","name":"start_element","children":[],"call":[" new_instance! "," new_item! "]}," Fog Parsers Compute AWS DescribeInstanceStatus reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Compute AWS DescribeInstanceStatus new_item!":{"type":"method","name":"new_item!","children":[],"call":[]}," Fog Parsers Compute AWS DescribeInstanceStatus new_instance!":{"type":"method","name":"new_instance!","children":[],"call":[]}," Fog Parsers Compute AWS DescribeImages end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@response [] << ","@response [] ","@image []= "," value == ","@state_reason []= ","@tag []= ","@image [] []= ","@tag [] ","@image [] ","@image [] << ","@block_device_mapping []= "," value to_i ","Time  parse "," value empty? ! "," value empty? "]}," Fog Parsers Compute AWS DescribeImages start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers Compute AWS DescribeImages reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Compute AWS DescribeDhcpOptions end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@response [] << ","@response [] ","@dhcp_options []= ","@value_set << ","@dhcp_configuration []= ","@in_value_set ! ","@dhcp_options [] []= ","@dhcp_configuration [] ","@dhcp_options [] ","@tag []= ","@tag [] "]}," Fog Parsers Compute AWS DescribeDhcpOptions start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers Compute AWS DescribeDhcpOptions reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Compute AWS DescribeAvailabilityZones end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@availability_zone []= ","@availability_zone [] << ","@availability_zone [] ","@response [] << ","@response [] "]}," Fog Parsers Compute AWS DescribeAvailabilityZones reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Compute AWS DescribeAvailabilityZones start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers Compute AWS DescribeAddresses end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@response [] << ","@response [] ","@address []= "]}," Fog Parsers Compute AWS DescribeAddresses reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Compute AWS DescribeAccountAttributes end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] uniq! ","@response [] ","@response [] << ","@response []= "," value ","@attribute [] << ","@attribute [] ","@attribute []= "]}," Fog Parsers Compute AWS DescribeAccountAttributes start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers Compute AWS DescribeAccountAttributes reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Compute AWS DeregisterImage end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog Parsers Compute AWS CreateVpc end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@response [] << ","@response [] ","@vpc []= ","@tag []= ","@vpc [] []= ","@tag [] ","@vpc [] "]}," Fog Parsers Compute AWS CreateVpc start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers Compute AWS CreateVpc reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Compute AWS CreateVolume end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value == "," value "," value to_i ","Time  parse "]}," Fog Parsers Compute AWS CreateSubnet end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@subnet []= ","@tag []= ","@subnet [] []= ","@tag [] ","@subnet [] "," value == "]}," Fog Parsers Compute AWS CreateSubnet start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers Compute AWS CreateSubnet reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Compute AWS CreateSnapshot end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value to_i "," value ","Time  parse "]}," Fog Parsers Compute AWS CreateSecurityGroup end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "," value == "]}," Fog Parsers Compute AWS CreateRouteTable end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@response [] << ","@response [] ","@route_table []= ","@route_table [] << ","@route_table [] ","@association []= ","@route []= ","@route_table [] []= ","@tag [] "]}," Fog Parsers Compute AWS CreateRouteTable start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers Compute AWS CreateRouteTable reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Compute AWS CreateNetworkInterface end_element":{"type":"method","name":"end_element","children":[],"call":[" reset_nic ","@response []= "," value "]}," Fog Parsers Compute AWS CreateNetworkInterface reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Compute AWS CreateNetworkAcl end_element":{"type":"method","name":"end_element","children":[],"call":[" reset_nacl ","@response []= "," value "]}," Fog Parsers Compute AWS CreateNetworkAcl reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Compute AWS CreateKeyPair end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog Parsers Compute AWS CreateInternetGateway end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@response [] << ","@response [] ","@internet_gateway []= ","@attachment []= ","@internet_gateway [] []= ","@attachment [] ","@internet_gateway [] ","@tag []= ","@vpc [] []= ","@tag [] ","@vpc [] "]}," Fog Parsers Compute AWS CreateInternetGateway start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers Compute AWS CreateInternetGateway reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Compute AWS CreateImage end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog Parsers Compute AWS CreateDhcpOptions end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@response [] << ","@response [] ","@dhcp_options []= ","@value_set << ","@dhcp_configuration []= ","@in_value_set ! ","@dhcp_options [] []= ","@dhcp_configuration [] ","@dhcp_options [] ","@tag []= ","@tag [] "]}," Fog Parsers Compute AWS CreateDhcpOptions start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers Compute AWS CreateDhcpOptions reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Compute AWS CopySnapshot end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog Parsers Compute AWS CopyImage end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog Parsers Compute AWS CancelSpotInstanceRequests end_element":{"type":"method","name":"end_element","children":[],"call":["@spot_instance_request []= "," value ","@response []= ","@response [] << ","@response [] "]}," Fog Parsers Compute AWS CancelSpotInstanceRequests reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Compute AWS Basic end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value == "," value "]}," Fog Parsers Compute AWS AttachVolume end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","Time  parse "]}," Fog Parsers Compute AWS AttachNetworkInterface end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog Parsers Compute AWS AssociateRouteTable end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog Parsers Compute AWS AssociateAddress end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value == "," value "]}," Fog Parsers Compute AWS AssignPrivateIpAddresses end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value == "," value "]}," Fog Parsers Compute AWS AllocateAddress end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog Parsers AWS CloudWatch SetAlarmState end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "]}," Fog Parsers AWS CloudWatch SetAlarmState start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS CloudWatch SetAlarmState reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS CloudWatch PutMetricData end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= ","@response [] "]}," Fog Parsers AWS CloudWatch PutMetricData start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS CloudWatch PutMetricData reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS CloudWatch PutMetricAlarm end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value strip "," value ","@response [] "]}," Fog Parsers AWS CloudWatch PutMetricAlarm start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS CloudWatch PutMetricAlarm reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS CloudWatch ListMetrics end_element":{"type":"method","name":"end_element","children":[],"call":["@metric [] << ","@metric [] "," reset_metric ","@response [] [] << ","@response [] [] ","@response [] ","@in_dimensions ! ","@response [] []= "," value ","@metric []= ","@dimension []= "]}," Fog Parsers AWS CloudWatch ListMetrics start_element":{"type":"method","name":"start_element","children":[],"call":[" reset_dimension "]}," Fog Parsers AWS CloudWatch ListMetrics reset_dimension":{"type":"method","name":"reset_dimension","children":[],"call":[]}," Fog Parsers AWS CloudWatch ListMetrics reset_metric":{"type":"method","name":"reset_metric","children":[],"call":[]}," Fog Parsers AWS CloudWatch ListMetrics reset":{"type":"method","name":"reset","children":[],"call":[" reset_metric "]}," Fog Parsers AWS CloudWatch GetMetricStatistics end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "," reset_datapoint ","@response [] [] << ","@response [] [] ","@datapoint []= ","Time  parse "," value to_f "]}," Fog Parsers AWS CloudWatch GetMetricStatistics start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS CloudWatch GetMetricStatistics reset_datapoint":{"type":"method","name":"reset_datapoint","children":[],"call":[]}," Fog Parsers AWS CloudWatch GetMetricStatistics reset":{"type":"method","name":"reset","children":[],"call":[" reset_datapoint "]}," Fog Parsers AWS CloudWatch EnableAlarmActions end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "]}," Fog Parsers AWS CloudWatch EnableAlarmActions start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS CloudWatch EnableAlarmActions reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS CloudWatch DisableAlarmActions end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "]}," Fog Parsers AWS CloudWatch DisableAlarmActions start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS CloudWatch DisableAlarmActions reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS CloudWatch DescribeAlarmsForMetric end_element":{"type":"method","name":"end_element","children":[],"call":["@metric_alarms [] << ","@metric_alarms [] ","@response [] [] last merge! ","@response [] [] last ","@response [] [] ","@response [] ","@response [] [] last != "," reset_metric_alarms ","@response [] [] << ","@metric_alarms key? ","@in_dimensions ! ","@response [] []= "," value ","@metric_alarms []= ","Time  parse "," value to_s strip "," value to_s "," value to_f "," value to_i ","@dimension []= "]}," Fog Parsers AWS CloudWatch DescribeAlarmsForMetric start_element":{"type":"method","name":"start_element","children":[],"call":[" reset_dimension "]}," Fog Parsers AWS CloudWatch DescribeAlarmsForMetric reset_dimension":{"type":"method","name":"reset_dimension","children":[],"call":[]}," Fog Parsers AWS CloudWatch DescribeAlarmsForMetric reset_metric_alarms":{"type":"method","name":"reset_metric_alarms","children":[],"call":[]}," Fog Parsers AWS CloudWatch DescribeAlarmsForMetric reset":{"type":"method","name":"reset","children":[],"call":[" reset_metric_alarms "]}," Fog Parsers AWS CloudWatch DescribeAlarms end_element":{"type":"method","name":"end_element","children":[],"call":["@metric_alarms [] << ","@metric_alarms [] ","@response [] [] last merge! ","@response [] [] last ","@response [] [] ","@response [] ","@response [] [] last != "," reset_metric_alarms ","@response [] [] << ","@metric_alarms key? ","@in_dimensions ! ","@response [] []= "," value ","@metric_alarms []= ","Time  parse "," value to_s strip "," value to_s "," value to_f "," value to_i ","@dimension []= "]}," Fog Parsers AWS CloudWatch DescribeAlarms start_element":{"type":"method","name":"start_element","children":[],"call":[" reset_dimension "," reset_insufficient_data_actions "," reset_ok_actions "," reset_alarm_actions "]}," Fog Parsers AWS CloudWatch DescribeAlarms reset_dimension":{"type":"method","name":"reset_dimension","children":[],"call":[]}," Fog Parsers AWS CloudWatch DescribeAlarms reset_metric_alarms":{"type":"method","name":"reset_metric_alarms","children":[],"call":[]}," Fog Parsers AWS CloudWatch DescribeAlarms reset":{"type":"method","name":"reset","children":[],"call":[" reset_metric_alarms "]}," Fog Parsers AWS CloudWatch DescribeAlarmHistory end_element":{"type":"method","name":"end_element","children":[],"call":[" reset_alarm_history_item ","@response [] [] << ","@response [] [] ","@response [] ","@response [] []= "," value ","@alarm_history_item []= ","Time  parse "]}," Fog Parsers AWS CloudWatch DescribeAlarmHistory start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS CloudWatch DescribeAlarmHistory reset_alarm_history_item":{"type":"method","name":"reset_alarm_history_item","children":[],"call":[]}," Fog Parsers AWS CloudWatch DescribeAlarmHistory reset":{"type":"method","name":"reset","children":[],"call":[" reset_alarm_history_item "]}," Fog Parsers AWS CloudWatch DeleteAlarms end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= ","@response [] "]}," Fog Parsers AWS CloudWatch DeleteAlarms start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS CloudWatch DeleteAlarms reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS CloudFormation ValidateTemplate end_element":{"type":"method","name":"end_element","children":[],"call":["@parameter []= "," value ","@response [] << ","@response [] ","@response []= "]}," Fog Parsers AWS CloudFormation ValidateTemplate start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS CloudFormation ValidateTemplate reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS CloudFormation UpdateStack end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog Parsers AWS CloudFormation ListStacks end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@stack []= ","Time  parse ","@response [] << ","@response [] "]}," Fog Parsers AWS CloudFormation ListStacks reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS CloudFormation ListStackResources end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@resource []= ","Time  parse ","@response [] << ","@response [] "]}," Fog Parsers AWS CloudFormation ListStackResources reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS CloudFormation GetTemplate end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog Parsers AWS CloudFormation DescribeStacks end_element":{"type":"method","name":"end_element","children":[],"call":["@stack []= "," value ","Time  parse ","@response []= ","@response [] << ","@response [] ","@stack [] << ","@stack [] ","@parameter []= ","@output []= ","@tag []= "]}," Fog Parsers AWS CloudFormation DescribeStacks start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS CloudFormation DescribeStacks reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS CloudFormation DescribeStackResources end_element":{"type":"method","name":"end_element","children":[],"call":["@resource []= ","Time  parse "," value ","@response []= ","@response [] << ","@response [] "]}," Fog Parsers AWS CloudFormation DescribeStackResources reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS CloudFormation DescribeStackEvents end_element":{"type":"method","name":"end_element","children":[],"call":["@event []= ","Time  parse "," value ","@response []= ","@response [] << ","@response [] "]}," Fog Parsers AWS CloudFormation DescribeStackEvents reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS CloudFormation CreateStack end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog Parsers CDN AWS StreamingDistribution end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] [] << ","@response [] [] ","@response [] ","@response [] []= ","@response []= ","Time  parse ","@value to_i ","@response [] [] []= ","@value == "]}," Fog Parsers CDN AWS StreamingDistribution start_element":{"type":"method","name":"start_element","children":[],"call":["@response [] []= ","@response [] "]}," Fog Parsers CDN AWS StreamingDistribution reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers CDN AWS PostInvalidation end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] [] << "," value ","@response [] [] ","@response [] ","@response []= ","@response [] []= "]}," Fog Parsers CDN AWS PostInvalidation reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers CDN AWS GetStreamingDistributionList end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= ","@value to_i ","@value == ","@distribution_summary []= ","Time  parse ","@distribution_summary [] []= ","@distribution_summary [] ","@distribution_summary [] << ","@response [] << ","@response [] "]}," Fog Parsers CDN AWS GetStreamingDistributionList start_element":{"type":"method","name":"start_element","children":[],"call":["@distribution_summary []= "]}," Fog Parsers CDN AWS GetStreamingDistributionList reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers CDN AWS GetInvalidationList end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= ","@value to_i ","@value == ","@invalidation_summary []= ","@response [] << ","@response [] "]}," Fog Parsers CDN AWS GetInvalidationList start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers CDN AWS GetInvalidationList reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers CDN AWS GetInvalidation end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] ","@response []= ","@response [] [] << ","@response [] [] "]}," Fog Parsers CDN AWS GetInvalidation start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers CDN AWS GetInvalidation reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers CDN AWS GetDistributionList end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value to_i "," value "," value == ","@distribution_summary []= ","Time  parse ","@distribution_summary [] []= ","@distribution_summary [] ","@distribution_summary [] << ","@response [] << ","@response [] "]}," Fog Parsers CDN AWS GetDistributionList start_element":{"type":"method","name":"start_element","children":[],"call":["@distribution_summary []= "]}," Fog Parsers CDN AWS GetDistributionList reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers CDN AWS Distribution end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] [] << ","@response [] [] ","@response [] ","@response [] []= "," value ","@response []= ","Time  parse "," value to_i ","@response [] [] []= "," value == "]}," Fog Parsers CDN AWS Distribution start_element":{"type":"method","name":"start_element","children":[],"call":["@response [] []= ","@response [] "]}," Fog Parsers CDN AWS Distribution reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS ElasticBeanstalk ValidateConfigurationSettings initialize":{"type":"method","name":"initialize","children":[],"call":[" tag "]}," Fog Parsers AWS ElasticBeanstalk UpdateEnvironment initialize":{"type":"method","name":"initialize","children":[],"call":[" tag "]}," Fog Parsers AWS ElasticBeanstalk UpdateConfigurationTemplate initialize":{"type":"method","name":"initialize","children":[],"call":[" tag "]}," Fog Parsers AWS ElasticBeanstalk UpdateApplicationVersion initialize":{"type":"method","name":"initialize","children":[],"call":[" tag "]}," Fog Parsers AWS ElasticBeanstalk UpdateApplication initialize":{"type":"method","name":"initialize","children":[],"call":[" tag "]}," Fog Parsers AWS ElasticBeanstalk TerminateEnvironment initialize":{"type":"method","name":"initialize","children":[],"call":[" tag "]}," Fog Parsers AWS ElasticBeanstalk RetrieveEnvironmentInfo initialize":{"type":"method","name":"initialize","children":[],"call":[" tag "]}," Fog Parsers AWS ElasticBeanstalk BaseParser set_value":{"type":"method","name":"set_value","children":[],"call":[" get_parent []= "," get_parent ","value to_i ","value == ","Time  parse "]}," Fog Parsers AWS ElasticBeanstalk BaseParser get_parent":{"type":"method","name":"get_parent","children":[],"call":["parent last ","parent is_a? ","@parse_stack last [] ","@parse_stack last ","@parse_stack last []  last ","@parse_stack last []  is_a? "]}," Fog Parsers AWS ElasticBeanstalk BaseParser end_element":{"type":"method","name":"end_element","children":[],"call":[" set_value ","@tags [] "," value ","@tags key? ","@parse_stack pop ","@tags [] == ","@list_tags key? ","@response [] []= ","@response [] ","@parse_stack last [] << ","@parse_stack last [] ","@parse_stack last ","@parse_stack last [] != "]}," Fog Parsers AWS ElasticBeanstalk BaseParser start_element":{"type":"method","name":"start_element","children":[],"call":["@parse_stack push "," get_parent [] "," get_parent ","@tags [] "," set_value ","@tags [] == ","@list_tags key? ","@parse_stack last [] << ","@parse_stack last [] ","@parse_stack last ","@parse_stack last [] == ","name == "]}," Fog Parsers AWS ElasticBeanstalk BaseParser tag":{"type":"method","name":"tag","children":[],"call":[" raise ","@tags []= ","traits last ","traits length == ","traits length ","@list_tags []= ","traits delete "]}," Fog Parsers AWS ElasticBeanstalk BaseParser reset":{"type":"method","name":"reset","children":[],"call":["@response [] "]}," Fog Parsers AWS ElasticBeanstalk BaseParser initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Fog Parsers AWS ElasticBeanstalk ListAvailableSolutionStacks initialize":{"type":"method","name":"initialize","children":[],"call":[" tag "]}," Fog Parsers AWS ElasticBeanstalk Empty end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "]}," Fog Parsers AWS ElasticBeanstalk Empty reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS ElasticBeanstalk DescribeEvents initialize":{"type":"method","name":"initialize","children":[],"call":[" tag "]}," Fog Parsers AWS ElasticBeanstalk DescribeEnvironments initialize":{"type":"method","name":"initialize","children":[],"call":[" tag "]}," Fog Parsers AWS ElasticBeanstalk DescribeEnvironmentResources initialize":{"type":"method","name":"initialize","children":[],"call":[" tag "]}," Fog Parsers AWS ElasticBeanstalk DescribeConfigurationSettings initialize":{"type":"method","name":"initialize","children":[],"call":[" tag "]}," Fog Parsers AWS ElasticBeanstalk DescribeConfigurationOptions initialize":{"type":"method","name":"initialize","children":[],"call":[" tag "]}," Fog Parsers AWS ElasticBeanstalk DescribeApplications initialize":{"type":"method","name":"initialize","children":[],"call":[" tag "]}," Fog Parsers AWS ElasticBeanstalk DescribeApplicationVersions initialize":{"type":"method","name":"initialize","children":[],"call":[" tag "]}," Fog Parsers AWS ElasticBeanstalk CreateStorageLocation initialize":{"type":"method","name":"initialize","children":[],"call":[" tag "]}," Fog Parsers AWS ElasticBeanstalk CreateEnvironment initialize":{"type":"method","name":"initialize","children":[],"call":[" tag "]}," Fog Parsers AWS ElasticBeanstalk CreateConfigurationTemplate initialize":{"type":"method","name":"initialize","children":[],"call":[" tag "]}," Fog Parsers AWS ElasticBeanstalk CreateApplicationVersion initialize":{"type":"method","name":"initialize","children":[],"call":[" tag "]}," Fog Parsers AWS ElasticBeanstalk CreateApplication initialize":{"type":"method","name":"initialize","children":[],"call":[" tag "]}," Fog Parsers AWS ElasticBeanstalk CheckDNSAvailability initialize":{"type":"method","name":"initialize","children":[],"call":[" tag "]}," Fog Parsers AWS AutoScaling TerminateInstanceInAutoScalingGroup end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= ","@response [] []= "," value ","@response [] ","@results [] []= "," value to_i ","@results [] ","Time  parse "]}," Fog Parsers AWS AutoScaling TerminateInstanceInAutoScalingGroup reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS AutoScaling PutScalingPolicy end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= ","@response [] []= "," value ","@response [] ","@results []= "]}," Fog Parsers AWS AutoScaling PutScalingPolicy reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS AutoScaling PutNotificationConfiguration end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "]}," Fog Parsers AWS AutoScaling PutNotificationConfiguration start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS AutoScaling PutNotificationConfiguration reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS AutoScaling DescribeTerminationPolicyTypes end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= ","@response [] []= "," value ","@response [] ","@results [] << ","@results [] "]}," Fog Parsers AWS AutoScaling DescribeTerminationPolicyTypes start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS AutoScaling DescribeTerminationPolicyTypes reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS AutoScaling DescribeTags end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= ","@response [] []= "," value ","@response [] ","@results []= ","@tag []= "," value == "," reset_tag ","@results [] << ","@results [] "]}," Fog Parsers AWS AutoScaling DescribeTags reset_tag":{"type":"method","name":"reset_tag","children":[],"call":[]}," Fog Parsers AWS AutoScaling DescribeTags reset":{"type":"method","name":"reset","children":[],"call":[" reset_tag "]}," Fog Parsers AWS AutoScaling DescribeScheduledActions end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= ","@response [] []= "," value ","@response [] ","@results []= ","@scheduled_update_group_action []= ","Time  parse "," value to_i "," reset_scheduled_update_group_action ","@results [] << ","@results [] "]}," Fog Parsers AWS AutoScaling DescribeScheduledActions reset_scheduled_update_group_action":{"type":"method","name":"reset_scheduled_update_group_action","children":[],"call":[]}," Fog Parsers AWS AutoScaling DescribeScheduledActions reset":{"type":"method","name":"reset","children":[],"call":[" reset_scheduled_update_group_action "]}," Fog Parsers AWS AutoScaling DescribeScalingProcessTypes end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= ","@response [] []= "," value ","@response [] ","@process_type []= "," reset_process_type ","@results [] << ","@results [] "]}," Fog Parsers AWS AutoScaling DescribeScalingProcessTypes start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS AutoScaling DescribeScalingProcessTypes reset_process_type":{"type":"method","name":"reset_process_type","children":[],"call":[]}," Fog Parsers AWS AutoScaling DescribeScalingProcessTypes reset":{"type":"method","name":"reset","children":[],"call":[" reset_process_type "]}," Fog Parsers AWS AutoScaling DescribeScalingActivities end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= ","@response [] []= "," value ","@response [] ","@results []= ","@activity []= "," value to_i ","Time  parse "," reset_activity ","@results [] << ","@results [] "]}," Fog Parsers AWS AutoScaling DescribeScalingActivities reset_activity":{"type":"method","name":"reset_activity","children":[],"call":[]}," Fog Parsers AWS AutoScaling DescribeScalingActivities reset":{"type":"method","name":"reset","children":[],"call":[" reset_activity "]}," Fog Parsers AWS AutoScaling DescribePolicies end_element":{"type":"method","name":"end_element","children":[],"call":[" reset_scaling_policy ","@results [] << ","@results [] "," reset_alarm ","@scaling_policy [] << ","@scaling_policy [] ","@response []= ","@response [] []= "," value ","@response [] ","@results []= ","@scaling_policy []= "," value to_i ","@alarm []= "]}," Fog Parsers AWS AutoScaling DescribePolicies start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS AutoScaling DescribePolicies reset_alarm":{"type":"method","name":"reset_alarm","children":[],"call":[]}," Fog Parsers AWS AutoScaling DescribePolicies reset_scaling_policy":{"type":"method","name":"reset_scaling_policy","children":[],"call":[]}," Fog Parsers AWS AutoScaling DescribePolicies reset":{"type":"method","name":"reset","children":[],"call":[" reset_alarm "," reset_scaling_policy "]}," Fog Parsers AWS AutoScaling DescribeNotificationConfigurations end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= ","@response [] []= "," value ","@response [] ","@results []= ","@notification_configuration []= "," reset_notification_configuration ","@results [] << ","@results [] "]}," Fog Parsers AWS AutoScaling DescribeNotificationConfigurations reset_notification_configuration":{"type":"method","name":"reset_notification_configuration","children":[],"call":[]}," Fog Parsers AWS AutoScaling DescribeNotificationConfigurations reset":{"type":"method","name":"reset","children":[],"call":[" reset_notification_configuration "]}," Fog Parsers AWS AutoScaling DescribeMetricCollectionTypes end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= ","@response [] []= "," value ","@response [] ","@metric []= ","@granularity []= "," reset_metric ","@results [] << ","@results [] "," reset_granularity "]}," Fog Parsers AWS AutoScaling DescribeMetricCollectionTypes start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS AutoScaling DescribeMetricCollectionTypes reset_metric":{"type":"method","name":"reset_metric","children":[],"call":[]}," Fog Parsers AWS AutoScaling DescribeMetricCollectionTypes reset_granularity":{"type":"method","name":"reset_granularity","children":[],"call":[]}," Fog Parsers AWS AutoScaling DescribeMetricCollectionTypes reset":{"type":"method","name":"reset","children":[],"call":[" reset_metric "," reset_granularity "]}," Fog Parsers AWS AutoScaling DescribeLaunchConfigurations end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= ","@response [] []= "," value ","@response [] ","@results []= ","@launch_configuration []= "," value to_f ","Time  parse ","@launch_configuration [] []= "," value == ","@launch_configuration [] "," reset_ebs ","@block_device_mapping []= ","@ebs []= "," reset_launch_configuration ","@results [] << ","@results [] ","@launch_configuration [] << "," reset_block_device_mapping "]}," Fog Parsers AWS AutoScaling DescribeLaunchConfigurations start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS AutoScaling DescribeLaunchConfigurations reset_ebs":{"type":"method","name":"reset_ebs","children":[],"call":[]}," Fog Parsers AWS AutoScaling DescribeLaunchConfigurations reset_block_device_mapping":{"type":"method","name":"reset_block_device_mapping","children":[],"call":[]}," Fog Parsers AWS AutoScaling DescribeLaunchConfigurations reset_launch_configuration":{"type":"method","name":"reset_launch_configuration","children":[],"call":[]}," Fog Parsers AWS AutoScaling DescribeLaunchConfigurations reset":{"type":"method","name":"reset","children":[],"call":[" reset_ebs "," reset_block_device_mapping "," reset_launch_configuration "]}," Fog Parsers AWS AutoScaling DescribeAutoScalingNotificationTypes end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= ","@response [] []= "," value ","@response [] ","@results [] << ","@results [] "]}," Fog Parsers AWS AutoScaling DescribeAutoScalingNotificationTypes start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS AutoScaling DescribeAutoScalingNotificationTypes reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS AutoScaling DescribeAutoScalingInstances end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= ","@response [] []= "," value ","@response [] ","@results []= ","@auto_scaling_instance []= "," reset_auto_scaling_instance ","@results [] << ","@results [] "]}," Fog Parsers AWS AutoScaling DescribeAutoScalingInstances reset_auto_scaling_instance":{"type":"method","name":"reset_auto_scaling_instance","children":[],"call":[]}," Fog Parsers AWS AutoScaling DescribeAutoScalingInstances reset":{"type":"method","name":"reset","children":[],"call":[" reset_auto_scaling_instance "]}," Fog Parsers AWS AutoScaling DescribeAutoScalingGroups end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= ","@response [] []= "," value ","@response [] ","@results []= ","@auto_scaling_group []= "," value to_i ","Time  parse ","@instance []= ","@tag []= "," value == ","@suspended_process []= ","@enabled_metric []= "," reset_auto_scaling_group ","@results [] << ","@results [] ","@auto_scaling_group [] << ","@auto_scaling_group [] "," reset_tag "," reset_suspended_process "," reset_instance "," reset_enabled_metric "]}," Fog Parsers AWS AutoScaling DescribeAutoScalingGroups start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS AutoScaling DescribeAutoScalingGroups reset_tag":{"type":"method","name":"reset_tag","children":[],"call":[]}," Fog Parsers AWS AutoScaling DescribeAutoScalingGroups reset_suspended_process":{"type":"method","name":"reset_suspended_process","children":[],"call":[]}," Fog Parsers AWS AutoScaling DescribeAutoScalingGroups reset_instance":{"type":"method","name":"reset_instance","children":[],"call":[]}," Fog Parsers AWS AutoScaling DescribeAutoScalingGroups reset_enabled_metric":{"type":"method","name":"reset_enabled_metric","children":[],"call":[]}," Fog Parsers AWS AutoScaling DescribeAutoScalingGroups reset_auto_scaling_group":{"type":"method","name":"reset_auto_scaling_group","children":[],"call":[]}," Fog Parsers AWS AutoScaling DescribeAutoScalingGroups reset":{"type":"method","name":"reset","children":[],"call":[" reset_tag "," reset_suspended_process "," reset_instance "," reset_enabled_metric "," reset_auto_scaling_group "]}," Fog Parsers AWS AutoScaling DescribeAdjustmentTypes end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= ","@response [] []= "," value ","@response [] ","@adjustment_type []= "," reset_adjustment_type ","@results [] << ","@results [] "]}," Fog Parsers AWS AutoScaling DescribeAdjustmentTypes start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS AutoScaling DescribeAdjustmentTypes reset_adjustment_type":{"type":"method","name":"reset_adjustment_type","children":[],"call":[]}," Fog Parsers AWS AutoScaling DescribeAdjustmentTypes reset":{"type":"method","name":"reset","children":[],"call":[" reset_adjustment_type "]}," Fog Parsers AWS AutoScaling Basic end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "]}," Fog Parsers AWS AutoScaling Basic start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS AutoScaling Basic reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Storage AWS Versions new":{"type":"method","name":"new","children":[],"call":["model delete_marker= ","version_type == ","attributes [] ","attributes keys first ","attributes keys ","attributes keys first  == "]}," Fog Storage AWS Versions all":{"type":"method","name":"all","children":[],"call":[" load "," service get_bucket_object_versions body [] "," service get_bucket_object_versions body "," service get_bucket_object_versions "," directory key "," directory "," service ","options merge "," file key "," file "," file directory key "," file directory "]}," Fog Storage AWS Version destroy":{"type":"method","name":"destroy","children":[],"call":[" collection service delete_object "," version "," key "," collection directory key "," collection directory "," collection "," collection service "," collection file directory key "," collection file directory "," collection file "]}," Fog Storage AWS Version file":{"type":"method","name":"file","children":[],"call":[" collection directory files get "," version "," key "," collection directory files "," collection directory "," collection "," collection file directory files get "," collection file directory files "," collection file directory "," collection file "]}," Fog Storage AWS Files normalize_headers":{"type":"method","name":"normalize_headers","children":[],"call":["data headers []= ","data get_header gsub ","data get_header ","data headers ","Time  parse "]}," Fog Storage AWS Files new":{"type":"method","name":"new","children":[],"call":["(pair\n  (sym :directory)\n  (send nil :directory)) merge! "," directory "," requires "]}," Fog Storage AWS Files head":{"type":"method","name":"head","children":[],"call":[" new ","data headers merge ","data headers "," normalize_headers "," service head_object "," directory key "," directory "," service "," requires "," service head_object  headers merge "," service head_object  headers "]}," Fog Storage AWS Files get_https_url":{"type":"method","name":"get_https_url","children":[],"call":[" service get_object_https_url "," directory key "," directory "," service "," requires "]}," Fog Storage AWS Files get_http_url":{"type":"method","name":"get_http_url","children":[],"call":[" service get_object_http_url "," directory key "," directory "," service "," requires "]}," Fog Storage AWS Files get_url":{"type":"method","name":"get_url","children":[],"call":[" service get_object_url "," directory key "," directory "," service "," requires "]}," Fog Storage AWS Files get":{"type":"method","name":"get","children":[],"call":[" raise ","Fog Storage AWS NotFound  new "," directory identity "," directory ","error response body ","error response "," new ","data headers merge ","data body ","data headers "," normalize_headers "," service get_object "," directory key "," service "," requires "," service get_object  headers merge "," service get_object  body "," service get_object  headers "]}," Fog Storage AWS Files each":{"type":"method","name":"each","children":[],"call":["subset each_file_this_page ","subset all ","subset last key ","subset last ","subset is_truncated "," dup all "," dup "," block_given? ! "," block_given? ","subset all  each_file_this_page "," dup all  each_file_this_page ","subset all  all "," dup all  all ","subset all  last key "," dup all  last key ","subset all  last "," dup all  last ","subset all  is_truncated "," dup all  is_truncated "]}," Fog Storage AWS Files all":{"type":"method","name":"all","children":[],"call":[" load ","file attributes ","parent files map ","parent files "," merge_attributes ","parent files attributes "," directory collection get "," directory key "," directory "," directory collection ","value to_s empty? ","value to_s ","value nil? ","options reject ","(pair\n  (str \"delimiter\")\n  (send nil :delimiter)) merge! "," prefix "," max_keys "," marker "," delimiter "," requires "," directory collection get  files map "," directory collection get  files "," directory collection get  files attributes ","(pair\n  (str \"delimiter\")\n  (send nil :delimiter)) merge!  reject "]}," Fog Storage AWS File multipart_save":{"type":"method","name":"multipart_save","children":[],"call":[" service complete_multipart_upload "," key "," directory key "," directory "," service "," raise "," service abort_multipart_upload ","part_tags << ","part_upload headers [] ","part_upload headers "," service upload_part ","part_tags size + ","part_tags size ","Base64  encode64 strip ","Base64  encode64 ","Digest MD5  digest "," body read "," multipart_chunk_size "," body "," body rewind "," body respond_to? ","res body [] ","res body "," service initiate_multipart_upload "," part_headers ","part_tags empty? "," service complete_multi service upload_part  "," service abort_multi service upload_part  "," service upload_part  headers [] "," service upload_part  headers "," multipart_ body read _size "," body  service initiate_multipart_upload pond_to? "," service initiate_multipart_upload  body [] "," service initiate_multipart_upload  body "," service initiate_multi service upload_part  "]}," Fog Storage AWS File directory=":{"type":"method","name":"directory=","children":[],"call":[]}," Fog Storage AWS File versions":{"type":"method","name":"versions","children":[],"call":["Fog Storage AWS Versions  new "," service "]}," Fog Storage AWS File url":{"type":"method","name":"url","children":[],"call":[" collection get_url "," key "," collection "," requires "]}," Fog Storage AWS File save":{"type":"method","name":"save","children":[],"call":["Fog Storage  get_content_type "," body "," content_type "," content_length= ","Fog Storage  get_body_size "," etag gsub! "," etag "," merge_attributes ","(str \"Content-Length\") include? ","data headers reject ","data headers "," service put_object "," key "," directory key "," directory "," service ","data body "," multipart_save "," body respond_to? "," multipart_chunk_size ","options []= "," encryption "," storage_class ","options merge! "," metadata "," expires "," content_md5 "," content_encoding "," content_disposition "," cache_control ","options [] ","Fog Logger  deprecation "," caller first "," caller ","options != "," requires "," encryption_headers ","Fog Storage  get_body_size >= ","Fog Storage  get_body_size > ","multipart_chunk_size ! "," multipart_chunk_size= "," multipart_chunk_size ! "," etag= "," etag gsub "," service put_object  headers reject "," multipart_save  headers reject "," service put_object  headers "," multipart_save  headers "," service put_object  body "," multipart_save  body "," meta service put_object  "," meta multipart_save  "]}," Fog Storage AWS File public_url":{"type":"method","name":"public_url","children":[],"call":[" service request_url "," key "," directory key "," directory "," service "," public? "," requires "]}," Fog Storage AWS File public=":{"type":"method","name":"public=","children":[],"call":[]}," Fog Storage AWS File public?":{"type":"method","name":"public?","children":[],"call":["grant [] == ","grant [] ","grant [] [] == ","grant [] [] "," acl any? "," acl "]}," Fog Storage AWS File owner=":{"type":"method","name":"owner=","children":[],"call":[" attributes []= ","new_owner [] "," attributes "]}," Fog Storage AWS File metadata=":{"type":"method","name":"metadata=","children":[],"call":[" merge_attributes "]}," Fog Storage AWS File metadata":{"type":"method","name":"metadata","children":[],"call":["(send\n  (send\n    (lvar :key) :to_s) :=~\n  (regexp\n    (str \"^x-amz-\")\n    (regopt))) ! ","key to_s =~ ","key to_s "," attributes reject "," attributes "]}," Fog Storage AWS File destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_object "," key "," directory key "," directory "," service "," attributes []= "," attributes ","options [] == "," version ","options [] "," requires "]}," Fog Storage AWS File copy":{"type":"method","name":"copy","children":[],"call":["target_directory files head ","target_directory files "," service directories new "," service directories "," service "," service copy_object "," key "," directory key "," directory "," requires "," service directories new  files head "," service directories new  files "]}," Fog Storage AWS File directory":{"type":"method","name":"directory","children":[],"call":[]}," Fog Storage AWS File body=":{"type":"method","name":"body=","children":[],"call":[" attributes []= "," attributes "]}," Fog Storage AWS File body":{"type":"method","name":"body","children":[],"call":["file body "," collection get "," identity "," collection "," last_modified "," attributes [] "," attributes "," attributes []= "," collection get  body "]}," Fog Storage AWS File acl=":{"type":"method","name":"acl=","children":[],"call":[" raise ","ArgumentError  new ","valid_acls join ","valid_acls include? "]}," Fog Storage AWS File acl":{"type":"method","name":"acl","children":[],"call":[" service get_object_acl body [] "," service get_object_acl body "," service get_object_acl "," key "," directory key "," directory "," service "," requires "]}," Fog Storage AWS Directory bucket_location":{"type":"method","name":"bucket_location","children":[],"call":["data body [] ","data body "," service get_bucket_location "," key "," service "," persisted? "," requires "," service get_bucket_location  body [] "," service get_bucket_location  body "]}," Fog Storage AWS Directory persisted?":{"type":"method","name":"persisted?","children":[],"call":[" attributes [] ! ! "," attributes [] ! "," attributes [] "," attributes "]}," Fog Storage AWS Directory save":{"type":"method","name":"save","children":[],"call":[" attributes []= "," attributes "," service put_bucket "," key "," service ","options []= "," location "," location != "," persisted? ! "," persisted? "," acl "," requires "]}," Fog Storage AWS Directory public_url":{"type":"method","name":"public_url","children":[],"call":[" service request_url "," key "," service ","grant [] == ","grant [] ","grant [] [] == ","grant [] [] "," service get_bucket_acl body [] find "," service get_bucket_acl body [] "," service get_bucket_acl body "," service get_bucket_acl "," requires "]}," Fog Storage AWS Directory public=":{"type":"method","name":"public=","children":[],"call":[" acl= "]}," Fog Storage AWS Directory versions":{"type":"method","name":"versions","children":[],"call":["Fog Storage AWS Versions  new "," service "]}," Fog Storage AWS Directory versioning=":{"type":"method","name":"versioning=","children":[],"call":[" service put_bucket_versioning "," key "," service "," requires "]}," Fog Storage AWS Directory versioning?":{"type":"method","name":"versioning?","children":[],"call":["data body [] [] == ","data body [] [] ","data body [] ","data body "," service get_bucket_versioning "," key "," service "," requires "," service get_bucket_versioning  body [] [] == "," service get_bucket_versioning  body [] [] "," service get_bucket_versioning  body [] "," service get_bucket_versioning  body "]}," Fog Storage AWS Directory payer=":{"type":"method","name":"payer=","children":[],"call":[" service put_request_payment "," key "," service "," requires "]}," Fog Storage AWS Directory payer":{"type":"method","name":"payer","children":[],"call":["data body [] ","data body "," service get_request_payment "," key "," service "," requires "," service get_request_payment  body [] "," service get_request_payment  body "]}," Fog Storage AWS Directory files":{"type":"method","name":"files","children":[],"call":["Fog Storage AWS Files  new "," service "]}," Fog Storage AWS Directory location=":{"type":"method","name":"location=","children":[],"call":[]}," Fog Storage AWS Directory location":{"type":"method","name":"location","children":[],"call":[" service region "," service "," bucket_location "]}," Fog Storage AWS Directory destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_bucket "," key "," service "," requires "]}," Fog Storage AWS Directory acl=":{"type":"method","name":"acl=","children":[],"call":[" raise ","ArgumentError  new ","VALID_ACLS  join ","VALID_ACLS  include? "]}," Fog Storage AWS Directories get":{"type":"method","name":"get","children":[],"call":["directory files load ","data [] ","directory files ","directory files merge_attributes ","options []= ","(str \"CommonPrefixes\") include? "," new "," service get_bucket body "," service get_bucket "," service "," remap_attributes "," new  files load "," service get_bucket body  [] "," new  files "," new  files merge_attributes "]}," Fog Storage AWS Directories all":{"type":"method","name":"all","children":[],"call":[" load "," service get_service body [] "," service get_service body "," service get_service "," service "]}," Fog AWS SNS Topics get":{"type":"method","name":"get","children":[],"call":[" new "," service get_topic_attributes body [] "," service get_topic_attributes body "," service get_topic_attributes "," service "]}," Fog AWS SNS Topics all":{"type":"method","name":"all","children":[],"call":[" load "," service list_topics body [] map "," service list_topics body [] "," service list_topics body "," service list_topics "," service "]}," Fog AWS SNS Topic save":{"type":"method","name":"save","children":[],"call":[" merge_attributes "," service create_topic body [] "," service create_topic body "," service create_topic "," id "," service "," requires "]}," Fog AWS SNS Topic destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_topic "," id "," service "," requires "]}," Fog AWS SNS Topic update_topic_attribute":{"type":"method","name":"update_topic_attribute","children":[],"call":[" reload "," service set_topic_attributes body "," service set_topic_attributes "," id "," service "," requires "]}," Fog AWS SNS Topic ready?":{"type":"method","name":"ready?","children":[],"call":[" display_name "]}," Fog AWS SNS Subscriptions all":{"type":"method","name":"all","children":[],"call":[" load "," service list_subscriptions body [] "," service list_subscriptions body "," service list_subscriptions "," service "]}," Fog AWS RDS SubnetGroups get":{"type":"method","name":"get","children":[],"call":[" new "," service describe_db_subnet_groups body [] [] first "," service describe_db_subnet_groups body [] [] "," service describe_db_subnet_groups body [] "," service describe_db_subnet_groups body "," service describe_db_subnet_groups "," service "]}," Fog AWS RDS SubnetGroups all":{"type":"method","name":"all","children":[],"call":[" load "," service describe_db_subnet_groups body [] [] "," service describe_db_subnet_groups body [] "," service describe_db_subnet_groups body "," service describe_db_subnet_groups "," service "]}," Fog AWS RDS SubnetGroup destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_db_subnet_group "," id "," service "," requires "]}," Fog AWS RDS SubnetGroup save":{"type":"method","name":"save","children":[],"call":[" reload "," service create_db_subnet_group "," description "," subnet_ids "," id "," service "," requires "]}," Fog AWS RDS SubnetGroup ready?":{"type":"method","name":"ready?","children":[],"call":[" status == "," status "," requires "]}," Fog AWS RDS Snapshots new":{"type":"method","name":"new","children":[],"call":["(pair\n  (sym :instance_id)\n  (send\n    (send nil :server) :id)) merge! "," server id "," server "]}," Fog AWS RDS Snapshots get":{"type":"method","name":"get","children":[],"call":[" new "," service describe_db_snapshots body [] [] first "," service describe_db_snapshots body [] [] "," service describe_db_snapshots body [] "," service describe_db_snapshots body "," service describe_db_snapshots "," service "]}," Fog AWS RDS Snapshots each":{"type":"method","name":"each","children":[],"call":["base_each bind call ","base_each bind ","Fog Collection  instance_method "," all "," filters [] "," filters "," block_given? ","Fog Collection  instance_method  bind call ","Fog Collection  instance_method  bind "]}," Fog AWS RDS Snapshots all":{"type":"method","name":"all","children":[],"call":[" load ","page [] "," filters []= "," filters "," service describe_db_snapshots body [] "," service describe_db_snapshots body "," service describe_db_snapshots "," service "," filters merge! "," service describe_db_snapshots body []  [] "]}," Fog AWS RDS Snapshots initialize":{"type":"method","name":"initialize","children":[],"call":[" filters []= ","attributes [] "," filters ","attributes [] id "]}," Fog AWS RDS Snapshot server":{"type":"method","name":"server","children":[],"call":[" service servers get "," instance_id "," service servers "," service "," requires "]}," Fog AWS RDS Snapshot save":{"type":"method","name":"save","children":[],"call":[" merge_attributes "," service create_db_snapshot body [] [] "," service create_db_snapshot body [] "," service create_db_snapshot body "," service create_db_snapshot "," id "," instance_id "," service "," requires "," service create_db_cluster_snapshot body [] [] "," service create_db_cluster_snapshot body [] "," service create_db_cluster_snapshot body "," service create_db_cluster_snapshot "," cluster_id "," requires_one "]}," Fog AWS RDS Snapshot destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_db_snapshot "," id "," service "," requires "," service delete_db_cluster_snapshot "," instance_id "," requires_one "]}," Fog AWS RDS Snapshot ready?":{"type":"method","name":"ready?","children":[],"call":[" state == "," state "]}," Fog AWS RDS Servers get":{"type":"method","name":"get","children":[],"call":[" new "," service describe_db_instances body [] [] first "," service describe_db_instances body [] [] "," service describe_db_instances body [] "," service describe_db_instances body "," service describe_db_instances "," service "]}," Fog AWS RDS Servers all":{"type":"method","name":"all","children":[],"call":[" load "," service describe_db_instances body [] [] "," service describe_db_instances body [] "," service describe_db_instances body "," service describe_db_instances "," service "]}," Fog AWS RDS Server attributes_to_params":{"type":"method","name":"attributes_to_params","children":[],"call":["value nil? ","options delete_if "," storage_type "," vpc_security_groups "," publicly_accessible "," db_subnet_group_name "," license_model "," multi_az "," preferred_backup_window "," preferred_maintenance_window "," attributes [] "," attributes "," password "," master_username "," iops "," engine_version "," engine "," port "," flavor_id "," availability_zone "," id "," security_group_names "," parameter_group_name "," db_name "," backup_retention_period "," auto_minor_version_upgrade "," allocated_storage "," storage_encrypted "," kms_key_id "," cluster_id "," enable_iam_database_authentication "]}," Fog AWS RDS Server save":{"type":"method","name":"save","children":[],"call":[" merge_attributes ","data body [] [] ","data body [] ","data body "," service create_db_instance "," attributes_to_params "," id "," service "," flavor_id "," requires "," engine == "," engine "," service restore_db_instance_from_db_snapshot "," source_snapshot_id "," engine start_with? "," service create_db_instance  body [] [] "," service restore_db_instance_from_db_snapshot  body [] [] "," service create_db_instance  body [] "," service restore_db_instance_from_db_snapshot  body [] "," service create_db_instance  body "," service restore_db_instance_from_db_snapshot  body "]}," Fog AWS RDS Server modify":{"type":"method","name":"modify","children":[],"call":[" merge_attributes ","data body [] [] ","data body [] ","data body "," service modify_db_instance "," id "," service "," class new attributes_to_params "," class new "," class ","options [] "," service modify_db_instance  body [] [] "," service modify_db_instance  body [] "," service modify_db_instance  body "," class new attributes_to_ class new attributes_to_params  "]}," Fog AWS RDS Server promote_read_replica":{"type":"method","name":"promote_read_replica","children":[],"call":[" service promote_read_replica "," id "," service "," requires "," merge_attributes "," service promote_read_replica body [] [] "," service promote_read_replica body [] "," service promote_read_replica body "]}," Fog AWS RDS Server remove_tags":{"type":"method","name":"remove_tags","children":[],"call":[" tags "," service remove_tags_from_resource "," id "," service "," requires "]}," Fog AWS RDS Server add_tags":{"type":"method","name":"add_tags","children":[],"call":[" tags "," service add_tags_to_resource "," id "," service "," requires "]}," Fog AWS RDS Server tags":{"type":"method","name":"tags","children":[],"call":[" service list_tags_for_resource body [] [] "," service list_tags_for_resource body [] "," service list_tags_for_resource body "," service list_tags_for_resource "," id "," service "," requires "]}," Fog AWS RDS Server snapshots":{"type":"method","name":"snapshots","children":[],"call":[" service snapshots "," service "," requires "]}," Fog AWS RDS Server reboot":{"type":"method","name":"reboot","children":[],"call":[" service reboot_db_instance "," id "," service "]}," Fog AWS RDS Server destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_db_instance ","snapshot_identifier nil? "," id "," service "," requires "]}," Fog AWS RDS Server ready?":{"type":"method","name":"ready?","children":[],"call":[" state == "," state "]}," Fog AWS RDS Server create_read_replica":{"type":"method","name":"create_read_replica","children":[],"call":[" service servers get "," service servers "," service "," service create_db_instance_read_replica "," id "," class new attributes_to_params "," class new "," class ","options [] "," class new attributes_to_ class new attributes_to_params  "]}," Fog AWS RDS SecurityGroups new":{"type":"method","name":"new","children":[],"call":[]}," Fog AWS RDS SecurityGroups get":{"type":"method","name":"get","children":[],"call":[" new "," service describe_db_security_groups body [] [] first "," service describe_db_security_groups body [] [] "," service describe_db_security_groups body [] "," service describe_db_security_groups body "," service describe_db_security_groups "," service "]}," Fog AWS RDS SecurityGroups all":{"type":"method","name":"all","children":[],"call":[" load "," service describe_db_security_groups body [] [] "," service describe_db_security_groups body [] "," service describe_db_security_groups body "," service describe_db_security_groups "," service "]}," Fog AWS RDS SecurityGroups initialize":{"type":"method","name":"initialize","children":[],"call":[" filters []= ","attributes [] id ","attributes [] "," filters "]}," Fog AWS RDS SecurityGroup revoke_ingress":{"type":"method","name":"revoke_ingress","children":[],"call":[" merge_attributes "," service revoke_db_security_group_ingress body [] [] "," service revoke_db_security_group_ingress body [] "," service revoke_db_security_group_ingress body "," service revoke_db_security_group_ingress "," id "," service "]}," Fog AWS RDS SecurityGroup revoke_cidrip":{"type":"method","name":"revoke_cidrip","children":[],"call":[" revoke_ingress "]}," Fog AWS RDS SecurityGroup revoke_ec2_security_group":{"type":"method","name":"revoke_ec2_security_group","children":[],"call":[" revoke_ingress ","group_name match "]}," Fog AWS RDS SecurityGroup authorize_ingress":{"type":"method","name":"authorize_ingress","children":[],"call":[" merge_attributes "," service authorize_db_security_group_ingress body [] [] "," service authorize_db_security_group_ingress body [] "," service authorize_db_security_group_ingress body "," service authorize_db_security_group_ingress "," id "," service "]}," Fog AWS RDS SecurityGroup authorize_ip_address":{"type":"method","name":"authorize_ip_address","children":[],"call":[" authorize_cidrip "]}," Fog AWS RDS SecurityGroup authorize_me":{"type":"method","name":"authorize_me","children":[],"call":[" authorize_ip_address ","Fog CurrentMachine  ip_address "]}," Fog AWS RDS SecurityGroup authorize_cidrip":{"type":"method","name":"authorize_cidrip","children":[],"call":[" authorize_ingress "]}," Fog AWS RDS SecurityGroup authorize_ec2_security_group":{"type":"method","name":"authorize_ec2_security_group","children":[],"call":[" authorize_ingress ","group_name match "]}," Fog AWS RDS SecurityGroup save":{"type":"method","name":"save","children":[],"call":[" merge_attributes "," service create_db_security_group body [] [] "," service create_db_security_group body [] "," service create_db_security_group body "," service create_db_security_group "," description "," id "," service "," requires "]}," Fog AWS RDS SecurityGroup destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_db_security_group "," id "," service "," requires "]}," Fog AWS RDS SecurityGroup ready?":{"type":"method","name":"ready?","children":[],"call":["ingress [] == ","ingress [] ","(send\n  (send nil :ec2_security_groups) :+\n  (send nil :ip_ranges)) all? "," ec2_security_groups + "," ip_ranges "," ec2_security_groups "]}," Fog AWS RDS Parameters all":{"type":"method","name":"all","children":[],"call":[" load ","marker nil? ","data [] [] ","data [] ","result concat "," service describe_db_parameters body "," service describe_db_parameters ","filters merge "," group id "," group "," service ","finished ! ","data [] []  nil? "," service describe_db_parameters body  [] [] "," service describe_db_parameters body  [] ","marker nil?  ! "]}," Fog AWS RDS Parameters initialize":{"type":"method","name":"initialize","children":[],"call":[" filters []= ","attributes [] "," filters "]}," Fog AWS RDS ParameterGroups get":{"type":"method","name":"get","children":[],"call":[" new "," service describe_db_parameter_groups body [] [] first "," service describe_db_parameter_groups body [] [] "," service describe_db_parameter_groups body [] "," service describe_db_parameter_groups body "," service describe_db_parameter_groups "," service "]}," Fog AWS RDS ParameterGroups all":{"type":"method","name":"all","children":[],"call":[" load "," service describe_db_parameter_groups body [] [] "," service describe_db_parameter_groups body [] "," service describe_db_parameter_groups body "," service describe_db_parameter_groups "," service "]}," Fog AWS RDS ParameterGroup parameters":{"type":"method","name":"parameters","children":[],"call":[" service parameters ","(pair\n  (sym :group)\n  (self)) merge "," service "]}," Fog AWS RDS ParameterGroup destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_db_parameter_group "," id "," service "," requires "]}," Fog AWS RDS ParameterGroup modify":{"type":"method","name":"modify","children":[],"call":[" service modify_db_parameter_group ","c [] ","changes map "," id "," service "]}," Fog AWS RDS ParameterGroup save":{"type":"method","name":"save","children":[],"call":[" service create_db_parameter_group "," description "," family "," id "," service "," requires "]}," Fog AWS RDS LogFiles get":{"type":"method","name":"get","children":[],"call":["matches first ","matches empty? ","log_file name upcase == ","file_name upcase ","log_file name upcase ","log_file name "," select "]}," Fog AWS RDS LogFiles each":{"type":"method","name":"each","children":[],"call":["base_each bind call ","base_each bind ","Fog Collection  instance_method "," all "," filters [] "," filters "," block_given? ","Fog Collection  instance_method  bind call ","Fog Collection  instance_method  bind "]}," Fog AWS RDS LogFiles all":{"type":"method","name":"all","children":[],"call":[" load ","result [] "," filters []= "," filters "," service describe_db_log_files body [] "," service describe_db_log_files body "," service describe_db_log_files "," rds_id "," service "," filters merge! "," service describe_db_log_files body []  [] "]}," Fog AWS RDS LogFiles initialize":{"type":"method","name":"initialize","children":[],"call":[" filters "]}," Fog AWS RDS LogFile content_excerpt":{"type":"method","name":"content_excerpt","children":[],"call":[" merge_attributes ","result body [] ","result body "," service download_db_logfile_portion "," name "," rds_id "," service "," service download_db_logfile_portion  body [] "," service download_db_logfile_portion  body "]}," Fog AWS RDS InstanceOptions all":{"type":"method","name":"all","children":[],"call":[" load ","result [] "," filters []= "," filters "," service describe_orderable_db_instance_options body [] "," service describe_orderable_db_instance_options body "," service describe_orderable_db_instance_options "," engine "," service "," filters merge! "," service describe_orderable_db_instance_options body []  [] "]}," Fog AWS RDS InstanceOptions initialize":{"type":"method","name":"initialize","children":[],"call":[" filters "]}," Fog AWS RDS EventSubscriptions get":{"type":"method","name":"get","children":[],"call":[" new ","data first "," service describe_event_subscriptions body [] [] "," service describe_event_subscriptions body [] "," service describe_event_subscriptions body "," service describe_event_subscriptions "," service "," service describe_event_subscriptions body [] []  first "]}," Fog AWS RDS EventSubscriptions all":{"type":"method","name":"all","children":[],"call":[" load "," service describe_event_subscriptions body [] [] "," service describe_event_subscriptions body [] "," service describe_event_subscriptions body "," service describe_event_subscriptions "," service "]}," Fog AWS RDS EventSubscription save":{"type":"method","name":"save","children":[],"call":[" merge_attributes "," service create_event_subscription body [] [] "," service create_event_subscription body [] "," service create_event_subscription body "," service create_event_subscription "," sns_topic_arn "," id "," enabled "," source_type "," event_categories "," service "," requires "]}," Fog AWS RDS EventSubscription destroy":{"type":"method","name":"destroy","children":[],"call":[" reload "," service delete_event_subscription "," id "," service "]}," Fog AWS RDS EventSubscription ready?":{"type":"method","name":"ready?","children":[],"call":["(str \"deleting\") include? ! ","(str \"deleting\") include? "," status "]}," Fog AWS IAM Users each":{"type":"method","name":"each","children":[],"call":["subset each_user_this_page ","subset all ","subset marker ","subset is_truncated "," dup all "," dup "," block_given? ! "," block_given? ","subset all  each_user_this_page "," dup all  each_user_this_page ","subset all  all "," dup all  all ","subset all  marker "," dup all  marker ","subset all  is_truncated "," dup all  is_truncated "]}," Fog AWS IAM Users get":{"type":"method","name":"get","children":[],"call":[" new "," service get_user body [] "," service get_user body "," service get_user "," service "]}," Fog AWS IAM Users all":{"type":"method","name":"all","children":[],"call":[" load ","data [] "," merge_attributes "," service list_users body "," service list_users "," service "," service list_users body  [] "]}," Fog AWS IAM User access_keys":{"type":"method","name":"access_keys","children":[],"call":[" service access_keys "," id "," service "," requires "]}," Fog AWS IAM User policies":{"type":"method","name":"policies","children":[],"call":[" service policies "," id "," service "," requires "," identity "]}," Fog AWS IAM User destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_user "," id "," service "," requires "]}," Fog AWS IAM User save":{"type":"method","name":"save","children":[],"call":[" merge_attributes "," service create_user body [] "," service create_user body "," service create_user "," path "," id "," service "," requires "]}," Fog AWS IAM Roles new":{"type":"method","name":"new","children":[],"call":["attributes []= ","Fog AWS IAM EC2_ASSUME_ROLE_POLICY  to_s ","attributes key? ! ","attributes key? "]}," Fog AWS IAM Roles get":{"type":"method","name":"get","children":[],"call":[" service roles new "," service get_role data [] [] "," service get_role data [] "," service get_role data "," service get_role "," service "," service roles "," new "," service get_role body [] "," service get_role body "," service  service roles new s new "," service get_ service roles new  data [] [] "," service get_ service roles new  data [] "," service get_ service roles new  data "," service get_ service roles new  "," service  service roles new s "," service get_ service roles new  body [] "," service get_ service roles new  body "]}," Fog AWS IAM Roles all":{"type":"method","name":"all","children":[],"call":[" load "," service list_roles body [] "," service list_roles body "," service list_roles "," service ","body [] "," merge_attributes "," page_params "," service list_roles  service list_roles body  [] "," service list_roles  service list_roles body  "," service list_roles body  [] "]}," Fog AWS IAM Roles initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Fog AWS IAM Role destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_role "," rolename "," service "," requires "]}," Fog AWS IAM Role save":{"type":"method","name":"save","children":[],"call":[" merge_attributes "," service create_role body [] "," service create_role body "," service create_role "," path "," assume_role_policy_document "," rolename "," service "," requires "," raise ","Fog Errors Error  new "," persisted? "]}," Fog AWS IAM Policy user":{"type":"method","name":"user","children":[],"call":[" service users get "," username "," service users "," service "," requires "]}," Fog AWS IAM Policy destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_user_policy "," id "," username "," service "," requires "]}," Fog AWS IAM Policy save":{"type":"method","name":"save","children":[],"call":[" merge_attributes "," service put_user_policy body "," service put_user_policy "," document "," id "," username "," service "," requires "," service put_group_policy body "," service put_group_policy "," group_name "," requires_one "]}," Fog AWS IAM Policies new":{"type":"method","name":"new","children":[],"call":["(pair\n  (sym :username)\n  (ivar :@username)) merge! "," attributes merge "," attributes ","(pair\n  (sym :username)\n  (send\n    (self) :username)) merge! "," username "]}," Fog AWS IAM Policies get":{"type":"method","name":"get","children":[],"call":[" new "," service get_user_policy body [] "," service get_user_policy body "," service get_user_policy "," service ","response body [] ","response body "," service get_group_policy "," group_name "," username "," requires_one "," requires ","(send\n  (self) :username) body [] ","(send\n  (self) :username) body "," service get_user_policy  body [] "," service get_user_policy  body "]}," Fog AWS IAM Policies all":{"type":"method","name":"all","children":[],"call":[" load ","policies << "," service get_user_policy body [] "," service get_user_policy body "," service get_user_policy "," service ","policy_names each "," service list_user_policies body [] "," service list_user_policies body "," service list_user_policies "," all_by_group "," group_name "," all_by_user "," username "," requires_one ","policy_names map "," requires "," all_by_user  << "," all_by_group  << "," service list_user_policies body []  each "," service list_user_ all_by_user  body [] "," service list_user_ all_by_group  body [] "," service list_user_ all_by_user  body "," service list_user_ all_by_group  body "," service list_user_ all_by_user  "," service list_user_ all_by_group  "," service list_user_policies body []  map "]}," Fog AWS IAM Policies initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","ArgumentError  new ","attributes [] "]}," Fog AWS IAM AccessKeys new":{"type":"method","name":"new","children":[],"call":["(pair\n  (sym :username)\n  (ivar :@username)) merge! "]}," Fog AWS IAM AccessKeys get":{"type":"method","name":"get","children":[],"call":["(send\n  (send\n    (self) :all) :select) first ","access_key id == ","access_key id "," all select "," all "]}," Fog AWS IAM AccessKeys all":{"type":"method","name":"all","children":[],"call":[" load ","access_key []= ","data each "," service list_access_keys body [] "," service list_access_keys body "," service list_access_keys "," service "," service list_access_keys body []  each "]}," Fog AWS IAM AccessKeys initialize":{"type":"method","name":"initialize","children":[],"call":["attributes [] "]}," Fog AWS IAM AccessKey user":{"type":"method","name":"user","children":[],"call":[" service users get "," username "," service users "," service "," requires "]}," Fog AWS IAM AccessKey destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_access_key "," username "," id "," service "," requires "]}," Fog AWS IAM AccessKey save":{"type":"method","name":"save","children":[],"call":[" merge_attributes "," service update_access_key body [] "," service update_access_key body "," service update_access_key "," username "," status "," id "," service "," service create_access_key body [] "," service create_access_key body "," service create_access_key "," persisted? ! "," persisted? "," requires "]}," Fog AWS Glacier Vaults get":{"type":"method","name":"get","children":[],"call":[" new "," service describe_vault body "," service describe_vault "," service "]}," Fog AWS Glacier Vaults all":{"type":"method","name":"all","children":[],"call":[" load "," service list_vaults body [] "," service list_vaults body "," service list_vaults "," service "]}," Fog AWS Glacier Vault destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_vault "," id "," service "," requires "]}," Fog AWS Glacier Vault save":{"type":"method","name":"save","children":[],"call":[" reload "," service create_vault "," id "," service "," requires "]}," Fog AWS Glacier Vault delete_notification_configuration":{"type":"method","name":"delete_notification_configuration","children":[],"call":[" service delete_vault_notification_configuration "," id "," service "]}," Fog AWS Glacier Vault set_notification_configuration":{"type":"method","name":"set_notification_configuration","children":[],"call":[" service set_vault_notification_configuration "," id "," service "]}," Fog AWS Glacier Vault jobs":{"type":"method","name":"jobs","children":[],"call":["Fog AWS Glacier Jobs  new "," service "]}," Fog AWS Glacier Vault archives":{"type":"method","name":"archives","children":[],"call":["Fog AWS Glacier Archives  new "," service "]}," Fog AWS Glacier Vault ready?":{"type":"method","name":"ready?","children":[],"call":[]}," Fog AWS Glacier Jobs new":{"type":"method","name":"new","children":[],"call":["(pair\n  (sym :vault)\n  (send nil :vault)) merge! "," vault "," requires "]}," Fog AWS Glacier Jobs get":{"type":"method","name":"get","children":[],"call":[" new "," service describe_job body "," service describe_job "," vault id "," vault "," service "]}," Fog AWS Glacier Jobs all":{"type":"method","name":"all","children":[],"call":[" load "," service list_jobs body [] "," service list_jobs body "," service list_jobs "," filters "," vault id "," vault "," service "," filters= "]}," Fog AWS Glacier Jobs initialize":{"type":"method","name":"initialize","children":[],"call":[" filters= "]}," Fog AWS Glacier Job vault=":{"type":"method","name":"vault=","children":[],"call":[]}," Fog AWS Glacier Job get_output":{"type":"method","name":"get_output","children":[],"call":[" service get_job_output "," id "," vault id "," vault "," service ","options []= ","options delete ","options merge ","io write "," lambda ","options merge  []= ","optoptions delete ns []= ","options merge  delete ","optoptions delete ns delete ","options merge  merge ","optoptions delete ns merge ","options delete  write "]}," Fog AWS Glacier Job vault":{"type":"method","name":"vault","children":[],"call":[]}," Fog AWS Glacier Job save":{"type":"method","name":"save","children":[],"call":[" reload "," id= ","data headers [] ","data headers "," service initiate_job "," vault id "," vault "," service ","v nil? ","(pair\n  (str \"Type\")\n  (send nil :type)) reject "," sns_topic "," description "," format "," archive_id "," type "," requires "," service initiate_job  headers [] "," service initiate_job  headers "]}," Fog AWS Glacier Job ready?":{"type":"method","name":"ready?","children":[],"call":[" completed "]}," Fog AWS Glacier Archives new":{"type":"method","name":"new","children":[],"call":["(pair\n  (sym :vault)\n  (send nil :vault)) merge! "," vault "," requires "]}," Fog AWS Glacier Archives get":{"type":"method","name":"get","children":[],"call":[" new "]}," Fog AWS Glacier Archives all":{"type":"method","name":"all","children":[],"call":[]}," Fog AWS Glacier Archive multipart_save":{"type":"method","name":"multipart_save","children":[],"call":[" service complete_multipart_upload headers [] "," service complete_multipart_upload headers "," service complete_multipart_upload ","hash hexdigest "," vault id "," vault "," service "," raise "," service abort_multipart_upload ","chunk bytesize "," service upload_part ","hash add_part "," body read "," multipart_chunk_size "," body "," body rewind "," body respond_to? ","Fog AWS Glacier TreeHash  new ","res headers [] ","res headers "," service initiate_multipart_upload "," description "," service complete_multi service upload_part  headers [] "," service complete_multi service upload_part  headers "," service complete_multi service upload_part  ","Fog AWS Glacier TreeHash  new  hexdigest "," service abort_multi service upload_part  "," body read  bytesize ","Fog AWS Glacier TreeHash  new  add_part "," multipart_ body read _size "," body  service initiate_multipart_upload pond_to? "," service initiate_multipart_upload  headers [] "," service initiate_multipart_upload  headers "," service initiate_multi service upload_part  "]}," Fog AWS Glacier Archive vault=":{"type":"method","name":"vault=","children":[],"call":[]}," Fog AWS Glacier Archive destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_archive "," id "," vault id "," vault "," service "," requires "]}," Fog AWS Glacier Archive save":{"type":"method","name":"save","children":[],"call":[" id= ","data headers [] ","data headers "," service create_archive "," description "," body "," vault id "," vault "," service "," multipart_save "," body respond_to? "," multipart_chunk_size "," requires "," service create_archive  headers [] "," service create_archive  headers "]}," Fog AWS Glacier Archive vault":{"type":"method","name":"vault","children":[],"call":[]}," Fog AWS ELB Policy load_balancer":{"type":"method","name":"load_balancer","children":[],"call":[" collection load_balancer "," collection "," service load_balancers new "," load_balancer_id "," service load_balancers "," service "," requires "]}," Fog AWS ELB Policy reload":{"type":"method","name":"reload","children":[],"call":[" load_balancer reload "," load_balancer "]}," Fog AWS ELB Policy destroy":{"type":"method","name":"destroy","children":[],"call":[" reload "," service delete_load_balancer_policy "," id "," load_balancer id "," load_balancer "," service "," requires "," identity "," load_balancer_id "]}," Fog AWS ELB Policy save":{"type":"method","name":"save","children":[],"call":[" reload "," service send "," service ","args << "," policy_attributes "," type_name "," requires "," raise ","ArgumentError  new "," expiration "," cookie "," cookie_stickiness "," id "," load_balancer id "," load_balancer "," load_balancer_id "]}," Fog AWS ELB Policies policy_attributes":{"type":"method","name":"policy_attributes","children":[],"call":["m []= ","e [] ","policy_attribute_descriptions reduce "]}," Fog AWS ELB Policies munged_data":{"type":"method","name":"munged_data","children":[],"call":["m << ","policy []= ","cookie_expiration_period > ","(send\n  (lvar :policy_attribute_descriptions) :find) [] to_i ","(send\n  (lvar :policy_attribute_descriptions) :find) [] ","h [] == ","h [] ","policy_attribute_descriptions find ","e [] "," policy_attributes "," data reduce "," data ","(send\n  (lvar :policy_attribute_descriptions) :find) [] to_i  > ","(send\n  (lvar :e [] ) :find) [] to_i ","(send\n  (lvar :e [] ) :find) [] ","e []  find "]}," Fog AWS ELB Policies get":{"type":"method","name":"get","children":[],"call":["id == ","policy id "," all find "," all "]}," Fog AWS ELB Policies all":{"type":"method","name":"all","children":[],"call":[" load "," munged_data "," munge "," service describe_load_balancer_policies body [] [] "," service describe_load_balancer_policies body [] "," service describe_load_balancer_policies body "," service describe_load_balancer_policies "," load_balancer_id "," service "," requires "," merge_attributes "," munged_ service describe_load_balancer_policies body [] []  "]}," Fog AWS ELB LoadBalancers get":{"type":"method","name":"get","children":[],"call":[" new "," service describe_load_balancers body [] [] first "," service describe_load_balancers body [] [] "," service describe_load_balancers body [] "," service describe_load_balancers body "," service describe_load_balancers "," service "]}," Fog AWS ELB LoadBalancers all":{"type":"method","name":"all","children":[],"call":[" load ","marker nil? ","data [] [] ","data [] ","result concat "," service describe_load_balancers body "," service describe_load_balancers "," service ","finished ! ","data [] []  nil? "," service describe_load_balancers body  [] [] "," service describe_load_balancers body  [] ","marker nil?  ! "]}," Fog AWS ELB LoadBalancers initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Fog AWS ELB LoadBalancer destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_load_balancer "," id "," service "," requires "]}," Fog AWS ELB LoadBalancer reload":{"type":"method","name":"reload","children":[],"call":[]}," Fog AWS ELB LoadBalancer save":{"type":"method","name":"save","children":[],"call":[" reload "," throw ","Fog Errors Error  new "," service create_load_balancer "," scheme "," security_groups "," subnet_ids ","l to_params "," listeners map "," listeners "," id "," service "," availability_zones ! "," availability_zones "," requires "]}," Fog AWS ELB LoadBalancer remove_tags":{"type":"method","name":"remove_tags","children":[],"call":[" tags "," service remove_tags "," id "," service "," requires "]}," Fog AWS ELB LoadBalancer add_tags":{"type":"method","name":"add_tags","children":[],"call":[" tags "," service add_tags "," id "," service "," requires "]}," Fog AWS ELB LoadBalancer tags":{"type":"method","name":"tags","children":[],"call":[" service describe_tags body [] [] [] [] "," service describe_tags body [] [] [] "," service describe_tags body [] [] "," service describe_tags body [] "," service describe_tags body "," service describe_tags "," id "," service "," requires "]}," Fog AWS ELB LoadBalancer ready?":{"type":"method","name":"ready?","children":[],"call":[]}," Fog AWS ELB LoadBalancer unset_listener_policy":{"type":"method","name":"unset_listener_policy","children":[],"call":[" set_listener_policy "]}," Fog AWS ELB LoadBalancer set_listener_ssl_certificate":{"type":"method","name":"set_listener_ssl_certificate","children":[],"call":[" reload "," service set_load_balancer_listener_ssl_certificate "," id "," service "," requires "]}," Fog AWS ELB LoadBalancer set_listener_policy":{"type":"method","name":"set_listener_policy","children":[],"call":[" reload "," service set_load_balancer_policies_of_listener "," id "," service ","(lvar :policy_name) flatten "," requires ","(lvar :(lvar :policy_name) flatten ) flatten "]}," Fog AWS ELB LoadBalancer policy_descriptions":{"type":"method","name":"policy_descriptions","children":[],"call":[" service describe_load_balancer_policies body [] [] "," service describe_load_balancer_policies body [] "," service describe_load_balancer_policies body "," service describe_load_balancer_policies "," id "," service "," requires "]}," Fog AWS ELB LoadBalancer policies":{"type":"method","name":"policies","children":[],"call":["Fog AWS ELB Policies  new "," service "," policy_descriptions "," service policies "," identity "," requires "]}," Fog AWS ELB LoadBalancer listeners":{"type":"method","name":"listeners","children":[],"call":["Fog AWS ELB Listeners  new "," service "," attributes [] "," attributes "]}," Fog AWS ELB LoadBalancer backend_server_descriptions":{"type":"method","name":"backend_server_descriptions","children":[],"call":["Fog AWS ELB BackendServerDescriptions  new "," service "," attributes [] "," attributes "]}," Fog AWS ELB LoadBalancer configure_health_check":{"type":"method","name":"configure_health_check","children":[],"call":[" merge_attributes "," service configure_health_check body [] [] "," service configure_health_check body [] "," service configure_health_check body "," service configure_health_check "," id "," service "," requires "]}," Fog AWS ELB LoadBalancer instances_out_of_service":{"type":"method","name":"instances_out_of_service","children":[],"call":["hash [] ","(send\n  (send nil :instance_health) :select) map ","hash [] == "," instance_health select "," instance_health "]}," Fog AWS ELB LoadBalancer instances_in_service":{"type":"method","name":"instances_in_service","children":[],"call":["hash [] ","(send\n  (send nil :instance_health) :select) map ","hash [] == "," instance_health select "," instance_health "]}," Fog AWS ELB LoadBalancer instance_health":{"type":"method","name":"instance_health","children":[],"call":[" service describe_instance_health body [] [] "," service describe_instance_health body [] "," service describe_instance_health body "," service describe_instance_health "," id "," service "," requires "]}," Fog AWS ELB LoadBalancer apply_security_groups":{"type":"method","name":"apply_security_groups","children":[],"call":[" merge_attributes "," service apply_security_groups_to_load_balancer body [] "," service apply_security_groups_to_load_balancer body "," service apply_security_groups_to_load_balancer "," id "," service "," requires "]}," Fog AWS ELB LoadBalancer detach_subnets":{"type":"method","name":"detach_subnets","children":[],"call":[" merge_attributes "," service detach_load_balancer_from_subnets body [] "," service detach_load_balancer_from_subnets body "," service detach_load_balancer_from_subnets "," id "," service "," requires "]}," Fog AWS ELB LoadBalancer attach_subnets":{"type":"method","name":"attach_subnets","children":[],"call":[" merge_attributes "," service attach_load_balancer_to_subnets body [] "," service attach_load_balancer_to_subnets body "," service attach_load_balancer_to_subnets "," id "," service "," requires "]}," Fog AWS ELB LoadBalancer disable_availability_zones":{"type":"method","name":"disable_availability_zones","children":[],"call":[" merge_attributes "," service disable_availability_zones_for_load_balancer body [] "," service disable_availability_zones_for_load_balancer body "," service disable_availability_zones_for_load_balancer "," id "," service "," requires "]}," Fog AWS ELB LoadBalancer enable_availability_zones":{"type":"method","name":"enable_availability_zones","children":[],"call":[" merge_attributes "," service enable_availability_zones_for_load_balancer body [] "," service enable_availability_zones_for_load_balancer body "," service enable_availability_zones_for_load_balancer "," id "," service "," requires "]}," Fog AWS ELB LoadBalancer deregister_instances":{"type":"method","name":"deregister_instances","children":[],"call":[" merge_attributes ","h [] ","data [] map! ","data [] "," service deregister_instances_from_load_balancer body [] "," service deregister_instances_from_load_balancer body "," service deregister_instances_from_load_balancer "," id "," service "," requires "," service deregister_instances_from_load_balancer body []  [] map! "," service deregister_instances_from_load_balancer body []  [] "]}," Fog AWS ELB LoadBalancer register_instances":{"type":"method","name":"register_instances","children":[],"call":[" merge_attributes ","h [] ","data [] map! ","data [] "," service register_instances_with_load_balancer body [] "," service register_instances_with_load_balancer body "," service register_instances_with_load_balancer "," id "," service "," requires "," service register_instances_with_load_balancer body []  [] map! "," service register_instances_with_load_balancer body []  [] "]}," Fog AWS ELB LoadBalancer set_connection_settings_idle_timeout":{"type":"method","name":"set_connection_settings_idle_timeout","children":[],"call":[" service modify_load_balancer_attributes "," id "," service "," requires "]}," Fog AWS ELB LoadBalancer connection_settings_idle_timeout":{"type":"method","name":"connection_settings_idle_timeout","children":[],"call":[" service describe_load_balancer_attributes body [] [] [] [] "," service describe_load_balancer_attributes body [] [] [] "," service describe_load_balancer_attributes body [] [] "," service describe_load_balancer_attributes body [] "," service describe_load_balancer_attributes body "," service describe_load_balancer_attributes "," id "," service "," requires "]}," Fog AWS ELB LoadBalancer cross_zone_load_balancing=":{"type":"method","name":"cross_zone_load_balancing=","children":[],"call":[" service modify_load_balancer_attributes "," id "," service "," requires "]}," Fog AWS ELB LoadBalancer cross_zone_load_balancing?":{"type":"method","name":"cross_zone_load_balancing?","children":[],"call":[" service describe_load_balancer_attributes body [] [] [] [] "," service describe_load_balancer_attributes body [] [] [] "," service describe_load_balancer_attributes body [] [] "," service describe_load_balancer_attributes body [] "," service describe_load_balancer_attributes body "," service describe_load_balancer_attributes "," id "," service "," requires "]}," Fog AWS ELB LoadBalancer set_connection_draining":{"type":"method","name":"set_connection_draining","children":[],"call":[" service modify_load_balancer_attributes "," id "," service ","attrs []= "," requires "]}," Fog AWS ELB LoadBalancer connection_draining_timeout":{"type":"method","name":"connection_draining_timeout","children":[],"call":[" service describe_load_balancer_attributes body [] [] [] [] "," service describe_load_balancer_attributes body [] [] [] "," service describe_load_balancer_attributes body [] [] "," service describe_load_balancer_attributes body [] "," service describe_load_balancer_attributes body "," service describe_load_balancer_attributes "," id "," service "," requires "]}," Fog AWS ELB LoadBalancer connection_draining?":{"type":"method","name":"connection_draining?","children":[],"call":[" service describe_load_balancer_attributes body [] [] [] [] "," service describe_load_balancer_attributes body [] [] [] "," service describe_load_balancer_attributes body [] [] "," service describe_load_balancer_attributes body [] "," service describe_load_balancer_attributes body "," service describe_load_balancer_attributes "," id "," service "," requires "]}," Fog AWS ELB LoadBalancer initialize":{"type":"method","name":"initialize","children":[],"call":["attributes []= ","new_listener policy_names ","new_listener to_params ","Fog AWS ELB Listener  new ","attributes [] ","Fog AWS ELB Listener  new  policy_names ","Fog AWS ELB Listener  new  to_params "]}," Fog AWS ELB Listeners munged_data":{"type":"method","name":"munged_data","children":[],"call":["description [] merge ","description [] "," data map "," data "]}," Fog AWS ELB Listeners get":{"type":"method","name":"get","children":[],"call":["listener lb_port == ","listener lb_port "," all find "," all "]}," Fog AWS ELB Listeners all":{"type":"method","name":"all","children":[],"call":[" load "," munged_data "]}," Fog AWS ELB Listener to_params":{"type":"method","name":"to_params","children":[],"call":[" ssl_id "," protocol "," lb_port "," instance_protocol "," instance_port "]}," Fog AWS ELB Listener load_balancer":{"type":"method","name":"load_balancer","children":[],"call":[" collection load_balancer "," collection "]}," Fog AWS ELB Listener reload":{"type":"method","name":"reload","children":[],"call":[" load_balancer reload "," load_balancer "]}," Fog AWS ELB Listener policy":{"type":"method","name":"policy","children":[],"call":[" load_balancer policies get "," policy_names first "," policy_names "," load_balancer policies "," load_balancer "]}," Fog AWS ELB Listener destroy":{"type":"method","name":"destroy","children":[],"call":[" reload "," service delete_load_balancer_listeners "," lb_port "," load_balancer id "," load_balancer "," service "," requires "]}," Fog AWS ELB Listener save":{"type":"method","name":"save","children":[],"call":[" reload "," service create_load_balancer_listeners "," to_params "," load_balancer id "," load_balancer "," service "," requires "]}," Fog AWS ELB Listener initialize":{"type":"method","name":"initialize","children":[],"call":[" merge_attributes "]}," Fog AWS ELB BackendServerDescriptions get":{"type":"method","name":"get","children":[],"call":["e instance_port == ","e instance_port "," all find "," all "]}," Fog AWS ELB BackendServerDescriptions all":{"type":"method","name":"all","children":[],"call":[" load "," data "]}," Fog AWS Elasticache SubnetGroups get":{"type":"method","name":"get","children":[],"call":[" new "," service describe_cache_subnet_groups body [] [] first "," service describe_cache_subnet_groups body [] [] "," service describe_cache_subnet_groups body [] "," service describe_cache_subnet_groups body "," service describe_cache_subnet_groups "," service "]}," Fog AWS Elasticache SubnetGroups all":{"type":"method","name":"all","children":[],"call":[" load "," service describe_cache_subnet_groups body [] [] "," service describe_cache_subnet_groups body [] "," service describe_cache_subnet_groups body "," service describe_cache_subnet_groups "," service "]}," Fog AWS Elasticache SubnetGroup destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_cache_subnet_group "," id "," service "," requires "]}," Fog AWS Elasticache SubnetGroup save":{"type":"method","name":"save","children":[],"call":[" reload "," service create_cache_subnet_group "," description "," subnet_ids "," id "," service "," requires "]}," Fog AWS Elasticache SubnetGroup ready?":{"type":"method","name":"ready?","children":[],"call":[]}," Fog AWS Elasticache SecurityGroups get":{"type":"method","name":"get","children":[],"call":[" new "," service describe_cache_security_groups body [] first "," service describe_cache_security_groups body [] "," service describe_cache_security_groups body "," service describe_cache_security_groups "," service "]}," Fog AWS Elasticache SecurityGroups all":{"type":"method","name":"all","children":[],"call":[" load "," service describe_cache_security_groups body [] "," service describe_cache_security_groups body "," service describe_cache_security_groups "," service "]}," Fog AWS Elasticache SecurityGroup revoke_ec2_group":{"type":"method","name":"revoke_ec2_group","children":[],"call":[" merge_attributes ","data body [] ","data body "," service revoke_cache_security_group_ingress "," id "," service "," requires ","group_owner_id nil? "," service revoke_cache_security_group_ingress  body [] "," service revoke_cache_security_group_ingress  body "]}," Fog AWS Elasticache SecurityGroup authorize_ec2_group":{"type":"method","name":"authorize_ec2_group","children":[],"call":[" merge_attributes ","data body [] ","data body "," service authorize_cache_security_group_ingress "," id "," service "," requires ","group_owner_id nil? "," service authorize_cache_security_group_ingress  body [] "," service authorize_cache_security_group_ingress  body "]}," Fog AWS Elasticache SecurityGroup save":{"type":"method","name":"save","children":[],"call":[" service create_cache_security_group "," description "," id "," service "," requires "]}," Fog AWS Elasticache SecurityGroup destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_cache_security_group "," id "," service "," requires "]}," Fog AWS Elasticache SecurityGroup ready?":{"type":"method","name":"ready?","children":[],"call":["ingress [] == ","ingress [] "," ec2_groups all? "," ec2_groups "]}," Fog AWS Elasticache ParameterGroups get":{"type":"method","name":"get","children":[],"call":[" new "," service describe_cache_parameter_groups body [] first "," service describe_cache_parameter_groups body [] "," service describe_cache_parameter_groups body "," service describe_cache_parameter_groups "," service "]}," Fog AWS Elasticache ParameterGroups all":{"type":"method","name":"all","children":[],"call":[" load "," service describe_cache_parameter_groups body [] "," service describe_cache_parameter_groups body "," service describe_cache_parameter_groups "," service "]}," Fog AWS Elasticache ParameterGroup save":{"type":"method","name":"save","children":[],"call":[" service create_cache_parameter_group "," id "," service "," requires "]}," Fog AWS Elasticache ParameterGroup destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_cache_parameter_group "," id "," service "," requires "]}," Fog AWS Elasticache Clusters get":{"type":"method","name":"get","children":[],"call":[" new "," service describe_cache_clusters body [] first "," service describe_cache_clusters body [] "," service describe_cache_clusters body "," service describe_cache_clusters "," service "]}," Fog AWS Elasticache Clusters all":{"type":"method","name":"all","children":[],"call":[" load "," service describe_cache_clusters body [] "," service describe_cache_clusters body "," service describe_cache_clusters "," service "]}," Fog AWS Elasticache Cluster save":{"type":"method","name":"save","children":[],"call":[" service create_cache_cluster "," vpc_security_groups "," cache_subnet_group_name ","parameter_group [] "," parameter_group_name "," s3_snapshot_location "," maintenance_window "," zone "," port ","notification_config [] "," engine_version "," engine "," auto_upgrade "," num_nodes "," security_groups "," node_type "," id "," service ","Hash  new "," requires "]}," Fog AWS Elasticache Cluster destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_cache_cluster "," id "," service "," requires "]}," Fog AWS Elasticache Cluster ready?":{"type":"method","name":"ready?","children":[],"call":[" status == "," status "]}," Fog DNS AWS Zones get":{"type":"method","name":"get","children":[],"call":[" new "," service get_hosted_zone body "," service get_hosted_zone "," service "]}," Fog DNS AWS Zones all":{"type":"method","name":"all","children":[],"call":[" load "," service list_hosted_zones body [] "," service list_hosted_zones body "," service list_hosted_zones "," service "," max_items ","options [] "," marker "," max_items nil? "," marker nil? "]}," Fog DNS AWS Zone save":{"type":"method","name":"save","children":[],"call":[" merge_attributes "," service create_hosted_zone body "," service create_hosted_zone "," domain "," service ","options []= "," description "," caller_reference "," requires "]}," Fog DNS AWS Zone records":{"type":"method","name":"records","children":[],"call":["Fog DNS AWS Records  new "," service "]}," Fog DNS AWS Zone destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_hosted_zone "," identity "," service "," requires "]}," Fog DNS AWS Records new":{"type":"method","name":"new","children":[],"call":["(pair\n  (sym :zone)\n  (send nil :zone)) merge! "," zone "," requires "]}," Fog DNS AWS Records get":{"type":"method","name":"get","children":[],"call":["record set_identifier != ","record set_identifier ","record_identifier nil? ! ","record_identifier nil? ","record type != ","record type ","record_type nil? ! ","record_type nil? ","record name == ","record name "," new ","data [] shift ","data [] "," service list_resource_record_sets body "," service list_resource_record_sets "," zone id "," zone "," service ","value nil? ","options delete_if ","record_type upcase ","record_name + ","record_name end_with? "," requires ","(send\n  (begin\n    (or\n      (send\n        (lvar :data) :[]\n        (str \"ResourceRecordSets\"))\n      (array))) :map) compact first ","(send\n  (begin\n    (or\n      (send\n        (lvar :data) :[]\n        (str \"ResourceRecordSets\"))\n      (array))) :map) compact ","record set_identifier == ","record type == ","(or\n  (send\n    (lvar :data) :[]\n    (str \"ResourceRecordSets\"))\n  (array)) map ","record name casecmp == ","record name casecmp "," new  set_identifier != "," new  set_identifier "," new _identifier nil? ! "," new _identifier nil? "," new  type != "," new  type "," new _type nil? ! ","record_type upcase  nil? ! "," new _type nil? ","record_type upcase  nil? "," new  name == "," new  name ","data [] shift  [] shift "," service list_resource_record_sets body  [] shift ","data [] shift  [] "," service list_resource_record_sets body  [] "," service list_resource_ new _sets body "," service list_resource_ new _sets "," new _type upcase ","record_type upcase  upcase "," new _name + ","record_name +  + "," new _name end_with? ","record_name +  end_with? ","(send\n  (begin\n    (or\n      (send\n        (lvar :data [] shift ) :[]\n        (str \"ResourceRecordSets\"))\n      (array))) :map) compact first ","(send\n  (begin\n    (or\n      (send\n        (lvar : service list_resource_record_sets body ) :[]\n        (str \"ResourceRecordSets\"))\n      (array))) :map) compact first ","(send\n  (begin\n    (or\n      (send\n        (lvar :data [] shift ) :[]\n        (str \"ResourceRecordSets\"))\n      (array))) :map) compact ","(send\n  (begin\n    (or\n      (send\n        (lvar : service list_resource_record_sets body ) :[]\n        (str \"ResourceRecordSets\"))\n      (array))) :map) compact "," new  set_identifier == "," new  type == ","(or\n  (send\n    (lvar :data [] shift ) :[]\n    (str \"ResourceRecordSets\"))\n  (array)) map ","(or\n  (send\n    (lvar : service list_resource_record_sets body ) :[]\n    (str \"ResourceRecordSets\"))\n  (array)) map "," new  name casecmp == "," new  name casecmp "]}," Fog DNS AWS Records all!":{"type":"method","name":"all!","children":[],"call":[" load ","data concat ","batch [] "," merge_attributes ","(str \"IsTruncated\") include? ! ","(str \"IsTruncated\") include? ","batch reject ","batch []= ","batch key? "," service list_resource_record_sets body "," service list_resource_record_sets "," zone id "," zone "," service ","value nil? ","options delete_if "," next_record_identifier "," next_record_type "," next_record_name "," is_truncated "," service list_resource_record_sets body  [] "," service list_resource_record_sets body  reject "," service list_resource_record_sets body  []= "," service list_resource_record_sets body  key? "]}," Fog DNS AWS Records all":{"type":"method","name":"all","children":[],"call":[" load ","data [] "," merge_attributes ","(str \"IsTruncated\") include? ! ","(str \"IsTruncated\") include? ","data reject ","data []= ","data key? "," service list_resource_record_sets body "," service list_resource_record_sets "," zone id "," zone "," service ","value nil? ","options delete_if "," identifier ","options [] "," type "," zone domain "," max_items "," requires "," service list_resource_record_sets body  [] "," service list_resource_record_sets body  reject "," service list_resource_record_sets body  []= "," service list_resource_record_sets body  key? "]}," Fog DNS AWS Record attributes_to_options":{"type":"method","name":"attributes_to_options","children":[],"call":["options []= "," ttl "," requires "," alias_target "," health_check_id "," geo_location "," failover "," region "," set_identifier "," weight "," type "," symbolize_keys "," value "," name "," requires_one "]}," Fog DNS AWS Record zone=":{"type":"method","name":"zone=","children":[],"call":[]}," Fog DNS AWS Record reload":{"type":"method","name":"reload","children":[],"call":[" merge_attributes "," service get_change body "," service get_change "," change_id "," service "]}," Fog DNS AWS Record ready?":{"type":"method","name":"ready?","children":[],"call":[" status == "," status "," requires "]}," Fog DNS AWS Record modify":{"type":"method","name":"modify","children":[],"call":[" merge_attributes "," service change_resource_record_sets body "," service change_resource_record_sets "," zone id "," zone "," service ","options << "," attributes_to_options "]}," Fog DNS AWS Record save":{"type":"method","name":"save","children":[],"call":[" merge_attributes "," service change_resource_record_sets body "," service change_resource_record_sets "," zone id "," zone "," service "," attributes_to_options "," ttl "," alias_target "," attributes_to_ attributes_to_options  "]}," Fog DNS AWS Record zone":{"type":"method","name":"zone","children":[],"call":[]}," Fog DNS AWS Record destroy":{"type":"method","name":"destroy","children":[],"call":[" service change_resource_record_sets "," zone id "," zone "," service "," attributes_to_options "," attributes_to_ attributes_to_options  "]}," Fog DNS AWS Record initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Fog AWS DataPipeline Pipelines get":{"type":"method","name":"get","children":[],"call":[" raise ","data [] == ","data [] ","Fog JSON  decode ","error response body ","error response "," new "," service describe_pipelines [] first "," service describe_pipelines [] "," service describe_pipelines "," service ","Fog JSON  decode  [] == "," service describe_pipelines [] first  [] == ","Fog JSON  decode  [] "," service describe_pipelines [] first  [] "]}," Fog AWS DataPipeline Pipelines all":{"type":"method","name":"all","children":[],"call":[" load "," service describe_pipelines [] "," service describe_pipelines ","ids flatten "," service ","ids << ","id [] ","result [] map ","result [] "," service list_pipelines "," service list_pipelines  [] map "," service list_pipelines  [] "]}," Fog AWS DataPipeline Pipeline destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_pipeline "," id "," service "," requires "]}," Fog AWS DataPipeline Pipeline put":{"type":"method","name":"put","children":[],"call":[" service put_pipeline_definition "," id "," service "," requires "]}," Fog AWS DataPipeline Pipeline activate":{"type":"method","name":"activate","children":[],"call":[" service activate_pipeline "," id "," service "," requires "]}," Fog AWS DataPipeline Pipeline save":{"type":"method","name":"save","children":[],"call":[" merge_attributes "," service create_pipeline "," tags "," name "," unique_id "," service "," requires "]}," Fog AWS DataPipeline Pipeline initialize":{"type":"method","name":"initialize","children":[],"call":[" merge_attributes ","Hash  [] ","f [] ","f [] [] ","string_fields map ","f include? ","attributes [] select ","attributes [] ","attributes include? "]}," Fog Compute AWS Vpcs get":{"type":"method","name":"get","children":[],"call":[" class new all first "," class new all "," class new "," service "," class "]}," Fog Compute AWS Vpcs all":{"type":"method","name":"all","children":[],"call":[" load ","data [] "," service describe_vpcs body "," service describe_vpcs "," service ","Fog Logger  warning "," caller first "," caller ","filters_arg class ","filters_arg is_a? "," service describe_vpcs body  [] "]}," Fog Compute AWS Vpcs initialize":{"type":"method","name":"initialize","children":[],"call":[" filters "]}," Fog Compute AWS VPC save":{"type":"method","name":"save","children":[],"call":[" service create_tags "," identity "," service "," reload ","Fog  wait_for "," tags "," merge_attributes ","key == ","data reject "," service create_vpc body [] first "," service create_vpc body [] "," service create_vpc body "," service create_vpc "," cidr_block "," requires "," amazon_provided_ipv_6_cidr_block "," service create_ tags  ","  tags  "," service create_vpc body [] first  reject "]}," Fog Compute AWS VPC destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_vpc "," id "," service "," requires "]}," Fog Compute AWS VPC ready?":{"type":"method","name":"ready?","children":[],"call":[" state == "," state "," requires "]}," Fog Compute AWS VPC initialize":{"type":"method","name":"initialize","children":[],"call":[" tenancy "," dhcp_options_id "," amazon_provided_ipv_6_cidr_block "]}," Fog Compute AWS Volumes new":{"type":"method","name":"new","children":[],"call":["(pair\n  (sym :server)\n  (send nil :server)) merge! "," server "]}," Fog Compute AWS Volumes get":{"type":"method","name":"get","children":[],"call":[" class new all first "," class new all "," class new "," service "," class "]}," Fog Compute AWS Volumes all":{"type":"method","name":"all","children":[],"call":[" replace ","volume server_id == "," server id "," server ","volume server_id "," select "," load ","data [] "," service describe_volumes body "," service describe_volumes "," service ","Fog Logger  deprecation "," caller first "," caller ","filters_arg class ","filters_arg is_a? "," service describe_volumes body  [] "]}," Fog Compute AWS Volumes initialize":{"type":"method","name":"initialize","children":[],"call":[" filters "]}," Fog Compute AWS Volume detach":{"type":"method","name":"detach","children":[],"call":[" reload "," service detach_volume "," id "," service "," persisted? "," server_id= "]}," Fog Compute AWS Volume attach":{"type":"method","name":"attach","children":[],"call":[" reload "," service attach_volume "," device "," id "," server_id "," service "," server_id= ","new_server id "," ready? "," wait_for "," requires "," availability_zone= ","new_server availability_zone "," persisted? ! "," persisted? "]}," Fog Compute AWS Volume attachmentSet=":{"type":"method","name":"attachmentSet=","children":[],"call":[" merge_attributes ","new_attachment_set first "]}," Fog Compute AWS Volume force_detach":{"type":"method","name":"force_detach","children":[],"call":[" detach "]}," Fog Compute AWS Volume snapshot":{"type":"method","name":"snapshot","children":[],"call":[" service create_snapshot "," id "," service "," requires "]}," Fog Compute AWS Volume snapshots":{"type":"method","name":"snapshots","children":[],"call":[" service snapshots "," service "," requires "]}," Fog Compute AWS Volume server=":{"type":"method","name":"server=","children":[],"call":[" detach "," attach "," raise "]}," Fog Compute AWS Volume server":{"type":"method","name":"server","children":[],"call":[" service servers get "," server_id "," service servers "," service "," requires "]}," Fog Compute AWS Volume save":{"type":"method","name":"save","children":[],"call":[" server= "," service create_tags "," identity "," service "," reload ","Fog  wait_for "," tags "," merge_attributes ","key == ","data reject "," service create_volume body "," service create_volume "," encrypted "," iops "," type "," snapshot_id "," size "," availability_zone "," requires "," type == "," requires_one "," raise ","Fog Errors Error  new "," persisted? "," create_params "," service modify_volume "," attach "," device "," service volumes get "," service volumes "," service create_ tags  ","  tags  "," service create_volume body  reject "]}," Fog Compute AWS Volume ready?":{"type":"method","name":"ready?","children":[],"call":[" state == "," state "]}," Fog Compute AWS Volume destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_volume "," id "," service "," requires "]}," Fog Compute AWS Volume initialize":{"type":"method","name":"initialize","children":[],"call":[" server= ","attributes delete "]}," Fog Compute AWS Tags get":{"type":"method","name":"get","children":[],"call":[" class new all "," class new "," service "," class "]}," Fog Compute AWS Tags all":{"type":"method","name":"all","children":[],"call":[" load ","data [] "," service describe_tags body "," service describe_tags "," service "," service describe_tags body  [] "]}," Fog Compute AWS Tags initialize":{"type":"method","name":"initialize","children":[],"call":[" filters "]}," Fog Compute AWS Tag save":{"type":"method","name":"save","children":[],"call":[" service create_tags "," value "," key "," resource_id "," service "," requires "]}," Fog Compute AWS Tag destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_tags "," value "," key "," resource_id "," service "," requires "]}," Fog Compute AWS Tag initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Fog Compute AWS Subnets get":{"type":"method","name":"get","children":[],"call":[" class new all first "," class new all "," class new "," service "," class "]}," Fog Compute AWS Subnets all":{"type":"method","name":"all","children":[],"call":[" load ","data [] "," service describe_subnets body "," service describe_subnets "," service ","Fog Logger  warning "," caller first "," caller ","filters_arg class ","filters_arg is_a? "," service describe_subnets body  [] "]}," Fog Compute AWS Subnets initialize":{"type":"method","name":"initialize","children":[],"call":[" filters "]}," Fog Compute AWS Subnet save":{"type":"method","name":"save","children":[],"call":[" merge_attributes ","key == ","data reject "," service create_subnet body [] "," service create_subnet body "," service create_subnet "," cidr_block "," vpc_id "," service ","options []= "," availability_zone "," requires "," service create_subnet body []  reject "]}," Fog Compute AWS Subnet destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_subnet "," subnet_id "," service "," requires "]}," Fog Compute AWS Subnet ready?":{"type":"method","name":"ready?","children":[],"call":[" state == "," state "," requires "]}," Fog Compute AWS SpotRequests get":{"type":"method","name":"get","children":[],"call":[" class new all first "," class new all "," class new "," service "," class "]}," Fog Compute AWS SpotRequests bootstrap":{"type":"method","name":"bootstrap","children":[],"call":["server setup ","spot_request private_key "," ready? ","server wait_for "," service create_tags ","spot_request tags ","spot_request instance_id "," service "," service servers get "," service servers ","spot_request reload ready? ","spot_request reload ","Fog  wait_for ","spot_request save ","security_group authorize_port_range ","ip_permission [] == ","ip_permission [] ","ip_permission [] first [] == ","ip_permission [] first [] ","ip_permission [] first ","security_group ip_permissions find ","security_group ip_permissions "," service security_groups get ","spot_request groups first ","spot_request groups "," service security_groups ","spot_request key_pair= "," service key_pairs create ","spot_request public_key "," service key_pairs "," service key_pairs get ","Fog  credential ","Fog  respond_to? ","new_attributes [] "," service spot_requests new "," service spot_requests "," service servers get  setup "," service spot_requests new  private_key "," service servers get  wait_for "," service spot_requests new  tags "," service spot_requests new  instance_id "," service  service servers get s get "," service  service servers get s "," service spot_requests new  reload ready? "," service spot_requests new  reload "," service spot_requests new  save "," service security_groups get  authorize_port_range "," service security_groups get  ip_permissions find "," service security_groups get  ip_permissions "," service  service security_groups get s get "," service spot_requests new  groups first "," service spot_requests new  groups "," service  service security_groups get s "," service spot_requests new  key_pair= "," service spot_requests new  public_key "," service  service spot_requests new s new "," service  service spot_requests new s "]}," Fog Compute AWS SpotRequests all":{"type":"method","name":"all","children":[],"call":[" load ","(send\n  (send\n    (lvar :data) :[]\n    (str \"spotInstanceRequestSet\")) :map) flatten ","spot_instance_request merge ","spot_instance_request [] ","spot_instance_request []= ","LaunchSpecification. + + ","name [] ","LaunchSpecification. + ","name [] upcase ","spot_instance_request [] each ","data [] map ","data [] "," service describe_spot_instance_requests body "," service describe_spot_instance_requests "," service "," filters= ","Fog Logger  deprecation "," caller first "," caller ","filters class ","filters is_a? ","(send\n  (send\n    (lvar : service describe_spot_instance_requests body ) :[]\n    (str \"spotInstanceRequestSet\")) :map) flatten "," service describe_spot_instance_requests body  [] map "," service describe_spot_instance_requests body  [] "]}," Fog Compute AWS SpotRequests initialize":{"type":"method","name":"initialize","children":[],"call":[" filters "]}," Fog Compute AWS SpotRequest save":{"type":"method","name":"save","children":[],"call":[" merge_attributes ","spot_instance_request merge ","spot_instance_request [] ","spot_instance_request []= ","LaunchSpecification. + + ","name [] ","LaunchSpecification. + ","name [] upcase ","spot_instance_request [] each ","data [] first ","data [] "," service request_spot_instances body "," service request_spot_instances "," price "," flavor_id "," image_id "," service ","value nil? ","options delete_if "," valid_until "," valid_from "," request_type "," subnet_id "," user_data "," ebs_optimized "," groups "," availability_zone "," monitoring "," key_name "," block_device_mapping "," launch_group "," instance_count "," availability_zone_group "," requires "," security_group_ids ","data [] first  merge ","data [] first  [] ","data [] first  []= ","data [] first  [] each "," service request_spot_instances body  [] first "," service request_spot_instances body  [] "," user_ service request_spot_instances body  "]}," Fog Compute AWS SpotRequest ready?":{"type":"method","name":"ready?","children":[],"call":[" state == "," state "]}," Fog Compute AWS SpotRequest key_pair=":{"type":"method","name":"key_pair=","children":[],"call":[" key_name= ","new_keypair name "]}," Fog Compute AWS SpotRequest key_pair":{"type":"method","name":"key_pair","children":[],"call":[" service key_pairs all first "," service key_pairs all "," key_name "," service key_pairs "," service "," requires "]}," Fog Compute AWS SpotRequest destroy":{"type":"method","name":"destroy","children":[],"call":[" service cancel_spot_instance_requests "," id "," service "," requires "]}," Fog Compute AWS SpotRequest initialize":{"type":"method","name":"initialize","children":[],"call":["@service instance_variable_get "," prepare_service_value "," username "," image_id "," flavor_id "," groups "," security_group_ids "]}," Fog Compute AWS Snapshots new":{"type":"method","name":"new","children":[],"call":["(pair\n  (str \"volumeId\")\n  (send\n    (send nil :volume) :id)) merge! "," volume id "," volume "]}," Fog Compute AWS Snapshots get":{"type":"method","name":"get","children":[],"call":[" class new all first "," class new all "," class new "," service "," class "]}," Fog Compute AWS Snapshots all":{"type":"method","name":"all","children":[],"call":[" replace ","snapshot volume_id == "," volume id "," volume ","snapshot volume_id "," select "," load ","data [] "," service describe_snapshots body "," service describe_snapshots ","filters merge! "," service ","Fog Logger  deprecation "," caller first "," caller ","filters_arg class ","filters_arg is_a? "," service describe_snapshots body  [] "]}," Fog Compute AWS Snapshots initialize":{"type":"method","name":"initialize","children":[],"call":[" filters "]}," Fog Compute AWS Snapshot volume=":{"type":"method","name":"volume=","children":[],"call":[" volume_id= ","new_volume volume_id "]}," Fog Compute AWS Snapshot volume":{"type":"method","name":"volume","children":[],"call":[" service describe_volumes "," volume_id "," service "," requires "]}," Fog Compute AWS Snapshot save":{"type":"method","name":"save","children":[],"call":[" merge_attributes ","key == ","data reject "," service create_snapshot body "," service create_snapshot "," description "," volume_id "," service "," requires "," raise ","Fog Errors Error  new "," persisted? "," service create_snapshot body  reject "]}," Fog Compute AWS Snapshot ready?":{"type":"method","name":"ready?","children":[],"call":[" state == "," state "]}," Fog Compute AWS Snapshot destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_snapshot "," id "," service "," requires "]}," Fog Compute AWS Servers _setup_bootstrap":{"type":"method","name":"_setup_bootstrap","children":[],"call":["security_group authorize_port_range ","ip_permission [] == ","ip_permission [] ","ip_permission [] first [] == ","ip_permission [] first [] ","ip_permission [] first ","security_group ip_permissions find ","security_group ip_permissions "," raise ","server groups first ","server groups ","security_group nil? "," service security_groups get "," service security_groups "," service ","server key_pair= "," service key_pairs create ","server public_key "," service key_pairs "," service key_pairs get ","Fog  credential ","Fog  respond_to? ","server key_name ","ip_range [] == ","ip_range [] ","ip_permission [] find "," service security_groups get  authorize_port_range "," service security_groups get  ip_permissions find "," service security_groups get  ip_permissions "," service security_groups get  nil? "," service  service security_groups get s get "," service  service security_groups get s "]}," Fog Compute AWS Servers save_many":{"type":"method","name":"save_many","children":[],"call":[" service create_tags ","server identity "," service ","server reload ","Fog  wait_for ","tags size > ","tags size ","server tags ","server merge_attributes ","template dup ","(send\n  (send\n    (send\n      (lvar :data) :body) :[]\n    (str \"instancesSet\")) :select) map ","instance_set [] ","data body [] select ","data body [] ","data body "," service run_instances ","template run_instance_options ","template image_id "," service create_server tags  ","template dup  identity ","template dup  reload ","server tags  size > ","server tags  size ","server server tags  ","template dup  tags ","template dup  merge_attributes ","(send\n  (send\n    (send\n      (lvar : service run_instances ) :body) :[]\n    (str \"instancesSet\")) :select) map "," service run_instances  body [] select "," service run_instances  body [] "," service run_instances  body "]}," Fog Compute AWS Servers get":{"type":"method","name":"get","children":[],"call":[" class new all first "," class new all "," class new "," service "," class "]}," Fog Compute AWS Servers bootstrap":{"type":"method","name":"bootstrap","children":[],"call":[" bootstrap_many first "," bootstrap_many "]}," Fog Compute AWS Servers bootstrap_many":{"type":"method","name":"bootstrap_many","children":[],"call":["server setup ","server private_key "," ready? ","server wait_for ","servers each "," save_many "," _setup_bootstrap "," service servers new "," service servers "," service "," save_many  each "," service  save_many  new "," service  save_many  "]}," Fog Compute AWS Servers create_many":{"type":"method","name":"create_many","children":[],"call":[" save_many "," new "]}," Fog Compute AWS Servers all":{"type":"method","name":"all","children":[],"call":[" load ","(send\n  (send\n    (lvar :data) :[]\n    (str \"reservationSet\")) :map) flatten ","instance merge ","reservation [] ","reservation [] map ","data [] map ","data [] "," service describe_instances body "," service describe_instances "," service "," filters= ","Fog Logger  deprecation "," caller first "," caller ","filters class ","filters is_a? ","(send\n  (send\n    (lvar : service describe_instances body ) :[]\n    (str \"reservationSet\")) :map) flatten "," service describe_instances body  [] map "," service describe_instances body  [] "]}," Fog Compute AWS Servers initialize":{"type":"method","name":"initialize","children":[],"call":[" filters "]}," Fog Compute AWS Server placement=":{"type":"method","name":"placement=","children":[],"call":[" attributes []= "," attributes "," merge_attributes ","new_placement is_a? "]}," Fog Compute AWS Server monitor=":{"type":"method","name":"monitor=","children":[],"call":[" monitoring= "," raise ","ArgumentError  new "," service unmonitor_instances "," identity "," service "," service monitor_instances "," persisted? "]}," Fog Compute AWS Server volumes":{"type":"method","name":"volumes","children":[],"call":[" service volumes "," service "," requires "]}," Fog Compute AWS Server stop":{"type":"method","name":"stop","children":[],"call":[" service stop_instances "," id "," service "," requires "]}," Fog Compute AWS Server start":{"type":"method","name":"start","children":[],"call":[" service start_instances "," id "," service "," requires "]}," Fog Compute AWS Server setup":{"type":"method","name":"setup","children":[],"call":["Fog SSH  new run ","Fog SSH  new "," username "," ssh_ip_address "," sshable? "," wait_for ","commands << "," public_key ","Fog JSON  encode ","Fog JSON  sanitize "," attributes "," require "," requires "]}," Fog Compute AWS Server save":{"type":"method","name":"save","children":[],"call":[" merge_attributes ","servers first attributes ","servers first "," service servers save_many "," service servers "," service "," service servers save_many  first attributes "," service servers save_many  first "," service  service servers save_many  save_many "," service  service servers save_many  "]}," Fog Compute AWS Server run_instance_options":{"type":"method","name":"run_instance_options","children":[],"call":["options delete ","options []= "," private_ip_address ","options [] ","options [] index ","options [] each ","options [] kind_of? "," associate_public_ip "," subnet_id ","value nil? ","options delete_if "," user_data "," security_group_ids "," groups "," ramdisk_id "," tenancy "," placement_group "," availability_zone "," monitoring "," key_name "," kernel_id "," flavor_id "," instance_initiated_shutdown_behavior "," ebs_optimized "," disable_api_termination "," client_token "," network_interfaces "," block_device_mapping "," requires "," raise ","Fog Errors Error  new "," persisted? "]}," Fog Compute AWS Server reboot":{"type":"method","name":"reboot","children":[],"call":[" service reboot_instances "," id "," service "," requires "]}," Fog Compute AWS Server ready?":{"type":"method","name":"ready?","children":[],"call":[" state == "," state "]}," Fog Compute AWS Server key_pair=":{"type":"method","name":"key_pair=","children":[],"call":[" key_name= ","new_keypair name "]}," Fog Compute AWS Server key_pair":{"type":"method","name":"key_pair","children":[],"call":[" service key_pairs all first "," service key_pairs all "," key_name "," service key_pairs "," service "," requires "]}," Fog Compute AWS Server flavor":{"type":"method","name":"flavor","children":[],"call":["flavor id == "," flavor_id ","flavor id "," service flavors all find "," service flavors all "," service flavors "," service "]}," Fog Compute AWS Server flavor=":{"type":"method","name":"flavor=","children":[],"call":[]}," Fog Compute AWS Server flavor_id":{"type":"method","name":"flavor_id","children":[],"call":[" attributes [] "," attributes ","@flavor id "]}," Fog Compute AWS Server destroy":{"type":"method","name":"destroy","children":[],"call":[" service terminate_instances "," id "," service "," requires "]}," Fog Compute AWS Server console_output":{"type":"method","name":"console_output","children":[],"call":[" service get_console_output "," id "," service "," requires "]}," Fog Compute AWS Server addresses":{"type":"method","name":"addresses","children":[],"call":[" service addresses "," service "," requires "]}," Fog Compute AWS Server initialize":{"type":"method","name":"initialize","children":[],"call":["@service instance_variable_get "," username "," image_id "," prepare_service_value "," flavor_id "," groups ","attributes [] "]}," Fog Compute AWS SecurityGroups get_by_id":{"type":"method","name":"get_by_id","children":[],"call":[" class new all first "," class new all "," class new "," service "," class "]}," Fog Compute AWS SecurityGroups get":{"type":"method","name":"get","children":[],"call":[" class new all first "," class new all "," class new "," service "," class "]}," Fog Compute AWS SecurityGroups all":{"type":"method","name":"all","children":[],"call":[" load ","data [] "," service describe_security_groups body "," service describe_security_groups "," filters "," service "," filters= ","Fog Logger  deprecation "," caller first "," caller ","filters_arg class ","filters_arg is_a? "," service describe_security_groups body  [] "]}," Fog Compute AWS SecurityGroups initialize":{"type":"method","name":"initialize","children":[],"call":[" filters "]}," Fog Compute AWS SecurityGroup group_info":{"type":"method","name":"group_info","children":[],"call":["info []= ","group start_with? "," owner_id "," requires ","Fog Logger  deprecation ","group_arg split ","group_arg match ","group_arg values first ","group_arg values ","group_arg keys first ","group_arg keys ","Hash  === ","group_arg values first  start_with? ","group_arg values first _arg split ","group_arg values first _arg match ","group_arg values first _arg values first ","group_arg values first _arg values ","group_arg values first _arg keys first ","group_arg values first _arg keys "]}," Fog Compute AWS SecurityGroup save":{"type":"method","name":"save","children":[],"call":[" service create_tags "," group_id "," service "," reload ","Fog  wait_for "," tags "," merge_attributes ","key == ","data reject "," service create_security_group body "," service create_security_group "," vpc_id "," description "," name "," requires "," service create_ tags  ","  tags  "," service create_security_group body  reject "]}," Fog Compute AWS SecurityGroup reload":{"type":"method","name":"reload","children":[],"call":[" merge_attributes ","data attributes "," collection get_by_id "," group_id "," collection "," requires "," service delete_security_group "," name "," service "," group_id nil? "]}," Fog Compute AWS SecurityGroup revoke_port_range":{"type":"method","name":"revoke_port_range","children":[],"call":[" service revoke_security_group_ingress "," group_id "," name "," service ","ip_permission []= "," group_info ","options [] ","options [] nil? ","range max ","range min "," requires_one ","range end ","range begin "," revoke_port_range_egress ","options [] == "," revoke_port_range_ingress "," fetch_ip_permission "," fetch_ip_permission  []= "," fetch_ fetch_ip_permission  "]}," Fog Compute AWS SecurityGroup revoke_group_and_owner":{"type":"method","name":"revoke_group_and_owner","children":[],"call":[" service revoke_security_group_ingress "," group_id "," name "," service "," requires_one ","Fog Logger  deprecation "]}," Fog Compute AWS SecurityGroup destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_security_group "," group_id "," service "," name "," group_id nil? "," requires_one "]}," Fog Compute AWS SecurityGroup authorize_port_range":{"type":"method","name":"authorize_port_range","children":[],"call":[" service authorize_security_group_ingress "," group_id "," name "," service ","ip_permission []= "," group_info ","options [] ","options [] nil? ","range max ","range min "," requires_one ","range end ","range begin "," authorize_port_range_egress ","options [] == "," authorize_port_range_ingress "," fetch_ip_permission "," fetch_ip_permission  []= "," fetch_ fetch_ip_permission  "]}," Fog Compute AWS SecurityGroup authorize_group_and_owner":{"type":"method","name":"authorize_group_and_owner","children":[],"call":[" service authorize_security_group_ingress "," group_id "," name "," service "," requires_one ","Fog Logger  deprecation "]}," Fog Compute AWS RouteTables get":{"type":"method","name":"get","children":[],"call":[" class new all first "," class new all "," class new "," service "," class "]}," Fog Compute AWS RouteTables all":{"type":"method","name":"all","children":[],"call":[" load ","data [] "," service describe_route_tables body "," service describe_route_tables "," service ","Fog Logger  warning "," caller first "," caller ","filters_arg class ","filters_arg is_a? "," service describe_route_tables body  [] "]}," Fog Compute AWS RouteTables initialize":{"type":"method","name":"initialize","children":[],"call":[" filters "]}," Fog Compute AWS RouteTable routeSet=":{"type":"method","name":"routeSet=","children":[],"call":[" merge_attributes "]}," Fog Compute AWS RouteTable associationSet=":{"type":"method","name":"associationSet=","children":[],"call":[" merge_attributes ","new_association_set first "]}," Fog Compute AWS RouteTable save":{"type":"method","name":"save","children":[],"call":[" merge_attributes ","key == ","data reject "," service create_route_table body [] first "," service create_route_table body [] "," service create_route_table body "," service create_route_table "," vpc_id "," service "," requires "," service create_route_table body [] first  reject "]}," Fog Compute AWS RouteTable destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_route_table "," id "," service "," requires "]}," Fog Compute AWS RouteTable initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Fog Compute AWS NetworkInterfaces get":{"type":"method","name":"get","children":[],"call":[" class new all first "," class new all "," class new "," service "," class "]}," Fog Compute AWS NetworkInterfaces all":{"type":"method","name":"all","children":[],"call":[" load ","data [] "," service describe_network_interfaces body "," service describe_network_interfaces "," service "," service describe_network_interfaces body  [] "]}," Fog Compute AWS NetworkInterfaces initialize":{"type":"method","name":"initialize","children":[],"call":[" filters "]}," Fog Compute AWS NetworkInterface save":{"type":"method","name":"save","children":[],"call":[" merge_attributes ","key == ","data reject "," service create_network_interface body [] "," service create_network_interface body "," service create_network_interface "," subnet_id "," service ","value nil? ","options delete_if "," group_set "," description "," private_ip_address "," requires "," service create_network_interface body []  reject "]}," Fog Compute AWS NetworkInterface destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_network_interface "," network_interface_id "," service "," requires "]}," Fog Compute AWS NetworkAcls get":{"type":"method","name":"get","children":[],"call":[" class new all first "," class new all "," class new "," service "," class "]}," Fog Compute AWS NetworkAcls all":{"type":"method","name":"all","children":[],"call":[" load ","data [] "," service describe_network_acls body "," service describe_network_acls "," service "," service describe_network_acls body  [] "]}," Fog Compute AWS NetworkAcls initialize":{"type":"method","name":"initialize","children":[],"call":[" filters "]}," Fog Compute AWS NetworkAcl save":{"type":"method","name":"save","children":[],"call":[" service create_tags "," identity "," service "," reload ","Fog  wait_for "," tags "," merge_attributes ","key == ","data reject "," service create_network_acl body [] "," service create_network_acl body "," service create_network_acl "," vpc_id "," requires "," service create_ tags  ","  tags  "," service create_network_acl body []  reject "]}," Fog Compute AWS NetworkAcl destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_network_acl "," network_acl_id "," service "," requires "]}," Fog Compute AWS NetworkAcl associate_with":{"type":"method","name":"associate_with","children":[],"call":[" service replace_network_acl_association "," network_acl_id "," service ","(send\n  (send\n    (send\n      (send\n        (send\n          (send nil :service) :network_acls) :all\n        (hash\n          (pair\n            (str \"association.subnet-id\")\n            (send\n              (lvar :subnet) :subnet_id)))) :first) :associations) :find) [] ","a [] == ","subnet subnet_id ","a [] "," service network_acls all first associations find "," service network_acls all first associations "," service network_acls all first "," service network_acls all "," service network_acls "," requires "]}," Fog Compute AWS NetworkAcl update_rule":{"type":"method","name":"update_rule","children":[],"call":[" service replace_network_acl_entry "," network_acl_id "," service "," requires "]}," Fog Compute AWS NetworkAcl update_outbound_rule":{"type":"method","name":"update_outbound_rule","children":[],"call":[" update_rule "]}," Fog Compute AWS NetworkAcl update_inbound_rule":{"type":"method","name":"update_inbound_rule","children":[],"call":[" update_rule "]}," Fog Compute AWS NetworkAcl remove_rule":{"type":"method","name":"remove_rule","children":[],"call":[" service delete_network_acl_entry "," network_acl_id "," service "," requires "]}," Fog Compute AWS NetworkAcl remove_outbound_rule":{"type":"method","name":"remove_outbound_rule","children":[],"call":[" remove_rule "]}," Fog Compute AWS NetworkAcl remove_inbound_rule":{"type":"method","name":"remove_inbound_rule","children":[],"call":[" remove_rule "]}," Fog Compute AWS NetworkAcl add_rule":{"type":"method","name":"add_rule","children":[],"call":[" service create_network_acl_entry "," network_acl_id "," service "," requires "]}," Fog Compute AWS NetworkAcl add_outbound_rule":{"type":"method","name":"add_outbound_rule","children":[],"call":[" add_rule "]}," Fog Compute AWS NetworkAcl add_inbound_rule":{"type":"method","name":"add_inbound_rule","children":[],"call":[" add_rule "]}," Fog Compute AWS KeyPairs get":{"type":"method","name":"get","children":[],"call":[" class new all first "," class new all "," class new "," service "," class "]}," Fog Compute AWS KeyPairs all":{"type":"method","name":"all","children":[],"call":[" load ","data [] "," service describe_key_pairs body "," service describe_key_pairs "," service ","Fog Logger  deprecation "," caller first "," caller ","filters_arg class ","filters_arg is_a? "," service describe_key_pairs body  [] "]}," Fog Compute AWS KeyPairs initialize":{"type":"method","name":"initialize","children":[],"call":[" filters "]}," Fog Compute AWS KeyPair writable?":{"type":"method","name":"writable?","children":[],"call":["(and\n  (send nil :private_key)\n  (send\n    (const nil :ENV) :key?\n    (str \"HOME\"))) ! ! ","(and\n  (send nil :private_key)\n  (send\n    (const nil :ENV) :key?\n    (str \"HOME\"))) ! ","ENV  key? "," private_key "]}," Fog Compute AWS KeyPair write":{"type":"method","name":"write","children":[],"call":["f chmod ","f puts ","split_private_key each ","File  open "," private_key split "," private_key "," writable? "," private_key split  each "]}," Fog Compute AWS KeyPair save":{"type":"method","name":"save","children":[],"call":[" merge_attributes ","(str \"keyFingerprint\") include? ! ","(str \"keyFingerprint\") include? ","data reject "," service create_key_pair body "," service create_key_pair "," name "," service "," service import_key_pair body "," service import_key_pair "," public_key "," requires "," service create_key_pair body  reject "," service import_key_pair body  reject "]}," Fog Compute AWS KeyPair destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_key_pair "," name "," service "," requires "]}," Fog Compute AWS InternetGateways get":{"type":"method","name":"get","children":[],"call":[" class new all first "," class new all "," class new "," service "," class "]}," Fog Compute AWS InternetGateways all":{"type":"method","name":"all","children":[],"call":[" load ","data [] "," service describe_internet_gateways body "," service describe_internet_gateways "," service ","Fog Logger  warning "," caller first "," caller ","filters_arg class ","filters_arg is_a? "," service describe_internet_gateways body  [] "]}," Fog Compute AWS InternetGateways initialize":{"type":"method","name":"initialize","children":[],"call":[" filters "]}," Fog Compute AWS InternetGateway save":{"type":"method","name":"save","children":[],"call":[" merge_attributes ","key == ","data reject "," service create_internet_gateway body [] first "," service create_internet_gateway body [] "," service create_internet_gateway body "," service create_internet_gateway "," service "," service create_internet_gateway body [] first  reject "]}," Fog Compute AWS InternetGateway destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_internet_gateway "," id "," service "," requires "]}," Fog Compute AWS InternetGateway detach":{"type":"method","name":"detach","children":[],"call":[" reload "," service detach_internet_gateway "," id "," service "," requires "]}," Fog Compute AWS InternetGateway attach":{"type":"method","name":"attach","children":[],"call":[" reload "," service attach_internet_gateway "," id "," service "," requires "]}," Fog Compute AWS InternetGateway initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Fog Compute AWS Images get":{"type":"method","name":"get","children":[],"call":[" class new all first "," class new all "," class new "," service "," class "]}," Fog Compute AWS Images all":{"type":"method","name":"all","children":[],"call":[" load ","data [] "," service describe_images body "," service describe_images "," service "," service describe_images body  [] "]}," Fog Compute AWS Images initialize":{"type":"method","name":"initialize","children":[],"call":[" filters "]}," Fog Compute AWS Image ready?":{"type":"method","name":"ready?","children":[],"call":[" state == "," state "]}," Fog Compute AWS Image deregister":{"type":"method","name":"deregister","children":[],"call":[" service snapshots new destroy "," service snapshots new ","block_device [] "," service snapshots "," service ","block_device [] == "," root_device_name "," block_device_mapping find "," block_device_mapping "," root_device_type == "," root_device_type "," service deregister_image "," id "]}," Fog Compute AWS Flavors get":{"type":"method","name":"get","children":[],"call":["flavor id == ","flavor id "," class new all find "," class new all "," class new "," service "," class "]}," Fog Compute AWS Flavors all":{"type":"method","name":"all","children":[],"call":[" load "]}," Fog Compute AWS DhcpOptions get":{"type":"method","name":"get","children":[],"call":[" class new all first "," class new all "," class new "," service "," class "]}," Fog Compute AWS DhcpOptions all":{"type":"method","name":"all","children":[],"call":[" load ","data [] "," service describe_dhcp_options body "," service describe_dhcp_options "," service ","Fog Logger  warning "," caller first "," caller ","filters_arg class ","filters_arg is_a? "," service describe_dhcp_options body  [] "]}," Fog Compute AWS DhcpOptions initialize":{"type":"method","name":"initialize","children":[],"call":[" filters "]}," Fog Compute AWS DhcpOption save":{"type":"method","name":"save","children":[],"call":[" merge_attributes ","key == ","data reject "," service create_dhcp_options body [] first "," service create_dhcp_options body [] "," service create_dhcp_options body "," service create_dhcp_options "," dhcp_configuration_set "," service "," requires "," service create_dhcp_options body [] first  reject "]}," Fog Compute AWS DhcpOption destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_dhcp_options "," id "," service "," requires "]}," Fog Compute AWS DhcpOption associate":{"type":"method","name":"associate","children":[],"call":[" reload "," service associate_dhcp_options "," id "," service "," requires "]}," Fog Compute AWS DhcpOption initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Fog Compute AWS Addresses new":{"type":"method","name":"new","children":[],"call":["(pair\n  (sym :server)\n  (send nil :server)) merge! "," server "]}," Fog Compute AWS Addresses get":{"type":"method","name":"get","children":[],"call":[" class new all first "," class new all "," class new "," service "," class "]}," Fog Compute AWS Addresses all":{"type":"method","name":"all","children":[],"call":[" replace ","address server_id == "," server id "," server ","address server_id "," select "," load ","value empty? ","value nil? ","address reject ","data [] map ","data [] "," service describe_addresses body "," service describe_addresses "," filters "," service "," filters= ","Fog Logger  deprecation "," caller first "," caller ","filters_arg class ","filters_arg is_a? "," service describe_addresses body  [] map "," service describe_addresses body  [] "]}," Fog Compute AWS Addresses initialize":{"type":"method","name":"initialize","children":[],"call":[" filters "]}," Fog Compute AWS Address disassociate":{"type":"method","name":"disassociate","children":[],"call":[" service disassociate_address "," public_ip "," service "," persisted? "," server_id= "," association_id "]}," Fog Compute AWS Address associate":{"type":"method","name":"associate","children":[],"call":[" service associate_address "," allocation_id "," network_interface_id "," public_ip "," server_id "," service "," server_id= ","new_server id "," persisted? "]}," Fog Compute AWS Address save":{"type":"method","name":"save","children":[],"call":[" server= "," merge_attributes ","key == ","data reject "," service allocate_address body "," service allocate_address "," domain "," service "," raise ","Fog Errors Error  new "," persisted? "," service allocate_address body  reject "]}," Fog Compute AWS Address server":{"type":"method","name":"server","children":[],"call":[" service servers get "," server_id "," service servers "," service "]}," Fog Compute AWS Address server=":{"type":"method","name":"server=","children":[],"call":[" disassociate "," associate "]}," Fog Compute AWS Address destroy":{"type":"method","name":"destroy","children":[],"call":[" service release_address "," public_ip "," allocation_id "," service "," requires "]}," Fog Compute AWS Address initialize":{"type":"method","name":"initialize","children":[],"call":[" server= ","attributes delete "]}," Fog AWS CloudWatch Metrics get":{"type":"method","name":"get","children":[],"call":[" new "," service list_metrics body [] [] first "," service list_metrics body [] [] "," service list_metrics body [] "," service list_metrics body "," service list_metrics "," service ","dimensions map "]}," Fog AWS CloudWatch Metrics each":{"type":"method","name":"each","children":[],"call":["subset each_metric_this_page ","subset all ","subset next_token "," dup all "," dup "," block_given? ! "," block_given? ","subset all  each_metric_this_page "," dup all  each_metric_this_page ","subset all  all "," dup all  all ","subset all  next_token "," dup all  next_token ","subset subset next_token  "]}," Fog AWS CloudWatch Metrics all":{"type":"method","name":"all","children":[],"call":[" load ","result [] "," merge_attributes "," service list_metrics body [] "," service list_metrics body "," service list_metrics "," service "," service list_metrics body []  [] "]}," Fog AWS CloudWatch MetricStatistics all":{"type":"method","name":"all","children":[],"call":[" load ","datum merge ","data map! "," service get_metric_statistics body [] [] "," service get_metric_statistics body [] "," service get_metric_statistics body "," service get_metric_statistics "," service ","(pair\n  (str \"StartTime\")\n  (send\n    (begin\n      (send\n        (send\n          (const nil :Time) :now) :-\n        (int 3600))) :iso8601)) merge ","Time  now iso8601 ","Time  now ","(send\n  (send\n    (const nil :Time) :now) :-\n  (int 3600)) iso8601 ","Time  now - ","conditions [] "," service get_metric_statistics body [] []  map! "]}," Fog AWS CloudWatch MetricStatistic save":{"type":"method","name":"save","children":[],"call":[" service put_metric_data "," namespace "," service ","put_opts merge! "," sample_count "," average "," sum "," maximum "," minimum "," value "," dimensions "," unit "," metric_name "," requires "]}," Fog AWS CloudWatch Alarms enable":{"type":"method","name":"enable","children":[],"call":[" service enable_alarm_actions "," service "]}," Fog AWS CloudWatch Alarms disable":{"type":"method","name":"disable","children":[],"call":[" service disable_alarm_actions "," service "]}," Fog AWS CloudWatch Alarms delete":{"type":"method","name":"delete","children":[],"call":[" service delete_alarms "," service "]}," Fog AWS CloudWatch Alarms get":{"type":"method","name":"get","children":[],"call":[" new ","data nil? "," service describe_alarms body [] [] first "," service describe_alarms body [] [] "," service describe_alarms body [] "," service describe_alarms body "," service describe_alarms "," service "," service describe_alarms body [] [] first  nil? "]}," Fog AWS CloudWatch Alarms all":{"type":"method","name":"all","children":[],"call":[" load ","next_token nil? ","body [] [] ","body [] "," service describe_alarms body "," service describe_alarms "," service "," loop ","body [] []  nil? "," service describe_alarms body  [] [] "," service describe_alarms body  [] "," service describe_alarms  service describe_alarms body  "]}," Fog AWS CloudWatch AlarmHistories all":{"type":"method","name":"all","children":[],"call":[" load "," service describe_alarm_history body [] [] "," service describe_alarm_history body [] "," service describe_alarm_history body "," service describe_alarm_history "," service "]}," Fog AWS CloudWatch AlarmDatum save":{"type":"method","name":"save","children":[],"call":[" service put_metric_alarm "," service ","alarm_definition merge! "," unit "," ok_actions "," insufficient_actions "," dimensions "," alarm_description "," alarm_actions "," action_enabled "," threshold "," statistic "," period "," namespace "," metric_name "," evaluation_periods "," comparison_operator "," alarm_name "," requires "]}," Fog AWS CloudWatch AlarmData get":{"type":"method","name":"get","children":[],"call":[" load "," service describe_alarms_for_metric body [] [] "," service describe_alarms_for_metric body [] "," service describe_alarms_for_metric body "," service describe_alarms_for_metric "," service ","list_opts merge! ","dimensions map "]}," Fog AWS CloudWatch AlarmData all":{"type":"method","name":"all","children":[],"call":[" load "," service describe_alarms body [] [] "," service describe_alarms body [] "," service describe_alarms body "," service describe_alarms "," service "]}," Fog AWS CloudWatch Alarm destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_alarms "," id "," service "," requires "]}," Fog AWS CloudWatch Alarm save":{"type":"method","name":"save","children":[],"call":[" reload "," service put_metric_alarm "," service ","value nil? ","options delete_if ","Hash  [] "," send "," class aliases map "," class aliases "," class "," requires ","Hash  []  delete_if "]}," Fog AWS CloudWatch Alarm initialize":{"type":"method","name":"initialize","children":[],"call":["attributes [] "," evaluation_periods "," namespace "]}," Fog CDN AWS StreamingDistributions list_distributions":{"type":"method","name":"list_distributions","children":[],"call":[" service get_streaming_distribution_list "," service "]}," Fog CDN AWS StreamingDistributions get_distribution":{"type":"method","name":"get_distribution","children":[],"call":[" service get_streaming_distribution "," service "]}," Fog CDN AWS StreamingDistribution distribution_config_to_attributes":{"type":"method","name":"distribution_config_to_attributes","children":[],"call":["new_attributes merge ","new_attributes delete "]}," Fog CDN AWS StreamingDistribution attributes_to_options":{"type":"method","name":"attributes_to_options","children":[],"call":["v empty? ","v respond_to? ","options reject! ","v nil? "," logging "," enabled "," comment "," cname "," s3_origin "," caller_reference "]}," Fog CDN AWS StreamingDistribution post_distribution":{"type":"method","name":"post_distribution","children":[],"call":[" service post_streaming_distribution "," service "]}," Fog CDN AWS StreamingDistribution put_distribution_config":{"type":"method","name":"put_distribution_config","children":[],"call":[" service put_streaming_distribution_config "," service "]}," Fog CDN AWS StreamingDistribution delete_distribution":{"type":"method","name":"delete_distribution","children":[],"call":[" service delete_streaming_distribution "," service "]}," Fog CDN AWS StreamingDistribution save":{"type":"method","name":"save","children":[],"call":[" merge_attributes ","response body ","response headers [] ","response headers "," post_distribution "," put_distribution_config "," etag "," identity "," attributes_to_options "," requires_one "," post_distribution  body "," put_distribution_config  body "," post_distribution  headers [] "," put_distribution_config  headers [] "," post_distribution  headers "," put_distribution_config  headers "," response headers []  "," attributes_to_ attributes_to_options  "]}," Fog CDN AWS StreamingDistribution initialize":{"type":"method","name":"initialize","children":[],"call":[" distribution_config_to_attributes "]}," Fog CDN AWS Invalidations new":{"type":"method","name":"new","children":[],"call":["(pair\n  (sym :distribution)\n  (send nil :distribution)) merge! "," distribution "," requires "]}," Fog CDN AWS Invalidations get":{"type":"method","name":"get","children":[],"call":[" new "," service get_invalidation body "," service get_invalidation "," distribution identity "," distribution "," service "," requires "," service get_ new  body "," service get_ new  "]}," Fog CDN AWS Invalidations all":{"type":"method","name":"all","children":[],"call":[" load ","data [] "," merge_attributes ","(str \"IsTruncated\") include? ! ","(str \"IsTruncated\") include? ","data reject "," service get_invalidation_list body "," service get_invalidation_list "," distribution identity "," distribution "," service ","value nil? ","options delete_if "," max_items ","options [] "," requires "," service get_invalidation_list body  [] "," service get_invalidation_list body  reject "]}," Fog CDN AWS Invalidation invalidation_to_attributes":{"type":"method","name":"invalidation_to_attributes","children":[],"call":["new_attributes []= ","invalidation_batch [] ","new_attributes delete "]}," Fog CDN AWS Invalidation distribution=":{"type":"method","name":"distribution=","children":[],"call":[]}," Fog CDN AWS Invalidation destroy":{"type":"method","name":"destroy","children":[],"call":[]}," Fog CDN AWS Invalidation save":{"type":"method","name":"save","children":[],"call":[" merge_attributes "," invalidation_to_attributes ","response body "," service post_invalidation "," caller_reference "," paths "," distribution identity "," distribution "," service "," raise "," persisted? "," requires "," service post_invalidation  body "]}," Fog CDN AWS Invalidation ready?":{"type":"method","name":"ready?","children":[],"call":[" status == "," status "," requires "]}," Fog CDN AWS Invalidation distribution":{"type":"method","name":"distribution","children":[],"call":[]}," Fog CDN AWS Invalidation initialize":{"type":"method","name":"initialize","children":[],"call":[" invalidation_to_attributes ","Time  now utc to_i to_s ","Time  now utc to_i ","Time  now utc ","Time  now ","new_attributes [] "]}," Fog CDN AWS DistributionsHelper each_distribution":{"type":"method","name":"each_distribution","children":[],"call":["subset each_distribution_this_page ","subset all ","subset marker ","subset is_truncated "," dup all "," dup "," block_given? ! "," block_given? ","subset all  each_distribution_this_page "," dup all  each_distribution_this_page ","subset all  all "," dup all  all ","subset all  marker "," dup all  marker ","subset all  is_truncated "," dup all  is_truncated "]}," Fog CDN AWS DistributionsHelper get":{"type":"method","name":"get","children":[],"call":[" new ","response body merge ","response headers [] ","response headers ","response body "," get_distribution "," get_distribution  body merge "," get_distribution  headers [] "," get_distribution  headers "," get_distribution  body "]}," Fog CDN AWS DistributionsHelper all":{"type":"method","name":"all","children":[],"call":[" load ","(or\n  (send\n    (lvar :data) :[]\n    (str \"StreamingDistributionSummary\"))\n  (hash)) map ","data [] ","summary map "," merge_attributes "," list_distributions body "," list_distributions ","(or\n  (send\n    (lvar : list_distributions body ) :[]\n    (str \"StreamingDistributionSummary\"))\n  (hash)) map "," list_distributions body  [] ","data []  map "]}," Fog CDN AWS Distributions list_distributions":{"type":"method","name":"list_distributions","children":[],"call":[" service get_distribution_list "," service "]}," Fog CDN AWS Distributions get_distribution":{"type":"method","name":"get_distribution","children":[],"call":[" service get_distribution "," service "]}," Fog CDN AWS DistributionHelper disable":{"type":"method","name":"disable","children":[],"call":[" merge_attributes ","response body ","response headers [] ","response headers "," put_distribution_config "," attributes_to_options "," etag "," identity "," enabled= "," enabled? "," reload "," caller_reference nil? "," caller_reference "," etag nil? "," requires "," put_distribution_config  body "," put_distribution_config  headers [] "," put_distribution_config  headers "," response headers []  "," response headers []  nil? "]}," Fog CDN AWS DistributionHelper enable":{"type":"method","name":"enable","children":[],"call":[" merge_attributes ","response body ","response headers [] ","response headers "," put_distribution_config "," attributes_to_options "," etag "," identity "," enabled= "," enabled? "," reload "," caller_reference nil? "," caller_reference "," etag nil? "," requires "," put_distribution_config  body "," put_distribution_config  headers [] "," put_distribution_config  headers "," response headers []  "," response headers []  nil? "]}," Fog CDN AWS DistributionHelper ready?":{"type":"method","name":"ready?","children":[],"call":[" status == "," status "," requires "]}," Fog CDN AWS DistributionHelper custom_origin?":{"type":"method","name":"custom_origin?","children":[],"call":[" custom_origin nil? ! "," custom_origin nil? "," custom_origin "," requires "]}," Fog CDN AWS DistributionHelper disabled?":{"type":"method","name":"disabled?","children":[],"call":[" ready? "," enabled? ! "," enabled? "," requires "]}," Fog CDN AWS DistributionHelper enabled?":{"type":"method","name":"enabled?","children":[],"call":[" ready? "," enabled ! ! "," enabled ! "," enabled "," requires "]}," Fog CDN AWS DistributionHelper destroy":{"type":"method","name":"destroy","children":[],"call":[" delete_distribution "," etag "," identity "," raise "," disabled? "," requires "]}," Fog CDN AWS Distribution distribution_config_to_attributes":{"type":"method","name":"distribution_config_to_attributes","children":[],"call":["new_attributes merge ","new_attributes delete "]}," Fog CDN AWS Distribution attributes_to_options":{"type":"method","name":"attributes_to_options","children":[],"call":["v empty? ","v respond_to? ","options reject! ","v nil? "," default_root_object "," trusted_signers "," logging "," enabled "," comment "," cname "," custom_origin "," s3_origin "," caller_reference "]}," Fog CDN AWS Distribution post_distribution":{"type":"method","name":"post_distribution","children":[],"call":[" service post_distribution "," service "]}," Fog CDN AWS Distribution put_distribution_config":{"type":"method","name":"put_distribution_config","children":[],"call":[" service put_distribution_config "," service "]}," Fog CDN AWS Distribution delete_distribution":{"type":"method","name":"delete_distribution","children":[],"call":[" service delete_distribution "," service "]}," Fog CDN AWS Distribution save":{"type":"method","name":"save","children":[],"call":[" merge_attributes ","response body ","response headers [] ","response headers "," post_distribution "," put_distribution_config "," etag "," identity "," attributes_to_options "," requires_one "," post_distribution  body "," put_distribution_config  body "," post_distribution  headers [] "," put_distribution_config  headers [] "," post_distribution  headers "," put_distribution_config  headers "," response headers []  "," attributes_to_ attributes_to_options  "]}," Fog CDN AWS Distribution invalidations":{"type":"method","name":"invalidations","children":[],"call":["Fog CDN AWS Invalidations  new "," service "]}," Fog CDN AWS Distribution initialize":{"type":"method","name":"initialize","children":[],"call":[" distribution_config_to_attributes "]}," Fog AWS ElasticBeanstalk Versions get":{"type":"method","name":"get","children":[],"call":[" new ","data first ","data length == ","data length "," service describe_application_versions body [] [] "," service describe_application_versions body [] "," service describe_application_versions body "," service describe_application_versions "," service "," service describe_application_versions body [] []  first "," service describe_application_versions body [] []  length == "," service describe_application_versions body [] []  length "]}," Fog AWS ElasticBeanstalk Versions all":{"type":"method","name":"all","children":[],"call":[" load "," service describe_application_versions body [] [] "," service describe_application_versions body [] "," service describe_application_versions body "," service describe_application_versions "," service "]}," Fog AWS ElasticBeanstalk Version update":{"type":"method","name":"update","children":[],"call":[" merge_attributes "," service update_application_version body [] [] "," service update_application_version body [] "," service update_application_version body "," service update_application_version "," service ","value nil? ","options delete_if "," label "," description "," application_name "," requires "]}," Fog AWS ElasticBeanstalk Version save":{"type":"method","name":"save","children":[],"call":[" merge_attributes "," service create_application_version body [] [] "," service create_application_version body [] "," service create_application_version body "," service create_application_version "," service ","value nil? ","options delete_if "," label "," source_bundle "," description "," auto_create_application "," application_name "," requires "]}," Fog AWS ElasticBeanstalk Version destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_application_version "," label "," application_name "," service "," requires "]}," Fog AWS ElasticBeanstalk Version environments":{"type":"method","name":"environments","children":[],"call":[" service environments all "," label "," application_name "," service environments "," service "," requires "]}," Fog AWS ElasticBeanstalk Version events":{"type":"method","name":"events","children":[],"call":[" service events all "," label "," application_name "," service events "," service "," requires "]}," Fog AWS ElasticBeanstalk Version initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Fog AWS ElasticBeanstalk Templates get":{"type":"method","name":"get","children":[],"call":[" new ","data first ","data length == ","data length "," service describe_configuration_settings body [] [] "," service describe_configuration_settings body [] "," service describe_configuration_settings body "," service describe_configuration_settings "," service "," service describe_configuration_settings body [] []  first "," service describe_configuration_settings body [] []  length == "," service describe_configuration_settings body [] []  length "]}," Fog AWS ElasticBeanstalk Templates all":{"type":"method","name":"all","children":[],"call":[" load ","data << ","settings first ","settings length == ","settings length "," service describe_configuration_settings body [] [] "," service describe_configuration_settings body [] "," service describe_configuration_settings body "," service describe_configuration_settings "," service ","application [] ","application [] each ","applications each "," service describe_applications body [] [] "," service describe_applications body [] "," service describe_applications body "," service describe_applications ","application_filter << ","options [] ","options key? "," service describe_configuration_settings body [] []  first "," service describe_configuration_settings body [] []  length == "," service describe_configuration_settings body [] []  length "," service describe_configuration_ service describe_configuration_settings body [] []  body [] [] "," service describe_configuration_ service describe_configuration_settings body [] []  body [] "," service describe_configuration_ service describe_configuration_settings body [] []  body "," service describe_configuration_ service describe_configuration_settings body [] []  "," service describe_applications body [] []  each "," service describe_ service describe_applications body [] []  body [] [] "," service describe_ service describe_applications body [] []  body [] "," service describe_ service describe_applications body [] []  body "," service describe_ service describe_applications body [] []  "]}," Fog AWS ElasticBeanstalk Template modify":{"type":"method","name":"modify","children":[],"call":[" merge_attributes "," service update_configuration_template body [] "," service update_configuration_template body "," service update_configuration_template "," service ","value nil? ","options delete_if "," name ","new_attributes [] "," application_name "," requires "]}," Fog AWS ElasticBeanstalk Template save":{"type":"method","name":"save","children":[],"call":[" merge_attributes "," service create_configuration_template body [] "," service create_configuration_template body "," service create_configuration_template "," service ","value nil? ","options delete_if "," name "," source_configuration "," solution_stack_name "," option_settings "," environment_id "," description "," application_name "," requires "]}," Fog AWS ElasticBeanstalk Template destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_configuration_template "," name "," application_name "," service "," requires "]}," Fog AWS ElasticBeanstalk Template options":{"type":"method","name":"options","children":[],"call":["data body [] [] ","data body [] ","data body "," service describe_configuration_options "," name "," application_name "," service "," requires "," service describe_configuration_options  body [] [] "," service describe_configuration_options  body [] "," service describe_configuration_options  body "]}," Fog AWS ElasticBeanstalk Template initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Fog AWS ElasticBeanstalk Events all":{"type":"method","name":"all","children":[],"call":[" load "," service describe_events body [] [] "," service describe_events body [] "," service describe_events body "," service describe_events "," service "]}," Fog AWS ElasticBeanstalk Environments get":{"type":"method","name":"get","children":[],"call":[" new "," service describe_environments body [] [] first "," service describe_environments body [] [] "," service describe_environments body [] "," service describe_environments body "," service describe_environments "," service "]}," Fog AWS ElasticBeanstalk Environments all":{"type":"method","name":"all","children":[],"call":[" load "," service describe_environments body [] [] "," service describe_environments body [] "," service describe_environments body "," service describe_environments "," service "]}," Fog AWS ElasticBeanstalk Environment save":{"type":"method","name":"save","children":[],"call":[" merge_attributes "," service create_environment body [] "," service create_environment body "," service create_environment "," service ","value nil? ","options delete_if "," version_label "," template_name "," solution_stack_name "," options_to_remove "," option_settings "," name "," description "," cname_prefix "," application_name "," requires_one "," requires "]}," Fog AWS ElasticBeanstalk Environment destroy":{"type":"method","name":"destroy","children":[],"call":[" service terminate_environment "," id "," service "," requires "]}," Fog AWS ElasticBeanstalk Environment version=":{"type":"method","name":"version=","children":[],"call":[" merge_attributes "," service update_environment body [] "," service update_environment body "," service update_environment "," id "," service "," raise ","new_version nil? ","new_version label ","new_version is_a? "," requires "]}," Fog AWS ElasticBeanstalk Environment version":{"type":"method","name":"version","children":[],"call":[" service versions get "," version_label "," application_name "," service versions "," service "," requires "]}," Fog AWS ElasticBeanstalk Environment swap_cnames":{"type":"method","name":"swap_cnames","children":[],"call":[" reload ","source reload "," service swap_environment_cnames "," name ","source name "," service "," requires "]}," Fog AWS ElasticBeanstalk Environment rebuild":{"type":"method","name":"rebuild","children":[],"call":[" reload "," service rebuild_environment "," id "," service "," requires "]}," Fog AWS ElasticBeanstalk Environment restart_app_server":{"type":"method","name":"restart_app_server","children":[],"call":[" reload "," service restart_app_server "," id "," service "," requires "]}," Fog AWS ElasticBeanstalk Environment events":{"type":"method","name":"events","children":[],"call":[" service events all "," id "," service events "," service "," requires "]}," Fog AWS ElasticBeanstalk Environment load_balancer":{"type":"method","name":"load_balancer","children":[],"call":["elb_connection load_balancers get "," resources [] [] "," resources [] "," resources ","elb_connection load_balancers "," live_resources [] first [] "," live_resources [] first "," live_resources [] "," live_resources "," resources nil? "]}," Fog AWS ElasticBeanstalk Environment live_resources":{"type":"method","name":"live_resources","children":[],"call":["data delete "," service describe_environment_resources body [] [] "," service describe_environment_resources body [] "," service describe_environment_resources body "," service describe_environment_resources "," id "," service "," requires "," service describe_environment_resources body [] []  delete "]}," Fog AWS ElasticBeanstalk Environment terminated?":{"type":"method","name":"terminated?","children":[],"call":[" status == "," status "]}," Fog AWS ElasticBeanstalk Environment ready?":{"type":"method","name":"ready?","children":[],"call":[" status == "," status "]}," Fog AWS ElasticBeanstalk Environment healthy?":{"type":"method","name":"healthy?","children":[],"call":[" health == "," health "]}," Fog AWS ElasticBeanstalk Applications get":{"type":"method","name":"get","children":[],"call":[" new "," service describe_applications body [] [] first "," service describe_applications body [] [] "," service describe_applications body [] "," service describe_applications body "," service describe_applications "," service "]}," Fog AWS ElasticBeanstalk Applications all":{"type":"method","name":"all","children":[],"call":[" load "," service describe_applications body [] [] "," service describe_applications body [] "," service describe_applications body "," service describe_applications "," service "]}," Fog AWS ElasticBeanstalk Application save":{"type":"method","name":"save","children":[],"call":[" merge_attributes "," service create_application body [] [] "," service create_application body [] "," service create_application body "," service create_application "," service ","options []= "," description "," description nil? "," name "," requires "]}," Fog AWS ElasticBeanstalk Application destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_application "," name "," service "," requires "]}," Fog AWS ElasticBeanstalk Application versions":{"type":"method","name":"versions","children":[],"call":[" service versions all "," name "," service versions "," service "," requires "]}," Fog AWS ElasticBeanstalk Application templates":{"type":"method","name":"templates","children":[],"call":[" service templates all "," name "," service templates "," service "," requires "]}," Fog AWS ElasticBeanstalk Application events":{"type":"method","name":"events","children":[],"call":[" service events all "," name "," service events "," service "," requires "]}," Fog AWS ElasticBeanstalk Application environments":{"type":"method","name":"environments","children":[],"call":[" service environments all "," name "," service environments "," service "," requires "]}," Fog AWS ElasticBeanstalk Application initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Fog AWS AutoScaling Policy destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_policy "," id "," auto_scaling_group_name "," service "," requires "]}," Fog AWS AutoScaling Policy save":{"type":"method","name":"save","children":[],"call":[" reload "," service put_scaling_policy "," scaling_adjustment "," id "," auto_scaling_group_name "," adjustment_type "," service ","value nil? ","options delete_if ","Hash  [] "," send "," class aliases map "," class aliases "," class "," requires ","Hash  []  delete_if "]}," Fog AWS AutoScaling Policy initialize":{"type":"method","name":"initialize","children":[],"call":["attributes [] "]}," Fog AWS AutoScaling Policies get":{"type":"method","name":"get","children":[],"call":[" new ","data nil? "," service describe_policies body [] [] first "," service describe_policies body [] [] "," service describe_policies body [] "," service describe_policies body "," service describe_policies "," service "," service describe_policies body [] [] first  nil? "]}," Fog AWS AutoScaling Policies all":{"type":"method","name":"all","children":[],"call":[" load ","next_token nil? ","result [] "," service describe_policies body [] "," service describe_policies body "," service describe_policies "," filters merge "," filters "," service "," loop "," filters= ","result []  nil? "," service describe_policies body []  [] "]}," Fog AWS AutoScaling Policies initialize":{"type":"method","name":"initialize","children":[],"call":[" filters= "]}," Fog AWS AutoScaling Instances get":{"type":"method","name":"get","children":[],"call":[" new ","data nil? "," service describe_auto_scaling_instances body [] [] first "," service describe_auto_scaling_instances body [] [] "," service describe_auto_scaling_instances body [] "," service describe_auto_scaling_instances body "," service describe_auto_scaling_instances "," service "," service describe_auto_scaling_instances body [] [] first  nil? "]}," Fog AWS AutoScaling Instances all":{"type":"method","name":"all","children":[],"call":[" load ","next_token nil? ","result [] "," service describe_auto_scaling_instances body [] "," service describe_auto_scaling_instances body "," service describe_auto_scaling_instances "," service "," loop ","result []  nil? "," service describe_auto_scaling_instances body []  [] "]}," Fog AWS AutoScaling Instance reload":{"type":"method","name":"reload","children":[],"call":[]}," Fog AWS AutoScaling Instance ready?":{"type":"method","name":"ready?","children":[],"call":[" life_cycle_state == "," life_cycle_state "]}," Fog AWS AutoScaling Instance healthy?":{"type":"method","name":"healthy?","children":[],"call":[" health_status == "," health_status "]}," Fog AWS AutoScaling Instance terminate":{"type":"method","name":"terminate","children":[],"call":[" reload "," service terminate_instance_in_auto_scaling_group "," id "," service "," requires "]}," Fog AWS AutoScaling Instance set_health":{"type":"method","name":"set_health","children":[],"call":[" reload "," service set_instance_health "," id "," service "," requires "]}," Fog AWS AutoScaling Instance configuration":{"type":"method","name":"configuration","children":[],"call":[" service configurations get "," attributes [] "," attributes "," service configurations "," service "]}," Fog AWS AutoScaling Instance group":{"type":"method","name":"group","children":[],"call":[" service groups get "," attributes [] "," attributes "," service groups "," service "]}," Fog AWS AutoScaling Instance initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Fog AWS AutoScaling Groups get":{"type":"method","name":"get","children":[],"call":[" new ","data nil? "," service describe_auto_scaling_groups body [] [] first "," service describe_auto_scaling_groups body [] [] "," service describe_auto_scaling_groups body [] "," service describe_auto_scaling_groups body "," service describe_auto_scaling_groups "," service "," service describe_auto_scaling_groups body [] [] first  nil? "]}," Fog AWS AutoScaling Groups all":{"type":"method","name":"all","children":[],"call":[" load ","next_token nil? ","result [] "," service describe_auto_scaling_groups body [] "," service describe_auto_scaling_groups body "," service describe_auto_scaling_groups ","filters merge "," service "," loop ","result []  nil? "," service describe_auto_scaling_groups body []  [] "]}," Fog AWS AutoScaling Groups initialize":{"type":"method","name":"initialize","children":[],"call":[" filters= "]}," Fog AWS AutoScaling Group options":{"type":"method","name":"options","children":[],"call":["value nil? ","ret delete_if ","Hash  [] "," send "," class aliases map "," class aliases "," class ","Hash  []  delete_if "]}," Fog AWS AutoScaling Group filtered_options":{"type":"method","name":"filtered_options","children":[],"call":["Hash  [] ","ExpectedOptions  [] include? ","ExpectedOptions  [] "," options select "," options "]}," Fog AWS AutoScaling Group update":{"type":"method","name":"update","children":[],"call":[" reload "," service update_auto_scaling_group "," filtered_options "," id "," service "," requires "]}," Fog AWS AutoScaling Group destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_auto_scaling_group "," id "," service ","opts merge! ","options [] "," requires "]}," Fog AWS AutoScaling Group save":{"type":"method","name":"save","children":[],"call":[" reload "," service create_auto_scaling_group "," filtered_options "," min_size "," max_size "," launch_configuration_name "," availability_zones "," id "," service "," requires "]}," Fog AWS AutoScaling Group ready?":{"type":"method","name":"ready?","children":[],"call":[]}," Fog AWS AutoScaling Group suspend_processes":{"type":"method","name":"suspend_processes","children":[],"call":[" reload "," service suspend_processes "," id "," service "," requires "]}," Fog AWS AutoScaling Group resume_processes":{"type":"method","name":"resume_processes","children":[],"call":[" reload "," service resume_processes "," id "," service "," requires "]}," Fog AWS AutoScaling Group instances_out_service":{"type":"method","name":"instances_out_service","children":[],"call":["hash [] ","(send\n  (send\n    (send nil :attributes) :[]\n    (sym :instances)) :select) map ","hash [] == "," attributes [] select "," attributes [] "," attributes "]}," Fog AWS AutoScaling Group instances_in_service":{"type":"method","name":"instances_in_service","children":[],"call":["hash [] ","(send\n  (send\n    (send nil :attributes) :[]\n    (sym :instances)) :select) map ","hash [] == "," attributes [] select "," attributes [] "," attributes "]}," Fog AWS AutoScaling Group instances":{"type":"method","name":"instances","children":[],"call":["Fog AWS AutoScaling Instances  new load "," attributes [] "," attributes ","Fog AWS AutoScaling Instances  new "," service "]}," Fog AWS AutoScaling Group enable_metrics_collection":{"type":"method","name":"enable_metrics_collection","children":[],"call":[" reload "," service enable_metrics_collection "," id "," service "," requires "]}," Fog AWS AutoScaling Group disable_metrics_collection":{"type":"method","name":"disable_metrics_collection","children":[],"call":[" reload "," service disable_metrics_collection "," id "," service "," requires "]}," Fog AWS AutoScaling Group configuration":{"type":"method","name":"configuration","children":[],"call":[" service configurations get "," launch_configuration_name "," service configurations "," service "," requires "]}," Fog AWS AutoScaling Group activities":{"type":"method","name":"activities","children":[],"call":["Fog AWS AutoScaling Activities  new "," service ","next_token nil? ","result [] "," service describe_scaling_activities body [] "," service describe_scaling_activities body "," service describe_scaling_activities "," id "," loop "," requires ","result []  nil? "," service describe_scaling_activities body []  [] "," service describe_scaling_Fog AWS AutoScaling Activities  new  body [] "," service describe_scaling_Fog AWS AutoScaling Activities  new  body "," service describe_scaling_Fog AWS AutoScaling Activities  new  "]}," Fog AWS AutoScaling Group initialize":{"type":"method","name":"initialize","children":[],"call":[" termination_policies= "," tags= "," suspended_processes= "," min_size= "," max_size= "," load_balancer_names= "," health_check_type= "," health_check_grace_period= "," enabled_metrics= "," desired_capacity= "," default_cooldown= "," instances= "," target_group_arns= "]}," Fog AWS AutoScaling Configurations get":{"type":"method","name":"get","children":[],"call":[" new ","data nil? "," service describe_launch_configurations body [] [] first "," service describe_launch_configurations body [] [] "," service describe_launch_configurations body [] "," service describe_launch_configurations body "," service describe_launch_configurations "," service "," service describe_launch_configurations body [] [] first  nil? "]}," Fog AWS AutoScaling Configurations all":{"type":"method","name":"all","children":[],"call":[" load ","next_token nil? ","result [] "," service describe_launch_configurations body [] "," service describe_launch_configurations body "," service describe_launch_configurations "," service "," loop ","result []  nil? "," service describe_launch_configurations body []  [] "]}," Fog AWS AutoScaling Configurations initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Fog AWS AutoScaling Configuration destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_launch_configuration "," id "," service "," requires "]}," Fog AWS AutoScaling Configuration reload":{"type":"method","name":"reload","children":[],"call":[]}," Fog AWS AutoScaling Configuration save":{"type":"method","name":"save","children":[],"call":[" reload "," service create_launch_configuration "," id "," instance_type "," image_id "," service ","value nil? ","options delete_if ","Hash  [] "," send "," class aliases map "," class aliases "," class "," requires ","Hash  []  delete_if "]}," Fog AWS AutoScaling Configuration ready?":{"type":"method","name":"ready?","children":[],"call":[]}," Fog AWS AutoScaling Configuration initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Fog AWS AutoScaling Activity save":{"type":"method","name":"save","children":[],"call":[" raise "]}," Fog AWS AutoScaling Activity group":{"type":"method","name":"group","children":[],"call":[" service groups get "," attributes [] "," attributes "," service groups "," service "]}," Fog AWS AutoScaling Activities get":{"type":"method","name":"get","children":[],"call":[" new ","data nil? "," service describe_scaling_activities body [] [] first "," service describe_scaling_activities body [] [] "," service describe_scaling_activities body [] "," service describe_scaling_activities body "," service describe_scaling_activities "," service "," service describe_scaling_activities body [] [] first  nil? "]}," Fog AWS AutoScaling Activities all":{"type":"method","name":"all","children":[],"call":[" load ","next_token nil? ","result [] "," service describe_scaling_activities body [] "," service describe_scaling_activities body "," service describe_scaling_activities ","filters merge "," service "," loop ","result []  nil? "," service describe_scaling_activities body []  [] "]}," Fog AWS AutoScaling Activities initialize":{"type":"method","name":"initialize","children":[],"call":[" filters= "," filters "]}," Fog AWS IAM Real _request":{"type":"method","name":"_request","children":[],"call":[" raise ","Fog AWS IAM Error  slurp ","match [] ","Fog AWS IAM  const_get slurp ","Fog AWS IAM  const_get ","Fog AWS IAM NotFound  slurp ","match empty? ","Fog AWS Errors  match_error ","@connection request ","Fog AWS Errors  match_error  [] ","Fog AWS Errors  match_error  empty? ","Fog AWS Errors  Fog AWS Errors  match_error _error "]}," Fog AWS IAM Real request":{"type":"method","name":"request","children":[],"call":[" _request ","@instrumentor instrument ","Fog AWS  signed_params_v4 ","params delete "," refresh_credentials_if_expired "]}," Fog AWS IAM Real setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":["Fog AWS SignatureV4  new ","options [] "]}," Fog AWS IAM Real reload":{"type":"method","name":"reload","children":[],"call":["@connection reset "]}," Fog AWS IAM Real initialize":{"type":"method","name":"initialize","children":[],"call":[" setup_credentials ","Fog XML Connection  new ","options [] "]}," Fog AWS IAM Mock setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":["options [] ","existing_user [] ","key [] == ","key [] ","user [] find ","user [] ","d [] find ","d [] "," class data find "," class data "," class "]}," Fog AWS IAM Mock reset_data":{"type":"method","name":"reset_data","children":[],"call":[" class data delete "," class data "," class "," current_user "]}," Fog AWS IAM Mock data":{"type":"method","name":"data","children":[],"call":[" class data [] "," class data "," class "]}," Fog AWS IAM Mock initialize":{"type":"method","name":"initialize","children":[],"call":[" setup_credentials ","Time  now + ","Time  now ","options [] "]}," Fog AWS IAM Mock server_certificate_id":{"type":"method","name":"server_certificate_id","children":[],"call":[]}," Fog AWS IAM Mock reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog AWS Glacier Real _request":{"type":"method","name":"_request","children":[],"call":["response body= ","Fog JSON  decode ","response body ","response body size > ","response body size ","response headers [] == ","response headers [] ","response headers ","@connection request ","@connection request  body= ","@connection request  body ","@connection request  body size > ","@connection request  body size ","@connection request  headers [] == ","@connection request  headers [] ","@connection request  headers "]}," Fog AWS Glacier Real request":{"type":"method","name":"request","children":[],"call":[" _request ","@instrumentor instrument ","params [] []= ","@signer sign ","params [] ","date to_iso8601_basic ","date to_date_header ","Fog Time  now "," refresh_credentials_if_expired ","Fog Time  now  to_iso8601_basic ","Fog Time  now  to_Fog Time  now _header "]}," Fog AWS Glacier Real setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":["Fog AWS SignatureV4  new ","options [] "]}," Fog AWS Glacier Real initialize":{"type":"method","name":"initialize","children":[],"call":["Fog XML Connection  new ","options [] "," setup_credentials "]}," Fog AWS Glacier Mock initialize":{"type":"method","name":"initialize","children":[],"call":["Fog Mock  not_implemented "]}," Fog AWS Glacier TreeHash digest":{"type":"method","name":"digest","children":[],"call":[" reduce_digests "," reduce_digest_stack "]}," Fog AWS Glacier TreeHash hexdigest":{"type":"method","name":"hexdigest","children":[],"call":[" digest unpack first "," digest unpack "," digest "]}," Fog AWS Glacier TreeHash digest_for_part":{"type":"method","name":"digest_for_part","children":[],"call":[" reduce_digests ","body force_encoding ","body respond_to? ","Digest SHA256  digest ","body slice ","chunk_index * ","chunk_count times map ","chunk_count times ","body encoding ","body byteslice ","(send\n  (send\n    (send\n      (lvar :body) :bytesize) :/\n    (const nil :MEGABYTE)) :+\n  (begin\n    (if\n      (send\n        (send\n          (send\n            (lvar :body) :bytesize) :%\n          (const nil :MEGABYTE)) :>\n        (int 0))\n      (int 1)\n      (int 0)))) max ","body bytesize / + ","body bytesize % > ","body bytesize % ","body bytesize ","body bytesize / ","OpenSSL Digest SHA256  digest "," reduce_digest_stack ","@last_chunk_hash digest ","@last_chunk_hash update ","body send ","start_offset + ","whole_chunk_count * ","Digest SHA256  new ","whole_chunk_count == ","rest_size > ","body_size - - ","body_size - "," update_digest_stack ","whole_chunk_count times each ","whole_chunk_count times ","(send\n  (lvar :body_size) :-\n  (lvar :start_offset)) / ","body_size > ","MEGABYTE  - ","@last_chunk_length != "," prepare_body_for_slice ","(send\n  (send\n    (send\n      (lvar :body) :bytesize) :/\n    (const nil :MEGABYTE)) :+\n  (begin\n    (if\n      (send\n        (send\n          (send\n            (lvar :body) :bytesize) :%\n          (const nil :MEGABYTE)) :>\n        (int 0))\n      (int 1)\n      (int 0)))) max  times map ","(send\n  (send\n    (send\n      (lvar :body) :bytesize) :/\n    (const nil :MEGABYTE)) :+\n  (begin\n    (if\n      (send\n        (send\n          (send\n            (lvar :body) :bytesize) :%\n          (const nil :MEGABYTE)) :>\n        (int 0))\n      (int 1)\n      (int 0)))) max  times ","@last_chunk_@last_chunk_hash digest  digest ","@last_chunk_Digest SHA256  digest  digest ","Digest SHA256  new  digest ","@last_chunk_@last_chunk_hash digest  update ","@last_chunk_Digest SHA256  digest  update ","Digest SHA256  new  update ","MEGABYTE  -  + ","whole_(send\n  (send\n    (send\n      (lvar :body) :bytesize) :/\n    (const nil :MEGABYTE)) :+\n  (begin\n    (if\n      (send\n        (send\n          (send\n            (lvar :body) :bytesize) :%\n          (const nil :MEGABYTE)) :>\n        (int 0))\n      (int 1)\n      (int 0)))) max  * ","(send\n  (lvar :body_size) :-\n  (lvar :start_offset)) /  * ","whole_(send\n  (send\n    (send\n      (lvar :body) :bytesize) :/\n    (const nil :MEGABYTE)) :+\n  (begin\n    (if\n      (send\n        (send\n          (send\n            (lvar :body) :bytesize) :%\n          (const nil :MEGABYTE)) :>\n        (int 0))\n      (int 1)\n      (int 0)))) max  == ","(send\n  (lvar :body_size) :-\n  (lvar :start_offset)) /  == ","body_size - -  > ","body bytesize  - - ","body bytesize  - ","whole_(send\n  (send\n    (send\n      (lvar :body) :bytesize) :/\n    (const nil :MEGABYTE)) :+\n  (begin\n    (if\n      (send\n        (send\n          (send\n            (lvar :body) :bytesize) :%\n          (const nil :MEGABYTE)) :>\n        (int 0))\n      (int 1)\n      (int 0)))) max  times each ","(send\n  (lvar :body_size) :-\n  (lvar :start_offset)) /  times each ","whole_(send\n  (send\n    (send\n      (lvar :body) :bytesize) :/\n    (const nil :MEGABYTE)) :+\n  (begin\n    (if\n      (send\n        (send\n          (send\n            (lvar :body) :bytesize) :%\n          (const nil :MEGABYTE)) :>\n        (int 0))\n      (int 1)\n      (int 0)))) max  times ","(send\n  (lvar :body_size) :-\n  (lvar :start_offset)) /  times ","(send\n  (lvar :body_size) :-\n  (lvar :MEGABYTE  - )) / ","(send\n  (lvar :body bytesize ) :-\n  (lvar :start_offset)) / ","body bytesize  > "]}," Fog AWS Glacier TreeHash add_part":{"type":"method","name":"add_part","children":[],"call":["part unpack first ","part unpack ","@digests << "," digest_for_part "," digest_for_part  unpack first "," digest_for_part  unpack "," digest_for_ digest_for_part  "]}," Fog AWS Glacier TreeHash initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Fog AWS Glacier TreeHash reduce_digests":{"type":"method","name":"reduce_digests","children":[],"call":["digests first ","pair first ","Digest SHA256  digest ","pair [] + ","pair [] ","pair length == ","pair length ","digests each_slice map ","digests each_slice ","digests length > ","digests length ","OpenSSL Digest SHA256  digest "]}," Fog AWS EMR Real _request":{"type":"method","name":"_request","children":[],"call":["@connection request "]}," Fog AWS EMR Real request":{"type":"method","name":"request","children":[],"call":[" _request ","@instrumentor instrument ","Fog AWS  signed_params_v4 ","params delete "," refresh_credentials_if_expired "]}," Fog AWS EMR Real setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":["Fog AWS SignatureV4  new ","options [] "]}," Fog AWS EMR Real reload":{"type":"method","name":"reload","children":[],"call":["@connection reset "]}," Fog AWS EMR Real initialize":{"type":"method","name":"initialize","children":[],"call":[" setup_credentials ","options [] ","Fog XML Connection  new "]}," Fog AWS EMR Mock initialize":{"type":"method","name":"initialize","children":[],"call":["Fog Mock  not_implemented "]}," Fog AWS ELB Real _request":{"type":"method","name":"_request","children":[],"call":[" raise ","Fog AWS ELB Error  slurp ","match [] ","Fog AWS ELB ValidationError  slurp ","Fog AWS ELB TooManyPolicies  slurp ","Fog AWS ELB Throttled  slurp ","Fog AWS ELB PolicyTypeNotFound  slurp ","Fog AWS ELB PolicyNotFound  slurp ","Fog AWS ELB NotFound  slurp ","Fog AWS ELB InvalidConfigurationRequest  slurp ","Fog AWS ELB InvalidInstance  slurp ","Fog AWS ELB DuplicatePolicyName  slurp ","Fog AWS ELB IdentifierTaken  slurp ","Fog AWS IAM NotFound  slurp ","match empty? ","Fog AWS Errors  match_error ","@connection request ","Fog AWS Errors  match_error  [] ","Fog AWS Errors  match_error  empty? ","Fog AWS Errors  Fog AWS Errors  match_error _error "]}," Fog AWS ELB Real request":{"type":"method","name":"request","children":[],"call":[" _request ","@instrumentor instrument ","Fog AWS  signed_params_v4 ","params delete "," refresh_credentials_if_expired "]}," Fog AWS ELB Real setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":["Fog AWS SignatureV4  new ","options [] "]}," Fog AWS ELB Real reload":{"type":"method","name":"reload","children":[],"call":["@connection reset "]}," Fog AWS ELB Real initialize":{"type":"method","name":"initialize","children":[],"call":[" setup_credentials ","Fog XML Connection  new ","options [] "]}," Fog AWS ELB Mock reset_data":{"type":"method","name":"reset_data","children":[],"call":[" class data [] delete "," class data [] "," class data "," class "]}," Fog AWS ELB Mock data":{"type":"method","name":"data","children":[],"call":[" class data [] [] "," class data [] "," class data "," class "]}," Fog AWS ELB Mock setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":["Fog AWS SignatureV4  new ","options [] "]}," Fog AWS ELB Mock initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","@region inspect ","(str \"ap-northeast-1\") include? "," setup_credentials ","options [] ","Fog AWS  validate_region! "]}," Fog AWS ELB Mock reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog AWS ELB Mock dns_name":{"type":"method","name":"dns_name","children":[],"call":[]}," Fog AWS Elasticache Mock create_cache_nodes":{"type":"method","name":"create_cache_nodes","children":[],"call":["Time  now utc to_s ","Time  now utc ","Time  now ","%04d % ","(irange\n  (int 1)\n  (lvar :num_nodes)) map "]}," Fog AWS Elasticache Mock setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":["options [] "]}," Fog AWS Elasticache Mock reset_data":{"type":"method","name":"reset_data","children":[],"call":[" region_data delete "," region_data "]}," Fog AWS Elasticache Mock data":{"type":"method","name":"data","children":[],"call":[" region_data [] "," region_data "]}," Fog AWS Elasticache Mock region_data":{"type":"method","name":"region_data","children":[],"call":[" class data [] "," class data "," class "]}," Fog AWS Elasticache Mock initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","@region inspect ","(str \"ap-northeast-1\") include? ","options [] "," setup_credentials ","Time  now + ","Time  now ","(str \"ap-south-1\") include? "]}," Fog AWS Elasticache Mock reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog AWS Elasticache Real _request":{"type":"method","name":"_request","children":[],"call":[" raise ","Fog AWS Elasticache Error  slurp ","match [] ","Fog AWS Elasticache InvalidInstance  slurp ","Fog AWS Elasticache IdentifierTaken  slurp ","Fog AWS Elasticache NotFound  slurp ","match empty? ","Fog AWS Errors  match_error ","@connection request ","Fog AWS Errors  match_error  [] ","Fog AWS Errors  match_error  empty? ","Fog AWS Errors  Fog AWS Errors  match_error _error "]}," Fog AWS Elasticache Real request":{"type":"method","name":"request","children":[],"call":[" _request ","@instrumentor instrument ","Fog AWS  signed_params_v4 ","params delete "," refresh_credentials_if_expired "]}," Fog AWS Elasticache Real setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":["Fog AWS SignatureV4  new ","options [] "]}," Fog AWS Elasticache Real reload":{"type":"method","name":"reload","children":[],"call":["@connection reset "]}," Fog AWS Elasticache Real initialize":{"type":"method","name":"initialize","children":[],"call":[" setup_credentials ","Fog XML Connection  new ","options [] "]}," Fog AWS DynamoDB Real _request":{"type":"method","name":"_request","children":[],"call":["response body= ","Fog JSON  decode ","response body ","response body empty? ","@connection request ","@connection request  body= ","@connection request  body ","@connection request  body empty? "]}," Fog AWS DynamoDB Real request":{"type":"method","name":"request","children":[],"call":[" _request ","@instrumentor instrument ","params [] []= ","@signer sign ","params [] ","params []= ","(pair\n  (str \"Content-Type\")\n  (str \"application/x-amz-json-1.0\")) merge! ","date to_iso8601_basic ","Fog Time  now ","params merge! "," refresh_credentials_if_expired ","Fog Time  now  to_iso8601_basic "]}," Fog AWS DynamoDB Real reload":{"type":"method","name":"reload","children":[],"call":["@connection reset "]}," Fog AWS DynamoDB Real setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":["Fog AWS SignatureV4  new ","options [] "]}," Fog AWS DynamoDB Real initialize":{"type":"method","name":"initialize","children":[],"call":["Fog XML Connection  new ","options [] "," setup_credentials "]}," Fog AWS DynamoDB Mock setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":["options [] "]}," Fog AWS DynamoDB Mock reset_data":{"type":"method","name":"reset_data","children":[],"call":[" class data delete "," class data "," class "]}," Fog AWS DynamoDB Mock data":{"type":"method","name":"data","children":[],"call":[" class data [] "," class data "," class "]}," Fog AWS DynamoDB Mock initialize":{"type":"method","name":"initialize","children":[],"call":[" setup_credentials ","options [] "]}," Fog AWS DynamoDB Mock reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog DNS AWS Real signature":{"type":"method","name":"signature","children":[],"call":["Base64  encode64 chomp! ","Base64  encode64 ","@hmac sign ","params [] [] ","params [] "]}," Fog DNS AWS Real _request":{"type":"method","name":"_request","children":[],"call":["@connection request ","Fog DNS AWS Error  slurp ","match [] ","Fog DNS AWS NotFound  slurp "," raise ","match empty? ","Fog AWS Errors  match_error ","Fog AWS Errors  match_error  [] ","Fog AWS Errors  match_error  empty? ","Fog AWS Errors  Fog AWS Errors  match_error _error "]}," Fog DNS AWS Real request":{"type":"method","name":"request","children":[],"call":[" _request ","@instrumentor instrument ","params []= ","params [] ","params [] []= "," signature ","Fog Time  now to_date_header ","Fog Time  now "," refresh_credentials_if_expired "]}," Fog DNS AWS Real setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":["Fog HMAC  new ","options [] "]}," Fog DNS AWS Real reload":{"type":"method","name":"reload","children":[],"call":["@connection reset "]}," Fog DNS AWS Real initialize":{"type":"method","name":"initialize","children":[],"call":["Fog XML Connection  new ","options [] ","options fetch "," setup_credentials "]}," Fog DNS AWS Mock setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":["options [] "]}," Fog DNS AWS Mock signature":{"type":"method","name":"signature","children":[],"call":[]}," Fog DNS AWS Mock reset_data":{"type":"method","name":"reset_data","children":[],"call":[" class data [] delete "," class data [] "," class data "," class "]}," Fog DNS AWS Mock data":{"type":"method","name":"data","children":[],"call":[" class data [] [] "," class data [] "," class data "," class "]}," Fog DNS AWS Mock initialize":{"type":"method","name":"initialize","children":[],"call":["options [] "," setup_credentials "]}," Fog DNS AWS Mock reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog AWS DataPipeline Real _request":{"type":"method","name":"_request","children":[],"call":["@connection request "," raise ","Fog AWS DataPipeline NotFound  slurp ","match [] ","(str \"PipelineNotFoundException\") include? ","match empty? ","Fog AWS Errors  match_error ","response body= ","Fog JSON  decode ","response body ","response body empty? ","Fog AWS Errors  match_error  [] ","Fog AWS Errors  match_error  empty? ","Fog AWS Errors  Fog AWS Errors  match_error _error ","@connection request  body= ","@connection request  body ","@connection request  body empty? "]}," Fog AWS DataPipeline Real request":{"type":"method","name":"request","children":[],"call":[" _request ","@instrumentor instrument ","params [] []= ","@signer sign ","params [] ","params []= ","(pair\n  (str \"Date\")\n  (send\n    (lvar :date) :to_date_header)) merge! ","params [] bytesize to_s ","params [] bytesize ","date to_iso8601_basic ","date to_date_header ","Fog Time  now ","params merge! "," refresh_credentials_if_expired ","(pair\n  (str \"Date\")\n  (send\n    (lvar :Fog Time  now ) :to_Fog Time  now _header)) merge! ","Fog Time  now  to_iso8601_basic ","Fog Time  now  to_Fog Time  now _header "]}," Fog AWS DataPipeline Real setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":["Fog AWS SignatureV4  new ","options [] "]}," Fog AWS DataPipeline Real reload":{"type":"method","name":"reload","children":[],"call":["@connection reset "]}," Fog AWS DataPipeline Real owner_id":{"type":"method","name":"owner_id","children":[],"call":[" security_groups get owner_id "," security_groups get "," security_groups "]}," Fog AWS DataPipeline Real initialize":{"type":"method","name":"initialize","children":[],"call":[" setup_credentials ","Fog XML Connection  new ","options [] "]}," Fog AWS DataPipeline Mock initialize":{"type":"method","name":"initialize","children":[],"call":["Fog Mock  not_implemented ","options [] "]}," Fog AWS CredentialFetcher ConnectionMethods refresh_credentials":{"type":"method","name":"refresh_credentials","children":[],"call":[" setup_credentials ","new_credentials any? "," service fetch_credentials "," service "," service fetch_credentials  any? "]}," Fog AWS CredentialFetcher ConnectionMethods credentials_expired?":{"type":"method","name":"credentials_expired?","children":[],"call":["Fog Time  now > ","@aws_credentials_expire_at - ","Fog Time  now ","@aws_credentials_expire_at ! "," credentials_refresh_threshold "]}," Fog AWS CredentialFetcher ConnectionMethods refresh_credentials_if_expired":{"type":"method","name":"refresh_credentials_if_expired","children":[],"call":[" refresh_credentials "," credentials_expired? "]}," Fog AWS CredentialFetcher ServiceMethods fetch_credentials":{"type":"method","name":"fetch_credentials","children":[],"call":["Fog Logger  warning ","e message ","credentials []= ","Time  xmlschema ","session [] ","Fog JSON  decode ","connection get body ","connection get ","INSTANCE_METADATA_PATH  + ","Excon  new ","options [] ","az_data [] ","Fog Compute AWS Mock  data [] ","Fog Compute AWS Mock  data ","Fog  mocking? ","ENV  [] ","connection get body [] ","region nil? "," fetch_credentials_token_header ","document css children text ","document css children ","document css ","Nokogiri  XML ","File  read ","ENV  fetch ","SecureRandom  hex ","Fog AWS Compute Mock  data [] ","Fog AWS Compute Mock  data ","ENV  [] == ","connection put body ","connection put ","Fog JSON  decode  [] ","connection get body  [] ","az_data []  nil? ","options []  nil? ","connection get body []  nil? "," fetch_credentials_ fetch_credentials_token_header  "," fetch_credentials_connection put body _header ","Nokogiri  XML  css children text ","Nokogiri  XML  css children ","Nokogiri  XML  css "]}," Fog AWS Errors match_error":{"type":"method","name":"match_error","children":[],"call":[]}," Fog AWS parse_security_group_options":{"type":"method","name":"parse_security_group_options","children":[],"call":[]}," Fog AWS Mock rds_address":{"type":"method","name":"rds_address","children":[],"call":[]}," Fog AWS Mock key_id":{"type":"method","name":"key_id","children":[],"call":[]}," Fog AWS Mock nameservers":{"type":"method","name":"nameservers","children":[],"call":[]}," Fog AWS Mock change_id":{"type":"method","name":"change_id","children":[],"call":[]}," Fog AWS Mock zone_id":{"type":"method","name":"zone_id","children":[],"call":[]}," Fog AWS Mock subnet_id":{"type":"method","name":"subnet_id","children":[],"call":[]}," Fog AWS Mock vpc_id":{"type":"method","name":"vpc_id","children":[],"call":[]}," Fog AWS Mock dhcp_options_id":{"type":"method","name":"dhcp_options_id","children":[],"call":[]}," Fog AWS Mock internet_gateway_id":{"type":"method","name":"internet_gateway_id","children":[],"call":[]}," Fog AWS Mock network_interface_id":{"type":"method","name":"network_interface_id","children":[],"call":[]}," Fog AWS Mock network_acl_association_id":{"type":"method","name":"network_acl_association_id","children":[],"call":[]}," Fog AWS Mock network_acl_id":{"type":"method","name":"network_acl_id","children":[],"call":[]}," Fog AWS Mock security_group_id":{"type":"method","name":"security_group_id","children":[],"call":[]}," Fog AWS Mock volume_id":{"type":"method","name":"volume_id","children":[],"call":[]}," Fog AWS Mock snapshot_id":{"type":"method","name":"snapshot_id","children":[],"call":[]}," Fog AWS Mock reservation_id":{"type":"method","name":"reservation_id","children":[],"call":[]}," Fog AWS Mock request_id":{"type":"method","name":"request_id","children":[],"call":[]}," Fog AWS Mock ramdisk_id":{"type":"method","name":"ramdisk_id","children":[],"call":[]}," Fog AWS Mock owner_id":{"type":"method","name":"owner_id","children":[],"call":[]}," Fog AWS Mock key_material":{"type":"method","name":"key_material","children":[],"call":[]}," Fog AWS Mock kernel_id":{"type":"method","name":"kernel_id","children":[],"call":[]}," Fog AWS Mock private_ip_address":{"type":"method","name":"private_ip_address","children":[],"call":[]}," Fog AWS Mock ip_address":{"type":"method","name":"ip_address","children":[],"call":[]}," Fog AWS Mock instance_id":{"type":"method","name":"instance_id","children":[],"call":[]}," Fog AWS Mock key_fingerprint":{"type":"method","name":"key_fingerprint","children":[],"call":[]}," Fog AWS Mock image_id":{"type":"method","name":"image_id","children":[],"call":[]}," Fog AWS Mock image":{"type":"method","name":"image","children":[],"call":[]}," Fog AWS Mock private_dns_name_for":{"type":"method","name":"private_dns_name_for","children":[],"call":[]}," Fog AWS Mock dns_name_for":{"type":"method","name":"dns_name_for","children":[],"call":[]}," Fog AWS Mock console_output":{"type":"method","name":"console_output","children":[],"call":[]}," Fog AWS Mock box_usage":{"type":"method","name":"box_usage","children":[],"call":[]}," Fog AWS Mock availability_zone":{"type":"method","name":"availability_zone","children":[],"call":[]}," Fog AWS Mock arn":{"type":"method","name":"arn","children":[],"call":[]}," Fog AWS signed_params":{"type":"method","name":"signed_params","children":[],"call":[]}," Fog AWS signed_params_v4":{"type":"method","name":"signed_params_v4","children":[],"call":[]}," Fog AWS escape":{"type":"method","name":"escape","children":[],"call":[]}," Fog AWS indexed_filters":{"type":"method","name":"indexed_filters","children":[],"call":[]}," Fog AWS indexed_request_param":{"type":"method","name":"indexed_request_param","children":[],"call":[]}," Fog AWS serialize_keys":{"type":"method","name":"serialize_keys","children":[],"call":[]}," Fog AWS indexed_param":{"type":"method","name":"indexed_param","children":[],"call":[]}," Fog Compute AWS Real _request":{"type":"method","name":"_request","children":[],"call":[" raise ","Fog Compute AWS Error  slurp ","match [] ","Fog Compute AWS NotFound  slurp ","match empty? ","Fog AWS Errors  match_error ","@connection request ","Fog Compute AWS RequestLimitExceeded  slurp "," sleep ","(send\n  (send\n    (float 2.0) :**\n    (begin\n      (send\n        (float 1.0) :+\n        (lvar :retries)))) :*\n  (int 100)) / ","2.0 ** * ","2.0 ** ","1.0 + ","retries < ","Time  now - >= ","Time  now - ","Time  now ","Fog Logger  warning ","(send\n  (begin\n    (send\n      (send\n        (float 2.0) :**\n        (begin\n          (send\n            (float 1.0) :+\n            (lvar :retries)))) :*\n      (int 100))) :+\n  (lvar :jitter)) / ","(send\n  (send\n    (float 2.0) :**\n    (begin\n      (send\n        (float 1.0) :+\n        (lvar :retries)))) :*\n  (int 100)) + "," rand ","(send\n  (begin\n    (send\n      (send\n        (float 2.0) :**\n        (begin\n          (send\n            (float 1.0) :+\n            (lvar :retries)))) :*\n      (int 100))) :/\n  (float 1000.0)) + "," rand * * "," rand * ","Fog AWS Errors  match_error  [] ","Fog AWS Errors  match_error  empty? ","Fog AWS Errors  Fog AWS Errors  match_error _error ","(send\n  (begin\n    (send\n      (send\n        (float 2.0) :**\n        (begin\n          (send\n            (float 1.0) :+\n            (lvar :retries)))) :*\n      (int 100))) :+\n  (lvar : rand )) / ","(send\n  (begin\n    (send\n      (send\n        (float 2.0) :**\n        (begin\n          (send\n            (float 1.0) :+\n            (lvar :retries)))) :*\n      (int 100))) :+\n  (lvar : rand * * )) / "]}," Fog Compute AWS Real request":{"type":"method","name":"request","children":[],"call":[" _request ","@instrumentor instrument ","Fog AWS  signed_params_v4 ","params delete "," refresh_credentials_if_expired "]}," Fog Compute AWS Real setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":["Fog AWS SignatureV4  new ","options [] "]}," Fog Compute AWS Real reload":{"type":"method","name":"reload","children":[],"call":["@connection reset "]}," Fog Compute AWS Real initialize":{"type":"method","name":"initialize","children":[],"call":["Fog XML Connection  new "," validate_aws_region ","options [] ","endpoint scheme ","endpoint port ","endpoint path "," raise ","InvalidURIError  new ","endpoint host ","URI  parse "," setup_credentials ","Fog AWS  validate_region! ","options fetch ","URI  parse  scheme ","URI  parse  port ","URI  parse  path ","URI  parse  host "]}," Fog Compute AWS Mock setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":["options [] "]}," Fog Compute AWS Mock apply_tag_filters":{"type":"method","name":"apply_tag_filters","children":[],"call":["tag_value == ","tag_set_fetcher [] [] ","tag_set_fetcher [] ","resources select ","tag_filters []= ","filters delete ","key gsub ","filters keys each ","filters keys ","tag_set_fetcher [] values include? ","tag_set_fetcher [] values ","filters key? ","tag_set_fetcher [] key? "," data [] [] ","resource [] "," data [] "," data "," lambda ","(lvar :tag_value) flatten include? ","(lvar :tag_value) flatten ","tag_filters delete  == ","tag_set_fetcher [] filters delete s include? ","tag_set_fetcher [] filters delete s ","(lvar :tag_filters delete ) flatten include? ","(lvar :tag_filters delete ) flatten "]}," Fog Compute AWS Mock tagged_resources":{"type":"method","name":"tagged_resources","children":[],"call":[" raise ","Fog Service NotFound  new "," data [] [] "," data [] "," data ","(send\n  (send\n    (send\n      (self) :data) :[]\n    (sym :vpcs)) :select) empty? ","v [] == ","v [] "," data [] select "," visible_images has_key? "," visible_images ","MOCKED_TAG_TYPES  [] ","MOCKED_TAG_TYPES  has_key? ","match captures first ","match captures ","resource_id match "," Array map "," Array ","r [] == ","r [] "," data [] detect ","resource_id match  captures first ","resource_id match  captures ","resource_match captures first  match ","resource_id resource_id match  "]}," Fog Compute AWS Mock set_supported_platforms":{"type":"method","name":"set_supported_platforms","children":[],"call":["(send\n  (send\n    (send\n      (self) :data) :[]\n    (sym :account_attributes)) :find) []= ","h [] == ","h [] "," data [] find "," data [] "," data "]}," Fog Compute AWS Mock disable_ec2_classic":{"type":"method","name":"disable_ec2_classic","children":[],"call":[" set_supported_platforms "]}," Fog Compute AWS Mock enable_ec2_classic":{"type":"method","name":"enable_ec2_classic","children":[],"call":[" set_supported_platforms "]}," Fog Compute AWS Mock supported_platforms":{"type":"method","name":"supported_platforms","children":[],"call":["(send\n  (send\n    (send\n      (send nil :describe_account_attributes) :body) :[]\n    (str \"accountAttributeSet\")) :find) [] ","h [] == ","h [] "," describe_account_attributes body [] find "," describe_account_attributes body [] "," describe_account_attributes body "," describe_account_attributes "]}," Fog Compute AWS Mock visible_images":{"type":"method","name":"visible_images","children":[],"call":["images update ","data [] [] ","data [] ","list [] include? "," data [] "," data ","list [] ","data [] each "," region_data each "," region_data ","h update ","image [] "," data [] values reduce "," data [] values "]}," Fog Compute AWS Mock reset_data":{"type":"method","name":"reset_data","children":[],"call":[" region_data delete "," region_data "]}," Fog Compute AWS Mock data":{"type":"method","name":"data","children":[],"call":[" region_data [] "," region_data "]}," Fog Compute AWS Mock region_data":{"type":"method","name":"region_data","children":[],"call":[" class data [] "," class data "," class "]}," Fog Compute AWS Mock initialize":{"type":"method","name":"initialize","children":[],"call":[" validate_aws_region ","options [] ","endpoint scheme ","endpoint port ","endpoint path "," raise ","InvalidURIError  new ","endpoint host ","URI  parse "," setup_credentials ","Time  now + ","Time  now ","Fog AWS  validate_region! ","URI  parse  scheme ","URI  parse  port ","URI  parse  path ","URI  parse  host "]}," Fog Compute AWS Mock reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Compute AWS Real supported_platforms":{"type":"method","name":"supported_platforms","children":[],"call":["(send\n  (send\n    (send\n      (send nil :describe_account_attributes) :body) :[]\n    (str \"accountAttributeSet\")) :find) [] ","h [] == ","h [] "," describe_account_attributes body [] find "," describe_account_attributes body [] "," describe_account_attributes body "," describe_account_attributes "]}," Fog Compute AWS Real modify_image_attributes":{"type":"method","name":"modify_image_attributes","children":[],"call":[" modify_image_attribute ","Fog Logger  deprecation "," caller first "," caller "]}," Fog AWS CloudWatch Real _request":{"type":"method","name":"_request","children":[],"call":["@connection request "]}," Fog AWS CloudWatch Real request":{"type":"method","name":"request","children":[],"call":[" _request ","@instrumentor instrument ","AWS  signed_params_v4 ","params delete "," refresh_credentials_if_expired "]}," Fog AWS CloudWatch Real setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":["Fog AWS SignatureV4  new ","options [] "]}," Fog AWS CloudWatch Real reload":{"type":"method","name":"reload","children":[],"call":["@connection reset "]}," Fog AWS CloudWatch Real initialize":{"type":"method","name":"initialize","children":[],"call":[" setup_credentials ","Fog XML Connection  new ","options [] "]}," Fog AWS CloudWatch Mock reset_data":{"type":"method","name":"reset_data","children":[],"call":[" class data [] delete "," class data [] "," class data "," class "]}," Fog AWS CloudWatch Mock data":{"type":"method","name":"data","children":[],"call":[" class data [] [] "," class data [] "," class data "," class "]}," Fog AWS CloudWatch Mock initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","@region inspect ","(str \"ap-northeast-1\") include? ","options [] ","Fog AWS  validate_region! "]}," Fog AWS CloudWatch Mock reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog AWS CloudFormation Real _request":{"type":"method","name":"_request","children":[],"call":[" raise ","Fog AWS CloudFormation Error  slurp ","match [] ","Fog AWS CloudFormation NotFound  slurp ","match empty? ","Fog AWS Errors  match_error ","@connection request ","Fog AWS Errors  match_error  [] ","Fog AWS Errors  match_error  empty? ","Fog AWS Errors  Fog AWS Errors  match_error _error "]}," Fog AWS CloudFormation Real request":{"type":"method","name":"request","children":[],"call":[" _request ","@instrumentor instrument ","Fog AWS  signed_params_v4 ","params delete "," refresh_credentials_if_expired "]}," Fog AWS CloudFormation Real setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":["Fog AWS SignatureV4  new ","options [] "]}," Fog AWS CloudFormation Real reload":{"type":"method","name":"reload","children":[],"call":["@connection reset "]}," Fog AWS CloudFormation Real initialize":{"type":"method","name":"initialize","children":[],"call":[" setup_credentials ","Fog XML Connection  new ","options [] "]}," Fog AWS CloudFormation Mock initialize":{"type":"method","name":"initialize","children":[],"call":["Fog Mock  not_implemented "]}," Fog CDN AWS Real signature":{"type":"method","name":"signature","children":[],"call":["Base64  encode64 chomp! ","Base64  encode64 ","@hmac sign ","params [] [] ","params [] "]}," Fog CDN AWS Real _request":{"type":"method","name":"_request","children":[],"call":["@connection request "]}," Fog CDN AWS Real request":{"type":"method","name":"request","children":[],"call":[" _request ","@instrumentor instrument ","params []= ","params [] ","params [] []= "," signature ","Fog Time  now to_date_header ","Fog Time  now "," refresh_credentials_if_expired "]}," Fog CDN AWS Real setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":["Fog HMAC  new ","options [] "]}," Fog CDN AWS Real reload":{"type":"method","name":"reload","children":[],"call":["@connection reset "]}," Fog CDN AWS Real initialize":{"type":"method","name":"initialize","children":[],"call":["Fog XML Connection  new ","options [] ","options fetch "," setup_credentials "]}," Fog CDN AWS Mock raise_error":{"type":"method","name":"raise_error","children":[],"call":[]}," Fog CDN AWS Mock error":{"type":"method","name":"error","children":[],"call":[]}," Fog CDN AWS Mock random_id":{"type":"method","name":"random_id","children":[],"call":[]}," Fog CDN AWS Mock domain_name":{"type":"method","name":"domain_name","children":[],"call":[]}," Fog CDN AWS Mock generic_id":{"type":"method","name":"generic_id","children":[],"call":[]}," Fog CDN AWS Mock distribution_id":{"type":"method","name":"distribution_id","children":[],"call":[]}," Fog CDN AWS Mock setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":["options [] "]}," Fog CDN AWS Mock signature":{"type":"method","name":"signature","children":[],"call":[]}," Fog CDN AWS Mock reset_data":{"type":"method","name":"reset_data","children":[],"call":[" class data delete "," class data "," class "]}," Fog CDN AWS Mock data":{"type":"method","name":"data","children":[],"call":[" class data [] "," class data "," class "]}," Fog CDN AWS Mock initialize":{"type":"method","name":"initialize","children":[],"call":[" setup_credentials ","options [] "]}," Fog CDN AWS Mock reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog AWS ElasticBeanstalk Real _request":{"type":"method","name":"_request","children":[],"call":[" raise ","Fog AWS ElasticBeanstalk Error  slurp ","match [] ","Fog AWS ElasticBeanstalk InvalidParameterError  slurp ","match empty? ","Fog AWS Errors  match_error ","@connection request ","Fog AWS Errors  match_error  [] ","Fog AWS Errors  match_error  empty? ","Fog AWS Errors  Fog AWS Errors  match_error _error "]}," Fog AWS ElasticBeanstalk Real request":{"type":"method","name":"request","children":[],"call":[" _request ","@instrumentor instrument ","AWS  signed_params_v4 ","params delete "," refresh_credentials_if_expired "]}," Fog AWS ElasticBeanstalk Real setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":["Fog AWS SignatureV4  new ","options [] "]}," Fog AWS ElasticBeanstalk Real solution_stacks":{"type":"method","name":"solution_stacks","children":[],"call":[" list_available_solution_stacks body [] [] "," list_available_solution_stacks body [] "," list_available_solution_stacks body "," list_available_solution_stacks "]}," Fog AWS ElasticBeanstalk Real reload":{"type":"method","name":"reload","children":[],"call":["@connection reset "]}," Fog AWS ElasticBeanstalk Real initialize":{"type":"method","name":"initialize","children":[],"call":[" setup_credentials ","options [] ","Fog XML Connection  new "]}," Fog AWS ElasticBeanstalk Mock initialize":{"type":"method","name":"initialize","children":[],"call":["Fog Mock  not_implemented "]}," Fog AWS AutoScaling Mock setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":["options [] "]}," Fog AWS AutoScaling Mock reset_data":{"type":"method","name":"reset_data","children":[],"call":[" region_data delete "," region_data "]}," Fog AWS AutoScaling Mock data":{"type":"method","name":"data","children":[],"call":[" region_data [] "," region_data "]}," Fog AWS AutoScaling Mock region_data":{"type":"method","name":"region_data","children":[],"call":[" class data [] "," class data "," class "]}," Fog AWS AutoScaling Mock initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","@region inspect ","(str \"ap-northeast-1\") include? ","options [] "," setup_credentials ","Fog AWS  validate_region! "]}," Fog AWS AutoScaling Mock reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog AWS AutoScaling Real setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":["Fog AWS SignatureV4  new ","options [] "]}," Fog AWS AutoScaling Real _request":{"type":"method","name":"_request","children":[],"call":[" raise ","Fog AWS AutoScaling Error  slurp ","match [] ","Fog AWS AutoScaling ValidationError  slurp ","Fog AWS AutoScaling ResourceInUse  slurp ","Fog AWS AutoScaling IdentifierTaken  slurp ","match empty? ","Fog AWS Errors  match_error ","@connection request ","CGI  unescapeHTML ","Fog AWS Errors  match_error  [] ","Fog AWS Errors  match_error  empty? ","Fog AWS Errors  Fog AWS Errors  match_error _error "]}," Fog AWS AutoScaling Real request":{"type":"method","name":"request","children":[],"call":[" _request ","@instrumentor instrument ","AWS  signed_params_v4 ","params delete "," refresh_credentials_if_expired "]}," Fog AWS AutoScaling Real reload":{"type":"method","name":"reload","children":[],"call":["@connection reset "]}," Fog AWS AutoScaling Real initialize":{"type":"method","name":"initialize","children":[],"call":[" setup_credentials ","Fog XML Connection  new ","options [] "]}," Fog Compute AWS Mock enable_vpc_classic_link":{"type":"method","name":"enable_vpc_classic_link","children":[],"call":[" raise ","Fog Compute AWS NotFound  new ","vpc []= ","response body= ","Fog AWS Mock  request_id ","response status= ","v [] == ","v [] "," data [] find "," data [] "," data ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Compute AWS Real enable_vpc_classic_link":{"type":"method","name":"enable_vpc_classic_link","children":[],"call":[" request ","Fog Parsers Compute AWS Basic  new "]}," Fog Compute AWS Mock disable_vpc_classic_link":{"type":"method","name":"disable_vpc_classic_link","children":[],"call":[" raise ","Fog Compute AWS NotFound  new ","vpc []= ","response body= ","Fog AWS Mock  request_id ","response status= ","v [] == ","v [] "," data [] find "," data [] "," data ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Compute AWS Real disable_vpc_classic_link":{"type":"method","name":"disable_vpc_classic_link","children":[],"call":[" request ","Fog Parsers Compute AWS Basic  new "]}," Fog Compute AWS Mock detach_classic_link_vpc":{"type":"method","name":"detach_classic_link_vpc","children":[],"call":[" raise ","Fog Compute AWS NotFound  new ","vpc ! ","instance ! ","instance []= ","response body= ","Fog AWS Mock  request_id ","response status= "," data [] [] "," data [] "," data ","v [] == ","v [] "," data [] find ","Excon Response  new "," data [] []  ! "," data [] []  []= ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Compute AWS Real detach_classic_link_vpc":{"type":"method","name":"detach_classic_link_vpc","children":[],"call":[" request ","Fog Parsers Compute AWS Basic  new "]}," Fog Compute AWS Mock describe_vpc_classic_link":{"type":"method","name":"describe_vpc_classic_link","children":[],"call":["response body= ","Fog AWS Mock  request_id "," data [] [] ","vpc [] "," data [] "," data ","vpcs collect ","response status= "," apply_tag_filters ","options [] "," raise ","Fog Compute AWS NotFound  new ","v [] == ","v [] ","vpcs find ","vpc_ids collect ","Excon Response  new ","Excon Response  new  body= "," apply_tag_filters  collect "," data []  collect ","Excon Response  new  status= "," apply_tag_filters  find "," data []  find ","options []  collect "]}," Fog Compute AWS Real describe_vpc_classic_link":{"type":"method","name":"describe_vpc_classic_link","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeVpcClassicLink\")) merge ","Fog Parsers Compute AWS DescribeVpcClassicLink  new ","params merge! ","Fog AWS  indexed_filters ","options [] ","Fog AWS  indexed_param "]}," Fog Compute AWS Mock describe_classic_link_instances":{"type":"method","name":"describe_classic_link_instances","children":[],"call":["response body= ","Fog AWS Mock  request_id "," data [] [] ","instance [] "," data [] "," data ","group [] ","groups collect ","instance [] include? ","data [] "," data [] values select "," data [] values ","instances collect ","response status= ","options [] include? ","options [] ","instances select ","options [] [] ","instance [] == "," apply_tag_filters ","Excon Response  new ","Excon Response  new  body= "," apply_tag_filters  collect ","Excon Response  new  status= "," apply_tag_filters  select "]}," Fog Compute AWS Real describe_classic_link_instances":{"type":"method","name":"describe_classic_link_instances","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeClassicLinkInstances\")) merge ","Fog Parsers Compute AWS DescribeClassicLinkInstances  new ","params merge! ","Fog AWS  indexed_filters ","options [] ","Fog AWS  indexed_param ","params []= "]}," Fog Compute AWS Mock attach_classic_link_vpc":{"type":"method","name":"attach_classic_link_vpc","children":[],"call":[" raise ","Fog Compute AWS NotFound  new ","vpc ! ","instance ! ","instance []= ","response body= ","Fog AWS Mock  request_id ","response status= ","Fog Compute AWS Error  new ","instance [] ","instance [] [] != ","instance [] [] "," data [] [] "," data [] "," data ","v [] == ","v [] "," data [] find ","Excon Response  new "," data [] []  ! "," data [] []  []= ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  [] "," data [] []  [] [] != "," data [] []  [] [] "]}," Fog Compute AWS Real attach_classic_link_vpc":{"type":"method","name":"attach_classic_link_vpc","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"AttachClassicLinkVpc\")) merge ","Fog AWS  indexed_param ","Fog Parsers Compute AWS Basic  new "]}," Fog Parsers Compute AWS DescribeVpcClassicLink end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@response [] << ","@response [] ","@vpc []= ","@tag []= ","@vpc [] []= ","@tag [] ","@vpc [] "," value == "]}," Fog Parsers Compute AWS DescribeVpcClassicLink start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers Compute AWS DescribeVpcClassicLink reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Compute AWS DescribeClassicLinkInstances end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@response [] << ","@response [] ","@instance []= ","@group []= ","@instance [] << ","@instance [] ","@tag []= ","@instance [] []= ","@tag [] "]}," Fog Parsers Compute AWS DescribeClassicLinkInstances start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers Compute AWS DescribeClassicLinkInstances reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Storage AWS Mock signature_v2":{"type":"method","name":"signature_v2","children":[],"call":[]}," Fog Storage AWS Utils v2_signed_params_for_url":{"type":"method","name":"v2_signed_params_for_url","children":[],"call":["params [] []= ","params [] ","params []= ","(or\n  (send\n    (lvar :params) :[]\n    (sym :query))\n  (hash)) merge "," request_params "," signature_v2 "," request_params  [] []= "," request_params  [] "," request_params  []= ","(or\n  (send\n    (lvar : request_params ) :[]\n    (sym :query))\n  (hash)) merge "," request_ request_params  ","  signature_v2 _v2 "]}," Fog Storage AWS Utils v4_signed_params_for_url":{"type":"method","name":"v4_signed_params_for_url","children":[],"call":["params []= ","(or\n  (send\n    (lvar :params) :[]\n    (sym :query))\n  (hash)) merge ","params [] ","@signer signature_parameters ","params [] []= "," request_params ","now to_iso8601_basic ","expires - ","now to_i ","Fog Time  now ","params [] [] ","params fetch "," request_params  []= ","(or\n  (send\n    (lvar : request_params ) :[]\n    (sym :query))\n  (hash)) merge "," request_params  [] "," request_params  [] []= "," request_ request_params  ","Fog Time  now  to_iso8601_basic ","expires -  - ","Fog Time  now  to_i ","Fog Time  Fog Time  now  "," request_params  [] [] "," request_params  fetch "]}," Fog Storage AWS Utils validate_signature_version!":{"type":"method","name":"validate_signature_version!","children":[],"call":[" raise ","@signature_version == "]}," Fog Storage AWS Mock put_bucket_policy":{"type":"method","name":"put_bucket_policy","children":[],"call":[" raise ","Fog AWS IAM NotFound  new ","response status= ","response body= ","Fog AWS Mock  request_id ","Excon Response  new tap ","Excon Response  new ","bucket []= "," data [] [] "," data [] "," data "," data [] []  []= "]}," Fog Storage AWS Mock delete_bucket_policy":{"type":"method","name":"delete_bucket_policy","children":[],"call":[" raise ","Fog AWS IAM NotFound  new ","response status= ","response body= ","Fog AWS Mock  request_id ","Excon Response  new tap ","Excon Response  new ","bucket []= "," data [] [] "," data [] "," data ","Excon Errors  status_error "," response "," data [] []  []= "]}," Fog AWS IAM Mock delete_group_policy":{"type":"method","name":"delete_group_policy","children":[],"call":["response status= ","response body= ","Fog AWS Mock  request_id ","Excon Response  new tap ","Excon Response  new "," data [] [] [] delete "," data [] [] [] "," data [] [] "," data [] "," data "," raise ","Fog AWS IAM NotFound  new "," data [] [] [] key? ! "," data [] [] [] key? "," data [] key? ! "," data [] key? "]}," Fog AWS STS Mock assume_role_with_web_identity":{"type":"method","name":"assume_role_with_web_identity","children":[],"call":["response status= ","response body= ","Fog Mock  random_hex ","Fog AWS Mock  key_id ","Time  now + ","Time  now ","options [] ","role [] ","Excon Response  new tap ","Excon Response  new ","r [] == ","r [] ","options [] data [] values detect ","options [] data [] values ","options [] data [] ","options [] data "]}," Fog AWS STS Real assume_role_with_web_identity":{"type":"method","name":"assume_role_with_web_identity","children":[],"call":[" request_unsigned ","Fog Parsers AWS STS AssumeRoleWithWebIdentity  new ","options [] "]}," Fog AWS IAM Mock list_roles":{"type":"method","name":"list_roles","children":[],"call":["response status= ","response body= ","Fog AWS Mock  request_id ","data [] ","Fog JSON  encode ","data [] strip "," data [] map "," data [] "," data ","Excon Response  new tap ","Excon Response  new ","body merge! "," data [] []= ","Base64  encode64 ","UUID  uuid "," account_id ","data_set size > ","data_set size ","data_set slice! "," data [] [] "," raise ","Fog AWS IAM Error  new ","limit < ","limit > ","options [] ","Excon Response  new  status= ","Excon Response  new  body= ","data_set slice!  [] ","data_set slice!  [] strip "," data_set slice!  [] map "," data_set slice!  [] "," data_set slice!  "," data_set slice!  [] []= ","data_set slice! _set size > ","data_set slice! _set size ","data_set slice! _set slice! "," data_set slice!  [] [] ","options []  < ","options []  > "]}," Fog AWS IAM Mock get_role":{"type":"method","name":"get_role","children":[],"call":["response status= ","response body= ","Fog AWS Mock  request_id ","role [] strip ","role [] ","Fog JSON  encode ","Excon Response  new tap ","Excon Response  new "," raise ","Fog AWS IAM NotFound  new "," data [] [] "," data [] "," data "," data [] key? "," data [] []  [] strip "," data [] []  [] "]}," Fog AWS IAM Mock delete_role":{"type":"method","name":"delete_role","children":[],"call":[" raise ","Fog AWS IAM NotFound  new ","response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new tap ","Excon Response  new "," data [] delete "," data [] "," data "," data [] [] "]}," Fog AWS IAM Mock create_role":{"type":"method","name":"create_role","children":[],"call":["response status= ","response body= ","Fog AWS Mock  request_id "," data [] [] [] strip "," data [] [] [] "," data [] [] "," data [] "," data ","Fog JSON  encode ","Excon Response  new tap ","Excon Response  new "," data [] [] []= "," raise ","Fog AWS IAM EntityAlreadyExists  new "," data [] key? "]}," Fog AWS Federation Mock get_signin_token":{"type":"method","name":"get_signin_token","children":[],"call":["Fog Mock  random_base64 "]}," Fog AWS Federation Real get_signin_token":{"type":"method","name":"get_signin_token","children":[],"call":[" request ","CGI  escape ","Fog JSON  encode "]}," Fog Parsers AWS STS AssumeRoleWithWithWebIdentity end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= ","@value strip "]}," Fog Parsers AWS STS AssumeRoleWithWithWebIdentity reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog AWS Federation Real request":{"type":"method","name":"request","children":[],"call":["Fog JSON  decode ","@connection get body ","@connection get "]}," Fog AWS Federation Real initialize":{"type":"method","name":"initialize","children":[],"call":["Excon  new ","options [] "]}," Fog AWS Federation Mock reset_data":{"type":"method","name":"reset_data","children":[],"call":[" class reset "," class "]}," Fog AWS Federation Mock data":{"type":"method","name":"data","children":[],"call":[" class data "," class "]}," Fog AWS Federation Mock initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Fog AWS Federation Mock reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Storage AWS HeadObjectUrl head_object_url":{"type":"method","name":"head_object_url","children":[],"call":[" signed_url ","options merge "," raise ","ArgumentError  new "]}," Fog AWS IAM Real list_policies":{"type":"method","name":"list_policies","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ListPolicies\")) merge ","Fog Parsers AWS IAM ListManagedPolicies  new "]}," Fog AWS IAM Real detach_user_policy":{"type":"method","name":"detach_user_policy","children":[],"call":[" request ","Fog Parsers AWS IAM Basic  new "]}," Fog AWS IAM Real detach_role_policy":{"type":"method","name":"detach_role_policy","children":[],"call":[" request ","Fog Parsers AWS IAM Basic  new "]}," Fog AWS IAM Real detach_group_policy":{"type":"method","name":"detach_group_policy","children":[],"call":[" request ","Fog Parsers AWS IAM Basic  new "]}," Fog AWS IAM Real delete_policy":{"type":"method","name":"delete_policy","children":[],"call":[" request ","Fog Parsers AWS IAM Basic  new "]}," Fog AWS IAM Real create_policy":{"type":"method","name":"create_policy","children":[],"call":[" request ","value nil? ","(pair\n  (str \"Action\")\n  (str \"CreatePolicy\")) reject ","Fog Parsers AWS IAM SinglePolicy  new ","Fog JSON  encode "]}," Fog AWS IAM Real attach_user_policy":{"type":"method","name":"attach_user_policy","children":[],"call":[" request ","Fog Parsers AWS IAM Basic  new "]}," Fog AWS IAM Real attach_role_policy":{"type":"method","name":"attach_role_policy","children":[],"call":[" request ","Fog Parsers AWS IAM Basic  new "]}," Fog AWS IAM Real attach_group_policy":{"type":"method","name":"attach_group_policy","children":[],"call":[" request ","Fog Parsers AWS IAM Basic  new "]}," Fog Parsers AWS IAM SinglePolicy end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog Parsers AWS IAM SinglePolicy finished_policy":{"type":"method","name":"finished_policy","children":[],"call":["@response []= "]}," Fog Parsers AWS IAM SinglePolicy reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS IAM PolicyParser end_element":{"type":"method","name":"end_element","children":[],"call":[" finished_policy ","@stack last == ","@stack last ","@stack pop ","@policy []= "," value to_i "," value "," value == ","Time  parse "]}," Fog Parsers AWS IAM PolicyParser fresh_policy":{"type":"method","name":"fresh_policy","children":[],"call":[]}," Fog Parsers AWS IAM PolicyParser start_element":{"type":"method","name":"start_element","children":[],"call":[" fresh_policy ","@stack last == ","@stack last ","@stack << "]}," Fog Parsers AWS IAM PolicyParser reset":{"type":"method","name":"reset","children":[],"call":[" fresh_policy "]}," Fog Parsers AWS IAM ListManagedPolicies end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value == "," value "," finished_policy ","@stack last == ","@stack last ","@stack pop ","@policy []= "]}," Fog Parsers AWS IAM ListManagedPolicies finished_policy":{"type":"method","name":"finished_policy","children":[],"call":["@response [] << ","@response [] "]}," Fog Parsers AWS IAM ListManagedPolicies reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Storage AWS Files head_url":{"type":"method","name":"head_url","children":[],"call":[" service head_object_url "," directory key "," directory "," service "," requires "]}," Fog Storage AWS File encryption_customer_key_headers":{"type":"method","name":"encryption_customer_key_headers","children":[],"call":["Base64  encode64 chomp! ","Base64  encode64 ","Digest MD5  digest "," encryption_key to_s "," encryption_key "," encryption ","OpenSSL Digest MD5  digest "]}," Fog Storage AWS File part_headers":{"type":"method","name":"part_headers","children":[],"call":["(pair\n  (str \"Content-MD5\")\n  (lvar :md5)) merge ","encryption_keys include? ","options select "," encryption_customer_key_headers keys "," encryption_customer_key_headers ","Base64  encode64 strip ","Base64  encode64 ","Digest MD5  digest ","OpenSSL Digest MD5  digest ","(pair\n  (str \"Content-MD5\")\n  (lvar :Base64  encode64 strip )) merge "," encryption_customer_key_headers keys  include? "]}," Fog Storage AWS File encryption_headers":{"type":"method","name":"encryption_headers","children":[],"call":[" encryption "," encryption_customer_key_headers "," encryption_key ","value nil? ","(pair\n  (str \"x-amz-server-side-encryption\")\n  (send nil :encryption)) reject "," kms_key_id "]}," Fog Storage AWS Real stringify_query_keys":{"type":"method","name":"stringify_query_keys","children":[],"call":["params []= ","Hash  [] ","k to_s ","params [] map ","params [] "]}," Fog Storage AWS PostObjectHiddenFields post_object_hidden_fields":{"type":"method","name":"post_object_hidden_fields","children":[],"call":["options []= ","@signer derived_hmac sign unpack first ","@signer derived_hmac sign unpack ","@signer derived_hmac sign ","options [] ","@signer derived_hmac ","date to_iso8601_basic ","Base64  encode64 gsub ","Base64  encode64 ","Fog JSON  encode ","policy merge ","policy [] + ","policy [] ","extra_conditions << ","@signer credential_scope ","Fog Time  now ","options dup ","options dup  []= ","options dup  [] ","Fog Time  now  to_iso8601_basic ","options []  merge ","options []  [] + ","options []  [] ","options dup  dup "]}," Fog AWS validate_region!":{"type":"method","name":"validate_region!","children":[],"call":[]}," Fog AWS regions":{"type":"method","name":"regions","children":[],"call":[]}," Fog AWS json_response?":{"type":"method","name":"json_response?","children":[],"call":[]}," Fog Storage AWS Utils require_mime_types":{"type":"method","name":"require_mime_types","children":[],"call":[" exit ","Fog Logger  warning "," require "]}," Fog AWS RDS Mock modify_db_snapshot_attribute":{"type":"method","name":"modify_db_snapshot_attribute","children":[],"call":["response body= ","(pair\n  (str \"requestId\")\n  (send\n    (const\n      (const\n        (const nil :Fog) :AWS) :Mock) :request_id)) merge! "," data ","Fog AWS Mock  request_id ","response status= ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS RDS Real modify_db_snapshot_attribute":{"type":"method","name":"modify_db_snapshot_attribute","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ModifyDBSnapshotAttribute\")) merge! ","Fog Parsers AWS RDS ModifyDbSnapshotAttribute  new ","params merge! ","Fog AWS  indexed_param ","attributes [] "]}," Fog AWS RDS Mock describe_engine_default_parameters":{"type":"method","name":"describe_engine_default_parameters","children":[],"call":["response body= "," data [] "," data ","Fog AWS Mock  request_id ","response status= ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS RDS Real describe_engine_default_parameters":{"type":"method","name":"describe_engine_default_parameters","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeEngineDefaultParameters\")) merge ","Fog Parsers AWS RDS DescribeEngineDefaultParameters  new "]}," Fog AWS RDS Mock describe_db_clusters":{"type":"method","name":"describe_db_clusters","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= "," data [] values "," data [] "," data "," raise ","Fog AWS RDS NotFound  new ","cluster_set << "," data [] [] ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "," data [] values  << "," data [] [] _set << "]}," Fog AWS RDS Real describe_db_clusters":{"type":"method","name":"describe_db_clusters","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeDBClusters\")) merge ","Fog Parsers AWS RDS DescribeDBClusters  new ","params []= ","opts [] "]}," Fog AWS RDS Mock describe_db_cluster_snapshots":{"type":"method","name":"describe_db_cluster_snapshots","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","snapshot []= ","Time  now - > ","Fog Mock  delay ","Time  now - ","snapshot [] ","Time  now ","snapshots each "," raise ","Fog AWS RDS NotFound  new ","opts [] ","snapshots empty? ","snapshot [] == ","snapshots select "," data [] values "," data [] "," data ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "," data [] values  each "," data [] values  empty? "," data [] values  select "]}," Fog AWS RDS Real describe_db_cluster_snapshots":{"type":"method","name":"describe_db_cluster_snapshots","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeDBClusterSnapshots\")) merge ","Fog Parsers AWS RDS DescribeDBClusterSnapshots  new ","params []= ","opts [] "]}," Fog AWS RDS Mock delete_db_cluster_snapshot":{"type":"method","name":"delete_db_cluster_snapshot","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= "," raise ","Fog AWS RDS NotFound  new "," data [] delete "," data [] "," data ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS RDS Real delete_db_cluster_snapshot":{"type":"method","name":"delete_db_cluster_snapshot","children":[],"call":[" request ","Fog Parsers AWS RDS DeleteDBClusterSnapshot  new "]}," Fog AWS RDS Mock delete_db_cluster":{"type":"method","name":"delete_db_cluster","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= "," data [] delete "," data [] "," data "," create_db_cluster_snapshot "," raise ","Fog AWS RDS Error  new ","cluster [] any? ","cluster [] ","Fog AWS RDS NotFound  new "," data [] [] ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS RDS Real delete_db_cluster":{"type":"method","name":"delete_db_cluster","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DeleteDBCluster\")) merge ","params []= "]}," Fog AWS RDS Mock create_db_cluster_snapshot":{"type":"method","name":"create_db_cluster_snapshot","children":[],"call":[" data [] [] []= ","Time  now "," data [] [] "," data [] "," data ","response body= ","data dup ","Fog AWS Mock  request_id "," data [] []= ","cluster [] ","cluster [] to_i "," raise ","Fog AWS RDS NotFound  new ","Fog AWS RDS IdentifierTaken  new ","Excon Response  new ","Excon Response  new  body= "," data [] []  [] "," data [] []  [] to_i "]}," Fog AWS RDS Real create_db_cluster_snapshot":{"type":"method","name":"create_db_cluster_snapshot","children":[],"call":[" request ","Fog Parsers AWS RDS CreateDBClusterSnapshot  new "]}," Fog AWS RDS Mock create_db_cluster":{"type":"method","name":"create_db_cluster","children":[],"call":["response status= ","response body= ","k == ","data dup reject ","data dup ","Fog AWS Mock  request_id "," data [] []= "," data [] "," data ","options [] ","Fog Mock  random_hex ","Time  now ","(or\n  (send\n    (lvar :options) :[]\n    (str \"BackupRetentionPeriod\"))\n  (int 35)) to_s "," Array map "," Array ","options delete "," raise ","Fog AWS RDS NotFound  new ","options [] to_s empty? ! ","options [] to_s empty? ","options [] to_s ","options key? ","required_params each ","Fog AWS RDS IdentifierTaken  new "," data [] [] ","Excon Response  new ","Excon Response  new  status= ","Excon Response  new  body= "]}," Fog AWS RDS Real create_db_cluster":{"type":"method","name":"create_db_cluster","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"CreateDBCluster\")) merge ","Fog Parsers AWS RDS CreateDBCluster  new ","options merge! ","Fog AWS  indexed_param ","options delete "]}," Fog AWS RDS Mock copy_db_snapshot":{"type":"method","name":"copy_db_snapshot","children":[],"call":["response body= ","data dup ","Fog AWS Mock  request_id "," data [] []= "," data [] "," data ","data []= "," data [] [] ","Fog AWS Mock  snapshot_id ","response status= ","Excon Response  new ","Excon Response  new  body= "," data [] []  dup ","  data [] []  [] []= ","  data [] []  [] ","  data [] []  "," data [] []  []= ","  data [] []  [] [] ","Fog AWS Mock  Fog AWS Mock  snapshot_id  ","Excon Response  new  status= "]}," Fog AWS RDS Real copy_db_snapshot":{"type":"method","name":"copy_db_snapshot","children":[],"call":[" request ","Fog Parsers AWS RDS CopyDBSnapshot  new "]}," Fog AWS Lambda Mock update_function_configuration":{"type":"method","name":"update_function_configuration","children":[],"call":["response body= "," data [] [] "," data [] "," data ","response status= ","Excon Response  new "," data [] [] merge! ","update merge! ","params delete ","response body [] ","response body "," get_function_configuration ","Excon Response  new  body= "," get_function_configuration  body= ","Excon Response  new  status= "," get_function_configuration  status= ","Excon Response  new  body [] "," get_function_configuration  body [] ","Excon Response  new  body "," get_function_configuration  body "]}," Fog AWS Lambda Real update_function_configuration":{"type":"method","name":"update_function_configuration","children":[],"call":[" request ","(pair\n  (sym :method)\n  (str \"PUT\")) merge ","Fog AWS Parsers Lambda Base  new ","Fog JSON  encode ","update merge! ","params delete "]}," Fog AWS Lambda Mock update_function_code":{"type":"method","name":"update_function_code","children":[],"call":["response body= "," data [] [] "," data [] "," data ","response status= ","Excon Response  new ","response body [] ","response body "," raise ","request_data empty? ","request_data << ","params delete ","params has_key? ","(str \"S3Bucket\") each "," get_function_configuration ","Excon Response  new  body= "," get_function_configuration  body= ","Excon Response  new  status= "," get_function_configuration  status= ","Excon Response  new  body [] "," get_function_configuration  body [] ","Excon Response  new  body "," get_function_configuration  body "]}," Fog AWS Lambda Real update_function_code":{"type":"method","name":"update_function_code","children":[],"call":[" request ","(pair\n  (sym :method)\n  (str \"PUT\")) merge ","Fog AWS Parsers Lambda Base  new ","Fog JSON  encode ","update merge! ","params delete "]}," Fog AWS Lambda Mock update_event_source_mapping":{"type":"method","name":"update_event_source_mapping","children":[],"call":["response body= ","response status= ","Excon Response  new ","mapping []= ","enabled eql? ","mapping merge! ","update merge! ","enabled nil? ! ","enabled nil? ","function empty? ! ","function empty? ","params delete ","function [] "," get_function_configuration body "," get_function_configuration "," raise ","message << "," data [] [] "," data [] "," data ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  []= ","params delete  eql? "," data [] []  merge! ","params delete  nil? ! ","params delete  nil? "," get_function_configuration body  empty? ! "," get_function_configuration body  empty? "," get_function_configuration body  [] "," get_ get_function_configuration body _configuration body "," get_ get_function_configuration body _configuration "]}," Fog AWS Lambda Real update_event_source_mapping":{"type":"method","name":"update_event_source_mapping","children":[],"call":[" request ","(pair\n  (sym :method)\n  (str \"PUT\")) merge ","Fog JSON  encode ","update merge! ","enabled nil? ! ","enabled nil? ","params delete ","params delete  nil? ! ","params delete  nil? "]}," Fog AWS Lambda Mock remove_permission":{"type":"method","name":"remove_permission","children":[],"call":["response body= ","response status= ","Excon Response  new "," raise ","message << "," data [] [] size eql? "," data [] [] size "," data [] [] "," data [] "," data ","s [] eql? ","s [] "," data [] [] delete_if ","params delete ","function [] "," get_function_configuration body "," get_function_configuration ","Excon Response  new  body= ","Excon Response  new  status= "," get_function_configuration body  [] "," get_ get_function_configuration body _configuration body "," get_ get_function_configuration body _configuration "]}," Fog AWS Lambda Real remove_permission":{"type":"method","name":"remove_permission","children":[],"call":[" request ","(pair\n  (sym :method)\n  (str \"DELETE\")) merge ","params delete "]}," Fog AWS Lambda Mock list_functions":{"type":"method","name":"list_functions","children":[],"call":["response body= "," data [] values "," data [] "," data ","response status= ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Lambda Real list_functions":{"type":"method","name":"list_functions","children":[],"call":[" request ","(pair\n  (sym :method)\n  (str \"GET\")) merge ","Fog AWS Parsers Lambda Base  new "]}," Fog AWS Lambda Mock list_event_source_mappings":{"type":"method","name":"list_event_source_mappings","children":[],"call":["response body= ","m [] eql? ","m [] "," data [] values select "," data [] values "," data [] "," data ","function [] "," get_function_configuration body "," get_function_configuration ","params delete ","response status= ","Excon Response  new ","Excon Response  new  body= "," get_function_configuration body  [] "," get_ get_function_configuration body _configuration body "," get_ get_function_configuration body _configuration ","Excon Response  new  status= "]}," Fog AWS Lambda Real list_event_source_mappings":{"type":"method","name":"list_event_source_mappings","children":[],"call":[" request ","(pair\n  (sym :method)\n  (str \"GET\")) merge ","query merge! ","params delete "]}," Fog AWS Lambda Mock invoke":{"type":"method","name":"invoke","children":[],"call":[" raise ","response body= ","function [] ","function has_key? ","function is_a? "," get_function_configuration body "," get_function_configuration ","Fog Logger  warning ","message << "," caller first "," caller ","Fog Mock  not_implemented ","params delete ","response status= ","Excon Response  new ","Excon Response  new  body= "," get_function_configuration body  [] "," get_function_configuration body  has_key? "," get_function_configuration body  is_a? "," get_ get_function_configuration body _configuration body "," get_ get_function_configuration body _configuration ","Excon Response  new  status= "]}," Fog AWS Lambda Real invoke":{"type":"method","name":"invoke","children":[],"call":[" request ","(pair\n  (sym :method)\n  (str \"POST\")) merge ","params delete ","Fog JSON  encode ","headers []= ","Base64  encode64 ","Fog Json  encode "]}," Fog AWS Lambda Mock get_policy":{"type":"method","name":"get_policy","children":[],"call":["response body= ","response status= "," raise ","message << ","statements empty? "," data [] [] "," data [] "," data ","function [] "," get_function_configuration body "," get_function_configuration ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "," get_function_configuration body  [] "," get_ get_function_configuration body _configuration body "," get_ get_function_configuration body _configuration "]}," Fog AWS Lambda Real get_policy":{"type":"method","name":"get_policy","children":[],"call":[" request ","(pair\n  (sym :method)\n  (str \"GET\")) merge ","Fog AWS Parsers Lambda Base  new ","params delete "]}," Fog AWS Lambda Mock get_function_configuration":{"type":"method","name":"get_function_configuration","children":[],"call":["response body= ","response body [] ","response body "," get_function "," get_function  body= "," get_function  body [] "," get_function  body "]}," Fog AWS Lambda Real get_function_configuration":{"type":"method","name":"get_function_configuration","children":[],"call":[" request ","(pair\n  (sym :method)\n  (str \"GET\")) merge ","Fog AWS Parsers Lambda Base  new ","params delete "]}," Fog AWS Lambda Mock get_function":{"type":"method","name":"get_function","children":[],"call":["response body= ","location << ","Fog Mock  random_base64 ","Time  now to_i + ","60 * ","Time  now to_i ","Time  now "," aws_access_key_id ","UUID  uuid ","function [] "," account_id "," region "," raise ","function empty? ","function nil? ","search_function values first ","search_function values ","Hash  [] ","v [] eql? ","v [] "," data [] select "," data [] "," data "," data [] [] ","function_id match ","params delete ","response status= ","Excon Response  new ","Excon Response  new  body= ","search_function values first  [] "," data [] []  [] ","search_function values first  empty? "," data [] []  empty? ","search_function values first  nil? "," data [] []  nil? ","search_search_function values first  values first ","search_ data [] []  values first ","Hash  []  values first ","search_search_function values first  values ","search_ data [] []  values ","Hash  []  values ","search_function values first _id match "," data [] [] _id match ","params delete  match ","Excon Response  new  status= "]}," Fog AWS Lambda Real get_function":{"type":"method","name":"get_function","children":[],"call":[" request ","(pair\n  (sym :method)\n  (str \"GET\")) merge ","Fog AWS Parsers Lambda Base  new ","params delete "]}," Fog AWS Lambda Mock get_event_source_mapping":{"type":"method","name":"get_event_source_mapping","children":[],"call":["response body= ","response status= ","Excon Response  new ","mapping []= ","mapping [] eql? ","mapping [] "," raise ","message << "," data [] [] "," data [] "," data ","params delete ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  []= "," data [] []  [] eql? "," data [] []  [] "]}," Fog AWS Lambda Real get_event_source_mapping":{"type":"method","name":"get_event_source_mapping","children":[],"call":[" request ","(pair\n  (sym :method)\n  (str \"GET\")) merge ","params delete "]}," Fog AWS Lambda Mock delete_function":{"type":"method","name":"delete_function","children":[],"call":["f [] eql? ","f [] "," data [] delete_if "," data [] "," data "," data [] delete ","function [] "," get_function_configuration body "," get_function_configuration ","response body= ","response status= ","Excon Response  new "," get_function_configuration body  [] "," get_ get_function_configuration body _configuration body "," get_ get_function_configuration body _configuration ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Lambda Real delete_function":{"type":"method","name":"delete_function","children":[],"call":[" request ","(pair\n  (sym :method)\n  (str \"DELETE\")) merge ","params delete "]}," Fog AWS Lambda Mock delete_event_source_mapping":{"type":"method","name":"delete_event_source_mapping","children":[],"call":["response body= ","response status= ","Excon Response  new ","mapping []= "," data [] delete "," data [] "," data ","mapping [] "," raise ","message << "," get_event_source_mapping body "," get_event_source_mapping ","Excon Response  new  body= ","Excon Response  new  status= "," get_event_source_mapping body  []= "," get_event_source_mapping body  [] "," get_event_source_ get_event_source_mapping body  body "," get_event_source_ get_event_source_mapping body  "]}," Fog AWS Lambda Real delete_event_source_mapping":{"type":"method","name":"delete_event_source_mapping","children":[],"call":[" request ","(pair\n  (sym :method)\n  (str \"DELETE\")) merge ","params delete "]}," Fog AWS Lambda Mock create_function":{"type":"method","name":"create_function","children":[],"call":["response status= ","response body= "," data [] []= "," data [] "," data ","function []= ","params delete ","Time  now utc ","Time  now ","Fog AWS Mock  arn "," region "," account_id "," raise ","message << ","function empty? ! ","function empty? "," get_function_configuration body "," get_function_configuration ","Fog Mock  random_numbers to_i ","Fog Mock  random_numbers ","Base64  decode64 length ","Base64  decode64 ","code [] ","code has_key? ","(str \"nodejs\") include? ! ","(str \"nodejs\") include? ","Excon Response  new ","Excon Response  new  status= ","Excon Response  new  body= "," get_function_configuration body  []= "," get_function_configuration body  empty? ! "," get_function_configuration body  empty? "," get_ get_function_configuration body _configuration body "," get_ get_function_configuration body _configuration ","Base64  deparams delete 64 length ","Base64  deparams delete 64 ","params delete  [] ","params delete  has_key? "]}," Fog AWS Lambda Real create_function":{"type":"method","name":"create_function","children":[],"call":[" request ","(pair\n  (sym :method)\n  (str \"POST\")) merge ","Fog AWS Parsers Lambda Base  new ","Fog JSON  encode ","data merge! ","params delete ","Fog JSON  enparams delete  "]}," Fog AWS Lambda Mock create_event_source_mapping":{"type":"method","name":"create_event_source_mapping","children":[],"call":["response status= ","response body= ","Excon Response  new "," data [] merge! "," data [] "," data ","Time  now to_f ","Time  now ","function [] ","UUID  uuid "," raise ","message << "," get_function_configuration body "," get_function_configuration ","params delete ","Excon Response  new  status= ","Excon Response  new  body= "," get_function_configuration body  [] "," get_ get_function_configuration body _configuration body "," get_ get_function_configuration body _configuration "]}," Fog AWS Lambda Real create_event_source_mapping":{"type":"method","name":"create_event_source_mapping","children":[],"call":[" request ","(pair\n  (sym :method)\n  (str \"POST\")) merge ","Fog JSON  encode ","data merge! ","enabled nil? ! ","enabled nil? ","params delete ","params delete  nil? ! ","params delete  nil? "]}," Fog AWS Lambda Mock add_permission":{"type":"method","name":"add_permission","children":[],"call":["response body= ","response status= ","Excon Response  new "," data [] [] << "," data [] [] "," data [] "," data ","statement [] []= ","statement [] ","statement []= "," raise ","sid empty? ","sid nil? ","principal empty? ","principal nil? ","action empty? ","action nil? ","params delete ","function [] "," get_function_configuration body "," get_function_configuration ","Excon Response  new  body= ","Excon Response  new  status= ","params delete  empty? ","params delete  nil? "," get_function_configuration body  [] "," get_ get_function_configuration body _configuration body "," get_ get_function_configuration body _configuration "]}," Fog AWS Lambda Real add_permission":{"type":"method","name":"add_permission","children":[],"call":[" request ","(pair\n  (sym :method)\n  (str \"POST\")) merge ","Fog AWS Parsers Lambda Base  new ","Fog JSON  encode ","permission []= ","params delete "]}," Fog AWS KMS Mock list_keys":{"type":"method","name":"list_keys","children":[],"call":["response status= ","response body= ","body merge! "," data [] []= "," data [] "," data ","Fog AWS Mock  request_id ","Excon Response  new ","UUID  uuid "," account_id ","keys size < ","key_set size ","keys size ","key_set slice! ","r << ","v [] "," data [] inject "," data [] [] "," raise ","Fog AWS KMS Error  new ","limit < ","limit > ","options [] ","Excon Response  new  status= ","Excon Response  new  body= ","key_set slice!  size < ","key_set slice!  size ","options []  < ","options []  > "]}," Fog AWS KMS Real list_keys":{"type":"method","name":"list_keys","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ListKeys\")) merge ","Fog Parsers AWS KMS ListKeys  new ","params []= ","options [] "]}," Fog AWS KMS Mock describe_key":{"type":"method","name":"describe_key","children":[],"call":["response body= "," data [] [] "," data [] "," data ","Excon Response  new ","Excon Response  new  body= "]}," Fog AWS KMS Real describe_key":{"type":"method","name":"describe_key","children":[],"call":[" request ","Fog Parsers AWS KMS DescribeKey  new "]}," Fog AWS KMS Mock create_key":{"type":"method","name":"create_key","children":[],"call":["response body= "," data [] []= "," data [] "," data ","Time  now "," account_id ","Fog AWS Mock  arn ","UUID  uuid ","Excon Response  new ","Excon Response  new  body= "]}," Fog AWS KMS Real create_key":{"type":"method","name":"create_key","children":[],"call":[" request ","Fog Parsers AWS KMS DescribeKey  new "]}," Fog AWS Kinesis Mock split_shard":{"type":"method","name":"split_shard","children":[],"call":["response body= ","response status= ","Excon Response  new ","stream [] << "," next_shard_id "," next_sequence_number ","stream [] ","(send\n  (send\n    (lvar :new_starting_hash_key) :to_i) :-\n  (int 1)) to_s ","new_starting_hash_key to_i - ","new_starting_hash_key to_i ","options delete ","shard [] [] ","shard [] ","shard [] []= "," raise ","Fog AWS Kinesis ResourceNotFound  new ","shard [] == ","stream [] detect ","s [] == ","s [] "," data [] detect "," data [] "," data ","Excon Response  new  body= ","Excon Response  new  status= "," next_options delete  ","(send\n  (send\n    (lvar :options delete ) :to_i) :-\n  (int 1)) to_s ","options delete  to_i - ","options delete  to_i "]}," Fog AWS Kinesis Real split_shard":{"type":"method","name":"split_shard","children":[],"call":[" request ","(pair\n  (str \"X-Amz-Target\")\n  (dstr\n    (str \"Kinesis_\")\n    (begin\n      (ivar :@version))\n    (str \".SplitShard\"))) merge ","v nil? ","(pair\n  (str \"NewStartingHashKey\")\n  (send\n    (lvar :options) :delete\n    (str \"NewStartingHashKey\"))) reject ","options delete "]}," Fog AWS Kinesis Mock remove_tags_from_stream":{"type":"method","name":"remove_tags_from_stream","children":[],"call":["response body= ","response status= ","Excon Response  new ","stream []= ","tags include? ","stream [] delete_if ","stream [] "," raise ","Fog AWS Kinesis ResourceNotFound  new ","s [] == ","s [] "," data [] detect "," data [] "," data ","options delete ","Excon Response  new  body= ","Excon Response  new  status= ","options delete  include? "]}," Fog AWS Kinesis Real remove_tags_from_stream":{"type":"method","name":"remove_tags_from_stream","children":[],"call":[" request ","(pair\n  (str \"X-Amz-Target\")\n  (dstr\n    (str \"Kinesis_\")\n    (begin\n      (ivar :@version))\n    (str \".RemoveTagsFromStream\"))) merge ","v nil? ","(pair\n  (str \"StreamName\")\n  (send\n    (lvar :options) :delete\n    (str \"StreamName\"))) reject ","options delete "]}," Fog AWS Kinesis Mock put_records":{"type":"method","name":"put_records","children":[],"call":["response body= ","response status= ","Excon Response  new ","shard [] << ","r merge ","shard [] ","shard [] == ","stream [] detect ","stream [] ","stream [] send [] ","stream [] send ","RUBY_VERSION  == "," next_sequence_number ","records map ","options delete "," raise ","Fog AWS Kinesis ResourceNotFound  new ","s [] == ","s [] "," data [] detect "," data [] "," data ","stream [] sample [] ","stream [] sample ","Excon Response  new  body= ","Excon Response  new  status= "," next_ next_sequence_number  ","options delete  map "]}," Fog AWS Kinesis Real put_records":{"type":"method","name":"put_records","children":[],"call":["response body= ","Fog JSON  decode ","response body ","response body nil? "," request ","(pair\n  (str \"X-Amz-Target\")\n  (dstr\n    (str \"Kinesis_\")\n    (begin\n      (ivar :@version))\n    (str \".PutRecords\"))) merge ","v nil? ","(pair\n  (str \"Records\")\n  (send\n    (lvar :options) :delete\n    (str \"Records\"))) reject ","options delete "," request  body= "," request  body "," request  body nil? "]}," Fog AWS Kinesis Mock put_record":{"type":"method","name":"put_record","children":[],"call":["response body= ","response status= ","Excon Response  new ","shard [] << ","shard [] ","shard [] == ","stream [] detect ","stream [] ","stream [] send [] ","stream [] send ","RUBY_VERSION  == ","options delete "," next_sequence_number "," raise ","Fog AWS Kinesis ResourceNotFound  new ","s [] == ","s [] "," data [] detect "," data [] "," data ","stream [] sample [] ","stream [] sample ","Excon Response  new  body= ","Excon Response  new  status= "," next_ next_sequence_number  "," options delete  [] detect "," options delete  [] "," options delete  "]}," Fog AWS Kinesis Real put_record":{"type":"method","name":"put_record","children":[],"call":["response body= ","Fog JSON  decode ","response body ","response body nil? "," request ","(pair\n  (str \"X-Amz-Target\")\n  (dstr\n    (str \"Kinesis_\")\n    (begin\n      (ivar :@version))\n    (str \".PutRecord\"))) merge ","v nil? ","(pair\n  (str \"Data\")\n  (send\n    (lvar :options) :delete\n    (str \"Data\"))) reject ","options delete "," request  body= "," request  body "," request  body nil? "]}," Fog AWS Kinesis Mock merge_shards":{"type":"method","name":"merge_shards","children":[],"call":["response body= ","response status= ","Excon Response  new ","stream [] << "," next_shard_id "," next_sequence_number ","stream [] ","(send\n  (send\n    (send\n      (lvar :shard_to_merge) :[]\n      (str \"HashKeyRange\")) :[]\n    (str \"EndingHashKey\")) :to_i) max to_s ","(send\n  (send\n    (send\n      (lvar :shard_to_merge) :[]\n      (str \"HashKeyRange\")) :[]\n    (str \"EndingHashKey\")) :to_i) max ","adjacent_shard_to_merge [] [] to_i ","adjacent_shard_to_merge [] [] ","adjacent_shard_to_merge [] ","shard_to_merge [] [] to_i ","shard_to_merge [] [] ","shard_to_merge [] ","(send\n  (send\n    (send\n      (lvar :shard_to_merge) :[]\n      (str \"HashKeyRange\")) :[]\n    (str \"StartingHashKey\")) :to_i) min to_s ","(send\n  (send\n    (send\n      (lvar :shard_to_merge) :[]\n      (str \"HashKeyRange\")) :[]\n    (str \"StartingHashKey\")) :to_i) min ","adjacent_shard_to_merge [] []= ","shard_to_merge [] []= "," raise ","Fog AWS Kinesis ResourceNotFound  new ","shard [] == ","shard [] ","stream [] detect ","s [] == ","s [] "," data [] detect "," data [] "," data ","options delete ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Kinesis Real merge_shards":{"type":"method","name":"merge_shards","children":[],"call":[" request ","(pair\n  (str \"X-Amz-Target\")\n  (dstr\n    (str \"Kinesis_\")\n    (begin\n      (ivar :@version))\n    (str \".MergeShards\"))) merge ","v nil? ","(pair\n  (str \"AdjacentShardToMerge\")\n  (send\n    (lvar :options) :delete\n    (str \"AdjacentShardToMerge\"))) reject ","options delete "]}," Fog AWS Kinesis Mock list_tags_for_stream":{"type":"method","name":"list_tags_for_stream","children":[],"call":["response body= ","stream [] map ","stream [] ","response status= ","Excon Response  new "," raise ","Fog AWS Kinesis ResourceNotFound  new ","s [] == ","s [] "," data [] detect "," data [] "," data ","options delete ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Kinesis Real list_tags_for_stream":{"type":"method","name":"list_tags_for_stream","children":[],"call":["response body ","response body= ","Fog JSON  decode ","response body nil? "," request ","(pair\n  (sym :idempotent)\n  (true)) merge ","v nil? ","(pair\n  (str \"ExclusiveStartTagKey\")\n  (send\n    (lvar :options) :delete\n    (str \"ExclusiveStartTagKey\"))) reject ","options delete "," request  body "," request  body= "," request  body nil? "]}," Fog AWS Kinesis Mock list_streams":{"type":"method","name":"list_streams","children":[],"call":["response body= ","stream [] "," data [] map "," data [] "," data ","response status= ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Kinesis Real list_streams":{"type":"method","name":"list_streams","children":[],"call":["response body= ","Fog JSON  decode ","response body ","response body nil? "," request ","(pair\n  (sym :idempotent)\n  (true)) merge "," request  body= "," request  body "," request  body nil? "]}," Fog AWS Kinesis Mock get_shard_iterator":{"type":"method","name":"get_shard_iterator","children":[],"call":["response body= ","Fog JSON  encode ","response status= ","Excon Response  new "," raise ","Fog AWS Kinesis ResourceNotFound  new ","s [] == ","s [] "," data [] detect "," data [] "," data ","options [] ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Kinesis Real get_shard_iterator":{"type":"method","name":"get_shard_iterator","children":[],"call":["response body= ","Fog JSON  decode ","response body ","response body nil? "," request ","(pair\n  (str \"X-Amz-Target\")\n  (dstr\n    (str \"Kinesis_\")\n    (begin\n      (ivar :@version))\n    (str \".GetShardIterator\"))) merge ","v nil? ","(pair\n  (str \"ShardId\")\n  (send\n    (lvar :options) :delete\n    (str \"ShardId\"))) reject ","options delete "," request  body= "," request  body "," request  body nil? "]}," Fog AWS Kinesis Mock get_records":{"type":"method","name":"get_records","children":[],"call":["response body= ","Fog JSON  encode ","response status= ","Excon Response  new ","shard_iterator []= ","(send\n  (send\n    (send\n      (send\n        (lvar :records) :last) :[]\n      (str \"SequenceNumber\")) :to_i) :+\n  (int 1)) to_s ","records last [] to_i + ","records last [] to_i ","records last [] ","records last ","starting_sequence_number to_s ","records empty? ","records size == ","records size ","records << ","record [] to_i < ","record [] to_i ","record [] ","shard [] each ","shard [] "," raise ","Fog AWS Kinesis ResourceNotFound  new ","shard [] == ","stream [] detect ","stream [] ","s [] == ","s [] "," data [] detect "," data [] "," data ","(or\n  (send\n    (lvar :shard_iterator) :[]\n    (str \"StartingSequenceNumber\"))\n  (int 1)) to_i ","shard_iterator [] ","options delete ","Fog JSON  decode ","Excon Response  new  body= ","Excon Response  new  status= ","Fog JSON  decode  []= ","(or\n  (send\n    (lvar :shard_iterator) :[]\n    (str \"StartingSequenceNumber\"))\n  (int 1)) to_i  to_s ","(or\n  (send\n    (lvar :Fog JSON  decode ) :[]\n    (str \"StartingSequenceNumber\"))\n  (int 1)) to_i ","Fog JSON  decode  [] "]}," Fog AWS Kinesis Real get_records":{"type":"method","name":"get_records","children":[],"call":["response body= ","Fog JSON  decode ","response body ","response body nil? "," request ","(pair\n  (str \"X-Amz-Target\")\n  (dstr\n    (str \"Kinesis_\")\n    (begin\n      (ivar :@version))\n    (str \".GetRecords\"))) merge ","v nil? ","(pair\n  (str \"Limit\")\n  (send\n    (lvar :options) :delete\n    (str \"Limit\"))) reject ","options delete "," request  body= "," request  body "," request  body nil? "]}," Fog AWS Kinesis Mock describe_stream":{"type":"method","name":"describe_stream","children":[],"call":["response body= ","stream dup merge ","stream dup ","response status= ","Excon Response  new ","k == ","stream [] reject ","stream [] "," raise ","Fog AWS Kinesis ResourceNotFound  new ","s [] == ","s [] "," data [] detect "," data [] "," data ","options delete ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Kinesis Real describe_stream":{"type":"method","name":"describe_stream","children":[],"call":["response body ","response body= ","Fog JSON  decode ","response body nil? "," request ","(pair\n  (sym :idempotent)\n  (true)) merge ","v nil? ","(pair\n  (str \"ExclusiveStartShardId\")\n  (send\n    (lvar :options) :delete\n    (str \"ExclusiveStartShardId\"))) reject ","options delete "," request  body "," request  body= "," request  body nil? "]}," Fog AWS Kinesis Mock delete_stream":{"type":"method","name":"delete_stream","children":[],"call":["response body= ","response status= ","Excon Response  new "," data [] delete "," data [] "," data "," raise ","Fog AWS Kinesis ResourceNotFound  new ","s [] == ","s [] "," data [] detect ","options delete ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Kinesis Real delete_stream":{"type":"method","name":"delete_stream","children":[],"call":[" request ","(pair\n  (str \"X-Amz-Target\")\n  (dstr\n    (str \"Kinesis_\")\n    (begin\n      (ivar :@version))\n    (str \".DeleteStream\"))) merge ","v nil? ","(pair\n  (str \"StreamName\")\n  (send\n    (lvar :options) :delete\n    (str \"StreamName\"))) reject ","options delete "]}," Fog AWS Kinesis Mock create_stream":{"type":"method","name":"create_stream","children":[],"call":["response body= ","response status= ","Excon Response  new "," data []= "," data "," next_shard_id "," next_sequence_number ","(erange\n  (int 0)\n  (lvar :shard_count)) map "," raise ","Fog AWS Kinesis ResourceInUse  new ","s [] == ","s [] "," data [] detect "," data [] ","options delete ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Kinesis Real create_stream":{"type":"method","name":"create_stream","children":[],"call":[" request ","(pair\n  (str \"X-Amz-Target\")\n  (dstr\n    (str \"Kinesis_\")\n    (begin\n      (ivar :@version))\n    (str \".CreateStream\"))) merge ","v nil? ","(pair\n  (str \"ShardCount\")\n  (or\n    (send\n      (lvar :options) :delete\n      (str \"ShardCount\"))\n    (int 1))) reject ","options delete "]}," Fog AWS Kinesis Mock add_tags_to_stream":{"type":"method","name":"add_tags_to_stream","children":[],"call":["response body= ","response status= ","Excon Response  new ","stream []= ","stream [] merge ","stream [] "," raise ","Fog AWS Kinesis ResourceNotFound  new ","s [] == ","s [] "," data [] detect "," data [] "," data ","options delete ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Kinesis Real add_tags_to_stream":{"type":"method","name":"add_tags_to_stream","children":[],"call":[" request ","(pair\n  (str \"X-Amz-Target\")\n  (dstr\n    (str \"Kinesis_\")\n    (begin\n      (ivar :@version))\n    (str \".AddTagsToStream\"))) merge ","v nil? ","(pair\n  (str \"StreamName\")\n  (send\n    (lvar :options) :delete\n    (str \"StreamName\"))) reject ","options delete "]}," Fog AWS IAM Mock update_login_profile":{"type":"method","name":"update_login_profile","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new ","user [] []= ","user [] "," raise "," data [] [] "," data [] "," data ","Fog AWS IAM NotFound  new "," data [] key? ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  [] []= "," data [] []  [] "]}," Fog AWS IAM Mock update_group":{"type":"method","name":"update_group","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= "," data [] []= "," data [] "," data "," data [] delete ","group []= "," raise ","new_path match ","options [] "," data [] [] ","Excon Response  new ","Fog AWS IAM NotFound  new "," data [] key? ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  []= ","options []  match "]}," Fog AWS IAM Real Mock update_assume_role_policy":{"type":"method","name":"update_assume_role_policy","children":[],"call":["response status= ","response body= ","Fog AWS Mock  request_id ","Excon Response  new tap ","Excon Response  new "]}," Fog AWS IAM Real update_assume_role_policy":{"type":"method","name":"update_assume_role_policy","children":[],"call":[" request ","value nil? ","(pair\n  (str \"Action\")\n  (str \"UpdateAssumeRolePolicy\")) reject ","Fog Parsers AWS IAM Basic  new ","Fog JSON  encode "]}," Fog AWS IAM Mock set_default_policy_version":{"type":"method","name":"set_default_policy_version","children":[],"call":["response status= ","response body= ","Fog AWS Mock  request_id ","Excon Response  new tap ","Excon Response  new "]}," Fog AWS IAM Real set_default_policy_version":{"type":"method","name":"set_default_policy_version","children":[],"call":[" request ","Fog Parsers AWS IAM Basic  new "]}," Fog AWS IAM Mock list_policy_versions":{"type":"method","name":"list_policy_versions","children":[],"call":["response status= ","response body= ","body merge! "," data [] []= "," data [] "," data ","Fog AWS Mock  request_id ","Excon Response  new ","Base64  encode64 ","UUID  uuid "," account_id ","data_set size > ","data_set size ","data_set slice! "," data [] values "," data [] [] "," raise ","Fog AWS IAM Error  new ","limit < ","limit > ","options [] ","Excon Response  new  status= ","Excon Response  new  body= "," data_set slice!  [] []= "," data_set slice!  [] "," data_set slice!  ","data_set slice! _set size > "," data [] values  size > ","data_set slice! _set size "," data [] values  size ","data_set slice! _set slice! "," data [] values  slice! "," data_set slice!  [] values "," data_set slice!  [] [] ","options []  < ","options []  > "]}," Fog AWS IAM Real list_policy_versions":{"type":"method","name":"list_policy_versions","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ListPolicyVersions\")) merge ","Fog Parsers AWS IAM ListPolicyVersions  new "]}," Fog AWS IAM Mock list_policies":{"type":"method","name":"list_policies","children":[],"call":["response status= ","response body= ","body merge! "," data [] []= "," data [] "," data ","Fog AWS Mock  request_id ","Excon Response  new ","Base64  encode64 ","UUID  uuid "," account_id ","data_set size > ","data_set size ","data_set slice! "," data [] values "," data [] [] "," raise ","Fog AWS IAM Error  new ","limit < ","limit > ","options [] ","p [] match ","p [] ","data_set select ","Excon Response  new  status= ","Excon Response  new  body= "," data_set slice!  [] []= "," data_set slice!  [] "," data_set slice!  ","data_set slice! _set size > "," data [] values  size > ","data_set slice! _set size "," data [] values  size ","data_set slice! _set slice! "," data [] values  slice! "," data_set slice!  [] values "," data_set slice!  [] [] ","options []  < ","options []  > ","data_set slice! _set select "," data [] values  select "]}," Fog AWS IAM Mock list_group_policies":{"type":"method","name":"list_group_policies","children":[],"call":[" raise ","Fog AWS IAM NotFound  new "," user_name ","response status= ","response body= ","Fog AWS Mock  request_id "," data [] [] [] keys "," data [] [] [] "," data [] [] "," data [] "," data ","Excon Response  new tap ","Excon Response  new "," data [] key? "]}," Fog AWS IAM Mock list_attached_user_policies":{"type":"method","name":"list_attached_user_policies","children":[],"call":["response status= ","response body= ","body merge! "," data [] []= "," data [] "," data ","Fog AWS Mock  request_id ","Excon Response  new ","Base64  encode64 ","UUID  uuid "," account_id ","data_set size > ","data_set size ","data_set slice! ","mp fetch ","(send\n  (send\n    (lvar :user) :[]\n    (sym :attached_policies)) :map) map "," data [] fetch ","user [] map ","user [] "," data [] [] "," raise ","Fog AWS IAM Error  new ","limit < ","limit > ","options [] ","Fog AWS IAM NotFound  new "," data [] key? ","Excon Response  new  status= ","Excon Response  new  body= "," data_set slice!  [] []= "," data_set slice!  [] "," data_set slice!  ","data_set slice! _set size > ","data_set slice! _set size ","data_set slice! _set slice! ","(send\n  (send\n    (lvar : data [] [] ) :[]\n    (sym :attached_policies)) :map) map "," data_set slice!  [] fetch "," data [] []  [] map "," data [] []  [] "," data_set slice!  [] [] ","options []  < ","options []  > "," data_set slice!  [] key? "]}," Fog AWS IAM Real list_attached_user_policies":{"type":"method","name":"list_attached_user_policies","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ListAttachedUserPolicies\")) merge ","Fog Parsers AWS IAM ListManagedPolicies  new "]}," Fog AWS IAM Mock list_attached_role_policies":{"type":"method","name":"list_attached_role_policies","children":[],"call":["response status= ","response body= ","body merge! "," data [] []= "," data [] "," data ","Fog AWS Mock  request_id ","Excon Response  new ","Base64  encode64 ","UUID  uuid "," account_id ","data_set size > ","data_set size ","data_set slice! ","mp fetch ","(send\n  (send\n    (lvar :role) :[]\n    (sym :attached_policies)) :map) map "," data [] fetch ","role [] map ","role [] "," data [] [] "," raise ","Fog AWS IAM Error  new ","limit < ","limit > ","options [] ","Fog AWS IAM NotFound  new "," data [] key? ","Excon Response  new  status= ","Excon Response  new  body= "," data_set slice!  [] []= "," data_set slice!  [] "," data_set slice!  ","data_set slice! _set size > ","data_set slice! _set size ","data_set slice! _set slice! ","(send\n  (send\n    (lvar : data [] [] ) :[]\n    (sym :attached_policies)) :map) map "," data_set slice!  [] fetch "," data [] []  [] map "," data [] []  [] "," data_set slice!  [] [] ","options []  < ","options []  > "," data_set slice!  [] key? "]}," Fog AWS IAM Real list_attached_role_policies":{"type":"method","name":"list_attached_role_policies","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ListAttachedRolePolicies\")) merge ","Fog Parsers AWS IAM ListManagedPolicies  new "]}," Fog AWS IAM Mock list_attached_group_policies":{"type":"method","name":"list_attached_group_policies","children":[],"call":["response status= ","response body= ","body merge! "," data [] []= "," data [] "," data ","Fog AWS Mock  request_id ","Excon Response  new ","Base64  encode64 ","UUID  uuid "," account_id ","data_set size > ","data_set size ","data_set slice! ","mp fetch ","(send\n  (send\n    (lvar :group) :[]\n    (sym :attached_policies)) :map) map "," data [] fetch ","group [] map ","group [] "," data [] [] "," raise ","Fog AWS IAM Error  new ","limit < ","limit > ","options [] ","Fog AWS IAM NotFound  new "," data [] key? ","Excon Response  new  status= ","Excon Response  new  body= "," data_set slice!  [] []= "," data_set slice!  [] "," data_set slice!  ","data_set slice! _set size > ","data_set slice! _set size ","data_set slice! _set slice! ","(send\n  (send\n    (lvar : data [] [] ) :[]\n    (sym :attached_policies)) :map) map "," data_set slice!  [] fetch "," data [] []  [] map "," data [] []  [] "," data_set slice!  [] [] ","options []  < ","options []  > "," data_set slice!  [] key? "]}," Fog AWS IAM Real list_attached_group_policies":{"type":"method","name":"list_attached_group_policies","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ListAttachedGroupPolicies\")) merge ","Fog Parsers AWS IAM ListManagedPolicies  new "]}," Fog AWS IAM Mock get_policy_version":{"type":"method","name":"get_policy_version","children":[],"call":["response status= ","response body= ","Fog AWS Mock  request_id ","Excon Response  new tap ","Excon Response  new "," raise ","managed_policy_versions [] "," data [] [] "," data [] "," data ","managed_policy_managed_policy_versions [] s [] "," data [] []  [] "]}," Fog AWS IAM Real get_policy_version":{"type":"method","name":"get_policy_version","children":[],"call":[" request ","Fog Parsers AWS IAM PolicyVersion  new "]}," Fog AWS IAM Mock get_policy":{"type":"method","name":"get_policy","children":[],"call":["response status= ","response body= ","Fog AWS Mock  request_id ","Excon Response  new tap ","Excon Response  new "," raise "," data [] [] "," data [] "," data "]}," Fog AWS IAM Real get_policy":{"type":"method","name":"get_policy","children":[],"call":[" request ","Fog Parsers AWS IAM SinglePolicy  new "]}," Fog AWS IAM Mock get_login_profile":{"type":"method","name":"get_login_profile","children":[],"call":["response body= ","Fog AWS Mock  request_id ","profile [] ","response status= ","Excon Response  new "," raise "," data [] [] [] "," data [] [] "," data [] "," data ","Fog AWS IAM NotFound  new "," data [] key? ","Excon Response  new  body= "," data [] [] []  [] ","Excon Response  new  status= "]}," Fog AWS IAM Mock detach_user_policy":{"type":"method","name":"detach_user_policy","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new tap ","Excon Response  new ","user [] delete ","user [] "," data [] [] "," data [] "," data "," raise ","Fog AWS IAM NotFound  new "," data [] key? ","policy_arn nil? ","managed_policy [] "," data [] []  [] delete "," data [] []  [] "]}," Fog AWS IAM Mock detach_group_policy":{"type":"method","name":"detach_group_policy","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new tap ","Excon Response  new ","group [] delete ","group [] "," data [] [] "," data [] "," data "," raise ","Fog AWS IAM NotFound  new "," data [] key? ","policy_arn nil? ","managed_policy [] "," data [] []  [] delete "," data [] []  [] "]}," Fog AWS IAM Real Mock delete_policy_version":{"type":"method","name":"delete_policy_version","children":[],"call":["response status= ","response body= ","Fog AWS Mock  request_id ","Excon Response  new tap ","Excon Response  new "]}," Fog AWS IAM Real delete_policy_version":{"type":"method","name":"delete_policy_version","children":[],"call":[" request ","Fog Parsers AWS IAM Basic  new "]}," Fog AWS IAM Mock delete_login_profile":{"type":"method","name":"delete_login_profile","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new ","user delete "," raise ","user [] "," data [] [] "," data [] "," data ","Fog AWS IAM NotFound  new "," data [] key? ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  delete "," data [] []  [] "]}," Fog AWS IAM Mock create_policy_version":{"type":"method","name":"create_policy_version","children":[],"call":["response status= ","response body= ","Fog AWS Mock  request_id ","Excon Response  new tap ","Excon Response  new "," raise "," version_id ","managed_policy_versions [] "," data [] [] "," data [] "," data "," managed_policy_versions [] _id ","managed_policy_managed_policy_versions [] s [] "," data [] []  [] "]}," Fog AWS IAM Real create_policy_version":{"type":"method","name":"create_policy_version","children":[],"call":[" request ","value nil? ","(pair\n  (str \"Action\")\n  (str \"CreatePolicyVersion\")) reject ","Fog Parsers AWS IAM PolicyVersion  new ","Fog JSON  encode "]}," Fog AWS IAM Mock create_login_profile":{"type":"method","name":"create_login_profile","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new ","user []= ","Time  now "," raise ","user [] "," data [] [] "," data [] "," data ","Fog AWS IAM NotFound  new "," data [] key? ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  []= "," data [] []  [] "]}," Fog AWS IAM Mock attach_user_policy":{"type":"method","name":"attach_user_policy","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new tap ","Excon Response  new ","user [] << ","user [] "," data [] [] "," data [] "," data "," raise ","Fog AWS IAM NotFound  new "," data [] key? ","policy_arn nil? ","managed_policy [] "," data [] []  [] << "," data [] []  [] "]}," Fog AWS IAM Mock attach_group_policy":{"type":"method","name":"attach_group_policy","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new tap ","Excon Response  new ","group [] << ","group [] "," data [] [] "," data [] "," data "," raise ","Fog AWS IAM NotFound  new "," data [] key? ","policy_arn nil? ","managed_policy [] "," data [] []  [] << "," data [] []  [] "]}," Fog AWS ECS Mock update_service":{"type":"method","name":"update_service","children":[],"call":["response body= ","Fog AWS Mock  request_id ","service []= ","params delete "," data [] [] "," data [] "," data "," raise ","s [] eql? ","s [] "," data [] index ","service_id match ","Fog AWS Mock  arn "," region ","cluster match ! ","cluster match ","Fog AWS Mock  owner_id ","response status= ","Excon Response  new ","Excon Response  new  body= "," data [] []  []= "," data [] [] _id match ","service_id service_id match  ","params delete  match ","cluster service_id match  ! ","cluster service_id match  ","Fog AWS Mock  Fog AWS Mock  owner_id  ","Excon Response  new  status= "]}," Fog AWS ECS Real update_service":{"type":"method","name":"update_service","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"UpdateService\")) merge ","Fog Parsers AWS ECS UpdateService  new "]}," Fog AWS ECS Mock stop_task":{"type":"method","name":"stop_task","children":[],"call":["response body= ","Fog AWS Mock  request_id "," data [] delete_at "," data [] "," data ","task []= "," data [] [] "," raise ","t [] match ","t [] "," data [] index ","t [] eql? ","task_id match ","Fog Logger  warning "," caller first "," caller ","params delete ","response status= ","Excon Response  new ","Excon Response  new  body= "," data [] []  []= ","t [] task_id match  "," data [] [] _id match ","task_id task_id match  ","params delete  match ","Excon Response  new  status= "]}," Fog AWS ECS Real stop_task":{"type":"method","name":"stop_task","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"StopTask\")) merge ","Fog Parsers AWS ECS StopTask  new "]}," Fog AWS ECS Mock start_task":{"type":"method","name":"start_task","children":[],"call":["response body= ","Fog AWS Mock  request_id "," << "," data [] << "," data [] "," data ","containers << ","Fog AWS Mock  arn "," region ","c [] ","UUID  uuid ","task_def [] each ","task_def [] ","instance_id match ","(splat\n  (lvar :instances_id)) first ","cluster_id match ","Fog AWS Mock  owner_id ","params delete ","Fog Mock  not_implemented ","Fog Logger  warning "," caller first "," caller ","params has_key? ","(str \"startedBy\") any? "," raise ","result [] [] ","result [] "," describe_task_definition body "," describe_task_definition ","response status= ","Excon Response  new ","Excon Response  new  body= ","result [] []  [] each ","result [] []  [] ","(splat\n  (lvar :instances_id)) first  match ","(splat\n  (lvar :params delete )) first ","Fog AWS Mock  Fog AWS Mock  owner_id  "," describe_task_definition body  [] [] "," describe_task_definition body  [] "," describe_result [] [] inition body "," describe_result [] [] inition ","Excon Response  new  status= "]}," Fog AWS ECS Real start_task":{"type":"method","name":"start_task","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"StartTask\")) merge ","Fog Parsers AWS ECS StartTask  new ","params merge! ","serialized_overrides merge! ","Fog AWS  serialize_keys ","overrides each_pair ","overrides is_a? ","params delete ","Fog AWS  indexed_param ","serialized_params delete  merge! ","params delete  each_pair ","params delete  is_a? "]}," Fog AWS ECS Mock run_task":{"type":"method","name":"run_task","children":[],"call":["response body= ","Fog AWS Mock  request_id "," << "," data [] << "," data [] "," data ","containers << ","Fog AWS Mock  arn "," region ","c [] ","UUID  uuid ","task_def [] each ","task_def [] ","cluster_id match ","Fog AWS Mock  owner_id ","params delete ","Fog Mock  not_implemented ","Fog Logger  warning "," caller first "," caller ","params has_key? ","(str \"count\") any? "," raise ","result [] [] ","result [] "," describe_task_definition body "," describe_task_definition ","response status= ","Excon Response  new ","Excon Response  new  body= ","result [] []  [] each ","result [] []  [] ","Fog AWS Mock  Fog AWS Mock  owner_id  "," describe_task_definition body  [] [] "," describe_task_definition body  [] "," describe_result [] [] inition body "," describe_result [] [] inition ","Excon Response  new  status= "]}," Fog AWS ECS Real run_task":{"type":"method","name":"run_task","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"RunTask\")) merge ","Fog Parsers AWS ECS RunTask  new ","params merge! ","serialized_overrides merge! ","Fog AWS  serialize_keys ","overrides each_pair ","overrides is_a? ","params delete ","serialized_params delete  merge! ","params delete  each_pair ","params delete  is_a? "]}," Fog AWS ECS Mock register_task_definition":{"type":"method","name":"register_task_definition","children":[],"call":["response body= ","Fog AWS Mock  request_id "," data [] << "," data [] "," data ","task_definition []= ","params [] ","Fog AWS Mock  arn "," region ","(irange\n  (int 1)\n  (int 9)) to_a shuffle first ","(irange\n  (int 1)\n  (int 9)) to_a shuffle ","(irange\n  (int 1)\n  (int 9)) to_a ","Fog AWS Mock  owner_id "," raise ","response status= ","Excon Response  new ","Excon Response  new  body= ","Fog AWS Mock  Fog AWS Mock  owner_id  ","Excon Response  new  status= "]}," Fog AWS ECS Real register_task_definition":{"type":"method","name":"register_task_definition","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"RegisterTaskDefinition\")) merge ","Fog Parsers AWS ECS RegisterTaskDefinition  new ","serialized_params merge! ","Fog AWS  serialize_keys ","params each_pair "]}," Fog AWS ECS Mock list_tasks":{"type":"method","name":"list_tasks","children":[],"call":["response body= ","Fog AWS Mock  request_id ","t [] "," data [] map "," data [] "," data ","response status= ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS ECS Real list_tasks":{"type":"method","name":"list_tasks","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ListTasks\")) merge ","Fog Parsers AWS ECS ListTasks  new "]}," Fog AWS ECS Mock list_task_definitions":{"type":"method","name":"list_task_definitions","children":[],"call":["response body= ","Fog AWS Mock  request_id ","c [] "," data [] map "," data [] "," data ","response status= ","Excon Response  new ","Fog Mock  not_implemented ","Fog Logger  warning "," caller first "," caller ","params has_key? ","(str \"familyPrefix\") any? ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS ECS Real list_task_definitions":{"type":"method","name":"list_task_definitions","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ListTaskDefinitions\")) merge ","Fog Parsers AWS ECS ListTaskDefinitions  new "]}," Fog AWS ECS Mock list_task_definition_families":{"type":"method","name":"list_task_definition_families","children":[],"call":["response body= ","Fog AWS Mock  request_id ","result uniq! ","t [] ","result map! "," data [] dup "," data [] "," data ","t [] match "," data [] select ","params [] ","response status= ","Excon Response  new ","Excon Response  new  body= "," data [] dup  uniq! "," data [] dup  map! ","Excon Response  new  status= "]}," Fog AWS ECS Real list_task_definition_families":{"type":"method","name":"list_task_definition_families","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ListTaskDefinitionFamilies\")) merge ","Fog Parsers AWS ECS ListTaskDefinitionFamilies  new "]}," Fog AWS ECS Mock list_services":{"type":"method","name":"list_services","children":[],"call":["response body= ","Fog AWS Mock  request_id ","s [] ","result map ","s [] eql? "," data [] select "," data [] "," data ","Fog AWS Mock  arn "," region ","cluster match ! ","cluster match ","params delete ","Fog AWS Mock  owner_id ","response status= ","Excon Response  new ","Excon Response  new  body= ","Fog AWS Mock  Fog AWS Mock  owner_id  ","Excon Response  new  status= "]}," Fog AWS ECS Real list_services":{"type":"method","name":"list_services","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ListServices\")) merge ","Fog Parsers AWS ECS ListServices  new "]}," Fog AWS ECS Mock list_container_instances":{"type":"method","name":"list_container_instances","children":[],"call":["response body= ","Fog AWS Mock  request_id ","i [] "," data [] map "," data [] "," data ","response status= ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS ECS Real list_container_instances":{"type":"method","name":"list_container_instances","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ListContainerInstances\")) merge ","Fog Parsers AWS ECS ListContainerInstances  new "]}," Fog AWS ECS Mock list_clusters":{"type":"method","name":"list_clusters","children":[],"call":["response body= ","Fog AWS Mock  request_id ","c [] "," data [] map "," data [] "," data ","response status= ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS ECS Real list_clusters":{"type":"method","name":"list_clusters","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ListClusters\")) merge ","Fog Parsers AWS ECS ListClusters  new "]}," Fog AWS ECS Mock describe_tasks":{"type":"method","name":"describe_tasks","children":[],"call":["response body= ","Fog AWS Mock  request_id ","t [] match ","t [] "," data [] select "," data [] "," data ","t [] eql? ","tid match ","(splat\n  (lvar :tasks)) each ","params delete "," raise ","response status= ","Excon Response  new ","Excon Response  new  body= ","t [] tid match  ","tid tid match  ","(splat\n  (lvar :params delete )) each ","Excon Response  new  status= "]}," Fog AWS ECS Real describe_tasks":{"type":"method","name":"describe_tasks","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeTasks\")) merge ","Fog Parsers AWS ECS DescribeTasks  new ","params merge! ","Fog AWS  indexed_param ","params delete "]}," Fog AWS ECS Mock describe_task_definition":{"type":"method","name":"describe_task_definition","children":[],"call":["response body= ","Fog AWS Mock  request_id ","result first "," raise ","result empty? "," << ","t [] ","result max_by ","result empty? ! ","t [] eql? "," data [] select "," data [] "," data ","t [] match ","params [] ","response status= ","Excon Response  new ","Excon Response  new  body= "," <<  first "," <<  empty? "," <<  max_by "," <<  empty? ! ","Excon Response  new  status= "]}," Fog AWS ECS Real describe_task_definition":{"type":"method","name":"describe_task_definition","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeTaskDefinition\")) merge ","Fog Parsers AWS ECS DescribeTaskDefinition  new "]}," Fog AWS ECS Mock describe_services":{"type":"method","name":"describe_services","children":[],"call":["response body= ","Fog AWS Mock  request_id ","result concat ","sv [] eql? ","sv [] "," data [] select "," data [] "," data ","(block\n  (send\n    (array\n      (splat\n        (lvar :services))) :select)\n  (args\n    (arg :s))\n  (send\n    (send\n      (lvar :s) :match\n      (regexp\n        (str \"^arn:\")\n        (regopt))) :!)) each ","s match ! ","s match ","(splat\n  (lvar :services)) select ","(block\n  (send\n    (array\n      (splat\n        (lvar :services))) :select)\n  (args\n    (arg :s))\n  (send\n    (lvar :s) :match\n    (regexp\n      (str \"^arn:\")\n      (regopt)))) each ","Fog AWS Mock  arn "," region ","cluster match ! ","cluster match ","Fog AWS Mock  owner_id "," raise ","params delete ","response status= ","Excon Response  new ","Excon Response  new  body= ","(block\n  (send\n    (array\n      (splat\n        (lvar :params delete ))) :select)\n  (args\n    (arg :s))\n  (send\n    (send\n      (lvar :s) :match\n      (regexp\n        (str \"^arn:\")\n        (regopt))) :!)) each ","(splat\n  (lvar :params delete )) select ","(block\n  (send\n    (array\n      (splat\n        (lvar :params delete ))) :select)\n  (args\n    (arg :s))\n  (send\n    (lvar :s) :match\n    (regexp\n      (str \"^arn:\")\n      (regopt)))) each ","Fog AWS Mock  Fog AWS Mock  owner_id  ","Excon Response  new  status= "]}," Fog AWS ECS Real describe_services":{"type":"method","name":"describe_services","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeServices\")) merge ","Fog Parsers AWS ECS DescribeServices  new ","params merge! ","Fog AWS  indexed_param ","params delete "]}," Fog AWS ECS Mock describe_container_instances":{"type":"method","name":"describe_container_instances","children":[],"call":["response body= ","Fog AWS Mock  request_id ","i [] match ","i [] "," data [] select "," data [] "," data ","i [] eql? ","inst match ","(splat\n  (lvar :instances_id)) each "," raise ","params delete ","response status= ","Excon Response  new ","Excon Response  new  body= ","i [] inst match  ","inst inst match  ","(splat\n  (lvar :params delete )) each ","Excon Response  new  status= "]}," Fog AWS ECS Real describe_container_instances":{"type":"method","name":"describe_container_instances","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeContainerInstances\")) merge ","Fog Parsers AWS ECS DescribeContainerInstances  new ","params merge! ","Fog AWS  indexed_param ","params delete "]}," Fog AWS ECS Mock describe_clusters":{"type":"method","name":"describe_clusters","children":[],"call":["response body= ","Fog AWS Mock  request_id ","c [] ","clusters map! ","Fog AWS Mock  arn "," region ","f [] ","failures map! ","Fog AWS Mock  owner_id ","clusters << ","result first ","failures << ","match [] ","result empty? ","cl [] eql? ","cl [] "," data [] select "," data [] "," data ","c match ","(splat\n  (lvar :members)) each ","params delete ","response status= ","Excon Response  new ","Excon Response  new  body= ","Fog AWS Mock  Fog AWS Mock  owner_id  ","c match  [] ","c c match  ","(splat\n  (lvar :params delete )) each ","Excon Response  new  status= "]}," Fog AWS ECS Real describe_clusters":{"type":"method","name":"describe_clusters","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeClusters\")) merge ","Fog Parsers AWS ECS DescribeClusters  new ","params merge! ","Fog AWS  indexed_param ","params delete "]}," Fog AWS ECS Mock deregister_task_definition":{"type":"method","name":"deregister_task_definition","children":[],"call":["response body= ","Fog AWS Mock  request_id "," data [] delete_at "," data [] "," data "," raise ","t [] match ","t [] "," data [] index ","t [] eql? ","params [] ","response status= ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS ECS Real deregister_task_definition":{"type":"method","name":"deregister_task_definition","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DeregisterTaskDefinition\")) merge ","Fog Parsers AWS ECS DeregisterTaskDefinition  new "]}," Fog AWS ECS Mock deregister_container_instance":{"type":"method","name":"deregister_container_instance","children":[],"call":["response body= ","Fog AWS Mock  request_id "," data [] delete_at "," data [] "," data "," data [] [] "," raise ","inst [] match ","inst [] "," data [] index ","inst [] eql? ","instance_id match ","params delete ","response status= ","Excon Response  new ","Excon Response  new  body= ","inst [] instance_id match  "," data [] [] _id match ","instance_id instance_id match  ","params delete  match ","Excon Response  new  status= "]}," Fog AWS ECS Real deregister_container_instance":{"type":"method","name":"deregister_container_instance","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DeregisterContainerInstance\")) merge ","Fog Parsers AWS ECS DeregisterContainerInstance  new "]}," Fog AWS ECS Mock delete_service":{"type":"method","name":"delete_service","children":[],"call":["response body= ","Fog AWS Mock  request_id "," data [] delete_at "," data [] "," data "," data [] [] "," raise ","s [] eql? ","s [] "," data [] index ","service_id match ","Fog AWS Mock  arn "," region ","cluster match ! ","cluster match ","params delete ","Fog AWS Mock  owner_id ","response status= ","Excon Response  new ","Excon Response  new  body= "," data [] [] _id match ","service_id service_id match  ","params delete  match ","cluster service_id match  ! ","cluster service_id match  ","Fog AWS Mock  Fog AWS Mock  owner_id  ","Excon Response  new  status= "]}," Fog AWS ECS Real delete_service":{"type":"method","name":"delete_service","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DeleteService\")) merge ","Fog Parsers AWS ECS DeleteService  new "]}," Fog AWS ECS Mock delete_cluster":{"type":"method","name":"delete_cluster","children":[],"call":["response body= ","Fog AWS Mock  request_id ","cluster []= "," raise "," data [] delete_at "," data [] "," data ","c [] eql? ","c [] "," data [] index ","cluster_id match ","cluster_id ! ","params delete ","response status= ","Excon Response  new ","Excon Response  new  body= "," data [] delete_at  []= "," data [] delete_at _id match ","cluster_id cluster_id match  ","params delete  match "," data [] delete_at _id ! ","params delete  ! ","Excon Response  new  status= "]}," Fog AWS ECS Real delete_cluster":{"type":"method","name":"delete_cluster","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DeleteCluster\")) merge ","Fog Parsers AWS ECS DeleteCluster  new "]}," Fog AWS ECS Mock create_service":{"type":"method","name":"create_service","children":[],"call":["response body= ","Fog AWS Mock  request_id "," data [] << "," data [] "," data ","service [] << ","Time  now utc ","Time  now ","Fog Mock  random_numbers ","service [] ","params [] ","Fog AWS Mock  arn "," region ","task_definition match ! ","task_definition match ","role match ! ","role match ","cluster match ! ","cluster match ","Fog AWS Mock  owner_id "," raise ","response status= ","Excon Response  new ","Excon Response  new  body= ","params []  match ! ","params []  match ","Fog AWS Mock  Fog AWS Mock  owner_id  ","Excon Response  new  status= "]}," Fog AWS ECS Real create_service":{"type":"method","name":"create_service","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"CreateService\")) merge ","Fog Parsers AWS ECS CreateService  new ","params merge! ","Fog AWS  indexed_param ","params delete "]}," Fog AWS ECS Mock create_cluster":{"type":"method","name":"create_cluster","children":[],"call":["response body= ","Fog AWS Mock  request_id ","search_cluster_result first "," data [] << "," data [] "," data ","search_cluster_result empty? ","c [] eql? ","c [] "," data [] select ","Fog AWS Mock  arn "," region ","params [] ","Fog AWS Mock  owner_id ","params []= ","params has_key? ","response status= ","Excon Response  new ","Excon Response  new  body= ","search_search_cluster_result first _result first ","search_search_cluster_result first _result empty? ","Fog AWS Mock  Fog AWS Mock  owner_id  ","Excon Response  new  status= "]}," Fog AWS ECS Real create_cluster":{"type":"method","name":"create_cluster","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"CreateCluster\")) merge ","Fog Parsers AWS ECS CreateCluster  new "]}," Fog DNS AWS Mock list_all_records":{"type":"method","name":"list_all_records","children":[],"call":["tmp_records append ","subr [] gsub >= ","subr [] gsub ","zone [] ","subr [] ","subr [] nil? ! ","subr [] nil? ","name nil? ","key start_with? ","key is_a? ","subr is_a? ","record each ","tmp_records push ","record [] gsub >= ","record [] gsub ","record [] ","record [] nil? ! ","record [] nil? "," tap "]}," Fog DNS AWS Mock record_exist?":{"type":"method","name":"record_exist?","children":[],"call":["current_records empty? ! ","current_records empty? ","current_records [] nil? ! ","current_records [] nil? ","current_records [] ","change [] ","change [] empty? ! ","change [] empty? ","current_records nil? ","zone [] [] [] ","zone [] [] ","zone [] ","zone [] [] nil? ","zone [] [] []  empty? ! ","zone [] [] []  empty? ","zone [] [] []  [] nil? ! ","zone [] [] []  [] nil? ","zone [] [] []  [] ","zone [] [] []  nil? "]}," Fog DNS AWS change_resource_record_sets_data":{"type":"method","name":"change_resource_record_sets_data","children":[],"call":[]}," Fog DNS AWS elb_dualstack_hosted_zone_mapping":{"type":"method","name":"elb_dualstack_hosted_zone_mapping","children":[],"call":[]}," Fog Compute AWS Mock request_spot_instances":{"type":"method","name":"request_spot_instances","children":[],"call":["response body= ","Fog AWS Mock  request_id ","Time  now ","options [] ","Fog AWS Mock  spot_instance_request_id ","Fog AWS Mock  security_group_id ","Fog Mock  not_implemented ","Fog Logger  warning "," caller first "," caller ","options key? ","options is_a? "," raise ","Fog Compute AWS Error  new ","message << ","instance_type ! ","image_id ! ","Fog Compute AWS NotFound  new ","image_id match ! ","image_id match ","(send\n  (lvar :spot_price) :>\n  (int 0)) ! ","spot_price > ","spot_price to_f ","all_instance_types include? ! ","all_instance_types include? ","f id "," flavors map "," flavors ","response status= ","Excon Response  new "," data [] []= "," data [] "," data ","launch_spec [] merge! ","launch_spec [] ","Excon Response  new  body= ","Fog AWS Mock  request_Fog AWS Mock  spot_instance_request_id  ","Fog AWS Mock  spot_instance_request_Fog AWS Mock  spot_instance_request_id  ","Fog AWS Mock  security_group_Fog AWS Mock  spot_instance_request_id  ","image_Fog AWS Mock  spot_instance_request_id  ! ","image_Fog AWS Mock  spot_instance_request_id  match ! ","image_Fog AWS Mock  spot_instance_request_id  match ","(send\n  (lvar :spot_price to_f ) :>\n  (int 0)) ! ","spot_price to_f  > ","spot_price to_f  to_f ","f Fog AWS Mock  spot_instance_request_id  ","Excon Response  new  status= "]}," Fog Compute AWS Mock describe_spot_price_history":{"type":"method","name":"describe_spot_price_history","children":[],"call":["response body= ","Fog AWS Mock  request_id ","x [] <=> ","y [] ","x [] ","spot_price_history_set sort! ","spot_price_history_set << ","(splat\n  (lvar :zones)) shuffle first ","(splat\n  (lvar :zones)) shuffle ","Time  now - ","1 + "," rand ","Time  now ","(send\n  (begin\n    (send\n      (send nil :rand) :+\n      (send\n        (send\n          (array\n            (int 0)\n            (int 1)) :shuffle) :first))) :*\n  (int 10000)) round / ","(send\n  (begin\n    (send\n      (send nil :rand) :+\n      (send\n        (send\n          (array\n            (int 0)\n            (int 1)) :shuffle) :first))) :*\n  (int 10000)) round ","(send\n  (send nil :rand) :+\n  (send\n    (send\n      (array\n        (int 0)\n        (int 1)) :shuffle) :first)) * "," rand + ","(int 0) shuffle first ","(int 0) shuffle ","(splat\n  (lvar :product_descriptions)) shuffle first ","(splat\n  (lvar :product_descriptions)) shuffle ","(splat\n  (lvar :instance_types)) shuffle first ","(splat\n  (lvar :instance_types)) shuffle ","max_results times ","Fog AWS Mock  spot_product_descriptions ","filters delete ","f id "," flavors map "," flavors "," raise ","(and\n  (send\n    (lvar :max_results) :is_a?\n    (const nil :Integer))\n  (send\n    (lvar :max_results) :>\n    (int 0))) ! ","max_results > ","max_results is_a? ","Fog Mock  random_numbers to_i ","Fog Mock  random_numbers ","params [] ","zones nil? ","all_zones include? ! ","all_zones include? ","zones nil? ! ","z [] "," describe_availability_zones body [] map "," describe_availability_zones body [] "," describe_availability_zones body "," describe_availability_zones ","params []= ","filters key? ","filters is_a? ","Fog Mock  not_implemented ","Fog Logger  warning "," caller first "," caller ","response status= ","Excon Response  new ","Excon Response  new  body= ","(splat\n  (lvar :params [] )) shuffle first ","(splat\n  (lvar :params [] )) shuffle ","params []  nil? ","all_params []  include? ! ","all_params []  include? ","params []  nil? ! "," describe_availability_params []  body [] map "," describe_availability_params []  body [] "," describe_availability_params []  body "," describe_availability_params []  ","Excon Response  new  status= "]}," Fog Compute AWS Mock describe_instance_attribute":{"type":"method","name":"describe_instance_attribute","children":[],"call":[" raise ","Fog Compute AWS NotFound  new ","response body []= ","instance [] ","response body ","response body= ","Fog AWS Mock  request_id ","response status= ","i [] == ","i [] "," data [] values find "," data [] values "," data [] "," data ","Excon Response  new ","Excon Response  new  body []= ","Excon Response  new  body ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog Compute AWS Real describe_instance_attribute":{"type":"method","name":"describe_instance_attribute","children":[],"call":[" request ","Fog Parsers Compute AWS DescribeInstanceAttribute  new "]}," Fog AWS AutoScaling Mock detach_load_balancers":{"type":"method","name":"detach_load_balancers","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new "," raise ","Fog AWS AutoScaling ValidationError  new "," data [] key? "," data [] "," data ","unexpected_options join ","unexpected_options empty? ","options keys - ","ExpectedOptions  [] ","options keys ","Excon Response  new  body= ","Excon Response  new  status= ","options keys -  join ","options keys -  empty? "]}," Fog AWS AutoScaling Real detach_load_balancers":{"type":"method","name":"detach_load_balancers","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DetachLoadBalancers\")) merge! ","Fog Parsers AWS AutoScaling Basic  new ","options merge! ","AWS  indexed_param ","options delete "]}," Fog AWS AutoScaling Mock detach_instances":{"type":"method","name":"detach_instances","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new "," raise ","Fog AWS AutoScaling ValidationError  new "," data [] key? "," data [] "," data ","unexpected_options join ","unexpected_options empty? ","options keys - - ","ExpectedOptions  [] ","options keys - ","options keys ","options keys - - - ","Excon Response  new  body= ","Excon Response  new  status= ","options keys - -  join ","options keys - - -  join ","options keys - -  empty? ","options keys - - -  empty? "]}," Fog AWS AutoScaling Real detach_instances":{"type":"method","name":"detach_instances","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DetachInstances\")) merge! ","Fog Parsers AWS AutoScaling Basic  new ","options merge! ","AWS  indexed_param ","options delete "," to_s "]}," Fog AWS AutoScaling Mock attach_load_balancers":{"type":"method","name":"attach_load_balancers","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new "," raise ","Fog AWS AutoScaling ValidationError  new "," data [] key? "," data [] "," data ","unexpected_options join ","unexpected_options empty? ","options keys - ","ExpectedOptions  [] ","options keys ","Excon Response  new  body= ","Excon Response  new  status= ","options keys -  join ","options keys -  empty? "]}," Fog AWS AutoScaling Real attach_load_balancers":{"type":"method","name":"attach_load_balancers","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"AttachLoadBalancers\")) merge! ","Fog Parsers AWS AutoScaling Basic  new ","options merge! ","AWS  indexed_param ","options delete "]}," Fog AWS AutoScaling Mock attach_instances":{"type":"method","name":"attach_instances","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new "," raise ","Fog AWS AutoScaling ValidationError  new "," data [] key? "," data [] "," data ","unexpected_options join ","unexpected_options empty? ","options keys - - ","ExpectedOptions  [] ","options keys - ","options keys ","Excon Response  new  body= ","Excon Response  new  status= ","options keys - -  join ","options keys - -  empty? "]}," Fog AWS AutoScaling Real attach_instances":{"type":"method","name":"attach_instances","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"AttachInstances\")) merge! ","Fog Parsers AWS AutoScaling Basic  new ","options merge! ","AWS  indexed_param ","options delete "]}," Fog Parsers AWS RDS ModifyDbSnapshotAttribute end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "]}," Fog Parsers AWS RDS ModifyDbSnapshotAttribute start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS ModifyDbSnapshotAttribute reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS RDS DescribeEngineDefaultParameters end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= ","@response [] "," new_db_parameter ","@response [] [] << ","@response [] [] "]}," Fog Parsers AWS RDS DescribeEngineDefaultParameters start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS DescribeEngineDefaultParameters reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS RDS DescribeDBClusters end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "," fresh_cluster ","@response [] [] << ","@response [] [] "]}," Fog Parsers AWS RDS DescribeDBClusters start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS DescribeDBClusters reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS RDS DescribeDBClusterSnapshots end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "," fresh_snapshot ","@response [] [] << ","@response [] [] "]}," Fog Parsers AWS RDS DescribeDBClusterSnapshots start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS DescribeDBClusterSnapshots reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS RDS DeleteDBClusterSnapshot end_element":{"type":"method","name":"end_element","children":[],"call":[" fresh_snapshot ","@response [] []= ","@response [] "," value "]}," Fog Parsers AWS RDS DeleteDBClusterSnapshot start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS DeleteDBClusterSnapshot reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS RDS DeleteDBCluster end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "," fresh_cluster "]}," Fog Parsers AWS RDS DeleteDBCluster start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS DeleteDBCluster reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS RDS DBParameterParser end_element":{"type":"method","name":"end_element","children":[],"call":["@db_parameter []= ","@value strip ","@value == "]}," Fog Parsers AWS RDS DBParameterParser start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS DBParameterParser new_db_parameter":{"type":"method","name":"new_db_parameter","children":[],"call":[]}," Fog Parsers AWS RDS DBParameterParser reset":{"type":"method","name":"reset","children":[],"call":[" new_db_parameter "]}," Fog Parsers AWS RDS DBClusterSnapshotParser end_element":{"type":"method","name":"end_element","children":[],"call":["@db_cluster_snapshot []= "," value ","Time  parse "," value to_i "]}," Fog Parsers AWS RDS DBClusterSnapshotParser start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS DBClusterSnapshotParser fresh_snapshot":{"type":"method","name":"fresh_snapshot","children":[],"call":[]}," Fog Parsers AWS RDS DBClusterSnapshotParser reset":{"type":"method","name":"reset","children":[],"call":[" fresh_snapshot "]}," Fog Parsers AWS RDS DbClusterParser end_element":{"type":"method","name":"end_element","children":[],"call":[" fresh_cluster ","@db_cluster_member []= "," value "," value == ","@db_cluster_members << ","@db_cluster []= ","@vpc_security_group []= ","@db_security_group []= ","@vpc_security_groups << "," fresh_cluster _member []= "," fresh_cluster _members << "," fresh_cluster  []= "]}," Fog Parsers AWS RDS DbClusterParser start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS DbClusterParser fresh_cluster":{"type":"method","name":"fresh_cluster","children":[],"call":[]}," Fog Parsers AWS RDS DbClusterParser reset":{"type":"method","name":"reset","children":[],"call":[" fresh_cluster "]}," Fog Parsers AWS RDS CreateDBClusterSnapshot end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "," fresh_snapshot "]}," Fog Parsers AWS RDS CreateDBClusterSnapshot start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS CreateDBClusterSnapshot reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS RDS CreateDBCluster end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "," fresh_cluster "]}," Fog Parsers AWS RDS CreateDBCluster start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS CreateDBCluster reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS RDS CopyDBSnapshot end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "," fresh_snapshot "]}," Fog Parsers AWS RDS CopyDBSnapshot start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS CopyDBSnapshot reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog AWS Parsers Lambda Base rules":{"type":"method","name":"rules","children":[],"call":["Fog Logger  warning ","Fog JSON  decode ","Time  parse "," process ","value map "]}," Fog AWS Parsers Lambda Base process":{"type":"method","name":"process","children":[],"call":["h []= "," rules ","body inject "]}," Fog Parsers AWS KMS ListKeys end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "," value == ","@keys << ","@key []= "]}," Fog Parsers AWS KMS ListKeys start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS KMS ListKeys reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS KMS DescribeKey end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= ","@key []= "," value == "," value ","Time  parse "]}," Fog Parsers AWS KMS DescribeKey start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS KMS DescribeKey reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS IAM PolicyVersion end_element":{"type":"method","name":"end_element","children":[],"call":["@version []= "," value ","Fog JSON  decode ","URI  decode "," value == ","@response []= ","URI  decode_www_form_component "]}," Fog Parsers AWS IAM PolicyVersion reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS IAM ListPolicyVersions finished_version":{"type":"method","name":"finished_version","children":[],"call":["@response [] << ","@response [] "]}," Fog Parsers AWS IAM ListPolicyVersions end_element":{"type":"method","name":"end_element","children":[],"call":[" finished_version ","@stack last == ","@stack last ","@stack pop ","@version []= "," value == "," value ","Time  parse ","@response []= "," response []= "," response ","@response [] << ","@response [] "]}," Fog Parsers AWS IAM ListPolicyVersions start_element":{"type":"method","name":"start_element","children":[],"call":["@stack last == ","@stack last ","@stack << "]}," Fog Parsers AWS IAM ListPolicyVersions reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS IAM ListManagedPolicies start_element":{"type":"method","name":"start_element","children":[],"call":[" fresh_policy ","@stack last == ","@stack last ","@stack << "]}," Fog Parsers AWS ECS UpdateService end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= ","@response [] "]}," Fog Parsers AWS ECS UpdateService reset":{"type":"method","name":"reset","children":[],"call":["@response []= "]}," Fog Parsers AWS ECS TaskDefinition end_element":{"type":"method","name":"end_element","children":[],"call":["@volume_from []= "," value ","@portmapping []= "," value to_i ","@mountpoint []= "," value == ","@context last ","@environment []= ","@container []= ","@host []= ","@volume []= ","@container [] << ","@container [] ","@response [] [] [] << ","@response [] [] [] ","@response [] [] ","@response [] ","@context pop ","@response [] [] []= "]}," Fog Parsers AWS ECS TaskDefinition start_element":{"type":"method","name":"start_element","children":[],"call":["@context push ","@contexts include? "]}," Fog Parsers AWS ECS Task end_element":{"type":"method","name":"end_element","children":[],"call":["@failure []= "," value ","@net_binding []= "," value to_i ","@container []= ","@container_overrides << ","@context last ","@task []= ","@response [] [] << ","@response [] [] ","@response [] ","@container [] << ","@container [] ","@task [] << ","@task [] ","@context pop ","@response [] []= ","@task [] []= "]}," Fog Parsers AWS ECS Task start_element":{"type":"method","name":"start_element","children":[],"call":["@context push ","@contexts include? "]}," Fog Parsers AWS ECS StopTask reset":{"type":"method","name":"reset","children":[],"call":["@response []= "]}," Fog Parsers AWS ECS StartTask reset":{"type":"method","name":"reset","children":[],"call":["@response []= "]}," Fog Parsers AWS ECS Service end_element":{"type":"method","name":"end_element","children":[],"call":["@deployment []= ","Time  parse "," value ","@event []= ","@context last ","@load_balancer []= "," value to_i ","@service []= ","@service [] << ","@service [] ","@response [] [] << ","@response [] [] ","@response [] ","@context pop "]}," Fog Parsers AWS ECS Service start_element":{"type":"method","name":"start_element","children":[],"call":["@context push ","@contexts include? "]}," Fog Parsers AWS ECS RunTask reset":{"type":"method","name":"reset","children":[],"call":["@response []= "]}," Fog Parsers AWS ECS RegisterTaskDefinition reset":{"type":"method","name":"reset","children":[],"call":["@response []= "]}," Fog Parsers AWS ECS ListTasks end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] ","@response [] [] << ","@response [] [] "]}," Fog Parsers AWS ECS ListTasks reset":{"type":"method","name":"reset","children":[],"call":["@response []= "]}," Fog Parsers AWS ECS ListTaskDefinitions end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] ","@response [] [] << ","@response [] [] "]}," Fog Parsers AWS ECS ListTaskDefinitions reset":{"type":"method","name":"reset","children":[],"call":["@response []= "]}," Fog Parsers AWS ECS ListTaskDefinitionFamilies end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] ","@response [] [] << ","@response [] [] "]}," Fog Parsers AWS ECS ListTaskDefinitionFamilies reset":{"type":"method","name":"reset","children":[],"call":["@response []= "]}," Fog Parsers AWS ECS ListServices end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] ","@response [] [] << ","@response [] [] "]}," Fog Parsers AWS ECS ListServices reset":{"type":"method","name":"reset","children":[],"call":["@response []= "]}," Fog Parsers AWS ECS ListContainerInstances end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] ","@response [] [] << ","@response [] [] "]}," Fog Parsers AWS ECS ListContainerInstances reset":{"type":"method","name":"reset","children":[],"call":["@response []= "]}," Fog Parsers AWS ECS ListClusters end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] ","@response [] [] << ","@response [] [] "]}," Fog Parsers AWS ECS ListClusters reset":{"type":"method","name":"reset","children":[],"call":["@response []= "]}," Fog Parsers AWS ECS DescribeTasks reset":{"type":"method","name":"reset","children":[],"call":["@response []= "]}," Fog Parsers AWS ECS DescribeTaskDefinition reset":{"type":"method","name":"reset","children":[],"call":["@response []= "]}," Fog Parsers AWS ECS DescribeServices reset":{"type":"method","name":"reset","children":[],"call":["@response []= "]}," Fog Parsers AWS ECS DescribeContainerInstances end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] [] << ","@response [] [] ","@response [] ","@context last "]}," Fog Parsers AWS ECS DescribeContainerInstances reset":{"type":"method","name":"reset","children":[],"call":["@response []= "]}," Fog Parsers AWS ECS DescribeClusters end_element":{"type":"method","name":"end_element","children":[],"call":["@context pop ","@response [] []= ","@response [] ","@failures << ","@failure empty? ","@clusters << ","@cluster empty? ","@context last ","@failure []= "," value ","@cluster []= "]}," Fog Parsers AWS ECS DescribeClusters start_element":{"type":"method","name":"start_element","children":[],"call":["@context push ","@contexts include? "]}," Fog Parsers AWS ECS DescribeClusters reset":{"type":"method","name":"reset","children":[],"call":["@response []= "]}," Fog Parsers AWS ECS DeregisterTaskDefinition reset":{"type":"method","name":"reset","children":[],"call":["@response []= "]}," Fog Parsers AWS ECS DeregisterContainerInstance end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= ","@response [] "]}," Fog Parsers AWS ECS DeregisterContainerInstance reset":{"type":"method","name":"reset","children":[],"call":["@response []= "]}," Fog Parsers AWS ECS DeleteService end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= ","@response [] "]}," Fog Parsers AWS ECS DeleteService reset":{"type":"method","name":"reset","children":[],"call":["@response []= "]}," Fog Parsers AWS ECS DeleteCluster end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= ","@response [] ","@cluster []= "," value to_i "," value "]}," Fog Parsers AWS ECS DeleteCluster reset":{"type":"method","name":"reset","children":[],"call":["@response []= "]}," Fog Parsers AWS ECS CreateService end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= ","@response [] "]}," Fog Parsers AWS ECS CreateService reset":{"type":"method","name":"reset","children":[],"call":["@response []= "]}," Fog Parsers AWS ECS CreateCluster end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= ","@response [] ","@cluster []= "," value to_i "," value "]}," Fog Parsers AWS ECS CreateCluster reset":{"type":"method","name":"reset","children":[],"call":["@response []= "]}," Fog Parsers AWS ECS ContainerInstance end_element":{"type":"method","name":"end_element","children":[],"call":["@container_instance []= "," value "," value to_i "," value == ","@registered_resource []= ","@remaining_resource []= ","@context last "," value to_f ","@string_set << ","@container_instance [] << ","@container_instance [] ","@context pop "]}," Fog Parsers AWS ECS ContainerInstance start_element":{"type":"method","name":"start_element","children":[],"call":["@context push ","@contexts include? "]}," Fog Parsers AWS ECS Base end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "]}," Fog Parsers AWS ECS Base start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS ECS Base reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Compute AWS DescribeInstanceAttribute end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@group []= ","@response [] << ","@response [] "," value == ","@block_device_mapping []= ","Time  parse "]}," Fog Parsers Compute AWS DescribeInstanceAttribute start_element":{"type":"method","name":"start_element","children":[],"call":["@response []= ","@response key? "]}," Fog Parsers Compute AWS DescribeInstanceAttribute reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS CloudWatch DescribeAlarms reset_insufficient_data_actions":{"type":"method","name":"reset_insufficient_data_actions","children":[],"call":[]}," Fog Parsers AWS CloudWatch DescribeAlarms reset_ok_actions":{"type":"method","name":"reset_ok_actions","children":[],"call":[]}," Fog Parsers AWS CloudWatch DescribeAlarms reset_alarm_actions":{"type":"method","name":"reset_alarm_actions","children":[],"call":[]}," Fog AWS RDS Snapshot cluster":{"type":"method","name":"cluster","children":[],"call":[" service clusters get "," cluster_id "," service clusters "," service "," requires "]}," Fog AWS RDS Servers restore":{"type":"method","name":"restore","children":[],"call":[" create "]}," Fog AWS RDS Server cluster":{"type":"method","name":"cluster","children":[],"call":[" service clusters get "," cluster_id "," service clusters "," service "]}," Fog AWS RDS Parameters defaults":{"type":"method","name":"defaults","children":[],"call":[" load ","body [] "," service describe_engine_default_parameters body [] "," service describe_engine_default_parameters body "," service describe_engine_default_parameters "," service ","marker nil? ","page1 [] "," service describe_engine_default_parameters body []  [] "," service describe_engine_default_parameters  service describe_engine_default_parameters body []  [] "," service describe_engine_default_page1 []  body [] "," service describe_engine_default_parameters  service describe_engine_default_parameters body []  "," service describe_engine_default_page1 []  body "," service describe_engine_default_page1 []  ","body []  nil? ","page1 []  nil? "]}," Fog AWS RDS Clusters get":{"type":"method","name":"get","children":[],"call":[" new "," service describe_db_clusters body [] [] first "," service describe_db_clusters body [] [] "," service describe_db_clusters body [] "," service describe_db_clusters body "," service describe_db_clusters "," service "]}," Fog AWS RDS Clusters all":{"type":"method","name":"all","children":[],"call":[" load "," service describe_db_clusters body [] [] "," service describe_db_clusters body [] "," service describe_db_clusters body "," service describe_db_clusters "," service "]}," Fog AWS RDS ClusterSnapshots create":{"type":"method","name":"create","children":[],"call":["params merge "," cluster id "," cluster "]}," Fog AWS RDS ClusterSnapshots get":{"type":"method","name":"get","children":[],"call":[" new "," service describe_db_cluster_snapshots body [] [] first "," service describe_db_cluster_snapshots body [] [] "," service describe_db_cluster_snapshots body [] "," service describe_db_cluster_snapshots body "," service describe_db_cluster_snapshots "," service "]}," Fog AWS RDS ClusterSnapshots all":{"type":"method","name":"all","children":[],"call":[" load ","page [] "," filters []= "," filters "," service describe_db_cluster_snapshots body [] "," service describe_db_cluster_snapshots body "," service describe_db_cluster_snapshots "," service "," filters merge! "," service describe_db_cluster_snapshots body []  [] "]}," Fog AWS RDS ClusterSnapshots initialize":{"type":"method","name":"initialize","children":[],"call":[" filters []= ","attributes [] "," filters ","attributes [] id "]}," Fog AWS RDS Cluster attributes_to_params":{"type":"method","name":"attributes_to_params","children":[],"call":["value nil? ","options delete_if "," vpc_security_groups "," storage_encrypted "," state "," preferred_maintenance_window "," preferred_backup_window "," master_username "," password "," engine_version "," engine "," endpoint "," db_subnet_group "," db_cluster_parameter_group "," identity "," backup_retention_period "," allocated_storage "]}," Fog AWS RDS Cluster save":{"type":"method","name":"save","children":[],"call":[" merge_attributes ","data body [] [] ","data body [] ","data body "," service create_db_cluster "," attributes_to_params "," id "," service "," requires "," service create_db_cluster  body [] [] "," service create_db_cluster  body [] "," service create_db_cluster  body "]}," Fog AWS RDS Cluster destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_db_cluster ","snapshot_identifier nil? "," id "," service "," requires "]}," Fog AWS RDS Cluster has_replica?":{"type":"method","name":"has_replica?","children":[],"call":["replica id == ","replica id "," replicas detect "," replicas "]}," Fog AWS RDS Cluster replicas":{"type":"method","name":"replicas","children":[],"call":[" servers ","member [] ! ","member [] "," db_cluster_members select "," db_cluster_members "]}," Fog AWS RDS Cluster master":{"type":"method","name":"master","children":[],"call":["member [] "," db_cluster_members detect "," db_cluster_members "]}," Fog AWS RDS Cluster servers":{"type":"method","name":"servers","children":[],"call":[" service servers get ","member [] "," service servers "," service ","set map "]}," Fog AWS RDS Cluster snapshots":{"type":"method","name":"snapshots","children":[],"call":[" service cluster_snapshots "," service "," requires "]}," Fog AWS RDS Cluster ready?":{"type":"method","name":"ready?","children":[],"call":[" state == "," state "]}," Fog AWS KMS Keys all":{"type":"method","name":"all","children":[],"call":[" load ","result [] "," truncated= "," filters []= "," filters "," service list_keys body "," service list_keys "," service "," filters merge! "," service list_keys body  [] "]}," Fog AWS KMS Keys initialize":{"type":"method","name":"initialize","children":[],"call":[" filters "]}," Fog AWS KMS Key save":{"type":"method","name":"save","children":[],"call":[" merge_attributes ","data body [] ","data body "," service create_key "," usage "," description "," service "," service create_key  body [] "," service create_key  body "]}," Fog AWS KMS Key reload":{"type":"method","name":"reload","children":[],"call":[" merge_attributes ","data body [] ","data body "," service describe_key "," identity "," service "," requires "," service describe_key  body [] "," service describe_key  body "]}," Fog AWS IAM Users current":{"type":"method","name":"current","children":[],"call":[" new "," service get_user body [] "," service get_user body "," service get_user "," service "]}," Fog AWS IAM User password_created_at":{"type":"method","name":"password_created_at","children":[],"call":[" service get_login_profile body [] [] "," service get_login_profile body [] "," service get_login_profile body "," service get_login_profile "," identity "," service "," requires "]}," Fog AWS IAM User password=":{"type":"method","name":"password=","children":[],"call":[" service create_login_profile "," identity "," service ","password nil? ! ","password nil? "," service update_login_profile "," service delete_login_profile "," password_created_at ! ! "," password_created_at ! "," password_created_at "," requires "]}," Fog AWS IAM User groups":{"type":"method","name":"groups","children":[],"call":[" service groups "," identity "," service "," requires "]}," Fog AWS IAM User attached_policies":{"type":"method","name":"attached_policies","children":[],"call":[" service managed_policies "," identity "," service "," requires "]}," Fog AWS IAM User detach":{"type":"method","name":"detach","children":[],"call":[" service detach_user_policy "," identity "," service ","policy_or_arn arn ","policy_or_arn respond_to? "," requires ","policy_or_policy_or_arn arn  policy_or_arn arn  ","policy_or_policy_or_arn arn  respond_to? "]}," Fog AWS IAM User attach":{"type":"method","name":"attach","children":[],"call":[" service attach_user_policy "," identity "," service ","policy_or_arn arn ","policy_or_arn respond_to? "," requires ","policy_or_policy_or_arn arn  policy_or_arn arn  ","policy_or_policy_or_arn arn  respond_to? "]}," Fog AWS IAM Policies all_by_user":{"type":"method","name":"all_by_user","children":[],"call":[" service get_user_policy body [] "," service get_user_policy body "," service get_user_policy "," service ","response body [] map ","response body [] ","response body "," merge_attributes "," service list_user_policies "," page_params "," service list_user_policies  body [] map "," service list_user_policies  body [] "," service list_user_policies  body "]}," Fog AWS IAM Policies all_by_group":{"type":"method","name":"all_by_group","children":[],"call":[" service get_group_policy body [] "," service get_group_policy body "," service get_group_policy "," service ","response body [] map ","response body [] ","response body "," merge_attributes "," service list_group_policies "," page_params "," service list_group_policies  body [] map "," service list_group_policies  body [] "," service list_group_policies  body "]}," Fog AWS IAM ManagedPolicy document":{"type":"method","name":"document","children":[],"call":[" service get_policy_version body [] [] "," service get_policy_version body [] "," service get_policy_version body "," service get_policy_version "," default_version "," arn "," service "," requires "]}," Fog AWS IAM ManagedPolicy attach":{"type":"method","name":"attach","children":[],"call":[" service attach_user_policy "," arn "," service ","user_or_username identity ","user_or_username respond_to? "," requires ","user_or_user_or_username identity  identity ","user_or_user_or_username identity  respond_to? "]}," Fog AWS IAM ManagedPolicies all_policies":{"type":"method","name":"all_policies","children":[],"call":["body [] "," merge_attributes "," service list_policies body "," service list_policies "," page_params "," service "," service list_policies body  [] "," service list_policies  service list_policies body  "]}," Fog AWS IAM ManagedPolicies all_by_group":{"type":"method","name":"all_by_group","children":[],"call":[" service get_policy body [] "," service get_policy body "," service get_policy ","policy [] "," service ","body [] map ","body [] "," merge_attributes "," service list_attached_group_policies body "," service list_attached_group_policies "," page_params "," service get_policy  service list_attached_group_policies body  [] "," service get_policy  service list_attached_group_policies body  "," service list_attached_group_policies body  [] map "," service list_attached_group_policies body  [] "," service list_attached_group_policies  service list_attached_group_policies body  "]}," Fog AWS IAM ManagedPolicies all_by_user":{"type":"method","name":"all_by_user","children":[],"call":[" service get_policy body [] "," service get_policy body "," service get_policy ","policy [] "," service ","body [] map ","body [] "," merge_attributes "," service list_attached_user_policies body "," service list_attached_user_policies "," page_params "," service get_policy  service list_attached_user_policies body  [] "," service get_policy  service list_attached_user_policies body  "," service list_attached_user_policies body  [] map "," service list_attached_user_policies body  [] "," service list_attached_user_policies  service list_attached_user_policies body  "]}," Fog AWS IAM ManagedPolicies get":{"type":"method","name":"get","children":[],"call":[" new ","response body [] ","response body "," service get_policy "," service "," service get_policy  body [] "," service get_policy  body "]}," Fog AWS IAM ManagedPolicies all":{"type":"method","name":"all","children":[],"call":[" load "," all_policies "," all_by_group "," group_name "," all_by_user "," username "," all_by_role "," role_name "]}," Fog AWS IAM Groups get":{"type":"method","name":"get","children":[],"call":[" new ","group merge "," service users new "," service users "," service ","data body [] map ","data body [] ","data body "," service get_group ","data body []  merge "," service get_group  body [] map "," service get_group  body [] "," service get_group  body "," service get_data body []  "]}," Fog AWS IAM Groups all":{"type":"method","name":"all","children":[],"call":[" load "," merge_attributes ","response body [] ","response body "," service list_groups "," service "," service list_groups_for_user "," username "," service list_groups  body [] "," service list_groups_for_user  body [] "," service list_groups  body "," service list_groups_for_user  body "]}," Fog AWS IAM Group reload":{"type":"method","name":"reload","children":[],"call":[" merge_attributes ","data attributes "," collection get "," name "," collection "," requires "]}," Fog AWS IAM Group policies":{"type":"method","name":"policies","children":[],"call":[" service policies "," name "," service "," requires "]}," Fog AWS IAM Group save":{"type":"method","name":"save","children":[],"call":[" service update_group "," name "," service ","params []= "," path "," merge_attributes "," service create_group body [] "," service create_group body "," service create_group "," requires "," persisted? ! "," persisted? "]}," Fog AWS IAM Group detach":{"type":"method","name":"detach","children":[],"call":[" service detach_group_policy "," name "," service ","policy_or_arn arn ","policy_or_arn respond_to? "," requires ","policy_or_policy_or_arn arn  policy_or_arn arn  ","policy_or_policy_or_arn arn  respond_to? "]}," Fog AWS IAM Group destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_group "," name "," service "," requires "]}," Fog AWS IAM Group attached_policies":{"type":"method","name":"attached_policies","children":[],"call":[" service managed_policies "," name "," service "," requires "]}," Fog AWS IAM Group attach":{"type":"method","name":"attach","children":[],"call":[" service attach_group_policy "," name "," service ","policy_or_arn arn ","policy_or_arn respond_to? "," requires ","policy_or_policy_or_arn arn  policy_or_arn arn  ","policy_or_policy_or_arn arn  respond_to? "]}," Fog AWS IAM Group add_user":{"type":"method","name":"add_user","children":[],"call":[" merge_attributes "," users + "," users "," service add_user_to_group ","user identity "," name "," service "," service users new "," service users ","user_or_name is_a? "," requires ","  service users new s + ","  service users new s "," service add_ service users new _to_group "," service users new  identity "," service  service users new s new "," service  service users new s "," service users new _or_name is_a? "]}," Fog AWS ELB Policies munge":{"type":"method","name":"munge","children":[],"call":["m << ","policy []= ","cookie_expiration_period > ","(send\n  (lvar :policy_attribute_descriptions) :find) [] to_i ","(send\n  (lvar :policy_attribute_descriptions) :find) [] ","h [] == ","h [] ","policy_attribute_descriptions find ","e [] "," load_balancer_id "," policy_attributes ","data reduce ","(send\n  (lvar :policy_attribute_descriptions) :find) [] to_i  > ","(send\n  (lvar :e [] ) :find) [] to_i ","(send\n  (lvar :e [] ) :find) [] ","e []  find "]}," Fog AWS ELB Policies new":{"type":"method","name":"new","children":[],"call":[" attributes merge "," attributes "]}," Fog Compute AWS Volume create_params":{"type":"method","name":"create_params","children":[],"call":[" type "," snapshot_id "," iops "," key_id "," encrypted "]}," Fog AWS AutoScaling Group attach_instances":{"type":"method","name":"attach_instances","children":[],"call":[" reload "," service attach_instances "," id "," service "," requires "]}," Fog AWS AutoScaling Group detach_instances":{"type":"method","name":"detach_instances","children":[],"call":[" reload "," service detach_instances "," id "," service "," requires "]}," Fog AWS AutoScaling Group detach_load_balancers":{"type":"method","name":"detach_load_balancers","children":[],"call":[" reload "," service detach_load_balancers "," id "," service "," requires "]}," Fog AWS AutoScaling Group attach_load_balancers":{"type":"method","name":"attach_load_balancers","children":[],"call":[" reload "," service attach_load_balancers "," id "," service "," requires "]}," Fog AWS Mock spot_product_descriptions":{"type":"method","name":"spot_product_descriptions","children":[],"call":[]}," Fog AWS Mock spot_instance_request_id":{"type":"method","name":"spot_instance_request_id","children":[],"call":[]}," Fog AWS Lambda Real process_response":{"type":"method","name":"process_response","children":[],"call":["response body= ","Fog Logger  warning ","parser process ","response body ","Fog JSON  decode ","Fog AWS  json_response? ","response body strip empty? ! ","response body strip empty? ","response body strip ","response body is_a? "]}," Fog AWS Lambda Real _request":{"type":"method","name":"_request","children":[],"call":[" raise ","Fog AWS Lambda Error  slurp ","match [] ","match empty? ","Fog AWS Errors  match_error "," process_response ","@connection request ","Fog AWS Errors  match_error  [] ","Fog AWS Errors  match_error  empty? ","Fog AWS Errors  Fog AWS Errors  match_error _error "," process_ process_response  "]}," Fog AWS Lambda Real request":{"type":"method","name":"request","children":[],"call":[" _request ","@instrumentor instrument ","AWS  signed_params_v4 ","params [] ","$~ [] ","Fog AWS  escape ","headers merge! ","params delete "," refresh_credentials_if_expired "]}," Fog AWS Lambda Real setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":["Fog AWS SignatureV4  new ","options [] "]}," Fog AWS Lambda Real reload":{"type":"method","name":"reload","children":[],"call":["@connection reset "]}," Fog AWS Lambda Real initialize":{"type":"method","name":"initialize","children":[],"call":[" setup_credentials ","Fog Core Connection  new ","options [] "]}," Fog AWS Lambda Mock reset_data":{"type":"method","name":"reset_data","children":[],"call":[" class data [] delete "," class data [] "," class data "," class "]}," Fog AWS Lambda Mock data":{"type":"method","name":"data","children":[],"call":[" class data [] [] "," class data [] "," class data "," class "]}," Fog AWS Lambda Mock initialize":{"type":"method","name":"initialize","children":[],"call":["Fog AWS  validate_region! ","Fog AWS Mock  owner_id ","options [] "," raise ","@region inspect ","(str \"ap-northeast-1\") include? "]}," Fog AWS KMS Real _request":{"type":"method","name":"_request","children":[],"call":[" raise ","Fog AWS KMS Error  slurp ","match [] ","Fog AWS KMS  const_get slurp ","Fog AWS KMS  const_get ","Fog AWS KMS  const_defined? ","match empty? ","Fog AWS Errors  match_error ","@connection request ","Fog AWS Errors  match_error  [] ","Fog AWS Errors  match_error  empty? ","Fog AWS Errors  Fog AWS Errors  match_error _error "]}," Fog AWS KMS Real request":{"type":"method","name":"request","children":[],"call":[" _request ","@instrumentor instrument ","Fog AWS  signed_params_v4 ","params delete "," refresh_credentials_if_expired "]}," Fog AWS KMS Real setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":["Fog AWS SignatureV4  new ","options [] "]}," Fog AWS KMS Real reload":{"type":"method","name":"reload","children":[],"call":["@connection reset "]}," Fog AWS KMS Real initialize":{"type":"method","name":"initialize","children":[],"call":[" setup_credentials ","Fog XML Connection  new ","options [] "]}," Fog AWS KMS Mock reset_data":{"type":"method","name":"reset_data","children":[],"call":[" class data [] delete "," class data [] "," class data "," class "]}," Fog AWS KMS Mock data":{"type":"method","name":"data","children":[],"call":[" class data [] [] "," class data [] "," class data "," class "]}," Fog AWS KMS Mock setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":["Fog AWS SignatureV4  new ","options [] "]}," Fog AWS KMS Mock initialize":{"type":"method","name":"initialize","children":[],"call":["Fog AWS  validate_region! "," setup_credentials ","options [] ","Fog AWS Mock  owner_id "," raise ","@region inspect ","(str \"ap-northeast-1\") include? "]}," Fog AWS KMS Mock reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog AWS Kinesis Mock next_shard_id":{"type":"method","name":"next_shard_id","children":[],"call":[" class next_shard_id "," class "]}," Fog AWS Kinesis Mock next_sequence_number":{"type":"method","name":"next_sequence_number","children":[],"call":[" class next_sequence_number "," class "]}," Fog AWS Kinesis Mock reset_data":{"type":"method","name":"reset_data","children":[],"call":[" class data [] delete "," class data [] "," class data "," class ","data [] delete ","data [] "]}," Fog AWS Kinesis Mock data":{"type":"method","name":"data","children":[],"call":[" class data [] [] "," class data [] "," class data "," class ","data [] [] ","data [] "]}," Fog AWS Kinesis Mock initialize":{"type":"method","name":"initialize","children":[],"call":["Fog AWS  validate_region! ","options [] ","Fog AWS Mock  owner_id "," raise ","@region inspect ","(str \"ap-northeast-1\") include? "]}," Fog AWS Kinesis Mock reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog AWS Kinesis Mock mutex":{"type":"method","name":"mutex","children":[],"call":[" class mutex "," class "]}," Fog AWS Kinesis Real _request":{"type":"method","name":"_request","children":[],"call":[" raise ","Fog AWS Kinesis Error  slurp ","match [] ","Fog AWS Kinesis ProvisionedThroughputExceeded  slurp ","Fog AWS Kinesis InvalidArgument  slurp ","Fog AWS Kinesis ExpiredIterator  slurp ","Fog AWS Kinesis ResourceNotFound  slurp ","Fog AWS Kinesis ResourceInUse  slurp ","Fog AWS Kinesis LimitExceeded  slurp ","match empty? ","Fog AWS Errors  match_error ","@connection request ","Fog AWS Errors  match_error  [] ","Fog AWS Errors  match_error  empty? ","Fog AWS Errors  Fog AWS Errors  match_error _error "]}," Fog AWS Kinesis Real request":{"type":"method","name":"request","children":[],"call":[" _request ","@instrumentor instrument ","headers []= ","@signer sign ","MultiJson  dump ","params [] ","date to_iso8601_basic ","Fog Time  now ","params delete "," refresh_credentials_if_expired ","Fog Time  now  to_iso8601_basic "]}," Fog AWS Kinesis Real setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":["Fog AWS SignatureV4  new ","options [] "]}," Fog AWS Kinesis Real initialize":{"type":"method","name":"initialize","children":[],"call":[" setup_credentials ","Fog XML Connection  new ","options [] "]}," Fog AWS IAM Mock current_user":{"type":"method","name":"current_user","children":[],"call":[" data [] [] "," current_user_name "," data [] "," data ","root [] gsub! ","root [] "," data [] key? "," data [] []  [] gsub! "," data [] []  [] "]}," Fog AWS IAM Mock account_id":{"type":"method","name":"account_id","children":[],"call":[" data [] "," data "]}," Fog AWS IAM PagedCollection page_params":{"type":"method","name":"page_params","children":[],"call":["params merge! ","marker empty? ! ","marker empty? ","options [] ","options fetch "," marker "]}," Fog AWS IAM PagedCollection each":{"type":"method","name":"each","children":[],"call":["subset all each_entry ","subset all ","subset marker ","subset truncated ","subset each_entry "," dup all "," dup "," block_given? ! "," block_given? ","options [] "," dup all  all each_entry "," dup all  all "," dup all  marker "," dup all  truncated "," dup all  each_entry "]}," Fog AWS IAM PagedCollection each_entry":{"type":"method","name":"each_entry","children":[],"call":[" to_a each "," to_a "]}," Fog AWS IAM PagedCollection inherited":{"type":"method","name":"inherited","children":[],"call":[]}," Fog AWS IAM Mock default_policy_versions":{"type":"method","name":"default_policy_versions","children":[],"call":[]}," Fog AWS IAM Mock default_policies":{"type":"method","name":"default_policies","children":[],"call":[]}," Fog AWS ECS Mock setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":["options [] "]}," Fog AWS ECS Mock reset_data":{"type":"method","name":"reset_data","children":[],"call":[" class data [] delete "," class data [] "," class data "," class "]}," Fog AWS ECS Mock data":{"type":"method","name":"data","children":[],"call":[" class data [] [] "," class data [] "," class data "," class "]}," Fog AWS ECS Mock initialize":{"type":"method","name":"initialize","children":[],"call":[" setup_credentials ","Fog AWS  validate_region! ","options [] "," raise ","@region inspect ","(str \"ap-northeast-1\") include? "]}," Fog AWS ECS Mock reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog AWS ECS Real _request":{"type":"method","name":"_request","children":[],"call":[" raise ","Fog AWS ECS Error  slurp ","match [] ","Fog AWS ECS NotFound  slurp ","match empty? ","Fog AWS Errors  match_error ","@connection request ","Fog AWS Errors  match_error  [] ","Fog AWS Errors  match_error  empty? ","Fog AWS Errors  Fog AWS Errors  match_error _error "]}," Fog AWS ECS Real request":{"type":"method","name":"request","children":[],"call":[" _request ","@instrumentor instrument ","Fog AWS  signed_params_v4 ","params delete "," refresh_credentials_if_expired "]}," Fog AWS ECS Real setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":["Fog AWS SignatureV4  new ","options [] "]}," Fog AWS ECS Real reload":{"type":"method","name":"reload","children":[],"call":["@connection reset "]}," Fog AWS ECS Real initialize":{"type":"method","name":"initialize","children":[],"call":[" setup_credentials ","options [] ","Fog XML Connection  new "]}," Fog Storage AWS File multipart_chunk_size=":{"type":"method","name":"multipart_chunk_size=","children":[],"call":[" raise ","ArgumentError  new ","mp_chunk_size < "]}," Fog AWS Support Real _request":{"type":"method","name":"_request","children":[],"call":["response body= ","Fog JSON  decode ","response body ","@connection request ","@connection request  body= ","@connection request  body "]}," Fog AWS Support Real request":{"type":"method","name":"request","children":[],"call":[" _request ","@instrumentor instrument ","Fog AWS  signed_params_v4 ","@version gsub ","Fog JSON  encode ","params delete "," refresh_credentials_if_expired "]}," Fog AWS Support Real setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":["Fog AWS SignatureV4  new ","options [] "]}," Fog AWS Support Real reload":{"type":"method","name":"reload","children":[],"call":["@connection reset "]}," Fog AWS Support Real initialize":{"type":"method","name":"initialize","children":[],"call":[" setup_credentials ","options [] ","Fog XML Connection  new "]}," Fog AWS Support Mock data":{"type":"method","name":"data","children":[],"call":[" class data [] [] "," class data [] "," class data "," class "]}," Fog AWS Support Mock initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Fog AWS Support Mock reset":{"type":"method","name":"reset","children":[],"call":[" class reset "," class "]}," Fog AWS Support Mock describe_trusted_advisor_checks":{"type":"method","name":"describe_trusted_advisor_checks","children":[],"call":["response body= "," data [] values "," data [] "," data ","Excon Response  new ","Excon Response  new  body= "]}," Fog AWS Support Real describe_trusted_advisor_checks":{"type":"method","name":"describe_trusted_advisor_checks","children":[],"call":[" request ","options [] "]}," Fog AWS Support Mock describe_trusted_advisor_check_result":{"type":"method","name":"describe_trusted_advisor_check_result","children":[],"call":["response body= "," data [] [] ","options [] "," data [] "," data ","Excon Response  new ","Excon Response  new  body= "]}," Fog AWS Support Real describe_trusted_advisor_check_result":{"type":"method","name":"describe_trusted_advisor_check_result","children":[],"call":[" request ","options [] "]}," Fog Compute AWS Mock revoke_security_group_egress":{"type":"method","name":"revoke_security_group_egress","children":[],"call":[" raise ","Fog Compute AWS NotFound  new ","response body= ","Fog AWS Mock  request_id ","response status= ","group [] delete ","group [] ","matching_permission [] empty? ","matching_permission [] ","permission [] "," find_matching_permission_egress ","normalized_permissions each "," normalize_permissions "," verify_permission_options ","group [] != "," data [] [] "," data [] "," data ","Excon Response  new ","(send\n  (send\n    (send\n      (self) :data) :[]\n    (sym :security_groups)) :reject) keys first ","(send\n  (send\n    (send\n      (self) :data) :[]\n    (sym :security_groups)) :reject) keys ","v [] != ","options [] ","v [] "," data [] reject ","options key? ","Fog AWS  parse_security_group_options ","v [] == "," data [] values find "," data [] values ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  [] delete "," data [] []  [] "," find_matching_permission_egress  [] empty? "," find_matching_permission_egress  [] "," find_ find_matching_permission_egress _egress "," normalize_permissions  each "," verify_permission_Fog AWS  parse_security_group_options  "," data [] []  [] != ","(send\n  (send\n    (send\n      (self) :data) :[]\n    (sym :security_ data [] [] s)) :reject) keys first ","(send\n  (send\n    (send\n      (self) :data) :[]\n    (sym :security_ data [] [] s)) :reject) keys ","Fog AWS  parse_security_group_options  [] ","Fog AWS  parse_security_group_options  key? ","Fog AWS  parse_security_ data [] [] _options ","Fog AWS  parse_security_group_Fog AWS  parse_security_group_options  "]}," Fog Compute AWS Real revoke_security_group_egress":{"type":"method","name":"revoke_security_group_egress","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"RevokeSecurityGroupEgress\")) merge! ","Fog Parsers Compute AWS Basic  new ","options merge! "," indexed_ip_permissions_params ","options delete ","Fog AWS  parse_security_group_options ","Fog AWS  parse_security_group_options  merge! "," indexed_options delete _params ","Fog AWS  parse_security_group_options  delete ","Fog AWS  parse_security_group_Fog AWS  parse_security_group_options  "]}," Fog Compute AWS Mock find_matching_permission_egress":{"type":"method","name":"find_matching_permission_egress","children":[],"call":["permission [] == ","group_permission [] ","permission [] ","group [] find ","group [] "]}," Fog Compute AWS Mock authorize_security_group_egress":{"type":"method","name":"authorize_security_group_egress","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","group [] << ","group [] ","permission [] ","matching_group_permission [] "," find_matching_permission_egress ","normalized_permissions each "," raise ","matching_group_permission [] include? ","permission [] any? "," normalize_permissions "," verify_permission_options ","group [] != ","Fog Compute AWS NotFound  new "," data [] [] "," data [] "," data ","Excon Response  new ","(send\n  (send\n    (send\n      (self) :data) :[]\n    (sym :security_groups)) :reject) keys first ","(send\n  (send\n    (send\n      (self) :data) :[]\n    (sym :security_groups)) :reject) keys ","v [] != ","options [] ","v [] "," data [] reject ","options key? ","Fog AWS  parse_security_group_options ","options fetch ","v [] == "," data [] values find "," data [] values ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  [] << "," data [] []  [] "," find_matching_permission_egress  [] ","matching_ data [] [] _permission [] "," normalize_permissions  each "," find_matching_permission_egress  [] include? ","matching_ data [] [] _permission [] include? "," verify_permission_Fog AWS  parse_security_group_options  "," data [] []  [] != ","(send\n  (send\n    (send\n      (self) :data) :[]\n    (sym :security_ data [] [] s)) :reject) keys first ","(send\n  (send\n    (send\n      (self) :data) :[]\n    (sym :security_ data [] [] s)) :reject) keys ","Fog AWS  parse_security_group_options  [] ","Fog AWS  parse_security_group_options  key? ","Fog AWS  parse_security_group_Fog AWS  parse_security_group_options  ","Fog AWS  parse_security_ data [] [] _options ","Fog AWS  parse_security_group_options  fetch "]}," Fog Compute AWS Real authorize_security_group_egress":{"type":"method","name":"authorize_security_group_egress","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"AuthorizeSecurityGroupEgress\")) merge! ","Fog Parsers Compute AWS Basic  new ","options merge! "," indexed_ip_permissions_params ","options delete ","Fog AWS  parse_security_group_options ","Fog AWS  parse_security_group_options  merge! "," indexed_options delete _params ","Fog AWS  parse_security_group_options  delete ","Fog AWS  parse_security_group_Fog AWS  parse_security_group_options  "]}," Fog AWS CloudFormation Real signal_resource":{"type":"method","name":"signal_resource","children":[],"call":[" request ","Fog Parsers AWS CloudFormation Basic  new "]}," Fog AWS CloudFormation Real set_stack_policy":{"type":"method","name":"set_stack_policy","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"SetStackPolicy\")) merge! ","Fog Parsers AWS CloudFormation Basic  new ","params []= ","options [] "]}," Fog AWS CloudFormation Real list_change_sets":{"type":"method","name":"list_change_sets","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ListChangeSets\")) merge! ","Fog Parsers AWS CloudFormation ListChangeSets  new "]}," Fog AWS CloudFormation Real get_template_summary":{"type":"method","name":"get_template_summary","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"GetTemplateSummary\")) merge! ","Fog Parsers AWS CloudFormation GetTemplateSummary  new ","params []= ","options [] "]}," Fog AWS CloudFormation Real get_stack_policy":{"type":"method","name":"get_stack_policy","children":[],"call":[" request ","Fog Parsers AWS CloudFormation GetStackPolicy  new "]}," Fog AWS CloudFormation Real execute_change_set":{"type":"method","name":"execute_change_set","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ExecuteChangeSet\")) merge! ","Fog Parsers AWS CloudFormation Basic  new ","options []= "]}," Fog AWS CloudFormation Real estimate_template_cost":{"type":"method","name":"estimate_template_cost","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"EstimateTemplateCost\")) merge! ","Fog Parsers AWS CloudFormation EstimateTemplateCost  new ","params []= ","options [] ","params merge! ","options [] [] ","options [] keys each_with_index ","options [] keys "]}," Fog AWS CloudFormation Real describe_stack_resource":{"type":"method","name":"describe_stack_resource","children":[],"call":[" request ","Fog Parsers AWS CloudFormation DescribeStackResource  new "]}," Fog AWS CloudFormation Real describe_change_set":{"type":"method","name":"describe_change_set","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeChangeSet\")) merge! ","Fog Parsers AWS CloudFormation DescribeChangeSet  new ","options []= "]}," Fog AWS CloudFormation Real describe_account_limits":{"type":"method","name":"describe_account_limits","children":[],"call":[" request ","Fog Parsers AWS CloudFormation DescribeAccountLimits  new "]}," Fog AWS CloudFormation Real delete_change_set":{"type":"method","name":"delete_change_set","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DeleteChangeSet\")) merge! ","Fog Parsers AWS CloudFormation Basic  new ","options []= "]}," Fog AWS CloudFormation Real create_change_set":{"type":"method","name":"create_change_set","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"CreateChangeSet\")) merge! ","Fog Parsers AWS CloudFormation CreateChangeSet  new ","params []= ","options [] ","params merge! ","options [] [] ","options [] keys each_with_index ","options [] keys ","Fog AWS  indexed_param "]}," Fog AWS CloudFormation Real continue_update_rollback":{"type":"method","name":"continue_update_rollback","children":[],"call":[" request ","Fog Parsers AWS CloudFormation Basic  new "]}," Fog AWS CloudFormation Real cancel_update_stack":{"type":"method","name":"cancel_update_stack","children":[],"call":[" request ","Fog Parsers AWS CloudFormation Basic  new "]}," Fog Parsers AWS CloudFormation ListChangeSets end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@change_set []= ","Time  parse ","@response [] << ","@response [] "]}," Fog Parsers AWS CloudFormation ListChangeSets reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS CloudFormation GetTemplateSummary end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@parameter [] << ","@parameter [] ","@parameter []= "," reset_parameter ","@response [] << ","@response [] "]}," Fog Parsers AWS CloudFormation GetTemplateSummary start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS CloudFormation GetTemplateSummary reset_parameter":{"type":"method","name":"reset_parameter","children":[],"call":[]}," Fog Parsers AWS CloudFormation GetTemplateSummary reset":{"type":"method","name":"reset","children":[],"call":[" reset_parameter "]}," Fog Parsers AWS CloudFormation GetStackPolicy end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog Parsers AWS CloudFormation EstimateTemplateCost end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog Parsers AWS CloudFormation DescribeStackResource end_element":{"type":"method","name":"end_element","children":[],"call":["@resource []= ","Time  parse "," value ","@response []= "]}," Fog Parsers AWS CloudFormation DescribeStackResource reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS CloudFormation DescribeChangeSet end_element":{"type":"method","name":"end_element","children":[],"call":["@resource_change_detail []= ","@resource_target_definition []= "," value ","@resource_change []= ","@change []= ","@tag []= ","@parameter []= "," reset_change ","@response [] << ","@response [] "," reset_resource_change_detail ","@resource_change [] << ","@resource_change [] "," reset_tag "," reset_parameter ","@response []= ","Time  parse "]}," Fog Parsers AWS CloudFormation DescribeChangeSet start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS CloudFormation DescribeChangeSet fresh_change_set":{"type":"method","name":"fresh_change_set","children":[],"call":[]}," Fog Parsers AWS CloudFormation DescribeChangeSet reset_resource_target_definition":{"type":"method","name":"reset_resource_target_definition","children":[],"call":[]}," Fog Parsers AWS CloudFormation DescribeChangeSet reset_resource_change_detail":{"type":"method","name":"reset_resource_change_detail","children":[],"call":[]}," Fog Parsers AWS CloudFormation DescribeChangeSet reset_resource_change":{"type":"method","name":"reset_resource_change","children":[],"call":[]}," Fog Parsers AWS CloudFormation DescribeChangeSet reset_change":{"type":"method","name":"reset_change","children":[],"call":[]}," Fog Parsers AWS CloudFormation DescribeChangeSet reset_parameter":{"type":"method","name":"reset_parameter","children":[],"call":[]}," Fog Parsers AWS CloudFormation DescribeChangeSet reset":{"type":"method","name":"reset","children":[],"call":[" reset_resource_target_definition "," reset_resource_change_detail "," reset_resource_change "," reset_change "," reset_parameter "," fresh_change_set "]}," Fog Parsers AWS CloudFormation DescribeAccountLimits end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@response [] << ","@response [] ","@limit []= "]}," Fog Parsers AWS CloudFormation DescribeAccountLimits reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS CloudFormation CreateChangeSet end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog Parsers AWS CloudFormation Basic end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog AWS Support TrustedAdvisorChecks get":{"type":"method","name":"get","children":[],"call":[" new populate_extended_attributes "," new "," service describe_trusted_advisor_check_result body [] "," service describe_trusted_advisor_check_result body "," service describe_trusted_advisor_check_result "," service "]}," Fog AWS Support TrustedAdvisorChecks all":{"type":"method","name":"all","children":[],"call":[" load "," service describe_trusted_advisor_checks body [] "," service describe_trusted_advisor_checks body "," service describe_trusted_advisor_checks "," service "]}," Fog AWS Support TrustedAdvisorCheck map_flagged_resources!":{"type":"method","name":"map_flagged_resources!","children":[],"call":["fr []= ","hash []= "," metadata [] "," metadata ","fr [] each_with_index inject ","fr [] each_with_index ","fr [] "," attributes [] map! "," attributes [] "," attributes "]}," Fog AWS Support TrustedAdvisorCheck resources_summary":{"type":"method","name":"resources_summary","children":[],"call":[" attributes [] "," attributes "," populate_extended_attributes "," attributes [] nil? "]}," Fog AWS Support TrustedAdvisorCheck category_specific_summary":{"type":"method","name":"category_specific_summary","children":[],"call":[" attributes [] "," attributes "," populate_extended_attributes "," attributes [] nil? "]}," Fog AWS Support TrustedAdvisorCheck flagged_resources":{"type":"method","name":"flagged_resources","children":[],"call":[" service flagged_resources load "," attributes [] "," attributes "," service flagged_resources "," service "," map_flagged_resources! "," attributes [] first [] is_a? "," attributes [] first [] "," attributes [] first "," populate_extended_attributes "," attributes [] nil? "]}," Fog AWS Support TrustedAdvisorCheck populate_extended_attributes":{"type":"method","name":"populate_extended_attributes","children":[],"call":[" merge_attributes "," service describe_trusted_advisor_check_result body [] "," service describe_trusted_advisor_check_result body "," service describe_trusted_advisor_check_result "," identity "," service ","lazy == "]}," Fog Compute AWS VPC is_default?":{"type":"method","name":"is_default?","children":[],"call":[" is_default "," require "]}," Fog Compute AWS SecurityGroup fetch_ip_permission":{"type":"method","name":"fetch_ip_permission","children":[],"call":["ip_permission []= "," group_info ","options [] ","options [] nil? ","range end ","range begin "]}," Fog Compute AWS SecurityGroup revoke_port_range_egress":{"type":"method","name":"revoke_port_range_egress","children":[],"call":[" service revoke_security_group_egress "," name "," service "]}," Fog Compute AWS SecurityGroup revoke_port_range_ingress":{"type":"method","name":"revoke_port_range_ingress","children":[],"call":[" service revoke_security_group_ingress "," name "," service "]}," Fog Compute AWS SecurityGroup authorize_port_range_egress":{"type":"method","name":"authorize_port_range_egress","children":[],"call":[" service authorize_security_group_egress "," name "," service "]}," Fog Compute AWS SecurityGroup authorize_port_range_ingress":{"type":"method","name":"authorize_port_range_ingress","children":[],"call":[" service authorize_security_group_ingress "," name "," service "]}," Fog AWS STS Mock assume_role":{"type":"method","name":"assume_role","children":[],"call":["response headers= ","response body= ","(send\n  (send\n    (const nil :Time) :now) :+\n  (lvar :duration)) utc iso8601 ","(send\n  (send\n    (const nil :Time) :now) :+\n  (lvar :duration)) utc ","Time  now + ","Time  now ","Fog Mock  random_base64 ","response status= ","Excon Response  new tap ","Excon Response  new ","Fog AWS Mock  request_id ","(str \"[0-9]{12}\") match ","Fog AWS Mock  Fog AWS Mock  request_id  "]}," Fog AWS RDS Real modify_db_subnet_group":{"type":"method","name":"modify_db_subnet_group","children":[],"call":[" request ","params merge! ","Fog AWS  indexed_param "," Array ","Fog Parsers AWS RDS ModifyDBSubnetGroup  new "]}," Fog AWS EFS Mock modify_mount_target_security_groups":{"type":"method","name":"modify_mount_target_security_groups","children":[],"call":["response status= "," data [] []= "," data [] "," data "," raise ","Fog AWS EFS NotFound  new ","sgd [] == ","sgd [] "," mock_compute data [] values detect "," mock_compute data [] values "," mock_compute data [] "," mock_compute data "," mock_compute ","security_groups each "," data [] [] ","Excon Response  new ","Fog AWS EFS Error  new ","security_groups empty? ","security_groups nil? ","Excon Response  new  status= "]}," Fog AWS EFS Real modify_mount_target_security_groups":{"type":"method","name":"modify_mount_target_security_groups","children":[],"call":[" request "]}," Fog AWS EFS Mock describe_mount_targets":{"type":"method","name":"describe_mount_targets","children":[],"call":["response body= "," data [] []= ","mount_target [] "," data [] "," data ","mount_target []= ","mount_targets each "," raise ","Fog AWS EFS Error  new ","mt [] == ","mt [] "," data [] values select "," data [] values ","options [] ","Fog AWS EFS NotFound  new "," data [] [] ","Excon Response  new ","Excon Response  new  body= "," data [] []  [] "," data [] []  []= "," data [] [] s each "]}," Fog AWS EFS Real describe_mount_targets":{"type":"method","name":"describe_mount_targets","children":[],"call":[" request ","(pair\n  (sym :path)\n  (str \"mount-targets\")) merge ","params []= ","options [] "]}," Fog AWS EFS Mock describe_mount_target_security_groups":{"type":"method","name":"describe_mount_target_security_groups","children":[],"call":["response body= "," data [] [] "," data [] "," data "," raise ","Fog AWS EFS NotFound  new ","Excon Response  new ","Excon Response  new  body= "]}," Fog AWS EFS Real describe_mount_target_security_groups":{"type":"method","name":"describe_mount_target_security_groups","children":[],"call":[" request "]}," Fog AWS EFS Mock describe_file_systems":{"type":"method","name":"describe_file_systems","children":[],"call":["response body= "," data [] []= ","file_system [] "," data [] "," data ","file_system []= ","file_systems each "," data [] values ","file_system [] == "," data [] values detect ","options [] "," raise ","Fog AWS EFS NotFound  new "," data [] [] ","Excon Response  new ","Excon Response  new  body= "]}," Fog AWS EFS Real describe_file_systems":{"type":"method","name":"describe_file_systems","children":[],"call":[" request ","(pair\n  (sym :path)\n  (str \"file-systems\")) merge ","params []= ","options [] "]}," Fog AWS EFS Mock delete_mount_target":{"type":"method","name":"delete_mount_target","children":[],"call":["response status= "," data [] delete "," data [] "," data "," raise ","Fog AWS EFS NotFound  new "," data [] [] ","Excon Response  new ","Excon Response  new  status= "]}," Fog AWS EFS Real delete_mount_target":{"type":"method","name":"delete_mount_target","children":[],"call":[" request "]}," Fog AWS EFS Mock delete_file_system":{"type":"method","name":"delete_file_system","children":[],"call":["response status= ","Excon Response  new "," data [] delete "," data [] "," data "," raise ","Fog AWS EFS FileSystemInUse  new ","file_system [] > ","file_system [] ","Fog AWS EFS NotFound  new "," data [] [] ","Excon Response  new  status= "," data [] []  [] > "," data [] []  [] "]}," Fog AWS EFS Real delete_file_system":{"type":"method","name":"delete_file_system","children":[],"call":[" request "]}," Fog AWS EFS Mock create_mount_target":{"type":"method","name":"create_mount_target","children":[],"call":["response body= "," data [] []= "," data [] "," data ","subnet identity ","Fog Mock  random_hex ","Fog AWS Mock  owner_id ","Fog AWS Mock  ip_address ","Fog Mock  random_letters "," raise ","Fog AWS EFS NotFound  new ","sgd [] == ","sgd [] "," mock_compute data [] values detect "," mock_compute data [] values "," mock_compute data [] "," mock_compute data "," mock_compute ","security_groups each ","Fog AWS EFS InvalidSubnet  new "," mock_compute subnets get "," mock_compute subnets ","Fog AWS EFS IncorrectFileSystemLifeCycleState  new ","file_system [] == ","file_system [] "," data [] [] ","default_security_group [] ","options [] "," mock_compute data [] [] ","Excon Response  new ","default_security_group first ","sg [] == ","sg [] "," mock_compute data [] find ","Excon Response  new  body= "," mock_compute subnets get  identity "," mock_compute  mock_compute subnets get s get "," mock_compute  mock_compute subnets get s "," data [] []  [] == "," data [] []  [] "," mock_compute data [] []  [] "," mock_compute data [] []  first "]}," Fog AWS EFS Real create_mount_target":{"type":"method","name":"create_mount_target","children":[],"call":[" request ","(pair\n  (sym :path)\n  (str \"mount-targets\")) merge "]}," Fog AWS EFS Mock create_file_system":{"type":"method","name":"create_file_system","children":[],"call":["response status= ","response body= "," data [] []= "," data [] "," data ","Time  now to_i to_f ","Time  now to_i ","Time  now ","options [] ","Fog AWS Mock  owner_id ","Fog Mock  random_letters ","Excon Response  new ","file_system []= ","options key? ","Excon Response  new  status= ","Excon Response  new  body= "]}," Fog AWS EFS Real create_file_system":{"type":"method","name":"create_file_system","children":[],"call":[" request ","options [] ","params []= ","options key? "]}," Fog Parsers AWS RDS ModifyDBSubnetGroup end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "]}," Fog Parsers AWS RDS ModifyDBSubnetGroup start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS RDS ModifyDBSubnetGroup reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog AWS EFS MountTargets get":{"type":"method","name":"get","children":[],"call":[" new "," service describe_mount_targets body [] first "," service describe_mount_targets body [] "," service describe_mount_targets body "," service describe_mount_targets "," service "]}," Fog AWS EFS MountTargets all":{"type":"method","name":"all","children":[],"call":[" load "," service describe_mount_targets body [] "," service describe_mount_targets body "," service describe_mount_targets "," file_system_id "," service "]}," Fog AWS EFS MountTarget save":{"type":"method","name":"save","children":[],"call":[" merge_attributes "," service create_mount_target body "," service create_mount_target "," subnet_id "," file_system_id "," service ","params merge! "," ip_address "," requires "]}," Fog AWS EFS MountTarget security_groups=":{"type":"method","name":"security_groups=","children":[],"call":[" service modify_mount_target_security_groups "," identity "," service "," requires "," persisted? "]}," Fog AWS EFS MountTarget security_groups":{"type":"method","name":"security_groups","children":[],"call":[" service describe_mount_target_security_groups body [] "," service describe_mount_target_security_groups body "," service describe_mount_target_security_groups "," identity "," service "," requires "," persisted? "]}," Fog AWS EFS MountTarget file_system":{"type":"method","name":"file_system","children":[],"call":[" service file_systems get "," file_system_id "," service file_systems "," service "," requires "]}," Fog AWS EFS MountTarget destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_mount_target "," identity "," service "," requires "]}," Fog AWS EFS MountTarget ready?":{"type":"method","name":"ready?","children":[],"call":[" state == "," state "]}," Fog AWS EFS FileSystems get":{"type":"method","name":"get","children":[],"call":[" new "," service describe_file_systems body [] first "," service describe_file_systems body [] "," service describe_file_systems body "," service describe_file_systems "," service "]}," Fog AWS EFS FileSystems all":{"type":"method","name":"all","children":[],"call":[" load "," service describe_file_systems body [] "," service describe_file_systems body "," service describe_file_systems "," service "]}," Fog AWS EFS FileSystem save":{"type":"method","name":"save","children":[],"call":[" merge_attributes "," service create_file_system body "," service create_file_system ","Fog Mock  random_hex "," creation_token "," service ","params merge! "," performance_mode "," kms_key_id "," encrypted "]}," Fog AWS EFS FileSystem destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_file_system "," identity "," service "," requires "]}," Fog AWS EFS FileSystem mount_targets":{"type":"method","name":"mount_targets","children":[],"call":[" service mount_targets all "," service mount_targets "," identity "," service "," requires "]}," Fog AWS EFS FileSystem ready?":{"type":"method","name":"ready?","children":[],"call":[" state == "," state "]}," Fog Compute AWS VPC subnets":{"type":"method","name":"subnets","children":[],"call":[" service subnets all "," service subnets "," identity "," service "]}," Fog AWS EFS Real _request":{"type":"method","name":"_request","children":[],"call":[" raise ","Fog AWS EFS Error  slurp ","match [] ","Fog AWS EFS InvalidSubnet  slurp ","Fog AWS EFS NotFound  slurp ","match [] match ","Fog AWS EFS FileSystemInUse  slurp ","match [] == ","Fog AWS EFS IncorrectFileSystemLifeCycleState  slurp ","match empty? ","Fog AWS Errors  match_error ","response body= ","Fog JSON  decode ","response body ","response body empty? ","@connection request ","Fog AWS Errors  match_error  [] ","Fog AWS Errors  match_error  [] Fog AWS Errors  match_error  ","Fog AWS Errors  match_error  [] == ","Fog AWS Errors  match_error  empty? ","Fog AWS Errors  Fog AWS Errors  match_error _error ","@connection request  body= ","@connection request  body ","@connection request  body empty? "]}," Fog AWS EFS Real request":{"type":"method","name":"request","children":[],"call":[" _request ","@instrumentor instrument ","Fog AWS  signed_params_v4 ","Fog JSON  encode ","params delete ","@path + "," refresh_credentials_if_expired ","@@path +  + "]}," Fog AWS EFS Real setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":["Fog AWS SignatureV4  new ","options [] "]}," Fog AWS EFS Real reload":{"type":"method","name":"reload","children":[],"call":["@connection reset "]}," Fog AWS EFS Real initialize":{"type":"method","name":"initialize","children":[],"call":[" setup_credentials ","options [] ","Fog XML Connection  new "]}," Fog AWS EFS Mock mock_compute":{"type":"method","name":"mock_compute","children":[],"call":["Fog Compute AWS  new ","Fog AWS Compute  new "]}," Fog AWS EFS Mock initialize":{"type":"method","name":"initialize","children":[],"call":["options [] "]}," Fog AWS EFS Mock reset":{"type":"method","name":"reset","children":[],"call":[" class reset "," class "]}," Fog AWS EFS Mock data":{"type":"method","name":"data","children":[],"call":[" class data [] [] "," class data [] "," class data "," class "]}," Fog AWS IAM Groups each":{"type":"method","name":"each","children":[],"call":["subset each ","subset all ","subset marker ","subset truncated "," dup all "," dup "," block_given? ! "," block_given? ","subset all  each "," dup all  each ","subset all  all "," dup all  all ","subset all  marker "," dup all  marker ","subset all  truncated "," dup all  truncated "]}," Fog AWS DataPipeline Shared transform_objects":{"type":"method","name":"transform_objects","children":[],"call":["JSONObject  new to_api ","JSONObject  new ","objects map "]}," Fog AWS DataPipeline Shared JSONObject field_for_kv":{"type":"method","name":"field_for_kv","children":[],"call":[" field_for_kv ","value map ","value is_a? ","value [] "]}," Fog AWS DataPipeline Shared JSONObject fields":{"type":"method","name":"fields","children":[],"call":["(send\n  (ivar :@json_fields) :map) flatten "," field_for_kv ","@json_fields map "]}," Fog AWS DataPipeline Shared JSONObject to_api":{"type":"method","name":"to_api","children":[],"call":[" fields "]}," Fog AWS DataPipeline Shared JSONObject initialize":{"type":"method","name":"initialize","children":[],"call":["@json_fields delete ","object clone ","object clone  delete "]}," Fog AWS DataPipeline Mock deactivate_pipeline":{"type":"method","name":"deactivate_pipeline","children":[],"call":["response body= ","pipeline []= "," find_pipeline ","Excon Response  new ","Excon Response  new  body= "," find_pipeline  []= "," find_ find_pipeline  "]}," Fog AWS DataPipeline Real deactivate_pipeline":{"type":"method","name":"deactivate_pipeline","children":[],"call":[" request ","Fog JSON  encode "]}," Fog AWS Mock data_pipeline_id":{"type":"method","name":"data_pipeline_id","children":[],"call":[]}," Fog AWS DataPipeline Mock find_pipeline":{"type":"method","name":"find_pipeline","children":[],"call":[" raise ","Fog AWS DataPipeline NotFound  new ","pipeline [] ","pipeline nil? ","p [] == ","p [] "," data [] values detect "," data [] values "," data [] "," data "]}," Fog AWS DataPipeline Mock stringify_keys":{"type":"method","name":"stringify_keys","children":[],"call":[" stringify_keys ","object map ","h []= ","k to_s ","object inject "]}," Fog AWS DataPipeline Mock reset":{"type":"method","name":"reset","children":[],"call":[" class reset "," class "]}," Fog AWS DataPipeline Mock data":{"type":"method","name":"data","children":[],"call":[" class data [] [] "," class data [] "," class data "," class "]}," Fog AWS AutoScaling Mock detach_load_balancer_target_groups":{"type":"method","name":"detach_load_balancer_target_groups","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new "," raise ","Fog AWS AutoScaling ValidationError  new "," data [] key? "," data [] "," data ","unexpected_options join ","unexpected_options empty? ","options keys - ","ExpectedOptions  [] ","options keys ","Excon Response  new  body= ","Excon Response  new  status= ","options keys -  join ","options keys -  empty? "]}," Fog AWS AutoScaling Real detach_load_balancer_target_groups":{"type":"method","name":"detach_load_balancer_target_groups","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DetachLoadBalancerTargetGroups\")) merge! ","Fog Parsers AWS AutoScaling Basic  new ","options merge! ","AWS  indexed_param ","options delete "]}," Fog AWS AutoScaling Mock attach_load_balancer_target_groups":{"type":"method","name":"attach_load_balancer_target_groups","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new "," raise ","Fog AWS AutoScaling ValidationError  new "," data [] key? "," data [] "," data ","unexpected_options join ","unexpected_options empty? ","options keys - ","ExpectedOptions  [] ","options keys ","Excon Response  new  body= ","Excon Response  new  status= ","options keys -  join ","options keys -  empty? "]}," Fog AWS AutoScaling Real attach_load_balancer_target_groups":{"type":"method","name":"attach_load_balancer_target_groups","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"AttachLoadBalancerTargetGroups\")) merge! ","Fog Parsers AWS AutoScaling Basic  new ","options merge! ","AWS  indexed_param ","options delete "]}," Fog AWS AutoScaling Group detach_load_balancer_target_groups":{"type":"method","name":"detach_load_balancer_target_groups","children":[],"call":[" reload "," service detach_load_balancer_target_groups "," id "," service "," requires "]}," Fog AWS AutoScaling Group attach_load_balancer_target_groups":{"type":"method","name":"attach_load_balancer_target_groups","children":[],"call":[" reload "," service attach_load_balancer_target_groups "," id "," service "," requires "]}," Fog AWS IAM Mock remove_role_from_instance_profile":{"type":"method","name":"remove_role_from_instance_profile","children":[],"call":["response body= ","Fog AWS Mock  request_id ","profile [] delete ","profile [] "," raise ","Fog AWS IAM NotFound  new "," data [] [] "," data [] "," data ","Excon Response  new ","Excon Response  new  body= "," data [] []  [] delete "," data [] []  [] "]}," Fog AWS IAM Mock list_instance_profiles_for_role":{"type":"method","name":"list_instance_profiles_for_role","children":[],"call":["response body= ","Fog AWS Mock  request_id ","p [] include? ","p [] "," data [] values select "," data [] values "," data [] "," data ","Excon Response  new ","Excon Response  new  body= "]}," Fog AWS IAM Mock list_instance_profiles":{"type":"method","name":"list_instance_profiles","children":[],"call":["response body= ","Fog AWS Mock  request_id "," data [] values "," data [] "," data ","Excon Response  new ","Excon Response  new  body= "]}," Fog AWS IAM Mock get_instance_profile":{"type":"method","name":"get_instance_profile","children":[],"call":["response body= ","Fog AWS Mock  request_id "," data [] [] "," data [] "," data ","instance_profile [] map! ","instance_profile [] ","instance_profile dup "," raise ","Fog AWS IAM NotFound  new ","Excon Response  new ","Excon Response  new  body= ","instance_profile dup  [] map! "," data [] []  [] map! ","instance_profile dup  [] "," data [] []  [] ","instance_profile dup  dup "," data [] []  dup "]}," Fog AWS IAM Mock detach_role_policy":{"type":"method","name":"detach_role_policy","children":[],"call":["response body= ","Fog AWS Mock  request_id ","managed_policy [] ","role [] delete ","role [] "," data [] [] "," data [] "," data "," raise ","Fog AWS IAM NotFound  new "," data [] key? ","policy_arn nil? ","Excon Response  new ","Excon Response  new  body= "," data [] []  [] "," data [] []  [] delete "]}," Fog AWS IAM Mock delete_policy":{"type":"method","name":"delete_policy","children":[],"call":["response body= ","Fog AWS Mock  request_id "," data [] delete "," data [] "," data "," raise ","Fog AWS IAM NotFound  new ","policy nil? "," data [] [] ","Excon Response  new ","Excon Response  new  body= "," data [] []  nil? "]}," Fog AWS IAM Mock delete_instance_profile":{"type":"method","name":"delete_instance_profile","children":[],"call":["response body= ","Fog AWS Mock  request_id "," data [] delete "," data [] "," data "," raise ","Fog AWS IAM NotFound  new "," data [] [] ","Excon Response  new ","Excon Response  new  body= "]}," Fog AWS IAM Mock create_policy":{"type":"method","name":"create_policy","children":[],"call":["response body= ","Fog AWS Mock  request_id "," data [] []= "," data [] "," data ","Time  now utc ","Time  now ","Fog Mock  random_hex ","Fog AWS Mock  owner_id ","Excon Response  new ","Excon Response  new  body= "]}," Fog AWS IAM Mock create_instance_profile":{"type":"method","name":"create_instance_profile","children":[],"call":["response body= ","Fog AWS Mock  request_id "," data [] []= "," data [] "," data ","Fog Mock  random_hex ","Time  now utc ","Time  now ","Fog AWS Mock  owner_id ","Excon Response  new ","Excon Response  new  body= "]}," Fog AWS IAM Mock attach_role_policy":{"type":"method","name":"attach_role_policy","children":[],"call":["response body= ","Fog AWS Mock  request_id ","managed_policy [] ","role [] << ","role [] "," data [] [] "," data [] "," data "," raise ","Fog AWS IAM NotFound  new ","policy_arn nil? ","Excon Response  new ","Excon Response  new  body= "," data [] []  [] "," data [] []  [] << "]}," Fog AWS IAM Mock add_role_to_instance_profile":{"type":"method","name":"add_role_to_instance_profile","children":[],"call":["response body= ","Fog AWS Mock  request_id ","profile [] << ","profile [] "," raise ","Fog AWS IAM NotFound  new "," data [] [] "," data [] "," data ","Excon Response  new ","Excon Response  new  body= "," data [] []  [] << "," data [] []  [] "]}," Fog AWS IAM Role instance_profiles":{"type":"method","name":"instance_profiles","children":[],"call":[" service instance_profiles load "," service list_instance_profiles_for_role body [] "," service list_instance_profiles_for_role body "," service list_instance_profiles_for_role "," rolename "," service "," service instance_profiles "," requires "]}," Fog AWS IAM Role attached_policies":{"type":"method","name":"attached_policies","children":[],"call":[" service managed_policies "," rolename "," service "," requires "]}," Fog AWS IAM Role detach":{"type":"method","name":"detach","children":[],"call":[" service detach_role_policy "," rolename "," service ","policy_or_arn arn ","policy_or_arn respond_to? "," requires ","policy_or_policy_or_arn arn  policy_or_arn arn  ","policy_or_policy_or_arn arn  respond_to? "]}," Fog AWS IAM Role attach":{"type":"method","name":"attach","children":[],"call":[" service attach_role_policy "," rolename "," service ","policy_or_arn arn ","policy_or_arn respond_to? "," requires ","policy_or_policy_or_arn arn  policy_or_arn arn  ","policy_or_policy_or_arn arn  respond_to? "]}," Fog AWS IAM ManagedPolicy destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_policy "," arn "," service "," requires "]}," Fog AWS IAM ManagedPolicy save":{"type":"method","name":"save","children":[],"call":[" merge_attributes "," service create_policy body [] "," service create_policy body "," service create_policy "," description "," path "," policy_document "," name "," service "," requires "]}," Fog AWS IAM ManagedPolicy reload":{"type":"method","name":"reload","children":[],"call":[" service managed_policies get "," arn "," service managed_policies "," service "]}," Fog AWS IAM ManagedPolicies all_by_role":{"type":"method","name":"all_by_role","children":[],"call":[" service get_policy body [] "," service get_policy body "," service get_policy ","policy [] "," service ","body [] map ","body [] "," merge_attributes "," service list_attached_role_policies body "," service list_attached_role_policies "," page_params "," service get_policy  service list_attached_role_policies body  [] "," service get_policy  service list_attached_role_policies body  "," service list_attached_role_policies body  [] map "," service list_attached_role_policies body  [] "," service list_attached_role_policies  service list_attached_role_policies body  "]}," Fog AWS IAM InstanceProfiles get":{"type":"method","name":"get","children":[],"call":[" new "," service get_instance_profile body [] "," service get_instance_profile body "," service get_instance_profile "," service "]}," Fog AWS IAM InstanceProfiles all":{"type":"method","name":"all","children":[],"call":[" load ","body [] "," merge_attributes "," service list_instance_profiles body "," service list_instance_profiles "," page_params "," service "," service list_instance_profiles body  [] "," service list_instance_profiles  service list_instance_profiles body  "]}," Fog AWS IAM InstanceProfile save":{"type":"method","name":"save","children":[],"call":[" merge_attributes "," service create_instance_profile body [] "," service create_instance_profile body "," service create_instance_profile "," path "," name "," service "," requires "]}," Fog AWS IAM InstanceProfile destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_instance_profile "," identity "," service "," requires "]}," Fog AWS IAM InstanceProfile remove_role":{"type":"method","name":"remove_role","children":[],"call":[" service remove_role_from_instance_profile "," name "," service "," requires "]}," Fog AWS IAM InstanceProfile add_role":{"type":"method","name":"add_role","children":[],"call":[" service add_role_to_instance_profile "," name "," service "," requires "]}," Fog Compute AWS Mock restore_address_to_classic":{"type":"method","name":"restore_address_to_classic","children":[],"call":[" raise ","Fog Compute AWS NotFound  new ","response body= ","Fog AWS Mock  request_id ","response status= ","address delete ","address []= ","Fog Compute AWS Error  new ","address [] == ","address [] "," data [] [] "," data [] "," data ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  delete "," data [] []  []= "," data [] []  [] == "," data [] []  [] "]}," Fog Compute AWS Real restore_address_to_classic":{"type":"method","name":"restore_address_to_classic","children":[],"call":[" request ","Fog Parsers Compute AWS RestoreAddressToClassic  new "]}," Fog Compute AWS Mock move_address_to_vpc":{"type":"method","name":"move_address_to_vpc","children":[],"call":[" raise ","Fog Compute AWS NotFound  new ","response body= ","Fog AWS Mock  request_id ","response status= ","address []= "," data [] [] "," data [] "," data ","Fog Mock  random_hex ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  []= "]}," Fog Compute AWS Real move_address_to_vpc":{"type":"method","name":"move_address_to_vpc","children":[],"call":[" request ","Fog Parsers Compute AWS MoveAddressToVpc  new "]}," Fog Compute AWS Mock describe_spot_instance_requests":{"type":"method","name":"describe_spot_instance_requests","children":[],"call":["response body= ","Fog AWS Mock  request_id "," data [] []= ","request [] "," data [] "," data ","request []= ","instances first [] [] ","instances first [] ","instances first "," run_instances body [] "," run_instances body "," run_instances ","request [] [] ","request [] [] first ","(send\n  (lvar :spot_requests) :select) each ","r [] nil? ","r [] ","spot_requests select ","r [] == "," Array first "," Array ","filters [] "," data [] values ","Excon Response  new ","Excon Response  new  body= ","Fog AWS Mock  request_ Array first  "," run_instances body []  first [] [] "," run_instances body []  first [] "," run_instances body []  first "," run_ run_instances body []  body [] "," run_ run_instances body []  body "," run_ run_instances body []  ","(send\n  (lvar : data [] values ) :select) each "," data [] values  select "]}," Fog Compute AWS Mock cancel_spot_instance_requests":{"type":"method","name":"cancel_spot_instance_requests","children":[],"call":["response body= ","Fog AWS Mock  request_id ","spot_request []= ","spot_request [] []= ","spot_request [] "," raise ","Fog Compute AWS NotFound  new "," data [] [] "," data [] "," data ","Excon Response  new ","Excon Response  new  body= "," data [] []  []= "," data [] []  [] []= "," data [] []  [] "]}," Fog Parsers Compute AWS RestoreAddressToClassic end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog Parsers Compute AWS MoveAddressToVpc end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog Compute AWS Subnet network_interfaces":{"type":"method","name":"network_interfaces","children":[],"call":[" service network_interfaces all "," identity "," service network_interfaces "," service "]}," Fog Compute AWS Address change_scope":{"type":"method","name":"change_scope","children":[],"call":[" domain == "," domain "," wait_for "," service restore_address_to_classic "," identity "," service "," service move_address_to_vpc "]}," Fog Compute AWS Mock modify_volume":{"type":"method","name":"modify_volume","children":[],"call":["response body= ","Fog AWS Mock  request_id "," data [] []= "," data [] "," data ","volume_modification merge! ","options [] ","volume [] "," raise ","Fog Compute AWS Error  new ","options [] == ","Time  now ","volume [] == "," data [] [] ","Excon Response  new ","Excon Response  new  body= "," data [] [] _modification merge! "," data [] []  [] "," data [] []  [] == "]}," Fog Compute AWS Real modify_volume":{"type":"method","name":"modify_volume","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ModifyVolume\")) merge ","Fog Parsers Compute AWS ModifyVolume  new "]}," Fog Compute AWS Mock enable_vpc_classic_link_dns_support":{"type":"method","name":"enable_vpc_classic_link_dns_support","children":[],"call":["response body= ","Fog AWS Mock  request_id ","vpc []= "," raise ","Fog Compute AWS NotFound  new ","v [] == ","v [] "," data [] find "," data [] "," data ","Excon Response  new ","Excon Response  new  body= "]}," Fog Compute AWS Real enable_vpc_classic_link_dns_support":{"type":"method","name":"enable_vpc_classic_link_dns_support","children":[],"call":[" request ","Fog Parsers Compute AWS Basic  new "]}," Fog Compute AWS Mock disable_vpc_classic_link_dns_support":{"type":"method","name":"disable_vpc_classic_link_dns_support","children":[],"call":["response body= ","Fog AWS Mock  request_id ","vpc []= "," raise ","Fog Compute AWS NotFound  new ","v [] == ","v [] "," data [] find "," data [] "," data ","Excon Response  new ","Excon Response  new  body= "]}," Fog Compute AWS Real disable_vpc_classic_link_dns_support":{"type":"method","name":"disable_vpc_classic_link_dns_support","children":[],"call":[" request ","Fog Parsers Compute AWS Basic  new "]}," Fog Compute AWS Mock describe_vpc_classic_link_dns_support":{"type":"method","name":"describe_vpc_classic_link_dns_support","children":[],"call":["response body= ","v [] ","vpcs map ","options [] include? ","options [] ","vpcs select "," data [] "," data ","Excon Response  new ","Excon Response  new  body= "," data []  map "," data []  select "]}," Fog Compute AWS Real describe_vpc_classic_link_dns_support":{"type":"method","name":"describe_vpc_classic_link_dns_support","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeVpcClassicLinkDnsSupport\")) merge ","Fog Parsers Compute AWS DescribeVpcClassicLinkDnsSupport  new ","options [] ","params merge! ","Fog AWS  indexed_param "]}," Fog Compute AWS Mock describe_volumes_modifications":{"type":"method","name":"describe_volumes_modifications","children":[],"call":["response body= ","Fog AWS Mock  request_id ","modification []= ","Time  now "," data [] []= ","modification [] "," data [] "," data ","volume []= ","attribute_aliases [] ","(str \"targetSize\") each "," data [] [] ","modification_set each ","(splat\n  (lvar :filter_value)) include? ! ","(splat\n  (lvar :filter_value)) include? ","m [] ","modification_set reject ","aliases [] "," data [] values ","Excon Response  new ","Excon Response  new  body= "," data [] []  []= "," data [] values  each "," data [] values  reject "]}," Fog Compute AWS Real describe_volumes_modifications":{"type":"method","name":"describe_volumes_modifications","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeVolumesModifications\")) merge ","Fog Parsers Compute AWS DescribeVolumesModifications  new ","params merge! ","Fog AWS  indexed_filters ","Fog AWS  indexed_param ","filters delete "]}," Fog Parsers Compute AWS ModifyVolume end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@response [] []= "," value to_i ","@response [] ","Time  parse "]}," Fog Parsers Compute AWS ModifyVolume reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Compute AWS DescribeVpcClassicLinkDnsSupport end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] << ","@response [] ","@vpc []= "," value == "," value "]}," Fog Parsers Compute AWS DescribeVpcClassicLinkDnsSupport reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers Compute AWS DescribeVolumesModifications end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] << ","@modification dup ","@response [] ","@response []= "," value ","@modification []= "," value to_i ","Time  parse "]}," Fog Parsers Compute AWS DescribeVolumesModifications reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Compute AWS VPC disable_classic_link_dns":{"type":"method","name":"disable_classic_link_dns","children":[],"call":[" service disable_vpc_classic_link_dns_support body [] "," service disable_vpc_classic_link_dns_support body "," service disable_vpc_classic_link_dns_support "," identity "," service "," requires "]}," Fog Compute AWS VPC enable_classic_link_dns":{"type":"method","name":"enable_classic_link_dns","children":[],"call":[" service enable_vpc_classic_link_dns_support body [] "," service enable_vpc_classic_link_dns_support body "," service enable_vpc_classic_link_dns_support "," identity "," service "," requires "]}," Fog Compute AWS VPC classic_link_dns_enabled?":{"type":"method","name":"classic_link_dns_enabled?","children":[],"call":[" service describe_vpc_classic_link_dns_support body [] first [] "," service describe_vpc_classic_link_dns_support body [] first "," service describe_vpc_classic_link_dns_support body [] "," service describe_vpc_classic_link_dns_support body "," service describe_vpc_classic_link_dns_support "," identity "," service "," requires "]}," Fog Compute AWS VPC disable_classic_link":{"type":"method","name":"disable_classic_link","children":[],"call":[" service disable_vpc_classic_link body [] "," service disable_vpc_classic_link body "," service disable_vpc_classic_link "," identity "," service "," requires "]}," Fog Compute AWS VPC enable_classic_link":{"type":"method","name":"enable_classic_link","children":[],"call":[" service enable_vpc_classic_link body [] "," service enable_vpc_classic_link body "," service enable_vpc_classic_link "," identity "," service "," requires "]}," Fog Compute AWS VPC classic_link_enabled?":{"type":"method","name":"classic_link_enabled?","children":[],"call":[" service describe_vpc_classic_link body [] first [] "," service describe_vpc_classic_link body [] first "," service describe_vpc_classic_link body [] "," service describe_vpc_classic_link body "," service describe_vpc_classic_link "," identity "," service "," requires "]}," Fog Compute AWS Volume modifications":{"type":"method","name":"modifications","children":[],"call":[" service describe_volumes_modifications body [] "," service describe_volumes_modifications body "," service describe_volumes_modifications "," identity "," service "," requires "]}," Fog Compute AWS Volume modification_in_progress?":{"type":"method","name":"modification_in_progress?","children":[],"call":["m [] != ","m [] "," modifications any? "," modifications "]}," Fog AWS ServiceMapper services":{"type":"method","name":"services","children":[],"call":[]}," Fog AWS ServiceMapper []":{"type":"method","name":"[]","children":[],"call":[]}," Fog AWS ServiceMapper class_for":{"type":"method","name":"class_for","children":[],"call":[]}," Fog AWS Mock default_vpc_for":{"type":"method","name":"default_vpc_for","children":[],"call":[]}," Fog AWS Mock route_table_id":{"type":"method","name":"route_table_id","children":[],"call":[]}," Fog Compute AWS Mock setup_default_vpc!":{"type":"method","name":"setup_default_vpc!","children":[],"call":[" data [] << ","Fog AWS Mock  subnet_id "," data [] "," data ","(send\n  (send\n    (send\n      (send nil :describe_availability_zones) :body) :[]\n    (str \"availabilityZoneInfo\")) :map) each_with_index ","z [] "," describe_availability_zones body [] map "," describe_availability_zones body [] "," describe_availability_zones body "," describe_availability_zones ","Fog AWS Mock  route_table_id "," data [] []= ","Fog AWS Mock  internet_gateway_id ","Fog AWS Mock  dhcp_options_id "," default_vpc= ","Fog AWS Mock  default_vpc_for "," region "," disable_ec2_classic "," default_vpc present? "," default_vpc ","Fog AWS Mock  Fog AWS Mock  internet_gateway_id  "]}," Fog Compute AWS Mock default_vpc=":{"type":"method","name":"default_vpc=","children":[],"call":["(send\n  (send\n    (send\n      (self) :data) :[]\n    (sym :account_attributes)) :find) []= ","h [] == ","h [] "," data [] find "," data [] "," data "]}," Fog Compute AWS Mock default_vpc":{"type":"method","name":"default_vpc","children":[],"call":["vpc_id == ","(send\n  (send\n    (send\n      (send nil :describe_account_attributes) :body) :[]\n    (str \"accountAttributeSet\")) :find) [] first ","(send\n  (send\n    (send\n      (send nil :describe_account_attributes) :body) :[]\n    (str \"accountAttributeSet\")) :find) [] ","h [] == ","h [] "," describe_account_attributes body [] find "," describe_account_attributes body [] "," describe_account_attributes body "," describe_account_attributes ","(send\n  (send\n    (send\n      (send nil :describe_account_attributes) :body) :[]\n    (str \"accountAttributeSet\")) :find) [] first  == "]}," Fog Storage AWS DeleteObjectUrl delete_object_url":{"type":"method","name":"delete_object_url","children":[],"call":[" signed_url ","options merge "," raise ","ArgumentError  new "]}," Fog AWS ELB LoadBalancer all_associations_and_attributes":{"type":"method","name":"all_associations_and_attributes","children":[],"call":[" merge "," attributes [] "," attributes "]}," Fog AWS AutoScaling Mock set_instance_protection":{"type":"method","name":"set_instance_protection","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new "," raise ","Fog AWS AutoScaling ValidationError  new "," data [] key? "," data [] "," data ","unexpected_options join ","unexpected_options empty? ","options keys - - - ","ExpectedOptions  [] ","options keys - - ","options keys - ","options keys ","Excon Response  new  body= ","Excon Response  new  status= ","options keys - - -  join ","options keys - - -  empty? "]}," Fog AWS AutoScaling Real set_instance_protection":{"type":"method","name":"set_instance_protection","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"SetInstanceProtection\")) merge! ","Fog Parsers AWS AutoScaling Basic  new ","options delete ","options merge! ","AWS  indexed_param "]}," Fog AWS AutoScaling Group set_instance_protection":{"type":"method","name":"set_instance_protection","children":[],"call":[" reload "," service set_instance_protection "," id "," service "," requires "]}," Fog Storage AWS new":{"type":"method","name":"new","children":[],"call":[]}," Fog AWS Storage Real stringify_query_keys":{"type":"method","name":"stringify_query_keys","children":[],"call":["params []= ","Hash  [] ","k to_s ","params [] map ","params [] "]}," Fog AWS Storage Real signature_v2":{"type":"method","name":"signature_v2","children":[],"call":["Base64  encode64 chomp! ","Base64  encode64 ","@hmac sign ","string_to_sign << ","canonical_resource << ","params [] ","/ + ","canonical_path [] != ","canonical_path [] ","(or\n  (send\n    (lvar :params) :[]\n    (sym :path))\n  (send nil :object_to_path\n    (send\n      (lvar :params) :[]\n      (sym :object_name)))) to_s "," object_to_path ","? + ","query_args join ","query_args any? ","query_args << ","params [] [] ","VALID_QUERY_KEYS  include? ","params [] keys sort ","params [] keys ","canonical_amz_headers << ","x [] <=> ","y [] ","x [] ","amz_headers sort ","amz_headers []= ","key [] == ","key [] ","headers [] ","params [] to_s upcase ","params [] to_s ","/ +  [] != ","(or\n  (send\n    (lvar :params) :[]\n    (sym :path))\n  (send nil :object_to_path\n    (send\n      (lvar :params) :[]\n      (sym :object_name)))) to_s  [] != ","/ +  [] ","(or\n  (send\n    (lvar :params) :[]\n    (sym :path))\n  (send nil :object_to_path\n    (send\n      (lvar :params) :[]\n      (sym :object_name)))) to_s  [] "]}," Fog AWS Storage Real S3Streamer sign_chunk":{"type":"method","name":"sign_chunk","children":[],"call":["hmac sign unpack first ","hmac sign unpack ","hmac sign ","string_to_sign strip "," signer derived_hmac "," date "," signer ","OpenSSL Digest SHA256  hexdigest "," signer credential_scope "," date to_iso8601_basic "," signer derived_hmac  sign unpack first "," signer derived_hmac  sign unpack "," signer derived_hmac  sign "," signer derived_ signer derived_hmac  "]}," Fog AWS Storage Real S3Streamer next_chunk":{"type":"method","name":"next_chunk","children":[],"call":[" signature ","data length to_s ","data length "," signature= "," sign_chunk "," finished= ","data nil? "," body read "," body "," body read  length to_s "," body read  length "," body read  nil? "]}," Fog AWS Storage Real S3Streamer call":{"type":"method","name":"call","children":[],"call":[" next_chunk "," finished "]}," Fog AWS Storage Real S3Streamer rewind":{"type":"method","name":"rewind","children":[],"call":[" body rewind "," body "," finished= "," signature= "," initial_signature "]}," Fog AWS Storage Real S3Streamer initialize":{"type":"method","name":"initialize","children":[],"call":["body pos= ","body respond_to? ","body binmode "," signer= "," initial_signature= "," signature= "," date= "," body= "]}," Fog AWS Storage Real _request":{"type":"method","name":"_request","children":[],"call":[" request ","original_params merge ","original_params [] delete ","original_params [] ","Fog AWS SignatureV4  new ","@signature_version == ","(str \"s3[\\\\.\\\\-]([^\\\\.]*).amazonaws.com\") match captures first ","(str \"s3[\\\\.\\\\-]([^\\\\.]*).amazonaws.com\") match captures ","(str \"s3[\\\\.\\\\-]([^\\\\.]*).amazonaws.com\") match ","new_params [] ","Fog Logger  warning ","Regexp  last_match captures first ","Regexp  last_match captures ","Regexp  last_match ","(str \"<Region>([^<]*)</Region>\") match ","new_params []= ","(str \"<Endpoint>([^<]*)</Endpoint>\") match captures first ","(str \"<Endpoint>([^<]*)</Endpoint>\") match captures ","(str \"<Endpoint>([^<]*)</Endpoint>\") match ","(str \"<Bucket>([^<]*)</Bucket>\") match captures first ","(str \"<Bucket>([^<]*)</Bucket>\") match captures ","(str \"<Bucket>([^<]*)</Bucket>\") match ","error response body ","error response ","error response [] ","error response is_a? ","URI  parse host ","URI  parse ","headers [] ","headers has_key? ","error response headers "," connection request "," connection ","error  request  body ","error response error response body  ","error response error response []  ","error  request  ","error  request  [] ","error  request  is_a? ","error  request  headers "]}," Fog AWS Storage Real request":{"type":"method","name":"request","children":[],"call":[" _request ","@instrumentor instrument ","params dup ","params []= ","S3Streamer  new ","signature_components [] ","params delete ","params [] respond_to? ","params [] ","params [] []= ","@signer components_to_header ","@signer signature_components ","params [] [] ","OpenSSL Digest SHA256  hexdigest ","params [] delete ","date to_iso8601_basic ","@signature_version == ","DEFAULT_SCHEME_PORT  [] "," request_params "," signature_v2 ","date to_date_header ","(or\n  (send\n    (lvar :params) :[]\n    (sym :headers))\n  (hash)) dup "," stringify_query_keys ","Fog Time  now "," refresh_credentials_if_expired "," request_params  dup ","params dup  dup "," request_params  []= ","params dup  []= ","@signer signature_components  [] "," request_params  delete ","params dup  delete "," request_params  [] respond_to? ","params dup  [] respond_to? "," request_params  [] ","params dup  [] "," request_params  [] []= ","params dup  [] []= ","@signer @signer signature_components  "," request_params  [] [] ","params dup  [] [] "," request_params  [] delete ","params dup  [] delete ","Fog Time  now  to_iso8601_basic "," request_ request_params  "," request_params dup  ","Fog Time  now  to_Fog Time  now _header ","(or\n  (send\n    (lvar : request_params ) :[]\n    (sym :headers))\n  (hash)) dup ","(or\n  (send\n    (lvar :params dup ) :[]\n    (sym :headers))\n  (hash)) dup "]}," Fog AWS Storage Real connection":{"type":"method","name":"connection","children":[],"call":["Fog XML Connection  new "," reload ","uri == "]}," Fog AWS Storage Real setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":["Fog HMAC  new ","@signature_version == ","Fog AWS SignatureV4  new ","options [] "]}," Fog AWS Storage Real reload":{"type":"method","name":"reload","children":[],"call":["@connection reset "]}," Fog AWS Storage Real initialize":{"type":"method","name":"initialize","children":[],"call":[" setup_credentials ","DEFAULT_SCHEME_PORT  [] ","options [] "," region_to_host ","endpoint port ","endpoint scheme ","endpoint host ","URI  parse "," validate_signature_version! ","options fetch "," require_mime_types "," init_max_copy_chunk_size! "," init_max_put_chunk_size! ","DEFAULT_CONNECTION_OPTIONS  merge ","URI  parse  port ","URI  parse  scheme ","URI  parse  host "]}," Fog AWS Storage Mock signature_v2":{"type":"method","name":"signature_v2","children":[],"call":[]}," Fog AWS Storage Mock setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":["Fog AWS SignatureV4  new ","options [] "]}," Fog AWS Storage Mock reset_data":{"type":"method","name":"reset_data","children":[],"call":[" class data [] delete "," class data [] "," class data "," class "]}," Fog AWS Storage Mock data":{"type":"method","name":"data","children":[],"call":[" class data [] [] "," class data [] "," class data "," class "]}," Fog AWS Storage Mock initialize":{"type":"method","name":"initialize","children":[],"call":[" setup_credentials "," validate_signature_version! ","options fetch ","options [] ","DEFAULT_SCHEME_PORT  [] "," region_to_host ","endpoint port ","endpoint scheme ","endpoint host ","URI  parse "," require_mime_types "," init_max_copy_chunk_size! "," init_max_put_chunk_size! ","URI  parse  port ","URI  parse  scheme ","URI  parse  host "]}," Fog AWS Storage Mock reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog AWS Storage Mock acls":{"type":"method","name":"acls","children":[],"call":[]}," Fog AWS Storage Utils params_to_url":{"type":"method","name":"params_to_url","children":[],"call":["URI Generic  build to_s ","URI Generic  build ","params [] ","(send\n  (send\n    (lvar :params) :[]\n    (sym :query)) :map) join ","(lvar :key) join ","Fog AWS  escape ","value to_s ","params [] map "]}," Fog AWS Storage Utils request_params":{"type":"method","name":"request_params","children":[],"call":["ret delete ","params merge ","(lvar :bucket_name) join ","host start_with? "," bucket_to_path ","params fetch ","params [] ","Fog Logger  warning ","bucket_name =~ ","path_style ! ","scheme == ","COMPLIANT_BUCKET_NAMES  !~ ","/ + ","path [] != ","path [] "," object_to_path "," region_to_host ","DEFAULT_SCHEME_PORT  [] == ","DEFAULT_SCHEME_PORT  [] ","params merge  delete ","(lvar :params [] ) join ","(lvar :bucket_name) join  start_with? ","params fetch  start_with? "," bucket_to_ bucket_to_path  "," bucket_to_/ +  ","params []  =~ "," bucket_to_path _style ! ","/ + _style ! ","params fetch  ! ","params []  == "," bucket_to_path  [] != ","/ +  [] != "," bucket_to_path  [] ","/ +  [] "," object_to_ bucket_to_path  "," object_to_/ +  "," region_to_(lvar :bucket_name) join  "," region_to_params fetch  "," params [] _to_host "]}," Fog AWS Storage Utils escape":{"type":"method","name":"escape","children":[],"call":["% + ","1 unpack join upcase ","1 unpack join ","1 unpack ","H2 * ","1 bytesize ","string gsub "]}," Fog AWS Storage Utils bucket_to_path":{"type":"method","name":"bucket_to_path","children":[],"call":[" escape ","bucket_name to_s "]}," Fog AWS Storage Utils object_to_path":{"type":"method","name":"object_to_path","children":[],"call":["/ + "," escape gsub "," escape ","object_name to_s "]}," Fog AWS Storage Utils region_to_host":{"type":"method","name":"region_to_host","children":[],"call":["region to_s "]}," Fog AWS Storage Utils v2_signed_params_for_url":{"type":"method","name":"v2_signed_params_for_url","children":[],"call":["params [] []= ","params [] ","params []= ","(or\n  (send\n    (lvar :params) :[]\n    (sym :query))\n  (hash)) merge "," request_params "," signature_v2 "," request_params  [] []= "," request_params  [] "," request_params  []= ","(or\n  (send\n    (lvar : request_params ) :[]\n    (sym :query))\n  (hash)) merge "," request_ request_params  ","  signature_v2 _v2 "]}," Fog AWS Storage Utils v4_signed_params_for_url":{"type":"method","name":"v4_signed_params_for_url","children":[],"call":["params []= ","(or\n  (send\n    (lvar :params) :[]\n    (sym :query))\n  (hash)) merge ","params [] ","@signer signature_parameters ","params [] [] ","params fetch ","params [] []= "," request_params ","now to_iso8601_basic ","expires - ","now to_i ","Fog Time  now "," request_params  []= ","(or\n  (send\n    (lvar : request_params ) :[]\n    (sym :query))\n  (hash)) merge "," request_params  [] "," request_params  [] [] "," request_params  fetch "," request_params  [] []= "," request_ request_params  ","Fog Time  now  to_iso8601_basic ","expires -  - ","Fog Time  now  to_i ","Fog Time  Fog Time  now  "]}," Fog AWS Storage Utils validate_signature_version!":{"type":"method","name":"validate_signature_version!","children":[],"call":[" raise ","@signature_version == "]}," Fog AWS Storage Utils signed_url":{"type":"method","name":"signed_url","children":[],"call":[" params_to_url "," v2_signed_params_for_url "," v4_signed_params_for_url ","@signature_version == ","expires to_i "," refresh_credentials_if_expired ","  v2_signed_params_for_url _to_url ","  v4_signed_params_for_url _to_url "," v2_signed_ v2_signed_params_for_url _for_url "," v2_signed_ v4_signed_params_for_url _for_url "," v4_signed_ v2_signed_params_for_url _for_url "," v4_signed_ v4_signed_params_for_url _for_url ","expires to_i  to_i "]}," Fog AWS Storage Utils request_url":{"type":"method","name":"request_url","children":[],"call":[" params_to_url "," request_params ","  request_params _to_url "," request_ request_params  "]}," Fog AWS Storage Utils require_mime_types":{"type":"method","name":"require_mime_types","children":[],"call":[" exit ","Fog Logger  warning "," require "]}," Fog AWS Storage Utils url":{"type":"method","name":"url","children":[],"call":[" https_url ","Fog Logger  deprecation "," caller first "," caller "]}," Fog AWS Storage Utils https_url":{"type":"method","name":"https_url","children":[],"call":[" signed_url ","params merge "]}," Fog AWS Storage Utils http_url":{"type":"method","name":"http_url","children":[],"call":[" signed_url ","params merge "]}," Fog AWS Storage Utils cdn":{"type":"method","name":"cdn","children":[],"call":["Fog AWS CDN  new "]}," Fog AWS Storage Mock validate_options!":{"type":"method","name":"validate_options!","children":[],"call":[" raise "," Fog AWS Storage ALLOWED_UPLOAD_PART_OPTIONS  include? ","key to_sym ","options keys each ","options keys "]}," Fog AWS Storage Mock byte_range":{"type":"method","name":"byte_range","children":[],"call":["matches [] to_i ","matches [] ","(send\n  (send\n    (lvar :matches) :[]\n    (int 2)) :to_i) min ","range match ","range match  [] to_i ","range match  [] ","(send\n  (send\n    (lvar :range match ) :[]\n    (int 2)) :to_i) min "]}," Fog AWS Storage Mock upload_part_copy":{"type":"method","name":"upload_part_copy","children":[],"call":[" raise ","Excon Errors  status_error ","response status= ","response body= ","Time  parse ","source_object [] ","part_number to_i ","upload_info [] []= ","source_object [] [] ","upload_info [] "," byte_range ","source_object [] length ","Excon Response  new "," get_upload_info ","source_bucket [] [] first ","source_bucket [] [] ","source_bucket [] "," data [] [] "," data [] "," data "," verify_mock_bucket_exists ","copy_source split ","options [] "," validate_options! ","Excon Response  new  status= ","Excon Response  new  body= "," get_upload_info  [] []= "," get_upload_info  [] "," get_ get_upload_info  "," data [] []  [] [] first "," data [] []  [] [] "," data [] []  [] ","options []  split "]}," Fog AWS Storage Real upload_part_copy":{"type":"method","name":"upload_part_copy","children":[],"call":[" request ","Fog Parsers AWS Storage UploadPartCopyObject  new "]}," Fog AWS Storage Mock upload_part":{"type":"method","name":"upload_part","children":[],"call":["response headers []= ","part_number to_s ","response headers ","response status= ","Excon Response  new ","upload_info [] []= ","data [] ","upload_info [] "," get_upload_info "," verify_mock_bucket_exists "," parse_mock_data ","Excon Response  new  headers []= ","Excon Response  new  headers ","Excon Response  new  status= "," get_upload_info  [] []= "," parse_mock_data  [] "," get_upload_info  [] "," get_ get_upload_info  "," parse_mock_ parse_mock_data  "]}," Fog AWS Storage Real upload_part":{"type":"method","name":"upload_part","children":[],"call":[" request ","data [] ","headers []= ","data [] [] ","Fog Storage  parse_data ","Fog Storage  parse_data  [] ","Fog Storage  parse_data  [] [] ","Fog Storage  parse_Fog Storage  parse_data  "]}," Fog AWS Storage Mock sync_clock":{"type":"method","name":"sync_clock","children":[],"call":[]}," Fog AWS Storage Real sync_clock":{"type":"method","name":"sync_clock","children":[],"call":["Fog Time  now= ","Time  parse ","response headers [] ","response headers ","error response "," get_service ","Excon  get "," sync_clock_url "]}," Fog AWS Storage SharedMockMethods store_mock_object":{"type":"method","name":"store_mock_object","children":[],"call":["bucket [] []= ","bucket [] ","bucket [] [] unshift ","bucket [] [] ","bucket [] [] shift ","bucket [] [] first [] == ","bucket [] [] first [] ","bucket [] [] first ","bucket [] == ","object []= ","Fog Mock  random_base64 ","options [] ","Fog Time  now to_date_header ","Fog Time  now ","OpenSSL Digest MD5  hexdigest "]}," Fog AWS Storage SharedMockMethods get_upload_info":{"type":"method","name":"get_upload_info","children":[],"call":[" raise ","Excon Errors  status_error ","response status= ","Excon Response  new ","upload_info ! "," data [] [] [] "," data [] [] "," data [] "," data "," data [] [] delete ","Excon Response  new  status= "," data [] [] []  ! "," data [] [] delete  ! "]}," Fog AWS Storage SharedMockMethods verify_mock_bucket_exists":{"type":"method","name":"verify_mock_bucket_exists","children":[],"call":[" raise ","Excon Errors  status_error ","response status= ","Excon Response  new "," data [] [] "," data [] "," data ","Excon Response  new  status= "]}," Fog AWS Storage SharedMockMethods parse_mock_data":{"type":"method","name":"parse_mock_data","children":[],"call":["data []= ","data [] read ","data [] ","data [] rewind ","data [] eof? ","data [] is_a? ","Fog Storage  parse_data ","Fog Storage  parse_data  []= ","Fog Storage  parse_data  [] read ","Fog Storage  parse_data  [] ","Fog Storage  parse_data  [] rewind ","Fog Storage  parse_data  [] eof? ","Fog Storage  parse_data  [] is_a? ","Fog Storage  parse_Fog Storage  parse_data  "]}," Fog AWS Storage SharedMockMethods define_mock_acl":{"type":"method","name":"define_mock_acl","children":[],"call":[" data [] [] [] []= "," class acls "," class "," data [] [] [] "," data [] [] "," data [] "," data "," raise ","Excon Errors BadRequest  new ","(str \"private\") include? ! ","(str \"private\") include? ","options [] "]}," Fog AWS Storage Mock put_request_payment":{"type":"method","name":"put_request_payment","children":[],"call":[" raise ","Excon Errors  status_error ","response status= ","bucket []= "," data [] [] "," data [] "," data ","Excon Response  new ","Excon Response  new  status= "," data [] []  []= "]}," Fog AWS Storage Real put_request_payment":{"type":"method","name":"put_request_payment","children":[],"call":[" request "]}," Fog AWS Storage PutObjectUrl put_object_url":{"type":"method","name":"put_object_url","children":[],"call":[" signed_url ","options merge "," raise ","ArgumentError  new "]}," Fog AWS Storage Real put_object_tagging":{"type":"method","name":"put_object_tagging","children":[],"call":[" request ","Base64  encode64 chomp! ","Base64  encode64 ","OpenSSL Digest MD5  digest ","(send\n  (lvar :tags) :map) join ","tags map "]}," Fog AWS Storage Mock put_object_acl":{"type":"method","name":"put_object_acl","children":[],"call":[" data [] [] [] []= "," data [] [] [] "," data [] [] "," data [] "," data "," raise ","Excon Errors BadRequest  new ","(str \"private\") include? ! ","(str \"private\") include? ","Fog AWS Storage  hash_to_acl ","acl is_a? "]}," Fog AWS Storage Real put_object_acl":{"type":"method","name":"put_object_acl","children":[],"call":[" request ","headers []= ","Fog Time  now to_date_header ","Fog Time  now ","Base64  encode64 strip ","Base64  encode64 ","OpenSSL Digest MD5  digest "," raise ","Excon Errors BadRequest  new ","(str \"private\") include? ! ","(str \"private\") include? ","Fog AWS Storage  hash_to_acl ","acl is_a? ","query []= ","options delete "]}," Fog AWS Storage Mock put_object":{"type":"method","name":"put_object","children":[],"call":["response headers []= ","object [] ","response headers ","object [] != ","response headers= ","response status= ","Excon Response  new "," store_mock_object ","data [] ","data [] [] ","options [] "," verify_mock_bucket_exists ","Fog AWS Storage Real  conforming_to_us_ascii! ","headers keys grep ","headers keys ","data [] merge! "," parse_mock_data "," define_mock_acl ","Excon Response  new  headers []= ","response data [] merge!  []= "," store_mock_object  [] ","Excon Response  new  headers ","response data [] merge!  "," store_mock_object  [] != ","Excon Response  new  headers= ","response data [] merge! = ","Excon Response  new  status= "," store_mock_ store_mock_object  "," parse_mock_data  [] "," parse_mock_data  [] [] "," verify_mock_ verify_mock_bucket_exists _exists ","data [] merge!  keys grep ","data [] merge!  keys "," parse_mock_data  [] merge! "," parse_mock_ parse_mock_data  "]}," Fog AWS Storage Real put_object":{"type":"method","name":"put_object","children":[],"call":[" request ","data [] "," class conforming_to_us_ascii! ","headers keys grep ","headers keys "," class ","data [] merge! ","Fog Storage  parse_data ","Fog Storage  parse_data  [] ","data [] merge!  keys grep ","data [] merge!  keys ","Fog Storage  parse_data  [] merge! ","Fog Storage  parse_Fog Storage  parse_data  "]}," Fog AWS Storage Real conforming_to_us_ascii!":{"type":"method","name":"conforming_to_us_ascii!","children":[],"call":[]}," Fog AWS Storage Mock put_bucket_website":{"type":"method","name":"put_bucket_website","children":[],"call":[" raise ","Excon Errors  status_error ","response status= "," data [] [] "," data [] "," data ","Excon Response  new ","Excon Response  new  status= "]}," Fog AWS Storage Real put_bucket_website":{"type":"method","name":"put_bucket_website","children":[],"call":[" request ","data << ","options [] ","options merge! ","options []= ","options_to_be_deprecated [] ","Fog Logger  deprecation "," caller first "," caller ","options class ","options is_a? "]}," Fog AWS Storage Mock put_bucket_versioning":{"type":"method","name":"put_bucket_versioning","children":[],"call":[" raise ","Excon Errors  status_error ","response body= ","Fog Mock  random_base64 ","Fog Mock  random_hex ","response status= ","bucket []= ","(str \"Enabled\") include? "," data [] [] "," data [] "," data ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  []= "]}," Fog AWS Storage Real put_bucket_versioning":{"type":"method","name":"put_bucket_versioning","children":[],"call":[" request "]}," Fog AWS Storage Mock put_bucket_tagging":{"type":"method","name":"put_bucket_tagging","children":[],"call":[" raise ","Excon Errors  status_error ","response status= "," data [] []= "," data [] "," data "," data [] [] ","Excon Response  new ","Excon Response  new  status= "]}," Fog AWS Storage Real put_bucket_tagging":{"type":"method","name":"put_bucket_tagging","children":[],"call":[" request ","Base64  encode64 chomp! ","Base64  encode64 ","OpenSSL Digest MD5  digest ","(send\n  (lvar :tags) :map) join ","tags map "]}," Fog AWS Storage Mock put_bucket_policy":{"type":"method","name":"put_bucket_policy","children":[],"call":[" raise ","Fog AWS IAM NotFound  new ","response status= ","response body= ","Fog AWS Mock  request_id ","Excon Response  new tap ","Excon Response  new ","bucket []= "," data [] [] "," data [] "," data "," data [] []  []= "]}," Fog AWS Storage Real put_bucket_policy":{"type":"method","name":"put_bucket_policy","children":[],"call":[" request ","Fog JSON  encode "]}," Fog AWS Storage Mock put_bucket_notification":{"type":"method","name":"put_bucket_notification","children":[],"call":[" raise ","Excon Errors  status_error ","response status= "," data [] []= "," data [] "," data "," data [] [] ","Excon Response  new ","Excon Response  new  status= "]}," Fog AWS Storage Real put_bucket_notification":{"type":"method","name":"put_bucket_notification","children":[],"call":[" request ","Base64  encode64 chomp! ","Base64  encode64 ","OpenSSL Digest MD5  digest ","body gsub! ","builder to_xml "," Event ","func [] "," InvocationRole "," CloudFunction "," Id "," CloudFunctionConfiguration ","notification fetch each ","notification fetch ","queue [] "," Queue "," QueueConfiguration ","topic [] "," Topic "," TopicConfiguration "," NotificationConfiguration ","Nokogiri XML Builder  new ","builder to_xml  gsub! "]}," Fog AWS Storage Real put_bucket_logging":{"type":"method","name":"put_bucket_logging","children":[],"call":[" request ","data << ","grant [] ","grant [] keys sort ","grant [] keys ","logging_status [] each ","logging_status [] ","logging_status [] [] ","logging_status [] empty? "]}," Fog AWS Storage Real put_bucket_lifecycle":{"type":"method","name":"put_bucket_lifecycle","children":[],"call":[" request ","Base64  encode64 chomp! ","Base64  encode64 ","OpenSSL Digest MD5  digest ","body gsub! ","builder to_xml "," Days ","rule [] "," Expiration "," StorageClass ","rule [] [] ","rule [] [] nil? "," Date ","Time  parse utc iso8601 ","Time  parse utc ","Time  parse "," time "," time utc iso8601 "," time utc ","rule [] [] is_a? "," NoncurrentDays "," NoncurrentVersionTransition "," Transition ","rule [] [] utc iso8601 ","rule [] [] utc "," NoncurrentVersoinExpiration "," NoncurrentVersionExpiration "," Status "," Prefix "," ID "," Rule ","lifecycle [] each ","lifecycle [] "," LifecycleConfiguration ","Nokogiri XML Builder  new ","builder to_xml  gsub! "]}," Fog AWS Storage Mock put_bucket_cors":{"type":"method","name":"put_bucket_cors","children":[],"call":[" data [] [] []= ","Fog AWS Storage  hash_to_cors "," data [] [] "," data [] "," data "]}," Fog AWS Storage Real put_bucket_cors":{"type":"method","name":"put_bucket_cors","children":[],"call":[" request ","headers []= ","Fog Time  now to_date_header ","Fog Time  now ","Base64  encode64 strip ","Base64  encode64 ","OpenSSL Digest MD5  digest ","Fog AWS Storage  hash_to_cors "]}," Fog AWS Storage Mock put_bucket_acl":{"type":"method","name":"put_bucket_acl","children":[],"call":[" data [] [] []= "," data [] [] "," data [] "," data "," raise ","Excon Errors BadRequest  new ","(str \"private\") include? ! ","(str \"private\") include? ","Fog AWS Storage  hash_to_acl ","acl is_a? "]}," Fog AWS Storage Real put_bucket_acl":{"type":"method","name":"put_bucket_acl","children":[],"call":[" request ","headers []= ","Fog Time  now to_date_header ","Fog Time  now ","Base64  encode64 strip ","Base64  encode64 ","OpenSSL Digest MD5  digest "," raise ","Excon Errors BadRequest  new ","(str \"private\") include? ! ","(str \"private\") include? ","Fog AWS Storage  hash_to_acl ","acl is_a? "]}," Fog AWS Storage Mock put_bucket":{"type":"method","name":"put_bucket","children":[],"call":[" raise ","Excon Errors  status_error ","Fog Logger  warning "," region ","response status= "," region != "," data [] []= "," data [] "," data "," data [] [] ! "," data [] [] ","bucket []= ","options [] ","Time  now ","Excon Response  new "," data [] [] []= "," class acls "," class ","Excon Errors BadRequest  new ","(str \"private\") include? ! ","(str \"private\") include? ","Excon Response  new  status= "]}," Fog AWS Storage Real put_bucket":{"type":"method","name":"put_bucket","children":[],"call":[" request ","options delete "]}," Fog AWS Storage Mock post_object_restore":{"type":"method","name":"post_object_restore","children":[],"call":["response body= "," get_object "," get_object  body= "]}," Fog AWS Storage Real post_object_restore":{"type":"method","name":"post_object_restore","children":[],"call":[" request ","headers []= ","Fog Time  now to_date_header ","Fog Time  now ","Base64  encode64 strip ","Base64  encode64 ","OpenSSL Digest MD5  digest ","<RestoreRequest xmlns=\"http://s3.amazonaws.com/doc/2006-3-01\"><Days> + + ","<RestoreRequest xmlns=\"http://s3.amazonaws.com/doc/2006-3-01\"><Days> + ","days to_s "," raise ","ArgumentError  new "]}," Fog AWS Storage PostObjectHiddenFields post_object_hidden_fields":{"type":"method","name":"post_object_hidden_fields","children":[],"call":["options []= ","@signer derived_hmac sign unpack first ","@signer derived_hmac sign unpack ","@signer derived_hmac sign ","options [] ","@signer derived_hmac ","date to_iso8601_basic ","Base64  encode64 gsub ","Base64  encode64 ","Fog JSON  encode ","policy merge ","policy [] + ","policy [] ","extra_conditions << ","@signer credential_scope ","Fog Time  now ","options dup ","options dup  []= ","options dup  [] ","Fog Time  now  to_iso8601_basic ","options []  merge ","options []  [] + ","options []  [] ","options dup  dup "]}," Fog AWS Storage Real list_parts":{"type":"method","name":"list_parts","children":[],"call":[" request ","options merge! ","Fog Parsers AWS Storage ListParts  new ","options []= "]}," Fog AWS Storage Real list_multipart_uploads":{"type":"method","name":"list_multipart_uploads","children":[],"call":[" request ","options merge! ","Fog Parsers AWS Storage ListMultipartUploads  new "]}," Fog AWS Storage Mock initiate_multipart_upload":{"type":"method","name":"initiate_multipart_upload","children":[],"call":["response body= ","response status= ","Excon Response  new "," data [] [] []= "," data [] [] "," data [] "," data ","UUID  uuid "," verify_mock_bucket_exists ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Storage Real initiate_multipart_upload":{"type":"method","name":"initiate_multipart_upload","children":[],"call":[" request ","Fog Parsers AWS Storage InitiateMultipartUpload  new "]}," Fog AWS Storage HeadObjectUrl head_object_url":{"type":"method","name":"head_object_url","children":[],"call":[" signed_url ","options merge "," raise ","ArgumentError  new "]}," Fog AWS Storage Mock head_object":{"type":"method","name":"head_object","children":[],"call":["response body= "," get_object "," get_object  body= "]}," Fog AWS Storage Real head_object":{"type":"method","name":"head_object","children":[],"call":[" request ","headers merge! ","headers []= ","Fog Time  at to_date_header ","Fog Time  at ","options [] to_i ","options [] ","options delete "," raise ","ArgumentError  new "]}," Fog AWS Storage Mock head_bucket":{"type":"method","name":"head_bucket","children":[],"call":["response body= "," get_bucket "," get_bucket  body= "]}," Fog AWS Storage Real head_bucket":{"type":"method","name":"head_bucket","children":[],"call":[" request "," raise ","ArgumentError  new "]}," Fog AWS Storage Mock get_service":{"type":"method","name":"get_service","children":[],"call":["response body= ","(str \"CreationDate\") include? ! ","(str \"CreationDate\") include? ","bucket reject "," data [] values map "," data [] values "," data [] "," data ","response headers []= ","response headers ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  headers []= ","Excon Response  new  headers "]}," Fog AWS Storage Real get_service":{"type":"method","name":"get_service","children":[],"call":[" request ","Fog Parsers AWS Storage GetService  new "," region_to_host "]}," Fog AWS Storage Mock get_request_payment":{"type":"method","name":"get_request_payment","children":[],"call":[" raise ","Excon Errors  status_error ","response status= ","response body= ","bucket [] "," data [] [] "," data [] "," data ","Excon Response  new ","Excon Response  new  status= ","Excon Response  new  body= "," data [] []  [] "]}," Fog AWS Storage Real get_request_payment":{"type":"method","name":"get_request_payment","children":[],"call":[" request ","Fog Parsers AWS Storage GetRequestPayment  new "]}," Fog AWS Storage GetObjectUrl get_object_url":{"type":"method","name":"get_object_url","children":[],"call":[" signed_url ","options merge "," raise ","ArgumentError  new "]}," Fog AWS Storage Real get_object_torrent":{"type":"method","name":"get_object_torrent","children":[],"call":[" request "," raise ","ArgumentError  new "]}," Fog AWS Storage Real get_object_tagging":{"type":"method","name":"get_object_tagging","children":[],"call":[" request ","Fog Parsers AWS Storage GetObjectTagging  new "," raise ","ArgumentError  new "]}," Fog AWS Storage GetObjectHttpsUrl get_object_https_url":{"type":"method","name":"get_object_https_url","children":[],"call":[" get_object_url ","options merge "]}," Fog AWS Storage GetObjectHttpUrl get_object_http_url":{"type":"method","name":"get_object_http_url","children":[],"call":[" get_object_url ","options merge "]}," Fog AWS Storage Mock get_object_acl":{"type":"method","name":"get_object_acl","children":[],"call":[" raise ","Excon Errors  status_error ","response status= ","response body= ","Fog AWS Storage  acl_to_hash ","acl is_a? "," data [] [] [] [] "," data [] [] [] "," data [] [] "," data [] "," data ","Excon Response  new ","Excon Response  new  status= ","Excon Response  new  body= "]}," Fog AWS Storage Real get_object_acl":{"type":"method","name":"get_object_acl","children":[],"call":[" request ","Fog Parsers AWS Storage AccessControlList  new ","query []= ","options delete "," raise ","ArgumentError  new "]}," Fog AWS Storage Mock byte_ranges":{"type":"method","name":"byte_ranges","children":[],"call":["ranges << ","r0 <= ","size - ","r1 >= ","r1 < ","r1 to_i ","r1 empty? ","r0 to_i ","(send\n  (lvar :size) :-\n  (send\n    (lvar :r1) :to_i)) max ","r0 empty? ","matches [] ","range_spec match ","http_range split each ","http_range split ","r0 to_i  <= ","(send\n  (lvar :size) :-\n  (send\n    (lvar :r1) :to_i)) max  <= ","size -  >= ","r1 to_i  >= ","size -  < ","r1 to_i  < ","size -  to_i ","r1 to_i  to_i ","size -  empty? ","r1 to_i  empty? ","r0 to_i  to_i ","(send\n  (lvar :size) :-\n  (send\n    (lvar :r1) :to_i)) max  to_i ","(send\n  (lvar :size) :-\n  (send\n    (lvar :size - ) :to_i)) max ","(send\n  (lvar :size) :-\n  (send\n    (lvar :r1 to_i ) :to_i)) max ","r0 to_i  empty? ","(send\n  (lvar :size) :-\n  (send\n    (lvar :r1) :to_i)) max  empty? ","range_spec match  [] "]}," Fog AWS Storage Mock get_object":{"type":"method","name":"get_object","children":[],"call":[" raise ","Excon Errors  status_error ","response body= ","response status= ","Fog Mock  random_base64 ","Fog Mock  random_hex ","object ! ","block call ","data read ","(lvar :remaining) min ","remaining > ","data length ","StringIO  new "," block_given? ","body [] ","ranges first ","ranges empty? ","ranges nil? "," byte_ranges ","body size ","options [] ","object [] ","response headers []= ","response headers ","bucket [] ","options [] < ","Time  parse ","options [] == ","options [] >= ","options [] != ","object [] ! ","bucket [] [] first ","bucket [] [] ","object [] == ","bucket [] [] find ","bucket [] key? "," data [] [] "," data [] "," data ","Excon Response  new ","ArgumentError  new ","options delete ","response body [] = ","response object [] = ","Excon Response  new  body= ","Excon Response  new  status= ","bucket [] [] first  ! ","StringIO  new  read ","StringIO  new  length ","body []  [] ","object []  [] "," byte_ranges  first "," byte_ranges  empty? "," byte_ranges  nil? "," byte_ byte_ranges  ","body []  size ","object []  size ","bucket [] [] first  [] ","Excon Response  new  headers []= ","Excon Response  new  headers "," data [] []  [] ","bucket [] [] first  [] ! "," data [] []  [] [] first "," data [] []  [] [] ","bucket [] [] first  [] == "," data [] []  [] [] find "," data [] []  [] key? "," StringIO  new  [] [] "," StringIO  new  [] "," StringIO  new  "]}," Fog AWS Storage Real get_object":{"type":"method","name":"get_object","children":[],"call":[" request ","params merge! ","params []= ","Proc  new "," block_given? ","params [] []= ","Fog Time  at to_date_header ","Fog Time  at ","options [] to_i ","options [] ","params [] ","params [] merge! ","params [] merge ","options delete "," raise ","ArgumentError  new "]}," Fog AWS Storage Real get_bucket_website":{"type":"method","name":"get_bucket_website","children":[],"call":[" request ","Fog Parsers AWS Storage GetBucketWebsite  new "," raise ","ArgumentError  new "]}," Fog AWS Storage Mock get_bucket_versioning":{"type":"method","name":"get_bucket_versioning","children":[],"call":[" raise ","Excon Errors  status_error ","response body= ","Fog Mock  random_base64 ","Fog Mock  random_hex ","response status= ","bucket [] "," data [] [] "," data [] "," data ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  [] "]}," Fog AWS Storage Real get_bucket_versioning":{"type":"method","name":"get_bucket_versioning","children":[],"call":[" request ","Fog Parsers AWS Storage GetBucketVersioning  new "," raise ","ArgumentError  new "]}," Fog AWS Storage Mock get_bucket_tagging":{"type":"method","name":"get_bucket_tagging","children":[],"call":[" raise ","Excon Errors  status_error ","response status= ","response body= "," data [] [] "," data [] "," data ","Excon Response  new ","Excon Response  new  status= ","Excon Response  new  body= "]}," Fog AWS Storage Real get_bucket_tagging":{"type":"method","name":"get_bucket_tagging","children":[],"call":[" request ","Fog Parsers AWS Storage GetBucketTagging  new "," raise ","ArgumentError  new "]}," Fog AWS Storage Real get_bucket_policy":{"type":"method","name":"get_bucket_policy","children":[],"call":["response body= ","Fog JSON  decode ","response body ","response body nil? "," request "," raise ","ArgumentError  new "," request  body= "," request  body "," request  body nil? "]}," Fog AWS Storage Mock get_bucket_object_versions":{"type":"method","name":"get_bucket_object_versions","children":[],"call":[" raise ","Excon Errors  status_error ","response body= ","Fog Mock  random_base64 ","Fog Mock  random_hex ","response status= ","response body []= ","response body [] [] ","response body [] ","response body ","max_keys < ","response body [] length ","bucket [] ","truncated_contents size != ","contents size ","truncated_contents size ","contents [] ","(lvar :max_keys) min ","data [] []= ","object [] to_i ","object [] ","data [] ","tag_name == ","data [] merge! ","object == ","bucket [] [] first ","bucket [] [] ","Time  parse ","data []= ","extracted_attrs include? ! ","extracted_attrs include? ","object reject ","object key? ","(send\n  (send\n    (block\n      (send\n        (send\n          (send\n            (send\n              (lvar :bucket) :[]\n              (sym :objects)) :keys) :sort) :map)\n      (args\n        (arg :key))\n      (send\n        (send\n          (lvar :bucket) :[]\n          (sym :objects)) :[]\n        (lvar :key))) :flatten) :reject) map "," common_prefixes << ","object [] sub "," common_prefixes ","object [] [] include? ","object [] [] ","prefix length ","object [] <= ","object [] [] != ","(send\n  (send\n    (send\n      (send\n        (lvar :bucket) :[]\n        (sym :objects)) :keys) :sort) :map) flatten reject ","(send\n  (send\n    (send\n      (send\n        (lvar :bucket) :[]\n        (sym :objects)) :keys) :sort) :map) flatten ","bucket [] keys sort map ","bucket [] keys sort ","bucket [] keys "," data [] [] "," data [] "," data ","key_marker ! ","Excon Response  new ","ArgumentError  new ","options [] ","Excon Response  new  body= ","Excon Response  new  status= ","Excon Response  new  body []= ","Excon Response  new  body [] [] ","Excon Response  new  body [] ","Excon Response  new  body ","Excon Response  new  body [] length "," data [] []  [] ","contents []  size != ","truncated_contents (lvar :max_keys) min  != ","contents (lvar :max_keys) min  ","contents []  size ","truncated_contents (lvar :max_keys) min  "," data [] []  [] [] first "," data [] []  [] [] ","(send\n  (send\n    (block\n      (send\n        (send\n          (send\n            (send\n              (lvar : data [] [] ) :[]\n              (sym :objects)) :keys) :sort) :map)\n      (args\n        (arg :key))\n      (send\n        (send\n          (lvar : data [] [] ) :[]\n          (sym :objects)) :[]\n        (lvar :key))) :flatten) :reject) map ","(send\n  (send\n    (send\n      (send\n        (lvar : data [] [] ) :[]\n        (sym :objects)) :keys) :sort) :map) flatten reject ","(send\n  (send\n    (send\n      (send\n        (lvar : data [] [] ) :[]\n        (sym :objects)) :keys) :sort) :map) flatten "," data [] []  [] keys sort map "," data [] []  [] keys sort "," data [] []  [] keys "]}," Fog AWS Storage Real get_bucket_object_versions":{"type":"method","name":"get_bucket_object_versions","children":[],"call":[" request ","(pair\n  (str \"versions\")\n  (nil)) merge! ","Fog Parsers AWS Storage GetBucketObjectVersions  new "," raise ","ArgumentError  new "]}," Fog AWS Storage Mock get_bucket_notification":{"type":"method","name":"get_bucket_notification","children":[],"call":[" raise ","Excon Errors  status_error ","response status= ","response body= "," data [] [] "," data [] "," data ","Excon Response  new ","Excon Response  new  status= ","Excon Response  new  body= "]}," Fog AWS Storage Real get_bucket_notification":{"type":"method","name":"get_bucket_notification","children":[],"call":[" request ","Fog Parsers AWS Storage GetBucketNotification  new "," raise ","ArgumentError  new "]}," Fog AWS Storage Real get_bucket_logging":{"type":"method","name":"get_bucket_logging","children":[],"call":[" request ","Fog Parsers AWS Storage GetBucketLogging  new "," raise ","ArgumentError  new "]}," Fog AWS Storage Mock get_bucket_location":{"type":"method","name":"get_bucket_location","children":[],"call":[" raise ","Excon Errors  status_error ","response status= ","response body= ","bucket [] "," data [] [] "," data [] "," data ","Excon Response  new ","Excon Response  new  status= ","Excon Response  new  body= "," data [] []  [] "]}," Fog AWS Storage Real get_bucket_location":{"type":"method","name":"get_bucket_location","children":[],"call":[" request ","Fog Parsers AWS Storage GetBucketLocation  new "]}," Fog AWS Storage Real get_bucket_lifecycle":{"type":"method","name":"get_bucket_lifecycle","children":[],"call":[" request ","Fog Parsers AWS Storage GetBucketLifecycle  new "]}," Fog AWS Storage Mock get_bucket_cors":{"type":"method","name":"get_bucket_cors","children":[],"call":[" raise ","Excon Errors  status_error ","response status= ","response body= ","Fog AWS Storage  cors_to_hash ","cors is_a? "," data [] [] [] "," data [] [] "," data [] "," data ","Excon Response  new ","Excon Response  new  status= ","Excon Response  new  body= ","Fog AWS Storage   data [] [] [] _to_hash "," data [] [] []  is_a? "]}," Fog AWS Storage Real get_bucket_cors":{"type":"method","name":"get_bucket_cors","children":[],"call":[" request ","Fog Parsers AWS Storage CorsConfiguration  new "," raise ","ArgumentError  new "]}," Fog AWS Storage Mock get_bucket_acl":{"type":"method","name":"get_bucket_acl","children":[],"call":[" raise ","Excon Errors  status_error ","response status= ","response body= ","Fog AWS Storage  acl_to_hash ","acl is_a? "," data [] [] [] "," data [] [] "," data [] "," data ","Excon Response  new ","Excon Response  new  status= ","Excon Response  new  body= ","Fog AWS Storage   data [] [] [] _to_hash "," data [] [] []  is_a? "]}," Fog AWS Storage Real get_bucket_acl":{"type":"method","name":"get_bucket_acl","children":[],"call":[" request ","Fog Parsers AWS Storage AccessControlList  new "," raise ","ArgumentError  new "]}," Fog AWS Storage Mock get_bucket":{"type":"method","name":"get_bucket","children":[],"call":[" raise ","Excon Errors  status_error ","response status= ","response body []= ","response body [] [] ","response body [] ","response body ","max_keys < ","response body [] length ","response body= ","bucket [] ","truncated_contents size != ","contents size ","truncated_contents size ","common_prefixes uniq ","contents [] ","(lvar :max_keys) min ","data merge! ","object [] to_i ","object [] ","Time  parse ","(str \"ETag\") include? ! ","(str \"ETag\") include? ","object reject ","(send\n  (block\n    (send\n      (send\n        (send\n          (send\n            (lvar :bucket) :[]\n            (sym :objects)) :values) :map\n        (block-pass\n          (sym :first))) :sort)\n    (args\n      (arg :x)\n      (arg :y))\n    (send\n      (send\n        (lvar :x) :[]\n        (str \"Key\")) :<=>\n      (send\n        (lvar :y) :[]\n        (str \"Key\")))) :reject) map ","object key? ","common_prefixes << ","object [] sub ","object [] [] include? ","object [] [] ","prefix length ","object [] <= ","object [] [] != ","(send\n  (send\n    (send\n      (send\n        (lvar :bucket) :[]\n        (sym :objects)) :values) :map\n    (block-pass\n      (sym :first))) :sort) reject ","x [] <=> ","y [] ","x [] ","bucket [] values map sort ","bucket [] values map ","bucket [] values "," data [] [] "," data [] "," data ","Excon Response  new ","ArgumentError  new ","options [] ","Excon Response  new  status= ","Excon Response  new  body []= ","Excon Response  new  body [] [] ","Excon Response  new  body [] ","Excon Response  new  body ","Excon Response  new  body [] length ","Excon Response  new  body= "," data [] []  [] ","contents []  size != ","truncated_contents (lvar :max_keys) min  != ","contents (lvar :max_keys) min  ","contents []  size ","truncated_contents (lvar :max_keys) min  ","(send\n  (block\n    (send\n      (send\n        (send\n          (send\n            (lvar : data [] [] ) :[]\n            (sym :objects)) :values) :map\n        (block-pass\n          (sym :first))) :sort)\n    (args\n      (arg :x)\n      (arg :y))\n    (send\n      (send\n        (lvar :x) :[]\n        (str \"Key\")) :<=>\n      (send\n        (lvar :y) :[]\n        (str \"Key\")))) :reject) map ","(send\n  (send\n    (send\n      (send\n        (lvar : data [] [] ) :[]\n        (sym :objects)) :values) :map\n    (block-pass\n      (sym :first))) :sort) reject "," data [] []  [] values map sort "," data [] []  [] values map "," data [] []  [] values "]}," Fog AWS Storage Real get_bucket":{"type":"method","name":"get_bucket","children":[],"call":[" request ","Fog Parsers AWS Storage GetBucket  new "," raise ","ArgumentError  new "]}," Fog AWS Storage DeleteObjectUrl delete_object_url":{"type":"method","name":"delete_object_url","children":[],"call":[" signed_url ","options merge "," raise ","ArgumentError  new "]}," Fog AWS Storage Mock invalid_version_id_payload":{"type":"method","name":"invalid_version_id_payload","children":[],"call":["Fog Mock  random_base64 ","Fog Mock  random_hex "]}," Fog AWS Storage Mock delete_object":{"type":"method","name":"delete_object","children":[],"call":[" raise ","Excon Errors  status_error ","response status= ","response headers []= ","response headers ","bucket [] delete ","bucket [] ","response body= "," invalid_version_id_payload ","version_id != ","delete_marker [] ","bucket [] [] unshift ","bucket [] [] ","bucket [] [] shift ","bucket [] [] first [] == ","bucket [] [] first [] ","bucket [] [] first ","bucket [] == ","Fog Time  now to_date_header ","Fog Time  now ","Fog Mock  random_base64 ","version [] ","bucket [] [] empty? ","bucket [] [] delete ","version_id == ","object [] == ","object [] ","bucket [] [] find ","options delete "," data [] [] "," data [] "," data ","Excon Response  new ","Excon Response  new  status= ","Excon Response  new  headers []= ","Excon Response  new  headers "," data [] []  [] delete "," data [] []  [] ","Excon Response  new  body= "," invalid_options delete _payload ","options delete  != "," data [] []  [] [] unshift "," data [] []  [] [] "," data [] []  [] [] shift "," data [] []  [] [] first [] == "," data [] []  [] [] first [] "," data [] []  [] [] first "," data [] []  [] == "," data [] []  [] [] empty? "," data [] []  [] [] delete ","options delete  == "," data [] []  [] [] find "]}," Fog AWS Storage Real delete_object":{"type":"method","name":"delete_object","children":[],"call":[" request ","options delete "]}," Fog AWS Storage Mock delete_error_body":{"type":"method","name":"delete_error_body","children":[],"call":[]}," Fog AWS Storage Mock delete_object_helper":{"type":"method","name":"delete_object_helper","children":[],"call":["response []= ","bucket [] delete ","bucket [] "," invalid_version_id_payload "," delete_error_body ","version_id != ","delete_marker [] ","bucket [] [] unshift ","bucket [] [] ","bucket [] [] shift ","bucket [] [] first [] == ","bucket [] [] first [] ","bucket [] [] first ","bucket [] == ","Fog Time  now to_date_header ","Fog Time  now ","Fog Mock  random_base64 ","bucket [] [] empty? ","bucket [] [] delete ","version_id == ","object [] == ","object [] ","bucket [] [] find "," invalid_version_id_payload  []= "," delete_error_body  []= "]}," Fog AWS Storage Mock delete_multiple_objects":{"type":"method","name":"delete_multiple_objects","children":[],"call":[" raise ","Excon Errors  status_error ","response status= ","response body [] << "," delete_object_helper ","response body [] ","response body ","object_version each ","object_version is_a? ","version_ids [] ","version_ids nil? ","object_names each ","headers delete ","response body= "," data [] [] "," data [] "," data ","Excon Response  new ","options dup ","Excon Response  new  status= ","Excon Response  new  body [] << ","Excon Response  new  body [] ","Excon Response  new  body ","version_ids []  each ","version_ids []  is_a? ","headers delete  [] ","headers delete  nil? ","options dup  delete ","Excon Response  new  body= "]}," Fog AWS Storage Real delete_multiple_objects":{"type":"method","name":"delete_multiple_objects","children":[],"call":[" request ","Fog Parsers AWS Storage DeleteMultipleObjects  new ","headers []= ","Base64  encode64 gsub ","Base64  encode64 ","OpenSSL Digest MD5  digest ","data bytesize ","data << ","CGI  escapeHTML ","object_version each ","object_version is_a? ","version_ids [] ","version_ids nil? ","object_names each ","headers delete ","options dup ","options dup  []= ","version_ids []  each ","version_ids []  is_a? ","headers delete  [] ","headers delete  nil? ","options dup  delete "]}," Fog AWS Storage Real delete_bucket_website":{"type":"method","name":"delete_bucket_website","children":[],"call":[" request "]}," Fog AWS Storage Mock delete_bucket_tagging":{"type":"method","name":"delete_bucket_tagging","children":[],"call":[" raise ","Excon Errors  status_error ","response status= "," data [] delete "," data [] "," data "," data [] [] ","Excon Response  new ","Excon Response  new  status= "]}," Fog AWS Storage Real delete_bucket_tagging":{"type":"method","name":"delete_bucket_tagging","children":[],"call":[" request "]}," Fog AWS Storage Mock delete_bucket_policy":{"type":"method","name":"delete_bucket_policy","children":[],"call":[" raise ","Excon Errors  status_error "," response ","response status= ","response body= ","Fog AWS Mock  request_id ","Excon Response  new tap ","Excon Response  new ","bucket []= "," data [] [] "," data [] "," data "," data [] []  []= "]}," Fog AWS Storage Real delete_bucket_policy":{"type":"method","name":"delete_bucket_policy","children":[],"call":[" request "]}," Fog AWS Storage Real delete_bucket_lifecycle":{"type":"method","name":"delete_bucket_lifecycle","children":[],"call":[" request "]}," Fog AWS Storage Real delete_bucket_cors":{"type":"method","name":"delete_bucket_cors","children":[],"call":[" request "]}," Fog AWS Storage Mock delete_bucket":{"type":"method","name":"delete_bucket","children":[],"call":["response status= "," data [] delete "," data [] "," data "," raise ","Excon Errors  status_error "," data [] [] [] empty? ! "," data [] [] [] empty? "," data [] [] [] "," data [] [] "," data [] [] nil? ","Excon Response  new ","Excon Response  new  status= "]}," Fog AWS Storage Real delete_bucket":{"type":"method","name":"delete_bucket","children":[],"call":[" request "]}," Fog AWS Storage cors_to_hash":{"type":"method","name":"cors_to_hash","children":[],"call":[]}," Fog AWS Storage hash_to_cors":{"type":"method","name":"hash_to_cors","children":[],"call":[]}," Fog AWS Storage Mock copy_object":{"type":"method","name":"copy_object","children":[],"call":[" raise ","Excon Errors  status_error ","response status= ","response body= ","Time  parse ","target_object [] ","target_bucket [] []= ","target_bucket [] ","target_object merge! ","source_object dup "," data [] [] [] []= "," class acls "," class "," data [] [] [] "," data [] [] "," data [] "," data ","Excon Errors BadRequest  new ","(str \"private\") include? ! ","(str \"private\") include? ","options [] ","source_bucket [] [] first ","source_bucket [] [] ","source_bucket [] ","Excon Response  new ","Excon Response  new  status= ","Excon Response  new  body= ","source_object dup  [] "," data [] []  [] []= "," data [] []  [] ","source_object dup  merge! "," data [] []  [] [] first "," data [] []  [] [] "]}," Fog AWS Storage Real copy_object":{"type":"method","name":"copy_object","children":[],"call":[" request ","Fog Parsers AWS Storage CopyObject  new ","(pair\n  (str \"x-amz-copy-source\")\n  (dstr\n    (str \"/\")\n    (begin\n      (lvar :source_bucket_name))\n    (begin\n      (send nil :object_to_path\n        (lvar :source_object_name))))) merge! "," object_to_path "]}," Fog AWS Storage Mock complete_multipart_upload":{"type":"method","name":"complete_multipart_upload","children":[],"call":["response headers []= ","object [] ","response headers ","object [] != ","response body= ","response status= ","Excon Response  new "," store_mock_object ","upload_info [] ","(send\n  (lvar :parts) :map) join ","upload_info [] [] ","pid to_i ","parts map "," get_upload_info "," verify_mock_bucket_exists ","Excon Response  new  headers []= "," store_mock_object  [] ","Excon Response  new  headers "," store_mock_object  [] != ","Excon Response  new  body= ","response (send\n  (lvar :parts) :map) join = ","Excon Response  new  status= "," store_mock_ store_mock_object  "," get_upload_info  [] "," get_upload_info  [] [] "," get_ get_upload_info  "," verify_mock_ verify_mock_bucket_exists _exists "]}," Fog AWS Storage Real complete_multipart_upload":{"type":"method","name":"complete_multipart_upload","children":[],"call":[" request ","Fog Parsers AWS Storage CompleteMultipartUpload  new ","data length ","data << ","index + ","parts each_with_index "]}," Fog AWS Storage acl_to_hash":{"type":"method","name":"acl_to_hash","children":[],"call":[]}," Fog AWS Storage hash_to_acl":{"type":"method","name":"hash_to_acl","children":[],"call":[]}," Fog AWS Storage Mock abort_multipart_upload":{"type":"method","name":"abort_multipart_upload","children":[],"call":[" raise ","Excon Errors  status_error ","response status= ","Excon Response  new "," get_upload_info "," verify_mock_bucket_exists ","Excon Response  new  status= "," get_ get_upload_info  "]}," Fog AWS Storage Real abort_multipart_upload":{"type":"method","name":"abort_multipart_upload","children":[],"call":[" request "]}," Fog AWS ELBV2 Mock remove_tags":{"type":"method","name":"remove_tags","children":[],"call":[" raise ","Fog AWS ELBV2 NotFound  new ","response body= ","Fog AWS Mock  request_id ","response status= "," data [] [] delete "," data [] [] "," data [] "," data ","keys each ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS ELBV2 Real remove_tags":{"type":"method","name":"remove_tags","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"RemoveTags\")) merge ","Fog AWS  indexed_param ","Fog Parsers AWS ELBV2 Empty  new "]}," Fog AWS ELBV2 Mock describe_tags":{"type":"method","name":"describe_tags","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= "," raise ","Fog AWS ELBV2 NotFound  new "," data [] [] "," data [] "," data ","resource_arns map ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS ELBV2 Real describe_tags":{"type":"method","name":"describe_tags","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeTags\")) merge! ","Fog AWS  indexed_param ","Fog Parsers AWS ELBV2 DescribeTags  new "]}," Fog AWS ELBV2 Mock describe_load_balancers":{"type":"method","name":"describe_load_balancers","children":[],"call":["response body [] []= ","next_marker to_s ","response body [] ","response body ","response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new ","load_balancers [] ","marker + ","load_balancers count - > ","load_balancers count - ","load_balancers count ","options fetch to_i ","options fetch ","values dup "," data [] map "," data [] "," data ","(send\n  (lvar :lb_names) :map) compact ","lb [] dup ","lb [] "," raise ","name == "," data [] find ","lb_names map ","lb_names any? ","options [] ","(lvar :options) flatten ","Fog Logger  deprecation "," caller first "," caller ","options class ","options is_a? ","Excon Response  new  body [] []= ","marker +  to_s ","next_options fetch to_i  to_s ","Excon Response  new  body [] ","Excon Response  new  body ","Excon Response  new  body= ","Excon Response  new  status= ","load_balancers []  [] ","(send\n  (lvar :lb_names) :map) compact  [] ","options fetch to_i  + ","load_balancers []  count - > ","(send\n  (lvar :lb_names) :map) compact  count - > ","load_balancers []  count - ","(send\n  (lvar :lb_names) :map) compact  count - ","load_balancers []  count ","(send\n  (lvar :lb_names) :map) compact  count "]}," Fog AWS ELBV2 Real describe_load_balancers":{"type":"method","name":"describe_load_balancers","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeLoadBalancers\")) merge! ","Fog Parsers AWS ELBV2 DescribeLoadBalancers  new ","options update ","Fog AWS  indexed_param ","options delete ","(lvar :options) flatten ","Fog Logger  deprecation "," caller first "," caller ","options class ","options is_a? "]}," Fog AWS ELBV2 Real describe_listeners":{"type":"method","name":"describe_listeners","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeListeners\")) merge! ","Fog Parsers AWS ELBV2 DescribeListeners  new "]}," Fog AWS ELBV2 Mock create_load_balancer":{"type":"method","name":"create_load_balancer","children":[],"call":["response body= ","Fog AWS Mock  request_id "," data [] []= "," data [] "," data ","Time  now ","options [] ","subnets first [] ","subnets first ","subnet [] ","subnets map ","subnet_ids include? ","e [] ","Fog AWS Compute Mock  data [] [] [] select ","Fog AWS Compute Mock  data [] [] [] ","Fog AWS Compute Mock  data [] [] ","Fog AWS Compute Mock  data [] ","Fog AWS Compute Mock  data ","Hash  [] keys [] ","Hash  [] keys ","Hash  [] ","region_subnets [] ","region_data [] [] any? ","region_data [] [] ","region_data [] ","region_data [] nil? ","Fog AWS Compute Mock  data select ","subnet_ids any? ","Fog AWS Mock  arn ","Fog AWS Mock  key_id ","type [] ","Fog AWS ELBV2 Mock  dns_name "," raise "," data [] key? ","response status= ","Excon Response  new ","Excon Response  new  body= ","Hash  [] keys [] _subnets [] ","Hash  [] keys [] _data [] [] any? ","Hash  [] keys [] _data [] [] ","Hash  [] keys [] _data [] ","Hash  [] keys [] _data [] nil? ","Fog AWS ELBV2 Mock  Fog AWS ELBV2 Mock  dns_name  ","Excon Response  new  status= "]}," Fog AWS ELBV2 Real create_load_balancer":{"type":"method","name":"create_load_balancer","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"CreateLoadBalancer\")) merge! ","Fog Parsers AWS ELBV2 CreateLoadBalancer  new ","params merge! ","Fog AWS  indexed_param ","private_ipv4_address push ","subnet_mapping [] ","allocation_ids push ","subnet_ids push ","options [] each ","options [] ","options [] nil? ","options [] [] ","tag_keys map ","options [] keys sort ","options [] keys ","Fog AWS  serialize_keys ","options [] keys sort  map "]}," Fog AWS ELBV2 Mock add_tags":{"type":"method","name":"add_tags","children":[],"call":[" raise ","Fog AWS ELBV2 NotFound  new ","response body= ","Fog AWS Mock  request_id ","response status= "," data [] [] merge! "," data [] [] "," data [] "," data ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS ELBV2 Real add_tags":{"type":"method","name":"add_tags","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"AddTags\")) merge merge ","Fog AWS  indexed_param ","(pair\n  (str \"Action\")\n  (str \"AddTags\")) merge ","Fog Parsers AWS ELBV2 Empty  new ","tags [] ","keys map ","tags keys sort ","tags keys ","tags keys sort  map ","tags tags keys sort  sort ","tags tags keys sort  "]}," Fog AWS DNS Mock list_resource_record_sets":{"type":"method","name":"list_resource_record_sets","children":[],"call":["response body []= ","next_record [] ","response body ","response body= ","(pair\n  (str \"ResourceRecords\")\n  (send\n    (lvar :r) :[]\n    (sym :resource_records))) merge ","r [] ","r [] [] ","records map ","response status= ","next_record nil? ! ","next_record nil? ","records [] ","a [] gsub <=> ","b [] gsub ","zone [] ","b [] ","a [] gsub ","a [] ","records sort! "," list_all_records ","records each ","options [] gsub ","options [] ","(send\n  (send\n    (send\n      (lvar :zone) :[]\n      (sym :records)) :values) :map) flatten ","r values ","zone [] values map ","zone [] values ","records_type values ","zone [] [] "," raise ","Fog AWS DNS NotFound  new "," data [] [] "," data [] "," data ","Excon Response  new ","(or\n  (send\n    (lvar :options) :[]\n    (sym :max_items))\n  (int 100)) min ","Excon Response  new  body []= ","records []  [] ","Excon Response  new  body ","Excon Response  new  body= ","(pair\n  (str \"ResourceRecords\")\n  (send\n    (lvar :r) :[]\n    (sym :resource_records [] ))) merge ","(pair\n  (str \"ResourceRecords\")\n  (send\n    (lvar :r) :[]\n    (sym :resource_(send\n  (send\n    (send\n      (lvar :zone) :[]\n      (sym :records)) :values) :map) flatten ))) merge ","records []  map ","(send\n  (send\n    (send\n      (lvar :zone) :[]\n      (sym :records)) :values) :map) flatten  map ","Excon Response  new  status= ","records []  nil? ! ","records []  nil? ","(send\n  (send\n    (send\n      (lvar :zone) :[]\n      (sym :records)) :values) :map) flatten  [] ","records []  sort! ","(send\n  (send\n    (send\n      (lvar :zone) :[]\n      (sym :records)) :values) :map) flatten  sort! "," list_all_records []  "," list_all_(send\n  (send\n    (send\n      (lvar :zone) :[]\n      (sym :records)) :values) :map) flatten  ","records []  each ","(send\n  (send\n    (send\n      (lvar :zone) :[]\n      (sym :records)) :values) :map) flatten  each ","(send\n  (send\n    (send\n      (lvar :zone) :[]\n      (sym :records [] )) :values) :map) flatten ","(send\n  (send\n    (send\n      (lvar :zone) :[]\n      (sym :(send\n  (send\n    (send\n      (lvar :zone) :[]\n      (sym :records)) :values) :map) flatten )) :values) :map) flatten ","records [] _type values ","(send\n  (send\n    (send\n      (lvar :zone) :[]\n      (sym :records)) :values) :map) flatten _type values ","zone [] []  values "]}," Fog AWS DNS Mock list_all_records":{"type":"method","name":"list_all_records","children":[],"call":["tmp_records append ","subr [] gsub >= ","subr [] gsub ","zone [] ","subr [] ","subr [] nil? ! ","subr [] nil? ","name nil? ","key start_with? ","key is_a? ","subr is_a? ","record each ","tmp_records push ","record [] gsub >= ","record [] gsub ","record [] ","record [] nil? ! ","record [] nil? "," tap "]}," Fog AWS DNS Real list_resource_record_sets":{"type":"method","name":"list_resource_record_sets","children":[],"call":[" request ","Fog Parsers AWS DNS ListResourceRecordSets  new ","parameters []= ","options each ","zone_id sub ","zone_id sub  sub "]}," Fog AWS DNS Mock list_hosted_zones":{"type":"method","name":"list_hosted_zones","children":[],"call":["response body []= ","next_zone [] ","response body ","response body= ","options [] to_s ","options [] ","z [] ","zones map ","response status= ","Excon Response  new ","next_zone nil? ! ","next_zone nil? "," data [] values [] ","start + "," data [] values "," data [] "," data ","z [] == "," data [] find_index ","options [] nil? ","(or\n  (send\n    (lvar :options) :[]\n    (sym :max_items))\n  (int 100)) min ","Excon Response  new  body []= "," data [] values []  [] ","Excon Response  new  body ","Excon Response  new  body= "," data [] values []  map ","Excon Response  new  status= "," data [] values []  nil? ! "," data [] values []  nil? "]}," Fog AWS DNS Real list_hosted_zones":{"type":"method","name":"list_hosted_zones","children":[],"call":[" request ","Fog Parsers AWS DNS ListHostedZones  new ","parameters []= ","options each "]}," Fog AWS DNS Real list_health_checks":{"type":"method","name":"list_health_checks","children":[],"call":[" request ","Fog Parsers AWS DNS ListHealthChecks  new "]}," Fog AWS DNS Mock get_hosted_zone":{"type":"method","name":"get_hosted_zone","children":[],"call":[" raise ","Fog AWS DNS NotFound  new ","response body= ","Fog AWS Mock  nameservers ","zone [] ","response status= "," data [] [] "," data [] "," data ","Excon Response  new ","Excon Response  new  body= "," data [] []  [] ","Excon Response  new  status= "]}," Fog AWS DNS Real get_hosted_zone":{"type":"method","name":"get_hosted_zone","children":[],"call":[" request ","Fog Parsers AWS DNS GetHostedZone  new ","zone_id sub ","zone_id sub  sub "]}," Fog AWS DNS Real get_health_check":{"type":"method","name":"get_health_check","children":[],"call":[" request ","Fog Parsers AWS DNS HealthCheck  new "]}," Fog AWS DNS Mock get_change":{"type":"method","name":"get_change","children":[],"call":["response body= ","change [] ","(send\n  (lvar :submitted_at) :+\n  (send\n    (const\n      (const nil :Fog) :Mock) :delay)) < ","Time  now ","submitted_at + ","Fog Mock  delay ","Time  parse ","response status= "," raise ","Fog AWS DNS NotFound  new "," data [] [] "," data [] "," data ","Excon Response  new ","Excon Response  new  body= ","(send\n  (lvar :Time  parse ) :+\n  (send\n    (const\n      (const nil :Fog) :Mock) :delay)) < ","Time  parse  + ","Excon Response  new  status= "]}," Fog AWS DNS Real get_change":{"type":"method","name":"get_change","children":[],"call":[" request ","Fog Parsers AWS DNS GetChange  new ","change_id sub ","change_id sub  sub "]}," Fog AWS DNS Mock delete_hosted_zone":{"type":"method","name":"delete_hosted_zone","children":[],"call":[" data [] delete "," data [] "," data ","response body= ","change [] ","response status= "," data [] []= ","Time  now utc iso8601 ","Time  now utc ","Time  now ","Fog AWS Mock  change_id "," raise ","Fog AWS DNS NotFound  new "," data [] [] nil? ! "," data [] [] nil? "," data [] [] ","(lvar :zone_id) find ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS DNS Real delete_hosted_zone":{"type":"method","name":"delete_hosted_zone","children":[],"call":[" request ","Fog Parsers AWS DNS DeleteHostedZone  new ","zone_id sub ","zone_id sub  sub "]}," Fog AWS DNS Real delete_health_check":{"type":"method","name":"delete_health_check","children":[],"call":[" request "]}," Fog AWS DNS Mock create_hosted_zone":{"type":"method","name":"create_hosted_zone","children":[],"call":[" raise ","Fog AWS DNS Error  new ","response body= ","Fog AWS Mock  nameservers ","change [] ","options [] "," data [] []= "," data [] "," data ","Time  now utc iso8601 ","Time  now utc ","Time  now ","Fog AWS Mock  change_id ","Fog AWS Mock  zone_id "," rand to_s "," rand ","response status= ","(send\n  (send\n    (send\n      (send nil :list_hosted_zones) :body) :[]\n    (str \"HostedZones\")) :select) size < "," data [] [] ","(send\n  (send\n    (send\n      (send nil :list_hosted_zones) :body) :[]\n    (str \"HostedZones\")) :select) size ","z [] == ","z [] "," list_hosted_zones body [] select "," list_hosted_zones body [] "," list_hosted_zones body "," list_hosted_zones ","Excon Response  new ","name + ","name end_with? ","Excon Response  new  body= ","Fog AWS Mock  name + servers ","Excon Response  new  status= ","name +  + ","name +  end_with? "]}," Fog AWS DNS Real create_hosted_zone":{"type":"method","name":"create_hosted_zone","children":[],"call":[" request ","Fog Parsers AWS DNS CreateHostedZone  new ","options [] "," rand to_s "," rand "]}," Fog AWS DNS Real create_health_check":{"type":"method","name":"create_health_check","children":[],"call":[" request ","Fog Parsers AWS DNS HealthCheck  new ","builder to_xml to_s ","builder to_xml ","xml FailureThreshold ","options [] ","options has_key? ","xml RequestInterval ","xml SearchString ","xml FullyQualifiedDomainName ","xml ResourcePath ","xml Type ","xml Port ","xml IPAddress ","ip_address nil? ","xml HealthCheckConfig ","xml CallerReference ","SecureRandom  hex ","Time  now to_i to_s ","Time  now to_i ","Time  now ","xml CreateHealthCheckRequest ","Nokogiri XML Builder  new "]}," Fog AWS DNS Mock change_resource_record_sets":{"type":"method","name":"change_resource_record_sets","children":[],"call":[" raise ","Fog AWS DNS NotFound  new ","Fog AWS DNS Error  new ","errors join ","response body= ","change [] "," data [] []= "," data [] "," data ","Time  now utc iso8601 ","Time  now utc ","Time  now ","errors empty? ","errors << ","action_performed ! ","zone [] [] delete nil? ","zone [] [] delete ","zone [] [] ","zone [] ","zone [] [] nil? ! ","zone [] [] nil? ","zone [] [] [] empty? ","zone [] [] [] ","zone [] [] [] delete nil? ","zone [] [] [] delete ","SET_PREFIX  + ","change [] nil? ! ","change [] nil? ","zone [] [] [] nil? ! ","zone [] [] [] nil? ","zone [] [] [] []= ","zone [] [] []= ","(pair\n  (sym :change_id)\n  (lvar :change_id)) merge ","change [] to_s "," record_exist? ! "," record_exist? ","zone [] []= ","change_name + ","change_name end_with? ","change_batch each ","Fog AWS Mock  change_id ","response status= "," data [] [] ","Excon Response  new ","Excon Response  new  body= "," data [] []  [] [] delete nil? "," data [] []  [] [] delete "," data [] []  [] [] "," data [] []  [] "," data [] []  [] [] nil? ! "," data [] []  [] [] nil? "," data [] []  [] [] [] empty? "," data [] []  [] [] [] "," data [] []  [] [] [] delete nil? "," data [] []  [] [] [] delete "," data [] []  [] [] [] nil? ! "," data [] []  [] [] [] nil? "," data [] []  [] [] [] []= "," data [] []  [] [] []= ","(pair\n  (sym :Fog AWS Mock  change_id )\n  (lvar :Fog AWS Mock  change_id )) merge "," data [] []  [] []= ","change_name +  + ","change []  + ","change_name +  end_with? ","change []  end_with? ","Fog AWS Mock  Fog AWS Mock  change_id  ","Excon Response  new  status= "]}," Fog AWS DNS Mock record_exist?":{"type":"method","name":"record_exist?","children":[],"call":["current_records empty? ! ","current_records empty? ","current_records [] nil? ! ","current_records [] nil? ","current_records [] ","change [] ","change [] empty? ! ","change [] empty? ","current_records nil? ","zone [] [] [] ","zone [] [] ","zone [] ","zone [] [] nil? ","zone [] [] []  empty? ! ","zone [] [] []  empty? ","zone [] [] []  [] nil? ! ","zone [] [] []  [] nil? ","zone [] [] []  [] ","zone [] [] []  nil? "]}," Fog AWS DNS Real change_resource_record_sets":{"type":"method","name":"change_resource_record_sets","children":[],"call":[" request ","Fog Parsers AWS DNS ChangeResourceRecordSets  new ","Fog AWS DNS  change_resource_record_sets_data ","AWS  change_resource_record_sets_data "]}," Fog AWS Compute Mock unmonitor_instances":{"type":"method","name":"unmonitor_instances","children":[],"call":["response body= ","memo << ","(splat\n  (lvar :instance_ids)) reduce "," raise ","Fog AWS Compute NotFound  new ","instance [] []= ","instance [] "," data [] [] "," data [] "," data ","(splat\n  (lvar :instance_ids)) each ","response status= ","Excon Response  new ","Excon Response  new  body= ","(splat\n  (lvar : data [] [] _ids)) reduce "," data [] []  [] []= "," data [] []  [] ","(splat\n  (lvar : data [] [] _ids)) each ","Excon Response  new  status= "]}," Fog AWS Compute Real unmonitor_instances":{"type":"method","name":"unmonitor_instances","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"UnmonitorInstances\")) merge! ","Fog Parsers AWS Compute MonitorUnmonitorInstances  new ","Fog AWS  indexed_param "]}," Fog AWS Compute Mock terminate_instances":{"type":"method","name":"terminate_instances","children":[],"call":[" raise ","Fog AWS Compute NotFound  new "," detach_volume ","volume [] ","instance_id include? ","volume [] first [] ","volume [] first "," describe_volumes body [] each "," describe_volumes body [] "," describe_volumes body "," describe_volumes "," disassociate_address ","address [] "," describe_addresses body [] each "," describe_addresses body [] "," describe_addresses body "," describe_addresses ","instance []= ","response body [] << ","instance [] ","response body [] ","response body ","instance [] [] "," data [] []= ","Time  now "," data [] "," data "," data [] [] ","response status= ","response body= ","Fog AWS Mock  request_id ","(send\n  (send\n    (send\n      (send\n        (self) :data) :[]\n      (sym :instances)) :keys) :&\n  (lvar :instance_id)) length == ","instance_id length ","(send\n  (send\n    (send\n      (send\n        (self) :data) :[]\n      (sym :instances)) :keys) :&\n  (lvar :instance_id)) length "," data [] keys & "," data [] keys ","Excon Response  new "," data [] [] _id include? "," data [] []  []= ","Excon Response  new  body [] << "," data [] []  [] ","Excon Response  new  body [] ","Excon Response  new  body "," data [] []  [] [] ","Excon Response  new  status= ","Excon Response  new  body= ","(send\n  (send\n    (send\n      (send\n        (self) :data) :[]\n      (sym : data [] [] s)) :keys) :&\n  (lvar : data [] [] _id)) length == "," data [] [] _id length ","(send\n  (send\n    (send\n      (send\n        (self) :data) :[]\n      (sym : data [] [] s)) :keys) :&\n  (lvar : data [] [] _id)) length "]}," Fog AWS Compute Real terminate_instances":{"type":"method","name":"terminate_instances","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"TerminateInstances\")) merge! ","Fog Parsers AWS Compute TerminateInstances  new ","Fog AWS  indexed_param "]}," Fog AWS Compute Mock stop_instances":{"type":"method","name":"stop_instances","children":[],"call":["response body= ","instance []= ","ia << ","instance [] ","instance_set reduce ","Fog AWS Mock  request_id ","response status= ","Excon Response  new "," raise ","Fog AWS Compute NotFound  new ","instance_ids first ","instance_set empty? ","instance_ids include? ","x [] ","instance_set select "," apply_tag_filters "," data [] values "," data [] "," data "," Array ","Excon Response  new  body= "," apply_tag_filters  reduce "," data [] values  reduce ","Excon Response  new  status= "," Array  first "," apply_tag_filters  empty? "," data [] values  empty? "," Array  include? "," apply_tag_filters  select "," data [] values  select "]}," Fog AWS Compute Real stop_instances":{"type":"method","name":"stop_instances","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"StopInstances\")) merge! ","Fog Parsers AWS Compute StartStopInstances  new ","params merge! ","options [] ","Fog Logger  warning "," caller first "," caller ","options class ","options is_a? ","Fog AWS  indexed_param ","Fog AWS  indexed_param  merge! "]}," Fog AWS Compute Mock start_instances":{"type":"method","name":"start_instances","children":[],"call":["response body= ","instance []= ","ia << ","instance [] ","instance_set reduce ","Fog AWS Mock  request_id ","response status= ","Excon Response  new "," raise ","Fog AWS Compute NotFound  new ","instance_ids first ","instance_set empty? ","instance_ids include? ","x [] ","instance_set select "," apply_tag_filters "," data [] values "," data [] "," data "," Array ","Excon Response  new  body= "," apply_tag_filters  reduce "," data [] values  reduce ","Excon Response  new  status= "," Array  first "," apply_tag_filters  empty? "," data [] values  empty? "," Array  include? "," apply_tag_filters  select "," data [] values  select "]}," Fog AWS Compute Real start_instances":{"type":"method","name":"start_instances","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"StartInstances\")) merge! ","Fog Parsers AWS Compute StartStopInstances  new ","Fog AWS  indexed_param "]}," Fog AWS Compute Mock run_instances":{"type":"method","name":"run_instances","children":[],"call":["response body= ","Fog AWS Mock  request_id "," data [] "," data "," modify_network_interface_attribute "," attach_network_interface data [] [] "," attach_network_interface data [] "," attach_network_interface data "," attach_network_interface "," data [] [] []= ","(send\n  (send\n    (send\n      (self) :data) :[]\n    (sym :subnets)) :find) [] ","subnet [] == ","options [] ","subnet [] "," data [] find "," data [] [] "," data [] []= ","instance merge ","instances_set << ","block_device_mapping first [] ","block_device_mapping first ","Time  now ","Fog AWS Mock  kernel_id ","mapping << ","device fetch "," create_network_interface "," data [] [] [] ","Fog AWS Mock  private_ip_address ","Fog AWS Mock  subnet_id ","(or\n  (send\n    (lvar :options) :[]\n    (str \"NetworkInterfaces\"))\n  (array)) reduce "," create_network_interface body [] [] "," create_network_interface body [] "," create_network_interface body ","(or\n  (send\n    (lvar :options) :[]\n    (str \"HibernationOptions\"))\n  (array)) reduce "," data [] [] merge! "," create_volume data [] [] "," create_volume data [] "," create_volume data "," create_volume ","(or\n  (send\n    (lvar :options) :[]\n    (str \"BlockDeviceMapping\"))\n  (array)) reduce ","Fog AWS Mock  availability_zone ","Fog AWS Mock  instance_id ","min_count times "," raise ","Fog AWS Compute NotFound  new "," describe_key_pairs body [] empty? "," describe_key_pairs body [] "," describe_key_pairs body "," describe_key_pairs ","Fog AWS Mock  reservation_id ","(begin\n  (or\n    (send\n      (lvar :options) :[]\n      (str \"SecurityGroup\"))\n    (str \"default\"))) flatten ","response status= ","Excon Response  new ","Excon Response  new  body= ","Fog AWS Mock  device fetch  ","Fog AWS Mock  Fog AWS Mock  instance_id  ","Fog AWS Mock  Fog AWS Mock  reservation_id  ","Excon Response  new  status= "]}," Fog AWS Compute Real run_instances":{"type":"method","name":"run_instances","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"RunInstances\")) merge! ","Fog Parsers AWS Compute RunInstances  new ","(or\n  (send\n    (send\n      (lvar :options) :[]\n      (str \"ClientToken\")) :nil?)\n  (send\n    (send\n      (lvar :options) :[]\n      (str \"ClientToken\")) :empty?)) ! ","options [] empty? ","options [] ","options [] nil? ","options merge! ","Fog AWS  indexed_param "," format ","network_interfaces each_with_index ","options delete ","options []= ","Base64  encode64 ","hibernation_options each_with_index ","block_device_mapping each_with_index ","tag [] ","tags each_with_index ","val [] ","tag_specifications each_with_index ","options delete  each_with_index ","val []  each_with_index "]}," Fog AWS Compute Mock revoke_security_group_ingress":{"type":"method","name":"revoke_security_group_ingress","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","group [] delete ","group [] ","matching_permission [] empty? ","matching_permission [] ","permission [] "," find_matching_permission ","normalized_permissions each "," normalize_permissions "," verify_permission_options ","group [] != ","Excon Response  new "," raise ","Fog AWS Compute NotFound  new ","v [] == ","v [] "," data [] values find "," data [] values "," data [] "," data ","Fog AWS  parse_security_group_options ","Excon Response  new  body= ","Excon Response  new  status= "," find_matching_permission  [] empty? "," find_matching_permission  [] "," find_ find_matching_permission  "," normalize_permissions  each "," verify_permission_Fog AWS  parse_security_group_options  ","Fog AWS  parse_security_group_Fog AWS  parse_security_group_options  "]}," Fog AWS Compute Real revoke_security_group_ingress":{"type":"method","name":"revoke_security_group_ingress","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"RevokeSecurityGroupIngress\")) merge! ","Fog Parsers AWS Compute Basic  new ","options merge! "," indexed_ip_permissions_params ","options delete ","Fog AWS  parse_security_group_options ","Fog AWS  parse_security_group_options  merge! "," indexed_options delete _params ","Fog AWS  parse_security_group_options  delete ","Fog AWS  parse_security_group_Fog AWS  parse_security_group_options  "]}," Fog AWS Compute Mock revoke_security_group_egress":{"type":"method","name":"revoke_security_group_egress","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","group [] delete ","group [] ","matching_permission [] empty? ","matching_permission [] ","permission [] "," find_matching_permission_egress ","normalized_permissions each "," normalize_permissions "," verify_permission_options ","group [] != ","Excon Response  new "," raise ","Fog AWS Compute NotFound  new ","v [] == ","v [] "," data [] values find "," data [] values "," data [] "," data ","Fog AWS  parse_security_group_options ","Excon Response  new  body= ","Excon Response  new  status= "," find_matching_permission_egress  [] empty? "," find_matching_permission_egress  [] "," find_ find_matching_permission_egress _egress "," normalize_permissions  each "," verify_permission_Fog AWS  parse_security_group_options  ","Fog AWS  parse_security_group_Fog AWS  parse_security_group_options  "]}," Fog AWS Compute Real revoke_security_group_egress":{"type":"method","name":"revoke_security_group_egress","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"RevokeSecurityGroupEgress\")) merge! ","Fog Parsers AWS Compute Basic  new ","options merge! "," indexed_ip_permissions_params ","options delete ","Fog AWS  parse_security_group_options ","Fog AWS  parse_security_group_options  merge! "," indexed_options delete _params ","Fog AWS  parse_security_group_options  delete ","Fog AWS  parse_security_group_Fog AWS  parse_security_group_options  "]}," Fog AWS Compute Mock restore_address_to_classic":{"type":"method","name":"restore_address_to_classic","children":[],"call":[" raise ","Fog AWS Compute NotFound  new ","response body= ","Fog AWS Mock  request_id ","response status= ","address delete ","address []= ","Fog AWS Compute Error  new ","address [] == ","address [] "," data [] [] "," data [] "," data ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  delete "," data [] []  []= "," data [] []  [] == "," data [] []  [] "]}," Fog AWS Compute Real restore_address_to_classic":{"type":"method","name":"restore_address_to_classic","children":[],"call":[" request ","Fog Parsers AWS Compute RestoreAddressToClassic  new "]}," Fog AWS Compute Mock reset_network_interface_attribute":{"type":"method","name":"reset_network_interface_attribute","children":[],"call":[" raise ","Fog AWS Compute NotFound  new ","Fog AWS Compute Error  new "," data [] [] []= "," data [] [] "," data [] "," data ","attribute == ","response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Compute Real reset_network_interface_attribute":{"type":"method","name":"reset_network_interface_attribute","children":[],"call":[" request ","Fog Parsers AWS Compute Basic  new "," raise ","Fog AWS Compute Error  new ","attribute != "]}," Fog AWS Compute Mock request_spot_instances":{"type":"method","name":"request_spot_instances","children":[],"call":["response body= ","Fog AWS Mock  request_id "," data [] []= "," data [] "," data ","Time  now ","options [] ","launch_spec [] merge! ","launch_spec [] ","Fog Mock  not_implemented ","Fog Logger  warning "," caller first "," caller ","options key? ","options is_a? "," raise ","Fog AWS Compute Error  new ","message << ","instance_type ! ","image_id ! ","Fog AWS Compute NotFound  new ","image_id match ! ","image_id match ","(send\n  (lvar :spot_price) :>\n  (int 0)) ! ","spot_price > ","spot_price to_f ","all_instance_types include? ! ","all_instance_types include? ","f id "," flavors map "," flavors ","response status= ","Fog AWS Mock  spot_instance_request_id ","Excon Response  new ","Excon Response  new  body= ","Fog AWS Mock  request_Fog AWS Mock  spot_instance_request_id  ","image_Fog AWS Mock  spot_instance_request_id  ! ","image_Fog AWS Mock  spot_instance_request_id  match ! ","image_Fog AWS Mock  spot_instance_request_id  match ","(send\n  (lvar :spot_price to_f ) :>\n  (int 0)) ! ","spot_price to_f  > ","spot_price to_f  to_f ","f Fog AWS Mock  spot_instance_request_id  ","Excon Response  new  status= ","Fog AWS Mock  spot_instance_request_Fog AWS Mock  spot_instance_request_id  "]}," Fog AWS Compute Real request_spot_instances":{"type":"method","name":"request_spot_instances","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"RequestSpotInstances\")) merge! ","Fog Parsers AWS Compute SpotInstanceRequests  new ","options []= ","options [] iso8601 ","options [] ","options [] is_a? ","Base64  encode64 chomp! ","Base64  encode64 ","options merge! ","Fog AWS  indexed_param ","options delete "," format ","block_device_mapping each_with_index ","options delete  each_with_index "]}," Fog AWS Compute Mock replace_route":{"type":"method","name":"replace_route","children":[],"call":[" raise ","Fog AWS Compute InvalidParameterValue  new ","destination_cidr_block empty? ","Fog AWS Compute NotFound  new ","route_table nil? ","Fog AWS Compute Error  new ","message << ","response body= ","Fog AWS Mock  request_id ","response status= ","route_set []= ","route_set merge! ","routeset [] eql? ","routeset [] ","route_table [] find ","route_table [] ","Excon Response  new ","(send\n  (send\n    (lvar :route_table) :[]\n    (str \"routeSet\")) :find) nil? ","route [] eql? ","route [] ","options [] "," network_interfaces all first nil? "," network_interfaces all first "," network_interfaces all "," network_interfaces ","options [] nil? ! ","options [] nil? "," servers all first nil? "," servers all first "," servers all "," servers "," internet_gateways all first nil? "," internet_gateways all first "," internet_gateways all "," internet_gateways ","route_table nil? ! ","routetable [] eql? ","routetable [] "," data [] find "," data [] "," data ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Compute Real replace_route":{"type":"method","name":"replace_route","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ReplaceRoute\")) merge! ","Fog Parsers AWS Compute Basic  new ","options [] "]}," Fog AWS Compute Mock replace_network_acl_entry":{"type":"method","name":"replace_network_acl_entry","children":[],"call":[" raise ","Fog AWS Compute NotFound  new ","response body= ","Fog AWS Mock  request_id ","response status= "," data [] [] [] << "," data [] [] [] "," data [] [] "," data [] "," data ","data [] []= ","options [] ","data [] ","r [] == ","r [] "," data [] [] [] delete_if ","Fog AWS Compute Error  new "," data [] [] [] find ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Compute Real replace_network_acl_entry":{"type":"method","name":"replace_network_acl_entry","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ReplaceNetworkAclEntry\")) merge! ","Fog Parsers AWS Compute Basic  new "]}," Fog AWS Compute Mock replace_network_acl_association":{"type":"method","name":"replace_network_acl_association","children":[],"call":[" raise ","Fog AWS Compute NotFound  new ","response body= ","Fog AWS Mock  request_id ","response status= "," data [] [] [] << "," data [] [] [] "," data [] [] "," data [] "," data ","Fog AWS Mock  network_acl_association_id ","assoc [] == ","assoc [] ","old_nacl [] delete_if ","old_nacl [] ","(send\n  (send\n    (lvar :old_nacl) :[]\n    (str \"associationSet\")) :find) [] ","old_nacl [] find ","Fog AWS Compute Error  new ","n [] find ","n [] "," data [] values find "," data [] values ","Excon Response  new ","Excon Response  new  body= ","Fog AWS Mock  request_Fog AWS Mock  network_acl_association_id  ","Excon Response  new  status= ","Fog AWS Mock  network_acl_association_Fog AWS Mock  network_acl_association_id  "]}," Fog AWS Compute Real replace_network_acl_association":{"type":"method","name":"replace_network_acl_association","children":[],"call":[" request ","Fog Parsers AWS Compute ReplaceNetworkAclAssociation  new "]}," Fog AWS Compute Mock release_address":{"type":"method","name":"release_address","children":[],"call":[" raise ","Fog AWS Compute Error  new ","response body= ","Fog AWS Mock  request_id ","response status= "," data [] delete ","address [] "," data [] "," data ","public_ip_or_allocation_id == ","a [] == ","a [] "," data [] values find "," data [] values "," data [] [] ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Compute Real release_address":{"type":"method","name":"release_address","children":[],"call":[" request ","Fog Parsers AWS Compute Basic  new ","ip_or_allocation to_s =~ ","ip_or_allocation to_s "]}," Fog AWS Compute Mock register_image":{"type":"method","name":"register_image","children":[],"call":["response body= ","image [] ","Fog AWS Mock  request_id ","response status= ","Excon Response  new "," data [] []= "," data [] "," data ","image [] << ","block_device_mapping [] []= ","bd [] ","block_device_mapping [] ","(str \"SnapshotId\") each ","block_device_mapping []= ","(str \"DeviceName\") each ","block_devices each ","image []= ","location [] ","Time  now ","Fog AWS Mock  ramdisk_id ","options [] ","Fog AWS Mock  kernel_id ","Fog AWS Mock  image_id "," raise ","Fog AWS Compute Error  new ","message << ","name empty? ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Compute Real register_image":{"type":"method","name":"register_image","children":[],"call":[" request ","common_options merge! ","common_options []= ","bd [] ","(str \"SnapshotId\") each ","(str \"DeviceName\") each ","block_devices each_with_index ","location =~ ","Fog Parsers AWS Compute RegisterImage  new "]}," Fog AWS Compute Mock reboot_instances":{"type":"method","name":"reboot_instances","children":[],"call":[" raise ","Fog AWS Compute NotFound  new ","instance_id inspect ","response body= ","Fog AWS Mock  request_id ","response status= "," data [] [] []= "," data [] [] "," data [] "," data ","(send\n  (send\n    (send\n      (send\n        (self) :data) :[]\n      (sym :instances)) :keys) :&\n  (lvar :instance_id)) length == ","instance_id length ","(send\n  (send\n    (send\n      (send\n        (self) :data) :[]\n      (sym :instances)) :keys) :&\n  (lvar :instance_id)) length "," data [] keys & "," data [] keys ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Compute Real reboot_instances":{"type":"method","name":"reboot_instances","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"RebootInstances\")) merge! ","Fog Parsers AWS Compute Basic  new ","Fog AWS  indexed_param "]}," Fog AWS Compute Mock purchase_reserved_instances_offering":{"type":"method","name":"purchase_reserved_instances_offering","children":[],"call":["response body= ","Fog AWS Mock  request_id "," data [] []= ","reserved_instance_offering merge ","Time  now "," data [] "," data ","reserved_instance_offering delete ","Fog AWS Mock  reserved_instances_id "," raise ","offering [] == ","offering [] "," describe_reserved_instances_offerings body [] find "," describe_reserved_instances_offerings body [] "," describe_reserved_instances_offerings body "," describe_reserved_instances_offerings ","response status= ","Excon Response  new ","Excon Response  new  body= ","Fog AWS Mock  Fog AWS Mock  reserved_instances_id  ","Excon Response  new  status= "]}," Fog AWS Compute Real purchase_reserved_instances_offering":{"type":"method","name":"purchase_reserved_instances_offering","children":[],"call":[" request ","Fog Parsers AWS Compute PurchaseReservedInstancesOffering  new "]}," Fog AWS Compute Mock move_address_to_vpc":{"type":"method","name":"move_address_to_vpc","children":[],"call":[" raise ","Fog AWS Compute NotFound  new ","response body= ","Fog AWS Mock  request_id ","response status= ","address []= "," data [] [] "," data [] "," data ","Fog Mock  random_hex ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  []= "]}," Fog AWS Compute Real move_address_to_vpc":{"type":"method","name":"move_address_to_vpc","children":[],"call":[" request ","Fog Parsers AWS Compute MoveAddressToVpc  new "]}," Fog AWS Compute Mock monitor_instances":{"type":"method","name":"monitor_instances","children":[],"call":["response body= ","memo << ","(splat\n  (lvar :instance_ids)) reduce "," raise ","Fog AWS Compute NotFound  new ","instance [] []= ","instance [] "," data [] [] "," data [] "," data ","(splat\n  (lvar :instance_ids)) each ","response status= ","Excon Response  new ","Excon Response  new  body= ","(splat\n  (lvar : data [] [] _ids)) reduce "," data [] []  [] []= "," data [] []  [] ","(splat\n  (lvar : data [] [] _ids)) each ","Excon Response  new  status= "]}," Fog AWS Compute Real monitor_instances":{"type":"method","name":"monitor_instances","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"MonitorInstances\")) merge! ","Fog Parsers AWS Compute MonitorUnmonitorInstances  new ","Fog AWS  indexed_param "]}," Fog AWS Compute Mock modify_vpc_attribute":{"type":"method","name":"modify_vpc_attribute","children":[],"call":[" raise ","Fog AWS Compute NotFound  new ","Fog AWS Compute Error  new ","vpc []= ","options [] ","options keys first ","options keys ","response body= ","Fog AWS Mock  request_id ","response status= ","v [] == ","v [] "," data [] find "," data [] "," data ","options keys join ","options size > ","options size ","options size == ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Compute Real modify_vpc_attribute":{"type":"method","name":"modify_vpc_attribute","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ModifyVpcAttribute\")) merge! ","Fog Parsers AWS Compute Basic  new "]}," Fog AWS Compute Mock modify_volume_attribute":{"type":"method","name":"modify_volume_attribute","children":[],"call":[" raise ","Fog AWS Compute NotFound  new ","response body= ","Fog AWS Mock  request_id ","response status= "," data [] [] "," data [] "," data ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Compute Real modify_volume_attribute":{"type":"method","name":"modify_volume_attribute","children":[],"call":[" request ","Fog Parsers AWS Compute Basic  new "]}," Fog AWS Compute Mock modify_volume":{"type":"method","name":"modify_volume","children":[],"call":["response body= ","Fog AWS Mock  request_id "," data [] []= "," data [] "," data ","volume_modification merge! ","options [] ","volume [] "," raise ","Fog AWS Compute Error  new ","options [] == ","Time  now ","volume [] == "," data [] [] ","Excon Response  new ","Excon Response  new  body= "," data [] [] _modification merge! "," data [] []  [] "," data [] []  [] == "]}," Fog AWS Compute Real modify_volume":{"type":"method","name":"modify_volume","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ModifyVolume\")) merge ","Fog Parsers AWS Compute ModifyVolume  new "]}," Fog AWS Compute Mock modify_subnet_attribute":{"type":"method","name":"modify_subnet_attribute","children":[],"call":["response body= ","response status= ","Fog AWS Mock  request_id ","subnet []= ","options [] ","v [] == ","v [] "," data [] detect "," data [] "," data ","Excon Response  new tap ","Excon Response  new "]}," Fog AWS Compute Real modify_subnet_attribute":{"type":"method","name":"modify_subnet_attribute","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ModifySubnetAttribute\")) merge ","Fog Parsers AWS Compute ModifySubnetAttribute  new ","params []= ","options delete ","options [] "]}," Fog AWS Compute Real modify_snapshot_attribute":{"type":"method","name":"modify_snapshot_attribute","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ModifySnapshotAttribute\")) merge! ","Fog Parsers AWS Compute Basic  new ","params merge! ","Fog AWS  indexed_param ","attributes [] "]}," Fog AWS Compute Mock modify_network_interface_attribute":{"type":"method","name":"modify_network_interface_attribute","children":[],"call":[" raise ","Fog AWS Compute NotFound  new ","response body= ","Fog AWS Mock  request_id ","response status= ","Fog AWS Compute Error  new ","nic [] []= ","value [] ","nic [] ","value [] != ","nic [] [] ","nic [] nil? ","nic []= ","groups []= ","security_group [] ","security_group nil? "," data [] [] "," data [] "," data ","value each ","value clone ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  [] []= "," data [] []  [] "," data [] []  [] [] "," data [] []  [] nil? "," data [] []  []= "," data [] []  nil? "]}," Fog AWS Compute Real modify_network_interface_attribute":{"type":"method","name":"modify_network_interface_attribute","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ModifyNetworkInterfaceAttribute\")) merge! ","Fog Parsers AWS Compute Basic  new "," raise ","Fog AWS Compute Error  new ","params []= ","value [] ","params merge! ","Fog AWS  indexed_param "]}," Fog AWS Compute Real modify_instance_placement":{"type":"method","name":"modify_instance_placement","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ModifyInstancePlacement\")) merge! ","Fog Parsers AWS Compute Basic  new ","params merge! "]}," Fog AWS Compute Real modify_instance_attributes":{"type":"method","name":"modify_instance_attributes","children":[],"call":[" modify_instance_attribute ","Fog Logger  deprecation "]}," Fog AWS Compute Real modify_instance_attribute":{"type":"method","name":"modify_instance_attribute","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ModifyInstanceAttribute\")) merge! ","Fog Parsers AWS Compute Basic  new ","params merge! ","Fog AWS  indexed_param ","attributes delete "]}," Fog AWS Compute Mock modify_image_attribute":{"type":"method","name":"modify_image_attribute","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new ","image_launch_permissions [] delete ","image_launch_permissions [] "," data [] [] "," data [] "," data ","(or\n  (send\n    (lvar :attributes) :[]\n    (str \"Remove.UserId\"))\n  (array)) each ","attributes [] ","image_launch_permissions [] push ","(or\n  (send\n    (lvar :attributes) :[]\n    (str \"Add.UserId\"))\n  (array)) each "," raise ","Fog AWS Compute NotFound  new ","ArgumentError  new ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  [] delete "," data [] []  [] "," data [] []  [] push "]}," Fog AWS Compute Real modify_image_attribute":{"type":"method","name":"modify_image_attribute","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"ModifyImageAttribute\")) merge! ","Fog Parsers AWS Compute Basic  new ","params merge! ","Fog AWS  indexed_param ","attributes [] "," raise ","ArgumentError  new "]}," Fog AWS Compute Mock import_key_pair":{"type":"method","name":"import_key_pair","children":[],"call":["response body= ","(pair\n  (str \"requestId\")\n  (send\n    (const\n      (const\n        (const nil :Fog) :AWS) :Mock) :request_id)) merge! ","Fog AWS Mock  request_id "," data [] []= "," data [] "," data ","Fog AWS Mock  key_fingerprint ","response status= "," raise ","Fog AWS Compute Error  new "," data [] [] ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Compute Real import_key_pair":{"type":"method","name":"import_key_pair","children":[],"call":[" request ","Fog Parsers AWS Compute ImportKeyPair  new ","Base64  encode64 "]}," Fog AWS Compute Mock get_password_data":{"type":"method","name":"get_password_data","children":[],"call":[" raise ","Fog AWS Compute NotFound  new ","response body= ","Time  now ","Fog AWS Mock  request_id ","response status= "," data [] [] "," data [] "," data ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Compute Real get_password_data":{"type":"method","name":"get_password_data","children":[],"call":[" request ","Fog Parsers AWS Compute GetPasswordData  new "]}," Fog AWS Compute Mock get_console_output":{"type":"method","name":"get_console_output","children":[],"call":[" raise ","Fog AWS Compute NotFound  new ","response body= ","Time  now ","Fog AWS Mock  request_id ","Fog AWS Mock  console_output ","Time  now - >= ","Fog Mock  delay ","Time  now - ","instance [] ","response status= "," data [] [] "," data [] "," data ","Excon Response  new ","Excon Response  new  body= "," data [] []  [] ","Excon Response  new  status= "]}," Fog AWS Compute Real get_console_output":{"type":"method","name":"get_console_output","children":[],"call":[" request ","Fog Parsers AWS Compute GetConsoleOutput  new "]}," Fog AWS Compute Mock enable_vpc_classic_link_dns_support":{"type":"method","name":"enable_vpc_classic_link_dns_support","children":[],"call":["response body= ","Fog AWS Mock  request_id ","vpc []= "," raise ","Fog AWS Compute NotFound  new ","v [] == ","v [] "," data [] find "," data [] "," data ","Excon Response  new ","Excon Response  new  body= "]}," Fog AWS Compute Real enable_vpc_classic_link_dns_support":{"type":"method","name":"enable_vpc_classic_link_dns_support","children":[],"call":[" request ","Fog Parsers AWS Compute Basic  new "]}," Fog AWS Compute Mock enable_vpc_classic_link":{"type":"method","name":"enable_vpc_classic_link","children":[],"call":[" raise ","Fog AWS Compute NotFound  new ","vpc []= ","response body= ","Fog AWS Mock  request_id ","response status= ","v [] == ","v [] "," data [] find "," data [] "," data ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Compute Real enable_vpc_classic_link":{"type":"method","name":"enable_vpc_classic_link","children":[],"call":[" request ","Fog Parsers AWS Compute Basic  new "]}," Fog AWS Compute Mock disassociate_route_table":{"type":"method","name":"disassociate_route_table","children":[],"call":[" raise ","assoc_array [] == ","assoc_array [] ","Fog AWS Compute NotFound  new ","assoc_array nil? ","response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new ","routetable [] delete ","routetable [] ","assoc_array nil? ! ","association [] eql? ","association [] ","routetable [] find "," data [] find "," data [] "," data ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Compute Real disassociate_route_table":{"type":"method","name":"disassociate_route_table","children":[],"call":[" request ","Fog Parsers AWS Compute Basic  new "]}," Fog AWS Compute Mock disassociate_address":{"type":"method","name":"disassociate_address","children":[],"call":[" raise ","Fog AWS Compute Error  new ","response body= ","Fog AWS Mock  request_id ","response status= ","address []= ","instance []= ","Fog AWS Mock  dns_name_for ","instance [] "," data [] [] "," data [] "," data ","address [] ","association_id nil? ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  []= "," data [] []  [] "]}," Fog AWS Compute Real disassociate_address":{"type":"method","name":"disassociate_address","children":[],"call":[" request ","Fog Parsers AWS Compute Basic  new "]}," Fog AWS Compute Mock disable_vpc_classic_link_dns_support":{"type":"method","name":"disable_vpc_classic_link_dns_support","children":[],"call":["response body= ","Fog AWS Mock  request_id ","vpc []= "," raise ","Fog AWS Compute NotFound  new ","v [] == ","v [] "," data [] find "," data [] "," data ","Excon Response  new ","Excon Response  new  body= "]}," Fog AWS Compute Real disable_vpc_classic_link_dns_support":{"type":"method","name":"disable_vpc_classic_link_dns_support","children":[],"call":[" request ","Fog Parsers AWS Compute Basic  new "]}," Fog AWS Compute Mock disable_vpc_classic_link":{"type":"method","name":"disable_vpc_classic_link","children":[],"call":[" raise ","Fog AWS Compute NotFound  new ","vpc []= ","response body= ","Fog AWS Mock  request_id ","response status= ","v [] == ","v [] "," data [] find "," data [] "," data ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Compute Real disable_vpc_classic_link":{"type":"method","name":"disable_vpc_classic_link","children":[],"call":[" request ","Fog Parsers AWS Compute Basic  new "]}," Fog AWS Compute Mock detach_volume":{"type":"method","name":"detach_volume","children":[],"call":[" raise ","Fog AWS Compute NotFound  new ","Fog AWS Compute Error  new ","response body= ","(pair\n  (str \"requestId\")\n  (send\n    (const\n      (const\n        (const nil :Fog) :AWS) :Mock) :request_id)) merge! ","Fog AWS Mock  request_id ","response status= ","volume []= ","volume [] pop ","volume [] ","volume [] empty? ! ","volume [] empty? "," data [] [] "," data [] "," data ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  []= "," data [] []  [] pop "," data [] []  [] "," data [] []  [] empty? ! "," data [] []  [] empty? "," volume [] pop  [] [] "," volume [] pop  [] "," volume [] pop  "]}," Fog AWS Compute Real detach_volume":{"type":"method","name":"detach_volume","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DetachVolume\")) merge! ","Fog Parsers AWS Compute DetachVolume  new "]}," Fog AWS Compute Mock detach_network_interface":{"type":"method","name":"detach_network_interface","children":[],"call":[" raise ","Fog AWS Compute NotFound  new "," network_interface_id ","response body= ","Fog AWS Mock  request_id ","response status= "," data [] [] []= "," data [] [] "," data [] "," data ","(send\n  (send\n    (send\n      (self) :data) :[]\n    (sym :network_interfaces)) :select) first first ","(send\n  (send\n    (send\n      (self) :data) :[]\n    (sym :network_interfaces)) :select) first ","v [] [] == ","v [] [] ","v [] "," data [] select ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Compute Real detach_network_interface":{"type":"method","name":"detach_network_interface","children":[],"call":[" request ","Fog Parsers AWS Compute Basic  new "]}," Fog AWS Compute Mock detach_internet_gateway":{"type":"method","name":"detach_internet_gateway","children":[],"call":[" raise ","Fog AWS Compute Error  new "," message "," message << ","vpc_id ! ","internet_gateway_id ! ","response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Compute Real detach_internet_gateway":{"type":"method","name":"detach_internet_gateway","children":[],"call":[" request ","Fog Parsers AWS Compute Basic  new "]}," Fog AWS Compute Mock detach_classic_link_vpc":{"type":"method","name":"detach_classic_link_vpc","children":[],"call":[" raise ","Fog AWS Compute NotFound  new ","vpc ! ","instance ! ","instance []= ","response body= ","Fog AWS Mock  request_id ","response status= "," data [] [] "," data [] "," data ","v [] == ","v [] "," data [] find ","Excon Response  new "," data [] []  ! "," data [] []  []= ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Compute Real detach_classic_link_vpc":{"type":"method","name":"detach_classic_link_vpc","children":[],"call":[" request ","Fog Parsers AWS Compute Basic  new "]}," Fog AWS Compute Mock describe_vpcs":{"type":"method","name":"describe_vpcs","children":[],"call":["Excon Response  new ","Fog AWS Mock  request_id ","vpc merge! "," data [] [] ","vpc [] "," data [] "," data ","vpcs each ","vpc [] != ","filters [] ","vpcs reject ","vpc []= "," apply_tag_filters "," apply_tag_filters  each "," data []  each "," apply_tag_filters  reject "," data []  reject "]}," Fog AWS Compute Real describe_vpcs":{"type":"method","name":"describe_vpcs","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeVpcs\")) merge! ","Fog Parsers AWS Compute DescribeVpcs  new ","Fog AWS  indexed_filters ","Fog Logger  warning "," caller first "," caller ","filters class ","filters is_a? "]}," Fog AWS Compute Mock describe_vpc_classic_link_dns_support":{"type":"method","name":"describe_vpc_classic_link_dns_support","children":[],"call":["response body= ","v [] ","vpcs map ","options [] include? ","options [] ","vpcs select "," data [] "," data ","Excon Response  new ","Excon Response  new  body= "," data []  map "," data []  select "]}," Fog AWS Compute Real describe_vpc_classic_link_dns_support":{"type":"method","name":"describe_vpc_classic_link_dns_support","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeVpcClassicLinkDnsSupport\")) merge ","Fog Parsers AWS Compute DescribeVpcClassicLinkDnsSupport  new ","options [] ","params merge! ","Fog AWS  indexed_param "]}," Fog AWS Compute Mock describe_vpc_classic_link":{"type":"method","name":"describe_vpc_classic_link","children":[],"call":["response body= ","Fog AWS Mock  request_id "," data [] [] ","vpc [] "," data [] "," data ","vpcs collect ","response status= "," apply_tag_filters ","options [] "," raise ","Fog AWS Compute NotFound  new ","v [] == ","v [] ","vpcs find ","vpc_ids collect ","Excon Response  new ","Excon Response  new  body= "," apply_tag_filters  collect "," data []  collect ","Excon Response  new  status= "," apply_tag_filters  find "," data []  find ","options []  collect "]}," Fog AWS Compute Real describe_vpc_classic_link":{"type":"method","name":"describe_vpc_classic_link","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeVpcClassicLink\")) merge ","Fog Parsers AWS Compute DescribeVpcClassicLink  new ","params merge! ","Fog AWS  indexed_filters ","options [] ","Fog AWS  indexed_param "]}," Fog AWS Compute Mock describe_vpc_attribute":{"type":"method","name":"describe_vpc_attribute","children":[],"call":[" raise ","Fog AWS Compute NotFound  new ","Fog AWS Compute Error  new ","response body []= ","vpc [] ","response body ","response body= ","Fog AWS Mock  request_id ","response status= ","v [] == ","v [] "," data [] find "," data [] "," data ","Excon Response  new ","Excon Response  new  body []= ","Excon Response  new  body ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Compute Real describe_vpc_attribute":{"type":"method","name":"describe_vpc_attribute","children":[],"call":[" request ","Fog Parsers AWS Compute DescribeVpcAttribute  new "]}," Fog AWS Compute Mock describe_volumes_modifications":{"type":"method","name":"describe_volumes_modifications","children":[],"call":["response body= ","Fog AWS Mock  request_id ","modification []= ","Time  now "," data [] []= ","modification [] "," data [] "," data ","volume []= ","attribute_aliases [] ","(str \"targetSize\") each "," data [] [] ","modification_set each ","(splat\n  (lvar :filter_value)) include? ! ","(splat\n  (lvar :filter_value)) include? ","m [] ","modification_set reject ","aliases [] "," data [] values ","Excon Response  new ","Excon Response  new  body= "," data [] []  []= "," data [] values  each "," data [] values  reject "]}," Fog AWS Compute Real describe_volumes_modifications":{"type":"method","name":"describe_volumes_modifications","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeVolumesModifications\")) merge ","Fog Parsers AWS Compute DescribeVolumesModifications  new ","params merge! ","Fog AWS  indexed_filters ","Fog AWS  indexed_param ","filters delete "]}," Fog AWS Compute Mock describe_volumes":{"type":"method","name":"describe_volumes","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","volume merge "," data [] [] ","volume [] "," data [] "," data ","volume_set map "," data [] [] ! ","volume_set reject "," data [] delete ","Time  now - >= ","Fog Mock  delay ","Time  now - ","Time  now ","volume []= ","volume [] first []= ","volume [] first ","volume [] first [] ","volume_set each ","(splat\n  (lvar :filter_value)) include? ! ","(splat\n  (lvar :filter_value)) include? ","aliases [] ","(send\n  (send\n    (lvar :volume) :[]\n    (str \"attachmentSet\")) :find) ! ","attachment [] ","volume [] find ","attachment_aliases [] ","filter_key split [] ","filter_key split "," apply_tag_filters "," data [] values ","Excon Response  new ","Fog Logger  deprecation "," caller first "," caller ","filters class ","filters is_a? ","Excon Response  new  body= ","Excon Response  new  status= "," apply_tag_filters  map "," data [] values  map "," apply_tag_filters  reject "," data [] values  reject "," apply_tag_filters  each "," data [] values  each "]}," Fog AWS Compute Real describe_volumes":{"type":"method","name":"describe_volumes","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeVolumes\")) merge! ","Fog Parsers AWS Compute DescribeVolumes  new ","Fog AWS  indexed_filters ","Fog Logger  deprecation "," caller first "," caller ","filters class ","filters is_a? "]}," Fog AWS Compute Mock describe_volume_status":{"type":"method","name":"describe_volume_status","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Compute Real describe_volume_status":{"type":"method","name":"describe_volume_status","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeVolumeStatus\")) merge! ","Fog Parsers AWS Compute DescribeVolumeStatus  new ","params []= ","params merge! ","Fog AWS  indexed_filters ","Fog AWS  indexed_request_param ","filters delete "," raise ","ArgumentError  new ","filters class ","filters is_a? ","Fog AWS  indexed_request_param  []= ","Fog AWS  indexed_request_param  merge! "]}," Fog AWS Compute Mock deep_clone":{"type":"method","name":"deep_clone","children":[],"call":[" deep_clone ","obj map ","h []= ","pair last ","pair first ","obj reduce "]}," Fog AWS Compute Mock filter_resources":{"type":"method","name":"filter_resources","children":[],"call":["resource [] != ","resource [] ","resource_list reject! ","value_hash each ","value_hash_list each ","tag_set values ","tag_set values  each "]}," Fog AWS Compute Mock describe_tags":{"type":"method","name":"describe_tags","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","tagged_resources << ","resource merge ","resources each ","values each ","tag_set each "," filter_resources ","v != ","values reject! ","k != ","tag_set reject! ","aliases [] "," deep_clone "," data [] "," data ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "," deep_clone  each "," deep_clone  reject! "]}," Fog AWS Compute Real describe_tags":{"type":"method","name":"describe_tags","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeTags\")) merge! ","Fog Parsers AWS Compute DescribeTags  new ","Fog AWS  indexed_filters "]}," Fog AWS Compute Mock describe_subnets":{"type":"method","name":"describe_subnets","children":[],"call":["Excon Response  new ","Fog AWS Mock  request_id ","subnet [] != ","filters [] ","subnet [] ","subnets reject ","subnet []= ","subnets each "," data [] "," data "," data []  reject "," data []  each "]}," Fog AWS Compute Real describe_subnets":{"type":"method","name":"describe_subnets","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeSubnets\")) merge! ","Fog Parsers AWS Compute DescribeSubnets  new ","Fog AWS  indexed_filters ","Fog Logger  warning "," caller first "," caller ","filters class ","filters is_a? "]}," Fog AWS Compute Mock describe_spot_price_history":{"type":"method","name":"describe_spot_price_history","children":[],"call":["response body= ","Fog AWS Mock  request_id ","x [] <=> ","y [] ","x [] ","spot_price_history_set sort! ","spot_price_history_set << ","(splat\n  (lvar :zones)) shuffle first ","(splat\n  (lvar :zones)) shuffle ","Time  now - ","1 + "," rand ","Time  now ","(send\n  (begin\n    (send\n      (send nil :rand) :+\n      (send\n        (send\n          (array\n            (int 0)\n            (int 1)) :shuffle) :first))) :*\n  (int 10000)) round / ","(send\n  (begin\n    (send\n      (send nil :rand) :+\n      (send\n        (send\n          (array\n            (int 0)\n            (int 1)) :shuffle) :first))) :*\n  (int 10000)) round ","(send\n  (send nil :rand) :+\n  (send\n    (send\n      (array\n        (int 0)\n        (int 1)) :shuffle) :first)) * "," rand + ","(int 0) shuffle first ","(int 0) shuffle ","(splat\n  (lvar :product_descriptions)) shuffle first ","(splat\n  (lvar :product_descriptions)) shuffle ","(splat\n  (lvar :instance_types)) shuffle first ","(splat\n  (lvar :instance_types)) shuffle ","max_results times ","Fog AWS Mock  spot_product_descriptions ","filters delete ","f id "," flavors map "," flavors "," raise ","(and\n  (send\n    (lvar :max_results) :is_a?\n    (const nil :Integer))\n  (send\n    (lvar :max_results) :>\n    (int 0))) ! ","max_results > ","max_results is_a? ","Fog Mock  random_numbers to_i ","Fog Mock  random_numbers ","params [] ","zones nil? ","all_zones include? ! ","all_zones include? ","zones nil? ! ","z [] "," describe_availability_zones body [] map "," describe_availability_zones body [] "," describe_availability_zones body "," describe_availability_zones ","params []= ","filters key? ","filters is_a? ","Fog Mock  not_implemented ","Fog Logger  warning "," caller first "," caller ","response status= ","Excon Response  new ","Excon Response  new  body= ","(splat\n  (lvar :params [] )) shuffle first ","(splat\n  (lvar :params [] )) shuffle ","params []  nil? ","all_params []  include? ! ","all_params []  include? ","params []  nil? ! "," describe_availability_params []  body [] map "," describe_availability_params []  body [] "," describe_availability_params []  body "," describe_availability_params []  ","Excon Response  new  status= "]}," Fog AWS Compute Real describe_spot_price_history":{"type":"method","name":"describe_spot_price_history","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeSpotPriceHistory\")) merge! ","Fog Parsers AWS Compute DescribeSpotPriceHistory  new ","params merge! ","Fog AWS  indexed_filters ","Fog AWS  indexed_param ","filters delete ","params []= ","filters key? ","filters is_a? "]}," Fog AWS Compute Mock describe_spot_instance_requests":{"type":"method","name":"describe_spot_instance_requests","children":[],"call":["response body= ","Fog AWS Mock  request_id "," data [] []= ","request [] "," data [] "," data ","request []= ","instances first [] [] ","instances first [] ","instances first "," run_instances body [] "," run_instances body "," run_instances ","request [] [] ","request [] [] first ","(send\n  (lvar :spot_requests) :select) each ","r [] nil? ","r [] ","spot_requests select ","r [] == "," Array first "," Array ","filters [] "," data [] values ","Excon Response  new ","Excon Response  new  body= ","Fog AWS Mock  request_ Array first  "," run_instances body []  first [] [] "," run_instances body []  first [] "," run_instances body []  first "," run_ run_instances body []  body [] "," run_ run_instances body []  body "," run_ run_instances body []  ","(send\n  (lvar : data [] values ) :select) each "," data [] values  select "]}," Fog AWS Compute Real describe_spot_instance_requests":{"type":"method","name":"describe_spot_instance_requests","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeSpotInstanceRequests\")) merge! ","Fog Parsers AWS Compute SpotInstanceRequests  new ","Fog AWS  indexed_filters "]}," Fog AWS Compute Real describe_spot_datafeed_subscription":{"type":"method","name":"describe_spot_datafeed_subscription","children":[],"call":[" request ","Fog Parsers AWS Compute SpotDatafeedSubscription  new "]}," Fog AWS Compute Mock describe_snapshots":{"type":"method","name":"describe_snapshots","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","snapshot merge "," data [] [] ","snapshot [] "," data [] "," data ","snapshot_set map ","snapshot []= ","Time  now - >= ","Fog Mock  delay ","Time  now - ","Time  now ","Fog Mock  delay * ","snapshot_set each ","(splat\n  (lvar :filter_value)) include? ! ","(splat\n  (lvar :filter_value)) include? ","snapshot_set reject ","aliases [] "," apply_tag_filters ","Fog Logger  warning "," caller first "," caller ","restorable_by inspect ","restorable_by != ","filters delete "," data [] values ","Excon Response  new ","Fog Logger  deprecation ","options empty? ","filters class ","filters is_a? ","Excon Response  new  body= ","Excon Response  new  status= "," apply_tag_filters  map "," data [] values  map "," apply_tag_filters  each "," data [] values  each "," apply_tag_filters  reject "," data [] values  reject ","filters delete  inspect ","filters delete  != "]}," Fog AWS Compute Real describe_snapshots":{"type":"method","name":"describe_snapshots","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeSnapshots\")) merge! ","Fog Parsers AWS Compute DescribeSnapshots  new ","Fog AWS  indexed_filters merge! ","Fog AWS  indexed_filters ","options [] ","options []= ","filters delete ","filters key? ","Fog Logger  deprecation "," caller first "," caller ","options empty? ","filters class ","filters is_a? "]}," Fog AWS Compute Mock describe_security_groups":{"type":"method","name":"describe_security_groups","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","(splat\n  (lvar :filter_value)) include? ! ","(splat\n  (lvar :filter_value)) include? ","security_group [] ","security_group_info reject ","aliases [] ","(send\n  (send\n    (lvar :security_group) :[]\n    (str \"ipPermissions\")) :find) ! ","permission [] ","security_group [] find ","permission_aliases [] ","(send\n  (send\n    (lvar :security_group_groups) :call\n    (lvar :security_group)) :find) ! ","group [] ","security_group_groups call find ","security_group_groups call ","permission_key == ","filter_key split [] ","filter_key split ","(send\n  (begin\n    (or\n      (send\n        (lvar :security_group) :[]\n        (str \"ipPermissions\"))\n      (array))) :map) flatten compact uniq ","(send\n  (begin\n    (or\n      (send\n        (lvar :security_group) :[]\n        (str \"ipPermissions\"))\n      (array))) :map) flatten compact ","(send\n  (begin\n    (or\n      (send\n        (lvar :security_group) :[]\n        (str \"ipPermissions\"))\n      (array))) :map) flatten ","(or\n  (send\n    (lvar :security_group) :[]\n    (str \"ipPermissions\"))\n  (array)) map "," lambda ","(send\n  (send\n    (send\n      (self) :data) :[]\n    (sym :security_groups)) :reject) values ","k [] "," data [] reject "," data [] "," data ","Excon Response  new ","Fog Logger  deprecation "," caller first "," caller ","filters class ","filters is_a? ","Excon Response  new  body= ","Excon Response  new  status= ","(send\n  (send\n    (send\n      (self) :data) :[]\n    (sym :security_groups)) :reject) values  reject ","filter_key split []  == "]}," Fog AWS Compute Real describe_security_groups":{"type":"method","name":"describe_security_groups","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeSecurityGroups\")) merge! ","Fog Parsers AWS Compute DescribeSecurityGroups  new ","Fog AWS  indexed_filters merge! ","Fog AWS  indexed_filters ","options []= ","filters delete ","filters key? ","filters is_a? ","Fog Logger  deprecation "," caller first "," caller ","filters class "]}," Fog AWS Compute Mock describe_route_tables":{"type":"method","name":"describe_route_tables","children":[],"call":["Excon Response  new ","Fog AWS Mock  request_id ","route merge! "," data [] [] ","route [] "," data [] "," data ","display_routes each ","routetable [] != ","routetable [] ","display_routes reject! ","aliases [] "," data [] dup ","Fog Logger  deprecation "," caller first "," caller ","filters class ","filters is_a? "," data [] dup  each "," data [] dup  reject! "]}," Fog AWS Compute Real describe_route_tables":{"type":"method","name":"describe_route_tables","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeRouteTables\")) merge! ","Fog Parsers AWS Compute DescribeRouteTables  new ","Fog AWS  indexed_filters ","Fog Logger  deprecation "," caller first "," caller ","filters class ","filters is_a? "]}," Fog AWS Compute Mock describe_reserved_instances_offerings":{"type":"method","name":"describe_reserved_instances_offerings","children":[],"call":["response body= ","(send\n  (begin\n    (erange\n      (int 0)\n      (int 64))) :map) join ","(irange\n  (str \"a\")\n  (str \"z\")) to_a [] "," rand ","(irange\n  (str \"a\")\n  (str \"z\")) to_a ","(erange\n  (int 0)\n  (int 64)) map ","Fog AWS Mock  request_id "," data [] "," data ","Fog AWS Mock  reserved_instances_offering_id ","response status= ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Compute Real describe_reserved_instances_offerings":{"type":"method","name":"describe_reserved_instances_offerings","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeReservedInstancesOfferings\")) merge! ","Fog Parsers AWS Compute DescribeReservedInstancesOfferings  new ","Fog AWS  indexed_filters merge! ","Fog AWS  indexed_filters ","options []= ","filters delete ","filters key? ","filters is_a? "]}," Fog AWS Compute Mock describe_reserved_instances":{"type":"method","name":"describe_reserved_instances","children":[],"call":["response body= ","Fog AWS Mock  request_id "," data [] values "," data [] "," data ","response status= ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Compute Real describe_reserved_instances":{"type":"method","name":"describe_reserved_instances","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeReservedInstances\")) merge! ","Fog Parsers AWS Compute DescribeReservedInstances  new ","Fog AWS  indexed_filters ","Fog Logger  deprecation "," caller first "," caller ","filters class ","filters is_a? "]}," Fog AWS Compute Mock describe_regions":{"type":"method","name":"describe_regions","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","(splat\n  (lvar :filter_value)) include? ! ","(splat\n  (lvar :filter_value)) include? ","region [] ","region_info reject ","aliases [] ","Excon Response  new ","Fog Logger  deprecation "," caller first "," caller ","filters class ","filters is_a? ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Compute Real describe_regions":{"type":"method","name":"describe_regions","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeRegions\")) merge! ","Fog Parsers AWS Compute DescribeRegions  new ","Fog AWS  indexed_filters ","Fog Logger  deprecation "," caller first "," caller ","filters class ","filters is_a? "]}," Fog AWS Compute Real describe_placement_groups":{"type":"method","name":"describe_placement_groups","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribePlacementGroups\")) merge! ","Fog Parsers AWS Compute DescribePlacementGroups  new ","Fog AWS  indexed_filters "]}," Fog AWS Compute Mock describe_network_interfaces":{"type":"method","name":"describe_network_interfaces","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","(splat\n  (lvar :filter_value)) include? ! ","(splat\n  (lvar :filter_value)) include? ","nic [] ","network_interface_info reject ","filters []= ","filters delete "," data [] values "," data [] "," data ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "," data [] values  reject "]}," Fog AWS Compute Real describe_network_interfaces":{"type":"method","name":"describe_network_interfaces","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeNetworkInterfaces\")) merge! ","Fog Parsers AWS Compute DescribeNetworkInterfaces  new ","Fog AWS  indexed_filters "]}," Fog AWS Compute Mock describe_network_interface_attribute":{"type":"method","name":"describe_network_interface_attribute","children":[],"call":[" raise ","Fog AWS Compute Error  new ","response body []= ","network_interface [] ","response body ","response body= ","Fog AWS Mock  request_id ","response status= ","Fog AWS Compute NotFound  new "," data [] [] "," data [] "," data ","Excon Response  new ","Excon Response  new  body []= "," data [] []  [] ","Excon Response  new  body ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Compute Real describe_network_interface_attribute":{"type":"method","name":"describe_network_interface_attribute","children":[],"call":[" request ","Fog Parsers AWS Compute DescribeNetworkInterfaceAttribute  new "]}," Fog AWS Compute Mock describe_network_acls":{"type":"method","name":"describe_network_acls","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","acl merge! "," data [] [] ","acl [] "," data [] "," data ","network_acls each ","(splat\n  (lvar :filter_value)) include? ! ","(splat\n  (lvar :filter_value)) include? ","nacl [] ","network_acls reject ","aliases [] ","(send\n  (send\n    (lvar :nacl) :[]\n    (str \"entrySet\")) :find) ! ","association [] ","nacl [] find ","entry_aliases [] ","filter_key split [] ","filter_key split ","association [] [] ","(send\n  (send\n    (lvar :nacl) :[]\n    (str \"associationSet\")) :find) ! ","association_aliases [] ","filter_key to_s "," apply_tag_filters "," data [] values ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "," apply_tag_filters  each "," data [] values  each "," apply_tag_filters  reject "," data [] values  reject ","filter_key to_s  split [] ","filter_key to_s  split ","filter_key to_s  to_s "]}," Fog AWS Compute Real describe_network_acls":{"type":"method","name":"describe_network_acls","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeNetworkAcls\")) merge! ","Fog Parsers AWS Compute DescribeNetworkAcls  new ","Fog AWS  indexed_filters "]}," Fog AWS Compute Mock describe_key_pairs":{"type":"method","name":"describe_key_pairs","children":[],"call":["response body= ","(str \"keyFingerprint\") include? ! ","(str \"keyFingerprint\") include? ","key_pair reject ","key_set map ","Fog AWS Mock  request_id ","response status= ","(splat\n  (lvar :filter_value)) include? ! ","(splat\n  (lvar :filter_value)) include? ","key_pair [] ","key_set reject ","aliases [] "," data [] values "," data [] "," data ","Excon Response  new ","Fog Logger  deprecation "," caller first "," caller ","filters class ","filters is_a? ","Excon Response  new  body= "," data [] values  map ","Excon Response  new  status= "," data [] values  reject "]}," Fog AWS Compute Real describe_key_pairs":{"type":"method","name":"describe_key_pairs","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeKeyPairs\")) merge! ","Fog Parsers AWS Compute DescribeKeyPairs  new ","Fog AWS  indexed_filters ","Fog Logger  deprecation "," caller first "," caller ","filters class ","filters is_a? "]}," Fog AWS Compute Mock describe_internet_gateways":{"type":"method","name":"describe_internet_gateways","children":[],"call":["Excon Response  new ","Fog AWS Mock  request_id ","internet_gateway [] != ","filters [] ","internet_gateway [] ","internet_gateways reject "," data [] values "," data [] "," data "," data [] values  reject "]}," Fog AWS Compute Real describe_internet_gateways":{"type":"method","name":"describe_internet_gateways","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeInternetGateways\")) merge! ","Fog Parsers AWS Compute DescribeInternetGateways  new ","Fog AWS  indexed_filters ","Fog Logger  warning "," caller first "," caller ","filters class ","filters is_a? "]}," Fog AWS Compute Mock describe_instances":{"type":"method","name":"describe_instances","children":[],"call":["response body= ","reservation_set values ","Fog AWS Mock  request_id ","reservation_set [] [] << ","(send\n  (lvar :instance) :reject) merge "," data [] [] ","instance [] "," data [] "," data ","(str \"amiLaunchIndex\") include? ! ","(str \"amiLaunchIndex\") include? ","instance reject ","reservation_set [] [] ","reservation_set [] ","instance []= ","Fog AWS Mock  private_dns_name_for ","(send\n  (block\n    (send\n      (lvar :nics) :sort_by)\n    (args\n      (arg :ni)\n      (arg :ni_conf))\n    (send\n      (send\n        (lvar :ni_conf) :[]\n        (str \"attachment\")) :[]\n      (str \"deviceIndex\"))) :map) first ","ni_conf [] ","(send\n  (lvar :nics) :sort_by) map ","ni_conf [] [] ","nics sort_by ","nics count > ","nics count ","nics map ","ni_conf [] [] == "," data [] select "," data [] delete ","Time  now - >= ","Fog Mock  delay ","Time  now - ","Time  now ","Fog Mock  delay * ","Fog AWS Mock  dns_name_for ","Fog AWS Mock  ip_address ","instance [] [] ","instance_set each ","response status= ","brand_new_instances include? ","instance_set reject "," raise ","Fog AWS Compute NotFound  new ","brand_new_instances first [] ","brand_new_instances first ","brand_new_instances empty? ! ","brand_new_instances empty? ","filters [] ","Time  now - < ","instance [] [] == ","instance_set select ","(splat\n  (lvar :filter_value)) include? ! ","(splat\n  (lvar :filter_value)) include? ","aliases [] ","(send\n  (lvar :security_group_names) :&\n  (send\n    (lvar :instance) :[]\n    (str \"groupSet\"))) empty? ","security_group_names & ","sg [] ","(send\n  (send\n    (send\n      (send\n        (self) :data) :[]\n      (sym :security_groups)) :values) :select) map ","group_ids include? "," data [] values select "," data [] values ","filter_key == ","instance [] include? ! ","instance [] include? ","state_reason_aliases [] ","filter_key split [] ","filter_key split ","instance_state_aliases [] ","(send\n  (send\n    (lvar :instance) :[]\n    (str \"blockDeviceMapping\")) :find) ! ","block_device_mapping [] ","instance [] find ","block_device_mapping_aliases [] "," apply_tag_filters ","Excon Response  new ","Fog Logger  deprecation "," caller first "," caller ","filters class ","filters is_a? ","Excon Response  new  body= "," apply_tag_filters  each "," data [] values  each ","Excon Response  new  status= "," apply_tag_filters  reject "," data [] values  reject "," apply_tag_filters  select "," data [] values  select "]}," Fog AWS Compute Real describe_instances":{"type":"method","name":"describe_instances","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeInstances\")) merge! ","Fog Parsers AWS Compute DescribeInstances  new ","params merge! ","Fog AWS  indexed_filters ","params []= ","instance_ids each_with_index ","instance_ids is_a? ","filters delete ","filters [] ","Fog Logger  deprecation "," caller first "," caller ","filters class ","filters is_a? ","filters delete  each_with_index ","filters delete  is_a? "]}," Fog AWS Compute Mock describe_instance_status":{"type":"method","name":"describe_instance_status","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Compute Real describe_instance_status":{"type":"method","name":"describe_instance_status","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeInstanceStatus\")) merge! ","Fog Parsers AWS Compute DescribeInstanceStatus  new ","params []= ","params merge! ","Fog AWS  indexed_filters ","Fog AWS  indexed_request_param ","filters delete "," raise ","ArgumentError  new ","filters class ","filters is_a? ","Fog AWS  indexed_request_param  []= ","Fog AWS  indexed_request_param  merge! "]}," Fog AWS Compute Mock describe_instance_attribute":{"type":"method","name":"describe_instance_attribute","children":[],"call":[" raise ","Fog AWS Compute NotFound  new ","response body []= ","instance [] ","response body ","response body= ","Fog AWS Mock  request_id ","response status= ","i [] == ","i [] "," data [] values find "," data [] values "," data [] "," data ","Excon Response  new ","Excon Response  new  body []= ","Excon Response  new  body ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Compute Real describe_instance_attribute":{"type":"method","name":"describe_instance_attribute","children":[],"call":[" request ","Fog Parsers AWS Compute DescribeInstanceAttribute  new "]}," Fog AWS Compute Mock describe_images":{"type":"method","name":"describe_images","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","(send\n  (lvar :image) :reject) merge "," data [] [] ","image [] "," data [] "," data ","(str \"registered\") include? ","image reject ","image []= ","Time  now - >= ","Fog Mock  delay ","Time  now - ","Time  now ","image_set map ","(splat\n  (lvar :filter_value)) include? ! ","(splat\n  (lvar :filter_value)) include? ","image_set reject ","aliases [] "," apply_tag_filters "," visible_images values "," visible_images ","Excon Response  new ","filters []= ","owner == ","filters delete ","Fog Mock  not_implemented ","Fog Logger  warning "," caller first "," caller ","key =~ ","filters keys any? ","filters keys ","Fog Logger  deprecation ","filters class ","filters is_a? ","Excon Response  new  body= ","Excon Response  new  status= "," apply_tag_filters  map "," visible_images values  map "," apply_tag_filters  reject "," visible_images values  reject ","filters delete  == "]}," Fog AWS Compute Real describe_images":{"type":"method","name":"describe_images","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeImages\")) merge! ","Fog Parsers AWS Compute DescribeImages  new ","Fog AWS  indexed_filters merge! ","Fog AWS  indexed_filters ","options merge! ","Fog AWS  indexed_request_param ","filters delete ","filters key? ","filters is_a? "]}," Fog AWS Compute Mock describe_image_attribute":{"type":"method","name":"describe_image_attribute","children":[],"call":[" raise ","Fog AWS Compute NotFound  new ","response body []= ","image [] ","response body ","image_launch_permissions [] "," data [] [] "," data [] "," data ","response body= ","Fog AWS Mock  request_id ","response status= ","i [] == ","i [] "," data [] values find "," data [] values ","Excon Response  new ","Excon Response  new  body []= ","Excon Response  new  body "," data [] []  [] ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Compute Real describe_image_attribute":{"type":"method","name":"describe_image_attribute","children":[],"call":[" request ","Fog Parsers AWS Compute DescribeImageAttribute  new "]}," Fog AWS Compute Mock describe_dhcp_options":{"type":"method","name":"describe_dhcp_options","children":[],"call":["response body= "," data [] "," data ","Fog AWS Mock  request_id ","response status= ","Excon Response  new tap ","Excon Response  new "]}," Fog AWS Compute Real describe_dhcp_options":{"type":"method","name":"describe_dhcp_options","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeDhcpOptions\")) merge! ","Fog Parsers AWS Compute DescribeDhcpOptions  new ","Fog AWS  indexed_filters ","Fog Logger  warning "," caller first "," caller ","filters class ","filters is_a? "]}," Fog AWS Compute Mock describe_classic_link_instances":{"type":"method","name":"describe_classic_link_instances","children":[],"call":["response body= ","Fog AWS Mock  request_id "," data [] [] ","instance [] "," data [] "," data ","group [] ","groups collect ","instance [] include? ","data [] "," data [] values select "," data [] values ","instances collect ","response status= ","options [] include? ","options [] ","instances select ","options [] [] ","instance [] == "," apply_tag_filters ","Excon Response  new ","Excon Response  new  body= "," apply_tag_filters  collect ","Excon Response  new  status= "," apply_tag_filters  select "]}," Fog AWS Compute Real describe_classic_link_instances":{"type":"method","name":"describe_classic_link_instances","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeClassicLinkInstances\")) merge ","Fog Parsers AWS Compute DescribeClassicLinkInstances  new ","params merge! ","Fog AWS  indexed_filters ","options [] ","Fog AWS  indexed_param ","params []= "]}," Fog AWS Compute Mock describe_availability_zones":{"type":"method","name":"describe_availability_zones","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","(splat\n  (lvar :filter_value)) include? ! ","(splat\n  (lvar :filter_value)) include? ","availability_zone [] ","availability_zone_info reject ","aliases [] ","zoneinfo [] == ","zoneinfo [] ","all_zones select ","Excon Response  new ","Fog Logger  deprecation "," caller first "," caller ","filters class ","filters is_a? ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Compute Real describe_availability_zones":{"type":"method","name":"describe_availability_zones","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeAvailabilityZones\")) merge! ","Fog Parsers AWS Compute DescribeAvailabilityZones  new ","Fog AWS  indexed_filters ","Fog Logger  deprecation "," caller first "," caller ","filters class ","filters is_a? "]}," Fog AWS Compute Mock describe_addresses":{"type":"method","name":"describe_addresses","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","(splat\n  (lvar :filter_value)) include? ! ","(splat\n  (lvar :filter_value)) include? ","address [] ","addresses_set reject ","aliases [] "," data [] values "," data [] "," data ","Excon Response  new ","Fog Logger  deprecation "," caller first "," caller ","filters class ","filters is_a? ","Excon Response  new  body= ","Excon Response  new  status= "," data [] values  reject "]}," Fog AWS Compute Real describe_addresses":{"type":"method","name":"describe_addresses","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeAddresses\")) merge! ","Fog Parsers AWS Compute DescribeAddresses  new ","Fog AWS  indexed_filters ","Fog Logger  deprecation "," caller first "," caller ","filters class ","filters is_a? "]}," Fog AWS Compute Mock describe_account_attributes":{"type":"method","name":"describe_account_attributes","children":[],"call":["Excon Response  new ","Fog AWS Mock  request_id "," data [] "," data "]}," Fog AWS Compute Real describe_account_attributes":{"type":"method","name":"describe_account_attributes","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DescribeAccountAttributes\")) merge! ","Fog Parsers AWS Compute DescribeAccountAttributes  new ","Fog AWS  indexed_filters "]}," Fog AWS Compute Mock deregister_image":{"type":"method","name":"deregister_image","children":[],"call":[" raise ","Fog AWS Compute Error  new ","message << "," instance_id ! "," instance_id ","response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Compute Real deregister_image":{"type":"method","name":"deregister_image","children":[],"call":[" request ","Fog Parsers AWS Compute DeregisterImage  new "]}," Fog AWS Compute Mock delete_vpc":{"type":"method","name":"delete_vpc","children":[],"call":[" raise ","Fog AWS Compute Error  new ","message << ","response body= ","Fog AWS Mock  request_id "," data [] delete "," data [] "," data "," network_acls all first network_acl_id "," network_acls all first "," network_acls all "," network_acls ","v [] == ","v [] "," data [] reject! ","response status= ","Excon Response  new tap ","Excon Response  new "," network_acls all first  network_acls all first network_acl_id  "]}," Fog AWS Compute Real delete_vpc":{"type":"method","name":"delete_vpc","children":[],"call":[" request ","Fog Parsers AWS Compute Basic  new "]}," Fog AWS Compute Mock delete_volume":{"type":"method","name":"delete_volume","children":[],"call":[" raise ","Fog AWS Compute NotFound  new ","response body= ","Fog AWS Mock  request_id ","response status= ","volume []= "," data [] []= ","Time  now "," data [] "," data ","Fog AWS Compute Error  new ","attach [] ","volume [] first ","volume [] ","volume [] any? "," data [] [] ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  []= ","volume [] first  [] "," data [] []  [] first "," data [] []  [] "," data [] []  [] any? "]}," Fog AWS Compute Real delete_volume":{"type":"method","name":"delete_volume","children":[],"call":[" request ","Fog Parsers AWS Compute Basic  new "]}," Fog AWS Compute Mock delete_tags":{"type":"method","name":"delete_tags","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new ","tagset delete ","tagset [] == ","tagset [] ","value nil? ","tagset key? "," data [] [] ","resource [] "," data [] "," data ","tags each ","tagged each "," data [] [] []= "," data [] [] [] - "," data [] [] [] "," tagged_resources ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  delete "," data [] []  [] == "," data [] []  [] "," data [] []  key? "," tagged_resources  each ","  tagged_resources _resources "]}," Fog AWS Compute Real delete_tags":{"type":"method","name":"delete_tags","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"DeleteTags\")) merge! ","Fog Parsers AWS Compute Basic  new ","params merge! ","tags [] ","tags [] nil? ","tags keys each_with_index ","tags keys ","Fog AWS  indexed_param "]}," Fog AWS Compute Mock delete_subnet":{"type":"method","name":"delete_subnet","children":[],"call":[" raise ","Fog AWS Compute Error  new ","message << ","response body= ","Fog AWS Mock  request_id ","response status= ","v [] == ","v [] "," data [] reject! "," data [] "," data ","Excon Response  new tap ","Excon Response  new "]}," Fog AWS Compute Real delete_subnet":{"type":"method","name":"delete_subnet","children":[],"call":[" request ","Fog Parsers AWS Compute Basic  new "]}," Fog AWS Compute Real delete_spot_datafeed_subscription":{"type":"method","name":"delete_spot_datafeed_subscription","children":[],"call":[" request ","Fog Parsers AWS Compute Basic  new "]}," Fog AWS Compute Mock delete_snapshot":{"type":"method","name":"delete_snapshot","children":[],"call":[" raise ","Fog AWS Compute NotFound  new ","response body= ","Fog AWS Mock  request_id ","response status= "," data [] delete "," data [] "," data ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Compute Real delete_snapshot":{"type":"method","name":"delete_snapshot","children":[],"call":[" request ","Fog Parsers AWS Compute Basic  new "]}," Fog AWS Compute Mock delete_security_group":{"type":"method","name":"delete_security_group","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= "," data [] delete "," data [] "," data "," raise ","Fog AWS Compute Error  new ","active_instances any? ","used_by_groups uniq join ","used_by_groups uniq ","used_by_groups empty? ","instance [] != ","instance [] ","instance [] include? "," data [] values select "," data [] values ","used_by_groups << ","group [] ","ec2_group [] == ","ec2_group [] ","(or\n  (send\n    (lvar :group) :[]\n    (str \"EC2SecurityGroups\"))\n  (array)) each ","(or\n  (send\n    (lvar :data) :[]\n    (sym :security_groups))\n  (array)) each ","data [] ","Fog AWS RDS Mock  data [] each ","Fog AWS RDS Mock  data [] "," region ","Fog AWS RDS Mock  data ","key_data [] ","group_group_permission [] == ","group_group_permission [] ","group_ip_permission [] each ","group_ip_permission [] ","group [] each ","group == "," data [] [] ","key_data [] each "," region_data each "," region_data ","Excon Response  new ","Fog AWS Compute NotFound  new ","v [] == ","v [] "," data [] find ","name == ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Compute Real delete_security_group":{"type":"method","name":"delete_security_group","children":[],"call":[" request ","Fog Parsers AWS Compute Basic  new "," raise ","Fog AWS Compute Error  new "]}," Fog AWS Compute Mock delete_route_table":{"type":"method","name":"delete_route_table","children":[],"call":[" raise ","route_table [] empty? ! ","route_table [] empty? ","route_table [] ","Fog AWS Compute NotFound  new ","route_table nil? ","response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new "," data [] delete "," data [] "," data ","route_table nil? ! ","routetable [] eql? ","routetable [] "," data [] find ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Compute Real delete_route_table":{"type":"method","name":"delete_route_table","children":[],"call":[" request ","Fog Parsers AWS Compute Basic  new "]}," Fog AWS Compute Mock delete_route":{"type":"method","name":"delete_route","children":[],"call":[" raise ","Fog AWS Compute NotFound  new ","route [] == ","route [] ","response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new ","route_table [] delete ","route_table [] ","route [] != ","route nil? ! ","route nil? ","route [] eql? ","route_table [] find ","route_table nil? ","routetable [] eql? ","routetable [] "," data [] find "," data [] "," data ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Compute Real delete_route":{"type":"method","name":"delete_route","children":[],"call":[" request ","Fog Parsers AWS Compute Basic  new "]}," Fog AWS Compute Real delete_placement_group":{"type":"method","name":"delete_placement_group","children":[],"call":[" request ","Fog Parsers AWS Compute Basic  new "]}," Fog AWS Compute Mock delete_network_interface":{"type":"method","name":"delete_network_interface","children":[],"call":[" raise ","Fog AWS Compute NotFound  new ","response body= ","Fog AWS Mock  request_id ","response status= "," data [] delete "," data [] "," data ","Fog AWS Compute Error  new "," data [] [] [] [] "," data [] [] [] "," data [] [] ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Compute Real delete_network_interface":{"type":"method","name":"delete_network_interface","children":[],"call":[" request ","Fog Parsers AWS Compute Basic  new "]}," Fog AWS Compute Mock delete_network_acl_entry":{"type":"method","name":"delete_network_acl_entry","children":[],"call":[" raise ","Fog AWS Compute NotFound  new ","response body= ","Fog AWS Mock  request_id ","response status= ","Fog AWS Compute Error  new ","r [] == ","r [] "," data [] [] [] delete_if "," data [] [] [] "," data [] [] "," data [] "," data "," data [] [] [] find ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Compute Real delete_network_acl_entry":{"type":"method","name":"delete_network_acl_entry","children":[],"call":[" request ","Fog Parsers AWS Compute Basic  new "]}," Fog AWS Compute Mock delete_network_acl":{"type":"method","name":"delete_network_acl","children":[],"call":[" raise ","Fog AWS Compute NotFound  new ","response body= ","Fog AWS Mock  request_id ","response status= "," data [] delete "," data [] "," data ","Fog AWS Compute Error  new "," data [] [] [] any? "," data [] [] [] "," data [] [] ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Compute Real delete_network_acl":{"type":"method","name":"delete_network_acl","children":[],"call":[" request ","Fog Parsers AWS Compute Basic  new "]}," Fog AWS Compute Mock delete_key_pair":{"type":"method","name":"delete_key_pair","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= "," data [] delete "," data [] "," data ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Compute Real delete_key_pair":{"type":"method","name":"delete_key_pair","children":[],"call":[" request ","Fog Parsers AWS Compute Basic  new "]}," Fog AWS Compute Mock delete_internet_gateway":{"type":"method","name":"delete_internet_gateway","children":[],"call":[" raise ","Fog AWS Compute Error  new ","message << ","response body= ","Fog AWS Mock  request_id "," data [] delete "," data [] "," data ","response status= ","Excon Response  new tap ","Excon Response  new "]}," Fog AWS Compute Real delete_internet_gateway":{"type":"method","name":"delete_internet_gateway","children":[],"call":[" request ","Fog Parsers AWS Compute Basic  new "]}," Fog AWS Compute Mock delete_dhcp_options":{"type":"method","name":"delete_dhcp_options","children":[],"call":[" raise ","Fog AWS Compute Error  new ","message << ","response body= ","Fog AWS Mock  request_id ","v [] == ","v [] "," data [] reject! "," data [] "," data ","response status= ","Excon Response  new tap ","Excon Response  new "]}," Fog AWS Compute Real delete_dhcp_options":{"type":"method","name":"delete_dhcp_options","children":[],"call":[" request ","Fog Parsers AWS Compute Basic  new "]}," Fog AWS Compute Mock create_vpc":{"type":"method","name":"create_vpc","children":[],"call":["response body []= ","response body ","cidrBlock empty? ","response body= ","response status= ","Fog AWS Mock  request_id ","Fog AWS Compute Mock  data [] [] [] []= "," data [] "," data ","Fog AWS Compute Mock  data [] [] [] ","Fog AWS Compute Mock  data [] [] ","Fog AWS Compute Mock  data [] "," region ","Fog AWS Compute Mock  data ","Fog AWS Mock  security_group_id ","Fog Mock  random_hex "," data [] [] []= "," data [] [] ","default_nacl network_acl_id ","default_nacl save "," network_acls new "," network_acls ","route_table [] push ","route_table [] "," add_route_association ","default_route id ","routetable [] eql? ","routetable [] "," data [] find ","default_route save "," route_tables new "," route_tables "," data [] push ","options [] ","Fog AWS Mock  vpc_id ","Excon Response  new tap ","Excon Response  new "," network_acls new  network_acl_id "," network_acls new  save "," add_route_ add_route_association iation "," route_tables new  id "," route_tables new  save ","Fog AWS Mock  Fog AWS Mock  vpc_id  "]}," Fog AWS Compute Real create_vpc":{"type":"method","name":"create_vpc","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"CreateVpc\")) merge! ","Fog Parsers AWS Compute CreateVpc  new "]}," Fog AWS Compute Mock create_volume":{"type":"method","name":"create_volume","children":[],"call":["response body []= ","response body ","response body= ","response status= ","(pair\n  (str \"requestId\")\n  (send\n    (const\n      (const\n        (const nil :Fog) :AWS) :Mock) :request_id)) merge! ","(str \"availabilityZone\") include? ! ","(str \"availabilityZone\") include? ","data reject ","Fog AWS Mock  request_id "," data [] []= "," data [] "," data ","options [] ","Time  now ","Fog AWS Mock  volume_id "," raise ","Fog AWS Compute Error  new ","options [] ! ","iops > ","iops < ","%.1f % ","(lvasgn :iops_to_size_ratio\n  (send\n    (send\n      (lvar :iops) :to_f) :/\n    (send\n      (lvar :size) :to_f))) > ","iops to_f / ","size to_f ","iops to_f ","size < ","iops ! ","options [] == ","snapshot [] ","size ! ","Fog AWS Compute NotFound  new ","snapshot ! "," data [] [] ","Excon Response  new ","Fog Logger  deprecation "," caller first "," caller ","options is_a? ","Excon Response  new  body []= ","Excon Response  new  body ","Excon Response  new  body= ","Excon Response  new  status= ","Fog AWS Mock  Fog AWS Mock  volume_id  ","options []  > ","options []  < ","(lvasgn :iops to_f / \n  (send\n    (send\n      (lvar :iops) :to_f) :/\n    (send\n      (lvar :size) :to_f))) > ","(lvasgn :options [] _to_size_ratio\n  (send\n    (send\n      (lvar :options [] ) :to_f) :/\n    (send\n      (lvar :size) :to_f))) > ","(lvasgn :iops_to_snapshot [] _ratio\n  (send\n    (send\n      (lvar :iops) :to_f) :/\n    (send\n      (lvar :snapshot [] ) :to_f))) > ","options []  to_f / ","snapshot []  to_f ","options []  to_f ","snapshot []  < ","options []  ! "," data [] []  [] ","snapshot []  ! "," data [] []  ! "]}," Fog AWS Compute Real create_volume":{"type":"method","name":"create_volume","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"CreateVolume\")) merge ","Fog Parsers AWS Compute CreateVolume  new ","Fog Logger  deprecation "," caller first "," caller ","options is_a? "]}," Fog AWS Compute Mock create_tags":{"type":"method","name":"create_tags","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new "," data [] [] []= "," data [] [] ","resource [] "," data [] "," data ","tagged each "," data [] [] [] ","tags each "," tagged_resources ","Excon Response  new  body= ","Excon Response  new  status= "," tagged_resources  each ","  tagged_resources _resources "]}," Fog AWS Compute Real create_tags":{"type":"method","name":"create_tags","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"CreateTags\")) merge! ","Fog Parsers AWS Compute Basic  new ","params merge! ","Fog AWS  indexed_param ","tags values ","tags keys ","tags []= ","value nil? "]}," Fog AWS Compute Mock create_subnet":{"type":"method","name":"create_subnet","children":[],"call":["response body []= ","response body ","vpcId empty? ","cidrBlock empty? ","response body= ","response status= ","Fog AWS Mock  request_id "," data [] push "," data [] "," data ","default_nacl [] << ","data [] ","default_nacl [] ","nacl [] ","nacl [] == "," data [] values find "," data [] values ","Fog AWS Mock  network_acl_association_id ","Fog AWS Mock  subnet_id "," raise ","Fog AWS Compute Error  new "," IPAddress  parse include? "," IPAddress  parse ","subnet [] ","(send\n  (send\n    (send\n      (self) :data) :[]\n    (sym :subnets)) :select) each ","s [] == ","s [] "," data [] select "," IPAddress  parse include? ! ","vpc [] ","Fog AWS Compute NotFound  new ","vpc nil? ","v [] == ","v [] "," data [] find ","Excon Response  new tap ","Excon Response  new ","options [] ","options [] nil? "," IPAddr  new include? "," IPAddr  new "," IPAddr  new include? ! "]}," Fog AWS Compute Real create_subnet":{"type":"method","name":"create_subnet","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"CreateSubnet\")) merge! ","Fog Parsers AWS Compute CreateSubnet  new "]}," Fog AWS Compute Real create_spot_datafeed_subscription":{"type":"method","name":"create_spot_datafeed_subscription","children":[],"call":[" request ","Fog Parsers AWS Compute SpotDatafeedSubscription  new "]}," Fog AWS Compute Mock create_snapshot":{"type":"method","name":"create_snapshot","children":[],"call":[" raise ","Excon Errors  status_error ","response status= ","response body= ","(pair\n  (str \"requestId\")\n  (send\n    (const\n      (const\n        (const nil :Fog) :AWS) :Mock) :request_id)) merge! ","Fog AWS Mock  request_id "," data [] []= "," data [] "," data ","volume [] ","Time  now ","Fog AWS Mock  snapshot_id "," data [] [] ","Excon Response  new ","Excon Response  new  status= ","Excon Response  new  body= "," data [] []  [] ","Fog AWS Mock  Fog AWS Mock  snapshot_id  "]}," Fog AWS Compute Real create_snapshot":{"type":"method","name":"create_snapshot","children":[],"call":[" request ","Fog Parsers AWS Compute CreateSnapshot  new "]}," Fog AWS Compute Mock create_security_group":{"type":"method","name":"create_security_group","children":[],"call":["response body= ","Fog AWS Mock  request_id "," data [] []= "," data [] "," data "," raise ","v [] == ","v [] "," data [] find ","Fog AWS Mock  security_group_id ","Fog AWS Mock  default_vpc_for "," region ","Excon Response  new ","Excon Response  new  body= ","Fog AWS Mock  security_Fog AWS Mock  security_group_id  "]}," Fog AWS Compute Real create_security_group":{"type":"method","name":"create_security_group","children":[],"call":[" request ","Fog Parsers AWS Compute CreateSecurityGroup  new "]}," Fog AWS Compute Mock create_route_table":{"type":"method","name":"create_route_table","children":[],"call":["response body= ","Fog AWS Mock  request_id "," data [] push "," data [] "," data ","vpc [] ","Fog AWS Mock  route_table_id ","response status= "," raise ","Fog AWS Compute NotFound  new ","vpc nil? ","vpc [] eql? "," data [] find ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Compute Real create_route_table":{"type":"method","name":"create_route_table","children":[],"call":[" request ","Fog Parsers AWS Compute CreateRouteTable  new "]}," Fog AWS Compute Mock create_route":{"type":"method","name":"create_route","children":[],"call":[" raise ","Fog AWS Compute InvalidParameterValue  new ","destination_cidr_block empty? ","Fog AWS Compute NotFound  new ","route_table nil? ","Fog AWS Compute Error  new ","message << ","response body= ","Fog AWS Mock  request_id ","response status= ","route_table [] push ","route_table [] ","Excon Response  new ","(send\n  (send\n    (lvar :route_table) :[]\n    (str \"routeSet\")) :find) nil? ! ","(send\n  (send\n    (lvar :route_table) :[]\n    (str \"routeSet\")) :find) nil? ","route [] eql? ","route [] ","route_table [] find "," network_interfaces all first nil? "," network_interfaces all first "," network_interfaces all "," network_interfaces ","network_interface_id nil? ! ","network_interface_id nil? "," servers all first nil? "," servers all first "," servers all "," servers ","instance_id nil? ! ","instance_id nil? "," internet_gateways all first nil? "," internet_gateways all first "," internet_gateways all "," internet_gateways ","internet_gateway_id nil? ! ","internet_gateway_id nil? ","route_table nil? ! ","routetable [] eql? ","routetable [] "," data [] find "," data [] "," data ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Compute Real create_route":{"type":"method","name":"create_route","children":[],"call":[" request ","request_vars []= ","Fog Parsers AWS Compute Basic  new "]}," Fog AWS Compute Real create_placement_group":{"type":"method","name":"create_placement_group","children":[],"call":[" request ","Fog Parsers AWS Compute Basic  new "]}," Fog AWS Compute Mock create_network_interface":{"type":"method","name":"create_network_interface","children":[],"call":["response body= ","response status= ","Fog AWS Mock  request_id "," data [] []= "," data [] "," data ","options [] "," raise ","Fog AWS Compute Error  new ","(send\n  (send\n    (send\n      (self) :data) :[]\n    (sym :network_interfaces)) :map) include? ","ni_conf [] "," data [] map ","options []= ","p_ip to_s ","cidr_block first == ","cidr_block first ","cidr_block each_host ","options [] nil? ","groups []= ","group_obj [] ","group_obj nil? "," data [] [] ","options [] each ","IPAddress  parse ","subnet [] ","Fog AWS Mock  network_interface_id ","subnet nil? ","s [] == ","s [] "," data [] find ","Excon Response  new ","range each ","range drop [] ","range drop ","cidr_block ipv4? ","cidr_block to_range ","IPAddr  new ","Excon Response  new  body= ","Excon Response  new  status= ","Fog AWS Mock  request_Fog AWS Mock  network_interface_id  ","IPAddress  parse  first == ","IPAddr  new  first == ","cFog AWS Mock  network_interface_id r_block first == ","IPAddress  parse  first ","IPAddr  new  first ","cFog AWS Mock  network_interface_id r_block first ","IPAddress  parse  each_host ","IPAddr  new  each_host ","cFog AWS Mock  network_interface_id r_block each_host "," data [] []  [] "," data [] []  nil? ","Fog AWS Mock  network_interface_Fog AWS Mock  network_interface_id  ","range drop []  each ","cidr_block to_range  each ","range drop []  drop [] ","cidr_block to_range  drop [] ","range drop []  drop ","cidr_block to_range  drop ","IPAddress  parse  ipv4? ","IPAddr  new  ipv4? ","cFog AWS Mock  network_interface_id r_block ipv4? ","IPAddress  parse  to_range ","IPAddr  new  to_range ","cFog AWS Mock  network_interface_id r_block to_range ","cidr_block to_range drop []  ","cidr_block to_cidr_block to_range  "]}," Fog AWS Compute Real create_network_interface":{"type":"method","name":"create_network_interface","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"CreateNetworkInterface\")) merge! ","Fog Parsers AWS Compute CreateNetworkInterface  new ","options merge! ","Fog AWS  indexed_param ","options delete "]}," Fog AWS Compute Mock create_network_acl_entry":{"type":"method","name":"create_network_acl_entry","children":[],"call":[" raise ","Fog AWS Compute NotFound  new ","response body= ","Fog AWS Mock  request_id ","response status= "," data [] [] [] << "," data [] [] [] "," data [] [] "," data [] "," data ","data [] []= ","options [] ","data [] ","Fog AWS Compute Error  new ","r [] == ","r [] "," data [] [] [] find ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Compute Real create_network_acl_entry":{"type":"method","name":"create_network_acl_entry","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"CreateNetworkAclEntry\")) merge! ","Fog Parsers AWS Compute Basic  new "]}," Fog AWS Compute Mock create_network_acl":{"type":"method","name":"create_network_acl","children":[],"call":["response body= ","response status= ","Fog AWS Mock  request_id "," data [] []= "," data [] "," data "," raise ","Fog AWS Compute Error  new ","s [] == ","s [] "," data [] find ","Fog AWS Mock  network_acl_id ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= ","Fog AWS Mock  request_Fog AWS Mock  network_acl_id  ","Fog AWS Mock  network_acl_Fog AWS Mock  network_acl_id  "]}," Fog AWS Compute Real create_network_acl":{"type":"method","name":"create_network_acl","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"CreateNetworkAcl\")) merge! ","Fog Parsers AWS Compute CreateNetworkAcl  new "]}," Fog AWS Compute Mock create_key_pair":{"type":"method","name":"create_key_pair","children":[],"call":["response body= ","(pair\n  (str \"requestId\")\n  (send\n    (const\n      (const\n        (const nil :Fog) :AWS) :Mock) :request_id)) merge! ","Fog AWS Mock  request_id "," data [] []= "," data [] "," data ","Fog AWS Mock  key_material ","Fog AWS Mock  key_fingerprint ","response status= "," raise ","Fog AWS Compute Error  new "," data [] [] ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Compute Real create_key_pair":{"type":"method","name":"create_key_pair","children":[],"call":[" request ","Fog Parsers AWS Compute CreateKeyPair  new "]}," Fog AWS Compute Mock create_internet_gateway":{"type":"method","name":"create_internet_gateway","children":[],"call":["Excon Response  new "," data [] [] "," data [] "," data ","Fog AWS Mock  request_id "," data [] []= ","Fog AWS Mock  internet_gateway_id ","Fog AWS Mock  internet_Fog AWS Mock  internet_gateway_id  "]}," Fog AWS Compute Real create_internet_gateway":{"type":"method","name":"create_internet_gateway","children":[],"call":[" request ","Fog Parsers AWS Compute CreateInternetGateway  new "]}," Fog AWS Compute Mock create_image":{"type":"method","name":"create_image","children":[],"call":["response body []= ","response body ","name empty? ","response body= ","response status= ","register_image_response body [] ","register_image_response body ","Fog AWS Mock  request_id ","name empty? ! ","Excon Response  new "," register_image ","options delete ","v nil? ","params reject! ","params merge! ","Fog AWS  indexed_param ","mapping [] ","block_device_mappings map ","options [] ","Excon Response  new  body []= ","Excon Response  new  body ","Excon Response  new  body= ","Excon Response  new  status= ","register_image_Excon Response  new  body [] "," register_image  body [] ","register_image_Excon Response  new  body "," register_image  body "]}," Fog AWS Compute Real create_image":{"type":"method","name":"create_image","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"CreateImage\")) merge! ","Fog Parsers AWS Compute CreateImage  new ","no_reboot to_s ","v nil? ","params reject! ","params merge! ","Fog AWS  indexed_param ","mapping [] ","block_device_mappings map ","options [] "]}," Fog AWS Compute Mock indexed_multidimensional_params":{"type":"method","name":"indexed_multidimensional_params","children":[],"call":["params []= "," format ","(splat\n  (send\n    (lvar :multi_params) :[]\n    (lvar :key))) each_with_index ","multi_params [] ","multi_params keys each_with_index ","multi_params keys "]}," Fog AWS Compute Mock create_dhcp_options":{"type":"method","name":"create_dhcp_options","children":[],"call":["response body= "," data [] "," data ","Fog AWS Mock  request_id "," data [] push ","Fog AWS Mock  dhcp_options_id ","response status= ","Excon Response  new tap ","Excon Response  new ","params merge! "," indexed_multidimensional_params "]}," Fog AWS Compute Real indexed_multidimensional_params":{"type":"method","name":"indexed_multidimensional_params","children":[],"call":["params []= "," format ","(splat\n  (send\n    (lvar :multi_params) :[]\n    (lvar :key))) each_with_index ","multi_params [] ","multi_params keys each_with_index ","multi_params keys "]}," Fog AWS Compute Real create_dhcp_options":{"type":"method","name":"create_dhcp_options","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"CreateDhcpOptions\")) merge! ","Fog Parsers AWS Compute CreateDhcpOptions  new ","params merge! "," indexed_multidimensional_params "]}," Fog AWS Compute Mock copy_snapshot":{"type":"method","name":"copy_snapshot","children":[],"call":["response body= ","(pair\n  (str \"requestId\")\n  (send\n    (const\n      (const\n        (const nil :Fog) :AWS) :Mock) :request_id)) merge! ","Fog AWS Mock  request_id "," data [] []= "," data [] "," data ","Fog AWS Mock  snapshot_id ","response status= ","Excon Response  new ","Excon Response  new  body= ","Fog AWS Mock  Fog AWS Mock  snapshot_id  ","Excon Response  new  status= "]}," Fog AWS Compute Real copy_snapshot":{"type":"method","name":"copy_snapshot","children":[],"call":[" request ","params []= ","options [] ","Fog Parsers AWS Compute CopySnapshot  new ","Fog Logger  warning ","options is_a? "]}," Fog AWS Compute Mock copy_image":{"type":"method","name":"copy_image","children":[],"call":["response body= ","(pair\n  (str \"requestId\")\n  (send\n    (const\n      (const\n        (const nil :Fog) :AWS) :Mock) :request_id)) merge! ","Fog AWS Mock  request_id "," data [] []= "," data [] "," data ","Fog AWS Mock  image_id ","response status= ","Excon Response  new ","Excon Response  new  body= ","Fog AWS Mock  Fog AWS Mock  image_id  ","Excon Response  new  status= "]}," Fog AWS Compute Real copy_image":{"type":"method","name":"copy_image","children":[],"call":[" request ","Fog Parsers AWS Compute CopyImage  new "]}," Fog AWS Compute Mock cancel_spot_instance_requests":{"type":"method","name":"cancel_spot_instance_requests","children":[],"call":["response body= ","Fog AWS Mock  request_id ","spot_request []= ","spot_request [] []= ","spot_request [] "," raise ","Fog AWS Compute NotFound  new "," data [] [] "," data [] "," data ","Excon Response  new ","Excon Response  new  body= "," data [] []  []= "," data [] []  [] []= "," data [] []  [] "]}," Fog AWS Compute Real cancel_spot_instance_requests":{"type":"method","name":"cancel_spot_instance_requests","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"CancelSpotInstanceRequests\")) merge! ","Fog Parsers AWS Compute CancelSpotInstanceRequests  new ","Fog AWS  indexed_param "]}," Fog AWS Compute Mock find_matching_permission":{"type":"method","name":"find_matching_permission","children":[],"call":["permission [] == ","group_permission [] ","permission [] ","group [] find ","group [] "]}," Fog AWS Compute Mock normalize_permissions":{"type":"method","name":"normalize_permissions","children":[],"call":["normalized_permissions << ","r [] ","(or\n  (send\n    (lvar :permission) :[]\n    (str \"IpRanges\"))\n  (array)) map ","permission [] "," Integer ","(str \"tcp\") include? ","security_group [] ","authorized_group [] "," data [] "," data "," raise ","Fog AWS Compute NotFound  new "," data [] [] ","sg [] == ","sg [] "," data [] values find "," data [] values ","(or\n  (send\n    (lvar :permission) :[]\n    (str \"Groups\"))\n  (array)) map ","options [] each ","options [] ","(str \"tcp\") each ","v [] == ","v [] "," data [] find ","options [] =~ "]}," Fog AWS Compute Mock verify_permission_options":{"type":"method","name":"verify_permission_options","children":[],"call":[" verify_permission_options ","options [] each ","options [] "," raise ","Fog AWS Compute Error  new ","options [] empty? ","options [] is_a? ! ","options [] is_a? ","options key? ","options [] ! ","is_vpc ! ","(str \"tcp\") include? ! ","(str \"tcp\") include? ","options size <= ","options size "]}," Fog AWS Compute Mock authorize_security_group_ingress":{"type":"method","name":"authorize_security_group_ingress","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","group [] << ","group [] ","permission [] ","matching_group_permission [] "," find_matching_permission ","normalized_permissions each "," raise ","matching_group_permission [] include? ","permission [] any? "," normalize_permissions "," verify_permission_options ","group [] != ","Fog AWS Compute NotFound  new ","Excon Response  new "," data [] [] ","options fetch "," data [] "," data ","v [] == ","options [] ","v [] "," data [] values find "," data [] values ","options key? ","Fog AWS  parse_security_group_options ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  [] << "," data [] []  [] "," find_matching_permission  [] ","matching_ data [] [] _permission [] "," normalize_permissions  each "," find_matching_permission  [] include? ","matching_ data [] [] _permission [] include? "," verify_permission_Fog AWS  parse_security_group_options  "," data [] []  [] != ","Fog AWS  parse_security_group_options  fetch ","Fog AWS  parse_security_group_options  [] ","Fog AWS  parse_security_group_options  key? ","Fog AWS  parse_security_ data [] [] _options ","Fog AWS  parse_security_group_Fog AWS  parse_security_group_options  "]}," Fog AWS Compute Real indexed_ip_permissions_params":{"type":"method","name":"indexed_ip_permissions_params","children":[],"call":["v nil? ","params reject ","params []= ","ip_range [] "," format ","(or\n  (send\n    (lvar :permission) :[]\n    (str \"IpRanges\"))\n  (array)) each_with_index ","permission [] ","group [] ","(or\n  (send\n    (lvar :permission) :[]\n    (str \"Groups\"))\n  (array)) each_with_index ","ip_permissions each_with_index ","(or\n  (send\n    (lvar :permission) :[]\n    (str \"Ipv6Ranges\"))\n  (array)) each_with_index "]}," Fog AWS Compute Real authorize_security_group_ingress":{"type":"method","name":"authorize_security_group_ingress","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"AuthorizeSecurityGroupIngress\")) merge! ","Fog Parsers AWS Compute Basic  new ","options merge! "," indexed_ip_permissions_params ","options delete ","Fog AWS  parse_security_group_options ","Fog AWS  parse_security_group_options  merge! "," indexed_options delete _params ","Fog AWS  parse_security_group_options  delete ","Fog AWS  parse_security_group_Fog AWS  parse_security_group_options  "]}," Fog AWS Compute Mock find_matching_permission_egress":{"type":"method","name":"find_matching_permission_egress","children":[],"call":["permission [] == ","group_permission [] ","permission [] ","group [] find ","group [] "]}," Fog AWS Compute Mock authorize_security_group_egress":{"type":"method","name":"authorize_security_group_egress","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","group [] << ","group [] ","permission [] ","matching_group_permission [] "," find_matching_permission_egress ","normalized_permissions each "," raise ","matching_group_permission [] include? ","permission [] any? "," normalize_permissions "," verify_permission_options ","group [] != ","Fog AWS Compute NotFound  new ","Excon Response  new "," data [] [] ","options fetch "," data [] "," data ","v [] == ","options [] ","v [] "," data [] values find "," data [] values ","options key? ","Fog AWS  parse_security_group_options ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  [] << "," data [] []  [] "," find_matching_permission_egress  [] ","matching_ data [] [] _permission [] "," normalize_permissions  each "," find_matching_permission_egress  [] include? ","matching_ data [] [] _permission [] include? "," verify_permission_Fog AWS  parse_security_group_options  "," data [] []  [] != ","Fog AWS  parse_security_group_options  fetch ","Fog AWS  parse_security_group_options  [] ","Fog AWS  parse_security_group_options  key? ","Fog AWS  parse_security_ data [] [] _options ","Fog AWS  parse_security_group_Fog AWS  parse_security_group_options  "]}," Fog AWS Compute Real authorize_security_group_egress":{"type":"method","name":"authorize_security_group_egress","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"AuthorizeSecurityGroupEgress\")) merge! ","Fog Parsers AWS Compute Basic  new ","options merge! "," indexed_ip_permissions_params ","options delete ","Fog AWS  parse_security_group_options ","Fog AWS  parse_security_group_options  merge! "," indexed_options delete _params ","Fog AWS  parse_security_group_options  delete ","Fog AWS  parse_security_group_Fog AWS  parse_security_group_options  "]}," Fog AWS Compute Mock attach_volume":{"type":"method","name":"attach_volume","children":[],"call":[" raise ","Fog AWS Compute Error  new ","message << ","volume_id ! ","instance_id ! ","Fog AWS Compute NotFound  new ","volume ! ","instance ! ","response body= ","(pair\n  (str \"requestId\")\n  (send\n    (const\n      (const\n        (const nil :Fog) :AWS) :Mock) :request_id)) merge! ","Fog AWS Mock  request_id ","response status= ","volume []= ","Time  now ","volume [] == ","volume [] "," data [] [] "," data [] "," data ","Excon Response  new "," data [] [] _id ! "," data [] []  ! ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  []= "," data [] []  [] == "," data [] []  [] "]}," Fog AWS Compute Real attach_volume":{"type":"method","name":"attach_volume","children":[],"call":[" request ","Fog Parsers AWS Compute AttachVolume  new "]}," Fog AWS Compute Mock attach_network_interface":{"type":"method","name":"attach_network_interface","children":[],"call":[" raise ","Fog AWS Compute NotFound  new ","response body= ","attachment [] ","Fog AWS Mock  request_id ","response status= ","attachment []= "," data [] [] [] "," data [] [] "," data [] "," data ","Fog AWS Compute Error  new ","ni_conf [] [] == ","ni_conf [] [] ","ni_conf [] "," data [] find ","(send\n  (send\n    (send\n      (self) :data) :[]\n    (sym :instances)) :find) ! ","i_conf [] == ","i_conf [] ","Excon Response  new ","Excon Response  new  body= "," data [] [] []  [] ","Excon Response  new  status= "," data [] [] []  []= "]}," Fog AWS Compute Real attach_network_interface":{"type":"method","name":"attach_network_interface","children":[],"call":[" request ","Fog Parsers AWS Compute AttachNetworkInterface  new "]}," Fog AWS Compute Mock attach_internet_gateway":{"type":"method","name":"attach_internet_gateway","children":[],"call":[" raise ","Fog AWS Compute Error  new "," message "," message << ","vpc_id ! ","internet_gateway_id ! ","response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Compute Real attach_internet_gateway":{"type":"method","name":"attach_internet_gateway","children":[],"call":[" request ","Fog Parsers AWS Compute Basic  new "]}," Fog AWS Compute Mock attach_classic_link_vpc":{"type":"method","name":"attach_classic_link_vpc","children":[],"call":[" raise ","Fog AWS Compute NotFound  new ","vpc ! ","instance ! ","instance []= ","response body= ","Fog AWS Mock  request_id ","response status= ","Fog AWS Compute Error  new ","instance [] ","instance [] [] != ","instance [] [] "," data [] [] "," data [] "," data ","v [] == ","v [] "," data [] find ","Excon Response  new "," data [] []  ! "," data [] []  []= ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  [] "," data [] []  [] [] != "," data [] []  [] [] "]}," Fog AWS Compute Real attach_classic_link_vpc":{"type":"method","name":"attach_classic_link_vpc","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"AttachClassicLinkVpc\")) merge ","Fog AWS  indexed_param ","Fog Parsers AWS Compute Basic  new "]}," Fog AWS Compute Mock add_route_association":{"type":"method","name":"add_route_association","children":[],"call":["response []= ","Fog Mock  random_hex "]}," Fog AWS Compute Mock associate_route_table":{"type":"method","name":"associate_route_table","children":[],"call":[" raise ","Fog AWS Compute NotFound  new ","routetable nil? ","response body= ","association [] ","Fog AWS Mock  request_id ","routetable [] push ","routetable [] "," add_route_association ","response status= ","Excon Response  new ","subnet nil? ! ","subnet nil? ","routetable nil? ! ","subnet [] eql? ","subnet [] "," data [] find "," data [] "," data ","routetable [] eql? ","Excon Response  new  body= "," add_route_association  [] "," add_route_ add_route_association  ","Excon Response  new  status= "]}," Fog AWS Compute Real associate_route_table":{"type":"method","name":"associate_route_table","children":[],"call":[" request ","Fog Parsers AWS Compute AssociateRouteTable  new "]}," Fog AWS Compute Mock associate_dhcp_options":{"type":"method","name":"associate_dhcp_options","children":[],"call":[" raise ","Fog AWS Compute Error  new "," message "," message << ","vpc_id ! ","dhcp_options_id ! ","response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Compute Real associate_dhcp_options":{"type":"method","name":"associate_dhcp_options","children":[],"call":[" request ","Fog Parsers AWS Compute Basic  new "]}," Fog AWS Compute Mock associate_address":{"type":"method","name":"associate_address","children":[],"call":[" raise ","Fog AWS Compute Error  new ","params [] nil? ! ","params [] nil? ","params [] ","instance nil? ! ","instance nil? ","Fog AWS Compute NotFound  new ","address ! ","instance ! ","response body= ","Fog AWS Mock  request_id ","address []= ","Fog Mock  random_hex ","response status= ","instance []= ","Fog AWS Mock  dns_name_for "," data [] [] []= "," data [] [] ","instance [] "," data [] "," data ","current_instance []= ","current_instance [] ","address [] ","address nil? ! ","address nil? ","vpc [] ","v [] == ","v [] "," data [] detect ","public_ip nil? ","allocation_ip [] ","allocation_ip nil? ! ","allocation_ip nil? "," describe_addresses body [] first "," describe_addresses body [] "," describe_addresses body "," describe_addresses "," network_interface_id nil? ! "," network_interface_id nil? "," network_interface_id ","Excon Response  new ","params []= ","args [] ","args first ","args first kind_of? ","args first  [] nil? ! ","args first  [] nil? ","args first  [] "," data [] []  nil? ! "," data [] []  nil? "," data [] []  ! ","Excon Response  new  body= "," data [] []  []= ","Excon Response  new  status= "," data [] []  [] ","current_ data [] []  []= ","current_ data [] []  [] ","allocation_ip []  nil? "," describe_addresses body [] first  [] "," describe_addresses body [] first  nil? ! "," describe_addresses body [] first  nil? "," describe_ data [] [] es body [] first "," describe_ data [] [] es body [] "," describe_ data [] [] es body "," describe_ data [] [] es ","args first  []= "]}," Fog AWS Compute Real associate_address":{"type":"method","name":"associate_address","children":[],"call":[" request ","Fog Parsers AWS Compute AssociateAddress  new ","params [] ","params []= ","params [] nil? ","args [] ","args first ","args first kind_of? ","args first  [] ","args first  []= ","args first  [] nil? "]}," Fog AWS Compute Mock assign_private_ip_addresses":{"type":"method","name":"assign_private_ip_addresses","children":[],"call":["response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new "," raise ","Fog AWS Compute Error  new ","options [] ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Compute Real assign_private_ip_addresses":{"type":"method","name":"assign_private_ip_addresses","children":[],"call":[" request ","(pair\n  (str \"Action\")\n  (str \"AssignPrivateIpAddresses\")) merge ","Fog Parsers AWS Compute AssignPrivateIpAddresses  new ","options merge! ","Fog AWS  indexed_param ","options delete "," raise ","Fog AWS Compute Error  new ","options [] "]}," Fog AWS Compute Mock allocate_address":{"type":"method","name":"allocate_address","children":[],"call":["response body= ","(send\n  (lvar :data) :reject) merge ","Fog AWS Mock  request_id ","k == ","data reject "," data [] []= "," data [] "," data ","data []= ","Fog Mock  random_hex ","domain == ","Fog AWS Mock  ip_address ","response status= ","Excon Response  new "," raise "," describe_addresses body [] size < "," data [] [] "," describe_addresses body [] size "," describe_addresses body [] "," describe_addresses body "," describe_addresses ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS Compute Real allocate_address":{"type":"method","name":"allocate_address","children":[],"call":[" request ","Fog Parsers AWS Compute AllocateAddress  new ","domain == "]}," Fog AWS CDN Mock put_streaming_distribution_config":{"type":"method","name":"put_streaming_distribution_config","children":[],"call":["Fog AWS CDN Mock  error ","response body= ","k == ","distribution merge reject ","distribution merge ","Time  now utc iso8601 ","Time  now utc ","Time  now ","response headers []= ","Fog AWS CDN Mock  generic_id ","response headers ","response status= ","Excon Response  new ","distribution []= ","distribution [] merge! ","distribution [] ","distribution [] [] ","distribution [] != "," data [] [] "," data [] "," data ","Excon Response  new  body= "," data [] []  merge reject "," data [] []  merge ","Excon Response  new  headers []= ","Excon Response  new  headers ","Excon Response  new  status= "," data [] []  []= "," data [] []  [] merge! "," data [] []  [] "," data [] []  [] [] "," data [] []  [] != "]}," Fog AWS CDN Real put_streaming_distribution_config":{"type":"method","name":"put_streaming_distribution_config","children":[],"call":[" request ","Fog Parsers AWS CDN StreamingDistribution  new ","data << "]}," Fog AWS CDN Mock put_distribution_config":{"type":"method","name":"put_distribution_config","children":[],"call":["Fog AWS CDN Mock  error ","response body= ","k == ","distribution merge reject ","distribution merge ","Time  now utc iso8601 ","Time  now utc ","Time  now ","response headers []= ","Fog AWS CDN Mock  generic_id ","response headers ","response status= ","Excon Response  new ","distribution []= ","distribution [] merge! ","distribution [] ","distribution [] [] ","distribution [] != "," data [] [] "," data [] "," data ","Excon Response  new  body= "," data [] []  merge reject "," data [] []  merge ","Excon Response  new  headers []= ","Excon Response  new  headers ","Excon Response  new  status= "," data [] []  []= "," data [] []  [] merge! "," data [] []  [] "," data [] []  [] [] "," data [] []  [] != "]}," Fog AWS CDN Real put_distribution_config":{"type":"method","name":"put_distribution_config","children":[],"call":[" request ","Fog Parsers AWS CDN Distribution  new ","data << "]}," Fog AWS CDN Mock post_streaming_distribution":{"type":"method","name":"post_streaming_distribution","children":[],"call":["response body= "," data [] []= "," data [] "," data ","options [] ","Time  now utc iso8601 ","Time  now utc ","Time  now ","Fog AWS CDN Mock  domain_name ","Fog AWS CDN Mock  distribution_id ","options []= ","Time  now to_i to_s ","Time  now to_i ","response status= ","Excon Response  new ","Fog AWS CDN Mock  error ","(send\n  (send\n    (lvar :d) :[]\n    (str \"CNAME\")) :&\n  (begin\n    (or\n      (send\n        (lvar :options) :[]\n        (str \"CNAME\"))\n      (array)))) empty? ","d [] & ","d [] "," data [] values any? "," data [] values ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS CDN Real post_streaming_distribution":{"type":"method","name":"post_streaming_distribution","children":[],"call":[" request ","Fog Parsers AWS CDN StreamingDistribution  new ","data << ","options []= ","Time  now to_i to_s ","Time  now to_i ","Time  now "]}," Fog AWS CDN Mock post_invalidation":{"type":"method","name":"post_invalidation","children":[],"call":["Fog AWS CDN Mock  error ","response body= ","response status= ","Excon Response  new "," data [] [] []= "," data [] [] "," data [] "," data ","distribution [] ","Time  now utc iso8601 ","Time  now utc ","Time  now ","Fog AWS CDN Mock  distribution_id ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  [] ","Fog AWS CDN Mock   data [] [] _id "]}," Fog AWS CDN Real post_invalidation":{"type":"method","name":"post_invalidation","children":[],"call":[" request ","Fog Parsers AWS CDN PostInvalidation  new ","body << ","body << << << ","body << << "]}," Fog AWS CDN Mock post_distribution":{"type":"method","name":"post_distribution","children":[],"call":["response body= "," data [] []= "," data [] "," data ","options [] ","Time  now utc iso8601 ","Time  now utc ","Time  now ","Fog AWS CDN Mock  domain_name ","Fog AWS CDN Mock  distribution_id ","options []= ","Time  now to_i to_s ","Time  now to_i ","response status= ","Excon Response  new ","Fog AWS CDN Mock  error ","(send\n  (send\n    (lvar :d) :[]\n    (str \"CNAME\")) :&\n  (begin\n    (or\n      (send\n        (lvar :options) :[]\n        (str \"CNAME\"))\n      (array)))) empty? ","d [] & ","d [] "," data [] values any? "," data [] values ","Excon Response  new  body= ","Excon Response  new  status= "]}," Fog AWS CDN Real post_distribution":{"type":"method","name":"post_distribution","children":[],"call":[" request ","Fog Parsers AWS CDN Distribution  new ","data << ","options []= ","Time  now to_i to_s ","Time  now to_i ","Time  now "]}," Fog AWS CDN Mock to_streaming_distribution_summary":{"type":"method","name":"to_streaming_distribution_summary","children":[],"call":["(pair\n  (str \"DomainName\")\n  (send\n    (lvar :d) :[]\n    (str \"DomainName\"))) merge ","d [] "]}," Fog AWS CDN Mock get_streaming_distribution_list":{"type":"method","name":"get_streaming_distribution_list","children":[],"call":["response body= "," to_streaming_distribution_summary ","distributions map ","Fog Mock  random_hex "," data [] values "," data [] "," data ","response status= ","Excon Response  new ","Excon Response  new  body= "," data [] values  map ","Excon Response  new  status= "]}," Fog AWS CDN Real get_streaming_distribution_list":{"type":"method","name":"get_streaming_distribution_list","children":[],"call":[" request ","Fog Parsers AWS CDN GetStreamingDistributionList  new "]}," Fog AWS CDN Mock get_streaming_distribution":{"type":"method","name":"get_streaming_distribution","children":[],"call":["distribution []= ","response headers []= ","response headers ","response body= ","k == ","distribution reject ","response status= ","Fog AWS CDN Mock  generic_id ","Time  now - >= ","Fog Mock  delay * ","Fog Mock  delay ","Time  now - ","Time  parse ","distribution [] ","Time  now ","distribution [] == ","Fog AWS CDN Mock  error "," data [] [] "," data [] "," data ","Excon Response  new "," data [] []  []= ","Excon Response  new  headers []= ","Excon Response  new  headers ","Excon Response  new  body= "," data [] []  reject ","Excon Response  new  status= "," data [] []  [] "," data [] []  [] == "]}," Fog AWS CDN Real get_streaming_distribution":{"type":"method","name":"get_streaming_distribution","children":[],"call":[" request ","Fog Parsers AWS CDN StreamingDistribution  new "]}," Fog AWS CDN Mock to_invalidation_summary":{"type":"method","name":"to_invalidation_summary","children":[],"call":["d [] "]}," Fog AWS CDN Mock get_invalidation_list":{"type":"method","name":"get_invalidation_list","children":[],"call":["response body= "," to_invalidation_summary ","invalidations map ","Fog Mock  random_hex ","response status= ","Excon Response  new ","distribution [] ","invalidation []= ","Time  now - >= ","Fog Mock  delay * ","Fog Mock  delay ","Time  now - ","Time  parse ","invalidation [] ","Time  now ","invalidation [] == ","invalidations each ","(or\n  (send\n    (send\n      (send\n        (self) :data) :[]\n      (sym :invalidations)) :[]\n    (lvar :distribution_id))\n  (hash)) values "," data [] [] "," data [] "," data ","Fog AWS CDN Mock  error ","Excon Response  new  body= ","(or\n  (send\n    (send\n      (send\n        (self) :data) :[]\n      (sym :invalidations)) :[]\n    (lvar :distribution_id))\n  (hash)) values  map ","Excon Response  new  status= "," data [] []  [] ","(or\n  (send\n    (send\n      (send\n        (self) :data) :[]\n      (sym :invalidations)) :[]\n    (lvar :distribution_id))\n  (hash)) values  each ","(or\n  (send\n    (send\n      (send\n        (self) :data) :[]\n      (sym :(or\n  (send\n    (send\n      (send\n        (self) :data) :[]\n      (sym :invalidations)) :[]\n    (lvar :distribution_id))\n  (hash)) values )) :[]\n    (lvar :distribution_id))\n  (hash)) values ","(or\n  (send\n    (send\n      (send\n        (self) :data) :[]\n      (sym :invalidations)) :[]\n    (lvar : data [] [] _id))\n  (hash)) values "]}," Fog AWS CDN Real get_invalidation_list":{"type":"method","name":"get_invalidation_list","children":[],"call":[" request ","Fog Parsers AWS CDN GetInvalidationList  new "]}," Fog AWS CDN Mock get_invalidation":{"type":"method","name":"get_invalidation","children":[],"call":["response body= ","response status= ","Excon Response  new ","distribution [] ","invalidation []= ","Time  now - >= ","Fog Mock  delay * ","Fog Mock  delay ","Time  now - ","Time  parse ","invalidation [] ","Time  now ","invalidation [] == ","Fog AWS CDN Mock  error "," data [] [] [] "," data [] [] "," data [] "," data ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  [] "," data [] [] []  []= "," data [] [] []  [] "," data [] [] []  [] == "]}," Fog AWS CDN Real get_invalidation":{"type":"method","name":"get_invalidation","children":[],"call":[" request ","Fog Parsers AWS CDN GetInvalidation  new "]}," Fog AWS CDN Mock to_distribution_summary":{"type":"method","name":"to_distribution_summary","children":[],"call":["(pair\n  (str \"DomainName\")\n  (send\n    (lvar :d) :[]\n    (str \"DomainName\"))) merge ","d [] "]}," Fog AWS CDN Mock get_distribution_list":{"type":"method","name":"get_distribution_list","children":[],"call":["response body= "," to_distribution_summary ","distributions map ","Fog Mock  random_hex "," data [] values "," data [] "," data ","response status= ","Excon Response  new ","Excon Response  new  body= "," data [] values  map ","Excon Response  new  status= "]}," Fog AWS CDN Real get_distribution_list":{"type":"method","name":"get_distribution_list","children":[],"call":[" request ","Fog Parsers AWS CDN GetDistributionList  new "]}," Fog AWS CDN Mock get_distribution":{"type":"method","name":"get_distribution","children":[],"call":["distribution []= ","response headers []= ","response headers ","response body= ","(pair\n  (str \"InProgressInvalidationBatches\")\n  (int 0)) merge ","k == ","distribution reject ","response status= ","Fog AWS CDN Mock  generic_id ","Time  now - >= ","Fog Mock  delay * ","Fog Mock  delay ","Time  now - ","Time  parse ","distribution [] ","Time  now ","distribution [] == ","Fog AWS CDN Mock  error "," data [] [] "," data [] "," data ","Excon Response  new "," data [] []  []= ","Excon Response  new  headers []= ","Excon Response  new  headers ","Excon Response  new  body= "," data [] []  reject ","Excon Response  new  status= "," data [] []  [] "," data [] []  [] == "]}," Fog AWS CDN Real get_distribution":{"type":"method","name":"get_distribution","children":[],"call":[" request ","Fog Parsers AWS CDN Distribution  new "]}," Fog AWS CDN Mock delete_streaming_distribution":{"type":"method","name":"delete_streaming_distribution","children":[],"call":["Fog AWS CDN Mock  error ","response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new "," data [] delete "," data [] "," data ","distribution [] [] ","distribution [] ","distribution [] != "," data [] [] ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  [] [] "," data [] []  [] "," data [] []  [] != "]}," Fog AWS CDN Real delete_streaming_distribution":{"type":"method","name":"delete_streaming_distribution","children":[],"call":[" request "]}," Fog AWS CDN Mock delete_distribution":{"type":"method","name":"delete_distribution","children":[],"call":["Fog AWS CDN Mock  error ","response body= ","Fog AWS Mock  request_id ","response status= ","Excon Response  new "," data [] delete "," data [] "," data ","distribution [] [] ","distribution [] ","distribution [] != "," data [] [] ","Excon Response  new  body= ","Excon Response  new  status= "," data [] []  [] [] "," data [] []  [] "," data [] []  [] != "]}," Fog AWS CDN Real delete_distribution":{"type":"method","name":"delete_distribution","children":[],"call":[" request "]}," Fog Parsers AWS STS AssumeRoleWithWebIdentity end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= ","@value strip "]}," Fog Parsers AWS STS AssumeRoleWithWebIdentity reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Storage UploadPartCopyObject end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= ","Time  parse "," value "," value gsub "]}," Fog Parsers AWS Storage ListParts end_element":{"type":"method","name":"end_element","children":[],"call":["@part []= "," value to_i "," value ","@response [] << ","@response [] ","@response []= ","Time  parse "," value == ","@response [] []= "]}," Fog Parsers AWS Storage ListParts reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Storage ListMultipartUploads end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] << ","@response [] ","@response []= "," value to_i "," value ","@upload []= "," value == ","Time  parse ","@upload [] []= ","@upload [] "]}," Fog Parsers AWS Storage ListMultipartUploads start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS Storage ListMultipartUploads reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Storage InitiateMultipartUpload end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog Parsers AWS Storage InitiateMultipartUpload reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Storage GetService end_element":{"type":"method","name":"end_element","children":[],"call":["@bucket []= "," value ","@response [] []= ","@response [] ","Time  parse ","@response [] << "]}," Fog Parsers AWS Storage GetService reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Storage GetRequestPayment end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog Parsers AWS Storage GetObjectTagging end_element":{"type":"method","name":"end_element","children":[],"call":[" value ","@in_tag keys first ","@in_tag keys ","@in_tag []= ","@response [] merge! ","@response [] "]}," Fog Parsers AWS Storage GetObjectTagging start_element":{"type":"method","name":"start_element","children":[],"call":["name == "]}," Fog Parsers AWS Storage GetObjectTagging reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Storage GetBucketWebsite end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "]}," Fog Parsers AWS Storage GetBucketWebsite reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Storage GetBucketVersioning end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "]}," Fog Parsers AWS Storage GetBucketVersioning reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Storage GetBucketTagging end_element":{"type":"method","name":"end_element","children":[],"call":[" value ","@in_tag keys first ","@in_tag keys ","@in_tag []= ","@response [] merge! ","@response [] "]}," Fog Parsers AWS Storage GetBucketTagging start_element":{"type":"method","name":"start_element","children":[],"call":["name == "]}," Fog Parsers AWS Storage GetBucketTagging reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Storage GetBucketObjectVersions end_element":{"type":"method","name":"end_element","children":[],"call":["(ivar :@in_delete_marker) []= "," value ","@version []= "," value to_i ","@response []= ","Time  parse "," value == "," value gsub ","(ivar :@in_delete_marker) [] []= ","(ivar :@in_delete_marker) [] ","@response [] << ","@response [] "]}," Fog Parsers AWS Storage GetBucketObjectVersions start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS Storage GetBucketObjectVersions reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Storage GetBucketNotification end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] << ","@response [] ","@func []= "," value ","@queue []= ","@topic []= "]}," Fog Parsers AWS Storage GetBucketNotification start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS Storage GetBucketNotification reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Storage GetBucketLogging end_element":{"type":"method","name":"end_element","children":[],"call":["@grant [] []= "," value ","@grant [] ","@response [] []= ","@response [] ","@grant []= ","@response [] [] [] << ","@response [] [] [] ","@response [] [] "]}," Fog Parsers AWS Storage GetBucketLogging reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Storage GetBucketLocation end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog Parsers AWS Storage GetBucketLifecycle end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] << ","@response [] ","@rule []= "," value == "," value ","@version_transition []= "," value to_i ","@transition []= ","@version_expiration []= ","@expiration []= "]}," Fog Parsers AWS Storage GetBucketLifecycle start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS Storage GetBucketLifecycle reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Storage GetBucket end_element":{"type":"method","name":"end_element","children":[],"call":["@object []= "," value "," value to_i ","@response []= ","@response [] << ","@response [] ","Time  parse "," value == "," value gsub "," value != ","@object [] []= ","@object [] "]}," Fog Parsers AWS Storage GetBucket start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS Storage GetBucket reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Storage DeleteMultipleObjects end_element":{"type":"method","name":"end_element","children":[],"call":["@error [] []= "," value ","@error [] ","@deleted [] []= ","@deleted [] ","@response [] << ","@response [] "]}," Fog Parsers AWS Storage DeleteMultipleObjects start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS Storage DeleteMultipleObjects reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Storage CorsConfiguration end_element":{"type":"method","name":"end_element","children":[],"call":["(or-asgn\n  (send\n    (ivar :@cors_rule) :[]\n    (lvar :name))\n  (array)) << "," value ","@cors_rule [] ","@cors_rule []= "," value to_i ","@response [] << ","@response [] "]}," Fog Parsers AWS Storage CorsConfiguration start_element":{"type":"method","name":"start_element","children":[],"call":["name == "]}," Fog Parsers AWS Storage CorsConfiguration reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Storage CopyObject end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= ","Time  parse "," value "," value gsub "]}," Fog Parsers AWS Storage CompleteMultipartUpload end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog Parsers AWS Storage CompleteMultipartUpload reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Storage AccessControlList end_element":{"type":"method","name":"end_element","children":[],"call":["@grant [] []= "," value ","@grant [] ","@grant []= ","@response [] []= ","@response [] ","@response [] << "]}," Fog Parsers AWS Storage AccessControlList start_element":{"type":"method","name":"start_element","children":[],"call":["name == "]}," Fog Parsers AWS Storage AccessControlList reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS ELBV2 DescribeTags end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] ","@response [] [] << ","@response [] [] ","@tags []= "]}," Fog Parsers AWS ELBV2 DescribeTags start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS ELBV2 DescribeTags reset":{"type":"method","name":"reset","children":[],"call":["Hash  new "]}," Fog Parsers AWS ELBV2 DescribeLoadBalancers end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= ","@results []= "," value ","@response [] []= ","@response [] ","@state []= ","@load_balancer []= ","Time  parse ","@load_balancer_addresses []= ","@availability_zone []= "," reset_load_balancer ","@results [] << ","@results [] ","@load_balancer [] << ","@load_balancer [] "," reset_availability_zone ","@availability_zone [] << ","@availability_zone [] "]}," Fog Parsers AWS ELBV2 DescribeLoadBalancers start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS ELBV2 DescribeLoadBalancers reset_availability_zone":{"type":"method","name":"reset_availability_zone","children":[],"call":[]}," Fog Parsers AWS ELBV2 DescribeLoadBalancers reset_load_balancer":{"type":"method","name":"reset_load_balancer","children":[],"call":[]}," Fog Parsers AWS ELBV2 DescribeLoadBalancers reset":{"type":"method","name":"reset","children":[],"call":[" reset_availability_zone "," reset_load_balancer "]}," Fog Parsers AWS ELBV2 DescribeListeners end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= ","@results []= "," value ","@response [] []= ","@response [] ","@certificate []= ","@listener []= "," reset_listener ","@results [] << ","@results [] ","@listener [] << ","@listener [] ","@config []= ","@target_group_stickiness_config []= ","@default_action []= ","@target_group []= ","@target_groups << "]}," Fog Parsers AWS ELBV2 DescribeListeners start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS ELBV2 DescribeListeners reset_listener":{"type":"method","name":"reset_listener","children":[],"call":[]}," Fog Parsers AWS ELBV2 DescribeListeners reset":{"type":"method","name":"reset","children":[],"call":[" reset_listener "]}," Fog Parsers AWS ELBV2 CreateLoadBalancer end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= ","@results []= "," value ","@response [] []= ","@response [] ","@state []= ","@load_balancer []= ","Time  parse ","@load_balancer_addresses []= ","@availability_zone []= "," reset_load_balancer ","@results [] << ","@results [] ","@load_balancer [] << ","@load_balancer [] "," reset_availability_zone ","@availability_zone [] << ","@availability_zone [] "]}," Fog Parsers AWS ELBV2 CreateLoadBalancer start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS ELBV2 CreateLoadBalancer reset_availability_zone":{"type":"method","name":"reset_availability_zone","children":[],"call":[]}," Fog Parsers AWS ELBV2 CreateLoadBalancer reset_load_balancer":{"type":"method","name":"reset_load_balancer","children":[],"call":[]}," Fog Parsers AWS ELBV2 CreateLoadBalancer reset":{"type":"method","name":"reset","children":[],"call":[" reset_availability_zone "," reset_load_balancer "]}," Fog Parsers AWS DNS ListResourceRecordSets end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value == "," value "," value to_i ","@section == ","@resource_record_set []= ","@response [] << ","@response [] ","@geo_location []= ","@alias_target []= ","@resource_record_set [] << ","@resource_record_set [] "," value gsub "]}," Fog Parsers AWS DNS ListResourceRecordSets reset":{"type":"method","name":"reset","children":[],"call":["@response []= ","@resource_record_set []= "]}," Fog Parsers AWS DNS ListHostedZones end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "," value to_i ","@hosted_zones << ","@zone []= "," value sub "]}," Fog Parsers AWS DNS ListHostedZones reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS DNS ListHealthChecks end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "," value to_i ","@health_check_config []= ","@health_check []= ","@health_checks << "]}," Fog Parsers AWS DNS ListHealthChecks reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS DNS HealthCheck end_element":{"type":"method","name":"end_element","children":[],"call":["@health_check_config []= "," value to_i "," value ","@health_check []= ","@response []= "]}," Fog Parsers AWS DNS HealthCheck reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS DNS GetHostedZone end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= ","@response [] ","@vpcs << ","@vpc []= "," value ","@response []= ","@name_servers << ","@section == ","@hosted_zone []= "," value to_i "," value sub "]}," Fog Parsers AWS DNS GetHostedZone reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS DNS GetChange end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "," value sub "]}," Fog Parsers AWS DNS GetChange reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS DNS DeleteHostedZone end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] "]}," Fog Parsers AWS DNS DeleteHostedZone reset":{"type":"method","name":"reset","children":[],"call":["@response []= "]}," Fog Parsers AWS DNS CreateHostedZone end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= ","@name_servers << "," value ","@section == ","@change_info []= "," value sub ","@hosted_zone []= "]}," Fog Parsers AWS DNS CreateHostedZone reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS DNS ChangeResourceRecordSets end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "," value sub "]}," Fog Parsers AWS DNS ChangeResourceRecordSets reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Compute TerminateInstances end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@instance [] []= ","@instance [] "," value to_i ","@response [] << ","@response [] ","@instance []= "]}," Fog Parsers AWS Compute TerminateInstances start_element":{"type":"method","name":"start_element","children":[],"call":["name == "]}," Fog Parsers AWS Compute TerminateInstances reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Compute StartStopInstances end_element":{"type":"method","name":"end_element","children":[],"call":["@instance [] []= "," value ","@instance [] ","@response [] << ","@response [] ","@instance []= "," value to_s "]}," Fog Parsers AWS Compute StartStopInstances start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS Compute StartStopInstances reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Compute SpotInstanceRequests end_element":{"type":"method","name":"end_element","children":[],"call":["@spot_instance_request []= "," value to_f "," value ","@response []= ","@spot_instance_request [] []= "," value == ","@spot_instance_request [] ","@response [] << ","@response [] ","@spot_instance_request [] [] << ","@spot_instance_request [] [] ","@context last ","@spot_instance_request [] [] []= ","@context include? ! ","@context include? ","@block_device_mapping []= ","Time  parse ","@context pop "]}," Fog Parsers AWS Compute SpotInstanceRequests start_element":{"type":"method","name":"start_element","children":[],"call":["@context push ","@contexts include? "]}," Fog Parsers AWS Compute SpotInstanceRequests reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Compute SpotDatafeedSubscription end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@response [] []= ","@response [] ","@response [] [] "]}," Fog Parsers AWS Compute SpotDatafeedSubscription reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Compute RunInstances end_element":{"type":"method","name":"end_element","children":[],"call":["@instance []= "," value == "," value ","@response []= ","@instance [] []= ","@instance [] ","@instance [] << ","Time  parse ","@response [] << ","@response [] ","@context last ","@network_interfaces []= ","@block_device_mapping []= "," value to_i ","@context pop "]}," Fog Parsers AWS Compute RunInstances start_element":{"type":"method","name":"start_element","children":[],"call":["@context push ","@contexts include? "]}," Fog Parsers AWS Compute RunInstances reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Compute RestoreAddressToClassic end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog Parsers AWS Compute ReplaceNetworkAclAssociation end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog Parsers AWS Compute ReplaceNetworkAclAssociation reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Compute RegisterImage end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog Parsers AWS Compute PurchaseReservedInstancesOffering end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog Parsers AWS Compute PurchaseReservedInstancesOffering reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Compute NetworkInterfaceParser end_element":{"type":"method","name":"end_element","children":[],"call":["@nic []= "," value == "," value ","@private_ip_address []= ","@private_ip_addresses << "," value strip ","@association []= ","@attachment []= ","@group []= ","@nic [] []= ","@group [] ","@nic [] ","@tag []= ","@tag [] "]}," Fog Parsers AWS Compute NetworkInterfaceParser start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS Compute NetworkInterfaceParser reset":{"type":"method","name":"reset","children":[],"call":[" reset_nic "]}," Fog Parsers AWS Compute NetworkInterfaceParser reset_nic":{"type":"method","name":"reset_nic","children":[],"call":[]}," Fog Parsers AWS Compute NetworkAclParser end_element":{"type":"method","name":"end_element","children":[],"call":["@network_acl []= "," value == "," value ","@tag []= ","@network_acl [] []= ","@tag [] ","@network_acl [] ","@association []= ","@network_acl [] << ","@entry []= "," value to_i ","@entry [] []= ","@entry [] "]}," Fog Parsers AWS Compute NetworkAclParser start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS Compute NetworkAclParser reset":{"type":"method","name":"reset","children":[],"call":[" reset_nacl "]}," Fog Parsers AWS Compute NetworkAclParser reset_nacl":{"type":"method","name":"reset_nacl","children":[],"call":[]}," Fog Parsers AWS Compute MoveAddressToVpc end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog Parsers AWS Compute MonitorUnmonitorInstances end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= ","@current_instance_set []= "," value ","@instance_set << "]}," Fog Parsers AWS Compute MonitorUnmonitorInstances reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Compute ModifyVolume end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@response [] []= "," value to_i ","@response [] ","Time  parse "]}," Fog Parsers AWS Compute ModifyVolume reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Compute ModifySubnetAttribute end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "," value == "]}," Fog Parsers AWS Compute ModifySubnetAttribute reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Compute ImportKeyPair end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog Parsers AWS Compute GetPasswordData end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= ","Time  parse "]}," Fog Parsers AWS Compute GetPasswordData reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Compute GetConsoleOutput end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= ","Time  parse "," value ","Base64  decode64 "]}," Fog Parsers AWS Compute GetConsoleOutput reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Compute DetachVolume end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","Time  parse "]}," Fog Parsers AWS Compute DescribeVpcs end_element":{"type":"method","name":"end_element","children":[],"call":["@context pop ","@response []= "," value ","@response [] << ","@response [] ","@current_vpc []= "," value == ","@current_vpc [] << ","@current_vpc [] ","@current_ipv6_block []= "," value strip ","@current_cidr_block []= ","@current_vpc [] []= ","@context [] join ","@context [] "]}," Fog Parsers AWS Compute DescribeVpcs start_element":{"type":"method","name":"start_element","children":[],"call":["@context [] join ","@context [] ","@context push "]}," Fog Parsers AWS Compute DescribeVpcs reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Compute DescribeVpcClassicLinkDnsSupport end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] << ","@response [] ","@vpc []= "," value == "," value "]}," Fog Parsers AWS Compute DescribeVpcClassicLinkDnsSupport reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Compute DescribeVpcClassicLink end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@response [] << ","@response [] ","@vpc []= "," value == ","@tag []= ","@vpc [] []= ","@tag [] ","@vpc [] "]}," Fog Parsers AWS Compute DescribeVpcClassicLink start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS Compute DescribeVpcClassicLink reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Compute DescribeVpcAttribute end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "," value == "]}," Fog Parsers AWS Compute DescribeVpcAttribute start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS Compute DescribeVpcAttribute reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Compute DescribeVolumesModifications end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] << ","@modification dup ","@response [] ","@response []= "," value ","@modification []= "," value to_i ","Time  parse "]}," Fog Parsers AWS Compute DescribeVolumesModifications reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Compute DescribeVolumes end_element":{"type":"method","name":"end_element","children":[],"call":["@volume []= "," value == "," value "," value to_i ","@response []= ","@response [] << ","@response [] ","Time  parse ","@volume [] []= ","@tag [] ","@volume [] ","@tag []= ","@volume [] << ","@attachment []= "]}," Fog Parsers AWS Compute DescribeVolumes start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS Compute DescribeVolumes reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Compute DescribeVolumeStatus end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] << ","@response [] ","@response []= "," value ","@volume []= ","@volume_status []= ","@volume [] << ","@volume [] ","@event_set []= ","Time  parse "," value strip ","@volume_status [] << ","@volume_status [] ","@detail []= ","@action_set []= "]}," Fog Parsers AWS Compute DescribeVolumeStatus start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS Compute DescribeVolumeStatus reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Compute DescribeTags end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@response [] << ","@response [] ","@tag []= "]}," Fog Parsers AWS Compute DescribeTags reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Compute DescribeSubnets end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@response [] << ","@response [] ","@subnet []= "," value == ","@ipv6_cidr_block_association []= ","@tag []= ","@subnet [] []= ","@tag [] ","@subnet [] "]}," Fog Parsers AWS Compute DescribeSubnets start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS Compute DescribeSubnets reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Compute DescribeSpotPriceHistory end_element":{"type":"method","name":"end_element","children":[],"call":["@spot_price []= ","Time  parse "," value "," value to_f ","@response []= ","@response [] << ","@response [] "]}," Fog Parsers AWS Compute DescribeSpotPriceHistory reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Compute DescribeSnapshots end_element":{"type":"method","name":"end_element","children":[],"call":["@snapshot []= "," value == "," value "," value to_i ","Time  parse ","@response []= ","@snapshot [] ","@response [] << ","@response [] ","@tag []= ","@snapshot [] []= ","@tag [] "]}," Fog Parsers AWS Compute DescribeSnapshots start_element":{"type":"method","name":"start_element","children":[],"call":["name == "]}," Fog Parsers AWS Compute DescribeSnapshots reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Compute DescribeSecurityGroups end_element":{"type":"method","name":"end_element","children":[],"call":["@group []= "," value ","@response []= ","@response [] << ","@response [] ","@security_group [] << ","@security_group [] ","@ip_permission [] << ","@ip_permission [] ","@ip_permission_egress [] << ","@ip_permission_egress [] ","@ip_permission []= ","@ip_permission_egress []= ","@security_group []= "," value to_i ","@ip_range []= ","@tag []= ","@security_group [] []= ","@tag [] ","@ipv6_range []= "]}," Fog Parsers AWS Compute DescribeSecurityGroups start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS Compute DescribeSecurityGroups reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Compute DescribeRouteTables end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@response [] << ","@response [] ","@route_table []= ","@route_table [] << ","@route_table [] ","@route []= ","@route_table [] []= ","@tag [] ","@tag []= ","@association []= "," value == "]}," Fog Parsers AWS Compute DescribeRouteTables start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS Compute DescribeRouteTables reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Compute DescribeReservedInstancesOfferings end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@response [] << ","@response [] ","@reserved_instances_offering empty? ","@reserved_instances_offering []= "," value to_f "," value to_i "]}," Fog Parsers AWS Compute DescribeReservedInstancesOfferings reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Compute DescribeReservedInstances end_element":{"type":"method","name":"end_element","children":[],"call":["@reserved_instance []= ","Time  parse "," value ","@response []= ","@tag []= ","@charge []= "," value to_f ","@context last ","@reserved_instance [] []= ","@tag [] ","@reserved_instance [] ","@reserved_instance [] << ","@charge [] "," get_default_item ","@response [] << ","@response [] ","@context pop "," value to_i "," get_default_item  []= "," get_default_item  [] []= "," get_default_item  [] "," get_default_item  [] << "]}," Fog Parsers AWS Compute DescribeReservedInstances start_element":{"type":"method","name":"start_element","children":[],"call":["@context push ","@contexts include? "]}," Fog Parsers AWS Compute DescribeReservedInstances reset":{"type":"method","name":"reset","children":[],"call":[" get_default_item "]}," Fog Parsers AWS Compute DescribeReservedInstances get_default_item":{"type":"method","name":"get_default_item","children":[],"call":[]}," Fog Parsers AWS Compute DescribeRegions end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@region []= ","@response [] << ","@response [] "]}," Fog Parsers AWS Compute DescribeRegions reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Compute DescribePlacementGroups end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@placement_group []= ","@response [] << ","@response [] "]}," Fog Parsers AWS Compute DescribePlacementGroups reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Compute DescribeNetworkInterfaces end_element":{"type":"method","name":"end_element","children":[],"call":[" reset_nic ","@response [] << ","@response [] ","@item_level == ","@response []= "," value "]}," Fog Parsers AWS Compute DescribeNetworkInterfaces start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS Compute DescribeNetworkInterfaces reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Compute DescribeNetworkInterfaceAttribute end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@attachment []= "," value == ","@group []= ","@response [] []= ","@group [] ","@response [] "]}," Fog Parsers AWS Compute DescribeNetworkInterfaceAttribute start_element":{"type":"method","name":"start_element","children":[],"call":["@response []= ","@response key? "]}," Fog Parsers AWS Compute DescribeNetworkInterfaceAttribute reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Compute DescribeNetworkAcls end_element":{"type":"method","name":"end_element","children":[],"call":[" reset_nacl ","@response [] << ","@response [] ","@item_level == ","@response []= "," value "]}," Fog Parsers AWS Compute DescribeNetworkAcls start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS Compute DescribeNetworkAcls reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Compute DescribeKeyPairs end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@key []= ","@response [] << ","@response [] "]}," Fog Parsers AWS Compute DescribeKeyPairs reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Compute DescribeInternetGateways end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@response [] << ","@response [] ","@internet_gateway []= ","@attachment []= ","@tag []= ","@internet_gateway [] []= ","@tag [] ","@internet_gateway [] "]}," Fog Parsers AWS Compute DescribeInternetGateways start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS Compute DescribeInternetGateways reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Compute DescribeInstances end_element":{"type":"method","name":"end_element","children":[],"call":["@instance [] []= "," value ","@instance [] ","@instance []= "," value == ","@instance [] << ","@response []= ","@reservation []= ","@context last ","Time  parse ","@tag []= ","@response [] << ","@response [] ","@tag [] ","@reservation [] << ","@reservation [] ","@network_interface [] << ","@network_interface [] ","@context [] ","name == ","@network_interface []= ","@block_device_mapping []= "," value to_i ","@context last == ","@context pop "]}," Fog Parsers AWS Compute DescribeInstances start_element":{"type":"method","name":"start_element","children":[],"call":["@context push ","@contexts include? "]}," Fog Parsers AWS Compute DescribeInstances reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Compute DescribeInstanceStatus end_element":{"type":"method","name":"end_element","children":[],"call":["@item []= "," value ","@instance [] []= ","@instance [] ","@inside to_s ","@item nil? "," value to_i ","@response [] << ","@response [] ","@instance [] [] << ","@instance [] [] ","@instance [] << ","@response []= ","@instance []= "]}," Fog Parsers AWS Compute DescribeInstanceStatus start_element":{"type":"method","name":"start_element","children":[],"call":[" new_instance! "," new_item! "]}," Fog Parsers AWS Compute DescribeInstanceStatus reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Compute DescribeInstanceStatus new_item!":{"type":"method","name":"new_item!","children":[],"call":[]}," Fog Parsers AWS Compute DescribeInstanceStatus new_instance!":{"type":"method","name":"new_instance!","children":[],"call":[]}," Fog Parsers AWS Compute DescribeInstanceAttribute end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@group []= ","@response [] << ","@response [] "," value == ","@block_device_mapping []= ","Time  parse "]}," Fog Parsers AWS Compute DescribeInstanceAttribute start_element":{"type":"method","name":"start_element","children":[],"call":["@response []= ","@response key? "]}," Fog Parsers AWS Compute DescribeInstanceAttribute reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Compute DescribeImages end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@response [] << ","@response [] ","@image []= ","Time  parse "," value empty? ! "," value empty? "," value == ","@state_reason []= ","@tag []= ","@image [] []= ","@tag [] ","@image [] ","@image [] << ","@block_device_mapping []= "," value to_i "]}," Fog Parsers AWS Compute DescribeImages start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS Compute DescribeImages reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Compute DescribeImageAttribute end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@product_codes []= ","@response [] << ","@response [] ","@block_device_mapping []= "," value == ","Time  parse "]}," Fog Parsers AWS Compute DescribeImageAttribute start_element":{"type":"method","name":"start_element","children":[],"call":["@response []= ","@response key? "]}," Fog Parsers AWS Compute DescribeImageAttribute reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Compute DescribeDhcpOptions end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@response [] << ","@response [] ","@dhcp_options []= ","@value_set << ","@dhcp_configuration []= ","@in_value_set ! ","@dhcp_options [] []= ","@dhcp_configuration [] ","@dhcp_options [] ","@tag []= ","@tag [] "]}," Fog Parsers AWS Compute DescribeDhcpOptions start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS Compute DescribeDhcpOptions reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Compute DescribeClassicLinkInstances end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@response [] << ","@response [] ","@instance []= ","@group []= ","@instance [] << ","@instance [] ","@tag []= ","@instance [] []= ","@tag [] "]}," Fog Parsers AWS Compute DescribeClassicLinkInstances start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS Compute DescribeClassicLinkInstances reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Compute DescribeAvailabilityZones end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@availability_zone []= ","@availability_zone [] << ","@availability_zone [] ","@response [] << ","@response [] "]}," Fog Parsers AWS Compute DescribeAvailabilityZones reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Compute DescribeAvailabilityZones start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS Compute DescribeAddresses end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@response [] << ","@response [] ","@address []= ","@tag []= ","@address [] []= ","@tag [] ","@address [] "]}," Fog Parsers AWS Compute DescribeAddresses start_element":{"type":"method","name":"start_element","children":[],"call":["name == "]}," Fog Parsers AWS Compute DescribeAddresses reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Compute DescribeAccountAttributes end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] uniq! ","@response [] ","@response [] << ","@response []= "," value ","@attribute [] << ","@attribute [] ","@attribute []= "]}," Fog Parsers AWS Compute DescribeAccountAttributes start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS Compute DescribeAccountAttributes reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Compute DeregisterImage end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog Parsers AWS Compute CreateVpc end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@response [] << ","@response [] ","@vpc []= ","@tag []= ","@vpc [] []= ","@tag [] ","@vpc [] "]}," Fog Parsers AWS Compute CreateVpc start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS Compute CreateVpc reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Compute CreateVolume end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value == "," value "," value to_i ","Time  parse "]}," Fog Parsers AWS Compute CreateSubnet end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@subnet []= "," value == ","@ipv6_cidr_block_association []= ","@tag []= ","@subnet [] []= ","@tag [] ","@subnet [] "]}," Fog Parsers AWS Compute CreateSubnet start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS Compute CreateSubnet reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Compute CreateSnapshot end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value to_i "," value ","Time  parse "]}," Fog Parsers AWS Compute CreateSecurityGroup end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "," value == "]}," Fog Parsers AWS Compute CreateRouteTable end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@response [] << ","@response [] ","@route_table []= ","@route_table [] << ","@route_table [] ","@association []= ","@route []= ","@route_table [] []= ","@tag [] "]}," Fog Parsers AWS Compute CreateRouteTable start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS Compute CreateRouteTable reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Compute CreateNetworkInterface end_element":{"type":"method","name":"end_element","children":[],"call":[" reset_nic ","@response []= "," value "]}," Fog Parsers AWS Compute CreateNetworkInterface reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Compute CreateNetworkAcl end_element":{"type":"method","name":"end_element","children":[],"call":[" reset_nacl ","@response []= "," value "]}," Fog Parsers AWS Compute CreateNetworkAcl reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Compute CreateKeyPair end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog Parsers AWS Compute CreateInternetGateway end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@response [] << ","@response [] ","@internet_gateway []= ","@attachment []= ","@internet_gateway [] []= ","@attachment [] ","@internet_gateway [] ","@tag []= ","@vpc [] []= ","@tag [] ","@vpc [] "]}," Fog Parsers AWS Compute CreateInternetGateway start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS Compute CreateInternetGateway reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Compute CreateImage end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog Parsers AWS Compute CreateDhcpOptions end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","@response [] << ","@response [] ","@dhcp_options []= ","@value_set << ","@dhcp_configuration []= ","@in_value_set ! ","@dhcp_options [] []= ","@dhcp_configuration [] ","@dhcp_options [] ","@tag []= ","@tag [] "]}," Fog Parsers AWS Compute CreateDhcpOptions start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS Compute CreateDhcpOptions reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Compute CopySnapshot end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog Parsers AWS Compute CopyImage end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog Parsers AWS Compute CancelSpotInstanceRequests end_element":{"type":"method","name":"end_element","children":[],"call":["@spot_instance_request []= "," value ","@response []= ","@response [] << ","@response [] "]}," Fog Parsers AWS Compute CancelSpotInstanceRequests reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS Compute Basic end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value == "," value "]}," Fog Parsers AWS Compute AttachVolume end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value ","Time  parse "]}," Fog Parsers AWS Compute AttachNetworkInterface end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog Parsers AWS Compute AssociateRouteTable end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog Parsers AWS Compute AssociateAddress end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value == "," value "]}," Fog Parsers AWS Compute AssignPrivateIpAddresses end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value == "," value "]}," Fog Parsers AWS Compute AllocateAddress end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value "]}," Fog Parsers AWS CDN StreamingDistribution end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] [] << ","@response [] [] ","@response [] ","@response [] []= ","@response []= ","Time  parse ","@value to_i ","@response [] [] []= ","@value == "]}," Fog Parsers AWS CDN StreamingDistribution start_element":{"type":"method","name":"start_element","children":[],"call":["@response [] []= ","@response [] "]}," Fog Parsers AWS CDN StreamingDistribution reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS CDN PostInvalidation end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] [] << "," value ","@response [] [] ","@response [] ","@response []= ","@response [] []= "]}," Fog Parsers AWS CDN PostInvalidation reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS CDN GetStreamingDistributionList end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= ","@value to_i ","@value == ","@distribution_summary []= ","Time  parse ","@distribution_summary [] []= ","@distribution_summary [] ","@distribution_summary [] << ","@response [] << ","@response [] "]}," Fog Parsers AWS CDN GetStreamingDistributionList start_element":{"type":"method","name":"start_element","children":[],"call":["@distribution_summary []= "]}," Fog Parsers AWS CDN GetStreamingDistributionList reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS CDN GetInvalidationList end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= ","@value to_i ","@value == ","@invalidation_summary []= ","@response [] << ","@response [] "]}," Fog Parsers AWS CDN GetInvalidationList start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS CDN GetInvalidationList reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS CDN GetInvalidation end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] []= "," value ","@response [] ","@response []= ","@response [] [] << ","@response [] [] "]}," Fog Parsers AWS CDN GetInvalidation start_element":{"type":"method","name":"start_element","children":[],"call":[]}," Fog Parsers AWS CDN GetInvalidation reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS CDN GetDistributionList end_element":{"type":"method","name":"end_element","children":[],"call":["@response []= "," value to_i "," value "," value == ","@distribution_summary []= ","Time  parse ","@distribution_summary [] []= ","@distribution_summary [] ","@distribution_summary [] << ","@response [] << ","@response [] "]}," Fog Parsers AWS CDN GetDistributionList start_element":{"type":"method","name":"start_element","children":[],"call":["@distribution_summary []= "]}," Fog Parsers AWS CDN GetDistributionList reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog Parsers AWS CDN Distribution end_element":{"type":"method","name":"end_element","children":[],"call":["@response [] [] << ","@response [] [] ","@response [] ","@response [] []= "," value ","@response []= ","Time  parse "," value to_i ","@response [] [] []= "," value == "]}," Fog Parsers AWS CDN Distribution start_element":{"type":"method","name":"start_element","children":[],"call":["@response [] []= ","@response [] "]}," Fog Parsers AWS CDN Distribution reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog AWS Storage Versions new":{"type":"method","name":"new","children":[],"call":["model delete_marker= ","version_type == ","attributes [] ","attributes keys first ","attributes keys ","attributes keys first  == "]}," Fog AWS Storage Versions all":{"type":"method","name":"all","children":[],"call":[" load "," service get_bucket_object_versions body [] "," service get_bucket_object_versions body "," service get_bucket_object_versions "," directory key "," directory "," service ","options merge "," file key "," file "," file directory key "," file directory "]}," Fog AWS Storage Version destroy":{"type":"method","name":"destroy","children":[],"call":[" collection service delete_object "," version "," key "," collection directory key "," collection directory "," collection "," collection service "," collection file directory key "," collection file directory "," collection file "]}," Fog AWS Storage Version file":{"type":"method","name":"file","children":[],"call":[" collection directory files get "," version "," key "," collection directory files "," collection directory "," collection "," collection file directory files get "," collection file directory files "," collection file directory "," collection file "]}," Fog AWS Storage Files fetch_and_delete_header":{"type":"method","name":"fetch_and_delete_header","children":[],"call":["response headers delete ","response headers ","key downcase == ","header downcase ","key downcase ","response headers keys each ","response headers keys ","response get_header "]}," Fog AWS Storage Files normalize_headers":{"type":"method","name":"normalize_headers","children":[],"call":["data headers []= ","data headers "," fetch_and_delete_header ","DASHED_HEADERS  each "," fetch_and_delete_header gsub ","Time  parse ","data get_header gsub ","data get_header "]}," Fog AWS Storage Files new":{"type":"method","name":"new","children":[],"call":["(pair\n  (sym :directory)\n  (send nil :directory)) merge! "," directory "," requires "]}," Fog AWS Storage Files head":{"type":"method","name":"head","children":[],"call":[" new ","data headers merge ","data headers "," normalize_headers "," service head_object "," directory key "," directory "," service "," requires "," service head_object  headers merge "," service head_object  headers "]}," Fog AWS Storage Files head_url":{"type":"method","name":"head_url","children":[],"call":[" service head_object_url "," directory key "," directory "," service "," requires "]}," Fog AWS Storage Files get_https_url":{"type":"method","name":"get_https_url","children":[],"call":[" service get_object_https_url "," directory key "," directory "," service "," requires "]}," Fog AWS Storage Files get_http_url":{"type":"method","name":"get_http_url","children":[],"call":[" service get_object_http_url "," directory key "," directory "," service "," requires "]}," Fog AWS Storage Files get_url":{"type":"method","name":"get_url","children":[],"call":[" service get_object_url "," directory key "," directory "," service "," requires "]}," Fog AWS Storage Files get":{"type":"method","name":"get","children":[],"call":[" raise ","Fog AWS Storage NotFound  new "," directory identity "," directory ","error response body ","error response "," new ","data headers merge ","data body ","data headers "," normalize_headers "," service get_object "," directory key "," service "," requires "," service get_object  headers merge "," service get_object  body "," service get_object  headers "]}," Fog AWS Storage Files each":{"type":"method","name":"each","children":[],"call":["subset each_file_this_page ","subset all ","subset last key ","subset last ","subset is_truncated "," dup all "," dup "," block_given? ! "," block_given? ","subset all  each_file_this_page "," dup all  each_file_this_page ","subset all  all "," dup all  all ","subset all  last key "," dup all  last key ","subset all  last "," dup all  last ","subset all  is_truncated "," dup all  is_truncated "]}," Fog AWS Storage Files all":{"type":"method","name":"all","children":[],"call":[" load ","file attributes ","parent files map ","parent files "," merge_attributes ","parent files attributes "," directory collection get "," directory key "," directory "," directory collection ","value to_s empty? ","value to_s ","value nil? ","options reject ","(pair\n  (str \"delimiter\")\n  (send nil :delimiter)) merge! "," prefix "," max_keys "," marker "," delimiter "," requires "," directory collection get  files map "," directory collection get  files "," directory collection get  files attributes ","(pair\n  (str \"delimiter\")\n  (send nil :delimiter)) merge!  reject "]}," Fog AWS Storage File upload_in_threads":{"type":"method","name":"upload_in_threads","children":[],"call":["threads map compact ","threads map ","threads << ","thread abort_on_exception= ","pending clear! ","completed push ","part etag= ","part_upload body [] ","part_upload body "," service upload_part_copy ","part upload_options ","part part_number "," service ","pending shift ","Thread  new ","thread_count times ","pending shift  etag= "," service upload_part_copy  body [] ","pending shift _upload body [] "," service upload_part_copy  body ","pending shift _upload body "," service upload_pending shift _copy ","pending shift  upload_options ","pending shift  pending shift _number "]}," Fog AWS Storage File create_part_list":{"type":"method","name":"create_part_list","children":[],"call":["end_pos + ","pending << ","UploadPartData  new ","count + ","part_options []= ","upload_part_options dup ","(send\n  (lvar :current_pos) :+\n  (send\n    (self) :multipart_chunk_size)) min "," content_length - "," content_length ","current_pos + "," multipart_chunk_size ","current_pos < ","(send\n  (lvar :current_pos) :+\n  (send\n    (self) :multipart_chunk_size)) min  + ","upload_part_options dup  []= ","upload_upload_part_options dup  dup ","(send\n  (lvar :end_pos + ) :+\n  (send\n    (self) :multipart_chunk_size)) min ","end_pos +  + ","end_pos +  < "]}," Fog AWS Storage File encryption_customer_key_headers":{"type":"method","name":"encryption_customer_key_headers","children":[],"call":["Base64  encode64 chomp! ","Base64  encode64 ","OpenSSL Digest MD5  digest "," encryption_key to_s "," encryption_key "," encryption "]}," Fog AWS Storage File part_headers":{"type":"method","name":"part_headers","children":[],"call":["(pair\n  (str \"Content-MD5\")\n  (lvar :md5)) merge ","encryption_keys include? ","options select "," encryption_customer_key_headers keys "," encryption_customer_key_headers ","Base64  encode64 strip ","Base64  encode64 ","OpenSSL Digest MD5  digest ","base_headers merge "," part_checksum_headers ","base_headers merge! "," encryption_key "," encryption ","(pair\n  (str \"Content-MD5\")\n  (lvar :Base64  encode64 strip )) merge "," encryption_customer_key_headers keys  include? "," part_checksum_headers  merge "," part_checksum_headers  merge! "]}," Fog AWS Storage File encryption_headers":{"type":"method","name":"encryption_headers","children":[],"call":["value nil? ","(pair\n  (str \"x-amz-server-side-encryption\")\n  (send nil :encryption)) reject "," kms_key_id "," encryption "," encryption_customer_key_headers "," encryption_key "]}," Fog AWS Storage File multipart_copy":{"type":"method","name":"multipart_copy","children":[],"call":[" service complete_multipart_upload "," service "," raise "," service abort_multipart_upload ","(send\n  (send\n    (lvar :completed) :to_a) :sort_by) map ","part part_number ","completed to_a sort_by ","completed to_a ","errors first ","errors any? "," upload_in_threads ","PartList  new "," concurrency "," create_part_list ","res body [] ","res body "," service initiate_multipart_upload "," error first "," error ","(send\n  (send\n    (lvar :PartList  new ) :to_a) :sort_by) map ","PartList  new  to_a sort_by ","PartList  new  to_a "," upload_in_threads  first "," upload_in_threads  any? "," service initiate_multipart_upload  body [] "," service initiate_multipart_upload  body "]}," Fog AWS Storage File multipart_save":{"type":"method","name":"multipart_save","children":[],"call":[" service complete_multipart_upload "," key "," directory key "," directory "," service "," raise "," service abort_multipart_upload ","part_tags << ","part_upload headers [] ","part_upload headers "," service upload_part "," part_headers ","part_tags empty? ","part_tags size + ","part_tags size "," body read "," multipart_chunk_size "," body "," body rewind "," body respond_to? ","res body [] ","res body "," service initiate_multipart_upload "," service complete_multi service upload_part  "," service abort_multi service upload_part  "," service upload_part  headers [] "," service upload_part  headers "," multipart_ body read _size "," body  service initiate_multipart_upload pond_to? "," service initiate_multipart_upload  body [] "," service initiate_multipart_upload  body "," service initiate_multi service upload_part  "]}," Fog AWS Storage File directory=":{"type":"method","name":"directory=","children":[],"call":[]}," Fog AWS Storage File versions":{"type":"method","name":"versions","children":[],"call":["Fog AWS Storage Versions  new "," service "]}," Fog AWS Storage File url":{"type":"method","name":"url","children":[],"call":[" collection get_url "," key "," collection "," requires "]}," Fog AWS Storage File save":{"type":"method","name":"save","children":[],"call":["Fog Storage  get_content_type "," body "," content_type "," content_length= ","Fog Storage  get_body_size "," etag= "," etag gsub "," etag "," merge_attributes ","(str \"Content-Length\") include? ","data headers reject ","data headers "," service put_object "," key "," directory key "," directory "," service ","data body "," multipart_save "," body respond_to? ","Fog Storage  get_body_size >= "," multipart_chunk_size "," multipart_chunk_size= ","Fog Storage  get_body_size > "," multipart_chunk_size ! ","options merge! "," encryption_headers ","options []= "," tags "," storage_class "," metadata "," expires "," content_md5 "," content_encoding "," content_disposition "," cache_control ","options [] ","Fog Logger  deprecation "," caller first "," caller ","options != "," requires "," multipart_chunk_size > "," service max_put_chunk_size "," multipart_chunk_size nil? "," website_redirect_location "," service put_object  headers reject "," multipart_save  headers reject "," service put_object  headers "," multipart_save  headers "," service put_object  body "," multipart_save  body "," meta service put_object  "," meta multipart_save  "]}," Fog AWS Storage File public_url":{"type":"method","name":"public_url","children":[],"call":[" service request_url "," key "," directory key "," directory "," service "," public? "," requires "]}," Fog AWS Storage File public=":{"type":"method","name":"public=","children":[],"call":[]}," Fog AWS Storage File public?":{"type":"method","name":"public?","children":[],"call":["grant [] == ","grant [] ","grant [] [] == ","grant [] [] "," acl any? "," acl "]}," Fog AWS Storage File owner=":{"type":"method","name":"owner=","children":[],"call":[" attributes []= ","new_owner [] "," attributes "]}," Fog AWS Storage File metadata=":{"type":"method","name":"metadata=","children":[],"call":[" merge_attributes "]}," Fog AWS Storage File metadata":{"type":"method","name":"metadata","children":[],"call":["(send\n  (send\n    (lvar :key) :to_s) :=~\n  (regexp\n    (str \"^x-amz-\")\n    (regopt))) ! ","key to_s =~ ","key to_s "," attributes reject "," attributes ","(str \"x-amz-id-2\") include? ","(send\n  (send nil :attributes) :reject) reject "]}," Fog AWS Storage File destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_object "," key "," directory key "," directory "," service "," attributes []= "," attributes ","options [] == "," version ","options [] "," requires "]}," Fog AWS Storage File copy":{"type":"method","name":"copy","children":[],"call":["target_directory files head ","target_directory files "," service directories new "," service directories "," service "," service copy_object "," key "," directory key "," directory "," multipart_copy ","upload_part_options merge ","ALLOWED_UPLOAD_PART_OPTIONS  include? ","key to_sym ","options select "," content_length to_i >= "," multipart_chunk_size "," content_length to_i "," content_length "," multipart_chunk_size= ","MIN_MULTIPART_CHUNK_SIZE  * "," content_length to_i > "," multipart_chunk_size ! "," requires "," multipart_chunk_size > "," service max_copy_chunk_size "," multipart_chunk_size nil? ","options merge "," service directories new  files head "," service directories new  files ","upload_part_options merge  merge ","options merge  merge "]}," Fog AWS Storage File directory":{"type":"method","name":"directory","children":[],"call":[]}," Fog AWS Storage File body=":{"type":"method","name":"body=","children":[],"call":[" attributes []= "," attributes "]}," Fog AWS Storage File body":{"type":"method","name":"body","children":[],"call":[" attributes []= "," attributes ","file body "," collection get "," identity "," collection "," last_modified "," attributes [] "," attributes key? "," collection get  body "]}," Fog AWS Storage File acl=":{"type":"method","name":"acl=","children":[],"call":[" raise ","ArgumentError  new ","valid_acls join ","valid_acls include? "]}," Fog AWS Storage File acl":{"type":"method","name":"acl","children":[],"call":[" service get_object_acl body [] "," service get_object_acl body "," service get_object_acl "," key "," directory key "," directory "," service "," requires "]}," Fog AWS Storage File concurrency":{"type":"method","name":"concurrency","children":[],"call":[]}," Fog AWS Storage File concurrency=":{"type":"method","name":"concurrency=","children":[],"call":["concurrency to_i "," raise ","ArgumentError  new ","concurrency to_i < "]}," Fog AWS Storage File multipart_chunk_size=":{"type":"method","name":"multipart_chunk_size=","children":[],"call":[" raise ","ArgumentError  new ","mp_chunk_size < "," service validate_chunk_size "," service "]}," Fog AWS Storage File PartList to_a":{"type":"method","name":"to_a","children":[],"call":["@parts dup ","@mutex synchronize "]}," Fog AWS Storage File PartList size":{"type":"method","name":"size","children":[],"call":["@parts size ","@mutex synchronize "]}," Fog AWS Storage File PartList clear!":{"type":"method","name":"clear!","children":[],"call":["@parts clear ","@mutex synchronize "]}," Fog AWS Storage File PartList shift":{"type":"method","name":"shift","children":[],"call":["@parts shift ","@mutex synchronize "]}," Fog AWS Storage File PartList push":{"type":"method","name":"push","children":[],"call":["@parts push ","@mutex synchronize "]}," Fog AWS Storage File PartList initialize":{"type":"method","name":"initialize","children":[],"call":["Mutex  new "]}," Fog AWS Storage Directory clear!":{"type":"method","name":"clear!","children":[],"call":[" service delete_multiple_objects "," objects_keys "," key "," service "," objects_keys size > "," objects_keys size "," requires "]}," Fog AWS Storage Directory objects_keys":{"type":"method","name":"objects_keys","children":[],"call":["c [] ","bucket_query body [] map ","bucket_query body [] ","bucket_query body "," service get_bucket "," key "," service "," requires "," service get_bucket  body [] map "," service get_bucket  body [] "," service get_bucket  body "]}," Fog AWS Storage Directory bucket_location":{"type":"method","name":"bucket_location","children":[],"call":["data body [] ","data body "," service get_bucket_location "," key "," service "," persisted? "," requires "," service get_bucket_location  body [] "," service get_bucket_location  body "]}," Fog AWS Storage Directory persisted?":{"type":"method","name":"persisted?","children":[],"call":[" attributes [] ! ! "," attributes [] ! "," attributes [] "," attributes "]}," Fog AWS Storage Directory save":{"type":"method","name":"save","children":[],"call":[" attributes []= "," attributes "," service put_bucket "," key "," service ","options []= "," location "," location != "," persisted? ! "," persisted? "," acl "," requires "]}," Fog AWS Storage Directory public_url":{"type":"method","name":"public_url","children":[],"call":[" service request_url "," key "," service ","grant [] == ","grant [] ","grant [] [] == ","grant [] [] "," service get_bucket_acl body [] find "," service get_bucket_acl body [] "," service get_bucket_acl body "," service get_bucket_acl "," requires "]}," Fog AWS Storage Directory public=":{"type":"method","name":"public=","children":[],"call":[" acl= "]}," Fog AWS Storage Directory versions":{"type":"method","name":"versions","children":[],"call":["Fog AWS Storage Versions  new "," service "]}," Fog AWS Storage Directory versioning=":{"type":"method","name":"versioning=","children":[],"call":[" service put_bucket_versioning "," key "," service "," requires "]}," Fog AWS Storage Directory versioning?":{"type":"method","name":"versioning?","children":[],"call":["data body [] [] == ","data body [] [] ","data body [] ","data body "," service get_bucket_versioning "," key "," service "," requires "," service get_bucket_versioning  body [] [] == "," service get_bucket_versioning  body [] [] "," service get_bucket_versioning  body [] "," service get_bucket_versioning  body "]}," Fog AWS Storage Directory payer=":{"type":"method","name":"payer=","children":[],"call":[" service put_request_payment "," key "," service "," requires "]}," Fog AWS Storage Directory payer":{"type":"method","name":"payer","children":[],"call":["data body [] ","data body "," service get_request_payment "," key "," service "," requires "," service get_request_payment  body [] "," service get_request_payment  body "]}," Fog AWS Storage Directory files":{"type":"method","name":"files","children":[],"call":["Fog AWS Storage Files  new "," service "]}," Fog AWS Storage Directory location=":{"type":"method","name":"location=","children":[],"call":[]}," Fog AWS Storage Directory location":{"type":"method","name":"location","children":[],"call":[" bucket_location "]}," Fog AWS Storage Directory destroy!":{"type":"method","name":"destroy!","children":[],"call":[" service delete_bucket "," key "," service "," objects_keys size == "," objects_keys size "," objects_keys ","Fog  wait_for ","options [] "," clear! ","(pair\n  (sym :timeout)\n  (send\n    (const nil :Fog) :timeout)) merge ","Fog  interval ","Fog  timeout "," requires ","(pair\n  (sym :timeout)\n  (send\n    (const nil :Fog) :timeout)) merge  [] "]}," Fog AWS Storage Directory destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_bucket "," key "," service "," requires "]}," Fog AWS Storage Directory acl=":{"type":"method","name":"acl=","children":[],"call":[" raise ","ArgumentError  new ","VALID_ACLS  join ","VALID_ACLS  include? "]}," Fog AWS Storage Directories get":{"type":"method","name":"get","children":[],"call":["directory files load ","data [] ","directory files ","directory files merge_attributes ","options []= ","(str \"CommonPrefixes\") include? "," new "," service get_bucket body "," service get_bucket "," service "," remap_attributes "," new  files load "," service get_bucket body  [] "," new  files "," new  files merge_attributes "]}," Fog AWS Storage Directories all":{"type":"method","name":"all","children":[],"call":[" load "," service get_service body [] "," service get_service body "," service get_service "," service "]}," Fog AWS DNS Zones get":{"type":"method","name":"get","children":[],"call":[" new "," service get_hosted_zone body "," service get_hosted_zone "," service "]}," Fog AWS DNS Zones all":{"type":"method","name":"all","children":[],"call":[" load "," service list_hosted_zones body [] "," service list_hosted_zones body "," service list_hosted_zones "," service "," max_items ","options [] "," max_items nil? "," marker "," marker nil? "]}," Fog AWS DNS Zone save":{"type":"method","name":"save","children":[],"call":[" merge_attributes "," service create_hosted_zone body "," service create_hosted_zone "," domain "," service ","options []= "," description "," caller_reference "," requires "]}," Fog AWS DNS Zone records":{"type":"method","name":"records","children":[],"call":["Fog AWS DNS Records  new "," service "]}," Fog AWS DNS Zone destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_hosted_zone "," identity "," service "," requires "]}," Fog AWS DNS Records new":{"type":"method","name":"new","children":[],"call":["(pair\n  (sym :zone)\n  (send nil :zone)) merge! "," zone "," requires "]}," Fog AWS DNS Records get":{"type":"method","name":"get","children":[],"call":["(send\n  (begin\n    (or\n      (send\n        (lvar :data) :[]\n        (str \"ResourceRecordSets\"))\n      (array))) :map) compact first ","(send\n  (begin\n    (or\n      (send\n        (lvar :data) :[]\n        (str \"ResourceRecordSets\"))\n      (array))) :map) compact ","record set_identifier == ","record set_identifier ","record_identifier nil? ","record type == ","record type ","record_type nil? ","record name casecmp == ","record name casecmp ","record name "," new ","(or\n  (send\n    (lvar :data) :[]\n    (str \"ResourceRecordSets\"))\n  (array)) map ","data [] "," service list_resource_record_sets body "," service list_resource_record_sets "," zone id "," zone "," service ","value nil? ","options delete_if ","record_type upcase ","record_name + ","record_name end_with? "," requires ","(send\n  (begin\n    (or\n      (send\n        (lvar : service list_resource_record_sets body ) :[]\n        (str \"ResourceRecordSets\"))\n      (array))) :map) compact first ","(send\n  (begin\n    (or\n      (send\n        (lvar : service list_resource_record_sets body ) :[]\n        (str \"ResourceRecordSets\"))\n      (array))) :map) compact "," new  set_identifier == "," new  set_identifier "," new _identifier nil? "," new  type == "," new  type "," new _type nil? ","record_type upcase  nil? "," new  name casecmp == "," new  name casecmp "," new  name ","(or\n  (send\n    (lvar : service list_resource_record_sets body ) :[]\n    (str \"ResourceRecordSets\"))\n  (array)) map "," service list_resource_record_sets body  [] "," service list_resource_ new _sets body "," service list_resource_ new _sets "," new _type upcase ","record_type upcase  upcase "," new _name + ","record_name +  + "," new _name end_with? ","record_name +  end_with? "]}," Fog AWS DNS Records all!":{"type":"method","name":"all!","children":[],"call":[" load ","data concat ","batch [] "," merge_attributes ","(str \"IsTruncated\") include? ! ","(str \"IsTruncated\") include? ","batch reject ","batch []= ","batch key? "," service list_resource_record_sets body "," service list_resource_record_sets "," zone id "," zone "," service ","value nil? ","options delete_if "," next_record_identifier "," next_record_type "," next_record_name "," is_truncated "," service list_resource_record_sets body  [] "," service list_resource_record_sets body  reject "," service list_resource_record_sets body  []= "," service list_resource_record_sets body  key? "]}," Fog AWS DNS Records all":{"type":"method","name":"all","children":[],"call":[" load ","data [] "," merge_attributes ","(str \"IsTruncated\") include? ! ","(str \"IsTruncated\") include? ","data reject ","data []= ","data key? "," service list_resource_record_sets body "," service list_resource_record_sets "," zone id "," zone "," service ","value nil? ","options delete_if "," identifier ","options [] "," type "," zone domain "," max_items "," requires "," service list_resource_record_sets body  [] "," service list_resource_record_sets body  reject "," service list_resource_record_sets body  []= "," service list_resource_record_sets body  key? "]}," Fog AWS DNS Record attributes_to_options":{"type":"method","name":"attributes_to_options","children":[],"call":["options []= "," ttl "," requires "," alias_target "," health_check_id "," geo_location "," failover "," region "," set_identifier "," weight "," type "," symbolize_keys "," value "," name "," requires_one "]}," Fog AWS DNS Record zone=":{"type":"method","name":"zone=","children":[],"call":[]}," Fog AWS DNS Record reload":{"type":"method","name":"reload","children":[],"call":[" merge_attributes "," service get_change body "," service get_change "," change_id "," service "]}," Fog AWS DNS Record ready?":{"type":"method","name":"ready?","children":[],"call":[" status == "," status "," requires "]}," Fog AWS DNS Record modify":{"type":"method","name":"modify","children":[],"call":[" merge_attributes "," service change_resource_record_sets body "," service change_resource_record_sets "," zone id "," zone "," service ","options << "," attributes_to_options "]}," Fog AWS DNS Record save":{"type":"method","name":"save","children":[],"call":[" merge_attributes "," service change_resource_record_sets body "," service change_resource_record_sets "," zone id "," zone "," service "," attributes_to_options "," ttl "," alias_target "," attributes_to_ attributes_to_options  "]}," Fog AWS DNS Record zone":{"type":"method","name":"zone","children":[],"call":[]}," Fog AWS DNS Record destroy":{"type":"method","name":"destroy","children":[],"call":[" service change_resource_record_sets "," zone id "," zone "," service "," attributes_to_options "," attributes_to_ attributes_to_options  "]}," Fog AWS DNS Record initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Fog AWS Compute Vpcs get":{"type":"method","name":"get","children":[],"call":[" class new all first "," class new all "," class new "," service "," class "]}," Fog AWS Compute Vpcs all":{"type":"method","name":"all","children":[],"call":[" load ","data [] "," service describe_vpcs body "," service describe_vpcs "," service ","Fog Logger  warning "," caller first "," caller ","filters_arg class ","filters_arg is_a? "," service describe_vpcs body  [] "]}," Fog AWS Compute Vpcs initialize":{"type":"method","name":"initialize","children":[],"call":[" filters "]}," Fog AWS Compute VPC save":{"type":"method","name":"save","children":[],"call":[" service create_tags "," identity "," service "," reload ","Fog  wait_for "," tags "," merge_attributes ","key == ","data reject "," service create_vpc body [] first "," service create_vpc body [] "," service create_vpc body "," service create_vpc "," cidr_block "," tenancy "," amazon_provided_ipv_6_cidr_block "," requires "," service create_ tags  ","  tags  "," service create_vpc body [] first  reject "]}," Fog AWS Compute VPC disable_classic_link_dns":{"type":"method","name":"disable_classic_link_dns","children":[],"call":[" service disable_vpc_classic_link_dns_support body [] "," service disable_vpc_classic_link_dns_support body "," service disable_vpc_classic_link_dns_support "," identity "," service "," requires "]}," Fog AWS Compute VPC enable_classic_link_dns":{"type":"method","name":"enable_classic_link_dns","children":[],"call":[" service enable_vpc_classic_link_dns_support body [] "," service enable_vpc_classic_link_dns_support body "," service enable_vpc_classic_link_dns_support "," identity "," service "," requires "]}," Fog AWS Compute VPC classic_link_dns_enabled?":{"type":"method","name":"classic_link_dns_enabled?","children":[],"call":[" service describe_vpc_classic_link_dns_support body [] first [] "," service describe_vpc_classic_link_dns_support body [] first "," service describe_vpc_classic_link_dns_support body [] "," service describe_vpc_classic_link_dns_support body "," service describe_vpc_classic_link_dns_support "," identity "," service "," requires "]}," Fog AWS Compute VPC disable_classic_link":{"type":"method","name":"disable_classic_link","children":[],"call":[" service disable_vpc_classic_link body [] "," service disable_vpc_classic_link body "," service disable_vpc_classic_link "," identity "," service "," requires "]}," Fog AWS Compute VPC enable_classic_link":{"type":"method","name":"enable_classic_link","children":[],"call":[" service enable_vpc_classic_link body [] "," service enable_vpc_classic_link body "," service enable_vpc_classic_link "," identity "," service "," requires "]}," Fog AWS Compute VPC classic_link_enabled?":{"type":"method","name":"classic_link_enabled?","children":[],"call":[" service describe_vpc_classic_link body [] first [] "," service describe_vpc_classic_link body [] first "," service describe_vpc_classic_link body [] "," service describe_vpc_classic_link body "," service describe_vpc_classic_link "," identity "," service "," requires "]}," Fog AWS Compute VPC destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_vpc "," id "," service "," requires "]}," Fog AWS Compute VPC is_default?":{"type":"method","name":"is_default?","children":[],"call":[" is_default "," requires "," require "]}," Fog AWS Compute VPC ready?":{"type":"method","name":"ready?","children":[],"call":[" state == "," state "," requires "]}," Fog AWS Compute VPC initialize":{"type":"method","name":"initialize","children":[],"call":[" amazon_provided_ipv_6_cidr_block "," tenancy "," dhcp_options_id "]}," Fog AWS Compute VPC subnets":{"type":"method","name":"subnets","children":[],"call":[" service subnets all "," service subnets "," identity "," service "]}," Fog AWS Compute Volumes new":{"type":"method","name":"new","children":[],"call":["(pair\n  (sym :server)\n  (send nil :server)) merge! "," server "]}," Fog AWS Compute Volumes get":{"type":"method","name":"get","children":[],"call":[" class new all first "," class new all "," class new "," service "," class "]}," Fog AWS Compute Volumes all":{"type":"method","name":"all","children":[],"call":[" replace ","volume server_id == "," server id "," server ","volume server_id "," select "," load ","data [] "," service describe_volumes body "," service describe_volumes "," service ","Fog Logger  deprecation "," caller first "," caller ","filters_arg class ","filters_arg is_a? "," service describe_volumes body  [] "]}," Fog AWS Compute Volumes initialize":{"type":"method","name":"initialize","children":[],"call":[" filters "]}," Fog AWS Compute Volume create_params":{"type":"method","name":"create_params","children":[],"call":[" type "," snapshot_id "," iops "," key_id "," encrypted "]}," Fog AWS Compute Volume attachmentSet=":{"type":"method","name":"attachmentSet=","children":[],"call":[" merge_attributes ","new_attachment_set first "]}," Fog AWS Compute Volume server=":{"type":"method","name":"server=","children":[],"call":[" raise "]}," Fog AWS Compute Volume detach":{"type":"method","name":"detach","children":[],"call":[" reload "," service detach_volume "," id "," service "," persisted? "," server_id= "]}," Fog AWS Compute Volume attach":{"type":"method","name":"attach","children":[],"call":[" reload "," service attach_volume "," id "," server_id "," service "," server_id= ","new_server id "," ready? "," wait_for "," availability_zone= ","new_server availability_zone "," persisted? ! "," persisted? "]}," Fog AWS Compute Volume force_detach":{"type":"method","name":"force_detach","children":[],"call":[" detach "]}," Fog AWS Compute Volume snapshot":{"type":"method","name":"snapshot","children":[],"call":[" service create_snapshot "," id "," service "," requires "]}," Fog AWS Compute Volume snapshots":{"type":"method","name":"snapshots","children":[],"call":[" service snapshots "," service "," requires "]}," Fog AWS Compute Volume server":{"type":"method","name":"server","children":[],"call":[" service servers get "," server_id "," service servers "," service "," requires "]}," Fog AWS Compute Volume save":{"type":"method","name":"save","children":[],"call":[" attach "," device "," service create_tags "," identity "," service "," service volumes get "," service volumes ","Fog  wait_for "," tags "," merge_attributes "," service create_volume body "," service create_volume "," create_params "," size "," availability_zone "," requires "," type == "," type "," requires_one "," service modify_volume "," iops "," service create_ tags  ","  tags  "]}," Fog AWS Compute Volume modifications":{"type":"method","name":"modifications","children":[],"call":[" service describe_volumes_modifications body [] "," service describe_volumes_modifications body "," service describe_volumes_modifications "," identity "," service "," requires "]}," Fog AWS Compute Volume modification_in_progress?":{"type":"method","name":"modification_in_progress?","children":[],"call":["m [] != ","m [] "," modifications any? "," modifications "]}," Fog AWS Compute Volume ready?":{"type":"method","name":"ready?","children":[],"call":[" state == "," state "]}," Fog AWS Compute Volume destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_volume "," id "," service "," requires "]}," Fog AWS Compute Volume initialize":{"type":"method","name":"initialize","children":[],"call":["attributes delete "]}," Fog AWS Compute Tags get":{"type":"method","name":"get","children":[],"call":[" class new all "," class new "," service "," class "]}," Fog AWS Compute Tags all":{"type":"method","name":"all","children":[],"call":[" load ","data [] "," service describe_tags body "," service describe_tags "," service "," service describe_tags body  [] "]}," Fog AWS Compute Tags initialize":{"type":"method","name":"initialize","children":[],"call":[" filters "]}," Fog AWS Compute Tag save":{"type":"method","name":"save","children":[],"call":[" service create_tags "," value "," key "," resource_id "," service "," requires "]}," Fog AWS Compute Tag destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_tags "," value "," key "," resource_id "," service "," requires "]}," Fog AWS Compute Tag initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Fog AWS Compute Subnets get":{"type":"method","name":"get","children":[],"call":[" class new all first "," class new all "," class new "," service "," class "]}," Fog AWS Compute Subnets all":{"type":"method","name":"all","children":[],"call":[" load ","data [] "," service describe_subnets body "," service describe_subnets "," service ","Fog Logger  warning "," caller first "," caller ","filters_arg class ","filters_arg is_a? "," service describe_subnets body  [] "]}," Fog AWS Compute Subnets initialize":{"type":"method","name":"initialize","children":[],"call":[" filters "]}," Fog AWS Compute Subnet save":{"type":"method","name":"save","children":[],"call":[" merge_attributes ","key == ","data reject "," service create_subnet body [] "," service create_subnet body "," service create_subnet "," cidr_block "," vpc_id "," service ","options []= "," availability_zone "," requires "," service create_subnet body []  reject "]}," Fog AWS Compute Subnet destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_subnet "," subnet_id "," service "," requires "]}," Fog AWS Compute Subnet network_interfaces":{"type":"method","name":"network_interfaces","children":[],"call":[" service network_interfaces all "," identity "," service network_interfaces "," service "]}," Fog AWS Compute Subnet ready?":{"type":"method","name":"ready?","children":[],"call":[" state == "," state "," requires "]}," Fog AWS Compute SpotRequests get":{"type":"method","name":"get","children":[],"call":[" class new all first "," class new all "," class new "," service "," class "]}," Fog AWS Compute SpotRequests bootstrap":{"type":"method","name":"bootstrap","children":[],"call":["server setup ","spot_request private_key "," ready? ","server wait_for "," service create_tags ","spot_request tags ","spot_request instance_id "," service "," service servers get "," service servers ","spot_request reload ready? ","spot_request reload ","Fog  wait_for ","spot_request save ","security_group authorize_port_range ","ip_permission [] == ","ip_permission [] ","ip_permission [] first [] == ","ip_permission [] first [] ","ip_permission [] first ","security_group ip_permissions find ","security_group ip_permissions "," service security_groups get ","spot_request groups first ","spot_request groups "," service security_groups ","spot_request key_pair= "," service key_pairs create ","spot_request public_key "," service key_pairs "," service key_pairs get ","Fog  credential ","Fog  respond_to? ","new_attributes [] "," service spot_requests new "," service spot_requests "," service servers get  setup "," service spot_requests new  private_key "," service servers get  wait_for "," service spot_requests new  tags "," service spot_requests new  instance_id "," service  service servers get s get "," service  service servers get s "," service spot_requests new  reload ready? "," service spot_requests new  reload "," service spot_requests new  save "," service security_groups get  authorize_port_range "," service security_groups get  ip_permissions find "," service security_groups get  ip_permissions "," service  service security_groups get s get "," service spot_requests new  groups first "," service spot_requests new  groups "," service  service security_groups get s "," service spot_requests new  key_pair= "," service spot_requests new  public_key "," service  service spot_requests new s new "," service  service spot_requests new s "]}," Fog AWS Compute SpotRequests all":{"type":"method","name":"all","children":[],"call":[" load ","(send\n  (send\n    (lvar :data) :[]\n    (str \"spotInstanceRequestSet\")) :map) flatten ","spot_instance_request merge ","spot_instance_request [] ","spot_instance_request []= ","LaunchSpecification. + + ","name [] ","LaunchSpecification. + ","name [] upcase ","spot_instance_request [] each ","data [] map ","data [] "," service describe_spot_instance_requests body "," service describe_spot_instance_requests "," service "," filters= ","Fog Logger  deprecation "," caller first "," caller ","filters class ","filters is_a? ","(send\n  (send\n    (lvar : service describe_spot_instance_requests body ) :[]\n    (str \"spotInstanceRequestSet\")) :map) flatten "," service describe_spot_instance_requests body  [] map "," service describe_spot_instance_requests body  [] "]}," Fog AWS Compute SpotRequests initialize":{"type":"method","name":"initialize","children":[],"call":[" filters "]}," Fog AWS Compute SpotRequest save":{"type":"method","name":"save","children":[],"call":[" merge_attributes ","spot_instance_request merge ","spot_instance_request [] ","spot_instance_request []= ","LaunchSpecification. + + ","name [] ","LaunchSpecification. + ","name [] upcase ","spot_instance_request [] each ","data [] first ","data [] "," service request_spot_instances body "," service request_spot_instances "," price "," flavor_id "," image_id "," service ","value nil? ","options delete_if "," valid_until "," valid_from "," request_type "," subnet_id "," user_data "," ebs_optimized "," groups "," security_group_ids "," availability_zone "," monitoring "," key_name "," block_device_mapping "," launch_group "," instance_count "," availability_zone_group "," requires ","data [] first  merge ","data [] first  [] ","data [] first  []= ","data [] first  [] each "," service request_spot_instances body  [] first "," service request_spot_instances body  [] "," user_ service request_spot_instances body  "]}," Fog AWS Compute SpotRequest ready?":{"type":"method","name":"ready?","children":[],"call":[" state == "," state "]}," Fog AWS Compute SpotRequest key_pair=":{"type":"method","name":"key_pair=","children":[],"call":[" key_name= ","new_keypair name "]}," Fog AWS Compute SpotRequest key_pair":{"type":"method","name":"key_pair","children":[],"call":[" service key_pairs all first "," service key_pairs all "," key_name "," service key_pairs "," service "," requires "]}," Fog AWS Compute SpotRequest destroy":{"type":"method","name":"destroy","children":[],"call":[" service cancel_spot_instance_requests "," id "," service "," requires "]}," Fog AWS Compute SpotRequest initialize":{"type":"method","name":"initialize","children":[],"call":["@service instance_variable_get "," prepare_service_value "," username "," image_id "," flavor_id "," security_group_ids "," groups "]}," Fog AWS Compute Snapshots new":{"type":"method","name":"new","children":[],"call":["(pair\n  (str \"volumeId\")\n  (send\n    (send nil :volume) :id)) merge! "," volume id "," volume "]}," Fog AWS Compute Snapshots get":{"type":"method","name":"get","children":[],"call":[" class new all first "," class new all "," class new "," service "," class "]}," Fog AWS Compute Snapshots all":{"type":"method","name":"all","children":[],"call":[" replace ","snapshot volume_id == "," volume id "," volume ","snapshot volume_id "," select "," load ","data [] "," service describe_snapshots body "," service describe_snapshots ","filters merge! "," service ","Fog Logger  deprecation "," caller first "," caller ","filters_arg class ","filters_arg is_a? "," service describe_snapshots body  [] "]}," Fog AWS Compute Snapshots initialize":{"type":"method","name":"initialize","children":[],"call":[" filters "]}," Fog AWS Compute Snapshot volume=":{"type":"method","name":"volume=","children":[],"call":[" volume_id= ","new_volume volume_id "]}," Fog AWS Compute Snapshot volume":{"type":"method","name":"volume","children":[],"call":[" service describe_volumes "," volume_id "," service "," requires "]}," Fog AWS Compute Snapshot save":{"type":"method","name":"save","children":[],"call":[" merge_attributes ","key == ","data reject "," service create_snapshot body "," service create_snapshot "," description "," volume_id "," service "," requires "," raise ","Fog Errors Error  new "," persisted? "," service create_snapshot body  reject "]}," Fog AWS Compute Snapshot ready?":{"type":"method","name":"ready?","children":[],"call":[" state == "," state "]}," Fog AWS Compute Snapshot destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_snapshot "," id "," service "," requires "]}," Fog AWS Compute Servers _setup_bootstrap":{"type":"method","name":"_setup_bootstrap","children":[],"call":["security_group authorize_port_range ","ip_permission [] == ","ip_permission [] ","ip_range [] == ","ip_range [] ","ip_permission [] find ","security_group ip_permissions find ","security_group ip_permissions "," raise ","server groups first ","server groups ","security_group nil? "," service security_groups get "," service security_groups "," service ","server key_pair= "," service key_pairs create ","server public_key "," service key_pairs "," service key_pairs get ","Fog  credential ","Fog  respond_to? ","server key_name "," service security_groups get  authorize_port_range "," service security_groups get  ip_permissions find "," service security_groups get  ip_permissions "," service security_groups get  nil? "," service  service security_groups get s get "," service  service security_groups get s "]}," Fog AWS Compute Servers save_many":{"type":"method","name":"save_many","children":[],"call":[" service create_tags ","server identity "," service ","Fog  wait_for ","server reload ","tags size > ","tags size ","server tags ","server merge_attributes ","template dup ","(send\n  (send\n    (send\n      (lvar :data) :body) :[]\n    (str \"instancesSet\")) :select) map ","instance_set [] ","data body [] select ","data body [] ","data body "," service run_instances ","template run_instance_options ","template image_id "," service create_server tags  ","template dup  identity ","template dup  reload ","server tags  size > ","server tags  size ","server server tags  ","template dup  tags ","template dup  merge_attributes ","(send\n  (send\n    (send\n      (lvar : service run_instances ) :body) :[]\n    (str \"instancesSet\")) :select) map "," service run_instances  body [] select "," service run_instances  body [] "," service run_instances  body "]}," Fog AWS Compute Servers get":{"type":"method","name":"get","children":[],"call":[" class new all first "," class new all "," class new "," service "," class "]}," Fog AWS Compute Servers bootstrap":{"type":"method","name":"bootstrap","children":[],"call":[" bootstrap_many first "," bootstrap_many "]}," Fog AWS Compute Servers bootstrap_many":{"type":"method","name":"bootstrap_many","children":[],"call":["server setup ","server private_key "," ready? ","server wait_for ","servers each "," save_many "," _setup_bootstrap "," service servers new "," service servers "," service "," save_many  each "," service  save_many  new "," service  save_many  "]}," Fog AWS Compute Servers create_many":{"type":"method","name":"create_many","children":[],"call":[" save_many "," new "]}," Fog AWS Compute Servers all":{"type":"method","name":"all","children":[],"call":[" load ","(send\n  (send\n    (lvar :data) :[]\n    (str \"reservationSet\")) :map) flatten ","instance merge ","reservation [] ","reservation [] map ","data [] map ","data [] "," service describe_instances body "," service describe_instances "," service "," filters= ","Fog Logger  deprecation "," caller first "," caller ","filters class ","filters is_a? ","(send\n  (send\n    (lvar : service describe_instances body ) :[]\n    (str \"reservationSet\")) :map) flatten "," service describe_instances body  [] map "," service describe_instances body  [] "]}," Fog AWS Compute Servers initialize":{"type":"method","name":"initialize","children":[],"call":[" filters "]}," Fog AWS Compute Server placement=":{"type":"method","name":"placement=","children":[],"call":[" attributes []= "," attributes "," merge_attributes ","new_placement is_a? "]}," Fog AWS Compute Server monitor=":{"type":"method","name":"monitor=","children":[],"call":[" monitoring= "," raise ","ArgumentError  new "," service unmonitor_instances "," identity "," service "," service monitor_instances "," persisted? "]}," Fog AWS Compute Server volumes":{"type":"method","name":"volumes","children":[],"call":[" service volumes "," service "," requires "]}," Fog AWS Compute Server stop":{"type":"method","name":"stop","children":[],"call":[" service stop_instances "," id "," service "," requires "]}," Fog AWS Compute Server start":{"type":"method","name":"start","children":[],"call":[" service start_instances "," id "," service "," requires "]}," Fog AWS Compute Server setup":{"type":"method","name":"setup","children":[],"call":["Fog SSH  new run ","Fog SSH  new "," username "," ssh_ip_address "," sshable? "," wait_for ","commands << "," public_key ","Fog JSON  encode ","Fog JSON  sanitize "," attributes "," requires "]}," Fog AWS Compute Server save":{"type":"method","name":"save","children":[],"call":[" merge_attributes ","servers first attributes ","servers first "," service servers save_many "," service servers "," service "," service servers save_many  first attributes "," service servers save_many  first "," service  service servers save_many  save_many "," service  service servers save_many  "]}," Fog AWS Compute Server run_instance_options":{"type":"method","name":"run_instance_options","children":[],"call":["options delete ","options []= "," private_ip_address ","options [] ","options [] index ","options [] each ","options [] kind_of? "," associate_public_ip "," subnet_id ","value nil? ","options delete_if "," user_data "," security_group_ids "," groups "," ramdisk_id "," tenancy "," placement_group "," availability_zone "," monitoring "," key_name "," kernel_id "," flavor_id "," instance_initiated_shutdown_behavior "," ebs_optimized "," disable_api_termination "," client_token "," network_interfaces "," hibernation_options "," block_device_mapping "," requires "," raise ","Fog Errors Error  new "," persisted? "," tag_specifications "]}," Fog AWS Compute Server reboot":{"type":"method","name":"reboot","children":[],"call":[" service reboot_instances "," id "," service "," requires "]}," Fog AWS Compute Server ready?":{"type":"method","name":"ready?","children":[],"call":[" state == "," state "]}," Fog AWS Compute Server key_pair=":{"type":"method","name":"key_pair=","children":[],"call":[" key_name= ","new_keypair name "]}," Fog AWS Compute Server key_pair":{"type":"method","name":"key_pair","children":[],"call":[" service key_pairs all first "," service key_pairs all "," key_name "," service key_pairs "," service "," requires "]}," Fog AWS Compute Server flavor":{"type":"method","name":"flavor","children":[],"call":["flavor id == "," flavor_id ","flavor id "," service flavors all find "," service flavors all "," service flavors "," service "]}," Fog AWS Compute Server flavor=":{"type":"method","name":"flavor=","children":[],"call":[]}," Fog AWS Compute Server flavor_id":{"type":"method","name":"flavor_id","children":[],"call":[" attributes [] "," attributes ","@flavor id "]}," Fog AWS Compute Server destroy":{"type":"method","name":"destroy","children":[],"call":[" service terminate_instances "," id "," service "," requires "]}," Fog AWS Compute Server console_output":{"type":"method","name":"console_output","children":[],"call":[" service get_console_output "," id "," service "," requires "]}," Fog AWS Compute Server addresses":{"type":"method","name":"addresses","children":[],"call":[" service addresses "," service "," requires "]}," Fog AWS Compute Server initialize":{"type":"method","name":"initialize","children":[],"call":["@service instance_variable_get "," username "," image_id "," prepare_service_value "," flavor_id "," groups ","attributes [] "]}," Fog AWS Compute SecurityGroups get_by_id":{"type":"method","name":"get_by_id","children":[],"call":[" class new all first "," class new all "," class new "," service "," class "]}," Fog AWS Compute SecurityGroups get":{"type":"method","name":"get","children":[],"call":[" class new all first "," class new all "," class new "," service "," class "]}," Fog AWS Compute SecurityGroups all":{"type":"method","name":"all","children":[],"call":[" load ","data [] "," service describe_security_groups body "," service describe_security_groups "," filters "," service "," filters= ","Fog Logger  deprecation "," caller first "," caller ","filters_arg class ","filters_arg is_a? "," service describe_security_groups body  [] "]}," Fog AWS Compute SecurityGroups initialize":{"type":"method","name":"initialize","children":[],"call":[" filters "]}," Fog AWS Compute SecurityGroup fetch_ip_permission":{"type":"method","name":"fetch_ip_permission","children":[],"call":["ip_permission []= "," group_info ","options [] ","options [] nil? ","range end ","range begin "]}," Fog AWS Compute SecurityGroup group_info":{"type":"method","name":"group_info","children":[],"call":["info []= ","group start_with? "," owner_id "," requires ","Fog Logger  deprecation ","group_arg split ","group_arg match ","group_arg values first ","group_arg values ","group_arg keys first ","group_arg keys ","Hash  === ","group_arg values first  start_with? ","group_arg values first _arg split ","group_arg values first _arg match ","group_arg values first _arg values first ","group_arg values first _arg values ","group_arg values first _arg keys first ","group_arg values first _arg keys "]}," Fog AWS Compute SecurityGroup save":{"type":"method","name":"save","children":[],"call":[" service create_tags "," group_id "," service "," reload ","Fog  wait_for "," tags "," merge_attributes ","key == ","data reject "," service create_security_group body "," service create_security_group "," vpc_id "," description "," name "," requires "," service create_ tags  ","  tags  "," service create_security_group body  reject "]}," Fog AWS Compute SecurityGroup reload":{"type":"method","name":"reload","children":[],"call":[" merge_attributes ","data attributes "," collection get_by_id "," group_id "," collection "," requires "," service delete_security_group "," name "," service "," group_id nil? "]}," Fog AWS Compute SecurityGroup revoke_port_range_egress":{"type":"method","name":"revoke_port_range_egress","children":[],"call":[" service revoke_security_group_egress "," name "," service "]}," Fog AWS Compute SecurityGroup revoke_port_range_ingress":{"type":"method","name":"revoke_port_range_ingress","children":[],"call":[" service revoke_security_group_ingress "," name "," service "]}," Fog AWS Compute SecurityGroup revoke_port_range":{"type":"method","name":"revoke_port_range","children":[],"call":[" revoke_port_range_egress "," group_id ","options [] == ","options [] "," revoke_port_range_ingress ","options [] nil? "," fetch_ip_permission "," requires_one "," fetch_ fetch_ip_permission  "]}," Fog AWS Compute SecurityGroup revoke_group_and_owner":{"type":"method","name":"revoke_group_and_owner","children":[],"call":[" service revoke_security_group_ingress "," group_id "," name "," service "," requires_one ","Fog Logger  deprecation "]}," Fog AWS Compute SecurityGroup destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_security_group "," group_id "," service "," name "," group_id nil? "," requires_one "]}," Fog AWS Compute SecurityGroup authorize_port_range_egress":{"type":"method","name":"authorize_port_range_egress","children":[],"call":[" service authorize_security_group_egress "," name "," service "]}," Fog AWS Compute SecurityGroup authorize_port_range_ingress":{"type":"method","name":"authorize_port_range_ingress","children":[],"call":[" service authorize_security_group_ingress "," name "," service "]}," Fog AWS Compute SecurityGroup authorize_port_range":{"type":"method","name":"authorize_port_range","children":[],"call":[" authorize_port_range_egress "," group_id ","options [] == ","options [] "," authorize_port_range_ingress ","options [] nil? "," fetch_ip_permission "," requires_one "," fetch_ fetch_ip_permission  "]}," Fog AWS Compute SecurityGroup authorize_group_and_owner":{"type":"method","name":"authorize_group_and_owner","children":[],"call":[" service authorize_security_group_ingress "," group_id "," name "," service "," requires_one ","Fog Logger  deprecation "]}," Fog AWS Compute RouteTables get":{"type":"method","name":"get","children":[],"call":[" class new all first "," class new all "," class new "," service "," class "]}," Fog AWS Compute RouteTables all":{"type":"method","name":"all","children":[],"call":[" load ","data [] "," service describe_route_tables body "," service describe_route_tables "," service ","Fog Logger  warning "," caller first "," caller ","filters_arg class ","filters_arg is_a? "," service describe_route_tables body  [] "]}," Fog AWS Compute RouteTables initialize":{"type":"method","name":"initialize","children":[],"call":[" filters "]}," Fog AWS Compute RouteTable routeSet=":{"type":"method","name":"routeSet=","children":[],"call":[" merge_attributes "]}," Fog AWS Compute RouteTable associationSet=":{"type":"method","name":"associationSet=","children":[],"call":[" merge_attributes ","new_association_set first "]}," Fog AWS Compute RouteTable save":{"type":"method","name":"save","children":[],"call":[" merge_attributes ","key == ","data reject "," service create_route_table body [] first "," service create_route_table body [] "," service create_route_table body "," service create_route_table "," vpc_id "," service "," requires "," service create_route_table body [] first  reject "]}," Fog AWS Compute RouteTable destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_route_table "," id "," service "," requires "]}," Fog AWS Compute RouteTable initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Fog AWS Compute NetworkInterfaces get":{"type":"method","name":"get","children":[],"call":[" class new all first "," class new all "," class new "," service "," class "]}," Fog AWS Compute NetworkInterfaces all":{"type":"method","name":"all","children":[],"call":[" load ","data [] "," service describe_network_interfaces body "," service describe_network_interfaces "," service "," service describe_network_interfaces body  [] "]}," Fog AWS Compute NetworkInterfaces initialize":{"type":"method","name":"initialize","children":[],"call":[" filters "]}," Fog AWS Compute NetworkInterface save":{"type":"method","name":"save","children":[],"call":[" merge_attributes ","key == ","data reject "," service create_network_interface body [] "," service create_network_interface body "," service create_network_interface "," subnet_id "," service ","value nil? ","options delete_if "," group_set "," description "," private_ip_address "," requires "," service create_network_interface body []  reject "]}," Fog AWS Compute NetworkInterface destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_network_interface "," network_interface_id "," service "," requires "]}," Fog AWS Compute NetworkAcls get":{"type":"method","name":"get","children":[],"call":[" class new all first "," class new all "," class new "," service "," class "]}," Fog AWS Compute NetworkAcls all":{"type":"method","name":"all","children":[],"call":[" load ","data [] "," service describe_network_acls body "," service describe_network_acls "," service "," service describe_network_acls body  [] "]}," Fog AWS Compute NetworkAcls initialize":{"type":"method","name":"initialize","children":[],"call":[" filters "]}," Fog AWS Compute NetworkAcl save":{"type":"method","name":"save","children":[],"call":[" service create_tags "," identity "," service "," reload ","Fog  wait_for "," tags "," merge_attributes ","key == ","data reject "," service create_network_acl body [] "," service create_network_acl body "," service create_network_acl "," vpc_id "," requires "," service create_ tags  ","  tags  "," service create_network_acl body []  reject "]}," Fog AWS Compute NetworkAcl destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_network_acl "," network_acl_id "," service "," requires "]}," Fog AWS Compute NetworkAcl associate_with":{"type":"method","name":"associate_with","children":[],"call":[" service replace_network_acl_association "," network_acl_id "," service ","(send\n  (send\n    (send\n      (send\n        (send\n          (send nil :service) :network_acls) :all\n        (hash\n          (pair\n            (str \"association.subnet-id\")\n            (send\n              (lvar :subnet) :subnet_id)))) :first) :associations) :find) [] ","a [] == ","subnet subnet_id ","a [] "," service network_acls all first associations find "," service network_acls all first associations "," service network_acls all first "," service network_acls all "," service network_acls "," requires "]}," Fog AWS Compute NetworkAcl update_rule":{"type":"method","name":"update_rule","children":[],"call":[" service replace_network_acl_entry "," network_acl_id "," service "," requires "]}," Fog AWS Compute NetworkAcl update_outbound_rule":{"type":"method","name":"update_outbound_rule","children":[],"call":[" update_rule "]}," Fog AWS Compute NetworkAcl update_inbound_rule":{"type":"method","name":"update_inbound_rule","children":[],"call":[" update_rule "]}," Fog AWS Compute NetworkAcl remove_rule":{"type":"method","name":"remove_rule","children":[],"call":[" service delete_network_acl_entry "," network_acl_id "," service "," requires "]}," Fog AWS Compute NetworkAcl remove_outbound_rule":{"type":"method","name":"remove_outbound_rule","children":[],"call":[" remove_rule "]}," Fog AWS Compute NetworkAcl remove_inbound_rule":{"type":"method","name":"remove_inbound_rule","children":[],"call":[" remove_rule "]}," Fog AWS Compute NetworkAcl add_rule":{"type":"method","name":"add_rule","children":[],"call":[" service create_network_acl_entry "," network_acl_id "," service "," requires "]}," Fog AWS Compute NetworkAcl add_outbound_rule":{"type":"method","name":"add_outbound_rule","children":[],"call":[" add_rule "]}," Fog AWS Compute NetworkAcl add_inbound_rule":{"type":"method","name":"add_inbound_rule","children":[],"call":[" add_rule "]}," Fog AWS Compute KeyPairs get":{"type":"method","name":"get","children":[],"call":[" class new all first "," class new all "," class new "," service "," class "]}," Fog AWS Compute KeyPairs all":{"type":"method","name":"all","children":[],"call":[" load ","data [] "," service describe_key_pairs body "," service describe_key_pairs "," service ","Fog Logger  deprecation "," caller first "," caller ","filters_arg class ","filters_arg is_a? "," service describe_key_pairs body  [] "]}," Fog AWS Compute KeyPairs initialize":{"type":"method","name":"initialize","children":[],"call":[" filters "]}," Fog AWS Compute KeyPair writable?":{"type":"method","name":"writable?","children":[],"call":["(and\n  (send nil :private_key)\n  (send\n    (const nil :ENV) :key?\n    (str \"HOME\"))) ! ! ","(and\n  (send nil :private_key)\n  (send\n    (const nil :ENV) :key?\n    (str \"HOME\"))) ! ","ENV  key? "," private_key "]}," Fog AWS Compute KeyPair write":{"type":"method","name":"write","children":[],"call":["f chmod ","f puts ","split_private_key each ","File  open "," private_key split "," private_key "," writable? "," private_key split  each "]}," Fog AWS Compute KeyPair save":{"type":"method","name":"save","children":[],"call":[" merge_attributes ","(str \"keyFingerprint\") include? ! ","(str \"keyFingerprint\") include? ","data reject "," service create_key_pair body "," service create_key_pair "," name "," service "," service import_key_pair body "," service import_key_pair "," public_key "," requires "," service create_key_pair body  reject "," service import_key_pair body  reject "]}," Fog AWS Compute KeyPair destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_key_pair "," name "," service "," requires "]}," Fog AWS Compute InternetGateways get":{"type":"method","name":"get","children":[],"call":[" class new all first "," class new all "," class new "," service "," class "]}," Fog AWS Compute InternetGateways all":{"type":"method","name":"all","children":[],"call":[" load ","data [] "," service describe_internet_gateways body "," service describe_internet_gateways "," service ","Fog Logger  warning "," caller first "," caller ","filters_arg class ","filters_arg is_a? "," service describe_internet_gateways body  [] "]}," Fog AWS Compute InternetGateways initialize":{"type":"method","name":"initialize","children":[],"call":[" filters "]}," Fog AWS Compute InternetGateway save":{"type":"method","name":"save","children":[],"call":[" merge_attributes ","key == ","data reject "," service create_internet_gateway body [] first "," service create_internet_gateway body [] "," service create_internet_gateway body "," service create_internet_gateway "," service "," service create_internet_gateway body [] first  reject "]}," Fog AWS Compute InternetGateway destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_internet_gateway "," id "," service "," requires "]}," Fog AWS Compute InternetGateway detach":{"type":"method","name":"detach","children":[],"call":[" reload "," service detach_internet_gateway "," id "," service "," requires "]}," Fog AWS Compute InternetGateway attach":{"type":"method","name":"attach","children":[],"call":[" reload "," service attach_internet_gateway "," id "," service "," requires "]}," Fog AWS Compute InternetGateway initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Fog AWS Compute Images get":{"type":"method","name":"get","children":[],"call":[" class new all first "," class new all "," class new "," service "," class "]}," Fog AWS Compute Images all":{"type":"method","name":"all","children":[],"call":[" load ","data [] "," service describe_images body "," service describe_images "," service "," service describe_images body  [] "]}," Fog AWS Compute Images initialize":{"type":"method","name":"initialize","children":[],"call":[" filters "]}," Fog AWS Compute Image ready?":{"type":"method","name":"ready?","children":[],"call":[" state == "," state "]}," Fog AWS Compute Image deregister":{"type":"method","name":"deregister","children":[],"call":[" service snapshots new destroy "," service snapshots new ","block_device [] "," service snapshots "," service ","block_device [] == "," root_device_name "," block_device_mapping find "," block_device_mapping "," root_device_type == "," root_device_type "," service deregister_image "," id "]}," Fog AWS Compute Flavors get":{"type":"method","name":"get","children":[],"call":["flavor id == ","flavor id "," class new all find "," class new all "," class new "," service "," class "]}," Fog AWS Compute Flavors all":{"type":"method","name":"all","children":[],"call":[" load "]}," Fog AWS Compute DhcpOptions get":{"type":"method","name":"get","children":[],"call":[" class new all first "," class new all "," class new "," service "," class "]}," Fog AWS Compute DhcpOptions all":{"type":"method","name":"all","children":[],"call":[" load ","data [] "," service describe_dhcp_options body "," service describe_dhcp_options "," service ","Fog Logger  warning "," caller first "," caller ","filters_arg class ","filters_arg is_a? "," service describe_dhcp_options body  [] "]}," Fog AWS Compute DhcpOptions initialize":{"type":"method","name":"initialize","children":[],"call":[" filters "]}," Fog AWS Compute DhcpOption save":{"type":"method","name":"save","children":[],"call":[" merge_attributes ","key == ","data reject "," service create_dhcp_options body [] first "," service create_dhcp_options body [] "," service create_dhcp_options body "," service create_dhcp_options "," dhcp_configuration_set "," service "," requires "," service create_dhcp_options body [] first  reject "]}," Fog AWS Compute DhcpOption destroy":{"type":"method","name":"destroy","children":[],"call":[" service delete_dhcp_options "," id "," service "," requires "]}," Fog AWS Compute DhcpOption associate":{"type":"method","name":"associate","children":[],"call":[" reload "," service associate_dhcp_options "," id "," service "," requires "]}," Fog AWS Compute DhcpOption initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Fog AWS Compute Addresses new":{"type":"method","name":"new","children":[],"call":["(pair\n  (sym :server)\n  (send nil :server)) merge! "," server "]}," Fog AWS Compute Addresses get":{"type":"method","name":"get","children":[],"call":[" class new all first "," class new all "," class new "," service "," class "]}," Fog AWS Compute Addresses all":{"type":"method","name":"all","children":[],"call":[" replace ","address server_id == "," server id "," server ","address server_id "," select "," load ","value empty? ","value nil? ","address reject ","data [] map ","data [] "," service describe_addresses body "," service describe_addresses "," filters "," service "," filters= ","Fog Logger  deprecation "," caller first "," caller ","filters_arg class ","filters_arg is_a? "," service describe_addresses body  [] map "," service describe_addresses body  [] "]}," Fog AWS Compute Addresses initialize":{"type":"method","name":"initialize","children":[],"call":[" filters "]}," Fog AWS Compute Address disassociate":{"type":"method","name":"disassociate","children":[],"call":[" service disassociate_address "," public_ip "," service "," association_id "," persisted? "," server_id= "]}," Fog AWS Compute Address associate":{"type":"method","name":"associate","children":[],"call":[" service associate_address "," allocation_id "," network_interface_id "," public_ip "," server_id "," service "," server_id= ","new_server id "," persisted? "]}," Fog AWS Compute Address save":{"type":"method","name":"save","children":[],"call":[" server= "," merge_attributes ","key == ","data reject "," service allocate_address body "," service allocate_address "," domain "," service "," raise ","Fog Errors Error  new "," persisted? "," service allocate_address body  reject "]}," Fog AWS Compute Address server":{"type":"method","name":"server","children":[],"call":[" service servers get "," server_id "," service servers "," service "]}," Fog AWS Compute Address server=":{"type":"method","name":"server=","children":[],"call":[" disassociate "," associate "]}," Fog AWS Compute Address change_scope":{"type":"method","name":"change_scope","children":[],"call":[" domain == "," domain "," wait_for "," service restore_address_to_classic "," identity "," service "," service move_address_to_vpc "]}," Fog AWS Compute Address destroy":{"type":"method","name":"destroy","children":[],"call":[" service release_address "," public_ip "," allocation_id "," service "," requires "]}," Fog AWS Compute Address initialize":{"type":"method","name":"initialize","children":[],"call":[" server= ","attributes delete "]}," Fog AWS CDN StreamingDistributions list_distributions":{"type":"method","name":"list_distributions","children":[],"call":[" service get_streaming_distribution_list "," service "]}," Fog AWS CDN StreamingDistributions get_distribution":{"type":"method","name":"get_distribution","children":[],"call":[" service get_streaming_distribution "," service "]}," Fog AWS CDN StreamingDistribution distribution_config_to_attributes":{"type":"method","name":"distribution_config_to_attributes","children":[],"call":["new_attributes merge ","new_attributes delete "]}," Fog AWS CDN StreamingDistribution attributes_to_options":{"type":"method","name":"attributes_to_options","children":[],"call":["v empty? ","v respond_to? ","options reject! ","v nil? "," logging "," enabled "," comment "," cname "," s3_origin "," caller_reference "]}," Fog AWS CDN StreamingDistribution post_distribution":{"type":"method","name":"post_distribution","children":[],"call":[" service post_streaming_distribution "," service "]}," Fog AWS CDN StreamingDistribution put_distribution_config":{"type":"method","name":"put_distribution_config","children":[],"call":[" service put_streaming_distribution_config "," service "]}," Fog AWS CDN StreamingDistribution delete_distribution":{"type":"method","name":"delete_distribution","children":[],"call":[" service delete_streaming_distribution "," service "]}," Fog AWS CDN StreamingDistribution save":{"type":"method","name":"save","children":[],"call":[" merge_attributes ","response body ","response headers [] ","response headers "," post_distribution "," put_distribution_config "," etag "," identity "," attributes_to_options "," requires_one "," post_distribution  body "," put_distribution_config  body "," post_distribution  headers [] "," put_distribution_config  headers [] "," post_distribution  headers "," put_distribution_config  headers "," response headers []  "," attributes_to_ attributes_to_options  "]}," Fog AWS CDN StreamingDistribution initialize":{"type":"method","name":"initialize","children":[],"call":[" distribution_config_to_attributes "]}," Fog AWS CDN Invalidations new":{"type":"method","name":"new","children":[],"call":["(pair\n  (sym :distribution)\n  (send nil :distribution)) merge! "," distribution "," requires "]}," Fog AWS CDN Invalidations get":{"type":"method","name":"get","children":[],"call":[" new "," service get_invalidation body "," service get_invalidation "," distribution identity "," distribution "," service "," requires "," service get_ new  body "," service get_ new  "]}," Fog AWS CDN Invalidations all":{"type":"method","name":"all","children":[],"call":[" load ","data [] "," merge_attributes ","(str \"IsTruncated\") include? ! ","(str \"IsTruncated\") include? ","data reject "," service get_invalidation_list body "," service get_invalidation_list "," distribution identity "," distribution "," service ","value nil? ","options delete_if "," max_items ","options [] "," requires "," service get_invalidation_list body  [] "," service get_invalidation_list body  reject "]}," Fog AWS CDN Invalidation invalidation_to_attributes":{"type":"method","name":"invalidation_to_attributes","children":[],"call":["new_attributes []= ","invalidation_batch [] ","new_attributes delete "]}," Fog AWS CDN Invalidation distribution=":{"type":"method","name":"distribution=","children":[],"call":[]}," Fog AWS CDN Invalidation destroy":{"type":"method","name":"destroy","children":[],"call":[]}," Fog AWS CDN Invalidation save":{"type":"method","name":"save","children":[],"call":[" merge_attributes "," invalidation_to_attributes ","response body "," service post_invalidation "," caller_reference "," paths "," distribution identity "," distribution "," service "," raise "," persisted? "," requires "," service post_invalidation  body "]}," Fog AWS CDN Invalidation ready?":{"type":"method","name":"ready?","children":[],"call":[" status == "," status "," requires "]}," Fog AWS CDN Invalidation distribution":{"type":"method","name":"distribution","children":[],"call":[]}," Fog AWS CDN Invalidation initialize":{"type":"method","name":"initialize","children":[],"call":[" invalidation_to_attributes ","Time  now utc to_i to_s ","Time  now utc to_i ","Time  now utc ","Time  now ","new_attributes [] "]}," Fog AWS CDN DistributionsHelper each_distribution":{"type":"method","name":"each_distribution","children":[],"call":["subset each_distribution_this_page ","subset all ","subset marker ","subset is_truncated "," dup all "," dup "," block_given? ! "," block_given? ","subset all  each_distribution_this_page "," dup all  each_distribution_this_page ","subset all  all "," dup all  all ","subset all  marker "," dup all  marker ","subset all  is_truncated "," dup all  is_truncated "]}," Fog AWS CDN DistributionsHelper get":{"type":"method","name":"get","children":[],"call":[" new ","response body merge ","response headers [] ","response headers ","response body "," get_distribution "," get_distribution  body merge "," get_distribution  headers [] "," get_distribution  headers "," get_distribution  body "]}," Fog AWS CDN DistributionsHelper all":{"type":"method","name":"all","children":[],"call":[" load ","(or\n  (send\n    (lvar :data) :[]\n    (str \"StreamingDistributionSummary\"))\n  (hash)) map ","data [] ","summary map "," merge_attributes "," list_distributions body "," list_distributions ","(or\n  (send\n    (lvar : list_distributions body ) :[]\n    (str \"StreamingDistributionSummary\"))\n  (hash)) map "," list_distributions body  [] ","data []  map "]}," Fog AWS CDN Distributions list_distributions":{"type":"method","name":"list_distributions","children":[],"call":[" service get_distribution_list "," service "]}," Fog AWS CDN Distributions get_distribution":{"type":"method","name":"get_distribution","children":[],"call":[" service get_distribution "," service "]}," Fog AWS CDN DistributionHelper disable":{"type":"method","name":"disable","children":[],"call":[" merge_attributes ","response body ","response headers [] ","response headers "," put_distribution_config "," attributes_to_options "," etag "," identity "," enabled= "," enabled? "," reload "," caller_reference nil? "," caller_reference "," etag nil? "," requires "," put_distribution_config  body "," put_distribution_config  headers [] "," put_distribution_config  headers "," response headers []  "," response headers []  nil? "]}," Fog AWS CDN DistributionHelper enable":{"type":"method","name":"enable","children":[],"call":[" merge_attributes ","response body ","response headers [] ","response headers "," put_distribution_config "," attributes_to_options "," etag "," identity "," enabled= "," enabled? "," reload "," caller_reference nil? "," caller_reference "," etag nil? "," requires "," put_distribution_config  body "," put_distribution_config  headers [] "," put_distribution_config  headers "," response headers []  "," response headers []  nil? "]}," Fog AWS CDN DistributionHelper ready?":{"type":"method","name":"ready?","children":[],"call":[" status == "," status "," requires "]}," Fog AWS CDN DistributionHelper custom_origin?":{"type":"method","name":"custom_origin?","children":[],"call":[" custom_origin nil? ! "," custom_origin nil? "," custom_origin "," requires "]}," Fog AWS CDN DistributionHelper disabled?":{"type":"method","name":"disabled?","children":[],"call":[" ready? "," enabled? ! "," enabled? "," requires "]}," Fog AWS CDN DistributionHelper enabled?":{"type":"method","name":"enabled?","children":[],"call":[" ready? "," enabled ! ! "," enabled ! "," enabled "," requires "]}," Fog AWS CDN DistributionHelper destroy":{"type":"method","name":"destroy","children":[],"call":[" delete_distribution "," etag "," identity "," raise "," disabled? "," requires "]}," Fog AWS CDN Distribution distribution_config_to_attributes":{"type":"method","name":"distribution_config_to_attributes","children":[],"call":["new_attributes merge ","new_attributes delete "]}," Fog AWS CDN Distribution attributes_to_options":{"type":"method","name":"attributes_to_options","children":[],"call":["v empty? ","v respond_to? ","options reject! ","v nil? "," default_root_object "," trusted_signers "," logging "," enabled "," comment "," cname "," custom_origin "," s3_origin "," caller_reference "]}," Fog AWS CDN Distribution post_distribution":{"type":"method","name":"post_distribution","children":[],"call":[" service post_distribution "," service "]}," Fog AWS CDN Distribution put_distribution_config":{"type":"method","name":"put_distribution_config","children":[],"call":[" service put_distribution_config "," service "]}," Fog AWS CDN Distribution delete_distribution":{"type":"method","name":"delete_distribution","children":[],"call":[" service delete_distribution "," service "]}," Fog AWS CDN Distribution save":{"type":"method","name":"save","children":[],"call":[" merge_attributes ","response body ","response headers [] ","response headers "," post_distribution "," put_distribution_config "," etag "," identity "," attributes_to_options "," requires_one "," post_distribution  body "," put_distribution_config  body "," post_distribution  headers [] "," put_distribution_config  headers [] "," post_distribution  headers "," put_distribution_config  headers "," response headers []  "," attributes_to_ attributes_to_options  "]}," Fog AWS CDN Distribution invalidations":{"type":"method","name":"invalidations","children":[],"call":["Fog AWS CDN Invalidations  new "," service "]}," Fog AWS CDN Distribution initialize":{"type":"method","name":"initialize","children":[],"call":[" distribution_config_to_attributes "]}," Fog AWS Glacier TreeHash prepare_body_for_slice":{"type":"method","name":"prepare_body_for_slice","children":[],"call":["body force_encoding ","body respond_to? ","body encoding "]}," Fog AWS Glacier TreeHash reduce_digest_stack":{"type":"method","name":"reduce_digest_stack","children":[],"call":["Digest SHA256  digest ","stack [] + ","stack [] ","stack each_with_index ","Digest SHA256  Digest SHA256  digest  ","Digest SHA256  stack []  "]}," Fog AWS Glacier TreeHash update_digest_stack":{"type":"method","name":"update_digest_stack","children":[],"call":["stack << ","stack []= ","Digest SHA256  digest ","s + ","stack each_with_index ","Digest SHA256  Digest SHA256  digest  "]}," Fog AWS ELBV2 Mock reset_data":{"type":"method","name":"reset_data","children":[],"call":[" class data [] delete "," class data [] "," class data "," class "]}," Fog AWS ELBV2 Mock data":{"type":"method","name":"data","children":[],"call":[" class data [] [] "," class data [] "," class data "," class "]}," Fog AWS ELBV2 Mock setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":["Fog AWS SignatureV4  new ","options [] "]}," Fog AWS ELBV2 Mock initialize":{"type":"method","name":"initialize","children":[],"call":["Fog AWS  validate_region! "," setup_credentials ","options [] "]}," Fog AWS ELBV2 Mock reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog AWS ELBV2 Mock dns_name":{"type":"method","name":"dns_name","children":[],"call":[]}," Fog AWS ELBV2 Real initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Fog DNS AWS new":{"type":"method","name":"new","children":[],"call":[]}," Fog AWS DNS change_resource_record_sets_data":{"type":"method","name":"change_resource_record_sets_data","children":[],"call":[]}," Fog AWS DNS elb_dualstack_hosted_zone_mapping":{"type":"method","name":"elb_dualstack_hosted_zone_mapping","children":[],"call":[]}," Fog AWS DNS elb_hosted_zone_mapping":{"type":"method","name":"elb_hosted_zone_mapping","children":[],"call":[]}," Fog AWS DNS hosted_zone_for_alias_target":{"type":"method","name":"hosted_zone_for_alias_target","children":[],"call":[]}," Fog AWS DNS Real signature":{"type":"method","name":"signature","children":[],"call":["Base64  encode64 chomp! ","Base64  encode64 ","@hmac sign ","params [] [] ","params [] "]}," Fog AWS DNS Real _request":{"type":"method","name":"_request","children":[],"call":[" raise ","Fog AWS DNS Error  slurp ","match [] ","Fog AWS DNS NotFound  slurp ","match empty? ","Fog AWS Errors  match_error ","@connection request ","Fog AWS Errors  match_error  [] ","Fog AWS Errors  match_error  empty? ","Fog AWS Errors  Fog AWS Errors  match_error _error "]}," Fog AWS DNS Real request":{"type":"method","name":"request","children":[],"call":[" _request ","@instrumentor instrument ","params []= ","params [] ","params [] []= "," signature ","Fog Time  now to_date_header ","Fog Time  now "," refresh_credentials_if_expired "]}," Fog AWS DNS Real setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":["Fog HMAC  new ","options [] "]}," Fog AWS DNS Real reload":{"type":"method","name":"reload","children":[],"call":["@connection reset "]}," Fog AWS DNS Real initialize":{"type":"method","name":"initialize","children":[],"call":["Fog XML Connection  new ","options [] ","options fetch "," setup_credentials "]}," Fog AWS DNS Mock setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":["options [] "]}," Fog AWS DNS Mock signature":{"type":"method","name":"signature","children":[],"call":[]}," Fog AWS DNS Mock reset_data":{"type":"method","name":"reset_data","children":[],"call":[" class data [] delete "," class data [] "," class data "," class "]}," Fog AWS DNS Mock data":{"type":"method","name":"data","children":[],"call":[" class data [] [] "," class data [] "," class data "," class "]}," Fog AWS DNS Mock initialize":{"type":"method","name":"initialize","children":[],"call":["options [] "," setup_credentials "]}," Fog AWS DNS Mock reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog AWS CredentialFetcher ServiceMethods fetch_credentials_token_header":{"type":"method","name":"fetch_credentials_token_header","children":[],"call":["connection put body ","connection put "]}," Fog Compute AWS new":{"type":"method","name":"new","children":[],"call":[]}," Fog AWS Compute Real _request":{"type":"method","name":"_request","children":[],"call":[" raise ","Fog AWS Compute Error  slurp ","match [] ","Fog AWS Compute RequestLimitExceeded  slurp "," sleep ","Fog Logger  warning ","(send\n  (begin\n    (send\n      (send\n        (float 2.0) :**\n        (begin\n          (send\n            (float 1.0) :+\n            (lvar :retries)))) :*\n      (int 100))) :/\n  (float 1000.0)) + ","(send\n  (send\n    (float 2.0) :**\n    (begin\n      (send\n        (float 1.0) :+\n        (lvar :retries)))) :*\n  (int 100)) / ","2.0 ** * ","2.0 ** ","1.0 + "," rand * * "," rand * "," rand ","retries < ","Fog AWS Compute NotFound  slurp ","match empty? ","Fog AWS Errors  match_error ","@connection request ","Fog AWS Errors  match_error  [] ","Fog AWS Errors  match_error  empty? ","Fog AWS Errors  Fog AWS Errors  match_error _error "]}," Fog AWS Compute Real request":{"type":"method","name":"request","children":[],"call":[" _request ","@instrumentor instrument ","Fog AWS  signed_params_v4 ","params delete "," refresh_credentials_if_expired "]}," Fog AWS Compute Real setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":["Fog AWS SignatureV4  new ","options [] "]}," Fog AWS Compute Real reload":{"type":"method","name":"reload","children":[],"call":["@connection reset "]}," Fog AWS Compute Real initialize":{"type":"method","name":"initialize","children":[],"call":["Fog XML Connection  new ","Fog AWS  validate_region! ","options [] ","endpoint scheme ","endpoint port ","endpoint path "," raise ","InvalidURIError  new ","endpoint host ","URI  parse "," setup_credentials ","options fetch ","URI  parse  scheme ","URI  parse  port ","URI  parse  path ","URI  parse  host "]}," Fog AWS Compute Mock setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":["options [] "]}," Fog AWS Compute Mock apply_tag_filters":{"type":"method","name":"apply_tag_filters","children":[],"call":["(lvar :tag_value) flatten include? ","tag_set_fetcher [] [] ","tag_set_fetcher [] ","(lvar :tag_value) flatten ","resources select ","tag_filters []= ","filters delete ","key gsub ","filters keys each ","filters keys ","tag_set_fetcher [] values include? ","tag_set_fetcher [] values ","filters key? ","tag_set_fetcher [] key? "," data [] [] ","resource [] "," data [] "," data "," lambda ","(lvar :tag_filters delete ) flatten include? ","(lvar :tag_filters delete ) flatten ","tag_set_fetcher [] filters delete s include? ","tag_set_fetcher [] filters delete s "]}," Fog AWS Compute Mock tagged_resources":{"type":"method","name":"tagged_resources","children":[],"call":[" raise ","Fog Service NotFound  new "," data [] [] "," data [] "," data ","r [] == ","r [] "," data [] detect ","(send\n  (send\n    (send\n      (self) :data) :[]\n    (sym :vpcs)) :select) empty? ","v [] == ","v [] "," data [] select "," visible_images has_key? "," visible_images ","MOCKED_TAG_TYPES  [] ","MOCKED_TAG_TYPES  has_key? ","match captures first ","match captures ","resource_id match "," Array map "," Array ","resource_id match  captures first ","resource_id match  captures ","resource_match captures first  match ","resource_id resource_id match  "]}," Fog AWS Compute Mock setup_default_vpc!":{"type":"method","name":"setup_default_vpc!","children":[],"call":[" data [] << ","Fog AWS Mock  subnet_id "," data [] "," data ","(send\n  (send\n    (send\n      (send nil :describe_availability_zones) :body) :[]\n    (str \"availabilityZoneInfo\")) :map) each_with_index ","z [] "," describe_availability_zones body [] map "," describe_availability_zones body [] "," describe_availability_zones body "," describe_availability_zones ","Fog AWS Mock  route_table_id "," data [] []= ","Fog AWS Mock  internet_gateway_id ","Fog AWS Mock  dhcp_options_id "," default_vpc= ","Fog AWS Mock  default_vpc_for "," region "," disable_ec2_classic "," default_vpc present? "," default_vpc ","Fog AWS Mock  Fog AWS Mock  internet_gateway_id  "]}," Fog AWS Compute Mock default_vpc=":{"type":"method","name":"default_vpc=","children":[],"call":["(send\n  (send\n    (send\n      (self) :data) :[]\n    (sym :account_attributes)) :find) []= ","h [] == ","h [] "," data [] find "," data [] "," data "]}," Fog AWS Compute Mock default_vpc":{"type":"method","name":"default_vpc","children":[],"call":["vpc_id == ","(send\n  (send\n    (send\n      (send nil :describe_account_attributes) :body) :[]\n    (str \"accountAttributeSet\")) :find) [] first ","(send\n  (send\n    (send\n      (send nil :describe_account_attributes) :body) :[]\n    (str \"accountAttributeSet\")) :find) [] ","h [] == ","h [] "," describe_account_attributes body [] find "," describe_account_attributes body [] "," describe_account_attributes body "," describe_account_attributes ","(send\n  (send\n    (send\n      (send nil :describe_account_attributes) :body) :[]\n    (str \"accountAttributeSet\")) :find) [] first  == "]}," Fog AWS Compute Mock set_supported_platforms":{"type":"method","name":"set_supported_platforms","children":[],"call":["(send\n  (send\n    (send\n      (self) :data) :[]\n    (sym :account_attributes)) :find) []= ","h [] == ","h [] "," data [] find "," data [] "," data "]}," Fog AWS Compute Mock disable_ec2_classic":{"type":"method","name":"disable_ec2_classic","children":[],"call":[" set_supported_platforms "]}," Fog AWS Compute Mock enable_ec2_classic":{"type":"method","name":"enable_ec2_classic","children":[],"call":[" set_supported_platforms "]}," Fog AWS Compute Mock supported_platforms":{"type":"method","name":"supported_platforms","children":[],"call":["(send\n  (send\n    (send\n      (send nil :describe_account_attributes) :body) :[]\n    (str \"accountAttributeSet\")) :find) [] ","h [] == ","h [] "," describe_account_attributes body [] find "," describe_account_attributes body [] "," describe_account_attributes body "," describe_account_attributes "]}," Fog AWS Compute Mock visible_images":{"type":"method","name":"visible_images","children":[],"call":["images update ","data [] [] ","data [] ","list [] include? "," data [] "," data ","list [] ","data [] each "," region_data each "," region_data ","h update ","image [] "," data [] values reduce "," data [] values "]}," Fog AWS Compute Mock reset_data":{"type":"method","name":"reset_data","children":[],"call":[" region_data delete "," region_data "]}," Fog AWS Compute Mock data":{"type":"method","name":"data","children":[],"call":[" region_data [] "," region_data "]}," Fog AWS Compute Mock region_data":{"type":"method","name":"region_data","children":[],"call":[" class data [] "," class data "," class "]}," Fog AWS Compute Mock initialize":{"type":"method","name":"initialize","children":[],"call":["Fog AWS  validate_region! ","options [] ","endpoint scheme ","endpoint port ","endpoint path "," raise ","InvalidURIError  new ","endpoint host ","URI  parse "," setup_credentials ","Time  now + ","Time  now ","URI  parse  scheme ","URI  parse  port ","URI  parse  path ","URI  parse  host "]}," Fog AWS Compute Mock reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog AWS Compute Real supported_platforms":{"type":"method","name":"supported_platforms","children":[],"call":["(send\n  (send\n    (send\n      (send nil :describe_account_attributes) :body) :[]\n    (str \"accountAttributeSet\")) :find) [] ","h [] == ","h [] "," describe_account_attributes body [] find "," describe_account_attributes body [] "," describe_account_attributes body "," describe_account_attributes "]}," Fog AWS Compute Real modify_image_attributes":{"type":"method","name":"modify_image_attributes","children":[],"call":[" modify_image_attribute ","Fog Logger  deprecation "," caller first "," caller "]}," Fog CDN AWS new":{"type":"method","name":"new","children":[],"call":[]}," Fog AWS CDN Real signature":{"type":"method","name":"signature","children":[],"call":["Base64  encode64 chomp! ","Base64  encode64 ","@hmac sign ","params [] [] ","params [] "]}," Fog AWS CDN Real _request":{"type":"method","name":"_request","children":[],"call":["@connection request "]}," Fog AWS CDN Real request":{"type":"method","name":"request","children":[],"call":[" _request ","@instrumentor instrument ","params []= ","params [] ","params [] []= "," signature ","Fog Time  now to_date_header ","Fog Time  now "," refresh_credentials_if_expired "]}," Fog AWS CDN Real setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":["Fog HMAC  new ","options [] "]}," Fog AWS CDN Real reload":{"type":"method","name":"reload","children":[],"call":["@connection reset "]}," Fog AWS CDN Real initialize":{"type":"method","name":"initialize","children":[],"call":["Fog XML Connection  new ","options [] ","options fetch "," setup_credentials "]}," Fog AWS CDN Mock raise_error":{"type":"method","name":"raise_error","children":[],"call":[]}," Fog AWS CDN Mock error":{"type":"method","name":"error","children":[],"call":[]}," Fog AWS CDN Mock random_id":{"type":"method","name":"random_id","children":[],"call":[]}," Fog AWS CDN Mock domain_name":{"type":"method","name":"domain_name","children":[],"call":[]}," Fog AWS CDN Mock generic_id":{"type":"method","name":"generic_id","children":[],"call":[]}," Fog AWS CDN Mock distribution_id":{"type":"method","name":"distribution_id","children":[],"call":[]}," Fog AWS CDN Mock setup_credentials":{"type":"method","name":"setup_credentials","children":[],"call":["options [] "]}," Fog AWS CDN Mock signature":{"type":"method","name":"signature","children":[],"call":[]}," Fog AWS CDN Mock reset_data":{"type":"method","name":"reset_data","children":[],"call":[" class data delete "," class data "," class "]}," Fog AWS CDN Mock data":{"type":"method","name":"data","children":[],"call":[" class data [] "," class data "," class "]}," Fog AWS CDN Mock initialize":{"type":"method","name":"initialize","children":[],"call":[" setup_credentials ","options [] "]}," Fog AWS CDN Mock reset":{"type":"method","name":"reset","children":[],"call":[]}," Fog AWS Storage Utils init_max_copy_chunk_size!":{"type":"method","name":"init_max_copy_chunk_size!","children":[],"call":[" validate_chunk_size ","options fetch "]}," Fog AWS Storage Utils init_max_put_chunk_size!":{"type":"method","name":"init_max_put_chunk_size!","children":[],"call":[" validate_chunk_size ","options fetch "]}," Fog AWS Storage Utils validate_chunk_size":{"type":"method","name":"validate_chunk_size","children":[],"call":[" raise ","value >= ","value <= "]}," Fog AWS CredentialFetcher ConnectionMethods credentials_refresh_threshold":{"type":"method","name":"credentials_refresh_threshold","children":[],"call":[]}," Fog AWS Storage File part_checksum_headers":{"type":"method","name":"part_checksum_headers","children":[],"call":["Base64  encode64 strip ","Base64  encode64 ","OpenSSL Digest MD5  digest "," service disable_content_md5_validation "," service "]}," Fog AWS Storage Real sync_clock_url":{"type":"method","name":"sync_clock_url","children":[],"call":[" region_to_host "," region_to_ region_to_host  "]}}