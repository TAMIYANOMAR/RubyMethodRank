{" JWT decode":{"type":"method","name":"decode","children":[],"call":["OpenSSL  errors clear ","OpenSSL  errors "," raise ","JWT DecodeError  new "," verify_rsa ","(str \"RS256\") include? "," secure_compare "," sign_hmac ","(str \"HS256\") include? ","keyfinder call ","header [] "," base64url_decode ","crypto_segment to_s ","MultiJson  decode ","(lvar :header_segment) join ","(int 2) include? ","segments length ","jwt split "," verify_signature "," signature_algorithm_and_key "," decoded_segments ","JWT ExpiredSignature  new ","payload [] > ","Time  now to_i - ","options [] ","Time  now to_i ","Time  now ","payload [] ","payload include? ","default_options merge ","payload [] to_i > ","payload [] to_i ","JWT ImmatureSignature  new ","payload [] to_i < ","Time  now to_i + ","JWT InvalidJtiError  new ","options [] to_s == ","Digest MD5  hexdigest ","options [] to_s ","JWT InvalidSubError  new ","payload [] to_s == ","payload [] to_s ","JWT InvalidAudError  new ","payload [] include? ","payload [] is_a? ","JWT InvalidIatError  new ","payload [] to_i <= ","JWT InvalidIssuerError  new ","JWT IncorrectAlgorithm  new ","algo != "," fail ","options include? ","merged_options [] ","decoder verify ","decoder decode_segments ","Decode  new ","options merge "," decode_verify_signature ","DEFAULT_OPTIONS  merge ","Verify  verify_claims ","Decode  new decode_segments "," configuration decode to_h merge "," configuration decode to_h "," configuration decode "," configuration ","keyfinder call finder call ","MultiJson  decode  [] ","(lvar :MultiJson  decode _segment) join ","jwt split  length "," verify_ base64url_decode  "," signature_algorithm_and_keyfinder call  "," signature_header [] rithm_and_key ","  base64url_decode _algorithm_and_key "," decoded_jwt split  ","MultiJson  decode  [] > ","default_options merge  [] ","MultiJson  decode  include? ","default_default_options merge  merge ","MultiJson  decode  [] to_i > ","MultiJson  decode  [] to_i ","MultiJson  decode  [] to_i < ","default_options merge  [] to_s == ","default_options merge  [] to_s ","MultiJson  decode  [] to_s == ","MultiJson  decode  [] to_s ","MultiJson  decode  [] include? ","MultiJson  decode  [] is_a? ","MultiJson  decode  [] to_i <= ","header []  != ","default_options merge  include? ","merged_default_options merge  [] ","options merge  [] ","DEFAULT_OPTIONS  merge  [] ","Decode  new  verify ","decoder decode_jwt split  ","Decode  new  decode_segments ","default_options merge  merge "," decode_verify_ base64url_decode  ","Decode  new decode_jwt split  "]}," JWT encode":{"type":"method","name":"encode","children":[],"call":["segments join ","segments << "," base64url_encode "," sign ","algorithm == ","MultiJson  encode ","(pair\n  (str \"typ\")\n  (str \"JWT\")) merge "," encoded_signature "," encoded_payload "," encoded_header ","encoder segments ","Encode  new ","Encode  new segments "," encoded_ sign  "," encoded_(pair\n  (str \"typ\")\n  (str \"JWT\")) merge  ","Encode  new  segments "]}," JWT base64url_encode":{"type":"method","name":"base64url_encode","children":[],"call":["Base64  encode64 tr gsub ","Base64  encode64 tr ","Base64  encode64 "]}," JWT base64url_decode":{"type":"method","name":"base64url_decode","children":[],"call":["Base64  decode64 ","str tr ","= * ","4 - ","str length modulo ","str length ","Decode  base64url_decode "]}," JWT sign":{"type":"method","name":"sign","children":[],"call":[" raise ","NotImplementedError  new "," sign_rsa ","(str \"RS256\") include? "," sign_hmac ","(str \"HS256\") include? "," sign_ecdsa ","(str \"ES256\") include? "," fail "]}," JWT secure_compare":{"type":"method","name":"secure_compare","children":[],"call":["res == ","byte ^ ","l shift ","b each_byte ","a unpack ","a bytesize ","a bytesize != ","b bytesize ","b empty? ","a empty? ","b nil? ","a nil? ","res zero? ","a unpack  shift ","b nia unpack ? ","a nia unpack ? "]}," JWT sign_hmac":{"type":"method","name":"sign_hmac","children":[],"call":["OpenSSL HMAC  digest ","OpenSSL Digest  new ","algorithm sub "]}," JWT verify_rsa":{"type":"method","name":"verify_rsa","children":[],"call":["public_key verify ","OpenSSL Digest  new ","algorithm sub "]}," JWT sign_rsa":{"type":"method","name":"sign_rsa","children":[],"call":["private_key sign ","OpenSSL Digest  new ","algorithm sub "]}," JWT verify_signature":{"type":"method","name":"verify_signature","children":[],"call":["OpenSSL  errors clear ","OpenSSL  errors "," raise ","JWT DecodeError  new "," verify_rsa ","(str \"RS256\") include? "," secure_compare "," sign_hmac ","(str \"HS256\") include? ","JWT VerificationError  new "," verify_ecdsa ","(str \"ES256\") include? "," fail "," verify_signature_algo "]}," JWT signature_algorithm_and_key":{"type":"method","name":"signature_algorithm_and_key","children":[],"call":["header [] ","keyfinder call "," raise ","keyfinder arity == ","keyfinder arity ","keyfinder call finder call ","keyfinder call finder arity == ","keyfinder call finder arity "]}," JWT decoded_segments":{"type":"method","name":"decoded_segments","children":[],"call":["(lvar :header_segment) join "," base64url_decode ","crypto_segment to_s "," decode_header_and_payload "," raw_segments ","decoder decode_segments ","Decode  new ","options merge "," raise ","DEFAULT_OPTIONS  merge ","Decode  new  decode_segments "]}," JWT decode_header_and_payload":{"type":"method","name":"decode_header_and_payload","children":[],"call":[" decode_json "," base64url_decode "]}," JWT raw_segments":{"type":"method","name":"raw_segments","children":[],"call":[" raise ","JWT DecodeError  new ","required_num_segments include? ","segments length ","jwt split "," fail ","required_num_jwt split  include? ","jwt split  length "]}," JWT encoded_signature":{"type":"method","name":"encoded_signature","children":[],"call":[" base64url_encode "," sign ","algorithm == "]}," JWT encoded_payload":{"type":"method","name":"encoded_payload","children":[],"call":[" base64url_encode "," encode_json "," raise ","payload [] is_a? ","payload [] "]}," JWT encoded_header":{"type":"method","name":"encoded_header","children":[],"call":[" base64url_encode "," encode_json ","(pair\n  (str \"typ\")\n  (str \"JWT\")) merge "]}," JWT Json encode_json":{"type":"method","name":"encode_json","children":[],"call":["MultiJson  encode ","JSON  generate "]}," JWT Json decode_json":{"type":"method","name":"decode_json","children":[],"call":[" raise ","JWT DecodeError  new ","MultiJson  decode ","JSON  parse "]}," JWT verify_ecdsa":{"type":"method","name":"verify_ecdsa","children":[],"call":["public_key dsa_verify_asn1 ","digest digest ","OpenSSL Digest  new ","algorithm sub "," raise ","IncorrectAlgorithm  new ","algorithm != ","NAMED_CURVES  [] ","public_key group curve_name ","public_key group "," raw_to_asn1 "," fail ","OpenSSL Digest  new  OpenSSL Digest  new  "]}," JWT sign_ecdsa":{"type":"method","name":"sign_ecdsa","children":[],"call":["private_key dsa_sign_asn1 ","digest digest ","OpenSSL Digest  new ","algorithm sub "," raise ","IncorrectAlgorithm  new ","algorithm != ","NAMED_CURVES  [] ","private_key group curve_name ","private_key group "," asn1_to_raw "," fail ","OpenSSL Digest  new  OpenSSL Digest  new  "]}," JWT asn1_to_raw":{"type":"method","name":"asn1_to_raw","children":[],"call":["(send\n  (send\n    (send\n      (const\n        (const nil :OpenSSL) :ASN1) :decode\n      (lvar :signature)) :value) :map) join ","value value to_s rjust ","value value to_s ","value value ","OpenSSL ASN1  decode value map ","OpenSSL ASN1  decode value ","OpenSSL ASN1  decode ","(send\n  (send\n    (send\n      (lvar :public_key) :group) :degree) :+\n  (int 7)) / ","public_key group degree + ","public_key group degree ","public_key group "]}," JWT raw_to_asn1":{"type":"method","name":"raw_to_asn1","children":[],"call":["OpenSSL ASN1 Sequence  new to_der ","OpenSSL ASN1 Sequence  new ","OpenSSL ASN1 Integer  new ","OpenSSL BN  new ","(lvar :r) map ","signature [] ","byte_size - ","(send\n  (send\n    (send\n      (lvar :private_key) :group) :degree) :+\n  (int 7)) / ","private_key group degree + ","private_key group degree ","private_key group ","OpenSSL ASN1 Sequence  new to_designature []  ","OpenSSL ASN1 Integesignature []   new ","(lvasignature []  :signature [] ) map ","signature [] ignature [] ","signatusignature [] e [] ","byte_signature [] ize - ","(send\n  (send\n    (send\n      (lvar :private_key) :group) :degree) :+\n  (int 7)) /  - ","(signature [] end\n  (signature [] end\n    (signature [] end\n      (lvar :private_key) :group) :degree) :+\n  (int 7)) / ","(send\n  (send\n    (send\n      (lvasignature []  :psignature [] ivate_key) :gsignature [] oup) :degsignature [] ee) :+\n  (int 7)) / ","psignature [] ivate_key gsignature [] oup degsignature [] ee + ","psignature [] ivate_key gsignature [] oup degsignature [] ee ","psignature [] ivate_key gsignature [] oup "]}," JWT gem_version":{"type":"method","name":"gem_version","children":[],"call":[]}," JWT Verify leeway":{"type":"method","name":"leeway","children":[],"call":[" extract_option "]}," JWT Verify extract_option":{"type":"method","name":"extract_option","children":[],"call":["@options values_at compact first ","@options values_at compact ","@options values_at ","key to_s ","key to_sym "]}," JWT Verify verify_sub":{"type":"method","name":"verify_sub","children":[],"call":[" fail ","@payload [] ","@payload [] to_s == ","options_sub to_s ","@payload [] to_s "," extract_option "," raise ","sub to_s == ","sub to_s ","@options [] "," extract_option  to_s ","@options []  to_s ","options_@payload []  to_s ","@payload []  to_s == ","@payload []  to_s "]}," JWT Verify verify_not_before":{"type":"method","name":"verify_not_before","children":[],"call":[" fail ","@payload [] to_i > ","Time  now to_i + "," leeway ","Time  now to_i ","Time  now ","@payload [] to_i ","@payload [] ","@payload include? "," raise "," nbf_leeway "]}," JWT Verify verify_jti":{"type":"method","name":"verify_jti","children":[],"call":[" fail ","@payload [] to_s strip empty? ","@payload [] to_s strip ","@payload [] to_s ","@payload [] ","options_verify_jti call ","options_verify_jti respond_to? "," extract_option "," raise ","jti to_s strip empty? ","jti to_s strip ","jti to_s ","@options [] ","options_verify_jti arity == ","options_verify_jti arity "," extract_option  call ","@options []  call ","options_verify_@payload []  call "," extract_option  respond_to? ","@options []  respond_to? ","options_verify_@payload []  respond_to? ","@payload []  to_s strip empty? ","@payload []  to_s strip ","@payload []  to_s "," extract_option  arity == ","@options []  arity == ","options_verify_@payload []  arity == "," extract_option  arity ","@options []  arity ","options_verify_@payload []  arity "]}," JWT Verify verify_iss":{"type":"method","name":"verify_iss","children":[],"call":[" fail ","@payload [] ","@payload [] to_s != ","options_iss to_s ","@payload [] to_s "," extract_option "," raise "," Array map include? ","iss to_s "," Array map "," Array ","@options [] ","item to_s ","item is_a? "," extract_option  to_s ","@options []  to_s ","options_@payload []  to_s ","@payload []  to_s "]}," JWT Verify verify_iat":{"type":"method","name":"verify_iat","children":[],"call":[" fail ","@payload [] to_f > ","Time  now to_f + "," leeway ","Time  now to_f ","Time  now ","@payload [] to_f ","@payload [] ","(send\n  (send\n    (ivar :@payload) :[]\n    (str \"iat\")) :is_a?\n  (const nil :Numeric)) ! ","@payload [] is_a? ","@payload include? "," raise ","@payload [] is_a? ! ","iat to_f > "," iat_leeway ","iat to_f ","iat is_a? ! ","iat is_a? ","(send\n  (send\n    (ivar :@payload) :[]\n    (str \"@payload [] \")) :is_a?\n  (const nil :Numeric)) ! ","@payload []  to_f > "," @payload [] _leeway ","@payload []  to_f ","@payload []  is_a? ! ","@payload []  is_a? "]}," JWT Verify verify_expiration":{"type":"method","name":"verify_expiration","children":[],"call":[" fail ","@payload [] to_i < ","Time  now to_i - "," leeway ","Time  now to_i ","Time  now ","@payload [] to_i ","@payload [] ","@payload include? "," raise ","@payload [] to_i <= "," exp_leeway "]}," JWT Verify verify_aud":{"type":"method","name":"verify_aud","children":[],"call":[" fail ","@payload [] ","@payload [] to_s == ","options_aud to_s ","@payload [] to_s ","@payload [] include? ","@payload [] is_a? "," extract_option "," raise ","options_aud each ","options_aud is_a? "," verify_aud_array ","(send\n  (array\n    (splat\n      (lvar :aud))) :&\n  (array\n    (splat\n      (lvar :options_aud)))) empty? ","(splat\n  (lvar :aud)) & ","@options [] ","(send\n  (array\n    (splat\n      (send\n        (ivar :@payload) :[]\n        (str \"aud\")))) :&\n  (array\n    (splat\n      (lvar :options_aud)))) empty? ","(splat\n  (send\n    (ivar :@payload) :[]\n    (str \"aud\"))) & "," extract_option  to_s ","@options []  to_s ","options_@payload []  to_s "," extract_option  each ","@options []  each ","options_@payload []  each "," extract_option  is_a? ","@options []  is_a? ","options_@payload []  is_a? "," verify_@payload [] _array ","(send\n  (array\n    (splat\n      (lvar :aud))) :&\n  (array\n    (splat\n      (lvar : extract_option )))) empty? ","(send\n  (array\n    (splat\n      (lvar :aud))) :&\n  (array\n    (splat\n      (lvar :@options [] )))) empty? ","(send\n  (array\n    (splat\n      (lvar :@payload [] ))) :&\n  (array\n    (splat\n      (lvar :options_@payload [] )))) empty? ","(splat\n  (lvar :@payload [] )) & ","(send\n  (array\n    (splat\n      (send\n        (ivar :@payload) :[]\n        (str \"aud\")))) :&\n  (array\n    (splat\n      (lvar : extract_option )))) empty? ","(send\n  (array\n    (splat\n      (send\n        (ivar :@payload) :[]\n        (str \"aud\")))) :&\n  (array\n    (splat\n      (lvar :@options [] )))) empty? ","(send\n  (array\n    (splat\n      (send\n        (ivar :@payload) :[]\n        (str \"@payload [] \")))) :&\n  (array\n    (splat\n      (lvar :options_@payload [] )))) empty? ","(splat\n  (send\n    (ivar :@payload) :[]\n    (str \"@payload [] \"))) & "]}," JWT Verify initialize":{"type":"method","name":"initialize","children":[],"call":["DEFAULTS  merge "]}," JWT Decode verify":{"type":"method","name":"verify","children":[],"call":["Verify  send "," payload ","key to_s match ","key to_s ","@options each ","key to_s =~ "]}," JWT Decode base64url_decode":{"type":"method","name":"base64url_decode","children":[],"call":[]}," JWT Decode decode_header_and_payload":{"type":"method","name":"decode_header_and_payload","children":[],"call":["JWT  decode_json ","Decode  base64url_decode "," raise ","JSON  parse "]}," JWT Decode raw_segments":{"type":"method","name":"raw_segments","children":[],"call":[" fail ","required_num_segments include? ","segments length ","jwt split "," raise ","@jwt split ","required_num_jwt split  include? ","required_num_@jwt split  include? ","jwt split  length ","@jwt split  length "]}," JWT Decode decode_segments":{"type":"method","name":"decode_segments","children":[],"call":["(lvar :header_segment) join ","Decode  base64url_decode ","crypto_segment to_s "," decode_header_and_payload "," raw_segments "," header "," payload "," raise "," verify_claims "," verify_signature "," decode_crypto "," validate_segment_count! "," set_key "," verify_algo "," decode_signature "]}," JWT Decode initialize":{"type":"method","name":"initialize","children":[],"call":["jwt split "," raise "]}," JWT verify_signature_algo":{"type":"method","name":"verify_signature_algo","children":[],"call":[" raise "," verify_ecdsa ","(str \"ES256\") include? "," verify_rsa ","(str \"RS256\") include? "," secure_compare "," sign_hmac ","(str \"HS256\") include? "]}," JWT decode_verify_signature":{"type":"method","name":"decode_verify_signature","children":[],"call":[" verify_signature "," raise ","algo != ","options [] "," signature_algorithm_and_key ","Signature  verify ","algo == "," allowed_algorithms include? "," allowed_algorithms "," allowed_algorithms empty? "]}," JWT Verify verify_aud_array":{"type":"method","name":"verify_aud_array","children":[],"call":[" raise ","audience include? ","options_aud to_s ","aud to_s ","options_aud each ","options_aud is_a? "]}," JWT Verify nbf_leeway":{"type":"method","name":"nbf_leeway","children":[],"call":[" global_leeway ","@options [] "]}," JWT Verify iat_leeway":{"type":"method","name":"iat_leeway","children":[],"call":[" global_leeway ","@options [] "]}," JWT Verify exp_leeway":{"type":"method","name":"exp_leeway","children":[],"call":[" global_leeway ","@options [] "]}," JWT Verify global_leeway":{"type":"method","name":"global_leeway","children":[],"call":["@options [] "]}," JWT Verify verify_claims":{"type":"method","name":"verify_claims","children":[],"call":["Verify  send ","key to_s =~ ","key to_s ","options each "]}," JWT Signature verify_hmac":{"type":"method","name":"verify_hmac","children":[],"call":["SecurityUtils  secure_compare "," sign_hmac ","authenticator verify ","signing_input encode ","signature encode ","SecurityUtils  rbnacl_fixup "," secure_compare "," rbnacl_fixup "]}," JWT Signature verify_ecdsa":{"type":"method","name":"verify_ecdsa","children":[],"call":["public_key dsa_verify_asn1 ","SecurityUtils  raw_to_asn1 ","digest digest ","OpenSSL Digest  new ","algorithm sub "," raise ","algorithm != ","NAMED_CURVES  [] ","public_key group curve_name ","public_key group "," raw_to_asn1 ","OpenSSL Digest  new  OpenSSL Digest  new  "]}," JWT Signature sign_hmac":{"type":"method","name":"sign_hmac","children":[],"call":["OpenSSL HMAC  digest ","OpenSSL Digest  new ","algorithm sub ","authenticator auth ","msg encode ","SecurityUtils  rbnacl_fixup "," rbnacl_fixup "]}," JWT Signature sign_ecdsa":{"type":"method","name":"sign_ecdsa","children":[],"call":["SecurityUtils  asn1_to_raw ","private_key dsa_sign_asn1 ","digest digest ","OpenSSL Digest  new ","algorithm sub "," raise ","algorithm != ","NAMED_CURVES  [] ","private_key group curve_name ","private_key group "," asn1_to_raw ","OpenSSL Digest  new  OpenSSL Digest  new  "]}," JWT Signature sign_rsa":{"type":"method","name":"sign_rsa","children":[],"call":["private_key sign ","OpenSSL Digest  new ","algorithm sub "," raise ","private_key class ","private_key class == "]}," JWT Signature verify":{"type":"method","name":"verify","children":[],"call":["OpenSSL  errors clear ","OpenSSL  errors "," raise "," verify_ecdsa ","ECDSA_ALGORITHMS  include? ","SecurityUtils  verify_rsa ","RSA_ALGORITHMS  include? "," verify_hmac ","HMAC_ALGORITHMS  include? "," verify_rsa ","algo verify ","ToVerify  new ","alg const_get include? ","alg const_get ","ALGOS  find ","Algos  find ","algorithm casecmp zero? ","algorithm casecmp "]}," JWT Signature sign":{"type":"method","name":"sign","children":[],"call":[" raise "," sign_ecdsa ","ECDSA_ALGORITHMS  include? "," sign_rsa ","RSA_ALGORITHMS  include? "," sign_hmac ","HMAC_ALGORITHMS  include? ","algo sign ","ToSign  new ","alg const_get include? ","alg const_get ","ALGOS  find ","Algos  find "]}," JWT SecurityUtils rbnacl_fixup":{"type":"method","name":"rbnacl_fixup","children":[],"call":["key bytes fill pack ","key bytes fill ","authenticator key_bytes ","key bytesize ","key bytes ","key bytesize > ","RbNaCl HMAC  const_get ","RbNaCl HMAC  constants include? ","RbNaCl HMAC  constants ","algorithm sub to_sym ","algorithm sub ","RbNaCl HMAC  const_get  key_bytes ","algorithm sub to_sym  sub to_sym ","algorithm sub to_sym  sub "]}," JWT SecurityUtils raw_to_asn1":{"type":"method","name":"raw_to_asn1","children":[],"call":["OpenSSL ASN1 Sequence  new to_der ","OpenSSL ASN1 Sequence  new ","OpenSSL ASN1 Integer  new ","OpenSSL BN  new ","(lvar :sig_bytes) map ","signature [] ","byte_size - ","(send\n  (send\n    (send\n      (lvar :private_key) :group) :degree) :+\n  (int 7)) / ","private_key group degree + ","private_key group degree ","private_key group ","(lvar :signature [] ) map ","(send\n  (send\n    (send\n      (lvar :private_key) :group) :degree) :+\n  (int 7)) /  - "]}," JWT SecurityUtils asn1_to_raw":{"type":"method","name":"asn1_to_raw","children":[],"call":["(send\n  (send\n    (send\n      (const\n        (const nil :OpenSSL) :ASN1) :decode\n      (lvar :signature)) :value) :map) join ","value value to_s rjust ","value value to_s ","value value ","OpenSSL ASN1  decode value map ","OpenSSL ASN1  decode value ","OpenSSL ASN1  decode ","(send\n  (send\n    (send\n      (lvar :public_key) :group) :degree) :+\n  (int 7)) / ","public_key group degree + ","public_key group degree ","public_key group "]}," JWT SecurityUtils verify_rsa":{"type":"method","name":"verify_rsa","children":[],"call":["public_key verify ","OpenSSL Digest  new ","algorithm sub "]}," JWT SecurityUtils secure_compare":{"type":"method","name":"secure_compare","children":[],"call":["result zero? ","byte ^ ","unpacked_left shift ","right each_byte ","left unpack ","left_bytesize == ","right bytesize ","left bytesize ","left unpack  shift ","left bytesize  == "]}," JWT Encode encode_segments":{"type":"method","name":"encode_segments","children":[],"call":["(lvar :header) join "," encoded_signature "," encoded_payload "," encoded_header ","segments join ","segments << ","(lvar : encoded_header ) join "," encoded_ encoded_signature  "," encoded_ encoded_payload  "," encoded_ encoded_header  "]}," JWT Encode encoded_signature":{"type":"method","name":"encoded_signature","children":[],"call":["Encode  base64url_encode ","JWT Signature  sign ","@algorithm == ","algorithm == "," encode_signature "," encode_JWT Signature  sign  "]}," JWT Encode encoded_payload":{"type":"method","name":"encoded_payload","children":[],"call":["Encode  base64url_encode ","JSON  generate "," raise ","@payload [] is_a? ! ","@payload [] is_a? ","@payload [] ","@payload key? ","@payload is_a? ! ","@payload is_a? ","payload [] is_a? ","payload [] "," encode_payload "]}," JWT Encode encoded_header":{"type":"method","name":"encoded_header","children":[],"call":["Encode  base64url_encode ","JSON  generate ","(pair\n  (str \"alg\")\n  (ivar :@algorithm)) merge ","(pair\n  (str \"alg\")\n  (lvar :algorithm)) merge "," encode_header "," encode_(pair\n  (str \"alg\")\n  (ivar :@algorithm)) merge  "," encode_(pair\n  (str \"alg\")\n  (lvar :algorithm)) merge  "]}," JWT Encode initialize":{"type":"method","name":"initialize","children":[],"call":[" encode_segments ","headers []= ","key to_s ","options [] each_with_object ","options [] ","Algos  find ","options [] transform_keys ","@headers []= ","@algorithm alg "," resolve_algorithm ","options [] transform_keys  []= ","options []  alg "," resolve_algorithm  alg "]}," JWT Encode base64url_encode":{"type":"method","name":"base64url_encode","children":[],"call":[]}," JWT Signature secure_compare":{"type":"method","name":"secure_compare","children":[],"call":["res zero? ","byte ^ ","l shift ","b each_byte ","a unpack ","a bytesize ","a bytesize != ","b bytesize ","b empty? ","a empty? ","b nil? ","a nil? ","a unpack  shift ","b nia unpack ? ","a nia unpack ? "]}," JWT Signature rbnacl_fixup":{"type":"method","name":"rbnacl_fixup","children":[],"call":["key bytes fill pack ","key bytes fill ","authenticator key_bytes ","key bytesize ","key bytes ","key bytesize > ","RbNaCl HMAC  const_get ","RbNaCl HMAC  constants include? ","RbNaCl HMAC  constants ","algorithm sub to_sym ","algorithm sub ","RbNaCl HMAC  const_get  key_bytes ","algorithm sub to_sym  sub to_sym ","algorithm sub to_sym  sub "]}," JWT Signature raw_to_asn1":{"type":"method","name":"raw_to_asn1","children":[],"call":["OpenSSL ASN1 Sequence  new to_der ","OpenSSL ASN1 Sequence  new ","OpenSSL ASN1 Integer  new ","OpenSSL BN  new ","(lvar :r) map ","signature [] ","byte_size - ","(send\n  (send\n    (send\n      (lvar :private_key) :group) :degree) :+\n  (int 7)) / ","private_key group degree + ","private_key group degree ","private_key group ","OpenSSL ASN1 Sequence  new to_designature []  ","OpenSSL ASN1 Integesignature []   new ","(lvasignature []  :signature [] ) map ","signatusignature [] e [] ","(send\n  (send\n    (send\n      (lvar :private_key) :group) :degree) :+\n  (int 7)) /  - ","(send\n  (send\n    (send\n      (lvasignature []  :psignature [] ivate_key) :gsignature [] oup) :degsignature [] ee) :+\n  (int 7)) / ","psignature [] ivate_key gsignature [] oup degsignature [] ee + ","psignature [] ivate_key gsignature [] oup degsignature [] ee ","psignature [] ivate_key gsignature [] oup "]}," JWT Signature asn1_to_raw":{"type":"method","name":"asn1_to_raw","children":[],"call":["(send\n  (send\n    (send\n      (const\n        (const nil :OpenSSL) :ASN1) :decode\n      (lvar :signature)) :value) :map) join ","value value to_s rjust ","value value to_s ","value value ","OpenSSL ASN1  decode value map ","OpenSSL ASN1  decode value ","OpenSSL ASN1  decode ","(send\n  (send\n    (send\n      (lvar :public_key) :group) :degree) :+\n  (int 7)) / ","public_key group degree + ","public_key group degree ","public_key group "]}," JWT Signature verify_rsa":{"type":"method","name":"verify_rsa","children":[],"call":["public_key verify ","OpenSSL Digest  new ","algorithm sub "]}," JWT allowed_algorithms":{"type":"method","name":"allowed_algorithms","children":[],"call":["options [] ","options key? "]}," JWT Algos Unsupported sign":{"type":"method","name":"sign","children":[],"call":[" raise "]}," JWT Algos Unsupported verify":{"type":"method","name":"verify","children":[],"call":[" raise "]}," JWT Algos Rsa verify":{"type":"method","name":"verify","children":[],"call":["SecurityUtils  verify_rsa ","to_verify signature ","to_verify signing_input ","to_verify public_key ","to_verify algorithm "," raise ","public_key verify ","OpenSSL Digest  new ","algorithm sub "]}," JWT Algos Rsa sign":{"type":"method","name":"sign","children":[],"call":["key sign ","OpenSSL Digest  new ","algorithm sub "," raise ","key class ","key class == ","to_sign values ","key instance_of? "]}," JWT Algos Hmac verify":{"type":"method","name":"verify","children":[],"call":["SecurityUtils  secure_compare "," sign ","JWT Signature ToSign  new ","authenticator verify ","signing_input encode ","signature encode ","SecurityUtils  rbnacl_fixup ","to_verify values "]}," JWT Algos Hmac sign":{"type":"method","name":"sign","children":[],"call":["OpenSSL HMAC  digest ","OpenSSL Digest  new ","algorithm sub ","authenticator auth ","msg encode ","SecurityUtils  rbnacl_fixup ","to_sign values "," raise ","e message == ","e message ","key == ","MAPPING  [] new ","MAPPING  [] ","key is_a? "]}," JWT Algos Eddsa verify":{"type":"method","name":"verify","children":[],"call":["public_key verify "," raise ","public_key class ","public_key class != ","public_key primitive ","algorithm downcase to_sym != ","algorithm downcase to_sym ","algorithm downcase ","to_verify values "," key primitive "," key ","SUPPORTED  map map include? ","SUPPORTED  map map ","SUPPORTED  map "]}," JWT Algos Eddsa sign":{"type":"method","name":"sign","children":[],"call":["key sign "," raise ","key primitive ","algorithm downcase to_sym != ","algorithm downcase to_sym ","algorithm downcase ","key class ","key class != ","to_sign values ","SUPPORTED  map map include? ","SUPPORTED  map map ","SUPPORTED  map "]}," JWT Algos Ecdsa verify":{"type":"method","name":"verify","children":[],"call":["public_key dsa_verify_asn1 ","SecurityUtils  raw_to_asn1 ","digest digest ","OpenSSL Digest  new ","algorithm sub "," raise ","algorithm != ","NAMED_CURVES  [] ","public_key group curve_name ","public_key group ","to_verify values ","curve_definition [] "," curve_by_name "," raw_to_asn1 ","OpenSSL Digest  new  OpenSSL Digest  new  "," curve_by_name  [] "]}," JWT Algos Ecdsa sign":{"type":"method","name":"sign","children":[],"call":["SecurityUtils  asn1_to_raw ","key dsa_sign_asn1 ","digest digest ","OpenSSL Digest  new ","algorithm sub "," raise ","algorithm != ","NAMED_CURVES  [] ","key group curve_name ","key group ","to_sign values ","curve_definition [] "," curve_by_name "," asn1_to_raw ","OpenSSL Digest  new  OpenSSL Digest  new  "," curve_by_name  [] "]}," JWT SecurityUtils verify_ps":{"type":"method","name":"verify_ps","children":[],"call":["public_key verify_pss ","algorithm sub "]}," JWT JWK create_from":{"type":"method","name":"create_from","children":[],"call":["(send\n  (const nil :MAPPINGS) :fetch\n  (send\n    (lvar :keypair) :class)) new "," raise ","klass name ","MAPPINGS  fetch ","keypair class ","(send\n  (send nil :mappings) :fetch\n  (send\n    (lvar :keypair) :class)) new "," mappings fetch "," mappings ","(send\n  (send nil :mappings) :fetch\n  (send\n    (lvar :key) :class)) new ","key class ","(send\n  (send nil :mappings) :fetch\n  (send\n    (lvar :jwk_kty) :to_s)) new ","jwk_kty to_s ","key [] ","key is_a? "]}," JWT JWK import":{"type":"method","name":"import","children":[],"call":["(send\n  (const nil :MAPPINGS) :fetch\n  (send\n    (send\n      (lvar :jwk_data) :[]\n      (sym :kty)) :to_s)) import "," raise ","MAPPINGS  fetch ","jwk_data [] to_s ","jwk_data [] ","(send\n  (send nil :mappings) :fetch\n  (send\n    (lvar :jwk_kty) :to_s)) import "," mappings fetch ","jwk_kty to_s "," mappings "]}," JWT JWK RSA import":{"type":"method","name":"import","children":[],"call":[" new "," rsa_pkey "," jwk_attributes [] "," jwk_attributes "," decode_open_ssl_bn "]}," JWT JWK RSA export":{"type":"method","name":"export","children":[],"call":[" kid "," Base64  urlsafe_encode64 "," public_key e to_s "," public_key e "," public_key "," public_key n to_s "," public_key n "," append_private_parts ","options [] == ","options [] "," private? "," encode_open_ssl_bn "," members merge "," members ","RSA_PRIVATE_KEY_ELEMENTS  include? ","exported reject! "," parameters clone "," parameters "," parameters clone  reject! "]}," JWT JWK RSA kid":{"type":"method","name":"kid","children":[],"call":["OpenSSL Digest SHA256  hexdigest ","sequence to_der ","OpenSSL ASN1  Sequence ","OpenSSL ASN1 Integer  new "," public_key e "," public_key "," public_key n ","OpenSSL ASN1  Sequence  to_der "]}," JWT JWK RSA initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","keypair is_a? "," generate_kid ","keypair public_key ","key_params merge "," check_jwk ","params transform_keys "," extract_key_params ","params is_a? "," check_jwk_params! ","key_params transform_keys  merge "," extract_key_params  merge ","params transform_keys  transform_keys "," extract_key_params transform_keys  "," extract_ extract_key_params  ","params transform_keys  is_a? "," check_jwk_params transform_keys ! "]}," JWT JWK KeyFinder reloadable?":{"type":"method","name":"reloadable?","children":[],"call":[]}," JWT JWK KeyFinder find_key":{"type":"method","name":"find_key","children":[],"call":["key [] == ","key [] "," Array find "," Array "," jwks [] "," jwks ","(or\n  (send\n    (lvar :key) :[]\n    (sym :kid))\n  (send\n    (lvar :key) :[]\n    (str \"kid\"))) == "," jwks_keys find "," jwks_keys "]}," JWT JWK KeyFinder load_keys":{"type":"method","name":"load_keys","children":[],"call":["@jwk_loader call "]}," JWT JWK KeyFinder jwks":{"type":"method","name":"jwks","children":[],"call":[" load_keys "]}," JWT JWK KeyFinder resolve_key":{"type":"method","name":"resolve_key","children":[],"call":[" find_key "," load_keys "," reloadable? ","key [] == ","key [] ","@jwks find ","JWT JWK Set  new ","@jwks_loader call ","key_matcher call ","kid nil? "," lambda ","@ find_key s find ","JWT JWK Set  new  find ","@ find_key s_loader call ","JWT JWK Set  new _loader call "]}," JWT JWK KeyFinder key_for":{"type":"method","name":"key_for","children":[],"call":[" JWT JWK  import keypair "," JWT JWK  import "," raise "," resolve_key "," jwks_keys empty? "," jwks_keys ","jwk keypair ","@jwks any? ","jwk verify_key ","kid is_a? ","kid nil? ","  resolve_key s_keys empty? ","  resolve_key s_keys "," resolve_key  keypair ","@ resolve_key s any? "," resolve_key  verify_key "]}," JWT JWK KeyFinder initialize":{"type":"method","name":"initialize","children":[],"call":["jwks_or_loader respond_to? ","jwks_or_loader is_a? ","options [] "," lambda ","options []  respond_to? ","options []  is_a? "]}," JWT JSON parse":{"type":"method","name":"parse","children":[],"call":[" JSON  parse "]}," JWT JSON generate":{"type":"method","name":"generate","children":[],"call":[" JSON  generate "]}," JWT Encode combine":{"type":"method","name":"combine","children":[],"call":["parts join "]}," JWT Encode encode":{"type":"method","name":"encode","children":[],"call":["JWT Base64  url_encode ","JWT JSON  generate ","Base64  urlsafe_encode64 "," JWT Base64  url_encode "]}," JWT Encode encode_signature":{"type":"method","name":"encode_signature","children":[],"call":["JWT Base64  url_encode ","JWT Signature  sign "," encoded_header_and_payload ","@algorithm == ","Base64  urlsafe_encode64 "," JWT Base64  url_encode "," signature "]}," JWT Encode encode_payload":{"type":"method","name":"encode_payload","children":[],"call":[" encode ","ClaimsValidator  new validate! ","ClaimsValidator  new ","@payload is_a? "," encode_data "]}," JWT Encode encode_header":{"type":"method","name":"encode_header","children":[],"call":[" encode ","@headers []= "," encode_data "]}," JWT Encode encoded_header_and_payload":{"type":"method","name":"encoded_header_and_payload","children":[],"call":[" combine "," encoded_payload "," encoded_header "]}," JWT Encode segments":{"type":"method","name":"segments","children":[],"call":[" combine "," encoded_signature "," encoded_header_and_payload "," validate_claims! "]}," JWT Decode parse_and_decode":{"type":"method","name":"parse_and_decode","children":[],"call":[" raise ","JWT JSON  parse ","JWT Base64  url_decode ","Base64  urlsafe_decode64 "," JWT Base64  url_decode "]}," JWT Decode signing_input":{"type":"method","name":"signing_input","children":[],"call":["@segments first join ","@segments first "]}," JWT Decode payload":{"type":"method","name":"payload","children":[],"call":[" parse_and_decode ","@segments [] "]}," JWT Decode header":{"type":"method","name":"header","children":[],"call":[" parse_and_decode ","@segments [] "]}," JWT Decode decode_crypto":{"type":"method","name":"decode_crypto","children":[],"call":["JWT Base64  url_decode ","@segments [] ","Base64  urlsafe_decode64 "," raise "," JWT Base64  url_decode "]}," JWT Decode segment_length":{"type":"method","name":"segment_length","children":[],"call":["@segments count "]}," JWT Decode validate_segment_count!":{"type":"method","name":"validate_segment_count!","children":[],"call":[" raise "," segment_length == "," segment_length ","@verify ! "," header [] == "," header [] "," header "," none_algorithm? "]}," JWT Decode verify_claims":{"type":"method","name":"verify_claims","children":[],"call":["Verify  verify_claims "," payload ","Verify  verify_required_claims "]}," JWT Decode find_key":{"type":"method","name":"find_key","children":[],"call":[" raise "," header "," payload ","keyfinder arity == ","keyfinder arity "," Array empty? ! "," Array empty? "," Array "]}," JWT Decode allowed_algorithms":{"type":"method","name":"allowed_algorithms","children":[],"call":["@options [] ","@options key? "," Array "," resolve_allowed_algorithms "]}," JWT Decode options_includes_algo_in_header?":{"type":"method","name":"options_includes_algo_in_header?","children":[],"call":[" allowed_algorithms include? "," header [] "," header "," allowed_algorithms ","alg casecmp zero? ","alg casecmp "," allowed_algorithms any? "," algorithm "]}," JWT Decode verify_signature":{"type":"method","name":"verify_signature","children":[],"call":["Signature  verify "," signing_input "," header [] "," header "," raise "," options_includes_algo_in_header? "," allowed_algorithms empty? "," allowed_algorithms "," JWT JWK KeyFinder  new key_for "," JWT JWK KeyFinder  new ","@options [] "," find_key "," verify_signature_for? "," Array any? "," Array "," none_algorithm? "]}," JWT ClaimsValidator validate_is_int":{"type":"method","name":"validate_is_int","children":[],"call":[" raise ","@payload [] class ","@payload [] ","@payload [] is_a? "]}," JWT ClaimsValidator validate_int_claims":{"type":"method","name":"validate_int_claims","children":[],"call":[" validate_is_int ","@payload key? ","INTEGER_CLAIMS  each "]}," JWT ClaimsValidator validate!":{"type":"method","name":"validate!","children":[],"call":[" validate_int_claims "," validate_numeric_claims "]}," JWT ClaimsValidator initialize":{"type":"method","name":"initialize","children":[],"call":["h []= ","k to_sym ","payload each_with_object ","payload transform_keys "]}," JWT Base64 url_decode":{"type":"method","name":"url_decode","children":[],"call":[" Base64  decode64 ","str tr ","= * ","4 - ","str length modulo ","str length "]}," JWT Base64 url_encode":{"type":"method","name":"url_encode","children":[],"call":[" Base64  encode64 tr gsub "," Base64  encode64 tr "," Base64  encode64 "]}," JWT Algos Ps require_openssl!":{"type":"method","name":"require_openssl!","children":[],"call":[" raise ","minor to_i >= ","minor to_i ","major to_i >= ","major to_i ","OpenSSL VERSION  split first ","OpenSSL VERSION  split ","Object  const_defined? "," Gem Version  new < "," Gem Version  new "]}," JWT Algos Ps verify":{"type":"method","name":"verify","children":[],"call":["SecurityUtils  verify_ps ","to_verify signature ","to_verify signing_input ","to_verify public_key ","to_verify algorithm "," require_openssl! "," raise ","public_key verify_pss ","algorithm sub "]}," JWT Algos Ps sign":{"type":"method","name":"sign","children":[],"call":["key sign_pss ","algorithm sub "," raise ","key_class == ","key class ","to_sign values "," require_openssl! "," key_class ","key is_a? ","key class  == "," key class  "]}," JWT JWK RSA public_key":{"type":"method","name":"public_key","children":[],"call":[" keypair public_key "," keypair "," rsa_key public_key "," rsa_key "]}," JWT JWK RSA private?":{"type":"method","name":"private?","children":[],"call":[" keypair private? "," keypair "," rsa_key private? "," rsa_key "]}," JWT JWK generate_mappings":{"type":"method","name":"generate_mappings","children":[],"call":["hash []= "," Array each "," Array ","klass const_defined? "," classes each_with_object "," classes "]}," JWT JWK mappings":{"type":"method","name":"mappings","children":[],"call":[" generate_mappings "]}," JWT JWK classes":{"type":"method","name":"classes","children":[],"call":[]}," JWT JWK RSA decode_open_ssl_bn":{"type":"method","name":"decode_open_ssl_bn","children":[],"call":["OpenSSL BN  new "," JWT Base64  url_decode ","Base64  urlsafe_decode64 "," class decode_open_ssl_bn "," class "]}," JWT JWK RSA populate_key":{"type":"method","name":"populate_key","children":[],"call":["rsa_key iqmp= ","rsa_parameters [] ","rsa_key dmq1= ","rsa_key dmp1= ","rsa_key q= ","rsa_key p= ","rsa_key d= ","rsa_key e= ","rsa_key n= ","rsa_key set_crt_params ","rsa_key set_factors ","rsa_key set_key "]}," JWT JWK RSA rsa_pkey":{"type":"method","name":"rsa_pkey","children":[],"call":[" populate_key ","OpenSSL PKey RSA  new "," raise ","rsa_parameters [] "," create_rsa_key "]}," JWT JWK RSA jwk_attributes":{"type":"method","name":"jwk_attributes","children":[],"call":["hash []= "," block_given? ","jwk_data [] ","attribute to_s ","attributes each_with_object "," decode_open_ssl_bn "," [] "]}," JWT JWK RSA encode_open_ssl_bn":{"type":"method","name":"encode_open_ssl_bn","children":[],"call":[" JWT Base64  url_encode ","key_part to_s ","Base64  urlsafe_encode64 "]}," JWT JWK RSA append_private_parts":{"type":"method","name":"append_private_parts","children":[],"call":["the_hash merge "," encode_open_ssl_bn "," keypair iqmp "," keypair "," keypair dmq1 "," keypair dmp1 "," keypair q "," keypair p "," keypair d "]}," JWT JWK RSA generate_kid":{"type":"method","name":"generate_kid","children":[],"call":["OpenSSL Digest SHA256  hexdigest ","sequence to_der ","OpenSSL ASN1  Sequence ","OpenSSL ASN1 Integer  new ","public_key e ","public_key n ","OpenSSL ASN1  Sequence  to_der "]}," JWT JWK KeyFinder jwks_keys":{"type":"method","name":"jwks_keys","children":[],"call":[" Array "," jwks [] "," jwks "]}," JWT JWK KeyBase inherited":{"type":"method","name":"inherited","children":[],"call":[]}," JWT JWK KeyBase initialize":{"type":"method","name":"initialize","children":[],"call":[" JWT  configuration jwk kid_generator "," JWT  configuration jwk "," JWT  configuration ","options [] ","options is_a? ","kid_generator new generate ","kid_generator new "," [] ","@parameters delete ","params transform_keys ","params transform_keys  delete "]}," JWT JWK HMAC import":{"type":"method","name":"import","children":[],"call":[" new "," raise ","jwk_data [] "]}," JWT JWK HMAC generate_kid":{"type":"method","name":"generate_kid","children":[],"call":["OpenSSL Digest SHA256  hexdigest ","sequence to_der ","OpenSSL ASN1  Sequence ","OpenSSL ASN1 UTF8String  new "," keypair ","OpenSSL ASN1  Sequence  to_der "]}," JWT JWK HMAC export":{"type":"method","name":"export","children":[],"call":["exported_hash merge "," keypair ","options [] == ","options [] "," private? "," kid "," signing_key ","HMAC_PRIVATE_KEY_ELEMENTS  include? ","exported reject! "," parameters clone "," parameters "," parameters clone _hash merge "," parameters clone  reject! "]}," JWT JWK HMAC public_key":{"type":"method","name":"public_key","children":[],"call":[]}," JWT JWK HMAC private?":{"type":"method","name":"private?","children":[],"call":[]}," JWT JWK HMAC initialize":{"type":"method","name":"initialize","children":[],"call":[" generate_kid "," raise ","keypair is_a? ","signing_key is_a? ","key_params merge "," check_jwk ","params transform_keys "," extract_key_params ","params is_a? ","key_params transform_keys  merge "," extract_key_params  merge ","params transform_keys  transform_keys "," extract_key_params transform_keys  "," extract_ extract_key_params  ","params transform_keys  is_a? "]}," JWT JWK EC decode_open_ssl_bn":{"type":"method","name":"decode_open_ssl_bn","children":[],"call":["OpenSSL BN  new "," JWT Base64  url_decode ","Base64  urlsafe_decode64 "]}," JWT JWK EC decode_octets":{"type":"method","name":"decode_octets","children":[],"call":[" JWT Base64  url_decode ","Base64  urlsafe_decode64 "]}," JWT JWK EC ec_pkey":{"type":"method","name":"ec_pkey","children":[],"call":["key private_key= ","OpenSSL BN  new "," decode_octets ","key public_key= ","OpenSSL PKey EC Point  new ","(int 4) pack ","OpenSSL PKey EC Group  new ","OpenSSL PKey EC  new "," to_openssl_curve ","sequence to_der ","OpenSSL ASN1  Sequence ","OpenSSL ASN1  BitString ","point to_octet_string ","OpenSSL ASN1  ObjectId ","OpenSSL ASN1  OctetString ","OpenSSL BN  new to_s ","OpenSSL ASN1  Integer ","OpenSSL PKey EC  new  private_OpenSSL PKey EC  new = ","OpenSSL PKey EC  new  public_OpenSSL PKey EC  new = "," to_openssl_ to_openssl_curve  ","OpenSSL ASN1  Sequence  to_der ","OpenSSL PKey EC Point  new  to_octet_string "]}," JWT JWK EC jwk_attrs":{"type":"method","name":"jwk_attrs","children":[],"call":["jwk_data [] ","attr to_s ","attrs map "]}," JWT JWK EC to_openssl_curve":{"type":"method","name":"to_openssl_curve","children":[],"call":[" raise "]}," JWT JWK EC import":{"type":"method","name":"import","children":[],"call":[" new "," ec_pkey "," raise "," jwk_attrs "]}," JWT JWK EC encode_open_ssl_bn":{"type":"method","name":"encode_open_ssl_bn","children":[],"call":[" JWT Base64  url_encode ","key_part to_s ","Base64  urlsafe_encode64 "]}," JWT JWK EC encode_octets":{"type":"method","name":"encode_octets","children":[],"call":[" JWT Base64  url_encode ","Base64  urlsafe_encode64 "]}," JWT JWK EC keypair_components":{"type":"method","name":"keypair_components","children":[],"call":[" raise ","ec_keypair group curve_name ","ec_keypair group ","encoded_point unpack ","ec_keypair public_key to_bn to_s ","ec_keypair public_key to_bn ","ec_keypair public_key ","ec_keypair public_key to_bn to_s  unpack "]}," JWT JWK EC generate_kid":{"type":"method","name":"generate_kid","children":[],"call":["OpenSSL Digest SHA256  hexdigest ","sequence to_der ","OpenSSL ASN1  Sequence ","OpenSSL ASN1 Integer  new ","OpenSSL BN  new "," keypair_components ","OpenSSL ASN1  Sequence  to_der "]}," JWT JWK EC append_private_parts":{"type":"method","name":"append_private_parts","children":[],"call":["the_hash merge "," encode_octets "," keypair private_key to_bn to_s "," keypair private_key to_bn "," keypair private_key "," keypair "," encode_ keypair private_key to_bn to_s  "]}," JWT JWK EC export":{"type":"method","name":"export","children":[],"call":[" append_private_parts ","options [] == ","options [] "," private? "," kid "," encode_octets "," keypair_components "," keypair "," members merge "," members ","EC_PRIVATE_KEY_ELEMENTS  include? ","exported reject! "," parameters clone "," parameters "," parameters clone  reject! "]}," JWT JWK EC private?":{"type":"method","name":"private?","children":[],"call":["@keypair private_key? "," keypair private_key? "," keypair "," ec_key private_key? "," ec_key "]}," JWT JWK EC initialize":{"type":"method","name":"initialize","children":[],"call":[" generate_kid "," raise ","keypair is_a? ","key_params merge "," check_jwk ","params transform_keys "," extract_key_params ","params is_a? "," check_jwk_params! ","key_params transform_keys  merge "," extract_key_params  merge ","params transform_keys  transform_keys "," extract_key_params transform_keys  "," extract_ extract_key_params  ","params transform_keys  is_a? "," check_jwk_params transform_keys ! "]}," JWT ClaimsValidator validate_is_numeric":{"type":"method","name":"validate_is_numeric","children":[],"call":[" raise ","@payload [] class ","@payload [] ","@payload [] is_a? "]}," JWT ClaimsValidator validate_numeric_claims":{"type":"method","name":"validate_numeric_claims","children":[],"call":[" validate_is_numeric ","@payload key? ","NUMERIC_CLAIMS  each "]}," JWT Algos indexed":{"type":"method","name":"indexed","children":[],"call":["hash []= ","code downcase ","alg const_get each ","alg const_get ","ALGOS  each_with_object ","Hash  new ","alg downcase ","cls const_get each ","cls const_get "]}," JWT Algos find":{"type":"method","name":"find","children":[],"call":[" indexed [] ","algorithm downcase "," indexed "]}," JWT Algos None verify":{"type":"method","name":"verify","children":[],"call":[]}," JWT Algos None sign":{"type":"method","name":"sign","children":[],"call":[]}," JWT Verify verify_required_claims":{"type":"method","name":"verify_required_claims","children":[],"call":[" raise ","@payload include? ","options_required_claims each ","@options [] ","@options []  each "]}," JWT X5cKeyFinder parse_certificates":{"type":"method","name":"parse_certificates","children":[],"call":["OpenSSL X509 Certificate  new "," Base64  strict_decode64 ","x5c_header_or_certificates map ","obj is_a? ","x5c_header_or_certificates all? "," JWT Base64  url_decode "]}," JWT X5cKeyFinder build_store":{"type":"method","name":"build_store","children":[],"call":["store add_crl ","store add_cert ","root_certificates each ","store flags= ","OpenSSL X509 V_FLAG_CRL_CHECK  | ","store purpose= ","OpenSSL X509 Store  new ","OpenSSL X509 Store  new  add_crl ","OpenSSL X509 Store  new  add_cert ","OpenSSL X509 Store  new  flags= ","OpenSSL X509 Store  new  purpose= "]}," JWT X5cKeyFinder from":{"type":"method","name":"from","children":[],"call":[" raise ","current_cert subject ","store_context current_cert ","store_context error_string ","signing_certificate public_key ","store_context verify ","OpenSSL X509 StoreContext  new "," parse_certificates ","store_context current_cert  subject ","store_context store_context current_cert  ","OpenSSL X509 StoreContext  new  current_cert ","OpenSSL X509 StoreContext  new  error_string ","OpenSSL X509 StoreContext  new  verify "]}," JWT X5cKeyFinder initialize":{"type":"method","name":"initialize","children":[],"call":[" build_store "," raise "]}," JWT Decode algorithm":{"type":"method","name":"algorithm","children":[],"call":[" header [] "," header "]}," JWT Decode none_algorithm?":{"type":"method","name":"none_algorithm?","children":[],"call":[" algorithm casecmp zero? "," algorithm casecmp "," algorithm "," algorithm == "," alg_in_header == "," alg_in_header "]}," JWT Decode verify_signature_for?":{"type":"method","name":"verify_signature_for?","children":[],"call":["Signature  verify "," signing_input "," algorithm ","alg verify "," allowed_algorithms any? "," allowed_algorithms "," allowed_and_valid_algorithms any? "," allowed_and_valid_algorithms "]}," JWT Decode set_key":{"type":"method","name":"set_key","children":[],"call":["X5cKeyFinder  new from "," header [] "," header ","X5cKeyFinder  new ","x5c_options [] ","@options [] "," JWT JWK KeyFinder  new key_for "," JWT JWK KeyFinder  new "," find_key ","@options []  [] "]}," JWT Decode verify_algo":{"type":"method","name":"verify_algo","children":[],"call":[" raise "," options_includes_algo_in_header? "," algorithm "," allowed_algorithms empty? "," allowed_algorithms "," valid_alg_in_header? "," alg_in_header "," allowed_and_valid_algorithms empty? "," allowed_and_valid_algorithms "]}," JWT Algos Ecdsa curve_by_name":{"type":"method","name":"curve_by_name","children":[],"call":["algorithm sub "," raise ","NAMED_CURVES  fetch "]}," JWT openssl_3?":{"type":"method","name":"openssl_3?","children":[],"call":[]}," JWT JWK Thumbprint generate":{"type":"method","name":"generate","children":[],"call":[" Base64  urlsafe_encode64 ","Digest SHA256  digest ","JWT JSON  generate "," jwk members sort to_h "," jwk members sort "," jwk members "," jwk "]}," JWT JWK Thumbprint initialize":{"type":"method","name":"initialize","children":[],"call":[]}," JWT JWK RSA create_rsa_key":{"type":"method","name":"create_rsa_key","children":[],"call":["rsa_key iqmp= ","rsa_parameters [] ","rsa_key dmq1= ","rsa_key dmp1= ","rsa_key q= ","rsa_key p= ","rsa_key d= ","rsa_key e= ","rsa_key n= ","OpenSSL PKey RSA  new tap ","OpenSSL PKey RSA  new ","rsa_key set_crt_params ","rsa_key set_factors ","rsa_key set_key ","OpenSSL ASN1  Sequence to_der ","OpenSSL ASN1  Sequence ","sequence unshift ","OpenSSL ASN1 Integer  new ","sequence size > ","sequence size ","arr << ","rsa_parameters [] nil? ","ASN1_SEQUENCE  each_with_object "]}," JWT JWK RSA key_digest":{"type":"method","name":"key_digest","children":[],"call":["OpenSSL Digest SHA256  hexdigest ","sequence to_der ","OpenSSL ASN1  Sequence ","OpenSSL ASN1 Integer  new "," public_key e "," public_key "," public_key n ","OpenSSL ASN1  Sequence  to_der "]}," JWT JWK RSA members":{"type":"method","name":"members","children":[],"call":[" encode_open_ssl_bn "," public_key e "," public_key "," public_key n ","h []= "," [] ","RSA_PUBLIC_KEY_ELEMENTS  each_with_object "]}," JWT JWK KidAsKeyDigest generate":{"type":"method","name":"generate","children":[],"call":["@jwk key_digest "]}," JWT JWK KidAsKeyDigest initialize":{"type":"method","name":"initialize","children":[],"call":[]}," JWT JWK KeyBase generate_kid":{"type":"method","name":"generate_kid","children":[],"call":[" kid_generator new generate "," kid_generator new "," kid_generator "]}," JWT JWK KeyBase kid":{"type":"method","name":"kid","children":[],"call":[" generate_kid "," [] "]}," JWT JWK HMAC key_digest":{"type":"method","name":"key_digest","children":[],"call":["OpenSSL Digest SHA256  hexdigest ","sequence to_der ","OpenSSL ASN1  Sequence ","OpenSSL ASN1 UTF8String  new "," signing_key ","OpenSSL ASN1  Sequence  to_der "]}," JWT JWK HMAC members":{"type":"method","name":"members","children":[],"call":[" signing_key ","h []= "," [] ","HMAC_KEY_ELEMENTS  each_with_object "]}," JWT JWK EC key_digest":{"type":"method","name":"key_digest","children":[],"call":["OpenSSL Digest SHA256  hexdigest ","sequence to_der ","OpenSSL ASN1  Sequence ","OpenSSL ASN1 Integer  new ","OpenSSL BN  new "," keypair_components "," keypair "," ec_key ","OpenSSL ASN1  Sequence  to_der "]}," JWT JWK EC members":{"type":"method","name":"members","children":[],"call":[" encode_octets "," keypair_components "," keypair ","h []= "," [] ","EC_PUBLIC_KEY_ELEMENTS  each_with_object "]}," JWT Configuration configuration":{"type":"method","name":"configuration","children":[],"call":[" JWT Configuration Container  new "]}," JWT Configuration configure":{"type":"method","name":"configure","children":[],"call":[" configuration "]}," JWT Configuration JwkConfiguration kid_generator_type=":{"type":"method","name":"kid_generator_type=","children":[],"call":[" kid_generator= "," raise "]}," JWT Configuration JwkConfiguration initialize":{"type":"method","name":"initialize","children":[],"call":[" kid_generator_type= "]}," JWT Configuration DecodeConfiguration to_h":{"type":"method","name":"to_h","children":[],"call":[" required_claims "," algorithms "," leeway "," verify_sub "," verify_aud "," verify_jti "," verify_iat "," verify_iss "," verify_not_before "," verify_expiration "]}," JWT Configuration DecodeConfiguration initialize":{"type":"method","name":"initialize","children":[],"call":[]}," JWT Configuration Container reset!":{"type":"method","name":"reset!","children":[],"call":["JwkConfiguration  new ","DecodeConfiguration  new "]}," JWT Configuration Container initialize":{"type":"method","name":"initialize","children":[],"call":[" reset! "]}," JWT openssl_version":{"type":"method","name":"openssl_version","children":[],"call":[]}," JWT openssl_3_hmac_empty_key_regression?":{"type":"method","name":"openssl_3_hmac_empty_key_regression?","children":[],"call":[]}," JWT rbnacl_6_or_greater?":{"type":"method","name":"rbnacl_6_or_greater?","children":[],"call":[]}," JWT rbnacl?":{"type":"method","name":"rbnacl?","children":[],"call":[]}," JWT JWK Set ==":{"type":"method","name":"==","children":[],"call":[" keys sort == ","other keys sort ","other keys "," keys sort "," keys ","other is_a? "]}," JWT JWK Set add":{"type":"method","name":"add","children":[],"call":["@keys << ","JWT JWK  new "]}," JWT JWK Set union":{"type":"method","name":"union","children":[],"call":[" dup merge "," dup "]}," JWT JWK Set merge":{"type":"method","name":"merge","children":[],"call":["JWT JWK Set  new keys ","JWT JWK Set  new ","enum to_a "]}," JWT JWK Set uniq!":{"type":"method","name":"uniq!","children":[],"call":["@keys uniq! "]}," JWT JWK Set reject!":{"type":"method","name":"reject!","children":[],"call":["@keys reject! "]}," JWT JWK Set select!":{"type":"method","name":"select!","children":[],"call":["@keys select! "]}," JWT JWK Set export":{"type":"method","name":"export","children":[],"call":["k export ","@keys map "]}," JWT JWK Set initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","JWT JWK  new ","jwks map ","(splat\n  (send\n    (lvar :jwks) :[]\n    (sym :keys))) map ","jwks [] ","jwks transform_keys ","jwks keys ","jwks transform_keys  map ","(splat\n  (send\n    (lvar :jwks transform_keys ) :[]\n    (sym :keys))) map ","jwks transform_keys  [] ","jwks transform_keys  transform_keys ","jwks transform_keys  keys "]}," JWT JWK RSA validate_rsa_parameters!":{"type":"method","name":"validate_rsa_parameters!","children":[],"call":[" raise ","parameters size == ","RSA_OPT_PARAMS  size ","parameters size ","parameters empty? ","RSA_OPT_PARAMS  - ","rsa_parameters keys ","rsa_parameters key? ","RSA_OPT_PARAMS  -  size == ","RSA_OPT_PARAMS  -  size ","RSA_OPT_PARAMS  -  empty? ","rsa_RSA_OPT_PARAMS  -  keys ","rsa_RSA_OPT_PARAMS  -  key? "]}," JWT JWK RSA create_rsa_key_using_accessors":{"type":"method","name":"create_rsa_key_using_accessors","children":[],"call":["rsa_key iqmp= ","rsa_parameters [] ","rsa_key dmq1= ","rsa_key dmp1= ","rsa_key q= ","rsa_key p= ","rsa_key d= ","rsa_key e= ","rsa_key n= ","OpenSSL PKey RSA  new tap ","OpenSSL PKey RSA  new "," validate_rsa_parameters! "]}," JWT JWK RSA create_rsa_key_using_sets":{"type":"method","name":"create_rsa_key_using_sets","children":[],"call":["rsa_key set_crt_params ","rsa_parameters [] ","rsa_key set_factors ","rsa_key set_key ","OpenSSL PKey RSA  new tap ","OpenSSL PKey RSA  new "," validate_rsa_parameters! "]}," JWT JWK RSA create_rsa_key_using_der":{"type":"method","name":"create_rsa_key_using_der","children":[],"call":["OpenSSL PKey RSA  new ","OpenSSL ASN1  Sequence to_der ","OpenSSL ASN1  Sequence "," raise ","sequence size < ","RSA_ASN1_SEQUENCE  size ","sequence size ","sequence unshift ","OpenSSL ASN1 Integer  new ","sequence size > ","arr << ","rsa_parameters [] ","rsa_parameters [] nil? ","RSA_ASN1_SEQUENCE  each_with_object "," validate_rsa_parameters! "]}," JWT JWK RSA parse_rsa_key":{"type":"method","name":"parse_rsa_key","children":[],"call":["(pair\n  (sym :kty)\n  (const nil :KTY)) compact "," encode_open_ssl_bn ","key iqmp ","key dmq1 ","key dmp1 ","key q ","key p ","key d ","key e ","key n "]}," JWT JWK RSA check_jwk":{"type":"method","name":"check_jwk","children":[],"call":[" raise ","keypair [] ","keypair [] == ","(send\n  (const nil :RSA_KEY_ELEMENTS) :&\n  (send\n    (lvar :params) :keys)) empty? ","RSA_KEY_ELEMENTS  & ","params keys "]}," JWT JWK RSA extract_key_params":{"type":"method","name":"extract_key_params","children":[],"call":[" raise ","key transform_keys "," parse_rsa_key ","key export "]}," JWT JWK RSA []=":{"type":"method","name":"[]=","children":[],"call":[" raise ","RSA_KEY_ELEMENTS  include? ","key to_sym "]}," JWT JWK RSA keypair":{"type":"method","name":"keypair","children":[],"call":[" class create_rsa_key "," jwk_attributes ","RSA_KEY_ELEMENTS  - "," class "," rsa_key "]}," JWT JWK KeyBase <=>":{"type":"method","name":"<=>","children":[],"call":[" [] <=> ","other [] "," [] "]}," JWT JWK KeyBase ==":{"type":"method","name":"==","children":[],"call":[" [] == ","other [] "," [] "]}," JWT JWK KeyBase []=":{"type":"method","name":"[]=","children":[],"call":["@parameters []= ","key to_sym "]}," JWT JWK KeyBase []":{"type":"method","name":"[]","children":[],"call":["@parameters [] ","key to_sym "]}," JWT JWK KeyBase hash":{"type":"method","name":"hash","children":[],"call":[" [] hash "," [] "]}," JWT JWK HMAC check_jwk":{"type":"method","name":"check_jwk","children":[],"call":[" raise ","keypair [] ","keypair [] == ","(send\n  (const nil :HMAC_KEY_ELEMENTS) :&\n  (send\n    (lvar :params) :keys)) empty? ","HMAC_KEY_ELEMENTS  & ","params keys "]}," JWT JWK HMAC extract_key_params":{"type":"method","name":"extract_key_params","children":[],"call":[" raise ","key transform_keys ","key export "]}," JWT JWK HMAC []=":{"type":"method","name":"[]=","children":[],"call":[" raise ","HMAC_KEY_ELEMENTS  include? ","key to_sym "]}," JWT JWK HMAC keypair":{"type":"method","name":"keypair","children":[],"call":[" [] "," secret "]}," JWT JWK EC create_ec_key":{"type":"method","name":"create_ec_key","children":[],"call":["key private_key= ","OpenSSL BN  new "," decode_octets ","key public_key= ","OpenSSL PKey EC Point  new ","(int 4) pack ","OpenSSL PKey EC Group  new ","OpenSSL PKey EC  new ","EC  to_openssl_curve ","sequence to_der ","OpenSSL ASN1  Sequence ","OpenSSL ASN1  BitString ","point to_octet_string ","OpenSSL ASN1  ObjectId ","OpenSSL ASN1  OctetString ","OpenSSL BN  new to_s ","OpenSSL ASN1  Integer ","OpenSSL PKey EC  new  private_OpenSSL PKey EC  new = ","OpenSSL PKey EC  new  public_OpenSSL PKey EC  new = ","EC  to_openssl_EC  to_openssl_curve  ","OpenSSL ASN1  Sequence  to_der ","OpenSSL PKey EC Point  new  to_octet_string "]}," JWT JWK EC parse_ec_key":{"type":"method","name":"parse_ec_key","children":[],"call":["(pair\n  (sym :kty)\n  (const nil :KTY)) compact "," encode_octets ","key private_key "," keypair_components "]}," JWT JWK EC check_jwk":{"type":"method","name":"check_jwk","children":[],"call":[" raise ","keypair [] ","keypair [] == ","(send\n  (const nil :EC_KEY_ELEMENTS) :&\n  (send\n    (lvar :params) :keys)) empty? ","EC_KEY_ELEMENTS  & ","params keys "]}," JWT JWK EC extract_key_params":{"type":"method","name":"extract_key_params","children":[],"call":[" raise ","key transform_keys "," parse_ec_key ","key export "]}," JWT JWK EC []=":{"type":"method","name":"[]=","children":[],"call":[" raise ","EC_KEY_ELEMENTS  include? ","key to_sym "]}," JWT JWK EC keypair":{"type":"method","name":"keypair","children":[],"call":[" create_ec_key "," [] "," ec_key "]}," JWT Encode encode_data":{"type":"method","name":"encode_data","children":[],"call":[" JWT Base64  url_encode ","JWT JSON  generate "]}," JWT Encode validate_claims!":{"type":"method","name":"validate_claims!","children":[],"call":["ClaimsValidator  new validate! ","ClaimsValidator  new ","@payload is_a? "]}," JWT Encode signature":{"type":"method","name":"signature","children":[],"call":["@algorithm sign "," encoded_header_and_payload "]}," JWT Encode resolve_algorithm":{"type":"method","name":"resolve_algorithm","children":[],"call":["Algos  create ","Algos  implementation? "]}," JWT Decode alg_in_header":{"type":"method","name":"alg_in_header","children":[],"call":[" header [] "," header "]}," JWT Decode decode_signature":{"type":"method","name":"decode_signature","children":[],"call":[" JWT Base64  url_decode ","@segments [] "]}," JWT Decode sort_by_alg_header":{"type":"method","name":"sort_by_alg_header","children":[],"call":["(send\n  (lvar :algs) :partition) flatten ","alg valid_alg? "," alg_in_header ","algs partition ","algs size <= ","algs size "]}," JWT Decode resolve_allowed_algorithms":{"type":"method","name":"resolve_allowed_algorithms","children":[],"call":[" sort_by_alg_header ","Algos  create ","Algos  implementation? "," given_algorithms map "," given_algorithms "]}," JWT Decode given_algorithms":{"type":"method","name":"given_algorithms","children":[],"call":[" Array ","@options [] ","ALGORITHM_KEYS  each "]}," JWT Decode valid_alg_in_header?":{"type":"method","name":"valid_alg_in_header?","children":[],"call":["alg valid_alg? "," alg_in_header "," allowed_algorithms any? "," allowed_algorithms "]}," JWT Algos implementation?":{"type":"method","name":"implementation?","children":[],"call":["algorithm respond_to? "]}," JWT Algos create":{"type":"method","name":"create","children":[],"call":["Algos AlgoWrapper  new "," find "]}," JWT Algos HmacRbNaClFixed padded_key_bytes":{"type":"method","name":"padded_key_bytes","children":[],"call":["key bytes fill pack ","key bytes fill ","key bytesize ","key bytes "]}," JWT Algos HmacRbNaClFixed resolve_algorithm":{"type":"method","name":"resolve_algorithm","children":[],"call":["MAPPING  fetch "]}," JWT Algos HmacRbNaClFixed verify":{"type":"method","name":"verify","children":[],"call":["Hmac  verify ","hmac verify ","signing_input encode ","signature encode "," padded_key_bytes ","hmac key_bytes ","key bytesize <= ","key bytesize "," resolve_algorithm "," raise ","key is_a? "," resolve_algorithm  verify "," resolve_algorithm  key_bytes "]}," JWT Algos HmacRbNaClFixed sign":{"type":"method","name":"sign","children":[],"call":["Hmac  sign ","hmac auth ","msg encode "," padded_key_bytes ","hmac key_bytes ","key bytesize <= ","key bytesize "," resolve_algorithm "," raise ","key is_a? "," resolve_algorithm  auth "," resolve_algorithm  key_bytes "]}," JWT Algos HmacRbNaCl padded_empty_key":{"type":"method","name":"padded_empty_key","children":[],"call":["Array  new pack encode ","Array  new pack ","Array  new "]}," JWT Algos HmacRbNaCl resolve_algorithm":{"type":"method","name":"resolve_algorithm","children":[],"call":["MAPPING  fetch "]}," JWT Algos HmacRbNaCl key_for_rbnacl":{"type":"method","name":"key_for_rbnacl","children":[],"call":[" padded_empty_key ","hmac key_bytes ","key == "," raise ","key is_a? "]}," JWT Algos HmacRbNaCl verify":{"type":"method","name":"verify","children":[],"call":["Hmac  verify ","hmac verify ","signing_input encode ","signature encode "," key_for_rbnacl encode "," key_for_rbnacl "," resolve_algorithm "," resolve_algorithm  verify "]}," JWT Algos HmacRbNaCl sign":{"type":"method","name":"sign","children":[],"call":["Hmac  sign ","hmac auth ","msg encode "," key_for_rbnacl encode "," key_for_rbnacl "," resolve_algorithm "," resolve_algorithm  auth "]}," JWT Algos Hmac SecurityUtils secure_compare":{"type":"method","name":"secure_compare","children":[],"call":[" fixed_length_secure_compare ","a bytesize == ","b bytesize ","a bytesize "]}," JWT Algos Hmac SecurityUtils fixed_length_secure_compare":{"type":"method","name":"fixed_length_secure_compare","children":[],"call":["res == ","byte ^ ","l shift ","b each_byte ","a unpack ","a bytesize "," raise ","a bytesize == ","b bytesize ","OpenSSL  fixed_length_secure_compare ","a unpack  shift ","OpenSSL  fixed_a unpack ength_secure_compare "]}," JWT Algos AlgoWrapper verify":{"type":"method","name":"verify","children":[],"call":["OpenSSL  errors clear ","OpenSSL  errors "," raise "," cls verify "," alg "," cls "]}," JWT Algos AlgoWrapper sign":{"type":"method","name":"sign","children":[],"call":[" cls sign "," alg "," cls "]}," JWT Algos AlgoWrapper valid_alg?":{"type":"method","name":"valid_alg?","children":[],"call":["(send\n  (send nil :alg) :casecmp\n  (lvar :alg_to_check)) == "," alg casecmp "," alg ","(csend\n  (send nil :alg) :casecmp\n  (lvar :alg_to_check)) == "]}," JWT Algos AlgoWrapper initialize":{"type":"method","name":"initialize","children":[],"call":[]}," JWT JWK RSA check_jwk_params!":{"type":"method","name":"check_jwk_params!","children":[],"call":[" raise ","key_params [] ","key_params [] == ","(send\n  (const nil :RSA_KEY_ELEMENTS) :&\n  (send\n    (lvar :params) :keys)) empty? ","RSA_KEY_ELEMENTS  & ","params keys "]}," JWT JWK RSA rsa_key":{"type":"method","name":"rsa_key","children":[],"call":[" class create_rsa_key "," jwk_attributes ","RSA_KEY_ELEMENTS  - "," class "]}," JWT JWK RSA verify_key":{"type":"method","name":"verify_key","children":[],"call":[" rsa_key public_key "," rsa_key "]}," JWT JWK RSA signing_key":{"type":"method","name":"signing_key","children":[],"call":[" rsa_key "," private? "]}," JWT JWK OKPRbNaCl import":{"type":"method","name":"import","children":[],"call":[" new "]}," JWT JWK OKPRbNaCl signing_key_from_parameters":{"type":"method","name":"signing_key_from_parameters","children":[],"call":["RbNaCl Signatures Ed25519 SigningKey  new "," JWT Base64  url_decode "," [] "]}," JWT JWK OKPRbNaCl verify_key_from_parameters":{"type":"method","name":"verify_key_from_parameters","children":[],"call":["RbNaCl Signatures Ed25519 VerifyKey  new "," JWT Base64  url_decode "," [] "]}," JWT JWK OKPRbNaCl parse_okp_key_params":{"type":"method","name":"parse_okp_key_params","children":[],"call":["params []= "," JWT Base64  url_encode ","signing_key to_bytes ","verify_key to_bytes "]}," JWT JWK OKPRbNaCl check_jwk_params!":{"type":"method","name":"check_jwk_params!","children":[],"call":[" raise ","key_params [] ","key_params [] == "]}," JWT JWK OKPRbNaCl extract_key_params":{"type":"method","name":"extract_key_params","children":[],"call":[" raise ","key transform_keys "," parse_okp_key_params ","key verify_key ","key export "]}," JWT JWK OKPRbNaCl export":{"type":"method","name":"export","children":[],"call":["OKP_PRIVATE_KEY_ELEMENTS  include? ","exported reject! ","options [] == ","options [] "," private? "," parameters clone "," parameters "," parameters clone  reject! "]}," JWT JWK OKPRbNaCl members":{"type":"method","name":"members","children":[],"call":["h []= "," [] ","OKP_PUBLIC_KEY_ELEMENTS  each_with_object "]}," JWT JWK OKPRbNaCl private?":{"type":"method","name":"private?","children":[],"call":[" signing_key nil? ! "," signing_key nil? "," signing_key "]}," JWT JWK OKPRbNaCl key_digest":{"type":"method","name":"key_digest","children":[],"call":["Thumbprint  new to_s ","Thumbprint  new "]}," JWT JWK OKPRbNaCl signing_key":{"type":"method","name":"signing_key","children":[],"call":[" signing_key_from_parameters "]}," JWT JWK OKPRbNaCl verify_key":{"type":"method","name":"verify_key","children":[],"call":[" verify_key_from_parameters "]}," JWT JWK OKPRbNaCl initialize":{"type":"method","name":"initialize","children":[],"call":["key_params merge "," check_jwk_params! ","params transform_keys "," extract_key_params ","params is_a? ","key_params transform_keys  merge "," extract_key_params  merge "," check_jwk_params transform_keys ! ","params transform_keys  transform_keys "," extract_key_params transform_keys  "," extract_ extract_key_params  ","params transform_keys  is_a? "]}," JWT JWK HMAC secret":{"type":"method","name":"secret","children":[],"call":[" [] "]}," JWT JWK HMAC signing_key":{"type":"method","name":"signing_key","children":[],"call":[" secret "]}," JWT JWK HMAC verify_key":{"type":"method","name":"verify_key","children":[],"call":[" secret "]}," JWT JWK EC check_jwk_params!":{"type":"method","name":"check_jwk_params!","children":[],"call":[" raise ","key_params [] ","key_params [] == ","(send\n  (const nil :EC_KEY_ELEMENTS) :&\n  (send\n    (lvar :params) :keys)) empty? ","EC_KEY_ELEMENTS  & ","params keys "]}," JWT JWK EC ec_key":{"type":"method","name":"ec_key","children":[],"call":[" create_ec_key "," [] "]}," JWT JWK EC public_key":{"type":"method","name":"public_key","children":[],"call":[" ec_key "]}," JWT JWK EC verify_key":{"type":"method","name":"verify_key","children":[],"call":[" ec_key "]}," JWT JWK EC signing_key":{"type":"method","name":"signing_key","children":[],"call":[" ec_key "]}," JWT Decode allowed_and_valid_algorithms":{"type":"method","name":"allowed_and_valid_algorithms","children":[],"call":["alg valid_alg? "," alg_in_header "," allowed_algorithms select "," allowed_algorithms "]}," JWT Algos Ecdsa asn1_to_raw":{"type":"method","name":"asn1_to_raw","children":[],"call":["(send\n  (send\n    (send\n      (const\n        (const nil :OpenSSL) :ASN1) :decode\n      (lvar :signature)) :value) :map) join ","value value to_s rjust ","value value to_s ","value value ","OpenSSL ASN1  decode value map ","OpenSSL ASN1  decode value ","OpenSSL ASN1  decode ","(send\n  (send\n    (send\n      (lvar :public_key) :group) :degree) :+\n  (int 7)) / ","public_key group degree + ","public_key group degree ","public_key group "]}," JWT Algos Ecdsa raw_to_asn1":{"type":"method","name":"raw_to_asn1","children":[],"call":["OpenSSL ASN1 Sequence  new to_der ","OpenSSL ASN1 Sequence  new ","OpenSSL ASN1 Integer  new ","OpenSSL BN  new ","(lvar :sig_bytes) map ","signature [] ","byte_size - ","(send\n  (send\n    (send\n      (lvar :private_key) :group) :degree) :+\n  (int 7)) / ","private_key group degree + ","private_key group degree ","private_key group ","(lvar :signature [] ) map ","(send\n  (send\n    (send\n      (lvar :private_key) :group) :degree) :+\n  (int 7)) /  - "]}}