{" DatabaseCleaner TruncationBase migration_storage_name":{"type":"method","name":"migration_storage_name","children":[],"call":[]}," DatabaseCleaner TruncationBase tables_to_truncate":{"type":"method","name":"tables_to_truncate","children":[],"call":[" raise "]}," DatabaseCleaner TruncationBase clean":{"type":"method","name":"clean","children":[],"call":[" raise "]}," DatabaseCleaner TruncationBase start":{"type":"method","name":"start","children":[],"call":[]}," DatabaseCleaner TruncationBase initialize":{"type":"method","name":"initialize","children":[],"call":["@tables_to_exclude << "," migration_storage_name ","options [] "," raise ","options has_key? ","options keys join ","options keys ","(send\n  (send\n    (lvar :options) :keys) :-\n  (array\n    (sym :only)\n    (sym :except))) empty? ! ","(send\n  (send\n    (lvar :options) :keys) :-\n  (array\n    (sym :only)\n    (sym :except))) empty? ","options keys - ","options empty? ! ","options empty? ","  migration_storage_name _name "]}," DataMapper Truncation migration_storage_name":{"type":"method","name":"migration_storage_name","children":[],"call":[]}," DataMapper Truncation tables_to_truncate":{"type":"method","name":"tables_to_truncate","children":[],"call":["(or\n  (ivar :@only)\n  (send\n    (send\n      (send\n        (const nil :DataMapper) :repository\n        (lvar :repository)) :adapter) :storage_names\n    (lvar :repository))) - ","DataMapper  repository adapter storage_names ","DataMapper  repository adapter ","DataMapper  repository "]}," DataMapper Truncation clean":{"type":"method","name":"clean","children":[],"call":["adapter truncate_table "," tables_to_truncate each "," tables_to_truncate ","adapter disable_referential_integrity ","DataMapper  repository adapter ","DataMapper  repository ","DataMapper  repository adapter  truncate_table ","DataMapper  repository adapter  disable_referential_integrity ","DataMapper  repository DataMapper  repository adapter  "]}," DataMapper Adapters PostgresAdapter disable_referential_integrity":{"type":"method","name":"disable_referential_integrity","children":[],"call":[" execute ","(send\n  (send nil :storage_names\n    (lvar :repository)) :collect) join "," quote_table_name "," storage_names collect "," storage_names "," supports_disable_referential_integrity? "," quote_name "]}," DataMapper Adapters PostgresAdapter supports_disable_referential_integrity?":{"type":"method","name":"supports_disable_referential_integrity?","children":[],"call":["version [] to_i >= ","version [] to_i ","version [] "," query [] [] split "," query [] [] "," query [] "," query "," select [] [] split "," select [] [] "," select [] "," select "," query [] [] split  [] to_i >= "," select [] [] split  [] to_i >= "," query [] [] split  [] to_i "," select [] [] split  [] to_i "," query [] [] split  [] "," select [] [] split  [] "]}," DataMapper Adapters PostgresAdapter truncate_table":{"type":"method","name":"truncate_table","children":[],"call":[" execute "," quote_table_name "," quote_name "]}," DataMapper Adapters PostgresAdapter storage_names":{"type":"method","name":"storage_names","children":[],"call":[" query ","(str \"          SELECT table_name FROM \\\"information_schema\\\".\\\"tables\\\"\\n\") compress_lines "," select "]}," DataMapper Adapters Sqlite3Adapter disable_referential_integrity":{"type":"method","name":"disable_referential_integrity","children":[],"call":[]}," DataMapper Adapters Sqlite3Adapter truncate_table":{"type":"method","name":"truncate_table","children":[],"call":[" execute "," quote_table_name "," quote_name "," uses_sequence "," uses_sequence? "]}," DataMapper Adapters Sqlite3Adapter storage_names":{"type":"method","name":"storage_names","children":[],"call":[" query ","(str \"          SELECT name\\n\") compress_lines "," select "]}," DataMapper Adapters MysqlAdapter disable_referential_integrity":{"type":"method","name":"disable_referential_integrity","children":[],"call":[" execute "," query "," select ","old first "," query  first "," select  first "]}," DataMapper Adapters MysqlAdapter truncate_table":{"type":"method","name":"truncate_table","children":[],"call":[" execute "," quote_table_name "," quote_name "]}," DataMapper Adapters MysqlAdapter storage_names":{"type":"method","name":"storage_names","children":[],"call":[" query "," select "]}," DataMapper Adapters DataObjectsAdapter storage_names":{"type":"method","name":"storage_names","children":[],"call":[" raise "]}," DataMapper Transaction clean":{"type":"method","name":"clean","children":[],"call":["adapter pop_transaction ","adapter current_transaction rollback ","adapter current_transaction ","r adapter ","DataMapper  repository "," DataMapper  repository "," db ","repository nil? ","r adapter  pop_transaction ","r adapter  current_transaction rollback ","r adapter  current_transaction ","r r adapter  ","DataMapper   db  "," DataMapper   db  "," db  nil? "]}," DataMapper Transaction start":{"type":"method","name":"start","children":[],"call":["r adapter push_transaction ","r adapter ","transaction begin ","DataMapper Transaction  new ","DataMapper  repository "," DataMapper  repository "," db ","repository nil? ","r adapter push_DataMapper Transaction  new  ","DataMapper Transaction  new  begin ","DataMapper   db  "," DataMapper   db  "," db  nil? "]}," DatabaseCleaner orm_module":{"type":"method","name":"orm_module","children":[],"call":[" orm "]}," DatabaseCleaner orm":{"type":"method","name":"orm","children":[],"call":[" raise "]}," DatabaseCleaner orm_strategy":{"type":"method","name":"orm_strategy","children":[],"call":[" raise "," orm_module available_strategies join "," orm_module available_strategies "," orm_module "," orm "," orm_module const_get ","strategy to_s capitalize ","strategy to_s "," require "," puts "]}," DatabaseCleaner strategy":{"type":"method","name":"strategy","children":[],"call":[" raise "]}," DatabaseCleaner clean":{"type":"method","name":"clean","children":[],"call":[" strategy clean "," strategy ","connection clean "," connections each "," connections "]}," DatabaseCleaner start":{"type":"method","name":"start","children":[],"call":[" strategy start "," strategy ","connection start "," connections each "," connections "]}," DatabaseCleaner orm=":{"type":"method","name":"orm=","children":[],"call":[" remove_duplicates ","connect orm= "," connections each "," connections "]}," DatabaseCleaner strategy=":{"type":"method","name":"strategy=","children":[],"call":[" raise ","strategy_args empty? "," create_strategy ","strategy is_a? "," remove_duplicates ","connect strategy= "," connections each "," connections "]}," DatabaseCleaner clean_with":{"type":"method","name":"clean_with","children":[],"call":["strategy clean "," create_strategy ","connection clean_with "," connections each "," connections "," create_strategy  clean "," create_ create_strategy  "]}," DatabaseCleaner create_strategy":{"type":"method","name":"create_strategy","children":[],"call":[" orm_strategy new "," orm_strategy "]}," DatabaseCleaner DataMapper available_strategies":{"type":"method","name":"available_strategies","children":[],"call":[]}," DatabaseCleaner ActiveRecord available_strategies":{"type":"method","name":"available_strategies","children":[],"call":[]}," ActiveRecord Truncation migration_storage_name":{"type":"method","name":"migration_storage_name","children":[],"call":[]}," ActiveRecord Truncation connection":{"type":"method","name":"connection","children":[],"call":[" ActiveRecord Base  connection "," connection_klass connection "," connection_klass "]}," ActiveRecord Truncation tables_to_truncate":{"type":"method","name":"tables_to_truncate","children":[],"call":["(or\n  (ivar :@only)\n  (send\n    (send nil :connection) :tables)) - "," connection tables "," connection ","(or\n  (ivar :@only)\n  (send\n    (send nil :connection) :tables)) - - "," connection views ","(or\n  (ivar :@only)\n  (send\n    (lvar :connection) :tables)) - - ","connection views ","(or\n  (ivar :@only)\n  (send\n    (lvar :connection) :tables)) - ","connection tables ","(or\n  (ivar :@only)\n  (send\n    (lvar :connection) :database_cleaner_table_cache)) - - ","connection database_cleaner_view_cache ","(or\n  (ivar :@only)\n  (send\n    (lvar :connection) :database_cleaner_table_cache)) - ","connection database_cleaner_table_cache ","(or\n  (ivar :@only)\n  (lvar :tables_in_db)) - - ","(or\n  (ivar :@only)\n  (lvar :tables_in_db)) - "," cache_tables? ","to_reject include? ","m [] ","table match ","(or\n  (ivar :@only)\n  (lvar :tables_in_db)) reject ","@tables_to_exclude + ","(or\n  (ivar :@only)\n  (lvar :connection tables )) - - ","(or\n  (ivar :@only)\n  (lvar :connection database_cleaner_table_cache )) - - ","(or\n  (ivar :@only)\n  (lvar :connection tables )) - ","(or\n  (ivar :@only)\n  (lvar :connection database_cleaner_table_cache )) - ","table match  [] ","table table match atch ","(or\n  (ivar :@only)\n  (lvar :connection tables )) reject ","(or\n  (ivar :@only)\n  (lvar :connection database_cleaner_table_cache )) reject "]}," ActiveRecord Truncation clean":{"type":"method","name":"clean","children":[],"call":[" connection truncate_table "," connection "," tables_to_truncate each "," tables_to_truncate "," connection disable_referential_integrity ","connection truncate_table "," each_table ","connection truncate_tables ","connection disable_referential_integrity "," connection_klass connection "," connection_klass ","connection pre_count_truncate_tables "," reset_ids? ","connection respond_to? "," pre_count? "," connection_class connection "," connection_class ","  connection_klass connection  truncate_table ","  connection_class connection  truncate_table ","  connection_klass connection  ","  connection_class connection  ","  connection_klass connection  disable_referential_integrity ","  connection_class connection  disable_referential_integrity "," connection_klass connection  truncate_table "," connection_class connection  truncate_table "," connection_klass connection  truncate_tables "," connection_class connection  truncate_tables "," connection_klass connection  disable_referential_integrity "," connection_class connection  disable_referential_integrity ","  connection_klass connection _klass  connection_klass connection  ","  connection_class connection _klass  connection_class connection  ","  connection_klass connection _klass ","  connection_class connection _klass "," connection_klass connection  pre_count_truncate_tables "," connection_class connection  pre_count_truncate_tables "," connection_klass connection  respond_to? "," connection_class connection  respond_to? ","  connection_klass connection _class  connection_klass connection  ","  connection_class connection _class  connection_class connection  ","  connection_klass connection _class ","  connection_class connection _class "]}," ActiveRecord ConnectionAdapters SQLServerAdapter truncate_table":{"type":"method","name":"truncate_table","children":[],"call":[" execute "," quote_table_name "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter truncate_table":{"type":"method","name":"truncate_table","children":[],"call":[" execute "," quote_table_name "," class cascade "," class "," cascade "," restart_identity "," truncate_tables "]}," ActiveRecord ConnectionAdapters JdbcAdapter truncate_table":{"type":"method","name":"truncate_table","children":[],"call":[" execute "," quote_table_name "]}," ActiveRecord ConnectionAdapters SQLite3Adapter truncate_table":{"type":"method","name":"truncate_table","children":[],"call":[" execute "," quote_table_name "]}," ActiveRecord ConnectionAdapters MysqlAdapter truncate_table":{"type":"method","name":"truncate_table","children":[],"call":[" execute "," quote_table_name "]}," ActiveRecord Transaction clean":{"type":"method","name":"clean","children":[],"call":["ActiveRecord Base  __send__ ","ActiveRecord Base  connection decrement_open_transactions ","ActiveRecord Base  connection ","ActiveRecord Base  connection respond_to? ","ActiveRecord Base  connection rollback_db_transaction "," connection_klass __send__ "," connection_klass "," connection_klass connection decrement_open_transactions "," connection_klass connection "," connection_klass connection respond_to? "," connection_klass connection rollback_db_transaction "," connection_klass connection open_transactions > "," connection_klass connection open_transactions "," connection_class __send__ "," connection_class "," connection_class connection decrement_open_transactions "," connection_class connection "," connection_class connection respond_to? "," connection_class connection rollback_db_transaction "," connection_class connection open_transactions > "," connection_class connection open_transactions "," connection_maintains_transaction_count? "," connection_class connection send "," connection_class connection rollback_transaction ","connection decrement_open_transactions ","connection respond_to? ","connection send ","connection rollback_db_transaction ","connection rollback_transaction ","connection open_transactions > ","connection open_transactions "," connection_class connection_pool connections each "," connection_class connection_pool connections "," connection_class connection_pool "]}," ActiveRecord Transaction start":{"type":"method","name":"start","children":[],"call":["ActiveRecord Base  connection begin_db_transaction ","ActiveRecord Base  connection ","ActiveRecord Base  __send__ ","ActiveRecord Base  connection increment_open_transactions ","ActiveRecord Base  connection respond_to? "," connection_klass connection begin_db_transaction "," connection_klass connection "," connection_klass "," connection_klass __send__ "," connection_klass connection increment_open_transactions "," connection_klass connection respond_to? "," connection_class connection begin_db_transaction "," connection_class connection "," connection_class "," connection_class __send__ "," connection_class connection increment_open_transactions "," connection_class connection respond_to? "," connection_class connection begin_transaction "," connection_maintains_transaction_count? "," connection_class connection transaction "]}," DatabaseCleaner MongoMapper Truncation database":{"type":"method","name":"database","children":[],"call":[" MongoMapper  database name "," MongoMapper  database "]}," DatabaseCleaner MongoMapper Truncation connection":{"type":"method","name":"connection","children":[],"call":[" MongoMapper  connection "]}," DatabaseCleaner MongoMapper Truncation clean":{"type":"method","name":"clean","children":[],"call":["c remove "," connection db collections each "," connection db collections "," connection db "," database "," connection ","@tables_to_exclude include? ","c name "," collections each "," collections ","@only include? "]}," DatabaseCleaner MongoMapper available_strategies":{"type":"method","name":"available_strategies","children":[],"call":[]}," ActiveRecord ConnectionAdapters OracleEnhancedAdapter truncate_table":{"type":"method","name":"truncate_table","children":[],"call":[" execute "," quote_table_name "]}," DatabaseCleaner MongoMapper Truncation collections":{"type":"method","name":"collections","children":[],"call":[" connection db collections "," connection db "," database "," connection ","c name !~ ","c name "," connection db collections select "]}," DatabaseCleaner CouchPotato Truncation database":{"type":"method","name":"database","children":[],"call":[" CouchPotato  couchrest_database "]}," DatabaseCleaner CouchPotato Truncation clean":{"type":"method","name":"clean","children":[],"call":[" database recreate! "," database "]}," DatabaseCleaner CouchPotato Truncation initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","options keys join ","options keys ","options empty? ! ","options empty? ","options has_key? "]}," DatabaseCleaner CouchPotato available_strategies":{"type":"method","name":"available_strategies","children":[],"call":[]}," DatabaseCleaner Mongoid Truncation collections":{"type":"method","name":"collections","children":[],"call":[" Mongoid  database collections "," Mongoid  database ","c name !~ ","c name "," Mongoid  database collections select "]}," DatabaseCleaner Mongoid Truncation clean":{"type":"method","name":"clean","children":[],"call":["c remove ","@tables_to_exclude include? ","c name "," collections each "," collections ","@only include? "]}," DatabaseCleaner Mongoid available_strategies":{"type":"method","name":"available_strategies","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter cascade":{"type":"method","name":"cascade","children":[],"call":[" db_version >= "," db_version "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter db_version":{"type":"method","name":"db_version","children":[],"call":[" select_values join to_s "," select_values join "," select_values "," postgresql_version "]}," DatabaseCleaner Mongoid Base db":{"type":"method","name":"db","children":[],"call":[]}," DatabaseCleaner Mongoid Base db=":{"type":"method","name":"db=","children":[],"call":[]}," DatabaseCleaner MongoMapper Base db":{"type":"method","name":"db","children":[],"call":[]}," DatabaseCleaner MongoMapper Base db=":{"type":"method","name":"db=","children":[],"call":[]}," DatabaseCleaner Generic Truncation InstanceMethods migration_storage_name":{"type":"method","name":"migration_storage_name","children":[],"call":[]}," DatabaseCleaner Generic Truncation InstanceMethods tables_to_truncate":{"type":"method","name":"tables_to_truncate","children":[],"call":[" raise "]}," DatabaseCleaner Generic Truncation InstanceMethods clean":{"type":"method","name":"clean","children":[],"call":[" raise "]}," DatabaseCleaner Generic Truncation InstanceMethods start":{"type":"method","name":"start","children":[],"call":[]}," DatabaseCleaner Generic Truncation InstanceMethods initialize":{"type":"method","name":"initialize","children":[],"call":["@tables_to_exclude << "," migration_storage_name "," migration_storage_name nil? ","opts [] "," raise ","opts has_key? ","opts keys join ","opts keys ","(send\n  (send\n    (lvar :opts) :keys) :-\n  (array\n    (sym :only)\n    (sym :except))) empty? ! ","(send\n  (send\n    (lvar :opts) :keys) :-\n  (array\n    (sym :only)\n    (sym :except))) empty? ","opts keys - ","opts empty? ! ","opts empty? ","(or\n  (send\n    (lvar :opts) :[]\n    (sym :except))\n  (array)) dup ","(or\n  (send\n    (lvar :opts) :[]\n    (sym :except))\n  (array)) dup  << "]}," DatabaseCleaner Generic Truncation included":{"type":"method","name":"included","children":[],"call":[]}," DatabaseCleaner Generic Base ClassMethods available_strategies":{"type":"method","name":"available_strategies","children":[],"call":[]}," DatabaseCleaner Generic Base InstanceMethods db":{"type":"method","name":"db","children":[],"call":[]}," DatabaseCleaner Generic Base included":{"type":"method","name":"included","children":[],"call":[]}," DatabaseCleaner DataMapper Truncation migration_storage_name":{"type":"method","name":"migration_storage_name","children":[],"call":[]}," DatabaseCleaner DataMapper Truncation tables_to_truncate":{"type":"method","name":"tables_to_truncate","children":[],"call":["(or\n  (ivar :@only)\n  (send\n    (send\n      (send\n        (const\n          (cbase) :DataMapper) :repository\n        (lvar :repository)) :adapter) :storage_names\n    (lvar :repository))) - "," DataMapper  repository adapter storage_names "," DataMapper  repository adapter "," DataMapper  repository "," db ","repository nil? ","(or\n  (ivar :@only)\n  (send\n    (send\n      (send\n        (const\n          (cbase) :DataMapper) : db \n        (lvar : db )) :adapter) :storage_names\n    (lvar : db ))) - "," DataMapper   db  adapter storage_names "," DataMapper   db  adapter "," DataMapper   db  "," db  nil? "]}," DatabaseCleaner DataMapper Truncation clean":{"type":"method","name":"clean","children":[],"call":["adapter truncate_table "," tables_to_truncate each "," tables_to_truncate ","adapter disable_referential_integrity "," DataMapper  repository adapter "," DataMapper  repository "," db ","repository nil? ","adapter truncate_tables "," DataMapper  repository adapter  truncate_table "," DataMapper  repository adapter  disable_referential_integrity "," DataMapper  repository  DataMapper  repository adapter  "," DataMapper   db  adapter "," DataMapper   db  "," db  nil? "," DataMapper  repository adapter  truncate_tables "]}," DataMapper Adapters SqliteAdapter disable_referential_integrity":{"type":"method","name":"disable_referential_integrity","children":[],"call":[]}," DataMapper Adapters SqliteAdapter truncate_table":{"type":"method","name":"truncate_table","children":[],"call":[" execute "," quote_name "," uses_sequence "," uses_sequence? "]}," DataMapper Adapters SqliteAdapter storage_names":{"type":"method","name":"storage_names","children":[],"call":[" select ","(str \"          SELECT name\\n\") compress_lines "]}," DatabaseCleaner DataMapper Base db":{"type":"method","name":"db","children":[],"call":[]}," DatabaseCleaner DataMapper Base db=":{"type":"method","name":"db=","children":[],"call":[]}," DatabaseCleaner remove_duplicates":{"type":"method","name":"remove_duplicates","children":[],"call":["temp push ","temp include? "," connections each "," connections "]}," DatabaseCleaner connections":{"type":"method","name":"connections","children":[],"call":[" DatabaseCleaner Base  new "," add_cleaner ","autodetected orm "," DatabaseCleaner Base  new  orm "]}," DatabaseCleaner app_root":{"type":"method","name":"app_root","children":[],"call":["Dir  pwd "]}," DatabaseCleaner app_root=":{"type":"method","name":"app_root=","children":[],"call":[]}," DatabaseCleaner []":{"type":"method","name":"[]","children":[],"call":[" connections push "," connections ","DatabaseCleaner Base  new "," raise ","orm nil? "," add_cleaner ","@cleaners [] ","@cleaners has_key? "," init_cleaners "," add_DatabaseCleaner Base  new  ","@DatabaseCleaner Base  new s [] ","@DatabaseCleaner Base  new s has_key? "," init_DatabaseCleaner Base  new s "]}," DatabaseCleaner Base autodetect":{"type":"method","name":"autodetect","children":[],"call":[" raise "," autodetect_orm "]}," DatabaseCleaner Base orm_strategy":{"type":"method","name":"orm_strategy","children":[],"call":[" raise "," orm "," orm_module available_strategies join "," orm_module available_strategies "," orm_module "," orm_module respond_to? "," orm_module const_get ","strategy to_s capitalize ","strategy to_s "," require "," orm to_s "," require_orm_strategy ","DatabaseCleaner  deprecate "," orm != "]}," DatabaseCleaner Base orm_module":{"type":"method","name":"orm_module","children":[],"call":[" DatabaseCleaner  orm_module "," orm ","DatabaseCleaner  const_get "," orm to_s camelize "," orm to_s "," require ","$LOAD_PATH unshift ","File  expand_path ","File  dirname ","(sym :active_record) include? ","ORMAutodetector ORMS  [] "," load_adapter "," adapter_loaded? ! "," adapter_loaded? "]}," DatabaseCleaner Base ==":{"type":"method","name":"==","children":[],"call":[" strategy class == ","other strategy class ","other strategy "," strategy class "," strategy "," db == ","other db "," db "," orm == ","other orm "," orm "]}," DatabaseCleaner Base auto_detected?":{"type":"method","name":"auto_detected?","children":[],"call":["@autodetected nil? ","@autodetected ! ! ","@autodetected ! ","@orm_autodetector autodetected? ","DatabaseCleaner  deprecate "]}," DatabaseCleaner Base clean":{"type":"method","name":"clean","children":[],"call":[" strategy clean "," strategy "]}," DatabaseCleaner Base start":{"type":"method","name":"start","children":[],"call":[" strategy start "," strategy "]}," DatabaseCleaner Base orm":{"type":"method","name":"orm","children":[],"call":[" autodetect "]}," DatabaseCleaner Base orm=":{"type":"method","name":"orm=","children":[],"call":["desired_orm to_sym ","@orm_autodetector orm ","@orm == ","(or\n  (lvar :desired_orm)\n  (sym :autodetect)) to_sym ","DatabaseCleaner  deprecate ","DatabaseCleaner  called_externally? "," caller ","desired_orm to_sym _autodetector orm ","@orm_autodetector orm _autodetector orm ","(or\n  (lvar :desired_orm)\n  (sym :autodetect)) to_sym _autodetector orm ","desired_orm to_sym  == ","@orm_autodetector orm  == ","(or\n  (lvar :desired_orm)\n  (sym :autodetect)) to_sym  == "]}," DatabaseCleaner Base strategy":{"type":"method","name":"strategy","children":[],"call":[" raise ","NullStrategy  new "]}," DatabaseCleaner Base strategy=":{"type":"method","name":"strategy=","children":[],"call":[" strategy_db= "," db "," raise ","strategy_args empty? "," create_strategy ","strategy is_a? "," set_strategy_db ","DatabaseCleaner  deprecate "," orm ","strategy == ","(sym :redis) include? ","DatabaseCleaner  called_externally? "," caller "]}," DatabaseCleaner Base clean_with":{"type":"method","name":"clean_with","children":[],"call":["strategy clean "," create_strategy "," set_strategy_db "," db "," create_strategy  clean "," create_ create_strategy  "," set_ create_strategy _db "]}," DatabaseCleaner Base create_strategy":{"type":"method","name":"create_strategy","children":[],"call":[" orm_strategy new "," orm_strategy ","DatabaseCleaner  deprecate "," called_externally? "," caller ","DatabaseCleaner  called_externally? "]}," DatabaseCleaner Base db":{"type":"method","name":"db","children":[],"call":[]}," DatabaseCleaner Base strategy_db=":{"type":"method","name":"strategy_db=","children":[],"call":[" raise ","desired_db != "," strategy db= "," strategy "," strategy respond_to? "," set_strategy_db ","DatabaseCleaner  deprecate "," called_externally? "," caller ","DatabaseCleaner  called_externally? "]}," DatabaseCleaner Base db=":{"type":"method","name":"db=","children":[],"call":[" strategy_db= "]}," DatabaseCleaner Base initialize":{"type":"method","name":"initialize","children":[],"call":[" db= ","opts [] ","opts has_key? "," orm= "," autodetect ","desired_orm nil? ","desired_orm == "," set_default_orm_strategy ","(sym :autodetect) include? ","Safeguard  new run ","Safeguard  new "," strategy= "," orm_module default_strategy "," orm_module ","ORMAutodetector  new ","DatabaseCleaner  deprecate "]}," ActiveRecord ConnectionAdapters SQLite3Adapter delete_table":{"type":"method","name":"delete_table","children":[],"call":[" execute "," quote_table_name "]}," ActiveRecord ConnectionAdapters Mysql2Adapter truncate_table":{"type":"method","name":"truncate_table","children":[],"call":[" execute "," quote_table_name "]}," ActiveRecord Deletion clean":{"type":"method","name":"clean","children":[],"call":[" connection delete_table "," connection "," tables_to_truncate each "," tables_to_truncate "," connection disable_referential_integrity ","connection delete_table "," each_table "," connection_klass connection "," connection_klass ","connection disable_referential_integrity "," connection_class connection "," connection_class ","connection execute ","(send\n  (send nil :tables_to_truncate\n    (lvar :connection)) :map) join ","connection quote_table_name "," tables_to_truncate map ","  connection_klass connection  delete_table ","  connection_class connection  delete_table ","  connection_klass connection  ","  connection_class connection  ","  connection_klass connection  disable_referential_integrity ","  connection_class connection  disable_referential_integrity "," connection_klass connection  delete_table "," connection_class connection  delete_table ","  connection_klass connection _klass  connection_klass connection  ","  connection_class connection _klass  connection_class connection  ","  connection_klass connection _klass ","  connection_class connection _klass "," connection_klass connection  disable_referential_integrity "," connection_class connection  disable_referential_integrity ","  connection_klass connection _class  connection_klass connection  ","  connection_class connection _class  connection_class connection  ","  connection_klass connection _class ","  connection_class connection _class "," connection_klass connection  execute "," connection_class connection  execute ","(send\n  (send nil :tables_to_truncate\n    (lvar : connection_klass connection )) :map) join ","(send\n  (send nil :tables_to_truncate\n    (lvar : connection_class connection )) :map) join "," connection_klass connection  quote_table_name "," connection_class connection  quote_table_name "]}," ActiveRecord ConnectionAdapters OracleEnhancedAdapter delete_table":{"type":"method","name":"delete_table","children":[],"call":[" execute "," quote_table_name "]}," ActiveRecord ConnectionAdapters SQLServerAdapter delete_table":{"type":"method","name":"delete_table","children":[],"call":[" execute "," quote_table_name "]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter delete_table":{"type":"method","name":"delete_table","children":[],"call":[" execute "," quote_table_name "]}," ActiveRecord ConnectionAdapters JdbcAdapter delete_table":{"type":"method","name":"delete_table","children":[],"call":[" execute "," quote_table_name "]}," ActiveRecord ConnectionAdapters Mysql2Adapter delete_table":{"type":"method","name":"delete_table","children":[],"call":[" execute "," quote_table_name "]}," ActiveRecord ConnectionAdapters MysqlAdapter delete_table":{"type":"method","name":"delete_table","children":[],"call":[" execute "," quote_table_name "]}," DatabaseCleaner ActiveRecord Base connection_klass":{"type":"method","name":"connection_klass","children":[],"call":["klass send "," connection_hash "," create_connection_klass "," connection_hash nil? "," create_connection_klass  send "," create_connection_ create_connection_klass  "]}," DatabaseCleaner ActiveRecord Base create_connection_klass":{"type":"method","name":"create_connection_klass","children":[],"call":["Class  new "]}," DatabaseCleaner ActiveRecord Base load_config":{"type":"method","name":"load_config","children":[],"call":[" connection_hash= ","connection_details [] "," db to_s "," db ","YAML  load ","ERB  new result ","ERB  new ","IO  read ","ActiveRecord  config_file_location ","File  file? "," db != "," db is_a? "," valid_config [] "," valid_config ","YAML  load  [] "]}," DatabaseCleaner ActiveRecord Base db":{"type":"method","name":"db","children":[],"call":[]}," DatabaseCleaner ActiveRecord Base db=":{"type":"method","name":"db=","children":[],"call":[" load_config "]}," DatabaseCleaner ActiveRecord config_file_location":{"type":"method","name":"config_file_location","children":[],"call":[]}," DatabaseCleaner NullStrategy clean":{"type":"method","name":"clean","children":[],"call":[]}," DatabaseCleaner NullStrategy db=":{"type":"method","name":"db=","children":[],"call":[]}," DatabaseCleaner NullStrategy start":{"type":"method","name":"start","children":[],"call":[]}," DatabaseCleaner Mongoid Truncation database":{"type":"method","name":"database","children":[],"call":[" Mongoid  database "," Mongoid  databases [] "," Mongoid  databases ","(send\n  (ivar :@db) :nil?) ! ","@db == ","@db nil? "]}," DatabaseCleaner Mongo Truncation collections":{"type":"method","name":"collections","children":[],"call":["c name !~ ","c name "," database collections select "," database collections "," database "," not_caching "," database name "," collections_cache []= "," collections_cache ","missing_collections empty? "," mongoid_collection_names [] - ","db_collections map "," mongoid_collection_names [] "," mongoid_collection_names "," collections_cache [] "," collections_cache has_key? "," mongoid_collection_names [] -  empty? "]}," DatabaseCleaner Mongo Truncation remove":{"type":"method","name":"remove","children":[],"call":["collection remove ","collection drop_indexes "]}," DatabaseCleaner Mongo Truncation clean":{"type":"method","name":"clean","children":[],"call":[" remove ","@tables_to_exclude include? ","c name "," collections each "," collections ","@only include? ","c remove "]}," DatabaseCleaner Base set_default_orm_strategy":{"type":"method","name":"set_default_orm_strategy","children":[],"call":[" strategy= "," orm "]}," ActiveRecord ConnectionAdapters AbstractAdapter views":{"type":"method","name":"views","children":[],"call":[" select_values "," current_database "]}," DatabaseCleaner ActiveRecord config_file_location=":{"type":"method","name":"config_file_location=","children":[],"call":[]}," ActiveRecord ConnectionAdapters IBM_DBAdapter truncate_table":{"type":"method","name":"truncate_table","children":[],"call":[" execute "," quote_table_name "]}," DatabaseCleaner logger":{"type":"method","name":"logger","children":[],"call":["@logger level= ","Logger  new ","Logger  new  level= "]}," DatabaseCleaner logger=":{"type":"method","name":"logger=","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter restart_identity":{"type":"method","name":"restart_identity","children":[],"call":[" db_version >= "," db_version "]}," ActiveRecord Truncation each_table":{"type":"method","name":"each_table","children":[],"call":[" tables_to_truncate each "," tables_to_truncate ","connection disable_referential_integrity "," connection_klass connection "," connection_klass "," connection_klass connection  disable_referential_integrity ","  connection_klass connection _klass  connection_klass connection  ","  connection_klass connection _klass "]}," DatabaseCleaner Sequel Truncation tables_to_truncate":{"type":"method","name":"tables_to_truncate","children":[],"call":["(or\n  (ivar :@only)\n  (send\n    (lvar :db) :tables)) - ","db tables ","(or\n  (ivar :@only)\n  (send\n    (send\n      (lvar :db) :tables) :map\n    (block-pass\n      (sym :to_s)))) - ","db tables map "]}," DatabaseCleaner Sequel Truncation each_table":{"type":"method","name":"each_table","children":[],"call":[" db "," tables_to_truncate each "," tables_to_truncate ","table to_sym "]}," DatabaseCleaner Sequel Truncation clean":{"type":"method","name":"clean","children":[],"call":["db [] truncate ","db [] "," each_table "," db run "," db ","(send\n  (lvar :tables) :map) join ","tables map ","(lvasgn :tables\n  (send nil :tables_to_truncate\n    (send nil :db))) empty? "," tables_to_truncate "," db url sub to_sym "," db url sub "," db url "," db database_type "," truncate_tables "," pre_count_truncate_tables "," pre_count? "," dirty? ","(send\n  (lvar : tables_to_truncate ) :map) join "," tables_to_truncate  map ","(lvasgn : tables_to_truncate \n  (send nil : tables_to_truncate _to_truncate\n    (send nil :db))) empty? ","  tables_to_truncate _to_truncate "," truncate_ tables_to_truncate  "," pre_count_truncate_ tables_to_truncate  "]}," DatabaseCleaner Sequel Transaction clean":{"type":"method","name":"clean","children":[],"call":[" db send "," db ","@transactions pop ","f resume ","@fibers pop ","@@transactions pop s pop ","@fibers pop  resume ","@@fibers pop ibers pop "]}," DatabaseCleaner Sequel Transaction start":{"type":"method","name":"start","children":[],"call":["@transactions << "," db send "," db ","@fibers << ","f resume ","Fiber  yield ","db transaction ","Fiber  new "," class check_fiber_brokenness "," class ","  db  send ","  db  "," db  transaction "]}," DatabaseCleaner Sequel Base db":{"type":"method","name":"db","children":[],"call":[" Sequel DATABASES  first "," raise "," Sequel DATABASES  count > "," Sequel DATABASES  count ","@db != "]}," DatabaseCleaner Sequel Base db=":{"type":"method","name":"db=","children":[],"call":[]}," DatabaseCleaner Sequel available_strategies":{"type":"method","name":"available_strategies","children":[],"call":[]}," DatabaseCleaner Generic Base db":{"type":"method","name":"db","children":[],"call":[]}," ActiveRecord ConnectionAdapters PostgreSQLAdapter truncate_tables":{"type":"method","name":"truncate_tables","children":[],"call":[" execute "," cascade "," restart_identity ","(send\n  (lvar :table_names) :map) join "," quote_table_name ","table_names map ","table_names empty? ","table_names nil? "]}," ActiveRecord ConnectionAdapters AbstractAdapter truncate_tables":{"type":"method","name":"truncate_tables","children":[],"call":[" truncate_table ","tables each "]}," ActiveRecord ConnectionAdapters AbstractAdapter truncate_table":{"type":"method","name":"truncate_table","children":[],"call":[" raise "]}," DatabaseCleaner Generic Truncation migration_storage_name":{"type":"method","name":"migration_storage_name","children":[],"call":[]}," DatabaseCleaner Generic Truncation tables_to_truncate":{"type":"method","name":"tables_to_truncate","children":[],"call":[" raise "]}," DatabaseCleaner Generic Truncation clean":{"type":"method","name":"clean","children":[],"call":[" raise "]}," DatabaseCleaner Generic Truncation start":{"type":"method","name":"start","children":[],"call":[]}," DatabaseCleaner Generic Truncation initialize":{"type":"method","name":"initialize","children":[],"call":["@tables_to_exclude << "," migration_storage_name ","(or\n  (send\n    (lvar :opts) :[]\n    (sym :except))\n  (array)) dup ","opts [] "," raise ","opts has_key? ","opts keys join ","opts keys ","(send\n  (send\n    (lvar :opts) :keys) :-\n  (array\n    (sym :only)\n    (sym :except))) empty? ! ","(send\n  (send\n    (lvar :opts) :keys) :-\n  (array\n    (sym :only)\n    (sym :except))) empty? ","opts keys - ","opts empty? ! ","opts empty? "," migration_storage_names ","(send\n  (send\n    (lvar :opts) :keys) :-\n  (array\n    (sym :only)\n    (sym :except)\n    (sym :pre_count)\n    (sym :reset_ids))) empty? ! ","(send\n  (send\n    (lvar :opts) :keys) :-\n  (array\n    (sym :only)\n    (sym :except)\n    (sym :pre_count)\n    (sym :reset_ids))) empty? ","opts [] ! ! ","opts [] ! "," Array flatten "," Array ","(send\n  (send\n    (lvar :opts) :keys) :-\n  (array\n    (sym :only)\n    (sym :except)\n    (sym :pre_count)\n    (sym :reset_ids)\n    (sym :cache_tables))) empty? ! ","(send\n  (send\n    (lvar :opts) :keys) :-\n  (array\n    (sym :only)\n    (sym :except)\n    (sym :pre_count)\n    (sym :reset_ids)\n    (sym :cache_tables))) empty? ","(or\n  (send\n    (lvar :opts) :[]\n    (sym :except))\n  (array)) dup  << "," Array flatten  << "]}," DatabaseCleaner Sequel Truncation migration_storage_name":{"type":"method","name":"migration_storage_name","children":[],"call":[]}," DatabaseCleaner Moped Truncation collections":{"type":"method","name":"collections","children":[],"call":["collection [] split ","collection [] "," session [] find to_a map "," session [] find to_a "," session [] find "," session [] "," session "," session use "," db "," db != "]}," DatabaseCleaner Moped Truncation clean":{"type":"method","name":"clean","children":[],"call":[" session [] drop "," session [] "," session ","@tables_to_exclude include? "," collections each "," collections ","@only include? ","c name "," session [] find remove_all "," session [] find "]}," DatabaseCleaner Mongoid Truncation session":{"type":"method","name":"session","children":[],"call":[" Mongoid  default_session "," Mongoid  default_client "," Mongoid VERSION  > "]}," DatabaseCleaner Generic Transaction initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","opts empty? ! ","opts empty? "]}," DatabaseCleaner Sequel Truncation migration_storage_names":{"type":"method","name":"migration_storage_names","children":[],"call":[]}," DatabaseCleaner Mongo TruncationMixin collections":{"type":"method","name":"collections","children":[],"call":["c name !~ ","c name "," database collections select "," database collections "," database "]}," DatabaseCleaner Mongo TruncationMixin clean":{"type":"method","name":"clean","children":[],"call":["c remove ","@tables_to_exclude include? ","c name "," collections each "," collections ","@only include? ","c send "," truncate_method_name "]}," DatabaseCleaner Mongo Truncation database":{"type":"method","name":"database","children":[],"call":[" db "]}," DatabaseCleaner Mongo Base db":{"type":"method","name":"db","children":[],"call":[" raise "]}," DatabaseCleaner Mongo Base db=":{"type":"method","name":"db=","children":[],"call":[]}," DatabaseCleaner Mongo available_strategies":{"type":"method","name":"available_strategies","children":[],"call":[]}," DatabaseCleaner Generic Truncation migration_storage_names":{"type":"method","name":"migration_storage_names","children":[],"call":[]}," DatabaseCleaner DataMapper Truncation migration_storage_names":{"type":"method","name":"migration_storage_names","children":[],"call":[]}," DatabaseCleaner add_cleaner":{"type":"method","name":"add_cleaner","children":[],"call":["@connections << ","@cleaners []= ","DatabaseCleaner Base  new "," init_cleaners ","@DatabaseCleaner Base  new s []= "," init_DatabaseCleaner Base  new s "]}," DatabaseCleaner init_cleaners":{"type":"method","name":"init_cleaners","children":[],"call":[]}," ActiveRecord Truncation reset_ids?":{"type":"method","name":"reset_ids?","children":[],"call":["@reset_ids != "]}," ActiveRecord Truncation pre_count?":{"type":"method","name":"pre_count?","children":[],"call":["@pre_count == "]}," ActiveRecord Truncation migration_storage_names":{"type":"method","name":"migration_storage_names","children":[],"call":[" ActiveRecord Migrator  schema_migrations_table_name "," DatabaseCleaner ActiveRecord Base  migration_table_name "]}," DatabaseCleaner ActiveRecord OracleEnhancedAdapter truncate_table":{"type":"method","name":"truncate_table","children":[],"call":[" execute "," quote_table_name "]}," DatabaseCleaner ActiveRecord PostgreSQLAdapter has_rows?":{"type":"method","name":"has_rows?","children":[],"call":[" select_value "]}," DatabaseCleaner ActiveRecord PostgreSQLAdapter has_been_used?":{"type":"method","name":"has_been_used?","children":[],"call":["cur_val > "," select_value to_i "," select_value "]}," DatabaseCleaner ActiveRecord PostgreSQLAdapter pre_count_truncate_tables":{"type":"method","name":"pre_count_truncate_tables","children":[],"call":[" truncate_tables ","tables select "," method ","options [] "]}," DatabaseCleaner ActiveRecord PostgreSQLAdapter truncate_tables":{"type":"method","name":"truncate_tables","children":[],"call":[" execute "," cascade "," restart_identity ","(send\n  (lvar :table_names) :map) join "," quote_table_name ","table_names map ","table_names empty? ","table_names nil? "]}," DatabaseCleaner ActiveRecord PostgreSQLAdapter truncate_table":{"type":"method","name":"truncate_table","children":[],"call":[" truncate_tables "]}," DatabaseCleaner ActiveRecord PostgreSQLAdapter restart_identity":{"type":"method","name":"restart_identity","children":[],"call":[" db_version >= "," db_version "]}," DatabaseCleaner ActiveRecord PostgreSQLAdapter cascade":{"type":"method","name":"cascade","children":[],"call":[" db_version >= "," db_version "]}," DatabaseCleaner ActiveRecord PostgreSQLAdapter db_version":{"type":"method","name":"db_version","children":[],"call":[" postgresql_version "]}," DatabaseCleaner ActiveRecord TruncateOrDelete truncate_table":{"type":"method","name":"truncate_table","children":[],"call":[" execute "," quote_table_name "]}," DatabaseCleaner ActiveRecord SQLiteAdapter delete_table":{"type":"method","name":"delete_table","children":[],"call":[" execute "," quote_table_name "," uses_sequence "]}," DatabaseCleaner ActiveRecord IBM_DBAdapter truncate_table":{"type":"method","name":"truncate_table","children":[],"call":[" execute "," quote_table_name "]}," DatabaseCleaner ActiveRecord MysqlAdapter has_rows?":{"type":"method","name":"has_rows?","children":[],"call":[" row_count > "," row_count "]}," DatabaseCleaner ActiveRecord MysqlAdapter has_been_used?":{"type":"method","name":"has_been_used?","children":[],"call":[" select_value > "," select_value "," row_count > "," row_count "," select_value to_i > "," select_value to_i "]}," DatabaseCleaner ActiveRecord MysqlAdapter row_count":{"type":"method","name":"row_count","children":[],"call":[" select_value "," quote_table_name "," select_value to_i "]}," DatabaseCleaner ActiveRecord MysqlAdapter pre_count_truncate_tables":{"type":"method","name":"pre_count_truncate_tables","children":[],"call":[" truncate_tables ","tables select "," method ","options [] "]}," DatabaseCleaner ActiveRecord MysqlAdapter truncate_tables":{"type":"method","name":"truncate_tables","children":[],"call":[" truncate_table ","tables each "]}," DatabaseCleaner ActiveRecord MysqlAdapter truncate_table":{"type":"method","name":"truncate_table","children":[],"call":[" execute "," quote_table_name "]}," DatabaseCleaner ActiveRecord AbstractAdapter truncate_tables":{"type":"method","name":"truncate_tables","children":[],"call":[" truncate_table ","tables each "]}," DatabaseCleaner ActiveRecord AbstractAdapter truncate_table":{"type":"method","name":"truncate_table","children":[],"call":[" raise "]}," DatabaseCleaner ActiveRecord AbstractAdapter database_cleaner_table_cache":{"type":"method","name":"database_cleaner_table_cache","children":[],"call":[" tables "]}," DatabaseCleaner ActiveRecord AbstractAdapter database_cleaner_view_cache":{"type":"method","name":"database_cleaner_view_cache","children":[],"call":[" select_values "," current_database "]}," DatabaseCleaner ActiveRecord Base establish_connection":{"type":"method","name":"establish_connection","children":[],"call":["strategy_class send "," connection_hash "," create_connection_class "," ActiveRecord Base  establish_connection "," create_connection_class  send "]}," DatabaseCleaner ActiveRecord Base lookup_from_connection_pool":{"type":"method","name":"lookup_from_connection_pool","children":[],"call":["m connection_pool spec config [] == ","m connection_pool spec config [] ","m connection_pool spec config ","m connection_pool spec ","m connection_pool ","models detect "," ActiveRecord Base  descendants "," connection_hash [] "," connection_hash "," ActiveRecord Base  respond_to? "," ActiveRecord Base  descendants  detect "]}," DatabaseCleaner ActiveRecord Base connection_class":{"type":"method","name":"connection_class","children":[],"call":[" establish_connection "," lookup_from_connection_pool "," connection_hash "," connection_hash nil? ","@db nil? ","@db == ","@db is_a? ! ","@db is_a? "," db "," db is_a? ! "," db is_a? "]}," DatabaseCleaner ActiveRecord Base create_connection_class":{"type":"method","name":"create_connection_class","children":[],"call":["Class  new "]}," DatabaseCleaner ActiveRecord SQLiteAdapter uses_sequence":{"type":"method","name":"uses_sequence","children":[],"call":[" select_value "]}," ActiveRecord Transaction connection_maintains_transaction_count?":{"type":"method","name":"connection_maintains_transaction_count?","children":[],"call":["ActiveRecord VERSION MAJOR  < "]}," DatabaseCleaner Redis Truncation clean":{"type":"method","name":"clean","children":[],"call":[" connection quit "," connection "," url == "," url "," connection flushdb "," connection del ","keys_except include? "," connection keys each "," connection keys ","@tables_to_exclude each ","@only each "]}," DatabaseCleaner Redis Base connection":{"type":"method","name":"connection","children":[],"call":[" Redis  connect "," url "," url == "," Redis  new "," db "," db class is_a? "," db class "," db is_a? "]}," DatabaseCleaner Redis Base db":{"type":"method","name":"db","children":[],"call":[]}," DatabaseCleaner Redis Base db=":{"type":"method","name":"db=","children":[],"call":[]}," DatabaseCleaner Redis available_strategies":{"type":"method","name":"available_strategies","children":[],"call":[]}," DatabaseCleaner Ohm Truncation default_redis":{"type":"method","name":"default_redis","children":[],"call":[" Ohm  redis "]}," DatabaseCleaner Moped TruncationBase collections":{"type":"method","name":"collections","children":[],"call":["collection [] split ","collection [] "," session [] find to_a map "," session [] find to_a "," session [] find "," session [] "," session "," session use "," db "," db != "," session command [] [] map "," session command [] [] "," session command [] "," session command "," db_version split first to_i >= "," db_version split first to_i "," db_version split first "," db_version split "," db_version "]}," DatabaseCleaner Moped TruncationBase clean":{"type":"method","name":"clean","children":[],"call":[" session [] find remove_all "," session [] find "," session [] "," session ","@tables_to_exclude include? "," collections each "," collections ","@only include? "]}," DatabaseCleaner Moped Base session":{"type":"method","name":"session","children":[],"call":[" Moped Session  new "," db "," host "]}," DatabaseCleaner Moped Base host":{"type":"method","name":"host","children":[],"call":[]}," DatabaseCleaner Moped Base host_port=":{"type":"method","name":"host_port=","children":[],"call":[]}," DatabaseCleaner Moped Base db":{"type":"method","name":"db","children":[],"call":[]}," DatabaseCleaner Moped Base db=":{"type":"method","name":"db=","children":[],"call":[]}," DatabaseCleaner Moped available_strategies":{"type":"method","name":"available_strategies","children":[],"call":[]}," DatabaseCleaner Base set_strategy_db":{"type":"method","name":"set_strategy_db","children":[],"call":[" raise ","desired_db != ","strategy db= ","strategy respond_to? ","DatabaseCleaner  deprecate "," called_externally? "," caller ","DatabaseCleaner  called_externally? "]}," DatabaseCleaner can_detect_orm?":{"type":"method","name":"can_detect_orm?","children":[],"call":["DatabaseCleaner Base  autodetect_orm ","DatabaseCleaner  deprecate "]}," DatabaseCleaner Base autodetect_orm":{"type":"method","name":"autodetect_orm","children":[],"call":["@orm_autodetector orm ","DatabaseCleaner  deprecate "]}," DataMapper Adapters SqliteAdapter uses_sequence?":{"type":"method","name":"uses_sequence?","children":[],"call":[" select first "," select "]}," DataMapper Adapters Sqlite3Adapter uses_sequence?":{"type":"method","name":"uses_sequence?","children":[],"call":[" select first "," select "]}," ActiveRecord Truncation cache_tables?":{"type":"method","name":"cache_tables?","children":[],"call":["@cache_tables ! ! ","@cache_tables ! "]}," DatabaseCleaner ConnectionAdapters PostgreSQLAdapter has_rows?":{"type":"method","name":"has_rows?","children":[],"call":[" select_value "]}," DatabaseCleaner ConnectionAdapters PostgreSQLAdapter has_been_used?":{"type":"method","name":"has_been_used?","children":[],"call":["cur_val > "," select_value to_i "," select_value "," has_rows? "," has_sequence? "]}," DatabaseCleaner ConnectionAdapters PostgreSQLAdapter pre_count_truncate_tables":{"type":"method","name":"pre_count_truncate_tables","children":[],"call":[" truncate_tables ","tables select "," method ","options [] "]}," DatabaseCleaner ConnectionAdapters PostgreSQLAdapter truncate_tables":{"type":"method","name":"truncate_tables","children":[],"call":[" execute "," cascade "," restart_identity ","(send\n  (lvar :table_names) :map) join "," quote_table_name ","table_names map ","table_names empty? ","table_names nil? "]}," DatabaseCleaner ConnectionAdapters PostgreSQLAdapter truncate_table":{"type":"method","name":"truncate_table","children":[],"call":[" truncate_tables "]}," DatabaseCleaner ConnectionAdapters PostgreSQLAdapter restart_identity":{"type":"method","name":"restart_identity","children":[],"call":[" db_version >= "," db_version "]}," DatabaseCleaner ConnectionAdapters PostgreSQLAdapter cascade":{"type":"method","name":"cascade","children":[],"call":[" db_version >= "," db_version "]}," DatabaseCleaner ConnectionAdapters PostgreSQLAdapter db_version":{"type":"method","name":"db_version","children":[],"call":[" postgresql_version "]}," DatabaseCleaner ConnectionAdapters OracleEnhancedAdapter truncate_table":{"type":"method","name":"truncate_table","children":[],"call":[" execute "," quote_table_name "]}," DatabaseCleaner ConnectionAdapters TruncateOrDelete truncate_table":{"type":"method","name":"truncate_table","children":[],"call":[" execute "," quote_table_name "]}," DatabaseCleaner ConnectionAdapters SQLiteAdapter uses_sequence":{"type":"method","name":"uses_sequence","children":[],"call":[" select_value "]}," DatabaseCleaner ConnectionAdapters SQLiteAdapter truncate_tables":{"type":"method","name":"truncate_tables","children":[],"call":[" truncate_table ","tables each "]}," DatabaseCleaner ConnectionAdapters SQLiteAdapter delete_table":{"type":"method","name":"delete_table","children":[],"call":[" execute "," uses_sequence "," quote_table_name "]}," DatabaseCleaner ConnectionAdapters IBM_DBAdapter truncate_table":{"type":"method","name":"truncate_table","children":[],"call":[" execute "," quote_table_name "]}," DatabaseCleaner ConnectionAdapters AbstractMysqlAdapter has_rows?":{"type":"method","name":"has_rows?","children":[],"call":[" row_count > "," row_count "]}," DatabaseCleaner ConnectionAdapters AbstractMysqlAdapter has_been_used?":{"type":"method","name":"has_been_used?","children":[],"call":[" select_value to_i > "," select_value to_i "," select_value "," has_rows? "]}," DatabaseCleaner ConnectionAdapters AbstractMysqlAdapter row_count":{"type":"method","name":"row_count","children":[],"call":[" select_value to_i "," select_value "," quote_table_name "]}," DatabaseCleaner ConnectionAdapters AbstractMysqlAdapter pre_count_truncate_tables":{"type":"method","name":"pre_count_truncate_tables","children":[],"call":[" truncate_tables ","tables select "," method ","options [] "]}," DatabaseCleaner ConnectionAdapters AbstractMysqlAdapter truncate_tables":{"type":"method","name":"truncate_tables","children":[],"call":[" truncate_table ","tables each "]}," DatabaseCleaner ConnectionAdapters AbstractMysqlAdapter truncate_table":{"type":"method","name":"truncate_table","children":[],"call":[" execute "," quote_table_name "]}," DatabaseCleaner ConnectionAdapters AbstractAdapter truncate_tables":{"type":"method","name":"truncate_tables","children":[],"call":[" truncate_table ","tables each "]}," DatabaseCleaner ConnectionAdapters AbstractAdapter truncate_table":{"type":"method","name":"truncate_table","children":[],"call":[" raise "]}," DatabaseCleaner ConnectionAdapters AbstractAdapter database_cleaner_table_cache":{"type":"method","name":"database_cleaner_table_cache","children":[],"call":[" tables "," data_sources "," ActiveRecord VERSION MAJOR  >= "]}," DatabaseCleaner ConnectionAdapters AbstractAdapter database_cleaner_view_cache":{"type":"method","name":"database_cleaner_view_cache","children":[],"call":[" select_values "," current_database "]}," DatabaseCleaner ConnectionAdapters GenericDeleteAdapter delete_table":{"type":"method","name":"delete_table","children":[],"call":[" execute "," quote_table_name "]}," DatabaseCleaner ConnectionAdapters AbstractDeleteAdapter delete_table":{"type":"method","name":"delete_table","children":[],"call":[" raise "]}," DatabaseCleaner Sequel Transaction cleaning":{"type":"method","name":"cleaning","children":[],"call":[" db transaction "," db "]}," DatabaseCleaner Sequel Transaction check_fiber_brokenness":{"type":"method","name":"check_fiber_brokenness","children":[],"call":[]}," DatabaseCleaner Generic Base cleaning":{"type":"method","name":"cleaning","children":[],"call":[" clean "," start "]}," DataMapper Adapters PostgresAdapter truncate_tables":{"type":"method","name":"truncate_tables","children":[],"call":[" execute ","(send\n  (lvar :table_names) :collect) join "," quote_name ","table_names collect "]}," DataMapper Adapters DataObjectsAdapter truncate_tables":{"type":"method","name":"truncate_tables","children":[],"call":[" adapter truncate_table "," adapter ","table_names each "," truncate_table "]}," DatabaseCleaner cleaning":{"type":"method","name":"cleaning","children":[],"call":["(send\n  (send nil :connections) :inject\n  (lvar :inner_block)) call ","connection cleaning "," proc "," connections inject "," connections "]}," DatabaseCleaner Base cleaning":{"type":"method","name":"cleaning","children":[],"call":[" strategy cleaning "," strategy "]}," DatabaseCleaner ConnectionAdapters OracleAdapter truncate_table":{"type":"method","name":"truncate_table","children":[],"call":[" execute "," quote_table_name "]}," DatabaseCleaner ConnectionAdapters OracleDeleteAdapter delete_table":{"type":"method","name":"delete_table","children":[],"call":[" execute "," quote_table_name "]}," DatabaseCleaner Sequel Truncation pre_count?":{"type":"method","name":"pre_count?","children":[],"call":["@pre_count == "]}," DatabaseCleaner Sequel Truncation txid":{"type":"method","name":"txid","children":[],"call":[" db fetch first [] "," db fetch first "," db fetch "," db "," db database_type "]}," DatabaseCleaner Sequel Truncation dirty?":{"type":"method","name":"dirty?","children":[],"call":["@last_txid nil? ","@last_txid != "," txid "]}," DatabaseCleaner Sequel Truncation truncate_tables":{"type":"method","name":"truncate_tables","children":[],"call":["db [] truncate ","db [] ","table to_sym ","tables each "]}," DatabaseCleaner Sequel Truncation pre_count_truncate_tables":{"type":"method","name":"pre_count_truncate_tables","children":[],"call":[" truncate_tables ","db [] count == ","db [] count ","db [] ","table to_sym ","tables reject "]}," DatabaseCleaner Sequel Truncation start":{"type":"method","name":"start","children":[],"call":[" txid "]}," Sequel Deletion clean":{"type":"method","name":"clean","children":[],"call":[" delete_tables "," db "," disable_referential_integrity "," db transaction "," tables_to_truncate "," dirty? "," delete_ tables_to_truncate  ","  tables_to_truncate _to_truncate "]}," Sequel Deletion delete_tables":{"type":"method","name":"delete_tables","children":[],"call":["db [] delete ","db [] ","table to_sym ","tables each "]}," Sequel Deletion disable_referential_integrity":{"type":"method","name":"disable_referential_integrity","children":[],"call":[" db run "," db ","tables each "," db database_type "," db fetch first [] "," db fetch first "," db fetch "," tables_to_truncate each "," tables_to_truncate "]}," DatabaseCleaner Neo4j Transaction rollback":{"type":"method","name":"rollback","children":[],"call":[" tx= "," tx close "," tx "," tx failure "]}," DatabaseCleaner Neo4j Transaction clean":{"type":"method","name":"clean","children":[],"call":[" rollback "]}," DatabaseCleaner Neo4j Transaction start":{"type":"method","name":"start","children":[],"call":[" tx= "," Neo4j Transaction  new "," rollback "]}," DatabaseCleaner Neo4j Deletion clean":{"type":"method","name":"clean","children":[],"call":[" session _query "," session "," Neo4j Transaction  run "]}," DatabaseCleaner Neo4j Base session":{"type":"method","name":"session","children":[],"call":[" Neo4j Session  open "," db_path "," db_type "," db_params "]}," DatabaseCleaner Neo4j Base db_path":{"type":"method","name":"db_path","children":[],"call":[" database [] "," database "]}," DatabaseCleaner Neo4j Base db_type":{"type":"method","name":"db_type","children":[],"call":[" database [] "," database "]}," DatabaseCleaner Neo4j Base default_db_path":{"type":"method","name":"default_db_path","children":[],"call":["type == "]}," DatabaseCleaner Neo4j Base default_db_type":{"type":"method","name":"default_db_type","children":[],"call":[]}," DatabaseCleaner Neo4j Base default_db":{"type":"method","name":"default_db","children":[],"call":[" default_db_path "," default_db_type "]}," DatabaseCleaner Neo4j Base database":{"type":"method","name":"database","children":[],"call":[" default_db "," default_db merge "," db "]}," DatabaseCleaner Neo4j Base start":{"type":"method","name":"start","children":[],"call":[" session "," session start "," session running? ! "," session running? "," db_type == "," db_type "]}," DatabaseCleaner Neo4j Base db":{"type":"method","name":"db","children":[],"call":[]}," DatabaseCleaner Neo4j Base db=":{"type":"method","name":"db=","children":[],"call":["desired_db == "]}," DatabaseCleaner Neo4j available_strategies":{"type":"method","name":"available_strategies","children":[],"call":[]}," DatabaseCleaner Mongo Truncation not_caching":{"type":"method","name":"not_caching","children":[],"call":[" puts ","@@not_caching []= ","@@not_caching has_key? "]}," DatabaseCleaner Mongo Truncation mongoid_collection_names":{"type":"method","name":"mongoid_collection_names","children":[],"call":["names [] << ","klass collection_name ","names [] ","klass db name ","klass db ","klass collection_name empty? ","klass embedded ","klass ancestors include? ","klass ancestors ","ObjectSpace  each_object ","(send\n  (const nil :Hash) :new) tap ","h []= ","Hash  new ","klass ancestors map include? ","klass ancestors map "," valid_collection_name? "]}," DatabaseCleaner Mongo Truncation collections_cache":{"type":"method","name":"collections_cache","children":[],"call":[]}," DataMapper Adapters SqliteAdapterMethods uses_sequence?":{"type":"method","name":"uses_sequence?","children":[],"call":[" select first "," select "]}," DataMapper Adapters SqliteAdapterMethods disable_referential_integrity":{"type":"method","name":"disable_referential_integrity","children":[],"call":[]}," DataMapper Adapters SqliteAdapterMethods truncate_table":{"type":"method","name":"truncate_table","children":[],"call":[" execute "," uses_sequence? "," quote_name "]}," DataMapper Adapters SqliteAdapterMethods storage_names":{"type":"method","name":"storage_names","children":[],"call":[" select "]}," DatabaseCleaner ConnectionAdapters PostgreSQLAdapter tables_with_schema":{"type":"method","name":"tables_with_schema","children":[],"call":["result first ","rows collect "," select_rows "," ActiveRecord Migrator  schema_migrations_table_name "," DatabaseCleaner ActiveRecord Base  migration_table_name "," DatabaseCleaner ActiveRecord Base  exclusion_condition "," select_rows  collect "," select_ select_rows  "]}," DatabaseCleaner ConnectionAdapters PostgreSQLAdapter has_sequence?":{"type":"method","name":"has_sequence?","children":[],"call":[" select_value "]}," DatabaseCleaner ConnectionAdapters PostgreSQLAdapter database_cleaner_table_cache":{"type":"method","name":"database_cleaner_table_cache","children":[],"call":[" tables_with_schema "]}," ActiveRecord SelectiveTruncation information_schema_exists?":{"type":"method","name":"information_schema_exists?","children":[],"call":["connection execute ","connection is_a? "]}," ActiveRecord SelectiveTruncation tables_with_new_rows":{"type":"method","name":"tables_with_new_rows","children":[],"call":["(send\n  (lvar :result) :map) - ","row [] ","result map ","connection execute ","connection instance_variable_get [] ","connection instance_variable_get ","connection exec_query ","all << ","stat [] ","stat [] > ","connection exec_query inject ","stats != "," table_stats_query ","(send\n  (lvar :connection execute ) :map) - ","(send\n  (lvar :connection exec_query ) :map) - ","connection execute  map ","connection exec_query  map "," table_stats_query  != "," table_ table_stats_query _query "]}," ActiveRecord SelectiveTruncation tables_to_truncate":{"type":"method","name":"tables_to_truncate","children":[],"call":["(or\n  (ivar :@only)\n  (send nil :tables_with_new_rows\n    (lvar :connection))) - "," tables_with_new_rows "," information_schema_exists? "]}," DatabaseCleaner ActiveRecord Base valid_config":{"type":"method","name":"valid_config","children":[],"call":[" ActiveRecord Base  configurations ","connection_file != "," ActiveRecord Base  configurations empty? ! "," ActiveRecord Base  configurations empty? "," ActiveRecord Base  configurations nil? ! "," ActiveRecord Base  configurations nil? "]}," DatabaseCleaner Neo4j Base db_params":{"type":"method","name":"db_params","children":[],"call":["(sym :type) include? "," database reject! "," database "]}," DatabaseCleaner Moped Base db_version":{"type":"method","name":"db_version","children":[],"call":[" session command [] "," session command "," session "]}," DatabaseCleaner Mongo Truncation valid_collection_name?":{"type":"method","name":"valid_collection_name?","children":[],"call":["klass collection_name empty? ! ","klass collection_name empty? ","klass collection_name ","klass embedded ! ","klass embedded ","klass ancestors map include? ","klass ancestors map ","klass ancestors "]}," DatabaseCleaner Mongo2 TruncationMixin collections":{"type":"method","name":"collections","children":[],"call":["collection [] split ","collection [] "," database [] find to_a map "," database [] find to_a "," database [] find "," database [] "," database "," database use "," db "," db != ","c namespace split [] ","c namespace split ","c namespace "," database collections collect "," database collections "]}," DatabaseCleaner Mongo2 TruncationMixin database":{"type":"method","name":"database","children":[],"call":[" Mongoid Clients  with_name "," Mongoid Clients  default ","@db == ","@db nil? "]}," DatabaseCleaner Mongo2 TruncationMixin clean":{"type":"method","name":"clean","children":[],"call":[" database [] find delete_many "," database [] find "," database [] "," database ","@tables_to_exclude include? "," collections each "," collections ","@only include? "]}," DatabaseCleaner Mongo2 Base db":{"type":"method","name":"db","children":[],"call":[" raise "]}," DatabaseCleaner Mongo2 Base db=":{"type":"method","name":"db=","children":[],"call":[]}," DatabaseCleaner Mongo2 available_strategies":{"type":"method","name":"available_strategies","children":[],"call":[]}," DatabaseCleaner Mongo TruncationMixin truncate_method_name":{"type":"method","name":"truncate_method_name","children":[],"call":[]}," DatabaseCleaner Base <=>":{"type":"method","name":"<=>","children":[],"call":[" orm <=> ","other orm "," orm "," db <=> ","other db "," db ","(send\n  (send\n    (self) :orm) :<=>\n  (send\n    (lvar :other) :orm)) == ","(send nil :orm) <=> "]}," DatabaseCleaner NullStrategy cleaning":{"type":"method","name":"cleaning","children":[],"call":[]}," ActiveRecord SelectiveTruncation table_stats_query":{"type":"method","name":"table_stats_query","children":[],"call":["connection select_values join ","connection select_values "," migration_table_name ","@table_stats_query nil? ! ","@table_stats_query nil? "," DatabaseCleaner ActiveRecord Base  migration_table_name "," DatabaseCleaner ActiveRecord Base  exclusion_condition ","queries join ","connection quote_table_name ","connection quote ","tables map ","connection select_values join  nil? ! ","queries join  nil? ! ","connection select_values join  nil? ","queries join  nil? ","connection select_values  map "]}," DatabaseCleaner ActiveRecord Base migration_table_name":{"type":"method","name":"migration_table_name","children":[],"call":[]}," DatabaseCleaner ActiveRecord Base exclusion_condition":{"type":"method","name":"exclusion_condition","children":[],"call":[]}," DatabaseCleaner Safeguard run":{"type":"method","name":"run","children":[],"call":["const new run ","const new ","CHECKS  each "]}," DatabaseCleaner Safeguard Production skip?":{"type":"method","name":"skip?","children":[],"call":["DatabaseCleaner  allow_production ","ENV  [] "]}," DatabaseCleaner Safeguard Production key":{"type":"method","name":"key","children":[],"call":["ENV  [] == ","ENV  [] ","KEYS  detect "]}," DatabaseCleaner Safeguard Production given?":{"type":"method","name":"given?","children":[],"call":[" key ! ! "," key ! "," key "]}," DatabaseCleaner Safeguard Production run":{"type":"method","name":"run","children":[],"call":[" raise ","Error ProductionEnv  new "," key "," given? "," skip? ! "," skip? "]}," DatabaseCleaner Safeguard RemoteDatabaseUrl skip?":{"type":"method","name":"skip?","children":[],"call":["DatabaseCleaner  allow_remote_database_url ","ENV  [] ","DatabaseCleaner  url_whitelist "]}," DatabaseCleaner Safeguard RemoteDatabaseUrl remote?":{"type":"method","name":"remote?","children":[],"call":["(send\n  (const nil :LOCAL) :any?) ! ","url include? ","LOCAL  any? ","host end_with? ","LOCAL  include? ","parsed host ","parsed scheme == ","parsed scheme ","URI  parse ","parsed host  end_with? ","parsed parsed host  ","URI  parse  host ","URI  parse  scheme == ","URI  parse  scheme "]}," DatabaseCleaner Safeguard RemoteDatabaseUrl given?":{"type":"method","name":"given?","children":[],"call":[" remote? ","ENV  [] "]}," DatabaseCleaner Safeguard RemoteDatabaseUrl run":{"type":"method","name":"run","children":[],"call":[" raise "," given? "," skip? ! "," skip? "]}," DatabaseCleaner Safeguard Error ProductionEnv initialize":{"type":"method","name":"initialize","children":[],"call":[]}," DatabaseCleaner Safeguard Error RemoteDatabaseUrl initialize":{"type":"method","name":"initialize","children":[],"call":[]}," DatabaseCleaner configuration":{"type":"method","name":"configuration","children":[],"call":["Configuration  new "]}," DatabaseCleaner Spec DatabaseHelper default_config":{"type":"method","name":"default_config","children":[],"call":[" db_config [] "," db to_s "," db "," db_config "]}," DatabaseCleaner Spec DatabaseHelper db_config":{"type":"method","name":"db_config","children":[],"call":["YAML  load ","IO  read "]}," DatabaseCleaner Spec DatabaseHelper drop_db":{"type":"method","name":"drop_db","children":[],"call":[" connection execute "," default_config [] "," default_config "," connection "," db == "," db ","File  unlink "," db_config [] [] "," db_config [] "," db_config "]}," DatabaseCleaner Spec DatabaseHelper load_schema":{"type":"method","name":"load_schema","children":[],"call":[" connection execute "," connection "]}," DatabaseCleaner Spec DatabaseHelper create_db":{"type":"method","name":"create_db","children":[],"call":[" connection execute "," default_config [] "," default_config "," connection "," establish_connection "," default_config merge "," db == "," db "]}," DatabaseCleaner Spec DatabaseHelper establish_connection":{"type":"method","name":"establish_connection","children":[],"call":[" raise "]}," DatabaseCleaner Spec DatabaseHelper teardown":{"type":"method","name":"teardown","children":[],"call":[" drop_db "]}," DatabaseCleaner Spec DatabaseHelper setup":{"type":"method","name":"setup","children":[],"call":[" load_schema "," establish_connection "," create_db "]}," DatabaseCleaner Spec DatabaseHelper with_all_dbs":{"type":"method","name":"with_all_dbs","children":[],"call":[]}," DatabaseCleaner Safeguard WhitelistedUrl skip?":{"type":"method","name":"skip?","children":[],"call":["DatabaseCleaner  url_whitelist ! ","DatabaseCleaner  url_whitelist "]}," DatabaseCleaner Safeguard WhitelistedUrl database_url_not_whitelisted?":{"type":"method","name":"database_url_not_whitelisted?","children":[],"call":["DatabaseCleaner  url_whitelist include? ! ","DatabaseCleaner  url_whitelist include? ","ENV  [] ","DatabaseCleaner  url_whitelist "]}," DatabaseCleaner Safeguard WhitelistedUrl run":{"type":"method","name":"run","children":[],"call":[" raise "," database_url_not_whitelisted? "," skip? "]}," DatabaseCleaner Safeguard Error NotWhitelistedUrl initialize":{"type":"method","name":"initialize","children":[],"call":[]}," DatabaseCleaner ORMAutodetector no_orm_detected_error":{"type":"method","name":"no_orm_detected_error","children":[],"call":["NoORMDetected  new ","ORMS  join sub ","ORMS  last ","ORMS  join ","ORMS  values join sub ","ORMS  values last ","ORMS  values ","ORMS  values join "]}," DatabaseCleaner ORMAutodetector autodetected_orm":{"type":"method","name":"autodetected_orm","children":[],"call":["Kernel  const_get ","ORMS  find ","ORMS  values find ","ORMS  values "]}," DatabaseCleaner ORMAutodetector autodetected?":{"type":"method","name":"autodetected?","children":[],"call":["@autodetected ! ! ","@autodetected ! "]}," DatabaseCleaner ORMAutodetector orm":{"type":"method","name":"orm","children":[],"call":[" autodetected_orm underscore to_sym "," autodetected_orm underscore "," autodetected_orm "," raise "," no_orm_detected_error ","ORMS  key "," autodetected_orm to_s "]}," DatabaseCleaner Deprecator deprecate":{"type":"method","name":"deprecate","children":[],"call":["@methods_already_warned []= ","$stderr puts ","@methods_already_warned key? "]}," DatabaseCleaner Deprecator initialize":{"type":"method","name":"initialize","children":[],"call":[]}," DatabaseCleaner deprecate":{"type":"method","name":"deprecate","children":[],"call":["@@deprecator deprecate ","Deprecator  new "," caller first [] to_sym "," caller first [] "," caller first "," caller "]}," DatabaseCleaner Configuration called_externally?":{"type":"method","name":"called_externally?","children":[],"call":["(string) != ","caller first split first ","caller first split ","caller first "]}," DatabaseCleaner Configuration remove_duplicates":{"type":"method","name":"remove_duplicates","children":[],"call":["@cleaners remove_duplicates ","DatabaseCleaner  deprecate "," called_externally? "," caller ","DatabaseCleaner  called_externally? "]}," DatabaseCleaner Configuration add_cleaner":{"type":"method","name":"add_cleaner","children":[],"call":["@cleaners add_cleaner ","DatabaseCleaner  deprecate "," called_externally? "," caller ","DatabaseCleaner  called_externally? "]}," DatabaseCleaner Configuration connections":{"type":"method","name":"connections","children":[],"call":["@cleaners values "," add_cleaner ","@cleaners none? ","DatabaseCleaner  deprecate "," called_externally? "," caller ","DatabaseCleaner  called_externally? "]}," DatabaseCleaner Configuration init_cleaners":{"type":"method","name":"init_cleaners","children":[],"call":["DatabaseCleaner  deprecate "]}," DatabaseCleaner Configuration clean_with!":{"type":"method","name":"clean_with!","children":[],"call":[" clean_with ","DatabaseCleaner  deprecate "]}," DatabaseCleaner Configuration clean!":{"type":"method","name":"clean!","children":[],"call":[" clean ","DatabaseCleaner  deprecate "]}," DatabaseCleaner Configuration clean_with":{"type":"method","name":"clean_with","children":[],"call":["connection clean_with "," connections each "," connections "]}," DatabaseCleaner Configuration cleaning":{"type":"method","name":"cleaning","children":[],"call":["(send\n  (send nil :connections) :inject\n  (lvar :inner_block)) call ","connection cleaning "," proc "," connections inject "," connections "]}," DatabaseCleaner Configuration clean":{"type":"method","name":"clean","children":[],"call":["connection clean "," connections each "," connections "]}," DatabaseCleaner Configuration start":{"type":"method","name":"start","children":[],"call":["connection start "," connections each "," connections "]}," DatabaseCleaner Configuration logger=":{"type":"method","name":"logger=","children":[],"call":["DatabaseCleaner  deprecate "]}," DatabaseCleaner Configuration logger":{"type":"method","name":"logger","children":[],"call":["l level= ","Logger  new tap ","Logger  new ","DatabaseCleaner  deprecate "]}," DatabaseCleaner Configuration app_root=":{"type":"method","name":"app_root=","children":[],"call":["DatabaseCleaner  deprecate "]}," DatabaseCleaner Configuration app_root":{"type":"method","name":"app_root","children":[],"call":["Dir  pwd ","DatabaseCleaner  deprecate "]}," DatabaseCleaner Configuration initialize":{"type":"method","name":"initialize","children":[],"call":["Cleaners  new "]}," DatabaseCleaner Cleaners remove_duplicates":{"type":"method","name":"remove_duplicates","children":[],"call":[" replace ","cleaners []= ","cleaners values include? ","cleaners values "," reduce ","Cleaners  new "]}," DatabaseCleaner Cleaners add_cleaner":{"type":"method","name":"add_cleaner","children":[],"call":[" []= "," DatabaseCleaner Base  new "]}," DatabaseCleaner Cleaners orm=":{"type":"method","name":"orm=","children":[],"call":[" remove_duplicates ","cleaner orm= "," values each "," values "," add_cleaner "," none? ","DatabaseCleaner  deprecate "]}," DatabaseCleaner Cleaners strategy=":{"type":"method","name":"strategy=","children":[],"call":[" remove_duplicates ","cleaner strategy= "," values each "," values "," add_cleaner "," none? "]}," DatabaseCleaner Cleaners []":{"type":"method","name":"[]","children":[],"call":[" add_cleaner "," fetch "," raise "]}," DatabaseCleaner Base called_externally?":{"type":"method","name":"called_externally?","children":[],"call":["(string) != ","caller first split first ","caller first split ","caller first "]}," DatabaseCleaner Base require_orm_strategy":{"type":"method","name":"require_orm_strategy","children":[],"call":[" raise "," orm_module available_strategies join "," orm_module available_strategies "," orm_module "," require ","$LOAD_PATH unshift ","File  expand_path ","File  dirname "]}," DatabaseCleaner Base clean_with!":{"type":"method","name":"clean_with!","children":[],"call":[" clean_with ","DatabaseCleaner  deprecate "]}," DatabaseCleaner Base clean!":{"type":"method","name":"clean!","children":[],"call":[" clean ","DatabaseCleaner  deprecate "]}," DatabaseCleaner Base load_adapter":{"type":"method","name":"load_adapter","children":[],"call":[" require ","$LOAD_PATH unshift ","File  expand_path ","File  dirname "]}," DatabaseCleaner Base adapter_loaded?":{"type":"method","name":"adapter_loaded?","children":[],"call":["$LOADED_FEATURES grep any? ","$LOADED_FEATURES grep "]}," DatabaseCleaner called_externally?":{"type":"method","name":"called_externally?","children":[],"call":["file != ","caller first [] ","caller first "]}}