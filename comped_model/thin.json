{" Transat Parser parse_and_execute":{"type":"method","name":"parse_and_execute","children":[],"call":[" exit ","$stderr puts "," usage ","$! command ","$! respond_to? ","$! message "," puts "," version "," program_name "," execute "," parse "]}," Transat Parser version":{"type":"method","name":"version","children":[],"call":["value join ","value respond_to? "]}," Transat Parser program_name":{"type":"method","name":"program_name","children":[],"call":[]}," Transat Parser command_options_summary":{"type":"method","name":"command_options_summary","children":[],"call":["message << ","opt summarize ","@option_parser summary_indent ","@option_parser summary_width - ","@option_parser summary_width ","valid_options include? ","opt long to_s ","opt long ","@option_parser top list each ","@option_parser top list ","@option_parser top ","opt to_s tr ","opt to_s ","(or\n  (send\n    (lvar :command) :[]\n    (sym :valid_options))\n  (array)) collect ","command [] "]}," Transat Parser usage":{"type":"method","name":"usage","children":[],"call":["(send\n  (lvar :message) :map) join ","line chomp ","message map ","message << ","command_klass aliases join ","command_klass aliases ","command_klass respond_to? ","options [] ","@commands sort each ","@commands sort "," program_name downcase "," program_name "," command_options_summary ","@commands [] ","command_klass detailed_help ","command_klass help ","@commands [] [] ","options []  aliases join ","@commands [] []  aliases join ","options []  aliases ","@commands [] []  aliases ","options []  respond_to? ","@commands [] []  respond_to? ","options []  detailed_help ","@commands [] []  detailed_help ","options []  help ","@commands [] []  help "]}," Transat Parser execute":{"type":"method","name":"execute","children":[],"call":[" raise ","UnknownCommand  new ","command_klass new run ","command_klass new ","aliases include? ","valid_options []= ","options [] include? ","options [] ","@received_options each_pair ","command_klass aliases ","command_klass respond_to? ","@commands each ","options []  new run ","options []  new ","options []  aliases ","options []  respond_to? "]}," Transat Parser parse":{"type":"method","name":"parse","children":[],"call":[" raise ","non_options shift ","@option_parser parse ","@option_parser parse  shift "]}," Transat Parser help":{"type":"method","name":"help","children":[],"call":[]}," Transat Parser command":{"type":"method","name":"command","children":[],"call":["@commands []= ","options merge ","name to_s "]}," Transat Parser option":{"type":"method","name":"option","children":[],"call":[" raise ","@option_parser on_tail ","@received_options []= ","@option_parser on ","opt_args compact ","options [] ","opt_args << ","options has_key? ","options [] inspect ","@valid_options << ","options []= ","name to_s gsub ","name to_s "]}," Transat Parser initialize":{"type":"method","name":"initialize","children":[],"call":[" instance_eval "," block_given? "," command ","OptionParser  new "]}," Transat HelpCommand run":{"type":"method","name":"run","children":[],"call":[" raise ","HelpNeeded  new "," non_options first "," non_options "]}," Transat VersionCommand run":{"type":"method","name":"run","children":[],"call":[" raise "]}," Transat BaseCommand initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Transat UnknownCommand message":{"type":"method","name":"message","children":[],"call":["@command inspect "]}," Transat UnknownCommand initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Transat UnknownOptions message":{"type":"method","name":"message","children":[],"call":["@unrecognized_options join "]}," Transat UnknownOptions initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Transat NoCommandGiven message":{"type":"method","name":"message","children":[],"call":[]}," Transat HelpNeeded initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Thin Server stop!":{"type":"method","name":"stop!","children":[],"call":["@socket close "," raise "," remove_socket_file ","EventMachine  stop ","connection close_connection ","@connections each "," log ","@connector close ","@connector close_connections ","@backend stop! "," log_info ","@backend started_reactor? "]}," Thin Server stop":{"type":"method","name":"stop","children":[],"call":[" stop! "," warn ","EventMachine  stop_event_loop "," remove_socket_file "," wait_for_connections_and_stop ","EventMachine  add_periodic_timer ","EventMachine  stop_server ","@connector disconnect "," log ","(str \">> Waiting for \") + "," timeout ","@backend size ","@backend empty? ","@backend stop "," running? "," log_info "]}," Thin Server process":{"type":"method","name":"process","children":[],"call":["client close ","client closed? ","response close ","request close "," log ","e backtrace join ","e backtrace ","e message ","client << "," trace ","Request finished center ","response write ",">> Sending response:\n + ","response to_s ","handler process ","@handlers each ","request params []= ","@port to_s ","request params ","client peeraddr last ","client peeraddr ","request raw ","request parse! ","Timeout  timeout ","request trace= ","Response  new ","Request  new ","Request started center ","client eof? ","Response  new  close ","Request  new  close ","Response  new  write ",">> Sending Response  new :\n + ","Response  new  to_s ","Request  new  params []= ","Request  new  params ","Request  new  raw ","Request  new  parse! ","Request  new  trace= "]}," Thin Server listen!":{"type":"method","name":"listen!","children":[],"call":["@socket close ","@socket closed? "," process ","client nil? ","@socket accept "," log "," port "," host "," stop "," trap ","EventMachine  stop_event_loop ","connection silent= ","connection app= ","connection comm_inactivity_timeout= ","EventMachine  start_server ","EventMachine  run ","EventMachine  epoll "," stop! "]}," Thin Server start!":{"type":"method","name":"start!","children":[],"call":[" listen! "," start "]}," Thin Server start":{"type":"method","name":"start","children":[],"call":["handler start "," log ","@handlers each "," trace "," raise "," stop "," start_server ","EventMachine  run ","EventMachine  epoll "," stop! "," trap "," remove_socket_file "," at_exit ","@connector connect "," debug "," setup_signals ","@backend start ","@backend maximum_connections ","@backend threaded? "," log_info "," log_debug "]}," Thin Server initialize":{"type":"method","name":"initialize","children":[],"call":["TCPServer  new ","port to_i ","Rack Builder  new to_app ","Rack Builder  new ","host_or_socket include? ","@connector server= ","Connectors TcpServer  new ","Connectors UnixServer  new ","host_or_socket_or_connector include? ","host_or_socket_or_connector is_a? ","Rack CommonLogger  new ","Logging  debug? ","@connector timeout= ","@connector maximum_persistent_connections= ","@backend timeout= ","@backend maximum_persistent_connections= ","@backend maximum_connections= ","@backend server= "," load_cgi_multipart_eof_fix ","Backends TcpServer  new ","Backends UnixServer  new ","host_or_socket_or_backend include? ","host_or_socket_or_backend is_a? "," setup_signals ","options [] class == ","options [] class ","options [] "," select_backend ","arg respond_to? ","args each ","arg to_i "," tag= ","options [] != ","0 class ","arg to_i  to_i "," select_backend  timeout= "," select_backend  maximum_persistent_connections= "," select_backend  maximum_connections= "," select_backend  server= "]}," Thin Response to_s":{"type":"method","name":"to_s","children":[],"call":[" write "," head + ","@body read "," head ","@body rewind "]}," Thin Response start":{"type":"method","name":"start","children":[],"call":[]}," Thin Response close":{"type":"method","name":"close","children":[],"call":["@body close ","@body respond_to? "]}," Thin Response write":{"type":"method","name":"write","children":[],"call":["socket << ","@body read ","@body rewind "," head "]}," Thin Response head":{"type":"method","name":"head","children":[],"call":[" headers_output ","HTTP_STATUS_CODES  [] ","@status to_i "]}," Thin Response headers_output":{"type":"method","name":"headers_output","children":[],"call":["@headers to_s ","@headers []= ","@body size "," persistent? ","@headers has_key? "]}," Thin Response content_type":{"type":"method","name":"content_type","children":[],"call":["@headers [] "]}," Thin Response content_type=":{"type":"method","name":"content_type=","children":[],"call":["@headers []= "]}," Thin Response initialize":{"type":"method","name":"initialize","children":[],"call":["StringIO  new ","Headers  new "]}," Thin Request readline":{"type":"method","name":"readline","children":[],"call":["@raw << ","io gets "]}," Thin Request to_s":{"type":"method","name":"to_s","children":[],"call":["@params [] "]}," Thin Request content_length":{"type":"method","name":"content_length","children":[],"call":["@params [] to_i ","@params [] ","@env [] to_i ","@env [] "]}," Thin Request close":{"type":"method","name":"close","children":[],"call":["@body close ","@body === ","@body delete ","@body class == ","@body class ","@body close! "]}," Thin Request parse_body!":{"type":"method","name":"parse_body!","children":[],"call":["@body rewind ","@body << ","chunk size > ","chunk size ","content readpartial ","@body size < ","@body size "," content_length ","content readpartial  size > ","content readpartial  size "," content_ content_length  "]}," Thin Request parse_headers!":{"type":"method","name":"parse_headers!","children":[],"call":["@params []= ","@params [] split [] ","@params [] split ","@params [] "," raise ","headers_size > "," params []= ","value chomp ","name upcase gsub ","name upcase "," params ","HTTP_LESS_HEADERS  include? ","value size > ","value size ","name size > ","name size ","matches [] ","line match ","(str \"\\r\") include? ","line [] ","line size "," readline ","content eof? ","query_string size > ","query_string size ","@path size > ","@path size ","uri match ","fragment size > ","fragment size ","uri size > ","uri size "," readline match ","\r == ","line match  [] ","uri match  [] "," readline match  [] "," readline  match "," readline  [] "," readline  size "," read readline  "," read readline  match "]}," Thin Request parse!":{"type":"method","name":"parse!","children":[],"call":[" raise ","e message "," parse_body! ","BODYFUL_METHODS  include? "," verb "," parse_headers! "]}," Thin Request initialize":{"type":"method","name":"initialize","children":[],"call":["StringIO  new ","HttpParser  new ","Thin HttpParser  new ","INITIAL_BODY  dup ","String  new "]}," Thin RailsServer initialize":{"type":"method","name":"initialize","children":[],"call":["Thin DirHandler  new ","File  join ","Thin RailsHandler  new "]}," Thin RailsHandler to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Thin RailsHandler process":{"type":"method","name":"process","children":[],"call":["cgi out ","Dispatcher  dispatch ","response body ","CGIWrapper  new ","File  file? ","File  join ","request path ","CGIWrapper  new  out "]}," Thin RailsHandler start":{"type":"method","name":"start","children":[],"call":[" require ","ENV  []= "]}," Thin RailsHandler initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Thin Logging trace":{"type":"method","name":"trace","children":[],"call":[" puts ","@silent ! "," log ","Logging  trace? ","Logging  trace_msg "]}," Thin Logging logc":{"type":"method","name":"logc","children":[],"call":["STDOUT  flush "," print "]}," Thin Logging log":{"type":"method","name":"log","children":[],"call":[" puts ","Logging  silent? "," log_info ","STDERR  puts "]}," Thin Headers to_s":{"type":"method","name":"to_s","children":[],"call":["out << ","HEADER_FORMAT  % ","@items inject ","@out join "]}," Thin Headers size":{"type":"method","name":"size","children":[],"call":["@items size "]}," Thin Headers []":{"type":"method","name":"[]","children":[],"call":["item [] ","@items assoc ","@items assoc  [] ","@@items assoc s assoc "]}," Thin Headers []=":{"type":"method","name":"[]=","children":[],"call":["@items << ","@sent []= ","@items assoc []= ","@items assoc ","@@allowed_duplicates include? ! ","@@allowed_duplicates include? ","@sent has_key? ","ALLOWED_DUPLICATES  include? ! ","ALLOWED_DUPLICATES  include? ","@out << ","HEADER_FORMAT  % ","@sent [] ! ","@sent [] ","@sent has_key? ! ","value to_s ","value httpdate ","key downcase "," raise "]}," Thin Headers initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Thin DirHandler to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Thin DirHandler serve_file":{"type":"method","name":"serve_file","children":[],"call":["response body << ","f read ","response body ","File  open ","response content_type= ","application/octet-stream freeze ","MIME_TYPES  [] ","File  extname "]}," Thin DirHandler serve_dir":{"type":"method","name":"serve_dir","children":[],"call":["response body << ","response body ","File  join ","entry == ","Dir  entries each ","Dir  entries ","response content_type= "]}," Thin DirHandler process":{"type":"method","name":"process","children":[],"call":[" serve_file ","File  file? "," serve_dir ","request path ","File  directory? ","File  join ","request File  join  "]}," Thin DirHandler initialize":{"type":"method","name":"initialize","children":[],"call":["pwd dup "]}," Thin Handler process":{"type":"method","name":"process","children":[],"call":[" raise "]}," Thin Handler start":{"type":"method","name":"start","children":[],"call":[]}," Thin Daemonizable write_pid_file":{"type":"method","name":"write_pid_file","children":[],"call":["File  chmod ","f write ","Process  pid "," open ","FileUtils  mkdir_p ","File  dirname "," log "," log_info "]}," Thin Daemonizable remove_pid_file":{"type":"method","name":"remove_pid_file","children":[],"call":["File  delete ","File  exists? ","File  exist? "]}," Thin Daemonizable ClassMethods kill":{"type":"method","name":"kill","children":[],"call":["File  delete "," puts ","Process  kill "," print "," sleep ","Process  running? ","Timeout  timeout ","pid to_i "," open read "," open ","File  exist? "," send_signal ","timeout == ","pid to_i  to_i "," open read  to_i "," send_signal  to_i "]}," Thin Daemonizable change_privilege":{"type":"method","name":"change_privilege","children":[],"call":[" log ","Process UID  change_privilege ","Process GID  change_privilege ","Process  initgroups ","gid != ","uid != ","Etc  getgrnam gid ","Etc  getgrnam ","Etc  getpwnam uid ","Etc  getpwnam ","Process  egid ","Process  euid "," check_plateform_support ","File  chown ","File  exists? "," log_info ","ENV  store ","File  expand_path ","File  exist? "]}," Thin Daemonizable daemonize":{"type":"method","name":"daemonize","children":[],"call":[" remove_pid_file "," log "," at_exit "," write_pid_file ","f reopen ","(const nil :STDOUT) each "," trap ","Dir  chdir ","Dir  pwd "," raise ","Daemonize  daemonize ","File  expand_path "," check_plateform_support "," restart ","Thin  win? "," name ","(begin\n  (ivar :@pid_file)) + ","File  exist? "," remove_stale_pid_file ","FileUtils  mkdir_p ","File  dirname "," after_daemonize "," respond_to? "," log_info ","Dir  Dir  pwd  "]}," Thin Daemonizable included":{"type":"method","name":"included","children":[],"call":[]}," Process running?":{"type":"method","name":"running?","children":[],"call":["Process  getpgid != ","Process  getpgid "]}," Kernel daemonize":{"type":"method","name":"daemonize","children":[],"call":[" exit "," trap ","STDERR  reopen ","STDOUT  reopen ","STDIN  reopen ","File  umask ","Dir  chdir "," fork ","Process  setsid "]}," Server Stop detailed_help":{"type":"method","name":"detailed_help","children":[],"call":[]}," Server Stop help":{"type":"method","name":"help","children":[],"call":[]}," Server Stop run":{"type":"method","name":"run","children":[],"call":["Thin Server  kill "," timeout to_i "," timeout "," pid_file ","Dir  chdir "," cwd "," error "]}," Server Stop cwd":{"type":"method","name":"cwd","children":[],"call":[" args first "," args "]}," Server Start detailed_help":{"type":"method","name":"detailed_help","children":[],"call":[]}," Server Start help":{"type":"method","name":"help","children":[],"call":[]}," Server Start run":{"type":"method","name":"run","children":[],"call":["server listen! ","server daemonize "," daemonize ","server start ","server change_privilege "," user "," group ","server timeout= "," timeout to_i "," timeout ","server trace= "," trace ","server pid_file= "," pid_file ","server log_file= "," log_file ","Thin RailsServer  new "," port "," address ","Dir  chdir "," cwd "," environment ","Thin RailsServer  new  listen! ","Thin RailsServer  new  daemonize ","Thin RailsServer  new  start ","Thin RailsServer  new  change_privilege ","Thin RailsServer  new  timeout= ","Thin RailsServer  new  trace= ","Thin RailsServer  new  pid_file= ","Thin RailsServer  new  log_file= "]}," Server Base cwd":{"type":"method","name":"cwd","children":[],"call":[" args first "," args "]}," Cluster Stop detailed_help":{"type":"method","name":"detailed_help","children":[],"call":[]}," Cluster Stop help":{"type":"method","name":"help","children":[],"call":[]}," Cluster Stop run":{"type":"method","name":"run","children":[],"call":["cluster stop ","cluster trace= "," trace ","cluster pid_file= "," pid_file ","cluster log_file= "," log_file ","Thin Cluster  new "," servers "," port "," address "," cwd "," load_from_config ","Thin Cluster  new  stop ","Thin Cluster  new  trace= ","Thin Cluster  new  pid_file= ","Thin Cluster  new  log_file= "]}," Cluster Start detailed_help":{"type":"method","name":"detailed_help","children":[],"call":[]}," Cluster Start help":{"type":"method","name":"help","children":[],"call":[]}," Cluster Start run":{"type":"method","name":"run","children":[],"call":["cluster start ","cluster group= "," group ","cluster user= "," user ","cluster trace= "," trace ","cluster pid_file= "," pid_file ","cluster log_file= "," log_file ","cluster environment= "," environment ","Thin Cluster  new "," servers "," port "," address "," cwd "," load_from_config ","Thin Cluster  new  start ","Thin Cluster  new  group= ","Thin Cluster  new  user= ","Thin Cluster  new  trace= ","Thin Cluster  new  pid_file= ","Thin Cluster  new  log_file= ","Thin Cluster  new  environment= "]}," Cluster Restart detailed_help":{"type":"method","name":"detailed_help","children":[],"call":[]}," Cluster Restart help":{"type":"method","name":"help","children":[],"call":[]}," Cluster Restart run":{"type":"method","name":"run","children":[],"call":["cluster restart ","cluster group= "," group ","cluster user= "," user ","cluster trace= "," trace ","cluster pid_file= "," pid_file ","cluster log_file= "," log_file ","Thin Cluster  new "," servers "," port "," address "," cwd "," load_from_config ","Thin Cluster  new  restart ","Thin Cluster  new  group= ","Thin Cluster  new  user= ","Thin Cluster  new  trace= ","Thin Cluster  new  pid_file= ","Thin Cluster  new  log_file= "]}," Cluster Config detailed_help":{"type":"method","name":"detailed_help","children":[],"call":[]}," Cluster Config help":{"type":"method","name":"help","children":[],"call":[]}," Cluster Config run":{"type":"method","name":"run","children":[],"call":["f << ","YAML  dump ","File  open "," config ","hash []= "," send ","attr to_s "," class config_attributes each "," class config_attributes "," class ","Dir  chdir "," cwd "," error "," puts "]}," Cluster Base load_from_config":{"type":"method","name":"load_from_config","children":[],"call":[" send ","hash [] ","attr to_s "," class config_attributes each "," class config_attributes "," class ","YAML  load ","File  open "," config ","File  exist? "]}," Cluster Base config_attributes":{"type":"method","name":"config_attributes","children":[],"call":[]}," Thin Command error":{"type":"method","name":"error","children":[],"call":[" raise "]}," Thin Command detailed_help":{"type":"method","name":"detailed_help","children":[],"call":[]}," Thin Command command_name":{"type":"method","name":"command_name","children":[],"call":[]}," Thin Command initialize":{"type":"method","name":"initialize","children":[],"call":[" send ","options each "]}," Thin define_commands":{"type":"method","name":"define_commands","children":[],"call":[]}," Thin Cluster include_port_number":{"type":"method","name":"include_port_number","children":[],"call":["path gsub "," raise ","path =~ "]}," Thin Cluster with_each_instance":{"type":"method","name":"with_each_instance","children":[],"call":["@first_port + ","@size times ","@first_@first_port +  + "]}," Thin Cluster wait_until_pid":{"type":"method","name":"wait_until_pid","children":[],"call":[" sleep ","File  exist? == ","exist ! ! ","exist ! ","File  exist? "," pid_file_for ","Timeout  timeout "]}," Thin Cluster shellify":{"type":"method","name":"shellify","children":[],"call":["shellified_options compact join ","shellified_options compact ","args << ","value inspect ","name to_s tr ","name to_s ","options inject "]}," Thin Cluster run":{"type":"method","name":"run","children":[],"call":[" trace "," shellify "," log ","ouput empty? ","(begin\n  (lvar :shell_cmd)) chomp ","options merge "," log_file_for "," pid_file_for ","   + ","ouput gsub ","cmd_options merge! "," socket_for "," socket ","options dup ","Command  run ","(begin\n  (lvar :shell_cmd)) chomp  empty? ","(begin\n  (lvar : shellify )) chomp ","(begin\n  (lvar :shell_cmd)) chomp  gsub ","options dup  merge! "]}," Thin Cluster pid_for":{"type":"method","name":"pid_for","children":[],"call":["File  read chomp to_i ","File  read chomp ","File  read "," pid_file_for "]}," Thin Cluster pid_file_for":{"type":"method","name":"pid_file_for","children":[],"call":[" include_port_number "," pid_file "," include_server_number "]}," Thin Cluster log_file_for":{"type":"method","name":"log_file_for","children":[],"call":[" include_port_number "," log_file "," include_server_number "]}," Thin Cluster restart":{"type":"method","name":"restart","children":[],"call":[" start_on_port "," sleep "," stop_on_port "," with_each_instance "," start "," stop "]}," Thin Cluster stop_on_port":{"type":"method","name":"stop_on_port","children":[],"call":[" log ","$? success? "," wait_until_pid ","exist ! "," run "," pid_file_for "," logc "," address "]}," Thin Cluster stop":{"type":"method","name":"stop","children":[],"call":[" stop_on_port "," with_each_instance "," with_each_server "," stop_server "]}," Thin Cluster start_on_port":{"type":"method","name":"start_on_port","children":[],"call":[" log "," pid_for ","$? success? "," wait_until_pid "," run "," log_file_for "," pid_file_for "," logc "," address "]}," Thin Cluster start":{"type":"method","name":"start","children":[],"call":[" start_on_port "," with_each_instance "," with_each_server "," start_server "]}," Thin Cluster initialize":{"type":"method","name":"initialize","children":[],"call":["Dir  chdir ","@options delete ","options merge "," socket ","File  join ","File  dirname ","options merge  delete "]}," Thin Cluster thin=":{"type":"method","name":"thin=","children":[],"call":[]}," Thin CGIWrapper stdoutput":{"type":"method","name":"stdoutput","children":[],"call":["@response body ","STDERR  puts "]}," Thin CGIWrapper stdinput":{"type":"method","name":"stdinput","children":[],"call":[]}," Thin CGIWrapper env_table":{"type":"method","name":"env_table","children":[],"call":["@request params "]}," Thin CGIWrapper args":{"type":"method","name":"args","children":[],"call":[]}," Thin CGIWrapper status":{"type":"method","name":"status","children":[],"call":["stat split [] ","stat split ","@head [] ","@status ! ","stat split []  split [] ","@head []  split [] ","stat split []  split ","@head []  split ","@stat split [] us ! ","@@head [] us ! "]}," Thin CGIWrapper out":{"type":"method","name":"out","children":[],"call":["body write ","head []= ","@head each "," send_cookies ","@response start "," status "," header ","really_final ! "]}," Thin CGIWrapper send_cookies":{"type":"method","name":"send_cookies","children":[],"call":["to []= ","c to_s ","@output_cookies each ","@head delete "," options [] to_s "," options [] "," options ","cookie each_value ","cookie each ","@head [] ","@output_@head [] s each ","@head []  each_value ","@head []  each "]}," Thin CGIWrapper header":{"type":"method","name":"header","children":[],"call":["@head []= ","options each ","options delete ","REMOVED_KEYS  each ","options [] "," env_table [] "," env_table ","CGI  rfc1123_date ","Time  now ","; charset= + ","@head [] ","options has_key? ","options class == ","options class "]}," Thin CGIWrapper initialize":{"type":"method","name":"initialize","children":[],"call":["request body "]}," Thin Response body=":{"type":"method","name":"body=","children":[],"call":["@body << ","stream each "]}," Thin Response headers=":{"type":"method","name":"headers=","children":[],"call":["@headers []= ","vs each ","key_value_pairs each ","v chomp ","vs each_line ","vs is_a? "]}," Thin Request parse":{"type":"method","name":"parse","children":[],"call":[" body rewind "," body "," body size >= "," content_length "," body size ","@parser finished? ","@parser execute "," raise ","@data size > ","@data size "," body << ","@data << ","@body rewind ","@body size >= ","@body size "," move_body_to_tempfile "," content_length > "," finished? ","@body << ","data size > ","data size "]}," Thin Logging log_error":{"type":"method","name":"log_error","children":[],"call":["(begin\n  (lvar :e)) + ","e backtrace join ","e backtrace "," trace "," debug ","STDERR  print ","Logging  debug? ","(begin\n  (lvar :e)) + + ","Logging  log_msg ","msg + + + ","msg + + ","msg + ","(str \": \") + + ","(str \": \") + ","Logging  msg + + +  "]}," Thin Daemonizable pid":{"type":"method","name":"pid","children":[],"call":[" open read "," open "," pid_file ","File  exist? "," open read to_i ","File  zero? ! ","File  zero? "]}," Thin Connection process":{"type":"method","name":"process","children":[],"call":["@response close "," close_connection "," log_error "," log ","e message "," close_connection_after_writing "," send_data ","@response body read ","@response body ","@response body rewind ","@response head ","@app call ","@response body= ","@response headers= ","@response status= ","env []= ","Socket  unpack_sockaddr_in [] ","Socket  unpack_sockaddr_in "," get_peername ","env [] ","@request env ","@response to_s "," trace ","@response each ","@request close "," remote_address ","@request env []= "," post_init "," persistent? ","$! message ","@response persistent! ","@request persistent? ","@request remote_address= "," post_process "," pre_process ","EventMachine  defer "," method ","@request threaded= "," threaded? ","@request env  []= ","@request env  [] ","@request @request env  ","@request @request env  []= "]}," Thin Connection receive_data":{"type":"method","name":"receive_data","children":[],"call":[" close_connection "," trace "," log_error "," log "," process ","@request parse "," post_process "]}," Thin Connection post_init":{"type":"method","name":"post_init","children":[],"call":["Response  new ","Request  new ","@request threaded= "," threaded ","Request  new  threaded= "]}," Rack Handler Thin run":{"type":"method","name":"run","children":[],"call":[]}," Rack Adapter Rails CGIWrapper stdoutput":{"type":"method","name":"stdoutput","children":[],"call":["@response body ","STDERR  puts "]}," Rack Adapter Rails CGIWrapper stdinput":{"type":"method","name":"stdinput","children":[],"call":[]}," Rack Adapter Rails CGIWrapper env_table":{"type":"method","name":"env_table","children":[],"call":["@request env "]}," Rack Adapter Rails CGIWrapper args":{"type":"method","name":"args","children":[],"call":[]}," Rack Adapter Rails CGIWrapper query_string":{"type":"method","name":"query_string","children":[],"call":["@request query_string "]}," Rack Adapter Rails CGIWrapper cookies":{"type":"method","name":"cookies","children":[],"call":["@request cookies "]}," Rack Adapter Rails CGIWrapper params":{"type":"method","name":"params","children":[],"call":["@request params "]}," Rack Adapter Rails CGIWrapper header":{"type":"method","name":"header","children":[],"call":["@response []= ","cookies << ",",  + ","(send\n  (ivar :@output_cookies) :each) join ","c to_s ","@output_cookies each ","cookie to_s ","(send\n  (lvar :cookie) :collect) join ","cookie collect ","@response header delete ","@response header ","options each ","@response status= ","options delete ","options [] ","; charset= + ","@response [] ","options delete to_s ","options is_a? ","(send\n  (ivar :@response) :[]\n  (str \"Set-Cookie\")) compact join ","(send\n  (ivar :@response) :[]\n  (str \"Set-Cookie\")) compact ","cookie each ","@response [] join ","@response [] flatten! ","Thin  ruby_18? ","@response header delete s << ","options delete s << ","(send\n  (ivar :@output_@response header delete s) :each) join ","(send\n  (ivar :@output_options delete s) :each) join ","@output_@response header delete s each ","@output_options delete s each ","@response header delete  to_s ","options delete  to_s ","(send\n  (lvar :@response header delete ) :collect) join ","(send\n  (lvar :options delete ) :collect) join ","@response header delete  collect ","options delete  collect ","@response header delete  each ","options delete  each "]}," Rack Adapter Rails CGIWrapper initialize":{"type":"method","name":"initialize","children":[],"call":["request body "]}," Rack Adapter Rails call":{"type":"method","name":"call","children":[],"call":["response finish ","Dispatcher  dispatch ","CGIWrapper  new ","Response  new ","Request  new ","@file_server call "," file? ","env [] "," serve_rails "," serve_file ","env []= "," file_exist? ","(if\n  (send\n    (lvar :path) :empty?)\n  (str \"index\")\n  (lvar :path)) + ","ActionController Base  page_cache_extension ","path empty? ","env [] chomp ","FILE_METHODS  include? ","@rails_app call ","@file_app call ","Response  new  finish ","(if\n  (send\n    (lvar :env [] chomp ) :empty?)\n  (str \"index\")\n  (lvar :env [] chomp )) + ","env [] chomp  empty? "]}," Rack Adapter Rails file?":{"type":"method","name":"file?","children":[],"call":[" File  readable? "," File  file? "," File  join ","Utils  unescape ","@file_server root "]}," Rack Adapter Rails load_application":{"type":"method","name":"load_application","children":[],"call":[" require ","ENV  []= ","ActionController AbstractRequest  relative_url_root= ","ActionController Base  relative_url_root= ","ActionController Base  respond_to? "]}," Rack Adapter Rails initialize":{"type":"method","name":"initialize","children":[],"call":["Rack File  new "," File  join "," load_application ","options [] ","Dir  pwd ","CgiApp  new ","ActionController Dispatcher  new ","ActionController Dispatcher  instance_methods include? ","ActionController Dispatcher  instance_methods "," class rack_based? "," class "," rack_based? "]}," Thin Cluster with_each_server":{"type":"method","name":"with_each_server","children":[],"call":[" first_port + "," first_port ","@size times "," socket "]}," Thin Cluster log_file":{"type":"method","name":"log_file","children":[],"call":["File  expand_path ","File  join ","@options [] "]}," Thin Cluster pid_file":{"type":"method","name":"pid_file","children":[],"call":["File  expand_path ","File  join ","@options [] "]}," Thin Cluster address":{"type":"method","name":"address","children":[],"call":["@options [] "]}," Thin Cluster first_port":{"type":"method","name":"first_port","children":[],"call":["@options [] "]}," Rack Adapter Rails serve_rails":{"type":"method","name":"serve_rails","children":[],"call":["response finish ","Dispatcher  dispatch ","CGIWrapper  new ","Response  new ","Request  new ","Response  new  finish "]}," Rack Adapter Rails serve_file":{"type":"method","name":"serve_file","children":[],"call":["@file_server call "]}," Rack Adapter Rails file_exist?":{"type":"method","name":"file_exist?","children":[],"call":[" File  readable? "," File  file? "," File  join ","Utils  unescape ","@file_server root "," File  readable_real? ","@file_app root "]}," Thin Daemonizable check_plateform_support":{"type":"method","name":"check_plateform_support","children":[],"call":[" raise ","RUBY_PLATFORM  =~ "]}," Thin Response each":{"type":"method","name":"each","children":[],"call":["@body each "," head ","@body is_a? "]}," Thin Stats Adapter serve":{"type":"method","name":"serve","children":[],"call":["body size to_s ","body size ","body << ","Time  now - ","Time  now ","@requests - ","@template result "," binding ","@template result  size to_s ","@template result  size ","@template result  << "]}," Thin Stats Adapter log":{"type":"method","name":"log","children":[],"call":["Time  now - ","Time  now ","env [] ","Rack Request  new "]}," Thin Stats Adapter call":{"type":"method","name":"call","children":[],"call":["@app call "," log "," serve ","env [] index == ","env [] index ","env [] "]}," Thin Stats Adapter initialize":{"type":"method","name":"initialize","children":[],"call":["Time  now ","ERB  new ","File  read ","File  dirname + ","File  dirname "]}," Thin Server initialize_connection":{"type":"method","name":"initialize_connection","children":[],"call":["connection unix_socket= ","@socket nil? ! ","@socket nil? ","connection silent= ","connection app= ","connection comm_inactivity_timeout= ","@connections << ","connection server= "]}," Thin Server start_server_on_socket":{"type":"method","name":"start_server_on_socket","children":[],"call":["EventMachine  start_unix_domain_server "," method "," log "," raise ","Thin  win? "]}," Thin Server start_server_on_host":{"type":"method","name":"start_server_on_host","children":[],"call":["EventMachine  start_server "," method "," log "]}," Thin Server start_server":{"type":"method","name":"start_server","children":[],"call":[" start_server_on_host "," start_server_on_socket "]}," Thin Request move_body_to_tempfile":{"type":"method","name":"move_body_to_tempfile","children":[],"call":["@env []= ","@body << ","current_body size zero? ","current_body size ","@body binmode ","Tempfile  new ","current_body read ","current_body rewind ","Tempfile  new  << ","Tempfile  new  binmode "]}," Thin Connection remote_address":{"type":"method","name":"remote_address","children":[],"call":["Socket  unpack_sockaddr_in [] ","Socket  unpack_sockaddr_in "," get_peername ","Socket  unpack_sockaddr_un ","env [] ","@request env [] ","@request env "," log_error "," socket_address "," has_peername? ","@request forwarded_for "]}," Thin Cluster include_server_number":{"type":"method","name":"include_server_number","children":[],"call":["path gsub ","File  extname ","File  File  extname name "]}," Thin Cluster socket_for":{"type":"method","name":"socket_for","children":[],"call":[" include_server_number "," socket "]}," Thin Cluster server_id":{"type":"method","name":"server_id","children":[],"call":["(send nil :address) join "," address "," socket_for "," socket "]}," Thin Cluster stop_server":{"type":"method","name":"stop_server","children":[],"call":[" run "," log "," server_id "]}," Thin Cluster start_server":{"type":"method","name":"start_server","children":[],"call":[" run "," log "," server_id "]}," Thin Cluster socket":{"type":"method","name":"socket","children":[],"call":["@options [] "]}," Thin Server remove_socket_file":{"type":"method","name":"remove_socket_file","children":[],"call":["File  delete ","File  exist? "]}," Thin ruby_18?":{"type":"method","name":"ruby_18?","children":[],"call":[]}," Thin win?":{"type":"method","name":"win?","children":[],"call":[]}," Thin Stats Adapter distance_of_time_in_words":{"type":"method","name":"distance_of_time_in_words","children":[],"call":["(send\n  (lvar :distance_in_minutes) :/\n  (int 525600)) round ","distance_in_minutes / ","(send\n  (lvar :distance_in_minutes) :/\n  (int 43200)) round ","(send\n  (lvar :distance_in_minutes) :/\n  (int 1440)) round ","(send\n  (send\n    (lvar :distance_in_minutes) :to_f) :/\n  (float 60.0)) round ","distance_in_minutes to_f / ","distance_in_minutes to_f ","distance_in_minutes == ","(send\n  (begin\n    (send\n      (lvar :to_time) :-\n      (lvar :from_time))) :abs) round ","(send\n  (lvar :to_time) :-\n  (lvar :from_time)) abs ","to_time - ","(send\n  (begin\n    (send\n      (begin\n        (send\n          (lvar :to_time) :-\n          (lvar :from_time))) :abs)) :/\n  (int 60)) round ","(send\n  (begin\n    (send\n      (lvar :to_time) :-\n      (lvar :from_time))) :abs) / ","to_time to_time ","to_time respond_to? ","from_time to_time ","from_time respond_to? ","(send\n  (lvar :(send\n  (begin\n    (send\n      (begin\n        (send\n          (lvar :to_time) :-\n          (lvar :from_time))) :abs)) :/\n  (int 60)) round ) :/\n  (int 525600)) round ","(send\n  (begin\n    (send\n      (begin\n        (send\n          (lvar :to_time) :-\n          (lvar :from_time))) :abs)) :/\n  (int 60)) round  / ","(send\n  (lvar :(send\n  (begin\n    (send\n      (begin\n        (send\n          (lvar :to_time) :-\n          (lvar :from_time))) :abs)) :/\n  (int 60)) round ) :/\n  (int 43200)) round ","(send\n  (lvar :(send\n  (begin\n    (send\n      (begin\n        (send\n          (lvar :to_time) :-\n          (lvar :from_time))) :abs)) :/\n  (int 60)) round ) :/\n  (int 1440)) round ","(send\n  (send\n    (lvar :(send\n  (begin\n    (send\n      (begin\n        (send\n          (lvar :to_time) :-\n          (lvar :from_time))) :abs)) :/\n  (int 60)) round ) :to_f) :/\n  (float 60.0)) round ","(send\n  (begin\n    (send\n      (begin\n        (send\n          (lvar :to_time) :-\n          (lvar :from_time))) :abs)) :/\n  (int 60)) round  to_f / ","(send\n  (begin\n    (send\n      (begin\n        (send\n          (lvar :to_time) :-\n          (lvar :from_time))) :abs)) :/\n  (int 60)) round  to_f ","(send\n  (begin\n    (send\n      (begin\n        (send\n          (lvar :to_time) :-\n          (lvar :from_time))) :abs)) :/\n  (int 60)) round  == ","(send\n  (begin\n    (send\n      (lvar :to_time to_time ) :-\n      (lvar :from_time))) :abs) round ","(send\n  (begin\n    (send\n      (lvar :to_time) :-\n      (lvar :from_time to_time ))) :abs) round ","(send\n  (lvar :to_time to_time ) :-\n  (lvar :from_time)) abs ","(send\n  (lvar :to_time) :-\n  (lvar :from_time to_time )) abs ","to_time to_time  - ","(send\n  (begin\n    (send\n      (begin\n        (send\n          (lvar :to_time to_time ) :-\n          (lvar :from_time))) :abs)) :/\n  (int 60)) round ","(send\n  (begin\n    (send\n      (begin\n        (send\n          (lvar :to_time) :-\n          (lvar :from_time to_time ))) :abs)) :/\n  (int 60)) round ","(send\n  (begin\n    (send\n      (lvar :to_time to_time ) :-\n      (lvar :from_time))) :abs) / ","(send\n  (begin\n    (send\n      (lvar :to_time) :-\n      (lvar :from_time to_time ))) :abs) / ","to_time to_time  to_time to_time  ","to_time to_time  respond_to? ","from_time to_time to_time  ","from_time to_time  to_time ","from_time to_time  respond_to? "]}," Thin Server wait_for_connections_and_stop":{"type":"method","name":"wait_for_connections_and_stop","children":[],"call":[" log ","@connections size "," stop! ","@connections empty? ","@connector size ","@connector empty? "," timeout "]}," Thin Server connection_finished":{"type":"method","name":"connection_finished","children":[],"call":["@connections delete "]}," Thin Request finished?":{"type":"method","name":"finished?","children":[],"call":["@body size >= "," content_length ","@body size ","@parser finished? "]}," Thin Daemonizable ClassMethods send_signal":{"type":"method","name":"send_signal","children":[],"call":[" puts ","Process  kill "," print ","pid to_i "," open read "," open ","File  exist? "," force_kill ","Logging  log "," sleep ","Process  running? ","Timeout  timeout ","File  read ","File  file? "," read_pid_file "," raise ","Logging  log_info ","(send\n  (send nil :monotonic_time) :-\n  (lvar :started_at)) > "," monotonic_time - "," monotonic_time ","pid to_i  to_i "," open read  to_i ","File  read  to_i "," read_pid_file  to_i "," read_pid to_i _file "," read_ open read _file "," read_File  read _file "," read_ read_pid_file _file ","(send\n  (send nil :monotonic_time) :-\n  (lvar : monotonic_time )) > "]}," Thin Daemonizable ClassMethods restart":{"type":"method","name":"restart","children":[],"call":[" send_signal "]}," Thin Daemonizable restart":{"type":"method","name":"restart","children":[],"call":[" exit! ","@on_restart call "," remove_pid_file "," stop "," log "," raise "," log_info ","EM  next_tick "]}," Thin Daemonizable on_restart":{"type":"method","name":"on_restart","children":[],"call":[]}," Thin Connection unbind":{"type":"method","name":"unbind","children":[],"call":["@server connection_finished ","@connector connection_finished ","@backend connection_finished ","@response body fail ","@response body ","@response body respond_to? ","@request async_close succeed ","@request async_close "]}," Thin Command shellify":{"type":"method","name":"shellify","children":[],"call":["shellified_options compact join ","shellified_options compact ","args << ","value inspect ","name to_s tr ","name to_s ","@options inject "," class script "," class "," raise ","v inspect ","value each "]}," Thin Command run":{"type":"method","name":"run","children":[],"call":[" log ","   + ","ouput gsub ","ouput empty? ","(begin\n  (lvar :shell_cmd)) chomp "," trace "," shellify ","stderr gets ","stderr eof? ","stdout gets ","stdout eof? ","Open3  popen3 "," trap "," log_info ","(begin\n  (lvar :shell_cmd)) chomp  gsub ","(begin\n  (lvar :shell_cmd)) chomp  empty? ","(begin\n  (lvar : shellify )) chomp "]}," Thin linux?":{"type":"method","name":"linux?","children":[],"call":[]}," Thin Server running?":{"type":"method","name":"running?","children":[],"call":["@backend running? "]}," Thin Server name":{"type":"method","name":"name","children":[],"call":["(str \"thin server (\") + "," tag "]}," Thin Runner load_options_from_config_file!":{"type":"method","name":"load_options_from_config_file!","children":[],"call":["@options []= ","key to_sym ","YAML  load_file each ","YAML  load_file ","@options delete ","YAML  load each ","YAML  load ","ERB  new result ","ERB  new ","File  read ","YAML  load_@options delete  each ","YAML  load_@options delete  "]}," Thin Runner service?":{"type":"method","name":"service?","children":[],"call":["@command == ","@options has_key? "]}," Thin Runner cluster?":{"type":"method","name":"cluster?","children":[],"call":["@options [] "]}," Thin Runner run_command":{"type":"method","name":"run_command","children":[],"call":[" abort ","controller send ","controller respond_to? ","Controllers Controller  new ","Controllers Service  new "," service? ","Controllers Cluster  new "," cluster? ","Dir  chdir ","@options [] ","CONFIGLESS_COMMANDS  include? ","Command  script= ","File  expand_path "," load_options_from_config_file! ","e message ","Logging  trace= ","Logging  debug= "," ruby_require ","@options [] each ","Logging  silent= ","Logging  trace_logger= ","Logging  logger ","Logging  logger= ","logger formatter= ","Logging SimpleFormatter  new ","logger level= ","Logger  new ","Logging  level= ","Logging  trace_Logger  new = ","Logging  Logger  new  ","Logging  Logger  new = ","Logger  new  formatter= ","Logger  new  level= "]}," Thin Runner run!":{"type":"method","name":"run!","children":[],"call":[" abort "," exit "," puts ","@command nil? "," run_command "," class commands include? "," class commands "," class "," class commands join "]}," Thin Runner parse!":{"type":"method","name":"parse!","children":[],"call":["@argv shift "," parser parse! "," parser "]}," Thin Runner parser":{"type":"method","name":"parser","children":[],"call":[" exit "," puts ","opts on_tail ","opts separator ","@options []= ","opts on ","Thin  linux? ","num to_i ","File to store PID  + ","@options [] ","File to redirect output  + ","Thin  win? ","Load a Rack config file instead of  + ","sec to_i ","Request or command timeout in sec  + ","File  expand_path ","Rails environment  + ","port to_i ","bind to HOST address  + ","opts banner= "," class commands join "," class commands "," class ","OptionParser  new ","Logging  trace= ","Logging  debug= ","Maximum number of connections  + "," ruby_require ","Call the Rack application in threads  + ","Framework environment  + ","Rack ADAPTERS  keys join ","Rack ADAPTERS  keys ","@options [] << ","(send\n  (const\n    (const nil :Rack) :ADAPTERS) :map) join ","Rack ADAPTERS  map ","only to_i ","Maximum number of open file descriptors  + ","time to_i "]}," Thin Runner initialize":{"type":"method","name":"initialize","children":[],"call":[" parse! ","Dir  pwd ","ENV  [] ","File  join "]}," Thin Runner commands":{"type":"method","name":"commands","children":[],"call":[]}," Thin Controllers Service sh":{"type":"method","name":"sh","children":[],"call":[" system "," log "," log_info "]}," Thin Controllers Service run":{"type":"method","name":"run","children":[],"call":["Command  run "," log ","Dir  [] each ","Dir  [] "," config_path + "," config_path "," log_info ","config end_with? "]}," Thin Controllers Service install":{"type":"method","name":"install","children":[],"call":[" log "," sh ","f << ","ERB  new result "," binding ","ERB  new ","File  read ","File  open ","File  dirname ","File  exist? "," log_info "]}," Thin Controllers Service restart":{"type":"method","name":"restart","children":[],"call":[" run "]}," Thin Controllers Service stop":{"type":"method","name":"stop","children":[],"call":[" run "]}," Thin Controllers Service start":{"type":"method","name":"start","children":[],"call":[" run "]}," Thin Controllers Service config_path":{"type":"method","name":"config_path","children":[],"call":["@options [] "]}," Thin Controllers Service initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","Thin  linux? "]}," Thin Controllers Controller config":{"type":"method","name":"config","children":[],"call":[" log ","f << ","@options to_yaml ","File  open ","@options []= ","@options delete ","o to_s ","@options keys each ","@options keys "," raise "," log_info "]}," Thin Controllers Controller restart":{"type":"method","name":"restart","children":[],"call":["Server  restart ","@options [] "," raise "," wait_for_file "," tail_log "]}," Thin Controllers Controller stop":{"type":"method","name":"stop","children":[],"call":["Server  kill ","@options [] "," raise "," wait_for_file "," tail_log "]}," Thin Controllers Controller start":{"type":"method","name":"start","children":[],"call":["server start ","Command  run ","server on_restart ","server app= ","Stats Adapter  new ","@options [] ","server app ","Rack URLMap  new ","Rack Adapter Rails  new ","@options merge "," eval ","File  read ","server change_privilege ","server daemonize ","server timeout= ","server log_file= ","server pid_file= ","Server  new ","server set_descriptor_table_size! ","server maximum_persistent_connections= ","server maximum_connections= ","Connectors SwiftiplyClient  new ","@options has_key? ","server config ","Backends SwiftiplyClient  new "," load_adapter "," load_rackup_config ","server threaded= ","@options []= ","server no_epoll= ","server backend respond_to? ","server backend ","server ssl_options= ","server ssl= ","server threadpool_size= ","server threaded? ","@options [] ! ","Server  new  start ","Server  new  on_restart ","Server  new  app= ","Server  new  app ","Server  new  change_privilege ","Server  new  daemonize ","Server  new  timeout= ","Server  new  log_file= ","Server  new  pid_file= ","Server  new  set_descriptor_table_size! ","Server  new  maximum_persistent_connections= ","Server  new  maximum_connections= ","Server  new  config ","Server  new  threaded= ","Server  new  no_epoll= ","Server  new  backend respond_to? ","Server  new  backend ","Server  new  ssl_options= ","Server  new  ssl= ","Server  new  threadpool_size= ","Server  new  threaded? "]}," Thin Controllers Controller initialize":{"type":"method","name":"initialize","children":[],"call":["@options delete ","@options [] "]}," Thin Controllers OptionRequired initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Thin Controllers Cluster include_server_number":{"type":"method","name":"include_server_number","children":[],"call":["path gsub ","File  extname ","File  File  extname name "]}," Thin Controllers Cluster with_each_server":{"type":"method","name":"with_each_server","children":[],"call":[" first_port + "," first_port "," socket ","@size times "," size times "," size "," swiftiply? "," only "," only < "]}," Thin Controllers Cluster run":{"type":"method","name":"run","children":[],"call":["Command  run ","cmd_options merge! "," socket_for "," socket "," log_file_for "," pid_file_for ","options dup "," first_port "," swiftiply? ","CLUSTER_OPTIONS  include? ","@options reject ","options dup  merge! "]}," Thin Controllers Cluster pid_for":{"type":"method","name":"pid_for","children":[],"call":["File  read chomp to_i ","File  read chomp ","File  read "," pid_file_for "]}," Thin Controllers Cluster socket_for":{"type":"method","name":"socket_for","children":[],"call":[" include_server_number "," socket "]}," Thin Controllers Cluster pid_file_for":{"type":"method","name":"pid_file_for","children":[],"call":[" include_server_number "," pid_file "]}," Thin Controllers Cluster log_file_for":{"type":"method","name":"log_file_for","children":[],"call":[" include_server_number "," log_file "]}," Thin Controllers Cluster server_id":{"type":"method","name":"server_id","children":[],"call":["(send nil :address) join "," address "," socket_for "," socket "," first_port "," swiftiply? "]}," Thin Controllers Cluster restart":{"type":"method","name":"restart","children":[],"call":[" start "," sleep "," stop "," wait_until_server_started "," start_server "," stop_server "," with_each_server "," onebyone "]}," Thin Controllers Cluster stop_server":{"type":"method","name":"stop_server","children":[],"call":[" run "," log "," server_id "," log_info "]}," Thin Controllers Cluster stop":{"type":"method","name":"stop","children":[],"call":[" stop_server "," with_each_server "]}," Thin Controllers Cluster start_server":{"type":"method","name":"start_server","children":[],"call":[" run "," log "," server_id "," log_info "]}," Thin Controllers Cluster start":{"type":"method","name":"start","children":[],"call":[" start_server "," with_each_server "]}," Thin Controllers Cluster log_file":{"type":"method","name":"log_file","children":[],"call":["@options [] "]}," Thin Controllers Cluster pid_file":{"type":"method","name":"pid_file","children":[],"call":["@options [] "]}," Thin Controllers Cluster socket":{"type":"method","name":"socket","children":[],"call":["@options [] "]}," Thin Controllers Cluster address":{"type":"method","name":"address","children":[],"call":["@options [] "]}," Thin Controllers Cluster first_port":{"type":"method","name":"first_port","children":[],"call":["@options [] "]}," Thin Controllers Cluster initialize":{"type":"method","name":"initialize","children":[],"call":["@options delete "," socket ","options merge ","@options merge! ","options merge  delete ","options merge  merge! "]}," Thin UnixConnection remote_address":{"type":"method","name":"remote_address","children":[],"call":["Socket  unpack_sockaddr_un "," get_peername "]}," Thin Connectors UnixServer remove_socket_file":{"type":"method","name":"remove_socket_file","children":[],"call":["File  delete ","File  exist? "]}," Thin Connectors UnixServer to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Thin Connectors UnixServer close":{"type":"method","name":"close","children":[],"call":[" remove_socket_file "]}," Thin Connectors UnixServer disconnect":{"type":"method","name":"disconnect","children":[],"call":["EventMachine  stop_server "]}," Thin Connectors UnixServer connect":{"type":"method","name":"connect","children":[],"call":["EventMachine  start_unix_domain_server "," method "," remove_socket_file "," at_exit ","@acceptors keys first ","@acceptors keys ","EventMachine  instance_eval "]}," Thin Connectors UnixServer initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","Thin  win? "]}," Thin Connectors TcpServer to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Thin Connectors TcpServer disconnect":{"type":"method","name":"disconnect","children":[],"call":["EventMachine  stop_server "]}," Thin Connectors TcpServer connect":{"type":"method","name":"connect","children":[],"call":["EventMachine  start_server "," method "]}," Thin Connectors TcpServer initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Thin Connectors Connector size":{"type":"method","name":"size","children":[],"call":["@connections size "]}," Thin Connectors Connector empty?":{"type":"method","name":"empty?","children":[],"call":["@connections empty? "]}," Thin Connectors Connector connection_finished":{"type":"method","name":"connection_finished","children":[],"call":["@connections delete ","connection can_persist? "]}," Thin Connectors Connector close_connections":{"type":"method","name":"close_connections","children":[],"call":["connection close_connection ","@connections each "]}," Thin Connectors Connector initialize_connection":{"type":"method","name":"initialize_connection","children":[],"call":["@connections << ","connection silent= ","connection comm_inactivity_timeout= ","connection app= ","@server app ","connection connector= ","connection can_persist! ","@persistent_connection_count < "]}," Thin Connectors Connector server=":{"type":"method","name":"server=","children":[],"call":["@server silent "]}," Thin Connectors Connector close":{"type":"method","name":"close","children":[],"call":[]}," Thin Connectors Connector initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Thin UnixConnection socket_address":{"type":"method","name":"socket_address","children":[],"call":["Socket  unpack_sockaddr_un "," get_peername "]}," Thin Connection socket_address":{"type":"method","name":"socket_address","children":[],"call":["Socket  unpack_sockaddr_in [] ","Socket  unpack_sockaddr_in "," get_peername "," get_ get_peername name "]}," Thin Connection has_peername?":{"type":"method","name":"has_peername?","children":[],"call":[" get_peername empty? ! "," get_peername empty? "," get_peername "," get_peername nil? ! "," get_peername nil? "]}," Thin Server setup_signals":{"type":"method","name":"setup_signals","children":[],"call":[" stop! "," trap "," stop ","Thin  win? "," restart "," reopen_log "," handle_signals ","EM  add_periodic_timer ","@signal_queue push ","(str \"QUIT\") each ","(str \"INT\") each "]}," Thin Server set_descriptor_table_size!":{"type":"method","name":"set_descriptor_table_size!","children":[],"call":[" log ","!! Maximum connections smaller then requested,  + ","@maximum_connections < ","EventMachine  set_descriptor_table_size ","Thin  win? ","EventMachine  set_descriptor_table_size  < "]}," Thin Response persistent?":{"type":"method","name":"persistent?","children":[],"call":["@headers has_key? ","PERSISTENT_STATUSES  include? "]}," Thin Response persistent!":{"type":"method","name":"persistent!","children":[],"call":[]}," Thin Request forwarded_for":{"type":"method","name":"forwarded_for","children":[],"call":["@env [] "]}," Thin Request remote_address=":{"type":"method","name":"remote_address=","children":[],"call":["@env []= "]}," Thin Request persistent?":{"type":"method","name":"persistent?","children":[],"call":["@env [] =~ ","@env [] ","@env [] nil? ","@env [] == ","@env [] !~ "]}," Thin Logging debug":{"type":"method","name":"debug","children":[],"call":[" log ","Logging  debug? "]}," Thin Logging silent=":{"type":"method","name":"silent=","children":[],"call":["Logging  silent= "," warn "," class name "," class ","Logger  new "]}," Thin Logging silent":{"type":"method","name":"silent","children":[],"call":["Logging  silent? "," warn "," class name "," class "]}," Thin Logging silent?":{"type":"method","name":"silent?","children":[],"call":["@logger nil? ! ","@logger nil? "]}," Thin Logging debug?":{"type":"method","name":"debug?","children":[],"call":["@silent ! "," level == "," level "]}," Thin Logging trace?":{"type":"method","name":"trace?","children":[],"call":["@silent ! ","@trace_logger nil? ! ","@trace_logger nil? "]}," Thin Headers has_key?":{"type":"method","name":"has_key?","children":[],"call":["@sent [] ","key downcase "]}," Thin Controllers Controller tail":{"type":"method","name":"tail","children":[],"call":[" sleep ","STDOUT  flush "," print ","contents length ","f read ","f mtime ","f mtime > ","f seek "," loop ","File  open ","Time  now ","File  size ","Thread  pass ","File  exist? ","Thread  new ","f read  length "]}," Thin Controllers Controller tail_log":{"type":"method","name":"tail_log","children":[],"call":["tail_thread kill "," tail "," tail  kill "]}," Thin Controllers Controller wait_for_file":{"type":"method","name":"wait_for_file","children":[],"call":[" sleep ","File  exist? ","Timeout  timeout ","@options [] "]}," Thin Controllers Cluster swiftiply?":{"type":"method","name":"swiftiply?","children":[],"call":["@options has_key? "]}," Thin Controllers Cluster only":{"type":"method","name":"only","children":[],"call":["@options [] "]}," Thin Controllers Cluster size":{"type":"method","name":"size","children":[],"call":["@options [] "]}," Thin SwiftiplyConnection host_ip":{"type":"method","name":"host_ip","children":[],"call":["Socket  gethostbyname [] unpack ","Socket  gethostbyname [] ","Socket  gethostbyname ","@connector host ","@backend host ","Addrinfo  getaddrinfo first ip_address split map ","Addrinfo  getaddrinfo first ip_address split ","Addrinfo  getaddrinfo first ip_address ","Addrinfo  getaddrinfo first ","Addrinfo  getaddrinfo ","@backend port "]}," Thin SwiftiplyConnection swiftiply_handshake":{"type":"method","name":"swiftiply_handshake","children":[],"call":["swiftclient << << << << ","swiftclient << << << "," sprintf ","key length ","swiftclient << << ","@connector port ","swiftclient << ","(send\n  (send nil :host_ip) :collect) join ","x to_i "," host_ip collect "," host_ip ","@backend port "]}," Thin SwiftiplyConnection unbind":{"type":"method","name":"unbind","children":[],"call":[" reconnect ","@connector port ","@connector host ","EventMachine  add_timer "," rand ","@connector running? ","@backend port ","@backend host ","@backend running? "]}," Thin SwiftiplyConnection persistent?":{"type":"method","name":"persistent?","children":[],"call":[]}," Thin SwiftiplyConnection connection_completed":{"type":"method","name":"connection_completed","children":[],"call":[" send_data "," swiftiply_handshake ","@connector key ","@backend key "]}," Thin Connectors SwiftiplyClient to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Thin Connectors SwiftiplyClient disconnect":{"type":"method","name":"disconnect","children":[],"call":["EventMachine  stop "]}," Thin Connectors SwiftiplyClient connect":{"type":"method","name":"connect","children":[],"call":["EventMachine  connect "," method "]}," Thin Connectors SwiftiplyClient initialize":{"type":"method","name":"initialize","children":[],"call":["port to_i "]}," Thin Connectors Connector running?":{"type":"method","name":"running?","children":[],"call":["@server running? "]}," Thin Connection persistent?":{"type":"method","name":"persistent?","children":[],"call":["@response persistent? "]}," Thin Connection can_persist?":{"type":"method","name":"can_persist?","children":[],"call":[]}," Thin Connection can_persist!":{"type":"method","name":"can_persist!","children":[],"call":[]}," Thin Server load_cgi_multipart_eof_fix":{"type":"method","name":"load_cgi_multipart_eof_fix","children":[],"call":[" log "," require ","RUBY_PLATFORM  !~ ","version [] <= ","version [] ","i to_i ","RUBY_VERSION  split map ","RUBY_VERSION  split "," log_error "]}," Thin Server config":{"type":"method","name":"config","children":[],"call":["@backend config "]}," Thin Daemonizable remove_stale_pid_file":{"type":"method","name":"remove_stale_pid_file","children":[],"call":[" remove_pid_file "," log "," raise ","(begin\n  (ivar :@pid_file)) + "," pid ","Process  running? ","File  exist? "," log_info "]}," Thin Backends UnixServer check_event_machine_version":{"type":"method","name":"check_event_machine_version","children":[],"call":[" raise ","UNIX domain sockets require EventMachine version 0.11.0 or higher,  + + ","UNIX domain sockets require EventMachine version 0.11.0 or higher,  + "," gem "]}," Thin Backends UnixServer remove_socket_file":{"type":"method","name":"remove_socket_file","children":[],"call":["File  delete ","File  exist? "]}," Thin Backends UnixServer to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Thin Backends UnixServer close":{"type":"method","name":"close","children":[],"call":[" remove_socket_file "]}," Thin Backends UnixServer disconnect":{"type":"method","name":"disconnect","children":[],"call":["EventMachine  stop_server "]}," Thin Backends UnixServer connect":{"type":"method","name":"connect","children":[],"call":["@acceptors keys first ","@acceptors keys ","EventMachine  instance_eval ","EventMachine  start_unix_domain_server "," method "," remove_socket_file "," at_exit ","File  umask "]}," Thin Backends UnixServer initialize":{"type":"method","name":"initialize","children":[],"call":[" check_event_machine_version "," raise ","Thin  win? "]}," Thin Backends TcpServer to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Thin Backends TcpServer disconnect":{"type":"method","name":"disconnect","children":[],"call":["EventMachine  stop_server "]}," Thin Backends TcpServer connect":{"type":"method","name":"connect","children":[],"call":["EventMachine  start_server "," method ","port_name [] ","Socket  unpack_sockaddr_in ","EventMachine  get_sockname ","Socket  unpack_sockaddr_in  [] "]}," Thin Backends TcpServer initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Thin Backends SwiftiplyClient to_s":{"type":"method","name":"to_s","children":[],"call":[]}," Thin Backends SwiftiplyClient disconnect":{"type":"method","name":"disconnect","children":[],"call":["EventMachine  stop "]}," Thin Backends SwiftiplyClient connect":{"type":"method","name":"connect","children":[],"call":["EventMachine  connect "," method "]}," Thin Backends SwiftiplyClient initialize":{"type":"method","name":"initialize","children":[],"call":["port to_i ","options [] to_s ","options [] "]}," Thin Backends Base initialize_connection":{"type":"method","name":"initialize_connection","children":[],"call":["@connections << ","connection can_persist! ","@persistent_connection_count < ","connection comm_inactivity_timeout= ","connection app= ","@server app ","connection backend= ","connection threaded= ","connection start_tls ","@connections []= ","connection __id__ "]}," Thin Backends Base size":{"type":"method","name":"size","children":[],"call":["@connections size "]}," Thin Backends Base empty?":{"type":"method","name":"empty?","children":[],"call":["@connections empty? "]}," Thin Backends Base connection_finished":{"type":"method","name":"connection_finished","children":[],"call":[" stop! ","@connections empty? ","@connections delete ","connection can_persist? ","connection __id__ "]}," Thin Backends Base running?":{"type":"method","name":"running?","children":[],"call":[]}," Thin Backends Base close":{"type":"method","name":"close","children":[],"call":[]}," Thin Backends Base config":{"type":"method","name":"config","children":[],"call":["EventMachine  set_descriptor_table_size ","Thin  win? ","EventMachine  epoll "]}," Thin Backends Base stop!":{"type":"method","name":"stop!","children":[],"call":[" close ","connection close_connection ","@connections each ","EventMachine  stop ","EventMachine  reactor_running? ","@connections each_value "]}," Thin Backends Base stop":{"type":"method","name":"stop","children":[],"call":[" stop! ","@connections empty? "," disconnect ","connection close_connection ","connection idle? ","@connections each ","@connections each_value "]}," Thin Backends Base start":{"type":"method","name":"start","children":[],"call":[" connect ","EventMachine  run ","starter call ","EventMachine  reactor_running? "," proc "," block_given? "]}," Thin Backends Base initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Thin Server select_backend":{"type":"method","name":"select_backend","children":[],"call":["Backends TcpServer  new ","Backends UnixServer  new ","host include? ","Backends SwiftiplyClient  new ","options has_key? ","options [] new ","options [] "," raise ","options [] is_a? "]}," Thin Runner ruby_require":{"type":"method","name":"ruby_require","children":[],"call":[" require ","@options []= "," warn ","File  extname == ","File  extname "]}," Thin Request threaded=":{"type":"method","name":"threaded=","children":[],"call":["@env []= "]}," Thin Controllers Controller load_rackup_config":{"type":"method","name":"load_rackup_config","children":[],"call":[" eval ","@options [] ","File  read "," raise ","Object  const_get ","File  basename capitalize to_sym ","File  basename capitalize ","File  basename ","Kernel  load ","ENV  []= ","Rack Adapter  load "]}," Thin Controllers Controller load_adapter":{"type":"method","name":"load_adapter","children":[],"call":[" raise ","e message ","Rack Adapter  for "," log ","Rack Adapter  guess ","@options [] "," log_info "]}," Thin OptionRequired initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Thin Connection terminate_request":{"type":"method","name":"terminate_request","children":[],"call":[" post_init "," persistent? ","@response close ","@request close "," close_request_response "," close_connection_after_writing "]}," Thin Connection handle_error":{"type":"method","name":"handle_error","children":[],"call":[" close_connection "," log_error "," log ","$! message "]}," Thin Connection post_process":{"type":"method","name":"post_process","children":[],"call":[" terminate_request "," handle_error "," close_connection_after_writing "," persistent? "," send_data "," trace ","@response each ","@response persistent! ","@request persistent? ","@response body= ","@response headers= ","@response status= "," log ","@response body nil? ","@response body "," set_content_length "," need_content_length? ","result first == ","AsyncResponse  first ","result first ","@response body errback ","@response body callback ","@response body respond_to? ","result to_a "," close_connection "," unexpected_error ","@request head? "," log_error ","@response skip_body! ","result to_a  first == ","result to_a  first ","result to_a  to_a "]}," Thin Connection pre_process":{"type":"method","name":"pre_process","children":[],"call":[" terminate_request "," handle_error ","@app call ","@request env ","@request remote_address= "," remote_address "," catch ","@request async_callback= "," method ","@request env []= "," get_peer_cert ","@backend ssl? ","@request persistent? "," can_persist? "," unexpected_error "," get_peer_ get_peer_cert  "]}," Thin Backends Base threaded?":{"type":"method","name":"threaded?","children":[],"call":[]}," Rack Adapter for":{"type":"method","name":"for","children":[],"call":[]}," Rack Adapter guess":{"type":"method","name":"guess","children":[],"call":[]}," Thin Connection threaded?":{"type":"method","name":"threaded?","children":[],"call":["@app deferred? ","@request env ","@app respond_to? "]}," Thin Daemonizable ClassMethods force_kill":{"type":"method","name":"force_kill","children":[],"call":["File  delete ","File  exist? ","Process  kill ","File  read ","Logging  log "," read_pid_file ","Logging  log_info "," read_ read_pid_file _file "]}," Thin Connection set_content_length":{"type":"method","name":"set_content_length","children":[],"call":["headers []= ","bytes to_s ","p size ","p bytesize ","p respond_to? ","body each ","(if\n  (send\n    (lvar :body) :respond_to?\n    (sym :bytesize))\n  (send\n    (lvar :body) :bytesize)\n  (send\n    (lvar :body) :size)) to_s ","body size ","body bytesize ","body respond_to? ","result [] "]}," Thin Connection need_content_length?":{"type":"method","name":"need_content_length?","children":[],"call":["body kind_of? ","headers [] =~ ","headers [] ","headers has_key? ","status == ","(irange\n  (int 100)\n  (int 199)) include? "]}," Thin Request async_close":{"type":"method","name":"async_close","children":[],"call":["@env [] "]}," Thin Request async_callback=":{"type":"method","name":"async_callback=","children":[],"call":["@env []= ","EventMachine DefaultDeferrable  new "]}," Thin Connection close_request_response":{"type":"method","name":"close_request_response","children":[],"call":["@response close ","@request close ","@request async_close succeed ","@request async_close "]}," Rack Adapter Rails CgiApp call":{"type":"method","name":"call","children":[],"call":["response finish ","Dispatcher  dispatch ","CGIWrapper  new ","Response  new ","Request  new ","Response  new  finish "]}," Thin Daemonizable ClassMethods read_pid_file":{"type":"method","name":"read_pid_file","children":[],"call":["pid to_i ","File  read ","File  file? ","File  read  to_i "]}," Thin Controllers Cluster wait_until_server_started":{"type":"method","name":"wait_until_server_started","children":[],"call":[" raise ","The server didn't start in time. Please look at server's log file  + + ","The server didn't start in time. Please look at server's log file  + "," sleep ","tries < "," wait ","test_socket close "," test_socket "," loop ","STDOUT  flush "," log "," log_info "," test_socket  close ","  test_socket  "]}," Thin Controllers Cluster test_socket":{"type":"method","name":"test_socket","children":[],"call":["TCPSocket  new "," address ","UNIXSocket  new "," socket_for "," socket "]}," Thin Controllers Cluster wait":{"type":"method","name":"wait","children":[],"call":["@options [] "]}," Thin Controllers Cluster onebyone":{"type":"method","name":"onebyone","children":[],"call":["@options [] "]}," Thin Backends Base ssl?":{"type":"method","name":"ssl?","children":[],"call":[]}," Rack Adapter Rails rack_based?":{"type":"method","name":"rack_based?","children":[],"call":["ActionController Dispatcher  instance_methods include? ","ActionController Dispatcher  instance_methods ","ActionController  const_defined? "," TINY  >= "," MINOR  >= "," MAJOR  >= "]}," Rack Adapter load":{"type":"method","name":"load","children":[],"call":[]}," Thin Server after_daemonize":{"type":"method","name":"after_daemonize","children":[],"call":[" setup_signals "]}," Thin Server reopen_log":{"type":"method","name":"reopen_log","children":[],"call":["Daemonize  redirect_io "," log ","File  expand_path "," log_file "," log_info "," log_File  expand_path  "]}," Thin Connection idle?":{"type":"method","name":"idle?","children":[],"call":[]}," Thin Server handle_signals":{"type":"method","name":"handle_signals","children":[],"call":[" handle_signals ","EM  next_tick ","@signal_queue empty? "," reopen_log "," restart "," stop "," stop! ","@signal_queue shift "]}," Thin Request head?":{"type":"method","name":"head?","children":[],"call":["@env [] == ","@env [] "]}," Thin Logging log_info":{"type":"method","name":"log_info","children":[],"call":["Logging  log_msg "]}," Thin Logging log_debug":{"type":"method","name":"log_debug","children":[],"call":["Logging  log_msg "]}," Thin Logging debug=":{"type":"method","name":"debug=","children":[],"call":[" level= "]}," Thin Logging trace_msg":{"type":"method","name":"trace_msg","children":[],"call":["@trace_logger info "]}," Thin Logging log_msg":{"type":"method","name":"log_msg","children":[],"call":["@logger add "]}," Thin Logging trace_logger=":{"type":"method","name":"trace_logger=","children":[],"call":[" raise ","custom_tracer respond_to? ! ","custom_tracer respond_to? ","(sym :level) each "]}," Thin Logging logger=":{"type":"method","name":"logger=","children":[],"call":[" raise ","custom_logger respond_to? ! ","custom_logger respond_to? ","(sym :level) each "]}," Thin Logging level=":{"type":"method","name":"level=","children":[],"call":["@logger level= ","Logger  new ","@logger nil? ","Logger  new  level= ","Logger  new  nil? "]}," Thin Logging level":{"type":"method","name":"level","children":[],"call":["@logger level "]}," Thin Logging trace=":{"type":"method","name":"trace=","children":[],"call":["Logger  new "]}," Thin Logging SimpleFormatter call":{"type":"method","name":"call","children":[],"call":["msg inspect ","String  === "]}," Thin Connection unexpected_error":{"type":"method","name":"unexpected_error","children":[],"call":[" log_error "]}," Thin Backends Base threadpool_size=":{"type":"method","name":"threadpool_size=","children":[],"call":["EventMachine  threadpool_size= "]}," Thin Response skip_body!":{"type":"method","name":"skip_body!","children":[],"call":[]}," Thin Connection ssl_verify_peer":{"type":"method","name":"ssl_verify_peer","children":[],"call":[]}," Thin Backends Base started_reactor?":{"type":"method","name":"started_reactor?","children":[],"call":[]}," Thin Daemonizable ClassMethods monotonic_time":{"type":"method","name":"monotonic_time","children":[],"call":["Process  clock_gettime "]}," Thin Daemonizable kill":{"type":"method","name":"kill","children":[],"call":[" class kill "," class ","File  exist? "]}," Rack Handler Thin valid_options":{"type":"method","name":"valid_options","children":[],"call":[]}}