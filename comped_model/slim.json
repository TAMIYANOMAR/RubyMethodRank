{" Slim version":{"type":"method","name":"version","children":[],"call":[]}," ActionView TemplateHandlers SlimHandler compile":{"type":"method","name":"compile","children":[],"call":["Slim Engine  new compiled ","Slim Engine  new ","template source ","Slim Engine  new optimized ","Slim Engine  new compile ","Slim Engine  new prepare "]}," Slim Engine render":{"type":"method","name":"render","children":[],"call":["scope instance_eval "," compiled "," optimized "]}," Slim Engine initialize":{"type":"method","name":"initialize","children":[],"call":[" compile ","Temple ImmutableHash  new ","deprecated empty? ","deprecated []= "," options [] "," options "," options include? "]}," Slim Compiler compile":{"type":"method","name":"compile","children":[],"call":["@compiled << ","t [] to_s ","t [] ","enders reverse_each "," raise ","NotImplementedError  new ","enders << ","e [] == ","e [] ","enders detect ","AUTOCLOSED  include? ","line_type == ","ender == ","ender_indent >= ","enders pop ","enders empty? ","continue_closing == ","indent > ","string strip length > ","string strip length ","string strip ","string strip! ","attrs gsub! ","1 to_s length ","1 to_s ","line =~ ","line length == ","line length ","line rstrip! ","line chomp! ","@template each_line ","1 strip ","string =~ ","string lstrip! "," optimize ","@_buffer join ","@_buffer << ","ender_indent == ","string to_s length > ","string to_s length ","string to_s ","line_type != ","(send\n  (str \" \") :*\n  (begin\n    (send\n      (lvar :spaces) :-\n      (int 1)))) + ","line lstrip ","  * ","spaces - ","indent - "," parenthesesify_method ","string empty? "," normalize_attributes ","marker empty? "," optimize! "," parse_string ","ender_indent < "," normalize_attributes! ","string slice! ","line empty? ","5 strip ","attrs =~ ","attrs empty? ","@_buffer join  << ","ender_1 to_s length  >= ","1 to_s length  > ","5 strip  strip length > ","5 strip  strip length ","5 strip  strip ","5 strip  strip! "," normalize_attributes  gsub! ","5 strip  =~ ","5 strip  lstrip! ","ender_1 to_s length  == ","5 strip  to_s length > ","5 strip  to_s length ","5 strip  to_s ","(send\n  (str \" \") :*\n  (begin\n    (send\n      (lvar :indent - ) :-\n      (int 1)))) + ","indent -  - ","1 to_s length  - ","5 strip  empty? "," parse_5 strip  ","ender_1 to_s length  < ","5 strip  slice! "," normalize_attributes  =~ "," normalize_attributes  empty? "]}," Slim Optimizer optimize":{"type":"method","name":"optimize","children":[],"call":["@optimized << ","string << ","line =~ ","@_buffer each "]}," Slim Compiler normalize_attributes":{"type":"method","name":"normalize_attributes","children":[],"call":["string gsub! ","string sub! "]}," Slim Compiler parenthesesify_method":{"type":"method","name":"parenthesesify_method","children":[],"call":["string << ","string sub! ","string =~ "]}," Slim escape_html":{"type":"method","name":"escape_html","children":[],"call":["EscapeUtils  escape_html ","html to_s "]}," Slim Optimizer optimize!":{"type":"method","name":"optimize!","children":[],"call":["optimized << ","string << ","line =~ ","@_buffer each "]}," Slim Compiler normalize_attributes!":{"type":"method","name":"normalize_attributes!","children":[],"call":["string gsub! ","string sub! "]}," Slim Compiler wraps_with_slim_escape!":{"type":"method","name":"wraps_with_slim_escape!","children":[],"call":["string sub! "]}," Slim Compiler parenthesesify_method!":{"type":"method","name":"parenthesesify_method!","children":[],"call":["string << ","string sub! "]}," Slim Compiler parse_string":{"type":"method","name":"parse_string","children":[],"call":["string strip "," wraps_with_slim_escape! ","string =~ "," parenthesesify_method! ","1 strip ","string << "]}," Slim Template precompiled_template":{"type":"method","name":"precompiled_template","children":[],"call":[]}," Slim Template evaluate":{"type":"method","name":"evaluate","children":[],"call":[" extend ","scope instance_eval "," options [] "," options "]}," Slim Template prepare":{"type":"method","name":"prepare","children":[],"call":["Engine  new compile "," data ","Engine  new "," options merge "," eval_file "," options "]}," Slim Parser syntax_error!":{"type":"method","name":"syntax_error!","children":[],"call":[" raise ","SyntaxError  new ","@options [] "," options [] "," options ","args [] ","args [] size - ","args [] size ","@orig_line size - ","@line size ","@orig_line size ","ex backtrace unshift ","ex backtrace "]}," Slim Parser parse_ruby_attribute":{"type":"method","name":"parse_ruby_attribute","children":[],"call":["value [] ","DELIMITERS  [] == ","DELIMITERS  [] ","value =~ "," syntax_error! ","value empty? ","stack last ","stack empty? ! ","stack empty? ","value << ","line slice! ","stack pop ","stack last != ","line =~ ","stack << ","line empty? ","Regexp  escape ","#{%s} % ","@line slice! ","@line =~ ","@line empty? ","delimiter to_s ","count != ","@line [] == ","close_delimiter [] ","@line [] ","delimiter [] ","count > ","count == ","outer_delimiter to_s ","value []  [] ","value []  =~ ","value []  empty? ","value []  << "]}," Slim Parser parse_tag":{"type":"method","name":"parse_tag","children":[],"call":["orig_line size - + ","orig_line size - ","line size ","orig_line size ","content << ","line sub ","line empty? ! ","line empty? ","1 != ","$' strip ","line =~ "," syntax_error! ","line slice! ","line [] == ","line [] ","delimiter empty? ! ","delimiter empty? ","attributes << "," parse_ruby_attribute ","1 [] ","line []= ","DELIMITERS  [] ","ATTR_SHORTHAND  [] ","line sub! ","line strip empty? ","line strip ","tag []= ","Regexp  escape ","tag pop ","line [] != "," parse_text_block ","size - + ","size - ","@line size ","@stacks << ","tag << ","@line sub "," parse_broken_line ","@stacks last << ","@stacks last "," parse_attributes ","@line slice! ","tag size ","tag == ","@orig_line size - + ","1 size ","@orig_line size - ","@orig_line size "," options [] "," options ","2 empty? ","@stacks delete_at "," parse_tag ","@stacks size ","@line =~ ","@shortcut [] [] ","@shortcut [] ","@tag_shortcut [] ","@attr_shortcut [] ","@line empty? ","trailing_ws ! ","2 include? ","leading_ws ! ","$& include? ","shortcut each ","@stacks last insert ","$' size ","2 size "," deprecated_syntax ","< freeze ","' freeze ","> freeze ","k to_s ","additional_attr_pairs each ","@additional_attrs [] ","shortcut call each ","shortcut call ","shortcut is_a? ","orig_line @line size  - + ","or@stacks size g_l@stacks size ne s@stacks size ze - + ","orig_line @line size  - ","or@stacks size g_l@stacks size ne s@stacks size ze - ","line @line size  ","l@stacks size ne s@stacks size ze ","orig_line @line size  ","or@stacks size g_l@stacks size ne s@stacks size ze ","l@stacks size ne sub ","l@stacks size ne empty? ! ","l@stacks size ne empty? ","$' str@stacks size p ","l@stacks size ne =~ ","l@stacks size ne sl@stacks size ce! ","l@stacks size ne [] == ","l@stacks size ne [] ","DELIMITERS  []  empty? ! ","del@stacks size m@stacks size ter empty? ! ","DELIMITERS  []  empty? ","del@stacks size m@stacks size ter empty? ","attr@stacks size butes << "," parse_ruby_attr@stacks size bute ","l@stacks size ne []= ","l@stacks size ne sub! ","l@stacks size ne str@stacks size p empty? ","l@stacks size ne str@stacks size p "," options []  []= ","@tag_shortcut []  []= ","Regexp  line [] !=  "," options []  pop ","@tag_shortcut []  pop ","l@stacks size ne [] != ","@line size  - + ","s@stacks size ze - + ","@line size  - ","s@stacks size ze - ","@line @line size  ","@l@stacks size ne s@stacks size ze "," options []  << ","@tag_shortcut []  << ","@l@stacks size ne sub "," parse_$' strip  "," parse_broken_l@stacks size ne "," parse_attr@stacks size butes ","@l@stacks size ne sl@stacks size ce! ","tag @line size  "," options []  size ","@tag_shortcut []  size ","tag s@stacks size ze "," options []  == ","@tag_shortcut []  == ","@orig_line @line size  - + ","@or@stacks size g_l@stacks size ne s@stacks size ze - + ","1 @line size  ","1 s@stacks size ze ","@orig_line @line size  - ","@or@stacks size g_l@stacks size ne s@stacks size ze - ","@orig_line @line size  ","@or@stacks size g_l@stacks size ne s@stacks size ze "," opt@stacks size ons [] "," opt@stacks size ons "," parse_ options []  "," parse_@tag_shortcut []  ","@stacks @line size  ","@stacks s@stacks size ze ","@l@stacks size ne =~ ","@@attr_shortcut []  [] [] ","@@attr_shortcut []  [] ","@ options [] _shortcut [] ","@@tag_shortcut [] _shortcut [] ","@tag_@attr_shortcut []  [] ","@attr_@attr_shortcut []  [] ","@l@stacks size ne empty? ","tra@stacks size l@stacks size ng_ws ! ","$& include?  ! ","2 @stacks size nclude? ","lead@stacks size ng_ws ! ","$& @stacks size nclude? ","@attr_shortcut []  each ","@stacks last @stacks size nsert ","$' @line size  ","$' s@stacks size ze ","2 @line size  ","2 s@stacks size ze ","add@stacks size t@stacks size onal_attr_pa@stacks size rs each ","@additional_attrs []  each ","@add@stacks size t@stacks size onal_attrs [] ","@additional_ parse_attributes  [] ","@attr_shortcut []  call each ","@attr_shortcut []  call ","shortcut @stacks size s_a? ","@attr_shortcut []  is_a? "]}," Slim Parser compile":{"type":"method","name":"compile","children":[],"call":["stacks last << ","stacks last ","stacks << "," parse_tag ","stacks last << << ","line =~ ","line [] strip ","line [] ","line [] == ","block_indent + ","block << ","line sub ","line strip empty? ! ","line strip empty? ","line strip ","in_comment ! ","line slice! "," syntax_error! ","indents last < ","indents last ","stacks pop ","indents pop ","indent < ","indents << ","indent > ","stacks size > ","indents size ","stacks size ","i + ","  * ","offset < ","indent - ","line lstrip! ","line [] gsub size ","line [] gsub ","broken_line << << ","broken_line << ","broken_line [] == ","broken_line [] ","line chop! ","str each_line ","text_indent + ","line [] != ","line chomp! ","newline + + ","newline + ","in_slim_comment ! ","ch == ","$' strip ","directive [] ","directive [] downcase ","line [] strip split ","l  * ne =~ ","l  * ne [] str  * p ","l  * ne [] ","l  * ne [] == ","block_  * ndent + ","block_line [] gsub size  + ","l  * ne sub ","l  * ne str  * p empty? ! ","l  * ne str  * p empty? ","l  * ne str  * p ","line [] ==  ! ","ch ==  ! ","  * n_comment ! ","l  * ne sl  * ce! ","  * ndents last < ","line [] gsub size s last < ","  * ndents last ","line [] gsub size s last ","  * ndents pop ","line [] gsub size s pop ","  * ndent < ","line [] gsub size  < ","  * ndents << ","line [] gsub size s << ","  * ndent > ","line [] gsub size  > ","stacks s  * ze > ","  * ndents s  * ze ","line [] gsub size s size ","stacks s  * ze ","  *  + ","indent -  < ","  * ndent - ","line [] gsub size  - ","l  * ne lstr  * p! ","l  * ne [] gsub s  * ze ","l  * ne [] gsub ","line [] strip  << << ","broken_l  * ne << << ","line [] strip  << ","broken_l  * ne << ","line [] strip  [] == ","broken_l  * ne [] == ","line [] strip  [] ","broken_l  * ne [] ","l  * ne chop! ","line line slice! op! ","str each_l  * ne ","str ealine slice! _line ","block_indent +  + ","text_  * ndent + ","text_line [] gsub size  + ","l  * ne [] != ","l  * ne chomp! ","line line slice! omp! ","newl  * ne + + ","newl  * ne + ","  * n_sl  * m_comment ! ","line slice!  == ","$' str  * p ","d  * rect  * ve [] ","line [] strip split  [] ","d  * rect  * ve [] downcase ","line [] strip split  [] downcase ","l  * ne [] str  * p spl  * t "]}," Slim Parser initialize":{"type":"method","name":"initialize","children":[],"call":["  * ","options [] ","@options [] ","Regexp  escape ","@shortcut keys join ","@shortcut keys ","@shortcut []= ","v =~ ","@options [] each "," options [] "," options "," options [] each "," shortcut_regex "," raise ","k =~ ","@attr_shortcut []= ","v [] ","v include? ","@tag_shortcut []= ","(send\n  (send\n    (lvar :v) :keys) :-\n  (array\n    (sym :attr)\n    (sym :tag))) empty? ","v keys - ","v keys "," deprecated_shortcut ","String  === ","Regexp  union ","@tag_shortcut keys ","@attr_shortcut keys ","\\1 + ","tabsize - ","tabsize > ","k size -@ ","k size ","@tag_shortcut keys sort_by ","@attr_shortcut keys sort_by ","(send\n  (lvar :v) :[]\n  (sym :attr)) flatten "," options [] keys join "," options [] keys ","Embedded  engines keys map ","Embedded  engines keys ","Embedded  engines ","@attr_list_delims keys join ","@attr_list_delims keys ","@code_attr_delims keys join ","@code_attr_delims keys ","(send\n  (begin\n    (send\n      (send\n        (ivar :@attr_list_delims) :flatten) :+\n      (send\n        (ivar :@code_attr_delims) :flatten))) :map) join ","(send\n  (send\n    (ivar :@attr_list_delims) :flatten) :+\n  (send\n    (ivar :@code_attr_delims) :flatten)) map ","@attr_list_delims flatten + ","@code_attr_delims flatten ","@attr_list_delims flatten ","(send\n  (send\n    (send\n      (str \"\\\"'></=\") :split\n      (regexp\n        (regopt))) :+\n    (send\n      (ivar :@attr_list_delims) :flatten)) :+\n  (send\n    (ivar :@code_attr_delims) :flatten)) uniq join ","(send\n  (send\n    (send\n      (str \"\\\"'></=\") :split\n      (regexp\n        (regopt))) :+\n    (send\n      (ivar :@attr_list_delims) :flatten)) :+\n  (send\n    (ivar :@code_attr_delims) :flatten)) uniq ","\"'></= split + + ","\"'></= split + ","\"'></= split ","@additional_attrs []= ","(send\n  (send\n    (lvar :v) :keys) :-\n  (array\n    (sym :attr)\n    (sym :tag)\n    (sym :additional_attrs))) empty? ","Regexp  new ","\\A\\s* << << ","\\A\\s* << ","\\A\\s* + + ","\\A\\s* + ","v [] is_a? ","@shortcut Regexp  union  join ","@shortcut Regexp  escape  join ","@shortcut Regexp  union  ","@shortcut Regexp  escape  "," deprecated_shortcut  =~ "," deprecated_shortcut  [] "," deprecated_shortcut  include? ","(send\n  (send\n    (l deprecated_shortcut ar : deprecated_shortcut ) :keys) :-\n  (array\n    (sym :attr)\n    (sym :tag))) empty? ","(send\n  (send\n    (lvar :v) :Regexp  union ) :-\n  (array\n    (sym :attr)\n    (sym :tag))) empty? ","(send\n  (send\n    (lvar :v) :Regexp  escape ) :-\n  (array\n    (sym :attr)\n    (sym :tag))) empty? "," deprecated_shortcut  keys - ","v Regexp  union  - ","v Regexp  escape  - "," deprecated_shortcut  keys ","v Regexp  union  ","v Regexp  escape  ","@tag_shortcut Regexp  union  ","@tag_shortcut Regexp  escape  ","@attr_shortcut Regexp  union  ","@attr_shortcut Regexp  escape  "," options []  - "," options []  > ","@tag_shortcut Regexp  union  sort_by ","@tag_shortcut Regexp  escape  sort_by ","@attr_shortcut Regexp  union  sort_by ","@attr_shortcut Regexp  escape  sort_by ","(send\n  (l deprecated_shortcut ar : deprecated_shortcut ) :[]\n  (sym :attr)) flatten "," options [] Regexp  union  join "," options [] Regexp  escape  join "," options [] Regexp  union  "," options [] Regexp  escape  ","Embedded  engines Regexp  union  map ","Embedded  engines Regexp  escape  map ","Embedded  engines Regexp  union  ","Embedded  engines Regexp  escape  ","@attr_list_delims Regexp  union  join ","@attr_list_delims Regexp  escape  join "," options []  keys join ","@attr_list_delims Regexp  union  ","@attr_list_delims Regexp  escape  "," options []  keys ","@code_attr_delims Regexp  union  join ","@code_attr_delims Regexp  escape  join ","@code_attr_delims Regexp  union  ","@code_attr_delims Regexp  escape  ","(send\n  (begin\n    (send\n      (send\n        (i deprecated_shortcut ar :@attr_list_delims) :flatten) :+\n      (send\n        (i deprecated_shortcut ar :@code_attr_delims) :flatten))) :map) join ","(send\n  (begin\n    (send\n      (send\n        (ivar :@attr_list_delims) :flatten) :+\n      (send\n        (ivar : options [] ) :flatten))) :map) join ","(send\n  (begin\n    (send\n      (send\n        (ivar : options [] ) :flatten) :+\n      (send\n        (ivar :@code_attr_delims) :flatten))) :map) join ","(send\n  (send\n    (i deprecated_shortcut ar :@attr_list_delims) :flatten) :+\n  (send\n    (i deprecated_shortcut ar :@code_attr_delims) :flatten)) map ","(send\n  (send\n    (ivar :@attr_list_delims) :flatten) :+\n  (send\n    (ivar : options [] ) :flatten)) map ","(send\n  (send\n    (ivar : options [] ) :flatten) :+\n  (send\n    (ivar :@code_attr_delims) :flatten)) map "," options []  flatten + "," options []  flatten ","(send\n  (send\n    (send\n      (str \"\\\"'></=\") :split\n      (regexp\n        (regopt))) :+\n    (send\n      (i deprecated_shortcut ar :@attr_list_delims) :flatten)) :+\n  (send\n    (i deprecated_shortcut ar :@code_attr_delims) :flatten)) uniq join ","(send\n  (send\n    (send\n      (str \"\\\"'></=\") :split\n      (regexp\n        (regopt))) :+\n    (send\n      (ivar :@attr_list_delims) :flatten)) :+\n  (send\n    (ivar : options [] ) :flatten)) uniq join ","(send\n  (send\n    (send\n      (str \"\\\"'></=\") :split\n      (regexp\n        (regopt))) :+\n    (send\n      (ivar : options [] ) :flatten)) :+\n  (send\n    (ivar :@code_attr_delims) :flatten)) uniq join ","(send\n  (send\n    (send\n      (str \"\\\"'></=\") :split\n      (regexp\n        (regopt))) :+\n    (send\n      (i deprecated_shortcut ar :@attr_list_delims) :flatten)) :+\n  (send\n    (i deprecated_shortcut ar :@code_attr_delims) :flatten)) uniq ","(send\n  (send\n    (send\n      (str \"\\\"'></=\") :split\n      (regexp\n        (regopt))) :+\n    (send\n      (ivar :@attr_list_delims) :flatten)) :+\n  (send\n    (ivar : options [] ) :flatten)) uniq ","(send\n  (send\n    (send\n      (str \"\\\"'></=\") :split\n      (regexp\n        (regopt))) :+\n    (send\n      (ivar : options [] ) :flatten)) :+\n  (send\n    (ivar :@code_attr_delims) :flatten)) uniq ","(send\n  (send\n    (l deprecated_shortcut ar : deprecated_shortcut ) :keys) :-\n  (array\n    (sym :attr)\n    (sym :tag)\n    (sym :additional_attrs))) empty? ","(send\n  (send\n    (lvar :v) :Regexp  union ) :-\n  (array\n    (sym :attr)\n    (sym :tag)\n    (sym :additional_attrs))) empty? ","(send\n  (send\n    (lvar :v) :Regexp  escape ) :-\n  (array\n    (sym :attr)\n    (sym :tag)\n    (sym :additional_attrs))) empty? "," deprecated_shortcut  [] is_a? "]}," Slim Parser SyntaxError to_s":{"type":"method","name":"to_s","children":[],"call":["  * "," column "," line "," lineno "," file "," error ","@column + - ","@line size ","@column + ","line size ","@line strip ","@line lstrip "," @column + -  "," @line strip  "," @line lstrip  "," @line strip no "," @line lstrip no ","@@column + -  + - ","@@line strip  size ","@@line lstrip  size ","@@column + -  + ","@line strip  size ","@line lstrip  size ","@@line strip  strip ","@@line lstrip  strip ","@@line strip  lstrip ","@@line lstrip  lstrip "]}," Slim Parser SyntaxError initialize":{"type":"method","name":"initialize","children":[],"call":["line strip ","line to_s "]}," Slim Helpers escape_html":{"type":"method","name":"escape_html","children":[],"call":["html to_s gsub gsub gsub gsub gsub ","html to_s gsub gsub gsub gsub ","html to_s gsub gsub gsub ","html to_s gsub gsub ","html to_s gsub ","html to_s ","EscapeUtils  escape_html "]}," Slim Helpers escape_html_safe":{"type":"method","name":"escape_html_safe","children":[],"call":[" escape_html ","html html_safe? "]}," Slim Helpers list_of":{"type":"method","name":"list_of","children":[],"call":["list html_safe ","list respond_to? ","(send\n  (lvar :enum) :map) join ","enum map ","(send\n  (lvar :enum) :map) join  html_safe ","(send\n  (lvar :enum) :map) join  respond_to? "]}," Slim Debugger compile":{"type":"method","name":"compile","children":[],"call":[" puts ","exp inspect "]}," Slim Filter on_multi":{"type":"method","name":"on_multi","children":[],"call":[" compile ","exps map "]}," Slim Filter on_tag":{"type":"method","name":"on_tag","children":[],"call":[" compile "]}," Slim Filter on_control":{"type":"method","name":"on_control","children":[],"call":[" compile "]}," Slim Filter compile":{"type":"method","name":"compile","children":[],"call":[" send "," respond_to? ","exp [] == ","exp [] "]}," Slim Filter initialize":{"type":"method","name":"initialize","children":[],"call":["DEFAULT_OPTIONS  merge "]}," Slim EndInserter control?":{"type":"method","name":"control?","children":[],"call":["exp [] == ","exp [] "]}," Slim EndInserter append_end":{"type":"method","name":"append_end","children":[],"call":["result << "]}," Slim EndInserter on_multi":{"type":"method","name":"on_multi","children":[],"call":[" append_end ","result << "," compile ","exp [] != ","exp [] "," empty_exp? ! "," empty_exp? ","exp [] match nil? ","exp [] match ","exp [] !~ "," control? ","exps each "," compile! "," raise ","exp [] =~ "]}," Slim EmbeddedEngine RubyEngine on_embedded":{"type":"method","name":"on_embedded","children":[],"call":[" collect_text "]}," Slim EmbeddedEngine TagEngine on_embedded":{"type":"method","name":"on_embedded","children":[],"call":["@options [] map ","@options [] ","@options [] new on_embedded ","@options [] new "]}," Slim EmbeddedEngine TiltEngine on_embedded":{"type":"method","name":"on_embedded","children":[],"call":["(send\n  (lvar :engine) :new) render ","engine new ","@options [] ","text inspect ","engine name ","(send\n  (lvar :engine) :new) send first ","(send\n  (lvar :engine) :new) send ","Tilt  [] "," collect_text ","(send\n  (lvar :Tilt  [] ) :new) render ","Tilt  []  new "," collect_text  inspect ","Tilt  []  name ","(send\n  (lvar :Tilt  [] ) :new) send first ","(send\n  (lvar :Tilt  [] ) :new) send "," collect_ collect_text  "]}," Slim EmbeddedEngine collect_text":{"type":"method","name":"collect_text","children":[],"call":["text << ","exp [] == ","exp [] ","body inject ","body [] inject ","body [] ","@text_collector call ","TextCollector  new "]}," Slim EmbeddedEngine on_embedded":{"type":"method","name":"on_embedded","children":[],"call":["EmbeddedEngine  [] on_embedded ","EmbeddedEngine  [] "]}," Slim EmbeddedEngine []":{"type":"method","name":"[]","children":[],"call":[]}," Slim EmbeddedEngine register":{"type":"method","name":"register","children":[],"call":["@engines []= ","name to_s ","option_filter pop ","Hash  === ","option_filter last "]}," Slim Compiler tmp_var":{"type":"method","name":"tmp_var","children":[],"call":[]}," Slim Compiler escape_code":{"type":"method","name":"escape_code","children":[],"call":["@options [] "]}," Slim Compiler on_tag":{"type":"method","name":"on_tag","children":[],"call":[" compile ","m << ","key to_s "," on_text "," escape_code ","attrs inject "," escape_interpolation ","value include? "," on_text  include? "]}," Slim Compiler on_directive":{"type":"method","name":"on_directive","children":[],"call":["$' strip ","type =~ "]}," Slim Compiler on_output_block":{"type":"method","name":"on_output_block","children":[],"call":[" on_output "," compile "," tmp_var "]}," Slim Compiler on_output":{"type":"method","name":"on_output","children":[],"call":[" on_output_block "," escape_code "," empty_exp? "]}," Slim Compiler on_control":{"type":"method","name":"on_control","children":[],"call":[" compile "]}," Slim Compiler on_text":{"type":"method","name":"on_text","children":[],"call":["block << "," escape_code ","string empty? "," escape_interpolation ","string include? "]}," Slim Command process":{"type":"method","name":"process","children":[],"call":["@options [] puts ","(send\n  (const\n    (const nil :Slim) :Template) :new\n  (send\n    (ivar :@options) :[]\n    (sym :file))) render ","@options [] read ","@options [] ","Slim Template  new ","Slim Engine  new compile ","Slim Engine  new ","@options []= ","File  open ","args shift ","@args dup ","(send\n  (const\n    (const nil :Slim) :Template) :new\n  (send\n    (ivar :@options) :[]\n    (sym :file))\n  (hash\n    (pair\n      (sym :pretty)\n      (send\n        (ivar :@options) :[]\n        (sym :pretty)))\n    (pair\n      (sym :sections)\n      (send\n        (ivar :@options) :[]\n        (sym :sections))))) render ","(send\n  (const\n    (const nil :Slim) :Template) :new\n  (send\n    (ivar :@options) :[]\n    (sym :file))\n  (hash\n    (pair\n      (sym :pretty)\n      (send\n        (ivar :@options) :[]\n        (sym :pretty)))\n    (pair\n      (sym :debug)\n      (send\n        (ivar :@options) :[]\n        (sym :debug)))\n    (pair\n      (sym :sections)\n      (send\n        (ivar :@options) :[]\n        (sym :sections))))) render ","Slim Engine  new call ","(send\n  (const\n    (const nil :Slim) :Template) :new\n  (send\n    (ivar :@options) :[]\n    (sym :file))\n  (hash\n    (pair\n      (sym :pretty)\n      (send\n        (ivar :@options) :[]\n        (sym :pretty)))\n    (pair\n      (sym :tr)\n      (send\n        (ivar :@options) :[]\n        (sym :translator)))\n    (pair\n      (sym :logic_less)\n      (send\n        (ivar :@options) :[]\n        (sym :logic_less))))) render ","(send\n  (const nil :Template) :new\n  (send\n    (ivar :@options) :[]\n    (sym :file))) render ","Template  new ","Engine  new call ","Engine  new ","ERBConverter  new call ","ERBConverter  new "," require "," exit ","$stderr puts ","ex message ","$stderr print ","ex class ","ex class != "," raise ","SystemExit  === ","@options delete ","(send\n  (const\n    (const nil :Slim) :Template) :new\n  (send\n    (ivar :@options) :[]\n    (sym :args shift ))) render ","@args dup  shift ","@@args dup  dup ","(send\n  (const\n    (const nil :Slim) :Template) :new\n  (send\n    (ivar :@options) :[]\n    (sym :args shift ))\n  (hash\n    (pair\n      (sym :pretty)\n      (send\n        (ivar :@options) :[]\n        (sym :pretty)))\n    (pair\n      (sym :sections)\n      (send\n        (ivar :@options) :[]\n        (sym :sections))))) render ","(send\n  (const\n    (const nil :Slim) :Template) :new\n  (send\n    (ivar :@options) :[]\n    (sym :args shift ))\n  (hash\n    (pair\n      (sym :pretty)\n      (send\n        (ivar :@options) :[]\n        (sym :pretty)))\n    (pair\n      (sym :debug)\n      (send\n        (ivar :@options) :[]\n        (sym :debug)))\n    (pair\n      (sym :sections)\n      (send\n        (ivar :@options) :[]\n        (sym :sections))))) render ","(send\n  (const\n    (const nil :Slim) :Template) :new\n  (send\n    (ivar :@options) :[]\n    (sym :args shift ))\n  (hash\n    (pair\n      (sym :pretty)\n      (send\n        (ivar :@options) :[]\n        (sym :pretty)))\n    (pair\n      (sym :tr)\n      (send\n        (ivar :@options) :[]\n        (sym :translator)))\n    (pair\n      (sym :logic_less)\n      (send\n        (ivar :@options) :[]\n        (sym :logic_less))))) render ","(send\n  (const nil :Template) :new\n  (send\n    (ivar :@options) :[]\n    (sym :args shift ))) render "]}," Slim Command set_opts":{"type":"method","name":"set_opts","children":[],"call":[" exit "," puts ","Slim  version ","opts on_tail ","@options []= ","opts on ","Engine  default_options []= "," eval ","parts last ","parts first to_sym ","parts first ","Engine  default_options ","str split ","Engine  set_default_options "," require ","parts first gsub to_sym ","parts first gsub ","Engine  options []= ","Engine  options ","Engine  set_options ","YAML  load ","$stderr puts ","RUBY_ENGINE  == ","locals =~ ","lib strip ","str split  last ","str split  first to_sym ","str split  first ","str split  first gsub to_sym ","str split  first gsub "]}," Slim Command run":{"type":"method","name":"run","children":[],"call":[" exit ","$stderr puts ","ex message ","$stderr print ","ex class ","ex class != "," raise ","SystemExit  === ","@options [] "," process ","@opts parse! ","OptionParser  new "," method ","OptionParser  new  parse! "]}," Slim Command initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Slim Engine new":{"type":"method","name":"new","children":[],"call":[]}," Slim EmbeddedEngine RubyEngine compile":{"type":"method","name":"compile","children":[],"call":[" collect_text "]}," Slim EmbeddedEngine TagEngine compile":{"type":"method","name":"compile","children":[],"call":[" compile_text "," options [] "," options ","attrs << ","value to_s ","key to_s "," options [] each "]}," Slim EmbeddedEngine TagEngine compile_text":{"type":"method","name":"compile_text","children":[],"call":["block << ","exp [] ","exp [] == ","body inject "]}," Slim EmbeddedEngine TiltEngine compile":{"type":"method","name":"compile","children":[],"call":["(send\n  (lvar :engine) :new) render ","engine new ","\"%s\" % "," options [] "," options ","text inspect ","engine name ","(send\n  (lvar :engine) :new) send first ","(send\n  (lvar :engine) :new) send ","Tilt  [] "," collect_text ","(send\n  (lvar :Tilt  [] ) :new) render ","Tilt  []  new "," collect_text  inspect ","Tilt  []  name ","(send\n  (lvar :Tilt  [] ) :new) send first ","(send\n  (lvar :Tilt  [] ) :new) send "," collect_ collect_text  "]}," Slim EmbeddedEngine initialize":{"type":"method","name":"initialize","children":[],"call":[" normalize_engine_list "," options [] "," options "]}," Slim Compiler escape_interpolation":{"type":"method","name":"escape_interpolation","children":[],"call":["\"%s\" % "," escape_code ","1 == ","string gsub! "]}," Slim Compiler on_embedded":{"type":"method","name":"on_embedded","children":[],"call":["EmbeddedEngine  [] compile ","EmbeddedEngine  [] "]}," Slim Filter on_slim_tag":{"type":"method","name":"on_slim_tag","children":[],"call":[" compile! "," compile ","tag << "]}," Slim Filter on_slim_output":{"type":"method","name":"on_slim_output","children":[],"call":[" compile! "," compile "]}," Slim Filter on_slim_control":{"type":"method","name":"on_slim_control","children":[],"call":[" compile! "," compile "]}," Slim EmbeddedEngine RubyEngine on_slim_embedded":{"type":"method","name":"on_slim_embedded","children":[],"call":[" collect_text ","\n + ","CollectText  new call ","CollectText  new ","CollectText  new call + "]}," Slim EmbeddedEngine TagEngine on_slim_embedded":{"type":"method","name":"on_slim_embedded","children":[],"call":[" options [] map "," options [] "," options "," options [] new on_slim_embedded "," options [] new ","@engine on_slim_embedded ","opts delete "," update "," update  delete "]}," Slim EmbeddedEngine ERBEngine on_slim_embedded":{"type":"method","name":"on_slim_embedded","children":[],"call":["Temple ERB Parser  new compile ","Temple ERB Parser  new "," collect_text ","Temple ERB Parser  new call ","CollectText  new call ","CollectText  new "," erb_parser call "," erb_parser "," collect_ collect_text  "]}," Slim EmbeddedEngine TiltEngine on_slim_embedded":{"type":"method","name":"on_slim_embedded","children":[],"call":["(send\n  (lvar :engine) :new) render ","engine new "," options [] "," options ","text inspect ","engine name ","(send\n  (lvar :engine) :new) send first ","(send\n  (lvar :engine) :new) send ","Tilt  [] "," collect_text "," tilt_render "," raise "," collect_newlines "," render ","CollectNewlines  new call ","CollectNewlines  new ","engine to_sym ","(send\n  (lvar :Tilt  [] ) :new) render ","Tilt  []  new "," collect_text  inspect ","Tilt  []  name ","(send\n  (lvar :Tilt  [] ) :new) send first ","(send\n  (lvar :Tilt  [] ) :new) send "," collect_ collect_text  ","Tilt  []  to_sym "]}," Slim EmbeddedEngine on_slim_embedded":{"type":"method","name":"on_slim_embedded","children":[],"call":["EmbeddedEngine  [] on_slim_embedded ","EmbeddedEngine  [] ","engine on_slim_embedded "," raise "," options [] include? "," options [] "," options "," options [] include? ! "," new_engine on_slim_embedded "," new_engine ","engine new on_slim_embedded ","engine new ","Temple ImmutableHash  new ","Hash  [] ","(send\n  (block\n    (send\n      (lvar :option_filter) :select)\n    (args\n      (arg :k))\n    (send\n      (send nil :options) :include?\n      (lvar :k))) :map) flatten ","(send\n  (lvar :option_filter) :select) map "," options include? ","option_filter select "," class engines [] "," class engines "," class ","name to_s ","@engines [] on_slim_embedded ","@engines [] "," class create "," enabled? ","name to_sym ","EmbeddedEngine  []  on_slim_embedded "," new_EmbeddedEngine  []  on_slim_embedded "," new_EmbeddedEngine  []  ","EmbeddedEngine  []  new on_slim_embedded ","EmbeddedEngine  []  new "," class EmbeddedEngine  [] s [] "," class EmbeddedEngine  [] s ","name to_s  to_s ","name to_sym  to_s ","@EmbeddedEngine  [] s [] on_slim_embedded ","@EmbeddedEngine  [] s [] ","name to_s  to_sym ","name to_sym  to_sym "]}," Slim Compiler on_slim_tag":{"type":"method","name":"on_slim_tag","children":[],"call":[" compile! ","m << ","key to_s "," on_slim_text ","attrs inject "," compile ","tag << ","@options [] inspect ","@options [] "," unique_name "," splat_attributes ","attrs [] ","name == "]}," Slim Compiler on_slim_directive":{"type":"method","name":"on_slim_directive","children":[],"call":["$' strip ","type =~ ","type == "," raise "]}," Slim Compiler on_slim_output_block":{"type":"method","name":"on_slim_output_block","children":[],"call":[" on_slim_output "," compile! "," tmp_var "," options [] "," options "," compile ","  tmp_var _var "]}," Slim Compiler on_slim_output":{"type":"method","name":"on_slim_output","children":[],"call":[" on_slim_output_block "," empty_exp? "," options [] "," options "," compile "," unique_name "]}," Slim Compiler on_slim_control":{"type":"method","name":"on_slim_control","children":[],"call":[" compile! "," compile "]}," Slim Compiler on_slim_text":{"type":"method","name":"on_slim_text","children":[],"call":["block << ","string empty? "," compile "]}," Slim Sections access":{"type":"method","name":"access","children":[],"call":["name to_s inspect ","name to_s ","name to_sym inspect ","name to_sym "," options [] "," options ","name == "]}," Slim Sections on_slim_output":{"type":"method","name":"on_slim_output","children":[],"call":[" access "," raise "," empty_exp? ! "," empty_exp? "]}," Slim Sections on_slim_section":{"type":"method","name":"on_slim_section","children":[],"call":[" access "," tmp_var "," compile! "," compile "," unique_name "]}," Slim Sections on_slim_inverted_section":{"type":"method","name":"on_slim_inverted_section","children":[],"call":[" compile! "," access "," tmp_var "," compile "," unique_name ","  tmp_var _var ","  unique_name _var "]}," Slim Sections on_slim_control":{"type":"method","name":"on_slim_control","children":[],"call":[" on_slim_section "," on_slim_inverted_section ","name =~ "]}," Slim Sections compile":{"type":"method","name":"compile","children":[],"call":["@options [] "," options [] "," options "," dictionary "," options [] == ","  options []  "]}," Slim Sections initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","@options [] inspect ","@options [] ","(sym :string) include? "," options [] inspect "," options [] "," options "]}," ActionView TemplateHandlers SlimHandler call":{"type":"method","name":"call","children":[],"call":["Slim Engine  new compile ","template source ","Slim Engine  new "]}," Slim Interpolation on_slim_text":{"type":"method","name":"on_slim_text","children":[],"call":["block << ","string empty? "," parse_expression ","code [] ","Parser DELIMITERS  [] != ","Parser DELIMITERS  [] ","code !~ "]}," Slim Filter tmp_var":{"type":"method","name":"tmp_var","children":[],"call":[]}," Slim Filter on_slim_attrs":{"type":"method","name":"on_slim_attrs","children":[],"call":[" compile! ","attrs map "," compile "]}," Slim Compiler on_slim_attrs":{"type":"method","name":"on_slim_attrs","children":[],"call":[" compile! ","k to_s ","attrs map "," compile "," splat_attributes ","attr [] == ","attr [] ","attrs any? "]}," Slim Wrapper wrap":{"type":"method","name":"wrap","children":[],"call":["Wrapper  new "," wrap ","response map ","response respond_to? ","response respond_to? ! ","primitive === ","(const nil :String) any? "]}," Slim Wrapper to_s":{"type":"method","name":"to_s","children":[],"call":[" value to_s "," value "]}," Slim Wrapper empty?":{"type":"method","name":"empty?","children":[],"call":[" value empty? "," value "," value respond_to? "]}," Slim Wrapper []":{"type":"method","name":"[]","children":[],"call":[" parent [] "," parent "," wrap "," value instance_variable_get "," value "," value instance_variable_defined? "," value [] "," value has_key? ","name to_sym "," value respond_to? "," value send ","name to_s "]}," Slim Wrapper initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Slim Sections dictionary":{"type":"method","name":"dictionary","children":[],"call":[" options [] "," options "," options [] == "]}," Slim Validator valid?":{"type":"method","name":"valid?","children":[],"call":[" validate! === "," validate! "]}," Slim Validator validate!":{"type":"method","name":"validate!","children":[],"call":["Slim Engine  new compile ","source to_s ","Slim Engine  new "]}," Slim Interpolation parse_expression":{"type":"method","name":"parse_expression","children":[],"call":["code << ","string slice! ","stack pop "," raise ","stack last ","stack last != ","stack empty? ","string =~ ","stack << ","Parser DELIMITERS  [] ","string empty? ","string [] ","i - ","count != ","string [] == ","i < ","string size "]}," Slim Filter on_slim_comment":{"type":"method","name":"on_slim_comment","children":[],"call":[" compile! "," compile "]}," Slim Compiler on_slim_comment":{"type":"method","name":"on_slim_comment","children":[],"call":[" compile! "," compile "]}," Slim Sections call":{"type":"method","name":"call","children":[],"call":[" options [] == "," options [] "," options "]}," Slim Parser call":{"type":"method","name":"call","children":[],"call":["stacks last << ","stacks last ","stacks << "," parse_tag ","$' strip ","line =~ ","stacks last << << ","directive [] ","directive [] downcase ","line [] strip split ","line [] strip ","line [] ","line [] != ","block_indent + ","block << ","line sub ","line strip empty? ! ","line strip empty? ","line strip ","in_comment ! ","ch == ","line slice! ","line [] == "," syntax_error! ","indents last < ","indents last ","stacks pop ","indents pop ","indent < ","indents << ","indent > ","stacks size > ","indents size ","stacks size ","newline + + ","newline + ","  * ","offset < ","indent - ","line lstrip! ","line [] gsub size ","line [] gsub ","broken_line << << ","broken_line << ","broken_line [] == ","broken_line [] ","line chomp! ","str each_line ","str force_encoding "," options [] "," options ","str respond_to? ","line slice! == "," old_enc ","str valid_encoding? ","str dup ","str frozen? ","str encoding "," reset "," parse_line "," next_line ","str split "," remove_bom "," set_encoding ","$' str dup ip ","$'  remove_bom ip ","line [] strip split  [] ","line [] strip split  [] downcase ","line [] str dup ip split ","line []  remove_bom ip split ","line [] str dup ip ","line []  remove_bom ip ","block_line [] gsub size  + ","line str dup ip empty? ! ","line  remove_bom ip empty? ! ","line str dup ip empty? ","line  remove_bom ip empty? ","line str dup ip ","line  remove_bom ip ","ch ==  ! ","line slice!  == ","line [] gsub size s last < ","line [] gsub size s last ","line [] gsub size s pop ","line [] gsub size  < ","line [] gsub size s << ","line [] gsub size  > ","line [] gsub size s size ","indent -  < ","line [] gsub size  - ","line lstr dup ip! ","line l remove_bom ip! ","line [] strip  << << ","line [] strip  << ","line [] strip  [] == ","line [] strip  [] ","line line slice! omp! ","str ealine slice! _line ","str dup  each_line "," remove_bom  each_line ","str dup  force_encoding "," remove_bom  force_encoding ","str dup  respond_to? "," remove_bom  respond_to? "," str encoding _enc "," str encoding  ","str dup  valid_encoding? "," remove_bom  valid_encoding? ","str dup  dup "," remove_bom  dup ","str dup  frozen? "," remove_bom  frozen? ","str dup  encoding "," remove_bom  encoding ","str dup  split "," remove_bom  split "]}," Slim EmbeddedEngine InterpolateTiltEngine tilt_render":{"type":"method","name":"tilt_render","children":[],"call":["(send\n  (lvar :engine) :new) render ","engine new ","@protect unprotect ","(send\n  (lvar :tilt_engine) :new\n  (lvar :tilt_options)) render ","tilt_engine new "," output_protector unprotect "," output_protector "]}," Slim EmbeddedEngine PrecompiledTiltEngine tilt_render":{"type":"method","name":"tilt_render","children":[],"call":["(send\n  (lvar :engine) :new) send first ","(send\n  (lvar :engine) :new) send ","engine new ","(send\n  (lvar :tilt_engine) :new\n  (lvar :tilt_options)) send first ","(send\n  (lvar :tilt_engine) :new\n  (lvar :tilt_options)) send ","tilt_engine new "]}," Slim EmbeddedEngine DynamicTiltEngine tilt_render":{"type":"method","name":"tilt_render","children":[],"call":["text inspect ","engine name "]}," Slim EmbeddedEngine SassEngine tilt_render":{"type":"method","name":"tilt_render","children":[],"call":[" options [] "," options ","text chomp! ","(send\n  (lvar :engine) :new\n  (hash\n    (pair\n      (sym :style)\n      (begin\n        (if\n          (send\n            (send nil :options) :[]\n            (sym :pretty))\n          (sym :expanded)\n          (sym :compressed)))))) render ","engine new ","(send\n  (lvar :tilt_engine) :new\n  (send\n    (lvar :tilt_options) :merge\n    (hash\n      (pair\n        (sym :style)\n        (begin\n          (if\n            (send\n              (send nil :options) :[]\n              (sym :pretty))\n            (sym :expanded)\n            (sym :compressed))))\n      (pair\n        (sym :cache)\n        (false))))) render ","tilt_engine new ","tilt_options merge ","(send\n  (lvar :tilt_engine) :new\n  (send\n    (lvar :tilt_options) :merge\n    (hash\n      (pair\n        (sym :style)\n        (if\n          (send\n            (send nil :options) :[]\n            (sym :pretty))\n          (sym :expanded)\n          (sym :compressed)))\n      (pair\n        (sym :cache)\n        (false))))) render ","(send\n  (lvar :engine) :new\n  (hash\n    (pair\n      (sym :style)\n      (begin\n        (if\n          (send\n            (send nil :options) :[]\n            (sym :pretty))\n          (sym :expanded)\n          (sym :compressed)))))) render  chomp! ","(send\n  (lvar :tilt_engine) :new\n  (send\n    (lvar :tilt_options) :merge\n    (hash\n      (pair\n        (sym :style)\n        (begin\n          (if\n            (send\n              (send nil :options) :[]\n              (sym :pretty))\n            (sym :expanded)\n            (sym :compressed))))\n      (pair\n        (sym :cache)\n        (false))))) render  chomp! ","(send\n  (lvar :tilt_engine) :new\n  (send\n    (lvar :tilt_options) :merge\n    (hash\n      (pair\n        (sym :style)\n        (if\n          (send\n            (send nil :options) :[]\n            (sym :pretty))\n          (sym :expanded)\n          (sym :compressed)))\n      (pair\n        (sym :cache)\n        (false))))) render  chomp! "]}," Slim EmbeddedEngine TiltEngine tilt_render":{"type":"method","name":"tilt_render","children":[],"call":["(send\n  (lvar :engine) :new) render ","engine new "]}," Slim EmbeddedEngine new_engine":{"type":"method","name":"new_engine","children":[],"call":["engine new ","Temple Utils ImmutableHash  new ","Hash  [] ","(send\n  (block\n    (send\n      (lvar :option_filter) :select)\n    (args\n      (arg :k))\n    (send\n      (send nil :options) :include?\n      (lvar :k))) :map) flatten "," options [] "," options ","(send\n  (lvar :option_filter) :select) map "," options include? ","option_filter select "," raise "," class engines [] "," class engines "," class "," options [] include? "," options [] include? ! ","name to_s ","Temple ImmutableHash  new ","name to_s  to_s "]}," Slim Interpolation on_slim_interpolate":{"type":"method","name":"on_slim_interpolate","children":[],"call":["block << ","code [] ","code !~ "," parse_expression ","string empty? "]}," Slim Filter on_slim_condcomment":{"type":"method","name":"on_slim_condcomment","children":[],"call":[" compile "]}," Slim Filter on_slim_embedded":{"type":"method","name":"on_slim_embedded","children":[],"call":[" compile "," code "]}," Slim EmbeddedEngine InterpolateTiltEngine render":{"type":"method","name":"render","children":[],"call":["(send\n  (lvar :engine) :new) render ","engine new ","@protect unprotect "]}," Slim EmbeddedEngine PrecompiledTiltEngine render":{"type":"method","name":"render","children":[],"call":["(send\n  (lvar :engine) :new) send first ","(send\n  (lvar :engine) :new) send ","engine new "]}," Slim EmbeddedEngine DynamicTiltEngine render":{"type":"method","name":"render","children":[],"call":["text inspect ","engine name "]}," Slim EmbeddedEngine SassEngine render":{"type":"method","name":"render","children":[],"call":[" options [] "," options ","text chomp! ","(send\n  (lvar :engine) :new\n  (hash\n    (pair\n      (sym :style)\n      (begin\n        (if\n          (send\n            (send nil :options) :[]\n            (sym :pretty))\n          (sym :expanded)\n          (sym :compressed))))\n    (pair\n      (sym :cache)\n      (false)))) render ","engine new ","(send\n  (lvar :engine) :new\n  (hash\n    (pair\n      (sym :style)\n      (begin\n        (if\n          (send\n            (send nil :options) :[]\n            (sym :pretty))\n          (sym :expanded)\n          (sym :compressed))))\n    (pair\n      (sym :cache)\n      (false)))) render  chomp! "]}," Slim EmbeddedEngine StaticTiltEngine render":{"type":"method","name":"render","children":[],"call":["(send\n  (lvar :engine) :new) render ","engine new "]}," Slim EmbeddedEngine collect_newlines":{"type":"method","name":"collect_newlines","children":[],"call":["multi << ","exp [] == ","exp [] ","body [] inject ","body [] "]}," Slim Compiler on_slim_attr":{"type":"method","name":"on_slim_attr","children":[],"call":["delimiter inspect "," unique_name "," options [] [] "," options [] "," options ","name inspect "," options [] include? "," options [] []  inspect "]}," Slim Compiler on_slim_condcomment":{"type":"method","name":"on_slim_condcomment","children":[],"call":[" compile "]}," Slim Sections on_code":{"type":"method","name":"on_code","children":[],"call":[" raise "]}," Slim Sections on_dynamic":{"type":"method","name":"on_dynamic","children":[],"call":[" raise "]}," Slim Sections on_slim_attr":{"type":"method","name":"on_slim_attr","children":[],"call":[" access "]}," Slim Parser parse_attributes":{"type":"method","name":"parse_attributes","children":[],"call":[" syntax_error! ","orig_line size "," next_line ","@stacks last << ","@stacks last ","@line empty? ","@line lstrip! ","@line =~ ","Regexp  escape ","attributes << "," parse_ruby_attribute ","@line slice! ","@line [] != ","@line [] ","1 [] ","2 != ","DELIMITERS  [] ","ATTR_SHORTCUT  [] "," parse_quoted_attribute ","value empty? ","value [] ","DELIMITERS  [] == ","value =~ "," parse_ruby_code ","@shortcut [] [] ","@shortcut [] ","@lines empty? ","2 empty? "," options [] "," options ","@attr_shortcut [] "," warn "," options [] ! ","$& size > ","$& size ","DELIMS  [] "," options [] [] ","@attr_list_delims [] ","Regexp  new ","\\A\\s* << << ","\\A\\s* << ","Regexp  @line [] !=  ","Regexp  2 empty?  ","value []  empty? "," parse_ruby_code  empty? "," parse_quoted_attribute  empty? ","value []  [] "," parse_ruby_code  [] "," parse_quoted_attribute  [] ","value []  =~ "," parse_ruby_code  =~ "," parse_quoted_attribute  =~ "]}," Slim Parser parse_broken_line":{"type":"method","name":"parse_broken_line","children":[],"call":["broken_line << << ","@line strip ","broken_line << "," syntax_error! "," next_line ","broken_line [] == ","broken_line [] ","broken_line =~ "," expect_next_line ","@line strip  << << ","@line strip  << ","@line strip  [] == ","@line strip  [] ","@line strip  =~ "]}," Slim Parser parse_text_block":{"type":"method","name":"parse_text_block","children":[],"call":["@stacks last << << ","newline + ","@stacks last << ","@stacks last ","@line slice! "," syntax_error! ","@line lstrip! ","indent < "," next_line ","indent <= ","@indents last "," get_indent ","@lines first ","@lines empty? ","@indents last + ","(if\n  (lvar :text_indent)\n  (str \"\\n\")\n  (str \"\")) + ","\n * ","empty_lines > ","@lines first =~ ","(if\n  (lvar :text_indent)\n  (str \"\\n\")\n  (str \"\")) + + ","  * ","offset < ","indent - ","result << << ","result << ","first_line empty? ","first_line ! ","Text line not indented deep enough.\n + + ","Text line not indented deep enough.\n + "," get_indent  < "," get_indent  <= ","@ get_indent s last "," get_ get_indent  ","@ get_indent s last + ","(if\n  (lvar :text_ get_indent )\n  (str \"\\n\")\n  (str \"\")) + ","(if\n  (lvar :@indents last + )\n  (str \"\\n\")\n  (str \"\")) + ","(if\n  (lvar :text_ get_indent )\n  (str \"\\n\")\n  (str \"\")) + + ","(if\n  (lvar :@indents last + )\n  (str \"\\n\")\n  (str \"\")) + + ","indent -  < "," get_indent  - ","Text line not  get_indent ed deep enough.\n + + ","Text line not  get_indent ed deep enough.\n + "]}," Slim Parser parse_comment_block":{"type":"method","name":"parse_comment_block","children":[],"call":["@stacks last << ","@stacks last "," next_line "," get_indent <= ","@indents last "," get_indent ","@lines first ","@lines empty? "," get_indent > ","@lines first =~ ","@lines empty? ! "]}," Slim Parser parse_line_indicators":{"type":"method","name":"parse_line_indicators","children":[],"call":["@stacks last << ","@stacks last "," syntax_error! "," parse_tag ","$' strip "," parse_text_block ","@stacks << ","@stacks last << << ","2 empty? "," parse_broken_line ","1 empty? ","@line =~ ","@line slice! ","@line sub ","@line strip empty? ","@line strip ","@line slice! == "," parse_comment_block ","@indents last + + ","@indents last + ","2 size ","@indents last ","3 empty? ","1 == ","1 size ","2 include? "," unknown_line_indicator ","@orig_line size - + ","@orig_line size - ","$' size ","@orig_line size "," deprecated_syntax ","< freeze ","' freeze ","> freeze "," parse_attributes ","2 count "]}," Slim Parser parse_line":{"type":"method","name":"parse_line","children":[],"call":[" parse_line_indicators "," syntax_error! ","indent != ","@indents last ","@stacks pop ","@indents pop ","indent < ","@indents << ","indent > ","@stacks size > ","@indents size ","@stacks size ","@line lstrip! "," get_indent ","@stacks last << ","@stacks last ","@line strip empty? ","@line strip ","@line =~ ","@indents size > ","@indents empty? "," get_indent  != ","@ get_indent s last ","@ get_indent s pop "," get_indent  < ","@ get_indent s << "," get_indent  > ","@ get_indent s size "," get_ get_indent  ","@ get_indent s size > ","@ get_indent s empty? "]}," Slim Parser get_indent":{"type":"method","name":"get_indent","children":[],"call":["line [] gsub size ","line [] gsub ","line [] "]}," Slim Parser next_line":{"type":"method","name":"next_line","children":[],"call":["@orig_line dup ","@lines shift ","@lines empty? ","@lines shift  dup ","@orig_line dup s shift ","@orig_line dup s empty? "]}," Slim Parser reset":{"type":"method","name":"reset","children":[],"call":[]}," Slim EmbeddedEngine InterpolateTiltEngine collect_text":{"type":"method","name":"collect_text","children":[],"call":["@protect call ","Interpolation  new call ","Interpolation  new "," output_protector call "," interpolation call "," interpolation "," output_protector "]}," Slim EmbeddedEngine InterpolateTiltEngine initialize":{"type":"method","name":"initialize","children":[],"call":["ProtectOutput  new "]}," Slim EmbeddedEngine TiltEngine collect_text":{"type":"method","name":"collect_text","children":[],"call":["CollectText  new call ","CollectText  new "]}," Slim ProtectOutput unprotect":{"type":"method","name":"unprotect","children":[],"call":["block << ","@protect [] ","1 to_i ","text =~ "]}," Slim ProtectOutput on_slim_output":{"type":"method","name":"on_slim_output","children":[],"call":["@protect << ","@collected << ","@protect size "]}," Slim ProtectOutput on_static":{"type":"method","name":"on_static","children":[],"call":["@collected << "]}," Slim ProtectOutput call":{"type":"method","name":"call","children":[],"call":[]}," Slim CollectNewlines on_newline":{"type":"method","name":"on_newline","children":[],"call":["@collected << "]}," Slim CollectNewlines call":{"type":"method","name":"call","children":[],"call":[]}," Slim CollectText on_slim_interpolate":{"type":"method","name":"on_slim_interpolate","children":[],"call":["@collected << "]}," Slim CollectText call":{"type":"method","name":"call","children":[],"call":[]}," Slim Parser parse_quoted_attribute":{"type":"method","name":"parse_quoted_attribute","children":[],"call":["@line slice! "," syntax_error! ","count != ","value << ","@line =~ ","@line [] == ","@line [] ","count > ","quote [] ","count == ","@line empty? ","@line [] != "," expect_next_line "," dup "]}," Slim EmbeddedEngine StaticTiltEngine tilt_render":{"type":"method","name":"tilt_render","children":[],"call":["(send\n  (lvar :tilt_engine) :new\n  (lvar :tilt_options)) render ","tilt_engine new "]}," Slim Sections on_slim_splat":{"type":"method","name":"on_slim_splat","children":[],"call":[" access "]}," Slim Parser parse_ruby_code":{"type":"method","name":"parse_ruby_code","children":[],"call":[" syntax_error! ","count != ","code << ","@line slice! ","DELIMITERS  [] ","@line =~ ","@line [] == ","close_delimiter [] ","@line [] ","delimiter [] ","count > ","count == ","@line empty? ","Regexp  escape ","outer_delimiter to_s "," expect_next_line ","code << << ","DELIMS  [] "," options [] [] "," options [] "," options ","@code_attr_delims [] "," dup "]}," Slim Compiler splat_attributes":{"type":"method","name":"splat_attributes","children":[],"call":[" options [] "," options ","merger << ","attr [] ","attr [] == ","attr [] inspect "," compile ","attrs each "," unique_name "]}," Slim Compiler call":{"type":"method","name":"call","children":[],"call":["@options [] inspect ","@options [] "," compile "," unique_name "]}," Slim Translator DynamicTranslator on_slim_output":{"type":"method","name":"on_slim_output","children":[],"call":["@captures_count - ","@text << "]}," Slim Translator DynamicTranslator on_static":{"type":"method","name":"on_static","children":[],"call":["@text << "]}," Slim Translator DynamicTranslator call":{"type":"method","name":"call","children":[],"call":["result << ","@text inspect "," options [] "," options ","result insert ","@captures_count > "," compile "," unique_name "," dup "," compile  << "," compile  insert "]}," Slim Translator StaticTranslator on_slim_output":{"type":"method","name":"on_slim_output","children":[],"call":["@text << ","@captures size ","@captures << "]}," Slim Translator StaticTranslator on_static":{"type":"method","name":"on_static","children":[],"call":["@text << "]}," Slim Translator StaticTranslator call":{"type":"method","name":"call","children":[],"call":["result << ","result << << ","@captures [] ","1 to_i - ","1 to_i ","text =~ ","@translate call "," compile "," dup "," compile  << "," compile  << << ","@translate call  =~ "]}," Slim Translator StaticTranslator initialize":{"type":"method","name":"initialize","children":[],"call":[" eval "," options [] "," options "]}," Slim Translator on_slim_text":{"type":"method","name":"on_slim_text","children":[],"call":["@translator call "]}," Slim Translator initialize":{"type":"method","name":"initialize","children":[],"call":[" raise "," options [] inspect "," options [] "," options ","DynamicTranslator  new ","StaticTranslator  new "]}," Slim Translator call":{"type":"method","name":"call","children":[],"call":[" options [] "," options "]}," Slim Translator i18n_key":{"type":"method","name":"i18n_key","children":[],"call":[]}," Slim Translator i18n_text":{"type":"method","name":"i18n_text","children":[],"call":[]}," Slim LogicLess Wrapper wrap":{"type":"method","name":"wrap","children":[],"call":["Wrapper  new "," wrap ","response map ","response respond_to? ","response respond_to? ! ","primitive === ","(const nil :String) any? "]}," Slim LogicLess Wrapper to_s":{"type":"method","name":"to_s","children":[],"call":[" value to_s "," value "]}," Slim LogicLess Wrapper empty?":{"type":"method","name":"empty?","children":[],"call":[" value empty? "," value "," value respond_to? "]}," Slim LogicLess Wrapper []":{"type":"method","name":"[]","children":[],"call":[" parent [] "," parent "," wrap "," value instance_variable_get "," value "," value instance_variable_defined? "," value [] ","name to_s "," value has_key? ","name to_sym "," value respond_to? "," value send "]}," Slim LogicLess Wrapper initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Slim LogicLess access":{"type":"method","name":"access","children":[],"call":["name to_sym inspect ","name to_sym ","name to_s inspect ","name to_s "," options [] "," options ","name == "]}," Slim LogicLess on_slim_section":{"type":"method","name":"on_slim_section","children":[],"call":[" access "," unique_name "," compile "]}," Slim LogicLess on_slim_inverted_section":{"type":"method","name":"on_slim_inverted_section","children":[],"call":[" compile "," access "," unique_name "]}," Slim LogicLess on_code":{"type":"method","name":"on_code","children":[],"call":[" raise "]}," Slim LogicLess on_dynamic":{"type":"method","name":"on_dynamic","children":[],"call":[" raise "]}," Slim LogicLess on_slim_splat":{"type":"method","name":"on_slim_splat","children":[],"call":[" access "]}," Slim LogicLess on_slim_attr":{"type":"method","name":"on_slim_attr","children":[],"call":[" access "]}," Slim LogicLess on_slim_output":{"type":"method","name":"on_slim_output","children":[],"call":[" access "," raise "," empty_exp? ! "," empty_exp? "," compile ","name to_sym inspect ","name to_sym "]}," Slim LogicLess on_slim_control":{"type":"method","name":"on_slim_control","children":[],"call":[" on_slim_section "," on_slim_inverted_section ","name =~ "," compile ","name to_sym inspect ","name to_sym "]}," Slim LogicLess call":{"type":"method","name":"call","children":[],"call":[" options [] == "," options [] "," options "," unique_name "]}," Slim LogicLess initialize":{"type":"method","name":"initialize","children":[],"call":[" raise "," options [] inspect "," options [] "," options ","(sym :string) include? ","access inspect ","access empty? ","type inspect ","DEFAULT_ACCESS_ORDER  include? ","access each ","(lvar :access) flatten compact ","(lvar :access) flatten "," puts ","access == "," warn ","(send\n  (send nil :options) :[]\n  (sym :dictionary_access)) flatten compact ","(send\n  (send nil :options) :[]\n  (sym :dictionary_access)) flatten ","(lvar :access) flatten compact  inspect "," options []  inspect ","(send\n  (send nil :options) :[]\n  (sym :dictionary_access)) flatten compact  inspect ","(lvar :access) flatten compact  empty? "," options []  empty? ","(send\n  (send nil :options) :[]\n  (sym :dictionary_access)) flatten compact  empty? ","(lvar :access) flatten compact  each "," options []  each ","(send\n  (send nil :options) :[]\n  (sym :dictionary_access)) flatten compact  each ","(lvar :(lvar :access) flatten compact ) flatten compact ","(lvar : options [] ) flatten compact ","(lvar :(send\n  (send nil :options) :[]\n  (sym :dictionary_access)) flatten compact ) flatten compact ","(lvar :(lvar :access) flatten compact ) flatten ","(lvar : options [] ) flatten ","(lvar :(send\n  (send nil :options) :[]\n  (sym :dictionary_access)) flatten compact ) flatten ","(lvar :access) flatten compact  == "," options []  == ","(send\n  (send nil :options) :[]\n  (sym :dictionary_access)) flatten compact  == ","(send\n  (send nil :options) :[]\n  (sym :dictionary_(lvar :access) flatten compact )) flatten compact ","(send\n  (send nil :options) :[]\n  (sym :dictionary_ options [] )) flatten compact ","(send\n  (send nil :options) :[]\n  (sym :dictionary_(send\n  (send nil :options) :[]\n  (sym :dictionary_access)) flatten compact )) flatten compact ","(send\n  (send nil :options) :[]\n  (sym :dictionary_(lvar :access) flatten compact )) flatten ","(send\n  (send nil :options) :[]\n  (sym :dictionary_ options [] )) flatten ","(send\n  (send nil :options) :[]\n  (sym :dictionary_(send\n  (send nil :options) :[]\n  (sym :dictionary_access)) flatten compact )) flatten "]}," Slim Filter on_slim_text":{"type":"method","name":"on_slim_text","children":[],"call":[" compile "]}," Slim EmbeddedEngine ERBEngine erb_parser":{"type":"method","name":"erb_parser","children":[],"call":["Temple ERB Parser  new "]}," Slim EmbeddedEngine InterpolateTiltEngine output_protector":{"type":"method","name":"output_protector","children":[],"call":["OutputProtector  new "]}," Slim EmbeddedEngine InterpolateTiltEngine interpolation":{"type":"method","name":"interpolation","children":[],"call":["Interpolation  new "]}," Slim EmbeddedEngine TiltEngine collect_newlines":{"type":"method","name":"collect_newlines","children":[],"call":["@newline_collector call ","NewlineCollector  new "]}," Slim OutputProtector unprotect":{"type":"method","name":"unprotect","children":[],"call":["block << ","@protect [] ","1 to_i ","text =~ ","@protect shift "]}," Slim OutputProtector on_slim_output":{"type":"method","name":"on_slim_output","children":[],"call":["@protect << ","@collected << ","@protect size ","@protect length "]}," Slim OutputProtector on_static":{"type":"method","name":"on_static","children":[],"call":["@collected << "]}," Slim OutputProtector call":{"type":"method","name":"call","children":[],"call":[" object_id abs to_s "," object_id abs "," object_id "," dup "]}," Slim NewlineCollector on_newline":{"type":"method","name":"on_newline","children":[],"call":["@collected << "]}," Slim NewlineCollector call":{"type":"method","name":"call","children":[],"call":[]}," Slim TextCollector on_slim_interpolate":{"type":"method","name":"on_slim_interpolate","children":[],"call":["@collected << "]}," Slim TextCollector call":{"type":"method","name":"call","children":[],"call":[" dup "]}," Slim SplatAttributes splat_attributes":{"type":"method","name":"splat_attributes","children":[],"call":[" options [] "," options ","merger << ","attr [] ","attr [] == ","attr [] inspect "," compile ","attrs each "," unique_name "]}," Slim SplatAttributes on_html_attrs":{"type":"method","name":"on_html_attrs","children":[],"call":[" splat_attributes ","attr [] != ","attr [] ","attrs all? "]}," Slim SplatAttributes on_html_tag":{"type":"method","name":"on_html_tag","children":[],"call":["tag << "," compile ","@options [] inspect ","@options [] "," unique_name "," splat_attributes ","attrs [] ","name != "]}," Slim SplatAttributes call":{"type":"method","name":"call","children":[],"call":["@options [] inspect ","@options [] "," compile "," unique_name "]}," Slim EmbeddedEngine Engine collect_newlines":{"type":"method","name":"collect_newlines","children":[],"call":["@newline_collector call ","NewlineCollector  new "]}," Slim EmbeddedEngine Engine collect_text":{"type":"method","name":"collect_text","children":[],"call":["@text_collector call ","TextCollector  new "]}," Slim EmbeddedEngine normalize_engine_list":{"type":"method","name":"normalize_engine_list","children":[],"call":["s to_sym ","list map "," raise ","Array  === ","list ! "]}," Slim EmbeddedEngine enabled?":{"type":"method","name":"enabled?","children":[],"call":["@disabled include? ! ","@disabled include? ","@disabled ! ","@enabled include? ","@enabled ! "]}," Slim EmbeddedEngine create":{"type":"method","name":"create","children":[],"call":[]}," Slim ControlStructures on_slim_text":{"type":"method","name":"on_slim_text","children":[],"call":[" compile "]}," Slim ControlStructures on_slim_output":{"type":"method","name":"on_slim_output","children":[],"call":[" compile "," unique_name "," options [] "," options "," empty_exp? "]}," Slim ControlStructures on_slim_control":{"type":"method","name":"on_slim_control","children":[],"call":[" compile "]}," Slim BooleanAttributes on_slim_attrvalue":{"type":"method","name":"on_slim_attrvalue","children":[],"call":["delimiter inspect "," options [] [] "," options [] "," options "," unique_name "," options [] []  inspect "]}," Slim BooleanAttributes on_html_attr":{"type":"method","name":"on_html_attr","children":[],"call":["conds << ","delimiter inspect "," options [] [] "," options [] "," options "," unique_name ","value [] ","value [] == "," options [] []  inspect "]}," Slim BooleanAttributes on_html_attrs":{"type":"method","name":"on_html_attrs","children":[],"call":[" compile ","attrs map "]}," Slim Parser remove_bom":{"type":"method","name":"remove_bom","children":[],"call":["s gsub ","Regexp  new ","\\A﻿ encode ","s encoding name ","s encoding ","s encoding name =~ ","s respond_to? "]}," Slim Parser set_encoding":{"type":"method","name":"set_encoding","children":[],"call":["s force_encoding ","s valid_encoding? "," options [] "," options ","s dup ","s frozen? ","s encoding ","s respond_to? ","s dup  force_encoding ","s dup  valid_encoding? "," options dup  [] "," options dup  ","s dup  dup ","s dup  frozen? ","s dup  encoding ","s dup  res dup pond_to? "]}," Slim CodeAttributes on_slim_attrvalue":{"type":"method","name":"on_slim_attrvalue","children":[],"call":["delimiter inspect "," unique_name "," options [] [] "," options [] "," options "," options [] []  inspect "]}," Slim CodeAttributes on_html_attr":{"type":"method","name":"on_html_attr","children":[],"call":[" unique_name ","value [] "," options [] [] ! "," options [] [] "," options [] "," options ","value [] == "]}," Slim CodeAttributes on_html_attrs":{"type":"method","name":"on_html_attrs","children":[],"call":[" compile ","attrs map "]}," Slim LogicLess on_slim_attrvalue":{"type":"method","name":"on_slim_attrvalue","children":[],"call":[" access "]}," Slim LogicLess Context new_scope":{"type":"method","name":"new_scope","children":[],"call":["@scope pop ","@scope << ","Scope  new "," scope "," scope lookup "]}," Slim LogicLess Context scope":{"type":"method","name":"scope","children":[],"call":["@scope last "]}," Slim LogicLess Context Scope instance_variable?":{"type":"method","name":"instance_variable?","children":[],"call":["@dict instance_variable_defined? "]}," Slim LogicLess Context Scope has_key?":{"type":"method","name":"has_key?","children":[],"call":["@dict has_key? ","@dict respond_to? "]}," Slim LogicLess Context Scope []":{"type":"method","name":"[]","children":[],"call":["@parent [] ","@dict instance_variable_get "," instance_variable? ","@dict [] ","name to_s "," has_key? ","@dict send ","@dict respond_to? ","@lookup each ","@dict public_send "]}," Slim LogicLess Context Scope lambda":{"type":"method","name":"lambda","children":[],"call":["@parent lambda ","@dict instance_variable_get call ","@dict instance_variable_get "," instance_variable? ","@dict [] call ","@dict [] ","name to_s "," has_key? ","@dict send ","@dict respond_to? ","@lookup each ","@dict public_send "]}," Slim LogicLess Context Scope initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Slim LogicLess Context inverted_section":{"type":"method","name":"inverted_section","children":[],"call":["value empty? ","value respond_to? ","value ! "," scope [] "," scope "," scope []  empty? "," scope []  respond_to? "," scope []  ! "]}," Slim LogicLess Context section":{"type":"method","name":"section","children":[],"call":[" new_scope "," scope dict= "," scope ","dict each ","dict respond_to? ","dict respond_to? ! "," scope [] "," scope  scope [] = "," scope []  each "," scope []  respond_to? "," scope []  respond_to? ! "]}," Slim LogicLess Context lambda":{"type":"method","name":"lambda","children":[],"call":["result << "," scope dict= "," scope ","dict inject "," new_scope ","dict empty? "," scope lambda "," dup "]}," Slim LogicLess Context []":{"type":"method","name":"[]","children":[],"call":[" scope [] "," scope "]}," Slim LogicLess Context initialize":{"type":"method","name":"initialize","children":[],"call":["Scope  new "]}," Slim Parser expect_next_line":{"type":"method","name":"expect_next_line","children":[],"call":["@line strip! "," syntax_error! "," next_line "]}," Slim Parser shortcut_regex":{"type":"method","name":"shortcut_regex","children":[],"call":["(send\n  (lvar :shortcut) :map) join ","Regexp  escape ","shortcut map "]}," Slim Parser deprecated_shortcut":{"type":"method","name":"deprecated_shortcut","children":[],"call":["v =~ "," warn "]}," Slim const_missing":{"type":"method","name":"const_missing","children":[],"call":[]}," Slim Embedded RubyEngine on_slim_embedded":{"type":"method","name":"on_slim_embedded","children":[],"call":[" collect_text "]}," Slim Embedded JavaScriptEngine on_slim_embedded":{"type":"method","name":"on_slim_embedded","children":[],"call":[]}," Slim Embedded TagEngine on_slim_embedded":{"type":"method","name":"on_slim_embedded","children":[],"call":[" options [] map "," options [] "," options ","@engine on_slim_embedded "," options [] new ","opts delete "," update ","attrs << "," options [] empty? "," update  delete "]}," Slim Embedded ERBEngine erb_parser":{"type":"method","name":"erb_parser","children":[],"call":["Temple ERB Parser  new "]}," Slim Embedded ERBEngine on_slim_embedded":{"type":"method","name":"on_slim_embedded","children":[],"call":[" erb_parser call "," collect_text "," erb_parser "]}," Slim Embedded InterpolateTiltEngine output_protector":{"type":"method","name":"output_protector","children":[],"call":["OutputProtector  new "]}," Slim Embedded InterpolateTiltEngine interpolation":{"type":"method","name":"interpolation","children":[],"call":["Interpolation  new "]}," Slim Embedded InterpolateTiltEngine tilt_render":{"type":"method","name":"tilt_render","children":[],"call":[" output_protector unprotect ","(send\n  (lvar :tilt_engine) :new\n  (lvar :tilt_options)) render ","tilt_engine new "," output_protector "]}," Slim Embedded InterpolateTiltEngine collect_text":{"type":"method","name":"collect_text","children":[],"call":[" output_protector call "," interpolation call "," interpolation "," output_protector "]}," Slim Embedded PrecompiledTiltEngine tilt_render":{"type":"method","name":"tilt_render","children":[],"call":["(send\n  (lvar :tilt_engine) :new\n  (lvar :tilt_options)) send first ","(send\n  (lvar :tilt_engine) :new\n  (lvar :tilt_options)) send ","tilt_engine new "]}," Slim Embedded SassEngine tilt_render":{"type":"method","name":"tilt_render","children":[],"call":["text chomp! ","(send\n  (lvar :tilt_engine) :new\n  (send\n    (lvar :tilt_options) :merge\n    (hash\n      (pair\n        (sym :style)\n        (if\n          (send\n            (send nil :options) :[]\n            (sym :pretty))\n          (sym :expanded)\n          (sym :compressed)))\n      (pair\n        (sym :cache)\n        (false))))) render ","tilt_engine new ","tilt_options merge "," options [] "," options ","text chomp ","(send\n  (lvar :tilt_engine) :new\n  (send\n    (lvar :tilt_options) :merge\n    (hash\n      (pair\n        (sym :style)\n        (if\n          (send\n            (send nil :options) :[]\n            (sym :pretty))\n          (sym :expanded)\n          (sym :compressed)))))) render ","(send\n  (lvar :tilt_engine) :new\n  (send\n    (lvar :tilt_options) :merge\n    (hash\n      (pair\n        (sym :style)\n        (if\n          (send\n            (send nil :options) :[]\n            (sym :pretty))\n          (sym :expanded)\n          (sym :compressed)))\n      (pair\n        (sym :cache)\n        (false))))) render  chomp! ","text chomp  chomp! ","(send\n  (lvar :tilt_engine) :new\n  (send\n    (lvar :tilt_options) :merge\n    (hash\n      (pair\n        (sym :style)\n        (if\n          (send\n            (send nil :options) :[]\n            (sym :pretty))\n          (sym :expanded)\n          (sym :compressed)))))) render  chomp! ","(send\n  (lvar :tilt_engine) :new\n  (send\n    (lvar :tilt_options) :merge\n    (hash\n      (pair\n        (sym :style)\n        (if\n          (send\n            (send nil :options) :[]\n            (sym :pretty))\n          (sym :expanded)\n          (sym :compressed)))\n      (pair\n        (sym :cache)\n        (false))))) render  chomp ","text chomp  chomp ","(send\n  (lvar :tilt_engine) :new\n  (send\n    (lvar :tilt_options) :merge\n    (hash\n      (pair\n        (sym :style)\n        (if\n          (send\n            (send nil :options) :[]\n            (sym :pretty))\n          (sym :expanded)\n          (sym :compressed)))))) render  chomp "]}," Slim Embedded StaticTiltEngine tilt_render":{"type":"method","name":"tilt_render","children":[],"call":["(send\n  (lvar :tilt_engine) :new\n  (lvar :tilt_options)) render ","tilt_engine new "]}," Slim Embedded TiltEngine on_slim_embedded":{"type":"method","name":"on_slim_embedded","children":[],"call":[" collect_newlines "," tilt_render "," collect_text "," options [] ","engine to_sym "," options "," raise ","Tilt  [] ","tilt_options [] "]}," Slim Embedded Engine collect_newlines":{"type":"method","name":"collect_newlines","children":[],"call":["@newline_collector call ","NewlineCollector  new "]}," Slim Embedded Engine collect_text":{"type":"method","name":"collect_text","children":[],"call":["@text_collector call ","TextCollector  new "]}," Slim Embedded normalize_engine_list":{"type":"method","name":"normalize_engine_list","children":[],"call":["s to_sym ","list map "," raise ","Array  === ","list ! "]}," Slim Embedded enabled?":{"type":"method","name":"enabled?","children":[],"call":["@disabled include? ! ","@disabled include? ","@disabled ! ","@enabled include? ","@enabled ! "]}," Slim Embedded on_slim_embedded":{"type":"method","name":"on_slim_embedded","children":[],"call":["@engines [] on_slim_embedded ","@engines [] "," class create "," options "," class "," raise "," enabled? ","name to_sym ","name to_sym  to_sym "]}," Slim Embedded initialize":{"type":"method","name":"initialize","children":[],"call":[" normalize_engine_list "," options [] "," options "]}," Slim Embedded create":{"type":"method","name":"create","children":[],"call":["constructor call "," raise "," engines [] "," engines "]}," Slim Embedded register":{"type":"method","name":"register","children":[],"call":[" engines []= ","klass new ","(send\n  (send\n    (hash) :update\n    (lvar :options)) :delete_if) update ","k != ","option_filter include? ! ","option_filter include? "," update delete_if "," update "," proc ","name to_sym "," engines ","klass define_options "," define_options ","option_filter pop to_hash ","option_filter pop ","option_filter last respond_to? ","option_filter last ","name to_sym  to_sym "]}," Slim Controls on_slim_text":{"type":"method","name":"on_slim_text","children":[],"call":[" compile "]}," Slim Controls on_slim_output":{"type":"method","name":"on_slim_output","children":[],"call":[" compile "," unique_name "," options [] "," options "," empty_exp? ","code =~ "]}," Slim Controls on_slim_control":{"type":"method","name":"on_slim_control","children":[],"call":[" compile "]}," Slim Splat Filter make_builder":{"type":"method","name":"make_builder","children":[],"call":["result << ","attr [] ","attr [] == ","attr [] inspect "," compile "," unique_name ","attr [] [] ","attr [] [] == ","attrs each "]}," Slim Splat Filter splat?":{"type":"method","name":"splat?","children":[],"call":["attr [] [] == ","attr [] [] ","attr [] "," options [] include? "," options [] "," options ","attr [] == "]}," Slim Splat Filter on_html_attrs":{"type":"method","name":"on_html_attrs","children":[],"call":[" make_builder "," splat? ","attrs any? "]}," Slim Splat Filter on_html_tag":{"type":"method","name":"on_html_tag","children":[],"call":[" make_builder ","attrs [] "," compile ","name != "," empty_exp? "]}," Slim Splat Filter call":{"type":"method","name":"call","children":[],"call":["(send\n  (send\n    (send nil :options) :to_hash) :reject) inspect ","OPTIONS  include? ! ","OPTIONS  include? "," options to_hash reject "," options to_hash "," options "," compile ","Filter  options valid_key? ! ","Filter  options valid_key? ","Filter  options "]}," Slim Splat Builder hyphen_attr":{"type":"method","name":"hyphen_attr","children":[],"call":[" attr ","value to_s ","Temple Utils  escape_html "," hyphen_attr ","n to_s gsub ","n to_s ","value each ","Hash  === ","value != ","Temple Utils  escape_html_safe ","@options [] "," escape_html ","n to_s tr "]}," Slim Splat Builder build_attrs":{"type":"method","name":"build_attrs","children":[],"call":["(send\n  (lvar :attrs) :map) join ","@options [] ","attrs map ","@attrs sort_by ","@options [] == ","v == ","(send\n  (lvar :@attrs sort_by ) :map) join ","@attrs sort_by  map ","@@attrs sort_by  sort_by "]}," Slim Splat Builder build_tag":{"type":"method","name":"build_tag","children":[],"call":[" build_attrs "," block_given? ","@options [] ","tag empty? ","@attrs delete to_s ","@attrs delete ","scope capture ","(lvasgn :scope\n  (send\n    (send\n      (lvar :block) :binding) :eval\n    (str \"self\"))) respond_to? ","block binding eval ","block binding ","@options []  empty? ","@attrs delete to_s  empty? ","block binding eval  capture ","(lvasgn :block binding eval \n  (send\n    (send\n      (lvar :block) :binding) :eval\n    (str \"self\"))) respond_to? "]}," Slim Splat Builder attr":{"type":"method","name":"attr","children":[],"call":["@attrs []= "," raise ","@attrs [] << << ","@attrs [] << ","@attrs [] ","@options [] [] ","@options [] ","value to_s ","delim + ","name =~ ","@attrs [] to_s + + ","@attrs [] to_s + ","@attrs [] to_s ","@options [] []  + "]}," Slim Splat Builder splat_attrs":{"type":"method","name":"splat_attrs","children":[],"call":[" code_attr ","name to_s ","splat each "]}," Slim Splat Builder code_attr":{"type":"method","name":"code_attr","children":[],"call":[" attr ","Temple Utils  escape_html ","value to_s "," hyphen_attr ","Hash  === ","@options [] include? ","@options [] ","value empty? ","value join ","Array  === ","@options [] [] ","value != ","Temple Utils  escape_html_safe "," escape_html ","value to_s  to_s ","value join  to_s ","value to_s  empty? ","value join  empty? ","value to_s  join ","value join  join ","value to_s  != ","value join  != "]}," Slim Splat Builder initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Slim LogicLess Context Scope to_s":{"type":"method","name":"to_s","children":[],"call":["@dict to_s "]}," Slim LogicLess Context to_s":{"type":"method","name":"to_s","children":[],"call":[" scope to_s "," scope "]}," Slim DoInserter on_slim_output":{"type":"method","name":"on_slim_output","children":[],"call":[" compile ","code + "," empty_exp? ","code =~ ","code +  + ","code +  =~ "]}," Slim DoInserter on_slim_control":{"type":"method","name":"on_slim_control","children":[],"call":[" compile ","code + "," empty_exp? ","code =~ ","code +  + ","code +  =~ "]}," Slim Smart Parser unknown_line_indicator":{"type":"method","name":"unknown_line_indicator","children":[],"call":["@stacks last << "," parse_text_block ","@stacks last "," get_indent ","@indents last + ","@indents last ","line =~ ","@lines first "," syntax_error! ","@line =~ "," options [] "," options ","@indents last + + ","1 size ","@lines first  =~ ","@@lines first s first ","@@lines first  =~ "]}," Slim Smart Parser initialize":{"type":"method","name":"initialize","children":[],"call":["Regexp  union ","k size -@ ","k size ","(send\n  (send\n    (ivar :@tag_shortcut) :keys) :-\n  (send\n    (ivar :@attr_shortcut) :keys)) sort_by ","@tag_shortcut keys - ","@attr_shortcut keys ","@tag_shortcut keys ","@attr_shortcut keys sort_by "," options [] "," options "]}," Slim Smart Filter chars_re":{"type":"method","name":"chars_re","children":[],"call":["Regexp  union ","string split "]}," Slim Smart Filter on_slim_interpolate":{"type":"method","name":"on_slim_interpolate","children":[],"call":["string !~ ","\n + ","\n +  !~ "]}," Slim Smart Filter on_slim_text_inline":{"type":"method","name":"on_slim_text_inline","children":[],"call":[" on_slim_text "]}," Slim Smart Filter on_slim_text":{"type":"method","name":"on_slim_text","children":[],"call":[" compile ","type != "]}," Slim Smart Filter on_multi":{"type":"method","name":"on_multi","children":[],"call":["exp first == ","exp first ","block << "," compile ","prev [] != ","prev [] ","prev first != ","prev first ","exp equal? ","exps each ","(send\n  (lvar :exps) :reject) last ","exps reject "]}," Slim Smart Filter call":{"type":"method","name":"call","children":[],"call":[" options [] "," options "]}," Slim Smart Filter initialize":{"type":"method","name":"initialize","children":[],"call":[" chars_re "," options [] "," options "]}," Slim Smart Escaper on_static":{"type":"method","name":"on_static","children":[],"call":["block << ","string empty? "]}," Slim Smart Escaper on_slim_text":{"type":"method","name":"on_slim_text","children":[],"call":[" compile ","type != "]}," Slim Smart Escaper call":{"type":"method","name":"call","children":[],"call":[" options [] "," options "]}," Slim Parser unknown_line_indicator":{"type":"method","name":"unknown_line_indicator","children":[],"call":[" syntax_error! "]}," Slim Engine call":{"type":"method","name":"call","children":[],"call":["Thread  current []= ","Thread  current ","(op-asgn\n  (send\n    (send\n      (const nil :Thread) :current) :[]\n    (sym :slim_include_level)) :-\n  (int 1)) == ","Thread  current [] "," call_without_include "," catch "]}," Slim Include find_file":{"type":"method","name":"find_file","children":[],"call":["File  file? ","(send\n  (send\n    (send nil :options) :[]\n    (sym :include_dirs)) :map) find ","File  expand_path ","File  join "," options [] map "," options [] "," options ","File  dirname "]}," Slim Include on_html_tag":{"type":"method","name":"on_html_tag","children":[],"call":["Thread  current [] call ","Thread  current [] ","Thread  current ","file =~ ","File  read "," raise "," options [] join "," options [] "," options "," find_file ","name !~ ","name empty? ! ","name empty? ","attributes == ","(send\n  (send\n    (lvar :content) :flatten) :select) join ","String  === ","content flatten select ","content flatten ","tag != ","(send\n  (send\n    (send\n      (lvar :content) :to_a) :flatten) :select) join ","content to_a flatten select ","content to_a flatten ","content to_a "," find_file  =~ "," find_ find_file  ","(send\n  (send\n    (lvar :content) :flatten) :select) join  !~ ","(send\n  (send\n    (send\n      (lvar :content) :to_a) :flatten) :select) join  !~ ","(send\n  (send\n    (lvar :content) :flatten) :select) join  empty? ! ","(send\n  (send\n    (send\n      (lvar :content) :to_a) :flatten) :select) join  empty? ! ","(send\n  (send\n    (lvar :content) :flatten) :select) join  empty? ","(send\n  (send\n    (send\n      (lvar :content) :to_a) :flatten) :select) join  empty? ","(send\n  (send\n    (lvar :File  read ) :flatten) :select) join ","File  read  flatten select ","File  read  flatten ","(send\n  (send\n    (send\n      (lvar :File  read ) :to_a) :flatten) :select) join ","File  read  to_a flatten select ","File  read  to_a flatten ","File  read  to_a "]}," Slim Splat Builder escape_html":{"type":"method","name":"escape_html","children":[],"call":["Temple Utils  escape_html ","Temple Utils  escape_html_safe ","@options [] ","value == ","escape ! "]}," Slim Parser deprecated_syntax":{"type":"method","name":"deprecated_syntax","children":[],"call":[" warn ","  * "," options [] "," options ","(if\n  (and\n    (ivar :@orig_line)\n    (ivar :@line))\n  (send\n    (send\n      (ivar :@orig_line) :size) :-\n    (send\n      (ivar :@line) :size))\n  (int 0)) + - ","@orig_line size ","(if\n  (and\n    (ivar :@orig_line)\n    (ivar :@line))\n  (send\n    (send\n      (ivar :@orig_line) :size) :-\n    (send\n      (ivar :@line) :size))\n  (int 0)) + ","line size ","@orig_line size - ","@line size ","@orig_line lstrip ","column + ","(if\n  (and\n    (ivar :@orig_@orig_line lstrip )\n    (ivar :@@orig_line lstrip ))\n  (send\n    (send\n      (ivar :@orig_@orig_line lstrip ) :size) :-\n    (send\n      (ivar :@@orig_line lstrip ) :size))\n  (int 0)) + - ","@orig_@orig_line lstrip  size ","(if\n  (and\n    (ivar :@orig_@orig_line lstrip )\n    (ivar :@@orig_line lstrip ))\n  (send\n    (send\n      (ivar :@orig_@orig_line lstrip ) :size) :-\n    (send\n      (ivar :@@orig_line lstrip ) :size))\n  (int 0)) + ","@orig_line lstrip  size ","@orig_@orig_line lstrip  size - ","@@orig_line lstrip  size ","@orig_@orig_line lstrip  lstrip ","(if\n  (and\n    (ivar :@orig_line)\n    (ivar :@line))\n  (send\n    (send\n      (ivar :@orig_line) :size) :-\n    (send\n      (ivar :@line) :size))\n  (int 0)) + -  + "]}," Slim Embedded TiltEngine tilt_render":{"type":"method","name":"tilt_render","children":[],"call":["(send\n  (lvar :tilt_engine) :new\n  (lvar :tilt_options)) render ","tilt_engine new "]}}