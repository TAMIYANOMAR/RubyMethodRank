{" ChildProcess platform":{"type":"method","name":"platform","children":[],"call":[" os ","RUBY_PLATFORM  =~ ","RUBY_ENGINE  == ","RUBY_PLATFORM  == "]}," ChildProcess build":{"type":"method","name":"build","children":[],"call":[]}," ChildProcess Windows Process launch_process":{"type":"method","name":"launch_process","children":[],"call":["Handle  open ","Lib  create_proc ","@args join ","(send\n  (ivar :@args) :map) join ","e inspect ","@args map ","opts []= ","@io stderr ","@io stdout "," detach? "," io _stdin= ","opts [] "," io "," duplex? "," command_string ","@environment empty? ","builder stdin "," raise ","builder start ","builder stderr= ","builder stdout= ","builder environment= ","builder duplex= ","builder detach= ","builder inherit= ","ProcessBuilder  new ","builder cwd= ","@job << ","Job  new "," leader? ","builder leader= "," (send\n  (ivar :@args) :map) join _string "," @args join _string ","ProcessBuilder  new  stdin ","ProcessBuilder  new  start ","ProcessBuilder  new  stderr= ","ProcessBuilder  new  stdout= ","ProcessBuilder  new  environment= ","ProcessBuilder  new  duplex= ","ProcessBuilder  new  detach= ","ProcessBuilder  new  inherit= ","ProcessBuilder  new  cwd= ","Job  new  << ","ProcessBuilder  new  leader= "]}," ChildProcess Windows Process exited?":{"type":"method","name":"exited?","children":[],"call":["code != ","@handle exit_code "," assert_started "," log ","@handle close "," close_job_if_necessary "," close_handle ","@handle exit_code  != ","@handle exit_@handle exit_code  "]}," ChildProcess Windows Process stop":{"type":"method","name":"stop","children":[],"call":["@handle close "," poll_for_exit ","@handle send "," log "," assert_started ","@job close "," close_job_if_necessary "," close_handle "]}," Windows Handle wait":{"type":"method","name":"wait","children":[],"call":["Lib  wait_for_single_object "]}," Windows Handle close":{"type":"method","name":"close","children":[],"call":["Lib  close_handle "]}," Windows Handle send":{"type":"method","name":"send","children":[],"call":["Lib  wait_for_single_object "," raise ","Lib  last_error_message ","Lib  create_remote_thread ","Lib  get_proc_address ","Lib  get_module_handle ","FFI MemoryPointer  new ","Lib  terminate_process ","Lib  generate_console_ctrl_event "," exit_code == "," exit_code ","Lib  create_remote_Lib  create_remote_thread  ","Lib  get_Lib  get_proc_address  ","Lib  get_Lib  get_module_handle  "]}," Windows Handle exit_code":{"type":"method","name":"exit_code","children":[],"call":[" raise ","Lib  last_error_message "," close ","code_pointer get_ulong ","Lib  get_exit_code ","FFI MemoryPointer  new ","FFI MemoryPointer  new  get_ulong "]}," Windows Handle initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","handle inspect ","handle null? ","handle kind_of? "]}," Windows Handle open":{"type":"method","name":"open","children":[],"call":["h close "," block_given? "," new "," raise ","Lib  last_error_message ","handle null? ","Lib  open_process "," new  close "," new andle null? ","Lib  open_process  null? "]}," ChildProcess Windows Lib create_proc":{"type":"method","name":"create_proc","children":[],"call":[]}," ChildProcess Windows Lib last_error_message":{"type":"method","name":"last_error_message","children":[],"call":["buf read_string strip ","buf read_string "," format_message ","buf size ","FORMAT_MESSAGE_FROM_SYSTEM  | ","FFI MemoryPointer  new "," get_last_error ","str inspect ","errnum == ","FFI  errno ","buf read_buf read_string strip ing buf read_string strip ip ","FFI MemoryPointer  new  read_string strip ","buf read_buf read_string strip ing ","FFI MemoryPointer  new  read_string ","buf  format_message  ","FFI MemoryPointer  new  size ","buf read_string strip  inspect "," get_last_error  == ","FFI  errno  == "]}," ChildProcess Windows wait_for_pid":{"type":"method","name":"wait_for_pid","children":[],"call":["code != ","handle exit_code ","handle wait ","Handle  open "]}," ChildProcess Windows no_hang?":{"type":"method","name":"no_hang?","children":[],"call":["(send\n  (lvar :flags) :&\n  (const\n    (const nil :Process) :WNOHANG)) == ","flags & "]}," ChildProcess Windows waitpid2":{"type":"method","name":"waitpid2","children":[],"call":[" wait_for_pid "," no_hang? "]}," ChildProcess Windows waitpid":{"type":"method","name":"waitpid","children":[],"call":[" wait_for_pid "," no_hang? "]}," ChildProcess Windows kill":{"type":"method","name":"kill","children":[],"call":["(send\n  (lvar :pids) :map) compact "," send_signal ","pids map "," raise ","signal inspect "]}," ChildProcess Unix Process launch_process":{"type":"method","name":"launch_process","children":[],"call":[" exec ","io reopen ","(const nil :STDOUT) each "," fork "," Process  detach ","STDERR  reopen ","STDOUT  reopen ","@io stderr ","@io stdout "," detach? ","reader close "," io _stdin= "," io "," duplex? ","writer close ","STDIN  reopen "," IO  pipe "," set_env "," raise ","@args inspect ","exec_r read ","exec_r eof? ","exec_w close ","exec_w << ","ex message ","exec_r close ","ChildProcess  close_on_exec ","@io @io stderr  ","@io @io stdout  "]}," ChildProcess Unix Process send_signal":{"type":"method","name":"send_signal","children":[],"call":[" Process  kill "," log "," assert_started ","@pid -@ "," _pid "]}," ChildProcess Unix Process send_kill":{"type":"method","name":"send_kill","children":[],"call":[" send_signal "]}," ChildProcess Unix Process send_term":{"type":"method","name":"send_term","children":[],"call":[" send_signal "]}," ChildProcess Unix Process wait":{"type":"method","name":"wait","children":[],"call":[" Process  waitpid ","status termsig ","status exitstatus "," Process  waitpid2 "," assert_started "," exit_code "," exited? "," set_exit_code "," _pid "]}," ChildProcess Unix Process exited?":{"type":"method","name":"exited?","children":[],"call":["pid ! ! ","pid ! ","status termsig ","status exitstatus "," log "," Process  waitpid2 "," assert_started ","pid == "," set_exit_code "," Process WNOHANG  | "," _pid "]}," ChildProcess Unix Process stop":{"type":"method","name":"stop","children":[],"call":[" wait "," send_kill "," poll_for_exit "," send_term "," assert_started "]}," ChildProcess JRuby Process launch_process":{"type":"method","name":"launch_process","children":[],"call":["@process getInputStream close ","@process getInputStream ","@process getErrorStream close ","@process getErrorStream ","pb start ","env put ","ENV  each ","pb environment "," java lang ProcessBuilder new "," java lang ProcessBuilder "," java lang "," java "," backround_args! "," setup_io ","pb directory "," java io File new ","Dir  pwd "," java io File "," java io "," set_env "," raise ","ex message "," java io IOException ","pb start  getInputStream close ","pb start  getInputStream ","pb start  getErrorStream close ","pb start  getErrorStream "," java lang ProcessBuilder new  start ","pb environment  put ","pb pb environment ironment "," java lang ProcessBuilder new  environment "," java lang ProcessBuilder new  directory "," set_pb environment  "]}," ChildProcess JRuby Process stop":{"type":"method","name":"stop","children":[],"call":["@process exitValue ","@process waitFor ","@process destroy "," assert_started "," wait "]}," ChildProcess JRuby Process exited?":{"type":"method","name":"exited?","children":[],"call":[" java lang IllegalThreadStateException "," java lang "," java ","@process exitValue "," assert_started "," log "," stop_pumps ","ex message ","ex class "]}," ChildProcess AbstractProcess assert_started":{"type":"method","name":"assert_started","children":[],"call":[" raise "," started? "]}," ChildProcess AbstractProcess log":{"type":"method","name":"log","children":[],"call":["$stderr puts ","args inspect "," inspect ","ChildProcess  logger debug ","ChildProcess  logger "]}," ChildProcess AbstractProcess started?":{"type":"method","name":"started?","children":[],"call":[]}," ChildProcess AbstractProcess launch_process":{"type":"method","name":"launch_process","children":[],"call":[" raise "]}," ChildProcess AbstractProcess poll_for_exit":{"type":"method","name":"poll_for_exit","children":[],"call":[" raise "," sleep ","Time  now > ","Time  now "," exited? ","Time  now + "," log "]}," ChildProcess AbstractProcess crashed?":{"type":"method","name":"crashed?","children":[],"call":["@exit_code != "," exited? "]}," ChildProcess AbstractProcess alive?":{"type":"method","name":"alive?","children":[],"call":[" exited? ! "," exited? "," started? "]}," ChildProcess AbstractProcess exited?":{"type":"method","name":"exited?","children":[],"call":[" raise "]}," ChildProcess AbstractProcess stop":{"type":"method","name":"stop","children":[],"call":[" raise "]}," ChildProcess AbstractProcess start":{"type":"method","name":"start","children":[],"call":[" launch_process "]}," ChildProcess AbstractProcess initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","args inspect ","e kind_of? ","args all? "]}," ChildProcess os":{"type":"method","name":"os","children":[],"call":[" raise ","host_os inspect ","RbConfig CONFIG  [] "," require ","RbConfig CONFIG  [] downcase ","RbConfig CONFIG  []  inspect ","RbConfig CONFIG  [] downcase  inspect "]}," ChildProcess new":{"type":"method","name":"new","children":[],"call":["Unix Process  new ","Windows Process  new ","IronRuby Process  new ","JRuby Process  new "," platform "," raise "," platform inspect ","Unix ForkExecProcess  new ","Unix PosixSpawnProcess  new "," posix_spawn? "," jruby? "," os "," platform_name inspect "," platform_name "]}," ChildProcess JRuby Process background_args!":{"type":"method","name":"background_args!","children":[],"call":["@args push ","@args last == ","@args last ","@args unshift ","@args [] == "," start ","@args [] ","ChildProcess  os "]}," ChildProcess jruby?":{"type":"method","name":"jruby?","children":[],"call":[" platform == "," platform "]}," ChildProcess unix?":{"type":"method","name":"unix?","children":[],"call":["(sym :macosx) include? "," os "," jruby? ! "," jruby? "," windows? ! "," windows? "]}," ChildProcess Windows Lib msvcrt_name":{"type":"method","name":"msvcrt_name","children":[],"call":[]}," ChildProcess Windows Process io":{"type":"method","name":"io","children":[],"call":["Windows IO  new "]}," ChildProcess Windows IO has_to_io?":{"type":"method","name":"has_to_io?","children":[],"call":[" io to_io kind_of? "," io to_io "," io "," io respond_to? ","io to_io kind_of? ","io to_io ","io respond_to? "]}," ChildProcess Windows IO has_fileno?":{"type":"method","name":"has_fileno?","children":[],"call":["io fileno ","io respond_to? "]}," ChildProcess Windows IO check_type":{"type":"method","name":"check_type","children":[],"call":[" raise ","io class ","io inspect "," has_to_io? "," has_fileno? "]}," ChildProcess Windows Handle wait":{"type":"method","name":"wait","children":[],"call":["Lib  wait_for_single_object "]}," ChildProcess Windows Handle close":{"type":"method","name":"close","children":[],"call":["Lib  close_handle "]}," ChildProcess Windows Handle send":{"type":"method","name":"send","children":[],"call":["Lib  wait_for_single_object "," raise ","Lib  last_error_message ","Lib  create_remote_thread ","Lib  get_proc_address ","Lib  get_module_handle ","FFI MemoryPointer  new ","Lib  terminate_process ","Lib  generate_console_ctrl_event "," exit_code == "," exit_code "," check_error ","Lib  check_error ","Lib  create_remote_Lib  create_remote_thread  ","Lib  get_Lib  get_proc_address  ","Lib  get_Lib  get_module_handle  "]}," ChildProcess Windows Handle exit_code":{"type":"method","name":"exit_code","children":[],"call":[" raise ","Lib  last_error_message "," close ","code_pointer get_ulong ","Lib  get_exit_code ","FFI MemoryPointer  new ","FFI MemoryPointer  new  get_ulong "]}," ChildProcess Windows Handle initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","handle inspect ","handle null? ","handle kind_of? ","pointer inspect ","pointer null? ","pointer kind_of? "]}," ChildProcess Windows Handle open":{"type":"method","name":"open","children":[],"call":["h close "," block_given? "," new "," raise ","Lib  last_error_message ","handle null? ","Lib  open_process "," new  close "," new andle null? ","Lib  open_process  null? "]}," ChildProcess Windows Lib get_os_file_handle":{"type":"method","name":"get_os_file_handle","children":[],"call":[]}," ChildProcess Unix Process io":{"type":"method","name":"io","children":[],"call":["Unix IO  new "]}," ChildProcess Unix IO check_type":{"type":"method","name":"check_type","children":[],"call":[" raise ","result class ","result inspect ","result kind_of? ","io to_io ","io inspect ","io respond_to? ","io to_io  class ","io to_io  inspect ","io to_io  kind_of? "]}," ChildProcess JRuby Redirector run":{"type":"method","name":"run","children":[],"call":["$stderr puts ","ex backtrace ","ex message "," java io IOException "," java io "," java ","@output write ","read > ","@input read ","(send\n  (ivar :@input) :available) max ","@input available ","read != ","@input read  > ","@input @input read  ","(send\n  (ivar :@input) :(send\n  (ivar :@input) :available) max able) max ","@input (send\n  (ivar :@input) :available) max able ","@input read  != "]}," ChildProcess JRuby Redirector initialize":{"type":"method","name":"initialize","children":[],"call":["Java  byte [] new ","Java  byte [] ","Java  byte "]}," ChildProcess JRuby Process redirect":{"type":"method","name":"redirect","children":[],"call":["Redirector  new run ","Redirector  new ","Thread  new ","output to_outputstream ","input close ","output nil? ","Pump  new run ","Pump  new ","@pumps << ","output to_outputstream  to_output to_outputstream stream ","output to_outputstream  nil? "]}," ChildProcess JRuby Process setup_io":{"type":"method","name":"setup_io","children":[],"call":["@process getInputStream close ","@process getInputStream ","@process getErrorStream close ","@process getErrorStream "," redirect ","@io stdout ","@io stderr ","@process getOutputStream close ","@process getOutputStream "," io _stdin= ","@process getOutputStream to_io "," io "," duplex? ","stdin sync= ","@pumps << "," __flushit ","@java_stream flush ","stdin instance_variable_set "," create_stdin "," io _@process getOutputStream to_io = ","@process getOutputStream to_io  sync= ","@process getOutputStream to_io  instance_variable_set "," create_@process getOutputStream to_io  "]}," ChildProcess JRuby Process io":{"type":"method","name":"io","children":[],"call":["JRuby IO  new "]}," ChildProcess JRuby IO check_type":{"type":"method","name":"check_type","children":[],"call":[" raise ","output inspect ","output respond_to? "]}," ChildProcess AbstractProcess io":{"type":"method","name":"io","children":[],"call":[" raise "]}," ChildProcess AbstractIO check_type":{"type":"method","name":"check_type","children":[],"call":[" raise "]}," ChildProcess AbstractIO stdout=":{"type":"method","name":"stdout=","children":[],"call":[" check_type "]}," ChildProcess AbstractIO stderr=":{"type":"method","name":"stderr=","children":[],"call":[" check_type "]}," ChildProcess AbstractIO inherit!":{"type":"method","name":"inherit!","children":[],"call":[]}," ChildProcess windows?":{"type":"method","name":"windows?","children":[],"call":[" os == "," os "," jruby? ! "," jruby? "]}," ChildProcess close_on_exec":{"type":"method","name":"close_on_exec","children":[],"call":[" raise "," platform ","file inspect ","file fcntl ","file respond_to? ","Windows  dont_inherit "," windows? "," platform inspect ","file close_on_exec= ","Windows Lib  dont_inherit "," platform_name inspect "," platform_name ","Unix Lib  fcntl ","JRuby  posix_fileno_for "," posix_spawn? "," jruby? ","JRuby  posix_JRuby  posix_fileno_for _for "]}," ChildProcess Windows dont_inherit":{"type":"method","name":"dont_inherit","children":[],"call":[" raise ","Lib  last_error_message ","Lib  set_handle_information ","Lib  get_os_file_handle ","file fileno ","file inspect ","file respond_to? ","Lib  handle_for ","Lib  set_Lib  get_os_file_handle _information ","Lib  set_Lib  handle_for _information ","Lib  get_os_file_Lib  get_os_file_handle  ","Lib  get_os_file_Lib  handle_for  ","Lib  Lib  get_os_file_handle _for ","Lib  Lib  handle_for _for "]}," ChildProcess AbstractProcess detach?":{"type":"method","name":"detach?","children":[],"call":[]}," Windows SecurityAttributes initialize":{"type":"method","name":"initialize","children":[],"call":[" []= ","opts [] "," class size "," class "]}," ChildProcess Windows Lib duplicate_handle":{"type":"method","name":"duplicate_handle","children":[],"call":[" close_handle ","dup read_pointer "," check_error ","Lib  _duplicate_handle "," current_process ","FFI MemoryPointer  new ","FFI MemoryPointer  new  read_pointer ","Lib  _FFI MemoryPointer  new licate_handle "," current_ current_process ess "]}," ChildProcess Windows Lib io_for":{"type":"method","name":"io_for","children":[],"call":[" IO  for_fd "," raise "," last_error_message ","fd == "," open_osfhandle ","FFI IO  for_fd "," IO  for_ open_osfhandle  "," open_osfhandle  == ","FFI IO  for_ open_osfhandle  "]}," ChildProcess Windows Lib handle_for":{"type":"method","name":"handle_for","children":[],"call":[" raise "," last_error_message ","handle == ","fd_or_io inspect "," get_osfhandle ","io fileno ","io kind_of? ","fd_or_io to_io ","fd_or_io respond_to? ","fd_or_io fileno ","FFI Pointer  new ","fd_or_io kind_of? ","ChildProcess JRuby  windows_handle_for ","ChildProcess  jruby? "," get_osfhandle  == ","ChildProcess JRuby  windows_handle_for  == ","fd_or_fd_or_io to_io  inspect "," get_osf get_osfhandle  "," get_osfChildProcess JRuby  windows_handle_for  ","fd_or_io to_io  fileno ","fd_or_io to_io  kind_of? ","fd_or_fd_or_io to_io  to_fd_or_io to_io  ","fd_or_fd_or_io to_io  respond_to? ","fd_or_fd_or_io to_io  fileno ","fd_or_fd_or_io to_io  kind_of? ","ChildProcess JRuby  windows_ get_osfhandle _for ","ChildProcess JRuby  windows_ChildProcess JRuby  windows_handle_for _for "]}," ChildProcess AbstractProcess duplex?":{"type":"method","name":"duplex?","children":[],"call":[]}," ChildProcess AbstractIO _stdin=":{"type":"method","name":"_stdin=","children":[],"call":[" check_type "]}," ChildProcess jruby_on_unix?":{"type":"method","name":"jruby_on_unix?","children":[],"call":["name =~ "," java lang System getProperty downcase "," java lang System getProperty "," java lang System "," java lang "," java "," require "," jruby? ","(sym :macosx) include? "," os "," java lang System getProperty downcase  =~ "]}," ChildProcess JRuby Process pid":{"type":"method","name":"pid","children":[],"call":["field get ","field accessible= ","@process getClass getDeclaredField ","@process getClass "," raise ","NotImplementedError  new ","@process getClass getName != ","@process getClass getName ","e message "," java lang UnsupportedOperationException "," java lang "," java ","@process pid ","@process getClass getDeclaredField  get ","@process getClass getDeclaredField  accessible= "]}," ChildProcess AbstractProcess pid":{"type":"method","name":"pid","children":[],"call":[" raise "]}," ChildProcess Windows Process quote_if_necessary":{"type":"method","name":"quote_if_necessary","children":[],"call":["str start_with? "]}," ChildProcess Windows Process command_string":{"type":"method","name":"command_string","children":[],"call":["(send\n  (ivar :@args) :map) join "," quote_if_necessary ","arg to_s ","@args map "]}," ChildProcess Windows Lib environment_pointer_for":{"type":"method","name":"environment_pointer_for","children":[],"call":[]}," ChildProcess Unix Process set_env":{"type":"method","name":"set_env","children":[],"call":["ENV  []= ","v to_s ","k to_s ","@environment each "]}," ChildProcess JRuby Process set_env":{"type":"method","name":"set_env","children":[],"call":["env put ","v to_s ","k to_s ","@environment each ","ENV  each ","ENV  to_hash merge each ","ENV  to_hash merge ","ENV  to_hash ","env remove ","env key? ","removed_keys each ","env key_set to_a - ","merged keys ","env key_set to_a ","env key_set ","env has_key? ","merged each ","merged []= ","env key_set to_a -  each ","ENV  to_hash  keys ","ENV  to_hash  each ","ENV  to_hash  []= "]}," ChildProcess Windows Process wait":{"type":"method","name":"wait","children":[],"call":["@handle exit_code ","@handle wait ","@handle close "," exit_code "," exited? ","@job close "," close_job_if_necessary "," close_handle "]}," ChildProcess JRuby Pump pump":{"type":"method","name":"pump","children":[],"call":["$stderr puts ","ex backtrace ","ex message "," java io IOException "," java io "," java ","@output flush "," sleep ","@output write ","read > ","@input read ","(send\n  (ivar :@input) :available) max ","@input available ","read != ","Java  byte [] new ","Java  byte [] ","Java  byte ","avail > ","@input available == ","ChildProcess  logger debug ","ChildProcess  logger ","@input read  > ","@input @input read  ","(send\n  (ivar :@input) :(send\n  (ivar :@input) :available) max able) max ","@input (send\n  (ivar :@input) :available) max able ","@input read  != ","(send\n  (ivar :@input) :available) max  > ","@input (send\n  (ivar :@input) :available) max able == "]}," ChildProcess JRuby Pump run":{"type":"method","name":"run","children":[],"call":[" pump ","Thread  new "]}," ChildProcess JRuby Pump stop":{"type":"method","name":"stop","children":[],"call":["@thread join "]}," ChildProcess JRuby Pump initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ChildProcess JRuby Process stop_pumps":{"type":"method","name":"stop_pumps","children":[],"call":["pump stop ","@pumps each "]}," ChildProcess JRuby Process wait":{"type":"method","name":"wait","children":[],"call":["@process exitValue "," stop_pumps ","@process waitFor "," exit_code "," exited? "]}," ChildProcess JRuby Process initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ChildProcess AbstractProcess wait":{"type":"method","name":"wait","children":[],"call":[" raise "]}," ChildProcess Windows SecurityAttributes initialize":{"type":"method","name":"initialize","children":[],"call":[" []= ","opts [] "," class size "," class "]}," ChildProcess Windows ProcessBuilder quote_if_necessary":{"type":"method","name":"quote_if_necessary","children":[],"call":["(lvar :quote) join ","str start_with? "]}," ChildProcess Windows ProcessBuilder std_stream_handle_for":{"type":"method","name":"std_stream_handle_for","children":[],"call":["Lib  set_handle_inheritance ","Lib  handle_for ","io fileno ","Lib  set_Lib  handle_for _inheritance ","Lib  Lib  handle_for _for "]}," ChildProcess Windows ProcessBuilder close_handles":{"type":"method","name":"close_handles","children":[],"call":["Lib  close_handle ","Lib  io_for ","Lib  duplicate_handle "," process_info [] "," process_info "]}," ChildProcess Windows ProcessBuilder setup_stdin":{"type":"method","name":"setup_stdin","children":[],"call":[" startup_info []= "," startup_info ","Lib  set_handle_inheritance ","@write_pipe address ","write_pipe_ptr read_pointer ","read_pipe_ptr read_pointer ","Lib  check_error ","Lib  create_pipe ","SecurityAttributes  new ","FFI MemoryPointer  new ","write_pipe_ptr read_pointer  address ","FFI MemoryPointer  new  read_pointer "]}," ChildProcess Windows ProcessBuilder setup_io":{"type":"method","name":"setup_io","children":[],"call":[" setup_stdin "," startup_info []= "," std_stream_handle_for "," startup_info "," startup_info [] ","Lib  set_handle_inheritance ","write_pipe_ptr read_pointer ","read_pipe_ptr read_pointer ","Lib  check_error ","Lib  create_pipe ","SecurityAttributes  new ","FFI MemoryPointer  new ","FFI MemoryPointer  new  read_pointer "]}," ChildProcess Windows ProcessBuilder setup_detach":{"type":"method","name":"setup_detach","children":[],"call":[]}," ChildProcess Windows ProcessBuilder process_info":{"type":"method","name":"process_info","children":[],"call":["ProcessInfo  new "]}," ChildProcess Windows ProcessBuilder startup_info":{"type":"method","name":"startup_info","children":[],"call":["StartupInfo  new "]}," ChildProcess Windows ProcessBuilder create_process":{"type":"method","name":"create_process","children":[],"call":[" process_info [] "," process_info "," raise ","Lib  last_error_message ","Lib  create_process "," startup_info "," cwd "]}," ChildProcess Windows ProcessBuilder create_environment_pointer":{"type":"method","name":"create_environment_pointer","children":[],"call":["@env_ptr write_bytes ","env_str bytesize ","FFI MemoryPointer  new ","strings join ","strings << "," raise ","key include? ","@environment each ","ENV  map ","@environment any? ","@environment kind_of? ","@env_ptr put_bytes ","val inspect ","key inspect ","val include? ","key =~ ","val to_s include? ","val to_s ","key to_s =~ ","key to_s ","val nil? ","ENV  to_hash merge each ","ENV  to_hash merge ","ENV  to_hash ","FFI MemoryPointer  from_string "," to_wide_string ","FFI MemoryPointer  new  write_bytes ","FFI MemoryPointer  from_string  write_bytes ","strings join  bytesize "," to_wide_string  bytesize ","FFI MemoryPointer  new  put_bytes ","FFI MemoryPointer  from_string  put_bytes "]}," ChildProcess Windows ProcessBuilder create_command_pointer":{"type":"method","name":"create_command_pointer","children":[],"call":["FFI MemoryPointer  from_string ","(send\n  (ivar :@args) :map) join "," quote_if_necessary ","arg to_s ","@args map "," to_wide_string ","FFI MemoryPointer  from_(send\n  (ivar :@args) :map) join  "," to_wide_(send\n  (ivar :@args) :map) join  "]}," ChildProcess Windows ProcessBuilder start":{"type":"method","name":"start","children":[],"call":[" close_handles "," create_process "," setup_io "," setup_detach "," create_environment_pointer "," create_command_pointer "," create_cwd_pointer "," setup_flags "]}," ChildProcess Windows ProcessBuilder initialize":{"type":"method","name":"initialize","children":[],"call":[]}," ChildProcess Windows Lib wait_for_pid":{"type":"method","name":"wait_for_pid","children":[],"call":["code != ","handle exit_code ","handle wait ","Handle  open "]}," ChildProcess Windows Lib no_hang?":{"type":"method","name":"no_hang?","children":[],"call":["(send\n  (lvar :flags) :&\n  (const\n    (const nil :Process) :WNOHANG)) == ","flags & "]}," ChildProcess Windows Lib check_error":{"type":"method","name":"check_error","children":[],"call":[" raise "," last_error_message "]}," ChildProcess Windows Lib get_handle_inheritance":{"type":"method","name":"get_handle_inheritance","children":[],"call":["flags read_uint "," check_error "," get_handle_information ","FFI MemoryPointer  new ","FFI MemoryPointer  new  read_uint "]}," ChildProcess Windows Lib set_handle_inheritance":{"type":"method","name":"set_handle_inheritance","children":[],"call":[" check_error "," set_handle_information "]}," ChildProcess Windows Lib dont_inherit":{"type":"method","name":"dont_inherit","children":[],"call":[" set_handle_inheritance "," handle_for ","file fileno "," raise ","file inspect ","file respond_to? "]}," ChildProcess Windows Lib waitpid2":{"type":"method","name":"waitpid2","children":[],"call":[" wait_for_pid "," no_hang? "]}," ChildProcess Windows Lib waitpid":{"type":"method","name":"waitpid","children":[],"call":[" wait_for_pid "," no_hang? "]}," ChildProcess Windows Lib kill":{"type":"method","name":"kill","children":[],"call":["(send\n  (lvar :pids) :map) compact ","Lib  send_signal ","pids map "," raise ","signal inspect "]}," ChildProcess warn_once":{"type":"method","name":"warn_once","children":[],"call":["$stderr puts ","@warnings []= ","@warnings [] "," logger warn "," logger "]}," ChildProcess arch":{"type":"method","name":"arch","children":[],"call":["280246057025263 is_a? "," os == "," os ","RbConfig CONFIG  [] downcase ","RbConfig CONFIG  [] ","RUBY_VERSION  =~ "," workaround_older_macosx_misreported_cpu? "]}," ChildProcess posix_spawn=":{"type":"method","name":"posix_spawn=","children":[],"call":[]}," ChildProcess posix_spawn?":{"type":"method","name":"posix_spawn?","children":[],"call":[" warn_once ","ex message "," require "," raise ","ChildProcess  platform_name ","(str \"1\") include? ","ENV  [] "]}," ChildProcess linux?":{"type":"method","name":"linux?","children":[],"call":[" os == "," os "]}," ChildProcess platform_name":{"type":"method","name":"platform_name","children":[],"call":[" os "," arch "]}," ChildProcess Unix PosixSpawnProcess env":{"type":"method","name":"env","children":[],"call":["env put_array_of_pointer ","FFI MemoryPointer  new ","env_ptrs size ","env_ptrs << ","FFI MemoryPointer  from_string "," raise ","key include? ","ENV  to_hash merge map ","ENV  to_hash merge ","ENV  to_hash ","FFI MemoryPointer  new  put_array_of_pointer ","FFI MemoryPointer  new _ptrs size ","FFI MemoryPointer  new _ptrs << "]}," ChildProcess Unix PosixSpawnProcess argv":{"type":"method","name":"argv","children":[],"call":["argv put_array_of_pointer ","FFI MemoryPointer  new ","arg_ptrs size ","arg_ptrs << ","FFI MemoryPointer  from_string ","e to_s "," raise ","e inspect ","e include? ","@args map ","FFI MemoryPointer  new  put_array_of_pointer "]}," ChildProcess Unix PosixSpawnProcess launch_process":{"type":"method","name":"launch_process","children":[],"call":[" Process  detach "," detach? ","pid_ptr read_int "," raise ","Lib  strerror ","ret != ","attrs free ","actions free ","reader close "," io _stdin= "," io "," duplex? ","Lib  posix_spawnp "," env "," argv ","@args first ","attrs flags= ","actions add_close ","writer fileno ","actions add_dup ","$stdin fileno ","reader fileno "," IO  pipe ","actions add_open ","$stderr fileno ","@io stderr fileno ","@io stderr ","$stdout fileno ","@io stdout fileno ","@io stdout ","Lib Attrs  new ","Lib FileActions  new ","FFI MemoryPointer  new ","Envp  new ","ENV  to_hash merge ","ENV  to_hash ","Argv  new "," fileno_for ","Lib  chdir ","Dir  pwd ","ChildProcess  jruby? ","Dir  chdir ","@@cwd_lock synchronize ","attrs flags ","attrs pgroup= "," keep_pgid? "," leader? "," io stderr "," io stdout ","FFI MemoryPointer  new  read_int ","Lib  posix_spawnp  != ","Lib Attrs  new  free ","Lib FileActions  new  free "," Argv  new  ","Lib Attrs  new  flags= ","Lib FileActions  new  add_close ","Lib FileActions  new  add_dup ","Lib FileActions  new  add_open ","Lib Attrs  new  flags ","Lib Attrs  new  pgroup= "]}," MemoryPointer from_string":{"type":"method","name":"from_string","children":[],"call":[]}," ChildProcess Unix Lib Attrs to_ptr":{"type":"method","name":"to_ptr","children":[],"call":[]}," ChildProcess Unix Lib Attrs flags":{"type":"method","name":"flags","children":[],"call":["ptr read_short ","Lib  check ","Lib  posix_spawnattr_getflags ","FFI MemoryPointer  new ","FFI MemoryPointer  new  read_short "]}," ChildProcess Unix Lib Attrs flags=":{"type":"method","name":"flags=","children":[],"call":["Lib  check ","Lib  posix_spawnattr_setflags "]}," ChildProcess Unix Lib Attrs free":{"type":"method","name":"free","children":[],"call":["Lib  check ","Lib  posix_spawnattr_destroy "]}," ChildProcess Unix Lib Attrs initialize":{"type":"method","name":"initialize","children":[],"call":["Lib  check ","Lib  posix_spawnattr_init ","FFI MemoryPointer  new ","Platform SIZEOF  fetch "]}," ChildProcess Unix Lib FileActions to_ptr":{"type":"method","name":"to_ptr","children":[],"call":[]}," ChildProcess Unix Lib FileActions free":{"type":"method","name":"free","children":[],"call":["Lib  check ","Lib  posix_spawn_file_actions_destroy "]}," ChildProcess Unix Lib FileActions add_dup":{"type":"method","name":"add_dup","children":[],"call":["Lib  check ","Lib  posix_spawn_file_actions_adddup2 "]}," ChildProcess Unix Lib FileActions add_open":{"type":"method","name":"add_open","children":[],"call":["Lib  check ","Lib  posix_spawn_file_actions_addopen "]}," ChildProcess Unix Lib FileActions add_close":{"type":"method","name":"add_close","children":[],"call":["Lib  check ","Lib  posix_spawn_file_actions_addclose "]}," ChildProcess Unix Lib FileActions initialize":{"type":"method","name":"initialize","children":[],"call":["Lib  check ","Lib  posix_spawn_file_actions_init ","FFI MemoryPointer  new ","Platform SIZEOF  fetch "]}," ChildProcess Unix Lib check":{"type":"method","name":"check","children":[],"call":[]}," ChildProcess Unix ForkExecProcess set_env":{"type":"method","name":"set_env","children":[],"call":["ENV  []= ","v to_s ","k to_s ","@environment each ","v nil? "]}," ChildProcess Unix ForkExecProcess launch_process":{"type":"method","name":"launch_process","children":[],"call":[" Process  detach "," detach? "," raise ","@args inspect ","exec_r read ","exec_r eof? ","reader close "," io _stdin= "," io "," duplex? ","exec_w close ","exec_w << ","ex message "," exec ","writer close ","STDIN  reopen ","STDERR  reopen ","STDOUT  reopen "," set_env ","exec_r close "," fork "," IO  pipe ","ChildProcess  close_on_exec ","@io stderr ","@io stdout ","Dir  chdir "," Process  setpgid "," keep_pgid? "," leader? ","Kernel  exec ","Kernel  fork ","@io @io stderr  ","@io @io stdout  "]}," ChildProcess Tools Generator result":{"type":"method","name":"result","children":[],"call":["out join ","out << ","name ljust ","@constants each ","(send\n  (send\n    (ivar :@constants) :keys) :map) max ","e length ","@constants keys map ","@constants keys ","idx == ","@sizeof size - ","@sizeof size ","type ljust ","@sizeof each_with_index ","(send\n  (send\n    (ivar :@sizeof) :keys) :map) max ","@sizeof keys map ","@sizeof keys "," raise ","@sizeof empty? ","@constants empty? ","(send\n  (send\n    (ivar :@constants) :keys) :map) (send\n  (send\n    (ivar :@constants) :keys) :map) max  ","(send\n  (send\n    (ivar :@constants) :keys) :map) (send\n  (send\n    (ivar :@sizeof) :keys) :map) max  ","(send\n  (send\n    (ivar :@sizeof) :keys) :map) (send\n  (send\n    (ivar :@constants) :keys) :map) max  ","(send\n  (send\n    (ivar :@sizeof) :keys) :map) (send\n  (send\n    (ivar :@sizeof) :keys) :map) max  "]}," ChildProcess Tools Generator execute":{"type":"method","name":"execute","children":[],"call":["File  delete ","File  exist? ","output chomp "," raise ","cmd inspect ","$? success? "," system ","file << ","File  open ","program << ","(send\n  (lvar :includes) :map) join ","includes map "," Array + "," Array ","opts [] ","(send\n  (send nil :Array\n    (send\n      (lvar :opts) :[]\n      (sym :define))) :map) join "," Array map ","(send\n  (send nil :Array\n    (send\n      (lvar :opts) :[]\n      (sym :define))) :map) join  << ","(send\n  (lvar : Array + ) :map) join "," Array +  map "]}," ChildProcess Tools Generator fetch_constant":{"type":"method","name":"fetch_constant","children":[],"call":["@constants []= "," Integer "," execute "," puts "," print "]}," ChildProcess Tools Generator fetch_size":{"type":"method","name":"fetch_size","children":[],"call":["@sizeof []= ","output to_i "," raise ","output to_i < "," execute "," puts "," print ","@output to_i of []= "," execute  to_i "," execute  to_i < "]}," ChildProcess Tools Generator write":{"type":"method","name":"write","children":[],"call":[" puts ","io puts "," result ","File  open ","FileUtils  mkdir_p ","File  dirname "]}," ChildProcess Tools Generator generate":{"type":"method","name":"generate","children":[],"call":[" write "," fetch_constant ","ChildProcess  linux? "," fetch_size "]}," ChildProcess Tools Generator initialize":{"type":"method","name":"initialize","children":[],"call":["File  expand_path ","ChildProcess  platform_name ","ENV  [] "]}," ChildProcess MissingPlatformError initialize":{"type":"method","name":"initialize","children":[],"call":["(str \"posix_spawn is not yet supported on \") + ","ChildProcess  platform_name ","ChildProcess  ChildProcess  platform_name _name "]}," ChildProcess Unix PosixSpawnProcess Envp to_ptr":{"type":"method","name":"to_ptr","children":[],"call":["env put_array_of_pointer ","FFI MemoryPointer  new ","@ptrs size ","FFI MemoryPointer  new  put_array_of_pointer "]}," ChildProcess Unix PosixSpawnProcess Envp initialize":{"type":"method","name":"initialize","children":[],"call":["@ptrs << ","FFI MemoryPointer  from_string "," raise ","val inspect ","key inspect ","val include? ","key =~ ","env map ","(send\n  (lvar :env) :map) compact ","val nil? ","FFI Pointer  new ","val to_s ","val to_s inspect ","val to_s include? ","(send\n  (lvar :env) :map) compact  << "]}," ChildProcess Unix PosixSpawnProcess Argv to_ptr":{"type":"method","name":"to_ptr","children":[],"call":["argv put_array_of_pointer ","FFI MemoryPointer  new ","@ptrs size ","FFI MemoryPointer  new  put_array_of_pointer "]}," ChildProcess Unix PosixSpawnProcess Argv initialize":{"type":"method","name":"initialize","children":[],"call":["@ptrs << ","FFI MemoryPointer  from_string ","e to_s "," raise ","e inspect ","e include? ","args map ","FFI Pointer  new "]}," ChildProcess Unix PosixSpawnProcess fileno_for":{"type":"method","name":"fileno_for","children":[],"call":["obj fileno ","ChildProcess JRuby  posix_fileno_for "]}," ChildProcess Unix Lib environ":{"type":"method","name":"environ","children":[],"call":[]}," ChildProcess JRuby windows_handle_for":{"type":"method","name":"windows_handle_for","children":[],"call":[]}," ChildProcess JRuby posix_fileno_for":{"type":"method","name":"posix_fileno_for","children":[],"call":[]}," ChildProcess Windows ProcessBuilder cwd":{"type":"method","name":"cwd","children":[],"call":["FFI MemoryPointer  from_string ","Dir  pwd "]}," ChildProcess Windows ProcessBuilder create_cwd_pointer":{"type":"method","name":"create_cwd_pointer","children":[],"call":["FFI MemoryPointer  from_string ","Dir  pwd "," to_wide_string "]}," ChildProcess JRuby Process create_stdin":{"type":"method","name":"create_stdin","children":[{"type":"method","name":"__childprocess_flush__","children":[],"asgn":[],"call":["@childprocess_java_stream flush "]}],"call":[" __childprocess_flush__ "," define_method ","(sym :flush) each ","@childprocess_java_stream flush ","stdin instance_variable_set ","stdin sync= ","output_stream to_io ","@process getOutputStream ","output_stream to_io  instance_variable_set ","output_stream to_io  sync= ","@process getOutputStream  to_io "]}," ChildProcess Windows ProcessBuilder setup_flags":{"type":"method","name":"setup_flags","children":[],"call":[]}," ChildProcess Windows Process Job close":{"type":"method","name":"close","children":[],"call":["Lib  close_handle "]}," ChildProcess Windows Process Job <<":{"type":"method","name":"<<","children":[],"call":["Lib  check_error ","Lib  assign_process_to_job_object ","handle pointer "]}," ChildProcess Windows Process Job initialize":{"type":"method","name":"initialize","children":[],"call":["Lib  check_error ","Lib  set_information_job_object ","extended size ","extended []= ","JobObjectExtendedLimitInformation  new ","basic []= ","JobObjectBasicLimitInformation  new "," raise ","@pointer null? ","@pointer nil? ","Lib  create_job_object ","JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE  | ","basic [] ","detach ! ","JobObjectExtendedLimitInformation  new  size ","JobObjectExtendedLimitInformation  new  []= ","JobObjectBasicLimitInformation  new  []= ","Lib  create_job_object  null? ","Lib  create_job_object  nil? ","JobObjectBasicLimitInformation  new  [] "]}," ChildProcess Windows Lib alive?":{"type":"method","name":"alive?","children":[],"call":["ptr read_ulong == ","ptr read_ulong ","Lib  check_error ","Lib  get_exit_code ","FFI MemoryPointer  new ","handle null? ","Lib  open_process ","FFI MemoryPointer  new  read_ulong == ","FFI MemoryPointer  new  read_ulong ","Lib  open_process  null? "]}," ChildProcess Windows Lib each_child_of":{"type":"method","name":"each_child_of","children":[],"call":[" raise "]}," ChildProcess Unix Process _pid":{"type":"method","name":"_pid","children":[],"call":["@pid -@ "," keep_pgid? "," leader? "]}," ChildProcess Unix Process set_exit_code":{"type":"method","name":"set_exit_code","children":[],"call":["status termsig ","status exitstatus "]}," ChildProcess Unix Process keep_pgid?":{"type":"method","name":"keep_pgid?","children":[],"call":["@keep_pgid ! ! ","@keep_pgid ! "]}," ChildProcess Unix Process keep_pgid=":{"type":"method","name":"keep_pgid=","children":[],"call":[]}," ChildProcess Unix Lib Attrs pgroup=":{"type":"method","name":"pgroup=","children":[],"call":["Lib  check ","Lib  posix_spawnattr_setpgroup "," flags "]}," ChildProcess Windows Process close_job_if_necessary":{"type":"method","name":"close_job_if_necessary","children":[],"call":["@job close "," leader? "]}," ChildProcess Windows Process close_handle":{"type":"method","name":"close_handle","children":[],"call":["@handle close "]}," ChildProcess AbstractProcess leader?":{"type":"method","name":"leader?","children":[],"call":[]}," ChildProcess is_64_bit?":{"type":"method","name":"is_64_bit?","children":[],"call":["1 size == ","1 size "]}," ChildProcess workaround_older_macosx_misreported_cpu?":{"type":"method","name":"workaround_older_macosx_misreported_cpu?","children":[],"call":[" is_64_bit? "," os == "," os "]}," ChildProcess logger":{"type":"method","name":"logger","children":[],"call":["@logger level= ","Logger  new ","Logger  new  level= "]}," ChildProcess Windows ProcessBuilder to_wide_string":{"type":"method","name":"to_wide_string","children":[],"call":["newstr encode! ","str + ","\u0000 encode ","str encoding ","str +  encode! "]}," ChildProcess MissingFFIError initialize":{"type":"method","name":"initialize","children":[],"call":["FFI is a required pre-requisite for posix_spawn, falling back to default implementation.  + + ","FFI is a required pre-requisite for posix_spawn, falling back to default implementation.  + ","FFI is a required pre-requisite for Windows or posix_spawn support in the ChildProcess gem.  + + ","FFI is a required pre-requisite for Windows or posix_spawn support in the ChildProcess gem.  + "]}}