{" Lumberjack unit_of_work_id":{"type":"method","name":"unit_of_work_id","children":[],"call":["Thread  current [] ","Thread  current "," context [] "," context "]}," Lumberjack unit_of_work":{"type":"method","name":"unit_of_work","children":[],"call":["Thread  current []= ","Thread  current "," rand to_s rjust upcase "," rand to_s rjust "," rand to_s "," rand ","Thread  current [] ","SecureRandom  hex "," context []= "," context "]}," Lumberjack Template compile":{"type":"method","name":"compile","children":[],"call":["position + ","TEMPLATE_ARGUMENT_ORDER  index ","template gsub ","TEMPLATE_ARGUMENT_ORDER  size + ","tag_vars size ","TEMPLATE_ARGUMENT_ORDER  size ","tag_vars << ","match [] ","match length ","var_name [] ","var_name length ","match sub sub ","match sub ","TEMPLATE_ARGUMENT_ORDER  index  + ","match sub sub  [] ","match sub sub  length "]}," Lumberjack Template format_time":{"type":"method","name":"format_time","children":[],"call":["time strftime << ","MICROSECOND_FORMAT  % ","time usec ","time strftime ","MILLISECOND_FORMAT  % ","(send\n  (send\n    (lvar :time) :usec) :/\n  (float 1000.0)) round ","time usec / ","@time_format == ","@time_format is_a? "]}," Lumberjack Template call":{"type":"method","name":"call","children":[],"call":["message << ","@additional_line_template % ","entry unit_of_work_id ","entry pid ","entry progname ","entry severity_label ","lines each ","@first_line_template % ","lines shift "," format_time ","entry time ","entry message strip split ","entry message strip ","entry message ","line_message rstrip! ","line_message end_with? ","(send\n  (ivar :@additional_line_template) :%\n  (begin\n    (send\n      (lvar :format_args) :+\n      (lvar :tag_arguments)))) rstrip ","format_args + ","format_args []= ","format_args size - ","format_args size ","additional_lines each "," tag_args ","entry tags ","@additional_line_tags == ","additional_lines empty? ! ","additional_lines empty? ","message rstrip! ","message end_with? ","@time_formatter call ","additional_lines shift ","first_line split ","first_line include? ","entry message to_s ","entry is_a? ","@first_line_template %  << ","entry message strip split  each ","@additional_lines shift _template % ","@entry message to_s _template % ","entry message strip split  shift ","entry @first_line_template %  strip split ","entry @first_line_template %  strip ","entry @first_line_template %  ","line_@first_line_template %  rstrip! ","(send\n  (ivar :@additional_line_template) :%\n  (begin\n    (send\n      (lvar :format_args) :+\n      (lvar :tag_arguments)))) rstrip  rstrip! ","line_@first_line_template %  end_with? ","(send\n  (ivar :@additional_line_template) :%\n  (begin\n    (send\n      (lvar :format_args) :+\n      (lvar :tag_arguments)))) rstrip  end_with? ","(send\n  (ivar :@additional_line_template) :%\n  (begin\n    (send\n      (lvar :format_args) :+\n      (lvar : tag_args )))) rstrip ","additional_entry message strip split  each ","first_line split  each ","additional_entry message strip split  empty? ! ","first_line split  empty? ! ","additional_entry message strip split  empty? ","first_line split  empty? ","@first_line_template %  rstrip! ","@first_line_template %  end_with? ","additional_entry message strip split  shift ","first_line split  shift ","additional_lines shift  split ","entry message to_s  split ","additional_lines shift  include? ","entry message to_s  include? ","entry @first_line_template %  to_s "]}," Lumberjack Template initialize":{"type":"method","name":"initialize","children":[],"call":["options [] ","additional_lines include? ","first_line include? "," compile "," datetime_format= "]}," Lumberjack Severity label_to_level":{"type":"method","name":"label_to_level","children":[],"call":["SEVERITY_LABELS  index ","label to_s upcase ","label to_s "]}," Lumberjack Severity level_to_label":{"type":"method","name":"level_to_label","children":[],"call":["SEVERITY_LABELS  last ","SEVERITY_LABELS  [] "]}," Lumberjack Rack UnitOfWork call":{"type":"method","name":"call","children":[],"call":["@app call ","Lumberjack  unit_of_work "]}," Lumberjack Rack UnitOfWork initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Lumberjack Logger create_flusher_thread":{"type":"method","name":"create_flusher_thread","children":[],"call":["STDERR  puts ","e inspect ","logger flush ","Time  now - >= ","Time  now - ","logger last_flushed_at ","Time  now "," sleep "," loop ","Thread  new ","flush_seconds > "," closed? ! "," closed? "," warn ","$stderr puts "]}," Lumberjack Logger open_device":{"type":"method","name":"open_device","children":[],"call":["Device LogFile  new ","Device SizeRollingLogFile  new ","options [] ","Device DateRollingLogFile  new ","device to_s ","Device Null  new ","device == ","Device Writer  new ","device respond_to? ","device is_a? ","device nil? ","device to_s  to_s ","device to_s  == ","device to_s  respond_to? ","device to_s  is_a? ","device to_s  nil? "]}," Lumberjack Logger push_thread_local_value":{"type":"method","name":"push_thread_local_value","children":[],"call":[" set_thread_local_value "," thread_local_value "]}," Lumberjack Logger thread_local_value":{"type":"method","name":"thread_local_value","children":[],"call":["values [] ","Thread  current [] ","Thread  current ","Thread  current []  [] "]}," Lumberjack Logger set_thread_local_value":{"type":"method","name":"set_thread_local_value","children":[],"call":["values []= ","Thread  current []= ","Thread  current ","values empty? ","values delete ","value nil? ","Thread  current [] ","Thread  current []  []= ","Thread  current []  empty? ","Thread  current []  delete "]}," Lumberjack Logger progname":{"type":"method","name":"progname","children":[],"call":[" thread_local_value "]}," Lumberjack Logger set_progname":{"type":"method","name":"set_progname","children":[],"call":[" progname= "," push_thread_local_value "]}," Lumberjack Logger silence":{"type":"method","name":"silence","children":[],"call":[" push_thread_local_value "," silencer ","Severity  label_to_level ","temporary_level is_a? ","Severity  label_to_level  is_a? "]}," Lumberjack Logger level=":{"type":"method","name":"level=","children":[],"call":["Severity  label_to_level ","severity is_a? ","value is_a? ","Severity  coerce "]}," Lumberjack Logger unknown":{"type":"method","name":"unknown","children":[],"call":[" add "," call_add_entry "]}," Lumberjack Logger debug?":{"type":"method","name":"debug?","children":[],"call":[" level <= "," level "]}," Lumberjack Logger debug":{"type":"method","name":"debug","children":[],"call":[" add "," call_add_entry "]}," Lumberjack Logger info?":{"type":"method","name":"info?","children":[],"call":[" level <= "," level "]}," Lumberjack Logger info":{"type":"method","name":"info","children":[],"call":[" add "," call_add_entry "]}," Lumberjack Logger warn?":{"type":"method","name":"warn?","children":[],"call":[" level <= "," level "]}," Lumberjack Logger warn":{"type":"method","name":"warn","children":[],"call":[" add "," call_add_entry "]}," Lumberjack Logger error?":{"type":"method","name":"error?","children":[],"call":[" level <= "," level "]}," Lumberjack Logger error":{"type":"method","name":"error","children":[],"call":[" add "," call_add_entry "]}," Lumberjack Logger fatal?":{"type":"method","name":"fatal?","children":[],"call":[" level <= "," level "]}," Lumberjack Logger fatal":{"type":"method","name":"fatal","children":[],"call":[" add "," call_add_entry "]}," Lumberjack Logger close":{"type":"method","name":"close","children":[],"call":["@device close ","@device respond_to? "," flush "," device close "," device "," device respond_to? "]}," Lumberjack Logger flush":{"type":"method","name":"flush","children":[],"call":["Time  now "," device flush "," device "]}," Lumberjack Logger add":{"type":"method","name":"add","children":[],"call":["$stderr puts ","entry to_s "," at  + ","e backtrace first ","e backtrace ","e message ","e class name ","e class "," device write "," device ","LogEntry  new ","Lumberjack  unit_of_work_id "," progname ","@formatter format "," block_given? ","message nil? ","Time  now ","severity >= "," level ","Severity  label_to_level ","severity is_a? ","@_formatter format "," add_entry ","LogEntry  new  to_s ","e @formatter format  ","e @_formatter format  ","@formatter format  nil? ","@_formatter format  nil? ","Severity  label_to_level  >= ","Severity  label_to_level  is_a? "," add_LogEntry  new  "]}," Lumberjack Logger level":{"type":"method","name":"level","children":[],"call":[" thread_local_value "]}," Lumberjack Logger initialize":{"type":"method","name":"initialize","children":[],"call":[" create_flusher_thread ","max_flush_seconds > ","Time  now ","Mutex  new ","Formatter  new "," open_device ","options delete to_f ","options delete "," progname= "," level= ","options dup "," datetime_format= ","options [] ","TagFormatter  new "," formatter= ","options delete to_f  > ","options dup  delete to_f ","options dup  delete ","options dup  dup ","options dup  [] "]}," Lumberjack LogEntry inspect":{"type":"method","name":"inspect","children":[],"call":[" to_s "]}," Lumberjack LogEntry to_s":{"type":"method","name":"to_s","children":[],"call":["buf << "," message "," unit_of_work_id "," pid "," progname "," severity_label ","(send\n  (send\n    (send nil :time) :usec) :/\n  (float 1000.0)) round to_s rjust ","(send\n  (send\n    (send nil :time) :usec) :/\n  (float 1000.0)) round to_s ","(send\n  (send\n    (send nil :time) :usec) :/\n  (float 1000.0)) round "," time usec / "," time usec "," time "," time strftime "," tags_to_s "]}," Lumberjack LogEntry severity_label":{"type":"method","name":"severity_label","children":[],"call":["Severity  level_to_label "," severity "]}," Lumberjack LogEntry initialize":{"type":"method","name":"initialize","children":[],"call":["Severity  label_to_level ","severity is_a? ","tags is_a? ","tags nil? "]}," Lumberjack Formatter formatter_for":{"type":"method","name":"formatter_for","children":[],"call":["klass superclass ","@class_formatters [] ","klass != ","klass include? ","@module_formatters detect ","klass name ","klass nil? ","klass superclass  superclass ","@class_@class_formatters [] s [] ","klass superclass  != ","klass superclass  include? ","@module_@class_formatters [] s detect ","klass superclass  name ","klass superclass  nil? "]}," Lumberjack Formatter format":{"type":"method","name":"format","children":[],"call":[" formatter_for call "," formatter_for ","message class ","formatter call ","formatter respond_to? ","  formatter_for _for call ","  formatter_for _for "," formatter_for  call "," formatter_for  respond_to? "]}," Lumberjack Formatter remove":{"type":"method","name":"remove","children":[],"call":["@class_formatters delete ","@module_formatters delete ","klass is_a? ","k name ","k is_a? ","k class == ","k class "," Array each "," Array ","k instance_of? ","k name lass is_a? ","k name  name ","k name  is_a? ","k name  class == ","k name  class ","k name  instance_of? "]}," Lumberjack Formatter add":{"type":"method","name":"add","children":[],"call":["@class_formatters []= ","Formatter  const_get new ","Formatter  const_get ","$~ [] upcase ","$~ [] ","formatter to_s gsub ","formatter to_s ","formatter is_a? ","@module_formatters []= ","klass is_a? ","k name ","k is_a? ","k class == ","k class "," Array each "," Array "," remove ","formatter nil? ","k instance_of? ","formatter new ","@class_Formatter  const_get new s []= ","@class_formatter new s []= ","@class_Formatter  const_get s []= ","Formatter  const_get new  to_s gsub ","formatter new  to_s gsub ","Formatter  const_get  to_s gsub ","Formatter  const_get new  to_s ","formatter new  to_s ","Formatter  const_get  to_s ","Formatter  const_get new  is_a? ","formatter new  is_a? ","Formatter  const_get  is_a? ","@module_Formatter  const_get new s []= ","@module_formatter new s []= ","@module_Formatter  const_get s []= ","k name lass is_a? ","k name  name ","k name  is_a? ","k name  class == ","k name  class ","Formatter  const_get new  nil? ","formatter new  nil? ","Formatter  const_get  nil? ","k name  instance_of? ","Formatter  const_get new  new ","formatter new  new ","Formatter  const_get  new "]}," Lumberjack Formatter initialize":{"type":"method","name":"initialize","children":[],"call":[" add ","InspectFormatter  new ","StructuredFormatter  new "]}," Lumberjack Formatter StringFormatter call":{"type":"method","name":"call","children":[],"call":["obj to_s "]}," Lumberjack Formatter PrettyPrintFormatter call":{"type":"method","name":"call","children":[],"call":["s string chomp ","s string ","PP  pp ","StringIO  new ","StringIO  new  StringIO  new tring chomp ","StringIO  new  StringIO  new tring "]}," Lumberjack Formatter PrettyPrintFormatter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Lumberjack Formatter InspectFormatter call":{"type":"method","name":"call","children":[],"call":["obj inspect "]}," Lumberjack Formatter ExceptionFormatter call":{"type":"method","name":"call","children":[],"call":["message << ","exception backtrace join ","exception backtrace ","exception message ","exception class name ","exception class ","trace join "," clean_backtrace ","(begin\n  (send\n    (send\n      (lvar :exception) :class) :name)) +@ ","(begin\n  (send\n    (send\n      (lvar :exception) :class) :name)) +@  << ","exception back clean_backtrace  join ","exception backexception backtrace  join ","exception back clean_backtrace  ","exception backexception backtrace  ","exception (begin\n  (send\n    (send\n      (lvar :exception) :class) :name)) +@  "," clean_backtrace  join ","exception backtrace  join "," clean_back clean_backtrace  "," clean_backexception backtrace  "]}," Lumberjack Device flush":{"type":"method","name":"flush","children":[],"call":[]}," Lumberjack Device close":{"type":"method","name":"close","children":[],"call":[" flush "]}," Lumberjack Device write":{"type":"method","name":"write","children":[],"call":[" raise "]}," Lumberjack Device Writer stream":{"type":"method","name":"stream","children":[],"call":[]}," Lumberjack Device Writer stream=":{"type":"method","name":"stream=","children":[],"call":[]}," Lumberjack Device Writer before_flush":{"type":"method","name":"before_flush","children":[],"call":[]}," Lumberjack Device Writer flush":{"type":"method","name":"flush","children":[],"call":["@buffer clear ","$stderr flush ","$stderr write "," at  + ","e backtrace first ","e backtrace ","e message ","e class name ","e class "," stream flush "," stream "," stream write ","@buffer join << ","@buffer join ","@buffer empty? "," before_flush ","@lock synchronize "," raise "," stream closed? ","lines join ","lines empty? ","@buffer pop! "," write_to_stream "," respond_to? ","@buffer pop!  join ","@buffer pop!  empty? "]}," Lumberjack Device Writer close":{"type":"method","name":"close","children":[],"call":[" stream close "," stream "," flush "]}," Lumberjack Device Writer write":{"type":"method","name":"write","children":[],"call":[" flush ","@buffer size >= "," buffer_size ","@buffer size ","@buffer << ","@lock synchronize ","@template call ","string encode ","UTF-8 freeze ","string nil? "," write_to_stream "," respond_to? "," buffer_size > ","string encoding == ","string encoding ","string length == ","string length ","string strip ","entry is_a? ","@template call  encode ","string encode  encode ","string strip  encode ","@template call  nil? ","string encode  nil? ","string strip  nil? ","@template call  encoding == ","string encode  encoding == ","string strip  encoding == ","@template call  encoding ","string encode  encoding ","string strip  encoding ","@template call  length == ","string encode  length == ","string strip  length == ","@template call  length ","string encode  length ","string strip  length ","@template call  strip ","string encode  strip ","string strip  strip "]}," Lumberjack Device Writer initialize":{"type":"method","name":"initialize","children":[],"call":["Template  new ","options [] ","template respond_to? ","32 * ","Buffer  new ","@stream sync= ","@stream respond_to? ","Mutex  new "]}," Lumberjack Device Writer Buffer clear":{"type":"method","name":"clear","children":[],"call":[]}," Lumberjack Device Writer Buffer join":{"type":"method","name":"join","children":[],"call":["@values join "]}," Lumberjack Device Writer Buffer empty?":{"type":"method","name":"empty?","children":[],"call":["@values empty? "]}," Lumberjack Device Writer Buffer <<":{"type":"method","name":"<<","children":[],"call":["string size ","@values << ","string encode ","UTF-8 freeze "]}," Lumberjack Device Writer Buffer initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Lumberjack Device SizeRollingLogFile next_archive_number":{"type":"method","name":"next_archive_number","children":[],"call":["max + ","suffix > ","filename split last to_i ","filename split last ","filename split ","filename match ","Dir  glob each ","Dir  glob "," path ","filename split last to_i  > "]}," Lumberjack Device SizeRollingLogFile roll_file?":{"type":"method","name":"roll_file?","children":[],"call":[" stream stat size >= "," stream stat size "," stream stat "," stream "," stream stat size > "]}," Lumberjack Device SizeRollingLogFile archive_file_suffix":{"type":"method","name":"archive_file_suffix","children":[],"call":[" next_archive_number to_s "," next_archive_number "]}," Lumberjack Device SizeRollingLogFile initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","ArgumentError  new ","@max_size round ","1024 ** ","$~ [] to_s upcase ","$~ [] to_s ","$~ [] ","$~ [] to_f ","@max_size match ","@max_size is_a? ","options [] ","@max_size =~ ","@max_size round  round ","$~ [] to_f  round ","options []  round ","@max_size round  match ","$~ [] to_f  match ","options []  match ","@max_size round  is_a? ","$~ [] to_f  is_a? ","options []  is_a? ","@max_size round  =~ ","$~ [] to_f  =~ ","options []  =~ "]}," Lumberjack Device do_once":{"type":"method","name":"do_once","children":[],"call":[" stream flock "," stream ","verify size > ","verify size ","verify ino == ","verify ino ","file lstat ","file flock "]}," Lumberjack Device cleanup_files!":{"type":"method","name":"cleanup_files!","children":[],"call":["File  delete ","files [] each ","files [] ","files length "," keep ","files size > ","files size ","a first ","(send\n  (block\n    (send\n      (send\n        (const nil :Dir) :glob\n        (dstr\n          (begin\n            (send nil :path))\n          (str \".*\"))) :collect)\n    (args\n      (arg :f))\n    (array\n      (lvar :f)\n      (send\n        (const nil :File) :ctime\n        (lvar :f)))) :sort) collect ","b last <=> ","a last ","b last ","(send\n  (send\n    (const nil :Dir) :glob\n    (dstr\n      (begin\n        (send nil :path))\n      (str \".*\"))) :collect) sort ","File  ctime ","Dir  glob collect ","Dir  glob "," path "]}," Lumberjack Device RollingLogFile roll_file!":{"type":"method","name":"roll_file!","children":[],"call":["STDERR  write ","e backtrace join ","e backtrace ","e inspect "," path "," reopen_file "," cleanup_files! "," after_roll ","File  rename ","File  exist? ! ","File  exist? ","current_inode == ","File  stat ino ","File  stat "," stream flush "," stream "," archive_file_suffix "," do_once ","$stderr write "]}," Lumberjack Device RollingLogFile reopen_file":{"type":"method","name":"reopen_file","children":[],"call":["old_stream close "," stream lstat ino "," stream lstat "," stream "," stream sync= "," stream= ","File  open "," path ","new_stream lstat ino ","new_stream lstat ","new_stream sync= "," buffer_size > "," buffer_size "," stream  close ","File  open  lstat ino ","File  open  lstat ","File  open  sync= "]}," Lumberjack Device RollingLogFile before_flush":{"type":"method","name":"before_flush","children":[],"call":[" roll_file! "," roll_file? "," reopen_file ","path_inode != ","File  lstat ino ","File  lstat "," path ","Time  now to_f >= ","Time  now to_f ","Time  now ","@min_roll_check <= "]}," Lumberjack Device RollingLogFile after_roll":{"type":"method","name":"after_roll","children":[],"call":[]}," Lumberjack Device RollingLogFile roll_file?":{"type":"method","name":"roll_file?","children":[],"call":[" raise "]}," Lumberjack Device RollingLogFile archive_file_suffix":{"type":"method","name":"archive_file_suffix","children":[],"call":[" raise "]}," Lumberjack Device RollingLogFile initialize":{"type":"method","name":"initialize","children":[],"call":[" stream lstat ino "," stream lstat "," stream ","options [] ","File  expand_path ","(or\n  (send\n    (lvar :options) :[]\n    (sym :min_roll_check))\n  (float 1.0)) to_f ","Time  now to_f ","Time  now "]}," Lumberjack Device Null write":{"type":"method","name":"write","children":[],"call":[]}," Lumberjack Device Null initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Lumberjack Device LogFile initialize":{"type":"method","name":"initialize","children":[],"call":["File  new ","FileUtils  mkdir_p ","File  dirname ","File  expand_path "," file_stream "]}," Lumberjack Device DateRollingLogFile after_roll":{"type":"method","name":"after_roll","children":[],"call":["Date  today "]}," Lumberjack Device DateRollingLogFile roll_file?":{"type":"method","name":"roll_file?","children":[],"call":["date month > ","@file_date month ","date month ","@roll_period == ","date cweek > ","@file_date cweek ","date cweek ","date yday > ","@file_date yday ","date yday ","date year > ","@file_date year ","date year ","Date  today ","date cweek != ","Date  today  month > ","@file_Date  today  month ","Date  today  month ","Date  today  cweek > ","@file_Date  today  cweek ","Date  today  cweek ","Date  today  yday > ","@file_Date  today  yday ","Date  today  yday ","Date  today  year > ","@file_Date  today  year ","Date  today  year ","Date  today  cweek != "]}," Lumberjack Device DateRollingLogFile archive_file_suffix":{"type":"method","name":"archive_file_suffix","children":[],"call":["@file_date strftime ","@file_date strftime to_s "]}," Lumberjack Device DateRollingLogFile initialize":{"type":"method","name":"initialize","children":[],"call":[" raise ","ArgumentError  new ","options [] inspect ","options [] ","options delete ","$~ [] downcase to_sym ","$~ [] downcase ","$~ [] ","options [] to_s match ","options [] to_s ","Date  today "]}," Lumberjack Device Writer buffer_size=":{"type":"method","name":"buffer_size=","children":[],"call":[" flush "]}," Lumberjack Logger formatter":{"type":"method","name":"formatter","children":[],"call":["TaggedLoggerSupport Formatter  new "," respond_to? "]}," Lumberjack Formatter call":{"type":"method","name":"call","children":[],"call":[" format "]}," Lumberjack Rack RequestId call":{"type":"method","name":"call","children":[],"call":["@app call ","Lumberjack  unit_of_work ","request_id split first ","request_id split ","- freeze ","env [] ","request_id split first  split first ","env []  split first ","request_id split first  split ","env []  split "]}," Lumberjack Rack RequestId initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Lumberjack Device Writer Buffer pop!":{"type":"method","name":"pop!","children":[],"call":[" clear ","@values empty? "]}," Lumberjack tag":{"type":"method","name":"tag","children":[],"call":["context tag ","Thread  current [] ","Thread  current ","Thread  current []  tag "]}," Lumberjack context_tags":{"type":"method","name":"context_tags","children":[],"call":["context tags ","Thread  current [] ","Thread  current ","Thread  current []  tags "]}," Lumberjack context":{"type":"method","name":"context","children":[],"call":["Context  new ","Thread  current []= ","Thread  current "," block_given? ","Thread  current [] "," use_context "]}," Lumberjack Template tag_args":{"type":"method","name":"tag_args","children":[],"call":["args << ","tags [] ","tag_vars each ","tags_string chop ","tags_string << ","value inspect ","tag_vars include? ","tags each ","String  new ","(nil) * ","tag_vars size + ","tag_vars size ","tags size == ","tags size ","tags nil? ","value gsub ","value include? ","value to_s ","value nil? "," +@ ","String  new  chop "," +@  chop ","String  new  << "," +@  << ","value gsub  inspect ","value to_s  inspect ","value gsub  gsub ","value to_s  gsub ","value gsub  include? ","value to_s  include? ","value gsub  to_s ","value to_s  to_s ","value gsub  nil? ","value to_s  nil? "]}," Lumberjack Template datetime_format":{"type":"method","name":"datetime_format","children":[],"call":["@time_formatter format "]}," Lumberjack Template datetime_format=":{"type":"method","name":"datetime_format=","children":[],"call":["Formatter DateTimeFormatter  new ","format == "]}," Lumberjack Tags stringify_keys":{"type":"method","name":"stringify_keys","children":[],"call":["copy []= ","key to_s ","hash each ","hash transform_keys ","hash respond_to? ","key is_a? ","hash keys all? ","hash keys ","hash nil? "]}," Lumberjack Rack Context call":{"type":"method","name":"call","children":[],"call":["@app call ","Lumberjack  context "]}," Lumberjack Rack Context initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Lumberjack Logger write_to_device":{"type":"method","name":"write_to_device","children":[],"call":["$stderr puts ","entry to_s "," at  + ","e backtrace first ","e backtrace ","e message ","e class name ","e class ","@device write "," device write "," device "]}," Lumberjack Logger call_add_entry":{"type":"method","name":"call_add_entry","children":[],"call":[" add_entry ","progname_or_tags is_a? ","message_or_progname_or_tags is_a? "]}," Lumberjack Logger tags":{"type":"method","name":"tags","children":[],"call":["tags merge! ","scope_tags empty? ! ","scope_tags empty? "," thread_local_value ","@tags empty? ! ","@tags empty? ","context_tags empty? ! ","context_tags empty? ","Lumberjack  context_tags "," thread_local_value ! "," thread_local_value  empty? ! "," thread_local_value  empty? ","Lumberjack  context_tags  empty? ! ","Lumberjack  context_tags  empty? ","Lumberjack  Lumberjack  context_tags  "]}," Lumberjack Logger tag":{"type":"method","name":"tag","children":[],"call":["@tags merge! "," push_thread_local_value ","thread_tags merge "," thread_local_value ","Tags  stringify_keys ","thread_tags merge! ","tags dup ","@Tags  stringify_keys  merge! "," thread_local_value  merge ","thread_Tags  stringify_keys  merge "," thread_local_value  merge! ","thread_Tags  stringify_keys  merge! ","Tags  stringify_keys  dup "]}," Lumberjack Logger <<":{"type":"method","name":"<<","children":[],"call":[" add_entry "]}," Lumberjack Logger reopen":{"type":"method","name":"reopen","children":[],"call":[" device reopen "," device "," device respond_to? "]}," Lumberjack Logger add_entry":{"type":"method","name":"add_entry","children":[],"call":[" write_to_device ","LogEntry  new ","current_tags merge ","Tags  stringify_keys ","current_tags dup ","tags nil? ","current_tags empty? ","tags is_a? "," tags "," progname "," formatter format "," formatter ","message call ","message is_a? ","Time  now ","severity >= "," level ","Severity  label_to_level ","severity is_a? ","Tags  expand_runtime_values "," tag_formatter format "," tag_formatter "," device ","Thread  current []= ","Thread  current ","Thread  current [] ","current_current_tags merge  merge ","current_current_tags dup  merge ","current_Tags  stringify_keys  merge ","current_Tags  expand_runtime_values  merge ","current_ tag_formatter format  merge "," tags  merge ","current_current_tags merge  dup ","current_current_tags dup  dup ","current_Tags  stringify_keys  dup ","current_Tags  expand_runtime_values  dup ","current_ tag_formatter format  dup "," tags  dup ","current_tags merge  nil? ","current_tags dup  nil? ","Tags  stringify_keys  nil? ","Tags  expand_runtime_values  nil? "," tag_formatter format  nil? ","current_current_tags merge  empty? ","current_current_tags dup  empty? ","current_Tags  stringify_keys  empty? ","current_Tags  expand_runtime_values  empty? ","current_ tag_formatter format  empty? "," tags  empty? ","current_tags merge  is_a? ","current_tags dup  is_a? ","Tags  stringify_keys  is_a? ","Tags  expand_runtime_values  is_a? "," tag_formatter format  is_a? "," current_tags merge  "," current_tags dup  "," Tags  stringify_keys  "," Tags  expand_runtime_values  ","  tag_formatter format  "," formatter format  call ","message call  call "," formatter format  is_a? ","message call  is_a? ","Severity  label_to_level  >= ","Severity  label_to_level  is_a? ","Tags  expand_runTime  now _values "]}," Lumberjack Logger formatter=":{"type":"method","name":"formatter=","children":[],"call":["value __formatter ","value is_a? "]}," Lumberjack Logger datetime_format=":{"type":"method","name":"datetime_format=","children":[],"call":["@device datetime_format= ","@device respond_to? "," device datetime_format= "," device "," device respond_to? "]}," Lumberjack Logger datetime_format":{"type":"method","name":"datetime_format","children":[],"call":["@device datetime_format ","@device respond_to? "," device datetime_format "," device "," device respond_to? "]}," Lumberjack LogEntry tags_to_s":{"type":"method","name":"tags_to_s","children":[],"call":["tags_string << ","value inspect "," tags each "," tags ","String  new "," +@ ","String  new  << "," +@  << "]}," Lumberjack LogEntry unit_of_work_id=":{"type":"method","name":"unit_of_work_id=","children":[],"call":[" tags []= "," tags "]}," Lumberjack LogEntry unit_of_work_id":{"type":"method","name":"unit_of_work_id","children":[],"call":[" tags [] "," tags "]}," Lumberjack Formatter clear":{"type":"method","name":"clear","children":[],"call":["@module_formatters clear ","@class_formatters clear "]}," Lumberjack Formatter StructuredFormatter call":{"type":"method","name":"call","children":[],"call":["@formatter format "," call ","obj collect ","obj is_a? ","hash []= ","name to_s ","obj each ","Set  new ","obj size != ","obj size ","obj respond_to? "," call_with_references "]}," Lumberjack Formatter StructuredFormatter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Lumberjack Formatter ObjectFormatter call":{"type":"method","name":"call","children":[],"call":[]}," Lumberjack Formatter IdFormatter call":{"type":"method","name":"call","children":[],"call":["obj to_s ","obj class name ","obj class ","obj send ","obj respond_to? "]}," Lumberjack Formatter IdFormatter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Lumberjack Formatter DateTimeFormatter call":{"type":"method","name":"call","children":[],"call":["obj to_s ","obj iso8601 ","obj respond_to? ","obj strftime "]}," Lumberjack Formatter DateTimeFormatter initialize":{"type":"method","name":"initialize","children":[],"call":["format dup to_s freeze ","format dup to_s ","format dup ","format nil? "]}," Lumberjack Device datetime_format=":{"type":"method","name":"datetime_format=","children":[],"call":[]}," Lumberjack Device datetime_format":{"type":"method","name":"datetime_format","children":[],"call":[]}," Lumberjack Device reopen":{"type":"method","name":"reopen","children":[],"call":[" flush "]}," Lumberjack Device Writer write_to_stream":{"type":"method","name":"write_to_stream","children":[],"call":["$stderr flush ","$stderr write "," at  + ","e backtrace first ","e backtrace ","e message ","e class name ","e class "," stream flush "," stream "," stream write "," raise "," stream closed? ","@lock synchronize ","lines join ","lines is_a? ","lines first ","lines size == ","lines size ","lines empty? ","lines first  join ","lines first  is_a? ","lines first  first ","lines first  size == ","lines first  size ","lines first  empty? "]}," Lumberjack Device Writer datetime_format=":{"type":"method","name":"datetime_format=","children":[],"call":["@template datetime_format= ","@template respond_to? "]}," Lumberjack Device Writer datetime_format":{"type":"method","name":"datetime_format","children":[],"call":["@template datetime_format ","@template respond_to? "]}," Lumberjack Device Multi datetime_format=":{"type":"method","name":"datetime_format=","children":[],"call":["device datetime_format= ","@devices each "]}," Lumberjack Device Multi datetime_format":{"type":"method","name":"datetime_format","children":[],"call":["@devices detect datetime_format ","@devices detect "]}," Lumberjack Device Multi reopen":{"type":"method","name":"reopen","children":[],"call":["device reopen ","@devices each "]}," Lumberjack Device Multi close":{"type":"method","name":"close","children":[],"call":["device close ","@devices each "]}," Lumberjack Device Multi flush":{"type":"method","name":"flush","children":[],"call":["device flush ","@devices each "]}," Lumberjack Device Multi write":{"type":"method","name":"write","children":[],"call":["device write ","@devices each "]}," Lumberjack Device Multi initialize":{"type":"method","name":"initialize","children":[],"call":["devices flatten "]}," Lumberjack Device LogFile file_stream":{"type":"method","name":"file_stream","children":[],"call":["File  new "]}," Lumberjack Device LogFile reopen":{"type":"method","name":"reopen","children":[],"call":[" file_stream "," close "]}," Lumberjack Context reset":{"type":"method","name":"reset","children":[],"call":["@tags clear "]}," Lumberjack Context []=":{"type":"method","name":"[]=","children":[],"call":["@tags []= ","key to_s "]}," Lumberjack Context []":{"type":"method","name":"[]","children":[],"call":["@tags [] ","key to_s "]}," Lumberjack Context tag":{"type":"method","name":"tag","children":[],"call":["@tags []= ","key to_s ","tags each "]}," Lumberjack Context initialize":{"type":"method","name":"initialize","children":[],"call":["@tags merge! ","parent_context tags "]}," Lumberjack Tags expand_runtime_values":{"type":"method","name":"expand_runtime_values","children":[],"call":["copy []= ","key to_s ","value call ","value arity == ","value arity ","value is_a? ","hash each ","value is_a? ! ","key is_a? ","hash all? ","hash nil? ","value call  call ","value call  arity == ","value call  arity ","value call  is_a? ","value call  is_a? ! "]}," Lumberjack TaggedLoggerSupport clear_tags!":{"type":"method","name":"clear_tags!","children":[],"call":[" tag "]}," Lumberjack TaggedLoggerSupport pop_tags":{"type":"method","name":"pop_tags","children":[],"call":[" tag ","tagged_values [] ","tagged_values size - ","tagged_values size ","tagged_values size > "," Array ","@tags [] "," Array  [] "," Array  size - "," Array  size "," Array  size > "]}," Lumberjack TaggedLoggerSupport push_tags":{"type":"method","name":"push_tags","children":[],"call":[" tagged "]}," Lumberjack TaggedLoggerSupport tagged":{"type":"method","name":"tagged","children":[],"call":[" tag ","tag_hash []= ","tagged_values + "," Array "," tags [] "," tags ","tag_hash [] ","tags flatten each ","tags flatten "," Array  + "]}," Lumberjack TaggedLoggerSupport Formatter __formatter":{"type":"method","name":"__formatter","children":[],"call":[]}," Lumberjack TaggedLoggerSupport Formatter tags_text":{"type":"method","name":"tags_text","children":[],"call":["(send\n  (lvar :tags) :collect) join ","tags collect ","tags any? "," current_tags ","(send\n  (lvar : current_tags ) :collect) join "," current_tags  collect "," current_tags  any? "," current_ current_tags  "]}," Lumberjack TaggedLoggerSupport Formatter current_tags":{"type":"method","name":"current_tags","children":[],"call":[" Array ","tags [] ","tags is_a? ","@logger instance_variable_get ","@logger instance_variable_get  [] ","@logger instance_variable_get  is_a? "]}," Lumberjack TaggedLoggerSupport Formatter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Lumberjack TagFormatter dereference_formatter":{"type":"method","name":"dereference_formatter","children":[],"call":["Formatter  const_get new ","Formatter  const_get ","$~ [] upcase ","$~ [] ","formatter to_s gsub ","formatter to_s ","formatter is_a? ","formatter __formatter "]}," Lumberjack TagFormatter format":{"type":"method","name":"format","children":[],"call":["formatted []= ","name to_s ","formatter call ","formatter respond_to? ","formatter format ","formatter is_a? ","@formatters [] ","tags each ","(send\n  (send\n    (ivar :@formatters) :keys) :&\n  (send\n    (lvar :tags) :keys)) empty? ","@formatters keys & ","tags keys ","@formatters keys ","@formatters empty? ","@default_formatter nil? ","tags nil? "]}," Lumberjack TagFormatter clear":{"type":"method","name":"clear","children":[],"call":["@formatters clear "]}," Lumberjack TagFormatter remove":{"type":"method","name":"remove","children":[],"call":["@formatters delete ","name to_s "," Array each "," Array "]}," Lumberjack TagFormatter add":{"type":"method","name":"add","children":[],"call":["@formatters []= ","name to_s "," Array each "," Array "," remove "," key ","formatter nil? "," dereference_formatter ","@ dereference_formatter s []= "," dereference_formatter  nil? "," dereference_ dereference_formatter  "]}," Lumberjack TagFormatter remove_default":{"type":"method","name":"remove_default","children":[],"call":[]}," Lumberjack TagFormatter default":{"type":"method","name":"default","children":[],"call":[" dereference_formatter "," dereference_ dereference_formatter  "]}," Lumberjack TagFormatter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Lumberjack Logger closed?":{"type":"method","name":"closed?","children":[],"call":[]}," Lumberjack Logger tagged_logger!":{"type":"method","name":"tagged_logger!","children":[],"call":[" extend "]}," Lumberjack LogEntry tag":{"type":"method","name":"tag","children":[],"call":[" tags [] ","name to_s "," tags "]}," Lumberjack Formatter empty":{"type":"method","name":"empty","children":[],"call":[" new clear "," new "]}," Lumberjack Formatter StripFormatter call":{"type":"method","name":"call","children":[],"call":["obj to_s strip ","obj to_s "]}," Lumberjack Formatter ExceptionFormatter clean_backtrace":{"type":"method","name":"clean_backtrace","children":[],"call":[" backtrace_cleaner call "," backtrace_cleaner "]}," Lumberjack Formatter ExceptionFormatter initialize":{"type":"method","name":"initialize","children":[],"call":[" backtrace_cleaner= "]}," Lumberjack context?":{"type":"method","name":"context?","children":[],"call":["Thread  current [] ! ! ","Thread  current [] ! ","Thread  current [] ","Thread  current "]}," Lumberjack use_context":{"type":"method","name":"use_context","children":[],"call":["Thread  current []= ","Thread  current ","Context  new ","Thread  current [] "]}," Lumberjack TaggedLogging ClassMethods new":{"type":"method","name":"new","children":[],"call":["logger tagged_logger! ","logger respond_to? ","logger is_a? ","logger tagged_logger!  tagged_logger tagged_logger! ! ","logger tagged_logger!  respond_to? ","logger tagged_logger!  is_a? "]}," Lumberjack TaggedLogging included":{"type":"method","name":"included","children":[],"call":["base singleton_class send ","base singleton_class "]}," Lumberjack Severity coerce":{"type":"method","name":"coerce","children":[],"call":[" label_to_level ","value is_a? "]}," Lumberjack Logger untagged":{"type":"method","name":"untagged","children":[],"call":[" set_thread_local_value "," tag "," thread_local_value ","Lumberjack  use_context "]}," Lumberjack Logger remove_tag":{"type":"method","name":"remove_tag","children":[],"call":["@tags delete ","name to_s ","tag_names each ","thread_tags delete "," thread_local_value "," thread_local_value  delete "]}," Lumberjack Logger debug!":{"type":"method","name":"debug!","children":[],"call":[" level= "]}," Lumberjack Logger info!":{"type":"method","name":"info!","children":[],"call":[" level= "]}," Lumberjack Logger warn!":{"type":"method","name":"warn!","children":[],"call":[" level= "]}," Lumberjack Logger error!":{"type":"method","name":"error!","children":[],"call":[" level= "]}," Lumberjack Logger fatal!":{"type":"method","name":"fatal!","children":[],"call":[" level= "]}," Lumberjack Logger with_level":{"type":"method","name":"with_level","children":[],"call":[" push_thread_local_value ","Severity  coerce "]}," Lumberjack Formatter TruncateFormatter call":{"type":"method","name":"call","children":[],"call":["obj [] ","@length - ","obj length > ","obj length ","obj is_a? "]}," Lumberjack Formatter TruncateFormatter initialize":{"type":"method","name":"initialize","children":[],"call":[]}," Lumberjack Formatter StructuredFormatter with_object_reference":{"type":"method","name":"with_object_reference","children":[],"call":["references delete ","obj object_id ","references << ","RecusiveReferenceError  new ","references include? ","obj is_a? "]}," Lumberjack Formatter StructuredFormatter call_with_references":{"type":"method","name":"call_with_references","children":[],"call":["@formatter format ","array << ","value is_a? "," call_with_references ","obj each "," with_object_reference ","obj size != ","obj size ","obj respond_to? ","obj is_a? ","hash []= ","name to_s ","references << ","references include? ","references delete ","obj object_id ","value object_id "," call_with_references  is_a? "," call_with_references  object_id "]}}