{" POSIX Spawn adjust_process_spawn_argv":{"type":"method","name":"adjust_process_spawn_argv","children":[],"call":["args [] ","args [] respond_to? ! ","args [] respond_to? ","args [] =~ ","args size == ","args size "," system_command_prefixes + "," system_command_prefixes ","args [] is_a? "]}," POSIX Spawn fd_to_io":{"type":"method","name":"fd_to_io","children":[],"call":["object to_io ","object respond_to? ","IO  for_fd ","object >= "]}," POSIX Spawn fd?":{"type":"method","name":"fd?","children":[],"call":["object to_io nil? ! ","object to_io nil? ","object to_io ","object respond_to? ","object >= "]}," POSIX Spawn default_file_reopen_info":{"type":"method","name":"default_file_reopen_info","children":[],"call":[]}," POSIX Spawn normalize_process_spawn_redirect_file_options!":{"type":"method","name":"normalize_process_spawn_redirect_file_options!","children":[],"call":["options []= ","value []= ","OFLAGS  [] ","value [] ","value [] respond_to? ","defaults [] ","value size "," default_file_reopen_info ","value size < ","value respond_to? "," fd? ! "," fd? ","options to_a each ","options to_a "," default_file_reopen_info  []= "," default_file_reopen_info  [] "," default_file_reopen_info  [] respond_to? "," default_file_reopen_info  size "," default_file_reopen_info  size < "," default_file_reopen_info  respond_to? "]}," POSIX Spawn flatten_process_spawn_options!":{"type":"method","name":"flatten_process_spawn_options!","children":[],"call":["options delete ","options []= ","key to_ary each ","key to_ary ","key respond_to? ","options to_a each ","options to_a "]}," POSIX Spawn extract_process_spawn_arguments":{"type":"method","name":"extract_process_spawn_arguments","children":[],"call":[" adjust_process_spawn_argv ","env merge! ","options delete ","options key? ","args shift to_hash ","args shift ","args [] respond_to? ","args [] "," normalize_process_spawn_redirect_file_options! "," flatten_process_spawn_options! ","args pop to_hash ","args pop "," adjust_process_spawn_ adjust_process_spawn_argv  ","args shift to_hash  merge! ","args pop to_hash  delete ","args pop to_hash  key? "," normalize_process_spawn_redirect_file_args pop to_hash ! "," flatten_process_spawn_args pop to_hash ! "]}," POSIX Spawn popen4":{"type":"method","name":"popen4","children":[],"call":["fd close ","(lvar :ird) each "," spawn ","argv + ","(or\n  (begin\n    (if\n      (send\n        (send\n          (lvar :argv) :[]\n          (int -1)) :is_a?\n        (const nil :Hash))\n      (send\n        (lvar :argv) :pop) nil))\n  (hash)) merge ","argv pop ","argv [] is_a? ","argv [] ","IO  pipe "]}," POSIX Spawn `":{"type":"method","name":"`","children":[],"call":["io close ","(lvar :r) each "," Process  waitpid ","r read ","w close ","pid > "," spawn ","IO  pipe "," system_command_prefixes + "," system_command_prefixes ","ENV  [] ","RUBY_PLATFORM  =~ "," Process  wait spawn  "," spawn  > "]}," POSIX Spawn system":{"type":"method","name":"system","children":[],"call":["$? exitstatus == ","$? exitstatus "," Process  waitpid ","pid <= "," spawn "," Process  wait spawn  "," spawn  <= "]}," POSIX Spawn fspawn":{"type":"method","name":"fspawn","children":[],"call":[" exit! "," Kernel  exec "," Dir  chdir ","options [] ","ENV  []= ","env each ","ENV  replace ","options [] == ","key reopen ","File  open ","val is_a? ","key close ","key close_on_exec= ","key respond_to? ","val == "," fd_to_io "," fd? ","options map "," fork "," raise ","argv [] size != ","argv [] size ","argv [] ","argv [] is_a? ! ","argv [] is_a? ","argv is_a? ! ","argv is_a? ","badopt [] inspect ","badopt [] ","(sym :chdir) include? ! ","(sym :chdir) include? "," fd? ! ","options find "," extract_process_spawn_arguments ","argv + ","RUBY_VERSION  =~ ","Process  setpgid ","pgroup == ","val close_on_exec= ","options each ","valid_options include? ! ","valid_options include? "," fd_to_io  reopen "," fd_to_io  is_a? "," fd_to_io  close "," fd_to_io  close_on_exec= "," fd_to_io  respond_to? "," fd_to_io  == ","options []  == "," fd_to_io id_options include? ! "," fd_to_io id_options include? "]}," POSIX Spawn pspawn":{"type":"method","name":"pspawn","children":[],"call":[" _pspawn "," raise "," respond_to? "," extract_process_spawn_arguments ","options []= ","ENV  merge ","options [] == ","options [] "]}," POSIX Spawn spawn":{"type":"method","name":"spawn","children":[],"call":[" fspawn "," Process  spawn "," Process  respond_to? "," pspawn "," respond_to? "]}," POSIX Spawn Child waitpid":{"type":"method","name":"waitpid","children":[],"call":[" Process  waitpid "]}," POSIX Spawn Child read_and_write":{"type":"method","name":"read_and_write","children":[],"call":[" raise ","(send\n  (send\n    (lvar :out) :size) :+\n  (send\n    (lvar :err) :size)) > ","out size + ","err size ","out size ","ready [] any? ","ready [] ","t < ","timeout - ","Time  now - ","Time  now ","fd close ","readers delete ","buf << ","fd readpartial ","fd == ","ready [] each ","writers delete ","stdin close ","input size == ","input size ","input [] ","fd write_nonblock ","ready nil? ","IO  select ","readers + ","writers any? ","readers any? ","timeout <= ","max <= ","input bytesize == ","input bytesize ","input force_encoding ","input respond_to? ","(send\n  (send\n    (ivar :@out) :size) :+\n  (send\n    (ivar :@err) :size)) > ","@out size + ","@err size ","@out size ","input send ","input dup force_encoding ","input dup ","@err force_encoding ","@out force_encoding ","fd set_encoding ","(lvar :stdin) each ","stdin respond_to? ","@out respond_to? ","err force_encoding ","out force_encoding ","str force_encoding ","(lvar :out) each ","input encoding ","out respond_to? ","(send\n  (send\n    (lvar :outimeout - ) :size) :+\n  (send\n    (lvar :err) :size)) > ","(send\n  (send\n    (lvar :out) :fd write_nonblock ) :+\n  (send\n    (lvar :err) :fd write_nonblock )) > ","outimeout -  size + ","out fd write_nonblock  + ","err fd write_nonblock  ","outimeout -  size ","out fd write_nonblock  ","IO  select  [] any? ","IO  select  [] ","timeout -  < ","timeout - imeoutimeout -  - ","readers deletimeout - e ","fd readpartimeout - ial ","IO  select  [] each ","writimeout - ers deletimeout - e ","stimeout - din close ","inputimeout -  size == ","input []  size == ","input send  size == ","input dup force_encoding  size == ","input fd write_nonblock  == ","inputimeout -  size ","input []  size ","input send  size ","input dup force_encoding  size ","input fd write_nonblock  ","inputimeout -  [] ","input []  [] ","input send  [] ","input dup force_encoding  [] ","fd writimeout - e_nonblock ","IO  select  nil? ","IO  selectimeout -  ","writimeout - ers any? ","timeout - imeoutimeout -  <= ","inputimeout -  bytimeout - esize == ","input []  bytesize == ","input send  bytesize == ","input dup force_encoding  bytesize == ","input bytefd write_nonblock  == ","inputimeout -  bytimeout - esize ","input []  bytesize ","input send  bytesize ","input dup force_encoding  bytesize ","input bytefd write_nonblock  ","inputimeout -  force_encoding ","input []  force_encoding ","input send  force_encoding ","input dup force_encoding  force_encoding ","inputimeout -  respond_timeout - o? ","input []  respond_to? ","input send  respond_to? ","input dup force_encoding  respond_to? ","(send\n  (send\n    (ivar :@outimeout - ) :size) :+\n  (send\n    (ivar :@err) :size)) > ","(send\n  (send\n    (ivar :@out) :fd write_nonblock ) :+\n  (send\n    (ivar :@err) :fd write_nonblock )) > ","@outimeout -  size + ","@out fd write_nonblock  + ","@err fd write_nonblock  ","@outimeout -  size ","@out fd write_nonblock  ","inputimeout -  send ","input []  send ","input send  send ","input dup force_encoding  send ","inputimeout -  dup force_encoding ","input []  dup force_encoding ","input send  dup force_encoding ","input dup force_encoding  dup force_encoding ","inputimeout -  dup ","input []  dup ","input send  dup ","input dup force_encoding  dup ","@outimeout -  force_encoding ","fd setimeout - _encoding ","(lvar :stimeout - din) each ","stimeout - din respond_timeout - o? ","@outimeout -  respond_timeout - o? ","outimeout -  force_encoding ","stimeout - r force_encoding ","(lvar :outimeout - ) each ","inputimeout -  encoding ","input []  encoding ","input send  encoding ","input dup force_encoding  encoding ","outimeout -  respond_timeout - o? "]}," POSIX Spawn Child exec!":{"type":"method","name":"exec!","children":[],"call":["fd close ","(lvar :stdin) each "," raise "," waitpid "," Process  kill ","@status nil? "," read_and_write "," popen4 ","@argv + ","@pgroup_kill ! "," waitpid  nil? "]}," POSIX Spawn Child success?":{"type":"method","name":"success?","children":[],"call":["@status success? "]}," POSIX Spawn Child initialize":{"type":"method","name":"initialize","children":[],"call":[" exec! ","@options delete ","@options [] nil? ","@options [] ","options dup "," extract_process_spawn_arguments ","@options delete ! ","@options []= ","options dup  delete ","options dup  [] nil? ","options dup  [] ","options dup  delete ! ","options dup  []= "]}," POSIX Spawn system_command_prefixes":{"type":"method","name":"system_command_prefixes","children":[],"call":["ENV  [] ","RUBY_PLATFORM  =~ "]}," IO posix_fileno":{"type":"method","name":"posix_fileno","children":[],"call":["JRuby  reference getOpenFile getMainStream getDescriptor getChannel getFDVal ","JRuby  reference getOpenFile getMainStream getDescriptor getChannel ","JRuby  reference getOpenFile getMainStream getDescriptor ","JRuby  reference getOpenFile getMainStream ","JRuby  reference getOpenFile ","JRuby  reference "]}," POSIX Spawn Child build":{"type":"method","name":"build","children":[],"call":[]}}